{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012041000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3527160, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE445.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3527160, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3527160, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE445.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x008\\n'", "DS1TRBAL": "b'T4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x031\\x00\\x06\\x035\\x00\\x02\\x009'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x17O\\x01\\x04\\x17O\\x114\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-06-22T00:00:00", "modifydate": "2004-06-22T11:34:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-466"}, "text": "REGULAR CBT TAPE - VERSION 466    FILE:  445\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT466.FILE445\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   104 MEMBERS COUNTED; CUMULATIVE SIZE IS 32,613 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/22/04    11:34:25    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$BUGS": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00X\\x01\\x03\\x15_\\x01\\x04\\x15?\\x125\\x00 \\x00$\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-06-04T00:00:00", "modifydate": "2004-06-01T12:35:58", "lines": 32, "newlines": 36, "modlines": 0, "user": "U765139"}, "text": "\n       The following bugs and limitations need fixing.\n\nDISAS does not always generate USING statements in the right place.\n\nThe tables to hold sections, entry points and externs are fixed size. If they\nfill up the dissassembly fails. They should be dynamically sized.\n\nImmediate and relative instructions are not supported.\n\nRegisters should be equated to R0, R1, etc instead of appearing as numbers.\n\nExtended Mnemonics should be generated for conditional branch instructions\n\nVector instructions are not supported.\n\nInformation from SYM cards is not fully exploited. SYM data should be used to\ntell what is instructions and what is data. And used to format the data area.\n\nThe data area should be better formatted. Fields should be the length\nthey are referenced as.\n\nIt should be possible to enter parameters to say what parts are instructions\nand how to format data. And where USINGs and DROPs are.\n\nInstructions for IEEE format floating point instructions and additional floating\npoint registers are not supported.\n\nZ/Series instructions are not supported.\n\nDISYM produces duplicate DSECTs if more than one module in a LMOD\ninvokes a given DSECT.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CLIST": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x17\\x01\\x001?\\x01\\x01\"\\x0f\\x123\\x00\\x7f\\x00P\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2000-11-08T00:00:00", "modifydate": "2001-08-08T12:33:17", "lines": 127, "newlines": 80, "modlines": 0, "user": "U765139"}, "text": "PROC 1 DSNAME\n\n/* Function to disassemble an object deck or a load module\n\n/* Change the next 2 lines to your DSNs.\nSET LLIB =  FDDSTO7.GEN.LOAD      /* DISAS, SORCEREI, DELINKI, etc */\nSET CLIB =  CEE.SCEERUN           /* Run time for DELINKI */\n\nCONTROL NOFLUSH ASIS /* MSG LIST SYMLIST CONLIST\n\nERROR +\n  DO\n    SET CC = &LASTCC\n    ERROR OFF\n    WRITE  ****** Error during setup *******\n    WRITE  LASTCC= &CC\n    CONTROL NOMSG\n    FREE DD(RDDD,PRDD,DADD,PUDD,OUT,LINKCNTL,SYSLIB)\n    ALLOC DD(SYSIN)    DS(*) REUSE\n    ALLOC DD(SYSPRINT) DS(*) REUSE\n    EXIT CODE(20)\n  END\n\nISPEXEC VGET ( ZYEAR ZMONTH ZDAY ZTIMEL ZSCREEN)\nALLOCATE FILE(RDDD) SPACE(1 10) TRACK REUSE +\n      LRECL(80)  RECFM(F B)\nALLOC F(PRDD&ZSCREEN) SPACE(1 50) TRACK REUSE +\n      LRECL(132) RECFM(F B) MOD DELETE DSN(DISAS.TEMP.PRDD&ZSCREEN)\nALLOC F(PRDD) MOD DSN(DISAS.TEMP.PRDD&ZSCREEN)\nALLOC F(DADD&ZSCREEN) SPACE(1 50) TRACK REUSE +\n      LRECL(80)  RECFM(F B) MOD DELETE DSN(DISAS.TEMP.DADD&ZSCREEN)\nALLOC F(DADD) MOD DSN(DISAS.TEMP.DADD&ZSCREEN)\nALLOC F(PUDD)    DS(*) REUSE\nALLOC F(OUT)     DS(*) REUSE\n\n/* find if input is an object deck or load module\nLISTDSI &DSNAME\nIF &SYSRECFM NE U THEN +\n  DO\n    /*    Establish the environment needed by DISAS    */\n    ALLOCATE FILE(SYSPUNCH) DATASET(&DSNAME) SHR REUSE\n\n    /*  invoke DISAS\n    ERROR OFF\n    CALL '&LLIB(SORCEREM)'\n    FREE F(SYSPUNCH)\n\n  END\nELSE +\n  DO\n    /*    Extract the member name from the DSN         */\n\n    SET LOC1 = &SYSINDEX((,&DSNAME)\n    SET RB = &STR())          /* RIGHT BRACKET */\n    SET LOC2 = &SYSINDEX(&STR(&RB),&STR(&DSNAME))\n    SET MEM = &SUBSTR(&LOC1+1:&LOC2-1,&DSNAME)\n\n    /*    Establish the environment needed by SORCEREI */\n\n    ALLOCATE FILE(SYSLIB) DATASET(&DSNAME) SHR REUSE RELEASE\n\n    ALLOCATE FILE(SYSLIN) SPACE(1 10) TRACK REUSE +\n        LRECL(80) RECFM(F B) MOD DELETE DSN(DISAS.TEMP.INPUT)\n    ALLOC F(SYSPRINT) DS(*) REUSE\n    ALLOC F(LINKCNTL) DUMMY REUSE\n    ALLOC F(SYSIN) SPACE(1) TRACK REUSE +\n        LRECL(80) RECFM(F B) BLKSIZE(80)\n\n    /*  Place the member command into the sysin file required by   */\n    /*      SORCEREI.                                              */\n\n    OPENFILE SYSIN OUTPUT\n    SET SYSIN = &STR(MEMBER(&MEM).)\n    PUTFILE SYSIN\n    CLOSFILE SYSIN\n\n    /*  invoke SORCEREI\n\n    ERROR OFF\n    ISPEXEC LIBDEF ISPLLIB DATASET ID('&LLIB' '&CLIB') STACK\n    ISPEXEC SELECT CMD(SORCEREI)\n    ISPEXEC LIBDEF ISPLLIB\n\n    FREE DD(LINKCNTL,SYSLIB)\n    ALLOC F(SYSIN) DS(*) REUSE\n  END\n\nFREE DD(RDDD,PRDD,DADD,PUDD,OUT)\n/* display the results of the disassembly\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC CONTROL DISPLAY SAVE\n/* Use LMINIT to access the dataset\nISPEXEC LMINIT DATAID(DD) DDNAME(PRDD&ZSCREEN)\nSET &ICC = &LASTCC\nIF &ICC EQ 0 +\nTHEN +\n  DO\n    ISPEXEC BROWSE DATAID(&DD)\n    SET BCC = &LASTCC\n    ISPEXEC LMFREE DATAID(&DD)\n  END\nELSE SET BCC = 0\nSET HZERRLM = &ZERRLM /* hold error message\n\nISPEXEC LMINIT DATAID(DD) DDNAME(DADD&ZSCREEN)\nSET &ICC = &LASTCC\nIF &ICC EQ 0 +\nTHEN +\n  DO\n    ISPEXEC BROWSE DATAID(&DD)\n    SET BCC = &LASTCC\n    ISPEXEC LMFREE DATAID(&DD)\n  END\nELSE SET BCC = 0\nSET HZERRLM = &ZERRLM /* hold error message\n\nISPEXEC CONTROL DISPLAY RESTORE\nISPEXEC CONTROL ERRORS CANCEL\n\nIF &ICC NE 0 OR &BCC NE 0 THEN +\n  DO\n    /* give out PDF's error message\n    WRITE EMBRO&ICC&BCC.E &HZERRLM\n  END\n\nFREE DD(PRDD&ZSCREEN,DADD&ZSCREEN)\nEXIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CLIST2": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00G\\x01\\x01'O\\x01\\x01'_\\x12H\\x00_\\x00_\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-10-01T00:00:00", "modifydate": "2001-10-02T12:48:47", "lines": 95, "newlines": 95, "modlines": 0, "user": "U765139"}, "text": "PROC 1 DSNAME\n\n/* Create skeleton dissassembly from SYM records only\n\n/* Change the next line to your DSN.\nSET LLIB =  FDDSTO7.GEN.LOAD      /* DISAS, SORCEREI, DELINKI, etc */\n\nCONTROL NOFLUSH ASIS /* MSG LIST SYMLIST CONLIST\n\nERROR +\n  DO\n    SET CC = &LASTCC\n    ERROR OFF\n    WRITE  ****** Error during setup *******\n    WRITE  LASTCC= &CC\n    CONTROL NOMSG\n    FREE DD(RDDD,PRDD,DADD,PUDD,OUT,LINKCNTL,SYSLIB)\n    ALLOC DD(SYSIN)    DS(*) REUSE\n    ALLOC DD(SYSPRINT) DS(*) REUSE\n    EXIT CODE(20)\n  END\n\nISPEXEC VGET (ZSCREEN)\nALLOCATE FILE(RDDD) SPACE(1 10) TRACK REUSE +\n      LRECL(80)  RECFM(F B)\nALLOC F(PRDD&ZSCREEN) SPACE(1 50) TRACK REUSE +\n      LRECL(132) RECFM(F B) MOD DELETE DSN(DISAS.TEMP.PRDD&ZSCREEN)\nALLOC F(PRDD) MOD DSN(DISAS.TEMP.PRDD&ZSCREEN)\nALLOC F(DADD&ZSCREEN) SPACE(1 50) TRACK REUSE +\n      LRECL(80)  RECFM(F B) MOD DELETE DSN(DISAS.TEMP.DADD&ZSCREEN)\nALLOC F(DADD) MOD DSN(DISAS.TEMP.DADD&ZSCREEN)\nALLOC F(PUDD)    DS(*) REUSE\nALLOC F(OUT)     DS(*) REUSE\n\n/* find if input is an object deck or load module\nLISTDSI &DSNAME\nIF &SYSRECFM NE U THEN +\n  DO\n    /*    Establish the environment needed by DISSYM   */\n    ALLOCATE FILE(SYSUT1) DATASET(&DSNAME) SHR REUSE\n    ERROR OFF\n    CALL '&LLIB(DISSYM)'\n    FREE F(SYSUT1)\n\n  END\nELSE +\n  DO\n    /*    Establish the environment needed by DISYM */\n    ALLOCATE FILE(SYSLIN) DATASET(&DSNAME) SHR REUSE\n    ALLOC F(SYSPUNCH) DUMMY REUSE\n    ERROR OFF\n    CALL '&LLIB(DISYM)'\n    FREE DD(SYSLIN,SYSPUNCH)\n  END\n\nFREE DD(RDDD,PRDD,DADD,PUDD,OUT)\n/* display the results of the disassembly\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC CONTROL DISPLAY SAVE\n/* Use LMINIT to access the dataset\nISPEXEC LMINIT DATAID(DD) DDNAME(PRDD&ZSCREEN)\nSET &ICC = &LASTCC\nIF &ICC EQ 0 +\nTHEN +\n  DO\n    ISPEXEC BROWSE DATAID(&DD)\n    SET BCC = &LASTCC\n    ISPEXEC LMFREE DATAID(&DD)\n  END\nELSE SET BCC = 0\nSET HZERRLM = &ZERRLM /* hold error message\n\nISPEXEC LMINIT DATAID(DD) DDNAME(DADD&ZSCREEN)\nSET &ICC = &LASTCC\nIF &ICC EQ 0 +\nTHEN +\n  DO\n    ISPEXEC BROWSE DATAID(&DD)\n    SET BCC = &LASTCC\n    ISPEXEC LMFREE DATAID(&DD)\n  END\nELSE SET BCC = 0\nSET HZERRLM = &ZERRLM /* hold error message\n\nISPEXEC CONTROL DISPLAY RESTORE\nISPEXEC CONTROL ERRORS CANCEL\n\nIF &ICC NE 0 OR &BCC NE 0 THEN +\n  DO\n    /* give out PDF's error message\n    WRITE EMBRO&ICC&BCC.E &HZERRLM\n  END\n\nFREE DD(PRDD&ZSCREEN,DADD&ZSCREEN)\nEXIT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DESC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00C\\x01\\x04\\x15?\\x01\\x04\\x15_\\x12E\\x00\\x13\\x00\\x11\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2004-06-01T00:00:00", "modifydate": "2004-06-03T12:45:43", "lines": 19, "newlines": 17, "modlines": 0, "user": "U765139"}, "text": "\n  This is a rewrite of the dissassembler package on files U08010,\nU08013 and U08014 of the UK Guide tape (CBT overflow tape file 12).  It\nreads an object deck as input. Drivers to delink load modules and\ndisassemble them are also provided.\n\n  You need either DELINK0, which is provided in this file, or DELINKI\noff CBT file 90 to delink load modules. See CBT file 316 for a\ndissassembly of DELINK0 with full instructions.  You can get an\nexecutable version of DELINKI on CBT file 135 if you don't have a PL/I\ncompiler.\n\n  The test job needs COMPARE  off CBT file 149 to compare LMODS or an\nequivalent product.\n\n\nUnfortunately my company is downsizing, so from the end of June 2004 I\nwill not have access to a mainframe. So if anyone wants to enhance this\nthey are welcome, I will not be able to.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DISAS": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x00\\x06\\x0f\\x01\\x04\\x15_\\x12\\x16\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-29T00:00:00", "modifydate": "2004-06-03T12:16:52", "lines": 15, "newlines": 15, "modlines": 0, "user": "U765139"}, "text": "//U765139D JOB AT,'DISAS',MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*          DISASSEMBLE OBJECT MODULE\n//*\n//*   'LISTING' OUTPUT TO PRDD\n//*    SOURCE OUTPUT TO DADD\n//*\n//DISAS  EXEC PGM=DISAS\n//STEPLIB DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR\n//RDDD    DD DSN=FDDSTO7.DISAS.FILE445(DELINK0),DISP=SHR <=== INPUT\n//PRDD    DD SYSOUT=1\n//PUDD    DD SYSOUT=2\n//DADD    DD SYSOUT=3\n//OUT     DD SYSOUT=4\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DISCLA": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nDisclaimer:\nThis program is only guaranteed to consume disk space. I take no responsibility\nfor what it does to you or what you do with it.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DISYM": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x04\\x00o\\x01\\x04\\x15_\\x12\"\\x00$\\x00#\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-01-06T00:00:00", "modifydate": "2004-06-03T12:22:00", "lines": 36, "newlines": 35, "modlines": 0, "user": "U765139"}, "text": "//U765139D JOB AT,'DISAS',MSGCLASS=X,NOTIFY=U765139,CLASS=A\n//*\n//*          DISASSEMBLE LOAD MODULE CONTAINING SYM RECORDS\n//*\n//     SET   INPUT=FDDSTO7.GEN.LOAD     <=== INPUT DATASET\n//     SET   LMOD=DISAS                 <=== LMOD WITH SYM RECORDS\n//*\n//DISYM   EXEC PGM=DISYM\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR\n//SYSLIN   DD DSN=&INPUT(&LMOD),DISP=SHR\n//SYSPUNCH DD DSN=&OBJECT,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,(1,10))\n//PRDD     DD SYSOUT=1\n//PUDD     DD SYSOUT=2\n//DADD     DD SYSOUT=3\n//*\n//GENCARD EXEC PGM=GENCARD,PARM='MEMBER(&LMOD).'\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR\n//SYSPUNCH DD DSN=&CARD,UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS)\n//*\n//DELINKI EXEC PGM=DELINKI\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR <=== DISAS, DELINKI ALSO\n//*        DD DSN=CEE.SCEERUN,DISP=SHR  <=== IF NOT IN LINKLIST\n//SYSLIB   DD DISP=SHR,DSN=&INPUT\n//SYSLIN   DD DSN=&OBJECT,DISP=(MOD,PASS)\n//SYSPRINT DD SYSOUT=0\n//LINKCNTL DD DUMMY\n//SYSIN    DD DSN=&CARD,DISP=(OLD,DELETE)\n//*\n//DISAS  EXEC PGM=DISAS\n//STEPLIB DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR\n//RDDD    DD DSN=&OBJECT,DISP=(OLD,DELETE)\n//PRDD    DD SYSOUT=1\n//PUDD    DD SYSOUT=2\n//DADD    DD SYSOUT=3\n//OUT     DD SYSOUT=4\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$HISTORY": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x04\\x15_\\x01\\x04\\x15_\\x123\\x00\\xc0\\x00\\xc0\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-06-03T00:00:00", "modifydate": "2004-06-03T12:33:35", "lines": 192, "newlines": 192, "modlines": 0, "user": "U765139"}, "text": "           The following enhancements have been made to DISAS.\n\nDocument code and add comments. Ongoing since 1991. Most of my comments are in\nlower case, the original source was all upper case. Signatures have only been\nadded to changes to the actual code.\n\nJune 2004\nTidy up package ready to send to CBT tape.\n\nMarch 2004\nFix support for object decks containing more than one csect.\n\nFebruary 2004\nMake TXT entends off end of setion message say how far it does.\nFix handling of RLD entries for object decks containing more than one csect.\n\nJanuary 2004\nHandle concatenated object decks in the input. This supports SYM data extracted\nby DISYM followed by the object decks produced by DELINKI for multi CSECT LMODs.\n\nDecember 2003\nWrite PRINTP to print and punch output. PRINTA now just prints output. Eliminate\nPDOFF flag and change calls to PRINTA to PRINTP if data needs to be punched.\nHandle RLD entries for object decks containing more than one csect.\nHandle object decks with the section length only on the END card.\n\nSeptember-November 2003\nConvert most modules to standard linkage conventions.\nDrop CXN.\n\nJuly 2003\nGenerate offset from extrns correctly.\n\nJune 2003\nHandle CXDs.\nGenerate V type address constants as VCONs.\nGenerate DSECTs instead of DXDs when the PR has alignment other than byte.\n\nMay 2003\nExpand RLD entries into array so they can be sorted. This is much faster for\nlarge numbers of RLD entries and fixes a bug if the csect starts with an adcon.\nCorrectly generate COM length.\nHandle Q type address constants and DXDs.\n\nMarch-April 2003\nMake address table in SAVA dynamic so it never fills up.\nMake RLD entry table in RLD dynamic so it never fills up.\n\nNovember-December 2002\nHandle csects starting with a DS correctly.\n\nApril 2002\nPrevent 0C4 if all EXTRNs invalid (eg PRs).\n\nJanuary 2002\nVet data length on RLD and TXT cards.\n\nDecember 2001\nSupport for multiple csects in one object deck (partial).\n\nNovember 2001\nProcess other ESD entries on a card if one is invalid.\nGet ESD ID correctly for 2nd or 3rd entry on ESD card.\nVet ESD data length on an ESD card.\nDynamically expand the buffer for TXT card headers if it fills up.\n\nOctober 2001\nPrevent 0C4 if no valid ESD entry found.\nMake message about overlapping TXT cards more informative.\n\nSeptember 2001\nFinally ensure we don't lose part of the last TXT card or get the last ADCON\nduplicated.\nTreat the end of the program as a non-executable.\n\nAugust 2001\nGet clist to work if invoked from both sides of a split screen.\nPut the address an EQUate refers to into the ADDR2 field on the listing.\n\nJuly 2001\nHandle SYM entries for EQU * generated by ASM XF or Tachyon Cross Assembler.\n\nJune 2001\nFinish putting TXT into dynamic area.\nHandle CSECTs with no TXT, ie just DS, correctly.\nHandle Zeroes-or-Blanks before a DS correctly.\n\nMay 2001\nFix bugs in DISYM.\nPut TXT in dynamic area pointed to by section descriptor. This ensures\noverlapping TXT cards are properly handled and we never run out of space for\nTXT.\n\nApril 2001\nWrite DISYM to extract SYM records from a load module.\n\nJanuary 2001\nFinish getting SYM to print and punch DSECTs in SYM records.\n\nDecember 2000\nPrevent storage overwrite if the RLD table overflows.\nConvert most modules to use register equates.\nGet SYM to print/punch DSECTs in SYM records.\n\nNovember 2000\nAdded support for CSP instruction.\nMake output to PRDD blocked.\nAdded SORCEREM to process DS containing more than one object deck, such\nas SMPE sysmods.\nAdded clist to disassemble LMODs or object decks under ISPF.\n\nSeptember 2000\nPut out error message if text extends after the section length in the ESD\nentry for a section instead of abending.\nGenerate equates inline where they are needed. This fixes a bug if an equate in\nprivate code is before any other label and another if two named labels are at\nthe same place. This is most likely to happen with SYM input but could happen if\ntwo ENTRYs were in the same place. Also stops equate table overflow.\n\nAugust 2000\nStart exploiting SYM cards by naming addresses.\n\nJuly 2000\nGenerate a trailing DS to pad the section out to it's proper length if\nnecessary.\nAdded dummy entry point called FESNAP to SORCERER so it will link cleanly with\nDELINK0.\n\nJune 2000\nPut comment on hex constants with the character representation of the constant.\nAdd CA's 'secret' SVC's to the SVC description table.\nFlag BALR, BCTR, BCR, BSM, BASSM, BASR or BAKR to R0 as not branching\ninstructions. This also slightly reduces the chance of mistaking data for code.\nSwitch off punching when PASS1 puts out messages.\n\nMay 2000.\nRestructured table of addresses referenced in the program and added the CSECT\nname to it. This ensures that equates are generated correctly unless\ndissassembling private code (effectivly a CSECT with a name of spaces) and the\nfirst equate is before any ordinary label in the output. This also prepares to\nuse SYM records to name the labels.\nGenerate extended mnemonics for unconditional branches and NOPs.\nPut a comment on BCR 15,0 to say it is a hardware serialization and checkpoint\nsynchronisation function.\n\nApril 2000.\nReplaced the instruction timing in the comment field of the listing with the\ncharacter representation of the instructions to make it easier to tell if they\nare actually text. Also added instruction characteristics flags, b - branching\ninstruction, i - interruptible instruction, p - privileged instruction, q -\nsemi-privileged instruction and c - instruction sets CC.\n\nMarch 2000\nTesting SORCEREI to dissassemble multiple CSECTs in a LMOD revealed I needed to\nFREEPOOL all DCBs before exiting DISAS and not put /* at end of output.\n\nJanuary 2000.\nAdded support for RSECTs and AMODE and RMODE other than 24. Set return code to\nzero on exit\n\nDecember 1999.\nAdded support for PLO and changed header to ESA/390 since it now supports all\n390 instructions.\n\nJuly 1999.\nAdded ESD ID to start message.\nOnly print length and EPA in the END message if they are present in the END\ncard.\n\nJune 1999.\nSupport added for S/370, XA, ESA/370 and ESA/390 instructions. This includes\nsupport for 2 byte opcodes and 5 byte mnemonics.\nRemove non-XA instructions.\nChanged header to ESA/370.\nSupport for Private Code added.\nAdded check for section table overflow.\nAdded check for entry table overflow.\nPut out message with info from the END card.\nAllow 5000 TXT cards instead of 500.\n\nMay 1999.\nSupport weak external references (WXTRNs).\nAdded section name to start message.\nCheck BASR as well as BALR instructions for USING bases.\nAdd SVC description to SVC calls.\n\nApril 1999.\nGenerate SVC number correctly to support 1 and 3 byte SVC numbers.\nFixed bug printing the equate table at end of output.\n\n1994.\nChanged DCB's to recfm FB instead of recfm F.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INST": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\x04\\x15O\\x01\\x04\\x15O\\x12B\\x00\\xaa\\x00\\xa5\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-06-02T00:00:00", "modifydate": "2004-06-02T12:42:37", "lines": 170, "newlines": 165, "modlines": 0, "user": "U765139"}, "text": "//U765139A JOB AT,'ASSEMBLE DISAS',MSGCLASS=X,NOTIFY=&SYSUID,CLASS=A\n//*\n//*   RUN THIS JOB TO INSTALL DISAS\n//*\n//    SET SOURCE=FDDSTO7.DISAS.FILE445 <=== THIS DATASET\n//    SET MODLIB=FDDSTO7.DISAS.MODLIB3 <=== MODULE LIBRARY\n//    SET OUTPUT=FDDSTO7.DISAS.LOAD    <=== DISAS GOES HERE\n//*\n//ALC     EXEC PGM=IEFBR14\n//MODLIB   DD DSN=&MODLIB,DISP=(,CATLG),UNIT=SYSDA,  <=== CHECK UNIT\n//            DSORG=PO,RECFM=U,LRECL=0,BLKSIZE=32760,\n//            SPACE=(TRK,(10,,10))\n//*\n//ASML PROC MEM=,TYPE=NOTEST,ASMOUT=*,LKOUT=*,AC=0,RENT=NORENT\n//ASM EXEC PGM=ASMA90,                   <=== OR IEV90\n//       PARM='OBJECT,NODECK,NORLD,TERM,&TYPE,&RENT'\n//SYSPRINT  DD SYSOUT=&ASMOUT\n//SYSTERM   DD SYSOUT=*\n//SYSPUNCH  DD DUMMY\n//SYSLIB    DD DSN=&SOURCE,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSIN     DD DSN=&SOURCE(&MEM),DISP=SHR\n//SYSUT1    DD DSN=&SYSUT1,UNIT=VIO,SPACE=(1700,(400,50),,,ROUND)\n//SYSLIN    DD UNIT=VIO,DISP=(,PASS),SPACE=(80,(200,50),,,ROUND)\n//*\n//LKED    EXEC PGM=IEWL,COND=(8,LT),\n//          PARM='MAP,LIST,LET,&TYPE,NCAL,&RENT,AC=&AC'\n//SYSPRINT  DD SYSOUT=&LKOUT\n//SYSTERM   DD SYSOUT=*\n//SYSLIN    DD DSN=*.ASM.SYSLIN,DISP=(OLD,DELETE)\n//*         DD DDNAME=SYSIN\n//SYSLMOD   DD DSN=&MODLIB(&MEM),DISP=SHR\n//SYSUT1    DD DSN=&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20),,,ROUND)\n//          PEND\n//*\n//ADDR     EXEC ASML,MEM=ADDR\n//ARL      EXEC ASML,MEM=ARL\n//ART      EXEC ASML,MEM=ART\n//AXN      EXEC ASML,MEM=AXN\n//BCV      EXEC ASML,MEM=BCV\n//BSC      EXEC ASML,MEM=BSC\n//CDN      EXEC ASML,MEM=CDN\n//CONST    EXEC ASML,MEM=CONST\n//COTR     EXEC ASML,MEM=COTR\n//COUNT    EXEC ASML,MEM=COUNT\n//CRLD     EXEC ASML,MEM=CRLD\n//*CXN      EXEC ASML,MEM=CXN\n//DECO     EXEC ASML,MEM=DECO\n//DISSYM   EXEC ASML,MEM=DISSYM\n//DISYM    EXEC ASML,MEM=DISYM\n//DS       EXEC ASML,MEM=DS\n//ESD      EXEC ASML,MEM=ESD\n//ESD0     EXEC ASML,MEM=ESD0\n//ESD1     EXEC ASML,MEM=ESD1\n//ESD2     EXEC ASML,MEM=ESD2\n//ESD5     EXEC ASML,MEM=ESD5\n//FLPT     EXEC ASML,MEM=FLPT\n//*FTXT     EXEC ASML,MEM=FTXT\n//FTXTA    EXEC ASML,MEM=FTXTA\n//FXPT     EXEC ASML,MEM=FXPT\n//GENCARD  EXEC ASML,MEM=GENCARD\n//INFO     EXEC ASML,MEM=INFO\n//LSYM     EXEC ASML,MEM=LSYM\n//PASS0    EXEC ASML,MEM=PASS0\n//PASS1    EXEC ASML,MEM=PASS1\n//PASS3    EXEC ASML,MEM=PASS3\n//PASS4    EXEC ASML,MEM=PASS4\n//*PASS5    EXEC ASML,MEM=PASS5\n//PR       EXEC ASML,MEM=PR\n//PRINTA   EXEC ASML,MEM=PRINTA\n//PRINTP   EXEC ASML,MEM=PRINTP\n//PUNCH    EXEC ASML,MEM=PUNCH\n//READA    EXEC ASML,MEM=READA\n//RLD      EXEC ASML,MEM=RLD\n//RLDSORT  EXEC ASML,MEM=RLDSORT\n//RR       EXEC ASML,MEM=RR\n//RS       EXEC ASML,MEM=RS\n//RX       EXEC ASML,MEM=RX\n//SAVA     EXEC ASML,MEM=SAVA\n//SI       EXEC ASML,MEM=SI\n//SORCERER EXEC ASML,MEM=SORCERER\n//SORCEREI EXEC ASML,MEM=SORCEREI\n//SORCEREM EXEC ASML,MEM=SORCEREM\n//SPPR     EXEC ASML,MEM=SPPR\n//SS       EXEC ASML,MEM=SS\n//SYM     EXEC ASML,MEM=SYM\n//*TEST     EXEC ASML,MEM=TEST\n//*TEST2    EXEC ASML,MEM=TEST2\n//TXT      EXEC ASML,MEM=TXT\n//USING    EXEC ASML,MEM=USING\n//*\n//LKED    EXEC PGM=IEWL,PARM='MAP,LIST,XREF',\n//         COND=(4,LT)\n//SYSPRINT  DD SYSOUT=*\n//SYSTERM   DD SYSOUT=*\n//SYSLIB    DD DSN=&MODLIB,DISP=SHR\n//SYSLMOD   DD DSN=&OUTPUT,DISP=SHR\n//TESTMOD   DD DSN=&MODLIB,DISP=SHR\n//SOURCE    DD DSN=&SOURCE,DISP=SHR\n//SYSUT1    DD DSN=&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20),,,ROUND)\n//SYSLIN    DD *\n INCLUDE TESTMOD(PASS0)\n INCLUDE TESTMOD(PASS1)\n INCLUDE TESTMOD(COTR)\n INCLUDE TESTMOD(PASS4)\n INCLUDE TESTMOD(PASS3)\n*INCLUDE TESTMOD(PASS5)\n INCLUDE TESTMOD(ESD)\n INCLUDE TESTMOD(ESD0)\n INCLUDE TESTMOD(ESD1)\n INCLUDE TESTMOD(ESD2)\n INCLUDE TESTMOD(ESD5)\n INCLUDE TESTMOD(RLD)\n INCLUDE TESTMOD(RLDSORT)\n INCLUDE TESTMOD(SYM)\n INCLUDE TESTMOD(RR)\n INCLUDE TESTMOD(RX)\n INCLUDE TESTMOD(RS)\n INCLUDE TESTMOD(SI)\n INCLUDE TESTMOD(SS)\n INCLUDE TESTMOD(ARL)\n INCLUDE TESTMOD(CONST)\n*INCLUDE TESTMOD(FTXT)\n INCLUDE TESTMOD(FTXTA)\n INCLUDE TESTMOD(CRLD)\n INCLUDE TESTMOD(AXN)\n INCLUDE TESTMOD(ADDR)\n INCLUDE TESTMOD(SAVA)\n INCLUDE TESTMOD(USING)\n INCLUDE TESTMOD(BCV)\n INCLUDE TESTMOD(FXPT)\n INCLUDE TESTMOD(FLPT)\n INCLUDE TESTMOD(PR)\n*INCLUDE TESTMOD(CXN)\n INCLUDE TESTMOD(CDN)\n INCLUDE TESTMOD(ART)\n INCLUDE TESTMOD(BSC)\n INCLUDE TESTMOD(PRINTP)\n INCLUDE TESTMOD(PRINTA)\n INCLUDE TESTMOD(INFO)\n INCLUDE TESTMOD(READA)\n INCLUDE TESTMOD(PUNCH)\n INCLUDE TESTMOD(SPPR)\n INCLUDE TESTMOD(DS)\n INCLUDE TESTMOD(COUNT)\n INCLUDE TESTMOD(DECO)\n INCLUDE TESTMOD(TXT)\n ENTRY PASS0\n NAME DISAS(R)\n INCLUDE TESTMOD(SORCERER)\n INCLUDE SOURCE(DELINK0)\n ENTRY SORCERER\n NAME SORCERER(R)\n INCLUDE TESTMOD(SORCEREI)\n ENTRY SORCEREI\n NAME SORCEREI(R)\n INCLUDE TESTMOD(SORCEREM)\n ENTRY SORCEREM\n NAME SORCEREM(R)\n INCLUDE TESTMOD(DISSYM)\n ENTRY DISSYM\n NAME DISSYM(R)\n INCLUDE TESTMOD(DISYM)\n INCLUDE TESTMOD(LSYM)\n ENTRY DISYM\n NAME DISYM(R)\n INCLUDE TESTMOD(GENCARD)\n ENTRY GENCARD\n NAME GENCARD(R)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$NOTES": {"ttr": 775, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n          General notes on dissassembling programs\n\nMuch of this comes from studying DISAS. Although it was not a dissassembly it\nhad so few comments it might as well have been one. Also see Sam Golobs articles\nin Technical Support for January and March 94. They are available on CBT file\n120.\n\n1: Don't unless you have to. Making sense of a dissassembly of a non-trivial\nprogram is a big job. Time spent looking for the source code is rarely wasted.\n\n2: Find out as much about the program as you can before you start. Input and\noutput layout is very useful. A current CSECT map and cross-reference is\ninvaluable if it has more than one CSECT. Source for an old version is a big\nhelp.\n\n3: Dissassemble an object deck produced by the assembler or compiler if you can.\nThe object deck only includes text with a value specified in the source deck,\nDSes aren't included. When the module is linked the DSes are filled in with\nwhatever was in the linkage editors buffers at the time, often binary zeroes but\nit can be anything. When the LMOD is delinked whatever went into the DSes\nappears as text, and in the dissassembly as data or instructions. With the\noriginal object deck DSes appear in the dissassembly as DS.\n\n4: If you need to delink LMODs use DELINKI off CBT file 90 instead of DELINK0 if\nyou can. DELINK0 does not support weak external references, AMODE or RMODE other\nthan 24 or read only sections (RSECTs). Thus all WXTRNs become EXTRNs, and all\nsections appear as CSECTS with AMODE 24, RMODE 24. You can get an executable\nversion of DELINKI on CBT file 135 if you don't have a PL/I compiler.\n\n5: If you have something like ASMPUT to help understand programs try it out on\nthe dissassembly. You won't find source with fewer comments! You might want to\nassemble the output to generate a cross reference listing etc.\n\n6: Remember Edison's statement that genius is 1% inspiration and 99%\nperspiration. Study the generated source carefully. Look at the data area for\nreadable messages. For every label in the code check where it is used. Put a\ncomment on constants to say they are constants. For every variable try to work\nout what it does. Look for loops in the code, put a comment at the start and\nend. Put a comment on subroutines even before you know what they do. Try to\nidentify external control blocks that are being accessed.\n\n7: When you start changing labels, using symbolic addressing etc you should do\ntest assemblies at suitable intervals and compare the result with the original.\nAt least do one just before making any change intended to alter the resultant\nload module.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SOURCEI": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x006\\x01\\x00\\x06\\x0f\\x01\\x04\\x15_\\x12#\\x00\\x17\\x00\\x17\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-29T00:00:00", "modifydate": "2004-06-03T12:23:36", "lines": 23, "newlines": 23, "modlines": 0, "user": "U765139"}, "text": "//U765139S JOB AT,'SORCEREI',MSGCLASS=X,NOTIFY=&SYSUID,CLASS=A\n//*\n//*        DISSASSEMBLE A LMOD WITH SORCEREI\n//*\n//* SYSIN: LMOD IS THE LMOD YOU WANT TO PROCESS\n//* DISSASSEMBLES ALL CSECTS BY DEFAULT\n//*\n//DELINKI EXEC PGM=SORCEREI\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR <=== DISAS, DELINKI ALSO\n//*        DD DSN=CEE.SCEERUN,DISP=SHR       <=== IF NOT IN LINKLIST\n//SYSLIB   DD DISP=SHR,DSN=FDDSTO7.GEN.LOAD  <=== INPUT\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,(5,5)),DISP=(,DELETE)\n//RDDD     DD UNIT=VIO,SPACE=(TRK,5)\n//SYSPRINT DD SYSOUT=0\n//PRDD     DD SYSOUT=1\n//PUDD     DD SYSOUT=2\n//DADD     DD SYSOUT=3\n//OUT      DD SYSOUT=4\n//LINKCNTL DD DUMMY\n//SYSIN    DD *\nMEMBER(LMOD)  .\n//*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$SOURCER": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x00\\x06\\x0f\\x01\\x04\\x15_\\x12&\\x00\\x15\\x00\\x15\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-29T00:00:00", "modifydate": "2004-06-03T12:26:10", "lines": 21, "newlines": 21, "modlines": 0, "user": "U765139"}, "text": "//U765139S JOB AT,'DISSASSEMBLE LMOD',MSGCLASS=X,NOTIFY=&SYSUID,CLASS=A\n//*\n//*       DISSASSEMBLE A LMOD WITH SORCERER\n//*\n//*  SYSIN: ENTER NAME OF LMOD IN SYSLIB FOLLOWED BY CSECT NAME\n//*  SOURCE DECK IS OUTPUT TO PUDD\n//*\n//DELINKI EXEC PGM=SORCERER\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR  <=== DISAS ALSO\n//SYSLIB   DD DISP=SHR,DSN=FDDSTO7.DISAS.LOAD  <=== INPUT\n//SYSPUNCH DD UNIT=VIO,SPACE=(TRK,(5,5))\n//RDDD     DD UNIT=VIO,SPACE=(TRK,5)\n//SYSPRINT DD SYSOUT=0\n//PRDD     DD SYSOUT=1\n//PUDD     DD SYSOUT=2\n//DADD     DD SYSOUT=3\n//OUT      DD SYSOUT=4\n//SYSIN    DD *\nLMOD  CSECT\n//*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$TEST": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\t\\x01\\x00\\x05o\\x01\\x04\\x15_\\x120\\x00>\\x00>\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-02-25T00:00:00", "modifydate": "2004-06-03T12:30:09", "lines": 62, "newlines": 62, "modlines": 0, "user": "U765139"}, "text": "//U765139T JOB AT,'TEST DISAS',MSGCLASS=X,NOTIFY=&SYSUID,CLASS=A\n//*\n//* ASM, LINK, DELINKI, DISAS, ASM, LINK, COMPARE\n//*\n//ASML PROC MEM=,TYPE=NOTEST,ASMOUT=1,LKOUT=2,AC=0,RENT=NORENT\n//ASM EXEC PGM=IEV90,\n//       PARM='OBJECT,NODECK,NORLD,TERM,&TYPE,&RENT'\n//SYSPRINT  DD SYSOUT=&ASMOUT\n//SYSTERM   DD SYSOUT=*\n//SYSPUNCH  DD DUMMY\n//SYSLIB    DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSIN     DD DSN=FDDSTO7.DISAS.SRC(&MEM),DISP=SHR\n//SYSUT1    DD DSN=&SYSUT1,UNIT=VIO,SPACE=(1700,(400,50),,,ROUND)\n//SYSLIN    DD UNIT=VIO,DISP=(,PASS),SPACE=(80,(200,50),,,ROUND)\n//*\n//LKED    EXEC PGM=IEWL,COND=(8,LT),\n//          PARM='MAP,LIST,LET,&TYPE,NCAL,&RENT,AC=&AC'\n//SYSPRINT  DD SYSOUT=&LKOUT\n//SYSTERM   DD SYSOUT=*\n//SYSLIN    DD DSN=*.ASM.SYSLIN,DISP=(OLD,DELETE)\n//SYSLMOD   DD DSN=&LOADLIB1(&MEM),DISP=(,PASS),UNIT=SYSDA,\n//             SPACE=(TRK,(20,20,1))\n//SYSUT1    DD DSN=&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20),,,ROUND)\n//          PEND\n//*\n//TEST    EXEC ASML,MEM=TEST2\n//*\n//DELINKI EXEC PGM=SORCEREI\n//STEPLIB  DD DSN=FDDSTO7.DISAS.LOAD,DISP=SHR <=== DISAS, DELINKI ALSO\n//*        DD DSN=CEE.SCEERUN,DISP=SHR     <=== IF NOT IN LINKLIST\n//SYSLIB   DD DSN=&LOADLIB1,DISP=(OLD,PASS)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,(5,5)),DISP=(,DELETE)\n//RDDD     DD UNIT=VIO,SPACE=(TRK,5)\n//SYSPRINT DD SYSOUT=0\n//PRDD     DD SYSOUT=1\n//PUDD     DD SYSOUT=2\n//DADD     DD UNIT=VIO,SPACE=(TRK,(5,5)),DISP=(MOD,PASS)\n//OUT      DD SYSOUT=4\n//LINKCNTL DD DUMMY\n//SYSIN    DD *\nMEMBER(TEST2)  .\n//*\n//*\n//ASM2  EXEC ASML,MEM=TEST5,\n//           PARM.LKED='MAP,LIST,XREF,NCAL',\n//           COND.LKED=(12,LT,ASM)\n//ASM.SYSIN    DD DSN=*.DELINKI.DADD,DISP=(OLD,DELETE)\n//LKED.SYSLMOD DD DSN=&LOADLIB2(LMOD2),DISP=(,PASS),UNIT=SYSDA,\n//             SPACE=(TRK,(20,20,1))\n//LKED.SYSIN   DD DUMMY\n//*\n//*  COMPARE TWO LOAD MODULES\n//*\n//C   EXEC PGM=COMPARE$,\n//  PARM='TEST2,LMOD2'\n//STEPLIB  DD DISP=SHR,DSN=FDDSTO7.DISAS.LOAD\n//*SNAP     DD SYSOUT=1\n//SYSPRINT DD SYSOUT=1\n//WTO      DD SYSOUT=1\n//I1       DD DSN=&LOADLIB1,DISP=(OLD,DELETE)\n//I2       DD DSN=&LOADLIB2,DISP=(OLD,DELETE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE445": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04B\\x00\\x00\\x01\\x04\\x17O\\x01\\x04\\x17O\\x114\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf6@@@'", "ispf": {"version": "04.66", "flags": 0, "createdate": "2004-06-22T00:00:00", "modifydate": "2004-06-22T11:34:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "CBT-466"}, "text": "//***FILE 445 is from Chris Kendon, and is an update of the old     *   FILE 445\n//*           UK GUIDE object deck disassembler.  The code has      *   FILE 445\n//*           been taught XA and ESA instructions, and other        *   FILE 445\n//*           modern stuff.  You'll enjoy playing with this.        *   FILE 445\n//*                                                                 *   FILE 445\n//*           Unfortunately no longer supported. Site downsized...  *   FILE 445\n//*                                                                 *   FILE 445\n//*           email:  Chris.Kendon@powergen.co.uk                   *   FILE 445\n//*                                                                 *   FILE 445\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDR": {"ttr": 785, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ADDR     TITLE 'ADDR '\n***********************************************************************\n*                                                                     *\n*        Generate address for an instruction                          *\n*        as nnnn(rr)    (format 1)                                    *\n*        or nnnn(rr,xx) (format 2)                                    *\n*        or Annnnn      (format 3) - if USING active for base reg     *\n*                                                                     *\n*  Called by RX, RS, SI, SS                                           *\n*                                                                     *\n*  Input: addressed by R1:                                            *\n*    +0  2 bytes x'00' (always ?)                                     *\n*    +2  2 byte address part of instruction                           *\n*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *\n*    +5  start of 3 byte length for SS instrs or x'00'                *\n*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *\n*    +8  4 byte address of output buffer holding current line         *\n*    +15 1 byte instruction format from AXN                           *\n*                                                                     *\n*  Output: addressed by R1:                                           *\n*    +0  1-12 byte address                                            *\n*    +12 length of address (fullword)                                 *\n*                                                                     *\n*  Attributes:                                                        *\n*    reusable                                                         *\n*  History:                                                           *\n*    Use outline macro to map the output line            CFK Feb 2000 *\n*    SAVA parms now 16 bytes                             CFK Apr 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Map parameters with dsect                           CFK Dec 2000 *\n*    SAVA and USING now use standard calling conventions CFK Sep 2003 *\n*    Remove call to CXN                                  CFK Oct 2003 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*    SAVA now passed csect label is in.                  CFK Dec 2003 *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT                    parameters                  CFK*DEC00\nPRMIADR4 DS    0XL4           +0  input address (4 bytes)     CFK*DEC00\n         DS    XL2            +0                              CFK*DEC00\nPRMIADR2 DS    XL2            +2  address part of instr       CFK*DEC00\nPRMIFLG1 DS    X              +4  flag, x'00' or x'01'        CFK*DEC00\nPRMIDLEN DS    0CL3           +5  3 byte len for SS instr     CFK*DEC00\n         DS    C              +5                              CFK*DEC00\nPRMINDEX DS    CL2            +6  char index reg no or x'00'  CFK*DEC00\nPRMI@PA  DS    XL4            +8  @ output buffer             CFK*DEC00\n         DS    XL3            +12                             CFK*DEC00\nPRMIFMT  DS    X              +15 instruction format as AXN   CFK*DEC00\n         ORG   PRMDUM                                         CFK*DEC00\nPRMOADR  DS    CL12               output address (char)       CFK*DEC00\nPRMOLEN  DS    XL4                output address length       CFK*DEC00\n*                                                             CFK*DEC00\n         OUTLINE                  map output line             CFK*FEB00\nADDR     CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING PRMDUM,R10         tell assembler              CFK*NOV03\n         ENTRY SAVASEC1           ref'ed by PASS4             CFK*DEC03\n         EXTRN SAVA               csect\n         EXTRN USING              csect\n         ST    R1,APARMS          save @ parms                CFK*NOV03\n         MVC   PAS(4),PRMI@PA     copy @ output buffer\n         L     R6,PAS             load @ output buffer\n         USING OUTLINE,R6         tell assembler              CFK*FEB00\n         MVC   BAS(4),PRMIADR4    copy address part of instr\n         MVC   RGG(4),4(R10)      copy index reg no. (char)   CFK*NOV03\n         MVC   DISP+2(2),PRMIADR2 copy address part of instr\n         MVC   FLR+2(2),DISP+2    copy it to parms for USING\n         NI    DISP+2,X'0F'       mask out displacement\n         MVI   FLR,X'03'          flag check for using for this reg\n         L     R15,AUSIX          FIND ABSOLUTE ADDRESS       CFK*SEP03\n         LA    R1,FLR             get @ USING parms           CFK*SEP03\n         BASR  R14,R15            call USING csect            CFK*SEP03\n* USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         L     R3,FLR             get IC of using or zero\n         SLL   R3,8               mask off\n         SRL   R3,8                high byte\n         A     R3,DISP            add displacement\n         ST    R3,DIS2            save address of operand\n         UNPK  DWA1(7),DIS2+1(4)  CONVERT TO BCD              CFK*OCT03\n         TR    DWA1(6),=C'0123456789ABCDEF'-240   make hex    CFK*OCT03\n         CLI   OUTADDR1,C'0'      first address already there ?\n         BE    SECA               yes, this must be second address\n         MVC   XFG(1),PRMIFMT     copy instruction format code\n         NI    XFG,C'0'           get only high 4 bits\n         CLI   XFG,X'20'          RX instruction ?\n         BE    SECA               BR if yes\n         CLI   XFG,X'30'          RS instruction ?\n         BE    SECA               BR if yes\n         MVC   OUTADDR1,DWA1      FIRST ADDRESS field         CFK*OCT03\n         B     SECB               and skip copy of 2nd address\nSECA     MVC   OUTADDR2,DWA1      SECOND ADDRESS field        CFK*OCT03\nSECB     CLI   FLR,X'00'          was a using active for this reg ?\n         BE    RAD                branch if not\nLDIS     L     R3,DIS2            reload addres of operand\n         SLL   R3,8               NO\n         STCM  R3,B'1110',SAVADR  pass address to SAVA        CFK*APR00\n         MVC   SAVTYPE,PRMIFMT    pass address type to SAVA   CFK*APR00\n         MVC   SAVLABEL,SPACES    clear address label         CFK*APR00\n         L     R15,ASAVA          SAVE ADDRESS                CFK*SEP03\n         LA    R1,SAVAPRMS        get @ parms for SAVA        CFK*JAN04\n         BASR  R14,R15            call SAVA csect             CFK*SEP03\n         LA    R5,SAVOUTLB+7      )\n         LA    R4,8               ) find\nCLL      CLI   0(5),C' '          )  end\n         BNE   LAA                )   of\n         BCT   R4,CLM             )    label\nCLM      BCT   R5,CLL             )\nLAA      DS    0H                                             CFK*NOV03\n         MVC   0(8,R10),SAVOUTLB  pass label back to caller   CFK*NOV03\n         CLC   CZ(3),RGG+1        IS INDEX ZERO\n         BE    RADD               return IF YES\n         CLI   RGG,X'01'          IS THERE A LENGTH OR INDEX\n         BE    RADD               return if not\n         MVI   1(R5),C'('         YES, add (\n         CLI   RGG+1,X'00'\n         BNE   RAD2\nRADA3    LA    R4,4(R4)           ONE SIGNIF. CHAR.\n         CLI   RGG+2,C'0'\n         BNE   RADO\n         MVC   2(1,R5),RGG+3      copy 1 byte register number\n         BCTR  R5,0               subtract 1                  CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         MVI   4(R5),C')'         add final )\n         MVC   PRMOADR,SAVOUTLB   pass label back to caller\n         B     RADD               and return\nRADO     MVC   2(2,R5),RGG+2      TWO SIGNIF. CHAR.\n         MVI   4(R5),C')'         add final )\n         MVC   PRMOADR,SAVOUTLB   pass label back to caller\n         B     RADD               and return\nRAD2     CLI   RGG+1,C'0'         THREE SIGNIF. CHAR.\n         BE    RADA3\n         MVC   2(3,R5),RGG+1      copy 3 byte length\n         MVI   5(R5),C')'         add final )\n         LA    R4,5(R4)\n         MVC   PRMOADR,SAVOUTLB   pass label back to caller\n         B     RADD               and return\nRAD      LA    R4,8               ADDRESS IS ABSOLUTE\n         L     R3,DISP            get displacement\n         CVD   R3,DWA1            make it decimal\n         UNPK  DWA(8),DWA1(8)     make it ebcdic\n         OI    DWA+7,C'0'         make last byte ebcdic\n         LR    R8,R10             copy @ parms                CFK*NOV03\n         LA    R7,3               number of digits to check\n         LA    R5,DWA+4           get @ number\nCLAD     CLI   0(R5),C'0'         REMOVE LEADING ZEROES\n         BNE   RADP               found 1st non-zero\n         LA    R5,1(R5)           else get @ next digit\n         BCTR  R10,0              subtract 1 from @ parms     CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         BCT   R7,CLAD\nRADP     STC   R7,MVAR+1\nMVAR     MVC   0(1,R8),0(R5)\n         MVI   4(R10),C'('\n         L     R3,BAS             get copy of input instr.\n         SRL   R3,12\n         CVD   R3,DWA1\n         UNPK  DWA(8),DWA1(8)\n         OI    DWA+7,C'0'\n         CLI   RGG,X'01'          IS THERE A LENGTH\n         BE    NXX\n         CLI   RGG+1,X'00'        YES\n         BE    NX2\n         LA    R4,4(R4)\n         CLI   RGG+1,C'0'\n         BNE   SSR1\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         CLI   RGG+2,C'0'\n         BNE   SSR2\nSRRR     BCTR  R4,0               subtract 1                  CFK*NOV03\n         MVC   5(1,R10),RGG+3     LENGTH IS ONE SIGN. CHAR.   CFK*NOV03\n         MVI   6(R10),C','                                    CFK*NOV03\n         S     R10,TWOC           subtract 2                  CFK*NOV03\n         B     SSR3\nSSR2     MVC   5(2,R10),RGG+2     LENGTH IS TWO SIGN. CHAR.   CFK*NOV03\n         MVI   7(R10),C','                                    CFK*NOV03\n         BCTR  R10,0              subtract 1                  CFK*NOV03\n         B     SSR3\nSSR1     MVC   5(3,R10),RGG+1     LENGTH IS THREE SIGN. CHAR. CFK*NOV03\n         MVI   8(R10),C','                                    CFK*NOV03\nSSR3     CLC   DWA+6(2),DZA       IS BASE ZERO ?\n         BE    NX3\n         CLI   DWA+6,C'0'         NO\n         BNE   SSR4\n         MVC   9(1,R10),DWA+7     BASE IS ONE SIGN. CHAR.     CFK*NOV03\n         MVI   10(R10),C')'                                   CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         B     RADD               and return\nSSR4     MVC   9(2,R10),DWA+6     BASE IS TWO SIGN. CHAR.     CFK*NOV03\n         MVI   11(R10),C')'                                   CFK*NOV03\n         B     RADD               and return\nNX3      MVI   8(R10),C')'                                    CFK*NOV03\n         S     R4,TWOC3           subtract 3\n         B     RADD               and return\nNX2      LA    R4,3(R4)\n         CLI   RGG+2,C'0'\n         BNE   SSR5\n         CLI   RGG+3,C'0'\n         BNE   LAP\n         CLC   DWA+6(2),DZA       is it c'00' ?\n         BNE   LAP\n         MVI   4(R10),C' '                                    CFK*NOV03\n         S     R4,SIXC            subtract 6\n         B     RADD               and return\nLAP      MVC   5(1,R10),RGG+3                                 CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         BCTR  R10,0              subtract 1 from @ parms     CFK*NOV03\n         B     SSR6\nSSR5     MVC   5(2,R10),RGG+2     INDEX IS TWO SIGN. CHAR.    CFK*NOV03\nSSR6     MVI   7(R10),C','                                    CFK*NOV03\n         CLC   DWA+6(2),DZA       IS THERE A BASE ?\n         BNE   SSR7\n         MVI   7(R10),C')'        NO                          CFK*NOV03\n         S     R4,TWOC3           subtract 3\n         B     RADD               and return\nSSR7     CLI   DWA+6,C'0'\n         BNE   SSR8\n         MVC   8(1,R10),DWA+7     BASE IS ONE SIGN. CHAR.     CFK*NOV03\n         MVI   9(R10),C')'                                    CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         B     RADD               and return\nSSR8     MVC   8(2,R10),DWA+6     BASE IS TWO SIGN. CHAR.     CFK*NOV03\n         MVI   10(R10),C')'                                   CFK*NOV03\n         B     RADD               and return\nNXX      CLC   DWA+6(2),DZA       IS THERE A BASE ?\n         BNE   NXX3\n         MVI   4(R10),C' '        NO                          CFK*NOV03\n         S     R4,FORM            subtract 4\n         B     RADD               and return\nNXX3     CLI   DWA+6,C'0'\n         BNE   NXX2\n         MVC   5(1,R10),DWA+7     BASE IS ONE CHAR.           CFK*NOV03\n         BCTR  R4,0               subtract 1                  CFK*NOV03\n         MVI   6(R10),C')'                                    CFK*NOV03\n         B     RADD               and return\nNXX2     MVC   5(2,R10),DWA+6     BASE IS TWO CHAR.           CFK*NOV03\n         MVI   7(R10),C')'                                    CFK*NOV03\nRADD     L     R10,APARMS         RETURN, reload @ parms      CFK*NOV03\n         ST    R4,PRMOLEN         pass back address length\n         LEAVE ,                  and return                  CFK*NOV03\n         DC    C'IMM='\nAUSIX    DC    A(USING)           @ USING csect\nASAVA    DC    A(SAVA)            @ SAVA csect\nSPACES   DC    CL8' '             constant                    CFK*APR00\nXFG      DC    F'0'\nPAS      DC    F'0'               @ output buffer\nTWOC3    DC    F'3'               constant\nFORM     DC    F'4'               constant\nSIXC     DC    F'6'               constant\nDZA      DC    C'0000'            constant\nDWA1     DC    D'0'               work area\nDWA      DC    D'0'               work area\nRGG      DC    F'0'\nBAS      DC    F'0'               copy of input instruction\nTWOC     DC    F'2'               constant\nADD      DC    F'0'\nCZ       DC    X'00F0F000'        constant\nDISP     DC    F'0'               displacement from operand\nDIS2     DC    F'0'               save address of operand\nAPARMS   DC    F'0'               Save @ parms here           CFK*NOV03\n* parms to call USING with                                    CFK*SEP03\nFLR      DC    F'0'\n         DC    F'0'\n* end of USING parms                                          CFK*SEP03\n* USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n* parms to call SAVA with                                     CFK*SEP03\nSAVAPRMS DS    0CL20                                          CFK*JAN04\nSAVTYPE  DC    X'00'              input type of address       CFK*APR00\nSAVASEC1 DC    CL8' '             current csect (set by PASS4)CFK*DEC03\nSAVADR   DC    XL3'00'            input address               CFK*APR00\nSAVOUTLB DS    0CL8               output symbol               CFK*MAY00\nSAVLABEL DC    CL8' '             input symbol or spaces      CFK*APR00\n* end of SAVA parms                                           CFK*SEP03\nSAVEAREA DS    18F                save area                   CFK*SEP03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ARL": {"ttr": 1029, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ARL      TITLE 'Format ADCONs in the listing'\n***********************************************************************\n*                                                                     *\n*  Called by PASS4, FTXTA and SPPR                                    *\n*                                                                     *\n*  Parms @ R1: (mapped by FMTPARMS)                                   *\n*   +0 - @ print area                           (FMTPA)               *\n*   +4 - unused by ARL                          (FMTFMT)              *\n*   +5 - RLD flag byte (values as RLDIFLAG)     (FMTOPER)             *\n*   +6 - ADCON length                           (FMTLEN2)             *\n*   +8 - ADCON TEXT                             (FMTTEXT1-4)          *\n*  +12 - ESDID of section containing target     (FMTTEXT5-6)          *\n*  +14 - ESDID of current section               (FMTTEXT7-8)          *\n*  +16 - address of ADCON                       (FMTIC)               *\n*  +19 - table format (X'6E' for ADCONs)        (FMTFLG1)             *\n*  +20 - return to here                         (FMTRET)              *\n*                                                                     *\n* History:                                                            *\n*   Map parms with FMTPARMS macro                        CFK Feb 2000 *\n*   Map output line with the OUTLINE macro               CFK Feb 2000 *\n*   SAVA parms now 16 bytes                              CFK Apr 2000 *\n*   Use register equates                                 CFK Dec 2000 *\n*   Prevent 0C4 if no EXTRNs found                       CFK Apr 2002 *\n*   Map EXTRN list in ESD0                               CFK Sep 2002 *\n*   Make missing EXTRN message give EXTRN ID             CFK Dec 2002 *\n*   Handle Q constants                                   CFK May 2003 *\n*   Handle CXDs                                          CFK Jun 2003 *\n*   Handle V type adcons                                 CFK Jun 2003 *\n*   Eliminate call to CXN and LCOM reference             CFK Jun 2003 *\n*   Generate offset from EXTRNs correctly                CFK Jly 2003 *\n*   Check for EXTRNs in other CSECTS                     CFK Jly 2003 *\n*   SAVA now uses standard linkage conventions           CFK Sep 2003 *\n*   Use standard linkage conventions                     CFK Nov 2003 *\n*   Pass csect adcon points to to SAVA.                  CFK Dec 2003 *\n*   Handle dest in another section in assembly.          CFK Feb 2004 *\n*                                                                     *\n***********************************************************************\n         OUTLINE                  map output line             CFK*FEB00\n         FMTPARMS                 format routine parameters   CFK*FEB00\n         EXTRNMAP                 map EXTRN list in ESD2      CFK*SEP02\n         ESDSDMAP                 map CSECT list in ESD0      CFK*JLY03\n         RLDITEM                  map RLD entry in parms      CFK*MAY03\nARL      CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         ENTRY SBCZ               ref'ed by PASS4\n         ENTRY COMF               not used by any csect\n         EXTRN SAVA               csect\n         EXTRN NEXT               in ESD2 csect\n         EXTRN NPROG              in ESD0 csect               CFK*JLY03\n         EXTRN CURRSECT           in ESD0 csect               CFK*FEB04\n         MVI   COMF,X'00'\n         LR    R10,R1             save @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler about parms  CFK*NOV03\n         L     R4,FMTPA           get @ print area\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\n* first, put text on listing in hex\n         UNPK  OFS(9),FMTTEXT(5)  unpack text                 CFK*JUN03\n         TR    OFS,=C'0123456789ABCDEF'-240       make it hex CFK*JUN03\n         LH    R3,FMTLEN2         get adcon length            CFK*JUN03\n         AR    R3,R3              double to get hex length    CFK*JUN03\n         EX    R3,MV2CONST        copy to listing             CFK*JUN03\n* check for CXDs\n         CLC   FMTTEXT5(2),=H'0'  is it a CXD ?               CFK*JUN03\n         BNE   NOTCXD             branch if not               CFK*JUN03\n         MVC   OUTINSTR(3),=C'CXD' else make it a CXD         CFK*JUN03\n         B     Z99X               and exit                    CFK*NOV03\nMV2CONST MVC   OUTCONST(1),OFS    EXecuted                    CFK*JUN03\nNOTCXD   DS    0H                                             CFK*JUN03\n         MVC   OUTINSTR(2),DCR    copy c'DC'\n         MVC   OUTOPER(2),DCR+2   copy c'A('\n         TM    FMTOPER,RLDIFTBR   is it a V type adcon ?      CFK*JUN03\n         BNO   NOTVCON            branch if not               CFK*JUN03\n         MVI   OUTOPER,C'V'       else make it a VCON         CFK*JUN03\nNOTVCON  DS    0H                                             CFK*JUN03\n         CLC   FX+2(2),FMTLEN2    is ADCON 4 bytes long ?\n         BE    FIR                br. if yes\n         MVI   OUTOPER+1,C'L'     else add L\n         OI    FMTLEN1,C'0'       make length printable\n         MVC   OUTOPER+2(1),FMTLEN1  copy it to print area\n         NI    FMTLEN1,X'0F'      restore length\n         LA    R5,OUTCONST        get @ output object code\n         SR    R3,R3\n         IC    R3,FMTLEN1         get ADCON length\n         SLL   R3,1               double it\n         AR    R5,R3              calc @ end of object code\n         MVC   0(4,R5),BLXX       copy spaces over the rest of it\n         MVI   OUTOPER+3,C'('     add (\n         LA    R4,2(R4)           fudge o/p ptr to allow for length\nFIR      CLI   FMTLEN1,X'04'      4 byte ADCON ?\n         BNE   NFA                branch if not\n         TM    FMTTEXT,X'FF'      check adcon high byte\n         BZ    NFA                br if high byte zero\n         TM    FMTTEXT2,X'F0'     check adcon 2nd byte\n         BO    NFA                br if negative ?\n         MVC   OUTOPER(2),XPR     copy X'\n         MVC   OUTOPER+2(2),OUTCONST copy const to print area CFK*JUN03\n         MVI   OUTOPER+4,X'7D'    add '\n         MVI   OUTOPER+5,C','\n         MVC   OUTOPER+6(4),XPR+2 copy c'AL3('\n         LA    R4,8(R4)           adjust o/p ptr to allow for const\nNFA      MVI   SBCZ,X'FF'         flag no EXTRN\n         CLC   FMTTEXT5(2),FMTTEXT7   is it in current section ?\n         BE    LOCE               br if so\n* check if dest is in another section\n         L     R3,=A(NPROG)       get @ NPROG in ESD0         CFK*FEB04\n         L     R5,0(R3)           get number of CSECTs read   CFK*FEB04\n         LA    R3,4(R3)           get @ table of CSECTs       CFK*FEB04\n         USING ESDSDMAP,R3        tell assembler              CFK*FEB04\nCEX2     CLC   FMTTEXT5(2),ESDID  is it this CSECT ?          CFK*FEB04\n         BE    GOTCSECT           br if match                 CFK*FEB04\n         LA    R3,ESDENTLN(R3)    else get @ next entry       CFK*FEB04\n         BCT   R5,CEX2            br if more to search        CFK*FEB04\n         DROP  R3                 done with ESDSDMAP          CFK*FEB04\n* format EXTRN/WXTRN/QCON\n         L     R3,ANEXT           get @ NEXT in ESD2\n         ICM   R5,B'1111',0(R3)   get number of EXTRNs read   CFK*APR02\n         BZ    NOEXTRN            skip if no EXTRNs           CFK*APR02\n         LA    R3,4(R3)           get @ table of EXTRNS\n         USING EXTRNMAP,R3        tell assembler              CFK*SEP02\nCEX      CLC   FMTTEXT5(2),EXTSEQ FIND BCD NAME\n         BE    EEX                br if match\n         LA    R3,EXTNEXT         else get @ next entry\n         BCT   R5,CEX             br if more to search\n         MVI   OUTOPER+19,C'*'    indicate some EXTRNS read   CFK*DEC02\nNOEXTRN  DS    0H                                             CFK*APR02\n         DROP  R3                 done with EXTRNMAP          CFK*JLY03\n         MVC   OUTOPER+20(13),MET copy c'MISSING EXTRN   '\n         UNPK  OUTOPER+34(5),FMTTEXT5(3)  add EXTRN number    CFK*DEC02\n         TR    OUTOPER+34(4),=C'0123456789ABCDEF'-240         CFK*DEC02\n         MVI   OUTOPER+38,C' '    clear gash byte             CFK*DEC02\n         MVI   OUTOPER+2,C' '     indicate not found          CFK*JLY03\n         B     NOTPR                                          CFK*JLY03\n         USING EXTRNMAP,R3        tell assembler              CFK*SEP02\nEEX      MVC   OUTOPER+2(8),EXTNAME  copy EXTRN name\n         MVC   SBCZ+1(8),EXTNAME     copy EXTRN name\n         CLI   EXTTYPE,EXTTPR     is it a Pseudo Register ?   CFK*MAY03\n         BNE   NOTPR              skip if not                 CFK*MAY03\n         MVI   OUTOPER,C'Q'       else make Q con             CFK*MAY03\n         DROP  R3                 done with EXTRN list        CFK*SEP02\nNOTPR    DS    0H                                             CFK*MAY03\n         CLI   OUTOPER+2,C' '     name blank ?\n         BNE   RBL                if not continue\n         MVI   COMF,X'10'         else flag ref to private code found\n         B     LOCE               and handle as non-EXTRN\nRBL      LA    R5,7               length to search\n         LA    R3,OUTOPER+9       get @ end of EXTRN name\nCEE      CLI   0(R3),C' '         ) find\n         BNE   INSS               )  last\n         BCT   R3,NER             )   nonblank\nNER      BCT   R5,CEE             )    char\nINSS     STC   R5,SBCZ            save EXTRN name length-1\n         CLI   FMTTEXT,X'FF'      negative offset from extrn ?\n         BE    MINE               br. if yes\n         TM    FMTFLG1,X'10'\n         BO    MINE\n         MVI   1(R3),C'+'         indicate positive offset\n         B     NMINE              and skip\nMINE     MVI   1(R3),C'-'         indicate negative offset\nNMINE    LA    R6,4               get max adcon length\n         L     R5,FMTTEXT         load text\n         SH    R6,FMTLEN2         subtract ADCON length (0 or -1)\n         LPR   R6,R6              make positive         (0 or 1)\n         SLL   R6,3               mul by 8              (0 or 8)\n         STC   R6,SOFT+3          *modify instruction*\nSOFT     SRL   R5,0               shift 0 or 8 bits right\n         SLL   R5,8               ) clear high byte\n         SRA   R5,8               )\n         LTR   R5,R5              is offset zero ?\n         BZ    RPE                if zero exit\n         LA    R3,1(R3)           else point past sign\nLOC2     CVD   R5,OFS             make offset decimal\n         MVC   1(11,R3),=X'402020202020202021205D'   add mask CFK*JLY03\n         LA    R1,10(R3)          point at last byte          CFK*JLY03\n         EDMK  1(10,R3),OFS+3     make decimal                CFK*JLY03\n         MVC   1(11,R3),0(R1)     move down offset            CFK*JLY03\n         B     Z99X               RETURN to caller            CFK*NOV03\nRPE      MVI   1(R3),C')'         finish constant\n         B     Z99X               RETURN to caller            CFK*NOV03\n* we come here if the adcon is not an EXTRN\nLOCE     DS    0H                                             CFK*NOV03\n         L     R3,=A(CURRSECT)    get @ current section ptr   CFK*FEB04\n         L     R3,0(R3)           get @ current entry         CFK*FEB04\nGOTCSECT DS    0H                                             CFK*FEB04\n         USING ESDSDMAP,R3        tell assembler              CFK*FEB04\n         MVC   ASAVSECT,ESDNAME   csect name to SAVA parms    CFK*FEB04\n         DROP  R3                                             CFK*FEB04\n         MVI   ASAVTYPE,X'60'     ind. type of address to SAVA\n         CLI   FMTLEN1,3          check adcon length          CFK*FEB04\n         BE    A3BYTE             br. if 3 byte adcon         CFK*FEB04\n         BL    A2BYTE               or 2 byte adcon           CFK*FEB04\n         MVC   ASAVADR,FMTTEXT2   else copy 4 byte acdon adr. CFK*FEB04\n         B     DONEADR            and carry on                CFK*FEB04\nA3BYTE   DS    0H                                             CFK*FEB04\n         MVC   ASAVADR,FMTTEXT1   copy 3 byte adcon adr       CFK*FEB04\n         B     DONEADR            and carry on                CFK*FEB04\nA2BYTE   DS    0H                                             CFK*FEB04\n         MVI   ASAVADR,X'00'      clear top byte of address   CFK*FEB04\n         MVC   ASAVADR+1(2),FMTTEXT1   copy 2 byte adcon adr. CFK*FEB04\nDONEADR  DS    0H                                             CFK*FEB04\n         MVC   ASAVLABL,SPACES    clear label                 CFK*APR00\n         L     R15,SAVZ           get @ SAVA csect            CFK*SEP03\n         LA    R1,ASAVTYPE        get @ parms for SAVA        CFK*SEP03\n         BASR  R14,R15            call SAVA                   CFK*SEP03\n         MVC   OUTOPER+2(8),ASAVOUTL copy address label       CFK*APR00\n         LA    R5,7               )\n         LA    R3,OUTOPER+9       ) find\nCEE2     CLI   0(R3),C' '         )  end\n         BNE   INSA               )   of\n         BCT   R3,NER2            )    label\nNER2     BCT   R5,CEE2            )\nINSA     MVI   1(R3),C')'         put ) after label\nZ99X     LEAVE ,                  RETURN to caller            CFK*NOV03\n         DC    C'IMM='\n         LTORG ,                                              CFK*SEP03\nSAVZ     DC    A(SAVA)            @ SAVA csect\nFX       DC    F'4'               constant\nANEXT    DC    A(NEXT)            @ NEXT in ESD2\nOFS      DC    D'0'               must have slack space after it\nOF2      DC    F'0'               1st byte used for OFS slack space\nDCR      DC    C'DCA('\nSPACES   DC    C'    '            constant (8 sp. inc BLXX)   CFK*APR00\nBLXX     DC    C'    '            constant\nXPR      DC    X'E77D'            X'\n         DC    C'AL3('\nCOML     DC    C'COM '\nMET      DC    C'MISSING EXTRN   '\nSBCZ     DC    3F'0'              entry point\nSBCZ1    EQU   SBCZ,1               name length -1 or x'FF' if no name\nSBCZNAME EQU   SBCZ+1,8             EXTRN name\nCOMF     DC    X'00'              entry point\n* parms to call SAVA with                                     CFK*SEP03\nASAVTYPE DC    X'00'              input type of data\nASAVSECT DC    CL8' '             input csect of target       CFK*DEC03\nASAVADR  DC    XL3'00'            input addresss\nASAVOUTL DS    0CL8               output label                CFK*DEC03\nASAVLABL DC    CL8' '             input symbol or spaces      CFK*APR00\n* end of SAVA parms                                           CFK*SEP03\nSAVEAREA DS    18F                save area                   CFK*SEP03\n         YREGS                    register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ART": {"ttr": 1034, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ART      TITLE 'ART '\n***********************************************************************\n*                                                                     *\n*  Called by PASS4 during the 4th pass to fetch the next address to   *\n*  put on the listing.                                                *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    +0 - output type if address, x'FF' if none left                  *\n*    +1 - 3 byte output address, x'FFFFFF' if none left.              *\n*    +4 - 8 byte label or Annnnn if no label                          *\n*                                                                     *\n*  History:                                                           *\n*    Map address table with LABELMAP                     CFK Apr 2000 *\n*    Use register equates                                CFK Sep 2000 *\n*    Generate label if necessary                         CFK Sep 2000 *\n*    Eliminate call to CXN                               CFK Sep 2001 *\n*    Use standard linkage conventions                    CFK Sep 2003 *\n*    Rewrite to only return labels in current section.   CFK Dec 2003 *\n*    Let PASS4 reset pointers at start of each csect.    CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\n         LABELMAP                 map label table in SAVA     CFK*APR00\n*\nPRMDUM   DSECT                    dsect to map parms          CFK*SEP00\nPRMENTRY DS    0XL12              whole entry to return       CFK*SEP00\nPRMFLAG  DS    X                  flag                        CFK*SEP00\nPRMADR   DS    XL3                address                     CFK*SEP00\nPRMLABEL DS    XL8                label                       CFK*SEP00\n*\nART      CSECT\n         USING PRMDUM,R1          tell assembler about parms  CFK*SEP00\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY NEL4               ref'ed by PASS3\n         ENTRY ARTCSECT           ref'ed by PASS4             CFK*DEC03\n         LM    R3,R4,NEL4         get no. of adrs and @ them  CFK*DEC03\n         USING LABELMAP,R4        tell assembler              CFK*APR00\n         LTR   R3,R3              any addresses left ?        CFK*DEC03\n         BZ    Z10B               br. if none left            CFK*JAN04\nZ10A     DS    0H                                             CFK*DEC03\n         CLC   LABCSECT,ARTCSECT  is entry for current csect? CFK*DEC03\n         BE    Z10C               if so process it            CFK*DEC03\n         BH    Z10B               if later csect EOF          CFK*JAN04\n         LA    R4,LABENTLN(R4)    else point @ next address   CFK*DEC03\n         BCT   R3,Z10A            DECREMENT ADDR. COUNT       CFK*DEC03\nZ10B     DS    0H                                             CFK*DEC03\n         MVI   PRMFLAG,X'FF'      flag if no addresses left   CFK*DEC03\n         MVC   PRMADR,=X'FFFFFF'  set dummy address           CFK*DEC03\n         B     Z10E               and exit                    CFK*JAN04\nZ10C     DS    0H                                             CFK*DEC03\n         MVC   PRMFLAG,LABTYPE    copy type                   CFK*DEC03\n         MVC   PRMADR(11),LABADR  copy address and name       CFK*DEC03\n         CLI   LABNAME,C' '       is there a label ?          CFK*SEP00\n         BNE   Z10D               branch if so                CFK*DEC03\n* convert address to label                                    CFK*SEP00\n         UNPK  PRMLABEL(7),LABADR(4) unpack address           CFK*SEP01\n         NI    PRMLABEL,X'0F'     mask out low nybble         CFK*SEP00\n         TR    PRMLABEL(1),TRTAB  make 0-9 into A-P           CFK*SEP00\n         TR    PRMLABEL+1(5),=C'0123456789ABCDEF'-240 make ch CFK*SEP01\n         MVI   PRMLABEL+6,C' '    clear gash byte             CFK*SEP01\nZ10D     DS    0H                                             CFK*JAN04\n         LA    R4,LABENTLN(R4)    point @ next address        CFK*DEC03\n         BCTR  R3,0               DECREMENT ADDR. COUNT       CFK*DEC03\nZ10E     DS    0H                                             CFK*JAN04\n         STM   R3,R4,NEL4         save new address and count  CFK*DEC03\n         LEAVE ,                  RETURN                      CFK*SEP03\n         DC    C'IMM='\n*        LTORG ,                                              CFK*SEP03\nTRTAB    DC    C'ABCDEFGHIJKLMNOP'  tr into A-P               CFK*SEP01\nSAVEAREA DS    18F                                            CFK*SEP03\nARTCSECT DS    CL8                current csect, set by PASS4 CFK*DEC03\nNEL4     DC    F'0'               number of addresses, set by PASS3\nAST4     DC    F'0'               entry point, @ adr. tab. set by PASS3\nNEL4B    DC    F'0'               copy of NEL4, set by PASS3  CFK*DEC03\nAST4B    DC    F'0'               copy of AST4, set by PASS3  CFK*DEC03\n         YREGS ,                  map registers               CFK*SEP00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AXN": {"ttr": 1037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "AXN      TITLE 'FIND OP CODE MNEMONIC'\n***********************************************************************\n*                                                                     *\n*    Called by FTXTA                                                  *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  input 1 or 2 byte opcode (4 bytes passed)                    *\n*    +2  output 5 byte instruction mnemonic                           *\n*    +7  output opcode or X'0000' if invalid opcode                   *\n*    +9  output 1 byte flag from table                                *\n*    +10 output 1 byte instruction format                             *\n*    +11 output 1 byte operand format                                 *\n*    +12 output 1 byte flag bits                          CFK Apr 2000*\n*    +13        3 bytes spare                                         *\n*    +16 output 4 byte @ instruction use count entry for this opcode  *\n*                                                                     *\n*  @ R13 save area                                                    *\n*  Return to @ R14                                                    *\n*                                                                     *\n*  History:                                                           *\n*    Move instruction use counters from COUNT into        CFK May 1999*\n*    opcode table, so COUNT does not need to know how                 *\n*    many opcodes exist.                                              *\n*    Support for 2 byte opcodes.                          CFK Jun 1999*\n*    Support for 5 byte mnemonics.                                    *\n*    Return separate codes for instruction format and                 *\n*    operand format.                                                  *\n*    Remove 360 only instructions.                                    *\n*    Add 370, XA and ESA instructions.                                *\n*    Extra vetting for some instructions.                             *\n*    Support for CUSE, MVPG, SQDR and SQER.               CFK Jun 1999*\n*    Add BSG, CLST, MVST, SRST, SACF, CKSM, CLCLE, MVCLE, CFK Jul 1999*\n*    MSR, MS and CMPSC instructions.                                  *\n*    Support for CKSM and BSA.                            CFK Aug 1999*\n*    Support for PLO.                                     CFK Dec 1999*\n*    Flag semi-priv, interruptible and CC setting instr.  CFK Dec 1999*\n*    Pass back instruction format flags.                  CFK Apr 2000*\n*    Use standard linkage conventions.                    CFK Apr 2000*\n*    Use extended mnemonics for unconditional branches.   CFK Apr 2000*\n*    Indicate that branches to R0 don't go anywhere.      CFK Jun 2000*\n*    Add CSP.                                             CFK Nov 2000*\n*    Flag type of CC set.                                 CFK Nov 2000*\n*    Add TRAP2.                                           CFK Dec 2000*\n*    Use register equates.                                CFK Dec 2000*\n*    Check reserved opcode fields for zeroes in LPSW,     CFK Jan 2004*\n*    SLA, SLDA, SLDL, SLL, SPM, SRA, SRDA, SRDL, SRL, SSM and TS.     *\n*    Check reserved opcode fields for zeroes in CPYA,     CFK Mar 2004*\n*    EAR, IPM; MVPG, SAR, DXR, BAKR, EPAR; ESAR; EREG, ESTA, IAC;     *\n*    IPK: ISKE, IVSK, IPTE, LURA, MSTA; PT, PALB: PTLB: RRBE, SSAR;   *\n*    SSKE, STURA, TAR, TB, CSCH: HSCH: RCHP: RSCH: SAL: SCHM:         *\n*                                                                     *\n*  Attributes:                                                        *\n*    Reusable                                                         *\n*                                                                     *\n***********************************************************************\n         AXNTAB                   Map instruction table.      CFK*MAY99\n         SPACE 1\nPARMS    DSECT\nPRMIOPC  DS    XL2                input opcode\nPRMOUT   DS    0CL11              output copied from opcode table\nPRMNAME  DS    CL5                output mnemonic\nPRMOOPC  DS    XL2                output opcode\nPRMOUTFL DS    X                  output flag byte fron table\nPRMOUTFM DS    X                  output instruction format\nPRMOOPF  DS    X                  output operand format\nPRMOOPF2 DS    X                  output instrunction flags\n         DS    XL3                padding\nPRMOCNT  DS    A                  output @ instruction use counter\n         SPACE 1\nAXN      CSECT\n         ENTRY MEN                ref'ed by COUNT csect\n         USING PARMS,1            tell assembler about parms  CFK*APR00\n         STM   R14,R12,12(R13)    save registers              CFK*APR00\n         BASR  R12,0              setup base reg              CFK*APR00\n         USING *,R12              tell assembler              CFK*APR00\n         MVC   BOP,PRMIOPC        copy input instruction\nRMEN     DS    0H                 BINARY SEARCH\n         L     R7,H55             load number of opcodes in table\n         LR    R5,R7              load number of opcodes in table\n         SR    R4,R4\n         LA    R3,MENLAST-4000    @ last valid opcode\n         LA    R3,4000(3)         @ last valid opcode\n         USING AXNTAB,R3          tell assembler              CFK*MAY99\n         CLC   BOP1,AXNOPC        check it\n*  this code assumes the last opcode is not a two byte opcode CFK*JUN99\n         BH    PSP                if instr higher no such opcode\n         BE    FND                found it\nSR       AR    R7,R4\nSR2      SRA   R7,1\n         M     R6,SIX\n         L     R3,AMEN\n         AR    R3,R7\n         CLC   BOP1,AXNOPC        match ?\n         BH    LOW                                            CFK*JUN99\n         BL    HIGH                                           CFK*JUN99\n         TM    AXNFLG2,AXNF2BYT   2 byte opcode ?             CFK*JUN99\n         BZ    FND                No - found it               CFK*JUN99\n         CLC   BOP2,AXNOPC+1      2nd byte matches ?          CFK*JUN99\n         BE    FND                found it\n         BL    HIGH\nLOW      D     R6,SIX\n         CR    R4,R7\n         BE    PSP                no such opcode\n         LR    R4,R7\n         AR    R7,R5\n         B     SR2\nHIGH     D     R6,SIX\n         CR    R5,R7\n         BE    PSP                no such opcode\n         LR    R5,R7\n         B     SR\nFND      DS    0H       table entry match                     CFK*JUN99\n         XR    R7,R7              clear work reg\n         IC    R7,AXNVAL          get validation rtn number\n         B     *+4(R7)\n         B     FND2           00  no extra validation routine\n         B     REGMASK        04  check register mask\n         B     MPDP           08  MP or DP length fields\n         B     DXR            0C  DXR register masks\n         B     SRP            10  SRP rounding digit\n         B     CUSE           14  CUSE register masks         CFK*JUN99\n         B     SQR            18  SQDR and SQER register masks FK*JUN99\n         B     CKSM           1C  CKSM register masks         CFK*AUG99\n         B     BCR            20  sort out BCR ext. mnemonics CFK*APR00\n         B     BC             24  sort out BC ext. mnemonics  CFK*APR00\n         B     B0             28  R2=0 is not terminating     CFK*JUN00\n         B     CSP            2C  CSP register masks          CFK*NOV00\n         B     RSV1           30  Bits 16-23 are reserved     CFK*MAR04\n         B     RSV2           34  Bits 16-23 and 28-31 res    CFK*MAR04\n         B     RSV3           38  Bits 16-31 are reserved     CFK*MAR04\n         B     BAKR           3C  Bits 16-23 rsvd and R2=0 not term R04\nREGMASK  DS    0H       check register mask\n         IC    R7,AXNOPC2         get mask\n         EX    R7,TM1             is it OK ?\n         BNZ   PSP                br. if invalid register mask\n         B     FND2               else OK\nTM1      TM    PRMIOPC+1,0        EXecuted to check 2nd opcode byte\nMPDP     DS    0H       MP or DP instruction\n         IC    R7,PRMIOPC+1       get length fields\n         N     R7,=X'0000000F'    mask out second length\n         CH    R7,=H'7'           valid second length ?\n         BH    PSP                br if invalid length\n         XR    R6,R6              clear second work reg\n         IC    R6,PRMIOPC+1       get length fields\n         SRL   R6,4               extract first length\n         CR    R6,R7              is 1st length > 2nd length ?\n         BNH   PSP                if not instruction not valid\n         B     FND2               else OK\nDXR      DS    0H      vet DXR operands\n         TM    PRMIOPC+3,X'FF'-X'44'  registers 4 or 0 only ?\n         BNZ   PSP                br if invalid extended register.\n         B     RSV1               else check bits 16-23 zero  CFK*MAR04\nSRP      DS    0H      vet SRP rounding digit\n         IC    R7,PRMIOPC+1       get length fields\n         N     R7,=X'0000000F'    mask out rounding digit\n         CH    R7,=H'9'           valid packed digit ?\n         BH    PSP                br if invalid\n         B     FND2               else OK\nCUSE     DS    0H      vet CUSE operands\n         TM    PRMIOPC+3,X'11'    registers must be even.\n         BNZ   PSP                br if odd register.\n         B     FND2               else OK\nSQR      DS    0H      vet SQDR and SQER registers\n         TM    PRMIOPC+3,X'99'    registers must be 0, 2, 4 or 6.\n         BNZ   PSP                br if bad register.\n         B     FND2               else OK\nCKSM     DS    0H      vet CKSM operands\n         TM    PRMIOPC+3,X'01'    2nd register must be even.\n         BNZ   PSP                br if odd register.\n         B     FND2                                           CFK*APR00\nBCR      DS    0H       select BCR extended mnemonic          CFK*APR00\n         TM    PRMIOPC+1,X'F0'    check branching conditions  CFK*APR00\n         BO    UNCONDR            unconditional branch        CFK*APR00\n         BZ    NOPR               NOP found                   CFK*APR00\n         LA    R3,DBCR            else must be conditional br CFK*APR00\n         B     B0                 and check register          CFK*JUN00\nUNCONDR  DS    0H                 uncond branch found         CFK*APR00\n         LA    R3,DBR             @ entry for uncond branch   CFK*APR00\n         B     B0                 and check register          CFK*JUN00\nNOPR     DS    0H                 NOPR found                  CFK*APR00\n         LA    R3,DNOPR           point at NOP entry          CFK*APR00\n         B     FND2               and exit                    CFK*APR00\nBC       DS    0H       select BC extended mnemonic           CFK*APR00\n         TM    PRMIOPC+1,X'F0'    check branching conditions  CFK*APR00\n         BO    UNCOND             unconditional branch        CFK*APR00\n         BZ    NOP                NOP found                   CFK*APR00\n         LA    R3,DBC             else must be conditional br CFK*APR00\n         B     FND2               and exit                    CFK*APR00\nUNCOND   DS    0H                 uncond branch found         CFK*APR00\n         LA    R3,DB              @ entry for uncond branch   CFK*APR00\n         B     FND2               and exit                    CFK*APR00\nNOP      DS    0H                 NOP found                   CFK*APR00\n         LA    R3,DNOP            point at NOP entry          CFK*APR00\n         B     FND2               and exit                    CFK*JUN00\nBAKR     DS    0H       check BAKR byte3=0 and as B0          CFK*MAR04\n         CLI   PRMIOPC+2,X'00'    reserved byte zero ?        CFK*MAR04\n         BNE   PSP                br. if not                  CFK*MAR04\n         TM    PRMIOPC+3,X'0F'    else check 2nd reg          CFK*MAR04\n         B     B0A2               and check if R0             CFK*MAR04\nB0       DS    0H       check BR etc for R2=0                 CFK*JUN00\n         TM    PRMIOPC+1,X'0F'    check 2nd register          CFK*JUN00\nB0A2     DS    0H                 check RC                    CFK*JUN00\n         BNZ   FND2               if not R0 done              CFK*JUN00\n         MVC   PRMOUT,AXNAME      else copy opcode and flags  CFK*JUN00\n         MVI   PRMOUTFL,X'10'     ind. not terminating        CFK*JUN00\n         NI    PRMOOPF2,X'FF'-AXNFTRM  clear term flag        CFK*JUN00\n         B     FND3               and skip copy               CFK*JUN00\nCSP      DS    0H      vet CSP operands                       CFK*NOV00\n         TM    PRMIOPC+3,X'10'    1st register must be even.  CFK*NOV00\n         BNZ   PSP                br if odd register.         CFK*NOV00\n         B     FND2               else OK                     CFK*MAR04\nRSV2     DS    0H      vet reserved bits 28-31                CFK*MAR04\n         TM    PRMIOPC+3,X'0F'    reserved bits zero ?        CFK*MAR04\n         BNZ   PSP                br. if not                  CFK*MAR04\n         B     RSV1               else check bits 16-23       CFK*MAR04\nRSV3     DS    0H      vet reserved bits 24-31                CFK*MAR04\n         CLI   PRMIOPC+3,X'00'    reserved bits zero ?        CFK*MAR04\n         BNE   PSP                br. if not                  CFK*MAR04\nRSV1     DS    0H      vet reserved bits 16-23                CFK*MAR04\n         CLI   PRMIOPC+2,X'00'    reserved bits zero ?        CFK*MAR04\n         BNE   PSP                br. if not                  CFK*MAR04\nFND2     DS    0H       valid opcode found\n         MVC   PRMOUT,AXNAME      Pass back opcode and flags\nFND3     DS    0H       opcode/flags copied                   CFK*JUN00\n         LA    R3,AXNUSECT        get @ instr. use counter\n         ST    R3,PRMOCNT         pass address back to FTXTA\nRETA     LM    R14,R12,12(R13)    reload callers registers    CFK*APR00\n         BR    R14                and return                  CFK*APR00\nPSP      MVC   PRMOUT,DC          NO OP CODE\n         B     RETA\n         DC    C'IMM='\n         LTORG                                                CFK*JUN99\nAMEN     DC    A(MEN)             entry point ref'ed by COUNT\nH55      DC    A(MEMTABLN/MEMENTLN)  number of table entries\nMNEM     DC    C'      '\nSIX      DC    A(MEMENTLN)        length of a table entry\nFIVE     DC    H'5'\nST6      DC    C'      '\nBOP      DS    0XL2               input instruction\nBOP1     DC    X'00'                input instruction 1st byte\nBOP2     DC    X'00'                input instruction 2nd byte\nDC       DC    C'DC   '           dummy table entry for non-opcodes\n         DC    XL7'00',2F'0'\nMEN      DC    C'PR   '       Program Return - ESA\n         DC    X'01011F130F0C00'  e, 2 byte, term\n         DC    2F'0'              instruction use counters\nMEMENTLN EQU   *-MEN              length of one entry\n         DC    C'UPT  '       Update Tree - XA assist\n         DC    X'01021413003800'  e, 2 byte, interruptible, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'?    '       ?\n*        DC    X'01031413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'CMSG '       Coupling Facility I/O\n*        DC    X'01051413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'TMSG '       Coupling Facility I/O\n*        DC    X'01061413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'SCKPF'       Set TOD programmable field\n*        DC    X'01071413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'TMPS '       Coupling Facility\n*        DC    X'01081413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'CMPS '       Coupling Facility\n*        DC    X'01091413003800'  e, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n&CHECKIT SETC  O'TRAP2        does assembler support TRAP2 ?  CFK*DEC00\n         AIF   ('&CHECKIT' NE 'O').NOTRAP2 skip TRAP2 if not  CFK*DEC00\n         DC    C'TRAP2'      Trap, HLASM R3                   CFK*DEC00\n         DC    X'01FF1413000C00'   rre, 2 byte, term (?), ?   CFK*DEC00\n         DC    2F'0'              instruction use counters    CFK*DEC00\n.NOTRAP2 ANOP                                                 CFK*DEC00\n         DC    C'SPM  '       Set Program Mask\n         DC    X'040F1311001004'  r, 1 operand, sets cc       CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'BALR '       Branch And Link\n         DC    X'05001F10000428'  rr, term unless r2=0        CFK*JUN00\n         DC    2F'0'              instruction use counters\n         DC    C'BCTR '       Branch on Count\n         DC    X'06001F10000428'  rr, term unless r2=0        CFK*JUN00\n         DC    2F'0'              instruction use counters\nDNOPR    DC    C'NOPR '       No Operation (branch never)     CFK*APR00\n         DC    X'07001012000020'  rr2                         CFK*APR00\n         DC    2F'0'              instruction use counters    CFK*APR00\nDBCR     DC    C'BCR  '       Branch on Condition\n         DC    X'07001F10000420'  rr, term unless r2=0\n         DC    2F'0'              instruction use counters\nDBR      DC    C'BR   '       Branch                          CFK*APR00\n         DC    X'07F01F12000420'  rr2, term unless r2=0       CFK*APR00\n         DC    2F'0'              instruction use counters    CFK*APR00\n*        DC    C'SSK  '       Set Storage Key (p) non-XA\n*        DC    X'08001010000300'  rr\n*        DC    2F'0'              instruction use counters\n*        DC    C'ISK  '       Insert Storage Key (p) non-XA\n*        DC    X'09001010000300'  rr\n*        DC    2F'0'              instruction use counters\n         DC    C'SVC  '       SuperVisor Call\n         DC    X'0A001F10000400'  rr, term\n         DC    2F'0'              instruction use counters\n         DC    C'BSM  '       Branch and Set Mode (XA opcode)\n         DC    X'0B001F10000428'  rr, term unless r2=0,       CFK*JUN00\n         DC    2F'0'              instruction use counters\n         DC    C'BASSM'       Branch And Save and Set Mode (XA opcode)\n         DC    X'0C001F10000428'  rr, term unless r2=0        CFK*JUN00\n         DC    2F'0'              instruction use counters\n         DC    C'BASR '       Branch And Save (370 BS or XA opcode)\n         DC    X'0D001F10000428'  rr, term unless r2=0,       CFK*JUN00\n         DC    2F'0'              instruction use counters\n         DC    C'MVCL '       Move Long, new with 370\n         DC    X'0E111010003004'  rr, interruptible, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLCL '       Compare Logical Long, new with 370\n         DC    X'0F11101000B004'  rr, interruptible, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LPR  '       Load Positive\n         DC    X'10001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LNR  '       Load Negative\n         DC    X'11001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LTR  '       Load and Test\n         DC    X'12001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LCR  '       Load Compliment\n         DC    X'13001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'NR   '       AND\n         DC    X'14001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLR  '       Compare Logical\n         DC    X'15001010009000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'OR   '       Or\n         DC    X'16001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'XR   '       eXclusive or\n         DC    X'17001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LR   '       Load\n         DC    X'18001010000000'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'CR   '       Compare\n         DC    X'19001010009000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AR   '       Add\n         DC    X'1A001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SR   '       Subtract\n         DC    X'1B001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MR   '       Multiply\n         DC    X'1C101010000004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'DR   '       Divide\n         DC    X'1D101010000004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'ALR  '       Add Logical\n         DC    X'1E001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SLR  '       Subtract Logical\n         DC    X'1F001010005000'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LPDR '       Load Positive Lomg\n         DC    X'20991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LNDR '       Load Negative Long\n         DC    X'21991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LTDR '       Load and Test Long\n         DC    X'22991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LCDR '       Load Compliment Long\n         DC    X'23991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'HDR  '       Halve Long\n         DC    X'24991210020004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'LRDR '       Load Rounded Extended to Long\n         DC    X'259B1210020004'  rr, new with 370\n         DC    2F'0'              instruction use counters\n         DC    C'MXR  '       Multiply Extended\n         DC    X'26BB1210000004'  rr, new with 370\n         DC    2F'0'              instruction use counters\n         DC    C'MXDR '       Multiply Long to Extended\n         DC    X'27B91210000004'  rr, new with 370\n         DC    2F'0'              instruction use counters\n         DC    C'LDR  '       Load Long\n         DC    X'28991210020004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'CDR  '       Compare Long (c)\n         DC    X'29991210029004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'ADR  '       Add Normalised Long (c)\n         DC    X'2A991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SDR  '       Subtract Normalised Long (c)\n         DC    X'2B991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MDR  '       Multiply Long\n         DC    X'2C991210020004' rr\n         DC    2F'0'              instruction use counters\n         DC    C'DDR  '       Divide Long\n         DC    X'2D991210020004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'AWR  '       Add Unnormalised Long (c)\n         DC    X'2E991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SWR  '       Subtract Unnormalised Long (c)\n         DC    X'2F991210025004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LPER '       Load Positive Short (c)\n         DC    X'30991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LNER '       Load Negative Short (c)\n         DC    X'31991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LTER '       Load and Test Short (c)\n         DC    X'32991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LCER '       Load Compliment Short (c)\n         DC    X'33991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'HER  '       Halve Short\n         DC    X'34991110010004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'LRER '       Load Rounded Long to Short\n         DC    X'35991110010004'  rr, new with 370\n         DC    2F'0'              instruction use counters\n         DC    C'AXR  '       Add Normalized Extended (c)\n         DC    X'36BB1210025004'  rr, new with 370, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SXR  '       Subtract Normalized, Extended (c)\n         DC    X'37BB1210025004'  rr, new with 370, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LER  '       Load Short\n         DC    X'38991110010004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'CER  '       Compare Short (c)\n         DC    X'39991110019004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AER  '       Add Normalised Short (c)\n         DC    X'3A991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SER  '       Subtract Normalised Short (c)\n         DC    X'3B991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MER  '       Multiply Short to Long\n         DC    X'3C991110010004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'DER  '       Divide Short\n         DC    X'3D991110010004'  rr\n         DC    2F'0'              instruction use counters\n         DC    C'AUR  '       Add Unnormalised Short (c)\n         DC    X'3E991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SUR  '       Subtract Unnormalised Short (c)\n         DC    X'3F991110015004'  rr, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STH  '       Store Halfword\n         DC    X'40002120010000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'LA   '       Load Address\n         DC    X'41002020000000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'STC  '       Store Character\n         DC    X'42002020000000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'IC   '       Insert Character\n         DC    X'43002020000000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'EX   '       Execute\n         DC    X'44002F20FE0400'  rx, term\n         DC    2F'0'              instruction use counters\n         DC    C'BAL  '       Bramch And Link\n         DC    X'45002F20FF0400'  rx, term\n         DC    2F'0'              instruction use counters\n         DC    C'BCT  '       Branch on Count\n         DC    X'46002F20FF0400'  rx, term\n         DC    2F'0'              instruction use counters\nDNOP     DC    C'NOP  '       No OPeration                    CFK*APR00\n         DC    X'47002021FF0024'  rx1                         CFK*APR00\n         DC    2F'0'              instruction use counters    CFK*APR00\nDBC      DC    C'BC   '       Branch on Condition\n         DC    X'47002F20FF0424'  rx, term\n         DC    2F'0'              instruction use counters\nDB       DC    C'B    '       unconditional Branch            CFK*APR00\n         DC    X'47002F21FF0424'  rx1, term                   CFK*APR00\n         DC    2F'0'              instruction use counters    CFK*APR00\n         DC    C'LH   '       Load Halfword\n         DC    X'48002120010000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'CH   '       Compare Halfword\n         DC    X'49002120019000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AH   '       Add Halfword\n         DC    X'4A002120015000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SH   '       Subtract Halfword\n         DC    X'4B002120015000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MH   '       Multiply Halfword\n         DC    X'4C002120010000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'BAS  '       Branch and Save\n         DC    X'4D002F20FF0400'  rx, term, 370 BS or XA instruction\n         DC    2F'0'              instruction use counters\n         DC    C'CVD  '       Convert to Decimal\n         DC    X'4E002320030000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'CVB  '       Convert to Binary\n         DC    X'4F002320030000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'ST   '       Store\n         DC    X'50002620060000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'LAE  '                ESA instruction\n         DC    X'51002020000000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'N    '       And\n         DC    X'54002620065000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CL   '       Compare Logical\n         DC    X'55002620069000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'O    '       OR\n         DC    X'56002620065000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'X    '       Exclusive Or\n         DC    X'57002620065000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'L    '       Load\n         DC    X'58002220020000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'C    '       Compare\n         DC    X'59002220029000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'A    '       Add\n         DC    X'5A002220025000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'S    '       Subtract\n         DC    X'5B002220025000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'M    '       Multiply\n         DC    X'5C102220020004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'D    '       Divide\n         DC    X'5D102220020004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'AL   '       Add Logical\n         DC    X'5E002720075000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SL   '       Subtract Logical\n         DC    X'5F002720075000'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STD  '       Store Long\n         DC    X'60902820080004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'MXD  '       Multiply Long to Extended\n         DC    X'67B02820080004'  rx, new with 370\n         DC    2F'0'              instruction use counters\n         DC    C'LD   '       Load Long\n         DC    X'68902520050004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'CD   '       Compare Long (c)\n         DC    X'69902520059004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AD   '       Add Normalised Long (c)\n         DC    X'6A902520055004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SD   '       Subtract Normalised Long (c)\n         DC    X'6B902520055004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MD   '       Multiply Long\n         DC    X'6C902520050004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'DD   '       Divide Long\n         DC    X'6D902520050004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'AW   '       Add Unnormalised Long (c)\n         DC    X'6E902820085004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SW   '       Subtract Unnormalised Long (c)\n         DC    X'6F902820085004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STE  '       Store Short\n         DC    X'70902420040004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'MS   '       Multiply Single - 390\n         DC    X'71002220020000'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'LE   '       Load Short\n         DC    X'78902420040004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'CE   '       Compare Short (c)\n         DC    X'79902420049004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AE   '       Add Normalized Short (c)\n         DC    X'7A902420045004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SE   '       Subtract Normalized Short (c)\n         DC    X'7B902420045004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'ME   '       Multiply Short to Long\n         DC    X'7C902420040004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'DE   '       Divide Short\n         DC    X'7D902420040004'  rx\n         DC    2F'0'              instruction use counters\n         DC    C'AU   '       Add Unnormalized Short (c)\n         DC    X'7E902420045004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SU   '       Subtract Unnormalized, Short (c)\n         DC    X'7F902420045004'  rx, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SSM  '       Set System Mask (p)\n         DC    X'80FF4141010204'  s, privileged               CFK*JAN04\n         DC    2F'0'              instruction use counters\n*        DC    C'TRCD '       ?\n*        DC    X'8100????FF04??'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'LPSW '       Load PSW (n,p)\n         DC    X'82FF4F41031604'  s, term, sets cc, priv      CFK*JAN04\n         DC    2F'0'              instruction use counters\n*        DC    C'diag '      diagnose - no official opcode\n*        DC    X'83000000000200'\n*        DC    C'WRD  '       Write Direct (p)\n*        DC    X'84004040000300'  si, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'BRXH '       Branch Relative on indeX High\n*        DC    X'8400?F??FF04??'  rsi, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'RDD  '       Read Direct (p)\n*        DC    X'85004040000300'  si, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'BRXLE'       Branch Relative on indeX Low or Equal\n*        DC    X'8500?F??FF04??'  rsi, term\n*        DC    2F'0'              instruction use counters\n         DC    C'BXH  '       Branch Index High\n         DC    X'86003F30FF0400'  rs, term\n         DC    2F'0'              instruction use counters\n         DC    C'BXLE '       Br. Index Low/Equal\n         DC    X'87003F30FF0400'  rs, term\n         DC    2F'0'              instruction use counters\n         DC    C'SRL  '       Shift Right Single Logical\n         DC    X'880F3131000004'  rs                          CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SLL  '       Shift Left Single Logical\n         DC    X'890F3131000004'  rs                          CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SRA  '       Shift Right Single (c)\n         DC    X'8A0F3131005004'  rs, sets cc                 CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SLA  '       Shift Left Single (c)\n         DC    X'8B0F3131005004'  rs, sets cc                 CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SRDL '       Shift Right Double Logical\n         DC    X'8C1F3131000004'  rs                          CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SLDL '       Shift Left Double Logical\n         DC    X'8D1F3131000004'  rs                          CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SRDA '       Shift Right Double (c)\n         DC    X'8E1F3131005004'  rs, sets cc                 CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'SLDA '       Shift Left Double (c)\n         DC    X'8F1F3131005004'  rs, sets cc                 CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'STM  '       Store Multiple\n         DC    X'90003030060000'  rs\n         DC    2F'0'              instruction use counters\n         DC    C'TM   '       Test under Mask (c)\n         DC    X'91004040005000'  si, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVI  '       Move Immediate\n         DC    X'92004040000000'  si\n         DC    2F'0'              instruction use counters\n         DC    C'TS   '       Test and Set (c)   new with 370\n         DC    X'93FF4041005004'  s, sets cc                  CFK*JAN04\n         DC    2F'0'              instruction use counters\n         DC    C'NI   '       AND Immediate (c)\n         DC    X'94004040005000'  si, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLI  '       Compare Logical Immediate\n         DC    X'95004040009000'  si, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'OI   '       OR Immediate (c)\n         DC    X'96004040005000'  si, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'XI   '       Exclusive OR Immediate (c)\n         DC    X'97004040005000'  si, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'LM   '       Load Multiple\n         DC    X'98003030060000'  rs\n         DC    2F'0'              instruction use counters\n         DC    C'TRACE'\n         DC    X'99003030000200' rs, new with XA, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'LAM  '          rs,  ESA instruction\n         DC    X'9A003030000000'\n         DC    2F'0'              instruction use counters\n         DC    C'STAM '          rs,  ESA instruction\n         DC    X'9B003030000000'\n         DC    2F'0'              instruction use counters\n*        DC    C'SIO  '       Start I/O (c,p)\n*        DC    X'9C004141000B00'  s, 2 byte non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'SIOF '       Start I/O fast (c,p) 370 FR\n*        DC    X'9C014141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'RIO  '       Resume I/O (c,p) 370 SR\n*        DC    X'9C024141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'TIO  '       Test I/O (c,p)\n*        DC    X'9D004141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'CLRIO'       Resume I/O (c,p) 370\n*        DC    X'9D014141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'HIO  '       Halt I/O (c,p)\n*        DC    X'9E004141000300'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'HDV  '       Halt Device (c,p) 370 HD\n*        DC    X'9E014141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'TCH  '       Test Channel (c,p)\n*        DC    X'9F004141000300'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'CLRCH'       Clear Channel (c,p) 370 RE\n*        DC    X'9F014141000B00'  s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'Vxxx '     vector opcodes\n*        DC    X'A400??????????'\n*        DC    2F'0'              instruction use counters\n*        DC    C'Vxxx '     vector opcodes\n*        DC    X'A500??????????'\n*        DC    2F'0'              instruction use counters\n*        DC    C'Vxxx '     vector opcodes\n*        DC    X'A600??????????'\n*        DC    2F'0'              instruction use counters\n*        DC    C'TMH  '     Test under Mask High\n*        DC    X'A700????00????' ri, new with 390, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'TML  '     Test under Mask Low\n*        DC    X'A701????00????' ri, new with 390, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'BRC  '     Branch Relative on Condition\n*        DC    X'A701?F??00????' ri, term, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'BRAS '     Branch Relative And Save\n*        DC    X'A704?F??00????' ri, term, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'BRCT '     Branch relative on CounT\n*        DC    X'A706?F??00????' ri, term, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'LHI  '     Load Halfword Immediate\n*        DC    X'A708????00????' ri, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'AHI  '     Add Halfword Immediate, sets cc\n*        DC    X'A70A????005???' ri, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'MHI  '     Multiply Halfword Immediate\n*        DC    X'A70C????00????' ri, new with 390\n*        DC    2F'0'              instruction use counters\n*        DC    C'CHI  '     Compare Halfword Immediate\n*        DC    X'A70E????009???' ri, new with 390, sets cc\n*        DC    2F'0'              instruction use counters\n         DC    C'MVCLE'      MoVe Characters Long Extended\n         DC    X'A8113030001004' rs, new with 390, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLCLE'      Compare Logical Characters Long Ext.\n         DC    X'A9113030009004' rs, new with 390, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STNSM'      Store Then AND Sys. Mask (p)\n         DC    X'AC004040000200' si, new with 370 TR, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'STOSM'      Store Then OR Sys. Mask (p)\n         DC    X'ADB84040000204' si, new with 370 TR, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'SIGP '       Signal Processor (c,p)\n         DC    X'AE003030001200'  rs, new with 370 MP, priv, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MC   '       Monitor Call - new with 370\n         DC    X'AFF04F40000404'  si, term\n         DC    2F'0'              instruction use counters\n         DC    C'LRA  '       Load Real Address (c,p)\n         DC    X'B1002020001200'  rx, new with 370 TR, priv, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'STIDC'       Store Channel ID (p) - 370\n*        DC    X'B2034141030B00'   s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n         DC    C'STIDP'       Store CPU ID (p) - 370\n         DC    X'B2024141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'SCK  '       Set Clock (c,p) - 370\n         DC    X'B2044141031A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STCK '       Store Clock (c) - 370\n         DC    X'B2054141031800'   rx, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SCKC '       Set Clock Comparator (p) - 370 CK\n         DC    X'B2064141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'STCKC'       Store Clock Comparator (p) - 370 CK\n         DC    X'B2074141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'SPT  '       Set CPU Timer (p) - 370 CK\n         DC    X'B2084141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'STPT '       Store CPU Timer (p) - 370 CK\n         DC    X'B2094141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'SPKA '       Set PSW Key from Address (q) - 370 PK\n         DC    X'B20A4141000900'   s, 2 byte, semi-privileged\n         DC    2F'0'              instruction use counters\n         DC    C'IPK  '       Insert PSW Key (q) - 370 PK\n         DC    X'B20B4242000938'   s, 2 byte, semi-privileged *MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'PTLB '       Purge TLB (p) - 370 TR\n         DC    X'B20D4242000A38'   s, 2 byte, privileged   CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'SPX  '      Set Prefix (p) - 370 MP\n         DC    X'B2104141060A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'STPX '      Store Prefix (p) - 370 MP\n         DC    X'B2114141060A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'STAP '      Store CPU Address (p) - 370 MP\n         DC    X'B2124141010A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n*        DC    C'SIE  '      Start Interpretive Execution (p) - 370\n*        DC    X'B214???8000A00'   s, 2 byte, non-XA\n*        DC    2F'0'              instruction use counters\n*        DC    C'SSYN '      Set TOD clock Synchronisation selection\n*                                                    register\n*        DC    X'B216???8000A00'   ?, Old TPF RPQ\n*        DC    2F'0'              instruction use counters\n*        DC    C'SETR '      Set ETR attachment controls\n*        DC    X'B2164141000A00'   s, (Sysplex Timer)\n*        DC    2F'0'              instruction use counters\n*        DC    C'STSYN'      Store TOD clock Synchronisation selection\n*                                                    register\n*        DC    X'B217????000A00'   ?, Old TPF RPQ\n*        DC    2F'0'              instruction use counters\n*        DC    C'STETR'      Store ETR attachment controls\n*        DC    X'B2174141000A00'   s, (Sysplex Timer)\n*        DC    2F'0'              instruction use counters\n         DC    C'PC   '      Program Call (q) - 370 DU, useable by\n*        non-auth\n         DC    X'B2184F41FF0D00'   s, 2 byte, term, semi-priv\n         DC    2F'0'              instruction use counters\n         DC    C'SAC  '      Set Address Space Control (q) - 370 DU\n         DC    X'B2194141000900'   s, 2 byte, semi-privileged\n         DC    2F'0'              instruction use counters\n         DC    C'CFC  '      Compare and Form Codeword - XA\n         DC    X'B21A4141003800'   s, 2 byte, interruptible, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'SERVC'      Service Processor Call\n*        DC    X'B220???8000A00'   ?\n*        DC    2F'0'              instruction use counters\n         DC    C'IPTE '      Invalidate Page Table Entry (p) - 370 EF\n         DC    X'B2211010000A30'   rre, 2 byte, privileged    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'IPM  '      Insert Program Mask - XA\n         DC    X'B2221311000834'   rre, 2 byte, 1 reg, rsvd bits *MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'IVSK '      Insert Virtual Storage Key (q) - 370 DU\n         DC    X'B2231010000930'   rre, 2 byte, semi-privileged, UNA 04\n         DC    2F'0'              instruction use counters\n         DC    C'IAC  '      Insert Address Space Control (q,c), 370 DU\n         DC    X'B2241311001934' rre, 2 byte, 1 reg, semi-priv, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SSAR '      Set Secondary ASN (q) - 370 DU\n         DC    X'B2251311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'EPAR '      Extract Primary ASN (q) - 370 DU\n         DC    X'B2261311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'ESAR '      Extract Secondary ASN (q) - 370 DU\n         DC    X'B2271311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'PT   '      Program Transfer (q) - 370 DU\n         DC    X'B2281F10000D30'   rre, 2 byte, term, semi-priv K*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'ISKE '      Insert Storage Key Extended (p) - 370 EK\n         DC    X'B2291010000A30'   rre, 2 byte, 3rd byte res CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'RRBE '      Reset Reference Bit Extended (p,c), 370 EK\n         DC    X'B22A1010001A30'   rre, 2 byte, privileged, sets cc 04\n         DC    2F'0'              instruction use counters\n         DC    C'SSKE '      Set Storage Key Extended (p) - 370 EK\n         DC    X'B22B1010000A30'   rre, 2 byte, privileged    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'TB   '      Test Block (p,c) - 370 TB\n         DC    X'B22C1010003A30'   rre, 2 byte, int, priv,    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'DXR  '      Divide (Extended) - XA\n         DC    X'B22D101000080C'   rre, 2 byte, 3rd byte ignored\n         DC    2F'0'              instruction use counters\n*        DC    C'PGIN '      Move to expanded storage - XA\n*        DC    X'B22E0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'PGOUT'      Move from expanded storage - XA\n*        DC    X'B22F0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'CSCH '      Clear Subchannel (p,c) - XA\n         DC    X'B2304242000A38'   s, 2 byte, privileged,     CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'HSCH '      Halt Subchannel (p,c) - XA\n         DC    X'B2314242001A38'   s, 2 byte, privileged      CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'MSCH '      Modify Subchannel (p,c) - XA\n         DC    X'B2324141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SSCH '      Start Subchannel (p,c) - XA\n         DC    X'B2334141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STSCH'      Store Subchannel (p,c) - XA\n         DC    X'B2344141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'TSCH '      Test Subchannel (p,c) - XA\n         DC    X'B2354141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'TPI  '      Test Pending Interruption (p,c) - XA\n         DC    X'B2364141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SAL  '      Set Address Limit (p) - XA\n         DC    X'B2374242000A38'   s, 2 byte, privileged      CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'RSCH '      Resume Subchannel (p,c) - XA\n         DC    X'B2384242001A38'   s, 2 byte, privileged      CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'STCRW'      Store Channel Report Word (p,c) - XA\n         DC    X'B2394141061A00'   s, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STCPS'      Store Channel Path Status (p) - XA\n         DC    X'B23A4141030A00'   s, 2 byte, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'RCHP '      Reset Channel Path (p,c) - XA\n         DC    X'B23B4242001A38'   s, 2 byte, privileged      CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'SCHM '      Set Channel Monitor (p) - XA\n         DC    X'B23C4242000A38'   s, 2 byte, privileged      CFK*MAR04\n         DC    2F'0'              instruction use counters\n* The next 3 opcodes are SIE assists for VM/XA, VM/ESA and PR/SM\n*        DC    C'STZP '      Store Zone Parameter\n*        DC    X'B23D0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'SZP  '      Set Zone Parameter\n*        DC    X'B23E0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'TPZI '      Test Pending Zone Interrrupt\n*        DC    X'B23F0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'BAKR '      Branch And Stack - ESA\n         DC    X'B2401F10000C3C' rre, 2 byte, term unless R2=0 FK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'CKSM '      Checksum - 390\n         DC    X'B241101000181C'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'?????'      Add FRR - MVS assist\n*        DC    X'B2421010000A00'   rre, 2 byte, privileged\n*        DC    2F'0'              instruction use counters\n         DC    C'SQDR '      Square Root Double - 390\n         DC    X'B2441010000818'   rre, 2 byte\n         DC    2F'0'              instruction use counters\n         DC    C'SQER '      Square Root Short - 390\n         DC    X'B2451010000818'   rre, 2 byte\n         DC    2F'0'              instruction use counters\n         DC    C'STURA'      Store Using Real Address - ESA\n         DC    X'B2461010000A30'   rre, 2 byte, privileged    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'MSTA '      Modify Stacked State - ESA\n         DC    X'B2471111000834'   rre, 2 byte, reserved bits CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'PALB '      Purge ALB (p) - ESA\n         DC    X'B2481010000A38'   rre, 2 byte, privileged    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'EREG '      Extract Stacked registers - ESA\n         DC    X'B2491010000834'   rre, 2 byte, rsrvd bits    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'ESTA '      Extract Stacked State - ESA\n         DC    X'B24A1010001830'   rre, 2 byte, sets cc, rsvd CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'LURA '      Load Using Real Address - ESA\n         DC    X'B24B1010000A30'   rre, 2 byte, privileged    CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'TAR  '      Test Access - ESA\n         DC    X'B24C1010001830'   rre, 2 byte, sets cc       CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'CPYA '      Copy Access - ESA\n         DC    X'B24D1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'SAR  '      Set Access - ESA\n         DC    X'B24E1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'EAR  '      Extract Access - ESA,\n         DC    X'B24F1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04\n         DC    2F'0'              instruction use counters\n&CHECKIT SETC  O'CSP          does assembler support CSP ?    CFK*NOV00\n         AIF   ('&CHECKIT' NE 'O').NOCSP   skip CSP if not    CFK*NOV00\n         DC    C'CSP  '      Compare and Swap and Purge (p) - 390 G3 00\n         DC    X'B2501010001A2C'   rre, 2 byte, privileged, sets CC V00\n         DC    2F'0'              instruction use counters    CFK*NOV00\n.NOCSP   ANOP                                                 CFK*NOV00\n         DC    C'MSR  '      Multiply Single - 390\n         DC    X'B2521010000800'   rre, 2 byte\n         DC    2F'0'              instruction use counters\n*        DC    C'?????'      ?\n*        DC    X'B2530000000A00'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'MVPG '      Move Page - ESA\n         DC    X'B2541010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04\n         DC    2F'0'              instruction use counters\n         DC    C'MVST '      MoVe String - 390\n         DC    X'B2551010001800'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CUSE '      Compare Until String Equal - ESA CU\n         DC    X'B2571010001814'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'BSG  '      Branch in Subspace Group - 390\n         DC    X'B2581F10000C00'   rre, 2 byte, term\n         DC    2F'0'              instruction use counters\n*        DC    C'IEBSE'      Invalidate Expanded Storage Block Entry\n*        DC    X'B2590000000A00'  ? - Move Page (Facility 2)\n*        DC    2F'0'              instruction use counters\n         DC    C'BSA  '      Branch and Stack Authority - 390\n         DC    X'B25A1F10000D00'   rre, 2 byte, term, semi-priv\n         DC    2F'0'              instruction use counters\n*        DC    C'PG???'      Asynchronous Page Facility\n*        DC    X'B25B0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'PGOUT'      Asynchronous Page Facility\n*        DC    X'B25C0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'CLST '      Compare Logical String - 390\n         DC    X'B25D1010001800'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SRST '      Search String - 390\n         DC    X'B25E1010001800'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'CHSC '      Channel Information\n*        DC    X'B25F0000000A00'  ? (Channel Subsystem Call)\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2600000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2610000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      ?\n*        DC    X'B2620000000A00'  ?\n*        DC    2F'0'              instruction use counters\n         DC    C'CMPSC'      Compression Services\n         DC    X'B2631010001814'   rre, 2 byte, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2640000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2650000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2660000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2670000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Define Vector (Coupling Facility)\n*        DC    X'B2680000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B2690000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26A0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26B0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26C0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26D0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26E0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Crypto\n*        DC    X'B26F0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'SPCS '      Set Primary Clock Selection\n*        DC    X'B2704141000A00'  s, 2 byte, priv?\n*        DC    2F'0'              instruction use counters\n*        DC    C'STPCS'      Store Primary Clock Selection\n*        DC    X'B2714141000A00'  s, 2 byte, priv?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Coupling Facility\n*        DC    X'B2720000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'SIGA '      Signal Adapter (OSA Express / Queued\n*                                                          Direct I/O)\n*        DC    X'B2742420000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      ?\n*        DC    X'B2750000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'CANC?'      Cancel I/O Facility\n*        DC    X'B2760000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'RP   '      Resume Program, HLASM R3        CFK*DEC00\n*        DC    X'B2770000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n         DC    C'SACF '      Set Address space Control Fast - 390\n         DC    X'B2794141000900'   s, 2 byte, semi-privileged\n         DC    2F'0'              instruction use counters\n*        DC    C'???? '      Coupling facility\n*        DC    X'B27A0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'TFF? '      Coupling facility (Send message response)\n*        DC    X'B27B0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Coupling facility\n*        DC    X'B27C0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'STSI '         Store System Info, HLASM R3  CFK*DEC00\n*        DC    X'B27D0000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'???? '      Coupling facility\n*        DC    X'B27E0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Coupling facility\n*        DC    X'B27F0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'SRNM '         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B2990000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'STFPC'         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B29C0000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'LFPC '         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B29D0000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'???? '      Move Channel Buffer Data Multiple\n*        DC    X'B2A40000000A00'  ? (Coupling Facility)\n*        DC    2F'0'              instruction use counters\n*        DC    C'TRE  '         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B2A50000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'CUUTF'         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B2A60000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'CUTFU'         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B2A70000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n*        DC    C'???? '      ?\n*        DC    X'B2A80000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      ?\n*        DC    X'B2A90000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Dequeue CAM\n*        DC    X'B2AA0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Process CAM queue\n*        DC    X'B2AB0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Enqueue CAM\n*        DC    X'B2AC0000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'       Amdahl RMI I/F - no mnemonic\n*        DC    X'B2BE0000000200'\n*        DC    2F'0'              instruction use counters\n*        DC    C'???? '      Coupling facility\n*        DC    X'B2F60000000A00'  ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'TRAP4'         ?,                 HLASM R3  CFK*DEC00\n*        DC    X'B2FF0000000A00'  ?                          CFK*DEC00\n*        DC    2F'0'              instruction use counters   CFK*DEC00\n****** B3** binary floating point opcodes here ******\n         DC    C'STCTL'       Store Control (p)   new 5 byte opcode !\n         DC    X'B6003030600200'  rs, new with 370 ?, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'LCTL '       Load Control (p)    new with 370 ?\n         DC    X'B7003030600200'  rs, privileged\n         DC    2F'0'              instruction use counters\n         DC    C'CS   '       Compare & Swap (c)  new with 370 SW\n         DC    X'BA003030601000'  rs, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CDS  '       Compare Double & Swap (c) new with 370 SW\n         DC    X'BB113030301004'  rs, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLM  '       Compare Logical/Mask (c)   new with 370\n         DC    X'BD003030009000'  rs 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'STCM '       Store Characters under Mask  new with 370\n         DC    X'BE003030000000'  rs 2\n         DC    2F'0'              instruction use counters\n         DC    C'ICM  '       Insert Chars. Under Mask (c) new with 370\n         DC    X'BF003030005000'  rs 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVN  '      Move Numerics\n         DC    X'D1005050000000' ss 1\n         DC    2F'0'              instruction use counters\n         DC    C'MVC  '      Move Characters\n         DC    X'D2005050000000' ss 1\n         DC    2F'0'              instruction use counters\n         DC    C'MVZ  '      Move Zones\n         DC    X'D3005050000000' ss 1\n         DC    2F'0'              instruction use counters\n         DC    C'NC   '      AND (c)\n         DC    X'D4005050005000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CLC  '      Compare Logical (c)\n         DC    X'D5005050009000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'OC   '      OR Character (c)\n         DC    X'D6005050005000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'XC   '      Exclusive OR Character (c)\n         DC    X'D7005050005000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVCK '      Move with Key (c,q)      new with 370 DU\n         DC    X'D9005252001100' ss 3, semi-privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVCP '      Move to Primary (c,q)    new with 370 DU\n         DC    X'DA005252001100' ss 3, semi-privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVCS '      Move to Secondary (c,q)  new with 370 DU\n         DC    X'DB005252001100' ss 3, semi-privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'TR   '      Translate (c)\n         DC    X'DC005050000000' ss 1\n         DC    2F'0'              instruction use counters\n         DC    C'TRT  '      Translate and Test (c)\n         DC    X'DD005050001000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'ED   '      Edit (c)\n         DC    X'DE005050005000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'EDMK '      Edit and Mark (c)\n         DC    X'DF005050005000' ss 1, sets cc\n         DC    2F'0'              instruction use counters\n*        DC    C'DSG??'      z/series opcodes ?\n*        DC    X'E3????????????'\n*        DC    2F'0'              instruction use counters\n*        DC    C'Vxxx '      vector opcodes\n*        DC    X'E400??????????'\n*        DC    2F'0'              instruction use counters\n         DC    C'LASP '      Load Addr. Space Parm. 370 DU\n         DC    X'E5005353031A00' sse, 2 byte (c,p), privileged, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'TPROT'      Test Protection (c,p) 370 EF\n         DC    X'E5015353001A00' sse, 2 byte, privileged, sets cc\n         DC    2F'0'              instruction use counters\n* E502 to E50D are MVS assist opcodes for 370 and/or XA\n*        DC    C'?????'      Fix Page\n*        DC    X'E5025353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      SVC Assist\n*        DC    X'E5035353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Obtain Local Lock\n*        DC    X'E5045353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Release Local Lock\n*        DC    X'E5055353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Obtain CMS lock\n*        DC    X'E5065353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Release CMS Lock\n*        DC    X'E5075353000E00' sse, 2 byte, privileged, term\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace SVC Interrupt\n*        DC    X'E5085353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace Program Interrupt\n*        DC    X'E5095353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace SRB Dispatch\n*        DC    X'E50A5353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace I/O Interrupt\n*        DC    X'E50B5353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace TCB Dispatch\n*        DC    X'E50C5353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Trace SVC Return\n*        DC    X'E50D5353001A00' sse, 2 byte, privileged, sets cc\n*        DC    2F'0'              instruction use counters\n         DC    C'MVCSK'         sse, 2 byte, ESA, semi-privileged\n         DC    X'E50E5353000900'\n         DC    2F'0'              instruction use counters\n         DC    C'MVCDK'         sse, 2 byte, ESA, semi-privileged\n         DC    X'E50F5353000900'\n         DC    2F'0'              instruction use counters\n* E600 to E613 are VM assist opcodes for S/370\n*        DC    C'?????'      Get free storage space\n*        DC    X'E6005353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Return free storage space\n*        DC    X'E6015353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Lock a page\n*        DC    X'E6025353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Unlock a page\n*        DC    X'E6035353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Decode CCW\n*        DC    X'E6045353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Free CCW storage\n*        DC    X'E6055353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Lock Virtual I/O control blocks\n*        DC    X'E6065353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Dispatch - Full function\n*        DC    X'E6075353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Test page status\n*        DC    X'E6085353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Test page status and lock\n*        DC    X'E6095353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Invalidate segment table\n*        DC    X'E60A5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Invalidate page table\n*        DC    X'E60B5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Decode first CCW\n*        DC    X'E60C5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Dispatch - Main entry\n*        DC    X'E60D5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Locate real I/O blocks\n*        DC    X'E60E5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Common CCW processing\n*        DC    X'E60F5353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Untranslate CCW\n*        DC    X'E6105353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Dispatch - Abbreviated\n*        DC    X'E6115353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Store ECPS identification\n*        DC    X'E6125353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n*        DC    C'?????'      Locate changed/shared page\n*        DC    X'E6135353001A00' sse, 2 byte, ?\n*        DC    2F'0'              instruction use counters\n         DC    C'MVCIN'      Move Inverse   optional with 370 or later\n         DC    X'E8005050000000' ss 1\n         DC    2F'0'              instruction use counters\n******  ED** binary floading point opcodes are here *****\n         DC    C'PLO  '      Perform Locked Operation - 390\n         DC    X'EE003232001000' rs 3, R1,D2(B2),R3,D4(B4), sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SRP  '      Shift and Round Decimal (c)\n         DC    X'F0005454005010' ss 4, new with 370, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MVO  '      Move with Offset\n         DC    X'F1005151000000' ss 2\n         DC    2F'0'              instruction use counters\n         DC    C'PACK '      Pack\n         DC    X'F2005151000000' ss 2\n         DC    2F'0'              instruction use counters\n         DC    C'UNPK '      Unpack\n         DC    X'F3005151000000' ss 2\n         DC    2F'0'              instruction use counters\n         DC    C'ZAP  '      Zero and Add Decimal (c)\n         DC    X'F8005151005000' ss 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'CP   '      Compare Decimal (c)\n         DC    X'F9005151009000' ss 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'AP   '      Add Decimal (c)\n         DC    X'FA005151005000' ss 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'SP   '      Subtract Decimal (c)\n         DC    X'FB005151005000' ss 2, sets cc\n         DC    2F'0'              instruction use counters\n         DC    C'MP   '      Multiply Decimal\n         DC    X'FC005151000008' ss 2\n         DC    2F'0'              instruction use counters\n* last entry in table\nMENLAST  DC    C'DP   '      Divide Decimal    D1(L1,B1),D2(L2,B2)\n         DC    X'FD005151000008'   ss 2\n         DC    2F'0'              instruction use counters\nMEMTABLN EQU   *-MEN             length of opcode table\n         DC    C' '              flag to indicate end of table\n         YREGS ,                 register equates             CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AXNTAB": {"ttr": 1796, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          AXNTAB\n         AXNTAB                                                         AXNTAB\n*********************************************************************** AXNTAB\n*                                                                     * AXNTAB\n*  DSECT to map the opcode table in AXN                               * AXNTAB\n*                                                                     * AXNTAB\n*********************************************************************** AXNTAB\nAXNTAB   DSECT                                                          AXNTAB\nAXNAME   DS    CL5             Opcode mnemonic                          AXNTAB\nAXNOPC   DS    0XL2            Opcode. If 1 byte padded with x'00'      AXNTAB\nAXNOPC1  DS    X               Opcode 1st byte.                         AXNTAB\nAXNOPC2  DS    X               Opcode 2nd byte.                         AXNTAB\nAXNFLG1  DS    X               Flag byte as in the original table       AXNTAB\n*  the high 4 bits are the instruction format as follows:               AXNTAB\n*  the low 4 bits depend on the instruction format as follows:          AXNTAB\n*              0                 invalid instruction (DC)               AXNTAB\n*XNFRR   EQU   1                 RR - R1,R1                             AXNTAB\n*              11                   - F1,F2 (short)                     AXNTAB\n*              12                   - F1,F2 (long)                      AXNTAB\n*              13                   - R1 (or R2)                        AXNTAB\n* *NEW*        14                E  - no operand                        AXNTAB\n* *NEW*        15                RRE - R1,R2 4 byte instruction         AXNTAB\n* *NEW*        16                RRE - R1 4 byte instruction            AXNTAB\n*              1F                 terminating instruction.              AXNTAB\n*XNFRX   EQU   2                 RX - R1,D2(X2,B2)                      AXNTAB\n*              20      references byte or no memory access              AXNTAB\n*              21          \"      Halfword                              AXNTAB\n*              22          \"      signed Fullword                       AXNTAB\n*              23          \"      Doubleword                            AXNTAB\n*              24          \"      short Float                           AXNTAB\n*              26          \"      Fullword                              AXNTAB\n*              27          \"      unsigned Fullword                     AXNTAB\n*              28          \"      long Float (unnormalised)             AXNTAB\n*              2F                 terminating instruction               AXNTAB\n*XNFRS   EQU   3                 RS - R1,R3,D2(B2)                      AXNTAB\n*              31                   - R1,D2(B2)                         AXNTAB\n* *NEW*        32                RS - PLO, R1,D2(B2),R3,D4(B4)          AXNTAB\n*              3F                 terminating instruction               AXNTAB\n*XNFSI   EQU   4                 SI - D1(B1),I2                         AXNTAB\n*              41                   - D1(B1)                            AXNTAB\n* *NEW*        42                S  - (no operands)                     AXNTAB\n*              4F                 terminating instruction               AXNTAB\n*XNFSS   EQU   5                 SS - 1 length, D1(L,B1),D2(B2)         AXNTAB\n*              51                SS - 2 lengths, D1(L1,B1),D2(L2,B2)    AXNTAB\n* *NEW*        52                SS - trailing reg, D1(R1,B1),D2(B2),R3 AXNTAB\n* *NEW*        53                SSE - D1(B1),D2(B2)                    AXNTAB\n* *NEW*        54                SS - trailing len, D1(R1,B1),D2(B2),L3 AXNTAB\nAXNFMT   DS    X               Instruction format                       AXNTAB\n*  the high 4 bits are the instruction format as follows                AXNTAB\n*  the low 4 bits are the instruction format subtype                    AXNTAB\nAXNFCON  EQU   0                 Constant                               AXNTAB\nAXNFRR   EQU   1                 RR - R1,R1 (or RRE)                    AXNTAB\n*              11                   - R1    (or RRE)                    AXNTAB\n*              12                   - R2    (or RRE)                    AXNTAB\n*              13                E  - no parameters                     AXNTAB\nAXNFRX   EQU   2                 RX - R1,D2(X2,B2)                      AXNTAB\n*              21                RX - D2(X2,B2)                         AXNTAB\nAXNFRS   EQU   3                 RS - R1,R3,D2(B2)                      AXNTAB\n*              31                   - R1,D2(B2)                         AXNTAB\n*              32                RS - PLO, R1,D2(B2),R3,D4(B4)          AXNTAB\nAXNFSI   EQU   4                 SI - D1(B1),I2                         AXNTAB\n*              41                   - D1(B1)                            AXNTAB\n*              42                S  - (no operands)                     AXNTAB\nAXNFSS   EQU   5                 SS - 1 length, D1(L,B1),D2(B2)         AXNTAB\n*              51                SS - 2 lengths, D1(L1,B1),D2(L2,B2)    AXNTAB\n*              52                SS - trailing reg, D1(R1,B1),D2(B2),R3 AXNTAB\n*              53                SSE - D1(B1),D2(B2)                    AXNTAB\n*              54                SS - trailing len, D1(R1,B1),D2(B2),L3 AXNTAB\nAXNOPER  DS    X               Instruction operand format/length        AXNTAB\n*              0       references byte or no memory access              AXNTAB\n*              1           \"      Halfword                              AXNTAB\n*              2           \"      signed Fullword                       AXNTAB\n*              3           \"      Doubleword                            AXNTAB\n*              4           \"      short Float                           AXNTAB\n*              6           \"      Fullword                              AXNTAB\n*              7           \"      unsigned Fullword                     AXNTAB\n*              8           \"      long Float (unnormalised)             AXNTAB\n*            254           \"      code EXecuted                         AXNTAB\n*            255           \"      code (branch)                         AXNTAB\nAXNFLG2  DS    X               Flag byte, new flags.                    AXNTAB\nAXNFINT  EQU   B'00100000'       Interruptible instruction.             AXNTAB\nAXNFSCC  EQU   B'00010000'       Instruction sets CC.                   AXNTAB\nAXNF2BYT EQU   B'00001000'       Two byte opcode.                       AXNTAB\nAXNFTRM  EQU   B'00000100'       Terminating instruction.               AXNTAB\nAXNFPRV  EQU   B'00000010'       Privileged instruction.                AXNTAB\nAXNFSPRV EQU   B'00000001'       Semi-Privileged Instruction.           AXNTAB\nAXNVAL   DS    X               Extra validation routine number          AXNTAB\n*              0 (00)            no extra validation                    AXNTAB\n*              4 (04)            register mask in 2nd byte of opcode    AXNTAB\n*              8 (08)            len1 > len2 and len2 <8 (DP, MP)       AXNTAB\n*             12 (0C)            DXR, registers 0 and 4 only            AXNTAB\n*             16 (10)            SRP, rounding digit must be valid      AXNTAB\n*             20 (14)            CUSE, registers must be even CFK*JUN99 AXNTAB\n*             24 (18)            SQxR, RRE with fl pt regs    CFK*JUN99 AXNTAB\n*             28 (1C)            CKSM register masks          CFK*AUG99 AXNTAB\n*             32 (20)            sort out BCR ext. mnemonics  CFK*APR00 AXNTAB\n*             36 (24)            sort out BC ext. mnemonics   CFK*APR00 AXNTAB\n*             40 (28)            R2=0 is not terminating      CFK*JUN00 AXNTAB\n*             44 (2C)            CSP register masks           CFK*NOV00 AXNTAB\nAXNUSECT DS    F               Instruction use counter.                 AXNTAB\nAXNTOTCT DS    F               Instr. total use counter.                AXNTAB\nAXNENTLN EQU   *-AXNTAB        Length on one entry.                     AXNTAB\nAXNNEXT  DS    0C              Next entry in table.                     AXNTAB\n         MEND                                                           AXNTAB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BCV": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BCV      TITLE 'BCV '\n***********************************************************************\n*                                                                     *\n*        convert 1 byte at R14+3 to 4 char number at R14+0            *\n*        input reg spec hl (hex)                                      *\n*        output reg spec hhll (char, hh and ll in range 00-15)        *\n*                                                                     *\n*        callers R13 restored from R14+4, return to R14+8             *\n*                                                                     *\n*  called by PASS4, RR, RX, RS, SPPR                                  *\n*                                                                     *\n*  attributes:                                                        *\n*    reusable                                                         *\n*                                                                     *\n*  history:                                                           *\n*    use register equates                                CFK dec 2000 *\n*                                                                     *\n***********************************************************************\nBCV      CSECT\n         BALR  R13,0              setup base reg\n         USING *,R13              tell assembler\n         SR    R4,R4              clear work reg\n         LA    R5,2               loop count\n         L     R3,0(R14)          get input (1 byte)\n         SRL   R3,4               isolate high 4 bits\nLP       MVI   RG1+2,C'0'         assume reg 00-09\n         C     R3,NINE            reg 00-09 ?\n         BL    N1                 yes - leading 0 ok\n         MVI   RG1+2,C'1'         no - need a leading 1\n         S     R3,NINE            subtract 10 (who named this NINE)\nN1       STC   R3,RG1+3           store 2nd byte of reg no.\n         OI    RG1+3,C'0'         make it printable\n         BXH   R4,R5,RETV         br if second pass through loop\n         NI    3(R14),X'0F'       mask out low 4 bits\n         MVC   RG1(2),RG1+2       move high bytes up\n         L     R3,0(R14)          load low 4 bits\n         B     LP                 loop\nRETV     MVC   0(4,R14),RG1       move output to parm area\n         L     R13,4(R14)         reload callers base reg\n         BAL   R14,8(R14)         and return to caller\n         DC    C'IMM='\nRG1      DC    F'0'               work area to build output in\nNINE     DC    F'10'              constant (with silly name)\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BSC": {"ttr": 1801, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BSC      TITLE 'BSC '\n***********************************************************************\n*                                                                     *\n*     Binary search routine to find if an address is in the table     *\n*  of known addresses.                                                *\n*                                                                     *\n*  Called by SAVA and SPPR. It used to be called by PASS3 and PASS4.  *\n*                                                                     *\n*  Input: 12 bytes pointed to by R1                                   *\n*    +0 - input byte x'00'                                            *\n*    +1 - 8 byte csect name ) string to                               *\n*    +9 - 3 byte addess     )  search for                             *\n*  Output: overlays input                                             *\n*    +0 - flag, C' ' if entry not found                               *\n*    +1 - 8 byte entry name if found                                  *\n*  Return is to R14                                                   *\n*  Register use                                                       *\n*    R3 - @ first entry                                               *\n*    R4 - lowest possible entry number                                *\n*    R5 - current entry number                                        *\n*    R6 - @ current entry                                             *\n*    R7 - highest possible entry number                               *\n*                                                                     *\n*  See Knuth 2nd edition volume 3 section 6.2.1 (page 410) for the    *\n*  algorithm (algorithm b). Note that the entries are numbered from   *\n*  0 to N-1 as implemented.                                           *\n*                                                                     *\n*  History:                                                           *\n*    Map table with LABELMAP macro.                      CFK Apr 2000 *\n*    Don't need PASS3 to set @ address table.            CFK Apr 2000 *\n*    Rewrite to fix bug searching new table format.      CFK Jly 2000 *\n*    Use register equates.                               CFK Dec 2000 *\n*    Dynamic label space.                                CFK Apr 2003 *\n*    Use standard linkage conventions                    CFK Oct 2003 *\n*    Key now includes csect name                         CFK Dec 2003 *\n*    Output separate flag to say if entry found          CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\n         LABELMAP                 map address table           CFK*APR00\nBSC      CSECT\n         EXTRN NAST               in SAVA, number of entries  CFK*APR00\n         ENTER ,                  entry logic                 CFK*OCT03\n         L     R3,ANAST           get @ number of entries\n         L     R7,0(R3)           get number of entries\n         L     R3,4(R3)           get @ first entry           CFK*APR03\n         SR    R4,R4              lowest entry is number 0    CFK*JLY00\nSRB1     BCTR  R7,0               subtract 1 to get last no.  CFK*JLY00\nSRB2     DS    0H     check this entry                        CFK*JLY00\n         CR    R7,R4              upper limit below lower ?   CFK*JLY00\n         BL    NOTFOUND           if so not found             CFK*JLY00\n         LR    R5,R7              copy high limit             CFK*JLY00\n         AR    R5,R4              add low limit               CFK*JLY00\n         SRL   R5,1               calculate average           CFK*JLY00\n         LR    R6,R5              copy current entry number   CFK*APR00\n         MH    R6,=AL2(LABENTLN)  multiply by address length  CFK*APR00\n         USING LABELMAP,R6        tell assembler              CFK*APR00\n         AR    R6,R3              get @ current entry\n         CLC   1(L'LABCADR,R1),LABCADR   is this it ?         CFK*DEC03\n         BE    FND2               found it if equal\n         BL    HIGH2              input lower than this entry\n* input is higher than the current entry\n         LA    R4,1(R5)           set lower limit to last+1   CFK*JLY00\n         B     SRB2               else check this entry\nHIGH2    DS    0H     input lower than the current entry      CFK*JLY00\n         LR    R7,R5              set upper limit to last-1   CFK*JLY00\n         B     SRB1               and try again               CFK*JLY00\nFND2     DS    0H                 found it !\n         MVC   1(8,R1),LABNAME    copy ebcdic label           CFK*OCT03\n         MVI   0(R1),X'00'        indicate found something    CFK*JAN04\nBRET     DS    0H                 exit point                  CFK*OCT03\n         LEAVE ,                  RETURN                      CFK*OCT03\nNOTFOUND MVI   0(R1),C' '         ADDRESS NOT IN TABLE        CFK*JAN04\n         MVI   1(R1),C' '         ADDRESS NOT IN TABLE        CFK*JAN04\n         B     BRET               and return\n         DC    C'IMM='\nANAST    DC    A(NAST)            @ number of addresses       CFK*APR00\n* the table of addresses starts just after NAST in SAVA       CFK*APR00\nSAVEAREA DS    18F                                            CFK*OCT03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CALLS": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x00\\x97\\x18O\\x00\\x97\\x18O\\x13\\x11\\x00\\x19\\x00\\x19\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-07-03T00:00:00", "modifydate": "1997-07-03T13:11:53", "lines": 25, "newlines": 25, "modlines": 0, "user": "U765139"}, "text": "         MACRO\n&NAME    CALLS &RTN,&ARGS,&VL,&ID=,&MF=I\n.*\n.*  CORRECT FOR THE USUAL IBM DEADWOOD IN A SUPPLIED MACRO.\n.*  SAVES ONE INSTRUCTION (4 BYTES) AND MULTIPLE VCONS IF ROUTINE\n.*  IS CALLED MORE THAN ONCE.\n.*\n         GBLB  &IHBSWA\n         AIF   ('&MF(1)' EQ 'B').BLDLST\n&NAME    L     15,=V(&RTN)         ADDRESS OF ROUTINE\n         AIF   ('&ARGS' NE '').GOT\n         AIF   ('&MF(1)' NE 'I').GOT\n         CALL  (15)                NO ARGUMENTS FORM\n         AGO   .ISN\n.GOT     ANOP\n         CALL  (15),&ARGS,&VL,MF=&MF  ARGUMENT AND VL BIT FORM\n.ISN     AIF   ('&ID' EQ '').XIT\n         BC    0,&ID               IDENTIFIER, IF ANY\n.XIT     ANOP\n         MEXIT\n.BLDLST  ANOP\n&IHBSWA  SETB  ('&VL' EQ 'VL')\n         IHBOPLST &RTN,&ARGS,&NAME,MF=(E,&MF(2))\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDN": {"ttr": 1806, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CDN      TITLE 'CDN, Convert Digits to Number '\n***********************************************************************\n*                                                                     *\n*        Convert 8 byte hex number at R14 to a 4 byte binary number   *\n*        at R14+4. R13 (base reg) is reloaded from R14+8.             *\n*        Return is to R14+12.                                         *\n*                                                                     *\n*  called by PASS4 and SPPR                                           *\n*                                                                     *\n*  attributes:                                                        *\n*    reentrant, reusable                                              *\n*                                                                     *\n*  history:                                                           *\n*    use register equates                                CFK dec 2000 *\n*                                                                     *\n***********************************************************************\nCDN      CSECT\n         BALR  R13,0              setup base reg\n         USING *,R13              tell assembler\n         LA    R7,2               no. of words of data input\n         LA    R6,4               no. of bytes per word\n         LR    R3,R14             @ 1st input byte\n         L     R5,0(R14)          get first word\n         SR    R4,R4              clear output reg\nSR4      SLL   R5,4               drop high 4 bits of byte\n         SLDL  R4,4               copy low 4 to output reg\n         TM    0(R3),C'0'         IS IT A NUMBER\n         BO    NAF                yes - branch\n         LA    R4,9(R4)           NO - adjust char A to hex A\nNAF      LA    R3,1(R3)           @ next input byte\n         BCT   R6,SR4             br if current input word not done\n         LA    R6,4               reload no. bytes per word\n         L     R5,4(R14)          get next input word\n         BCT   R7,SR4             br if first pass\n         ST    R4,4(R14)          save output\n         L     R13,8(R14)         reload callers base reg\n         BAL   R14,12(R14)        RETURN\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CONST": {"ttr": 1808, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x08\\x01\\x04\\x02\\x8f\\x01\\x04\\x02\\x8f\\x12%\\x00\\xdf\\x00\\xdf\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-28T00:00:00", "modifydate": "2004-01-28T12:25:08", "lines": 223, "newlines": 223, "modlines": 0, "user": "U765139"}, "text": "CON      TITLE '*** C O N S T ***  (MODIFIED FOR FTXTA)  AUG. 24,1967'\n***********************************************************************\n*                                                                     *\n*        Format constants in listing                                  *\n*                                                                     *\n*  Called by PASS4 and FTXTA                                          *\n*                                                                     *\n* Parms addressed by r1:                                              *\n*   +0  - @ output buffer                                             *\n*   +4  - instruction/constant type (zero)                            *\n*   +5  - not used (zero)                                             *\n*   +6  - constant length                                             *\n*   +8  - input up to 8 byte constant                                 *\n*   +16 - instruction counter                                         *\n*   +19 - copy of AXNFLG1, prob zero                                  *\n*   +20 - return to here                                              *\n*                                                                     *\n* History:                                                            *\n*   constant length is 2 bytes (+ map parms)             CFK jun 1999 *\n*   use outline macro to map the output line             CFK feb 2000 *\n*   tidy up translate table                              CFK mar 2000 *\n*   ADA format reversed                                  CFK may 2000 *\n*   treat lower case letters as printable                CFK may 2000 *\n*   print hex data in the info field                     CFK jun 2000 *\n*   use register equates                                 CFK dec 2000 *\n*   treat more special chars as printable                CFK jan 2002 *\n*   Remove call to CXN                                   CFK Nov 2003 *\n*   Use standard linkage conventions                     CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         LABELMAP                 Label table in SAVA         CFK*MAY00\n         FMTPARMS                 copy parameter map          CFK*JUN99\n         OUTLINE                  map output line             CFK*FEB00\nCONST    CSECT\n         EXTRN ADA                in PASS4 csect\n         EXTRN FLPT               csect\n         EXTRN FXPT               csect\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             save @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         UNPK  CXNC(9),FMTTEXT(5) unpack input const          CFK*NOV03\n         TR    CXNC(8),=C'0123456789ABCDEF'-240  make hex     CFK*NOV03\n         L     R4,FMTPA           get @ output buffer\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\nNADAR    MVC   SICC1+1(3),FMTIC   copy instruction counter\n         L     3,SICC1            load instruction counter\n         CLC   SICC(4),ZERC       = zero  ?\n         BE    NADB               br if yes\n         C     R3,SICC\n         BNE   NADB\n         MVI   OUTINSTR,C' '            ) clear mnemonic +\n         MVC   OUTINSTR+1(35),OUTINSTR  )  operands\n         B     Z99X               return                      CFK*NOV03\nNADB     L     R3,AADA            get @ ADA in PASS4 (parms for ART)\n         USING LABELMAP,R3        tell assembler              CFK*MAY00\n         LTR   R3,R3              ? not linked ?\n         BM    NADA               impossible ?\n         CLC   ZERC(3),LABADR     is address zero ?           CFK*MAY00\n         BE    NADA               not adcon if so\n         CLC   FORC+2(2),FMTLEN2  constant length = 4 ?\n         BNE   NADA               branch if not\n         CLC   LABADR,SICC1+1     = current address ?         CFK*MAY00\n         BNE   NADA               branch if not\n         MVC   FHX+4(8),FMTTEXT   copy input constant         CFK*NOV03\n         CLI   LABTYPE,X'22'      fixed point ?               CFK*MAY00\n         BE    CFXPT              call FXPT if so\n         CLC   FMTTEXT+1(3),ZERC  input zero ?     ???\n         BE    NADA\n         TM    FMTTEXT,X'7F'\n         BZ    NADA\n         CLI   LABTYPE,X'24'      floating point ?            CFK*MAY00\n         BE    CFLPT              call FLPT if so\n         MVI   FHX+12,X'80'\n         CLI   LABTYPE,X'25'      ?          ?                CFK*MAY00\n         BNE   NADA\n         DROP  R3                 tell asm done with labelmap CFK*MAY00\n         UNPK  17(9,R4),FMTTEXT+4(5)  unpack rest of const    CFK*NOV03\n         TR    17(8,R4),=C'0123456789ABCDEF'-240  make hex    CFK*NOV03\n         MVI   17+8(R4),C' '      clear gash byte             CFK*NOV03\n         MVI   FMTLEN2,X'FF'\n         L     R3,FMTIC           get instruction counter\n         SRL   R3,8\n         A     R3,FORC            add 4\n         ST    R3,SICC            save @ next entry\n         B     CFLT               go to call FLPT\nCFXPT    MVC   FHF(4),FMTPA       pass @ print area to FXPT\n         MVC   FHF+4(4),FMTTEXT   pass input constant to FXPT\n         L     R15,AFXPT          get @ FXPT csect            CFK*NOV03\n         LA    R1,FHF             get @ parms for FXPT        CFK*NOV03\n         BASR  R14,R15            call FXPT                   CFK*NOV03\n         MVC   OUTCONST,CXNC      copy object code to print area\n         B     Z99X               return                      CFK*NOV03\nCFLPT    MVI   FHX+12,X'00'\n         MVC   FHX+8(4),ZERC      zero FLPT parms\nCFLT     MVC   FHX(4),FMTPA       pass @ print area to FLPT\n         L     R15,AFLPT          get @ FLPT csect            CFK*NOV03\n         LA    R1,FHX             get @ parms for FLPT        CFK*NOV03\n         BASR  R14,R15            call FLPT                   CFK*NOV03\n         MVC   OUTCONST,CXNC      copy object code to print area\n         B     Z99X               return to caller            CFK*NOV03\nNADA     MVC   OUTOPER(2),XQ      copy X' to o/p buffer\n         MVC   OUTINSTR(2),DC     copy DC to o/p buffer\n         LH    R3,FMTLEN2         get length\n         SLL   R3,1               times 2\n         SH    R3,=H'1'           sub 1 for executed MVCs     CFK*JUN00\n         BM    Z99X               if length zero exit         CFK*NOV03\n         C     R3,EIGHT           length more than 8 ?\n         BL    MM                 no - OK\n         LA    R3,7               else load max len to move\nMM       EX    R3,CMV             move constant to object code field\n         LH    R5,FMTLEN2         get length                  CFK*JUN00\n         BCTR  R5,0               sub 1 for executed MVCs     CFK*JUN00\n         C     R5,TWT             length more than 20 ?       CFK*JUN00\n         BH    Z99X               if so return                CFK*NOV03\n         EX    R5,TRTI            check if ebcdic             CFK*JUN00\n         BNZ   EXC3               non ebcdic chars found, o/p hex const\n         MVI   OUTOPER,C'C'       else ind char string\n         EX    R5,CMV3            copy chars to output buffer CFK*JUN00\n         AR    R4,R5              calc @ end of string        CFK*JUN00\n         B     MVIC3              go to add final '\nEXC3     EX    R3,CMV2            copy hex string\n         MVI   OUTINFO1,C'*'      first *                     CFK*JUN00\n         EX    R5,CMV4            copy text to comment        CFK*JUN00\n         EX    R5,TR2             make it printable           CFK*JUN00\n         LA    R0,C'*'            ) put *                     CFK*JUN00\n         STC   R0,OUTINFO2+1(R5)  )  after comment            CFK*JUN00\n         AR    R4,R3              calc @ end of string\nMVIC3    MVI   OUTOPER+3,X'7D'    add ' to end of constant\nZ99X     LEAVE ,                  RETURN to caller            CFK*NOV03\nCMV2     MVC   OUTOPER+2(1),CXNC  EXecuted to move hex constant\nCMV      MVC   OUTCONST(1),CXNC   EXecuted to move const to object code\nCMV3     MVC   OUTOPER+2(1),FMTTEXT  EXecuted to move char constant\nCMV4     MVC   OUTINFO2(1),FMTTEXT  EXecuted to move to info  CFK*JUN00\nTRTI     TRT   FMTTEXT(1),ABC     EXecuted to check if ebcdic\nTR2      TR    OUTINFO2(1),TRTAB  EXecuted to make printable  CFK*JUN00\n         DC    C'IMM='\nTRTAB    DC    256C'.'            translate table to print text K*JUN00\n         ORG   TRTAB+C' '\n         DC    C' '\n         ORG   TRTAB+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   TRTAB+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   TRTAB+C','\n         DC    C',%_>?'\n         ORG   TRTAB+C'`'\n         DC    C'`:#@''=\"'\n         ORG   TRTAB+C'a'\n         DC    C'abcdefghi'\n         ORG   TRTAB+C'j'\n         DC    C'jklmnopqr'\n         ORG   TRTAB+C's'\n         DC    C'stuvwxyz'\n         ORG   TRTAB+C'{'\n         DC    C'{ABCDEFGHI'\n         ORG   TRTAB+C'}'\n         DC    C'}JKLMNOPQR'\n         ORG   TRTAB+C'\\'\n         DC    C'\\.STUVWXYZ'\n         ORG   TRTAB+C'0'\n         DC    C'0123456789'\n         ORG   ,                           reset origin to max\nEIGHT    DC    F'8'               constant\nTWT      DC    F'20'              constant\nDC       DC    C'DC'              DC to declare constant\nXQ       DC    X'E77D'            X' for start of hex literals\nABC      DC    256X'FF'           Table of valid ebcdic chars CFK*MAR00\n* Note: quote (') and ampersand (&) are not listed because they need\n* to be doubled in strings, which is not done.\n         ORG   ABC+C' '                                       CFK*MAR00\n         DC    X'00'              space (x'40')\n         ORG   ABC+C'\u00a2'                                       CFK*JAN02\n         DC    X'000000000000'    \u00a2.<(+|                      CFK*JAN02\n         ORG   ABC+C'!'                                       CFK*JAN02\n         DC    XL8'00'            !$*);\u00ac-/                    CFK*JAN02\n         ORG   ABC+C'%'                                       CFK*JAN02\n         DC    X'00000000'        %_>?                        CFK*JAN02\n         ORG   ABC+C':'                                       CFK*JAN02\n         DC    X'000000'          :#@                         CFK*JAN02\n         ORG   ABC+C'='                                       CFK*JAN02\n         DC    X'0000'            =\"                          CFK*JAN02\n         ORG   ABC+C'a'                                       CFK*MAY00\n         DC    2X'00000000'       abcdefgh                    CFK*MAY00\n         DC    X'00'              i                           CFK*MAY00\n         ORG   ABC+C'j'                                       CFK*MAY00\n         DC    2X'00000000'       jklmnopq                    CFK*MAY00\n         DC    X'00'              r                           CFK*MAY00\n         ORG   ABC+C's'                                       CFK*MAY00\n         DC    2X'00000000'       stuvwxyz                    CFK*MAY00\n         ORG   ABC+C'A'                                       CFK*MAR00\n         DC    2X'00000000'       ABCDEFGH\n         DC    X'00'              I\n         ORG   ABC+C'J'                                       CFK+MAR00\n         DC    2X'00000000'       JKLMNOPQ\n         DC    X'00'              R\n         ORG   ABC+C'S'                                       CFK*MAR00\n         DC    2X'00000000'       STUVWXYZ\n         ORG   ABC+C'0'                                       CFK*MAR00\n         DC    2X'00000000'       01234567\n         DC    X'0000'            89\n         ORG   ,                  reset origin                CFK*MAR00\n* start of variables\nSICC     DC    F'0'\nZERC     DC    F'0'               constant\nFORC     DC    F'4'               constant\nAFLPT    DC    A(FLPT)            @ FLPT csect\nAFXPT    DC    A(FXPT)            @ FXPT csect\nAADA     DC    A(ADA)             @ ADA in PASS4 csect\nSICC1    DC    F'0'               current address in csect\n* parms to call FXPT\nFHF      DC    F'0'               @ print area\n         DC    F'0'               input constant\n* end of FXPT parms                                           CFK*NOV03\n* parms to call FLPT with\nFHX      DC    F'0'               @ print area\n         DC    F'0'               ) input\n         DC    F'0'               ) TEXT\n         DC    F'0'               flag, x'00' or x'80'\n* end of FLPT parms                                           CFK*NOV03\nCXNC     DS    XL9                work area to unpack to      CFK*NOV03\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                           register equates   CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COTR": {"ttr": 2052, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "COTR     TITLE 'COTR'\n***********************************************************************\n*                                                                     *\n*  holding area for parameter card                                    *\n*                                                                     *\n*  ref'ed by PASS1, PASS3, PASS4, PUNCH                               *\n*                                                                     *\n*  Bytes 1-15 cleared by PASS1                                        *\n*  If 1st card starts with S, P or R PASS1 copies it in here setting  *\n*  the 1st byte to x'00, x'01' or x'02' respectively.                 *\n*  PASS3 checks and sets the 1st byte.                                *\n*  PASS4 checks the 2nd and 8th bytes and sets the 3rd.               *\n*  PUNCH checks the 3rd byte.                                         *\n*                                                                     *\n***********************************************************************\nCOTR     CSECT\n         USING *,15\n         DS    CL80\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COUNT": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x04\\x02\\x1f\\x01\\x04\\x02\\x1f\\x128\\x00u\\x00u\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-21T00:00:00", "modifydate": "2004-01-21T12:38:47", "lines": 117, "newlines": 117, "modlines": 0, "user": "U765139"}, "text": "COUNT    TITLE '*** C O U N T ***  (WITH PAGE HEADING)    AUG. 14,1967'\n***********************************************************************\n*                                                                     *\n*   Output instruction usage table at end of listing                  *\n*                                                                     *\n*  Called by PASS0                                                    *\n*                                                                     *\n* History:                                                            *\n*   Disable punching when printing table                  CFK May 1999*\n*   Move count table into AXN                             CFK May 1999*\n*   Use register equates                                  CFK Dec 2000*\n*   Use standard linkage conventions                      CFK Sep 2003*\n*   Tidy up calls to PRINTA.                              CFK Dec 2003*\n*   Mnemonic is 5 bytes.                                  CFK Jan 2004*\n*   Concatenated object deck support:                     CFK Jan 2004*\n*     Ensure new page started at start of every call.     CFK Jan 2004*\n*                                                                     *\n***********************************************************************\n         AXNTAB                      Map AXN table            CFK*MAY99\nCOUNT    CSECT\n         EXTRN LCT                   in PRINTA csect\n         EXTRN MEN                   @ AXN table\n         EXTRN PRINTA                csect                    CFK*SEP03\n         EXTRN PA                    in PASS1 csect\n         EXTRN PAB                   in PASS1 csect           CFK*OCT03\n         ENTER ,                     entry logic              CFK*SEP03\n         L     R8,PAA                get @ print o/p buffer in PASS1\n         MVI   0(R8),C' '            clear\n         MVC   1(131,R8),0(R8)        print buffer\n         L     R2,AAMEN              get @ opcode name table in AXN\n         USING AXNTAB,R2             tell assembler\n         SR    R9,R9                 clear total use this pass\n         L     R10,TOTAL             get grand total\nCCLL     SR    R6,R6\n         L     R5,AXNTOTCT           ) add current\n         A     R5,AXNUSECT           )  use count\n         ST    R5,AXNTOTCT           )   to total count\n         CR    R6,R5                 use count > 0 ?\n         BE    CLLA                  no - skip printing\n         SRL   R5,1\n         CVD   R5,DWM                make total use decimal\n         UNPK  FPW(8),DWM(8)           and printable\n         OI    FPW+7,C'0'            add sign\n         MVC   2(5,R8),AXNAME        copy mnemonic to output  CFK*JAN04\n         MVC   28(5,R8),FPW+3        copy total use to output buffer\n         L     R5,AXNUSECT           get use count\n         AR    R9,R5                 add to total\n         AR    R10,R5                add to grand total\n         ST    R6,AXNUSECT           zero use count\n         SRL   R5,1\n         CVD   R5,DWM                make use count decimal\n         UNPK  FPW(8),DWM(8)           and printable\n         OI    FPW+7,C'0'            add sign\n         MVC   13(5,R8),FPW+3        copy to output buffer\n         L     R14,CLCT              ) inc\n         LA    R14,1(R14)            )  current\n         ST    R14,CLCT              )   line count\n         C     R14,MCLCT             >= max line count\n         BL    GOCT                  br if not\n* else force new page and o/p headers\n         L     R14,ALCT              get @ printer line count in PRINTA\n         L     R7,APAB               get @ 2nd print buffer   CFK*OCT03\n         MVC   0(4,R14),CLCT         set to 59\n         MVC   CLCT(4),ZRCT          and clear counter\n         MVC   48(L'HEAD1,R7),HEAD1  copy header to buffer    CFK*OCT03\n         L     R15,APRINC            get @ PRINTA csect       CFK*SEP03\n         LR    R1,R7                 get @ print buffer       CFK*DEC03\n         BASR  R14,R15               call PRINTA              CFK*SEP03\n         MVC   0(L'HEAD2,R7),HEAD2   copy header to buffer    CFK*OCT03\n         L     R15,APRINC            get @ PRINTA csect       CFK*SEP03\n         LR    R1,R7                 get @ print buffer       CFK*DEC03\n         BASR  R14,R15               call PRINTA              CFK*SEP03\nGOCT     L     R15,APRINC            get @ PRINTA csect       CFK*SEP03\n         LR    R1,R8                 get @ print line         CFK*DEC03\n         BASR  R14,R15               call PRINTA              CFK*SEP03\nCLLA     LA    R2,AXNNEXT            @ next opcode table entry\n         CLI   AXNAME,C' '           end of table ?\n         BNE   CCLL                  no, process next opcode\n*                       table finished, output totals\n         MVC   0(8,R8),TOT         c'0TOTALS'\n         SRL   R9,1\n         CVD   R9,DWM              make total decimal\n         UNPK  FPW(8),DWM(8)       ) and\n         OI    FPW+7,C'0'          )  printable\n         MVC   13(5,R8),FPW+3      copy to Print Area\n         ST    R10,TOTAL           save grand total\n         SRL   R10,1\n         CVD   R10,DWM             make it decimal\n         UNPK  FPW(8),DWM(8)       ) and\n         OI    FPW+7,C'0'          )  printable\n         MVC   28(5,R8),FPW+3      copy to Print Area\n         L     R15,APRINC          get @ PRINTA csect         CFK*SEP03\n         MVI   CLCT+3,59           need new page next time    CFK*JAN04\n         LR    R1,R8               get @ print area           CFK*DEC03\n         BASR  R14,R15             call PRINTA                CFK*SEP03\n         LEAVE ,                   and exit\n         DC    C'IMM='\n* constants                                                   CFK*SEP03\n         LTORG                                                CFK*SEP03\nPAA      DC    A(PA)               @ print buffer in PASS1    CFK*SEP03\nAPAB     DC    A(PAB)              @ print buffer in PASS1    CFK*OCT03\nMCLCT    DC    F'57'               max lines per page\nZRCT     DC    F'0'                constant zero\nAAMEN    DC    A(MEN)              opcode name table in AXN\nAPRINC   DC    A(PRINTA)           @ print routine            CFK*SEP03\nALCT     DC    A(LCT)              @ LCT in PRINTA csect\nTOT      DC    C'0TOTALS '\nHEAD1    DC    C'--- INSTRUCTION USAGE TABLE --- '            CFK*OCT03\nHEAD2    DC    C'0INSTR   CURRENT USAGE   TOTAL USAGE '       CFK*OCT03\n* variables                                                   CFK*SEP03\nCLCT     DC    F'59'               current line on page counter\nTOTAL    DC    F'0'                grand total\nDWM      DC    D'0'                work area for CVD\nFPW      DC    D'0'                work area to unpack to\nSAVEAREA DS    18F                                            CFK*SEP03\n         YREGS ,                   register equates           CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CRLD": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x03\\'o\\x01\\x03\\'o\\x10\"\\x00\\\\\\x00\\\\\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-03T00:00:00", "modifydate": "2003-10-03T10:22:45", "lines": 92, "newlines": 92, "modlines": 0, "user": "U765139"}, "text": "CRLD     TITLE 'CRLD, Get logical address of next ADCON'\n***********************************************************************\n*                                                                     *\n*  Get logical address of next ADCON                                  *\n*                                                                     *\n*  Called by FTXTA                                                    *\n*                                                                     *\n*  Parms @ R1:                                                        *\n*    +0  - output 8 byte RLD entry mapped by RLDITEM                  *\n*    +4  - output logical address of next ADCON (part of RLD entry)   *\n*    +8  - output 2 byte field, length of ADCON                       *\n*    +10 - input 2 byte field, current ESD ID                         *\n*                                                                     *\n*  Return to @ R14                                                    *\n*                                                                     *\n*  History:                                                           *\n*    Use dsect for parameters.                           CFK Dec 2000 *\n*    Use register equates.                               CFK Dec 2000 *\n*    Use standard entry/exit logic.                      CFK Dec 2000 *\n*    Set adcon address to x'FFFFFF' when no more.        CFK Dec 2000 *\n*    Multi-csect object deck support.                    CFK Dec 2001 *\n*      Output adcon len now 2 bytes.                     CFK Dec 2001 *\n*      Only pass back adcons in current csect.           CFK Mar 2002 *\n*    Dymanic RLD buffer support, ARLDE now set by RLD.   CFK Mar 2003 *\n*    Rewrite to remove O(n\u00ac2) runtime.                   CFK May 2003 *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT                    parameters\nPRMRLD   DS    0CL8               output RLD entry\nPRMRLD1  DS    CL4                1st half of RLD entry\nPRMRLD2  DS    0CL4               2nd half\nPRMRLDFL DS    X                  flag byte\nPRMRLDAD DS    XL3                address of adcon\nPRMRLDLN DS    XL2                length of adcon\nPRMRLDID DS    XL2                current ESD ID              CFK*DEC01\n*\n         RLDITEM                  map RLD item                CFK*DEC01\n*                                                             CFK*MAY03\n         RLDARRAY                 array of sorted RLD entries CFK*MAY03\n*\nCRLD     CSECT\n         ENTRY RLF                ref'ed by FTXTA             CFK*APR03\n         ENTRY ARLDE              ref'ed by RLD               CFK*MAR03\n         EXTRN NBR                in RLD csect\n         ENTER                                                CFK*DEC00\n         USING PRMDUM,R1          tell assembler about parms  CFK*DEC00\n         USING RLDITEM,PRMRLD     and map RLD entry           CFK*MAR02\n         CLI   RLF,X'FF'          1st pass over current csect ?\n         BE    BRLD               br if not 1st pass\n         MVI   RLF,X'FF'          else indicate not 1st pass\n         L     R3,ANBR            INITIALIZE, get @ RLD length FK*MAR03\n         L     R4,ARLDE           get @ RLD table\n         ST    R4,ARLDS           set @ current entry\n         A     R4,0(R3)           calc @ end of table\n         ST    R4,RLB             save @ end of table\n         MVI   PRMRLDFL,X'00'     flag not continuation\nBRLD     DS    0H\n         L     R3,ARLDS           get RLD pointer\n         USING RLDARRAY,R3                                    CFK*MAY03\nBRLD2    DS    0H\n         C     R3,RLB             end of table reached ?\n         BNL   REN                branch if end reached\n         MVC   RLDITGID,RLDATGID  )                           CFK*MAY03\n         MVC   RLDISDID,RLDASDID  ) build output              CFK*MAY03\n         MVC   PRMRLDFL,RLDAFLAG  )  RLD entry                CFK*MAY03\n         MVC   PRMRLDAD,RLDAADR   )                           CFK*MAY03\n         LA    R3,8(R3)           point @ next RLD entry      CFK*MAY03\n         CLC   RLDISDID,PRMRLDID  is it for current CSECT ?   CFK*MAY03\n         BNE   BRLD2              if not try next entry       CFK*MAR02\n         L     R4,PRMRLDFL        ) get length\n         SLL   R4,4               )  of this\n         SRL   R4,30              )   RLD entry\n         LA    R4,1(R4)           CALCULATE LENGTH\n         STH   R4,PRMRLDLN        save length\n         ST    R3,ARLDS           save @ current RLD entry\n         B     RRR                and return\nREN      DS    0H\n         MVC   PRMRLDLN,LRD       YES, pass dummy len of x'FFFF' *DEC01\n         MVC   PRMRLDAD,LRD       and dummy adr. of x'FFFFFF' CFK*DEC00\n         MVI   PRMRLDFL,X'00'     flag no continuation\n         MVC   ARLDS(4),ARLDE     reset RLD pointer to base value\nRRR      LEAVE                                                CFK*DEC00\n         DC    C'IMM='\nANBR     DC    A(NBR)             @ NBR in RLD csect          CFK*MAR03\nARLDS    DC    A(0)               @ RLD buffer                CFK*MAR03\nARLDE    DC    A(0)               @ RLD buffer, set by RLD    CFK*MAR03\nRLB      DC    F'0'               @ end of RLD table\nRLF      DC    X'00'              flag, cleared by FTXTA\nLRD      DC    X'FFFFFF'          constant                    CFK*DEC01\nSAVEAREA DS    18F                                            CFK*OCT03\n         YREGS                    register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CXN": {"ttr": 2060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CXN      TITLE 'CXN, Convert heX to Number'\n***********************************************************************\n*                                                                     *\n*        Convert 4 byte hex number at 0(r14) to 8 bytes bcd starting  *\n*        at the same address. Return is to R14+12.                    *\n*        R13 is reloaded from R14+8 where the caller should save it.  *\n*                                                                     *\n*  Called by PASS4, SI, FTXTA, SAVA, PR, PASS3, ESD0, ARL, CONST,     *\n*            ADDR and ART                                             *\n*                                                                     *\n*  Uses R1, R2, R3, R5 as well as R13, R14.                           *\n*                                                                     *\n*  history:                                                           *\n*    use register equates                                CFK dec 2000 *\n*                                                                     *\n***********************************************************************\nCXN      CSECT\n         BALR  R13,0               setup base reg\n         USING *,R13               tell assembler\n         L     R3,0(R14)           load number to convert\n         LA    R5,0(R14)           get @ output area\n         LA    R1,8                no of nibbles to convert to bytes\nSH       SR    R2,R2               clear r2\n         SLDL  R2,4                put next nibble into it\n         A     R2,AONE             calc adr of correct table entry\n         MVC   0(1,R5),0(R2)       copy 1 byte to output area\n         LA    R5,1(R5)            point at next output byte\n         BCT   R1,SH               if not finished loop\n         L     R13,8(R14)          reload callers base register\n         BAL   R14,12(R14)         RETURN\n         DC    C'IMM='\nAONE     DC    A(HX)               @ lookup table\nHX       DC    C'0123456789ABCDEF' hex digit to bcd table\n         YREGS ,                   register equates           CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DECO": {"ttr": 2062, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DECO     TITLE 'DECOMP DUMMY'\n***********************************************************************\n*                                                                     *\n*  Called by PASS4                                                    *\n*                                                                     *\n*  History:                                                           *\n*    Use register equates.                                CFK Sep 2003*\n*    Use standard linkage (return to R14).                CFK Sep 2003*\n*                                                                     *\n***********************************************************************\nDECOMP   CSECT\n         USING *,R15\n         L     R15,20(R1)\n         BR    R14                                            CFK*SEP03\n         YREGS ,                      register equates        CFK*SEP03\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELINK0": {"ttr": 2064, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "DISINF": {"ttr": 2067, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MDMP     TITLE 'MNEMONIC DUMP PREPARATION                AUG.  1, 1967'\nDISINF   CSECT\n         STM   14,12,12(13)  SAVE REGISTERS FROM PREVIOUS PROGRAM\n         BALR  12,0          ESTABLISH BASE FORE ADDRESSING PURPOSES\n         USING *,12\n         ST    RSA,SAVE+4    STORE POINTER TO SAVE AREA\n         LR    11,RSA        HOLD SAVE ADR JUST USED\n         LA    RSA,SAVE      PROVIDE NEW SAVE AREA\n         ST    RSA,8(11)     GIVE CALLER THIS SAVE ADR\n         LM    CAD,NBD,0(LP)\n         CR    CAD,NBD       ARE LIMITS IN ORDER\n         BNH   NX            BRANCH IF YES\n         XR    CAD,NBD       INTER-\n         XR    NBD,CAD       CHANGE\n         XR    CAD,NBD       LIMITS\nNX       SR    NBD,CAD       NUMBER OF BYTES TO BE DUMPED\n         TM    DCB+48,X'10'  IS DATA SET OPEN\n         BO    RIN           BRANCH IF YES\n         OPEN  (DCB,(OUTPUT)) OPEN DATA SET\n         TM    DCB+48,X'10'  WAS OPEN SUCCESSFUL\n         BO    RIN           BRANCH IF YES\n         ABEND 37,DUMP       DUMP IF UNABLE TO OPEN DATA SET\nRIN      MVC   NC(4),NS      RESET CARD COUNT\n         ST    CAD,ADDR      PLACE STARTING ADDR ON ESD CARD\n         MVC   ESDSA(3),ADDR+1\n         C     NBD,LCD       MORE THAN 16K?\n         BL    LESS          BRANCH IF NO\n         MVC   ESDLN(3),LCD+1 MAKE SECTION LENGTH 16K\n         B     ESDIO\nLESS     ST    NBD,TEMP      PLACE SECTION LENGTH ON ESD CARD\n         MVC   ESDLN(3),TEMP+1\nESDIO    LA    DA,ESDC       PUNCH ESD CARD\n         BAL   14,IO\n         SR    MBC,MBC       ZERO MAX BYTE COUNT\n         SR    BYC,BYC       ZERO BYTE COUNT\n         MVC   NBY(2),T38    NUMBER OF BYTES ON TXT CARD=56\nLOOP     ST    CAD,ADDR      ADDR OF FIRST BYTE\n         MVC   TXT(56),0(CAD) MOVE DATA TO TXT AREA\n         MVC   STA(3),ADDR+1 MOVE FIRST ADDRESS\n         L     PCC,NC\n         LA    PCC,1(PCC)    INCREMENT CARD COUNT\n         ST    PCC,NC\n         CVD   PCC,DWD       CONVERT TO DECIMAL\n         UNPK  CN(3),DWD+6(2)\n         OI    CN+2,C'0'     PLACE COUNT IN PUNCH AREA\n         LA    MBC,56(MBC)   INCREMENT MAXIMUM BYTE COUNT\n         LA    BYC,56(BYC)   INCREMENT BYTE COUNT\n         CR    BYC,NBD       HOW MANY BYTES LEFT\n         BL    CONT          BRANCH IF MORE THAN 56 BYTES LEFT\n         BE    RTNE          BRANCH IF EXACTLY 56 BYTES LEFT\n         LA    NBD,56(NBD)   LESS THAN 56 BYTES LEFT\n         SR    NBD,BYC       FIND NUMBER OF BYTES LEFT\n         MVI   TXT,C' '\n         MVC   TXT+1(55),TXT BLANK TXT AREA\n         ST    NBD,TEMP\n         MVC   NBY(2),TEMP+2 SET NEW COUNT\n         BCTR  NBD,0         DECREMENT NBD BY ONE\n         EX    NBD,MOVE      MOVE REMAINING BYTES\nRTNE     BAL   14,PUNCH      PUNCH TXT CARD\n         B     RTNC\nCONT     C     MBC,LCD       MORE THAN 16K\n         BNE   GON           BRANCH IF NO\n         S     NBD,LCD       INITIALIZE FOR NEXT 16K\n         BAL   14,PUNCH      PUNCH TXT CARD\n         BAL   14,ENDC       PUNCH END CARD\n         LA    CAD,56(CAD)   INCREMENT CORE ADDRESS\n         B     RIN           BEGIN NEXT SECTION\nGON      BAL   14,PUNCH      PUNCH TXT CARD\n         LA    CAD,56(CAD)   INCREMENT CORE ADDRESS\n         CR    NBD,BYC       END OF DATA\n         BNE   LOOP          CONTINUE PUNCHING IF NO\nRTNC     BAL   14,ENDC       PUNCH END CARD\n         CLOSE (DCB)         CLOSE DATA SET\nRETF     L     RSA,SAVE+4    RETURN\n         LM    14,12,12(13)\n         BR    14\nMOVE     MVC   TXT(1),0(CAD)\nIO       STM   14,1,SLKG     SAVE LINKAGE REGS\n         PUT   DCB,(0)       WRITE ONE LOGICAL RECORD\n         LM    14,1,SLKG     RESTORE LINKAGE REGS\n         BR    14\nPUNCH    LA    DA,PCARD      PUNCH DATA IS TXT CARD\n         B     IO            GO TO I/O ROUTINE\nENDC     L     PCC,NC\n         LA    PCC,1(PCC)    INCREMENT CARD COUNT\n         ST    PCC,NC\n         CVD   PCC,DWD       CONVERT TO DECIMAL\n         UNPK  ENDSQ(3),DWD+6(2)\n         OI    ENDSQ+2,C'0'  FORMAT SEQ. NO. ON END CARD\n         LA    DA,ECARD      PUNCH DATA IS END CARD\n         B     IO            GO TO I/O ROUTINE\nDA       EQU   0             DATA ADDRESS\nLP       EQU   1             LIST POINTER\nCAD      EQU   2             CORE ADDRESS\nNBD      EQU   3             NUMBER OF BYTES DUMPED\nPCC      EQU   4             PUNCH CARD COUNT\nBYC      EQU   5             BYTE COUNT\nMBC      EQU   6             MAXIMUM BYTE COUNT\nRSA      EQU   13            SAVE AREA POINTER\nESDC     DC    X'02'         ESD CARD\n         DC    CL9'ESD '\n         DC    X'0010'       FIELD COUNT\n         DC    CL2' '\n         DC    X'0001'       ESD I.D. NO.\n         DC    CL8'MAIN '    CSECT NAME\n         DC    X'00'         ESD TYPE CODE\nESDSA    DC    X'000000'     STARTING ADDRESS\n         DC    CL1' '\nESDLN    DC    X'000000'     SECTION LENGTH\n         DC    CL45'  '\n         DC    CL3'001'      SEQ. NO.\nPCARD    DC    X'02'         TXT CARD\n         DC    C'TXT '\nSTA      DC    X'000000'\n         DC    C'  '\nNBY      DC    X'0038'       BYTE COUNT\n         DC    C'  '\n         DC    X'0001'\nTXT      DS    CL56          TXT INFO\n         DC    5C' '\nCN       DC    C'000'        CARD COUNT\nECARD    DC    X'02'         END CARD\n         DC    CL76'END '\nENDSQ    DC    CL3'000'      SEQ. NO.\nDWD      DC    D'0'\nADDR     DC    F'0'\nLCD      DC    F'16352'      292 CARDS\nNS       DC    F'1'          ONE\nNC       DC    F'0'          CARD COUNT\nTEMP     DC    F'0'          TEMPORARY\nT38      DC    H'56'         56 BYTES ON FULL CARD\nSLKG     DS    4F            LINKAGE REGS SAVE AREA\nSAVE     DC    3F'0'         SAVE\n         DS    15F           AREA\nDCB      DCB   DDNAME=OUT,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80,BLKSIZEX\n               =0,EROPT=ACC\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISSYM": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00F\\x01\\x01\\x11\\x7f\\x01\\x04\\x15O\\x12(\\x00+\\x00&\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-04-27T00:00:00", "modifydate": "2004-06-02T12:28:46", "lines": 43, "newlines": 38, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n*                                                                     *\n*   DISSASSEMBLE SYM RECORDS IN AN OBJECT DECK                        *\n*                                                                     *\n*   INPUT                                                             *\n*       OBJECT DECK CONTAINING SYM RECORDS.                           *\n*                                                                     *\n*   OUTPUT                                                            *\n*       DISSASSEMBLY PRODUCED BY LSYM CSECT.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDISSYM   CSECT\n         ENTER\n*\n         OPEN  (DCB1,INPUT)\n*\nLOOP     DS    0H\n*\n         GET   DCB1\n*\n         CLC   SYMREC,0(R1)            SYM RECORD ?\n         BNE   LOOP                    IF NOT GET NEXT REC\n         L     R15,=V(LSYM)            ELSE GET @ LSYM\n         BASR  R14,R15                 CALL LSYM\n         B     LOOP                    AND GET NEXT RECORD\n*\nEOF      DS    0H\n*\n         CLOSE DCB1\n*\n         LEAVE\n*\nSYMREC   DS    0CL4                  SYM RECORD HEADER\n         DC    X'02'\n         DC    C'SYM'\nSAVEAREA DS    18F                                            CFK*JUN04\n*\nDCB1     DCB   DSORG=PS,MACRF=GL,EODAD=EOF,DDNAME=SYSUT1,RECFM=FB,     X\n               LRECL=80\n         PRINT NOGEN\n         REGEQU\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISYM": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x01\\x12\\x7f\\x01\\x01\\x12\\x7f\\x125\\x00d\\x00d\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-07T00:00:00", "modifydate": "2001-05-07T12:35:53", "lines": 100, "newlines": 100, "modlines": 0, "user": "U765139"}, "text": "         TITLE 'DISYM - Dissassemble SYM records from a LMOD'\n***********************************************************************\n*                                                                     *\n*  Dissassemble the SYM records in a load module.                     *\n*                                                                     *\n*  This module reads the SYM records from a load module, extracts     *\n*  the object SYM cards, passes them to LSYM to generate a skeleton   *\n*  dissassembly and puts them to syspunch for later use.              *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*  Dsect to map a SYM record in a load module                         *\n*                                                                     *\n***********************************************************************\nSYML     DSECT\nSYMLID   DS    X                       identification X'40'\nSYMLIDOK EQU   B'01000000'               SYM record\nSYMLTYPE DS    X                       type\nSYMLTNO  EQU   B'10000000'               from csect not asm with TEST\nSYMLLEN  DS    XL2                     length of SYM data (max 240)\nSYMLLEN1 EQU   SYMLLEN+1,1              short length\nSYMLCARD DS    XL80                    1st card\nSYMLCRD2 DS    XL80                    2nd card\nSYMLCRD3 DS    XL80                    3rd card\n*\nDISYM    CSECT\n         SAVE  (14,12)                 SAVE REGS\n         BASR  R12,0                   SET UP OUR BASE REG\n         USING *,R12                   TELL ASSEMBLER\n         LR    R14,R13                 SAVE HSA ADDRESS\n         LA    R13,SAVEAREA            GET @ SAVE AREA\n         ST    R13,8(0,R14)            FORWARD POINTER\n         ST    R14,4(0,R13)            BACKWARD POINTER\n*\n         OPEN  (INDCB)                 open input DCB\n*\n         OPEN  (OUTDCB,(OUTPUT))       open output DCB\n*\nGETREC   DS    0H\n*\n         GET   INDCB                   get a record\n*\n         LR    R3,R1                   copy @ lmod record\n         USING SYML,R3                 tell assembler\n         CLI   SYMLID,SYMLIDOK         SYM record ?\n         BNE   EOJ                     no - exit\n         CLI   SYMLLEN1,80             long enough for 1 card\n         BL    GETREC                  no - get another record\n         CLC   SYMC,SYMLCARD           is it a SYM card ?\n         BNE   CHK2                    no, try next (probably ESD card)\n         LA    R1,SYMLCARD             get @ first card\n         L     R15,=V(LSYM)            get @ processing routine\n         BASR  R14,R15                 call SYM\n         LA    R0,SYMLCARD             get @ first card for put\n*\n         PUT   OUTDCB                  copy object record to workfile\n*\nCHK2     DS    0H\n*\n         CLI   SYMLLEN1,160            long enough for 2nd card\n         BL    GETREC                  no - get another record\n         CLC   SYMC,SYMLCRD2           is it a SYM card ?\n         BNE   CHK3                    no,try next (probably ESD card)\n         LA    R1,SYMLCRD2             get @ 2nd card\n         L     R15,=V(LSYM)            get @ processing routine\n         BASR  R14,R15                 call SYM\n         LA    R0,SYMLCRD2             get @ 2nd card for put\n*\n         PUT   OUTDCB                  copy object record to workfile\n*\nCHK3     DS    0H\n*\n         CLI   SYMLLEN1,240            long enough for 3rd card\n         BL    GETREC                  no - get another record\n         CLC   SYMC,SYMLCRD3           is it a SYM card ?\n         BNE   GETREC                  no, get next (probably ESD card)\n         LA    R1,SYMLCRD3             get @ 3rd card\n         L     R15,=V(LSYM)            get @ processing routine\n         BASR  R14,R15                 call SYM\n         LA    R0,SYMLCRD3             get @ 3rd card for put\n*\n         PUT   OUTDCB                  copy object record to workfile\n*\n         B     GETREC                  get another record\n*\nEOJ      CLOSE (OUTDCB,,INDCB)\n         L     R13,4(R13)              GET @ CALLER SAVE AREA\n         XC    8(4,13),8(13)           CLEAR CALLER'S HSA CHAIN\n         RETURN (14,12),,RC=0\n         EJECT\nSAVEAREA DS    18F                     SAVE AREA\nSYMC     DS    0CL4                    SYM card header\n         DC    X'02',C'SYM'\nINDCB    DCB   DDNAME=SYSLIN,DSORG=PS,RECFM=U,MACRF=(GL),EODAD=EOJ\n         SPACE 5\nOUTDCB   DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DS": {"ttr": 2312, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DS       TITLE 'DUMMY CSECT FOR DS'\n***********************************************************************\n*                                                                     *\n*  Called by FTXTA                                                    *\n*                                                                     *\n*  History:                                                           *\n*    Use standard linkage (return to R14)                CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\nDS       CSECT\n         USING *,13\n         BR    14                                             CFK*NOV03\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ENTER": {"ttr": 2314, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          ENTRY\n&LABEL   ENTER                                                          ENTER\n&LABEL   SAVE  (14,12)                 SAVE REGS                        ENTER\n         BASR  12,0                    SET UP OUR BASE REG              ENTER\n         USING *,12                    TELL ASSEMBLER                   ENTER\n         LR    14,13                   SAVE HSA ADDRESS                 ENTER\n         LA    13,SAVEAREA             GET @ SAVE AREA                  ENTER\n         ST    13,8(0,14)              FORWARD POINTER                  ENTER\n         ST    14,4(0,13)              BACKWARD POINTER                 ENTER\n         MEND                                                           ENTER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTRYMAP": {"ttr": 2316, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          ENTRYMAP\n         ENTRYMAP                                                       ENTRYMAP\n*********************************************************************** ENTRYMAP\n*                                                                     * ENTRYMAP\n*  map of the ESD LD list in ESD1                                     * ENTRYMAP\n*                                                                     * ENTRYMAP\n*  called by PASS3                                                    * ENTRYMAP\n*                                                                     * ENTRYMAP\n*********************************************************************** ENTRYMAP\nENTRYMAP DSECT                                                          ENTRYMAP\nENTRYENT DS    0CL(ENTELEN)     The whole entry                         ENTRYMAP\nENTNAME  DS    CL8              ENTRY name                              ENTRYMAP\nENTESDID DS    CL2              ESD identifier of section ENTRY is in   ENTRYMAP\nENTADR   DS    CL3              Address of ENTRY                        ENTRYMAP\nENTELEN  EQU   *-ENTNAME        Length of entry in the table            ENTRYMAP\n         MEND                                                           ENTRYMAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESD": {"ttr": 2318, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ESD      TITLE 'ESD'\n***********************************************************************\n*                                                                     *\n*  Process ESD card from input                                        *\n*                                                                     *\n*  Called by PASS1                                                    *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    +0 - @ input card                                                *\n*                                                                     *\n*  This csect passes input ESD cards to the appropriate handling      *\n*  routine.                                                           *\n*                                                                     *\n*  History:                                                           *\n*    pass weak extrns to ESD2, like normal extrns         CFK may 1999*\n*    add the input ESD card to the ILLEGAL ESD CARD msg   CFK may 1999*\n*    pass Private Code to ESD0 like SD                    CFK jun 1999*\n*    use register equates                                 CFK dec 2000*\n*    pass ESD ID separately to ESDx                       CFK nov 2001*\n*    after invalid ESD entries check other ESD entries    CFK nov 2001*\n*    vet ESD data length                                  CFK nov 2001*\n*    Pass PRs to ESD2                                     CFK May 2003*\n*    Pass CMs to ESD2, not ESD5                           CFK May 2003*\n*    Use standard linkage conventions                     CFK Sep 2003*\n*    Tidy up calls to PRINTA.                             CFK Dec 2003*\n***********************************************************************\n         ESDCARD                      map ESD card            CFK*NOV01\n         ESDITEM                      map ESD item on card    CFK*NOV01\nESD      CSECT\n         ENTER ,                      entry logic             CFK*SEP03\n         EXTRN SCNE                   in ESD2 csect\n         EXTRN ESD0                   csect\n         EXTRN ESD1                   csect\n         EXTRN ESD2                   csect\n         EXTRN PA                     in PASS1 csect          CFK*SEP03\n         L     R7,0(R1)               get @ input card        CFK*SEP03\n         USING ESDCARD,R7             tell assembler          CFK*SEP03\n         LA    R8,ESDCENT1            get @ first entry       CFK*NOV01\n         USING ESDITEM,R8             tell assembler          CFK*NOV01\n         TM    ESDCLEN+1,X'0F'        ESD dat len mul of 16 ? CFK*NOV01\n         BNZ   BADCARD                no - invalid card       CFK*NOV01\n         CLC   ESDCLEN,=H'0'          any data ?              CFK*NOV01\n         BNH   BADCARD                no - invalid card       CFK*NOV01\n         CLC   ESDCLEN,=H'48'         length valid ?          CFK*NOV01\n         BNH   GOODCARD               yes - valid card        CFK*NOV01\nBADCARD  DS    0H                                             CFK*NOV01\n         L     R1,=A(PA)              get @ print area        CFK*SEP03\n         MVC   0(L'ESDC,R1),ESDC      copy error message      CFK*SEP03\n         MVC   L'ESDC(80,R1),ESDCARD  copy input card         CFK*SEP03\n         L     R15,=V(PRINTA)         get @ PRINTA csect      CFK*SEP03\n         BASR  R14,R15                call PRINTA to o/p msg  CFK*OCT03\n         B     Z10Z                   and exit                CFK*SEP03\nGOODCARD DS    0H                                             CFK*NOV01\n         LH    R9,ESDCID              get first ESD ID        CFK*NOV01\n         MVC   ESC+2(2),ESDCLEN       copy length of ESD data\n         L     R4,ASCNE               @ scne in esd2 csect\n         MVC   2(2,R4),ESDCID         copy ESD identifier of 1st item\n         CLC   0(4,R4),C01            =x'00000001' ?\n         BNE   COM3                   br if not\n         MVI   3(R4),X'02'            else set to x'02'\nCOM3     LM    R3,R5,ESDB             get BXLE parms\nCOME     CLC   ESDITYPE,0(R3)     SELECT                      CFK*NOV01\n         BE    BESD               ESD\n         BXLE  R3,R4,COME         SUBROUTINE\nESD3     DS    0H                 error - unknown entry type  CFK*NOV01\n         UNPK  ESDIHEX(15),ESDITEM(8)                         CFK*NOV01\n         UNPK  ESDIHEX+14(15),ESDITEM+7(8)                    CFK*NOV01\n         UNPK  ESDIHEX+28(5),ESDITEM+14(3)                    CFK*NOV01\n         TR    ESDIHEX,=C'0123456789ABCDEF'-240    make hex   CFK*NOV01\n         MVI   ESDIHEX+L'ESDIHEX,C' ' clear gash byte         CFK*NOV01\n         MVC   ESDICHAR,ESDITEM       copy ESD entry          CFK*NOV01\n         TR    ESDICHAR,TRTAB         make printable          CFK*NOV01\n         L     R1,=A(PA)              get @ print area        CFK*SEP03\n         MVC   0(ESDILN,R1),ESDI      copy error message      CFK*SEP03\n         L     R15,=V(PRINTA)         get @ PRINTA csect      CFK*SEP03\n         BASR  R14,R15                call PRINTA to o/p msg  CFK*OCT03\n         B     NEXTITEM               and try next item       CFK*NOV01\n*                  call ESDx subroutine\nBESD     S     R3,ESDB                calc offset into table\n         LA    R3,AESD(R3)            @ ESDx csect vcon\n         L     R15,0(R3)              get @ ESDx csect        CFK*OCT03\n         ST    R7,ESDXCARD            pass @ card to ESDx     CFK*SEP03\n         ST    R8,ESDXITEM            pass @ current entry    CFK*NOV01\n         STH   R9,ESDXID              pass ESD ID             CFK*NOV01\n         LA    R1,ESDXPRMS            get @ parameters        CFK*NOV01\n         BASR  R14,R15            BRANCH TO SUBR              CFK*OCT03\nNEXTITEM DS    0H                                             CFK*NOV01\n         LA    R8,16(R8)              get @ next ESD item     CFK*NOV01\n         LA    R9,1(R9)               increment ESD ID        CFK*NOV01\n         L     R3,ESC                 get len of ESD data\n         S     R3,SI6                 subtract len of an ESD entry\n         ST    R3,ESC                 save length\n         BP    COM3                   br if more entries to process\nZ10Z     LEAVE ,                      exit                    CFK*SEP03\n         DC    C'IMM='\nTRTAB    DC    256C'.'                translate table         CFK*NOV01\n         ORG   TRTAB+C' '                                     CFK*NOV01\n         DC    C' '                                           CFK*NOV01\n         ORG   TRTAB+C'\u001b'                                     CFK*NOV01\n         DC    C'\u001b.<(+|&&'                                    CFK*NOV01\n         ORG   TRTAB+C'!'                                     CFK*NOV01\n         DC    C'!$*);\u00ac-/'                                    CFK*NOV01\n         ORG   TRTAB+C','                                     CFK*NOV01\n         DC    C',%_>?'                                       CFK*NOV01\n         ORG   TRTAB+C'`'                                     CFK*NOV01\n         DC    C'`:#@''=\"'                                    CFK*NOV01\n         ORG   TRTAB+C'a'                                     CFK*NOV01\n         DC    C'abcdefghi'                                   CFK*NOV01\n         ORG   TRTAB+C'j'                                     CFK*NOV01\n         DC    C'jklmnopqr'                                   CFK*NOV01\n         ORG   TRTAB+C's'                                     CFK*NOV01\n         DC    C'stuvwxyz'                                    CFK*NOV01\n         ORG   TRTAB+C'{'                                     CFK*NOV01\n         DC    C'{ABCDEFGHI'                                  CFK*NOV01\n         ORG   TRTAB+C'}'                                     CFK*NOV01\n         DC    C'}JKLMNOPQR'                                  CFK*NOV01\n         ORG   TRTAB+C'\\'                                     CFK*NOV01\n         DC    C'\\.STUVWXYZ'                                  CFK*NOV01\n         ORG   TRTAB+C'0'                                     CFK*NOV01\n         DC    C'0123456789'                                  CFK*NOV01\n         ORG   ,                      reset origin to max     CFK*NOV01\nASCNE    DC    A(SCNE)                @ SCNE in ESD2 csect\nAESD     DC    A(ESD2)           @ ESD2 csect, for CM entries CFK*MAY03\n         DC    A(ESD2)           @ ESD2 csect      ER\n         DC    A(ESD2)           @ ESD2 csect      WX         CFK*MAY99\n         DC    A(ESD1)           @ ESD1 csect      LD\n         DC    A(ESD0)           @ ESD0 csect      SD\n         DC    A(ESD0)           @ ESD0 csect      PC         CFK*JUN99\n         DC    A(ESD2)           @ ESD2 csect      PR         CFK*MAY03\n         DC    A(ESD2)           @ ESD2 csect      ?          CFK*MAY03\n         DC    A(ESD2)           @ ESD2 csect      ?\n         DC    A(ESD1)           @ ESD1 csect      ?\n         DC    A(ESD0)           @ ESD0 csect      ?\nESDB     DC    A(N02)                 BXLE parms, @ list to search\n         DC    F'4'                     length of each entry\n         DC    A(N00)                   @ last entry\nESD14    DC    F'0'\nN02      DC    X'05000000'           CM type ESD entry, pass to  ESD2\n         DC    X'02000000'           ER, External Reference      ESD2\n         DC    X'0A000000'           WX, Weak eXternal ref.      ESD2\n         DC    X'01000000'           LD, Label (EXTRN)           ESD1\n         DC    X'00000000'           SD, Section (CSECT)         ESD0\n         DC    X'04000000'           PC, Private Code            ESD0\n         DC    X'06000000'           PR, Pseudo Register ESD2 CFK*MAY03\n         DC    X'F5000000'                                       ESD2\n         DC    X'F2000000'                                       ESD2\n         DC    X'F1000000'                                       ESD1\nN00      DC    X'F0000000'                                       ESD0\nSI6      DC    F'16'\nESC      DC    F'0'                   length of ESD data\nC01      DC    F'1'\nESDC     DC    C'**  ILLEGAL ESD CARD:'\nESDI     DC    C'**  ILLEGAL ESD ITEM:'                       CFK*NOV01\nESDIHEX  DS    CL32                    ESD entry in hex       CFK*NOV01\n         DC    C' *'                   start of chars         CFK*NOV01\nESDICHAR DS    CL16                    character dump         CFK*NOV01\n         DC    C'*'                    end of chars           CFK*NOV01\nESDILN   EQU   *-ESDI                  length of message      CFK*NOV01\nESDXPRMS DS    0F                      parms for ESDx rtns    CFK*NOV01\nESDXCARD DS    F                         @ input card         CFK*NOV01\nESDXITEM DS    F                         @ ESD item           CFK*NOV01\nESDXID   DS    H                         ESD ID of item       CFK*NOV01\nSAVEAREA DS    18F                                            CFK*SEP03\n         YREGS ,                       register equates       CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ESDCARD": {"ttr": 2322, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          ESDCARD\n         ESDCARD                                                        ESDCARD\n*********************************************************************** ESDCARD\n*                                                                     * ESDCARD\n*  map of an ESD card                                                 * ESDCARD\n*                                                                     * ESDCARD\n*********************************************************************** ESDCARD\nESDCARD  DSECT          from-to                                         ESDCARD\nESDCCON1 DS    X           1-1  Constant X'02'                          ESDCARD\nESDCCON2 DS    CL3         2-4  Constant C'ESD'                         ESDCARD\n         DS    CL6         5-10 spaces                                  ESDCARD\nESDCLEN  DS    XL2        11-12 Length of ESD data (16, 32 or 48)       ESDCARD\n         DS    CL2        13-14 spaces                                  ESDCARD\nESDCID   DS    CL2        15-16 ESD ID of first item other than LD      ESDCARD\nESDCENT1 DS    CL16       17-32 First ESD item                          ESDCARD\nESDCENT2 DS    CL16       33-48 Second ESD item                         ESDCARD\nESDCENT3 DS    CL16       49-64 Third ESD item                          ESDCARD\n         DS    CL8        65-72 spaces                                  ESDCARD\n         DS    CL8        73-80 Deck ID (not used)                      ESDCARD\n         MEND                                                           ESDCARD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESDITEM": {"ttr": 2324, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00I\\x01\\x011\\x0f\\x01\\x024o\\x12&\\x00$\\x00#\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-11-06T00:00:00", "modifydate": "2002-12-12T12:26:49", "lines": 36, "newlines": 35, "modlines": 0, "user": "U765139"}, "text": "         MACRO                                                          ESDITEM\n         ESDITEM                                                        ESDITEM\n*********************************************************************** ESDITEM\n*                                                                     * ESDITEM\n*  map of an ESD item in an ESD card                                  * ESDITEM\n*                                                                     * ESDITEM\n*********************************************************************** ESDITEM\nESDITEM  DSECT          from-to                                         ESDITEM\nESDINAME DS    CL8         1-8  referenced name                         ESDITEM\nESDITYPE DS    CL1         9-9  ESD type, SD or PC                      ESDITEM\nESDITSD  EQU   X'00'              Section Descriptor (CSECT or RSECT)   ESDITEM\nESDITLC  EQU   X'01'              Label Description                     ESDITEM\nESDITER  EQU   X'02'              External Reference                    ESDITEM\nESDITPC  EQU   X'04'              Private Code                          ESDITEM\nESDITCM  EQU   X'05'              Common                                ESDITEM\nESDITPR  EQU   X'06'              Pseudo register                       ESDITEM\nESDITWX  EQU   X'0A'              Weak External Reference               ESDITEM\nESDIADR  DS    CL3        10-12 Adr of section, Private Code or Label   ESDITEM\nESDIINFO DS    CL1        13-13 Alignment/Amode/Rmode info              ESDITEM\n* if Pseudo Register:                                                   ESDITEM\nESDIIAD  EQU   7                  PR is doubleword aligned              ESDITEM\nESDIIAF  EQU   3                  PR is fullword aligned                ESDITEM\nESDIIAH  EQU   1                  PR is halfword aligned                ESDITEM\nESDIIAB  EQU   0                  PR is byte aligned                    ESDITEM\n* if Section or Private Code:                                           ESDITEM\nESDIIRO  EQU   B'00001000'        Section is read only (RSECT)          ESDITEM\nESDIIRAN EQU   B'00000100'        Section is RMODE ANY                  ESDITEM\nESDIIA31 EQU   B'00000010'        Section is AMODE 31                   ESDITEM\nESDIIAAN EQU   B'00000011'        Section is AMODE ANY                  ESDITEM\n* blank for other types                                                 ESDITEM\nESDILEN  DS    CL3        14-16 Length of section, PC, CM or PR         ESDITEM\n* blank if type is ER or WX                                             ESDITEM\nESDILDSD EQU   ESDILEN+1,3 15-16  (LD only)\n* identifier of section containing name if type is LD                   ESDITEM\nESDITEML EQU   *-ESDITEM        Length of an item                       ESDITEM\n         MEND                                                           ESDITEM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESDSDMAP": {"ttr": 2326, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          ESDSDMAP\n         ESDSDMAP                                                       ESDSDMAP\n*********************************************************************** ESDSDMAP\n*                                                                     * ESDSDMAP\n*  map of the ESD SD list in ESD0                                     * ESDSDMAP\n*                                                                     * ESDSDMAP\n*  called by PASS4                                                    * ESDSDMAP\n*                                                                     * ESDSDMAP\n*********************************************************************** ESDSDMAP\nESDSDMAP DSECT                                                          ESDSDMAP\nESDID    DS    CL2              ESD identifier                          ESDSDMAP\nESDNAME  DS    CL8              referenced name                         ESDSDMAP\nESDTYPE  DS    CL1              ESD type, SD or PC                      ESDSDMAP\nESDTSD   EQU   X'00'              Section Descriptor (CSECT or RSECT)   ESDSDMAP\nESDTPC   EQU   X'04'              Private Code                          ESDSDMAP\nESDINFO  DS    CL1              Alignment/Amode/Rmode info              ESDSDMAP\nESDINOLN EQU   B'10000000'        Section length in END card  CFK*DEC03 ESDSDMAP\nESDIRO   EQU   B'00001000'        Section is read only (RSECT)          ESDSDMAP\nESDIRANY EQU   B'00000100'        Section is RMODE ANY                  ESDSDMAP\nESDIA31  EQU   B'00000010'        Section is AMODE 31                   ESDSDMAP\nESDIAANY EQU   B'00000011'        Section is AMODE ANY                  ESDSDMAP\nESDADR   DS    AL4              Address of section            CFK*DEC01 ESDSDMAP\nESDADR3  EQU   ESDADR+1,3         last 3 bytes of address     CFK*DEC01 ESDSDMAP\nESDLEN   DS    AL4              Length of section             CFK*DEC01 ESDSDMAP\nESDLEN3  EQU   ESDLEN+1,3         last 3 bytes of length      CFK*DEC01 ESDSDMAP\nESDTBUF  DS    AL4              @ TXT buffer                  CFK*MAY01 ESDSDMAP\nESDCBUF  DS    AL4              @ TXT card headers buffer     CFK*MAY01 ESDSDMAP\nESDNTXT  DS    AL4              number of TXT cards for section K*MAY01 ESDSDMAP\nESDMAXT  DS    AL4              max no of TXT cards for section K*MAY01 ESDSDMAP\nESDBUFLN DS    AL4              Length of buffer              CFK*MAY01 ESDSDMAP\nESDENTLN EQU   *-ESDID          Length of entry in the table            ESDSDMAP\n         MEND                                                           ESDSDMAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESD0": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x17\\x01\\x04\\x02\\x9f\\x01\\x04\\x02\\x9f\\x12!\\x00\\x87\\x00\\x87\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-01-29T00:00:00", "modifydate": "2004-01-29T12:21:17", "lines": 135, "newlines": 135, "modlines": 0, "user": "U765139"}, "text": "ESD0     TITLE 'ESD0 '\n***********************************************************************\n*                                                                     *\n*  Process ESD type 0 entry, Section Description                      *\n*                                                                     *\n*  Called by ESD                                                      *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    +0 - @ input card                                                *\n*    +4 - @ current ESD entry                                         *\n*    +8 - ESD ID of current entry                                     *\n*  @r14 - Return address                                              *\n*                                                                     *\n*  This csect builds a table of the ESD entries for each csect in     *\n*  the input deck.                                                    *\n*                                                                     *\n*  History:                                                           *\n*    Added section name to start message.                 CFK May 1999*\n*    Added check for table overflow.                      CFK Jun 1999*\n*    Add ESD ID to message.                               CFK Jly 1999*\n*    Put whole ESD entry into table.                      CFK Jan 2000*\n*    Make @ current section desc available to FTXTA, etc. CFK Feb 2000*\n*    Allow for up to 100 sections.                        CFK May 2001*\n*    Use register equates.                                CFK May 2001*\n*    Getmain buffers for TXT cards for each section.      CFK May 2001*\n*    Clear buffers to x'50'.                              CFK Sep 2001*\n*    Get ESD ID correctly.                                CFK Nov 2001*\n*    ESDSDMAP layout changed.                             CFK Dec 2001*\n*    Correct support for above.                           CFK Jan 2002*\n*    Print section length correctly.                      CFK Aug 2002*\n*    Use standard linkage conventions.                    CFK Sep 2003*\n*    Tidy up calls to PRINTA.                             CFK Dec 2003*\n*    Handle object decks with section length only in the  CFK Dec 2003*\n*    END card.                                                        *\n*                                                                     *\n***********************************************************************\n         ESDCARD                    map input card            CFK*NOV01\n         ESDITEM                    map ESD item              CFK*NOV01\n         ESDSDMAP                   map ESD table             CFK*JAN00\nESD0     CSECT\n         ENTER ,                    entry logic               CFK*SEP03\n         ENTRY NPROG                reffed by PASS4 and TXT\n         ENTRY CURRSECT             current section           CFK*FEB00\n         EXTRN PA                   in PASS1 csect            CFK*SEP03\n         LM    R8,R9,0(R1)          get @ input               CFK*NOV01\n         USING ESDCARD,R8           tell assembler            CFK*NOV01\n         USING ESDITEM,R9           tell assembler            CFK*NOV01\n         L     R3,NPROG             )\n         LA    R3,1(R3)             ) increment nprog\n         LA    R4,MAXSECTS          get max number of sections FK*JUN99\n         CR    R3,R4                room for another          CFK*JUN99\n         BNH   OK                   branch if OK              CFK*JUN99\n         L     R3,PRL               else get @ print area     CFK*NOV01\n         MVC   ERRESDID,ESDINAME    copy section name         CFK*JUN99\n         MVC   1(ERRMSGL,R3),ERRMSG copy error message        CFK*JUN99\n         B     PRINTIT              and print it              CFK*JUN99\nOK       DS    0H          we have room for another section   CFK*JUN99\n         ST    R3,NPROG             save new number of sections\n         MH    R3,=AL2(ESDENTLN)    multiply by entry length  CFK*JAN00\n         A     R3,APROGL            calc @ next entry\n         USING ESDSDMAP,R3          tell assembler            CFK*JAN00\n         MVC   ESDNAME(9),ESDINAME  copy ESD name + type      CFK*DEC01\n         MVC   ESDADR3,ESDIADR      copy address              CFK*DEC01\n         MVI   ESDADR,X'00'         and clear high byte       CFK*DEC01\n         MVC   ESDLEN3,ESDILEN      copy length               CFK*DEC01\n         MVI   ESDLEN,x'00'         and clear high byte       CFK*DEC01\n         MVC   ESDINFO,ESDIINFO     copy flags byte           CFK*DEC01\n         MVC   ESDID,8(R1)          copy copy ESD ID          CFK*NOV01\n         ICM   R15,B'1111',ESDLEN   get section length        CFK*JAN02\n         BNZ   Z10A                 br. if length provided    CFK*MAY01\n         LH    R15,=H'32760'        else guess length         CFK*MAY01\n         ST    R15,ESDLEN           save our guess            CFK*DEC03\n         OI    ESDINFO,ESDINOLN     and note length not given CFK*DEC03\nZ10A     DS    0H                                             CFK*MAY01\n         LR    R0,R15               copy it                   CFK*MAY01\n         SRL   R15,5                divide by 32              CFK*MAY01\n         LA    R15,100(R15)         allow for spare TXT cards CFK*MAY01\n         ST    R15,ESDMAXT          save max number of cards  CFK*MAY01\n         SLL   R15,2                mul by TXT header len (4) CFK*MAY01\n         AR    R0,R15               calc total buffer length  CFK*MAY01\n         ST    R0,ESDBUFLN          save buffer length        CFK*MAY01\n         LR    R5,R0                save length for MVCL      CFK*SEP01\n*                                                             CFK*MAY01\n         GETMAIN RU,LV=(0),SP=1     get buffer                CFK*MAY01\n*                                                             CFK*MAY01\n         ST    R1,ESDTBUF           save @ TXT buffer         CFK*MAY01\n         LR    R4,R1                copy @ buffer             CFK*SEP01\n         L     R7,=X'00000000'      load pad + zero from len  CFK*SEP01\n*        from address is irrelvant since from length is zero  CFK*SEP01\n         MVCL  R4,R6                clear buffer to x'50's    CFK*SEP01\n         A     R1,ESDLEN            calc @ TXT header buffer  CFK*JAN02\n         ST    R1,ESDCBUF           save @ header buffer      CFK*MAY01\n         XC    ESDNTXT,ESDNTXT      clear number of TXT cards CFK*MAY01\n         MVC   BEG,ESDNAME          copy section name to msg  CFK*NOV01\n         UNPK  STA(7),ESDIADR(4)    unpack start address      CFK*AUG02\n         TR    STA,=C'0123456789ABCDEF'-240    make printable CFK*NOV01\n         MVI   STA+6,C' '           clear gash byte           CFK*NOV01\n         UNPK  ID(5),ESDID(3)       unpack ESD ID             CFK*NOV01\n         TR    ID,=C'0123456789ABCDEF'-240     make printable CFK*NOV01\n         MVI   ID+4,C' '            clear gash byte           CFK*NOV01\n         UNPK  LEN(7),ESDILEN(4)    unpack section length     CFK*NOV01\n         TR    LEN,=C'0123456789ABCDEF'-240    make printable CFK*NOV01\n         MVI   LEN+6,C' '           clear gash byte           CFK*NOV01\n         L     R2,PRL               get @ print area\n         MVC   1(MSGLEN,R2),MSG     copy start message\nPRINTIT  DS    0H          print a message and exit\n         L     R1,PRL               get @ print area          CFK*DEC03\n         L     R15,=V(PRINTA)       get @ PRINTA csect        CFK*SEP03\n         BASR  R14,R15              call PRINTA               CFK*OCT03\n         LEAVE ,                    and return                CFK*SEP03\n         DC    C'IMM='\n         LTORG ,                                              CFK*MAY01\nPRL      DC    A(PA)                @ print area in PASS1     CFK*SEP03\nMSG      DC    C' '                 start of message          CFK*MAY99\nBEG      DS    CL8                  section name              CFK*MAY99\n         DC    C'  START '          start message\nSTA      DC    C'      '              start address\n         DC    C'    '\n         DC    C'LENGTH '\nLEN      DC    C'      '              length\n         DC    C'   (HEX)  ID '                               CFK*JLY99\nID       DC    C'    '                SECTION id              CFK*JLY99\nMSGLEN   EQU   *-MSG                                          CFK*JLY99\nERRMSG   DC    C'TWO MANY SECTIONS, '                         CFK*JUN99\nERRESDID DC    CL8' '               section name ignored      CFK*JUN99\n         DC    C' IGNORED'                                    CFK*JUN99\nERRMSGL  EQU   *-ERRMSG             length of error message   CFK*JUN99\nSAVEAREA DS    18F                  save area                 CFK*SEP03\nAPROGL   DC    A(PROG1-ESDENTLN)    @ -1'th slot in table\nCURRSECT DC    A(PROG1)             current section (passes 2-4) *FEB00\nNPROG    DC    F'0'                 entry point, number of csects read\nPROG1    DS    100CL(ESDENTLN)      ESD table, mapped by ESDSDMAP MAY01\nMAXSECTS EQU   (*-PROG1)/ESDENTLN   max no. of slots in table CFK*JUN99\n         YREGS ,                    register equates          CFK*MAY01\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESD1": {"ttr": 2564, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ESD1     TITLE 'ESD1 '\n***********************************************************************\n*                                                                     *\n*  Process ESD type 1 entry, Label Definition                         *\n*                                                                     *\n*  Called by ESD                                                      *\n*                                                                     *\n*  Parms @ R1:                                                        *\n*    +0 - @ input card                                                *\n*    +4 - @ input ESD entry                                           *\n*    +8 - ESD ID of entry                                             *\n*  @R14 - return address                                              *\n*                                                                     *\n*  This csect fills a table of entry points in the input module.      *\n*  The table is at entry NENT, which is a fullword count of the       *\n*  number of entry points followed by the entries.                    *\n*                                                                     *\n*  History:                                                           *\n*    Added check for table overflow                       CFK Jun 1999*\n*    Use register equates                                 CFK Dec 2000*\n*    Allow for up to 500 entries                          CFK May 2001*\n*    Input parms changed for ESD0                         CFK Nov 2001*\n*    Map entry table with ENTRYMAP                        CFK Nov 2001*\n*    Use standard linkage conventions                     CFK Sep 2003*\n*    Tidy up calls to PRINTA.                             CFK Dec 2003*\n***********************************************************************\n         ESDITEM                     map input ESD entry      CFK*NOV01\n         ENTRYMAP                    map entry table          CFK*NOV01\nESD1     CSECT\n         ENTER ,                     ENTRY LOGIC              CFK*SEP03\n         ENTRY NENT                  ref'ed by PASS4, PASS3\n         EXTRN PRINTA                csect                    CFK*SEP03\n         EXTRN PA                    print area in PASS1      CFK*SEP03\n         L     R1,4(R1)              get @ input entry\n         USING ESDITEM,R1            tell assembler           CFK*NOV01\n         L     R2,APA                get @ print area         CFK*NOV01\n         L     R3,NENT               )\n         LA    R3,1(R3)              ) increment nent\n         CH    R3,=AL2(MAXENTRY)     table full ?             CFK*JUN99\n         BL    OK                    branch if table not full CFK*JUN99\n         MVC   ERRMENT,ESDINAME      else copy entry point    CFK*NOV01\n         MVC   0(ERRMSGL,R2),ERRMSG  copy message to print area K*JUN99\n         L     R1,APA                get @ PRINTA parms       CFK*DEC03\n         L     R15,EPRT1             get @ PRINTA csect       CFK*SEP03\n         BASR  R14,R15               call PRINTA              CFK*SEP03\n         LEAVE ,                     and return to caller     CFK*SEP03\nOK       DS    0H                                             CFK*JUN99\n         ST    R3,NENT               )\n         LA    R2,13                 get table entry length\n         MR    R2,R2                 calc offset into table\n         A     R3,AENT               calc @ entry table slot\n         USING ENTRYMAP,R3           tell assembler           CFK*NOV01\n         MVC   ENTNAME,ESDINAME      copy label name          CFK*NOV01\n         MVC   ENTESDID,ESDILDSD     copy SD of csect the     CFK*DEC02\n*                                    entry is in              CFK*DEC02\n         MVC   ENTADR,ESDIADR        copy label address       CFK*NOV01\n         LEAVE ,                     return to caller         CFK*SEP03\n         DC    C'IMM='\n         LTORG ,                                              CFK*MAY01\nEPRT1    DC    A(PRINTA)             @ PRINTA csect           CFK*SEP03\nAPA      DC    A(PA)                 @ print area in PASS1    CFK*SEP03\nAENT     DC    A(ENTN-13)            fiddled @ label tables\nERRMSG   DC    C' TWO MANY ENTRY POINTS, IGNORING '           CFK*JUN99\nERRMENT  DC    CL8' '                                         CFK*JUN99\nERRMSGL  EQU   *-ERRMSG                                       CFK*JUN99\nSAVEAREA DS    18F                   save area                CFK*SEP03\nNENT     DC    F'0'                  entry point, number of labels\nENTN     DS    8CL1                  label name\nENTS     DS    2CL1                  label SD\nENTA     DS    3CL1                  label address\nENTLN    EQU   *-ENTN                length of one table entry FK*JUN99\n         DS    500CL(ENTLN)          space for more labels    CFK*MAY01\nMAXENTRY EQU   (*-ENTN)/ENTLN        number of slots in table CFK*JUN99\n         DS    0F\n         YREGS ,                     register equates         CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESD2": {"ttr": 2567, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ESD2     TITLE 'ESD2'\n***********************************************************************\n*                                                                     *\n*  Process ESD type 2, 5 or 6 entries, External Reference, Common     *\n*  area or Pseudo register.                                           *\n*                                                                     *\n*  Called by ESD                                                      *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    +0 - @ input card                                                *\n*    +4 - @ input ESD item                                            *\n*    +8 - input ESD ID                                                *\n*  @r14 - return address                                              *\n*                                                                     *\n*  History:                                                           *\n*    Use register equates                                CFK Dec 2000 *\n*    Allow for up to 500 External references             CFK May 2001 *\n*    Input parms adjusted for ESD0                       CFK Nov 2001 *\n*    Accept PRs (AKA XDs)                                CFK May 2003 *\n*    Use standard linkage conventions                    CFK Sep 2003 *\n*    Tidy up calls to PRINTA.                            CFK Dec 2003 *\n***********************************************************************\n         ESDITEM                map ESD item                  CFK*NOV01\n         EXTRNMAP               map EXTRN list                CFK*SEP02\nESD2     CSECT\n         ENTER ,                entry logic                   CFK*SEP03\n         ENTRY SCNE             updated by ESD csect\n         ENTRY NEXT             ref'ed by PASS4, ARL,\n         EXTRN PRINTA           csect                         CFK*SEP03\n         EXTRN PA               print area in PASS1           CFK*SEP03\n         L     R3,NEXT          increment\n         LA    R3,1(R3)           extern count\n         C     R3,TWED          too many ?\n         BL    ARESD            no - ok\n         BH    Z10Z             if more than max exit now\n         ST    R1,ES2R1         save r1                       CFK*NOV01\n         L     R1,ESDP2         get @ print area              CFK*NOV01\n         MVC   0(36,R1),ESDM2   msg '**  too many external references'\n         L     R15,EPRT2        get @ PRINTA csect            CFK*SEP03\n         BASR  R14,R15          call PRINTA                   CFK*SEP03\n         L     R1,ES2R1         reload r1                     CFK*NOV01\nARESD    ST    R3,NEXT          save new extern count\n         LA    R2,15            multiply extrn count\n         MR    R2,R2              by 15\n         A     R3,AEXT          calc @ next slot in table\n         USING EXTRNMAP,R3      tell assembler                CFK*SEP02\n         L     R1,4(R1)         get @ input item              CFK*NOV01\n         USING ESDITEM,R1       tell assembler                CFK*NOV01\n         MVC   EXTSEQ,SCNE+2    copy extern number\n         L     R4,SCNE          )\n         LA    R4,1(R4)         ) increment scne\n         ST    R4,SCNE          )\n         L     R2,ESDP2         get @ print area\n         MVC   EXTNAME,ESDINAME copy referenced name          CFK*NOV01\n         MVC   EXTCMLEN,ESDILEN copy CM or PR length          CFK*MAY03\n         MVC   EXTTYPE,ESDITYPE copy ESD type (02, 05 or 06)  CFK*NOV01\n         MVC   EXTINFO,ESDIINFO copy PR aligment info         CFK*MAY03\nZ10Z     DS    0H                                             CFK*SEP03\n         LEAVE ,                return to caller              CFK*SEP03\n         DC    C'IMM='\n         LTORG ,                                              CFK*MAY01\nTWED     DC    A(EXTNMAX)       maximum number of entries     CFK*MAY01\nESDM2    DC    CL36'**  TOO MANY EXTERNAL REFERENCES '        CFK*MAY01\nEPRT2    DC    A(PRINTA)        @ PRINTA csect                CFK*SEP03\nESDP2    DC    A(PA)            @ print area                  CFK*SEP03\nAEXT     DC    A(EXTN-15)\nSCNE     DC    F'0'             entry point, extern number\nES2R1    DC    F'0'             R1 saved here                 CFK*NOV01\nSAVEAREA DS    18F              save area                     CFK*SEP03\nNEXT     DC    F'0'             entry point, number of EXTRNs read\nEXTN     DS    8CL1             referenced name\nEXTS     DS    2CL1             reference sequence number\n         DS    2CL1             1 info byte, then ESD type, ER or CM\n         DS    3CL1             CM (common area) length\n         DS    500CL(EXTENTLN)  space for more entries        CFK*MAY01\nEXTNMAX  EQU   (*-EXTN)/EXTENTLN maximum number of entries    CFK*MAY01\n         DS    0F\n         YREGS ,                register equates              CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ESD5": {"ttr": 2570, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ESD5     TITLE 'ESD5 '\n***********************************************************************\n*                                                                     *\n*  process ESD type 5 entry, Common                                   *\n*                                                                     *\n*  called by ESD                                                      *\n*                                                                     *\n*  parms @ r1:                                                        *\n*    +0 - @ input card                                                *\n*    +4 - @ ESD entry                                                 *\n*    +8 - ESD entries ID                                              *\n*  @r11 - return address                                              *\n*                                                                     *\n*  history:                                                           *\n*    input parms changed for ESD0                        CFK nov 2001 *\n*    use register equates                                CFK nov 2001 *\n***********************************************************************\nESD5     CSECT\n         BALR  R13,0            establish base reg\n         USING *,R13            tell assembler\n         ENTRY LCOM             ref'ed by PASS4, ARL\n         EXTRN ESD2             csect\n         L     R2,0(R1)         get @ input card              CFK*NOV01\n         CLI   15(R2),X'02'     1st ESD entry on card ?       CFK*NOV01\n         BNE   NCOM             br if not\n         MVC   LCOM+1(3),29(R1) else copy length of common section\nNCOM     L     R13,AES2         get @ ESD2 csect\n         BALR  R13,R13          call ESD2\n         B     0(R11)           and exit (NB ESD2 probably does this)\n         DC    C'IMM='\nAES2     DC    A(ESD2)          @ ESD2 csect\nLCOM     DC    F'0'             entry point, length of common section\n         YREGS                  register equates              CFK*NOV01\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXTRNMAP": {"ttr": 2572, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          EXTRNMAP\n         EXTRNMAP                                                       EXTRNMAP\n*********************************************************************** EXTRNMAP\n*                                                                     * EXTRNMAP\n*  map of the EXTRN list in ESD2                                      * EXTRNMAP\n*                                                                     * EXTRNMAP\n*  used by ARL, ESD2 and PASS4                                        * EXTRNMAP\n*                                                                     * EXTRNMAP\n*********************************************************************** EXTRNMAP\nEXTRNMAP DSECT                                                          EXTRNMAP\nEXTNAME  DS    CL8              referenced name                         EXTRNMAP\nEXTSEQ   DS    CL2              reference sequence number               EXTRNMAP\nEXTINFO  DS    CL1              alignment info for XDs(PRs)   CFK*MAY03 EXTRNMAP\nEXTIIAD  EQU   X'07'              PR is Doubleword aligned    CFK*JUN03 EXTRNMAP\nEXTIIAF  EQU   X'03'              PR is Word aligned          CFK*JUN03 EXTRNMAP\nEXTIIAH  EQU   X'01'              PR is Halfword aligned      CFK*JUN03 EXTRNMAP\nEXTIIAB  EQU   X'00'              PR is Byte aligned          CFK*JUN03 EXTRNMAP\nEXTTYPE  DS    CL1              ESD type, ER or CM                      EXTRNMAP\nEXTTER   EQU   X'02'              External Reference                    EXTRNMAP\nEXTTCM   EQU   X'05'              Common                                EXTRNMAP\nEXTTPR   EQU   X'06'              Pseudo Register             CFK*MAY03 EXTRNMAP\nEXTTWX   EQU   X'0A'              Weak eXternal reference               EXTRNMAP\nEXTCMLEN DS    CL3              CM length if called via ESD5            EXTRNMAP\nEXTENTLN EQU   *-EXTRNMAP       length of one entry                     EXTRNMAP\nEXTNEXT  DS    0X               next entry in table                     EXTRNMAP\n         MEND                                                           EXTRNMAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FLPT": {"ttr": 2574, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FLPT    TITLE 'FLOATING POINT CONVERSION'\n***********************************************************************\n*                                                                     *\n*  Called by CONST                                                    *\n*                                                                     *\n*  Parms @ r1: (mapped by PRMDUM)                                     *\n*    +0  - @ Print Area                                               *\n*    +4  - input TEXT, 4 or 8 bytes                                   *\n*    +12 - flag, x'00' or x'80' if E or D type respectively           *\n*                                                                     *\n*  History:                                                           *\n*    Map output line with OUTLINE macro                  CFK Feb 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Map parameters with dsect                           CFK Dec 2000 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT                                                CFK*DEC00\nPRM@PA   DS    A                   @ print area               CFK*DEC00\nPRMTXT   DS    XL8                 input text                 CFK*DEC00\nPRMFLG   DS    X                   flag                       CFK*DEC00\n*\n         OUTLINE                   map output line            CFK*FEB00\nFLPT     CSECT\n         ENTER ,                   entry logic                CFK*NOV03\n         LR    R10,R1              copy @ parms               CFK*NOV03\n         USING PRMDUM,R10          tell assembler             CFK*NOV03\n         MVC   TM1(8),PRMTXT       copy input text\n         MVC   FSO(2),ZFP\n         TM    TM1,X'80'\n         BZ    PFP\n         MVI   FSO,X'01'\n         NI    TM1,X'7F'\nPFP      LD    F0,TN16\n         LD    F2,TM1\n         SR    R1,R1\n         CLC   TM1+1(3),ZFP\n         BE    MZER\n         LA    R2,16\nCOMF     CLC   TM1(8),TN17\n         BNL   DVFP\n         CLC   TM1(8),TN1\n         BH    NPMF\n         MDR   F2,F0\n         STD   F2,TM1\n         SR    R1,R2\n         B     COMF\nDVFP     DDR   F2,F0\n         STD   F2,TM1\n         AR    R1,R2\n         B     COMF\nNPMF     LA    R3,TN16\n         LA    R4,5\n         MVC   TM2(8),TM1\nCOMF2    CLC   TM2(8),TN17\n         BL    NMFP2\n         AR    R1,R2\n         MVC   TM2(8),TM1\nNMFP2    MVC   TM1(8),TM2\n         SRL   R2,1\n         LA    R3,8(R3)\n         LD    F0,0(R3)\n         LD    F2,TM2\n         MDR   F2,F0\n         SR    R1,R2\n         STD   F2,TM2\n         BCT   R4,COMF2\n         CLI   TM1,X'4F'\n         BNE   NOF\n         MVI   FSO+1,X'01'\nNOF      MVI   TM1,X'00'\n         LM    R2,R3,TM1\n         TM    FSO+1,X'01'\n         BZ    NSFP\n         SLDL  R2,4\n         B     NFFP\nNSFP     SR    R4,R4\n         NI    TM2,X'0F'\n         IC    R4,TM2\n         S     R4,FFP              subtract 14\n         LPR   R4,R4\n         SLL   R4,2\n         STC   R4,SLFP+3           *alter instruction*\nSLFP     SRDL  R2,0\nNFFP     D     R2,TNT\n         CVD   R2,DWFP             make packed decimal\n         UNPK  FDP+8(9),DWFP+3(5)  unpack it\n         OI    FDP+16,C'0'         make last byte printable\n         CVD   R3,DWFP             make packed decimal\n         UNPK  FDP(8),DWFP+3(5)    unpack it\n         OI    FDP+7,C'0'          make last byte printable\n         LA    R3,17               )\n         LA    R2,FDP              ) find\nCLFP     CLI   0(R2),C'0'          )  first\n         BNE   NMFZ                )   significant\n         LA    R2,1(R2)            )    digit\n         BCT   R3,CLFP             )\nNMFZ     AR    R1,R3\n         L     R4,PRM@PA           get @ Print Area\n         USING OUTLINE,R4          tell assembler             CFK*FEB00\n         MVC   OUTOPER(4),FQD      copy D'0.\n         TM    PRMFLG,X'80'        is it D ?\n         BO    DPF                 br if so\n         S     R3,EIGHF            subtract 8\n         MVI   OUTOPER,C'E'        make E'0.\nDPF      CLI   FSO,X'01'\n         BNE   DPF2\n         MVI   OUTOPER+2,C'-'\n         MVC   OUTOPER+3(2),FQD+2  copy 0.\n         LA    R4,1(R4)            add 1 to output pointer\nDPF2     EX    R3,MVFZ             MVC   OUTOPER+4(1),0(2)\n         AR    R4,R3\n         MVI   OUTOPER+3,C'E'\n         MVI   OUTOPER+4,C'+'      assume positive\n         LTR   R1,R1               check sign\n         BNM   PEXP                br if not negative\n         MVI   OUTOPER+4,C'-'      else make sign negative\nPEXP     CVD   R1,DWFP             convert to packed decimal\n         UNPK  OUTOPER+5(2),DWFP+6(2)   unpack it\n         OI    OUTOPER+6,C'0'      make last byte printable\n         MVI   OUTOPER+7,X'7D'     add trailing '\n         B     Z99X                and return                 CFK*NOV03\nMZER     L     R4,PRM@PA           get @ print area\n         MVC   OUTOPER(5),ZERPT    copy E'0.'\n         CLI   FSO,X'01'\n         BNE   Z99X                return                     CFK*NOV03\n         MVI   OUTOPER,C'D'\nZ99X     LEAVE ,                   return to caller           CFK*NOV03\nMVFZ     MVC   OUTOPER+4(1),0(R2)  EXecuted instruction\n         DC    C'IMM='\nTM1      DC    D'0'\nTM2      DC    D'0'\nTN17     DC    X'4F163457'\n         DC    X'85D8A000'\nTN16     DC    X'4E2386F2'\n         DC    X'6FC10000'\n         DC    X'475F5E10'\n         DC    X'00000000'\n         DC    X'44271000'\n         DC    X'00000000'\n         DC    X'42640000'\n         DC    X'00000000'\n         DC    X'41A00000'\n         DC    X'00000000'\nTN1      DC    X'41100000'\n         DC    X'00000000'\nDWFP     DC    D'0'\nFDP      DC    D'0'\n         DC    D'0'\n         DC    F'0'\nZFP      DC    F'0'\nFFP      DC    F'14'               constant\nFSO      DC    F'0'\nEIGHF    DC    F'8'                constant\nTNT      DC    X'3B9ACA00'         constant\nFQD      DC    X'C47DF04B'         D'0.\nZERPT    DC    X'C57DF0'           E'0\n         DC    C'.'                .\n         DC    X'7D'               '\nSAVEAREA DS    18F                                            CFK*NOV03\n         REGEQU                    register equates           CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTPARMS": {"ttr": 2817, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          FMTPARMS\n         FMTPARMS                                                       FMTPARMS\n*********************************************************************** FMTPARMS\n*                                                                     * FMTPARMS\n*  DSECT to map the parms passed to the formatting routines           * FMTPARMS\n*                                                                     * FMTPARMS\n*  ie ARL, CONST, RR, RS, RX, SI, SS                                  * FMTPARMS\n*                                                                     * FMTPARMS\n*********************************************************************** FMTPARMS\nFMTPARMS DSECT                                                          FMTPARMS\nFMTPA    DS    A               @ Print Area in PASS1                    FMTPARMS\nFMTFMT   DS    X               Instruction format, as AXNFMT            FMTPARMS\n*  the high 4 bits are the instruction format as follows                FMTPARMS\n*  the low 4 bits are the instruction format subtype                    FMTPARMS\nFMTFCON  EQU   00                Constant                               FMTPARMS\nFMTFRR   EQU   X'10'             RR - R1,R1 (or RRE)                    FMTPARMS\nFMTFRR1  EQU   X'11'                - R1    (or RRE)                    FMTPARMS\nFMTFRR2  EQU   X'12'                - R2    (or RRE)                    FMTPARMS\nFMTFE    EQU   X'13'             E  - no parameters                     FMTPARMS\nFMTFRX   EQU   X'20'             RX - R1,D2(X2,B2)                      FMTPARMS\nFMTFRX1  EQU   X'21'             RX - D2(X2,B2)                         FMTPARMS\nFMTFRS   EQU   X'30'             RS - R1,R3,D2(B2)                      FMTPARMS\nFMTFRS1  EQU   X'31'                - R1,D2(B2)                         FMTPARMS\nFMTFRS2  EQU   X'32'                - PLO, R1,D2(B2),R3,D4(B4)          FMTPARMS\nFMTFSI   EQU   X'40'             SI - D1(B1),I2                         FMTPARMS\nFMTFSI1  EQU   X'41'                - D1(B1)                            FMTPARMS\nFMTFS    EQU   X'42'             S  - (no operands)                     FMTPARMS\nFMTFSS   EQU   X'50'             SS - 1 length, D1(L,B1),D2(B2)         FMTPARMS\nFMTFSS1  EQU   X'51'             SS - 2 lengths, D1(L1,B1),D2(L2,B2)    FMTPARMS\nFMTFSS2  EQU   X'52'             SS - trailing reg, D1(R1,B1),D2(B2),R3 FMTPARMS\nFMTFSSE  EQU   X'53'             SSE - D1(B1),D2(B2)                    FMTPARMS\nFMTFSS4  EQU   X'54'             SS - trailing reg, D1(L1,B1),D2(B2),R3 FMTPARMS\nFMTOPER  DS    X               Instruction operand format/length        FMTPARMS\n*              0       references byte or no memory access              FMTPARMS\n*              1           \"      Halfword                              FMTPARMS\n*              2           \"      signed Fullword                       FMTPARMS\n*              3           \"      Doubleword                            FMTPARMS\n*              4           \"      short Float                           FMTPARMS\n*              6           \"      Fullword                              FMTPARMS\n*              7           \"      unsigned Fullword                     FMTPARMS\n*              8           \"      long Float (unnormalised)             FMTPARMS\n*            254           \"      code EXecuted                         FMTPARMS\n*            255           \"      code (branch)                         FMTPARMS\nFMTLEN2  DS    H               instruction length (two bytes)           FMTPARMS\nFMTLEN1  EQU   FMTLEN2+1,1     instruction length (one byte)            FMTPARMS\nFMTTEXT  DS    XL8             instruction TEXT                         FMTPARMS\nFMTTEXT1 EQU   FMTTEXT,1       1st byte of text                         FMTPARMS\nFMTTEXT2 EQU   FMTTEXT+1,1     2nd byte of text                         FMTPARMS\nFMTTEXT3 EQU   FMTTEXT+2,1     3rd byte of text                         FMTPARMS\nFMTTEXT4 EQU   FMTTEXT+3,1     4th byte of text                         FMTPARMS\nFMTTEXT5 EQU   FMTTEXT+4,1     5th byte of text                         FMTPARMS\nFMTTEXT6 EQU   FMTTEXT+5,1     6th byte of text                         FMTPARMS\nFMTTEXT7 EQU   FMTTEXT+6,1     7th byte of text                         FMTPARMS\nFMTTEXT8 EQU   FMTTEXT+7,1     8th byte of text                         FMTPARMS\nFMTIC    DS    XL3                                                      FMTPARMS\nFMTFLG1  DS    X               copy of AXNFLG1                          FMTPARMS\n*  the high 4 bits are the instruction format as follows:               FMTPARMS\n*  the low 4 bits depend on the instruction format as follows:          FMTPARMS\n*              0                 invalid instruction (DC)               FMTPARMS\n*XNFRR   EQU   10                RR - R1,R1                             FMTPARMS\n*              11                   - F1,F2 (short)                     FMTPARMS\n*              12                   - F1,F2 (long)                      FMTPARMS\n*              13                   - R1 (or R2)                        FMTPARMS\n* *NEW*        14                E  - no operand                        FMTPARMS\n* *NEW*        15                RRE - R1,R2 4 byte instruction         FMTPARMS\n* *NEW*        16                RRE - R1 4 byte instruction            FMTPARMS\n*              1F                 terminating instruction.              FMTPARMS\n*XNFRX   EQU   2                 RX - R1,D2(X2,B2)                      FMTPARMS\n*              20      references byte or no memory access              FMTPARMS\n*              21          \"      Halfword                              FMTPARMS\n*              22          \"      signed Fullword                       FMTPARMS\n*              23          \"      Doubleword                            FMTPARMS\n*              24          \"      short Float                           FMTPARMS\n*              26          \"      Fullword                              FMTPARMS\n*              27          \"      unsigned Fullword                     FMTPARMS\n*              28          \"      long Float (unnormalised)             FMTPARMS\n*              2F                 terminating instruction               FMTPARMS\n*XNFRS   EQU   30                RS - R1,R3,D2(B2)                      FMTPARMS\n*              31                   - R1,D2(B2)                         FMTPARMS\n*              3F                 terminating instruction               FMTPARMS\n*XNFSI   EQU   40                SI - D1(B1),I2                         FMTPARMS\n*              41                   - D1(B1)                            FMTPARMS\n* *NEW*        42                S  - (no operands)                     FMTPARMS\n*              4F                 terminating instruction               FMTPARMS\n*XNFSS   EQU   50                SS - 1 length, D1(L,B1),D2(B2)         FMTPARMS\n*              51                SS - 2 lengths, D1(L1,B1),D2(L2,B2)    FMTPARMS\n* *NEW*        52                SS - trailing reg, D1(R1,B1),D2(B2),R3 FMTPARMS\n* *NEW*        53                SSE - D1(B1),D2(B2)                    FMTPARMS\nFMTRET   DS    0H              return to here                           FMTPARMS\n         MEND                                                           FMTPARMS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTXT": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x00\\x05o\\x01\\x00\\x05o\\x12R\\x00$\\x00$\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-25T00:00:00", "modifydate": "2000-02-25T12:52:49", "lines": 36, "newlines": 36, "modlines": 0, "user": "U765139"}, "text": "FTXT     TITLE 'FTXT TO STANDARDIZED FTXTA INTERFACE      AUG. 21,1967'\n***********************************************************************\n*                                                                     *\n* called by PASS4                                                     *\n*                                                                     *\n* parms @ r14:                                                        *\n*   +0 - @ print area in PASS1                                        *\n*   +4                                                                *\n*   +8                                                                *\n*   +12                                                               *\n*   +16                                                               *\n*   +20                                                               *\n*   +24                                                               *\n*   +28                                                               *\n*   +32 - return to here                                              *\n*                                                                     *\n***********************************************************************\nFTXT     CSECT\n         EXTRN FTXTA              csect\n         BALR  13,0               REG 13 WAS USED AS BASE BY FTXT,SO\n         USING *,13               USE IT AS TEMP. BASE HERE\n         STM   12,1,SVLKG         SAVE LINKAGE REGISTERS\n         DROP  13                 keep ASMA90 happy\n         BALR  12,0               ESTABLISH A BASE COMPATIBLE WITH\n         USING *,12               OS/360 LINKAGE CONVENTIONS\n         LA    13,SVPGM           PROVIDE CALLER SAVE AREA\n         LR    1,14               STANDARD PARAMETER LIST POINTER\n         L     15,AFTA            CALL STANDARDIZED\n         BALR  14,15              FTXT ROUTINE\n         LM    12,1,SVLKG         RESTORE ORIGINAL LINKAGE REGISTERS\n         B     32(14)             RETURN TO CALLER\nAFTA     DC    A(FTXTA)           ADR OF STANDARDIZED FTXT ROUTINE\nSVLKG    DS    6F                 LINKAGE REGISTERS SAVE AREA\nSVPGM    DC    3F'0'              PROGRAM SAVE AREA\n         DS    15F\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FTXTA": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00B\\x01\\x04\\x03?\\x01\\x04\\x06_\\x159\\x03\\xc9\\x03\\xc8\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2004-02-02T00:00:00", "modifydate": "2004-03-05T15:39:42", "lines": 969, "newlines": 968, "modlines": 0, "user": "U765139"}, "text": "FTXA     TITLE '*** F T X T A ***  (REVISED && STANDARDIZED FTXT)  '\n***********************************************************************\n*                                                                     *\n* Called by PASS4 via FTXT.                                           *\n*                                                                     *\n* Parms @ r1:                                                         *\n*   +0 - @ print area in PASS1.                                       *\n*   +4 - KEY4, flag set to f'1' when end of last card reached.        *\n*   +8 - output instruction format (copy of AXNFMT).                  *\n*   +9 - output operand format (copy of AXNOPER).                     *\n*   +10 - output length of instruction/constant.                      *\n*   +12 - ROUT4, output @ decoding routine.                           *\n*   +16 - INST4, output 8 bytes TEXT of instruction/constant.         *\n*   +24 - output copy of AXNFLG1.                                     *\n*   +25 - output 3 byte instruction counter.                          *\n*   +28 - ?                                                           *\n*   +32 - return to here.                                             *\n*                                                                     *\n* History:                                                            *\n*   AXN parms changed to support 2 byte opcodes, 5 byte   CFK May 1999*\n*       mnemonics and separate opcode and operand formats.            *\n*   Pass 1st 4 bytes on instr. to AXN, not 1st 2 bytes.   CFK Jun 1999*\n*   Pass opcode and operand formats to PASS4 in parm.     CFK Jun 1999*\n*       bytes 8 and 9. Output length now 2 bytes.                     *\n*   Use symbolic addressing for the opcode table.         CFK Feb 2000*\n*   Map output line with OUTLINE macro.                   CFK Mar 2000*\n*   Call INFO instead of TIME.                            CFK Apr 2000*\n*   Call AXN with standard linkage conventions.           CFK Apr 2000*\n*   Use equates for all registers.                        CFK Apr 2000*\n*   Map parms with PRMDUM DSECT.                          CFK Apr 2000*\n*   Use R10 as pointer to parms.                          CFK Apr 2000*\n*   Call CRLD with standard linkage conventions.          CFK Dec 2000*\n*   TXT pointers moved to ESD descriptors.                CFK May 2001*\n*   Map TXT headers with TXTHDR macro.                    CFK May 2001*\n*   Handle ZOBS before a DS correctly.                    CFK Jun 2001*\n*   Group constants before variables.                     CFK Jly 2001*\n*   Simplify code to put address on listing.              CFK Jly 2001*\n*   Correct check for end of current card.                CFK Aug 2001*\n*   Return from ZOBS if RLD in 1st 8 bytes.               CFK Sep 2001*\n*   Set start address to start of section (may be DS).    CFK Jan 2002*\n*   Correctly process leading DS.                         CFK Sep 2002*\n*   Only reset RLF in CRLD at end of section.             CFK Apr 2003*\n*   Pass RLD flag byte back when RLD found.               CFK Jun 2003*\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         ESDSDMAP              map ESD table entry            CFK*MAR00\n         SPACE 2\n         OUTLINE                  map output line             CFK*MAR00\n         SPACE 2\n         TXTHDR                   map TXT headers             CFK*MAY01\n         SPACE 2\n         RLDITEM                  map RLD item                CFK*JUN03\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  DSECT to map the parameters passed to FTXTA                        *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT\nPRM@PA   DS    A     +0 - @ print area in PASS1\nPRMKEY4  DS    A     +4 - KEY4, flag?\nPRMFMT   DS    X     +8 - output instruction format (copy of AXNFMT)\nPRMOPER  DS    X     +9 - output operand format (copy of AXNOPER)\nPRMLEN   DS    H    +10 - output length of instruction/constant\nPRMROUT4 DS    A    +12 - ROUT4, output @ decoding routine\nPRMINST4 DS    XL8  +16 - INST4, output 8 bytes TEXT of instr/constant\nPRMFLG1  DS    X    +24 - output copy of AXNFLG1\nPRMIC    DS    XL3  +25 - output 3 byte instruction counter\n         DS    XL4  +28 - ?\nPRMRET   DS    0H   +32 - return to here\n          SPACE 2\n***********************************************************************\n*                                                                     *\n*  DSECT to map the opcode table at FTBL                              *\n*                                                                     *\n***********************************************************************\nTBLD     DSECT\nTBLFLG   DS    X               Flag byte, copy of AXNFLG\n*  the high 4 bits are the instruction format as follows\n*  the low 4 bits depend on the instruction format as follows\n*BLFCON  EQU   0                 Constant\n*BLFRR   EQU   1                 RR - R1,R1\n*              11                   - F1,F2 (short)\n*              12                   - F1,F2 (long)\n*              13                   - R1\n*              1F                 terminating instruction.\n*BLFRX   EQU   2                 RX - R1,D2(X2,B2)\n*              20      references byte or no memory access\n*              21          \"      Halfword\n*              22          \"      signed Fullword\n*              23          \"      Doubleword\n*              24          \"      short Float\n*              26          \"      Fullword\n*              27          \"      unsigned Fullword\n*              28          \"      long Float (unnormalised)\n*              2F                 terminating instruction\n*BLFRS   EQU   3                 RS - R1,R3,D2(B2)\n*              31                   - R1,D2(B2)\n*              3F                 terminating instruction\n*BLFSI   EQU   4                 SI - D1(B1),I2\n*              41                   - D1(B1)\n*              4F                 terminating instruction\n*BLFSS   EQU   5                 SS - 1 length, D1(L,B1),D2(B2)\n*              51                SS - 2 lengths, D1(L1,B1),D2(L2,B2)\n*BLADCON EQU   X'6E'             Address Constant\n*BLDS    EQU   X'7E'             DS\n*BLZOB   EQU   X'8E'             Zeroes Or Blanks\nTBLADR   DS    XL3             address of this instruction\nTBLADRLB EQU   TBLADR+2,1       low byte of address\nTBLID    DS    X               entry ID, 0 - 15\nTBLDISP  DS    X               displacement into current TXT card\nTBLOPLEN DS    H               Length of this instruction/DS/Adcon\nTBLENTLN EQU   *-TBLD          Length of one entry.\n*\nFTXTA    CSECT\n         ENTRY COFST              ref'ed by ARL\n         ENTRY RFTXT              ref'ed by SPPR\n         EXTRN ARL                csect\n         EXTRN AXN                csect\n         EXTRN CONST              csect\n         EXTRN CRLD               csect\n         EXTRN CURRSECT           in ESD0 csect, @ curr. sect CFK*MAY01\n         EXTRN PA                 in PASS1 csect              CFK*APR00\n         EXTRN PAB                in PASS1 csect\n         EXTRN PR                 csect\n         EXTRN RR                 csect\n         EXTRN RS                 csect\n         EXTRN RX                 csect\n         EXTRN SI                 csect\n         EXTRN SS                 csect\n         EXTRN DS                 csect\n         EXTRN RLF                in CRLD csect               CFK*APR03\n         EXTRN INFO               csect                       CFK*APR00\n         STM   R14,R12,12(R13)    **************\n         BALR  R12,0              *            *\n         USING *,R12              *  STANDARD  *\n         ST    R13,SAVE+4         *   S/360    *\n         LR    R11,R13            *  LINKAGE   *\n         LA    R13,SAVE           *            *\n         ST    R13,8(R11)         **************\n         LR    R10,R1             copy @ parms                CFK*APR00\n         USING PRMDUM,R10         tell assembler about parms  CFK*APR00\n         CLI   FPFLG,X'FF'        IS THIS FIRST PASS?\n         BE    INTL               BRANCH IF YES\n         CLI   PCFLG,X'FF'        IS PROCESS FLAG ON?\n         BNE   LKAHD              BRANCH IF NO\n         B     PROCS              else go to process routine\n         TITLE '*** I N I T I A L I Z A T I O N ***  (LKAHD && PROCS)'\nINTL     MVI   FPFLG,X'00'        TURN-OFF FIRST PASS FLAG\n*        XC    TOTA(4),TOTA\n         L     R7,HITBL           *********************\n         LA    R7,1(R7)\n         LA    R6,FTBL+4          *                   *\n         SR    R5,R5              * PLACE TABLE ENTRY *\n         ST    R5,0(R6)           * I.D. NUMBERS IN   *\nAGNA     LA    R6,8(R6)           * BYTE 4 OF EACH    *\n         LA    R5,256(R5)         * TABLE ENTRY       *\n         STH   R5,0(R6)           *                   *\n         BCT   R7,AGNA            *********************\n         LA    TBL,FTBL           SET TABLE TO ENTRY ZERO\n         USING TBLD,TBL           tell assembler              CFK*FEB00\n         MVI   TBLFLG,X'0F'       TERMINAL CODE INTO BO\n         L     R5,=A(CURRSECT)    get @ current section ptr   CFK*MAY01\n         L     R5,0(R5)           get @ current section desc  CFK*MAY01\n         USING ESDSDMAP,R5        tell assembler              CFK*MAY01\n         MVC   TNTC(4),ESDNTXT    TOTAL NUMBER OF TXT CARDS   CFK*MAY01\n         MVC   CRLDID,ESDID       copy current section ID     CFK*DEC01\n         L     R3,TNTC            get number of TXT cards\n         BCTR  R3,0               subtract 1\n         ST    R3,TNT1            save it\n         L     R3,ESDCBUF         get @ first TXT header      CFK*MAY01\n         USING TXTHDR,R3          tell assembler              CFK*MAY01\n         MVC   TBLADR,ESDADR3     FIRST LOGICAL ADR TO B13    CFK*JAN02\n         MVC   SAVSDADR,ESDADR    save section address        CFK*APR02\n         ST    R3,CATXB           SET TXTB POINTER TO TXTB ADR\n         L     R5,ESDTBUF         SET TEXT POINTER TO         CFK*MAY01\n         DROP  R5                 was ESDSDMAP                CFK*MAY01\n         ST    R5,SATXS           FIRST BYTE OF TEXT\n         ST    R5,SAVTXPTR        @ save @ first byte of TXT  CFK*MAY01\n         CLC   TXTHADR,TBLADR     does section start with DS? CFK*SEP02\n         BE    NO1STDS            branch if not               CFK*JAN02\n         BL    *+1                txt before start of section CFK*SEP02\n         SR    R14,R14             )                          CFK*JAN02\n         ICM   R14,B'0111',TXTHADR ) calculate                CFK*SEP02\n         SR    R15,R15             )  DS                      CFK*SEP02\n         ICM   R15,B'0111',TBLADR  )   length                 CFK*SEP02\n         SR    R14,R15             )                          CFK*SEP02\n         MVC   TBLADR,TXTHADR     put txt adr in first slot   CFK*DEC02\n         LA    TBL,TBLENTLN(TBL)  ) build DS                  CFK*DEC02\n         MVC   TBLADR,SAVSDADR+1  )  entry                    CFK*DEC02\n         STH   R14,TBLOPLEN       )   in                      CFK*JAN02\n         MVI   TBLFLG,X'7E'       )    2nd slot               CFK*JAN02\n         MVC   TBLADR+TBLENTLN,TBLADR  copy I.C. to next slot CFK*NOV02\n         MVI   TBLDISP+TBLENTLN,X'00'  zero text pointer disp CFK*NOV02\n         ST    TBL,CATBL          save @ current table entry  CFK*NOV02\nNO1STDS  DS    0H                                             CFK*JAN02\n         SR    R14,R14             ) calculate                CFK*AUG01\n         ICM   R14,B'0111',TXTHADR )  @ first                 CFK*AUG01\n         SR    R5,R5               )   byte after             CFK*AUG01\n         IC    R5,TXTHLEN          )    current               CFK*AUG01\n         AR    R14,R5              )     card                 CFK*AUG01\n         ST    R14,EOC             save it for reuse          CFK*AUG01\n         BAL   R14,ADCON          GET FIRST ADCON LOGICAL ADR\n         MVC   NBLC+3(1),TXTHLEN  NO. OF BYTES LEFT ON CARD\n         CLI   TBLFLG,X'7E'       initial DS present ?        CFK*SEP02\n         BE    PROCS              if so go and process it     CFK*NOV02\n         DROP  R3                 was TXTHDR                  CFK*APR02\n         TITLE '*** L O O K A H E A D *** '\nLKAHD    LA    TBL,FTBL           SET TABLE POINTER TO ENTRY ZERO\n         L     R3,CATXB           get @ current TXTB entry\n         USING TXTHDR,R3          tell assembler              CFK*APR02\n         MVI   PCFLG,X'FF'        RESET PROCESS FLAG\n         MVC   TBLADR+TBLENTLN,TBLADR  PLACE I.C. IN B13 OF ENTRY ONE\n         MVI   TBLDISP+TBLENTLN,X'00'  ZERO TEXT POINTER DISPLACEMENT\nGOAGN    CLC   TBLID,HITBL+3      HAS HIGHEST TABLE ENTRY BEEN REACHED?\n         BNL   TERME              BRANCH IF YES\n         CLI   TFL,X'FF'          end of LAST CARD ?          CFK*AUG01\n         BE    TERME              br. if yes                  CFK*AUG01\n         CLI   TBLID,X'0E'        entry 14 ?\n         BNE   NCP                br. if not\n         CLI   TBLFLG,X'00'       constant ?\n         BNE   NCP                br. if not\n         TM    TBLADRLB,X'02'     on an odd halfword ?\n         BO    NCP                branch if yes\n         CLC   TBLOPLEN,FOUR+2    4 byte opcode ?\n         BE    TERME              branch if so\nNCP      LA    TBL,TBLENTLN(TBL)  SET POINTER TO NEXT ENTRY\n         TM    TBLADRLB,X'01'     IS I.C. ON HW BOUNDARY?\n         BZ    EVEN               BRANCH IF YES\n         MVI   TBLFLG,X'00'       CLASSIFY AS CONSTANT\n         MVC   TBLOPLEN,ONE1+2    OF LENGTH ONE\n         B     CNST               GO TO CONSTANT ROUTINE\nEVEN     SR    R5,R5              MOVE THE\n         IC    R5,TBLDISP         NEXT OP\n         A     R5,SATXS           CODE TO\n*        S     R5,SAVSDADR         (- section offset)         CFK*JAN04\n         MVC   AOP1(6),0(R5)      AXN AREA\n         MVC   CC(1),1(R5)        copy 2nd byte of opcode\n         TM    AOP1,X'BF'         IS OP CODE A ZERO OR A BLANK?\n         BNZ   NZOB               BRANCH IF NO\n         TM    TBLADRLB,X'02'     on a fullword boundary ?\n         BO    NZOB               branch if not\n         ST    R5,AZBTS           SAVE TXTS POINTER\n         CLI   AOP1,X'00'         IS OP CODE ZERO?\n         BNE   NZERO              BRANCH IF NO\n         CLC   0(8,R5),ZEROS      IS TEXT EIGHT BYTES OF ZEROES?\n         BNE   NZOB               BRANCH IF NO\n         LA    R6,ZEROS           ADR OF ZEROS\nCZOBS    ST    R6,ADRZB           SAVE TYPE ADR\n         B     ZOBS               GO TO 'ZOBS'\nNZERO    CLC   0(8,R5),BLANK      IS TEXT EIGHT BYTES OF BLANKS?\n         BNE   NZOB               BRANCH IF NO\n         LA    R6,BLANK           ADR OF BLANKS\n         B     CZOBS              GO TO CALL 'ZOBS'\nNZOB     BAL   R14,CLAXN          CALL AXN VIA CAXN INTERFACE\n         MVI   TBLFLG,X'00'       assume constant\n         CLC   0(4,R5),BLANK      is text 4 bytes of blanks ?\n         BE    REDO               treat as constant if so\n         MVC   TBLFLG,AOP4        AXN CODE TO BO\nREDO     MVC   TBLOPLEN,TWO2+2    MAKE LENGTH CODE TWO\n         TM    TBLFLG,X'70'       TEST CLASSIFICATION\n         BZ    CNST               BRANCH IF CONSTANT\n         BM    INSTR              BRANCH IF INSTRUCTION\n         ABEND 20,DUMP            DUMP, ILLEGAL AXN CODE\n         TITLE '*** C O N S T A N T *** '\nCNST     SR    R5,R5\n         IC    R5,TBLDISP         PUT NEW TEXT ADR DIS-\n         AH    R5,TBLOPLEN        PLACEMENT INTO B5 OF\n         STC   R5,TBLDISP+TBLENTLN    NEXT TABLE ENTRY\n         ICM   R5,B'0111',TBLADR  get current address         CFK*AUG01\n         AH    R5,TBLOPLEN        add entry length            CFK*AUG01\n         C     R5,EOC             TXT CARD BOUNDARY CROSSED?  CFK*AUG01\n         BH    BDS                yes -  check for 'DS'\n         BL    NODSA              no - can't be a 'DS'\n         CLC   NTCF(4),TNT1       all cards fetched ?\n         BL    NODSA              br. if more cards to fetch\n         OI    TFL,X'01'          set end of last card flag   CFK*SEP01\n         B     NODSA              and skip call to DS check routine\nBDS      BAL   R14,DSCK           CALL 'DS' CHECK ROUTINE\n         B     CNST               and try again\nNODSA    L     R5,TBLADR-1          FORM\n         AH    R5,TBLOPLEN           NEXT\n         ST    R5,TBLADR-1+TBLENTLN   I.C.\n         CLC   TBLADR+TBLENTLN,ARLD+1    HAS RLD ENTRY BEEN REACHED?\n         BH    FRLD               BRANCH IF YES\n         CLI   TBLID,X'01'         IS THIS THE FIRST TABLE POSITION\n         BE    GOAGN              BRANCH IF YES\n         LR    R5,TBL             IS THE PRECEEDING\n         S     R5,EIGHT           CLASSIFICATION A\n         CLI   0(R5),X'00'        NON-TERM CONSTANT?\n         BNE   IFBC               BRANCH IF NO\n         TM    TBLADRLB,X'03'     IS I.C. ON FW BOUNDARY?\n         BZ    GOAGN              BRANCH IF YES\n         MVC   AOP1(4),0(R5)       FETCH POTENTIAL OP CODE    CFK*jun99\n         BAL   R14,CLAXN           DETERMINE IF OP CODE\n         LA    TBL,TBLENTLN(TBL)   UPDATE TABLE POINTER\n         CLI   AOP4,X'00'         IS IT AN INSTRUCTION ?\n         BNE   GOAGN               BRANCH IF IT IS\n         LR    TBL,R5             MOVE TABLE POINTER BACK ONE ENTRY\n         LH    R5,TBLOPLEN        UPDATE LENGTH\n         LA    R5,2(R5)           BY TWO FOR\n         STH   R5,TBLOPLEN        CONSTANT\n         SR    R5,R5               ZERO REGISTER\n         IC    R5,TBLDISP          INSERT DISPLACEMENT\n         AH    R5,TBLOPLEN         ADD INSTRUCTION LENGTH\n         STC   R5,TBLDISP+TBLENTLN   STORE DISPL IN NEXT TABLE ENTRY\n         L     R5,TBLADR-1+TBLENTLN   LOAD IC\n         LA    R5,2(R5)               UPDATE IC\n         ST    R5,TBLADR-1+TBLENTLN   SAVE CALC IC\n         B     GOAGN\n         TITLE '*** I N S T R U C T I O N *** '\nINSTR    CLI   TBLID,X'08'        eighth entry ?\n         BL    INSTRS             branch if less\n         LR    R5,TBL             get @ previous\n         S     R5,EIGHT            table entry\n         CLI   TBLID,X'01'        on the 2nd entry ?\n         BE    INSTRS             branch if yes\n         CLI   0(R5),X'00'        was prev entry a constant ?\n         BNE   INSTRS             branch if not\n         TM    TBLADRLB,X'02'     are we on a fullword boundary ?\n         BZ    LRG                branch if yes\n         S     R5,EIGHT           subtract 8\nLRG      LR    TBL,R5             go back to prev entry or before\n         B     TERME\nINSTRS   LH    R5,TBLOPLEN        *********************\n         TM    AOP1,X'C0'         *                   *\n         BZ    ILEN2              * FIND INSTR LENGTH *\n         BM    ILEN4              * AND PLACE IN B67  *\n         LA    R5,2(R5)           * OF CURRENT ENTRY  *\nILEN4    LA    R5,2(R5)           *                   *\n         STH   R5,TBLOPLEN        *********************\nILEN2    L     R6,TBLADR-1        FORM\n         AR    R6,R5              NEXT\n         ST    R6,TBLADR-1+TBLENTLN   I.C.\n         CLC   TBLADR+TBLENTLN,ARLD+1    HAS RLD ENTRY BEEN REACHED?\n         BH    FRLD               BRANCH IF YES\n         AH    R5,TBLID           PLACE NEW TEXT ADR DISPLACEMENT\n         STC   R5,TBLDISP+TBLENTLN   INTO B5 OF NEXT TABLE ENTRY\nINSTL    DS    0H                                             CFK*AUG01\n         ICM   R5,B'0111',TBLADR  get current address         CFK*AUG01\n         AH    R5,TBLOPLEN        add entry length            CFK*AUG01\n         C     R5,EOC             TXT CARD BOUNDARY CROSSED?  CFK*AUG01\n         BH    BDSK               yes, call 'DS' check routine\n         BL    NODSB              no, continue\n         CLC   NTCF(4),TNT1       all cards fetched ?\n         BL    NODSB              br. if more cards to fetch\n         OI    TFL,X'01'          set end of last card flag   CFK*SEP01\n         B     NODSB\nBDSK     BAL   R14,DSCK           CALL 'DS' CHECK ROUTINE\n         B     INSTL              and repeat check for end of card\nNODSB    TM    TBLFLG,X'0F'       IS THIS A TERMINAL INSTRUCTION\n         BC    12,GOAGN           BRANCH IF NO\n         LR    R5,TBL             IS THE PRECEEDING\n         CLI   AOP1,X'45'           BAL instruction ?\n         BNE   TS5                    Br if not\n         CLI   CC,X'E0'             BAL 14, ?\n         BE    TERM                   if so br\nTS5      CLI   AOP1,X'05'           BALR instruction ?\n         BNE   SGE                    Br if not\n         S     R5,EIGHT           get @ prev table entry\n         TM    0(R5),X'70'        prev entry an instruction ?\n         BM    SGD                branch if yes\n         MVI   TBLFLG,X'10'       else flag non-term instruction\n         B     GOAGN\nSGE      S     R5,EIGHT           CLASSIFICATION A\nSGD      CLI   0(R5),X'00'        NON-TERM CONSTANT\n         BE    CREDO              BRANCH IF YES\n         CLI   0(R5),X'0E'        WAS PRECEEDING A TERMINAL CONSTANT?\n         BNE   TERMT              branch if not\nCREDO    MVI   TBLFLG,X'00'       CLASSIFY AS CONSTANT\n         B     REDO               GO TO 'REDO'\nTERMT    TM    AOP1,X'B0'         b'10110000'\n         BNZ   TERM               br. if not x'0*' or x'4*'\n         MVC   TAOP(1),AOP1       copy instruction\n         NI    TAOP,X'0F'         clear high 4 bits\n         CLI   TAOP,X'06'\n         BNE   BC\n         TM    AOP1,X'40'\n         BO    TERM\n         NI    TBLFLG,X'F0'\n         B     GOAGN\nBC       CLI   TAOP,X'07'\n         BNE   TERM\n         TM    CC,X'F0'\n         BNZ   TERM\n         NI    TBLFLG,X'F0'\n         B     GOAGN\n         TITLE '** I N S T R     F O L L O W E D   B Y    C O N S T **'\nIFBC     CLI   TBLID,X'01'        *************************************\n         BE    LAE\n         S     TBL,EIGHT          get @ prev entry\nAGNB     CLI   TBLID,X'01'        first entry ?\n         BE    LAE                br. if yes\n         S     TBL,EIGHT          get @ prev entry\n         TM    TBLFLG,X'70'       * GO BACK IN TABLE UNTIL A CONSTANT *\n         BNZ   AGNB               * CLASSIFICATION IS FOUND. CLASSIFY *\n         LA    TBL,TBLENTLN(TBL)  * ENTRY AFTER IT AS A CONSTANT TOO. *\nLAE      MVI   TBLFLG,X'00'       *                                   *\n         B     REDO               *************************************\n         TITLE '*** R L D    F O U N D *** '\nFRLD     CLI   TBLID,X'01'        first entry ?\n         BE    BADR               branch if yes\n         S     TBL,EIGHT          get @ prev table entry\n         TM    TBLFLG,X'70'       constant ?                  CFK*SEP01\n         BNZ   AGNB               branch if not               CFK*SEP01\n         LA    TBL,TBLENTLN(TBL)  back to this entry\nBADR     L     R5,ARLD            ADJUST LENGTH OF CURRENT\n         SLL   R5,8               clear top\n         SRL   R5,8                byte\n         MVC   CC(1),TBLFLG       save entry format\n         MVI   TBLFLG,X'00'       make this a constant\n         S     R5,TBLADR-1        ENTRY TO MAKE NEXT ENTRY\n         ST    R5,FRA             save offset to RLD entry\n         SR    R5,R5\n         IC    R5,TBLDISP         get displacement into card\n         LA    R14,BRF            set return address for 'DS' check\n         A     R5,FRA             add offset to RLD entry\n         C     R5,EOC             compare with @ end of card  CFK*AUG01\n         BNL   DSCK               go to 'DS' check routine if so\nBRF      L     R5,FRA             get offset to RLD entry\n         LTR   R5,R5              is it zero ?\n         BZ    EOA                 BRANCH IF ADCON\n         STH   R5,TBLOPLEN        START AT RLD ADR\n         AH    R5,TBLDISP-1       UPDATE TEXT ADR\n         STC   R5,TBLDISP+TBLENTLN   DISPLACEMENT\n         CLI   CC,X'8E'           was it zeroes or blanks ?\n         BNE   NZR                branch if not\n         MVI   TBLFLG,X'8E'       indicate zeroes or blanks\nNZR      CLI   TBLID,X'0F'        last entry ?\n         BE    TERM               br if yes\n         LA    TBL,TBLENTLN(TBL)  TABLE POINTER TO NEXT ENTRY\nEOA      MVI   TBLFLG,X'6E'        CLASSIFY AS ADCON\n         MVC   TARLD(8),CRLDPRM   copy CRLD output\n         MVC   TBLADR,ARLD+1      ADCON LOGICAL ADR TO B13\n         MVC   TBLOPLEN,LRLD      ADCON LENGTH TO B67\n         SR    R5,R5\n         IC    R5,TBLDISP         get TXT card displacement\n         AH    R5,TBLOPLEN        add entry length\n         STC   R5,TBLDISP+TBLENTLN   save next entries displacement\n         BAL   R14,ADCON          GET NEXT ADCON LOGICAL ADR\n         ICM   R5,B'0111',TBLADR  get current address         CFK*AUG01\n         AH    R5,TBLOPLEN        add entry length            CFK*AUG01\n         C     R5,EOC             TXT CARD BOUNDARY CROSSED?  CFK*AUG01\n         BL    TERM               br if card not finished\n         BH    ADDS               go to call DS check\n         CLC   NTCF(4),TNT1       all cards fetched ?\n         BL    ADDS               br. if more cards to fetch\n         OI    TFL,X'FF'          set end of last card flag   CFK*SEP01\n         B     TERM               go to constant termination\nADDS     BAL   R14,DSCK           call 'DS' check routine\n         B     TERM               GO TO CONSTANT TERMINATION\n         TITLE '*** ''D S''    C H E C K ***  '\nDSCK     L     R5,NTCF            INCREMENT\n         LA    R5,1(R5)           FETCHED CARDS\n         ST    R5,NTCF            COUNT BY ONE\n         C     R5,TNTC            IS THIS THE LAST CARD?\n         BNL   EFT                 BRANCH IF LAST CARD\n         L     R3,CATXB           get @ current TXTB entry\n         MVC   GPDW+1(3),TXTHADR  ************************************\n         L     R5,GPDW            *                                  *\n         SR    R6,R6              * COMPARE CURRENT TXTB ADR ENTRY + *\n         IC    R6,TXTHLEN         * BYTE COUNT WITH NEXT TXTB ENTRY  *\n         AR    R5,R6              *                                  *\n         ST    R5,GPDW            ************************************\n         CLC   GPDW+1(3),TXTHADR+TXTHDRLN   IS THERE A 'DS'?  CFK*MAY01\n         BL    DSFND              BRANCH IF YES\n         BE    NODSF              branch if no 'DS'\n         ABEND 30,DUMP            DUMP (ILLEGAL TXT OVERLAY)\nNODSF    LA    R3,TXTHDRLN(R3)    UPDATE TXTB POINTER         CFK*MAY01\n         ST    R3,CATXB           save TXTB pointer\n         SR    R5,R5               ) calculate                CFK*AUG01\n         ICM   R5,B'0111',TXTHADR  )  @ first                 CFK*AUG01\n         SR    R6,R6               )   byte after             CFK*AUG01\n         IC    R6,TXTHLEN          )    current               CFK*AUG01\n         AR    R5,R6               )     card                 CFK*AUG01\n         ST    R5,EOC              save it for reuse          CFK*AUG01\n         SR    R6,R6\n         IC    R6,TXTHLEN         UPDATE NO. OF BYTES LEFT\n         A     R6,NBLC            ON CARD BY AMOUNT OF NEW\n         ST    R6,NBLC            TXTB BYTE COUNT ENTRY\n         C     R6,HEXFF           more than 255 ?\n         BHR   R14                return if higher\nCLB      CLC   TBLADR+TBLENTLN,EOC+1     off end of card ?    CFK*AUG01\n         BNL   DSCK               loop if not lower\n         BR    R14                *** RETURN ***\nEFT      MVI   TFL,X'FF'          SET end of LAST CARD FLAG\n         B     DSFND\n         TITLE '*** ''D S''    F O U N D ***  '\nDSFND    LR    R5,TBL             WAS PRECEEDING\n         S     R5,EIGHT           CLASSIFICATION\n         TM    0(R5),X'70'        A CONSTANT or ZOBS?\n         BZ    CSD                br. if yes\n         MVI   TFL,X'00'          clear last card flag\n         L     R6,NTCF            ) subtract 1\n         BCTR  R6,0               ) from number\n         ST    R6,NTCF            ) of TXT cards fetched\n         B     AGNB\nCSD      L     R5,EOC             get @ 1st byte of 'DS'      CFK*AUG01\n         SR    R6,R6              * ADJUST LENGTH OF CURRENT CONSTANT *\n         ICM   R6,B'0111',TBLADR  * SO THAT NEXT ENTRY I.C.   CFK*AUG01\n         SR    R5,R6              * IS THE START OF THE 'DS' AREA.    *\n         BZ    NZ                 skip code if zero length\n         CLI   TBLFLG,X'00'       is current entry a const ?  CFK*SEP01\n         BE    CSD2               if so carry on              CFK*SEP01\n         CH    R5,TBLOPLEN        will it be lengthened ?     CFK*JUN01\n         BNH   CSD2               if not carry on             CFK*JUN01\nCSD1     DS    0H                 else need a constant entry  CFK*JUN01\n         SH    R5,TBLOPLEN        sub prev len from this len  CFK*JUN01\n         SR    R14,R14            clear work reg              CFK*JUN01\n         IC    R14,TBLDISP        get displacement            CFK*JUN01\n         AH    R14,TBLOPLEN       add prev entry length       CFK*JUN01\n         STC   R14,TBLDISP+TBLENTLN   set displacement        CFK*JUN01\n         ICM   R14,B'0111',TBLADR get TXT address             CFK*JUN01\n         AH    R14,TBLOPLEN       add prev entry length       CFK*JUN01\n         STCM  R14,B'0111',TBLADR+TBLENTLN  put into next     CFK*JUN01\n         LA    TBL,TBLENTLN(TBL)  point @ next entry          CFK*JUN01\n         MVI   TBLFLG,X'00'       flag constant               CFK*JUN01\n         CH    R5,=H'4'           constant not too long       CFK*JUN01\n         BNH   CSD2               br if OK                    CFK*JUN01\n         MVC   TBLOPLEN,=H'4'     else gen 4 byte constant    CFK*JUN01\n         B     CSD1               and back to get next        CFK*JUN01\nCSD2     DS    0H                                             CFK*JUN01\n         STH   R5,TBLOPLEN        *************************************\nCSD3     DS    0H                                             CFK*JUN01\n         MVI   CC,X'00'           assume next entry will be constant\n         CLI   TBLFLG,X'6E'       adcon ?\n         BE    NMZA               branch if yes\n         CLI   TBLFLG,X'8E'       zeroes or blanks ?\n         BNE   NMZ                branch if not\nNMZA     MVC   CC(1),TBLFLG       save entry type\nNMZ      MVI   TBLFLG,X'00'       CLASSIFY CURRENT ENTRY AS CONSTANT\n         A     R5,TBLADR-1        FORM NEXT\n         ST    R5,TBLADR-1+TBLENTLN    I.C. ENTRY\n         MVC   TBLFLG,CC          set current entry type\n         CLC   TBLOPLEN,ZEROS     zero ?\n         BNE   IUD                br if not\n         ABEND 555,DUMP           else error\nIUD      LA    TBL,TBLENTLN(TBL)  get @ next entry\nNZ       MVI   TBLFLG,X'7E'       CLASSIFY AS 'DS'\n         CLI   TFL,X'00'          last card ?                 CFK*AUG01\n         BE    NZE                br. if not                  CFK*AUG01\n         S     TBL,EIGHT          get @ previous table entry\n         CLI   TBLID,X'00'        start of table ?\n         BE    LASTC              branch if yes\n         B     TERMS              else pass back DS\nNZE      L     R3,CATXB           get TXTB table pointer\n         LA    R3,TXTHDRLN(R3)    UPDATE TXTB TABLE POINTER   CFK*MAY01\n         ST    R3,CATXB           set TXTB table pointer\n         SR    R14,R14             ) calculate                CFK*AUG01\n         ICM   R14,B'0111',TXTHADR )  @ first                 CFK*AUG01\n         SR    R5,R5               )   byte after             CFK*AUG01\n         IC    R5,TXTHLEN          )    current               CFK*AUG01\n         AR    R14,R5              )     card                 CFK*AUG01\n         ST    R14,EOC             save it for reuse          CFK*AUG01\n         L     R5,GPDW            *****************************\n         MVC   GPDW+1(3),TXTHADR  * GET 'DS' LENGTH AND PLACE *\n         S     R5,GPDW            * IN B67 OF CURRENT ENTRY   *\n         LPR   R5,R5\n         STH   R5,TBLOPLEN        *****************************\n         MVC   NBLC+3(1),TXTHLEN  NEW BYTES LEFT COUNT\nCADC     CLC   GPDW+1(3),ARLD+1   is next ADCON after DS ?\n         BNH   TERMS              br. if yes\n         BAL   R14,ADCON          get next ADCON logical address\n         B     CADC               and try again\n         TITLE '*** Z E R O E S    O R    B L A N K S ***  '\n***********************************************************************\n*                                                                     *\n*        AT ENTRY 'R5' CONTAINS CURRENT TXTB POINTER & 'R6' HAS       *\n*        ADR OF 'ZEROS' OR 'BLANK' (WHICH EVER OP CODE CONTAINED)     *\n*                                                                     *\n***********************************************************************\nZOBS     LR    R7,TBL             WAS PRECEEDING\n         S     R7,EIGHT           CLASSIFICATION\n         CLI   TBLID,X'01'        1st entry ?\n         BE    ZADE               br if so\n         TM    0(R7),X'70'         A CONSTANT ?\n         BNZ   IFBC               BRANCH IF NO\nZADE     MVC   ZAD+1(3),TBLADR    copy TXT address\n         MVI   TBLFLG,X'00'       flag constant\n         L     R7,ZAD             ) calc\n         LA    R7,8(R7)           ) current loc\n         ST    R7,ZAD             ) + 8\n         CLC   ZAD+1(3),ARLD+1    RLD entry in next 8 bytes ?\n         BH    NZOB               branch if yes               CFK*SEP01\n         MVI   TBLFLG,X'8E'       CLASSIFY CURRENT ENTRY AS 'ZOB'\n         SR    R7,R7              UPDATE\n         IC    R7,TBLDISP         BYTE COUNT\n         A     R7,EIGHT           BY EIGHT\n         ST    R5,TR5             STORE r5 (uselessly)\n         ST    R6,TR6             store r6\n* loop to find the end of the zeroes or blanks.\nAGNC     ST    R5,TR5             STORE r5 TEMPORARILY\n         LR    R6,R7              ) calc\n         A     R6,EIGHT           ) current loc\n         STC   R6,TBLDISP+TBLENTLN  ) + 8\n         CLC   ZAD+1(3),ARLD+1    RLD entry in next 8 bytes ?\n         BH    FRLD               branch if yes\n         XR    R5,R5              clear work register         CFK*JUN01\n         ICM   R5,B'0111',TBLADR  get current TXT disp        CFK*JUN01\n         L     R14,ZAD            get latest ZOBS length      CFK*JUN01\n         SR    R14,R5             calc latest ZOBS length     CFK*JUN01\n         STH   R14,TBLOPLEN       save it for DSFND           CFK*JUN01\n         L     R5,ZAD             )\n         LA    R5,8(R5)           ) Increment @ ZOBS by 8\n         ST    R5,ZAD             )\n         ST    R7,TR7             save r7\n         LA    R14,BR              LOAD RETURN ADDRESS FROM DSCK\n         C     R5,EOC             HAS CARD BOUNDARY BEEN CROSSED? SEP01\n         BH    DSCK               BRANCH IF YES\nBR       L     R5,TR5             RESTORE REGISTER 5\n         LA    R5,8(R5)           UPDATE TXTS POINTER\n         L     R7,TR7             reload r7\n         LA    R7,8(R7)           UPDATE BYTE COUNTER\n         C     R7,HEXFF           HAS TXTS DISPLACEMENT EXCEEDED F'255'\n         BH    ZBOUT              BRANCH IF YES\n         L     R6,TR6             reload @ 'zeroes' or 'blank'\n         CLC   0(8,R5),0(R6)      IS NEXT EIGHT BYTES OF TEXT THE SAME?\n         BE    AGNC               BRANCH BACK IF YES\nZBOUT    S     R7,EIGHT           subtract 8\n         S     R5,EIGHT           subtract 8\n         SR    R6,R6              CALC\n         IC    R6,TBLDISP         ZOB\n         SR    R7,R6              LENGTH\n         STH   R7,TBLOPLEN        PLACE LENGTH INTO B67\n         B     TERM\n         TITLE '*** T E R M I N A T I O N ***  '\nTERME    TM    TBLFLG,X'70'       GO BACK IN TABLE UNTIL A\n         B     TERM                CONSTANT CLASSIFICATION IS\n         S     TBL,EIGHT          FOUND OR WHOLE TABLE HAS\n         CLI   TBLID,X'01'        BEEN SEARCHED.  ACCEPT UP\n         BH    TERME              TO RESULTANT TABLE ENTRY.\n         ABEND 70,DUMP            DUMP IF NO CONSTANT FOUND\nTERM     SR    R5,R5\n         ICM   R5,B'0111',TBLADR  get current address         CFK*AUG01\n         AH    R5,TBLOPLEN        add entry length            CFK*AUG01\n         C     R5,EOC             compare with end of card    CFK*AUG01\n         BL    TERMS              BR. IF END OF CARD NOT FOUNDCFK*AUG01\n*        BZ    TT                  end of card\n*        ABEND 11,DUMP             error - we overran the card\nTT       L     R5,NTCF             LOAD NO OF CARDS FOUND\n         LA    R5,1(R5)            INCREMENT CARD COUNT\n         S     R5,TNTC             SUBTR TOTAL NUMBER OF CARDS\n         BL    TERMS               HAS LAST CARD BEEN FOUND ?\n         OI    TFL,X'01'           SET last card FLAG IF YES  CFK*AUG01\nTERMS    L     R5,TBLADR-1        PLACE\n         AH    R5,TBLOPLEN        NEXT I.C.\n         ST    R5,FTBL            INTO B13 OF ENTRY ZERO\n         MVI   FTBL,X'0F'         RETAIN END\n         NC    FTBL(1),TBLFLG     CLASSIFICATION INFO.\n         CLI   TBLFLG,X'00'       constant ?\n         BE    ISE                branch if yes\n         CLI   TBLFLG,X'5F'       instruction ?\n         BH    ISE                branch if not\n         OI    FTBL,X'01'\nISE      MVC   TBLTE+3(1),TBLID\n         ST    R3,CATXB           SAVE CURRENT TXTB POINTER\n         LA    TBL,FTBL+8         SET TABLE POINTER TO ENTRY\n         ST    TBL,CATBL          ONE FOR PROCESS ROUTINE\n         BAL   R14,PROCS          go to process routine\n         TITLE '*** P R O C E S S ***  '\nPROCS    L     TXS,SATXS          LOAD STARTING TEXT POINTER\n*        S     TXS,SAVSDADR       - section start address     CFK*JAN04\n         L     TBL,CATBL          LOAD CURRENT TABLE ENTRY POINTER\n         L     PAA,PRM@PA         LOAD PRINT AREA POINTER\n         USING OUTLINE,PAA        tell assembler              CFK*MAR00\n         SR    R5,R5              ***********\n         IC    R5,TBLFLG          * BRANCH  *\n         SRL   R5,4               * TO SOME *\n         SLL   R5,2               * PROCESS *\n         L     R5,ALIST(R5)       * ROUTINE *\n         BR    R5                 ***********\n* Process routine to handle an ADCON\nPRLD     MVC   PRMROUT4,AARL      EXTERNAL DECODE, @ ARL csect\n         MVC   PRMINST4,0(TXS)    pass back TEXT of ADCON\n         MVC   PRMINST4+4(8),TARLD  pass back RLD definition  CFK*APR00\n         MVC   PRMLEN,TBLOPLEN    copy ADCON length to parms\n         PUSH  USING                                          CFK*JUN03\n         USING RLDITEM,TARLD                                  CFK*JUN03\n         MVC   PRMOPER,RLDIFLAG   copy ADCON flags to parms   CFK*JUN03\n         POP   USING                                          CFK*JUN03\n         MVC   OUTINSTR(2),DCDS   copy c'DC' to print area\n         B     PASSA\n* Process routine to handle a constant\nPCON     MVC   PRMROUT4,ACON      pass @ CONST TO PASS 4\nMVDC     DS    0H                 'DC' TO PRINT               CFK*SEP01\n         MVC   OUTINSTR(2),DCDS   AREA POS 65-66\n         B     PASS               go to termination\n         TITLE '*** P R O C E S S    I N S T R U C T I O N S *** '\nPCRR     MVC   PRMROUT4,AXFRS     ************\n         B     PINST              *          *\nPCRX     MVC   PRMROUT4,AXFRS+4   * EXTERNAL *\n         B     PINST              * DECODE   *\nPCRS     MVC   PRMROUT4,AXFRS+8   * ROUTINE  *\n         B     PINST              * ADR TO   *\nPCSI     MVC   PRMROUT4,AXFRS+12  * PASS 4   *\n         B     PINST              *          *\nPCSS     MVC   PRMROUT4,AXFRS+16  ************\nPINST    DS    0H                                             CFK*SEP01\n* call to TIME deleted from here                              CFK*APR00\n         MVC   AOP1(6),0(TXS)     OP CODE TO AXN DATA SECTION\n         BAL   R14,CLAXN          GET BCD MNEMONIC FOR OP CODE\n         MVC   AOPT,0(TXS)        copy opcode to INFO parms   CFK*APR00\n         MVC   AFMT,AOP7          pass instr. flags to INFO   CFK*APR00\n         LA    R14,RETT           get return address          CFK*APR00\n         L     R15,AINFO          get @ INFO csect            CFK*APR00\n         CNOP  2,4                                            CFK*APR00\n         BASR  R1,R15             call INFO                   CFK*APR00\nPAT      DC    A(PA)              @ print area in PASS1 csect CFK*APR00\nAOPT     DS    XL6                instruction text            CFK*APR00\nAFMT     DS    X                  instruction format flags    CFK*APR00\nRETT     DS    0H                                             CFK*APR00\n         L     R5,AXNOPC          ************************\n         L     R6,0(R5)           * INCREMENT CURRENT OP *\n         LA    R6,1(R6)           * CODE COUNTER BY ONE  *\n         ST    R6,0(R5)           ************************\n         MVC   OUTINSTR,AOP2      BCD MNEM. TO PRINT AREA\n         ST    PAA,PRPAA          PRINT AREA ADR FOR PR ROUTINE\n         MVC   PRTXT(8),0(TXS)    TEXT FOR PR\n         MVC   PRLEN+2(2),TBLOPLEN  LENGTH OF TEXT FOR PR\n*                                 call PR to format text for print\n         LA    R1,PRPAA           get @ parms                 CFK*AUG01\n         L     R15,ADRPR          get @ PR csect              CFK*AUG01\n         BASR  R14,R15            call PR                     CFK*AUG01\n         TITLE '*** P R O C E S S    T E R M I N A T I O N ***  '\nPASS     MVC   PRMLEN,TBLOPLEN     TEXT LENGTH TO PASS 4\n         MVC   PRMFMT(2),AOP5     Instr. and operand formats to PASS4\n         MVC   PRMINST4,0(TXS)    8 BYTES OF TEXT TO PASS 4\nPASSA    AH    TXS,TBLOPLEN       get @ next instruction\n         L     R5,NBLC            get no. bytes left on card  CFK*AUG01\n         SH    R5,TBLOPLEN        subtract length used        CFK*AUG01\n         ST    R5,NBLC            and save it                 CFK*AUG01\nPTRM     DS    0H                 called by PCDS only !       CFK*JLY01\n         MVC   PRMFLG1(4),TBLFLG  I.C. & AXN CODE TO PASS 4\n         UNPK  OUTLOC(7),TBLADR(4)  put address on listing    CFK*JLY01\n         TR    OUTLOC,=C'0123456789ABCDEF'-240 make printable CFK*JLY01\n         MVI   OUTLOC+6,C' '      clear gash byte             CFK*JLY01\n*        A     TXS,SAVSDADR       add back section offset     CFK*JAN04\n         ST    TXS,SATXS          SAVE TEXT POINTER\n         SR    R5,R5              ZERO R5\n         IC    R5,TBLID     INSERT TABLE ENTRY NUMBER\n         C     R5,TBLTE           ENTRY BEEN REACHED?\n         BL    RTN                BRANCH IF NO\n         MVI   PCFLG,X'00'        RE-SET FLAG FOR LOOKAHEAD\n         CLI   TFL,X'FF'          end of last card ?          CFK*AUG01\n         BE    LASTC              br. if so                   CFK*AUG01\nRTN      LA    TBL,TBLENTLN(TBL)  TABLE POINTER TO\n         ST    TBL,CATBL          THE NEXT ENTRY\nRET      L     R13,SAVE+4         ********************\n         LM    R14,R12,12(R13)    * RETURN TO PASS 4 *\n         BR    R14                ********************\n         TITLE '*** I N S U B ***  (FORMAT BCD LENGTH FOR DS OR DC) '\nINSUB    STM   R1,R2,24(R13)      SAVE R1 & R2 (USED IN TRANSLATE)\n         LH    R5,TBLOPLEN        GET LENGTH\n         TM    3(TBL),X'03'       on a fullword boundary ?\n         BNZ   NFWD               branch if not\n         TM    7(TBL),X'03'       IS LENGTH A MULTIPLE OF FOUR?\n         BNZ   NFWD               BRANCH IF NOt\n         SRL   R5,2               DIVIDE LENGTH BY FOUR\nNFWD     CVD   R5,GPDW            GET DECIMAL\n         UNPK  GPDW(5),GPDW+5(3)  LENGTH READY\n         OI    GPDW+4,C'0'        FOR PRINT\n         TRT   GPDW(5),TRTBL-240  FIND ADR OF FIRST NON-ZERO DIGIT\n         BNO   CONTC              IN DECIMAL DS OR DC LENGTH\n         ABEND 40,DUMP            DUMP IF LENGTH IS ALL ZEROES\nCONTC    LA    R5,GPDW+4          FIND NO. OF BYTES\n         SR    R5,1               TAKEN BY BCD LENGTH\n         EX    R5,MOVE            MOVE BCD LENGTH TO PRINT AREA\n         LA    R5,OUTOPER(R5)     FIND ADR OF BYTE RIGHT AFTER LENGTH\n         LM    R1,R2,24(R13)      RESTORE R1 & R2\n*\n* AT EXIT 'R5' CONTAINS POINTER TO BYTE RIGHT AFTER BCD DS/DC LENGTH\n*\n         BR    R14                *** RETURN ***\nMOVE     MVC   OUTOPER(1),0(R1)   EXecuted instruction        CFK*APR00\nTRTBL    DC    X'00'\n         DC    9X'FF'\n         TITLE '*** P C D S ***  (PROCESS DS) '\nPCDS     DS    0H                                             CFK*SEP01\n         L     R3,CATXB           get @ current TXTB entry    CFK*JUN01\n         XR    TXS,TXS            clear TXT pointer           CFK*JUN01\n         ICM   TXS,B'0111',TXTHADR get new TXT offset         CFK*JUN01\n         A     TXS,SAVTXPTR       add @ start of TXT          CFK*JUN01\n         S     TXS,SAVSDADR       calc offset into section    CFK*MAR04\n         ST    TXS,SATXS          save new TXT pointer        CFK*JUN01\n         MVI   PCFLG,X'00'        ind. lookahead next call    CFK*DEC02\n         MVC   OUTINSTR(2),DCDS+2 'DS' TO PRINT POS 65-66\n         MVC   PRMROUT4,ADS       copy @ DS csect to decoding rtn adr\n         BAL   R14,INSUB       call format BCD length for DS or DC rtn\n*\n*AFTER INSUB 'R5' CONTAINS ADR OF PRINT POSITION FOLLOWING BCD LENGTH\n*\n         MVI   1(R5),C'F'         assume fullword\n         TM    TBLADRLB,X'03'     are we on a fullword boundary ?\n         BNZ   GMC                if not length is in bytes\n         TM    7(TBL),X'03'       * PLACE 'C' OR 'F' AFTER *\n         BZ    PTRM               * BCD LENGTH AND GO TO   *\nGMC      MVI   1(R5),C'C'         * TERMINATION OF PROCESS *\n         B     PTRM               **************************\n* AFTER INSUB 'R5' CONTAINS ADR OF PRINT POSITION FOLLOWING BCD LENGTH\n         TITLE '*** P C Z B ***  (PROCESS ZEROES OR BLANKS)  '\nPCZB     BAL   R14,INSUB       call format BCD length for DS or DC rtn\n*\n*\n         MVC   PRMROUT4,ADS        copy @ DS csect to decoding rtn adr\n         TM    TBLADRLB,X'03'      ON FULL WORD BOUNDARY\n         BNZ   BZ4                 BRANCH IF NO\n         TM    7(TBL),X'03'\n         BNZ   BZ4\n         CLI   0(TXS),X'00'       IS TEXT A GROUP OF ZEROES?\n         BNE   BLNK               BRANCH IF NO\n         MVC   1(4,R5),FBCD       INSERT F'0' AFTER BCD LENGTH\n         B     MVDC\nBLNK     MVC   1(7,R5),CBCD       INSERT C'    ' AFTER BSD LENGTH\n         B     MVDC\nFBCD     DC    X'C67DF07D'        F'0' IN BCD\nCBCD     DC    X'C37D404040407D'  C'    ' IN BCD\nFBCD3    DC    X'E77DF0F07D'      X'00' in bcd\nCBCD3    DC    X'C37D407D'         C' ' in bcd\nFBCD0    DC    X'C37DF0F0F0F07D'  C'0000' in bcd\nBZ4      CLI   0(TXS),X'00'        IS TEXT A GROUB OF ZEROES\n         BNE   BLN3                BRANCH IF BLANKS\n         MVC   1(5,R5),FBCD3      copy X'00'\n         B     MVDC\nBLN3     MVC   1(4,R5),CBCD3      copy C' '\n         B     MVDC\n* end of last card reached\nLASTC    L     R2,SAVE+4          get @ our reg's in save area\n         L     R1,24(R2)          get @ parms\n         MVC   PRMKEY4,ONE1       copy f'1' into KEY4\n         MVI   TFL,X'00'          clear last card flag\n         MVI   PCFLG,X'00'        re-set flag for lookahead\n         SR    R5,R5              ZERO REGISTER\n         STH   R5,LRLD            ZERO RLD LENGTH\n         ST    R5,NTCF            ZERO TEXT CARD COUNT\n         MVI   FPFLG,X'FF'        SET FIRST PASS FLAG\n         L     R6,ARLF            get @ RLF in CRLD csect     CFK*APR03\n         MVI   0(R6),X'00'        zero RLF in CRLD            CFK*APR03\n         B     RET                and return to caller\n         TITLE 'Common subroutines'                           CFK*AUG01\n*               Call to AXN\n* This subroutines return address is in R14, so just branch to AXN and\n* it returns for us\nCLAXN    DS    0H                                             CFK*APR00\n         LA    R1,AXNPARMS        GET @ PARMS                 CFK*APR00\n         L     R15,AAXN           get @ AXN csect             CFK*APR00\n         BR    R15                CALL AXN                    CFK*APR00\n         SPACE 3\n*              Call to CRLD        (GET LOGICAL ADR OF NEXT ADCON)\n* this subroutines return address is in R14, so just branch to CRLD and\n* it returns for us\nADCON    DS    0H                                             CFK*DEC00\n         LA    R1,CRLDPRM         get @ parms                 CFK*DEC00\n         L     R15,ACRLD          get @ CRLD csect            CFK*DEC00\n         BR    R15                CALL CRLD                   CFK*DEC00\n         TITLE '*** F T X T A    C O N S T A N T    A R E A *** '\n         LTORG                                                CFK*JLY01\nAAXN     DC    A(AXN)             ADR OF AXN\nACRLD    DC    A(CRLD)            ADR OF CRLD\nBLANK    DC    CL8' '             EIGHT BYTES OF BLANKS\nEIGHT    DC    F'8'               constant\nFOUR     DC    F'4'               constant\nHEXFF    DC    F'255'             UPPER LIMIT OF ONE BYTE COUNTER\nHITBL    DC    F'15'              HIGHEST TABLE ENTRY NO.\nONE1     DC    F'1'               constant\nTWO2     DC    F'2'               constant\nZEROS    DC    D'0'               EIGHT BYTES OF ZEROES\nALIST    DC    A(PCON)            ************  0 - constant\n         DC    A(PCRR)            * ADDRESS  *  1 - RR\n         DC    A(PCRX)            * LIST     *  2 - RX\n         DC    A(PCRS)            * USED     *  3 - RS\n         DC    A(PCSI)            * TO GET   *  4 - SI\n         DC    A(PCSS)            * SPECIFIC *  5 - SS\n         DC    A(PRLD)            * PROCESS  *  6 - ADCON\n         DC    A(PCDS)            * ROUTINE  *  7 - DS\n         DC    A(PCZB)            ************  8 - Zeroes Or Blanks\nDCDS     DC    C'DCDS'            'DC' & 'DS' MNEMONICS\nADRPR    DC    A(PR)              ADR OF TEXT FORMAT ROUTINE\nAPAB     DC    A(PAB)             SECOND PRINT AREA ADR (not used ?)\nACON     DC    A(CONST)           ************\nAXFRS    DC    A(RR)              *          *\n         DC    A(RX)              * EXTERNAL *\n         DC    A(RS)              * FORMAT   *\n         DC    A(SI)              * ROUTINES *\n         DC    A(SS)              *          *\nAARL     DC    A(ARL)             ************\nADS      DC    A(DS)              @ DS csect\nARLF     DC    A(RLF)             @ RLF in CRLD csect         CFK*APR03\nAINFO    DC    A(INFO)            @ INFO csect                CFK*APR00\n         TITLE '*** F T X T A    V A R I A B L E    A R E A *** '\n* start of parameters for AXN, keep in order\nAXNPARMS DC    0F'0'              AXN parameters              CFK*APR00\nAOP1     DC    XL2'0'             Input opcode (6 bytes in, 2 out) UN99\nAOP2     DC    CL5' '             Mnemonic returned by AXN    CFK*JUN99\nAOP3     DC    XL2'0'             Output Opcode               CFK*JUN99\nAOP4     DC    X'0'               Output old format code      CFK*JUN99\nAOP5     DC    X'0'               O/P Opcode format (as AXNFMT) K*JUN99\nAOP6     DC    X'0'               O/P operand format (as AXNOPER) JUN99\nAOP7     DC    X'0'               O/P opcode flags (as AXNFLG2) K*APR00\n         DC    XL3'0'             unused                      CFK*APR00\nAXNOPC   DC    F'0'               OP CODE COUNTER ADR RETURNED HERE\n* end of parameters for AXN\n* start of parameters for PR, keep in order\nPRPAA    DC    F'0'               PRINT AREA ADR\nPRTXT    DC    2F'0'              TEXT TO BE FORMATTED\nPRLEN    DC    F'0'               TEXT LENGTH\n* end of parameters for PR\n* start of parameters for CRLD, keep in order\nCRLDPRM  DC    F'0'               ESD ID's of ADCON and it's target\nARLD     DC    F'0'               LOGICAL ADR OF NEXT ADCON (hb flags)\nLRLD     DC    H'0'               LENGTH OF ADCON\nCRLDID   DC    H'0'               current ESD ID              CFK*DEC01\n* end of parameters for CRLD\nADRZB    DC    F'0'               ADR OF ZEROS OR BLANK ENTERING 'ZOBS'\nAZBTS    DC    F'0'               TXTS POINTER AT ENTRY TO 'ZOBS'\nCATXB    DC    F'0'               CURRENT TXTB TABLE POINTER\nEOC      DC    F'0'               @ byte after end of cur. card K*AUG01\nSAVSDADR DC    F'0'               saved section address       CFK*APR01\nFPFLG    DC    X'FF'              FIRST PASS FLAG ('FF'=FIRST PASS)\nPCFLG    DC    X'00'              PROCESS FLAG ('FF'=PROCESS)\nTFL      DC    X'00'              LAST CARD FLAG\nTFLNOT   EQU   X'00'                not last card             CFK*AUG01\nTFLLAST  EQU   X'01'                last card being processed CFK*AUG01\nTFLEND   EQU   X'FF'                end of last card reached  CFK*AUG01\nCC       DC    X'00'              2nd byte of opcode\nTAOP     DC    X'00'\nFTBL     DS    16D                FETCHED TEXT TABLE\n         DC    D'0'\nGPDW     DC    D'0'               GENERAL PURPOSE DOUBLE WORD\nTARLD    DC    2F'0'              copy of CRLD output\nNBLC     DC    F'0'               NUMBER OF BYTES LEFT ON CARD\nNTCF     DC    F'0'               NUMBER OF TXT CARDS FETCHED\nZAD      DC    F'0'               work area for ZOBS\nTNTC     DC    F'0'               TOTAL NUMBER OF TXT CARDS\nSATXS    DC    F'0'               TEXT POINTER (SATXS+B5=CURRENT TEXT)\nSAVTXPTR DS    F                  @ first byte of TXT         CFK*MAY01\nSAVE     DS    18F                SAVE AREA FOR FTXTA ROUTINE\nFRA      DC    F'0'               work area for FRLD\nTBLTE    DC    F'0'               TABLE TERMINATION ENTRY NUMBER\n*\nCATBL    DS    1F                 CURRENT TABLE ENTRY POINTER\nTR5      DC    F'0'               temp store for R5\nTR6      DC    F'0'               temp store for R6\nTR7      DC    F'0'               temp store for R7\nTM1      DC    F'0'               not used ?\nTNT1     DC    F'0'               number of TXT cards (NTXT - 1)\n*\n* * * * * * * * * * * REGISTER ASSIGNMENT * * * * * * * * * * * * * * *\n*\nR0       EQU   0                                              CFK*APR00\nR1       EQU   1                                              CFK*APR00\nR2       EQU   2                                              CFK*APR00\nR3       EQU   3                  CURRENT TXTB TABLE POINTER  CFK*DEC01\nTBL      EQU   4                  CURRENT TABLE POINTER\nR5       EQU   5                  GENERAL WORK REGISTER\nR6       EQU   6                  GENERAL WORK REGISTER\nR7       EQU   7                  GENERAL WORK REGISTER\nPAA      EQU   8                  PRINT AREA POINTER\nTXS      EQU   9                  CURRENT TEXT POINTER\nR10      EQU   10                 @ FTXTA parms               CFK*APR00\nR11      EQU   11                                             CFK*APR00\nR12      EQU   12                 base register               CFK*APR00\nR13      EQU   13                 @ SAVE (save area)          CFK*APR00\nR14      EQU   14                                             CFK*APR00\nR15      EQU   15                                             CFK*APR00\n*\nCOFST    DC    F'0'               *****DUMMY*****, entry point\nRFTXT    ABEND 60,DUMP            *****DUMMY*****, entry point\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FXPT": {"ttr": 3081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FXPT     TITLE 'FXPT, Format Fixed Point Constants in output'\n***********************************************************************\n*                                                                     *\n*  Format fixed point constants in output                             *\n*                                                                     *\n*  Called by CONST                                                    *\n*                                                                     *\n*  Parms @ r1: (mapped by PRMDUM)                                     *\n*    +0 - @ Print Area                                                *\n*    +4 - output constant                                             *\n*    +8 - callers r13                                                 *\n*    +12 - return to here                                             *\n*                                                                     *\n*  Attributes:                                                        *\n*    Reusable                                                         *\n*                                                                     *\n*  History:                                                           *\n*    Use OUTLINE macro to map output line                CFK Feb 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Map input parameters                                CFK Dec 2000 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT                                                CFK*DEC00\nPRM@PA   DS    A                      @ print area            CFK*DEC00\nPRMTXT   DS    XL4                    constant to print       CFK*DEC00\n*\n         OUTLINE                      map output line         CFK*FEB00\nFXPT     CSECT\n         ENTER ,                      entry logic             CFK*NOV03\n         LR    R10,R1                 get @ parms             CFK*NOV03\n         USING PRMDUM,R10             tell assembler          CFK*NOV03\n         L     R4,PRM@PA              get @ print area\n         USING OUTLINE,R4             tell assembler          CFK*FEB00\n         MVC   OUTOPER(2),FQ          copy F'\n         TM    PRMTXT,X'80'           negative number ?\n         BZ    NFN                    br if not\n         MVI   OUTOPER+2,C'-'         else add - sign\n         LA    R4,1(R4)               and increment output pointer\nNFN      L     R2,PRMTXT              get constant\n         LPR   R2,R2                  make it positive\n         CVD   R2,DWFP2               make decimal\n         UNPK  DWD2-2(10),DWFP2+2(6)  make it ebcdic\n         OI    DWD2+7,C'0'            make sign printable\n         LA    R2,DWD2-2              get @ start of output area\n         LA    R3,9                   get max len - 1\nFZL      CLI   0(R2),C'0'             )\n         BNE   NFZ                    ) skip over\n         LA    R2,1(R2)               ) leading zeroes\n         BCT   R3,FZL                 )\nNFZ      EX    R3,MVFZ2               move number\n         AR    R4,R3                  calc @ end of number\n         MVI   OUTLINE+3,X'7D'        add final '\n         LEAVE ,                      return to caller        CFK*NOV03\nMVFZ2    MVC   OUTOPER+2(1),0(R2)     EXecuted instruction\n         DC    C'IMM='\nDWFP2    DC    D'0'                   CVD work area\nFQ       DC    X'C67D'                F'\n         DC    F'0'                   extension of next field\nDWD2     DC    D'0'                   ebcdic work area\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                      register equates        CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GENCARD": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x02\\x00\\x82%\\x0f\\x01\\x04\\x15O\\x12)\\x00T\\x003\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1982-09-07T00:00:00", "modifydate": "2004-06-02T12:29:02", "lines": 84, "newlines": 51, "modlines": 0, "user": "U765139"}, "text": "GENCARD  TITLE 'OUTPUT 80-BYTE FIXED-LENGTH RECORD CONTAINING THE JCL PX\n               ARM'\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM ACCEPTS AS INPUT A 1-80 BYTE STRING OF TEXT (IN THE   *\n*  FORMAT OF JCL PARM - HALFWORD TEXT LENGTH FOLLOWED BY THE TEXT     *\n*  AND OUTPUTS THE DATA AS A FIXED-LENGTH 80-BYTE RECORD TO DDNAME    *\n*  SYSPUNCH.  THE DATA IS LEFT-JUSTIFIED IN A FIELD OF BLANKS.        *\n*                                                                     *\n*  THIS PROGRAM EFFECTIVELY ALLOWS THE SUBSTITUTION OF JCL VARIABLES  *\n*  INTO PARAMETER STATEMENTS BEING READ BY PROGRAMS.                  *\n*                                                                     *\n*  THE DCB ATTRIBUTES OF SYSPUNCH ARE AS FOLLOWS:                     *\n*                                                                     *\n*                   RECFM ---------------------- F                    *\n*                   BLKSIZE -------------------- 80                   *\n*                                                                     *\n*     PARAMETERS:   1. @ PARM STRING                                  *\n*                                                                     *\n*     RETURN CODE:  THE RETURN CODE IS ALWAYS ZERO.                   *\n*                                                                     *\n*     ATTRIBUTES:   RMODE=24                                          *\n*                   AMODE=24                                          *\n*                                                                     *\n*     ABENDS:       U0003 - PARM NOT 1-80 CHARACTERS.                 *\n*                   U0013 - OPEN FOR SYSPUNCH FAILED.                 *\n*                                                                     *\n***********************************************************************\n         EJECT\nGENCARD  CSECT\n         ENTER\n*\nZ01A     EQU   *\n         L     R2,0(,R1)               @ PARM FIELD\n         SLR   R3,R3                   PREPARE R3 FOR LENGTH\n         ICM   R3,B'0011',0(R2)        LENGTH -> R3\n         BZ    ZABEND3                 )\n         C     R3,=F'80'               )  ABEND U0003 IF LENGTH INVALID\n         BH    ZABEND3                 )\n*\nZ01B     EQU   *\n         OPEN  (SYSPUNCH,(OUTPUT))     OPEN SYSPUNCH\n         TM    SYSPUNCH+48,X'10'       )  ABEND U0013 IF\n         BZ    ZABEND13                ) \"OPEN\" FAILED\n*\nZ01C     EQU   *\n         BCTR  R3,0\n         EX    R3,MVC1                 BUILD CARD IMAGE\n         PUT   SYSPUNCH,CARD           OUTPUT CARD TO SYSPUNCH\n*\nZ01D     EQU   *\n         CLOSE SYSPUNCH                CLOSE SYSPUNCH\n*\nZLEAVE   EQU   *\n         LEAVE ,                       RETURN TO CALLER\n*\n*\nMVC1     MVC   CARD(0),2(R2)\n*\n*\nZABEND3  EQU   *                       )\n         LA    R1,3                    )\n         B     ZABEND                  )\nZABEND13 EQU   *                       )  ERROR ROUTINES\n         LA    R1,13                   )\nZABEND   EQU   *                       )\n         ABEND (1)                     )\n*\n*\n         PRINT NOGEN\n*\n*\nCARD     DC    CL80' '\n*\nSAVEAREA DS    18F                                            CFK*JUN04\n*\nSYSPUNCH DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=PM,                      X\n               RECFM=F,BLKSIZE=80\n*\n*\n         REGEQU\n*\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INFO": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00%\\x01\\x00\\x10_\\x01\\x00)\\x8f\\x12U\\x00f\\x00f\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-04-14T00:00:00", "modifydate": "2000-10-24T12:55:25", "lines": 102, "newlines": 102, "modlines": 0, "user": "U765139"}, "text": "INFO     TITLE 'ADD COMMENTS TO THE LISTING'\n***********************************************************************\n*                                                                     *\n*  add character representation of the instructions and flags for     *\n*  instruction characteristics to the listings.                       *\n*                                                                     *\n*  called by FTXTA                                                    *\n*                                                                     *\n*  parms @ r1:                                                        *\n*    +0 - @ Print Area in PASS1                                       *\n*    +4 - input instruction                                           *\n*    +10- instruction flags                                           *\n*                                                                     *\n*  Return is to @ r14.                                                *\n*                                                                     *\n*  New module written to replace TIME                    CFK mar 2000 *\n*                                                                     *\n***********************************************************************\n         AXNTAB                   equates for flags\n         OUTLINE                  map output line\nINFO     CSECT\n         STM   R14,R12,12(R13)    save callers registers\n         BASR  R12,0              setup base reg\n         USING *,R12              tell assembler\n         L     R2,0(R1)           get @ output area\n         USING OUTLINE,R2         tell assembler\n         MVI   OUTINFO1,C'*'      mark start of comment\n         MVC   OUTINFO2,4(R1)     copy first two bytes\n         TR    OUTINFO2,TRTAB     make them printable\n         MVI   OUTINFO3,C'*'      assume only two bytes\n         TM    4(R1),B'11000000'  2 byte instr ?\n         BZ    SETFLAGS           branch if yes.\n*              4 or 6 byte instruction\n         MVC   OUTINFO3,6(R1)     copy next two bytes\n         TR    OUTINFO3,TRTAB     make them printable\n         MVI   OUTINFO4,C'*'      assume only four bytes\n         TM    4(R1),B'11000000'  4 byte instr ?\n         BNO   SETFLAGS           branch if yes.\n*              6 byte instruction\n         MVC   OUTINFO4,8(R1)     copy last two bytes\n         TR    OUTINFO4,TRTAB     make them printable\n         MVI   OUTINFO5,C'*'      this must be the end.\n*\nSETFLAGS DS    0H\n*\n         TM    10(R1),AXNFTRM     terminating (branch) instr. ?\n         BZ    NOTTERM            branch if not\n         MVI   OUTINFOB,C'b'      else flag a branch instr.\n*\nNOTTERM  DS    0H\n         TM    10(R1),AXNFINT     interruptible instr. ?\n         BZ    NOTINTR            branch if not\n         MVI   OUTINFOI,C'i'      else flag interruptible\n*\nNOTINTR  DS    0H\n         TM    10(R1),AXNFPRV     privileged instr. ?\n         BZ    NOTPRIV            branch if not\n         MVI   OUTINFOP,C'p'      else flag privileged\n*\nNOTPRIV  DS    0H\n         TM    10(R1),AXNFSPRV    semi-privileged instr. ?\n         BZ    NOTSPRV            branch if not\n         MVI   OUTINFOP,C'q'      else flag semi-privileged\n*\nNOTSPRV  DS    0H\n         TM    10(R1),AXNFSCC     CC setting instr. ?\n         BZ    NOTCC              branch if not\n         MVI   OUTINFOC,C'c'      else flag it sets CC\n*\nNOTCC    DS    0H\n         LM    R14,R12,12(13)     reload callers registers\n         BR    R14                and return\n*                   constants\nTRTAB    DC    256C'.'            translate table\n         ORG   TRTAB+C' '\n         DC    C' '\n         ORG   TRTAB+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   TRTAB+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   TRTAB+C','\n         DC    C',%_>?'\n         ORG   TRTAB+C'`'\n         DC    C'`:#@''=\"'\n         ORG   TRTAB+C'a'\n         DC    C'abcdefghi'\n         ORG   TRTAB+C'j'\n         DC    C'jklmnopqr'\n         ORG   TRTAB+C's'\n         DC    C'stuvwxyz'\n         ORG   TRTAB+C'{'\n         DC    C'{ABCDEFGHI'\n         ORG   TRTAB+C'}'\n         DC    C'}JKLMNOPQR'\n         ORG   TRTAB+C'\\'\n         DC    C'\\.STUVWXYZ'\n         ORG   TRTAB+C'0'\n         DC    C'0123456789'\n         ORG   ,                           reset origin to max\n         PRINT NOGEN\n         REGEQU                            register equates.\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LABELMAP": {"ttr": 3334, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          LABELMAP\n         LABELMAP                                                       LABELMAP\n*********************************************************************** LABELMAP\n*                                                                     * LABELMAP\n*  map of the list of saved addresses in SAVA                         * LABELMAP\n*                                                                     * LABELMAP\n*  used by ART, BSC, PASS3 and SAVA                                   * LABELMAP\n*                                                                     * LABELMAP\n*********************************************************************** LABELMAP\nLABELMAP DSECT                                                          LABELMAP\nLABELENT DS    0CL(LABENTLN)    The whole entry                         LABELMAP\nLABTYPE  DS    C                type of data at this address            LABELMAP\nLABKEY   DS    0CL19            the key to sort on (CSECT+ADR+NAME)     LABELMAP\nLABCADR  DS    0CL11            csect + address part of key   CFK*DEC03 LABELMAP\nLABCSECT DS    CL8              csect the label is in         CFK*DEC03 LABELMAP\nLABADR   DS    CL3              address of label                        LABELMAP\nLABNAME  DS    CL8              synbol at this address                  LABELMAP\nLABENTLN EQU   *-LABTYPE        Length of entry in the table            LABELMAP\n         MEND                                                           LABELMAP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LEAVE": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\t\\x01\\x03'?\\x01\\x03'?\\x12E\\x00\\x06\\x00\\x06\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-09-30T00:00:00", "modifydate": "2003-09-30T12:45:09", "lines": 6, "newlines": 6, "modlines": 0, "user": "U765139"}, "text": "         MACRO                                                          LEAVE\n&LABEL   LEAVE                                                          LEAVE\n&LABEL   L     13,4(13)                GET @ CALLER SAVE AREA           LEAVE\n         XC    8(4,13),8(13)           CLEAR CALLER'S HSA CHAIN         LEAVE\n         RETURN (14,12),,RC=0                                           LEAVE\n         MEND                                                           LEAVE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSYM": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x04\\x00/\\x01\\x04\\x00/\\x12$\\x02\\x16\\x02\\x16\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-02T00:00:00", "modifydate": "2004-01-02T12:24:54", "lines": 534, "newlines": 534, "modlines": 0, "user": "U765139"}, "text": "LSYM     TITLE '* * * S Y M * * * (process SYM cards)  '\n***********************************************************************\n*                                                                     *\n*  Process SYM card from input                                        *\n*                                                                     *\n*  Called by DISYM                                                    *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    Input card                                                       *\n*                                                                     *\n*  Register use:                                                      *\n*    R0 - temp store for operand length                               *\n*    R1 - @ input card                                                *\n*    R2 - @ current SYM entry                                         *\n*    R3 - length of current SYM entry                                 *\n*    R4 - @ type field in SYM entry                                   *\n*    R5 - work reg                                                    *\n*    R6 - @ current location to print operand to                      *\n*    R7 - @ mult/scale                                                *\n*    R8 - used to multiply R9 by R5                                   *\n*    R9 - total length of operand (multiplicity * length)             *\n*   R10 - current address in DSECT                                    *\n*   R11 -                                                             *\n*   R12 - base reg                                                    *\n*   R13 - @ save area                                                 *\n*   R14 - @ print area / @ parameters                                 *\n*   R15 -                                                             *\n*                                                                     *\n* History:                                                            *\n*   newly written                                         CFK apr 2000*\n*   entry type field is only present for data type entrys CFK aug 2000*\n*   allow for DS length field                             CFK sep 2000*\n*   check for valid non-data type                         CFK sep 2000*\n*   tell SAVA if we are a CSECT                           CFK sep 2000*\n*   exit gracefully if position lost                      CFK sep 2000*\n*   print/punch DSECTs                                    CFK dec 2000*\n*   check for data type x'0C' which is invalid            CFK jan 2001*\n*   packed or zoned decimal data only has 1 length byte   CFK jan 2001*\n*   generate DS    XL2 for instructions in DSECTs         CFK jan 2001*\n*   generate ORG statements in dsects when needed         CFK jan 2001*\n*   stop punching DSECTs when COM found                   CFK jan 2001*\n*   use standard entry/exit logic                         CFK apr 2001*\n*   *temp* mod for calls from DISYM                       CFK apr 2001*\n*   allow for imbedded short cards                        CFK may 2001*\n*   check symbol name does not start with space           CFK may 2001*\n*   correctly check if an entry is complete               CFK may 2001*\n*   put ESD ID onto listing                               CFK may 2001*\n*   Asm XF & Tachyon Cross Assembler put EQUates into SYM CFK jly 2001*\n*   Call PRINTP, not PRINT.                               CFK Dec 2003*\n*                                                                     *\n***********************************************************************\n         OUTLINE              output line                     CFK*DEC00\n*\nSYMCARD  DSECT                cols\n         DS    X'02'             1   constant\n         DS    C'SYM'          2-4   constant\n         DS    CL6             5-10  Blank\nSYMDLEN  DS    H              11-12  number of bytes of text in\nSYMDLEN1 EQU   SYMDLEN+1,1       12  variable field (columns 17-72)\n         DS    CL4            13-16  Blank\nSYMDATA  DS    CL56           17-72  Variable field (see below)\nSYMSEQNO DS    CL8            73-80  Deck ID, sequence number, or both.\nSYMESDID EQU   SYMSEQNO+2,2   74-75  ESD ID for this card     CFK*MAY01\n*   The deck ID is the name from the first TITLE statement that\n*   has a nonblank name field.  The name can be 1-to-8 characters.\n*   If the name is fewer than 8 characters or if there is no name,\n*   the remaining columns contain a record sequence number.\n*\n*   The variable field (columns 17-72) contains up to 56 bytes of\n*   TESTRAN text.  The items comprising the text are packed together;\n*   consequently, only the last record may contain less than 56 bytes\n*   of text in the variable field.  The formats of a text record and an\n*   individual text item are shown in Figure 71.  The contents of the\n*   fields within an individual entry are as follows:\n*\nSYMENTRY DSECT                map one entry\nSYMEFLG1 DS    X              flag byte\nSYMF1TYP EQU   B'10000000'      data type entry\nSYMF1NDT EQU   B'01110000'      mask for non data type\nSYMF1DS  EQU   B'00000000'      space (DS)               )\nSYMF1CSE EQU   B'00010000'      Control Section (CSECT)  ) If\nSYMF1DSE EQU   B'00100000'      Dummy Section (DSECT)    ) non\nSYMF1COM EQU   B'00110000'      Common                   ) data\nSYMF1INS EQU   B'01000000'      Instruction              ) type\nSYMF1CCW EQU   B'01010000'      CCW, CCW0, CCW1          )\nSYMF1EQU EQU   B'01100000'      EQUate                   )    CFK*JLY01\nSYMF1MAX EQU   B'01100000'      Max valid non data type  )    CFK*JLY01\nSYMF1MUL EQU   B'01000000'      multiplicity (M) field present ) If\nSYMF1CL  EQU   B'00100000'      cluster (PD or ZD)             ) data\nSYMF1SC  EQU   B'00010000'      scaling (S) field present      ) type\nSYMF1NM  EQU   B'00001000'      name not present if 1\nSYMF1NML EQU   B'00000111'      length of name-1 (mask for)\n* Organization (1 byte).  The possible values are shown below.\n* ZDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDD?\n* 3  Bits  3 Value                       3 Description                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    0   3 0                           3 Non-data type              3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Data type                  3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   1-3  3 000                         3 Space                      3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 001                         3 Control section            3\n* 3   non  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3  data  3 010                         3 Dummy control section      3\n* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 011                         3 Common                     3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 100                         3 Instruction                3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 101                         3 CCW, CCW0, CCW1            3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    1   3 0                           3 No multiplicity            3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 1                           3 Multiplicity               3\n* 3  data  3                             3 (indicates presence        3\n* 3  type  3                             3 of M Field)                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    2   3 0                           3 Independent                3\n* 3   If   3                             3 (not a packed or zoned     3\n* 3  data  3                             3 decimal constant)          3\n* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Cluster                    3\n* 3        3                             3 (packed or zoned           3\n* 3        3                             3 decimal constant)          3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    3   3 0                           3 No scaling                 3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 1                           3 Scaling                    3\n* 3  data  3                             3 (indicates presence        3\n* 3  type  3                             3 of S field)                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    4   3 0                           3 Name present               3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Name not present           3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   5-7  3                             3 Length of                  3\n* 3        3                             3 name minus 1               3\n* @DDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDY\n*\nSYMEADR  DS    XL3\n*       Address (3 bytes)--displacement from base of control section\n*\nSYMFLEN  EQU   *-SYMENTRY         length of fixed part\nSYMMINLN EQU  SYMFLEN      minimum length of an entry\n*\nSYMNAME  DS    C\n* Symbol Name (0-8 bytes)--symbolic name of particular item.  If the\n* entry is nondata type and space, an extra byte is present that\n* contains the number of bytes that have been skipped.\n*\nSYMENTR1 DSECT             only present if data type\nSYMTYPE  DS   X       Data Type (1 byte)--contents in hexadecimal\nSYMTCHAR EQU  X'00' = character                         C  2     1\nSYMTHEX  EQU  X'04' = hexadecimal or pure DBCS (G-type) X  2     1\nSYMTBIN  EQU  X'08' = binary                            B  2     1\nSYMTINV  EQU  X'0C' = ** this is not used **\nSYMTFULL EQU  X'10' = fixed point, full                 F  1  S  4\nSYMTHALF EQU  X'14' = fixed point, half                 H  1  S  2\nSYMTSHRT EQU  X'18' = floating point, short             E  1  S  4\nSYMTLONG EQU  X'1C' = floating point, long              D  1  S  8\nSYMTACON EQU  X'20' = A-type or Q-type data             A  1     4\nSYMTYCON EQU  X'24' = Y-type data                       Y  1     2\nSYMTSCON EQU  X'28' = S-type data                       S  1     2\nSYMTVCON EQU  X'2C' = V-type data                       V  1     4\nSYMTPACK EQU  X'30' = packed decimal                    P  1  S  1\nSYMTZONE EQU  X'34' = zoned decimal                     Z  1  S  1\nSYMTEXT  EQU  X'38' = floating point, extended          L  1    16\n*\nSYMENTLN DS   XL2\n*  5. Length (2 bytes for character, hexadecimal, decimal, or binary\n*     items; 1 byte for other types)--length of data item minus 1\n*\nSYMMULT  DS   XL3\n*   6.  Multiplicity-M field (3 bytes)--equals 1 if not present\n*\nSYMSCALE DS   XL2\n*   7.  Scale-signed integer-S field (2 bytes)--present only for F-,\n*       H-, E-, D-, P-, and Z-type data, and only if scale is nonzero.\n*\nSYMMAXLN EQU  *-SYMENTR1+SYMFLEN+1+8  maximum length of an entry\n*\n* ZDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD?\n* 3                                                                   3\n* 3   1     2 4 5  10 11   12 13 16 17                  72 73    80   3\n* 3  ZDDDDDBDDDBDDDDDBDDDDDDDBDDDDDBDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDD?  3\n* 3  3     3   3     3No. of 3     3                      3Deck Id 3  3\n* 3  3X'02'3SYM3Blank3bytes  3Blank3TESTRAN Text -        3and Seq.3  3\n* 3  3     3   3     3of text3     3 packed entries       3Number  3  3\n* 3  @DDDDDADDDADDDDDADDDDDDDADDDDDADDDDDDDDDDDDDDDDDDDDDDADDDDDDDDY  3\n* 3     1    3    6      2      4           56             8          3\n* 3                                                                   3\n* 3  TESTRAN Text                                                     3\n* 3                                                                   3\n* 3  ZDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDD?  3\n* 3  3  Entry     3     N Complete entries          3    Entry     3  3\n* 3  3(Complete or3          N >= 1                 3(Complete or  3  3\n* 3  3end portion)3                                 3head portion) 3  3\n* 3  @DDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDY  3\n* 3                 Variable size entries                             3\n* 3                                                                   3\n* 3  Entry                                                            3\n* 3                                                                   3\n* 3  ZDDDDBDDDDDDDBDDDDDDDDDDDBDDDDBDDDDDDBDDDDDDBDDDDD?              3\n* 3  3Org.3Address3Symbol name3Data3Length3Mult. 3Scale3              3\n* 3  3    3       3           3Type3      3Factor3     3              3\n* 3  @DDDDADDDDDDDADDDDDDDDDDDADDDDADDDDDDADDDDDDADDDDDY              3\n* 3    1      3      0-8       0-1   1-2     3      2                 3\n* 3                                                                   3\n* @DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDY\n*   Figure 71. TESTRAN SYM Record Format\n         EJECT\nLSYM     CSECT                                                CFK*APR01\n         ENTER                    entry logic                 CFK*APR01\n         USING OUTLINE,PA         map print area              CFK*APR01\n         USING SYMCARD,R1         tell assembler about parm\n         TM    FLAGS1,FL1ERROR    position lost ?             CFK*SEP00\n         BNO   Z00A               carry on if not             CFK*APR01\n         CLI   SYMDLEN1,56        full card of data ?         CFK*APR01\n         BE    Z90Z1              if so exit now              CFK*APR01\n         NI    FLAGS1,X'FF'-FL1ERROR  else reset error flag   CFK*APR01\n         MVC   WORKADR,=A(MAINBUF)    reset start pointer     CFK*APR01\n         B     Z90Z               and exit                    CFK*APR01\nZ00A     DS    0H                                             CFK*APR01\n         CLI   SYMDLEN1,X'00'     0 bytes text on this card ?\n         BE    Z90Z1              yes, exit\n         LA    R2,MAINBUF         get @ buffer\n         AH    R2,SYMDLEN         calc @ end of buffer\n         ST    R2,ENDADR          save @ end of buffer\n         MVC   MAINBUF,SYMDATA    copy input to buffer\n         UNPK  SAVESDID(5),SYMESDID(3)  unpack ESD ID +1 byte CFK*MAY01\n         TR    SAVESDID(4),TRTAB-240    make useful part hex  CFK*MAY01\n         DROP  R1                 done with input card\n         ST    R1,SAV@CARD        save @ input card           CFK*MAY01\n* start of main loop\nZ10A     DS    0H\n         L     R2,WORKADR         get @ SYM entry\n         USING SYMENTRY,R2        tell assembler\n         C     R2,ENDADR          do we have another entry ?  CFK*MAY01\n         BNL   Z90Z               exit if not                 CFK*MAY01\n         C     R2,=A(MINEND)      do we have enough for an entry ?\n         BH    Z90Z               exit if not\n         XR    R3,R3              clear length of entry\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?\n         BO    Z20A3              branch if so                CFK*JAN01\n         MVC   SVFLG1,SYMEFLG1    copy flags\n         NI    SVFLG1,SYMF1NDT    mask out non-data type\n         CLI   SVFLG1,SYMF1MAX    Valid non-data type ?       CFK*SEP00\n         BH    Z80ERR             no, we're lost !            CFK*SEP00\n         CLI   SVFLG1,SYMF1DSE    Dsect ?\n         BNE   Z20A1              br if not\n         OI    FLAGS1,FL1DSFND    remember we are in a DSECT\n         XC    CURRADR,CURRADR    and zero current address    CFK*JAN01\nZ20A1    DS    0H\n         CLI   SVFLG1,SYMF1COM    COM ?                       CFK*JAN01\n         BE    Z20A2              br if COM                   CFK*JAN01\n         CLI   SVFLG1,SYMF1CSE    Csect ?\n         BNE   Z20A3              br if not\nZ20A2    DS    0H                                             CFK*JAN01\n         NI    FLAGS1,X'FF'-FL1DSFND  remember we are not in a DSECT\n         XC    CURRADR,CURRADR    and zero current address    CFK*MAY01\n*        MVI   SAVATYPE,X'61'     tell SAVA we are a CSECT    CFK*SEP00\nZ20A3    DS    0H\n         TM    SYMEFLG1,SYMF1NM   is a name present\n         BO    Z20B               branch if not\n         CLI   SYMNAME,C' '       Valid name (not spaces) ?   CFK*MAY01\n         BE    Z80ERR             no, we're lost !            CFK*MAY01\n         MVC   SAVANAME,SPACES    clear output name           CFK*APR01\n         IC    R3,SYMEFLG1        get length\n         N     R3,=A(SYMF1NML)     of name - 1\n         EX    R3,MVC1            copy name to SAVA parms\n         LA    R3,1(R3)           add 1 to get full length\nZ20B     DS    0H\n         LA    R3,SYMMINLN(R2,R3) add minimum length to name length\n         C     R3,ENDADR          do we have the type field ?\n         BNL   Z90Z               exit if not\n         LR    R4,R3              copy @ type                 CFK*DEC00\n         USING SYMENTR1,R4        tell assembler              CFK*DEC00\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*AUG00\n         BO    Z20C               br. if so                   CFK*SEP00\n         CLI   SVFLG1,SYMF1DS     space ?                     CFK*SEP00\n         BNE   Z20F               br. if not (no type field)  CFK*SEP00\n         LA    R3,1(R3)           else allow for DS length    CFK*SEP00\n         B     Z20F               and carry on                CFK*SEP00\nZ20C     DS    0H                                             CFK*SEP00\n         TM    SYMTYPE,B'00000011' valid type (divisible by 4) ?\n         BNZ   Z80ERR             no - we're lost !           CFK*SEP00\n         CLI   SYMTYPE,SYMTEXT    larger than highest type ?\n         BH    Z80ERR             yes - we're lost !          CFK*SEP00\n         CLI   SYMTYPE,SYMTINV    invalid value ?             CFK*JAN01\n         BE    Z80ERR             yes - we're lost !          CFK*JAN01\n         CLI   SYMTYPE,SYMTBIN    2 byte length field ?\n         BH    Z20D2              br if one byte              CFK*JAN01\nZ20D1    DS    0H                 2 byte length field found\n         LA    R3,1(R3)           allow for 2nd byte\nZ20D2    DS    0H\n         LA    R3,2(R3)           allow for type and length fields\n         TM    SYMEFLG1,SYMF1MUL  M field present ?\n         BZ    Z20E               branch if not\n         LA    R3,L'SYMMULT(R3)   else add length of mult field\nZ20E     DS    0H\n         TM    SYMEFLG1,SYMF1SC   S field present ?\n         BZ    Z20F               branch if not\n         LA    R3,L'SYMSCALE(R3)  else add length of scale field\nZ20F     DS    0H\n         C     R3,ENDADR          do we have the whole entry ?\n         BH    Z90Z               exit if not                 CFK*MAY01\n         ST    R3,WORKADR         save @ next entry\n         AGO   .NOSAVA            process all sections        CFK*APR01\n         TM    FLAGS1,FL1DSFND    are we in a DSECT ?\n         BO    Z30A               skip entry if so            CFK*DEC00\n         TM    SYMEFLG1,SYMF1NM   is a name present\n         BO    Z10A               skip entry if not\n         MVC   SAVAADR,SYMEADR    copy address to SAVA parms\n         ST    R13,SAVAR13        put R13 where SAVA expects it\n         L     R14,ASAVA          get @ SAVA csect\n         CNOP  2,4                align parms correctly\n         BASR  R14,R14            call SAVA\nSAVATYPE DC    X'00'              input type\nSAVAADR  DC    XL3'000000'        input address\nSAVANAME DC    CL8' '             label or spaces\nSAVAR13  DC    F'0'               R13 loaded from here\n         L     R14,TX1415         reload r14\n         C     R3,ENDADR          do we have another entry ?\n         BNL   Z90Z               exit if not\n         B     Z10A               go to handle next entry\n.NOSAVA  ANOP                                                 CFK*APR01\n*\nZ30A     DS    0H       Print one line in a DSECT             CFK*DEC00\n*        L     R14,=A(PA)         get @ print area            CFK*DEC00\n*        USING OUTLINE,R14        tell assembler              CFK*DEC00\n         L     R10,CURRADR        get last address            CFK*JAN01\n         CLM   R10,B'0111',SYMEADR are we at next address ?   CFK*JAN01\n         BE    Z30B               branch if so                CFK*JAN01\n* we need to ORG to the next address                          CFK*JAN01\n         MVC   OUTINSTR(3),=C'ORG' instruction                CFK*JAN01\n         MVC   OUTOPER(2),=C'*+'  start of operand            CFK*JAN01\n         XR    R5,R5              clear work register         CFK*JAN01\n         ICM   R5,B'0111',SYMEADR get next address            CFK*JAN01\n         SR    R5,R10             calc difference             CFK*JAN01\n         BNM   Z30A1              is it negative ?            CFK*JAN01\n         MVI   OUTOPER+1,C'-'     if so tell assembler        CFK*JAN01\n         LPR   R5,R5              and make number positive    CFK*JAN01\nZ30A1    DS    0H                                             CFK*JAN01\n         MVC   OUTOPER+2(10),=X'40202020202020202120' mask    CFK*JAN01\n         CVD   R5,DWORK           make PD                     CFK*JAN01\n         LA    R1,OUTOPER+11      point R1 at last byte       CFK*JAN01\n         EDMK  OUTOPER+2(10),DWORK+3  make printable          CFK*JAN01\n         MVC   OUTOPER+2(10),0(R1) move down offset           CFK*JAN01\n         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03\n         LA    R1,PA              get @ print area            CFK*DEC03\n         BASR  R14,R15            output the ORG card         CFK*JAN01\n         ICM   R10,B'0111',SYMEADR now we are at new address  CFK*JAN01\nZ30B     DS    0H                                             CFK*JAN01\n* first, put address onto listing                             CFK*DEC00\n         UNPK  OUTLOC(7),SYMEADR(4)  make address hex         CFK*DEC00\n         TR    OUTLOC,TRTAB-240   make it printable           CFK*DEC00\n         MVI   OUTLOC+6,C' '      get rid of gash byte        CFK*DEC00\n* put name (could be spaces) onto listing                     CFK*DEC00\n         MVC   OUTLABEL,SAVANAME  copy name                   CFK*APR01\n         MVC   SAVANAME,SPACES    and clear it for next time  CFK*APR01\n* put ESD ID onto listing                                     CFK*MAY01\n         MVC   OUTINFO2(4),SAVESDID  copy ESD ID              CFK*MAY01\n* work out instruction field                                  CFK*DEC00\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*DEC00\n         BO    Z30C               branch if so                CFK*DEC00\n* process non data type entry                                 CFK*DEC00\n         XR    R5,R5              clear work register         CFK*DEC00\n         IC    R5,SVFLG1          get non-data type           CFK*DEC00\n         SRL   R5,4               move to low nybble          CFK*DEC00\n         MH    R5,=AL2(NDTTBELN)  mul by table entry length   CFK*DEC00\n         LA    R5,NDTTAB(R5)      get @ entry                 CFK*DEC00\n         MVC   OUTINSTR,0(R5)     copy non data type to o/p   CFK*DEC00\n         CLI   SVFLG1,SYMF1INS    instruction ?               CFK*JAN01\n         BNE   Z30B1              br. if not                  CFK*JAN01\n* process instruction                                         CFK*JAN01\n         MVC   OUTOPER(3),=C'XL2' assume 2 byte instruction   CFK*JAN01\n         MVC   OUTOPER+30(11),=C'Instruction' comment instr   CFK*JAN01\n         LA    R10,2(R10)         add assumed length to adr.  CFK*JAN01\n         B     Z30X               and print DS                CFK*DEC00\nZ30B1    DS    0H                                             CFK*JAN01\n         CLI   SVFLG1,SYMF1CCW    CCW ?                       CFK*JAN01\n         BNE   Z30B2              br. if not                  CFK*JAN01\n* process CCW                                                 CFK*JAN01\n         MVC   OUTOPER(7),=C'0,0,0,0'  add dummy operands     CFK*JAN01\n         LA    R10,8(R10)         add length to address       CFK*JAN01\n         B     Z30X               and print DS                CFK*DEC00\nZ30B2    DS    0H                                             CFK*JAN01\n         CLI   SVFLG1,SYMF1DS     space ?                     CFK*DEC00\n         BNE   Z30B3              br. if not                  CFK*JLY01\n* put DS length onto output                                   CFK*DEC00\n         XR    R5,R5              clear work register         CFK*DEC00\n         IC    R5,0(R4)           get length                  CFK*DEC00\n         AR    R10,R5             add to current address      CFK*JAN01\n         CVD   R5,DWORK           make PD                     CFK*DEC00\n         MVC   OUTOPER+1(4),=X'40202120' add EDit mask        CFK*DEC00\n         LA    R1,OUTOPER+4      prime R1                     CFK*DEC00\n         EDMK  OUTOPER+1(4),DWORK+6    make length printable  CFK*DEC00\n         MVC   OUTOPER(2),=C'XL' add XL                       CFK*DEC00\n         MVC   OUTOPER+2(3),0(R1) move down number            CFK*DEC00\n         MVC   OUTOPER+30(8),=C'Not Data'  comment non-data   CFK*DEC00\n         B     Z30X               and print DS                CFK*DEC00\nZ30B3    DS    0H                                             CFK*JLY01\n         CLI   SVFLG1,SYMF1EQU    EQUate ?                    CFK*JLY01\n         BNE   Z30X               br. if not                  CFK*JLY01\n* put EQU * onto output                                       CFK*JLY01\n         MVI   OUTOPER,C'*'       put * onto output           CFK*JLY01\n         B     Z30X               and print DS                CFK*JLY01\n* process data-type entry                                     CFK*DEC00\nZ30C     DS    0H                 data type entry found       CFK*DEC00\n         MVC   OUTINSTR(2),=C'DS' add DS                      CFK*DEC00\n         LA    R6,OUTOPER         get @ start of operand      CFK*DEC00\n* get length and @ mult/scale                                 CFK*DEC00\n         XR    R9,R9              clear work reg              CFK*DEC00\n         ICM   R9,B'0011',SYMENTLN assume 2 byte length       CFK*DEC00\n         LA    R7,SYMENTLN+2      get @ mult/scale if 2 byte  CFK*DEC00\n         CLI   SYMTYPE,SYMTBIN    is it 2 byte ?              CFK*DEC00\n         BNH   Z30C1              br if so                    CFK*DEC00\n         SRL   R9,8               else only want 1 byte       CFK*DEC00\n         BCTR  R7,0               and mult/scale is back 1    CFK*DEC00\nZ30C1    DS    0H                                             CFK*DEC00\n         LA    R9,1(R9)           calc actual length          CFK*JAN01\n         LR    R0,R9              save actual length          CFK*JAN01\n* check for multiplicity                                      CFK*DEC00\n         TM    SYMEFLG1,SYMF1MUL  is a multiplicity present ? CFK*DEC00\n         BZ    Z30D               br. if not                  CFK*DEC00\n* put multiplicity on output                                  CFK*DEC00\n         XR    R5,R5              clear work reg              CFK*DEC00\n         ICM   R5,B'0111',0(R7)   get multiplicity            CFK*DEC00\n         CVD   R5,DWORK           make length PD              CFK*DEC00\n         MVC   OUTOPER(9),=X'202020202020202120'  EDit mask   CFK*DEC00\n         LA    R1,OUTOPER+8       prime R1                    CFK*DEC00\n         EDMK  OUTOPER-1(10),DWORK+3    make mult printable   CFK*DEC00\n         MVC   OUTOPER(9),0(R1)   move down number            CFK*DEC00\n         SR    R6,R1              calc - number len           CFK*DEC00\n         LA    R6,OUTOPER+9(R6)   calc @ next o/p byte        CFK*JAN01\n         LA    R7,3(R7)           skip mult to get @ scale    CFK*DEC00\n         MR    R8,R5              mul length (R9) by mult (R5)CFK*JAN01\nZ30D     DS    0H       put type onto record                  CFK*DEC00\n         AR    R10,R9             add total len to curr. adr. CFK*JAN01\n         XR    R5,R5              clear work reg              CFK*DEC00\n         IC    R5,0(R4)           get data type               CFK*DEC00\n         SRL   R5,2               make it type number         CFK*DEC00\n         IC    R5,DTTAB(R5)       get character               CFK*DEC00\n         STC   R5,0(R6)           put into output             CFK*DEC00\n         LA    R6,1(R6)           and point at next byte      CFK*DEC00\n* put length onto record                                      CFK*DEC00\n         CVD   R0,DWORK           make length PD              CFK*DEC00\n         MVC   0(6,R6),=X'D32020202120'  EDit mask            CFK*DEC00\n         LA    R1,5(R6)           prime R1                    CFK*DEC00\n         EDMK  0(6,R6),DWORK+5    make mult printable         CFK*DEC00\n         MVC   1(6,R6),0(R1)      move down number            CFK*DEC00\nZ30X     DS    0H       output record                         CFK*DEC00\n         ST    R10,CURRADR        save adjusted address       CFK*JAN01\n         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03\n         LA    R1,PA              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*APR01\n         B     Z10A               and handle next entry       CFK*APR01\n*\nZ80ERR   DS    0H                 error exit                  CFK*SEP00\n         OI    FLAGS1,FL1ERROR    set position lost flag      CFK*SEP00\n         MVC   PA(L'MSG1),MSG1    copy error message          CFK*SEP00\n         L     R15,=V(PRINTA)     get @ print only routine    CFK*APR01\n         LA    R1,PA              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*APR00\n         B     Z90Z1              and exit                    CFK*SEP00\nZ90Z     DS    0H                 exit point\n         MVC   HEADBUF,TAILBUF    save tail (if present)\n         SH    R2,=AL2(L'MAINBUF) point @ tail\n         L     R1,SAV@CARD        reload @ input card         CFK*MAY01\n         USING SYMCARD,R1         tell assembler R1 is @ card CFK*MAY01\n         CLI   SYMDLEN1,L'MAINBUF full data card ?            CFK*MAY01\n         BE    Z90Z0              if so exit                  CFK*MAY01\n         LA    R2,MAINBUF         else reset data pointer     CFK*MAY01\nZ90Z0    DS    0H                                             CFK*MAY01\n         ST    R2,WORKADR         save pointer\nZ90Z1    DS    0H                 quick exit                  CFK*SEP00\n         LEAVE                    exit logic                  CFK*APR01\nMVC1     MVC   SAVANAME(1),SYMNAME  EXecuted instruction      CFK*APR01\n         DC    C'IMM='\n         LTORG\nSAVANAME DC    CL8' '             temp store for label        CFK*MAY01\nSPACES   DC    CL8' '             constant\nFLAGS1   DC    X'00'              flags\nFL1DSFND EQU   B'10000000'          Dsect found\nFL1ERROR EQU   B'01000000'          bad SYM rec or out of position\nMSG1     DC    C' ** Bad SYM record or position lost, remaining SYM carx\n               ds will be ignored **'\n* table of non-data type entries                              CFK*DEC00\nNDTTAB   DC    CL5'DS   '         space                       CFK*DEC00\nNDTTBELN EQU   *-NDTTAB           length of one entry         CFK*DEC00\n         DC    CL5'CSECT'         CSECT                       CFK*DEC00\n         DC    CL5'DSECT'         dummy section               CFK*DEC00\n         DC    CL5'COM  '         common (?)                  CFK*DEC00\n         DC    CL5'DS   '         instruction                 CFK*DEC00\n         DC    CL5'CCW  '         CCW, CCW0, CCW1             CFK*DEC00\n         DC    CL5'EQU  '         EQUate                      CFK*JLY01\n* table of data-types\nDTTAB    DC    C'C'  X'00' = character                         2     1\n         DC    C'X'  X'04' = hexadecimal or pure DBCS (G-type) 2     1\n         DC    C'B'  X'08' = binary                            2     1\n         DC    C'?'  X'0C' = **invalid** (should not occur)\n         DC    C'F'  X'10' = fixed point, full                 1  S  4\n         DC    C'H'  X'14' = fixed point, half                 1  S  2\n         DC    C'E'  X'18' = floating point, short             1  S  4\n         DC    C'D'  X'1C' = floating point, long              1  S  8\n         DC    C'A'  X'20' = A-type or Q-type data             1     4\n         DC    C'Y'  X'24' = Y-type data                       1     2\n         DC    C'S'  X'28' = S-type data                       1     2\n         DC    C'V'  X'2C' = V-type data                       1     4\n         DC    C'P'  X'30' = packed decimal                    2  S  1\n         DC    C'Z'  X'34' = zoned decimal                     2  S  1\n         DC    C'L'  X'38' = floating point, extended          1    16\n*\nCURRADR  DC    F'0'               current address in DSECT    CFK*JAN01\n*SAVA    DC    A(SAVA)            @ SAVA csect\nWORKADR  DC    A(MAINBUF)         @ current input\nTRTAB    DC    C'0123456789ABCDEF' translate to hexadecimal   CFK*DEC00\nSAVEAREA DS    18F                                            CFK*JAN04\nPA       DC    CL133' '           print area\nHEADBUF  DS    CL(SYMMAXLN)       buffer for head portion\nMAINBUF  DS    CL56               buffer for data on card\nBUFEND   EQU   *                  end of main buffer\nMINEND   EQU   BUFEND-SYMMINLN\nTAILBUF  EQU   BUFEND-SYMMAXLN,SYMMAXLN  tail entry\nDWORK    DS    D                  work area for CVD           CFK*DEC00\nTX1415   DS    2A                 save R14 and R15 here during calls\nENDADR   DS    A                  @ last entry on card\nSAV@CARD DS    A                  save @ input card           CFK*MAY01\nSVFLG1   DS    X                  space to manipulate flags\nSAVESDID DS    CL5                saved ESD ID in hex         CFK*MAY01\n         PRINT NOGEN\n         YREGS                    register equates\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAIN": {"ttr": 3588, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "MAIN     TITLE 'TEST PROGRAM FOR DISINF ROUTINE       AUG. 1, 1967 '\nMAIN     CSECT\n         EXTRN DISINF\n         STM   14,12,12(13)       **************\n         BALR  12,0               *            *\n         USING *,12               *  STANDARD  *\n         ST    13,SAVP+4          *   S/360    *\n         LR    11,13              *  LINKAGE   *\n         LA    13,SAVP\n         ST    13,8(11)           **************\n         LA    14,RTN        LOAD RETURN ADDR\n         L     15,ADIS\n         CNOP  2,4\n         BALR  1,15          CALL MDUMP\n         DC    A(MAIN)            ADDRESS\n         DC    A(MAIN+812)        PARAMETERS\nRTN      L     13,SAVP+4          **********\n         LM    14,12,12(13)       * RETURN *\n         BR    14                 **********\n         DS    0F\nADIS     DC    A(DISINF)\nSAVP     DS    18F           SAVE AREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OUTLINE": {"ttr": 3590, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          OUTLINE\n         OUTLINE                                                        OUTLINE\n*********************************************************************** OUTLINE\n*                                                                     * OUTLINE\n*  DSECT to map a line output to PRDD                                 * OUTLINE\n*                                                                     * OUTLINE\n*********************************************************************** OUTLINE\nOUTLINE  DSECT       offset,len  description                used by     OUTLINE\nOUTLCC   DS    C         +0,1  CC's                        PASS4, SPPR  OUTLINE\n         DS    C         +1,1  Blank                                    OUTLINE\nOUTLOC   DS    CL6       +2,6  location counter                  FTXTA  OUTLINE\n         DS    C         +8,1  Blank                                    OUTLINE\nOUTCONST DS    0CL8      +9    object code for constants ARL,CONST,SPPR OUTLINE\nOUTOBJ1  DS    CL2       +9,2  first two object code chars         PR   OUTLINE\n         DS    C        +11,1  Blank                                    OUTLINE\nOUTOBJ2  DS    CL2      +12,2  second two object code chars        PR   OUTLINE\n         DS    C        +14,1  Blank                                    OUTLINE\nOUTOBJ3  DS    C        +15,1  first object base reg               PR   OUTLINE\n         DS    C        +16,1  Blank                                    OUTLINE\nOUTOBJ4  DS    CL3      +17,3  first object displacement           PR   OUTLINE\n         DS    C        +20,1  Blank                                    OUTLINE\nOUTOBJ5  DS    C        +21,1  second object base reg              PR   OUTLINE\n         DS    C        +22,1  Blank                                    OUTLINE\nOUTOBJ6  DS    CL3      +23,3  Second object displacement          PR   OUTLINE\n         DS    CL4      +26,4  Blanks                                   OUTLINE\nOUTADDR1 DS    CL6      +30,6  first address                      ADDR  OUTLINE\n         DS    CL4      +36,4  Blanks                                   OUTLINE\nOUTADDR2 DS    CL6      +40,6  second address                     ADDR  OUTLINE\n         DS    CL1      +46,1  Blanks                                   OUTLINE\nOUTSTMT  DS    CL6      +47,6  Statement number                  PASS4  OUTLINE\n         DS    CL2      +53,2  Blanks                                   OUTLINE\nOUTCARD  DS    0CL80    +55    Punched card image                PUNCH  OUTLINE\nOUTLABEL DS    CL8      +55,8  Instruction label                 PASS4  OUTLINE\n         DS    C        +63,1  Blank                                    OUTLINE\nOUTINSTR DS    CL5      +64,5  Instruction Mnemonic    ARL,CONST,FTXTA, OUTLINE\n*                                                        PASS4,RR,SPPR  OUTLINE\n         DS    C        +69,1  Blank                                    OUTLINE\nOUTOPER  DS    CL20     +70,20 Operand       ARL,CONST,FLPT,FXPT,PASS4, OUTLINE\n*                                                  RR,RS,RX,SI,SPPR,SS  OUTLINE\n         DS    CL16     +90,16 Blanks                                   OUTLINE\nOUTINFOB DS    C       +106,1  flag to say if branching instr.    INFO  OUTLINE\nOUTINFOI DS    C       +107,1  flag to say if interruptable instr.INFO  OUTLINE\nOUTINFOP DS    C       +108,1  flag to say if privileged instr.   INFO  OUTLINE\nOUTINFOC DS    C       +109,1  flag to say if instr. sets CC      INFO  OUTLINE\n         DS    C       +110,1  Blank                                    OUTLINE\nOUTINFO1 DS    C       +111,1  * before char ver of instr.        INFO  OUTLINE\nOUTINFO2 DS    CL2     +112,2  1st 2 bytes of text                INFO  OUTLINE\nOUTINFO3 DS    CL2     +114,2  next 2 bytes or *                  INFO  OUTLINE\nOUTINFO4 DS    CL2     +116,2  last 2 bytes or *                  INFO  OUTLINE\nOUTINFO5 DS    C       +118,1  final * if needed                  INFO  OUTLINE\n         DS    CL16    +119,15 Blanks                                   OUTLINE\nOUTCRDLN EQU   *-OUTLINE       Total length of line (should be 134).    OUTLINE\n         MEND                                                           OUTLINE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS0": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x17\\x01\\x04\\x01O\\x01\\x04\\x01_\\x12Q\\x007\\x007\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-01-14T00:00:00", "modifydate": "2004-01-15T12:51:17", "lines": 55, "newlines": 55, "modlines": 0, "user": "U765139"}, "text": "PASS0    TITLE 'PASS 0, call other passes'\n***********************************************************************\n*                                                                     *\n*  This closes files and returns control to the system.               *\n*                                                                     *\n*  History:                                                           *\n*    Set return code to zero                             CFK Jan 2000 *\n*    FREEPOOL all DCBs                                   CFK Mar 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Free TXT buffers getmained by ESD0                  CFK May 2001 *\n*    Convert to standard linkage conventions             CFK Sep 2003 *\n*    Handle concatenated input object decks              CFK Dec 2003 *\n*                                                                     *\n***********************************************************************\nPASS0    CSECT\n         EXTRN PRDCB,RDDCB,PUDCB,DADCB\n         EXTRN NPROG,NENT,NEXT,NBR                            CFK*DEC03\n         ENTRY EXIT               reffed by READA csect\n         ENTER ,                  entry logic                 CFK*SEP03\nZ10A     DS    0H                                             CFK*DEC03\n         CALLS PASS1              call PASS 1                 CFK*SEP03\n         LTR   R15,R15            is it EOF ?                 CFK*JAN04\n         BNZ   EXIT               exit if so                  CFK*JAN04\n         CALLS PASS4              call PASS 4 to do 2nd pass  CFK*SEP03\n         CALLS PASS3              call PASS3                  CFK*SEP03\n         CALLS PASS4              call PASS4 to do 4th pass   CFK*SEP03\n         CALLS COUNT              call COUNT                  CFK*SEP03\n*\n         FREEMAIN RU,SP=1         free TXT and RLD buffers    CFK*DEC03\n*\n         LM    R2,R5,=A(NPROG,NENT,NEXT,NBR)  get @ counts    CFK*DEC03\n         XR    R0,R0                                          CFK*DEC03\n         ST    R0,0(R2)           zero number of csects       CFK*DEC03\n         ST    R0,0(R3)           zero number of ENTRYs       CFK*DEC03\n         ST    R0,0(R4)           zero number of EXTRNs       CFK*DEC03\n         XC    0(12,R5),0(R5)     zero RLD counts             CFK*DEC03\n         B     Z10A               and handle next object deck CFK*DEC03\nEXIT     DS    0H                                             CFK*JAN04\n         CLOSE (PRDCB,,RDDCB,,PUDCB,,DADCB)    close files\n         L     R1,=A(PRDCB)                                   CFK*MAR00\n         FREEPOOL (1)                          free buffers   CFK*MAR00\n         L     R1,=A(RDDCB)                                   CFK*MAR00\n         FREEPOOL (1)                          free buffers   CFK*MAR00\n         L     R1,=A(PUDCB)                                   CFK*MAR00\n         FREEPOOL (1)                          free buffers   CFK*MAR00\n         L     R1,=A(DADCB)                                   CFK*MAR00\n         FREEPOOL (1)                          free buffers   CFK*MAR00\n*\n         FREEMAIN RU,SP=2         free SAVA buffer            CFK*DEC03\n*\n         LEAVE ,                  exit logic                  CFK*SEP03\n         LTORG ,                  literal pool                CFK*SEP03\nSAVEAREA DC    18F'0'             save area                   CFK*SEP03\n         YREGS ,                                              CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS1": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x04\\x01_\\x01\\x04\\x01_\\x12F\\x00|\\x00|\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-15T00:00:00", "modifydate": "2004-01-15T12:46:14", "lines": 124, "newlines": 124, "modlines": 0, "user": "U765139"}, "text": "PASS1    TITLE 'PASS1'\n***********************************************************************\n*                                                                     *\n*  Called by PASS0                                                    *\n*                                                                     *\n*  This makes the first pass over the data, reading all the input and *\n*  passing it to the appropriate processing CSECT. Control cards      *\n*  starting with 'S', 'P' or 'R' are copied into COTR csect. When an  *\n*  END card is read in it returns to PASS0 to continue processing.    *\n*                                                                     *\n*  History:                                                           *\n*    Print control cards.                                CFK Apr 2000 *\n*    Set flag to not punch messages.                     CFK Jun 2000 *\n*    Pass SYM cards to SYM.                              CFK Aug 2000 *\n*    Use register equates.                               CFK Dec 2000 *\n*    Use standard linkage conventions.                   CFK Sep 2003 *\n*    Call PRINTA, not PRINT.                             CFK Oct 2003 *\n*    Tidy up calls to PRINTA.                            CFK Dec 2003 *\n*    Exit with RC 8 if EOF reached                       CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\nPASS1    CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY LCF                set by TXT when an END card is read\n         ENTRY PA                 Print Area used by most csects\n         ENTRY PAB                ref'ed by PASS4, RR, FTXTA and SPPR\n         ENTRY CARD               input card put here by READA\n         EXTRN PRINTA             csect                       CFK*OCT03\n         EXTRN ESD                csect\n         EXTRN TXT                csect\n         EXTRN RLD                csect\n         EXTRN SYM                csect                       CFK*AUG00\n         EXTRN END                in TXT csect\n         EXTRN COTR               csect\nINIT     MVC   PB+1(135),PB       INITIALIZE PROG\n         L     R3,ACOTR           get @ COTR csect\n         MVI   0(R3),X'00'        ) clear\n         MVC   1(14,R3),0(R3)     )  COTR\nSKIP     MVI   LCF,X'00'          clear END found flag\nREADP    CLI   LCF,X'FF'          has TXT found an END card\n         BE    BPASS              br. if so\nNRP      LA    R1,=A(CARD)        get @ input buffer         CFK*OCT03\n         CALLS READA              call READA to get nxt card CFK*SEP03\n         LTR   R15,R15            is it EOF ?                CFK*SEP03\n         BNZ   EOFRTN             exit if so                 CFK*JAN04\n         CLI   RFG,X'FF'          1st time through here ?\n         BE    NR                 br if not 1st time\n         L     R14,ACOTR          get @ COTR csect\n         MVI   0(R14),X'00'       put x'00' into COTR\n         CLI   CARD,C'S'          'S' card ?\n         BE    NPRT               br. if yes\n         CLI   CARD,C'P'          'P' card ?\n         BNE   NP                 br. if not\n         MVI   0(R14),X'01'       yes, put x'01' into COTR\n         MVI   RFG,X'FF'          flag not 1st time through\n         B     NPRT               and get next card\nNP       CLI   CARD,C'R'          'R' card ?\n         BNE   NR                 no - process as text card\n         MVI   0(R14),X'02'       yes, put x'02' into COTR\n         MVI   RFG,X'FF'          flag not 1st time through\nNPRT     MVC   1(14,R14),CARD+1   copy rest of card to COTR\n         MVC   PA(24),PARMMSG     copy message                CFK*APR00\n         MVC   PA+30(80),CARD     add card to message         CFK*APR00\n         B     CALLPRT            print message and continue  CFK*APR00\nNR       LM    R3,R5,TERC         get BXLE parms\n         MVI   RFG,X'FF'          flag not 1st time through\nCOM      CLC   CARD(4),0(R3)      DETERMINE TYPE\n         BE    TERE               OF CARD\n         BXLE  R3,R4,COM          try next entry\nTEER     MVC   PA(25),TERM        PRINT ERROR MESSAGE\n         MVC   PA+30(80),CARD     add card to error message\nCALLPRT  DS    0H                                             CFK*APR00\n         L     R15,APRINTA        get @ PRINTA csect          CFK*OCT03\n         LA    R1,PA              get @ parm                  CFK*DEC03\n         BALR  R14,R15            call PRINTA                 CFK*OCT03\n         B     READP              and get next card\n* an END card has been found\nBPASS    LEAVE ,                  return to PASS0             CFK*SEP03\n*\nEOFRTN   DS    0H                                             CFK*JAN04\n         L     R13,4(R13)         get @ caller's save area    CFK*JAN04\n         XC    8(4,R13),8(R13)    clear caller's HSA chain    CFK*JAN04\n         RETURN (14,12),,RC=8     return with RC 8            CFK*JAN04\n*\nTERE     S     R3,TERC            CALL ROUTINE TO\n         LA    R3,TXTA(R3)\n         L     R15,0(R3)          HANDLE CARD                 CFK*SEP03\n         LA    R1,ACARD                                       CFK*SEP03\n         BASR  R14,R15                                        CFK*SEP03\n         B     READP              and get next card\n         DC    C'IMM='\nACARD    DC    A(CARD)            @ input card\nTERC     DC    A(TXTC)            BXLE parms to search TXTC table\n         DC    F'4'                 length of table entry\n         DC    A(ENDC)              @ last entry\nTXTC     DC    X'02'              CARD TYPES, table scanned by BXLE\n         DC    C'TXT'             text\n         DC    X'02'\n         DC    C'ESD'             external symbol directory\n         DC    X'02'\n         DC    C'RLD'             relocation directory\n         DC    X'02'                                          CFK*AUG00\n         DC    C'SYM'             symbols for TEST            CFK*AUG00\nENDC     DC    X'02'\n         DC    C'END'             end of csect\nTXTA     DC    A(TXT)             HANDLING\n         DC    A(ESD)             ROUTINES\n         DC    A(RLD)\n         DC    A(SYM)                                         CFK*AUG00\n         DC    A(END)               (in TXT csect)\nAPRINTA  DC    A(PRINTA)          @ PRINTA csect              CFK*OCT03\nACOTR    DC    A(COTR)            @ COTR csect\nRFG      DC    F'0'               flag to ind. 1st time through\nTERM     DC    C'**  NON-RECOGNIZABLE CARD'\nPARMMSG  DC    C'**  Parameter card read:'                    CFK*APR00\nLCF      DC    X'00'              entry point, set by END when called\nCARD     DS    CL80               entry point, input card read by READ\n         DC    C'READ ERROR OCCURED. DISASSEMLE ERROR MAY OCCUR '\nPB       DC    C' '\nPA       DS    CL135              entry point, common print area\nPAB      DC    CL136' '           entry point, second print area\nSAVEAREA DS    18F                standard save area          CFK*SEP03\n         YREGS ,                  resgister equates           CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS3": {"ttr": 3597, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PAS3     TITLE 'PASS3'\n***********************************************************************\n*                                                                     *\n* Called by PASS4.                                                    *\n*                                                                     *\n* This module makes the third pass in the dissassembly. It sorts      *\n* the list of addresses found during the second pass and eliminates   *\n* duplicate entries.                                                  *\n*                                                                     *\n* History:                                                            *\n*   Map ENTRY table in ESD1.                             CFK Apr 2000 *\n*   Pass ENTRY name to SAVA.                             CFK Apr 2000 *\n*   Map saved address table in SAVA.                     CFK Apr 2000 *\n*   Put csect name into address table at +0.             CFK Apr 2000 *\n*   Sort reformatted saved address table and scrap       CFK Apr 2000 *\n*   table B, saved labels, they are in the address table.             *\n*   Code to del dup adresses allows for labels.          CFK Apr 2000 *\n*   Abend U13 if sort failed                             CFK Jly 2000 *\n*   Pass no. of addresses without dups to SAVA           CFK Jly 2000 *\n*   Use register equates for all reg use                 CFK Jly 2000 *\n*   Only add entry points for currect CSECT to table     CFK Dec 2001 *\n*   Don't put csect into table (now done by PASS4)       CFK Jan 2003 *\n*   Dynamic label table support.                         CFK Mar 2003 *\n*   Use standard linkage conventions                     CFK Sep 2003 *\n*   PUNCH now wants R1 @ card to punch.                  CFK Dec 2003 *\n*   Don't pass ENTRY names to SAVA.                      CFK Dec 2003 *\n*   Duplicate no. adrs. and @ adrs. in ART.              CFK Dec 2003 *\n*   Correctly set AST in SAVA.                           CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\n         ESDSDMAP                     map CSECT table in ESD0 CFK*APR00\n         ENTRYMAP                     map ENTRY table in ESD1 CFK*APR00\n         LABELMAP                     map adr. list in SAVA   CFK*APR00\nPASS3    CSECT\n         ENTER ,                      entry logic             CFK*SEP03\n         EXTRN COTR                   csect\n         EXTRN AST                    in SAVA csect\n         EXTRN NENT                   in ESD1 csect\n         EXTRN NAST                   in SAVA csect\n         EXTRN READA                  csect                   CFK*SEP03\n         EXTRN PUNCH                  csect\n         EXTRN PASS4                  csect\n         EXTRN NEL4                   in ART csect\n         EXTRN CURRSECT               csect being processed   CFK*APR00\n         L     R3,LOOP                get @ NAST in SAVA csect\n         LR    R4,R3                  copy @ NAST in SAVA csect\n         S     R4,FOUR                get @ NAST - 4\n         MVI   0(4),X'FF'             set SVK flag in SAVA\n         L     R10,4(R3)              get @ addresses         CFK*MAR03\n         L     R8,0(R3)               get number of addresses\n         ST    R8,NEL                 save no. of addresses   CFK*APR00\n         SH    R8,=H'1'               subtract 1              CFK*APR00\n         BNP   LPS4                   br if 1 or none         CFK*APR00\n* sort all addresses with a shell sort                        CFK*APR00\n* first calculate maximum step size                           CFK*APR00\n         LA    R3,1                   prepare index           CFK*APR00\n         LR    R4,R8                  copy no. of adr. - 1    CFK*APR00\n         SRA   R4,3                   divide by 8 for max step size R00\n         BZ    Z10B                   if < 8 adr. step size=1 CFK*APR00\nZ10A     DS    0H                                             CFK*APR00\n         MH    R3,=H'3'               multiply by 3           CFK*APR00\n         LA    R3,1(R3)               and add 1               CFK*APR00\n         CR    R3,R4                  until                   CFK*APR00\n         BL    Z10A                   r3 >= no. addresses/8   CFK*APR00\nZ10B     DS    0H                                             CFK*APR00\n* start of sort proper                                        CFK*APR00\n         MH    R3,=AL2(LABENTLN)      calc stride             CFK*APR00\nZ20A     DS    0H                     REPEAT                  CFK*APR00\n         XR    R4,R4                  FOR R4 = 0 TO R3 - 1    CFK*APR00\nZ30A     DS    0H                     ditto                   CFK*APR00\n         LR    R5,R8                  copy no. of adr. - 1    CFK*APR00\n         MH    R5,=AL2(LABENTLN)      calc offset to last ent CFK*MAY00\n         AR    R5,R10                 calc @ last entry       CFK*APR00\nZ35B     DS    0H                     REPEAT                  CFK*APR00\n         XR    R7,R7                  clear new limit         CFK*APR00\n         LA    R6,0(R4,R10)           calc @ first entry in this bank 0\n         USING LABELENT,R6            tell assembler          CFK*APR00\n         LA    R9,0(R3,R6)            calc @ next entry in this bank 00\nZ40A     DS    0H                     FOR R6 = R4 TO R5 STEP R3 K*APR00\n         CLC   LABKEY,LABKEY-LABELENT(R9)  are they in seq ?  CFK*APR00\n         BNH   Z50A                   already sorted.         CFK*APR00\n         MVC   TEP,LABELENT           )                       CFK*APR00\n         MVC   LABELENT,0(R9)         ) swap entries          CFK*APR00\n         DROP  R6                     )         (LABELENT)    CFK*APR00\n         USING LABELENT,R9            )                       CFK*APR00\n         MVC   LABELENT,TEP           )                       CFK*APR00\n         LR    R7,R6                  set new limit           CFK*APR00\nZ50A     DS    0H                                             CFK*APR00\n         AR    R6,R3                  bump pointer            CFK*APR00\n         AR    R9,R3                  bump other pointer      CFK*APR00\n         CR    R9,R5                  got to the end ?        CFK*APR00\n         BNH   Z40A                   NEXT R6 if not.         CFK*APR00\n         LTR   R5,R7                  copy new limit          CFK*APR00\n         BNZ   Z35B                   UNTIL no swaps done     CFK*APR00\n         AH    R4,=AL2(LABENTLN)      point @ next bank       CFK*APR00\n         CR    R4,R3                  done all banks ?        CFK*APR00\n         BL    Z30A                   do next bank if needed  CFK*APR00\n         SH    R3,=AL2(LABENTLN)      subtract 1 * entry size CFK*APR00\n         BZ    SORTDONE               have we just done 1 step size ? 0\n         XR    R2,R2                  clear high reg of r2,r3 CFK*APR00\n         D     R2,=F'3'               else divide by 3        CFK*APR00\n         B     Z20A                   and carry on.           CFK*APR00\n         DROP  R9                     done with LABELENT      CFK*APR00\n* finished main loop                                          CFK*APR00\nSORTDONE DS    0H                                             CFK*APR00\n         LR    R3,R8                  else get number of adr. - 1\n         LR    R5,R10                 get @ first address (output)\n         LA    R2,LABENTLN(R5)        get @ 2nd address (i/p) CFK*APR00\n         LA    R4,1                   start count of unique addresses\n* remove duplicate addresses\n         USING LABELENT,R5                                    CFK*APR00\nDLLP     CLC   LABCADR,LABCADR-LABELENT(R2)   duplicates ?    CFK*DEC03\n         BL    NOTDUP                 br if not duplicate entries\n         BH    SORTFAIL               out of order !! abend   CFK*APR00\n         CLI   LABNAME,C' '           1st name blank ?        CFK*APR00\n         BE    MOVEENT                if so drop 2nd entry on it *APR00\n         DROP  R5                     was LABELENT            CFK*APR00\n         USING LABELENT,R2                                    CFK*APR00\n         CLI   LABNAME,C' '           2nd name blank ?        CFK*APR00\n         BE    NOMOVE                 if so keep first        CFK*APR00\n         CLC   LABNAME,LABNAME-LABELENT(R5) the same name ?   CFK*APR00\n         BE    NOMOVE                 if so duplicates        CFK*APR00\n         BL    SORTFAIL               out of order !! abend   CFK*APR00\n         DROP  R2                     else keep both          CFK*APR00\nNOTDUP   DS    0H                                             CFK*APR00\n         LA    R4,1(R4)               bump unique adddress count\n         LA    R5,LABENTLN(R5)        get @ next output       CFK*APR00\n         CR    R5,R2                  addresses match ?       CFK*APR00\n         BE    NOMOVE                 if so don't move anything K*APR00\nMOVEENT  DS    0H                                             CFK*APR00\n         MVC   0(LABENTLN,R5),0(R2)   else shuffle down entry CFK*APR00\nNOMOVE   DS    0H                                             CFK*APR00\nNDL      LA    R2,LABENTLN(R2)        get @ next input        CFK*APR00\n         BCT   R3,DLLP                loop until all scanned\n* end of loop to remove duplicate addresses\nPSVV     ST    R4,NEL                 save number of unique addresses\n         L     R3,ASTA                get @ AST in SAVA csect CFK*JAN04\n         LA    R5,LABENTLN(R5)        get @ next output       CFK*JAN04\n         ST    R5,0(R3)               reset @ next free adr.  CFK*JAN04\n         L     R5,LOOP                get @ NAST in SAVA      CFK*JLY00\n         ST    R4,0(R5)               reset no. of addresses  CFK*JLY00\nLPS4     DS    0H                                             CFK*APR00\n         L     R4,NAV                 get @ NEL4 in ART csect CFK*APR00\n         ST    R10,4(R4)              copy @ addresses        CFK*DEC03\n         MVC   0(4,R4),NEL            copy no. of addresses   CFK*DEC03\n         MVC   8(8,R4),0(R4)          duplicate data in ART   CFK*DEC03\n         L     R4,NEL                 get number of addresses\n         LR    R5,R10                 get @ first address     CFK*APR00\n         USING LABELENT,R5            tell assembler          CFK*APR00\n         L     R3,SCOT                get @ COTR csect\n         CLI   0(R3),X'01'            'P' control card read ?\n         BNE   LPS5                   PUNCHED\n* start of loop to punch all labels\nPLP      DS    0H                     YES                     CFK*SEP03\n         MVC   ADPN(8),LABNAME        copy symbol if present  CFK*APR00\n         UNPK  ADPN+9(7),LABADR(4)    unpack address          CFK*SEP03\n         TR    ADPN+9(1),=C'ABCDEFGHIJKLMNOP'-240 make A-P    CFK*SEP03\n         TR    ADPN+10(5),=C'0123456789ABCDEF'-240 make hex   CFK*SEP03\n         MVI   ADPN+14,C' '           clear gash byte         CFK*SEP03\n         L     R15,APUN               get @ PUNCH csect       CFK*SEP03\n         LA    R1,ADPN                get @ PUNCH parms       CFK*DEC03\n         BASR  R14,R15                call PUNCH              CFK*SEP03\n         LA    R5,LABENTLN(R5)        get @ next address\n         BCT   R4,PLP                 punch next address if present\n* end of PLP loop\n         LA    R2,R2                  number of cards to punch\n         MVC   ADPN+9(6),BEND         copy C'END   '\n* start of loop to punch two cards\nRPEN     L     R15,APUN               get @ PUNCH csect       CFK*SEP03\n         LA    R1,ADPN                get @ PUNCH parms       CFK*DEC03\n         BASR  R14,R15                call PUNCH              CFK*SEP03\n         MVI   ADPN,C' '              ) clear ADPN\n         MVC   ADPN+1(79),ADPN        )  to spaces\n         BCT   R2,RPEN\n* end of RPEN loop\n         B     LPS6\nLPS5     L     R3,SCOT                get @ COTR csect\n         CLI   0(R3),X'02'            'R' control card read ?\n         BNE   LPS6                   READ                    CFK*APR00\n         L     R15,BREADA             YES - get @ READA csect CFK*SEP03\n         LA    R1,=A(ADPN)            get @ input buffer      CFK*SEP03\n         BASR  R14,R15                call READA              CFK*SEP03\n*  input card format is 8 byte label at +0 followed by 6 byte address\n* at +10.\n*  BCT loop to process cards starts here\nLPS8     DS    0H                                             CFK*SEP03\n         MVC   ABC+3(R1),0(R5)        copy this address\n         UNPK  CXR3(9),0(5,R5)        unpack address          CFK*SEP03\n         TR    CXR3(8),=C'0123456789ABCDEF'-240  make hex     CFK*SEP03\n         LA    R5,4(R5)               get @ next address\n         MVC   0(8,R6),BL48           blank out\n         L     R3,SCOT                get @ COTR csect\n         CLI   0(R3),X'02'            'R' control card read ?\n         BNE   LPS7                   br. if not\n         CLC   ADPN+10(5),CXR3+1      is card for this address?\n         BNE   LPS7                   br. if not\n         L     R3,ABC\n         LA    R3,193(R3)             add c'A'\n         STC   R3,ABC+3\n         CLC   ABC+3(R1),ADPN+9       does high byte match ?\n         BNE   LPS7                   br. if not\n         MVC   0(8,R6),ADPN           STORE SYMBOL IN\n         LA    R6,8(R6)               TABLE\n         L     R15,BREADA             get @ READA csect       CFK*SEP03\n         LA    R1,=A(ADPN)            get @ buffer for card   CFK*SEP03\n         BASR  R14,R15                call READA              CFK*SEP03\n         CLC   ADPN+9(R3),BEND        = c'END' ?\n         BNE   BLPS8                  br if not\n         CLI   ADPN,X'02'\n         BNE   BLPS8\n         L     R3,SCOT                get @ COTR csect\n         MVI   0(3),X'00'             clear 'R' control card flag\nBLPS8    BCT   R4,LPS8                br if more addresses to process\n         B     LPS6                   else exit loop\nLPS7     LA    R6,8(R6)               get @ next entry in B\n         BCT   R4,LPS8                loop if more addresses to process\n* end of loop to read cards\nLPS6     DS    0H                     exit point              CFK*SEP03\n         LEAVE                        return to PASS0         CFK*SEP03\nSORTFAIL DS    0H                     sorted rec out of order CFK*JLY00\n         ABEND 13,DUMP                take a dump             CFK*JLY00\n         DC    C'IMM='                start of data area\n         LTORG ,                                              CFK*SEP03\nBREADA   DC    A(READA)               @ READA csect           CFK*SEP03\nAPASS4   DC    A(PASS4)               @ PASS4 csect\nAPUN     DC    A(PUNCH)               @ PUNCH csect\nSCOT     DC    A(COTR)                @ COTR csect\nABC      DC    F'0'\nNENT3    DC    A(NENT)                @ NENT in ESD1\nACURRSEC DC    A(CURRSECT)            @ CURRSECT in ESD0      CFK*APR00\nTP33     DC    2F'0'                  temp store for reg. 3 and 4\nASTA     DC    A(AST)                 @ AST in SAVA csect\nNAV      DC    A(NEL4)                @ NEL4 in ART csect\nLOOP     DC    A(NAST)                @ NAST in SAVA csect\nFOUR     DC    F'4'                   constant\nNEL      DC    F'0'                   number of addresses\nTEP      DS    XL(LABENTLN)           used to swap label table entries\nBL48     DC    C'        '            constant 8 blanks\nBEND     DC    C'END     '\nCXR3     DS    XL9                    work area               CFK*SEP03\nADPN     DC    CL80' '                output card to be punched\nSAVEAREA DS    18F                                            CFK*SEP03\n         PRINT NOGEN                  switch off print        CFK*APR00\n         REGEQU                       register equates        CFK*APR00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS4": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00H\\x01\\x04\\x03o\\x01\\x04\\x06\\x9f\\x12I\\x03\\xd5\\x03\\xd2\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2004-02-05T00:00:00", "modifydate": "2004-03-09T12:49:48", "lines": 981, "newlines": 978, "modlines": 0, "user": "U765139"}, "text": "PAS4     TITLE 'PASS4 '\n***********************************************************************\n*                                                                     *\n*  Called by PASS0.                                                   *\n*                                                                     *\n*  This makes two passes over the data, the 2nd and 4th. It is        *\n*  called twice by PASS0, once before PASS3 is called and once after  *\n*  PASS3 is called.                                                   *\n*                                                                     *\n* History:                                                            *\n*   Fix bug printing the equate table at end of output.   CFK Apr 1999*\n*   Handle weak external references (WXTRNs).             CFK May 1999*\n*   Map ESD section list in ESD0.                         CFK Jan 2000*\n*   Handle RSECTs.                                        CFK Jan 2000*\n*   Generate AMODE and RMODE statements if needed.        CFK Jan 2000*\n*   Map output line with OUTLINE macro.                   CFK Feb 2000*\n*   Csect name is now set as the first address, so don't  CFK May 2000*\n*   put it onto the output as a label.                                *\n*   Generate trailing DS to make module its full length.  CFK Jly 2000*\n*   Generate EQUates inline. This also allows for two     CFK Sep 2000*\n*   labels at the same location.                                      *\n*   Use equates for all registers                         CFK Oct 2000*\n*   TXT pointers moved to ESD descriptor                  CFK May 2001*\n*   Allow for csects with no TXT by pointing ROUT4 (@     CFK Jun 2001*\n*   format routine) at EOF routine (CKEN)                             *\n*   Put the address an EQUate points to into ADDR2        CFK Aug 2001*\n*   Put comment on trailing DSes                          CFK Sep 2001*\n*   Exit if no sections found                             CFK Oct 2001*\n*   Support multiple csect object decks                   CFK Nov 2001*\n*   1: Loop back if more csects to process                CFK Nov 2001*\n*   2: Get csect name via CURRSECT                        CFK Dec 2001*\n*   3: Don't put entry point on END card                  CFK Dec 2001*\n*   Correctly print ENTRY statements                      CFK Dec 2002*\n*   Don't zero NEXT to indicate EXTRNs printed            CFK Dec 2002*\n*   Must process all csects in each pass                  CFK Jan 2003*\n*   Generate COMmon area length correctly.                CFK May 2003*\n*   Generate DXDs when needed.                            CFK May 2003*\n*   Generate Dsect instead of DXD if PR aligned.          CFK Jun 2003*\n*   Use standard linkage conventions.                     CFK Sep 2003*\n*   Call format routines with standard linkage.           CFK Nov 2003*\n*   Call PRINTP to print and punch records.               CFK Dec 2003*\n*   Pass current section name to SAVA.                    CFK Dec 2003*\n*   Pass ENTRYs in current section to SAVA.               CFK Dec 2003*\n*   Reset label pointers in ART at start of each csect.   CFK Jan 2004*\n*   Clear EXTRNs printed flag during exit.                CFK Jan 2004*\n*                                                                     *\n***********************************************************************\n         ESDSDMAP                 entry in list of sections in ESD0\n         ENTRYMAP                 ENTRY point descriptor      CFK*DEC01\n         EXTRNMAP                 entry in list of EXTRNs in ESD2\n         OUTLINE                  map output line             CFK*FEB00\nPASS4    CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY ADA                next address, ref'ed by CONST\n         EXTRN SPPR               csect\n         EXTRN ASAVSECT           in SPPR csect               CFK*DEC03\n         EXTRN PLCB               in SPPR csect\n         EXTRN PRINTA             csect                       CFK*SEP03\n         EXTRN FTXTA              csect                       CFK*SEP03\n         EXTRN ART                csect\n         EXTRN ARTCSECT           in ART csect                CFK*DEC03\n         EXTRN NEL4               in ART csect                CFK*JAN04\n         EXTRN CDN                csect\n         EXTRN LCOM               in ESD5 csect\n         EXTRN NPROG              in ESD0 csect               CFK*JAN00\n         EXTRN CURRSECT           in ESD0, @ current section  CFK*JLY00\n         EXTRN LCT                in PRINTA csect\n         EXTRN ENDA               in TXT csect\n         EXTRN USING              csect\n         EXTRN PA                 in PASS1 csect\n         EXTRN PAB                in PASS1 csect\n         EXTRN NEXT               in ESD2 csect\n         EXTRN NENT               in ESD1 csect\n         EXTRN CONST              csect\n         EXTRN SAVA               csect\n         EXTRN SVK                in SAVA csect               CFK*DEC03\n         EXTRN SAVASEC1           in ADDR csect               CFK*DEC03\n         EXTRN BCV                csect\n         EXTRN COTR               csect\n         EXTRN SBCZ               in ARL csect\n         EXTRN DECOMP             csect\n         EXTRN ARL                csect\n         ST    R15,PAR+20         put our base reg in parms to DECOMP\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*FEB03\n         MVC   NUMSECT,0(R14)     get number of sections      CFK*FEB03\n         L     R3,ACURRSEC        get @ current section ptr   CFK*FEB03\n         LA    R14,4(R14)         get @ first section         CFK*FEB03\n         ST    R14,0(R3)          set CURRSECT to @ first     CFK*FEB03\nZ10A     DS    0H       loop back here if multiple csects     CFK*NOV01\n         MVI   KEY4+3,X'00'       )       ind. not end of last card\n         MVI   SIN,X'00'          ) clear work\n         MVI   SKY,X'00'          )  areas\n         MVI   LEN4+2,X'00'       )\n         L     R3,COTR4           get @ COTR csect\n         CLI   1(R3),C'D'         'D' in control card ?\n         BNE   BCR                br if not\n         MVI   PAS45,X'00'        else flag 2nd use of PASS4\nBCR      BCR   0,0\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         MVI   OUTLCC,C' '        clear\n         MVC   OUTLCC+1(134),OUTLCC print area\n         DROP  R3                 was OUTLINE                 CFK*FEB00\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVI   0(R3),C' '         clear\n         MVC   1(134,R3),0(R3)     PAB\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*OCT01\n         ICM   R14,B'1111',0(R14) get number of sections      CFK*OCT01\n         BZ    Z99X               exit if no sections         CFK*OCT01\n* put csect name into address table\n         L     R9,ACURRSEC        get @ current section ptr   CFK*JAN03\n         L     R9,0(R9)           get @ current ESD entry     CFK*JAN03\n         USING ESDSDMAP,R9        tell assembler              CFK*JAN03\n         MVC   SAVASECT,ESDNAME   pass csect name to SAVA     CFK*DEC03\n         L     R1,=A(SAVASEC1)    get @ SAVA prm in ADDR      CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ARTCSECT)    get @ current csect in ART  CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ASAVSECT)    get @ current csect in SPPR CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         CLI   ESDNAME,C' '       private code ?              CFK*JAN03\n         BE    PRIVCODE           if so don't call SAVA       CFK*JAN03\n         MVI   SAVTYPE,X'61'      type=csect                  CFK*SEP03\n         MVC   SAVADR,ESDADR3     csect address               CFK*SEP03\n         MVC   SAVNAME,ESDNAME    pass csect name to SAVA     CFK*SEP03\n         L     R15,ASAVC          get @ SAVA csect            CFK*SEP03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*SEP03\n         BASR  R14,R15            call SAVA                   CFK*SEP03\nPRIVCODE DS    0H                                             CFK*JAN03\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    Z20A               br. if not                  CFK*JAN04\n* 4th pass only code\n         L     R1,=A(NEL4)        get @ label pointers in ART CFK*JAN04\n         MVC   0(8,R1),8(R1)      reset label pointers        CFK*JAN04\n         MVC   ADA(4),ZZ4         reset ART output            CFK*JAN04\n         MVI   ADALABEL,C' '      reset ART output            CFK*MAR04\n         MVI   PAC,C' '           ) clear                     CFK*JAN04\n         MVC   PAC+1(L'PAC-1),PAC )  output buffer            CFK*JAN04\n         L     R2,=A(PA)          YES       get @ PA in PASS1 CFK*SEP03\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R4,ALCT4           START A      get @ LCT in PRINTA\n         MVC   0(4,R4),FF94       NEW PAGE\n         MVC   OUTINSTR(5),CSECT  PRINT CSECTS\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIRO     is this a RSECT ?           CFK*JAN00\n         BZ    NOTRSECT           br. if not                  CFK*JAN00\n         MVI   OUTINSTR,C'R'      else change CSECT to RSECT  CFK*JAN00\nNOTRSECT DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* generate RMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIRANY   is it RMODE ANY ?           CFK*JAN00\n         BZ    NOTRMANY           branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),RMODEANY  copy c'RMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOTRMANY DS    0H                                             CFK*JAN00\n* generate AMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIA31    is it AMODE 31 or ANY ?     CFK*JAN00\n         BNO   NOAMODE            branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),AMODEANY  copy c'AMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIAANY   is it AMODE ANY ?           CFK*JAN00\n         BO    AMODEOK            branch if so                CFK*JAN00\n         MVC   OUTOPER(3),=C'31 ' else make it AMODE 31       CFK*JAN00\nAMODEOK  DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTA csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOAMODE  DS    0H                                             CFK*JAN00\n* print the ENTRY statements at the start of the listing\n         L     R3,NENT4           get @ NENT in ESD1 csect\n         LA    R4,4(R3)           get @ first entry           CFK*DEC02\n         L     R3,0(R3)           get NENT, number of entries\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC01\n         SR    R5,R5\n         CR    R5,R3              any entries to print\n         BE    NEN                br if not\nESDL1    CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC01\n         BNE   NXTENTRY           try next if not             CFK*DEC01\n         MVC   OUTOPER(8),ENTNAME PRINT ENTRIES\n         MVC   OUTINSTR,ENTRY     copy c'ENTRY'\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNXTENTRY DS    0H                                             CFK*DEC02\n         LA    R4,ENTELEN(R4)     get @ next ENTRY slot       CFK*DEC02\n         BCT   R3,ESDL1           br if more entries to print\n         DROP  R4                 tell asm done with ENTRYMAP CFK*DEC01\nNEN      DS    0H                                             CFK*DEC02\n* print the EXTRN statements at the start of the listing if necessary\n         CLI   EXTPRTD,X'FF'      EXTRNs printed ?            CFK*DEC02\n         BE    NEXN               Yes, don't print again      CFK*DEC02\n         MVI   EXTPRTD,X'FF'      No, flag not to print again CFK*DEC02\n         L     R5,NEXT4           get @ NEXT in ESD2 csect    CFK*DEC01\n         LA    R4,4(R5)           get @ 1st EXTRN             CFK*DEC01\n         USING EXTRNMAP,R4        tell assembler\n         L     R3,0(R5)           get NEXT, number of EXTRNS/WXTRNS  01\n         LTR   R3,R3              any EXTRNS to print ?       CFK*DEC01\n         BZ    NEXN               br if not\nESDL2    CLI   EXTTYPE,EXTTCM     Is it a Common area ?       CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\n         CLI   EXTTYPE,EXTTPR     is it a Pseudo Register ?   CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\nREX      MVC   OUTOPER(8),EXTNAME copy name referenced\n         MVC   OUTINSTR,EXTRN     PRINT EXTRNS\n         CLI   EXTTYPE,EXTTWX     weak external reference ?   CFK*MAY99\n         BNE   NOTWEAK            branch if not               CFK*MAY99\n         MVI   OUTINSTR,C'W'      else change EXTRN to WXTRN  CFK*MAY99\nNOTWEAK  DS    0H                                             CFK*MAY99\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXB     LA    R4,EXTNEXT         get @ next EXTRN slot\n         BCT   R3,ESDL2           br if more EXTRNs to print\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\n         B     NEXN               skip 2nd pass code          CFK*DEC03\n* 2nd pass only code                                          CFK*DEC03\n* put this csects entry points into the address table in SAVA CFK*DEC03\nZ20A     DS    0H                                             CFK*DEC03\n         L     R3,NENT4           get @ NENT in ESD1          CFK*DEC03\n         LA    R4,4(R3)           else get @ 1st ENTRY's adr. CFK*DEC03\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC03\n         ICM   R3,B'1111',0(R3)   get number of entries       CFK*DEC03\n         BZ    NEXN               if no entries skip loop     CFK*JAN04\n* start of loop to pass entry points to SAVA                  CFK*DEC03\nZ20B     DS    0H                                             CFK*DEC03\n         CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC03\n         BNE   Z20C               skip entry if not           CFK*DEC03\n         MVC   SAVADR,ENTADR      pass ENTRY adr to SAVA      CFK*DEC03\n         MVC   SAVNAME,ENTNAME    pass ENTRY name to SAVA     CFK*DEC03\n         MVI   SAVTYPE,X'60'      ind. type of address        CFK*DEC03\n         L     R15,ASAVC          get @ SAVA csect            CFK*DEC03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*DEC03\n         BASR  R14,R15            call SAVA                   CFK*DEC03\nZ20C     DS    0H                                             CFK*DEC03\n         LA    R4,ENTELEN(R4)     get @ next ENTRY            CFK*DEC03\n         BCT   R3,Z20B            br if more to process       CFK*DEC03\n         DROP  R4                 done with ENTRYMAP          CFK*DEC03\n* end of loop to pass entry points to SAVA                    CFK*DEC03\n* 2nd and 4th pass code\nNEXN     LA    R2,15              DROP USING TABLR\n         SR    R3,R3              clear\n         ST    R3,LNCT             line count\nUSLP     LA    R3,16(R3)\n         STM   R2,R3,DRT          save work registers\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         XC    USINGPRM,USINGPRM  clear USING parms           CFK*SEP03\n         STC   R3,USINGPRM+2      tell using to drop this reg CFK*SEP03\n         LA    R1,USINGPRM        get @ parms for USING       CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction (register)\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         LM    R2,R3,DRT          reload work registers\n         BCT   R2,USLP            br if more registers to drop\n         MVC   PLC(4),ZZ4         ) zero\n         MVC   FORHF(4),ZZ4       )  all\n         MVC   FFC(4),ZZ4         )   these\n         MVC   ACT(4),ZZ4         )    fields\n         MVI   COBRG+3,X'30'\n         MVC   FFAD(4),ZZ4        ) zero some\n         MVC   COBF(4),ZZ4        )  more fields\n         MVC   XSX(4),NXSX        copy f'60'\n         MVC   USINGPRM+4(3),ZZ4  ) zero USING parms          CFK*SEP03\n         MVI   FFC,X'FF'\n         L     R9,ACURRSEC        get @ current section ptr.  CFK*MAY01\n         L     R9,0(R9)           get @ current section desc. CFK*MAY01\n         USING ESDSDMAP,R9        tell asembler               CFK*MAY01\n         L     R3,ESDCBUF         get @ TXT header            CFK*MAY01\n         MVC   USINGPRM+4(3),0(R3)  copy 1st TXT adr to USING parms P03\n         L     R3,AENDA           get @ ENDA in TXT csect\n         L     R4,COTR4           get @ COTR csect\n         CLI   7(R4),C'A'         'A' in control card ?\n         BNE   NAS                br. if not\n         MVI   FFC+1,X'FF'\n         CLI   0(R3),C' '         end address blank ?\n         BE    PFT                br if yes\n         MVI   USINGPRM,X'01'     else flag insert call       CFK*SEP03\n         MVC   USINGPRM+4(3),0(R3)  copy to USING parms       CFK*SEP03\n         B     PFT\nNAS      CLC   0(3,R3),ZZ4        end address zero ? (but why check ?)\n         CLC   0(3,R3),FT08       end address x'000008' ?\n         BE    TFTR               br. if yes\n         CLI   0(R3),C' '         end address blank ?\n         BE    TFTR               br. if yes\n         MVC   FFAD+1(3),0(R3)    copy end address\n         L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         CLI   0(R3),X'90'        input starts with STM ?\n         BE    NFT                br. if yes\n         CLI   0(R3),X'05'        input starts with BALR ?\n         BE    NFT                br. if yes\n         MVI   PLC+1,X'FF'\n         MVI   KEY4+3,X'02'\n         CLC   16(2,R3),FEH       = x'9847' (LM 4,7, ...) ?\n         BE    TFTR               br. if equal\n         CLI   0(R3),X'47'        input starts with BC ?\n         BE    LFTXTB             br. if yes\n         MVI   COBF,X'01'         else set flag\n         B     LFTXTB\nTFTR     L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         MVI   USINGPRM+6,X'08'   ) update USING              CFK*SEP03\n         MVC   B15(4),ZZ4         )  parms\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\n         LA    R3,4(R3)           get @ next instr.\n         DROP  R9                 was ESDSDMAP                CFK*MAY01\n         L     R9,XSX             )\n         LA    R9,8(R9)           ) bump up XSX\n         ST    R9,XSX             )\n         MVI   USINGPRM+6,X'00'   update USING parms          CFK*SEP03\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\nNFT      MVI   FFC+1,X'FF'\n         MVI   USINGPRM,X'01'     flag insert call to USING   CFK*SEP03\n         MVI   FORHF,X'FF'\n         B     LFTXTB\nPFT      MVI   USINGPRM+7,X'01'   tell USING to insert this reg K*SEP03\n         MVI   USINGPRM+2,X'F0'   set reg to insert to 15     CFK*SEP03\n         ST    R3,BRT             save @ next instruction\n         BAL   R9,USST            Call USST to generate USING card\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         LA    R1,USINGPRM        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         L     R3,BRT             reload @ next instruction\n         CLI   FFC+1,X'FF'\n         BE    LFTXTB\n         MVI   FFC,X'00'\n         MVI   FORHF,X'FF'\n         MVI   PLC+1,X'FF'        YES\n         CLI   16(R3),X'58'\n         BNE   NLS7\n         MVC   FFAD+2(2),18(R3)   FIRST EXEC ADDRESS\n         NI    FFAD+2,X'0F'\n         L     R5,B15\n         A     R5,FFAD\n         LA    R3,4(R3)\n         S     R5,XSX\n         SRL   R5,2\n         ST    R5,B15\n         LTR   R5,R5\n         BC    12,NLS7\n         B     NLS8\nNLS7     MVC   B15(4),ZZ4         set B15 to zero\nNLS8     MVC   FFAD+2(2),18(R3)\n         NI    FFAD+2,X'0F'\n         MVI   KEY4+3,X'02'       SET CONSTANT MODE\n         MVC   COBRG+3(1),18(R3)\n         NI    COBRG+3,X'F0'\n         MVC   COBA(4),ZZ4\n         L     R5,ALCOM4          get @ LCOM in ESD5 csect\n         L     R5,0(R5)           get common length\n         LA    R5,4095(R5)\n         SR    R4,R4              clear high reg. of pair\n         D     R4,F100            divide by 4096\n         L     R6,B15\n         SR    R6,R5              subtract number of common pages\n         ST    R6,B15\n         LA    R5,3(R5)\n         SLL   R5,4               multiply by 4\n         ST    R5,COBR\n* start of a loop\nLNNP     L     R5,COBR\n         LA    R5,16(R5)\n         ST    R5,COBR\n         STC   R5,USINGPRM+2        put reg. no. into USING prms *SEP03\n         CLC   COBR+3(1),COBRG+3\n         BNE   OREG\n         L     R7,B15\n         C     R7,ZZ4\n         BNH   OREG\n         M     R6,F100           mul by 4096\n         ST    R7,COBA\nOREG     MVC   USINGPRM+4(3),COBA+1 set current adr passed to USING P03\n         L     R4,COBA\n         A     R4,F100           add 4096\n         ST    R4,COBA\n         BAL   R9,USST           call USST to generate USING card\n         B     LUS4              and br. round subroutine\n* subroutine to generate USING card\nUSST     ST    R9,AFTA           save return address\n         XC    REGT(3),REGT      clear BCV parms\n         MVC   REGT+3(1),USINGPRM+2 pass register no. to BCV  CFK*SEP03\n         MVC   SAVADR,USINGPRM+4    pass adr. to SAVA csect   CFK*SEP03\n         MVI   SAVTYPE,X'60'     ind. type of address\n         MVC   SAVNAME,SPACES    clear label                  CFK*APR00\n         L     R15,ASAVC         get @ SAVA csect             CFK*SEP03\n         LA    R1,SAVPARMS       get @ parms                  CFK*SEP03\n         BASR  R14,R15           call SAVA                    CFK*SEP03\n         L     R14,BCV4          get @ BCV csect\n         ST    R13,REGT+4        put R13 where BCV expects it CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14           call BCV\nREGT     DC    F'0'\n         DC    F'0'              R13 (re)loaded from here\n         L     R4,=A(PA)         get @ PA in PASS1 csect      CFK*SEP03\n         USING OUTLINE,R4        tell assembler               CFK*FEB00\n         MVC   OUTOPER(8),SAVOUTLB copy name of this address  CFK*APR00\n         MVC   OUTINSTR(6),USI4  copy c'USING '\n         LA    R5,7              max label length - min label length\n         LA    R3,OUTOPER+7      get @ end of label\nCEC      CLI   0(R3),C' '        space ?\n         BNE   INSC              no, found end of label\n         BCTR  R3,0              else take 1 off ptr\n         BCT   R5,CEC            and loop if more to check\nINSC     MVI   1(R3),C','        put , after label\n         MVC   2(2,R3),REGT      copy register number\n         CLI   PAS45,X'FF'       2nd use of PASS4 ?\n         BE    NPCB              br. if not\n* 4th pass only code\n         L     R15,=V(PRINTP)    get @ PRINTP csect           CFK*DEC03\n         LR    R1,R4             get @ print area             CFK*DEC03\n         BASR  R14,R15           call PRINTP                  CFK*SEP03\n* 2nd and 4th pass code\nNPCB     L     R9,AFTA           reload return address\n         BR    R9                and return\n         DROP  R4                tell asm done with OUTLINE   CFK*FEB00\n* end of USST subroutine\nLUS4     L     R15,US4           get @ USING csect            CFK*SEP03\n         MVI   USINGPRM,X'01'    ind. insert call             CFK*SEP03\n         MVI   USINGPRM+7,X'01'                               CFK*SEP03\n         LA    R1,USINGPRM       get @ parms for USING        CFK*SEP03\n         BASR  R14,R15           call USING                   CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         CLC   COBR+3(1),COBRG+3\n         BL    LNNP               loop back\n* end of first big loop\n         L     R4,COBA\n         S     R4,F100            subtract 4096\n         A     R4,FFAD\n         ST    R4,FFAD\nLFTXTB   L     R14,APLCB          get @ PLCB in SPPR csect\n         MVC   4(36,R14),PLC      copy our PLC into SPPRs PLC\n* start of main loop\nLFTXT4   L     R15,AFTXTA         FETCH TEXT, get @ FTXTA     CFK*SEP03\n         CLI   SKY,X'01'          end of TXT ?\n         BE    CKEN               br. if yes\n         MVC   SKY(1),KEY4+3      copy eof flag\n         CLI   LEN4+2,X'FF'\n         LA    R1,FTXTAPRM        get @ FTXTA parms           CFK*OCT03\n         BNE   BALRF\n         MVI   KEY4+3,X'02'\nBALRF    BASR  R14,R15            call FTXTA                  CFK*SEP03\n         CLI   KEY4+3,X'01'       end of last card ?\n         BNE   NSKY               br. if not\n         MVI   SKY,X'01'          else flag end of TXT\nNSKY     MVC   KEY4+3(1),SKY\n         BAL   R9,AFT             call AFT subroutine\n         B     CKK2               branch round subroutine\n***********************************************************************\n* Subroutine to put the address on the output if necessary            *\n*                                                                     *\n* Uses R3, R4, R5, R9, R14 + regs used by PRINT (R12), ART (R3 and R4)*\n*                                                                     *\n***********************************************************************\nAFT      ST    R9,AFTA            save return address\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4\n         BE    CKK                return if not\n* 4th pass only code\n         LA    R9,PAC             get @ output buffer         CFK*SEP00\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLC   ADA(4),ZZ4         is ADA zero ?\n         BE    FXN                br. if so (ART not called yet)\nCFF      CLI   ADA,X'FF'          any known addresses left ?\n         BE    CKK                go to return if not\n         CLI   ADA,X'61'          is it a CSECT ?             CFK*MAY00\n         BE    FXN                br. if so (already printed) CFK*MAY00\n         CLC   LOC3,ADAADR        current adr. = this adr. ?  CFK*MAY00\n         BE    XNA                yes - go print it\n         BL    CKK                we're not there yet, return to caller\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put -n onto output                                          CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R3,R5              calc difference             CFK*SEP00\n         CVD   R3,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+1(9),=X'604020202020202120' - and EDit mask EP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n* put address onto output                                     CFK*SEP00\nXNA      DS    0H                                             CFK*SEP00\n         MVC   OUTLABEL,ADALABEL  else copy label             CFK*SEP00\n* get next address                                            CFK*SEP00\nFXN      L     R15,BART           FETCH NEXT ADDRESSP         CFK*SEP03\n         MVC   ADB+1(3),ADAADR    copy current address        CFK*SEP00\n         MVC   ADBC(4),ADA        copy current address        CFK*SEP00\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n* print EQUate if necessary                                   CFK*SEP00\n         CLI   OUTOPER+1,C'-'     -n on card ?                CFK*SEP00\n         BE    DOPRINT            yes, print it               CFK*SEP00\n* current address must equal last address                     CFK*SEP00\n         CLC   LOC3,ADAADR        current adr. = next adr. ?  CFK*SEP00\n         BL    RETLABEL           we're not there yet, return to caller\nDOPRINT  DS    0H                                             CFK*SEP00\n         CLI   OUTLABEL,C' '      label on card ?             CFK*SEP00\n         BE    CFF                no, skip it (must be CSECT) CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVI   PAC,C' '           ) clear                     CFK*SEP00\n         MVC   PAC+1(L'PAC-1),PAC )  output buffer            CFK*SEP00\n         B     CFF                loop back to process next address\nRETLABEL DS    0H                                             CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         MVC   OUTLABEL,PAC+OUTLABEL-OUTLINE  copy label      CFK*SEP00\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\n* 2nd and 4th pass code\nCKK      L     R9,AFTA            reload return address\n         BR    R9                 and return\n* end of AFT subroutine\nCKK2     B     LFTXT5\n* end of input TXT reached\nCKEN     XC    PAR(16),PAR        clear DECOMP parms\n         MVC   PAR+16(4),ONE      copy f'1'\n         BAS   R14,BDCM           call DECOMP (does nothing)  CFK*SEP03\n         XC    PAR+16(4),PAR+16   clear DECOMP parms\n         L     R14,ACURRSEC       get @ section desc table    CFK*JAN03\n         L     R6,0(R14)          get @ entry (& keep adr)    CFK*FEB03\n         LA    R3,ESDENTLN(R6)    get @ next section          CFK*FEB03\n         ST    R3,0(R14)          save @ next entry           CFK*JAN03\n         L     R3,NUMSECT         get number of sections      CFK*FEB03\n         BCTR  R3,0               subtract one section done   CFK*JAN03\n         ST    R3,NUMSECT         store it back               CFK*FEB03\n         LTR   R3,R3              more to process ?           CFK*JAN03\n         BNZ   Z10A               back to start if so         CFK*JAN03\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*JLY00\n         MVI   2(R3),C' '         ) clear\n         MVC   3(97,R3),2(R3)     )  print area\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    EPS2               br. if not\n* 4th pass only code\n* add trailing DS if necessary\n*        L     R6,ACURRSEC        get @ current section ptr.  CFK*JLY00\n*        L     R6,0(R6)           get @ current section desc. CFK*JLY00\n         USING ESDSDMAP,R6        tell assembler              CFK*JLY00\n         L     R5,ESDLEN          get section length          CFK*DEC01\n         XR    R2,R2              clear register              CFK*JLY00\n         ICM   R2,B'0111',LOC3    get current address         CFK*JLY00\n         AH    R2,LEN2            add last instr. length      CFK*JLY00\n         A     R5,ESDADR          add csect start adr.        CFK*FEB04\n         SR    R5,R2              subtract current address    CFK*JLY00\n         BZ    NOTRLDS            if zero done                CFK*JLY00\n         BP    ADDDS              if +ve add DS to make up    CFK*SEP00\n* text extends past the section length in ESD !               CFK*SEP00\n         MVC   MSG1I1,ESDNAME     add section name to message CFK*FEB04\n         CVD   R5,DWC             make length PD              CFK*FEB04\n         MVC   MSG1I2,=X'402020206B2020206B202120'  add mask  CFK*FEB04\n         LA    R1,MSG1I2+11       point at last byte          CFK*FEB04\n         EDMK  MSG1I2,DWC+3       make decimal                CFK*FEB04\n         MVC   OUTLINE(L'MSG1),MSG1  copy error message       CFK*SEP00\n         MVC   OUTLINE+L'MSG1+1(MSG1LN2),0(R1) + rest of msg  CFK*FEB04\n         L     R15,PRINT4         get @ PRINTA csect          CFK*SEP03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*SEP03\n         B     NOTRLDS            and carry on                CFK*SEP00\nADDDS    DS    0H                                             CFK*SEP00\n         MVC   OUTINSTR(2),DS4    set up DS                   CFK*JLY00\n         CVD   R5,DWC             make length PD              CFK*JLY00\n         MVC   OUTOPER(10),=X'202020202020202120E7'   mask+X  CFK*JLY00\n         LA    R1,OUTOPER+8       point at last byte          CFK*JLY00\n         EDMK  OUTOPER-1(10),DWC+3   make decimal             CFK*JLY00\n         MVC   OUTOPER(10),0(R1)  move down length            CFK*JLY00\n         MVC   OUTINFO1(11),=C'Trailing DS'                   CFK*SEP01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 done with @ PA (OUTLINE)    CFK*JLY00\nNOTRLDS  DS    0H                                             CFK*JLY00\n         MVC   LOC3,ESDLEN3       set current adr. to end of sec *DEC01\n         DROP  R6                 done with @ ESDSDMAP        CFK*SEP00\n         BAS   R9,AFT             call AFT subroutine         CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLI   OUTLABEL,C' '      label at this address ?     CFK*SEP00\n         BE    ENDLABEL           br. if not                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nENDLABEL DS    0H                                             CFK*SEP00\n         CLI   ADA,X'FF'          any addresses not processed ? K*SEP00\n         BE    NCOL               br. if not                  CFK*SEP00\nCOLL     DS    0H   loop to handle addresses off end of csect CFK*SEP00\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put label EQU *+n onto output                               CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R5,R3              calc difference             CFK*SEP00\n         CVD   R5,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+2(8),=X'4020202020202120' add EDit maskCFK*SEP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n         MVC   OUTLABEL,ADALABEL  copy label                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVC   OUTOPER(2),=C'*+'  put *+ on card              CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* get next address                                            CFK*SEP00\n         L     R15,BART           FETCH NEXT ADDRESS          CFK*SEP03\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n         CLI   ADA,X'FF'          any more addresses ?        CFK*SEP00\n         BNE   COLL               br. if not\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\nNCOL     L     R2,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n* print the Pseudo Registers and Common areas\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R3,NEXT4           get @ NEXT in ESD2 csect\n         LR    R4,R3\n         LA    R4,4(R4)           get @ first entry\n         USING EXTRNMAP,R4        tell assembler              CFK*SEP02\n         L     R3,0(R3)           get number of EXTRNs\n         SR    R5,R5\n         CR    R5,R3              any EXTRNs ?\n         BE    NEXE               br if none\nESDC     DS    0H\n         CLI   EXTTYPE,EXTTPR     Pseudo Register ?           CFK*MAY03\n         BNE   NOTPR              not a common area if not    CFK*MAY03\n         MVC   OUTLABEL,EXTNAME   copy area name              CFK*MAY03\n         TM    EXTINFO,EXTIIAD    check alignment             CFK*JUN03\n         BZ    GENDXD             if byte aligned DXD         CFK*JUN03\n         MVC   OUTINSTR,=C'DSECT' else build dsect card       CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* If we have SYM data the dsect will already be defined so    CFK*JUN03\n* we need to get back to the start of it, then pad to full    CFK*JUN03\n* length with a DS.                                           CFK*JUN03\n         MVC   OUTINSTR(3),=C'ORG'  get back to start         CFK*JUN03\n         MVC   OUTOPER(8),EXTNAME    of dsect                 CFK*JUN03\n         B     PRTORG             and go to print it          CFK*JUN03\nGENDXD   DS    0H                                             CFK*JUN03\n         MVC   OUTINSTR(3),=C'DXD'  else ind. DXD             CFK*MAY03\n         B     SETPRLEN           and go to set length        CFK*MAY03\nNOTPR    DS    0H                                             CFK*MAY03\n         CLI   EXTTYPE,EXTTCM     common area ?               CFK*MAY03\n         BNE   NEXBE              not a common area if not    CFK*MAY03\n         MVC   OUTINSTR(3),COM4   copy c'COM'\n         MVC   OUTLABEL,EXTNAME   copy common area name\nPRTORG   DS    0H                                             CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVC   OUTINSTR(2),DS4    copy c'DS'\nSETPRLEN DS    0H        set Common or PR length              CFK*MAY03\n         SR    R5,R5                                          CFK*MAY03\n         ICM   R5,B'0111',EXTCMLEN  get common area length    CFK*MAY03\n         CVD   R5,DWC             make it PD\n         MVC   OUTOPER(8),=X'4020202020202120' add EDit mask  CFK*MAY03\n         LA    R1,OUTOPER+7       point at last byte          CFK*MAY03\n         MVI   OUTOPER+8,C'C'     add C\n         EDMK  OUTOPER(8),DWC+4   make decimal                CFK*MAY03\n         MVC   OUTOPER(9),0(R1)   move down length            CFK*MAY03\n         CLI   EXTNAME,C' '       was common name blank ?     CFK*MAY03\n         BNE   PCM                br. if not\n         MVI   OUTLABEL,C'B'      else set name to B00000\n         MVC   OUTLABEL+1(5),BZ5  copy c'00000'\nPCM      L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXBE    DS    0H                                             CFK*MAY03\n         LA    R4,EXTNEXT         get @ next entry in EXTRN table MAY03\n         BCT   R3,ESDC            loop if more EXTRNs to check\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\nNEXE     DS    0H\n* code to print using table deleted from here                 CFK*SEP00\n         MVI   PAS45,X'FF'        flag not 2nd use of PASS4\n         MVI   EXTPRTD,x'00'      clear EXTRNs printed flag   CFK*JAN04\n         L     R3,COTR4           get @ COTR csect\n         MVI   2(R3),X'00'        clear control flag\n         L     R14,=A(SVK)        get @ flag in SAVA          CFK*DEC01\n         MVI   0(R14),X'00'       clear 2nd pass flag         CFK*DEC01\nZ99X     DS    0H                 exit point                  CFK*NOV01\n         L     R3,=A(PA)          PRINT END                   CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*DEC01\n         MVC   OUTINSTR(3),ENDF4  copy c'END '                CFK*DEC01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*DEC01\n         LEAVE ,                  STOP                        CFK*SEP03\n* this code only executed on the 2nd pass, ie 1st use of PASS4\nEPS2     MVI   PAS45,X'00'        flag 2nd use of PASS4\n         SR    R3,R3              ) clear KEY4\n         ST    R3,KEY4            )  (FTXT parm)\n         LEAVE ,                  return to PASS0             CFK*SEP03\n* 2nd and 4th pass code\nLFTXT5   MVC   FMTLOC3,LOC3       copy current address\n         MVC   FMTFL1,INST4+8     copy AXNFLG1\n         MVC   LEN4(4),KEY4+4     copy instruction length\n         MVC   RT4(8),INST4       copy instruction TEXT\n         L     R15,ROUT4          get @ format routine        CFK*NOV03\nRF5      DS    0H                                             CFK*NOV03\n         LA    R1,FMTPRM          get @ parameters            CFK*NOV03\n         BASR  R14,R15            call format routine         CFK*NOV03\n         CLI   SIN,X'01'\n         BE    GONE\n         MVC   FPTL(8),KEY4       copy FTXT output to SPPR parms\n         MVC   FPTL+8(12),INST4   copy FTXT output to SPPR parms\n         MVC   FPTL+20(8),LEN4    copy instruction length to SPPR\n         MVC   FPTL+28(4),ROUT4   pass @ decoding routine to SPPR\n         CLC   RT4(4),IMM         is instruction TXT C'IMM=' ?\n         BNE   SPRT               branch if not\n         MVI   SIN,X'01'\n         MVI   KEY4+3,X'02'\n         MVI   FPTL+3,X'02'\nSPRT     L     R15,ASPPR          get @ SPPR csect            CFK*SEP03\n         LA    R1,FPTL            get @ SPPR parms            CFK*SEP03\n         BASR  R14,R15            call SPPR                   CFK*SEP03\n         MVC   KEY4(8),FPTL\n         MVC   LEN4(4),FPTL+20\n         CLI   FPTL+28,X'01'\n         BE    LFTXT4             loop back\n         CLI   FPTL+28,X'02'\n         BNE   GONE\n         L     R15,ROUTC           get @ CONST csect\n         ST    R15,ROUT4\n         B     RF5                go back to call CONST\nGONE     LA    R14,RETD           set return adr for DECOMP   CFK*SEP03\n         MVC   PAR+1(3),LOC3      setup DECOMP\n         MVC   PAR+4(8),INST4      parms\n         MVC   PAR+12(4),ONE      copy f'1'\n         CLC   ROUT4(4),ACONST    is it @ CONST csect ?\n         BNE   CARL\n         XC    PAR+12(4),PAR+12   clear DECOMP parms\n         B     BDCM\nCARL     CLC   ROUT4(4),AARL      rout4 = @ ARL csect ?\n         BNE   BDCM\n         MVC   PAR+12(4),X84      copy x'84000000'\n         L     R1,ASBCZ           get @ SBCZ in ARL csect\n         CLI   0(R1),X'FF'        EXTRN present ?\n         BE    BDCM               NO, skip copy\n         MVC   PAR+13(3),ASBCZ+1  copy @ SBCZ in ARL csect\nBDCM     L     R15,ADECO          get @ DECOMP csect\n         CNOP  2,4\n         BALR  R1,R15             call DECOMP\nPAR      DC    6F'0'\nRETD     CLI   PAS45,X'FF'        2nd use of PASS4 ?\n         BE    LFTXT4             loop back if not\n*** DECOMP has the following code\n*DECO     TITLE 'DECOMP DUMMY'\n*DECOMP   CSECT\n*         USING *,15\n*         L     15,20(1)\n*         BR    14                                            CFK*SEP03\n*         END\n*** end of DECOMP code\n* 4th pass only code\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         CLI   OUTINSTR,C' '      anything to print ?\n         BE    LSPK               br if not\n         L     R4,LNCT            get LINE COUNT\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   OUTSTMT,NED        copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    OUTSTMT,DLC+5      add line count to listing\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*FEB00\nLSPK     L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         CLI   0(R3),X'FF'        IS SECOND LINE\n         BNE   LFTXT4             TO BE PRINTED\n         CLI   3(R3),C' '         YES\n         BE    LPA4\n         MVI   0(R3),C' '\n         MVC   CD5+3(5),3(R3)     pass number to CDN\n         L     R14,ACDN           CONVERT TO HEX\n         ST    R13,CD5R13         put R13 where CDN expects   CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14            call CDN csect\nCD5      DC    C'0000'            ) BCD number to\n         DC    F'0'               )  convert to binary number\nCD5R13   DC    F'0'               R13 (re)loaded from here\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVC   LOC3,CD5+5         set current address\n         BAL   R9,AFT             call AFT subroutine\nLPA4     L     R4,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect    CFK*SEP03\n         MVC   55(8,R3),55(R4)    copy label\n         MVC   1(90,R4),0(R4)     clear PA\n         MVI   0(R3),C' '\n         L     R4,LNCT            get line count\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   47(6,R3),NED       copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    47(6,R3),DLC+5     add line count to listing\n         L     R15,=V(PRINTP)     PRINT A LINE                CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         B     LFTXT4             loop back\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\nMVQQ     MVC   77(1,R3),0(R4)     EXecuted instruction\n         DROP  R3                 done with OUTLINE           CFK*FEB00\nIMM      DC    C'IMM='            mark start of constant area\n         LTORG                                                CFK*DEC02\nHUD      DC    F'99'                size of equate table\nFF94     DC    F'59'                constant\nCOTR4    DC    A(COTR)              @ COTR csect\nALCT4    DC    A(LCT)               @ LCT in PRINTA csect\nDRT      DC    D'0'\nDLC      DC    D'0'\nLNCT     DC    F'0'                 line count\nAFTXTA   DC    A(FTXTA)             @ FTXTA csect             CFK*SEP03\nSTW4     DC    F'1'                 not used ?\nSEV4     DC    F'7'                 constant\nFZ4      DC    X'000004'            constant\nPRINT4   DC    A(PRINTA)            @ PRINTA csect            CFK*SEP03\nNPROGA   DC    A(NPROG)             @ NPROG in ESD0 csect     CFK*JAN00\nACURRSEC DC    A(CURRSECT)          @ current section desc.   CFK*JLY00\nUS4      DC    A(USING)             @ USING csect\nASPPR    DC    A(SPPR)              @ SPPR csect\nAPLCB    DC    A(PLCB)              @ PLCB in SPPR csect\nNED      DC    X'402020202121'      EDit mask for line count\nENDF4    DC    C'END '              constant\nBART     DC    A(ART)               @ ART csect\nXSX      DC    F'96'\nB15      DC    F'0'\nZZ4      DC    F'0'                 constant\nDLC4     DC    D'0'\nRGL4     DC    F'0'\nEQU      DC    C'EQU '              constant\nAFTA     DC    F'0'                 USST and AFT save return adr. here\nALCOM4   DC    A(LCOM)              @ LCOM in ESD5 csect\nMSG1     DS    0CL(MSG1LN1)                                   CFK*FEB04\nMSG1A    DC    C'**  TXT extends off end of section '         CFK*FEB04\nMSG1I1   DC    CL8'XXXXXXXX'        section name              CFK*FEB04\n         DC    C' by'                                         CFK*FEB04\nMSG1LN1  EQU   *-MSG1A              length of fixed len part  CFK*FEB04\nMSG1I2   DC    C' nnn,nnn,nnn'                                CFK*FEB04\nMSG1B    DC    C' bytes'                                      CFK*FEB04\nMSG1LN2  EQU   *-MSG1I2             length of var len part    CFK*FEB04\n         DC    C'            '      padding                   CFK*FEB04\nADB      DC    F'0'\nFT08     DC    X'000008'            constant\nADBC     DC    F'0'                 not used ?\nEXTRN    DC    C'EXTRN'             constant\nENTRY    DC    C'ENTRY'             constant\nCSECT    DC    C'CSECT'             constant\nRMODEANY DC    C'RMODE ANY'         constant                  CFK*JAN00\nAMODEANY DC    C'AMODE ANY'         constant                  CFK*JAN00\nSPACES   DC    CL8' '               constant                  CFK*APR00\nNENT4    DC    A(NENT)              @ NENT in ESD1 csect\nNEXT4    DC    A(NEXT)              @ NEXT in ESD2 csect\nAENDA    DC    A(ENDA)              @ ENDA in TXT csect\nFFBR     DC    X'90ECD00C'          constant, STM  14,12,12(13)\nSKY      DC    F'0'                 flag\nBRT      DC    F'0'                 save r3 during USST/USING call\nACDN     DC    A(CDN)               @ CDN csect\nROUTC    DC    A(CONST)             @ CONST csect\nASAVC    DC    A(SAVA)              @ SAVA csect\nBCV4     DC    A(BCV)               @ BCV csect\nUSI4     DC    C'USING '            constant\nCOM4     DC    C'COM '              constant\nDS4      DC    C'DS  '              constant\nNXSX     DC    F'60'                constant\nSIN      DC    F'0'\nFEH      DC    X'9847'              constant\nCOAD     DC    X'FFFFFF00'          constant\nDSA      DC    F'0'\nDWC      DC    D'0'\nDW4      DC    F'0'\nBC       DC    F'0'\nBZ5      DC    C'00000'             constant\nF100     DC    F'4096'              constant\nCOBR     DC    F'0'\nPLC      DC    F'0'                 ) these\nCOBRG    DC    F'48'                )  fields\nCOBA     DC    F'0'                 )   copied\nACT      DC    F'0'                 )    into\nCOBF     DC    F'0'                 )     PLCB\nFFAD     DC    F'0'                 )      in\nFFC      DC    F'0'                 )       SPPR\nFORHF    DC    F'0'                 )        csect\nPAS45    DC    X'FF000000'          ) flags, 1st byte made x'00' to\n*                                     indicate the 2nd use of PASS4\nEXTPRTD  EQU   PAS45+1,1              flag, EXTRNs printed    CFK*DEC02\nACONST   DC    A(CONST)             @ CONST csect\nAARL     DC    A(ARL)               @ ARL csect\nADECO    DC    A(DECOMP)            @ DECOMP csect\nONE      DC    F'1'                 constant\nX84      DC    X'84000000'          constant\nASBCZ    DC    A(SBCZ)              @ SBCZ in ARL csect\nNUMSECT  DS    F                    number of sections        CFK*FEB03\n* parms to call ART                                           CFK*SEP03\nARTPARMS DS    0CL12                                          CFK*SEP03\nADA      DC    F'0'               entry point, ref'ed by CONST FK*SEP03\nADAADR   EQU   ADA+1,3            3 byte address of label     CFK*SEP03\nADALABEL DS    CL8                8 byte label at this address FK*SEP03\n* end of ART parms                                            CFK*SEP03\n* parms to call format routines                               CFK*NOV03\nFMTPRM   DC    A(PA)              @ PA in PASS1 csect         CFK*NOV03\nLEN4     DC    F'0'               instruction length          CFK*NOV03\nRT4      DC    XL8'00'            instruction TEXT            CFK*NOV03\nFMTLOC3  DC    XL3'00'            3 byte IC                   CFK*NOV03\nFMTFL1   DC    X'00'              copy of AXNFLG1             CFK*NOV03\n* end of format routine parms                                 CFK*NOV03\n* parms to call SAVA                                          CFK*SEP03\nSAVPARMS DS    0XL20                                          CFK*SEP03\nSAVTYPE  DC    X'00'             type of address\nSAVASECT DS    CL8               csect label is in            CFK*DEC03\nSAVADR   DC    XL3'00'           address to save\nSAVOUTLB DS    0CL8              output label                 CFK*MAY00\nSAVNAME  DC    CL8' '            label at this address        CFK*APR00\n* end of SAVA parms\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n* parms to call USING                                         CFK*SEP03\nUSINGPRM DS    0XL8                                           CFK*SEP03\nUSFLAG   DC    X'0'              flag byte                    CFK*SEP03\n         DS    X                 not used ?                   CFK*SEP03\nUSADR1   DS    X                                              CFK*SEP03\nUSADR2   DS    X                                              CFK*SEP03\nUSLOC    DS    XL3               current location (inserts)   CFK*SEP03\nUSFMT    DS    X                 instr format                 CFK*SEP03\n* end of USING parms                                          CFK*SEP03\n* parms to call FTXTA                                         CFK*SEP03\nFTXTAPRM DS    0F                                             CFK*SEP03\n         DC    A(PA)              @ PA in PASS1 csect\nKEY4     DC    F'0'               flag, set to F'1' at end of last card\n         DC    X'0'               copy of AXNFMT for instr\n         DC    X'0'               copy of AXNOPER for instr\nLEN2     DC    H'0'               halfword length of instruction found\nROUT4    DC    A(CKEN)            output @ decoding routine   CFK*JUN01\nINST4    DC    2F'0'              output TEXT of instruction/constant\nLOC4     DC    F'0'               output AXNFLG1 + current address\nLOC3     EQU   LOC4+1,3           output, current address     CFK*JAN00\n         DC    F'0'\n* end of FTXTA parms                                          CFK*SEP03\n* parms to call SPPR                                          CFK*SEP03\nFPTL     DC    8F'0'\n         DC    F'0'\n* end of SPPR parms                                           CFK*SEP03\nSAVEAREA DS    18F                save area                   CFK*SEP03\nPAC      DC    CL133' '             3rd print buffer, for AFT CFK*SEP00\n         YREGS                      register equates          CFK*JLY00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS4O": {"ttr": 4105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PAS4     TITLE 'PASS4 '\n***********************************************************************\n*                                                                     *\n*  Called by PASS0.                                                   *\n*                                                                     *\n*  This makes two passes over the data, the 2nd and 4th. It is        *\n*  called twice by PASS0, once before PASS3 is called and once after  *\n*  PASS3 is called.                                                   *\n*                                                                     *\n* History:                                                            *\n*   Fix bug printing the equate table at end of output.   CFK Apr 1999*\n*   Handle weak external references (WXTRNs).             CFK May 1999*\n*   Map ESD section list in ESD0.                         CFK Jan 2000*\n*   Handle RSECTs.                                        CFK Jan 2000*\n*   Generate AMODE and RMODE statements if needed.        CFK Jan 2000*\n*   Map output line with OUTLINE macro.                   CFK Feb 2000*\n*   Csect name is now set as the first address, so don't  CFK May 2000*\n*   put it onto the output as a label.                                *\n*   Generate trailing DS to make module its full length.  CFK Jly 2000*\n*   Generate EQUates inline. This also allows for two     CFK Sep 2000*\n*   labels at the same location.                                      *\n*   Use equates for all registers                         CFK Oct 2000*\n*   TXT pointers moved to ESD descriptor                  CFK May 2001*\n*   Allow for csects with no TXT by pointing ROUT4 (@     CFK Jun 2001*\n*   format routine) at EOF routine (CKEN)                             *\n*   Put the address an EQUate points to into ADDR2        CFK Aug 2001*\n*   Put comment on trailing DSes                          CFK Sep 2001*\n*   Exit if no sections found                             CFK Oct 2001*\n*   Support multiple csect object decks                   CFK Nov 2001*\n*   1: Loop back if more csects to process                CFK Nov 2001*\n*   2: Get csect name via CURRSECT                        CFK Dec 2001*\n*   3: Don't put entry point on END card                  CFK Dec 2001*\n*   Correctly print ENTRY statements                      CFK Dec 2002*\n*   Don't zero NEXT to indicate EXTRNs printed            CFK Dec 2002*\n*   Must process all csects in each pass                  CFK Jan 2003*\n*   Generate COMmon area length correctly.                CFK May 2003*\n*   Generate DXDs when needed.                            CFK May 2003*\n*   Generate Dsect instead of DXD if PR aligned.          CFK Jun 2003*\n*   Use standard linkage conventions.                     CFK Sep 2003*\n*   Call format routines with standard linkage.           CFK Nov 2003*\n*   Call PRINTP to print and punch records.               CFK Dec 2003*\n*   Pass current section name to SAVA.                    CFK Dec 2003*\n*   Pass ENTRYs in current section to SAVA.               CFK Dec 2003*\n*   Reset label pointers in ART at start of each csect.   CFK Jan 2004*\n*   Clear EXTRNs printed flag during exit.                CFK Jan 2004*\n*                                                                     *\n***********************************************************************\n         ESDSDMAP                 entry in list of sections in ESD0\n         ENTRYMAP                 ENTRY point descriptor      CFK*DEC01\n         EXTRNMAP                 entry in list of EXTRNs in ESD2\n         OUTLINE                  map output line             CFK*FEB00\nPASS4    CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY ADA                next address, ref'ed by CONST\n         EXTRN SPPR               csect\n         EXTRN ASAVSECT           in SPPR csect               CFK*DEC03\n         EXTRN PLCB               in SPPR csect\n         EXTRN PRINTA             csect                       CFK*SEP03\n         EXTRN FTXTA              csect                       CFK*SEP03\n         EXTRN ART                csect\n         EXTRN ARTCSECT           in ART csect                CFK*DEC03\n         EXTRN NEL4               in ART csect                CFK*JAN04\n         EXTRN CDN                csect\n         EXTRN LCOM               in ESD5 csect\n         EXTRN NPROG              in ESD0 csect               CFK*JAN00\n         EXTRN CURRSECT           in ESD0, @ current section  CFK*JLY00\n         EXTRN LCT                in PRINTA csect\n         EXTRN ENDA               in TXT csect\n         EXTRN USING              csect\n         EXTRN PA                 in PASS1 csect\n         EXTRN PAB                in PASS1 csect\n         EXTRN NEXT               in ESD2 csect\n         EXTRN NENT               in ESD1 csect\n         EXTRN CONST              csect\n         EXTRN SAVA               csect\n         EXTRN SVK                in SAVA csect               CFK*DEC03\n         EXTRN SAVASEC1           in ADDR csect               CFK*DEC03\n         EXTRN BCV                csect\n         EXTRN COTR               csect\n         EXTRN SBCZ               in ARL csect\n         EXTRN DECOMP             csect\n         EXTRN ARL                csect\n         ST    R15,PAR+20         put our base reg in parms to DECOMP\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*FEB03\n         MVC   NUMSECT,0(R14)     get number of sections      CFK*FEB03\n         L     R3,ACURRSEC        get @ current section ptr   CFK*FEB03\n         LA    R14,4(R14)         get @ first section         CFK*FEB03\n         ST    R14,0(R3)          set CURRSECT to @ first     CFK*FEB03\nZ10A     DS    0H       loop back here if multiple csects     CFK*NOV01\n         MVI   KEY4+3,X'00'       )       ind. not end of last card\n         MVI   SIN,X'00'          ) clear work\n         MVI   SKY,X'00'          )  areas\n         MVI   LEN4+2,X'00'       )\n         L     R3,COTR4           get @ COTR csect\n         CLI   1(R3),C'D'         'D' in control card ?\n         BNE   BCR                br if not\n         MVI   PAS45,X'00'        else flag 2nd use of PASS4\nBCR      BCR   0,0\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         MVI   OUTLCC,C' '        clear\n         MVC   OUTLCC+1(134),OUTLCC print area\n         DROP  R3                 was OUTLINE                 CFK*FEB00\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVI   0(R3),C' '         clear\n         MVC   1(134,R3),0(R3)     PAB\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*OCT01\n         ICM   R14,B'1111',0(R14) get number of sections      CFK*OCT01\n         BZ    Z99X               exit if no sections         CFK*OCT01\n* put csect name into address table\n         L     R9,ACURRSEC        get @ current section ptr   CFK*JAN03\n         L     R9,0(R9)           get @ current ESD entry     CFK*JAN03\n         USING ESDSDMAP,R9        tell assembler              CFK*JAN03\n         MVC   SAVASECT,ESDNAME   pass csect name to SAVA     CFK*DEC03\n         L     R1,=A(SAVASEC1)    get @ SAVA prm in ADDR      CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ARTCSECT)    get @ current csect in ART  CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ASAVSECT)    get @ current csect in SPPR CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         CLI   ESDNAME,C' '       private code ?              CFK*JAN03\n         BE    PRIVCODE           if so don't call SAVA       CFK*JAN03\n         MVI   SAVTYPE,X'61'      type=csect                  CFK*SEP03\n         MVC   SAVADR,ESDADR3     csect address               CFK*SEP03\n         MVC   SAVNAME,ESDNAME    pass csect name to SAVA     CFK*SEP03\n         L     R15,ASAVC          get @ SAVA csect            CFK*SEP03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*SEP03\n         BASR  R14,R15            call SAVA                   CFK*SEP03\nPRIVCODE DS    0H                                             CFK*JAN03\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    Z20A               br. if not                  CFK*JAN04\n* 4th pass only code\n         L     R1,=A(NEL4)        get @ label pointers in ART CFK*JAN04\n         MVC   0(8,R1),8(R1)      reset label pointers        CFK*JAN04\n         MVC   ADA(4),ZZ4         reset ART output            CFK*JAN04\n         L     R2,=A(PA)          YES       get @ PA in PASS1 CFK*SEP03\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R4,ALCT4           START A      get @ LCT in PRINTA\n         MVC   0(4,R4),FF94       NEW PAGE\n         MVC   OUTINSTR(5),CSECT  PRINT CSECTS\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIRO     is this a RSECT ?           CFK*JAN00\n         BZ    NOTRSECT           br. if not                  CFK*JAN00\n         MVI   OUTINSTR,C'R'      else change CSECT to RSECT  CFK*JAN00\nNOTRSECT DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* generate RMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIRANY   is it RMODE ANY ?           CFK*JAN00\n         BZ    NOTRMANY           branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),RMODEANY  copy c'RMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOTRMANY DS    0H                                             CFK*JAN00\n* generate AMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIA31    is it AMODE 31 or ANY ?     CFK*JAN00\n         BNO   NOAMODE            branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),AMODEANY  copy c'AMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIAANY   is it AMODE ANY ?           CFK*JAN00\n         BO    AMODEOK            branch if so                CFK*JAN00\n         MVC   OUTOPER(3),=C'31 ' else make it AMODE 31       CFK*JAN00\nAMODEOK  DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTA csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOAMODE  DS    0H                                             CFK*JAN00\n* print the ENTRY statements at the start of the listing\n         L     R3,NENT4           get @ NENT in ESD1 csect\n         LA    R4,4(R3)           get @ first entry           CFK*DEC02\n         L     R3,0(R3)           get NENT, number of entries\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC01\n         SR    R5,R5\n         CR    R5,R3              any entries to print\n         BE    NEN                br if not\nESDL1    CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC01\n         BNE   NXTENTRY           try next if not             CFK*DEC01\n         MVC   OUTOPER(8),ENTNAME PRINT ENTRIES\n         MVC   OUTINSTR,ENTRY     copy c'ENTRY'\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNXTENTRY DS    0H                                             CFK*DEC02\n         LA    R4,ENTELEN(R4)     get @ next ENTRY slot       CFK*DEC02\n         BCT   R3,ESDL1           br if more entries to print\n         DROP  R4                 tell asm done with ENTRYMAP CFK*DEC01\nNEN      DS    0H                                             CFK*DEC02\n* print the EXTRN statements at the start of the listing if necessary\n         CLI   EXTPRTD,X'FF'      EXTRNs printed ?            CFK*DEC02\n         BE    NEXN               Yes, don't print again      CFK*DEC02\n         MVI   EXTPRTD,X'FF'      No, flag not to print again CFK*DEC02\n         L     R5,NEXT4           get @ NEXT in ESD2 csect    CFK*DEC01\n         LA    R4,4(R5)           get @ 1st EXTRN             CFK*DEC01\n         USING EXTRNMAP,R4        tell assembler\n         L     R3,0(R5)           get NEXT, number of EXTRNS/WXTRNS  01\n         LTR   R3,R3              any EXTRNS to print ?       CFK*DEC01\n         BZ    NEXN               br if not\nESDL2    CLI   EXTTYPE,EXTTCM     Is it a Common area ?       CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\n         CLI   EXTTYPE,EXTTPR     is it a Pseudo Register ?   CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\nREX      MVC   OUTOPER(8),EXTNAME copy name referenced\n         MVC   OUTINSTR,EXTRN     PRINT EXTRNS\n         CLI   EXTTYPE,EXTTWX     weak external reference ?   CFK*MAY99\n         BNE   NOTWEAK            branch if not               CFK*MAY99\n         MVI   OUTINSTR,C'W'      else change EXTRN to WXTRN  CFK*MAY99\nNOTWEAK  DS    0H                                             CFK*MAY99\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXB     LA    R4,EXTNEXT         get @ next EXTRN slot\n         BCT   R3,ESDL2           br if more EXTRNs to print\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\n         B     NEXN               skip 2nd pass code          CFK*DEC03\n* 2nd pass only code                                          CFK*DEC03\n* put this csects entry points into the address table in SAVA CFK*DEC03\nZ20A     DS    0H                                             CFK*DEC03\n         L     R3,NENT4           get @ NENT in ESD1          CFK*DEC03\n         LA    R4,4(R3)           else get @ 1st ENTRY's adr. CFK*DEC03\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC03\n         ICM   R3,B'1111',0(R3)   get number of entries       CFK*DEC03\n         BZ    NEXN               if no entries skip loop     CFK*JAN04\n* start of loop to pass entry points to SAVA                  CFK*DEC03\nZ20B     DS    0H                                             CFK*DEC03\n         CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC03\n         BNE   Z20C               skip entry if not           CFK*DEC03\n         MVC   SAVADR,ENTADR      pass ENTRY adr to SAVA      CFK*DEC03\n         MVC   SAVNAME,ENTNAME    pass ENTRY name to SAVA     CFK*DEC03\n         MVI   SAVTYPE,X'60'      ind. type of address        CFK*DEC03\n         L     R15,ASAVC          get @ SAVA csect            CFK*DEC03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*DEC03\n         BASR  R14,R15            call SAVA                   CFK*DEC03\nZ20C     DS    0H                                             CFK*DEC03\n         LA    R4,ENTELEN(R4)     get @ next ENTRY            CFK*DEC03\n         BCT   R3,Z20B            br if more to process       CFK*DEC03\n         DROP  R4                 done with ENTRYMAP          CFK*DEC03\n* end of loop to pass entry points to SAVA                    CFK*DEC03\n* 2nd and 4th pass code\nNEXN     LA    R2,15              DROP USING TABLR\n         SR    R3,R3              clear\n         ST    R3,LNCT             line count\nUSLP     LA    R3,16(R3)\n         STM   R2,R3,DRT          save work registers\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         XC    USINGPRM,USINGPRM  clear USING parms           CFK*SEP03\n         STC   R3,USINGPRM+2      tell using to drop this reg CFK*SEP03\n         LA    R1,USINGPRM        get @ parms for USING       CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction (register)\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         LM    R2,R3,DRT          reload work registers\n         BCT   R2,USLP            br if more registers to drop\n         MVC   PLC(4),ZZ4         ) zero\n         MVC   FORHF(4),ZZ4       )  all\n         MVC   FFC(4),ZZ4         )   these\n         MVC   ACT(4),ZZ4         )    fields\n         MVI   COBRG+3,X'30'\n         MVC   FFAD(4),ZZ4        ) zero some\n         MVC   COBF(4),ZZ4        )  more fields\n         MVC   XSX(4),NXSX        copy f'60'\n         MVC   USINGPRM+4(3),ZZ4  ) zero USING parms          CFK*SEP03\n         MVI   FFC,X'FF'\n         L     R9,ACURRSEC        get @ current section ptr.  CFK*MAY01\n         L     R9,0(R9)           get @ current section desc. CFK*MAY01\n         USING ESDSDMAP,R9        tell asembler               CFK*MAY01\n         L     R3,ESDCBUF         get @ TXT header            CFK*MAY01\n         MVC   USINGPRM+4(3),0(R3)  copy 1st TXT adr to USING parms P03\n         L     R3,AENDA           get @ ENDA in TXT csect\n         L     R4,COTR4           get @ COTR csect\n         CLI   7(R4),C'A'         'A' in control card ?\n         BNE   NAS                br. if not\n         MVI   FFC+1,X'FF'\n         CLI   0(R3),C' '         end address blank ?\n         BE    PFT                br if yes\n         MVI   USINGPRM,X'01'     else flag insert call       CFK*SEP03\n         MVC   USINGPRM+4(3),0(R3)  copy to USING parms       CFK*SEP03\n         B     PFT\nNAS      CLC   0(3,R3),ZZ4        end address zero ? (but why check ?)\n         CLC   0(3,R3),FT08       end address x'000008' ?\n         BE    TFTR               br. if yes\n         CLI   0(R3),C' '         end address blank ?\n         BE    TFTR               br. if yes\n         MVC   FFAD+1(3),0(R3)    copy end address\n         L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         CLI   0(R3),X'90'        input starts with STM ?\n         BE    NFT                br. if yes\n         CLI   0(R3),X'05'        input starts with BALR ?\n         BE    NFT                br. if yes\n         MVI   PLC+1,X'FF'\n         MVI   KEY4+3,X'02'\n         CLC   16(2,R3),FEH       = x'9847' (LM 4,7, ...) ?\n         BE    TFTR               br. if equal\n         CLI   0(R3),X'47'        input starts with BC ?\n         BE    LFTXTB             br. if yes\n         MVI   COBF,X'01'         else set flag\n         B     LFTXTB\nTFTR     L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         MVI   USINGPRM+6,X'08'   ) update USING              CFK*SEP03\n         MVC   B15(4),ZZ4         )  parms\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\n         LA    R3,4(R3)           get @ next instr.\n         DROP  R9                 was ESDSDMAP                CFK*MAY01\n         L     R9,XSX             )\n         LA    R9,8(R9)           ) bump up XSX\n         ST    R9,XSX             )\n         MVI   USINGPRM+6,X'00'   update USING parms          CFK*SEP03\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\nNFT      MVI   FFC+1,X'FF'\n         MVI   USINGPRM,X'01'     flag insert call to USING   CFK*SEP03\n         MVI   FORHF,X'FF'\n         B     LFTXTB\nPFT      MVI   USINGPRM+7,X'01'   tell USING to insert this reg K*SEP03\n         MVI   USINGPRM+2,X'F0'   set reg to insert to 15     CFK*SEP03\n         ST    R3,BRT             save @ next instruction\n         BAL   R9,USST            Call USST to generate USING card\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         LA    R1,USINGPRM        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         L     R3,BRT             reload @ next instruction\n         CLI   FFC+1,X'FF'\n         BE    LFTXTB\n         MVI   FFC,X'00'\n         MVI   FORHF,X'FF'\n         MVI   PLC+1,X'FF'        YES\n         CLI   16(R3),X'58'\n         BNE   NLS7\n         MVC   FFAD+2(2),18(R3)   FIRST EXEC ADDRESS\n         NI    FFAD+2,X'0F'\n         L     R5,B15\n         A     R5,FFAD\n         LA    R3,4(R3)\n         S     R5,XSX\n         SRL   R5,2\n         ST    R5,B15\n         LTR   R5,R5\n         BC    12,NLS7\n         B     NLS8\nNLS7     MVC   B15(4),ZZ4         set B15 to zero\nNLS8     MVC   FFAD+2(2),18(R3)\n         NI    FFAD+2,X'0F'\n         MVI   KEY4+3,X'02'       SET CONSTANT MODE\n         MVC   COBRG+3(1),18(R3)\n         NI    COBRG+3,X'F0'\n         MVC   COBA(4),ZZ4\n         L     R5,ALCOM4          get @ LCOM in ESD5 csect\n         L     R5,0(R5)           get common length\n         LA    R5,4095(R5)\n         SR    R4,R4              clear high reg. of pair\n         D     R4,F100            divide by 4096\n         L     R6,B15\n         SR    R6,R5              subtract number of common pages\n         ST    R6,B15\n         LA    R5,3(R5)\n         SLL   R5,4               multiply by 4\n         ST    R5,COBR\n* start of a loop\nLNNP     L     R5,COBR\n         LA    R5,16(R5)\n         ST    R5,COBR\n         STC   R5,USINGPRM+2        put reg. no. into USING prms *SEP03\n         CLC   COBR+3(1),COBRG+3\n         BNE   OREG\n         L     R7,B15\n         C     R7,ZZ4\n         BNH   OREG\n         M     R6,F100           mul by 4096\n         ST    R7,COBA\nOREG     MVC   USINGPRM+4(3),COBA+1 set current adr passed to USING P03\n         L     R4,COBA\n         A     R4,F100           add 4096\n         ST    R4,COBA\n         BAL   R9,USST           call USST to generate USING card\n         B     LUS4              and br. round subroutine\n* subroutine to generate USING card\nUSST     ST    R9,AFTA           save return address\n         XC    REGT(3),REGT      clear BCV parms\n         MVC   REGT+3(1),USINGPRM+2 pass register no. to BCV  CFK*SEP03\n         MVC   SAVADR,USINGPRM+4    pass adr. to SAVA csect   CFK*SEP03\n         MVI   SAVTYPE,X'60'     ind. type of address\n         MVC   SAVNAME,SPACES    clear label                  CFK*APR00\n         L     R15,ASAVC         get @ SAVA csect             CFK*SEP03\n         LA    R1,SAVPARMS       get @ parms                  CFK*SEP03\n         BASR  R14,R15           call SAVA                    CFK*SEP03\n         L     R14,BCV4          get @ BCV csect\n         ST    R13,REGT+4        put R13 where BCV expects it CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14           call BCV\nREGT     DC    F'0'\n         DC    F'0'              R13 (re)loaded from here\n         L     R4,=A(PA)         get @ PA in PASS1 csect      CFK*SEP03\n         USING OUTLINE,R4        tell assembler               CFK*FEB00\n         MVC   OUTOPER(8),SAVOUTLB copy name of this address  CFK*APR00\n         MVC   OUTINSTR(6),USI4  copy c'USING '\n         LA    R5,7              max label length - min label length\n         LA    R3,OUTOPER+7      get @ end of label\nCEC      CLI   0(R3),C' '        space ?\n         BNE   INSC              no, found end of label\n         BCTR  R3,0              else take 1 off ptr\n         BCT   R5,CEC            and loop if more to check\nINSC     MVI   1(R3),C','        put , after label\n         MVC   2(2,R3),REGT      copy register number\n         CLI   PAS45,X'FF'       2nd use of PASS4 ?\n         BE    NPCB              br. if not\n* 4th pass only code\n         L     R15,=V(PRINTP)    get @ PRINTP csect           CFK*DEC03\n         LR    R1,R4             get @ print area             CFK*DEC03\n         BASR  R14,R15           call PRINTP                  CFK*SEP03\n* 2nd and 4th pass code\nNPCB     L     R9,AFTA           reload return address\n         BR    R9                and return\n         DROP  R4                tell asm done with OUTLINE   CFK*FEB00\n* end of USST subroutine\nLUS4     L     R15,US4           get @ USING csect            CFK*SEP03\n         MVI   USINGPRM,X'01'    ind. insert call             CFK*SEP03\n         MVI   USINGPRM+7,X'01'                               CFK*SEP03\n         LA    R1,USINGPRM       get @ parms for USING        CFK*SEP03\n         BASR  R14,R15           call USING                   CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         CLC   COBR+3(1),COBRG+3\n         BL    LNNP               loop back\n* end of first big loop\n         L     R4,COBA\n         S     R4,F100            subtract 4096\n         A     R4,FFAD\n         ST    R4,FFAD\nLFTXTB   L     R14,APLCB          get @ PLCB in SPPR csect\n         MVC   4(36,R14),PLC      copy our PLC into SPPRs PLC\n* start of main loop\nLFTXT4   L     R15,AFTXTA         FETCH TEXT, get @ FTXTA     CFK*SEP03\n         CLI   SKY,X'01'          end of TXT ?\n         BE    CKEN               br. if yes\n         MVC   SKY(1),KEY4+3      copy eof flag\n         CLI   LEN4+2,X'FF'\n         LA    R1,FTXTAPRM        get @ FTXTA parms           CFK*OCT03\n         BNE   BALRF\n         MVI   KEY4+3,X'02'\nBALRF    BASR  R14,R15            call FTXTA                  CFK*SEP03\n         CLI   KEY4+3,X'01'       end of last card ?\n         BNE   NSKY               br. if not\n         MVI   SKY,X'01'          else flag end of TXT\nNSKY     MVC   KEY4+3(1),SKY\n         BAL   R9,AFT             call AFT subroutine\n         B     CKK2               branch round subroutine\n***********************************************************************\n* Subroutine to put the address on the output if necessary            *\n*                                                                     *\n* Uses R3, R4, R5, R9, R14 + regs used by PRINT (R12), ART (R3 and R4)*\n*                                                                     *\n***********************************************************************\nAFT      ST    R9,AFTA            save return address\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4\n         BE    CKK                return if not\n* 4th pass only code\n         LA    R9,PAC             get @ output buffer         CFK*SEP00\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLC   ADA(4),ZZ4         is ADA zero ?\n         BE    FXN                br. if so (ART not called yet)\nCFF      CLI   ADA,X'FF'          any known addresses left ?\n         BE    CKK                go to return if not\n         CLC   LOC3,ADAADR        current adr. = this adr. ?  CFK*MAY00\n         BE    XNA                yes - go print it\n         BL    CKK                we're not there yet, return to caller\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put -n onto output                                          CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R3,R5              calc difference             CFK*SEP00\n         CVD   R3,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+1(9),=X'604020202020202120' - and EDit mask EP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n* put address onto output                                     CFK*SEP00\nXNA      DS    0H                                             CFK*SEP00\n         CLI   ADA,X'61'          is it a CSECT ?             CFK*MAY00\n         BE    FXN                br. if so (already printed) CFK*MAY00\n         MVC   OUTLABEL,ADALABEL  else copy label             CFK*SEP00\n* get next address                                            CFK*SEP00\nFXN      L     R15,BART           FETCH NEXT ADDRESSP         CFK*SEP03\n         MVC   ADBC(4),ADA        copy current address        CFK*SEP00\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n* print EQUate if necessary                                   CFK*SEP00\n         CLI   OUTOPER+1,C'-'     -n on card ?                CFK*SEP00\n         BE    DOPRINT            yes, print it               CFK*SEP00\n* current address must equal last address                     CFK*SEP00\n         CLC   LOC3,ADAADR        current adr. = next adr. ?  CFK*SEP00\n         BL    RETLABEL           we're not there yet, return to caller\nDOPRINT  DS    0H                                             CFK*SEP00\n         CLI   ADBC,X'61'         CSECT ?                     CFK*JAN04\n         BE    CFF                yes, already printed        CFK*JAN04\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVI   PAC,C' '           ) clear                     CFK*SEP00\n         MVC   PAC+1(L'PAC-1),PAC )  output buffer            CFK*SEP00\n         B     CFF                loop back to process next address\nRETLABEL DS    0H                                             CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         MVC   OUTLABEL,PAC+OUTLABEL-OUTLINE  copy label      CFK*SEP00\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\n* 2nd and 4th pass code\nCKK      L     R9,AFTA            reload return address\n         BR    R9                 and return\n* end of AFT subroutine\nCKK2     B     LFTXT5\n* end of input TXT reached\nCKEN     XC    PAR(16),PAR        clear DECOMP parms\n         MVC   PAR+16(4),ONE      copy f'1'\n         BAS   R14,BDCM           call DECOMP (does nothing)  CFK*SEP03\n         XC    PAR+16(4),PAR+16   clear DECOMP parms\n         L     R14,ACURRSEC       get @ section desc table    CFK*JAN03\n         L     R6,0(R14)          get @ entry (& keep adr)    CFK*FEB03\n         LA    R3,ESDENTLN(R6)    get @ next section          CFK*FEB03\n         ST    R3,0(R14)          save @ next entry           CFK*JAN03\n         L     R3,NUMSECT         get number of sections      CFK*FEB03\n         BCTR  R3,0               subtract one section done   CFK*JAN03\n         ST    R3,NUMSECT         store it back               CFK*FEB03\n         LTR   R3,R3              more to process ?           CFK*JAN03\n         BNZ   Z10A               back to start if so         CFK*JAN03\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*JLY00\n         MVI   2(R3),C' '         ) clear\n         MVC   3(97,R3),2(R3)     )  print area\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    EPS2               br. if not\n* 4th pass only code\n* add trailing DS if necessary\n*        L     R6,ACURRSEC        get @ current section ptr.  CFK*JLY00\n*        L     R6,0(R6)           get @ current section desc. CFK*JLY00\n         USING ESDSDMAP,R6        tell assembler              CFK*JLY00\n         L     R5,ESDLEN          get section length          CFK*DEC01\n         XR    R2,R2              clear register              CFK*JLY00\n         ICM   R2,B'0111',LOC3    get current address         CFK*JLY00\n         AH    R2,LEN2            add last instr. length      CFK*JLY00\n         SR    R5,R2              subtract current address    CFK*JLY00\n         BZ    NOTRLDS            if zero done                CFK*JLY00\n         BP    ADDDS              if +ve add DS to make up    CFK*SEP00\n* text extends past the section length in ESD !               CFK*SEP00\n         MVC   OUTLINE(L'MSG1),MSG1  copy error message       CFK*SEP00\n         L     R15,PRINT4         get @ PRINTA csect          CFK*SEP03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*SEP03\n         B     NOTRLDS            and carry on                CFK*SEP00\nADDDS    DS    0H                                             CFK*SEP00\n         MVC   OUTINSTR(2),DS4    set up DS                   CFK*JLY00\n         CVD   R5,DWC             make length PD              CFK*JLY00\n         MVC   OUTOPER(10),=X'202020202020202120E7'   mask+X  CFK*JLY00\n         LA    R1,OUTOPER+8       point at last byte          CFK*JLY00\n         EDMK  OUTOPER-1(10),DWC+3   make decimal             CFK*JLY00\n         MVC   OUTOPER(10),0(R1)  move down length            CFK*JLY00\n         MVC   OUTINFO1(11),=C'Trailing DS'                   CFK*SEP01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 done with @ PA (OUTLINE)    CFK*JLY00\nNOTRLDS  DS    0H                                             CFK*JLY00\n         MVC   LOC3,ESDLEN3       set current adr. to end of sec *DEC01\n         DROP  R6                 done with @ ESDSDMAP        CFK*SEP00\n         BAS   R9,AFT             call AFT subroutine         CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLI   OUTLABEL,C' '      label at this address ?     CFK*SEP00\n         BE    ENDLABEL           br. if not                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nENDLABEL DS    0H                                             CFK*SEP00\n         CLI   ADA,X'FF'          any addresses not processed ? K*SEP00\n         BE    NCOL               br. if not                  CFK*SEP00\nCOLL     DS    0H   loop to handle addresses off end of csect CFK*SEP00\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put label EQU *+n onto output                               CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R5,R3              calc difference             CFK*SEP00\n         CVD   R5,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+2(8),=X'4020202020202120' add EDit maskCFK*SEP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n         MVC   OUTLABEL,ADALABEL  copy label                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVC   OUTOPER(2),=C'*+'  put *+ on card              CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* get next address                                            CFK*SEP00\n         L     R15,BART           FETCH NEXT ADDRESS          CFK*SEP03\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n         CLI   ADA,X'FF'          any more addresses ?        CFK*SEP00\n         BNE   COLL               br. if not\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\nNCOL     L     R2,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n* print the Pseudo Registers and Common areas\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R3,NEXT4           get @ NEXT in ESD2 csect\n         LR    R4,R3\n         LA    R4,4(R4)           get @ first entry\n         USING EXTRNMAP,R4        tell assembler              CFK*SEP02\n         L     R3,0(R3)           get number of EXTRNs\n         SR    R5,R5\n         CR    R5,R3              any EXTRNs ?\n         BE    NEXE               br if none\nESDC     DS    0H\n         CLI   EXTTYPE,EXTTPR     Pseudo Register ?           CFK*MAY03\n         BNE   NOTPR              not a common area if not    CFK*MAY03\n         MVC   OUTLABEL,EXTNAME   copy area name              CFK*MAY03\n         TM    EXTINFO,EXTIIAD    check alignment             CFK*JUN03\n         BZ    GENDXD             if byte aligned DXD         CFK*JUN03\n         MVC   OUTINSTR,=C'DSECT' else build dsect card       CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* If we have SYM data the dsect will already be defined so    CFK*JUN03\n* we need to get back to the start of it, then pad to full    CFK*JUN03\n* length with a DS.                                           CFK*JUN03\n         MVC   OUTINSTR(3),=C'ORG'  get back to start         CFK*JUN03\n         MVC   OUTOPER(8),EXTNAME    of dsect                 CFK*JUN03\n         B     PRTORG             and go to print it          CFK*JUN03\nGENDXD   DS    0H                                             CFK*JUN03\n         MVC   OUTINSTR(3),=C'DXD'  else ind. DXD             CFK*MAY03\n         B     SETPRLEN           and go to set length        CFK*MAY03\nNOTPR    DS    0H                                             CFK*MAY03\n         CLI   EXTTYPE,EXTTCM     common area ?               CFK*MAY03\n         BNE   NEXBE              not a common area if not    CFK*MAY03\n         MVC   OUTINSTR(3),COM4   copy c'COM'\n         MVC   OUTLABEL,EXTNAME   copy common area name\nPRTORG   DS    0H                                             CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVC   OUTINSTR(2),DS4    copy c'DS'\nSETPRLEN DS    0H        set Common or PR length              CFK*MAY03\n         SR    R5,R5                                          CFK*MAY03\n         ICM   R5,B'0111',EXTCMLEN  get common area length    CFK*MAY03\n         CVD   R5,DWC             make it PD\n         MVC   OUTOPER(8),=X'4020202020202120' add EDit mask  CFK*MAY03\n         LA    R1,OUTOPER+7       point at last byte          CFK*MAY03\n         MVI   OUTOPER+8,C'C'     add C\n         EDMK  OUTOPER(8),DWC+4   make decimal                CFK*MAY03\n         MVC   OUTOPER(9),0(R1)   move down length            CFK*MAY03\n         CLI   EXTNAME,C' '       was common name blank ?     CFK*MAY03\n         BNE   PCM                br. if not\n         MVI   OUTLABEL,C'B'      else set name to B00000\n         MVC   OUTLABEL+1(5),BZ5  copy c'00000'\nPCM      L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXBE    DS    0H                                             CFK*MAY03\n         LA    R4,EXTNEXT         get @ next entry in EXTRN table MAY03\n         BCT   R3,ESDC            loop if more EXTRNs to check\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\nNEXE     DS    0H\n* code to print using table deleted from here                 CFK*SEP00\n         MVI   PAS45,X'FF'        flag not 2nd use of PASS4\n         MVI   EXTPRTD,X'00'      clear EXTRNs printed flag   CFK*JAN04\n         L     R3,COTR4           get @ COTR csect\n         MVI   2(R3),X'00'        clear control flag\n         L     R14,=A(SVK)        get @ flag in SAVA          CFK*DEC01\n         MVI   0(R14),X'00'       clear 2nd pass flag         CFK*DEC01\nZ99X     DS    0H                 exit point                  CFK*NOV01\n         L     R3,=A(PA)          PRINT END                   CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*DEC01\n         MVC   OUTINSTR(3),ENDF4  copy c'END '                CFK*DEC01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*DEC01\n         LEAVE ,                  STOP                        CFK*SEP03\n* this code only executed on the 2nd pass, ie 1st use of PASS4\nEPS2     MVI   PAS45,X'00'        flag 2nd use of PASS4\n         SR    R3,R3              ) clear KEY4\n         ST    R3,KEY4            )  (FTXT parm)\n         LEAVE ,                  return to PASS0             CFK*SEP03\n* 2nd and 4th pass code\nLFTXT5   MVC   FMTLOC3,LOC3       copy current address\n         MVC   FMTFL1,INST4+8     copy AXNFLG1\n         MVC   LEN4(4),KEY4+4     copy instruction length\n         MVC   RT4(8),INST4       copy instruction TEXT\n         L     R15,ROUT4          get @ format routine        CFK*NOV03\nRF5      DS    0H                                             CFK*NOV03\n         LA    R1,FMTPRM          get @ parameters            CFK*NOV03\n         BASR  R14,R15            call format routine         CFK*NOV03\n         CLI   SIN,X'01'\n         BE    GONE\n         MVC   FPTL(8),KEY4       copy FTXT output to SPPR parms\n         MVC   FPTL+8(12),INST4   copy FTXT output to SPPR parms\n         MVC   FPTL+20(8),LEN4    copy instruction length to SPPR\n         MVC   FPTL+28(4),ROUT4   pass @ decoding routine to SPPR\n         CLC   RT4(4),IMM         is instruction TXT C'IMM=' ?\n         BNE   SPRT               branch if not\n         MVI   SIN,X'01'\n         MVI   KEY4+3,X'02'\n         MVI   FPTL+3,X'02'\nSPRT     L     R15,ASPPR          get @ SPPR csect            CFK*SEP03\n         LA    R1,FPTL            get @ SPPR parms            CFK*SEP03\n         BASR  R14,R15            call SPPR                   CFK*SEP03\n         MVC   KEY4(8),FPTL\n         MVC   LEN4(4),FPTL+20\n         CLI   FPTL+28,X'01'\n         BE    LFTXT4             loop back\n         CLI   FPTL+28,X'02'\n         BNE   GONE\n         L     R15,ROUTC           get @ CONST csect\n         ST    R15,ROUT4\n         B     RF5                go back to call CONST\nGONE     LA    R14,RETD           set return adr for DECOMP   CFK*SEP03\n         MVC   PAR+1(3),LOC3      setup DECOMP\n         MVC   PAR+4(8),INST4      parms\n         MVC   PAR+12(4),ONE      copy f'1'\n         CLC   ROUT4(4),ACONST    is it @ CONST csect ?\n         BNE   CARL\n         XC    PAR+12(4),PAR+12   clear DECOMP parms\n         B     BDCM\nCARL     CLC   ROUT4(4),AARL      rout4 = @ ARL csect ?\n         BNE   BDCM\n         MVC   PAR+12(4),X84      copy x'84000000'\n         L     R1,ASBCZ           get @ SBCZ in ARL csect\n         CLI   0(R1),X'FF'        EXTRN present ?\n         BE    BDCM               NO, skip copy\n         MVC   PAR+13(3),ASBCZ+1  copy @ SBCZ in ARL csect\nBDCM     L     R15,ADECO          get @ DECOMP csect\n         CNOP  2,4\n         BALR  R1,R15             call DECOMP\nPAR      DC    6F'0'\nRETD     CLI   PAS45,X'FF'        2nd use of PASS4 ?\n         BE    LFTXT4             loop back if not\n*** DECOMP has the following code\n*DECO     TITLE 'DECOMP DUMMY'\n*DECOMP   CSECT\n*         USING *,15\n*         L     15,20(1)\n*         BR    14                                            CFK*SEP03\n*         END\n*** end of DECOMP code\n* 4th pass only code\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         CLI   OUTINSTR,C' '      anything to print ?\n         BE    LSPK               br if not\n         L     R4,LNCT            get LINE COUNT\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   OUTSTMT,NED        copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    OUTSTMT,DLC+5      add line count to listing\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*FEB00\nLSPK     L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         CLI   0(R3),X'FF'        IS SECOND LINE\n         BNE   LFTXT4             TO BE PRINTED\n         CLI   3(R3),C' '         YES\n         BE    LPA4\n         MVI   0(R3),C' '\n         MVC   CD5+3(5),3(R3)     pass number to CDN\n         L     R14,ACDN           CONVERT TO HEX\n         ST    R13,CD5R13         put R13 where CDN expects   CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14            call CDN csect\nCD5      DC    C'0000'            ) BCD number to\n         DC    F'0'               )  convert to binary number\nCD5R13   DC    F'0'               R13 (re)loaded from here\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVC   LOC3,CD5+5         set current address\n         BAL   R9,AFT             call AFT subroutine\nLPA4     L     R4,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect    CFK*SEP03\n         MVC   55(8,R3),55(R4)    copy label\n         MVC   1(90,R4),0(R4)     clear PA\n         MVI   0(R3),C' '\n         L     R4,LNCT            get line count\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   47(6,R3),NED       copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    47(6,R3),DLC+5     add line count to listing\n         L     R15,=V(PRINTP)     PRINT A LINE                CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         B     LFTXT4             loop back\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\nMVQQ     MVC   77(1,R3),0(R4)     EXecuted instruction\n         DROP  R3                 done with OUTLINE           CFK*FEB00\nIMM      DC    C'IMM='            mark start of constant area\n         LTORG                                                CFK*DEC02\nHUD      DC    F'99'                size of equate table\nFF94     DC    F'59'                constant\nCOTR4    DC    A(COTR)              @ COTR csect\nALCT4    DC    A(LCT)               @ LCT in PRINTA csect\nDRT      DC    D'0'\nDLC      DC    D'0'\nLNCT     DC    F'0'                 line count\nAFTXTA   DC    A(FTXTA)             @ FTXTA csect             CFK*SEP03\nSTW4     DC    F'1'                 not used ?\nSEV4     DC    F'7'                 constant\nFZ4      DC    X'000004'            constant\nPRINT4   DC    A(PRINTA)            @ PRINTA csect            CFK*SEP03\nNPROGA   DC    A(NPROG)             @ NPROG in ESD0 csect     CFK*JAN00\nACURRSEC DC    A(CURRSECT)          @ current section desc.   CFK*JLY00\nUS4      DC    A(USING)             @ USING csect\nASPPR    DC    A(SPPR)              @ SPPR csect\nAPLCB    DC    A(PLCB)              @ PLCB in SPPR csect\nNED      DC    X'402020202121'      EDit mask for line count\nENDF4    DC    C'END '              constant\nBART     DC    A(ART)               @ ART csect\nXSX      DC    F'96'\nB15      DC    F'0'\nZZ4      DC    F'0'                 constant\nDLC4     DC    D'0'\nRGL4     DC    F'0'\nEQU      DC    C'EQU '              constant\nAFTA     DC    F'0'                 USST and AFT save return adr. here\nALCOM4   DC    A(LCOM)              @ LCOM in ESD5 csect\nMSG1     DC    C'**  TXT extends off end of section **'       CFK*SEP00\nFT08     DC    X'000008'            constant\nADBC     DC    F'0'                 copy of ADA\nEXTRN    DC    C'EXTRN'             constant\nENTRY    DC    C'ENTRY'             constant\nCSECT    DC    C'CSECT'             constant\nRMODEANY DC    C'RMODE ANY'         constant                  CFK*JAN00\nAMODEANY DC    C'AMODE ANY'         constant                  CFK*JAN00\nSPACES   DC    CL8' '               constant                  CFK*APR00\nNENT4    DC    A(NENT)              @ NENT in ESD1 csect\nNEXT4    DC    A(NEXT)              @ NEXT in ESD2 csect\nAENDA    DC    A(ENDA)              @ ENDA in TXT csect\nFFBR     DC    X'90ECD00C'          constant, STM  14,12,12(13)\nSKY      DC    F'0'                 flag\nBRT      DC    F'0'                 save r3 during USST/USING call\nACDN     DC    A(CDN)               @ CDN csect\nROUTC    DC    A(CONST)             @ CONST csect\nASAVC    DC    A(SAVA)              @ SAVA csect\nBCV4     DC    A(BCV)               @ BCV csect\nUSI4     DC    C'USING '            constant\nCOM4     DC    C'COM '              constant\nDS4      DC    C'DS  '              constant\nNXSX     DC    F'60'                constant\nSIN      DC    F'0'\nFEH      DC    X'9847'              constant\nCOAD     DC    X'FFFFFF00'          constant\nDSA      DC    F'0'\nDWC      DC    D'0'\nDW4      DC    F'0'\nBC       DC    F'0'\nBZ5      DC    C'00000'             constant\nF100     DC    F'4096'              constant\nCOBR     DC    F'0'\nPLC      DC    F'0'                 ) these\nCOBRG    DC    F'48'                )  fields\nCOBA     DC    F'0'                 )   copied\nACT      DC    F'0'                 )    into\nCOBF     DC    F'0'                 )     PLCB\nFFAD     DC    F'0'                 )      in\nFFC      DC    F'0'                 )       SPPR\nFORHF    DC    F'0'                 )        csect\nPAS45    DC    X'FF000000'          ) flags, 1st byte made x'00' to\n*                                     indicate the 2nd use of PASS4\nEXTPRTD  EQU   PAS45+1,1              flag, EXTRNs printed    CFK*DEC02\nACONST   DC    A(CONST)             @ CONST csect\nAARL     DC    A(ARL)               @ ARL csect\nADECO    DC    A(DECOMP)            @ DECOMP csect\nONE      DC    F'1'                 constant\nX84      DC    X'84000000'          constant\nASBCZ    DC    A(SBCZ)              @ SBCZ in ARL csect\nNUMSECT  DS    F                    number of sections        CFK*FEB03\n* parms to call ART                                           CFK*SEP03\nARTPARMS DS    0CL12                                          CFK*SEP03\nADA      DC    F'0'               entry point, ref'ed by CONST FK*SEP03\nADAADR   EQU   ADA+1,3            3 byte address of label     CFK*SEP03\nADALABEL DS    CL8                8 byte label at this address FK*SEP03\n* end of ART parms                                            CFK*SEP03\n* parms to call format routines                               CFK*NOV03\nFMTPRM   DC    A(PA)              @ PA in PASS1 csect         CFK*NOV03\nLEN4     DC    F'0'               instruction length          CFK*NOV03\nRT4      DC    XL8'00'            instruction TEXT            CFK*NOV03\nFMTLOC3  DC    XL3'00'            3 byte IC                   CFK*NOV03\nFMTFL1   DC    X'00'              copy of AXNFLG1             CFK*NOV03\n* end of format routine parms                                 CFK*NOV03\n* parms to call SAVA                                          CFK*SEP03\nSAVPARMS DS    0XL20                                          CFK*SEP03\nSAVTYPE  DC    X'00'             type of address\nSAVASECT DS    CL8               csect label is in            CFK*DEC03\nSAVADR   DC    XL3'00'           address to save\nSAVOUTLB DS    0CL8              output label                 CFK*MAY00\nSAVNAME  DC    CL8' '            label at this address        CFK*APR00\n* end of SAVA parms\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n* parms to call USING                                         CFK*SEP03\nUSINGPRM DS    0XL8                                           CFK*SEP03\nUSFLAG   DC    X'0'              flag byte                    CFK*SEP03\n         DS    X                 not used ?                   CFK*SEP03\nUSADR1   DS    X                                              CFK*SEP03\nUSADR2   DS    X                                              CFK*SEP03\nUSLOC    DS    XL3               current location (inserts)   CFK*SEP03\nUSFMT    DS    X                 instr format                 CFK*SEP03\n* end of USING parms                                          CFK*SEP03\n* parms to call FTXTA                                         CFK*SEP03\nFTXTAPRM DS    0F                                             CFK*SEP03\n         DC    A(PA)              @ PA in PASS1 csect\nKEY4     DC    F'0'               flag, set to F'1' at end of last card\n         DC    X'0'               copy of AXNFMT for instr\n         DC    X'0'               copy of AXNOPER for instr\nLEN2     DC    H'0'               halfword length of instruction found\nROUT4    DC    A(CKEN)            output @ decoding routine   CFK*JUN01\nINST4    DC    2F'0'              output TEXT of instruction/constant\nLOC4     DC    F'0'               output AXNFLG1 + current address\nLOC3     EQU   LOC4+1,3           output, current address     CFK*JAN00\n         DC    F'0'\n* end of FTXTA parms                                          CFK*SEP03\n* parms to call SPPR                                          CFK*SEP03\nFPTL     DC    8F'0'\n         DC    F'0'\n* end of SPPR parms                                           CFK*SEP03\nSAVEAREA DS    18F                save area                   CFK*SEP03\nPAC      DC    CL133' '             3rd print buffer, for AFT CFK*SEP00\n         YREGS                      register equates          CFK*JLY00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASS4Z": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x008\\x01\\x04\\x02\\x0f\\x01\\x04\\x03_\\x121\\x03\\xc6\\x03\\xc1\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-01-20T00:00:00", "modifydate": "2004-02-04T12:31:38", "lines": 966, "newlines": 961, "modlines": 0, "user": "U765139"}, "text": "PAS4     TITLE 'PASS4 '\n***********************************************************************\n*                                                                     *\n*  Called by PASS0.                                                   *\n*                                                                     *\n*  This makes two passes over the data, the 2nd and 4th. It is        *\n*  called twice by PASS0, once before PASS3 is called and once after  *\n*  PASS3 is called.                                                   *\n*                                                                     *\n* History:                                                            *\n*   Fix bug printing the equate table at end of output.   CFK Apr 1999*\n*   Handle weak external references (WXTRNs).             CFK May 1999*\n*   Map ESD section list in ESD0.                         CFK Jan 2000*\n*   Handle RSECTs.                                        CFK Jan 2000*\n*   Generate AMODE and RMODE statements if needed.        CFK Jan 2000*\n*   Map output line with OUTLINE macro.                   CFK Feb 2000*\n*   Csect name is now set as the first address, so don't  CFK May 2000*\n*   put it onto the output as a label.                                *\n*   Generate trailing DS to make module its full length.  CFK Jly 2000*\n*   Generate EQUates inline. This also allows for two     CFK Sep 2000*\n*   labels at the same location.                                      *\n*   Use equates for all registers                         CFK Oct 2000*\n*   TXT pointers moved to ESD descriptor                  CFK May 2001*\n*   Allow for csects with no TXT by pointing ROUT4 (@     CFK Jun 2001*\n*   format routine) at EOF routine (CKEN)                             *\n*   Put the address an EQUate points to into ADDR2        CFK Aug 2001*\n*   Put comment on trailing DSes                          CFK Sep 2001*\n*   Exit if no sections found                             CFK Oct 2001*\n*   Support multiple csect object decks                   CFK Nov 2001*\n*   1: Loop back if more csects to process                CFK Nov 2001*\n*   2: Get csect name via CURRSECT                        CFK Dec 2001*\n*   3: Don't put entry point on END card                  CFK Dec 2001*\n*   Correctly print ENTRY statements                      CFK Dec 2002*\n*   Don't zero NEXT to indicate EXTRNs printed            CFK Dec 2002*\n*   Must process all csects in each pass                  CFK Jan 2003*\n*   Generate COMmon area length correctly.                CFK May 2003*\n*   Generate DXDs when needed.                            CFK May 2003*\n*   Generate Dsect instead of DXD if PR aligned.          CFK Jun 2003*\n*   Use standard linkage conventions.                     CFK Sep 2003*\n*   Call format routines with standard linkage.           CFK Nov 2003*\n*   Call PRINTP to print and punch records.               CFK Dec 2003*\n*   Pass current section name to SAVA.                    CFK Dec 2003*\n*   Pass ENTRYs in current section to SAVA.               CFK Dec 2003*\n*   Reset label pointers in ART at start of each csect.   CFK Jan 2004*\n*   Clear EXTRNs printed flag during exit.                CFK Jan 2004*\n*                                                                     *\n***********************************************************************\n         ESDSDMAP                 entry in list of sections in ESD0\n         ENTRYMAP                 ENTRY point descriptor      CFK*DEC01\n         EXTRNMAP                 entry in list of EXTRNs in ESD2\n         OUTLINE                  map output line             CFK*FEB00\nPASS4    CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY ADA                next address, ref'ed by CONST\n         EXTRN SPPR               csect\n         EXTRN ASAVSECT           in SPPR csect               CFK*DEC03\n         EXTRN PLCB               in SPPR csect\n         EXTRN PRINTA             csect                       CFK*SEP03\n         EXTRN FTXTA              csect                       CFK*SEP03\n         EXTRN ART                csect\n         EXTRN ARTCSECT           in ART csect                CFK*DEC03\n         EXTRN NEL4               in ART csect                CFK*JAN04\n         EXTRN CDN                csect\n         EXTRN LCOM               in ESD5 csect\n         EXTRN NPROG              in ESD0 csect               CFK*JAN00\n         EXTRN CURRSECT           in ESD0, @ current section  CFK*JLY00\n         EXTRN LCT                in PRINTA csect\n         EXTRN ENDA               in TXT csect\n         EXTRN USING              csect\n         EXTRN PA                 in PASS1 csect\n         EXTRN PAB                in PASS1 csect\n         EXTRN NEXT               in ESD2 csect\n         EXTRN NENT               in ESD1 csect\n         EXTRN CONST              csect\n         EXTRN SAVA               csect\n         EXTRN SVK                in SAVA csect               CFK*DEC03\n         EXTRN SAVASEC1           in ADDR csect               CFK*DEC03\n         EXTRN BCV                csect\n         EXTRN COTR               csect\n         EXTRN SBCZ               in ARL csect\n         EXTRN DECOMP             csect\n         EXTRN ARL                csect\n         ST    R15,PAR+20         put our base reg in parms to DECOMP\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*FEB03\n         MVC   NUMSECT,0(R14)     get number of sections      CFK*FEB03\n         L     R3,ACURRSEC        get @ current section ptr   CFK*FEB03\n         LA    R14,4(R14)         get @ first section         CFK*FEB03\n         ST    R14,0(R3)          set CURRSECT to @ first     CFK*FEB03\nZ10A     DS    0H       loop back here if multiple csects     CFK*NOV01\n         MVI   KEY4+3,X'00'       )       ind. not end of last card\n         MVI   SIN,X'00'          ) clear work\n         MVI   SKY,X'00'          )  areas\n         MVI   LEN4+2,X'00'       )\n         L     R3,COTR4           get @ COTR csect\n         CLI   1(R3),C'D'         'D' in control card ?\n         BNE   BCR                br if not\n         MVI   PAS45,X'00'        else flag 2nd use of PASS4\nBCR      BCR   0,0\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         MVI   OUTLCC,C' '        clear\n         MVC   OUTLCC+1(134),OUTLCC print area\n         DROP  R3                 was OUTLINE                 CFK*FEB00\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVI   0(R3),C' '         clear\n         MVC   1(134,R3),0(R3)     PAB\n         L     R14,NPROGA         get @ NPROG in ESD0 csect   CFK*OCT01\n         ICM   R14,B'1111',0(R14) get number of sections      CFK*OCT01\n         BZ    Z99X               exit if no sections         CFK*OCT01\n* put csect name into address table\n         L     R9,ACURRSEC        get @ current section ptr   CFK*JAN03\n         L     R9,0(R9)           get @ current ESD entry     CFK*JAN03\n         USING ESDSDMAP,R9        tell assembler              CFK*JAN03\n         MVC   SAVASECT,ESDNAME   pass csect name to SAVA     CFK*DEC03\n         L     R1,=A(SAVASEC1)    get @ SAVA prm in ADDR      CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ARTCSECT)    get @ current csect in ART  CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         L     R1,=A(ASAVSECT)    get @ current csect in SPPR CFK*DEC03\n         MVC   0(8,R1),ESDNAME    set to current csect name   CFK*DEC03\n         CLI   ESDNAME,C' '       private code ?              CFK*JAN03\n         BE    PRIVCODE           if so don't call SAVA       CFK*JAN03\n         MVI   SAVTYPE,X'61'      type=csect                  CFK*SEP03\n         MVC   SAVADR,ESDADR3     csect address               CFK*SEP03\n         MVC   SAVNAME,ESDNAME    pass csect name to SAVA     CFK*SEP03\n         L     R15,ASAVC          get @ SAVA csect            CFK*SEP03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*SEP03\n         BASR  R14,R15            call SAVA                   CFK*SEP03\nPRIVCODE DS    0H                                             CFK*JAN03\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    Z20A               br. if not                  CFK*JAN04\n* 4th pass only code\n         L     R1,=A(NEL4)        get @ label pointers in ART CFK*JAN04\n         MVC   0(8,R1),8(R1)      reset label pointers        CFK*JAN04\n         MVC   ADA(4),ZZ4         reset ART output            CFK*JAN04\n         MVI   PAC,C' '           ) clear                     CFK*JAN04\n         MVC   PAC+1(L'PAC-1),PAC )  output buffer            CFK*JAN04\n         L     R2,=A(PA)          YES       get @ PA in PASS1 CFK*SEP03\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R4,ALCT4           START A      get @ LCT in PRINTA\n         MVC   0(4,R4),FF94       NEW PAGE\n         MVC   OUTINSTR(5),CSECT  PRINT CSECTS\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIRO     is this a RSECT ?           CFK*JAN00\n         BZ    NOTRSECT           br. if not                  CFK*JAN00\n         MVI   OUTINSTR,C'R'      else change CSECT to RSECT  CFK*JAN00\nNOTRSECT DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* generate RMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIRANY   is it RMODE ANY ?           CFK*JAN00\n         BZ    NOTRMANY           branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),RMODEANY  copy c'RMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOTRMANY DS    0H                                             CFK*JAN00\n* generate AMODE statement if necessary.                      CFK*JAN00\n         TM    ESDINFO,ESDIA31    is it AMODE 31 or ANY ?     CFK*JAN00\n         BNO   NOAMODE            branch if not               CFK*JAN00\n         MVC   OUTINSTR(9),AMODEANY  copy c'AMODE ANY'        CFK*JAN00\n         MVC   OUTLABEL,ESDNAME   copy csect name             CFK*JAN00\n         TM    ESDINFO,ESDIAANY   is it AMODE ANY ?           CFK*JAN00\n         BO    AMODEOK            branch if so                CFK*JAN00\n         MVC   OUTOPER(3),=C'31 ' else make it AMODE 31       CFK*JAN00\nAMODEOK  DS    0H                                             CFK*JAN00\n         L     R15,=V(PRINTP)     get @ PRINTA csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNOAMODE  DS    0H                                             CFK*JAN00\n* print the ENTRY statements at the start of the listing\n         L     R3,NENT4           get @ NENT in ESD1 csect\n         LA    R4,4(R3)           get @ first entry           CFK*DEC02\n         L     R3,0(R3)           get NENT, number of entries\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC01\n         SR    R5,R5\n         CR    R5,R3              any entries to print\n         BE    NEN                br if not\nESDL1    CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC01\n         BNE   NXTENTRY           try next if not             CFK*DEC01\n         MVC   OUTOPER(8),ENTNAME PRINT ENTRIES\n         MVC   OUTINSTR,ENTRY     copy c'ENTRY'\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNXTENTRY DS    0H                                             CFK*DEC02\n         LA    R4,ENTELEN(R4)     get @ next ENTRY slot       CFK*DEC02\n         BCT   R3,ESDL1           br if more entries to print\n         DROP  R4                 tell asm done with ENTRYMAP CFK*DEC01\nNEN      DS    0H                                             CFK*DEC02\n* print the EXTRN statements at the start of the listing if necessary\n         CLI   EXTPRTD,X'FF'      EXTRNs printed ?            CFK*DEC02\n         BE    NEXN               Yes, don't print again      CFK*DEC02\n         MVI   EXTPRTD,X'FF'      No, flag not to print again CFK*DEC02\n         L     R5,NEXT4           get @ NEXT in ESD2 csect    CFK*DEC01\n         LA    R4,4(R5)           get @ 1st EXTRN             CFK*DEC01\n         USING EXTRNMAP,R4        tell assembler\n         L     R3,0(R5)           get NEXT, number of EXTRNS/WXTRNS  01\n         LTR   R3,R3              any EXTRNS to print ?       CFK*DEC01\n         BZ    NEXN               br if not\nESDL2    CLI   EXTTYPE,EXTTCM     Is it a Common area ?       CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\n         CLI   EXTTYPE,EXTTPR     is it a Pseudo Register ?   CFK*MAY03\n         BE    NEXB               br. if yes                  CFK*MAY03\nREX      MVC   OUTOPER(8),EXTNAME copy name referenced\n         MVC   OUTINSTR,EXTRN     PRINT EXTRNS\n         CLI   EXTTYPE,EXTTWX     weak external reference ?   CFK*MAY99\n         BNE   NOTWEAK            branch if not               CFK*MAY99\n         MVI   OUTINSTR,C'W'      else change EXTRN to WXTRN  CFK*MAY99\nNOTWEAK  DS    0H                                             CFK*MAY99\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXB     LA    R4,EXTNEXT         get @ next EXTRN slot\n         BCT   R3,ESDL2           br if more EXTRNs to print\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\n         B     NEXN               skip 2nd pass code          CFK*DEC03\n* 2nd pass only code                                          CFK*DEC03\n* put this csects entry points into the address table in SAVA CFK*DEC03\nZ20A     DS    0H                                             CFK*DEC03\n         L     R3,NENT4           get @ NENT in ESD1          CFK*DEC03\n         LA    R4,4(R3)           else get @ 1st ENTRY's adr. CFK*DEC03\n         USING ENTRYMAP,R4        tell assembler              CFK*DEC03\n         ICM   R3,B'1111',0(R3)   get number of entries       CFK*DEC03\n         BZ    NEXN               if no entries skip loop     CFK*JAN04\n* start of loop to pass entry points to SAVA                  CFK*DEC03\nZ20B     DS    0H                                             CFK*DEC03\n         CLC   ENTESDID,ESDID     is it for current csect ?   CFK*DEC03\n         BNE   Z20C               skip entry if not           CFK*DEC03\n         MVC   SAVADR,ENTADR      pass ENTRY adr to SAVA      CFK*DEC03\n         MVC   SAVNAME,ENTNAME    pass ENTRY name to SAVA     CFK*DEC03\n         MVI   SAVTYPE,X'60'      ind. type of address        CFK*DEC03\n         L     R15,ASAVC          get @ SAVA csect            CFK*DEC03\n         LA    R1,SAVPARMS        get @ SAVA parms            CFK*DEC03\n         BASR  R14,R15            call SAVA                   CFK*DEC03\nZ20C     DS    0H                                             CFK*DEC03\n         LA    R4,ENTELEN(R4)     get @ next ENTRY            CFK*DEC03\n         BCT   R3,Z20B            br if more to process       CFK*DEC03\n         DROP  R4                 done with ENTRYMAP          CFK*DEC03\n* end of loop to pass entry points to SAVA                    CFK*DEC03\n* 2nd and 4th pass code\nNEXN     LA    R2,15              DROP USING TABLR\n         SR    R3,R3              clear\n         ST    R3,LNCT             line count\nUSLP     LA    R3,16(R3)\n         STM   R2,R3,DRT          save work registers\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         XC    USINGPRM,USINGPRM  clear USING parms           CFK*SEP03\n         STC   R3,USINGPRM+2      tell using to drop this reg CFK*SEP03\n         LA    R1,USINGPRM        get @ parms for USING       CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction (register)\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         LM    R2,R3,DRT          reload work registers\n         BCT   R2,USLP            br if more registers to drop\n         MVC   PLC(4),ZZ4         ) zero\n         MVC   FORHF(4),ZZ4       )  all\n         MVC   FFC(4),ZZ4         )   these\n         MVC   ACT(4),ZZ4         )    fields\n         MVI   COBRG+3,X'30'\n         MVC   FFAD(4),ZZ4        ) zero some\n         MVC   COBF(4),ZZ4        )  more fields\n         MVC   XSX(4),NXSX        copy f'60'\n         MVC   USINGPRM+4(3),ZZ4  ) zero USING parms          CFK*SEP03\n         MVI   FFC,X'FF'\n         L     R9,ACURRSEC        get @ current section ptr.  CFK*MAY01\n         L     R9,0(R9)           get @ current section desc. CFK*MAY01\n         USING ESDSDMAP,R9        tell asembler               CFK*MAY01\n         L     R3,ESDCBUF         get @ TXT header            CFK*MAY01\n         MVC   USINGPRM+4(3),0(R3)  copy 1st TXT adr to USING parms P03\n         L     R3,AENDA           get @ ENDA in TXT csect\n         L     R4,COTR4           get @ COTR csect\n         CLI   7(R4),C'A'         'A' in control card ?\n         BNE   NAS                br. if not\n         MVI   FFC+1,X'FF'\n         CLI   0(R3),C' '         end address blank ?\n         BE    PFT                br if yes\n         MVI   USINGPRM,X'01'     else flag insert call       CFK*SEP03\n         MVC   USINGPRM+4(3),0(R3)  copy to USING parms       CFK*SEP03\n         B     PFT\nNAS      CLC   0(3,R3),ZZ4        end address zero ? (but why check ?)\n         CLC   0(3,R3),FT08       end address x'000008' ?\n         BE    TFTR               br. if yes\n         CLI   0(R3),C' '         end address blank ?\n         BE    TFTR               br. if yes\n         MVC   FFAD+1(3),0(R3)    copy end address\n         L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         CLI   0(R3),X'90'        input starts with STM ?\n         BE    NFT                br. if yes\n         CLI   0(R3),X'05'        input starts with BALR ?\n         BE    NFT                br. if yes\n         MVI   PLC+1,X'FF'\n         MVI   KEY4+3,X'02'\n         CLC   16(2,R3),FEH       = x'9847' (LM 4,7, ...) ?\n         BE    TFTR               br. if equal\n         CLI   0(R3),X'47'        input starts with BC ?\n         BE    LFTXTB             br. if yes\n         MVI   COBF,X'01'         else set flag\n         B     LFTXTB\nTFTR     L     R3,ESDTBUF         get @ TXT                   CFK*MAY01\n         MVI   USINGPRM+6,X'08'   ) update USING              CFK*SEP03\n         MVC   B15(4),ZZ4         )  parms\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\n         LA    R3,4(R3)           get @ next instr.\n         DROP  R9                 was ESDSDMAP                CFK*MAY01\n         L     R9,XSX             )\n         LA    R9,8(R9)           ) bump up XSX\n         ST    R9,XSX             )\n         MVI   USINGPRM+6,X'00'   update USING parms          CFK*SEP03\n         CLC   8(4,R3),FFBR       = STM  14,12,12(13) ?\n         BE    PFT                br if so\nNFT      MVI   FFC+1,X'FF'\n         MVI   USINGPRM,X'01'     flag insert call to USING   CFK*SEP03\n         MVI   FORHF,X'FF'\n         B     LFTXTB\nPFT      MVI   USINGPRM+7,X'01'   tell USING to insert this reg K*SEP03\n         MVI   USINGPRM+2,X'F0'   set reg to insert to 15     CFK*SEP03\n         ST    R3,BRT             save @ next instruction\n         BAL   R9,USST            Call USST to generate USING card\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         LA    R1,USINGPRM        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         L     R3,BRT             reload @ next instruction\n         CLI   FFC+1,X'FF'\n         BE    LFTXTB\n         MVI   FFC,X'00'\n         MVI   FORHF,X'FF'\n         MVI   PLC+1,X'FF'        YES\n         CLI   16(R3),X'58'\n         BNE   NLS7\n         MVC   FFAD+2(2),18(R3)   FIRST EXEC ADDRESS\n         NI    FFAD+2,X'0F'\n         L     R5,B15\n         A     R5,FFAD\n         LA    R3,4(R3)\n         S     R5,XSX\n         SRL   R5,2\n         ST    R5,B15\n         LTR   R5,R5\n         BC    12,NLS7\n         B     NLS8\nNLS7     MVC   B15(4),ZZ4         set B15 to zero\nNLS8     MVC   FFAD+2(2),18(R3)\n         NI    FFAD+2,X'0F'\n         MVI   KEY4+3,X'02'       SET CONSTANT MODE\n         MVC   COBRG+3(1),18(R3)\n         NI    COBRG+3,X'F0'\n         MVC   COBA(4),ZZ4\n         L     R5,ALCOM4          get @ LCOM in ESD5 csect\n         L     R5,0(R5)           get common length\n         LA    R5,4095(R5)\n         SR    R4,R4              clear high reg. of pair\n         D     R4,F100            divide by 4096\n         L     R6,B15\n         SR    R6,R5              subtract number of common pages\n         ST    R6,B15\n         LA    R5,3(R5)\n         SLL   R5,4               multiply by 4\n         ST    R5,COBR\n* start of a loop\nLNNP     L     R5,COBR\n         LA    R5,16(R5)\n         ST    R5,COBR\n         STC   R5,USINGPRM+2        put reg. no. into USING prms *SEP03\n         CLC   COBR+3(1),COBRG+3\n         BNE   OREG\n         L     R7,B15\n         C     R7,ZZ4\n         BNH   OREG\n         M     R6,F100           mul by 4096\n         ST    R7,COBA\nOREG     MVC   USINGPRM+4(3),COBA+1 set current adr passed to USING P03\n         L     R4,COBA\n         A     R4,F100           add 4096\n         ST    R4,COBA\n         BAL   R9,USST           call USST to generate USING card\n         B     LUS4              and br. round subroutine\n* subroutine to generate USING card\nUSST     ST    R9,AFTA           save return address\n         XC    REGT(3),REGT      clear BCV parms\n         MVC   REGT+3(1),USINGPRM+2 pass register no. to BCV  CFK*SEP03\n         MVC   SAVADR,USINGPRM+4    pass adr. to SAVA csect   CFK*SEP03\n         MVI   SAVTYPE,X'60'     ind. type of address\n         MVC   SAVNAME,SPACES    clear label                  CFK*APR00\n         L     R15,ASAVC         get @ SAVA csect             CFK*SEP03\n         LA    R1,SAVPARMS       get @ parms                  CFK*SEP03\n         BASR  R14,R15           call SAVA                    CFK*SEP03\n         L     R14,BCV4          get @ BCV csect\n         ST    R13,REGT+4        put R13 where BCV expects it CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14           call BCV\nREGT     DC    F'0'\n         DC    F'0'              R13 (re)loaded from here\n         L     R4,=A(PA)         get @ PA in PASS1 csect      CFK*SEP03\n         USING OUTLINE,R4        tell assembler               CFK*FEB00\n         MVC   OUTOPER(8),SAVOUTLB copy name of this address  CFK*APR00\n         MVC   OUTINSTR(6),USI4  copy c'USING '\n         LA    R5,7              max label length - min label length\n         LA    R3,OUTOPER+7      get @ end of label\nCEC      CLI   0(R3),C' '        space ?\n         BNE   INSC              no, found end of label\n         BCTR  R3,0              else take 1 off ptr\n         BCT   R5,CEC            and loop if more to check\nINSC     MVI   1(R3),C','        put , after label\n         MVC   2(2,R3),REGT      copy register number\n         CLI   PAS45,X'FF'       2nd use of PASS4 ?\n         BE    NPCB              br. if not\n* 4th pass only code\n         L     R15,=V(PRINTP)    get @ PRINTP csect           CFK*DEC03\n         LR    R1,R4             get @ print area             CFK*DEC03\n         BASR  R14,R15           call PRINTP                  CFK*SEP03\n* 2nd and 4th pass code\nNPCB     L     R9,AFTA           reload return address\n         BR    R9                and return\n         DROP  R4                tell asm done with OUTLINE   CFK*FEB00\n* end of USST subroutine\nLUS4     L     R15,US4           get @ USING csect            CFK*SEP03\n         MVI   USINGPRM,X'01'    ind. insert call             CFK*SEP03\n         MVI   USINGPRM+7,X'01'                               CFK*SEP03\n         LA    R1,USINGPRM       get @ parms for USING        CFK*SEP03\n         BASR  R14,R15           call USING                   CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         CLC   COBR+3(1),COBRG+3\n         BL    LNNP               loop back\n* end of first big loop\n         L     R4,COBA\n         S     R4,F100            subtract 4096\n         A     R4,FFAD\n         ST    R4,FFAD\nLFTXTB   L     R14,APLCB          get @ PLCB in SPPR csect\n         MVC   4(36,R14),PLC      copy our PLC into SPPRs PLC\n* start of main loop\nLFTXT4   L     R15,AFTXTA         FETCH TEXT, get @ FTXTA     CFK*SEP03\n         CLI   SKY,X'01'          end of TXT ?\n         BE    CKEN               br. if yes\n         MVC   SKY(1),KEY4+3      copy eof flag\n         CLI   LEN4+2,X'FF'\n         LA    R1,FTXTAPRM        get @ FTXTA parms           CFK*OCT03\n         BNE   BALRF\n         MVI   KEY4+3,X'02'\nBALRF    BASR  R14,R15            call FTXTA                  CFK*SEP03\n         CLI   KEY4+3,X'01'       end of last card ?\n         BNE   NSKY               br. if not\n         MVI   SKY,X'01'          else flag end of TXT\nNSKY     MVC   KEY4+3(1),SKY\n         BAL   R9,AFT             call AFT subroutine\n         B     CKK2               branch round subroutine\n***********************************************************************\n* Subroutine to put the address on the output if necessary            *\n*                                                                     *\n* Uses R3, R4, R5, R9, R14 + regs used by PRINT (R12), ART (R3 and R4)*\n*                                                                     *\n***********************************************************************\nAFT      ST    R9,AFTA            save return address\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4\n         BE    CKK                return if not\n* 4th pass only code\n         LA    R9,PAC             get @ output buffer         CFK*SEP00\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLC   ADA(4),ZZ4         is ADA zero ?\n         BE    FXN                br. if so (ART not called yet)\nCFF      CLI   ADA,X'FF'          any known addresses left ?\n         BE    CKK                go to return if not\n         CLC   LOC3,ADAADR        current adr. = this adr. ?  CFK*MAY00\n         BE    XNA                yes - go print it\n         BL    CKK                we're not there yet, return to caller\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put -n onto output                                          CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R3,R5              calc difference             CFK*SEP00\n         CVD   R3,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+1(9),=X'604020202020202120' - and EDit mask EP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n* put address onto output                                     CFK*SEP00\nXNA      DS    0H                                             CFK*SEP00\n         CLI   ADA,X'61'          is it a CSECT ?             CFK*MAY00\n         BE    FXN                br. if so (already printed) CFK*MAY00\n         MVC   OUTLABEL,ADALABEL  else copy label             CFK*SEP00\n* get next address                                            CFK*SEP00\nFXN      L     R15,BART           FETCH NEXT ADDRESSP         CFK*SEP03\n         MVC   ADB+1(3),ADAADR    copy current address        CFK*SEP00\n         MVC   ADBC(4),ADA        copy current address        CFK*SEP00\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n* print EQUate if necessary                                   CFK*SEP00\n         CLI   OUTOPER+1,C'-'     -n on card ?                CFK*SEP00\n         BE    DOPRINT            yes, print it               CFK*SEP00\n* current address must equal last address                     CFK*SEP00\n         CLC   LOC3,ADAADR        current adr. = next adr. ?  CFK*SEP00\n         BL    RETLABEL           we're not there yet, return to caller\nDOPRINT  DS    0H                                             CFK*SEP00\n         CLI   OUTLABEL,C' '      label on card ?             CFK*SEP00\n         BE    CFF                no, skip it (must be CSECT) CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVI   PAC,C' '           ) clear                     CFK*SEP00\n         MVC   PAC+1(L'PAC-1),PAC )  output buffer            CFK*SEP00\n         B     CFF                loop back to process next address\nRETLABEL DS    0H                                             CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         MVC   OUTLABEL,PAC+OUTLABEL-OUTLINE  copy label      CFK*SEP00\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\n* 2nd and 4th pass code\nCKK      L     R9,AFTA            reload return address\n         BR    R9                 and return\n* end of AFT subroutine\nCKK2     B     LFTXT5\n* end of input TXT reached\nCKEN     XC    PAR(16),PAR        clear DECOMP parms\n         MVC   PAR+16(4),ONE      copy f'1'\n         BAS   R14,BDCM           call DECOMP (does nothing)  CFK*SEP03\n         XC    PAR+16(4),PAR+16   clear DECOMP parms\n         L     R14,ACURRSEC       get @ section desc table    CFK*JAN03\n         L     R6,0(R14)          get @ entry (& keep adr)    CFK*FEB03\n         LA    R3,ESDENTLN(R6)    get @ next section          CFK*FEB03\n         ST    R3,0(R14)          save @ next entry           CFK*JAN03\n         L     R3,NUMSECT         get number of sections      CFK*FEB03\n         BCTR  R3,0               subtract one section done   CFK*JAN03\n         ST    R3,NUMSECT         store it back               CFK*FEB03\n         LTR   R3,R3              more to process ?           CFK*JAN03\n         BNZ   Z10A               back to start if so         CFK*JAN03\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*JLY00\n         MVI   2(R3),C' '         ) clear\n         MVC   3(97,R3),2(R3)     )  print area\n         CLI   PAS45,X'FF'        SECOND USE OF PASS4 ?\n         BE    EPS2               br. if not\n* 4th pass only code\n* add trailing DS if necessary\n*        L     R6,ACURRSEC        get @ current section ptr.  CFK*JLY00\n*        L     R6,0(R6)           get @ current section desc. CFK*JLY00\n         USING ESDSDMAP,R6        tell assembler              CFK*JLY00\n         L     R5,ESDLEN          get section length          CFK*DEC01\n         XR    R2,R2              clear register              CFK*JLY00\n         ICM   R2,B'0111',LOC3    get current address         CFK*JLY00\n         AH    R2,LEN2            add last instr. length      CFK*JLY00\n         S     R5,ESDADR          subtract csect start adr.   CFK*FEB04\n         SR    R5,R2              subtract current address    CFK*JLY00\n         BZ    NOTRLDS            if zero done                CFK*JLY00\n         BP    ADDDS              if +ve add DS to make up    CFK*SEP00\n* text extends past the section length in ESD !               CFK*SEP00\n         MVC   OUTLINE(L'MSG1),MSG1  copy error message       CFK*SEP00\n         L     R15,PRINT4         get @ PRINTA csect          CFK*SEP03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*SEP03\n         B     NOTRLDS            and carry on                CFK*SEP00\nADDDS    DS    0H                                             CFK*SEP00\n         MVC   OUTINSTR(2),DS4    set up DS                   CFK*JLY00\n         CVD   R5,DWC             make length PD              CFK*JLY00\n         MVC   OUTOPER(10),=X'202020202020202120E7'   mask+X  CFK*JLY00\n         LA    R1,OUTOPER+8       point at last byte          CFK*JLY00\n         EDMK  OUTOPER-1(10),DWC+3   make decimal             CFK*JLY00\n         MVC   OUTOPER(10),0(R1)  move down length            CFK*JLY00\n         MVC   OUTINFO1(11),=C'Trailing DS'                   CFK*SEP01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 done with @ PA (OUTLINE)    CFK*JLY00\nNOTRLDS  DS    0H                                             CFK*JLY00\n         MVC   LOC3,ESDLEN3       set current adr. to end of sec *DEC01\n         DROP  R6                 done with @ ESDSDMAP        CFK*SEP00\n         BAS   R9,AFT             call AFT subroutine         CFK*SEP00\n         L     R9,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R9         tell assembler              CFK*SEP00\n         CLI   OUTLABEL,C' '      label at this address ?     CFK*SEP00\n         BE    ENDLABEL           br. if not                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVI   OUTOPER,C'*'       put * on card               CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nENDLABEL DS    0H                                             CFK*SEP00\n         CLI   ADA,X'FF'          any addresses not processed ? K*SEP00\n         BE    NCOL               br. if not                  CFK*SEP00\nCOLL     DS    0H   loop to handle addresses off end of csect CFK*SEP00\n* put ADDR2 onto output                                       CFK*AUG01\n         UNPK  OUTADDR2(7),ADAADR(4)   unpack address         CFK*AUG01\n         TR    OUTADDR2,=C'0123456789ABCDEF'-240  make chars  CFK*AUG01\n         MVI   OUTADDR2+6,C' '    clear gash byte             CFK*AUG01\n* put label EQU *+n onto output                               CFK*SEP00\n         XR    R3,R3              clear reg                   CFK*SEP00\n         ICM   R3,B'0111',LOC3    get current address         CFK*SEP00\n         XR    R5,R5              clear reg                   CFK*SEP00\n         ICM   R5,B'0111',ADAADR  get labels address          CFK*SEP00\n         SR    R5,R3              calc difference             CFK*SEP00\n         CVD   R5,DWC             make length PD              CFK*SEP00\n         MVC   OUTOPER+2(8),=X'4020202020202120' add EDit maskCFK*SEP00\n         LA    R1,OUTOPER+9       point at last byte          CFK*SEP00\n         EDMK  OUTOPER+2(8),DWC+4 make decimal                CFK*SEP00\n         MVC   OUTOPER+2(8),0(R1) move down length            CFK*SEP00\n         MVC   OUTLABEL,ADALABEL  copy label                  CFK*SEP00\n         MVC   OUTINSTR(3),EQU    put EQU on card             CFK*SEP00\n         MVC   OUTOPER(2),=C'*+'  put *+ on card              CFK*SEP00\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R9              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* get next address                                            CFK*SEP00\n         L     R15,BART           FETCH NEXT ADDRESS          CFK*SEP03\n         LA    R1,ARTPARMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call ART csect              CFK*SEP03\n         CLI   ADA,X'FF'          any more addresses ?        CFK*SEP00\n         BNE   COLL               br. if not\n         DROP  R9                 tell asm done with OUTLINE  CFK*SEP00\nNCOL     L     R2,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n* print the Pseudo Registers and Common areas\n         USING OUTLINE,R2         tell assembler              CFK*FEB00\n         L     R3,NEXT4           get @ NEXT in ESD2 csect\n         LR    R4,R3\n         LA    R4,4(R4)           get @ first entry\n         USING EXTRNMAP,R4        tell assembler              CFK*SEP02\n         L     R3,0(R3)           get number of EXTRNs\n         SR    R5,R5\n         CR    R5,R3              any EXTRNs ?\n         BE    NEXE               br if none\nESDC     DS    0H\n         CLI   EXTTYPE,EXTTPR     Pseudo Register ?           CFK*MAY03\n         BNE   NOTPR              not a common area if not    CFK*MAY03\n         MVC   OUTLABEL,EXTNAME   copy area name              CFK*MAY03\n         TM    EXTINFO,EXTIIAD    check alignment             CFK*JUN03\n         BZ    GENDXD             if byte aligned DXD         CFK*JUN03\n         MVC   OUTINSTR,=C'DSECT' else build dsect card       CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n* If we have SYM data the dsect will already be defined so    CFK*JUN03\n* we need to get back to the start of it, then pad to full    CFK*JUN03\n* length with a DS.                                           CFK*JUN03\n         MVC   OUTINSTR(3),=C'ORG'  get back to start         CFK*JUN03\n         MVC   OUTOPER(8),EXTNAME    of dsect                 CFK*JUN03\n         B     PRTORG             and go to print it          CFK*JUN03\nGENDXD   DS    0H                                             CFK*JUN03\n         MVC   OUTINSTR(3),=C'DXD'  else ind. DXD             CFK*MAY03\n         B     SETPRLEN           and go to set length        CFK*MAY03\nNOTPR    DS    0H                                             CFK*MAY03\n         CLI   EXTTYPE,EXTTCM     common area ?               CFK*MAY03\n         BNE   NEXBE              not a common area if not    CFK*MAY03\n         MVC   OUTINSTR(3),COM4   copy c'COM'\n         MVC   OUTLABEL,EXTNAME   copy common area name\nPRTORG   DS    0H                                             CFK*JUN03\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         MVC   OUTINSTR(2),DS4    copy c'DS'\nSETPRLEN DS    0H        set Common or PR length              CFK*MAY03\n         SR    R5,R5                                          CFK*MAY03\n         ICM   R5,B'0111',EXTCMLEN  get common area length    CFK*MAY03\n         CVD   R5,DWC             make it PD\n         MVC   OUTOPER(8),=X'4020202020202120' add EDit mask  CFK*MAY03\n         LA    R1,OUTOPER+7       point at last byte          CFK*MAY03\n         MVI   OUTOPER+8,C'C'     add C\n         EDMK  OUTOPER(8),DWC+4   make decimal                CFK*MAY03\n         MVC   OUTOPER(9),0(R1)   move down length            CFK*MAY03\n         CLI   EXTNAME,C' '       was common name blank ?     CFK*MAY03\n         BNE   PCM                br. if not\n         MVI   OUTLABEL,C'B'      else set name to B00000\n         MVC   OUTLABEL+1(5),BZ5  copy c'00000'\nPCM      L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R2              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\nNEXBE    DS    0H                                             CFK*MAY03\n         LA    R4,EXTNEXT         get @ next entry in EXTRN table MAY03\n         BCT   R3,ESDC            loop if more EXTRNs to check\n         DROP  R4                 tell asm done with EXTRNMAP CFK*SEP02\n         DROP  R2                 tell asm done with OUTLINE  CFK*FEB00\nNEXE     DS    0H\n* code to print using table deleted from here                 CFK*SEP00\n         MVI   PAS45,X'FF'        flag not 2nd use of PASS4\n         MVI   EXTPRTD,x'00'      clear EXTRNs printed flag   CFK*JAN04\n         L     R3,COTR4           get @ COTR csect\n         MVI   2(R3),X'00'        clear control flag\n         L     R14,=A(SVK)        get @ flag in SAVA          CFK*DEC01\n         MVI   0(R14),X'00'       clear 2nd pass flag         CFK*DEC01\nZ99X     DS    0H                 exit point                  CFK*NOV01\n         L     R3,=A(PA)          PRINT END                   CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*DEC01\n         MVC   OUTINSTR(3),ENDF4  copy c'END '                CFK*DEC01\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print line            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*DEC01\n         LEAVE ,                  STOP                        CFK*SEP03\n* this code only executed on the 2nd pass, ie 1st use of PASS4\nEPS2     MVI   PAS45,X'00'        flag 2nd use of PASS4\n         SR    R3,R3              ) clear KEY4\n         ST    R3,KEY4            )  (FTXT parm)\n         LEAVE ,                  return to PASS0             CFK*SEP03\n* 2nd and 4th pass code\nLFTXT5   MVC   FMTLOC3,LOC3       copy current address\n         MVC   FMTFL1,INST4+8     copy AXNFLG1\n         MVC   LEN4(4),KEY4+4     copy instruction length\n         MVC   RT4(8),INST4       copy instruction TEXT\n         L     R15,ROUT4          get @ format routine        CFK*NOV03\nRF5      DS    0H                                             CFK*NOV03\n         LA    R1,FMTPRM          get @ parameters            CFK*NOV03\n         BASR  R14,R15            call format routine         CFK*NOV03\n         CLI   SIN,X'01'\n         BE    GONE\n         MVC   FPTL(8),KEY4       copy FTXT output to SPPR parms\n         MVC   FPTL+8(12),INST4   copy FTXT output to SPPR parms\n         MVC   FPTL+20(8),LEN4    copy instruction length to SPPR\n         MVC   FPTL+28(4),ROUT4   pass @ decoding routine to SPPR\n         CLC   RT4(4),IMM         is instruction TXT C'IMM=' ?\n         BNE   SPRT               branch if not\n         MVI   SIN,X'01'\n         MVI   KEY4+3,X'02'\n         MVI   FPTL+3,X'02'\nSPRT     L     R15,ASPPR          get @ SPPR csect            CFK*SEP03\n         LA    R1,FPTL            get @ SPPR parms            CFK*SEP03\n         BASR  R14,R15            call SPPR                   CFK*SEP03\n         MVC   KEY4(8),FPTL\n         MVC   LEN4(4),FPTL+20\n         CLI   FPTL+28,X'01'\n         BE    LFTXT4             loop back\n         CLI   FPTL+28,X'02'\n         BNE   GONE\n         L     R15,ROUTC           get @ CONST csect\n         ST    R15,ROUT4\n         B     RF5                go back to call CONST\nGONE     LA    R14,RETD           set return adr for DECOMP   CFK*SEP03\n         MVC   PAR+1(3),LOC3      setup DECOMP\n         MVC   PAR+4(8),INST4      parms\n         MVC   PAR+12(4),ONE      copy f'1'\n         CLC   ROUT4(4),ACONST    is it @ CONST csect ?\n         BNE   CARL\n         XC    PAR+12(4),PAR+12   clear DECOMP parms\n         B     BDCM\nCARL     CLC   ROUT4(4),AARL      rout4 = @ ARL csect ?\n         BNE   BDCM\n         MVC   PAR+12(4),X84      copy x'84000000'\n         L     R1,ASBCZ           get @ SBCZ in ARL csect\n         CLI   0(R1),X'FF'        EXTRN present ?\n         BE    BDCM               NO, skip copy\n         MVC   PAR+13(3),ASBCZ+1  copy @ SBCZ in ARL csect\nBDCM     L     R15,ADECO          get @ DECOMP csect\n         CNOP  2,4\n         BALR  R1,R15             call DECOMP\nPAR      DC    6F'0'\nRETD     CLI   PAS45,X'FF'        2nd use of PASS4 ?\n         BE    LFTXT4             loop back if not\n*** DECOMP has the following code\n*DECO     TITLE 'DECOMP DUMMY'\n*DECOMP   CSECT\n*         USING *,15\n*         L     15,20(1)\n*         BR    14                                            CFK*SEP03\n*         END\n*** end of DECOMP code\n* 4th pass only code\n         L     R3,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         CLI   OUTINSTR,C' '      anything to print ?\n         BE    LSPK               br if not\n         L     R4,LNCT            get LINE COUNT\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   OUTSTMT,NED        copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    OUTSTMT,DLC+5      add line count to listing\n         L     R15,=V(PRINTP)     get @ PRINTP csect          CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         DROP  R3                 tell asm done with OUTLINE  CFK*FEB00\nLSPK     L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         CLI   0(R3),X'FF'        IS SECOND LINE\n         BNE   LFTXT4             TO BE PRINTED\n         CLI   3(R3),C' '         YES\n         BE    LPA4\n         MVI   0(R3),C' '\n         MVC   CD5+3(5),3(R3)     pass number to CDN\n         L     R14,ACDN           CONVERT TO HEX\n         ST    R13,CD5R13         put R13 where CDN expects   CFK*SEP03\n         CNOP  2,4\n         BALR  R14,R14            call CDN csect\nCD5      DC    C'0000'            ) BCD number to\n         DC    F'0'               )  convert to binary number\nCD5R13   DC    F'0'               R13 (re)loaded from here\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect\n         MVC   LOC3,CD5+5         set current address\n         BAL   R9,AFT             call AFT subroutine\nLPA4     L     R4,=A(PA)          get @ PA in PASS1 csect     CFK*SEP03\n         L     R3,=A(PAB)         get @ PAB in PASS1 csect    CFK*SEP03\n         MVC   55(8,R3),55(R4)    copy label\n         MVC   1(90,R4),0(R4)     clear PA\n         MVI   0(R3),C' '\n         L     R4,LNCT            get line count\n         LA    R4,1(R4)           add 1\n         ST    R4,LNCT            save new line count\n         MVC   47(6,R3),NED       copy EDit mask\n         CVD   R4,DLC             make line count decimal\n         ED    47(6,R3),DLC+5     add line count to listing\n         L     R15,=V(PRINTP)     PRINT A LINE                CFK*DEC03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTP                 CFK*SEP03\n         B     LFTXT4             loop back\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\nMVQQ     MVC   77(1,R3),0(R4)     EXecuted instruction\n         DROP  R3                 done with OUTLINE           CFK*FEB00\nIMM      DC    C'IMM='            mark start of constant area\n         LTORG                                                CFK*DEC02\nHUD      DC    F'99'                size of equate table\nFF94     DC    F'59'                constant\nCOTR4    DC    A(COTR)              @ COTR csect\nALCT4    DC    A(LCT)               @ LCT in PRINTA csect\nDRT      DC    D'0'\nDLC      DC    D'0'\nLNCT     DC    F'0'                 line count\nAFTXTA   DC    A(FTXTA)             @ FTXTA csect             CFK*SEP03\nSTW4     DC    F'1'                 not used ?\nSEV4     DC    F'7'                 constant\nFZ4      DC    X'000004'            constant\nPRINT4   DC    A(PRINTA)            @ PRINTA csect            CFK*SEP03\nNPROGA   DC    A(NPROG)             @ NPROG in ESD0 csect     CFK*JAN00\nACURRSEC DC    A(CURRSECT)          @ current section desc.   CFK*JLY00\nUS4      DC    A(USING)             @ USING csect\nASPPR    DC    A(SPPR)              @ SPPR csect\nAPLCB    DC    A(PLCB)              @ PLCB in SPPR csect\nNED      DC    X'402020202121'      EDit mask for line count\nENDF4    DC    C'END '              constant\nBART     DC    A(ART)               @ ART csect\nXSX      DC    F'96'\nB15      DC    F'0'\nZZ4      DC    F'0'                 constant\nDLC4     DC    D'0'\nRGL4     DC    F'0'\nEQU      DC    C'EQU '              constant\nAFTA     DC    F'0'                 USST and AFT save return adr. here\nALCOM4   DC    A(LCOM)              @ LCOM in ESD5 csect\nMSG1     DC    C'**  TXT extends off end of section **'       CFK*SEP00\nADB      DC    F'0'\nFT08     DC    X'000008'            constant\nADBC     DC    F'0'                 not used ?\nEXTRN    DC    C'EXTRN'             constant\nENTRY    DC    C'ENTRY'             constant\nCSECT    DC    C'CSECT'             constant\nRMODEANY DC    C'RMODE ANY'         constant                  CFK*JAN00\nAMODEANY DC    C'AMODE ANY'         constant                  CFK*JAN00\nSPACES   DC    CL8' '               constant                  CFK*APR00\nNENT4    DC    A(NENT)              @ NENT in ESD1 csect\nNEXT4    DC    A(NEXT)              @ NEXT in ESD2 csect\nAENDA    DC    A(ENDA)              @ ENDA in TXT csect\nFFBR     DC    X'90ECD00C'          constant, STM  14,12,12(13)\nSKY      DC    F'0'                 flag\nBRT      DC    F'0'                 save r3 during USST/USING call\nACDN     DC    A(CDN)               @ CDN csect\nROUTC    DC    A(CONST)             @ CONST csect\nASAVC    DC    A(SAVA)              @ SAVA csect\nBCV4     DC    A(BCV)               @ BCV csect\nUSI4     DC    C'USING '            constant\nCOM4     DC    C'COM '              constant\nDS4      DC    C'DS  '              constant\nNXSX     DC    F'60'                constant\nSIN      DC    F'0'\nFEH      DC    X'9847'              constant\nCOAD     DC    X'FFFFFF00'          constant\nDSA      DC    F'0'\nDWC      DC    D'0'\nDW4      DC    F'0'\nBC       DC    F'0'\nBZ5      DC    C'00000'             constant\nF100     DC    F'4096'              constant\nCOBR     DC    F'0'\nPLC      DC    F'0'                 ) these\nCOBRG    DC    F'48'                )  fields\nCOBA     DC    F'0'                 )   copied\nACT      DC    F'0'                 )    into\nCOBF     DC    F'0'                 )     PLCB\nFFAD     DC    F'0'                 )      in\nFFC      DC    F'0'                 )       SPPR\nFORHF    DC    F'0'                 )        csect\nPAS45    DC    X'FF000000'          ) flags, 1st byte made x'00' to\n*                                     indicate the 2nd use of PASS4\nEXTPRTD  EQU   PAS45+1,1              flag, EXTRNs printed    CFK*DEC02\nACONST   DC    A(CONST)             @ CONST csect\nAARL     DC    A(ARL)               @ ARL csect\nADECO    DC    A(DECOMP)            @ DECOMP csect\nONE      DC    F'1'                 constant\nX84      DC    X'84000000'          constant\nASBCZ    DC    A(SBCZ)              @ SBCZ in ARL csect\nNUMSECT  DS    F                    number of sections        CFK*FEB03\n* parms to call ART                                           CFK*SEP03\nARTPARMS DS    0CL12                                          CFK*SEP03\nADA      DC    F'0'               entry point, ref'ed by CONST FK*SEP03\nADAADR   EQU   ADA+1,3            3 byte address of label     CFK*SEP03\nADALABEL DS    CL8                8 byte label at this address FK*SEP03\n* end of ART parms                                            CFK*SEP03\n* parms to call format routines                               CFK*NOV03\nFMTPRM   DC    A(PA)              @ PA in PASS1 csect         CFK*NOV03\nLEN4     DC    F'0'               instruction length          CFK*NOV03\nRT4      DC    XL8'00'            instruction TEXT            CFK*NOV03\nFMTLOC3  DC    XL3'00'            3 byte IC                   CFK*NOV03\nFMTFL1   DC    X'00'              copy of AXNFLG1             CFK*NOV03\n* end of format routine parms                                 CFK*NOV03\n* parms to call SAVA                                          CFK*SEP03\nSAVPARMS DS    0XL20                                          CFK*SEP03\nSAVTYPE  DC    X'00'             type of address\nSAVASECT DS    CL8               csect label is in            CFK*DEC03\nSAVADR   DC    XL3'00'           address to save\nSAVOUTLB DS    0CL8              output label                 CFK*MAY00\nSAVNAME  DC    CL8' '            label at this address        CFK*APR00\n* end of SAVA parms\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n* parms to call USING                                         CFK*SEP03\nUSINGPRM DS    0XL8                                           CFK*SEP03\nUSFLAG   DC    X'0'              flag byte                    CFK*SEP03\n         DS    X                 not used ?                   CFK*SEP03\nUSADR1   DS    X                                              CFK*SEP03\nUSADR2   DS    X                                              CFK*SEP03\nUSLOC    DS    XL3               current location (inserts)   CFK*SEP03\nUSFMT    DS    X                 instr format                 CFK*SEP03\n* end of USING parms                                          CFK*SEP03\n* parms to call FTXTA                                         CFK*SEP03\nFTXTAPRM DS    0F                                             CFK*SEP03\n         DC    A(PA)              @ PA in PASS1 csect\nKEY4     DC    F'0'               flag, set to F'1' at end of last card\n         DC    X'0'               copy of AXNFMT for instr\n         DC    X'0'               copy of AXNOPER for instr\nLEN2     DC    H'0'               halfword length of instruction found\nROUT4    DC    A(CKEN)            output @ decoding routine   CFK*JUN01\nINST4    DC    2F'0'              output TEXT of instruction/constant\nLOC4     DC    F'0'               output AXNFLG1 + current address\nLOC3     EQU   LOC4+1,3           output, current address     CFK*JAN00\n         DC    F'0'\n* end of FTXTA parms                                          CFK*SEP03\n* parms to call SPPR                                          CFK*SEP03\nFPTL     DC    8F'0'\n         DC    F'0'\n* end of SPPR parms                                           CFK*SEP03\nSAVEAREA DS    18F                save area                   CFK*SEP03\nPAC      DC    CL133' '             3rd print buffer, for AFT CFK*SEP00\n         YREGS                      register equates          CFK*JLY00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PR": {"ttr": 4874, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PR       TITLE 'PR  '\n***********************************************************************\n*                                                                     *\n*        format object code in listing                                *\n*                                                                     *\n*        as xx xx             - 2 byte instructions                   *\n*           xx xx x xxx       - 4 byte instructions                   *\n*           xx xx x xxx x xxx - 6 byte instructions                   *\n*                                                                     *\n*  called by FTXTA                                                    *\n*                                                                     *\n*  input: addresed by R1                                              *\n*    +0  - @ output area                                              *\n*    +4  - instruction to format                                      *\n*    +12 - instruction length                                         *\n*                                                                     *\n*  history:                                                           *\n*    map output line with outline macro                  CFK feb 2000 *\n*    user register equates                               CFK nov 2000 *\n*    map parameters with dsect                           CFK dec 2000 *\n*    use standard entry/exit logic + don't use CXN       CFK jun 2001 *\n*                                                                     *\n***********************************************************************\nPRMDUM   DSECT                    parameters                  CFK*DEC00\nPRM@PA   DS    A                  @ output area               CFK*DEC00\nPRMINST  DS    XL6                2-6 byte inst to format     CFK*DEC00\n         DS    XL2                padding                     CFK*DEC00\nPRMILEN  DS    XL4                instruction length          CFK*DEC00\n*                                                             CFK*DEC00\n         OUTLINE                  map output line             CFK*FEB00\nPR       CSECT\n         ENTER ,                  entry logic                 CFK*JUN01\n         USING PRMDUM,R1          tell assembler about parms  CFK*JUN01\n         L     R3,PRM@PA          get @ output area\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         UNPK  HEXWORK,PRMINST(7) unpack input + 1 byte       CFK*JUN01\n         MVZ   HEXWORK(12),ZEROES clear high nybbles          CFK*JUN01\n         TR    HEXWORK(12),=C'0123456789ABCDEF'      make hex CFK*JUN01\n         MVC   OUTOBJ1,HEXWORK    output first byte           CFK*JUN01\n         MVC   OUTOBJ2,HEXWORK+2  output second byte          CFK*JUN01\n         CLI   PRMILEN+3,X'04'    check instruction length    CFK*JUN01\n         BL    PRET               if 2 byte instr. exit       CFK*JUN01\n         MVC   OUTOBJ3,HEXWORK+4  1st base register           CFK*JUN01\n         MVC   OUTOBJ4,HEXWORK+5  1st displacement            CFK*JUN01\n         BE    PRET               if 4 byte instr. exit       CFK*JUN01\n         MVC   OUTOBJ5,HEXWORK+8  2nd base reg                CFK*JUN01\n         MVC   OUTOBJ6,HEXWORK+9  2nd displacement            CFK*JUN01\nPRET     LEAVE ,                  return to caller            CFK*JUN01\nZEROES   DC    XL12'00'           binary zeroes               CFK*JUN01\nHEXWORK  DS    CL13               work area to unpack to      CFK*JUN01\n         YREGS                    register equates            CFK*NOV00\nSAVEAREA DS    18F                                            CFK*SEP03\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRINTA": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PRTA     TITLE 'STANDARDIZED PRINT WITH ERROR ROUTINE     AUG. 14,1967'\n***********************************************************************\n*                                                                     *\n*  Standard print csect to write to PRDD.                             *\n*                                                                     *\n*  Input @ R1 - 133 byte area to print                                *\n*                                                                     *\n*  Called by COUNT, ESD, ESD0, ESD1, ESD2, LSYM, PASS1, PASS4,        *\n*  PRINTP, READA, RLD, SPPR, SYM and TXT.                             *\n*                                                                     *\n*  The input area is cleared to spaces after it is printed.           *\n*                                                                     *\n* History:                                                            *\n*   Add opt to bypass call to PUNCH for this record only. CFK May 1999*\n*   Change header to ESA/370.                             CFK Jun 1999*\n*   Change header to ESA/390.                             CFK Dec 1999*\n*   Change header for INFO output.                        CFK Apr 2000*\n*   Changed DCB to RECFM=FBA instead of FA.               CFK Nov 2000*\n*   Use register equates.                                 CFK Dec 2000*\n*   Don't call PUNCH (now done by PRINTP).                CFK Dec 2000*\n*                                                                     *\n***********************************************************************\nPRINTA   CSECT\n         ENTRY LCT                printer line count, ref'ed by PASS4\n*                                 and COUNT\n         ENTRY PRDCB              used by PASS5 to close this DCB\n         STM   R14,R12,12(R13)    **************\n         BASR  R12,0              *            *              CFK*DEC03\n         USING *,R12              *  STANDARD  *\n         ST    R13,SVPR+4         *   S/360    *\n         LR    R11,R13            *  LINKAGE   *\n         LA    R13,SVPR           *            *\n         ST    R13,8(R11)         **************\n         LR    R3,R1              LOAD DATA SOURCE ADR        CFK*DEC03\n         TM    PRDCB+48,X'10'     IS PRINT DATA SET OPEN?\n         BO    OKPR               BRANCH IF YES\n         OPEN  (PRDCB,(OUTPUT))   NO, OPEN DATA SET\n         TM    PRDCB+48,X'10'     WAS PRINT OPEN SUCCESSFUL?\n         BO    PG1                BRANCH IF YES\n         ABEND 2,DUMP             DUMP IF UNABLE TO OPEN PRINT\nPG1      DS    0H\n         PUT   PRDCB,MSG          PRINT HEADER MESSAGE\nOKPR     L     R5,LCT             )\n         LA    R5,1(R5)           ) INCREMENT LINE COUNT\n         ST    R5,LCT             )\n         C     R5,FFT             IS THIS LAST LINE OF PAGE\n         BL    PRNT               BRANCH IF NO\n         LA    R5,1               RE-SET LINE\n         ST    R5,LCT             COUNT TO ONE\n         L     R5,PCT             INCREMENT\n         LA    R5,1(R5)           PAGE COUNT\n         ST    R5,PCT             BY ONE\n         CVD   R5,DPCT            GET DECIMAL PAGE COUNT\n         UNPK  PAGE+4(3),DPCT+5(3)\n         CLI   PAGE+4,C'0'        REMOVE\n         BNE   NOBLK\n         MVI   PAGE+4,C' '        LEADING\n         CLI   PAGE+5,C'0'\n         BNE   NOBLK              ZEROES\n         MVI   PAGE+5,C' '\nNOBLK    OI    PAGE+6,C'0'        REMOVE DECIMAL SIGN (ZONE)\n         PUT   PRDCB,HEAD         PRINT PAGE HEADING\n         MVI   0(R3),C'0'         SKIP LINE AFTER HEADING\nPRNT     PUT   PRDCB,0(R3)        PRINT A LINE FROM CALLING PROGRAM\n         MVI   0(R3),C' '         CLEAR DATA SOURCE LOCATIONS\n         MVC   1(134,R3),0(R3)    IN CALLING PROGRAM\n         L     R13,SVPR+4         **********\n         LM    R14,R12,12(R13)    * RETURN *\n         BR    R14                **********\nPRERR    MVC   0(44,R3),PRMSG     *** PRINTER ERROR ROUTINE ***\n         MVC   45(87,R3),44(R3)   CLEAR PRINT POS BEYOND 45\n         B     OKPR               PRINT ERROR MESSAGE & CONTINUE\nLCT      DC    F'0'               PRINTER LINE COUNT\nFFT      DC    F'60'              MAX LINE COUNT PER PAGE\nPCT      DC    F'0'               PAGE COUNT\nDPCT     DC    D'0'               DECIMAL PAGE COUNT\nSVPR     DC    18F'0'             PRINT-READ SAVE AREA\nPRMSG    DC    CL45' *** PRINTER ERROR *** (CHECK PREVIOUS LINE) '\nHEAD     DC    CL48'1   LOC  OBJECT CODE          ADDR1     ADDR2 '\n         DC    CL55' STMT          SOURCE STATEMENT   APR 2000' K*APR00\nVER      DC    CL19'  FLAGS DUMP FMT   '                      CFK*APR00\nPAGE     DC    CL10'PAGE '\nMSG      DC    CL132'1 ESA/390 DISASSEMBLER PROCESSING MESSAGES'\n         EJECT\nPRDCB    DCB   DDNAME=PRDD,DSORG=PS,MACRF=(PM),RECFM=FBA,EROPT=ACC,SYNAX\n               D=PRERR,LRECL=132                              CFK*NOV00\n         YREGS ,                   register equates           CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRINTP": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00!\\x01\\x04\\x00/\\x01\\x04\\x00/\\x12%\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-02T00:00:00", "modifydate": "2004-01-02T12:25:21", "lines": 28, "newlines": 28, "modlines": 0, "user": "U765139"}, "text": "PRINTP TITLE 'Print and Punch output record'\n***********************************************************************\n*                                                                     *\n*  Print and Punch an output record.                                  *\n*                                                                     *\n*  Input @ R1 - 133 byte area to print                                *\n*       r1+54 - 80 byte card image passed to PUNCH                    *\n*                                                                     *\n*  Called by LSYM, PASS4, SPPR and SYM.                               *\n*                                                                     *\n*  The record is punched first because PRINTA clears the input area   *\n*  after printing it.                                                 *\n*                                                                     *\n*  History:                                                           *\n*    Newly written.                                       CFK Dec 2003*\n*                                                                     *\n***********************************************************************\nPRINTP   CSECT\n         ENTER  ,                      entry logic\n         LR     R2,R1                  copy @ input\n         LA     R1,54(R1)              get @ card image\n         CALLS  PUNCH                  punch input record\n         LR     R1,R2                  copy @ print line\n         CALLS  PRINTA                 and print it.\n         LEAVE  ,                      exit logic\nSAVEAREA DS    18F                                            CFK*JAN04\n         REGEQU                        register equates\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PUNCH": {"ttr": 5126, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PUNCH    TITLE 'STANDARDIZED PUNCH WITH DISK OUTPUT       AUG. 14,1967'\n***********************************************************************\n*                                                                     *\n* Standard routine to write card images to DADD and possibly PUDD.    *\n*                                                                     *\n* Called directly by PASS3 and PRINTP.                                *\n* Called via PRINTP by LSYM, PASS4, SPPR and SYM.                     *\n*                                                                     *\n* Input - @ R1, 80 byte card image.                                   *\n*                                                                     *\n* History:                                                            *\n*   Changed DCB's to recfm FB instead of recfm F          CFK May 1994*\n*   Don't put /* at end of output                         CFK Mar 2000*\n*   Use register equates                                  CFK Dec 2000*\n*   Use standard linkage                                  CFK Dec 2003*\n*                                                                     *\n***********************************************************************\nPUNCH    CSECT\n         ENTRY PUDCB,DADCB        used by PASS5 to close these files\n         EXTRN COTR               csect\n         ENTER ,                  entry logic                 CFK*DEC03\n         LR    R2,R1              SAVE DATA ADR\n         TM    DADCB+48,X'10'     ARE DATA SETS OPEN?\n         BO    OKPU               BRANCH IF YES\n         OPEN  (PUDCB,(OUTPUT),DADCB,(OUTPUT))\n         TM    DADCB+48,X'10'     WAS DISK OPEN SUCCESSFUL?\n         BO    TPDS               BRANCH IF YES\n         ABEND 1,DUMP             DUMP IF UNABLE TO OPEN DISK\nTPDS     TM    PUDCB+48,X'10'     WAS PUNCH OPEN SUCCESSFUL?\n         BO    OKPU               BRANCH IF YES\n         ABEND 3,DUMP             DUMP IF UNABLE TO OPEN PUNCH\nOKPU     CLI   9(R2),C' '         IS COL 10 BLANK\n         MVI   LT,X'00'           flag to punch card\n         BNE   MV                 branch if not blank\n         CLI   10(R2),C' '        IS COL 11 BLANK\n         MVI   LT,X'01'           flag not to punch card if so\n         BE    RTN                SKIP CARD IF YES\n         LA    R2,1(R2)           NO,MOVE IMAGE LEFT ONE COL\nMV       MVC   PUNO(76),0(R2)     MOVE DATA TO PUNCH AREA\n         L     R3,PCCT\n         LA    R3,1(R3)           INCREMENT CARD COUNT\n         ST    R3,PCCT\n         CVD   R3,DW              OBTAIN DECIMAL COUNT\n         UNPK  PUNO+76(4),DW+5(3) PLACE UNPACKED COUNT IN COL 77-80\n         OI    PUNO+79,X'F0'      REPLACE SIGN BY ZONE (F)\n         L     R5,PCOTR           get @ control card image in COTR\n         CLI   LT,X'00'           LT clear ?\n         BE    PUP                punch card if so.\n         CLI   2(R5),C'P'         TEST FOR PUNCH INDICATOR\n         BNE   WRDA               skip punch if not set.\nPUP      PUT   PUDCB,PUNO         PUNCH A CARD\nWRDA     PUT   DADCB,PUNO         CARD TO DISK FOR LATER ASM STEP\nRTN      DS    0H                 **********                  CFK*DEC03\n         LEAVE ,                  * RETURN *                  CFK*DEC03\nDW       DC    D'0'               UNPACKED CARD COUNT\nPCOTR    DC    A(COTR)            ADR OF CONTROL CARD IMAGE\nPCCT     DC    F'0'               PUNCH CARD COUNT\nPUNO     DS    20F                PUNCH AREA\nSAVEAREA DS    18F                save area                   CFK*DEC03\nLT       DC    X'00'              flag byte\nENDC     DC    CL3'END'\n         EJECT\nPUDCB    DCB   DDNAME=PUDD,DSORG=PS,MACRF=(PM),RECFM=FB,      CFK*MAY94X\n               LRECL=80\nDADCB    DCB   DDNAME=DADD,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80 *MAY94\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "READA": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x04\\x01_\\x01\\x04\\x01_\\x128\\x00V\\x00V\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-15T00:00:00", "modifydate": "2004-01-15T12:38:49", "lines": 86, "newlines": 86, "modlines": 0, "user": "U765139"}, "text": "READ     TITLE 'STAND. READ WITH EOF && RDERR ROUTINES   AUG. 14, 1967'\n***********************************************************************\n*                                                                     *\n* Standard read routine to read the next input card from RDDD.        *\n*                                                                     *\n* Called by PASS1 and PASS3.                                          *\n*                                                                     *\n* Input, @ R1                                                         *\n*   +0 - @ 80 byte buffer to put the card in                          *\n*                                                                     *\n* Return is to where R14 points if a card was succesfully read.       *\n*                                                                     *\n* If an I/O error occurs an error message is issued and the next card *\n* is read.                                                            *\n*                                                                     *\n* History:                                                            *\n*   Changed DCB from recfm F to recfm FB.               CFK May 2000  *\n*   Use register equates.                               CFK Dec 2000  *\n*   Don't output error message at EOF if last card was  CFK Sep 2001  *\n*   an END card.                                                      *\n*   Set RC 0 if not EOF                                 CFK Oct 2003  *\n*   Tidy up calls to PRINTA                             CFK Dec 2003  *\n*   Return with RC 8 of EOF, not branch to EXIT         CFK Jan 2004  *\n*                                                                     *\n***********************************************************************\nREADA    CSECT\n         ENTRY RDDCB              used by PASS5 to close this DCB\n         ENTRY ENDFLAG            set by END of EOF valid     CFK*SEP01\n         EXTRN EXIT               in PASS0 csect\n         EXTRN PA                 in PASS1 csect\n         EXTRN PRINTA             csect\n         STM   R14,R12,12(R13)    **************\n         BALR  R12,0              *            *\n         USING *,R12              *  STANDARD  *\n         ST    R13,SVRD+4         *   S/360    *\n         LR    R11,R13            *  LINKAGE   *\n         LA    R13,SVRD           *            *\n         ST    R13,8(R11)         **************\n         L     R5,0(R1)           LOAD DATA DESTINATION ADR\n         TM    RDDCB+48,X'10'     IS READ DATA SET OPEN?\n         BO    OKRD               BRANCH IF YES\n         OPEN  (RDDCB,(INPUT))    NO, OPEN DATA SET\n         TM    RDDCB+48,X'10'     WAS OPEN SUCCESSFUL?\n         BO    OKRD               BRANCH IF YES\n         ABEND 4,DUMP             DUMP IF UNABLE TO OPEN READ\nOKRD     GET   RDDCB,0(R5)        READ A CARD INTO CALLING PROGRAM\n         MVI   ENDFLAG,X'00'      flag EOF not valid          CFK*SEP01\n         L     R13,SVRD+4         **********\n         LM    R14,R12,12(R13)    * RETURN *\n         XR    R15,R15            set good RC                 CFK*OCT03\n         BR    R14                **********\nRDERR    DS    0H                                             CFK*DEC03\n         L     R1,APA             ERROR MESSAGE\n         MVC   0(40,R1),RDMSG     AND CARD IMAGE\n         MVC   40(80,R1),0(R5)    TO PRINT AREA\n         MVI   119(R1),C' '       BLANK REMAINING\n         MVC   120(11,R1),119(R1) PRINT POSITIONS\n         LA    R1,APA             LOAD PRINT PARM\n         L     R15,APRN           PRINT ERROR MESSAGE\n         LA    R14,OKRD           THEN READ NEXT CARD\n         BR    R15                OVER ERROR IMAGE\nEOF      DS    0H                 *** END OF FILE ROUTINE *** CFK*SEP01\n         CLI   ENDFLAG,X'FF'      is EOF valid ?              CFK*SEP01\n         BE    EXITEOF            if so exit                  CFK*JAN04\n         L     R1,APA             else get @ PRINT area\n         MVC   0(32,R1),EOFMG     EOF MSG TO PRINT AREA\n         MVC   33(100,R1),32(R1)  CLEAR PRINT POS BEYOND 32\n         MVC   54(31,R1),EOFMG+1  EOF MSG TO CARD IMAGE\n         L     R15,APRN           get @ PRINTA csect\n         BASR  R14,R15            PRINT EOF MESSAGE, THEN     CFK*JAN04\nEXITEOF  DS    0H                                             CFK*JAN04\n         L     R13,SVRD+4         **********                  CFK*JAN04\n         LM    R14,R12,12(R13)    * RETURN *                  CFK*JAN04\n         LA    R15,8              set EOF RC                  CFK*JAN04\n         BR    R14                **********                  CFK*JAN04\nSVRD     DC    18F'0'             READ TO PRINT SAVE AREA\nAPA      DC    A(PA)              ADR OF PRINT AREA\nAPRN     DC    A(PRINTA)          ADR OF STANDARDIZED PRINT ROUTINE\nRDMSG    DC    CL40' *** READ ERROR *** THIS CARD IGNORED : '\nEOFMG    DC    CL33'0*** END OF FILE TERMINATION *** '\nENDFLAG  DC    X'00'              set to X'FF' if EOF valid   CFK*SEP01\n         EJECT\nRDDCB    DCB   DDNAME=RDDD,DSORG=PS,MACRF=(GM),RECFM=FB,LRECL=80,      X\n               EODAD=EOF,EROPT=ACC,SYNAD=RDERR\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REGEQU": {"ttr": 5131, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         REGEQU\n         PUSH  PRINT\n         AIF   ('&SYSPARM' NE 'SUP').ACC01\n         PRINT OFF,NOGEN\n.ACC01   ANOP\n*\n***      SYMBOLIC REGISTER EQUATES\n*\n         SPACE 2\n* GENERAL PURPOSE REGISTERS\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n* FLOATING POINT REGISTERS\n         SPACE\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         SPACE\n* EXTENDED CONTROL REGISTERS\n         SPACE\nC0       EQU   0\nC1       EQU   1\nC2       EQU   2\nC3       EQU   3\nC4       EQU   4\nC5       EQU   5\nC6       EQU   6\nC7       EQU   7\nC8       EQU   8\nC9       EQU   9\nC10      EQU   10\nC11      EQU   11\nC12      EQU   12\nC13      EQU   13\nC14      EQU   14\nC15      EQU   15\n         POP   PRINT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLD": {"ttr": 5133, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLD      TITLE 'RLD '\n***********************************************************************\n*                                                                     *\n*  Process RLD card from input.                                       *\n*                                                                     *\n*  Called by PASS1.                                                   *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    +0 - @ input card                                                *\n*                                                                     *\n*  History:                                                           *\n*    Map RLD cards.                                       CFK Mar 2000*\n*    Exit after issuing RLD buffer full message.          CFK Dec 2000*\n*    Use register equates.                                CFK Dec 2000*\n*    Check RLD length is valid (1-56).                    CFK Jan 2002*\n*    Allow for up to 250 RLD cards.                       CFK Nov 2002*\n*    Put RLD data into dynamic area.                  CFK Mar-Apr 2003*\n*    Expand RLD data into dynamic area ready to sort. CFK Apr-May 2003*\n*    Use standard linkage conventions                     CFK Sep 2003*\n*    Tidy up call to PRINTA.                              CFK Dec 2003*\n*                                                                     *\n***********************************************************************\nRLDCARD  DSECT            from-to map RLD cards\nRLDCON1  DS    X'02'         1-1  constant x'02'\nRLDCON2  DS    CL3'RLD'      2-4  constant\n         DS    CL6           5-10 blanks\nRLDCLEN  DS    XL2          11-12 number of bytes of RLD data\nRLDCLEN1 EQU   RLDCLEN+1,1        1 byte data length\n         DS    CL4          13-16 blanks\nRLDCDATA DS    XL56         17-72 1 to 56 bytes of RLD data\nRLDCSEQ  DS    CL8          73-80 sequence number and/or deck ID\n*\n         RLDITEM                  map RLD item on input card  CFK*APR03\n*                                                             CFK*APR03\n         RLDARRAY                                             CFK*MAY03\n*                                                             CFK*APR03\nRLD      CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY NBR                ref'ed by CRLD\n         EXTRN PA                 Print Area in PASS1 csect\n         EXTRN PRINTA             csect                       CFK*SEP03\n         EXTRN ARLDE              in CRLD csect               CFK*MAR03\n         CLC   NBR(4),RL200       rld buffer full ?\n         BL    SRLD               no - ok\n*                  we need a (larger) RLD buffer              CFK*MAR03\n         ST    R1,RL1             save r1                     CFK*SEP03\n         L     R5,RLDBUFLN        get current length          CFK*MAR03\n         LA    R3,4096-112(R5,R5) calc new buffer len-112     CFK*APR03\n         ST    R3,RL200           save new max safe length    CFK*APR03\n         LA    R0,112(R3)         calc new buffer length      CFK*APR03\n         LR    R3,R0              copy new length             CFK*MAR03\n         ST    R0,RLDBUFLN        save new length             CFK*MAR03\n*                                                             CFK*MAR03\n         GETMAIN RU,LV=(0),SP=1   get new buffer              CFK*APR03\n*                                                             CFK*MAR03\n         L     R4,RLDBUF@         get old address             CFK*MAR03\n         ST    R1,RLDBUF@         save new address            CFK*MAR03\n         L     R14,AARLDE         get @ ARLDE in CRLD         CFK*MAR03\n         ST    R1,0(R14)          point ARLDE @ new buffer    CFK*MAR03\n         LTR   R0,R5              copy old length             CFK*MAR03\n         BZ    NOBUFFER           if no old buffer skip free  CFK*MAR03\n         LR    R2,R1              copy new address            CFK*MAR03\n         LR    R1,R4              copy old buffer address     CFK*MAR03\n         MVCL  R2,R4              copy old data               CFK*MAR03\n*                                                             CFK*MAR03\n         FREEMAIN RU,LV=(0),A=(1),SP=1 free old buffer        CFK*APR03\n*                                                             CFK*MAR03\nNOBUFFER DS    0H                                             CFK*MAR03\n         L     R1,RL1             reload @ parms              CFK*SEP03\nSRLD     DS    0H                                             CFK*MAR03\n         L     R1,0(R1)           get @ input card\n         USING RLDCARD,1          tell assembler              CFK*MAR00\n         LH    R4,RLDCLEN         get data length             CFK*MAR03\n         CH    R4,=H'0'           any data on card ?          CFK*MAR03\n         BNH   BADCARD            error if none               CFK*MAR03\n         CH    R4,=H'56'          valid length ?              CFK*MAR03\n         BNH   GOODCARD           branch if OK                CFK*JAN02\nBADCARD  DS    0H                                             CFK*JAN02\n         L     R3,=A(PA)          get @ print area            CFK*SEP03\n         MVC   0(27,R3),=C'** invalid data length'  copy msg  CFK*JAN02\n         MVC   28(80,R3),RLDCARD  add card to message         CFK*JAN02\n         L     R15,XRPT           get @ PRINTA csect          CFK*SEP03\n         LR    R1,R3              get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*SEP03\n         LEAVE ,                  and exit                    CFK*SEP03\nGOODCARD DS    0H                                             CFK*JAN02\n         LA    R5,RLDCDATA        get @ first entry on card   CFK*MAY03\n         USING RLDITEM,R5                                     CFK*MAY03\n         L     R3,RLDBUF@         get @ RLD buffer            CFK*MAR03\n         A     R3,NBR             calc @ new point to fill    CFK*MAR03\n         USING RLDARRAY,R3                                    CFK*MAY03\nNEXTITEM DS    0H                                             CFK*MAY03\n         TM    LASTFLAG,RLDAFNXT  last entry continued ?      CFK*MAY03\n         BO    MOVE4              br if continued             CFK*MAY03\n         MVC   RLDASDID,RLDISDID  copy current section ID     CFK*MAY03\n         MVC   RLDATGID,RLDITGID  copy target section ID      CFK*MAY03\n         LA    R5,RLDIFLAG        point @ short entry         CFK*MAY03\n         DROP  R5                                             CFK*MAY03\n         SH    R4,=H'4'           sub data len moved          CFK*MAY03\n         B     MOVEREST           and skip copy of prev IDs   CFK*MAY03\nMOVE4    DS    0H                                             CFK*MAY03\n         SH    R3,=H'8'           get @ prev entry            CFK*MAY03\n         MVC   8(4,R3),0(R3)      copy section IDs            CFK*MAY03\n         LA    R3,8(R3)           back to current entry       CFK*MAY03\nMOVEREST DS    0H                                             CFK*MAY03\n         USING RLDIFLAG,R5                                    CFK*MAY03\n         MVC   RLDAADR,RLDIADR    copy address                CFK*MAY03\n         MVC   RLDAFLAG,RLDIFLAG  copy flags byte             CFK*MAY03\n         MVC   LASTFLAG,RLDIFLAG  and save it for next item   CFK*MAY03\n         LA    R3,8(R3)           Point @ next output entry   CFK*MAY03\n         LA    R5,4(R5)           point @ input entry         CFK*MAY03\n         SH    R4,=H'4'           sub data len moved          CFK*MAY03\n         BP    NEXTITEM           loop if more data on card   CFK*MAY03\n         S     R3,RLDBUF@         calc new bytes used         CFK*MAY03\n         ST    R3,NBR             save loc in buffer          CFK*APR03\n         LEAVE ,                  exit                        CFK*SEP03\n         LTORG                                                CFK*DEC02\nXRPT     DC    A(PRINTA)          @ PRINTA csect              CFK*SEP03\nAARLDE   DC    A(ARLDE)           @ ARLDE in CRLD csect       CFK*MAR03\nRL1      DC    F'0'               r1  saved here during call to PRINT\n* the next three fields must stay together, see PASS0         CFK*DEC03\nNBR      DC    F'0'               entry point ( bytes used in array)\nRL200    DC    F'0'               available RLD table length  CFK*MAR03\nRLDBUFLN DC    A(0)               RLD buffer length           CFK*MAR03\nRLDBUF@  DC    A(0)               RLD buffer address          CFK*MAR03\nSAVEAREA DS    18F                save area                   CFK*SEP03\nLASTFLAG DC    X'00'              flags for last RLD entry    CFK*MAY03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RLDARRAY": {"ttr": 5136, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x03\\x13\\x9f\\x01\\x03\\x13\\x9f\\x124\\x00\\x18\\x00\\x18\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-05-19T00:00:00", "modifydate": "2003-05-19T12:34:05", "lines": 24, "newlines": 24, "modlines": 0, "user": "U765139"}, "text": "         MACRO                                                          RLDARRAY\n         RLDARRAY\nRLDARRAY DSECT            entry in RLD array                            RLDARRAY\nRLDATGID DS    XL2        ESDID of csect that contains target           RLDARRAY\n*                           X'0000' if type=PR cum length               RLDARRAY\nRLDAKEY  DS    0CL5       key to sort table on                          RLDARRAY\nRLDASDID DS    XL2        ESDID of csect that contains item             RLDARRAY\nRLDAADR  DS    XL3        assigned address of adcon                     RLDARRAY\nRLDAFLAG DS    X          flag field (values as RLDIFLAG)               RLDARRAY\nRLDAFTYP EQU   B'11110000'          mask for type                       RLDARRAY\nRLDAFTNB EQU   B'00000000'          type=nonbranch (A type)             RLDARRAY\nRLDAFTBR EQU   B'00010000'          type=branch (V type)                RLDARRAY\nRLDAFTQ  EQU   B'00100000'          type=Q                              RLDARRAY\nRLDAFTPR EQU   B'00110000'          type=pseudo register cum len (CXD)  RLDARRAY\nRLDAFL2  EQU   B'00000100'          length=2 bytes                      RLDARRAY\nRLDAFL3  EQU   B'00001000'          length=3 bytes                      RLDARRAY\nRLDAFL4  EQU   B'00001100'          length=4 bytes (also mask for len)  RLDARRAY\nRLDAFDIR EQU   B'00000010'          direction (0=+ve, 1=-ve)            RLDARRAY\nRLDAFNXT EQU   B'00000001'          0=next item has different R or P    RLDARRAY\n*                                     pointer, they are present in it.  RLDARRAY\n*                                   1=next item has same R and P        RLDARRAY\n*                                     pointers, they are omitted.       RLDARRAY\nRLDALEN  EQU   *-RLDARRAY length of one entry                           RLDARRAY\n         MEND                                                           RLDARRAY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RLDITEM": {"ttr": 5138, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          RLDITEM\n         RLDITEM                                                        RLDITEM\nRLDITEM  DSECT                                                          RLDITEM\nRLDITGID DS    XL2                ESDID of csect that contains target   RLDITEM\n*                                   X'0000' if type=PR cum length       RLDITEM\nRLDISDID DS    XL2                ESDID of csect that contains item     RLDITEM\nRLDIFLAG DS    X                  flag field (TTTTLLSN)                 RLDITEM\nRLDIFTYP EQU   B'11110000'          mask for type                       RLDITEM\nRLDIFTNB EQU   B'00000000'          type=nonbranch                      RLDITEM\nRLDIFTBR EQU   B'00010000'          type=branch                         RLDITEM\nRLDIFTPR EQU   B'00110000'          type=pseudo register cum length     RLDITEM\nRLDIFL2  EQU   B'00000100'          length=2 bytes                      RLDITEM\nRLDIFL3  EQU   B'00001000'          length=3 bytes                      RLDITEM\nRLDIFL4  EQU   B'00001100'          length=4 bytes (also mask for len)  RLDITEM\nRLDIFDIR EQU   B'00000010'          direction (0=+ve, 1=-ve)            RLDITEM\nRLDIFNXT EQU   B'00000001'          0=next item has different R or P    RLDITEM\n*                                     pointer, they are present in it.  RLDITEM\n*                                   1=next item has same R and P        RLDITEM\n*                                     pointers, they are omitted.       RLDITEM\nRLDIADR  DS    XL3                assigned address of adcon             RLDITEM\n         MEND                                                           RLDITEM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RLDSORT": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00@\\x01\\x03\\x13\\x9f\\x01\\x04\\x15O\\x127\\x00T\\x00R\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-05-19T00:00:00", "modifydate": "2004-06-02T12:37:40", "lines": 84, "newlines": 82, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n*  Sort entries in the RLD array.                                     *\n*                                                                     *\n*  Called from TXT when an END card has been read.                    *\n*                                                                     *\n*  Standard entry/exit logic                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* History:                                                            *\n*   First written                                        CFK May 2003 *\n*                                                                     *\n***********************************************************************\n         RLDARRAY\nRLDSORT  CSECT\n         EXTRN ARLDE                  @ RLD array (in CRLD)\n         EXTRN NBR                    bytes used in RLD array (in RLD)\n         ENTER\n         L     R8,=A(NBR)             get @ bytes used\n         L     R8,0(R8)               get bytes used (8 * num entries)\n         SRL   R8,3                   calc number of entries\n         BCTR  R8,0                   calc number of entries - 1\n         L     R10,=A(ARLDE)          get @ @ RLD array\n         L     R10,0(R10)             get @ RLD array\n* sort all addresses with a shell sort\n* first calculate maximum step size\n         LA    R3,1                   prepare index\n         LTR   R4,R8                  copy no. of adr. - 1\n         BNP   SORTDONE               skip if 1 or no entries to sort\n         SRA   R4,3                   divide by 8 for max step size\n         BZ    Z10B                   if < 8 adr. step size=1\nZ10A     DS    0H\n         MH    R3,=H'3'               multiply by 3\n         LA    R3,1(R3)               and add 1\n         CR    R3,R4                  until\n         BL    Z10A                   r3 >= no. addresses/8\nZ10B     DS    0H\n* start of sort proper\n         MH    R3,=AL2(RLDALEN)       calc stride\nZ20A     DS    0H                     REPEAT\n         XR    R4,R4                  FOR R4 = 0 TO R3 - 1\nZ30A     DS    0H                     ditto\n         LR    R5,R8                  copy no. of adr. - 1\n         MH    R5,=AL2(RLDALEN)       calc offset to last ent\n         AR    R5,R10                 calc @ last entry\nZ35B     DS    0H                     REPEAT\n         XR    R7,R7                  clear new limit\n         LA    R6,0(R4,R10)           calc @ first entry in this bank\n         USING RLDARRAY,R6            tell assembler\n         LA    R9,0(R3,R6)            calc @ next entry in this bank\nZ40A     DS    0H                     FOR R6 = R4 TO R5 STEP R3\n         CLC   RLDAKEY,RLDAKEY-RLDARRAY(R9)  are they in seq ?\n         BNH   Z50A                   already sorted.\n         LM    R0,R1,RLDARRAY         )\n         MVC   RLDARRAY(8),0(R9)      ) swap entries\n         DROP  R6                     )         (RLDARRAY)\n         USING RLDARRAY,R9            )\n         STM   R0,R1,RLDARRAY         )\n         LR    R7,R6                  set new limit\nZ50A     DS    0H\n         AR    R6,R3                  bump pointer\n         AR    R9,R3                  bump other pointer\n         CR    R9,R5                  got to the end ?\n         BNH   Z40A                   NEXT R6 if not.\n         LTR   R5,R7                  copy new limit\n         BNZ   Z35B                   UNTIL no swaps done\n         AH    R4,=AL2(RLDALEN)       point @ next bank\n         CR    R4,R3                  done all banks ?\n         BL    Z30A                   do next bank if needed\n         SH    R3,=AL2(RLDALEN)       subtract 1 * entry size\n         BZ    SORTDONE               have we just done 1 step size ? 0\n         XR    R2,R2                  clear high reg of r2,r3\n         D     R2,=F'3'               else divide by 3\n         B     Z20A                   and carry on.\n         DROP  R9                     done with RLDARRAY\n* finished main loop\nSORTDONE DS    0H\n         LEAVE                        exit program\n         LTORG\nSAVEAREA DS    18F                save area                   CFK*JUN04\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RR": {"ttr": 5380, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RR       TITLE ' RR '\n***********************************************************************\n*                                                                     *\n*  Module to format the parameters for RR and RRE format instructions *\n*                                                                     *\n*  Input: addressed by R14, mapped by FMTPARMS macro                  *\n*    +0  - @ output buffer                                            *\n*    +4  - instruction format                                         *\n*    +5  - operand format (not used for RR/RRE instructions)          *\n*    +6  - instruction length                                         *\n*    +8  - instruction to format (2 bytes used, 6 reserved)           *\n*    +16 - IC (3 byte instruction counter)                            *\n*    +19 - instruction format from AXN table                          *\n*    +20 - module returns to here                                     *\n*                                                                     *\n*  Instruction formats:                                               *\n*    X'10' (FMTFRR)  -  RR,  eg SR   1,2                              *\n*    X'11' (FMTFRR1) -  RR1, eg SPM  1                                *\n*    X'12' (FMTFRR2) -  RR2, eg BR   14                               *\n*    X'13' (FMTFE)   -  E,   eg PR                                    *\n*                                                                     *\n* History                                                             *\n*   Check BASR as well as BALR instructions for USING bases. May 1994 *\n*   Add SVC description to SVC calls                     CFK May 1994 *\n*   Gen SVC number correctly                             CFK Apr 1999 *\n*   Format RRE instructions                              CFK Jun 1999 *\n*   Format all RR/RRE with only 1 reg needed             CFK Jun 1999 *\n*   Ignore format E instructions (no operands)           CFK Jun 1999 *\n*   Use FMTPARMS macro to map parameters                 CFK Jun 1999 *\n*   Use OUTLINE macro to map output line                 CFK Feb 2000 *\n*   Support RR2 instructions, extended branches          CFK Apr 2000 *\n*   Put comment on BCR 15,0 CPU serialization            CFK May 2000 *\n*   Add CA's secret SVCs to the SVC comment table        CFK Jun 2000 *\n*   Use register equates                                 CFK Dec 2000 *\n*   USING now uses standard linkage conventions.         CFK Sep 2003 *\n*   Use standard linkage conventions                     CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         FMTPARMS                 copy parameter map          CFK*JUN99\n         OUTLINE                  map output line             CFK*FEB00\nRR       CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         EXTRN PAB                in PASS1 csect\n         EXTRN USING              csect\n         EXTRN BCV                csect\n         CLI   FMTFMT,FMTFE       E format ?                  CFK*JUN99\n         BE    RET                branch if yes (no operands) CFK*JUN99\n         MVC   RG+3(1),FMTTEXT2   copy registers to BCV parms\n         CLI   FMTTEXT1,X'40'     four byte instruction ?     CFK*JUN99\n         BL    NOTRRE             no - it's not RRE           CFK*JUN99\n         MVC   RG+3(1),FMTTEXT4   copy RRE registers to BCV parms JUN99\nNOTRRE   DS    0H                                             CFK*JUN99\n         MVC   CRR+3(1),RG+3      copy registers to USING parms\n         MVC   RG(3),Z3           clear rest of BCV parms\n         CLI   FMTTEXT,X'0A'      SVC INSTR ?\n         BE    DEC                BRANCH IF YES\n         L     R14,ABCV           CONVERT REGISTER TO\n         ST    R13,RG+4           BCD\n         CNOP  2,4\n         BALR  R14,R14            call BCV csect\nRG       DC    F'0'\n         DC    F'0'               callers r13 reloaded from here\n         L     R3,FMTPA           get @ o/p buffer\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         CLI   FMTFMT,FMTFRR2     only 2nd reg needed ?       CFK*APR00\n         BNE   NOTRR2             branch if not               CFK*APR00\n         MVC   RG(2),RG+2         else move down registers    CFK*APR00\n         CLC   FMTTEXT(2),=XL2'07F0'   hardware syncpoint ?   CFK*MAY00\n         BNE   NOTRR2             branch if not               CFK*MAY00\n         MVC   OUTOPER+14(13),=C'Serialize CPU'       flag it CFK*MAY00\nNOTRR2   DS    0H                                             CFK*APR00\n         MVC   OUTOPER(2),RG      copy register no (2 byte)\n         CLI   RG,C'0'            reg 0-9 ?\n         BNE   RRZ                if not leave 2 byte reg no.\n         MVC   OUTOPER(1),RG+1    else copy 1 byte reg no.\n         MVI   OUTOPER+1,C' '     put a space after it\n         BCT   R3,RRZ             dec pointer to o/p buffer\nRRZ      CLI   FMTFMT,FMTFRR1     only 1 reg. needed ?\n         BNL   RET                if so finished\n         MVI   OUTOPER+2,C','     NO - add comma\n         MVC   OUTOPER+3(2),RG+2  add 2nd reg no.\n         CLI   RG+2,C'0'          reg 0-9 ?\n         BNE   RRZ2               if not leave 2 byte reg no.\n         MVC   OUTOPER+3(1),RG+3  else copy 1 byte reg no.\n         MVI   OUTOPER+4,C' '     and put a space after it.\nRRZ2     DS    0H\n         CLI   FMTTEXT,X'0D'      BASR inst ?                 CFK*MAY94\n         BE    RRZ3               if so check USING           CFK*MAY94\n         CLI   FMTTEXT,X'05'      BALR INST ?\n         BNE   RET                if not exit\nRRZ3     DS    0H                                             CFK*MAY94\n         CLC   RG+2(2),ZER        balr x,0 ?\n         BNE   RET                if not exit\n         CLC   RG(2),ZER          balr 0,0 ?\n         BE    RET                if so exit (reg 0 can't be a base)\n         L     R3,PCR             get @ PAB in pass1\n         MVC   OUTINSTR(8),US     set next card to USING *,\n         MVI   0(R3),X'FF'        flag card inserted\n         MVC   OUTOPER+2(2),RG    add reg to USING card\n         MVC   CRR+4(4),FMTIC     pass IC to using\n         MVC   CRR+2(1),FMTTEXT2  pass reg no.\n         MVI   CRR,X'01'          flag insert\n         DROP  R3                 tell assembler r3 changed   CFK*FEB00\n         L     R3,CRR+4\n         A     R3,F12             add 512 to IC passed to USING\n         ST    R3,CRR+4\n         L     R15,AUSI           ENTER IC IN USING TABLE     CFK*SEP03\n         LA    R1,CRR             get @ USING parms           CFK*SEP03\n         BASR  R14,R15            call USING csect            CFK*SEP03\n         B     RET                and exit\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\nCRR      DC    F'0'               x'01' flag, xl1'0', 2x'r0' reg no.\n         DC    F'0'               IC (instruction counter ?)\n* format a SVC's parameters\nDEC      L     R3,RG              output SVC no in decimal\n         CVD   R3,RGD\n         L     R3,FMTPA           get @ o/p buffer\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         MVC   CWRK,=X'40202120'  prepare to EDit             CFK*APR99\n         LA    R1,CWRK+3          prime r1                    CFK*APR99\n         EDMK  CWRK,RGD+6         generate SVC number         CFK*APR99\n         MVC   OUTOPER(3),0(R1)   move it to output buffer    CFK*APR99\n         L     R14,RG             get SVC number              CFK*MAY94\n         SLL   R14,3              mul by svc table entry length (8) Y94\n         LA    R14,SVCTAB(R14)    @ SVC description           CFK*MAY94\n         MVC   OUTOPER+14(8),0(R14)  copy SVC description     CFK*MAY94\nRET      LEAVE ,                  return to caller            CFK*NOV03\n         DC    C'IMM='\n         LTORG\nABCV     DC    A(BCV)             @ BCV csect\nAUSI     DC    A(USING)           @ USING csect\nPCR      DC    A(PAB)             @ PAB in PASS1\nINSTR    DC    C'  '\nCWRK     DC    CL4' '             work area for EDMK          CFK*MAY94\n         DC    CL2' '             continuation of work area   CFK*MAY94\nRGD      DC    D'0'               space to convert SVC # to decimal\nRR14     DC    F'0'               save area for r14\nF12      DC    F'512'             constant\nZ3       DC    F'0'               constant\nZER      DC    X'F0F0'\nUS       DC    C'USING *,'\nSAVEAREA DS    18F                                            CFK*SEP03\n         DS    0F\n*   table of svc descriptions (all added in may 1999)\nSVCTAB   DC    CL8'EXCP    '       00            0\n         DC    CL8'WAIT    '       01            1\n         DC    CL8'POST    '       02            2\n         DC    CL8'EXIT    '       03            3\n         DC    CL8'GETMAIN '       04            4\n         DC    CL8'FREEMAIN'       05            5\n         DC    CL8'LINK    '       06            6\n         DC    CL8'XCTL    '       07            7\n         DC    CL8'LOAD    '       08            8\n         DC    CL8'DELETE  '       09            9\n         DC    CL8'GMN/FRMN'       0A           10\n         DC    CL8'TIME    '       0B           11\n         DC    CL8'SYNCH   '       0C           12\n         DC    CL8'ABEND   '       0D           13\n         DC    CL8'SPIE    '       0E           14\n         DC    CL8'ERREXCP '       0F           15\n         DC    CL8'PURGE   '       10           16\n         DC    CL8'RESTORE '       11           17\n         DC    CL8'BLDL    '       12           18\n         DC    CL8'OPEN    '       13           19\n         DC    CL8'CLOSE   '       14           20\n         DC    CL8'STOW    '       15           21\n         DC    CL8'OPEN J  '       16           22\n         DC    CL8'CLOSE T '       17           23\n         DC    CL8'DEVTYPE '       18           24\n         DC    CL8'TRKBAL  '       19           25\n         DC    CL8'LOCATE  '       1A           26\n         DC    CL8'OBTAIN  '       1B           27\n         DC    CL8'CVOL   *'       1C           28  also CAIRIM\n         DC    CL8'SCRATCH '       1D           29\n         DC    CL8'RENAME  '       1E           30\n         DC    CL8'FEOV    '       1F           31\n         DC    CL8'ALLOC   '       20           32\n         DC    CL8'IOHALT  '       21           33\n         DC    CL8'QEDIT   '       22           34\n         DC    CL8'WTO/WTOR'       23           35\n         DC    CL8'WTL     '       24           36\n         DC    CL8'SEGLD   '       25           37\n         DC    CL8'RESERVED'       26           38\n         DC    CL8'LABEL   '       27           39\n         DC    CL8'EXTRACT '       28           40\n         DC    CL8'IDENTIFY'       29           41\n         DC    CL8'ATTACH  '       2A           42\n         DC    CL8'CIRB    '       2B           43\n         DC    CL8'CHAP    '       2C           44\n         DC    CL8'OVLYBRCH'       2D           45\n         DC    CL8'TTIMER  '       2E           46\n         DC    CL8'STIMER  '       2F           47\n         DC    CL8'DEQ     '       30           48\n         DC    CL8'RESERVED'       31           49\n         DC    CL8'RESERVED'       32           50\n         DC    CL8'SNAP    '       33           51\n         DC    CL8'RESTART '       34           52\n         DC    CL8'RELEX   '       35           53\n         DC    CL8'DISABLE '       36           54\n         DC    CL8'EOV     '       37           55\n         DC    CL8'ENQ/RSV '       38           56\n         DC    CL8'FREEDBUF'       39           57\n         DC    CL8'RELBUF  '       3A           58\n         DC    CL8'OLTEP   '       3B           59\n         DC    CL8'(E)STAE '       3C           60\n         DC    CL8'IKJEGS6A'       3D           61\n         DC    CL8'DETACH  '       3E           62\n         DC    CL8'CHKPT   '       3F           63\n         DC    CL8'RDJFCB  '       40           64\n         DC    CL8'RESERVED'       41           65\n         DC    CL8'BTAMTEST'       42           66\n         DC    CL8'RESERVED'       43           67\n         DC    CL8'SYNADAF '       44           68\n         DC    CL8'BSP     '       45           69\n         DC    CL8'GSERV   '       46           70\n         DC    CL8'ASGNBFR '       47           71\n         DC    CL8'CHATR   '       48           72\n         DC    CL8'SPAR    '       49           73\n         DC    CL8'DAR     '       4A           74\n         DC    CL8'DQUEUE  '       4B           75\n         DC    CL8'IFBSTAT '       4C           76\n         DC    CL8'RESERVED'       4D           77\n         DC    CL8'LSPACE  '       4E           78\n         DC    CL8'STATUS  '       4F           79\n         DC    CL8'RESERVED'       50           80\n         DC    CL8'SETPRT  '       51           81\n         DC    CL8'DASDR   '       52           82\n         DC    CL8'SMFWTM  '       53           83\n         DC    CL8'GRAPHICS'       54           84\n         DC    CL8'DDRSWAP '       55           85\n         DC    CL8'ATLAS   '       56           86\n         DC    CL8'DOM     '       57           87\n         DC    CL8'MOD88   '       58           88\n         DC    CL8'RESERVED'       59           89\n         DC    CL8'RESERVED'       5A           90\n         DC    CL8'VOLSTAT '       5B           91\n         DC    CL8'TCBEXCP '       5C           92\n         DC    CL8'TGET/PUT'       5D           93\n         DC    CL8'STCC    '       5E           94\n         DC    CL8'SYSEVENT'       5F           95\n         DC    CL8'STAX    '       60           96\n         DC    CL8'TSO TEST'       61           97\n         DC    CL8'PROTECT '       62           98\n         DC    CL8'DYNALLOC'       63           99\n         DC    CL8'IKJEFFIB'       64          100\n         DC    CL8'QTIP    '       65          101\n         DC    CL8'AQCTL   '       66          102\n         DC    CL8'XLATE   '       67          103\n         DC    CL8'TOPCTL  '       68          104\n         DC    CL8'IMAGLIB '       69          105\n         DC    CL8'RESERVED'       6A          106\n         DC    CL8'MODESET '       6B          107\n         DC    CL8'RESERVED'       6C          108\n         DC    CL8'ESR TP 4'       6D          109\n         DC    CL8'DSTATUS '       6E          110\n         DC    CL8'SVCHAM  '       6F          111\n         DC    CL8'PGRLSE  '       70          112\n         DC    CL8'PGFX/FRE'       71          113\n         DC    CL8'EXCPVR  '       72          114\n         DC    CL8'RESERVED'       73          115\n         DC    CL8'ESR TP 1'       74          116\n         DC    CL8'DEBCHK  '       75          117\n         DC    CL8'RESERVED'       76          118\n         DC    CL8'TESTAUTH'       77          119\n         DC    CL8'GMN/FRM '       78          120\n         DC    CL8'VSAM    '       79          121\n         DC    CL8'EVENTS  '       7A          122\n         DC    CL8'PURGEDQ '       7B          123\n         DC    CL8'TPIO    '       7C          124\n         DC    CL8'EVENTS  '       7D          125\n         DC    CL8'MSS INTF'       7E          126\n         DC    CL8'RESERVED'       7F          127\n         DC    CL8'RESERVED'       80          128\n         DC    CL8'RESERVED'       81          129\n         DC    CL8'RACHECK '       82          130\n         DC    CL8'RACINIT '       83          131\n         DC    CL8'RACLIST '       84          132\n         DC    CL8'RACDEF  '       85          133\n         DC    CL8'RESERVED'       86          134\n         DC    CL8'RESERVED'       87          135\n         DC    CL8'RESERVED'       88          136\n         DC    CL8'ESR     '       89          137\n         DC    CL8'PGSER   '       8A          138\n         DC    CL8'CVAF Req'       8B          139\n         DC    CL8'RESERVED'       8C          140\n         DC    CL8'RESERVED'       8D          141\n         DC    CL8'RESERVED'       8E          142\n         DC    CL8'RESERVED'       8F          143\n         DC    CL8'RESERVED'       90          144\n         DC    CL8'RESERVED'       91          145\n         DC    CL8'RESERVED'       92          146\n         DC    CL8'RESERVED'       93          147\n         DC    CL8'RESERVED'       94          148\n         DC    CL8'RESERVED'       95          149\n         DC    CL8'RESERVED'       96          150\n         DC    CL8'RESERVED'       97          151\n         DC    CL8'RESERVED'       98          152\n         DC    CL8'RESERVED'       99          153\n         DC    CL8'RESERVED'       9A          154\n         DC    CL8'RESERVED'       9B          155\n         DC    CL8'RESERVED'       9C          156\n         DC    CL8'CA-UNIV*'       9D          157  CA !\n         DC    CL8'RESERVED'       9E          158\n         DC    CL8'CAS9SVC*'       9F          159  CA !\n         DC    CL8'RESERVED'       A0          160\n         DC    CL8'RESERVED'       A1          161\n         DC    CL8'RESERVED'       A2          162\n         DC    CL8'RESERVED'       A3          163\n         DC    CL8'RESERVED'       A4          164\n         DC    CL8'RESERVED'       A5          165\n         DC    CL8'RESERVED'       A6          166\n         DC    CL8'RESERVED'       A7          167\n         DC    CL8'LVSSSVC*'       A8          168  CA !\n         DC    CL8'RESERVED'       A9          169\n         DC    CL8'RESERVED'       AA          170\n         DC    CL8'RESERVED'       AB          171\n         DC    CL8'RESERVED'       AC          172\n         DC    CL8'RESERVED'       AD          173\n         DC    CL8'RESERVED'       AE          174\n         DC    CL8'RESERVED'       AF          175\n         DC    CL8'RESERVED'       B0          176\n         DC    CL8'RESERVED'       B1          177\n         DC    CL8'RESERVED'       B2          178\n         DC    CL8'RESERVED'       B3          179\n         DC    CL8'RESERVED'       B4          180\n         DC    CL8'RESERVED'       B5          181\n         DC    CL8'RESERVED'       B6          182\n         DC    CL8'RESERVED'       B7          183\n         DC    CL8'RESERVED'       B8          184\n         DC    CL8'RESERVED'       B9          185\n         DC    CL8'RESERVED'       BA          186\n         DC    CL8'RESERVED'       BB          187\n         DC    CL8'RESERVED'       BC          188\n         DC    CL8'RESERVED'       BD          189\n         DC    CL8'RESERVED'       BE          190\n         DC    CL8'RESERVED'       BF          191\n         DC    CL8'RESERVED'       C0          192\n         DC    CL8'RESERVED'       C1          193\n         DC    CL8'RESERVED'       C2          194\n         DC    CL8'RESERVED'       C3          195\n         DC    CL8'RESERVED'       C4          196\n         DC    CL8'RESERVED'       C5          197\n         DC    CL8'RESERVED'       C6          198\n         DC    CL8'CA     *'       C7          199  CA !\n         DC    56CL8'User SVC'     User SVCs   200-255\n         YREGS ,                   register equates       CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RS": {"ttr": 5387, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RS       TITLE 'RS '\n***********************************************************************\n*                                                                     *\n*           Format the parameters of a RS format instruction          *\n*                                                                     *\n*    eg  STM   1,2,456(7)          if format = x'30', FMTFRS          *\n*    or  SRA   1,456(7)            if format = x'31', FMTFRS1         *\n*    or  PLO   1,456(7),2,789(10)  if format = x'32', FMTFRS2         *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  - @ output buffer                                            *\n*    +4  - instruction format                                         *\n*    +5  - operand format                                             *\n*    +6  - instruction length                                         *\n*    +8  - instruction TEXT (4 or 6 bytes)                            *\n*    +19 - instruction format from AXN table                          *\n*    +20 - module returns to here                                     *\n*                                                                     *\n*  History:                                                           *\n*    Check instr. format to see if 2nd reg needed        CFK Jun 1999 *\n*    Support FMTFRS2 (PLO)                               CFK Dec 1999 *\n*    Uap output line with OUTLINE macro                  CFK Feb 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         FMTPARMS                 copy parameter map          CFK*JUN99\n         OUTLINE                  map output line             CFK*FEB00\nRS       CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         EXTRN BCV                csect\n         EXTRN ADDR               csect\n         MVC   RSG+15(1),FMTFLG1  pass instr. format to ADDR\n         SR    R2,R2              )\n         ST    R2,RSG             ) clear ADDR parms\n         ST    R2,RSG+4           )\n         MVC   RSG+8(4),FMTPA     pass @ output buffer to ADDR\n         MVC   RSG+2(2),FMTTEXT3  pass instr. address to ADDR\n         MVI   RSG+4,X'01'        flag type 1 address\n         ST    R13,RSA+4          put our r13 where BSC expects it\n         SR    R2,R2              clear\n         ST    R2,RSA              BCV parms\n         MVC   RSA+3(1),FMTTEXT2  pass registers to BCV\n         L     R14,BCVS           FIND REGISTERS\n         CNOP  2,4\n         BALR  R14,R14            call BCV csect\nRSA      DC    F'0'\n         DC    F'0'               r13 reloaded from here\n         L     R15,ADDS           get @ ADDR csect            CFK*NOV03\n         LA    R1,RSG             get @ parms for ADDR        CFK*NOV03\n         BASR  R14,R15            call ADDR csect             CFK*NOV03\n         L     R4,FMTPA           get @ output buffer\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\n         CLI   RSA,C'0'           reg 0-9 ?\n         BNE   RS1                no\n         MVC   OUTOPER(1),RSA+1   yes - copy 1 byte reg no.\n         BCTR  R4,0               dec o/p buffer ptr\n         B     RS2                and continue\nRS1      MVC   OUTOPER(2),RSA     copy 2 byte reg no.\nRS2      MVI   OUTOPER+2,C','     add ,\n         CLI   FMTFMT,FMTFRS      2nd register needed ?\n         BNE   RSOV               branch if 2nd reg not needed\n         CLI   RSA+2,C'0'         reg 0-9 ?\n         BNE   RS3                no\n         MVC   OUTOPER+3(1),RSA+3 yes - copy 1 byte reg no.\n         BCTR  R4,0               dec o/p bufer ptr\n         B     RS4                and continue\nRS3      MVC   OUTOPER+3(2),RSA+2 copy 2 byte reg no.\nRS4      MVI   OUTOPER+5,C','     add 2nd ,\n         LA    R4,3(R4)           allow for 2nd digit\nRSOV     L     R3,RSG+12          get length of address\n         BCTR  R3,0               - 1 for mvc\n         EX    R3,MVS             copy address to o/p buffer\n         CLI   FMTFMT,FMTFRS2     any more to do ?            CFK*DEC99\n         BNE   EXIT               branch if we are done       CFK*DEC99\n         AR    R4,R3              calc @ end of 1st address   CFK*DEC99\n         MVI   OUTOPER+4,C','     add 3rd ,                   CFK*DEC99\n         CLI   RSA+2,C'0'         reg 0-9 ?                   CFK*DEC99\n         BNE   RS5                no                          CFK*DEC99\n         MVC   OUTOPER+5(1),RSA+3 yes - copy 1 byte reg no.   CFK*DEC99\n         BCTR  R4,0               dec o/p bufer ptr           CFK*DEC99\n         B     RS6                and continue                CFK*DEC99\nRS5      MVC   OUTOPER+5(2),RSA+2 copy 2 byte reg no.         CFK*DEC99\nRS6      MVI   OUTOPER+7,C','     add 4th ,                   CFK*DEC99\n         XC    RSG,RSG            clear ADDR parms            CFK*NOV03\n         MVC   RSG+8(4),FMTPA     pass @ output buf to ADDR   CFK*NOV03\n         MVC   RSG+2(2),FMTTEXT5  pass instr. address to ADDR CFK*NOV03\n         MVI   RSG+4,X'01'        flag type 1 address         CFK*NOV03\n         L     R15,ADDS           get @ ADDR csect            CFK*NOV03\n         LA    R1,RSG             get @ parms for ADDR        CFK*NOV03\n         BASR  R14,R15            call ADDR csect             CFK*NOV03\n         L     R3,RSG+12          get length of address       CFK*NOV03\n         BCTR  R3,0               - 1 for mvc                 CFK*DEC99\n         EX    R3,MVS2            copy address to o/p buffer  CFK*DEC99\nEXIT     DS    0H                 exit point                  CFK*DEC99\n         LEAVE ,                  return                      CFK*NOV03\nMVS      MVC   OUTOPER+3(1),RSG   EXecuted instruction\nMVS2     MVC   OUTOPER+8(1),RSG   EXecuted instruction        CFK*NOV03\n         DC    C'IMM='\nBCVS     DC    A(BCV)             @ bcv csect\nADDS     DC    A(ADDR)            @ addr csect\nR4SAVE   DC    F'0'               space to save reg 4         CFK*JAN00\n* Parms to call ADDR with                                     CFK*NOV03\n*  input: addressed by R14                                            *\n*    +0  2 bytes x'00' (always ?)                                     *\n*    +2  2 byte address part of instruction                           *\n*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *\n*    +5  start of 3 byte length for SS instrs or x'00'                *\n*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *\n*    +8  4 byte address of output buffer holding current line         *\n*    +15 1 byte instruction format from AXN                           *\n*                                                                     *\n*  output: addressed by R14                                           *\n*    +0  1-12 byte address                                            *\n*    +12 length of address (fullword)                                 *\nRSG      DC    4F'0'                                          CFK*NOV03\n* end of ADDR parms                                           CFK*NOV03\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RX": {"ttr": 5633, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RX       TITLE 'RX '\n***********************************************************************\n*                                                                     *\n*           Format parameters for a RX format instruction.            *\n*                                                                     *\n*    eg  LA  1,123(1,2) if FMTFMT = X'20' (FMTRX)                     *\n*    or  B   123(1,2)   if FMTFMT = X'21' (FMTRX1)                    *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  @ output buffer                                              *\n*    +4                                                               *\n*    +8  instruction byte 1                                           *\n*    +9  instruction byte 2                                           *\n*    +10 2 bytes passed to ADDR csect (1st adr call)                  *\n*    +19 instruction format from AXN                                  *\n*                                                                     *\n*  History:                                                           *\n*    Map parms with FMTPARMS macro                       CFK Feb 2000 *\n*    Map output line with OUTLINE macro                  CFK Feb 2000 *\n*    Support FMTRX1 (entended branch mnemonics)          CFK Apr 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         FMTPARMS                 map parameters              CFK*FEB00\n         OUTLINE                  map output line             CFK*FEB00\nRX       CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         EXTRN BCV                csect\n         EXTRN ADDR               csect\n         MVC   RADX+15(1),FMTFLG1 pass instr format to ADDR\n         SR    R2,R2              ) clear\n         ST    R2,RXG             )  BCV parms\n         MVC   RADX+8(4),FMTPA    pass @ output buffer to ADDR\n         MVC   RXG+3(1),FMTTEXT2  pass reg number to BCV\n         L     R14,BCVX           CONVERT REGISTER\n         ST    R13,RXG+4          AND INCEX\n         CNOP  2,4\n         BALR  R14,R14            call BCV routine\nRXG      DC    F'0'\n         DC    F'0'               r13 reloaded from here\n         SR    R2,R2              )\n         ST    R2,RADX            ) clear ADDR parms\n         ST    R2,RADX+4          )\n         MVC   RADX+2(2),FMTTEXT3 pass address to ADDR\n         MVC   RADX+6(2),RXG+2    pass index reg number to ADDR\n         L     R15,ADDX           get @ ADDR csect            CFK*NOV03\n         LA    R1,RADX            get @ parms for ADDR        CFK*NOV03\n         BASR  R14,R15            call ADDR csect             CFK*NOV03\n         L     R4,FMTPA           get @ output buffer\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\n         CLI   FMTFMT,FMTFRX1     leading reg needed ?        CFK*APR00\n         BNE   RX0                no - copy register          CFK*APR00\n         SH    R4,=H'3'           yes - adjust output pointer CFK*APR00\n         B     RX3                and copy address            CFK*APR00\nRX0      DS    0H                                             CFK*APR00\n         CLI   RXG,C'0'           reg 0-9 ?\n         BNE   RX1                no\n         MVC   OUTOPER(1),RXG+1   yes - move 1 byte reg no.\n         S     R4,RONE            dec o/p buffer adr\n         B     RX2                and continue\nRX1      MVC   OUTOPER(2),RXG     copy 2 byte reg no.\nRX2      MVI   OUTOPER+2,C','     add ,\nRX3      DS    0H                                             CFK*APR00\n         L     R3,RADX+12         get address length\n         S     R3,RONE            -1 for mvc\n         EX    R3,MVR             copy address to o/p buffer\n         LEAVE ,                  RETURN                      CFK*NOV03\nMVR      MVC   OUTOPER+3(1),RADX  EXecuted instruction\n         DC    C'IMM='\nADDX     DC    A(ADDR)            @ ADDR csect\nBCVX     DC    A(BCV)             @ BCV csect\nRONE     DC    F'1'\n* parms to call ADDR                                          CFK*NOV03\n*  input: addressed by R14                                            *\n*    +0  2 bytes x'00' (always ?)                                     *\n*    +2  2 byte address part of instruction                           *\n*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *\n*    +5  start of 3 byte length for SS instrs or x'00'                *\n*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *\n*    +8  4 byte address of output buffer holding current line         *\n*    +15 1 byte instruction format from AXN                           *\n*    +16 callers R13                                                  *\n*    +20 return to here                                               *\n*                                                                     *\n*  output: addressed by R14                                           *\n*    +0  1-12 byte address                                            *\n*    +12 length of address (fullword)                                 *\nRADX     DC    4F'0'                                          CFK*NOV03\n* end of ADDR parms                                           CFK*NOV03\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAVA": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x02\\x01\\x04\\x00\\x9f\\x01\\x04\\x00\\x9f\\x08'\\x00\\x7f\\x00\\x7f\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-01-09T00:00:00", "modifydate": "2004-01-09T08:27:02", "lines": 127, "newlines": 127, "modlines": 0, "user": "U765139"}, "text": "SAVA     TITLE 'SAVA '\n***********************************************************************\n*                                                                     *\n*  Keep track of label references.                                    *\n*                                                                     *\n*  Called by ADDR, ARL, PASS3, PASS4, SPPR, SYM.                      *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0 - 1 bytes type of data at address ) as mapped                 *\n*    +1 - 8 byte csect the label is in    )  by LABELMAP              *\n*    +9 - 3 byte address                  )                           *\n*   +12 - 8 byte symbol name or spaces    )                           *\n*                                                                     *\n*  Output addressed by R1:                                            *\n*   +12 - 8 byte symbol                                               *\n*                                                                     *\n*  History:                                                           *\n*    Put input symbols into table.                       CFK Apr 2000 *\n*    Map the table of saved addresses.                   CFK Apr 2000 *\n*    Allow for up to 10 memory accesses per text card.   CFK Apr 2000 *\n*    Add check for address not found on 4th pass.        CFK Jun 2000 *\n*    Use register equates.                               CFK Dec 2000 *\n*    Put not found address into R3 in dump.              CFK Nov 2001 *\n*    Let PASS4 reset SVK.                                CFK Dec 2001 *\n*    Dynamically allocate address buffer.                CFK Mar 2003 *\n*    Save and restore all registers.                     CFK Mar 2003 *\n*    Use standard linkage conventions.                   CFK Sep 2003 *\n*    Call BSC with standard linkage conventions.         CFK Oct 2003 *\n*    Add csect name to table.                            CFK Dec 2003 *\n*    Pass back generated name in LABNAME.                CFK Dec 2003 *\n*    BSCOFLAG and BSCONAME don't overlap now.            CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\n         LABELMAP                 map the table of saved addresses\nSAVA     CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY AST                ref'ed by PASS3\n         ENTRY NAST               ref'ed by PASS3\n         ENTRY SVK                ref'ed by PASS4             CFK*DEC01\n         EXTRN BSC                csect\n*        EXTRN PA                 in PASS1 csect\n         LR    R10,R1             copy @ parms                CFK*SEP03\n         USING LABELMAP,R10       tell assembler about parms  CFK*SEP03\n         MVC   WSADR,LABADR       copy input address          CFK*APR03\n         CLI   SVK,X'FF'          on to 3rd pass ?\n         BE    RTSB               br. if so, all inserts done CFK*MAR03\n         L     R3,NAST            get number of entries in use\n         C     R3,SV100           full ?\n         BL    LASTV              no - OK\n*  yes, - we need a (larger) address buffer                   CFK*MAR03\n         LA    R0,1024(R3,R3)     calc new max no. of slots   CFK*MAR03\n         ST    R0,SV100           save new limit              CFK*MAR03\n         MH    R0,=Y(LABENTLN)    calc new buffer length      CFK*MAR03\n*                                                             CFK*MAR03\n         GETMAIN RU,LV=(0),SP=2   get new buffer              CFK*MAR03\n*                                                             CFK*MAR03\n         L     R6,TABLE@          get @ old buffer            CFK*MAR03\n         ST    R1,TABLE@          save @ new buffer           CFK*MAR03\n         L     R4,AST             get @ old first free entry  CFK*MAR03\n         SR    R4,R6              calc offset to free entry   CFK*MAR03\n         AR    R4,R1              calc @ new first free entry CFK*MAR03\n         ST    R4,AST             save for reuse              CFK*MAR03\n         LTR   R7,R3              copy old slot number        CFK*MAR03\n         BZ    NOFREE             if no old buffer skip free  CFK*MAR03\n         LR    R4,R1              copy @ new buffer           CFK*MAR03\n         MH    R7,=Y(LABENTLN)    calc old buffer length      CFK*MAR03\n         LR    R0,R7              copy old len for freemain   CFK*MAR03\n         LR    R5,R7              copy old len for MVCL       CFK*MAR03\n         LR    R1,R6              copy old @ for freemain     CFK*MAR03\n         MVCL  R4,R6              copy old buffer to new      CFK*MAR03\n*                                                             CFK*MAR03\n         FREEMAIN RU,LV=(0),A=(1),SP=2  free old buffer       CFK*MAR03\n*                                                             CFK*MAR03\nNOFREE   DS    0H                                             CFK*MAR03\nLASTV    LA    R3,1(R3)           ) add 1 to\n         ST    R3,NAST            ) entry count\n         L     R4,AST             get @ 1st free entry\n         DROP  R10                done with R10               CFK*SEP03\n         USING LABELMAP,R4        tell assembler              CFK*MAY00\n         MVC   LABELENT,0(R10)    copy new entry              CFK*SEP03\n         LA    R4,LABENTLN(R4)    ) bump last\n         ST    R4,AST             ) entry pointer\n         DROP  R4                 done with R4                CFK*MAY00\n         USING LABELMAP,R10       tell assembler about parms  CFK*SEP03\nRSTV     DS    0H                                             CFK*MAR03\n         UNPK  LABNAME(7),WSADR(4)  unpack address            CFK*DEC03\n         TR    LABNAME(1),=C'ABCDEFGHIJKLMNOP'-240  make A-P  CFK*DEC03\n         TR    LABNAME+1(5),=C'0123456789ABCDEF'-240 make hex CFK*DEC03\n         MVC   LABNAME+6(2),BLK   make rest of output spaces  CFK*DEC03\n         LEAVE ,                  RETURN                      CFK*SEP03\n* process call during 4th pass\nRTSB     DS    0H                                             CFK*OCT03\n         MVC   BSCKEY,LABCADR     copy input csect & address  CFK*DEC03\n         L     R15,ABSC           get @ BSC csect             CFK*OCT03\n         LA    R1,BSCPRMS         get @ parms                 CFK*OCT03\n         BASR  R14,R15            call BSC                    CFK*OCT03\n         CLI   BSCOFLAG,C' '      found something ?           CFK*JAN04\n         BE    LOSTADR            error if not found on 4th pass *OCT03\n         CLI   BSCONAME,C' '      IS HERE A SYMBOL ?          CFK*JAN04\n         BE    RSTV               br. to generate symbol if not\n         MVC   LABNAME,BSCONAME   YES - return it             CFK*JAN04\n         LEAVE ,                  RETURN                      CFK*SEP03\nLOSTADR  DS    0H                 new address on 4th pass     CFK*JUN00\n         LA    R3,BSCPRMS         point @ BSC parms           CFK*JAN04\n         ABEND 12,DUMP            take a dump                 CFK*JUN00\n         DC    C'IMM='\n         LTORG                                                CFK*SEP03\nABSC     DC    A(BSC)             @ BSC csect\nBLK      DC    C'  '              blanks (constant)           CFK*MAR03\nWSADR    DS    Xl3                copy of input address       CFK*APR03\nSV100    DC    F'0'               max entries in table        CFK*MAR03\nAST      DC    A(0)               entry point, @ 1st free ent CFK*MAR03\nSVK      DC    F'0'               set by PASS3, reset by PASS4\nNAST     DC    F'0'               entry point, number of entries used\nTABLE@   DC    A(0)               @ table of addresses        CFK*MAR03\n* each entry is mapped by the LABELMAP dsect                  CFK*APR00\n* parms to call BSC with                                      CFK*OCT03\nBSCPRMS  DS    0F                 parms to call BSC           CFK*DEC03\nBSCOFLAG DC    X'0'                                           CFK*JAN04\nBSCONAME DS    0CL8               output name                 CFK*DEC03\nBSCKEY   DS    0CL11              key to search on            CFK*DEC03\nBSCSECT  DS    CL8                csect name                  CFK*DEC03\nBSCA3    DS    XL3                input 3 byte address        CFK*DEC03\n* end of BSC parms                                            CFK*OCT03\nSAVEAREA DS    18F                registers saved here        CFK*SEP03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SI": {"ttr": 5639, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SI       TITLE 'SI '\n***********************************************************************\n*                                                                     *\n*           Format the parameters of a SI format instruction          *\n*                                                                     *\n*    eg  MVI   123(1),X'00'          FMTFSI                           *\n*    or  LPSW  123(1)                FMTFSI1                          *\n*    or  IPK                         FMTFS (no operands)              *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  @ output buffer                                              *\n*    +4  instruction format                                           *\n*    +9  byte - immediate operand                                     *\n*    +10 2 bytes passed to ADDR csect (1st adr call)                  *\n*    +19 flag, passed to ADDR csect, x'41' if no immediate operand    *\n*    +20 module returns to here                                       *\n*                                                                     *\n*  History:                                                           *\n*    Check instruction format for 2nd byte (fixes LPSW)  CFK Jun 1999 *\n*    Handle format S instructions                        CFK Jun 1999 *\n*    Map output line with OUTLINE macro                  CFK Feb 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Eliminate call to CXN                               CFK Oct 2003 *\n*    Use standard linkage conventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         FMTPARMS                 copy parameter map          CFK*JUN99\n         OUTLINE                  map output line             CFK*FEB00\nSI       CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         EXTRN ADDR               csect\n         CLI   FMTFMT,FMTFS       S format instruction ?      CFK*JUN99\n         BE    SIET               branch if yes (no operands) CFK*JUN99\n         MVC   SIG+15(1),FMTFLG1  pass instr format to ADDR\n         SR    R2,R2              )\n         ST    R2,SIG             ) clear ADDR parms\n         ST    R2,SIG+4           )\n         MVC   SIG+2(2),FMTTEXT3  pass address to ADDR\n         MVI   SIG+4,X'01'        flag type of address\n         MVC   SIG+8(4),FMTPA     pass @ output buffer\n         L     R15,ADDI           get @ ADDR csect            CFK*NOV03\n         LA    R1,SIG             get @ parms for ADDR        CFK*NOV03\n         BASR  R14,R15            call ADDR csect             CFK*NOV03\n         L     R4,FMTPA           get @ output buffer\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\n         L     R3,SIG+12          load address length\n         S     R3,IONE            -1 for mvc\n         EX    R3,MVI             copy address to output buffer\n         CLI   FMTFMT,FMTFSI1     got a second operand ?\n         BE    SIET               br if not\n         AR    R4,R3              allow for address\n         MVC   OUTOPER+1(3),CX    copy \",X'\"\n         UNPK  OUTOPER+4(3),FMTTEXT2(2) unpack immed operand  CFK*OCT03\n         NC    OUTOPER+4(2),=X'0F0F'    clear high nybbles    CFK*OCT03\n         TR    OUTOPER+4(2),=C'0123456789ABCDEF'     make hex CFK*OCT03\n         MVI   OUTOPER+6,X'7D'    add final ' (covers gash from UNPK)\nSIET     LEAVE ,                  return to caller            CFK*NOV03\nMVI      MVC   OUTOPER(1),SIG     EXecuted instruction\n         DC    C'IMM='\nADDI     DC    A(ADDR)            @ ADDR csect\nIONE     DC    F'1'               constant 1\nCX       DC    C',X'              constant \",X'\"\n         DC    X'7D40'            rest of constant, C''' '\n* parms to call ADDR                                          CFK*NOV03\n*  input: addressed by R14                                            *\n*    +0  2 bytes x'00' (always ?)                                     *\n*    +2  2 byte address part of instruction                           *\n*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *\n*    +5  start of 3 byte length for SS instrs or x'00'                *\n*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *\n*    +8  4 byte address of output buffer holding current line         *\n*    +15 1 byte instruction format from AXN                           *\n*                                                                     *\n*  output: addressed by R14                                           *\n*    +0  1-12 byte address                                            *\n*    +12 length of address (fullword)                                 *\nSIG      DC    4F'0'                                          CFK*NOV03\n* end of ADDR parms                                           CFK*NOV03\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SORCEREI": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00#\\x01\\x00\\x02\\x8f\\x01\\x004/\\x126\\x008\\x00)\\x00\\x1d\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2000-01-28T00:00:00", "modifydate": "2000-12-07T12:36:23", "lines": 56, "newlines": 41, "modlines": 29, "user": "U765139"}, "text": "         TITLE 'SORCERER - P.J.CHISLETT 31/10/72'\n* THIS PROGRAM PRODUCED BY BRITISH STEEL CORPORATION CORBY\n* REFER ANY PROBLEMS TO MALCOLM SISMEY TEL 053-66-2121 EXT 729\n*\n* MODIFIED BY C.KENDON TO CALL DELINKI AND READ SYSLIN INSTEAD\n* OF CALLING DELINK0 AND READING SYSPUNCH\n*\n*     SORCERER CALLS DELINKI TO PRODUCE A FILE OF OBJECT MODULES.\n*     THIS FILE IS COPIED TO A WORK FILE AN OBJECT MODULE AT A TIME.\n*     EACH OBJECT MODULE IS INPUT INTO THE DISASSEMBLER PROGRAM.\n*     AFTER DISASSEMBLY, CONTROL IS RETURNED TO SORCERER FOR THE\n*     NEXT OBJECT MODULE TO BE COPIED.\n*\n* USE STANDARD ENTRY/EXIT MACROS                              CFK*DEC00\n         SPACE 5\nSORCEREI CSECT\n         SAVE  (14,12)                 SAVE REGS\n         BASR  R12,0                   SET UP OUR BASE REG\n         USING *,R12                   TELL ASSEMBLER\n         LR    R14,R13                 SAVE HSA ADDRESS\n         LA    R13,SAVEAREA            GET @ SAVE AREA\n         ST    R13,8(0,R14)            FORWARD POINTER\n         ST    R14,4(0,R13)            BACKWARD POINTER\n*\n         LINK  EPLOC=DELINKI           LINK TO DELINKI\n         SPACE 2\n         OPEN  (OBJMODS)\n         SPACE 4\nNEXTOBJ  OPEN  (WORKDCB,(OUTPUT))\n         LA    R2,0                    INITIALIZE OBJ.MOD COUNT\nGETREC   GET   OBJMODS\n         LR    R0,R1\n         PUT   WORKDCB                 COPY OBJMOD RECORD TI WORKFULE\n         CLC   0(4,R1),ENDC            END OF OBJ.ODULE/Q\n         BNE   GETREC                  NO - COPY NEXT RECORD\n         CLOSE (WORKDCB)\n         SPACE 4\n*    DISASSEMBLE OBJECT MODULE\n         LINK  EP=DISAS,ID=0\n         LA    R2,1(R2)                INCREMENT OBJ. MOD COUNT\n         STH   R2,*-6                  INSERT COUNT IN LINK ID.\n         B     NEXTOBJ\n         SPACE 5\nEOJ      CLOSE (WORKDCB,,OBJMODS)\n         L     R13,4(R13)              GET @ CALLER SAVE AREA\n         XC    8(4,13),8(13)           CLEAR CALLER'S HSA CHAIN\n         RETURN (14,12),,RC=0\n         EJECT\nSAVEAREA DS    18F                     SAVE AREA\nENDC     DC    X'02',C'END'\nDELINKI  DC    CL8'DELINKI'\nOBJMODS  DCB   DDNAME=SYSLIN,DSORG=PS,MACRF=(GL),EODAD=EOJ\n         SPACE 5\nWORKDCB  DCB   DDNAME=RDDD,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SORCEREM": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x14\\x01\\x003_\\x01\\x004/\\x123\\x002\\x00*\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-11-30T00:00:00", "modifydate": "2000-12-07T12:33:14", "lines": 50, "newlines": 42, "modlines": 0, "user": "U765139"}, "text": "*\n*     PROCESS FILE WITH MORE THAN 1 OBJECT DECK IN IT, EG A PTF.\n*\n*     THE INPUT IS COPIED TO A WORK FILE AN OBJECT MODULE AT A TIME.\n*     EACH OBJECT MODULE IS INPUT INTO THE DISASSEMBLER PROGRAM.\n*     AFTER DISASSEMBLY, CONTROL IS RETURNED TO SORCEREM FOR THE\n*     NEXT OBJECT MODULE TO BE COPIED.\n*\nSORCEREM CSECT\n         SAVE  (14,12)                 SAVE REGS\n         BASR  R12,0                   SET UP OUR BASE REG\n         USING *,R12                   TELL ASSEMBLER\n         LR    R14,R13                 SAVE HSA ADDRESS\n         LA    R13,SAVEAREA            GET @ SAVE AREA\n         ST    R13,8(0,R14)            FORWARD POINTER\n         ST    R14,4(0,R13)            BACKWARD POINTER\n*\n         LA    R2,0                    INITIALIZE OBJ.MOD COUNT\n         SPACE 2\n         OPEN  (OBJMODS)\n         SPACE 4\nNEXTOBJ  OPEN  (WORKDCB,(OUTPUT))\nGETREC   GET   OBJMODS\n         LR    R0,R1                   COPY @ RECORD\n         CLI   0(R1),X'02'             OBJECT RECORD ?\n         BNE   NOPUT                   NO - SKIP PUT\n         PUT   WORKDCB                 COPY OBJMOD RECORD TI WORKFULE\nNOPUT    DS    0H\n         CLC   0(4,R1),ENDC            END OF OBJ.ODULE/Q\n         BNE   GETREC                  NO - COPY NEXT RECORD\n         CLOSE (WORKDCB)\n         SPACE\n*    DISASSEMBLE OBJECT MODULE\n         LINK  EP=DISAS,ID=0\n         LA    R2,1(R2)                  INCREMENT OBJ. MOD COUNT\n         STH   R2,*-6                   INSERT COUNT IN LINK ID.\n         B     NEXTOBJ\n         SPACE 5\nEOJ      CLOSE (WORKDCB,,OBJMODS)\n         L     R13,4(R13)              GET @ CALLER SAVE AREA\n         XC    8(4,13),8(13)           CLEAR CALLER'S HSA CHAIN\n         RETURN (14,12),,RC=0\n         EJECT\nSAVEAREA DS    18F                      SAVE AREA\nENDC     DC    X'02',C'END'\nOBJMODS  DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=(GL),EODAD=EOJ\n         SPACE 5\nWORKDCB  DCB   DDNAME=RDDD,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SORCERER": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00Y\\x01\\x001?\\x01\\x004/\\x125\\x008\\x00+\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-11-08T00:00:00", "modifydate": "2000-12-07T12:35:59", "lines": 56, "newlines": 43, "modlines": 0, "user": "U765139"}, "text": "* THIS PROGRAM PRODUCED BY BRITISH STEEL CORPORATION CORBY\n* REFER ANY PROBLEMS TO MALCOLM SISMEY TEL 053-66-2121 EXT 729\n         TITLE 'SORCERER - P.J.CHISLETT 31/10/72'\n*     SORCERER CALLS SYDELINK TO PRODUCE A FILE OF OBJECT MODULES.\n*     THIS FILE IS COPIED TO A WORK FILE AN OBJECT MODULE AT A TIME.\n*     EACH OBJECT MODULE IS INPUT INTO THE DISASSEMBLER PROGRAM.\n*     AFTER DISASSEMBLY, CONTROL IS RETURNED TO SORCERER FOR THE\n*     NEXT OBJECT MODULE TO BE COPIED.\n*\n* MODIFIED BY C.KENDON TO MAKE RDDD BLOCKED\n* DUMMY ENTRY POINT OF FESNAP ADDED SO THE LINK GETS RC 0     CFK*JLY00\n* USE STANDARD ENTRY/EXIT MACROS                              CFK*DEC00\n         SPACE 5\nSORCERER CSECT\n         ENTRY FESNAP                  DUMMY ENTRY POINT      CFK*JLY00\n         SAVE  (14,12)                 SAVE REGS\n         BASR  R12,0                   SET UP OUR BASE REG\n         USING *,R12                   TELL ASSEMBLER\n         LR    R14,R13                 SAVE HSA ADDRESS\n         LA    R13,SAVEAREA            GET @ SAVE AREA\n         ST    R13,8(0,R14)            FORWARD POINTER\n         ST    R14,4(0,R13)            BACKWARD POINTER\n*\n         LA    R2,0                    INITIALIZE OBJ.MOD COUNT\n         L     R15,=V(DELINK0)\n         BASR  R14,R15                 LINK TO SYDELINK\n         SPACE 2\n         OPEN  (OBJMODS)\n         SPACE 4\nNEXTOBJ  OPEN  (WORKDCB,(OUTPUT))\nGETREC   GET   OBJMODS\n         LR    R0,R1\n         PUT   WORKDCB                 COPY OBJMOD RECORD TI WORKFULE\n         CLC   0(R4,1),ENDC            END OF OBJ.ODULE/Q\n         BNE   GETREC                  NO - COPY NEXT RECORD\n         CLOSE (WORKDCB)\n         SPACE\n*    DISASSEMBLE OBJECT MODULE\n         LINK  EP=DISAS,ID=0\n         LA    R2,1(R2)                INCREMENT OBJ. MOD COUNT\n         STH   R2,*-6                  INSERT COUNT IN LINK ID.\n         B     NEXTOBJ\n         SPACE 5\nEOJ      CLOSE (WORKDCB,,OBJMODS)\n         L     R13,4(R13)              GET @ CALLER SAVE AREA\n         XC    8(4,13),8(13)           CLEAR CALLER'S HSA CHAIN\n         RETURN (14,12),,RC=0\n         EJECT\nSAVEAREA DS    18F                     SAVE AREA\nENDC     DC    X'02',C'END'\nOBJMODS  DCB   DDNAME=SYSPUNCH,DSORG=PS,MACRF=(GL),EODAD=EOJ\n         SPACE 5\nWORKDCB  DCB   DDNAME=RDDD,DSORG=PS,MACRF=(PM),RECFM=FB,LRECL=80\nFESNAP   DS    0H                      DUMMY ENTRY POINT      CFK*JLY00\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPPR": {"ttr": 5648, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SPPR     TITLE 'SPPR'\n***********************************************************************\n*                                                                     *\n*     SPPR csect                                                      *\n*                                                                     *\n*  Called by PASS4 for each line of output                            *\n*                                                                     *\n*  Parms addressed by R1:                                             *\n*   Input:                                                            *\n*    +0  - 8 bytes output from FTXT,       copied to KEY4             *\n*      +0  - 4 bytes flag, F'1' at EOT   ) copied to KEY4             *\n*      +4  - 1 byte copy of AXNFMT       ) copied to KEY4    CFK*JLY00*\n*      +5  - 1 byte copy of AXNOPER      ) copied to KEY4    CFK*JLY00*\n*      +6  - 2 byte length of instruction) copied to KEY4             *\n*    +8  - 12 bytes output from FTXT,      copied to INST4            *\n*      +8  - 8 bytes instruction TXT     ) copied to INST4            *\n*      +16 - 1 byte copy of AXNFLG1      ) copied to INST4            *\n*      +17 - 3 bytes current location    ) copied to INST4            *\n*    +20 - 8 bytes passed to decoding rtn, copied to LEN4 and RT4     *\n*    +28 - 4 bytes @ decoding routine,     copied to ROUT4            *\n*    +32 -                                                            *\n*   Output:                                                           *\n*    +0 - 24 bytes                                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    +28 - flag returned, x'01' or x'02'                              *\n*    +36 - return address                                             *\n*                                                                     *\n*   History:                                                          *\n*     Map output line with OUTLINE macro                 CFK Feb 2000 *\n*     SAVA parameters changed                            CFK Apr 2000 *\n*     Use register equates                               CFK Dec 2000 *\n*     Use standard linkage conventions                   CFK Sep 2003 *\n*     Use standard linkage conventions to call BSC       CFK Oct 2003 *\n*     Tidy up calls to PRINTP (was PRINTA).              CFK Dec 2003 *\n*     Pass current csect to SAVA.                        CFK Dec 2003 *\n*     SAVA now outputs name in label field.              CFK Jan 2004 *\n*     BSC output changed                                 CFK Jan 2004 *\n*                                                                     *\n***********************************************************************\n         OUTLINE                  map output line             CFK*FEB00\nSPPR     CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         ENTRY PLCB               ref'ed by PASS4\n         ENTRY ASAVSECT           ref'ed by PASS4             CFK*DEC03\n         EXTRN USING              csect\n         EXTRN BSC                csect\n         EXTRN BCV                csect\n         EXTRN CDN                csect\n         EXTRN PA                 in PASS1 csect (Print Area)\n         EXTRN PRINTP             csect                       CFK*DEC03\n         EXTRN RFTXT              in FTXTA csect\n         EXTRN ARL                csect\n         EXTRN PAB                in PASS1 csect\n         EXTRN SAVA               csect\n         ST    R1,SPP1            save @ parms                CFK*SEP03\n         MVC   KEY4(32),0(R1)     copy parms                  CFK*SEP03\n         CLI   FFC,X'FF'\n         BE    FPLL\n         CLI   FFC+3,X'00'\n         BNE   FPLL1\n         CLC   INST4+9(3),FFAD+1  FIRST FORTRAN INSTR\n         BH    FPLL\n         MVC   ICF+1(3),INST4+9   copy current location\n         L     R4,ICF             load current location\n         AH    R4,KEY4+6          add instruction length      CFK*JLY00\n         S     R4,FFAD\n         BM    FPLL\n         MVI   KEY4+3,X'00'       clear EOT flag\n         MVI   FFC+3,X'01'\n         MVI   PLC+3,X'08'\n         LTR   R4,R4\n         BZ    FPLL\n         ST    R4,RFT\n         B     LRFT\nFPLL1    CLI   FFC+3,X'01'\n         BNE   FPLL2\n         CLI   CGOF,X'00'\n         BE    CGO1\n         CLI   CGOF,X'01'\n         BE    CGO2\n         CLI   CGOF,X'02'\n         BE    CGO3\n         CLI   CGOF,X'03'\n         BNE   CGOL\n         MVC   ICF+1(3),INST4+9    copy current location\n         LH    R5,RT4\n         SLL   R5,1\n         A     R5,ICF              add current location\n         LA    R5,6(R5)\n         ST    R5,FFAD\n         MVI   FFC+3,X'00'\n         MVI   KEY4+3,X'02'\n         B     CGOL\nCGO1     CLC   CGOS1(2),RT4        LH  2, ?\n         BNE   CGOL                br. if not\n         CLI   KEY4+3,X'02'\n         BE    FPLL2\n         MVI   CGOF,X'01'\n         B     CGOM\nCGO2     CLC   CGOS1+2(2),RT4      L   15, ?\n         BNE   CGOL                br. if not\n         MVI   CGOF,X'02'\n         B     CGOM\nCGO3     CLC   RT4(2),CGOS2        BALR 14,15 ?\n         BNE   CGOL                br. if not\n         MVI   CGOF,X'03'\n         B     CGOM\nCGOL     MVI   CGOF,X'00'\nCGOM     BCR   0,0\n         CLC   RT4(3),FSS1         BAL  14,8(15) ?\n         BNE   FPLL3\n         CLI   RT4+3,X'08'\n         BE    MFFC\n         CLI   RT4+3,X'0C'\n         BE    MFFCL\n         CLI   RT4+3,X'1C'\n         BE    MFFC\n         CLI   RT4+3,X'20'\n         BE    MFFCL\n         CLI   RT4+3,X'38'\n         BE    PSF\n         CLI   RT4+3,X'34'\n         BNE   FPLL3\nPSF      MVI   FFC+3,X'00'\n         MVI   KEY4+3,X'02'\n         MVC   ICF+1(3),INST4+9    copy current location\n         L     R5,ICF              load current location\n         LA    R5,10(R5)\n         ST    R5,FFAD\n         B     FPLL3\nMFFCL    MVI   FFC+3,X'00'\n         MVI   KEY4+3,X'02'\n         MVC   ICF+1(3),INST4+9    copy current location\n         L     R5,ICF              load current location\n         LA    R5,12(R5)\n         ST    R5,FFAD             save current location + 12\n         B     FPLL3\nMFFC     MVI   FFC+3,X'02'\n         MVI   KEY4+3,X'02'\n         B     FPLL\nFPLL2    CLI   FFC+3,X'02'\n         BNE   FPLL4\n         MVI   FFC+3,X'01'\n         MVI   KEY4+3,X'00'\n         B     FPLL\nFPLL3    CLC   RT4(2),FSS2         BALR  15,0 ?\n         BNE   FPLL\n         MVI   FFC+3,X'03'\n         B     FPLL\nFPLL4    CLI   FFC+3,X'03'\n         BNE   FPLL\n         MVI   FFC+3,X'01'\n         L     R3,PABF4            get @ PAB in PASS1\n         USING OUTLINE,R3          tell assembler             CFK*FEB00\n         MVI   OUTLCC,X'FF'        ind. card inserted\n         MVC   OUTINSTR(10),DROP4  copy c'DROP',ZZ14\n         DROP  R3                  tell asm done with OUTLINE CFK*FEB00\n         XC    USINGPRM,USINGPRM   clear USING parms          CFK*SEP03\n         L     R15,US4             get @ USING csect          CFK*SEP03\n         MVI   USINGPRM+2,X'F0'    tell USING to drop r15     CFK*SEP03\n         LA    R1,=A(USINGPRM)     get @ parms                CFK*SEP03\n         BASR  R14,R15             call USING                 CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         B     FPLL\nFPLL     BCR   0,0\n         CLI   FORHF,X'FF'\n         BE    FHN                if so quit loop\n         CLC   INST4+9(3),FFAD+1  comp current location\n         BNE   FHN                quit loop if not equal\n         CLI   FORHF,X'01'\n         BE    FH2\n         CLC   RT4(4),FHS1        B   12(15) ?\n         BNE   FHC                br. if not\n         MVI   FFC,X'FF'\n         MVI   FORHF,X'01'\n         MVI   COBF,X'00'\n         MVI   KEY4+3,X'02'\n         MVI   USINGPRM+2,X'F0'   tell USING to drop r15      CFK*SEP03\n         MVI   USINGPRM+7,X'01'   indicate instruction type   CFK*SEP03\n         MVC   USINGPRM+4(3),FFAD+1  indicate location        CFK*SEP03\n         MVI   USINGPRM+2,X'F0'   tell USSH to output R15     CFK*SEP03\n         MVC   RGH13+1(3),FFAD+1\n         BAL   R9,USSH            call routine to output USING card\n         B     FHA\n         L     R15,US4            get @ USING csect           CFK*SEP03\n         LA    R1,=A(USINGPRM)    get @ parms                 CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\nFHA      L     R3,FFAD\n         LA    R3,8(R3)\n         ST    R3,FFAD\n         B     FHN                quit loop\nFHC      MVI   KEY4+3,X'00'\n         B     FHN                quit loop\nFH2      CLI   FORHF+3,X'00'\n         BNE   FH3\n         MVI   FORHF+3,X'01'\n         MVI   KEY4+3,X'00'\n         L     R3,FFAD\n         LA    R3,12(R3)\n         ST    R3,FFAD\n         B     FHN                quit loop\nFH3      CLI   FORHF+3,X'01'\n         BNE   FH4\n         MVI   FORHF+3,X'02'\n         CLI   RT4,X'18'\n         BNE   FMAIN\n         MVI   FORHF+3,X'03'\n         L     R3,FFAD\n         LA    R3,18(R3)\n         ST    R3,FFAD\n         CLI   RT4+2,X'41'\n         BE    FHN                quit loop if so\n         MVI   FORHF+2,X'01'\n         B     FHN                quit loop\nFMAIN    L     R3,FFAD\n         LA    R3,22(R3)\n         ST    R3,FFAD\n         B     FHN                quit loop\nFH4      CLI   FORHF+3,X'02'\n         BNE   FH5\n         L     R3,FFAD\n         LA    R3,22(R3)\n         ST    R3,RGH13\n         XC    FFAD(4),FFAD\n         MVC   FFAD+2(2),RT4+2\n         NI    FFAD+2,X'0F'\n         A     R3,FFAD\n         ST    R3,FFAD\n* start of a loop\nUSTH     MVI   KEY4+3,X'02'\n         MVI   FORHF+3,X'05'\n         MVI   FFC,X'00'\n         MVI   FFC+3,X'00'\n         MVI   USINGPRM+2,X'C0'  tell USING to insert R12     CFK*SEP03\n         MVC   USINGPRM+4(3),ZZ4   at +0                      CFK*SEP03\n         MVC   T13(4),RGH13\n         MVC   RGH13(4),ZZ4      clear RGH13\n         LA    R5,2              number of USING cards to write\n* loop to output USING cards\nUSHL     ST    R5,COBR           save counter\n         MVI   USINGPRM,X'01'    tell USING to insert reg     CFK*SEP03\n         MVI   USINGPRM+7,X'01'  set instruction format       CFK*SEP03\n         BAL   R9,USSH           call routine to output USING card\n         L     R15,US4           get @ USING csect            CFK*SEP03\n         LA    R1,=A(USINGPRM)   get @ USING parms            CFK*SEP03\n         BASR  R14,R15           call USING                   CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n*    +8  callers r13\n*    +12 return address\n         MVI   USINGPRM+2,X'D0'  tell USING to insert R13     CFK*SEP03\n         MVC   RGH13(4),T13\n         MVC   USINGPRM+4(3),RGH13+1  set address             CFK*SEP03\n         L     R5,COBR           reload counter\n         BCT   R5,USHL           br. if more to generate\n* end of loop to output USING cards\n         B     FHN               quit outer loop\nFH5      CLI   FORHF+3,X'03'\n         BNE   FH6\n         MVI   FORHF+3,X'04'\n         L     R3,FFAD\n         LA    R3,2(R3)\n         ST    R3,FFAD\n         MVI   KEY4+3,X'02'\n         B     FHN               quit loop\nFH6      CLI   FORHF+3,X'04'\n         BNE   FH7\n         CLI   FORHF+2,X'01'\n         BNE   FHG\n         MVC   RGH13(4),RT4\n         MVI   FORHF+3,X'01'\n         B     USTH\nFH7      CLI   FORHF+3,X'05'\n         BNE   FHN               quit loop\n         MVI   FORHF+3,X'06'\n         CLI   FORHF+2,X'01'\n         BNE   FHN               quit loop\n         MVC   FFAD(4),RT4\nFHG      L     R3,FFAD\n         LA    R3,8(R3)\n         ST    R3,RGH13\n         MVC   FFAD(4),RT4\n         B     USTH              back to start of loop\n* end of USTH loop\nFHN      BCR   0,0\n         CLI   COBF,X'01'\n         BNE   COBAN\n         CLC   ROUT4(4),ROUTAE       = @ ARL csect ?\n         BNE   COBAR                 branch if not\n         L     R1,ACT                )\n         LA    R1,1(R1)              ) add 1 to ACT\n         ST    R1,ACT                )\n         CLI   ACT+3,X'02'\n         BNE   COBAR\n         MVI   COBF+1,X'01'\n         MVC   COBR+1(3),INST4   copy TXT\n         MVC   COBRA(4),COBR\n         L     R5,COBR\n         LA    R5,4095(R5)\n         SR    R4,4\n         D     R4,F100           divide by 4096\n         LA    R5,1(R5)          calc loop count\n         MVC   COBA(4),ZZ4       clear COBA\n         MVC   USINGPRM+4(3),INST4   copy TXT\n* start of a loop\nRCOB     MVC   USINGPRM+2(1),COBRG+3 pass reg. no. to USING   CFK*SEP03\n         MVC   RGH13+1(3),USINGPRM+4                          CFK*SEP03\n         ST    R5,COBR           save loop counter\n         MVI   USINGPRM,X'01'    ind. insert call to USING    CFK*SEP03\n         MVI   USINGPRM+7,X'01'                               CFK*SEP03\n         BAL   R9,USSH           call routine to output USING card\n         L     R15,US4           get @ USING csect            CFK*SEP03\n         LA    R1,=A(USINGPRM)   get @ parms for USING        CFK*SEP03\n         BASR  R14,R15           call USING                   CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         SR    R4,R4\n         IC    R4,COBRG+3        )\n         LA    R4,16(R4)         ) add 16 to COBRG+3\n         STC   R4,COBRG+3        )\n         L     R5,FFAD\n         S     R5,COBRA\n         C     R5,F100           more than 4096 ?\n         BNH   LCOB              br if not\n         MVI   ACT+3,X'01'\n         B     COBAN\nLCOB     L     R5,COBR           reload loop counter\n         MVC   USINGPRM+4(3),COBA+1                           CFK*SEP03\n         L     R4,COBA\n         A     R4,F100           add 4096 (x'1000')\n         ST    R4,COBA\n         BCT   R5,RCOB           loop if more to process\n* end of RCOB loop\nCOBAR    CLI   COBF+1,X'01'\n         BNE   COBAN\n         CLI   COBF+3,X'01'\n         BE    COBAC\n         CLC   INST4+9(3),FFAD+1  is current location after FFAD+1 ?\n         BL    COBAN\n         CLC   RT4(2),CBLB        BALR 14,15 ?\n         BNE   COBAN              br. if not\n         CLI   RT4+2,X'04'\n         BNE   COBAN\n         MVI   KEY4+3,X'02'\n         MVI   COBF+3,X'01'\n         B     COBAN\nCOBAC    MVI   KEY4+3,X'00'\n         MVI   COBF+3,X'00'\nCOBAN    BCR   0,0\n         CLI   PLC+1,X'FF'        PL/I SUBSET\n         BE    PLL                br to exit\n         CLI   PLC+3,X'00'        YES\n         BNE   PLI1\n         CLC   INST4(2),PL1       BALR 13,0 ?\n         BNE   PLI1\n         MVI   PLC+3,X'01'\n         B     PLL                go to exit\nPLI1     CLI   PLC+3,X'01'\n         BNE   PLI2\n         CLC   INST4(2),PL2       ST 15,ZZZ15 ?\n         BNE   MPFF\n         MVI   PLC+3,X'02'\n         B     PLL                go to exit\nPLI2     CLI   PLC+3,X'02'\n         BNE   PLI3\n         CLC   INST4(2),PL3       STM 11,12,ZZZ12 ?\n         BNE   MPFF\n         MVI   PLC+3,X'03'\n         B     PLL                go to exit\nPLI3     CLI   PLC+3,X'03'\n         BNE   PLI4\n         CLC   INST4(2),PL4       LA 11,ZZZ12 ?\n         BNE   MPFF\n         L     R3,PABF4           get @ PAB in PASS1\n         L     R4,APAP4           get @ PA in PASS1\n         MVI   0(R3),X'FF'        ind. card inserted\n         MVC   64(5,R3),USIN4     GENERATE USING\n         MVC   70(8,R3),73(R4)    copy parms\n         LA    R5,80(R4)\n* start of loop to find last non blank char on card\nUSO2     CLI   0(R5),C' '\n         BNE   USV2               found non-blank char\n         BCT   R5,USN2            subtract 1 from r5\nUSN2     BCT   R3,USO2\n* end of loop to find last non blank char on card\nUSV2     MVI   78(R3),C','\n         MVC   79(2,R3),EAT       copy c'11'\n         MVI   PLC+3,X'04'\n         CLI   PAS45,X'00'        on 4th pass ?\n         BE    MT5                br. if yes\n         MVC   CD2+3(5),74(4)     pass input to CDN\n         ST    R13,CD2+8          put R13 where CDN expects it\n         L     R14,ACDN           CONVERT ADDRESS TO BCD\n         CNOP  2,4\n         BALR  R14,R14            call CDN\nCD2      DC    C'0000'            padding for input\n         DC    F'0'               output binary number\n         DC    F'0'               our R13\nMT5      MVC   USINGPRM+4(3),CD2+5 copy adr. to USING parms   CFK*SEP03\n         MVC   USINGPRM(4),RG11   copy USING parms to say R11 is here\n         L     R15,FUSI           MAKE ENTRY IN USING TABLE for R11\n         LA    R1,=A(USINGPRM)    get @ parms for USING       CFK*SEP03\n         BASR  R14,R15            call USING                  CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         B     PLL                go to exit\nPLI4     CLI   PLC+3,X'04'\n         BNE   PLI5\n         CLC   INST4(2),PL5       L 12,ZZZ11 ?\n         BNE   MPFF\n         L     R3,PABF4           get @ PAB in PASS1\n         USING OUTLINE,R3         tell assembler              CFK*FEB00\n         MVI   OUTLCC,X'FF'       ind. card inserted\n         MVC   OUTINSTR,USIN4     GENERATE USING\n         CLI   PAS45,X'00'        on 4th pass ?\n         BNE   NC14               br. if not\n         MVC   CD14+3(5),ZZ14+1   pass input to CDN\n         ST    R13,CD14+8         put R13 where CDN expects it\n         L     R14,ACDN           CONVERT TO HEX\n         CNOP  2,4\n         BALR  R14,R14            call CDN\nCD14     DC    C'0000'            input padding\n         DC    F'0'               output hex number\n         DC    F'0'               R13 reloaded from here\n         MVC   BSCSECT,ASAVSECT   copy current csect          CFK*JAN04\n         MVC   BSCA3(3),CD14+5    copy address to BSC input   CFK*JAN04\n         L     R15,ABSC5          FIND BCD SYMBOL             CFK*OCT03\n         LA    R1,BSCPRMS         get @ parms for BSC         CFK*JAN04\n         BASR  R14,R15            call BSC                    CFK*OCT03\n         CLI   BSCONAME,C' '      known address ?             CFK*JAN04\n         BE    NC14               br. if no label at this address\n         MVC   ZZ14(8),BSCONAME   else copy label             CFK*JAN04\nNC14     L     R3,PABF4           get @ PAB in PASS1\n         MVC   OUTOPER(8),ZZ14    complete USING\n         L     R4,APAP4           get @ PA in PASS1\n         LA    R5,ZZ14+7\n* start of loop\nUSO1     CLI   0(R5),C')'\n         BE    USV1\n         CLI   0(R5),C' '\n         BE    ZB14\n         LA    R3,1(R3)\n         B     USV1\nZB14     BCT   R5,USN1            subtract 1 from r5\nUSN1     BCT   R3,USO1\n* end of USO1 loop\nUSV1     MVI   OUTOPER+7,C','\n         MVC   OUTOPER+8(2),EAT+2 copy c'12'\n         CLI   PAS45,X'00'        on 4th pass ?\n         BE    MT6                br. if yes\n         MVC   CD3+3(5),74(R4)    pass input to CDN\n         ST    R13,CD3+8          put R13 where CDN expects it\n         L     R14,ACDN           CONVERT TO BCD\n         CNOP  2,4\n         BALR  R14,R14            call CDN\nCD3      DC    C'0000'            input padding\n         DC    F'0'               output hex number\n         DC    F'0'               R13 reloaded from here\nMT6      MVC   FZ14(4),CD3+4      copy hex number\n         MVI   PLC+3,X'05'\n         B     PLL                go to exit\nPLI5     CLI   PLC+3,X'05'\n         BNE   PLI6\n         CLC   INST4(2),PL6       LA 4,ZZ1 ?\n         BNE   PLL                go to exit if not\n         L     R3,APAP4           get @ PA in PASS1\n         CLI   PAS45,X'00'        on 4th pass ?\n         BE    MT7                br. if yes\n         MVC   CD1+3(5),OUTOPER+4 pass input to CDN\n         ST    R13,CD1+8          put R13 where CDN expects it\n         L     R14,ACDN           CONVERT TO HEX\n         CNOP  2,4\n         BALR  R14,R14            call CDN\nCD1      DC    C'0000'            input padding\n         DC    F'0'               output hex number\n         DC    F'0'               R13 reloaded from here\nMT7      MVC   FAD(4),CD1+4       copy hex number\n         MVI   PLC+3,X'06'\n         B     PLL                go to exit\nMPFF     MVI   PLC+1,X'FF'\n         B     PLL                go to exit\nPLI6     CLI   PLC+3,X'06'\n         BNE   PLI7\n         CLC   INST4+9(3),FZ14+1  A(ZZZ14)\n         BNE   PLI7\n         L     R3,APAP4           get @ PA in PASS1\n         MVC   ZZ14(8),OUTOPER+2\n         CLI   PAS45,X'00'        on 4th pass ?\n         BE    MT8                br. if yes\n         MVC   CD4+3(5),OUTOPER+3 pass input to CDN\n         ST    R13,CD4+8          put R13 where CDN expects it\n         L     R14,ACDN           CONVERT TO HEX\n         CNOP  2,4\n         BALR  R14,R14            call CDN\nCD4      DC    C'0000'            input padding\n         DC    F'0'               output hex number\n         DC    F'0'               R13 reloaded from here\nMT8      MVC   USINGPRM+4(3),CD4+5  copy hex number           CFK*SEP03\n         MVC   USINGPRM(4),RG12   copy USING parms to say R12 is here 3\n         L     R15,FUSI           MAKE ENTRY IN USING TABLE for R12 P03\n         LA    R1,=A(USINGPRM)    get @ parms for USING       CFK*SEP03\n         BASR  R14,R15            call USING csect            CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         MVI   PLC+3,X'07'\n         B     PLL                go to exit\nPLI7     CLI   PLC+3,X'07'\n         BNE   PLI8               go to exit\n         CLC   INST4+9(3),FAD+1   BALR 15,0\n         BNL   PLL                go to exit\n         L     R4,FAD\n         MVC   ICF+1(3),INST4+9   copy current location\n         L     R4,ICF             load current location\n         AH    R4,KEY4+6          add instruction length      CFK*JLY00\n         S     R4,FAD\n         BNP   PLL                go to exit\nLRFT     L     R14,ARFXT          get @ RFTXT in FTXTA\n         ST    R4,RFT\n         CNOP  2,4\n         BALR  R14,R14            call RFTXT\nRFT      DC    F'0'\n* RFTXT is a dummy routine, it just issues ABEND 60,DUMP\n         MVI   PLC+3,X'08'\n         L     R4,LEN4\n         S     R4,RFT\n         ST    R4,LEN4\n         L     R3,APAP4           get @ PA in PASS1\n         MVI   OUTCONST,C' '           ) clear\n         MVC   OUTCONST+1(80),OUTCONST )  print area\n         CLC   LEN4(4),ZZ4    zero ?\n         BE    LFTXT4\n         B     RF5\nPLI8     BCR   0,0            duplicate exit ?\n* exit from the program\nPLL      BCR   0,0            exit program\n         L     R1,SPP1        reload @ parms                  CFK*SEP03\n         MVC   0(24,R1),KEY4  pass back ???                   CFK*SEP03\n         LEAVE ,              return                          CFK*SEP03\nLFTXT4   L     R1,SPP1        reload @ parms                  CFK*SEP03\n         MVI   28(R1),X'01'   set flag                        CFK*SEP03\n         B     PLL            and exit\nRF5      L     R1,SPP1        reload @ parms                  CFK*SEP03\n         MVI   28(R1),X'02'   set flag                        CFK*SEP03\n         B     PLL            and exit\n         DROP  R3             tell asm. done with OUTLINE     CFK*FEB00\n* subroutine to output USING card\nUSSH     ST    R9,AFF         save return address\n         XC    REGU(3),REGU   clear work area\n         MVC   REGU+3(1),USINGPRM+2  register number to print CFK*SEP03\n         MVC   ASAVADR,RGH13+1       address of using stmt    CFK*APR00\n         MVC   ASAVLABL,SPACES       clear input label        CFK*APR00\n         MVI   ASAVTYPE,X'60' type of address                 CFK*APR00\n         ST    R13,REGU+4     put r13 where BCV expects it\n         L     R15,SAVZ4      get @ SAVA csect                CFK*SEP03\n         LA    R1,ASAVPRMS    get @ parms                     CFK*JAN04\n         BASR  R14,R15        call SAVA                       CFK*SEP03\n         L     R14,BCVF       get @ BCV csect\n         CNOP  2,4\n         BALR  R14,R14        call BCV\nREGU     DC    F'0'           output reg number in decimal\n         DC    F'0'           r13 reloaded from here\n         CLI   PAS45,X'FF'    on 2nd pass ?\n         BE    NPFH           br if yes\n         L     R15,PRH        get @ PRINTP csect              CFK*SEP03\n         L     R1,APAP4       get @ print area                CFK*DEC03\n         BASR  R14,R15        call PRINTP                     CFK*SEP03\nNPFH     L     R4,APAP4       get @ PA in PASS1\n         USING OUTLINE,R4     tell assembler                  CFK*FEB00\n         MVC   OUTINSTR(6),USIN4  copy c'USING'\n         MVC   OUTOPER(8),ASAVOUTL copy label to card\n         LA    R5,7           get max length - 1\n         LA    R3,OUTOPER+7   get @ end of label area\n* loop to find end of label\nCEF      CLI   0(R3),C' '     ) find\n         BNE   INSF           )  end\n         BCTR  R3,0           )   of\n         BCT   R5,CEF         )    label\n* end of loop to find end of a label\nINSF     MVI   1(R3),C','     add ,\n         MVC   2(2,R3),REGU   add register number\n         L     R9,AFF         reload return address\n         BR    R9             and return to caller\n*                     constant area\nT13      DC    F'0'\nSPP1     DC    F'0'           save callers r1 (@ parms)       CFK*SEP03\nCOBR     DC    F'0'\nACDN     DC    A(CDN)         @ CDN csect\nZZ4      DC    F'0'           constant\nABSC5    DC    A(BSC)         @ BSC csect\nUS4      DC    A(USING)       @ USING csect\nAPAP4    DC    A(PA)          @ PA in PASS1 csect\nSAVZ4    DC    A(SAVA)        @ SAVA csect\nKEY4     DC    2F'0'          ) input\nINST4    DC    3F'0'          )  parms\nLEN4     DC    F'0'           )   put\nRT4      DC    F'0'           )    here      1st 4 bytes TXT\nROUT4    DC    F'0'           )              @ decoding routine\nCGOS1    DC    X'482058F0'    two 2 byte constants, LH  2, and L   15,\nCGOS2    DC    X'05EF'        constant BALR 14,15\nCBLB     DC    X'05EF'        constant BALR 14,15\nCGOF     DC    F'0'           flag byte\nFAD      DC    F'0'\nFSS1     DC    X'45E0F008'    constant BAL  14,8(15)\nPL1      DC    X'05D0'        constant BALR 13,0\nPL2      DC    X'50F0'        constant ST   15,\nPL3      DC    X'90BC'        constant STM  11,12,\nPL4      DC    X'41B0'        constant LA   11,\nPL5      DC    X'58C0'        constant L    12,\nPL6      DC    X'4140'        constant LA   4,\nEAT      DC    C'1112'        two 2 byte constants\nSPACES   DC    CL8' '         constant                        CFK*APR00\nUSIN4    DC    C'USING'       constant\nZZ14     DC    C'      '\n         DC    C'  '\nFSS2     DC    X'05F0'        constant, BALR 15,0\nDROP4    DC    C'DROP'        constant\n         DC    C'  15'\n         DC    C'  '\nFZ14     DC    F'0'\nRG11     DC    X'0100B000'    constant\nRG12     DC    X'0100C000'    constant\nPABF4    DC    A(PAB)         @ PAB in PASS1\nFUSI     DC    A(USING)       @ USING csect\nRGH13    DC    F'0'\nFHS1     DC    X'47F0F00C'    constant, B   12(15)\nICF      DC    F'0'\nARFXT    DC    A(RFTXT)       @ RFTXT in FTXTA csect\nROUTAE   DC    A(ARL)         @ ARL csect\nBCVF     DC    A(BCV)         @ BCV csect\nPRH      DC    A(PRINTP)      @ PRINTP csect                  CFK*DEC03\nAFF      DC    F'0'           save return address from USSH routine\nF100     DC    F'4096'        constant\nCOBRA    DC    F'0'\nPLCB     DC    F'0'           entry point ref'ed by PASS4\nPLC      DC    F'0'           ) all\nCOBRG    DC    F'48'          ) these\nCOBA     DC    F'0'           ) fields\nACT      DC    F'0'           ) set\nCOBF     DC    F'0'           ) by\nFFAD     DC    F'0'           ) PASS4\nFFC      DC    F'0'           )\nFORHF    DC    F'0'           )\nPAS45    DC    X'FF000000'    ) flag, 1st byte set to x'00' to\n*                               indicate the 2nd use of PASS4\nSAVEAREA DS    18F                                            CFK*SEP03\n* parms to call BSC                                           CFK*JAN04\nBSCPRMS  DS    0F                 parms to call BSC           CFK*JAN04\nBSCFLAG  DC    X'0'                                           CFK*JAN04\nBSCONAME DS    0CL8               output name                 CFK*JAN04\nBSCKEY   DS    0CL11              key to search on            CFK*JAN04\nBSCSECT  DS    CL8                csect name                  CFK*JAN04\nBSCA3    DS    XL3                input 3 byte address        CFK*JAN04\n* end of BSC parms                                            CFK*JAN04\n* parms to call SAVA                                          CFK*SEP03\nASAVPRMS DS    0XL20          parms to call SAVA              CFK*JAN04\nASAVTYPE DC    X'00'          input data type                 CFK*APR00\nASAVSECT DS    CL8            current csect, set by PASS4     CFK*DEC03\nASAVADR  DC    XL3'00'        input address                   CFK*APR00\nASAVOUTL DS    0CL8           output address                  CFK*JAN04\nASAVLABL DC    CL8' '         input label                     CFK*APR00\n* end of SAVA parms                                           CFK*SEP03\n* parms to call USING                                         CFK*SEP03\nUSINGPRM DC    F'0'\n         DC    F'0'\n* end of USING parms                                          CFK*SEP03\n*  USING parms are:\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve\n*    +2  1 byte address part of instruction\n*    +3  1 byte address part of instruction\n*    +4  3 byte current loc (?) - if insert\n*    +7  1 byte instruction format from AXN table\n         YREGS ,                register equates              CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SS": {"ttr": 6146, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SS       TITLE 'SS '\n***********************************************************************\n*                                                                     *\n*      Format the parameters of a SS or SSE format instruction        *\n*                                                                     *\n*    eg  MVC   123(1,2),3(4)    (if format =x'50')  type 0            *\n*        AP    123(4,2),3(4,5)  (if format =x'51')  type 1            *\n*        MVCK  123(1,2),3(4),5  (if format =x'52')  type 2            *\n*        LASP  123(2),3(4)      (if format =x'53')  SSE (type 3)      *\n*        SRP   123(1,2),3(4),5  (if format =x'54')  type 4, L1, not R1*\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  @ output buffer                                              *\n*    +4  instruction format (copy of AXNFMT)                          *\n*    +8  instruction TEXT                                             *\n*    +10 2 bytes passed to ADDR csect (1st adr call)                  *\n*    +12 2 bytes passed to ADDR csect (2nd adr call)                  *\n*    +19 flag, passed to ADDR csect, x'50' if 1 length field, else 51 *\n*    +20 module returns to here                                       *\n*                                                                     *\n*  History:                                                           *\n*    Support SS type 2 instruction format                CFK Jun 1999 *\n*    Support SSE instruction format                      CFK Jun 1999 *\n*    Map output line with OUTLINE macro                  CFK Feb 2000 *\n*    Use register equates                                CFK Dec 2000 *\n*    Use standard linkage comventions                    CFK Nov 2003 *\n*                                                                     *\n***********************************************************************\n         FMTPARMS                 map parameters              CFK*JUN99\n         OUTLINE                  map output line             CFK*FEB00\nSS       CSECT\n         ENTER ,                  entry logic                 CFK*NOV03\n         LR    R10,R1             copy @ parms                CFK*NOV03\n         USING FMTPARMS,R10       tell assembler              CFK*NOV03\n         EXTRN ADDR               csect\n         MVC   SSD+15(1),FMTFLG1  pass AXNFLG1 to ADDR\n         SR    R3,R3\n         IC    R3,FMTTEXT2        get length from instr\n         CLI   FMTFMT,FMTFSS      1 length field ?\n         BE    DSS                br if yes\n         SRL   R3,4               else extract 1st length field only\nDSS      DS    0H                                             CFK*JUN99\n         CLI   FMTFMT,FMTFSS2     type 2 instruction format ? CFK*JUN99\n         BE    DSS2               branch if so                CFK*JUN99\n         LA    R3,1(R3)           else calc number of bytes to move\nDSS2     DS    0H                                             CFK*JUN99\n         CVD   R3,SWA             ) make\n         UNPK  SWB(4),SWA+4(4)    )  length/register\n         OI    SWB+3,C'0'         )   decimal\n         SR    R2,R2\n         ST    R2,SSD             clear ADDR\n         ST    R2,SSD+4            parms\n         MVC   SSD+2(2),FMTTEXT3  copy TEXT for first address\n         MVC   SSD+5(3),SWB+1     pass length (decimal)\n         MVC   SSD+8(4),FMTPA     pass @ Print Area\n         CLI   FMTFMT,FMTFSSE     SSE instruction ?           CFK*JUN99\n         BNE   CALL1              branch if not               CFK*JUN99\n         MVI   SSD+4,X'01'        else signal no length       CFK*JUN99\nCALL1    DS    0H                                             CFK*JUN99\n         L     R15,ADDSS          get @ ADDR csect            CFK*NOV03\n         LA    R1,SSD             get @ parms                 CFK*NOV03\n         BASR  R14,R15            call ADDR csect             CFK*NOV03\n         L     R4,FMTPA           get @ output buffer\n         USING OUTLINE,R4         tell assembler              CFK*FEB00\n         L     R3,SSD+12          get address length\n         S     R3,SSONE           -1 for mvc\n         EX    R3,MVSS            copy address to o/p buffer\n         SR    R2,R2\n         ST    R2,SSD             clear ADDR                  CFK*NOV03\n         ST    R2,SSD+4            parms                      CFK*NOV03\n         MVC   SSD+2(2),FMTTEXT5  copy TEXT for 2nd address   CFK*NOV03\n         MVC   SSD+8(4),FMTPA     pass @ Print Area           CFK*NOV03\n         AR    R4,R3              adj o/p buffer adr for 1st adr len\n         ST    R4,SAP             save it\n         MVI   OUTOPER+1,C','     add ,\n         MVI   SSD+4,X'01'        signal no len in the addressCFK*NOV03\n         CLI   FMTFMT,FMTFSS1     2 lengths ?\n         BNE   DSS3               no, don't format 2nd length\n         IC    R3,FMTTEXT2        else get length\n         SLL   R3,28              ) mask out\n         SRL   R3,28              ) low 4 bits\n         LA    R3,1(R3)           make\n         CVD   R3,SWA              length\n         UNPK  SWB(4),SWA+4(4)      printable\n         OI    SWB+3,C'0'\n         MVC   SSD+6(2),SWB+2     copy length to ADDR parms   CFK*NOV03\n         MVI   SSD+4,X'00'        signal length wanted        CFK*NOV03\nDSS3     L     R15,ADDSS          get @ ADDR csect            CFK*NOV03\n         LA    R1,SSD             get @ parms for ADDR        CFK*NOV03\n         BALR  R14,R15            call addr csect             CFK*NOV03\n         L     R3,SSD+12          get address length          CFK*NOV03\n         S     R3,SSONE           -1 for execute\n         L     R4,SAP             reload @ o/p buffer (adjusted)\n         LA    R4,OUTOPER+2       calc where to put 2nd address\n         DROP  R4                 tell assembler R4 changed   CFK*FEB00\n         EX    R3,MVS2            copy 2nd address\n         CLI   FMTFMT,FMTFSS2     SS type 2 instruction       CFK*JUN99\n         BE    TRAIL              need trailing reg if so     CFK*JUN99\n         CLI   FMTFMT,FMTFSS4     SS type 4 instruction       CFK*JUN99\n         BNE   DONE               finished if not             CFK*JUN99\nTRAIL    DS    0H                                             CFK*JUN99\n         A     R4,SSD+12          else calc @ end of data so far *NOV03\n         MVI   0(R4),C','         add ,                       CFK*JUN99\n         IC    R3,FMTTEXT2        get register number         CFK*JUN99\n         SLL   R3,28              ) mask out                  CFK*JUN99\n         SRL   R3,28              ) low 4 bits                CFK*JUN99\n         CVD   R3,SWA             make                        CFK*JUN99\n         UNPK  SWB(3),SWA+6(2)     register                   CFK*JUN99\n         OI    SWB+2,C'0'           printable                 CFK*JUN99\n         CLI   SWB+1,C'0'         2 byte reg. number ?        CFK*JUN99\n         BNE   TWOBYTE            br if two bytes to move     CFK*JUN99\n         MVC   1(1,R4),SWB+2      else copy 1 byte to output  CFK*JAN00\n         B     DONE                                           CFK*JUN99\nTWOBYTE  MVC   1(2,R4),SWB+1      copy 2 bytes to output      CFK*JUN99\nDONE     DS    0H                                             CFK*JUN99\n         LEAVE ,                  RETURN                      CFK*NOV03\n         USING OUTLINE,R4         as when EXecuted            CFK*FEB00\nMVSS     MVC   OUTOPER(1),SSD     EXecuted instruction\nMVS2     MVC   0(1,R4),SSD        EXecuted instruction        CFK*NOV03\n         DC    C'IMM='\nADDSS    DC    A(ADDR)            @ ADDR csect\nSAP      DC    F'0'               save @ o/p buf adj for 1st adr len\nSSONE    DC    F'1'               constant 1\nSWA      DC    D'0'               CVB work area\nSWB      DC    F'0'               work area\n* Parms to call ADDR                                          CFK*NOV03\n*  input: addressed by R14                                            *\n*    +0  2 bytes x'00' (always ?)                                     *\n*    +2  2 byte address part of instruction                           *\n*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *\n*    +5  start of 3 byte length for SS instrs or x'00'                *\n*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *\n*    +8  4 byte address of output buffer holding current line         *\n*    +15 1 byte instruction format from AXN                           *\n*                                                                     *\n*  output: addressed by R14                                           *\n*    +0  1-12 byte address                                            *\n*    +12 length of address (fullword)                                 *\nSSD      DC    4F'0'                                          CFK*NOV03\n* end of ADDR parms                                           CFK*NOV03\nSAVEAREA DS    18F                                            CFK*NOV03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYM": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x04\\x01?\\x01\\x04\\x01O\\x12C\\x02\\x1e\\x02\\x1d\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-01-13T00:00:00", "modifydate": "2004-01-14T12:43:13", "lines": 542, "newlines": 541, "modlines": 0, "user": "U765139"}, "text": "SYM     TITLE '* * * S Y M * * * (process SYM cards)  '\n***********************************************************************\n*                                                                     *\n*  Process SYM card from input                                        *\n*                                                                     *\n*  Called by PASS1                                                    *\n*                                                                     *\n*  Parms @ r1:                                                        *\n*    input card                                                       *\n*                                                                     *\n*  Register use:                                                      *\n*    R0 - temp store for operand length                               *\n*    R1 - @ input card                                                *\n*    R2 - @ current SYM entry                                         *\n*    R3 - length of current SYM entry                                 *\n*    R4 - @ type field in SYM entry                                   *\n*    R5 - work reg                                                    *\n*    R6 - @ current location to print operand to                      *\n*    R7 - @ mult/scale                                                *\n*    R8 - used to multiply R9 by R5                                   *\n*    R9 - total length of operand (multiplicity * length)             *\n*   R10 - current address in DSECT                                    *\n*   R11 -                                                             *\n*   R12 - base reg                                                    *\n*   R13 - @ save area                                                 *\n*   R14 - @ print area / @ parameters                                 *\n*   R15 -                                                             *\n*                                                                     *\n* History:                                                            *\n*   Newly written.                                        CFK Apr 2000*\n*   Entry type field is only present for data type entrys.CFK Aug 2000*\n*   Allow for DS length field.                            CFK Sep 2000*\n*   Check for valid non-data type.                        CFK Sep 2000*\n*   Tell SAVA if we are a CSECT.                          CFK Sep 2000*\n*   Exit gracefully if position lost.                     CFK Sep 2000*\n*   Print/punch DSECTs.                                   CFK Dec 2000*\n*   Check for data type x'0C' which is invalid.           CFK Jan 2001*\n*   Packed or zoned decimal data only has 1 length byte.  CFK Jan 2001*\n*   Generate DS    XL2 for instructions in DSECTs.        CFK Jan 2001*\n*   Generate ORG statements in dsects when needed.        CFK Jan 2001*\n*   Stop punching DSECTs when COM found.                  CFK Jan 2001*\n*   Use standard entry/exit logic.                        CFK Apr 2001*\n*   *temp* mod for calls from DISYM.                      CFK Apr 2001*\n*   Allow for imbedded short cards.                       CFK May 2001*\n*   Check symbol name does not start with space.          CFK May 2001*\n*   Correctly check if an entry is complete.              CFK May 2001*\n*   Put ESD ID onto listing.                              CFK May 2001*\n*   Asm XF & Tachyon Cross Assembler put EQUates into SYM.CFK Jly 2001*\n*   Use standard linkage conventions when called.         CFK Sep 2003*\n*   Use standard linkage conventions to call SAVA.        CFK Sep 2003*\n*   Remove mod for calls from DISYM.                      CFK Sep 2003*\n*   Tidy up calls to PRINTA and PRINTP.                   CFK Dec 2003*\n*   Pass current section to SAVA.                         CFK Dec 2003*\n*                                                                     *\n***********************************************************************\n         OUTLINE              output line                     CFK*DEC00\n*\nSYMCARD  DSECT                cols\n         DS    X'02'             1   constant\n         DS    C'SYM'          2-4   constant\n         DS    CL6             5-10  Blank\nSYMDLEN  DS    H              11-12  number of bytes of text in\nSYMDLEN1 EQU   SYMDLEN+1,1       12  variable field (columns 17-72)\n         DS    CL4            13-16  Blank\nSYMDATA  DS    CL56           17-72  Variable field (see below)\nSYMSEQNO DS    CL8            73-80  Deck ID, sequence number, or both.\nSYMESDID EQU   SYMSEQNO+2,2   74-75  ESD ID for this card     CFK*MAY01\n*   The deck ID is the name from the first TITLE statement that\n*   has a nonblank name field.  The name can be 1-to-8 characters.\n*   If the name is fewer than 8 characters or if there is no name,\n*   the remaining columns contain a record sequence number.\n*\n*   The variable field (columns 17-72) contains up to 56 bytes of\n*   TESTRAN text.  The items comprising the text are packed together;\n*   consequently, only the last record may contain less than 56 bytes\n*   of text in the variable field.  The formats of a text record and an\n*   individual text item are shown in Figure 71.  The contents of the\n*   fields within an individual entry are as follows:\n*\nSYMENTRY DSECT                map one entry\nSYMEFLG1 DS    X              flag byte\nSYMF1TYP EQU   B'10000000'      data type entry\nSYMF1NDT EQU   B'01110000'      mask for non data type\nSYMF1DS  EQU   B'00000000'      space (DS)               )\nSYMF1CSE EQU   B'00010000'      Control Section (CSECT)  ) If\nSYMF1DSE EQU   B'00100000'      Dummy Section (DSECT)    ) non\nSYMF1COM EQU   B'00110000'      Common                   ) data\nSYMF1INS EQU   B'01000000'      Instruction              ) type\nSYMF1CCW EQU   B'01010000'      CCW, CCW0, CCW1          )\nSYMF1EQU EQU   B'01100000'      EQUate                   )    CFK*JLY01\nSYMF1MAX EQU   B'01100000'      Max valid non data type  )    CFK*JLY01\nSYMF1MUL EQU   B'01000000'      multiplicity (M) field present ) If\nSYMF1CL  EQU   B'00100000'      cluster (PD or ZD)             ) data\nSYMF1SC  EQU   B'00010000'      scaling (S) field present      ) type\nSYMF1NM  EQU   B'00001000'      name not present if 1\nSYMF1NML EQU   B'00000111'      length of name-1 (mask for)\n* Organization (1 byte).  The possible values are shown below.\n* ZDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDD?\n* 3  Bits  3 Value                       3 Description                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    0   3 0                           3 Non-data type              3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Data type                  3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   1-3  3 000                         3 Space                      3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 001                         3 Control section            3\n* 3   non  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3  data  3 010                         3 Dummy control section      3\n* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 011                         3 Common                     3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 100                         3 Instruction                3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 101                         3 CCW, CCW0, CCW1            3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    1   3 0                           3 No multiplicity            3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 1                           3 Multiplicity               3\n* 3  data  3                             3 (indicates presence        3\n* 3  type  3                             3 of M Field)                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    2   3 0                           3 Independent                3\n* 3   If   3                             3 (not a packed or zoned     3\n* 3  data  3                             3 decimal constant)          3\n* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Cluster                    3\n* 3        3                             3 (packed or zoned           3\n* 3        3                             3 decimal constant)          3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    3   3 0                           3 No scaling                 3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   If   3 1                           3 Scaling                    3\n* 3  data  3                             3 (indicates presence        3\n* 3  type  3                             3 of S field)                3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3    4   3 0                           3 Name present               3\n* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3        3 1                           3 Name not present           3\n* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4\n* 3   5-7  3                             3 Length of                  3\n* 3        3                             3 name minus 1               3\n* @DDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDY\n*\nSYMEADR  DS    XL3\n*       Address (3 bytes)--displacement from base of control section\n*\nSYMFLEN  EQU   *-SYMENTRY         length of fixed part\nSYMMINLN EQU  SYMFLEN      minimum length of an entry\n*\nSYMNAME  DS    C\n* Symbol Name (0-8 bytes)--symbolic name of particular item.  If the\n* entry is nondata type and space, an extra byte is present that\n* contains the number of bytes that have been skipped.\n*\nSYMENTR1 DSECT             only present if data type\nSYMTYPE  DS   X       Data Type (1 byte)--contents in hexadecimal\nSYMTCHAR EQU  X'00' = character                         C  2     1\nSYMTHEX  EQU  X'04' = hexadecimal or pure DBCS (G-type) X  2     1\nSYMTBIN  EQU  X'08' = binary                            B  2     1\nSYMTINV  EQU  X'0C' = ** this is not used **\nSYMTFULL EQU  X'10' = fixed point, full                 F  1  S  4\nSYMTHALF EQU  X'14' = fixed point, half                 H  1  S  2\nSYMTSHRT EQU  X'18' = floating point, short             E  1  S  4\nSYMTLONG EQU  X'1C' = floating point, long              D  1  S  8\nSYMTACON EQU  X'20' = A-type or Q-type data             A  1     4\nSYMTYCON EQU  X'24' = Y-type data                       Y  1     2\nSYMTSCON EQU  X'28' = S-type data                       S  1     2\nSYMTVCON EQU  X'2C' = V-type data                       V  1     4\nSYMTPACK EQU  X'30' = packed decimal                    P  1  S  1\nSYMTZONE EQU  X'34' = zoned decimal                     Z  1  S  1\nSYMTEXT  EQU  X'38' = floating point, extended          L  1    16\n*\nSYMENTLN DS   XL2\n*  5. Length (2 bytes for character, hexadecimal, decimal, or binary\n*     items; 1 byte for other types)--length of data item minus 1\n*\nSYMMULT  DS   XL3\n*   6.  Multiplicity-M field (3 bytes)--equals 1 if not present\n*\nSYMSCALE DS   XL2\n*   7.  Scale-signed integer-S field (2 bytes)--present only for F-,\n*       H-, E-, D-, P-, and Z-type data, and only if scale is nonzero.\n*\nSYMMAXLN EQU  *-SYMENTR1+SYMFLEN+1+8  maximum length of an entry\n*\n* ZDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD?\n* 3                                                                   3\n* 3   1     2 4 5  10 11   12 13 16 17                  72 73    80   3\n* 3  ZDDDDDBDDDBDDDDDBDDDDDDDBDDDDDBDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDD?  3\n* 3  3     3   3     3No. of 3     3                      3Deck Id 3  3\n* 3  3X'02'3SYM3Blank3bytes  3Blank3TESTRAN Text -        3and Seq.3  3\n* 3  3     3   3     3of text3     3 packed entries       3Number  3  3\n* 3  @DDDDDADDDADDDDDADDDDDDDADDDDDADDDDDDDDDDDDDDDDDDDDDDADDDDDDDDY  3\n* 3     1    3    6      2      4           56             8          3\n* 3                                                                   3\n* 3  TESTRAN Text                                                     3\n* 3                                                                   3\n* 3  ZDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDD?  3\n* 3  3  Entry     3     N Complete entries          3    Entry     3  3\n* 3  3(Complete or3          N >= 1                 3(Complete or  3  3\n* 3  3end portion)3                                 3head portion) 3  3\n* 3  @DDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDY  3\n* 3                 Variable size entries                             3\n* 3                                                                   3\n* 3  Entry                                                            3\n* 3                                                                   3\n* 3  ZDDDDBDDDDDDDBDDDDDDDDDDDBDDDDBDDDDDDBDDDDDDBDDDDD?              3\n* 3  3Org.3Address3Symbol name3Data3Length3Mult. 3Scale3              3\n* 3  3    3       3           3Type3      3Factor3     3              3\n* 3  @DDDDADDDDDDDADDDDDDDDDDDADDDDADDDDDDADDDDDDADDDDDY              3\n* 3    1      3      0-8       0-1   1-2     3      2                 3\n* 3                                                                   3\n* @DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDY\n*   Figure 71. TESTRAN SYM Record Format\n         EJECT\nSYM      CSECT                                                CFK*APR01\n         ENTER                    entry logic                 CFK*APR01\n         EXTRN PA                 in PASS1 csect              CFK*SEP00\n         EXTRN SAVA               csect\n         L     R1,0(R1)           get @ input card            CFK*OCT03\n         USING SYMCARD,R1         tell assembler about parm\n         TM    FLAGS1,FL1ERROR    position lost ?             CFK*SEP00\n         BNO   Z00A               carry on if not             CFK*APR01\n         CLI   SYMDLEN1,56        full card of data ?         CFK*APR01\n         BE    Z90Z1              if so exit now              CFK*APR01\n         NI    FLAGS1,X'FF'-FL1ERROR  else reset error flag   CFK*APR01\n         MVC   WORKADR,=A(MAINBUF)    reset start pointer     CFK*APR01\n         B     Z90Z               and exit                    CFK*APR01\nZ00A     DS    0H                                             CFK*APR01\n         CLI   SYMDLEN1,X'00'     0 bytes text on this card ?\n         BE    Z90Z1              yes, exit\n         LA    R2,MAINBUF         get @ buffer\n         AH    R2,SYMDLEN         calc @ end of buffer\n         ST    R2,ENDADR          save @ end of buffer\n         MVC   MAINBUF,SYMDATA    copy input to buffer\n         DROP  R1                 done with input card\n         ST    R1,SAV@CARD        save @ input card           CFK*MAY01\n* start of main loop\nZ10A     DS    0H\n         L     R2,WORKADR         get @ SYM entry\n         USING SYMENTRY,R2        tell assembler\n         C     R2,ENDADR          do we have another entry ?  CFK*MAY01\n         BNL   Z90Z               exit if not                 CFK*MAY01\n         C     R2,=A(MINEND)      do we have enough for an entry ?\n         BH    Z90Z               exit if not\n         XR    R3,R3              clear length of entry\n         MVC   SAVATYPE,SYMEFLG1  tell SAVA what it is        CFK*JAN04\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?\n         BO    Z20A3              branch if so                CFK*JAN01\n         MVC   SVFLG1,SYMEFLG1    copy flags\n         NI    SVFLG1,SYMF1NDT    mask out non-data type\n         CLI   SVFLG1,SYMF1MAX    Valid non-data type ?       CFK*SEP00\n         BH    Z80ERR             no, we're lost !            CFK*SEP00\n         CLI   SVFLG1,SYMF1DSE    Dsect ?\n         BNE   Z20A1              br if not\n         OI    FLAGS1,FL1DSFND    remember we are in a DSECT\n         XC    CURRADR,CURRADR    and zero current address    CFK*JAN01\nZ20A1    DS    0H\n         CLI   SVFLG1,SYMF1COM    COM ?                       CFK*JAN01\n         BE    Z20A2              br if COM                   CFK*JAN01\n         CLI   SVFLG1,SYMF1CSE    Csect ?\n         BNE   Z20A3              br if not\nZ20A2    DS    0H                                             CFK*JAN01\n         NI    FLAGS1,X'FF'-FL1DSFND  remember we are not in a DSECT\n         XC    CURRADR,CURRADR    and zero current address    CFK*MAY01\n         MVI   SAVATYPE,X'61'     tell SAVA we are a CSECT    CFK*SEP00\nZ20A3    DS    0H\n         TM    SYMEFLG1,SYMF1NM   is a name present\n         BO    Z20B               branch if not\n         CLI   SYMNAME,C' '       Valid name (not spaces) ?   CFK*MAY01\n         BE    Z80ERR             no, we're lost !            CFK*MAY01\n         MVC   SAVANAME,SPACES    clear output name           CFK*APR01\n         IC    R3,SYMEFLG1        get length\n         N     R3,=A(SYMF1NML)     of name - 1\n         EX    R3,MVC1            copy name to SAVA parms\n         LA    R3,1(R3)           add 1 to get full length\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*JAN04\n         BO    Z20B               branch if so                CFK*JAN04\n         CLI   SVFLG1,SYMF1CSE    Csect ?                     CFK*DEC03\n         BNE   Z20B               br if not                   CFK*DEC03\n         MVC   SAVASECT,SAVANAME  copy section to SAVA parms  CFK*DEC03\nZ20B     DS    0H\n         LA    R3,SYMMINLN(R2,R3) add minimum length to name length\n         C     R3,ENDADR          do we have the type field ?\n         BNL   Z90Z               exit if not\n         LR    R4,R3              copy @ type                 CFK*DEC00\n         USING SYMENTR1,R4        tell assembler              CFK*DEC00\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*AUG00\n         BO    Z20C               br. if so                   CFK*SEP00\n         CLI   SVFLG1,SYMF1DS     space ?                     CFK*SEP00\n         BNE   Z20F               br. if not (no type field)  CFK*SEP00\n         LA    R3,1(R3)           else allow for DS length    CFK*SEP00\n         B     Z20F               and carry on                CFK*SEP00\nZ20C     DS    0H                                             CFK*SEP00\n         TM    SYMTYPE,B'00000011' valid type (divisible by 4) ?\n         BNZ   Z80ERR             no - we're lost !           CFK*SEP00\n         CLI   SYMTYPE,SYMTEXT    larger than highest type ?\n         BH    Z80ERR             yes - we're lost !          CFK*SEP00\n         CLI   SYMTYPE,SYMTINV    invalid value ?             CFK*JAN01\n         BE    Z80ERR             yes - we're lost !          CFK*JAN01\n         CLI   SYMTYPE,SYMTBIN    2 byte length field ?\n         BH    Z20D2              br if one byte              CFK*JAN01\nZ20D1    DS    0H                 2 byte length field found\n         LA    R3,1(R3)           allow for 2nd byte\nZ20D2    DS    0H\n         LA    R3,2(R3)           allow for type and length fields\n         TM    SYMEFLG1,SYMF1MUL  M field present ?\n         BZ    Z20E               branch if not\n         LA    R3,L'SYMMULT(R3)   else add length of mult field\nZ20E     DS    0H\n         TM    SYMEFLG1,SYMF1SC   S field present ?\n         BZ    Z20F               branch if not\n         LA    R3,L'SYMSCALE(R3)  else add length of scale field\nZ20F     DS    0H\n         C     R3,ENDADR          do we have the whole entry ?\n         BH    Z90Z               exit if not                 CFK*MAY01\n         ST    R3,WORKADR         save @ next entry\n         TM    FLAGS1,FL1DSFND    are we in a DSECT ?\n         BO    Z30A               skip entry if so            CFK*DEC00\n         TM    SYMEFLG1,SYMF1NM   is a name present\n         BO    Z10A               skip entry if not\n         MVC   SAVAADR,SYMEADR    copy address to SAVA parms\n         L     R15,ASAVA          get @ SAVA csect            CFK*SEP03\n         LA    R1,SAVAPRMS        get @ parms                 CFK*SEP03\n         BASR  R14,R15            call SAVA                   CFK*SEP03\n         C     R3,ENDADR          do we have another entry ?\n         BNL   Z90Z               exit if not\n         B     Z10A               go to handle next entry\n*\nZ30A     DS    0H       Print one line in a DSECT             CFK*DEC00\n         L     R14,=A(PA)         get @ print area            CFK*DEC00\n         USING OUTLINE,R14        tell assembler              CFK*DEC00\n         L     R10,CURRADR        get last address            CFK*JAN01\n         CLM   R10,B'0111',SYMEADR are we at next address ?   CFK*JAN01\n         BE    Z30B               branch if so                CFK*JAN01\n* we need to ORG to the next address                          CFK*JAN01\n         MVC   OUTINSTR(3),=C'ORG' instruction                CFK*JAN01\n         MVC   OUTOPER(2),=C'*+'  start of operand            CFK*JAN01\n         XR    R5,R5              clear work register         CFK*JAN01\n         ICM   R5,B'0111',SYMEADR get next address            CFK*JAN01\n         SR    R5,R10             calc difference             CFK*JAN01\n         BNM   Z30A1              is it negative ?            CFK*JAN01\n         MVI   OUTOPER+1,C'-'     if so tell assembler        CFK*JAN01\n         LPR   R5,R5              and make number positive    CFK*JAN01\nZ30A1    DS    0H                                             CFK*JAN01\n         MVC   OUTOPER+2(10),=X'40202020202020202120' mask    CFK*JAN01\n         CVD   R5,DWORK           make PD                     CFK*JAN01\n         LA    R1,OUTOPER+11      point R1 at last byte       CFK*JAN01\n         EDMK  OUTOPER+2(10),DWORK+3  make printable          CFK*JAN01\n         MVC   OUTOPER+2(10),0(R1) move down offset           CFK*JAN01\n         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03\n         LR    R1,R14             get @ print area            CFK*DEC03\n         BASR  R14,R15            output the ORG card         CFK*JAN01\n         L     R14,=A(PA)         get @ print area again      CFK*OCT03\n         ICM   R10,B'0111',SYMEADR now we are at new address  CFK*JAN01\nZ30B     DS    0H                                             CFK*JAN01\n* first, put address onto listing                             CFK*DEC00\n         UNPK  OUTLOC(7),SYMEADR(4)  make address hex         CFK*DEC00\n         TR    OUTLOC,TRTAB-240   make it printable           CFK*DEC00\n         MVI   OUTLOC+6,C' '      get rid of gash byte        CFK*DEC00\n* put name (could be spaces) onto listing                     CFK*DEC00\n         MVC   OUTLABEL,SAVANAME  copy name                   CFK*APR01\n         MVC   SAVANAME,SPACES    and clear it for next time  CFK*APR01\n* work out instruction field                                  CFK*DEC00\n         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*DEC00\n         BO    Z30C               branch if so                CFK*DEC00\n* process non data type entry                                 CFK*DEC00\n         XR    R5,R5              clear work register         CFK*DEC00\n         IC    R5,SVFLG1          get non-data type           CFK*DEC00\n         SRL   R5,4               move to low nybble          CFK*DEC00\n         MH    R5,=AL2(NDTTBELN)  mul by table entry length   CFK*DEC00\n         LA    R5,NDTTAB(R5)      get @ entry                 CFK*DEC00\n         MVC   OUTINSTR,0(R5)     copy non data type to o/p   CFK*DEC00\n         CLI   SVFLG1,SYMF1INS    instruction ?               CFK*JAN01\n         BNE   Z30B1              br. if not                  CFK*JAN01\n* process instruction                                         CFK*JAN01\n         MVC   OUTOPER(3),=C'XL2' assume 2 byte instruction   CFK*JAN01\n         MVC   OUTOPER+30(11),=C'Instruction' comment instr   CFK*JAN01\n         LA    R10,2(R10)         add assumed length to adr.  CFK*JAN01\n         B     Z30X               and print DS                CFK*DEC00\nZ30B1    DS    0H                                             CFK*JAN01\n         CLI   SVFLG1,SYMF1CCW    CCW ?                       CFK*JAN01\n         BNE   Z30B2              br. if not                  CFK*JAN01\n* process CCW                                                 CFK*JAN01\n         MVC   OUTOPER(7),=C'0,0,0,0'  add dummy operands     CFK*JAN01\n         LA    R10,8(R10)         add length to address       CFK*JAN01\n         B     Z30X               and print DS                CFK*DEC00\nZ30B2    DS    0H                                             CFK*JAN01\n         CLI   SVFLG1,SYMF1DS     space ?                     CFK*DEC00\n         BNE   Z30B3              br. if not                  CFK*JLY01\n* put DS length onto output                                   CFK*DEC00\n         XR    R5,R5              clear work register         CFK*DEC00\n         IC    R5,0(R4)           get length                  CFK*DEC00\n         AR    R10,R5             add to current address      CFK*JAN01\n         CVD   R5,DWORK           make PD                     CFK*DEC00\n         MVC   OUTOPER+1(4),=X'40202120' add EDit mask        CFK*DEC00\n         LA    R1,OUTOPER+4      prime R1                     CFK*DEC00\n         EDMK  OUTOPER+1(4),DWORK+6    make length printable  CFK*DEC00\n         MVC   OUTOPER(2),=C'XL' add XL                       CFK*DEC00\n         MVC   OUTOPER+2(3),0(R1) move down number            CFK*DEC00\n         MVC   OUTOPER+30(8),=C'Not Data'  comment non-data   CFK*DEC00\n         B     Z30X               and print DS                CFK*DEC00\nZ30B3    DS    0H                                             CFK*JLY01\n         CLI   SVFLG1,SYMF1EQU    EQUate ?                    CFK*JLY01\n         BNE   Z30X               br. if not                  CFK*JLY01\n* put EQU * onto output                                       CFK*JLY01\n         MVI   OUTOPER,C'*'       put * onto output           CFK*JLY01\n         B     Z30X               and print DS                CFK*JLY01\n* process data-type entry                                     CFK*DEC00\nZ30C     DS    0H                 data type entry found       CFK*DEC00\n         MVC   OUTINSTR(2),=C'DS' add DS                      CFK*DEC00\n         LA    R6,OUTOPER         get @ start of operand      CFK*DEC00\n* get length and @ mult/scale                                 CFK*DEC00\n         XR    R9,R9              clear work reg              CFK*DEC00\n         ICM   R9,B'0011',SYMENTLN assume 2 byte length       CFK*DEC00\n         LA    R7,SYMENTLN+2      get @ mult/scale if 2 byte  CFK*DEC00\n         CLI   SYMTYPE,SYMTBIN    is it 2 byte ?              CFK*DEC00\n         BNH   Z30C1              br if so                    CFK*DEC00\n         SRL   R9,8               else only want 1 byte       CFK*DEC00\n         BCTR  R7,0               and mult/scale is back 1    CFK*DEC00\nZ30C1    DS    0H                                             CFK*DEC00\n         LA    R9,1(R9)           calc actual length          CFK*JAN01\n         LR    R0,R9              save actual length          CFK*JAN01\n* check for multiplicity                                      CFK*DEC00\n         TM    SYMEFLG1,SYMF1MUL  is a multiplicity present ? CFK*DEC00\n         BZ    Z30D               br. if not                  CFK*DEC00\n* put multiplicity on output                                  CFK*DEC00\n         XR    R5,R5              clear work reg              CFK*DEC00\n         ICM   R5,B'0111',0(R7)   get multiplicity            CFK*DEC00\n         CVD   R5,DWORK           make length PD              CFK*DEC00\n         MVC   OUTOPER(9),=X'202020202020202120'  EDit mask   CFK*DEC00\n         LA    R1,OUTOPER+8       prime R1                    CFK*DEC00\n         EDMK  OUTOPER-1(10),DWORK+3    make mult printable   CFK*DEC00\n         MVC   OUTOPER(9),0(R1)   move down number            CFK*DEC00\n         SR    R6,R1              calc - number len           CFK*DEC00\n         LA    R6,OUTOPER+9(R6)   calc @ next o/p byte        CFK*JAN01\n         LA    R7,3(R7)           skip mult to get @ scale    CFK*DEC00\n         MR    R8,R5              mul length (R9) by mult (R5)CFK*JAN01\nZ30D     DS    0H       put type onto record                  CFK*DEC00\n         AR    R10,R9             add total len to curr. adr. CFK*JAN01\n         XR    R5,R5              clear work reg              CFK*DEC00\n         IC    R5,0(R4)           get data type               CFK*DEC00\n         SRL   R5,2               make it type number         CFK*DEC00\n         IC    R5,DTTAB(R5)       get character               CFK*DEC00\n         STC   R5,0(R6)           put into output             CFK*DEC00\n         LA    R6,1(R6)           and point at next byte      CFK*DEC00\n* put length onto record                                      CFK*DEC00\n         CVD   R0,DWORK           make length PD              CFK*DEC00\n         MVC   0(6,R6),=X'D32020202120'  EDit mask            CFK*DEC00\n         LA    R1,5(R6)           prime R1                    CFK*DEC00\n         EDMK  0(6,R6),DWORK+5    make mult printable         CFK*DEC00\n         MVC   1(6,R6),0(R1)      move down number            CFK*DEC00\nZ30X     DS    0H       output record                         CFK*DEC00\n         ST    R10,CURRADR        save adjusted address       CFK*JAN01\n         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03\n         DROP  R14                tell asm done with R14      CFK*DEC03\n         LR    R1,R14             get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINT                  CFK*APR01\n         B     Z10A               and handle next entry       CFK*APR01\n*\nZ80ERR   DS    0H                 error exit                  CFK*SEP00\n         OI    FLAGS1,FL1ERROR    set position lost flag      CFK*SEP00\n         L     R14,=A(PA)         get @ print area            CFK*APR01\n         USING OUTLINE,R14        tell assembler              CFK*SEP00\n         MVC   OUTLINE(L'MSG1),MSG1  copy error message       CFK*SEP00\n         DROP  R14                tell asm done with R14      CFK*SEP00\n         L     R15,=V(PRINTA)     get @ PRINT (only) routine  CFK*APR01\n         LR    R1,R14             get @ print area            CFK*DEC03\n         BASR  R14,R15            call PRINT                  CFK*APR00\n         B     Z90Z1              and exit                    CFK*SEP00\nZ90Z     DS    0H                 exit point\n         MVC   HEADBUF,TAILBUF    save tail (if present)\n         SH    R2,=AL2(L'MAINBUF) point @ tail\n         L     R1,SAV@CARD        reload @ input card         CFK*MAY01\n         USING SYMCARD,R1         tell assembler R1 is @ card CFK*MAY01\n         CLI   SYMDLEN1,L'MAINBUF full data card ?            CFK*MAY01\n         BE    Z90Z0              if so exit                  CFK*MAY01\n         LA    R2,MAINBUF         else reset data pointer     CFK*MAY01\nZ90Z0    DS    0H                                             CFK*MAY01\n         ST    R2,WORKADR         save pointer\nZ90Z1    DS    0H                 quick exit                  CFK*SEP00\n         LEAVE                    exit logic                  CFK*APR01\nMVC1     MVC   SAVANAME(1),SYMNAME  EXecuted instruction      CFK*APR01\n         DC    C'IMM='\n         LTORG\nSPACES   DC    CL8' '             constant\nMSG1     DC    C' ** Bad SYM record or position lost, remaining SYM carx\n               ds will be ignored **'\n* table of non-data type entries                              CFK*DEC00\nNDTTAB   DC    CL5'DS   '         space                       CFK*DEC00\nNDTTBELN EQU   *-NDTTAB           length of one entry         CFK*DEC00\n         DC    CL5'CSECT'         CSECT (should not be used)  CFK*DEC00\n         DC    CL5'DSECT'         dummy section               CFK*DEC00\n         DC    CL5'COM  '         common (?)                  CFK*DEC00\n         DC    CL5'DS   '         instruction                 CFK*DEC00\n         DC    CL5'CCW  '         CCW, CCW0, CCW1             CFK*DEC00\n         DC    CL5'EQU  '         EQUate (XF or Tachyon asm)  CFK*JLY01\n* table of data-types\nDTTAB    DC    C'C'  X'00' = character                         2     1\n         DC    C'X'  X'04' = hexadecimal or pure DBCS (G-type) 2     1\n         DC    C'B'  X'08' = binary                            2     1\n         DC    C'?'  X'0C' = **invalid** (should not occur)\n         DC    C'F'  X'10' = fixed point, full                 1  S  4\n         DC    C'H'  X'14' = fixed point, half                 1  S  2\n         DC    C'E'  X'18' = floating point, short             1  S  4\n         DC    C'D'  X'1C' = floating point, long              1  S  8\n         DC    C'A'  X'20' = A-type or Q-type data             1     4\n         DC    C'Y'  X'24' = Y-type data                       1     2\n         DC    C'S'  X'28' = S-type data                       1     2\n         DC    C'V'  X'2C' = V-type data                       1     4\n         DC    C'P'  X'30' = packed decimal                    2  S  1\n         DC    C'Z'  X'34' = zoned decimal                     2  S  1\n         DC    C'L'  X'38' = floating point, extended          1    16\n*\nCURRADR  DC    F'0'               current address in DSECT    CFK*JAN01\nASAVA    DC    A(SAVA)            @ SAVA csect\nWORKADR  DC    A(MAINBUF)         @ current input\nTRTAB    DC    C'0123456789ABCDEF' translate to hexadecimal   CFK*DEC00\nFLAGS1   DC    X'00'              flags                       CFK*SEP03\nFL1DSFND EQU   B'10000000'          Dsect found               CFK*SEP03\nFL1ERROR EQU   B'01000000'          bad SYM rec or position lost *SEP03\nHEADBUF  DS    CL(SYMMAXLN)       buffer for head portion\nMAINBUF  DS    CL56               buffer for data on card\nBUFEND   EQU   *                  end of main buffer\nMINEND   EQU   BUFEND-SYMMINLN\nTAILBUF  EQU   BUFEND-SYMMAXLN,SYMMAXLN  tail entry\nDWORK    DS    D                  work area for CVD           CFK*DEC00\nENDADR   DS    A                  @ last entry on card\nSAV@CARD DS    A                  save @ input card           CFK*MAY01\nSVFLG1   DS    X                  space to manipulate flags from card\nSAVEAREA DS    18F                                            CFK*SEP03\n* parms to call SAVA with                                     CFK*SEP03\nSAVAPRMS DS    0CL12                                          CFK*SEP03\nSAVATYPE DC    X'00'              input type                  CFK*SEP03\nSAVASECT DC    CL8' '             csect entry is in           CFK*DEC03\nSAVAADR  DC    XL3'000000'        input address               CFK*SEP03\nSAVANAME DC    CL8' '             label or spaces             CFK*SEP03\n* end of SAVA parms                                           CFK*SEP03\n         PRINT NOGEN\n         YREGS                    register equates\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST": {"ttr": 6404, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TEST     CSECT\n         BALR 15,0\n         USING *,15\nB        SUR   2,4\n         STH   2,A\n         STH   2,A(3)\n         SU    2,A\n         SU    2,A(3)\n         SSM   A\n         BXLE  2,3,B\n         SRL   2,1(2)\n         SRL   2,1\n         SRL   2,4\n         SRL   2,17\n         SLA   2,6(2)\n         SLA   2,6\n         SLA   2,7\n         SLA   2,17\n         SRDL  2,16(2)\n         SRDL  2,16\n         SRDL  2,17\n         SRDL  2,33\n         SRDL  2,48\n         SLDA  2,49\n         SLDA  2,55\n         SLDA  2,40(2)\n         MVN   A(4),A\n         EDMK  A(2),A\n         MVO   A(3),A(6)\n         DP    A(6),A(3)\n         TIO   0(2)\n         SIO   0(2)\n         STM   4,4,A\n         STM   12,14,A\n         LM    14,12,A\n         EX    2,A\n         SPM   5\n         BCTR  5,0\n         BCR   14,15\n         SSK   5,0\n         ISK   5,0\n         SVC   23\n         LPR   5,5\n         LNR   5,5\n         LTR   5,5\n         LCR   5,5\n         NR    5,5\n         CLR   5,5\n         OR    5,5\n         XR    5,5\n         LR    4,4\n         CR    2,2\n         AR    1,1\n         SR    2,2\n         MR    4,4\n         DR    4,4\n         ALR   2,2\n         SLR   3,3\n         LPDR  2,2\n         LNDR  2,2\n         LTDR  6,6\n         LCDR  4,4\n         HDR   2,2\n         LDR   4,4\n         CDR   2,4\n         ADR   2,2\n         SDR   2,2\n         MDR   2,4\n         DDR   2,4\n         AWR   2,2\n         SWR   2,2\n         LPER  2,2\n         LNER  2,2\n         LTER  2,2\n         LCER  2,2\n         HER   2,2\n         LER   2,2\n         CER   2,2\n         AER   2,2\n         SER   2,2\n         MER   2,2\n         DER   2,2\n         AUR   2,2\n         SUR   2,2\n         LA    5,6\n         STC   2,A\n         IC    2,A\n         BAL   14,A\n         BCT   2,A\n         BC    2,A\n         LH    2,A\n         CH    2,A\n         AH    2,A\n         SH    2,A\n         MH    2,A\n         CVD   2,A\n         CVB   2,A\n         ST    2,A\n         N     2,A\n         CL    2,A\n         O     2,A\n         X     2,A\n         L     2,A\n         C     2,A\n         A     2,A\n         S     2,A\n         M     2,A\n         D     2,A\n         AL    2,A\n         SL    2,A\n         STD   2,A\n         LD    2,A\n         CD    2,A\n         AD    2,A\n         SD    2,A\n         MD    2,A\n         DD    2,A\n         AW    2,A\n         SW    2,A\n         STE   2,A\n         LE    2,A\n         CE    2,A\n         AE    2,A\n         SE    2,A\n         ME    2,A\n         DE    2,A\n         AU    2,A\n         SU    2,A\n         STH   2,A(3)\n         LA    2,A(3)\n         STC   2,A(3)\n         IC    2,A(3)\n         BAL   2,A(3)\n         BCT   2,A(3)\n         BC    2,A(3)\n         LH    2,A(3)\n         CH    2,A(3)\n         AH    2,A(3)\n         SH    2,A(3)\n         MH    2,A(3)\n         EX    2,A(3)\n         CVD   2,A(3)\n         CVB   2,A(3)\n         ST    2,A(3)\n         N     2,A(3)\n         CL    2,A(3)\n         O     2,A(3)\n         X     2,A(3)\n         L     2,A(3)\n         C     2,A(3)\n         A     2,A(3)\n         S     2,A(3)\n         M     2,A(3)\n         D     2,A(3)\n         AL    2,A(3)\n         SL    2,A(3)\n         STD   2,A(3)\n         LD    2,A(3)\n         CD    2,A(3)\n         AD    2,A(3)\n         SD    2,A(3)\n         MD    2,A(3)\n         DD    2,A(3)\n         AW    2,A(3)\n         SW    2,A(3)\n         STE   2,A(3)\n         LE    2,A(3)\n         CE    2,A(3)\n         AE    2,A(3)\n         SE    2,A(3)\n         ME    2,A(3)\n         DE    2,A(3)\n         AU    2,A(3)\n         SU    2,A(3)\n         SSM   A\n         LPSW  A\n         BXH   2,3,A\n         BXLE  2,3,A\n         SRL   2,2\n         SLL   2,2\n         SRA   2,17\n         SLL   2,17\n         SRL   2,17\n         SLA   2,17\n         SRDL  2,17\n         SLDL  2,17\n         SRDA  2,17\n         SLDA  2,17\n         TM    A,X'00'\n         MVI   A,X'00'\n         NI    A,X'00'\n         CLI   A,X'00'\n         OI    A,X'00'\n         XI    A,X'00'\n         SIO   0(2)\n         TIO   0(2)\n         HIO   0(2)\n         TCH   0(2)\n         MVC   A(6),A\n         MVN   A(6),A\n         MVZ   A(6),A\n         NC    A(6),A\n         CLC   A(6),A\n         OC    A(6),A\n         XC    A(6),A\n         TR    A(6),A\n         TRT   A(6),A\n         ED    A(6),A\n         EDMK  A(6),A\n         MVO   A(6),A(2)\n         PACK  A(6),A(2)\n         UNPK  A(6),A(2)\n         ZAP   A(6),A(2)\n         CP    A(6),A(2)\n         AP    A(6),A(2)\n         SP    A(6),A(2)\n         MP    A(6),A(2)\n         DP    A(6),A(2)\n         MVO   A(2),A(6)\n         PACK  A(2),A(6)\n         UNPK  A(2),A(6)\n         ZAP   A(2),A(6)\n         CP    A(2),A(6)\n         AP    A(2),A(6)\n         SP    A(2),A(6)\n         MP    A(2),A(6)\n         DP    A(2),A(6)\n         B     A\nA        DC    D'0'\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTRI": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x01\"\\x1f\\x01\\x01\"\\x1f\\x13#\\x00\\x10\\x00\\x0f\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-08-09T00:00:00", "modifydate": "2001-08-09T13:23:53", "lines": 16, "newlines": 15, "modlines": 0, "user": "U765139"}, "text": "TEST     CSECT\n         BALR 15,0\n         USING *,15\n         TMH   R1,B'1010101010101010'\n         TML   R2,B'1010101010101010'\n         BRC   R15,A\n         BRAS  R14,A\n         BRCT  R4,A\n         LHI   R1,12345\n         AHI   R1,12345\n         MHI   R1,12345\n         CHI   R1,12345\n         BR    R14\nA        DC    D'0'\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEST2": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00#\\x00\\x99\\x10_\\x01\\x03 O\\x08%\\x00\\xfa\\x00\\xec\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1999-04-15T00:00:00", "modifydate": "2003-07-23T08:25:23", "lines": 250, "newlines": 236, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n* extended test case for DISAS                                        *\n***********************************************************************\nTEST     CSECT\n         BALR 12,0\n         USING *,12\n         CLI   B+1,C' '     Generate address table at end of listing\nB        SUR   2,4\n         STH   2,A\n         STH   2,A(3)\n         SU    2,A\n         SU    2,A(3)\n         SSM   A\n         BXLE  2,3,B\n         SRL   2,1(2)\n         SRL   2,1\n         SRL   2,4\n         SRL   2,17\n         SLA   2,6(2)\n         SLA   2,6\n         SLA   2,7\n         SLA   2,17\n         SRDL  2,16(2)\n         SRDL  2,16\n         SRDL  2,17\n         SRDL  2,33\n         SRDL  2,48\n         SLDA  2,49\n         SLDA  2,55\n         SLDA  2,40(2)\n         MVN   A(4),A\n         EDMK  A(2),A\n         MVO   A(3),A(6)\n         DP    A(6),A(3)\n*        TIO   0(2)\n*        SIO   0(2)\n         STM   4,4,A\n         STM   12,14,A\n         LM    14,12,A\n         EX    2,A\n         SPM   5\n         BCTR  5,0\n         BCR   14,15\n*        SSK   5,0\n*        ISK   5,0\n         SVC   0                  1 digit SVC number\n         SVC   23\n         SVC   199                3 digit SVC number\n         SVC   200                3 digit SVC number\n         SVC   201                3 digit SVC number\n         SVC   202                3 digit SVC number\n         SVC   203                3 digit SVC number\n         SVC   204                3 digit SVC number\n         SVC   205                3 digit SVC number\n         SVC   206                3 digit SVC number\n         SVC   207                3 digit SVC number\n         SVC   208                3 digit SVC number\n         SVC   255                3 digit SVC number\n         LPR   5,5\n         LNR   5,5\n         LTR   5,5\n         LCR   5,5\n         NR    5,5\n         CLR   5,5\n         OR    5,5\n         XR    5,5\n         LR    4,4\n         CR    2,2\n         AR    1,1\n         SR    2,2\n         MR    4,4\n         DR    4,4\n         ALR   2,2\n         SLR   3,3\n         LPDR  2,2\n         LNDR  2,2\n         LTDR  6,6\n         LCDR  4,4\n         HDR   2,2\n         LDR   4,4\n         CDR   2,4\n         ADR   2,2\n         SDR   2,2\n         MDR   2,4\n         DDR   2,4\n         AWR   2,2\n         SWR   2,2\n         LPER  2,2\n         LNER  2,2\n         LTER  2,2\n         LCER  2,2\n         HER   2,2\n         LER   2,2\n         CER   2,2\n         AER   2,2\n         SER   2,2\n         MER   2,2\n         DER   2,2\n         AUR   2,2\n         SUR   2,2\n         LA    5,6\n         STC   2,A\n         IC    2,A\n         BAL   14,A\n         BCT   2,A\n         BC    2,A\n         LH    2,A\n         CH    2,A\n         AH    2,A\n         SH    2,A\n         MH    2,A\n         CVD   2,A\n         CVB   2,A\n         ST    2,A\n         N     2,A\n         CL    2,A\n         O     2,A\n         X     2,A\n         L     2,A\n         C     2,A\n         A     2,A\n         S     2,A\n         M     2,A\n         D     2,A\n         AL    2,A\n         SL    2,A\n         STD   2,A\n         LD    2,A\n         CD    2,A\n         AD    2,A\n         SD    2,A\n         MD    2,A\n         DD    2,A\n         AW    2,A\n         SW    2,A\n         STE   2,A\n         LE    2,A\n         CE    2,A\n         AE    2,A\n         SE    2,A\n         ME    2,A\n         DE    2,A\n         AU    2,A\n         SU    2,A\n         STH   2,A(3)\n         LA    2,A(3)\n         STC   2,A(3)\n         IC    2,A(3)\n         BAL   2,A(3)\n         BCT   2,A(3)\n         BC    2,A(3)\n         LH    2,A(3)\n         CH    2,A(3)\n         AH    2,A(3)\n         SH    2,A(3)\n         MH    2,A(3)\n         EX    2,A(3)\n         CVD   2,A(3)\n         CVB   2,A(3)\n         ST    2,A(3)\n         N     2,A(3)\n         CL    2,A(3)\n         O     2,A(3)\n         X     2,A(3)\n         L     2,A(3)\n         C     2,A(3)\n         A     2,A(3)\n         S     2,A(3)\n         M     2,A(3)\n         D     2,A(3)\n         AL    2,A(3)\n         SL    2,A(3)\n         STD   2,A(3)\n         LD    2,A(3)\n         CD    2,A(3)\n         AD    2,A(3)\n         SD    2,A(3)\n         MD    2,A(3)\n         DD    2,A(3)\n         AW    2,A(3)\n         SW    2,A(3)\n         STE   2,A(3)\n         LE    2,A(3)\n         CE    2,A(3)\n         AE    2,A(3)\n         SE    2,A(3)\n         ME    2,A(3)\n         DE    2,A(3)\n         AU    2,A(3)\n         SU    2,A(3)\n         SSM   A\n*        LPSW  A\n         BXH   2,3,A\n         BXLE  2,3,A\n         SRL   2,2\n         SLL   2,2\n         SRA   2,17\n         SLL   2,17\n         SRL   2,17\n         SLA   2,17\n         SRDL  2,17\n         SLDL  2,17\n         SRDA  2,17\n         SLDA  2,17\n         TM    A,X'00'\n         MVI   A,X'00'\n         NI    A,X'00'\n         CLI   A,X'00'\n         OI    A,X'00'\n         XI    A,X'00'\n*        SIO   0(2)\n*        TIO   0(2)\n*        HIO   0(2)\n*        TCH   0(2)\n         MVC   A(6),A\n         MVN   A(6),A\n         MVZ   A(6),A\n         NC    A(6),A\n         CLC   A(6),A\n         OC    A(6),A\n         XC    A(6),A\n         TR    A(6),A\n         TRT   A(6),A\n         ED    A(6),A\n         EDMK  A(6),A\n         MVO   A(6),A(2)\n         PACK  A(6),A(2)\n         UNPK  A(6),A(2)\n         ZAP   A(6),A(2)\n         CP    A(6),A(2)\n         AP    A(6),A(2)\n         SP    A(6),A(2)\n         MP    A(6),A(2)\n         DP    A(6),A(2)\n         MVO   A(2),A(6)\n         PACK  A(2),A(6)\n         UNPK  A(2),A(6)\n         ZAP   A(2),A(6)\n         CP    A(2),A(6)\n         AP    A(2),A(6)\n         SP    A(2),A(6)\n*        MP    A(2),A(6)\n*        DP    A(2),A(6)\n         B     A\nA        DC    D'0'\n         DC    A(TEST)              @ this csect\n         DC    V(STRONG)\n         WXTRN WEAK\nW        DC    A(WEAK)\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST3": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x006\\x00\\x99\\x15\\x8f\\x00\\x99\\x15\\x8f\\x13\\x15@\\x08@\\x08\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-06-07T00:00:00", "modifydate": "1999-06-07T13:15:36", "lines": 16392, "newlines": 16392, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n* extended test case for DISAS                                        *\n***********************************************************************\nTEST3    CSECT\n         BALR  15,0\n         USING *,15\nA1       DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         DC    AL2((*-A1)/4),X'0A03'\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST4": {"ttr": 13316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00$\\x00\\x99\\x17_\\x01\\x03\\x14\\x8f\\x12@\\x01\\t\\x01\\x0b\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-06-24T00:00:00", "modifydate": "2003-05-28T12:40:24", "lines": 265, "newlines": 267, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n* extended test case for DISAS                                        *\n***********************************************************************\n         CSECT              Private code\n         BALR 15,0\n         USING *,15\n         CLI   B+1,C' '     Generate address table at end of listing\nB        SUR   2,4\n         STH   2,A\n         STH   2,A(3)\n         SU    2,A\n         SU    2,A(3)\n         SSM   A\n         BXLE  2,3,B\n         SRL   2,1(2)\n         SRL   2,1\n         SRL   2,4\n         SRL   2,17\n         SLA   2,6(2)\n         SLA   2,6\n         SLA   2,7\n         SLA   2,17\n         SRDL  2,16(2)\n         SRDL  2,16\n         SRDL  2,17\n         SRDL  2,33\n         SRDL  2,48\n         SLDA  2,49\n         SLDA  2,55\n         SLDA  2,40(2)\n         MVN   A(4),A\n         EDMK  A(2),A\n         MVO   A(3),A(6)\n         DP    A(6),A(3)\n*        TIO   0(2)\n*        SIO   0(2)\n         STM   4,4,A\n         STM   12,14,A\n         LM    14,12,A\n         EX    2,A\n         SPM   5\n         BCTR  5,0\n         BCR   14,15\n*        SSK   5,0\n*        ISK   5,0\n         SVC   1                  1 digit SVC number\n         SVC   23\n         SVC   106                3 digit SVC number\n         LPR   5,5\n         LNR   5,5\n         LTR   5,5\n         LCR   5,5\n         NR    5,5\n         CLR   5,5\n         OR    5,5\n         XR    5,5\n         LR    4,4\n         CR    2,2\n         AR    1,1\n         SR    2,2\n         MR    4,4\n         DR    4,4\n         ALR   2,2\n         SLR   3,3\n         LPDR  2,2\n         LNDR  2,2\n         LTDR  6,6\n         LCDR  4,4\n         HDR   2,2\n         LDR   4,4\n         CDR   2,4\n         ADR   2,2\n         SDR   2,2\n         MDR   2,4\n         DDR   2,4\n         AWR   2,2\n         SWR   2,2\n         LPER  2,2\n         LNER  2,2\n         LTER  2,2\n         LCER  2,2\n         HER   2,2\n         LER   2,2\n         CER   2,2\n         AER   2,2\n         SER   2,2\n         MER   2,2\n         DER   2,2\n         AUR   2,2\n         SUR   2,2\n         LA    5,6\n         STC   2,A\n         IC    2,A\n         BAL   14,A\n         BCT   2,A\n         BC    2,A\n         LH    2,A\n         CH    2,A\n         AH    2,A\n         SH    2,A\n         MH    2,A\n         CVD   2,A\n         CVB   2,A\n         ST    2,A\n         N     2,A\n         CL    2,A\n         O     2,A\n         X     2,A\n         L     2,A\n         C     2,A\n         A     2,A\n         S     2,A\n         M     2,A\n         D     2,A\n         AL    2,A\n         SL    2,A\n         STD   2,A\n         LD    2,A\n         CD    2,A\n         AD    2,A\n         SD    2,A\n         MD    2,A\n         DD    2,A\n         AW    2,A\n         SW    2,A\n         STE   2,A\n         LE    2,A\n         CE    2,A\n         AE    2,A\n         SE    2,A\n         ME    2,A\n         DE    2,A\n         AU    2,A\n         SU    2,A\n         STH   2,A(3)\n         LA    2,A(3)\n         STC   2,A(3)\n         IC    2,A(3)\n         BAL   2,A(3)\n         BCT   2,A(3)\n         BC    2,A(3)\n         LH    2,A(3)\n         CH    2,A(3)\n         AH    2,A(3)\n         SH    2,A(3)\n         MH    2,A(3)\n         EX    2,A(3)\n         CVD   2,A(3)\n         CVB   2,A(3)\n         ST    2,A(3)\n         N     2,A(3)\n         CL    2,A(3)\n         O     2,A(3)\n         X     2,A(3)\n         L     2,A(3)\n         C     2,A(3)\n         A     2,A(3)\n         S     2,A(3)\n         M     2,A(3)\n         D     2,A(3)\n         AL    2,A(3)\n         SL    2,A(3)\n         STD   2,A(3)\n         LD    2,A(3)\n         CD    2,A(3)\n         AD    2,A(3)\n         SD    2,A(3)\n         MD    2,A(3)\n         DD    2,A(3)\n         AW    2,A(3)\n         SW    2,A(3)\n         STE   2,A(3)\n         LE    2,A(3)\n         CE    2,A(3)\n         AE    2,A(3)\n         SE    2,A(3)\n         ME    2,A(3)\n         DE    2,A(3)\n         AU    2,A(3)\n         SU    2,A(3)\n         SSM   A\n         LPSW  A\n         BXH   2,3,A\n         BXLE  2,3,A\n         SRL   2,2\n         SLL   2,2\n         SRA   2,17\n         SLL   2,17\n         SRL   2,17\n         SLA   2,17\n         SRDL  2,17\n         SLDL  2,17\n         SRDA  2,17\n         SLDA  2,17\n         TM    A,X'00'\n         MVI   A,X'00'\n         NI    A,X'00'\n         CLI   A,X'00'\n         OI    A,X'00'\n         XI    A,X'00'\n*        SIO   0(2)\n*        TIO   0(2)\n*        HIO   0(2)\n*        TCH   0(2)\n         MVC   A(6),A\n         MVN   A(6),A\n         MVZ   A(6),A\n         NC    A(6),A\n         CLC   A(6),A\n         OC    A(6),A\n         XC    A(6),A\n         TR    A(6),A\n         TRT   A(6),A\n         ED    A(6),A\n         EDMK  A(6),A\n         MVO   A(6),A(2)\n         PACK  A(6),A(2)\n         UNPK  A(6),A(2)\n         ZAP   A(6),A(2)\n         CP    A(6),A(2)\n         AP    A(6),A(2)\n         SP    A(6),A(2)\n         MP    A(6),A(2)\n         DP    A(6),A(2)\n         MVO   A(2),A(6)\n         PACK  A(2),A(6)\n         UNPK  A(2),A(6)\n         ZAP   A(2),A(6)\n         CP    A(2),A(6)\n         AP    A(2),A(6)\n         SP    A(2),A(6)\n         MP    A(2),A(6)\n         DP    A(2),A(6)\n         B     A\nA        DC    D'0'\nTOTLEN   CXD\nMYWORK   DXD   CL312                Dummy eXternal Dsect\nMYPTR    DC    Q(MYWORK)            offset to my work area\n         DS    CL512                big DS\n         DC    C'1'                 implicit DS'es\n         DC    H'0'\n         DC    C'3'\n         DC    F'0'\n         DC    D'4'\n         DC    C'7'\n         DC    D'0'\nCOM1     COM                         common area\nFIELD1   DS    CL13\nFIELD2   DS    D\nCOM2     COM                         second common area\nCOM2A    DS    CL133\nRABBIT   CSECT                       another CSECT\n         DC    CL80' '               with no executable code\n         ORG   RABBIT+C'A'\n         DC    C'ABCD'               try to overlay TEXT\n         COM                         unnamed common area\nDAT1     DS    CL30\nDAT2     DS    D\nHARE     RSECT                       read only CSECT\n         SR    15,15\nSVCTAB   DC    256AL2((*-SVCTAB)/2+2560)  every possible SVC\n         BR    14\nMYWORK2  DXD   XL32                  work area\nMYPTR2   DC    Q(MYWORK2)            offset to my work area\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST4A": {"ttr": 13321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00H\\x01\\x03\\x14\\x9f\\x01\\x03!/\\x12&\\x01\\x04\\x01\\x03\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-05-29T00:00:00", "modifydate": "2003-07-31T12:26:48", "lines": 260, "newlines": 259, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n* extended test case for DISAS                                        *\n***********************************************************************\n         CSECT              Private code\n         BALR 15,0\n         USING *,15\n         CLI   B+1,C' '     Generate address table at end of listing\nB        SUR   2,4\n         STH   2,A\n         STH   2,A(3)\n         SU    2,A\n         SU    2,A(3)\n         SSM   A\n         BXLE  2,3,B\n         SRL   2,1(2)\n         SRL   2,1\n         SRL   2,4\n         SRL   2,17\n         SLA   2,6(2)\n         SLA   2,6\n         SLA   2,7\n         SLA   2,17\n         SRDL  2,16(2)\n         SRDL  2,16\n         SRDL  2,17\n         SRDL  2,33\n         SRDL  2,48\n         SLDA  2,49\n         SLDA  2,55\n         SLDA  2,40(2)\n         MVN   A(4),A\n         EDMK  A(2),A\n         MVO   A(3),A(6)\n         DP    A(6),A(3)\n*        TIO   0(2)\n*        SIO   0(2)\n         STM   4,4,A\n         STM   12,14,A\n         LM    14,12,A\n         EX    2,A\n         SPM   5\n         BCTR  5,0\n         BCR   14,15\n*        SSK   5,0\n*        ISK   5,0\n         SVC   1                  1 digit SVC number\n         SVC   23\n         SVC   106                3 digit SVC number\n         LPR   5,5\n         LNR   5,5\n         LTR   5,5\n         LCR   5,5\n         NR    5,5\n         CLR   5,5\n         OR    5,5\n         XR    5,5\n         LR    4,4\n         CR    2,2\n         AR    1,1\n         SR    2,2\n         MR    4,4\n         DR    4,4\n         ALR   2,2\n         SLR   3,3\n         LPDR  2,2\n         LNDR  2,2\n         LTDR  6,6\n         LCDR  4,4\n         HDR   2,2\n         LDR   4,4\n         CDR   2,4\n         ADR   2,2\n         SDR   2,2\n         MDR   2,4\n         DDR   2,4\n         AWR   2,2\n         SWR   2,2\n         LPER  2,2\n         LNER  2,2\n         LTER  2,2\n         LCER  2,2\n         HER   2,2\n         LER   2,2\n         CER   2,2\n         AER   2,2\n         SER   2,2\n         MER   2,2\n         DER   2,2\n         AUR   2,2\n         SUR   2,2\n         LA    5,6\n         STC   2,A\n         IC    2,A\n         BAL   14,A\n         BCT   2,A\n         BC    2,A\n         LH    2,A\n         CH    2,A\n         AH    2,A\n         SH    2,A\n         MH    2,A\n         CVD   2,A\n         CVB   2,A\n         ST    2,A\n         N     2,A\n         CL    2,A\n         O     2,A\n         X     2,A\n         L     2,A\n         C     2,A\n         A     2,A\n         S     2,A\n         M     2,A\n         D     2,A\n         AL    2,A\n         SL    2,A\n         STD   2,A\n         LD    2,A\n         CD    2,A\n         AD    2,A\n         SD    2,A\n         MD    2,A\n         DD    2,A\n         AW    2,A\n         SW    2,A\n         STE   2,A\n         LE    2,A\n         CE    2,A\n         AE    2,A\n         SE    2,A\n         ME    2,A\n         DE    2,A\n         AU    2,A\n         SU    2,A\n         STH   2,A(3)\n         LA    2,A(3)\n         STC   2,A(3)\n         IC    2,A(3)\n         BAL   2,A(3)\n         BCT   2,A(3)\n         BC    2,A(3)\n         LH    2,A(3)\n         CH    2,A(3)\n         AH    2,A(3)\n         SH    2,A(3)\n         MH    2,A(3)\n         EX    2,A(3)\n         CVD   2,A(3)\n         CVB   2,A(3)\n         ST    2,A(3)\n         N     2,A(3)\n         CL    2,A(3)\n         O     2,A(3)\n         X     2,A(3)\n         L     2,A(3)\n         C     2,A(3)\n         A     2,A(3)\n         S     2,A(3)\n         M     2,A(3)\n         D     2,A(3)\n         AL    2,A(3)\n         SL    2,A(3)\n         STD   2,A(3)\n         LD    2,A(3)\n         CD    2,A(3)\n         AD    2,A(3)\n         SD    2,A(3)\n         MD    2,A(3)\n         DD    2,A(3)\n         AW    2,A(3)\n         SW    2,A(3)\n         STE   2,A(3)\n         LE    2,A(3)\n         CE    2,A(3)\n         AE    2,A(3)\n         SE    2,A(3)\n         ME    2,A(3)\n         DE    2,A(3)\n         AU    2,A(3)\n         SU    2,A(3)\n         SSM   A\n         LPSW  A\n         BXH   2,3,A\n         BXLE  2,3,A\n         SRL   2,2\n         SLL   2,2\n         SRA   2,17\n         SLL   2,17\n         SRL   2,17\n         SLA   2,17\n         SRDL  2,17\n         SLDL  2,17\n         SRDA  2,17\n         SLDA  2,17\n         TM    A,X'00'\n         MVI   A,X'00'\n         NI    A,X'00'\n         CLI   A,X'00'\n         OI    A,X'00'\n         XI    A,X'00'\n*        SIO   0(2)\n*        TIO   0(2)\n*        HIO   0(2)\n*        TCH   0(2)\n         MVC   A(6),A\n         MVN   A(6),A\n         MVZ   A(6),A\n         NC    A(6),A\n         CLC   A(6),A\n         OC    A(6),A\n         XC    A(6),A\n         TR    A(6),A\n         TRT   A(6),A\n         ED    A(6),A\n         EDMK  A(6),A\n         MVO   A(6),A(2)\n         PACK  A(6),A(2)\n         UNPK  A(6),A(2)\n         ZAP   A(6),A(2)\n         CP    A(6),A(2)\n         AP    A(6),A(2)\n         SP    A(6),A(2)\n         MP    A(6),A(2)\n         DP    A(6),A(2)\n         MVO   A(2),A(6)\n         PACK  A(2),A(6)\n         UNPK  A(2),A(6)\n         ZAP   A(2),A(6)\n         CP    A(2),A(6)\n         AP    A(2),A(6)\n         SP    A(2),A(6)\n*        MP    A(2),A(6)\n*        DP    A(2),A(6)\n         B     A\nA        DC    D'0'\n*TOTLEN   CXD                        Total length of DXDs\nMYPTR    DC    Q(MYWORK)            offset to my work area\nMYPTR2   DC    Q(MYWORK2)            offset to my work area\n         DS    CL512                big DS\n         DC    C'1'                 implicit DS'es\n         DC    H'0'\n         DC    C'3'\n         DC    F'0'\n         DC    D'4'\n         DC    C'7'\n         DC    D'0'\nCOM1     COM                         common area\nFIELD1   DS    CL13\nFIELD2   DS    D\nCOM2     COM                         second common area\nCOM2A    DS    CL133\n*        COM                         unnamed common area\nDAT1     DS    CL30\nDAT2     DS    D\nMYWORK   DXD   CL312                Dummy eXternal Dsect\nMYWORK2  DSECT                       work area\n         DS    CL80\n         DS    F\n         DS    H\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST4B": {"ttr": 13569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x14\\x01\\x03\\x14\\x9f\\x01\\x03\\x15O\\x081\\x01\\x04\\x01\\x04\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-05-29T00:00:00", "modifydate": "2003-06-03T08:31:14", "lines": 260, "newlines": 260, "modlines": 0, "user": "U765139"}, "text": "***********************************************************************\n* extended test case for DISAS                                        *\n***********************************************************************\n         CSECT              Private code\n         BALR 15,0\n         USING *,15\n         CLI   B+1,C' '     Generate address table at end of listing\nB        SUR   2,4\n         STH   2,A\n         STH   2,A(3)\n         SU    2,A\n         SU    2,A(3)\n         SSM   A\n         BXLE  2,3,B\n         SRL   2,1(2)\n         SRL   2,1\n         SRL   2,4\n         SRL   2,17\n         SLA   2,6(2)\n         SLA   2,6\n         SLA   2,7\n         SLA   2,17\n         SRDL  2,16(2)\n         SRDL  2,16\n         SRDL  2,17\n         SRDL  2,33\n         SRDL  2,48\n         SLDA  2,49\n         SLDA  2,55\n         SLDA  2,40(2)\n         MVN   A(4),A\n         EDMK  A(2),A\n         MVO   A(3),A(6)\n         DP    A(6),A(3)\n*        TIO   0(2)\n*        SIO   0(2)\n         STM   4,4,A\n         STM   12,14,A\n         LM    14,12,A\n         EX    2,A\n         SPM   5\n         BCTR  5,0\n         BCR   14,15\n*        SSK   5,0\n*        ISK   5,0\n         SVC   1                  1 digit SVC number\n         SVC   23\n         SVC   106                3 digit SVC number\n         LPR   5,5\n         LNR   5,5\n         LTR   5,5\n         LCR   5,5\n         NR    5,5\n         CLR   5,5\n         OR    5,5\n         XR    5,5\n         LR    4,4\n         CR    2,2\n         AR    1,1\n         SR    2,2\n         MR    4,4\n         DR    4,4\n         ALR   2,2\n         SLR   3,3\n         LPDR  2,2\n         LNDR  2,2\n         LTDR  6,6\n         LCDR  4,4\n         HDR   2,2\n         LDR   4,4\n         CDR   2,4\n         ADR   2,2\n         SDR   2,2\n         MDR   2,4\n         DDR   2,4\n         AWR   2,2\n         SWR   2,2\n         LPER  2,2\n         LNER  2,2\n         LTER  2,2\n         LCER  2,2\n         HER   2,2\n         LER   2,2\n         CER   2,2\n         AER   2,2\n         SER   2,2\n         MER   2,2\n         DER   2,2\n         AUR   2,2\n         SUR   2,2\n         LA    5,6\n         STC   2,A\n         IC    2,A\n         BAL   14,A\n         BCT   2,A\n         BC    2,A\n         LH    2,A\n         CH    2,A\n         AH    2,A\n         SH    2,A\n         MH    2,A\n         CVD   2,A\n         CVB   2,A\n         ST    2,A\n         N     2,A\n         CL    2,A\n         O     2,A\n         X     2,A\n         L     2,A\n         C     2,A\n         A     2,A\n         S     2,A\n         M     2,A\n         D     2,A\n         AL    2,A\n         SL    2,A\n         STD   2,A\n         LD    2,A\n         CD    2,A\n         AD    2,A\n         SD    2,A\n         MD    2,A\n         DD    2,A\n         AW    2,A\n         SW    2,A\n         STE   2,A\n         LE    2,A\n         CE    2,A\n         AE    2,A\n         SE    2,A\n         ME    2,A\n         DE    2,A\n         AU    2,A\n         SU    2,A\n         STH   2,A(3)\n         LA    2,A(3)\n         STC   2,A(3)\n         IC    2,A(3)\n         BAL   2,A(3)\n         BCT   2,A(3)\n         BC    2,A(3)\n         LH    2,A(3)\n         CH    2,A(3)\n         AH    2,A(3)\n         SH    2,A(3)\n         MH    2,A(3)\n         EX    2,A(3)\n         CVD   2,A(3)\n         CVB   2,A(3)\n         ST    2,A(3)\n         N     2,A(3)\n         CL    2,A(3)\n         O     2,A(3)\n         X     2,A(3)\n         L     2,A(3)\n         C     2,A(3)\n         A     2,A(3)\n         S     2,A(3)\n         M     2,A(3)\n         D     2,A(3)\n         AL    2,A(3)\n         SL    2,A(3)\n         STD   2,A(3)\n         LD    2,A(3)\n         CD    2,A(3)\n         AD    2,A(3)\n         SD    2,A(3)\n         MD    2,A(3)\n         DD    2,A(3)\n         AW    2,A(3)\n         SW    2,A(3)\n         STE   2,A(3)\n         LE    2,A(3)\n         CE    2,A(3)\n         AE    2,A(3)\n         SE    2,A(3)\n         ME    2,A(3)\n         DE    2,A(3)\n         AU    2,A(3)\n         SU    2,A(3)\n         SSM   A\n         LPSW  A\n         BXH   2,3,A\n         BXLE  2,3,A\n         SRL   2,2\n         SLL   2,2\n         SRA   2,17\n         SLL   2,17\n         SRL   2,17\n         SLA   2,17\n         SRDL  2,17\n         SLDL  2,17\n         SRDA  2,17\n         SLDA  2,17\n         TM    A,X'00'\n         MVI   A,X'00'\n         NI    A,X'00'\n         CLI   A,X'00'\n         OI    A,X'00'\n         XI    A,X'00'\n*        SIO   0(2)\n*        TIO   0(2)\n*        HIO   0(2)\n*        TCH   0(2)\n         MVC   A(6),A\n         MVN   A(6),A\n         MVZ   A(6),A\n         NC    A(6),A\n         CLC   A(6),A\n         OC    A(6),A\n         XC    A(6),A\n         TR    A(6),A\n         TRT   A(6),A\n         ED    A(6),A\n         EDMK  A(6),A\n         MVO   A(6),A(2)\n         PACK  A(6),A(2)\n         UNPK  A(6),A(2)\n         ZAP   A(6),A(2)\n         CP    A(6),A(2)\n         AP    A(6),A(2)\n         SP    A(6),A(2)\n         MP    A(6),A(2)\n         DP    A(6),A(2)\n         MVO   A(2),A(6)\n         PACK  A(2),A(6)\n         UNPK  A(2),A(6)\n         ZAP   A(2),A(6)\n         CP    A(2),A(6)\n         AP    A(2),A(6)\n         SP    A(2),A(6)\n*        MP    A(2),A(6)\n*        DP    A(2),A(6)\n         B     A\nA        DC    V(VCON)\nTOTLEN   CXD                        Total length of DXDs\nMYPTR    DC    Q(MYWORK)            offset to my work area\nMYPTR2   DC    Q(MYWORK2)            offset to my work area\n         DS    CL512                big DS\n         DC    C'1'                 implicit DS'es\n         DC    H'0'\n         DC    C'3'\n         DC    F'0'\n         DC    D'4'\n         DC    C'7'\n         DC    D'0'\nCOM1     COM                         common area\nFIELD1   DS    CL13\nFIELD2   DS    D\nCOM2     COM                         second common area\nCOM2A    DS    CL133\n         COM                         unnamed common area\nDAT1     DS    CL30\nDAT2     DS    D\nMYWORK   DXD   CL312                Dummy eXternal Dsect\nMYWORK2  DSECT                       work area\n         DS    CL80\n         DS    F\n         DS    H\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST5": {"ttr": 13574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x02\\x01\\x01\\x01\\x9f\\x01\\x03\\x15?\\x12V\\x01q\\x01l\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2001-01-19T00:00:00", "modifydate": "2003-06-02T12:56:02", "lines": 369, "newlines": 364, "modlines": 0, "user": "U765139"}, "text": "TSTDAT   DSECT        test DSECT\n* every possible data-type                                    len  ilen\nTSTTYPC  DS    C     X'00' = character                         2     1\nTSTTYPX  DS    X     X'04' = hexadecimal or pure DBCS (G-type) 2     1\nTSTTYPB  DS    B     X'08' = binary                            2     1\nTSTTYPF  DS    F     X'10' = fixed point, full                 1  S  4\nTSTTYPH  DS    H     X'14' = fixed point, half                 1  S  2\nTSTTYPE  DS    E     X'18' = floating point, short             1  S  4\nTSTTYPD  DS    D     X'1C' = floating point, long              1  S  8\nTSTTYPA  DS    A     X'20' = A-type or Q-type data             1     4\nTSTTYPY  DS    Y     X'24' = Y-type data                       1     2\nTSTTYPS  DS    S     X'28' = S-type data                       1     2\nTSTTYPV  DS    V     X'2C' = V-type data                       1     4\nTSTTYPP  DS    P     X'30' = packed decimal                    1  S  1\nTSTTYPZ  DS    Z     X'34' = zoned decimal                     1  S  1\nTSTTYPL  DS    L     X'38' = floating point, extended          1    16\n*\n         ORG   TSTDAT               back to start of dsect\nTST2     DS    X                    ) implicit\nTST3     DS    L                    )   space\nTST4     DS    Z                    more implicit space\nTST5     CCW   0,0,0,0              and a CCW\nTSTBR    BR    14                   try an instruction\n         DS    C                    and another\nTSTLA    LA    0,0                  on an odd margin\n         ORG   ,                    reset origin\nTST6     DS    0X                   and see where we are\n*\nTEST5    START\n         EXTRN STRONG\n         WXTRN WEAK\n         EXTRN NOTREF               not used anywhere\n         ENTRY ENTR1\n         BALR 12,0\n         USING *,12\n         CLI   C+1,X'04'            gen equate table at end of listing\nC        AXR   F0,F4                36    RR  Add Normalized Extended\n         ADR   F0,F4                2A    RR  Add Normalized Long (c)\n         AD    F0,2(0,1)            6A    RX  Add Normalized Long (c)\n         AER   F0,F4                3A    RR  Add Normalized Short (c)\n         AE    F0,23(0,1)           7A    RX  Add Normalized Short (c)\n         AWR   F0,F4                2E    RR  Add Unnormalized Long (c)\n         AW    F0,123(0,1)          6E    RX  Add Unnormalized Long (c)\n         AUR   F0,F4                3E    RR  Add Unnormalized Short (c\n         AU    F0,2(0,15)           7E    RX  Add Unnormalized Short (c\n         CDR   F0,F4                29    RR  Compare Long (c)\n         CD    F0,23(0,15)          69    RX  Compare Long (c)\n         CER   F0,F4                39    RR  Compare Short (c)\n         CE    F0,123(0,15)         79    RX  Compare Short (c)\n         DXR   F0,F4                B22D  RRE Divide (extended)\n         DDR   F0,F4                2D    RR  Divide Long (c)\n         DD    F0,2(2,1)            6D    RX  Divide Long (c)\n         DER   F0,F4                3D    RR  Divide Short (c)\n         DE    F0,23(2,1)           7D    RX  Divide Short (c)\n         HDR   F0,F4                24    RR  Halve Long\n         HER   F0,F4                34    RR  Halve Short\n         LTDR  F0,F4                22    RR  Load and Test Long (c)\n         LTER  F0,F4                32    RR  Load and Test Short (c)\n         LCDR  F0,F4                23    RR  Load Complement Long (c)\n         LCER  F0,F4                33    RR  Load Complement Short (c)\n         LDR   F0,F4                28    RR  Load Long\n         LD    F0,123(2,1)          68    RX  Load Long\n         LNDR  F0,F4                21    RR  Load Negative Long (c)\n         LNER  F0,F4                31    RR  Load Negative Short (c)\n         LPDR  F0,F4                20    RR  Load Positive Long (c)\n         LPER  F0,F4                30    RR  Load Positive Short (c)\n         LRDR  F0,F4                25    RR  Load Rounded, Ext. to L.\n         LRER  F0,F4                35    RR  Load Rounded, Long to S.\n         LER   F0,F4                38    RR  Load Short\n         LE    F0,2(2,15)           78    RX  Load Short\n         MXR   F0,F4                26    RR  Multiply, Extended\n         MDR   F0,F4                2C    RR  Multiply Long\n         MD    F0,23(2,15)          6C    RX  Multiply Long\n         MXDR  F0,F4                27    RR  Multiply, Long to Ext.\n         MXD   F0,123(2,15)         67    RX  Multiply, Long to Ext.\n         MER   F0,F4                3C    RR  Multiply Short to Long\n         ME    F0,2(11,5)           7C    RX  Multiply Short to Long\n         SQDR  F4,F0           new  B244  RRE Square Root (long)\n         SQER  F0,F4           new  B245  RRE Square Root (short)\n         STD   F0,23(11,5)          60    RX  Store (long)\n         STE   F0,123(11,5)         70    RX  Store (short)\n         SXR   F0,F4                37    RR  Subtract Normalized (ext.\n         SDR   F0,F4                2B    RR  Subtract Normalized Long\n         SD    F0,2(11,15)          6B    RX  Subtract Normalized Long\n         SER   F0,F4                3B    RR  Subtract Normalized Short\n         SE    F0,23(11,15)         7B    RX  Subtract Normalized Short\n         SWR   F0,F4                2F    RR  Subtract Unnormlzd, Long\n         SW    F0,123(11,15)        6F    RX  Subtract Unnormlzd, Long\n         SUR   F0,F4                3F    RR  Subtract Unnormlzd, Short\n         SU    F0,1234(0,5)         7F    RX  Subtract Unnormlzd, Short\n         AR    R0,R4                1A    RR  Add (c)\n         A     R1,1234(2,5)         5A    RX  Add (c)\n         AP    2(3,1),2(2,5)        FA    SS2 Add Decimal (c)\n         AH    R1,1234(2,15)        4A    RX  Add Halfword (c)\n         ALR   R1,R12               1E    RR  Add Logical (c)\n         AL    R1,1234(12,5)        5E    RX  Add Logical (c)\n         NR    R11,R2               14    RR  AND (c)\n         N     R1,1234(12,15)       54    RX  AND (c)\n         NI    2(1),x'08'           94    SI  AND (immediate) (c)\n         NC    21(3,11),23(2)       D4    SS  AND (character) (c)\n         BALR  R1,R2                05    RR  Branch and Link\n         BALR  R3,R0                05    RR  Branch and Link\n         BAL   11,1234(12,15)       45    RX  Branch and Link\n         BASR  R1,R2                0D    RR  Branch and Save\n         BASR  R4,R0                0D    RR  Branch and Save\n         BAS   R1,23(2,15)          4D    RX  Branch and Save\n         BASSM R1,R2                0C    RR  Branch and Save and Set M\n         BASSM R5,R0                0C    RR  Branch and Save and Set M\n         BSM   R1,2                 0B    RR  Branch and Set Mode\n         BSM   R6,0                 0B    RR  Branch and Set Mode\n         BAKR  1,12                 B240  RRE Branch and Stack\n         BAKR  14,0                 B240  RRE Branch and Stack\n         BSG   11,2            new  B258  RRE Branch in Subspace Group\n         NOPR  1                              No OPeration\n         BCR   12,R2                07    RR  Branch on Condition\n         BR    14                             unconditional Branch\n         NOPR  0                              No OPeration\n         BCR   12,R0                07    RR  Branch on Condition\n         BR    0                              Serialise CPU\n         NOP   12(2,3)                        No OPeration\n         BC    12,23(2,15)          47    RX  Branch on Condition\n         B     2(1)                           unconditional Branch\n         BCTR  R1,R2                06    RR  Branch on Count\n         BCTR  R7,0                 06    RR  Decrement Register\n         BCT   R1,23(2,15)          46    RX  Branch on Count\n         BXH   R1,R3,2(5)           86    RS  Branch Index High\n         BXLE  R1,R3,23(5)          87    RS  Br. Index Low/Equal\n*        CLRCH 23(15)          old  9F01  S   Clear Channel (c,p)\n*        CLRIO 23(15)          old  9D01  S   Clear I/O (c,p)\n         CSCH  23(15)               B230  S   Clear Subchannel (c,p)\n         CR    R11,R12              19    RR  Compare (c)\n         C     R1,23(2,15)          59    RX  Compare (c)\n         CDS   R2,R4,132(5)         BB    RS  Compare Double & Swap (c)\n         CFC   23(15)               B21A  S   Compare and Form Codeword\n         CP    2(3,11),3(2,5)       F9    SS2 Compare Decimal (c)\n         CS    11,R3,2(5)           BA    RS  Compare & Swap (c)\n         CH    R1,23(2,15)          49    RX  Compare Halfword (c)\n         CKSM  11,12                B241  RRE Checksum (c)\n         CLR   R1,R2                15    RR  Compare Logical (c)\n         CL    R1,23(2,15)          55    RX  Compare Logical (c)\n         CLC   21(32,11),23(2)      D5    SS  Compare Logical (c)\n         CLI   21(1),x'00'          95    SI  Compare Logical (c)\n         CLM   11,3,23(15)          BD    RS  Compare Logical/Mask (c)\n         CLCL  R0,R2                0F    RR  Compare Logical Long (c)\n         CLST  R1,R2           new  B25D  RRE Compare Logical String (c\n         CUSE  R0,R2           new  B257  RRE Compare Unitl Substring E\n*        CONCS 23(15)          old  1500  S   Connect Channel Set (c,p)\n         CVB   R1,23(2,15)          4F    RX  Convert to Binary\n         CVD   R1,23(2,15)          4E    RX  Convert to Decimal\n         CPYA  R1,R2                B2D4  RRE Copy Access\n*        DISCS 23(15)          old  1501  S   Disconnect Channel Set (c\n         DR    R0,R2                1D    RR  Divide\n         D     R0,23(2,15)          5D    RX  Divide\n         DP    21(3,11),23(2,15)    FD    SS2 Divide Decimal\n         ED    21(3,11),23(2)       DE    SS  Edit (c)\n         EDMK  21(3,11),23(2)       DF    SS  Edit and Mark (c)\n         XR    R1,R2                17    RR  Exclusive OR (c)\n         X     R1,23(2,15)          57    RX  Exclusive OR (c)\n         XC    21(123,11),23(2)     D7    SS  Exclusive OR (character)\n         XI    121(1),X'F8'         97    SI  Exclusive OR (immediate)\n         EX    R1,23(2,15)          44    RX  Execute\n         EAR   R1,R2                B24F  RRE Extract Access\n         EPAR  R1                   B226  RRE Extract Primary ASN (s)\n         ESAR  R1                   B227  RRE Extract Secondary ASN (s)\n         EREG  R1,R2                B249  RRE Extract Stacked Registers\n         ESTA  R2,R3                B24A  RRE Extract Stacked State (c)\n*        HDV   23(15)          old  9E01  S   Halt Device (c,p)\n*        HIO   23(15)          old  9E00  S   Halt I/O (c,p)\n         HSCH  23(15)               B231  S   Halt Subchannel (c)\n         IAC   R1                   B224  RRE Insert Addr Space Ctl (c,\n         IC    R1,A                 43    RX  Insert Character\n         ICM   11,R3,123(5)         BF    RS  Insert Chars. Under Mask\n         IPM   R1                   B222  RRE Insert Program Mask\n         IPK                        B20B  S   Insert PSW Key (s)\n*        ISK   R1,R2           old  09    RR  Insert Storage Key (p)\n         ISKE  R1,R2                B229  RRE Insert Storage Key Extd.\n         IVSK  R1,R2                B223  RRE Insert Virt. Stor. Key (s\n         IPTE  R1,R2                B221  RRE Invalidate Ptbl. Entry (p\n         LR    R1,R2                18    RR  Load\n         L     R1,28(2,15)          58    RX  Load\n         LAM   1,13,2(5)            9A    RS  Load Access Multiple\n         LA    R1,30(2,15)          41    RX  Load Address\n         LAE   R1,31(2,15)          51    RX  Load Address Extended\n         LASP  21(1),23(5)          E500  SSE Load Addr. Space Parm. (c\n         LTR   R1,R2                12    RR  Load and Test (c)\n         LCR   R1,R2                13    RR  Load Complement (c)\n         LCTL  1,13,23(5)           B7    RS  Load Control (p)\n         LH    R1,23(2,15)          48    RX  Load Halfword\n         LM    1,13,123(5)          98    RS  Load Multiple\n         LNR   R1,R2                11    RR  Load Negative (c)\n         LPR   R1,R2                10    RR  Load Positive (c)\n         LPSW  A                    82    SI  Load PSW (n,p)\n         LPSW  8(1)                 82    SI  Load PSW (n,p)\n         LPSW  4095(15)             82    SI  Load PSW (n,p)\n         LRA   R1,23(2,15)          11    RX  Load Real Address (c,p)\n         LURA  R1,R2                B24B  RRE Load Using Real Address (\n         MSTA  R2                   B247  RRE Modify Stacked State\n         MSCH  23(15)               B232  S   Modify Subchannel (c,p)\n         MC    1(11),x'08'          AF    SI  Monitor Call\n         MVI   12(11),x'FF'         92    SI  Move (immediate)\n         MVC   21(256,11),23(15)    D2    SS  Move (character)\n         MVCIN 3210(255,11),1234(15)  E8  SS  Move Inverse\n         MVCL  R0,R2                0E    RR  Move Long (c)\n         MVN   21(3,11),23(15)      D2    SS  Move Numerics\n         MVPG  R1,R2           new  B254  RRE Move Page (facility 1) (c\n*        MVPG  R1,R2           new  B254  RRE Move Page (facility 2) (c\n         MVST  R1,R2           new  B255  RRE Move String\n         MVCP  21(3,11),23(15),R3   DA    SS3 Move to Primary (c,s)\n         MVCS  21(3,11),23(15),R13  DB    SS3 Move to Secondary (c,s)\n         MVCDK 21(11),23(15)        E50F  SSE Move with Destination Key\n         MVCSK 321(11),123(15)      E50E  SSE Move with Source Key\n         MVCK  21(3,11),23(15),R3   D9    SS3 Move with Key (c,s)\n         MVO   21(3,11),23(15)      F1    SS  Move with Offset\n         MVZ   21(3,11),23(15)      D3    SS  Move Zones\n         MR    R0,R2                1C    RR  Multiply\n         M     R0,23(2,15)          5C    RX  Multiply\n         MP    321(13,11),123(12,15) FC   SS2 Multiply Decimal\n         MH    R1,23(2,15)          4C    RX  Multiply Halfword\n         OR    R1,R2                16    RR  OR (c)\n         O     R1,23(2,15)          56    RX  OR (c)\n         OI    4095(11),x'08'       96    SI  OR (immediate) (c)\n         OC    21(3,11),23(15)      D6    SS  OR (character) (c)\n         PACK  1234(16,11),1234(16,15) F2 SS2 Pack\n         PC    23(15)               B218  S   Program Call (s)\n         PLO   1,4(1),3,8(5)        EE    SS  Perform Locked Operation\n         PLO   1,32(1),3,24(15)     EE    SS  Perform Locked Operation\n         PLO   1,132(1),3,124(15)   EE    SS  Perform Locked Operation\n         PLO   1,1232(1),3,1236(15) EE    SS  Perform Locked Operation\n         PLO   13,8(11),13,4(15)    EE    SS  Perform Locked Operation\n         PLO   13,32(11),13,24(15)  EE    SS  Perform Locked Operation\n         PLO   13,132(11),13,124(15) EE   SS  Perform Locked Operation\n         PLO   13,1232(11),13,1236(15) EE SS  Perform Locked Operation\n         PLO   1,A,3,1232(15)       EE    SS  Perform Locked Operation\n         PLO   1,1232(1),3,A        EE    SS  Perform Locked Operation\n         PLO   1,A,3,D              EE    SS  Perform Locked Operation\n         PR                         0101  E   Program Return\n         PT    R1,R2                B228  RRE Program Transfer (s)\n         PALB                       B248  RRE Purge ALB (p)\n         PTLB                       B20D  S   Purge TLB (p)\n*        RDD   21(11),x'08'    old  85    SI  Read Direct (p)\n         RCHP  23(15)               B23B  S   Reset Channel Path (c,p)\n*        RRB   23(15)          old  1513  S   Reset Reference Bit (c,p)\n         RRBE  R1,R2                B22A  RRE Reset Ref. Bit Ext. (c,p)\n*        RIO   23(15)          old  9C02  S   Resume I/O (c,p)\n         RSCH  23(15)               B238  S   Resume Subchannel (c,p)\n         SRST  R1,R2           new  B25E  RRE Search String (c)\n         SAR   R1,R2                B24E  RRE Set Access\n         SAL   23(15)               B237  S   Set Address Limit (p)\n         SACF  23(15)          new  B279  S   Set Addr. Space Cntl Fast\n         SAC   23(15)               B219  S   Set Addr. Space Control (\n         SCHM  23(15)          XA   B23C  S   Set Channel Monitor (p)\n         SCK   23(15)               B204  S   Set Clock (c,p)\n         SCKC  23(15)               B206  S   Set Clock Comparator (p)\n         SPT   23(15)               B208  S   Set CPU Timer (p)\n         SPX   23(15)               B210  S   Set Prefix (p)\n         SPM   R1                   04    RR  Set Program Mask (n)\n         SPM   R11                  04    RR  Set Program Mask (n)\n         SPKA  23(15)               B20A  S   Set PSW Key from Address\n         SSAR  R1                   B225  RRE Set Secondary ASN (s)\n*        SSK   R1,R2           old  08    RR  Set Storage Key (p)\n         SSKE  R1,R2                B22B  RRE Set Storage Key Extended\n         SSM   23(15)               80    S   Set System Mask (p)\n         SRP   1(3,1),3(2),0        F0    SS  Shift and Round Decimal\n         SRP   21(3,1),3(2),1       F0    SS  Shift and Round Decimal\n         SRP   321(3,1),3(2),2      F0    SS  Shift and Round Decimal\n         SRP   1234(3,1),3(2),3     F0    SS  Shift and Round Decimal\n         SRP   2(3,11),23(2),4      F0    SS  Shift and Round Decimal\n         SRP   12(3,11),23(2),5     F0    SS  Shift and Round Decimal\n         SRP   123(3,11),23(2),6    F0    SS  Shift and Round Decimal\n         SRP   1234(3,11),23(2),7   F0    SS  Shift and Round Decimal\n         SRP   21(3,11),2(13),8     F0    SS  Shift and Round Decimal\n         SRP   21(3,11),23(13),9    F0    SS  Shift and Round Decimal\n         SRP   21(3,11),1234(13),9  F0    SS  Shift and Round Decimal\n         SRP   321(3,11),1234(13),9  F0   SS  Shift and Round Decimal\n         SRP   1234(13,11),1234(13),9  F0 SS  Shift and Round Decimal\n         SLDA  R0,2(0)              8F    RS1 Shift Left Double (c)\n         SLDL  R0,23(0)             8D    RS1 Shift Left Double Logical\n         SLA   R1,123(0)            8B    RS1 Shift Left Single (c)\n         SLA   R1,1234(0)           8B    RS1 Shift Left Single (c)\n         SLL   R1,2(5)              89    RS1 Shift Left Single Logical\n         SRDA  R0,23(5)             8E    RS1 Shift Right Double (c)\n         SRDL  R0,123(5)            8C    RS1 Shift Right Double Logica\n         SRDL  R0,1234(5)           8C    RS1 Shift Right Double Logica\n         SRA   R1,2(15)             8A    RS1 Shift Right Single (c)\n         SRL   R1,23(15)            88    RS1 Shift Right Single Logica\n         SRL   R1,123(15)           88    RS1 Shift Right Single Logica\n         SRL   R1,1234(15)          88    RS1 Shift Right Single Logica\n         SLDA  10,2(0)              8F    RS1 Shift Left Double (c)\n         SLDL  10,23(0)             8D    RS1 Shift Left Double Logical\n         SLA   11,123(0)            8B    RS1 Shift Left Single (c)\n         SLA   11,1234(0)           8B    RS1 Shift Left Single (c)\n         SLL   11,2(5)              89    RS1 Shift Left Single Logical\n         SRDA  10,23(5)             8E    RS1 Shift Right Double (c)\n         SRDL  10,123(5)            8C    RS1 Shift Right Double Logica\n         SRDL  10,1234(5)           8C    RS1 Shift Right Double Logica\n         SRA   11,2(15)             8A    RS1 Shift Right Single (c)\n         SRL   11,23(15)            88    RS1 Shift Right Single Logica\n         SRL   11,123(15)           88    RS1 Shift Right Single Logica\n         SRL   11,1234(15)          88    RS1 Shift Right Single Logica\n         SIGP  R1,R3,1234(5)        AE    RS  Signal Processor (c,p)\n*        SIO   23(15)          old  9C00  S   Start I/O (c,p)\n*        SIOF  23(15)          old  9C01  S   Start I/O Fast Release (c\n         SSCH  23(15)               B233  S   Start Subchannel (c,p)\n         ST    R1,23(2,15)          50    RX  Store\n*        STIDC 23(15)          old  B203  S   Store Channel ID (c,p)\n         STAM  R1,R3,1234(15)       9B    RS  Store Access Multiple\n         STCPS 23(15)               B23A  S   Store Channel Path Status\n         STCRW 23(15)               B239  S   Store ChanelL Report Word\n         STC   R1,23(2,15)          42    RX  Store Character\n         STCM  R1,B'0101',123(15)   BE    RS  Store Characters under Ma\n         STCK  23(15)               B205  S   Store Clock (c)\n         STCKC 23(15)               B207  S   Store Clock Comparator (p\n         STCTL R1,13,123(15)        B6    RS  Store Control (p)\n         STAP  23(15)               B212  S   Store CPU Address (p)\n         STIDP 23(15)               B202  S   Store CPU ID (p)\n         STPT  23(15)               B209  S   Store CPU Timer (p)\n         STH   R1,23(2,15)          40    RX  Store Halfword\n         STM   11,13,123(15)        90    RS  Store Multiple\n         STPX  23(15)               B211  S   Store Prefix (p)\n         STSCH 23(15)               B234  S   Store Subchannel (c,p)\n         STNSM 121(11),x'F8'        AC    SI  Store Then AND Sys. Mask\n         STOSM 4095(1),x'00'        AD    SI  Store Then OR Sys. Mask (\n         STURA R1,R2                B246  RRE Store Using Real Address\n         SR    R1,R2                1B    RR  Subtract Register (c)\n         S     R1,23(2,15)          5B    RX  Subtract (c)\n         SP    1234(16,11),1234(16,15) FB SS2 Subtract Decimal (c)\n         SH    R1,23(2,15)          4B    RX  Subtract Halfword (c)\n         SLR   R1,R2                1F    RR  Subtract Logical (c)\n         SL    R1,0(2,15)           5F    RX  Subtract Logical (c)\n         SVC   120                  0A    RR  Supervisor Call\n         TAR   R1,R2                B24C  RRE Test Access (c)\n         TS    23(15)               93    S   Test and Set (c)\n         TB    R1,R2                B22C  RRE Test Block (c,p)\n*        TIO   23(15)          old  9D00  S   Test I/O (c,p)\n         TPI   23(15)               B236  S   Test Pndng Interruption (\n         TPROT 4095(11),1234(15)    E501  SSE Test Protection (c,p)\n         TSCH  23(15)               B235  S   Test Subchannel (c,p)\n         TM    1234(11),x'08'       91    SI  Test under Mask (c)\n         TRACE R11,R13,1234(15)     99    RS  Trace (p)\n         TR    21(3,11),23(15)      DC    SS  Translate (c)\n         TRT   CHAR,23(15)          DD    SS  Translate and Test (c)\n         UNPK  21(3,11),23(2,15)    F3    SS2 Unpack\n         UPT                        0102  E   Update Tree (c)\n*        WRD   21(11),x'08'    old  84    SI  Write Direct (p)\n         ZAP   21(15,11),23(12,15)  F8    SS2 Zero and Add Decimal (c)\nSVCTAB   DC    256AL2((*-SVCTAB)/2+2560)  every possible SVC\n         B     A                    finish with a branch\nENTR1    DS    CL80                 inline dummy storage\n         DS    0F                   align on fullword\nCHAR     DC    C'CHAR'              text data\nLC       DC    C'char'              lower case data\n         DC    C'1'                 force 1 slack byte\n         DC    H'1'\n         DC    C'3'                 force 3 slack bytes\n         DC    A(STRONG)            gen EXTRN\n         DC    A(ENTR1)             @ entry\n         DC    A(WEAK)              gen WXTRN\n         DC    V(STRONG)            V @ EXTRN\n         DC    V(WEAK)              W @ WXTRN\n         DC    V(VCON)              gen VCON\n*        DC    A(TEST5)             @ csect\nA        DC    D'0'\n         DC    C'7'                 force 7 slack bytes\nB        DC    D'1'\n         DC    A(*)\n         DC    C'abcde'             5 byte constant, then DS\nD        DS    CL500                trailing dummy storage\n         REGEQU                     register equates\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST5B": {"ttr": 13827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x000\\x01\\x03\\x16\\x7f\\x01\\x03\\x17\\x1f\\x12P\\x00\\x8b\\x00\\x88\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-06-16T00:00:00", "modifydate": "2003-06-20T12:50:30", "lines": 139, "newlines": 136, "modlines": 0, "user": "U765139"}, "text": "TSTDAT   DSECT        test DSECT\n* every possible data-type                                    len  ilen\nTSTTYPC  DS    C     X'00' = character                         2     1\nTSTTYPX  DS    X     X'04' = hexadecimal or pure DBCS (G-type) 2     1\nTSTTYPB  DS    B     X'08' = binary                            2     1\nTSTTYPF  DS    F     X'10' = fixed point, full                 1  S  4\nTSTTYPH  DS    H     X'14' = fixed point, half                 1  S  2\nTSTTYPE  DS    E     X'18' = floating point, short             1  S  4\nTSTTYPD  DS    D     X'1C' = floating point, long              1  S  8\nTSTTYPA  DS    A     X'20' = A-type or Q-type data             1     4\nTSTTYPY  DS    Y     X'24' = Y-type data                       1     2\nTSTTYPS  DS    S     X'28' = S-type data                       1     2\nTSTTYPV  DS    V     X'2C' = V-type data                       1     4\nTSTTYPP  DS    P     X'30' = packed decimal                    1  S  1\nTSTTYPZ  DS    Z     X'34' = zoned decimal                     1  S  1\nTSTTYPL  DS    L     X'38' = floating point, extended          1    16\n*\n         ORG   TSTDAT               back to start of dsect\nTST2     DS    X                    ) implicit\nTST3     DS    L                    )   space\nTST4     DS    Z                    more implicit space\nTST5     CCW   0,0,0,0              and a CCW\nTSTBR    BR    14                   try an instruction\n         DS    C                    and another\nTSTLA    LA    0,0                  on an odd margin\n         ORG   ,                    reset origin\nTST6     DS    0X                   and see where we are\n*\nTEST5    START\n         EXTRN STRONG1\n         EXTRN STRONG2\n         EXTRN STRONG3\n         WXTRN WEAK1\n         WXTRN WEAK2\n         WXTRN WEAK3\n         EXTRN NOTREF               not used anywhere\n         WXTRN NOTREFW              not used anywhere\n         ENTRY ENTR1\n         ENTRY ENTR2\n         SR    15,15\n         BR    14\nENTR1    DS    CL80                 inline dummy storage\nENTR2    DS    CL80                 inline dummy storage\n         DS    0F                   align on fullword\nCHAR     DC    C'CHAR'              text data\nLC       DC    C'char'              lower case data\n         DC    C'1'                 force 1 slack byte\n         DC    H'1'\n         DC    C'3'                 force 3 slack bytes\n         DC    A(STRONG1)           gen EXTRN\n         DC    A(STRONG2)           gen EXTRN\n         DC    A(ENTR1)             @ entry\n         DC    A(WEAK1)             gen WXTRN\n         DC    A(WEAK2)             gen WXTRN\n         DC    V(STRONG2)           V @ EXTRN\n         DC    V(STRONG3)           V @ EXTRN\n         DC    V(WEAK2)             W @ WXTRN\n         DC    V(WEAK3)             W @ WXTRN\n         DC    V(VCON)              gen VCON\n         DC    A(TEST5)             @ csect\n* 3 byte adcons\n         DC    AL3(STRONG1)           gen EXTRN\n         DC    AL3(STRONG2)           gen EXTRN\n         DC    AL3(ENTR1)             @ entry\n         DC    AL3(WEAK1)             gen WXTRN\n         DC    AL3(WEAK2)             gen WXTRN\n         DC    VL3(STRONG2)           V @ EXTRN\n         DC    VL3(STRONG3)           V @ EXTRN\n         DC    VL3(WEAK2)             W @ WXTRN\n         DC    VL3(WEAK3)             W @ WXTRN\n         DC    VL3(VCON)              gen VCON\n         DC    AL3(TEST5)             @ csect\n         DC    AL3(D)\n         DC    AL3(COM1)\n         DC    AL3(COM2)\n* constants + a small offset\n         DC    A(STRONG1+24)        gen EXTRN\n         DC    A(STRONG2+24)        gen EXTRN\n         DC    A(ENTR1+24)          @ entry\n         DC    A(WEAK1+24)          gen WXTRN\n         DC    A(WEAK2+24)          gen WXTRN\n*        DC    V(STRONG2+24)        V @ EXTRN\n*        DC    V(STRONG3+24)        V @ EXTRN\n*        DC    V(WEAK2+24)          W @ WXTRN\n*        DC    V(WEAK3+24)          W @ WXTRN\n*        DC    V(VCON+24)           gen VCON\n         DC    A(TEST5+24)          @ csect\n         DC    A(COM1+24)\n         DC    A(COM2+24)\n* constants + a large offset\n         DC    A(STRONG1+x'80000000')        gen EXTRN\n         DC    A(STRONG2+x'80000000')        gen EXTRN\n         DC    A(ENTR1+x'80000000')          @ entry\n         DC    A(WEAK1+x'80000000')          gen WXTRN\n         DC    A(WEAK2+x'80000000')          gen WXTRN\n*        DC    V(STRONG2+x'80000000')        V @ EXTRN\n*        DC    V(STRONG3+x'80000000')        V @ EXTRN\n*        DC    V(WEAK2+x'80000000')          W @ WXTRN\n*        DC    V(WEAK3+x'80000000')          W @ WXTRN\n*        DC    V(VCON+x'80000000')           gen VCON\n         DC    A(TEST5+x'80000000')          @ csect\n         DC    AL3(TEST5+x'800000')          @ csect\n*        DC    Q(MYWORK+x'80000000')          offset to my work area\n*        DC    Q(MYWORK2+x'80000000')         offset to 2nd work area\n         DC    A(COM1+x'80000000')\n         DC    AL3(COM1+x'800000')\n         DC    A(COM2+x'80000000')\n         DC    AL3(COM2+x'800000')\nA        DC    D'0'\n         DC    C'7'                 force 7 slack bytes\nB        DC    D'1'\n         DC    A(*)\n         DC    C'abcde'             5 byte constant, then DS\nD        DS    CL500                trailing dummy storage\n         DC    A(COM1)\n         DC    A(COM2)\nTOTLEN   CXD                        Total length of DXDs\nMYPTR    DC    Q(MYWORK)            offset to my work area\nMYPTR2   DC    Q(MYWORK2)            offset to 2nd work area\n*YPTRP   DC    Q(MYWORK+24)          offset to my work area\n*YPTR2P  DC    Q(MYWORK2+24)         offset to 2nd work area\n         DC    Q(MYWORK3)\nCOM1     COM                         common area\nFIELD1   DS    CL13\nFIELD2   DS    D\nCOM2     COM                         second common area\nCOM2A    DS    CL133\n         COM                         unnamed common area\nDAT1     DS    CL30\nDAT2     DS    D\nMYWORK   DXD   CL312                Dummy eXternal Dsect\nMYWORK2  DSECT                       work area\n         DS    CL80\n         DS    F\n         DS    H\nMYWORK3  DSECT\n         DS    XL131                odd length\n         REGEQU                     register equates\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST6": {"ttr": 13830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\"\\x00\\x99\\x17/\\x01\\x00(?\\x13Y\\x01\\x05\\x019\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "1999-06-21T00:00:00", "modifydate": "2000-10-09T13:59:22", "lines": 261, "newlines": 313, "modlines": 0, "user": "U765139"}, "text": "         CSECT                      private code\n         BALR 12,0\n         USING *,12\n         CLI   C+1,C' '             generate equate\nC        AXR   F0,F4                36    RR  Add Normalized Extended (\n         ADR   F0,F4                2A    RR  Add Normalized Long (c)\n         AD    F0,23(2,15)          6A    RX  Add Normalized Long (c)\n         AER   F0,F4                3A    RR  Add Normalized Short (c)\n         AE    F0,23(2,15)          7A    RX  Add Normalized Short (c)\n         AWR   F0,F4                2E    RR  Add Unnormalized Long (c)\n         AW    F0,23(2,15)          6E    RX  Add Unnormalized Long (c)\n         AUR   F0,F4                3E    RR  Add Unnormalized Short (c\n         AU    F0,23(2,15)          7E    RX  Add Unnormalized Short (c\n         CDR   F0,F4                29    RR  Compare Long (c)\n         CD    F0,23(2,15)          69    RX  Compare Long (c)\n         CER   F0,F4                39    RR  Compare Short (c)\n         CE    F0,23(2,15)          79    RX  Compare Short (c)\n         DXR   F0,F4                152D  RRE Divide (extended)\n         DDR   F0,F4                2D    RR  Divide Long (c)\n         DD    F0,23(2,15)          6D    RX  Divide Long (c)\n         DER   F0,F4                3D    RR  Divide Short (c)\n         DE    F0,23(2,15)          7D    RX  Divide Short (c)\n         HDR   F0,F4                24    RR  Halve Long\n         HER   F0,F4                34    RR  Halve Short\n         LTDR  F0,F4                22    RR  Load and Test Long (c)\n         LTER  F0,F4                32    RR  Load and Test Short (c)\n         LCDR  F0,F4                23    RR  Load Complement Long (c)\n         LCER  F0,F4                33    RR  Load Complement Short (c)\n         LDR   F0,F4                28    RR  Load Long\n         LD    F0,23(2,15)          68    RX  Load Long\n         LNDR  F0,F4                21    RR  Load Negative Long (c)\n         LNER  F0,F4                31    RR  Load Negative Short (c)\n         LPDR  F0,F4                20    RR  Load Positive Long (c)\n         LPER  F0,F4                30    RR  Load Positive Short (c)\n         LRDR  F0,F4                25    RR  Load Rounded, Ext. to Lon\n         LRER  F0,F4                35    RR  Load Rounded, Long to Sho\n         LER   F0,F4                38    RR  Load Short\n         LE    F0,23(2,15)          88    RX  Load Short\n         MXR   F0,F4                26    RR  Multiply, Extended\n         MDR   F0,F4                2C    RR  Multiply Long\n         MD    F0,23(2,15)          6C    RX  Multiply Long\n         MXDR  F0,F4                27    RR  Multiply, Long to Extende\n         MXD   F0,23(2,15)          67    RX  Multiply, Long to Extende\n         MER   F0,F4                3C    RR  Multiply Short to Long\n         ME    F0,23(2,15)          7C    RX  Multiply Short to Long\n*        SQDR  F0,F4                1544  RRE Square Root (long)\n*        SQER  F0,F4                1545  RRE Square Root (short)\n         STD   F0,23(2,15)          60    RX  Store (long)\n         STE   F0,23(2,15)          70    RX  Store (short)\n         SXR   F0,F4                37    RR  Subtract Normalized (ext.\n         SDR   F0,F4                2B    RR  Subtract Normalized Long\n         SD    F0,23(2,15)          6B    RX  Subtract Normalized Long\n         SER   F0,F4                3B    RR  Subtract Normalized Short\n         SE    F0,23(2,15)          7B    RX  Subtract Normalized Short\n         SWR   F0,F4                2F    RR  Subtract Unnormlzd, Long\n         SW    F0,23(2,15)          6F    RX  Subtract Unnormlzd, Long\n         SUR   F0,F4                3F    RR  Subtract Unnormlzd, Short\n         SU    F0,23(2,15)          7F    RX  Subtract Unnormlzd, Short\n         AR    F0,F4                1A    RR  Add (c)\n         A     R1,23(2,15)          5A    RX  Add (c)\n         AP    21(3,11),23(2,15)    FA    SS  Add Decimal (c)\n         AH    R1,23(2,15)          4A    RX  Add Halfword (c)\n         ALR   R1,R2                1E    RR  Add Logical (c)\n         AL    R1,23(2,15)          5E    RX  Add Logical (c)\n         NR    R1,R2                14    RR  AND (c)\n         N     R1,23(2,15)          54    RX  AND (c)\n         NI    21(11),x'08'         94    SI  AND (immediate) (c)\n         NC    21(3,11),23(2)       D4    SS  AND (character) (c)\n         BALR  R1,R2                05    RR  Branch and Link\n         BAL   R1,23(2,15)          45    RX  Branch and Link\n         BASR  R1,R2                0D    RR  Branch and Save\n         BAS   R1,23(2,15)          4D    RX  Branch and Save\n         BASSM R1,R2                0C    RR  Branch and Save and Set M\n         BSM   R1,R2                0B    RR  Branch and Set Mode\n         BAKR  R1,R2                1540  RRE Branch and Stack\n*        BSG   R1,R2                1558  RRE Branch in Subspace Group\n         BCR   12,R2                07    RR  Branch on Condition\n         BC    12,23(2,15)          47    RX  Branch on Condition\n         BCTR  R1,R2                06    RR  Branch on Count\n         BCT   R1,23(2,15)          46    RX  Branch on Count\n         BXH   R1,R3,23(15)         86    RS  Branch Index High\n         BXLE  R1,R3,23(15)         87    RS  Br. Index Low/Equal\n*        CLRCH 23(15)               9F01  S   Clear Channel (c,p)\n*        CLRIO 23(15)               9D01  S   Clear I/O (c,p)\n         CSCH  23(15)               1530  S   Clear Subchannel (c,p)\n         CR    R1,R2                19    RR  Compare (c)\n         C     R1,23(2,15)          59    RX  Compare (c)\n         CFC   23(15)               151A  S   Compare and Form Codeword\n         CS    R1,R3,23(15)         BA    RS  Compare & Swap (c)\n         CP    21(3,11),23(2,15)    F9    SS  Compare Decimal (c)\n         CS    R1,R3,23(15)         BA    RS  Compare Double & Swap (c)\n         CH    R1,23(2,15)          49    RX  Compare Halfword (c)\n         CLR   R1,R2                15    RR  Compare Logical (c)\n         CL    R1,23(2,15)          55    RX  Compare Logical (c)\n         CLC   21(3,11),23(2)       D5    SS  Compare Logical (c)\n         CLI   21(11),x'08'         95    SI  Compare Logical (c)\n         CLM   R1,R3,23(15)         BD    RS  Compare Logical/Mask (c)\n         CLCL  R0,R2                0F    RR  Compare Logical Long (c)\n*        CLST  R1,R2                155D  RRE Compare Logical String (c\n*        CUSE  R0,R2                1557  RRE Compare Unitl Substring E\n*        CONCS 23(15)               1500  S   Connect Channel Set (c,p)\n         CVB   R1,23(2,15)          4F    RX  Convert to Binary\n         CVD   R1,23(2,15)          4E    RX  Convert to Decimal\n         CPYA  R1,R2                15D4  RRE Copy Access\n*        DISCS 23(15)               1501  S   Disconnect Channel Set (c\n         DR    R0,R2                1D    RR  Divide\n         D     R0,23(2,15)          5D    RX  Divide\n         DP    21(3,11),23(2,15)    FD    SS  Divide Decimal\n         ED    21(3,11),23(2)       DE    SS  Edit (c)\n         EDMK  21(3,11),23(2)       DF    SS  Edit and Mark (c)\n         XR    R1,R2                17    RR  Exclusive OR (c)\n         X     R1,23(2,15)          57    RX  Exclusive OR (c)\n         XC    21(3,11),23(2)       D7    SS  Exclusive OR (character)\n         XI    21(11),x'08'         97    SI  Exclusive OR (immediate)\n         EX    R1,23(2,15)          44    RX  Execute\n         EAR   R1,R2                154F  RRE Extract Access\n         EPAR  R1                   1526  RRE Extract Primary ASN (s)\n         ESAR  R1                   1527  RRE Extract Secondary ASN (s)\n         EREG  R1,R2                1549  RRE Extract Stacked Registers\n         ESTA  R1,R2                154A  RRE Extract Stacked State (c)\n*        HDV   23(15)               9E01  S   Halt Device (c,p)\n*        HIO   23(15)               9E00  S   Halt I/O (c,p)\n         HSCH  23(15)               1531  S   Halt Subchannel (c)\n         IAC   R1                   1524  RRE Insert Addr Space Ctl (c,\n         IC    R1,23(2,15)          43    RX  Insert Character\n         ICM   R1,R3,23(15)         BF    RS  Insert Chars. Under Mask\n         IPM   R1                   1522  RRE Insert Program Mask\n         IPK                        150B  S   Insert PSW Key (s)\n*        ISK   R1,R2                09    RR  Insert Storage Key (p)\n         ISKE  R1,R2                1529  RRE Insert Storage Key Extd.\n         IVSK  R1,R2                1523  RRE Insert Virt. Stor. Key (s\n         IPTE  R1,R2                1521  RRE Invalidate Ptbl. Entry (p\n         LR    R1,R2                18    RR  Load\n         L     R1,23(2,15)          58    RX  Load\n         LAM   R1,R3,23(15)         9A    RS  Load Access Multiple\n         LA    R1,23(2,15)          41    RX  Load Address\n         LAE   R1,23(2,15)          51    RX  Load Address Extended\n         LASP  21(11),23(15)        E500  SSE Load Addr. Space Parm. (c\n         LTR   R1,R2                12    RR  Load and Test (c)\n         LCR   R1,R2                13    RR  Load Complement (c)\n         LCTL  R1,R3,23(15)         B7    RS  Load Control (p)\n         LH    R1,23(2,15)          48    RX  Load Halfword\n         LM    R1,R3,23(15)         98    RS  Load Multiple\n         LNR   R1,R2                11    RR  Load Negative (c)\n         LPR   R1,R2                10    RR  Load Positive (c)\n         LPSW  A                    82    S   Load PSW (n,p)\n         LRA   R1,23(2,15)          11    RX  Load Real Address (c,p)\n         LURA  R1,R2                154B  RRE Load Using Real Address (\n         MSTA  R1                   1547  RRE Modify Stacked State\n         MSCH  23(15)               1532  S   Modify Subchannel (c,p)\n         MC    21(11),x'08'         AF    SI  Monitor Call\n         MVI   21(11),x'08'         92    SI  Move (immediate)\n         MVC   21(3,11),23(15)      23    SS  Move (character)\n         MVCIN 21(3,11),23(15)      E8    SS  Move Inverse\n         MVCL  R0,R2                0E    RR  Move Long (c)\n         MVN   21(3,11),23(15)      21    SS  Move Numerics\n*        MVPG  R1,R2                1554  RRE Move Page (facility 1) (c\n*        MVPG  R1,R2                1554  RRE Move Page (facility 2) (c\n*        MVST  R1,R2                1555  RRE Move String\n         MVCP  21(3,11),23(15),R3   DA    SS  Move to Primary (c,s)\n         MVCS  21(3,11),23(15),R3   DB    SS  Move to Secondary (c,s)\n         MVCDK 21(11),23(15)        E50F  SSE Move with Destination Key\n         MVCSK 21(11),23(15)        E50E  SSE Move with Source Key\n         MVCK  21(3,11),23(15),R3   D9    SS  Move with Key (c,s)\n         MVO   21(3,11),23(15)      F1    SS  Move with Offset\n         MVZ   21(3,11),23(15)      D3    SS  Move Zones\n         MR    R0,R2                1C    RR  Multiply\n         M     R0,23(2,15)          5C    RX  Multiply\n         MP    21(3,11),23(2,15)    FC    SS  Multiply Decimal\n         MH    R1,23(2,15)          4C    RX  Multiply Halfword\n         OR    R1,R2                16    RR  OR (c)\n         O     R1,23(2,15)          56    RX  OR (c)\n         OI    21(11),x'08'         96    SI  OR (immediate) (c)\n         OC    21(3,11),23(15)      D6    SS  OR (character) (c)\n         PACK  21(3,11),23(2,15)    F2    SS  Pack\n         PC    23(15)               1518  S   Program Call (s)\n         PR                         0101  E   Program Return\n         PT    R1,R2                1528  RRE Program Transfer (s)\n         PALB                       1548  RRE Purge ALB (p)\n         PTLB                       150D  S   Purge TLB (p)\n*        RDD   21(11),x'08'         85    SI  Read Direct (p)\n         RCHP  23(15)               153B  S   Reset Channel Path (c,p)\n*        RRB   23(15)               1513  S   Reset Reference Bit (c,p)\n         RRBE  R1,R2                152A  RRE Reset Ref. Bit Ext. (c,p)\n*        RIO   23(15)               9C02  S   Resume I/O (c,p)\n         RSCH  23(15)               1538  S   Resume Subchannel (c,p)\n*        SRST  R1,R2                155E  RRE Search String (c)\n         SAR   R1,R2                154E  RRE Set Access\n         SAL   23(15)               1537  S   Set Address Limit (p)\n*        SACF  23(15)               1579  S   Set Addr. Space Cntl Fast\n         SAC   23(15)               1519  S   Set Addr. Space Control (\n*        SCHM  23(15)               153C  S   Set Channel Monitor (p)\n         SCK   23(15)               1504  S   Set Clock (c,p)\n         SCKC  23(15)               1506  S   Set Clock Comparator (p)\n         SPT   23(15)               1508  S   Set CPU Timer (p)\n         SPX   23(15)               1510  S   Set Prefix (p)\n         SPM   R1                   04    RR  Set Program Mask (n)\n         SPKA  23(15)               150A  S   Set PSW Key from Address\n         SSAR  R1                   1525  RRE Set Secondary ASN (s)\n*        SSK   R1,R2                08    RR  Set Storage Key (p)\n         SSKE  R1,R2                152B  RRE Set Storage Key Extended\n         SSM   23(15)               80    S   Set System Mask (p)\n         SRP   21(3,11),23(2),5     F0    SS  Shift and Round Decimal (\n         SLDA  R0,23(15)            8F    RS  Shift Left Double (c)\n         SLDL  R0,23(15)            8D    RS  Shift Left Double Logical\n         SLA   R1,23(15)            8B    RS  Shift Left Single (c)\n         SLL   R1,23(15)            89    RS  Shift Left Single Logical\n         SRDA  R0,23(15)            8E    RS  Shift Right Double (c)\n         SRDL  R0,23(15)            8C    RS  Shift Right Double Logica\n         SRA   R1,23(15)            8A    RS  Shift Right Single (c)\n         SRL   R1,23(15)            88    RS  Shift Right Single Logica\n         SIGP  R1,R3,23(15)         AE    RS  Signal Processor (c,p)\n*        SIO   23(15)               9C00  S   Start I/O (c,p)\n*        SIOF  23(15)               9C01  S   Start I/O Fast Release (c\n         SSCH  23(15)               1533  S   Start Subchannel (c,p)\n         ST    R1,23(2,15)          50    RX  Store\n*        STIDC 23(15)               1503  S   Store Channel ID (c,p)\n         STAM  R1,R3,23(15)         9B    RS  Store Access Multiple\n         STCPS 23(15)               153A  S   Store Channel Path Status\n         STCRW 23(15)               1539  S   Store ChanelL Report Word\n         STC   R1,23(2,15)          42    RX  Store Character\n         STCM  R1,B'0101',23(15)    BE    RS  Store Characters under Ma\n         STCK  23(15)               1505  S   Store Clock (c)\n         STCKC 23(15)               1507  S   Store Clock Comparator (p\n         STCTL R1,R3,23(15)         B6    RS  Store Control (p)\n         STAP  23(15)               1512  S   Store CPU Address (p)\n         STIDP 23(15)               1502  S   Store CPU ID (p)\n         STPT  23(15)               1509  S   Store CPU Timer (p)\n         STH   R1,23(2,15)          40    RX  Store Halfword\n         STM   R1,R3,23(15)         90    RS  Store Multiple\n         STPX  23(15)               1511  S   Store Prefix (p)\n         STSCH 23(15)               1534  S   Store Subchannel (c,p)\n         STNSM 21(11),x'08'         AC    SI  Store Then AND Sys. Mask\n         STOSM 21(11),x'00'         AD    SI  Store Then OR Sys. Mask (\n         STURA R1,R2                1546  RRE Store Using Real Address\n         SR    R1,R2                1B    RR  Subtract Register (c)\n         S     R1,23(2,15)          5B    RX  Subtract (c)\n         SP    21(3,11),23(2,15)    FB    SS  Subtract Decimal (c)\n         SH    R1,23(2,15)          4B    RX  Subtract Halfword (c)\n         SLR   R1,R2                1F    RR  Subtract Logical (c)\n         SL    R1,23(2,15)          5F    RX  Subtract Logical (c)\n         SVC   120                  0A    RR  Supervisor Call\n         TAR   R1,R2                154C  RRE Test Access (c)\n         TS    23(15)               93    S   Test and Set (c)\n         TB    R1,R2                152C  RRE Test Block (c,p)\n*        TIO   23(15)               9D00  S   Test I/O (c,p)\n         TPI   23(15)               1536  S   Test Pndng Interruption (\n         TPROT 21(11),23(15)        E501  SSE Test Protection (c,p)\n         TSCH  23(15)               1535  S   Test Subchannel (c,p)\n         TM    21(11),x'08'         91    SI  Test under Mask (c)\n         TRACE R1,R3,23(15)         99    RS  Trace (p)\n         TR    21(3,11),23(15)      DC    SS  Translate (c)\n         TRT   21(3,11),23(15)      DD    SS  Translate and Test (c)\n         UNPK  21(3,11),23(2,15)    F3    SS  Unpack\n         UPT                        0102  E   Update Tree (c)\n*        WRD   21(11),x'08'         84    SI  Write Direct (p)\n         ZAP   21(3,11),23(2,15)    F8    SS  Zero and Add Decimal (c)\n         B     A\nA        DC    D'0'\n         REGEQU\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEST7": {"ttr": 13835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00V\\x01\\x00\\x11\\x9f\\x01\\x04\\x07\\x7f\\x12\\x19\\x00\\x0c\\x00\\x05\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2000-04-28T00:00:00", "modifydate": "2004-03-17T12:19:56", "lines": 12, "newlines": 5, "modlines": 0, "user": "U765139"}, "text": "TEST7    START\n*        BR    14\n         DS    XL20                 LEADING DS\n         USING *,15\n         XC     A,A\n         SR    15,15\n         BR    14\n         DC    A(TEST7)             @ ENTRY POINT\nA        DS    XL8\n         DC    C' '\n         DC    A(A)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEST8": {"ttr": 13837, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x02\\x01\\x013/\\x01\\x04\\x03o\\x12Y\\x00\\x15\\x00\\x0c\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2001-11-28T00:00:00", "modifydate": "2004-02-05T12:59:02", "lines": 21, "newlines": 12, "modlines": 0, "user": "U765139"}, "text": "TEST8    CSECT\n         USING *,15\n         XC     A,A\n         SR    15,15\n         BR    14\n         DC    A(*)\n         DC    A(A)\n         DC    A(TEST8)\n         DC    A(TEST8B)\n         DC    A(B)\nA        DS    XL8\n         DC    C' '\nTEST8B   CSECT                      2ND CSECT\n         XR    15,15\n         BR    14\n         DC    A(A)\n         DC    A(B)\nB        DC    A(*)\n         DC    A(TEST8)\n         DC    A(TEST8B)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEST8B": {"ttr": 13839, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00#\\x01\\x02\\x08\\x0f\\x01\\x02\\x08\\x0f\\x122\\x00\\x11\\x00\\x11\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-03-21T00:00:00", "modifydate": "2002-03-21T12:32:23", "lines": 17, "newlines": 17, "modlines": 0, "user": "U765139"}, "text": "TEST8    CSECT\n         USING *,15\n         XC     A,A\n         SR    15,15\n         BR    14\n         DC    A(*)\n         DC    A(A)\n         DC    A(TEST8B)\nA        DS    XL8\n         DC    C' '\nTEST8B   CSECT                      2ND CSECT\n         ORG   TEST8B+40\n         SR    15,15\n         BR    14\n         DC    A(A)\n         DC    A(*)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEST9": {"ttr": 13841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00X\\x01\\x03\\x10\\x8f\\x01\\x03\\x14?\\x12G\\x00\\x0f\\x00\\r\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-04-18T00:00:00", "modifydate": "2003-05-23T12:47:58", "lines": 15, "newlines": 13, "modlines": 0, "user": "U765139"}, "text": "TEST9    CSECT           LOTS OF RLD ENTRIES\nA        DC    10000A(*)\nB        DC    10000A(*)\nC        DC    10000A(*)\nD        DC    10000A(*)\nE        DC    10000A(*)\nF        DC    10000A(*)\nG        DC    10000A(*)\nH        DC    10000A(*)\nI        DC    10000A(*)\nJ        DC    10000A(*)\nK        DC    10000A(*)\nL        DC    10000A(*)\nM        DC    10000A(*)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEST9B": {"ttr": 13843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x003\\x01\\x03\\x11_\\x01\\x03\\x11_\\x12%\\x00\\x03\\x00\\x03\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-04-25T00:00:00", "modifydate": "2003-04-25T12:25:33", "lines": 3, "newlines": 3, "modlines": 0, "user": "U765139"}, "text": "TEST9    CSECT           START WITH RLD ENTRIES\nA        DC    100A(*)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIME": {"ttr": 14081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TIME     TITLE 'TIMING TABLE FOR MOD 40'\n***********************************************************************\n*                                                                     *\n*  add instruction timings to the listing                             *\n*                                                                     *\n*  called by FTXTA                                                    *\n*                                                                     *\n*  parms @ r1:                                                        *\n*    +0 - @ Print Area in PASS1                                       *\n*    +4 - input instruction                                           *\n*    +8 - total time so far                                           *\n*                                                                     *\n*  Return is to @ r14.                                                *\n*                                                                     *\n*  Add dummy timing entries for new instructions         CFK jly 1999 *\n*                                                                     *\n***********************************************************************\nTIME     CSECT\n         BALR  15,0               setup base reg\n         USING *,15               tell assembler\n         MVI   FLG,X'00'          clear * needed flag\n         MVC   OP(4),4(1)         copy input\n         MVC   TOTAL(4),8(1)      copy total\n         SR    3,3\n         IC    3,OP               get opcode\n         CLI   OP,X'7F'           RR or RX instr ?\n         BNH   CRRX               br if yes.\n         CLI   OP,X'CF'           RS or SI instr.\n         BNH   CRSI               br if yes.\n         CLI   OP,X'EF'           SS instr. with 1 length ?\n         BNH   CSSL               br if yes\n         B     CSSD               else ss with 2 lengths\n*                    RR or RX instruction found\nCRRX     SLL   3,2                mul. opcode by 4\n         A     3,ARRX             calc @ time for this instr.\n         L     5,0(3)             get time for this instr.\nFORMC    CLI   OP,X'40'           RX instr. ?\n         BL    FORM               no - print timings\n         TM    RR,X'0F'           index reg = 0 ?\n         BZ    FORME              br if so\n         CLI   OP,X'60'           floating point instr ?\n         BL    SHIN               br if not\n         A     5,XRTC             add floating point index time (125)\nSHIN     A     5,XRT              add 63\nFORME    CLI   OP,X'44'           EXecute instr. ?\n         BNE   FORM               no - print timings\n         MVI   FLG,X'01'          else flag * needed\n         B     FORM               and print timings\n*                    SS instruction with 1 length found\nCSSL     S     3,D0               sub x'000000D0'\n         SLL   3,3                mul opcode by 8\n         A     3,ASSL             calc @ opcode timing\n         SR    4,4\n         IC    4,RR               get length field\n         LA    4,1(4)             calc bytes to process\n         L     5,4(3)             get time per byte\n         MR    4,4                calc extra time\n         A     5,0(3)             calc total time\n         B     FORM               and print timings\n*                    SS instruction with 2 lengths found\nCSSD     S     3,F0               sub x'000000F0'\n         SLL   3,3                mul opcode by 8\n         A     3,ASSD             calc @ opcode timing\n         MVC   L1(1),RR           copy length fields\n         MVC   L2(1),RR           copy lengths again\n         NI    L1,X'F0'           mask out 1st length\n         NI    L2,X'0F'           mask out 2nd length\n         SR    4,4                ) move\n         IC    4,L1               )  1st\n         SRL   4,4                )   length\n         STC   4,L1               )    down\n         CLC   L1(1),L2           1st length shorter than 2nd\n         BNL   NE12               br if not\n         IC    4,L2               else get 2nd (longer) length\nNE12     LA    4,1(4)             calc bytes to process\n         L     5,4(3)             get time per byte\n         MR    4,4                calc extra time\n         A     5,0(3)             calc total time\n         B     FORM               and print timings\n*                     RS or SI instruction found\nCRSI     S     3,EGO              sub x'00000080'\n         SLL   3,3                mul opcode by 8\n         A     3,ARSI             get @ timing table entries\n         TM    OP,X'07'           low 3 bits clear ?\n         BZ    STLM               br if yes\n         TM    OP,X'88'           x8 - xF instr. ?\n         BO    SHIO               br if yes\nLRS      L     5,0(3)             else get instr. timing\n         B     FORM               and print timings\nSTLM     TM    OP,X'88'           x8 - xF instr. ?\n         BO    SHIO               br if yes\nSTLME    MVC   L1(1),RR           copy r1,r2\n         MVC   L2(1),RR           copy r1,r2\n         CLI   OP,X'80'           SSM instr. ?\n         BE    LRS                br if yes (done)\n*                  LM or STM instruction\n         SR    4,4                ) move\n         IC    4,L1               )  r1\n         SRL   4,4                )  down\n         STC   4,L1               )\n         SR    5,5\n         NI    L2,X'0F'           mask out r2\n         CLC   L1(1),L2           r1 > r2 ?\n         BNH   AFT                br if not\n         LA    5,16               else add 16 to r2\nAFT      IC    4,L2               get r2\n         AR    5,4                add fudge factor\n         IC    4,L1               get r1\n         SR    5,4                ) calc number of\n         LA    5,1(5)             )  registers\n         M     4,4(3)             mul by time per register\n         A     5,0(3)             calc total time\n         B     FORM               and print timings\n*                     x8 - xF instr.\nSHIO     CLI   OP,X'98'           LM instr. ?\n         BE    STLME              br if yes\n         TM    OP,X'10'           9x instr. ?\n         BO    IO                 br if yes\n*                   shift instruction (89 - 8F)\n         LH    4,ADD              get address\n         TM    OP,X'04'           8C - 8F instr. ?\n         BO    SHD                br if yes (double reg shift)\n         SLL   4,27               ) mask out no. bits\n         SRL   4,27               )  to shift (single reg shift)\n         B     FSH                skip double shift code\nSHD      SLL   4,26               ) mask out no. bits\n         SRL   4,26               )  to shift (double reg shift)\nFSH      SRDL  4,4                calc actual\n         LR    5,4                 bits to shift\n         MH    5,6(3)             mul by time per bit\n         A     5,0(3)             add base time\n         TM    ADD,X'F0'          reg zero ?\n         BZ    FORM               yes - print timings\n         MVI   FLG,X'01'          flag * needed since time approx\n         B     FORM               and print timings\nIO       L     5,0(3)             get instr. timing\n         MVI   FLG,X'01'          flag * needed\n         B     FORM               and print timings\n*                       Print the time\nFORM     LR    4,5                ) calc new\n         A     4,TOTAL            )  total time\n         CVD   4,TT               make total PD\n         CVD   5,TI               make this time PD\n         ST    4,8(1)             save new total time\n         UNPK  TTD(8),TT+3(5)     unpack total time\n         UNPK  TID(8),TI+3(5)     unpack this instr's time\n         OI    TID+7,C'0'         make total printable\n         OI    TTD+7,C'0'         make this time printable\n         LA    3,5                get max no. leading zeroes\n         LA    2,TTD              get @ total time\nBL1      CLI   0(2),C'0'          zero ?\n         BNE   OL1                quit loop if not\n         MVI   0(2),C' '          else blank out the zero\n         LA    2,1(2)             point @ next byte\n         BCT   3,BL1              and loop if necessary\nOL1      LA    3,5                get max no. leading zeroes\n         LA    2,TID              get @ this instr's time\nBL2      CLI   0(2),C'0'          zero ?\n         BNE   OL2                quit loop if not\n         MVI   0(2),C' '          else blank it out\n         LA    2,1(2)             point @ next byte\n         BCT   3,BL2              and loop if necessary\nOL2      L     2,0(1)             get @ print area\n         CLI   FLG,X'01'          * needed ?\n         BNE   NS                 br if not\n         MVI   99(2),C'*'         add *\nNS       MVC   100(6,2),TID       copy integer part of instr. time\n         MVI   106(2),C'.'        add .\n         MVC   107(2,2),TID+6     copy decimals\n         MVC   110(6,2),TTD       copy integer part of total\n         MVI   116(2),C'.'        add .\n         MVC   117(2,2),TTD+6     copy decimals\n         BR    14                 return\n*                   constants\nTOTAL    DC    F'0'               working total time\nXRT      DC    F'125'             constant\nXRTC     DC    F'63'              constant\nTID      DC    D'0'\nTTD      DC    D'0'\nTT       DC    D'0'\nTI       DC    D'0'\nD0       DC    X'000000D0'        constant\nF0       DC    X'000000F0'        constant\nEGO      DC    X'00000080'        constant\nOP       DC    X'00'              ) input opcode\nRR       DC    X'00'              ) input reg\nADD      DC    X'0000'            ) input address\nFLG      DC    X'00'              flag set to x'01' if * needed\nL1       DC    X'00'              work 1st SS length\nL2       DC    X'00'              work 2nd SS length\nASSD     DC    A(SSD)             @ timings for SS 2 length instr.\nASSL     DC    A(SSL)             @ timings for SS 1 length instr.\nARSI     DC    A(RSI)             @ timings for RS and SI instr.\nARRX     DC    A(RRX)             @ timings for RR and RX instr.\nRRX      DC    F'0'                         00\n         DC    F'0'              (UPT)      01\n         DC    F'0'                         02\n         DC    F'0'                         03\n         DC    F'500'             SPM       04\n         DC    F'876'             BALR      05\n         DC    F'813'             BCTR      06\n         DC    F'502'             BCR       07\n         DC    F'875'            <SSK>      08\n         DC    F'750'            <ISK>      09\n         DC    F'2375'            SVC       0A\n         DC    F'0'              (BSM)      0B\n         DC    F'0'              (BASSM)    0C\n         DC    F'0'              (BASR)     0D\n         DC    F'0'              (MVCL)     0E\n         DC    F'0'              (CLCL)     0F\n         DC    F'875'             LPR       10\n         DC    F'750'             LNR       11\n         DC    F'750'             LTR       12\n         DC    F'875'             LCR       13\n         DC    F'750'             NR        14\n         DC    F'750'             CLR       15\n         DC    F'750'             OR        16\n         DC    F'750'             XR        17\n         DC    F'750'             LR        18\n         DC    F'750'             CR        19\n         DC    F'750'             AR        1A\n         DC    F'875'             SR        1B\n         DC    F'8330'            MR        1C\n         DC    F'19250'           DR        1D\n         DC    F'750'             ALR       1E\n         DC    F'750'             SLR       1F\n         DC    F'1250'            LPDR      20\n         DC    F'1250'            LNDR      21\n         DC    F'1250'            LTDR      22\n         DC    F'1250'            LCDR      23\n         DC    F'1250'            HDR       24\n         DC    F'0'              (LRDR)     25\n         DC    F'0'              (MXR)      26\n         DC    F'0'              (MXDR)     27\n         DC    F'1250'            LDR       28\n         DC    F'1921'            CDR       29\n         DC    F'2253'            ADR       2A\n         DC    F'2253'            SDR       2B\n         DC    F'25500'           MDR       2C\n         DC    F'47250'           DDR       2D\n         DC    F'2086'            AWR       2E\n         DC    F'2087'            SWR       2F\n         DC    F'750'             LPER      30\n         DC    F'750'             LNER      31\n         DC    F'750'             LTER      32\n         DC    F'750'             LCER      33\n         DC    F'750'             HER       34\n         DC    F'0'              (LRER)     35\n         DC    F'0'              (AXR)      36\n         DC    F'0'              (SXR)      37\n         DC    F'750'             LER       38\n         DC    F'1174'            CER       39\n         DC    F'1430'            AER       3A\n         DC    F'1430'            SER       3B\n         DC    F'7630'            MER       3C\n         DC    F'12810'           DER       3D\n         DC    F'1359'            AUR       3E\n         DC    F'1359'            SUR       3F\n         DC    F'1000'            STH       40\n         DC    F'1000'            LA        41\n         DC    F'1000'            STC       42\n         DC    F'938'             IC        43\n         DC    F'875'             EX    *   44\n         DC    F'1125'            BAL       45\n         DC    F'1126'            BCT       46\n         DC    F'938'             BC        47\n         DC    F'1063'            LH        48\n         DC    F'1000'            CH        49\n         DC    F'1063'            AH        4A\n         DC    F'1063'            SH        4B\n         DC    F'4500'            MH        4C\n         DC    F'0'              (BAS)      4D\n         DC    F'7250'            CVD       4E\n         DC    F'6063'            CVB       4F\n         DC    F'1250'            ST        50\n         DC    F'0'                         51\n         DC    F'0'                         52\n         DC    F'0'                         53\n         DC    F'1188'            N         54\n         DC    F'1188'            CL        55\n         DC    F'1188'            O         56\n         DC    F'1188'            X         57\n         DC    F'1188'            L         58\n         DC    F'1188'            C         59\n         DC    F'1188'            A         5A\n         DC    F'1188'            S         5B\n         DC    F'8640'            M         5C\n         DC    F'19670'           D         5D\n         DC    F'1188'            AL        5E\n         DC    F'1188'            SL        5F\n         DC    F'1750'            STD       60\n         DC    F'0'                         61\n         DC    F'0'                         62\n         DC    F'0'                         63\n         DC    F'0'                         64\n         DC    F'0'                         65\n         DC    F'0'                         66\n         DC    F'0'              (MXD)      67\n         DC    F'1688'            LD        68\n         DC    F'2453'            CD        69\n         DC    F'2766'            AD        6A\n         DC    F'2766'            SD        6B\n         DC    F'25940'           MD        6C\n         DC    F'47690'           DD        6D\n         DC    F'2599'            AW        6E\n         DC    F'2599'            SW        6F\n         DC    F'1250'            STE       70\n         DC    F'0'                         71\n         DC    F'0'                         72\n         DC    F'0'                         73\n         DC    F'0'                         74\n         DC    F'0'                         75\n         DC    F'0'                         76\n         DC    F'0'                         77\n         DC    F'1188'            LE        78\n         DC    F'1638'            CE        79\n         DC    F'1866'            AE        7A\n         DC    F'1866'            SE        7B\n         DC    F'8060'            ME        7C\n         DC    F'13250'           DE        7D\n         DC    F'1795'            AU        7E\n         DC    F'1866'            SU        7F\nRSI      DC    F'1000'            SSM       80\n         DC    F'0'\n         DC    F'0'                         81\n         DC    F'0'\n         DC    F'1625'            LPSW      82\n         DC    F'0'\n         DC    F'0'              (diagnose) 83\n         DC    F'0'\n         DC    F'937'            <WRD>      84\n         DC    F'0'\n         DC    F'1250'           <RDD>      85\n         DC    F'0'\n         DC    F'1625'            BXH       86\n         DC    F'0'\n         DC    F'1625'            BXLE      87\n         DC    F'0'\n         DC    F'1800'            SRL       88\n         DC    F'344'\n         DC    F'1800'            SLL       89\n         DC    F'282'\n         DC    F'2100'            SRA       8A\n         DC    F'344'\n         DC    F'2300'            SLA       8B\n         DC    F'344'\n         DC    F'2650'            SRDL      8C\n         DC    F'720'\n         DC    F'2500'            SLDL      8D\n         DC    F'533'\n         DC    F'3200'            SRDA      8E\n         DC    F'720'\n         DC    F'3300'            SLDA      8F\n         DC    F'590'\n         DC    F'687'             STM       90\n         DC    F'500'\n         DC    F'875'             TM        91\n         DC    F'0'\n         DC    F'938'             MVI       92\n         DC    F'0'\n         DC    F'0'              (TS)       93\n         DC    F'0'\n         DC    F'938'             NI        94\n         DC    F'0'\n         DC    F'875'             CLI       95\n         DC    F'0'\n         DC    F'938'             OI        96\n         DC    F'0'\n         DC    F'938'             XI        97\n         DC    F'0'\n         DC    F'625'             LM        98\n         DC    F'500'\n         DC    F'0'              (TRACE)    99\n         DC    F'0'\n         DC    F'0'                         9A\n         DC    F'0'\n         DC    F'0'                         9B\n         DC    F'0'\n         DC    F'4875'           <SIO>      9C\n         DC    F'0'\n         DC    F'4875'           <TIO>      9D\n         DC    F'0'\n         DC    F'3250'           <HIO>      9E\n         DC    F'0'\n         DC    F'1375'           <TCH>      9F\n         DC    F'0'\n         DC    96F'0'                       A0 to CF          CFK*JLY99\nSSL      DC    F'0'                         D0\n         DC    F'0'\n         DC    F'1688'            MVN       D1\n         DC    F'375'\n         DC    F'1657'            MVC       D2\n         DC    F'250'\n         DC    F'1688'            MVZ       D3\n         DC    F'375'\n         DC    F'1688'            NC        D4\n         DC    F'313'\n         DC    F'1204'            CLC       D5\n         DC    F'654'\n         DC    F'1688'            OC        D6\n         DC    F'313'\n         DC    F'1688'            XC        D7\n         DC    F'313'\n         DC    F'0'                         D8\n         DC    F'0'\n         DC    F'0'              (MVCK)     D9\n         DC    F'0'\n         DC    F'0'              (MVCP)     DA\n         DC    F'0'\n         DC    F'0'              (MVCS)     DB\n         DC    F'0'\n         DC    F'1688'            TR        DC\n         DC    F'625'\n         DC    F'2188'            TRT       DD\n         DC    F'375'\n         DC    F'2125'            ED        DE\n         DC    F'1000'\n         DC    F'2125'            EDMK      DF\n         DC    F'1000'\n         DC    32F'0'                       E0 to EF          CFK*JLY99\nSSD      DC    F'0'              (SRP)      F0\n         DC    F'0'\n         DC    F'1375'            MVO       F1\n         DC    F'563'\n         DC    F'1188'            PACK      F2\n         DC    F'700'\n         DC    F'1835'            UNPK      F3\n         DC    F'390'\n         DC    F'0'                         F4\n         DC    F'0'\n         DC    F'0'                         F5\n         DC    F'0'\n         DC    F'0'                         F6\n         DC    F'0'\n         DC    F'0'                         F7\n         DC    F'0'\n         DC    F'2532'            ZAP       F8\n         DC    F'250'\n         DC    F'2345'            CP        F9\n         DC    F'250'\n         DC    F'2875'            AP        FA\n         DC    F'375'\n         DC    F'2875'            SP        FB\n         DC    F'375'\n         DC    F'2667'            MP        FC\n         DC    F'1500'\n         DC    F'1313'            DP        FD\n         DC    F'2100'\n         DC    F'0'                         FE\n         DC    F'0'\n         DC    F'0'                         FF\n         DC    F'0'\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TXT": {"ttr": 14089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x01\\x04\\x00_\\x01\\x04\\x02\\x7f\\x15\\x10\\x01\\xb9\\x01\\xb9\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-01-05T00:00:00", "modifydate": "2004-01-27T15:10:01", "lines": 441, "newlines": 441, "modlines": 0, "user": "U765139"}, "text": "TXT      TITLE '* * * T X T * * *       (TEXT SUBROUTINE)  '\n***********************************************************************\n*                                                                     *\n*  Process TXT card from input.                                       *\n*                                                                     *\n*  Called by PASS1.                                                   *\n*                                                                     *\n*  Parms @ R1:                                                        *\n*    +0 - @ input card.                                               *\n*                                                                     *\n* History:                                                            *\n*   Put out message with info from the END card.          CFK Jun 1999*\n*   Allow 5000 TXT cards instead of 500.                  CFK Jun 1999*\n*   Only print length and epa if present.                 CFK Jly 1999*\n*   Map TXT cards.                                        CFK Feb 2000*\n*   Don't punch the END message.                          CFK Sep 2000*\n*   Use register equates.                                 CFK Nov 2000*\n*   Handle overlapping TXT cards correctly.               CFK Apr 2001*\n*   Put TXT into buffer for its section.                  CFK May 2001*\n*   Indicate to READ when END card found.                 CFK Sep 2001*\n*   Check for zero ESD entries found.                     CFK Oct 2001*\n*   Handle TXT header buffer overflow.                    CFK Nov 2001*\n*   Subtract ESD address from TXT address.                CFK Dec 2001*\n*   Check TXT length is valid (1-56 bytes).               CFK Jan 2002*\n*   Print 2nd message line with input card on it.         CFK Jan 2002*\n*   Use R12 for base (was R13) and call PRINTA not PRINT. CFK May 2003*\n*   Call RLDSORT from END.                                CFK May 2003*\n*   Use standard linkage conventions                      CFK Sep 2003*\n*   Tidy up calls to PRINTA.                              CFK Dec 2003*\n*   Handle object decks with length only in the END card. CFK Dec 2003*\n*                                                                     *\n***********************************************************************\n         SPACE 1\n*********************************************************************** TXTCARD\n*                                                                     * TXTCARD\n*  DSECT to map a txt CARD                                            * TXTCARD\n*                                                                     * TXTCARD\n*********************************************************************** TXTCARD\nTXTCARD  DSECT           cols                                           TXTCARD\nTXTCFLAG DS    X            1  Constant X'02'                           TXTCARD\nTXTCID   DS    CL3        2-4  Constant C'TXT'                          TXTCARD\n         DS    X            5  Blank                                    TXTCARD\nTXTCADR  DS    XL3        6-8  24 bit address of first byte of text     TXTCARD\n         DS    XL2        9-10 Blank                                    TXTCARD\nTXTCLEN2 DS    XL2       11-12 Number of bytes of text data             TXTCARD\nTXTCLEN1 EQU   TXTCLEN2+1,1    1 byte number of bytes of text           TXTCARD\n         DS    XL2       13-14 Blank                                    TXTCARD\nTXTCSDID DS    XL2       15-16 ESD identifier of section for this text  TXTCARD\nTXTCTEXT DS    XL56      17-72 up to 56 bytes of text data              TXTCARD\n         DS    XL8       73-80 Sequence data                            TXTCARD\nTXTCRDLN EQU   *-TXTCARD       Length of text card.                     TXTCARD\n         SPACE 1\nENDCARD  DSECT                                                CFK*JUN99 ENDCARD\n*********************************************************************** ENDCARD\n*                                                                     * ENDCARD\n*  DSECT to map an END card                                           * ENDCARD\n*                                                                     * ENDCARD\n*********************************************************************** ENDCARD\nENDC1    DS    X            1     constant x'02'              CFK*JUN99 ENDCARD\nENDCTXT  DS    CL3        2-4     constant c'END'             CFK*JUN99 ENDCARD\n         DS    C            5     space                       CFK*JUN99 ENDCARD\nENDCEPA  DS    XL3        6-8     Entry Point Address or spaces K*JUN99 ENDCARD\n         DS    CL6        9-14    spaces                      CFK*JUN99 ENDCARD\nENDCID   DS    XL2       15-16    ESD ID of csect that contains the EPA ENDCARD\nENDCNAME DS    CL8       17-24    entry point name or spaces  CFK*JUN99 ENDCARD\n         DS    CL4       25-28    spaces                      CFK*JUN99 ENDCARD\nENDCLFLG DS    X            29    binary zero if next field valid JUN99 ENDCARD\nENDCLEN  DS    XL3       30-32    csect length                CFK*JUN99 ENDCARD\nENDCTRFL DS    C            33    flag to ind. if ID present  CFK*JUN99 ENDCARD\nENDCNOTR EQU   C' '                 no IDR info. in record    CFK*JUN99 ENDCARD\nENDC1TR  EQU   C'1'                 1 IDR item follows        CFK*JUN99 ENDCARD\nENDC2TR  EQU   C'2'                 2 IDR items follow        CFK*JUN99 ENDCARD\nENDCT1NM DS    CL10      34-43    1st translator ID           CFK*JUN99 ENDCARD\nENDCT1V  DS    CL2       44-45    1st tr. version (01 to 99)  CFK*JUN99 ENDCARD\nENDCT1M  DS    CL2       46-47    1st tr. mod level (01 to 99)CFK*JUN99 ENDCARD\nENDCT1YR DS    CL2       48-49    last 2 digits of year ass.  CFK*JUN99 ENDCARD\nENDCT1DT DS    CL3       50-52    day of year assembled       CFK*JUN99 ENDCARD\nENDCT2NM DS    CL10      53-62    2nd translator ID           CFK*JUN99 ENDCARD\nENDCT2V  DS    CL2       63-64    2nd tr. version (01 to 99)  CFK*JUN99 ENDCARD\nENDCT2M  DS    CL2       65-66    2nd tr. mod level (01 to 99)CFK*JUN99 ENDCARD\nENDCT2YR DS    CL2       67-68    last 2 digits of year ass.  CFK*JUN99 ENDCARD\nENDCT2DT DS    CL3       69-71    day of year assembled       CFK*JUN99 ENDCARD\n*                                                             CFK*JUN99 ENDCARD\n         ESDSDMAP                 ESD table entry             CFK*MAY01\n*\n         TXTHDR                   TXT header table entry      CFK*MAY01\n*\nTXT      CSECT\n         ENTRY END                called by TXT\n         ENTRY ENDA               ref'ed by PASS4\n         EXTRN NPROG              in EDS0 csect               CFK*MAY01\n         EXTRN LCF                in PASS1 csect\n         EXTRN PRINTA             csect                       CFK*MAY03\n         EXTRN RLDSORT            csect                       CFK*MAY03\n         EXTRN PA                 in PASS1 csect              CFK*MAY01\n         ENTER ,                  entry logic                 CFK*SEP03\n         L     R10,0(R1)          get @ input card            CFK*NOV01\n         USING TXTCARD,R10        tell assembler              CFK*NOV01\n         CLC   TXTCLEN2,=H'0'     0 bytes text on this card ? CFK*JAN02\n         BE    Z10Z               yes, exit\n         CLC   TXTCLEN2,=H'56'    valid length ?              CFK*JAN02\n         BNH   Z01A               yes, continue               CFK*JAN02\n         L     R2,APA             get @ print area in PASS1   CFK*SEP03\n         MVC   0(21,R2),=C'** invalid TXT length'  copy msg   CFK*JAN02\n         B     Z10M               print message and exit      CFK*JAN02\nZ01A     DS    0H                                             CFK*JAN02\n         L     R2,=A(NPROG)       get @ number of sections    CFK*MAY01\n         LA    R3,4(R2)           get @ first section desc    CFK*MAY01\n         USING ESDSDMAP,R3        tell assembler              CFK*MAY01\n         ICM   R2,B'1111',0(R2)   get number of sections      CFK*OCT01\n         BZ    Z10A1              br. if none                 CFK*OCT01\nZ10A     DS    0H                                             CFK*MAY01\n         CLC   TXTCSDID,ESDID     is it the right section     CFK*MAY01\n         BE    Z10B               branch if found             CFK*MAY01\n         LA    R3,ESDENTLN(R3)    else get @ next entry       CFK*MAY01\n         BCT   R2,Z10A            and try it if present       CFK*MAY01\nZ10A1    DS    0H                                             CFK*OCT01\n         L     R2,APA             get @ print area in PASS1   CFK*SEP03\n         MVC   0(16,R2),=C'** No ESD for ID'  copy message    CFK*OCT01\n         UNPK  17(5,R2),TXTCSDID(3)           unpack ID       CFK*OCT01\n         TR    17(4,R2),TRTAB-240             make printable  CFK*OCT01\n         MVI   21(R2),C' '                    clear gash byte CFK*OCT01\n         B     Z10M               print message and exit      CFK*DEC01\nZ10B     DS    0H      found section                          CFK*MAY01\n         XR    R5,R5                                          CFK*MAY01\n         ICM   R5,B'0111',TXTCADR get TXT adr                 CFK*MAY01\n         S     R5,ESDADR          calc offset into section    CFK*DEC01\n         BNM   Z10B1              br if not -ve offset        CFK*DEC01\n         L     R1,APA             get @ print area in PASS1   CFK*SEP03\n         MVC   0(30,R1),=C'** TXT before start of section'    CFK*DEC01\n         MVC   31(8,R1),ESDNAME   add section name to message CFK*DEC01\n         B     Z10M               print message and exit      CFK*DEC01\nZ10B1    DS    0H                                             CFK*DEC01\n         LH    R6,TXTCLEN2        get TXT length              CFK*MAY01\n         LA    R7,0(R5,R6)        calc @ end of TXT           CFK*MAY01\n         TM    ESDINFO,ESDINOLN   csect length in END card ?  CFK*DEC03\n         BNO   Z10B3              branch if not               CFK*DEC03\n         C     R7,ENDMAXLN        new max length ?            CFK*DEC03\n         BNH   Z10B2              if not continue             CFK*DEC03\n         ST    R7,ENDMAXLN        else set new max            CFK*DEC03\nZ10B2    DS    0H                                             CFK*DEC03\n         C     R7,ESDLEN          does TXT fit ?              CFK*DEC03\n         BNH   Z10B3              yes - carry on              CFK*DEC03\n* else get new buffer twice the size of the old buffer        CFK*DEC03\n         L     R0,ESDLEN          get current buffer length   CFK*DEC03\n         LR    R9,R0              copy old length             CFK*DEC03\n         AR    R0,R0              double it                   CFK*DEC03\n         ST    R0,ESDLEN          save new buffer length      CFK*DEC03\n         GETMAIN RU,LV=(0),SP=1   get larger buffer           CFK*DEC03\n         L     R8,ESDTBUF         get @ current buffer        CFK*DEC03\n         ST    R1,ESDTBUF         point @ new buffer          CFK*DEC03\n         LR    R14,R1             copy new buffer address     CFK*DEC03\n         LR    R1,R8              save @ old buf for freemain CFK*DEC03\n         LR    R0,R9              save old len for freemain   CFK*DEC03\n         LR    R15,R9             copy source len to dest len CFK*DEC03\n         MVCL  R14,R8             copy current buffer to new  CFK*DEC03\n         FREEMAIN RU,LV=(0),A=(1),SP=1    free old buffer     CFK*DEC03\n         B     Z10C               and carry on                CFK*DEC03\nZ10B3    DS    0H                                             CFK*DEC03\n         C     R7,ESDLEN          does TXT fit ?              CFK*MAY01\n         BNH   Z10C               yes - carry on              CFK*MAY01\n         L     R1,APA             get @ print area in PASS1   CFK*SEP03\n         MVC   0(33,R1),=C'** TXT extends off end of section' CFK*MAY01\n         MVC   34(8,R1),ESDNAME   add section name to message CFK*MAY01\n         B     Z10M               print message and exit      CFK*DEC01\nZ10C     DS    0H                                             CFK*MAY01\n         A     R5,ESDTBUF         calc @ TXT location         CFK*MAY01\n         BCTR  R6,0               -1 for MVC                  CFK*MAY01\n         EX    R6,MVC1            copy TXT to buffer          CFK*MAY01\n         L     R4,ESDNTXT         )                           CFK*MAY01\n         LA    R4,1(R4)           ) inc number of cards       CFK*MAY01\n         ST    R4,ESDNTXT         )                           CFK*MAY01\n         CLC   ESDNTXT(4),ESDMAXT card buffer full ?          CFK*MAY01\n         BL    Z10D               no - OK\n* else get new buffer twice the size of the old buffer        CFK*NOV01\n         L     R0,ESDMAXT         get current max cards       CFK*NOV01\n         SLL   R0,8               mul by twice TXT hdr len    CFK*NOV01\n         GETMAIN RU,LV=(0),SP=1   get larger buffer           CFK*NOV01\n         LR    R8,R1              copy new buffer address     CFK*NOV01\n         L     R6,ESDCBUF         get @ current buffer        CFK*NOV01\n         ST    R1,ESDCBUF         point @ new buffer          CFK*NOV01\n         LR    R1,R6              save for freemain           CFK*NOV01\n         L     R7,ESDMAXT         get current max cards       CFK*NOV01\n         AR    R7,R7              double it                   CFK*NOV01\n         ST    R7,ESDMAXT         save new max cards          CFK*NOV01\n         AR    R7,R7              calc original buffer length CFK*NOV01\n         LR    R0,R7              save for freemain           CFK*NOV01\n         LR    R9,R7              copy source len to dest len CFK*NOV01\n         MVCL  R8,R6              copy current buffer to new  CFK*NOV01\n         FREEMAIN RU,LV=(0),A=(1),SP=1    free old buffer     CFK*NOV01\nZ10D     DS    0H                                             CFK*MAY01\n         BCTR  R4,0               sub 1 from card number      CFK*MAY01\n         SLL   R4,2               mul by TXT hdr length (4)   CFK*MAY01\n         A     R4,ESDCBUF         add @ header buffer         CFK*MAY01\n         USING TXTHDR,R4          tell assembler              CFK*MAY01\n         MVC   TXTHADR,TXTCADR    copy address of 1st byte of text data\n         MVC   TXTHLEN,TXTCLEN1   copy number of bytes of text data\n         B     Z10Z               exit TXT                    CFK*SEP03\nMVC1     MVC   0(1,R5),TXTCTEXT   EXecuted instruction        CFK*MAY01\n         DROP  R3                 tell assembler done with R3 CFK*OCT00\n         DROP  R4                 tell assembler done with R4 CFK*MAY01\n**************************************************************CFK*DEC01\n*        Output message and exit                              CFK*DEC01\n**************************************************************CFK*DEC01\nZ10M     DS    0H                                             CFK*DEC01\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         L     R1,APA             get @ print area in PASS1   CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\n         L     R1,APA             get @ print area in PASS1   CFK*JAN02\n         MVC   0(11,R1),=C'** card is:' copy 2nd message      CFK*JAN02\n         MVC   12(80,R1),TXTCARD  add input card to message   CFK*JAN02\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\nZ10Z     DS    0H                 common exit point           CFK*SEP03\n         LEAVE ,                  exit logic                  CFK*SEP03\n         DROP  R10                tell assembler done with R10CFK*NOV01\n         DROP  R12                tell assembler done with R12CFK*MAY01\n***********************************************************************\n*                                                                     *\n*  Entry point to process END card(s).                                *\n*                                                                     *\n*  Parms @ R1:                                                        *\n*    +0 - @ input card.                                               *\n*                                                                     *\n***********************************************************************\nEND      ENTER                    entry logic                 CFK*SEP03\n         L     R3,=V(ENDFLAG)     get @ flag in READ csect    CFK*SEP01\n         MVI   0(R3),X'FF'        indicate END card found     CFK*SEP01\n         L     R3,0(R1)           get @ input card\n         USING ENDCARD,R3         tell assembler              CFK*JUN99\n         L     R1,APA             get @ print area            CFK*SEP03\n         MVC   ENDA(3),ENDCEPA    copy entry point address\n         MVC   ENDS(2),ENDCID     copy ESD ID\n         MVC   EXCDAT,ENDCLFLG    copy section len and flag   CFK*DEC03\n         CLI   ENDCLFLG,X'00'     is a length present ?       CFK*JLY99\n         BNE   NOLEN              br. if no length            CFK*JLY99\n         UNPK  ENDMLEN(7),ENDCLEN(4)   unpack csect length    CFK*JUN99\n         MVI   ENDMLEN+L'ENDMLEN,C' '  clear gash byte        CFK*JUN99\n         TR    ENDMLEN,TRTAB-240  make printable              CFK*JUN99\nNOLEN    DS    0H                                             CFK*JUN99\n         MVC   ENDMENTR,ENDCNAME  copy entry name or spaces   CFK*JUN99\n         CLC   ENDCNAME,SPACES    symbolic entry name present ? K*JUN99\n         BNE   NOEPA              br if so                    CFK*JUN99\n         CLC   ENDCID,SPACES      entry ESD ID present ?      CFK*MAR00\n         BNE   GOTEPA             br. if ESD ID present       CFK*MAR00\n         CLC   ENDCEPA,SPACES     entry len present ?         CFK*JLY99\n         BE    NOEPA              br. if no entry length      CFK*JLY99\nGOTEPA   DS    0H                                             CFK*MAR00\n         UNPK  ENDMENTR(7),ENDCEPA(4)  unpack entry point address JUN99\n         MVI   ENDMENTR+6,C' '         clear gash byte        CFK*JUN99\n         TR    ENDMENTR(6),TRTAB-240   make printable         CFK*JUN99\nNOEPA    DS    0H                                             CFK*JUN99\n         MVC   0(ENDMSGL1,R1),ENDMSG   copy msg to print area CFK*MAY03\n         CLI   ENDCTRFL,ENDCNOTR  translator IDR present ?    CFK*JUN99\n         BE    PRMSG              branch if not               CFK*JUN99\n         MVC   ENDMT1NM,ENDCT1NM  )                           CFK*JUN99\n         MVC   ENDMT1V,ENDCT1V    ) copy 1st                  CFK*JUN99\n         MVC   ENDMT1M,ENDCT1M    ) translator                CFK*JUN99\n         MVC   ENDMT1YR,ENDCT1YR  ) details                   CFK*JUN99\n         MVC   ENDMT1DT,ENDCT1DT  )                           CFK*JUN99\n         MVC   ENDMSGL1(ENDMT1L,R1),ENDMT1 copy to print area CFK*MAY03\n         CLI   ENDCTRFL,ENDC1TR   2nd translator IDR present ? FK*JUN99\n         BE    PRMSG              branch if not               CFK*JUN99\n         MVC   ENDMT2NM,ENDCT2NM  )                           CFK*JUN99\n         MVC   ENDMT2V,ENDCT2V    ) copy 2nd                  CFK*JUN99\n         MVC   ENDMT2M,ENDCT2M    ) translator                CFK*JUN99\n         MVC   ENDMT2YR,ENDCT2YR  ) details                   CFK*JUN99\n         MVC   ENDMT2DT,ENDCT2DT  )                           CFK*JUN99\n         MVC   ENDMSGL1+ENDMT1L(ENDMT2L,R1),ENDMT2  copy to print area\nPRMSG    DS    0H                                             CFK*JUN99\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         DROP  R3                 was ENDCARD                 CFK*MAY03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\n         L     R3,ALCF            get @ LCF in PASS1 csect\n         MVI   0(R3),X'FF'        flag END card found\n*  process all sections                                       CFK*MAY01\n         L     R10,=A(NPROG)      get @ number of sections    CFK*MAY01\n         LA    R11,4(R10)         get @ first section desc    CFK*MAY01\n         USING ESDSDMAP,R11       tell assembler              CFK*MAY01\n         ICM   R10,B'1111',0(R10) get number of sections      CFK*OCT01\n         BZ    Z90Z               exit if none                CFK*DEC03\nZ20A     DS    0H                                             CFK*MAY01\n* first does it have section length in end card only ?        CFK*DEC03\n         TM    ESDINFO,ESDINOLN   missing length ?            CFK*DEC03\n         BNO   RCYC               skip if not                 CFK*DEC03\n         CLI   EXCFLG,X'00'       was a length on END card ?  CFK*DEC03\n         BNE   Z20B               skip if length missing      CFK*DEC03\n         MVC   ESDLEN3,EXCLEN     else copy length            CFK*JAN04\n         CLC   ESDLEN,ENDMAXLN    do all cards fit            CFK*JAN04\n         BNL   RCYC               OK - carry on               CFK*DEC03\n         L     R1,APA             get @ print area in PASS1   CFK*DEC03\n         MVC   0(33,R1),=C'** TXT extends off end of section' CFK*DEC03\n         MVC   34(8,R1),ESDNAME   add section name to message CFK*DEC03\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\n         B     RCYC               and carry on                CFK*DEC03\nZ20B     DS    0H                                             CFK*DEC03\n         L     R1,APA             get @ print area in PASS1   CFK*DEC03\n         MVC   0(35,R1),=C'** Length not specified for section' K*DEC03\n         MVC   36(8,R1),ESDNAME   add section name to message CFK*DEC03\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\n*  sort the cards by text address\nRCYC     L     R3,ESDCBUF         get @ TXT card header array CFK*MAY01\n         USING TXTHDR,R3                                      CFK*MAY01\n         L     R4,ESDNTXT         get number of TXT cards     CFK*MAY01\n         SLL   R4,2               mul by array entry len (4)  CFK*MAY01\n         AR    R3,R4              calc @ next free entry\n         SH    R3,=Y(TXTHDRLN*2)  subtract twice entry len    CFK*MAY01\n         L     R4,ESDNTXT         get number of TXT cards read FK*MAY01\n         S     R4,ONEXY           subtract 1\n         BNP   ECR                if 1 or none can't overlap  CFK*MAY01\n         MVI   EXCK,X'00'         clear cards swapped flag\nCLXX     CLC   TXTHADR,TXTHADR+TXTHDRLN   TXT out of seq ?    CFK*MAY01\n         BNH   NEXX               br if cards in sequence     CFK*MAY01\n         MVC   TMXT(TXTHDRLN),TXTHDR+TXTHDRLN   \u00a8 swap        CFK*MAY01\n         MVC   TXTHDR+TXTHDRLN(TXTHDRLN),TXTHDR \u00a8  header     CFK*MAY01\n         MVC   TXTHDR(TXTHDRLN),TMXT            \u00a8   data      CFK*MAY01\n         MVI   EXCK,X'01'         flag card swapped\nNEXX     SH    R3,=H'4'           subtract 4\n         BCT   R4,CLXX            br if any more cards\n         CLI   EXCK,X'01'         any swaps done ?\n         BE    RCYC               if so try again\n         DROP  R3                                             CFK*OCT00\n* sort finished\n         L     R9,ESDNTXT         get no. of TXT cards read   CFK*MAY01\n         L     R3,ESDCBUF         get @ 1st card header       CFK*MAY01\n         USING TXTHDR,R3                                      CFK*MAY01\n         S     R9,ONEXY           - 1 since check pairs       CFK*MAY01\n         BNP   ECR                br. if < 2 cards            CFK*MAY01\n* loop to check if any cards overlap\nPTXT     DS    0H                                             CFK*MAY01\n         MVC   TCC1+1(3),TXTHADR  copy this cards TXT address CFK*MAY01\n         MVC   TCC2+1(3),TXTHADR+TXTHDRLN copy next cards TXT address\n         SR    R5,R5              clear r5\n         IC    R5,TXTHLEN         get length of TXT data on this card\n         A     R5,TCC1            add 1st cards start adr.\n         S     R5,TCC2            subtr. 2nd cards start adr. CFK*OCT01\n         BNP   PTXTO              br if no overlap            CFK*OCT01\n* handle overlapping cards.\n         L     R8,APA             get @ print area            CFK*OCT03\n         MVC   OVLMSGNM,ESDNAME   copy csect name             CFK*OCT01\n         UNPK  OVLMSGAT(7),TXTHADR+TXTHDRLN(4)     add adr.   CFK*OCT01\n         TR    OVLMSGAT(6),TRTAB-240               make hex   CFK*OCT01\n         MVI   OVLMSGAT+6,C' '    clear gash byte             CFK*OCT01\n         CLM   R5,B'0001',TXTHLEN+TXTHDRLN  full overlap ?    CFK*OCT01\n         BNH   Z30A               no - carry on               CFK*OCT01\n         IC    R5,TXTHLEN+TXTHDRLN  else get next length      CFK*OCT01\nZ30A     DS    0H                                             CFK*OCT01\n         MH    R5,=H'10'          get length into single byte CFK*OCT01\n         CVD   R5,TMXT            make length PD              CFK*OCT01\n         MVC   OVLMSGL-1(3),=X'402120' copy EDit mask         CFK*OCT01\n         ED    OVLMSGL-1(3),TMXT+6  make length printable     CFK*OCT01\n         MVC   0(OVLMSGLN,R8),OVLMSG   copy message           CFK*OCT01\n         L     R1,APA             get @ print area            CFK*DEC03\n         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03\n         BASR  R14,R15            call PRINTA                 CFK*DEC03\n         SR    R8,R8              clear register\n         IC    R8,TXTHLEN+TXTHDRLN get next cards TXT length  CFK*MAY01\n         L     R5,TCC2            get next cards TXT address\n         S     R5,TCC1            sub this cards TXT address\n         SR    R2,R2              clear register              CFK*APR01\n         IC    R2,TXTHLEN         get this cards TXT length   CFK*MAY01\n         SR    R2,R5              sub difference in TXT address K*APR01\n         CR    R2,R8              more than next cards TXT len? K*APR01\n         BL    EROL               branch if yes               CFK*APR01\n* the next cards TXT is in the middle of this cards TXT\n         STC   R2,TXTHLEN+TXTHDRLN extend next cards TXT      CFK*MAY01\nEROL     DS    0H                                             CFK*APR01\n         STC   R5,TXTHLEN         shorten this cards TXT      CFK*MAY01\nPTXTO    DS    0H                                             CFK*MAY01\n         LA    R3,TXTHDRLN(R3)    get @ next card header      CFK*MAY01\n         BCT   R9,PTXT            br if any more cards to process\nECR      DS    0H                                             CFK*MAY01\n         LA    R11,ESDENTLN(R11)  point at next section desc  CFK*OCT01\n         BCT   R10,Z20A           br if any more sections     CFK*MAY01\n         L     R15,=A(RLDSORT)    get @ RLDSORT               CFK*MAY03\n         BASR  R14,R15            call RLDSORT                CFK*MAY03\nZ90Z     DS    0H                 common exit point           CFK*DEC03\n         LEAVE ,                  exit                        CFK*SEP03\n         DC    C'IMM='\n* constants\n         LTORG                                                CFK*MAY03\nAPA      DC    A(PA)              @ print area in PASS1       CFK*MAY03\nONEXY    DC    F'1'               constant\nXPRT     DC    A(PRINTA)          @ PRINTA csect              CFK*MAY03\nTRTAB    DC    C'0123456789ABCDEF' hexadecimal characters     CFK*JUN99\nSPACES   DC    CL8' '             spaces                      CFK*JUN99\nALCF     DC    A(LCF)             @ LCF in PASS1 csect\n* variables\nENDMSG   DS    0C                 message for END card        CFK*JUN99\n         DC    C' END '           constant text               CFK*JUN99\n         DC    C' LENGTH='        constant                    CFK*JUN99\nENDMLEN  DC    CL6' '             possible csect length       CFK*JUN99\n         DC    C' ENTRY='                                     CFK*JUN99\nENDMENTR DC    CL8' '             possible entry point name or address\nENDMSGL1 EQU   *-ENDMSG           length of fixed details     CFK*JUN99\nENDMT1   DC    C' TR1='                                       CFK*JUN99\nENDMT1NM DC    CL10' '            1st translator              CFK*JUN99\n         DC    C' v'                                          CFK*JUN99\nENDMT1V  DC    C'??'              1st version                 CFK*JUN99\n         DC    C'm'                                           CFK*JUN99\nENDMT1M  DC    C'??'              1st mod level               CFK*JUN99\n         DC    C' '                                           CFK*JUN99\nENDMT1YR DC    C'  '              1st year                    CFK*JUN99\n         DC    C'.'                                           CFK*JUN99\nENDMT1DT DC    C'   '             1st date (day of year)      CFK*JUN99\nENDMT1L  EQU   *-ENDMT1           length of 1st translator details UN99\nENDMT2   DC    C' TR2='                                       CFK*JUN99\nENDMT2NM DC    CL10' '            2nd translator              CFK*JUN99\n         DC    C' v'                                          CFK*JUN99\nENDMT2V  DC    C'??'              2nd version                 CFK*JUN99\n         DC    C'm'                                           CFK*JUN99\nENDMT2M  DC    C'??'              2nd mod level               CFK*JUN99\n         DC    C' '                                           CFK*JUN99\nENDMT2YR DC    C'  '              2nd year                    CFK*JUN99\n         DC    C'.'                                           CFK*JUN99\nENDMT2DT DC    C'   '             1 date (day of year)        CFK*JUN99\nENDMT2L  EQU   *-ENDMT2           length of 2nd translator details UN99\nOVLMSG   DC    C'** In '          message header              CFK*OCT01\nOVLMSGNM DS    CL8                name of section             CFK*OCT01\n         DC    C' TEXT CARDS OVERLAY AT '                     CFK*OCT01\nOVLMSGAT DS    CL6                address of overlap          CFK*OCT01\n         DC    C' FOR '                                       CFK*OCT01\nOVLMSGL  DS    CL2                length of overlap           CFK*OCT01\n         DC    C' BYTES'                                      CFK*OCT01\nOVLMSGLN EQU   *-OVLMSG           total length of message     CFK*OCT01\nTCC1     DC    F'0'               current cards TXT address\nTCC2     DC    F'0'               next cards TXT address\nTMXT     DS    2F                 work area\nEXCK     DC    X'00'              flag set if cards swapped in sort\nEXCDAT   DS    0XL4               copy of ENDCLFLG and ENDCLEN FK*DEC03\nEXCFLG   DS    X                  flag, x'00' in len present  CFK*DEC03\nEXCLEN   DS    XL3                section length from card    CFK*DEC03\nENDA     DS    3CL1               entry, entry adr. on END card\nENDS     DS    2CL1               ESD ID on END card\nENDMAXLN DC    F'0'               max length in csect         CFK*DEC03\nENDMAXL3 EQU   ENDMAXLN+1,3       max length (3 bytes)        CFK*DEC03\nSAVEAREA DS    18F                save area                   CFK*MAY03\n         YREGS                                                CFK*NOV00\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TXTHDR": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x01\\x14\\x8f\\x01\\x01\\x14\\x8f\\x12C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe4\\xf7\\xf6\\xf5\\xf1\\xf3\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-28T00:00:00", "modifydate": "2001-05-28T12:43:53", "lines": 12, "newlines": 12, "modlines": 0, "user": "U765139"}, "text": "         MACRO                                                          TXTHDR\n         TXTHDR                                                         TXTHDR\n*********************************************************************** TXTHDR\n*                                                                     * TXTHDR\n*  DSECT to map a txt card header                                     * TXTHDR\n*                                                                     * TXTHDR\n*********************************************************************** TXTHDR\nTXTHDR   DSECT                                                          TXTHDR\nTXTHADR  DS    XL3             24 bit address of first byte of text     TXTHDR\nTXTHLEN  DS    X               Number of bytes of text data             TXTHDR\nTXTHDRLN EQU   *-TXTHDR       Length of text card.                      TXTHDR\n         MEND                                                           TXTHDR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USING": {"ttr": 14345, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USING    TITLE 'USING '\n***********************************************************************\n*                                                                     *\n*        Keep track of what USINGs are active at any time             *\n*                                                                     *\n*  Called by PASS4, ADDR, SPPR and RR                                 *\n*                                                                     *\n*  Input addressed by R1:                                             *\n*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve        *\n*    +2  1 byte address part of instruction                           *\n*    +3  1 byte address part of instruction                           *\n*    +4  3 byte current loc (?) - if insert                           *\n*    +7  1 byte instruction format from AXN table                     *\n*                                                                     *\n*  Output addressed by R1:                                            *\n*    +0  1 byte from IC                                               *\n*    +1  3 bytes from IC (loc of using?)                              *\n*                                                                     *\n*  History:                                                           *\n*    Use register equates                                CFK Dec 2000 *\n*    Use standard linkage conventions                    CFK Sep 2003 *\n*                                                                     *\n***********************************************************************\nUSING    CSECT\n         ENTER ,                  entry logic                 CFK*SEP03\n         L     R3,0(R1)           get input                   CFK*SEP03\n         SLL   R3,16              ) mask out\n         SRL   R3,28              ) reg no.\n         SLL   R3,3               mul by 8\n         A     R3,AUS             calc table loc\n         C     R3,AUS             IS REGISTER ZERO ?\n         BE    RETR2              yes - can't be a base reg\n         TM    0(R1),X'03'        NO - what sort of call ?    CFK*SEP03\n         BZ    DROP               drop call\n         BO    RETR               retrieve\n         MVC   1(4,R3),4(R1)      STORE IC IN TABLE           CFK*SEP03\n         MVI   0(R3),X'01'        flag this entry in use\n         B     RETR               and exit\nDROP     MVC   0(8,R3),DUZ        DROP REGISTER by clearing entry\nRETR     MVC   1(3,R1),1(R3)      pass back location of using CFK*SEP03\n         MVC   0(1,R1),4(R3)      pass back inst format       CFK*SEP03\nRETR3    DS    0H                                             CFK*SEP03\n         LEAVE                    RETURN                      CFK*SEP03\nRETR2    MVC   0(4,R1),DUZ        REGISTER IS ZERO            CFK*SEP03\n         B     RETR3              go to return\n         DC    C'IMM='\nDUZ      DC    D'0'               constant zero\nAUS      DC    A(USTB)\nUSTB     DC    16D'0'             table of usings\n* each entry is as follows\n*   1 byte flag, x'01' if using active for this register, else x'00'\n*   3 bytes instruction counter+2 when using set up\n*   1 byte instruction format from AXN table\n*   3 bytes padding.\nSAVEAREA DS    18F                                            CFK*SEP03\n         YREGS ,                  register equates            CFK*DEC00\n         END\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT445/FILE445.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT445", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}