{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011630000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE272.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE272.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x05'", "DS1TRBAL": "b'\\x83\\xc0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xeb\\x00\\r\\x01\\xec\\x00\\x01\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "This Data Set contains a modification to VTAM (V2R1) and sample code\nto show how to put variable data (such as the date, time, System ID,\nand Terminal Name) into the VTAM LOGO.\n\nMember #Z00394 is an SMP Usermod against VTAM Module ISTINCU6.\nThis modification provides the linkage to the USSEDIT Routine\nthat is coded as part of the VTAM USSTAB.\n\nUSSEDIT is a copy module containing code that will build the\nvariable message information into the VTAM \"logo\".\n\nUSS32740 is a sample 3274 USSTAB which copies in USSEDIT.\n\nPlease direct any questions, problems, suggestions, etc. to:\n\n     Keith E. Moe\n     Amdahl Corporation\n     Computing and Communications Services\n     M/S 201\n     1250 E. Arques Ave.\n     P. O. Box 3470\n     Sunnyvale, California  94088-3470\n     (408) 746-6386\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#Z00394": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD (#Z00394) .\n++ VER   (Z038)     FMID (HVT2102)   PRE (UZ57224)\n                    SUP (#Z00162 #Z00165,#Z00229,#Z00258)\n          /*\n               THIS MODIFICATION CHANGES THE ACF/VTAM UNFORMATTED\n               SYSTEM SERVICES MESSAGE BUILDER TO TAKE AN EXIT\n               FOR THE PURPOSES OF MODIFYING THE TEXT OF MESSAGES.\n\n               THE LOGIC IS THAT EACH MESSAGE FOR WHICH\n               AN EXIT IS DESIRED IS ALIGNED ON A FULL\n               WORD BOUNDARY AND IS PRECEDED BY A FULL\n               WORD THAT CONTAINS X'FF' IN THE HIGH\n               ORDER BYTE AND THE ADDRESS OF THE EXIT\n               ROUTINE IN THE THREE LOW ORDER BYTES.\n               IF EITHER THAT X'FF' IS NOT PRESENT OR\n               THE ADDRESS IS ZERO, THE EXIT IS NOT TAKEN.\n\n               LINKAGE IS DONE WITH A BALR R14,R15.\n               R13 POINTS TO A VALID (NEWLY CREATED) SAVE AREA.\n               THE CODE IS ONLY EXPECTED TO BE REUSABLE\n               BY VTAM.\n\n                                                               */  .\n++ ZAP  (ISTINCU6)  DISTLIB(AOS26) .\n        EXPAND ISTINCU6(144)\n        NAME  ISTINCU6\n*       BASE REGS ARE R11 (X'1C') AND R12 (X'101B').\n*       EXPAND AREA WILL START AT X'19D0'\n        VER 07C4  5090A018          ST    @09,INPTR1(,R10)\n        VER 07C8  1FFF\n        VER 07CA  47F0,B820         B     @RC00878\n*\n        VER 19D0  00000000\n        VER 1A58  00000000\n*\n        REP 07C4  47F0C9B5    BR TO EXPAND AREA\n*\n        REP 19D0  5090A018    REFRESH OVERLAID INSTRUCTION\n        REP 19D4  18F3        PASS BUFFER ADDRESS\n        REP 19D6  5FF0C9ED    SUBTRACT 4 FROM MESSAGE ADDRESS\n        REP 19DA  95FFF000    CHECK FOR X'FF' FLAG\n        REP 19DE  4770B7AC    RETURN TO MAINLINE IF NOT\n        REP 19E2  BFF7F001    LOAD(ICM) ADDRESS OF THE LOGO RTN\n        REP 19E6  4780B7AC    RETURN TO MAINLINE IF ADDRESS ZERO\n        REP 19EA  50D0C9F1    SAVE OFF REG 13\n        REP 19EE  5000C9F5    SAVE OFF REG 0\n        REP 19F2  5800A014    WHERE EXIT EXPECTS TERMINAL ADDRESS\n        REP 19F6  41D0C9F9    PROVIDE NEW SAVE AREA\n        REP 19FA  05EF        BALR TO LOGO ROUTINE\n        REP 19FC  58D0C9F1    RESTORE REG 13\n        REP 1A00  5800C9F5    RESTORE REG 0\n        REP 1A04  47F0B7AC    RETURN TO MAINLINE\n        REP 1A08  00000004    CONSTANT OF 4 FOR SUBTRACT\n        REP 1A0C  00000000    REG 13 SAVED HERE\n        REP 1A10  00000000    REG 0 SAVED HERE\n        REP 1A14  00000000    BEGINNING OF NEW SAVE AREA\n        REP 1A58  00000000    END OF NEW SAVE AREA\n*\n         IDRDATA #Z00394\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USSEDIT": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USSEDIT  EQU   *\n***********************************************************************\n*                                                                     *\n*        THIS SECTION IS THE FULL SCREEN MESSAGE EDITING ROUTINE.     *\n*                                                                     *\n*        EACH MESSAGE HAS A SEPARATE ENTRY POINT.  EACH OF            *\n*        THESE ENTRY POINTS ESTABLISH THE COMMON BASE, SET            *\n*        UP A POINTER TO THE MODIFIED MESSAGE TEXT AREA               *\n*        AND THEN BRANCH TO THE COMMON MESSAGE EDITING CODE.          *\n*                                                                     *\n*        THE COMMON MESSAGE EDITING CODE WILL CHECK FOR THE           *\n*        \"FIRST TIME\" THROUGH THIS CODE.  IF SO, THE \"STATIC\"         *\n*        AREAS OF THE VARIABLE MESSAGE LINE (CPU ID, SMF SYSTEM       *\n*        ID, ETC.) ARE FILLED IN IN THE MODEL MESSAGE LINE.           *\n*                                                                     *\n*        THE MODEL MESSAGE LINE IS MOVED INTO THE FULL SCREEN         *\n*        MESSAGE AT THE ADDRESS SET UP BY THE ENTRY TO THE            *\n*        MESSAGE EXIT ROUTINE.  THE TERMINAL NAME, DATE, AND TIME     *\n*        ARE MOVED INTO THE MESSAGE AND CONTROL IS RETURNED           *\n*        TO THE CALLER (ISTINCU6).                                    *\n*                                                                     *\n*        BY VIRTUE OF THIS ROUTINE MODIFYING MESSAGE TEXT,            *\n*        IT IS NOT RE-ENTRANT.  IT IS, HOWEVER, REUSABLE TO           *\n*        THE EXTENT THAT THE ONLY PERMANENT MODIFICATIONS             *\n*        TO ITSELF THAT ARE DEPENDED UPON ARE THE SETTING OF          *\n*        THE CPU ID, SMF ID, ETC. INTO THE MODEL MESSAGE.             *\n*                                                                     *\n*        SINCE THE ACTUAL MESSAGE TEXT OF THE FULL SCREEN             *\n*        MESSAGE IS MODIFIED TO CONTAIN THE TERMINAL ADDRESS          *\n*        AND SINCE THERE IS NO VTAM SERIALIZATION (THAT I AM          *\n*        AWARE OF) BETWEEN THE \"CALL\" TO THIS ROUTINE AND             *\n*        THE VTAM SEND THAT WILL PLACE IT INTO A VTAM BUFFER,         *\n*        IT IS CONCEIVABLE THAT THE WRONG TERMINAL ADDRESS            *\n*        COULD BE DISPLAYED ON A TERMINAL.  THIS SHOULD OCCUR         *\n*        ONLY IF A VTAM BUFFER SHORTAGE CAUSES THE USSTAB             *\n*        PROCESSOR TO WAIT FOR A BUFFER.                              *\n*                                                                     *\n*        WHEN ENTERED, REGISTER 15 IS THE ADDRESS OF THE              *\n*        PARTICULAR MESSAGE EXIT ENTRY POINT, REGISTER 14             *\n*        IS THE RETURN ADDRESS TO ISTINCU6,  REGISTER 13              *\n*        POINTS TO A STANDARD SAVE AREA, AND REGISTER 0 (ZERO)        *\n*        CONTAINS THE ADDRESS OF THE RDTE FOR THE TERMINAL.           *\n*                                                                     *\n***********************************************************************\n         EJECT\nMSGXEDIT DS    0D\n         USING MSGXEDIT,R12\n*\n         USING *,R15               TEMPORARY BASE\nLOGOEDIT STM   R14,R12,12(R13)     SAVE THE REGISTERS\n         L     R12,=A(MSGXEDIT)    LOAD THE COMMON BASE\n         DROP  R15                 DUMP THE TEMPORARY BASE\n         L     R11,=A(LOGOLINE)    POINT AT MESSAGE AREA\n         B     MSGXCOMN            GO TO COMMON PROCESSING\n*\n         USING *,R15\nMSG2EDIT STM   R14,R12,12(R13)\n         L     R12,=A(MSGXEDIT)\n         DROP  R15\n         L     R11,=A(MSG2LINE)\n         B     MSGXCOMN\n*\n         USING *,R15\nMSG4EDIT STM   R14,R12,12(R13)\n         L     R12,=A(MSGXEDIT)\n         DROP  R15\n         L     R11,=A(MSG4LINE)\n         B     MSGXCOMN\n*\n         USING *,R15\nMSG5EDIT STM   R14,R12,12(R13)\n         L     R12,=A(MSGXEDIT)\n         DROP  R15\n         L     R11,=A(MSG5LINE)\n         B     MSGXCOMN\n*\n         USING *,R15\nMSG7EDIT STM   R14,R12,12(R13)\n         L     R12,=A(MSGXEDIT)\n         DROP  R15\n         L     R11,=A(MSG7LINE)\n         B     MSGXCOMN\n*\n         EJECT\nMSGXCOMN DS    0H\n         LA    R10,MODELINE        LOAD THE ADDRESS OF THE MODEL\n         USING MODELINE,R10\n*\n         CLI   MODLSYS,C'*'        CHECK IF STANDARD PART DONE\n         BNE   MSGXSYSD            BRANCH IF SO\n         L     R15,16              LOAD THE CVT ADDRESS\n         L     R14,CVTSMCA-CVT(,R15)    LOAD THE SMCA ADDRESS\n         MVC   MODLSYS,SMCASID-SMCABASE(R14) MOVE THE SYSTEM ID\n*\n         SL    R15,=F'4'           BACK UP TO RELEASE LEVEL\n         MVC   MODLREL(1),1(R15)   MOVE FIRST HALF\n         MVC   MODLREL+2(2),2(R15) MOVE SECOND HALF\n*\n         STIDP MSGXDBLE            GET THE CPU ID\n*\n         ED    MODLCPU-1(7),MSGXDBLE+1 FILL IN SERIAL NUMBER\n         OI    MODLCPU,X'F0'       SET IN THE LEADING ZERO\n*\n         MVC   MODLMODL,=C'VM  '   SET FOR VM\n         CLI   MSGXDBLE,255        CHECK FOR VM\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         CLC   MSGXDBLE+4(2),=X'0580'  Q: IS MODEL TYPE = 580\n         BE    MSG580                  A: YES, GO CHECK SERIAL NO\n*\n         CLC   MSGXDBLE+4(2),=X'0470'  Q: IS MODEL TYPE=470\n         BE    MSG470                  A: YES, GO CHECK SERIAL NO\n         B     MODLUNKN            MODEL UNKNOWN, LEAVE QUESTION MARKS\n*\nMSG580   EQU   *\n         NI    MSGXDBLE,X'0F'      SET LOW ORDER NIBBLE TO ZERO\n*\n         MVC   MODLMODL,=CL4'5880' SET FOR A 5880\n         CLI   MSGXDBLE,4          CHECK FOR 5880\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'5870' SET FOR A 5870\n         CLI   MSGXDBLE,3          CHECK FOR 5870\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'5860' SET FOR A 5860\n         CLI   MSGXDBLE,2          CHECK FOR 5860\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'580 ' EXACT TYPE OF 580 UNKNOWN\n         B     MSGXSYSD            SET TO 580\n*\nMSG470   EQU   *\n*\n         MVC   MODLMODL,=CL4'V/8 ' SET FOR A V/8\n         CLI   MSGXDBLE,8          CHECK FOR C/8\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'V/7 ' SET FOR A V/7\n         CLI   MSGXDBLE,7          CHECK FOR A V/7\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'V/6 ' SET FOR A V/6\n         CLI   MSGXDBLE,6          CHECK FOR A V/6\n         BE    MSGXSYSD            BRANCH IF SO\n         CLI   MSGXDBLE,0          CHECK FOR A V/6 (OLD STYLE)\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4'V/5 ' SET FOR A V/5\n         CLI   MSGXDBLE,5          CHECK FOR A V/5\n         BE    MSGXSYSD            BRANCH IF SO\n*\n         MVC   MODLMODL,=CL4' 470' EXACT 470 MODEL NOT DETERMINED\n         B     MSGXSYSD            SET DEFAULT TO 470\n*\nMODLUNKN MVC   MODLMODL,=CL4'????' MODEL UNKNOWN, SET TO QUESTION MARKS\n*\n         EJECT\nMSGXSYSD MVC   0(80,R11),MODELINE  MOVE THE PRESET PART\n         DROP  R10                 DROP THE ACTUAL PART\n         USING MODELINE,R11        FAKE IT FOR THE REST\n*\n         LR    R15,R0              MOVE THE RDTE ADDRESS\n         MVC   MODLTERM,X'00'(R15) MOVE THE TERMINAL NAME\n*\n         TIME  DEC                 GET THE DATE AND TIME\n         STM   R0,R1,MSGXDBLE\n         ED    MODLDATE-1(7),MSGXDBLE+5\n         ED    MODLTIME-1(9),MSGXDBLE\n         OI    MODLTIME,X'F0'      PROVIDE FOR A LEADING ZERO\n*\n         LM    R14,R12,12(R13)     RESTORE THE REGISTERS\n         BR    R14\n*\n         EJECT\nMSGXDBLE DS    D                   DOUBLE WORD WORK AREA\n*\nLITERALS LTORG ,\n*\nMODELINE DS    0CL80\n         DC    C'TERMINAL - '\nMODLTERM DC    C'UNKNOWN '         TERMINAL NAME\n         DC    C'  '\n         DC    C'SYSTEM - '\nMODLSYS  DC    C'****'             SMF SYSTEM ID\n         DC    C'  '\n         DC    C'CPU - '\nMODLMODL DC    C'????'             CPU MODEL NUMBER\n         DC    C' '\nMODLCPU  DC    X'212020202020'     CPU SERIAL NUMBER\n         DC    C'  '\n         DC    C'MVS '\nMODLREL  DC    C'X.XX'             MVS RELEASE LEVEL\n         DC    C'  '\nMODLDATE DC    X'20204B202020'     JULIAN DATE\n         DC    C' '\nMODLTIME DC    X'21207A20207A2020' TIME\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USS32740": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "327X     TITLE 'UNFORMATTED SYSTEM SERVICES FOR 3270S'\n***********************************************************************\n*                                                                     *\n*        UNFORMATTED SYSTEM SERVICES TABLE FOR 3270S                  *\n*        ACF/VTAM VERSION 2                                           *\n*                                                                     *\n*        THIS MODULE HAS THREE SECTIONS.  THE FIRST IS THE            *\n*        VTAM UNFORMATTED SYSTEM SERVICES TABLE (USSTAB)              *\n*        FOR 327X DEVICES.  THE SECOND IS THE FULL SCREEN             *\n*        MESSAGES WITH EXIT ADDRESSES.  THE THIRD IS THE              *\n*        MESSAGE TEXT ALTERATION EXIT CODE.                           *\n*                                                                     *\n*        NOTE: THE THIRD SECTION, MESSAGE TEXT ALTERATION             *\n*        EXIT CODE, HAS BEEN MOVED TO A SEPARATE VTAMLST              *\n*        MEMBER: USSEDIT.  IT IS THEREFORE NECESSARY TO               *\n*        INCLUDE CCCNET.VTAMLST IN THE SYSLIB DD STATMENT             *\n*        WHEN ASSEMBLING USSTABLES.                                   *\n*                                                                     *\n*        DISCLAIMER:                                                  *\n*                                                                     *\n*        AMDAHL CORPORATION ASSUMES NO WARRANTY, EXPRESS OR           *\n*        IMPLIED, AS TO THE FITNESS OR MERCHANTABILITY OF THIS        *\n*        CODE FOR ANY PARTICULAR PURPOSE, OR TO ITS FREEDOM FROM      *\n*        INFRINGEMENT ON ANY KNOWN OR UNKNOWN PATENT, SOFTWARE        *\n*        USAGE LICENSE, OR TRADE SECRET, AND EXPLICITLY DENIES THE    *\n*        ASSUMPTION OF ANY CONTINGENT LIABILITY WHATSOEVER.  THE      *\n*        USE OF THIS CODE IS STRICTLY AT THE RISK OF THE USER.        *\n*        VIEWS EXPRESSED IN THE CODING AND IN THE COMMENTS ARE        *\n*        STRICTLY THOSE OF THE AUTHOR, AND DO NOT REFLECT IN ANY      *\n*        MANNER THE POSITION OF AMDAHL CORPORATION.                   *\n*                                                                     *\n*        AUTHOR:                                                      *\n*                                                                     *\n*        KEITH E. MOE                                                 *\n*        AMDAHL CORPORATION                                           *\n*        CORPORATE COMPUTER SERVICES                                  *\n*        TECHNICAL SUPPORT GROUP                                      *\n*        SYSTEM SUPPORT SERVICES                                      *\n*        MAIL STOP 201                                                *\n*        1250 E. ARQUES AVENUE                                        *\n*        POST OFFICE BOX 470                                          *\n*        SUNNYVALE, CALIFORNIA  94086                                 *\n*        (408) 746-6386                                               *\n*                                                                     *\n***********************************************************************\n*\n         TITLE 'UNFORMATTED SYSTEM SERVICES TABLE'\n***********************************************************************\n*                                                                     *\n*        THIS SECTION DEFINES THE VARIOUS COMMAND SEQUENCES           *\n*        THAT VTAM WILL RECOGNIZE AS BEING VALID LOGON SEQUENCES.     *\n*        IT ALSO DEFINES THE MESSAGE TEXT FOR CERTAIN MESSAGES        *\n*        AND MESSAGE BUFFER POINTERS FOR FULL SCREEN MESSAGES.        *\n*                                                                     *\n***********************************************************************\n*\nUSS32740 USSTAB\n*\nALOGON   USSCMD  CMD=ALOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ATSO\n         USSPARM PARM=P1,REP=DATA\n*\nAL       USSCMD  CMD=AL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ATSO\n         USSPARM PARM=P1,REP=DATA\n*\nBLOGON   USSCMD  CMD=BLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=BTSO\n         USSPARM PARM=P1,REP=DATA\n*\nBL       USSCMD  CMD=BL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=BTSO\n         USSPARM PARM=P1,REP=DATA\n*\nCLOGON   USSCMD  CMD=CLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=CTSO\n         USSPARM PARM=P1,REP=DATA\n*\nCL       USSCMD  CMD=CL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=CTSO\n         USSPARM PARM=P1,REP=DATA\n*\nDLOGON   USSCMD  CMD=DLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DTSO\n         USSPARM PARM=P1,REP=DATA\n*\nDL       USSCMD  CMD=DL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DTSO\n         USSPARM PARM=P1,REP=DATA\n*\nELOGON   USSCMD  CMD=ELOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ETSO\n         USSPARM PARM=P1,REP=DATA\n*\nEL       USSCMD  CMD=EL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ETSO\n         USSPARM PARM=P1,REP=DATA\n*\nFLOGON   USSCMD  CMD=FLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=FTSO\n         USSPARM PARM=P1,REP=DATA\n*\nFL       USSCMD  CMD=FL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=FTSO\n         USSPARM PARM=P1,REP=DATA\n*\nGLOGON   USSCMD  CMD=GLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=GTSO\n         USSPARM PARM=P1,REP=DATA\n*\nGL       USSCMD  CMD=GL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=GTSO\n         USSPARM PARM=P1,REP=DATA\n*\nJLOGON   USSCMD  CMD=JLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=JTSO\n         USSPARM PARM=P1,REP=DATA\n*\nJL       USSCMD  CMD=JL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=JTSO\n         USSPARM PARM=P1,REP=DATA\n*\nTLOGON   USSCMD  CMD=TLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=TTSO\n         USSPARM PARM=P1,REP=DATA\n*\nTL       USSCMD  CMD=TL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=TTSO\n         USSPARM PARM=P1,REP=DATA\n*\nWLOGON   USSCMD  CMD=WLOGON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=WTSO\n         USSPARM PARM=P1,REP=DATA\n*\nWL       USSCMD  CMD=WL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=WTSO\n         USSPARM PARM=P1,REP=DATA\n*\nLOGON    USSCMD  CMD=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=TSO\n         USSPARM PARM=P1,REP=DATA\n*\nL        USSCMD  CMD=L,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=TSO\n         USSPARM PARM=P1,REP=DATA\n*\nSIGNON   USSCMD CMD=SIGNON,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=TSO\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nIPSTST   USSCMD CMD=IPSTST,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=TSO\n         USSPARM PARM=LOGMODE,DEFAULT=SHARPTST\n         USSPARM PARM=P1,REP=DATA,DEFAULT=>>\n*\nNPA      USSCMD  CMD=NPA,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=NPA\n         USSPARM PARM=P1,REP=DATA\n*\nAMDAC    USSCMD  CMD=AMDAC,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=AMDAC\n         USSPARM PARM=P1,REP=DATA\n*\nTERMDR   USSCMD  CMD=TERMDR,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=TERMDR\n*\nAMDACT   USSCMD  CMD=AMDACT,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=AMDACT\n         USSPARM PARM=P1,REP=DATA\n*\nLONSS1   USSCMD  CMD=LONSS1,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DNAYLOR1\n         USSPARM PARM=P1,REP=DATA\n*\nLONSS2   USSCMD  CMD=LONSS2,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DNAYLOR2\n         USSPARM PARM=P1,REP=DATA\n*\nIMS      USSCMD  CMD=IMS,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=IMS\n*\nIMSTEST1 USSCMD  CMD=IMSTEST1,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=IMSTEST1\n*\nIMSTEST2 USSCMD  CMD=IMSTEST2,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=IMSTEST2\n*\nIMSTEST3 USSCMD  CMD=IMSTEST3,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=IMSTEST3\n*\nEMAIL    USSCMD  CMD=EMAIL,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=CICSGG47\n*\nECHO     USSCMD  CMD=ECHO,REP=IBMTEST,FORMAT=BAL\n         USSPARM PARM=P1,DEFAULT=10\n         USSPARM PARM=P2,DEFAULT=ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\n*\nECHOPGM1 USSCMD  CMD=ECHOPGM1,REP=LOGON,FORMAT=PL1\n         USSPARM PARM=APPLID,DEFAULT=ECHOPGM1\n         USSPARM PARM=LOGMODE\n         USSPARM PARM=DATA\n*\nECHOPGM2 USSCMD  CMD=ECHOPGM2,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ECHOPGM2\n*\nECHOPGM3 USSCMD  CMD=ECHOPGM3,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ECHOPGM3\n*\nNETOP    USSCMD  CMD=NETOP,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=NETOP\n         USSPARM PARM=LOGMODE,DEFAULT=S3270\n*\nNCCF     USSCMD  CMD=NCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=NCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nANCCF    USSCMD  CMD=ANCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=ANCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nBNCCF    USSCMD  CMD=BNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=BNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nDNCCF    USSCMD  CMD=DNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nFNCCF    USSCMD  CMD=FNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=FNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nGNCCF    USSCMD  CMD=GNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=GNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nJNCCF    USSCMD  CMD=JNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=JNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nWNCCF    USSCMD  CMD=WNCCF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=WNCCF\n         USSPARM PARM=LOGMODE,DEFAULT=DSILGMOD\n*\nVMRESET  USSCMD  CMD=VMRESET,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=VMRESET\n*\nASUN     USSCMD  CMD=ASUN,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=AJES78XC\n*\nBSUN     USSCMD  CMD=BSUN,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=BJES78XC\n*\nDSUN     USSCMD  CMD=DSUN,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=DJES78XC\n*\nFSUN     USSCMD  CMD=FSUN,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=FJES78XC\n*\nGSUN     USSCMD  CMD=GSUN,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=GJES78XC\n*\nVCNAC    USSCMD CMD=VCNAC,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=VCNAC\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nVSI      USSCMD CMD=VSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=VSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nAVSI     USSCMD CMD=AVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=AVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nBVSI     USSCMD CMD=BVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=BVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nCVSI     USSCMD CMD=CVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=CVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nDVSI     USSCMD CMD=DVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=DVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nEVSI     USSCMD CMD=EVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=EVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nFVSI     USSCMD CMD=FVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=FVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nGVSI     USSCMD CMD=GVSI,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=GVSI\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nAPLU     USSCMD CMD=APLU,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=APCFPLU\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nBPLU     USSCMD CMD=BPLU,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=BPCFPLU\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nFPLU     USSCMD CMD=FPLU,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=FPCFPLU\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nJPLU     USSCMD CMD=JPLU,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=JPCFPLU\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nDOMEGA   USSCMD CMD=DOMEGA,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=DOMEGA\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nBOMEGA   USSCMD CMD=BOMEGA,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,REP=APPLID,DEFAULT=BOMEGA\n         USSPARM PARM=L,REP=LOGMODE\n         USSPARM PARM=P1,REP=DATA\n*\nVMEXIT   USSCMD  CMD=VMEXIT,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=VMRESET\n*\nVM       USSCMD  CMD=VM,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=VMRESET\n*\nSPF      USSCMD  CMD=SPF,REP=LOGON,FORMAT=BAL\n         USSPARM PARM=APPLID,DEFAULT=VAM\n*\nDISC     USSCMD  CMD=DISC,REP=LOGOFF,FORMAT=BAL\n         USSPARM PARM=TYPE,DEFAULT=COND\n*\n         EJECT\nMESSAGES USSMSG  MSG=1,BUFFER=LOGO      NORMAL MESSAGE\n         USSMSG  MSG=2,BUFFER=MSG2      COMMAND UNRECOGNIZED\n         USSMSG  MSG=3,TEXT='% PARAMETER UNRECOGNIZED'\n         USSMSG  MSG=4,BUFFER=MSG4      APPLICATION IS NOT ACTIVE\n         USSMSG  MSG=5,BUFFER=MSG5      UNSUPPORTED FUNCTION\n         USSMSG  MSG=6,TEXT='SEQUENCE ERROR'\n         USSMSG  MSG=7,BUFFER=MSG7      APPLICATION NOT ACCEPTING LOGON\n         USSMSG  MSG=8,TEXT='INSUFFICIENT STORAGE'\n         USSMSG  MSG=9,TEXT='MAGNETIC CARD DATA ERROR'\n         USSMSG  MSG=10,BUFFER=LOGO     NORMAL MESSAGE\n         USSMSG  MSG=12,TEXT='REQUIRED PRAMETER OMITTED'\n         USSMSG  MSG=13,TEXT='ECHO %'\n*\nEND      USSEND\n*\n         TITLE 'FULL SCREEN MESSAGE TEXT'\n***********************************************************************\n*                                                                     *\n*        THIS SECTION CONTAINS THE FULL SCREEN MESSAGE TEXT           *\n*        FOR EACH OF THE USSMSGS THAT POINT TO A BUFFER.              *\n*                                                                     *\n*        THE STANDARD VTAM MESSAGE BUFFER CONSISTS OF A               *\n*        HALFWORD LENGTH OF THE MESSAGE TEXT (NOT INCLUDING           *\n*        ITSELF), FOLLOWED BY THE MESSAGE TEXT.  THE TEXT             *\n*        MUST INCLUDE ALL NECESSARY CONTROL CHARACTERS,               *\n*        INCLUDING THE APPROPRIATE WRITE COMMAND AND WCC.             *\n*                                                                     *\n*        IN ORDER TO SUPPORT THE MODIFICATION OF THE TEXT             *\n*        OF ONE OR MORE FULL SCREEN MESSAGES,  EACH MESSAGE           *\n*        IS DOUBLE WORD ALIGNED (FULL WORD IS ALL THAT'S              *\n*        REALLY NECESSARY) AND IS PRECEEDED BY A FULL WORD.           *\n*        THIS FULL WORD CONTAINS AN X'FF' IN THE FIRST BYTE           *\n*        AND THE ADDRESS OF THE MESSAGE EXIT IN THE REMAINING         *\n*        THREE BYTES.  A MODIFICATION TO VTAM MODULE ISTINCU6         *\n*        IS NECESSARY IN ORDER FOR THIS ADDRESS TO BE RECOGNIZED.     *\n*        WITHOUT THE MODIFICATION TO VTAM, THE FULL SCREEN            *\n*        MESSAGE WILL BE DISPLAYED TOTALLY UNMODIFIED.                *\n*                                                                     *\n*        ANY DATA AREA WITHIN THE MESSAGE THAT IS NEEDED TO BE        *\n*        ALTERED SHOULD BE GIVEN A LABEL, SO THAT THE EXIT            *\n*        ROUTINE CAN ACCESS IT EASILY.                                *\n*                                                                     *\n*        THE USE OF COMMENTS TO DESCRIBE THE 3270 ORDERS IS           *\n*        NOT NECESSARY, BUT IS HIGHLY RECCOMMENDED.                   *\n*                                                                     *\n*        WARNING:  THE AVAILABLE INPUT AREA (UNPROTECTED FIELDS)      *\n*        MUST BE LESS THAN 255 BYTES.  ALLOWING THE USER TO ENTER     *\n*        MORE THAN 255 BYTES WILL CAUSE A VERY NASTY VTAM ABEND       *\n*        WHICH WILL BRING DOWN ALL OF VTAM, DUE TO STORAGE            *\n*        OVERLAYS.  THE LIMIT ON THIS INPUT IS DOCUMENTED,            *\n*        BUT IS EASILY OVERLOOKED.                                    *\n*                                                                     *\n*        THE BASE MESSAGE (MESSAGES 1 AND 10) WILL PERFORM AN         *\n*        ERASE WRITE AND DISPLAY A FULL SCREEN LOGO, WITH A           *\n*        THREE LINE INPUT AREA.  THE REMAINING MESSAGES               *\n*        (MESSAGES 2, 4, 5, AND 7) WILL DO AN NON-ERASE WRITE,        *\n*        BLANKING OUT THE INPUT AREA, AND WRITING ONLY THE            *\n*        MESSAGE TEXT AND VARIABLE DATA.  HITTING ENTER OR            *\n*        THE CLEAR KEY CAUSES THE FULL LOGO TO BE WRITTEN.            *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        NORMAL FULL SCREEN LOGO                                      *\n*                                                                     *\n***********************************************************************\n*\n         CNOP  4,8\n         DC    AL1(255),AL3(LOGOEDIT)\n*\nLOGO     DS    0D\n         DC    Y(LOGOLENG)\n*\nLOGOCMND DC    X'15'\n         DC    C'CORPORATE COMPUTER SERVICES'\n         DC    X'15'               NEW LINE\nLOGOLINE DC    80C'*'\n*\nLOGOLENG EQU   *-LOGOCMND          LENGTH OF LOGO\n***********************************************************************\n*                                                                     *\n*        COMMAND UNRECOGNIZED                                         *\n*                                                                     *\n***********************************************************************\n*\n         CNOP  4,8\n         DC    AL1(255),AL3(MSG2EDIT)\n*\nMSG2     DS    0D\n         DC    Y(MSG2LENG)\n*\nMSG2CMND DC    X'15'\n         DC    C'COMMAND  UNRECOGNIZED'\n         DC    X'15'\nMSG2LINE DC    80C'*'\n*\nMSG2LENG EQU   *-MSG2CMND          LENGTH OF MESSAGE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        APPLICATION IS NOT ACTIVE                                    *\n*                                                                     *\n***********************************************************************\n*\n         CNOP  4,8\n         DC    AL1(255),AL3(MSG4EDIT)\n*\nMSG4     DS    0D\n         DC    Y(MSG4LENG)\n*\nMSG4CMND DC    X'15'\n         DC    C'APPLICATION IS NOT ACTIVE'\n         DC    X'15'\nMSG4LINE DC    80C'*'\n*\nMSG4LENG EQU   *-MSG4CMND          LENGTH OF MESSAGE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UNSUPPORTED FUNCTION                                         *\n*                                                                     *\n*        THIS MESSAGE IS DISPLAYED WHEN ANY PF OR PA KEY IS           *\n*        DEPRESSED.  WE HOPE SOMEDAY TO REPLACE THIS WITH A           *\n*        FULL SCREEN HELP MESSAGE.                                    *\n*                                                                     *\n***********************************************************************\n*\n         CNOP  4,8\n         DC    AL1(255),AL3(MSG5EDIT)\n*\nMSG5     DS    0D\n         DC    Y(MSG5LENG)\n*\nMSG5CMND DC    X'15'\n         DC    C'UNSUPPORTED  FUNCTION'\n         DC    X'15'\nMSG5LINE DC    80C'*'\n*\nMSG5LENG EQU   *-MSG5CMND          LENGTH OF MESSAGE\n*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        APPLICATION NOT ACCEPTING LOGONS                             *\n*                                                                     *\n***********************************************************************\n*\n         CNOP  4,8\n         DC    AL1(255),AL3(MSG7EDIT)\n*\nMSG7     DS    0D\n         DC    Y(MSG7LENG)\n*\nMSG7CMND DC    X'15'\n         DC    C'APPLICATION  NOT  ACCEPTING  LOGONS'\n         DC    X'15'\nMSG7LINE DC    80C'*'\n*\nMSG7LENG EQU   *-MSG7CMND          LENGTH OF MESSAGE\n*\n         TITLE 'MESSAGE EDITTING ROUTINE'\n         COPY  USSEDIT\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         PRINT NOGEN\n*\n         CVT   DSECT=YES\n*\n         IEESMCA\n*\n         PRINT GEN\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT272/FILE272.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT272", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}