{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011422000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE178.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE178.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x0c'", "DS1TRBAL": "b'\"\\xaa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01?\\x00\\x08\\x01@\\x00\\x04\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00G\\x00\\x01\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 71, "newlines": 1, "modlines": 0, "user": "T75NAK1"}, "text": "THE CLIST PROVIDED IN THIS PDS WILL PROCESS AN IPCS DUMP TAKEN FROM AN\nIDMS 10.2 SYSTEM. THEY WILL PROVIDE A FORMATTED, AND IN SOME CASES, AN EGLISH\nTRANSALATION OF THE CONTROL BLOCKS. BELOW ARE SOME OF THE COMMANDS AND\nCONTROL BLOCKS WHICH CAN BE LOCATED, FORMATTED, AND DISPLAYED.\n\n      THE IDMS CONTROL BLOCKS ARE DIVIDED INTO TWO CATEGORIES:\n      IDMS-DC AND IDMS DATABASE CONTROL BLOCKS AND ARE LISTED\n      BELOW:\n\n     DC - DATA COMMUNICATION PORTION OF DUMP - DEFAULT IF NO\n          PARAMETER IS GIVEN ON THE EXEC STATEMENT\n      CCE      - CENTRAL CONTROL BLOCK ELEMENT\n      CSA      - COMMON SYSTEM AREA\n      DCE      - DISPATCH CONTROL ELEMENT\n      DCETCE   - DISPATCH CONTROL ELEMENT WITH ASSOCIATED TCE,\n                 RLE, AND RCE CHAINS DECODED.\n      ESE      - EXTERNAL SERVICE ELEMENT\n      ERE      - EXTERNAL REQUEST ELEMENT\n      ICE      - INTERVAL CONTROL ELEMENT\n      MAP      - REGION MAP ENTRIES\n      LTT      - LOGICAL TERMINAL TABLE - FORMAT ALL LTE'S.\n                 PTE'S, RCE/RLE CHAIN WITH SON TOBE ADD LATER\n      NLT      - NUCLEUS LOAD TABLE\n      RLEC     - RUN THE RLE-RCE CHAIN OFF OF THE CSA\n      SCA      - SUBTASK CONTROL AREA AND ASSOCIATED TCE\n      TCE      - CSECTACE TCE POINTED TO BY R9 IN THE CSECTACE\n                 WITH LTE, PTE, SON, RLE, & RCE\n      TRACE    - IDMS SYSTEM TRACE TABLE ENTRIES\n      VECTORS  - VECTOR TABLE OF ENTRY POINTS FOR IDMS MODULES\n\n     DB -  DATABASE CONTROL BLOCKS\n      BC53     - BUFFER CONTROL ELEMENT\n      CLT      - CENTRAL LOCKING TABKE INCLUDING:\n                 CLTE - CENTRAL LOCKING TABLE ELEMENTS\n                 SLT  - SYNONYM LOCKING TABLE HEADER\n                 SLTF - SYNONYM LOCKING TABLE FRAGMENTS\n                 LIDH - LOCK-UNIT TABLE HEADER\n                 LIDF - LOCK-UNIT TABLE FRAGMENTS\n                 LIDE - LOCK-UNIT TABLE ELEMENTS\n                 RLTH - RUN-UNIT LOCK TABLE HEADER\n                 RLTE - RUN-UNIT LOCK TABLE ELEMETS\n                 RLTF - RUN-UNIT LOCK TABLE FRAGMENTS\n      DM58     - DMCL TABLES HEADER\n      FC59     - DMCL FILE CONTROL ELEMENTS\n      FM61     - DMCL FILE-AREA MEMBERSHIP\n      JD62     - JOURNAL CONTROL BLOCK\n      PR60     - DMCL AREA MAPPING ELEMENTS\n      VB50     - VARIABLE IB50 SUBSCHEMA CONTROL BLOCKS\n\n\n      HISTORY: EXPAND ACE DIAGNOSTICS                  09-SEP-92\n      HISTORY: ADD LTE PROCESSING                      01-SEP-92\n      HISTORY: CORRECTED DCETCE COMMAND TO FORMAT EACH\n               TCE IN SYSTEM.                          01-JUN-92\n      HISTORY: ADD RLE/RCE CHAIN FORMAT OFF OF CSA     01-JUN-92\n      HISTORY: ADD RLE/RCE CHAIN FORMAT OFF OF TCE     01-JUN-92\n               WHEN FORMATTING ALL TCE'S WITH DCETCE\n      HISTORY: ADD LTT COMMAND                         08-JUN-92\n\nONCE YOU HAVE THIS PDS CONNECTED TO YOUR IPCS SESSION, THE CLIST CAN\nBE STARTED FROM IPCS SCREEN 4, COMMANDS, BY ENTERING %#102IDMS AND\nANY OF THE PARAMETER NAMES OF THE CONTROL BLOCKS YOU WANT DISPLAYED.\n\nIF YOU HAVE QUESTIONS, PROBLEMS, IDEAS, LET'S HERE THEM! I CAN BE REACHED\nAT THE FOLLOWING ADDRESS AND PHONE NUMBER.\n\nROSS LABORATORIES\nNEAL KOSTANSKI\n625 CLEVELAND AVE.\nCOLUMBUS, OHIO 43215\n(614)624-3613\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$FILE178": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x00\\x00\\x92'_\\x00\\x92'o\\x08B\\x007\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-02T08:42:00", "lines": 55, "newlines": 1, "modlines": 0, "user": "SBGCSC"}, "text": "//***FILE 178 IS AN IDMS IPCS INTERFACE FROM NEAL KOSTANSKI OF      *   FILE 178\n//*           ROSS LABORATORIES IN COLUMBUS, OHIO.  IF YOUR SHOP    *   FILE 178\n//*           HAS IDMS, THIS CAN BE VERY USEFUL.                    *   FILE 178\n//*                                                                 *   FILE 178\n//*     THE CLIST PROVIDED IN THIS PDS WILL PROCESS AN IPCS         *   FILE 178\n//*     DUMP TAKEN FROM AN IDMS 10.2 SYSTEM. THEY WILL PROVIDE      *   FILE 178\n//*     A FORMATTED, AND IN SOME CASES, AN ENGLISH TRANSALATION     *   FILE 178\n//*     OF THE CONTROL BLOCKS. BELOW ARE SOME OF THE COMMANDS       *   FILE 178\n//*     AND CONTROL BLOCKS WHICH CAN BE LOCATED, FORMATTED, AND     *   FILE 178\n//*     DISPLAYED.                                                  *   FILE 178\n//*                                                                 *   FILE 178\n//*     THE IDMS CONTROL BLOCKS ARE DIVIDED INTO TWO                *   FILE 178\n//*     CATEGORIES:  IDMS-DC AND IDMS DATABASE CONTROL              *   FILE 178\n//*     BLOCKS AND ARE LISTED BELOW:                                *   FILE 178\n//*                                                                 *   FILE 178\n//*  DC - DATA COMMUNICATION PORTION OF DUMP - DEFAULT IF NO        *   FILE 178\n//*              PARAMETER IS GIVEN ON THE EXEC STATEMENT           *   FILE 178\n//*   CCE      - CENTRAL CONTROL BLOCK ELEMENT                      *   FILE 178\n//*   CSA      - COMMON SYSTEM AREA                                 *   FILE 178\n//*   DCE      - DISPATCH CONTROL ELEMENT                           *   FILE 178\n//*   DCETCE   - DISPATCH CONTROL ELEMENT WITH ASSOCIATED TCE,      *   FILE 178\n//*              RLE, AND RCE CHAINS DECODED.                       *   FILE 178\n//*   ESE      - EXTERNAL SERVICE ELEMENT                           *   FILE 178\n//*   ERE      - EXTERNAL REQUEST ELEMENT                           *   FILE 178\n//*   ICE      - INTERVAL CONTROL ELEMENT                           *   FILE 178\n//*   MAP      - REGION MAP ENTRIES                                 *   FILE 178\n//*   LTT      - LOGICAL TERMINAL TABLE - FORMAT ALL LTE'S.         *   FILE 178\n//*              PTE'S, RCE/RLE CHAIN WITH SON TOBE ADD LATER       *   FILE 178\n//*   NLT      - NUCLEUS LOAD TABLE                                 *   FILE 178\n//*   RLEC     - RUN THE RLE-RCE CHAIN OFF OF THE CSA               *   FILE 178\n//*   SCA      - SUBTASK CONTROL AREA AND ASSOCIATED TCE            *   FILE 178\n//*   TCE      - CSECTACE TCE POINTED TO BY R9 IN THE CSECTACE      *   FILE 178\n//*              WITH LTE, PTE, SON, RLE, & RCE                     *   FILE 178\n//*   TRACE    - IDMS SYSTEM TRACE TABLE ENTRIES                    *   FILE 178\n//*   VECTORS  - VECTOR TABLE OF ENTRY POINTS FOR IDMS MODULES      *   FILE 178\n//*                                                                 *   FILE 178\n//*  DB -  DATABASE CONTROL BLOCKS                                  *   FILE 178\n//*   BC53     - BUFFER CONTROL ELEMENT                             *   FILE 178\n//*   CLT      - CENTRAL LOCKING TABKE INCLUDING:                   *   FILE 178\n//*              CLTE - CENTRAL LOCKING TABLE ELEMENTS              *   FILE 178\n//*              SLT  - SYNONYM LOCKING TABLE HEADER                *   FILE 178\n//*              SLTF - SYNONYM LOCKING TABLE FRAGMENTS             *   FILE 178\n//*              LIDH - LOCK-UNIT TABLE HEADER                      *   FILE 178\n//*              LIDF - LOCK-UNIT TABLE FRAGMENTS                   *   FILE 178\n//*              LIDE - LOCK-UNIT TABLE ELEMENTS                    *   FILE 178\n//*              RLTH - RUN-UNIT LOCK TABLE HEADER                  *   FILE 178\n//*              RLTE - RUN-UNIT LOCK TABLE ELEMETS                 *   FILE 178\n//*              RLTF - RUN-UNIT LOCK TABLE FRAGMENTS               *   FILE 178\n//*   DM58     - DMCL TABLES HEADER                                 *   FILE 178\n//*   FC59     - DMCL FILE CONTROL ELEMENTS                         *   FILE 178\n//*   FM61     - DMCL FILE-AREA MEMBERSHIP                          *   FILE 178\n//*   JD62     - JOURNAL CONTROL BLOCK                              *   FILE 178\n//*   PR60     - DMCL AREA MAPPING ELEMENTS                         *   FILE 178\n//*   VB50     - VARIABLE IB50 SUBSCHEMA CONTROL BLOCKS             *   FILE 178\n//*                                                                 *   FILE 178\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102ACE": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x009\\x009\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102ACE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   AAA   CCCC EEEEE                  ***/\n/***  #####  11   0   0     2 A   A C     E                      ***/\n/***   # #    1   0   0    2  AAAAA C     EEEE                   ***/\n/***  #####   1   0   0   2   A   A C     E                      ***/\n/***   # #   111   000  22222 A   A  CCCC EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102ACE CLIST DISPLAYS THE CSECTACE OF THE ABEND       ***/\n/***  CONTROL ELEMENT AND PLACE THE ACE IN THE STACK FOR         ***/\n/***  BROWSE.                                                    ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:    #102ACEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| ACE ABEND CONTROL ELEMENT ANALYSIS      #102ACE |'\nNOTE '+-------------------------------------------------+'\nF C'CSECTACE' ADDR(0.:00FFFFFF.) NOBREAK FIRST PRINT NOTERMINAL\nIF &LASTCC NE 0 THEN DO\n   NOTE '+-------------------------------------------------+'\n   NOTE '|  ERROR!   CSECTACE   LITERAL NOT FOUND!         |'\n   NOTE '|           #102IDMS CLIST TERMINATED!            |'\n   NOTE '|           CHECK SETDEF STATEMENT FOR ACCURACY.  |'\n   NOTE '+-------------------------------------------------+'\n   RETURN 12\nEND\nELSE SET &TCEADDR = 0     /* TCEADDR IS R9 FROM THE CSECTACE */\nEQUATE CSECTACE X           AREA LENGTH(X'AF') +\n       REMARK('ABEND CONTROL ELEMENT')\nEQUATE ACEPSW  CSECTACE+8   AREA LENGTH(8) REMARK('PSW')\nEQUATE ACEGPRS CSECTACE+10  AREA LENGTH(X'80') +\n       REMARK('REGISTERS 0 - 15')\nEQUATE ACEFPRS CSECTACE+50  AREA LENGTH(X'20') +\n       REMARK('FLOATING POINT REGISTERS 0 - 4')\nEQUATE ACEMSGN CSECTACE+A3  AREA LENGTH(X'4') +\n       REMARK('MESSAGE ID NUMBER')\nEQUATE ACEILC  CSECTACE+A8  AREA LENGTH(X'1') +\n       REMARK('ILC:PGM INTERRUPT LENGTH COUNTER')\nEQUATE ACEINTC CSECTACE+A9  AREA LENGTH(X'2') +\n       REMARK('INTC:INTERRUPTION CODE')\n%#102ACEF\nLIST ACEPSW   NODISPLAY(MACHINE REQUEST)\nLIST ACEGPRS  NODISPLAY(MACHINE REQUEST)\nLIST ACEFPRS  NODISPLAY(MACHINE REQUEST)\nLIST ACEMSGN  NODISPLAY(MACHINE REQUEST)\nLIST ACEILC   NODISPLAY(MACHINE REQUEST)\nLIST ACEINTC  NODISPLAY(MACHINE REQUEST)\nLIST CSECTACE NODISPLAY(MACHINE REQUEST)\nSTACK CSECTACE REMARK('ABEND CONTROL ELEMENT')\nNOTE '----------------------------------------------------------------'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102ACEF": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00&\\x00&\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102ACEF ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   AAA   CCCC EEEEE FFFFF            ***/\n/***  #####  11   0   0     2 A   A C     E     F                ***/\n/***   # #    1   0   0    2  AAAAA C     EEEE  FFFF             ***/\n/***  #####   1   0   0   2   A   A C     E     F                ***/\n/***   # #   111   000  22222 A   A  CCCC EEEEE F                ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102ACE CLIST DISPLAYS THE ACE FLAGS IN ENGLISH.       ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102ACE                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\n/*******************************************************************/\n/*** ACE FLAG 1 PROCESSING                                       ***/\n/*******************************************************************/\nEVAL  CSECTACE+70 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE '   '\nNOTE '-----------------------------------------------------------------'\nNOTE 'ACE FLAG DECODING SUMMARY IS:'\nIF &BIT8 = 1 THEN NOTE '    ABORT WAS IN USER MODE.'\nIF &BIT7 = 1 THEN NOTE '    PROBLEM WAS A PROGRAM CHECK.'\nIF &BIT6 = 1 THEN NOTE '    NO MESSAGES ARE WANTED.'\nIF &BIT5 = 1 THEN NOTE '    NO SNAP IS WANTED.'\nIF &BIT4 = 1 THEN NOTE '    ABORT IMMEDIATELY.'\nIF &BIT3 = 1 THEN NOTE '    RETRY INTERRUPTED INSTRUCTION.'\nIF &BIT2 = 1 THEN NOTE '    RESTART AT NEXT INSTRUCTION.'\nIF &BIT1 = 1 THEN NOTE '    CONTINUE AT R14 ADDRESS.'\nIF &BYTEDEC = 0 THEN NOTE '    NO FLAGS ARE SET.'\nNOTE '-----------------------------------------------------------------'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102BC53": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00#\\x00#\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102BC53 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  BBBB   CCCC 55555 3333             ***/\n/***  #####  11   0   0     2 B   B C     5         3            ***/\n/***   # #    1   0   0    2  BBBB  C     5555   333             ***/\n/***  #####   1   0   0   2   B   B C         5     3            ***/\n/***   # #   111   000  22222 BBBB   CCCC 5555  3333             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102BC53 CLIST DISPLAYS THE BUFFER CONTROL ELEMENTS    ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL BUFFER CONTROL BLOCKS              #102BC53|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ BC53 DM58+4% AREA REMARK('DMCL BUFFER CONTROL BLOCKS')         +\n   NODROP LENGTH(88)\nLIST  BC53\nSTACK BC53\nEVALSYM DM58 CLIST(ADDR(ADM58))\nRUNCHAIN ADDR(BC53) LINK(X'04') NAME(BC53)  +\n         NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102CCE": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102CCE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   CCCC  CCCC EEEEE                  ***/\n/***  #####  11   0   0     2 C     C     E                      ***/\n/***   # #    1   0   0    2  C     C     EEEE                   ***/\n/***  #####   1   0   0   2   C     C     E                      ***/\n/***   # #   111   000  22222  CCCC  CCCC EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CCE CLIST DISPLAYS THE CCE AND STACKS THE ADDRESS  ***/\n/***  FOR FUTURE BROWSE.                                         ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CCE ANALYSIS                            #102CCE |'\nNOTE '+-------------------------------------------------+'\nEQ CCE  CSAA+308% AREA REMARK('CCE CONTROL BLOCK') LENGTH(464) NODROP\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK') LENGTH(464) NODROP\nLIST  CCE NODISPLAY(MACHINE REQUEST)\nSTACK CCE REMARK('CENTRAL CONTROL ELEMENT')\nNOTE '-----------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102CLT": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00o\\x00o\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102CLT *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   CCCC L     TTTTT                  ***/\n/***  #####  11   0   0     2 C     L       T                    ***/\n/***   # #    1   0   0    2  C     L       T                    ***/\n/***  #####   1   0   0   2   C     L       T                    ***/\n/***   # #   111   000  22222  CCCC LLLLL   T                    ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CLT CLIST DISPLAYS THE CENTRAL LOCKING TABLES      ***/\n/***  AND ITS ASSOCIATED CONTROL BLOCKS.                         ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM69A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CENTRAL LOCKING TABLE ANALYSIS          #102CLT |'\nNOTE '+-------------------------------------------------+'\n/****  GET AND LIST THE CLT AND CLTES    ****/\n/****                                    ****/\nEQ X CSAA+30C%\nEQ RCE X-8%\n/* GET LENGTH OF CLT+CLTE */\nEVAL RCE+8 CLIST(STORAGE(STGLEN)) LENGTH(4)\n/* MINUS THE BOOKEND */\nINTEGER X'&STGLEN' CLIST(STORAGE(STGLEN)) UNSIGNED(8)\nSET STGLEN = (&STGLEN - 8)\nEQ CLT CSAA+30C% AREA REMARK('CENTRAL LOCK TABLE AND ELEMENTS') +\n   NODROP LENGTH(&STGLEN)\nLIST  CLT\nSTACK CLT\n/****  GET AND LIST THE SLTH  AND SLTFS  ****/\n/****                                    ****/\n/* SLTH IS FIXED LENGTH */\nEQ SLTH CLT+08% AREA REMARK('SYNONYM LOCK TABLE HEADER') +\n   LENGTH(64) NODROP\nLIST  SLTH\nSTACK SLTH\nEQ XLTF SLTH+4%    /* ADDRESS OF SLTF */\nEQ RCE  XLTF-8%\n/* GET LENGTH OF SLTF */\nEVAL  RCE+8 CLIST(STORAGE(STGLEN)) LENGTH(4)\n/* MINUS THE BOOKEND */\nINTEGER X'&STGLEN' CLIST(STORAGE(STGLEN)) +\n      UNSIGNED(8)\nSET STGLEN = (&STGLEN - 8)\nEQ SLTF SLTH+4% AREA REMARK('SYNONYM LOCK FRAGMENT') +\n   LENGTH(&STGLEN) NODROP\nRUNCHAIN ADDR(SLTF) LINK(X'04') NAME(SLTF)  +\n         NULL(X'80000000') MASK(X'F0000000')    +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\n/****  GET AND LIST THE LIDH  AND LIDFS  ****/\n/****                                    ****/\nEQ LIDH CLT+0C% AREA REMARK('LOCK ID TABLE HEADER') +\n   LENGTH(64) NODROP\nLIST  LIDH\nSTACK LIDH\n/* LIDFS ARE FIXED LENGTH */\nEQ LIDF LIDH+4% AREA REMARK('LOCK ID TABLE FRAGMENT') +\n   LENGTH(1064) NODROP\nRUNCHAIN ADDR(LIDF) LINK(X'04') NAME(LIDF)  +\n         NULL(X'80000000') MASK(X'F0000000') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\n/****  GET AND LIST THE LONGTERM RLTHS AND RLTFS ****/\n/****                                            ****/\nEQ XLTF CLT+44%     /* ADDRESS OF RLTH */\nEQ RCE  XLTF-8%\n/* GET LENGTH OF RLTH */\nEVAL  RCE+8 CLIST(STORAGE(STGLEN)) LENGTH(4)\n/* MINUS THE BOOKEND */\nINTEGER X'&STGLEN' CLIST(STORAGE(STGLEN)) UNSIGNED(8)\nSET STGLEN = (&STGLEN - 8)\nEQ RLTH CLT+44% AREA REMARK('LONGTERM RUN UNIT LOCK TABLE HEADER') +\n   LENGTH(&STGLEN) NODROP\nEVALSYM CLT CLIST(ADDR(ENDRLTH))      /* SET END OF RLTH CHAIN */\nEVALSYM RLTH CLIST(ADDR(NXTRLTH))     /* EXIT IF NOT RLTHS     */\nIF &NXTRLTH = &ENDRLTH THEN GOTO LEAVE\nRLTHLOOP:LIST RLTH\nIF &STGLEN = 128 THEN DO      /* FIRST RLTF MAY BE IN RLTH STG */\n   EQ XLTF RLTH+4%     /* ADDRESS OF RLTF */\n   EQ RCE  XLTF-8%\n   /* GET LENGTH OF RLTF */\n   EVAL  RCE+8 CLIST(STORAGE(STGLEN)) LENGTH(4)\n   /* MINUS BKEND */\n   INTEGER X'&STGLEN' CLIST(STORAGE(STGLEN)) UNSIGNED(8)\n   SET STGLEN = (&STGLEN - 8)\n   EQ RLTF RLTH+4% AREA +\n      REMARK('LONGTERM RUN UNIT LOCK TABLE FRAGMENT') +\n      LENGTH(&STGLEN) NODROP\n   RUNCHAIN ADDR(RLTF) LINK(X'04') NAME(RLTF)  +\n            NULL(X'80000000') MASK(X'F0000000') +\n            NODISPLAY(MACHINE REQUEST)         +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nEQ XLTH RLTH+44% NODROP\nEQ RCE  XLTH-8%\n/* GET LENGTH OF RLTH */\nEVAL  RCE+8 CLIST(STORAGE(STGLEN)) LENGTH(4)\n/* MINUS THE BOOKEND */\nINTEGER X'&STGLEN' CLIST(STORAGE(STGLEN)) UNSIGNED(8)\nSET STGLEN = (&STGLEN - 8)\nEQ RLTH RLTH+44% AREA REMARK('LONGTERM RUN UNIT LOCK TABLE') +\n   LENGTH(&STGLEN) NODROP\nEVALSYM RLTH CLIST(ADDR(NXTRLTH))\nIF &NXTRLTH = &ENDRLTH THEN GOTO LEAVE\n   GOTO RLTHLOOP\nLEAVE:EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102CSA": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00,\\x00,\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 2 &TRACE &RLEC\n/* #102CSA *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   CCCC  SSSS  AAA                   ***/\n/***  #####  11   0   0     2 C     S     A   A                  ***/\n/***   # #    1   0   0    2  C      SSS  AAAAA                  ***/\n/***  #####   1   0   0   2   C         S A   A                  ***/\n/***   # #   111   000  22222  CCCC SSSS  A   A                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CSA CLIST DISPLAYS THE CSA FLAGS IN ENGLISH AND    ***/\n/***  THE COMMON SYSTEM AREA CONTROL BLOCK.                      ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:    #102CSAM                                          ***/\n/***           #102CSAF                                          ***/\n/***           #102RLEC                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CSA ANALYSIS                            #102CSA |'\nNOTE '+-------------------------------------------------+'\n%#102CSAF\n%#102CSAM\nLIST CSA REMARK('CSA CONTROL BLOCK') LENGTH(X'B0C') +\n     NODISPLAY(MACHINE REQUEST)\nSTACK CSA REMARK('COMMON SYSTEM AREA')\nIF &TRACE = TRACE THEN DO\n   EQ CSATRCLO CSA+370 AREA REMARK('START OF TRACE BUFFERS') NODROP\n   EQ CSATRCHI CSA+374 AREA REMARK('END OF TRACE BUFFERS')   NODROP\n   EQ CSATRCNX CSA+378 AREA REMARK('NEXT AVAILABLE TRACE BUFFER') NODROP\n   NOTE '+-------------------------------------------------+' PAGE\n   NOTE '| SYSTEM TRACE                                    |'\n   NOTE '+-------------------------------------------------+'\n   LIST CSATRCLO\n   LIST CSATRCHI\n   LIST CSATRCNX\n   LIST (CSATRCLO%:CSATRCHI%)  REMARK('SYSTRACE ENTRIES')\nEND\nIF &RLEC = RLEC THEN %#102RLEC\nNOTE '--------------------------------------------------------------'\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102CSAF": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x93\\x00\\x93\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102CSAF ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   CCCC  SSSS  AAA  FFFFF            ***/\n/***  #####  11   0   0     2 C     S     A   A F                ***/\n/***   # #    1   0   0    2  C      SSS  AAAAA FFFF             ***/\n/***  #####   1   0   0   2   C         S A   A F                ***/\n/***   # #   111   000  22222  CCCC SSSS  A   A F                ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CSAF CLIST DISPLAYS THE SYSTEM WIDE FLAGS          ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102CSA                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\n/*******************************************************************/\n/*** CSA FLAG 1 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG1 CSA+6C0 LENGTH(1)\nEVAL  CSA+6C0 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE '   '\nNOTE '-----------------------------------------------------------------'\nNOTE 'CSA SYSTEM WIDE FLAGS DECODING SUMMARY IS:'\nIF &BIT8 = 1 THEN NOTE '    SHORT ON STORAGE CONDITION EXIST.'\nIF &BIT7 = 1 THEN NOTE '    MAX TASK CONDITION EXIST.'\nIF &BIT6 = 1 THEN NOTE '    THE SYSTEM IS IN STORAGE PROTECT MODE.'\nIF &BIT5 = 1 THEN NOTE '    TRACING IS TURNED ON.'\nIF &BIT4 = 1 THEN NOTE '    DATABASE IS TEMP. NOT AVAILABLE.'\nIF &BIT3 = 1 THEN NOTE '    STACK CHECKING IS TURNED ON.'\nIF &BIT2 = 1 THEN NOTE '    SYSTEM IS BEING SHUTDOWN.'\nIF &BIT1 = 1 THEN NOTE '    THIS IS CAMP AND NOT DC.'\n/*******************************************************************/\n/*** CSA FLAG 2 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG2 CSA+6C1 LENGTH(1)\nEVAL  CSA+6C1 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TIMER IS SUPPORTED.'\nIF &BIT7 = 1 THEN NOTE '    SYSTEM IS BEING QUIESCED.'\nIF &BIT6 = 1 THEN NOTE '    RUN THIS TASK ONLY (CSAONLYD).'\nIF &BIT5 = 1 THEN NOTE '    NO REENTRANT SNAPS ARE WANTED.'\nIF &BIT4 = 1 THEN NOTE '    FACTOTUM TYPE 2 IS ACTIVE.'\nIF &BIT3 = 1 THEN NOTE '    INITIALIZATION OF DC IS COMPLETE.'\nIF &BIT2 = 1 THEN NOTE '    DC IS IN SAME REGION AS ICCF.'\nIF &BIT1 = 1 THEN NOTE '    PAGE RELEASE IS ENABLED.'\n/*******************************************************************/\n/*** CSA FLAG 2 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG3 CSA+6C2 LENGTH(1)\nEVAL  CSA+6C2 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    STATISTICS ARE DRIVEN BY TIMER.'\nIF &BIT7 = 1 THEN NOTE '    STATISTICS ARE COLLECTED FOR EACH TASK.'\nIF &BIT6 = 1 THEN NOTE '    STATISTICS ARE WANTED FOR EACH LINE.'\nIF &BIT5 = 1 THEN NOTE '    STATISTICS ARE WANTED IN USER MODE.'\nIF &BIT4 = 1 THEN NOTE '    STATISTICS ARE WRITTEN PER TASK.'\nIF &BIT3 = 1 THEN NOTE '    STATISTICS ARE WRITTEN TO THE DATABASE.'\nIF &BIT2 = 1 THEN NOTE '    LOG GOES TO DATABASE.'\nIF &BIT1 = 1 THEN NOTE '    A USER TRACE IS WANTED.'\n/*******************************************************************/\n/*** CSA FLAG 4 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG4 CSA+6C3 LENGTH(1)\nEVAL  CSA+6C3 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    SYSTEM IS SHORT ON RLE''S.'\nIF &BIT7 = 1 THEN NOTE '    MAGNUSON MICROCODE IS USED.'\nIF &BIT6 = 1 THEN NOTE '    STATISTICS ARE COLLECTED BY TRANSACTION.'\nIF &BIT5 = 1 THEN NOTE '    SYSTEM IS SHORT ON ILE''S.'\nIF &BIT4 = 1 THEN NOTE '    VECTOR TIMING ENABLED.'\nIF &BIT3 = 1 THEN NOTE '    THE SYSTEM IS WAITING FOR ERUS TO QUIESCE.'\nIF &BIT2 = 1 THEN NOTE '    SYSTEM IS SHORT ON RCE''S.'\nIF &BIT1 = 1 THEN NOTE '    SYSTEM IS SHORT ON DPE''S.'\n/*******************************************************************/\n/*** CSA FLAG 5 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG5 CSA+6C4 LENGTH(1)\nEVAL  CSA+6C4 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    THE DDLDCRUN AREA IS AVAILABLE.'\nIF &BIT7 = 1 THEN NOTE '    THIS IS A MVS/XA SYSTEM.'\nIF &BIT6 = 1 THEN NOTE '    31 BIT AMODE IS SUPPORTED IN THIS SYSTEM.'\nIF &BIT5 = 1 THEN NOTE '    SYSTEM SNAPS ARE DISABLED.'\nIF &BIT4 = 1 THEN NOTE '    SYSTEM SNAP PHOTOS ARE DISABLED.'\nIF &BIT3 = 1 THEN NOTE '    TASK SNAPS ARE DISABLED.'\nIF &BIT2 = 1 THEN NOTE '    TASK SNAP PHOTOS ARE DISABLED.'\nIF &BIT1 = 1 THEN +\n   NOTE '    THIS DC SYSTEM IS RUNNING IN AN AUTORIZED STATE.'\n/*******************************************************************/\n/*** CSA FLAG 6 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG6 CSA+6C5 LENGTH(1)\nEVAL  CSA+6C5 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    THERE ARE ONLINE RESOURCE LIMITS.'\nIF &BIT7 = 1 THEN NOTE '    THERE ARE EXTERNAL RESOURCE LIMITS.'\nIF &BIT6 = 1 THEN NOTE '    ONLINE RESOURCE LIMITS ARE ENABLED.'\nIF &BIT5 = 1 THEN NOTE '    EXTERNAL RESOURCE LIMITS ARE ENABLED.'\nIF &BIT4 = 1 THEN NOTE '    QUEUE EXTENTS ARE AVAILABLE.'\nIF &BIT3 = 1 THEN NOTE '    BIT3-UNKNOWN FLAG.'\nIF &BIT2 = 1 THEN NOTE '    BIT2-UNKNOWN FLAG.'\nIF &BIT1 = 1 THEN NOTE '    BIT1-UNKNOWN FLAG.'\n/*******************************************************************/\n/*** CSA FLAG 7 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG7 CSA+6C6 LENGTH(1)\nEVAL  CSA+6C6 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    SYSTEM TRACE TABLE HAS WRAPPED ON ITSELF.'\nIF &BIT7 = 1 THEN NOTE '    SYSTEM IS RUNNING WITH FETCH PROTECTION.'\nIF &BIT6 = 1 THEN NOTE '    SYSTEM IS RUNNING SECURED.'\nIF &BIT5 = 1 THEN +\n   NOTE '    SYSTEM IS BEING QUIESCED FOR A NUCLEUS RELOAD.'\nIF &BIT4 = 1 THEN NOTE '    XA POOLS ARE PRESENT IN THE SYSTEM.'\nIF &BIT3 = 1 THEN NOTE '    ENFORCE MULTIPLE VERSIONS ARE NOT ALLOWED.'\nIF &BIT2 = 1 THEN NOTE '    BIT2-UNKNOWN FLAG.'\nIF &BIT1 = 1 THEN NOTE '    BIT1-UNKNOWN FLAG.'\n/*******************************************************************/\n/*** CSA FLAG 8 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE CSAFLAG8 CSA+6C7 LENGTH(1)\nEVAL  CSA+6C7 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    COBOL II IS SUPPORTED.'\nIF &BIT7 = 1 THEN NOTE '    RESERVED FOR FUTURE PL/1 SUPPORT.'\nIF &BIT6 = 1 THEN NOTE '    BIT6-UNKNOWN FLAG.'\nIF &BIT5 = 1 THEN NOTE '    BIT5-UNKNOWN FLAG.'\nIF &BIT4 = 1 THEN NOTE '    MULTI-TASKING SUPPORT IS ENABLED.'\nIF &BIT3 = 1 THEN NOTE '    MVS POST EXIT IS ACTIVE.'\nIF &BIT2 = 1 THEN NOTE '    COMPARE/SWAP INSTRUCTION IS AVAILABLE.'\nIF &BIT1 = 1 THEN +\n   NOTE '    LOGGING TEMPORARILY CHANGED FROM DB TO SYSOUT FOR MT SNAPS.'\nNOTE '-----------------------------------------------------------------'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102CSAM": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102CSAM ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   CCCC  SSSS  AAA  M   M            ***/\n/***  #####  11   0   0     2 C     S     A   A MM MM            ***/\n/***   # #    1   0   0    2  C      SSS  AAAAA M M M            ***/\n/***  #####   1   0   0   2   C         S A   A M   M            ***/\n/***   # #   111   000  22222  CCCC SSSS  A   A M   M            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CSAM CLIST DISPLAYS THE LAST 33 MESSAGES ISSUED    ***/\n/***  AND STACKS THE ADDRESS FOR LATER BROWSE.                   ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102CSA                                           ***/\n/***                                                             ***/\n/*******************************************************************/\nEQUATE CSAMSG CSA+2288 LENGTH(264) +\n       REMARK('LAST 33 MESSAGES ISSUED BY CV')\nLIST CSAMSG NODISPLAY(MACHINE REQUEST)\nSTACK CSAMSG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102DCE": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DCE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  DDDD   CCCC EEEEE                  ***/\n/***  #####  11   0   0     2 D   D C     E                      ***/\n/***   # #    1   0   0    2  D   D C     EEEE                   ***/\n/***  #####   1   0   0   2   D   D C     E                      ***/\n/***   # #   111   000  22222 DDDD   CCCC EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102DCE CLIST DISPLAYS ALL DISPACH CONTROL ELEMENTS    ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***  USES:    #102DCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DCE ANALYSIS                            #102DCE |'\nNOTE '+-------------------------------------------------+'\nEQ CSADCEFA CSA+2A0 AREA REMARK('DCE FORWARD CHAIN PTR')  +\n   LENGTH(64) NODROP\nEQ DCE  CSADCEFA%+0 AREA REMARK('DCE CONTROL BLOCKS') LENGTH(64) NODROP\nEVAL CSADCEFA%+4 CLIST(STORAGE(DCEB))LENGTH(4)\nRUNCHAIN ADDR(DCE) LINK(X'00') NAME(DCE)   NULL(X'&DCEB') +\n         MASK(X'FFFFFFFF') NODISPLAY(MACHINE REQUEST) +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102DCEF))\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102DCEC": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DCEC ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  DDDD   CCCC EEEEE  CCCC            ***/\n/***  #####  11   0   0     2 D   D C     E     C                ***/\n/***   # #    1   0   0    2  D   D C     EEEE  C                ***/\n/***  #####   1   0   0   2   D   D C     E     C                ***/\n/***   # #   111   000  22222 DDDD   CCCC EEEEE  CCCC            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102DCEC CLIST DISPLAYS THE DCE/TCE CHAIN.             ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:    #102DCET                                          ***/\n/***           #102TCE                                           ***/\n/***           #102TCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DCE/TCE ANALYSIS                        #102DCEC|'\nNOTE '+-------------------------------------------------+'\nEQ CSADCEFA CSA+2A0 AREA REMARK('DCE FORWARD CHAIN PTR')  +\n   LENGTH(64) NODROP\nEQ DCE  CSADCEFA%+0 AREA REMARK('DCE CONTROL BLOCKS') LENGTH(64) NODROP\nEVAL CSADCEFA%+4 CLIST(STORAGE(DCEB)) LENGTH(4)\nRUNCHAIN ADDR(DCE) LINK(X'00') NAME(DCE)   NULL(X'&DCEB') +\n         MASK(X'FFFFFFFF') NODISPLAY(MACHINE REQUEST) +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102DCET))\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102DCEF": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x002\\x002\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DCEF ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  DDDD   CCCC EEEEE FFFFF            ***/\n/***  #####  11   0   0     2 D   D C     E     F                ***/\n/***   # #    1   0   0    2  D   D C     EEEE  FFFF             ***/\n/***  #####   1   0   0   2   D   D C     E     F                ***/\n/***   # #   111   000  22222 DDDD   CCCC EEEEE F                ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102DCEF CLIST MAPS THE DCE FLAGS TO ENGLISH TEXT      ***/\n/***  AND PLACES THE DCE ON THE STACK FOR BROWSE.                ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102DCE                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\n/*******************************************************************/\n/*** DCE FLAG 0 PROCESSING                                       ***/\n/*******************************************************************/\nSTACK X REMARK('DCE')\nEVAL  X+25 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE '   '\nNOTE 'DCE FLAG 0 DECODING SUMMARY IS:'\nIF &BIT8 = 1 THEN NOTE '    TASK IS READY TO RUN, BUT NOT DISPATCHED.'\nIF &BIT7 = 1 THEN NOTE '    THE TASK IS CURRENTLY EXECUTING.'\nIF &BIT6 = 1 THEN NOTE '    THE TASK IS DOING SOME KIND OF WAIT.'\nIF &BIT5 = 1 THEN NOTE '    THE TASK IS WAITING ON AT LEAST 1 EXT. ECB.'\nIF &BIT4 = 1 THEN NOTE '    THE TASK IS WAINT ON A LOCK OR A MPMODE.'\nIF &BIT3 = 1 THEN NOTE '    A HICCUP WAIT IS IN PROGRESS FOR THE TASK.'\nIF &BIT2 = 1 THEN NOTE '    THIS IS A NEW TASK AND IS NOT DISPATCHED.'\nIF &BIT1 = 1 THEN NOTE '    DCEECBA POINTS TO ECBLIST.'\nIF &BYTEDEC = 0 THEN NOTE '    NO FLAGS ARE SET.'\nEVAL  X+26 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE 'DCE FLAG 1 DECODING SUMMARY IS:'\nIF &BIT8 = 1 THEN NOTE '    THE EMBRACE ROUTINE FOUND THE TASK RUNABLE.'\nIF &BIT7 = 1 THEN NOTE '    TASK REQUIRED SUBTASK AFFINITY.'\nIF &BIT6 = 1 THEN NOTE '    TASK TO BE REMOVED FROM SYSTEM.'\nIF &BIT1 = 1 THEN NOTE '    THIS DCE IS CURRENTLY OWNED.'\nIF &BYTEDEC = 0 THEN NOTE '    NO FLAGS ARE SET.'\nNOTE '   '\nNOTE '-----------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102DCET": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DCET ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  DDDD   CCCC EEEEE TTTTT            ***/\n/***  #####  11   0   0     2 D   D C     E       T              ***/\n/***   # #    1   0   0    2  D   D C     EEEE    T              ***/\n/***  #####   1   0   0   2   D   D C     E       T              ***/\n/***   # #   111   000  22222 DDDD   CCCC EEEEE   T              ***/\n/***                                                             ***/\n/***  THE #102DCET CLIST IS CALLED FROM #102DCEC TO PROCESS THE  ***/\n/***  DCE/TCE CHAIN.                                             ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102DCEC                                          ***/\n/***                                                             ***/\n/***  USES:    #102DCEF                                          ***/\n/***           #102TCE                                           ***/\n/***           #102TCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\n/* EVAL X+8 CLIST(STORAGE(TCEADDR)) LENGTH(4) */\nEVAL X+8 CLIST(STORAGE(TCEADDR)) LENGTH(4)\n%#102DCEF\n%#102TCE\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102DM58": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DM58 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  DDDD  M   M 55555  888             ***/\n/***  #####  11   0   0     2 D   D MM MM 5     8   8            ***/\n/***   # #    1   0   0    2  D   D M M M 5555   888             ***/\n/***  #####   1   0   0   2   D   D M   M     5 8   8            ***/\n/***   # #   111   000  22222 DDDD  M   M 5555   888             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102DM58 CLIST DISPLAYS THE DEVICE MEDIA DESCRIPTION   ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL DEVICE MEDIA DESCRIPTION HEADER    #102DM58|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ DM58A CCEA+38% AREA REMARK('DMCL TABLES HEADER')               +\n   NODROP LENGTH(160)\nLIST  DM58\nSTACK DM58\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102ERE": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102ERE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  EEEEE RRRR  EEEEE                  ***/\n/***  #####  11   0   0     2 E     R   R E                      ***/\n/***   # #    1   0   0    2  EEEE  RRRR  EEEE                   ***/\n/***  #####   1   0   0   2   E     R  R  E                      ***/\n/***   # #   111   000  22222 EEEEE R   R EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102ERE CLIST DISPLAYS ALL OF THE ERE'S                ***/\n/***                                                             ***/\n/*******************************************************************/\n   EQ ERE1 ESE+8% AREA REMARK('ERE CONTROL BLOCKS') +\n      LENGTH(X'88') NODROP\n   EQ ERELAST ESE+C% AREA REMARK('ERE CONTROL BLOCKS') +\n      LENGTH(X'88') NODROP\n   LIST (ERE1:ERELAST)\n   STACK ERE1\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102ESE": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102ESE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  EEEEE  SSSS EEEEE                  ***/\n/***  #####  11   0   0     2 E     S     E                      ***/\n/***   # #    1   0   0    2  EEEE   SSS  EEEE                   ***/\n/***  #####   1   0   0   2   E         S E                      ***/\n/***   # #   111   000  22222 EEEEE SSSS  EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102ESE CLIST DISPLAYS ALL OF THE ESE'S                ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| ESE/ERE ANALYSIS                        #102ESE |'\nNOTE '+-------------------------------------------------+'\nEQ ESE CSACCEA%+5C% AREA REMARK('ESE CONTROL BLOCK') +\n   LENGTH(X'70') NODROP\nLIST ESE\nSTACK ESE\n%#102ERE\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102FC59": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102FC59 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  FFFFF  CCCC 55555  999             ***/\n/***  #####  11   0   0     2 F     C     5     9   9            ***/\n/***   # #    1   0   0    2  FFFF  C     5555   9999            ***/\n/***  #####   1   0   0   2   F     C         5     9            ***/\n/***   # #   111   000  22222 F      CCCC 5555   999             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102FC59 CLIST DISPLAYS THE FILE CONTROL ELEMENTS      ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL FILE CONTROL BLOCKS                #102FC59|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ FC59 DM58+C% AREA REMARK('DMCL FILE CONTROL BLOCKS')           +\n   NODROP LENGTH(88)\nSTACK FC59\nEVALSYM DM58 CLIST(ADDR(ADM58))\nRUNCHAIN ADDR(FC59) LINK(X'04') NAME(FC59)  +\n         NULL(X'&ADM58') MASK(X'FFFFFFFF')  +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102FM61": {"ttr": 790, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102FM61 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  FFFFF M   M  666    1              ***/\n/***  #####  11   0   0     2 F     MM MM 6      11              ***/\n/***   # #    1   0   0    2  FFFF  M M M 6666    1              ***/\n/***  #####   1   0   0   2   F     M   M 6   6   1              ***/\n/***   # #   111   000  22222 F     M   M  666   111             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102FM61 CLIST DISPLAYS THE FILE-AREA MEMBERSHIP       ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL FILE AREA MEMBERSHIP               #102FM61|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ FM61 DM58+10% AREA REMARK('DMCL FILE AREA MEMBERSHIP')         +\n   NODROP LENGTH(56)\nSTACK FM61\nEVALSYM DM58 CLIST(ADDR(ADM58))\nRUNCHAIN ADDR(FM61) LINK(X'14') NAME(FM61)  +\n         NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102ICE": {"ttr": 792, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00-\\x00-\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102ICE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   III   CCCC EEEEE                  ***/\n/***  #####  11   0   0     2   I   C     E                      ***/\n/***   # #    1   0   0    2    I   C     EEEE                   ***/\n/***  #####   1   0   0   2     I   C     E                      ***/\n/***   # #   111   000  22222  III   CCCC EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102ICE CLIST DISPLAYS THE INTERVAL CONTROL ELEMENT    ***/\n/***  AND ANY FLAGS.                                             ***/\n/***                                                             ***/\n/*******************************************************************/\nEQ CSAICEA CSA+2A8 AREA  REMARK('ICE CHAIN ANCHORS - CSA')  LENGTH(8) +\n   NODROP\nEVAL CSA+2A8  CLIST(STORAGE(CSAICEF))\nEVAL CSA+2AC  CLIST(STORAGE(CSAICEB))\nEQ CSACCEA CSA+308 AREA  REMARK('CCE CENTRAL CONTROL ELEMENT') +\n   LENGTH(4) NODROP\nIF &CSAICEF = &CSAICEB THEN DO\n   SET &CBPROC = YES\n   NOTE '+-------------------------------------------------+' PAGE\n   NOTE '| ==> NO ICE ACTIVE IN THE SYSTEM         #102ICE |'\n   NOTE '| CSA ICE ANCHORS:                                |'\n   NOTE '|     CSAICEA = &CSAICEF                          |'\n   NOTE '|     CSAICEA+4 = &CSAICEB                        |'\n   NOTE '+-------------------------------------------------+'\nEND\nELSE DO\n   NOTE '+-------------------------------------------------+' PAGE\n   NOTE '| ICE CONTROL BLOCK ANCHORS               #102ICE |'\n   NOTE '|     &CSAICEF &CSAICEB                           |'\n   NOTE '+-------------------------------------------------+'\n   EQ CSAICEA CSA+2A8 AREA  REMARK('ICE CHAIN ANCHORS - CSA') +\n      LENGTH(8) NODROP\n   EQ ICE CSAICEA%+0 AREA   REMARK('ICE CONTROL BLOCK') +\n      LENGTH(64) NODROP\n   EVAL CSAICEA%+4 CLIST(STORAGE(ICEB)) LENGTH(4)\n   RUNCHAIN ADDR(ICE) LINK(X'00') NAME(ICE) NULL(X'&ICEB') +\n            NODISPLAY(MACHINE REQUEST)         +\n            MASK(X'FFFFFFFF') DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102IDMS": {"ttr": 794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x01\\x07\\x01\\x07\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 263, "newlines": 263, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0 ALL BC53 CCE CLT CSA DB DC DCE DCETCE DM58 ESE ERE FC59 FM61 ICE-\n      JD62 MAP LTT NLT PR60 RLEC SCA TCE TRACE VB50 VECTORS\n/* #102IDMS ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   III  DDDD  M   M  SSSS            ***/\n/***  #####  11   0   0     2   I   D   D MM MM S                ***/\n/***   # #    1   0   0    2    I   D   D M M M  SSS             ***/\n/***  #####   1   0   0   2     I   D   D M   M     S            ***/\n/***   # #   111   000  22222  III  DDDD  M   M SSSS             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  #102IDMS IS THE MAIN IPCS CLIST FOR RELEASE 10.2 OF IDMS.  ***/\n/***                                                             ***/\n/***  AT EXECUTION TIME #102IDMS CAN BE PASSED PARAMETERS TO DUMP***/\n/***  ONLY THE IDMS CONTROL BLOCKS SPECIFIED BY THE USER ON THE  ***/\n/***  EXEC STATEMENT.  THE USER CAN ALSO REQUEST THAT ONLY THE   ***/\n/***  IDMS-DC OR DATABASE CONTROL BLOCKS BE DUMPED BY SPECIFYING ***/\n/***  EITHER DC OR DB AS A PARAMETER ON THE EXEC STATEMENT.      ***/\n/***                                                             ***/\n/***  THE IDMS CONTROL BLOCKS ARE DIVIDED INTO TWO CATEGORIES:   ***/\n/***  IDMS-DC AND IDMS DATABASE CONTROL BLOCKS AND ARE LISTED    ***/\n/***  BELOW:                                                     ***/\n/***                                                             ***/\n/*** DC - DATA COMMUNICATION PORTION OF DUMP - DEFAULT IF NO     ***/\n/***      PARAMETER IS GIVEN ON THE EXEC STATEMENT               ***/\n/***  CCE      - CENTRAL CONTROL BLOCK ELEMENT                   ***/\n/***  CSA      - COMMON SYSTEM AREA                              ***/\n/***  DCE      - DISPATCH CONTROL ELEMENT                        ***/\n/***  DCETCE   - DISPATCH CONTROL ELEMENT WITH ASSOCIATED TCE,   ***/\n/***             RLE, AND RCE CHAINS DECODED.                    ***/\n/***  ESE      - EXTERNAL SERVICE ELEMENT                        ***/\n/***  ERE      - EXTERNAL REQUEST ELEMENT                        ***/\n/***  ICE      - INTERVAL CONTROL ELEMENT                        ***/\n/***  MAP      - REGION MAP ENTRIES                              ***/\n/***  LTT      - LOGICAL TERMINAL TABLE - FORMAT ALL LTE'S.      ***/\n/***             PTE'S, RCE/RLE CHAIN WITH SON TOBE ADD LATER    ***/\n/***  NLT      - NUCLEUS LOAD TABLE                              ***/\n/***  RLEC     - RUN THE RLE-RCE CHAIN OFF OF THE CSA            ***/\n/***  SCA      - SUBTASK CONTROL AREA AND ASSOCIATED TCE         ***/\n/***  TCE      - CSECTACE TCE POINTED TO BY R9 IN THE CSECTACE   ***/\n/***             WITH LTE, PTE, SON, RLE, & RCE                  ***/\n/***  TRACE    - IDMS SYSTEM TRACE TABLE ENTRIES                 ***/\n/***  VECTORS  - VECTOR TABLE OF ENTRY POINTS FOR IDMS MODULES   ***/\n/*** DB -  DATABASE CONTROL BLOCKS                               ***/\n/***  BC53     - BUFFER CONTROL ELEMENT                          ***/\n/***  CLT      - CENTRAL LOCKING TABKE INCLUDING:                ***/\n/***             CLTE - CENTRAL LOCKING TABLE ELEMENTS           ***/\n/***             SLT  - SYNONYM LOCKING TABLE HEADER             ***/\n/***             SLTF - SYNONYM LOCKING TABLE FRAGMENTS          ***/\n/***             LIDH - LOCK-UNIT TABLE HEADER                   ***/\n/***             LIDF - LOCK-UNIT TABLE FRAGMENTS                ***/\n/***             LIDE - LOCK-UNIT TABLE ELEMENTS                 ***/\n/***             RLTH - RUN-UNIT LOCK TABLE HEADER               ***/\n/***             RLTE - RUN-UNIT LOCK TABLE ELEMETS              ***/\n/***             RLTF - RUN-UNIT LOCK TABLE FRAGMENTS            ***/\n/***  DM58     - DMCL TABLES HEADER                              ***/\n/***  FC59     - DMCL FILE CONTROL ELEMENTS                      ***/\n/***  FM61     - DMCL FILE-AREA MEMBERSHIP                       ***/\n/***  JD62     - JOURNAL CONTROL BLOCK                           ***/\n/***  PR60     - DMCL AREA MAPPING ELEMENTS                      ***/\n/***  VB50     - VARIABLE IB50 SUBSCHEMA CONTROL BLOCKS          ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  WE NEED TO GIVE CREDIT WHERE CREDIT IS DUE. THE GUTS OF    ***/\n/***  THIS SYSTEM OF CLIST WAS DESIGNED BY THE TECH SUPPORT      ***/\n/***  STAFF OF CA. I ENHANCED IT IN ORDER TO PROVIDE ENGLISH     ***/\n/***  TRANSLATION OF MANY CONTROL BLOCK INDICATORS AND FORCE ALL ***/\n/***  OUTPUT TO THE IPCS PRINT FILE, AND SEPARATED FUNCTIONS     ***/\n/***  INTO THEIR OWN MODULES.                                    ***/\n/***                                                             ***/\n/***  HISTORY: EXPAND ACE DIAGNOSTICS                  09-SEP-92 ***/\n/***  HISTORY: ADD LTE PROCESSING                      01-SEP-92 ***/\n/***  HISTORY: CORRECTED DCETCE COMMAND TO FORMAT EACH           ***/\n/***           TCE IN SYSTEM.                          01-JUN-92 ***/\n/***  HISTORY: ADD RLE/RCE CHAIN FORMAT OFF OF CSA     01-JUN-92 ***/\n/***  HISTORY: ADD RLE/RCE CHAIN FORMAT OFF OF TCE     01-JUN-92 ***/\n/***           WHEN FORMATTING ALL TCE'S WITH DCETCE             ***/\n/***  HISTORY: ADD LTT COMMAND                         08-JUN-92 ***/\n/***                                                             ***/\n/*******************************************************************/\nCONTROL MAIN\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nIF &ALL     NE ALL THEN     SET &ALL     = @NOTINIT\nIF &BC53    NE BC53 THEN    SET &BC53    = @NOTINIT\nIF &CCE     NE CCE THEN     SET &CCE     = @NOTINIT\nIF &CLT     NE CLT THEN     SET &CLT     = @NOTINIT\nIF &CSA     NE CSA THEN     SET &CSA     = @NOTINIT\nIF &DB      NE DB THEN      SET &DB      = @NOTINIT\nIF &DC      NE DC THEN      SET &DC      = @NOTINIT\nIF &DCE     NE DCE THEN     SET &DCE     = @NOTINIT\nIF &DCETCE  NE DCETCE THEN  SET &DCETCE  = @NOTINIT\nIF &DM58    NE DM58 THEN    SET &DM58    = @NOTINIT\nIF &ESE     NE ESE THEN     SET &ESE     = @NOTINIT\nIF &ERE     NE ERE THEN     SET &ERE     = @NOTINIT\nIF &FC59    NE FC59 THEN    SET &FC59    = @NOTINIT\nIF &FM61    NE FM61 THEN    SET &FM61    = @NOTINIT\nIF &ICE     NE ICE THEN     SET &ICE     = @NOTINIT\nIF &JD62    NE JD62 THEN    SET &JD62    = @NOTINIT\nIF &MAP     NE MAP THEN     SET &MAP     = @NOTINIT\nIF &LTT     NE LTT THEN     SET &LTT     = @NOTINIT\nIF &NLT     NE NLT THEN     SET &NLT     = @NOTINIT\nIF &PR60    NE PR60 THEN    SET &PR60    = @NOTINIT\nIF &RLEC    NE RLEC THEN    SET &RLEC    = @NOTINIT\nIF &SCA     NE SCA THEN     SET &SCA     = @NOTINIT\nIF &TCE     NE TCE THEN     SET &TCE     = @NOTINIT\nIF &TRACE   NE TRACE THEN   SET &TRACE   = @NOTINIT\nIF &VB50    NE VB50 THEN    SET &VB50    = @NOTINIT\nIF &VECTORS NE VECTORS THEN SET &VECTORS = @NOTINIT\n/**********************************************************************/\n/* LOCATE THE IDMS CSA IN THE DUMP. IT MUST BE FOUND. OTHERWISE, QUIT!*/\n/**********************************************************************/\nIF &LASTCC NE 0 THEN GOTO RUNAWAY\n/**********************************************************************/\n/* LOCATE MODULE RHDCCOS00 IN THE DUMP. IF NOT FOUND-RUNAWAY.         */\n/**********************************************************************/\nFIND C'RHDCOS00' ADDR(0.:00FFFFFF.)  NOBREAK FIRST PRINT NOTERMINAL\nIF &LASTCC NE 0 THEN DO\n   NOTE '+-------------------------------------------------+'\n   NOTE '|  ERROR!   RHDCOS00   LITERAL NOT FOUND!         |'\n   NOTE '|           #102IDMS CLIST TERMINATED!            |'\n   NOTE '|           CHECK SETDEF STATEMENT FOR ACCURACY.  |'\n   NOTE '+-------------------------------------------------+'\n   GOTO  RUNAWAY\nEND\n/**********************************************************************/\n/* USE THE CSA ADDRESS FOUND IN RHDCOS00 TO BASE THE ADDRESS OF MOST  */\n/* OTHER IDMS CONTROL BLOCKS.                                         */\n/**********************************************************************/\nELSE EQ CSA X+24% AREA REMARK('CSA BEGINS HERE')    NODROP\nEQ CSAA X+24%     AREA REMARK('CSA BEGINS HERE')    NODROP\n/**********************************************************************/\n/* THE FOLLOWING ROUTINES LIST (I.E. DISPLAY) THE REQUESTED IDMS      */\n/* CONTROL BLOCKS.                                                    */\n/**********************************************************************/\n%BLSCBSYB                         /* INITIAL ANALYSIS FOR SYSMDUMP    */\n%#102ACE                          /* PROCESS THE ABEND CONTROL ELEMENT*/\nIF &DB = DB OR &ALL = ALL THEN DO\n   SET &DB   = DB\n   SET &BC53 = BC53\n   SET &CLT  = CLT\n   SET &DM58 = DM58\n   SET &FC59 = FC59\n   SET &FM61 = FM61\n   SET &JD62 = JD62\n   SET &PR60 = PR60\n   SET &VB50 = VB50\nEND\nSETUPDC: +\nIF &DC EQ DC OR &ALL EQ ALL THEN DO\n   SET &DC  = DC\n   SET &CCE = CCE\n   SET &CSA = CSA\n   SET &DCE = DCE\n   SET &ESE = ESE\n   SET &ERE = ERE\n   SET &ICE = ICE\n   SET &MAP = MAP\n/* SET &LTT = LTT    */\n   SET &NLT = NLT\n   SET &RLEC = RLEC\n   SET &SCA = SCA\n   SET &TCE = TCE\n   SET &TRACE = TRACE\n   SET &VECTORS = VECTORS\nEND\nSTARTDC: +                        /* PROCESS DC CONTROL BLOCKS        */\nIF &CCE = CCE  THEN DO            /* PROCESS CENTRAL CONTROL ELEMENT  */\n   SET &CBPROC = YES\n   %#102CCE\nEND\nIF &CSA = CSA  THEN DO            /* PROCESS COMMON SYSTEM AREA       */\n   SET &CBPROC = YES\n   %#102CSA TRACE RLEC\nEND\nIF &DCE = DCE THEN DO             /* PROCESS DISPATCH CONTROL         */\n   SET &CBPROC = YES              /* ELEMENTS.                        */\n   %#102DCE\nEND\nIF &DCETCE = DCETCE THEN DO       /* PROCESS DCE/TCE CHAIN            */\n   SET &CBPROC = YES\n   %#102DCEC\nEND\nIF &ESE = ESE OR +\n   &ERE = ERE THEN DO             /* PROCESS EXTERNAL SERVICE AND     */\n   SET &CBPROC = YES              /* EXTERNAL REQUEST ELEMENTS.       */\n   %#102ESE\nEND\nIF &ICE = ICE THEN DO             /* PROCESS INTERVAL CONTROL         */\n   SET &CBPROC = YES              /* ELEMENTS.                        */\n   %#102ICE\nEND\nIF &LTT = LTT THEN DO             /* PROCESS LOGICAL TERMINAL TABLE   */\n   SET &CBPROC = YES\n   %#102LTT\nEND\nIF &NLT = NLT THEN DO             /* PROCESS NUCLEUS LOAD TABLE       */\n   SET &CBPROC = YES\n   %#102NUC\nEND\nIF &MAP = MAP THEN DO             /* PROCESS REGION MAP               */\n   SET &CBPROC = YES\n   %#102REG\nEND\nIF &SCA = SCA THEN DO             /* PROCESS SUB TASK CONTROL AREA    */\n   SET &CBPROC = YES\n   %#102SCA\nEND\nIF &TCE = TCE THEN DO             /* PROCESS THE TASK CONTROL ELEMENTS*/\n   SET &CBPROC = YES\n   %#102TCEG\nEND\nIF &VECTORS = VECTORS THEN DO\n   SET &CBPROC = YES\n   %#102VECT\nEND\nSTARTDB: +                        /* PROCESS DATABASE CONTROL BLOCK   */\nIF &DB   = DB   OR +\n   &BC53 = BC53 OR +\n   &DM58 = DM58 OR +\n   &FC59 = FC59 OR +\n   &FM61 = FM61 OR +\n   &JD62 = JD62 OR +\n   &PR60 = PR60 OR +\n   &VB50 = VB50 THEN DO\n   SET &CBPROC = YES\n   %#102DM58\nEND\nIF &BC53 = BC53 THEN DO           /* PROCESS BUFFER CONTROL           */\n   SET &CBPROC = YES\n   %#102BC53\nEND\nIF &FC59 = FC59 THEN DO\n   SET &CBPROC = YES\n   %#102FC59\nEND\nIF &FM61 = FM61 THEN DO\n   SET &CBPROC = YES\n   %#102FM61\nEND\nIF &PR60 = PR60 THEN DO\n   SET &CBPROC = YES\n   %#102PR60\nEND\nIF &VB50 = VB50 THEN DO\n   SET &CBPROC = YES\n   %#102VB50\nEND\nIF &CLT = CLT THEN DO             /* PROCESS CENTRAL LOCK TABLE       */\n   SET &CBPROC = YES\n   %#102CLT\nEND\nIF &JD62 = JD62 THEN DO           /* PROCESS JOURNAL DEVICE DESC      */\n   SET &CBPROC = YES\n   %#102JD62\nEND\nIF &CBPROC = YES THEN GOTO OUT_OF_HERE\nNOTE '+--------------------------------------------------------+'\nNOTE '| NO #102IDMS PARAMETERS WERE SPECIFIED. THE DEFAULT     |'\nNOTE '| IS TO DUMP DC CONTROL BLOCKS.                          |'\nNOTE '+--------------------------------------------------------+'\nSET &DC = DC\nGOTO SETUPDC\nOUT_OF_HERE:END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102JD62": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102JD62 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222    JJJ DDDD   666  2222             ***/\n/***  #####  11   0   0     2    J  D   D 6         2            ***/\n/***   # #    1   0   0    2     J  D   D 6666     2             ***/\n/***  #####   1   0   0   2   J  J  D   D 6   6   2              ***/\n/***   # #   111   000  22222  JJ   DDDD   666  22222            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102JD62 CLIST DISPLAYS THE JOURNAL CNTROL BLOCK       ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL JOURNAL CONTROL BLOCKS             #102JD62|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ JD62 DM58+8% AREA REMARK('DMCL JOURNAL CONTROL BLOCKS')        +\n   NODROP  LENGTH(88)\nSTACK JD62\nEVALSYM DM58 CLIST(ADDR(ADM58))\nRUNCHAIN ADDR(JD62) LINK(X'04') NAME(JD62)  +\n         NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102LTE": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 2 INDEX LEN\n/* #102LTT *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  L     TTTTT EEEEE                  ***/\n/***  #####  11   0   0     2 L       T   E                      ***/\n/***   # #    1   0   0    2  L       T   EEEE                   ***/\n/***  #####   1   0   0   2   L       T   E                      ***/\n/***   # #   111   000  22222 LLLLL   T   EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  DISPLAY A LOGICAL TERMINAL ELEMENT                         ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***  USES:    #102LTEF                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE ' '\nNOTE '+-------------------------------------------------+'\nNOTE '| LOGICAL TERMINAL ELEMENT ANALYSIS       #102LTE |'\nNOTE '+-------------------------------------------------+'\nNOTE ' '\nEVAL LTES+0 ENTRY(&INDEX) LENGTH(&LEN) CHARACTER CLIST(STORAGE(TEMP))\nSET &LTEID = &SUBSTR(1:8,&TEMP)\nNOTE 'LTERM ID IS........................&LTEID'\n%#102LTEF\nLIST LTES ENTRY(&INDEX) LENGTH(&LEN)\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102LTEF": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\xa1\\x00\\xa1\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102LTEF ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  L     TTTTT EEEEE FFFFF            ***/\n/***  #####  11   0   0     2 L       T   E     F                ***/\n/***   # #    1   0   0    2  L       T   EEEE  FFFF             ***/\n/***  #####   1   0   0   2   L       T   E     F                ***/\n/***   # #   111   000  22222 LLLLL   T   EEEEE F                ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102CSAF CLIST DISPLAYS THE SYSTEM WIDE FLAGS          ***/\n/***                                                             ***/\n/***  USED BY: #102LTE                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\n/*******************************************************************/\n/*** LTE FLAG 1 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE LTEFLAG1 LTES+29 LENGTH(1)\nEVAL  LTES+29 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE '   '\nNOTE '-----------------------------------------------------------------'\nNOTE 'LTE FLAGS DECODING SUMMARY IS:'\nIF &BIT8 = 1 THEN NOTE '    JOURNAL THIS TRANSACTION.'\nIF &BIT7 = 1 THEN NOTE '    NEW TRANSACTION IS BEING STARTED.'\nIF &BIT6 = 1 THEN NOTE '    TASK IS BEING INVOKED INTERNALLY.'\nIF &BIT5 = 1 THEN NOTE '    LTE IS ON MASTERS READY QUEUE.'\nIF &BIT4 = 1 THEN NOTE '    MSTR SHOULD NOT WRITE INITIAL MESSAGE.'\nIF &BIT3 = 1 THEN NOTE '    LAST I/O WAS A WRITE.'\nIF &BIT2 = 1 THEN NOTE '    TERMINAL IS OWNED BY MASTER.'\nIF &BIT1 = 1 THEN NOTE '    TRANSLATE INPUT TO UPPER CASE.'\n/*******************************************************************/\n/*** LTE FLAG 2 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE LTEFLAG2 LTES+2A LENGTH(1)\nEVAL  LTES+2A CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TERMINAL IS OWNED BY INTERACT DRIVER.'\nIF &BIT7 = 1 THEN NOTE '    FIRST PROMPT HAS TAKEN PLACE.'\nIF &BIT6 = 1 THEN NOTE '    COMMANDS OK AFTER SHUTDOWN.'\nIF &BIT5 = 1 THEN NOTE '    A SENDMSG IS QUEUED FOR THIS USERID.'\nIF &BIT4 = 1 THEN NOTE '    A SENDMSG IS QUEUED FOR THIS LTERM.'\nIF &BIT3 = 1 THEN NOTE '    THIS LTERM IS A PRINTER.'\nIF &BIT2 = 1 THEN NOTE '    TIRH IS TO SWAP PTE'S.'\nIF &BIT1 = 1 THEN NOTE '    LTERM IS OUT OF SERVICE.'\n/*******************************************************************/\n/*** LTE FLAG 3 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE LTEFLAG3 LTES+2B LENGTH(1)\nEVAL  LTES+2B CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BYTEHEX =  4 THEN +\n   NOTE '    ACTION:WRITE ABEND CODE OF PREVIOUS TASK.'\nIF &BYTEHEX =  8 THEN  +\n   NOTE '    ACTION:WRITE ENTER NEXT TASK CODE.'\nIF &BYTEHEX = 12 THEN  +\n   NOTE '    ACTION:WRITE UNDEFINED TASK CODE MESSAGE.'\nIF &BYTEHEX = 16 THEN  +\n   NOTE '    ACTION:WRITE TASK-SECURITY VIOLATION MAP.'\nIF &BYTEHEX = 20 THEN  +\n   NOTE '    ACTION:WRITE TDE SPECIFIED MAP.'\nIF &BYTEHEX = 24 THEN  +\n   NOTE '    ACTION:INTERNAL TASK BEING INVOKED FROM TERMINAL.'\nIF &BYTEHEX = 28 THEN  +\n   NOTE '    ACTION:SYSTEM BEING QUIESCED.'\nIF &BYTEHEX = 32 THEN  +\n   NOTE '    ACTION:SIGNON USER AND/OR TERMINAL LINE I/O SESSION.'\nIF &BYTEHEX = 36 THEN  +\n   NOTE '    ACTION:PREPARE TERMINAL FOR A #TREQ READ.'\nIF &BYTEHEX = 40 THEN  +\n   NOTE '    ACTION:WAIT FOR TERM OPER TO FINISH VIEWING LINEOUTS.'\nIF &BYTEHEX = 44 THEN  +\n   NOTE '    ACTION:TASK OUT OF SERVICE.'\nIF &BYTEHEX = 48 THEN +\n   NOTE '    ACTION:PROGRAM OUT OF SERVICE.'\nIF &BYTEHEX = 52 THEN  +\n   NOTE '    ACTION:INVOKE RESOURCE TIMEOUT PROGRAM.'\nIF &BYTEHEX = 56 THEN  +\n   NOTE '    ACTION:PRINT SCREEN CONTENTS.'\nIF &BYTEHEX = 60 THEN  +\n   NOTE '    ACTION:WRITE QUEUED BLAST MESSAGE.'\nIF &BYTEHEX = 64 THEN  +\n   NOTE '    ACTION:GET NEXT COMMAND LINE ENTRY FROM IDD (CLIST).'\nIF &BYTEHEX = 68 THEN  +\n   NOTE '    ACTION:MAP PAGING SESSION.'\nIF &BYTEHEX = 72 THEN  +\n   NOTE '    ACTION:MAXIMUM CONCURRENT TASK CONDITION.'\nIF &BYTEHEX = 76 THEN  +\n   NOTE '    ACTION:MODEENT GROUP REQUIRES INITIALIZATION.'\nIF &BYTEHEX = 80 THEN  +\n   NOTE '    ACTION:HANDLE LU6.2 FUNC MANAGEMENT HEADER TYPE 5.'\n/*******************************************************************/\n/*** LTE LINE I/O FLAG PROCESSING                                ***/\n/*******************************************************************/\nEQUATE LTEFLAG4 LTES+4C LENGTH(1)\nEVAL  LTES+4C CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    DO NOT PRINT BANNER PAGE.'\nIF &BIT7 = 1 THEN NOTE '    NO MORE RECORDS IN REPORT QUEUE.'\nIF &BIT6 = 1 THEN NOTE '    FIRST REPORT Q RECORD HAS BEEN READ.'\nIF &BIT5 = 1 THEN NOTE '    PRINT TASK WANTS TO USE PRINTER.'\nIF &BIT4 = 1 THEN NOTE '    READ NEXT QUEUE RECORD FOR OPT & LEN.'\nIF &BIT3 = 1 THEN NOTE '    INTERUPT PRINTER.'\nIF &BIT2 = 1 THEN NOTE '    CANCEL PRINTER.'\nIF &BIT1 = 1 THEN NOTE '    DRAIN PRINTER.'\n/*******************************************************************/\n/*** LTE USER TRACE FLAG                                         ***/\n/*******************************************************************/\nEQUATE LTEFLAG5 LTES+70 LENGTH(1)\nEVAL  LTES+70 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    COMMAND INITIATED BATCH LTERM.'\nIF &BIT7 = 1 THEN NOTE '    TERMINAL INITIATED BATCH LTERM.'\nIF &BIT6 = 1 THEN NOTE '    DCUF TEST MODE ENABLED.'\nIF &BIT5 = 1 THEN NOTE '    LTE IS ON SOME TASK TCETNLTE.'\nIF &BIT4 = 1 THEN NOTE '    SAVE SCREEN IF BLASTED.'\nIF &BIT3 = 1 THEN NOTE '    WRAP AROUND TRACE BUFFER; DON'T SAVE.'\nIF &BIT2 = 1 THEN NOTE '    END USER TRACE.'\nIF &BIT1 = 1 THEN NOTE '    USER TRACE IS ON.'\n/*******************************************************************/\n/*** LTE MORE FLAGS                                              ***/\n/*******************************************************************/\nEQUATE LTEFLAG6 LTES+94 LENGTH(1)\nEVAL  LTES+94 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    END TRAN STATS AFTER TASK.'\nIF &BIT7 = 1 THEN NOTE '    WRITE TRAN STATS AFTER TASK.'\nIF &BIT6 = 1 THEN NOTE '    DO NOT DO #GETIME FOR WAIT TIME.'\nIF &BIT5 = 1 THEN NOTE '    DEBUG SESSION FOR THIS LTE.'\nIF &BIT4 = 1 THEN NOTE '    PROCESSING COMMAND LIST.'\nIF &BIT3 = 1 THEN NOTE '    MAP PAGING SESSION.'\nIF &BIT2 = 1 THEN NOTE '    SHADOW LTEUPCS.'\nIF &BIT1 = 1 THEN NOTE '    USING EXCEPTION RESPONSE PROTOCOL.'\n/*******************************************************************/\n/*** LTE FLAG 7 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE LTEFLAG7 LTES+F4 LENGTH(1)\nEVAL  LTES+F4 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    LTENECB IS AN INTERNAL ECB.'\nIF &BIT7 = 1 THEN NOTE '    NON TERMINAL PSUEDO CONVERSE.'\nIF &BIT6 = 1 THEN NOTE '    LTERM IS FOR SWITCH NETWORK.'\nIF &BIT5 = 1 THEN NOTE '    SWITCH PROTOCOL IS WRITE.'\nIF &BIT4 = 1 THEN NOTE '    SWITCH PROTOCOL IS READ.'\nIF &BIT3 = 1 THEN NOTE '    SWITCH DRIVER IS SWQ QUEUE.'\nIF &BIT2 = 1 THEN NOTE '    BIT2-UNKNOWN FLAG.'\nIF &BIT1 = 1 THEN NOTE '    BIT1-UNKNOWN FLAG.'\nNOTE '-----------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102LTT": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102LTT *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  L     TTTTT TTTTT                  ***/\n/***  #####  11   0   0     2 L       T     T                    ***/\n/***   # #    1   0   0    2  L       T     T                    ***/\n/***  #####   1   0   0   2   L       T     T                    ***/\n/***   # #   111   000  22222 LLLLL   T     T                    ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102LTT CLIST DISPLAY                                  ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***  USES:    #102LTE                                           ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| LOGICAL TERMINAL TABLE ANALYSIS         #102LTT |'\nNOTE '+-------------------------------------------------+'\nEQ CSALTTA  CSA+320 POINTER REMARK('CSA LTT ADDRESS') LENGTH(4) NODROP\nEVAL CSALTTA%+0 UNSIGNED LENGTH(2) CLIST(STORAGE(LTTN))\nEVAL CSALTTA%+2 UNSIGNED LENGTH(2) CLIST(STORAGE(LTTELEN))\nEVAL CSALTTA%+C UNSIGNED LENGTH(4) CLIST(STORAGE(LTTLEN))\nEQ LTT CSALTTA% AREA REMARK('CSA LTT BLOCK') LENGTH(X'38') NODROP\nEQ LTEPTR  LTT+8 POINTER REMARK('LTE ADDRESS') LENGTH(4) NODROP\nEQ LTES LTEPTR%  AREA   REMARK('LTE ARRAY ADDRESS')  +\n   LENGTH(&LTTELEN)  DIMENSION(&LTTN) NODROP\nSTACK LTT REMARK('LTT - LOGICAL TERMINAL TABLE')\nLIST LTT\nDO I = 1 TO &LTTN\n   %#102LTE &I &LTTELEN\nEND\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102NUC": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00+\\x00+\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102NUC *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  N   N U   U  CCCC                  ***/\n/***  #####  11   0   0     2 NN  N U   U C                      ***/\n/***   # #    1   0   0    2  N N N U   U C                      ***/\n/***  #####   1   0   0   2   N  NN U   U C                      ***/\n/***   # #   111   000  22222 N   N  UUU   CCCC                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102NUC CLIST DISPLAYS THE NUCLEUS LOAD TABLE ENTRY.   ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+--------------------------------------------------+' PAGE\nNOTE '| NUCLEUS LOAD TABLE ENTRIES               #102NUC |'\nNOTE '+--------------------------------------------------+'\nNOTE ' '\nNOTE '  MODULE    ADDRESS  '\nNOTE ' --------   -------- '\nEQ NLB  CSA+390% AREA REMARK('NUCLEUS LOAD TABLE ENTRIES') +\nLENGTH(4) NODROP\nEQ NLE NLB+0% AREA LENGTH(X'0C')\nEVAL NLB+4 CLIST(STORAGE(NLECNT)) LENGTH(2) UNSIGNED\nGETNLE:EVAL NLE+0 CLIST(STORAGE(NLEMOD)) LENGTH(8) CHAR\nEVAL NLE+8 CLIST(STORAGE(NLEMADR)) LENGTH(4) POINTER\nEVAL NLE+F CLIST(STORAGE(NLETYPE)) LENGTH(1) UNSIGNED\nIF  &NLETYPE NE 16 AND &NLT EQ NLT  THEN GOTO GETNEXT\nELSE DO\n   WRITENLE:EQUATE &NLEMOD &NLEMADR..  AREA\n   NOTE ' &NLEMOD   &NLEMADR '\n   SET &NLECNT = (&NLECNT - 1)\nEND\nGETNEXT: +\nIF &NLECNT > 0 THEN DO\n   EVALSYM NLE CLIST(ADDRESS(NLEA)  DECIMAL)\n   SET &NLECUR = (&NLEA + 16)\n   INTEGER &NLECUR  CLIST (STORAGE(NLEFWD)) LENGTH(8)\n   DROPSYM NLE PURGE NOSUMMARY\n   EQUATE NLE &NLEFWD..\n   GOTO GETNLE\nEND\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102PR60": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\'_\\x00\\x92\\'_\\t\\x00\\x00\"\\x00\"\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102PR60 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  PPPP  RRRR   666   000             ***/\n/***  #####  11   0   0     2 P   P R   R 6     0   0            ***/\n/***   # #    1   0   0    2  PPPP  RRRR  6666  0   0            ***/\n/***  #####   1   0   0   2   P     R  R  6   6 0   0            ***/\n/***   # #   111   000  22222 P     R   R  666   000             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102PR60 CLIST DISPLAYS THE DMCL AREA MAPPING ELEMENTS ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| DMCL AREA MAPPING ELEMENTS              #102PR60|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ PR60 DM58+14% AREA REMARK('DMCL AREA MAPPING ELEMENT')         +\n   NODROP LENGTH(90)\nSTACK PR60\nEVALSYM DM58 CLIST(ADDR(ADM58))\nRUNCHAIN ADDR(PR60) LINK(X'04') NAME(PR60)  +\n         NULL(X'&ADM58') MASK(X'FFFFFFFF')  +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102RCEF": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x01\\x81\\x01\\x81\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 385, "newlines": 385, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102RCEF ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  RRRR   CCCC EEEEE FFFFF            ***/\n/***  #####  11   0   0     2 R   R C     E     F                ***/\n/***   # #    1   0   0    2  RRRR  C     EEEE  FFFF             ***/\n/***  #####   1   0   0   2   R  R  C     E     F                ***/\n/***   # #   111   000  22222 R   R  CCCC EEEEE F                ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102RCEF CLIST MAPS THE RCE FLAGS TO ENGLISH TEXT      ***/\n/***  AND PLACES THE RCE ON THE STACK FOR BROWSE.                ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102RLEC                                          ***/\n/***           #102TCE                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\nSTACK X REMARK('RCE')\nEQ RLEPTR X AREA REMARK('RLE->RCE POINTER') LENGTH(4) NODROP\nEQ RCE RLEPTR+8% AREA REMARK('RCE CONTROL BLOCK') LENGTH(X'18') NODROP\nLIST RCE\nEVAL RCE+0              LENGTH(1) CLIST(STORAGE(BYTEHEX))\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\nEVAL RCE+2  UNSIGNED    LENGTH(2) CLIST(STORAGE(#RLE))\nEVAL RCE+4  UNSIGNED    LENGTH(4) CLIST(STORAGE(TASK#))\nEVAL RCE+8  HEXADECIMAL LENGTH(4) CLIST(STORAGE(RCE1))\nEVAL RCE+8  HEXADECIMAL LENGTH(1) CLIST(STORAGE(RCE1HI))\nEVAL RCE+9  HEXADECIMAL LENGTH(3) CLIST(STORAGE(RCE1LOW))\nEVAL RCE+C  HEXADECIMAL LENGTH(4) CLIST(STORAGE(RCE2))\nEVAL RCE+C  CHARACTER   LENGTH(8) CLIST(STORAGE(RCE2CHAR))\nEVAL RCE+C  HEXADECIMAL LENGTH(1) CLIST(STORAGE(RCE2HI))\nEVAL RCE+D  HEXADECIMAL LENGTH(3) CLIST(STORAGE(RCE2LOW))\nEVAL RCE+10 HEXADECIMAL LENGTH(4) CLIST(STORAGE(RCE3))\nEVAL RCE+10 CHARACTER   LENGTH(4) CLIST(STORAGE(RCE3CHAR))\nEVAL RCE+10 HEXADECIMAL LENGTH(1) CLIST(STORAGE(RCE3HI))\nEVAL RCE+11 HEXADECIMAL LENGTH(3) CLIST(STORAGE(RCE3LOW))\nEVAL RCE+14 HEXADECIMAL LENGTH(4) CLIST(STORAGE(RCE4))\nEVAL RCE+14 HEXADECIMAL LENGTH(1) CLIST(STORAGE(RCE4HI))\nEVAL RCE+15 HEXADECIMAL LENGTH(3) CLIST(STORAGE(RCE4LOW))\nNOTE 'RCE FLAG DECODING SUMMARY:'\nSELECT &BYTEDEC\n   WHEN (1) DO\n      NOTE '    STORAGE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      EVAL RCE+1 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\n      INTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC1)) UNSIGNED\n      %BLSUFLAG &BYTEDEC1\n      SELECT &BIT8\n         WHEN (0) NOTE '    STORAGE IS NOT KEPT ACROSS TASKS'\n         WHEN (1) NOTE '    STORAGE IS KEPT ACROSS TASKS'\n      END\n      IF &BYTEDEC1 > 128 THEN SET &BYTEDEC1 = &BYTEDEC1 - 128\n      NOTE '    STORAGE POOL ID IS.........................&BYTEDEC1'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      INTEGER X'&RCE1HI' CLIST(STORAGE(BYTEDEC1)) UNSIGNED\n      %BLSUFLAG &BYTEDEC1\n      SELECT &BIT8\n         WHEN (0) NOTE '    STORAGE IS NOT RELOCATABLE'\n         WHEN (1) NOTE '    STORAGE IS RELOCATABLE'\n      END\n      INTEGER X'&RCE1LOW' CLIST(STORAGE(BYTEDEC2)) UNSIGNED\n      NOTE '    RESOURCE LENGTH IS.........................&BYTEDEC2 '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      INTEGER X'&RCE2HI' CLIST(STORAGE(BYTEDEC1)) UNSIGNED\n      %BLSUFLAG &BYTEDEC1\n      SELECT &BIT8\n         WHEN (0) NOTE '    STORAGE IS CURRENTLY IN'\n         WHEN (1) NOTE '    STORAGE IS CURRENTLY OUT'\n      END\n      INTEGER X'&RCE2' CLIST(STORAGE(BYTEDEC2)) UNSIGNED\n      NOTE '    RESOURCE ADDRESS IS........................&BYTEDEC2 '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    SYMBOLIC STORAGE ID IS.....................&RCE3CHAR'\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    SCT ADDRESS IS.............................X''&RCE4'' '\n   END\n   WHEN (2) DO\n      NOTE '    PROGRAM ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      EVAL RCE+1 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\n      INTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC1)) UNSIGNED\n      %BLSUFLAG &BYTEDEC1\n      IF &BIT1 = 1 THEN NOTE '    PROGRAM IN USE BY ANOTHER TASK'\n      IF &BIT2 = 1 THEN NOTE '    PROGRAM IS BEING DEBUGGED'\n      IF &BIT3 = 1 THEN NOTE '    PROGRAM IS CURRENTLY OVERLAYED'\n      IF &BIT4 = 1 THEN NOTE '    PROGRAM MAYBE OVERLAID IF NE C.'\n      IF &BIT8 = 1 THEN NOTE '    PROGRAM TO BE PURGED - NEW COPY'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    PROGRAM LENGTH IS..........................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    PROGRAM ADDRESS IS.........................X''&RCE2'' '\n      EVAL RCE+10% CHARACTER LENGTH(8) CLIST(STORAGE(RCEPGM))\n      NOTE '    PROGRAM NAME IS............................&RCEPGM '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    PDE ADDRESS IS.............................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    PDT ADDRESS IS.............................X''&RCE4'' '\n   END\n   WHEN (3) DO\n      NOTE '    FILE CONTROL ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    SECOND VARIABLE WORD IS....................X''&RCE2'' '\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (4) DO\n      NOTE '    SCRATCH ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    SCRATCH INDEX AREA ADDRESS IS..............X''&RCE1'' '\n      NOTE '    SCRATCH INDEX AREA ID IS...................&RCE2CHAR'\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (5) DO\n      NOTE '    INTERNAL RUN-UNIT ALLOCATION'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    INTERNAL RUN UNIT AREA ADDRESS IS..........X''&RCE2'' '\n      NOTE '    SUBSCHEMA AREA CONTOL ADDRESS IS...........X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (6) DO\n      NOTE '    QUEUE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    QUEUE CONTROL ELEMENT ADDRESS IS...........X''&RCE2'' '\n      EVAL RCE+C% CHARACTER LENGTH(16) CLIST(STORAGE(RCEQUE))\n      NOTE '    PROGRAM NAME IS............................&RCEQUE '\n      NOTE '    QUEUE ELEMENT PREVIOUS FUNCTION IS.........X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (7) DO\n      NOTE '    A CHUNK TO DUMP IF TASK ABENDS'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    ADDRESS TO DUMP IF TASK ABENDS IS..........X''&RCE2'' '\n      NOTE '    LENGTH OF STORAGE TO DUMP IS...............X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (8) DO\n      NOTE '    MESSAGE QUEUE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    MESSAGE QUEUE LENGTH IS....................X''&RCE1'' '\n      NOTE '    DATABASE KEY IS............................X''&RCE2'' '\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (9) DO\n      EQ   $SON$&RCE3 &RCE2.. AREA REMARK('SON CONTROL BLOCK') +\n           LENGTH(X'6C') NODROP\n      NOTE '    SIGNON ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    SIGNON ELEMENT ADDRESS IS..................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    LOGICAL TERMINAL ELEMENT ADDRESS IS........X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OTP USER CONTROL BLOCK ADDRESS IS..........X''&RCE4'' '\n   END\n   WHEN (10) DO\n      NOTE '    ENQUEUE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    ENQUEUE CONTROL ELEMENT IS.................X''&RCE2'' '\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (11) DO\n      NOTE '    SINGLE THREADED RESOURCE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      EVAL RCE+1 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\n      INTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC1)) UNSIGNED\n      SELECT &BYTEDEC1\n         WHEN (1) NOTE '    RESOURCE IS LOADER'\n         WHEN (2) NOTE '    RESOURCE IS LOG FILE'\n         WHEN (3) NOTE '    RESOURCE IS TRANSACTION LOG FILE'\n         WHEN (4) NOTE '    RESOURCE IS SCRATCH AREA'\n      END\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    NUMBER OF TASKS WAITING FOR RESOURCE IS....X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OWNER DCE ADDRESS IS.......................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    RESOURCE ECB ADDRESS IS....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (12) DO\n      NOTE '    ECB ID ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    GENERAL ECB IS.............................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    SYMBOLIC ECB ID IS.........................&RCE3CHAR'\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (13) DO\n      NOTE '    MSG DICT QUEUE ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    MSG DICT QUEUE ELEMENT ADDRESS IS..........X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    RLE ANCHOR ADDRESS FOR RCE IS..............X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (14) DO\n      NOTE '    IDMS RUN UNIT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    VARIABLE SUBSCHEMA ADDRESS IS..............X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (15) DO\n      NOTE '    INTERVAL CONTROL ELEMENT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    INVERVAL CONTROLL ELEMENT IS...............X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (16) DO\n      NOTE '    BLL LIST (COBOL SUPPORT)'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    BLL LIST ADDRESS IS........................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    DISPLACEMENT OF FIRST BLL FOR RSRC IS......X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    DISPLACEMENT OF SECOND BLL FOR RSRC IS.....X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    TASK GLOBAL TABLE ADDRESS IS...............X''&RCE4'' '\n   END\n   WHEN (17) DO\n      NOTE '    BLAST MESSAGE BUFFER'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    MESSAGE BUFFER LENGTH IS...................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    ADDRESS TO DUMP IF TASK ABENDS IS..........X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    NUMBER OF TERMINALS QUEUED TO MSG IS.......X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (18) DO\n      NOTE '    DDS LONG TERM RESOURCES'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    DDS TARGET FOR LONG TERM RESOURCES IS......&RCE2CHAR'\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (19) DO\n      NOTE '    RELOCATABLE STORAGE'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    ADDRESS OF TYPE 1 RCE FOR STORAGE IS.......X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    RELOCATABLE STORAGE ADDRESS IS.............X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (20) DO\n      NOTE '    OTP IOP AVAILABLE'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OTP IOP ADDRESS IS.........................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (21) DO\n      NOTE '    OTP PAGE BUFFER'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OTP PAGE BUFFER ADDRESS IS.................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (22) DO\n      NOTE '    OTP SPECIFIC BUFFER WAIT'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OTP BUFFER WAIT ADDRESS IS.................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (23) DO\n      NOTE '    TRESPASSER FEB'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    OTP TRESSPASSER FEB ADDRESS IS.............X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   WHEN (255) DO\n      NOTE '    UNINITIALIZED RCE TYPE'\n      NOTE '    NUMBER OF RLE''S OWNING THIS RCE IS.........&#RLE'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      /* RCE1 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      /* RCE2 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    SECOND VARIABLE WORD IS....................X''&RCE2'' '\n      /* RCE3 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      /* RCE4 VARIABLE OVERLAY PROCESSING                             */\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\n   OTHERWISE DO\n      NOTE '    UNKNOWN RCE TYPE ENCOUNTERED'\n      NOTE '    THIS RCE WAS CREATED BY TASK ID............&TASK#'\n      NOTE '    FIRST FIXED WORD IS.........................&#RLE'\n      NOTE '    SECOND FIXED WORD IS.......................&#TASK#'\n      NOTE '    FIRST VARIABLE WORD IS.....................X''&RCE1'' '\n      NOTE '    SECOND VARIABLE WORD IS....................X''&RCE2'' '\n      NOTE '    THIRD VARIABLE WORD IS.....................X''&RCE3'' '\n      NOTE '    FOURTH VARIABLE WORD IS....................X''&RCE4'' '\n   END\nEND\nNOTE '   '\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102REG": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00'\\x00'\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102REG *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  RRRR  EEEEE  GGGG                  ***/\n/***  #####  11   0   0     2 R   R E     G                      ***/\n/***   # #    1   0   0    2  RRRR  EEEE  G  GG                  ***/\n/***  #####   1   0   0   2   R  R  E     G   G                  ***/\n/***   # #   111   000  22222 R   R EEEEE  GGGG                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102REG CLIST DISPLAYS THE REGION MAP.                 ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+--------------------------------------------------+' PAGE\nNOTE '| REGION MAP ENTRIES                       #102REG |'\nNOTE '+--------------------------------------------------+'\nNOTE ' '\nNOTE '  MODULE    ADDRESS    '\nNOTE ' --------   --------   '\nEQ OPT CSA+330% AREA REMARK('OPTIONS TABLE') LENGTH(4) NODROP\nEVAL OPT+104 CLIST(STORAGE(RMAPCNT)) LENGTH(2) UNSIGNED\nEQ RMAPA CSA+34C% AREA LENGTH(X'0C')\nGETRMAP:EVAL RMAPA+0 CLIST(STORAGE(RMAPID)) LENGTH(8) CHAR\nEVAL RMAPA+8 CLIST(STORAGE(RMAPIDA)) LENGTH(4) POINTER\nWRITERMAP:EQUATE &RMAPID &RMAPIDA..  AREA\nNOTE ' &RMAPID   &RMAPIDA    '\nSET &RMAPCNT = (&RMAPCNT - 1)\nIF  &RMAPCNT = 0 THEN GOTO BYEBYE\nELSE DO\n   EVALSYM RMAPA CLIST(ADDRESS(RMAPADDR)DECIMAL)\n   SET &RMAPCUR = (&RMAPADDR + 12)\n   INTEGER &RMAPCUR  CLIST (STORAGE(RMAPFWD)) LENGTH(8)\n   DROPSYM RMAPA PURGE NOSUMMARY\n   EQUATE RMAPA &RMAPFWD..\n   GOTO GETRMAP\nEND\nBYEBYE: +\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102RLEC": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x009\\x009\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102RLEC ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  RRRR  L     EEEEE  CCCC            ***/\n/***  #####  11   0   0     2 R   R L     E     C                ***/\n/***   # #    1   0   0    2  RRRR  L     EEEE  C                ***/\n/***  #####   1   0   0   2   R  R  L     E     C                ***/\n/***   # #   111   000  22222 R   R LLLLL EEEEE  CCCC            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102RLEC CLIST DISPLAYS ALL OF THE RLE/RCE CHAINS IN   ***/\n/***  THE CSA.                                                   ***/\n/***                                                             ***/\n/***  USED BY: #102CSA                                           ***/\n/***  USES:    #102RCEF                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CSA: SIGNON RLE/RCE ANALYSIS            #102RLEC|'\nNOTE '+-------------------------------------------------+'\nEQ CSASIGNA CSA+2B4 AREA REMARK('CSA RLE/RCE SIGNON PTR')  +\n   LENGTH(4) NODROP\nEQ RLEC CSASIGNA%+0 AREA REMARK('CSA RLE/RCE SIGNON BLOCKS') +\n   LENGTH(12) NODROP\nEVAL CSASIGNA%+4 CLIST(STORAGE(RLEZ))LENGTH(4)\nRUNCHAIN ADDR(RLEC) LINK(X'00') NAME(RLEC) NULL(X'&RLEZ') +\n         MASK(X'FFFFFFFF') NODISPLAY(MACHINE REQUEST) +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102RCEF))\nNOTE '--------------------------------------------------------------'\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CSA: SINGLE THREAD RLE/RCE ANALYSIS     #102RLEC|'\nNOTE '+-------------------------------------------------+'\nEQ CSASINGA CSA+2C0 AREA REMARK('CSA RLE/RCE SINGLE THREAD PTR')  +\n   LENGTH(4) NODROP\nEQ RLEC CSASINGA%+0 AREA REMARK('CSA RLE/RCE SINGLE THREAD BLOCKS') +\n   LENGTH(12) NODROP\nEVAL CSASINGA%+4 CLIST(STORAGE(RLEZ))LENGTH(4)\nRUNCHAIN ADDR(RLEC) LINK(X'00') NAME(RLEC) NULL(X'&RLEZ') +\n         MASK(X'FFFFFFFF') NODISPLAY(MACHINE REQUEST) +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102RCEF))\nNOTE '--------------------------------------------------------------'\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| CSA: SYSTEM RLE/RCE ANALYSIS            #102RLEC|'\nNOTE '+-------------------------------------------------+'\nEQ CSASRLEA CSA+2C0 AREA REMARK('CSA RLE/RCE SYSTEM CHAIN PTR')  +\n   LENGTH(4) NODROP\nEQ RLEC CSASRLEA%+0 AREA REMARK('CSA RLE/RCE SYSTEM CHAIN BLOCKS') +\n   LENGTH(12) NODROP\nEVAL CSASRLEA%+4 CLIST(STORAGE(RLEZ))LENGTH(4)\nRUNCHAIN ADDR(RLEC) LINK(X'00') NAME(RLEC) NULL(X'&RLEZ') +\n         MASK(X'FFFFFFFF') NODISPLAY(MACHINE REQUEST) +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102RCEF))\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102SCA": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00>\\x00>\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102SCA *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222   SSSS  CCCC  AAA                   ***/\n/***  #####  11   0   0     2 S     C     A   A                  ***/\n/***   # #    1   0   0    2   SSS  C     AAAAA                  ***/\n/***  #####   1   0   0   2       S C     A   A                  ***/\n/***   # #   111   000  22222 SSSS   CCCC A   A                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102SCA CLIST DISPLAYS THE SUBTASK CONTROL AREA.       ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:    #102TCE                                           ***/\n/***           #102TCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+--------------------------------------------------+' PAGE\nNOTE '| SUB TASK ANALYSIS                        #102SCA |'\nNOTE '+--------------------------------------------------+'\nEVAL CSA+480  LENGTH(2) UNSIGNED CLIST(STORAGE(SCANUM))\nSET &SCATOT = (640 * &SCANUM)  /*DECIMAL SCALEN  X SCALEN*/\nSET &SCALEN = 0\nSET &SCACBL = 0\nINTEGER &SCALEN  CLIST (STORAGE(SCACBL)) LENGTH(4) POINTER(4)\nEQ SCA CSA+518%+&SCACBL AREA LENGTH(X'280') DROP\nNOTE '==> NUMBER OF SUBTASKS = &SCANUM  '\nSHOWSCA: +\nEVAL  CSA+518%+&SCACBL+128 CLIST(STORAGE(SCANAME)) CHAR LENGTH(8)\nNOTE '==> SCA - SUBTASK CONTOL AREA OF SUBTASK &SCANAME'\nLIST (SCA) LENGTH(X'280')\nSTACK SCA REMARK('SUBTASK CONTROL AREA FOR SUBTASK &SCANAME')\nEQUATE SAVE SCA+4C%  AREA REMARK('SAVE AREA IN SCA') DROP\nEQUATE OS00SAV SCA+C0% AREA REMARK('OS00 SAVE AREA IN SCA') DROP\nNOTE '==> O.S. SAVE AREA FOR SUBTASK &SCANAME'\nLIST SCA+&SCACBL+4C% LENGTH(72)\nNOTE '==> OS00 SAVE AREA FOR SUBTASK &SCANAME '\nLIST SCA+&SCACBL+C0% LENGTH(96)\nEVAL  CSA+518%+&SCACBL+8   CLIST(STORAGE(TCEADDR))\nIF &TCEADDR = 0 THEN DO\n   NOTE '==> NO ACTIVE TCE FOR SUBTASK &SCANAME   '\n   GOTO NEXTSCA\nEND\nELSE DO\n   NOTE '==> ACTIVE TCE FOR SUBTASK &SCANAME   '\n   %#102TCE\n   NEXTSCA:SET &SCANUM  = (&SCANUM - 1)\n   IF &SCANUM  EQ 0 THEN GOTO BYEBYE\n   ELSE DO\n      SET &SCALEN = (&SCALEN + 640)\n      INTEGER &SCALEN  CLIST (STORAGE(SCACBL)) LENGTH(4) POINTER(4)\n      EQ SCA CSA+518%+&SCACBL AREA REMARK('SUBTASK CONTROL AREA') +\n         LENGTH(X'280') DROP\n      GOTO SHOWSCA\n   END\nEND\nBYEBYE: +\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102TCE": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00S\\x00S\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102TCE *********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  TTTTT  CCCC EEEEE                  ***/\n/***  #####  11   0   0     2   T   C     E                      ***/\n/***   # #    1   0   0    2    T   C     EEEE                   ***/\n/***  #####   1   0   0   2     T   C     E                      ***/\n/***   # #   111   000  22222   T    CCCC EEEEE                  ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102TCE CLIST DISPLAYS THE TCE FOR THE ASSOCIATED      ***/\n/***  CONTROL BLOCK (IF APPLICABLE) AND DISPLAYS THE RLE/RCE     ***/\n/***  ALLOCATED TO THE TCE.                                      ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS #102SCA                                  ***/\n/***           #102DCEC                                          ***/\n/***           #102DCET                                          ***/\n/***                                                             ***/\n/***  USES:    #102TCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nDROPSYM (TCE,TCETRLEA,TCETRLEZ) NOSUMMARY PURGE\nDROPSYM (TCEPRLEA,TCEPRLEZ)     NOSUMMARY PURGE\nDROPSYM (TCESRLEA,TCESRLEZ)     NOSUMMARY PURGE\nDROPSYM (TCEQRLEA,TCEQRLEZ)     NOSUMMARY PURGE\nEQUATE TCE &TCEADDR..\nEVALSYM TCE CLIST(ADDRESS(CBMASK))\nLIST TCE LENGTH(X'1E0')\n%#102TCEF\nEQ TCETRLEA TCE+8% AREA REMARK('TCE TASK RLE CHAIN') LENGTH(12) NODROP\nEQ TCETRLEZ TCE+C% AREA REMARK('TCE TASK RLE CHAIN') LENGTH(12) NODROP\nEVALSYM TCETRLEZ CLIST(ADDRESS(CBMASK))\nNOTE '+-------------------------------------------------+'\nNOTE '| TCE TASK RLE CHAIN                      #102TCE |'\nNOTE '+-------------------------------------------------+'\nRUNCHAIN ADDR(TCETRLEA) LINK(X'00') NAME(RLE)   +\n         MASK(X'FFFFFFFF') NULL(X'&CBMASK') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102RCEF))\nEQ TCEPRLEA TCE+10% AREA  REMARK('TCE PROGRAM RLE CHAIN') +\nLENGTH(12) NODROP\nEQ TCEPRLEZ TCE+14% AREA  REMARK('TCE PROGRAM RLE CHAIN') +\nLENGTH(12) NODROP\nEVALSYM TCEPRLEZ CLIST(ADDRESS(CBMASK))\nNOTE '+-------------------------------------------------+'\nNOTE '| TCE PROGRAM RLE CHAIN                   #102TCE |'\nNOTE '+-------------------------------------------------+'\nRUNCHAIN ADDR(TCEPRLEA) LINK(X'00') NAME(RLE)  +\n         MASK(X'FFFFFFFF') NULL(X'&CBMASK') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE) +\n         EXEC((%#102RCEF))\nEQ TCESRLEA TCE+18% AREA  REMARK('TCE SCRATCH RLE CHAIN') +\nLENGTH(12) NODROP\nEQ TCESRLEZ TCE+1C% AREA  REMARK('TCE SCRATCH RLE CHAIN') +\nLENGTH(12) NODROP\nEVALSYM TCESRLEZ CLIST(ADDRESS(CBMASK))\nNOTE '+-------------------------------------------------+'\nNOTE '| TCE SCRATCH RLE CHAIN                   #102TCE |'\nNOTE '+-------------------------------------------------+'\nRUNCHAIN ADDR(TCESRLEA) LINK(X'00') NAME(RLE)    +\n         MASK(X'FFFFFFFF') NULL(X'&CBMASK') +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE REMARK STORAGE) +\n         EXEC((%#102RCEF))\nEQ TCEQRLEA TCE+20% AREA  REMARK('TCE QUEUE RLE CHAIN') +\nLENGTH(12) NODROP\nEQ TCEQRLEZ TCE+24% AREA  REMARK('TCE QUEUE RLE CHAIN') +\nLENGTH(12) NODROP\nEVALSYM TCEQRLEZ CLIST(ADDRESS(CBMASK))\nNOTE '+-------------------------------------------------+'\nNOTE '| TCE QUEUE RLE CHAIN                     #102TCE |'\nNOTE '+-------------------------------------------------+'\nRUNCHAIN ADDR(TCEQRLEA) LINK(X'00') NAME(RLE)   +\n         MASK(X'FFFFFFFF') NULL(X'&CBMASK') +\n         DISPLAY(NOMACHINE REMARK STORAGE) +\n         NODISPLAY(MACHINE REQUEST)         +\n         EXEC((%#102RCEF))\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102TCEF": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00v\\x00v\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102TFLG ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  TTTTT FFFFF L      GGGG            ***/\n/***  #####  11   0   0     2   T   F     L     G                ***/\n/***   # #    1   0   0    2    T   FFFF  L     G  GG            ***/\n/***  #####   1   0   0   2     T   F     L     G   G            ***/\n/***   # #   111   000  22222   T   F     LLLLL  GGGG            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102TFLC CLIST DISPLAYS THE TCE FLAGS IN ENGLISH.      ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***           #102DCEC                                          ***/\n/***           #102DCET                                          ***/\n/***           #102TCE                                           ***/\n/***                                                             ***/\n/***  USES:    BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\n/*******************************************************************/\n/*** TCE FLAG 1 PROCESSING                                       ***/\n/*******************************************************************/\nEQ TCEFLAG1 TCE+84 LENGTH(1)\nEQ TCETASK# TCE+4  LENGTH(1)\nEVAL  TCEFLAG1          LENGTH(1) CLIST(STORAGE(BYTEHEX))\nEVAL  TCETASK# UNSIGNED LENGTH(4) CLIST(STORAGE(TASK#))\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nNOTE '   '\nNOTE '-----------------------------------------------------------------'\nNOTE 'TCE TASK ID &TASK# FLAG DECODING SUMMARY IS: '\nIF &BIT8 = 1 THEN NOTE '    NO STORAGE PROTECT FOR CURRENT PROGRAM.'\nIF &BIT7 = 1 THEN NOTE '    STAE EXIT FOR CURRENT LEVEL.'\nIF &BIT6 = 1 THEN NOTE '    STAE EXIT IS PROGRAM.'\nIF &BIT5 = 1 THEN NOTE '    TASK IS CURRENTLY IN USER MODE.'\nIF &BIT4 = 1 THEN NOTE '    TASK IS CURRENTLY ABENDING.'\nIF &BIT3 = 1 THEN NOTE '    ABEND INACTIVE TASK.'\nIF &BIT2 = 1 THEN NOTE '    ABEND RUNAWAY TASK.'\nIF &BIT1 = 1 THEN NOTE '    TASK IS ERUS TASK(IDMS CV).'\n/*******************************************************************/\n/*** TCE FLAG 2 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE TCEFLAG2 TCE+85 LENGTH(1)\nEVAL  TCE+85 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TASK IS BEING TRACED.'\nIF &BIT7 = 1 THEN NOTE '    STACK CHECKING TURNED ON FOR TASK.'\nIF &BIT6 = 1 THEN NOTE '    EXTERNAL TASK REQUESTED ABEND.'\nIF &BIT5 = 1 THEN NOTE '    ABENDS ARE NOT ALLOWED.'\nIF &BIT4 = 1 THEN NOTE '    USER MODE TRACING MODE IS ON.'\nIF &BIT3 = 1 THEN NOTE '    THIS IS A DRIVING TASK.'\nIF &BIT2 = 1 THEN NOTE '    TASK IS EXECUTING STAE EXIT.'\nIF &BIT1 = 1 THEN NOTE '    THIS IS A FACTOTUM TASK.'\n/*******************************************************************/\n/*** TCE FLAG 3 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE TCEFLAG3 TCE+86 LENGTH(1)\nEVAL  TCE+86 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TASK IS PERFORMING A COBOL INIT.'\nIF &BIT7 = 1 THEN NOTE '    PL/1 ISSUED A #ABEND.'\nIF &BIT6 = 1 THEN NOTE '    TASK IS USING ABEND STORAGE STACK.'\nIF &BIT5 = 1 THEN NOTE '    THIS IS A PRINTER TASK.'\nIF &BIT4 = 1 THEN NOTE '    TASK IS THE INTERACT DRIVER.'\nIF &BIT3 = 1 THEN NOTE '    THIS TASK HAS DEADLOCKED.'\nIF &BIT2 = 1 THEN NOTE '    THIS IS THE UCF F.E. PRINT CONTROLLER.'\nIF &BIT1 = 1 THEN NOTE '    TASK HAS A ROLLBACK IN PROGRESS.'\n/*******************************************************************/\n/*** TCE FLAG 4 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE TCEFLAG4 TCE+87 LENGTH(1)\nEVAL  TCE+87 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TASK REQUESTED ABEND THRU RPIOC IN DBMS.'\nIF &BIT7 = 1 THEN NOTE '    SCTECB DMGR''D.'\nIF &BIT6 = 1 THEN NOTE '    TASK STORAGE LOCATION IS ANY.'\nIF &BIT5 = 1 THEN NOTE '    STARTUP AUTOTASK ABENDED.'\nIF &BIT4 = 1 THEN NOTE '    LIMIT WAS DISABLED ON ABEND.'\nIF &BIT3 = 1 THEN NOTE '    TASK TIMEOUT ABEND PENDING.'\nIF &BIT2 = 1 THEN NOTE '    TASK ISSUED A #ABEND DUMP=NO.'\nIF &BIT1 = 1 THEN NOTE '    QUEUE-ATTACHED TASK.'\n/*******************************************************************/\n/*** TCE FLAG 5 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE TCEFLAG5 TCE+88 LENGTH(1)\nEVAL  TCE+88 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TASK BROKE THE RLE THRESHOLD.'\nIF &BIT7 = 1 THEN NOTE '    TASK BROKE THE RCE THRESHOLD.'\nIF &BIT6 = 1 THEN NOTE '    TASK BROKE THE DPE THRESHOLD.'\nIF &BIT5 = 1 THEN NOTE '    TASK BROKE THE ILE THRESHOLD.'\nIF &BIT4 = 1 THEN NOTE '    BIT4-UNKNOWN FLAG.'\nIF &BIT3 = 1 THEN NOTE '    BIT3-UNKNOWN FLAG.'\nIF &BIT2 = 1 THEN NOTE '    SWITCH DRIVER IS SWQ QUEUED.'\nIF &BIT1 = 1 THEN NOTE '    THIS IS A DB/HELOT TASK.'\n/*******************************************************************/\n/*** TCE FLAG 6 PROCESSING                                       ***/\n/*******************************************************************/\nEQUATE TCEFLAG6 TCE+89 LENGTH(1)\nEVAL  TCE+89 CLIST(STORAGE(BYTEHEX)) LENGTH(1)\nINTEGER X'&BYTEHEX' CLIST(STORAGE(BYTEDEC)) UNSIGNED\n%BLSUFLAG &BYTEDEC\nIF &BIT8 = 1 THEN NOTE '    TASK IS A SERVICER DRIVER.'\nIF &BIT7 = 1 THEN NOTE '    SVC SCREENING IS REQUIRED FOR THIS TCE.'\nIF &BIT6 = 1 THEN NOTE '    SVC EMULATION IS ACTIVE.'\nIF &BIT5 = 1 THEN NOTE '    #INCR RUN COUNT OF CURRENT PROGRAM.'\nIF &BIT4 = 1 THEN NOTE '    THIS TCE IS A DB I/O DRIVER.'\nIF &BIT3 = 1 THEN NOTE '    THIS TCE IS A JOURNAL DRIVER TASK.'\nIF &BIT2 = 1 THEN NOTE '    THIS TCE IS A DB I/O TASK.'\nIF &BIT1 = 1 THEN NOTE '    THIS TCE IS A DB I/O READ DRIVER.'\nNOTE '-----------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102TCEG": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00(\\x00(\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102TCEG ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  TTTTT  CCCC EEEEE  GGGG            ***/\n/***  #####  11   0   0     2   T   C     E     G                ***/\n/***   # #    1   0   0    2    T   C     EEEE  G  GG            ***/\n/***  #####   1   0   0   2     T   C     E     G   G            ***/\n/***   # #   111   000  22222   T    CCCC EEEEE  GGGG            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102TCEG CLIST DISPLAYS THE FIRST TCE IN THE SYSTEM.   ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:    #102TCE                                           ***/\n/***           #102TCEF                                          ***/\n/***           BLSUFLAG                                          ***/\n/***                                                             ***/\n/*******************************************************************/\n/**********************************************************************/\n/*  CHECK FOR THE TCE ADDRESS IN THE CSECTACE; IF R9 IN THE CSECTACE  */\n/*  IS NOT ZERO, THEN RUN IT'S TCE CHAIN. OTHERWISE, LOOK FOR         */\n/*  RHDCOS00.                                                         */\n/**********************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nEVAL  CSECTACE+34   CLIST(STORAGE(TCEADDR)) LENGTH(4)\nNOTE '+--------------------------------------------------+' PAGE\nNOTE '| TCE CHAIN ANALYSIS                       #102TCSG|'\nNOTE '+--------------------------------------------------+'\nIF &TCEADDR = 0 THEN DO\n   SET &CBPROC = YES\n   NOTE '==> TCE ADDRESS (R9) FOUND IN CSECTACE IS 0'\nEND\nIF &TCEADDR NE 0 THEN DO\n   SET &CBPROC = YES\n   NOTE '==> TCE POINTED TO BY R9 IN THE CSECTACE'\n   %#102TCE\nEND\nNOTE '--------------------------------------------------------------'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102VB50": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00!\\x00!\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102VB50 ********************************************************/\n/***                                                             ***/\n/***   # #    1    000  2222  V   V BBBB  55555  000             ***/\n/***  #####  11   0   0     2 V   V B   B 5     0   0            ***/\n/***   # #    1   0   0    2  V   V BBBB  5555  0   0            ***/\n/***  #####   1   0   0   2    V V  B   B     5 0   0            ***/\n/***   # #   111   000  22222   V   BBBB  5555   000             ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102VB50 CLIST DISPLAYS THE VARIABLE IB50 SUBSCHEMA    ***/\n/***  CONTROL BLOCKS                                             ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\nNOTE '+-------------------------------------------------+' PAGE\nNOTE '| IB50 SUBSCHEMA CONTROL BLOCKS           #102VB50|'\nNOTE '+-------------------------------------------------+'\nEQ CCEA CSAA+308% AREA REMARK('CCE CONTROL BLOCK')                +\n   NODROP LENGTH(464)\nEQ VB50 CCEA+3C% AREA REMARK('VARIABLE IB50 SUBSCHEMA')           +\n   NODROP LENGTH(556)\nSTACK VB50\nEVALSYM CCEA CLIST(ADDR(ACCE))\nRUNCHAIN ADDR(VB50) LINK(X'44') NAME(VB50)  +\n         NULL(X'&ACCE') MASK(X'FFFFFFFF')   +\n         NODISPLAY(MACHINE REQUEST)         +\n         DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#102VECT": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x01M\\x01M\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 333, "newlines": 333, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/****************************  #102VECT CLIST **********************/\n/***                                                             ***/\n/***   # #    1    000  2222  V   V EEEEE  CCCC TTTTT            ***/\n/***  #####  11   0   0     2 V   V E     C       T              ***/\n/***   # #    1   0   0    2  V   V EEEE  C       T              ***/\n/***  #####   1   0   0   2    V V  E     C       T              ***/\n/***   # #   111   000  22222   V   EEEEE  CCCC   T              ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  THE #102VECT CLIST DISPLAYS THE NAMES AND ADDRESSES OF THE ***/\n/***  SYSTEM ENTRY POINT VECTOR TABLE FOUND IN THE CSA.          ***/\n/***                                                             ***/\n/*******************************************************************/\nEQUATE CSAIMWTA  CSA+50      +\n   REMARK('VECTOR 00 WAITEP1   :INTERNAL MULTIWAIT DISPATCHER ')\nEQUATE CSASGETA  CSA+54      +\n   REMARK('VECTOR 01 STGPGET   :STORAGE ALLOCATION ')\nEQUATE CSASFREA  CSA+58      +\n   REMARK('VECTOR 02 STGPFREE  :STORAGE RELEASE ')\nEQUATE CSALINKA  CSA+5C      +\n   REMARK('VECTOR 03 PCTLLINK  :LINK TO NEW PROGRAM ')\nEQUATE CSAXCTLA  CSA+60      +\n   REMARK('VECTOR 04 PCTLXCTL  :XFER CONTROL TO NEW PROGRAM ')\nEQUATE CSARTNA   CSA+64      +\n   REMARK('VECTOR 05 PCTLRTN   :RTN CONTROL TO NEXT LEVEL PGM ')\nEQUATE CSAABNDA  CSA+68      +\n   REMARK('VECTOR 06 PCTLABND  :ABEND REQUEST ')\nEQUATE CSALOADA  CSA+6C      +\n   REMARK('VECTOR 07 LODRLOAD  :LOAD PROGRAM ')\nEQUATE CSADELEA  CSA+70      +\n   REMARK('VECTOR 08 LODRDELE  :DELETE PROGRAM ')\nEQUATE CSATIMGA  CSA+74      +\n   REMARK('VECTOR 09 TIMPGET   :GETTIME FUNCTION ')\nEQUATE CSATIMSA  CSA+78      +\n   REMARK('VECTOR 10 TIMPSET   :SETTIME FUNCTION ')\nEQUATE CSAWTLA   CSA+7C      +\n   REMARK('VECTOR 11 WTLEP1    :WRITE MESSAGE TO LOG ')\nEQUATE CSADCMA   CSA+80      +\n   REMARK('VECTOR 12 WAITEP5   :DEADLOCK CHAIN MANAGEMENT ')\nEQUATE CSADBIOA  CSA+84      +\n   REMARK('VECTOR 13 IDMSDBIO  :IDMS I/O MODULE ENTRY ADDRESS ')\nEQUATE CSADBMSA  CSA+88      +\n   REMARK('VECTOR 14 IDMSDBMS  :DBMS - THE REAL THING ')\nEQUATE CSAARECA  CSA+8C      +\n   REMARK('VECTOR 15 ARECEP1   :AREC ROUTINE--BATCH VERSION ONLY ')\nEQUATE CSAKEEPA  CSA+90      +\n   REMARK('VECTOR 16 KEEPEP1   :DBKEY LOCK ROUTINE FOR IDMS ')\nEQUATE CSABRBKA  CSA+94      +\n   REMARK('VECTOR 17 BRBKEP1   :AUTO ROLLBACK ROUTINE ')\nEQUATE CSAQCBA   CSA+98      +\n   REMARK('VECTOR 18 IDMSQSAM  :IDMSQSAM QCB ANCHOR ')\nEQUATE CSACSELA  CSA+9C      +\n   REMARK('VECTOR 19 WAITEP2   :COMMON SYSTEM ENTRY LOGIC ')\nEQUATE CSATKINA  CSA+A0      +\n   REMARK('VECTOR 20 TSKIEP1   :TASK INITIALIZATION ')\nEQUATE CSAPOSTA  CSA+A4      +\n   REMARK('VECTOR 21 WAITEP3   :SYSTEM POST ENTRY POINT ')\nEQUATE CSATKCEA  CSA+A8      +\n   REMARK('VECTOR 22 TSKCEP1   :TASK CREATION ')\nEQUATE CSACHAPA  CSA+AC      +\n   REMARK('VECTOR 23 CHAPEP1   :CHANGE TASK PRIORITY ')\nEQUATE CSATKDEA  CSA+B0      +\n   REMARK('VECTOR 24 TSKIEP2   :TASK DELETION ')\nEQUATE CSAENQA   CSA+B4      +\n   REMARK('VECTOR 25 EDQENQ    :RESOURCE ENQUEUE ')\nEQUATE CSADEQA   CSA+B8      +\n   REMARK('VECTOR 26 EDQDEQ    :RESOURCE DEQUEUE ')\nEQUATE CSARCMA   CSA+BC      +\n   REMARK('VECTOR 27 RMGREP1   :RESOURCE CHAIN MANAGEMENT ')\nEQUATE CSAIDMSA  CSA+C0      +\n   REMARK('VECTOR 28 INTDEP1   :IDMS SERVICE ROUTINE ')\nEQUATE CSASNAPA  CSA+C4      +\n   REMARK('VECTOR 29 SNAPEP1   :TASK AND MEMORY SNAP ')\nEQUATE CSAOS00A  CSA+C8      +\n   REMARK('VECTOR 30 OS00EP1   :OP SYS DEPENDENT MODULE ')\nEQUATE CSAHISTA  CSA+CC      +\n   REMARK('VECTOR 31 HISTOEP1  :HISTOGRAM ROUTINE ENTRY POINT ')\nEQUATE CSAPUTLA  CSA+D0      +\n   REMARK('VECTOR 32 PUTLGEP1  :PUTLOG ROUTINE ENTRY POINT ')\nEQUATE CSATSRCA  CSA+D4      +\n   REMARK('VECTOR 33 TBLSREP1  :GENERIC TABLE SEARCH ROUTINE ')\nEQUATE CSASTAEA  CSA+D8      +\n   REMARK('VECTOR 34 PCTLSTAE  :SET ABEND EXIT ')\nEQUATE CSASETPA  CSA+DC      +\n   REMARK('VECTOR 35 LODRSET   :PROGRAM SETUP ')\nEQUATE CSAABNXA  CSA+E0      +\n   REMARK('VECTOR 36 PCLTABNX  :SPECIAL ABEND ENTRY FOR SPIE ')\nEQUATE CSAWTL2A  CSA+E4      +\n   REMARK('VECTOR 37 WTLEP2    :WTOR DRIVER/ANALYZER ROUTINE ')\nEQUATE CSARUAA   CSA+E8      +\n   REMARK('VECTOR 38 RUALEP1   :RUN UNIT ALLOCATION ')\nEQUATE CSARUCA   CSA+EC      +\n   REMARK('VECTOR 39 RUALEP2   :RUN UNIT STATUS CHECKING ')\nEQUATE CSASCRA   CSA+F0      +\n   REMARK('VECTOR 40 SCRMEP1   :SCRATCH MANAGEMENT GET/PUT ')\nEQUATE CSAQUEA   CSA+F4      +\n   REMARK('VECTOR 41 QUEMEP1   :QUEUE MANAGEMENT GET/PUT ')\nEQUATE CSATIRHA  CSA+F8      +\n   REMARK('VECTOR 42 TIRHREQ   :TEMINAL I/O HANDLER REQUEST ')\nEQUATE CSASCANA  CSA+FC      +\n   REMARK('VECTOR 43 SCANEP1   :TEXT SCANNING ROUTINE ')\nEQUATE CSATTRCA CSA+100      +\n   REMARK('VECTOR 44 TTRCEP1   :TERMINAL TRACE ROUTINE ')\nEQUATE CSATJIOA CSA+104      +\n   REMARK('VECTOR 45 TJIOEP1   :TERM JRNL I/O ROUTINE ')\nEQUATE CSAMAPRA CSA+108      +\n   REMARK('VECTOR 46 MAPREP1   :MAP ROUTINE ENTRY ADDRESS ')\nEQUATE CSASTATA CSA+10C      +\n   REMARK('VECTOR 47 STATEP1   :STATISTICS COLLECTION ')\nEQUATE CSALINRA CSA+110      +\n   REMARK('VECTOR 48 LINREP1   :LINE I/O ROUTINE ')\nEQUATE CSACOBIA CSA+114      +\n   REMARK('VECTOR 49 COBIEP1   :COBOL INTERFACE PROGRAM ')\nEQUATE CSAPRNTA CSA+118      +\n   REMARK('VECTOR 50 PRNTEP1   :#PRINT ROUTINE ENTRY ADDRESS ')\nEQUATE CSAACPTA CSA+11C      +\n   REMARK('VECTOR 51 ACPTEP1   :ACCEPT ROUTINE ENTRY ADDRESS ')\nEQUATE CSASMSGA CSA+120      +\n   REMARK('VECTOR 52 SMSGEP1   :SEND MESSAGE ENTRY ADDRESS ')\nEQUATE CSAJRNLA CSA+124      +\n   REMARK('VECTOR 53 DBCOEP2   :USER JOURNAL ROUTINE ENTRY ADDR ')\nEQUATE CSAEXITA CSA+128      +\n   REMARK('VECTOR 54 CLITXEP1  :INVOKE USER EXIT(RHDCMISC) ')\nEQUATE CSAJXITA CSA+12C      +\n   REMARK('VECTOR 55 JXITEP1   :USER JOURNAL REC ENTRY ADDR ')\nEQUATE CSADBCOA CSA+130      +\n   REMARK('VECTOR 56 DBCOEP1   :DATABASE COORDINATION ENTRY ADDR ')\nEQUATE CSAPMCKA CSA+134      +\n   REMARK('VECTOR 57 WAITEP6   :USER PARM CHECK ROUTINE ')\nEQUATE CSAUTRCA CSA+138      +\n   REMARK('VECTOR 58 UTRCEP1   :USER TRACE ')\nEQUATE CSAPLIIA CSA+13C      +\n   REMARK('VECTOR 59 PLIIEP1   :PL/1 INTERFACE PROGRAM ')\nEQUATE CSATBDYA CSA+140      +\n   REMARK('VECTOR 60 TBDTAEP1  :DYNAMIC TABLE ALLOCATION ')\nEQUATE CSATRSTA CSA+144      +\n   REMARK('VECTOR 61 TRSTAEP1  :TRANSACTION STATISTICS ')\nEQUATE CSASNGLA CSA+148      +\n   REMARK('VECTOR 62 SNGLEP1   :SINGLE THREAD RESOURCE ')\nEQUATE CSAURTNA CSA+14C      +\n   REMARK('VECTOR 63 URTNEP1   :USER ROUTINES IN DC NUCLEUS ')\nEQUATE CSAINTXA CSA+150      +\n   REMARK('VECTOR 64 IDMSINTX  :SVC INTERFACE TO ANOTHER CV ')\nEQUATE CSACURSA CSA+154      +\n   REMARK('VECTOR 65 CURSEP1   :CURRENCY SAVE/RESTORE ')\nEQUATE CSALRFA  CSA+158      +\n   REMARK('VECTOR 66 IDMSLRF   :ADDRESS OF LRF ROUTINE FROM DBMS ')\nEQUATE CSAEVALA CSA+15C      +\n   REMARK('VECTOR 67 EVALNTRY  :ADDRESS OF EQUATE ROUTINE ')\nEQUATE CSASNPA  CSA+160      +\n   REMARK('VECTOR 68 SNPREP1   :ADDRESS OF SNAPPER ROUTINE ')\nEQUATE CSATERMA CSA+164      +\n   REMARK('VECTOR 69 TERMEP1   :GET/FREE/POST LTE SERVICES ')\nEQUATE CSAPFKTR CSA+168      +\n   REMARK('VECTOR 70 PFKTEP1   :PFK TO FUNCTION TRANSLATOR ')\nEQUATE CSADDSLT CSA+16C      +\n   REMARK('VECTOR 71 PFKTEP1   :DDS FREE LONG TERM RESOURCES ')\nEQUATE CSATRENA CSA+170      +\n   REMARK('VECTOR 72 TRENTRY   :CGS INTERFACE ROUTINE ')\nEQUATE CSADBGA  CSA+174      +\n   REMARK('VECTOR 73 DBGEP1    :DEBUG NUCLEUS FINCTIONS ')\nEQUATE CSAMODT  CSA+178      +\n   REMARK('VECTOR 74 MODTEP1   :ADDRESS OF GETPROF/GETMODT ROUTINE ')\nEQUATE CSALIMT  CSA+17C      +\n   REMARK('VECTOR 75 LIMTEP1   :A(RESOURCE LIMIT CHK) ')\nEQUATE CSARDYXA CSA+180      +\n   REMARK('VECTOR 76 RDYXEP1   :READY/READY EXTENT ROUTINE ')\nEQUATE CSAXTALA CSA+184      +\n   REMARK('VECTOR 77 XTALEP1   :EXTENT RUN UNIT ALLOCATION ')\nEQUATE CSALOKXA CSA+188      +\n   REMARK('VECTOR 78 LOKXEP1   :LONGTERM LOCK ROUTINE ')\nEQUATE CSAUSENV CSA+18C      +\n   REMARK('VECTOR 79 USENVEP1  :USER ENVIRONMENT SETUP ROUTINE ')\nEQUATE CSAOTPRR CSA+190      +\n   REMARK('VECTOR 80 OTPREP1   :OTP REQUEST ROUTER ')\nEQUATE CSADBLNK CSA+194      +\n   REMARK('VECTOR 81 DBRCLNK   :DBRC MESSAGE LINK ')\nEQUATE CSAWTOVL CSA+198      +\n   REMARK('VECTOR 82 WAITEP7   :WAIT, ALLOWING OVERLAY ')\nEQUATE CSALOCKM CSA+19C      +\n   REMARK('VECTOR 83 LOCKEP1   :LOCK MANAGER ')\nEQUATE CSAAFFIN CSA+1A0      +\n   REMARK('VECTOR 84 MODEEP3   :SUBTASK AFFINITY PROCESSING ')\nEQUATE CSASWITR CSA+1A4      +\n   REMARK('VECTOR 85 SWITEP2   :SWITCH DRIVER REQUEST ')\nEQUATE CSAAPPC  CSA+1A8      +\n   REMARK('VECTOR 86 APPCEP1   :APPC ')\nEQUATE CSADLIF  CSA+1AC      +\n   REMARK('VECTOR 87 DLIFEP1   :DL/I INTERFACE ')\nEQUATE CSADLRC  CSA+1B0      +\n   REMARK('VECTOR 88 DLRCEP1   :DL/I REGION CONTROL EMULATION ')\nEQUATE CSAHOOK1 CSA+1B4      +\n   REMARK('VECTOR 89 HOOKEP1   :NUCLEUS NEW COPY ENTRY ')\nEQUATE CSAHOOK3 CSA+1B8      +\n   REMARK('VECTOR 90 HOOKEP3   :USER HOOK INTERFACE ')\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 00 THRU 09  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSAIMWTA    LENGTH(4)\nLIST CSASGETA    LENGTH(4)\nLIST CSASFREA    LENGTH(4)\nLIST CSALINKA    LENGTH(4)\nLIST CSAXCTLA    LENGTH(4)\nLIST CSARTNA     LENGTH(4)\nLIST CSAABNDA    LENGTH(4)\nLIST CSALOADA    LENGTH(4)\nLIST CSADELEA    LENGTH(4)\nLIST CSATIMGA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 10 THRU 19  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSATIMSA    LENGTH(4)\nLIST CSAWTLA     LENGTH(4)\nLIST CSADCMA     LENGTH(4)\nLIST CSADBIOA    LENGTH(4)\nLIST CSADBMSA    LENGTH(4)\nLIST CSAARECA    LENGTH(4)\nLIST CSAKEEPA    LENGTH(4)\nLIST CSABRBKA    LENGTH(4)\nLIST CSAQCBA     LENGTH(4)\nLIST CSACSELA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 20 THRU 29  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSATKINA    LENGTH(4)\nLIST CSAPOSTA    LENGTH(4)\nLIST CSATKCEA    LENGTH(4)\nLIST CSACHAPA    LENGTH(4)\nLIST CSATKDEA    LENGTH(4)\nLIST CSAENQA     LENGTH(4)\nLIST CSADEQA     LENGTH(4)\nLIST CSARCMA     LENGTH(4)\nLIST CSAIDMSA    LENGTH(4)\nLIST CSASNAPA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 30 THRU 39  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSAOS00A    LENGTH(4)\nLIST CSAHISTA    LENGTH(4)\nLIST CSAPUTLA    LENGTH(4)\nLIST CSATSRCA    LENGTH(4)\nLIST CSASTAEA    LENGTH(4)\nLIST CSASETPA    LENGTH(4)\nLIST CSAABNXA    LENGTH(4)\nLIST CSAWTL2A    LENGTH(4)\nLIST CSARUAA     LENGTH(4)\nLIST CSARUCA     LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 40 THRU 49  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSASCRA     LENGTH(4)\nLIST CSAQUEA     LENGTH(4)\nLIST CSATIRHA    LENGTH(4)\nLIST CSASCANA    LENGTH(4)\nLIST CSATTRCA    LENGTH(4)\nLIST CSATJIOA    LENGTH(4)\nLIST CSAMAPRA    LENGTH(4)\nLIST CSASTATA    LENGTH(4)\nLIST CSALINRA    LENGTH(4)\nLIST CSACOBIA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 50 THRU 59  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSAPRNTA    LENGTH(4)\nLIST CSAACPTA    LENGTH(4)\nLIST CSASMSGA    LENGTH(4)\nLIST CSAJRNLA    LENGTH(4)\nLIST CSAEXITA    LENGTH(4)\nLIST CSAJXITA    LENGTH(4)\nLIST CSADBCOA    LENGTH(4)\nLIST CSAPMCKA    LENGTH(4)\nLIST CSAUTRCA    LENGTH(4)\nLIST CSAPLIIA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 60 THRU 69  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSATBDYA    LENGTH(4)\nLIST CSATRSTA    LENGTH(4)\nLIST CSASNGLA    LENGTH(4)\nLIST CSAURTNA    LENGTH(4)\nLIST CSAINTXA    LENGTH(4)\nLIST CSACURSA    LENGTH(4)\nLIST CSALRFA     LENGTH(4)\nLIST CSAEVALA    LENGTH(4)\nLIST CSASNPA     LENGTH(4)\nLIST CSATERMA    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 70 THRU 79  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSAPFKTR    LENGTH(4)\nLIST CSADDSLT    LENGTH(4)\nLIST CSATRENA    LENGTH(4)\nLIST CSADBGA     LENGTH(4)\nLIST CSAMODT     LENGTH(4)\nLIST CSALIMT     LENGTH(4)\nLIST CSARDYXA    LENGTH(4)\nLIST CSAXTALA    LENGTH(4)\nLIST CSALOKXA    LENGTH(4)\nLIST CSAUSENV    LENGTH(4)\nNOTE '+-----------------------------------------------------------+' PAGE\nNOTE '| CSA SYSTEM ENTRY POINT VECTOR TABLE - 80 THRU 90  #102VECT|'\nNOTE '+-----------------------------------------------------------+'\nNOTE '   '\nNOTE '-------------------------------------------------------------'\nLIST CSAOTPRR    LENGTH(4)\nLIST CSADBLNK    LENGTH(4)\nLIST CSAWTOVL    LENGTH(4)\nLIST CSALOCKM    LENGTH(4)\nLIST CSAAFFIN    LENGTH(4)\nLIST CSASWITR    LENGTH(4)\nLIST CSAAPPC     LENGTH(4)\nLIST CSADLIF     LENGTH(4)\nLIST CSADLRC     LENGTH(4)\nLIST CSAHOOK1    LENGTH(4)\nLIST CSAHOOK3    LENGTH(4)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLSUFLAG": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x91\\x00\\x91\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 145, "newlines": 145, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 1 BYTEDEC\n/* BLSUFLAG ********************************************************/\n/***                                                             ***/\n/***  BBBB  L      SSSS U   U FFFFF L      AAA   GGGG            ***/\n/***  B   B L     S     U   U F     L     A   A G                ***/\n/***  BBBB  L      SSS  U   U FFFF  L     AAAAA G  GG            ***/\n/***  B   B L         S U   U F     L     A   A G   G            ***/\n/***  BBBB  LLLLL SSSS   UUU  F     LLLLL A   A  GGGG            ***/\n/***                                                             ***/\n/***                                                             ***/\n/***  BLSUFLAG TAKE THE ONE BYTE FIELD PASSED FROM THE CALLING   ***/\n/***  CLIST AND RETURNS EACH BIT IN IT'S OWN FIELD THROUGH THE   ***/\n/***  GLOBAL PARAMETERS.                                         ***/\n/***                                                             ***/\n/***  USED BY: #102ACEF                                          ***/\n/***           #102CSAF                                          ***/\n/***           #102DCEF                                          ***/\n/***           #102LTEF                                          ***/\n/***           #102RCEF                                          ***/\n/***           #102TCEF                                          ***/\n/***                                                             ***/\n/***  USES: N/A                                                  ***/\n/***                                                             ***/\n/*******************************************************************/\nGLOBAL BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7 BIT8\nSELECT &BYTEDEC\n   WHEN (  1|  3|  5|  7|  9| 11| 13| 15) SET BIT1 = 1\n   WHEN ( 17| 19| 21| 23| 25| 27| 29| 31) SET BIT1 = 1\n   WHEN ( 33| 35| 37| 39| 41| 43| 45| 47) SET BIT1 = 1\n   WHEN ( 49| 51| 53| 55| 57| 59| 61| 63) SET BIT1 = 1\n   WHEN ( 65| 67| 69| 71| 73| 75| 77| 79) SET BIT1 = 1\n   WHEN ( 81| 83| 85| 87| 89| 91| 93| 95) SET BIT1 = 1\n   WHEN ( 97| 99|101|103|105|107|109|111) SET BIT1 = 1\n   WHEN (113|115|117|119|121|123|125|127) SET BIT1 = 1\n   WHEN (129|131|133|135|137|139|141|143) SET BIT1 = 1\n   WHEN (145|147|149|151|153|155|157|159) SET BIT1 = 1\n   WHEN (161|163|165|167|169|171|173|175) SET BIT1 = 1\n   WHEN (177|179|181|183|185|187|189|191) SET BIT1 = 1\n   WHEN (193|195|197|199|201|203|205|207) SET BIT1 = 1\n   WHEN (209|211|213|215|217|219|221|223) SET BIT1 = 1\n   WHEN (225|227|229|231|233|233|235|237) SET BIT1 = 1\n   WHEN (239|241|243|245|247|249|251|253|255) SET BIT1 = 1\n   OTHERWISE  SET BIT1 = 0\nEND\nSELECT &BYTEDEC\n   WHEN (  2|  3|  6|  7| 10| 11| 14| 15) SET BIT2 = 1\n   WHEN ( 18| 19| 22| 23| 26| 27| 30| 31) SET BIT2 = 1\n   WHEN ( 34| 35| 38| 39| 42| 43| 46| 47) SET BIT2 = 1\n   WHEN ( 50| 51| 54| 55| 58| 59| 62| 63) SET BIT2 = 1\n   WHEN ( 66| 67| 70| 71| 74| 75| 78| 79) SET BIT2 = 1\n   WHEN ( 82| 83| 86| 87| 90| 91| 94| 95) SET BIT2 = 1\n   WHEN ( 98| 99|102|103|106|107|110|111) SET BIT2 = 1\n   WHEN (114|115|118|119|122|123|126|127) SET BIT2 = 1\n   WHEN (130|131|134|135|138|139|142|143) SET BIT2 = 1\n   WHEN (146|147|150|151|154|155|158|159) SET BIT2 = 1\n   WHEN (162|163|166|167|170|171|174|175) SET BIT2 = 1\n   WHEN (178|179|182|183|186|187|190|191) SET BIT2 = 1\n   WHEN (194|195|198|199|202|203|206|207) SET BIT2 = 1\n   WHEN (210|211|214|215|218|219|222|223) SET BIT2 = 1\n   WHEN (226|227|230|231|234|235|238|239) SET BIT2 = 1\n   WHEN (242|243|246|247|250|251|254|255) SET BIT2 = 1\n   OTHERWISE  SET BIT2 = 0\nEND\nSELECT &BYTEDEC\n   WHEN (  4:  7) SET BIT3 = 1\n   WHEN ( 12: 15) SET BIT3 = 1\n   WHEN ( 20: 24) SET BIT3 = 1\n   WHEN ( 28: 31) SET BIT3 = 1\n   WHEN ( 36: 39) SET BIT3 = 1\n   WHEN ( 44: 47) SET BIT3 = 1\n   WHEN ( 52: 55) SET BIT3 = 1\n   WHEN ( 60: 63) SET BIT3 = 1\n   WHEN ( 68: 71) SET BIT3 = 1\n   WHEN ( 76: 79) SET BIT3 = 1\n   WHEN ( 84: 87) SET BIT3 = 1\n   WHEN ( 92: 95) SET BIT3 = 1\n   WHEN (100:103) SET BIT3 = 1\n   WHEN (108:111) SET BIT3 = 1\n   WHEN (116:119) SET BIT3 = 1\n   WHEN (124:127) SET BIT3 = 1\n   WHEN (132:135) SET BIT3 = 1\n   WHEN (140:143) SET BIT3 = 1\n   WHEN (148:151) SET BIT3 = 1\n   WHEN (156:159) SET BIT3 = 1\n   WHEN (164:167) SET BIT3 = 1\n   WHEN (172:175) SET BIT3 = 1\n   WHEN (180:183) SET BIT3 = 1\n   WHEN (188:191) SET BIT3 = 1\n   WHEN (196:199) SET BIT3 = 1\n   WHEN (204:207) SET BIT3 = 1\n   WHEN (212:215) SET BIT3 = 1\n   WHEN (220:223) SET BIT3 = 1\n   WHEN (228:231) SET BIT3 = 1\n   WHEN (236:239) SET BIT3 = 1\n   WHEN (244:247) SET BIT3 = 1\n   WHEN (252:255) SET BIT3 = 1\n   OTHERWISE  SET BIT3 = 0\nEND\nSELECT &BYTEDEC\n   WHEN (  8: 15) SET BIT4 = 1\n   WHEN ( 24: 31) SET BIT4 = 1\n   WHEN ( 40: 47) SET BIT4 = 1\n   WHEN ( 56: 63) SET BIT4 = 1\n   WHEN ( 72: 79) SET BIT4 = 1\n   WHEN ( 88: 95) SET BIT4 = 1\n   WHEN (104:111) SET BIT4 = 1\n   WHEN (120:127) SET BIT4 = 1\n   WHEN (136:143) SET BIT4 = 1\n   WHEN (152:159) SET BIT4 = 1\n   WHEN (168:175) SET BIT4 = 1\n   WHEN (184:191) SET BIT4 = 1\n   WHEN (200:207) SET BIT4 = 1\n   WHEN (216:223) SET BIT4 = 1\n   WHEN (232:239) SET BIT4 = 1\n   WHEN (248:255) SET BIT4 = 1\n   OTHERWISE  SET BIT4 = 0\nEND\nSELECT &BYTEDEC\n   WHEN ( 16: 31) SET BIT5 = 1\n   WHEN ( 48: 63) SET BIT5 = 1\n   WHEN ( 80: 95) SET BIT5 = 1\n   WHEN (112:127) SET BIT5 = 1\n   WHEN (144:159) SET BIT5 = 1\n   WHEN (176:191) SET BIT5 = 1\n   WHEN (208:223) SET BIT5 = 1\n   WHEN (240:255) SET BIT5 = 1\n   OTHERWISE  SET BIT5 = 0\nEND\nSELECT &BYTEDEC\n   WHEN ( 32: 63) SET BIT6 = 1\n   WHEN ( 96:127) SET BIT6 = 1\n   WHEN (160:191) SET BIT6 = 1\n   WHEN (224:255) SET BIT6 = 1\n   OTHERWISE  SET BIT6 = 0\nEND\nSELECT &BYTEDEC\n   WHEN ( 64 : 127) SET BIT7 = 1\n   WHEN (192 : 255) SET BIT7 = 1\n   OTHERWISE  SET BIT7 = 0\nEND\nSELECT &BYTEDEC\n   WHEN (128 : 255) SET BIT8 = 1\n   OTHERWISE  SET BIT8 = 0\nEND\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GLOBAL1": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "T75NAK1"}, "text": "GLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZCP": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\nx\\nx\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 2680, "newlines": 2680, "modlines": 0, "user": "T75NAK1"}, "text": "./       ADD   $README$\n********************************************************************************\n**                                                                            **\n**                            D I S C L A I M E R                             **\n**                                                                            **\n**           THE MATERIAL  AND PROGRAMS  ENCLOSED IN THIS PACKAGE  HAVE BEEN  **\n**  DEVELOPED BY  CONSUMERS POWER COMPANY  FOR ITS  OWN USE,  AND  CONSUMERS  **\n**  POWER COMPANY  DOES NOT  WARRANT THAT THE MATERIAL NOR PROGRAMS ENCLOSED  **\n**  IN THIS PACKAGE WILL  FUNCTION CORRECTLY.   THE USER OF THE MATERIAL AND  **\n**  PROGRAMS ENCLOSED  IN THIS PACKAGE IS RESPONSIBLE FOR MAKING THE EVALUA-  **\n**  TION AS TO THE  USEFULNESS OF  THE MATERIAL AND PROGRAMS  FOR THEIR PUR-  **\n**  POSES.   CONSUMERS POWER COMPANY WILL NOT BE RESPONSIBLE FOR MAINTAINING  **\n**  OR PROVIDING UPDATE  INFORMATION FOR THE  MATERIAL OR PROGRAMS  ENCLOSED  **\n**  IN THIS PACKAGE.   THE USE OF THE  MATERIAL AND PROGRAMS  ENCLOSED IS AT  **\n**  THE  SOLE  RISK OF  THE  USER AND  CONSUMERS POWER COMPANY  WILL  NOT BE  **\n**  RESPONSIBLE  FOR ANY LOSS OR  DAMAGE SUFFERED  BY THE USER OR  ANY THIRD  **\n**  PARTIES  RESULTING  FROM ANY  ERRORS,  INACCURACIES,  OR DEFECTS  IN THE  **\n**  MATERIAL OR PROGRAMS.  CONSUMERS POWER COMPANY WILL ALSO NOT BE RESPONS-  **\n**  IBLE FOR ANY LOSS OR EXPENSE  INCURRED AS THE RESULT  THAT THE MATERIALS  **\n**  OR PROGRAMS CONSTITUTES AN INFRINGEMENT OF ANY COPYRIGHT.                 **\n**                                                                            **\n**          THE USE  OF ANY OF  THE MATERIAL  OR PROGRAMS  ENCLOSED  IN THIS  **\n**  PACKAGE SHALL CONSTITUTE ACCEPTANCE OF THE ABOVE TERMS.                   **\n********************************************************************************\nTHIS FILE CONTAINS THE IPCS CLISTS THAT HAVE BEEN CREATED AT CONSUMERS POWER\nCOMPANY TO ASSIST IN READING IDMS CV DUMPS.  THIS FILE CONTAINS MULTIPLE\nMEMBERS.  EACH MEMBER STARTS WITH A LINE CONTAINING \"./  ADD  MBRNAME\" AND ENDS\nWITH A LINE CONTAINING ALL HYPHENS.  TO BE OF ANY USE, THIS FILE MUST BE SPLIT\nUP AND PLACED IN SEPARATE MEMBERS OF AN MVS PARTITIONED DATASET.  THE MEMBER\nNAMES MUST MATCH THE NAME SHOWN AT THE START OF EACH MEMBER.  THIS DATASET CAN\nBE PROCESSED DIRECTLY BY IEBCOPY TO ACCOMPLISH THIS.\n/*-------------------------------------------------------------------*/\n./       ADD   CSA#RCE\n/* THIS CLIST WALKS ALL OF THE RCE CHAINS OFF FROM THE CSA.  THE     */\n/* \"INIT\" CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.  THIS  */\n/* CLIST INVOKES THE FOLLOWING CLIST:  RLE.                          */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM #CSADS\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''#CSADS'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         DROPSYM *\n         NOTE 'RCE''S WILL BE DISPLAYED FOR #CSADS'\n         NOTE '====== SIGNON RLE/RCE CHAIN =========================='\n         EQUATE RLESTART #CSADS+2B4 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\n         NOTE '====== SINGLE-THREAD RLE/RCE CHAIN ==================='\n         EQUATE RLESTART #CSADS+2C0 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\n         NOTE '====== SYSTEM RLE/RCE CHAIN =========================='\n         EQUATE RLESTART #CSADS+2C8 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   CSASTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF VARIOUS FLAGS AND COUNTERS    */\n/* FOUND IN THE CSA.  THE \"INIT\" CLIST MUST BE EXECUTED BEFORE       */\n/* EXECUTING THIS CLIST.                                             */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n/* GET NUMBER OF TASKS WAITING FOR LOADER */\n         EQUATE CSATEMP #CSADS+3D0 LENGTH(4) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S TASKS WERE WAITING FOR LOADER'\n/* GET CAPACITY OF LOG AREA IN BYTES */\n         EQUATE CSATEMP #CSADS+3D4 LENGTH(4) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE 'THE CAPACITY OF THE LOG AREA IS &S BYTES'\n/* GET FULLNESS OF LOG AREA IN BYTES */\n         EQUATE CSATEMP #CSADS+3DC LENGTH(4) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE 'THERE ARE CURRENTLY &S BYTES USED IN THE LOG AREA'\n/* GET NUMBER OF ACTIVE TASKS */\n         EQUATE CSATEMP #CSADS+4E8 LENGTH(4) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S TASKS WERE ACTIVE'\n/* CHECK FOR SHORT ON STORAGE */\n         EQUATE CSATEMP #CSADS+6C0 LENGTH(1) BIT\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SHORT ON STORAGE CONDITION EXISTS'\n         ELSE +\n            NOTE 'NOT SHORT ON STORAGE'\n/* CHECK FOR MAX TASKS CONDITION */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'MAX TASKS CONDITION EXISTS'\n         ELSE +\n            NOTE 'NOT AT MAX TASKS'\n/* CHECK FOR SYSTEM BEING SHUTDOWN */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE SYSTEM IS BEING SHUT DOWN'\n         ELSE +\n            NOTE 'THE SYSTEM IS NOT BEING SHUT DOWN'\n/* CHECK FOR SYSTEM BEING QUIESCED */\n         EQUATE CSATEMP #CSADS+6C1 LENGTH(1) BIT\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS BEING QUIESCED'\n         ELSE +\n            NOTE 'SYSTEM IS NOT BEING QUIESCED'\n/* CHECK FOR FACTOTUM TYPE 2 ACTIVE */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'FACTOTUM TYPE 2 IS ACTIVE'\n         ELSE +\n            NOTE 'FACTOTUM TYPE 2 IS NOT ACTIVE'\n/* CHECK FOR INIT OF DC DONE */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'INITIALIZATION OF IDMS/CV IS COMPLETE'\n         ELSE +\n            NOTE 'INITIALIZATION OF IDMS/CV IS NOT COMPLETE'\n/* CHECK FOR SHORT ON RLES */\n         EQUATE CSATEMP #CSADS+6C3 LENGTH(1) BIT\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS SHORT ON RLES'\n         ELSE +\n            NOTE 'SYSTEM IS NOT SHORT ON RLES'\n/* CHECK FOR SHORT ON ILES */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS SHORT ON ILES'\n         ELSE +\n            NOTE 'SYSTEM IS NOT SHORT ON ILES'\n/* CHECK FOR WAIT ON ERUS QUIESCE */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS WAITING ON ERUS QUIESCE'\n         ELSE +\n            NOTE 'SYSTEM IS NOT WAITING ON ERUS QUIESCE'\n/* CHECK FOR SHORT ON RCES */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS SHORT ON RCES'\n         ELSE +\n            NOTE 'SYSTEM IS NOT SHORT ON RCES'\n/* CHECK FOR SHORT ON DPES */\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS SHORT ON DPES'\n         ELSE +\n            NOTE 'SYSTEM IS NOT SHORT ON DPES'\n/* CHECK FOR QUIESCE FOR NUCLEUS LOAD */\n         EQUATE CSATEMP #CSADS+6C6 LENGTH(1) BIT\n         COMPARE ADDRESS(CSATEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SYSTEM IS BEING QUIESCED FOR NUCLEUS LOAD'\n         ELSE +\n            NOTE 'SYSTEM IS NOT BEING QUIESCED FOR NUCLEUS LOAD'\n/* GET NUMBER OF TOTAL TASKS CURRENTLY ACTIVE */\n         EQUATE CSATEMP #CSADS+6D0 LENGTH(2) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S TOTAL TASKS WERE CURRENTLY ACTIVE'\n/* GET NUMBER OF SYSTEM TASKS CURRENTLY ACTIVE */\n         EQUATE CSATEMP #CSADS+6D2 LENGTH(2) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S SYSTEM TASKS WERE CURRENTLY ACTIVE'\n/* GET NUMBER OF SCTS CURRENTLY SHORT ON STORAGE */\n         EQUATE CSATEMP #CSADS+6D4 LENGTH(2) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S STORAGE POOLS CURRENTLY SHORT ON STORAGE'\n/* GET NUMBER OF ONLINE TASKS CURRENTLY ACTIVE */\n         EQUATE CSATEMP #CSADS+6D6 LENGTH(2) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S ONLINE TASKS WERE CURRENTLY ACTIVE'\n/* GET NUMBER OF EXTERNAL TASKS CURRENTLY ACTIVE */\n         EQUATE CSATEMP #CSADS+6D8 LENGTH(2) UNSIGNED SCALAR\n         EVALUATE CSATEMP CLIST(STORAGE(S))\n         NOTE '&S EXTERNAL TASKS WERE CURRENTLY ACTIVE'\n         DROPSYM CSATEMP\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   CVSTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF VARIOUS FLAGS AND COUNTERS    */\n/* FOUND IN THE DCE, TCE, LTE, AND PTE FOR A GIVEN TASK.  TO USE     */\n/* THIS CLIST, YOU MUST SUPPLY THE SUFFIX VALUE FOR THE IPCS SYMBOL  */\n/* NAMES.  AN EXAMPLE CALL MIGHT BE \"CVSTAT INDEX(12)\".  THE \"INIT\"  */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.  THIS CLIST   */\n/* INVOKES THE FOLLOWING CLISTS:  DCESTAT, TCESTAT, LTESTAT, AND     */\n/* PTESTAT.                                                          */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX(01)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n/* DISPLAY THE STATISTICS FOR THE #DCEDS CONTROL BLOCK */\n         DCESTAT &PRINT &TERMINAL &DEBUG INDEX(&INDEX)\n/* DISPLAY THE STATISTICS FOR THE #TCEDS CONTROL BLOCK */\n         TCESTAT &PRINT &TERMINAL &DEBUG INDEX(&INDEX)\n/* DISPLAY THE STATISTICS FOR THE #LTEDS CONTROL BLOCK */\n         LTESTAT &PRINT &TERMINAL &DEBUG INDEX(&INDEX)\n/* DISPLAY THE STATISTICS FOR THE #PTEDS CONTROL BLOCK */\n         PTESTAT &PRINT &TERMINAL &DEBUG INDEX(&INDEX)\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   DCESTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF THE VARIOUS FLAGS IN THE DCE. */\n/* TO USE THIS CLIST, YOU MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL  */\n/* NAME OF THE PARTICULAR DCE CONTROL BLOCK THAT YOU ARE INTERESTED  */\n/* IN.  A SAMPLE CALL MIGHT BE \"DCESTAT INDEX(05)\".  THE \"INIT\"      */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.               */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#DCEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM EQ &NAME&INDEX\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE FOLLOWING NOTES ARE FOR CONTROL BLOCK &NAME&INDEX'\n         ELSE +\n            DO\n               NOTE 'THE SYMBOL ''&NAME&INDEX'' WAS NOT FOUND'\n               GOTO GETOUT\n            END\n/* GET THE DISPATCHING PRIORITY */\n         EVALUATE &NAME&INDEX+24 LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'THE DISPATCHING PRIORITY IS &S'\n/* CHECK FOR TASK READY TO RUN */\n         EQUATE DCETEMP &NAME&INDEX+25 LENGTH(1) BIT\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS READY TO RUN, NOT YET DISPATCHED'\n/* CHECK FOR TASK CURRENTLY EXECUTING */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS CURRENTLY EXECUTING'\n         ELSE +\n            NOTE 'TASK IS NOT CURRENTLY EXECUTING'\n/* CHECK FOR TASK WAITING */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS WAITING'\n         ELSE +\n            NOTE 'TASK IS NOT WAITING'\n/* CHECK FOR TASK WAITING ON ECB */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS WAITING ON AT LEAST ONE ECB'\n         ELSE +\n            NOTE 'TASK IS NOT WAITING ON ANY ECB''S'\n/* CHECK FOR TASK WAITING ON LOCK/MPMODE */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS WAITING ON A LOCK OR MPMODE'\n         ELSE +\n            NOTE 'TASK IS NOT WAITING ON ANY LOCK OR MPMODE'\n/* CHECK FOR TASK HICCUP WAIT IN PROGRESS */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK HICCUP WAIT IN PROGRESS'\n         ELSE +\n            NOTE 'TASK HICCUP WAIT NOT IN PROGRESS'\n/* CHECK FOR NEW TASK */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'NEW TASK, NOT YET DISPATCHED'\n/* CHECK FOR RUNABLE TASK */\n         EQUATE DCETEMP &NAME&INDEX+26 LENGTH(1) BIT\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'EMBRACE ROUTINE FOUND TASK RUNABLE'\n/* CHECK FOR SUBTASK AFFINITY */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK REQUIRED SUBTASK AFFINITY'\n/* CHECK FOR SET TO REMOVE TASK FROM SYSTEM */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SET TO REMOVE TASK FROM SYSTEM'\n/* CHECK FOR DCE CURRENTLY OWNED */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'DCE IS CURRENTLY OWNED'\n         ELSE +\n            NOTE 'DCE IS NOT CURRENTLY OWNED'\nGETOUT:  DROPSYM DCETEMP\n/*-------------------------------------------------------------------*/\n./       ADD   INIT\n/* THIS IS THE INITIALIZATION CLIST FOR READING IDMS CV DUMPS.  THIS */\n/* MUST BE THE FIRST CLIST EXECUTED BEFORE ANY OTHER IPCS CLIST IS   */\n/* EXECUTED.  THIS CLIST INVOKES THE FOLLOWING CLISTS:  TCE AND PTE. */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n/* DO THE INITIAL HOUSEKEEPING STUFF */\n         STATUS NOPRINT NOTERMINAL\n         DROPSYM * PURGE\n         DROPMAP ASID(X'0001')\n/* LIST THE GENERAL PURPOSE REGISTER CONTENTS */\n         NOTE 'REGISTER VALUES FOR IDMS ADDRESS SPACE'\n         LIST 0R:15R\n/* FIND THE STARTUP MODULE */\n         FIND = C'RHDCOS00' ADDRESS(0.:00FFFFFF.) NOBREAK FIRST\n         EQUATE @RHDCOS00 X MODULE(RHDCOS00) LENGTH(X'88C') +\n            REMARK('THE IDMS CV STARTUP MODULE') NODROP\n         COMPARE ADDRESS(@RHDCOS00) CHARACTER LENGTH(8) +\n            WITH(VALUE(C'RHDCOS00')) LENGTH(8)\n         IF &LASTCC = 0 THEN GOTO GOTSTRT\n         NOTE 'NO IDMS STARTUP MODULE FOUND'\n         GOTO DONE\n/* FIND THE #CSADS DSECT */\nGOTSTRT: EQUATE #CSADS @RHDCOS00+24% LENGTH(X'4290') +\n            STRUCTURE(#CSADS) REMARK('COMMON SYSTEM AREA (CSA)') +\n            NODROP\n         IF &LASTCC \u00ac= 0 THEN GOTO DONE\n         COMPARE ADDRESS(#CSADS) HEXADECIMAL LENGTH(4) +\n            WITH(VALUE(X'47F0F9EE')) LENGTH(4)\n         IF &LASTCC = 0 THEN GOTO GOTCSA\n         NOTE 'CSA DOES NOT START OUT WITH SYSTEM ENTRY BRANCH' +\n            SPACE(1) &TERMINAL\n         GOTO DONE\n/* RUN THE DCE CHAIN GETTING #DCEDS, #TCEDS, #LTEDS, #PTEDS DSECTS */\nGOTCSA:  EQUATE DCESTRT #CSADS+2A0 LENGTH(4) POINTER\n         EVALSYM DCESTRT CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &DCESTRT = &A + &P\n         RUNCHAIN ADDRESS(DCESTRT%) +\n            LENGTH(X'40') STRUCTURE(#DCEDS) +\n            REMARK('DISPATCH CONTROL ELEMENT (DCE)') +\n            EXEC((TCE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&DCESTRT) NAME(#DCEDS) LINK(X'00') +\n            CHAIN(50) NODROP\n/* GET THE #CCEDS DSECT ADDRESS */\n         EQUATE #CCEDS #CSADS+308% LENGTH(464) STRUCTURE(#CCEDS) +\n            REMARK('CENTRAL CONTROL ELEMENT (CCE)') NODROP\n/* RUN MASTER READY QUEUE FOR LTERMS */\n         EQUATE #LTTDS #CSADS+320% LENGTH(56) AREA\n         EQUATE LTESTRT #LTTDS+10 LENGTH(4) POINTER\n         RUNCHAIN ADDRESS(LTESTRT%) +\n            LENGTH(X'100') STRUCTURE(#LTEDS) +\n            REMARK('LTE ON MASTER''S READY QUEUE') +\n            EXEC((PTE &PRINT &TERMINAL &DEBUG)) +\n            NULL(X'00000000') NAME(#MLTEDS) LINK(X'10') +\n            CHAIN(75) NODROP\n/* DELETE TEMPORARY SYMBOLS */\n         DROPSYM * NOPURGE\nDONE:    NOTE ' '\n         EXIT CODE(&MAXCC)\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   IPCS\n/* THIS IS A SAMPLE CLIST FOR BRINGING UP IPCS IN FULL-SCREEN MODE.  */\n/* THIS CLIST HAS BEEN MODIFIED TO INCORPORATE THE CHANGES REQUIRED  */\n/* TO SUPPORT THE AMDAHL IPCS EXITS.  SOME MODIFICATION MAY BE       */\n/* REQUIRED TO GET THIS CLIST TO WORK IN YOUR SHOP.  IT IS ASSUMED   */\n/* THAT THE IPCS DUMP AND PROBLEM DIRECTORIES HAVE BEEN PREVIOUSLY   */\n/* ALLOCATED AND INITIALIZED (REFER TO THE IPCS MANUALS).            */\n/*                                                                   */\nPROC 0 PARM(00)\nCONTROL NOFLUSH NOMSG\nFREE FI(SYSPROC ISPPLIB ISPMLIB ISPSLIB ISPTLIB ISPLLIB)\nFREE FI(IPCSDDIR IPCSPDIR IPCSPARM IPCSPRNT IPCSTOC)\nFREE FI(MACLIB,SNAP)\nFREE FI(SYSUDUMP) DELETE\nCONTROL MSG\nALLOC FI(SYSPROC) DA( +\n    'SYS1.ISPCLIB', +\n    'SYS1.SBLSCLI0', +\n    'YOUR.IPCS.CLIST.DATASET' ) SHR REUSE\nALLOC FI(ISPPLIB) DA( +\n    'SYS1.ISPPLIB', +\n    'SYS1.SBLSPNL0') SHR REUSE\nALLOC FI(ISPMLIB) DA( +\n    'SYS1.ISPMLIB', +\n    'SYS1.SBLSMSG0') SHR REUSE\nALLOC FI(ISPSLIB) DA( +\n    'SYS1.ISPSLIB', +\n    'SYS1.SBLSKEL0') SHR REUSE\nALLOC FI(ISPTLIB) DA( +\n    'SYS1.ISPTLIB', +\n    'SYS1.SBLSTBL0') SHR REUSE\nALLOC FI(MACLIB) DA( +\n    'YOUR.IDMS.SRCLIB', +\n    'SYS1.MACLIB', +\n    'SYS1.AMODGEN') SHR REUSE\nALLOC FI(SNAP) DUMMY\nALLOC FI(IPCSPRNT) SYSOUT(A)\nALLOC FI(IPCSTOC) SYSOUT(A)\nALLOC FI(IPCSDDIR) DSN('YOUR.IPCS.DUMP.DIRECTORY') SHR REUSE\nALLOC FI(IPCSPDIR) DSN('YOUR.IPCS.PROBLEM.DIRECTORY') SHR REUSE\nALLOC FI(IPCSPARM) DSN('YOUR.IPCS.PARMLIB') SHR REUSE\nIPCS PARM(&PARM) TASKLIB('YOUR.IPCS.EXIT.LOADLIB')\nISPSTART PGM(BLSG) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG)\nEND\n/*-------------------------------------------------------------------*/\n./       ADD   LTE#RCE\n/* THIS CLIST WALKS ALL OF THE RCE CHAINS OFF FROM A GIVEN LTE.  YOU */\n/* MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL NAME OF THE PARTICULAR  */\n/* LTE CONTROL BLOCK THAT YOU ARE INTERESTED IN.  A SAMPLE CALL      */\n/* MIGHT BE \"LTE#RCE INDEX(21)\".  THE \"INIT\" CLIST MUST BE EXECUTED  */\n/* BEFORE EXECUTING THIS CLIST.  THIS CLIST INVOKES THE FOLLOWING    */\n/* CLIST:  RCE.                                                      */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#LTEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM &NAME&INDEX\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''&NAME&INDEX'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         NOTE 'RCE''S WILL BE DISPLAYED FOR &NAME&INDEX'\n         NOTE '====== LTE RLE/RCE CHAIN ============================='\n         EQUATE RLESTART &NAME&INDEX+18 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            REMARK('RESOURCE LINK ELEMENT (RLE)') +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP\n         DROPSYM *\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   LTESTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF THE VARIOUS FLAGS IN THE LTE. */\n/* TO USE THIS CLIST, YOU MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL  */\n/* NAME OF THE PARTICULAR LTE CONTROL BLOCK THAT YOU ARE INTERESTED  */\n/* IN.  A SAMPLE CALL MIGHT BE \"LTESTAT INDEX(07)\".  THE \"INIT\"      */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.               */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#LTEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM EQ &NAME&INDEX\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE FOLLOWING NOTES ARE FOR CONTROL BLOCK &NAME&INDEX'\n         ELSE +\n            DO\n               NOTE 'THE SYMBOL ''&NAME&INDEX'' WAS NOT FOUND'\n               GOTO GETOUT\n            END\n/* GET THE LTERM NAME */\n         EVALUATE &NAME&INDEX+0 LENGTH(8) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE LTERM NAME IS &S'\n/* GET THE PTERM NAME */\n         EVALUATE &NAME&INDEX+8% LENGTH(8) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE PTERM NAME IS &S'\n/* GET THE USER INFORMATION */\n         EQUATE SONTEMP &NAME&INDEX+20 LENGTH(4) POINTER\n         COMPARE ADDRESS(SONTEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE LTETEMP &NAME&INDEX+20% LENGTH(4) POINTER\n               EQUATE SONTEMP LTETEMP+C% LENGTH(8) CHARACTER SCALAR\n               EVALUATE SONTEMP+1 LENGTH(32) +\n                  CHARACTER SCALAR CLIST(STORAGE(S))\n               NOTE 'THE USER FOR THIS TASK IS &S'\n               EVALUATE SONTEMP+21 LENGTH(1) +\n                  UNSIGNED SCALAR CLIST(STORAGE(S))\n               NOTE 'THE USER PRIORITY IS &S'\n            END\n/* GET NUMBER OF REPORTS PRINTED */\n         EVALUATE &NAME&INDEX+24 LENGTH(2) UNSIGNED CLIST(STORAGE(S))\n         NOTE '&S REPORTS HAVE BEEN PRINTED FROM THIS LTERM'\n/* GET PRIORITY FOR THE LTERM */\n         EVALUATE &NAME&INDEX+28 LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'THE LTERM PRIORITY IS &S'\n/* CHECK FOR UPPER CASE TRANSLATE */\n         EQUATE LTETEMP &NAME&INDEX+29 LENGTH(1) BIT\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'LOWERCASE IS TRANSLATED TO UPPERCASE'\n         ELSE +\n            NOTE 'LOWERCASE IS NOT TRANSLATED TO UPPERCASE'\n/* CHECK FOR TERMINAL OWNED BY MASTER */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS OWNED BY MASTER TASK'\n/* CHECK FOR LAST I/O */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'LAST I/O WAS A WRITE'\n         ELSE +\n            NOTE 'LAST I/O WAS A READ'\n/* CHECK FOR TERMINAL ON MASTER READY QUEUE */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS ON MASTER''S READY QUEUE'\n/* CHECK FOR INTERNAL TASK */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TASK IS BEING INVOKED INTERNALLY'\n         ELSE +\n            NOTE 'TASK IS BEING INVOKED EXTERNALLY'\n/* CHECK FOR NEW TASK */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'A NEW TRANSACTION IS BEING STARTED'\n/* CHECK FOR IN/OUT OF SERVICE */\n         EQUATE LTETEMP &NAME&INDEX+2A LENGTH(1) BIT\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'LTERM IS OUT OF SERVICE'\n         ELSE +\n            NOTE 'LTERM IS IN SERVICE'\n/* CHECK FOR PTERM SWAP */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            DO\n               NOTE 'LTERM IS BEING SWAPPED TO A NEW PTERM'\n/* GET THE NEW PTERM NAME */\n               EQUATE LTETEMP &NAME&INDEX+50 LENGTH(4) POINTER\n               COMPARE ADDRESS(LTETEMP) LENGTH(4) +\n                  WITH(VALUE(X'00000000')) LENGTH(4) +\n                  MASK(X'00FFFFFF')\n               IF &LASTCC \u00ac= 0 THEN +\n                  DO\n                     EVALUATE &NAME&INDEX+50% LENGTH(8) CHARACTER +\n                        CLIST(STORAGE(S))\n                     NOTE 'THE NEW PTERM NAME IS &S'\n                  END\n            END\n/* CHECK FOR PRINTER LTERM */\n         SET &PRINTER = N\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            DO\n               NOTE 'THE LTERM IS A PRINTER'\n               SET &PRINTER = Y\n            END\n/* CHECK FOR MESSAGE QUEUED TO LTERM */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THERE IS A MESSAGE QUEUED TO THE LTERM'\n/* CHECK FOR MESSAGE QUEUED TO USER */\n         COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THERE IS A MESSAGE QUEUED TO THE USER'\n/* CHECK ACTION CODE FOR MASTER FACTOTUM TASK */\n         EVALUATE &NAME&INDEX+2B LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         SET &T = &S\n         IF &S = &STR(4) THEN +\n            SET &T = &STR(WRITE ABEND CODE OF PREVIOUS TASK)\n         IF &S = &STR(8) THEN +\n            SET &T = &STR(WRITE ENTER-NEXT-TASK-CODE MESSAGE)\n         IF &S = &STR(12) THEN +\n            SET &T = &STR(WRITE UNDEFINED-TASK-CODE MESSAGE)\n         IF &S = &STR(16) THEN +\n            SET &T = &STR(WRITE TASK-SECURITY-VIOLATION MAP)\n         IF &S = &STR(20) THEN +\n            SET &T = &STR(WRITE TDE-SPECIFIED MAP)\n         IF &S = &STR(24) THEN +\n            SET &T = &STR(INTERNAL-TASK-BEING-INVOKED-FROM-TERMINAL)\n         IF &S = &STR(28) THEN +\n            SET &T = &STR(WRITE SYSTEM-BEING-QUIESCED MESSAGE)\n         IF &S = &STR(32) THEN +\n            SET &T = &STR(SIGNOFF USER AND/OR TERMINATE SESSION)\n         IF &S = &STR(36) THEN +\n            SET &T = &STR(PREPARE TERMINAL FOR A #TREQ READ)\n         IF &S = &STR(40) THEN +\n            SET &T = &STR(WAIT FOR TERMINAL OPERATOR TO FINISH)\n         IF &S = &STR(44) THEN +\n            SET &T = &STR(WRITE TASK-OUT-OF-SERVICE MESSAGE)\n         IF &S = &STR(48) THEN +\n            SET &T = &STR(WRITE PROGRAM-OUT-OF-SERVICE MESSAGE)\n         IF &S = &STR(52) THEN +\n            SET &T = &STR(INVOKE RESOURCE TIMEOUT PROGRAM)\n         IF &S = &STR(56) THEN +\n            SET &T = &STR(PRINT SCREEN CONTENTS)\n         IF &S = &STR(60) THEN +\n            SET &T = &STR(WRITE BLAST MESSAGE/REFRESH SCREEN)\n         IF &S = &STR(64) THEN +\n            SET &T = &STR(GET NEXT COMMAND FROM CLIST)\n         IF &S = &STR(68) THEN +\n            SET &T = &STR(MAP PAGING SESSION)\n         IF &S = &STR(72) THEN +\n            SET &T = &STR(MAXIMUM CONCURRENT TASK CONDITION)\n         IF &S = &STR(76) THEN +\n            SET &T = &STR(MODEENT GROUP REQUIRES INITIALIZATION)\n         IF &S = &STR(80) THEN +\n            SET &T = &STR(HANDLE LU6.2 FUNCTION MANAGEMENT HEADER)\n         NOTE 'FACTOTUM TASK ACTION CODE IS : &T'\n/* GET INFO FOR NON-PRINTER LTERMS */\n         IF &PRINTER = N THEN +\n            DO\n            /* GET NEXT TASK CODE FOR LTERM */\n               EVALUATE &NAME&INDEX+2D LENGTH(7) CHARACTER +\n                  CLIST(STORAGE(S))\n               EVALUATE &NAME&INDEX+95 LENGTH(1) CHARACTER +\n                  CLIST(STORAGE(T))\n               NOTE 'NEXT TASK CODE FOR TERMINAL IS &T&S'\n            /* GET AUTO TASK CODE FOR LTERM */\n               EVALUATE &NAME&INDEX+34 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               IF &S \u00ac= &STR(        ) THEN +\n                  NOTE 'AUTO TASK CODE FOR TERMINAL IS &S'\n            /* GET ABEND CODE OF LAST TASK */\n               EVALUATE &NAME&INDEX+3C LENGTH(4) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'ABEND CODE OF LAST TASK FOR LTERM WAS &S'\n            /* GET RESOURCE TIMEOUT PROGRAM FOR LTERM */\n               EVALUATE &NAME&INDEX+64 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'RESOURCE TIMEOUT PROGRAM IS &S'\n            /* GET DEFAULT VERSION FOR TASKS */\n               EVALUATE &NAME&INDEX+72 LENGTH(2) UNSIGNED +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT VERSION FOR TASKS IS &S'\n            /* GET DEFAULT DBNODE */\n               EVALUATE &NAME&INDEX+AC LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT DBNODE IS &S'\n            /* GET DEFAULT DBNAME */\n               EVALUATE &NAME&INDEX+B4 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT DBNAME IS &S'\n            /* GET DEFAULT DICTNODE */\n               EVALUATE &NAME&INDEX+C4 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT DICTNODE IS &S'\n            /* GET DEFAULT DICTNAME */\n               EVALUATE &NAME&INDEX+CC LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT DICTNAME IS &S'\n            /* GET DEFAULT LOADLIB */\n               EVALUATE &NAME&INDEX+DC LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'DEFAULT LOADLIB IS &S'\n            END\n         ELSE +\n            DO\n            /* GET NAME OF REPORT BEING PRINTED */\n               EVALUATE &NAME&INDEX+34 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'NAME OF REPORT BEING PRINTED IS &S'\n            /* CHECK FOR DRAIN PRINTER */\n               EQUATE LTETEMP &NAME&INDEX+4C LENGTH(1) BIT\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PRINTER IS BEING DRAINED'\n            /* CHECK FOR CANCEL PRINTER */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PRINTER IS BEING CANCELED'\n            /* CHECK FOR INTERRUPT PRINTER */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PRINTER IS BEING INTERRUPTED'\n            /* CHECK FOR READ NEXT QUEUE RECORD */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PRINTER IS READING NEXT QUEUE RECORD'\n            /* CHECK FOR PRINT TASK */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PRINT TASK WANTS TO USE PRINTER'\n            /* CHECK FOR FIRST RECORD READ */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'FIRST REPORT QUEUE RECORD HAS BEEN READ'\n            /* CHECK FOR EMPTY REPORT QUEUE */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'NO MORE RECORDS IN REPORT QUEUE'\n               ELSE +\n                  NOTE 'THE REPORT QUEUE IS NOT EMPTY'\n            /* CHECK FOR BANNER PAGE */\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'BANNER PAGES WILL BE SUPPRESSED'\n               ELSE +\n                  NOTE 'BANNER PAGES WILL BE PRINTED'\n            /* GET CURRENT PRINT CLASS/DESTINATION */\n               EQUATE LTETEMP &NAME&INDEX+60 LENGTH(1) BIT\n               COMPARE ADDRESS(LTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  DO\n                     EVALUATE &NAME&INDEX+60 LENGTH(8) CHARACTER +\n                        CLIST(STORAGE(S))\n                     NOTE 'CURRENT PRINT DESTINATION IS &S'\n                  END\n               ELSE +\n                  DO\n                     EVALUATE &NAME&INDEX+60 LENGTH(2) UNSIGNED +\n                        CLIST(STORAGE(S))\n                     NOTE 'CURRENT PRINT CLASS IS &S'\n                  END\n            END\nGETOUT:  DROPSYM (LTETEMP SONTEMP)\n/*-------------------------------------------------------------------*/\n./       ADD   MAP\n/* THIS CLIST DISPLAYS A MEMORY MAP OF THE CV ADDRESS SPACE.  THE    */\n/* \"INIT\" CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.        */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM #CSADS\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''#CSADS'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         NOTE 'IDMS-CV SYSTEM REGION MAP'\n         NOTE '========================='\n         EQUATE RMAPSTRT #CSADS+34C% LENGTH(4) POINTER\n         EVALSYM RMAPSTRT CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &A = &A + &P\nLOOP:    COMPARE ADDRESS(RMAPSTRT) LENGTH(1) +\n            WITH(VALUE(X'00')) LENGTH(1)\n         IF &LASTCC = 0 THEN GOTO DONE\n         EVALUATE RMAPSTRT+0 CHARACTER LENGTH(8) +\n            CLIST(STORAGE(N1))\n         EVALUATE RMAPSTRT+8 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(A1))\n         EQUATE @&N1 &A1.. NODROP\n         SET &A = &A + 12\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE RMAPSTRT &AX.. LENGTH(4) POINTER\n         COMPARE ADDRESS(RMAPSTRT) LENGTH(1) +\n            WITH(VALUE(X'00')) LENGTH(1)\n         IF &LASTCC = 0 THEN +\n            DO\n               NOTE '&N1 &A1'\n               GOTO DONE\n            END\n         EVALUATE RMAPSTRT+0 CHARACTER LENGTH(8) +\n            CLIST(STORAGE(N2))\n         EVALUATE RMAPSTRT+8 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(A2))\n         EQUATE @&N2 &A2.. NODROP\n         SET &A = &A + 12\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE RMAPSTRT &AX.. LENGTH(4) POINTER\n         COMPARE ADDRESS(RMAPSTRT) LENGTH(1) +\n            WITH(VALUE(X'00')) LENGTH(1)\n         IF &LASTCC = 0 THEN +\n            DO\n               NOTE '&N1 &A1         &N2 &A2'\n               GOTO DONE\n            END\n         EVALUATE RMAPSTRT+0 CHARACTER LENGTH(8) +\n            CLIST(STORAGE(N3))\n         EVALUATE RMAPSTRT+8 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(A3))\n         EQUATE @&N3 &A3.. NODROP\n         SET &A = &A + 12\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE RMAPSTRT &AX.. LENGTH(4) POINTER\n         COMPARE ADDRESS(RMAPSTRT) LENGTH(1) +\n            WITH(VALUE(X'00')) LENGTH(1)\n         IF &LASTCC = 0 THEN +\n            DO\n               NOTE '&N1 &A1         &N2 &A2         &N3 &A3'\n               GOTO DONE\n            END\n         EVALUATE RMAPSTRT+0 CHARACTER LENGTH(8) +\n            CLIST(STORAGE(N4))\n         EVALUATE RMAPSTRT+8 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(A4))\n         EQUATE @&N4 &A4.. NODROP\n         SET &A = &A + 12\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE RMAPSTRT &AX.. LENGTH(4) POINTER\n         NOTE '&N1 &A1         &N2 &A2         &N3 &A3         &N4 &A4'\n         GOTO LOOP\nDONE:    DROPSYM *\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   PTE\n/* THIS CLIST CREATES A LIST OF PTERMS ON THE MASTER READY QUEUE.    */\n/* THE \"INIT\" CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.    */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EQUATE LTEPTR X LENGTH(4) AREA SCALAR\n         EVALSYM < @RHDCOS00 CLIST(SYMBOL(S))\n         IF &SUBSTR(1:4,&S) \u00ac= &STR(#MLT) THEN +\n            DO WHILE &SUBSTR(1:4,&S) \u00ac= &STR(#MLT)\n               EVALSYM < &S CLIST(SYMBOL(S))\n               IF &LASTCC > 0 THEN GOTO GETOUT\n            END\n         SET &SUFFIX = &SUBSTR(8:9,&S)\n         EQUATE #MPTEDS&SUFFIX LTEPTR+8% LENGTH(X'110') +\n            STRUCTURE(#PTEDS) NODROP +\n            REMARK('PTERM ON MASTER''S READY QUEUE ')\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   PTESTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF THE VARIOUS FLAGS IN THE PTE. */\n/* TO USE THIS CLIST, YOU MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL  */\n/* NAME OF THE PARTICULAR PTE CONTROL BLOCK THAT YOU ARE INTERESTED  */\n/* IN.  A SAMPLE CALL MIGHT BE \"PTESTAT INDEX(07)\".  THE \"INIT\"      */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.               */\n/*                                                                   */\n/* N O T E:  THIS CLIST HAS BEEN GEARED PRETTY MUCH TO WORK FOR UCF  */\n/* TERMINALS.  SOME MODIFICATIN MAY BE REQUIRED FOR VTAM OR OTHER    */\n/* TYPE OF LINES.                                                    */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#PTEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM EQ &NAME&INDEX\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE FOLLOWING NOTES ARE FOR CONTROL BLOCK &NAME&INDEX'\n         ELSE +\n            DO\n               NOTE 'THE SYMBOL ''&NAME&INDEX'' WAS NOT FOUND'\n               GOTO GETOUT\n            END\n/* GET THE PTERM NAME */\n         EVALUATE &NAME&INDEX+0 LENGTH(8) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE PTERM NAME IS &S'\n/* GET THE LINE INFO */\n         EQUATE PTETEMP &NAME&INDEX+8% LENGTH(4) POINTER\n         EVALUATE PTETEMP+0 LENGTH(8) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE LINE ID IS &S'\n/* GET THE LINE TYPE */\n         EVALUATE PTETEMP+40 LENGTH(1) CHARACTER CLIST(STORAGE(R))\n         IF &R = &STR(0) THEN SET &T = &STR(SYSINX/SYSOUTX)\n         IF &R = &STR(1) THEN SET &T = &STR(LOCAL 3270'S)\n         IF &R = &STR(2) THEN SET &T = &STR(REMOTE 3270'S)\n         IF &R = &STR(3) THEN SET &T = &STR(SIMULATED 3270'S)\n         IF &R = &STR(4) THEN SET &T = &STR(OPERATOR'S CONSOLE)\n         IF &R = &STR(5) THEN SET &T = &STR(VTAM OR DCAM INTERFACE)\n         IF &R = &STR(6) THEN SET &T = &STR(START/STOP TERMINALS)\n         IF &R = &STR(7) THEN SET &T = &STR(SYSOUT ONLY - PRINTERS)\n         IF &R = &STR(8) THEN SET &T = &STR(LOCAL 3280 PRINTER)\n         IF &R = &STR(9) THEN SET &T = &STR(ONLINE SIMULATED 3270'S)\n         IF &R = &STR(A) THEN SET &T = &STR(TCAM DRIVER)\n         IF &R = &STR(B) THEN +\n            SET &T = &STR(BSC NON-SWITCHED POINT-TO-POINT)\n         IF &R = &STR(C) THEN +\n            SET &T = &STR(BSC SWITCHED POINT-TO-POINT)\n         IF &R = &STR(D) THEN SET &T = &STR(BSC MULTIPOINT)\n         IF &R = &STR(E) THEN SET &T = &STR(VTAM/SNA LOGICAL UNITS)\n         IF &R = &STR(F) THEN SET &T = &STR(APPC EMULATOR)\n         IF &R = &STR(L) THEN SET &T = &STR(SDS NETWORK LINE DRIVER)\n         IF &R = &STR(Z) THEN SET &T = &STR(UCF LINE DRIVER)\n         NOTE 'THE LINE TYPE IS &T'\n/* GET THE TERMINAL DEVICE TYPE */\n         EVALUATE &NAME&INDEX+24 LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         IF &S = &STR(0) THEN SET &T = &STR(UCFTERM)\n         IF &S = &STR(1) THEN SET &T = &STR(INOUTT)\n         IF &S = &STR(2) THEN SET &T = &STR(3275)\n         IF &S = &STR(3) THEN SET &T = &STR(S3277)\n         IF &S = &STR(4) THEN SET &T = &STR(L3277, V3277, OR D3277)\n         IF &S = &STR(5) THEN SET &T = &STR(R3277)\n         IF &S = &STR(6) THEN SET &T = &STR(S3278)\n         IF &S = &STR(7) THEN SET &T = &STR(R3278, V3278, OR D3278)\n         IF &S = &STR(8) THEN SET &T = &STR(L3278)\n         IF &S = &STR(9) THEN SET &T = &STR(R3284)\n         IF &S = &STR(10) THEN SET &T = &STR(L3284, V3284, OR D3284)\n         IF &S = &STR(11) THEN SET &T = &STR(R3286)\n         IF &S = &STR(12) THEN SET &T = &STR(L3286, V3286, OR D3286)\n         IF &S = &STR(13) THEN SET &T = &STR(R3287)\n         IF &S = &STR(14) THEN SET &T = &STR(L3287, V3287, OR D3287)\n         IF &S = &STR(15) THEN SET &T = &STR(R3288)\n         IF &S = &STR(16) THEN SET &T = &STR(L3288, V3288, OR D3288)\n         IF &S = &STR(17) THEN SET &T = &STR(R3289 OR V3289)\n         IF &S = &STR(18) THEN SET &T = &STR(L3289)\n         IF &S = &STR(19) THEN SET &T = &STR(ASR33)\n         IF &S = &STR(20) THEN SET &T = &STR(CRT)\n         IF &S = &STR(21) THEN SET &T = &STR(RO33)\n         IF &S = &STR(22) THEN SET &T = &STR(2741)\n         IF &S = &STR(23) THEN SET &T = &STR(OPERATOR)\n         IF &S = &STR(24) THEN SET &T = &STR(SYSOUTT)\n         IF &S = &STR(25) THEN SET &T = &STR(VTAM LU)\n         IF &S = &STR(32) THEN +\n            SET &T = &STR(L3279, R3279, S3279, OR V3279)\n         IF &S = &STR(33) THEN SET &T = &STR(3741)\n         IF &S = &STR(34) THEN SET &T = &STR(3780)\n         IF &S = &STR(35) THEN SET &T = &STR(3741)\n         IF &S = &STR(36) THEN SET &T = &STR(3275)\n         IF &S = &STR(37) THEN SET &T = &STR(3780)\n         IF &S = &STR(48) THEN SET &T = &STR(SVC - SDS LINE)\n         IF &S = &STR(49) THEN SET &T = &STR(CTC - SDS LINE)\n         IF &S = &STR(50) THEN SET &T = &STR(BSC - SDS LINE)\n         IF &S = &STR(51) THEN SET &T = &STR(VTAM - SDS LINE)\n         IF &S = &STR(52) THEN SET &T = &STR(SNA LU - GENERAL CATEGORY)\n         IF &S = &STR(53) THEN SET &T = &STR(3600 FULL-FUNCTION LU)\n         IF &S = &STR(54) THEN SET &T = &STR(3600 PIPELINE)\n         IF &S = &STR(55) THEN SET &T = &STR(3614)\n         IF &S = &STR(56) THEN SET &T = &STR(SNA LU 6.2 SESSION)\n         IF &S = &STR(65) THEN SET &T = &STR(DVTSU)\n         IF &S = &STR(66) THEN SET &T = &STR(D8160)\n         IF &S = &STR(67) THEN SET &T = &STR(GENERIC SIEMENS TERMINAL)\n         IF &S = &STR(68) THEN SET &T = &STR(D9750)\n         IF &S = &STR(69) THEN SET &T = &STR(GENERIC SIEMENS PRINTER)\n         IF &S = &STR(70) THEN SET &T = &STR(D8121)\n         IF &S = &STR(71) THEN SET &T = &STR(D8122)\n         IF &S = &STR(72) THEN SET &T = &STR(D9003)\n         IF &S = &STR(73) THEN SET &T = &STR(APPC EMULATOR)\n         IF &S = &STR(74) THEN SET &T = &STR(VIDEOTEX)\n         IF &S = &STR(75) THEN SET &T = &STR(DCAM - SDS LINE)\n         NOTE 'THE TERMINAL DEVICE TYPE IS &T'\n/* GET THE TERMINAL DEVICE MODEL */\n         EVALUATE &NAME&INDEX+25 LENGTH(1) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE TERMINAL DEVICE MODEL IS &S'\n/* CHECK FOR TERMINAL CLOSED */\n         EQUATE PTETEMP &NAME&INDEX+26 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS CLOSED (NEVER OPENED)'\n/* CHECK FOR TERMINAL OUT OF SERVICE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS OUT OF SERVICE'\n/* CHECK FOR TERMINAL DISCONNECTED */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS DISCONNECTED, OR INTERVENTION REQUIRED'\n/* CHECK FOR 3270 TERMINAL */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL LOOKS LIKE A 3270 DISPLAY'\n/* CHECK FOR QUEUED INPUT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'INPUT IS QUEUED TO THE TERMINAL'\n/* CHECK FOR VARY FLAG */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE DON''T-VARY-OUT-OT-SERVICE FLAG IS ON'\n/* CHECK FOR VARY OUT-OF-SERVICE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'LINE DRIVER SHOULD VARY THE PTERM OUT-OF-SERVICE'\n/* CHECK FOR VARY IN-SERVICE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'LINE DRIVER SHOULD VARY THE PTERM IN-SERVICE'\n/* CHECK FOR REQUEST IN PROGRESS */\n         EQUATE PTETEMP &NAME&INDEX+27 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THERE IS A TERMINAL REQUEST IN PROGRESS'\n/* CHECK FOR HALT REQUEST */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THERE HAS BEEN A HALT REQUEST'\n/* CHECK FOR WAITING FOR SERVICE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS WAITING FOR SERVICE'\n/* GET MAX # OF CONSECUTIVE PERM ERRORS */\n         EVALUATE &NAME&INDEX+4C LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'MAX # OF CONSECTIVE PERM ERRORS IS &S'\n/* GET # OF CONSECUTIVE PERM ERRORS */\n         EVALUATE &NAME&INDEX+4D LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         NOTE '# OF CONSECTIVE PERM ERRORS IS &S'\n/* GET LINE LENGTH */\n         EVALUATE &NAME&INDEX+50 LENGTH(2) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'TERMINAL LINE LENGTH IS &S CHARACTERS'\n/* GET PAGE LENGTH */\n         EVALUATE &NAME&INDEX+52 LENGTH(2) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'TERMINAL PAGE LENGTH IS &S LINES'\n/* CHECK FOR ASCII/EBCDIC */\n         EQUATE PTETEMP &NAME&INDEX+57 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS ASCII'\n         ELSE +\n            NOTE 'TERMINAL IS EBCDIC'\n/* CHECK FOR 328X FORM FEED SUPPORT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL SUPPORTS 328X FORM FEED'\n/* CHECK FOR 328X PRINTER */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL LOOKS LIKE A 328X PRINTER'\n/* CHECK FOR ASA CONTROL CHARACTER */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL REQUIRES ASA CONTROL CHARACTER'\n/* CHECK FOR TERMINAL STATS COLLECTION */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL STATISTICS ARE BEING COLLECTED'\n         ELSE +\n            NOTE 'TERMINAL STATISTICS ARE NOT BEING COLLECTED'\n/* CHECK FOR ERASE/WRITE ALTERNATE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL USES ERASE/WRITE ALTERNATE COMMAND'\n/* CHECK FOR READ BUFFER SUPPORT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL READ BUFFER IS NOT SUPPORTED'\n         ELSE +\n            NOTE 'TERMINAL READ BUFFER IS SUPPORTED'\n/* CHECK FOR SNA CHARACTER STRING DEVICE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TERMINAL IS AN SNA CHARACTER STRING DEVICE'\n/* GET RELATIVE TERMINAL NUMBER */\n         EVALUATE &NAME&INDEX+58 LENGTH(2) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'RELATIVE TERMINAL NUMBER IS &S'\n/* GET REQUEST COMPLETION CODE */\n         EVALUATE &NAME&INDEX+5C LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         SET &T = &S\n         IF &S = &STR(0) THEN +\n            SET &T = &STR(GOOD COMPLETION - I/O SUCCESSFUL)\n         IF &S = &STR(4) THEN +\n            SET &T = &STR(INPUT TRUNCATED, INPUT AREA TOO SMALL)\n         IF &S = &STR(8) THEN +\n            SET &T = &STR(TERMINAL OPERATOR HIT ATTN OR BREAK)\n         IF &S = &STR(12) THEN +\n            SET &T = &STR(LOGICAL ERRORS IN DATA STREAM)\n         IF &S = &STR(16) THEN +\n            SET &T = &STR(PERMANENT I/O ERROR)\n         IF &S = &STR(20) THEN +\n            SET &T = &STR(LINE DISCONNECTED OR INTERVENTION REQUIRED)\n         IF &S = &STR(24) THEN +\n            SET &T = &STR(TERMINAL IS OUT-OF-SERVICE)\n         IF &S = &STR(28) THEN +\n            SET &T = &STR(TERMINAL IS CLOSED - OPEN DIDN'T WORK)\n         IF &S = &STR(32) THEN +\n            SET &T = &STR(INVALID TRB PARAMETER LIST)\n         IF &S = &STR(36) THEN +\n            SET &T = &STR(INVALID 'BLAST' DESTINATION)\n         NOTE 'REQUEST COMPLETION CODE : &T'\n/* GET I/O EVENT COMPLETION CODE */\n         EVALUATE &NAME&INDEX+5D LENGTH(1) UNSIGNED CLIST(STORAGE(S))\n         SET &T = &S\n         IF &S = &STR(0) THEN +\n            SET &T = &STR(GOOD COMPLETION - I/O SUCCESSFUL)\n         IF &S = &STR(4) THEN +\n            SET &T = &STR(INPUT TRUNCATED, INPUT AREA TOO SMALL)\n         IF &S = &STR(8) THEN +\n            SET &T = &STR(TERMINAL OPERATOR HIT ATTN OR BREAK)\n         IF &S = &STR(12) THEN +\n            SET &T = &STR(LOGICAL ERRORS IN DATA STREAM)\n         IF &S = &STR(16) THEN +\n            SET &T = &STR(PERMANENT I/O ERROR)\n         IF &S = &STR(20) THEN +\n            SET &T = &STR(LINE DISCONNECTED OR INTERVENTION REQUIRED)\n         IF &S = &STR(24) THEN +\n            SET &T = &STR(TERMINAL IS OUT-OF-SERVICE)\n         IF &S = &STR(28) THEN +\n            SET &T = &STR(TERMINAL IS CLOSED - OPEN DIDN'T WORK)\n         IF &S = &STR(32) THEN +\n            SET &T = &STR(INVALID TRB PARAMETER LIST)\n         IF &S = &STR(36) THEN +\n            SET &T = &STR(INVALID 'BLAST' DESTINATION)\n         NOTE 'I/O EVENT COMPLETION CODE : &T'\n/* CHECK FOR ENTER-NEXT-TASK-CODE PROMPT */\n         EQUATE PTETEMP &NAME&INDEX+5E LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'NO ENTER-NEXT-TASK-CODE PROMPT'\n/* CHECK FOR SUSPEND AT NEXT TASK CODE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SUSPEND AT NEXT TASK CODE'\n/* CHECK FOR SUSPEND TERMINAL */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'SUSPEND TERMINAL'\n/* CHECK FOR APPC SUPPORT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'APPC IS SUPPORTED'\n/* CHECK FOR WRITE REQUEST */\n         EQUATE PTETEMP &NAME&INDEX+60 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            DO\n               EVALUATE &NAME&INDEX+68 LENGTH(2) UNSIGNED +\n                  CLIST(STORAGE(S))\n               EVALUATE &NAME&INDEX+64% LENGTH(&S) CHARACTER +\n                  CLIST(STORAGE(T))\n               NOTE 'DATA TO BE WRITTEN : &T'\n               NOTE 'TRB PARM - WRITE REQUEST'\n            END\n/* CHECK FOR READ REQUEST */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - READ REQUEST'\n/* CHECK FOR CHECK */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - CHECK'\n/* CHECK FOR CONNECT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - CONNECT'\n/* CHECK FOR DISCONNECT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - DISCONNECT'\n/* CHECK FOR MAPPING */\n         EQUATE PTETEMP &NAME&INDEX+61 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - REQUEST INVOLVES MAPPING'\n/* CHECK FOR LOCATE MODE TYPE READ */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - LOCATE MODE TYPE READ'\n/* CHECK FOR FREE CALLER'S WRITE BUFFER */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - #FREESTG CALLER''S WRITE BUFFER'\n/* CHECK FOR JOURNAL I/O */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - DO NOT JOURNAL THIS I/O'\n/* CHECK FOR SAVE WRITE IF BLASTED */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - SAVE THIS WRITE IF BLASTED'\n/* CHECK FOR LTEADDR/TCELTEA */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - USE R0 LTEADDR, NOT TCELTEA'\n/* CHECK FOR BLAST WRITE REQUEST */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - BLAST WRITE REQUEST'\n/* CHECK FOR NEW-PAGE */\n         EQUATE PTETEMP &NAME&INDEX+62 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - NEW-PAGE, EJECT, OR ERASE/WRITE'\n/* CHECK FOR ATTENTION WAIT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - DON''T WAIT FOR ATTENTION'\n/* CHECK FOR READ FROM SCREEN POSITION */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - READ FROM SCREEN POSITION'\n/* CHECK FOR BLAST TO DEST ID */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - ''BLAST'' TO DESTINATION ID'\n/* CHECK FOR BLAST TO LTERM ID */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - ''BLAST'' TO LTERM ID'\n/* CHECK FOR BLAST TO USER ID */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB PARM - ''BLAST'' TO USER ID'\n/* CHECK FOR INPUT TRUNCATED */\n         EQUATE PTETEMP &NAME&INDEX+63 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - INPUT TRUNCATED'\n/* CHECK FOR ATTN HIT ON OUTPUT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - ATTN HIT ON OUTPUT'\n/* CHECK FOR LOGICAL DATA ERRORS */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - LOGICAL DATA ERRORS'\n/* CHECK FOR PERMANENT I/O ERRORS */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - PERMANENT I/O ERRORS'\n/* CHECK FOR TERMINAL IS DEAD */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - TERMINAL IS DEAD'\n/* CHECK FOR INVALID PTE PARAMETER LIST */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - INVALID PTE PARAMETER LIST'\n/* CHECK FOR INVALID BLAST DESTINATION */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'TRB CONDITIONS HANDLED - INVALID BLAST DESTINATION'\n/* CHECK FOR ENTER NEXT TASK CODE ALONE */\n         EQUATE PTETEMP &NAME&INDEX+84 LENGTH(1) BIT\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'ENTER NEXT TASK CODE ALONE ON SCREEN'\n/* CHECK FOR MAPR TO USE DEFAULT SCREEN SIZE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'MAPR IS TO USE DEFAULT SCREEN SIZE'\n/* CHECK FOR WAITING FOR RHDCMSTR */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'WAITING FOR RHDCMSTR TO VARY PTERM IN'\n/* CHECK FOR VARY QUIESCE */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'VARY QUIESCE HAS BEEN ISSUED'\n/* CHECK FOR VARY ABORT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'VARY ABORT HAS BEEN ISSUED'\n/* CHECK FOR VARY CONNECT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'VARY CONNECT HAS BEEN ISSUED'\n/* CHECK FOR VARY DISCONNECT */\n         COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'VARY DISCONNECT HAS BEEN ISSUED'\n/* GET INFORMATION FOR UCF PTERMS */\n         IF &R = &STR(Z) THEN +\n            DO\n            /* GET FRONT END TERMINAL ID */\n               EVALUATE &NAME&INDEX+B8 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(R))\n               NOTE 'FRONT END TERMINAL ID IS &R'\n            /* GET FRONT END SYSTEM ID */\n               EVALUATE &NAME&INDEX+C0 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'FRONT END SYSTEM ID IS &S'\n            /* CHECK FOR DEDICATED MODE */\n               EQUATE PTETEMP &NAME&INDEX+C8 LENGTH(1) BIT\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS IN DEDICATED MODE'\n            /* CHECK FOR INTERMITTENT MODE */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS IN INTERMITTENT MODE'\n            /* CHECK FOR CONVERSATIONAL MODE */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS IN CONVERSATIONAL MODE'\n            /* CHECK FOR TYPE 1 PRINTER */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS A TYPE 1 PRINTER'\n            /* CHECK FOR TYPE 2 PRINTER */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS A TYPE 2 PRINTER'\n            /* CHECK FOR SUSPENDED PTERM */\n               EQUATE PTETEMP &NAME&INDEX+CA LENGTH(1) BIT\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS SUSPENDED'\n            /* CHECK FOR ACTIVE PTERM */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS ACTIVE'\n            /* CHECK FOR RESERVED PTERM */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS RESERVED FOR TERMINAL &R'\n            /* CHECK FOR WAIT ON ERE */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM IS WAITING FOR ERE'\n            /* CHECK FOR ABORT ERE */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM WILL ABORT ERE IMMEDIATELY ON VARY OUT'\n            /* CHECK FOR CONVERSING PTERM */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PTERM CONVERSING - TERMINAL READ IN PROGRESS'\n            /* CHECK FOR DISCONNECT REQUEST */\n               EQUATE PTETEMP &NAME&INDEX+CB LENGTH(1) BIT\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'TERMINAL USER ASKED TO DISCONNECT'\n            /* CHECK FOR SUSPEND PTERM */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'SUSPEND PTERM ON NEXT FINISH'\n            /* CHECK FOR TRANSFER TO FRONT-END TASK */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'TRANSFER TO FRONT-END TASK'\n            /* CHECK FOR GETLTE TEST */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'GETLTE TEST PRINTER REQUEST'\n            /* CHECK FOR GETLTE WAIT */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'GETLTE WAIT PRINTER REQUEST'\n            /* CHECK FOR GETLTE NOWAIT */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'GETLTE NOWAIT PRINTER REQUEST'\n            /* CHECK FOR FREELTE PRINTER */\n               COMPARE ADDRESS(PTETEMP) LENGTH(1) +\n                  WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'FREELTE PRINTER REQUEST'\n            /* GET DISCONNECT/ABORT CODE */\n               EVALUATE &NAME&INDEX+CC LENGTH(4) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'PTERM DISCONNECT/ABORT CODE IS &S'\n            END\nGETOUT:  DROPSYM PTETEMP\n/*-------------------------------------------------------------------*/\n./       ADD   RLE\n/* THIS CLIST DISPLAYS INFORMATION PERTAINING TO A RCE FOR A GIVEN   */\n/* RLE.  THIS CLIST IS NORMALLY INVOKED ONLY BY THE CSA#RCE AND      */\n/* LTE#RCE CLISTS.                                                   */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EQUATE RLEPTR X LENGTH(4) AREA SCALAR\n         EQUATE RCEPTR RLEPTR+8% STRUCTURE(#RCEDS) +\n            LENGTH(X'18') SCALAR\n         EVALUATE RCEPTR+0 HEXADECIMAL LENGTH(1) CLIST(STORAGE(S))\n         SET &RCETYPE = '&S'\n         IF &RCETYPE = '01' THEN +\n            DO\n               NOTE 'RCE IS FOR STORAGE ---------------------------'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'STORAGE IS KEPT ACROSS TASKS'\n               ELSE +\n                  NOTE 'STORAGE IS NOT KEPT ACROSS TASKS'\n               EVALUATE RCEPTR+1 UNSIGNED LENGTH(1) CLIST(STORAGE(S))\n               IF &S > 128 THEN +\n                  SET &S = &S - 128\n               NOTE 'STORAGE POOL ID IS &S'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               COMPARE ADDRESS(RCEPTR+8) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'STORAGE IS RELOCATABLE'\n               ELSE +\n                  NOTE 'STORAGE IS NOT RELOCATABLE'\n               EVALUATE RCEPTR+9 UNSIGNED LENGTH(3) CLIST(STORAGE(L))\n               NOTE 'STORAGE LENGTH IS &L'\n               COMPARE ADDRESS(RCEPTR+C) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  DO\n                     NOTE 'STORAGE IS CURRENTLY ''OUT'' '\n                     EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                        CLIST(STORAGE(S)\n                     EVALUATE RCEPTR+C CHARACTER LENGTH(4) +\n                        CLIST(STORAGE(T)\n                     NOTE 'THE SCRATCH ID IS C''&T'' X''&S'' '\n                     SET &A = '00000000'\n                  END\n               ELSE +\n                  DO\n                     EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                        CLIST(STORAGE(A)\n                     NOTE 'THE STORAGE ADDRESS IS X''&A'' '\n                  END\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               EVALUATE RCEPTR+10 CHARACTER LENGTH(4) +\n                  CLIST(STORAGE(T))\n               NOTE 'THE SYMBOLIC STORAGE ID IS C''&T'' X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THE SCT ADDRESS IS X''&S'' '\n               IF &A \u00ac= '00000000' THEN +\n                   EQUATE $STG&A &A.. +\n                      LENGTH(&L) AREA(STORAGE)\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '02' THEN +\n            DO\n               NOTE 'RCE IS FOR PROGRAM ---------------------------'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PROGRAM IS IN USE BY SOME TASK'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PROGRAM IS BEING DEBUGGED'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PROGRAM IS CURRENTLY OVERLAID'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PROGRAM MAY BE OVERLAID'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n               IF &LASTCC = 0 THEN +\n                  NOTE 'PROGRAM TO BE PURGED - NEW COPY'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 UNSIGNED LENGTH(4) CLIST(STORAGE(L))\n               NOTE 'PROGRAM LENGTH IS &L'\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(A))\n               NOTE 'PROGRAM ADDRESS IS X''&A'' '\n               EVALUATE RCEPTR+10% CHARACTER LENGTH(8) +\n                  CLIST(STORAGE(N))\n               NOTE 'PROGRAM NAME IS ''&N'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(A2))\n               NOTE 'THE PDE ADDRESS IS X''&A2'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THE PDT ADDRESS IS X''&S'' '\n               EQUATE $PGM$&N &A.. LENGTH(&L) +\n                  AREA(PROGRAM)\n               EQUATE $PDE$&N &A2.. LENGTH(196) +\n                  STRUCTURE(#PDEDS)\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '03' THEN +\n            DO\n               NOTE 'RCE IS FOR FILE CONTROL ----------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SECOND VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '04' THEN +\n            DO\n               NOTE 'RCE IS FOR SCRATCH ---------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(A))\n               NOTE 'SCRATCH INDEX AREA ADDRESS IS X''&A'' '\n               EVALUATE RCEPTR+C CHARACTER LENGTH(8) +\n                  CLIST(STORAGE(N))\n               NOTE 'SCRATCH INDEX AREA ID IS ''&N'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               EQUATE $SIA$&N &A.. LENGTH(48) STRUCTURE(#SIADS)\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '05' THEN +\n            DO\n               NOTE 'RCE IS FOR INTERNAL RUN UNIT -----------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'RUN UNIT AREA ADDRESS IS X''&S'' '\n               EQUATE $RUA &S.. LENGTH(24) STRUCTURE(#RUADS)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SUBSCHEMA CONTROL ADDRESS IS X''&S'' '\n               EQUATE $SSC &S.. LENGTH(200) STRUCTURE(#SSCDS)\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '06' THEN +\n            DO\n               NOTE 'RCE IS FOR QUEUE -----------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'QUEUE CONTROL ELEMENT ADDRESS IS X''&S'' '\n               EQUATE $QCE$&S &S.. LENGTH(48) STRUCTURE(#QCEDS)\n               EVALUATE $QCE$&S+0 CHARACTER LENGTH(16) +\n                  CLIST(STORAGE(T))\n               NOTE 'THE QUEUE NAME IS ''&T'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(1) +\n                  CLIST(STORAGE(S))\n               NOTE 'QUEUE ELEMENT PREVIOUS FUNCTION IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '07' THEN +\n            DO\n               NOTE 'RCE IS FOR DUMP ------------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(A))\n               NOTE 'ADDRESS TO DUMP IF TASK ABENDS IS X''&A'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(L))\n               NOTE 'LENGTH OF STORAGE TO DUMP IS X''&L'' '\n               EQUATE $DUMP$&A &A.. LENGTH(X'&L') AREA(DUMP)\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '08' THEN +\n            DO\n               NOTE 'RCE IS FOR MESSAGE QUEUE ---------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'MESSAGE QUEUE LENGTH IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'DATABASE KEY IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '09' THEN +\n            DO\n               NOTE 'RCE IS FOR SIGNON ----------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(A))\n               NOTE 'SIGNON ELEMENT ADDRESS IS X''&A'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(N))\n               NOTE 'LOGICAL TERMINAL ELEMENT ADDRESS IS X''&N'' '\n               EQUATE $SON$&N &A.. LENGTH(108) STRUCTURE(#SONDS)\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'OTP USER CONTROL BLOCK ADDRESS IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0A' THEN +\n            DO\n               NOTE 'RCE IS FOR ENQUEUE ---------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'ENQUEUE CONTROL ELEMENT ADDRESS IS X''&S'' '\n               EQUATE $ECE$&S &S.. LENGTH(21) STRUCTURE(#ECEDS)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0B' THEN +\n            DO\n               NOTE 'RCE IS FOR SINGLE-THREAD RESOURCE ------------'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'01')) LENGTH(1)\n               IF &LASTCC = 0 THEN +\n                  NOTE 'RESOURCE IS LOADER'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'02')) LENGTH(1)\n               IF &LASTCC = 0 THEN +\n                  NOTE 'RESOURCE IS LOG FILE'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'03')) LENGTH(1)\n               IF &LASTCC = 0 THEN +\n                  NOTE 'RESOURCE IS TRANSACTION LOG FILE'\n               COMPARE ADDRESS(RCEPTR+1) LENGTH(1) HEXADECIMAL +\n                  WITH(VALUE(X'04')) LENGTH(1)\n               IF &LASTCC = 0 THEN +\n                  NOTE 'RESOURCE IS SCRATCH AREA'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 UNSIGNED LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'NUMBER OF TASKS WAITING FOR RESOURCE IS &S'\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'ADDRESS OF OWNER DCE IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'RESOURCE ECB ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0C' THEN +\n            DO\n               NOTE 'RCE IS FOR ECB ID ----------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'GENERAL ECB IS X''&S'' '\n               EVALUATE RCEPTR+10 CHARACTER LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SYMBOLIC ECB ID IS ''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0D' THEN +\n            DO\n               NOTE 'RCE IS FOR MSG DICT QUEUE --------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'MSG DICT QUEUE ELEMENT ADDRESS IS X''&S'' '\n               EQUATE $MDQ$&S &S.. LENGTH(156) STRUCTURE(#MDQDS)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'RLE ANCHOR ADDRESS FOR RCE IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0E' THEN +\n            DO\n               NOTE 'RCE IS FOR IDMS RUN UNIT ---------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'VARIABLE SUBSCHEMA ADDRESS IS X''&S'' '\n               EQUATE $VIB &S.. LENGTH(556) STRUCTURE(#VIBDS)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '0F' THEN +\n            DO\n               NOTE 'RCE IS FOR INTERVAL CONTROL ------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'INTERVAL CONTROL ELEMENT ADDRESS IS X''&S'' '\n               EQUATE $ILE &S.. LENGTH(24) STRUCTURE(#ILEDS)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '10' THEN +\n            DO\n               NOTE 'RCE IS FOR BLL LIST --------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'PROGRAM RCE OF BLL OWNER IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'BLL LIST ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(2) +\n                  CLIST(STORAGE(S))\n               NOTE 'DISPLACEMENT OF FIRST BLL FOR RSRC IS X''&S'' '\n               EVALUATE RCEPTR+12 HEXADECIMAL LENGTH(2) +\n                  CLIST(STORAGE(S))\n               NOTE 'DISPLACEMENT OF SECOND BLL FOR RSRC IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'TASK GLOBAL TABLE ADDRESS IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '11' THEN +\n            DO\n               NOTE 'RCE IS FOR BLAST MESSAGE BUFFER --------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 UNSIGNED LENGTH(4) +\n                  CLIST(STORAGE(L))\n               NOTE 'MESSAGE BUFFER LENGTH IS &L'\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'ADDRESS TO DUMP IF TASK ABENDS IS X''&S'' '\n               EQUATE $BLAST &S.. LENGTH(&L) AREA(BLAST)\n               EVALUATE RCEPTR+10 UNSIGNED LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'NUMBER OF TERMINALS QUEUED TO MESSAGE IS &S'\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '12' THEN +\n            DO\n               NOTE 'RCE IS FOR DDS LONG TERM RESOURCES -----------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C CHARACTER LENGTH(8) +\n                  CLIST(STORAGE(S))\n               NOTE 'DDS TARGET FOR LONG TERM RESOURCES IS ''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '13' THEN +\n            DO\n               NOTE 'RCE IS FOR RELOCATABLE STORAGE ---------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'ADDRESS OF TYPE 1 RCE FOR STORAGE IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'RELOCATABLE STORAGE ADDRESS IS X''&S'' '\n               EQUATE $RSTG$&S &S.. AREA(RSTG)\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '14' THEN +\n            DO\n               NOTE 'RCE IS FOR OTP IOP ---------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'OTP IOP ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '15' THEN +\n            DO\n               NOTE 'RCE IS FOR OTP PAGE BUFFER -------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'OTP PAGE BUFFER ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '16' THEN +\n            DO\n               NOTE 'RCE IS FOR OTP BUFFER WAIT -------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'OTP BUFFER WAIT ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = '17' THEN +\n            DO\n               NOTE 'RCE IS FOR OTP TRESPASSER FEB ----------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'OTP TRESSPASSER FEB ADDRESS IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         IF &RCETYPE = 'FF' THEN +\n            DO\n               NOTE 'RCE IS UNINITIALIZED -------------------------'\n               EVALUATE RCEPTR+2 UNSIGNED LENGTH(2) CLIST(STORAGE(S))\n               NOTE 'NUMBER OF RLE''S OWNING THIS RCE IS &S'\n               EVALUATE RCEPTR+4 UNSIGNED LENGTH(4) CLIST(STORAGE(S))\n               NOTE 'THIS RCE WAS CREATED BY TASK ID &S'\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SECOND VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\n               GOTO GETOUT\n            END\n         NOTE 'AN UNKNOWN RCE TYPE HAS BEEN ENCOUNTERED ***********'\n               EVALUATE RCEPTR+0 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST FIXED WORD IS X''&S'' '\n               EVALUATE RCEPTR+4 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SECOND FIXED WORD IS X''&S'' '\n               EVALUATE RCEPTR+8 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FIRST VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+C HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'SECOND VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+10 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'THIRD VARIABLE WORD IS X''&S'' '\n               EVALUATE RCEPTR+14 HEXADECIMAL LENGTH(4) +\n                  CLIST(STORAGE(S))\n               NOTE 'FOURTH VARIABLE WORD IS X''&S'' '\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   SCRW\n/* THIS CLIST GIVES A PARTIAL DISPLAY OF THE CONTENTS OF THE SCRATCH */\n/* WORK BUFFERS.  ONLY AS MUCH INFORMATION WILL BE DISPLAYED FOR     */\n/* EACH BUFFER PAGE AS WILL FIT ON ONE LINE OF THE TERMINAL DISPLAY. */\n/* THE WIDHTH OF THE TERMINAL DISPLAY CAN BE SPECIFIED BY THE \"COLS\" */\n/* PARAMETER.  AN EXAMPLE CALL MIGHT BE \"SCRW COLS(80)\".  THE \"INIT\" */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.  THIS CLIST   */\n/* INVOKES THE FOLLOWING CLIST:  SCRWBUFF.                           */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG COLS(132)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM #CSADS\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''#CSADS'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         EQUATE $SCRW #CSADS+42C% LENGTH(104) STRUCTURE(#SCRWDS)\n         EQUATE BUFSTRT $SCRW+4% LENGTH(4) POINTER\n         NOTE 'CONTENTS OF SCRATCH BUFFER PAGES'\n         NOTE '======================================================='\n         NOTE 'DB PAGE#| TEXT (EXCLUDING PAGE HEADER)'\n         NOTE '--------|----------------------------------------------'\n         RUNCHAIN ADDRESS(BUFSTRT) CHAIN(100) +\n            EXEC((SCRWBUFF &PRINT &TERMINAL &DEBUG COLS(&COLS))) +\n            LINK(X'00') NAME($SCRWBUFF) NULL(X'00000000') +\n            NOVERIFY\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   SCRWBUFF\n/* THIS CLIST DISPLAYS THE CONTENTS OF ONE PAGE IN THE SCRATCH WORK  */\n/* BUFFERS.  THIS CLIST IS NORMALLY INVOKED ONLY BY THE SCRW CLIST.  */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG COLS()\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         SET &LNGTH = &COLS - 5\n         EQUATE BUFFPTR X\n         EVALUATE BUFFPTR+18 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(P))\n         EVALUATE BUFFPTR+2C CHARACTER LENGTH(&LNGTH) +\n            CLIST(STORAGE(T) UNQUOTE)\n         NOTE '&P|&T'\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   SIA\n/* THIS CLIST DISPLAYS THE CONTENTS OF A GIVEN SCRATCH INDEX AREA.   */\n/* YOU MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL NAME FOR THE        */\n/* PARTICULAR SCRATCH INDEX AREA THAT YOU ARE INTERESTED IN.  A      */\n/* SAMPLE CALL MIGHT BE \"SIA INDEX(02)\".  THE \"INIT\" CLIST MUST BE   */\n/* EXECUTED BEFORE EXECUTING THIS CLIST.                             */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME($SIA$)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM &NAME&INDEX\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''&NAME&INDEX'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         NOTE 'SCRATCH INDEX AREA DISPLAY FOR ID ''&INDEX'' '\n         NOTE '======================================================'\n         NOTE 'PAGE LIST AREA'\n         NOTE '--------------------------'\n         NOTE 'DB PAGE# | SPACE AVAILABLE'\n         NOTE '---------|----------------'\n         EQUATE PLAPTR &NAME&INDEX+20% LENGTH(4) POINTER\n         EVALSYM PLAPTR CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &A = &A + &P\nLOOP1:   COMPARE ADDRESS(PLAPTR+0) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4)\n         IF &LASTCC = 0 THEN GOTO GETSIE\n         EVALUATE PLAPTR+0 HEXADECIMAL LENGTH(4) CLIST(STORAGE(DBP))\n         EVALUATE PLAPTR+4 UNSIGNED LENGTH(4) +\n            CLIST(STORAGE(SA))\n         NOTE '&DBP | &SA'\n         SET &A = &A + 8\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE PLAPTR &AX.. LENGTH(4) POINTER\n         GOTO LOOP1\nGETSIE:  NOTE '======================================================'\n         NOTE 'SCRATCH INDEX ELEMENTS'\n         NOTE '------------------------------------------------------'\n         NOTE 'REC ID   | DBKEY    | SPACE USED (SIE''S FOR THIS REC)'\n         NOTE '---------|----------|---------------------------------'\n         EQUATE SIESTRT &NAME&INDEX+10% LENGTH(4) POINTER\n         EVALSYM SIESTRT CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &A = &A + &P\n         EQUATE SIEEND &NAME&INDEX+18% LENGTH(4) POINTER\n         EVALSYM SIEEND CLIST(ADDRESS(A2) POSITION(P2) DECIMAL)\n         SET &A2 = &A2 + &P2\nLOOP2:   IF &A >= &A2 THEN GOTO GETOUT\n         EVALUATE SIESTRT+0 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(RECID))\n         EVALUATE SIESTRT+4 HEXADECIMAL LENGTH(4) +\n            CLIST(STORAGE(DBKEY))\n         EVALUATE SIESTRT+8 UNSIGNED LENGTH(2) +\n            CLIST(STORAGE(USED))\n         EVALUATE SIESTRT+A UNSIGNED LENGTH(1) +\n            CLIST(STORAGE(SIES))\n         NOTE '&RECID | &DBKEY | &USED (&SIES)'\n         SET &A = &A + 12\n         INTEGER &A CLIST(STORAGE(AX))\n         EQUATE SIESTRT &AX.. LENGTH(4) POINTER\n         GOTO LOOP2\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   TASKS\n/* THIS CLIST DISPLAYS A LIST OF ALL TASKS THAT WERE EXECUTING UNDER */\n/* CV AT THE TIME OF THE DUMP.  THE \"INIT\" CLIST MUST BE EXECUTED    */\n/* BEFORE EXECUTING THIS CLIST.  THIS CLIST INVOKES THE FOLLOWING    */\n/* CLIST:  TCETASK.                                                  */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n/* RUN THE DCE CHAIN GETTING #DCEDS, #TCEDS, #LTEDS, #PTEDS DSECTS */\n         EQUATE DCESTRT #CSADS+2A0 LENGTH(4) POINTER\n         EVALSYM DCESTRT CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &DCESTRT = &A + &P\n         RUNCHAIN ADDRESS(DCESTRT%) +\n            LENGTH(X'40') STRUCTURE(#DCEDS) +\n            EXEC((TCETASK &PRINT &TERMINAL &DEBUG)) +\n            NULL(&DCESTRT) NAME(#DCEX) LINK(X'00') +\n            CHAIN(75) DROP DISPLAY(NOREQUEST) NOTERMINAL\n/* DELETE TEMPORARY SYMBOLS */\n         DROPSYM * NOPURGE\nDONE:    NOTE ' '\n         EXIT CODE(&MAXCC)\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   TCE\n/* THIS CLIST ESTABLISHES ADDRESSABILITY TO THE TCE CONTROL BLOCK    */\n/* AND ITS ASSOCIATED LTE AND PTE CONTROL BLOCKS (IF ANY).  THIS     */\n/* CLIST IS NORMALLY INVOKED ONLY BY THE \"INIT\" CLIST.               */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EQUATE DCEPTR X LENGTH(4) AREA SCALAR\n         EVALSYM < @RHDCOS00 CLIST(SYMBOL(S))\n         IF &SUBSTR(1:4,&S) \u00ac= &STR(#DCE) THEN +\n            DO WHILE &SUBSTR(1:4,&S) \u00ac= &STR(#DCE)\n               EVALSYM < &S CLIST(SYMBOL(S))\n               IF &LASTCC > 0 THEN GOTO GETOUT\n            END\n         SET &SUFFIX = &SUBSTR(7:8,&S)\n         COMPARE ADDRESS(DCEPTR+8%) LENGTH(4) +\n            WITH(VALUE(C'TCE*')) LENGTH(4)\n         IF &LASTCC = 0 THEN +\n            DO\n               EQUATE #TCEDS&SUFFIX DCEPTR+8% STRUCTURE(#TCEDS) +\n                  LENGTH(X'E10') SCALAR NODROP +\n                  REMARK('TASK CONTROL ELEMENT (TCE)')\n               COMPARE ADDRESS(#TCEDS&SUFFIX+4C) LENGTH(4) +\n                  WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'0FFFFFFF')\n               IF &LASTCC \u00ac= 0 THEN +\n                  DO\n                     EQUATE #LTEDS&SUFFIX #TCEDS&SUFFIX+4C% +\n                        STRUCTURE(#LTEDS) LENGTH(X'100') +\n                        REMARK('LOGICAL TERMINAL ELEMENT (LTE)') +\n                        SCALAR NODROP\n                     EQUATE #PTEDS&SUFFIX #LTEDS&SUFFIX+8% +\n                        STRUCTURE(#PTEDS) LENGTH(X'110') +\n                        REMARK('PHYSICAL TERMINAL ELEMENT (PTE)') +\n                        SCALAR NODROP\n                  END\n            END\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   TCE#RCE\n/* THIS CLIST WALKS ALL OF THE RCE CHAINS OFF FROM A GIVEN TCE.  YOU */\n/* MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL NAME OF THE PARTICULAR  */\n/* TCE CONTROL BLOCK THAT YOU ARE INTERESTED IN.  A SAMPLE CALL      */\n/* MIGHT BE \"TCE#RCE INDEX(13)\".  THE \"INIT\" CLIST MUST BE EXECUTED  */\n/* BEFORE EXECUTING THIS CLIST.  THIS CLIST INVOKES THE FOLLOWING    */\n/* CLIST:  RCE.                                                      */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#TCEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM &NAME&INDEX\n         IF &LASTCC > 0 THEN +\n            DO\n               NOTE 'SYMBOL ''&NAME&INDEX'' IS NOT DEFINED'\n               GOTO GETOUT\n            END\n         DROPSYM *\n         NOTE 'RCE''S WILL BE DISPLAYED FOR &NAME&INDEX'\n         NOTE '====== TASK RLE/RCE CHAIN ============================'\n         EQUATE RLESTART &NAME&INDEX+8 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\n         NOTE '====== PROGRAM RLE/RCE CHAIN ========================='\n         EQUATE RLESTART &NAME&INDEX+10 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\n         NOTE '====== SCRATCH RLE/RCE CHAIN ========================='\n         EQUATE RLESTART &NAME&INDEX+18 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\n         NOTE '====== QUEUE RLE/RCE CHAIN ==========================='\n         EQUATE RLESTART &NAME&INDEX+20 LENGTH(4) POINTER\n         EVALSYM RLESTART CLIST(ADDRESS(A) POSITION(P) DECIMAL)\n         SET &RLESTART = &A + &P\n         RUNCHAIN ADDRESS(RLESTART%) +\n            LENGTH(X'C') STRUCTURE(#RLEDS) +\n            EXEC((RLE &PRINT &TERMINAL &DEBUG)) +\n            NULL(&RLESTART) NAME(#RLEDS) LINK(X'00') +\n            CHAIN(100) DROP NOVERIFY\nGETOUT:  NOTE ' '\n         END\n/*-------------------------------------------------------------------*/\n./       ADD   TCESTAT\n/* THIS CLIST DISPLAYS THE CONTENTS OF THE VARIOUS FLAGS IN THE TCE. */\n/* TO USE THIS CLIST, YOU MUST SUPPLY THE SUFFIX OF THE IPCS SYMBOL  */\n/* NAME OF THE PARTICULAR TCE CONTROL BLOCK THAT YOU ARE INTERESTED  */\n/* IN.  A SAMPLE CALL MIGHT BE \"TCESTAT INDEX(04)\".  THE \"INIT\"      */\n/* CLIST MUST BE EXECUTED BEFORE EXECUTING THIS CLIST.               */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG INDEX() NAME(#TCEDS)\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EVALSYM EQ &NAME&INDEX\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE FOLLOWING NOTES ARE FOR CONTROL BLOCK &NAME&INDEX'\n         ELSE +\n            DO\n               NOTE 'THE SYMBOL''&NAME&INDEX'' WAS NOT FOUND'\n               GOTO GETOUT\n            END\n/* GET THE TASK NUMBER */\n         EVALUATE &NAME&INDEX+4 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'THE TASK NUMBER IS &S'\n/* GET THE CURRENT PROGRAM */\n         EQUATE PDETEMP &NAME&INDEX+2C LENGTH(4) POINTER\n         COMPARE ADDRESS(PDETEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE TCETEMP &NAME&INDEX+2C% LENGTH(4) POINTER\n               EQUATE PDETEMP TCETEMP+10% LENGTH(8) CHARACTER SCALAR\n               EVALUATE PDETEMP CLIST(STORAGE(S))\n               NOTE 'THE CURRENT PROGRAM IS &S'\n               EVALUATE PDETEMP+8 LENGTH(2) UNSIGNED SCALAR +\n                  CLIST(STORAGE(S))\n               NOTE 'THE CURRENT PROGRAM VERSION IS &S'\n            END\n/* GET THE EXTERNAL ABEND CODE */\n         EVALUATE &NAME&INDEX+40 LENGTH(4) CHARACTER CLIST(STORAGE(S))\n         NOTE 'THE EXTERNAL ABEND CODE IS &S'\n/* GET THE LAST CALL TRACE WORD */\n         EVALUATE &NAME&INDEX+48 LENGTH(4) BIT CLIST(STORAGE(S))\n         NOTE 'THE LAST CALL TRACE WORD IS X''&S'''\n/* GET THE USER INFORMATION */\n         EQUATE SONTEMP &NAME&INDEX+58 LENGTH(4) POINTER\n         COMPARE ADDRESS(SONTEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE TCETEMP &NAME&INDEX+58% LENGTH(4) POINTER\n               EQUATE SONTEMP TCETEMP+C% LENGTH(8) CHARACTER SCALAR\n               EVALUATE SONTEMP+1 LENGTH(32) +\n                  CHARACTER SCALAR CLIST(STORAGE(S))\n               NOTE 'THE USER FOR THIS TASK IS &S'\n               EVALUATE SONTEMP+21 LENGTH(1) +\n                  UNSIGNED SCALAR CLIST(STORAGE(S))\n               NOTE 'THE USER''S PRIORITY IS &S'\n            END\n/* GET THE ACTIVE TASK CODE */\n         COMPARE ADDRESS(&NAME&INDEX+70) LENGTH(4) POINTER +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EVALUATE &NAME&INDEX+70% LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(S))\n               NOTE 'THE TASK CODE WAS &S'\n            END\n/* CHECK THE AMODE OF THE CURRENT PROGRAM */\n         COMPARE ADDRESS(&NAME&INDEX+83) LENGTH(1) BIT +\n            WITH(VALUE(X'00')) LENGTH(1)\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE AMODE OF THE CURRENT PROGRAM IS 24'\n         ELSE +\n            NOTE 'THE AMODE OF THE CURRENT PROGRAM IS 31'\n/* CHECK FOR USER MODE OR SYSTEM MODE */\n         EQUATE TCETEMP &NAME&INDEX+84 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS CURRENTLY IN USER MODE'\n         ELSE +\n            NOTE 'THE TASK IS CURRENTLY IN SYSTEM MODE'\n/* CHECK FOR ABENDING TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS CURRENTLY ABENDING'\n         ELSE +\n            NOTE 'THE TASK IS NOT CURRENTLY ABENDING'\n/* CHECK FOR INACTIVE TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK EXCEEDED ITS INACTIVE INTERVAL'\n/* CHECK FOR RUNAWAY TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK EXCEEDED ITS RUNAWAY INTERVAL'\n/* CHECK FOR ERUS/ONLINE TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS AN ERUS TASK'\n         ELSE +\n            NOTE 'THE TASK IS AN ONLINE TASK'\n/* CHECK FOR DRIVER TASK */\n         EQUATE TCETEMP &NAME&INDEX+85 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS A DRIVER TASK'\n/* CHECK FOR FACTOTUM TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS A FACTOTUM TASK'\n/* CHECK FOR DRIVER TASK */\n         EQUATE TCETEMP &NAME&INDEX+86 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS A PRINTER TASK'\n/* CHECK FOR DRIVER TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK HAS DEADLOCKED'\n/* CHECK FOR UCF PRINT CONTROLLER TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS THE UCF PRINT CONTROLLER TASK'\n/* CHECK FOR ROLLBACK IN PROGRESS */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK IS CURRENTLY PERFORMING A ROLLBACK'\n/* CHECK FOR TASK STORAGE LOCATION */\n         EQUATE TCETEMP &NAME&INDEX+87 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK STORAGE LOCATION IS ANY'\n         ELSE +\n            NOTE 'THE TASK STORAGE LOCATION IS BELOW'\n/* CHECK FOR TIMEOUT ABEND PENDING */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'A TIMEOUT ABEND IS PENDING'\n/* CHECK FOR QUEUE ATTACHED TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS A QUEUE-ATTACHED TASK'\n/* CHECK FOR RLE THRESHOLD EXCEEDED */\n         EQUATE TCETEMP &NAME&INDEX+88 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK BROKE THE RLE THRESHOLD'\n/* CHECK FOR RCE THRESHOLD EXCEEDED */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'40')) LENGTH(1) MASK(X'40')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK BROKE THE RCE THRESHOLD'\n/* CHECK FOR DPE THRESHOLD EXCEEDED */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK BROKE THE DPE THRESHOLD'\n/* CHECK FOR ILE THRESHOLD EXCEEDED */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'10')) LENGTH(1) MASK(X'10')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THE TASK BROKE THE ILE THRESHOLD'\n/* CHECK FOR HELOT TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS A HELOT TASK'\n/* CHECK FOR SERVICE DRIVER TASK */\n         EQUATE TCETEMP &NAME&INDEX+89 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'80')) LENGTH(1) MASK(X'80')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS A SERVICE DRIVER TASK'\n/* CHECK FOR DB I/O DRIVER TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'08')) LENGTH(1) MASK(X'08')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS A DB I/O DRIVER TASK'\n/* CHECK FOR JOURNAL DRIVER TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'04')) LENGTH(1) MASK(X'04')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS A JOURNAL DRIVER TASK'\n/* CHECK FOR DB I/O TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS DB I/O TASK'\n/* CHECK FOR DB I/O READ DRIVER TASK */\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            NOTE 'THIS IS DB I/O READ DRIVER TASK'\n/* GET THE TOTAL LOCKS COUNT */\n         EVALUATE &NAME&INDEX+C4 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'TOTAL LOCKS AS OF LAST DBMS CALL IS &S'\n/* GET THE SELECT LOCKS COUNT */\n         EVALUATE &NAME&INDEX+C8 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'SELECT LOCKS AS OF LAST DBMS CALL IS &S'\n/* GET THE UPDATE LOCKS COUNT */\n         EVALUATE &NAME&INDEX+CC LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'UPDATE LOCKS AS OF LAST DBMS CALL IS &S'\n/* GET THE CURRENT STORAGE OWNED BY TASK */\n         EVALUATE &NAME&INDEX+D0 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'CURRENT STORAGE OWNED BY TASK IS &S'\n/* GET NUMBER OF RCES IN USE */\n         EVALUATE &NAME&INDEX+128 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'NUMBER OF RCE''S IN USE IS &S'\n/* GET NUMBER OF RLES IN USE */\n         EVALUATE &NAME&INDEX+12C LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'NUMBER OF RLE''S IN USE IS &S'\n/* GET NUMBER OF DPES IN USE */\n         EVALUATE &NAME&INDEX+130 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'NUMBER OF DPE''S IN USE IS &S'\n/* GET NUMBER OF ILES IN USE */\n         EVALUATE &NAME&INDEX+148 LENGTH(4) UNSIGNED CLIST(STORAGE(S))\n         NOTE 'NUMBER OF ILE''S IN USE IS &S'\nGETOUT:  DROPSYM (TCETEMP PDETEMP SONTEMP)\n/*-------------------------------------------------------------------*/\n./       ADD   TCETASK\n/* THIS CLIST IS INVOKED BY THE \"TASKS\" CLIST TO DISPLAY A LIST OF   */\n/* TASKS CURRENTLY EXECUTING UNDER CV AT THE TIME OF THE DUMP.       */\n/* INFORMATION IS GATHERED FROM THE DCE, TCE, LTE, AND PTE CONTROL   */\n/* BLOCKS AND THEN IS  DISPLAYED TO THE TERMINAL.                    */\n/*                                                                   */\n         PROC 0 PRINT TERMINAL DEBUG\n         IF &DEBUG = DEBUG THEN CONTROL LIST\n         EQUATE DCEPTR X LENGTH(4) AREA SCALAR\n         EVALSYM < @RHDCOS00 CLIST(SYMBOL(S))\n         IF &SUBSTR(1:5,&S) \u00ac= &STR(#DCEX) THEN +\n            DO WHILE &SUBSTR(1:5,&S) \u00ac= &STR(#DCEX)\n               EVALSYM < &S CLIST(SYMBOL(S))\n               IF &LASTCC > 0 THEN GOTO GETOUT\n            END\n         SET &SUFFIX = &SUBSTR(6:7,&S)\n         COMPARE ADDRESS(DCEPTR+8%) LENGTH(4) +\n            WITH(VALUE(C'TCE*')) LENGTH(4)\n         IF &LASTCC = 0 THEN +\n            DO\n               EQUATE #TCEX&SUFFIX DCEPTR+8% STRUCTURE(#TCEDS) +\n                  LENGTH(X'E10') SCALAR DROP\n/* --- DCE FIELDS -------------------------------------------------- */\n/* GET THE DISPATCHING PRIORITY */\n         EVALUATE #DCEX&SUFFIX+24 LENGTH(1) UNSIGNED +\n            CLIST(STORAGE(S))\n         SET &T = &STR(&S    )\n         SET &PRIOR = &SUBSTR(1:4,&T)\n         EQUATE DCETEMP #DCEX&SUFFIX+25 LENGTH(1) BIT\n/* CHECK FOR TASK CURRENTLY EXECUTING */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'20')) LENGTH(1) MASK(X'20')\n         IF &LASTCC = 0 THEN +\n            SET &ACTV = &STR(INACTIVE)\n         ELSE +\n            SET &ACTV = &STR(ACTIVE  )\n/* CHECK FOR NEW TASK */\n         COMPARE ADDRESS(DCETEMP) LENGTH(1) +\n            WITH(VALUE(X'02')) LENGTH(1) MASK(X'02')\n         IF &LASTCC = 0 THEN +\n            SET &ACTV = &STR(NEW TASK)\n/* --- TCE FIELDS -------------------------------------------------- */\n         EVALUATE #TCEX&SUFFIX+4 LENGTH(4) UNSIGNED +\n            CLIST(STORAGE(S))\n         SET &T = &STR(&S        )\n         SET &TASKNBR = &SUBSTR(1:8,&T)\n/* GET THE CURRENT PROGRAM */\n         EQUATE PDETEMP #TCEX&SUFFIX+2C LENGTH(4) POINTER\n         COMPARE ADDRESS(PDETEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE TCETEMP #TCEX&SUFFIX+2C% LENGTH(4) POINTER\n               EQUATE PDETEMP TCETEMP+10% LENGTH(8) CHARACTER SCALAR\n               EVALUATE PDETEMP CLIST(STORAGE(PGMNAME))\n            END\n         ELSE SET &PGMNAME = &STR(        )\n/* GET THE EXTERNAL ABEND CODE */\n         EVALUATE #TCEX&SUFFIX+40 LENGTH(4) CHARACTER +\n            CLIST(STORAGE(ABRT))\n/* GET THE USER INFORMATION */\n         EQUATE SONTEMP #TCEX&SUFFIX+58 LENGTH(4) POINTER\n         COMPARE ADDRESS(SONTEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE TCETEMP #TCEX&SUFFIX+58% LENGTH(4) POINTER\n               EQUATE SONTEMP TCETEMP+C% LENGTH(8) CHARACTER SCALAR\n               EVALUATE SONTEMP+1 LENGTH(32) +\n                  CHARACTER SCALAR CLIST(STORAGE(USERID))\n            END\n         ELSE SET &USERID = &STR(                                )\n/* GET THE ACTIVE TASK CODE */\n         COMPARE ADDRESS(#TCEX&SUFFIX+70) LENGTH(4) POINTER +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EVALUATE #TCEX&SUFFIX+70% LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(TASKCDE))\n            END\n         ELSE SET &TASKCDE = &STR(        )\n/* CHECK FOR FACTOTUM TASK */\n         EQUATE TCETEMP #TCEX&SUFFIX+85 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            SET &TASKCDE = &STR(FACTOTUM)\n/* CHECK FOR HELOT TASK */\n         EQUATE TCETEMP #TCEX&SUFFIX+88 LENGTH(1) BIT\n         COMPARE ADDRESS(TCETEMP) LENGTH(1) +\n            WITH(VALUE(X'01')) LENGTH(1) MASK(X'01')\n         IF &LASTCC = 0 THEN +\n            SET &TASKCDE = &STR(HELOT   )\n/* --- LTE FIELDS -------------------------------------------------- */\n/* GET ADDRESSABILITY TO THE LTE */\n         COMPARE ADDRESS(#TCEX&SUFFIX+4C) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'0FFFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE #LTEX&SUFFIX #TCEX&SUFFIX+4C% +\n                  STRUCTURE(#LTEDS) LENGTH(X'100') +\n                  SCALAR DROP\n/* GET THE LTERM NAME */\n         EVALUATE #LTEX&SUFFIX+0 LENGTH(8) CHARACTER +\n            CLIST(STORAGE(LTERM))\n/* GET THE USER INFORMATION */\n         EQUATE SONTEMP #LTEX&SUFFIX+20 LENGTH(4) POINTER\n         COMPARE ADDRESS(SONTEMP) LENGTH(4) +\n            WITH(VALUE(X'00000000')) LENGTH(4) MASK(X'00FFFFFF')\n         IF &LASTCC \u00ac= 0 THEN +\n            DO\n               EQUATE LTETEMP #LTEX&SUFFIX+20% LENGTH(4) POINTER\n               EQUATE SONTEMP LTETEMP+C% LENGTH(8) CHARACTER SCALAR\n               EVALUATE SONTEMP+1 LENGTH(32) +\n                  CHARACTER SCALAR CLIST(STORAGE(USERID))\n            END\n/* GET DEFAULT DBNAME */\n         EVALUATE #LTEX&SUFFIX+B4 LENGTH(8) CHARACTER +\n            CLIST(STORAGE(DBNAME))\n/* GET DEFAULT DICTNAME */\n         EVALUATE #LTEX&SUFFIX+CC LENGTH(8) CHARACTER +\n            CLIST(STORAGE(DICTNME))\n/* --- PTE FIELDS -------------------------------------------------- */\n/* GET ADDRESSABILITY TO THE PTE */\n         EQUATE #PTEX&SUFFIX #LTEX&SUFFIX+8% +\n            STRUCTURE(#PTEDS) LENGTH(X'110') +\n            SCALAR DROP\n/* GET THE PTERM NAME */\n         EVALUATE #PTEX&SUFFIX+0 LENGTH(8) CHARACTER +\n            CLIST(STORAGE(PTERM))\n         EQUATE PTETEMP #PTEX&SUFFIX+8% LENGTH(4) POINTER\n/* GET THE LINE TYPE */\n         EVALUATE PTETEMP+40 LENGTH(1) CHARACTER CLIST(STORAGE(R))\n/* GET INFORMATION FOR UCF PTERMS */\n         IF &R = &STR(Z) THEN +\n            DO\n            /* GET FRONT END TERMINAL ID */\n               EVALUATE #PTEX&SUFFIX+B8 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(TERMID))\n            /* GET FRONT END SYSTEM ID */\n               EVALUATE #PTEX&SUFFIX+C0 LENGTH(8) CHARACTER +\n                  CLIST(STORAGE(FESID))\n            END\n         ELSE +\n            DO\n               SET &TERMID = &STR(        )\n               SET &FESID = &STR(        )\n            END\n                  END\n               ELSE +\n                  DO\n                     SET &LTERM = &STR(        )\n                     SET &DBNAME = &STR(        )\n                     SET &DICTNME = &STR(        )\n                     SET &PTERM = &STR(        )\n                     SET &TERMID = &STR(        )\n                     SET &FESID = &STR(        )\n                  END\n               SET &T1 = &STR(&SUFFIX &TASKNBR &TASKCDE &PRIOR &ACTV)\n               SET &T2 = &STR(&PGMNAME &ABRT &TERMID &LTERM &DBNAME)\n               SET &T3 = &STR(&DICTNME &USERID)\n               NOTE '&T1 &T2 &T3'\n            END\nGETOUT:  SET &SUFFIX = &STR(00)\n         END\n/*-------------------------------------------------------------------*/\n****** THIS IS THE END OF THIS FILE.  THERE ARE NO MORE MEMBERS. ******\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZNOTE": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "T75NAK1"}, "text": "   NOTE '+-------------------------------------------------+' PAGE\n   NOTE '| SYSTEM TRACE                            #102????|'\n   NOTE '+-------------------------------------------------+'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Z102DM58": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92'_\\x00\\x92'_\\t\\x00\\x00B\\x00B\\x00\\x00\\xe3\\xf7\\xf5\\xd5\\xc1\\xd2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-01T00:00:00", "modifydate": "1992-10-01T09:00:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "T75NAK1"}, "text": "PROC 0\n/* #102DM58 ********************************************************/\n/***                                                             ***/\n/***  THE #102DM58 CLIST DISPLAYS THE DEVICE MEDIA DESCRIPTION   ***/\n/***                                                             ***/\n/***  USED BY: #102IDMS                                          ***/\n/***                                                             ***/\n/***  USES:                                                      ***/\n/***                                                             ***/\n/*******************************************************************/\n/*GLOBAL BC53A CCEA CSAA DM58A FC59A FM61A JD62A PR60A TCEADDR VB50A X*/\nEQ DM58 CCEA+38% AREA REMARK('DMCL TABLES HEADER')                +\n   NODROP LENGTH(160)\nEQ VB50 CCEA+3C% AREA REMARK('VARIABLE IB50 SUBSCHEMA')           +\n   NODROP LENGTH(556)\nIF &DM58A = DM58 THEN DO\n   NOTE '+-------------------------------------------------+' PAGE\n   NOTE '| DEVICE MEDIA DESCRIPTION                        |'\n   NOTE '+-------------------------------------------------+'\n   LIST  DM58\n   STACK DM58\nEND\nDBEQ:CONTROL NOLIST\nEQ BC53 X+4% AREA REMARK('BUFFER CONTROL ELEMENT')                 +\n   NODROP LENGTH(88)\nEQ JD62 X+8% AREA REMARK('JOURNAL CONTROL BLOCK')                  +\n   NODROP  LENGTH(88)\nEQ FC59 X+C% AREA REMARK('FILE CONTROL BLOCK')                     +\n   NODROP LENGTH(88)\nEQ FM61 X+10% AREA REMARK('DMCL FILE AREA MEMBERSHIP')             +\n   NODROP LENGTH(56)\nEQ PR60 X+14% AREA REMARK('DMCL AREA MAPPING ELEMENT')             +\n   NODROP LENGTH(90)\nEVALSYM DM58 CLIST(ADDR(ADM58))\nIF &BC53A = BC53 THEN DO\n   RUNCHAIN ADDR(BC53) LINK(X'04') NAME(BC53)  +\n            NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nIF &FC59A = FC59 THEN DO\n   RUNCHAIN ADDR(FC59) LINK(X'04') NAME(FC59)  +\n            NULL(X'&ADM58') MASK(X'FFFFFFFF')  +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nIF &FM61A = FM61 THEN DO\n   RUNCHAIN ADDR(FM61) LINK(X'14') NAME(FM61)  +\n            NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nIF &JD62A = JD62 THEN DO\n   RUNCHAIN ADDR(JD62) LINK(X'04') NAME(JD62)  +\n            NULL(X'&ADM58')  MASK(X'FFFFFFFF') +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nIF &PR60A = PR60 THEN DO\n   RUNCHAIN ADDR(PR60) LINK(X'04') NAME(PR60)  +\n            NULL(X'&ADM58') MASK(X'FFFFFFFF')  +\n            DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nIF &VB50A = VB50 THEN DO\n   EVALSYM CCEA CLIST(ADDR(ACCE))\n         RUNCHAIN ADDR(VB50) LINK(X'44') NAME(VB50)  +\n                  NULL(X'&ACCE') MASK(X'FFFFFFFF')   +\n                  DISPLAY(NOMACHINE NOREQUEST STORAGE)\nEND\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT178/FILE178.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT178", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}