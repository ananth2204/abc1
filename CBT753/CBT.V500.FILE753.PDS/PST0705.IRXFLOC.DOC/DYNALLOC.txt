 Name:        DYNALLOC

 Purpose:     Provide native REXX with dynamic allocation (SVC 99)

 Environment: REXX subroutine/function for any address under MVS.
              The function is part of the IRXFLOC function package.

 Features:


 Arguments:   A series of "tunit" control blocks. These control blocks
              are best built by the TUNIT function. See the 'Notes'
              below.


 Results:     The direct result of the subroutine/function is a
              logical value indicating whether or not the requested
              function was performed.

              The variable RC is set as per the return code from
              SVC 99

              There are 'keys' that can be set to request SVC 99
              return information (e.g. key 0055). When such a key is
              specified, DYNALLOC will pass the requested information
              back to the caller instead of the 0/1 logical value.


 Notes:
 1. The TUNIT function does not build the S99VERB nor does DYNALLOC make
    any presumption as to what S99VERB is to be used. With that in mind,
    the calling program must specify the S99VERB and the type of
    allocation to be done.  For allocation of a dataset that would be
    the following hex string (spaces are included here for clarity but
    would be omitted from the program)
       call dynalloc '0001 0052 0000 0053 0000'x ||,
              tunit(.......)

 2. The design of the DYNALLOC function to accept any SVC 99 parameters
    makes it very versatile. Unfortunately, understanding how to
    properly code the SVC 99 parameters is not simple. The IBM manual
    "Authorized Assembler Programming" (GC28-1645) chapter 25. must be
    studied in order to exploit this function.

 3. Although it is possible (see note 2), DYNALLOC can perform all
    the functions that SCCALLOC does but Rexx programmers will find
    SCCALLOC much easier to use (and no less efficient) for:
       - allocating to an existing dataset with DISP=SHR
       - de-allocation
       - conditional allocation
       - re-assigning a DDname
       - obtaining a system determined DDname

 Examples:
  1. Allocate ddname SYSPRINT as DUMMY
       call dynalloc '00010052000000240000000100010008'x || 'SYSPRINT'

  2. Allocate ddname PDS to VIO
       call dynalloc '00010052000000530000'x                ||,
                tunit('PDS','DISP=(NEW,KEEP,KEEP),UNIT=VIO' ||,
                ',SPACE=(8880,(6,6,2))'                     ||,
                ',LRECL=80,BLKSIZE=8880,RECFM=FB,DSORG=PO')

