 Name:        DSN4DD

 Purpose:     Return the name of (a concatenation level of) a dataset
              for a specified DDname.

 Environment: REXX subroutine/function for all MVS/ESA environments.
              DSN4DD resides in the IRXFLOC "function package".

 Features:    The value of the DSN is returned as per the invocation
              contruct.

              The REXX variable RC is set to the number of concatenation
              levels for the DD.

 Argument:    The DDname for which the dataset name is required.

              The DDname can be further qualified with a suffix in
              format  +n  where "n" is a number relative to 1 of
              the concatenation within the DDname.


 Results:     DSN4DD operates as a REXX subroutine/function. When used
              as a subroutine, the caller retrieves the value from the
              REXX variable RESULT. When used as a function, REXX makes
              the requested assignment from the context of REXX
              statement which invoked it.

              DSN4DD always sets the REXX variable RC. For a request
              which is matched without error, RC is asigned the number
              of datasets which are concatenated together. If there is
              no concatenation, RC will be assigned the value one.

 Errors/Warnings:
              If the DDNAME is not allocated or the argument is missing,
              RC will be assigned the value of minus one and the result
              will be null.

              If the DDNAME is allocated but the requested concatenation
              level is invalid or beyond the allocated concatenation
              level, the 'result' will be null and RC is assigned the
              number of datasets allocated within the concatenation
              level.

 Examples: 1. say dsn4dd('SYSPROC+1')  ==> TCS0TSO.SYSTEM.FUNCLIB

           2. Identify the members (and the library) which have
              multiple versions in the set of a concatenated DD.
                 dd = 'SYSUT1'
                 dsn.0 = dsn4dd(dd)
                 concat_count = rc
                 do i = 1 to concat_count-1; dsn.i = dsn4dd(dd'+'i); end
                 call sccpdsd dd, '*', 'D.' /* build member list */
                 do i = 1 to d.0-1
                      ii = i + 1
                      if left(d.i,8) == left(d.ii,8) then
                        do
                           parse value spfdir(d.i) with mem concat .
                           ? = mem 'exists in' dsn.concat
                           do while left(d.i,8) == left(d.ii,8)
                                concat = c2d(substr(d.ii,12,1))
                                ? = ? dsn.concat
                                i = ii
                                ii = ii + 1
                           end
                           say ?
                        end
                 end

 Notes:       If the DDname is allocated to a member of a partitioned
              dataset, the member name is included in the result. This
              makes DSN4DD distinct from the TSO LISTF command.
