{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012902000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE825.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE825.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x02'", "DS1TRBAL": "b'\\xda\\xe0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\xa7\\x00\\x05\\x05\\xa7\\x00\\n\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04O\\x00B\\x01\\x10\\t\\x8f\\x01\\x10\\t\\x8f\\x19)\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@'", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-04-08T00:00:00", "modifydate": "2010-04-08T19:29:42", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-479"}, "text": "REGULAR CBT TAPE - VERSION 479    FILE:  825\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT479.FILE825\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,757 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/08/10    19:29:42    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x10\\x08\\x8f\\x01\\x10\\x08\\x8f\\x12\\x18\\x00?\\x00?\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-03-29T00:00:00", "modifydate": "2010-03-29T12:18:15", "lines": 63, "newlines": 63, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  z/OS SSL Handshake program\nFrom:     \"sslhand support\" <sslhand@gmail.com>\n          \"Raymond Ching\" <rching93@gmail.com>\nDate:     Fri, 19 Mar 2010 10:47:59 +0800\nTo:       \"Sam Golob\" <sbgolob@cbttape.org>\n\nI have written a simple z/OS batch program to perform the first\nfew phases of SSL handshake and print the human readable output\ninto the SYSPRINT DDname. My intention is to write a simple\nprogram to diagnose the most common SSL setup issues in z/OS.\n\nBasically, the program is free to execute without any warranty.\n\nThe README file is extracted as following from the xmi PDS.\n\n1. The SSLHAND program in JSSLHAND initiates Secure Socket Layer (SSL)\n    session with the partner SSL server provided in the parameter by\n    sending SSL client hello message.  The server will respond with\n    SSL server hello message containing server certificate and\n    optionally with Certificate request.  Following flow diagram is\n    extracted from\n    http://www.ietf.org/rfc/rfc2246.txt.\n\n    -------------------------------------------------------------------\n       Client                                       Server\n\n       ClientHello                  -------->\n                                                       ServerHello\n                                                      Certificate*\n                                                ServerKeyExchange*\n                                               CertificateRequest*\n                                    <--------      ServerHelloDone\n       ::::::::::\n    ------------------------------------------------------------------\n\n    The SSLHAND program then formats the content supplied in\n    Certificate and CertificateRequest and prints the output to\n    SYSPRINT DD.  The public certificates found in the Certificate\n    command will print to the SYSPRINT DD in Base64-encoded format for\n    easy transportation.  Finally, the SSLHAND program returns and let\n    the TCPIP stack in z/OS to close the TCP/IP socket.\n\n2. Program SSLHAND is developed and verified in z/OS v1.6 environment.\n    Standard z/OS TCPIP API socket call, DFHSMS macros (OPEN, CLOSE,\n    XLATE) are used.  Although the program uses AMODE 24 and RMODE 24,\n    ESA/390 machine instructions are used.  This program does not\n    require any external SSL library e.g. IBM z/OS System SSL\n    (GSKSSL).  Only IPv4 is supported.\n\n 3. To execute the SSLHAND program, you can refer to the JSSLHAND\n    member, amend the JOB and SYSTCPD DD card to suit your executing\n    environment.  For SYSTCPD setting, you can refer to section\n    'Selecting a Stack When Running Multiple Instances of TCP/IP' in\n    z/OS IBM Communications Server: IP Configuration Guide.  The SSL\n    server IP address and TCP port number are supplied as parameter to\n    SSLHAND program in EXEC DD card in the following format:\n\n                     PARM='IPv4addr(port_num)'\n       For example,  PARM='123.45.67.89(1414)'\n\n 4. This program is free to use via JSSLHAND member.  Feel free to\n    send email message to sslhand@gmail.com for any comments.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE825": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04O\\x006\\x01\\x10\\t\\x8f\\x01\\x10\\t\\x8f\\x19)\\x00^\\x00^\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@'", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-04-08T00:00:00", "modifydate": "2010-04-08T19:29:36", "lines": 94, "newlines": 94, "modlines": 0, "user": "CBT-479"}, "text": "//***FILE 825 is from Raymond Ching and contains his SSL Handshake  *   FILE 825\n//*           program.  See member called \"README\" for details.     *   FILE 825\n//*                                                                 *   FILE 825\n//*           emails:  \"sslhand support\" <sslhand@gmail.com>        *   FILE 825\n//*                    \"Raymond Ching\" <rching93@gmail.com>         *   FILE 825\n//*                                                                 *   FILE 825\n//*     I have written a simple z/OS batch program to perform       *   FILE 825\n//*     the first few phases of SSL handshake and print the         *   FILE 825\n//*     human readable output into the SYSPRINT DDname. My          *   FILE 825\n//*     intention is to write a simple program to diagnose the      *   FILE 825\n//*     most common SSL setup issues in z/OS.                       *   FILE 825\n//*                                                                 *   FILE 825\n//*     Basically, the program is free to execute without any       *   FILE 825\n//*     warranty.                                                   *   FILE 825\n//*                                                                 *   FILE 825\n//*     1. The SSLHAND program in JSSLHAND initiates Secure         *   FILE 825\n//*        Socket Layer (SSL) session with the partner SSL          *   FILE 825\n//*        server provided in the parameter by sending SSL          *   FILE 825\n//*        client hello message.  The server will respond with      *   FILE 825\n//*        SSL server hello message containing server               *   FILE 825\n//*        certificate and optionally with Certificate request.     *   FILE 825\n//*        Following flow diagram is extracted from                 *   FILE 825\n//*        http://www.ietf.org/rfc/rfc2246.txt.                     *   FILE 825\n//*                                                                 *   FILE 825\n//*        ------------------------------------------------------   *   FILE 825\n//*           Client                          Server                *   FILE 825\n//*                                                                 *   FILE 825\n//*           ClientHello       -------->                           *   FILE 825\n//*                                           ServerHello           *   FILE 825\n//*                                           Certificate*          *   FILE 825\n//*                                           ServerKeyExchange*    *   FILE 825\n//*                                           CertificateRequest*   *   FILE 825\n//*                              <--------    ServerHelloDone       *   FILE 825\n//*           ::::::::::                                            *   FILE 825\n//*        ------------------------------------------------------   *   FILE 825\n//*                                                                 *   FILE 825\n//*        The SSLHAND program then formats the content supplied    *   FILE 825\n//*        in Certificate and CertificateRequest and prints the     *   FILE 825\n//*        output to SYSPRINT DD.  The public certificates found    *   FILE 825\n//*        in the Certificate command will print to the SYSPRINT    *   FILE 825\n//*        DD in Base64-encoded format for easy transportation.     *   FILE 825\n//*        Finally, the SSLHAND program returns and let the         *   FILE 825\n//*        TCPIP stack in z/OS to close the TCP/IP socket.          *   FILE 825\n//*                                                                 *   FILE 825\n//*     2. Program SSLHAND is developed and verified in z/OS        *   FILE 825\n//*        v1.6 environment.  Standard z/OS TCPIP API socket        *   FILE 825\n//*        call, DFHSMS macros (OPEN, CLOSE, XLATE) are used.       *   FILE 825\n//*        Although the program uses AMODE 24 and RMODE 24,         *   FILE 825\n//*        ESA/390 machine instructions are used.  This program     *   FILE 825\n//*        does not require any external SSL library e.g. IBM       *   FILE 825\n//*        z/OS System SSL (GSKSSL).  Only IPv4 is supported.       *   FILE 825\n//*                                                                 *   FILE 825\n//*     3. To execute the SSLHAND program, you can refer to the     *   FILE 825\n//*        JSSLHAND member, amend the JOB and SYSTCPD DD card to    *   FILE 825\n//*        suit your executing environment.  For SYSTCPD            *   FILE 825\n//*        setting, you can refer to section 'Selecting a Stack     *   FILE 825\n//*        When Running Multiple Instances of TCP/IP' in z/OS       *   FILE 825\n//*        IBM Communications Server: IP Configuration Guide.       *   FILE 825\n//*        The SSL server IP address and TCP port number are        *   FILE 825\n//*        supplied as parameter to SSLHAND program in EXEC DD      *   FILE 825\n//*        card in the following format:                            *   FILE 825\n//*                                                                 *   FILE 825\n//*                         PARM='IPv4addr(port_num)'               *   FILE 825\n//*           For example,  PARM='123.45.67.89(1414)'               *   FILE 825\n//*                                                                 *   FILE 825\n//*     4. This program is free to use via JSSLHAND member.         *   FILE 825\n//*        Feel free to send email message to                       *   FILE 825\n//*        sslhand@gmail.com for any comments.                      *   FILE 825\n//*                                                                 *   FILE 825\n//*     5. Sample output SYSPRINT DD is attached.                   *   FILE 825\n//*                                                                 *   FILE 825\n//*     SSLHAND V0.1: 64.233.189.83(443)                            *   FILE 825\n//*     Server Hello received                                       *   FILE 825\n//*      Version: 3                                                 *   FILE 825\n//*      Serial Number:                                             *   FILE 825\n//*               1F19F6DE35DD63A142918AD52CC0AB12                  *   FILE 825\n//*      Signature Algorithm: sha1RSA                               *   FILE 825\n//*      Issuer:                                                    *   FILE 825\n//*               C=ZA                                              *   FILE 825\n//*               O=Thawte Consulting (Pty) Ltd.                    *   FILE 825\n//*               CN=Thawte SGC CA                                  *   FILE 825\n//*      Validity:                                                  *   FILE 825\n//*               NOT BEFORE=091218000000Z                          *   FILE 825\n//*                NOT AFTER=111218235959Z                          *   FILE 825\n//*      Subject:                                                   *   FILE 825\n//*               C=US                                              *   FILE 825\n//*               ST=California                                     *   FILE 825\n//*               L=Mountain View                                   *   FILE 825\n//*               O=Google Inc                                      *   FILE 825\n//*               CN=mail.google.com                                *   FILE 825\n//*      Subject Public Key Algorithm: RSA                          *   FILE 825\n//*                                                                 *   FILE 825\n//*              ----  snip  ----                                   *   FILE 825\n//*                                                                 *   FILE 825\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JSSLHAND": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x10\\t\\x8f\\x01\\x10\\t\\x8f\\x19'\\x00\\x9f\\x00\\x9f\\x00\\x00\\xd9\\xc3\\xc8\\xc9\\xd5\\xc7@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-04-08T00:00:00", "modifydate": "2010-04-08T19:27:00", "lines": 159, "newlines": 159, "modlines": 0, "user": "RCHING"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "README": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x08\\x8f\\x01\\x10\\x08\\x8f\\x12\\x13\\x00\\x98\\x00\\x98\\x00\\x00\\xd9\\xc3\\xc8\\xc9\\xd5\\xc7@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-03-29T00:00:00", "modifydate": "2010-03-29T12:13:00", "lines": 152, "newlines": 152, "modlines": 0, "user": "RCHING"}, "text": "1. The SSLHAND program in JSSLHAND initiates Secure Socket Layer (SSL)\n   session with the partner SSL server provided in the parameter by\n   sending SSL client hello message.  The server will respond with\n   SSL server hello message containing server certificate and\n   optionally with Certificate request.  Following flow diagram is\n   extracted from\n   http://www.ietf.org/rfc/rfc2246.txt.\n\n   -------------------------------------------------------------------\n      Client                                       Server\n\n      ClientHello                  -------->\n                                                      ServerHello\n                                                     Certificate*\n                                               ServerKeyExchange*\n                                              CertificateRequest*\n                                   <--------      ServerHelloDone\n      ::::::::::\n   ------------------------------------------------------------------\n\n   The SSLHAND program then formats the content supplied in Certificate\n   and CertificateRequest and prints the output to SYSPRINT DD.  The\n   public certificates found in the Certificate command will print\n   to the SYSPRINT DD in Base64-encoded format for easy transportation.\n   Finally, the SSLHAND program returns and let the TCPIP stack in z/OS\n   to close the TCP/IP socket.\n\n2. Program SSLHAND is developed and verified in z/OS v1.6 environment.\n   Standard z/OS TCPIP API socket call, DFHSMS macros (OPEN, CLOSE,\n   XLATE) are used.  Although the program uses AMODE 24 and RMODE 24,\n   ESA/390 machine instructions are used.  This program does not\n   require any external SSL library e.g. IBM z/OS System SSL (GSKSSL).\n   Only IPv4 is supported.\n\n3. To execute the SSLHAND program, you can refer to the JSSLHAND member,\n   amend the JOB and SYSTCPD DD card to suit your executing environment.\n   For SYSTCPD setting, you can refer to section 'Selecting a Stack When\n   Running Multiple Instances of TCP/IP' in z/OS IBM Communications\n   Server: IP Configuration Guide.  The SSL server IP address and TCP\n   port number are supplied as parameter to SSLHAND program in EXEC\n   DD card in the following format:\n                    PARM='IPv4addr(port_num)'\n      For example,  PARM='123.45.67.89(1414)'\n\n4. This program is free to use via JSSLHAND member.  Feel free to send\n   email message to sslhand@gmail.com for any comments.\n\n5. Sample output SYSPRINT DD is attached.\n\nSSLHAND V0.1: 64.233.189.83(443)\nServer Hello received\n Version: 3\n Serial Number:\n          1F19F6DE35DD63A142918AD52CC0AB12\n Signature Algorithm: sha1RSA\n Issuer:\n          C=ZA\n          O=Thawte Consulting (Pty) Ltd.\n          CN=Thawte SGC CA\n Validity:\n          NOT BEFORE=091218000000Z\n           NOT AFTER=111218235959Z\n Subject:\n          C=US\n          ST=California\n          L=Mountain View\n          O=Google Inc\n          CN=mail.google.com\n Subject Public Key Algorithm: RSA\n Subject Public Key:\n          0030818902818100D927C811F27BE445C946B6637583B1777E174189\n          8038F14527A03CD9E8A8004BD907D0BADEEDF42CA6ACDC2713EC0CC1\n          A6991742E68D27D28114B04B82FAB2C5D0BB20596228A396B561F676\n          C16D46D2FDBAC60F3DD1C9779A5833F6067632AD515F295F6EF8128B\n          ADE6C50839B34343A95B911DD7E3CF51DF75598E8D80AB5302030100\n          01\n Signature Algorithm: sha1RSA\n Signature:\n          0089C8EEEDF7B1CBEC913F676BC79ED372AA3E044951D42887359D67\n          84F992F504996AE74303C8F2DB920F556BE31206AAD771EBA341E0DF\n          664D54AE77A9C5F08D6B6708045EA23BCDC23EBFC750A2AB907A0FB1\n          3A7A260349F5C9F3F6B6BD1E486E063CF67ABEC2E1DA03ABECA47EAF\n          351F38F313B7CF53D0EC1AC88E7610D40D\n-----BEGIN CERTIFICATE-----\nMIIDIjCCAougAwIBAgIQHxn23jXdY6FCkYrVLMCrEjANBgkqhkiG9w0BAQUFADBM\nMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhhd3RlIENvbnN1bHRpbmcgKFB0eSkg\nTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBDQTAeFw0wOTEyMTgwMDAwMDBaFw0x\nMTEyMTgyMzU5NTlaMGkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh\nMRYwFAYDVQQHFA1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKFApHb29nbGUgSW5jMRgw\nFgYDVQQDFA9tYWlsLmdvb2dsZS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ\nAoGBANknyBHye+RFyUa2Y3WDsXd+F0GJgDjxRSegPNnoqABL2QfQut7t9CymrNwn\nE+wMwaaZF0LmjSfSgRSwS4L6ssXQuyBZYiijlrVh9nbBbUbS/brGDz3RyXeaWDP2\nBnYyrVFfKV9u+BKLrebFCDmzQ0OpW5Ed1+PPUd91WY6NgKtTAgMBAAGjgecwgeQw\nDAYDVR0TAQH/BAIwADA2BgNVHR8ELzAtMCugKaAnhiVodHRwOi8vY3JsLnRoYXd0\nZS5jb20vVGhhd3RlU0dDQ0EuY3JsMCgGA1UdJQQhMB8GCCsGAQUFBwMBBggrBgEF\nBQcDAgYJYIZIAYb4QgQBMHIGCCsGAQUFBwEBBGYwZDAiBggrBgEFBQcwAYYWaHR0\ncDovL29jc3AudGhhd3RlLmNvbTA+BggrBgEFBQcwAoYyaHR0cDovL3d3dy50aGF3\ndGUuY29tL3JlcG9zaXRvcnkvVGhhd3RlX1NHQ19DQS5jcnQwDQYJKoZIhvcNAQEF\nBQADgYEAicju7fexy+yRP2drx57Tcqo+BElR1CiHNZ1nhPmS9QSZaudDA8jy25IP\nVWvjEgaq13Hro0Hg32ZNVK53qcXwjWtnCAReojvNwj6/x1Ciq5B6D7E6eiYDSfXJ\n8/a2vR5IbgY89nq+wuHaA6vspH6vNR848xO3z1PQ7BrIjnYQ1A0=\n-----END CERTIFICATE-----\n Version: 3\n Serial Number:\n          30000002\n Signature Algorithm: sha1RSA\n Issuer:\n          C=US\n          O=VeriSign, Inc.\n          OU=Class 3 Public Primary Certification Authority\n Validity:\n          NOT BEFORE=040513000000Z\n           NOT AFTER=140512235959Z\n Subject:\n          C=ZA\n          O=Thawte Consulting (Pty) Ltd.\n          CN=Thawte SGC CA\n Subject Public Key Algorithm: RSA\n Subject Public Key:\n          0030818902818100D4D367D08D157FAECD31FE7D1D91A13F0B713CAC\n          CCC864FB63FC324B0794BD6F80BA2FE10493C033FC093323E90B742B\n          71C403C6D2CDE22FF50963CDFF48A500BFE0E7F388B72D32DE9836E6\n          0AAD007BC4644A3B847503F270927D0E62F521AB693684317590F8BF\n          C76C881B06957CC9E5A8DE75A12C7A68DFD5CA1C8758601902030100\n          01\n Signature Algorithm: sha1RSA\n Signature:\n          0055AC63EADEA1DDD2905F9F0BCE76BE13518F93D9052BC81B774BAD\n          6950A1EEDEDCFDDB07E9E83994DCAB72792F06BFAB8170C4A8EDEA53\n          34EDEF1E53D906C7562BD15CF4D18A8EB42BB1379048084225C53E8A\n          CB7FEB6F04D16DC574A2F7A27C7B603C77CD0ECE48027F012FB69B37\n          E02A2A36DCD585D6ACE53F546F961E05AF\n-----BEGIN CERTIFICATE-----\nMIIDIzCCAoygAwIBAgIEMAAAAjANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJV\nUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xNzA1BgNVBAsTLkNsYXNzIDMgUHVi\nbGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkwHhcNMDQwNTEzMDAw\nMDAwWhcNMTQwNTEyMjM1OTU5WjBMMQswCQYDVQQGEwJaQTElMCMGA1UEChMcVGhh\nd3RlIENvbnN1bHRpbmcgKFB0eSkgTHRkLjEWMBQGA1UEAxMNVGhhd3RlIFNHQyBD\nQTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1NNn0I0Vf67NMf59HZGhPwtx\nPKzMyGT7Y/wySweUvW+Aui/hBJPAM/wJMyPpC3QrccQDxtLN4i/1CWPN/0ilAL/g\n5/OIty0y3pg25gqtAHvEZEo7hHUD8nCSfQ5i9SGraTaEMXWQ+L/HbIgbBpV8yeWo\n3nWhLHpo39XKHIdYYBkCAwEAAaOB/jCB+zASBgNVHRMBAf8ECDAGAQH/AgEAMAsG\nA1UdDwQEAwIBBjARBglghkgBhvhCAQEEBAMCAQYwKAYDVR0RBCEwH6QdMBsxGTAX\nBgNVBAMTEFByaXZhdGVMYWJlbDMtMTUwMQYDVR0fBCowKDAmoCSgIoYgaHR0cDov\nL2NybC52ZXJpc2lnbi5jb20vcGNhMy5jcmwwMgYIKwYBBQUHAQEEJjAkMCIGCCsG\nAQUFBzABhhZodHRwOi8vb2NzcC50aGF3dGUuY29tMDQGA1UdJQQtMCsGCCsGAQUF\nBwMBBggrBgEFBQcDAgYJYIZIAYb4QgQBBgpghkgBhvhFAQgBMA0GCSqGSIb3DQEB\nBQUAA4GBAFWsY+reod3SkF+fC852vhNRj5PZBSvIG3dLrWlQoe7e3P3bB+noOZTc\nq3J5Lwa/q4FwxKjt6lM07e8eU9kGx1Yr0Vz00YqOtCuxN5BICEIlxT6Ky3/rbwTR\nbcV0oveifHtgPHfNDs5IAn8BL7abN+AqKjbc1YXWrOU/VG+WHgWv\n-----END CERTIFICATE-----\nServer hello done received\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSLHAND": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x10\\t\\x8f\\x01\\x10\\t\\x8f\\x19'\\x04\\xfd\\x04\\xfd\\x00\\x00\\xd9\\xc3\\xc8\\xc9\\xd5\\xc7@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-04-08T00:00:00", "modifydate": "2010-04-08T19:27:00", "lines": 1277, "newlines": 1277, "modlines": 0, "user": "RCHING"}, "text": "SSLHAND  CSECT\nSSLHAND  AMODE 24\nSSLHAND  RMODE 24\n         PRINT GEN\n***********************************************************************\n*                                                                     *\n*   MODULE NAME:  SSLHAND - Simple z/OS SSL Handshake                 *\n*                                                                     *\n*   REFERENCE:http://luca.ntop.org/Teaching/Appunti/asn1.html         *\n*             http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt*\n*             http://www.jensign.com/JavaScience/dotnet/JKeyNet/      *\n*                    index.html                                       *\n*             http://www.ietf.org/rfc/rfc2246.txt                     *\n*             http://www.ietf.org/rfc/rfc2459.txt                     *\n*   LANGUAGE:  ASSEMBLER                                              *\n*                                                                     *\n*   ATTRIBUTES: NON-REUSEABLE                                         *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*        R1  =                                                        *\n*        R2  =                                                        *\n*        R3  = BASE REG 1                                             *\n*        R4  = BASE REG 2 (UNUSED)                                    *\n*        R5  = FUTURE BASE?                                           *\n*        R6  = TEMP                                                   *\n*        R7  = RETURN REG                                             *\n*        R8  =                                                        *\n*        R9  = A(WORK AREA)                                           *\n*        R10 =                                                        *\n*        R11 =                                                        *\n*        R12 =                                                        *\n*        R13 = SAVE AREA                                              *\n*        R14 =                                                        *\n*        R15 =                                                        *\n*                                                                     *\n*   INPUT: IP ADDRESS IN DOT FORM AND PORT ADDRESS IN BRACKET         *\n*          e.g 123.234.123.234(1414)                                  *\n*   OUTPUT: WTO RESULTS THE SOCKET API RESULT                         *\n*           SYSUT1 DD CONTAINS THE SSL PACKET                         *\n*           SYSPRINT DD CONTAINS THE DECODED OUTPUT                   *\n***********************************************************************\n         MACRO\n&NAME    WRTMSG &MSGTXT\n&NAME    MVI   MYREC,X'40'\n         MVC   MYREC+1(L'MYREC-1),MYREC    CLEAR THE REC\n         LCLA  &MSGLEN\n&MSGLEN  SETA  DCLEN('&MSGTXT')-2\n         MVC   MYREC(&MSGLEN),=C&MSGTXT\n         MEND\n         MACRO\n&NAME    MVPTR &INCRE\n         A     R10,=F'&INCRE'\n         C     R10,PKGADDS\n         BH    BADCERT\n         MEND\n         GBLB  &TRACE  ASSEMBLER VARIABLE TO CONTROL TRACE GENERATION\n&TRACE   SETB  1       1=TRACE ON  0=TRACE OFF\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*---------------------------------------------------------------------*\n* START OF EXECUTABLE CODE                                            *\n*---------------------------------------------------------------------*\n         USING *,R3,R4            TELL ASSEMBLER OF OTHERS\n         SAVE (14,12),T,*\n         LR    R3,R15             COPY EP REG TO FIRST BASE\n         LA    R5,2048            GET R5 HALFWAY THERE\n         LA    R5,2048(R5)        GET R5 THERE\n         LA    R4,0(R5,R3)        GET R4 THERE\n         LA    R12,12             JUST FOR FUN!\n         ST    R1,PARMADDR        SAVE ADDRESS OF PARAMETER LIST\n         L     R1,0(R1)           GET POINTER\n         MVC   PARMLEN,0(R1)      GET LENGTH\n         LA    R1,2(R1)\n         ST    R1,PARMADDR\n*        STC   R1,TRACE           USE IT AS FLAG\n         L     R7,=A(SOCSAVE)     GET NEW SAVE AREA\n         ST    R7,8(R13)          SAVE ADDRESS OF NEW SAVE AREA\n         ST    R13,4(R7)          COMPLETE SAVE AREA CHAIN\n         LR    R13,R7             NOW SWAP THEM\n         L     R9,=A(MYCB)        POINT TO THE CONTROL BLOCK\n         USING MYCB,R9            TELL ASSEMBLER\n         OPEN  (CERTINFO,(OUTPUT))\n         LTR   R15,R15\n         BNZ   CONT1\n*---------------------------------------------------------------------*\n*   BUILD MESSAGE FOR CONSOLE\n*---------------------------------------------------------------------*\n*                                 INITIALIZE MESSAGE TEXT FIELDS\nLOOP     EQU   *\n         MVC   MSGNUM(8),SUBTASK  WHO I AM\n         MVC   TYPE,MSGSTART      MOVE 'STARTED' TO MESSAGE\n*\n         MVC   MSGRSLT1,MSGSUCC   ...SUCCESSFUL TEXT\n         MVC   MSGRSLT2,BLANK35\n*\n         STM   R14,R12,12(R13)    JUST FOR DEBUGGING\n         BAL   R14,WTOSUB         --> DO STARTING WTO\n***********************************************************************\n*                                                                     *\n*        Issue CHECK THE PARAMETER                                    *\n*                                                                     *\n***********************************************************************\n         LH    R1,PARMLEN\n         CHI   R1,X'0017'\n         BNH   PARMC0\nPARMBAD  MVC   MSGRSLT1,MSGFAIL   ...FAILURE    TEXT\n         MVC   MSGRSLT2,=CL35'PARAMERTER CHECK  )'\n         BAL   R14,WTOSUB         --> DO STARTING WTO\n         B     CONT1\nPARMC0   L     R15,PARMADDR\n         LA    R0,229             EBCDIC V\n         XR    R14,R14\n         LR    R14,R15\n         AH    R14,PARMLEN\n         SRST  R14,R15            SEARCH E5 IN PARMADDR\n         BL    PARMC0A\n         B     PARMC1             NOT FOUND NO VERBAL\nPARMC0A  MVI   VERBAL,X'E5'       SET VERBAL\nPARMC1   L     R15,PARMADDR\n         LA    R0,77              X'4D' CHAR(()\n         XR    R14,R14\n         LR    R14,R15\n         AH    R14,PARMLEN\n         SRST  R14,R15            SEARCH 4D IN PARMADDR\n         BL    PARMC2\n         B     PARMBAD\nPARMOC   OC    PORTTXT(0),0(R15)\nPARMCLC  CLC   PORTTXT(0),0(R15)\nPARMPACK PACK  PORTPCK(8),0(0,R15)\nPARMC2   ST    R15,SRCIPADD       SAVE THE NEXT ADDR.\n         LR    R1,R14             SAVE THE NEXT ADDR.\n         SR    R14,R15            R14 = LENGTH OF IP ADDR\n         STH   R14,SRCLEN\n         CHI   R14,X'000F'\n         BH    PARMBAD\n         XR    R15,R15\n         L     R15,PARMADDR\n         AR    R15,R14\n         LA    R15,1(R15)\n         L     R14,PARMADDR\n         AH    R14,PARMLEN\n         LA    R0,93              x'5D' CHAR())\n         SRST  R14,R15            search 5D in parmaddr\n         BL    PARMC3\n         B     PARMBAD\nPARMC3   ST    R15,PORTADDR\n         SR    R14,R15\n         ST    R14,PORTLEN\n         CHI   R14,X'0005'\n         BH    PARMBAD\n         S     R14,=F'1'\n         EX    R14,PARMOC\n         EX    R14,PARMCLC\n         BNE   PARMBAD            NOT NUMERIC\n         EX    R14,PARMPACK\n         CVB   R14,PORTPCK\n         C     R14,=A(65535)\n         BH    PARMBAD\n         STH   R14,PORTS\n*\n***********************************************************************\n*                                                                     *\n*        Issue INITAPI to connect to interface                        *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MINITAPI      MOVE 'INITAPI' TO MESSAGE\n*\n         POST  ECB,1              FOLLOWING IS SYNC ONLY\n         MVI   SYNFLAG,0          MOVE A 1 FOR ASYNCH\n         EZASMI TYPE=INITAPI,     ISSUE INITAPI MACRO                  X\n               SUBTASK=SUBTASK,   SPECIFY SUBTASK IDENTIFIER           X\n               MAXSOC=MAXSOC,     SPECIFY MAXIMUM NUMBER OF SOCKETS    X\n               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               APITYPE=APITYPE,   (SPECIFY APITYPE FIELD)              X\n               ERROR=ERROR        Abend if error on macro\n*              IDENT=IDENT,       TCP ADDR SPACE AND MY ADDR SPACE\n*\n*              ASYNC=('ECB'),     (SPECIFY TO USE ECBS)\n*              ASYNC=('EXIT',MYEXIT)  (SPECIFY TO USE EXITS)\n         BAL   R14,RCCHECK        --> CHECK RESULTS\n         LTR   R8,R8              RECHECK IT\n         BM    CONT1              --> WE ARE DONE\n***********************************************************************\n*                                                                     *\n*        Issue SOCKET Macro to obtain a socket descriptor             *\n*                  *** INET and STREAM ***                            *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MSOCKET       MOVE 'SOCKET' TO MESSAGE\n*\n         EZASMI TYPE=SOCKET,      Issue SOCKET Macro                   X\n               AF='INET',         INET or IUCV                         X\n               SOCTYPE='STREAM',  STREAM(TCP) DATAGRAM(UDP) or RAW     X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BAL   R14,RCCHECK        --> CHECK RESULTS\n         STH   R8,S               SAVE RETCODE (=SOCKET DESCRIPTOR)\n         LTR   R8,R8              CHECK IT\n         BM    CONT               --> WE ARE DONE!\n         MVC   TYPE,MPTON         MOVE 'PTON'   TO MESSAGE\n         L     R8,SRCIPADD\n         EZASMI TYPE=PTON,                                             X\n               AF='INET',                                              X\n               SRCADDR=(R8),                                           X\n               SRCLEN=SRCLEN,                                          X\n               DSTADDR=ADDR,                                           X\n               ERRNO=ERRNO,                                            X\n               RETCODE=RETCODE\n         BAL   R14,RCCHECK        --> CHECK RESULTS\n         LTR   R8,R8              CHECK IT\n         BM    CONT               --> WE ARE DONE!\n*        DC    X'0000'\n***********************************************************************\n*                                                                     *\n*        ISSUE GETHOSTID CALL                                         *\n*                                                                     *\n***********************************************************************\n*        MVC    TYPE,=CL8'GETHOSTI'\n*        POST   ECB,1             FOLLOWING IS SYNC ONLY\n*        EZASMI TYPE=GETHOSTID,RETCODE=RETCODE,ERRNO=ERRNO\n*        BAL   R14,RCCHECK        --> CHECK RESULTS\n*        ST    R8,ADDR\n***********************************************************************\n*                                                                     *\n*        Issue CONNECT Socket                                         *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MCONNECT      MOVE 'CONNECT' TO MESSAGE\n         MVC   PORT(2),PORTS      Load STREAM port #\n*\n*\n         MVC   ADDRESS(4),ADDR    LOAD OUR INTERNET ADDRESS\n*\n         EZASMI TYPE=CONNECT,     Issue Macro                          X\n               S=S,               STREAM                               X\n               NAME=NAME,         SOCKET NAME STRUCTURE                X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n         LTR   R8,R8              RECHECK IT\n         BM    CONT               --> WE ARE DONE\n***********************************************************************\n*                                                                     *\n*        Issue GETPEERNAME                                            *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MGETPEER      MOVE 'GTPEERN' TO MESSAGE\n*\n         EZASMI TYPE=GETPEERNAME, Issue Macro                          X\n               S=S,               STREAM                               X\n               NAME=NAME,         (SOCKET NAME STRUCTURE)              X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n***********************************************************************\n*                                                                     *\n*        Issue WRITE - Write data from buffer                         *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MWRITE        MOVE 'WRITE ' TO MESSAGE\n*\n         EZASMI TYPE=WRITE,       Issue Macro                          X\n               S=S,               STREAM SOCKET                        X\n               NBYTE=NBYTE,       SIZE OF BUFFER                       X\n               BUF=BUF,           BUFFER                               X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n         L     R0,BUF2LEN\n         GETMAIN R,LV=(0)\n         ST    R1,BUF2ADDR        kept the start addr\n         WRTMSG 'SSLHAND V0.1:'   WRITE THE GREETING MESSAGE\n         L     R2,PARMADDR\n         XR    R1,R1\n         LH    R1,PARMLEN\n         S     R1,=F'1'\n         EX    R1,FORMMVC2\n         PUT   CERTINFO,MYREC\n         CLI   VERBAL,X'E5'       VERBAL SET\n         BNE   DOREAD\n         OPEN  (PRINT,(OUTPUT))\n         B     DOREAD\n***********************************************************************\n*                                                                     *\n*        Issue SHUTDOWN - HOW = 1 (end communication TO socket)       *\n*                                                                     *\n***********************************************************************\nDOSHUTDO EQU   *\n         MVC   HOW(4),=F'1'\n*\n         BAL   R14,SHUTSUB        --> SHUTDOWN\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n***********************************************************************\n*                                                                     *\n*        Issue READ - Read data and store in buffer                   *\n*                                                                     *\n***********************************************************************\nDOREAD   MVC   TYPE,MREAD         MOVE 'READ  ' TO MESSAGE\n*\n         L     R11,BUF2LEN\n         L     R10,BUF2ADDR\n         AR    R11,R10\n         S     R11,=F'1'\n         ST    R11,BUF2ADDS       KEPT THE END ADDR\n         MVC   NBYTE2,=F'5'       GET THE FIRST 5 BYTES\n         EZASMI TYPE=READ,        Issue Macro                          X\n               S=S,               STREAM SOCKET                        X\n               NBYTE=NBYTE2,      SIZE OF BUFFER                       X\n               BUF=(R10),         (BUFFER)                             X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n*        MVC   MSGRSLT1,MSGBUFF   TITLE\n*        MVC   MSGRSLT2,0(R10)    MOVE THE DATA\n*        BAL   R14,WTOSUB         --> PRINT IT\n         CLC   RETCODE,=F'5'\n         BNE   NOSSL              BYE\n         CLC   0(3,R10),=X'160300' CHECK IF SSL V3.0 HANDSHAKE\n         BE    SSLOK              BYE\nNOSSL    MVC   MSGRSLT1,MSGFAIL   ...FAILURE    TEXT\n         MVC   MSGRSLT2,=CL35'SSL NOT DETECTED  )'\n         BAL   R14,WTOSUB         --> DO STARTING WTO\n         B     CONT1\nSSLOK    MVC   NBYTE2+2(2),3(R10) move the message length\n         CLC   NBYTE2,BUF2LEN\n         BH    CONT\nDOREAD2  A     R10,RETCODE\n         CLR   R10,R11\n         BH    CONT               BYE\n         EZASMI TYPE=READ,        Issue Macro                          X\n               S=S,               STREAM SOCKET                        X\n               NBYTE=NBYTE2,      SIZE OF BUFFER                       X\n               BUF=(R10),         (BUFFER)                             X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n         BAL   R14,RCCHECK        --> CHECK RC\n*        MVC   MSGRSLT1,MSGBUFF   TITLE\n*        MVC   MSGRSLT2,0(R10)    MOVE THE DATA\n*        BAL   R14,WTOSUB         --> PRINT IT\n         L     R8,NBYTE2\n         S     R8,RETCODE         DECREMENT THE EXPECTED MSG LENGTH\n         ST    R8,NBYTE2\n         BZ    DONEREAD\n         B     DOREAD2\nDONEREAD L     R10,BUF2ADDR\n         CLI   VERBAL,X'E5'       VERBAL SET\n         BNE   NOSNAP\n         SNAP  DCB=PRINT,STORAGE=((R10),(R11))\nNOSNAP   EQU   *\n***********************************************************************\n*                                                                     *\n*        Format the SSL message                                       *\n*                                                                     *\n***********************************************************************\n         BAL   R14,FORMCERT\n         LTR   R15,R15\n         BNZ   DOREAD\n***********************************************************************\n*                                                                     *\n*        Issue SHUTDOWN - HOW = 0 (end communication FROM socket)     *\n*                                                                     *\n***********************************************************************\nCONT     MVC   HOW(4),=F'0'\n*\n         BAL   R14,SHUTSUB        --> SHUTDOWN\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n***********************************************************************\n*                                                                     *\n*        Terminate Connection to API                                  *\n*                                                                     *\n***********************************************************************\n         MVC   TYPE,MTERMAPI      MOVE 'TERMAPI' TO MESSAGE\n*\n         POST  ECB,1              FOLLOWING IS SYNC ONLY\n         EZASMI TYPE=TERMAPI      Issue EZASMI Macro for Termapi\n*\n         BAL   R14,RCCHECK        --> CHECK RC\n*---------------------------------------------------------------------*\n*        Issue console message for task termination\n*---------------------------------------------------------------------*\n         MVC   TYPE,MSGEND        Move 'ENDED' to message\n*\n         MVC   MSGRSLT1,MSGSUCC   ...SUCCESSFUL text\n         MVC   MSGRSLT2,BLANK35\n         BAL   R14,WTOSUB         --> DO WTO\n         LA    R14,1              CONSTANT\n         AH    R14,APITYPE        ADD\n         STH   R14,APITYPE        STORE\n         CH    R14,=H'3'          COMPARE\n*        BE    LOOP               --> LETS DO IT AGAIN!\nCONT1    EQU   *\n*\n*---------------------------------------------------------------------*\n*        Return to Caller\n*---------------------------------------------------------------------*\n         L     R13,4(R13)\n         RETURN (14,12),T,RC=0\nFORMCERT EQU   *\n         LR    R7,R14             SAVE RETURN REG\n*\n* REGISTER USAGE: R10 CURRENT BUFFER POINTER\n*                 R11 END OF VALID BUFFER ADDRESS\n*\n         L     R10,BUF2ADDR\n         L     R11,BUF2ADDS\n         ST    R11,PKGADDS\n*\n*        x'16'   --> handshake\n*        x'0300' --> v3.0\n*        x'LLLL' --> Length\n*\n         CLC   0(3,R10),=X'160300'  CHECK IF HANDSHAKE AND SSL V3.0\n         BNE   BADCERT\n         XR    R15,R15\n         ICM   R15,B'0011',3(R10)\n         MVPTR 5                    ADD 5 to R10\n         AR    R15,R10\n         ST    R15,PKGADDS          KEEP THE PACKET END ADDR\nCMDCHK   EQU   *\n         C     R10,PKGADDS\n         BNL   FORMMORE             Read More\n         CLI   0(R10),X'0E'         Server Hello Done\n         BE    GOODCERT\n         CLI   0(R10),X'02'         SERVER HELLO\n         BE    SKIPLEN2\n         CLI   0(R10),X'0C'         Key Exchange\n         BE    SKIPLEN1\nCMDCHK1  CLI   0(R10),X'0B'         Certificate now\n         BNE   CMDCHK2\n         ICM   R2,B'0111',1(R10)\n         MVPTR 4                    SKIP THE CERTICATE COMMAND\n         AR    R2,R10\n         ST    R2,LISTADDS\n         ICM   R2,B'0111',0(R10)\n         MVPTR 3                    SKIP THE LENGTH\n         AR    R2,R10\n         C     R2,LISTADDS          DOUBLE CHECK THE LENGTH\n         BNE   BADCERT\nLOOPCERT ICM   R2,B'0111',0(R10)    GET THE LENGTH OF THIS ENTRY\n         MVPTR 3\n         ST    R2,CERTLEN           KEEP THE CERTIFICATE LENGTH\n         AR    R2,R10\n         ST    R10,CERTADDR         KEEP THE CERTIFICATE ADDRESS\n         ST    R2,ENTYADDS          KEEP THE END ADDR OF THIS ENTRY\n         CLI   0(R10),X'30'         START OF ASN SEQUENCE CERTIFICATE\n         BNE   BADCERT\n         BAL   R14,GREPLEN\n         LTR   R15,R15\n         BZ    BADCERT\n         AR    R15,R10\n         ST    R15,CERADDS          KEPT THE END ADDR\n         CLI   0(R10),X'30'         START OF ASN SEQUENCE TBS\n         BNE   BADCERT\n         BAL   R14,GREPLEN\n         LTR   R15,R15\n         BZ    BADCERT\n         AR    R15,R10\n         ST    R15,TBSADDS          KEPT THE TBS END ADDR\n         WRTMSG ' Version: 1'\n         CLC   0(2,R10),=X'A003'    CHECK FOR TBS VERSION\n         BNE   NOVER\n         MVPTR 2\n         CLI   0(R10),X'02'         CHECK ASN INTEGER TAG\n         BNE   BADCERT\n         BAL   R14,GREPLEN\n         MVC   CERTVER,0(R10)       GET THE CERT VER\n         TR    CERTVER,CERTVETR\n         MVC   MYREC+10(1),CERTVER\n         AR    R10,R15\nNOVER    PUT   CERTINFO,MYREC\n         CLI   0(R10),X'02'         CHECK ASN INTEGER TAG\n         BNE   BADCERT\n         WRTMSG ' Serial Number:'\n         PUT   CERTINFO,MYREC\n         BAL   R14,GREPLEN\n         LTR   R15,R15\n         BZ    NOSERIAL\n         BAL   R14,HEXPRT\n         CLI   0(R10),X'30'         CHECK ASN SEQUENCE TAG\n         BNE   BADCERT\n         BAL   R14,GREPLEN\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         CLI   0(R10),X'06'         CHECK ASN OBJECT IDENTIFIER\n         BNE   BADCERT\n         BAL   R14,OBJFIND\n         LTR   R8,R1\n         BZ    NOOBJ\n         WRTMSG ' Signature Algorithm:'\n         LA    R2,MYREC+22\n         XR    R1,R1\n         ICM   R1,B'0001',0(R8)\n         S     R1,=F'1'\n         EX    R1,FORMMVC\n         PUT   CERTINFO,MYREC\n         B     FORMISSU\nNOOBJ    EQU   *\n         LR    R8,R15\n         WRTMSG ' Signature Algorithm:'\n         PUT   CERTINFO,MYREC\n         LR    R15,R8\n         BAL   R14,HEXPRT           R15 contains the length\nFORMISSU L     R10,REC1ADDS         SKIP to NEXT FIELD\n         BAL   R14,GREPLEN\n         LTR   R15,R15\n         BZ    BADCERT\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         WRTMSG ' Issuer:'          Processing Issuer Section\n         PUT   CERTINFO,MYREC\nFORMISSL BAL   R14,GREPLEN\n         AR    R15,R10\n         ST    R15,REC2ADDS\n         BAL   R14,OBJPRT\n         L     R10,REC2ADDS\n         CLM   R10,B'1111',REC1ADDS\n         BL    FORMISSL\n         BAL   R14,GREPLEN          GET the validity RECLEN\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         WRTMSG ' Validity:'\n         PUT   CERTINFO,MYREC\n         BAL   R14,GREPLEN          GET the NOT BEFORE TIME LENGTH\n         LTR   R8,R15\n         WRTMSG '          NOT BEFORE='\n         LA    R2,MYREC+21\n         S     R8,=F'1'\n         EX    R8,FORMMVC1\n         LA    R8,1(R8)\n         XLATE (R2),(R8),TO=E\n         PUT   CERTINFO,MYREC\n         AR    R10,R8\n         BAL   R14,GREPLEN          GET the NOT AFTER TIME LENGTH\n         LTR   R8,R15\n         WRTMSG '           NOT AFTER='\n         LA    R2,MYREC+21\n         S     R8,=F'1'\n         EX    R8,FORMMVC1\n         LA    R8,1(R8)\n         XLATE (R2),(R8),TO=E\n         PUT   CERTINFO,MYREC\n         AR    R10,R8\n         BAL   R14,GREPLEN          Processing Subject Section\n         LTR   R15,R15\n         BZ    BADCERT\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         WRTMSG ' Subject:'\n         PUT   CERTINFO,MYREC\nFORMSUBL BAL   R14,GREPLEN\n         AR    R15,R10\n         ST    R15,REC2ADDS\n         BAL   R14,OBJPRT\n         L     R10,REC2ADDS\n         CLM   R10,B'1111',REC1ADDS\n         BL    FORMSUBL\nFORMPUBK BAL   R14,GREPLEN        GREP THE LENGTH of SubjectKey length\n         BAL   R14,GREPLEN        GREP THE Length of algor\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         BAL   R14,OBJFIND\n         LTR   R8,R1\n         BZ    NOOBJ1\n         WRTMSG ' Subject Public Key Algorithm:'\n         LA    R2,MYREC+31\n         XR    R1,R1\n         ICM   R1,B'0001',0(R8)\n         S     R1,=F'1'\n         EX    R1,FORMMVC\n         PUT   CERTINFO,MYREC\n         B     FORMPUBH\nNOOBJ1   EQU   *\n         LR    R8,R15\n         WRTMSG ' Subject Public Key Algorithm:'\n         PUT   CERTINFO,MYREC\n         LR    R15,R8\n         BAL   R14,HEXPRT           R15 contains the length\nFORMPUBH EQU   *\n         WRTMSG ' Subject Public Key:'\n         PUT   CERTINFO,MYREC\n         L     R10,REC1ADDS         Skip to the public key field\n         BAL   R14,GREPLEN\n         BAL   R14,HEXPRT\n*\n*        THEN SKIP THE EXTENSION FIELDS\n*\n*        BAL   R14,GREPLEN\n*        AR    R10,R15\n         L     R10,TBSADDS\n*\n*        PRINT the signature\n*\n         BAL   R14,GREPLEN        GREP THE Length of signature algo\n         AR    R15,R10\n         ST    R15,REC1ADDS\n         BAL   R14,OBJFIND\n         LTR   R8,R1\n         BZ    NOOBJ2\n         WRTMSG ' Signature Algorithm:'\n         LA    R2,MYREC+22\n         XR    R1,R1\n         ICM   R1,B'0001',0(R8)\n         S     R1,=F'1'\n         EX    R1,FORMMVC\n         PUT   CERTINFO,MYREC\n         B     FORMSIGH\nNOOBJ2   EQU   *\n         LR    R8,R15\n         WRTMSG ' Signature Algorithm:'\n         PUT   CERTINFO,MYREC\n         LR    R15,R8\n         BAL   R14,HEXPRT           R15 contains the length\nFORMSIGH EQU   *\n         WRTMSG ' Signature:'\n         PUT   CERTINFO,MYREC\n         L     R10,REC1ADDS         Skip to the public key field\n         BAL   R14,GREPLEN\n         BAL   R14,HEXPRT\n*\n* Print the certificate\n*\n         BAL   R14,GENCERT\n         L     R10,CERADDS        SKIP TO END OF CERT\n         CLM   R10,B'1111',LISTADDS\n         BL    LOOPCERT\n         B     CMDCHK\nCMDCHK2  CLI   0(R10),X'0D'                       Certificate Request\n         BNE   SKIPLEN\n      WRTMSG  'Certificate request received. Recoginised certificates:'\n         PUT   CERTINFO,MYREC\n         ICM   R2,B'0111',1(R10)\n         MVPTR 4\n         XR    R2,R2\n         ICM   R2,B'0001',0(R10)                  GREP the algor field\n         LA    R10,1(R10) SKIP myself\n         AR    R10,R2                             SKIP the field length\n*        BAL   R14,GREPLEN                        GREP THE algor field\n*        AR    R10,R15                            SKIP the algor field\n         ICM   R2,B'0011',0(R10)                  GREP the field length\n         AR    R2,R10\n         ST    R2,LISTADDS                        KEEP the list addr\n         MVPTR 2\nLOOPCA   XR    R2,R2\n         ICM   R2,B'0011',0(R10)                  GREP the record leng\n         AR    R2,R10\n         ST    R2,REC1ADDS                        KEEP the list addr\n         MVPTR 2\n         BAL   R14,GREPLEN\nLOOPDN   BAL   R14,GREPLEN\n         AR    R15,R10\n         ST    R15,REC2ADDS\n         BAL   R14,OBJPRT\n         L     R10,REC2ADDS\n         CLM   R10,B'1111',REC1ADDS\n         BL    LOOPDN\n         WRTMSG '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'\n         PUT   CERTINFO,MYREC\n         CLM   R10,B'1111',LISTADDS\n         BL    LOOPCA\n         B     GOODCERT\nSKIPLEN  ICM   R2,B'0111',1(R10)\n         MVPTR 4\n         AR    R10,R2\n*        C     R10,PKGADDS\n         B     CMDCHK\nSKIPLEN1 WRTMSG 'Server Key Exchange received'\n         PUT   CERTINFO,MYREC\n         B     SKIPLEN\nSKIPLEN2 WRTMSG 'Server Hello received'\n         PUT   CERTINFO,MYREC\n         B     SKIPLEN\nNOSERIAL EQU   *\nGOODCERT WRTMSG 'Server hello done received'\n         PUT   CERTINFO,MYREC\n         XR    R15,R15            SET NO MORE READ REQUIRED\n         B     FORMEND\nFORMMORE EQU   *\n         LA    R15,1\n         B     FORMEND\nBADCERT  WRTMSG 'BAD SSL'\n         PUT   CERTINFO,MYREC\nFORMEND  BR    R7\nFORMMVC  MVC   0(0,R2),1(R8)\nFORMMVC1 MVC   0(0,R2),0(R10)\nFORMMVC2 MVC   MYREC+14(0),0(R2)\n*\nWTOSUB   EQU   *\n         LR    R7,R14             SAVE RETURN REG\n         CLI   VERBAL,X'E5'\n         BE    WTOSUBC\n         CLC   MSGRSLT1,MSGFAIL\n         BE    WTOSUBC\n         B     WTOSUBE\nWTOSUBC  EQU   *\n         MVC   MSGCMD,TYPE        COPY COMMAND\n*        WTO   TEXT=MSG           UNCOMMENT TO RESUME DEBUG\n         WRTMSG ' '\n         MVC   MYREC(64),MSG+2\n         PUT   CERTINFO,MYREC\nWTOSUBE  BR    R7                 --> RETURN\n*\n* GENCERT: INPUT      : NOTHING\n*\n*         OUTPUT      : NOTHING\n*                       PRINT BASE64 CERTIFICATE TO CERTINFO\n*\nGENCERT  EQU   *\n         ST    R14,GENR14\n         L     R2,CERTLEN         R2 -> CERTLEN\n         L     R8,CERTADDR        R8 -> CERT CONTENT\n         LA    R6,16              COUNT FOR EACH LINE\n         WRTMSG '-----BEGIN CERTIFICATE-----'\n         PUT   CERTINFO,MYREC\n         WRTMSG ' '\n         LA    R15,MYREC\nGENCLOOP CL    R2,=F'2'\n         BE    GENCEND2\n         CL    R2,=F'1'\n         BE    GENCEND1\n         BL    GENCEND0\n         XR    R1,R1\n         ICM   R1,B'1110',0(R8)   GET THREE BYTES\n         STCM  R1,B'0010',3(R15)  GET  THE FORTH BYTE\n         NI    3(R15),X'3F'\n         SRL   R1,2               GEN  THE FRIST BYTE\n         STCM  R1,B'1000',0(R15)\n         NI    0(R15),X'3F'\n         SRL   R1,2               GEN  THE SECOND BYTE\n         STCM  R1,B'0100',1(R15)\n         NI    1(R15),X'3F'\n         SRL   R1,2               GEN  THE THIRD BYTE\n         STCM  R1,B'0010',2(R15)\n         NI    2(R15),X'3F'\n*        SRL   R1,2               GEN  THE FORTH BYTE\n         LA    R15,4(R15)\n         LA    R8,3(R8)\n         S     R2,=F'3'\n*        S     R6,=F'1'\n*        BNZ   GENCLOOP\n         BCT   R6,GENCLOOP\n         TR    MYREC(64),GENTAB\n         PUT   CERTINFO,MYREC\n         WRTMSG ' '\n         LA    R15,MYREC\n         LA    R6,16              COUNT FOR EACH LINE\n         B     GENCLOOP\nGENCEND2 EQU   *\n         XR    R1,R1\n         ICM   R1,B'1100',0(R8)   GET THE LAST TWO BYTES\n         SRL   R1,2               GEN  THE FRIST BYTE\n         STCM  R1,B'1000',0(R15)\n         NI    0(R15),X'3F'\n         SRL   R1,2               GEN  THE SECOND BYTE\n         STCM  R1,B'0100',1(R15)\n         NI    1(R15),X'3F'\n         SRL   R1,2               GEN  THE THIRD BYTE\n         STCM  R1,B'0010',2(R15)\n         NI    2(R15),X'3F'\n         MVI   3(R15),X'41'       will be translated into '='\n         B     GENCEND0\nGENCEND1 EQU   *\n         XR    R1,R1\n         ICM   R1,B'1000',0(R8)   GET THE LAST BYTE\n         SRL   R1,2               GEN  THE FRIST BYTE\n         STCM  R1,B'1000',0(R15)\n         NI    0(R15),X'3F'\n         SRL   R1,2               GEN  THE SECOND BYTE\n         STCM  R1,B'0100',1(R15)\n         NI    1(R15),X'3F'\n         MVI   2(R15),X'41'       will be translated into '='\n         MVI   3(R15),X'41'       will be translated into '='\n         B     GENCEND0\n* NOTHING REMAIN\n* SPOOL OUT THE LAST LINE\nGENCEND0 EQU   *\n         TR    MYREC(64),GENTAB\n         CLI   MYREC,X'40'\n         BE    GENCENDE           skip blank line\n         PUT   CERTINFO,MYREC\nGENCENDE WRTMSG '-----END CERTIFICATE-----'\n         PUT   CERTINFO,MYREC\nGENCEND  L     R14,GENR14\n         BR    R14\nGENR14   DC    F'0'\nGENTAB   DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n         DC    C'0123456789+/ ='  require SPACE translate to SPACE\n         DC    0F\n*\n* HEXPRT: INPUT    R15: LENGTH\n*               0(R10): FROM ADDRESS\n*         OUTPUT   R10: ADVANCE TO NEXT FIELD\n*                       PRINT OUT THE PRINTABLE HEX VALUE\n*\nHEXPRT   EQU   *\n         ST    R14,HEXR14\n         ST    R15,HEXR15\n         XR    R6,R6\n         LR    R6,R15           HEX LENGTH\nHEXLOOP  LA    R1,4\n         WRTMSG ' '             CLEAR the output area\n*        LA    R3,MYREC+L'MYREC MARK THE END RECORD ADDRESS\n         LA    R2,MYREC+10      GET THE BEGINNING ADDRESS\nHEXLOO1  CL    R6,=F'7'\n         BL    HEXLAST\n         UNPK  0(15,R2),0(8,R10)\n         TR    0(14,R2),HEXTAB\n         MVI   14(R2),X'40'\n         MVPTR 7\n         LA    R2,14(R2)\n         S     R6,=F'7'\n         BZ    HEXEND1\n         BCT   R1,HEXLOO1\n         PUT   CERTINFO,MYREC   R1 COULD NOT USE AFTER PUT\n         B     HEXLOOP\nHEXLAST  UNPK  0(3,R2),0(2,R10)      PRT THE LAST PORTION\n         TR    0(2,R2),HEXTAB\n         MVI   2(R2),X'40'\n         LA    R10,1(R10)\n         LA    R2,2(R2)\n         BCT   R6,HEXLAST\nHEXEND1  PUT   CERTINFO,MYREC\nHEXEND   L     R14,HEXR14\n         L     R15,HEXR15\n         BR    R14\nHEXR14   DC    F'0'\nHEXR15   DC    F'0'\n*\n*\n* OBJPRT:  INPUT 0(R10): start of ASN.1 choice\n*         OUTPUT R10: ADVANCE TO THE REAL DATA\n*                R1:  TRANSLATED OBJECT NAME\n*                     IF R1 = NULL, R10 will not advance\n*\nOBJPRT   EQU   *\n         ST    R14,OBJPR14\n         BAL   R14,GREPLEN\n         LTR   R8,R15\n         BZ    BADCERT\n         AR    R15,R10\n         ST    R15,OBJPADDS\n         BAL   R14,OBJFIND\n         LTR   R8,R1                  R8 -> ANSWER\n         BZ    OBJPNO\n         WRTMSG ' '\n         LA    R2,MYREC+10\n         XR    R1,R1\n         ICM   R1,B'0001',0(R8)\n         S     R1,=F'1'\n         EX    R1,OBJPMVC\n         AR    R2,R1\n         LA    R2,1(R2)               R2 -> MYREC\nOBJPTXT0 CLI   0(R10),X'13'           ASN.1 PRINTTEXT\n         BE    OBJPTXT\n         CLI   0(R10),X'14'           ASN.1 TeletexString, T61String\n         BE    OBJPTXT\n         CLI   0(R10),X'16'           ASN.1 IA5String\n         BE    OBJPTXT\n         CLI   0(R10),X'0C'           ASN.1 UTF8TEXT\n         BNE   OBJPNOTX\nOBJPTXT  BAL   R14,GREPLEN\n         LTR   R8,R15\n         BZ    BADCERT\n         NILL  R8,X'007F'         ensure the length is less than 128\n         S     R8,=F'1'\n         EX    R8,OBJPMVC1\n         LA    R8,1(R8)\n         XLATE (R2),(R8),TO=E\n         PUT   CERTINFO,MYREC\n         B     OBJPEND\nOBJPNOTX MVC   0(15,R2),=C'unable to print'\n         PUT   CERTINFO,MYREC\n         B     OBJPEND\nOBJPNO   EQU   *\n         LR    R8,R15\n         CLI   VERBAL,X'E5'       VERBAL SET\n         BNE   OBJPEND\n         WRTMSG '      *** Unidentified Object ***'\n         PUT   CERTINFO,MYREC\n         LR    R15,R8\n         BAL   R14,HEXPRT\n         WRTMSG '           TEXT='\n         LA    R2,MYREC+16\n         B     OBJPTXT0\n*        DC    X'0000'\nOBJPEND  L     R10,OBJPADDS\n         L     R14,OBJPR14\n         BR    R14\nOBJPR14  DC    F'0'\nOBJPADDS DC    F'0'\nOBJPMVC  MVC   0(0,R2),1(R8)\nOBJPMVC1 MVC   0(0,R2),0(R10)\n*\n*\n* OBJFIND: INPUT 1(R10): POINT TO OBJECT IDENTIFIER\n*         OUTPUT R10: ADVANCE TO THE REAL DATA\n*                R1:  TRANSLATED OBJECT NAME\n*                     IF R1 = NULL, R10 will not advance\n*                R15: OBJECT LENGTH\nOBJFIND  EQU   *\n         ST    R14,OBJR14\n         BAL   R14,GREPLEN\n         LTR   R8,R15\n         BZ    BADCERT\n         S     R8,=F'1'\n         LA    R2,OBJTAB\nOBJLOOP  XR    R1,R1\n         CLM   R15,B'0001',0(R2) COMPARE LENGTH\n         BE    OBJLOO1\n         B     OBJLOO2\nOBJLOO1  EX    R8,OBJCLC        COMPARE CONTENT\n         BE    OBJGOOD\nOBJLOO2  ICM   R1,B'0001',0(R2)\n         AR    R2,R1\n         LA    R2,1(R2)\n         ICM   R1,B'0001',0(R2)\n         AR    R2,R1\n         LA    R2,1(R2)\n         CLI   0(R2),X'00'\n         BE    OBJNONE\n         B     OBJLOOP\nOBJGOOD  ICM   R1,B'0001',0(R2)\n         AR    R1,R2\n         LA    R1,1(R1)          R1 -> THE TRANSLATED OBJECT\n         AR    R10,R15           ADVANCE POINTER TO THE CONTENT\n         B     OBJEND\nOBJNONE  XR    R1,R1\nOBJEND   L     R14,OBJR14\n         BR    R14\nOBJR14   DC    F'0'\nOBJR15   DC    F'0'\nOBJCLC   CLC   0(0,R10),1(R2)\n*\n*\n* GREPLEN: INPUT 1(R10): LENGTH BYTE\n*                        IF 1(R10) GREATER THAN OR EQUAL TO X'80',\n*                          IT CONTAINS THE NUMBER OF LENGTH BYTES\n*                        OTHERWISE, IT IS THE LENGTH FIELD\n*         OUTPUT R10: ADVANCE TO THE REAL DATA\n*                R15: REAL DATA LENGTH\n*\nGREPLEN  EQU   *\n         ST    R14,GREPRET\n         XR    R15,R15\n         TM    1(R10),X'80'\n         BO    GREPLON\n         IC    R15,1(R10)\n         MVPTR 2\n         B     GREPEND\nGREPLON  IC    R15,1(R10)\n         NILL  R15,X'007F'\n         C     R15,=F'4'\n         BH    BADCERT\n         MVPTR 2\n         LTR   R15,R15\n         BZ    GREPEND\n         LR    R1,R15\n         ST    R15,GREPMSK        CHANGE LENGTH TO ICM MASK\n         TR    GREPMSK,GREPTRT\n         L     R15,GREPMSK\n         EX    R15,GREPICM\n         AR    R10,R1\nGREPEND  L     R14,GREPRET\n         BR    R14\nGREPRET  DC    F'0'\nGREPMSK  DC    F'0'\nGREPICM  ICM   R15,B'0000',0(R10)\nGREPTRT  DC    X'000103070F'\n         DC    0F\n*\nSHUTSUB  EQU   *\n         LR    R7,R14\n         MVC   TYPE,MSHUTDOW      MOVE 'SHUTDOW' TO MESSAGE\n*\n         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X\n               S=S,               STREAM                               X\n               HOW=HOW,           End communication in both directions X\n               ERRNO=ERRNO,       (Specify ERRNO field)                X\n               RETCODE=RETCODE,   (Specify RETCODE field)              X\n               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X\n               ERROR=ERROR        Abend if Macro error\n*\n         BR    R7                 --> RETURN TO CALLER\n*---------------------------------------------------------------------*\n*        ABEND PROGRAM AND GET DUMP TO DEBUG!\nERROR    ABEND 1,DUMP\n         CNOP  2,4\n*        USES R6,R7,R8         RETCODE RETURNED IN R8\nRCCHECK  EQU   *\n         LR    R7,R14             COPY TO REAL RETURN REG\n         MVC   MSGRSLT1,MSGSUCC   ...SUCCESS TEXT\n         L     R6,RETCODE\n         LTR   R6,R6\n         BM    NOWAIT\n         CLI   SYNFLAG,0          PLAIN CASE?\n         BE    NOWAIT             --> SKIP IT\n         MVC   KEY+14(8),SUBTASK\n         MVC   KEY+23(8),TYPE\nKEY      WTO   'WAIT: XXXXXXXX XXXXXXXX'\n         WAIT  ECB=ECB\nNOWAIT   EQU   *\n*        LA    R15,ECB\n*        ST    R15,ECB\n         ST    R9,ECB             MAKE THIS THE TOKEN AGAIN\n         L     R6,RETCODE         CHECK FOR SUCCESSFUL CALL\n         CLC   TYPE,=CL8'GETHOSTI'\n         BE    HOSTIDRC           HANDLE PRINTING HOST ID\n         LTR   R8,R6              SAVE A COPY\n*\n         BNL   CONT00\nFAILMSG  EQU   *\n         MVC   MSGRSLT1,MSGFAIL   ...FAIL TEXT\nCONT00   EQU   *\n*\n*---------------------------------------------------------------------*\n*        FORMAT THE RETCODE= -XXXXXXX ERRNO= XXXXXXX MSG RESULTS\n*        ***> R6 = RETCODE VALUE ON ENTRY\n*---------------------------------------------------------------------*\n         MVC   MSGRTCT,MSGRETC    ' RETCODE= '\n         MVI   MSGRTCS,C'+'\n         LTR   R6,R6\n         BNM   NOTM               -->\n         MVI   MSGRTCS,C'-'       MOVE SIGN WHICH IS ALWAYS MINUS\nNOTM     EQU   *\n         MVC   MSGERRT,MSGERRN    ' ERRNO= '\n*\n         CVD   R6,DWORK           CONVERT IT TO DECIMAL\n         UNPK  MSGRTCV,DWORK+4(4) UNPACK IT\n         OI    MSGRTCV+6,X'F0'    CORRECT THE SIGN\n*\nERRNOFMT EQU   *\n         L     R6,ERRNO           GET ERRNO VALUE\n         CVD   R6,DWORK           CONVERT IT TO DECIMAL\n         UNPK  MSGERRV,DWORK+4(4) UNPACK IT\n         OI    MSGERRV+6,X'F0'    CORRECT THE SIGN\n*\n         MVC   MSGRSLT2(35),MSGRTCD\n*\n         MVI   MSGRTHX,X'40'      CLEAR HEX INDICATOR\n*        SR    R6,R6              CLEAR OUT...\n*        ST    R6,RETCODE            RETCODE AND...\n*        ST    R6,ERRNO                 ERRNO\n*\n*\n         CLI   TRACE,0\n         BNE   NOTRACE\n         LR    R14,R7             GIVE HIM RETURN REG\n         B     WTOSUB             --> DO WTO\nNOTRACE  EQU   *\n         BR    R7                 --> RETURN TO CALLER\n*\nHOSTIDRC EQU   *               VALID HOSTID MAY LOOK LIKE NEG. RC\n         C     R6,=F'-1'       ONLY -1 RC INDICATES FAILURE\n         BE    FAILMSG            ...BAD RC, USE STANDARD MSG\n         LR    R8,R6              ...NEXT CALL EXPECTS ADDR IN R8\n         MVC   MSGRSLT1,MSGSUCC   ...SUCCESS TEXT\n         UNPK  HEXRC(9),RETCODE(5)   PLUS ONE FOR FAKE SIGN\n         TR    HEXRC(8),HEXTAB    ...CONVERT UNPK TO PRINTABLE HEX\n         MVI   HEXRC+8,X'40'      ...SPACE OUT FAKED SIGN BYTE\n         MVI   MSGRTHX,C'X'       ...INDICATE INFO IS HEX\n         B     ERRNOFMT\n*\nSYNFLAG  DC    H'0'               DEFAULT TO SYN\nTRACE    DC    H'0'               DEFAULT TO TRACE\nMYEXIT   DC   A(MYEXIT1,SUBTASK)\nMYEXIT1  SAVE (14,12),T,*\n         LR   R2,R15\n         USING MYEXIT1,R2\n         LM   R8,R9,0(R1)            GET TWO TOKENS\n         MVC  EXKEY+14(8),0(R8)      TELL WHO\n         MVC  EXKEY+23(8),TYPE       TELL WHAT\nEXKEY    WTO 'EXIT: XXXXXXXX XXXXXXXX'\n         POST ECB,1\n         RETURN (14,12),T,RC=0\n         DROP  R2\n*---------------------------------------------------------------------*\n* ELEMENTS USED TO RUN PROGRAM                                       *\n*---------------------------------------------------------------------*\nEZASMGW  EZASMI TYPE=GLOBAL,      STORAGE DEFINITION FOR GWA           X\n               STORAGE=CSECT\n*---------------------*\n* INITAPI macro parms *\n*---------------------*\nSUBTASK  DC    CL8'SSLHAND'       SUBTASK PARM VALUE\nIDENT    DC    0CL16' '\n         DC    CL8'TCPV32'        DEFAULT TO FIRST ONE AVAILABLE\n         DC    CL8'SSLHAND'       MY ADDR SPACE NAME OR JOBNAME\nMAXSNO   DC    F'0'               (HIGHEST SOCKET DESCRIPTOR AVAILABLE)\nMAXSOC   DC    AL2(50)            MAXSOC PARM VALUE\nAPITYPE  DC    H'2'               OR PUT A 3 HERE\n*---------------------------------------------------------------------*\n* SOCKET macro parms *\n*--------------------*\nS        DC    H'0'               SOCKET DESCRIPTOR FOR STREAM\n*---------------------*\n* CONNECT MACRO PARMS *\n*---------------------*\n         CNOP  0,4\nNAME     DC    0CL16' '           SOCKET NAME STRUCTURE\n         DC    AL2(2)             FAMILY\nPORT     DC    H'0'\nADDRESS  DC    F'0'\n         DC    XL8'0'             RESERVED\n*SRCADDR  DC    CL15'127.0.0.1'\nSRCLEN   DC    H'11'\nPORTLEN  DC    F'0'\nPORTADDR DC    F'0'\nSRCIPADD DC    F'0'\n         DC    0F\nADDR     DC    AL1(127),AL1(0),AL1(0),AL1(1) Internet Address\nPORTS    DC    H'1414'\nPORTTXT  DC    C'00000000'\nPORTPCK  DC    2F'0'\n*ORTS    DC    H'43'\n*---------------------*\n* WRITE MACRO PARMS   *\n*---------------------*\nNBYTE    DC    F'102'             SIZE OF BUFFER\n*BUF      DC    CL50' THIS IS FROM SSLHAND!' BUFFER FOR WRITE\nBUF      DC    X'16030000610100005D03004B4597B40A'\n         DC    X'5AD2C1C20C3AFAF59B550AE4B84493E5'\n         DC    X'A522FF378D19B4F45F136B0000360039'\n         DC    X'0038003500160013000A00330032002F'\n         DC    X'00070066000500040063006200610015'\n         DC    X'00120009006500640060001400110008'\n         DC    X'000600030100'\n*------------------------*\n* SHUTDOWN MACRO PARMS   *\n*------------------------*\nHOW      DC    F'2'               END COMMUNICATION TO- AND FROM-SOCKET\n*---------------------*\n* READ MACRO PARMS    *\n*---------------------*\nNBYTE2   DC    F'65536'           SIZE OF BUFFER\nBUF2ADDR DC    F'0'               BUFFER2 FOR READ\nBUF2ADDS DC    F'0'               BUFFER2 END ADDRESS\nBUF2LEN  DC    F'65536'\nREC1ADDS DC    F'0'\nREC2ADDS DC    F'0'\nPKGADDS  DC    F'0'\nENTYADDS DC    F'0'\nCERADDS  DC    F'0'             WHOLE CERTIFICATE END ADDRESS\nTBSADDS  DC    F'0'               TBS CERTIFICATE END ADDRESS\nLISTADDS DC    F'0'\nCERTADDR DC    F'0'             CERTIFICATE START ADDR\nCERTLEN  DC    F'0'             CERTIFICATE LENGTH\n*---------------*\n*---------------*\nPRINT    DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=125,MACRF=(W),RECFM=VBA,   +\n               BLKSIZE=1632\nCERTINFO DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=(PM),RECFM=FB, +\n               BLKSIZE=3990\nMYREC    DC    CL133' '\nMINITAPI DC    CL8'INITAPI'\nMSOCKET  DC    CL8'SOCKET'\nMCONNECT DC    CL8'CONNECT'\nMPTON    DC    CL8'PTON'\nMGETPEER DC    CL8'GETPEERN'\nMREAD    DC    CL8'READ'\nMWRITE   DC    CL8'WRITE'\nMSHUTDOW DC    CL8'SHUTDOWN'\nMTERMAPI DC    CL8'TERMAPI'\nMSGSTART DC    CL8' STARTED'\nMSGEND   DC    CL8' ENDED  '\nMSGSUCC  DC    CL10' SUCCESS  '     Command results...\nMSGFAIL  DC    CL10' FAIL: ( '                    ...\nMSGRETC  DC    CL10' RETCODE= '                    ...\nMSGERRN  DC    CL10' ERRNO=   '                    ...\nMSGBUFF  DC    CL10' BUFFER:  '                    ...\nBLANK35  DC    CL35' '\nVERBAL   DC    C' '               V FOR VERBAL\nCERTVER  DC    C' '\nCERTVETR DC    C'123'\n*---------------------------------------------------------------------*\n* MESSAGE AREA *\n*--------------*\nMSG      DC    0F'0'              MESSAGE AREA\n         DC    AL2(MSGE-MSGNUM)   LENGTH OF MESSAGE\nMSGNUM   DC    CL10'SSLHAND:'     'SSLHAND: '\nMSGCMD   DC    CL8' '             COMMAND ISSUED\nMSGRSLT1 DC    CL10' '            COMMAND RESULTS (SUCC, PASS, FAIL)\nMSGRSLT2 DC    CL35' '            RETURNED VALUES\nMSGE     EQU   *                  End of message\n*---------------------------------------------------------------------*\n* MESSAGE RESULTS AREAS (fill in and move to MSGRSLT2) *\n*------------------------------------------------------*\n*\nMSGRTCD  DC    0CL35' '           GENERAL RETURNED VALUE\nMSGRTCT  DC    CL9' RETCODE='     ' RETCODE= '\nMSGRTHX  DC    CL1' '             'X' X FOR GETHOSTID\nMSGRTCS  DC    CL1' '             '-' (NEGATIVE SIGN)\nHEXRC    EQU   MSGRTCS            HEX RC WILL START AT SIGN LOCATION\nMSGRTCV  DC    CL7' '             RETURNED VALUE (RETCODE)\nMSGERRT  DC    CL10' ERRNO='      ' ERRNO=   '\nMSGERRV  DC    CL7' '             RETURNED VALUE (ERRNO)\nDWORK    DC    D'0'               WORK AREA\nHEXTAB   EQU   *-240              TAB TO CONVERT TO PRINTABLE HEX\n*                                 FIRST 240 BYTES NOT REFERENCED\n         DC    CL16'0123456789ABCDEF'\nOBJTAB   DC    X'03550406',X'02',C'C='\n         DC    X'03550408',X'03',C'ST='\n         DC    X'03550407',X'02',C'L='\n         DC    X'0355040A',X'02',C'O='\n         DC    X'0355040B',X'03',C'OU='\n         DC    X'0355040C',X'06',C'TITLE='\n         DC    X'03550403',X'03',C'CN='\n         DC    X'092A864886F70D010901',X'02',C'E='\n         DC    X'072A8648CE380401',X'03',C'DSA'\n         DC    X'072A8648CE380403',X'07',C'sha1DSA'\n         DC    X'092A864886F70D010101',X'03',C'RSA'\n         DC    X'092A864886F70D010102',X'06',C'md2RSA'\n         DC    X'092A864886F70D010103',X'06',C'md4RSA'\n         DC    X'092A864886F70D010104',X'06',C'md5RSA'\n         DC    X'092A864886F70D010105',X'07',C'sha1RSA'\n         DC    X'00'\nPARMADDR DC    A(0)               PARM ADDRESS SAVE AREA\nPARMLEN  DC    H'0'               PARM LENGTH\n         LTORG\n*---------------------------------------------------------------------*\n* REG/SAVEAREA *\n*--------------*\nSOCSAVE  DC    9D'0'              SAVE AREA\n*---------------------------------------------------------------------*\n         DROP  R3,R4\n         CNOP  0,8\nMYCB     EQU   *                  MY CONTROL BLOCK\nREQAREA  EQU   *\nECB      DC    A(ECB)             SELF POINTER\n         DC    CL100'WORK AREA'\nMYTIE    EZASMI TYPE=TASK,STORAGE=CSECT     TIE\nTYPE     DC    CL8'TYPE'\nERRNO    DC    F'0'\nRETCODE  DC    F'0'\nMYNEXT   DC    A(MYCB)            NEXT IN CHAIN FOR MULTIPLES\n         CNOP  0,8\nMYLEN    EQU   *-MYCB\nMYCB2    EQU   *\n         ORG   *+MYLEN\n         CNOP  0,8\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DC    CL27'Copyright sslhand@gmail.com'\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT825/FILE825.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT825", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}