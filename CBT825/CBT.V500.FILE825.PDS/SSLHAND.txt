SSLHAND  CSECT
SSLHAND  AMODE 24
SSLHAND  RMODE 24
         PRINT GEN
***********************************************************************
*                                                                     *
*   MODULE NAME:  SSLHAND - Simple z/OS SSL Handshake                 *
*                                                                     *
*   REFERENCE:http://luca.ntop.org/Teaching/Appunti/asn1.html         *
*             http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt*
*             http://www.jensign.com/JavaScience/dotnet/JKeyNet/      *
*                    index.html                                       *
*             http://www.ietf.org/rfc/rfc2246.txt                     *
*             http://www.ietf.org/rfc/rfc2459.txt                     *
*   LANGUAGE:  ASSEMBLER                                              *
*                                                                     *
*   ATTRIBUTES: NON-REUSEABLE                                         *
*                                                                     *
*   REGISTER USAGE:                                                   *
*        R1  =                                                        *
*        R2  =                                                        *
*        R3  = BASE REG 1                                             *
*        R4  = BASE REG 2 (UNUSED)                                    *
*        R5  = FUTURE BASE?                                           *
*        R6  = TEMP                                                   *
*        R7  = RETURN REG                                             *
*        R8  =                                                        *
*        R9  = A(WORK AREA)                                           *
*        R10 =                                                        *
*        R11 =                                                        *
*        R12 =                                                        *
*        R13 = SAVE AREA                                              *
*        R14 =                                                        *
*        R15 =                                                        *
*                                                                     *
*   INPUT: IP ADDRESS IN DOT FORM AND PORT ADDRESS IN BRACKET         *
*          e.g 123.234.123.234(1414)                                  *
*   OUTPUT: WTO RESULTS THE SOCKET API RESULT                         *
*           SYSUT1 DD CONTAINS THE SSL PACKET                         *
*           SYSPRINT DD CONTAINS THE DECODED OUTPUT                   *
***********************************************************************
         MACRO
&NAME    WRTMSG &MSGTXT
&NAME    MVI   MYREC,X'40'
         MVC   MYREC+1(L'MYREC-1),MYREC    CLEAR THE REC
         LCLA  &MSGLEN
&MSGLEN  SETA  DCLEN('&MSGTXT')-2
         MVC   MYREC(&MSGLEN),=C&MSGTXT
         MEND
         MACRO
&NAME    MVPTR &INCRE
         A     R10,=F'&INCRE'
         C     R10,PKGADDS
         BH    BADCERT
         MEND
         GBLB  &TRACE  ASSEMBLER VARIABLE TO CONTROL TRACE GENERATION
&TRACE   SETB  1       1=TRACE ON  0=TRACE OFF
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
*---------------------------------------------------------------------*
* START OF EXECUTABLE CODE                                            *
*---------------------------------------------------------------------*
         USING *,R3,R4            TELL ASSEMBLER OF OTHERS
         SAVE (14,12),T,*
         LR    R3,R15             COPY EP REG TO FIRST BASE
         LA    R5,2048            GET R5 HALFWAY THERE
         LA    R5,2048(R5)        GET R5 THERE
         LA    R4,0(R5,R3)        GET R4 THERE
         LA    R12,12             JUST FOR FUN!
         ST    R1,PARMADDR        SAVE ADDRESS OF PARAMETER LIST
         L     R1,0(R1)           GET POINTER
         MVC   PARMLEN,0(R1)      GET LENGTH
         LA    R1,2(R1)
         ST    R1,PARMADDR
*        STC   R1,TRACE           USE IT AS FLAG
         L     R7,=A(SOCSAVE)     GET NEW SAVE AREA
         ST    R7,8(R13)          SAVE ADDRESS OF NEW SAVE AREA
         ST    R13,4(R7)          COMPLETE SAVE AREA CHAIN
         LR    R13,R7             NOW SWAP THEM
         L     R9,=A(MYCB)        POINT TO THE CONTROL BLOCK
         USING MYCB,R9            TELL ASSEMBLER
         OPEN  (CERTINFO,(OUTPUT))
         LTR   R15,R15
         BNZ   CONT1
*---------------------------------------------------------------------*
*   BUILD MESSAGE FOR CONSOLE
*---------------------------------------------------------------------*
*                                 INITIALIZE MESSAGE TEXT FIELDS
LOOP     EQU   *
         MVC   MSGNUM(8),SUBTASK  WHO I AM
         MVC   TYPE,MSGSTART      MOVE 'STARTED' TO MESSAGE
*
         MVC   MSGRSLT1,MSGSUCC   ...SUCCESSFUL TEXT
         MVC   MSGRSLT2,BLANK35
*
         STM   R14,R12,12(R13)    JUST FOR DEBUGGING
         BAL   R14,WTOSUB         --> DO STARTING WTO
***********************************************************************
*                                                                     *
*        Issue CHECK THE PARAMETER                                    *
*                                                                     *
***********************************************************************
         LH    R1,PARMLEN
         CHI   R1,X'0017'
         BNH   PARMC0
PARMBAD  MVC   MSGRSLT1,MSGFAIL   ...FAILURE    TEXT
         MVC   MSGRSLT2,=CL35'PARAMERTER CHECK  )'
         BAL   R14,WTOSUB         --> DO STARTING WTO
         B     CONT1
PARMC0   L     R15,PARMADDR
         LA    R0,229             EBCDIC V
         XR    R14,R14
         LR    R14,R15
         AH    R14,PARMLEN
         SRST  R14,R15            SEARCH E5 IN PARMADDR
         BL    PARMC0A
         B     PARMC1             NOT FOUND NO VERBAL
PARMC0A  MVI   VERBAL,X'E5'       SET VERBAL
PARMC1   L     R15,PARMADDR
         LA    R0,77              X'4D' CHAR(()
         XR    R14,R14
         LR    R14,R15
         AH    R14,PARMLEN
         SRST  R14,R15            SEARCH 4D IN PARMADDR
         BL    PARMC2
         B     PARMBAD
PARMOC   OC    PORTTXT(0),0(R15)
PARMCLC  CLC   PORTTXT(0),0(R15)
PARMPACK PACK  PORTPCK(8),0(0,R15)
PARMC2   ST    R15,SRCIPADD       SAVE THE NEXT ADDR.
         LR    R1,R14             SAVE THE NEXT ADDR.
         SR    R14,R15            R14 = LENGTH OF IP ADDR
         STH   R14,SRCLEN
         CHI   R14,X'000F'
         BH    PARMBAD
         XR    R15,R15
         L     R15,PARMADDR
         AR    R15,R14
         LA    R15,1(R15)
         L     R14,PARMADDR
         AH    R14,PARMLEN
         LA    R0,93              x'5D' CHAR())
         SRST  R14,R15            search 5D in parmaddr
         BL    PARMC3
         B     PARMBAD
PARMC3   ST    R15,PORTADDR
         SR    R14,R15
         ST    R14,PORTLEN
         CHI   R14,X'0005'
         BH    PARMBAD
         S     R14,=F'1'
         EX    R14,PARMOC
         EX    R14,PARMCLC
         BNE   PARMBAD            NOT NUMERIC
         EX    R14,PARMPACK
         CVB   R14,PORTPCK
         C     R14,=A(65535)
         BH    PARMBAD
         STH   R14,PORTS
*
***********************************************************************
*                                                                     *
*        Issue INITAPI to connect to interface                        *
*                                                                     *
***********************************************************************
         MVC   TYPE,MINITAPI      MOVE 'INITAPI' TO MESSAGE
*
         POST  ECB,1              FOLLOWING IS SYNC ONLY
         MVI   SYNFLAG,0          MOVE A 1 FOR ASYNCH
         EZASMI TYPE=INITAPI,     ISSUE INITAPI MACRO                  X
               SUBTASK=SUBTASK,   SPECIFY SUBTASK IDENTIFIER           X
               MAXSOC=MAXSOC,     SPECIFY MAXIMUM NUMBER OF SOCKETS    X
               MAXSNO=MAXSNO,     (HIGHEST SOCKET NUMBER ASSIGNED)     X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               APITYPE=APITYPE,   (SPECIFY APITYPE FIELD)              X
               ERROR=ERROR        Abend if error on macro
*              IDENT=IDENT,       TCP ADDR SPACE AND MY ADDR SPACE
*
*              ASYNC=('ECB'),     (SPECIFY TO USE ECBS)
*              ASYNC=('EXIT',MYEXIT)  (SPECIFY TO USE EXITS)
         BAL   R14,RCCHECK        --> CHECK RESULTS
         LTR   R8,R8              RECHECK IT
         BM    CONT1              --> WE ARE DONE
***********************************************************************
*                                                                     *
*        Issue SOCKET Macro to obtain a socket descriptor             *
*                  *** INET and STREAM ***                            *
*                                                                     *
***********************************************************************
         MVC   TYPE,MSOCKET       MOVE 'SOCKET' TO MESSAGE
*
         EZASMI TYPE=SOCKET,      Issue SOCKET Macro                   X
               AF='INET',         INET or IUCV                         X
               SOCTYPE='STREAM',  STREAM(TCP) DATAGRAM(UDP) or RAW     X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R14,RCCHECK        --> CHECK RESULTS
         STH   R8,S               SAVE RETCODE (=SOCKET DESCRIPTOR)
         LTR   R8,R8              CHECK IT
         BM    CONT               --> WE ARE DONE!
         MVC   TYPE,MPTON         MOVE 'PTON'   TO MESSAGE
         L     R8,SRCIPADD
         EZASMI TYPE=PTON,                                             X
               AF='INET',                                              X
               SRCADDR=(R8),                                           X
               SRCLEN=SRCLEN,                                          X
               DSTADDR=ADDR,                                           X
               ERRNO=ERRNO,                                            X
               RETCODE=RETCODE
         BAL   R14,RCCHECK        --> CHECK RESULTS
         LTR   R8,R8              CHECK IT
         BM    CONT               --> WE ARE DONE!
*        DC    X'0000'
***********************************************************************
*                                                                     *
*        ISSUE GETHOSTID CALL                                         *
*                                                                     *
***********************************************************************
*        MVC    TYPE,=CL8'GETHOSTI'
*        POST   ECB,1             FOLLOWING IS SYNC ONLY
*        EZASMI TYPE=GETHOSTID,RETCODE=RETCODE,ERRNO=ERRNO
*        BAL   R14,RCCHECK        --> CHECK RESULTS
*        ST    R8,ADDR
***********************************************************************
*                                                                     *
*        Issue CONNECT Socket                                         *
*                                                                     *
***********************************************************************
         MVC   TYPE,MCONNECT      MOVE 'CONNECT' TO MESSAGE
         MVC   PORT(2),PORTS      Load STREAM port #
*
*
         MVC   ADDRESS(4),ADDR    LOAD OUR INTERNET ADDRESS
*
         EZASMI TYPE=CONNECT,     Issue Macro                          X
               S=S,               STREAM                               X
               NAME=NAME,         SOCKET NAME STRUCTURE                X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R14,RCCHECK        --> CHECK RC
         LTR   R8,R8              RECHECK IT
         BM    CONT               --> WE ARE DONE
***********************************************************************
*                                                                     *
*        Issue GETPEERNAME                                            *
*                                                                     *
***********************************************************************
         MVC   TYPE,MGETPEER      MOVE 'GTPEERN' TO MESSAGE
*
         EZASMI TYPE=GETPEERNAME, Issue Macro                          X
               S=S,               STREAM                               X
               NAME=NAME,         (SOCKET NAME STRUCTURE)              X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R14,RCCHECK        --> CHECK RC
***********************************************************************
*                                                                     *
*        Issue WRITE - Write data from buffer                         *
*                                                                     *
***********************************************************************
         MVC   TYPE,MWRITE        MOVE 'WRITE ' TO MESSAGE
*
         EZASMI TYPE=WRITE,       Issue Macro                          X
               S=S,               STREAM SOCKET                        X
               NBYTE=NBYTE,       SIZE OF BUFFER                       X
               BUF=BUF,           BUFFER                               X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R14,RCCHECK        --> CHECK RC
         L     R0,BUF2LEN
         GETMAIN R,LV=(0)
         ST    R1,BUF2ADDR        kept the start addr
         WRTMSG 'SSLHAND V0.1:'   WRITE THE GREETING MESSAGE
         L     R2,PARMADDR
         XR    R1,R1
         LH    R1,PARMLEN
         S     R1,=F'1'
         EX    R1,FORMMVC2
         PUT   CERTINFO,MYREC
         CLI   VERBAL,X'E5'       VERBAL SET
         BNE   DOREAD
         OPEN  (PRINT,(OUTPUT))
         B     DOREAD
***********************************************************************
*                                                                     *
*        Issue SHUTDOWN - HOW = 1 (end communication TO socket)       *
*                                                                     *
***********************************************************************
DOSHUTDO EQU   *
         MVC   HOW(4),=F'1'
*
         BAL   R14,SHUTSUB        --> SHUTDOWN
*
         BAL   R14,RCCHECK        --> CHECK RC
***********************************************************************
*                                                                     *
*        Issue READ - Read data and store in buffer                   *
*                                                                     *
***********************************************************************
DOREAD   MVC   TYPE,MREAD         MOVE 'READ  ' TO MESSAGE
*
         L     R11,BUF2LEN
         L     R10,BUF2ADDR
         AR    R11,R10
         S     R11,=F'1'
         ST    R11,BUF2ADDS       KEPT THE END ADDR
         MVC   NBYTE2,=F'5'       GET THE FIRST 5 BYTES
         EZASMI TYPE=READ,        Issue Macro                          X
               S=S,               STREAM SOCKET                        X
               NBYTE=NBYTE2,      SIZE OF BUFFER                       X
               BUF=(R10),         (BUFFER)                             X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BAL   R14,RCCHECK        --> CHECK RC
*        MVC   MSGRSLT1,MSGBUFF   TITLE
*        MVC   MSGRSLT2,0(R10)    MOVE THE DATA
*        BAL   R14,WTOSUB         --> PRINT IT
         CLC   RETCODE,=F'5'
         BNE   NOSSL              BYE
         CLC   0(3,R10),=X'160300' CHECK IF SSL V3.0 HANDSHAKE
         BE    SSLOK              BYE
NOSSL    MVC   MSGRSLT1,MSGFAIL   ...FAILURE    TEXT
         MVC   MSGRSLT2,=CL35'SSL NOT DETECTED  )'
         BAL   R14,WTOSUB         --> DO STARTING WTO
         B     CONT1
SSLOK    MVC   NBYTE2+2(2),3(R10) move the message length
         CLC   NBYTE2,BUF2LEN
         BH    CONT
DOREAD2  A     R10,RETCODE
         CLR   R10,R11
         BH    CONT               BYE
         EZASMI TYPE=READ,        Issue Macro                          X
               S=S,               STREAM SOCKET                        X
               NBYTE=NBYTE2,      SIZE OF BUFFER                       X
               BUF=(R10),         (BUFFER)                             X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
         BAL   R14,RCCHECK        --> CHECK RC
*        MVC   MSGRSLT1,MSGBUFF   TITLE
*        MVC   MSGRSLT2,0(R10)    MOVE THE DATA
*        BAL   R14,WTOSUB         --> PRINT IT
         L     R8,NBYTE2
         S     R8,RETCODE         DECREMENT THE EXPECTED MSG LENGTH
         ST    R8,NBYTE2
         BZ    DONEREAD
         B     DOREAD2
DONEREAD L     R10,BUF2ADDR
         CLI   VERBAL,X'E5'       VERBAL SET
         BNE   NOSNAP
         SNAP  DCB=PRINT,STORAGE=((R10),(R11))
NOSNAP   EQU   *
***********************************************************************
*                                                                     *
*        Format the SSL message                                       *
*                                                                     *
***********************************************************************
         BAL   R14,FORMCERT
         LTR   R15,R15
         BNZ   DOREAD
***********************************************************************
*                                                                     *
*        Issue SHUTDOWN - HOW = 0 (end communication FROM socket)     *
*                                                                     *
***********************************************************************
CONT     MVC   HOW(4),=F'0'
*
         BAL   R14,SHUTSUB        --> SHUTDOWN
*
         BAL   R14,RCCHECK        --> CHECK RC
***********************************************************************
*                                                                     *
*        Terminate Connection to API                                  *
*                                                                     *
***********************************************************************
         MVC   TYPE,MTERMAPI      MOVE 'TERMAPI' TO MESSAGE
*
         POST  ECB,1              FOLLOWING IS SYNC ONLY
         EZASMI TYPE=TERMAPI      Issue EZASMI Macro for Termapi
*
         BAL   R14,RCCHECK        --> CHECK RC
*---------------------------------------------------------------------*
*        Issue console message for task termination
*---------------------------------------------------------------------*
         MVC   TYPE,MSGEND        Move 'ENDED' to message
*
         MVC   MSGRSLT1,MSGSUCC   ...SUCCESSFUL text
         MVC   MSGRSLT2,BLANK35
         BAL   R14,WTOSUB         --> DO WTO
         LA    R14,1              CONSTANT
         AH    R14,APITYPE        ADD
         STH   R14,APITYPE        STORE
         CH    R14,=H'3'          COMPARE
*        BE    LOOP               --> LETS DO IT AGAIN!
CONT1    EQU   *
*
*---------------------------------------------------------------------*
*        Return to Caller
*---------------------------------------------------------------------*
         L     R13,4(R13)
         RETURN (14,12),T,RC=0
FORMCERT EQU   *
         LR    R7,R14             SAVE RETURN REG
*
* REGISTER USAGE: R10 CURRENT BUFFER POINTER
*                 R11 END OF VALID BUFFER ADDRESS
*
         L     R10,BUF2ADDR
         L     R11,BUF2ADDS
         ST    R11,PKGADDS
*
*        x'16'   --> handshake
*        x'0300' --> v3.0
*        x'LLLL' --> Length
*
         CLC   0(3,R10),=X'160300'  CHECK IF HANDSHAKE AND SSL V3.0
         BNE   BADCERT
         XR    R15,R15
         ICM   R15,B'0011',3(R10)
         MVPTR 5                    ADD 5 to R10
         AR    R15,R10
         ST    R15,PKGADDS          KEEP THE PACKET END ADDR
CMDCHK   EQU   *
         C     R10,PKGADDS
         BNL   FORMMORE             Read More
         CLI   0(R10),X'0E'         Server Hello Done
         BE    GOODCERT
         CLI   0(R10),X'02'         SERVER HELLO
         BE    SKIPLEN2
         CLI   0(R10),X'0C'         Key Exchange
         BE    SKIPLEN1
CMDCHK1  CLI   0(R10),X'0B'         Certificate now
         BNE   CMDCHK2
         ICM   R2,B'0111',1(R10)
         MVPTR 4                    SKIP THE CERTICATE COMMAND
         AR    R2,R10
         ST    R2,LISTADDS
         ICM   R2,B'0111',0(R10)
         MVPTR 3                    SKIP THE LENGTH
         AR    R2,R10
         C     R2,LISTADDS          DOUBLE CHECK THE LENGTH
         BNE   BADCERT
LOOPCERT ICM   R2,B'0111',0(R10)    GET THE LENGTH OF THIS ENTRY
         MVPTR 3
         ST    R2,CERTLEN           KEEP THE CERTIFICATE LENGTH
         AR    R2,R10
         ST    R10,CERTADDR         KEEP THE CERTIFICATE ADDRESS
         ST    R2,ENTYADDS          KEEP THE END ADDR OF THIS ENTRY
         CLI   0(R10),X'30'         START OF ASN SEQUENCE CERTIFICATE
         BNE   BADCERT
         BAL   R14,GREPLEN
         LTR   R15,R15
         BZ    BADCERT
         AR    R15,R10
         ST    R15,CERADDS          KEPT THE END ADDR
         CLI   0(R10),X'30'         START OF ASN SEQUENCE TBS
         BNE   BADCERT
         BAL   R14,GREPLEN
         LTR   R15,R15
         BZ    BADCERT
         AR    R15,R10
         ST    R15,TBSADDS          KEPT THE TBS END ADDR
         WRTMSG ' Version: 1'
         CLC   0(2,R10),=X'A003'    CHECK FOR TBS VERSION
         BNE   NOVER
         MVPTR 2
         CLI   0(R10),X'02'         CHECK ASN INTEGER TAG
         BNE   BADCERT
         BAL   R14,GREPLEN
         MVC   CERTVER,0(R10)       GET THE CERT VER
         TR    CERTVER,CERTVETR
         MVC   MYREC+10(1),CERTVER
         AR    R10,R15
NOVER    PUT   CERTINFO,MYREC
         CLI   0(R10),X'02'         CHECK ASN INTEGER TAG
         BNE   BADCERT
         WRTMSG ' Serial Number:'
         PUT   CERTINFO,MYREC
         BAL   R14,GREPLEN
         LTR   R15,R15
         BZ    NOSERIAL
         BAL   R14,HEXPRT
         CLI   0(R10),X'30'         CHECK ASN SEQUENCE TAG
         BNE   BADCERT
         BAL   R14,GREPLEN
         AR    R15,R10
         ST    R15,REC1ADDS
         CLI   0(R10),X'06'         CHECK ASN OBJECT IDENTIFIER
         BNE   BADCERT
         BAL   R14,OBJFIND
         LTR   R8,R1
         BZ    NOOBJ
         WRTMSG ' Signature Algorithm:'
         LA    R2,MYREC+22
         XR    R1,R1
         ICM   R1,B'0001',0(R8)
         S     R1,=F'1'
         EX    R1,FORMMVC
         PUT   CERTINFO,MYREC
         B     FORMISSU
NOOBJ    EQU   *
         LR    R8,R15
         WRTMSG ' Signature Algorithm:'
         PUT   CERTINFO,MYREC
         LR    R15,R8
         BAL   R14,HEXPRT           R15 contains the length
FORMISSU L     R10,REC1ADDS         SKIP to NEXT FIELD
         BAL   R14,GREPLEN
         LTR   R15,R15
         BZ    BADCERT
         AR    R15,R10
         ST    R15,REC1ADDS
         WRTMSG ' Issuer:'          Processing Issuer Section
         PUT   CERTINFO,MYREC
FORMISSL BAL   R14,GREPLEN
         AR    R15,R10
         ST    R15,REC2ADDS
         BAL   R14,OBJPRT
         L     R10,REC2ADDS
         CLM   R10,B'1111',REC1ADDS
         BL    FORMISSL
         BAL   R14,GREPLEN          GET the validity RECLEN
         AR    R15,R10
         ST    R15,REC1ADDS
         WRTMSG ' Validity:'
         PUT   CERTINFO,MYREC
         BAL   R14,GREPLEN          GET the NOT BEFORE TIME LENGTH
         LTR   R8,R15
         WRTMSG '          NOT BEFORE='
         LA    R2,MYREC+21
         S     R8,=F'1'
         EX    R8,FORMMVC1
         LA    R8,1(R8)
         XLATE (R2),(R8),TO=E
         PUT   CERTINFO,MYREC
         AR    R10,R8
         BAL   R14,GREPLEN          GET the NOT AFTER TIME LENGTH
         LTR   R8,R15
         WRTMSG '           NOT AFTER='
         LA    R2,MYREC+21
         S     R8,=F'1'
         EX    R8,FORMMVC1
         LA    R8,1(R8)
         XLATE (R2),(R8),TO=E
         PUT   CERTINFO,MYREC
         AR    R10,R8
         BAL   R14,GREPLEN          Processing Subject Section
         LTR   R15,R15
         BZ    BADCERT
         AR    R15,R10
         ST    R15,REC1ADDS
         WRTMSG ' Subject:'
         PUT   CERTINFO,MYREC
FORMSUBL BAL   R14,GREPLEN
         AR    R15,R10
         ST    R15,REC2ADDS
         BAL   R14,OBJPRT
         L     R10,REC2ADDS
         CLM   R10,B'1111',REC1ADDS
         BL    FORMSUBL
FORMPUBK BAL   R14,GREPLEN        GREP THE LENGTH of SubjectKey length
         BAL   R14,GREPLEN        GREP THE Length of algor
         AR    R15,R10
         ST    R15,REC1ADDS
         BAL   R14,OBJFIND
         LTR   R8,R1
         BZ    NOOBJ1
         WRTMSG ' Subject Public Key Algorithm:'
         LA    R2,MYREC+31
         XR    R1,R1
         ICM   R1,B'0001',0(R8)
         S     R1,=F'1'
         EX    R1,FORMMVC
         PUT   CERTINFO,MYREC
         B     FORMPUBH
NOOBJ1   EQU   *
         LR    R8,R15
         WRTMSG ' Subject Public Key Algorithm:'
         PUT   CERTINFO,MYREC
         LR    R15,R8
         BAL   R14,HEXPRT           R15 contains the length
FORMPUBH EQU   *
         WRTMSG ' Subject Public Key:'
         PUT   CERTINFO,MYREC
         L     R10,REC1ADDS         Skip to the public key field
         BAL   R14,GREPLEN
         BAL   R14,HEXPRT
*
*        THEN SKIP THE EXTENSION FIELDS
*
*        BAL   R14,GREPLEN
*        AR    R10,R15
         L     R10,TBSADDS
*
*        PRINT the signature
*
         BAL   R14,GREPLEN        GREP THE Length of signature algo
         AR    R15,R10
         ST    R15,REC1ADDS
         BAL   R14,OBJFIND
         LTR   R8,R1
         BZ    NOOBJ2
         WRTMSG ' Signature Algorithm:'
         LA    R2,MYREC+22
         XR    R1,R1
         ICM   R1,B'0001',0(R8)
         S     R1,=F'1'
         EX    R1,FORMMVC
         PUT   CERTINFO,MYREC
         B     FORMSIGH
NOOBJ2   EQU   *
         LR    R8,R15
         WRTMSG ' Signature Algorithm:'
         PUT   CERTINFO,MYREC
         LR    R15,R8
         BAL   R14,HEXPRT           R15 contains the length
FORMSIGH EQU   *
         WRTMSG ' Signature:'
         PUT   CERTINFO,MYREC
         L     R10,REC1ADDS         Skip to the public key field
         BAL   R14,GREPLEN
         BAL   R14,HEXPRT
*
* Print the certificate
*
         BAL   R14,GENCERT
         L     R10,CERADDS        SKIP TO END OF CERT
         CLM   R10,B'1111',LISTADDS
         BL    LOOPCERT
         B     CMDCHK
CMDCHK2  CLI   0(R10),X'0D'                       Certificate Request
         BNE   SKIPLEN
      WRTMSG  'Certificate request received. Recoginised certificates:'
         PUT   CERTINFO,MYREC
         ICM   R2,B'0111',1(R10)
         MVPTR 4
         XR    R2,R2
         ICM   R2,B'0001',0(R10)                  GREP the algor field
         LA    R10,1(R10) SKIP myself
         AR    R10,R2                             SKIP the field length
*        BAL   R14,GREPLEN                        GREP THE algor field
*        AR    R10,R15                            SKIP the algor field
         ICM   R2,B'0011',0(R10)                  GREP the field length
         AR    R2,R10
         ST    R2,LISTADDS                        KEEP the list addr
         MVPTR 2
LOOPCA   XR    R2,R2
         ICM   R2,B'0011',0(R10)                  GREP the record leng
         AR    R2,R10
         ST    R2,REC1ADDS                        KEEP the list addr
         MVPTR 2
         BAL   R14,GREPLEN
LOOPDN   BAL   R14,GREPLEN
         AR    R15,R10
         ST    R15,REC2ADDS
         BAL   R14,OBJPRT
         L     R10,REC2ADDS
         CLM   R10,B'1111',REC1ADDS
         BL    LOOPDN
         WRTMSG '=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'
         PUT   CERTINFO,MYREC
         CLM   R10,B'1111',LISTADDS
         BL    LOOPCA
         B     GOODCERT
SKIPLEN  ICM   R2,B'0111',1(R10)
         MVPTR 4
         AR    R10,R2
*        C     R10,PKGADDS
         B     CMDCHK
SKIPLEN1 WRTMSG 'Server Key Exchange received'
         PUT   CERTINFO,MYREC
         B     SKIPLEN
SKIPLEN2 WRTMSG 'Server Hello received'
         PUT   CERTINFO,MYREC
         B     SKIPLEN
NOSERIAL EQU   *
GOODCERT WRTMSG 'Server hello done received'
         PUT   CERTINFO,MYREC
         XR    R15,R15            SET NO MORE READ REQUIRED
         B     FORMEND
FORMMORE EQU   *
         LA    R15,1
         B     FORMEND
BADCERT  WRTMSG 'BAD SSL'
         PUT   CERTINFO,MYREC
FORMEND  BR    R7
FORMMVC  MVC   0(0,R2),1(R8)
FORMMVC1 MVC   0(0,R2),0(R10)
FORMMVC2 MVC   MYREC+14(0),0(R2)
*
WTOSUB   EQU   *
         LR    R7,R14             SAVE RETURN REG
         CLI   VERBAL,X'E5'
         BE    WTOSUBC
         CLC   MSGRSLT1,MSGFAIL
         BE    WTOSUBC
         B     WTOSUBE
WTOSUBC  EQU   *
         MVC   MSGCMD,TYPE        COPY COMMAND
*        WTO   TEXT=MSG           UNCOMMENT TO RESUME DEBUG
         WRTMSG ' '
         MVC   MYREC(64),MSG+2
         PUT   CERTINFO,MYREC
WTOSUBE  BR    R7                 --> RETURN
*
* GENCERT: INPUT      : NOTHING
*
*         OUTPUT      : NOTHING
*                       PRINT BASE64 CERTIFICATE TO CERTINFO
*
GENCERT  EQU   *
         ST    R14,GENR14
         L     R2,CERTLEN         R2 -> CERTLEN
         L     R8,CERTADDR        R8 -> CERT CONTENT
         LA    R6,16              COUNT FOR EACH LINE
         WRTMSG '-----BEGIN CERTIFICATE-----'
         PUT   CERTINFO,MYREC
         WRTMSG ' '
         LA    R15,MYREC
GENCLOOP CL    R2,=F'2'
         BE    GENCEND2
         CL    R2,=F'1'
         BE    GENCEND1
         BL    GENCEND0
         XR    R1,R1
         ICM   R1,B'1110',0(R8)   GET THREE BYTES
         STCM  R1,B'0010',3(R15)  GET  THE FORTH BYTE
         NI    3(R15),X'3F'
         SRL   R1,2               GEN  THE FRIST BYTE
         STCM  R1,B'1000',0(R15)
         NI    0(R15),X'3F'
         SRL   R1,2               GEN  THE SECOND BYTE
         STCM  R1,B'0100',1(R15)
         NI    1(R15),X'3F'
         SRL   R1,2               GEN  THE THIRD BYTE
         STCM  R1,B'0010',2(R15)
         NI    2(R15),X'3F'
*        SRL   R1,2               GEN  THE FORTH BYTE
         LA    R15,4(R15)
         LA    R8,3(R8)
         S     R2,=F'3'
*        S     R6,=F'1'
*        BNZ   GENCLOOP
         BCT   R6,GENCLOOP
         TR    MYREC(64),GENTAB
         PUT   CERTINFO,MYREC
         WRTMSG ' '
         LA    R15,MYREC
         LA    R6,16              COUNT FOR EACH LINE
         B     GENCLOOP
GENCEND2 EQU   *
         XR    R1,R1
         ICM   R1,B'1100',0(R8)   GET THE LAST TWO BYTES
         SRL   R1,2               GEN  THE FRIST BYTE
         STCM  R1,B'1000',0(R15)
         NI    0(R15),X'3F'
         SRL   R1,2               GEN  THE SECOND BYTE
         STCM  R1,B'0100',1(R15)
         NI    1(R15),X'3F'
         SRL   R1,2               GEN  THE THIRD BYTE
         STCM  R1,B'0010',2(R15)
         NI    2(R15),X'3F'
         MVI   3(R15),X'41'       will be translated into '='
         B     GENCEND0
GENCEND1 EQU   *
         XR    R1,R1
         ICM   R1,B'1000',0(R8)   GET THE LAST BYTE
         SRL   R1,2               GEN  THE FRIST BYTE
         STCM  R1,B'1000',0(R15)
         NI    0(R15),X'3F'
         SRL   R1,2               GEN  THE SECOND BYTE
         STCM  R1,B'0100',1(R15)
         NI    1(R15),X'3F'
         MVI   2(R15),X'41'       will be translated into '='
         MVI   3(R15),X'41'       will be translated into '='
         B     GENCEND0
* NOTHING REMAIN
* SPOOL OUT THE LAST LINE
GENCEND0 EQU   *
         TR    MYREC(64),GENTAB
         CLI   MYREC,X'40'
         BE    GENCENDE           skip blank line
         PUT   CERTINFO,MYREC
GENCENDE WRTMSG '-----END CERTIFICATE-----'
         PUT   CERTINFO,MYREC
GENCEND  L     R14,GENR14
         BR    R14
GENR14   DC    F'0'
GENTAB   DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
         DC    C'0123456789+/ ='  require SPACE translate to SPACE
         DC    0F
*
* HEXPRT: INPUT    R15: LENGTH
*               0(R10): FROM ADDRESS
*         OUTPUT   R10: ADVANCE TO NEXT FIELD
*                       PRINT OUT THE PRINTABLE HEX VALUE
*
HEXPRT   EQU   *
         ST    R14,HEXR14
         ST    R15,HEXR15
         XR    R6,R6
         LR    R6,R15           HEX LENGTH
HEXLOOP  LA    R1,4
         WRTMSG ' '             CLEAR the output area
*        LA    R3,MYREC+L'MYREC MARK THE END RECORD ADDRESS
         LA    R2,MYREC+10      GET THE BEGINNING ADDRESS
HEXLOO1  CL    R6,=F'7'
         BL    HEXLAST
         UNPK  0(15,R2),0(8,R10)
         TR    0(14,R2),HEXTAB
         MVI   14(R2),X'40'
         MVPTR 7
         LA    R2,14(R2)
         S     R6,=F'7'
         BZ    HEXEND1
         BCT   R1,HEXLOO1
         PUT   CERTINFO,MYREC   R1 COULD NOT USE AFTER PUT
         B     HEXLOOP
HEXLAST  UNPK  0(3,R2),0(2,R10)      PRT THE LAST PORTION
         TR    0(2,R2),HEXTAB
         MVI   2(R2),X'40'
         LA    R10,1(R10)
         LA    R2,2(R2)
         BCT   R6,HEXLAST
HEXEND1  PUT   CERTINFO,MYREC
HEXEND   L     R14,HEXR14
         L     R15,HEXR15
         BR    R14
HEXR14   DC    F'0'
HEXR15   DC    F'0'
*
*
* OBJPRT:  INPUT 0(R10): start of ASN.1 choice
*         OUTPUT R10: ADVANCE TO THE REAL DATA
*                R1:  TRANSLATED OBJECT NAME
*                     IF R1 = NULL, R10 will not advance
*
OBJPRT   EQU   *
         ST    R14,OBJPR14
         BAL   R14,GREPLEN
         LTR   R8,R15
         BZ    BADCERT
         AR    R15,R10
         ST    R15,OBJPADDS
         BAL   R14,OBJFIND
         LTR   R8,R1                  R8 -> ANSWER
         BZ    OBJPNO
         WRTMSG ' '
         LA    R2,MYREC+10
         XR    R1,R1
         ICM   R1,B'0001',0(R8)
         S     R1,=F'1'
         EX    R1,OBJPMVC
         AR    R2,R1
         LA    R2,1(R2)               R2 -> MYREC
OBJPTXT0 CLI   0(R10),X'13'           ASN.1 PRINTTEXT
         BE    OBJPTXT
         CLI   0(R10),X'14'           ASN.1 TeletexString, T61String
         BE    OBJPTXT
         CLI   0(R10),X'16'           ASN.1 IA5String
         BE    OBJPTXT
         CLI   0(R10),X'0C'           ASN.1 UTF8TEXT
         BNE   OBJPNOTX
OBJPTXT  BAL   R14,GREPLEN
         LTR   R8,R15
         BZ    BADCERT
         NILL  R8,X'007F'         ensure the length is less than 128
         S     R8,=F'1'
         EX    R8,OBJPMVC1
         LA    R8,1(R8)
         XLATE (R2),(R8),TO=E
         PUT   CERTINFO,MYREC
         B     OBJPEND
OBJPNOTX MVC   0(15,R2),=C'unable to print'
         PUT   CERTINFO,MYREC
         B     OBJPEND
OBJPNO   EQU   *
         LR    R8,R15
         CLI   VERBAL,X'E5'       VERBAL SET
         BNE   OBJPEND
         WRTMSG '      *** Unidentified Object ***'
         PUT   CERTINFO,MYREC
         LR    R15,R8
         BAL   R14,HEXPRT
         WRTMSG '           TEXT='
         LA    R2,MYREC+16
         B     OBJPTXT0
*        DC    X'0000'
OBJPEND  L     R10,OBJPADDS
         L     R14,OBJPR14
         BR    R14
OBJPR14  DC    F'0'
OBJPADDS DC    F'0'
OBJPMVC  MVC   0(0,R2),1(R8)
OBJPMVC1 MVC   0(0,R2),0(R10)
*
*
* OBJFIND: INPUT 1(R10): POINT TO OBJECT IDENTIFIER
*         OUTPUT R10: ADVANCE TO THE REAL DATA
*                R1:  TRANSLATED OBJECT NAME
*                     IF R1 = NULL, R10 will not advance
*                R15: OBJECT LENGTH
OBJFIND  EQU   *
         ST    R14,OBJR14
         BAL   R14,GREPLEN
         LTR   R8,R15
         BZ    BADCERT
         S     R8,=F'1'
         LA    R2,OBJTAB
OBJLOOP  XR    R1,R1
         CLM   R15,B'0001',0(R2) COMPARE LENGTH
         BE    OBJLOO1
         B     OBJLOO2
OBJLOO1  EX    R8,OBJCLC        COMPARE CONTENT
         BE    OBJGOOD
OBJLOO2  ICM   R1,B'0001',0(R2)
         AR    R2,R1
         LA    R2,1(R2)
         ICM   R1,B'0001',0(R2)
         AR    R2,R1
         LA    R2,1(R2)
         CLI   0(R2),X'00'
         BE    OBJNONE
         B     OBJLOOP
OBJGOOD  ICM   R1,B'0001',0(R2)
         AR    R1,R2
         LA    R1,1(R1)          R1 -> THE TRANSLATED OBJECT
         AR    R10,R15           ADVANCE POINTER TO THE CONTENT
         B     OBJEND
OBJNONE  XR    R1,R1
OBJEND   L     R14,OBJR14
         BR    R14
OBJR14   DC    F'0'
OBJR15   DC    F'0'
OBJCLC   CLC   0(0,R10),1(R2)
*
*
* GREPLEN: INPUT 1(R10): LENGTH BYTE
*                        IF 1(R10) GREATER THAN OR EQUAL TO X'80',
*                          IT CONTAINS THE NUMBER OF LENGTH BYTES
*                        OTHERWISE, IT IS THE LENGTH FIELD
*         OUTPUT R10: ADVANCE TO THE REAL DATA
*                R15: REAL DATA LENGTH
*
GREPLEN  EQU   *
         ST    R14,GREPRET
         XR    R15,R15
         TM    1(R10),X'80'
         BO    GREPLON
         IC    R15,1(R10)
         MVPTR 2
         B     GREPEND
GREPLON  IC    R15,1(R10)
         NILL  R15,X'007F'
         C     R15,=F'4'
         BH    BADCERT
         MVPTR 2
         LTR   R15,R15
         BZ    GREPEND
         LR    R1,R15
         ST    R15,GREPMSK        CHANGE LENGTH TO ICM MASK
         TR    GREPMSK,GREPTRT
         L     R15,GREPMSK
         EX    R15,GREPICM
         AR    R10,R1
GREPEND  L     R14,GREPRET
         BR    R14
GREPRET  DC    F'0'
GREPMSK  DC    F'0'
GREPICM  ICM   R15,B'0000',0(R10)
GREPTRT  DC    X'000103070F'
         DC    0F
*
SHUTSUB  EQU   *
         LR    R7,R14
         MVC   TYPE,MSHUTDOW      MOVE 'SHUTDOW' TO MESSAGE
*
         EZASMI TYPE=SHUTDOWN,    Issue Macro                          X
               S=S,               STREAM                               X
               HOW=HOW,           End communication in both directions X
               ERRNO=ERRNO,       (Specify ERRNO field)                X
               RETCODE=RETCODE,   (Specify RETCODE field)              X
               REQAREA=REQAREA,   FOR EXITS (AND ECBS)                 X
               ERROR=ERROR        Abend if Macro error
*
         BR    R7                 --> RETURN TO CALLER
*---------------------------------------------------------------------*
*        ABEND PROGRAM AND GET DUMP TO DEBUG!
ERROR    ABEND 1,DUMP
         CNOP  2,4
*        USES R6,R7,R8         RETCODE RETURNED IN R8
RCCHECK  EQU   *
         LR    R7,R14             COPY TO REAL RETURN REG
         MVC   MSGRSLT1,MSGSUCC   ...SUCCESS TEXT
         L     R6,RETCODE
         LTR   R6,R6
         BM    NOWAIT
         CLI   SYNFLAG,0          PLAIN CASE?
         BE    NOWAIT             --> SKIP IT
         MVC   KEY+14(8),SUBTASK
         MVC   KEY+23(8),TYPE
KEY      WTO   'WAIT: XXXXXXXX XXXXXXXX'
         WAIT  ECB=ECB
NOWAIT   EQU   *
*        LA    R15,ECB
*        ST    R15,ECB
         ST    R9,ECB             MAKE THIS THE TOKEN AGAIN
         L     R6,RETCODE         CHECK FOR SUCCESSFUL CALL
         CLC   TYPE,=CL8'GETHOSTI'
         BE    HOSTIDRC           HANDLE PRINTING HOST ID
         LTR   R8,R6              SAVE A COPY
*
         BNL   CONT00
FAILMSG  EQU   *
         MVC   MSGRSLT1,MSGFAIL   ...FAIL TEXT
CONT00   EQU   *
*
*---------------------------------------------------------------------*
*        FORMAT THE RETCODE= -XXXXXXX ERRNO= XXXXXXX MSG RESULTS
*        ***> R6 = RETCODE VALUE ON ENTRY
*---------------------------------------------------------------------*
         MVC   MSGRTCT,MSGRETC    ' RETCODE= '
         MVI   MSGRTCS,C'+'
         LTR   R6,R6
         BNM   NOTM               -->
         MVI   MSGRTCS,C'-'       MOVE SIGN WHICH IS ALWAYS MINUS
NOTM     EQU   *
         MVC   MSGERRT,MSGERRN    ' ERRNO= '
*
         CVD   R6,DWORK           CONVERT IT TO DECIMAL
         UNPK  MSGRTCV,DWORK+4(4) UNPACK IT
         OI    MSGRTCV+6,X'F0'    CORRECT THE SIGN
*
ERRNOFMT EQU   *
         L     R6,ERRNO           GET ERRNO VALUE
         CVD   R6,DWORK           CONVERT IT TO DECIMAL
         UNPK  MSGERRV,DWORK+4(4) UNPACK IT
         OI    MSGERRV+6,X'F0'    CORRECT THE SIGN
*
         MVC   MSGRSLT2(35),MSGRTCD
*
         MVI   MSGRTHX,X'40'      CLEAR HEX INDICATOR
*        SR    R6,R6              CLEAR OUT...
*        ST    R6,RETCODE            RETCODE AND...
*        ST    R6,ERRNO                 ERRNO
*
*
         CLI   TRACE,0
         BNE   NOTRACE
         LR    R14,R7             GIVE HIM RETURN REG
         B     WTOSUB             --> DO WTO
NOTRACE  EQU   *
         BR    R7                 --> RETURN TO CALLER
*
HOSTIDRC EQU   *               VALID HOSTID MAY LOOK LIKE NEG. RC
         C     R6,=F'-1'       ONLY -1 RC INDICATES FAILURE
         BE    FAILMSG            ...BAD RC, USE STANDARD MSG
         LR    R8,R6              ...NEXT CALL EXPECTS ADDR IN R8
         MVC   MSGRSLT1,MSGSUCC   ...SUCCESS TEXT
         UNPK  HEXRC(9),RETCODE(5)   PLUS ONE FOR FAKE SIGN
         TR    HEXRC(8),HEXTAB    ...CONVERT UNPK TO PRINTABLE HEX
         MVI   HEXRC+8,X'40'      ...SPACE OUT FAKED SIGN BYTE
         MVI   MSGRTHX,C'X'       ...INDICATE INFO IS HEX
         B     ERRNOFMT
*
SYNFLAG  DC    H'0'               DEFAULT TO SYN
TRACE    DC    H'0'               DEFAULT TO TRACE
MYEXIT   DC   A(MYEXIT1,SUBTASK)
MYEXIT1  SAVE (14,12),T,*
         LR   R2,R15
         USING MYEXIT1,R2
         LM   R8,R9,0(R1)            GET TWO TOKENS
         MVC  EXKEY+14(8),0(R8)      TELL WHO
         MVC  EXKEY+23(8),TYPE       TELL WHAT
EXKEY    WTO 'EXIT: XXXXXXXX XXXXXXXX'
         POST ECB,1
         RETURN (14,12),T,RC=0
         DROP  R2
*---------------------------------------------------------------------*
* ELEMENTS USED TO RUN PROGRAM                                       *
*---------------------------------------------------------------------*
EZASMGW  EZASMI TYPE=GLOBAL,      STORAGE DEFINITION FOR GWA           X
               STORAGE=CSECT
*---------------------*
* INITAPI macro parms *
*---------------------*
SUBTASK  DC    CL8'SSLHAND'       SUBTASK PARM VALUE
IDENT    DC    0CL16' '
         DC    CL8'TCPV32'        DEFAULT TO FIRST ONE AVAILABLE
         DC    CL8'SSLHAND'       MY ADDR SPACE NAME OR JOBNAME
MAXSNO   DC    F'0'               (HIGHEST SOCKET DESCRIPTOR AVAILABLE)
MAXSOC   DC    AL2(50)            MAXSOC PARM VALUE
APITYPE  DC    H'2'               OR PUT A 3 HERE
*---------------------------------------------------------------------*
* SOCKET macro parms *
*--------------------*
S        DC    H'0'               SOCKET DESCRIPTOR FOR STREAM
*---------------------*
* CONNECT MACRO PARMS *
*---------------------*
         CNOP  0,4
NAME     DC    0CL16' '           SOCKET NAME STRUCTURE
         DC    AL2(2)             FAMILY
PORT     DC    H'0'
ADDRESS  DC    F'0'
         DC    XL8'0'             RESERVED
*SRCADDR  DC    CL15'127.0.0.1'
SRCLEN   DC    H'11'
PORTLEN  DC    F'0'
PORTADDR DC    F'0'
SRCIPADD DC    F'0'
         DC    0F
ADDR     DC    AL1(127),AL1(0),AL1(0),AL1(1) Internet Address
PORTS    DC    H'1414'
PORTTXT  DC    C'00000000'
PORTPCK  DC    2F'0'
*ORTS    DC    H'43'
*---------------------*
* WRITE MACRO PARMS   *
*---------------------*
NBYTE    DC    F'102'             SIZE OF BUFFER
*BUF      DC    CL50' THIS IS FROM SSLHAND!' BUFFER FOR WRITE
BUF      DC    X'16030000610100005D03004B4597B40A'
         DC    X'5AD2C1C20C3AFAF59B550AE4B84493E5'
         DC    X'A522FF378D19B4F45F136B0000360039'
         DC    X'0038003500160013000A00330032002F'
         DC    X'00070066000500040063006200610015'
         DC    X'00120009006500640060001400110008'
         DC    X'000600030100'
*------------------------*
* SHUTDOWN MACRO PARMS   *
*------------------------*
HOW      DC    F'2'               END COMMUNICATION TO- AND FROM-SOCKET
*---------------------*
* READ MACRO PARMS    *
*---------------------*
NBYTE2   DC    F'65536'           SIZE OF BUFFER
BUF2ADDR DC    F'0'               BUFFER2 FOR READ
BUF2ADDS DC    F'0'               BUFFER2 END ADDRESS
BUF2LEN  DC    F'65536'
REC1ADDS DC    F'0'
REC2ADDS DC    F'0'
PKGADDS  DC    F'0'
ENTYADDS DC    F'0'
CERADDS  DC    F'0'             WHOLE CERTIFICATE END ADDRESS
TBSADDS  DC    F'0'               TBS CERTIFICATE END ADDRESS
LISTADDS DC    F'0'
CERTADDR DC    F'0'             CERTIFICATE START ADDR
CERTLEN  DC    F'0'             CERTIFICATE LENGTH
*---------------*
*---------------*
PRINT    DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=125,MACRF=(W),RECFM=VBA,   +
               BLKSIZE=1632
CERTINFO DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=(PM),RECFM=FB, +
               BLKSIZE=3990
MYREC    DC    CL133' '
MINITAPI DC    CL8'INITAPI'
MSOCKET  DC    CL8'SOCKET'
MCONNECT DC    CL8'CONNECT'
MPTON    DC    CL8'PTON'
MGETPEER DC    CL8'GETPEERN'
MREAD    DC    CL8'READ'
MWRITE   DC    CL8'WRITE'
MSHUTDOW DC    CL8'SHUTDOWN'
MTERMAPI DC    CL8'TERMAPI'
MSGSTART DC    CL8' STARTED'
MSGEND   DC    CL8' ENDED  '
MSGSUCC  DC    CL10' SUCCESS  '     Command results...
MSGFAIL  DC    CL10' FAIL: ( '                    ...
MSGRETC  DC    CL10' RETCODE= '                    ...
MSGERRN  DC    CL10' ERRNO=   '                    ...
MSGBUFF  DC    CL10' BUFFER:  '                    ...
BLANK35  DC    CL35' '
VERBAL   DC    C' '               V FOR VERBAL
CERTVER  DC    C' '
CERTVETR DC    C'123'
*---------------------------------------------------------------------*
* MESSAGE AREA *
*--------------*
MSG      DC    0F'0'              MESSAGE AREA
         DC    AL2(MSGE-MSGNUM)   LENGTH OF MESSAGE
MSGNUM   DC    CL10'SSLHAND:'     'SSLHAND: '
MSGCMD   DC    CL8' '             COMMAND ISSUED
MSGRSLT1 DC    CL10' '            COMMAND RESULTS (SUCC, PASS, FAIL)
MSGRSLT2 DC    CL35' '            RETURNED VALUES
MSGE     EQU   *                  End of message
*---------------------------------------------------------------------*
* MESSAGE RESULTS AREAS (fill in and move to MSGRSLT2) *
*------------------------------------------------------*
*
MSGRTCD  DC    0CL35' '           GENERAL RETURNED VALUE
MSGRTCT  DC    CL9' RETCODE='     ' RETCODE= '
MSGRTHX  DC    CL1' '             'X' X FOR GETHOSTID
MSGRTCS  DC    CL1' '             '-' (NEGATIVE SIGN)
HEXRC    EQU   MSGRTCS            HEX RC WILL START AT SIGN LOCATION
MSGRTCV  DC    CL7' '             RETURNED VALUE (RETCODE)
MSGERRT  DC    CL10' ERRNO='      ' ERRNO=   '
MSGERRV  DC    CL7' '             RETURNED VALUE (ERRNO)
DWORK    DC    D'0'               WORK AREA
HEXTAB   EQU   *-240              TAB TO CONVERT TO PRINTABLE HEX
*                                 FIRST 240 BYTES NOT REFERENCED
         DC    CL16'0123456789ABCDEF'
OBJTAB   DC    X'03550406',X'02',C'C='
         DC    X'03550408',X'03',C'ST='
         DC    X'03550407',X'02',C'L='
         DC    X'0355040A',X'02',C'O='
         DC    X'0355040B',X'03',C'OU='
         DC    X'0355040C',X'06',C'TITLE='
         DC    X'03550403',X'03',C'CN='
         DC    X'092A864886F70D010901',X'02',C'E='
         DC    X'072A8648CE380401',X'03',C'DSA'
         DC    X'072A8648CE380403',X'07',C'sha1DSA'
         DC    X'092A864886F70D010101',X'03',C'RSA'
         DC    X'092A864886F70D010102',X'06',C'md2RSA'
         DC    X'092A864886F70D010103',X'06',C'md4RSA'
         DC    X'092A864886F70D010104',X'06',C'md5RSA'
         DC    X'092A864886F70D010105',X'07',C'sha1RSA'
         DC    X'00'
PARMADDR DC    A(0)               PARM ADDRESS SAVE AREA
PARMLEN  DC    H'0'               PARM LENGTH
         LTORG
*---------------------------------------------------------------------*
* REG/SAVEAREA *
*--------------*
SOCSAVE  DC    9D'0'              SAVE AREA
*---------------------------------------------------------------------*
         DROP  R3,R4
         CNOP  0,8
MYCB     EQU   *                  MY CONTROL BLOCK
REQAREA  EQU   *
ECB      DC    A(ECB)             SELF POINTER
         DC    CL100'WORK AREA'
MYTIE    EZASMI TYPE=TASK,STORAGE=CSECT     TIE
TYPE     DC    CL8'TYPE'
ERRNO    DC    F'0'
RETCODE  DC    F'0'
MYNEXT   DC    A(MYCB)            NEXT IN CHAIN FOR MULTIPLES
         CNOP  0,8
MYLEN    EQU   *-MYCB
MYCB2    EQU   *
         ORG   *+MYLEN
         CNOP  0,8
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    CL27'Copyright sslhand@gmail.com'
         END
