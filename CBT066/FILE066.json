{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011145000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 999362, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE066.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 999362, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 999362, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE066.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x10\\r'", "DS1TRBAL": "b'\\x19\\xe6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00j\\x00\\x0e\\x00l\\x00\\x00\\x00\\x11'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\\x07\\x01\\x162\\x0f\\x01\\x162\\x0f\\x08\\x01\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-11-15T00:00:00", "modifydate": "2016-11-15T08:01:07", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  066\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE066\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 13 MEMBERS COUNTED; CUMULATIVE SIZE IS 9,128 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/15/16    08:01:06    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00F\\x01\\x03'\\x7f\\x01\\x03'\\x7f! \\x00+\\x00)\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:20:46", "lines": 43, "newlines": 41, "modlines": 0, "user": "AFIELD"}, "text": "This PDS contains the following members:\n\n$$DOC    - This member.\nASM      - Assembler language source for some useful utilities.\n           ASCBSLOT - List page dataset slot usage by job.\n           CHPID    - Convert PCHID to CHPID.\n           CPCMD    - Issue VM commands from TSO.\n           CPFSET   - Demonstrate setting Command prefixes.\n           CSALST   - List info about CSA usage.\n           DISASM3B - SVC table.\n           DSSLVL   - Display level of DFDSS.\n           DXCFSTR  - Display CF structure info.\n           IEECMDPF - Set cmd prefix equal to sysname.\n           INFO     - Search by keyword for info.\n           IOCDSLST - List IOCDS info.\n           IPLSTAT  - IPL strp timing.\n           JULSUB   - Julian date manipulation subroutine.\n           LASTCLPA - Date/time of last CLPA.\n           LASTXCF  - Date/time of last SYSPLEX start.\n           LELVL    - Lang. Env level and options.\n           LNKLST   - List LNKLST datasets.\n           LPARCAP  - Display LPAR capacity.\n           MONJOBS  - STC to detect looping jobs and write WTO.\n           MONJOBSS - Subroutine for MONJOBS.\n           RACFDS   - Display RACF dataset names.\n           RETCODE  - Set return codes based on various criteria.\n           SHOWLPAR - Display LPAR information.\n           SMFDS    - Display SMF dataset information.\n           SMFSRCH  - Search SMF records for dataset activity.\n           SVCTAB   - Display SVC table.\n           TODCN    - Convert TOD clock values.\nCLIST    - CLISTS to demonstrate the use of some of the utilities\n           included in this file.\nCNTL     - JCL to run some of the utilities.\nINFOSYS  - Sample members for the INFO command.\nMACROS   - Macros necessary to assemble source in member ASM.\nPANELS   - ISPF panels.\nPLI      - A PL/I utilitiy to sort IEHLIST LISTVTOC output into address\n           order.\nUSERMODS - System usermods (SMP/E format):\n           LM00026 - TSO TEST command mod.\n           LM00031 - Mod to message IEE163I to display the following\n                     IEE163I MODE= RD-HNR423/C25D-SP7.0.4\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00P\\x00\\x85\"\\x7f\\x01\\x13\\'_\\x12(\\x00\\x19\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1985-08-15T00:00:00", "modifydate": "2013-10-02T12:28:50", "lines": 25, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA JOB (A006,SYTM,99,99),S-GOLOB,\n//        CLASS=A,MSGCLASS=X,NOTIFY=SBGOLOB\n//*\n//******************************************************************//\n//*   PDSLOAD  EXECUTION  -  LOAD PDS FROM IEBUPDTE SYSIN CARD D.S.*//\n//******************************************************************//\n//*\n//LOADIT   PROC MEMB=XXXXX,RFM=FB,LRL=80,BKS=27920\n//S03UPDTE EXEC PGM=PDSLOAD,PARM='UPDTE(./)'\n//STEPLIB  DD  DSN=SBGOLOB.PDSLOAD.LOAD,DISP=SHR (FILE 093, LOAD 035)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=SBGOLOB.CBT484.FILE066(&MEMB)\n//SYSUT2   DD  DSN=SBGOLOB.ALFIELD.FILE066.&MEMB,\n//             DISP=(NEW,CATLG,DELETE),VOL=SER=WORKE2,\n//             UNIT=SYSALLDA,SPACE=(TRK,(15,45,44),RLSE),\n//             DCB=(RECFM=&RFM,LRECL=&LRL,BLKSIZE=&BKS)\n//         PEND\n//ASM      EXEC LOADIT,MEMB=ASM\n//CLIST    EXEC LOADIT,MEMB=CLIST\n//CNTL     EXEC LOADIT,MEMB=CNTL\n//INFOSYS  EXEC LOADIT,MEMB=INFOSYS\n//MACROS   EXEC LOADIT,MEMB=MACROS\n//PANELS   EXEC LOADIT,MEMB=PANELS\n//PLI      EXEC LOADIT,MEMB=PLI\n//USERMODS EXEC LOADIT,MEMB=USERMODS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PDSLOAD": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x009\\x01\\x12$\\x8f\\x01\\x13'O\\x01\\x05\\x00\\xa0\\x00\\x9d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-09-04T00:00:00", "modifydate": "2013-10-01T01:05:39", "lines": 160, "newlines": 157, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "@FILE066": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00Y\\x01\\x162\\x0f\\x01\\x162\\x0f\\x08\\x00\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-11-15T00:00:00", "modifydate": "2016-11-15T08:00:59", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 066 is from Alan Field and contains several of his        *   FILE 066\n//*           utilities.                                            *   FILE 066\n//*                                                                 *   FILE 066\n//*              email:    alan_c_field@bluecrossmn.com             *   FILE 066\n//*                                                                 *   FILE 066\n//*     This PDS contains the following members:                    *   FILE 066\n//*                                                                 *   FILE 066\n//*     Note:    ASM and MACROS members replaced with later         *   FILE 066\n//*              versions.  (SBG - 2012/02/17)                      *   FILE 066\n//*                                                                 *   FILE 066\n//*     Note:    Member #PDSLOAD now contains an object deck        *   FILE 066\n//*              for the PDSLOAD program, right in this file,       *   FILE 066\n//*              together with appropriate linkedit JCL.            *   FILE 066\n//*                                                                 *   FILE 066\n//*     $$DOC    - This member.                                     *   FILE 066\n//*                                                                 *   FILE 066\n//*     ASM      - Assembler language source for some useful        *   FILE 066\n//*                utilities.                                       *   FILE 066\n//*                                                                 *   FILE 066\n//*                ASCBSLOT - List page dataset slot usage by       *   FILE 066\n//*                           job.                                  *   FILE 066\n//*                CHPID    - Convert PCHID to CHPID.               *   FILE 066\n//*                CPCMD    - Issue VM commands from TSO.           *   FILE 066\n//*                CPFSET   - Demonstrate setting Command           *   FILE 066\n//*                           prefixes.                             *   FILE 066\n//*                CSALST   - List info about CSA usage.            *   FILE 066\n//*                DISASM3B - SVC table.                            *   FILE 066\n//*                DSSLVL   - Display level of DFDSS.               *   FILE 066\n//*                DXCFSTR  - Display CF structure info.            *   FILE 066\n//*                IEECMDPF - Set cmd prefix equal to sysname.      *   FILE 066\n//*                INFO     - Search by keyword for info.           *   FILE 066\n//*                IOCDSLST - List IOCDS info.                      *   FILE 066\n//*                IPLSTAT  - IPL strp timing.                      *   FILE 066\n//*                JULSUB   - Julian date manipulation              *   FILE 066\n//*                           subroutine.                           *   FILE 066\n//*                LASTCLPA - Date/time of last CLPA.               *   FILE 066\n//*                           (Fixed for z/OS 2.2 and later)        *   FILE 066\n//*                LASTXCF  - Date/time of last SYSPLEX start.      *   FILE 066\n//*                LELVL    - Lang. Env level and options.          *   FILE 066\n//*                LNKLST   - List LNKLST datasets.                 *   FILE 066\n//*                LPARCAP  - Display LPAR capacity.                *   FILE 066\n//*                MONJOBS  - STC to detect looping jobs and        *   FILE 066\n//*                           write WTO.                            *   FILE 066\n//*                MONJOBSS - Subroutine for MONJOBS.               *   FILE 066\n//*                RACFDS   - Display RACF dataset names.           *   FILE 066\n//*                RETCODE  - Set return codes based on various     *   FILE 066\n//*                           criteria.                             *   FILE 066\n//*                SHOWLPAR - Display LPAR information.             *   FILE 066\n//*                SMFDS    - Display SMF dataset information.      *   FILE 066\n//*                SMFSRCH  - Search SMF records for dataset        *   FILE 066\n//*                           activity.                             *   FILE 066\n//*                SVCTAB   - Display SVC table.                    *   FILE 066\n//*                TODCN    - Convert TOD clock values.             *   FILE 066\n//*                                                                 *   FILE 066\n//*     CLIST    - CLISTS to demonstrate the use of some of the     *   FILE 066\n//*                utilities included in this file.                 *   FILE 066\n//*                                                                 *   FILE 066\n//*     CNTL     - JCL to run some of the utilities.                *   FILE 066\n//*                                                                 *   FILE 066\n//*     INFOSYS  - Sample members for the INFO command.             *   FILE 066\n//*                                                                 *   FILE 066\n//*     MACROS   - Macros necessary to assemble source in           *   FILE 066\n//*                member ASM.                                      *   FILE 066\n//*                                                                 *   FILE 066\n//*     PANELS   - ISPF panels.                                     *   FILE 066\n//*                                                                 *   FILE 066\n//*     PLI      - A PL/I utility to sort IEHLIST LISTVTOC          *   FILE 066\n//*                output into address order.                       *   FILE 066\n//*                                                                 *   FILE 066\n//*     USERMODS - System usermods (SMP/E format):                  *   FILE 066\n//*                                                                 *   FILE 066\n//*                LM00026 - TSO TEST command mod.                  *   FILE 066\n//*                LM00031 - Mod to message IEE163I to display      *   FILE 066\n//*                          the following:                         *   FILE 066\n//*                     IEE163I MODE= RD-HNR423/C25D-SP7.0.4        *   FILE 066\n//*                                                                 *   FILE 066\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\t\\x01\\x162\\x0f\\x01\\x162\\x0f\\x07T\\x1c\\xd2\\x1c\\xd2\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-11-15T00:00:00", "modifydate": "2016-11-15T07:54:09", "lines": 7378, "newlines": 7378, "modlines": 0, "user": "AFIELD"}, "text": "./ ADD NAME=ASCBSLOT 0117-96033-09086-0927-00103-00058-00054-TCACF0  00\n         TITLE '*** ASCBSLOT ***'\nASCBSLOT MOWSTART\nASCBSLOT AMODE 31\nASCBSLOT RMODE 24\n**********************************************************************\n* CODE TO SCAN THROUGH ASCBS AND REPORT ON AUX STOR SLOTS IN USE     *\n* BY ADDRESS SPACE. SEE INFO APAR II06400.                           *\n**********************************************************************\nMOWWORK  DSECT\nASCBTAB  DC    1600CL16'INIT'      NAME, NON-VIO SLOTS, VIO SLOTS\nASCBSLOT CSECT\n         USING CVT,R10             BASE REG FOR CVT\n         USING ASVT,R9             BASE REG FOR ASVT\n         USING ASCB,R7             BASE REG FOR ASCB\n         USING ASMVT,R6            BASE REG FOR ASMVT\n         OPEN  (SYSPRINT,(OUTPUT)) OPEN OUTPUT FILE\n         L     R10,CVTPTR          LOAD CVT BASE REG\n         L     R6,CVTASMVT         POINT TO ASMVT\n         L     R9,CVTASVT          AND ASVT BASE REG\n         LA    R10,ASVTFRST-4      NOW POINT TO ASVT ENTRY\n         L     R8,ASVTMAXU         POINT TO MAX NUM ASVTS\n         L     R1,ASMSLOTS         GET TOTAL SLOT COUNT\n         CVD   R1,DOUBLE           MAKE IT DECIMAL\n         MVC   MSG0+13(8),=X'4020202020202120'\n         ED    MSG0+13(8),DOUBLE+4 EDIT NUMBER INTO IT\n*        TPUT  MSG0,L'MSG0         DISPLAY RESULT\n         PUT   SYSPRINT,MSG0       DISPLAY HEADING\nSCANLIST EQU   *\n         LA    R10,4(R10)          NEXT ASVTENTY\n         TM    0(R10),ASVTAVAI     TEST FOR ASID UN-ASSIGNED\n         BO    UNUSED              ITS NOT IN USE\n         L     R7,0(R10)           A(ASCB)\n         L     R1,ASCBJBNI         POINTER TO JOB NAME\n         LTR   R1,R1               ZERO IF ITS A STC\n         BNZ   GETNAME             NOT ZERO SO ITS A JOB\n         L     R1,ASCBJBNS         POINTER TO STC NAME\nGETNAME  EQU   *\n         LH    R2,ASCBASID         GET ASID FOR THIS ADDRESS SPACE\n         SLL   R2,4                MULTIPLY BY 16\n         LA    R6,ASCBTAB(R2)      POINT TO ASCB TABLE SLOT\n         MVC   0(8,R6),0(R1)       FILL APPROPRIATE SLOT IN TABLE\n         MVC   MSG(8),0(R1)        PUT JOBNAME IN MSG\n         L     R2,ASCBASSB         POINT TO ASSB\n         USING ASSB,R2\n         L     R1,ASSBNVSC\n         STCM  R1,B'1111',8(R6)    SAVE NON-VIO SLOT COUNT IN TABLE\n         CVD   R1,DOUBLE           MAKE IT DECIMAL\n         MVC   MSG+13(8),=X'4020202020202120'\n         ED    MSG+13(8),DOUBLE+4  EDIT NUMBER INTO IT\n         L     R1,ASSBVSC\n         STCM  R1,B'1111',12(R6)   SAVE VIO SLOT COUNT IN TABLE\n         CVD   R1,DOUBLE           MAKE IT DECIMAL\n         MVC   MSG+31(8),=X'4020202020202120'\n         ED    MSG+31(8),DOUBLE+4  EDIT NUMBER INTO IT\n*        TPUT  MSG,L'MSG           DISPLAY RESULT\nUNUSED   EQU   *\n         BCT   R8,SCANLIST\nSORTED   EQU   *                   SORT INTO DESCENDING ORDER OF USAGE\n         L     R8,ASVTMAXU         POINT TO MAX NUM ASVTS\n         LA    R7,ASCBTAB\n         LR    R6,R8               COPY COUNT OF ENTRIES\n         SLL   R6,4                MULTIPLY BY 16\n         AR    R7,R6               POINT TO END OF TABLE\n         #SORT FIELDS=(8,4,BI,D),FIRST=ASCBTAB,LAST=(7),LENGTH=16\n         L     R8,ASVTMAXU         SET LOOP MAXIMUM\n         LA    R7,ASCBTAB          POINT TO TABLE\nSORTED10 EQU   *\n         CLI   0(R7),X'00'         IS ASCBNAME NULL?\n         BE    SORTED20            YES, DON'T SHOW IT\n         MVC   MSG(8),0(R7)        MOVE NAME INTO OUTPUT MSG\n         ICM   R1,B'1111',8(R7)    GET NON-VIO SLOT COUNT FROM TABLE\n         CVD   R1,DOUBLE           MAKE IT DECIMAL\n         MVC   MSG+13(8),=X'4020202020202120'\n         ED    MSG+13(8),DOUBLE+4  EDIT NUMBER INTO IT\n         ICM   R1,B'1111',12(R7)   GET VIO SLOT COUNT FROM TABLE\n         CVD   R1,DOUBLE           MAKE IT DECIMAL\n         MVC   MSG+31(8),=X'4020202020202120'\n         ED    MSG+31(8),DOUBLE+4  EDIT NUMBER INTO IT\n*        TPUT  MSG,L'MSG           DISPLAY RESULT\n         PUT   SYSPRINT,MSG\n         MVI   MSG,C' '\n         MVC   MSG+1(L'MSG-1),MSG\nSORTED20 EQU   *\n         LA    R7,16(,R7)          POINT TO NEXT ENTRY\n         BCT   R8,SORTED10\nFIN      EQU   *\n         CLOSE SYSPRINT\n         MOREND\nDOUBLE   DC    D'0'\nMSG0     DC    CL80'TOTAL SLOTS  NNNNNNNN '\n*                   0123456789 123456789 123456789 1234567890\nMSG      DC    CL80'XXXXXXXX HAS NNNNNNNN NON-VIO, NNNNNNNN VIO SLOTS'\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=80,RECFM=FB\n         EJECT\nCVT      DSECT\n         CVT   DSECT=YES\n         EJECT\n         IHAASCB\n         IHAASSB\n         EJECT\n         ILRASMVT\n         IHAASVT\n         END\n./ ADD NAME=CHPID    0100-03311-03311-1200-00087-00087-00000-FILE066 00\n         TITLE '*** CHPID ***'\nCHPID    MOWSTART\nCHPID    AMODE 31\nCHPID    RMODE 24\n***********************************************************************\n* DETERMINE CHANNEL/PCHID INFO. BE SURE TO RUN IT ON THE CORRECT      *\n* PROCESSOR.                                                          *\n* PARM='P=XXX'    XXX IS PCHID NUMBER                                 *\n***********************************************************************\nCHPID    CSECT\n         L     R1,0(R1)                 -> TO PARM\n         LH    R2,0(R1)                 GET LENGTH OF PARM\n         LTR   R2,R2                    IS THERE ONE?\n         BZ    FIN                      NO PARM, JUST EXIT.\n         LA    R1,4(R1)                 -> TO PARM DATA, P=XXX OR C=XX\n         SH    R2,=H'2'                 ADJUST LENGTH FOR THE P= OR C=\n         MVC   PCH(3),0(R1)             COPY XXX\n         TR    PCH(3),TRANTAB\n         PACK  PCHX(3),PCH(4)           PACK IT\n         USING CVT,R2\n         L     R2,16                    A(CVT)\n         L     R2,CVTHID                HOST ID\n         USING SHID,R2\n         CLI   CPCND_FLAGS,0            HID AVAILABLE?\n         MVC   CMODEL(4),CPCND_TYPE+2   CPU MODEL\n         MVC   CCPUID(6),CPCND_SEQNO+6  SERIAL #\n         LA    R4,PCHID                 POINT TO PCHID TABLE\n         LA    R2,256                   MAX NUMBER OF CHPIDS\n         SR    R3,R3                    STARTING CHPID\nLOOP     EQU   *\n         STH   R3,CHP                   SAVE CHP NUMBER\n         IOSCHPD CHPID=CHP,DESC=DATA,ACRONYM=ACRO,ATTR=ATTR\n         LTR   R15,R15                  CHECK RETURN CODE\n*        BNZ   FIN                      DON'T CARE. JUST FILL UP TABLE\n         LA    R11,ATTR                 POINT TO RETURNED DATA\n         USING CHPDATTR,R11             MAP RETURNED AREA\n         MVC   0(2,R4),CHPDA_CHID       COPY PCHID\n         UNPK  CCHAN+17(3),CHP+1(2)     JUST UNPACK THE DATA\n         NC    CCHAN+17(3),=2X'0F'      MAKE IT BINARY\n         TR    CCHAN+17(3),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         UNPK  CCHAN+07(4),CHPDA_CHID(3) JUST UNPACK THE DATA\n         NC    CCHAN+07(4),=3X'0F'      MAKE IT BINARY\n         TR    CCHAN+07(4),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         MVI   CCHAN+10,X'40'\n         CLC   CHPDA_CHID(3),PCHX       THE PCHID WE'RE LOOKING FOR?\n         BNE   NEXTCHP                  NO\n         MVC   CCHAN+20(5),ACRO         CHANNEL TYPE\n         MVI   CCHAN+19,X'40'\n         TPUT  CMODEL,35\n         MVI   WTOMSG+4,X'40'           BLANK TO BYTE 1 OF MESSAGE\n         B     NEXTCHP                  NO\n         MVC   WTOMSG+5(79),WTOMSG+4    AND BLANK ENTIRE FIELD\n         MVC   WTOMSG+4(34),CMODEL      MOVE RESPONSE DATA\n         WTO   MF=(E,WTOMSG)            DO WTO BECAUSE WE MUST BE STC\nNEXTCHP  EQU   *\n         LA    R4,2(,R4)                POINT TO NEXT PCHID SLOT\n         LA    R3,1(,R3)                ADD 1 TO CHANNEL #\n         BCT   R2,LOOP                  DO ALL 256 CHANNELS\nFIN      EQU   *\n         MOREND\n         SPACE\nPCHX     DC    X'0000'                   PCHID\nCHP      DC    X'0000'                   CHPID NUMBER 00-FF\nPCH      DC    C'4B1'\nCMODEL   DC    CL04'    '                CPU MODEL\nCCPUID   DC    CL06'      '              CPU SERIAL #\nCCHAN    DC    CL25' PCHID XXX CHP 0.XX XXXXX'\n*                   0123456789 123456789 123456789\nDATA     DC    CL32' '\nATTR     DC    CL32' '\nACRO     DC    CL5' '\nWTOMSG   WTO   '0123456789 123456789 123456789 123456789 123456789 1234*\n               56789 123456789 123456789',                             *\n               ROUTCDE=(2),MF=L\nTRANTAB  DS    0CL256\n         DC    256AL1(*-TRANTAB)   MAKE X'00'-X'FF' INTO THEMSELVES\n         ORG   TRANTAB+C'A'\n         DC    X'0A0B0C0D0E0F'           ABCDEF\n         ORG   TRANTAB+C'0'\n         DC    X'00010203040506070809'   0123456789\nPCHID    DC    256X'0000'\n         IOSDCHPD\n         IOSDPATH\n         IOSDSHID                      SYSTEM HOST ID MAPPING\n         PRINT NOGEN\n         CVT   DSECT=YES\n         END\n./ ADD NAME=CPCMD    0100-03311-03311-1200-00309-00309-00000-FILE066 00\n         TITLE '*** CPCMD ***'\nCPCMD    MOWSTART SP=250\nCPCMD    AMODE 31\nCPCMD    RMODE 24\n*********************************************************************\n*                                                                   *\n* PROGRAM TO RUN ON MVS TO ISSUE VM/CP COMMAND.                     *\n* MAY BE RUN AS A TSO COMMAND, EXECUTED AS A PROGRAM, OR RUN AS A   *\n* STARTED TASK.                                                     *\n* LINK WITH AC(1). NAME IS CPCMD WITH ALIAS CP.                     *\n*                                                                   *\n* E.G. (1) // EXEC PGM=CPCMD,PARM='Q CPUID'                         *\n*      (2) CP Q CPUID                                               *\n*      (3) // EXEC PGM=CPCMD                                        *\n*          //SYSIN DD *                                             *\n*          Q CPUID                                                  *\n*          ATT 76A MVSXA 76A                                        *\n*          /*                                                       *\n*                                                                   *\n* IF IN BATCH, AND A SYSIN DD IS PRESENT, THE PARM IS IGNORED AND   *\n* THE COMMANDS ARE READ FROM THE SYSIN FILE.                        *\n*                                                                   *\n*********************************************************************\nMOWWORK  DSECT\nTIOT     DC    F'0'           EXTRACT WORK AREA, KEEP    (1)\nTSO      DC    F'0'            THESE 3 TOGETHER AND      (2)\nASID     DC    F'0'             IN THIS ORDER.           (3)\nSAVEREG  DC    2F'0'          PLACE TO SAVE REGISTERS\n*\nACMD     DC    A(0)           THESE FOUR FULL WORDS      (1)\nABUF     DC    A(0)            MUST REMAIN               (2)\nCMDL     DC    F'0'             IN THE SAME RELATIVE     (3)\nRESPBUFL DC    F'0'              POSITIONS.              (4)\nCMDFLG   DC    X'00'          INDIC. COMMAND, PROGRAM OR STARTED TASK\nSYSINFLG EQU   X'80'\nLPRFLG   EQU   X'40'          VM GUEST OR LPAR?\nSTCFLG   EQU   X'04'\nBATFLG   EQU   X'02'\nTSOFLG   EQU   X'01'\n         DS    XL7            UNUSED\n         SPACE 2\nCPCMD    CSECT\n         USING CVT,R10\n         USING ASVT,R9\n         USING ASCB,R8\n         LR    R11,R1                   COPY A(PARM)\n         L     R10,16                   A(CVT)\n         L     R3,CVTECVT               POINT TO ECVT\n         USING ECVT,R3\n         CLC   =CL1' ',ECVTVMNM         ARE WE RUNNING UNDER VM?\n         BNE   VMGST                    YES\n         TPUT  =CL33'CMD NOT VALID. RUNNING NATIVE MVS',33\n         B     FIN1\nVMGST    EQU   *\n         L     R9,CVTASVT               A(ASVT)\n         LA    R9,ASVTFRST              -> FIRST ASVT ENTRY\n         LA    R7,TIOT                  POINT TO RETURN AREA\n         EXTRACT (7),FIELDS=(TSO,ASID,TIOT)  EXTR TO GET STUFF\n         MVI   CMDFLG,TSOFLG            INITIALIZE CMD FLAG\n         L     R7,TSO                   -> TO TSO INDICATOR\n         TM    0(R7),X'80'              ARE WE ON TSO?\n         BO    GOTTYPE                  IT WAS\n         MVI   CMDFLG,BATFLG            NOW A 1, TEST FOR JOB\n         L     R8,ASID                  GET ASID INTO A REG\n         SLL   R8,2                     MULTIPLY BY 4\n         L     R8,0(R8,R9)              NOW HAS A(OUR ASCB)\n         CLC   ASCBJBNI,=F'0'           TEST FOR JOB\n         BNE   GOTTYPE                  NOT ZERO, SO ITS A JOB\n         MVI   CMDFLG,STCFLG            NOW ITS A 2, STC\nGOTTYPE  EQU   *\n         TM    CMDFLG,TSOFLG            IN TSO MODE?\n         BO    GETPARM                  YES, SO GETPARM\n         LA    R3,=CL8'SYSIN'           DDNAME TO LOOK FOR\n         BAL   R10,TIOTSCAN             GO SEE IF THERE IS ONE\n         BNE   GETPARM                  WASN'T A SYSIN\n         OI    CMDFLG,SYSINFLG          SET SYSIN FLAG ON\n         OPEN  (SYSIN,(INPUT))          OPEN IT\n         B     COMP4                    AND GO GET WORK AREA\n*********************************************************************\n* DETERMINED WHO WE ARE, PROCESS ACCORDINGLY                        *\n*********************************************************************\nGETPARM  EQU   *\n         LR    R1,R11         RESTORE A(PARM)\n         ICM   R2,B'1111',0(R1)  POINT TO PARAMETER\n         LH    R1,0(R2)       PICK UP LENGTH\n         BL    COMP4          ONLY ONE PARM\n         SH    R1,=H'4'       CALL FROM TMP\n         SH    R1,2(R2)\n         LA    R2,2(,R2)      PREFIX IS 4 BYTES\n         AH    R2,0(R2)       SKIP OVER COMMAND NAME\n         STH   R1,0(R2)       PUT LENGTH OF CP CMD IN CORRECT PLACE\nCOMP4    EQU   *\n         LH    R5,BUFLEN              LENGTH OF BUFFER AREA\n         GETMAIN RU,LV=(R5),SP=250,BNDRY=PAGE  FOR FOR RETURNED DATA\n         ST    R1,ABUF                A(RESPBUF) - SAVE IT\n         TM    CMDFLG,SYSINFLG+BATFLG READING FROM SYSIN?\n         BO    CMDOK                  YES\n         LH    R3,0(R2)               GET LENGTH OF COMMAND\n         LTR   R3,R3                  IS THERE ANY LENGTH?\n         BP    CMDOK                  GO TRY TO DO IT\nNOCMDTXT EQU   *\n         MVC   0(26,R1),=C'NO CP COMMAND TEXT ENTERED'\n         MVI   26(R1),X'15'           NEW LINE CHAR\n         MVC   RESPBUFL,=F'27'        LENGTH OF MESSAGE\n         B     RESULT         PRETEND WE DID IT, BUT TELL ERROR MSG\nCMDOK    EQU   *\n         TM    CMDFLG,SYSINFLG+BATFLG PROCESSING A SYSIN FILE?\n         BNO   CMDOK1                 NO, USE VALUE IN PARM\n         GET   SYSIN                  GET A RECORD FROM SYSIN\n         LA    R3,71(,R1)             POINT TO END OF RECORD\nSCAN1    EQU   *\n         CLI   0(R3),C' '             A BLANK\n         BNE   SCAN2                  NO\n         BCTR  R3,0                   BACK UP A CHAR\n         B     SCAN1                  AND CHECK IT\nSCAN2    EQU   *\n         SR    R3,R1                  NOW R3 HAS LENGTH OF COMMAND\n         LA    R3,1(R3)               ADD 1 BACK TO GET REAL LENGTH\n         LR    R2,R1                  COPY POINTER TO COMMAND TEXT\n         SH    R2,=H'2'               DO THIS SO MOVCMD INSTR WILL WORK\nCMDOK1   EQU   *\n         L     R1,ABUF                RESTORE REG 1\n         ST    R3,CMDL                SAVE LENGTH\n         LH    R5,BUFLEN              RELOAD LENGTH\n         LA    R1,0(R1,R5)            GET EOBUFF.....\n         SR    R1,R3                  ....MINUS CMD LENGTH AND .....\n         N     R1,=F'-8'              .....ROUND BACK TO DOUBLEWORD.\n         ST    R1,ACMD                SAVE COMMAND ADDRESS\n         BCTR  R3,0                   AND\n         EX    R3,MOVCMD              MOVE IT TO IT'S NEW HOME\n         LR    R2,R1\n         S     R1,ABUF                SUBT START OF RESP. AREA\n         ST    R1,RESPBUFL            TO GET LENGTH\n         LA    R3,1(,R3)              GET ORIGINAL CMD LENGTH\n         LR    R0,R3                  AND COPY ITS VALUE\n         BCTR  R2,0\nMAKEUP   EQU   *\n         LA    R1,0(R2,R3)            ENSURE\n         OI    0(R1),X'40'               UPPER\n         BCT   R3,MAKEUP                     CASE\n         SPACE 3\n*********************************************************************\n* THE FOLLOWING TESTS FOR COMMANDS WE AREN'T ALLOWED TO ISSUE       *\n*********************************************************************\n         L     R5,CMDL                  GET COMMAND LENGTH\nNONBLNK  EQU   *\n         CLI   0(R1),X'40'              IS THIS A BLANK?\n         BNE   CMDSTRT                  NO, GO TO CHECK COMMAND\n         LA    R1,1(R1)                 POINT TO NEXT CHAR\n         BCT   R0,NONBLNK               AND CHECK IT\n         L     R1,ABUF\n         B     NOCMDTXT\nCMDSTRT  EQU   *\n         CLC   =C'CP ',0(R1)            DID CMD START WITH CP?\n         BNE   NOCPREFX                 NO\n         LA    R1,3(,R1)                POINT TO START OF COMMAND\n         SH    R0,=H'3'                 ADJUST LENGTH\n         LR    R5,R0                    COPY LENGTH\n         B     NONBLNK\nNOCPREFX EQU   *\n         MVI   WTOMSG+4,X'40'       MOVE A BLANK TO BYTE 1 OF MESSAGE\n         MVC   WTOMSG+5(79),WTOMSG+4    AND BLANK ENTIRE FIELD\n         MVC   WTOMSG+4(8),=C'WET207I ' SET MSGID\n         BCTR  R5,0                     ADJUST FOR EXECUTED MOVE\n         STM   R0,R1,SAVEREG            SAVE THESE REGS OVER WTO\n         EX    R5,MVCCMD                PUT COMMAND IN WTO BUFFER\n         WTO   MF=(E,WTOMSG)            ECHO COMMAND\n         LM    R0,R1,SAVEREG            RESTORE THESE REGS\n         CH    R0,=H'3'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'LOG',0(R1)            LOGOFF\n         BE    NOTALOWD\n         CLC   =C'I ',0(R1)             IPL\n         BE    NOTALOWD\n         CLC   =C'IPL',0(R1)            IPL\n         BE    NOTALOWD\n         CH    R0,=H'4'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'DISC',0(R1)           DISCONNECT\n         BE    NOTALOWD\n         CH    R0,=H'8'                 LENGTH OF COMMAND\n         BL    ALLOWED\n         CLC   =C'SHUTDOWN',0(R1)       SHUTDOWN\n         BE    NOTALOWD\nALLOWED  EQU   *\n         MODESET KEY=ZERO,MODE=SUP\n         L     R5,ABUF           A(BUF)\n         LH    R11,BUFLEN        LENGTH OF TOTAL AREA\n         BCTR  R11,0             SUBTRACT ONE\n         LA    R7,0(R5,R11)      COMPUTE END ADDRESS OF AREA\n         PGSER R,FIX,A=(R5),EA=(R7),ECB=0  FIX PAGES IN STORAGE\n         L     R8,ACMD           A(CMD)\n         LRA   R8,0(R8)          POINT TO REAL ADDRESS OF CMD\n         LRA   R9,0(R5)          POINT TO REAL ADDRESS OF BUF\n         L     R10,CMDL          LENGTH OF COMMAND TO EXECUTE\n         L     R11,RESPBUFL      LENGTH OF RETURN AREA\n         O     R10,=X'40000000'  INDICATE RETURN RESPONSE IN BUFFER\n         DC    X'838A0008'       DIAGNOSE INSTR - NO OPCODE\n         BNZ   *+8               LEAVE LEN ALONE IF NOT ALL FIT\n         ST    R11,RESPBUFL      LENGTH OF RESP\n         PGSER R,FREE,A=(R5),EA=(R7)  NOW FREE UP PAGES AGAIN\n         MODESET KEY=NZERO,MODE=PROB\n         SPACE\nRESULT   L     R2,RESPBUFL    LOAD IN LENGTH OF RETURNED TEXT\n         LTR   R2,R2          SET COND CODE\n         BNP   FIN            NO RESPONSE TO COMMAND\n         SPACE\n*********************************************************************\n* PROCESS RESPONSE FOR CALLER                                       *\n*********************************************************************\n         L     R3,ABUF        POINT TO START OF RETURNED TEXT\n         TM    CMDFLG,BATFLG  IS THIS BATCH EXECUTION?\n         BNO   DOPUTS         NO, ITS A COMMAND OR STC\n         OPEN  (SYSPRINT,(OUTPUT)) ONLY FOR JOB/BATCH EXECUTION\n         TM    SYSPRINT+48,X'10'   DID IT OPEN?\n         BNO   FIN            NO, SOME PROBLEM SO JUST END\n         SPACE\nDOPUTS   EQU   *\n         LR    R1,R3          COPY POINTER TO START OF LINE\nSCAN     CLI   0(R3),X'15'    NEW LINE CHAR\n         BE    GETLEN         YES, SO CALCULATE LEN FOR TPUT\n         LA    R3,1(R3)       POINT TO NEXT CHAR\n         BCT   R2,SCAN        AND CHECK IT WHILE THERE ARE SOME\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nGETLEN   EQU   *\n         LR    R0,R3          CALCULATE LENGTH OF TEXT TO PUT\n         SR    R0,R1          LENGTH TO BE PUT\n         STH   R0,SYSPRINT+82 SAVE THE LENGTH\n         LR    R5,R0          COPY LENGTH OF TEXT\n         LR    R7,R1          COPY POINTER TO DATA\n         TPUT  (1),(0),R      ISSUE TPUT (NO-OP IN BATCH)\n         TM    CMDFLG,TSOFLG  IS IT TSO?\n         BO    NXTLINE        YES, SO DON'T DO PUT TO SYSPRINT\n         TM    CMDFLG,BATFLG  IS IT BATCH?\n         BO    BATCHPUT       YES, SO DO PUT TO SYSPRINT\n         MVI   WTOMSG+4,X'40' MOVE IN A BLANK TO BYTE 1 OF MESSAGE\n         MVC   WTOMSG+5(79),WTOMSG+4 AND BLANK ENTIRE FIELD\n         BCTR  R5,0           SUBTRACT 1 FOR EXECUTED MOVE\n         EX    R5,WTOTEXT     MOVE TEXT TO WTO MESSAGE AREA\n         WTO   MF=(E,WTOMSG)  AND DO WTO BECAUSE WE MUST BE STC\n         B     NXTLINE        GO TO NEXT LINE\nBATCHPUT EQU   *\n         PUT   SYSPRINT,(7)   WRITE OUTPUT TO SYSPRINT\nNXTLINE  LA    R3,1(R3)       -> TO CHAR FOLLOWING X'15' FOR NEXT PUT\n         BCT   R2,DOPUTS      SUBTRACT ONE FOR CHARS LEFT TO DO\n         TM    CMDFLG,SYSINFLG+BATFLG   PROCESSING A SYSIN STREAM?\n         BO    CMDOK          YES, GET MORE TO DO\n         B     FIN            NO MORE BUFFER\nNOTALOWD EQU   *\n         LA    R8,30                    LENGTH OF RESPONSE + 1\n         ST    R8,RESPBUFL              SAVE LENGTH\n         L     R15,ABUF                 A(BUFFER)\n         MVC   0(29,R15),=CL29'COMMAND NOT ALLOWED:          '\n         MVI   29(R15),X'15'            LF\n         TM    CMDFLG,LPRFLG            SPECIAL MESSAGE?\n         BZ    CMDNAM                   NO\n         MVC   21(8,R15),=CL8'NOT VM'\n         B     RESULT\nCMDNAM   EQU   *\n         MVC   21(8,R15),0(R1)          MOVE IN COMMAND NAME\n         B     RESULT                   RETURN\n         SPACE 2\nFIN      EQU   *\n         CLOSE (SYSPRINT,,SYSIN)        EVEN IF IT WASN'T OPEN\n         L     R1,ABUF                  ADDRESS OF WORK AREA TO FREE\n         LH    R5,BUFLEN                AND LENGTH\n         FREEMAIN R,LV=(5),A=(1),SP=250 FREE GOTTEN STORAGE\nFIN1     EQU   *\n         MOREND SP=250\n         EJECT\n***********************************************************************\n*  CODE FOR TIOTSCAN SUB                                              *\n***********************************************************************\nTIOTSCAN EQU   *\n         L     R2,TIOT          LOAD ADDRESS\n         LA    R2,24(R2)        AND AGAIN\n         XR    R4,R4            CLEAR A REGISTER\nTIOTSC1  IC    R4,0(R2)         PUT A BYTE IN A REGISTER\n         LTR   R4,R4            SEE IF IT WAS ZERO\n         BZ    NOTIN\n         TM    3(R2),B'00010000'   IS IT DD DYNAM?\n         BO    *+10             YES, SO SKIP AROUND THIS\n         CLC   0(8,R3),4(R2)    IS THIS SAME NAME AS WE ARE SEEKING\n         BCR   8,R10            YES IT IS, SO JUST RETURN\n         AR    R2,R4            POINT TO NEXT ENTRY\n         B     TIOTSC1          GO BACK AND LOOK AT IT\nNOTIN    CLI   *,0              SET CONDITION CODE NOT EQUAL\n         BR    R10              RETURN WITH NON ZERO CONDITION CODE\n         EJECT\n         DS    0H\nBUFLEN   DC    H'4096'          SIZE OF RESPONSE/COMMAND BUFFER\n*                               MAY BE SMALLER, BUT DON'T MAKE BIGGER.\nMVCCMD   MVC   WTOMSG+4+8(*-*),0(R1)    MOVE COMMAND TO WTO FOR ECHO\nMOVCMD   MVC   0(*-*,R1),2(R2)\nWTOTEXT  MVC   WTOMSG+4(*-*),0(R7)      EXECUTED MOVE INSTR\nWTOMSG   WTO   '0123456789 123456789 123456789 123456789 123456789 1234*\n               56789 123456789 123456789',                             *\n               ROUTCDE=(2),MF=L\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),LRECL=80,RECFM=FB,     *\n               EODAD=FIN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=U\n         IHAASVT\n         IHAASCB\n         IHAECVT\n         CVT   DSECT=YES\n         END\n./ ADD NAME=CPFSET   0146-94075-07141-1100-00052-00012-00051-TCACF0  00\n         TITLE '*** CPFSET ***'\nCPFSET   MOWSTART\nCPFSET   AMODE  31\nCPFSET   RMODE  ANY\n**********************************************************************\n* ESTABLISH COMMAND PROCESSOR FACILITY PREFIXES.                     *\n* USE D OPDATA OPERATOR COMMAND TO SEE WHAT PREFIXES ARE DEFINED.    *\n* DOC: AUTHORIZED ASSEMBLER SERVICES GUIDE                           *\n* GOES IN SYS2.LINKLIB, AC(1)                                        *\n**********************************************************************\nMOWWORK  DSECT\n         CPF    MF=(L,CPFLST)\nCPFSET   CSECT\n         LA     R10,NENT               NUMBER OF TABLE ENTRIES\n         LA     R2,PFXOWN              POINT TO FIRST PREFIX\n         LA     R3,PFXOWN+8            POINT TO FIRST OWNER\n         MODESET MODE=SUP,KEY=ZERO     GO SUPERVISOR STATE/KEY ZERO\nSET010   EQU    *\n         CPF    REQUEST=DEFINE,PREFIX=(R2),OWNER=(R3),MF=(E,CPFLST)\n         LA     R2,16(,R2)             POINT TO NEXT PREFIX\n         LA     R3,16(,R3)             POINT TO NEXT OWNER\n         BCT    R10,SET010\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n         MOREND\nPFXOWN   EQU    *   PREFIX        OWNER\n         DC     CL8'\u00a2       ',CL8'PANV    '       CA-PANVALET SUBSYS\n         DC     CL8'.       ',CL8'SLS0    '       STK NCS\n*        DC     CL8'<       ',CL8'        '\n         DC     CL8'(       ',CL8'OPSSATM '       AUTO OPS\n         DC     CL8'+       ',CL8'DB2     '       DB2\n*        DC     CL8'|       ',CL8'        '\n         DC     CL8'&&      ',CL8'        '\n         DC     CL8'!       ',CL8'OPSSOSF '       AUTO OPS\n         DC     CL8'$       ',CL8'JES2    '       JES2\n         DC     CL8'*       ',CL8'JES3    '       JES3\n*        DC     CL8')       ',CL8'        '\n*        DC     CL8';       ',CL8'        '       CMD DELIM\n         DC     CL8'-       ',CL8'DB2     '       DB2\n*        DC     CL8'/       ',CL8'        '       DON'T USE SEE CMDEXIT\n*        DC     CL8',       ',CL8'        '\n         DC     CL8'%       ',CL8'NETVIEW '       NETVIEW\n         DC     CL8'_       ',CL8'SMC     '       STK SMC\n*        DC     CL8'>       ',CL8'        '\n         DC     CL8'?       ',CL8'OPSSECF '       AUTO OPS\n         DC     CL8':       ',CL8'MIA     '       MIA\n         DC     CL8'#       ',CL8'DIF     '       SRS DIF (X-37 TRAP)\n         DC     CL8'@       ',CL8'EMC-SRDF'       SRDF\n*        DC     CL8'''      ',CL8'        '\n         DC     CL8'        ',CL8'        '\n*        DC     CL8'\"       ',CL8'        '\nNENT     EQU    (*-PFXOWN)/16\n         END\n./ ADD NAME=CSALST   0100-03311-03311-1200-00084-00084-00000-FILE066 00\n         TITLE '*** CSALST ***'\nCSALST   MOWSTART\nCSALST   AMODE 31\nCSALST   RMODE 24\n**********************************************************************\n* SCAN ASCBS TO GET FRAME COUNTS USED BY EACH A/S                    *\n**********************************************************************\n         USING ASVT,R9\n         USING ASCB,R10\n         USING CVTFIX,R11\n         SR    R7,R7                      ZERO ACCUMULATOR\n         L     R11,16                     CVT ADDR\n         S     R11,=F'256'                BACK UP TO START OF PREFIX\n         TPUT  MESS0,L'MESS0              PUT HEADING\n         L     R9,CVTASVT                 A(ASVT)\n         LA    R8,ASVTFRST                -> A(FIRST ASCB)\n         TM    ASVTFRST,ASVTAVAI          TEST FOR INUSE OR AVAILABLE\n         BO    NEXTASVT                   NOT IN USE, TRY NEXT ASVT\nINUSE    EQU   *\n         L     R10,0(R8)                  POINT TO FIRST ASCB\n         L     R3,ASCBJBNI                POINTER TO JOBNAME\n         LTR   R3,R3                      IF ITS ZERO, NOT A JOB\n         BNZ   MOVENAME                   ITS A JOB\n         L     R3,ASCBJBNS                POINTER TO STC/MOUNT/LOGON\nMOVENAME EQU   *\n         MVC   MESS1(8),0(R3)             MOVE IN JOB NAME\n         LH    R3,ASCBASID                GET NUMBER OF THIS A/S\n         CVD   R3,DOUBLE                  MAKE HIM DECIMAL FOR HUMANS\n         MVC   MESS1+10(04),=X'40202120'\n         ED    MESS1+10(04),DOUBLE+6      EDIT NUMBER INTO IT\n*        LH    R4,ASCBFMCT                GET FRAME COUNT\n         L     R2,ASCBRSME                GET RSM SPACE BLOCK EXTENSION\n         USING RAX,R2\n         L     R4,RAXFMCT                 GET FRAME COUNT\n         DROP  R2\n         AR    R7,R4                      SUM OF TOTAL PAGES\n         CVD   R4,DOUBLE                  MAKE IT DECIMAL\n         MVC   MESS1+22(07),=X'4020206B202120'\n         ED    MESS1+22(07),DOUBLE+5      EDIT NUMBER INTO IT\n         L     R2,ASCBLDA                 GET VSM LOCAL DATA AREA\n         USING LDA,R2                     IF NOT X'FFFFFFFF' THEN\n*        L     R4,LDASMFL                    IEFUSI HAS GOT AT THEM\n*        C     R4,=F'-1'\n*        BE    *+8\n*        MVI   MESS1+37,C'Y'             'Y' INDICATES IEFUSI CHANGED\n*        L     R4,LDASMFR\n*        C     R4,=F'-1'\n*        BE    *+8\n*        MVI   MESS1+42,C'Y'\n*        L     R4,LDASMFEL\n*        C     R4,=F'-1'\n*        BE    *+8\n*        MVI   MESS1+47,C'Y'\n*        L     R4,LDASMFER\n*        C     R4,=F'-1'\n*        BE    *+8\n*        MVI   MESS1+53,C'Y'\n         TPUT  MESS1,L'MESS1              SHOW RESULT\nNEXTASVT EQU   *\n         LA    R8,4(R8)                   NEXT ASVT ENTRY\n         CLC   0(4,R8),=X'80000000'       LAST ONE IN CHAIN?\n         BE    FIN                        YES, WE'VE LOOKED AT THEM ALL\n         TM    0(R8),ASVTAVAL             IS IT IN USE\n         BO    NEXTASVT                   NO, SO TRY NEXT ONE\n         B     INUSE                      YES, GO GET DATA\nFIN      EQU   *\n         MVC   MESS1(15),=CL15'TOTAL'\n         CVD   R7,DOUBLE                  MAKE IT DECIMAL\n         MVC   MESS1+22(07),=X'4020206B202120'\n         ED    MESS1+22(07),DOUBLE+5      EDIT NUMBER INTO IT\n         TPUT  MESS1,L'MESS1              SHOW RESULT\n         MOREND\nDOUBLE   DS    D\nMESS0    DC    CL80'JOBNAME   ASID    PAGE FRAME COUNT SMFL SMFR SMFEL *\n               SMFER'\n*                   0123456789 123456789 123456789 123456789 123456789\nMESS1    DC    CL80'           XXX         XX,XXX'\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=YES\n         IHAASVT\n         IHAASCB\n         IARRAX\n         IHALDA\n         END\n./ ADD NAME=DISASM3B 0120-91091-09118-1230-00180-00161-00056-TCACF0  00\n         EJECT\n***********************************************************************\n* SVC NAME TABLE - SYSTEM SVCS                                        *\n***********************************************************************\nSVCOP    DS    0CL15                          SVC NAME TABLE\n         DC    AL1(0),CL14'EXCP/XDAP'\nSVCNAML  EQU   *-SVCOP                        LENGTH OF EACH ENTRY\n         DC    AL1(01),CL14'WAIT/WAITR/...'\n         DC    AL1(02),CL14'POST'\n         DC    AL1(03),CL14'EXIT'\n         DC    AL1(04),CL14'GETMAIN'\n         DC    AL1(05),CL14'FREEMAIN'\n         DC    AL1(06),CL14'LINK'\n         DC    AL1(07),CL14'XCTL'\n         DC    AL1(08),CL14'LOAD'\n         DC    AL1(09),CL14'DELETE'\n         DC    AL1(10),CL14'GET/FREEMAIN R'\n         DC    AL1(11),CL14'TIME'\n         DC    AL1(12),CL14'SYNCH'\n         DC    AL1(13),CL14'ABEND'\n         DC    AL1(14),CL14'SPIE'\n         DC    AL1(15),CL14'ERREXCP'\n         DC    AL1(16),CL14'PURGE'\n         DC    AL1(17),CL14'RESTORE'\n         DC    AL1(18),CL14'BLDL/FIND'\n         DC    AL1(19),CL14'OPEN'\n         DC    AL1(20),CL14'CLOSE'\n         DC    AL1(21),CL14'STOW'\n         DC    AL1(22),CL14'OPEN TYPE J'\n         DC    AL1(23),CL14'CLOSE TYPE T'\n         DC    AL1(24),CL14'DEVTYPE'\n         DC    AL1(25),CL14'TRKBAL'\n         DC    AL1(26),CL14'LOCATE, ETC'\n         DC    AL1(27),CL14'OBTAIN'\n         DC    AL1(28),CL14'    '\n         DC    AL1(29),CL14'SCRATCH'\n         DC    AL1(30),CL14'RENAME'\n         DC    AL1(31),CL14'FEOV'\n         DC    AL1(32),CL14'ALLOC'\n         DC    AL1(33),CL14'IOHALT'\n         DC    AL1(34),CL14'MGCR/QEDIT'\n         DC    AL1(35),CL14'WTO/WTOR'\n         DC    AL1(36),CL14'WTL'\n         DC    AL1(37),CL14'SEGLD/SEGWT'\n         DC    AL1(38),CL14'    '\n         DC    AL1(39),CL14'LABEL'\n         DC    AL1(40),CL14'EXTRACT'\n         DC    AL1(41),CL14'IDENTIFY'\n         DC    AL1(42),CL14'ATTACH'\n         DC    AL1(43),CL14'CIRB'\n         DC    AL1(44),CL14'CHAP'\n         DC    AL1(45),CL14'OVLYBRCH'\n         DC    AL1(46),CL14'TTIMER'\n         DC    AL1(47),CL14'STIMER'\n         DC    AL1(48),CL14'DEQ'\n         DC    AL1(49),CL14'    '\n         DC    AL1(50),CL14'    '\n         DC    AL1(51),CL14'SNAP/SDUMP'\n         DC    AL1(52),CL14'RESTART'\n         DC    AL1(53),CL14'RELEX'\n         DC    AL1(54),CL14'DISABLE'\n         DC    AL1(55),CL14'EOV'\n         DC    AL1(56),CL14'ENQ/RESERVE'\n         DC    AL1(57),CL14'FREEDBUF'\n         DC    AL1(58),CL14'RELBUF/REQBUF'\n         DC    AL1(59),CL14'OLTEP'\n         DC    AL1(60),CL14'(E)STAE/STAI'\n         DC    AL1(61),CL14'IKJEGS6A'\n         DC    AL1(62),CL14'DETACH'\n         DC    AL1(63),CL14'CHKPT'\n         DC    AL1(64),CL14'RDJFCB'\n         DC    AL1(65),CL14'    '\n         DC    AL1(66),CL14'BTAMTEST'\n         DC    AL1(67),CL14'    '\n         DC    AL1(68),CL14'SYNAD...'\n         DC    AL1(69),CL14'BSP'\n         DC    AL1(70),CL14'GSERV'\n         DC    AL1(71),CL14'ASGNBFR, ETC'\n         DC    AL1(72),CL14'''NO MACRO'''\n         DC    AL1(73),CL14'SPAR'\n         DC    AL1(74),CL14'DAR'\n         DC    AL1(75),CL14'DQUEUE'\n         DC    AL1(76),CL14'''NO MACRO'''\n         DC    AL1(77),CL14'    '\n         DC    AL1(78),CL14'LSPACE'\n         DC    AL1(79),CL14'STATUS'\n         DC    AL1(80),CL14'    '\n         DC    AL1(81),CL14'SETPRT'\n         DC    AL1(82),CL14'    '\n         DC    AL1(83),CL14'SMFWTM'\n         DC    AL1(84),CL14'GRAPHICS'\n         DC    AL1(85),CL14'DDRSWAP'\n         DC    AL1(86),CL14'ATLAS'\n         DC    AL1(87),CL14'DOM'\n         DC    AL1(88),CL14'     '\n         DC    AL1(89),CL14'     '\n         DC    AL1(90),CL14'     '\n         DC    AL1(91),CL14'VOLSTAT'\n         DC    AL1(92),CL14'TCBEXCP'\n         DC    AL1(93),CL14'TGET/TPUT'\n         DC    AL1(94),CL14'STCC'\n         DC    AL1(95),CL14'SYSEVENT'\n         DC    AL1(96),CL14'STAX'\n         DC    AL1(97),CL14'IKJEGS9G'\n         DC    AL1(98),CL14'PROTECT'\n         DC    AL1(99),CL14'DYNALLOC'\n         DC    AL1(100),CL14'IKJEFFIB'\n         DC    AL1(101),CL14'QTIP'\n         DC    AL1(102),CL14'AQCTL (TCAM)'\n         DC    AL1(103),CL14'XLATE'\n         DC    AL1(104),CL14'TOPCTL (TCAM)'\n         DC    AL1(105),CL14'IMGLIB'\n         DC    AL1(107),CL14'MODESET'\n         DC    AL1(109),CL14'ESR TYPE 4'\n         DC    AL1(110),CL14'       '\n         DC    AL1(111),CL14'''NO MACRO'''\n         DC    AL1(112),CL14'PGRLSE'\n         DC    AL1(113),CL14'PGFIX/PGFREE/..'\n         DC    AL1(114),CL14'EXCPVR'\n         DC    AL1(116),CL14'ESR(TYPE 1)'\n         DC    AL1(117),CL14'DEBCHK'\n         DC    AL1(119),CL14'TESTAUTH'\n         DC    AL1(120),CL14'GETMAIN/FREEMAIN'\n         DC    AL1(121),CL14'VSAM'\n         DC    AL1(122),CL14'ESR(TYPE 2)'\n         DC    AL1(123),CL14'PURGEDQ'\n         DC    AL1(124),CL14'TPIO'\n         DC    AL1(125),CL14'EVENTS'\n         DC    AL1(126),CL14' '\n         DC    AL1(127),CL14' '\n         DC    AL1(128),CL14' '\n         DC    AL1(129),CL14' '\n         DC    AL1(130),CL14'RACHECK'\n         DC    AL1(131),CL14'RACINIT'\n         DC    AL1(132),CL14'RACLIST'\n         DC    AL1(133),CL14'RACDEF'\n         DC    AL1(134),CL14' '\n         DC    AL1(135),CL14' '\n         DC    AL1(136),CL14' '\n         DC    AL1(137),CL14'ESR(TYPE 6)'\n         DC    AL1(138),CL14'PGSER (XA)'\n         DC    AL1(139),CL14'CVAF...'\n         DC    AL1(143),CL14'CRYPTO SUPP'\n         DC    AL1(144),CL14'OPENMVS PTRACE'\n         DC    AL1(145),CL14'EQA00SVC'\n         DC    AL1(146),CL14'BPESVC00'\n*** LAST IBM USED NUMBER\n         DC    AL1(157),CL14'CA UNIVERSE'\n         DC    AL1(159),CL14'CAS9SVC'\n         DC    AL1(173),CL14' '\n         DC    AL1(198),CL14' '\n         DC    AL1(199),CL14' '\n***********************************************************************\n* SVC NAME TABLE - USER SVCS (SVCS BELOW 200 ARE RSVD FOR IBM)        *\n***********************************************************************\nSVCUSR   DC    AL1(200),CL14'             '    FIRST USER SVC\n         DC    AL1(214),CL14'             '\n         DC    AL1(215),CL14'             '\n         DC    AL1(216),CL14'             '\n         DC    AL1(219),CL14'             '\n         DC    AL1(220),CL14'             '\n         DC    AL1(236),CL14'             '\n         DC    AL1(238),CL14'             '\n         DC    AL1(240),CL14'             '\n         DC    AL1(241),CL14'             '\n         DC    AL1(242),CL14'             '\n         DC    AL1(243),CL14'             '\n         DC    AL1(244),CL14'             '\n         DC    AL1(245),CL14'             '\n         DC    AL1(246),CL14'             '\n         DC    AL1(247),CL14'             '\n         DC    AL1(248),CL14'             '\n         DC    AL1(249),CL14'             '\n         DC    AL1(250),CL14'             '\n         DC    AL1(251),CL14'             '\n         DC    AL1(252),CL14'             '\n         DC    AL1(253),CL14'             '\n         DC    AL1(254),CL14'             '\n         DC    AL1(255),CL14'             '\n         DC    X'FF'                   END OF TABLE\n./ ADD NAME=DSSLVL   0100-03311-03311-1200-00058-00058-00000-FILE066 00\n          MACRO\n          ADRMCLVL\n.*  ***************************************************************\n.*\n.*     MACRO NAME = ADRMCLVL\n.*\n.*     DESCRIPTIVE NAME =  DFDSS RELEASE LEVEL MACRO\n.*\n.*  5665-327\n.*  CONTAINS RESTRICTED MATERIALS OF IBM\n.*  (C) COPYRIGHT IBM CORP. 1984, 1986\n.*  LICENSED MATERIALS - PROPERTY OF IBM\n.*  REFER TO COPYRIGHT INSTRUCTIONS\n.*  FORM NUMBER G120-2083.\n.*\n.*     STATUS = RELEASE 2 VERSION 1\n.*\n.*     FUNCTION =\n.*               LOADS THE DFDSS MODULE THAT CONTAINS THE VERSION,\n.*        RELEASE AND MODIFICATION LEVEL NUMBERS.\n.*\n.*\n.*     INVOCATION = ASSEMBLER\n.*\n.*     CHANGE ACTIVITY =\n.*\n.*   ***************************************************************\n* THIS MACRO PASSES THE DFDSS VERSION, RELEASE AND MODIFICATION LEVEL\n         LOAD EP=ADRRELVL,ERRET=ADR1&SYSNDX\n         LR   1,0\n         L    1,0(1)\n         B    ADR2&SYSNDX\nADR1&SYSNDX LA 1,4(0,0)\n         SLL  1,24(0)\n         B    ADR3&SYSNDX\nADR2&SYSNDX DELETE EP=ADRRELVL\nADR3&SYSNDX DS  0H\n         MEND\nDSSLVL   MOWSTART\n         ADRMCLVL                         GET DFDSS LEVEL\n         ST    R1,DSSVMR                  SAVE RESULT\n         TM    DSSVMR,X'04'               TEST FOR SUCCESSFUL GET\n         BZ    OK                         DFDSS IS THERE\n         MVC   MSG+10(11),=C'UNAVAILABLE'\n         TPUT  MSG,L'MSG                  UNAVAILABLE MSG\n         B     FIN                        RETURN\nOK       EQU   *\n         DELETE EP=ADRRELVL               CLEAN UP\n         O     R1,=X'F0F0F0F0'            MAKE IT PRINTABLE\n         STCM  R1,B'0111',DSSVMR          SAVE IT IN MESSAGE\n         TPUT  MSG,LMSG                   TELL RELEASE ETC\nFIN      EQU   *\n         MOREND\nMSG      DC    C'DF/DSS IS AVAILABLE, '\n         DC    C'VER/REL/MOD = '\nDSSVMR   DC    C'VRM'\nLMSG     EQU   *-MSG\n         END\n./ ADD NAME=DXCFSTR  0199-96007-11283-1058-00198-00016-00198-TCACF0  00\n         TITLE '*** DXCFSTR ***'\nDXCFSTR  MOWSTART\nDXCFSTR  AMODE 31\n***********************************************************************\n* GET INFO ON CF STRUCTURES.                                          *\n* SEE ALSO THE IXLMG MACRO AND THE MAPPING MACRO IXLYAMDA.            *\n* GOES IN SYS2.LINKLIB, AC(1)                                         *\n* NEEDS ENTRY IN IKJTSO00 TO BE ABLE TO RUN FROM TSO.                 *\n*                                                                     *\n* SUMMING THE STRUCTURE SIZES IS NOT ACCURATE. IT IS THE SIZE REGARD- *\n* LESS OF WHICH CF SO OVER ESTIMATES THE REQUIRED CF SIZE. NEED TO    *\n* SUM BY WHICH CF THE STRUCTURE IS IN, THOUGH WITH DUPLXED STRUCTURES *\n* THIS IS PRETTY CLOSE.                                               *\n***********************************************************************\n         MODESET MODE=SUP,KEY=ZERO        MAKE OURSELVES SPECIAL\n         OPEN  (SYSPRINT,(OUTPUT))        OPEN OUTPUT FILE\nGETSTOR  EQU   *\n         L     R0,XCFDATAL                GET LENGTH\n         GETMAIN R,LV=(0)                 GET SOME STORAGE\n         ST    R1,XCFDATA                 SAVE ITS ADDRESS\n         LR    R10,R1                     POINT TO RETURNED DATA\n         IXCQUERY REQINFO=STR_ALLDATA,ANSAREA=(R10),ANSLEN=XCFDATAL\n         B     *+4(R15)                   BRANCH DEPENDING ON RC\n         B     QOK                        R15 = 0\n         B     NOSTOR                     R15 = 4, NOT ENOUGH ROOM\n         B     IXCERR                     R15 = 8\n         B     IXCERR                     R15 = 12\nIXCERR   EQU   *\n         MVC   MESS(80),=CL80'XCF QUERY ERROR (SYSTEM NOT PART OF SYSPL*\n               EX ?)'\n         PUT   SYSPRINT,MESS\n         B     FIN\nNOSTOR   EQU   *                          FREE STORAGE, GO GET ENOUGH\n         USING QUAHDR,R10\n         L     R11,QUAHTLEN               GET REQUIRED LENGTH\n         L     R0,XCFDATAL                LENGTH TO FREE\n         L     R1,XCFDATA                 ADDRESS OF AREA TO FREE\n         FREEMAIN R,A=(R1),LV=(R0)        FREE TOO SMALL AREA\n         ST    R11,XCFDATAL               SAVE REQD LENGTH\n         B     GETSTOR                    AND GO GET THAT MUCH\nQOK      EQU   *\n         USING IXLYAMDAREA,R9             LOOK FOR STRUCTURE TYPE\n         LA    R9,CFDATA                  DATA AREA\n         IXLMG DATAAREA=(R9),DATALEN=CFDATAL,                          *\n               CFNAME=ALL_CFS,                                         *\n               RETCODE=RET,RSNCODE=RSN\n         LTR   R15,R15                    GOOD RETURN?\n         L     R8,IXLYAMDAREA_CFENT@      -> CF ENTRY\n         USING IXLYAMDCF,R8\n         UNPK  MESS0+9(9),IXLYAMDCF_CFCCRELEASE(5)  CF LEVEL INFO\n*        UNPK  MESS0+9(9),X'64'(5,R8)     GET CF LEVEL INFO\n         NC    MESS0+9(9),=8X'0F'         MAKE IT BINARY\n         TR    MESS0+9(9),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         MVI   MESS0+17,C' '\n         PUT   SYSPRINT,MESS0\n         SR    R7,R7                      CLEAR FOR ALLOC SIZE ACCUM\n         SR    R6,R6                      CLEAR FOR USED SIZE ACCUM\n         PUT   SYSPRINT,MESS              PUT OUT HEADING LINE 1\n         MVC   MESS(80),MESS1\n         PUT   SYSPRINT,MESS              PUT OUT HEADING LINE 2\n         L     R2,QUAH#REC                NUMBER OF RECORDS FOLLOWING\n         LA    R10,QUAHLENG(,R10)         POINT TO FIRST DATA REC\n         USING QUASTR,R10\nSTRLP    EQU   *\n         MVC   MESS(16),QUASTRNAME        GET STRUCTURE NAME\n         MVC   MESS+22(8),QUASTRPOLNAME   POLICY NAME\n         USING IXLYAMDAREA,R9             LOOK FOR STRUCTURE TYPE\n         LA    R9,CFDATA                  DATA AREA\n         IXLMG DATAAREA=(R9),DATALEN=CFDATAL,                          *\n               STRNAME=QUASTRNAME,                                     *\n               RETCODE=RET,RSNCODE=RSN\n         LTR   R15,R15                    GOOD RETURN?\n         BNZ   GOTTYPE                    NO - SO SKIP THIS\n         L     R8,IXLYAMDAREA_CFENT@      -> CF ENTRY\n         USING IXLYAMDCF,R8\n         L     R8,IXLYAMDCF_STR@          -> STRUCTURE ENTRY\n         USING IXLYAMDSTRL,R8\n         MVC   MESS+17(4),=C'LIST'        LIST TYPE?\n         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_LIST\n         BE    GOTTYPE\n         MVC   MESS+17(4),=C'LOCK'        LOCK TYPE?\n         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_LOCK\n         BE    GOTTYPE\n         MVC   MESS+17(4),=C'CACH'        CACHE TYPE?\n         CLI   IXLYAMDSTRL_TTY,IXLYAMDA_CACHE\n*\nGOTTYPE  EQU   *\n         SR    R4,R4                      CLEAR FOR MULTIPLY\n         L     R5,=F'4'                   CONVERT TO K\n         M     R4,QUASTRSIZE              GET STRUCTURESIZE\n         CVD   R5,DOUBLE                  MAKE IT DECIMAL\n         MVC   MESS+49(12),=X'402020206B2020206B202120'\n         ED    MESS+49(12),DOUBLE+3       EDIT NUMBER INTO IT\n         AR    R7,R5                      AND ACCUMULATE TOTAL SIZE\n         CLI   MESS+17,C' '               KNOWN STRUCTURE TYPE?\n         BNE   *+6                        NO, SO NOT ALLOCATED\n         AR    R6,R5                      ACCUMULATE ALLOCATED SIZE\n*\n         LR    R9,R10                     COPY ADDRESS\n         A     R9,QUASTRPLO\n         CR    R9,R10                     SAME ADDR, SO NO PREF CF\n         BE    STRLP02\n         USING QUASTRPL,R9\n         MVC   MESS+41(8),QUASTRPLNAME    DESIRED CF\n*\nSTRLP02  EQU   *\n         LR    R9,R10                     COPY ADDRESS\n         A     R9,QUASTRCFO\n         CR    R9,R10                     SAME ADDR, SO NO ACTUAL CF\n         BE    STRLP03A\n         USING QUASTRCF,R9\n         MVC   MESS+32(8),QUASTRCFNAME    ACTUAL CF\n         CLC   MESS+32(8),MESS+41         COMPARE NAMES\n         BE    STRLP03A                   SAME, SO NO PROBLEM HERE\n         MVI   MESS+40,C'*'               INDICATE THEY'RE DIFFERENT\n*\nSTRLP03A EQU   *\n         TM    QUASTRSTATE1,QUASTRSTDPEND  CHANGE PENDING?\n         BZ    STRLP03B                    NO\n         MVC   MESS+70(07),=C'CHG_PND'\n*\nSTRLP03B EQU   *\n         MVC   MESS+62(07),=CL7'ALLOWED'   START WITH DUPLEXING ALLOWED\n         TM    QUASTRFLG,QUASTRDUPLEXALLOWED     IS IT ALLOWED?\n         BO    STRLP04                           YES.\n         MVC   MESS+62(07),=CL7'ENA'\n         TM    QUASTRFLG,QUASTRDUPLEXENABLED  IS IT ALREADY ENABLED?\n         BO    STRLP04                           YES.\n         MVC   MESS+62(07),=CL7' '         NEITHER ALLOWED OR ENABLED\n*\nSTRLP04  EQU   *\n         TM    QUASTRREBLDPHASE1,QUASTRREBLDDUPLEXESTABLISHED\n         BZ    STRLP05                    DUPLEXING NOT ESTABLISHED\n         MVC   MESS+66(03),=C'EST'        SAY IT IS, AND\n         MVI   MESS+40,C' '               DOESN'T MATTER WHEN DUPLEXED\n*\nSTRLP05  EQU   *\n         TM    QUASTRFLG,QUASTRALLOWAUTOALT      AUTOALTER ALLOWED?\n         BZ    STRLP99                           NO.\n         MVC   MESS+70(08),=C'AUTOALT'    SAY IT IS\n*\nSTRLP99  EQU   *\n         PUT   SYSPRINT,MESS\n         MVI   MESS,X'40'                 GET A BLANK\n         MVC   MESS+1(79),MESS            AND CLEAR MESSAGE\n         AH    R10,QUASTRLEN              POINT TO NEXT ENTRY\n         BCT   R2,STRLP                   LOOP TILL NO MORE STRUCTURES\n*\n         MVC   MESS+49(12),=C'------------'\n         PUT   SYSPRINT,MESS\n*                             123456789 123456789 123456789 123456789\n         MVC   MESS(44),=CL44'MAXIMUM SPACE THAT STRUCTURES COULD OCCUP*\n               Y:'\n         CVD   R7,DOUBLE                  MAKE TOTAL SPACE DECIMAL\n         MVC   MESS+49(12),=X'402020206B2020206B202120'\n         ED    MESS+49(12),DOUBLE+3       EDIT NUMBER INTO IT\n         PUT   SYSPRINT,MESS              TELL US HOW MUCH USED\n*                             123456789 123456789 123456789 123456789\n         MVC   MESS(80),=CL80'(COMPARE THIS VALUE WITH THE SIZE OF THE *\n               CF)'\n         PUT   SYSPRINT,MESS              QUALIFYING COMMENT\n*                             123456789 123456789 123456789 123456789\n         MVC   MESS(44),=CL44'ALLOCATED SPACE:'\n         SR    R7,R6                      CALCULATE USED SPACE\n         CVD   R7,DOUBLE                  MAKE USED SPACE DECIMAL\n         MVC   MESS+49(12),=X'402020206B2020206B202120'\n         ED    MESS+49(12),DOUBLE+3       EDIT NUMBER INTO IT\n         PUT   SYSPRINT,MESS              TELL US HOW MUCH USED\n*                             123456789 123456789 123456789 123456789\n         MVC   MESS(44),=CL44'UNALLOCATED SPACE:'\n         CVD   R6,DOUBLE                  MAKE FREE SPACE DECIMAL\n         MVC   MESS+49(12),=X'402020206B2020206B202120'\n         ED    MESS+49(12),DOUBLE+3       EDIT NUMBER INTO IT\n         PUT   SYSPRINT,MESS              TELL US HOW MUCH USED\nFIN      EQU   *\n         L     R0,XCFDATAL                LENGTH TO FREE\n         L     R1,XCFDATA                 ADDRESS OF AREA TO FREE\n         FREEMAIN R,A=(R1),LV=(R0)        FREE AREA\n         CLOSE SYSPRINT                   CLOSE FILE\n         MODESET MODE=PROB,KEY=NZERO      MAKE US UN-SPECIAL\n         MOREND\nDOUBLE   DC    D'0'\nMESS0    DC    CL80'CF LEVEL:                                          *\n                  MAX'\nMESS     DC    CL80'STRUCTURE_NAME   TYPE POL_NAME  ALLOC    DESIRED   *\n                 SIZE (K) DUPLEX'\nMESS1    DC    CL80'---------------- ---- --------  -------  -------   *\n                 -------- ------'\nSYSPRINT DCB   DDNAME=SYSPRINT,RECFM=FB,MACRF=PM,DSORG=PS,LRECL=80\nXCFDATAL DC    F'8192'               INITIAL LENGTH FOR GETMAIN\nXCFDATA  DC    F'0'                  A(RETURNED DATA AREA)\nRET      DC    F'0'                  RETURN CODE\nRSN      DC    F'0'                  REASON CODE\nCFDATAL  DC    AL4(8192*4)           CFDATA AREA LENGTH\nCFDATA   DC    8192F'0'\n         IXCYQUAA\n         IXLYAMDA\n         END\n./ ADD NAME=IEECMDPF 0108-95181-10095-1601-00064-00061-00064-TCACF0  00\n         TITLE '*** IEECMDPF ***'\nIEECMDPF MOWSTART\nIEECMDPF AMODE  31\nIEECMDPF RMODE  ANY\n**********************************************************************\n* ESTABLISH COMMAND PREFIX EQUAL TO SYSTEM NAME.                     *\n* DOC IS MVS/ESA SYSPLEX MIGRATION GUIDE GG24-4368-00.               *\n* USE D OPDATA OPERATOR COMMAND TO SEE WHAT PREFIXES ARE DEFINED.    *\n* GOES IN SYS2.LINKLIB, AC(1)                                        *\n**********************************************************************\n         USING CVT,R2\n         L     R2,16                  A(CVT)\n         NI    FLAGS,X'FF'-SWITCH     CLEAR SWITCH\n         MVC   SYSNAME(8),CVTSNAME    GET SYSNAME FROM CVT\n*        MODESET MODE=SUP,KEY=ZERO    GO SUPERVISOR STATE/KEY ZERO\nRETRY    EQU   *\n         CPF   REQUEST=DEFINE,        DEFINE PREFIX EQUAL TO SYSNAME   *\n               PREFIX=SYSNAME,                                         *\n               OWNER==C'IEECMDPF',                                     *\n               FAILDISP=SYSPURGE,                                      *\n               REMOVE=YES,                                             *\n               MF=(E,CPFLST)\n         LTR   R15,R15                SEE IF PREFIX WAS SET OK\n         BZ    SUCCESS                YES IT WAS\n         TM    FLAGS,SWITCH           SEE IF ALREADY TRIED\n         BO    ERROR                  WE HAVE SO DON'T TRY AGAIN\n         C     R15,=F'8'              ALREADY DEFINED?\n         BNE   ERROR                  NO\n         C     R0,=F'8'               SEE IF PREFIX ALREADY DEFINED\n         BNE   ERROR                  SOME OTHER ERROR\n         CPF   REQUEST=DELETE,        DELETE EXISTING DEFINITION       *\n               PREFIX=SYSNAME,                                         *\n               MF=(E,CPFLST)\n         OI    FLAGS,SWITCH           SET FLAG TO SAY WE'RE RETRYING\n         B     RETRY                  TRY AGAIN\nERROR    EQU   *\n         MVC   ERRSYS,SYSNAME         MOVE SYSNAME INTO MSG\n         LA    R2,ERRMSG              POINT TO MSG\n         WTO   TEXT=(R2),DESC=4\n         B     FIN\nSUCCESS  EQU   *\n         MVC   OKSYS,SYSNAME          MOVE SYSNAME INTO MSG\n         LA    R2,OKMSG               POINT TO MSG\n         WTO   TEXT=(R2),DESC=4\nFIN      EQU    *\n*        MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n         MOREND\nOKMSG    DS    0H\n         DC    Y(OKEND-OKSTART)\nOKSTART  DC    CL42'SVS102I COMMAND PREFIX DEFINED FOR SYSTEM '\nOKSYS    DC    CL8' '\nOKEND    EQU   *\nERRMSG   DS    0H\n         DC    Y(ERREND-ERRSTART)\nERRSTART DC    CL49'SVS103W ERROR DEFINING COMMAND PREFIX FOR SYSTEM '\nERRSYS   DC    CL8' '\nERREND   EQU   *\nSYSNAME  DC    CL8' '\nFLAGS    DC    X'00'\nSWITCH   EQU   X'80'                  ALREADY RETRIED\n         CPF   MF=(L,CPFLST)\n         PRINT NOGEN\n         CVT   DSECT=YES\n         END\n./ ADD NAME=INFO     0100-03311-03311-1200-00333-00333-00000-FILE066 00\n         TITLE '*** INFO ***'\nINFO     MOWSTART\nINFO     AMODE  24\nINFO     RMODE  24\n***********************************************************************\n* PROGRAM HAS TWO OPTIONS, 1 - TO SET UP A MEMBER OF THE PDS (WHICH   *\n* IS IN INFO INPUT FORMAT) WITH A KEYWORD TABLE. PARM=KWD             *\n*                          2 - TO DO A KEYWORD SEARCH OF THE PDS AND  *\n* DISPLAY TITLE LINES MUCH LIKE INFO DOES. PARM=KEYWORD TO LOOK FOR,  *\n* OR BLANK FOR ALL TITLES.                                            *\n***********************************************************************\nMOWWORK  DSECT\nCARD     DC    CL80' '\nKEYWORD  DC    CL16' '\nKWDTAB   DC    CL24' '                  16 - KEYWORD, 8 - MEMBERNAME\nMEMLST   DC    750CL8' '                LIST OF MEMBER NAMES\nINFO     CSECT\n         LR    R11,RB                   COPY BASE REGISTER\n         LA    R11,4095(R11)            ADJUST IT\n         LA    R11,1(R11)               ALL THE WAY\n         USING INFO+4096,R11            TELL ASSEMBLER\n         SPACE\n         L     R1,0(R1)                 MAYBE WE HAVE A PARM\n         LH    R2,0(R1)                 IF SO IT WILL HAVE LENGTH\n         LR    R9,R2                    COPY IT FOR USE AT SEARCH\n         LR    R10,R1                   COPY IT FOR USE AT SEARCH\n         LTR   R2,R2                    SO TEST IT\n         BZ    NOPARM                   AND SKIP IF THERE WASN'T\n         CLC   2(3,R1),=C'KWD'          WAS KWD SPECIFIED?\n         BNE   SEARCH                   NO, SEARCH FOR KEYWORD\n         OI    FLAG,FLAGKWD             SET BIT FOR BUILDING KEYWORDS\nNOPARM   EQU   *\n         OPEN  (SYSPRINT,(OUTPUT))      OPEN SYSPRINT\n* READ DIRECTORY GETTING LIST OF ALL MEMBER NAMES\n         USING DIRBLK,R2\n         USING PDS2,R3\n         OPEN  (PDSDIR)                 OPEN PDS DIRECTORY\n         LA    R7,MEMLST\nNEXTENT  EQU   *\n         GET   PDSDIR                   GET A DIRECTORY RECORD\n         LR    R2,R1                    COPY REG\n         LH    R10,COUNT                COUNT OF BYTES IN THIS BLOCK\n         AR    R10,R2                   POINT TO END OF BLOCK\n         LA    R3,2(R2)                 POINT TO FIRST DATA PIECE\nNEXTNAME EQU   *\n         CLI   PDS2NAME,C'$'            MEMBER NAME BEGINS WITH A $?\n         BE    NEXT001                  SKIP THIS ONE\n         MVC   0(8,R7),PDS2NAME         MOVE NAME TO BLDL LIST NAME\n         LA    R7,8(R7)                 NEXT SLOT\n         CLC   PDS2NAME,=8X'FF'         LAST NAME IN DIRECTORY?\n         BE    GOTMEMS                  NO, NOT YET\nNEXT001  EQU   *\n         SR    R5,R5                    ZERO REGISTER\n         IC    R5,PDS2INDC              GET BYTE WITH USERCT\n         N     R5,=X'0000001F'          TURN OFF OTHER BITS\n         SLL   R5,1                     CONVERT HALFWORDS INTO BYTES\n         LA    R3,12(R5,R3)             BUMP POINTER TO NEXT NAME\n         CR    R3,R10                   MORE ENTRIES IN BLOCK\n         BL    NEXTNAME                 GO GET THEM\n         B     NEXTENT                  NEED ANOTHER BLOCK\n         EJECT\nGOTMEMS  EQU   *\n         TM    FLAG,FLAGKWD             TEST BIT FOR BUILDING KEYWORDS\n         BZ    CLOSEDIR                 SKIP IF NOT DOING KEYWORDS\n         LA    R8,MEMLST                GET ADDRES OF MEMBER LIST\n         SR    R7,R8                    GET LENGTH OF LIST IN BYTES\n         SRL   R7,3                     DIVIDE BY 8, NOW # MEMBERS\n         MVC   CARD(80),=CL80'PDS CONTAINSXXXX MEMBERS (MAX=750)'\n         CVD   R7,DOUBLE                MAKE IT DECIMAL\n         MVC   CARD+12(4),=X'40202120'\n         ED    CARD+12(4),DOUBLE+6      EDIT NUMBER INTO IT\n         PUT   SYSPRINT,CARD\nCLOSEDIR EQU   *\n         CLOSE PDSDIR                   CLOSE PDS DIRECTORY\n         TM    FLAG,FLAGKWD             ARE WE BUILDING KEYWORDS\n         BZ    SEARCH                   NO, WE'RE LOOKING FOR THEM\n         OPEN  (SORTIN,(OUTPUT))\n         OPEN  (PDS,(INPUT))            OPEN PDS\n         LA    R10,MEMLST               POINT TO MEMBER LIST\n         LH    R2,PDS+62                GET BLKSIZE\n         GETMAIN R,LV=(R2)              GET AREA\n         ST    R1,DATA                  SAVE ITS ADDRESS\n         LA    R8,KWDTAB                POINT TO KEYWORD AREA\nGOT001   EQU   *\n         FIND  PDS,(R10),D              DO FIND FOR MEMBER\n         LTR   R15,R15                  GOOD FIND?\n         L     R9,DATA                  POINT TO DATA AREA AGAIN\n         READ  DECB,SF,,(9),MF=E        GET RECORD FROM MEMBER\n         CHECK DECB\n         BAL   R14,GETKWDS              GO TO BUILD KEYWORD TABLE\n         LA    R10,8(R10)               POINT TO NEXT MEMBER SLOT\n         CLC   0(8,R10),=8X'FF'         CHECK MEMBER NAME\n         BNE   GOT001                   GO DO NEXT MEMBER\n         CLOSE SORTIN                   FINISHED GETTING KEY WORDS\n         LA    R1,SORTPARM              POINT TO SORT PARMS\n         LINK  EP=SORT                  GO SORT KEYWORD LIST\n         SPACE 5\n         BAL   R14,BLDGLOSS             MAKE LIST OF KWD REFS\n         B     FIN\n         EJECT\nSEARCH   EQU   *\n         LA    R7,SAVE15                POINT TO WORK AREA\n         EXTRACT (7),FIELDS=TSO         GET INFO\n         L     R7,SAVE15                ADDRESS\n         TM    0(R7),X'80'              IS THIS TSO?\n         BO    SEARCH00                 YES\n         OI    FLAG,FLAGBAT             SET BATCH FLAG\n         OPEN  (SYSPRINT,(OUTPUT))      OPEN SYSPRINT\nSEARCH00 EQU   *\n         LTR   R9,R9                    LETS TAKE A LOOK\n         BP    SEARCH01                 SPECIFIC KEYWORD\n         OI    FLAG,FLAGALLT            SET FLAG TO LIST ALL TITLES\n         B     SEARCH02\nSEARCH01 EQU   *\n         BCTR  R9,0                     REDUCE LENGTH BY 1\n         MVI   KEYWORD,C' '             BLANK OUT KEYWORD\n         MVC   KEYWORD+1(15),KEYWORD\n         EX    R9,MVCSKWD               MOVE IN KEYWORD\n         OC    KEYWORD(16),=CL16' '     MAKE SURE ITS UPPERCASE\nSEARCH02 EQU   *\n         OPEN  (KWDS,(INPUT))           OPEN KEYWORD MEMBER\n         LA    R9,MEMLST                POINT TO MEMBER LIST\nKWD000   EQU   *\n         GET   KWDS                     GET A RECORD\n         TM    FLAG,FLAGALLT            ALL TITLES REQUIRED?\n         BO    KWD005                   YES\n         CLC   0(16,R1),KEYWORD         A MATCH?\n         BL    KWD000                   NOT YET\n         BH    KWD020                   PASSED IT\n         LA    R5,7                     MAX MEMBER NAMES ON CARD\n         LA    R1,17(R1)                1ST MEMBER NAME\nKWD010   EQU   *\n         CLC   0(8,R1),=CL8' '          BLANK NAME?\n         BE    KWD020                   NO MORE NAMES\n         MVC   0(8,R9),0(R1)\n         LA    R9,8(R9)                 NEXT OUTPUT SLOT\n         LA    R1,9(R1)                 NEXT INPUT SLOT\n         BCT   R5,KWD010                NEXT NAME\n         B     KWD000                   GET NEXT CARD\nKWD020   EQU   *\n         MVC   0(8,R9),=8X'FF'          END OF LIST MARKER\n         CLOSE KWDS                     GOT THE NAMES NOW\n         SPACE 5\nKWD005   EQU   *\n         SR    R3,R3                    CLEAR FOR COUNTER\n         OPEN  (PDS,(INPUT))            OPEN PDS\n         LA    R10,MEMLST               POINT TO MEMBER LIST\n         LH    R2,PDS+62                GET BLKSIZE\n         GETMAIN R,LV=(R2)              GET AREA\n         ST    R1,DATA                  SAVE ITS ADDRESS\nGOT005   EQU   *\n         CLC   0(8,R10),=8X'FF'         CHECK MEMBER NAME\n         BE    GOT020                   GO DO NEXT MEMBER\n         FIND  PDS,(R10),D              DO FIND FOR MEMBER\n         LTR   R15,R15                  GOOD FIND?\n         L     R9,DATA                  POINT TO DATA AREA AGAIN\n         READ  DECB,SF,,(9),MF=E        GET RECORD FROM MEMBER\n         CHECK DECB\n         LA    R3,1(R3)                 INCREMENT COUNTER\n         BAL   R14,GETTITLE             GO GET TITLE LINES\n         LA    R10,8(R10)               POINT TO NEXT MEMBER SLOT\n         B     GOT005                   GO DO NEXT MEMBER\nGOT020   EQU   *\n         B     FIN\n         EJECT\nFIN      EQU   *\n         CLOSE SYSPRINT\n         LH    R0,PDS+62                LENGTH OF AREA\n         L     R1,DATA                  ADDRESS OF DATA\n         FREEMAIN R,A=(1),LV=(0)        FREE DATA AREA\n         CLOSE (PDS)                    DONE NOW\n         MOREND\n         EJECT\nGETKWDS  EQU   *\n* PROCESS DATA AND EXTRACT KEYWORDS FROM RECORDS\n         ST    R14,SAVE14               SAVE RETURN REG\nGETK000  EQU   *\n         CLC   0(2,R9),=C'K '           KEYWORD LINE?\n         BE    GETK001                  YES\n         L     R14,SAVE14               RESTORE REG 14\n         CLI   0(R9),C' '               END OF ALL HEADING JUNK\n         BER   R14                      YES, RETURN TO CALLER\n         LA    R9,80(R9)                NEXT DATA RECORD\n         B     GETK000                  TRY AGAIN\nGETK001  EQU   *\n         LA    R15,2(R9)           POINT TO STRING TO SEARCH\n         LA    R3,78               LENGTH OF STRING TO SEARCH\nGETK002  EQU   *\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\nLAST     EQU   *\n         SR    R3,R14              REDUCE LENGTH TO SEARCH\n         LTR   R3,R3\n         BNP   DONE\n         BCTR  R14,0               LESS 1 FOR MOVE\n         MVI   0(R8),C' '          A BLANK\n         MVC   1(23,R8),0(R8)      AND 24 MORE\n         EX    R14,MVCKWD          MOVE KEYWORD TO TABLE\n         MVC   16(8,R8),0(R10)     PUT MEMBER NAME IN TABLE\n         LA    R15,1(R14,R15)      POINT TO NEXT STARTING SLOT\n         ST    R15,SAVE15\n         PUT   SORTIN,(R8)         NEXT OUTPUT SLOT\n         L     R15,SAVE15\n         B     GETK002\nDONE     EQU   *\n         LA    R9,80(R9)                NEXT DATA RECORD\n         B     GETK000                  TRY AGAIN\n         EJECT\nBLDGLOSS EQU   *\n* BUILD THE PSEUDO GLOSSARY\n         ST    R14,SAVE14               SAVE IT\n         OPEN  (SORTOUT,(INPUT))        READ IN SORTED DATA\n         OPEN  (KWDDATA,(OUTPUT))       OPEN GLOSSARY FILE\n         MVI   CARD,C' '                BLANK OUTPUT CARD\n         MVC   CARD+1(79),CARD           AREA\n         LA    R10,CARD+17              MEMBER NAME SLOT\n         LA    R9,7                     LOOP LIMITER\n         GET   SORTOUT                  GET A RECORD\n         MVC   CARD(16),0(R1)           COPY STARTUP DATA\nGLO000   EQU   *\n         CLC   CARD(16),0(R1)           SAME KWD AS PREVIOUSLY FOUND?\n         BNE   GLO100                   NO, NEW RECORD\n         MVC   0(8,R10),16(R1)          MOVE MEMBER NAME INTO CARD\n         LA    R10,9(R10)               NEXT SLOT\n         GET   SORTOUT                  GET A RECORD\n         BCT   R9,GLO000                GO GET NEW INPUT\nGLO100   EQU   *\n         LR    R9,R1                    SAVE IT\n         PUT   KWDDATA,CARD             PUT IT OUT\n         MVI   CARD,C' '                BLANK OUTPUT CARD\n         MVC   CARD+1(79),CARD           AREA\n         LR    R1,R9                    RELOAD POINTER\n         MVC   CARD(16),0(R1)           COPY STARTUP DATA\n         LA    R10,CARD+17\n         LA    R9,7\n         B     GLO000                   GO GET NEW CARD\nSORTEND  EQU   *\n         CLOSE KWDDATA\n         L     R14,SAVE14               RELOAD RETURN REG\n         BR    R14                      RETURN TO CALLER\n         EJECT\nGETTITLE EQU   *\n* GET TITLE LINES NOW\n         ST    R14,SAVE14               SAVE RETURN REG\nGETT000  EQU   *\n         CLC   0(2,R9),=C'T '           TITLE LINE?\n         BE    GETT001                  YES\n         L     R14,SAVE14               RESTORE REG 14\n         CLI   0(R9),C' '               END OF ALL HEADING JUNK\n         BER   R14                      YES, RETURN TO CALLER\n         LA    R9,80(R9)                NEXT DATA RECORD\n         B     GETT000                  TRY AGAIN\nGETT001  EQU   *\n         MVI   CARD,C' '                BLANK CARD\n         MVC   CARD+1(79),CARD\n         CVD   R3,DOUBLE                MAKE IT DECIMAL\n         MVC   CARD(04),=X'40202120'\n         ED    CARD(04),DOUBLE+6        EDIT NUMBER INTO IT\n         MVI   CARD+4,C'.'\n         MVC   CARD+6(8),0(R10)         MOVE MEMBER NAME INTO CARD\n         MVC   CARD+16(65),2(R9)        MOVE IN TITLE\n         TPUT  CARD+1,79                DISPLAY TITLE\n         L     R14,SAVE14\n         TM    FLAG,FLAGBAT             BATCH?\n         BZR   R14                      NO, SO RETURN\n         PUT   SYSPRINT,CARD+1\n         L     R14,SAVE14\n         BR    R14\n         EJECT\nDOUBLE   DC    D'0'\nDATA     DC    F'0'\nSAVE14   DC    F'0'\nSAVE15   DC    F'0'\nMVCSKWD  MVC   KEYWORD(*-*),2(R10)      EXECUTED MOVE\nMVCKWD   MVC   0(*-*,R8),0(R15)         EXECUTED MOVE\nREADLST  READ  DECB,SF,PDS,,'S',MF=L\nSORTPARM DC    X'80',AL3(SORTLST)\n         CNOP  2,4\nSORTLST  DC    AL2(LISTEND-LISTBEG)\nLISTBEG  DC    A(SORTA)\n         DC    A(SORTZ)\n         DC    A(RECA)\n         DC    A(RECZ)\n         DC    A(0)           A(E15)\n         DC    A(0)           A(E35)\n         DC    C'SORT'        DDNAME CHARS\n         DC    F'256000'      MAIN STOR VALUE\n         DC    X'FF'          MSG OPTION FLAG\n         DC    C'(I)'         MSG OPTION\nLISTEND  EQU   *\nSORTA    DC    C' SORT FIELDS=(1,16,CH,A,16,8,CH,A)'\nSORTZ    DC    C' '\nRECA     DC    C' RECORD LENGTH=24,TYPE=F'\nRECZ     DC    C' '\nKWDS     DCB   DDNAME=KWDS,RECFM=FB,LRECL=80,DSORG=PS,MACRF=GL,        *\n               EODAD=GOT020\nKWDDATA  DCB   DDNAME=KWDDATA,RECFM=FB,LRECL=80,DSORG=PS,MACRF=PM\nSYSPRINT DCB   DDNAME=SYSPRINT,RECFM=FB,LRECL=80,DSORG=PS,MACRF=PM\nSORTIN   DCB   DDNAME=SORTIN,RECFM=FB,LRECL=24,DSORG=PS,MACRF=PM\nSORTOUT  DCB   DDNAME=SORTOUT,RECFM=FB,LRECL=24,DSORG=PS,MACRF=GL,     *\n               EODAD=SORTEND\nPDSDIR   DCB   DDNAME=PDS,RECFM=U,BLKSIZE=256,DSORG=PS,MACRF=GL,       *\n               EODAD=GOTMEMS\nPDS      DCB   DDNAME=PDS,RECFM=FB,LRECL=80,DSORG=PO,MACRF=(R,W)\nTRTNONBL TRT   0(0,R15),TABNONBL   (EXECUTED)\nTRTBLANK TRT   0(0,R15),TABBLANK   (EXECUTED)\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'00'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'6B'               COMMA\n         DC    148X'00'\nFLAG     DC    X'00'\nFLAGKWD  EQU   X'80'\nFLAGALLT EQU   X'40'\nFLAGBAT  EQU   X'20'\nDIRBLK   DSECT\nCOUNT    DC    H'0'\nENTRIES  DC    254C' '\n         IHAPDS PDSBLDL=NO\n         END\n./ ADD NAME=IOCDSLST 0126-00169-11027-1018-00280-00247-00280-TCACF0  00\n         TITLE 'IOCDS Utility'\n****Start of Specifications********************************************\n*\n* MODULE NAME: IOCDSLST\n*\n* FUNCTION:    Display Processor IOCDS details.\n*\n* STATUS:      MVS/ESA 4.3.0\n*\n* ATTRIBUTES:  Disk resident.\n*\n* AUTHOR:      Ashley Street a.street@btinternet.com\n*\n* ENTRY CONDITIONS:\n*\n*        IOCDLIST :-\n*        Gpr14 = Return address\n*        Gpr15 = A(Called routine)\n*\n*\n* EXTERNAL REFERENCES:\n*\n*\n* MACROS :\n*        MODESET\n*        STORAGE\n*        OPEN\n*        PUT\n*        CLOSE\n*\n* NOTES:\n*        None.\n*\n* CHANGE ACTIVITY:\n*\n*        Ver 1 Rel 1 Fix 00  - New module devlopment (Base code).\n*\n* ACF NOTES:\n*\n*   To figure out the parameter list zap ICPIOCP.ICPPMVS\n*   at the 0A7A (SVC 122) instruction to 0000.\n*\n*   Run the following job:\n*\n*   //IOCDSREP EXEC PGM=ICPIOCP,REGION=64M,\n*   // PARM='REPORT=A,LINECOUNT=60'\n*   //STEPLIB  DD DISP=SHR,DSN=SYS1.LINKLIB\n*   //SYSPRINT DD SYSOUT=*,DCB=RECFM=FA\n*   //SYSUDUMP DD SYSOUT=*\n*\n*   and examine where R1?? points to see the parameter list.\n*   It should look similar to\n*       1D700000 10000100 00000000 00000000 810F0000    00010000\n*\n****End of Specifications**********************************************\nIOCDSLST CSECT\nIOCDSLST AMODE 24\nIOCDSLST RMODE 24\n         BAKR  R14,0                    Save status etc on Stack\n         LR    R12,R15                  Setup my base\n         USING IOCDSLST,R12             Base reg assignment\n         LA    R13,SAVE                 Set up R13 for other linkage\n*\n         MODESET MF=(E,SUPRMOD)         Get in 'Supervisor' state\n         STORAGE OBTAIN,                                               X\n               LENGTH=STORLEN,                                         X\n               ADDR=(2),                                               X\n               LOC=BELOW,                                              X\n               COND=NO\n         ST    R2,SVC122PL              save it for later\n*\n         LA    R4,MESSBUFF              address of message buffer\n         L     R5,=A(80*IOCDTABE)       length of buffer\n         XR    R7,R7                    length of zero\n         ICM   R7,B'1000',=C' '         pad byte of blank\n         MVCL  R4,R6                    clear the message buffer\n*\n         LA    R9,IOCDTABA              IOCDS table\n         LA    R10,IOCDTABE             Maximum entries to check\n         LA    R11,MESSBUFF             Point to message buffer\n         XR    R3,R3                    count of entries read\nLOOP1    EQU   *\n         LR    R4,R2                    storage area\n         LA    R5,2048\n         LA    R5,2048(R5)              length of area\n         XR    R7,R7                    clear for move long\n         MVCL  R4,R6                    and clear buffer\n         MVC   0(4,R2),=X'10000100'     set up parameter list\n         MVC   4(4,R2),=X'00000000'\n         MVC   8(3,R2),=X'000000'\n         MVC   11(1,R2),0(R9)           iocds number: 00, 01, 02, 03\n*        MVC   12(4,R2),=X'800F0001'    this was for 2064 processor\n         MVC   12(4,R2),=X'810F0000'    2084s and up\n         MVC   16(4,R2),=X'00010000'\n         BAL   R14,ISSUESV              and issue Service Call\n*\n         CLI   9(R2),DSNOTIN            Not installed ?\n         BE    SETBSIDE                 if so, try the other side\n         CLI   9(R2),DSNOSIDE           Non existent side ?\n         BE    SCRIO                    if so, finish off\n*\n         LR    R8,R2                    data block retrieved\n*        AH    R8,=H'512'               offset\n         AH    R8,=H'768'               offset\n         MVC   1(2,R11),1(R9)           IOCDS number\n         CLI   9(R2),DSEMPTY            IOCDS not created ?\n         BE    CLOSEDS                  if so, close it again\n         MVC   9(8,R11),0(R8)           IOCDS title\n         UNPK  WORK1,8(4,R8)            sort out the date\n         MVC   46(5,R11),WORK1+2        and place in message\n         UNPK  WORK1,12(4,R8)           sort out the time\n         MVC   54(2,R11),WORK1          in goes hours\n         MVI   56(R11),C':'\n         MVC   57(2,R11),WORK1+2        minutes and ....\n         MVI   59(R11),C':'\n         MVC   60(2,R11),WORK1+4        seconds\n*\n*        MVC   64(32,R11),192(R8)       Get IODF data\n         MVC   64(12,R11),192(R8)       Get IODF data\n*\n         MVC   24(5,R11),=C'LPAR '      default to 'LPAR' mode\n         CLC   270(2,R8),=X'2084'       2084 and up can only be LPAR\n         BNL   CHKSTAT\n         TM    23(R8),X'02'             LPAR mode ?\n         BO    CHKSTAT                  if not, check IOCDS status\n         TM    23(R8),X'04'             LPAR mode ?\n         BO    CHKSTAT                  if not, check IOCDS status\n         TM    23(R8),X'08'             LPAR mode ?\n         BO    CHKSTAT                  if not, check IOCDS status\n         MVC   24(5,R11),=C'Basic'      indicate LPAR mode\nCHKSTAT  EQU   *\n         CLI   31(R8),DSACTIVE          Active IOCDS ?\n         BE    SETACT1                  if so, indicate that\n         CLI   31(R8),DSUPDATE          Active + Updated IOCDS ?\n         BNE   CLOSEDS                  if not, nothing to add\n         MVC   34(7,R11),=C'Act/Upd'    indicate active/updated one\n         B     CLOSEDS                  and close IOCDS\nSETACT1  EQU   *\n         MVC   34(6,R11),=C'Active'     indicate active IOCDS\nCLOSEDS  EQU   *\n         MVC   0(4,R2),=X'10000100'     Set up parms\n         MVC   4(4,R2),=X'00000000'\n         MVC   8(3,R2),=X'000000'\n         MVC   11(1,R2),0(R9)\n         MVC   12(4,R2),=X'40000295'    close the dataset\n         BAL   R14,ISSUESV              issue Service Call\n         LA    R9,ENTLEN(R9)            bump through table\n         LA    R11,MESSLEN(,R11)        bump on through message buffer\n         LA    R3,1(,R3)                increment read count\n         BCT   R10,LOOP1                and loop\n         B     SCRIO                    And display all the info.\n*\nISSUESV  EQU   *\n         LA    R1,SVC122PL              address of parameter list\n         LA    R15,6                    routing code for Service Call\n         SVC   122                      issue service call\n         BR    R14                      and return to caller\n*\nSETBSIDE EQU   *\n         TM    PROCFLAG,SIDEB           already on the 'B' side ?\n         BO    SCRIO                    if so, display the details\n         OI    PROCFLAG,SIDEB           set the 'B' side flag on\n         LA    R9,IOCDTABB              IOCDS 'B' side entries\n         LA    R10,IOCDSCNT             Maximum entries to check\n         B     LOOP1                    and back to the loop\nSCRIO    EQU   *\n         LA    R5,TITLE1                Start at title line\n         LA    R6,MESSLEN               length of message\n         LA    R3,2(,R3)                entries to display\n         OPEN  (PRINTER,OUTPUT)         Open Printer DCB\nSCRIO1   EQU   *\n         PUT   PRINTER,(R5)             and display message\n         LA    R5,MESSLEN(R5)           on through messages\n         BCT   R3,SCRIO1                and round we go\nEND      EQU   *\n         CLOSE (PRINTER)                close the printer\n         L     R2,SVC122PL              address of data to free\n         STORAGE RELEASE,                                              X\n               LENGTH=STORLEN,                                         X\n               ADDR=(2),                                               X\n               COND=NO\n         MODESET MF=(E,PROBMOD)         Get back in 'Problem' state\n         XR    R15,R15                  clear return code\n         PR                             Restore callers status\n*\n*---------------------------------------------------------------------\n*\n* Internal Control blocks etc\n*\n         LTORG\nSTORLEN  EQU   4096                     Size of SCCB buffer\nPROCFLAG DC    X'00'                    Processing flag\nSIDEA    EQU   X'00'                    Side 'A' processing\nSIDEB    EQU   X'01'                    Side 'B' processing\n*\nSAVESTOR DS    F                        Save area for Storage address\nSAVE     DS    18F                      'Old fashioned' save area\nSAVER10  DS    F                        Save area for Reg 10\n*\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L\n*\nPRINTER  DCB   DDNAME=SYSPRINT,                                        X\n               MACRF=(PM),                                             X\n               LRECL=80,                                               X\n               RECFM=F,                                                X\n               DSORG=PS\n*\nSVC122PL DC    F'0'                     SVC 122 Parameter List\n         DC    A(PARMLIST)\nPARMLIST DC    X'00410002'              Read IOCDS request\nBLANKS   DC    C' '                     Blanks buffer\nWORK1    DC    CL7'0'                   Work area\n*\n* IOCDS Table (Maximum of 10 IOCDS's per side)\n*\nIOCDTABA DC    X'00',C'A0'\nENTLEN   EQU   (*-IOCDTABA)\n         DC    X'01',C'A1'\n         DC    X'02',C'A2'\n         DC    X'03',C'A3'\n         DC    X'04',C'A4'\n         DC    X'05',C'A5'\n         DC    X'06',C'A6'\n         DC    X'07',C'A7'\n         DC    X'08',C'A8'\n         DC    X'09',C'A9'\nIOCDTABB DC    X'10',C'B0'\n         DC    X'11',C'B1'\n         DC    X'12',C'B2'\n         DC    X'13',C'B3'\n         DC    X'14',C'B4'\n         DC    X'15',C'B5'\n         DC    X'16',C'B6'\n         DC    X'17',C'B7'\n         DC    X'18',C'B8'\n         DC    X'19',C'B9'\nIOCDTABE EQU   (*-IOCDTABA)/ENTLEN\nIOCDSCNT EQU   IOCDTABE/2\n*\n* IOCDS Status flags\n*\nDSCLOSE  EQU   X'64'    - Close specified\nDSBUSY   EQU   X'65'    - Busy\nDSNOTIN  EQU   X'66'    - Not installed\nDSINV    EQU   X'6A'    - Invalid State\nDSREADER EQU   X'70'    - Read request past EOF\nDSEMPTY  EQU   X'80'    - Not created\nDSNOSIDE EQU   X'82'    - Non existent side\nDSREADOK EQU   X'C8'    - Read successfully\nDSACTIVE EQU   X'C9'    - Read successfully/Active\nDSUPDATE EQU   X'CA'    - Active/Updated since POR\nDSXXX    EQU   X'CF'    - ???\n*\nMESSTAB  EQU   *\nTITLE1   DC    CL80' ID     IOCDS Title     Type      Status      Date X\n                    Time    IODF name'\nMESSLEN  EQU   (*-TITLE1)\nTITLE2   DC    CL80' --     -----------     ----      ------      ---- X\n                    ----    -----------'\nMESSBUFF DS    (80*IOCDTABE)X'00'       Message buffer area\n*\n         REGEQU\nAR0      EQU   0\nAR1      EQU   1\nAR2      EQU   2\nAR3      EQU   3\nAR4      EQU   4\nAR5      EQU   5\nAR6      EQU   6\nAR7      EQU   7\nAR8      EQU   8\nAR9      EQU   9\nAR10     EQU   10\nAR11     EQU   11\nAR12     EQU   12\nAR13     EQU   13\nAR14     EQU   14\nAR15     EQU   15\n         END\n./ ADD NAME=IPLSTAT  0148-00189-09187-1551-00274-00023-00264-TCACF0  00\n         TITLE '*** IPLSTAT ***'\nIPLSTAT  MOWSTART\nIPLSTAT  AMODE 31\nIPLSTAT  RMODE 24\n***********************************************************************\n* DISPLAY IPL TIMING STATS. EACH PHASE OF AN IPL RECORDS ITS TIME IN  *\n* A CONTROL BLOCK IN ECSA. NOT SURE WHAT EACH ENTRY REPRESENTS BUT    *\n* IT'S AN INTERESTING DISPLAY.                                        *\n* SEE IPCS VERBX BLSAIPST OR IPLDATA STATUS                           *\n*                                                                     *\n* The data collection for IPLDATA STATUS was just a little            *\n* thing I hacked together in OS/390 1.3 to help me find a             *\n* starting point of where to look when I got asked to help            *\n* diagnose \"why did that IPL take so long?\" problems.                 *\n* It presents things in four phases IPL-NIP-IEEVIPL-IEEMB860          *\n* because that happens to be how the system initialization            *\n* code is structured.  But I was not trying to create any             *\n* 'official' terminolgy.  From an internal code point of view,        *\n* IPL ends when NIP starts.  From a customer point of view,           *\n* IPL more likely is considered to have ended when the system         *\n* is ready to run applications - after the network is up, the         *\n* database is up, and the applications are up.                        *\n*                                                                     *\n* Jim Mulder   z/OS System Test   IBM Corp.  Poughkeepsie,  NY        *\n***********************************************************************\n         L     R4,16                 A(CVT)\n         USING CVT,R4\n         L     R2,CVTECVT            A(ECVT)\n         USING ECVT,R2\n         L     R2,ECVTIPST           POINT TO IPL TIMIMG STATS\n         USING IHAIPST,R2\n         LA    R3,IPSTDATA\n         USING IPSTITEM,R3\n         SR    R10,R10               CLEAR FOR LATER USE\n         OPEN  (SYSPRINT,(OUTPUT))   OPEN OUTPUT FILE\n         PUT   SYSPRINT,MESS0\n         LA    R9,STAGE\nLP1      EQU   *\n         MVC   MESS+00(3),=C'RIM'\n         CLI   IPSTITEMKEY,IPSTKEYIRIM          RIM PHASE?\n         BE    GOTKEY\n         MVC   MESS+00(3),=C'NIP'\n         CLI   IPSTITEMKEY,IPSTKEYNIPRIM        NIP PHASE?\n         BE    GOTKEY\n         MVC   MESS+00(3),=C'MSI'\n         CLI   IPSTITEMKEY,IPSTKEYMSIFUNC       MSI PHASE?\n         BE    GOTKEY\n         SR    R11,R11\n         IC    R11,IPSTITEMLEN\n         CLI   IPSTITEMKEY,IPSTKEY04            04 KEY?\n         BE    SKIP\n         CLI   IPSTITEMKEY,IPSTKEY05            05 KEY?\n         BE    SKIP\n         CLI   IPSTITEMKEY,IPSTKEY06            06 KEY?\n         BE    SKIP\n         CLI   IPSTITEMKEY,IPSTKEY07            07 KEY?\n         BE    SKIP\n         CLI   IPSTITEMKEY,IPSTKEYFF            FF KEY?\n         BE    SKIP\nGOTKEY   EQU   *\n         MVC   MESS+06(2),IPSTITEMDATA          GET ITEM CODE\n         IC    R10,IPSTITEMLEN\n         LR    R11,R10                          COPY LENGTH\n         SH    R10,=H'3'                        ADJUST FOR MVC\n*        EX    R10,MVCDATA1\n         ICM   R7,B'1111',IPSTITEMDATA+2\n         CLI   IPSTITEMKEY,IPSTKEYMSIFUNC       MSI PHASE?\n         BNE   DOPUT\n*        EX    R10,MVCDATA2\n         MVC   MESS+06(8),IPSTITEMDATA          GET ITEM CODE\n         ICM   R7,B'1111',IPSTITEMDATA+8\nDOPUT    EQU   *\n         XC    WKCELL2,WKCELL2\n         MVC   WKCELL2+2(4),IPSTITEMDATA+8\n         STCM  R7,B'1111',WKCELL2+2\n*        CVD   R7,DOUBLE                        MAKE IT DECIMAL\n*        MVC   MESS+13(12),=X'402020206B2020206B202120'\n*        ED    MESS+13(12),DOUBLE+3             EDIT NUMBER INTO IT\n*\n         BRAS  R7,IPST90                time-units to time\n         MVC   MESS+14(13),=X'F021207A20207A20204B202020'\n         ED    MESS+14(13),RESULT\n         MVI   MESS+14,X'40'\n*\n         MVC   MESS+29(SLEN),0(R9)\n         LA    R9,SLEN(,R9)\n*\n         PUT   SYSPRINT,MESS\n*        SETMODE 24\n*        TPUT  MESS,L'MESS\n*        SETMODE 31\nSKIP     EQU   *\n         LA    R3,2(R3,R11)             POINT TO NEXT ITEM\n         C     R3,IPSTNEXT\n         BL    LP1\n         CLOSE (SYSPRINT)\n         B     FIN\n*\nIPST90   DS 0H                     CODE FROM ROLAND SCHIRADIN\n         LM    R14,R15,=X'8126D60E46000000' SINCE 1972\n         LM    R0,R1,WKCELL2                TIME-UNITS\n         ALR   R14,R0\n         ALR   R15,R1\n         BRC   12,NOINCR\n         AL    R14,=F'1'\nNOINCR   DS    0H\n         STM   R14,R15,WKCELL2\n         LA    R1,WKCELL2              pass TOD clock value\n*\n         STCKCONV STCKVAL=WKCELL2,     GET TOD TO CONVERT              *\n               CONVVAL=RESULT,         PUTTING RESULTS HERE            *\n               TIMETYPE=DEC,           WITH TIME IN DECIMAL FORMAT     *\n               DATETYPE=MMDDYYYY       AND DATE IN THIS FORMAT\n         BR    R7\n*\nFIN      EQU   *\n         MOREND\n*\nMVCDATA1 MVC   MESS+11(*-*),IPSTITEMDATA+2\nMVCDATA2 MVC   MESS+11(*-*),IPSTITEMDATA\nDOUBLE   DC    D'0'\nWKCELL2  DC    XL8'00'\nRESULT   DC    CL16' '       HHMMSSTTTTTT0000MMDDYYYY........\n* You challenge my memory - it was 1996 when I wrote this code.\n* It looks like the time units are the middle 4 bytes of\n* 8-byte TOD clock units.  So you zero an 8-byte field, copy the 4-byte\n* time units into the middle of the 8-byte field, add the time it was\n* at the beginning of 1972 (X'8126D60E46000000'), pass the result to\n* BLSUXTOD, and use the time portion (throw away the date) which is\n* returned.\n*\n* Jim Mulder   z/OS System Test   IBM Corp.  Poughkeepsie,  NY\n*\n*                   0123456789 123456789 123456789 123456789 123456789\nMESS0    DC    CL80'KEY  CODE           VALUE          TIME'\nMESS     DC    CL80' '\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=FB\n*\n* THIS TABLE IS CREATED FROM THE OUTPUT OF THE IPCS COMMAND\n*                123456789 123456789 123456789 123456789 123456789 123\nSTAGE    EQU   *\n         DC    C'IEAIPL10 ISNIRIM - Read SCPINFO                     '\nSLEN     EQU   *-STAGE\n         DC    C'IEAIPL20 Test Block storage to 2G                   '\n         DC    C'IEAIPL11 Fast FIND service                          '\n         DC    C'IEAIPL31 LOAD service                               '\n         DC    C'IEAIPL30 IPLWTO service                             '\n         DC    C'IEAIPL46 Read SCHIBs into IPL workspace             '\n         DC    C'IEAIPL49 Process Load and Default parameters        '\n         DC    C'IEAIPL50 IPL parmlib - process LOADxx and NUCLSTxx  '\n         DC    C'IEAIPL51 System architecture                        '\n         DC    C'IEAIPL43 Find and Open IODF data set                '\n         DC    C'IEAIPL60 Read NCRs from IODF                        '\n         DC    C'IEAIPL70 UIM environment - load CBD and IOS services'\n         DC    C'IEAIPL71 Build DFT for each device                  '\n         DC    C'IEAIPL08 Read EDT information from IODF             '\n         DC    C'IEAIPL40 Read MLTs from nucleus                     '\n         DC    C'IEAIPL42 Read NMLs from nucleus (IEANynnn modules)  '\n         DC    C'IEAIPL41 Read PDS directory entries and CESD records'\n         DC    C'IEAIPL05 Build and sort NUCMAP                      '\n         DC    C'IEAIPL02 Load nucleus modules                       '\n         DC    C'IEAIPL04 Allocate PFT and SQA/ESQA                  '\n         DC    C'IEAIPL14 Build LSQA/ELSQA for Master                '\n         DC    C'IEAIPL09 IAXMI - PFT, master RAB,  etc.             '\n         DC    C'IEAIPL07 Update AMODE for nucleus resident SVCs     '\n         DC    C'IEAIPL03 Build UCBs, ULUT, etc.                     '\n         DC    C'IEAIPL18 Copy and relocate EDT to ESQA              '\n         DC    C'IEAIPL99 Page frame table and cleanup               '\n         DC    C'IEAVNIP0 NIP Base                                   '\n         DC    C'IEAVNIPM Invoke NIP RIMs                            '\n         DC    C'IEAVNPE6 Service Processor Interface                '\n         DC    C'IEAVNPFF Loadwait/Restart                           '\n         DC    C'IEAVNPA6 RTM - RTCT and recording buffer            '\n         DC    C'IEAVNPC6 WTO                                        '\n         DC    C'IEAVNPC3 Issue messages from IPL message queue      '\n         DC    C'IEAVNP24 SMS Open/Mount                             '\n         DC    C'IEAVNP06 Machine Check                              '\n         DC    C'IEAVNP27 Reconfiguration                            '\n         DC    C'IEAVNPA2 IOS - Non-DASD UCBs                        '\n         DC    C'IEAVNPCA NIP Console                                '\n         DC    C'IEAVNPB2 IOS - DASD UCBs                            '\n         DC    C'IEAVNP11 Locate and Open master calalog             '\n         DC    C'IEAVNPC7 Open SYS1.SVCLIB                           '\n         DC    C'IEAVNPOP Open PARMLIB                               '\n         DC    C'IEAVNPIL Process IEALSTxx                           '\n         DC    C'IEAVNPC4 Prompt for System Parameters               '\n         DC    C'IEAVNP03 Merge and analyze system parameters        '\n         DC    C'IEAVNPCF Process system name and system variables   '\n         DC    C'IEAVNP76 Open LOGREC                                '\n         DC    C'IEAVNPE8 RSM - Process REAL=                        '\n         DC    C'IEAVNP23 Build GRS blocks in SQA                    '\n         DC    C'IEAVNP04 ASM - Open page and swap data sets         '\n         DC    C'IEAVNPA8 VSM - Expand SQA                           '\n         DC    C'IEAVNP14 ASM part 2 - Build SQA control blocks      '\n         DC    C'IEAVNPGD Move console data to ESQA                  '\n         DC    C'IEAVNP25 Process SVC=                               '\n         DC    C'???                                                 '\n         DC    C'IEAVNP05 LPA, APF                                   '\n         DC    C'IEAVNP44 ASA Reuse stuff                            '\n         DC    C'IEAVNPB1 Process CSCBLOC=                           '\n         DC    C'IEAVNPE2 RACF SAF                                   '\n         DC    C'IEAVNPB8 Create CSA                                 '\n         DC    C'IEAVNP47 ENF                                        '\n         DC    C'IEAVNPD6 RTM - SDUMP, ABDUMP, ESTAE                 '\n         DC    C'IEAVNP09 Build ASVT                                 '\n         DC    C'IEAVNPD8 RSM - Frame queues, VRREGN= and RSU=       '\n         DC    C'IEAVNP10 SRM - OPT=, IPS=, etc.                     '\n         DC    C'IEAVNPD1 ABDUMP                                     '\n         DC    C'IEAVNPD2 SDUMP                                      '\n         DC    C'IEAVNPCX Context services, registration services    '\n         DC    C'IEAVNPX1 NIP cleanup                                '\n         DC    C'IEAVNPF5 PCAUTH                                     '\n         DC    C'IEAVNPF8 RASP                                       '\n         DC    C'IEAVNP1F SRM - I/O measurement blocks               '\n         DC    C'IEAVNPC2 IOS - Move CDT to SQA                      '\n         DC    C'IEAVNP51 TRACE                                      '\n         DC    C'IEAVNP20 Process CLOCK=                             '\n         DC    C'IEAVNP21 TOD clock                                  '\n         DC    C'IEAVNP57 SDUMP                                      '\n         DC    C'IEAVNPF9 XCF                                        '\n         DC    C'IEAVNP33 GRS                                        '\n         DC    C'IEAVNPED PROD                                       '\n         DC    C'IEAVNP26 SMS                                        '\n         DC    C'IEAVNPE5 LNKLST                                     '\n         DC    C'IEAVNPD5 Load pageable device support modules       '\n         DC    C'IEAVNP88 Allocation move EDT II                     '\n         DC    C'IEAVNPA1 CONSOLE                                    '\n         DC    C'IEAVNPDC WLM                                        '\n         DC    C'IEAVNP16 EXCP appendages                            '\n         DC    C'IEAVNP13 Prepare NIP/MSI interface                  '\n         DC    C'IEAVNP17 GTF Monitor Call interface                 '\n         DC    C'IEAVNPG8 VSM defined monitor call enablement        '\n         DC    C'IEAVNP18 PARMLIB Scan Routine interface             '\n         DC    C'IEAVNPF2 Process IOS=                               '\n         DC    C'IEAVNP15 Process VATLST                             '\n         DC    C'IEAVNPRR RRS                                        '\n         DC    C'IEAVNPOE USS                                        '\n         DC    C'IEAVNPSC                                            '\n         DC    C'IEAVNPLE System LE RIM                              '\n         DC    C'IEAVNPUN Unicode                                    '\n         DC    C'IEAVNPXL                                            '\n         DC    C'IEAVNP1B Close catalog                              '\n         DC    C'IEAVNIPX Nip final cleanup                          '\n         DC    C'IEETRACE Master trace                               '\n         DC    C'ISNMSI   SPI                                        '\n         DC    C'UCMPECBM CONSOLE address space                      '\n         DC    C'ENFPC005 CONSOLE ready ENF                          '\n         DC    C'IEFSCHIN IEFSCHAS address space                     '\n         DC    C'IEFJSINT Subsystem interface                        '\n         DC    C'IEFSJLOD JESCT                                      '\n         DC    C'IAZINIT  JESXCF address space                       '\n         DC    C'IAZFSII  FSI trace                                  '\n         DC    C'IEFQBINT SWA manager                                '\n         DC    C'IEFAB4I0 ALLOCAS address space                      '\n         DC    C'------>  Stage time                                 '\n         DC    C'ILRTMRLG ASM                                        '\n         DC    C'IECVIOSI IOS dynamic pathing                        '\n         DC    C'ATBINSYS APPC                                       '\n         DC    C'IKJEFXSR TSO                                        '\n         DC    C'IXGBLF00 Logger                                     '\n         DC    C'HWIAMIN1                                            '\n         DC    C'COMMNDXX COMMANDxx processing                       '\n         DC    C'SMFWAIT  SMF                                        '\n         DC    C'SECPROD  Security server                            '\n         DC    C'IEFJSIN2 SSN= subsystem                             '\n         DC    C'IEFHB4I2 ALLOCAS - UCB scan                         '\n         DC    C'CSRINIT  Windowing services                         '\n         DC    C'FINSHMSI Wait for attached CMDs                     '\n         DC    C'IEEMB860                                            '\n         IHAIPST\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAECVT\n         END\n./ ADD NAME=JULSUB   0109-86071-04117-0937-00570-00562-00022-TCACF0  00\n         TITLE '   J U L S U B   '\n************************************************************\n*                                                          *\n*        'JULSUB'                                          *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n         SPACE\n         MACRO\n         STAMP\n         LCLC  &ASMTIME\n&ASMTIME SETC  '&SYSTIME'(1,5)\n         DC    CL16' &SYSDATE &ASMTIME '\n         MEND\n         SPACE\nJULSUB   CSECT\nJULSUB   AMODE 31\nJULSUB   RMODE ANY\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'JULSUB   '\n         STAMP\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET SAVEAREA ADDRESS\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2\n         USING @DATA,13\n         SPACE\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST\n         ST    R14,TIMEB\n         CLI   3(R3),INP003        INPUT JULIAN PACKED? INPUT TYPE 3\n         BNE   INP01               NO - BRANCH\n         SPACE\n*              INPUT IS JULIAN PACKED\n         SPACE\n         MVC   DOUBLE+4(4),INPUT   MOVE INPUT\n         OI    DOUBLE+7,X'0F'      SET SIGN - SHOULD ALREADY BE DONE\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF\n         LH    R1,DOUBLE+4         GET 00YY\n         SLL   R1,16               GET 00YY0000\n         SRL   R1,12               GET 00000YY0\n         ST    R1,DOUBLE+4         STORE BACK 00000YY0\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'            Y2K, ALWAYS ADD\n*        BH    *+8\n         AH    R1,=H'2000'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n*\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\nINP01    CLI   3(R3),INP001        INPUT JULIAN BINARY? INPUT TYPE 1\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         CVB   R1,DOUBLE\n         B     INP01B\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE\n*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n         SPACE\nTODD     MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\nDPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\nDPMWIN   CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE\n*              CONVERT MONTH NUMBER TO MONTH NAME\n*\n*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*                 OUTPUT - MONTH AND ALPHA\n         SPACE\nTOMON    L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE\n*              BUILD PROSE DATE\n*\n*                 INPUT  - MONTH, DDC, YYYYC\n         SPACE\nTOPROSE  TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n*        MVI   4(R1),C','          COMMA AFTER DAY\n*        LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n         CLC   5(2,R1),=C'00'      IS THIS DATE 20XX?\n         BNE   PROSE04             NO\n         MVC   5(2,R1),=C'20'      MAKE YY = 20\n         BR    R9\nPROSE04  EQU   *\n*        CLC   5(2,R1),=C'00'      IS THIS DATE 19XX?\n*        BNER  R9                  NO\n*        MVC   5(2,R1),=C'19'      MAKE YY = 19\n         BR    R9\n         SPACE\n*              INPUT IS YYYY/MM/DD BINARY - INPUT TYPE 2\n         SPACE\nINP02    L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n*        CH    R1,=H'99'           Y2K, ALWAYS ADD\n*        BH    *+8\n         AH    R1,=H'2000'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\n*              CONVERT M/D/Y TO JULIAN\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - DDDB, DDDC, JB\n         SPACE\nTOJUL    MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(2),YYC\n         PACK  DOUBLE,JC\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE\n*\n*\n*\n         SPACE\nTOSB     MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE\n*              GET DAY OF WEEK\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - WEEKB, WEEKC\n*\n*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*\nTOWEEK   TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\nWEEKFEB  LA    R14,14              SET M=14\nWEEKYMIN BCTR  R15,0               SET Y = Y-1\nWEEKMMOK LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE\n*\n*              CONVERT TIMEB TO TIMEC\n*\n*                 DIVIDE BY 10,10,10,6,10,6,10,6\n*\nTOTIME   TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\nTOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE\nOUTPUT   LR    R1,R4\n         TM    3(R5),OUT001\n         BZ    *+14\n         MVC   0(4,R1),JB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002\n         BZ    *+14\n         MVC   0(4,R1),SB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004\n         BZ    *+14\n         MVC   0(8,R1),SC\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008\n         BZ    *+14\n         MVC   0(8,R1),ALPHA\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064\n         BZ    *+14\n         MVC   0(4,R1),WEEKB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128\n         BZ    *+14\n         MVC   0(12,R1),WEEKC\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256\n         BZ    *+14\n         MVC   0(4,R1),TIMEB\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512\n         BZ    *+14\n         MVC   0(8,R1),TIMEC\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL5\n         DS    CL2\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ADD NAME=LASTCLPA 0120-87092-16320-0750-00267-00245-00267-SBGOLOB 41\n         TITLE '*** LASTCLPA ***'\nLASTCLPA MOWSTART\nLASTCLPA AMODE  31\nLASTCLPA RMODE  24\n***********************************************************************\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE MOST     *\n* RECENT CLPA. IT CAN BE USED TO VERIFY IF THE OPERATOR REALLY DID    *\n* DO A CLPA IN RESPONSE TO IEA101A AT IPL TIME.                       *\n* UNDER ESA GOES IN SYS2.LINKLIB, SETCODE AC(1).                      *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                   A(CVT)\n         ICM   R1,15,0(R1)              POINT TO PARAMETER\n         LH    R2,0(R1)                 PICK UP LENGTH\n         BL    COMP4                    ONLY ONE PARM\n         SH    R2,=H'4'                 SUBTRACT 2 1/2 WDS OF LENGTH\n         SH    R2,2(R1)                 SUBTRACT LENGTH OF COMMAND NAME\n         BZ    NOPARM                   NO LENGTH LEFT, NO PARM\n         AH    R1,2(R1)                 SKIP OVER COMMAND NAME\n         LA    R1,4(,R1)                AND 4 BYTES OF LENGTH\nCOMP4    EQU   *\n         LTR   R2,R2                    TEST FOR NOT ZERO\n         BNZ   PARM                     PARM SUPPLIED\nNOPARM   EQU   *\n*        SETMODE 31                     31-BIT ADDRESSING ON\n         L     R2,CVTASMVT              A(ASMVT)\n         L     R5,8(R2)                 A(PAGING ART)\n         L     R3,24(R5)                A(DSN LIST)\n         MVC   PAGEDSN(44),0(R3)      PLPA NAME (ALWAYS FIRST IN LIST)\n*        SETMODE 24                     BACK TO 24-BIT ADDRESSES\n         B     OPEN\nPARM     EQU   *\n         BCTR  R2,0                     LESS ONE FOR EXECUTE\n         EX    R2,MVCDSN1               MOVE NAME TO OUR DATA AREA\nOPEN     EQU   *\n         USING SHWOUT,R10\n         USING SHWASSOC,R9\n***********************************************************************\n*  USE SHOWCAT FOR STARTERS TO GET CATALOG ACB AND CI FOR DSET        *\n***********************************************************************\n         LA    R10,AREA                      -> TO RETURN DATA AREA\n         SHOWCAT AREA=AREA,NAME=PAGEDSN      ISSUE MACRO TO GET INFO\n         BAL   R14,SETPTR                    SET -> TO ASSOC\n         MVC   CI(3),SHWACI                  CI OF THE ASSOCIATED ENTRY\n         L     R2,SHWACBP                    GET CATALOG ACB POINTER\n         ST    R2,ACBA                       AND SAVE IT\n         TM    48(R2),X'10'                  IS ACB OPEN?\n         BO    SETPL                         YES, SO OK TO GO ON\n         TPUT  =C'CATALOG NOT OPEN',16       TELL CALLER\n         B     RETURN                        AND EXIT\n         SPACE\n***********************************************************************\n* SET UP CATALOG FIELD PARAMETER LIST                                 *\n***********************************************************************\nSETPL    EQU   *\n         USING CTGFL,R9\n         LA    R9,FLD1\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM1                     A(FIELDNAME)\n         MVC   0(08,R2),=C'ENTNAME '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD2\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM2                     A(FIELDNAME)\n         MVC   0(08,R2),=C'DEVTYP  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         SPACE\n         LA    R9,FLD3\n         MVI   CTGFLDNO,X'01'                1 ENTRY\n         LA    R2,FLDNM3                     A(FIELDNAME)\n         MVC   0(08,R2),=C'VOLSER  '         MOVE IN FIELD NAME\n         ST    R2,CTGFLDNM                   SAVE IT\n         XC    CTGFLCHN(4),CTGFLCHN          ZERO IT OUT\n         DROP  R9\n         SPACE\n***********************************************************************\n* SET UP CATALOG PARAMETER LIST                                       *\n***********************************************************************\n         USING CTGPL,R1\n         LA    R1,CATPL            -> CATALOG PARAMETER LIST\n         OI    CTGOPTN1,CTGBYPSS\n         NI    CTGOPTN1,255-(CTGNAME+CTGCNAME)   CI AND ACB PROVIDED\n         XC    CTGOPTN2(1),CTGOPTN2              CLEAR\n         OI    CTGOPTN3,CTGLOC+CTGNUM+CTGAM0\n         LA    R2,CI               ADDRESS OF CONTROL INTERVAL\n         ST    R2,CTGENT           SAVE IT\n         LA    R2,ACBA             A(CATALOG ACB)\n         ST    R2,CTGCAT           SAVE IT IN PARM LIST\n         LA    R2,AREA             -> WORK AREA\n         ST    R2,CTGWKA           SAVE IT IN PARM LIST\n         MVI   CTGTYPE,C'D'        INDICATE 'DATA' REQD\n         MVI   CTGNOFLD,X'03'      NUMBER OF FPLS\n         LA    R2,FLD1             POINT TO CTGFIELD\n         ST    R2,CTGFIELD         SAVE IT IN PARM LIST\n         LA    R2,FLD2             POINT TO CTGFIELD\n         ST    R2,CTGFL2           SAVE IT IN PARM LIST\n         LA    R2,FLD3             POINT TO CTGFIELD\n         ST    R2,CTGFL3           SAVE IT IN PARM LIST\n         SPACE\n         SVC   26                  ISSUE CATALOG SVC\n         LTR   R15,R15             HOW DID WE DO?\n         EJECT\n         MVC   S99TUKY2+6(44),AREA+4    MOVE PAGEDSN INTO ALLOC LIST\n         MVC   S99TUKY4+6(6),AREA+4+44+4  MOVE VOLSER INTO ALLOC LIST\n         LA    R4,DTYP            -> TO DEVICE TYPE TABLE\n         LA    R1,AREA+4+44       -> TO DEVICE TYPE\nTYPLP    EQU   *\n         CLC   0(4,R1),0(R4)      FIND MATCHING TYPE IN TABLE\n         BE    GOTTYP             GOT IT\n         LA    R4,8(R4)           -> NEXT ENTRY IN TABLE\n         B     TYPLP              GO AND TEST IT\nGOTTYP   EQU   *\n         MVC   S99TUKY5+6(4),4(R4)  INDICATE UNIT(XXXX)\n         MVI   S99VERB,X'01'      INDICATE ALLOC DSNAME(XXXXXXXX)\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               ALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         OPEN  PLPA               -> OPEN PLPA PAGE DATASET\n         GET   PLPA               GET THE FIRST RECORD\n         LR    R9,R11             COPY CVT ADDR\n* --------------------------------------------------------------- *\n*            USE CVTOSLV3 TO DETERMINE THE SYSTEM LEVEL.          *\n*            IT MUST BE Z/OS 1.2 OR HBB7705 OR HIGHER.            *\n* --------------------------------------------------------------- *\n*                                 X'4F3' OFF THE CVT IS CVTOSLV3.\n         TM    X'4F3'(R9),X'10'   IS THIS HBB7705 OR MORE?\n         BNO   GOTTIM             NO. USE THE FIRST RECORD.\n         GET   PLPA               GET THE SECOND RECORD\nGOTTIM   EQU   *\n         MVC   TSTAMP(8),32(R1)   MOVE DATA TO OUR DATA AREA\n         CLOSE PLPA               CLOSE DATASET\n         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)\n         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS\n         ST    R1,S99TXTPP        AND SAVE IN PARM LIST\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               UNALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n*        SETMODE 24\n         TPUT  MSG,LMSG            TELL CALLER\n*        SETMODE 31\nRETURN   EQU   *\n         MOREND\nSETPTR   DS    0H\n         LA    R9,SHWASS           -> ASSOC PTRS\n         CLI   SHWTYPE,C'D'        DATA TYPE?\n         BER   R14                 YES, RETURN\n         CLI   SHWTYPE,C'I'        INDEX TYPE?\n         BER   R14                 RETURN\n         LA    R9,SHWASS0          -> TO ASSOC PTRS\n         BR    R14                 RETURN\n         EJECT\nMSG      DC    C'LAST CLPA WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\nDTYP     EQU   *\n         DC    X'3010200F',C'3390'\n         DC    X'3010200E',C'3380'\n         DC    X'3010200C',C'3375'\n         DC    X'3010200B',C'3350'\n         DC    X'30102009',C'3330'\n         DC    X'3010200D',C'3330'   3330-1\nPLPA     DCB   DDNAME=PLPA,DSORG=PS,RECFM=U,BLKSIZE=80,MACRF=GL\nS99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)                LENGTH=20 BYTES\nS99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)                 ERROR CODE\nS99INFO  DC    AL2(0)                 INFO  CODE\nS99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                   RESERVED\nS99FLAG2 DC    A(0)                   FLAGS 2\nS99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS\n         DC    A(S99TUKY2)\n         DC    A(S99TUKY3)\n         DC    A(S99TUKY4)\n         DC    X'80',AL3(S99TUKY5)    LAST PARM\nS99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0004',C'PLPA'           DDN=PLPA\nS99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME\nS99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR\nS99TUKY4 DC    X'0010',X'0001',X'0006',CL6'VOLSER'       VOLSER\nS99TUKY5 DC    X'0015',X'0001',X'0004',CL4'3390'         DEVTYP\n         DS    0D\nS99LENG  EQU   *-S99RBPTR                 LENGTH\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nINPARM   DC    F'3'\nDAYDATE  DC    CL48' '\nOUTPARM  DC    AL4(16+128)\nWORK     DS    32D\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\n* WORK AREAS ETC FOR DSN LOOKUP\nMVCDSN1  MVC   PAGEDSN(*-*),0(R1)       EXECUTED MOVE\nPAGEDSN  DC    CL44' '\nACBA     DC    F'0'\nCI       DC    CL3' '\nFLDNM1   DC    CL8' '\nFLDNM2   DC    CL8' '\nFLDNM3   DC    CL8' '\nAREA     DC    H'512'               WORK AREA FOR\n         DC    510C' '              SHOWCAT AND SUBSEQUENTLY\n         DC    2C' '                USED BY OTHER PARTS OF PGM\n         SPACE\n         DS    0F\nCATPL    DC    (LCTGPL)X'00'\nCTGFL2   DC    F'0'\nCTGFL3   DC    F'0'\nFLD1     DC    (LCTGFL)X'00'\nFLD2     DC    (LCTGFL)X'00'\nFLD3     DC    (LCTGFL)X'00'\n         EJECT\n         IEZCTGPL\n         SPACE 5\n         IEZCTGFL\n         SPACE 5\n         IGGSHWPL\n         SPACE 5\n         CVT   DSECT=YES\n         END\n./ ADD NAME=LASTXCF  0100-03311-03311-1200-00173-00173-00000-FILE066 00\n         TITLE '*** LASTXCF ***'\nLASTXCF  MOWSTART\nLASTXCF  AMODE   31\nLASTXCF  RMODE   24\n***********************************************************************\n* THIS PROGRAM IS USED TO DETERMINE THE DATE AND TIME OF THE SYSPLEX  *\n* START. CHECKS THE TIMESTAMP IN THE XCF DATASET.                     *\n* GOES IN SYS2.LINKLIB.                                               *\n***********************************************************************\n         USING CVTMAP,R11\n         L     R11,16                  A(CVT)\n         USING ECVT,R10\n         L     R10,CVTECVT             A(ECVT)\n         MVC   MSG+5(8),ECVTSPLX       MOVE SYSPLEX NAME TO MSG AREA\n         MVC   S99TUKY2+6(14),=C'SYS1.?PLX.XCFP'    SETUP XCF DSNAME\n         MVC   S99TUKY2+11(4),ECVTSPLX     PLUG IN PLEX NAME\n         DROP  R10\n         USING IHADCB,R5\n         USING IOBSTDRD,R4\n         L     R0,=F'1024'             LENGTH OF AREA FOR DATA\n         STCM  R0,B'0011',XCFDATA+6    SAVE IT IN CCW\n         GETMAIN R,LV=(0)              GET THE AREA\n         ST    R1,XCFDATA              SAVE IT'S ADDRESS IN THE CCW\n         LR    R10,R1                  COPY ADDRESS OF AREA\n*\n         MVI   S99VERB,X'01'           INDICATE ALLOC DSNAME(XXXXXXXX)\n         LA    R1,S99RBPTR             ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,                    ALLOCATE DATASET\n         LTR   R15,R15                 CHECK RETURN CODE, ASSUME OK\n         LA    R1,XCFDCB               POINT TO THE DCB\n         OPEN  MF=(E,(1))              OPEN THE DATASET\n         LA    R4,IOBE\n         LA    R1,ECBE\n         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL+IOBSPSVC\n         STCM  R1,B'0111',IOBECBPB\n         LA    R5,DCBE\n         STCM  R5,B'0111',IOBDCBPB\n         ICM   R5,B'0111',DCBDEBA\n         USING DEBBASIC,R5\n         LA    R1,DEBBASND\n         USING DEBDASD,R1\n         MVC   IOBCC(4),DEBSTRCC      START CYL/HD OF DATASET CCCCHHHH\n*        MVC   IOBHH(2),DEBSTRHH      HEAD NUMBER             HHHH\n         MVI   IOBR,X'01'             RECORD NUMBER           RR\n         LA    R0,HDRECDCW\n         ST    R0,IOBSTART\n         LA    R0,IOBCC\n         STCM  R0,B'0111',HDRECDCW+9\n         DROP  R1,R4,R5\n         L     R15,RDHEAD              GO READ A RECORD\n         BALR  R14,R15\n* DONE READ\n*        MVC   TSTAMP(8),12(R10)  MOVE TIMESTAMP (LAST TO JOIN TIME)\n         MVC   TSTAMP(8),28(R10)  MOVE TIMESTAMP (SYSPLEX START TIME)\n         LA    R1,XCFDCB          POINT TO THE DCB\n         CLOSE MF=(E,(1))         CLOSE THE DATASET\n         MVI   S99VERB,X'02'      INDICATE FREE DDNAME(XXXXXXXX)\n         LA    R1,S99TUPLF        -> TO FREE TEXT UNITS\n         ST    R1,S99TXTPP        AND SAVE IN PARM LIST\n         LA    R1,S99RBPTR        ADDR OF PARM LIST FOR DYNALLOC.\n         DYNALLOC ,               UNALLOCATE DATASET\n         LTR   R15,R15            CHECK RETURN CODE, ASSUME OK\n         MVC   TZONE(4),CVTTZ     MOVE TIME ZONE OFFSET INTO OUR LIST\n         LA    R1,ARGS            -> TO ARGS FOR TODCN\n         L     R15,=V(TODCN)      ADDRESS OF TIMESTAMP CONVERTER\n         BALR  R14,R15            AND GO THERE\n         MVC   TRET(2),=C'00'\n         PACK  DOUBLE+4(4),TRET(7)\n         LA    R1,PTRS\n         L     R15,=V(JULSUB)\n         BALR  R14,R15\n         LA    R15,MSGDATA\n         MVC   MSGDATA(9),DAYDATE+20 DAY OF WEEK\n         LA    R15,MSGDATA+9\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),DAYDATE   MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(2,R15),TRET+2     YY\n         MVI   3(R15),C'.'\n         MVC   4(3,R15),TRET+4     DDD\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         MVC   0(8,R15),TRET+7     MOVE TIME IN\n         MVI   2(R15),C':'         MOVE IN A COLON\n         MVI   5(R15),C':'         MOVE IN A COLON\n         SETMODE 24\n         TPUT  MSG,LMSG            TELL CALLER\n         SETMODE 31\nRETURN   EQU   *\n         MOREND\nHEADREAD EQU   *\n         MVI   XCFDATA,X'1E'           READ COUNT KEY & DATA\n         XC    ECBE,ECBE               CLEAR ECB\n         LA    R1,IOBE                 POINT TO IOB\n         SVC   0                       EXCP\n         LA    R1,ECBE                 POINT TO ECB\n         LA    R0,1\n         SVC   1                       WAIT\n         CLI   ECBE,X'7F'              I/O COMPLETED?\n*        BER   R14                     YES\n         BR    R14                     RETURN\n         EJECT\nMSG      DC    C'LAST SYSPLEX? START WAS ON '\nMSGDATA  DC    CL60' '\nLMSG     EQU   *-MSG\nARGS     DC    A(TZONE)\n         DC    A(TSTAMP)\n         DC    X'80',AL3(TRET)\nTZONE    DC    F'0'\nTSTAMP   DC    XL8'FFFFFFFFFFFFFFFF'\nTRET     DC    CL24' '             RETURNED IS YYYYDDDHH.MM.SS.MMMMMM\nXCFDS    DCB   DDNAME=XCFDS,DSORG=PS,RECFM=U,BLKSIZE=32760,MACRF=GL\n* WORK AREAS FOR JULSUB ROUTINE FOR DAY DATE CONVERSION\nDOUBLE   DS    D\nINPARM   DC    F'3'\nDAYDATE  DC    CL48' '\nOUTPARM  DC    AL4(16+128)\nWORK     DS    32D\nPTRS     DC    AL4(DOUBLE+4)\n         DC    AL4(INPARM)\n         DC    AL4(DAYDATE)\n         DC    AL4(OUTPARM)\n         DC    X'80',AL3(WORK)\nRDHEAD   DC    A(HEADREAD)\nXCFDCB   DC    X'80',AL3(DCBE)\nDCBE     DCB   DDNAME=XCFDS,DSORG=DA,DEVD=DA,MACRF=E\nHDRECDCW CCW   X'23',*+15,64,1\n         CCW   X'31',0,64,5\n         CCW   X'08',*-8,00,0\nXCFDATA  DC    XL6'00',AL2(00)\nECBE     DC    F'0'\nIOBE     DC    XL40'00'\n*\nS99RBPTR DC    X'80',AL3(S99RB)       SVC 99 REQUEST BLOCK PTR\nS99RB    DS    0F\nS99RBLN  DC    AL1(20)                LENGTH=20 BYTES\nS99VERB  DC    X'01'                  VERB CODE=01 (DSNAME ALLOC)\nS99FLAG1 DC    X'1000'                DONT USE EXISTING ALLOC\nS99ERROR DC    AL2(0)                 ERROR CODE\nS99INFO  DC    AL2(0)                 INFO  CODE\nS99TXTPP DC    A(S99TUPLA)            POINTER TO TEXT UNIT POINTERS\nS99RSVD1 DC    A(0)                   RESERVED\nS99FLAG2 DC    A(0)                   FLAGS 2\nS99TUPLA DC    A(S99TUKY1)            TEXT UNIT POINTERS\n         DC    A(S99TUKY2)\n         DC    X'80',AL3(S99TUKY3)    LAST PARM (ALLOC)\nS99TUPLF DC    X'80',AL3(S99TUKY1)    LAST PARM (FREE)\nS99TUNIT DS    0F\nS99TUKY1 DC    X'0001',X'0001',X'0005',C'XCFDS'          DDN=XCFDS\nS99TUKY2 DC    X'0002',X'0001',X'002C',CL44'*    '       DSNAME\nS99TUKY3 DC    X'0004',X'0001',X'0001',X'08'             SHR\n         DS    0D\nS99LENG  EQU   *-S99RBPTR                 LENGTH\n         DS    0F\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAECVT\n         DCBD  DEVD=DA,DSORG=XA\n         IEZIOB\n         IEZDEB LIST=YES\nTIOT     DSECT\n         IEFTIOT1\n         END\n./ ADD NAME=LELVL    0128-98091-07094-1528-00083-00014-00077-TCACF0  00\n         TITLE '*** LELVL ***'\n***********************************************************************\n* PROGRAM REPORTS ON THE CURRENT LE LEVEL AND PLATFORM.               *\n* DOC IS LE PROGRAM REF.                                              *\n***********************************************************************\nLELVL    CEEENTRY PPA=MAINPPA,BASE=11,AUTO=WORKSIZE,MAIN=YES,          *\n               EXECOPS=YES,PARMREG=1\n         USING CEECAA,R12\n         USING WORKAREA,R13\n         CALL  CEEGPID,(CEE_VER_ID,PLAT_ID,0),VL\n         UNPK  MSGT+12(7),CEE_VER_ID+1         JUST UNPACK THE DATA\n         NC    MSGT+12(7),=6X'0F'              MAKE IT BINARY\n         TR    MSGT+12(7),=C'0123456789ABCDEF' CONVERT TO CHARACTER\n         MVI   MSGT+18,C','\n         L     R1,PLAT_ID\n         CVD   R1,DOUBLE                       MAKE IT DECIMAL\n         MVC   MSGT+31(2),=X'4021'\n         ED    MSGT+31(02),DOUBLE+7            EDIT NUMBER INTO IT\n         MVI   MSGT+34,C'='\n         BCTR  R1,0\n         SLL   R1,3                            MULTIPLY BY 8\n         LA    R2,PLAT_NAM                     POINT TO NAMES TABLE\n         AR    R2,R1                           POINT TO OUR NAME\n         MVC   MSGT+36(8),0(R2)                MOVE NAME INTO MESSAGE\n         CALL  CEEMOUT,(MSG,DEST,0),VL         DISPLAY RESULTS\n         MVI   MSGT,X'40'                      CLEAR MESSAGE LINE\n         MVC   MSGT+1(L'MSGT-1),MSGT\n* PROCESS DATA FROM CEECAA\n         MVC   MSGT(08),=C'OS = MVS'\n         CLI   CEECAASYSTM,CEECAASYMVS         IS THIS MVS?\n         BE    GETHW                           YES\n         MVC   MSGT(08),=C'OS =  VM'           ONLY OTHER POSSIBILITY\nGETHW    EQU   *\n         MVC   MSGT+10(16),=C'H/W = 370 NON-XA'\n         CLI   CEECAAHRDWR,CEECAAHW370\n         BE    GETSUBS\n         MVC   MSGT+10(16),=C'H/W = 370 XA    '\n         CLI   CEECAAHRDWR,CEECAAHWXA\n         BE    GETSUBS\n         MVC   MSGT+10(16),=C'H/W = 370 ESA   '\n         CLI   CEECAAHRDWR,CEECAAHWESA\n         BE    GETSUBS\nGETSUBS  EQU   *\n         MVC   MSGT+28(14),=C'SUBSYS =   TSO'\n         CLI   CEECAASBSYS,CEECAASSTSO\n         BE    PUTCAA\n         MVC   MSGT+28(14),=C'SUBSYS =  CICS'\n         CLI   CEECAASBSYS,CEECAASSCIC\n         BE    PUTCAA\n         MVC   MSGT+28(14),=C'SUBSYS = BATCH'\n         CLI   CEECAASBSYS,CEECAASSNON\n         BE    PUTCAA\nPUTCAA   EQU   *\n         CALL  CEEMOUT,(MSG,DEST,0),VL        DISPLAY RESULTS\n         MVI   MSGT,X'40'                     CLEAR MESSAGE LINE\n         MVC   MSGT+1(L'MSGT-1),MSGT\n         CALL  CEEMOUT,(MSG,DEST,0),VL        PUT OUT A BLANK LINE\nFIN      EQU   *\n         CEETERM RC=0,MODIFIER=0\nDOUBLE   DC    D'0'\nDEST     DC    F'2'\nMSG      DC    Y(MSGLEN)\nMSGT     DC    CL80'LE LEVEL IS VVRRMM, PLATFORM IS X'\nMSGLEN   EQU   *-MSGT\nCEE_VER_ID DC  F'999'           LE VERSION PPVVRRMM FORM\nPLAT_ID  DC    F'1'             3 = Z/OS, 4 = AS/400, 5 = VSE\nPLAT_NAM DC    CL8'???   '      1\n         DC    CL8'OS/2  '      2   SEE EXAMPLES IN LE PGM REF.\n         DC    CL8'Z/OS  '      3\n         DC    CL8'AS/400'      4\n         DC    CL8'VSE   '      5\n         REQU\nMAINPPA  CEEPPA\nWORKAREA DSECT\n         ORG   *+CEEDSASZ\n         DS    0D\nWORKSIZE EQU   *-WORKAREA\n         CEEDSA\n         CEECAA\n         END\nCEEUOPT  CSECT\n         CEEXOPT RPTOPTS=(ON)\n         END\n./ ADD NAME=LNKLST   0100-03311-03311-1200-00094-00094-00000-FILE066 00\n         TITLE '*** DISPLAY LINKLIST LIBRARY NAMES ***'\nLNKLST   MOWSTART\nLNKLST   AMODE 31\nLNKLST   RMODE 24\n***********************************************************************\n* PROGRAM LISTS NAMES OF LINKLIST LIBRARIES                           *\n* GOES IN SYS2.LINKLIB, AC=1. PUT ENTRY IN IKJTSO00                   *\n*                                                                     *\n* LOOK INTO REDOING USING CSVDYNL REQUEST=LIST                        *\n***********************************************************************\n         L     R2,16                   A(CVT)\n         USING CVT,R2\n         L     R3,CVTECVT              A(ECVT)\n         USING ECVT,R3\n         L     R10,ECVTDLCB\n         USING CSVDLCB$,R10\n         L     R4,DLCBLLT              A(LINKLIB LIST)\n         USING LLT,R4\n         MVC   LINE+07(8),DLCBLNAM\n         L     R9,LLTCOUNT             NUMBER OF ENTRIES IN LIST\n         CVD   R9,DOUBLE               MAKE IT DECIMAL\n         MVC   LINE+24(04),=X'40202120'\n         ED    LINE+24(04),DOUBLE+6    EDIT NUMBER INTO IT\n         TPUT  LINE,L'LINE             SHOW RESULT\n         SR    R8,R8                   CLEAR FOR EXT COUNTER\n         SR    R6,R6                   CLEAR\n         LA    R7,LLTDSNL              GET LENGTH OF DSN ENTRY PART\n         MR    R6,R9                   FIND OFFSET TO APF PLACE\n         LA    R7,8(R4,R7)             POINT TO APF ENTRIES\n         USING LLTANTRY,R7             TELL ASSEMBLER\n         LA    R4,LLTENTRY             PAST FUNNY HEADING GARBAGE\n         USING LLTENTRY,R4\n         SR    R5,R5                   CLEAR IT OUT\nNEXTNAME EQU   *\n         IC    R5,LLTDSLTH             GET LENGTH OF NAME\n         MVC   LINE+7(44),LLTDSN       COPY NAME TO OUTPUT AREA\n         LOCATE LOCLIST                GET VOLSER\n         XC    UWORK,UWORK             CLEAR WORK AREA\n         MODESET MODE=SUP\nUCBLOOP  EQU   *\n         UCBSCAN ADDRESS,WORKAREA=UWORK,UCBPTR=UCBPTR,NOPIN,           *\n               DYNAMIC=YES,RANGE=ALL,DEVCLASS=DASD,LOC=ANY\n         LTR   R15,R15                 SUCCESSFUL?\n         BNZ   FIN                     END OF UCBS\n         L     R11,UCBPTR              GET UCB ADDRESS\n         USING UCBOB,R11\n         CLC   UCBVOLI,VOLSER          IS THIS OUR VOLUME'S UCB?\n         BNE   UCBLOOP                 CONTINUE SEARCHING UCB TABLE\nUCBFND   EQU   *\n         MODESET MODE=PROB\n         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST ZERO BUFFER LIST\n         OI    BFLHFL,BFLHDSCB         DSCBS TO BE READ WITH\n         MVI   BFLHNOE,1               ONE BUFFER LIST ENTRY\n         LA    R6,DS1FMTID             ADDRESS OF DSCB BUFFER\n         ST    R6,BFLEBUF              STORE IN BUFFER LIST\n         MVI   BFLELTH,DSCBLTH         DATA PORTION OF DSCB READ\n         LA    R10,LLTDSN              A(DSNAME)\n         CVAFDIR ACCESS=READ,DSN=(R10),UCB=(R11),BUFLIST=BUFLIST\n         USING DS1FMTID,R6             POINT TO F1 DSCB\n         SR    R1,R1                   CLEAR\n         IC    R1,DS1NOEPV             GET # EXTS\n         AR    R8,R1                   ADD TO TOTAL\n         MVC   LINE(6),VOLSER          PUT VOLSER IN LINE\n         TPUT  LINE,L'LINE             DISPLAY NAME OF LIBRARY\n         LA    R4,LLTDSNL(R4)          POINT TO NEXT NAME\n         BCT   R9,NEXTNAME             GET NEXT NAME\n         MVC   LINE(80),=CL80'LINKLST HAS???? EXTENTS'\n         CVD   R8,DOUBLE               MAKE IT DECIMAL\n         MVC   LINE+11(04),=X'40202120'\n         ED    LINE+11(04),DOUBLE+6    EDIT NUMBER INTO IT\n         TPUT  LINE,L'LINE             SHOW RESULT\nFIN      EQU   *\n         MOREND\nDOUBLE   DC    D'0'                    WORK SPACE\nLINE     DC    CL80'LNKLST XXXXXXXX CONTAINS???? LIBRARIES'\nCATBLOCK DC    265C' '\nVOLSER   EQU   CATBLOCK+6\nBUFLIST  ICVAFBFL DSECT=NO\n*  UCB LOOKUP WORK AREA AND PARM LIST VARIABLES\nFLAG     DC    X'00'\nUCBPTR   DC    F'0'              PTR TO UCB\nUWORK    DS    XL100             WORK AREA, MUST BE ZEROED\n         SPACE 1\n         IECSDSL1 (1)\nDSCBLTH  EQU   *-IECSDSL1-L'DS1DSNAM\nLOCLIST  CAMLST NAME,LINE+7,,CATBLOCK\n         CSVDLCB$\n         PRINT NOGEN\n         IHALLT\n         CVT   DSECT=YES\n         IHAECVT\nCVPL     ICVAFPL\n         IEFUCBOB LIST=NO\n         END\n./ ADD NAME=LPARCAP  0125-04063-11217-1404-00241-00045-00203-TCACF0  00\n         TITLE '*** LPARCAP ***'\nLPARCAP  MOWSTART\nLPARCAP  AMODE 31\nLPARCAP  RMODE 24\n***********************************************************************\n* GET CAPACITY (ILM) INFO FROM LPAR                                   *\n* GOES IN SYS2.LINKLIB, AC(1)                                         *\n***********************************************************************\nMOWWORK  DSECT\nDOUBLE   DC    D'0'\nCECMSUS  DC    F'0'                    CEC MSUS\nNUMCPS   DC    F'0'                    NUMBER OS CPS (NOT ICF/IFLS)\nSUMWTS   DC    F'0'                    SUM OF OS LPAR WEIGHTS\nRETCODE  DC    F'0'                    RETURN CODE\nQVSDATA  DC    CL256' '\nQVSDATAL EQU   (*-QVSDATA)\nLPARTAB  DC    16CL16' '               ROOM FOR 16 LPARS\n*         ORG   LPARTAB\n*LPARNAM  DC    CL8' '                  LPAR NAME\n*LPARWT   DC    F'0'                    LPAR WEIGHT\n*LPARCP   DC    F'0'                    LPAR NUM CPUS\nLPARCAP  CSECT\n         LA    R11,QVSDATA             -> TO DATA AREA\n         USING QVS,R11                 TELL ASSEMBLER\n         LA    R1,QVSDATAL             GET LENGTH OF DATA AREA\n         ST    R1,QVSLEN               SAVE IT\n         LR    R1,R11                  COPY ADDRESS FOR PARM POINTER\n         SYSEVENT QVS\n         MVC   MSG+00(04),QVSCECMACHINETYPE            MACHINE TYPE\n         MVC   MSG+05(16),QVSCECMODELID                MODEL\n         MVC   MSG+22(16),QVSCECSEQUENCECODE           SERIAL #\n*        MVC   MSG+40(16),QVSCECMANUFACTURERNAME\n*        MVC   MSG+45(04),QVSCECPLANTOFMANUFACTURE\n         ICM   R1,B'1111',QVSCECCAPACITY               MACHINE MSUS\n         ST    R1,CECMSUS                              SAVE IT\n         CVD   R1,DOUBLE\n         MVC   MSG+38(07),=X'4020206B202120'\n         ED    MSG+38(07),DOUBLE+5  EDIT NUMBER INTO IT\n         MVC   MSG+46(08),QVSIMGLOGICALPARTITIONNAME   LPAR NAME\n*        MVC   MSG+60(16),QVSIMGLOGICALPARTITIONID\n         ICM   R1,B'1111',QVSIMGCAPACITY               LPAR MSUS\n         CVD   R1,DOUBLE\n         MVC   MSG+54(07),=X'4020206B202120'\n         ED    MSG+54(07),DOUBLE+5  EDIT NUMBER INTO IT\n*        MVC   MSG+00(08),QVSVMNAME\n*        MVC   MSG+00(16),QVSVMCAPACITY\n         OPEN  (SYSPRINT,(OUTPUT))\n         PUT   SYSPRINT,MSG0\n*        TPUT  MSG0,L'MSG0\n*        TPUT  MSG,L'MSG\n* OBTAIN 1 PAGE AND FIX IT (FOR THE PRSM BUFFER)\n         MODESET  MODE=SUP,KEY=ZERO\n         GETMAIN  RU,LV=4096,BNDRY=PAGE     GETMAIN 1 PAGE\n         LR    R8,R1                  KEEP ADDRESS OF PAGE\n         L     R7,=F'4096'\n         AR    R7,R8                  END ADDRESS\n         PGFIX R,A=(R8),ECB=0,EA=(R7) FIX THE PAGE FOR DIAGNOSE\n         ST    R15,RETCODE\n         MODESET MODE=PROB,KEY=NZERO\n         L     R1,RETCODE             TEST RC FROM FIX\n         LTR   R1,R1\n         BZ    FIX0\n         TPUT  =C'** BAD RETURN CODE AFTER PGFIX **',33\n         B     END0\n* ISSUE DIAGNOSE INSTRUCTION TO GET PRSM DATA\nFIX0     DS    0H\n         MODESET MODE=SUP,KEY=ZERO\n         LRA   R1,0(R8,0)                  LOAD REAL ADDRESS\n         LA    R0,4\n         DC    X'83',X'10',X'0204'         DIAGNOSE CODE 0204\n         LTR   R0,R0\n         BNZ   FIN\n         MODESET MODE=PROB,KEY=NZERO\n         LR    R5,R8\n         USING DDBL1,R5\n         LH    R2,DDBNUMPP                 NUMBER OF PHYSICAL PROCS.\n         ST    R2,NUMCPS                   SAVE IT TO ADJUST LATER\n         SR    R2,R2                       CLEAR REG\n         IC    R2,DDBNUMCP                 NUM LPARS - LOOP COUNTER\n         LA    R2,1(,R2)                   ADD 1 FOR THE 'PHYSICAL'\n         LA    R7,LPARTAB                  POINT TO LPAR TABLE\n         LR    R4,R5\n         AH    R4,DDBORGPN                 POINTING TO 1ST LPAR\n         USING DDBPPDTA,R4\n         XC    SUMWTS(4),SUMWTS            ZERO SUM OF WEIGHTS\nPARTLOOP EQU   *\n         MVC   0(8,R7),DDBPRNAM            GET LPAR NAME\n         SR    R3,R3\n         IC    R3,DDBNMVP                  GET NUMBER OF PROCESSORS\n         ST    R3,08(,R7)                  SAVE LPARCP\n         LH    R1,DDBPRELS                 WEIGHT OF THIS PROCESSOR\n         ST    R1,12(,R7)                  SAVE IT TOO\n         MVC   08(1,R7),DDBPUSE            SAVE PROCESSOR USE FLAG\n         TM    DDBPUSE,DDBPICF             IS PROCESSOR AN ICF/IFL?\n         BO    CPLP                        YES - SO DON'T COUNT IT\n         A     R1,SUMWTS                   ADD THIS LPAR WT TO TOTAL\n         ST    R1,SUMWTS                   AND SAVE NEW TOTAL.\nCPLP     EQU   *\n         C     R2,=F'1'                    LAST ENTRY - PP ENTRY?\n         BNE   CPLP1\n         TM    DDBPUSE,DDBPICF             ICF/IFL?\n         BZ    CPLP1\n         L     R1,NUMCPS                   GET NUMBER OF CPS\n         BCTR  R1,0                        SUBTRACT ONE\n         ST    R1,NUMCPS                   SAVE IT\nCPLP1    EQU   *\n         LA    R4,PRPRLENG(,R4)            BUMP OVER CP SECTION\n         BCT   R3,CPLP\n         LA    R7,16(,R7)                  NEXT SLOT\n         LA    R4,PRPALENG(,R4)\n         BCT   R2,PARTLOOP                 NEXT PARTITION\nEND0     DS    0H                          POINT TO NEXT ENTRY\n* FREE THE ALLOCATED PAGE\n         MODESET  MODE=SUP,KEY=ZERO\n         L     R7,=F'4096'\n         AR    R7,R8                       END ADDRESS\n         PGFREE R,A=(R8),ECB=0,EA=(R7)     UNFIX PAGE IN MEMORY\n         FREEMAIN RC,LV=4096,A=(8)\n         MODESET  MODE=PROB,KEY=NZERO\n***********************************************************************\n* NOW PROCESS THE LPAR TABLE                                          *\n***********************************************************************\n*                                                                     *\n* Item RTA000174591                                                   *\n*                                                                     *\n*  MVS PARTITION NAME                    SYSW                         *\n*  IMAGE CAPACITY                         127                         *\n*  NUMBER OF CONFIGURED PARTITIONS          7                         *\n*  NUMBER OF PHYSICAL PROCESSORS           11                         *\n*                     CP                    9                         *\n*                     ICF                   2                         *\n*  WAIT COMPLETION                         NO                         *\n*  DISPATCH INTERVAL                  DYNAMIC                         *\n*                                                                     *\n*  --------- PARTITION DATA -----------------  -- LOGICAL             *\n*                     ----MSU----  -CAPPING--  PROCESSOR-             *\n*  NAME       S   WGT  DEF    ACT  DEF   WLM%  NUM   TYPE             *\n*  SYSJ       A   506    0    147  NO     0.0    9   CP               *\n*  SYSD       A    14    0      0  NO     0.0    1   CP               *\n*  SYSL       A    11    0      0  NO     0.0    1   CP               *\n*  CMCC       A    47    0      3  NO     0.0    2   CP               *\n*  SYSW       A   421    0    130  YES    0.0    4   CP               *\n*  *PHYSICAL*                                                         *\n*                                                                     *\n* For LPs with processor resource capping, PR/SM LPAR enforces the    *\n* processing weights to within 3.6% of the LP's physical CP share for *\n* logical CPs entitled to 1/10 or more of one physical CP. Typically, *\n* PR/SM LPAR will manage processing weights to within 1% of the LP's  *\n* physical CP share.                                                  *\n*                                                                     *\n* So for your system the calculations work as follows:                *\n*                                                                     *\n* Weight per LCP is 421/4 LCPs = 105.25.                              *\n* The capacity of a Physical CP (PCP) is 999/9=111.                   *\n* The LCP share per PCP is 95%.                                       *\n* So the 3.6% share for this LPAR is 3.8 (.036*105.25)                *\n* This gives a resulting weight range of 101.2 <-> 108.8              *\n* And a resulting utilization range of 40.5% <-> 43.6% (calculated as *\n* (101.2*4)/999=.405 and (108.8*4)/999=.436                           *\n* With the 1C9 rated at 302 MSU this says the range of expected       *\n* capacity is 122 MSUs<->132 MSUs. (.405*302=122, and .436*302=132).  *\n*                                                                     *\n* So the range of Actual capacity which can be seen by this LPAR is   *\n* 122 to 132 and so your value of 130 is within the expected range,   *\n* though a little higher than the 1%.                                 *\n***********************************************************************\n         LA    R2,16                       MAX NUMBER OF LPARS\n         LA    R7,LPARTAB                  POINT TO LPAR TABLE\nLISTLPAR EQU   *\n         MVC   MSG+46(08),0(R7)            LPAR NAME\n         TM    8(R7),DDBPICF               ICF/IPL?\n         BO    NOCALC\n         SR    R4,R4                       CLEAR FOR DIVIDE\n         L     R5,12(R7)                   LPAR WEIGHT\n         D     R4,SUMWTS                   DIVIDE BY TOTAL WEIGHT\n         LR    R5,R4\n         SR    R4,R4\n         M     R4,CECMSUS                  MULTIPLY BY CEC MSUS\n         D     R4,=F'10'\n         CVD   R5,DOUBLE                   LPAR WEIGHT\n         MVC   MSG+54(07),=X'402021204B2020'\n         ED    MSG+54(07),DOUBLE+5  EDIT NUMBER INTO IT\nNOCALC   EQU   *\n         LH    R1,10(R7)                   GET NUM CPS\n         CVD   R1,DOUBLE\n         MVC   MSG+61(04),=X'40202120'\n         ED    MSG+61(04),DOUBLE+6\n         L     R1,12(R7)                   GET WEIGHT\n         CVD   R1,DOUBLE\n         MVC   MSG+65(04),=X'40202120'\n         ED    MSG+65(04),DOUBLE+6\n         PUT   SYSPRINT,MSG\n*        TPUT  MSG,L'MSG\n         MVI   MSG,C' '                    CLEAR OUT MESSAGE\n         MVC   MSG+1(L'MSG-1),MSG\n         LA    R7,16(,R7)                  POINT TO NEXT LPAR ENTRY\n         CLC   0(8,R7),=C'PHYSICAL'\n         BE    FIN\n         BCT   R2,LISTLPAR\nFIN      EQU   *\n         CLOSE (SYSPRINT)\n         MOREND\nMSG0     DC    CL80'MACH/----MODEL ID----/---SERIAL #-----/---CEC/--LPA*\n               R--/---MSU/-CP/-WT/'\nMSG      DC    CL80' '\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS\n         IRAQVS\n* THIS DSECT DESCRIBES THE CONTENTS OF THE PR/SM BUFFER (OCO)\n* RETURNED BY THE DIAGNOSE X'204' INSTRUCTION. MAPPED BY ERBDDBL1.\n* DOC IS IN RMF DATA AREAS, LY28-1303\nDDBL1    DSECT\n* HEADER\nDDBNUMCP DS    CL1     HOW MANY PARTITIONS\nDDBFLAG1 DS    CL1     TIMER INFORMATION BLOCK HEADER FLAGS\nDDBGTMSL DS    CL2     TIME SLICE\nDDBNUMPP DS    CL2     HOW MANY PHYSICAL PROCESSORS\nDDBORGPN DS    H       OFFSET TO ENTRY FOR CURRENT PARTITION\nDDBTODCK DS    D       TOD\nPRPRFLEN EQU   (*-DDBL1)\n* ENTRY FOR PARTITION\nDDBPPDTA DS    0F\nDDBLPNN  DS    CL1     PARTITION NUMBER\nDDBNMVP  DS    CL1     HOW MANY LOGICAL PROCESSORS FOR THIS PARTITION\n         DS    CL6     RESERVED\nDDBPRNAM DS    CL8     NAME OF THE PARTITION\nPRPALENG EQU   (*-DDBPPDTA)\n* ENTRY FOR LOGICAL PROCESSOR IN USE BY THE PARTITION\nDDBVPDBS DS    0F\nDDBVPADR DS    CL2     LOGICAL PROCESSOR NUMBER\n         DS    CL2     RESERVED\nDDBPUSE  DS    CL1     PROCESSOR USE FLAG\nDDBPSTD  EQU   X'00'   STANDARD PROCESSOR\nDDBPICF  EQU   X'01'   ICF/IFL PROCESSOR\nDDBVPFGS DS    CL1     FLAG (WAIT ASSIST, ETC)\nDDBWSTAS EQU   X'80'   WAIT COMPLETION FLAG\nDDBCAPFL EQU   X'40'   PARTITION CAPPING FLAG\nDDBPRELS DS    H       WEIGHT OF PARTITION\nDDBPDTIM DS    D       TIME A LOGICAL PROC. WAS DISPATCHED ON A PHYS.\nDDBEFFDT DS    CL8\nPRPRLENG EQU   (*-DDBVPDBS)\n         CVT   DSECT=YES\n./ ADD NAME=MONJOBS  0176-02081-11313-1103-01325-01229-01325-TCACF0  00\n         TITLE 'MONJOBS: LOOK FOR CPU LOOPS AND VIRTUAL STORAGE CREEP'\n***********************************************************************\n*                                                                     *\n*   WARNING- THIS CODE USES PROTECT KEY 0 AND SUPERVISOR STATE,       *\n*   SO IT CAN DO SERIOUS DAMAGE. REVIEW THE LOGIC AND TEST THIS       *\n*   THOROUGHLY BEFORE USING IN A PRODUCTION ENVIRONMENT. THIS CODE    *\n*   MAY OR MAY NOT FUNCTION PROPERLY IN EVERY ENVIRONMENT.            *\n*                                                                     *\n***********************************************************************\n* MACRO LIBS NEEDED: SYS1.MACLIB                                      *\n*                    SYS1.MODGEN                                      *\n*                                                                     *\n* LINKAGE EDITOR PARMS: DEFAULT                                       *\n*                                                                     *\n* GOES IN SYS2.PP.LINKLIB, AC(1)                                      *\n*                                                                     *\n* PURPOSE:                                                            *\n*        MONJOBS SCANS THE ASCB CHAIN LOOKING FOR JOBS THAT ARE       *\n*        USING POOR JUDGEMENT IN THEIR USE OF CPU RESOURCE            *\n*        THE BASIC FUNCTIONS ARE:                                     *\n*        1) IF JOB CLASS = EXPRESS & CPU TIME > 6 SECONDS: CANCEL     *\n*        2) MAINTAIN A TABLE OF JOBS AND FIND CPU DELTAS              *\n*           A. IF DELTA > 5 MINUTES AND (NO CHANGE IN SHORT WAIT      *\n*              OR IO COUNT) THEN ISSUE WTO                            *\n*           B. IF NON-SWAPPABLE STC RUN SRB TO GET LDA VALUES         *\n*              IF VIRTUAL MEMORY CREEP FOUND, ISSUE WTO               *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*  SUPERVALU, INC 12-2001  ALAN FIELD, ALAN RECKNER                   *\n*     ORIGINAL CODE WAS MODIFIED                                      *\n*  12-2001 ALAN FIELD -                                               *\n*          ADDED PARM TO BE ABLE TO SET WAKE-UP TIME AND DELTA        *\n*          VIZ. PARM='WW,DDD' WHERE TIMES ARE IN SECONDS.             *\n*          CHANGES LIMIT & LOOPCPU VALUES                             *\n*  3-20-02 AR DOCUMENTED THE ORIGINAL CODE, IDENTIFIED SOME           *\n*          UNUSED CODE, STARTED TO ADD LOGIC TO USE TRUE DELTA        *\n*  CPU TIME RATHER THAN ACCUMULATED CPU FROM START. A CICS REGION     *\n*  CAN RUN FINE FOR DAYS AND THEN GO INTO A LOOP.                     *\n*  4-2-02 AR- ADD LOGIC TO SRB ROUTINE TO FIND PROGRAM NAME           *\n*             ADDED EXCLTBL LIST OF JOBNAMES TO EXCLUDE BECAUSE       *\n*             THEY ALWAYS EAT A LOT OF CPU                            *\n*   CHANGED RMODE ANY TO RMODE 24 SO DCB STAYS BELOW 16 MEG LINE      *\n*  4-15-02 AR- IS DEBUG VERSION, ORIGINAL CODE IS MONJOBSB            *\n*             LOOK FOR R13 MISUSE                                     *\n*    CHANGE VERSION # AT LINE 25000   #################               *\n*  4-30-02 AR- MON142I MESSAGE # FOR STC, FOR AUTO OPS TO USE         *\n*  6-17-02 AR- CHANGED LOGIC TO CHECK EXCLTBL FOR JOB, STC, TSO       *\n*          AND ADD WLM, GRS, OTHERS TO EXCLTBL THAT SEEM TO HAVE      *\n*          BOGUS ALERT MESSAGES FOR EXCESSIVE CPU USAGE               *\n*  7-18-02 AR- CHECK CICS REGION FOR EXCESSIVE CPU EVEN IF THERE      *\n*          IS SOME I/O. REGION IS OK, BUT THERE IS A BAD TRAN.        *\n*  9-15-11 AR-FROM ALAN FIELD. ADD BOISE CICS JOBNAMES                *\n* 11-09-11 ACF - MSGIDS TO TCMCT0'S MODS                              *\n*                                                                     *\n*                                                                     *\n* NOTES:                                                              *\n*                                                                     *\n*                 REGISTER CONVENTIONS =                              *\n*                                                                     *\n*                    REGISTER  0       = UNUSED                       *\n*                    REGISTER  1       = ADDRESS OF INPUT PARAMETERS  *\n*                    REGISTER  2       = WORK                         *\n*                    REGISTER  3       = TBLENTRY DSECT               *\n*                    REGISTER  4       = WORK                         *\n*                    REGISTER  5       = ASVT                         *\n*                    REGISTER  6       = SRB                          *\n*                    REGISTER  7       = CSCB                         *\n*                    REGISTER  8       = ASCB                         *\n*                    REGISTER  9       = ADDRESS SPACE COUNTER        *\n*                    REGISTER  10      = ADDRESS SPACE VECTOR POINTER *\n*  AR 4-15-02 NOT    REGISTER  11      = CALCULATION BLOCK            *\n*             NOW    REGISTER  11      = WORKAREA\n*                    REGISTER  12      = MODULE BASE REGISTER         *\n* AR 4-15-02 NOT     REGISTER  13      = WORKAREA                     *\n*            NOW     REGISTER  13      = LINKAGE ONLY\n*                    REGISTER  14      = WORK                         *\n*                    REGISTER  15      = WORK                         *\n*                                                                     *\n*                PATCH LABEL = N/A                                    *\n*                                                                     *\n*                ATTRIBUTES =                                         *\n*                                                                     *\n*             ENTRY POINTS = MONJOBS (ONLY ENTRY POINT)               *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT =                                                *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE =                                        *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*  3-20-02 LOAD EP=MONJOBSS  TO LOAD SRB ROUTINES                     *\n*  3-20-02 LINK EP=IRXJCL    EXECUTE SOME REXX CODE TO NOTIFY SOMEBODY*\n*                                                                     *\n*                                                                     *\n*                ROUTINES =                                           *\n*                                                                     *\n*                DATA AREAS =                                         *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, RETURN                                   *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES =                                           *\n***********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5          USE FOR ASVT\nR6       EQU   6\nR7       EQU   7          USE FOR CHAIN\nR8       EQU   8          USE FOR ASCB\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nFPR0     EQU   0\nFPR2     EQU   2\nFPR4     EQU   4\nFPR6     EQU   6\nZERO     EQU   0\nONE      EQU   1\nTWO      EQU   2\nTHREE    EQU   3\nFOUR     EQU   4\nFIVE     EQU   5\nSIX      EQU   6\nSEVEN    EQU   7\nEIGHT    EQU   8\nNINE     EQU   9\nTEN      EQU   10\nELEVEN   EQU   11\nTWELVE   EQU   12\nFOURTEEN EQU   14\nFIFTEEN  EQU   15\nSIXTEEN  EQU   16\nSEVNTEEN EQU   17\nEIGHTEEN EQU   18\nTWENTY   EQU   20\nPOSTED   EQU   B'01000000'\nMASK0111 EQU   B'00000111'\nMASK1000 EQU   B'00001000'\nMASK1110 EQU   B'00001110'\nALLBITS  EQU   B'11111111'\nMONJOBS  AMODE 31\n*ONJOBS  RMODE ANY\nMONJOBS  RMODE 24\n         EJECT\n***********************************************************************\n*      MODULE ENTRY POINT                                             *\n***********************************************************************\n         SPACE 3\nMONJOBS  CSECT\n         USING MONJOBS,R15         TEMPORARY ADDRESSABILITY\n         B     BEGIN               SKIP OVER THE EYECATCHER\n         DC    CL8'MONJOBS'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n*\nBEGIN    DS    0H\n         SAVE  (14,12)             SAVE THE CALLER REGISTERS\n         LR    R12,R15             SET UP MODULE BASE REGISTER\n         DROP  R15                 FORGET THAT\n         USING MONJOBS,R12         MODULE ADDRESSABILITY\n         L     R10,ZERO(R1)        GET THE PARAMETER ADDRESS\n*  AR 4-15-02 WHY R10 ???\n         L     R1,0(,R1)           PARM POINTER\n         LH    R2,0(,R1)           GET PARM LENGTH\n         LTR   R2,R2               ANY LENGTH\n         BZ    NOPARM              NO, SO USE CODED VALUES\n         LA    R4,2(R1)            -> TO PARM DATA\n         LR    R3,R4               COPY REG\nLP1      EQU   *\n         CLI   0(R4),C','          LOOK FOR COMMA\n         BE    LP2                 FOUND IT\n         LA    R4,1(,R4)           NEXT CHAR\n         B     LP1                 LOOK AGAIN\nLP2      EQU   *\n         SR    R4,R3               LENGTH OF NUMBER TO PACK\n         BAL   R14,PACKIT          GO CONVERT NUMBER\n         MH    R5,=H'100'          CONVERT TO 1/100THS SECOND\n         ST    R5,LIMIT      **    GO TO SLEEP FOR THIS VALUE\n         LA    R4,2(,R4)           POINT TO START OF NEXT NUMBER\n         SR    R2,R4               REMAINING LENGTH OF PARM\n         AR    R3,R4               -> START OF NEXT NUMBER\n         LR    R4,R2               GET LENGT IN CORRECT REG\n         BAL   R14,PACKIT\n         MH    R5,=H'100'          CONVERT TO 1/100THS SECOND\n         ST    R5,LOOPCPU     **   CPU LOOPING LIMIT\nNOPARM   EQU   *\n         GETMAIN R,LV=WRKLNGTH,LOC=(BELOW,ANY) GET A SAVE/WORK AREA\n         XC    ZERO(256,R1),ZERO(R1) MAKE SURE IT'S BINARY ZEROES\n         LR    R11,R1              SAVE WORK AREA ADDRESS\n         ST    R13,FOUR(R11)       LINK FORWARD\n         ST    R11,EIGHT(R13)      LINK BACKWARD\n         LR    R13,R11             ESTABLISH WORK AREA\n         USING WORKAREA,R11        FIELD ADDRESSABILITY\n*\n***********************************************************************\n*      BUILD EXCLTBL 4-2-02. LIST OF JOBS THAT ROUTINELY EAT A LOT    *\n*            OF CPU, SO DO NOT CREATE AN ALERT FOR THEM.\n***********************************************************************\n         GETMAIN RC,LV=4096,LOC=ANY FOR EXCLTBL\n*\n         LTR   R15,R15             MAKE SURE THE GETMAIN WORKED\n         BNZ   FAILURE             NOPE, WE BETTER FIND OUT WHY\n         ST    R1,WRKEXCT          SAVE EXCLTBL ADDRESS\n         LR    R4,R1                POINT TO BEGIN OF TABLE\n         ST    R4,WRKEXCTE          END OF TABLE MARKER\n         MVC   4085(7,R1),=C'EXCLTBL'    EYECATCHER AT TABLE END\n         L     R2,=F'4085'\nP10010   MVI   0(R1),C' '          BLANK OUT TABLE\n         LA    R1,1(R1)\n         BCT   R2,P10010           LOOP UNTIL DONE\n*\n         OPEN  (SYSIN,INPUT),MODE=31\n         LTR   R15,R15             DID IT WORK\n         BNZ   FAILURE             NOPE, WE BETTER FIND OUT WHY\n*\nP10090   GET   SYSIN               USE WRKMSG TO INPUT DATA\n**   CANNOT DO THIS KIND OF ERROR CHECKING ON GET/PUT\n**       LTR   R15,R15             IS IT OK\n**       BNZ   FAILURE             NOPE\n*\n         MVC   WRKMSGT(80),0(R1)    POINT TO BEGIN OF CARD USING R1\n         LA    R2,WRKMSGT           POINT TO BEGIN OF CARD\n         LA    R3,0                 MAX 8 BYTE JOBNAME\n         CLI   0(R2),C'*'           COMMENT IN COL 1\n         BE    P10090               YES IGNORE THE CARD\n         ST    R4,WRKTABLE          ADDR OF BEGIN OF THIS ENTRY\nP10200   CLI   0(R2),C' '           BLANK IS END OF NAME\n         BE    P10250\n**    * AND % ARE VALID, BUT NO LOGIC CHECKING IS NEEDED HERE\n**       CLI   0(R2),C'*'           WILD CARD\n**       BE    P10250               YES\n**       CLI   0(R2),C'%'           DO NOT CARE CHARACTER\n**       BE    P10250\n         MVC   1(1,R4),0(R2)        MOVE TO EXCLTBL ENTRY +1\n         LA    R2,1(R2)             BUMP TO NEXT COLUMN\n         LA    R4,1(R4)\n         LA    R3,1(R3)             LENGTH OF FIELD\n         CH    R3,=H'8'             MAX 8 BYTES\n         BL    P10200               LOOP UNTIL 8 BYTES ARE DONE\nP10250   EQU   *                    FIND LENGTH OF FIELD\n         L     R4,WRKTABLE          ADDR OF BEGIN OF THIS ENTRY\n         STC   R3,0(0,R4)           STORE LENGTH INTO FIELD\n*  9 BYTE ENTRY IS L12345678 WHERE L IS THE LENGTH OF THE JOBNAME\n         ST    R4,WRKEXCTE          ADDRESS OF LAST TABLE ENTRY\n         LA    R4,9(R4)             BUMP TO NEXT EMPTY ENTRY\n         L     R2,WRKEXCT\n         LA    R2,4085(R2)          BUMP TO END OF TABLE\n         CR    R4,R2\n         BL    P10090               ROOM TO ADD MORE ENTRIES\n*\nP10600   EQU   *                   END OF FILE ON SYSIN\n         CLOSE (SYSIN,),MODE=31\n         LTR   R15,R15             MAKE SURE THE GETMAIN WORKED\n         BNZ   FAILURE             NOPE, WE BETTER FIND OUT WHY\n         EJECT\n***********************************************************************\n*      INITIALIZATION, GET THE PAUSE/MODIFY ECB ADDRESS               *\n*\n* 4-3-02 KEEP AS MUCH CODE OUTSIDE OF THE SUPERVISOR STATE AS\n*        POSSIBLE.\n***********************************************************************\n         SYSEVENT DONTSWAP         MAKE US NON-SWAPPABLE\n*\n         MODESET MODE=SUP          AND GET INTO SUPERVISOR STATE\n         SPACE\n         MVC   WRKCOMM,COMMLPTR    MOVE LIST FORM TO 24 BIT ADDRESS\n         EXTRACT WRKCOMMP,MF=(E,WRKCOMM)  GET ADDR OF ECB AND CIB PTRS\n*\n         MVC   WRKWTO,MESSAGE      COPY WTO PARAMETERS TO WORK AREA\n*\n         L     R15,CVTPTR          ADDRESS OF THE MVS CVT\n         L     R5,CVTASVT-CVT(R15) ADDRESS OF ASVT\n         USING ASVT,R5             FIELD ADDRESSABILITY\n         L     R0,ASVTMAXU         NUMBER OF ADDRESS SPACES\n         MH    R0,TBLSIZE          TIMES TABLE ENTRY FOR TABLE SIZE\n         GETMAIN RC,LV=(0),LOC=ANY GET A TABLE TO HOLD COUNTS\n*\n* AR 3-20-02 TBLENTRY STORES CPU TIME, STATUS OF EACH ASID\n*\n         LTR   R15,R15             TEST IF WE GOT THE TABLE\n         BNZ   FAILURE             NOPE, THEN WE BETTER CRASH AND BURN\n*\n         ST    R1,WRKTABLE         SAVE ADDRESS OF TABLE FOR LATER\n*\n         GETMAIN RC,LV=CALLNGTH,LOC=ANY GET THE FIRST CALBLOCK\n*\n         LTR   R15,R15             MAKE SURE THE GETMAIN WORKED\n         BNZ   FAILURE             NOPE, WE BETTER FIND OUT WHY\n*\n         ST    R1,WRKCALST         PUT IT ON THE QUEUE\n** AR    LR    R11,R1              MOVE OVER FOR FIELD ADDRESSABILITY\n** AR    USING CALBLOCK,R11        ESTABLISH FIELD ADDRESSABILITY\n** AR    MVC   CALASID,=H'1'       INDICATE BLOCK FOR ASID '1'\n*\n         L     R8,PSAAOLD-PSA      ADDRESS OF CURRENT ASCB\n         USING ASCB,R8             FIELD ADDRESSABILITY\n         L     R4,ASCBLDA          ADDRESS OF LOCAL DATA AREA\n         USING LDA,R4              FIELD ADDRESSABILITY\n         L     R1,LDASTRTA         STARTING ADDRESS IN ADDRESS SPACE\n         A     R1,LDASIZA          ADD IN SIZE OF ADDRESS SPACE\n         ST    R1,WRKASSZ          AND SAVE AS TOP OF ADDRESS SPACE\n*\n         MODESET KEY=ZERO          GET INTO PROTECT KEY ZERO\n*\n         GETMAIN RC,LV=SRBLNGTH,SP=245,LOC=ANY GET PAGE FIXED KEY ZERO\n*\n         LTR   R15,R15             TEST IF WE GOT WHAT WE ASKED FOR\n         BNZ   FAILURE             NOPE, THEN WE BETTER CRASH AND BURN\n*\n         ST    R1,WRKSRB           SAVE FOR LATER REFERENCE\n         XC    ZERO(SRBLNGTH,R1),ZERO(R1) CLEAR AREA TO BINARY ZEROES\n*\n         LOAD  EP=MONJOBSS,GLOBAL=(YES,F) LOAD SRB ROUTINES INTO FIXED\n*\n         ST    R0,WRKRTN           SAVE FOR LATER REFERENCE\n         USING SRB,R6              FIELD ADDRESSABILITY\n         L     R6,WRKSRB           ADDRESS OF GOTTEN SRB AREA\n         MVC   SRBID,=CL4'SRB'     INITIALIZE THE EYE CATCHER\n         MVC   SRBEP,WRKRTN        ADDRESS OF THE SRB ROUTINE\n         OI    SRBEP,SRBMODE       INDICATE 31 BIT ADDRESSING\n         LA    R1,SRBEND           ADDRESS OF ECB TO POST WHEN DONE\n         ST    R1,SRBPARM          PUT THAT INTO PARMS FIELD\n         L     R1,SRBEP            ADDRESS OF THE SRB ROUTINE\n         LA    R1,FOUR(R1)         SRB + 4 IS THE TERMINATION ROUTINE\n         ST    R1,SRBRMTR          ADDRESS OF THE TERMINATION ROUTINE\n         OI    SRBRMTR,SRBRMODE    INDICATE 31 BIT ADDRESSING\n         L     R8,PSAAOLD-PSA      ADDRESS OF CURRENT ASCB\n         USING SRBAREA,R6          ESTABLISH FIELD ADDRESSABILITY\n*\n* AR 3-20-02 SRB SITS INSIDE OF SRBAREA, IS WHY WE DID NOT\n*            RELOAD R6 ABOVE.  NOTE THERE IS A SRBASCB WHICH IS\n*            IS NOT TO BE CONFUSED WITH THE BELOW SRA FIELD\n*\n         ST    R8,SRAASCB          UPDATE THE SRB PARAMETERS\n         USING SRB,R6              RE-ESTABLISH FIELD ADDRESSABILITY\n*\n         MODESET KEY=NZERO         BACK INTO NORMAL PROTECT KEY\n*\n* AR 4-3-02 CREATE ESTAE SO WE CAN DUMP ALL OF OUR GETMAIN STORAGE\n*           IF WE ABEND FOR ANY REASON\n         ESTAE  P08010,CT,TERM=YES\n         LTR   R15,R15             TEST IF WE GOT WHAT WE ASKED FOR\n         BNZ   FAILURE             NOPE, THEN WE BETTER CRASH AND BURN\n** ****************************************************\n** AR 7-18-02 CHANGE VERSION # BELOW ******************\n         WTO   'MON104I MONJOBS V2.8 INITIALIZED'\n         EJECT\n***********************************************************************\n*      OUTER LOOP, SET UP THE ASCB SCAN                               *\n***********************************************************************\n         SPACE\nASVTLOOP DS    0H\n         L     R9,ASVTMAXU         NUMBER OF ADDRESS SPACES TO LOOK AT\n         MVC   WRKWAIT,LIMIT       SET UP FOR SIX SECOND SLEEP\n*\nASCBLOOP DS    0H\n         LOCASCB ASID=(9)          LOCATE AN ASCB\n*\n         LTR   R15,R15             TEST IF ACTIVE ASCB FOUND\n         BNZ   ASCBNEXT            NOPE, GO DESCREMENT AND GET NEXT\n*\n         LR    R8,R1               ADDRESS OF THE ASCB\n         USING ASCB,R8             FIELD ADDRESSABILITY\n*\n         L     R7,ASCBCSCB         ADDRESS OF CSCB FOR THIS MEMORY\n         USING CHAIN,R7            FIELD ADDRESSABILITY\n* AR 3-20-02 COMMAND SCHEDULING CONTROL BLOCK, UPDATED WHEN\n*   CANCEL JOBNAME, MODIFY OR STOP COMMAND IS IN FLIGHT\n*\n         LTR   R7,R7               TEST IF CSCB EXISTS\n         BZ    TESTLOOP            NOPE, GO TEST FOR LOOPING JOB\n         B     TEST_JOB_CLASS      YEP, GO TEST FOR CPU LIMITS\n         EJECT\n***********************************************************************\n*      TEST FOR HSMSYKO IN ENQ CHAIN FOR SYSZRAC2 RACF.PRIMARY        *\n*  AR 3-20-02 HOW DO WE GET TO THIS ROUTINE? I THINK NOT USED  **     *\n***********************************************************************\n         SPACE\n         GQSCAN AREA=(ENQRET,1000),SCOPE=SYSTEM,                       X\n               RESNAME=(SYSZRAC2,RNAME,12),WAITCNT=4\n*\n         LTR   R15,R15             CHECK OUT THE ANSWER\n         BZ    TEST_HSM_ENQ        YEP, WE GOT SOMETHING SO LOOK AT IT\n*\n         CH    R15,H4              TEST FOR NOTHING FOUND\n         BE    TEST_JOB_CLASS      TRUE, GO ON TO THE NEXT TASK\n         DC    H'0'                SHOULD NEVER OCCUR\n* AR 3-20-02 ABOVE LOOKS LIKE IT CAUSES AN ABEND **\n*\nTEST_HSM_ENQ DS  0H\n         USING RIB,ENQRET          ESTABLISH FIELD ADDRESSABILITY\n         LH    R15,RIBVLEN         LENGTH OF THE VARIABLE SECTION\n         LA    R10,RIBEND(R15)     ADDRESS OF FIRST RIBE\n         USING RIBE,R10            FIELD ADDRESSABILITY\n         L     R15,RIBTRIBE        NUMBER OF RIBES RETURNED\n*\nTEST_HSM_LOOP DS 0H\n         CLC   RIBEJBNM,HSMSYKO    TEST IF HSMSYKO INVOLVED\n         BE    TEST_HSM_SDUMP      YEP, GO GET A DUMP OF HSM\n*\n         LA    R10,RIBEEND         ADDRESS OF NEXT RIBE\n*\n         BCT   R15,TEST_HSM_LOOP   GO LOOK AT NEXT RIBE\n*\n         B     TEST_JOB_CLASS      ALL RIBES PROCESSED, NEXT TASK\n*\nTEST_HSM_SDUMP DS 0H\n         SDUMP HDR='HSMSYKO',ASID=RIBEASID SVC DUMP OF HSM\n*  AR 3-20-02 ******** END OF NOT USED CODE        **********  **     *\n         EJECT\n***********************************************************************\n*      TEST FOR JES3 INITIATOR GROUP 'EXPRESS'                        *\n*  AR 3-20-02 WE DO NOT USE, IS IT JES3 ONLY ??    **********  **     *\n*  ON JES2 IT COULD BE  STC  OR JOBNAME\n***********************************************************************\n         SPACE\nTEST_JOB_CLASS DS 0H\n         CLC   CHKEY,EXPRESS       TEST FOR EXPRESS JOB CLASS\n         BNE   TESTLOOP            NOPE, GO TEST FOR LOOPING JOB\n* AR 3-20-02 ONLY PLACE CSCB IS USED   ***********\n*\n         CLC   ASCBJBNI,ZEROES     TEST FOR JOB RUNNING IN INITIATOR\n         BE    TESTLOOP            NOPE, GO TEST FOR LOOPING JOB\n* AR 3-20-02 JBNI IS POINTER TO JOBNAME, JBNS IS POINTER TO STC NAME\n*\n         LM    R0,R1,ASCBEJST      PICK UP THE CPU TIME\n         SRDL  R0,TWELVE           SHIFT TO MICROSECONDS\n         D     R0,TENTHOU          CONVERT TO HUNDREDTHS OF A SECOND\n*\n         C     R1,LIMIT            TEST IF ITS TOO BIG\n         BL    ASCBWT              NOPE, CALCULATE WAIT TIME\n         SPACE 2\n***********************************************************************\n*      RESET CPU TIME LIMIT IN THE ASCB TO FORCE S322 ABEND           *\n***********************************************************************\n         SPACE 3\n         MODESET KEY=ZERO          PROTECT KEY FOR ASCB UPDATE\n*\n         LA    R1,ONE              SET UP TO CHANGE THE LIMIT\n         ST    R1,ASCBJSTL         SET THE LIMIT WAY DOWN (S322 ABEND)\n*\n         MODESET KEY=NZERO         BACK OFF THE TIGHTROPE\n*\n         B     ASCBNEXT            DONE WITH THIS ASCB\n*\nASCBWT   DS      0H\n         L     R15,LIMIT           GET THE LIMIT VALUE\n         SR    R15,R1              TIME TO GO TO LIMIT\n*\n         CL    R15,WRKWAIT         TEST IF SHORTER THAN CURRENT\n         BH    TESTLOOP            NOPE, THEN LOOK FOR LOOPS\n*\n         CL    R15,SECOND          TEST IF TOO SHORT TO WORRY\n         BH    WAITSET             NOPE, SET NEW WAIT TIME\n*\n         L     R15,SECOND          OTHERWISE SET A ONE SECOND LIMIT\n*\nWAITSET  DS    0H\n         ST    R15,WRKWAIT         SET HOW LONG TO SLEEP\n         B     ASCBNEXT            SKIP LOOP TEST FOR 'EXPRESS'\n*\n*      END TEST_JOB_CLASS  LOGIC      ***************                 *\n*      THE ABOVE IS NOT USED ANYWHERE ELSE IN THE PROGRAM *****       *\n         EJECT\n***********************************************************************\n*      LOOP CHECKING LOGIC:  IF 5 MINUTES CPU W/ NO IO OR WAITS ..... *\n***********************************************************************\n         SPACE\nTESTLOOP DS    0H\n         LM    R0,R1,ASCBEJST      PICK UP THE CPU TIME\n* AR 3-20-02 DOCO SAYS ELAPSED JOB STEP TIMING?\n         SRDL  R0,TWELVE           SHIFT TO MICROSECONDS\n         D     R0,TENTHOU          CONVERT TO HUNDREDTHS OF A SECOND\n*\n         LH    R3,ASCBASID         GET THE ASID NUMBER\n         BCTR  R3,ZERO             DECREMENT BY ONE FOR DISPLACEMENT\n         MH    R3,TBLSIZE          CALCULATE ENTRY OFFSET\n         AL    R3,WRKTABLE         ADDRESS OF PROPER TABLE ENTRY\n         USING TBLENTRY,R3         FIELD ADDRESSABILITY\n         SR    R2,R2               INITIALIZE SHORT WAIT COUNT\n*\n         ST    R1,WRKCPU           SAVE CPU TIME\n         CL    R1,TBLCPU           TEST IF CPU HAS DECREASED\n         BL    TBLUPDAT            YEP, NEW JOB MUSTA STARTED\n*\n         CLC   TBLINTS,ASCBINTS    TEST IF NEW START TIME HAS CHANGED\n         BL    TBLUPDAT            YEP, NEW JOB MUSTA STARTED\n*\n         LR    R15,R1              COPY CURRENT CPU TIME VALUE\n         SL    R15,TBLCPU          COMPUTE THE DELTA\n         ST    R15,DLTCPU          SAVE THE DELTA\n*\n         CL    R15,LOOPCPU         COMPARE TO LOOP TEST LIMIT\n***      BL    ASCBVSM             LOW, GO LOOK AT VIRTUAL PICTURE\n         BL    TBLUPDAT            LOW, UPDATE TABLE STATS 4-3-02\n*\n*  * * **    HERE WE FOUND SOMETHING THAT EXCEEDED THE CPU LIMIT\n* AR 7-18-02 IF CICS REGION SKIP THE NEXT TESTS            *****\n*  * * **    BUT FIRST WE NEED TO OBTAIN THE JOB/STC NAME  *****\n*\n***********************************************************************\n** AR 4-3-02 ADDED LOGIC TO SEE IF IT IS A JOB, IF SO GO FIND THE\n**      PROGRAM NAME. IF IT IS A DB2 STEP, THEN GIVE IT MORE\n**      LEEWAY. IF A STC & A CICS REGION MODIFY THE ALERT MSG\n*\n* DISPLAY THE VALUES SO WE KNOW CALCULATION CORRECT - TCMCT0\n*\n*        WTO   'HIT THE DISPLAYS'\n         MVC   DSPMSGL,=H'35'\n         MVC   DSPMSGI,=C'MON122I '\n         L     R1,WRKCPU                LOAD SAVED CURR CPU\n         CVD   R1,DBLWORD\n         UNPK  DSPCPU,DBLWORD\n         OI    DSPCPU+15,X'F0'\n         MVC   DSPTEXT,=C'CURR CPU: '\n         WTO   TEXT=DSPMSG,MF=(E,WRKWTO) MESSAGE ABOUT LOOPING JOB\n*\n         L     R1,TBLCPU                LOAD SAVED PREV CPU\n         CVD   R1,DBLWORD\n         UNPK  DSPCPU,DBLWORD\n         OI    DSPCPU+15,X'F0'\n         MVC   DSPTEXT,=C'PREV CPU: '\n         WTO   TEXT=DSPMSG,MF=(E,WRKWTO) MESSAGE ABOUT LOOPING JOB\n*\n         L     R1,DLTCPU                LOAD SAVED DELTA\n         CVD   R1,DBLWORD\n         UNPK  DSPCPU,DBLWORD\n         OI    DSPCPU+15,X'F0'\n         MVC   DSPTEXT,=C'DELTA:    '\n         WTO   TEXT=DSPMSG,MF=(E,WRKWTO) MESSAGE ABOUT LOOPING JOB\n*\n* BLANK OUT OUR WTO AREA, SO WE CAN CUSTOMIZE THE MESSAGE **\n*\n         MVI   WRKMSGT,C' '         BLANK OUT THE AREA\n         MVC   WRKMSGT+1(WRKMLGTH-1),WRKMSGT\n         MVC   WRKM32TX,LPGM32TX   MOVE IN DEFAULT MESSAGE TEXT\n         MVC   WRKASID,ASCBASID    COPY THE ASID NUMBER\n         MVC   WRKM100I,=C'MON132I ' FILL IN THE MESSAGE ID\n         MVC   LOOPNAME(8),=C'ASID =  '   NEXT IAZXJSAB DOES NOT\n         MVC   LOOPUSID(8),=C'        '     ALWAYS WORK\n* AR 4-30-02 WLM, GRS ARE EXAMPLES WHERE IT DOES NOT WORK\n         SPACE 2\n         IAZXJSAB READ,ASCB=(8),JOBNAME=LOOPNAME,USERID=LOOPUSID,      X\n               JOBID=LOOPID\n         SPACE 2\n         LTR   R15,R15            DID WE FIND A GOOD ONE\n         BZ    TESTLB5            YES\n         L     R1,ASCBJBNI        FIND JOBNAME ELSEWHERE\n         LTR   R1,R1              DID WE FIND A GOOD ONE\n         BNZ   TESTLB1            YES\n         L     R1,ASCBJBNS        IS IT A STC\n         LTR   R1,R1\n         BZ    TESTLB5            NO\nTESTLB1  L     R14,8(R1)          WORKS FOR MVS SP4 & HIGHER\n**       SET MODE 31  FOR THE NEXT MOVE\n         MVC   LOOPNAME(8),16(R14)\n         SPACE 2\nTESTLB5  EQU   *\n***********************************************************************\n*  * * **    NOW GO BACK TO SEE IF WE SHOULD IGNORE THIS TASK **\n         CLC  LOOPNAME(3),=C'ETC'  A CICS REGION\n         BE    TESTLB7             YEP, LET'S DO THE ALERT\n*  ARR 09-15-11 ADD BOISE CICS REGIONS ********\n         CLC  LOOPNAME(3),=C'CIC'  A CICS REGION\n         BE    TESTLB7             YEP, LET'S DO THE ALERT\n*\n         CLC   ASCBIOSC,TBLIOSC    TEST IF IO COUNT HAS CHANGED\n         BNE   TBLUPDAT            YEP, JUST UPDATE THE TABLE\n*\n         ICM   R4,15,ASCBOUXB      ADDRESS OF THE OUXB\n         BZ    TBLUPDAT            NOPE, IT DOESN'T EXIST\n*\n         USING OUXB,R4             FIELD ADDRESSABILITY\n         LH    R2,ASCBSWCT         PICK UP THE SHORT WAIT COUNT\n         SL    R2,OUXBSWCT         REMOVE THE SWAP COUNT\n         STH   R2,WRKSWCT          AND SAVE WAIT COUNT\n*\n         CH    R2,TBLSWCT          TEST IF THIS VALUE HAS CHANGED\n* ACF    BNE   TBLUPDAT            YEP, LIVE AND LET LIVE\n* AR  3-20-02 NOT SURE WHY WE WOULD IGNORE THE ABOVE TESTS -\n*\n         TM    TBLFLAGS,TBLFMSG    TEST IF WE HAVE ALREADY COMMENTED\n***      BO    ASCBVSM             YEP, GO LOOK AT VIRTUAL STORAGE\n         BO    TBLUPDA2            YEP, UPDATE TABLE STATS 4-3-02\n* AR  3-20-02 HERE WE FOUND A LOOPER BUT WE ALREADY HAVE SENT\n*             AN ALERT, SO WE SKIP THE TBLUPDAT - WHY ??\n*             BECAUSE TBLUPDAT RESETS TBLFLAGS, AND CAUSE US TO\n*             RESEND THE ALERT NEXT TIME THRU. SO LET'S CHANGE TO GO\n*             TO TBLUPDA2.\n*\n         SPACE 2\n*  * * ** HERE WE HAVE A TASK THAT WE WILL ALERT ON  **********\nTESTLB7  EQU   *\n         CLC   ASCBJBNI,ZEROES     TEST FOR JOB RUNNING IN INITIATOR\n         BE    TESTLOO2            NOPE, GO TEST FOR STC OR TSO\n* AR 3-20-02 JBNI IS POINTER TO JOBNAME, JBNS IS POINTER TO STC NAME\n*            SOME TASKS HAVE BOTH SET.\n*            TEST1EV1 ON SVT2 IS DOMINO STC, IS EXAMPLE, BUT IT DOES\n*            NOT HAVE A JOBCARD. THESE ALSO HAVE A SDSF STATUS OF\n*            PROTECTED, NOT SURE WHAT THAT IS.\n** AR    CLC   ASCBJBNS,ZEROES     SOME STC HAVE JOB CARDS\n** AR    BNE   TESTLOO2            YES THIS IS ONE\n         SPACE\n         ICM   R4,15,ASCBOUCB      ADDRESS OF THE OUCB\n         BZ    TESTLOO6            NOPE, NO OUCB (SHOULD NOT HAPPEN)\n** AR    TM    OUCBSFL,OUCBNSW     TEST FOR NONSWAPPABLE ADDRESS SPACE\n** AR    BZ    TESTLOO6            NOPE, SKIP THE VIRTUAL TEST\n*\n** AR    CLC   OUCBSUBN,=CL4'STC'  TEST FOR A STARTED TASK\n** AR    BNE   TESTLOO6            NOPE, SKIP THE VIRTUAL TEST\n*\n         MODESET KEY=ZERO          GET INTO PROTECT KEY ZERO\n*\n         USING SRB,R6              FIELD ADDRESSABILITY TO REAL SRB\n         ST    R8,SRBASCB          UPDATE SRB WITH ASCB ADDRESS\n         USING SRBAREA,R6          FIELD ADDRESSABILITY TO SRB + FIELDS\n         XC    SRBECB,SRBECB       CLEAR THE ECB BEFORE SCHEDULE\n*\n*  4-15-02 IT IS EASIER TO NOT HAVE SRB SAVE/RESTORE, SO WE\n*          WE DO IT HERE INSTEAD    ****\n*\n         STM   2,12,WRKSAVR       SAVE SOME REGISTERS  4-15-02\n*\n         SCHEDULE SRB=(6),FRR=NO   SCHEDULE SRB TO COPY LDA DATA\n*\n         LM    2,12,WRKSAVR       RESTORE ALL REGISTERS  4-15-02\n*\n         MODESET KEY=NZERO         GET BACK OFF THE TIGHTROPE\n*\n         TM    SRBECB,X'80'        TEST IF ECB POSTED YET\n         BO    TESTLOO1            YEP, WE HAVE DATA TO MOVE\n*\n         MODESET KEY=ZERO          OTHERWISE SWITCH TO PROTECT KEY ZERO\n*\n         WAIT  1,ECB=SRBECB        AND WAIT FOR ECB TO COMPLETE\n*\n         MODESET KEY=NZERO         GET OFF THE TIGHTROPE\n*\nTESTLOO1 DS    0H\n         MVC   WRKBLOCK,SRABLOCK   COPY THE DATA FROM SQA TO WORK AREA\n         MVC   WRKINTS,ASCBINTS    AND THE JOB INITIATION TIME\n**       L     R1,ASCBJBNS         ADDRESS OF JOBNAME FOR STCS\n**       MVC   WRKJOBN,ZERO(R1)    PICK UP JOBNAME FOR POSSIBLE MESSAGE\n**  AR 4-2-02 ABOVE INCORRECT FOR MVS SP4 AND ABOVE ***\n         MVC   WRKJOBN,LOOPNAME            JOBNAME AR 4-2-02\n** AR    ST    R11,WRKCCURR        SAVE ADDRESS OF LAST CALBLOCK\n** AR    L     R11,CALNEXT         MOVE UP TO NEXT CALCULATION BLOCK\n*\n         CLC   ASCBASID,=H'1'      TEST IF WORKING ON *MASTER*\n         BE    TESTLOO6            YES\n*\n         XC    WRKCCURR,WRKCCURR   INDICATE NO PREVIOUS BLOCK\n         CLC   WRKASID,ZEROES      TEST FOR THE VERY FIRST ASID\n         BE    TESTLOO6            YEP, NO DATA AVAILABLE TO PROCESS\n         OC    WRKBLOCK,WRKBLOCK   TEST IF ANY DATA CAME BACK\n         BZ    TESTLOO6            NOPE, A.S. WAS TERMINATING\n         SPACE\n         MVC   WRKMVART(8),WRKPGMN      PUT INTO MSG\n         CLC   WRKPGMN(8),=C'IKJEFT01'  IS IT A DB2 JOBSTEP?\n         BE    TESTLO1B                 NO\n         CLC   WRKPGMN(8),=C'DSNUTILB'  IS IT A DB2 JOBSTEP?\n         BNE   TESTLOO6                 NO\nTESTLO1B EQU   *\n         MVC   WRKM36TX,LPGM36TX   DB2 JOB MAYBE LOOPING\n         SPACE\n***   BEGIN OF DEBUG 4-15-02       ************\n         CLI   WSSNAPS,C'1'           DID WE ALREADY DO A SNAP\n         BE    P02XX1\n         MVI   WSSNAPS,C'1'          SET SWITCH\n         ST    R1,WSR1               SAVE REG\n         OPEN  (SNAP2,OUTPUT),MODE=31\n** AR    ST    R13,SNAPL1S           ADDRESS OF WORKAREA\n         ST    R11,SNAPL1S           ADDRESS OF WORKAREA\n         LR    R1,R11\n         A     R1,=F'4095'\n         ST    R1,SNAPL1E\n         NI    SNAPL1S,X'EF'         LEFTMOST BIT S/B ZERO\n         OI    SNAPL1E,X'80'         MARK END OF LIST\n         SNAP  DCB=SNAP2,LIST=SNAPL,PDATA=(PSW,REGS,SA)\n         L     R1,WRKSRB           ADDRESS OF GOTTEN SRB AREA\n         ST    R1,SNAPL1S            ADDRESS OF SRBAREA\n**       LA    R1,4095(R1)           DOES NOT WORK\n         A     R1,=F'4095'\n         ST    R1,SNAPL1E\n         NI    SNAPL1S,X'EF'         BIT 31 S/B ZERO\n         OI    SNAPL1E,X'80'         MARK END OF LIST\n         SNAP  DCB=SNAP2,LIST=SNAPL,PDATA=(PSW,REGS,SA)\n         CLOSE (SNAP2,),MODE=31\n         L     R1,WSR1               SAVE REG\nP02XX1   EQU    *\n***   END OF DEBUG 4-15-02       ************\n         B     TESTLOO6            DONE, GO DO ALERT MSG\n         SPACE 2\nTESTLOO2 L     R0,ASCBJBNS         POINTER TO STC NAME\n         LTR   R0,R0               IS IT STC, NO  IF HEX ZEROES\n         BZ    TESTLOO6            NOPE, NOT SURE WHAT IT IS\n**       CLC   ASCBTSB,ZEROES     TSO?   4-7-02 DOES NOT WORK\n**       BNE   TESTLOO4           YES\n         CLC   LOOPID(3),=C'TSU'        TSO?\n         BE    TESTLOO4                 YES\n* AR 4-30-02 DIFF MESSAGE # FOR STC, FOR AUTO OPS TO USE\n         MVC   WRKM100I,=C'MON142I ' FILL IN THE MESSAGE ID\n         CLC   LOOPNAME(3),=C'ETC'      CICS STC?\n         BE    TESTLOB3\n         CLC   LOOPNAME(3),=C'CIC'      BOISE CICS ?\n         BNE   TESTLOO3\nTESTLOB3 EQU   *\n         MVC   WRKM100I,=C'MON152I '  CICS   THE MESSAGE ID\n         MVC   WRKM34TX,LPGM34TX   CICS REGION MAYBE LOOPING\n         SPACE 2\n         B     TESTLOO6            DONE, GO DO ALERT MSG\nTESTLOO3 EQU   *                   PROCESS OTHER STC HERE\n         MVC   WRKM35TX,LPGM35TX   STC   MAYBE LOOPING\n         SPACE 2\n         B     TESTLOO6            DONE, GO DO ALERT MSG\nTESTLOO4 EQU   *                   PROCESS TSO HERE\n         MVC   WRKM37TX,LPGM37TX   TSO   MAYBE LOOPING\n         SPACE 2\n         B     TESTLOO6            DONE, GO DO ALERT MSG\n         SPACE 2\nTESTLOO6 EQU   *          AR 4-3-02 END OF NEW LOGIC\n***********************************************************************\n*    NOW CHECK EXCLUDE TABLE TO SEE IF WE SHOULD IGNORE THE ALERT\n*    WE ONLY IGNORE JOBS THAT USE DB2.\n*    USE R0 R1 R2 R4 AS WORK REGISTERS\n*    TABLE ENTRIES ARE LIKE KMJ*   FMJ%%1D  TCARR03Q\n*    WHERE %  MEANS DO NOT CARE, MATCH ON ANYTHING IN THAT COLUMN\n*    TCMCT0 - WE CHANGED R3 TO R0 BECAUSE R3 IS TBLENTRY DSECT\n*\n***********************************************************************\n         SPACE\n         L     R4,WRKEXCT          ADDR OF EXCLUDE TABLE START\nTESTLA1  MVI   WRKEXCTS,C'N'       SET WE FOUND A MATCH SWITCH\n         LR    R1,R4               ADDR OF START OF THIS ENTRY\n         LA    R4,1(R4)            BUMP PAST THE LENGTH FIELD\n         LA    R2,8                LOOP COUNTER\n         LA    R0,LOOPNAME         JOBNAME\nTESTLA3  CLI   0(R4),C'*'          WILD CARD\n         BE    TESTLA4             YES\n         CLI   0(R4),C'%'          DO NOT CARE\n         BE    TESTLA4             YES\n         CLI   0(R4),C' '          BLANK = END OF NAME\n         BE    TESTLA6             SKIP TO NEXT TBL ENTRY\n         CLC   0(1,R0),0(R4)       JOBNAME TO TBL NAME\n         BNE   TESTLA7             SKIP TO NEXT TBL ENTRY\nTESTLA4  MVI   WRKEXCTS,C'Y'       SET WE FOUND A MATCH SWITCH\n         LA    R4,1(R4)            NEXT COL\n         LA    R0,1(R0)\n         BCT   R2,TESTLA3          LOOP AGAIN\nTESTLA6  EQU   *\n         SPACE 2\n         CLI   WRKEXCTS,C'Y'       DID WE FIND A MATCH\n***      BE    ASCBVSM             YES SKIP THE ALERT MSG AR 6-17-02\n         BE    TBLUPDA2            YES SKIP THE ALERT MSG\nTESTLA7  LR    R4,R1                GO BACK TO START OF CURR ENTRY\n         LA    R4,9(R4)             NEXT TBL ENTRY\n         C     R4,WRKEXCTE          END OF TABLE\n         BNH   TESTLA1              LOW OR = SO STILL LOOP\n         SPACE 2\nTESTLA9  EQU   *\n***********************************************************************\n*      END OF EXCLTBL LOGIC                                           *\n***********************************************************************\n*      LOOP CHECKING LOGIC:  EXECUTE REXX EXEC TO NOTIFY SOMEBODY     *\n***********************************************************************\n         SPACE\nLOOPNTFY DS    0H\n***      IAZXJSAB READ,ASCB=(8),JOBNAME=LOOPNAME,USERID=LOOPUSID\n* AR 3-20-02 JOB SCHEDULER ADDRESS CONTROL BLOCK\n*  GETS THE JOBNAME AND USERID FROM JES\n*  AR 4-3-02 I MOVED IT HIGHER UP, WHICH MIGHT MAKE THIS PARAGRAPH\n*       NOT WORK RIGHT. IT IS NOT RIGHT NOW, SO WHO CARES?\n*\n***      CLC   LOOPUSID(4),=C'USWC' TEST IF WE ACTUALLY CARE\n***      BNE   ASCBVSM             NOPE, GO OFF TO CHECK VIRTUAL USE\n*\n         B     LOOPMSG             ELSE GO ISSUE A CONSOLE MESSAGE\n*  AR 3-20-02 IGNORE THE CODE BELOW  **************\n*\n         SR    R0,R0               CLEAR ENVIRONMENT BLOCK POINTER\n         LA    R1,REXXPARM         ADDRESS OF THE PARAMETER LIST\n*\n         LINK  EP=IRXJCL           GO EXECUTE SOME REXX CODE\n*\n         B     ASCBVSM             THEN GO DO SOME VIRTUAL USAGE\n         SPACE 2\n***********************************************************************\n*      LOOP CHECKING LOGIC:  ISSUE MESSAGE ABOUT LOOPING JOB          *\n***********************************************************************\n         SPACE\nLOOPMSG  DS    0H\n**  **   MVC   WRKM32TX,LPGM32TX   MOVE IN THE MESSAGE TEXT\n         MVC   WRKMJOBN,LOOPNAME   COPY JOBNAME TO MESSAGE\n         MVI   WRKMCOM1,C' '       PRETTY UP THE MESSAGE A LITTLE BIT\n         MVC   WRKMUSID,LOOPUSID   COPY THE USERID INTO THE MESSAGE\n         MVI   WRKMCOMA,C' '       PRETTY UP THE MESSAGE A LITTLE BIT\n*\n        LH    R1,WRKASID          PICK UP THE ADDRESS SPACE NUMBER\n        CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n        MVC   WRKMASID,=X'40202020' GET AN EDIT PATTERN\n        ED    WRKMASID,WRKTEMP+SIX READABLE ASID NUMBER\n*\n**  **   MVC   WRKM100I,=C'MON132I ' FILL IN THE MESSAGE ID\n         OI    TBLFLAGS,TBLFMSG    INDICATE MESSAGE HAS BEEN ISSUED\n* AR 3-20-02 DO WE RESET IT BELOW HERE IN TBLUPDAT?\n**       LA    R1,WRKM32TL         LENGTH OF THE MESSAGE TEXT\n         LA    R1,WRKMLGTH         LENGTH OF THE MESSAGE TEXT\n         STH   R1,WRKMSGL          UPDATE THE LENGTH FIELD\n*\n         WTO   TEXT=WRKMSG,MF=(E,WRKWTO) MESSAGE ABOUT LOOPING JOB\n*\n         MVI   WRKMSGT,C' '         BLANK OUT THE AREA\n         MVC   WRKMSGT+1(WRKMLGTH-1),WRKMSGT\n         B     TBLUPDA2            DO NOT CLEAR THE FLAG\nTBLUPDAT DS    0H\n         MVI   TBLFLAGS,ZERO       CLEAR THE FLAGS BYTE\nTBLUPDA2 DS    0H\n         MVC   TBLCPU,WRKCPU       SAVE THE CURRENT CPU TIME VALUE\n         MVC   TBLSWCT,WRKSWCT     AND SAVE WAIT COUNT\n         MVC   TBLIOSC,ASCBIOSC    SAVE THE CURRENT IO COUNT\n         MVC   TBLINTS,ASCBINTS    AND THE CURRENT JOB START TIME\n         EJECT\n***********************************************************************\n*      TEST VIRTUAL STORAGE CONDITION FOR AUTHORIZED STCS             *\n***********************************************************************\n         SPACE\nASCBVSM  DS    0H\n         USING OUCB,R4             FIELD ADDRESSABILITY\n         B     ASCBNEXT            DISABLE THE VSM CHECK FOR NOW\n*  AR 3-20-02 IGNORE THE CODE BELOW  **************\n*\n         ICM   R4,15,ASCBOUCB      ADDRESS OF THE OUCB\n         BZ    ASCBNEXT            NOPE, NO OUCB (SHOULD NOT HAPPEN)\n*\n         TM    OUCBSFL,OUCBNSW     TEST FOR NONSWAPPABLE ADDRESS SPACE\n         BZ    ASCBNEXT            NOPE, SKIP THE VIRTUAL TEST\n*\n         CLC   OUCBSUBN,=CL4'STC'  TEST FOR A STARTED TASK\n         BNE   ASCBNEXT            NOPE, SKIP THE VIRTUAL TEST\n*\n         MODESET KEY=ZERO          GET INTO PROTECT KEY ZERO\n*\n         USING SRB,R6              FIELD ADDRESSABILITY TO REAL SRB\n         ST    R8,SRBASCB          UPDATE SRB WITH ASCB ADDRESS\n         USING SRBAREA,R6          FIELD ADDRESSABILITY TO SRB + FIELDS\n         XC    SRBECB,SRBECB       CLEAR THE ECB BEFORE SCHEDULE\n*\n         SCHEDULE SRB=(6),FRR=NO   SCHEDULE SRB TO COPY LDA DATA\n*\n         MODESET KEY=NZERO         GET BACK OFF THE TIGHTROPE\n*\n         CLC   WRKASID,ZEROES      TEST FOR THE VERY FIRST ASID\n         BE    XMWAIT              YEP, NO DATA AVAILABLE TO PROCESS\n*\n         OC    WRKBLOCK,WRKBLOCK   TEST IF ANY DATA CAME BACK\n         BZ    XMWAIT              NOPE, A.S. WAS TERMINATING\n         EJECT\n***********************************************************************\n*      PROCESS LDA DATA FROM THE LAST NONSWAPPABLE ADDRESS SPACE      *\n*  AR 3-20-02 IGNORE THE CODE BELOW  **************\n*      ALL THE CAL-- LOGIC           **************\n***********************************************************************\n         SPACE 2\nCALCOMP  DS    0H\n         SPACE\n***********************************************************************\n*      BUILD THE MESSAGE ABOUT EXPECTED TERMINATION DATE/TIME         *\n***********************************************************************\n         SPACE\n         LA    R1,WRKMLGTH         LENGTH OF THE MESSAGE\n         STH   R1,WRKMSGL          SET UP THE MESSAGE LENGTH\n*\n         MVC   WRKM100I,=C'MON100I ' MOVE IN THE MESSAGE IDENTIFIER\n         MVC   WRKMJOBN,WRKJOBN    AND THE JOB NAME\n         MVI   WRKMCOM1,C','       DELIMITER\n         LH    R1,WRKASID          PICK UP THE ADDRESS SPACE NUMBER\n         CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n         MVC   WRKMASID,=X'40202020' GET AN EDIT PATTERN\n         ED    WRKMASID,WRKTEMP+SIX READABLE ASID NUMBER\n         MVI   WRKMCOM2,C','       DELIMITER\n         L     R1,WRKASSZ          GET SIZE OF ADDRESS SPACE\n         SRL   R1,TWENTY           CONVERT TO MEGABYTES\n         CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n         MVC   WRKMASSZ,=X'40202020' GET AN EDIT PATTERN\n         ED    WRKMASSZ,WRKTEMP+SIX READABLE ADDRESS SPACE SIZE IN MEG\n         MVI   WRKMCOM3,C','       DELIMITER\n         L     R1,WRKCRGTP         CURRENT TOP OF REGION\n         SRL   R1,TEN              CONVERT TO K\n         CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n         MVC   WRKMVIRT,=X'402020202020' GET AN EDIT PATTERN\n         ED    WRKMVIRT,WRKTEMP+FIVE READABLE VIRTUAL USED VALUE\n         MVI   WRKMCOM4,C','       DELIMITER\n         L     R1,WRKHIAL          GET THE SYSTEM SIZE\n         SRL   R1,TEN              CONVERT TO K\n         CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n         MVC   WRKMSYS,=X'402020202020' GET AN EDIT PATTERN\n         ED    WRKMSYS,WRKTEMP+FIVE READABLE SYSTEM USED VALUE\n         MVI   WRKMCOM5,C','       DELIMITER\n         L     R1,WRKREM           GET THE REMAINDER VALUE\n         SLL   R1,TWO              CONVERT TO K\n         CVD   R1,WRKTEMP          CONVERT TO PACKED DECIMAL\n         MVC   WRKMREM,=X'402020202020' GET AN EDIT PATTERN\n         ED    WRKMREM,WRKTEMP+FIVE READABLE REMAINDER (UNUSED) VALUE\n         MVI   WRKMCOM6,C','       DELIMITER\n         MVC   WRKMYYYY,=X'402020202020' EDIT PATTERN\n         ED    WRKMYYYY,WRKDTDAT   MAKE A READABLE YEAR\n         MVI   WRKMDOT1,C'.'       APPEND CHARACTER\n         MVC   WRKDDD,=X'4021202020' GET AN EDIT PATTERN\n         ED    WRKDDD,WRKDTDAT+TWO MAKE A READABLE NUMBER OF DAYS\n         MVC   WRKMDDD,WRKDDD+TWO  COPY IT OVER TO THE MESSAGE\n         MVI   WRKMDOT2,C'.'       APPEND CHARACTER\n         MVC   WRKDDD,=X'F020202020' GET AN EDIT PATTERN\n         ED    WRKDDD,WRKDTVAL     MAKE A READABLE TIME OF DAY\n         MVC   WRKMTIME,WRKDDD+ONE COPY IT OVER TO THE MESSAGE\n         EJECT\n***********************************************************************\n*      ISSUE THE MESSAGE ABOUT EXPECTED TERMINATION DATE/TIME         *\n***********************************************************************\n         SPACE 3\n         WTO   TEXT=WRKMSG,MF=(E,WRKWTO) A MESSAGE ABOUT IT\n*  AR 3-20-02 END OF IGNORED CODE    **************\n         SPACE 2\n***********************************************************************\n*      WAIT FOR CROSS MEMORY POST FROM SRB GETTING LDA DATA           *\n***********************************************************************\n         SPACE 3\nXMWAIT   DS    0H\n         TM    SRBECB,X'80'        TEST IF ECB POSTED YET\n         BO    XMWMOVE             YEP, WE HAVE DATA TO MOVE\n*\n         MODESET KEY=ZERO          OTHERWISE SWITCH TO PROTECT KEY ZERO\n*\n         WAIT  1,ECB=SRBECB        AND WAIT FOR ECB TO COMPLETE\n*\n         MODESET KEY=NZERO         GET OFF THE TIGHTROPE\n*\nXMWMOVE  DS    0H\n         MVC   WRKBLOCK,SRABLOCK   COPY THE DATA FROM SQA TO WORK AREA\n         MVC   WRKASID,ASCBASID    COPY THE ASID NUMBER\n         MVC   WRKINTS,ASCBINTS    AND THE JOB INITIATION TIME\n         L     R1,ASCBJBNS         ADDRESS OF JOBNAME FOR STCS\n         MVC   WRKJOBN,ZERO(R1)    PICK UP JOBNAME FOR POSSIBLE MESSAGE\n** AR    ST    R11,WRKCCURR        SAVE ADDRESS OF LAST CALBLOCK\n** AR    L     R11,CALNEXT         MOVE UP TO NEXT CALCULATION BLOCK\n*\n         CLC   ASCBASID,=H'1'      TEST IF WORKING ON *MASTER*\n         BNE   ASCBNEXT            NOPE, THEN STAY ON CALBLOCK CHAIN\n*\n** AR    L     R11,WRKCALST        OTHERWISE GET TO HEAD OF CHAIN\n** AR    XC    WRKCCURR,WRKCCURR   INDICATE NO PREVIOUS BLOCK\n         EJECT\n***********************************************************************\n*      MOVE UP TO THE NEXT ASCB                                       *\n***********************************************************************\n         SPACE 3\nASCBNEXT DS    0H\n         LA    R10,FOUR(R10)       MOVE UP TO NEXT ASCB\n* AR 4-15-02 NOT SURE WHAT R10 IS USED FOR  ***\n*\n         BCT   R9,ASCBLOOP         FALL THRU WHEN END OF LIST REACHED\n         SPACE\n***********************************************************************\n*      GO TO SLEEP FOR A WHILE,  THEN WAKE UP AND DO IT ALL AGAIN     *\n***********************************************************************\n         SPACE 2\nSLEEP    DS    0H\n         L     R2,WRKCOMMP         ADDRESS OF COMMUNICATIONS AREA\n         L     R9,ZERO(R2)         ADRRESS OF STOP/MODIFY ECB\n*\n         TM    ZERO(R9),POSTED     TEST FOR PAUSE COMMAND ENTERED\n** AR    BO    RC0                 YEP, THEN ITS TIME TO QUIT\n         BO    P08010              YEP, THEN ITS TIME TO QUIT\n*\n* AR 3-20-02 WRKWAIT CAN BE DIFFERENT FROM LIMIT, SEE ASCBWT LOGIC\n         SPACE 2\n         STIMER WAIT,BINTVL=WRKWAIT SNOOZE FOR A LITTLE WHILE\n*\n         B     ASVTLOOP            THEN GO SCAN SETUNITS AGAIN\n         EJECT\n***********************************************************************\n*      PARM PROCESSING ROUTINE                                        *\n***********************************************************************\nPACKIT   EQU   *\n         BCTR  R4,0                      SUBTRACT ONE FOR EXECUTED MOVE\n         LA    R5,7                      MAX LENGTH\n         SLL   R5,4                      AND SHIFT TO FORM L2\n         OR    R5,R4                     L1, L2 NOW IN REG 5\n         EX    R5,PACKINS                PACK IT\n         CVB   R5,DOUBLE                 MAKE TYPE BINARY\n         BR    R14                       RETURN\nPACKINS  PACK  DOUBLE(*-*),0(,R3)        MAKE IT DECIMAL\nDOUBLE   DC    D'0'                      WORK AREA\n         EJECT\nFAILURE  DC    H'0'\nFIXTOFLT DS    0H\n         MVC   WRKTEMP,ZEROES      INITIALIZE TEMPORARY FIELD\n         ST    R1,WRKTEMP+FOUR     SAVE THE FIXED POINT VALUE\n         XC    WRKTEMP,TWO31       FLIP SOME VARIOUS BITS\n         LD    FPR0,WRKTEMP        LOAD WORK FIELD INTO REGISTER\n         SD    FPR0,TWO31          NORMALIZE FLOATING POINT NUMBER\n         BR    R14                 AND RETURN TO CALLER\n*\nFLTTOFIX DS    0H\n         SD    FPR0,TWO31R         TEST IF NUMBER IS TOO BIG (POSITIVE)\n         BNMR  R14                 YEP, TAKE THE ERROR RETURN\n*\n         AW    FPR0,TWO32          TEST IF NUMBER IF TOO BIG (NEGATIVE)\n         BMR   R14                 YEP, TAKE THE ERROR RETURN\n*\n         STD   FPR0,WRKTEMP        SAVE THE FLOATING POINT NUMBER\n         XI    WRKTEMP+FOUR,X'80'  FLIP A BIT\n         L     R1,WRKTEMP+FOUR     AND LOAD THE FINAL RESULT\n         B     FOUR(R14)           TAKE THE NORMAL RETURN\n         SPACE 2\nP08010   EQU   *         ESTAE FIXUP ROUTINES  4-3-02\n***      LR    R12,R15\n***      USING P08010,R12\n         BALR  R12,0                 SET UP NEW BASE REG.\n         USING *,R12\n         OPEN  (SNAP2,OUTPUT),MODE=24\n         LTR   R15,R15\n         BZ    P08220B\n         ABEND  510,DUMP\nP08220B  EQU   *\n** AR    ST    R13,SNAPL1S           ADDRESS OF WORKAREA\n         ST    R11,SNAPL1S           ADDRESS OF WORKAREA\n         LR    R1,R11\n         A     R1,=F'4095'\n         ST    R1,SNAPL1E\n         NI    SNAPL1S,X'EF'         LEFTMOST BIT S/B ZERO\n         OI    SNAPL1E,X'80'         MARK END OF LIST\n         SNAP  DCB=SNAP2,LIST=SNAPL,PDATA=(PSW,REGS,SA)\n         LTR   R15,R15\n         BZ    P08220C\n         ABEND  512,DUMP\nP08220C  EQU   *\n         L     R1,WRKSRB           ADDRESS OF GOTTEN SRB AREA\n         ST    R1,SNAPL1S            ADDRESS OF SRBAREA\n**       LA    R1,4095(R1)           DOES NOT WORK\n         A     R1,=F'4095'\n         ST    R1,SNAPL1E\n         NI    SNAPL1S,X'EF'         BIT 31 S/B ZERO\n         OI    SNAPL1E,X'80'         MARK END OF LIST\n         SNAP  DCB=SNAP2,LIST=SNAPL,PDATA=(PSW,REGS,SA)\n         CLOSE (SNAP2,),MODE=24\n***********************************************************************\n*      MODULE EXIT ROUTINE                                            *\n***********************************************************************\n         SPACE 3\nRC0      DS    0H\n         WTO   'MON108I MONJOBS NORMAL TERMINATION' OFF THE AIR\n*\n         LR    R1,R13              ADDRESS OF MODULE WORK AREA\n         LA    R0,WRKLNGTH         LENGTH OF MODULE WORK AREA\n         L     R13,FOUR(R13)       ADDRESS OF CALLERS SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE UP MODULE WORK AREA\n*\n         RETURN (14,12),RC=0       AND RETURN TO CALLER\n         EJECT\n*      WORKING STORAGE\n*\nH4       DC    H'4'\nCOMMLPTR EXTRACT FIELDS=COMM,MF=L\nCOMMLPTL EQU   *-COMMLPTR\nSECOND   DC    F'100'\nLIMIT    DC    F'1000'\nTENTHOU  DC    F'10000'\nLOOPCPU  DC    F'6000'\nSNAPL    DS    0F                 LIST OF SNAP START-END ADDRESS\nSNAPL1S  DC    F'0'\nSNAPL1E  DC    F'0'\n*\nMEG      DC    X'00100000'\nTBLSIZE  DC    AL2(TBLLNGTH)\nZEROES   DC    XL8'00'\nEXPRESS  DC    CL8'EXPRESS'     ** NOT USED BY SUPERVALU\n*\nLPGM32TX DC    C'MAY BE LOOPING'\nLPGM32TL EQU   *-LPGM32TX\n*\nLPGM34TX DC    C'CICS MAY BE LOOPING'\nLPGM34TL EQU   *-LPGM34TX\n*\nLPGM35TX DC    C'STC  MAY BE LOOPING'\nLPGM35TL EQU   *-LPGM35TX\n*\nLPGM36TX DC    C'DB2 JOB MAY BE LOOPING'\nLPGM36TL EQU   *-LPGM36TX\n*\nLPGM37TX DC    C'TSO  MAY BE LOOPING'\nLPGM37TL EQU   *-LPGM37TX\n*\nMESSAGE  WTO   TEXT=ZEROES,MF=L\nMESSAGEL EQU   *-MESSAGE\nHSMSYKO  DC    CL8'HSMSYKO'\nSYSZRAC2 DC    C'SYSZRAC2'\nRNAME    DC    C'RACF.PRIMARY'\n*\nREXXPARM DC    A(X'80000000'+REXXLGTH)\nREXXLGTH DC    AL2(REXXEND-REXXDATA)\nREXXDATA DC    CL8'LOOPNTFY'\n         DC    C' '\nLOOPNAME DC    CL8' '\n         DC    C' '\nLOOPUSID DC    CL8' '\n         DC    C' '\nLOOPID   DC    CL8' '        4-3-02 JOBNNN, STCNNN, TSUNNN\nREXXEND  EQU   *\n*\n         LTORG\n         DS    0D\nFP_ONE   DC    D'1'\nFP_THIRTY DC   D'30'\nNINETY   DC    D'0.9'\nTWO31    DC    X'4E00000080000000'\nTWO31R   DC    X'4F00000008000000'\nTWO32    DC    X'4E00000100000000'\n*\nWSR1     DC    F'0'     SNAP REG SAVE  R1\nWSR13    DC    F'0'     SNAP REG SAVE  R13\nWSSNAPS  DC    C'0'     SNAP SWITCH SO WE ONLY DO IT ONCE\n*\n*  4-3-02 HERE WE ARE CLOSE TO RUNNING OUT OF ADDRESSIBILITY\n*         WE MAY NEED A SECOND BASE REGISTER SOON *******\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,RECFM=FB,MACRF=(GL),              X\n               BLKSIZE=0,LRECL=80,EODAD=P10600\n*              BLKSIZE=800,LRECL=80,DCBE=SYSINDC\n*YSINDC  DCBE  RMODE31=BUFF,EODAD=P10600\n*\nSNAP2    DCB   DDNAME=SNAP2,DSORG=PS,RECFM=VBA,MACRF=(W),              X\n               BLKSIZE=882,LRECL=125\n*\nENQRET   DC    1000X'00'\n         EJECT\nWORKAREA DSECT\nWRKSAVE  DS    18F\nWRKWAIT  DS    F\nWRKTABLE DS    F\nWRKASID  DS    H\n         DS    0F\nWRKSAVR  DS    16F            4-15-02 SAVE BEFORE SCHEDULE SRB RUNS\nWRKWTO   DS    XL(MESSAGEL)\n*\nWRKMSG   DS    0H\nWRKMSGL  DS    H\nWRKMSGT  DS    0X\nWRKM100I DS    CL8\nWRKMJOBN DS    CL8\nWRKMCOM1 DS    C\nWRKMASID DS    CL4\nWRKMCOM2 DS    C\nWRKMASSZ DS    CL4\nWRKMCOM3 DS    C\nWRKMVIRT DS    CL6\nWRKMCOM4 DS    C\nWRKMSYS  DS    CL6\nWRKMCOM5 DS    C\nWRKMREM  DS    CL6\nWRKMCOM6 DS    C\nWRKMYYYY DS    CL6\nWRKMDOT1 DS    C\nWRKMDDD  DS    CL3\nWRKMDOT2 DS    C\nWRKMTIME DS    CL4\nWRKMVART DS    CL17          VARIABLE TEXT HERE\nWRKMLGTH EQU   *-WRKMSGT     NOT TO START OF WRKMSG\n** ABOVE IS USED AS TEMP AREA FOR SYSIN DATA, SO CHECK LENGTH **\n         ORG   WRKMASSZ\nWRKMUSID DS    CL8\nWRKMCOMA DS    C\nWRKM32TX DS    XL(LPGM32TL)\nWRKM32TL EQU   *-WRKMSGT\n         ORG   WRKM32TX\nWRKM34TX DS    XL(LPGM34TL)\nWRKM34TL EQU   *-WRKMSGT\n         ORG   WRKM32TX\nWRKM35TX DS    XL(LPGM35TL)\nWRKM35TL EQU   *-WRKMSGT\n         ORG   WRKM32TX\nWRKM36TX DS    XL(LPGM36TL)\nWRKM36TL EQU   *-WRKMSGT\n         ORG   WRKM32TX\nWRKM37TX DS    XL(LPGM37TL)\nWRKM37TL EQU   *-WRKMSGT\n         ORG\n*\n         DS    0F\nWRKSRB   DS    F\nWRKRTN   DS    F\nWRKCALO  DS    F\nWRKASSZ  DS    F\nWRKCALST DS    F\nWRKCCURR DS    F\nWRKEXCT  DS    F        EXCLTBL LIST OF JOBNAMES TO EXCLUDE\nWRKEXCTE DS    F        EXCLTBL END-OF-TABLE\nWRKCPU   DS    F        HOLD CPU TIME FOR TBLCPU UPDAT\nWRKSWCT  DS    H\nDLTCPU   DS    F        HOLD DELTA CPU TIME\nDBLWORD  DS    D        WORK DOUBLEWORD FIELD\\\n*\nWRKCOMM  DS    CL(COMMLPTL)\nWRKCOMMP DS    F\nWRKDTVAL DS    XL8\nWRKDTDAT DS    XL4\n         DS    XL4\n*\nWRKBLOCK DS    0XL40    FOR SRABLOCK, PART OF SRB DATA\nWRKCRGTP DS    F\nWRKLIMIT DS    F\nWRKHIAL  DS    F\nWRKERGTP DS    F\nWRKELIM  DS    F\nWRKEHIAL DS    F\nWRKESTRA DS    F\nWRKREGRQ DS    F\nWRKPGMN  DS    CL8         4-2-02 PROGRAM NAME\n*   AR 4-2-02 ABOVE IS THE END OF WRKBLOCK\nWRKREM   DS    F\n*\nWRKEXCTS DS    C        EXCLTBL SWITCH\nWRKDDD   DS    CL5\nWRKJOBN  DS    CL8\n*\n         DS    0D\nWRKTEMP  DS    D\nWRKTOD   DS    D\nWRKINTS  DS    D\n* DISPLAY CPU VALUES - TCMCT0\nDSPMSG   DS    0H\nDSPMSGL  DC    H'35'\nDSPMSGT  DS    0X\nDSPMSGI  DC    CL8'MON122I '\nDSPTEXT  DS    CL10'CURR CPU: '\nDSPCPU   DS    CL16\n         DC    CL1' '\n*\nWRKLNGTH EQU   *-WORKAREA\n*\nTBLENTRY DSECT\nTBLCPU   DS    F        CPU TIME, PART OF ASCBEJSY\nTBLSWCT  DS    H        SHORT WAIT\nTBLFLAGS DS    X\nTBLFMSG  EQU   B'10000000'\nTBLRSVD1 DS    X\nTBLIOSC  DS    F        I/O COUNT   ASCBIOSC\nTBLINTS  DS    XL8      START TIME, ASCBINTS\nTBLLNGTH EQU   *-TBLENTRY\n*\n* AR 4-2-02 BELOW IS A LITTLE DIFF FROM MONJOBSS CODE **\nSRBAREA  DSECT ,\n         DS    XL(SRBSIZE)   THE REAL SRB RESIDES IN HERE\nSRBECB   DS    F\nSRBPOST  POST  SRBECB,ASCB=SRAASCB,ERRET=0,ECBKEY=YES,MF=L\nSRAASCB  DS    F\nSRABLOCK DS    0XL40\nSRACRGTP DS    F\nSRALIMIT DS    F\nSRAHIAL  DS    F\nSRAERGTP DS    F\nSRAELIM  DS    F\nSRAEHIAL DS    F\nSRAESTRA DS    F\nSRAREGRQ DS    F\nSRAPGMN  DS    CL8         4-2-02 PROGRAM NAME\nSRBLNGTH EQU   *-SRBAREA\n*\n* AR 4-15-02  REMOVED MOST LOGIC FOR THIS FUNCTION\nCALBLOCK DSECT\nCALNEXT  DS    F\nCALPREV  DS    F\nCALASID  DS    H\n*\nCALFLAGS DS    X\nCALMSG   EQU   B'10000000'\n*\nCALRANGE DS    0D\nCALLEAST DS    F\nCALMOST  DS    F\nCALINTS  DS    D\nCALTOD   DS    D\nCALN     DS    D\nCALXSUM  DS    D\nCALYSUM  DS    D\nCALXSQR  DS    D\nCALYSQR  DS    D\nCALXYSUM DS    D\nCALALPHA DS    D\nCALBETA  DS    D\nCALLNGTH EQU   *-CALBLOCK\n*\n         CVT   DSECT=YES\n         IAZJSAB ,\n         IHAASCB ,\n         IHAASSB ,\n         IHAASVT ,\nCSCB     DSECT\n         IEECHAIN ,\n         IHAGDA ,\n         IHALDA ,\n         IHAOUXB ,\n         IHAPSA ,\n         IHASRB ,\n         IRAOUCB ,\n         ISGRIB ,\n         END\n./ ADD NAME=MONJOBSS 0100-03311-03311-1200-00273-00273-00000-FILE066 00\n         TITLE 'MONJOBSS: SRB ROUTINE TO EXTRACT VIRTUAL STORAGE DATA'\n***********************************************************************\n* MACRO LIBS NEEDED: SYS1.MACLIB                                      *\n*                    SYS1.MODGEN                                      *\n*                                                                     *\n* LINKAGE EDITOR PARMS: DEFAULT                                       *\n*                                                                     *\n* PURPOSE:                                                            *\n*        MONJOBSS IS AN SRB ROUTINE THAT RUNS IN EACH ADDRESS SPACE   *\n*        BEING EXAMINED FOR VIRTUAL STORAGE USE.                      *\n*        THE BASIC FUNCTIONS ARE:                                     *\n*        1) FIND THE LDA FOR THIS ADDRESS SPACE                       *\n*        2) COPY SELECTED LDA FIELDS TO THE SQA AREA PASSED AS AN     *\n*           INPUT PARAMETER                                           *\n*    4-2-02 USE ASCB, GO TO ASXB & POINT TO FIRST TCB IN              *\n*    ADDRESS SPACE. GO THRU CHAIN OF TCB'S UNTIL WE FIND ONE THAT     *\n*    HAS A GOOD JOB STEP CONTROL BLOCK (JSCB). THEN GET PROGRAM       *\n*    NAME.                                                            *\n*                                                                     *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*  SUPERVALU, INC ALAN FIELD, ALAN RECKNER 4-2-02 MODIFIED TO         *\n*  FIND PROGRAM NAME FOR JOB/STC THAT MAY BE USING TOO MUCH CPU       *\n*  THE LDA LOGIC APPEARS TO NOT BE USED IN THE ORIGINAL PROGRAM       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* NOTES:                                                              *\n*                                                                     *\n*                 REGISTER CONVENTIONS =                              *\n*                                                                     *\n*                    REGISTER  0       = UNUSED                       *\n*                    REGISTER  1       = ADDRESS OF INPUT PARAMETERS  *\n*                    REGISTER  2       = ASXB                         *\n*                    REGISTER  3       = WORK                         *\n*                    REGISTER  4       = WORK                         *\n*                    REGISTER  5       = WORK                         *\n*                    REGISTER  6       = WORK                         *\n*                    REGISTER  7       = WORK                         *\n*                    REGISTER  8       = WORK                         *\n*                    REGISTER  9       = LDA THEN TCB                 *\n*                    REGISTER  10      = WORK                         *\n*                    REGISTER  11      = LDA                          *\n*                    REGISTER  12      = MODULE BASE REGISTER         *\n*                    REGISTER  13      = WORK                         *\n*                    REGISTER  14      = WORK                         *\n*                    REGISTER  15      = WORK                         *\n*                                                                     *\n*                PATCH LABEL = N/A                                    *\n*                                                                     *\n*                ATTRIBUTES =                                         *\n*                                                                     *\n*             ENTRY POINTS = MONJOBSS (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT =                                                *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE =                                        *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES =                                           *\n*                                                                     *\n*                DATA AREAS =                                         *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = IHASRB, IHALDA, IHAASCB                        *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES =                                           *\n***********************************************************************\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nFPR0     EQU   0\nFPR2     EQU   2\nFPR4     EQU   4\nFPR6     EQU   6\nZERO     EQU   0\nONE      EQU   1\nTWO      EQU   2\nTHREE    EQU   3\nFOUR     EQU   4\nFIVE     EQU   5\nSIX      EQU   6\nSEVEN    EQU   7\nEIGHT    EQU   8\nNINE     EQU   9\nTEN      EQU   10\nELEVEN   EQU   11\nTWELVE   EQU   12\nFOURTEEN EQU   14\nFIFTEEN  EQU   15\nSIXTEEN  EQU   16\nSEVNTEEN EQU   17\nEIGHTEEN EQU   18\nPOSTED   EQU   B'01000000'\nMASK0111 EQU   B'00000111'\nMASK1000 EQU   B'00001000'\nMASK1110 EQU   B'00001110'\nALLBITS  EQU   B'11111111'\nMONJOBSS AMODE 31\nMONJOBSS RMODE ANY\n         EJECT\n***********************************************************************\n*      MODULE ENTRY POINT                                             *\n***********************************************************************\n         SPACE 3\nMONJOBSS CSECT\n         USING MONJOBSS,R15        TEMPORARY ADDRESSABILITY\n         B     BEGIN               SKIP OVER THE EYECATCHER\n*  ENTRY POINT FOR RESOURCE MANAGER TERMINATION ROUTINE\nRMTR     DS    0H\n         USING SRBECB,R1           FIELD ADDRESSABILITY\n         BCTR  R15,ZERO            BACK UP BASE REG BY ONE BYTE\n         BCTR  R15,ZERO            BACK UP BASE REG BY TWO BYTES\n         BCTR  R15,ZERO            BACK UP BASE REG BY THREE BYTES\n         BCTR  R15,ZERO            BACK UP BASE REG BY FOUR BYTES\n         LR    R12,R15             AND ESTABLISH MODULE BASE REGISTER\n         XC    SRABLOCK,SRABLOCK   ZERO OUT TO INDICATE NO DATA\n         B     POSTIT              GO INDICATE THE SRB IS DONE\n*\n         DC    CL8'MONJOBSS'       MODULE NAME\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n*\nBEGIN    DS    0H\n         LR    R12,R15             SET UP MODULE BASE REGISTER\n         DROP  R15                 FORGET THAT\n         USING MONJOBSS,R12        MODULE ADDRESSABILITY\n         LR    R11,R0              COPY OVER THE SRB ADDRESS\n         USING SRB,R11             FIELD ADDRESSABILITY TO SRB\n         L     R10,SRBASCB         GET THE ASCB ADDRESS\n         USING ASCB,R10            FIELD ADDRESSABILITY TO ASCB\n*\n         L     R9,ASCBLDA          ADDRESS OF THE LDA\n         USING LDA,R9              ESTABLISH FIELD ADDRESSABILITY\n         EJECT\n***********************************************************************\n*      COPY LDA FIELDS TO PARMS AREA IN SQA                           *\n***********************************************************************\n         SPACE 3\n         USING SRBECB,R1           FIELD ADDRESSABILITY\n         MVC   SRACRGTP,LDACRGTP   COPY CURRENT TOP OF REGION\n         MVC   SRALIMIT,LDALIMIT   COPY IEALIMIT VALUE\n         MVC   SRAHIAL,LDAHIAL     COPY HI ALLOCATED VALUE\n*\n         MVC   SRAERGTP,LDAERGTP   COPY CURRENT TOP OF REGION > 16M\n         MVC   SRAELIM,LDAELIM     COPY IEALIMIT VALUE > 16M\n         MVC   SRAEHIAL,LDAEHIAL   COPY HI ALLOCATED VALUE > 16M\n         MVC   SRAESTRA,LDAESTRA   COPY REGION STARTING ADDRESS > 16M\n         MVC   SRAREGRQ,LDAREGRQ   COPY REGION SIZE REQUESTED\n* AR 4-2-02 LOGIC TO FIND THE PROGRAM NAME ********\n         L      R2,ASCBASXB         XTENDED ASCB\n         USING  ASXB,R2\n** X     MVC    DAUSER(7),ASXBUSER   USER ID\n** X     MVC    DAASXBT(4),ASXBFTCB   ARE THEY ALL THE SAME?\n** X     MVC    DAASXBT+4(4),ASCBASXB\n**AR 3-26-02 WE COME HERE FOR SOME STC AS WELL AS JOBS, WHY?\n         L      R9,ASXBFTCB         FIRST TCB ON CHAIN\n         DROP   R9\n         USING  TCB,R9\n* NOW FIND A TCB THAT IS NOT KEY=0, SEARCH QUE OF TCB'S\n* WE SHOULD COMPARE TO ASXBTCBS SO WE DO NOT GO PAST END OF CHAIN\nP01020    C     R9,TCBJSTCB\n          BNE   P01030\n          CLC   TCBTCB,=X'00000000'  END OF CHAIN?\n          BE    P01030              NOT RIGHT, BUT WHAT ELSE TO DO?\n          L     R9,TCBTCB          GO GET NEXT TCB\n          B     P01020\nP01030   EQU    *\n         L      R2,TCBJSCB\n         DROP   R2\n         USING  IEZJSCB,R2\n         MVC    SRAPGMN(8),JSCBPGMN   PROGRAM NAME\n         CLI    JSCBPGMN,X'00'        NOT THERE, GO LOOK\n         BNE    P01050\n         L      R9,TCBBACK            PREV TCB ON QUE\n         L      R2,TCBJSCB\n* AR 4-2-02 THE NEXT 2 DID NOT HAVE ANY EFFECT.\n*        L      R2,JSCBACT            FIND ACTIVE JSCB\n         MVC    SRAPGMN(8),JSCBPGMN   PROGRAM NAME\nP01050   EQU    *\n         EJECT\n***********************************************************************\n*      POST THE MONITOR TASK THAT WE HAVE DONE OUR WORK               *\n***********************************************************************\n         SPACE 3\nPOSTIT   DS    0H\n         L     R2,SRBECB           GET THE CONTENTS OF THE ECB\n         N     R2,=X'3FFFFFFF'     TURN OFF WAIT AND POST BITS\n         L     R3,=X'40000000'     SET TO TURN ON THE POST BIT\n*\n         CS    R2,R3,SRBECB        TRY TO POST THE ECB\n         BZ    POSTDONE            YEP, IT WORKED\n*\n         LTR   R2,R2               TEST IF THE WAIT BIT IS ON\n         BM    DOPOST              YEP, WE GOTTA GO THROUGH POST\n*\n         N     R2,=X'40000000'     TEST IF ECB IS NOW POSTED\n         BNZ   POSTDONE            YEP, WE CAN SKIP THE POST\n*\nDOPOST   DS    0H\n         LR    R2,R14              SAVE THE RETURN ADDRESS\n         L     R10,SRAASCB         ASCB ADDRESS TO POST COMPLETION\n         POST  SRBECB,                                                 X\n               LINKAGE=SYSTEM,                                         X\n               ECBKEY=0,                                               X\n               ASCB=(R10),                                             X\n               ERRET=MONJOBSS+FOUR,                                    X\n               MF=(E,SRBPOST)\n         LR    R14,R2              RECOVER THE RETURN ADDRESS\nPOSTDONE DS    0H\n         SR    R15,R15             INDICATE OUT GENERAL HAPPINESS\n         BR    R14                 AND RETURN TO THE SYSTEM\n*\n         LTORG ,\n         EJECT\nSRBAREA  DSECT ,\n         DS    XL(SRBSIZE)\nSRBECB   DS    F\nSRBPOST  DS    4F\nSRAASCB  DS    F\nSRABLOCK DS    0XL40\nSRACRGTP DS    F\nSRALIMIT DS    F\nSRAHIAL  DS    F\nSRAERGTP DS    F\nSRAELIM  DS    F\nSRAEHIAL DS    F\nSRAESTRA DS    F\nSRAREGRQ DS    F\nSRAPGMN  DS    CL8\nSRBLNGTH EQU   *-SRBAREA\n*\n         IHAASCB ,\n         IHALDA ,\n         IHASRB ,\n         IHAASXB\n         EJECT\n         IHAASVT\n         EJECT\nTCBFIX   DSECT\n         IKJTCB      TCB\n         EJECT\n         IEZJSCB     JSCB\n         EJECT\n         END\n./ ADD NAME=RACFDS   0100-03311-03311-1200-00148-00148-00000-FILE066 00\nRACFDS   MOWSTART\n***********************************************************************\n* PROGRAM LISTS INFORMATION FROM THE RACF CVT AND DSDT                *\n***********************************************************************\nMOWWORK  DSECT\nMSG1     DC    CL80' '\nRACFDS   CSECT\nRACFDS   AMODE 31\nRACFDS   RMODE 24\n         USING CVT,R2\n         L     R2,16                      POINT TO CVT\n         USING RCVT,R3\n         L     R3,CVTRAC                  POINT TO RACF CVT\n         LTR   R3,R3                      CHECK IT\n         BZ    FIN                        NOT SET\n         USING DSDT,R6\n         L     R6,RCVTDSDT                DATASET DESCRIPTOR TABLE\n         USING DSDE,R7\n         LA    R7,DSDTENTY\n         L     R2,DSDTNUM                 # ENTRIES IN TABLE\n         SLL   R2,1                       MULTIPLY BY 2\n         MVI   MSG1,X'40'                 A BLANK\n         MVC   MSG1+1(79),MSG1            BLANK IT OUT\nPUTNAME  EQU   *\n         MVC   MSG1(44),DSDEDSN\n         LA    R4,MSG1+45                 POINT TO MESSAGE AREA\n         MVC   0(7,R4),=C'OLD FMT'\n         TM    DSDESTAT,X'40'             IS THIS THE PRIMARY\n         BZ    TA                         NO\n         TM    DSDTFLAG,X'80'             TEST FOR FORMAT\n         BZ    T0                         OLD FORMAT\n         B     TB                         SET NEW FORMAT\nTA       EQU   *\n         TM    DSDTFLAG,X'40'             TEST BACKUP FOR NEW FMT\n         BZ    T0                         ITS NOT\nTB       EQU   *\n         MVC   0(3,R4),=C'NEW'            INDICATE NEW FMT\nT0       EQU   *\n         LA    R4,8(R4)\n         TM    RCVTSTAT,RCVTRNA           IS IT ACTIVE\n         BZ    T1\n         MVC   0(12,R4),=C'NOT ACTIVE, '  MESSAGE TO SAY ITS NOT ACTIVE\n         LA    R4,12(R4)                  NEXT MESSAGE SLOT\nT1       EQU   *\n         TM    RCVTSTAT,RCVTNLS           BYPASS STATS\n         BZ    T2\n         MVC   0(14,R4),=C'BYPASS STATS, '\n         LA    R4,14(R4)\nT2       EQU   *\n         BCTR  R4,0\n         MVI   0(R4),X'40'\n         BAL   R10,DISPLAY\n         LA    R7,176(R7)             POINT TO NEXT DATASET ENTRY\n         BCT   R2,PUTNAME\n         SPACE\n         L     R2,RCVTDPTB            ADDRESS OF DYNAMIC PARSE TABLE\n         LTR   R2,R2                  IS IT LOADED\n         MVC   MSG1(14),=C'DYNAMIC PARSE '\n         MVC   MSG1+14(6),=C'ACTIVE'\n         BNZ   *+10\n         MVC   MSG1+14(8),=C'INACTIVE'\n         TPUT  MSG1,L'MSG1\n         SPACE\n         L     R4,RCVTSPT           POINT TO STARTED PROCEDURES TABLE\n         USING RSTCTAB,R4\n         LH    R5,RSTCENT           NUMBER OF ENTRIES IN TABLE\n         N     R5,=X'00007FFF'      MAKE SURE ITS POSITIVE\n         LTR   R5,R5                IF ZERO, ICHRIN03 NOT IN USE\n         BNZ   STCNAM0              IT IS\n         MVC   MSG1(19),=C'ICHRIN03 NOT IN USE'\n         BAL   R10,DISPLAY\n         B     FIN\nSTCNAM0  EQU   *\n         MVC   MSG1(L'RSTCTITL),RSTCTITL\n         BAL   R10,DISPLAY\nSTCNAM   EQU   *\n         MVC   MSG1(L'RSTCNAM),RSTCNAM       MOVE IN STC NAME\n         MVC   MSG1+9(L'RSTCUSR),RSTCUSR     MOVE IN USERID\n         TM    RSTCFLG,RSTPRIV      TEST FOR PRIVILEDGED\n         BZ    *+8                  ITS NOT\n         MVI   MSG1+18,C'P'         INDICATE PRIVILEDGED\n         TM    RSTCFLG,RSTTRUS      TEST FOR TRUSTED\n         BZ    *+8                  ITS NOT\n         MVI   MSG1+19,C'T'         INDICATE TRUSTED\n         LA    R4,RSTELEN(0,R4)     POINT TO NEXT STC ENTRY\n         BAL   R10,DISPLAY          PUT OUT NAME\n         BCT   R5,STCNAM            LOOP WHILE MORE ENTRIES\nFIN      EQU   *\n         MOREND\nDISPLAY  DS    0H\n         SETMODE 24\n         TPUT  MSG1,L'MSG1          PUT OUT INFORMATION\n         MVI   MSG1,X'40'           A BLANK\n         MVC   MSG1+1(L'MSG1-1),MSG1  CLEAR FIELD\n         SETMODE 31\n         MVI   MSG1,X'40'                 A BLANK\n         MVC   MSG1+1(79),MSG1            BLANK IT OUT\n         BR    R10                        RETURN\n         SPACE\nRSTCTITL DC    CL20'--NAME-- -USERID- --'\n         SPACE\nDSDT     DSECT\nDSDTID   DC    CL4' '\nDSDTNUM  DC    XL4'00'\nDSDTDSDX DC    XL4'00'\nDSDTVRSN DC    XL1'00'\nDSDTFLAG DC    XL1'00'\n         DC    XL2'00'\n         DC    CL8' '\nDSDTPLNM DC    CL48' '\nDSDTPLTK DC    CL8' '\nDSDTBLNM DC    CL48' '\nDSDTBLTK DC    CL8' '\nDSDTDSFL DC    CL1' '\nDSDTDSMO DC    CL1' '\n         DC    CL2' '\n         DC    CL4' '\nDSDTENTY DS    0CL80\nDSDE     DSECT\nDSDEDCB  DC    XL4'00'\nDSDEDEB  DC    XL4'00'\nDSDEINDX DC    XL4'00'\nDSDEHDR  DC    XL4'00'\nDSDEUCB  DC    XL4'00'\nDSDEXLEN DC    XL4'00'\nDSDEBAM  DC    XL4'00'\nDSDEDSNL DC    XL1'00'\nDSDESTAT DC    XL1'00'\nDSDENREC DC    XL2'00'\nDSDERXNO DC    XL1'00'\nDSDEDSN  DC    CL44' '\nDSDEDSNO DC    XL1'00'\nDSDECBLN DC    XL2'00'\n         SPACE\nRSTCTAB  DSECT\nRSTCENT  DC    H'0'\nRSTCNAM  DC    CL8' '\nRSTCUSR  DC    CL8' '\nRSTCGRP  DC    CL8' '\nRSTCFLG  DC    X'00'\nRSTPRIV  EQU   X'80'\nRSTTRUS  EQU   X'40'\nRSTCRSV  DC    XL7'00'\nRSTELEN  EQU   *-RSTCNAM\n         SPACE\n         ICHPRCVT\n         CVT   DSECT=YES\n         END\n./ ADD NAME=RETCODE  0123-86142-07242-1131-00152-00020-00145-TCACF0  00\n         TITLE '*** RETCODE ***'\nRETCODE  MOWSTART\nRETCODE  AMODE 31\nRETCODE  RMODE ANY\n**********************************************************************\n* USEFUL FOR SETTING COND CODE TO TEST JCL CONDITIONAL STUFF BEFORE  *\n* IMPLEMENTING IN PROCS ETC.                                         *\n*                                                                    *\n* IF PARM IS NOT PRESENT, RC IS SET TO DAY OF MONTH.                 *\n* IF PARM IS NUMERIC, IT IS PUT IN R15 TO USE AS RETURN CODE FOR     *\n*    SUBSEQUENT STEPS.                                               *\n* IF PARM = SREL, TAKES SYSTEM RELEASE FROM FMID AND MAKES IT THE RC *\n* IF PARM = SYSN, SETS RC BASED ON SYSID, FROM TABLE IN PROGRAM.     *\n* IF PARM = J=NNNNN, WHERE NNNNN IS A JOB OR STARTED TASK NAME, THE  *\n*    RC IS SET TO 4 IF THAT JOB IS FOUND RUNNING WHEN RETCODE IS     *\n*    RUN.                                                            *\n**********************************************************************\n         L     R1,0(R1)                GET PARM\n         LH    R2,0(R1)                LENGTH OF PARM FIELD\n         LTR   R2,R2                   CHECK FOR ANY LENGTH\n         BZ    SETDOM         NO PARM, USE DAY OF MONTH (1-31) AS RC\n         LA    R1,2(R1)                POINT TO DATA PORTION\n         BCTR  R2,0                    LESS ONE\n         CLC   0(4,R1),=C'SREL'        REQUESTING SYSTEM RELEASE CC?\n         BNE   SETNAM                  NO, TRY FOR SYSTEM NAME\n         L     R3,CVTPTR               A(CVT)\n         SH    R3,=H'256'              A(CVT PREFIX)\n         USING CVTFIX,R3\n         PACK  DOUBLE,CVTPRODI+4(3)    NUMERIC PORTION OF FMID\n         CVB   R15,DOUBLE              MAKE IT NUMERIC\n         B     FIN                     INDICATE SREL\n         SPACE\nSETNAM   EQU   *\n         CLC   0(4,R1),=C'SYSN'        REQUESTING SYSTEM NAME CC?\n         BNE   SETJOB                  NO, TRY FOR JOB NAME\n         L     R2,CVTPTR               A(CVT)\n         USING CVTMAP,R2\n         L     R3,CVTECVT              POINT TO ECVT\n         USING ECVT,R3                 BASE REG FOR ECVT\n         L     R2,CVTSMCA              A(SMF COMM AREA)\n         USING SMCABASE,R2\n         LA    R5,SYSNAM               TABLE OF SYS NAMES\n         LA    R4,NENT\nSETNAM1  EQU   *\n         CLC   0(4,R5),SMCASID         FOUND OUR ENTRY?\n         BE    SETNAM2                 YES\n         LA    R5,6(,R5)               NO, POINT TO NEXT ONE\n         BCT   R4,SETNAM1              LOOP WHILE ENTRIES IN TABLE\n         SPACE\nSETNAM2  EQU   *\n         LH    R15,4(,R5)              GET RC VALUE FROM TABLE\n         CLC   SMCASID,=C'WETA'        CHECK FOR SPECIAL CASE\n         BNE   FIN                     NOT A WETTERAU SYSTEM\n         LA    R15,1(,R15)             ADD ONE\n         CLC   =C'WETY2K',ECVTVMNM     WETTERAU Y2K GUEST\n         BE    FIN                     SET RC BASED ON SYSTEM\n         LA    R15,1(,R15)             ADD ONE\n         CLC   =C'MVSTST',ECVTVMNM     WETTERAU TEST SYSTEM\n         BE    FIN                     SET RC BASED ON SYSTEM\n         B     FIN                     SHOULDN'T EVER DO THIS\n         SPACE\nSETJOB   EQU   *\n         CLC   0(2,R1),=C'J='          REQUESTING JOB NAME TEST?\n         BNE   SETVAL                  NO, CONVERT NUMERIC PARM\n         SH    R2,=H'2'                R2 HAS LENGTH OF JOB NAME\n         USING CVTFIX,R10              BASE REG FOR CVT\n         USING ASCB,R8                 BASE REG FOR ASCB\n         USING ASVT,R9                 BASE REG FOR ASVT\n         LA    R15,4                   ASSUME JOB IS FOUND\n         L     R10,CVTPTR              LOAD CVT BASE REG\n         SH    R10,=H'256'             A(CVT PREFIX)\n         L     R9,CVTASVT              AND ASVT BASE REG\n         LA    R10,ASVTENTY-4          AND NOW POINT TO ASVT\n         LA    R7,ASVTMAXU             POINT TO MAX NUM ASVTS\n         L     R7,0(R7)                THERE NOW\nSCANLIST EQU   *\n         LA    R10,4(R10)              NEXT ASVTENTY\n         CLI   0(R10),X'80'            TEST FOR ASID ASSIGNED\n         BE    UNUSED                  ITS NOT IN USE\n         L     R8,0(R10)               A(ASCB)\n         L     R6,ASCBJBNI             POINTER TO JOB NAME\n         LTR   R6,R6                   ZERO IF ITS A STC\n         BNZ   GETNAME                 NOT ZERO SO ITS A JOB\n         L     R6,ASCBJBNS             POINTER SO STC NAME\nGETNAME  EQU   *\n         EX    R2,CLCINS               CHECK FOR PARM JOB NAME\n         BE    FIN                     EXIT SETTING RC TO SAY JOB FND\nUNUSED   EQU   *\n         BCT   R7,SCANLIST\n         SR    R15,R15                 SET RC = 0, JOB NOT FOUND\n         B     FIN                     RC BASED ON WHETHER JOB FOUND\nCLCINS   CLC   0(*-*,R6),2(R1)         EXECUTED CLC\n         SPACE\nSETVAL   EQU   *\n         O     R2,X'00000070'          LENGTH ONE\n         EX    R2,PACK\n         CVB   R15,DOUBLE              MAKE IT A BINARY\n         B     FIN\n         SPACE\nSETDOM   EQU   *\n         TIME  DEC,DOUBLE,DATETYPE=YYYYMMDD,LINKAGE=SYSTEM\n         L     R2,RC           GET YYYYMMDD INTO A REGISTER\n         N     R2,=X'000000FF' TURN OF YYYYMM\n         SLL   R2,4            MAKE IT 00000DD0\n         O     R2,=X'0000000F' MAKE IT 00000DDF\n         XC    DOUBLE,DOUBLE   ZERO WORK AREA\n         ST    R2,DOUBLE+4     SAVE IT\n         CVB   R15,DOUBLE      SET RC = DAY NUMBER OF MOINTH\n         SPACE\nFIN      EQU   *\n         MOREND RC=(15)\nPACK     PACK  DOUBLE,0(0,R1) PACK IT\nDOUBLE   DC    D'0'           DOUBLE MUST BE FOLLOWED BY RC\nRC       DC    2F'0'          DDMMYYYY,0\n         SPACE\n         DS    0H             ALIGNMENT\nSYSNAM   DC    C'WETA',H'4001'           WETTERAU PRODUCTION\n         DC    C'WDRS',H'4002'           WETTERAU DISASTER RECOVERY\n         DC    C'WTST',H'4003'           WETTERAU MVSTST\n         DC    C'SV41',H'4004'           CORP\n         DC    C'D03 ',H'4005'           .\n         DC    C'??? ',H'4006'           .\n         DC    C'SVT2',H'4007'           .\n         DC    C'D01 ',H'4008'           .\n         DC    C'D02 ',H'4009'           .\n         DC    C'P01 ',H'4010'           .\n         DC    C'P02 ',H'4011'           .\n         DC    C'P03 ',H'4012'           .\n         DC    C'P04 ',H'4013'           .\n         DC    C'TIME',H'4014'           .\n         DC    C'P0A ',H'4015'           .\n         DC    C'P0B ',H'4016'           .\n         DC    C'P0C ',H'4017'           .\n         DC    C'P0D ',H'4018'           .\n         DC    C'A1T1',H'4019'           BOISE\n         DC    C'A1PA',H'4020'\n         DC    C'A1PB',H'4021'\n         DC    C'A1PC',H'4022'\n         DC    C'A2P1',H'4023'\n         DC    C'A2P2',H'4024'\n         DC    C'A2P3',H'4025'\n         DC    C'A2P4',H'4026'\n         DC    C'A2P5',H'4027'\nNENT     EQU   ((*-SYSNAM)/6)\n         DC    C'----',H'4000'      STOPPER ENTRY AT NENT + 1\n         EJECT\n         CVT   DSECT=YES,PREFIX=YES\n         IHAECVT\n         IEESMCA\n         IHAASCB\n         IHAASVT\n         END\n./ ADD NAME=SHOWLPAR 0163-97225-08206-1007-00440-00411-00440-TCACF0  00\n* GOES IN SYS2.LINKLIB, SETCODE AC(1)\n*\n* THIS PROGRAM DISPLAYS THE CURRENT PR/SM CONFIGURATION\n* IT USES AN AUTHORIZATION SVC (SVC 235), BUT YOU CAN GET RID OF\n* THE SVC AUTHORIZATION CALL BY CREATING AN ENTRY FOR SHOWLPAR IN\n* IKJTSOXX TABLE (PARAMETER AUTHCMD OR AUTHPGM)\n* THIS AN EXAMPLE OF THE DISPLAY YOU WILL GET :\n*\n* MODIFIED OCT 2006 FOR Z9. SHOWS ICF AND IFL SEPARATELY.\n*\n*---------------------------------------------------------------------\n*! 03 PARTITIONS, 04 PHYSICAL PROCESSORS, CURRENT PARTITION IS MVS1  !\n*! DISPATCH TIMES WERE EVALUATED ON A 1001 MILLISECONDS INTERVAL     !\n*!                                                                   !\n*!  MVSLOCA  : PARTITION NUMBER 01, 01 LOGICAL PROCESSORS            !\n*!      CP    -WEIGHT-    W/A    DISPATCH                            !\n*!      01      500       NO       17.0 %                            !\n*!                                                                   !\n*!  MVSPROD  : PARTITION NUMBER 02, 03 LOGICAL PROCESSORS            !\n*!      CP    -WEIGHT-    W/A    DISPATCH                            !\n*!      01      DED       YES      99.1 %                            !\n*!      02      DED       YES     101.7 %                            !\n*!      03      DED       YES      99.5 %                            !\n*!                                                                   !\n*!  MVSTEST  : PARTITION NUMBER 03, 01 LOGICAL PROCESSORS            !\n*!      CP    -WEIGHT-    W/A    DISPATCH                            !\n*!      01      500       NO        1.8 %                            !\n*---------------------------------------------------------------------\n         MACRO\n&NLA     SUBDW  &D1,&D2\n&NLA     DS     0H\n.* THIS MACRO SUBTRACTS 2 UNSIGNED DOUBLE-WORDS D1, D2\n.* (D1 MUST BE >= D2)\n.* RETURNS D1=D1-D2\n         MNOTE  '** THIS MACRO USES REGS 0 - 1 **'\n         L      0,&D1        1ST DOUBLE-WORD\n         L      1,&D2        2ND DOUBLE-WORD\n         SLR    0,1          SUBTRACT\n         ST     0,&D1        STORE THE RESULT\n         L      0,&D1+4      1ST DOUBLE-WORD\n         L      1,&D2+4      2ND DOUBLE-WORD\n         SLR    0,1          SUBTRACT\n         CLC    &D1+4(4),&D2+4     COMPARE\n         BH     DIFP&SYSNDX\n         L      1,&D1        THE 1ST RESULT WAS TOO BIG\n         S      1,=F'1'      DECREMENT\n         ST     1,&D1        STORE AGAIN 1ST RESULT\nDIFP&SYSNDX     DS  0H\n         ST     0,&D1+4\n         MEND\nSHOWLPAR CSECT\nSHOWLPAR AMODE  31\nSHOWLPAR RMODE  24\n         SAVE   (14,12),,SHOWLPAR-&SYSDATE-&SYSTIME\n         LR     R12,R15\n         USING  SHOWLPAR,R12\n         LR     R9,R13\n         LA     R13,SAVE\n         ST     R13,8(R9)\n         ST     R9,4(R13)\n* OBTAIN 1 PAGE AND FIX IT (FOR THE PRSM BUFFER)\n*        LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n*        SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         GETMAIN  RU,LV=4096,BNDRY=PAGE     GETMAIN 1 PAGE\n         LR     R8,R1                  KEEP ADDRESS OF PAGE\n         L      R7,=F'4096'\n         AR     R7,R8                  END ADDRESS\n         PGFIX  R,A=(R8),ECB=0,EA=(R7) FIX THE PAGE FOR DIAGNOSE\n         ST     R15,RETCODE\n         MODESET  MODE=PROB,KEY=NZERO\n*        XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n*        SVC    235                    AUTHORIZATION SVC : AUTH OFF\n         L      R1,RETCODE             TEST RC FROM FIX\n         LTR    R1,R1\n         BZ     FIX0\n         TPUT   =C'** BAD RETURN CODE AFTER PGFIX **',33\n         B      END0\n* ISSUE DIAGNOSE INSTRUCTION TO GET PRSM DATA (FIRST PASS)\nFIX0     DS     0H\n         L      R6,16                  A(CVT)\n         USING  CVT,R6\n         L      R7,CVTPCCAT            POINT TO PCCA\n         LA     R3,16                  MAX NUM CPUS\n         LA     R5,ATTRTAB             POINT TO ATTRIBUTE TABLE\nLOOP     EQU    *\n         ICM    R4,B'1111',0(R7)       A(PCA) FOR CPU\n         USING  PCCA,R4\n         MVC    0(1,R5),PCCAATTR       SAVE ATTRIBUTE OF CPU\n         LA     R7,4(,R7)              POINT TO NEXT CPU PCCA\n         LA     R5,1(,R5)              POINT TO NEXT ATTR SLOT\n         BCT    R3,LOOP                LOOP WHILE CPUS TO DO\n*        LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n*        SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         LRA    R1,0(R8,0)             LOAD REAL ADDRESS OF BUFFER\n         LA     R0,4                   GET INFORMATION FROM PRSM\n         DC     X'83',X'10',X'0204'    DIAGNOSE CODE 0204\n         LTR    R0,R0                  EXECUTION CORRECT ?\n         BNZ    ITSBAD                 NO\n         MODESET  MODE=PROB,KEY=NZERO\n*        XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n*        SVC    235                    AUTHORIZATION SVC : AUTH OFF\n* STORE CPU DISPATCH TIMES IN THE TABLE\n         LR     R5,R8\n         USING  DDBL1,R5\n* PROCESS 1 PARTITION\n         XR     R9,R9\n         IC     R9,DDBNUMCP            HOW MANY PARTITIONS ?\n         LTR    R9,R9\n         BZ     END0                   NO PARTITION\n         MVC    DW1,DDBTODCK\n         LR     R4,R5\n         LA     R4,(PRPRFLEN)(0,R4)    ACCESS TO 1ST PARTITION\n         DROP   R5\n         USING  DDBPPDTA,R4\n         LA     R9,1(0,R9)             # OF PART + FOR 'PHYSICAL' PART\nLOPPART0 DS     0H\n         IC     R1,DDBLPNN             PARTITION NUMBER\n         STC    R1,PARTNO              STORE\n* PROCESS 1 LOGICAL PROCESSOR IN 1 PARTITION\n         XR     R3,R3\n         IC     R3,DDBNMVP             HOW MANY PROCESSORS ?\n         LA     R4,(PRPALENG)(0,R4)    ACCESS 1ST PROC. IN PARTITION\n         LTR    R3,R3                  NONE ?\n         BZ     NXTPART                YES, PARTITION DEACTIVATED\n         DROP   R4\n         USING  DDBVPDBS,R4\nLOPPROC0 DS     0H\n* STORE DISPATCH TIMES IN THE TABLE\n         LA     R2,TABLE\n         XR     R1,R1\n         ICM    R1,B'0011',DDBVPADR    PROCESSOR NUMBER\n         SLL    R1,3                   X8 (SIZE OF AN ENTRY)\n         AR     R2,R1                  + ADDRESS OF TOP OF TABLE\n         XR     R1,R1                  CLEAR R1\n         IC     R1,PARTNO              PARTITION NUMBER\n         SLL    R1,7                   X8 X16 (16 PROC. MAXIMUM)\n         AR     R2,R1                  + ADDRESS\n         MVC    0(8,R2),DDBPDTIM       DISPATCH TIME COPIED IN TABLE\n         LA     R4,(PRPRLENG)(0,R4)    ACCESS TO NEXT PROCESSOR ENTRY\n         BCT    R3,LOPPROC0            PROCESS NEXT PROCESSOR\nNXTPART  BCT    R9,LOPPART0            PROCESS NEXT PARTITION\n* WAIT 1 SECOND BEFORE GETTING NEW STATISTICS\n         STIMER WAIT,,DINTVL=INT\n* RE-ISSUE DIAGNOSE INSTRUCTION (SECOND PASS)\n*        LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n*        SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         LRA    R1,0(R8,0)             LOAD REAL ADDRESS\n         LA     R0,4\n         DC     X'83',X'10',X'0204'    DIAGNOSE CODE 0204\n         LTR    R0,R0\n         BNZ    ITSBAD\n         MODESET  MODE=PROB,KEY=NZERO\n*        XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n*        SVC    235                    AUTHORIZATION SVC : AUTH OFF\n* SECOND PASS, PROCESS DATA IN THE BUFFER\n         LR     R5,R8\n         USING  DDBL1,R5\n         MVC    DW2,DDBTODCK\n* COMPUTE THE EXACT LENGTH OF THE TIME INTERVAL\n         SUBDW  DW2,DW1            SUBTRACT THE 2 DOUBLE WORDS\n         LM     R0,R1,DW2\n         SRDL   R0,12              GET TIME IN MICROSECONDS\n         D      R0,=F'1000'        THEN IN MILLISECONDS\n         ST     R1,INTREAL         STORE TIME INTERVAL LENGTH\n         CVD    R1,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   OUT,DW1            AND TO DECIMAL ZONED\n         OI     OUT+L'OUT-1,X'F0'  NORMALIZE THE SIGN\n* HOW MANY PARTITIONS ?\n         XR     R0,R0\n         IC     R0,DDBNUMCP        LOAD NUMBER OF PARTITIONS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NBPART,DW1         AND TO DECIMAL ZONED\n         OI     NBPART+L'NBPART-1,X'F0'   NORMALIZE THE SIGN\n* HOW MANY PHYSICAL PROCESSORS ?\n         XR     R0,R0\n         ICM    R0,B'0011',DDBNUMPP        LOAD NUMBER OF PARTITIONS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NBPROC,DW1         AND TO DECIMAL ZONED\n         OI     NBPROC+L'NBPROC-1,X'F0'   NORMALIZE THE SIGN\n         LR     R4,R5\n         AH     R4,DDBORGPN        OFFSET TO CURRENT PARTITION\n         MVC    PARTCUR,(DDBPRNAM-DDBPPDTA)(R4)       NAME OF PARTITION\n         TPUT   MSG1,LMSG1         HOW MANY PARTITIONS AND PROCESSORS\n         TPUT   MSG2,LMSG2         HOW LONG IS THE TIME INTERVAL ?\n* PROCESS 1 PARTITION\n         XR     R9,R9\n         IC     R9,DDBNUMCP        NUMBER OF PARTITIONS\n         LTR    R9,R9\n         BZ     END0               NO PARTITION\n         LR     R4,R5\n         LA     R4,(PRPRFLEN)(0,R4)    ACCESS TO 1ST PARTITION\n         DROP   R5\n         USING  DDBPPDTA,R4\n         LA     R9,1(0,R9)             # OF PART + FOR 'PHYSICAL' PART\nLOPPART  DS     0H\n* WHAT IS THE PARTITION NUMBER ?\n         XR     R0,R0\n         IC     R0,DDBLPNN              PARTITION NUMBER\n         CVD    R0,DW1                  CONVERSION TO PACKED DECIMAL\n         UNPK   NPART,DW1               AND TO DECIMAL ZONED\n         OI     NPART+L'NPART-1,X'F0'   NORMALIZE THE SIGN\n         MVC    NPARTX+1(1),DDBLPNN     PARTITION NUMBER\n         UNPK   NPARTX(1),NPARTX+1(1)\n         NC     NPARTX(2),=2X'0F'\n         TR     NPARTX(2),=C'0123456789ABCDEF'       MAKE IT HEX\n* HOW MANY LOGICAL PROCESSORS FOR THIS PARTITION ?\n         XR     R0,R0\n         IC     R0,DDBNMVP         PROCESSORS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NPROC,DW1          AND TO DECIMAL ZONED\n         OI     NPROC+L'NPROC-1,X'F0'   NORMALIZE THE SIGN\n* STATUS OF THE PARTITION (ACTIVE / INACTIVE)\n         MVC    STATUS,=C'               '\n         CLI    DDBNMVP,X'00'      NO PROCESSOR ?\n         BNE    PROCNONE\n         MVC    STATUS,=C' ** INACTIVE **'\nPROCNONE DS     0H\n         MVC    PARTN,DDBPRNAM     NAME OF PARTITION\n         TPUT   =C' ',1            SKIP 1 LINE\n         TPUT   MSG3,LMSG3\n         IC     R1,DDBLPNN         PARTITION NUMBER\n         STC    R1,PARTNO          STORED\n* PROCESS 1 PROCESSOR FOR 1 PARTITION\n         XR     R3,R3\n         IC     R3,DDBNMVP         HOW MANY PROCESSORS ?\n         LA     R4,(PRPALENG)(0,R4)  ACCESS 1ST PROCESSOR IN PARTITION\n         LTR    R3,R3              NONE ?\n         BZ     NEXTPART           YES, PARTITION WAS DEACTIVATED\n         TPUT   =C'       CP    -WEIGHT-    W/A    DISPATCH  CAPPED',48\n         DROP   R4\n         USING  DDBVPDBS,R4\nLOPPROC  DS     0H\n* LOGICAL PROCESSOR NUMBER\n         XR     R1,R1              R1 = 0\n         ICM    R1,B'0011',DDBVPADR    LOGICAL PROCESSOR NUMBER\n         CVD    R1,DW1             CONVERT TO PACKED\n         UNPK   NOPROC,DW1         AND TO DECIMAL ZONED\n         OI     NOPROC+L'NOPROC-1,X'F0'     NORMALIZE THE SIGN\n         LA     R2,ATTRTAB         POINT TO ATTRIBUTE TABLE\n         AR     R2,R1              AND ENTRY FOR THIS PROCESSOR\n* WEIGHT OF THE PROCESSOR\n         LH     R1,DDBPRELS        WEIGHT OF THIS PROCESSOR\n         CVD    R1,DW1             CONVERT TO PACKED\n         MVC    WEIGHT,=X'4020202020202020'    MASK FOR INSTRUCTION ED\n         ED     WEIGHT,WORD        CONVERT TO DECIMAL ZONED\n* WAIT ASSIST\n         MVC    ASSIST,=CL3'NO'\n         TM     DDBVPFGS,DDBWSTAS  WAIT ASSIST=YES?\n         BNO    NOWASST            NO\n         MVC    ASSIST,=CL3'YES'   YES\nNOWASST  DS     0H\n* CAPPED\n         MVC    CAPPED,=CL3'NO'\n         TM     DDBVPFGS,DDBCAPFL  CAPPED?\n         BNO    NOCAPPED           NO\n         MVC    CAPPED,=CL3'YES'   YES\nNOCAPPED DS     0H\n* DISPATCH TIME PERCENTAGE\n         MVC    DISPPC,=CL5'?????' PERCENT DISPATCH TIME UNKNOWN\n* WEIGHT OF THE PROCESSOR\n         CLC    DDBPRELS,=H'-1'    WEIGHT = X'FFFF' ?\n         BNE    NOTDEDIC                 NO\n         MVC    WEIGHT,=CL8'     DED'    YES : DEDICATED PROCESSOR\nNOTDEDIC DS     0H\n* PROCESSOR USE\n         L      R6,16                  A(CVT)\n         USING  CVT,R6\n         L      R6,CVTHID              HOST ID\n         USING  SHID,R6\n         MVC    PUSE(7),=CL7' IFL'     MAYBE ITS AN IFL?\n         CLC    CPCND_TYPE+2(4),=C'2094'  2064/2084/2094/....\n         BE     *+10\n         MVC    PUSE(7),=CL7' ICF'\n         CLI    DDBPTYPE,DDBPIFL       CHECK PROCESSOR TYPE\n         BE     GOTTYPE                IT IS AN IFL\n*        MVC    PUSE(7),=CL7'ZIIP'     MAYBE ITS A ZIIP?\n*        TM     0(R2),PCCAZIIP         ZIIP?\n*        BO     GOTTYPE                IT IS A ZIIP\n*        MVC    PUSE(7),=CL7'ZAAP'     MAYBE ITS A ZAAP?\n*        TM     0(R2),PCCA_BYLPAR_ZAAP  ZAAP?\n*        BO     GOTTYPE                IT IS A ZAAP\n         MVC    PUSE(7),=CL7' ICF'     MAYBE ITS AN ICF?\n         CLI    DDBPTYPE,DDBPICF       CHECK FOR PROCESSOR USE TYPE\n         BE     GOTTYPE                IT IS AN ICF\n         MVC    PUSE(7),=CL7'  OS'     OTHERWISE IT MUST BE A GP/OS\nGOTTYPE  EQU    *\n* COMPUTE CPU UTILIZATION FROM TABLE\n         LA     R2,TABLE\n         XR     R1,R1\n         ICM    R1,B'0011',DDBVPADR    PROCESSOR NUMBER\n         SLL    R1,3               X 8\n         AR     R2,R1              + BEGINNING OF TABLE\n         XR     R1,R1\n         IC     R1,PARTNO          PARTITION NUMBER\n         SLL    R1,7               X 8   X 16\n         AR     R2,R1              + BEGINNING OF TABLE\n         MVC    DW1,0(R2)          LAST DISPATCH TIME\n         MVC    DW2,DDBPDTIM       PRESENT DISPATCH TIME\n         CLC    DW1,DW2            COMPARE OLD AND NEW DISPATCH TIMES\n         BNL    NOCALC             IF OLD > NEW, ABNORMAL\n         CLI    DDBPTYPE,DDBPICF * ICF???\n         BE     NOCALC           *\n         SUBDW  DW2,DW1            SUBTRACT THEM\n         LM     R0,R1,DW2          LOAD MICROSECONDS\n         D      R0,INTREAL         DIVIDE BY TIME INTERVAL LENGTH\n         CVD    R1,DW1             CONVERT TO PACKED\n         UNPK   DISPP,DW1          AND TO DECIMAL ZONED\n         OI     DISPP+L'DISPP-1,X'F0'     NORMALIZE THE SIGN\n         MVC    DISPPC(3),DISPP               100\n         MVI    DISPPC+3,C'.'                    .\n         MVC    DISPPC+4(1),DISPP+3               0\n         CLI    DISPPC,C'0'        REPLACE LEADING ZEROES ...\n         BNE    NOCALC\n         MVI    DISPPC,C' '                              ... BY BLANKS\n         CLI    DISPPC+1,C'0'      REPLACE LEADING ZEROES ...\n         BNE    NOCALC\n         MVI    DISPPC+1,C' '                            ... BY BLANKS\nNOCALC   DS     0H\n* DISPLAY AN INFORMATION LINE ABOUT THE PROCESSOR USED BY THE PARTITION\n         TPUT   MSG4,LMSG4\n         LA     R4,(PRPRLENG)(0,R4)    NEXT PROCESSOR\n         BCT    R3,LOPPROC\nNEXTPART BCT    R9,LOPPART\n         B      END0\nITSBAD   DS     0H\n         MODESET  MODE=PROB,KEY=NZERO\n*        XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n*        SVC    235                    AUTHORIZATION SVC : AUTH OFF\n         TPUT   =C'** ERROR AFTER DIAGNOSE **',26\nEND0     DS     0H\n* FREE THE ALLOCATED PAGE\n*        LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n*        SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         L      R7,=F'4096'\n         AR     R7,R8                       END ADDRESS\n         PGFREE R,A=(R8),ECB=0,EA=(R7)      UNFIX PAGE IN MEMORY\n         FREEMAIN   RC,LV=4096,A=(8)\n         MODESET  MODE=PROB,KEY=NZERO\n*        XR    R0,R0                  AUTHORIZATION SVC : AUTH OFF\n*        SVC   235                    AUTHORIZATION SVC : AUTH OFF\nEND      DS    0H\n         L     R13,4(R13)\n         RETURN (14,12),T,RC=0\n         LTORG\nINT      DC    CL8'00000100'          WAIT INTERVAL : 1 SECOND\nRETCODE  DS    F                      RETURN CODE FROM PGFIX\nATTRTAB  DC    XL16'00'               ATTRIBUTE FLAG FOR EACH PROCESSOR\nMSG1     DC    CL2' '\nNBPART   DS    CL2\n         DC    C' PARTITIONS, '\nNBPROC   DS    CL2\n         DC    C' PHYSICAL PROCESSORS, CURRENT PARTITION IS '\nPARTCUR  DS    CL8\nLMSG1    EQU   *-MSG1\nMSG2     DC    C'  DISPATCH TIMES WERE EVALUATED ON A '\nOUT      DS    CL4\n         DC    C' MILLISECONDS INTERVAL'\nLMSG2    EQU   *-MSG2\nMSG3     DC    CL3' '\nPARTN    DS    CL8\n         DC    C' : PARTITION NUMBER '\nNPART    DS    CL2\n         DC    CL4' (X'''\nNPARTX   DC    CL2'  '\n         DC    C'''), '\nNPROC    DS    CL2\n         DC    C' LOGICAL PROCESSORS     '\nSTATUS   DC    CL15' '\nLMSG3    EQU   *-MSG3\nMSG4     DC    CL7' '\nNOPROC   DS    CL2\n         DC    C' '\nWEIGHT   DS    CL8\n         DC    CL7' '\nASSIST   DS    CL3\n         DC    CL5' '\nDISPPC   DS    CL5     % DISPATCH TIME FROM 000.0 TO 100.0 (OR MORE)\n         DC    C' %'\n         DC    CL4' '\nCAPPED   DS    CL3' '\n         DS    CL4' '\nPUSE     DC    CL7' '\nLMSG4    EQU   *-MSG4\nINTREAL  DS    F       TIME INTERVAL LENGTH\nPARTNO   DS    CL1\nDISPP    DS    CL4     % DISPATCH TIME FROM 0000 TO 1000 (OR MORE...)\nDW1      DS    D       DOUBLE-WORD FOR WORK\n         ORG   DW1+4\nWORD     DS    F\nDW2      DS    D       DOUBLE-WORD FOR WORK\n* WE STORE PROCESSOR DISPATCH TIMES IN THIS TABLE\nTABLE    DS    0CL2048          16 PARTITIONS X 16 PROCESSORS X 8C\n         DC    2048X'00'        16 PARTITIONS X 16 PROCESSORS X 8C\nSAVE     DS    16F\n* THIS DSECT DESCRIBES THE CONTENTS OF THE PR/SM BUFFER (OCO)\n* RETURNED BY THE DIAGNOSE X'204' INSTRUCTION. MAPPED BY ERBDDBL1.\n* DOC IS IN RMF DATA AREAS, LY28-1303\nDDBL1    DSECT\n* HEADER\nDDBNUMCP DS    CL1     HOW MANY PARTITIONS\nDDBFLAG1 DS    CL1     TIMER INFORMATION BLOCK HEADER FLAGS\nDDBGTMSL DS    CL2     TIME SLICE\nDDBNUMPP DS    CL2     HOW MANY PHYSICAL PROCESSORS\nDDBORGPN DS    H       OFFSET TO ENTRY FOR CURRENT PARTITION\nDDBTODCK DS    D       TOD\nPRPRFLEN EQU   (*-DDBL1)\n* ENTRY FOR PARTITION\nDDBPPDTA DS    0F\nDDBLPNN  DS    CL1     PARTITION NUMBER\nDDBNMVP  DS    CL1     HOW MANY LOGICAL PROCESSORS FOR THIS PARTITION\n         DS    CL6     RESERVED\nDDBPRNAM DS    CL8     NAME OF THE PARTITION\nPRPALENG EQU   (*-DDBPPDTA)\n* ENTRY FOR LOGICAL PROCESSOR IN USE BY THE PARTITION\nDDBVPDBS DS    0F\nDDBVPADR DS    CL2     LOGICAL PROCESSOR NUMBER\n         DS    CL2     RESERVED\nDDBPTYPE DS    CL1     PROCESSOR TYPE\nDDBPSTD  EQU   X'00'   GENERAL PURPOSE PROCESSOR\nDDBPAAP  EQU   X'01'   ZAAP PROCESSOR ???\nDDBPIIP  EQU   X'02'   ZIIP PROCESSOR ???\nDDBPIFL  EQU   X'03'   IFL PROCESSOR\nDDBPICF  EQU   X'04'   ICF PROCESSOR\nDDBVPFGS DS    CL1     FLAG (WAIT ASSIST, ETC)\nDDBWSTAS EQU   X'80'   WAIT COMPLETION FLAG\nDDBCAPFL EQU   X'40'   PARTITION CAPPING FLAG\nDDBPRELS DS    H       WEIGHT OF PARTITION - X'FFFF' MEANS DEDICATED\nDDBPDTIM DS    D       TIME A LOGICAL PROC. WAS DISPATCHED ON A PHYS.\nDDBEFFDT DS    CL8\nPRPRLENG EQU   (*-DDBVPDBS)\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAPCCA\n         IOSDSHID                      SYSTEM HOST ID MAPPING\n         REQU\n         END\n./ ADD NAME=SMFDS    0100-03311-03311-1200-00185-00185-00000-FILE066 00\nSMFDS    MOWSTART\nSMFDS    AMODE 31\nSMFDS    RMODE 24\n**********************************************************************\n* PROGRAM EMULATES THE OPERATOR D SMF COMMAND FOR TSO USERS.         *\n* ALSO IF PARM IS 'CA7', IS USED TO DEMAND A DUMP JOB FOR ANY DATA-  *\n* SETS FOUND WHICH HAVE THE DUMP REQUIRED BIT ON.                    *\n* GOES IN FIELD.TEST.LOAD                                            *\n**********************************************************************\n         L     R1,0(R1)             PARM POINTER\n         LH    R2,0(R1)             GET PARM LENGTH\n         LTR   R2,R2                ANY LENGTH?\n         BZ    TSOONLY              NO\n         CLC   2(3,R1),=C'CA7'      PARM SAYS CA7?\n         BNE   TSOONLY              NO, SO JUST DO TSO\n         OI    FLAG,CA7OPT          SET FLAG FOR CA7 OPTION PRESENT\nTSOONLY  EQU   *\n         SR    R11,R11              USE THIS REG FOR A RETURN CODE\n         L     R4,16                CVT\n         LR    R6,R4                COPY ADDRESS\n         S     R6,=F'32'            BACK UP TO CVTPRODI (HBB5510)\n         CLI   3(R6),C'4'           IS THIS REL 4?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL4         SET MVS REL 4 FLAG\n         CLI   3(R6),C'5'           IS THIS REL 5?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 5 FLAG\n         CLI   3(R6),C'6'           IS THIS REL 6?\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 6 FLAG\n         CLI   3(R6),C'7'           IS THIS REL 7\n         BNE   *+8                  NO\n         OI    FLAG,MVSREL5         SET MVS REL 7 FLAG\n         OI    FLAG,MVSREL5         SET MVS REL 5/6/7 FLAG\n         L     R6,196(0,R4)         CVTSMCA\n         USING SMCABASE,R6\n         TM    SMCAMISC,SMCAUSER    SMF RECORDING REQUESTED\n         BO    SMFIN                YES, SKIP MESSAGE\n         TPUT  SMFOFF,80                 TELL USER SMF IS INACTIVE\n         B     FIN                       AND QUIT\nSMFIN    EQU   *\n         L     R5,SMCALRDS               A(LAST RDS).\n         L     R4,SMCAFRDS               A(1ST RDS).\n         USING IEEMBRDS,R4     RDS IS DESCRIBED IN FICHE FOR IFADSMF.\n         L     R1,SMCAACTP               A(ACT)\n         USING IEEMBACT,R1\n         MVC   SMFTITLE+75(2),ACTMEMID   PARMLIB MEMBER SUFFIX\n         TPUT  SMFTITLE,80               DISPLAY TITLE RECORD\nMORSMFDS EQU   *\n         LA    R14,10                    DSN LENGTH MVS REL 4\n         TM    FLAG,MVSREL4              MVS REL 4?\n         BO    *+8                       SKIP THE IC INSTR\n         IC    R14,RDSNLEN               GET LENGTH OF DSN\n         BCTR  R14,0                     REDUCE FOR EXECUTED MOVE\n         EX    R14,MVCRDSNM              PUT SMF DSNAME IN MESSAGE\n         MVC   SMFDMND+33(1),SMFANS+8    GET LAST CHAR FROM SMF DSN\n         TM    FLAG,MVSREL4              MVS REL 4?\n         BZ    *+10\n         MVC   SMFVOL(6),RDS4VOL         SMF DATASET VOLSER\n         TM    FLAG,MVSREL5              MVS REL 5?\n         BZ    *+10\n         MVC   SMFVOL(6),RDS5VOL         SMF DATASET VOLSER\n         MVC   SMFSTAT(9),=C'ALTERNATE'\n         TM    RDSFLAG,X'04'             DS ACTIVE?\n         BO    *+10                      NO\n         MVC   SMFSTAT(9),=C'ACTIVE   '\n         TM    RDSFLAG,X'08'             DUMP REQD?\n         BZ    NODUMP                    NO\n         MVC   SMFSTAT(9),=C'DUMP REQD'\n         IC    R11,SMFANS+8              GET MAN NUMBER (1, 2, 3)\n         N     R11,=X'0000000F'          MAKE IT NUMERIC ONLY\n         TM    FLAG,CA7OPT               IS THIS FLAG ON?\n         BZ    NODUMP                    NO, SO DON'T TRY TO DEMAND IT\n* AT IPL IEFU29 DOES A DEMAND, CHECK IF THIS IS CLOSE TO AN IPL\n* AND IF SO DON'T DO THE DEMAND.\n*        L     R2,SMCAITME          GET IPL TIME FROM SMCA\n*        A     R2,=A(15*6000)       ADD 15 MINUTES * 60 1/100 SECONDS\n*        TIME  BIN                  GET CURRENT TIME\n*        CR    R0,R2                WITHIN 15 MINS OF IPL?\n*        BL    FIN                  YES - DON'T DEMAND SMF DUMP JOB\n         LA    R1,=A(CA7PARM)       POINT TO PARM LIST\n         LINK  EP=U7SVC             AND DEMAND IN JOB\n         B     FIN                  AND LEAVE\nNODUMP   EQU   *\n         TM    RDSFLAG,X'02'        CLOSE PENDING?\n         BZ    *+10                 NO\n         MVC   SMFSTAT(9),=C'CLOSE PDG'\n         TM    RDSFLAG+1,X'60'      I/O ERROR\n         BZ    *+10                 NO\n         MVC   SMFSTAT(9),=C'I/O ERROR'\n         SR    R14,R14              CLEAR FOR DIVIDE\n         TM    FLAG,MVSREL4         MVS REL 4?\n         BZ    *+8                  NO\n         L     R15,RDS4NXT          SMF DS NEXT BLOCK\n         TM    FLAG,MVSREL5         MVS REL 5?\n         BZ    *+8                  NO\n         L     R15,RDS5NXT          SMF DS NEXT BLOCK\n         BCTR  R15,0\n         CVD   R15,DOUBLEB\n         M     R14,=F'100'\n         TM    FLAG,MVSREL4         MVS REL 4?\n         BZ    *+8                  NO\n         L     R1,RDS4CAP           SMF DS CAPACITY\n         TM    FLAG,MVSREL5         MVS REL 5?\n         BZ    *+8                  NO\n         L     R1,RDS5CAP           SMF DS CAPACITY\n         CVD   R1,DOUBLEA\n         DR    R14,R1               PERCENT FULL\n         CVD   R15,DOUBLEC\n         MVC   SMFANSOA(10),=X'40206B2020206B202120'\n         ED    SMFANSOA(10),DOUBLEA+4\n         MVC   SMFANSOB(10),=X'40206B2020206B202120'\n         ED    SMFANSOB(10),DOUBLEB+4\n         MVC   SMFANSOC(4),=X'40202120'\n         ED    SMFANSOC(4),DOUBLEC+6\n         TPUT  SMFANS,80\n         L     R4,RDSNEXT           NEXT RDS ON CHAIN\n         CR    R5,R4                END OF CHAIN YET?\n         BNE   MORSMFDS             NO, MORE DATASETS TO LOOK AT\nFIN      EQU   *\n         MOREND RC=(11)\nDOUBLEA  DC    D'0'\nDOUBLEB  DC    D'0'\nDOUBLEC  DC    D'0'\nMVCRDSNM MVC   SMFANS(*-*),RDSNAME     MOVE SMF DATASET NAME\nSMFOFF   DC    CL80'SMF RECORDING INACTIVE'\nSMFTITLE DC    CL80'SMF DATASET     VOLSER --STATE-- BLKS ALLOC   BLK U*\n               SED % FULL. MEM = SMFPRMXX'\n*                   0123456789 123456789 123456789 123456789 123456789\n*              123456789 123456789 123456789\nSMFANS   DS    0CL80' '\n         DC    CL16'SYS1.MAN?       '\nSMFVOL   DC    CL07'VOLSER '\nSMFSTAT  DC    CL10'ACTIVE'\nSMFANSOA DC    CL11' X,XXX,XXX '       BLKS ALLOCATED'\nSMFANSOB DC    CL11' X,XXX,XXX '       BLKS USED\nSMFANSOC DC    CL05' XXX '             % FULL\n         DC    CL(80-(*-SMFANS))' '\n         DS    0H\nCA7PARM  DC    AL2(CA7PARML)\n*                0123456789 123456789 123456789 123456789\nSMFDMND  DC    C'/LOGON SVCUSER;DEMAND,JOB=SMFDUMP?;/LOGOFF'\nCA7PARML EQU   *-SMFDMND\nFLAG     DC    X'00'\nCA7OPT   EQU   X'80'\nMVSREL4  EQU   X'40'         MVS RELEASE 4\nMVSREL5  EQU   X'20'         MVS RELEASE 5\n         SPACE\nIEEMBACT DSECT               SMF ACT - DERIVED FROM FICHE OF IEEMB833\nACTID    DC    CL4'ACT '     EYECATCHER - ACT\nACTSRCP  DC    XL4'00'       A(INPUT TO PARSE)\nACTMSDCB DC    XL4'00'       A(MESSAGE DATASET DCB)\nACTPLDCB DC    XL4'00'       A(PARMLIB DCB)\nACTOCB   DC    XL4'00'       A(1ST OCB ON CHAIN)\nACTDSNAM DC    XL4'00'\nACTOCBPL DC    XL4'00'       A(OCB BUFFER POOL)\nACTCONID DC    CL4' '        CONSOLE ID\nACTAREA  DC    XL1'00'       CONSOLE AREA ID\nACTALTCN DC    CL4' '        ALTERNATE CONSOLE ID\nACTALTAR DC    XL1'00'       ALTERNATE CONSOLE AREA\nACTRSVD1 DC    XL2'00'\nACTOPTAB DC    XL4'00'       A(OPTION TABLE)\nACTFLAGS DC    XL2'00'\nACTMEMID DC    CL2'00'       SMFPRMXX PARMLIB MEMBER SUFFIX\n         SPACE\nIEEMBRDS DSECT               SMF RECORDING DATASET DSECT\nRDSID    DS    CL4'RDS '     EYECATCHER\nRDSNEXT  DS    F             POINTER TO NEXT RDS\n         DS    F             POINTER TO PREVIOUS RDS?\nRDSFLAG  DS    3X'00'        FLAGS\nRDSNLEN  DS    X'00'         LENGTH OF RDSNAME\nRDSNAME  DS    CL44          DATASET NAME\nRDS5VOL  DS    CL6           VOLSER\n         DS    H'0'          ?\nRDS5DDN  DS    CL8           DDNAME?\nRDS5CAP  DS    F             DATASET CAPACITY\nRDS5NXT  DS    F\n         ORG   RDSNAME+10\nRDS4VOL  DS    CL6           VOLSER\nRDS4DDN  DS    CL8           DDNAME?\nRDS4CAP  DS    F             DATASET CAPACITY\nRDS4NXT  DS    F\n         SPACE\n         IEESMCA\n         END\n./ ADD NAME=SMFSRCH  0108-09070-09120-1257-00891-00831-00103-TCACF0  00\n         TITLE 'SMF SEARCH PROGRAM'\n***********************************************************************\n* CONTROL CARD FORMAT:                                                *\n*  'A'  - INDICATES AN ACCESS REFFERENCE ( REQUIRED ).                *\n*  'P'  - INDICATES A PARTIAL DSNAME FOLLOWS.                         *\n*  'M'  - INDICATES A MEMBER NAME FOLLOWS                             *\n*  'D=' - SPECIFIES THE DATA SET NAME ( OPTIONAL IF J= PRESENT ).     *\n*  'F=' - SPECIFIES THE OMVS FILE/DIRECTORY.                          *\n*  'J=' - SPECIFIES THE JOB NAME ( OPTIONAL IF D= PRESENT ).          *\n*  'M=' - SPECIFIES THE MEMBER NAME FOR ADD/REN/DEL.                  *\n*  'T=' - SPECIFIES THE ACCESS TYPE:                                  *\n*         ( OPTIONAL AND '15' IS THE DEFAULT (ALL ACCESS) ).          *\n*                         '1' = READ,                                 *\n*                         '2' = UPDATE,                               *\n*                         '4' = SCRATCHED,                            *\n*                         '8' = RENAMED,                              *\n*                               OR THE ADDITION OF ANY OF THE ABOVE.  *\n* ------------------------------------------------------------------- *\n* SMF RECORD TYPES:                                                   *\n*    14 - INPUT                                                       *\n*    15 - OUTPUT                                                      *\n*    17 - SCRATCH                                                     *\n*    18 - RENAME                                                      *\n*    42 - PDS/PDSE MEMBER ADD/RENAME/DELETE                           *\n*    61 - IF ACTCODE = 'IN' THEN ACTIVITY = 'ICF DEFINE (IN)'         *\n*         IF ACTCODE = 'DE' THEN ACTIVITY = 'ICF DEFINE (DE)'         *\n*         IF ACTCODE = 'UP' THEN ACTIVITY = 'ICF DEFINE (UP)'         *\n*            (ACTCODE IS AT DISPLACEMENT 19)                          *\n*    62 - VSAM OPEN                                                   *\n*    64 - VSAM CLOSE                                                  *\n*    65 - IF ACTCODE = 'S' THEN ACTIVITY = 'VSAM SCRATCH'             *\n*         IF ACTCODE = 'U' THEN ACTIVITY = 'VSAM (UN)CAT'             *\n*            (THIS TIME ACTCODE IS AT DISPLACEMENT 71)                *\n*    66 - IF ACTCODE = 'R' THEN ACTIVITY = 'RENAME(ICF)'              *\n*            ELSE ACTIVITY = 'ICF ALTER';                             *\n*            (ACTCODE IS AT DISPLACEMENT 71 HERE TOO)                 *\n*    92 - OMVS DELETE                                                 *\n***********************************************************************\nSMFSRCH  CSECT\n         USING SMFSRCH,R12,R11          DECLARE BASE\n         USING SMFTY14,R10              SMF TYPE 14\n         USING SMFTY17,SMFTY14          SMF TYPE 17\n         USING SMFTY18,SMFTY14          SMF TYPE 18\n         USING SMF42,SMFTY14            SMF TYPE 42\n         USING SMFTY61,SMFTY14          SMF TYPE 61 VSAM DEFINE\n         USING SMFTY62,SMFTY14          SMF TYPE 62 READ/WRITE/UPDATE\n         USING SMFTY65,SMFTY14          SMF TYPE 65 VSAM DELETE\n         USING SMFTY66,SMFTY14          SMF TYPE 66 VSAM ALTER\n         USING SMFRCD92,SMFTY14         SMF TYPE 92 OMVS DELETE\n         USING INFMJFCB,R9              BASE REGISTER FOR JFCB\n         USING WORKAREA,R13\n         SAVE  (14,12)                  SAVE CALLERS REGISTERS\n         LR    R12,R15                  SET UP BASE\n         LA    R11,4095(0,R12)            AND SECOND BASE\n         LA    R11,1(0,R11)\n         GETMAIN R,LV=AREA\n         XC    0(OUTAREA-SAVE,R1),0(R1)       CLEAR GETMAINED AREA\n         ST    R13,4(,R1)               SAVE CALLERS SAVE AREA ADDRESS\n         ST    R1,8(,R13)               SAVE MY SAVE AREA ADDRESS\n         LR    R13,R1                   SET ADDRESSABILIY TO WORKAREA\nOP       EQU   *\n         USING IHADCB,R2\n         OPEN  (PRINT,(OUTPUT))\n         MVI   OUTAREA,C' '             MOVE BLANK TO PRINT LINE\n         MVC   OUTAREA+1(132),OUTAREA   AND BLANK REST OF AREA\nOC       EQU   *\n         OPEN  (CONTROL,(INPUT))\n         LA    R2,CONTROL               LOAD ADDRESS OF CONTROL\n         TM    DCBOFLGS,X'10'           IS THERE AN ERROR DURING OPEN\n         BO    RC                          NO, GO GET CONTROL CARD\n         MVC   ERRMSG,CTLERR00          INDICATE OPEN ERROR FOR CNTL\n         B     EOC                      AND GO TERMINATE\n         DROP  R2\nRC       EQU   *\n         GET   CONTROL,CNTLCARD\n         MVC   ERRMSG(72),CNTLCARD      MOVE CONTROL CARD TO PRINT LINE\n         PUT   PRINT,OUTAREA            PRINT CONTROL CARD\n         MVI   OUTAREA,C' '             MOVE BLANK TO PRINT LINE\n         MVC   OUTAREA+1(132),OUTAREA   AND BLANK REST OF AREA\n         LA    R2,CNTLCARD              SETUP FOR EDIT OF CONTROL CARD\n         LA    R3,72                    LOAD LENGTH OF CONTROL CARD\nFO1      EQU   *\n         CLI   0(R2),C' '              IS THIS THE BEGIN OF OPTION\n         BNE   FO2                         YES, GO DETERMINE OPTION\n         LA    R2,1(,R2)                 NO, GO TO NEXT COLUMN\n         BCT   R3,FO1                         IF NOT THE END OF CARD\n         MVC   ERRMSG,CTLERR01          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nFO2      EQU   *\n         CLC   0(1,R2),ACCESS          IS THIS A REFFERENCE CNTL CARD\n         BNE   FO3                          NO, GO CHECK OTHER OPTIONS\n         MVI   OPTION1,X'01'            INDICATE ACCESS OPTION FOUND\n         B     FA1                          YES, GO FIND OPERANDS\nFO3      EQU   *\n         CLC   0(1,R2),SCRATCH         IS THIS A SCRATCH CONTROL CARD\n         BNE   FO4                          NO, GO CHECK OTHER OPTIONS\n         MVI   OPTION1,X'02'            INDICATE SCRATCH OPTION FOUND\n         B     FA1                          YES, GO FIND OPERANDS\nFO4      EQU   *\n         CLC   0(1,R2),RENAME          IS THIS A RENAME CONTROL CARD\n         BNE   FO5                          NO, GO CHECK OTHER OPTIONS\n         MVI   OPTION1,X'04'            INDICATE RENAME OPTION FOUND\n         B     FA1                          YES, GO FIND OPERANDS\nFO5      EQU   *\n         CLC   0(1,R2),PARTIAL         IS THIS A PARTIAL CONTROL CARD\n         BNE   FO6                          NO, GO CHECK OTHER OPTIONS\n         MVI   OPTION1,X'08'            INDICATE PARTIAL OPTION FOUND\n         B     FA1                          YES, GO FIND OPERANDS\nFO6      EQU   *\n         CLC   0(1,R2),MEMSRCH         IS THIS A MEMSRCH CONTROL CARD\n         BNE   FO7                          NO, GO CHECK OTHER OPTIONS\n         MVI   OPTION1,X'10'            INDICATE MEMBER OPTION FOUND\n         B     FA1                          YES, GO FIND OPERANDS\nFO7      EQU   *\n         MVC   ERRMSG,CTLERR02          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nFA1      EQU   *\n         LA    R2,1(,R2)              BUMP TO NEXT COLUMN\n         BCTR  R3,R0                      AND DECREMENT LENGTH\nFA2      EQU   *\n*        CLC   0(3,R2),CONTINUE        IS THIS A CONTINUATION\n*        BE    PC                          YES, GO PROCESS CONTINUATION\n         CLI   0(R2),C' '              IS THIS THE BEGIN OF OPERAND\n         BNE   FA3                         YES, GO DETERMINE OPERAND\n         LA    R2,1(,R2)                 NO, GO TO NEXT COLUMN\n         BCT   R3,FA2                         IF NOT THE END OF CARD\n         MVC   ERRMSG,CTLERR03          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nFA3      EQU   *\n         CLC   0(2,R2),ACCTYPE         IS THIS A ACCTYPE OPERAND\n         BE    A1                          YES, GO PROCESS ACCTYPE\n         CLC   0(2,R2),DATASET         IS THIS A DATASET OPERAND\n         BE    S1                          YES, GO PROCESS DATASET\n         CLC   0(2,R2),FILENAM         IS THIS A FILE (OMVS) OPERAND\n         BNE   *+12                        YES, GO PROCESS DATASET\n         OI    OPTION2,X'80'\n         B     S1\n         CLC   0(2,R2),JOBNAME         IS THIS A JOBNAME OPERAND\n         BE    J1                          YES, GO PROCESS JOBNAME\n         CLC   0(2,R2),MEMNAME         IS THIS A MEMNAME OPERAND\n         BE    M1                          YES, GO PROCESS JOBNAME\n         MVC   ERRMSG,CTLERR04          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nA1       EQU   *\n         LA    R2,2(,R2)              BUMP TO NEXT COLUMN\n         SH    R3,H2                      AND DECREMENT LENGTH\n         LR    R4,R2                    LOAD OPERAND BEGINNING\n         SR    R5,R5                    CLEAR LENGTH OF OPERAND\n         TM    OPTION1,X'09'            IS THIS A ACCESS OR PARTIAL\n         BNZ   A2                           YES, GO PROCESS OPERAND\n         MVC   ERRMSG,CTLERR11          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nA2       EQU   *\n         CLI   0(R4),C' '              IS THIS THE END OF OPERAND\n         BE    A3                          YES, GO CHECK ACC FOR MAX\n         CLI   0(R4),C','              IS THIS THE END OF OPERAND\n         BE    A3                          YES, GO CHECK ACC FOR MAX\n         LA    R4,1(,R4)                 NO, GO TO NEXT COLUMN\n         LA    R5,1(,R5)                     AND ADD ONE TO OPR LEN\n         BCT   R3,A2                    CONT TO FIND END OF OPERAND\n         MVC   ERRMSG,CTLERR05          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nA3       EQU   *\n         CH    R5,H2                   IS LENGTH OF OPERAND > TWO\n         BNH   A4                          NO, GO CHECK ACC FOR MIN\n         MVC   ERRMSG,CTLERR06          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nPACKER   PACK  DBLWORD,0(0,R2)          PACK LENGTH\nA4       EQU   *\n         LTR   R5,R5                  IS LENGTH OF OPERAND ZERO\n         BNZ   A5                          NO, GO SETUP OPERAND\n         MVC   ERRMSG,CTLERR06          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nA5       EQU   *\n         BCTR  R5,R0                   DECREMENT LENGTH FOR EX\n         EX    R5,PACKER               PACK ACCTYPE OPERAND\n         CVB   R5,DBLWORD              CONVERT ACCTYPE OPR TO BINARY\n         CH    R5,H15                  IS ACCTYPE OPERAND > MAX\n         BNH   A6                          NO, GO CHECK MINIMUM\n         MVC   ERRMSG,CTLERR07          INDICATE ACCTYP OPERAND ERROR\n         B     EIC                      AND GO TERMINATE\nA6       EQU   *\n         LTR   R5,R5                  IS ACCTYPE OPERAND < MIN\n         BNZ   A7                          NO, GO CHECK MINIMUM\n         MVC   ERRMSG,CTLERR07          INDICATE ACCTYP OPERAND ERROR\n         B     EIC                      AND GO TERMINATE\nA7       EQU   *\n         STC   R5,ACCREF               SET ACCESS REFERENCE FIELD\n         LR    R2,R4                    RELOAD POSITION CNTL\n         CLI   0(R2),C' '               IS THIS THE END OF OPERAND\n         BE    DP                          YES, GO DETERMINE ACTION\n         LA    R2,1(,R2)                BUMP POSITION\n         BCTR  R3,R0                      AND DECREMENT LENGTH\n         B     FA3                      AND GO CHECK FOR MORE OPERANDS\nM1       EQU   *                       GET MEMBER NAME\n         MVC   MEMBER(8),2(R2)          SAVE MEMBER NAME\n         MVI   REFINDI,X'04'\n         B     OS                       AND GO TO PROCESS\nS1       EQU   *\n         LA    R2,2(,R2)                BUMP TO NEXT COLUMN\n         SH    R3,H2                      AND DECREMENT LENGTH\n         LR    R4,R2                    LOAD OPERAND BEGINNING\n         SR    R5,R5                   CLEAR LENGTH OF OPERAND\n         TM    REFINDI,X'02'            HAS JOBNAME BEEN SPECIFIED\n         BZ    S2                          NO, GO PROCESS DATASET\n         MVC   ERRMSG,CTLERR12          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nS2       EQU   *\n         CLI   0(R4),C' '              IS THIS THE END OF OPERAND\n         BE    S3                          YES, GO CHECK MAX FOR SET\n         CLI   0(R4),C','              IS THIS THE END OF OPERAND\n         BE    S3                          YES, GO CHECK MAX FOR SET\n         LA    R4,1(,R4)                 NO, GO TO NEXT COLUMN\n         LA    R5,1(,R5)                     AND ADD ONE TO OPR LEN\n         BCT   R3,S2                    CONT TO FIND END OF OPERAND\n         MVC   ERRMSG,CTLERR05         INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nS3       EQU   *\n         CH    R5,H44                  IS DATASET OPERAND > 44\n         BNH   S4                          NO, GO CHECK MIN FOR SET\n         MVC   ERRMSG,CTLERR08          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nS4       EQU   *\n         LTR   R5,R5                  IS DATASET OPERAND < MIN\n         BNZ   S5                          NO, GO SETUP OPERAND\n         MVC   ERRMSG,CTLERR08          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nMOVERN   MVC   ACCNAME(0),0(R2)         MOVE DATA SET NAME\nS5       EQU   *\n         BCTR  R5,R0                   SETUP LENGTH FOR EX\n         STH   R5,PARTLEN              STORE LENGTH FOR PARTIAL OPT\n         MVI   ACCNAME,C' '             MOVE BLANK TO NAME\n         MVC   ACCNAME+1(43),ACCNAME    CLEAR NAME\n         EX    R5,MOVERN               MOVE DATASET NAME TO HOLD\n         MVI   REFINDI,X'01'            INDICATE ACCESS FOR DATASET\n         LR    R2,R4                    RESET POSITION CNTL\n         TM    OPTION1,X'02'            IS THIS FROM A SCRATCH OPTION\n         BNO   S6                          NO, GO CHECK RENAME OPTION\n         MVI   ACCREF,X'04'             INDICATE SCRATCH RECORDS ONLY\n         B     OS                          YES, GO FIND IF MORE OPRS\nS6       EQU   *\n         TM    OPTION1,X'04'            IS THIS FROM A RENAME OPTION\n         BNO   S7                          NO, GO CHECK OTHER OPTION\n         MVI   ACCREF,X'08'             INDICATE RECORDS RECORDS ONLY\n         B     OS                          YES, GO FIND IF MORE OPRS\nS7       EQU   *\n         TM    OPTION1,X'09'            IS THIS FROM A ACCESS OPTION\n         BZ    EL0                         NO, GO INDICATE LOGIC ERROR\n         CLI   0(R2),C' '               IS THIS THE END OF OPERAND\n         BE    DP                          YES, GO DETERMINE ACTION\n         LA    R2,1(,R2)                BUMP POSITION\n         BCTR  R3,R0                      AND DECREMENT LENGTH\n         B     FA3                       AND GO CHECK MORE OPERANDS\nEL0      EQU   *\n         MVC   ERRMSG,LOGERR00             NO, INDICATE A LOGIC ERROR\n         MVI   EL0,X'00'                CAUSE ABEND\n         B     EL0                      AND GO TERMINATE\nJ1       EQU   *\n         LA    R2,2(,R2)                BUMP TO NEXT COLUMN\n         SH    R3,H2                      AND DECREMENT LENGTH\n         LR    R4,R2                   LOAD OPERAND BEGINNING\n         SR    R5,R5                  CLEAR LENGTH OF OPERAND\n         TM    OPTION1,X'09'            IS THIS A ACCESS OR PARTIAL\n         BNZ   J0                           YES, GO PROCESS OPERAND\n         MVC   ERRMSG,CTLERR11          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nJ0       EQU   *\n         TM    REFINDI,X'01'            HAS DATASET BEEN SPECIFIED\n         BZ    J2                          NO, GO PROCESS JOBNAME\n         MVC   ERRMSG,CTLERR12          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nJ2       EQU   *\n         CLI   0(R4),C' '              IS THIS THE END OF OPERAND\n         BE    J3                          YES, GO CHECK MAX FOR JOB\n         CLI   0(R4),C','              IS THIS THE END OF OPERAND\n         BE    J3                          YES, GO CHECK MAX FOR JOB\n         LA    R4,1(,R4)                 NO, GO TO NEXT COLUMN\n         LA    R5,1(,R5)                     AND ADD ONE TO OPR LEN\n         BCT   R3,J2                    CONT TO FIND END OF OPERAND\n         MVC   ERRMSG,CTLERR05          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nJ3       EQU   *\n         CH    R5,H8                   IS DATASET OPERAND > 8\n         BNH   J4                          NO, GO CHECK MIN FOR JOB\n         MVC   ERRMSG,CTLERR09          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nJ4       EQU   *\n         LTR   R5,R5                  IS DATASET OPERAND < MIN\n         BNZ   J5                          NO, GO SETUP OPERAND\n         MVC   ERRMSG,CTLERR09          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nMOVERJ   MVC   ACCJOB(0),0(R2)          MOVE JOB NAME\nJ5       EQU   *\n         BCTR  R5,R0                   SETUP LENGTH FOR EX\n         STH   R5,PARTLEN              STORE LENGTH FOR PARTIAL OPT\n         MVI   ACCJOB,C' '              MOVE BLANK TO NAME\n         MVC   ACCJOB+1(7),ACCJOB       CLEAR NAME\n         EX    R5,MOVERJ               MOVE DATASET NAME TO HOLD\n         MVI   REFINDI,X'02'            INDICATE ACCESS FOR JOB\n         LR    R2,R4                   RESET POSITION CNTL\n         CLI   0(R2),C' '               IS THIS THE END OF OPERAND\n         BE    DP                          YES, GO DETERMINE ACTION\n         LA    R2,1(,R2)                BUMP POSITION\n         BCTR  R3,R0                      AND DECREMENT LENGTH\n         B     FA3                      AND GO CHECK FOR MORE OPERANDS\nDP       EQU   *\n         TM    ACCREF,X'0F'             CHECK IF WE GOT AN ACC REQUEST\n         BNZ   DP1                         YES, GO TEST DATASET\n         MVI   ACCREF,X'0F'                NO, SET TO ALL\nDP1      EQU   *\n         TM    REFINDI,X'FF'            CHECK IF WE GOT AN SET REQUEST\n         BNZ   OS                          YES, GO GET SMF DATA\n         MVC   ERRMSG,CTLERR10          INDICATE CONTROL CARD ERROR\n         B     EIC                      AND GO TERMINATE\nOS       EQU   *\n         USING IHADCB,R2\n         OPEN  (SMFDATA,(INPUT))\n         LA    R2,SMFDATA               LOAD ADDRESS OF SMFDATA\n         TM    DCBOFLGS,X'10'           TEST DCBOFLGS FOR OK OPEN\n         BO    RS                       OPEN ERROR\n         MVC   ERRMSG,RECERR00          INDICATE CONTROL CARD ERROR\n         B     EOS                      AND GO TERMINATE\n         DROP  R2\nRS       EQU   *\n         SR    R9,R9                    CLEAR POINTER TO JFCB\n         GET   SMFDATA\n         LR    R10,R1                   SAVE SMF RECORD ADDRESS\n         AP    RECCNT,=P'001'           COUNT RECORDS FOR DEBUG\n         CLI   SMF42RTY,X'2A'           IS THIS A RECORD TYPE 42\n         BE    IP                          YES, GO LOOK FOR MEMBER\n         CLI   SMF62RTY,X'3D'           IS THIS A RECORD TYPE 61\n         BE    V4                          YES, GO CHECK JOB NAME\n         TM    ACCREF,X'01'             RECORD TYPE 62 REFERENCE\n         BZ    V1                          NO, GO CHECK IF REC 67\n         CLI   SMF62RTY,X'3E'           IS THIS A RECORD TYPE 62\n         BE    V4                          YES, GO CHECK JOB NAME\nV1       EQU   *\n         TM    ACCREF,X'02'             RECORD TYPE 62 REFERENCE\n         BZ    V2                          NO, GO CHECK IF REC 67\n         CLI   SMF62RTY,X'3E'           IS THIS A RECORD TYPE 62\n         BE    V4                          YES, GO CHECK JOB NAME\nV2       EQU   *\n         TM    ACCREF,X'04'             RECORD TYPE 67 REFERENCE\n         BZ    V3                          NO, GO CHECK IF REC 68\n         CLI   SMF62RTY,X'41'           IS THIS A RECORD TYPE 65\n         BE    V4                          YES, GO CHECK JOB NAME\n*        CLI   SMF62RTY,X'43'           IS THIS A RECORD TYPE 67\n*        BE    V4                          YES, GO CHECK JOB NAME\n         CLI   SMF92RTY,X'5C'           IS THIS A RECORD TYPE 92\n*        BNE   V4                          NO\n*        CLC   SMF92TYP(2),=H'14'       SUB-TYPE 14, OMVS DELETE?\n*        BNE   ???\nV3       EQU   *\n         TM    ACCREF,X'08'             RECORD TYPE 68 REFERENCE\n         BZ    RS                          NO, GO GET A DIFFERENT REC\n         CLI   SMF62RTY,X'42'           IS THIS A RECORD TYPE 66\n         BE    V4                          YES, GO CHECK JOB NAME\n*        CLI   SMF62RTY,X'44'           IS THIS A RECORD TYPE 68\n*        BE    V4                          YES, GO CHECK JOB NAME\n         B     P0                          NO, GO GET A DIFFERENT REC\nV4       EQU   *\n         TM    REFINDI,X'04'            CHECK IF WE GOT A MEM REQUEST\n         BO    RS                          YES, GO CHECK DATASET NAME\n         TM    REFINDI,X'01'            CHECK IF WE GOT A SET REQUEST\n         BO    V6                          YES, GO CHECK DATASET NAME\n         TM    REFINDI,X'02'            CHECK IF WE GOT A JOB REQUEST\n         BZ    EL2                         NO, INDICATE LOGIC ERROR\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    V5                          NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         CLI   SMF62RTY,X'3E'           IS THIS A TYPE 62?\n         BNE   V4A                         NO\n         EX    R5,COMPJ62              DOES JOBNAME MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS\nV4A      EQU   *\n         EX    R5,COMPJ66              DOES JOBNAME MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nCOMPJ62  CLC   SMF62JBN(0),ACCJOB       DO THE JOBNAMES MATCH\nCOMPJ66  CLC   SMF66JNM(0),ACCJOB       DO THE JOBNAMES MATCH\nV5       EQU   *\n         CLI   SMF62RTY,X'3E'         IS THIS A TYPE 62?\n         BNE   V5A                         NO\n         CLC   SMF62JBN,ACCJOB        DO THE JOBNAMES MATCH\n         BE    IP                          YES, GO CHECK IF DATASET\n         B     RS                          NO, GO GET A DIFFERENT REC\nV5A      EQU   *\n         CLC   SMF66JNM,ACCJOB        DO THE JOBNAMES MATCH\n         BE    IP                          YES, GO CHECK IF DATASET\n         B     RS                          NO, GO GET A DIFFERENT REC\nV6       EQU   *\n         CLI   SMF62RTY,X'3D'           CHECK IF TYPE 61 RECORD\n         BE    V9                          YES, GO GET CHK DATASET\n         CLI   SMF62RTY,X'3E'           CHECK IF TYPE 62 RECORD\n         BE    V7                          YES, GO GET CHK DATASET\n         CLI   SMF62RTY,X'41'           CHECK IF TYPE 65 RECORD\n         BE    V9                          YES, GO GET CHK DATASET\n         CLI   SMF62RTY,X'42'           CHECK IF TYPE 66 RECORD\n         BE    V11                         YES, GO GET CHK DATASET\n*        CLI   SMF62RTY,X'43'           CHECK IF TYPE 67 RECORD\n*        BE    P9                          YES, GO GET CHK DATASET\n*        CLI   SMF62RTY,X'44'           CHECK IF TYPE 68 RECORD\n*        BE    V11                         YES, GO GET CHK DATASET\n         B     EL3                      AND GO TERMINATE\nV7       EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    V8                          NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,VCOMPIO              DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nV8       EQU   *\n         CLC   SMF62DNM,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nVCOMPIO  CLC   SMF62DNM(0),ACCNAME      DO THE DATASET NAMES MATCH\nV9       EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    V10                         NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,VCOMPSRO             DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nV10      EQU   *\n         CLC   SMF66ENM,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nVCOMPSRO CLC   SMF66ENM(0),ACCNAME      DO THE DATASET NAMES MATCH\nVCOMPRN  CLC   SMF66NNM(0),ACCNAME      DO THE DATASET NAMES MATCH\nV11      EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    V12                         NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,VCOMPSRO             DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         EX    R5,VCOMPRN              DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nV12      EQU   *\n         CLC   SMF66ENM,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         CLC   SMF66NNM,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nP0       EQU   *\n         TM    ACCREF,X'01'             RECORD TYPE 14 REFERENCE\n         BZ    P1                          NO, GO CHECK IF REC 15\n         CLI   SMF14RTY,X'0E'           IS THIS A RECORD TYPE 14\n         BE    P4                          YES, GO CHECK JOB NAME\nP1       EQU   *\n         LA    R9,SMFJFCB1             ADDRESSING FOR JFCB\n         TM    ACCREF,X'02'             RECORD TYPE 15 REFERENCE\n         BZ    P2                          NO, GO CHECK IF REC 17\n         CLI   SMF14RTY,X'0F'           IS THIS A RECORD TYPE 15\n         BE    P4                          YES, GO CHECK JOB NAME\nP2       EQU   *\n         TM    ACCREF,X'04'             RECORD TYPE 17 REFERENCE\n         BZ    P3                          NO, GO CHECK IF REC 18\n         CLI   SMF14RTY,X'11'           IS THIS A RECORD TYPE 17\n         BE    P4                          YES, GO CHECK JOB NAME\nP3       EQU   *\n         TM    ACCREF,X'08'             RECORD TYPE 18 REFERENCE\n         BZ    RS                          NO, GO GET A DIFFERENT REC\n         CLI   SMF14RTY,X'12'           IS THIS A RECORD TYPE 18\n         BE    P4                          YES, GO CHECK JOB NAME\n         B     RS                          NO, GO GET A DIFFERENT REC\nP4       EQU   *\n         LA    R9,SMFJFCB1             ADDRESSING FOR JFCB\n         TM    REFINDI,X'04'            CHECK IF WE GOT A MBR REQUEST\n         BO    IP                          YES, GO CHECK DATASET NAME\n         TM    REFINDI,X'01'            CHECK IF WE GOT A SET REQUEST\n         BO    P6                          YES, GO CHECK DATASET NAME\n         TM    REFINDI,X'02'            CHECK IF WE GOT A JOB REQUEST\n         BZ    EL2                         NO, INDICATE LOGIC ERROR\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    P5                          NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,COMPJ                DOES JOBNAME MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nCOMPJ    CLC   SMF14JBN(0),ACCJOB       DO THE JOBNAMES MATCH\nP5       EQU   *\n         CLC   SMF14JBN,ACCJOB          DO THE JOBNAMES MATCH\n         BE    IP                          YES, GO CHECK IF DATASET\n         B     RS                          NO, GO GET A DIFFERENT REC\nP6       EQU   *\n         CLI   SMF14RTY,X'0E'           CHECK IF TYPE 14 RECORD\n         BE    P7                          YES, GO GET CHK DATASET\n         CLI   SMF14RTY,X'0F'           CHECK IF TYPE 15 RECORD\n         BE    P7                          YES, GO GET CHK DATASET\n         CLI   SMF14RTY,X'11'           CHECK IF TYPE 17 RECORD\n         BE    P9                          YES, GO GET CHK DATASET\n         CLI   SMF14RTY,X'12'           CHECK IF TYPE 18 RECORD\n         BE    P11                         YES, GO GET CHK DATASET\n         B     EL3                      AND GO TERMINATE\nP7       EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    P8                          NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,COMPIO               DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nP8       EQU   *\n         CLC   JFCBDSNM,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nCOMPIO   CLC   JFCBDSNM(0),ACCNAME      DO THE DATASET NAMES MATCH\nP9       EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    P10                         NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,COMPSRO              DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nP10      EQU   *\n         CLC   SMF18ODS,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nCOMPSRO  CLC   SMF18ODS(0),ACCNAME      DO THE DATASET NAMES MATCH\nCOMPRN   CLC   SMF18NDS(0),ACCNAME      DO THE DATASET NAMES MATCH\nP11      EQU   *\n         TM    OPTION1,X'08'            IS THIS A PARTIAL OPTION\n         BZ    P12                         NO, DO FULL COMPARE\n         LH    R5,PARTLEN              LOAD LENGTH OF PARTIAL JOBNAME\n         EX    R5,COMPSRO              DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         EX    R5,COMPRN               DOES DATASET MATCH PARTIALLY\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET A DIFFERENT REC\nP12      EQU   *\n         CLC   SMF18ODS,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         CLC   SMF18NDS,ACCNAME         DO THE DATASET NAMES MATCH\n         BE    IP                          YES, GO SETUP PRINT\n         B     RS                          NO, GO GET NEXT REC\nEL2      EQU   *\n         MVC   ERRMSG,LOGERR02            DO, INDICATE A LOGIC ERROR\n         DC    H'0'                     CAUSE ABEND\nEL3      EQU   *\n         MVC   ERRMSG,LOGERR03             NO, INDICATE A LOGIC ERROR\n         DC    H'0'                     CAUSE ABEND\n*\nIP       EQU   *\n         MVI   OUTAREA,C' '             MOVE BLANK TO PRINT LINE\n         MVC   OUTAREA+1(L'OUTAREA-1),OUTAREA  OUTPUT LINE\n         MVC   OSYSNAM(4),SMF14SID      MOVE IN SYSTEM NAME\n         MVC   OJOBNAME,SMF14JBN        MOVE IN JOB NAME\n*        CLI   JFCBVOLS,C' '            IS VOLSER VALID?\n*        BE    *+10                     NO, DON'T MOVE GARBAGE\n         LTR   R9,R9                    VALID JFCB POINTER?\n         BZ    *+10                     NO - DON'T SET VOLSER\n         MVC   OJFCBVOLS(6),JFCBVOLS    MOVE IN JFCBVOLS\n*        MVC   OFILLER2(1),SMF62RTY     RECORD TYPE FOR DEBUGGING\n         UNPK  DBLWORD,SMF14DTE         UNPACK THE DATE\n         OI    DBLWORD+1,X'F0'          OR SIGN FOR PRINTING\n         MVC   ODATE,DBLWORD+3          MOVE DATE TO PRINT LINE\n         MVC   FULLTIME,SMF14TME        MOVE SMF14TME FOR LOAD\n         L     R2,FULLTIME              LOAD TIME\n         SRDA  R2,32(R0)                SHIFT FOR DIVIDE\n         D     R2,F100                  DIVIDE BY 100 TO GET SECONDS\n         LR    R2,R3                    LOAD SECONDS\n         SRDA  R2,32(R0)                SHIFT FOR DIVIDE\n         D     R2,F60                   DIVIDE BY 60 TO GET MINUTES\n         CVD   R2,DBLWORD2              CONVERT SECONDS TO DECIMAL\n         UNPK  DBLWORD,DBLWORD2+6(2)    UNPACK SECONDS FOR PRINTING\n         OI    DBLWORD+7,X'F0'          OR SIGN FOR PRINTING\n         MVC   OSEC,DBLWORD+6           MOVE SECONDS TO PRINT LINE\n         LR    R2,R3                    LOAD MINUTES\n         SRDA  R2,32(R0)                SHIFT FOR DIVIDE\n         D     R2,F60                   DIVIDE BY 60 TO GET HOURS\n         CVD   R2,DBLWORD2              CONVERT MINUTES TO DECIMAL\n         UNPK  DBLWORD,DBLWORD2+6(2)    UNPACK MINUTES FOR PRINTING\n         OI    DBLWORD+7,X'F0'          OR SIGN FOR PRINTING\n         MVC   OMIN,DBLWORD+6           MOVE MINUTES TO PRINT LINE\n         CVD   R3,DBLWORD2              CONVERT HOURS TO DECIMAL\n         UNPK  DBLWORD,DBLWORD2+6(2)    UNPACK HOURS FOR PRINTING\n         OI    DBLWORD+7,X'F0'          OR SIGN FOR PRINTING\n         MVC   OHRS,DBLWORD+6           MOVE MINUTES TO PRINT LINE\n         CLI   SMF14RTY,X'0E'           WAS IT A TYPE 14 RECORD\n         BE    IP10                        YES, GO SETUP READ ONLY\n         CLI   SMF14RTY,X'0F'           WAS IT A TYPE 15 RECORD\n         BE    IP11                        YES, GO SETUP UPDATE\n         CLI   SMF14RTY,X'11'           WAS IT A TYPE 17 RECORD\n         BE    IP12                        YES, GO SETUP SCRATCH\n         CLI   SMF14RTY,X'12'           WAS IT A TYPE 18 RECORD\n         BE    IP13                        YES, GO SETUP RENAME\n         CLI   SMF42RTY,X'2A'           IS THIS A RECORD TYPE 42\n         BE    V421                        YES, GO SETUP MEMBER\n         CLI   SMF62RTY,X'3D'           WAS IT A TYPE 61 RECORD\n         BE    VIP14                        YES, GO SETUP DEFINE ONLY\n         CLI   SMF62RTY,X'3E'           WAS IT A TYPE 62 RECORD\n         BE    VIP10                        YES, GO SETUP READ ONLY\n         CLI   SMF62RTY,X'41'           WAS IT A TYPE 65 RECORD\n         BE    VIP12                        YES, GO SETUP SCRATCH\n         CLI   SMF62RTY,X'42'           WAS IT A TYPE 66 RECORD\n         BE    VIP13                        YES, GO SETUP RENAME\n*        CLI   SMF62RTY,X'43'           WAS IT A TYPE 67 RECORD\n*        BE    VIP12                        YES, GO SETUP SCRATCH\n*        CLI   SMF62RTY,X'44'           WAS IT A TYPE 68 RECORD\n*        BE    VIP13                        YES, GO SETUP RENAME\nEL4      EQU   *\n         MVC   ERRMSG,LOGERR04             NO, INDICATE A LOGIC ERROR\n         DC    H'0'                     CAUSE ABEND\n*        MVI   EL4,X'00'                CAUSE ABEND\n*        B     EL4                      AND GO TERMINATE\n*        B     EIL                      AND GO TERMINATE\nIP10     EQU   *\n         MVC   OREFTYPE,READONLY        MOVE IN READ ONLY REFFERENCE\n         MVC   ODATASET,JFCBDSNM        MOVE IN DATA SET NAME\n         B     WR                       AND GO PRINT RECORD\nIP11     EQU   *\n         MVC   OREFTYPE,UPDTONLY        MOVE IN UPDATE\n         MVC   ODATASET,JFCBDSNM        MOVE IN DATA SET NAME\n         B     WR                       AND GO PRINT RECORD\nIP12     EQU   *\n         MVC   OREFTYPE,SCRONLY         MOVE IN SCRATCH\n         MVC   ODATASET,SMF17DSN        MOVE IN DATA SET NAME\n         SR    R6,R6                    CLEAR FOR IC\n         IC    R6,SMF17NVL              GET COUNT OF VOLSERS\n         LA    R7,SMF17FVL              POINT TO VOLSER\nIP12A    EQU   *\n         MVC   ONEWNAME(6),0(R7)        COPY VOLSER TO OUTPUT\n         LA    R7,8(,R7)                POINT TO NEXT VOLSER\n         BCT   R6,IP12A                 LOOP WHILE VOLSERS\n         B     WR                       AND GO PRINT RECORD\nIP13     EQU   *\n         MVC   OREFTYPE,RENONLY         MOVE IN RENAME\n         MVC   ODATASET,SMF18ODS        MOVE IN OLD DATA SET NAME\n         MVC   ONEWNAME,SMF18NDS        MOVE IN NEW DATA SET NAME\n         B     WR                       AND GO PRINT RECORD\nVIP10    EQU   *\n         MVC   OREFTYPE,READONLY        MOVE IN READ ONLY REFFERENCE\n         MVC   ODATASET,SMF62DNM        MOVE IN DATA SET NAME\n         B     WR                       AND GO PRINT RECORD\nVIP11    EQU   *\n         MVC   OREFTYPE,UPDTONLY        MOVE IN UPDATE\n         MVC   ODATASET,SMF62DNM        MOVE IN DATA SET NAME\n         B     WR                       AND GO PRINT RECORD\nVIP12    EQU   *\n         MVC   OREFTYPE,SCRONLY         MOVE IN SCRATCH\n         MVC   ODATASET,SMF65ENM        MOVE IN DATA SET NAME\n         MVC   OJOBNAME,SMF65JNM        MOVE IN JOB NAME\n         B     WR                       AND GO PRINT RECORD\nVIP13    EQU   *\n         MVC   OREFTYPE,RENONLY         MOVE IN RENAME\n         MVC   ODATASET,SMF66ENM        MOVE IN OLD DATA SET NAME\n         MVC   ONEWNAME,SMF66NNM        MOVE IN NEW DATA SET NAME\n         MVC   OJOBNAME,SMF66JNM        MOVE IN JOB NAME\n         B     WR                       AND GO PRINT RECORD\nVIP14    EQU   *\n         MVC   OREFTYPE,DEFONLY         MOVE IN DEFINE\n         MVC   ODATASET,SMF61ENM        MOVE IN NEW DATA SET NAME\n         MVC   OJOBNAME,SMF61JNM        MOVE IN JOB NAME\n         MVC   ONEWNAME,SMF61CNM        MOVE IN CATALOG NAME\n         B     WR                       AND GO PRINT RECORD\nV421     EQU   *\n         TM    OPTION1,X'10'            DOING MEMBER OPTION?\n         BZ    RS                       NO, SO SKIP THIS RECORD\n         CLC   SMF42STY(2),=H'21'       MEMBER DELETE?\n         BE    DEL42\n         CLC   SMF42STY(2),=H'24'       MEMBER ADD?\n         BE    ADD42\n         CLC   SMF42STY(2),=H'25'       MEMBER RENAME?\n         BE    REN42\n         BNE   RS                       NO, SOME OTHER SUB-TYPE\nADD42    EQU   *\n         USING SMF42SP,R9\n         LA    R9,SMF42END              POINT TO START OF DATA\n         L     R8,SMF42PN1              OFFSET TO MEMBER ADD SECTION\n         AR    R8,R10                   R9 POINTING TO SUB-TYPE 24\n         USING SMF421PA,R8\n         MVC   OREFTYPE(3),=C'ADD'\n         CLC   SMF42PMN(8),MEMBER       OUR MEMBER NAME?\n         BE    SMF42COM\nREN42    EQU   *\n         USING SMF42SQ,R9\n         LA    R9,SMF42END              POINT TO START OF DATA\n         L     R8,SMF42QN1              OFFSET TO MEMBER RENAME SECTION\n         AR    R8,R10                   R9 POINTING TO SUB-TYPE 25\n         USING SMF420QA,R8\n         MVC   OREFTYPE(3),=C'REN'\n         CLC   SMF42QMN(8),MEMBER       OUR MEMBER NAME?\n         BE    SMF42COM\nDEL42    EQU   *\n         USING SMF42SL,R9\n         LA    R9,SMF42END              POINT TO START OF DATA\n         L     R8,SMF42LN1              OFFSET TO MEMBER DELETE SECTION\n         AR    R8,R10                   R9 POINTING TO SUB-TYPE 21\n         USING SMF420LA,R8\n         MVC   OREFTYPE(3),=C'DEL'\n         CLC   SMF42LMN(8),MEMBER       OUR MEMBER NAME?\n         BNE   RS\nSMF42COM EQU   *                        SET UP REPORT DETAIL\n         MVC   OJOBNAME,SMF42LJB        MOVE IN JOB NAME\n         MVC   ONEWNAME+5(8),MEMBER     MOVE IN MEMBER NAME\n         MVC   ODATASET(44),SMF42LDS    MOVE IN DSNAME\n         B     WR\n*\nWR       EQU   *\n         PUT   PRINT,OUTAREA            PRINT REPORT LINE\n         B     RS                       AND GO GET ANOTHER RECORD\nTS       EQU   *\n         LA    R2,0                    LOAD GOOD RETURN CODE\n         B     T1                       AND GO RETURN\nEIC      EQU   *\n         LA    R2,4                    LOAD BAD RETURN CODE\n         PUT   PRINT,OUTAREA            PRINT ERROR MESSAGE\n         B     T2                       AND GO RETRUN\nEIL      EQU   *\n         LA    R2,8                    LOAD BAD RETURN CODE\n         PUT   PRINT,OUTAREA            PRINT ERROR MESSAGE\n         B     T1                       AND GO RETURN\nEOC      EQU   *\n         LA    R2,12                   LOAD BAD RETURN CODE\n         PUT   PRINT,OUTAREA            PRINT ERROR MESSAGE\n         B     T3                       AND GO RETURN\nEOS      EQU   *\n         LA    R2,16                   LOAD BAD RETURN CODE\n         PUT   PRINT,OUTAREA            PRINT ERROR MESSAGE\n         B     T2                       AND GO RETURN\nT1       EQU   *\n         CLOSE (SMFDATA)                CLOSE SMFDATA DATA SET\nT2       EQU   *\n         CLOSE (CONTROL)                CLOSE CONTROL DATA SET\nT3       EQU   *\n         CLOSE (PRINT)                  CLOSE PRINT DATA SET\n         LR    R1,R13                   ADDRESS OF GETMAIN CORE\n         L     R13,SAVE+4\n         FREEMAIN  R,LV=AREA,A=(R1)     FREE BLOCK\n         LR    R15,R2                   LOAD RETURN CODE\n         RETURN (14,12),RC=(15)         RETURN\n         LTORG\n         DS    0D\nH2       DC    H'2'\nH8       DC    H'8'\nH15      DC    H'15'\nH44      DC    H'44'\nF60      DC    F'60'\nF100     DC    F'100'\nFULLTIME DC    F'0'\nDATASET  DC    C'D='               DATASET OPERAND IN SEARCH CNTL\nFILENAM  DC    C'F='               FILE (OMVS) OPERAND IN SEARCH CNTL\nJOBNAME  DC    C'J='               JOBNAME OPERAND IN SEARCH CNTL\nMEMNAME  DC    C'M='               MEMBER OPERAND IN SEARCH CNTL\nACCTYPE  DC    C'T='               ACCTYPE OPERAND IN SEARCH CNTL\nACCESS   DC    C'A'                REFFERENCE OPTION IN CNTL CARD\nSCRATCH  DC    C'S'                SCRATCH OPTION IN CONTROL CARD\nRENAME   DC    C'R'                RENAME OPTION IN CONTROL CARD\nPARTIAL  DC    C'P'                PARTIAL OPTION IN CONTROL CARD\nMEMSRCH  DC    C'M'                MEMBER OPTION IN CONTROL CARD\nCONTINUE DC    C' - '              CONTINUATION CONSTANT\nREADONLY DC    C'READ'\nUPDTONLY DC    C'UPDT'\nSCRONLY  DC    C'SCR '\nRENONLY  DC    C'REN '\nDEFONLY  DC    C'DEF '\nRECCNT   DC    PL4'0000'       RECORD COUNTER USED FOR DEBUGGING\nRECERR00 DC    CL80'RECERR00 - ERROR OPENNING SMFDATA (SYSUT1) DATA SET*\n                                            '\nCTLERR00 DC    CL80'CTLERR00 - ERROR OPENNING CONTROL (SYSIN) DATA SET *\n                                            '\nCTLERR01 DC    CL80'CTLERR01 - CONTROL CARD IS BLANK                   *\n                                            '\nCTLERR02 DC    CL80'CTLERR02 - COULD NOT FIND A VALID CONTROL CARD OPTI*\n               ON                           '\nCTLERR03 DC    CL80'CTLERR03 - COULD NOT FIND AN OPERAND FOR OPTION    *\n                                            '\nCTLERR04 DC    CL80'CTLERR04 - COULD NOT FIND A VALID OPERAND FOR OPTIO*\n               N                            '\nCTLERR05 DC    CL80'CTLERR05 - COULD NOT FIND THE END OF AN OPERAND    *\n                                            '\nCTLERR06 DC    CL80'CTLERR06 - FOUND AN OPERAND WITH NO SPECIFIED VALUE*\n                                            '\nCTLERR07 DC    CL80'CTLERR07 - TYPE OPERAND SPECIFIES AN INVALID VALUE *\n                                            '\nCTLERR08 DC    CL80'CTLERR08 - DATASET OPERAND SPECIFIES AN INVALID VAL*\n               UE                           '\nCTLERR09 DC    CL80'CTLERR09 - JOBNAME OPERAND SPECIFIES AN INVALID VAL*\n               UE                           '\nCTLERR10 DC    CL80'CTLERR10 - OPERANDS FOR OPTION ARE INVALID OR MISSI*\n               NG                           '\nCTLERR11 DC    CL80'CTLERR11 - OPERAND IS INVALID FOR OPTION SPECIFIED *\n                                            '\nCTLERR12 DC    CL80'CTLERR12 - INVALID COMBINATION OF OPERANDS FOR THIS*\n               OPTION                       '\nLOGERR00 DC    CL80'LOGERR00 - PROGRAM HAS ENCOUNTERED SOMETHING UNEXPE*\n               CTED                         '\nLOGERR01 DC    CL80'LOGERR01 - PROGRAM HAS ENCOUNTERED SOMETHING UNEXPE*\n               CTED                         '\nLOGERR02 DC    CL80'LOGERR02 - PROGRAM HAS ENCOUNTERED SOMETHING UNEXPE*\n               CTED                         '\nLOGERR03 DC    CL80'LOGERR03 - PROGRAM HAS ENCOUNTERED SOMETHING UNEXPE*\n               CTED                         '\nLOGERR04 DC    CL80'LOGERR04 - PROGRAM HAS ENCOUNTERED SOMETHING UNEXPE*\n               CTED                         '\nPRINT    DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,                      *\n               RECFM=FB\nSMFDATA  DCB   DDNAME=SYSUT1,MACRF=GL,DSORG=PS,BFTEK=A,                *\n               EODAD=TS\nCONTROL  DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,                         *\n               EODAD=DP\n         DCBD  DSORG=PS,DEVD=DA\n***********************************************************************\n*                  WORKAREA LAYOUT                                    *\n***********************************************************************\nWORKAREA DSECT                          GETMAINED WORKAREA LAYOUT\nSAVE     DS    18F                      SMFSRCH SAVE AREA\nCNTLCARD DS    CL80                     CONTROL CARD\nDBLWORD  DS    D                        DOUBLE-WORD WORK AREA\nPARTLEN  DS    H                        LENGTH OF PARTIAL OPERAND\nREFINDI  DS    X                        REFERENCE INDICATIORS\nOPTION1  DS    X                        OPTION1 INDICATOR FIELD\n*                                         X'01' ACCESS\n*                                         X'02' SCRATCH\n*                                         X'04' RENAME\n*                                         X'08' PARTIAL\n*                                         X'10' MEMBER\nOPTION2  DS    X                        OPTION2 INDICATOR FIELD\nACCREF   DS    X                        ACCESS REFERENCE FIELD\nACCNAME  DS    CL44                     ACCESS DATA SET NAME FIELD\nACCJOB   DS    CL8                      ACCESS JOB NAME FIELD\nMEMBER   DS    CL8                      MEMBER NAME WE'RE LOOKING FOR\n*\nOUTAREA  DS    0CL133                   OUTPUT AREA\nOSYSNAM  DS    CL4                      SMF SYSTEM NAME\nOFILLER1 DS    CL1                      FILLER\nOREFTYPE DS    CL4                      HOW DATA SETS WAS REFFERENCED\nOFILLER2 DS    CL1                      FILLER\nOJOBNAME DS    CL8                      JOB NAME REFFERENCING DATA SET\nOFILLER6 DS    CL1                      FILLER\nODATE    DS    CL5                      RECORD DATE - YYDDD\nOFILLER7 DS    CL1                      FILLER\nOHRS     DS    CL2                      RECORD HOUR\nOMIN     DS    CL2                      RECORD MINUTE\nOSEC     DS    CL2                      RECORD SECONDS\nOFILLER3 DS    CL1                      FILLER\nODATASET DS    CL44                     DATA SET REFFERENCED\nOFILLER4 DS    CL1                      FILLER\nONEWNAME DS    CL44                     NEW NAME OF DATA SET IF RENAME\nOFILLER8 DS    CL2                      FILLER\nOJFCBVOLS DS   CL6                      JFCBVOLS\nOFILLER9 DS    CL3                      FILLER\n         ORG   OUTAREA\nMSGAREA  DS    0CL133                   OUTPUT AREA\nMFILLER1 DS    CL20                     FILLER\nERRMSG   DS    CL80                     ERROR MESSAGE AREA\nMFILLER2 DS    CL33                     FILLER\nDBLWORD2 DS    D                        DOUBLE-WORD BOUNDARY\nAREA     EQU   *-SAVE                   LENGTH OF GETMAIN\n         EJECT\n         IEFJFCBN ,                     MAP JFCB\n***********************************************************************\n*                     SMF RECORD DSECTS                               *\n***********************************************************************\nSMFTY14  DSECT\n         IFASMFR 14                USE FOR 14 AND 15 (X'0E' & X'0F')\nSMFTY17  DSECT\n         IFASMFR 17                USE FOR 17 AND 18 (X'11' & X'12')\nSMFTY18  DSECT\n         IFASMFR 18                USE FOR 17 AND 18 (X'11' & X'12')\nSMFTY42  DSECT\n         IGWSMF SMF42_0L=YES,SMF42_0P=YES,SMF42_0Q=YES  (X'2A')\nSMFTY61  DSECT\n         IFASMFI6 61               VSAM ICF DEFINE   (X'3D')\nSMFTY62  DSECT\n         IFASMFR6 62               VSAM CLUSTER OPEN (X'3E')\nSMFTY65  DSECT\n         IFASMFI6 65               VSAM ICF DELETE   (X'41')\nSMFTY66  DSECT\n         IFASMFI6 66               VSAM ICF ALTER    (X'42')\n         BPXYFTYP ,                FILE TYPES USED IN REC TYPE 92\nSMFTY92  DSECT\n         BPXYSMFR ,                OMVS DELETE       (X'5C')\nR0       EQU   0         REGISTERS  0 - LINKAGE (PARMS)\nR1       EQU   1                    1 - LINKAGE (PARMS)\nR2       EQU   2                    2 - WORK\nR3       EQU   3                    3 - WORK\nR4       EQU   4                    4 - WORK\nR5       EQU   5                    5 - WORK\nR6       EQU   6                    6 -\nR7       EQU   7                    7 -\nR8       EQU   8                    8 -\nR9       EQU   9                    9 -\nR10      EQU   10                  10 - SMF RECORD DSECT\nR11      EQU   11                  11 - 2ND BASE REG\nR12      EQU   12                  12 - BASE\nR13      EQU   13                  13 - WORKAREA AND SAVE\nR14      EQU   14                  14 - LINKAGE (RETURN)\nR15      EQU   15                  15 - LINKAGE (GO-TO)\n         END\n./ ADD NAME=SVCTAB   0178-86176-09118-1246-00245-00029-00230-TCACF0  00\n         MACRO\n&NAME    IHASVC\nSVC      DSECT\nSVCEP    DC    F'0'           SVC ENTRY POINT ADDRERSS\nSVCAMODE EQU   X'80'          SVC AMODE INDICATOR\nSVCATTR1 DC    0XL2'00'       ATTRIBUTES\nSVCTP    DC    XL1'00'        TYPE FIELD\nSVCTP1   EQU   X'00'          TYPE 1 SVC\nSVCTP2   EQU   X'80'          TYPE 2 SVC\nSVCTP34  EQU   X'C0'          TYPE 3 OR 4 SVC\nSVCTP6   EQU   X'20'          TYPE 6 SVC\nSVCAPF   EQU   X'08'          APF AUTHORIZED 1-AUTHORIZED\nSVCESR   EQU   X'04'          SVC IS PART OF THE ESR\nSVCNP    EQU   X'02'          NON-PREEMPTIVE SVC\nSVCASF   EQU   X'01'          SVC CAN BE ASSISTED\nSVCATTR3 DC    XL1'00'        ATTRUBUTES\nSVCAR    EQU   X'80'          SVC MAY BE ISSUED IN AR ASC MODE\nSVCLOCKS DC    XL2'00'        LOCK ATTRIBUTES\nSVCLL    EQU   X'80'          LOCAL LOCK NEEDED\nSVCCMS   EQU   X'40'          CMS LOCK NEEDED\nSVCOPT   EQU   X'20'          OPT LOCK NEEDED\nSVCALLOC EQU   X'10'          SALLOC LOCK NEEDED\nSVCDISP  EQU   X'08'          DISPATCHER LOCK NEEDED\n*\nSVCESRAD EQU   SVCLOCKS+1\nSVCLEN   EQU   *-SVC\n         MEND\nSVCTAB   MOWSTART\nSVCTAB   AMODE  31\nSVCTAB   RMODE  ANY\n***********************************************************************\n* THIS PROGRAM LOCATES THE SVC TABLE AND PRINTS OUT THE ATTRIBUTES    *\n* OF THE SVCS.                                                        *\n* IF A PARM OF USER IS SPECIFIED, ONLY SVC NUMBERS 200-255 WILL BE    *\n* LISTED.                                                             *\n* GOES IN SYS2.LINKLIB.                                               *\n***********************************************************************\n         USING CVT,R11            CVT\n         L     R11,16             CVT ADDR\n         L     R11,CVTABEND       -> TO SECONDARY CVT\n         DROP  R11\n         USING SCVTSECT,R11       SECONDARY CVT\n         L     R11,SCVTSVCT       -> TO SVC TABLE (256 ENTRIES)\n         DROP  R11\n         USING SVC,R11            SVC TABLE\n         USING CPPL,R10\n         LR    R10,R1\n         L     R2,CPPLCBUF        -> TO COMMAND BUFFER\n         LH    R3,2(R2)           LENGTH OR OFFSET TO OPERAND\n         LA    R3,4(R3)           ADD LENGTH OF 2 LENGTH FIELDS\n         AR    R3,R2              -> TO OPERAND OR NOTHING\n         OC    0(4,R3),=4C' '     MAKE OPERAND UPPER CASE\n         CLC   0(4,R3),=C'USER'   WAS OPERAND USER?\n         BNE   NOUSER\n         MVI   FLAG,X'80'         SET FLAG TO SAY USER\nNOUSER   EQU   *\n         USING IOPL,R9\n         LA    R9,IOPLADS\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         SR    R10,R10            LOOP COUNTER FOR ALL SVCS\n         LA    R8,SVCOP           -> TO SVC NAME TABLE\n         TM    FLAG,X'80'         USER FLAG ON?\n         BZ    ALLTAB             NO. DO ALL SVCS\n         LA    R8,SVCUSR          -> TO FIRST USER ENTRY IN NAME TABLE\n         LA    R10,200            LOOP COUNTER FOR JUST USER SVCS\n         LA    R11,(SVCLEN*200)(R11)   SVC TABLE POINTER\nALLTAB   EQU   *\n*        TPUT  HEAD,L'HEAD\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\nNEXTENT  EQU   *                  FORMAT SVC TABLE DATA\n         MVI   HEAD,X'40'         A BLANK\n         MVC   HEAD+1(79),HEAD    AND 79 MORE\n         C     R10,=F'200'        ASSUME THIS IS A DUMMY ADDRESS\n         BNE   *+10               AND SKIP AROUNT THE MVC\n         MVC   ADDRDUMY(4),SVCEP  SAVE ADDR OF WHAT WE HOPE IS DUMMY\n         CVD   R10,DOUBLE         MAKE SVC # DECIMAL\n         MVC   HEAD(4),=X'40202120' MOVE SVC # INTO MESSAGE\n         ED    HEAD(4),DOUBLE+6   EDIT NUMBER INTO IT\n         ST    R10,FULL           SAVE SVC NUMBER\n         UNPK  OUT(9),FULL(5)     UNPACK\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF'  CONVERT TO CHARACTERS\n         MVC   HEAD+6(4),=C'(  )' SPACE FOR SVC # IN HEX\n         MVC   HEAD+7(2),OUT+6    MOVE IN HEX SVC NUMBER\n         UNPK  OUT(9),SVCEP(5)    UNPACK SVC ADDRESS\n         MVZ   OUT(8),OUT-1       FOOL WITH ZONES\n         TR    OUT(8),=C'0123456789ABCDEF' CONVERT TO CHARACTERS\n         MVC   HEAD+12(8),OUT     MOVE IN CONVERTED ADDRESS\n         MVI   HEAD+12,X'40'      BLANK OUT FIRST BYTE OF ADDRESS\n         CLI   HEAD+13,C'0'       TEST FOR A ZERO\n         BNE   *+8                SKIP ROUND MOVE\n         MVI   HEAD+13,X'40'      MAKE IT A BLANK\n         MVI   HEAD+40,C'6'       IT MUST BE A TYPE 6\n         TM    SVCTP,SVCTP6       IS IT A TYPE 6?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C'3/4' ASSUME TYPE 3 OR 4\n         TM    SVCTP,SVCTP34      IS IT A TYPE 3 OR 4?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVC   HEAD+39(3),=C' 2 ' ASSUME ITS A TYPE 2\n         TM    SVCTP,SVCTP2       IS IT A TYPE 2?\n         BO    GETATTR            YES, GO GET ATTRIBUTES\n         MVI   HEAD+40,C'1'       ASSUME ITS A TYPE 1\nGETATTR  EQU   *\n         MVI   HEAD+44,X'40'      ASSUME NOT AUTHORIZED\n         TM    SVCTP,SVCAPF       TEST FOR AUTHORIZED\n         BZ    GETAMODE           AND FOUND IT ISN'T\n         MVI   HEAD+44,C'Y'       SET IT TO AUTHORIZED\nGETAMODE EQU   *\n         TM    SVCEP,SVCAMODE     TEST FOR AMODE BIT SET\n         BZ    GETATTR1           NOT SET\n         MVC   HEAD+48(2),=C'31'  INDICATE AMODE IS 31\nGETATTR1 EQU   *\n         MVI   HEAD+52,X'40'      ASSUME SVC NOT PART OF THE ESR\n         TM    SVCTP,SVCESR       TEST FOR PART OF ESR\n         BZ    GETATTR2           AND FOUND IT ISN'T\n         MVI   HEAD+52,C'Y'       SAY ITS PART OF ESR\nGETATTR2 EQU   *\n         MVI   HEAD+56,X'40'      ASSUME ITS NON-PREMPTIVE\n         TM    SVCTP,SVCNP        TEST TO SEE\n         BZ    GETATTR3           AND FOUND IT ISN'T\n         MVI   HEAD+56,C'Y'       SAY IT IS\nGETATTR3 EQU   *\n         MVI   HEAD+60,X'40'      ASSUME IT CAN'T BE ASSISTED\n         TM    SVCTP,SVCASF       TEST TO SEE\n         BZ    GETATTR4           AND FOUND IT ISN'T\n         MVI   HEAD+60,C'Y'       SAY IT IS\nGETATTR4 EQU   *\n         MVI   HEAD+64,X'40'      ASSUME IT CAN'T BE IN AR MODE\n         TM    SVCATTR3,SVCAR     TEST TO SEE\n         BZ    LOCK0              AND FOUND IT ISN'T\n         MVI   HEAD+64,C'Y'       SAY IT IS\nLOCK0    EQU   *\n         LA    R2,HEAD+66         -> TO LOCK FIELD IN MSG TEXT\n         TM    SVCLOCKS,SVCLL     LOCAL LOCK?\n         BZ    LOCK1              NOT LOCAL LOCK\n         MVC   0(6,R2),=C'LOCAL,' MOVE IN LOCAL\n         LA    R2,6(R2)           BUMP POINTER\nLOCK1    EQU   *\n         TM    SVCLOCKS,SVCCMS    CMS LOCK?\n         BZ    LOCK2              NOT CMS LOCK\n         MVC   0(4,R2),=C'CMS,'   MOVE IN CMS\n         LA    R2,4(R2)           BUMP POINTER\nLOCK2    EQU   *\n         TM    SVCLOCKS,SVCOPT    OPT LOCK?\n         BZ    LOCK3              NOT OPT LOCK\n         MVC   0(4,R2),=C'OPT,'   MOVE IN OPT\n         LA    R2,4(R2)           BUMP POINTER\nLOCK3    EQU   *\n         TM    SVCLOCKS,SVCALLOC  ALLOC LOCK?\n         BZ    LOCK4              NOT ALLOC LOCK\n         MVC   0(6,R2),=C'ALLOC,' MOVE IN ALLOC\n         LA    R2,6(R2)           BUMP POINTER\nLOCK4    EQU   *\n         TM    SVCLOCKS,SVCDISP   DISP LOCK?\n         BZ    DONELOCK           NOT DISP LOCK\n         MVC   0(5,R2),=C'DISP,'  MOVE IN DISP\n         LA    R2,5(R2)           BUMP POINTER\nDONELOCK EQU   *\n* ---\n         L     R5,SVCEP           POINT TO START OF SVC\n         MVC   MSG2+4+22(58),0(R5)   COPY FIRST 48 BYTES OF SVC\n         TR    MSG2+4+22(58),TRANTAB CLEAN IT UP\n* ---\n         BCTR  R2,0               BACK POINTER UP ONE BYTE AND\n         MVI   0(R2),C' '         BLANK TRAILING COMMA\n         CLM   R10,B'0001',0(R8)  IS THIS ENTRY IN TABLE?\n         BNE   PUTMSG             NO, SO JUST PUT MESSAGE W/OUT NAME\n         MVC   HEAD+22(14),1(R8)  MOVE SVC NAME INTO MESSAGE\n         LA    R8,SVCNAML(R8)     BUMP -> TO NEXT SVC NAME ENTRY\nPUTMSG   EQU   *\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG1,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n         TM    FLAG,X'80'         WAS USER PARM SPECIFIED?\n         BZ    PUTMSG1\n         CLC   ADDRDUMY(4),SVCEP  IS THIS A DUMMY ENTRY?\n         BE    PUTMSG1            YES. DONT DISPLAY DATA\n         PUTLINE PARM=PARM,UPT=(R3),ECT=(R4),ECB=ECB1,                 *\n               OUTPUT=(MSG2,TERM,SINGLE,DATA),                         *\n               MF=(E,IOPLADS)\n*        TPUT  HEAD,L'HEAD\nPUTMSG1  EQU   *\n         LA    R11,SVCLEN(R11)    -> TO NEXT SVC TABLE ENTRY\n         LA    R10,1(R10)         ADD 1 TO COUNT OF SVCS\n         CH    R10,=H'256'        AT END YET?\n         BL    NEXTENT            NO, MORE SVCS TO TELL ABOUT YET\n         MOREND\nPARM     PUTLINE MF=L\nECB1     DC    F'0'\nIOPLADS  DC    4F'0'\nFULL     DC    F'0'\nDOUBLE   DC    D'0'\n         DC    F'0'               MUST PRECEED OUT\nOUT      DS    2F                 WORK AREA FOR UNPK\n         DS    CL1                PAD SPACE FOR UNPK\nFLAG     DC    X'00'\nADDRDUMY DC    F'0'               DUMMY SVC ADDR\nMSG2     DC    H'84'\n         DC    H'0'\nMSG2T    DC    CL80'  '           MSG 2ND LINE\nMSG1     DC    H'84'\n         DC    H'0'\nHEAD     DC    CL80'    SVC       ADDR    ---- NAME ----  TYPE AUT AMD *\n               ESR PRE ASS AR LOCKS'\n*                   0123456789 123456789 123456789 123456789 123456789\n*                     123  (XX)  AAAAAAAA  SVC_NAME         3   Y   31\n*              123456789 123456789 123456789 123456789\n*               N   Y   Y    Y ...\n*\n* THE SVCTABLE WAS \"BORROWED\" DIRECTLY FROM THE DISASSEMBLER.\n*\n***********************************************************************\n* TRANSLATE TABLE FOR PRINTABLE CHARACTERS. ALL OTHERS ARE PERIODS    *\n***********************************************************************\nTRANTAB  DC    256X'4B'            BUILD IT ALL PERIODS\n         ORG   TRANTAB+075         ORG BACK\n         DC    C'.<(+|&&'\n         ORG   TRANTAB+090         ORG BACK\n         DC    C'!$*);\u00a2-/'\n         ORG   TRANTAB+107\n         DC    C',%_>?'\n         ORG   TRANTAB+122\n         DC    C':#@''=\"'\n         ORG   TRANTAB+193\n         DC    C'ABCDEFGHI'\n         ORG   TRANTAB+209\n         DC    C'JKLMNOPQR'\n         ORG   TRANTAB+226\n         DC    C'STUVWXYZ'\n         ORG   TRANTAB+240\n         DC    C'0123456789'\n         ORG   TRANTAB+256         ORG TO END OF TABLE\n*\n         COPY  DISASM3B\n         PRINT NOGEN\n         CVT   DSECT=YES,PREFIX=NO\n         IKJCPPL\n         IKJPTPB\n         IKJIOPL\n         IHASCVT\n         IHASVC\n         END\n./ ADD NAME=TODCN    0127-86072-04105-1018-00242-00453-00173-TCACF0  00\nTODCN    MOWSTART ,           PL/I DOESNT LIKE 8 CHAR NAMES\nTODCN    AMODE  31\nTODCN    RMODE  ANY\n*TODCNVRT MOWSTART\n***********************************************************************\n* FUNCTION: CONVERT A 64 BIT TIMESTAMP OBTAINED BY STCK INTO A        *\n*           CHARACTER STRING GIVING YEAR, JULIAN DATE AND TIME OF DAY *\n*                                                                     *\n* REVERSE ENGINEERED FROM AMDPRDMP AMDPRSEG                           *\n*         BY ALAN C FIELD, OZARK AIR LINES, ST. LOUIS, MO.            *\n*                                                                     *\n* THE ENTRY CONDITIONS TO TODCNVRT ARE:                               *\n*   R1 POINTS TO AN ARGUMENT LIST WITH 3 ADCONS                       *\n*       THE FIRST ARGUMENT IS A CVTTZ VALUE FOR GMT ADJUSTMENT        *\n*       THE SECOND ARGUMENT IS AN 8 BYTE TOD CLOCK VALUE FROM STCK    *\n*       THE THIRD ARGUMENT IS A 24 CHARACTER RETURN AREA              *\n*           VALUE RETURNED IS YYYYDDDHH.MM.SS.MMMMMM                  *\n* THE PROGRAM MASK IS DISABLED FOR FIXED POINT OVERFLOW               *\n***********************************************************************\n         LA    R2,1            A F'1' MEANING 'RETURN FULL DATE'\n*        LA    R2,2            TO GET TIME IN SSSSS.MMMMMM FORM\n         SR    R0,R0                       CLEAR REG\n         SPM   R0                          DISABLE FIXED POINT OVFLW\n         L     R7,4(,R1)                   POINT TO TIMESTAMP\n         MVC   TIMESTMP(8),0(R7)           MOVE IT TO OUR AREA\n*        TM    127(R12),X'20'              REQUIRED TO OFFSET FOR GMT?\n*        BNO   LAB1                        NO\n         L     R7,0(,R1)                   GET CVTTZ, TIME ZONE DIFF\n         ICM   R14,15,0(R7)                PUT IT INTO A REGISTER\n         AL    R14,TIMESTMP                ADD IT TO THE TIMESTAMP\n         ST    R14,TIMESTMP                STORE IT BACK\nLAB1     LM    R4,R5,TIMESTMP              GET TIMESTAMP INTO REGS\n         SRDL  R4,12                       DIVIDE BY 4096\n         D     R4,SIXMILL                  DIVIDE RESULT BY ...\n         LR    R7,R2                       COPY\n         SLA   R7,2                        MULTIPLY BY 4\n         L     R7,ATAB(R7)                 BRANCH TABLE\n         BR    R7                          GO TO RIGHT PLACE\n         SPACE\nRELTVTME L     R7,4(,R1)                   POINT TO TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE IT WITH ...\n         BNE   TOD1A\n         L     R7,8(,R1)                   -> TO RETURN AREA\n         MVI   12(R7),C' '                 MOVE IN A BLANK\n         MVC   13(11,R7),12(R7)            AND BLANK LAST HALF\n         MVC   0(12,R7),ZERO1              MOVE IN ....\n         LA    R15,4                       SET RETURN CODE\n         B     FIN                         RETURN\n         SPACE\nTOD1A    LA    R7,WORK2\n         L     R14,MILLION\n         LR    R15,R4                      COPY REGISTER\n         ST    R14,WORK1\n         SLR   R14,R14                     CLEAR REG\n         D     R14,WORK1                   DIVIDE BY ...\n         ST    R15,0(,R7)                  STORE RESULT IN\n         LR    R14,R4                      COPY REGISTER\n         SRDA  R14,32                      DIVIDE\n         D     R14,WORK1\n         LR    R4,R14                      COPY REG\n         L     R2,8(,R1)                   POINT TO RETURN AREA\n         LA    R2,6(,R2)                   AND POINT 6 BYTES IN\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       AND PRINTABLE\n         OI    5(R2),X'F0'                 INCL LAST CHAR\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   5(R7),X'4B'                 MOVE IN A PERIOD\n         LR    R14,R5                      COPY REG\n         SRDA  R14,32                      DIVIDE BY ...\n         D     R14,MINSPDAY                MINUTES IN A DAY\n         MH    R14,=H'60'                  MULTIPLY BY 60\n         LA    R15,WORK2                   -> TO ...\n         AL    R14,0(,R15)\n         LR    R4,R14                      COPY REG\n         LR    R2,R7                       COPY REG\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(5,R2),TIMESTMP+5(3)       AND PRINTABLE\n         OI    4(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\n         B     FIN                         GO BACK\n         SPACE\nFULLDATE L     R7,4(,R1)                   POINT TO INPUT TIMESTAMP\n         CLC   0(8,R7),TIME2               COMPARE WITH ...\n         BNE   TOD2A                       NOT EQUAL, GO TO ...\n         L     R7,8(,R1)                   POINT TO RETURN AREA\n         MVI   22(R7),C' '                 MOVE IN A BLANK\n         MVI   23(R7),C' '                 MOVE IN A BLANK\n         MVC   0(22,R7),ZERO2              MOVE ....\n         LA    R15,4                       SET RC\n         B     FIN                         RETURN\n         SPACE\nTOD2A    LA    R7,WORK2                    POINT TO ...\n         L     R14,MILLION                 LOAD IN A MILLION\n         LR    R15,R4                      COPY REG\n         ST    R14,WORK1                   SAVE IT IN WORK\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 10E6\n         ST    R15,0(,R7)                  STORE IT IN WORK\n         LR    R14,R4                      COPY AGAIN\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,WORK1                   DIVIDE BY 10E6\n         LR    R4,R14                      COPY\n         L     R2,8(,R1)                   -> TO 3ND ARG, RETURN AREA\n         LA    R2,16(,R2)                  AND POINT 16 BYTES IN\n         CVD   R4,TIMESTMP                 CONVERT TO DECIMAL\n         UNPK  0(6,R2),TIMESTMP+4(4)       MOVE IN DECIMALS OF SECS\n         OI    5(R2),X'F0'                 LAST DIGIT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   15(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,WORK2                   -> WORK\n         L     R4,0(,R14)                  GET DATA PTD TO BY R14\n         LA    R2,13(,R7)                  -> TO SS IN RETURN AREA\n         CVD   R4,TIMESTMP                 CONVERT SECONDS\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT IN\n         OI    1(R2),X'F0'                 PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   12(R7),X'4B'                MOVE IN A PERIOD\n         LA    R14,60                      GET A 60\n         LR    R15,R5                      COPY REG\n         ST    R14,WORK1                   SAVE OUR 60\n         SLR   R14,R14                     CLEAR A REG\n         D     R14,WORK1                   DIVIDE BY 60\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 60\n         LR    R4,R14                      COPY\n         LA    R2,10(,R7)                  -> TO MM IN RETURN AREA\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    1(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R7,8(,R1)                   -> TO 3RD ARG\n         MVI   9(R7),X'4B'                 MOVE IN A PERIOD\n         L     R5,WORK2                    COPY\n         LA    R14,24                      HOURS IN A DAY\n         LR    R15,R5                      COPY\n         ST    R14,WORK1                   SAVE OUR 24\n         SLR   R14,R14                     CLEAR IT\n         D     R14,WORK1                   DIVIDE BY 24\n         ST    R15,WORK2                   SAVE RESULT\n         LR    R14,R5                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE BY 24\n         LR    R4,R14                      COPY\n         LA    R2,7(,R7)                   -> POINT TO HH IN RESULT\n         CVD   R4,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(2,R2),TIMESTMP+6(2)       AND PRINTABLE\n         OI    1(R2),X'F0'                 ..\n         L     R7,WORK2                    GET OUR VALUE\n         C     R7,FOURYR                   COMPARE WITH DAYS IN 4 YR\n         BNL   A3C\n         L     R7,WORK2                    GET IT AGAIN\n         LA    R14,365                     DAYS IN A YEAR\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE BY DAYS IN YR\n         AL    R14,F1                      ADD ONE\n         LR    R3,R14                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      MOVE IT DOWN AGAIN\n         D     R14,WORK1                   DIVIDE\n         AL    R15,F1900                   ADD IN 1900\n         LR    R6,R15                      COPY\n         B     AAC\nA3C      L     R7,WORK2                    COPY\n         SL    R7,FOURYR                   SUBTRACT DAYS IN 4 YEARS\n         ST    R7,WORK2                    SAVE IT\n         LA    R14,1461                    DAYS IN 4 YRS, INCL LEAP\n         ST    R14,WORK1                   SAVE IT\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT DOWN\n         D     R14,WORK1                   DIVIDE\n         LR    R5,R15                      COPY\n         LR    R14,R7                      COPY\n         SRDA  R14,32                      SHIFT IT\n         D     R14,WORK1                   DIVIDE\n         LR    R4,R14                      COPY\n         LR    R15,R4                      COPY\n         SLR   R14,R14                     CLEAR\n         D     R14,TWOYEAR                 DAYS IN 2 YEARS\n         LR    R14,R15                     COPY\n         ALR   R14,R4                      ADD\n         LR    R15,R4                      COPY\n         ST    R14,WORK1                   SAVE IT\n         SLR   R14,R14                     CLEAR\n         D     R14,THREEYR                 DAYS IN 3 YEARS\n         LR    R14,R15                     COPY\n         AL    R14,WORK1                   ADD\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,LEAPYEAR                DAYS IN A LEAP YEAR\n         AL    R14,F1                      ADD 1\n         LR    R3,R14                      COPY\n         LR    R6,R5                       COPY\n         SLA   R6,2                        MULTIPLY BY 4\n         AL    R6,F1904                    1904\n         LR    R14,R4                      COPY\n         BCTR  R14,0                       SUBTRACT 1\n         SRDA  R14,32                      MOVE IT DOWN\n         D     R14,YEAR                    DAYS IN A YEAR\n         ALR   R6,R15                      ADD\nAAC      L     R2,8(,R1)                   -> 3RD ARG\n         LA    R2,4(,R2)                   -> DDD IN RETURN FIELD\n         CVD   R3,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(3,R2),TIMESTMP+6(2)       MOVE IT INTO RETURN AREA\n         OI    2(R2),X'F0'                 MAKE IT PRINTABLE\n         L     R2,8(,R1)                   -> 3RD ARG\n         CVD   R6,TIMESTMP                 MAKE IT DECIMAL\n         UNPK  0(4,R2),TIMESTMP+5(3)       MOVE IN YYYY\n         OI    3(R2),X'F0'                 MAKE IT PRINTABLE\n         SLR   R15,R15                     SET RC\nFIN      EQU   *\n         SPM   R3                          TURN ON FIXED OVFLW\n         MOREND RC=(15)\n         DS    0D                          ALIGN ON DOUBLEWORD\nTIMESTMP DC    CL8' '\nTIME2    DC    CL8' '\nWORK1    DC    F'0'\nWORK2    DC    F'0'\nF1       DC    F'00001'\nF4       DC    F'00004'\nF5       DC    F'00005'\nF8       DC    F'00008'\nF9       DC    F'00009'\nF12      DC    F'00012'\nYEAR     DC    F'00365'\nLEAPYEAR DC    F'00366'\nTWOYEAR  DC    F'00731'\nTHREEYR  DC    F'01096'\nMINSPDAY DC    F'01440'\nFOURYR   DC    F'01460'      DAYS IN 4 YRS, EXCL LEAP YEAR\nF1900    DC    F'01900'\nF1904    DC    F'01904'\nF2000    DC    F'02000'\nMILLION  DC    F'1000000'\nSIXMILL  DC    F'60000000'               SIXTY MILLION\nZERO1    DC    C'00000.000000'           SSSSS.MMMMMM (SINCE MIDNIGHT)\nZERO2    DC    C'000000000.00.00.000000' YYYYDDDHH.MM.SS.MMMMMM\nATAB     DC    A(0)\n         DC    A(FULLDATE)\n         DC    A(RELTVTME)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLIST": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x07\\x00\\x83\\x00\\x83\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:07:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "AFIELD"}, "text": "./        ADD LIST=ALL,NAME=INFO\nPROC 1 KEYWORD\n/* CPROC(INFO) - INFO KEYWORD SEARCH SIMULATOR\nCLRSCRN\nALLOC FI(KWDS) DA('TCACF0.INFOSYS.TEXT($$$KWDS)') SHR REUSE\nALLOC FI(PDS)  DA('TCACF0.INFOSYS.TEXT') SHR REUSE\nIF &KEYWORD = ALL THEN +\n     CALL 'TCACF0.TEST.LOAD(INFO)'\nELSE +\n     CALL 'TCACF0.TEST.LOAD(INFO)' '&KEYWORD'\nFREE FI(KWDS,PDS)\nISPEXEC VGET ZUSER\nIF &ZUSER = TCACF0 THEN +\n   ISPEXEC EDIT DATASET('TCACF0.INFOSYS.TEXT')\nELSE +\n   ISPEXEC BROWSE DATASET('TCACF0.INFOSYS.TEXT')\n./        ADD LIST=ALL,NAME=TECHDISP\nPROC 0 PRMS()\n/* A CMDPROC TO PROVIDE A MENU OF ALL SORTS OF NIFTY DISPLAYS\nCONTROL MAIN NOMSG NOLIST\nDISPLAY: +\nISPEXEC DISPLAY PANEL(DISPLAY)\nSELECT\n   WHEN (&O =   0) GOTO FIN\n   WHEN (&O =   1) ADMFINFO\n   WHEN (&O =   2) CALL 'TCACF0.TEST.LOAD(APFLST)'\n   WHEN (&O =   3) CALL 'TCACF0.TEST.LOAD(APPCVER)'\n   WHEN (&O =   4) %ARCHLVL\n   WHEN (&O =   5) CALL 'TCACF0.TEST.LOAD(ASCBGONE)'\n   WHEN (&O =   6) CALL 'TCACF0.TEST.LOAD(ASCBSLOT)'\n   WHEN (&O =   7) CALL 'TCACF0.TEST.LOAD(ASMVALS)'\n   WHEN (&O =   8) CALL 'TCACF0.TEST.LOAD(ASVTSCAN)'\n   WHEN (&O =   9) CACHE &PRMS\n   WHEN (&O =  10) CALL 'TCACF0.TEST.LOAD(CATVOL)'\n   WHEN (&O =  11) %CA1INFO\n   WHEN (&O =  12) %CDSLVL\n   WHEN (&O =  13) %PCHID &PRMS\n   WHEN (&O =  14) CMCCHK\n   WHEN (&O =  15) CALL 'TCACF0.TEST.LOAD(COLOURS)'\n   WHEN (&O =  16) %COLORS\n   WHEN (&O =  17) %CPU\n   WHEN (&O =  18) %CPUSER\n   WHEN (&O =  19) CALL 'TCACF0.TEST.LOAD(CSALST)'\n   WHEN (&O =  20) DAL &PRMS\n   WHEN (&O =  21) %ADYDSP0\n   WHEN (&O =  22) %DAELIST\n   WHEN (&O =  23) CALL 'TCACF0.TEST.LOAD(DCL)'\n   WHEN (&O =  24) %DEVS &PRMS\n   WHEN (&O =  25) +\n     IF &SYSHSM  \u00ac= THEN WRITE DFHSM IS AVAILABLE, VER/REL/MOD = &SYSHSM\n   WHEN (&O =  26) CALL 'TCACF0.TEST.LOAD(DFPLVL)' '&PRMS.'\n   WHEN (&O =  27) CALL 'TCACF0.TEST.LOAD(DSFLVL)'\n   WHEN (&O =  28) CALL 'TCACF0.TEST.LOAD(DSSLVL)'\n   WHEN (&O =  29) %DSRM\n   WHEN (&O =  30) DXCFSTR\n   WHEN (&O =  31) DYNEXITS\n   WHEN (&O =  32) %ISGACLS0\n   WHEN (&O =  33) GUESTNAM\n   WHEN (&O =  34) %INFO &PRMS\n   WHEN (&O =  35) IOCDSLST\n   WHEN (&O =  36) CALL 'TCACF0.TEST.LOAD(IOINFO)'\n   WHEN (&O =  37) %IPLINFO\n   WHEN (&O =  38) CALL 'TCACF0.TEST.LOAD(IPLMEM)'\n   WHEN (&O =  39) CALL 'TCACF0.TEST.LOAD(IPLSTAT)'\n   WHEN (&O =  40) ISRDDN\n   WHEN (&O =  41) ISRFIND\n   WHEN (&O =  42) %JES3JCT &PRMS\n   WHEN (&O =  43) LASTCLPA\n   WHEN (&O =  44) LASTIPL\n   WHEN (&O =  45) LASTJES3\n   WHEN (&O =  46) CALL 'TCACF0.TEST.LOAD(LELVL)'\n   WHEN (&O =  47) LNKLST\n   WHEN (&O =  48) LOOK\n   WHEN (&O =  49) LPA\n   WHEN (&O =  50) CALL 'TCACF0.TEST.LOAD(LPALST)'\n   WHEN (&O =  51) CALL 'TCACF0.TEST.LOAD(LPARCAP)'\n   WHEN (&O =  52) CALL 'TCACF0.TEST.LOAD(LPARNM)'\n   WHEN (&O =  53) LXATSCAN\n   WHEN (&O =  54) MAPPPT\n   WHEN (&O =  55) MAPSYS &PRMS\n   WHEN (&O =  56) CALL 'TCACF0.TEST.LOAD(MAPUCVT)'\n   WHEN (&O =  57) %MAPXA\n   WHEN (&O =  58) MEM\n   WHEN (&O =  59) CALL 'TCACF0.TEST.LOAD(MULCCHK)'\n   WHEN (&O =  60) %MSU\n   WHEN (&O =  61) CALL 'TCACF0.TEST.LOAD(NUCMAP)'\n   WHEN (&O =  62) CALL 'TCACF0.TEST.LOAD(OPTCHK)'\n   WHEN (&O =  63) CALL 'TCACF0.TEST.LOAD(PARMLST)'\n   WHEN (&O =  64) CALL 'TCACF0.TEST.LOAD(PROCINFO)'\n   WHEN (&O =  65) %PRSMINFO\n   WHEN (&O =  66) CALL 'TCACF0.TEST.LOAD(PUSE)'\n   WHEN (&O =  67) CALL 'TCACF0.TEST.LOAD(RACFDS)'\n   WHEN (&O =  68) +\n          WRITE RACF IS &SYSRACF, VER/REL/MOD = &SYSLRACF\n   WHEN (&O =  69) REALCPID\n   WHEN (&O =  70) %RMFHIST\n   WHEN (&O =  71) SHOWMVS\n   WHEN (&O =  72) SHOWLPAR\n   WHEN (&O =  73) CALL 'TCACF0.TEST.LOAD(SMFDS)'\n   WHEN (&O =  74) %SORTOPT &PRMS\n   WHEN (&O =  75) CALL 'TCACF0.TEST.LOAD(SPLEXNAM)'\n   WHEN (&O =  76) SPY\n   WHEN (&O =  77) CALL 'TCACF0.TEST.LOAD(SRMCONS)'\n   WHEN (&O =  78) SSIDCHK\n   WHEN (&O =  79) SSNAMES\n   WHEN (&O =  80) SVCTAB &PRMS\n   WHEN (&O =  81) LASTXCF\n   WHEN (&O =  82) CALL 'TCACF0.TEST.LOAD(SYSSYM)'\n   WHEN (&O =  83) SYSTAT\n   WHEN (&O =  84) CALL 'TCACF0.TEST.LOAD(SWAQUERY)'\n   WHEN (&O =  85) CALL 'TCACF0.TEST.LOAD(TAPETAB)'\n   WHEN (&O =  86) TASID\n   WHEN (&O =  87) +\n          IF &SYSTSOE \u00ac= THEN WRITE TSO/E VER/REL/MOD = &SYSTSOE\n   WHEN (&O =  88) ST TSO\n   WHEN (&O =  89) CALL 'TCACF0.TEST.LOAD(FXCSCAN)'\n   WHEN (&O =  90) %VSAMNAME\n   WHEN (&O =  91) CALL 'TCACF0.TEST.LOAD(VTAMLVL)'\n   WHEN (&O =  92) VTAMSESS &PRMS\n   WHEN (&O =  93) CALL 'TCACF0.TEST.LOAD(WHATJES)'\n   WHEN (&O =  94) CALL 'TCACF0.TEST.LOAD(WHATSEC)'\n   WHEN (&O =  95) WHATSYS\n   WHEN (&O =  96) CALL 'TCACF0.TEST.LOAD(WLMINFO)'\n   WHEN (&O = 199) CALL 'TCACF0.TEST.LOAD(ILRBIRD)' 'BIRD'\n   OTHERWISE GOTO FIN\nEND\nSET &O =\nGOTO DISPLAY\nFIN: +\nERROR OFF\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNTL": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x07\\x00`\\x00`\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:07:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "AFIELD"}, "text": "./        ADD LIST=ALL,NAME=INFOK\n//TCACF0I JOB (880MV0),'ALAN FIELD',CLASS=S,MSGCLASS=Z,NOTIFY=&SYSUID\n//* JOB(INFOK) - BUILD KEYWORD MEMBER AND DATE UPDATED IN INFOSYS.TEXT\n//INFO1   EXEC PGM=INFO,PARM='KWD'\n//STEPLIB  DD DISP=SHR,DSN=TCACF0.TEST.LOAD\n//SYSUDUMP DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//PDS      DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT\n//SYSOUT   DD SYSOUT=*\n//SORTIN   DD DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(5,1),RLSE),\n// RECFM=FB,LRECL=24,BLKSIZE=0,DSORG=PS,DSN=&&SORTIN\n//SORTOUT  DD DISP=(,PASS),UNIT=VIO,SPACE=(TRK,(5,1),RLSE),\n// RECFM=FB,LRECL=24,BLKSIZE=0,DSORG=PS,DSN=&&SORTOUT\n//KWDDATA  DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT($$$KWDS)\n//SORTCNTL DD *\n OPTION DYNALLOC=OFF\n//*\n//*DEBUG1  EXEC PGM=ICEGENER,REGION=2M\n//*SYSPRINT DD SYSOUT=*\n//*SYSIN    DD DUMMY\n//*SYSUT1   DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT($$$KWDS)\n//*SYSUT2   DD SYSOUT=*\n//*\n//INFO2   EXEC PGM=INFO PARM='BLD'\n//STEPLIB  DD DISP=SHR,DSN=TCACF0.TEST.LOAD\n//SYSUDUMP DD SYSOUT=*\n//SYSPRINT DD DISP=(,PASS),DSN=&&LIST,SPACE=(TRK,(10,1)),\n// UNIT=VIO,RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS\n//PDS      DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT\n//KWDS     DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT($$$KWDS)\n//*\n//*DEBUG2  EXEC PGM=ICEGENER,REGION=2M\n//*SYSPRINT DD SYSOUT=*\n//*SYSIN    DD DUMMY\n//*SYSUT1   DD DISP=(OLD,PASS),DSN=&&LIST\n//*SYSUT2   DD SYSOUT=*\n//*\n//SORT    EXEC PGM=SORT,REGION=8M\n//SYSOUT   DD SYSOUT=*\n//SORTIN   DD DISP=(OLD,PASS),DSN=&&LIST\n//SORTOUT  DD DISP=(,PASS),DSN=&&M003,SPACE=(TRK,(10,1)),\n// UNIT=VIO,RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PS\n//SYSIN    DD *\n OMIT COND=(6,7,CH,EQ,C'M000003')\n INREC FIELDS=(1,80,\n      18,3,CHANGE=(2,C'Jan',C'01',\n                     C'Feb',C'02',\n                     C'Mar',C'03',\n                     C'Apr',C'04',\n                     C'May',C'05',\n                     C'Jun',C'06',\n                     C'Jul',C'07',\n                     C'Aug',C'08',\n                     C'Sep',C'09',\n                     C'Oct',C'10',\n                     C'Nov',C'11',\n                     C'Dec',C'12'))\n SORT FIELDS=(21,2,Y2C,D,            YY\n              81,2,CH,D,             MM\n              16,2,CH,D,             DD\n              6,7,CH,A)              MNNNNNN\n OUTREC FIELDS=(6,74,6X)\n/*\n//*\n//REXX EXEC PGM=IRXJCL,\n// PARM='INFOBAT'\n//SYSTSPRT DD SYSOUT=*\n//SYSEXEC  DD DISP=SHR,DSN=TCACF0.REXX.EXEC\n//SYSUT1   DD DISP=(OLD,DELETE),DSN=&&M003\n//SYSUT2   DD DISP=SHR,DSN=TCACF0.INFOSYS.TEXT(M000003)\n./        ADD LIST=ALL,NAME=SMFSRCH\n//TCACF0S JOB (880MV0),'ALAN FIELD',CLASS=S,NOTIFY=&SYSUID,MSGCLASS=X\n//SMFSCAN  EXEC PGM=SMFSRCH        NONVSAM\n//STEPLIB   DD  DISP=SHR,DSN=TCACF0.TEST.LOAD\n//SYSPRINT  DD  SYSOUT=*,RECFM=FB,LRECL=133,BLKSIZE=1330\n//SYSUDUMP  DD  SYSOUT=*\n//SYSUT1    DD  DISP=SHR,DSN=SYS4D.SVT2.SMFDUMPD(0)\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//*\n//*  'A' - INDICATES A ACCESS REFFERENCE  ( REQUIRED )\n//*  'P' - INDICATES A PARTIAL DSNAME FOLLOWS\n//*  'D=' - SPECIFIES THE DATA SET NAME ( OPTIONAL IF J= PRESENT )\n//*  'J=' - SPECIFIES THE JOB NAME ( OPTIONAL IF D= PRESENT )\n//*  'T=' - SPECIFIES THE THE ACCESS TYPE:\n//*                     ( OPTIONAL AND '3' IS THE DEFAULT ).\n//*                                       '1' = READ,\n//*                                       '2' = UPDATE,\n//*                                       '4' = SCRATCHED,\n//*                                       '8' = RENAMED,\n//*                                             OR THE ADDITION OF\n//*                                             ANY OF THE ABOVE.\n//*\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//SYSIN     DD  *\n P D=ALIASTST,T=15\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INFOSYS": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x07\\x00n\\x00n\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:07:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "AFIELD"}, "text": "./        ADD LIST=ALL,NAME=M000001\n$DEL M000001\nH M000001 D=APR88\nT 03Feb93 - How to use this INFO file.\nK ARGUMENT HELP INFO JES3 KEYWORD MESSAGE MSG MVS SEARCH VM\n\nThis file contains a series of entries which may be of help to\noperations in resolving and correcting system related problems.\n\nThe entries are searchable by keyword. Given a problem, enter search\nargument(s) (keywords) describing the problem. Entries containing those\nkeywords will be displayed, if found. Select appropriate entries for\ndetailed explanations for the situation and suggested resolution.\n\ne.g. You have a problem with the JES3 console not rolling.\nEnter the search command 'SEA =1 JES3 CONSOLE' to select all entries\nrelating to JES3 and CONSOLE.\n\nIf no title lines are displayed enter a less restrictive search argument\nand try again. e.g. in the above case try 'SEA =1 JES3' or 'SEA =1 CONSOLE'.\n\nA HINT: If you want to search for a message identifier use the\nsearch keyword MSGaaannn e.g. to search for message IAT8572 enter\n'SEA =1 MSGIAT8572'.\n\nEntry M000003 is a list of the entries sorted by last updated date.\nBrowse this list to see which entries have been changed most recently.\n\nThe entry naming convention is as follows:\n\n      Mnnnnnn - MVS information\n      Onnnnnn - OS/2 information\n      Vnnnnnn - VM information\n$EOM\n./        ADD LIST=ALL,NAME=M000002\n$DEL M000002\nH M000002 D=JUL90\nT 20Jul90 - Creating user entries for this database.\nK CREATING DATABASE ENTRIES FORMAT INFO MVS USER\n\nThe format of each entry in the Information/MVS database is as follows:\n\n1. One header line (H line).\n\n   The header line must contain an H in the first data column, followed\n   by a blank. The entry identifier, consisting of a letter and 6\n   numbers (0-9) must start in the third column. The letter you\n   specify is the name of the logical file in which you want the entry\n   to be contained. Entry identifiers must be assigned in ascending\n   sequence. However, contiguous numbers are not required.\n\n   The H and the entry identifier are the only data required in the\n   header line. An optional parameter is:\n\n   D=mmmyy The date on which you place the entry in the database, or\n   the date on which you last modified the entry. Any other data on the\n   H line is ignored, but stored as part of the H line in the database.\n\n2. One or more title lines (T lines)\n\n   The title line(s) follow the H line. The title must contain a T in\n   the first data column followed by a blank. You can enter any number\n   of title lines; however Info/Sys can display a maximum of 201\n   characters of data. A typical entry has one or two lines. You must\n   have at least one T line.\n\n3. One or more keyword lines (K lines and/or L Lines)\n\n   The keyword lines follow the T lines. Keyword lines are optional.\n   The keyword lines, if present, must contain a K or L in the first\n   data column followed by a blank. Any number of K lines can be\n   entered. These lines contain all the keywords by which this entry\n   can be located through a keyword search.\n\n4. One blank line (a separator line)\n\n   A blank line must separate the last keyword line from the first\n   text line.\n\n5. One or more text lines (the text entry itself)\n\n   You can use as many text lines as you require. A text line cannot\n   contain a $EOM starting in the first column.\n\n6. One $EOM line (an end line)\n\n   A line containing $EOM starting in the first column must be the last\n   line of an entry.\n\nThe header, title, keyword and text lines can be limited to 78\ncharacters of input, so that it can be displayed on a single line on\nthe screen. The data in the records can be mixed upper and lowercase.\nHowever the output of the H, T, L and K lines will be uppercase.\n\nOptionally the entry may be preceeded with a $DEL fnnnnnn so that an\nold entry will be deleted before it is replaced with a new entry.\n$EOM\n./        ADD LIST=ALL,NAME=M000614\n$DEL M000614\nH M000614 D=AUG03\nT 21Aug03 - Determining instruction mnemonics using IPCS.\nK INSTRUCTION IPCS MNEMONIC\n\nTo translate an instruction to determine its mnemonic you can\nuse the IPCS command OPCODE.\n\n  e.g. OPCODE A7A80073\n\n       displays Mnemonic for X'A7A80073' is LHI\n$EOM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACROS": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x12\\x04\\x8f\\x01\\x12\\x04\\x8f\\x01\\x15\\x029\\x029\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-02-17T00:00:00", "modifydate": "2012-02-17T01:15:00", "lines": 569, "newlines": 569, "modlines": 0, "user": "AFIELD"}, "text": "./ ADD NAME=#SORT    0100-03278-03278-0044-00169-00169-00000-AFIELD\n         MACRO\n&NAME    #SORT &FIELDS=(1,1,CH,A),&FIRST=,&LAST=,&LENGTH=\n         MNOTE *,'       #SORT     VERSION 002    12 MAR 87        ACF'\n.**********************************************************************\n.*                                                                    *\n.* #SORT                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODING TO SORT A TABLE IN ASCENDING OR     *\n.*                DESCENDING ORDER BASED ON A KEY FIELD IN EACH       *\n.*                ENTRY.                                              *\n.*                                                                    *\n.* DESCRIPTION    A BUBBLE SORT IS SORT IS PERFORMED.  THE KEYS       *\n.*                OF CONSECUTIVE ITEMS ARE COMPARED.  THE ITEMS       *\n.*                ARE SWITCHED IF NECESSARY.  PROCESSING PROCEEDS     *\n.*                TO THE NEXT PAIR OF ENTRIES.  AT THE END OF ONE     *\n.*                PASS, AT LEAST THE HIGHEST KEY IS IN THE PROPER     *\n.*                POSITION.  THE LIST IS REDUCED TO A SUBLIST         *\n.*                FROM THE FIRST ENTRY TO THE LAST ENTRY WHICH        *\n.*                WAS SWITCHED AND THE SUBLIST IS THEN PROCESSED      *\n.*                AS WAS THE ORIGINAL LIST.  THIS CONTINUES UNTIL     *\n.*                THE ENTIRE LIST HAS BEEN SORTED.  IF AT ANY POINT,  *\n.*                PROCESSING THE LIST RESULTS IN NO ENTRIES BEING     *\n.*                SWITCHED, THE LIST IS IN ORDER AND PROCESSING       *\n.*                IS TERMINATED.                                      *\n.*                                                                    *\n.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          *\n.*                SORT AND MUST NOT BE SPECIFIED AS FIRST OR          *\n.*                LAST VALUES.                                        *\n.*                                                                    *\n.*                REGISETR 2 IS ALSO USED IF FORMAT BI IS SELECTED.   *\n.*                                                                    *\n.* SYNTAX         NAME     #SORT FIELDS=(KEYPOS,KEYLEN,FMT,ORDER),    *\n.*                               FIRST=SYMBOL1,                       *\n.*                               LAST=SYMBOL2,                        *\n.*                               LENGTH=NUM                           *\n.*                                                                    *\n.*                NAME   - SPECIFIES THE SYMBOLIC TAG TO BE           *\n.*                         ASSIGNED TO THE FIRST INSTRUCTION          *\n.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      *\n.*                                                                    *\n.*                FIELDS - SPECIFIES THE SORT PARAMETERS.             *\n.*                         KEYPOS - SPECIFIES THE RELATIVE KEY        *\n.*                                  POSITION IN THE RECORD.           *\n.*                         KEYLEN - SPECIFIES THE LENGTH OF THE KEY.  *\n.*                         FMT    - SPECIFIES THE FORMAT OF THE       *\n.*                                  DATA TO BE SORTED.                *\n.*                                  VALID FORMATS ARE CHARACTER (CH)  *\n.*                                  OR BINARY (BI).                   *\n.*                         ORDER  - SPECIFIES IF THE LIST IS TO BE    *\n.*                                  SORTED IN ASCENDING ORDER (A),    *\n.*                                  OR DESCENDING ORDER (D).  THE     *\n.*                                  DEFAULT IS A.                     *\n.*                                                                    *\n.*                FIRST  - SPECIFIES THE SYMBOLIC NAME OF THE FIRST   *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE FIRST ENTRY.   *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LAST   - SPECIFIES THE SYMBOLIC NAME OF THE LAST    *\n.*                         ENTRY IN THE TABLE OR A REGISTER WHICH     *\n.*                         CONTAINS THE ADDRESS OF THE LAST ENTRY.    *\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   *\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          *\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          *\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED.  *\n.*                                                                    *\n.*                LENGTH - SPECIFIES THE LENGTH OF THE ENTRIES IN     *\n.*                         THE TABLE.  THIS PARAMETER IS REQUIRED.    *\n.*                                                                    *\n.*                                                                    *\n.* ERRORS         INVALID NUMBER OF ENTRIES IN FIELDS PARAMETER - 8   *\n.*                FORMAT TYPE NOT SUPPORTED                     - 8   *\n.*                FIRST VALUE NOT SPECIFIED                     - 8   *\n.*                LAST  VALUE NOT SPECIFIED                     - 8   *\n.*                LENGTH VALUE NOT SPECIFIED                    - 8   *\n.*                                                                    *\n.* EXAMPLE        SORT A TABLE OF ENTRIES WHERE THE FIRST 8 BYTES     *\n.*                ARE THE KEYS.  THE LENGTH OF EACH ENTRY IS 50       *\n.*                BYTES.                                              *\n.*                                                                    *\n.*                         #SORT FIELDS=(1,8,CH,A),LENGTH=50,         *\n.*                               FIRST=BEGIN,LAST=END                 *\n.*                                                                    *\n.*                BEGIN    DC    CL8'A',CL42'ENTRY 1'                 *\n.*                         DC    CL8'D',CL42'ENTRY 2'                 *\n.*                         DC    CL8'X',CL42'ENTRY 3'                 *\n.*                         DC    CL8'$',CL42'ENTRY 4'                 *\n.*                         DC    CL8'Q',CL42'ENTRY 5'                 *\n.*                END      DC    CL8'M',CL42'ENTRY 6'                 *\n.*                                                                    *\n.* GLOBALS                                                            *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         LCLA  &X,&Y,&Z\n         LCLC  &HI,&I,&LEN\n.*\n&I       SETC  '#SOR'.'&SYSNDX'(2,3)\n&X       SETA  N'&FIELDS\n         AIF   (&X NE 4).ERR1\n         AIF   ('&FIELDS(3)' EQ 'CH').OK1\n         AIF   ('&FIELDS(3)' NE 'BI').ERR2\n.OK1     ANOP\n&HI      SETC  'H'\n         AIF   ('&FIELDS(&X)' NE 'D').TESTA\n&HI      SETC  'L'\n         AGO   .SETREGS\n.TESTA   AIF   ('&FIELDS(&X)' EQ 'A').SETREGS\n         MNOTE *,'*** SORT TYPE NOT A OR D - A ASSUMED'\n.SETREGS ANOP\n&LEN     SETC  '&LENGTH'\n&X       SETA  &FIELDS(1)-1            OFFSET WITHIN RECORD\n&Y       SETA  &FIELDS(2)              LENGTH OF SORT-KEY\n.*&Z       SETA  &X+&LEN                 OFFSET WITHIN NEXT RECORD\n         AIF   ('&FIRST'  EQ '').ERR3\n         AIF   ('&LAST'   EQ '').ERR4\n         AIF   ('&LENGTH' EQ '').ERR5\n.*\n&NAME    LA    R0,&LENGTH              LOAD LENGTH OF AN ENTRY\n         AIF   ('&LAST'(1,1) EQ '(').RFORM1\n         LA    R1,&LAST                LOAD LAST ENTRY ADDRESS\n         AGO   .CONT1\n.RFORM1  LR    R1,&LAST                LOAD LAST ENTRY ADDRESS\n.CONT1   ANOP\n&I.A     SR    R14,R14                 CLEAR LAST SWITCH ADDRESS\n         AIF   ('&FIRST'(1,1) EQ '(').RFORM2\n         LA    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n         AGO   .CONT2\n.RFORM2  LR    R15,&FIRST              LOAD FIRST ENTRY ADDRESS\n.CONT2   SR    R1,R0                   POINT TO PENULTIMATE\n         CR    R15,R1                  TEST AGAINST FIRST ENTRY\n         BH    &I.D                    IF HIGH, LIST SORTED\n&I.B     EQU   *\n         AIF   ('&FIELDS(3)' EQ 'BI').BI1\n         CLC   &X.(&Y,R15),&X.+&LEN.(R15)    COMPARE KEYS\n         AGO   .SRTX\n.BI1     ANOP\n         ICM   R2,B'1111',&X.+1(R15)   LOAD VALUE INTO REG\n         C     R2,&X.+1+&LEN.(R15)     COMPARE KEYS\n.SRTX    ANOP\n         BN&HI &I.C\n         XC    0(&LEN,R15),&LEN.(R15)  SWITCH ENTRIES\n         XC    &LEN.(&LEN,R15),0(R15)\n         XC    0(&LEN,R15),&LEN.(R15)\n         LR    R14,R15                 SAVE ADDRESS OF SWITCHED ENTRY\n&I.C     BXLE  R15,R0,&I.B             POINT TO NEXT ENTRY\n         LTR   R1,R14                  COPY AND TEST LAST SWITCHED ADDR\n         BNZ   &I.A\n&I.D     EQU   *\n         MEXIT\n.ERR1    MNOTE 8,'INVALID NO. OF ENTRIES IN FIELDS PARAMETER'\n         MEXIT\n.ERR2    MNOTE 8,'FORMAT TYPE IS NOT SUPPORTED'\n         MEXIT\n.ERR3    MNOTE 8,'FIRST ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR4    MNOTE 8,'LAST  ENTRY ADDRESS NOT SPECIFIED.'\n         MEXIT\n.ERR5    MNOTE 8,'LENGTH NOT SPECIFIED.'\n         MEND\n./ ADD NAME=@AMODE   0100-87306-87306-1804-00073-00073-00000-NASPA\n         MACRO\n&NAME    @AMODE &MODE\n.*---------------------------------------------------------------------\n.*\n.*       CHANGE ADDRESS MODE\n.*\n.*       @AMODE 24                SET ADDR MODE TO 24 BIT\n.*       @AMODE 31                SET ADDR MODE TO 31 BIT\n.*\n.*---------------------------------------------------------------------\n         LCLA  &X\n&X       SETA  &SYSNDX\n&NAME    DS    0H\n         AIF   ('&MODE' EQ '24').A24\n         AIF   ('&MODE' EQ '31').A31\n         MNOTE 8,'INVALID MODE, MUST BE 24 OR 31'\n         MEXIT\n.A24     ANOP\n*----------------------------------------------------------------------\n*        SET AMODE=24\n*----------------------------------------------------------------------\n         ICM   R1,15,=A(MZZZ&X)\n         BSM   R0,R1              SET AMODE=24\n         AGO   .DONE\n.A31     ANOP\n*----------------------------------------------------------------------\n*        SET AMODE=31\n*----------------------------------------------------------------------\n         ICM   R1,15,=A(MZZZ&X+X'80000000')\n         BSM   R0,R1              SET AMODE=31\n.DONE    ANOP\nMZZZ&X   DS    0H\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n.*\n.*       FREEWARE: THIS MACRO IS DISTRIBUTED ON AN AS-IS BASIS\n.*                 WITHOUT WARRANTY, EITHER EXPRESSED OR IMPLIED, BY:\n.*\n.*                 THE NATIONAL SYSTEMS PROGRAMMERS ASSOCIATION (NASPA)\n.*                 P.O. BOX 21525\n.*                 GREENFIELD, WI 53221\n.*\n.*\n.*       MACRO WRITTEN BY:\n.*\n.*                 PRODUCTIVITY SYSTEMS, INC.\n.*                 MILWAUKEE, WI\n.*\n.*---------------------------------------------------------------------\n.*\n.*    THIS MACRO HAS MET A BASIC SET OF PROGRAMMING AND\n.*    DOCUMENTATION STANDARDS, BUT HAS NOT BEEN PROGRAM TESTED IN ANY\n.*    FORMAL FASHION BY NASPA. THE USER IS EXPECTED TO MAKE THE FINAL\n.*    EVALUATION OF THE USE OF THIS MACRO IN THEIR ENVIRONMENT.\n.*\n.*    NASPA MAKES NO WARRANTY, EXPRESSED OR IMPLIED, OF THE FITNESS\n.*    FOR A PARTICULAR PURPOSE AS RELATES TO THE DOCUMENTATION,\n.*    FUNCTION, RESULTS, OR PERFORMANCE OF THIS MACRO.\n.*\n.*    IMPLEMENTATION AND USE OF THIS MACRO CONSTITUTES A RELEASE\n.*    FROM LIABILITY OF NASPA FOR ANY PROBLEMS ARISING FROM THE USE OF\n.*    THIS MACRO AT THE USER'S INSTALLATION.\n.*\n.*    THIS MACRO IS MADE AVAILABLE BY NASPA WITHOUT CHARGE.\n.*    RECIPIENTS ARE FREE TO MAKE THIS MACRO AVAILABLE TO OTHERS IN\n.*    LIKE MANNER, PROVIDED THIS DISCLAIMER IS KEPT INTACT.  IT MAY\n.*    NOT BE SOLD, TRADED, OR EXCHANGED FOR CASH, SERVICES, OR AS AN\n.*    INCENTIVE FOR SERVICES AND/OR OTHER PURCHASES, NOR MAY IT BE\n.*    INTEGRATED INTO ANY PROGRAM FOR SUCH USE.\n.*\n.*---------------------------------------------------------------------\n.*---------------------------------------------------------------------\n         MEND\n./ ADD NAME=IEZCTGFL 0100-87092-87092-0853-00020-00020-00000-FIELD\n         MACRO\n&NAME    IEZCTGFL\n         DSECT\n***********************************************************************\n* DESCRIBES THE FIELD PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF   *\n***********************************************************************\nCTGFL    DS    0F\nCTGFLDNO DC    X'00'\nCTGFLDCD DC    X'00'\nCTGFLDGC DC    X'00'\nCTGFLDRE DC    X'00'\nCTGFLDWA DC    F'0'\nCTGFLDNM DC    F'0'\nCTGFLCHN DC    F'0'\nCTGFLDAT DC    2F'0'\n         ORG   CTGFLDAT\nCTGFLNG  DC    F'0'\nCTGFLPT  DC    F'0'\nLCTGFL   EQU   *-CTGFL\n         MEND\n./ ADD NAME=IEZCTGPL 0101-87092-87092-0853-00040-00061-00000-FIELD\n         MACRO\n&NAME    IEZCTGPL\n         DSECT\n***********************************************************************\n* DESCRIBES THE CATALOG PARAMETER LIST. DOC IS: CATALOG DIAGNOSIS REF *\n***********************************************************************\nCTGPL    DS    0F\nCTGOPTN1 DC    X'00'\nCTGBYPSS EQU   X'80'\nCTGNAME  EQU   X'04'\nCTGCNAME EQU   X'02'\nCTGOPTN2 DC    X'00'\nCTGGTALL EQU   X'40'\nCTGOPTN3 DC    X'00'\nCTGLOC   EQU   X'20'\nCTGNUM   EQU   X'02'\nCTGAM0   EQU   X'01'\nCTGOPTN4 DC    X'00'\nCTGBYPMT EQU   X'08'\nCTGICFC  EQU   X'02'\nCTGICFOR EQU   X'01'\nCTGENT   DC    X'00',AL3(0)\nCTGCAT   DC    F'0'\n         ORG   CTGCAT\nCTGVOL   DC    F'0'\nCTGWKA   DC    F'0'\nCTGDSORG DC    X'0000'\n         ORG   CTGDSORG\nCTGOPTNS DC    X'0000'\nCTGLTCAT EQU   X'20'\nCTGTYPE  DC    X'00'\nCTGNOFLD DC    X'00'\nCTGDDNM  DC    F'0'\n         ORG   CTGDDNM\nCTGFDBK  DC    X'0000'\nCTGFBFLG DC    X'0000'\nCTGJSCB  DC    F'0'\nCTGFIELD DC    F'0'\nLCTGPL   EQU   *-CTGPL\n         MEND\n./ ADD NAME=MOREND   0100-03278-03278-0044-00068-00068-00000-AFIELD\n         MACRO\n&NAME    MOREND &RENT=,&RC=0,&SP=,&SAVE=(0)\n.* CHANGED BY RMF SO PARM CAN BE RETURNED IN R1\n.* CHANGED BY ACF SO RETURN CODE CAN BE IN REG OR LITERAL 19 FEB 87\n.* CHANGED BY ACF TO USE RU FORM OF FREEMAIN\n         LCLC  &A,&B\n         GBLC  &MOWSECT,&SUBP,&ARNAME\n         GBLB  &NREN,&NSAR\n         AIF   ('&SYSECT' EQ '&MOWSECT').CHKR\n&MOWSECT CSECT\n.CHKR    ANOP\n&NAME    DS    0H\n&NREN    SETB  (('&RENT' EQ 'NO') OR &NREN)\n         AIF   (&NSAR).RETR\n         AIF   (&NREN).NORENT\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NOT1\n         LR    14,1\n         LR    1,13\n         AGO   .L\n.NOT1    ANOP\n         LR    1,13\n.L       L     13,4(1)\n         AIF   (('&SAVE(1)' NE '1') AND ('&SAVE(2)' NE '1')).NS1\n         ST    14,24(13)\n.NS1     AIF   (('&SAVE(1)' NE '0') AND ('&SAVE(2)' NE '0')).NS2\n         ST    0,20(13)\n.* * * * * * * *\n.NS2     AIF   ('&RC'(1,1) EQ '(').RCREG  IF IN RX FORM  ..\n         AGO   .NS15\n.RCREG   ANOP                             ELSE, IN A REG ..\n         AIF   ('&RC' EQ '(15)').GOTRC    IF NOT REG 15..\n         AIF   ('&RC' EQ '(R15)').GOTRC   IF NOT REG 15..\n         LR    15,&RC                     LOAD R15 WITH CODE\n.GOTRC   ANOP\n.* * * * * * * *\n         ST    15,16(13)\n.NS15    ANOP\n         AIF   ('&SUBP' NE '').N0\n&SUBP    SETC  '0'\n.N0      AIF   (T'&SP EQ 'O').FR1\n&SUBP    SETC  '&SP'\n.FR1     FREEMAIN RU,LV=MOWWORKL,A=(1),SP=&SUBP\n         AIF   ('&RC' EQ '(15)').R15\n         AIF   ('&RC' EQ '(R15)').R15\n.* * * * * * * *\n         AIF   ('&RC'(1,1) EQ '(').RCREG1 IF IN RX FORM  ..\n         AGO   .NS15A\n.RCREG1  ANOP                             ELSE, IN A REG ..\n         LR    15,&RC                     LOAD R15 WITH CODE\n         AGO   .R15\n.NS15A   ANOP\n.* * * * * * * *\n         RETURN (14,12),T,RC=&RC\n         AGO   .DUMM\n.R15     ANOP\n         RETURN (14,12),T\n.DUMM    ANOP\nMOWWORK  DSECT\nMOWWORKL EQU   *-MOWWORK\n&SYSECT  CSECT\n         AGO   .LTORG\n.NORENT  ANOP\n         L     13,&ARNAME.+4\n.RETR    L     14,12(13)\n         RETURN (2,12),T,RC=&RC\n.LTORG   LTORG\n         DS    0H                 FORCE TO HALFWORD BOUNDARY\n         MEND\n./ ADD NAME=MOWSTART 0100-03278-03278-0044-00170-00170-00000-AFIELD\n         MACRO\n&NAME    MOWSTART &SAVE=(14,12),&T=,&IDENT=*,&BASE=12,&EQU=YES,&RENT=, *\n               &R1=R1,&R2=R2,&R3=R3,&R4=R4,&R5=R5,&R6=R6,&RB=RB,       *\n               &R7=R7,&R8=R8,&R9=R9,&R10=R10,&R11=R11,&R12=R12,        *\n               &R13=R13,&R14=R14,&R15=R15,&R0=R0,&AREA=SAVEAREA,       *\n               &SP=0,&SAREA=,&STOR=RES\n.* CHANGED BY RMF SO PARM CAN BE PASSED IN R0\n.* CHANGED BY ACF TO ADD STOR TO CONTROL WHERE GETMAIN OCCURS. USE RU\n         GBLB  &NREN,&NSAR\n         GBLC  &MOWSECT,&SUBP,&ARNAME,&RBASE\n         LCLA  &WK\n         LCLC  &A,&B,&TC\n         LCLC  &R0L,&R1L,&R2L,&R3L,&R4L,&R5L,&R6L,&R7L,&R8L,&R9L,&R10L\n         LCLC  &R11L,&R12L,&R13L,&R14L,&R15L\n         AIF   ('&NAME' NE '').OK\n         MNOTE 16,'THERE MUST BE AN ENTRY IN THE NAME FIELD'\n         MEXIT\n.OK      ANOP\n&NREN    SETB  ('&RENT' EQ 'NO')\n&NSAR    SETB  ('&SAREA' EQ 'NO')\n&MOWSECT SETC  '&NAME'\n&RBASE   SETC  '&RB'\n&IDENTD  SETC  '&NAME._&SYSDATE._&SYSTIME'\n&NAME    CSECT\n         USING *,&BASE\n&TC      SETC  '&T'\n         AIF   ((&NREN) OR (&NSAR)).SAVO\n&A       SETC  '&SAVE(1)'\n         AIF   (N'&SAVE EQ 1).SAV1\n         AIF   (N'&SAVE NE 2).SAVE\n&B       SETC  '&SAVE(2)'\n.SAV1    AIF   (&A GE 3).NOTALL\n         AIF   ('&A' EQ '0').CHK1\n         AIF   (N'&SAVE EQ 2).SET0\n&B       SETC  '&A'\n         AGO   .SET0\n.CHK1    AIF   (N'&SAVE EQ 1).SET1\n         AIF   ('&B' NE '0').SET0\n.SET1    ANOP\n&B       SETC  '1'\n.SET0    ANOP\n         AIF   ('&TC' EQ 'T').SET14\n         SAVE  (0,&B),&TC,&IDENTD\n         AGO   .SAVT\n.SET14   SAVE  (14,&B),,&IDENTD\n         AGO   .SAVT\n.NOTALL  AIF   (&A GE 14).TEST2\n         SAVE  (0,1),&TC,&IDENTD\n         SAVE  &SAVE\n         AGO   .SAVT\n.TEST2   AIF   (N'&SAVE EQ 1).SB1\n         AIF   ((&B GE 1) AND (&B LE 12)).SAVE\n.SB1     ANOP\n&B       SETC  '1'\n.SAVE    AIF   ('&B' EQ '').SAVO\n         SAVE  (&SAVE(1),&B),&TC,&IDENTD\n         AGO   .SAVT\n.SAVO    SAVE  &SAVE,&TC,&IDENTD\n.SAVT    ANOP\n         LR    &BASE,15\n.*       B     *+4+16\n.*       DC    CL16'&SYSDATE._&SYSTIME.'\n         AIF   (&NSAR).CHKEQU\n         AIF   ('&RENT' EQ 'NO').NORENT\n&SUBP    SETC  '&SP'\n         GETMAIN RU,LV=MOWWORKL,SP=&SUBP,LOC=&STOR\n         ST    1,8(13)\n         ST    13,4(1)\n         LM    0,1,20(13)\n         L     13,8(13)\n         USING MOWWORK,13\nMOWWORK  DSECT\n         DS    18A\n&NAME    CSECT\n         AGO   .CHKEQU\n.NORENT  ST    13,&AREA+4\n         AIF   (&BASE EQ 3).SET4\n&WK      SETA  3\n         AGO   .LR\n.SET4    ANOP\n&WK      SETA  4\n.LR      LR    &WK,13\n         CNOP  0,4\n         BAL   13,*+76\n&ARNAME  SETC  '&AREA'\n&ARNAME  DC    18F'0'\n         ST    13,8(&WK)\n.CHKEQU  AIF   ('&EQU' NE 'YES').NOEQU\n&R0L     SETC  '&R0'(1,8)\n&R1L     SETC  '&R1'(1,8)\n&R2L     SETC  '&R2'(1,8)\n&R3L     SETC  '&R3'(1,8)\n&R4L     SETC  '&R4'(1,8)\n&R5L     SETC  '&R5'(1,8)\n&R6L     SETC  '&R6'(1,8)\n&R7L     SETC  '&R7'(1,8)\n&R8L     SETC  '&R8'(1,8)\n&R9L     SETC  '&R9'(1,8)\n&R10L    SETC  '&R10'(1,8)\n&R11L    SETC  '&R11'(1,8)\n&R12L    SETC  '&R12'(1,8)\n&R13L    SETC  '&R13'(1,8)\n&R14L    SETC  '&R14'(1,8)\n&R15L    SETC  '&R15'(1,8)\n         AIF   (&BASE NE 12).N12\n&R12L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N12     AIF   (&BASE NE  2).N2\n&R2L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N2      AIF   (&BASE NE  3).N3\n&R3L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N3      AIF   (&BASE NE  4).N4\n&R4L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N4      AIF   (&BASE NE  5).N5\n&R5L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N5      AIF   (&BASE NE  6).N6\n&R6L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N6      AIF   (&BASE NE  7).N7\n&R7L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N7      AIF   (&BASE NE  8).N8\n&R8L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N8      AIF   (&BASE NE  9).N9\n&R9L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N9      AIF   (&BASE NE 10).N10\n&R10L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N10     AIF   (&BASE NE 11).N11\n&R11L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N11     AIF   (&BASE NE 13).N13\n&R13L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N13     AIF   (&BASE NE 14).N14\n&R14L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N14     AIF   (&BASE NE 15).N15\n&R15L    SETC '&RB'(1,8)\n         AGO   .EQUS\n.N15     AIF   (&BASE NE  0).N0\n&R0L     SETC '&RB'(1,8)\n         AGO   .EQUS\n.N0      AIF   (&BASE NE  1).EQUS\n&R1L     SETC '&RB'(1,8)\n.EQUS    ANOP\n&R0L     EQU   0\n&R1L     EQU   1\n&R2L     EQU   2\n&R3L     EQU   3\n&R4L     EQU   4\n&R5L     EQU   5\n&R6L     EQU   6\n&R7L     EQU   7\n&R8L     EQU   8\n&R9L     EQU   9\n&R10L    EQU   10\n&R11L    EQU   11\n&R12L    EQU   12\n&R13L    EQU   13\n&R14L    EQU   14\n&R15L    EQU   15\n.NOEQU   ANOP\n         MEND\n./ ADD NAME=SETMODE  0100-03278-03278-0044-00022-00022-00000-AFIELD\n         MACRO\n&LABEL   SETMODE &AM\n.******************************************************************\n.* MACRO TO CHANGE ADDRESSING MODE FROM 31 BIT TO 24 BIT AND BACK *\n.* AGAIN. SEE SPL 31 BIT ADDRESSING.                              *\n.******************************************************************\n         AIF   ('&AM' NE '').OK\n         MNOTE 5,'MISSING OPERAND - 24 OR 31 MUST BE SPECIFIED'\n         MEXIT\n.OK      AIF   ('&LABEL' EQ '').B1\n&LABEL   EQU   *\n.B1      ANOP\n         AIF   ('&AM' EQ '31').AM31\n         LA    15,*+6                RESET TO 24-BIT\n         BSM   0,15                  ADDRESSING MODE\n         AGO   .END\n.AM31    ANOP\n         LA    15,*+10               ADDRESS PAST THE BSM\n         O     15,=A(X'80000000')    INDICATE &\n         BSM   0,15                  GET INTO 31-BIT ADDRESSING MODE\n.END     ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANELS": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x07\\x00\\x93\\x00\\x93\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:07:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "AFIELD"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PLI": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x16\\x014\\x014\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:16:00", "lines": 308, "newlines": 308, "modlines": 0, "user": "AFIELD"}, "text": "./ ADD NAME=SVTOC\n SVTOC: PROC (PARM) OPTIONS(MAIN);\n  /* TAKES IEHLIST LISTVTOC FORMAT OUTPUT AND REARRANGES IT TO SORT\n     BY CYL AND TRACK ADDRESS TO MAP PACK BY ADDRESS */\n  DCL PARM CHAR(100) VAR;\n  DCL P1 POINTER;\n  DCL LINE CHAR(121) BASED(P1);\n  DCL 1 IREC BASED(P1),\n        2 CC CHAR(1),\n        2 DSN CHAR(44),\n        2 F1 CHAR(43),\n        2 NOEXT CHAR(3),\n        2 F2 CHAR(5),\n        2 DSORG CHAR(3);\n  DCL 1 EXTREC BASED(P1),\n        2 CC CHAR(1),\n        2 F1 CHAR(21),\n        2 E1,\n          3 NUM1 PIC'ZZZ9',\n          3 E1A CHAR(24),\n        2 E2,\n          3 NUM2 PIC'ZZZ9',\n          3 E2A CHAR(24),\n        2 E3,\n          3 NUM3 PIC'ZZZ9',\n          3 E3A CHAR(24);\n  DCL 1 OREC,\n        2 NAM CHAR(44),\n        2 EXT,                  /* CHAR(28) */\n          3 NUM PIC'ZZ9',\n          3 F1 CHAR(1),\n          3 LCC PIC'ZZZ9',\n          3 F2 CHAR(2),\n          3 LHH PIC'Z9',\n          3 F3 CHAR(4),\n          3 UCC PIC'ZZZ9',\n          3 F4 CHAR(2),\n          3 UHH PIC'Z9',\n          3 F5 CHAR(1),\n          3 ORG CHAR(3),\n          3 F6 CHAR(1),\n        2 SEQ CHAR(7) INIT(' ');\n  DCL CYLS FIXED BIN(31,0);\n  DCL DASDSUB ENTRY OPTIONS(ASM INTER);\n  DCL 1 DEVCONS(5),\n        2 TYPE   CHAR(4)   INIT('3375','3380','3380','3380','0000'),\n        /*                              D,J     E      K */\n        2 DSCB   CHAR(2)   INIT(  '51',  '53',  '53',  '53',  '00'),\n        2 TRKEND PIC'99'   INIT(  '12',  '15',  '15',  '15',  '00'),\n        2 MAXCYL PIC'9999' INIT('0958','0884','1769','2654','0000');\n  DCL DEVIDX FIXED BIN(15,0);\n  DCL DSCBS FIXED BIN(31,0);\n  DCL HOLDORG CHAR(3);\n  DCL (ICYL,ITRK) FIXED BIN(31,0);\n  DCL IFREE FIXED BIN(31,0) INIT(0);\n  DCL IWORK FIXED BIN(31,0);\n  DCL PCC PIC'9999' INIT('0000');\n  DCL PHH PIC'99' INIT('01');        /* CYL 0, TRK 0 NOT AVAILABLE */\n  DCL RC FIXED BIN(31,0);\n  DCL TITLE CHAR(80) INIT('DATASET NAME                              EXT\n  #  LCC LHH     UCC UHH ORG  SPACE');\n  DCL TRKS FIXED BIN(31,0);\n  DCL TYPE CHAR(5);\n  DCL VOL CHAR(6);\n\n  ON ENDFILE(LIST) GO TO SORT;\n\n RD:\n  READ FILE(LIST) SET(P1);\n  IF SUBSTR(DSN,29,11) = 'VTOC ON VOL' THEN DO;\n     VOL = SUBSTR(LINE,42,6);\n     END;\n  IF SUBSTR(DSN,2,8) = 'FORMAT 4' THEN DO;\n     NAM = 'VOLUME TABLE OF CONTENTS FOR ' || VOL;\n     READ FILE(LIST) SET(P1);\n     STRING(EXT) = ' ';\n     READ FILE(LIST) SET(P1);\n\n     CALL DASDSUB(VOL,CYLS,TRKS,DSCBS,TYPE);\n     DEVIDX = 2;\n     IF TYPE = '3380E' THEN DEVIDX = 3;\n        ELSE IF TYPE = '3380K' THEN DEVIDX = 4;\n\n /*  IF SUBSTR(LINE,93,2) = '00' THEN SUBSTR(LINE,93,2) = '  '; */\n     LCC = SUBSTR(LINE,92,4);         /* VTOC EXTENTS */\n     LHH = SUBSTR(LINE,98,2);\n /*  IF SUBSTR(LINE,102,2) = '00' THEN SUBSTR(LINE,102,2) = '  '; */\n     UCC = SUBSTR(LINE,101,4);\n     UHH = SUBSTR(LINE,107,2);\n     WRITE FILE(SORTIN) FROM(OREC);\n     END;\n  IF (SUBSTR(DSN,1,1) \u00ac= ' ' & SUBSTR(DSN,1,1) \u00ac= '-') THEN DO;\n      NAM = DSN;\n      HOLDORG = DSORG;\n      END;\n  IF (SUBSTR(STRING(E1),1,4) = '  0 ' |\n      SUBSTR(STRING(E1),1,4) = '  3 ' |\n      SUBSTR(STRING(E1),1,4) = '  6 ' |\n      SUBSTR(STRING(E1),1,4) = '  9 ' |\n      SUBSTR(STRING(E1),1,4) = ' 12 ' |\n      SUBSTR(STRING(E1),1,4) = ' 15 ' |\n      SUBSTR(STRING(E1),1,4) = ' 16 ' |\n      SUBSTR(STRING(E1),1,4) = ' 19 ' |\n      SUBSTR(STRING(E1),1,4) = ' 22 ' |\n      SUBSTR(STRING(E1),1,4) = ' 25 ' |\n      SUBSTR(STRING(E1),1,4) = ' 28 ' |\n      SUBSTR(STRING(E1),1,4) = ' 31 ' |\n      SUBSTR(STRING(E1),1,4) = ' 34 ' |\n      SUBSTR(STRING(E1),1,4) = ' 37 ' |\n      SUBSTR(STRING(E1),1,4) = ' 40 ' |\n      SUBSTR(STRING(E1),1,4) = ' 43 ' |\n      SUBSTR(STRING(E1),1,4) = ' 46 ' |\n      SUBSTR(STRING(E1),1,4) = ' 49 ' |\n      SUBSTR(STRING(E1),1,4) = ' 52 ' |\n      SUBSTR(STRING(E1),1,4) = ' 55 ' |\n      SUBSTR(STRING(E1),1,4) = ' 58 ' |\n      SUBSTR(STRING(E1),1,4) = ' 61 ' |\n      SUBSTR(STRING(E1),1,4) = ' 64 ' |\n      SUBSTR(STRING(E1),1,4) = ' 67 ' |\n      SUBSTR(STRING(E1),1,4) = ' 70 ' |\n      SUBSTR(STRING(E1),1,4) = ' 73 ' |\n      SUBSTR(STRING(E1),1,4) = ' 76 ' |\n      SUBSTR(STRING(E1),1,4) = ' 79 ' |\n      SUBSTR(STRING(E1),1,4) = ' 82 ' |\n      SUBSTR(STRING(E1),1,4) = ' 85 ' |\n      SUBSTR(STRING(E1),1,4) = ' 88 ' |\n      SUBSTR(STRING(E1),1,4) = ' 91 ' |\n      SUBSTR(STRING(E1),1,4) = ' 94 ' |\n      SUBSTR(STRING(E1),1,4) = ' 97 ' |\n      SUBSTR(STRING(E1),1,4) = '100 ' |\n      SUBSTR(STRING(E1),1,4) = '103 ' |\n      SUBSTR(STRING(E1),1,4) = '106 ' |\n      SUBSTR(STRING(E1),1,4) = '109 ' |\n      SUBSTR(STRING(E1),1,4) = '112 ' |\n      SUBSTR(STRING(E1),1,4) = '115 ' |\n      SUBSTR(STRING(E1),1,4) = '118 ' |\n      SUBSTR(STRING(E1),1,4) = '121 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E1);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  IF (SUBSTR(STRING(E2),1,4) = '  1 ' |\n      SUBSTR(STRING(E2),1,4) = '  4 ' |\n      SUBSTR(STRING(E2),1,4) = '  7 ' |\n      SUBSTR(STRING(E2),1,4) = ' 10 ' |\n      SUBSTR(STRING(E2),1,4) = ' 13 ' |\n      SUBSTR(STRING(E2),1,4) = ' 17 ' |\n      SUBSTR(STRING(E2),1,4) = ' 20 ' |\n      SUBSTR(STRING(E2),1,4) = ' 23 ' |\n      SUBSTR(STRING(E2),1,4) = ' 26 ' |\n      SUBSTR(STRING(E2),1,4) = ' 29 ' |\n      SUBSTR(STRING(E2),1,4) = ' 32 ' |\n      SUBSTR(STRING(E2),1,4) = ' 35 ' |\n      SUBSTR(STRING(E2),1,4) = ' 38 ' |\n      SUBSTR(STRING(E2),1,4) = ' 41 ' |\n      SUBSTR(STRING(E2),1,4) = ' 44 ' |\n      SUBSTR(STRING(E2),1,4) = ' 47 ' |\n      SUBSTR(STRING(E2),1,4) = ' 50 ' |\n      SUBSTR(STRING(E2),1,4) = ' 53 ' |\n      SUBSTR(STRING(E2),1,4) = ' 56 ' |\n      SUBSTR(STRING(E2),1,4) = ' 59 ' |\n      SUBSTR(STRING(E2),1,4) = ' 62 ' |\n      SUBSTR(STRING(E2),1,4) = ' 65 ' |\n      SUBSTR(STRING(E2),1,4) = ' 68 ' |\n      SUBSTR(STRING(E2),1,4) = ' 71 ' |\n      SUBSTR(STRING(E2),1,4) = ' 74 ' |\n      SUBSTR(STRING(E2),1,4) = ' 77 ' |\n      SUBSTR(STRING(E2),1,4) = ' 80 ' |\n      SUBSTR(STRING(E2),1,4) = ' 83 ' |\n      SUBSTR(STRING(E2),1,4) = ' 86 ' |\n      SUBSTR(STRING(E2),1,4) = ' 89 ' |\n      SUBSTR(STRING(E2),1,4) = ' 92 ' |\n      SUBSTR(STRING(E2),1,4) = ' 95 ' |\n      SUBSTR(STRING(E2),1,4) = ' 98 ' |\n      SUBSTR(STRING(E2),1,4) = '101 ' |\n      SUBSTR(STRING(E2),1,4) = '104 ' |\n      SUBSTR(STRING(E2),1,4) = '107 ' |\n      SUBSTR(STRING(E2),1,4) = '110 ' |\n      SUBSTR(STRING(E2),1,4) = '113 ' |\n      SUBSTR(STRING(E2),1,4) = '116 ' |\n      SUBSTR(STRING(E2),1,4) = '119 ' |\n      SUBSTR(STRING(E2),1,4) = '122 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E2);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  IF (SUBSTR(STRING(E3),1,4) = '  2 ' |\n      SUBSTR(STRING(E3),1,4) = '  5 ' |\n      SUBSTR(STRING(E3),1,4) = '  8 ' |\n      SUBSTR(STRING(E3),1,4) = ' 11 ' |\n      SUBSTR(STRING(E3),1,4) = ' 14 ' |\n      SUBSTR(STRING(E3),1,4) = ' 18 ' |\n      SUBSTR(STRING(E3),1,4) = ' 21 ' |\n      SUBSTR(STRING(E3),1,4) = ' 24 ' |\n      SUBSTR(STRING(E3),1,4) = ' 27 ' |\n      SUBSTR(STRING(E3),1,4) = ' 30 ' |\n      SUBSTR(STRING(E3),1,4) = ' 33 ' |\n      SUBSTR(STRING(E3),1,4) = ' 36 ' |\n      SUBSTR(STRING(E3),1,4) = ' 39 ' |\n      SUBSTR(STRING(E3),1,4) = ' 42 ' |\n      SUBSTR(STRING(E3),1,4) = ' 45 ' |\n      SUBSTR(STRING(E3),1,4) = ' 48 ' |\n      SUBSTR(STRING(E3),1,4) = ' 51 ' |\n      SUBSTR(STRING(E3),1,4) = ' 54 ' |\n      SUBSTR(STRING(E3),1,4) = ' 57 ' |\n      SUBSTR(STRING(E3),1,4) = ' 60 ' |\n      SUBSTR(STRING(E3),1,4) = ' 63 ' |\n      SUBSTR(STRING(E3),1,4) = ' 66 ' |\n      SUBSTR(STRING(E3),1,4) = ' 69 ' |\n      SUBSTR(STRING(E3),1,4) = ' 72 ' |\n      SUBSTR(STRING(E3),1,4) = ' 75 ' |\n      SUBSTR(STRING(E3),1,4) = ' 78 ' |\n      SUBSTR(STRING(E3),1,4) = ' 81 ' |\n      SUBSTR(STRING(E3),1,4) = ' 84 ' |\n      SUBSTR(STRING(E3),1,4) = ' 87 ' |\n      SUBSTR(STRING(E3),1,4) = ' 90 ' |\n      SUBSTR(STRING(E3),1,4) = ' 93 ' |\n      SUBSTR(STRING(E3),1,4) = ' 96 ' |\n      SUBSTR(STRING(E3),1,4) = ' 99 ' |\n      SUBSTR(STRING(E3),1,4) = '102 ' |\n      SUBSTR(STRING(E3),1,4) = '103 ' |\n      SUBSTR(STRING(E3),1,4) = '108 ' |\n      SUBSTR(STRING(E3),1,4) = '111 ' |\n      SUBSTR(STRING(E3),1,4) = '114 ' |\n      SUBSTR(STRING(E3),1,4) = '117 ' |\n      SUBSTR(STRING(E3),1,4) = '120 ' |\n      SUBSTR(STRING(E3),1,4) = '123 ' ) & EXTREC.F1 = ' ' THEN DO;\n        STRING(EXT) = STRING(E3);\n        ORG = HOLDORG;\n        WRITE FILE(SORTIN) FROM(OREC);\n        END;\n  GO TO RD;\n- SORT:\n  CLOSE FILE(SORTIN);\n  PUT FILE(SYSPRINT) EDIT(TITLE) (A);\n- CALL PLISRTC(' SORT FIELDS=(49,4,CH,A,55,3,CH,A) ',\n               ' RECORD TYPE=F,LENGTH=(80) ',\n               128000,\n               RC,\n               E35A);\n\n1 E35A: PROC(DATA);\n    DCL DATA CHAR(80);\n    DCL 1 SREC LIKE OREC;\n    STRING(SREC) = DATA;\n    IF (SREC.LCC > PCC |\n        SREC.LHH > PHH) THEN DO;\n       IFREE = IFREE + 1;\n       ICYL = SREC.LCC - PCC;     /* NO CYLS IN FREE EXT */\n       ITRK = SREC.LHH - PHH;     /* NO TRKS IN FREE EXT */\n       ITRK = (ICYL * DEVCONS.TRKEND(DEVIDX)) + ITRK;\n       PUT FILE(SYSPRINT) EDIT ('FREE SPACE ===>',ITRK,' TRKS',IFREE)\n          (SKIP,A(30),F(5),A(5),X(5),F(2));\n       END;\n\n    ITRK = ((SREC.UCC * DEVCONS.TRKEND(DEVIDX)) + SREC.UHH) -\n              ((SREC.LCC * DEVCONS.TRKEND(DEVIDX)) + SREC.LHH) + 1;\n    PUT STRING(SUBSTR(DATA,74,6)) EDIT(ITRK) (F(6));\n    IF INDEX(PARM,'HEX') > 0 THEN DO;\n       IWORK = LCC;\n       SUBSTR(DATA,49,4) = TOHEX(IWORK);\n       IWORK = LHH;\n       SUBSTR(DATA,53,4) = TOHEX(IWORK);\n       IWORK = UCC;\n       SUBSTR(DATA,61,4) = TOHEX(IWORK);\n       IWORK = UHH;\n       SUBSTR(DATA,65,4) = TOHEX(IWORK);\n       END;\n    PUT FILE(SYSPRINT) EDIT(DATA) (SKIP,A);\n    PCC = SREC.UCC;\n    PHH = SREC.UHH + 1;\n    IF PHH = DEVCONS.TRKEND(DEVIDX) THEN DO;\n       PCC = PCC + 1;\n       PHH = 0;\n       END;\n    CALL PLIRETC(4);   /* GET NEXT RCD FROM SORT */\n    RETURN;\n    END E35A;\n\n1 TOHEX: PROC(A) RETURNS(CHAR(4));\n    /* THIS PROC TAKES A BINARY FULLWORD AND CONVERTS\n       TO PRINTABLE CHARACTERS IN HEX                           */\n    DCL C CHAR(4) VAR INIT(''), (A,I,AD) FIXED BIN(31),\n    HEX(0:15) CHAR(1) INIT('0','1','2','3','4','5','6','7',\n    '8','9','A','B','C','D','E','F'),\n    MOD BUILTIN;\n    AD = A;\n    DO I = 1 TO 4;\n         C = HEX(MOD(AD,16))||C;\n         AD = AD / 16;\n         END;\n    RETURN(C);\n    END TOHEX;\n\n1  /* SPECIAL CASE - FREE TO END OF PACK */\n   IF (PCC < DEVCONS.MAXCYL(DEVIDX) |\n       PHH < DEVCONS.TRKEND(DEVIDX)) THEN DO;\n       IFREE = IFREE + 1;\n       ICYL = DEVCONS.MAXCYL(DEVIDX) - PCC; /* NO CYLS IN FREE EXT */\n       ITRK = DEVCONS.TRKEND(DEVIDX) - PHH; /* NO TRKS IN FREE EXT */\n       ITRK = (ICYL * DEVCONS.TRKEND(DEVIDX)) + ITRK;\n       IF ITRK > 0 THEN\n         PUT FILE(SYSPRINT) EDIT ('FREE SPACE ===>',ITRK,' TRKS',IFREE)\n         (SKIP,A(30),F(5),A(5),X(5),F(2));\n       END;\n\n  CALL PLIRETC(0);\n  END SVTOC;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERMODS": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x03'\\x7f\\x01\\x03'\\x7f!\\x07\\x00I\\x00I\\x00\\x00\\xc1\\xc6\\xc9\\xc5\\xd3\\xc4@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-04T00:00:00", "modifydate": "2003-10-04T21:07:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "AFIELD"}, "text": "./        ADD LIST=ALL,NAME=LM00026\n++ USERMOD (LM00026) REWORK(2003001)\n       /* TEST LIST COMMAND. DC GENERATION FOR INVALID OP-CODE */ .\n++ VER (Z038) FMID(HTE7706)\n                    .\n++ ZAP (IKJEGLSA) .\n* THIS VERSION FOR TSO/E FOR Z/OS 1.4\n*\n* WHEN REWORKING THIS ZAP BE SURE TO CHECK THE OFFSETS IN THE\n* IN THE INSTRUCTIONS FLAGGED WITH <---*.\n*\nNAME IKJEGLSA IKJEGLSA\nVER 0D2C 12FF,4770,B093              B?    LISTI80\nVER 178A E9E9,E9E9,E9E9,E9E9         PATCH AREA\nREP 0D2C 47F0,B78B,0700              B     TO THE FOLLOWING CODE\n*\nREP 178A 55F0,B5A5                   CL    R15,FFOUR          <---*\nREP 178E 4740,B7C9                   BL    GOBACK\nREP 1792 4720,B093                   BH    LISTI80            <---*\nREP 1796 D207,6004,B7C1              MVC   4(8,R6),DC\nREP 179C 58F0,A07C                   L     R15,VPDEPT\nREP 17A0 F342,600C,F000              UNPK  12(5,R6),0(3,R15)\nREP 17A6 DC03,600C,B689              TR    12(4,R6),TRTAB-240\nREP 17AC 927D,6010                   MVI   16(R6),C''''\nREP 17B0 41FF,0002                   LA    R15,2(R15)\nREP 17B4 4133,0002                   LA    R3,2(R3)\nREP 17B8 4166,0011                   LA    R6,17(R6)\nREP 17BC 47F0,CDA4                   B     LISTI70    (C R3,.)<---*\nREP 17C0 C4C340404040E77D    DC      DC    C'DC    X'''\nREP 17C8 12FF                GOBACK  LTR   R15,R15\nREP 17CA 4770,B093                   BNZ   LISTI80            <---*\nREP 17CE 47F0,CD32                   B     BACK TO WHERE WE CAME FROM\n./        ADD LIST=ALL,NAME=LM00031\n++ USERMOD (LM00031)        REWORK(2003001)\n       /* MODIFY CONSOLE MSG IEE163I MODE= ...\n          THIS VERSION SUPPORTS A 4 DIGIT UCB ADDRESS FOR SYSRES\n       */ .\n++ VER (Z038) FMID(HBB7707) .\n++ ZAP (IEECVETD) .\n* MOD TO CHANGE CONSOLE IEE163I MODE= MESSAGE FOR NEAT INFO\n*\n* BECAUSE OF THE WAY BASE REGISTER IS SET UP, BRANCH TARGET ADDRESSES\n* ARE 2 BYTES LESS THAN THE ACTUAL ADDRESS\n*\nNAME IEECVET1 IEECVETD\n EXPAND IEECVETD(64)\nVER 0316 9108,C02A\nVER 0548 5C5C,40D7                  ** PATCH AREA\n*\nREP 0316 47F0,A546           <---   B     PATCH AREA\nREP 0548 41F0,A550           <---   LA    R15,*+10     31 BIT ADDR\nREP 054C 56F0,A596           <---   O     R15,=A(X'80000000')\nREP 0550 0B0F                       BSM   R0,R15\nREP 0552 58E0,0010                  L     R14,16\nREP 0556 58F0,E030                  L     R15,48(,R14)\nREP 055A 9260,2010                  MVI   16(R2),C'-'\nREP 055E D205,2011,F01C             MVC   17(6,R2),28(R15) SYSRES\nREP 0564 9261,2017                  MVI   23(R2),C'/'\nREP 0568 F342,2018,F004             UNPK  24(5,R2),4(3,R15)\nREP 056E 41F0,A572           <---   LA    R15,*+6          24 BIT MODE\nREP 0572 0B0F                       BSM   R0,R15\nREP 0574 D403,2018,A5AA      <---   NC    24(4,R2),=X'0F0F0F0F'\nREP 057A DC03,2018,A59A      <---   TR    24(4,R2),=C'0123456789ABCDEF'\nREP 0580 9260,201C                  MVI   28(R2),C'-'\nREP 0584 41F0,0028                  LA    R15,40\nREP 0588 1BEF                       SR    R14,R15\nREP 058A D207,201D,E000             MVC   29(8,R2),0(R14)  VERSION\nREP 0590 9108,C02A                  TM    42(,R12),X'08'\nREP 0594 47F0,A318           <---   B     792(,R10)\nREP 0598 8000,0000                  =A(X'80000000')\nREP 059C F0F1,F2F3,F4F5,F6F7        =C'01234567'\nREP 05A4 F8F9,C1C2,C3C4,C5C6        =C'89ABCDEF'\nREP 05AC 0F0F,0F0F                  =X'0F0F0F0F'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT066/FILE066.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT066", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}