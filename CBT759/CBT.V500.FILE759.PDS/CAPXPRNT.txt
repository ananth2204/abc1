*---------------------------------------------------------------------*
*                                                                     *
*                         C A P X P R N T                             *
*                         = = = = = = = =                             *
*                                                                     *
* This routine prints the MQ api details captured by CSQCAPX. Output  *
* is written to an extrapartition TDQ the name of which is supplied   *
* via INITPARM.                                                       *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* Copyright (C) 2007  Kevin Wailes                                    *
*                                                                     *
* This program is free software; you can redistribute it and/or modify*
* it under the terms of the GNU General Public License as published by*
* the Free Software Foundation; either version 2 of the License, or   *
* (at your option) any later version.                                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License for more details.                        *
*                                                                     *
* You should have received a copy of the GNU General Public License   *
* along with this program; if not, write to the Free Software         *
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            *
* 02111-1307  USA                                                     *
*                                                                     *
* Author:                                                             *
* Kevin Wailes <kevin.wailes@yahoo.com>                               *
*                                                                     *
*---------------------------------------------------------------------*
         DFHREGS                        REGISTER EQUATES
*
         CMQXPA LIST=YES
         CMQODA LIST=YES,DSECT=YES
         CMQMDA LIST=YES,DSECT=YES
         CMQGMOA LIST=YES,DSECT=YES
         CMQPMOA LIST=YES,DSECT=YES
*
* Input area
*
INPUT_AREA       DSECT
*
* Fixed part
*
TIMESTAMP        DS  D
TASK             DS  PL4
TRAN             DS  CL4
MQCALL           DS  F
WHEN             DS  F
HCONN            DS  F
HOBJ             DS  F
OPTIONS          DS  F
COMPCODE         DS  F
REASON           DS  F
BUFFER_LENGTH    DS  F
DATA_LENGTH      DS  F
BUFFER           DS  CL512
*
FIXED_LENGTH     EQU *-INPUT_AREA
*
* Variable part
*
VARIABLE         DS  0C
*
* MQOPEN
*
MQOPEN_ODA       DS  CL(MQOD_LENGTH)
MQOPEN_LENGTH    EQU *-VARIABLE
*
* MQGET
*
                 ORG VARIABLE
MQGET_MDA        DS  CL(MQMD_LENGTH)
MQGET_GMOA       DS  CL(MQGMO_LENGTH)
MQGET_LENGTH     EQU *-VARIABLE
*
* MQPUT
*
                 ORG VARIABLE
MQPUT_MDA        DS   CL(MQMD_LENGTH)
MQPUT_PMOA       DS   CL(MQPMO_LENGTH)
MQPUT_LENGTH     EQU *-VARIABLE
*
* MQPUT1
*
                 ORG VARIABLE
MQPUT1_ODA        DS  CL(MQOD_LENGTH)
MQPUT1_MDA        DS   CL(MQMD_LENGTH)
MQPUT1_PMOA       DS   CL(MQPMO_LENGTH)
MQPUT1_LENGTH     EQU *-VARIABLE
*
                 ORG
*
* Working storage
*
DFHEISTG DSECT
*
SAVEREGS DS     16F                  Register save area
SAVEREG1 DS     16F                  Register save area
SAVEREG2 DS     16F                  Register save area
SAVEREG3 DS     16F                  Register save area
*
RESP     DS     F
RESP2    DS     F
FULLWORD DS     F
DECIMAL  DS     PL8
*
OUTPUT_LENGTH DS H
ITEM          DS H
LENGTH        DS H
*
TRIGGER       DS CL4
REASON_TEXT   DS CL8
TRACE_LENGTH DS  F
*
WRITEQ_LENGTH   DS     AL2           Writeq TD length
*
PRINT_FLAG DS CL1
NUMBER_FLAG DS CL1
*
INITPARM         DS  CL60
                 ORG INITPARM
TDQNAME          DS  CL4
                 ORG
*
* Output area
*
LINEOUT          DS  CL128
                 ORG LINEOUT
LINEOUT_DATE     DS  CL10
                 DS  CL1
LINEOUT_TIME     DS  CL8
                 DS  CL1
LINEOUT_TRAN     DS  CL4
                 DS  CL1
LINEOUT_TASK     DS  CL8
                 DS  CL1
LINEOUT_RESOURCE DS  CL8
                 DS  CL1
LINEOUT_OFFSET   DS  CL8
                 DS  CL1
LINEOUT_CHAR     DS  CL16
                 DS  CL1
LINEOUT_HEX      DS  CL32
                 ORG
*
* Here we go, here we go, here we go
*
CAPXPRNT RMODE  ANY
CAPXPRNT AMODE  31
CAPXPRNT DFHEIENT EIBREG=(R10),CODEREG=(R11,R12),DATAREG=(R13)
*
* get our tdq name
*
         EXEC CICS ASSIGN INITPARM(INITPARM) INITPARMLEN(LENGTH)       X
               QNAME(TRIGGER) RESP(RESP) RESP2(RESP2)
         CLC   LENGTH,FOUR
         BE    READ_TDQ
         MVC   TDQNAME,MQTR
*
READ_TDQ    DS 0H
*
* READ A QUEUE ENTRY
*
         EXEC CICS READQ TD QUEUE(TRIGGER) SET(R9)  LENGTH(LENGTH)     X
               RESP(RESP) RESP2(RESP2)
         CLC   RESP,DFHRESP(NORMAL)
         BNE   THATS_ALL_FOLKS
         USING INPUT_AREA,R9
*
         CLC   WHEN,BEFORE             'BEFORE' CALL
         BNE   NOT_BEFORE               NO
         MVC   REASON_TEXT,BEFORE_TEXT       MOVE 'BEFORE' TO REASON
         B     WHAT_CALL                GO AND PROCESS THE CALL
NOT_BEFORE DS  0H
         CLC   WHEN,AFTER              'AFTER' CALL
         BNE   THATS_ALL_FOLKS          NO - LEAVE NOW
         MVC   REASON_TEXT,AFTER_TEXT        MOVE 'AFTER' TO REASON
*
WHAT_CALL DS    0H
         LA    R2,MQI_CALLS             GET ADDRESS OF CALLS TABLE
MQICALL_LOOP DS 0H
         CLC   0(4,R2),NO_MORE          REACHED THE END?
         BE    THATS_ALL_FOLKS          YES - THEN GET OUT NOW
         CLC   0(4,R2),MQCALL           IS THIS OUR CALL
         BE    GOT_MQI_CALL             YES - GO TO PROCESS IT
         LA    R2,MQICALLS_LENGTH(R2)   NEXT ENTRY
         B     MQICALL_LOOP             AND ROUND WE GO
GOT_MQI_CALL DS 0H
         L     R15,4(R2)                GET PROCESS ROUTINE ADDRESS
         BALR  R14,R15                  GO FOR IT
         B     READ_TDQ
*
* EXIT FROM THE PROGRAM
*
THATS_ALL_FOLKS DS 0H
         EXEC  CICS RETURN
*
*         MQOPEN
*
MQI_OPEN  DS   0F
          STM  R0,R15,SAVEREGS
          BAL  R14,WRITE_TRACE_SEPERATOR
          MVI   PRINT_FLAG,C'Y'
          LA   R1,8
          ST   R1,TRACE_LENGTH
          LA   R2,CSQCAPX_MQOPEN
          LA   R3,REASON_TEXT
          BAL  R14,WRITE_TRACE_ENTRY
          MVI   PRINT_FLAG,C' '
* HCONN     DS      F  CONNECTION HANDLE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,HCONN
          LA   R3,RESOURCE_HCONN
          BAL  R14,WRITE_TRACE_ENTRY
* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR
          LA   R2,MQOPEN_ODA
          LA   R1,MQOD_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQODA
          BAL  R14,WRITE_TRACE_ENTRY
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,OPTIONS
          LA   R3,RESOURCE_OPTIONS
          BAL  R14,WRITE_TRACE_ENTRY
          LA   R2,OPTIONS
          LA   R4,OPEN_OPTIONS
          BAL  R14,DECODE_OPTIONS
* HOBJ      DS      F  OBJECT HANDLE
          LA   R2,HOBJ
          LA   R3,RESOURCE_HOBJ
          BAL  R14,WRITE_TRACE_ENTRY
* COMPCODE  DS      F  COMPLETION CODE
          MVI  NUMBER_FLAG,C'Y'
          LA   R2,COMPCODE
          LA   R3,RESOURCE_COMPCODE
          BAL  R14,WRITE_TRACE_ENTRY
* REASON    DS      F  REASON CODE QUALIFYING COMPCODE
          LA   R2,REASON
          LA   R3,RESOURCE_REASON
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
          LM   R0,R15,SAVEREGS
          BR   R14
*
* MQCLOSE
*
MQI_CLOSE  DS   0F
          STM  R0,R15,SAVEREGS
          BAL  R14,WRITE_TRACE_SEPERATOR
          MVI   PRINT_FLAG,C'Y'
          LA   R1,8
          ST   R1,TRACE_LENGTH
          LA   R2,CSQCAPX_MQCLOSE
          LA   R3,REASON_TEXT
          BAL  R14,WRITE_TRACE_ENTRY
          MVI   PRINT_FLAG,C' '
* HCONN     DS  F  CONNECTION HANDLE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,HCONN
          LA   R3,RESOURCE_HCONN
          BAL  R14,WRITE_TRACE_ENTRY
* HOBJ      DS  F  OBJECT HANDLE
          LA   R2,HOBJ
          LA   R3,RESOURCE_HOBJ
          BAL  R14,WRITE_TRACE_ENTRY
* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE
          LA   R2,OPTIONS
          LA   R3,RESOURCE_OPTIONS
          BAL  R14,WRITE_TRACE_ENTRY
          LA   R2,OPTIONS
          LA   R4,OPEN_OPTIONS
          BAL  R14,DECODE_OPTIONS
* COMPCODE  DS  F  COMPLETION CODE
          MVI  NUMBER_FLAG,C'Y'
          LA   R2,COMPCODE
          LA   R3,RESOURCE_COMPCODE
          BAL  R14,WRITE_TRACE_ENTRY
* REASON    DS  F  REASON CODE QUALIFYING COMPCODE
          LA   R2,REASON
          LA   R3,RESOURCE_REASON
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
          LM   R0,R15,SAVEREGS
          BR   R14
*
*         MQGET
*
MQI_GET   DS   0F
          STM  R0,R15,SAVEREGS
          BAL  R14,WRITE_TRACE_SEPERATOR
          MVI   PRINT_FLAG,C'Y'
          LA   R1,8
          ST   R1,TRACE_LENGTH
          LA   R2,CSQCAPX_MQGET
          LA   R3,REASON_TEXT
          BAL  R14,WRITE_TRACE_ENTRY
          MVI   PRINT_FLAG,C' '
* HCONN         DS       F    CONNECTION HANDLE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,HCONN
          LA   R3,RESOURCE_HCONN
          BAL  R14,WRITE_TRACE_ENTRY
* HOBJ          DS       F    OBJECT HANDLE
          LA   R2,HOBJ
          LA   R3,RESOURCE_HOBJ
          BAL  R14,WRITE_TRACE_ENTRY
* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR
          LA   R2,MQGET_MDA
          LA   R1,MQMD_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQMDA
          BAL  R14,WRITE_TRACE_ENTRY
* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET
          LA   R2,MQGET_GMOA
          LA   R1,MQGMO_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQGMOA
          BAL  R14,WRITE_TRACE_ENTRY
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQGET
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R1,MQGET_GMOA
          USING MQGMO,R1
          LA   R2,MQGMO_OPTIONS
          LA   R3,RESOURCE_OPTIONS
          BAL  R14,WRITE_TRACE_ENTRY
          LA   R1,MQGET_GMOA
          LA   R2,MQGMO_OPTIONS
          DROP R1
          LA   R4,GET_OPTIONS
          BAL  R14,DECODE_OPTIONS
* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,BUFFER_LENGTH
          LA   R3,RESOURCE_BUFLEN
          BAL  R14,WRITE_TRACE_ENTRY
* DATALENGTH    DS       F    LENGTH OF THE MESSAGE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,DATA_LENGTH
          LA   R3,RESOURCE_DATALEN
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA
          L    R1,DATA_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R2,BUFFER
          LA   R3,RESOURCE_BUFFER
          BAL  R14,WRITE_TRACE_ENTRY
* COMPCODE      DS       F    COMPLETION CODE
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,COMPCODE
          LA   R3,RESOURCE_COMPCODE
          BAL  R14,WRITE_TRACE_ENTRY
* REASON        DS       F    REASON CODE QUALIFYING COMPCODE
          LA   R2,REASON
          LA   R3,RESOURCE_REASON
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
          LM   R0,R15,SAVEREGS
          BR   R14
*
*         MQPUT
*
MQI_PUT   DS   0F
          STM  R0,R15,SAVEREGS
          BAL  R14,WRITE_TRACE_SEPERATOR
          MVI   PRINT_FLAG,C'Y'
          LA   R1,8
          ST   R1,TRACE_LENGTH
          LA   R2,CSQCAPX_MQPUT
          LA   R3,REASON_TEXT
          BAL  R14,WRITE_TRACE_ENTRY
          MVI   PRINT_FLAG,C' '
* HCONN         DS       F     CONNECTION HANDLE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,HCONN
          LA   R3,RESOURCE_HCONN
          BAL  R14,WRITE_TRACE_ENTRY
* HOBJ          DS       F     OBJECT HANDLE
          LA   R2,HOBJ
          LA   R3,RESOURCE_HOBJ
          BAL  R14,WRITE_TRACE_ENTRY
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
          LA   R2,MQPUT_MDA
          LA   R1,MQMD_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQMDA
          BAL  R14,WRITE_TRACE_ENTRY
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
          LA   R2,MQPUT_PMOA
          LA   R1,MQPMO_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQPMOA
          BAL  R14,WRITE_TRACE_ENTRY
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQPUT
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R1,MQPUT_PMOA
          USING MQPMO,R1
          LA   R2,MQPMO_OPTIONS
          LA   R3,RESOURCE_OPTIONS
          BAL  R14,WRITE_TRACE_ENTRY
          LA   R1,MQPUT_PMOA
          LA   R2,MQPMO_OPTIONS
          DROP R1
          LA   R4,PUT_OPTIONS
          BAL  R14,DECODE_OPTIONS
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,BUFFER_LENGTH
          LA   R3,RESOURCE_BUFLEN
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
* BUFFER        DS       CL(N) MESSAGE DATA
          L    R1,BUFFER_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R2,BUFFER
          LA   R3,RESOURCE_BUFFER
          BAL  R14,WRITE_TRACE_ENTRY
* COMPCODE      DS       F     COMPLETION CODE
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,COMPCODE
          LA   R3,RESOURCE_COMPCODE
          BAL  R14,WRITE_TRACE_ENTRY
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
          LA   R2,REASON
          LA   R3,RESOURCE_REASON
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
          LM   R0,R15,SAVEREGS
          BR   R14
*
*         MQPUT1
*
MQI_PUT1  DS   0F
          STM  R0,R15,SAVEREGS
          BAL  R14,WRITE_TRACE_SEPERATOR
          MVI   PRINT_FLAG,C'Y'
          LA   R1,8
          ST   R1,TRACE_LENGTH
          LA   R2,CSQCAPX_MQPUT
          LA   R3,REASON_TEXT
          BAL  R14,WRITE_TRACE_ENTRY
          MVI   PRINT_FLAG,C' '
* HCONN         DS       F     CONNECTION HANDLE
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,HCONN
          LA   R3,RESOURCE_HCONN
          BAL  R14,WRITE_TRACE_ENTRY
* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR
          LA   R1,MQOD_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQPMOA
          LA   R2,MQPUT1_ODA
          LA   R3,RESOURCE_HOBJ
          BAL  R14,WRITE_TRACE_ENTRY
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
          LA   R2,MQPUT1_MDA
          LA   R1,MQMD_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQMDA
          BAL  R14,WRITE_TRACE_ENTRY
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
          LA   R2,MQPUT1_PMOA
          LA   R1,MQPMO_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_CMQPMOA
          BAL  R14,WRITE_TRACE_ENTRY
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQPUT
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R1,MQPUT1_PMOA
          USING MQPMO,R1
          LA   R2,MQPMO_OPTIONS
          LA   R3,RESOURCE_OPTIONS
          BAL  R14,WRITE_TRACE_ENTRY
          LA   R1,MQPUT1_PMOA
          LA   R2,MQPMO_OPTIONS
          DROP R1
          LA   R4,PUT_OPTIONS
          BAL  R14,DECODE_OPTIONS
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,BUFFER_LENGTH
          LA   R3,RESOURCE_BUFLEN
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
* BUFFER        DS       CL(N) MESSAGE DATA
          LA   R2,BUFFER
          L    R1,BUFFER_LENGTH
          ST   R1,TRACE_LENGTH
          LA   R3,RESOURCE_BUFFER
          BAL  R14,WRITE_TRACE_ENTRY
* COMPCODE      DS       F     COMPLETION CODE
          MVI  NUMBER_FLAG,C'Y'
          LA   R1,4
          ST   R1,TRACE_LENGTH
          LA   R2,COMPCODE
          LA   R3,RESOURCE_COMPCODE
          BAL  R14,WRITE_TRACE_ENTRY
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
          LA   R2,REASON
          LA   R3,RESOURCE_REASON
          BAL  R14,WRITE_TRACE_ENTRY
          MVI  NUMBER_FLAG,C' '
          LM   R0,R15,SAVEREGS
          BR   R14
*
* write a seperator line to the trace
*
WRITE_TRACE_SEPERATOR DS 0H
          STM  R0,R15,SAVEREG1
          MVI   LINEOUT,C'-'
          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT
          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH
          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X
                LENGTH(WRITEQ_LENGTH)                                  X
                RESP(RESP) RESP2(RESP2)
          LM   R0,R15,SAVEREG1
          BR    R14
*
*-------------------------------------------------------------*
* write a trace entry                                         *
* RESOURCE NAME COMES IN R3 FOR A LENGTH OF 8                 *
* DATA TO BE PRINTED COMES IN R2 FOR A LENGTH IN LENGTH       *
*-------------------------------------------------------------*
WRITE_TRACE_ENTRY DS 0H
          STM  R0,R15,SAVEREG1
          MVI   LINEOUT,C' '
          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT
          CLI   PRINT_FLAG,C'Y'
          BNE   NO_HEADINGS
          EXEC CICS FORMATTIME ABSTIME(TIMESTAMP)                      X
                DDMMYYYY(LINEOUT_DATE)                                 X
                TIME(LINEOUT_TIME) DATESEP('/') TIMESEP(':')           X
                RESP(RESP) RESP2(RESP2)
          MVC   LINEOUT_TRAN,TRAN        Move in Tranid
          UNPK  LINEOUT_TASK,TASK        move in task number
          OI    LINEOUT_TASK+7,X'F0'     zap the last byte
NO_HEADINGS DS 0H
          MVC   LINEOUT_RESOURCE,0(R3)   move in the resource text
          XR    R4,R4                    clear offset
          L     R5,TRACE_LENGTH          get length of area
          CH    R5,MAX_LENGTH
          BNH   TRACE_LOOP
          LH    R5,MAX_LENGTH
TRACE_LOOP DS   0H
          CHI   R5,16                    do we have at least 16
          BNH   TRACE_LOOP_DONE          no - we're done
*
          ST    R4,FULLWORD              save offset
          LA    R7,FULLWORD              get address of saved offset
          LA    R8,LINEOUT_OFFSET        get address of output field
          LA    R3,4                     set length
          BAL   R14,CONVERT_TO_HEX       convert it
          TR    LINEOUT_OFFSET,CHAR2HEX  finish the conversion
*
          MVC   LINEOUT_CHAR,0(R2)       move to char area
          TR    LINEOUT_CHAR,PRINTABLES  translate to printables
*
          LR    R7,R2                    get address of area
          LA    R8,LINEOUT_HEX           get address of hex output
          LA    R3,16                    set length
          BAL   R14,CONVERT_TO_HEX       convert to hex
          TR    LINEOUT_HEX,CHAR2HEX     finish conversion
*
          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH set length for writeq
          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X
                LENGTH(WRITEQ_LENGTH)                                  X
                RESP(RESP) RESP2(RESP2)
*
          MVI   LINEOUT,C' '                      clear
          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT    output line
*
          LA    R2,16(R2)                step up the area for printing
          LA    R4,16(R4)                add 16 to offset
          SH    R5,SIXTEEN               subtract 16 from length
          B     TRACE_LOOP               back round we go
TRACE_LOOP_DONE DS 0H
          LTR   R5,R5                    any left to do?
          BZ    WRITE_TRACE_END          no- we're really finished
*
          ST    R4,FULLWORD              save offset
          LA    R7,FULLWORD              get address of offset
          LA    R8,LINEOUT_OFFSET        get address of output area
          LA    R3,4                     set length
          BAL   R14,CONVERT_TO_HEX       convert to hex
          TR    LINEOUT_OFFSET,CHAR2HEX  finish conversion
*
          CLI   NUMBER_FLAG,C'Y'
          BNE   NOT_A_NUMBER
          L     R1,0(R2)
          CVD   R1,DECIMAL
          MVC   LINEOUT_CHAR,PATTERN
          ED    LINEOUT_CHAR,DECIMAL
          OI    LINEOUT_CHAR+15,X'F0'
          B     HEX_NUMBER
*
PATTERN   DC    X'40202020202020202020202020202021'
*
NOT_A_NUMBER DS 0H
*
          LR    R1,R5                    get remaining length
          BCTR  R1,0                     -1 for execute
          EX    R1,MOVE_CHARS            move chars to output
          TR    LINEOUT_CHAR,PRINTABLES  convert to printables
*
HEX_NUMBER DS 0H
          LR    R7,R2                    get address of area
          LA    R8,LINEOUT_HEX           get address of hex output
          LR    R3,R5                    get remaining length
          BAL   R14,CONVERT_TO_HEX       convert to hex
          SLL   R5,1                     times length by 2
          BCTR  R5,0                     -1 for execute
          EX    R5,XLATE                 finish the conversion
*
          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH set writeq length
          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X
                LENGTH(WRITEQ_LENGTH)                                  X
                RESP(RESP) RESP2(RESP2)
*
WRITE_TRACE_END DS 0H
          LM    R0,R15,SAVEREG1
          BR    R14
*
MOVE_CHARS MVC   LINEOUT_CHAR(0),0(R2)
XLATE     TR    LINEOUT_HEX(0),CHAR2HEX
*
*         Split a field in preparation for conversion to Hex
*
*  E.G.   Input of 12345678 would result in output of
*
*         1002300450067008
*
CONVERT_TO_HEX DS 0H
          STM   R0,R15,SAVEREG2
          LR    R1,R3
          SLL   R1,1
          BCTR  R1,0
          EX    R1,CLEAR_TO_ZEROS
CONVERT_LOOP DS 0H
          MVZ   0(1,R8),0(R7)
          MVN   1(1,R8),0(R7)
          LA    R7,1(R7)
          LA    R8,2(R8)
          BCT   R3,CONVERT_LOOP       back round
          LM    R0,R15,SAVEREG2
          BR    R14
*
CLEAR_TO_ZEROS XC 0(0,R8),0(R8)
*
*
*
DECODE_OPTIONS DS 0H
          STM   R0,R15,SAVEREG3
OPTIONS_LOOP DS 0H
          CLC   0(4,R4),NO_MORE
          BE    OPTIONS_LOOP_END
          L     R1,0(R2)
          N     R1,0(R4)
          LTR   R1,R1
          BZ    OPTION_NOT_SET
          MVI   LINEOUT,C' '
          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT
          LR    R7,R4
          LA    R8,LINEOUT_HEX
          LA    R3,4
          BAL   R14,CONVERT_TO_HEX
          TR    LINEOUT_HEX(8),CHAR2HEX
          MVC   LINEOUT_HEX+9(32),4(R4)
          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH
          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X
                LENGTH(WRITEQ_LENGTH)                                  X
                RESP(RESP) RESP2(RESP2)
OPTION_NOT_SET DS 0H
          LA    R4,36(R4)
          B     OPTIONS_LOOP
OPTIONS_LOOP_END DS 0H
          LM    R0,R15,SAVEREG3
          BR    R14
*-------------------------------------------------------------*
* CONSTANTS, EQUATES & MESSAGES                               *
*-------------------------------------------------------------*
         LTORG
*
*
ZERO     DC  A(0)
ONE      DC  AL2(1)
FOUR     DC  AL2(4)
SIXTEEN  DC  AL2(16)
MAX_LENGTH DC AL2(512)
LINEOUT_LENGTH DC AL2(L'LINEOUT)
*
BEFORE      DC A(MQXR_BEFORE)
BEFORE_TEXT DC CL8'BEFORE'
AFTER       DC A(MQXR_AFTER) 6
AFTER_TEXT  DC CL8'AFTER'
*
MQTR        DC CL4'MQTR'
*
MQI_CALLS DS  0F
          DC  A(MQXC_MQOPEN),A(MQI_OPEN)
MQICALLS_LENGTH EQU *-MQI_CALLS
          DC  A(MQXC_MQCLOSE),A(MQI_CLOSE)
          DC  A(MQXC_MQGET),A(MQI_GET)
          DC  A(MQXC_MQPUT),A(MQI_PUT)
          DC  A(MQXC_MQPUT1),A(MQI_PUT1)
NO_MORE   DC  A(-1)
*
CSQCAPX_MQPUT1  DC CL8'MQPUT1'
CSQCAPX_MQPUT   DC CL8'MQPUT'
CSQCAPX_MQGET   DC CL8'MQGET'
CSQCAPX_MQCLOSE DC CL8'MQCLOSE'
CSQCAPX_MQOPEN  DC CL8'MQOPEN'
RESOURCE_HCONN    DC CL8'HCONN'
RESOURCE_CMQODA   DC CL8'CMQODA'
RESOURCE_CMQMDA   DC CL8'CMQMDA'
RESOURCE_CMQGMOA  DC CL8'CMQGMOA'
RESOURCE_CMQPMOA  DC CL8'CMQPMOA'
RESOURCE_OPTIONS  DC CL8'OPTIONS'
RESOURCE_HOBJ     DC CL8'HOBJ'
RESOURCE_COMPCODE DC CL8'COMPCODE'
RESOURCE_REASON   DC CL8'REASON'
RESOURCE_BUFLEN   DC CL8'BUFLEN'
RESOURCE_BUFFER   DC CL8'BUFFER'
RESOURCE_DATALEN  DC CL8'DATALEN'
RESOURCE_SELCOUNT DC CL8'SELCOUNT'
RESOURCE_SELECTS  DC CL8'SELECTS'
RESOURCE_IACOUNT  DC CL8'IACOUNT'
RESOURCE_IATTRS   DC CL8'IATTRS'
RESOURCE_CALEN    DC CL8'CALEN'
RESOURCE_CATTRS   DC CL8'CATTRS'
RESOURCE_EXITREASON DC CL8'EXITPNT'
*
CHAR2HEX   DS 0F
           DC C'0123456789ABCDEF'
           DC C'1...............'
           DC C'2...............'
           DC C'3...............'
           DC C'4...............'
           DC C'5...............'
           DC C'6...............'
           DC C'7...............'
           DC C'8...............'
           DC C'9...............'
           DC C'A...............'
           DC C'B...............'
           DC C'C...............'
           DC C'D...............'
           DC C'E...............'
           DC C'F...............'
*
PRINTABLES DS 0F
           DC C'................'
           DC C'................'
           DC C'................'
           DC C'................'
           DC C' .........¢.<(+|'
           DC C'&&.........!$*);¬'
           DC C'-/........¦,%_>?'
           DC C'.........`:#@''="'
           DC C'.abcdefghi......'
           DC C'.jklmnopqr......'
           DC C'.~stuvwxyz......'
           DC C'.£.........]¯¨´.'
           DC C'{ABCDEFGHI......'
           DC C'}JKLMNOPQR......'
           DC C'\.STUVWXYZ......'
           DC C'0123456789......'

*
OPEN_OPTIONS DS 0F
            DC X'00000001',CL32'INPUT_AS_Q_DEF'
            DC X'00000002',CL32'INPUT_SHARED'
            DC X'00000004',CL32'INPUT_EXCLUSIVE'
            DC X'00000008',CL32'BROWSE'
            DC X'00000010',CL32'OUTPUT'
            DC X'00000020',CL32'INQUIRE'
            DC X'00000040',CL32'SET'
            DC X'00000080',CL32'SAVE_ALL_CONTEXT'
            DC X'00000100',CL32'PASS_IDENTITY_CONTEXT'
            DC X'00000200',CL32'PASS_ALL_CONTEXT'
            DC X'00000400',CL32'SET_IDENTITY_CONTEXT'
            DC X'00000800',CL32'SET_ALL_CONTEXT'
            DC X'00001000',CL32'ALTERNATE_USER_AUTHORITY'
            DC X'00002000',CL32'FAIL_IF_QUIESCING'
            DC X'00004000',CL32'BIND_ON_OPEN'
            DC X'00008000',CL32'BIND_NOT_FIXED'
            DC X'00010000',CL32'RESOLVE_NAMES'
            DC X'FFFFFFFF'
GET_OPTIONS DS 0F
            DC X'00000001',CL32'WAIT'
            DC X'00000002',CL32'SYNCPOINT'
            DC X'00000004',CL32'NO_SYNCPOINT'
            DC X'00000008',CL32'SET_SIGNAL'
            DC X'00000010',CL32'BROWSE_FIRST'
            DC X'00000020',CL32'BROWSE_NEXT'
            DC X'00000040',CL32'ACCEPT_TRUNCATED_MSG'
            DC X'00000080',CL32'MARK_SKIP_BACKOUT'
            DC X'00000100',CL32'MSG_UNDER_CURSOR'
            DC X'00000200',CL32'LOCK'
            DC X'00000400',CL32'UNLOCK'
            DC X'00000800',CL32'BROWSE_MSG_UNDER_CURSOR'
            DC X'00001000',CL32'SYNCPOINT_IF_PERSISTENT'
            DC X'00002000',CL32'FAIL_IF_QUIESCING'
            DC X'00004000',CL32'CONVERT'
            DC X'00008000',CL32'LOGICAL_ORDER'
            DC X'00010000',CL32'COMPLETE_MSG'
            DC X'00020000',CL32'ALL_MSGS_AVAILABLE'
            DC X'00040000',CL32'ALL_SEGMENTS_AVAILABLE'
            DC X'00080000',CL32'DELETE_MSG'
            DC X'FFFFFFFF'
PUT_OPTIONS DS 0F
            DC X'00000002',CL32'SYNCPOINT'
            DC X'00000004',CL32'NO_SYNCPOINT'
            DC X'00000020',CL32'DEFAULT_CONTEXT'
            DC X'00000040',CL32'NEW_MSG_ID'
            DC X'00000080',CL32'NEW_CORREL_ID'
            DC X'00000100',CL32'PASS_IDENTITY_CONTEXT'
            DC X'00000200',CL32'PASS_ALL_CONTEXT'
            DC X'00000400',CL32'SET_IDENTITY_CONTEXT'
            DC X'00000800',CL32'SET_ALL_CONTEXT'
            DC X'00001000',CL32'ALTERNATE_USER_AUTHORITY'
            DC X'00002000',CL32'FAIL_IF_QUIESCING'
            DC X'00004000',CL32'NO_CONTEXT'
            DC X'00008000',CL32'LOGICAL_ORDER'
            DC X'FFFFFFFF'
CLOSE_OPTIONS DS 0F
            DC X'00000001',CL32'DELETE'
            DC X'00000002',CL32'DELETE_PURGE'
            DC X'FFFFFFFF'
*
****************************
* MQI CONSTANTS            *
****************************
         CMQA  LIST=YES
*
         END  CAPXPRNT
