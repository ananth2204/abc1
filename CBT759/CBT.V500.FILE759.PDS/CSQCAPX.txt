*---------------------------------------------------------------------*
*                                                                     *
*                         C S Q C A P X                               *
*                         = = = = = = =                               *
*                                                                     *
* This is an implementation of the MQ API crossing exit               *
*                                                                     *
* All the MQ parameters for each call are passed to CAPXPRNT for      *
* printing via an intrapartition TDQ. The queue name is provided in   *
* INITPARM.                                                           *
*                                                                     *
*---------------------------------------------------------------------*
*                                                                     *
* Copyright (C) 2007  Kevin Wailes                                    *
*                                                                     *
* This program is free software; you can redistribute it and/or modify*
* it under the terms of the GNU General Public License as published by*
* the Free Software Foundation; either version 2 of the License, or   *
* (at your option) any later version.                                 *
*                                                                     *
* This program is distributed in the hope that it will be useful,     *
* but WITHOUT ANY WARRANTY; without even the implied warranty of      *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
* GNU General Public License for more details.                        *
*                                                                     *
* You should have received a copy of the GNU General Public License   *
* along with this program; if not, write to the Free Software         *
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            *
* 02111-1307  USA                                                     *
*                                                                     *
* Author:                                                             *
* Kevin Wailes <kevin.wailes@yahoo.com>                               *
*                                                                     *
*---------------------------------------------------------------------*
         DFHREGS                        REGISTER EQUATES
*
         CMQXPA LIST=YES
         CMQODA LIST=YES,DSECT=YES
         CMQMDA LIST=YES,DSECT=YES
         CMQGMOA LIST=YES,DSECT=YES
         CMQPMOA LIST=YES,DSECT=YES
*
* Working storage
*
DFHEISTG DSECT
*
SAVEREGS DS     16F                  Register save area
SAVEREG1 DS     16F                  Register save area
SAVEREG2 DS     16F                  Register save area
*
RESP     DS     F
RESP2    DS     F
*
OUTPUT_LENGTH DS H
ITEM          DS H
LENGTH        DS H
*
INITPARM         DS  CL60
                 ORG INITPARM
TDQNAME          DS  CL4
                 ORG
*
* Output area
*
OUTPUT_AREA      DS  0D
*
* Fixed part
*
TIMESTAMP        DS  D
TASK             DS  PL4
TRAN             DS  CL4
MQCALL           DS  F
WHEN             DS  F
HCONN            DS  F
HOBJ             DS  F
OPTIONS          DS  F
COMPCODE         DS  F
REASON           DS  F
BUFFER_LENGTH    DS  F
DATA_LENGTH      DS  F
BUFFER           DS  CL512
*
FIXED_LENGTH     EQU *-OUTPUT_AREA
*
* Variable part
*
VARIABLE         DS  0C
*
* MQOPEN
*
MQOPEN_ODA       DS  CL(MQOD_LENGTH)
MQOPEN_LENGTH    EQU (*-VARIABLE)+FIXED_LENGTH
*
* MQCLOSE
*
                 ORG VARIABLE
MQCLOSE_LENGTH   EQU (*-VARIABLE)+FIXED_LENGTH
*
* MQGET
*
                 ORG VARIABLE
MQGET_MDA        DS  CL(MQMD_LENGTH)
MQGET_GMOA       DS  CL(MQGMO_LENGTH)
MQGET_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH
*
* MQPUT
*
                 ORG VARIABLE
MQPUT_MDA        DS   CL(MQMD_LENGTH)
MQPUT_PMOA       DS   CL(MQPMO_LENGTH)
MQPUT_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH
*
* MQPUT1
*
                 ORG VARIABLE
MQPUT1_ODA        DS  CL(MQOD_LENGTH)
MQPUT1_MDA        DS   CL(MQMD_LENGTH)
MQPUT1_PMOA       DS   CL(MQPMO_LENGTH)
MQPUT1_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH
*
                 ORG
*
* Here we go, here we go, here we go
*
CSQCAPX  RMODE  ANY
CSQCAPX  AMODE  31
CSQCAPX  DFHEIENT EIBREG=(R11),CODEREG=(R12),DATAREG=(R13)
*
* CHECK THAT THE PARAMTERS HAVE BEEN PASSED
*
         CLC   EIBCALEN,ZERO           CHECK COMMAREA LENGTH
         BE    THATS_ALL_FOLKS          IS NOT ZERO
*
*        See if we have any transaction specs
*
         MVC   ITEM,ONE
         EXEC CICS READQ TS QNAME('CSQCAPX') ITEM(ITEM) SET(R2)        X
               LENGTH(LENGTH) RESP(RESP) RESP2(RESP2)
         CLC   RESP,DFHRESP(NORMAL)
         BNE   TRACE_START
         LA    R3,4                    set length of entry
         XR    R4,R4                   clear r4
         XR    R5,R5                   clear r5
         LH    R5,LENGTH               get record length
         DR    R4,R3                   divide by entry length
         LTR   R5,R5                   any entries
         BZ    TRACE_START             no - trace all
TRANS_LOOP DS  0H
         CLC   0(4,R2),ZERO            is this entry null
         BE    THATS_ALL_FOLKS         yes - all done
         CLC   0(4,R2),TRACE_ALL       is it a total generic
         BE    TRACE_START             yes go to trace
         LA    R6,3(R2)                point to end of entry
         LA    R7,3                    set length
ASTER_LOOP DS  0H
         CLI   0(R6),C'*'              found a generic
         BE    FOUND_ASTER             yes - go to it
         BCTR  R6,0                    point to next char
         BCT   R7,ASTER_LOOP           go round again
         LA    R7,4                    none found so not generic
FOUND_ASTER    DS 0H
         BCTR  R7,0                    -1 for ex
         EX    R7,COMPARE              compare
         BE    TRACE_START             if equal then trace
         LA    R2,4(R2)                next entry
         BCT   R5,TRANS_LOOP           loop back for more
         B     THATS_ALL_FOLKS         get out
*
COMPARE  CLC   EIBTRNID(0),0(R2)
TRACE_ALL DC   C'*   '
*
* ESTABLISH ADDRESSABILITY
*
TRACE_START DS 0H
*
         EXEC CICS ASSIGN INITPARM(INITPARM) INITPARMLEN(LENGTH)       X
               RESP(RESP) RESP2(RESP2)
         CLC   LENGTH,FOUR
         BE    GOT_TDQNAME
         MVC   TDQNAME,MQTT
*
GOT_TDQNAME  DS 0H
*
         L     R10,DFHEICAP             LOAD ADDRESS OF COMMAREA
         USING MQXP_COPYPLIST,R10       ADDRESS THE PARAMETER LIST
         L     R9,MQXP_PXPB             ADDRESS OF XPB FROM PARMLIST
         USING MQXP,R9                  AND ADDRESS IT
*
         EXEC CICS ASKTIME ABSTIME(TIMESTAMP)
         MVC   TASK,EIBTASKN
         MVC   TRAN,EIBTRNID
         MVC   MQCALL,MQXP_EXITCOMMAND
         MVC   WHEN,MQXP_EXITREASON
*
         LA    R2,MQI_CALLS             GET ADDRESS OF CALLS TABLE
MQICALL_LOOP DS 0H
         CLC   0(4,R2),NO_MORE          REACHED THE END?
         BE    THATS_ALL_FOLKS          YES - THEN GET OUT NOW
         CLC   0(4,R2),MQXP_EXITCOMMAND IS THIS OUR CALL
         BE    GOT_MQI_CALL             YES - GO TO PROCESS IT
         LA    R2,MQICALLS_LENGTH(R2)   NEXT ENTRY
         B     MQICALL_LOOP             AND ROUND WE GO
GOT_MQI_CALL DS 0H
         L     R15,4(R2)                GET PROCESS ROUTINE ADDRESS
         BALR  R14,R15                  GO FOR IT
*
         EXEC CICS WRITEQ TD QUEUE(TDQNAME)                            X
               FROM(OUTPUT_AREA) LENGTH(OUTPUT_LENGTH)                 X
               RESP(RESP) RESP2(RESP2)
*
* EXIT FROM THE PROGRAM
*
THATS_ALL_FOLKS DS 0H
         EXEC  CICS RETURN
*
* CALL MQOPEN,(HCONN,OBJDESC,OPTIONS,HOBJ,COMPCODE,REASON)
*
* HCONN     DS      F  CONNECTION HANDLE
* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN
* HOBJ      DS      F  OBJECT HANDLE
* COMPCODE  DS      F  COMPLETION CODE
* REASON    DS      F  REASON CODE QUALIFYING COMPCODE
*
MQI_OPEN  DS   0F
          STM  R0,R15,SAVEREGS
* HCONN     DS      F  CONNECTION HANDLE
          L    R2,MQXP_PCOPYPARM1
          MVC  HCONN,0(R2)
* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN
          L    R2,MQXP_PCOPYPARM3
          MVC  OPTIONS,0(R2)
* HOBJ      DS      F  OBJECT HANDLE
          L    R2,MQXP_PCOPYPARM4
          MVC  HOBJ,0(R2)
* COMPCODE  DS      F  COMPLETION CODE
          L    R2,MQXP_PCOPYPARM5
          MVC  COMPCODE,0(R2)
* REASON    DS      F  REASON CODE QUALIFYING COMPCODE
          L    R2,MQXP_PCOPYPARM6
          MVC  REASON,0(R2)
* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR
          L    R2,MQXP_PCOPYPARM2
          LA   R3,MQOD_LENGTH
          LA   R4,MQOPEN_ODA
          LR   R5,R3
          MVCL R4,R2
*
          LHI  R1,MQOPEN_LENGTH
          STH  R1,OUTPUT_LENGTH
*
          LM   R0,R15,SAVEREGS
          BR   R14
*
* CALL MQCLOSE,(HCONN,HOBJ,OPTIONS,COMPCODE,REASON)
*
* HCONN     DS  F  CONNECTION HANDLE
* HOBJ      DS  F  OBJECT HANDLE
* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE
* COMPCODE  DS  F  COMPLETION CODE
* REASON    DS  F  REASON CODE QUALIFYING COMPCODE
*
MQI_CLOSE  DS   0F
          STM  R0,R15,SAVEREGS
* HCONN     DS  F  CONNECTION HANDLE
          L    R2,MQXP_PCOPYPARM1
          MVC  HCONN,0(R2)
* HOBJ      DS  F  OBJECT HANDLE
          L    R2,MQXP_PCOPYPARM2
          MVC  HOBJ,0(R2)
* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE
          L    R2,MQXP_PCOPYPARM3
          MVC  OPTIONS,0(R2)
* COMPCODE  DS  F  COMPLETION CODE
          L    R2,MQXP_PCOPYPARM4
          MVC  COMPCODE,0(R2)
* REASON    DS  F  REASON CODE QUALIFYING COMPCODE
          L    R2,MQXP_PCOPYPARM5
          MVC  REASON,0(R2)
*
          LHI  R1,MQCLOSE_LENGTH
          STH  R1,OUTPUT_LENGTH
*
          LM   R0,R15,SAVEREGS
          BR   R14
*
* CALL MQGET,(HCONN,HOBJ,MSGDESC,GETMSGOPTS,BUFFERLENGTH,
*             BUFFER,DATALENGTH,COMPCODE,REASON)
*
* HCONN         DS       F    CONNECTION HANDLE
* HOBJ          DS       F    OBJECT HANDLE
* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR
* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET
* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA
* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA
* DATALENGTH    DS       F    LENGTH OF THE MESSAGE
* COMPCODE      DS       F    COMPLETION CODE
* REASON        DS       F    REASON CODE QUALIFYING COMPCODE
*
MQI_GET   DS   0F
          STM  R0,R15,SAVEREGS
* HCONN         DS       F    CONNECTION HANDLE
          L    R2,MQXP_PCOPYPARM1
          MVC  HCONN,0(R2)
* HOBJ          DS       F    OBJECT HANDLE
          L    R2,MQXP_PCOPYPARM2
          MVC  HOBJ,0(R2)
* COMPCODE      DS       F    COMPLETION CODE
          L    R2,MQXP_PCOPYPARM8
          MVC  COMPCODE,0(R2)
* REASON        DS       F    REASON CODE QUALIFYING COMPCODE
          L    R2,MQXP_PCOPYPARM9
          MVC  REASON,0(R2)
* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA
          L    R2,MQXP_PCOPYPARM5
          MVC  BUFFER_LENGTH,0(R2)
* DATALENGTH    DS       F    LENGTH OF THE MESSAGE
          L    R2,MQXP_PCOPYPARM7
          MVC  DATA_LENGTH,0(R2)
* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR
          L    R2,MQXP_PCOPYPARM3
          LA   R3,MQMD_LENGTH
          LA   R4,MQGET_MDA
          LR   R5,R3
          MVCL R4,R2
* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET
          L    R2,MQXP_PCOPYPARM4
          LA   R3,MQGMO_LENGTH
          LA   R4,MQGET_GMOA
          LR   R5,R3
          MVCL R4,R2
* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA
          L    R2,MQXP_PCOPYPARM6
          L    R3,DATA_LENGTH
          CHI  R3,512
          BNH  MQGET_LENGTH_OK
          LHI  R3,512
MQGET_LENGTH_OK DS 0H
          LA   R4,BUFFER
          LR   R5,R3
          MVCL R4,R2
*
          LHI  R1,MQGET_LENGTH
          STH  R1,OUTPUT_LENGTH
*
          LM   R0,R15,SAVEREGS
          BR   R14
*
* CALL MQPUT,(HCONN,HOBJ,MSGDESC,PUTMSGOPTS,BUFFERLENGTH,       X
*             BUFFER,COMPCODE,REASON)
*
* HCONN         DS       F     CONNECTION HANDLE
* HOBJ          DS       F     OBJECT HANDLE
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
* BUFFER        DS       CL(N) MESSAGE DATA
* COMPCODE      DS       F     COMPLETION CODE
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
*
MQI_PUT   DS   0F
          STM  R0,R15,SAVEREGS
* HCONN         DS       F     CONNECTION HANDLE
          L    R2,MQXP_PCOPYPARM1
          MVC  HCONN,0(R2)
* HOBJ          DS       F     OBJECT HANDLE
          L    R2,MQXP_PCOPYPARM2
          MVC  HOBJ,0(R2)
* COMPCODE      DS       F     COMPLETION CODE
          L    R2,MQXP_PCOPYPARM7
          MVC  COMPCODE,0(R2)
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
          L    R2,MQXP_PCOPYPARM8
          MVC  REASON,0(R2)
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
          L    R2,MQXP_PCOPYPARM5
          MVC  BUFFER_LENGTH,0(R2)
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
          L    R2,MQXP_PCOPYPARM3
          LA   R3,MQMD_LENGTH
          LA   R4,MQPUT_MDA
          LR   R5,R3
          MVCL R4,R2
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
          L    R2,MQXP_PCOPYPARM4
          LA   R3,MQPMO_LENGTH
          LA   R4,MQPUT_PMOA
          LR   R5,R3
          MVCL R4,R2
* BUFFER        DS       CL(N) MESSAGE DATA
          L    R2,MQXP_PCOPYPARM6
          L    R3,BUFFER_LENGTH
          CHI  R3,512
          BNH  MQPUT_LENGTH_OK
          LHI  R3,512
MQPUT_LENGTH_OK DS 0H
          LA   R4,BUFFER
          LR   R5,R3
          MVCL R4,R2
*
          LHI  R1,MQPUT_LENGTH
          STH  R1,OUTPUT_LENGTH
*
          LM   R0,R15,SAVEREGS
          BR   R14
*
* CALL MQPUT1,(HCONN,OBJDESC,MSGDESC,PUTMSGOPTS,BUFFERLENGTH,   X
*              BUFFER,COMPCODE,REASON)
*
* HCONN         DS       F     CONNECTION HANDLE
* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
* BUFFER        DS       CL(N) MESSAGE DATA
* COMPCODE      DS       F     COMPLETION CODE
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
*
MQI_PUT1  DS   0F
          STM  R0,R15,SAVEREGS
* HCONN         DS       F     CONNECTION HANDLE
          L    R2,MQXP_PCOPYPARM1
          MVC  HCONN,0(R2)
* COMPCODE      DS       F     COMPLETION CODE
          L    R2,MQXP_PCOPYPARM7
          MVC  COMPCODE,0(R2)
* REASON        DS       F     REASON CODE QUALIFYING COMPCODE
          L    R2,MQXP_PCOPYPARM8
          MVC  REASON,0(R2)
* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER
          L    R2,MQXP_PCOPYPARM5
          MVC  BUFFER_LENGTH,0(R2)
* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR
          L    R2,MQXP_PCOPYPARM2
          LA   R3,MQOD_LENGTH
          LA   R4,MQPUT1_ODA
          LR   R5,R3
          MVCL R4,R2
* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR
          LA   R3,MQOD_LENGTH
          L    R2,MQXP_PCOPYPARM3
          LA   R3,MQMD_LENGTH
          LA   R4,MQPUT1_MDA
          LR   R5,R3
          MVCL R4,R2
* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT
          L    R2,MQXP_PCOPYPARM4
          LA   R3,MQPMO_LENGTH
          LA   R4,MQPUT1_PMOA
          LR   R5,R3
          MVCL R4,R2
* BUFFER        DS       CL(N) MESSAGE DATA
          L    R2,MQXP_PCOPYPARM6
          L    R3,BUFFER_LENGTH
          CHI  R3,512
          BNH  MQPUT1_LENGTH_OK
          LHI  R3,512
MQPUT1_LENGTH_OK DS 0H
          LA   R4,BUFFER
          LR   R5,R3
          MVCL R4,R2
*
          LHI  R1,MQPUT1_LENGTH
          STH  R1,OUTPUT_LENGTH
*
          LM   R0,R15,SAVEREGS
          BR   R14
*-------------------------------------------------------------*
* CONSTANTS, EQUATES & MESSAGES                               *
*-------------------------------------------------------------*
         LTORG
*
ZERO     DC  A(0)
ONE      DC  AL2(1)
FOUR     DC  AL2(4)
*
MQTT     DC  C'MQTT'
*
MQI_CALLS DS  0F
          DC  A(MQXC_MQOPEN),A(MQI_OPEN)
MQICALLS_LENGTH EQU *-MQI_CALLS
          DC  A(MQXC_MQCLOSE),A(MQI_CLOSE)
          DC  A(MQXC_MQGET),A(MQI_GET)
          DC  A(MQXC_MQPUT),A(MQI_PUT)
          DC  A(MQXC_MQPUT1),A(MQI_PUT1)
NO_MORE   DC  A(-1)
*
****************************
* MQI CONSTANTS            *
****************************
         CMQA  LIST=YES
*
         END  CSQCAPX
