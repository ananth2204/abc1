{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012735000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE759.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE759.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x06'", "DS1TRBAL": "b'\\xa76'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05,\\x00\\x0c\\x05-\\x00\\x02\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x100\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-474"}, "text": "REGULAR CBT TAPE - VERSION 474    FILE:  759\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT474.FILE759\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,756 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/27/07    10:30:39    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INST": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "KWAILES"}, "text": "\nModify members ASMCAPX, ASMMAP, ASMPRNT and ASMTRAN according\nto your JCL standards then submit them.\n\nMember CAPXRDO contains RDO definitions for the programs, mapset\nand TDQueues.\n\nMember SITOVER contains SIT overrides for specifying TDQ names. If you\nchange them then the changes must be reflected in CAPXRDO.\n\nTransaction MQTT allows you to specify which transactions you are\ngoing to trace.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\r\\x00\\r\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:22", "lines": 13, "newlines": 13, "modlines": 0, "user": "KWAILES"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "@FILE759": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04J\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x100\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf4@@@'", "ispf": {"version": "04.74", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:30:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "CBT-474"}, "text": "//***FILE 759 is from Kevin Wailes, and contains an implementation  *   FILE 759\n//*           of the CICS MQ api crossing exit which traces all MQ  *   FILE 759\n//*           api calls for all or selected transactions.           *   FILE 759\n//*                                                                 *   FILE 759\n//*       email:  \"Kevin Wailes\" <kevin.wailes@gmail.com>           *   FILE 759\n//*                                                                 *   FILE 759\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMCAPX": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "KWAILES"}, "text": "//I899A   JOB DZTZ19#,'LW-11-VF',CLASS=Z,NOTIFY=&SYSUID\n//*\n// JCLLIB ORDER=(SYS1.CTS220.SDFHPROC)\n//*\n//S1      EXEC DFHEITAL,INDEX='SYS1.CTS220',\n//        PROGLIB=I899.MQEXIT.LOAD,\n//        DSCTLIB=SYS1.MQM.SCSQMACS,\n//        OUTC=*\n//*\n//TRN.SYSIN DD DSN=I899.MQEXIT.PDS(CSQCAPX),DISP=SHR\n//*\n//LKED.SYSIN DD *\n  NAME CSQCAPX(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMMAP": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "KWAILES"}, "text": "//I899A   JOB DZTZ19#,'LW-11-VF',CLASS=Z,NOTIFY=&SYSUID\n//*\n// JCLLIB ORDER=(SYS1.CTS220.SDFHPROC)\n//*\n//S1      EXEC DFHMAPS,INDEX='SYS1.CTS220',\n//        MAPLIB=I899.MQEXIT.LOAD,\n//        DSCTLIB=I899.LIB.MACLIB,\n//        MAPNAME=CAPXTRN,\n//        OUTC=*\n//*\n//COPY.SYSUT1 DD DSN=I899.MQEXIT.PDS(CAPXTRN),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMPRNT": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "KWAILES"}, "text": "//I899A   JOB DZTZ19#,'LW-11-VF',CLASS=Z,NOTIFY=&SYSUID\n//*\n// JCLLIB ORDER=(SYS1.CTS220.SDFHPROC)\n//*\n//S1      EXEC DFHEITAL,INDEX='SYS1.CTS220',\n//        PROGLIB=I899.MQEXIT.LOAD,\n//        DSCTLIB=SYS1.MQM.SCSQMACS,\n//        OUTC=*\n//*\n//TRN.SYSIN DD DSN=I899.MQEXIT.PDS(CAPXPRNT),DISP=SHR\n//*\n//LKED.SYSIN DD *\n  NAME CAPXPRNT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTRAN": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "KWAILES"}, "text": "//I899A   JOB DZTZ19#,'LW-11-VF',CLASS=Z,NOTIFY=&SYSUID\n//*\n// JCLLIB ORDER=(SYS1.CTS220.SDFHPROC)\n//*\n//S1      EXEC DFHEITAL,INDEX='SYS1.CTS220',\n//        PROGLIB=I899.MQEXIT.LOAD,\n//        DSCTLIB=I899.LIB.MACLIB,\n//        OUTC=*\n//*\n//TRN.SYSIN DD DSN=I899.MQEXIT.PDS(CAPXTRAN),DISP=SHR\n//*\n//LKED.SYSIN DD *\n  NAME CAPXTRAN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAPXPRNT": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x03[\\x03[\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 859, "newlines": 859, "modlines": 0, "user": "KWAILES"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*                         C A P X P R N T                             *\n*                         = = = = = = = =                             *\n*                                                                     *\n* This routine prints the MQ api details captured by CSQCAPX. Output  *\n* is written to an extrapartition TDQ the name of which is supplied   *\n* via INITPARM.                                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* Copyright (C) 2007  Kevin Wailes                                    *\n*                                                                     *\n* This program is free software; you can redistribute it and/or modify*\n* it under the terms of the GNU General Public License as published by*\n* the Free Software Foundation; either version 2 of the License, or   *\n* (at your option) any later version.                                 *\n*                                                                     *\n* This program is distributed in the hope that it will be useful,     *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of      *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *\n* GNU General Public License for more details.                        *\n*                                                                     *\n* You should have received a copy of the GNU General Public License   *\n* along with this program; if not, write to the Free Software         *\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            *\n* 02111-1307  USA                                                     *\n*                                                                     *\n* Author:                                                             *\n* Kevin Wailes <kevin.wailes@yahoo.com>                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DFHREGS                        REGISTER EQUATES\n*\n         CMQXPA LIST=YES\n         CMQODA LIST=YES,DSECT=YES\n         CMQMDA LIST=YES,DSECT=YES\n         CMQGMOA LIST=YES,DSECT=YES\n         CMQPMOA LIST=YES,DSECT=YES\n*\n* Input area\n*\nINPUT_AREA       DSECT\n*\n* Fixed part\n*\nTIMESTAMP        DS  D\nTASK             DS  PL4\nTRAN             DS  CL4\nMQCALL           DS  F\nWHEN             DS  F\nHCONN            DS  F\nHOBJ             DS  F\nOPTIONS          DS  F\nCOMPCODE         DS  F\nREASON           DS  F\nBUFFER_LENGTH    DS  F\nDATA_LENGTH      DS  F\nBUFFER           DS  CL512\n*\nFIXED_LENGTH     EQU *-INPUT_AREA\n*\n* Variable part\n*\nVARIABLE         DS  0C\n*\n* MQOPEN\n*\nMQOPEN_ODA       DS  CL(MQOD_LENGTH)\nMQOPEN_LENGTH    EQU *-VARIABLE\n*\n* MQGET\n*\n                 ORG VARIABLE\nMQGET_MDA        DS  CL(MQMD_LENGTH)\nMQGET_GMOA       DS  CL(MQGMO_LENGTH)\nMQGET_LENGTH     EQU *-VARIABLE\n*\n* MQPUT\n*\n                 ORG VARIABLE\nMQPUT_MDA        DS   CL(MQMD_LENGTH)\nMQPUT_PMOA       DS   CL(MQPMO_LENGTH)\nMQPUT_LENGTH     EQU *-VARIABLE\n*\n* MQPUT1\n*\n                 ORG VARIABLE\nMQPUT1_ODA        DS  CL(MQOD_LENGTH)\nMQPUT1_MDA        DS   CL(MQMD_LENGTH)\nMQPUT1_PMOA       DS   CL(MQPMO_LENGTH)\nMQPUT1_LENGTH     EQU *-VARIABLE\n*\n                 ORG\n*\n* Working storage\n*\nDFHEISTG DSECT\n*\nSAVEREGS DS     16F                  Register save area\nSAVEREG1 DS     16F                  Register save area\nSAVEREG2 DS     16F                  Register save area\nSAVEREG3 DS     16F                  Register save area\n*\nRESP     DS     F\nRESP2    DS     F\nFULLWORD DS     F\nDECIMAL  DS     PL8\n*\nOUTPUT_LENGTH DS H\nITEM          DS H\nLENGTH        DS H\n*\nTRIGGER       DS CL4\nREASON_TEXT   DS CL8\nTRACE_LENGTH DS  F\n*\nWRITEQ_LENGTH   DS     AL2           Writeq TD length\n*\nPRINT_FLAG DS CL1\nNUMBER_FLAG DS CL1\n*\nINITPARM         DS  CL60\n                 ORG INITPARM\nTDQNAME          DS  CL4\n                 ORG\n*\n* Output area\n*\nLINEOUT          DS  CL128\n                 ORG LINEOUT\nLINEOUT_DATE     DS  CL10\n                 DS  CL1\nLINEOUT_TIME     DS  CL8\n                 DS  CL1\nLINEOUT_TRAN     DS  CL4\n                 DS  CL1\nLINEOUT_TASK     DS  CL8\n                 DS  CL1\nLINEOUT_RESOURCE DS  CL8\n                 DS  CL1\nLINEOUT_OFFSET   DS  CL8\n                 DS  CL1\nLINEOUT_CHAR     DS  CL16\n                 DS  CL1\nLINEOUT_HEX      DS  CL32\n                 ORG\n*\n* Here we go, here we go, here we go\n*\nCAPXPRNT RMODE  ANY\nCAPXPRNT AMODE  31\nCAPXPRNT DFHEIENT EIBREG=(R10),CODEREG=(R11,R12),DATAREG=(R13)\n*\n* get our tdq name\n*\n         EXEC CICS ASSIGN INITPARM(INITPARM) INITPARMLEN(LENGTH)       X\n               QNAME(TRIGGER) RESP(RESP) RESP2(RESP2)\n         CLC   LENGTH,FOUR\n         BE    READ_TDQ\n         MVC   TDQNAME,MQTR\n*\nREAD_TDQ    DS 0H\n*\n* READ A QUEUE ENTRY\n*\n         EXEC CICS READQ TD QUEUE(TRIGGER) SET(R9)  LENGTH(LENGTH)     X\n               RESP(RESP) RESP2(RESP2)\n         CLC   RESP,DFHRESP(NORMAL)\n         BNE   THATS_ALL_FOLKS\n         USING INPUT_AREA,R9\n*\n         CLC   WHEN,BEFORE             'BEFORE' CALL\n         BNE   NOT_BEFORE               NO\n         MVC   REASON_TEXT,BEFORE_TEXT       MOVE 'BEFORE' TO REASON\n         B     WHAT_CALL                GO AND PROCESS THE CALL\nNOT_BEFORE DS  0H\n         CLC   WHEN,AFTER              'AFTER' CALL\n         BNE   THATS_ALL_FOLKS          NO - LEAVE NOW\n         MVC   REASON_TEXT,AFTER_TEXT        MOVE 'AFTER' TO REASON\n*\nWHAT_CALL DS    0H\n         LA    R2,MQI_CALLS             GET ADDRESS OF CALLS TABLE\nMQICALL_LOOP DS 0H\n         CLC   0(4,R2),NO_MORE          REACHED THE END?\n         BE    THATS_ALL_FOLKS          YES - THEN GET OUT NOW\n         CLC   0(4,R2),MQCALL           IS THIS OUR CALL\n         BE    GOT_MQI_CALL             YES - GO TO PROCESS IT\n         LA    R2,MQICALLS_LENGTH(R2)   NEXT ENTRY\n         B     MQICALL_LOOP             AND ROUND WE GO\nGOT_MQI_CALL DS 0H\n         L     R15,4(R2)                GET PROCESS ROUTINE ADDRESS\n         BALR  R14,R15                  GO FOR IT\n         B     READ_TDQ\n*\n* EXIT FROM THE PROGRAM\n*\nTHATS_ALL_FOLKS DS 0H\n         EXEC  CICS RETURN\n*\n*         MQOPEN\n*\nMQI_OPEN  DS   0F\n          STM  R0,R15,SAVEREGS\n          BAL  R14,WRITE_TRACE_SEPERATOR\n          MVI   PRINT_FLAG,C'Y'\n          LA   R1,8\n          ST   R1,TRACE_LENGTH\n          LA   R2,CSQCAPX_MQOPEN\n          LA   R3,REASON_TEXT\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI   PRINT_FLAG,C' '\n* HCONN     DS      F  CONNECTION HANDLE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,HCONN\n          LA   R3,RESOURCE_HCONN\n          BAL  R14,WRITE_TRACE_ENTRY\n* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR\n          LA   R2,MQOPEN_ODA\n          LA   R1,MQOD_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQODA\n          BAL  R14,WRITE_TRACE_ENTRY\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,OPTIONS\n          LA   R3,RESOURCE_OPTIONS\n          BAL  R14,WRITE_TRACE_ENTRY\n          LA   R2,OPTIONS\n          LA   R4,OPEN_OPTIONS\n          BAL  R14,DECODE_OPTIONS\n* HOBJ      DS      F  OBJECT HANDLE\n          LA   R2,HOBJ\n          LA   R3,RESOURCE_HOBJ\n          BAL  R14,WRITE_TRACE_ENTRY\n* COMPCODE  DS      F  COMPLETION CODE\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R2,COMPCODE\n          LA   R3,RESOURCE_COMPCODE\n          BAL  R14,WRITE_TRACE_ENTRY\n* REASON    DS      F  REASON CODE QUALIFYING COMPCODE\n          LA   R2,REASON\n          LA   R3,RESOURCE_REASON\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* MQCLOSE\n*\nMQI_CLOSE  DS   0F\n          STM  R0,R15,SAVEREGS\n          BAL  R14,WRITE_TRACE_SEPERATOR\n          MVI   PRINT_FLAG,C'Y'\n          LA   R1,8\n          ST   R1,TRACE_LENGTH\n          LA   R2,CSQCAPX_MQCLOSE\n          LA   R3,REASON_TEXT\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI   PRINT_FLAG,C' '\n* HCONN     DS  F  CONNECTION HANDLE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,HCONN\n          LA   R3,RESOURCE_HCONN\n          BAL  R14,WRITE_TRACE_ENTRY\n* HOBJ      DS  F  OBJECT HANDLE\n          LA   R2,HOBJ\n          LA   R3,RESOURCE_HOBJ\n          BAL  R14,WRITE_TRACE_ENTRY\n* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE\n          LA   R2,OPTIONS\n          LA   R3,RESOURCE_OPTIONS\n          BAL  R14,WRITE_TRACE_ENTRY\n          LA   R2,OPTIONS\n          LA   R4,OPEN_OPTIONS\n          BAL  R14,DECODE_OPTIONS\n* COMPCODE  DS  F  COMPLETION CODE\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R2,COMPCODE\n          LA   R3,RESOURCE_COMPCODE\n          BAL  R14,WRITE_TRACE_ENTRY\n* REASON    DS  F  REASON CODE QUALIFYING COMPCODE\n          LA   R2,REASON\n          LA   R3,RESOURCE_REASON\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n*         MQGET\n*\nMQI_GET   DS   0F\n          STM  R0,R15,SAVEREGS\n          BAL  R14,WRITE_TRACE_SEPERATOR\n          MVI   PRINT_FLAG,C'Y'\n          LA   R1,8\n          ST   R1,TRACE_LENGTH\n          LA   R2,CSQCAPX_MQGET\n          LA   R3,REASON_TEXT\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI   PRINT_FLAG,C' '\n* HCONN         DS       F    CONNECTION HANDLE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,HCONN\n          LA   R3,RESOURCE_HCONN\n          BAL  R14,WRITE_TRACE_ENTRY\n* HOBJ          DS       F    OBJECT HANDLE\n          LA   R2,HOBJ\n          LA   R3,RESOURCE_HOBJ\n          BAL  R14,WRITE_TRACE_ENTRY\n* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR\n          LA   R2,MQGET_MDA\n          LA   R1,MQMD_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQMDA\n          BAL  R14,WRITE_TRACE_ENTRY\n* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET\n          LA   R2,MQGET_GMOA\n          LA   R1,MQGMO_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQGMOA\n          BAL  R14,WRITE_TRACE_ENTRY\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQGET\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R1,MQGET_GMOA\n          USING MQGMO,R1\n          LA   R2,MQGMO_OPTIONS\n          LA   R3,RESOURCE_OPTIONS\n          BAL  R14,WRITE_TRACE_ENTRY\n          LA   R1,MQGET_GMOA\n          LA   R2,MQGMO_OPTIONS\n          DROP R1\n          LA   R4,GET_OPTIONS\n          BAL  R14,DECODE_OPTIONS\n* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,BUFFER_LENGTH\n          LA   R3,RESOURCE_BUFLEN\n          BAL  R14,WRITE_TRACE_ENTRY\n* DATALENGTH    DS       F    LENGTH OF THE MESSAGE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,DATA_LENGTH\n          LA   R3,RESOURCE_DATALEN\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA\n          L    R1,DATA_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R2,BUFFER\n          LA   R3,RESOURCE_BUFFER\n          BAL  R14,WRITE_TRACE_ENTRY\n* COMPCODE      DS       F    COMPLETION CODE\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,COMPCODE\n          LA   R3,RESOURCE_COMPCODE\n          BAL  R14,WRITE_TRACE_ENTRY\n* REASON        DS       F    REASON CODE QUALIFYING COMPCODE\n          LA   R2,REASON\n          LA   R3,RESOURCE_REASON\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n*         MQPUT\n*\nMQI_PUT   DS   0F\n          STM  R0,R15,SAVEREGS\n          BAL  R14,WRITE_TRACE_SEPERATOR\n          MVI   PRINT_FLAG,C'Y'\n          LA   R1,8\n          ST   R1,TRACE_LENGTH\n          LA   R2,CSQCAPX_MQPUT\n          LA   R3,REASON_TEXT\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI   PRINT_FLAG,C' '\n* HCONN         DS       F     CONNECTION HANDLE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,HCONN\n          LA   R3,RESOURCE_HCONN\n          BAL  R14,WRITE_TRACE_ENTRY\n* HOBJ          DS       F     OBJECT HANDLE\n          LA   R2,HOBJ\n          LA   R3,RESOURCE_HOBJ\n          BAL  R14,WRITE_TRACE_ENTRY\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n          LA   R2,MQPUT_MDA\n          LA   R1,MQMD_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQMDA\n          BAL  R14,WRITE_TRACE_ENTRY\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          LA   R2,MQPUT_PMOA\n          LA   R1,MQPMO_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQPMOA\n          BAL  R14,WRITE_TRACE_ENTRY\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R1,MQPUT_PMOA\n          USING MQPMO,R1\n          LA   R2,MQPMO_OPTIONS\n          LA   R3,RESOURCE_OPTIONS\n          BAL  R14,WRITE_TRACE_ENTRY\n          LA   R1,MQPUT_PMOA\n          LA   R2,MQPMO_OPTIONS\n          DROP R1\n          LA   R4,PUT_OPTIONS\n          BAL  R14,DECODE_OPTIONS\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,BUFFER_LENGTH\n          LA   R3,RESOURCE_BUFLEN\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n* BUFFER        DS       CL(N) MESSAGE DATA\n          L    R1,BUFFER_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R2,BUFFER\n          LA   R3,RESOURCE_BUFFER\n          BAL  R14,WRITE_TRACE_ENTRY\n* COMPCODE      DS       F     COMPLETION CODE\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,COMPCODE\n          LA   R3,RESOURCE_COMPCODE\n          BAL  R14,WRITE_TRACE_ENTRY\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n          LA   R2,REASON\n          LA   R3,RESOURCE_REASON\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n*         MQPUT1\n*\nMQI_PUT1  DS   0F\n          STM  R0,R15,SAVEREGS\n          BAL  R14,WRITE_TRACE_SEPERATOR\n          MVI   PRINT_FLAG,C'Y'\n          LA   R1,8\n          ST   R1,TRACE_LENGTH\n          LA   R2,CSQCAPX_MQPUT\n          LA   R3,REASON_TEXT\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI   PRINT_FLAG,C' '\n* HCONN         DS       F     CONNECTION HANDLE\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,HCONN\n          LA   R3,RESOURCE_HCONN\n          BAL  R14,WRITE_TRACE_ENTRY\n* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR\n          LA   R1,MQOD_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQPMOA\n          LA   R2,MQPUT1_ODA\n          LA   R3,RESOURCE_HOBJ\n          BAL  R14,WRITE_TRACE_ENTRY\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n          LA   R2,MQPUT1_MDA\n          LA   R1,MQMD_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQMDA\n          BAL  R14,WRITE_TRACE_ENTRY\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          LA   R2,MQPUT1_PMOA\n          LA   R1,MQPMO_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_CMQPMOA\n          BAL  R14,WRITE_TRACE_ENTRY\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R1,MQPUT1_PMOA\n          USING MQPMO,R1\n          LA   R2,MQPMO_OPTIONS\n          LA   R3,RESOURCE_OPTIONS\n          BAL  R14,WRITE_TRACE_ENTRY\n          LA   R1,MQPUT1_PMOA\n          LA   R2,MQPMO_OPTIONS\n          DROP R1\n          LA   R4,PUT_OPTIONS\n          BAL  R14,DECODE_OPTIONS\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,BUFFER_LENGTH\n          LA   R3,RESOURCE_BUFLEN\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n* BUFFER        DS       CL(N) MESSAGE DATA\n          LA   R2,BUFFER\n          L    R1,BUFFER_LENGTH\n          ST   R1,TRACE_LENGTH\n          LA   R3,RESOURCE_BUFFER\n          BAL  R14,WRITE_TRACE_ENTRY\n* COMPCODE      DS       F     COMPLETION CODE\n          MVI  NUMBER_FLAG,C'Y'\n          LA   R1,4\n          ST   R1,TRACE_LENGTH\n          LA   R2,COMPCODE\n          LA   R3,RESOURCE_COMPCODE\n          BAL  R14,WRITE_TRACE_ENTRY\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n          LA   R2,REASON\n          LA   R3,RESOURCE_REASON\n          BAL  R14,WRITE_TRACE_ENTRY\n          MVI  NUMBER_FLAG,C' '\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* write a seperator line to the trace\n*\nWRITE_TRACE_SEPERATOR DS 0H\n          STM  R0,R15,SAVEREG1\n          MVI   LINEOUT,C'-'\n          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT\n          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH\n          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X\n                LENGTH(WRITEQ_LENGTH)                                  X\n                RESP(RESP) RESP2(RESP2)\n          LM   R0,R15,SAVEREG1\n          BR    R14\n*\n*-------------------------------------------------------------*\n* write a trace entry                                         *\n* RESOURCE NAME COMES IN R3 FOR A LENGTH OF 8                 *\n* DATA TO BE PRINTED COMES IN R2 FOR A LENGTH IN LENGTH       *\n*-------------------------------------------------------------*\nWRITE_TRACE_ENTRY DS 0H\n          STM  R0,R15,SAVEREG1\n          MVI   LINEOUT,C' '\n          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT\n          CLI   PRINT_FLAG,C'Y'\n          BNE   NO_HEADINGS\n          EXEC CICS FORMATTIME ABSTIME(TIMESTAMP)                      X\n                DDMMYYYY(LINEOUT_DATE)                                 X\n                TIME(LINEOUT_TIME) DATESEP('/') TIMESEP(':')           X\n                RESP(RESP) RESP2(RESP2)\n          MVC   LINEOUT_TRAN,TRAN        Move in Tranid\n          UNPK  LINEOUT_TASK,TASK        move in task number\n          OI    LINEOUT_TASK+7,X'F0'     zap the last byte\nNO_HEADINGS DS 0H\n          MVC   LINEOUT_RESOURCE,0(R3)   move in the resource text\n          XR    R4,R4                    clear offset\n          L     R5,TRACE_LENGTH          get length of area\n          CH    R5,MAX_LENGTH\n          BNH   TRACE_LOOP\n          LH    R5,MAX_LENGTH\nTRACE_LOOP DS   0H\n          CHI   R5,16                    do we have at least 16\n          BNH   TRACE_LOOP_DONE          no - we're done\n*\n          ST    R4,FULLWORD              save offset\n          LA    R7,FULLWORD              get address of saved offset\n          LA    R8,LINEOUT_OFFSET        get address of output field\n          LA    R3,4                     set length\n          BAL   R14,CONVERT_TO_HEX       convert it\n          TR    LINEOUT_OFFSET,CHAR2HEX  finish the conversion\n*\n          MVC   LINEOUT_CHAR,0(R2)       move to char area\n          TR    LINEOUT_CHAR,PRINTABLES  translate to printables\n*\n          LR    R7,R2                    get address of area\n          LA    R8,LINEOUT_HEX           get address of hex output\n          LA    R3,16                    set length\n          BAL   R14,CONVERT_TO_HEX       convert to hex\n          TR    LINEOUT_HEX,CHAR2HEX     finish conversion\n*\n          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH set length for writeq\n          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X\n                LENGTH(WRITEQ_LENGTH)                                  X\n                RESP(RESP) RESP2(RESP2)\n*\n          MVI   LINEOUT,C' '                      clear\n          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT    output line\n*\n          LA    R2,16(R2)                step up the area for printing\n          LA    R4,16(R4)                add 16 to offset\n          SH    R5,SIXTEEN               subtract 16 from length\n          B     TRACE_LOOP               back round we go\nTRACE_LOOP_DONE DS 0H\n          LTR   R5,R5                    any left to do?\n          BZ    WRITE_TRACE_END          no- we're really finished\n*\n          ST    R4,FULLWORD              save offset\n          LA    R7,FULLWORD              get address of offset\n          LA    R8,LINEOUT_OFFSET        get address of output area\n          LA    R3,4                     set length\n          BAL   R14,CONVERT_TO_HEX       convert to hex\n          TR    LINEOUT_OFFSET,CHAR2HEX  finish conversion\n*\n          CLI   NUMBER_FLAG,C'Y'\n          BNE   NOT_A_NUMBER\n          L     R1,0(R2)\n          CVD   R1,DECIMAL\n          MVC   LINEOUT_CHAR,PATTERN\n          ED    LINEOUT_CHAR,DECIMAL\n          OI    LINEOUT_CHAR+15,X'F0'\n          B     HEX_NUMBER\n*\nPATTERN   DC    X'40202020202020202020202020202021'\n*\nNOT_A_NUMBER DS 0H\n*\n          LR    R1,R5                    get remaining length\n          BCTR  R1,0                     -1 for execute\n          EX    R1,MOVE_CHARS            move chars to output\n          TR    LINEOUT_CHAR,PRINTABLES  convert to printables\n*\nHEX_NUMBER DS 0H\n          LR    R7,R2                    get address of area\n          LA    R8,LINEOUT_HEX           get address of hex output\n          LR    R3,R5                    get remaining length\n          BAL   R14,CONVERT_TO_HEX       convert to hex\n          SLL   R5,1                     times length by 2\n          BCTR  R5,0                     -1 for execute\n          EX    R5,XLATE                 finish the conversion\n*\n          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH set writeq length\n          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X\n                LENGTH(WRITEQ_LENGTH)                                  X\n                RESP(RESP) RESP2(RESP2)\n*\nWRITE_TRACE_END DS 0H\n          LM    R0,R15,SAVEREG1\n          BR    R14\n*\nMOVE_CHARS MVC   LINEOUT_CHAR(0),0(R2)\nXLATE     TR    LINEOUT_HEX(0),CHAR2HEX\n*\n*         Split a field in preparation for conversion to Hex\n*\n*  E.G.   Input of 12345678 would result in output of\n*\n*         1002300450067008\n*\nCONVERT_TO_HEX DS 0H\n          STM   R0,R15,SAVEREG2\n          LR    R1,R3\n          SLL   R1,1\n          BCTR  R1,0\n          EX    R1,CLEAR_TO_ZEROS\nCONVERT_LOOP DS 0H\n          MVZ   0(1,R8),0(R7)\n          MVN   1(1,R8),0(R7)\n          LA    R7,1(R7)\n          LA    R8,2(R8)\n          BCT   R3,CONVERT_LOOP       back round\n          LM    R0,R15,SAVEREG2\n          BR    R14\n*\nCLEAR_TO_ZEROS XC 0(0,R8),0(R8)\n*\n*\n*\nDECODE_OPTIONS DS 0H\n          STM   R0,R15,SAVEREG3\nOPTIONS_LOOP DS 0H\n          CLC   0(4,R4),NO_MORE\n          BE    OPTIONS_LOOP_END\n          L     R1,0(R2)\n          N     R1,0(R4)\n          LTR   R1,R1\n          BZ    OPTION_NOT_SET\n          MVI   LINEOUT,C' '\n          MVC   LINEOUT+1(L'LINEOUT-1),LINEOUT\n          LR    R7,R4\n          LA    R8,LINEOUT_HEX\n          LA    R3,4\n          BAL   R14,CONVERT_TO_HEX\n          TR    LINEOUT_HEX(8),CHAR2HEX\n          MVC   LINEOUT_HEX+9(32),4(R4)\n          MVC   WRITEQ_LENGTH,LINEOUT_LENGTH\n          EXEC CICS WRITEQ TD QUEUE(TDQNAME) FROM(LINEOUT)             X\n                LENGTH(WRITEQ_LENGTH)                                  X\n                RESP(RESP) RESP2(RESP2)\nOPTION_NOT_SET DS 0H\n          LA    R4,36(R4)\n          B     OPTIONS_LOOP\nOPTIONS_LOOP_END DS 0H\n          LM    R0,R15,SAVEREG3\n          BR    R14\n*-------------------------------------------------------------*\n* CONSTANTS, EQUATES & MESSAGES                               *\n*-------------------------------------------------------------*\n         LTORG\n*\n*\nZERO     DC  A(0)\nONE      DC  AL2(1)\nFOUR     DC  AL2(4)\nSIXTEEN  DC  AL2(16)\nMAX_LENGTH DC AL2(512)\nLINEOUT_LENGTH DC AL2(L'LINEOUT)\n*\nBEFORE      DC A(MQXR_BEFORE)\nBEFORE_TEXT DC CL8'BEFORE'\nAFTER       DC A(MQXR_AFTER) 6\nAFTER_TEXT  DC CL8'AFTER'\n*\nMQTR        DC CL4'MQTR'\n*\nMQI_CALLS DS  0F\n          DC  A(MQXC_MQOPEN),A(MQI_OPEN)\nMQICALLS_LENGTH EQU *-MQI_CALLS\n          DC  A(MQXC_MQCLOSE),A(MQI_CLOSE)\n          DC  A(MQXC_MQGET),A(MQI_GET)\n          DC  A(MQXC_MQPUT),A(MQI_PUT)\n          DC  A(MQXC_MQPUT1),A(MQI_PUT1)\nNO_MORE   DC  A(-1)\n*\nCSQCAPX_MQPUT1  DC CL8'MQPUT1'\nCSQCAPX_MQPUT   DC CL8'MQPUT'\nCSQCAPX_MQGET   DC CL8'MQGET'\nCSQCAPX_MQCLOSE DC CL8'MQCLOSE'\nCSQCAPX_MQOPEN  DC CL8'MQOPEN'\nRESOURCE_HCONN    DC CL8'HCONN'\nRESOURCE_CMQODA   DC CL8'CMQODA'\nRESOURCE_CMQMDA   DC CL8'CMQMDA'\nRESOURCE_CMQGMOA  DC CL8'CMQGMOA'\nRESOURCE_CMQPMOA  DC CL8'CMQPMOA'\nRESOURCE_OPTIONS  DC CL8'OPTIONS'\nRESOURCE_HOBJ     DC CL8'HOBJ'\nRESOURCE_COMPCODE DC CL8'COMPCODE'\nRESOURCE_REASON   DC CL8'REASON'\nRESOURCE_BUFLEN   DC CL8'BUFLEN'\nRESOURCE_BUFFER   DC CL8'BUFFER'\nRESOURCE_DATALEN  DC CL8'DATALEN'\nRESOURCE_SELCOUNT DC CL8'SELCOUNT'\nRESOURCE_SELECTS  DC CL8'SELECTS'\nRESOURCE_IACOUNT  DC CL8'IACOUNT'\nRESOURCE_IATTRS   DC CL8'IATTRS'\nRESOURCE_CALEN    DC CL8'CALEN'\nRESOURCE_CATTRS   DC CL8'CATTRS'\nRESOURCE_EXITREASON DC CL8'EXITPNT'\n*\nCHAR2HEX   DS 0F\n           DC C'0123456789ABCDEF'\n           DC C'1...............'\n           DC C'2...............'\n           DC C'3...............'\n           DC C'4...............'\n           DC C'5...............'\n           DC C'6...............'\n           DC C'7...............'\n           DC C'8...............'\n           DC C'9...............'\n           DC C'A...............'\n           DC C'B...............'\n           DC C'C...............'\n           DC C'D...............'\n           DC C'E...............'\n           DC C'F...............'\n*\nPRINTABLES DS 0F\n           DC C'................'\n           DC C'................'\n           DC C'................'\n           DC C'................'\n           DC C' .........\u00a2.<(+|'\n           DC C'&&.........!$*);\u00ac'\n           DC C'-/........\u00a6,%_>?'\n           DC C'.........`:#@''=\"'\n           DC C'.abcdefghi......'\n           DC C'.jklmnopqr......'\n           DC C'.~stuvwxyz......'\n           DC C'.\u00a3.........]\u00af\u00a8\u00b4.'\n           DC C'{ABCDEFGHI......'\n           DC C'}JKLMNOPQR......'\n           DC C'\\.STUVWXYZ......'\n           DC C'0123456789......'\n\n*\nOPEN_OPTIONS DS 0F\n            DC X'00000001',CL32'INPUT_AS_Q_DEF'\n            DC X'00000002',CL32'INPUT_SHARED'\n            DC X'00000004',CL32'INPUT_EXCLUSIVE'\n            DC X'00000008',CL32'BROWSE'\n            DC X'00000010',CL32'OUTPUT'\n            DC X'00000020',CL32'INQUIRE'\n            DC X'00000040',CL32'SET'\n            DC X'00000080',CL32'SAVE_ALL_CONTEXT'\n            DC X'00000100',CL32'PASS_IDENTITY_CONTEXT'\n            DC X'00000200',CL32'PASS_ALL_CONTEXT'\n            DC X'00000400',CL32'SET_IDENTITY_CONTEXT'\n            DC X'00000800',CL32'SET_ALL_CONTEXT'\n            DC X'00001000',CL32'ALTERNATE_USER_AUTHORITY'\n            DC X'00002000',CL32'FAIL_IF_QUIESCING'\n            DC X'00004000',CL32'BIND_ON_OPEN'\n            DC X'00008000',CL32'BIND_NOT_FIXED'\n            DC X'00010000',CL32'RESOLVE_NAMES'\n            DC X'FFFFFFFF'\nGET_OPTIONS DS 0F\n            DC X'00000001',CL32'WAIT'\n            DC X'00000002',CL32'SYNCPOINT'\n            DC X'00000004',CL32'NO_SYNCPOINT'\n            DC X'00000008',CL32'SET_SIGNAL'\n            DC X'00000010',CL32'BROWSE_FIRST'\n            DC X'00000020',CL32'BROWSE_NEXT'\n            DC X'00000040',CL32'ACCEPT_TRUNCATED_MSG'\n            DC X'00000080',CL32'MARK_SKIP_BACKOUT'\n            DC X'00000100',CL32'MSG_UNDER_CURSOR'\n            DC X'00000200',CL32'LOCK'\n            DC X'00000400',CL32'UNLOCK'\n            DC X'00000800',CL32'BROWSE_MSG_UNDER_CURSOR'\n            DC X'00001000',CL32'SYNCPOINT_IF_PERSISTENT'\n            DC X'00002000',CL32'FAIL_IF_QUIESCING'\n            DC X'00004000',CL32'CONVERT'\n            DC X'00008000',CL32'LOGICAL_ORDER'\n            DC X'00010000',CL32'COMPLETE_MSG'\n            DC X'00020000',CL32'ALL_MSGS_AVAILABLE'\n            DC X'00040000',CL32'ALL_SEGMENTS_AVAILABLE'\n            DC X'00080000',CL32'DELETE_MSG'\n            DC X'FFFFFFFF'\nPUT_OPTIONS DS 0F\n            DC X'00000002',CL32'SYNCPOINT'\n            DC X'00000004',CL32'NO_SYNCPOINT'\n            DC X'00000020',CL32'DEFAULT_CONTEXT'\n            DC X'00000040',CL32'NEW_MSG_ID'\n            DC X'00000080',CL32'NEW_CORREL_ID'\n            DC X'00000100',CL32'PASS_IDENTITY_CONTEXT'\n            DC X'00000200',CL32'PASS_ALL_CONTEXT'\n            DC X'00000400',CL32'SET_IDENTITY_CONTEXT'\n            DC X'00000800',CL32'SET_ALL_CONTEXT'\n            DC X'00001000',CL32'ALTERNATE_USER_AUTHORITY'\n            DC X'00002000',CL32'FAIL_IF_QUIESCING'\n            DC X'00004000',CL32'NO_CONTEXT'\n            DC X'00008000',CL32'LOGICAL_ORDER'\n            DC X'FFFFFFFF'\nCLOSE_OPTIONS DS 0F\n            DC X'00000001',CL32'DELETE'\n            DC X'00000002',CL32'DELETE_PURGE'\n            DC X'FFFFFFFF'\n*\n****************************\n* MQI CONSTANTS            *\n****************************\n         CMQA  LIST=YES\n*\n         END  CAPXPRNT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAPXRDO": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00(\\x00(\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "KWAILES"}, "text": "DEFINE PROGRAM(CAPXPRNT) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT PRINT PROGRAM)\n       LANGUAGE(ASSEMBLER) RELOAD(NO) RESIDENT(NO) USAGE(NORMAL)\n       USELPACOPY(NO) STATUS(ENABLED) CEDF(YES) DATALOCATION(ANY)\n       EXECKEY(CICS) CONCURRENCY(QUASIRENT) DYNAMIC(NO)\n       EXECUTIONSET(FULLAPI) JVM(NO) JVMPROFILE(DFHJVMPR) HOTPOOL(NO)\nDEFINE PROGRAM(CAPXTRAN) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT TRANSACTION SELECTION)\n       LANGUAGE(ASSEMBLER) RELOAD(NO) RESIDENT(NO) USAGE(NORMAL)\n       USELPACOPY(NO) STATUS(ENABLED) CEDF(YES) DATALOCATION(ANY)\n       EXECKEY(CICS) CONCURRENCY(QUASIRENT) DYNAMIC(NO)\n       EXECUTIONSET(FULLAPI) JVM(NO) JVMPROFILE(DFHJVMPR) HOTPOOL(NO)\nDEFINE TRANSACTION(MQTR) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT PRINT TRANSACTION)\n       PROGRAM(CAPXPRNT) TWASIZE(0) PROFILE(DFHCICST) STATUS(ENABLED)\n       TASKDATALOC(ANY) TASKDATAKEY(CICS) STORAGECLEAR(NO)\n       RUNAWAY(SYSTEM) SHUTDOWN(DISABLED) ISOLATE(YES) DYNAMIC(NO)\n       ROUTABLE(NO) PRIORITY(1) TRANCLASS(DFHTCL00) DTIMOUT(NO)\n       RESTART(NO) SPURGE(NO) TPURGE(NO) DUMP(YES) TRACE(YES)\n       CONFDATA(NO) OTSTIMEOUT(NO) ACTION(BACKOUT) WAIT(YES)\n       WAITTIME(0,0,0) RESSEC(NO) CMDSEC(NO)\nDEFINE TRANSACTION(MQTT) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT TRANSACTION SELECTION)\n       PROGRAM(CAPXTRAN) TWASIZE(0) PROFILE(DFHCICST) STATUS(ENABLED)\n       TASKDATALOC(ANY) TASKDATAKEY(CICS) STORAGECLEAR(NO)\n       RUNAWAY(SYSTEM) SHUTDOWN(DISABLED) ISOLATE(YES) DYNAMIC(NO)\n       ROUTABLE(NO) PRIORITY(1) TRANCLASS(DFHTCL00) DTIMOUT(NO)\n       RESTART(NO) SPURGE(NO) TPURGE(NO) DUMP(YES) TRACE(YES)\n       CONFDATA(NO) OTSTIMEOUT(NO) ACTION(BACKOUT) WAIT(YES)\n       WAITTIME(0,0,0) RESSEC(NO) CMDSEC(NO)\nDEFINE TDQUEUE(MQTR) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT PRINT QUEUE)\n       TYPE(EXTRA) DATABUFFERS(255) DDNAME(MQTRACE) SYSOUTCLASS(0)\n       ERROROPTION(IGNORE) OPENTIME(INITIAL) TYPEFILE(OUTPUT)\n       RECORDSIZE(132) BLOCKSIZE(136) RECORDFORMAT(VARIABLE)\n       BLOCKFORMAT(UNBLOCKED) DISPOSITION(MOD)\nDEFINE TDQUEUE(MQTT) GROUP(MQEXIT)\n       DESCRIPTION(MQ API CROSSING EXIT TRIGGER QUEUE)\n       TYPE(INTRA) ATIFACILITY(FILE) RECOVSTATUS(NO) TRANSID(MQTR)\n       TRIGGERLEVEL(1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAPXTRAN": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\xa2\\x00\\xa2\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 162, "newlines": 162, "modlines": 0, "user": "KWAILES"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*                         C A P X T R A N                             *\n*                         = = = = = = = =                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* Copyright (C) 2007  Kevin Wailes                                    *\n*                                                                     *\n* This program is free software; you can redistribute it and/or modify*\n* it under the terms of the GNU General Public License as published by*\n* the Free Software Foundation; either version 2 of the License, or   *\n* (at your option) any later version.                                 *\n*                                                                     *\n* This program is distributed in the hope that it will be useful,     *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of      *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *\n* GNU General Public License for more details.                        *\n*                                                                     *\n* You should have received a copy of the GNU General Public License   *\n* along with this program; if not, write to the Free Software         *\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            *\n* 02111-1307  USA                                                     *\n*                                                                     *\n* Author:                                                             *\n* Kevin Wailes <kevin.wailes@yahoo.com>                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DFHREGS                        REGISTER EQUATES\n*\n         COPY DFHAID\n*\n* Working storage\n*\nDFHEISTG DSECT\n*\nRESP     DS     F\nRESP2    DS     F\nABSTIME  DS     PL8\n*\nITEM          DS H\nLENGTH        DS H\n*\nTRANSACTIONS DS CL(16*4)\n*\n         COPY CAPXTRN\n*\n* Here we go, here we go, here we go\n*\nCAPXTRAN RMODE  ANY\nCAPXTRAN AMODE  31\nCAPXTRAN DFHEIENT EIBREG=(R10),CODEREG=(R11,R12),DATAREG=(R13)\n*\n         CLC   EIBCALEN,ZERO\n         BNE   NOT_FIRST\n         LA    R1,16*4\n         STH   R1,LENGTH\n         LA    R1,1\n         STH   R1,ITEM\n         EXEC CICS READQ TS QNAME('CSQCAPX') INTO(TRANSACTIONS)        X\n               LENGTH(LENGTH) ITEM(ITEM)                               X\n               RESP(RESP) RESP2(RESP2)\n         CLC   RESP,DFHRESP(NORMAL)\n         BE    FORMAT_MAP\n         LA    R2,TRANSACTIONS\n         LA    R3,L'TRANSACTIONS\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         B     FORMAT_MAP\n*\nNOT_FIRST DS 0H\n         L     R1,DFHEICAP\n         MVC   TRANSACTIONS,0(R1)\n         EXEC CICS RECEIVE MAP('CAPXTRN') MAPSET('CAPXTRN')            X\n               INTO(CAPXTRNI)                                          X\n               RESP(RESP) RESP2(RESP2)\n         CLC   RESP,DFHRESP(NORMAL)\n         BNE   THATS_ALL_FOLKS\n         CLI   EIBAID,DFHENTER\n         BE    PROCESS_IT\n         CLI   EIBAID,DFHPF3\n         BE    WRITE_QUEUE\n         CLI   EIBAID,DFHPF15\n         BE    WRITE_QUEUE\n         CLI   EIBAID,DFHPF12\n         BE    PURGE_QUEUE\n         CLI   EIBAID,DFHPF24\n         BE    PURGE_QUEUE\n         B     FORMAT_MAP\n*\nTHATS_ALL_FOLKS DS 0H\n         EXEC CICS SEND CONTROL ERASE FREEKB                           x\n               RESP(RESP) RESP2(RESP2)\n         EXEC CICS RETURN\n*\nPURGE_QUEUE DS 0H\n         EXEC CICS DELETEQ TS QNAME('CSQCAPX')                         X\n               RESP(RESP) RESP2(RESP2)\n         B     THATS_ALL_FOLKS\n*\nWRITE_QUEUE DS 0H\n         EXEC CICS DELETEQ TS QNAME('CSQCAPX')                         X\n               RESP(RESP) RESP2(RESP2)\n         EXEC CICS WRITEQ TS QNAME('CSQCAPX') MAIN FROM(TRANSACTIONS)  X\n               RESP(RESP) RESP2(RESP2)\n         B     THATS_ALL_FOLKS\n*\nPROCESS_IT  DS    0H\n         LA    R2,TRANSACTIONS\n         LA    R3,L'TRANSACTIONS\n         LR    R4,R2\n         XR    R5,R5\n         MVCL  R2,R4\n         LA    R2,TRANSACTIONS\n         LA    R3,16\n         LA    R4,TRAN1L\nNEXT_TRANSACTION DS 0H\n         CLC   0(2,R4),ZERO\n         BE    NO_TRANSACTION\n         MVC   0(4,R2),4(R4)\n         LA    R2,4(R2)\nNO_TRANSACTION DS 0H\n         LA    R4,TRAN2L-TRAN1L(R4)\n         BCT   R3,NEXT_TRANSACTION\nFORMAT_MAP DS  0H\n         LA    R8,CAPXTRNO\n         LA    R9,CAPXTRNL\n         LR    R2,R8\n         XR    R3,R3\n         MVCL  R8,R2\n         LA    R2,TRAN1O\n         LA    R3,TRANSACTIONS\n         LA    R4,16\nNEXT_ONE DS    0H\n         CLC   0(4,R3),ZERO\n         BE    NO_MORE\n         MVC   0(4,R2),0(R3)\n         LA    R2,TRAN2L-TRAN1L(R2)\n         LA    R3,4(R3)\n         BCT   R4,NEXT_ONE\nNO_MORE DS 0H\n         EXEC  CICS ASKTIME ABSTIME(ABSTIME)                           X\n               RESP(RESP) RESP2(RESP2)\n         EXEC CICS FORMATTIME ABSTIME(ABSTIME)                         X\n               DDMMYYYY(DATEO)                                         X\n               TIME(TIMEO) DATESEP('/') TIMESEP(':')                   X\n               RESP(RESP) RESP2(RESP2)\nSEND_MAP DS    0H\n         EXEC CICS SEND MAP('CAPXTRN') MAPSET('CAPXTRN')               X\n               FROM(CAPXTRNO) ERASE FREEKB                             X\n               RESP(RESP) RESP2(RESP2)\n         EXEC  CICS RETURN TRANSID(EIBTRNID) COMMAREA(TRANSACTIONS)\n*-------------------------------------------------------------*\n* CONSTANTS, EQUATES & MESSAGES                               *\n*-------------------------------------------------------------*\n         LTORG\n*\n*\nZERO     DC  A(0)\n*\n         END  CAPXTRAN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAPXTRN": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00h\\x00h\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "KWAILES"}, "text": "         PRINT ON,NOGEN\nCAPXTRN  DFHMSD TYPE=MAP,LANG=ASM,MODE=INOUT,STORAGE=AUTO,SUFFIX=\n         TITLE 'Parameters for CSQCAPX          '\nCAPXTRN  DFHMDI SIZE=(24,80),MAPATTS=(COLOR,HILIGHT),DSATTS=(COLOR),   *\n               COLUMN=1,LINE=1,DATA=FIELD,TIOAPFX=YES,OBFMT=NO\n* LIT1                            LIT1\nLIT1     DFHMDF POS=(1,1),LENGTH=4,INITIAL='Date',ATTRB=(PROT,NORM),   *\n               COLOR=TURQUOISE\n* DATE                            DATE\nDATE     DFHMDF POS=(1,6),LENGTH=10,INITIAL='dd/mm/yyyy',ATTRB=(PROT,BR*\n               T),COLOR=YELLOW\n         DFHMDF POS=(1,17),LENGTH=1,ATTRB=(PROT,NORM)\n* LIT2                            LIT2\nLIT2     DFHMDF POS=(1,21),LENGTH=32,                                  *\n               INITIAL='Specify Transactions for CSQCAPX',ATTRB=(PROT,N*\n               ORM),COLOR=TURQUOISE\n         DFHMDF POS=(1,54),LENGTH=1,ATTRB=(PROT,NORM)\n* LIT3                            LIT3\nLIT3     DFHMDF POS=(1,62),LENGTH=4,INITIAL='Time',ATTRB=(PROT,NORM),  *\n               COLOR=TURQUOISE\n* TIME                            TIME\nTIME     DFHMDF POS=(1,67),LENGTH=8,INITIAL='hh:mm:ss',ATTRB=(PROT,BRT)*\n               ,COLOR=YELLOW\n         DFHMDF POS=(1,76),LENGTH=1,ATTRB=(PROT,NORM)\n* LIT4                            LIT4\nLIT4     DFHMDF POS=(2,80),LENGTH=44,                                  *\n               INITIAL='Enter the transactions you want to trace  :-', *\n               ATTRB=(PROT,NORM),COLOR=TURQUOISE\n         DFHMDF POS=(3,45),LENGTH=1,ATTRB=(PROT,NORM)\n* TRAN1                           TRAN1\nTRAN1    DFHMDF POS=(4,80),LENGTH=4,ATTRB=(UNPROT,NORM,IC,FSET),       *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN2                           TRAN2\nTRAN2    DFHMDF POS=(5,5),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),           *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN3                           TRAN3\nTRAN3    DFHMDF POS=(5,10),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN4                           TRAN4\nTRAN4    DFHMDF POS=(5,15),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN5                           TRAN5\nTRAN5    DFHMDF POS=(5,20),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN6                           TRAN6\nTRAN6    DFHMDF POS=(5,25),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN7                           TRAN7\nTRAN7    DFHMDF POS=(5,30),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN8                           TRAN8\nTRAN8    DFHMDF POS=(5,35),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN9                           TRAN9\nTRAN9    DFHMDF POS=(5,40),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN10                          TRAN10\nTRAN10   DFHMDF POS=(5,45),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN11                          TRAN11\nTRAN11   DFHMDF POS=(5,50),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN12                          TRAN12\nTRAN12   DFHMDF POS=(5,55),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN13                          TRAN13\nTRAN13   DFHMDF POS=(5,60),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN14                          TRAN14\nTRAN14   DFHMDF POS=(5,65),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN15                          TRAN15\nTRAN15   DFHMDF POS=(5,70),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n* TRAN16                          TRAN16\nTRAN16   DFHMDF POS=(5,75),LENGTH=4,ATTRB=(UNPROT,NORM,FSET),          *\n               COLOR=GREEN,HILIGHT=UNDERLINE\n         DFHMDF POS=(5,80),LENGTH=0,ATTRB=(PROT,NORM)\n* LIT6                            LIT6\nLIT6     DFHMDF POS=(23,80),LENGTH=6,INITIAL='KEYS :',ATTRB=(PROT,NORM)*\n               ,COLOR=TURQUOISE\n* LIT7                            LIT7\nLIT7     DFHMDF POS=(24,7),LENGTH=5,INITIAL='ENTER',ATTRB=(PROT,BRT),  *\n               COLOR=YELLOW\n* LIT8                            LIT8\nLIT8     DFHMDF POS=(24,13),LENGTH=7,INITIAL='PROCESS',ATTRB=(PROT,NORM*\n               ),COLOR=TURQUOISE\n         DFHMDF POS=(24,21),LENGTH=1,ATTRB=(PROT,NORM)\n* LIT9                            LIT9\nLIT9     DFHMDF POS=(24,23),LENGTH=6,INITIAL='PF3/15',ATTRB=(PROT,BRT),*\n               COLOR=YELLOW\n* LIT10                           LIT10\nLIT10    DFHMDF POS=(24,30),LENGTH=12,INITIAL='SAVE AND END',          *\n               ATTRB=(PROT,NORM),COLOR=TURQUOISE\n         DFHMDF POS=(24,43),LENGTH=1,ATTRB=(PROT,NORM)\n* LIT11                           LIT11\nLIT11    DFHMDF POS=(24,45),LENGTH=7,INITIAL='PF12/24',ATTRB=(PROT,BRT)*\n               ,COLOR=YELLOW\n* LIT12                           LIT12\nLIT12    DFHMDF POS=(24,53),LENGTH=13,INITIAL='PURGE AND END',         *\n               ATTRB=(PROT,NORM),COLOR=TURQUOISE\n         DFHMDF POS=(24,67),LENGTH=1,ATTRB=(PROT,NORM)\n         DFHMSD TYPE=FINAL\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSQCAPX": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x01\\xed\\x01\\xed\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 493, "newlines": 493, "modlines": 0, "user": "KWAILES"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*                         C S Q C A P X                               *\n*                         = = = = = = =                               *\n*                                                                     *\n* This is an implementation of the MQ API crossing exit               *\n*                                                                     *\n* All the MQ parameters for each call are passed to CAPXPRNT for      *\n* printing via an intrapartition TDQ. The queue name is provided in   *\n* INITPARM.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* Copyright (C) 2007  Kevin Wailes                                    *\n*                                                                     *\n* This program is free software; you can redistribute it and/or modify*\n* it under the terms of the GNU General Public License as published by*\n* the Free Software Foundation; either version 2 of the License, or   *\n* (at your option) any later version.                                 *\n*                                                                     *\n* This program is distributed in the hope that it will be useful,     *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of      *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *\n* GNU General Public License for more details.                        *\n*                                                                     *\n* You should have received a copy of the GNU General Public License   *\n* along with this program; if not, write to the Free Software         *\n* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA            *\n* 02111-1307  USA                                                     *\n*                                                                     *\n* Author:                                                             *\n* Kevin Wailes <kevin.wailes@yahoo.com>                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DFHREGS                        REGISTER EQUATES\n*\n         CMQXPA LIST=YES\n         CMQODA LIST=YES,DSECT=YES\n         CMQMDA LIST=YES,DSECT=YES\n         CMQGMOA LIST=YES,DSECT=YES\n         CMQPMOA LIST=YES,DSECT=YES\n*\n* Working storage\n*\nDFHEISTG DSECT\n*\nSAVEREGS DS     16F                  Register save area\nSAVEREG1 DS     16F                  Register save area\nSAVEREG2 DS     16F                  Register save area\n*\nRESP     DS     F\nRESP2    DS     F\n*\nOUTPUT_LENGTH DS H\nITEM          DS H\nLENGTH        DS H\n*\nINITPARM         DS  CL60\n                 ORG INITPARM\nTDQNAME          DS  CL4\n                 ORG\n*\n* Output area\n*\nOUTPUT_AREA      DS  0D\n*\n* Fixed part\n*\nTIMESTAMP        DS  D\nTASK             DS  PL4\nTRAN             DS  CL4\nMQCALL           DS  F\nWHEN             DS  F\nHCONN            DS  F\nHOBJ             DS  F\nOPTIONS          DS  F\nCOMPCODE         DS  F\nREASON           DS  F\nBUFFER_LENGTH    DS  F\nDATA_LENGTH      DS  F\nBUFFER           DS  CL512\n*\nFIXED_LENGTH     EQU *-OUTPUT_AREA\n*\n* Variable part\n*\nVARIABLE         DS  0C\n*\n* MQOPEN\n*\nMQOPEN_ODA       DS  CL(MQOD_LENGTH)\nMQOPEN_LENGTH    EQU (*-VARIABLE)+FIXED_LENGTH\n*\n* MQCLOSE\n*\n                 ORG VARIABLE\nMQCLOSE_LENGTH   EQU (*-VARIABLE)+FIXED_LENGTH\n*\n* MQGET\n*\n                 ORG VARIABLE\nMQGET_MDA        DS  CL(MQMD_LENGTH)\nMQGET_GMOA       DS  CL(MQGMO_LENGTH)\nMQGET_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH\n*\n* MQPUT\n*\n                 ORG VARIABLE\nMQPUT_MDA        DS   CL(MQMD_LENGTH)\nMQPUT_PMOA       DS   CL(MQPMO_LENGTH)\nMQPUT_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH\n*\n* MQPUT1\n*\n                 ORG VARIABLE\nMQPUT1_ODA        DS  CL(MQOD_LENGTH)\nMQPUT1_MDA        DS   CL(MQMD_LENGTH)\nMQPUT1_PMOA       DS   CL(MQPMO_LENGTH)\nMQPUT1_LENGTH     EQU (*-VARIABLE)+FIXED_LENGTH\n*\n                 ORG\n*\n* Here we go, here we go, here we go\n*\nCSQCAPX  RMODE  ANY\nCSQCAPX  AMODE  31\nCSQCAPX  DFHEIENT EIBREG=(R11),CODEREG=(R12),DATAREG=(R13)\n*\n* CHECK THAT THE PARAMTERS HAVE BEEN PASSED\n*\n         CLC   EIBCALEN,ZERO           CHECK COMMAREA LENGTH\n         BE    THATS_ALL_FOLKS          IS NOT ZERO\n*\n*        See if we have any transaction specs\n*\n         MVC   ITEM,ONE\n         EXEC CICS READQ TS QNAME('CSQCAPX') ITEM(ITEM) SET(R2)        X\n               LENGTH(LENGTH) RESP(RESP) RESP2(RESP2)\n         CLC   RESP,DFHRESP(NORMAL)\n         BNE   TRACE_START\n         LA    R3,4                    set length of entry\n         XR    R4,R4                   clear r4\n         XR    R5,R5                   clear r5\n         LH    R5,LENGTH               get record length\n         DR    R4,R3                   divide by entry length\n         LTR   R5,R5                   any entries\n         BZ    TRACE_START             no - trace all\nTRANS_LOOP DS  0H\n         CLC   0(4,R2),ZERO            is this entry null\n         BE    THATS_ALL_FOLKS         yes - all done\n         CLC   0(4,R2),TRACE_ALL       is it a total generic\n         BE    TRACE_START             yes go to trace\n         LA    R6,3(R2)                point to end of entry\n         LA    R7,3                    set length\nASTER_LOOP DS  0H\n         CLI   0(R6),C'*'              found a generic\n         BE    FOUND_ASTER             yes - go to it\n         BCTR  R6,0                    point to next char\n         BCT   R7,ASTER_LOOP           go round again\n         LA    R7,4                    none found so not generic\nFOUND_ASTER    DS 0H\n         BCTR  R7,0                    -1 for ex\n         EX    R7,COMPARE              compare\n         BE    TRACE_START             if equal then trace\n         LA    R2,4(R2)                next entry\n         BCT   R5,TRANS_LOOP           loop back for more\n         B     THATS_ALL_FOLKS         get out\n*\nCOMPARE  CLC   EIBTRNID(0),0(R2)\nTRACE_ALL DC   C'*   '\n*\n* ESTABLISH ADDRESSABILITY\n*\nTRACE_START DS 0H\n*\n         EXEC CICS ASSIGN INITPARM(INITPARM) INITPARMLEN(LENGTH)       X\n               RESP(RESP) RESP2(RESP2)\n         CLC   LENGTH,FOUR\n         BE    GOT_TDQNAME\n         MVC   TDQNAME,MQTT\n*\nGOT_TDQNAME  DS 0H\n*\n         L     R10,DFHEICAP             LOAD ADDRESS OF COMMAREA\n         USING MQXP_COPYPLIST,R10       ADDRESS THE PARAMETER LIST\n         L     R9,MQXP_PXPB             ADDRESS OF XPB FROM PARMLIST\n         USING MQXP,R9                  AND ADDRESS IT\n*\n         EXEC CICS ASKTIME ABSTIME(TIMESTAMP)\n         MVC   TASK,EIBTASKN\n         MVC   TRAN,EIBTRNID\n         MVC   MQCALL,MQXP_EXITCOMMAND\n         MVC   WHEN,MQXP_EXITREASON\n*\n         LA    R2,MQI_CALLS             GET ADDRESS OF CALLS TABLE\nMQICALL_LOOP DS 0H\n         CLC   0(4,R2),NO_MORE          REACHED THE END?\n         BE    THATS_ALL_FOLKS          YES - THEN GET OUT NOW\n         CLC   0(4,R2),MQXP_EXITCOMMAND IS THIS OUR CALL\n         BE    GOT_MQI_CALL             YES - GO TO PROCESS IT\n         LA    R2,MQICALLS_LENGTH(R2)   NEXT ENTRY\n         B     MQICALL_LOOP             AND ROUND WE GO\nGOT_MQI_CALL DS 0H\n         L     R15,4(R2)                GET PROCESS ROUTINE ADDRESS\n         BALR  R14,R15                  GO FOR IT\n*\n         EXEC CICS WRITEQ TD QUEUE(TDQNAME)                            X\n               FROM(OUTPUT_AREA) LENGTH(OUTPUT_LENGTH)                 X\n               RESP(RESP) RESP2(RESP2)\n*\n* EXIT FROM THE PROGRAM\n*\nTHATS_ALL_FOLKS DS 0H\n         EXEC  CICS RETURN\n*\n* CALL MQOPEN,(HCONN,OBJDESC,OPTIONS,HOBJ,COMPCODE,REASON)\n*\n* HCONN     DS      F  CONNECTION HANDLE\n* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN\n* HOBJ      DS      F  OBJECT HANDLE\n* COMPCODE  DS      F  COMPLETION CODE\n* REASON    DS      F  REASON CODE QUALIFYING COMPCODE\n*\nMQI_OPEN  DS   0F\n          STM  R0,R15,SAVEREGS\n* HCONN     DS      F  CONNECTION HANDLE\n          L    R2,MQXP_PCOPYPARM1\n          MVC  HCONN,0(R2)\n* OPTIONS   DS      F  OPTIONS THAT CONTROL THE ACTION OF MQOPEN\n          L    R2,MQXP_PCOPYPARM3\n          MVC  OPTIONS,0(R2)\n* HOBJ      DS      F  OBJECT HANDLE\n          L    R2,MQXP_PCOPYPARM4\n          MVC  HOBJ,0(R2)\n* COMPCODE  DS      F  COMPLETION CODE\n          L    R2,MQXP_PCOPYPARM5\n          MVC  COMPCODE,0(R2)\n* REASON    DS      F  REASON CODE QUALIFYING COMPCODE\n          L    R2,MQXP_PCOPYPARM6\n          MVC  REASON,0(R2)\n* OBJDESC   CMQODA  ,  OBJECT DESCRIPTOR\n          L    R2,MQXP_PCOPYPARM2\n          LA   R3,MQOD_LENGTH\n          LA   R4,MQOPEN_ODA\n          LR   R5,R3\n          MVCL R4,R2\n*\n          LHI  R1,MQOPEN_LENGTH\n          STH  R1,OUTPUT_LENGTH\n*\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* CALL MQCLOSE,(HCONN,HOBJ,OPTIONS,COMPCODE,REASON)\n*\n* HCONN     DS  F  CONNECTION HANDLE\n* HOBJ      DS  F  OBJECT HANDLE\n* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE\n* COMPCODE  DS  F  COMPLETION CODE\n* REASON    DS  F  REASON CODE QUALIFYING COMPCODE\n*\nMQI_CLOSE  DS   0F\n          STM  R0,R15,SAVEREGS\n* HCONN     DS  F  CONNECTION HANDLE\n          L    R2,MQXP_PCOPYPARM1\n          MVC  HCONN,0(R2)\n* HOBJ      DS  F  OBJECT HANDLE\n          L    R2,MQXP_PCOPYPARM2\n          MVC  HOBJ,0(R2)\n* OPTIONS   DS  F  OPTIONS THAT CONTROL THE ACTION OF MQCLOSE\n          L    R2,MQXP_PCOPYPARM3\n          MVC  OPTIONS,0(R2)\n* COMPCODE  DS  F  COMPLETION CODE\n          L    R2,MQXP_PCOPYPARM4\n          MVC  COMPCODE,0(R2)\n* REASON    DS  F  REASON CODE QUALIFYING COMPCODE\n          L    R2,MQXP_PCOPYPARM5\n          MVC  REASON,0(R2)\n*\n          LHI  R1,MQCLOSE_LENGTH\n          STH  R1,OUTPUT_LENGTH\n*\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* CALL MQGET,(HCONN,HOBJ,MSGDESC,GETMSGOPTS,BUFFERLENGTH,\n*             BUFFER,DATALENGTH,COMPCODE,REASON)\n*\n* HCONN         DS       F    CONNECTION HANDLE\n* HOBJ          DS       F    OBJECT HANDLE\n* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR\n* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET\n* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA\n* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA\n* DATALENGTH    DS       F    LENGTH OF THE MESSAGE\n* COMPCODE      DS       F    COMPLETION CODE\n* REASON        DS       F    REASON CODE QUALIFYING COMPCODE\n*\nMQI_GET   DS   0F\n          STM  R0,R15,SAVEREGS\n* HCONN         DS       F    CONNECTION HANDLE\n          L    R2,MQXP_PCOPYPARM1\n          MVC  HCONN,0(R2)\n* HOBJ          DS       F    OBJECT HANDLE\n          L    R2,MQXP_PCOPYPARM2\n          MVC  HOBJ,0(R2)\n* COMPCODE      DS       F    COMPLETION CODE\n          L    R2,MQXP_PCOPYPARM8\n          MVC  COMPCODE,0(R2)\n* REASON        DS       F    REASON CODE QUALIFYING COMPCODE\n          L    R2,MQXP_PCOPYPARM9\n          MVC  REASON,0(R2)\n* BUFFERLENGTH  DS       F    LENGTH IN BYTES OF THE BUFFER AREA\n          L    R2,MQXP_PCOPYPARM5\n          MVC  BUFFER_LENGTH,0(R2)\n* DATALENGTH    DS       F    LENGTH OF THE MESSAGE\n          L    R2,MQXP_PCOPYPARM7\n          MVC  DATA_LENGTH,0(R2)\n* MSGDESC       CMQMDA   ,    MESSAGE DESCRIPTOR\n          L    R2,MQXP_PCOPYPARM3\n          LA   R3,MQMD_LENGTH\n          LA   R4,MQGET_MDA\n          LR   R5,R3\n          MVCL R4,R2\n* GETMSGOPTS    CMQGMOA  ,    OPTIONS THAT CONTROL THE ACTION OF MQGET\n          L    R2,MQXP_PCOPYPARM4\n          LA   R3,MQGMO_LENGTH\n          LA   R4,MQGET_GMOA\n          LR   R5,R3\n          MVCL R4,R2\n* BUFFER        DS       CL(N) AREA TO CONTAIN THE MESSAGE DATA\n          L    R2,MQXP_PCOPYPARM6\n          L    R3,DATA_LENGTH\n          CHI  R3,512\n          BNH  MQGET_LENGTH_OK\n          LHI  R3,512\nMQGET_LENGTH_OK DS 0H\n          LA   R4,BUFFER\n          LR   R5,R3\n          MVCL R4,R2\n*\n          LHI  R1,MQGET_LENGTH\n          STH  R1,OUTPUT_LENGTH\n*\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* CALL MQPUT,(HCONN,HOBJ,MSGDESC,PUTMSGOPTS,BUFFERLENGTH,       X\n*             BUFFER,COMPCODE,REASON)\n*\n* HCONN         DS       F     CONNECTION HANDLE\n* HOBJ          DS       F     OBJECT HANDLE\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n* BUFFER        DS       CL(N) MESSAGE DATA\n* COMPCODE      DS       F     COMPLETION CODE\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n*\nMQI_PUT   DS   0F\n          STM  R0,R15,SAVEREGS\n* HCONN         DS       F     CONNECTION HANDLE\n          L    R2,MQXP_PCOPYPARM1\n          MVC  HCONN,0(R2)\n* HOBJ          DS       F     OBJECT HANDLE\n          L    R2,MQXP_PCOPYPARM2\n          MVC  HOBJ,0(R2)\n* COMPCODE      DS       F     COMPLETION CODE\n          L    R2,MQXP_PCOPYPARM7\n          MVC  COMPCODE,0(R2)\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n          L    R2,MQXP_PCOPYPARM8\n          MVC  REASON,0(R2)\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n          L    R2,MQXP_PCOPYPARM5\n          MVC  BUFFER_LENGTH,0(R2)\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n          L    R2,MQXP_PCOPYPARM3\n          LA   R3,MQMD_LENGTH\n          LA   R4,MQPUT_MDA\n          LR   R5,R3\n          MVCL R4,R2\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          L    R2,MQXP_PCOPYPARM4\n          LA   R3,MQPMO_LENGTH\n          LA   R4,MQPUT_PMOA\n          LR   R5,R3\n          MVCL R4,R2\n* BUFFER        DS       CL(N) MESSAGE DATA\n          L    R2,MQXP_PCOPYPARM6\n          L    R3,BUFFER_LENGTH\n          CHI  R3,512\n          BNH  MQPUT_LENGTH_OK\n          LHI  R3,512\nMQPUT_LENGTH_OK DS 0H\n          LA   R4,BUFFER\n          LR   R5,R3\n          MVCL R4,R2\n*\n          LHI  R1,MQPUT_LENGTH\n          STH  R1,OUTPUT_LENGTH\n*\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*\n* CALL MQPUT1,(HCONN,OBJDESC,MSGDESC,PUTMSGOPTS,BUFFERLENGTH,   X\n*              BUFFER,COMPCODE,REASON)\n*\n* HCONN         DS       F     CONNECTION HANDLE\n* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n* BUFFER        DS       CL(N) MESSAGE DATA\n* COMPCODE      DS       F     COMPLETION CODE\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n*\nMQI_PUT1  DS   0F\n          STM  R0,R15,SAVEREGS\n* HCONN         DS       F     CONNECTION HANDLE\n          L    R2,MQXP_PCOPYPARM1\n          MVC  HCONN,0(R2)\n* COMPCODE      DS       F     COMPLETION CODE\n          L    R2,MQXP_PCOPYPARM7\n          MVC  COMPCODE,0(R2)\n* REASON        DS       F     REASON CODE QUALIFYING COMPCODE\n          L    R2,MQXP_PCOPYPARM8\n          MVC  REASON,0(R2)\n* BUFFERLENGTH  DS       F     LENGTH OF THE MESSAGE IN BUFFER\n          L    R2,MQXP_PCOPYPARM5\n          MVC  BUFFER_LENGTH,0(R2)\n* OBJDESC       CMQODA   ,     OBJECT DESCRIPTOR\n          L    R2,MQXP_PCOPYPARM2\n          LA   R3,MQOD_LENGTH\n          LA   R4,MQPUT1_ODA\n          LR   R5,R3\n          MVCL R4,R2\n* MSGDESC       CMQMDA   ,     MESSAGE DESCRIPTOR\n          LA   R3,MQOD_LENGTH\n          L    R2,MQXP_PCOPYPARM3\n          LA   R3,MQMD_LENGTH\n          LA   R4,MQPUT1_MDA\n          LR   R5,R3\n          MVCL R4,R2\n* PUTMSGOPTS    CMQPMOA  ,     OPTIONS THAT CONTROL THE ACTION OF MQPUT\n          L    R2,MQXP_PCOPYPARM4\n          LA   R3,MQPMO_LENGTH\n          LA   R4,MQPUT1_PMOA\n          LR   R5,R3\n          MVCL R4,R2\n* BUFFER        DS       CL(N) MESSAGE DATA\n          L    R2,MQXP_PCOPYPARM6\n          L    R3,BUFFER_LENGTH\n          CHI  R3,512\n          BNH  MQPUT1_LENGTH_OK\n          LHI  R3,512\nMQPUT1_LENGTH_OK DS 0H\n          LA   R4,BUFFER\n          LR   R5,R3\n          MVCL R4,R2\n*\n          LHI  R1,MQPUT1_LENGTH\n          STH  R1,OUTPUT_LENGTH\n*\n          LM   R0,R15,SAVEREGS\n          BR   R14\n*-------------------------------------------------------------*\n* CONSTANTS, EQUATES & MESSAGES                               *\n*-------------------------------------------------------------*\n         LTORG\n*\nZERO     DC  A(0)\nONE      DC  AL2(1)\nFOUR     DC  AL2(4)\n*\nMQTT     DC  C'MQTT'\n*\nMQI_CALLS DS  0F\n          DC  A(MQXC_MQOPEN),A(MQI_OPEN)\nMQICALLS_LENGTH EQU *-MQI_CALLS\n          DC  A(MQXC_MQCLOSE),A(MQI_CLOSE)\n          DC  A(MQXC_MQGET),A(MQI_GET)\n          DC  A(MQXC_MQPUT),A(MQI_PUT)\n          DC  A(MQXC_MQPUT1),A(MQI_PUT1)\nNO_MORE   DC  A(-1)\n*\n****************************\n* MQI CONSTANTS            *\n****************************\n         CMQA  LIST=YES\n*\n         END  CSQCAPX\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SITOVER": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07\\x14\\x7f\\x01\\x07\\x14\\x7f\\x10%\\x00\\x02\\x00\\x02\\x00\\x00\\xd2\\xe6\\xc1\\xc9\\xd3\\xc5\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-05-27T00:00:00", "modifydate": "2007-05-27T10:25:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "KWAILES"}, "text": "INITPARM=(CSQCAPX='MQTT'),\nINITPARM=(CAPXPRNT='MQTR'),\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT759/FILE759.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT759", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}