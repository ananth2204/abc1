{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011044000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3056872, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 20, "INMDSNAM": "CBT.V500.FILE013.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3056872, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3056872, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE013.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x001\\x0e'", "DS1TRBAL": "b'\\x0f$'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\x00'\\x00\\x01\\x00*\\x00\\x05\\x002\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00$\\x01\\x16%/\\x01\\x16%/\\x104\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-09-08T00:00:00", "modifydate": "2016-09-08T10:34:24", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-493"}, "text": "REGULAR CBT TAPE - VERSION 493    FILE:  013\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT493.FILE013\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 86 MEMBERS COUNTED; CUMULATIVE SIZE IS 28,414 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/08/16    10:34:24    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DISC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE013"}, "text": "\nDisclaimer:\n\nThe contents of this file are for the use of SHARE member companies.  There are\nno warranties, either expressed, or implied on any the programs contained\nwithin. The authors try to test as much as is reasonable, but it is ultimately\nthe responsibility of the user to ensure that the programs will not compromise\nthe integrity of their environment. In other words, these programs are 'Use at\nyour own Risk'.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE013"}, "text": "\nThis dataset contains RACF exits, utility programs, CLISTs, command\nprocessors, and tables that RACF installations will find useful.\nMember $$INDEX contains a description of each member on the file.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$INDEX": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01?\\x01?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 319, "newlines": 319, "modlines": 0, "user": "FILE013"}, "text": "Version 007\n             Current Contents of the SHARE RACF Mods Tape\n                       as of December 28th, 1988\n\n\nMember              Description\n--------            ----------------------------------------------------\n$$$DISC             Disclaimer.\n$$$DOC              Brief description of what is on this file.\n$$INDEX             This member,\n$$THANKS            A Thank You to contributors.\nACFEXIT             ROSCOE sign on exit that checks RACF password, and\n                      builds an ACEE, etc. for ROSCOE users\nCLEANACL            CLEANACL's purpose is to check every access list in\n                      the RACF dataset to see whether each one contains\n                      any non-existent userids or group names. If so, it\n                      creates the RACF commands to remove them.\nDSAEXIT             ROSCOE dataset authorization checking exit. Performs\n                      a RACHECK for datasets accessed by ROSCOE users.\nICHPWX01            RACF password exit that disallows users from\n                      changing their passwords multiple times to re-use\n                      old passwords.\nICHRCX01            RACHECK pre-processing exit which allows an\n                      installation to bypass operator prompts during\n                      FAILSOFT processing.\nICHRCX02            RACHECK post-processing exit which (among other\n                      things) provides a 'warning' feature for TAPEDSN\n                      (Must be used with ICHRDX01 exit in this file).\nICHRDSNU            Sample dataset names table that can be used when\n                      you want the operator prompted for the names of\n                      your RACF datasets.\nICHRDX01            RACDEF pre-processing exit to provide a 'warning'\n                      feature when using TAPEDSN to protect tapes.\nICHRIX02            RACINIT post-processing exit to prevent JES\n                      propagation of selected userids.\nIGC0023I            An SVC that will turn the JSCB authorization bit\n                      on or off if the calling routine is in PLPA, or\n                      if it is issued by a RACF defined user that is\n                      authorized to the RACF application SVC239.\nJESEXIT2            JES exit #2 that validates JOB card parameters by\n                      doing a third-party-RACHECK to see if a non-standard\n                      JOB card may be used by the job.\nJES020              JES exit #20 that inserts programmer name, room#,\n                      message class in JOB cards for Started Tasks,\n                      TSO userids. and jobs submitted without JOB cards.\nJES020S             SMP/E statements for installing JES020 exit.\nJOBACESS            TRIANGLE SYSTEMS' product, IOF, contains a RACF\nJOBACOPY              interface that controls JES held output.\n                      Only useful if you already have 'IOF'. This\n                      is simply an example of how it can be done.\nLISTRP              Program to show which dataset profiles protect\n                      cataloged datasets. Original from SAMPLIB - was\n                      converted to PL/I from CLIST.\nLISTU               TSO command which will accept a user-id as input\n                      and return the user's name and default group.\n                      Nice way for anyone to find out the name\n                      that goes along with a user-id.\nNJEPROP1            JES/NJE propagation support usermod for JES 1.3.4\n                      Application of this usermod (thru SMP/E) will\n                      utilize JES propagation across NJE nodes,\n                      thus allowing RACF password encryption to\n                      be turned on.\nNJEPROP2            JES/NJE propagation support usermod for JES 2.1.5\n                      same as above, except for JES 2.1.5/MVS 2.1.7\nNJEPROP3            JES/NJE propagation support usermod for JES 2.2.0\nOMRACF              OMEGAMON/MVS RACF interface.\n                      This source is provided by Candle Corp.,\n                      however, there are some minor changes that\n                      may be of interest to others.\nRACFALT             Generates a CLIST of ALTDSD commands to change\n                      volsers of all profiles referencing a specific\n                      volume to point to a different volume.\nRACFDOC             Instructions and sample JCL to run the RACFRPT\n                      report writer program.\nRACFDSET            Produces a flat file of RACF dataset profile information\n                      that can be used as input to report writing programs.\nRACFGRES            Produces a flat file of RACF general resource profile\n                      information that can be used as input to report\n                      writing programs.\nRACFGRP1            Produces a flat file of RACF group profile information\n                      that can be used as input to report writing programs.\nRACFGRP2            Produces a flat file of RACF group profile information\n                      that can be used as input to report writing programs.\n                      Note that the information is different from that\n                      created in RACFGRP1.\nRACFLIST            CLIST to execute the LISTRP program.\nRACFPROF            Program to read the RACF dataset and write the\n                      contents out to a vb dataset for later use.\nRACFPROT            This TSO command accepts one or more catalog\n                      nodes and uses IKJEHCIR to do a catalog locate.\n                      A RACHECK 'PRIVATE' is then done for each data set\n                      name to find out what generic profile protects\n                      the data set. The data set name and profile name\n                      are then written to the terminal via PUTLINE.\nRACFRPT             A program to produce slick RACF reports using SMF\n                      data.\nRACFSAMP            Sample job to produce cross-reference reports using\n                      programs RACFUSR, RACFGRES, SAS, and DYL280.\nRACFSUMM            Program similar to RACFPROF, except the output\n                      dataset contains 80 byte records containing the\n                      profile type, and the name of the profile. Useful\n                      as input to SAS programs.\nRACFTSO5            Program to read UADS and copy over the initial TSO\n                      command field (which RACONVRT doesn't do).\nRACFUSER            Program to read the RACF dataset and print a report\n                      listing password expiration data.\nRACFUSR             Produces a flat file of user profile information for\n                      input to report writing programs.\nRACRIX01            RACINIT pre-processing exit to construct userids\n                      for production jobs and to prevent any job from\n                      starting if no userid is present.\nRACRIX02            RACINIT post-processing exit to check ABENDs and\n                      return codes from RACINIT and decide whether to\n                      kill a job or not.\nRGROUP              Program to change the group to which a user of job\n                      is currently connected.\nSACXTRT             Program to extract connect profile information.\nSACXTRT             Program to extract group profile information.\nSANOADSP            Program to turning off 'ADSP' on user profiles.\nSAPXTRT             Program to extract User-id and Password info.\nSARUSRUX            SAR exit to verify userid and password when SAR is\n                      executed under ROSCOE.\nSASRGEN             SAS program which produces a set of generic\n                    profiles from a set of discrete profiles.  This\n                    can be of use to installations wanting a tool\n                    to automate conversion from discrete to generic\n                    profiles.\nSASRLIST            SAS program to produce a concise access list\n                    report from output of the LISTDSD command.\nSAUNMASK            Program for unmasking a user's password in RACF.\nSAUXTRT             Program to extract user profile information.\nSETPW               TSO command to 'set' a userid's password without\n                      the password expiring.  Useful when you need to\n                      set a userid's password, but do not want the\n                      passdate changed to zeros.\nSETPW2              A different version of the 'SETPW' command that\n                      authorizes users without special to perform the\n                      equivilent of 'ALTUSER userid RESUME PASSWORD(x)\n                      For special users, it works just like 'SETPW'.\nSETUSER             TSO command processor used to insert information\n                      into the RACF user profile for use by the JES020\n                      exit that is on this file.\nSETUSERH            TSO HELP file for the SETUSER TSO command.\nSETUSERS            SMP/E statements for installing the SETUSER command.\nSTARTASK            Macro to easily code the RACF Started task table\n                      ICHRIN03.\nSUBEXIT             ROSCOE submit exit which checks installation job\n                      card rules, and puts the RACF userid, password,\n                      and default group on the JOB card.\nTEC107              Flip all the 'RACF BITS' for NON-VSAM ds on a VTOC\n                      volume.  This is from the SHARE CBT mods tape,\n                      however, this has been modified to work in an\n                      'XA' environment, which the SHARE version did\n                      not.\nTECZ00              ISPF message member for VLOGON.\nTMPFRONT            Front end to the TMP to allow turning off of TSO\n                      for all but Tech Support users during system\n                      test times.\nTMS#RACF            Portion of an 'IEFUJI' exit to place the RACF\n                      userid of a JOB that uses UCC1/TMS services\n                      into the UCC1/TMS accounting information\n                      fields for 'owner' data.\nTSOSUB01            TSO submit exit to put userid and password on the\n                      job card.\nUADSDUMP            Program to dump 'SYS1.UADS' and generate the\n                      control cards for 'ACCOUNT' to re-build\n                      'SYS1.UADS'.\nUADSREF             Program to generate the 'ACCOUNT' control\n                       cards for adding/deleting of userids\nUCC7DSNX            UCC7 external dataset exit.\nUCC7LOGF            UCC7 logoff exit to delete the ACEE.\nUCC7LOGO            UCC7 logon exit to create the ACEE, etc.\nUNPROTCT            Produces AMASPZAP control cards to turn off all\n                      RACF VTOC bits on a volume.\nVLOGON              ISPF dialog to allow updates to certain TSO logon\n                      fields.  This may be useful if you use RACF 1.8\n                      TSO support but don't use the std. LOGON screen.\n                      References VLOGONP, TECZ00.\nVLOGONP             Panel for VLOGON to use.  References tutorial panel\n                      VLOGONT (not provided).\nWHOIS               TSO command to look at a RACF userid's \"NAME\"\n                       field and display it at a terminal.\nWPC                 The 'What Profile Covers' command.  Authorized TSO\n                       command processor will tell you what profile\n                       (discrete or generic) protects a dataset. (This\n                       is similar to RACFPROT, but does a specified\n                       dataset name instead of a catalog node.)\nZAPDFP              This used to be a ZAP to DFP to bypass the 'kick down'\n                       of tapes when using TAPEDSN. IBM has now come up\n                       with an acceptable way to get around this. See this\n                       member for the APAR, PTFs, etc.\n\n\n\nThere are two files on the SHARE MVS GROUP mods tape that are also\nRACF related and may be useful. They are:\n\n   File 024 - Some sample exits, and sample programs to test RACF\n              macros. This stuff is old, but may be useful.\n\n   File 026 - Miller Brewing RACF mods. Includes UCC1 mods for tape\n              protection, exits, SMF processing programs. This stuff\n              is also old, but still in use at some sites.\n\n------------------------------------------------------------------------\nAny additions, corrections, deletions, etc. should be sent to:\n------------------------------------------------------------------------\n\n               Jim Blalock\n               Information Technology Center\n               Clemson Research Park\n               340 Computer Court            (FedEx, etc)\n               Rt. 3, Box 500                (US Mail)\n               Anderson, SC  29625\n               (803) 656-3680\n\n       BitNet: CAREY@CLEMSON                 (if you can reach BitNet)\n\nNew mods are always welcome. Please send them with documentation on a 6250\nBPI tape, or on a 3480 cartridge.\n\n------------------------------------------------------------------------\nVersion 001   04/01/87\n------------------------------------------------------------------------\nThe first one...\n\n------------------------------------------------------------------------\nVersion 002   05/19/87\n------------------------------------------------------------------------\n\nNew version of RACFRPT that cleaned up some bugs and allowed the use of\n  the 'STATS' option to give a roll-up of violations.\nNew version of $NOPROP exit to disallow userid propagation.\nAddition of the WHOIS command processor that displays the RACF name\n  field for the userid passed to it.\nAddition of a SAR user exit to provide userid and password when executing\n  SAR under ROSCOE.\nNew version of macro ACHKLIST which is used in some exits on this tape.\nAddition of a RACHECK post-processing exit that provides a warning feature\n  for TAPEDSN.\nAddition of a ZAP to DFP R2.2 to ignore the 'write enabled' so MVS does not\n  kick down tapes with TAPEDSN turned on.\nAddition of SASRGEN and SASRLIST SAS programs from Dan Squillace. SASRGEN\n  will build RACF commands to create generic profiles out of discrete\n  profiles - great for going generic! SASRLIST will create a report of\n  what is on dataset profile access lists.\n\n------------------------------------------------------------------------\nVersion 003   06/15/87\n------------------------------------------------------------------------\n\nNew version of ICHRIX02 (RACINIT post-processing) exit to prevent JES\n  propagation of selected user ids (renamed $NOPROP).\nNew version of ICHRCX02 (RACHECK post-processing) exit to provide a\n  warning feature when using TAPEDSN.\nICHRDX01 (RACDEF pre-processing) exit to provide the rest of what is\n  needed for a 'warning' feature for when you use TAPEDSN.\n\n------------------------------------------------------------------------\nVersion 004   12/15/87\n------------------------------------------------------------------------\n\nPut all loose macros into one member called 'MACROS'.\nAdded members NJEPROP3, SACXTRT, SAGXTRT, SANOADSP, SAPXTRT, SAUNMASK,\n  SAUXTRT. Updates for members ICHRCX02, ICHRDX01, UCC7LOGO.\nChanged version numbers on ISPF stats to conform to version number of\n  the tape it was last changed on.\nAdded 5 programs from Scott Wilson at the City of Long Beach Ca. that will\n  dump information from the RACF database for various profile types.\n  The JCL to run the programs is included. Members are: RACFDSET, RACFGRES,\n  RACFGRP1, RACFGRP2, RACFUSR. As sample application which uses two of these\n  programs is included in member RACFSAMP.\n\n------------------------------------------------------------------------\nVersion 005   01/19/88\n------------------------------------------------------------------------\n\nRemoved usermod code in member 'ZAPDFP' because IBM has supplied the\n  function via an APAR and PTFs (See member for details).\nReplaced the following with updated versions: ICHRCX02, ICHRDX01, NJEPROP1,\n  NJEPROP2, NJEPROP3, SACXTRT, SAGXTRT, SANOADSP, SAPXTRT,SASSXXL1, SAUNMASK,\n  SAUXTRT, WHOIS.\nRemoved macros ADEFLIST, ACHKLIST from MACROS member, as they are now in-line\n  in the code of ICHRCX02, ICHRDX01.\n\n------------------------------------------------------------------------\nVersion 006   11/30/88\n------------------------------------------------------------------------\n\nAdded RACHECK Pre-processing exit ICHRCX01 which allows all accesses during\n  failsoft processing (and bypasses operator prompts) and performs logging\n  for each access.\nAdded a new version of the RACFRPT report writing program. Also updated the\n  documentation member for RACFRPT - RACFDOC.\nChanged my address and phone number to reflect the move to our new site.\n\n------------------------------------------------------------------------\nVersion 007   12/28/88\n------------------------------------------------------------------------\n\nAdded LISTU TSO command which will accept a user-id as input and return the\n  user's name and default group. Nice way for anyone to find out the name\n  that goes along with a user-id.\nAdded RACFPROT TSO command. This command accepts one or more catalog\n  nodes and uses IKJEHCIR to do a catalog locate. A RACHECK 'PRIVATE' is\n  then done for each data set name to find out what generic profile\n  protects the data set. The data set name and profile name are then written\n  to the terminal via PUTLINE.\nAdded JESEXIT2 exit. This is a JES2 exit #2 that uses the third-party\n  RACHECK feature of RACF 1.8 to validate JOB card information.\n\n------------------------------------------------------------------------\nVersion 008   01/19/89\n------------------------------------------------------------------------\n\n. Taken over from Stuart Sabel by Jim Blalock (Stuart did alot of work!)\n. New version of CLEANACL that handles generic dataset profiles better\n. Added RACFTSO5, TECZ00, VLOGON, and VLOGONP.\n. Added WPC command.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$THANKS": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE013"}, "text": "\nThe SHARE RACF Committee would like to thank all of the folks that took the\ntime to send their mods! (especially Mr. Gene Lew who has provided the\nbulk of these mods) They are greatly appreciated!\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$NOPROP": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\\\\\x01\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 348, "newlines": 348, "modlines": 0, "user": "FILE013"}, "text": "//*------------------------------------------------------------------*\n//*  UMODXXX - RACINIT POST-PROCESSING EXIT                          *\n//*------------------------------------------------------------------*\n//UMODXXX  EXEC PGM=GIMSMP,REGION=4096K\n//SMPCSI   DD DSN=SMP.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SMPCNTL  DD *\n SET BDY(GLOBAL).\n RECEIVE SYSMODS.\n SET BDY(TARGET).\n APPLY S(UMODXXX) REDO COMPRESS(ALL).\n/*\n//SMPPTFIN DD DATA,DLM=$$\n++USERMOD (UMODXXX)\n  /*\n     RACINIT POST-PROCESSING EXIT FOR PREVENTION OF PROPAGATION\n     OF SPECIFIED USERIDS(I.E. - FOR CICS, IMS, WYLBUR, ETC.).\n                                                              */.\n++VER (Z038) FMID (HRF1702) .\n++JCLIN.\n//S1      EXEC PGM=IEV90,PARM='LIST,RENT,DECK,NOLOAD'\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPUNCH DD DSN=&&OBJMOD(ICHRIX02),DISP=(,PASS),UNIT=SYSDA,\n//            SPACE=(CYL,(1,1,1),RLSE),DCB=BLKSIZE=800\n//S2       EXEC PGM=IEWL,PARM='XREF,LIST,RENT'\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(5,2))\n//SYSPRINT DD SYSOUT=*\n//OBJMOD   DD DSN=SYS1.OBJMOD,DISP=OLD\n//SYSLMOD  DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN   DD *\n  INCLUDE OBJMOD(ICHRIX02)\n  ENTRY ICHRIX02\n  NAME  ICHRIX02(R)\n/*\n++SRC (ICHRIX02)\n      SYSLIB(UMODSRC)\n      DISTLIB(AUMODSRC)\n      /*\n         SOURCE FOLLOWS\n                          */.\nRIX      TITLE 'ICHRIX02  -  RACF - RACINIT POST-PROCESSING EXIT'\n***********************************************************************\n***                                                                 ***\n***      MODULE - ICHRIX02                                          ***\n***                                                                 ***\n***                                                                 ***\n***      THIS IS AN EXIT TO SHOW HOW RACF CAN BE USED               ***\n***      TO CONTROL JES USER IDENTITY PROPAGATION.                  ***\n***                                                                 ***\n***      JOBS WHICH ARE PROPAGATED FROM USERIDS FOR WHICH           ***\n***      JES USERID PROPAGATION HAS BEEN DISALLOWED WILL            ***\n***                                                                 ***\n***         1)  BE RUN UNDER AN ACEE FOR A NON-RACF DEFINED USER    ***\n***                                                                 ***\n*** OPT NOT 2)  OR ABEND WITH ABEND CODE 383 (INVALID RACINIT       ***\n***  CODED      EXIT RETURN CODE),                                  ***\n***                                                                 ***\n***         3)  AND RECEIVE MESSAGE                                 ***\n***           \"ICHRIX02 - USERID NOT AUTHORIZED FOR JES PROPAGATION\"***\n***                                                                 ***\n***             THIS MESSAGE WILL ALSO APPEAR ON THE MVS CONSOLE    ***\n***             DESIGNATED FOR SECURITY MESSAGES.                   ***\n***                                                                 ***\n***      USE NOTES:                                                 ***\n***      THIS EXIT USES PASSCHK=NO AS A TRIGGER THAT PROPAGATION    ***\n***      OF USERID IS OCCURRING.  PASSCHK=NO IS USED BY SUBSYSTEMS  ***\n***      OTHER THAN THE JES PROPAGATION CODE AND MAY BE USED BY     ***\n***      INSTALLATION WRITTEN CODE.  AN EXAMPLE OF SUCH CODE IS     ***\n***      TSO/E WHICH WILL USE PASSCHK=NO TO FIND OUT WHETHER A      ***\n***      USER IS RACF DEFINED BEFORE DISPLAYING THE FULLSCREEN      ***\n***      LOGON PANEL.  THIS EXIT WILL CHECK FOR THE CASE OF A TSO   ***\n***      USER LOGGING ON, AND ALLOW THE RACINIT TO SUCCEED.         ***\n***      HOWEVER, IF THE TSO USER SUBMITS ANY JOBS, THE USER'S      ***\n***      USERID AND PASSWORD MUST BE CODED ON THE JOB CARD (I.E     ***\n***      PROPAGATION CANNOT BE USED BY THAT TSO USER).              ***\n***      THIS EXIT IS NOT USED TO CONTROL SUBMIT BY TSO USERS.      ***\n***      (CONTROL OF SUBMIT CAN BE ACCOMPLISHED THROUGH THE JCL     ***\n***      AUTHORITY IN UADS OR BY A WRITING A TSO/SUBMIT EXIT).      ***\n***                                                                 ***\n***      INSTALLATIONS USING DB2 SHOULD APPLY THE PTF ASSOCIATED    ***\n***      WITH OZ96264 WHICH CAUSES THE ASXBUSER FIELD TO BE UPDATED ***\n***      TO REFLECT THE ANY NEW USERID INSERTED VIA THIS EXIT.      ***\n***                                                                 ***\n***      REQUIREMENTS:                                              ***\n***                                                                 ***\n***      1. CLASS 'FACILITY' MUST BE ACTIVATED. AN ENTRY MUST       ***\n***         BE DEFINED TO THE FACILITY CLASS AS FOLLOWS.            ***\n***                                                                 ***\n***         RDEFINE FACILITY $NOPROPAGATE.N1  UACC(NONE)            ***\n***                                                                 ***\n***         WHERE 'N1' IS THE USERID FOR WHICH JES USERID           ***\n***         PROPAGATION IS TO BE DISALLOWED.                        ***\n***                                                                 ***\n***         NOTE THAT IT IS NOT NECESSARY TO PERMIT ANY USERS       ***\n***         TO THIS RESOURCE. NOTE ALSO THAT WHEN THIS ROUTINE      ***\n***         GETS CONTROL, THE ACEE WILL HAVE BEEN CREATED           ***\n***         AND ITS USERID WILL BE THE USERID FOR WHICH             ***\n***         PROPAGATION IS DISALLOWED (IE, IMS, CICS, ETC.).        ***\n***                                                                 ***\n***      2. GLOBAL ACCESS CHECKING SHOULD BE ESTABLISHED            ***\n***         FOR THESE ENTRIES TO ENSURE GOOD PERFORMANCE            ***\n***         AS FOLLOWS.                                             ***\n***                                                                 ***\n***         RDEFINE GLOBAL FACILITY ADDM($NOPROPAGATE.N1/NONE)      ***\n***         RALTER  GLOBAL FACILITY ADDM($NOPROPAGATE*/READ)        ***\n***                                                                 ***\n***         WHERE 'N1' IS THE USERID FOR WHICH JES USERID           ***\n***         PROPAGATION IS TO BE DIS-ALLOWED.                       ***\n***                                                                 ***\n***         NOTE THAT THE ENTRY '$NOPROPAGATE*/READ'                ***\n***         ALLOWS ALL REQUESTS FOR JOBS FOR UNCONTROLLED           ***\n***         USERIDS TO PROCESS THROUGH THIS ROUTINE                 ***\n***         WITHOUT CAUSING ANY ADDITIONAL                          ***\n***         I/O TO THE RACF DATA SET.                               ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***      RETURN CODES:                                              ***\n***         0 - EXIT ROUTINE PROCESSING IS COMPLETE, NORMAL         ***\n***             RACINIT SVC PROCESSING IS TO CONTINUE.              ***\n***                                                                 ***\n***         4 - SET UP TO REDRIVE RACINIT BLANKING OUT THE          ***\n***             USERID, PASSWORD, GROUP, AND NEWPASSWORD            ***\n***             IN THE PARAMETER LIST                               ***\n***                                                                 ***\n***NOT USED 8 - CAUSE ABEND 383 TO OCCUR.                           ***\n***                                                                 ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\n         SPACE  3\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      LOAD MODULE NAME          SYSTEM LIBRARY                   ***\n***      ----------------          --------------                   ***\n***      ICHRIX02 (RENT,REFR)      SYS1.LPALIB                      ***\n***       AMODE(31) RMODE(24)                                       ***\n***                                                                 ***\n***      SYS1.AMODGEN MUST BE AVAILABLE IN THE SYSLIB TO ASSEMBLE   ***\n***      THIS MODULE.                                               ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nICHRIX02 CSECT ,\nICHRIX02 AMODE 31\nICHRIX02 RMODE 24\n         SAVE  (14,12),,ICHRIX02-&SYSDATE-&SYSTIME\n         LR    R12,R15             PROGRAM ADDRESSABILITY\n         USING ICHRIX02,R12\n         LR    R2,R1               SAVE PARM LIST ADDRESS IN R2\n*\n* PROCESS ONLY PASSCHK = NO CREATE REQUESTS FOR OTHER THAN TSO LOGON\n*\n         L     R3,4(R2)            POINT R3 AT FLAG BYTE\n         TM    0(R3),X'08'         IS THIS AN PASSCHK=NO REQUEST ?\n         BZ    RETURN              NO  - RETURN\n         TM    0(R3),X'C0'         IS THIS A CREATE REQUEST?\n         BM    RETURN              NO  - RETURN\n*\n* IF THIS IS SECOND TIME THROUGH SIMPLY EXIT\n*\n         L     R3,52(R2)           POINT R3 AT RACINIT EXIT WORKAREA\n         TM    0(R3),X'FF'         HAVE I BEEN HERE ONCE ALREADY ?\n         BO    RETURNI             IF YES, RETURN\n*TEMP     B     CONTINUE   UNCOMMENT TO DISALLOW PROPAGATION FOR\n*                          TSO USERS.\n         SPACE 1\n*                               IS THIS A TSO USER TRYING TO\n*                                        LOG ON?\n         USING PSA,R0              GET ADDRESSABILITY TO PSA\n         L     R4,PSAAOLD          POINT TO ASCB\n         USING ASCB,R4             ADDRESSABILITY FOR ASCB\n         ICM   R4,15,ASCBTSB       IS THERE A TSB?\n         BZ    CONTINUE            NO  - GO SEE IF PROPAGATION IS\n*                                        ALLOWED\n*                               YES - THIS IS A LOGON, ALLOW IT\n         DROP  R0,R4\n         SPACE 1\nRETURNI  DS   0H\n*        WTO  '2ND TIME THROUGH',ROUTCDE=(9,11)\nRETURN   RETURN (14,12),T,RC=0     RETURN NOW\n*\n* GET SPACE FOR RACROUTE PARM LIST\n*\nCONTINUE L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         GETMAIN RU,               GETMAIN                             *\n               LV=(0),SP=0                 DYNAMIC AREA\n         LR    R11,R1              DYNAMIC AREA ADDRESSABILITY\n         USING DATD,R11            ****\n         ST    R13,SAVEAREA+4      SAVE CALLER'S SAVEAREA ADR\n         ST    R11,8(,R13)         SAVE OUR SAVEAREA ADR\n         LR    R13,R11             OUR SAVEAREA ADR TO R13\n*        WTO   'GETMAIN',ROUTCDE=(9,11)\n*\n* ISSUE RACROUTE FOR AUTHORITY TO ALLOW PROPAGATION\n*\nRACF     DS    0H\n         MVC   AUTHCHK(LRACROUT),RACROUTL INIT RACROUTE MACRO\n         MVC   PROFILE,RACPROF     INIT RACROUTE PROFILE\n         L     R3,8(R2)            POINT TO USERID IN PARM LIST\n         SR    R4,R4               CLEAR REG4\n         IC    R4,0(R3)            GET LENGTH USERID\n         LTR   R4,R4               IF LENGTH ZERO, SKIP BECAUSE\n         BZ    RETURN0                NO USERID BEING PROPAGATED\n         BCTR  R4,0                OTHERWISE DECREMENT BY ONE FOR MVC\n         LA    R5,1(R3)            POINT PAST USERID LENGTH\n         EX    R4,MOVEU            EXECUTE MOVE OF USERID FROM PARMLIST\n         RACROUTE REQUEST=AUTH,    RACHECK REQUEST.                    *\n               CLASS=RACLASS,      CHECK FOR                           *\n               ATTR=READ,          READ                                *\n               ENTITY=PROFILE,     AUTHORITY                           *\n               LOG=NOFAIL,         DO NO LOGGING                       *\n               WORKA=SAFWORK,      SAF WORK AREA.                      *\n               MF=(E,AUTHCHK)\n*\n* PROCESS RETURN CODE\n*\n         LR    R7,R15        SAVE RETURN CODE\n         C     R7,=F'0'            AUTHORIZED ?\n         BE    RETURN0       YES - ALLOW JOB TO CONTINUE PROCESSING\n*\n         C     R7,=F'4'            NOT DEFINED ?\n         BE    RETURN0       YES - ALLOW JOB TO CONTINUE PROCESSING\n*\n         C     R7,=F'8'            NOT AUTHORIZED ?\n*\n         BE    REDRIVE       ELSE - REDRIVE WITH BLANK USERID\n         B     RETURN0             ANY OTHER RETURN CODE IS ILLEGAL\n*\nREDRIVE  DS    0H\n*        WTO   'REDRIVE',ROUTCDE=(9,11)\n*\n         L     R3,8(,R2)      POINT TO USERID IN PARM LIST\n         MVC   0(9,R3),NULL   BLANK OUT USERID IN PARM LIST\n         L     R3,12(R2)      POINT TO PASSWORD IN PARM LIST\n         MVC   0(9,R3),NULL   BLANK OUT PASSWORD IN PARM LIST\n         L     R3,24(R2)      POINT TO GROUP NAME IN PARM LIST\n         MVC   0(9,R3),NULL   BLANK OUT GROUP NAME IN PARM LIST\n         L     R3,28(R2)      POINT TO NEWPASSWORD IN PARM LIST\n         MVC   0(9,R3),NULL   BLANK OUT NEWPASSWORD IN PARM LIST\n         L     R3,52(R2)      POINT TO WORKAREA FOR RACINIT EXITS\n         MVC   0(4,R3),FF     PUT SWITCH IN FOR NEXT TIME THROUGH\n*\nZEROFLG  DS    0H\n*        WTO   'ZEROFLAG',ROUTCDE=(9,11)\n         L     R3,32(R2)           GET ADDRESS OF POINTER TO ACEE\n         NI    38(R3),X'00'        SET NO ATTR & NON-RACF DEFINED\n*\n         LA    R3,4           SET RETURN CODE FOR REDRIVE OF RACINIT\n*\nSETFAIL  DS    0H\n         WTO   'ICHIX02I - USERID NOT AUTHORIZED FOR JES PROPAGATION', *\n               ROUTCDE=(9,11)      ROUTE CODES FOR USER AND SECURITY\n*\n         B     FINAL\nRETURN0  SR    R3,R3               SET RETURN CODE TO ALLOW REQUEST\n*\nFINAL    DS    0H\n*        WTO   'DOING FREEMAIN',ROUTCDE=(9,11)\n         L     R13,SAVEAREA+4      RESTORE R13\n         L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         LR    R1,R11              DYNAMIC DATA ADDRESS TO R1\n         FREEMAIN RU,SP=0,         FREEMAIN                            *\n               LV=(0),             DYNAMIC                             *\n               A=(1)               AREA\n         LR    R15,R3              LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)  RESTORE REGISTERS AND RETURN\n         EJECT\n*\n* DATA AREAS\n*\n         DS    0D                  DOUBLE WORD ALIGN\nDYNSIZE  DC    AL4(SIZEDATD)       DYN AREA SIZE\nRACLASS  DC    AL1(L'RACLASSN)     CLASS NAME FOR RACROUTE\nRACLASSN DC    C'FACILITY'         CLASS NAME FOR RACROUTE\nRACPROF  DC    CL39'$NOPROPAGATE. '      PROFILE FOR RACROUTE\nRACROUTL RACROUTE REQUEST=AUTH,WORKA=*-*,MF=L\nLRACROUT EQU   *-RACROUTL          LENGTH OF RACROUTE MACRO.\nNULL     DS    0H\n         DC    X'00'               LENGTH OF ZERO\n         DC    CL8' '              VALUE 8 BLANKS\nASTER    DS    0H\n         DC    X'01'               LENGTH OF ONE\n         DC    CL8'*'              VALUE SINGLE ASTERISK\n         DS    0D\nMOVEU    MVC   PROFILE+13(0),0(R5) MOVE OF USERID\n         DS    0F\nFF       DC    X'FFFFFFFF'\n         LTORG\n*\n* DSECT FOR THIS PROGRAM'S DYNAMIC AREA\n*\nDATD     DSECT\nSAVEAREA DS    18F                 REGISTER SAVE AREA\nSAFWORK  DS    CL512               SAF WORK AREA.\n         DS    0D\nDOUBLE   DC    D'0'                WORK DOUBLE WORD\nPROFILE  DS    CL39                PROFILE FOR RACROUTE\n         ORG   PROFILE\nRACPPREF DC    C'$NOPROPAGATE.'    PROFILE PREFIX\n         ORG\n         DS    0D\nAUTHCHK  RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*\nSIZEDATD EQU   *-DATD              LENGTH OF DSECT\n*\n*\n*\n* REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nRA       EQU   10\nR11      EQU   11\nRB       EQU   11\nR12      EQU   12\nRC       EQU   12\nR13      EQU   13\nRD       EQU   13\nR14      EQU   14\nRE       EQU   14\nR15      EQU   15\nRF       EQU   15\n*\n         IHAPSA  ,\n         IHAASCB ,\n         END   ,\n/*\n$$\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE013": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04]\\x00\\x17\\x01\\x16%/\\x01\\x16%/\\x104\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf3@@@'", "ispf": {"version": "04.93", "flags": 0, "createdate": "2016-09-08T00:00:00", "modifydate": "2016-09-08T10:34:17", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT-493"}, "text": "//***FILE 013 is a copy of the SHARE RACF Mods Tape from Jim        *   FILE 013\n//*           Blalock of Clemson University in Anderson, South      *   FILE 013\n//*           Carolina.  This file is in IEBUPDTE SYSIN format.     *   FILE 013\n//*           For additional information, see the members called    *   FILE 013\n//*           $$$DOC AND $$INDEX.                                   *   FILE 013\n//*                                                                 *   FILE 013\n//*           THIS FILE HAS BEEN MOVED TO FILE 013 FROM FILE 007.   *   FILE 013\n//*                                                                 *   FILE 013\n//*           email:   carey@clemson.edu                            *   FILE 013\n//*                                                                 *   FILE 013\n//*           SETPW2 fixed to correct a bug, by Harvey Wachtel of   *   FILE 013\n//*           CUNY (City University of New York).  SETPW2A added,   *   FILE 013\n//*           to require some more RACF authority to reset the      *   FILE 013\n//*           passwords.                                            *   FILE 013\n//*                                                                 *   FILE 013\n//*           email:   <Harvey Wachtel> babybaby@uapc.cuny.edu      *   FILE 013\n//*                                                                 *   FILE 013\n//*           WHOIS was fixed by Don Isenstadt to allow up to       *   FILE 013\n//*           8 character userids.  Old version is member WHOIS01.  *   FILE 013\n//*                                                                 *   FILE 013\n//*           Don Isenstadt                                         *   FILE 013\n//*           Technical Specialist, IMS/DB2 DBA                     *   FILE 013\n//*           Database Management and Support                       *   FILE 013\n//*           Parker Hannifin Corporation                           *   FILE 013\n//*           Phone: (216) 896-3067                                 *   FILE 013\n//*           email: don.isenstadt@parker.com                       *   FILE 013\n//*                                                                 *   FILE 013\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ACFEXIT": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x7f\\x01\\x7f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 383, "newlines": 383, "modlines": 0, "user": "FILE013"}, "text": "ACFEXIT  TITLE 'USER EXIT - ACCESS CONTROL - RACF'\n*---------------------------------------------------------------------|\n* ACFEXIT - ROSCOE SIGNON EXIT                                        |\n*---------------------------------------------------------------------|\n***-->   USE SYS1.AMODGEN IN THE ASSEMBLY                             |\n*                                                                     |\n* THIS IS THE ACCESS FACILITY USER EXIT.                              |\n* IT EMPLOYS R.A.C.F. AS ITS ACCESS CHECK TECHNIQUE.                  |\n* COMMUNICATION WITH ROSCOE IS VIA THE PARAMETER BLOCK 'UXDSECT'      |\n* ON ENTRY, R1 -> PARAMETER LIST WITH ONE ENTRY, VIZ. A(UXDSECT)      |\n* THERE ARE VARIOUS TYPES OF CALLS:                                   |\n* 1. VERIFICATION CALL - TO VERIFY THAT ALL THE SIGNON PARAMETERS     |\n*                        ARE VALID                                    |\n*    INPUT:                                                           |\n*          ROSCOE KEY                                                 |\n*          PASSWORD                                                   |\n*          NEW PASSWORD                                               |\n*          RACF GROUP CODE                                            |\n*          TERMINAL NAME                                              |\n*    OUTPUT:                                                          |\n*          R15 - STATUS (0 => NORMAL;4 => LOOK AT R0 FOR FURTHER INFO)|\n*          R0  - FURTHER DESCRIPTION OF STATUS                        |\n*                VALUES AS FOR RESPONSE CODE VALUES FOR RACINIT, WITH |\n*                THE ADDITION THAT A VALUE OF X'40' INDICATES THAT    |\n*                THE PASSWORD HAS BEEN CHECKED, AND THAT ROSCOE       |\n*                NEED NOT CHECK THE PASSWORD ITSELF (A RESPONSE FROM  |\n*                R.A.C.F. OF 0 IS CONVERTED TO X'40')                 |\n*                                                                     |\n*    NOTE: IN ORDER TO ENSURE THAT THIS IS A VERIFY CALL, AND NO      |\n*          MORE, THE MODULE ISSUES A 'RACINIT ENVIR=DELETE'           |\n*          AFTER A SUCCESSFUL 'RACINIT ENVIR=CREATE'                  |\n* 2. INITIALIZATION CALL - TO TAKE WHATEVER ACTION IS NECESSARY       |\n*    TO SIGN THE USER ON.                                             |\n*    IN THE CASE OF RACF, THE RACINIT ISSUED IN THE VERIFY CALL       |\n*    MUST SIMPLY BE REPEATED                                          |\n* 3. TERMINATION CALL - TO SIGN THE USER OFF FROM RACF                |\n*    INPUT:                                                           |\n*          ROSCOE KEY                                                 |\n*    OUTPUT:                                                          |\n*          NONE                                                       |\n* 4. PASSWORD UPDATE CALL - TO CHANGE THE PASSWORD OF A SIGNED-ON     |\n*                           USER                                      |\n*    INPUT:                                                           |\n*          ROSCOE KEY                                                 |\n*          CURRENT PASSWORD                                           |\n*          NEW PASSWORD                                               |\n*    OUTPUT:                                                          |\n*          R15 - STATUS (0 => NORMAL;4 => LOOK AT R0 FOR FURTHER INFO)|\n*          R0  - FURTHER DESCRIPTION OF STATUS                        |\n*                VALUES AS FOR REPONSE CODE VALUES FOR RACINIT        |\n*                                                                     |\n*  THIS EXIT HAS BEEN USED SO FAR IN RELEASES 5.3, 5.3A, 5.4, 5.4A    |\n*                                                                     |\n*---------------------------------------------------------------------|\n         PRINT NOGEN\n         ROPGMHDR ARC='\u00a2LVNO',UPD='\u00a2UPNO',DATE='\u00a2DATEUPD',             X\n               TIME='\u00a2TIMEUPD',NAME='\u00a2MODNAME',                        X\n               DSN='\u00a2DATA-SET-NAME-FOR-THE-LIBRARIAN-MASTER-FILE'\nACFEXIT  ROSUB WORK=ACWK,CLEAR=YES                              CHNGENM\n         L     R8,0(R1)          POINTER TO UXDSECT\n         USING UXDSECT,R8\n         L     R2,UXCODE         A(CALL CODE)\n         L     R2,0(R2)          CALL CODE\n         B     *+4(R2)           CALL APPROPRIATE ROUTINE\n         B     ROSUVER           CODE 0 VERIFY CALL\n         B     ROSUINIT          CODE 4 INITIALIZE CALL\n         B     ROSUTRM           CODE 8 TERMINATE CALL\n         B     ROSUPASS          CODE 12 PASSWORD UPDATE CALL\n         TITLE 'ROSUVER - VERIFY SIGNON PARAMETERS USING RACINIT'\nROSUVER  EQU   *\n         XC    SCBACFB,SCBACFB   CLEAR A(ACEE)\n         L     R2,UXACFPSW       ADDRESS OF PASSWORD\n         LTR   R2,R2             PASSWORD SUPPLIED?\n         BZ    ROSUV20           NO - CLEAR PRIVATE WORK AREA\n         MVC   RACFPSW,0(R2)     MOVE TO PRIVATE WORK AREA\n         B     ROSUV40\nROSUV20  EQU   *\n         XC    RACFPSW,RACFPSW   CLEAR PASSWORD FIELD\nROSUV40  EQU   *\n         L     R2,UXACFNPS       ADDRESS OF NEW PASSWORD\n         LTR   R2,R2             NEW PASSWORD SUPPLIED?\n         BZ    ROSUV60           NO - CLEAR PRIVATE WORK AREA\n         MVC   RACFNPS,0(R2)     MOVE TO PRIVATE WORK AREA\n         B     ROSUV80\nROSUV60  EQU   *\n         XC    RACFNPS,RACFNPS   CLEAR NEW PASSWORD FIELD\nROSUV80  EQU   *\n         BAL   R14,RACINITC      CALL SUBROUTINE - ISSUE RACINIT CREATE\n         L     R15,RACFRESP      RESPONSE CODE\n         LTR   R15,R15           SUCCESSFUL?\n         BNZ   ROSUV100          NO - BYPASS RACINIT ENVIR=DELETE\n         BAL   R14,RACINITD      GO DELETE ENVIRONMENT\nROSUV100 EQU   *\n         L     R0,RACFRESP       RESTORE RACF RESPONSE CODE\n         LTR   R0,R0\n         BNZ   ROSUV900          PROBLEM?\n         LA    R0,X'40'          TELL SIGNON NOT TO CHECK PASSWORD\n         CLC   RACFKEY,UACCKEY    IS ACEE FOR UNIVERSAL ACCESS USER\n         BNE   ROSUV900           IF SO\n         LA    R0,X'00'              HAVE ROSCOE VALIDATE PASSWORD\nROSUV900 EQU   *\n         LA    R15,4             TELL ROSCOE TO LOOK AT R0\n         B     ROSEX             RETURN\n         TITLE 'ROSUINIT - INITIALIZE CALL'\nROSUINIT EQU   *\n         XC    SCBACFB,SCBACFB   CLEAR A(ACEE)\n*  NOTE: THE PRECEDING VERIFY CALL WILL HAVE CHANGED THE PASSWORD\n*        ALREADY, SO WE MUST USE THE 'NEW PASSWORD' FIELD AS THE\n*        PASSWORD\n         L     R2,UXACFNPS       ADDRESS OF NEW PASSWORD\n         LTR   R2,R2             WAS NEW PASSWORD SUPPLIED?\n         BNZ   ROSUI40           YES - NEW PASSWORD TO BE MOVED TO\n*                                PASSWORD WORK AREA\n         L     R2,UXACFPSW       POINT TO PASSWORD\n         LTR   R2,R2             PASSWORD SUPPLIED?\n         BNZ   ROSUI40           YES - MOVE IT IN\n         XC    RACFPSW,RACFPSW   CLEAR PASSWORD FIELD\n         B     ROSUI60\nROSUI40  EQU   *\n         MVC   RACFPSW,0(R2)     SET UP PASSWORD IN WORK AREA\nROSUI60  EQU   *\n         XC    RACFNPS,RACFNPS   CLEAR NEW PSSWORD FIELD REGARDLESS\n         BAL   R14,RACINITC      CALL SUBROUTINE - ISSUE RACINIT CREATE\n         L     R15,RACFRESP      RESPONSE CODE\n         LTR   R15,R15           SUCCESSFUL?\n         BZ    ROSUI70           YES - SETUP SUBMIT PARAMETERS\n         LA    R15,X'04'         TELL ROSCOE TO LOOK AT R0\n         LA    R0,X'04'          TELL ROSCOE TO SIGN USER OFF\n         B     ROSEX             RETURN\nROSUI70  XC    SCBUSER1(12),SCBUSER1 BE SURE  SCBUSER1,2,3 ARE CLEAR\n         CLC   RACFKEY(7),UACCKEY  IF  USER IS UNIVERSAL ACCESS USER\n         BE    ROSEX                   JUST EXIT, ELSE\n         MVC   SCBUSER1(9),RACFPSWL  SAVE RACF PASSWORD & LENGTH\n         XC    SCBUSER1(12),ACCSONT+1     MASK PASSWORD (SIGNON TIME)\n         B     ROSEX             AND EXIT\n         TITLE 'ROSUTRM - TERMINATE CALL'\nROSUTRM  EQU   *\n         XC    SCBUSER1(12),SCBUSER1 CLEAR SCBUSER1,2,3\nROSUT10  EQU   *\n         BAL   R14,RACINITD      GO DELETE ACEE\n         B     ROSEX             RETURN\n         TITLE 'ROSUPASS - PASSWORD UPDATE CALL'\nROSUPASS EQU   *\n         BAL   R14,RACINITD      GO DELETE OLD ACEE\n         L     R2,UXACFPSW       ADDRESS OF PASSWORD\n         LTR   R2,R2             CURRENT PASSWORD SUPPLIED?\n         BNZ   ROSUP20           YES - GO SET UP\n         XC    RACFPSW,RACFPSW   CLEAR CURRENT PASSWORD FIELD\n         B     ROSUP40\nROSUP20  EQU   *\n         MVC   RACFPSW,0(R2)     SET UP PASSWORD IN WORK AREA\nROSUP40  EQU   *\n         L     R2,UXACFNPS       ADDRESS OF NEW PASSWORD\n         LTR   R2,R2             NEW PASSWORD SUPPLIED?\n         BNZ   ROSUP60           YES - GO SET UP\n         MVC   RACFNPS,=C'        ' CLEAR CURRENT PASSWORD FIELD\n         B     ROSUP80\nROSUP60  EQU   *\n         MVC   RACFNPS,0(R2)     SET UP PASSWORD IN WORK AREA\nROSUP80  EQU   *\n         BAL   R14,RACINITC      CALL SUBROUTINE - ISSUE RACINIT CREATE\n         L     R15,RACFRESP      RESPONSE CODE\n         LTR   R15,R15           SUCCESSFUL?\n         BZ    ROSEX             YES - RETURN WITH R15 = 0\n         L     R2,UXACFPSW       ADDRESS OF PASSWORD\n         MVC   RACFPSW,0(R2)     SET UP PASSWORD IN WORK AREA\n         XC    RACFNPS,RACFNPS   CLEAR NEW PASSWORD\n         BAL   R14,RACINITC      CALL SUBROUTINE - ISSUE RACINIT CREATE\n         LTR   R15,R15           SUCCESSFUL?\n         BZ    ROSUP200          JUST RETURN BAD STATUS\n         LA    R15,X'03'         RETURN JUNK STATUS - BOMB\n         B     ROSEX             RETURN\nROSUP200 EQU   *\n         LA    R15,X'04'         TELL ROSCOE TO LOOK AT R0\n         LA    R0,X'04'          RESPONSE - NEW PASSWORD INVALID\n         B     ROSEX             RETURN\n         TITLE 'SUBROUTINE TO EXECUTE RACINIT  ENVIR=CREATE'\nRACINITC EQU   *\n         ST    R14,SAVER14      SAVE RETURN ADDRESS\n         LA    R1,ACCNUM         A(ROSCOE KEY)                  EXITFIX\n         MVC   RACFKEY,0(R1)     SET UP KEY FROM PARAMETER AREA\n         LA    R1,6(R1)          R1 -> LAST CHAR. OF KEY\n         LA    R2,7              COUNTER FOR LENGTH\nRACCLP1  EQU   *\n         CLC   0(1,R1),BLANK     END OF FIELD?\n         BNE   RACCKEYF          YES\n         CH    R2,=H'1'          LOOKED AT WHOLE KEY?\n         BE    RACCKEYF          YES\n         BCTR  R2,0              SUBTRACT 1\n         BCTR  R1,0              SUBTRACT 1 FROM KEY POINTER\n         B     RACCLP1           LOOK AT PREVIOUS CHAR.\nRACCKEYF EQU   *\n         STC   R2,RACFKEYL       ESTABLISHED LENGTH\n         LA    R1,RACFPSW+7      R1 -> LAST CHAR. OF PSWD\n         LA    R2,8              COUNTER FOR LENGTH\nRACCLP2  EQU   *\n         CLC   0(1,R1),BLANK     END OF FIELD?\n         BNE   RACCPSWF          YES\n         CH    R2,=H'1'          LOOKED AT WHOLE PSWD?\n         BE    RACCPSWF          YES\n         BCTR  R2,0              SUBTRACT 1\n         BCTR  R1,0              SUBTRACT 1 FROM PSWD POINTER\n         B     RACCLP2           LOOK AT PREVIOUS CHAR.\nRACCPSWF EQU   *\n         STC   R2,RACFPSWL       ESTABLISHED LENGTH\n         LA    R1,RACFNPS+7      R1 -> LAST CHAR. OF NPSW\n         LA    R2,8              COUNTER FOR LENGTH\nRACCLP3  EQU   *\n         CLC   0(1,R1),BLANK     END OF FIELD?\n         BNE   RACCNPSF          YES\n         CH    R2,=H'1'          LOOKED AT WHOLE NPSW?\n         BE    RACCNPSF          YES\n         BCTR  R2,0              SUBTRACT 1\n         BCTR  R1,0              SUBTRACT 1 FROM NPSW POINTER\n         B     RACCLP3           LOOK AT PREVIOUS CHAR.\nRACCNPSF EQU   *\n         STC   R2,RACFNPSL       ESTABLISHED LENGTH\n         L     R1,UXACFGRP       A(GROUP CODE)\n         LTR   R1,R1             GROUP CODE SUPPLIED?\n         BZ    RACF00            BYPASS GROUP SCAN\n         MVC   RACFGRP,0(R1)     SET UP GROUP FROM PARAMETER AREA\n         LA    R1,7(R1)          R1 -> LAST CHAR. OF GROUP\n         LA    R2,8              COUNTER FOR LENGTH\nRACCLP4  EQU   *\n         CLC   0(1,R1),BLANK     END OF FIELD?\n         BNE   RACCGRPF          YES\n         CH    R2,=H'1'          LOOKED AT WHOLE GROUP?\n         BE    RACCGRPF          YES\n         BCTR  R2,0              SUBTRACT 1\n         BCTR  R1,0              SUBTRACT 1 FROM GROUP POINTER\n         B     RACCLP4           LOOK AT PREVIOUS CHAR.\nRACCGRPF EQU   *\n         STC   R2,RACFGRPL       ESTABLISHED LENGTH\nRACF00   EQU   *\n         LA    R7,RACFPSWL       CURRENT PASSWORD - LTH + FIELD\n         CLC   0(4,R7),=X'00000000' PASSWORD SUPPLIED\n         BNZ   RACF10            BYPASS CLEAR\n         SLR   R7,R7\nRACF10   EQU   *\n         LA    R5,RACFNPSL       POINTER TO NEW PASSWORD\n         CLC   RACFNPS(4),=X'00000000' NEW PASSWORD SUPPLIED?\n         BNE   RACF20            BYPASS CLEAR\n         SLR   R5,R5             CLEAR ADDRESS OF NEW PASSWORD\nRACF20   EQU   *\n         L     R6,UXACFGRP       ADDRESS OF GROUP CODE\n         LTR   R6,R6             GROUP CODE SUPPLIED?\n         BNZ   RACF25            BYPASS CLEAR\n         SLR   R6,R6             CLEAR GROUP POINTER\n         B     RACF30\nRACF25   EQU   *\n         LA    R6,RACFGRPL       POINTER TO GROUP CODE + LENGTH\nRACF30   EQU   *\n*\n*    NOTE: FOR A RACINIT CALL SPECIFYING A TERMID PARAMETER, THE\n*          TERMINAL NAME MUST RESIDE IN A \"NON TASK-RELATED STORAGE\n*          SUBPOOL\". THEREFORE ISSUE A GETMAIN FOR MEMORY\n*          FROM SUBPOOL 241, AND SET UP THE TERMINAL NAME THERE.\n*\n         MODESET MF=(E,SUPSVSL)  INTO KEY ZERO\n         LA    R2,8              NEED 8 BYTES OF STORAGE\n         LA    R3,RACFTERM       ADDRESS TO STORE A(ALLOCATED STORAGE)\n         XC    RACEXEC,RACEXEC   CLEAR EXECUTE FORM WORK AREA\n         LA    R1,RACEXEC        POINT TO EXECUTE FORM WORK AREA\n         GETMAIN EC,                                                   X\n               LV=(R2),                                                X\n               SP=241,                                                 X\n               A=(R3)\n         B     *+4(R15)          INTERPRET RESPONSE CODE\n         B     RACC70X           GOOD RESPONSE - GO DO RACINIT\n         NOP   *                 SAME ACTION AS NEXT RESPONSE\n         B     RACC99X           RETURN TO PROBLEM STATE & RETURN\nRACC70X  EQU   *\n         L     R2,RACFTERM       GET ADDRESS OF ALLOCATED STORAGE\n         L     R1,UXACFTRM       ADDRESS OF TERMINAL NAME\n         LTR   R1,R1             TERMINAL NAME SUPPLIED\n         BNZ   RACC80X           YES - SET UP TERMINAL NAME\n         SLR   R2,R2             CLEAR TERMINAL PARAMETER\n         B     RACC85X           BYPASS TERMINAL NAME MOVE\nRACC80X  EQU   *\n         MVC   0(8,R2),0(R1)     SET UP TERM. NAME IN NON-TASK STORAGE\nRACC85X  EQU   *\n         LA    R4,RACEXEC        EXECUTE FORM WORK AREA\n         MVC   0(RACFILEN,R4),RACFINT MOVE IN LIST FORM SKELETON\n         SPACE 1\n         PRINT GEN\n         RACINIT ENVIR=CREATE,                                         X\n               USERID=RACFKEYL,                                        X\n               PASSWRD=(R7),                                           X\n               NEWPASS=(R5),                                           X\n               GROUP=(R6),                                             X\n               ACEE=SCBACFB,                                           X\n               TERMID=(R2),                                            X\n               MF=(E,(4))\n         CH    R15,=H'04'           CHECK FOR UNKNOWN TO RACF\n         BNE   RACC90X          IF KNOWN, CARRY ON\n         SLR   R5,R5             ELSE\n         SLR   R6,R6            INIT FOR ROSUSER/ROSU\n         LA    R7,RACFPSWL      R7 ---> PAWSSWORD LENGTH\n         MVC   RACFKEYL(17),UACCKEYL  MOVE IN ROUUSER,ROSU\n         B     RACC85X          BRANCH BACK TO TRY AGAIN\nUACCKEYL DC    AL1(7)           LENGTH OF USER ID\nUACCKEY  DC    CL7'ROSUSER'     USER ID (DEFAULT)\nUACCPSWL DC    AL1(5)           LENGTH OF PASSWORD\nUACCPSW  DC    CL5'ROSUS'       PASSWORD FOR ROSUSER\n         DC    XL3'000000'      FILLER FOR 17 BYTES\n         DC    XL1'00'          FILLER FOR HALFWORD ALIGNMENT\nRACC90X  EQU   *                RESUME \"NORMAL\" PROCESSING\n         ST    R15,RACFRESP      SAVE RETURN CODE FROM RACINIT\n         L     R2,RACFTERM       GET ADDRESS OF ALLOCATED STORAGE\n         FREEMAIN RC,                                                  X\n               LV=8,                                                   X\n               A=(R2),                                                 X\n               SP=241,\n         PRINT NOGEN\n         B     *+4(R15)          INTERPRET RESPONSE CODE\n         B     RACC100X          GOOD RESPONSE - CONTINUE\nRACC99X  EQU   *                 PROBLEM WITH SOME MACRO CALL\n         LA    R0,X'03'          BAD RESPONSE CODE\n         ST    R0,RACFRESP       SAVE IN RESPONSE AREA\nRACC100X EQU   *\n         MODESET MF=(E,PROBSVSL) RETURN TO PROBLEM PROGRAM STATE\n         L     R14,SAVER14       RESTORE RETURN ADDRESS\n         BR    R14               RETURN\n         TITLE 'SUBROUTINE TO EXECUTE RACINIT ENVIR=DELETE'\nRACINITD EQU   *\n         ST    R14,SAVER14      SAVE RETURN ADDRESS\n         L     R7,SCBACFB        A(ACEE)\n         LTR   R7,R7             HAS AN ACEE BEEN ALLOCATED?\n         BZ    ROSUF20           NO, EXIT\n         LA    R4,RACEXEC        R4 --> EXECUTE FORM WORK AREA\n         MVC   0(RACFILEN,R4),RACFINT SET RACF LIST\n         MODESET MF=(E,SUPSVSL)  INTO KEY ZERO\n         SPACE 1\n         PRINT GEN\n         RACINIT ENVIR=DELETE,                                         X\n               ACEE=SCBACFB,                                           X\n               MF=(E,(4))\n         PRINT NOGEN\n         SPACE 3\n         MODESET MF=(E,PROBSVSL)\nROSUF20  EQU   *\n         SLR   R15,R15           RETURN GOOD STATUS REGARDLESS\n         L     R14,SAVER14       RESTORE RETURN ADDRESS\n         BR    R14               RETURN\n         TITLE 'ROSEX - COMMON EXIT POINT'\nROSEX    EQU   *\n         SLR   R1,R1             TELL ROSCOE TO USE DEFAULT MESSAGES\n         L     R2,4(,R13)        GET PREVIOUS SAVE AREA ADDRESS\n         ST    R1,24(R2)         PREPARE FOR LM R1,R12\n         ROSEX DROP=NO\n         TITLE 'DATA AREAS'\nSUPSVSL  MODESET KEY=ZERO,MF=L\nPROBSVSL MODESET KEY=NZERO,MF=L\nRACFINT  DC    0F'0'\n         RACINIT MF=L\nRACFILEN EQU   *-RACFINT\n         PRINT NOGEN\n         TITLE 'USER ACCESS FACILITY EXIT - RACF - DATA AREAS'\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         ROPATCH\n*---------------------------------------------------------------------*\n*        WORKAREA                                                     *\n*---------------------------------------------------------------------*\n         ROWRK\nRACFRESP DS    F                 SAVE AREA FOR RESPONSE CODE\nRACFTERM DS    F                 ADDRESS OF STORAGE FROM GETMAIN\nSAVER14  DS    F                 SAVE AREA FOR R14\n         DS    0D\nRACEXEC  DS    XL(RACFILEN)        EXECUTE FORM FOR RACINIT\nRACFKEYL DS    X                   LENGTH OF USER ID\nRACFKEY  DS    CL7                 USER ID\nRACFPSWL DS    X                   LENGTH OF PASSWORD\nRACFPSW  DS    CL8                 PASSWORD\nRACFNPSL DS    X                   LENGTH OF NEW PASSWORD\nRACFNPS  DS    CL8                 NEW PASSWORD\nRACFGRPL DS    X                   LENGTH OF GROUP\nRACFGRP  DS    CL8                 GROUP\n         ROWRKEND\n         PRINT GEN\n         UXDSECT EXIT=ACF\n         ROPGMEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CLEANACL": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x06#\\x06#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 1571, "newlines": 1571, "modlines": 0, "user": "FILE013"}, "text": "         TITLE 'CLEANACL -- REMOVE NONEXISTENT USERS AND GROUPS FROM AC*\n               CESS LISTS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   CLEANACL'S PURPOSE IS TO CHECK EVERY ACCESS LIST IN THE RACF      *\n*   DATASET TO SEE WHETHER EACH ONE CONTAINS ANY NON-EXISTENT         *\n*   USERIDS OR GROUPNAMES.                                            *\n*                                                                     *\n*     **********************************************************      *\n*     ***                                                    ***      *\n*     ***                   W A R N I N G :                  ***      *\n*     ***                                                    ***      *\n*     *** +++ THIS PROGRAM IS INTENDED TO RUN AUTHORIZED +++ ***      *\n*     *** +++   I SUGGEST THAT YOU REVIEW IT CAREFULLY   +++ ***      *\n*     *** +++    BEFORE INSTALLING IT ON YOUR SYSTEM.    +++ ***      *\n*     ***                                                    ***      *\n*     **********************************************************      *\n*                                                                     *\n*   THIS PROGRAM HAS BEEN TESTED ON RACF RELEASES 1.4 THRU 1.7.       *\n*                                                                     *\n*   OPERATION:  (DETAILS DOCUMENTED IN INDIVIDUAL SECTIONS)           *\n*                                                                     *\n*     (1) READ ALL USER AND GROUP PROFILES, CREATING A SEQUENTIAL     *\n*         TABLE ON PAGE-ALIGNED 4K PAGES. AN 'INDEX' OF PAGE-ADDRESS  *\n*         AND HI-ENTRY-ON-PAGE IS ALSO CREATED. BASED ON PARMS,       *\n*         A COPY OF THIS TABLE IS SAVED OR RELOADED FROM A DASD       *\n*         DATASET FOR RESTART PURPOSES: THIS IS DESCRIBED LATER.      *\n*                                                                     *\n*     (2) READ ACCESS LISTS FOR ALL 'DATASET' PROFILES. FOR EACH      *\n*         ACL ENTRY THAT DOES NOT EXIST AS A USER OR GROUP, GET       *\n*         RID OF IT. SELECTION INCLUDES MULTI-VOLUME DATASETS,        *\n*         MODEL PROFILES AND NON-VSAM AND VSAM DATASET PROFILES.      *\n*         (NOTE THAT CLEANACL CAN ALSO RUN IN 'READ-ONLY' MODE.)      *\n*                                                                     *\n*     (3) FOR EACH CLASS DEFINED IN THE CDT, READ ACCESS LISTS        *\n*         FOR ALL PROFILES IN THAT CLASS. FOR EACH ACL ENTRY THAT     *\n*         DOES NOT EXIST AS A USER OR GROUP, GET RID OF IT.           *\n*                                                                     *\n*     (4) SPIT OUT SOME NUMBERS ABOUT WHAT WE DID AND QUIT.           *\n*                                                                     *\n*   ATTRIBUTES: REENTRANT, REUSABLE, REFRESHABLE, APF-AUTHORIZED,     *\n*               RESIDENT IN PRIVATE AREA.                             *\n*                                                                     *\n*   MACRO LIBRARIES: SYS1.MACLIB (QSAM AND RACF MANAGER MACROS)       *\n*                                                                     *\n*   NOTE: RACF 1.4 MACROS USED HERE WERE NOT DISTRIBUTED IN A         *\n*         CUSTOMER LIBRARY ORIGINALLY. IF YOU HAVE APPLIED PTF        *\n*         UZ54891, THESE MACROS SHOULD NOW LIVE IN AMACLIB.           *\n*         THIS PROBLEM SHOULD NOT OCCUR WITH RACF 1.5 AND UP.         *\n*                                                 (CONTINUED)         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  SITE DEPENDENCIES: NONE (I THINK)                                  *\n*                                                                     *\n*  DDNAMES USED: SYSPRINT (LRECL=132,RECFM=FB) FOR MESSAGES           *\n*                CHECKPT (LRECL=4096,RECFM=FB) FOR CHECKPOINTING      *\n*                     THE USER/GROUP TABLE (OPTIONAL)                 *\n*                SYSUDUMP - NEVER A BAD IDEA.                         *\n*                COMMANDS - FILE OF 'PERMIT DELETE' COMMANDS          *\n*                OWNERS   - FILE OF 'ALTDSD/RALTER OWNER(?????)' CMDS *\n*                EXCLUDES - OPTIONAL LIST OF USERS AND GROUPS THAT    *\n*                     CLEANACL WILL PRETEND DON'T EXIST               *\n*                                                                     *\n*  EXTERNAL REFERENCES: NONE                                          *\n*                                                                     *\n*  SUGGESTED ASSEMBLER AND LINKEDIT OPTIONS:                          *\n*     ASSEMBLER - PARM='RENT'                                         *\n*     LINK EDIT - PARM='RENT,REUS,REFR,AC=1'                          *\n*  ASSEMBLY OF CLEANACL REQUIRES SYS1.AMODGEN.                        *\n*                                                                     *\n*  CLEANACL MUST BE LINKED INTO AN AUTHORIZED LIBRARY WITH AC=1       *\n*  OR IT -> WILL NOT WORK <-. SINCE IT CONTAINS NO ACCESS CHECKING    *\n*  AS DISTRIBUTED (E.G. ANYONE CAN RUN IT), I SUGGEST THAT YOU:       *\n*                                                                     *\n*    A) PUT IT IN A PROTECTED NON-LINKLIST APF LIBRARY, OR            *\n*    B) DROP IN A RACHECK FOR AN APPL PROFILE OR SOMETHING.           *\n*                                                                     *\n*  HINTS FOR USAGE: AS THIS THING DEPENDS ON THE SIZE, CONTENTS       *\n*    AND STRUCTURE OF YOUR RACF DATASET, THE TIME IT TAKES TO RUN     *\n*    VARIES GREATLY, BUT WILL BE SIGNIFICANT. FOR EXAMPLE, CLEMSON    *\n*    CAN RUN THIS ON ITS 3081K, WITH PRIMARY AND BACKUP RACF DATA-    *\n*    SETS ON 3380'S ON AVERAGE-USE STRINGS, IN ABOUT 1 HOUR REAL      *\n*    TIME DURING PRIME SHIFT, PROCESSING 4000+ USERS, 400+ GROUPS,    *\n*    4000+ DATASETS AND 2600+ GENERAL-CLASS PROFILES. A RECENTLY-     *\n*    REORG'D RACF DATABASE SPEEDS THINGS UP: SO DOES CACHED DASD.     *\n*    IF RACF IS ON SHARED DASD, NOTE THIS THING READS NEARLY EVERY    *\n*    PROFILE IN RACF AND MAY CAUSE DEVICE RESERVE PROBLEMS DURING     *\n*    PRIME SHIFTS. I SUGGEST THAT ONCE YOU'RE SATISFIED WITH          *\n*    THE OPERATION OF THE PROGRAM, YOU SET IT UP TO RUN REGULARLY     *\n*    ONCE A WEEK OR SO. IT SHOULD DEFINITELY BE RUN AFTER MASSIVE     *\n*    DELETIONS OF USERS AND/OR GROUPS FROM RACF, AS IT'S EASIER THAN  *\n*    CLEANING UP ACCESS LISTS USING ICHUT100.                         *\n*                                                                     *\n*                                                       (CONTINUED)   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*    SAMPLE JCL TO RUN THE PROGRAM:                                   *\n*                                                                     *\n*    (1) STRAIGHTFORWARD EXECUTION.                                   *\n*                                                                     *\n*    //CLEANJOB  JOB ...ACCOUNTING..., ETC.                           *\n*    //CLEANUP  EXEC PGM=CLEANACL            <-- NOTE: NO PARM IS OK. *\n*    //STEPLIB   DD  DSN=<AUTHORIZED LIBRARY>,DISP=SHR                *\n*    //SYSPRINT  DD  SYSOUT=A                                         *\n*    //COMMANDS  DD  DSN=<COMMAND FILE>,DISP=(NEW,CATLG),UNIT=<DISK>, *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //OWNERS    DD  DSN=<OWNERS FILE>,DISP=(NEW,CATLG),UNIT=<DISK>,  *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //SYSUDUMP  DD  SYSOUT=A                                         *\n*                                                                     *\n*    (2) CREATE A CHECKPOINT COPY OF THE USER/GROUP TABLE.            *\n*                                                                     *\n*    //CLEANJOB  JOB ...ACCOUNTING..., ETC.                           *\n*    //CLEANUP  EXEC PGM=CLEANACL,PARM=C                              *\n*    //STEPLIB   DD  DSN=<AUTHORIZED LIBRARY>,DISP=SHR                *\n*    //SYSPRINT  DD  SYSOUT=A                                         *\n*    //CHECKPT   DD  DSN=<ARBITRARY DSNAME>,DISP=(NEW,CATLG,CATLG),   *\n*    //  UNIT=<DASD>,SPACE=(CYL,(1,1))                                *\n*    //COMMANDS  DD  DSN=<COMMAND FILE>,DISP=(NEW,CATLG),UNIT=<DISK>, *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //OWNERS    DD  DSN=<OWNERS FILE>,DISP=(NEW,CATLG),UNIT=<DISK>,  *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //SYSUDUMP  DD  SYSOUT=A                                         *\n*                                                                     *\n*    (3) RESTART THE USER/GROUP TABLE FROM THE CHECKPOINT FILE,       *\n*        BUT DO NOT CHANGE ANY ACCESS LISTS.                          *\n*                                                                     *\n*    //CLEANJOB  JOB ...ACCOUNTING..., ETC.                           *\n*    //CLEANUP  EXEC PGM=CLEANACL,PARM='R'                            *\n*    //STEPLIB   DD  DSN=<AUTHORIZED LIBRARY>,DISP=SHR                *\n*    //SYSPRINT  DD  SYSOUT=A                                         *\n*    //CHECKPT   DD  DSN=<CHECKPOINT FILE>,DISP=OLD                   *\n*    //COMMANDS  DD  DSN=<COMMAND FILE>,DISP=(NEW,CATLG),UNIT=<DISK>, *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //OWNERS    DD  DSN=<OWNERS FILE>,DISP=(NEW,CATLG),UNIT=<DISK>,  *\n*    //  DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),SPACE=(TRK,(5,5),RLSE)  *\n*    //SYSUDUMP  DD  SYSOUT=A                                         *\n*                                                                     *\n*  RESTRICTIONS: CLEANACL DOES NOT KNOW HOW TO HANDLE MULTI-VOLUME    *\n*                  DISK DATASETS, AS WE HAVE NONE OF THESE AT C.U.    *\n*                CLEANACL DOES NOT KNOW HOW TO HANDLE MEMBERS OF      *\n*                  RESOURCE GROUPS (EX: THE IMS AND CICS CLASSES).    *\n*                  IF IT FINDS SUCH A CLASS IN THE CDT, IT WILL       *\n*                  IGNORE IT BUT WILL ISSUE A MESSAGE.                *\n*                                                                     *\n*  COMMENTS (GOOD, BAD OR INDIFFERENT) ARE WELCOME.                   *\n*                                                                     *\n*                                     JIM BLALOCK                     *\n*                                     COMPUTER CENTER                 *\n*                                     50 NEW CHERRY ST.               *\n*                                     CLEMSON UNIVERSITY              *\n*                                     CLEMSON, SC  29634-2803         *\n*                                     (803) 656-3466                  *\n*                                                                     *\n*  COPYRIGHT @ 1983  --  CLEMSON UNIVERSITY                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  CHANGE HISTORY: 2/86 JCB ADDED OPTIONAL SYSIN FILE THAT ALLOWS   @C1\n*                           YOU TO 'PRETEND' A USER IS DELETED.     @C1\n*                           REFER TO SEGMENT 'EXCLUDE' FOR DETAILS. @C1\n*                  7/86 JCB CHANGED 'LOAD' FOR ICHERCDE TO USE THE  @C2\n*                           CDT POINTER IN THE RCVT, SINCE RACF 1.7 @C2\n*                           CONSTRUCTS THE WORKING CDT FROM THE IBM @C2\n*                           AND USER CLASS DESCRIPTOR TABLES.       @C2\n*                  8/86 JCB VARIOUS FIXES FOR MIXED DISCRETE AND    @C3\n*                           GENERIC PROFILES: ADDED 'GENERIC=YES'   @C3\n*                           TO DATASET-NEXTC ICHEINTY, AND ADDED    @C3\n*                           LOGIC TO MAKE A 'GENERIC=NO' AND A      @C3\n*                           'GENERIC=UNCOND' PASS THROUGH EACH      @C3\n*                           CLASS THAT HAS GENERIC CHECKING ON.     @C3\n*                           ADD'L PROBLEMS IN THIS AREA FIXED 12/88.@C3\n*                                                                     *\n*  DEBUGGING NOTE: IF YOU FEEL LIKE CLEANACL ISN'T PICKING UP ALL THE *\n*                  PROFILES OR ACL ENTRIES IT'S SUPPOSED TO, YOU CAN  *\n*                  UNCOMMENT THE LINES THAT CONTAIN '** TRACEMSG **'. *\n*                  THIS WILL CAUSE CLEANACL TO WRITE TO SYSPRINT EACH *\n*                  PROFILE NAME AND ACL ENTRY THAT IT LOOKS AT.       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         PRINT OFF                  DON'T PRINT MACRO DEFINITIONS\n         MACRO\n&TAG     WIPE  &PLACE,&CHAR=' ',&LEN=\n.*\n.*   WIPE MACRO FILLS A CHARACTER STRING WITH A CHARACTER.\n.*   EXAMPLES:\n.*      WIPE XX                  SETS 'XX' TO SPACES FOR L'XX.\n.*      WIPE XX,CHAR='*'         SETS 'XX' TO '*' FOR L'XX.\n.*      WIPE XX,CHAR='-',LEN=32  SETS 'XX' TO '-' FOR 32 BYTES.\n.*\n         LCLA  &L\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         AIF   ('&LEN' EQ '').DFLTLEN\n&L       SETA  &LEN\n         AGO   .DOIT\n.DFLTLEN ANOP\n&L       SETA  L'&PLACE\n.DOIT    ANOP\n         MVI   &PLACE.,C&CHAR.\n         MVC   &PLACE.+1(&L.-1),&PLACE\n         MEND\n         MACRO\n&TAG     COUNT &CTR\n.*\n.*   THE COUNT MACRO ADDS A 1 TO A FULLWORD.\n.*\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         L     R1,&CTR\n         LA    R1,1(R1)\n         ST    R1,&CTR\n         MEND\n         MACRO\n&TAG     COPYFLD &TO,&FROM\n.*\n.*  THE COPYFLD MACRO COPIES A FIELD WITH LENGTH BYTE TO A FIELD\n.*    WITHOUT THE LENGTH BYTE, FOR A LENGTH OF (LENGTH BYTE - 1).\n.*\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         WIPE  &TO                  CLEAR FIELD FIRST\n         XR    R1,R1                CLEAR COUNTER\n         IC    R1,&FROM.            GET LENGTH BYTE\n         IC    R0,&FROM.(R1)        GET A BYTE\n         STC   R0,&TO.-1(R1)         AND MOVE IT\n         BCT   R1,*-8                 TIL THEY'RE ALL GONE.\n         MEND\n         MACRO\n&TAG     MVCENTRY &TYPE='USR'\n.*\n.*  THE MVCENTRY MACRO ADDS AN ENTRY TO THE USER/GROUP TABLE,\n.*    INCREASES ITS POINTERS ACCORDINGLY, AND GETS ANOTHER\n.*    4K PAGE IF IT HAS TO. VALID TYPES ARE 'USR' AND 'GRP':\n.*    ANY OTHER TYPE WILL CAUSE AN ASSEMBLY ERROR.\n.*\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         LA    R1,0(R9,R10)         GET WHERE THIS ONE GOES\n         MVC   0(8,R1),PWAJ&TYPE    MOVE ENTRYNAME INTO TABLE\n         LA    R9,8(R9)             POINT TO NEXT ENTRY\n         LR    R0,R9                SEE IF WE RAN OUT OF A BLOCK:\n         SRL   R0,12                  SHIFT ALL BUT 4K BIT\n         LTR   R0,R0                  IF IT'S ZERO,\n         BZ    *+18                     WE'RE OK, ELSE\n         MVC   4(8,R8),PWAJ&TYPE      SET HI KEY FOR PAGE\n         BAL   R6,GET4K                AND GET ANOTHER ONE\n         LA    R8,12(R8)               AND POINT TO NEXT INDEX ENTRY.\n         SPACE\n         MEND\n         MACRO\n&TAG     FINDACL &TYPE='D'\n.*\n.*  THE FINDACL MACRO LOCATES THE FIRST ACCESS LIST ENTRY IN EITHER\n.*  THE DATASET OR GENERAL-CLASS RACF MANAGER WORKAREA. ANY 'TYPE'\n.*  OTHER THAN 'D' OR 'C' WILL CAUSE ASSEMBLY ERRORS.\n.*\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         AIF   ('&TYPE' NE 'D').NONDS\n.SETD    ANOP\n         LA    R1,RWDVOL+2\n         AH    R1,RWDVOLL\n         MEXIT\n         AGO   .QUIT\n.NONDS   ANOP\n         LA    R1,RWCACL\n.QUIT    ANOP\n         MEND\n         MACRO\n&TAG     CONVERT &TO=,&FROM=,&LENGTH=5\n.*\n.*  THE CONVERT MACRO CONVERTS A FULLWORD TO A PRINTABLE VALUE.\n.*  'TO' POINTS TO WHERE THE VALUE SHOULD GO, WHILE 'FROM' POINTS\n.*  TO THE FULLWORD TO CONVERT. 'LENGTH' IS USED AS THE LENGTH\n.*  TO UNPACK FOR.\n.*\n         LCLA  &L\n&L       SETA  &LENGTH\n         AIF   ('&TAG' EQ '').NOTAG\n&TAG     DS    0H\n.NOTAG   ANOP\n         L     R1,&FROM                 GET VALUE TO CONVERT\n         CVD   R1,PWACVD                CONVERT TO PACKED\n         UNPK  &TO.(&L.),PWACVD         UNPACK IT TO DESTINATION\n         OI    &TO+&L.-1,X'F0'          MAKE LAST DIGIT READABLE\n         MEND\n*        REGEQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT ON\n         TITLE 'CLEANACL -- INITIALIZATION'\nCLEANACL CSECT\n         STM   R14,R12,12(R13)      SAVE REGS\n         LR    R12,R15              SET CODE BASE\n         USING CLEANACL,R12\n         LA    R11,STC              SET BASE FOR CONSTANTS\n         USING STC,R11\n         L     R2,0(R1)             SAVE PARM POINTER (IF ANY)\n         SPACE\n         GETMAIN R,LV=PWALEN,SP=0   GET SOME STORAGE\n         SPACE\n         ST    R13,4(R1)            SET BACK LINK\n         ST    R1,8(R13)            SET FWD LINK\n         LR    R13,R1               NEW SAVEAREA\n         USING PWA,R13               AND PROGRAM WORKAREA.\n         SPACE\nPARMS    DS    0H\n         CLI   2(R2),C'C'           CHECKPOINT PARM?\n         BNE   PRM0010\n         MVI   PWAPRM1,C'C'         SAVE FOR LATER.\n         B     PRM1000\n         SPACE\nPRM0010  DS    0H\n         CLI   2(R2),C'R'           RESTART PARM?\n         BNE   PRM0020\n         MVI   PWAPRM1,C'R'         SAVE FOR LATER.\n         B     PRM1000\n         SPACE\nPRM0020  DS    0H\n         CLC   0(2,R2),=H'0'        NO PARM?\n         BNE   PARMERR               NO, ERROR.\n         SPACE\nPRM0030  DS    0H\n         MVI   PWAPRM1,C' '\n         SPACE\nPRM1000  DS    0H\n         MVI   PWAPRM2,PWAPRM2Y\n         EJECT\nINITALIZ DS    0H\n         WIPE  PWAUSER              CLEAR OUT CHARACTER FIELDS AND\n         MVI   PWAUSER,X'01'           SET LENGTHS AS NEEDED\n         WIPE  PWAGROUP\n         MVI   PWAGROUP,X'01'\n         WIPE  PWAJUSR\n         WIPE  PWAJGRP\n         XC    PWADSNAM,PWADSNAM                                    @C3\n         WIPE  PWAENTRY\n         MVI   PWAENTRY,X'01'\n         SPACE\n         MVC   PWAUINTY(LENUINTY),STCUINTY   COPY ICHEINTY\n         MVC   PWAGINTY(LENGINTY),STCGINTY    PARAMETER LISTS\n         MVC   PWADINTY(LENDINTY),STCDINTY\n         MVC   PWACINTY(LENCINTY),STCCINTY\n         SPACE\n         MVC   PWAACNT(LENACNT),STCACNT      COPY ICHEACTN/ICHETEST\n         MVC   PWAAACL(LENAACL),STCAACL       PARAMETER LISTS\n         MVC   PWAAVOL(LENAVOL),STCAVOL\n         EJECT\n         MVC   PWAOPEN(LENOPEN),STCOPEN      COPY MISCELLANEOUS\n         MVC   PWACLOSE(LENCLOSE),STCCLOSE    PARAMETER LISTS\n         MVC   PWADCB(LENDCB),STCDCB\n         MVC   PWACDCB(LENCDCB),STCCDCB\n         MVC   PWAC2DCB(LENC2DCB),STCC2DCB\n         SPACE\n         MVI   PWAFLAG,X'00'\n         XC    PWAINDEX(4),PWAINDEX\n         LA    R1,100               SET USER AND GROUP\n         ST    R1,RWUSIZE            RACF WORKAREA SIZES\n         ST    R1,RWGSIZE\n         SPACE\n         XC    PWACNTRS(LENCNTRS),PWACNTRS    CLEAR ALL COUNT FIELDS\n         SPACE\n         MVC   PWATRACE,=CL12'OPEN OUTPUT'\n         OPEN  (PWADCB,OUTPUT),MF=(E,PWAOPEN)\n         LTR   R15,R15\n         BNZ   QUIT16\n         SPACE\n         MVC   PWATRACE,=CL12'OPEN COMMAND'\n         OPEN  (PWACDCB,OUTPUT),MF=(E,PWAOPEN)\n         LTR   R15,R15\n         BNZ   QUIT16\n         OPEN  (PWAC2DCB,OUTPUT),MF=(E,PWAOPEN)\n         LTR   R15,R15\n         BNZ   QUIT16\n         EJECT\nINITMORE DS    0H\n*\n*  INITIALIZE SOME ICHEINTY PARAMETER LISTS\n*\n         ICHEINTY NEXT,             THESE SET ICHEINTY THINGS THAT     *\n               ENTRY=PWAUSER,         ONLY NEED TO BE DONE ONCE.       *\n               WKAREA=PWARWU,                                          *\n               OPTIONS=NOEXEC,      (THIS ONE READS USERIDS)           *\n               MF=(E,PWAUINTY)\n         SPACE\n         ICHEINTY NEXT,             (THIS ONE READS GROUPS)            *\n               ENTRY=PWAGROUP,                                         *\n               WKAREA=PWARWG,                                          *\n               OPTIONS=NOEXEC,                                         *\n               MF=(E,PWAGINTY)\n         TITLE 'CLEANACL -- CREATE USER/GROUP INCORE TABLE'\n         CLI   PWAPRM1,PWAPRM1R     WE NEED TO RESTART INSTEAD?\n         BE    RESTART\n         SPACE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  INITIALIZE THE USER AND GROUP ENTRYNAMES FOR ICHEINTY NEXT, THEN   *\n*  SWEEP ALL USER AND GROUP PROFILES, ADDING 8-BYTE NAMES TO OUR      *\n*  INCORE TABLE IN ALPHA ORDER. IF PARM=C WAS SPECIFIED, WRITE EACH   *\n*  4K PAGE TO DDNAME 'CHECKPT' WHEN IT FILLS UP OR WHEN WE'VE SWEPT   *\n*  ALL USER AND GROUP PROFILES.                                       *\n*                                                                     *\n*  LOCAL REGISTER USAGE: R10 -> START OF A 4K PAGE TO ADD ENTRIES TO  *\n*                        R9  =  DISP. INTO 4K PAGE FOR A NEW ENTRY    *\n*                        R8  -> INDEX ENTRY FOR PAGE WE'RE DOING      *\n*                        R6  =  LOCAL SUBROUTINE LINKAGE              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n         LA    R8,PWAINDEX+4        POINT TO FIRST INDEX ENTRY\n         SPACE\n         BAL   R6,GET4K             GET FIRST 4K PAGE\n         SPACE\n         BAL   R6,GETUSER           READ FIRST USERID\n         SPACE\n         BAL   R6,GETGROUP          READ FIRST GROUP\n         TITLE 'CLEANACL -- CREATE USER/GROUP INCORE TABLE'\nMAKETAB  DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MAKETAB CREATES THE USER/GROUP TABLE FROM RACF PROFILES. IF ONE    *\n*  RUNS OUT BEFORE THE OTHER, A FLAG IS SET AND THE CURRENT ENTRY     *\n*  FOR THAT TYPE IS SET TO X'FFFF' SO COMPARES STILL WORK. BY THE     *\n*  RACF RULES, AN IDENTICAL USERID AND GROUPNAME CANNOT EXIST.        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n         TM    PWAFLAG,PWAGEOF+PWAUEOF  RUN OUT OF BOTH?\n         BO    MTBDONE                   GO PUT OUT SOME NUMBERS.\n         SPACE\n         CLC   PWAJUSR,PWAJGRP      WHICH ONE?\n         BL    MTBUSER               USER LESS, NEED A USER.\n         BE    MTBDONE               THEY'RE EQUAL, WE'RE THROUGH.\n         SPACE\nMTBGROUP DS    0H\n         MVCENTRY TYPE=GRP          MOVE A GROUP\n         BAL   R6,GETGROUP          GET THE NEXT GROUP\n         B     MAKETAB              KEEP ON.\n         SPACE\nMTBUSER  DS    0H\n         MVCENTRY TYPE=USR          MOVE A USERID\n         BAL   R6,GETUSER           GET ANOTHER ONE\n         B     MAKETAB              KEEP ON.\n         EJECT\nMTBDONE  DS    0H\n         CLI   PWAPRM1,PWAPRM1C     WERE WE CHECKPOINTING?\n         BNE   MTBSETHI              NO, SKIP SUCCESS MESSAGE\n         SPACE\n         PUT   PWACPDCB,(R10)            SAVE LAST PAGE AND CLOSE\n         CLOSE PWACPDCB,MF=(E,PWACLOSE)    CHECKPOINT DATASET.\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCMSGCP),STCMSGCP\n         PUT   PWADCB,PWAREC        SAY WHAT WE DID\n         SPACE\nMTBSETHI DS    0H\n         MVC   4(8,R8),=8X'FF'      SET LAST TABLE ENTRY TO X'FFFF'.\n         SPACE\n         MVC   PWAREC(L'STCMSGTL),STCMSGTL\n         CONVERT TO=PWAREC+DSPMTLU,FROM=PWAUCNT,LENGTH=5\n         SPACE\n         CONVERT TO=PWAREC+DSPMTLG,FROM=PWAGCNT,LENGTH=5\n         SPACE\n         PUT   PWADCB,PWAREC\n         WIPE  PWAREC\n         PUT   PWADCB,PWAREC        BLANK LINE AS SEPARATOR.\n         TITLE 'CLEANACL -- OPTIONALLY EXCLUDE USERIDS FROM SEARCH' @C1\n*---------------------------------------------------------------------*\n*\n*  'EXCLUDE' ALLOWS THE EXCLUSION OF USERIDS FROM THE IN-CORE TABLE\n*  JUST BUILT: THIS ALLOWS THE CLEANACL USER TO 'PRETEND' THAT CERTAIN\n*  USERIDS ARE DELETED, WITHOUT ACTUALLY DELETING THEM. THIS MAY BE\n*  USEFUL FOR FORMERLY POWERFUL USERIDS (RACF ADMINISTRATORS, SYSTEM\n*  PROGAMMERS, ETC) THAT YOU MAY NOT WANT TO DELETE RIGHT AWAY.\n*\n*---------------------------------------------------------------------*\n         SPACE 1                    |                               @C1\nEXCLUDE  DS    0H                   |                               @C1\n         MVC   PWASYSIN(LENSYSIN),STCSYSIN  COPY SYSIN DCB BASE     @C1\n         OPEN  (PWASYSIN,(INPUT)),  | SEE IF SYSIN IS PRESENT       @C1*\n               MF=(E,PWAOPEN)       |                               @C1\n         LTR   R15,R15              | NO DD STATEMENT?              @C1\n         BNZ   DATASETS             |  THAT'S OK, NO EXCLUDES.      @C1\nEXCLOOP  DS    0H                   |                               @C1\n         GET   PWASYSIN,PWAIREC     | GET A RECORD, EODAD=EXCEND    @C1\n         LA    R2,PWAIREC           | POINT TO IT                   @C1\n         LA    R3,PWAIREC+L'PWAIREC | POINT PAST IT                 @C1\nEXCSCAN  DS    0H                   | SKIP LEADING BLANKS:          @C1\n         CLI   0(R2),C' '           |  BLANK?                       @C1\n         BNE   EXCFOUND             |   NO, GRAB USERID.            @C1\n         LA    R2,1(R2)             |  NEXT BYTE                    @C1\n         CR    R2,R3                |  RAN OFF END?                 @C1\n         BL    EXCSCAN              |   NO, TRY AGAIN.              @C1\n         ABEND 1                    | BLANK CARD: NOTHING FANCY.    @C1\nEXCFOUND DS    0H                   | GOT A USERID/GROUP:           @C1\n         MVC   PWALKARG,0(R2)       |  MOVE TO LOOKUP'S ARGUMENT    @C1\n         BAL   R6,LOOKUP            |  CALL USER/GROUP LOOKUP       @C1\n         LTR   R15,R15              |  FIND AN ENTRY?               @C1\n         BZ    EXCZAP               |   YES, GO ZAP IT.             @C1\n         WIPE  PWAREC               |  NO ENTRY: WRITE A MESSAGE.   @C1\n         MVC   PWAREC(L'STCXNTRY),STCXNTRY                          @C1\n         MVC   PWAREC+DSPXNENT(L'PWALKARG),PWALKARG                 @C1\n         PUT   PWADCB,PWAREC        |                               @C1\n         B     EXCLOOP              |                               @C1\nEXCZAP   DS    0H                   | FOUND ENTRY TO EXCLUDE:       @C1\n         XC    0(8,R2),0(R2)        |  SET IT TO X'00'S.            @C1\n         B     EXCLOOP              |                               @C1\nEXCEND   DS    0H                   | EODAD ON //EXCLUDES:          @C1\n         CLOSE (PWASYSIN),          |  CLOSE FILE.                  @C1*\n               MF=(E,PWACLOSE)      |                               @C1\n         TITLE 'CLEANACL -- PROCESS DATASET PROFILES'\n*---------------------------------------------------------------------*\n*                                                                     *\n*   DATASET PROCESSING SWEEPS ALL DATASET PROFILES (MODELS, TOO)      *\n*   AND CHECKS EACH ACCESS LIST ENTRY (IF ANY) AGAINST THE USER-      *\n*   GROUP TABLE BY CALLING 'LOOKUP'. IF A NON-EXISTENT ACL ENTRY      *\n*   IS FOUND, IT IS DELETED. NOTE THAT WRITING A FILE OF 'PERMIT      *\n*   DELETE' COMMANDS INSTEAD WOULD NOT WORK HERE, AS PERMIT CHECKS    *\n*   TO SEE IF USERS AND GROUPS EXIST FIRST AND FAILS IF NOT.          *\n*                                                                     *\n*   LOCAL REGISTER USAGE: R10 -> RACF MANAGER WORKAREA (32K NOW:      *\n*                                IF THAT'S NOT ENOUGH, USE MORE).     *\n*                          R6 =  LOCAL SUBROUTINE LINKAGE             *\n*                          R4 -> ACCESS LIST ENTRIES FOR A DATASET    *\n*                                                                     *\n*---------------------------------------------------------------------*\nDATASETS DS    0H\n         GETMAIN R,LV=32768,SP=2    YET MORE MEMORY\n         LR    R10,R1               SET A BASE ON IT\n         USING RWD,R10\n         L     R1,=F'32768'         ALLOW SOME BIG OLE ACCESS LISTS\n         ST    R1,RWDSIZE\n*        B     GENERALS             ** TESTING **\n*        MVC   PWADSNAM+1(7),=CL7'SYSTEMS'  ** TESTING **\n*        MVI   PWADSNAM,X'07'               ** TESTING **\n         ICHEINTY NEXTC,            SET UP DATASET ICHEINTY PARMS      *\n               ENTRY=PWADSNAM,                                         *\n               WKAREA=RWD,                                             *\n               ACTIONS=(STCAOWNR,PWAACNT,PWAAVOL,PWAAACL),             *\n               OPTIONS=(ACTIONS,TESTC,TESTM,FLDEF,NOEXEC),             *\n               MF=(E,PWADINTY)\n         EJECT\nDSMAIN   DS    0H\n         MVC   PWATRACE,=CL12'READ DATASET'\n         XC    RWDRBA(RWDFVRA-RWDRBA),RWDRBA                        @C3\n         ICHEINTY MF=(E,PWADINTY)   GET A PROFILE\n         SPACE\n         CH    R15,=H'12'           DONE ALL DATASET PROFILES?\n         BE    DSFINISH              GO PUT OUT NUMBERS MESSAGES.\n         LTR   R15,R15              UNEXPECTED RACF ERROR?\n         BNZ   RACFERR               GO REPORT IT.\n         TM    RWDFLAG1,RWDGENPR    GENERIC PROFILE?                @C3\n         BO    DSMAIN01              SEE IF WE WANT IT.             @C3\n         TM    PWAFLAG,PWAF1GEN     NOT GENERIC: WE WANT IT?        @C3\n         BO    DSMAIN                NO, GET THE NEXT ONE,          @C3\n         B     DSMAIN02              ELSE PROCEED.                  @C3\nDSMAIN01 TM    PWAFLAG,PWAF1GEN     GENERIC: WE WANT IT?            @C3\n         BZ    DSMAIN                NO, GET THE NEXT ONE.          @C3\nDSMAIN02 DS    0H                   WE GOT THE KIND WE WANTED.      @C3\n         SPACE\n         COUNT PWADCNT              SAY WE READ ANOTHER ONE\n         MVC   PWALKARG(8),RWDOWNER PICK UP OWNER\n         BAL   R6,LOOKUP            SEE IF IT'S IN THE TABLE\n         LTR   R15,R15\n         BZ    DSGETACL\n         SPACE\n         COUNT PWADCNTO\n         WIPE  PWACMD               CONSTRUCT ALTDSD COMMAND        @C3\n         MVC   PWACMD(4),=CL4'ALD '\n         MVI   PWACMD+4,C''''\n         XR    R1,R1\n         IC    R1,PWADSNAM\n         BCTR  R1,0\n         EX    R1,MVCDSNAL\n         LA    R1,PWACMD+6(R1)\n         MVI   0(R1),C''''\n         LA    R1,2(R1)\n         TM    RWDFLAG1,RWDGENPR    IS IT A GENERIC PROFILE?\n         BO    DSALDGEN              YES, NO VOLUMES HERE EITHER\n         CLC   RWDVOLL,=H'0'        ANY VOLUMES, OR IS IT A MODEL?\n         BE    DSALDPUT              NO VOLUMES, DON'T PUT ON COMMAND\n         SPACE\n         MVC   0(4,R1),=C'VOL('\n         LA    R1,4(R1)\n         MVC   0(6,R1),RWDVOL\n         MVI   6(R1),C')'\n         LA    R1,7(R1)\n         B     DSALDPUT\nDSALDGEN DS    0H\n         MVC   0(8,R1),=C' GENERIC'\n         LA    R1,8(R1)\nDSALDPUT DS    0H\n         MVC   0(16,R1),=C' OWNER(????????)'\n         PUT   PWAC2DCB,PWACMD\n         SPACE\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCALDM),STCALDM\n         MVC   PWAREC+DSPALDMO(8),RWDOWNER\n         TM    RWDFLAG1,RWDGENPR\n         BZ    DSARPTVO\n         MVC   PWAREC+DSPALDMG(11),=C'< GENERIC >'\n         B     DSARPTDS\nDSARPTVO DS    0H\n         CLC   RWDVOLL,=H'0'\n         BNE   DSARPTMD\n         MVC   PWAREC+DSPALDMV(6),RWDVOL\n         B     DSARPTDS\nDSARPTMD DS    0H\n         MVC   PWAREC+DSPALDMV(6),=C'-NONE-'\nDSARPTDS DS    0H\n         XR    R1,R1\n         IC    R1,PWADSNAM\n         BCTR  R1,0\n         EX    R1,MVCDSNAR\n         LA    R1,PWAREC+DSPALDMD+1(R1)\n         MVI   0(R1),C')'\n         PUT   PWADCB,PWAREC\n         SPACE\nDSGETACL DS    0H\n*        WIPE  PWAREC                 ** TRACEMSG **\n*        IC    R1,PWADSNAM            ** TRACEMSG **\n*        BCTR  R1,0                   ** TRACEMSG **\n*        EX    R1,DSTMOVE             ** TRACEMSG **\n*        PUT   PWADCB,PWAREC          ** TRACEMSG **\n*        B     *+10                   ** TRACEMSG **\n*DSTMOVE MVC   PWAREC+1(0),PWADSNAM+1 ** TRACEMSG **\n         LH    R7,RWDCNT            GET # ACL ENTRIES\n         LTR   R7,R7                ARE THERE ANY?\n         BZ    DSMAIN                NO, DON'T BOTHER WITH THIS ONE.\n         FINDACL TYPE=D             LOCATE ACCESS LIST\n         LR    R4,R1                GET ADDRESS OF 1ST ACL ENTRY\n         SPACE\nDSLOOKUP DS    0H\n         MVC   PWALKARG(8),0(R4)    GET AN ACCESS LIST ENTRY'S NAME\n         BAL   R6,LOOKUP            SEE IF IT'S IN THE TABLE\n         SPACE\n         LTR   R15,R15              WAS IT THERE?\n         BNZ   DSGOTONE              NO. GO GET RID OF IT.\n         SPACE\nDSLOOKNX DS    0H\n*        WIPE  PWAREC                        ** TRACEMSG **\n*        MVC   PWAREC+3(9),=C'JUST DID '     ** TRACEMSG **\n*        MVC   PWAREC+12(8),0(R4)            ** TRACEMSG **\n*        PUT   PWADCB,PWAREC                 ** TRACEMSG **\n         LA    R4,11(R4)            POINT TO NEXT ACL ENTRY\n         BCT   R7,DSLOOKUP          GO LOOK UP NEXT ONE.\n         SPACE\n*        EX    0,*                  ** TESTING **\n         B     DSMAIN               DONE ONE, DO THE NEXT ONE.\n         SPACE\nDSGOTONE DS    0H\n*\n*  AHA. WE HAVE FOUND AN ACL ENTRY WITH NO CORRESPONDING USER OR\n*       GROUP PROFILE. WE SHOULD NOW DELETE IT.\n*\n         CLI   PWAPRM2,PWAPRM2N     WE REALLY DELETING STUFF?\n         BE    DSDELRPT              NAW, SKIP DELETE.\n         SPACE\n         MVI   PWACMD,C' '          CONSTRUCT PERMIT COMMAND\n         MVC   PWACMD+1(L'PWACMD-1),PWACMD\n         MVC   PWACMD(3),=CL3'PE '\n         MVI   PWACMD+3,C''''\n         XR    R1,R1\n         IC    R1,PWADSNAM\n         BCTR  R1,0\n         EX    R1,MVCDSNPE\n         LA    R1,PWACMD+5(R1)\n         MVI   0(R1),C''''\n         LA    R1,2(R1)\n         TM    RWDFLAG1,RWDGENPR    IS IT A GENERIC PROFILE?\n         BO    DSDELGEN              YES, NO VOLUMES HERE EITHER\n         CLC   RWDVOLL,=H'0'        ANY VOLUMES, OR IS IT A MODEL?\n         BE    DSDELMDL              NO VOLUMES, DON'T PUT ON COMMAND\n         SPACE\n         MVC   0(11,R1),=CL11'VOL(      )'\n         SPACE\n         LA    R1,4(R1)\n         MVC   0(6,R1),RWDVOL\n         LA    R1,8(R1)\n         MVC   PWATRACE,=CL12'RMV DATASET'\n         B     DSDELRPT\n         SPACE\nDSDELMDL DS    0H\n         MVC   PWATRACE,=CL12'RMV DSMODEL'\n         B     DSDELRPT\n         SPACE\nDSDELGEN DS    0H\n         MVC   PWATRACE,=CL12'RMV GENERIC'\n         MVC   0(8,R1),=CL8'GENERIC '\n         LA    R1,8(R1)\n         SPACE\nDSDELRPT DS    0H\n         MVC   0(16,R1),=C'DEL ID(        )'\n         LA    R1,7(R1)\n         MVC   0(8,R1),PWALKARG\n*\n* CODE ADDED 4/28/88 BY JCB TO ADD A COMMENTED 'ACCESS(WHATEVER)' TO\n*                    THE PERMIT COMMAND BEING BUILT\n*\n         LA    R1,10(R1)\n         MVC   0(11,R1),=C'/* AC(?) */'\n         LA    R15,STCACTBL\nDSACSCAN DS    0H\n         CLC   0(1,R15),8(R4)\n         BE    DSGOTAC\n         CLI   0(R15),X'FF'\n         BE    DSACFAIL\n         LA    R15,2(R15)\n         B     DSACSCAN\nDSGOTAC  DS    0H\n         MVC   6(1,R1),1(R15)\nDSACFAIL DS    0H\n         PUT   PWACDCB,PWACMD       SPIT OUT PERMIT COMMAND\n*\n         WIPE  PWAREC               CLEAR RECORD AND MOVE BASE MESSAGE\n         MVC   PWAREC(L'STCDSM),STCDSM\n         XR    R1,R1\n         IC    R1,PWADSNAM\n         BCTR  R1,0\n         EX    R1,MVCDSN            MOVE IN DSNAME WE'RE ON\n         LA    R1,PWAREC+DSPDSMD+1(R1)\n         MVI   0(R1),C')'           MAKE IT LOOK NEAT\n         TM    RWDFLAG1,RWDGENPR    A GENERIC?\n         BO    DSGOTGEN              FIX UP MESSAGE.\n         CLC   RWDVOLL,=H'0'        ANY VOLUMES?\n         BE    DSGOTMOD              NO, ASSUME MODEL.\n         MVC   PWAREC+DSPDSMV(6),RWDVOL   MOVE IN (FIRST) VOLUME\n         B     DSGOTUSR\n         SPACE\nDSGOTMOD DS    0H\n         MVC   PWAREC+DSPDSMV(6),=CL6'MODEL'   SAY IT'S A MODEL\n         B     DSGOTUSR\n         SPACE\nDSGOTGEN DS    0H\n         MVC   PWAREC+DSPDSMG(11),=CL11'< GENERIC >'\n         SPACE\nDSGOTUSR DS    0H\n         MVC   PWAREC+DSPDSMU(8),PWALKARG      PUT IN ENTRY WE DID\n         PUT   PWADCB,PWAREC\n         SPACE\n         COUNT PWADCNTD             COUNT ONE AS DELETED\n         B     DSLOOKNX\n         TITLE 'CLEANACL -- SAY HOW MANY DATASETS WE DID'\nDSFINISH DS    0H\n         TM    PWAFLAG,PWAF1GEN     TRY TO TURN OFF DO-GENERICS:    @C3\n         BO    DSNCRPT               IF IT WAS ON, ALREADY DID IT.  @C3\n         OI    PWAFLAG,PWAF1GEN     SET DO-GENERICS FLAG            @C3\n         XC    PWADSNAM,PWADSNAM    CLEAR ENTRY                     @C3\n         ICHEINTY GENERIC=YES,      MODIFY ICHEINTY LIST TO DO ONLY @C3*\n               MF=(E,PWADINTY)       THE GENERICS                   @C3\n         B     DSMAIN                                               @C3\n         SPACE 1                                                    @C3\nDSNCRPT  DS    0H                                                   @C3\n         NI    PWAFLAG,X'FF'-PWAF1GEN                               @C3\n         MVC   PWAREC(L'STCDSOKM),STCDSOKM\n         SPACE\n         CONVERT TO=PWAREC+DSPDSOKN,FROM=PWADCNT,LENGTH=5\n         SPACE\n         CONVERT TO=PWAREC+DSPDSOKR,FROM=PWADCNTD,LENGTH=5\n         SPACE\n         CONVERT TO=PWAREC+DSPDSOKO,FROM=PWADCNTO,LENGTH=5\n         SPACE\n         PUT   PWADCB,PWAREC        SAY WE DONE DEM DATASETS\n         WIPE  PWAREC\n         PUT   PWADCB,PWAREC        BLANK LINE AS SEPARATOR.\n*        B     FINISHED             ** TESTING **\n         TITLE 'CLEANACL -- PROCESS GENERAL-CLASS PROFILES'\nGENERALS DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*   NOW, GO THROUGH ALL CLASSES IN THE CLASS DESCRIPTOR TABLE AND     *\n*   READ ALL PROFILES IN EACH CDT CLASS. THE CDT LIVES IN LPALIB      *\n*   AS ICHERCDE AND IS MAPPED BY THE 'CDE' DSECT.                     *\n*                                                                     *\n*   CURRENTLY, RESOURCE GROUP CLASSES ARE NOT PROCESSED.              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\n*        LOAD  EP=ICHRRCDE          FIND CLASS DESCRIPTOR TABLE    @C2\n*        ST    R0,PWAACDT            AND SAVE FOR LATER.           @C2\n*        LR    R9,R0                R9 BECOMES CDT ENTRY BASE      @C2\n         L     R9,CVTPTR                                           @C2\n         L     R9,CVTRAC-CVT(,R9)                                  @C2\n         L     R9,RCVTCDTP-RCVT(,R9)                               @C2\n         ST    R9,PWAACDT                                          @C2\n         USING CDE,R9\n         TM    CDEPROCF,CDEGROUP    THIS A GROUP CLASS?\n         BZ    GENERAL2              NO, PROCEED.\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCGRPCM),STCGRPCM\n         MVC   PWAREC+DSPGRPCL(8),CDECLASS\n         PUT   PWADCB,PWAREC\n         B     GENNXTCL\n         SPACE\nGENERAL2 DS    0H\n         DROP  R10                  DROP RWD BASE\n         USING RWC,R10              REUSE RWD CORE FOR RWC.\n         XC    RWC+4(32),RWC+4      CLEAR RMWA HEADER\n         SPACE\n         ICHEINTY ENTRY=PWAENTRY,   SET UP GENERAL-CLASS READ CALLS    *\n               CLASS=(*-*),                                            *\n               WKAREA=RWC,                                             *\n               ACTIONS=(STCAOWNR,PWAACNT,PWAAACL),                     *\n               OPTIONS=(ACTIONS,TESTC,TESTM,FLDEF,NOEXEC),             *\n               MF=(E,PWACINTY)\n         SPACE\nGENMAIN  DS    0H\n         MVC   PWATRACE,=CL12'READ GENERAL'\n         ICHEINTY CLASS=CDECLASS,   READ A PROFILE                     *\n               MF=(E,PWACINTY)\n*        ICHEINTY CLASS=STCDASDV,   ** TESTING **                    *\n*              MF=(E,PWACINTY)      ** TESTING **\n         SPACE\n         CH    R15,=H'12'           FINISHED THIS CLASS YET?\n         BE    GENNXTCL              YES, GO PICK UP NEXT ONE\n         LTR   R15,R15              UNEXPECTED RACF ERROR?\n         BNZ   RACFERR               GO REPORT IT.\n         SPACE\n         COUNT PWACCNT              SAY WE READ ONE\n***\n         MVC   PWALKARG(8),RWCOWNER PICK UP OWNER\n         BAL   R6,LOOKUP            SEE IF IT'S IN THE TABLE\n         LTR   R15,R15\n         BZ    GNGETACL\n         SPACE\n         COUNT PWACCNTO\n         WIPE  PWACMD               CONSTRUCT RALTER COMMAND\n         MVC   PWACMD(5),=CL5'RALT '\n         MVC   PWACMD+5(8),CDECLASS\n         XR    R1,R1\n         IC    R1,PWAENTRY\n         BCTR  R1,0\n         EX    R1,MVCENTRA\n         CH    R1,=H'44'    ** TESTING **\n         BNH   *+8          ** TESTING **\n         EX    0,*          ** TESTING **\n         LA    R1,PWACMD+14(R1)\n         MVC   0(16,R1),=C' OWNER(????????)'\n         PUT   PWAC2DCB,PWACMD\n         SPACE\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCRALTM),STCRALTM\n         MVC   PWAREC+DSPRALTO(8),RWCOWNER\n         MVC   PWAREC+DSPRALTC(8),CDECLASS\n         XR    R1,R1\n         IC    R1,PWAENTRY\n         BCTR  R1,0\n         EX    R1,MVCENTRP\n         LA    R1,PWAREC+DSPRALTE+1(R1)\n         MVI   0(R1),C')'\n         PUT   PWADCB,PWAREC\n         SPACE\n***\nGNGETACL DS    0H\n         LH    R7,RWCCNT            GET # ACL ENTRIES\n         LTR   R7,R7                ARE THERE ANY?\n         BZ    GENMAIN               NO, DON'T BOTHER WITH THIS ONE.\n         SPACE\n         FINDACL TYPE=C             LOCATE ACCESS LIST\n         LR    R4,R1                GET ADDRESS OF 1ST ACL ENTRY\n*        WIPE  PWAREC                 ** TRACEMSG **\n*        IC    R1,PWAENTRY            ** TRACEMSG **\n*        BCTR  R1,0                   ** TRACEMSG **\n*        EX    R1,GNTMOVE             ** TRACEMSG **\n*        PUT   PWADCB,PWAREC          ** TRACEMSG **\n*        B     GNLOOKUP               ** TRACEMSG **\n*GNTMOVE MVC   PWAREC+1(0),PWAENTRY+1 ** TRACEMSG **\n         SPACE\nGNLOOKUP DS    0H\n         MVC   PWALKARG(8),0(R4)    GET AN ACCESS LIST ENTRY'S NAME\n         BAL   R6,LOOKUP            SEE IF IT EXISTS\n         SPACE\n         LTR   R15,R15              WAS IT THERE?\n         BNZ   GNGOTONE              NO. GO GET RID OF IT.\n         SPACE\nGNLOOKNX DS    0H\n*        WIPE  PWAREC                        ** TRACEMSG **\n*        MVC   PWAREC+3(9),=C'JUST DID '     ** TRACEMSG **\n*        MVC   PWAREC+12(8),0(R4)            ** TRACEMSG **\n*        PUT   PWADCB,PWAREC                 ** TRACEMSG **\n         LA    R4,11(R4)            POINT TO NEXT ACL ENTRY\n         BCT   R7,GNLOOKUP          GO LOOK UP NEXT ONE.\n         SPACE\n         B     GENMAIN              DONE ONE, DO THE NEXT ONE.\n         EJECT\nGNGOTONE DS    0H\n*\n*  AHA. WE HAVE FOUND AN ACL ENTRY WITH NO CORRESPONDING USER OR\n*       GROUP PROFILE. WE SHOULD NOW DELETE IT.\n*\n         CLI   PWAPRM2,PWAPRM2N     WE REALLY DELETING STUFF?\n         BE    GNGOTRPT              NAW, SKIP IT.\n         SPACE\n         MVC   PWATRACE,=CL12'RMV GENERAL'\n         WIPE  PWACMD\n         MVC   PWACMD(3),=CL3'PE '\n         XR    R1,R1\n         IC    R1,PWAENTRY\n         BCTR  R1,0\n         EX    R1,MVCENTPE\n         LA    R1,PWACMD+5(R1)\n         MVC   0(6,R1),=CL6'CLASS('\n         LA    R1,6(R1)\n         MVC   0(8,R1),CDECLASS\n         MVI   8(R1),C')'\n         LA    R1,10(R1)\n         MVC   0(16,R1),=C'DEL ID(        )'\n         LA    R1,7(R1)\n         MVC   0(8,R1),PWALKARG\n*\n* CODE ADDED 4/28/88 BY JCB TO ADD A COMMENTED 'ACCESS(WHATEVER)' TO\n*                    THE PERMIT COMMAND BEING BUILT\n*\n         LA    R1,12(R1)\n         MVC   0(11,R1),=C'/* AC(?) */'\n         LA    R15,STCACTBL\nGNACSCAN DS    0H\n         CLC   0(1,R15),8(R4)\n         BE    GNGOTAC\n         CLI   0(R15),X'FF'\n         BE    GNACFAIL\n         LA    R15,2(R15)\n         B     GNACSCAN\nGNGOTAC  DS    0H\n         MVC   6(1,R1),1(R15)\nGNACFAIL DS    0H\n         PUT   PWACDCB,PWACMD\n         SPACE\nGNGOTRPT DS    0H\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCGENM),STCGENM    CONSTRUCT REPORT LINE\n         XR    R1,R1\n         IC    R1,PWAENTRY\n         BCTR  R1,0\n         EX    R1,MVCENTRY\n         LA    R1,PWAREC+DSPGENME+1(R1)\n         MVI   0(R1),C')'\n         MVC   PWAREC+DSPGENMC(8),CDECLASS\n         MVC   PWAREC+DSPGENMU(8),PWALKARG\n         PUT   PWADCB,PWAREC\n         COUNT PWACCNTD\n         SPACE\nGENLKNX  DS    0H\n         LA    R4,11(R4)            POINT TO NEXT ACL ENTRY\n         BCT   R7,GNLOOKUP           AND KEEP ON MUNCHING,\n         B     GENMAIN              TIL THEY'RE ALL GONE GONE GONE....\n         EJECT\nGENNXTCL DS    0H                   FINISHED A CLASS, GET THE NEXT ONE.\n         L     R1,CDECLPOS          GET CLASS MASK FOR CURRENT CLASS@C3\n         L     R2,CVTPTR            GET ADDRESS OF RCVT             @C3\n         L     R2,CVTRAC-CVT(,R2)                                   @C3\n         USING RCVT,R2                                              @C3\n         N     R1,RCVTCGEN          GENERICS TURNED ON FOR CLASS?   @C3\n         BZ    GENNCRPT              NO, DON'T BOTHER TRYING.       @C3\n         DROP  R2                                                   @C3\n         TM    PWAFLAG,PWAF1GEN     TRY TO TURN OFF DO-GENERICS:    @C3\n         BO    GENNCRPT              IF IT WAS ON, ALREADY DID IT.  @C3\n         OI    PWAFLAG,PWAF1GEN     SET DO-GENERICS FLAG            @C3\n         WIPE  PWAENTRY             CLEAR ENTRY                     @C3\n         MVI   PWAENTRY,X'01'        AND SET ITS LENGTH TO 1        @C3\n         ICHEINTY GENERIC=UNCOND,   MODIFY ICHEINTY LIST TO DO ONLY @C3*\n               MF=(E,PWACINTY)       THE GENERICS                   @C3\n         B     GENMAIN                                              @C3\nGENNCRPT DS    0H                                                   @C3\n         NI    PWAFLAG,X'FF'-PWAF1GEN                               @C3\n         MVC   PWAREC(L'STCGNOKM),STCGNOKM\n         SPACE\n         CONVERT TO=PWAREC+DSPGNOKN,FROM=PWACCNT,LENGTH=5\n         SPACE\n         CONVERT TO=PWAREC+DSPGNOKR,FROM=PWACCNTD,LENGTH=5\n         SPACE\n         CONVERT TO=PWAREC+DSPGNOKO,FROM=PWACCNTO,LENGTH=5\n         SPACE\n         MVC   PWAREC+DSPGNOKC(8),CDECLASS\n         SPACE\n         PUT   PWADCB,PWAREC        SUMMARY LINE PER CLASS\n         WIPE  PWAREC\n         PUT   PWADCB,PWAREC        PUT A BLANK LINE\n*        B     FINISHED             ** TESTING **\n         SPACE\n         XC    PWACCNT,PWACCNT      CLEAR PROFILE COUNTER\n         XC    PWACCNTD,PWACCNTD     AND DELETE COUNTER\n         XC    PWACCNTO,PWACCNTO      AND OWNER COUNTER\n         SPACE\n         AH    R9,CDELEN            POINT TO NEXT CDE\n         CLC   CDELEN(2),=H'0'      WE JUST DO THE LAST ONE?\n         BE    FINISHED              GREAT, WE'RE ALMOST DONE.\n         TM    CDEPROCF,CDEGROUP    THIS A GROUP CLASS?\n         BO    GENNCRPT              SKIP IT.\n         WIPE  PWAENTRY             RESET ENTRY NAME FOR\n         MVI   PWAENTRY,X'01'         ICHEINTY NEXT\n         XC    RWC+4(32),RWC+4      CLEAR OUT RMWA HEADER AGAIN\n*        ICHEINTY GENERIC=NO,       MODIFY ICHEINTY LIST TO DO ONLY  *\n*              MF=(E,PWACINTY)       NON-GENERICS\n         MVC   PWACINTY(LENCINTY),STCCINTY  REBUILD ICHEINTY PARMLIST\n         ICHEINTY ENTRY=PWAENTRY,   SET UP GENERAL-CLASS READ CALLS    *\n               CLASS=(*-*),                                            *\n               WKAREA=RWC,                                             *\n               ACTIONS=(STCAOWNR,PWAACNT,PWAAACL),                     *\n               OPTIONS=(ACTIONS,TESTC,TESTM,FLDEF,NOEXEC),             *\n               MF=(E,PWACINTY)\n         B     GENMAIN              BACK INTO MAIN LOOP.\n         TITLE 'CLEANACL -- TERMINATION'\nFINISHED DS    0H\n         CLOSE PWADCB,MF=(E,PWACLOSE)\n         CLOSE PWACDCB,MF=(E,PWACLOSE)\n         CLOSE PWAC2DCB,MF=(E,PWACLOSE)\n*        WTO   ,MF=(E,STCWTO3)\n         SPACE\n*\n*  FREE ALL THAT CORE WE GOT A LONG TIME AGO.\n*\n         FREEMAIN R,LV=32768,A=(R10),SP=2   FREE RACF MANAGER WORKAREA\n         SPACE\n         L     R3,PWAINDEX          GET INDEX ENTRY COUNT\n         LA    R4,PWAINDEX+4        POINT TO FIRST INDEX ENTRY\n         SPACE\nFINFREES DS    0H\n         L     R2,0(R4)             ADDRESS OF CORE TO FREE\n         FREEMAIN R,LV=4096,A=(R2),SP=1   LET IT GO\n         LA    R4,12(R4)            POINT TO NEXT INDEX ENTRY\n         BCT   R3,FINFREES          DO 'EM ALL.\n         EJECT\nQUITZERO DS    0H\n         XR    R2,R2                SAVE FINAL RC IN R2\n         B     QUIT                 SKIP DOWN TO PWA FREE\n         SPACE\nQUIT16   DS    0H\n         LA    R2,16                SAVE FINAL RC IN R2\n         SPACE\nQUIT     DS    0H\n         LR    R1,R13               COPY PWA ADDRESS\n         L     R13,4(R13)           POINT TO PRIOR SAVEAREA\n         FREEMAIN R,LV=PWALEN,A=(1)   FREE PROGRAM WORKAREA\n         SPACE\n         LR    R15,R2               COPY RETURN CODE\n         RETURN (14,12),RC=(15)     TERMINATE.\n         TITLE 'CLEANACL -- RESTART USER/GROUP TABLE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THE RESTART ROUTINE READS THE USER/GROUP TABLE FROM THE CHKPT      *\n*  DATASET INSTEAD OF FROM RACF. AS IT GOES, IT REBUILDS PWAINDEX.    *\n*  WHEN THE TABLE IS REBUILT, RESTART EXITS TO 'DATASETS'.            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nRESTART  DS    0H\n         MVC   PWACPDCB(LENCRDCB),STCCRDCB       COPY RESTART DCB\n         MVC   PWATRACE,=CL12'OPEN RESTART'\n         OPEN  (PWACPDCB,INPUT),MF=(E,PWAOPEN)   OPEN RESTART DCB\n         LTR   R15,R15\n         BNZ   OPENERR                           OOPS, FORGOT A DDNAME.\n         SPACE\nRSTMAIN  DS    0H                   MAIN LOOP FOR READING BLOCKS\n         BAL   R6,GET4K             GET A PAGE: SETS PWAINDEX\n         GET   PWACPDCB,(R10)       GET RECORD: R10 = A(PAGE)\n         B     RSTMAIN              DO TIL WE GOT 'EM ALL.\n         SPACE\nRSTEOF   DS    0H                   END OF CHECKPOINT BLOCKS.\n         FREEMAIN R,LV=4096,A=(10),SP=1  YEAH, WE GOT ONE TOO MANY\n         L     R1,PWAINDEX          GET INDEX ENTRY COUNT\n         BCTR  R1,0                   (IT'S ONE TOO MANY, TOO)\n         ST    R1,PWAINDEX            (SO FIX AND SAVE IT.   )\n         LA    R2,PWAINDEX+4        GET START OF INDEX ENTRIES\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THE USER/GROUP TABLE HAS BEEN RE-CREATED. NOW REBUILD THE INDEX.   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nRSTRBLD  DS    0H\n         L     R3,0(R2)             GET ADDRESS OF A PAGE\n         MVC   4(8,R2),4096-8(R3)   MOVE HI KEY\n         LA    R2,12(R2)            POINT TO NEXT INDEX ENTRY\n         BCT   R1,RSTRBLD           DO FOR ALL INDEXES\n         SPACE\n         WIPE  PWAREC\n         MVC   PWAREC(L'STCMSGCR),STCMSGCR\n         PUT   PWADCB,PWAREC        SAY 'CHECKPOINT DATASET LOADED'\n         SPACE\n         CLOSE PWACPDCB,MF=(E,PWACLOSE)  AND CLOSE CHKPT DATASET\n         B     EXCLUDE              JUMP INTO EXCLUDE CODE.         @C3\n         TITLE 'CLEANACL -- SUBROUTINES FOR THE MAINLINES'\nGETUSER  DS    0H                   GET THE NEXT USER PROFILE\n         MVC   PWATRACE(12),=CL12'READ USERID'\n         ICHEINTY MF=(E,PWAUINTY)   GO AFTER ONE\n         SPACE\n         CH    R15,=H'12'           NO MORE?\n         BE    GTUDONE               YES, GO SET FLAG.\n         LTR   R15,R15              OTHER ERROR?\n         BNZ   RACFERR               SNAFU.\n         SPACE\n         COPYFLD PWAJUSR,PWAUSER    MOVE W/O LENGTH\n         COUNT PWAUCNT              COUNT HIM\n         BR    R6                   THAT'S ALL.\n         SPACE\nGTUDONE  DS    0H\n         MVC   PWAJUSR(8),=8X'FF'   MAKE COMPARE WORK RIGHT\n         OI    PWAFLAG,PWAUEOF      SET RAN-OUT FLAG\n         BR    R6\n         EJECT\nGETGROUP DS    0H                   GET NEXT GROUP PROFILE\n         MVC   PWATRACE(12),=CL12'READ GROUP'\n         ICHEINTY MF=(E,PWAGINTY)   GO AFTER ONE\n         SPACE\n         CH    R15,=H'12'           ETC ETC, JUST LIKE GETUSER\n         BE    GTGDONE\n         LTR   R15,R15\n         BNZ   RACFERR\n         SPACE\n         COPYFLD PWAJGRP,PWAGROUP\n         COUNT PWAGCNT\n         BR    R6\n         SPACE\nGTGDONE  DS    0H\n         MVC   PWAJGRP(8),=8X'FF'\n         OI    PWAFLAG,PWAGEOF\n         BR    R6\n         EJECT\nGET4K    DS    0H                   GET A PAGE TO PUT STUFF ON\n         CLI   PWAPRM1,PWAPRM1C     CHECKPOINTING?\n         BNE   GET4KGET              NO, DON'T TRY TO SAVE PAGE.\n         SPACE\n         L     R1,PWAINDEX          GET CURRENT # PAGES\n         LTR   R1,R1                DONE ANY YET?\n         BNZ   GET4KCKP              SURE, GO SAVE PAGE.\n         SPACE\n         MVC   PWACPDCB(LENCPDCB),STCCPDCB       COPY DCB\n         MVC   PWATRACE,=CL12'OPEN CHECKPT'      TRACE IT\n         OPEN  (PWACPDCB,OUTPUT),MF=(E,PWAOPEN)  OPEN IT\n         SPACE\n         LTR   R15,R15              PROBLEMS?\n         BNZ   OPENERR               WON'T GET FAR LIKE THAT.\n         SPACE\n         B     GET4KGET             NOTHING TO PUT WITH YET.\n         SPACE\nGET4KCKP DS    0H\n         PUT   PWACPDCB,(R10)       SAVE PRIOR 4K BLOCK\n         SPACE\nGET4KGET DS    0H\n         GETMAIN RU,LV=4096,SP=1,BNDRY=PAGE   GET SOME CORE\n         EJECT\n         LR    R14,R1               SAVE ADDRESS OF NEW STORAGE\n         COUNT PWAINDEX             COUNT HOW MANY BLOCKS THERE ARE\n         LA    R15,PWAINDEX         FIGURE WHERE NEXT ENTRY GOES:\n         LA    R15,4(R15)             POINT TO START OF ENTRIES\n         L     R0,PWAINDEX            GET DISP. TO THE NEW ONE:\n         SH    R0,=H'1'                 GET COUNT, SUBTRACT 1,\n         MH    R0,=H'12'                MULT. BY ONE ENTRY'S LENGTH\n         AR    R15,R0                 MAKE IT AN ADDRESS\n         ST    R14,0(R15)           THAT'S WHERE.\n         LR    R10,R14              SET NEW 4K PAGE BASE\n         XR    R9,R9                CLEAR DIAPLACEMENT INTO PAGE\n*\n*   SET NEW PAGE TO HI-VALUES. R14 CONTAINS PAGE ADDRESS.\n*\n         LH    R15,=H'4096'         LENGTH\n         XR    R0,R0                DON'T MOVE ANY DATA\n         XR    R1,R1                LENGTH = 0\n         ICM   R1,B'1000',=X'FF'    PAD CHARACTER = X'FF'\n         MVCL  R14,R0               SPREAD FF'S THRU THE PAGE\n         SPACE\n         BR    R6                   RETURN TO CALLER.\n         EJECT\nLOOKUP   DS    0H                   TRY TO FIND AN ACL ENTRY\n         L     R1,PWAINDEX          GET INDEX ENTRY COUNT\n         LA    R2,PWAINDEX+4        START OF INDEX ENTRIES\n         SPACE\nLKUGO    DS    0H\n         CLC   4(8,R2),PWALKARG     HI-KEY .GE. ARGUMENT?\n         BNL   LKUPAGE               YES, SEE IF ENTRY'S ON PAGE.\n         SPACE\n         LA    R2,12(R2)            POINT TO NEXT ENTRY\n         BCT   R1,LKUGO              AND COUNT 'EM DOWN.\n         SPACE\nLKUPAGE  DS    0H                   NOW LOCATE ENTRY ON 4K PAGE\n         L     R2,0(R2)             GET ADDRESS OF PAGE\n         LA    R1,512               LOOP THIS MANY TIMES\n         SPACE\nLKUSRCH  DS    0H\n         CLC   0(8,R2),PWALKARG     GOT A HIT?\n         BE    LKUOK\n         LA    R2,8(R2)             TRY NEXT ONE\n         BCT   R1,LKUSRCH\n         SPACE\n         LA    R15,8                NO HIT.\n         BR    R6\n         SPACE\nLKUOK    DS    0H\n         XR    R15,R15              HIT, LEAVE ALONE.\n         BR    R6\n         SPACE\nMVCDSN   MVC   PWAREC+DSPDSMD(0),PWADSNAM+1 ** EXECUTE ONLY **\nMVCDSNAR MVC   PWAREC+DSPALDMD(0),PWADSNAM+1 ** EXECUTE ONLY **\nMVCDSNPE MVC   PWACMD+4(0),PWADSNAM+1       ** EXECUTE ONLY **\nMVCDSNAL MVC   PWACMD+5(0),PWADSNAM+1       ** EXECUTE ONLY **\nMVCENTRY MVC   PWAREC+DSPGENME(0),PWAENTRY+1 ** EXECUTE ONLY **\nMVCENTPE MVC   PWACMD+3(0),PWAENTRY+1        ** EXECUTE ONLY **\nMVCENTRA MVC   PWACMD+13(0),PWAENTRY+1        ** EXECUTE ONLY **\nMVCENTRP MVC   PWAREC+DSPRALTE(0),PWAENTRY+1 ** EXECUTE ONLY **\n         TITLE 'CLEANACL -- ERROR ROUTINES'\nRACFERR  DS    0H                   REPORT WIERD RACF RETURNCODES\n         MVC   PWAREC(L'STCRACFM),STCRACFM\n         MVC   PWAREC+DSPRACFT,PWATRACE\n         SPACE\n         CVD   R15,PWACVD\n         UNPK  PWAREC+DSPRACFC(4),PWACVD+6(2)\n         OI    PWAREC+DSPRACFC+3,X'F0'\n         SPACE\n         PUT   PWADCB,PWAREC\n         SPACE\n         CLOSE PWADCB,MF=(E,PWACLOSE)\n         B     QUIT16\n         SPACE\nPARMERR  DS    0H               //  EXEC PGM=CLEANACL,PARM=DUH\n*        WTO   ,MF=(E,STCWTOPE)     SAY WHAT?\n         B     QUIT16\n         SPACE\nOPENERR  DS    0H                   WHO FORGOT THE DDNAMES?\n         MVC   PWAREC(L'STCOPENM),STCOPENM\n         MVC   PWAREC+DSPOPENT(12),PWATRACE\n         PUT   PWADCB,PWAREC\n         B     QUIT16\n         TITLE 'CLEANACL -- CONSTANTS'\nSTC      DS    0D                   CONSTANTS START HERE\n*STCDASDV DC    CL8'CACCT  '         ** TESTING **\n         PRINT NOGEN\nSTCDCB   DCB   DDNAME=SYSPRINT,LRECL=132,BLKSIZE=1320,RECFM=FB,        *\n               DSORG=PS,MACRF=PM\nLENDCB   EQU   *-STCDCB\n         SPACE\nSTCCDCB  DCB   DDNAME=COMMANDS,LRECL=80,BLKSIZE=6160,RECFM=FB,         *\n               DSORG=PS,MACRF=PM\nLENCDCB  EQU   *-STCCDCB\n         SPACE\nSTCC2DCB DCB   DDNAME=OWNERS,LRECL=80,BLKSIZE=6160,RECFM=FB,           *\n               DSORG=PS,MACRF=PM\nLENC2DCB EQU   *-STCC2DCB\n         SPACE\nSTCCPDCB DCB   DDNAME=CHECKPT,LRECL=4096,BLKSIZE=4096,RECFM=FB,        *\n               DSORG=PS,MACRF=PM\nLENCPDCB EQU   *-STCCPDCB\n         SPACE\nSTCCRDCB DCB   DDNAME=CHECKPT,LRECL=4096,BLKSIZE=4096,RECFM=FB,        *\n               DSORG=PS,MACRF=GM,EODAD=RSTEOF\nLENCRDCB EQU   *-STCCRDCB\n         SPACE 1                    |                               @C1\nSTCSYSIN DCB   DDNAME=EXCLUDES,LRECL=80,BLKSIZE=80,RECFM=FB,        @C1*\n               DSORG=PS,MACRF=GM,EODAD=EXCEND                       @C1\nLENSYSIN EQU   *-STCSYSIN           |                               @C1\n         PRINT GEN\n         SPACE\nSTCMSGCP DC    C'*** CHECKPOINT DATASET CREATED.'\nSTCMSGCR DC    C'*** CHECKPOINT DATASET RELOADED.'\nSTCMSGTL DC    C'*** USER/GROUP TABLE LOADED: NNNNN USERS, NNNNN GROUPS*\n               '\nDSPMTLU  EQU   29,5\nDSPMTLG  EQU   42,5\n         SPACE 1                    |                               @C1\nSTCXNTRY DC    C'*** EXCLUDE ENTRY(........) NOT FOUND IN USER/GROUP TA*\n               BLE'                 |                               @C1\nDSPXNENT EQU   18,8                 |                               @C1\nSTCDSOKM DC    C'*** NNNNN DATASET PROFILES PROCESSED, NNNNN INVALID EN*\n               TRIES REMOVED, NNNNN OWNERS CHANGED'\nDSPDSOKN EQU   4,5\nDSPDSOKR EQU   38,5\nDSPDSOKO EQU   69,7\nSTCGNOKM DC    C'*** NNNNN CLASS(        ) PROFILES PROCESSED, NNNNN IN*\n               VALID ENTRIES REMOVED, NNNNN OWNERS CHANGED'\nDSPGNOKN EQU   4,5\nDSPGNOKC EQU   16,8\nDSPGNOKR EQU   46,8\nDSPGNOKO EQU   77\n         SPACE\nSTCOPENM DC    C'*** TTTTTTTTTTTT - OPEN ERROR'\nDSPOPENT EQU   4,12\n         SPACE\nSTCDSM   DC    C'REMOVED USER(        ) FROM VOL(      ) DATASET('\nDSPDSMU  EQU   13,8\nDSPDSMG  EQU   28,11\nDSPDSMV  EQU   32,6\nDSPDSMD  EQU   48,44\n         SPACE\nSTCALDM  DC    C'CHANGED OWNER(        ) ON VOL(      ) DATASET('\nDSPALDMO EQU   14,8\nDSPALDMG EQU   27,11\nDSPALDMV EQU   31,6\nDSPALDMD EQU   47,44\n         SPACE\nSTCGENM  DC    C'REMOVED USER(        ) FROM CLASS(        ) ENTRY('\nDSPGENMU EQU   13,8\nDSPGENMC EQU   34,6\nDSPGENME EQU   50,44\n         SPACE\nSTCRALTM DC    C'CHANGED OWNER(        ) ON CLASS(        ) ENTRY('\nDSPRALTO EQU   14,8\nDSPRALTC EQU   33,8\nDSPRALTE EQU   49,44\n         SPACE\nSTCGRPCM DC    C'*** RESOURCE-GROUP CLASS(        ) IGNORED.'\nDSPGRPCL EQU   25,8\n         SPACE\nSTCRACFM DC    C'*** RACF MANAGER ERROR - TTTTTTTTTTTT RC CCCC (DEC)'\nDSPRACFT EQU   25,12\nDSPRACFC EQU   41,4\n         SPACE\nSTCOPEN  OPEN  (STCDCB,OUTPUT),MF=L\nLENOPEN  EQU   *-STCOPEN\n         SPACE\nSTCCLOSE CLOSE STCDCB,MF=L\nLENCLOSE EQU   *-STCCLOSE\n         SPACE\nSTCUINTY ICHEINTY NEXT,                                                *\n               TYPE='USR',                                             *\n               ENTRY=*-*,                                              *\n               WKAREA=*-*,                                             *\n               MF=L\nLENUINTY EQU   *-STCUINTY\n         SPACE\nSTCGINTY ICHEINTY NEXT,                                                *\n               TYPE='GRP',                                             *\n               ENTRY=*-*,                                              *\n               WKAREA=*-*,                                             *\n               MF=L\nLENGINTY EQU   *-STCGINTY\n         SPACE\nSTCDINTY ICHEINTY NEXT,             ICHEINTY TO READ DATASET PROFILES  *\n               TYPE='DS',                                              *\n               ENTRY=*-*,                                              *\n               WKAREA=*-*,                                             *\n               GENERIC=NO,                                          @C3*\n               ACTIONS=(,,,),                                          *\n               MF=L\nLENDINTY EQU   *-STCDINTY\n         SPACE\nSTCCINTY ICHEINTY NEXT,             ICHEINTY TO READ GENERAL PROFILES  *\n               TYPE='GEN',                                             *\n               CLASS=*-*,                                              *\n               GENERIC=NO,                                             *\n               ENTRY=*-*,                                              *\n               WKAREA=*-*,                                             *\n               ACTIONS=(,,),                                           *\n               MF=L\nLENCINTY EQU   *-STCCINTY\n         SPACE\nSTCAOWNR ICHEACTN FIELD=OWNER,MF=L\n         SPACE\nSTCACNT  ICHEACTN FIELD=ACLCNT,MF=L READ ACCESS LIST COUNT\nLENACNT  EQU   *-STCACNT\n         SPACE\nSTCAACL  ICHEACTN FIELD=ACL,MF=L    READ ENTIRE ACCESS LIST\nLENAACL  EQU   *-STCAACL\n         SPACE\nSTCAVOL  ICHEACTN FIELD=VOLSER,MF=L READ VOLSER LIST\nLENAVOL  EQU   *-STCAVOL\n         SPACE\nSTCACTBL DS    0CL2\n         DC    X'80',C'A'\n         DC    X'40',C'C'\n         DC    X'20',C'U'\n         DC    X'10',C'R'\n         DC    X'01',C'N'\n         DC    X'FF',C'@'\n         LTORG\n         TITLE 'CLEANACL -- PROGRAM WORKAREA DSECT'\nPWA      DSECT\nPWASAVE  DS    18F\nPWASAVE2 DS    16F\n         SPACE\nPWAARWU  DS    A                    ADDRESS OF USER WORKAREA\nPWAARWG  DS    A                    ADDRESS OF GROUP WORKAREA\nPWAARWP  DS    A                    ADDRESS OF PROFILE WORKAREA\n         SPACE\nPWACNTRS DS    0F                   FULLWORDS FOR COUNTING THINGS:\nPWAUCNT  DS    A                      HOW MANY USERIDS WE READ\nPWAGCNT  DS    A                      HOW MANY GROUPS WE READ\nPWADCNT  DS    A                      HOW MANY DATASETS WE READ\nPWADCNTD DS    A                      HOW MANY DATASET REMOVES WE DID\nPWADCNTO DS    A                      HOW MANY DATASET OWNERS WE DID\nPWACCNT  DS    A                      HOW MANY GENERAL-CLASSES WE READ\nPWACCNTD DS    A                      HOW MANY GENERAL REMOVES WE DID\nPWACCNTO DS    A                      HOW MANY GENERAL OWNERS WE DID\nLENCNTRS EQU   *-PWACNTRS           HOW LONG TO DO AN XC FOR.\n         SPACE\nPWAACDT  DS    A                    ADDRESS OF CDT IN LPA\n         SPACE\nPWACVD   DS    D                    CONVERT-TO-DECIMAL WORKAREA\n         SPACE\nPWAOPEN  DS    CL(LENOPEN)          OPEN PARMLIST\nPWACLOSE DS    CL(LENCLOSE)         CLOSE PARMLIST\n         SPACE\nPWAFLAG  DS    X                    PROCESS FLAGS:\nPWAUEOF  EQU   X'80'                 RAN OUT OF USERIDS\nPWAGEOF  EQU   X'40'                 RAN OUT OF GROUPS\nPWAF1GEN EQU   X'20'                 MAKE GENERIC PASS OVER CLASS\n         SPACE\nPWAPRM1  DS    C                    PARAMETER FLAG:\nPWAPRM1C EQU   C'C'                  CHECKPOINT USER/GROUP TABLE\nPWAPRM1R EQU   C'R'                  RESTART USER/GROUP TABLE OFF CKPT\nPWAPRM1N EQU   C' '                  NORMAL PROCESSING.\n         SPACE\nPWAPRM2  DS    C                    ARE WE REALLY GONNA DELETE?\nPWAPRM2Y EQU   C'Y'                  YES, OR\nPWAPRM2N EQU   C'N'                  NO.\n         SPACE\nPWAUSER  DS    CL9                  USERID FOR ICHEINTY NEXT\nPWAGROUP DS    CL9                  GROUP FOR ICHEINTY NEXT\nPWAJUSR  DS    CL8                  USERID WITH BLANK PADDING\nPWAJGRP  DS    CL8                  GROUP WITH BLANK PADDING\nPWACLASS DS    CL8                  CLASS FOR NON-DS ICHEINTY\nPWADSNAM DS    CL45                 DATASET FOR DATASET ICHEINTY\nPWAENTRY DS    CL45                 ENTRYNAME FOR GENERAL ICHEINTY\nPWATRACE DS    CL12                 TRACE INFO FOR WHAT WE JUST DID\nPWALKARG DS    CL8                  SEARCH ARGUMENT FOR LOOKUP ROUTINE\n         SPACE\nPWAREC   DS    CL132                PLACE TO WRITE THINGS OUT WITH\nPWACMD   DS    CL80                 PLACE TO WRITE COMMANDS TO\n         SPACE\n         DS    0F\nPWADCB   DS    CL(LENDCB)           DCB FOR MESSAGES\nPWACDCB  DS    CL(LENCDCB)           DCB FOR COMMANDS\nPWAC2DCB DS    CL(LENC2DCB)          DCB FOR COMMANDS\nPWASYSIN DS    CL(LENSYSIN)         DCB FOR OPTIONAL EXCLUDES       @C1\nPWAIREC  DS    CL80                 EXCLUDE RECORD AREA             @C1\n         SPACE\n         DS    0F\nPWACPDCB DS    CL(LENCPDCB)         DCB FOR CHECKPOINTING U/G TABLE\n         SPACE\n         DS    0F\nPWAUINTY DS    CL(LENUINTY)         USER ICHEINTY\nPWAGINTY DS    CL(LENGINTY)         GROUP ICHEINTY\nPWADINTY DS    CL(LENDINTY)         DATASET ICHEINTY\nPWACINTY DS    CL(LENCINTY)         CLASS ICHEINTY\n         SPACE\nPWAACNT  DS    CL(LENACNT)          GET ACL COUNT ACTION\nPWAAACL  DS    CL(LENAACL)          GET ACL ACTION\nPWAAVOL  DS    CL(LENAVOL)          GET VOL ACTION\n         SPACE\n         DS    0F\nPWAINDEX DS    CL(4+(12*64))        INDEX TO USER/GROUP INCORE TABLE\n         SPACE\nPWARWU   DS    0F\nRWUSIZE  DS    F                    SIZE OF RACF-MANAGER WORKAREA\n         DS    CL100                 AND THE WORKAREA ITSELF.\n         ORG   PWARWU+4             GO BACK AND REDEFINE:\nRWURBA   DS    CL6                   RBA RETURN AREA\nRWUFLAG1 DS    X                     FLAG BYTE: (RACF 1.5)\nRWUGENPR EQU   X'80'  |1... ....|      GENERIC PROFILE RETRIEVED\n*        EQU   X'7F'  |.111 1111|      UNUSED\nRWURSV01 DS    X                     RESERVED\nRWUDUPDS DS    F                     DUPLICATE DSNAME COUNT\nRWURSV02 DS    2F                    RESERVED\nRWUDRLEN DS    F                     LENGTH OF RETURNED DATA\nRWUFVRA  EQU   *                     FIELD VALUE RETURN AREA:\n         ORG\nPWARWG   DS    0F\nRWGSIZE  DS    F                    SIZE OF RACF-MANAGER WORKAREA\n         DS    CL100                 AND THE WORKAREA ITSELF.\n         ORG   PWARWG+4             GO BACK AND REDEFINE:\nRWGRBA   DS    CL6                   RBA RETURN AREA\nRWGFLAG1 DS    X                     FLAG BYTE: (RACF 1.5)\nRWGGENPR EQU   X'80'  |1... ....|      GENERIC PROFILE RETRIEVED\n*        EQU   X'7F'  |.111 1111|      UNUSED\nRWGRSV01 DS    X                     RESERVED\nRWGDUPDS DS    F                     DUPLICATE DSNAME COUNT\nRWGRSV02 DS    2F                    RESERVED\nRWGDRLEN DS    F                     LENGTH OF RETURNED DATA\nRWGFVRA  EQU   *                     FIELD VALUE RETURN AREA:\n         ORG\nPWALEN   EQU   *-PWA\n         TITLE 'CLEANACL -- RACF MANAGER WORKAREA FOR DATASETS'\nRWD      DSECT\nRWDSIZE  DS    F                    SIZE OF RACF-MANAGER WORKAREA\n         DS    CL32760               AND THE WORKAREA ITSELF.\n         ORG   RWD+4                GO BACK AND REDEFINE:\nRWDRBA   DS    CL6                   RBA RETURN AREA\nRWDFLAG1 DS    X                     FLAG BYTE: (RACF 1.5)\nRWDGENPR EQU   X'80'  |1... ....|      GENERIC PROFILE RETRIEVED\n*        EQU   X'7F'  |.111 1111|      UNUSED\nRWDRSV01 DS    X                     RESERVED\nRWDDUPDS DS    F                     DUPLICATE DSNAME COUNT\nRWDRSV02 DS    2F                    RESERVED\nRWDDRLEN DS    F                     LENGTH OF RETURNED DATA\nRWDFVRA  EQU   *                     FIELD VALUE RETURN AREA:\nRWDOWNL  DS    XL2\nRWDOWNER DS    CL8\nRWDCNTL  DS    XL2                  LENGTH OF ACL COUNT\nRWDCNT   DS    XL2                  NUMBER OF ACL ENTRIES\nRWDVOLL  DS    XL2                  LENGTH OF VOLUME\nRWDVOL   DS    CL6                  VOLSER\nRWDACLL  DS    XL2                  LENGTH OF ALL ACL ENTRIES\nRWDACL   EQU   *,11                 ACL ENTRIES START HERE:\nRWDACLU  DS    CL8                    ACL USERID\nRWDACLC  DS    XL2                    ACCESS COUNT\nRWDACLA  DS    X                      ACCESS ALLOWED\n         ORG\nRWDPLLEN EQU   *-RWD                LENGTH OF RACF-MANAGER WORKAREA.\n         TITLE 'CLEANACL -- GENERAL CLASS RACF MANAGER WORKAREA'\nRWC      DSECT\nRWCSIZE  DS    F                    SIZE OF RACF-MANAGER WORKAREA\n         DS    CL32760               AND THE WORKAREA ITSELF.\n         ORG   RWC+4                GO BACK AND REDEFINE:\nRWCRBA   DS    CL6                   RBA RETURN AREA\nRWCFLAG1 DS    X                     FLAG BYTE: (RACF 1.5)\nRWCGENPR EQU   X'80'  |1... ....|      GENERIC PROFILE RETRIEVED\n*        EQU   X'7F'  |.111 1111|      UNUSED\nRWCRSV01 DS    X                     RESERVED\nRWCDUPDS DS    F                     DUPLICATE DSNAME COUNT\nRWCRSV02 DS    2F                    RESERVED\nRWCDRLEN DS    F                     LENGTH OF RETURNED DATA\nRWCFVRA  EQU   *                     FIELD VALUE RETURN AREA:\nRWCOWNL  DS    XL2\nRWCOWNER DS    CL8\nRWCCNTL  DS    XL2                  LENGTH OF ACL COUNT\nRWCCNT   DS    XL2                  NUMBER OF ACL ENTRIES\nRWCACLL  DS    XL2                  LENGTH OF ALL ACL ENTRIES\nRWCACL   EQU   *,11                 ACL ENTRIES START HERE:\nRWCACLU  DS    CL8                    ACL USERID\nRWCACLC  DS    XL2                    ACCESS COUNT\nRWCACLA  DS    X                      ACCESS ALLOWED\n         ORG\nRWCPLLEN EQU   *-RWC                LENGTH OF RACF-MANAGER WORKAREA.\n         TITLE 'CLEANACL -- CLASS DESCRIPTOR TABLE DSECT'\nCDE      DSECT\nCDELEN   DS    H         LENGTH OF THIS ENTRY, 00 IS THE END\nCDECLID  DS    X         CLASS ID NUMBER\nCDECLASS DS    CL8       EBCDIC CLASS NAME, LJ AND PADDED\nCDERESGR DS    CL8       RESOURCE GROUP OR MAIN GROUP -\n*                        SEE CDEPROCF\nCDEMAXLN DS    X         MAX LENGTH OF RESOURCE NAME\nCDESYNTX DS    X         SYNTAX OF FIRST NAME BYTE\nCDESYNT2 DS    X         SYNTAX OF REST OF NAME\nCDEUACC  DS    X         DEFAULT UACC FOR RESOURCES\nCDEPROCF DS    X         PROCESS FLAGS:\nCDEGROUP EQU   X'80'       THIS IS A RESOURCE GROUP\nCDEACEEU EQU   X'40'       USE ACEE UACC\nCDEOPERA EQU   X'20'       PAY ATTENTION TO OPERATIONS ATTR\nCDECLPOS DS    F         BITMASK FOR CLAUTH, AUDIT, ETC.\n         SPACE 1\n         CVT   DSECT=YES\n         SPACE 1\n         ICHPRCVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSAEXIT": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x1f\\x01\\x1f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 287, "newlines": 287, "modlines": 0, "user": "FILE013"}, "text": "DSAEXIT  TITLE 'USER EXIT - DATA SET ACCESS CONTROL - RACF'\n*---------------------------------------------------------------------*\n*      ROSCOE - USER EXIT DATA ACCESS CONTROL                         *\n*                                                                     *\n***--->      USE SYS1.AMODGEN IN THE ASSEMBLY                         *\n*                                                                     *\n*   FUNCTION:                                                         *\n*            THIS IS THE DATA SET ACCESS USER EXIT.                   *\n*            IT EMPLOYS R.A.C.F. FOR ACCESS CONTROL.                  *\n*            COMMUNICATION WITH ROSCOE IS VIA THE                     *\n*            PARAMETER BLOCK 'UXDSECT'.                               *\n*            THERE ARE VARIOUS TYPES OF CALLS, BUT THIS MODULE        *\n*            DIFFERENTIATES ONLY BETWEEN THE FOLLOWING:               *\n*                                                                     *\n*            OPEN INPUT                                               *\n*            OPEN UPDATE                                              *\n*            SPECIAL DATA-SET FUNCTION (EG. SCRATCH, RENAME)          *\n*                                                                     *\n*                                                                     *\n*   INPUT SPECIFICATIONS:                                             *\n*                                                                     *\n*         R1 -> PARAMETER LIST (UXDSECT)                              *\n*                                                                     *\n*         ADDITIONAL INPUT INFORMATION -                              *\n*           DATA SET NAME                                             *\n*           VOLUME(S)                                                 *\n*           FUNCTION                                                  *\n*           CHECK UXDSECT EXIT=DSA FOR MORE INFORMATION               *\n*                                                                     *\n*   OUTPUT SPECIFICATIONS:                                            *\n*                                                                     *\n*         R15 - RETURN CODE                                           *\n*                0 - 0   OK                                           *\n*                4 - 4   LOOK AT R0 FOR FUTHER INFORMATION.           *\n*                                                                     *\n*         R0 - EXTENDED RETURN CODE                                   *\n*                0 - 0 OK                                             *\n*                4 - 4 ACCESS NOT AUTHORIZED                          *\n*                                                                     *\n*                                                                     *\n*         ADDITIONAL OUTPUT INFORMATION -                             *\n*                                                                     *\n*   INTERNAL REGISTER USAGE:                                          *\n*                                                                     *\n*                 R0 -                                                *\n*                 R1 -                                                *\n*                 R2 -                                                *\n*                 R3 -                                                *\n*                 R4 -                                                *\n*                 R5 -                                                *\n*                 R6 -                                                *\n*                 R7 - PCB                                            *\n*                 R8 - UXDSECT                                        *\n*                 R9 - WORKAREA                                       *\n*                 R10 -                                               *\n*                 R11 -                                               *\n*                 R12 - BASE                                          *\n*                 R13 -                                               *\n*                 R14 -                                               *\n*                 R15 -                                               *\n*                                                                     *\n*         ADDITIONAL REGISTER HANDLING INFORMATION -                  *\n*                                                                     *\n*   MACROS:                                                           *\n*                                                                     *\n*                    UXDSECT                                          *\n*                                                                     *\n*       ATTRIBUTES:                                                   *\n*                  REENTRANT                                          *\n*                                                                     *\n*                                                                     *\n*       PREPARED BY:                 TACHER/BRANDES 04/13/82          *\n*                                                                     *\n*       MODIFIED:                                                     *\n*                                                                     *\n*   07/08/86   S. SABEL   CHANGED AUTHORITY REQUESTED FOR MEMBER      *\n*                         RENAME AND SCRATCH FROM ALTER TO UPDATE.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nDSAEXIT  CSECT\n         ROSID DSAEXIT\n         STM   R14,R12,12(R13)   SAVE CALLER'S REGISTERS\n         LR    R12,R15           SET UP BASE REG. FOR DSAEXIT\n         USING DSAEXIT,R12\n         L     R8,0(R1)          POINTER TO UXDSECT\n         USING UXDSECT,R8\n         LA    R2,WORKLEN        SIZE OF WORK AREA\n         SPACE 1\n         GETMAIN R,                                                    X\n               LV=(R2)\n         SPACE 1\n         LR    R9,R1             ADDRESS OF ALLOCATED STORAGE\n         USING WORKAREA,R9\n         L     R4,UXDSADSN       ADDRESS OF DSN\n         L     R3,UXDSAVOL       ADDRESS OF FIRST VOL\n         LTR   R3,R3             VOLUME NOT SUPPLIED?\n         BZ    DSAS10\n         CLC   0(6,R3),=C'      ' VOLUME NOT SUPPLIED? **BCWA\n****     CLC   0(R3),=C'      '  VOLUME NOT SUPPLIED?\n         BNE   DSAS10            BYPASS CLEAR\n         SLR   R3,R3             CLEAR VOLUME POINTER\n         EJECT\nDSAS10   DS    0H\n         L     R2,UXCODE         A(CALL CODE)\n         L     R2,0(R2)          CALL CODE\n         SLL   R2,3              X 8 TO MAKE BRANCH TABLE\n         B     *+4(R2)           SET UP APPPROPRIATE ATTR PARAMETER\n         NOP   *                 00 - UNUSED\n         NOP   *\n         LA    R5,X'80'          01 - ALLOCATE - SPECIAL (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'02'          02 - OPEN INPUT (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          03 - OPEN OUTPUT (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          04 - OPEN UPDATE (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'80'          05 - SCRATCH - SPECIAL (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'80'          06 - RENAME - SPECIAL (DATASET)\n         B     DSAS20            GO ISSUE RACHECK\n         NOP   *                 07 - UNUSED\n         NOP   *\n         NOP   *                 08 - UNUSED\n         NOP   *\n         NOP   *                 09 - UNUSED\n         NOP   *\n         NOP   *                 10 - UNUSED\n         NOP   *\n         NOP   *                 11 - UNUSED\n         NOP   *\n         LA    R5,X'02'          12 - OPEN INPUT (MEMBER)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          13 - OPEN OUTPUT (MEMBER)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          14 - OPEN UPDATE (MEMBER)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          15 - SCRATCH (MEMBER)\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'04'          16 - RENAME (MEMBER)\n         B     DSAS20            GO ISSUE RACHECK\n         B     DSAS50            17 - FIND - OK FOR ANYONE\n         NOP   *                 PAD\n         B     DSAS50            18 - LISTDSCB - OK FOR ANYONE\n         NOP   *                 PAD\n         LA    R5,X'80'          19 - CATALOG - SPECIAL\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'80'          20 - UNCATALOG - SPECIAL\n         B     DSASCAM           GO ISSUE A CAMLIST THEN RACHECK\n         B     DSAS50            21 - BUILD INDEX - OK FOR ANYONE\n         NOP   *                 PAD\n         B     DSAS50            22 - DELETE INDEX - OK FOR ANYONE\n         NOP   *                 PAD\n         B     DSAS50            23 - CONNECT - OK FOR ANYONE\n         NOP   *                 PAD\n         B     DSAS50            24 - RELEASE - OK FOR ANYONE\n         NOP   *                 PAD\n         LA    R5,X'80'          25 - BUILD GDG - SPECIAL\n         B     DSAS20            GO ISSUE RACHECK\n         LA    R5,X'80'          26 - DELETE GDG - SPECIAL\n         B     DSAS20            . . .\n         EJECT\n*---------------------------------------------------------------------*\n*        CHECK FOR VOL=SER IF NOT PRESENT ISSUE A LOCATE              *\n*---------------------------------------------------------------------*\nDSASCAM  DS    0H\n         LTR   R3,R3             CHECK FOR ZEROES\n         BNZ   DSAS20            NO\n         MVC   DCAMLST(LCAMLSTL),LCAMLST MOVE CAMLIST TEMPLATE\n         ST    R4,DCAMDSNA       INSERT DSN ADDRESS IN CAMLIST\n         LA    R1,DVCB           R1 = ADDRESS VOLUME CONTROL BLOCK\n         ST    R1,DCAMVCBA       INSERT VCB ADDRESS IN CAMLIST\n         LA    R1,DCAMLST        R1 --> PARMLIST\n         LOCATE (R1)             . . .\n         LA    R3,DVCBVOL        R3 --> VOLUME\n         LTR   R15,R15           CHECK RETURN CODE\n         BZ    DSAS20            OK\n         L     R2,UXMSGADR       ADDRESS OF MESSAGE AREA\n         MVC   0(MESSLEN2+4,R2),MESS20 MOVE IN PRIVATE MESSAGE\n         L     R1,UXRETFLG       GET RETURN CODE ADDRESS\n         OI    0(R1),PCBUXLMS    SET FOR MESSEGE\n         LA    R15,8             INSURE BAD RETURN STATUS\n         B     DSAS35            SET MESSAGE, FREE AREA AND EXIT\n         SPACE 3\nDSAS20   DS    0H\n         L     R7,UXSCBADR       SCB ADDRESS\n         USING SCB,R7\n         L     R6,SCBACFB        ACEE ADDRESS POINTER\n         LTR   R6,R6             ACEE PRESENT?\n         BNZ   DSAS30            OK\n         LA    R15,8             NO,SET BAD RETURN STATUS\n         B     DSAS40            AND FREE AREA\nDSAS30   DS    0H\n         LA    R1,RACEXEC        EXECUTE FORM WORK AREA\n         MVC   0(RACHLEN,R1),RACHECKL MOVE IN RACHECK SKELETON\n         SPACE 3\n         RACHECK ENTITY=((R4)),                                        X\n               VOLSER=(R3),                                            X\n               ATTR=(R5),                                              X\n               ACEE=(R6),                                              X\n               MF=(E,(1))\n         DROP  R7\n         SPACE 3\n         CH    R15,=H'4'         CHECK FOR ERROR WITH MESSAGE\n         BNH   DSAS40            OK\nDSAS35   DS    0H\n         L     R2,UXMSGADR       ADDRESS OF MESSAGE AREA\n         MVC   0(MESSLEN+4,R2),MESS MOVE IN PRIVATE MESSAGE\n         L     R1,UXRETFLG       GET RETURN CODE ADDRESS\n         OI    0(R1),PCBUXLMS    SET FOR MESSEGE\nDSAS40   DS    0H\n         LR    R3,R15            SAVE RETURN CODE FROM RACF\n         LA    R2,WORKLEN        GMB 010583 RF52-015\n         FREEMAIN R,                                                   X\n               LV=(R2),          GMB 010583 RF52-015                   X\n               A=(R9)\n         LR    R15,R3            RESTORE RETURN CODE FROM RACF\n         CH    R15,=H'12'        CHECK FOR MAXIMUM RETURN CODE\n         BH    DSASERR           ERROR\n         B     *+4(R15)          INTERPRET RESPONSE CODE\n         B     DSAS50            RC 00 - RACF PROTECTED - AUTHORIZED\n         B     DSAS50            RC 04 - NOT RACF PROTECTED\n         B     DSASERR           ERROR\n         B     DSASERR           ERROR\nDSAS50   DS    0H\n         SLR   R15,R15           GOOD RETURN\n         B     DSA$EXIT          RETURN\nDSASERR  DS    0H                RETURN WITH BAD RESPONSE\n         LA    R15,4             SET RETURN CODE - LOOK AT R0\n         LA    R0,4              SET RETURN CODE - UNAUTHORIZED\n         B     DSA$EXIT          RETURN\n         TITLE 'DSAEXIT - COMMON EXIT POINT'\nDSA$EXIT DS    0H\n         STM   R15,R0,16(R13)    OVERWRITE R15 & R0 IN SAVE AREA\n         LM    R14,R12,12(R13)   RESTORE CALLER'S REGISTERS\n         BR    R14               RETURN\n         TITLE 'DSAEXIT: DATA SET ACCESS EXIT - RACF - DATA AREAS'\n         PRINT GEN\nRACHECKL RACHECK CLASS='DATASET',MF=L\nRACHLEN  EQU   *-RACHECKL\n*---------------------------------------------------------------------*\n*        MESSAGES FROM DSAEXIT                                        *\n*---------------------------------------------------------------------*\nMESS     DC    H'46'\n         DC    H'0'\nMESSAGE  DC    C'RACF - INSUFFICIENT ACCESS AUTHORITY: REJECTED'\nMESSLEN  EQU   *-MESSAGE\nMESS20   DC    H'46'\n         DC    H'0'\nMESSAGE2 DC    C'RACF - DATA SET NOT IN CATALOG: REJECTED      '\nMESSLEN2 EQU   *-MESSAGE2\n         SPACE 3\n*---------------------------------------------------------------------*\n*        CAMLIST WORKAREA                                             *\n*---------------------------------------------------------------------*\nLCAMLST  CAMLST NAME,LDSN,,LVCB\nLDSN     DS    0C\nLVCB     DS    0C\nLCAMLSTL EQU   *-LCAMLST\n*---------------------------------------------------------------------*\n*        PATCH AREA                                                   *\n*---------------------------------------------------------------------*\n         PRINT DATA\nPATCH    DC    36S(*)\n         PRINT NODATA\n         REGS\nWORKAREA DSECT\nRACEXEC  DS    XL(RACHLEN)\nSAVERESP DS    F\n*---------------------------------------------------------------------*\n*        LOCATE WORKAREA                                              *\n*---------------------------------------------------------------------*\nDCAMLST  DS    (LCAMLSTL)X\nDCAMDSNA EQU   DCAMLST+4         ADDRESS OF DSNAME\nDCAMVCBA EQU   DCAMLST+12        ADDRESS OF VOLUME CONTROL BLOCK (DVCB)\nDVCB     DS    0D,280C           VOLU CONTROL BLOCK\nDVCBVOL  EQU   DVCB+6            FIRST VOLUME SERIAL NUMBER\n         SPACE 3\nWORKLEN  EQU   *-WORKAREA\n         TITLE 'S C B '\n         SCB\n         TITLE 'P C B '\n         PCB\n         TITLE 'UXDSECT'\n         UXDSECT EXIT=DSA\n         ROPGMEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHPWX01": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01V\\x01V\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 342, "newlines": 342, "modlines": 0, "user": "FILE013"}, "text": "PASSWORD TITLE 'RACF EXIT ICHPWX01 -- RACF PASSWORD EXIT'\n***********************************************************************\n*                                                                     *\n*                    ****************************                     *\n*                    * AMERICAN EXPRESS COMPANY *                     *\n*                    ****************************                     *\n*                                                                     *\n*        TITLE  -  ICHPWX01                                           *\n*                                                                     *\n*        STATUS -                                                     *\n*                                                                     *\n*                          ************                               *\n*--------------------------* FUNCTION *-------------------------------*\n*                          ************                               *\n*                                                                     *\n*     THIS IS THE RACF PASSWORD EXIT.  IT IS DESIGNED TO KEEP         *\n*  USERS FROM CHANGING THEIR PASSWORDS MORE THAN 3 TIMES ON ANY       *\n*  GIVEN DAY.  THE REASONING BEHIND THIS IS THAT USERS MAY BE         *\n*  TEMPTED TO INVOKE THE PASSWORD COMMAND IN A CLIST TO CHANGE        *\n*  THEIR PASSWORD XX CONSECUTIVE TIMES, ALLOWING THEM TO REUSE        *\n*  THE SAME PASSWORD OVER AGAIN.  THIS IS A SECURITY VIOLATION.       *\n*                                                                     *\n*                             *********                               *\n*-----------------------------* INPUT *-------------------------------*\n*                             *********                               *\n*                                                                     *\n*     ON ENTRY, REGISTER 1 CONTAINS THE ADDRESS OF A PARAMETER        *\n*  LIST CONTAINING INFORMATION PERTAINENT TO THE PASSWORD COMMAND.    *\n*  CONSULT THE RACF SPL FOR FURTHER INFORMATION.                      *\n*                                                                     *\n*                             **********                              *\n*-----------------------------* OUTPUT *------------------------------*\n*                             **********                              *\n*                                                                     *\n*     WHEN CONTROL IS RETURNED, REGISTER 15 CONTAINS ONE OF 5         *\n*  RETURN CODES.  CONSULT THE RACF SPL FOR FURTHER INFORMATION.       *\n*                                                                     *\n**************----------*--------------*------*--------------*--------*\n* ATTRIBUTES *          * REUSUABLE-YES*      * REENTRANT-YES*        *\n**************----------*--------------*------*--------------*--------*\n*                                                                     *\n***********************************************************************\n*--* CODED  JULY 2, 1984 *--------------------------------------------*\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       ******************                            *\n*-----------------------* REGISTER USAGE *----------------------------*\n*                       ******************                            *\n*                                                                     *\n*        REGISTER 0 - GENERAL USE                                     *\n*                 1 - PARAMETER AND GENERAL USE                       *\n*               2-9 - WORK REGS                                       *\n*                10 - BASE REG                                        *\n*             11-12 - WORK REGS                                       *\n*                13 - POINTS TO SAVE AREA                             *\n*                14 - STANDARD OS LINKAGE REGISTER                    *\n*                15 - RETURN CODE AND LINKAGE REGISTER                *\n*                                                                     *\n*                      *******************                            *\n*----------------------* MACRO LIBRARIES *----------------------------*\n*                      *******************                            *\n*                                                                     *\n*        SYS1.MACLIB       MACROS USED  :  SAVE                       *\n*        SYS1.AMODGEN                      GETMAIN                    *\n*                                          ICHEACTN                   *\n*                                          ICHETEST                   *\n*                                          ICHEINTY                   *\n*                                          FREEMAIN                   *\n*                                          CVT                        *\n*                                                                     *\n*                     ********************                            *\n*---------------------* MODIFICATION LOG *----------------------------*\n*                     ********************                            *\n*                                                                     *\n*        DATE     MODIFIED BY         DESCRIPTION                     *\n*       ------    -----------         -----------                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nICHPWX01 CSECT\n         SAVE  (14,12),,ICHPWX01&SYSDATE&SYSTIME\n         USING ICHPWX01,R10\n         USING WORKAREA,R13\n         LR    R10,R15           ESTABLISH ADDRESSABILITY\n         LR    R8,R1             SAVE THE PARAMETER AREA\n         L     R6,4(,R8)         R6=A(FUNCTION IDENTITY)\n         CLI   0(R6),X'01'       X'01'=RACINIT\n         BE    NOTPASS           IF RACINIT - EXIT\n         LA    R3,WORKLEN        R3=L'WORK\n         LR    R0,R3             R0=L'WORK\n         GETMAIN R,LV=(0)        GET SOME MAIN\n         LR    R2,R1             R2=A(MAIN AREA)\n         SLR   R5,R5             CLEAR R5\n         MVCL  R2,R4             CLEAR STORAGE\n         ST    R1,8(,R13)        BACKWARD CHAIN SAVE AREA\n         ST    R13,4(,R1)        FORWARD CHAIN SAVE AREA\n         LR    R13,R1            ESTABLISH ADDRESSABILITY\n         LA    R2,LOCATE         R2 = A(START OF MACRO DSECT AREA)\n         LA    R3,LEN2           R3 = LENGTH OF AREA\n         LA    R4,LOCATE1        R4 = A(IN CORE MACRO AREA)\n         LR    R5,R3             R5 = R3\n         MVCL  R2,R4             MOVE IT OVER\n         LA    R2,LOCATE+28      LOAD ADDRESS OF LOCATE MACRO FLD DEF\n         ST    R2,LOCATE+8       STORE IT INTO THE DSECT MACRO\n         LA    R2,ALTER+28       LOAD ADDRESS OF ALTER MACRO FLD DEF\n         ST    R2,ALTER+8        STORE IT\n         EJECT\nSTART    DS    0H\n         LA    R2,LEN1           R2=L'WORKA\n         STC   R2,WORKA+3        STORE THE LENGTH\n         L     R6,20(,R8)        R6=A(USERID INFO)\n         MVC   PROFNAM(1),0(R6)  MOVE THE NAME LENGTH\n         MVC   PROFNM(8),1(R6)   MOVE NAME INTO PARM AREA\n         L     R6,4(,R8)         R6=A(FUNCTION IDENTITY)\n********************************************************************\n*   CHECK FOR ALTUSER, IF SO,,, ASSUME(HAHA) THIS PERSON KNOWS     *\n*   WHAT HE'S DOING.                                               *\n********************************************************************\n         CLI   0(R6),X'03'       X'03'=ALTUSER\n         BE    UPDATE            IF ALU - CLEAR COUNT FIELD AND EXIT\n********************************************************************\n         ICHEACTN  TESTS=TEST1,MF=(E,ACTN1)\n         ICHETEST  FLDATA=(,FLDNM),MF=(E,TEST1)\n         ICHEINTY  MF=(E,LOCATE),                                      X\n               ENTRY=PROFNAM,                                          X\n               WKAREA=WORKA,                                           X\n               OPTIONS=(FLDEF),                                        X\n               TYPE='USR',                                             X\n               ACTIONS=(FLAG2,PASSDATE,ACTN1)\n         LTR   R15,R15           TEST FOR RETURN CODE\n         BNZ   TESTRET           IF NOT ZERO, TEST RETURN CODE\n         CLC   RETLEN,=F'10'     TEST FOR NO PASSWORD AREA\n         BE    FIELDADD\n         B     GOON\n********************************************************************\nTESTRET  DS    0H\n         CH    R15,=H'52'        DOES THE FIELD EXIST\n         BE    FIELDADD          NO - GO ADD IT\n         CH    R15,=H'36'        SOME KIND OF ERROR ???\n         BNE   WRONG1            YES - JUST EXIT\n         CH    R0,=H'3'          IS LENGTH EQUAL TO 3\n         BNE   WRONG1            NO - JUST EXIT\n         B     FIELDADD          TRY TO ADD THE FIELD\n********************************************************************\n*  NECESSITY MAY EXIST FOR A SPECIAL USER TO HAVE TO CHANGE        *\n*  HIS/HER PASSWORD MORE FREQUENTLY THAN REGULAR USER.  THIS       *\n*  CAN EASILY BE CHANGED.                                          *\n********************************************************************\nGOON     DS    0H\n         TM    SPECFLAG,SPECIAL  IS IT A SPECIAL USER\n         BO    ISOK              YES - THEN RETURN\n********************************************************************\nDATE000  DS    0H\n         L     R5,CVTPTR         LOAD A(CVT)\n         MVC   FWORD,CVTDATE-CVT(R5)\n         CP    PDATE(3),FWORD+1(3)\n         BNE   UPDATE            IF NOT EQUAL - UPDATE THE RECORD\nCOUNT000 DS    0H\n         MVC   FWORD,PCOUNT\n         L     R2,FWORD\n********************************************************************\n*  THIS IS THE MAGIC NUMBER.  CURRENTLY CHANGES = 3                *\n********************************************************************\n         CH    R2,CHANGES        IS CURRENT HIGHER?\n         BH    WRONG1            YES - DON'T LET 'EM DO IT\n         AH    R2,=H'1'          ADD ONE TO CURRENT COUNT\n         ST    R2,FWORD          STORE IT INTO FWORD\n         MVC   UDATAV,FWORD      MOVE IT INTO UDATAV\n         B     FIELDADD          BR TO FIELDADD\nUPDATE   DS    0H\n         MVC   UDATAV(4),=F'0'   CLEAR THE COUNT FIELD\nFIELDADD DS    0H                IF NOT - THEN ADD THE FIELD\n         MVC   UDATANM(8),FLDNM\n         MVI   UDATAL1,X'04'     MOVE IN LENGTH OF UDATAV FIELD\n         LA    R5,L'UDATANM+L'UDATAL1   FIXED LENGTHS\n         LA    R5,1(,R5)         LENGTH OF USRFLG FIELD\n         AH    R5,=H'4'          ADD L'DATA FIELD FOR TOTAL LENGTH\n         MVI   UDATAV+4,128\n         ICHEACTN MF=(E,ACTN3),TESTS=TEST3\n         ICHETEST MF=(E,TEST3),FLDATA=(,UDATANM)\n         ICHEACTN MF=(E,ACTN4),FLDATA=((R5),UDATA),TESTS=TEST4\n         ICHETEST MF=(E,TEST4),FLDATA=(,UDATANM)\n         ICHEINTY MF=(E,ALTER),                                        X\n               ENTRY=PROFNAM,                                          X\n               OPTIONS=(,FLDEF),                                       X\n               TYPE='USR',                                             X\n               ACTIONS=(ACTN3,ACTN4)\n         LTR   R15,R15           TEST RETURN CODE\n         BZ    ISOK              IF ZERO - JUST RETURN\nWRONG1   DS    0H\n         LA    R15,4\n         B     FREEM\nNOTPASS  DS    0H\n         SLR   R15,R15\n         B     EXIT\n         EJECT\nISOK     DS    0H\n         SLR   R15,R15           CLEAR R15\nFREEM    DS    0H\n         LR    R2,R15            SAVE R15\n         LR    R1,R13\n         L     R13,4(,R13)\n         LA    R0,WORKLEN\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2            RE-LOAD R15\nEXIT     DS    0H\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         EJECT\n********************************************************************\n*  LITERALS                                                        *\n********************************************************************\n         LTORG\n         EJECT\n********************************************************************\n*  CONSTANTS                                                       *\n********************************************************************\nFLDNM    DC    CL8'PASSCNT1'     PASSCNT FIELD NAME\nCHANGES  DC    H'03'             NUMBER OF CHANGES ALLOWED IN A DAY\nLOCATE1  ICHEINTY LOCATE,                                              X\n               ENTRY=*-*,                                              X\n               MF=L,                                                   X\n               WKAREA=*-*,                                             X\n               ACTIONS=(,,)\n         EJECT\nALTER1   ICHEINTY ALTER,                                               X\n               ENTRY=*-*,                                              X\n               MF=L,                                                   X\n               ACTIONS=(,)\n         SPACE 1\nACTN11   ICHEACTN FIELD=USERDATA,MF=L,TESTS=*-*\n         SPACE 1\nACTN31   ICHEACTN FIELD=USRNM,FLDATA='DEL',TESTS=*-*\n         SPACE 1\nACTN41   ICHEACTN FIELD=USERDATA,FLDATA=(*-*,*-*),TESTS=*-*\n         SPACE 1\nTEST11   ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L\n         SPACE 1\nTEST31   ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L\n         SPACE 1\nTEST41   ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L,COND=NE\n         SPACE 1\nFLAG21   ICHEACTN FIELD=FLAG2,MF=L\n         EJECT\nPASSDAT1 ICHEACTN FIELD=PASSDATE,MF=L\n         EJECT\n********************************************************************\n*  WORK AREA                                                       *\n********************************************************************\nWORKAREA DSECT\nWORKSTRT DS    0H\nREGSAVE  DS    18F\nDBLWD    DS    01D               CURRENT TIME WORK AREA\nFWORD    DS    01F               FULL WORD WORK AREA\nJDATE    DS    PL4               CURRENT JULIAN DATE\n*\nUDATA    DS    0C                USER DATA FIELDS\nUDATANM  DS    CL8               FIELD ID (PASSTIME)\nUDATAL1  DS    AL1               FLAG BYTE\nUDATAV   DS    CL4               COUNT FIELD\nUDATAF   DS    CL1               FLAG FIELD\n*\nLOCATE   ICHEINTY LOCATE,                                              X\n               ENTRY=*-*,                                              X\n               MF=L,                                                   X\n               WKAREA=*-*,                                             X\n               ACTIONS=(,,)\n         EJECT\nALTER    ICHEINTY ALTER,                                               X\n               ENTRY=*-*,                                              X\n               MF=L,                                                   X\n               ACTIONS=(,)\n         SPACE 1\nACTN1    ICHEACTN FIELD=USERDATA,MF=L,TESTS=*-*\n         SPACE 1\nACTN3    ICHEACTN FIELD=USRNM,FLDATA='DEL',TESTS=*-*\n         SPACE 1\nACTN4    ICHEACTN FIELD=USERDATA,FLDATA=(*-*,*-*),TESTS=*-*\n         SPACE 1\nTEST1    ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L\n         SPACE 1\nTEST3    ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L\n         SPACE 1\nTEST4    ICHETEST FIELD=USRNM,FLDATA=(8,*-*),MF=L,COND=NE\n         SPACE 1\nFLAG2    ICHEACTN FIELD=FLAG2,MF=L\n         EJECT\nPASSDATE ICHEACTN FIELD=PASSDATE,MF=L\nLEN2     EQU   *-LOCATE          LENGTH MACRO AREA\n*\nPROFNAM  DS    AL1               PROFILE NAME LENGTH\nPROFNM   DS    CL8               PROFILE NAME\n*\nWORKA    DS    F                 WORK AREA\n         DS    CL6\n         DS    CL2\n         DS    F\n         DS    CL8\nRETLEN   DS    F\nRETAREA  DS    CL200             DATA RETURNED INTO THIS FIELD\nLEN1     EQU   *-WORKA           LENGTH OF WORK AREA\nWORKLEN  EQU   *-WORKSTRT        LENGTH OF DSECT\n         ORG   RETAREA\nFLAGLEN  DS    XL2               FLAG LENGTH\nSPECFLAG DS    XL1               FLAG BYTE\nSPECIAL  EQU   X'80'             X'80' SPECIAL USER\nDATELEN  DS    XL2               LENGTH OF DATE FIELD\nPDATE    DS    PL3               PASSWORD DATE\nTOTALEN  DS    XL2               TOTAL LENGTH OF TIME FIELD\nPCOUNTDS DS    CL8               PASSWORD COUNT IDENTIFIER\nPTIMELEN DS    XL1               DATA LENGTH\nPCOUNT   DS    XL4               ACTUAL DATA\nPTIMEFLG DS    XL1               FLAG\n         EJECT\n********************************************************************\n*  REGISTER EQUATES                                                *\n********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n********************************************************************\n         SPACE\n         PRINT NOGEN\n         CVT   DSECT=YES\n         PRINT GEN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRCX01": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xe9\\x00\\xe9\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 233, "newlines": 233, "modlines": 0, "user": "FILE013"}, "text": "ICHRCX01 TITLE 'RACHECK PRE-PROCESSING EXIT FOR FAILSOFT PROCESSING'\n***********************************************************************\n*                                                                     *\n* MODULE NAME: ICHRCX01        (RACHECK PRE-PROCESSING EXIT)          *\n*                                                                     *\n* FUNCTION:    TO BYPASS FAILSOFT RESOURCE ACCESS REQUESTS THAT ARE   *\n*              ISSUED TO THE CONSOLE WHEN RACF HAS BECOME INACTIVE.   *\n*              THIS WAS DONE TO EXPEDITE THE TASKS THAT NEED TO BE    *\n*              DONE IN THE EVENT RACF IS INACTIVE SO THAT RACF        *\n*              CAN BE REACTIVATED. ALL ACCESS REQUESTS ARE GRANTED    *\n*              BY THIS EXIT. THIS EXIT WILL ALSO ISSUE WTO LOGGING    *\n*              MESSAGES INDICATING WHAT TYPE OF ACCESS WAS DONE AND   *\n*              TO WHAT RESOURCE, AND BY WHOM.                         *\n*                                                                     *\n* OPERATION:                                                          *\n*                                                                     *\n*              IF RACF IS ACTIVE THEN SET RETURN CODE = 0             *\n*              ELSE DO                                                *\n*                   GET JOBNAME FROM ASCB                             *\n*                   GET ACCESS INTENDED FROM RACHECK PARM LIST        *\n*                   GET ENTITY NAME FROM RACHECK PARMLIST             *\n*                   ISSUE A WTO INDICATING RACF IS INACTIVE           *\n*                   PUT JOBNAME, ACCESS INTENDED, AND ENTITY INTO     *\n*                        A WTO MESSAGE                                *\n*                   ISSUE THE WTO LOGGING MESSAGE                     *\n*                   SET RETURN CODE = 12                              *\n*              END                                                    *\n*              EXIT                                                   *\n*                                                                     *\n* MACROS USED: AMODE, RMODE, SAVE, GETMAIN, WTO, FREEMAIN, RETURN     *\n*                                                                     *\n* DATA AREAS:  ICHRCXPL, CVT, IHAASCB, ICHPRCVT                       *\n*                                                                     *\n* LINKAGE:     IBM STANDARD                                           *\n*                                                                     *\n* ATTRIBUTES:  RE-ENTRANT, LPA RESIDENT                               *\n*                                                                     *\n* RACF LEVEL:  RACF VERSION 1, RELEASE 8                              *\n*                                                                     *\n* RETURN CODES:                                                       *\n*              R15 = 0   RACF IS ACTIVE, CONTINUE RACHECK PROCESSING  *\n*              R15 = 12  RACF IS INACTIVE, DISCONTINUE RACHECK        *\n*                        PROCESSING AND ALLOW THE REQUEST.            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* REGISTERS:   R0  - WORK REGISTER                                    *\n*              R1  - PARM ADDRESS FROM RACHECK, WORK REGISTER         *\n*              R2  - BASE FOR RACHECK PARAMETER LIST                  *\n*              R3  - WORK REGISTER                                    *\n*              R4  - WORK REGISTER                                    *\n*              R5  - WORK REGISTER                                    *\n*              R6  - NOT USED                                         *\n*              R7  - BASE FOR ASCB                                    *\n*              R8  - NOT USED                                         *\n*              R9  - BASE FOR RCVT                                    *\n*              R10 - BASE FOR CVT                                     *\n*              R11 - LINKAGE                                          *\n*              R12 - BASE REGISTER                                    *\n*              R13 - LINKAGE                                          *\n*              R14 - NOT USED                                         *\n*              R15 - LINKAGE, WORK REGISTER                           *\n*                                                                     *\n* STUART SABEL  02/11/88                                              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n* ENSURE ADDRESSABILITY, GETMAIN A WORK AREA, ETC.                    *\n***********************************************************************\nICHRCX01 CSECT\nICHRCX01 AMODE 31                  SET ADDRESSING MODE TO 31-BIT\nICHRCX01 RMODE ANY                 SET RESIDENCY MODE TO ANY\n         SAVE  (14,12),,ICHRCX01.&SYSDATE.&SYSTIME\n         LR    R12,R15             PROGRAM ADDRESSABILITY\n         USING ICHRCX01,R12        USE R12 AS THE BASE\n         LR    R2,R1               SAVE PARM LIST ADDRESS IN R2\n         USING RCXPL,R2            PARM LIST ADDRESSABILITY\n         L     R0,WORKDLEN         DYNAMIC AREA SIZE TO R0\n         GETMAIN R,LV=WORKDLEN     GETMAIN DYNAMIC AREA\n         LR    R11,R1              DYNAMIC AREA ADDRESSABILITY\n         USING WORKAREA,R11        WORK AREA ADDRESSABILITY\n         ST    R13,SAVEAREA+4      SAVE CALLER'S SAVEAREA ADR\n         ST    R11,8(,R13)         SAVE OUR SAVEAREA ADR\n         LR    R13,R11             OUR SAVEAREA ADR TO R13\n         EJECT\n***********************************************************************\n* CHECK TO SEE IF RACF IS ACTIVE BY LOOKING INTO THE RCVT (IF IT IS   *\n* THERE). IF IT IS ACTIVE, EXIT IMMEDIATELY WITH 0 IN R15 WHICH WILL  *\n* TELL RACHECK TO CONTINUE NORMAL PROCESSING. IF RACF IS INACTIVE, OR *\n* THE RCVT IS NOT THERE, CONTINUE PROCESSING.                         *\n***********************************************************************\n         L     R10,X'10'           GET ADDRESS OF CVT\n         USING CVT,R10             CVT ADDRESSABILITY\n         L     R9,CVTRAC           GET THE RCVT ADDRESS\n         USING RCVT,R9             RCVT ADDRESSABILITY\n         LTR   R9,R9               IS THE RCVT THERE?\n         BZ    NORACF              IF NOT, DO OUR OWN CHECKING\n         TM    RCVTSTAT,RCVTRNA    IS RACF ACTIVE?\n         BO    NORACF              IF NOT, DO OUR OWN CHECKING\n         TM    RCVTFLGS,RCVTROFF   HAS RVARY INACTIVE BEEN ISSUED?\n         BNZ   NORACF              IF NOT, DO OUR OWN CHECKING\n         B     RETURN0             IF RACF IS ACTIVE, GET OUT NOW\n         EJECT\n***********************************************************************\n* AT THIS POINT, RACF IS NOT ACTIVE. GET THE JOBNAME, STCNAME, OR     *\n* USER-ID FROM THE ASCB. GET THE ACCESS REQUESTED, AND THE ENTITY     *\n* NAME THAT THE USER IS TRYING TO ACCESS FROM THE RACHECK PARAMETER   *\n* LIST.                                                               *\n***********************************************************************\nNORACF   L     R1,CVTTCBP          GET THE CURRENT TCB POINTER\n         L     R7,12(,R1)          GET THE CURRENT ASCB POINTER\n         USING ASCB,R7             ASCB ADDRESSABILITY\n         ICM   R4,B'1111',ASCBJBNI GET JOBNAME POINTER FOR JOBS\n         BNZ   GOTNAME             IF NOT ZERO, IT IS A JOB NAME\n         ICM   R4,B'1111',ASCBJBNS GET JOBNAME PTR FOR STC OR TSO USER\nGOTNAME  EQU   *\n         MVC   WTOMSG(WTOPL),WTOP  MOVE IN SKELETON WTO\n         MVC   LOG(MSGLEN),LOGP    MOVE IN SKELETON MESSAGE\n         MVC   JOBNAME(8),0(R4)    COPY USER/JOB/STC NAME\n         L     R5,RCXENORP         GET THE ADDRESS OF ENTITY NAME\n         MVC   ENTITY(44),0(R5)    GET THE ENTITY NAME\nCHKALT   L     R1,RCXFLAG2         GET AUTHORITY REQUESTED\n         MVC   AUTH,=CL8'NONE'     ASSUME AUTHORIZATION TO BE NONE\n         TM    0(R1),RCXATTAL      WAS ALTER REQUESTED?\n         BNO   CHKCON              NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'ALTER'    YES, SAVE AUTHORITY REQUESTED\nCHKCON   TM    0(R1),RCXATTCO      WAS CONTROL REQUESTED?\n         BNO   CHKUP               NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'CONTROL'  YES, SAVE AUTHORITY REQUESTED\nCHKUP    TM    0(R1),RCXATTUP      WAS UPDATE REQUESTED?\n         BNO   CHKREAD             NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'UPDATE'   YES, SAVE AUTHORITY REQEUSTED\nCHKREAD  TM    0(R1),RCXATTRE      WAS READ REQUESTED?\n         BNO   WTOIT               NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'READ'     YES, SAVE AUTHORITY REQEUSTED\n         EJECT\n***********************************************************************\n* ISSUE THE WTO MESSAGES TO ENSURE AN AUDIT TRAIL                     *\n***********************************************************************\nWTOIT    WTO   'ICHRCX01 -- **** WARNING **** RACF IS NOT ACTIVE ****',X\n               ROUTCDE=(9,11)\n         MVC   WTOMSG+4(MSGLEN),LOG  MOVE IN ACTUAL LOG MESSAGE\n         WTO   MF=(E,WTOMSG)       WRITE THE MESSAGE\n         EJECT\n***********************************************************************\n* CLEAN UP, SET RETURN CODES AND QUIT                                 *\n***********************************************************************\n         LA    R3,12               SET RETURN CODE TO ALLOW ACCESS\n         B     EXIT                GO CLEAN UP AND QUIT\nRETURN0  LA    R3,0                SET RETURN CODE TO CONTINUE RACHECK\nEXIT     L     R13,SAVEAREA+4      RESTORE R13\n         L     R0,WORKDLEN         DYNAMIC AREA SIZE TO R0\n         LR    R1,R11              DYNAMIC DATA ADDRESS TO R1\n         FREEMAIN R,A=(R1),        FREEMAIN DYNAMIC AREA               *\n               LV=WORKDLEN         DYNAMIC\n         LR    R15,R3              LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)  RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n* DEFINITIONS FOR CONSTANTS                                           *\n***********************************************************************\nWTOP     WTO   '                                                       X\n                                                           ',MF=L,     X\n               ROUTCDE=(9,11)\nWTOPL    EQU   *-WTOP              LENGTH OF PROTOTYPE WTO LIST\nWTOLOG   WTO   'ICHRCX01 -- JOB=XXXXXXXX, ACCESS=XXXXXXXX, ENTITY=XXXXXX\n               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',MF=L,          X\n               ROUTCDE=(9,11)\nLOGP     DS    0CL99\n         DC    CL16'ICHRCX01 -- JOB='\nJOBNAMEP DC    CL08' '\n         DC    CL09', ACCESS='\nAUTHP    DC    CL08' '\n         DC    CL09', ENTITY='\nENTITYP  DC    CL44' '\n         DC    CL05' '\nMSGLEN   EQU   *-LOGP\n         LTORG\n         EJECT\n***********************************************************************\n* GETMAINED DYNAMIC AREA                                              *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                 REGISTER SAVE AREA\nWTOMSG   WTO   '1234567890123456789012345678901234567890123456789012345X\n               67890123456789012345678901234567890123456789',MF=L,     X\n               ROUTCDE=(9,11)\nLOG      DS    0CL99\n         DC    CL16'ICHRCX01 -- JOB='\nJOBNAME  DC    CL08' '\n         DC    CL09', ACCESS='\nAUTH     DC    CL08' '\n         DC    CL09', ENTITY='\nENTITY   DC    CL44' '\n         DC    CL05' '\n         ORG\n         DS    0D\nWORKDLEN EQU   *-WORKAREA          LENGTH OF DSECT\n         EJECT\n***********************************************************************\n* DSECTS AND DATA AREAS                                               *\n***********************************************************************\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IHAASCB\n         EJECT\n         ICHPRCVT\n         EJECT\n         ICHRCXP\n         EJECT\n***********************************************************************\n* EQUATE REGISTERS 1-15 WITH R1-R15                                   *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   ICHRCX01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRCX02": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x7f\\x01\\x7f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 383, "newlines": 383, "modlines": 0, "user": "FILE013"}, "text": "//**********************************************************************\n//**  RACF POST-PROCESSING EXIT FOR RACHECK (ICHRCX02)                **\n//**********************************************************************\n//UMOD000  EXEC PGM=GIMSMP,REGION=4096K\n//SMPCSI   DD DSN=SMP.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SMPCNTL  DD *\n SET BDY(TARGET).\n RESTORE S(UMOD000).\n SET BDY(GLOBAL).\n REJECT S(UMOD000).\n RECEIVE SYSMODS.\n SET BDY(TARGET).\n APPLY S(UMOD000) ASSEM REDO COMPRESS(ALL).\n/*\n//SMP.SMPPTFIN DD DATA,DLM=$$\n++USERMOD(UMOD000).\n++VER (Z038)\n  FMID(HRF1702)\n  /*\n     THIS IS A POST PROCESSING EXIT FOR RACHECK(S) THAT ALLOWS\n     USERS W/\"AUDIT\" TO 'READ' ANYTHING ON THE SYSTEM(CLASS=DATASET),\n     REGARDLESS OF THEIR AUTHORITY WITHIN THE PROFILE FOR THE\n     RESOURCE.\n\n     CHECK FOR A USER CONNECTED TO GROUP, \"SUPERMAN\", THAT ALLOWS\n     THE USER TO BYPASS ALL RACHECKS FOR CLASS=DATASET.\n\n     IF THE ACCESS IS A 'TAPE' ACCESS, THEN ISSUE \"WARNING\" MESSAGES\n     WHILE STILL \"FAILING\" DASD ACCESS REQUESTS.\n\n                                                                  */.\n++JCLIN.\n//ICHRCX02 EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,RENT'\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN   DD *\n  NAME ICHRCX02(R)\n/*\n++SRC (ICHRCX02)\n    SYSLIB  (UMODSRC)\n    DISTLIB (AUMODSRC)\n    DISTMOD (ALPALIB).\nC02      TITLE 'ICHRCX02 -- RACHECK POST-PROCESSING EXIT ROUTINE'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     ICHRCX02 -- RACHECK POST-PROCESSING EXIT ROUTINE               *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THIS EXIT ALLOWS:                                              *\n*                                                                    *\n*     -  USERS WITH THE 'AUDITOR' ATTRIBUTE ON A GLOBAL LEVEL        *\n*        'READ' ACCESS TO ALL DATASETS, REGARDLESS OF \"ACCESS\"       *\n*        AUTHORITY                                                   *\n*                                                                    *\n*     -  USERS WITH AN ACEE ANCHORED GROUP OF 'SUPERMAN'             *\n*        TO BYPASS RACHECK AUTHORIZATION APPROVAL                    *\n*                                                                    *\n*        PROVIDE WARNING FOR TAPEDS ACCESSES                         *\n*                                                                    *\n*                                                                    *\n*     ALL ACCESSES THAT ALLOWED THAT NORMALLY WOULD NOT BE           *\n*     ARE LOGGED.                                                    *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     REENTRANT, LPA RESIDENT.                                       *\n*                                                                    *\n*  ENTRY CONDITIONS -                                                *\n*                                                                    *\n*     R1  - ADDRESS OF AREA DERIVED FROM PARAMETERS ON RACHECK MACRO *\n*                                                                    *\n*  EXIT CONDITIONS -                                                 *\n*                                                                    *\n*     R15 - CONTAINS A RETURN CODE:                                  *\n*        R15 = 0 - PROCESSING COMPLETE                               *\n*        R15 = 4 - RETRY RACHECK PROCESSING                          *\n*                                                                    *\n*  REGISTER USAGE -                                                  *\n*                                                                    *\n*     R13 - ADDRESS OF STANDARD SAVE AREA                            *\n*     R12 - BASE ADDRESS (ICHRCX02)                                  *\n*     R11 - ADDRESS OF PARAMETER AREA                                *\n*     R10 - ADDRESS OF COMMUNICATIONS VECTOR TABLE (CVT)             *\n*     R9  - ADDRESS OF RACF CVT (RCVT)                               *\n*     R8  - ADDRESS OF ACCESSOR ENVIRONMENT ELEMENT (ACEE)           *\n*     R7  - ADDRESS OF ADDRESS SPACE CONTROL BLOCK (ASCB)            *\n*     R6  - ADDRESS OF ADDRESS SPACE EXTENSION BLOCK (ASXB)          *\n*     R5  - WORK                                                     *\n*     R4  - WORK                                                     *\n*     R3  - WORK                                                     *\n*     R2  - WORK                                                     *\n*     R1  - WORK                                                     *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     1.  IF RACF IS INACTIVE, ALLOW THE ACCESS REGARDLESS OF THE    *\n*          LEVEL AUTHORIZED, ISSUE A MESSAGE TO THE OPERATOR, AND    *\n*          EXIT.                                                     *\n*     2.  IF THE USER IS HAS AUDITOR AUTHORITY, ALLOW READ/ONLY      *\n*          ACCESS REGARDLESS OF ALLOWED ACCESS TO THE DATASET.       *\n*     3.  IF THE USER IS CONNECTED TO GROUP, 'SUPERMAN', THEN BYPASS *\n*          RACHECK AUTHORIZATION REGARDLESS OF AUTHORITY SPECIFIED.  *\n*     4.  IF THE USER HAS BEEN ALLOWED A LEVEL OF ACCESS WHICH HE    *\n*          DID NOT HAVE BEFORE THIS EXIT WAS CALLED, CAUSE RACF TO   *\n*          LOG THE ACCESS.                                           *\n*     5.  CHECK TO ALLOW ONLY BYPASS OF RACHECK FOR 'DATASET'        *\n*          CLASS.                                                    *\n*     6.  PROVIDE 'WARNING' FOR TAPEDS ACCESS                        *\n*                                                                    *\n*                                                                    *\n*  REQUIREMENTS -                                                    *\n*                                                                    *\n*    APAR OY08209 MUST BE APPLIED IN ORDER TO FACILITATE             *\n*    REASONABLE HANDLING OF TAPE WRITE RINGS...                      *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n         MACRO\n         ACHKLIST\n**********************************************************************\n*  DSECT NAME -                                                      *\n*     ACHKLIST                                                       *\n*  FUNCTION -                                                        *\n*     PROVIDE MAPPING FOR THE PARAMETER LIST PASSED TO THE RACHECK   *\n*     EXIT ROUTINES (ICHRCX01 AND ICHRCX02).  THIS DSECT WAS DERIVED *\n*     FROM THE 'SYSTEM PROGRAMMING LIBRARY: RESOURCE ACCESS CONTROL  *\n*     FACILITY (RACF)', PUBLICATION # SC28-1343.                     *\n**********************************************************************\nACHKLIST DSECT                     RACHECK PARAMETER LIST\nACHK@LEN DS    A                   ADDRESS OF FULLWORD LENGTH\nACHK@FG1 DS    A                   ADDRESS OF FLAG BYTE 1\nACHK@FG2 DS    A                   ADDRESS OF FLAG BYTE 2\nACHK@FG3 DS    A                   ADDRESS OF FLAG BYTE 3\nACHKTDST EQU   X'80'               DSTYPE=T\nACHKTDSM EQU   X'40'               DSTYPE=M\nACHKTENT EQU   X'20'               ENTITY=DSN; TAPE/DASD VOLSER SPEC\nACHKTPRF EQU   X'20'               PROFILE=PROFILE ADDR SPECIFIED\nACHKTRS1 EQU   X'18'               RESERVED\nACHKTGEN EQU   X'04'               GENERIC=YES SPECIFIED\nACHKTPVT EQU   X'02'               PRIVATE AREA PROFILE REQUESTED\nACHKTRS2 EQU   X'01'               RESERVED\nACHK@INS DS    A                   ADDRESS OF INSTALLATION PARAMETERS\nACHK@EOP DS    A                   ADDRESS OF ENTITY OR PROFILE\nACHK@CLS DS    A                   ADDRESS OF ENTITY CLASS NAME\nACHK@VOL DS    A                   ADDRESS OF VOLUME SERIAL NUMBER\nACHK@EDA DS    A                   ADDRESS OF ENTITY DATA\nACHK@WRK DS    A                   ADDRESS OF WORK AREA OR ZERO\nACHK@ABE DS    A                   ADDRESS OF RACF ABEND CODE\nACHK@RTC DS    A                   ADDRESS OF RACHECK RETURN CODE\nACHK@ACC DS    A                   ADDRESS OF ACCESS CODE:\nACHKAALT EQU   X'80'               ALTER ACCESS ALLOWED\nACHKACTL EQU   X'40'               CONTROL ACCESS ALLOWED\nACHKAUPD EQU   X'20'               UPDATE ACCESS ALLOWED\nACHKARD  EQU   X'10'               READ ACCESS ALLOWED\nACHKANON EQU   X'01'               NO ACCESS ALLOWED\nACHK@RLV DS    A                   ADDRESS OF RESOURCE LEVEL NUMBER\nACHK@OVL DS    A                   ADDRESS OF OLDVOL MULTI-VOLUME\nACHK@DNC DS    A                   ADDRESS OF NAMING CONVENTIONS\nACHK@APP DS    A                   ADDRESS OF APPL NAME\nACHK@ACE DS    A                   ADDRESS OF ACEE\nACHK@OWN DS    A                   ADDRESS OF OWNER IDENTIFIER\nACHK@LOG DS    A                   ADDRESS OF LOGGING CONTROL\nACHK@ALV DS    A                   ADDRESS OF ACCLVL VALUE\nACHK@ALP DS    A                   ADDRESS OF ACCLVL PARAMETER LIST\nACHK@FNO DS    A                   ADDRESS OF FILE SEQUENCE # FOR TAPE\nACHK@TFG DS    A                   ADDRESS OF TAPE FLAG BYTE\nACHK#TBL EQU   X'C0'               TAPELBL=BLP\nACHK#TNL EQU   X'C0'               TAPELBL=NL\nACHK#TSL EQU   X'C0'               TAPELBL=SL\nACHK#TRS EQU   X'3F'               RESERVED\nACHK@FG4 DS    A                   ADDRESS OF FOURTH FLAG BYTE\nACHK@REC DS    A                   ADDRESS OF RACHECK REASON CODE\nACHK@NID DS    A                   ADDRESS OF 'NOTIFY' USERID\n         MEND\n*\n         EJECT\n         USING SAVEAREA,R13\n         USING ICHRCX02,R12\n         USING ACHKLIST,R11\n         USING CVT,R10\n         USING RCVT,R9\n         USING ACEE,R8\n         USING ASCB,R7\n         USING ASXB,R6\n         USING RRPF,R3\n         USING PSA,R0\nICHRCX02 CSECT\nICHRCX02 AMODE 31                  SET ADDRESSING MODE TO 31-BIT\nICHRCX02 RMODE ANY                 SET RESIDENCY MODE TO ANY\n         SAVE  (14,12),,'ICHRCX02&SYSDATE.&SYSTIME'    SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LR    R11,R1              SAVE PARAMETER AREA ADDRESS\n         GETMAIN R,LV=WORKSIZE     OBTAIN A SAVE AREA\n         ST    R1,SAVENEW          FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACK CHAIN\n         LR    R13,R1              SAVE SAVE AREA ADDRESS\n         L     R10,FLCCVT          GET ADDRESS OF CVT\n         L     R1,CVTTCBP          GET THE CURRENT TCB POINTER\n         L     R7,12(,R1)          GET THE CURRENT ASCB POINTER\n         ICM   R4,B'1111',ASCBJBNI GET JOBNAME PTR FOR JOBS\n         BNZ   GOTJOBNM            IF NOT ZERO, WE GOT JOBNAME\n         ICM   R4,B'1111',ASCBJBNS GET JOBNAME PTR FOR STC/TSU\nGOTJOBNM L     R3,ACHK@EOP         GET ENTITY OR PROFILE ADDRESS\n         L     R1,ACHK@FG3         GET THE ADDRESS OF FLAG 3\n         TM    0(R1),ACHKTPRF      PROFILE OR ENTITY GIVEN?\n         BZ    NOTPRO              NOT PROFILE, ENTITY\n         MVC   DSN,DSPDSNM         MOVE DSN IN FROM PROFILE\n         B     CHKRACF             CHECK TO SEE IF RACF IS ACTIVE\nNOTPRO   MVC   DSN,0(R3)           COPY OVER THE DSN\n         EJECT\nCHKRACF  L     R9,CVTRAC           GET THE RCVT ADDRESS\n         TM    RCVTSTAT,RCVTRNA    IS RACF ACTIVE?\n         BO    NORACF              NO, WARN OPERATOR\n         TM    RCVTFLGS,RCVTROFF   HAS RVARY INACT BEEN ISSUED?\n         BNZ   NORACF              YES, WARN OPERATOR\n         MVC   WTOLIST(WTOLISTL),WTOPROTO    MOVE IN SKELETON WTO\n         MVC   MSG1(MSG1LGTH),MSG1PRTO\n         MVC   MSG1DSN,DSN         MOVE DSN INTO MESSAGE\n         MVC   MSG1JOBN,0(R4)      MOVE JOBNAME INTO MESSAGE\n         MVC   WTOLIST+4(MSG1LGTH),MSG1\n         L     R1,ACHK@RTC         GET PTR TO REASON/RETURN CODE\n         ICM   R2,B'1111',0(R1)    PICK UP REASON/RETURN CODE\n         BZ    EXIT                ACCESS ALLOWED, EXIT\n         L     R8,ACHK@ACE         GET THE ACEE ADDRESS POINTER\n         ICM   R8,B'1111',0(R8)    DID RACF GIVE US AN ACEE?\n         BNZ   GOTACEE             YES, CHECK AUTHORITY\n         L     R6,ASCBASXB         GET THE ASXB ADDRESS\n         L     R8,ASXBSENV         GET THE ACEE ADDRESS\nGOTACEE  TM    ACEEFLG1,ACEEAUDT   DOES THE USER HAVE AUDITOR ATTR?\n         BNO   GROUPCHK            NO, GO SEE IF THIS IS 'SUPERMAN'\n         L     R1,ACHK@FG2         GET THE FLAG 2 ADDRESS\n         TM    0(R1),ACHKTRD       DID S/HE WANT READ ACCESS?\n         BNO   EXIT                NO, DISALLOW THE ACCESS\n         B     CLASSCHK            GO AROUND 'SUPERMAN'/TAPEDS CHECK\n*\nGROUPCHK CLC   ACEEGRPN(8),=CL8'SUPERMAN' USER CONNECTED TO 'SUPERMAN'?\n         BNE   TAPEDS              NO, GO CHECK IF TAPEDS PROTECT IS ON\n         B     CLASSCHK            YES, THIS IS 'SUPERMAN', CHECK CLASS\n*\nTAPEDS   TM    RCVTFLG1,RCVTTDSN   IS TAPEDS PROTECTION ON?\n         BNO   EXIT                NO, EXIT\n*                                  YES, TAPEDS PROTECTION IS ON,\n*                                     FIND OUT IF \"DSTYPE=T\"\n*\n         L     R1,ACHK@FG3         LOAD FLAG 3 ADDRESS\nTAPECHK  TM    0(R1),ACHKTDST      IS THIS A TAPEDS ACCESS?\n         BNO   EXIT                NO, EXIT\n*                                  YES, MAKE SURE 'CLASS=DATASET'\n*                                     & ISSUE WARNING MSGS\n*\nCLASSCHK L     R1,ACHK@CLS         GET THE CLASS POINTER\n         CLC   0(8,R1),DATASET     IS 'CLASS=DATASET'?\n         BNE   EXIT                NO, EXIT TO DISALLOW\n*\n         WTO   MF=(E,WTOLIST)      WRITE THE WARNING MESSAGE\n         L     R1,ACHK@RTC         GET THE REASON CODE ADDRESS\n         XC    0(4,R1),0(R1)       CLEAR THE REASON CODE\n         L     R1,ACHK@ABE         GET THE ABEND CODE ADDRESS\n         XC    0(4,R1),0(R1)       CLEAR THE ABEND CODE\n         L     R1,ACHK@LOG         GET THE LOGGING CONTROL ADDRESS\n         MVC   0(4,R1),=F'4'       UNCOND. LOG THIS ACCESS\n         L     R1,ACHK@ACC         GET AUTHORIZED ACCESS ADDRESS\n         CLI   0(R1),X'00'         IS THERE AN AUTHORIZATION?\n         BNE   CHKAUTH             YES, CREATE MSG SUMMARIZING ACTION\n         MVC   MSG1(MSG1LGTH),NOPROF    MOVE IN NO PROFILE MESSAGE\n         MVC   WTOLIST+4(MSG1LGTH),MSG1\n         B     WTOIT               WRITE NO PROFILE MESSAGE\nCHKAUTH  MVC   NOAUTH,NOAUTHP      MOVE IN SKELETON WTO\n         MVC   AUTH,=CL8'NONE'     ASSUME AUTHORIZATION TO BE NONE\n         TM    0(R1),ACHKAALT      IS AUTHORIZATION ALTER?\n         BNO   NOALT               NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'ALTER'    YES, INSERT INTO MESSAGE\nNOALT    TM    0(R1),ACHKACTL      IS AUTHORIZATION CONTROL?\n         BNO   NOCON               NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'CONTROL'  YES, INSERT INTO MESSAGE\nNOCON    TM    0(R1),ACHKAUPD      IS AUTHORIZATION UPDATE?\n         BNO   NOUPD               NO, CHECK NEXT LEVEL\n         MVC   AUTH,=CL8'UPDATE'   YES, INSERT INTO MESSAGE\nNOUPD    TM    0(R1),ACHKARD       IS AUTHORIZATION READ ONLY?\n         BNO   NOTRED              NO, MUST HAVE BEEN NONE\n         MVC   AUTH,=CL8'READ'     YES, INSERT INTO MESSAGE\nNOTRED   L     R1,ACHK@FG2         GET FLAG BYTE 2 ADDRESS\n         TM    0(R1),ACHKTALT      WAS THE REQUEST FOR ALTER?\n         BNO   NOALTR              NO, CHECK NEXT LEVEL\n         MVC   REQUEST,=CL8'ALTER' YES, INSERT INTO MESSAGE\nNOALTR   TM    0(R1),ACHKTCTL      WAS THE REQUEST FOR CONTROL?\n         BNO   NOCONR              NO, CHECK NEXT LEVEL\n         MVC   REQUEST,=CL8'CONTROL'    YES, INSERT INTO MESSAGE\nNOCONR   TM    0(R1),ACHKTUPD      WAS THE REQUEST FOR UPDATE?\n         BNO   NOUPDR              NO, CHECK NEXT LEVEL\n         MVC   REQUEST,=CL8'UPDATE'     YES, INSERT INTO MESSAGE\nNOUPDR   TM    0(R1),ACHKTRD       WAS THE REQUEST FOR READ ONLY?\n         BNO   WTOM                NO, THEN WHAT THE HECK\n         MVC   REQUEST,=CL8'READ'  YES, INSERT INTO MESSAGE\nWTOM     MVC   WTOLIST+4(MSG1LGTH),NOAUTH    MOVE IN SKELETON MESSAGE\nWTOIT    WTO   MF=(E,WTOLIST)      WRITE THE MESSAGE\n         B     EXIT                EXIT\nNORACF   WTO   '*** WARNING *** RACF NOT ACTIVE *** ACCESS ALLOWED'\n         L     R1,ACHK@ABE         GET ABEND CODE ADDRESS\n         XC    0(4,R1),0(R1)       CLEAR THE ABEND CODE\n         L     R1,ACHK@RTC         GET RETURN CODE ADDRESS\n         XC    0(4,R1),0(R1)       CLEAR THE RETURN CODE\n         EJECT\nEXIT     LR    R1,R13              SAVE SAVE AREA ADDRESS\n         L     R13,SAVEOLD         GET CALLER'S SAVE AREA\n         XC    SAVER15(4),SAVER15  CLEAR THE RETURN CODE\n         FREEMAIN R,A=(R1),LV=WORKSIZE  FREE OUR SAVE AREA\n         XC    SAVENEW,SAVENEW     CLEAR FORWARD CHAIN\n         RETURN (14,12)            EXIT\n         EJECT\nWTOPROTO WTO   '                                                       X\n                                                           ',MF=L,     X\n               ROUTCDE=(9,11)\nWTOLISTL EQU   *-WTOPROTO          LENGTH OF PROTOTYPE WTO LIST\nDATASET  DC    AL1(7),CL7'DATASET' DATASET CLASS LENGTH & NAME\nMSG1PRTO EQU   *\n         DC    C'ICHRCX02 -- JOB='\n         DC    CL8' '\n         DC    C', DSN='\nBLANKS   DC    CL69' '\nMSG1LGTH EQU   *-MSG1PRTO\nNOPROF   DC    CL99'ICHRCX02 ** WARNING ** NO RACF PROFILE -- ACCESS ALX\n               LOWED'\nNOAUTHP  DS    0CL99\n         DC    CL38'ICHRCX02 ** WARNING ** ACCESS INTENT ('\nREQUESTP DC    CL08' '\n         DC    CL21')    ACCESS ALLOWED ('\nAUTHP    DC    CL08' '\n         DC    CL03')  '\n         DC    CL21' '\n         LTORG\n         EJECT\n         REGS\n         EJECT\n         SAVEAREA\nWORKAREA EQU   *\nWTOLIST  WTO   '1234567890123456789012345678901234567890123456789012345X\n               67890123456789012345678901234567890123456789',MF=L,     X\n               ROUTCDE=(9,11)\nMSG1     EQU   *\n         DC    C'ICHRCX02 -- JOB='\nMSG1JOBN DC    CL8' '\n         DC    C', DSN='\nMSG1DSN  DC    CL44' '\n         ORG   MSG1\nNOAUTH   DS    0CL99\n         DC    CL38'ICHRCX02 ** WARNING ** ACCESS INTENT ('\nREQUEST  DC    CL08' '\n         DC    CL21')    ACCESS ALLOWED ('\nAUTH     DC    CL08' '\n         DC    CL03')  '\n         DS    CL21\n         ORG\nDSN      DS    CL44\nWORKSIZE EQU   *-SAVEAREA\n         EJECT\n         ACHKLIST\n         EJECT\n         ICHACHKL\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         ICHPRCVT\n         EJECT\n         ICHRRPF\n         EJECT\n         IHAACEE\n         EJECT\n         END   ICHRCX02\n$$\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ICHRDSNU": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE013"}, "text": "ICHRDSNT TITLE 'RACF DATA SET NAME TABLE(EMERGENCY VERSION)'\n***********************************************************************\n*  ICHRDSNT                                                           *\n*                                                                     *\n*  PURPOSE: THE DATA SET NAME TABLE (ICHRDSNT) CONTAINS THE NAMES OF  *\n*           EACH PRIMARY AND BACKUP RACF DATA SET. SEE THE RACF       *\n*           INSTALLATION REFERENCE MANUAL FOR MORE INFORMATION.       *\n*                                                                     *\n*  NOTE:    THIS VERSION OF ICHRDSNT IS PROVIDED TO CAUSE A PROMPT    *\n*           AT IPL TIME FOR THE NAME OF THE RACF DATA SET. THIS WILL  *\n*           ALLOW IPL'ING IN THE EVENT THAT THE RACF DATA SET IS      *\n*           LOST.                                                     *\n*                                                                     *\n***********************************************************************\n*\nICHRDSNT CSECT\n         DC    FL1'1'              NUMBER OF ENTRIES IN TABLE\nENT1     DC    CL44'*'             *** PROMPT FOR DATA SET NAME ***\n         DC    CL44' '             NAME OF FIRST DATA SET\n         DC    FL1'10'             MAINTAIN 10 RESIDENT INDEX BLOCKS\n         DC    XL1'00'             FLAGS:  DO NOT MAINTAIN BACKUP\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRDX01": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\\\\\x01\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 348, "newlines": 348, "modlines": 0, "user": "FILE013"}, "text": "//**********************************************************************\n//**  RACDEF PRE-PROCESSING EXIT                                      **\n//**********************************************************************\n//UMOD000  EXEC PGM=GIMSMP,REGION=4096K\n//SMPCSI   DD DSN=SMP.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SMPCNTL  DD *\n SET BDY(TARGET).\n RESTORE S(UMOD000).\n SET BDY(GLOBAL).\n REJECT S(UMOD000).\n RECEIVE SYSMODS.\n SET BDY(TARGET).\n APPLY S(UMOD000) ASSEM REDO COMPRESS(ALL).\n/*\n//SMP.SMPPTFIN DD DATA,DLM=$$\n++USERMOD(UMOD000).\n++VER (Z038)\n  FMID(HRF1702)\n  /*\n     THIS IS AN PRE-PROCESSING EXIT FOR RACDEF(S) THAT\n     COMPLIMENTS THE RACHECK EXIT, ICHRCX02, IN PROVIDING\n     TAPE DS PROTECTION IN WARNING MODE.\n     WHEN CREATING NEW TAPE DATASETS, RACDEF IS ENTERED,\n     AND SUBSEQUENTLY, A CALL IS MADE TO RACHECK FOR WARNING\n     PURPOSES.\n                                                                  */.\n++JCLIN.\n//ICHRDX01 EXEC PGM=IEWL,PARM='XREF,LIST,LET,NCAL,RENT'\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN   DD *\n  NAME ICHRDX01(R)\n/*\n++SRC (ICHRDX01)\n    SYSLIB  (UMODSRC)\n    DISTLIB (AUMODSRC)\n    DISTMOD (ALPALIB).\nD01      TITLE 'ICHRDX01 -- RACDEF PRE-PROCESSING EXIT ROUTINE'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     ICHRDX01 -- RACDEF PRE-PROCESSING EXIT ROUTINE                 *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THIS EXIT ENFORCES THE USE OF GENERIC PROFILES FOR NEW DATA-   *\n*     SETS, BYPASSES RACDEF PROCESSING FOR TAPE DS WARNING MODE      *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     REENTRANT, LPA RESIDENT.                                       *\n*                                                                    *\n*  REQUIREMENTS -                                                    *\n*                                                                    *\n*     MCI DEVELOPED MAPPING MACRO FOR RACDEF EXIT:  ADEFLIST         *\n*                                                                    *\n*  ENTRY CONDITIONS -                                                *\n*                                                                    *\n*     R1  - ADDRESS OF AREA DERIVED FROM PARAMETERS ON RACDEF MACRO  *\n*                                                                    *\n*  EXIT CONDITIONS -                                                 *\n*                                                                    *\n*     R15 - CONTAINS A RETURN CODE:                                  *\n*             0 - PROCESSING COMPLETE, RACDEF PROCESSING CONTINUES   *\n*             4 - REQUEST FAILED                                     *\n*             8 - PROCESSING COMPLETE, RACDEF TERMINATES             *\n*            12 - PROCESSING COMPLETE, BYPASS AUTHORIZATION CHECKS   *\n*                                                                    *\n*  REGISTER USAGE -                                                  *\n*                                                                    *\n*     R13 - ADDRESS OF STANDARD SAVE AREA                            *\n*     R12 - BASE ADDRESS (ICHRDX01)                                  *\n*     R11 - ADDRESS OF PARAMETER AREA                                *\n*     R10 - ADDRESS OF COMMUNICATIONS VECTOR TABLE (CVT)             *\n*     R9  - ADDRESS OF CURRENT TASK CONTROL BLOCK (TCB)              *\n*     R8  - ADDRESS OF ACCESSOR ENVIRONMENT ELEMENT (ACEE)           *\n*     R7  - ADDRESS OF RACF CVT (RCVT)                               *\n*     R6  - ADDRESS OF ADDRESS SPACE CONTROL BLOCK (ASCB)            *\n*     R5  - ADDRESS OF ADDRESS SPACE EXTENSION BLOCK (ASXB)          *\n*     R4  - ADDRESS OF CURRENT REQUEST BLOCK (RB)                    *\n*     R3  - ADDRESS OF CONTENTS DIRECTORY ENTRY (CDE)                *\n*     R1  - WORK                                                     *\n*     R0  - WORK                                                     *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     1.  DETERMINE WHETHER OR NOT RACF IS ACTIVE.                   *\n*     2.  CHECK TO SEE IF REQUEST IS AGAINST CLASS(DATASET)          *\n*         IF IT IS CLASS(DATASET), THEN                              *\n*           CHECK IF 'TAPEDS' PROTECTION IS ON THEN                  *\n*             ISSUE A RACHECK SO THAT USER GETS 'WARNING' MSGS       *\n*             IRREGARDLESS OF AUTHORITY FROM RACHECK, ALLOW          *\n*             ACCESS SINCE IT IS 'WARN' MODE                         *\n*           IF 'TAPEDS' IS OFF, THEN EXIT                            *\n*           ELSE CONTINUE                                            *\n*     3.  SEARCH THE RB CHAIN FOR THE FIRST RB.  IF IT WAS A RACF    *\n*          COMMAND, EXIT NORMALLY TO ALLOW PROFILE MAINTENANCE.      *\n*     4.  OTHERWISE, BYPASS FURTHER RACDEF PROCESSING (WHICH, IN THE *\n*          CASE OF A NEWLY CREATED DATASET, FOR EXAMPLE, WILL CAUSE  *\n*          THE PROFILE NOT TO BE BUILT).                             *\n*                                                                    *\n*  REQUIREMENTS -                                                    *\n*                                                                    *\n*    APAR OY08209 MUST BE APPLIED IN ORDER TO FACILITATE             *\n*    REASONABLE HANDLING OF TAPE WRITE RINGS...                      *\n*                                                                    *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n         MACRO\n         ADEFLIST\n**********************************************************************\n*  DSECT NAME -                                                      *\n*     ADEFLIST                                                       *\n*  FUNCTION -                                                        *\n*     PROVIDE MAPPING FOR THE PARAMETER LIST PASSED TO THE RACDEF    *\n*     EXIT ROUTINES (ICHRDX01 AND ICHRDX02).  THIS DSECT WAS DERIVED *\n*     FROM THE 'SYSTEM PROGRAMMING LIBRARY: RESOURCE ACCESS CONTROL  *\n*     FACILITY (RACF)', PUBLICATION # SC28-1343.                     *\n**********************************************************************\nADEFLIST DSECT                     RACDEF PARAMETER LIST\nADEF@LEN DS    A                   ADDRESS OF FULLWORD LENGTH\nADEF@FGF DS    A                   ADDRESS OF FUNCTIONAL FLAGS\nADEF@INS DS    A                   ADDRESS OF INSTALLATION PARAMETERS\nADEF@ENT DS    A                   ADDRESS OF ENTITY\nADEF@OON DS    A                   ADDRESS OF OLDVOL OR NEWNAME\nADEF@VOL DS    A                   ADDRESS OF VOLUME SERIAL NUMBER\nADEF@CLS DS    A                   ADDRESS OF ENTITY CLASS NAME\nADEF@MEN DS    A                   ADDRESS OF MODEL PROFILE NAME\nADEF@MVL DS    A                   ADDRESS OF MODEL PROFILE VOLSER\nADEF@FGM DS    A                   ADDRESS OF MODEL PROFILE FLAGS:\nADEFMMND EQU   X'80'                 IGNORE MENTITY NOT DEFINED\nADEFMADF EQU   X'40'                 ADD PROFILE TO CHAIN IF DEFINED\nADEFMARG EQU   X'20'                 ADD PROFILE TO CHAIN REGARDLESS\nADEFMAND EQU   X'10'                 ADD PROFLE TO CHAIN IF NOT DEFINED\nADEFMRES EQU   X'0F'                 RESERVED\nADEF@DNC DS    A                   ADDRESS OF NAMING CONVENTIONS\nADEF@FGP DS    A                   ADDRESS OF PROFILE OPTION FLAGS:\nADEFPUAC EQU   X'80'                 USE UACC VALUE FROM PROFILE\nADEFPLVL EQU   X'40'                 USE LEVEL VALUE FROM PROFILE\nADEFPOWN EQU   X'20'                 USE OWNER VALUE FROM PROFILE\nADEFPAUD EQU   X'10'                 USE AUDIT VALUE FROM PROFILE\nADEFPGAU EQU   X'08'                 USE GLOBALAUDIT VALUE FROM PROFILE\nADEFPINS EQU   X'04'                 USE INSTALLATION DATA FROM PROFILE\nADEFPACC EQU   X'02'                 USE ACCESS LIST FROM PROFILE\nADEFPWRN EQU   X'01'                 USE WARNING VALUE FROM INSTLN PROF\nADEF@INP DS    A                   ADDRESS OF INSTALLATION PROFILE\nADEF@ACE DS    A                   ADDRESS OF ACEE\nADEF@UNT DS    A                   ADDRESS OF UNIT INFORMATION\nADEF@ACC DS    A                   ADDRESS OF UACC VALUE FLAGS\nADEF@RLV DS    A                   ADDRESS OF RESOURCE LEVEL NUMBER\nADEF@AUD DS    A                   ADDRESS OF AUDIT FLAGS\nADEFQRDF EQU   X'00'                 AUDIT QUALIFIER FOR READ\nADEFQUPF EQU   X'01'                 AUDIT QUALIFIER FOR UPDATE\nADEFQCTF EQU   X'02'                 AUDIT QUALIFIER FOR CONTROL\nADEFQALF EQU   X'03'                 AUDIT QUALIFIER FOR ALTER\nADEFQRDS EQU   X'00'                 AUDIT QUALIFIER FOR READ\nADEFQUPS EQU   X'04'                 AUDIT QUALIFIER FOR UPDATE\nADEFQCTS EQU   X'08'                 AUDIT QUALIFIER FOR CONTROL\nADEFQALS EQU   X'0C'                 AUDIT QUALIFIER FOR ALTER\nADEF@OWN DS    A                   ADDRESS OF OWNER IDENTIFIER\nADEF@DAT DS    A                   ADDRESS OF DATA INFORMATION\nADEF@FG2 DS    A                   ADDRESS OF FLAG BYTE 2\nADEFRAC@ EQU   X'00'                 RACFIND WAS NOT SPECIFIED\nADEFRACN EQU   X'80'                 RACFIND=NO\nADEFRACY EQU   X'C0'                 RACFIND=YES\nADEFCKAU EQU   X'20'                 CHKAUTH=YES\nADEFTDST EQU   X'10'                 DSTYPE=TAPE\nADEFERSE EQU   X'08'                 ERASE=YES\nADEFMGEA EQU   X'04'                 MGENER=ASIS\nADEFMGEY EQU   X'04'                 MGENER=YES\nADEFWARN EQU   X'02'                 WARNING=YES\nADEFGENR EQU   X'01'                 GENERIC=YES\nADEF@ABE DS    A                   ADDRESS OF ABEND CODE\nADEF@REC DS    A                   ADDRESS OF REASON CODE\nADEF@RTC DS    A                   ADDRESS OF RETURN CODE\nADEF@WRK DS    A                   ADDRESS OF EXIT WORK AREA\nADEF@FG3 DS    A                   ADDRESS OF FLAG BYTE 3\nADEF@ALV DS    A                   ADDRESS OF ACCLVL VALUE\nADEF@ALP DS    A                   ADDRESS OF ACCLVL PARAMETER\nADEF@SLP DS    A                   ADDRESS OF SECLVL PARAMETER\nADEF@CTP DS    A                   ADDRESS OF CATEGORY PARAMETER\nADEF@FNO DS    A                   ADDRESS OF FILE SEQUENCE NUMBER\nADEF@SRP DS    A                   ADDRESS OF SECURITY RETENTION PERIOD\nADEF@NID DS    A                   ADDRESS OF 'NOTIFY' USERID\nADEF@MCL DS    A                   ADDRESS OF MODEL CLASS\n         MEND\n*\n         EJECT\n         USING WORKAREA,R13\n         USING ICHRDX01,R12\n         USING ADEFLIST,R11\n         USING CVT,R10\n         USING TCB,R9\n         USING ACEE,R8\n         USING RCVT,R7\n         USING ASCB,R6\n         USING ASXB,R5\n         USING RBBASIC,R4\n         USING CDENTRY,R3\n         USING PSA,R0\nICHRDX01 CSECT\nICHRDX01 AMODE 31\nICHRDX01 RMODE ANY\n         SAVE  (14,12),,'ICHRDX01&SYSDATE.&SYSTIME'    SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LR    R11,R1              SAVE PARAMETER AREA ADDRESS\n         GETMAIN R,LV=SIZEWORK     OBTAIN A SAVE AREA\n         ST    R1,SAVENEW          FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN\n         LR    R13,R1              SAVE THE SAVE AREA POINTER\n         XR    R15,R15             ASSUME ZERO RETURN CODE\n         L     R10,FLCCVT          GET THE CVT ADDRESS\n         ICM   R7,B'1111',CVTRAC   IS THERE A RACF CVT?\n         BZ    EXIT                  NO, RACF IS NOT INSTALLED\n         TM    RCVTSTAT,RCVTRNA    IS RACF ACTIVE?\n         BO    EXIT                  NO, EXIT\n         TM    RCVTFLGS,RCVTROFF   HAS RVARY INACT BEEN ISSUED?\n         BO    EXIT                  YES, EXIT\n         L     R6,PSAAOLD          GET THE CURRENT ASCB ADDRESS\n         L     R9,PSATOLD          GET THE CURRENT TCB ADDRESS\n         L     R5,ASCBASXB         GET THE CURRENT ASXB ADDRESS\n         L     R1,ADEF@ACE         GET THE ACEE POINTER ADDRESS\n         ICM   R8,B'1111',0(R1)    DID RACF GIVE US AN ACEE?\n         BNZ   GOTACEE               YES, USE THAT ONE\n         ICM   R8,B'1111',ASXBSENV DOES THE USER HAVE AN ACEE?\n         BZ    EXIT                  NO, EXIT\nGOTACEE  TM    RCVTFLG1,RCVTTDSN   IS RACF TAPEDS PROTECTION ON?\n         BNO   EXIT                  NO, EXIT\n*                                    YES, CHECK 'DSTYPE'\n         L     R1,ADEF@FG2         LOAD FLAG BYTE 2 ADDRESS\nTAPECHK  TM    0(R1),ADEFTDST      DOES 'DSTYPE=TAPE'?\n         BNO   EXIT                  NO, EXIT\n*                                    YES, MAKE SURE 'CLASS=DATASET'\n         L     R1,ADEF@CLS         GET THE CLASS POINTER\n         CLC   0(8,R1),RACLASS     IS IT CLASS(DATASET)?\n         BNE   EXIT                  NO, EXIT\n         L     R1,TCBRBP           GET THE RB POINTER\nFINDRB   LR    R4,R1               COPY THE CURRENT RB POINTER\n         ICM   R1,B'0111',RBLINKB  GET THE PREVIOUS RB POINTER\n         CR    R1,R9               DOES IT POINT BACK TO THE TCB?\n         BNE   FINDRB                NO, CHECK THE NEXT RB\n         XR    R3,R3               CLEAR R3\n         ICM   R3,B'0111',RBCDE1   IS THERE A CDE FOR THIS RB?\n         BZ    BYPASS                NO, CAN'T FIGURE OUT WHO CALLED US\n         LA    R1,CMDTABLE         GET THE COMMAND TABLE ADDRESS\nCHECKCMD CLC   0(8,R1),TABLEEND    IS THIS END OF THE TABLE?\n         BE    CHKAUTH               YES, OR NOT A RACF COMMAND,\n*                                    GO ISSUE RACHECK FOR AUTHORIZATION\n         CLC   CDNAME(8),0(R1)     IS IT A RACF COMMAND?\n         BE    EXIT                  YES, EXIT\n         LA    R1,8(,R1)           POINT TO NEXT COMMAND IN TABLE\n         B     CHECKCMD            CHECK THE NEXT COMMAND\n*\n*  ISSUE RACHECK TO GET 'WARNING' MESSAGES TO THE USER, IF ANY\n*\nCHKAUTH  DS    0H\n         L     R1,ADEF@ENT         GET ENTITY ADDRESS\n         MVC   DSN,0(R1)           COPY OVER THE DATASET NAME\n         L     R1,ADEF@VOL         GET VOLUME ADDRESS\n         MVC   VOL,0(R1)           COPY OVER THE VOLUME SERIAL\n         MVC   AUTHCHK(LRACROUT),RACROUTL   INITIALIZE RACROUTE MACRO\n         RACROUTE REQUEST=AUTH,    RACHECK REQUEST                     X\n               CLASS=RACLASS,      CHECK FOR                           X\n               ATTR=ALTER,         ALTER                               X\n               ENTITY=DSN,         AUTHORITY                           X\n               VOLSER=VOL,         VOLUME OF DSN                       X\n               RELEASE=1.7,        SET RACF LEVEL TO 1.7               X\n               DSTYPE=T,           TAPE DS ACCESS REQUEST              X\n               WORKA=SAFWORK,      SAF WORK AREA                       X\n               MF=(E,AUTHCHK)\n*\n*  BYPASS RACDEF PROCESSING IRREGARDLESS OF THE RC FROM RACHECK\n*\nBYPASS   LA    R15,8               SET RETURN CODE TO BYPASS RACDEF\n         EJECT\nEXIT     LR    R1,R13              GET THE SAVE AREA POINTER\n         L     R13,SAVEOLD         GET CALLER'S SAVE AREA\n         ST    R15,SAVER15         SET RETURN CODE\n         FREEMAIN R,LV=SIZEWORK,A=(R1)  FREE OUR SAVE AREA\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n         RETURN (14,12)            RESTORE REGISTERS AND RETURN\n         EJECT\n*\n*    DATA AREAS\n*\n         DS    0D                  DOUBLE WORD ALIGN\nRACLASS  DC    AL1(L'RACLASSN)     CLASS NAME FOR RACROUTE\nRACLASSN DC    C'DATASET'          CLASS NAME FOR RACROUTE\nRACROUTL RACROUTE REQUEST=AUTH,WORKA=*-*,MF=L\nLRACROUT EQU   *-RACROUTL          LENGTH OF RACROUTE MACRO\nCMDTABLE DS    0CL8                RACF COMMAND TABLE\n         DC    CL8'AD'\n         DC    CL8'ADDSD'\n         DC    CL8'ALD'\n         DC    CL8'ALTDSD'\n         DC    CL8'DD'\n         DC    CL8'DELDSD'\nTABLEEND DC    8X'FF'\n         DS    0D\n         LTORG\n*\n*    DSECT FOR RACROUTE DYNAMIC AREAS\n*\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nSAFWORK  DS    CL512              SAF WORK AREA\n         DS    0D\nDSN      DS    CL44               DATASET NAME FOR RACROUTE\n         DS    0D\nVOL      DS    CL6                VOLUME SERIAL OF 'DSN'\n         DS    0D\nAUTHCHK  RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*\nSIZEWORK EQU   *-WORKAREA         LENGTH OF DSECT\n*\n         EJECT\n         REGS\n         EJECT\n         ADEFLIST\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IHAPSA\n         EJECT\n         IHAACEE\n         EJECT\n         ICHPRCVT\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IHARB\n         EJECT\n         IHACDE\n         EJECT\n         IKJTCB LIST=YES\n         EJECT\n         END   ICHRDX01\n$$\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0023I": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00f\\x00f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "FILE013"}, "text": "SVC239   TITLE 'SVC 239 - AUTHORIZATION ON/OFF'\n***********************************************************************\n* THIS SVC ROUTINE WILL TURN THE JSCB AUTHORIZATION BIT ON OR OFF.    *\n* TO UTILIZE THIS SVC, ONE OF THE FOLLOWING TWO CONDITIONS MUST BE    *\n* MET:                                                                *\n*       (1) THE CALLING ROUTINE IS LOCATED IN THE PLPA                *\n*        OR                                                           *\n*       (2) THE SVC MUST BE ISSUED BY A RACF-DEFINED USER WHO HAS     *\n*           READ ACCESS (OR HIGHER) TO THE RACF APPLICATION NAMED     *\n*           SVC239.                                                   *\n* ENTRY ENVIRONMENT:                                                  *\n*       THIS ROUTINE ASSUMES IT IS A TYPE-3 SVC. ON ENTRY,            *\n*       IF R0 = 'AON ' THEN AUTHORIZATION WILL BE TURNED ON           *\n*             = 'AOFF' THEN AUTHORIZATION WILL BE TURNED OFF.         *\n* EXIT:                                                               *\n*       R15 = 0    AUTHORIZATION HAS BEEN SET AS REQUESTED.           *\n*           = 4    CALLER REQUESTED AUTHORIZATION ON, BUT IT WAS      *\n*                  ALREADY ON.                                        *\n*           = 8    REQUEST IGNORED BECAUSE CALLER IS UNDER 'TEST'.    *\n*           = 12   R0 VALUE WAS BAD ON ENTRY. AUTHORIZATION HAS BEEN  *\n*                  TURNED OFF.                                        *\n*           = 16   USE OF SVC 239 NOT AUTHORIZED. AUTHORIZATION HAS   *\n*                  BEEN TURNED OFF.                                   *\n***********************************************************************\n         EJECT\nIGC0023I CSECT\n         USING *,R6                #####\n         USING CVT,R3              #####\n         USING TCB,R4              #####\n         USING RBBASIC,R5          #####\n         LR    R8,R0               SAVE INPUT PARM\n         L     R2,RBLINKB-1        POINT TO CALLER'S RB\n         LA    R2,0(,R2)           CLEAR HIGH BYTE\n         DROP  R5                  #####\n         USING RBBASIC,R2          #####\n         CLC   CVTLPDIR,RBOPSW+5   RESUME PSW -> PLPA?\n         BL    CHKTEST             YES - ENSURE NOT UNDER TEST\n*                                  NO - RACHECK FOR AUTHORIZATION\n         DROP  R2                  #####\n         GETMAIN R,LV=WORKL        FIRST GET SOME STORAGE\n         LTR   R15,R15             STORAGE AVAILABLE?\n         BNZ   RET16               ERROR IF NOT\n         LR    R2,R1               SAVE ADDR OF STORAGE\n         USING WORK,R2             #####\n         MVC   WRACHECK(RACHECKL),RACHECK  MOVE LIST FORM TO WORK AREA\n         RACHECK ENTITY=(SVCENT),  CHECK FOR AUTHORIZATION             X\n               CLASS=SVCCLS,                                           X\n               ATTR=READ,                                              X\n               MF=(E,WRACHECK)\n         LR    R9,R15              SAVE RACHECK RETURN CODE\n         FREEMAIN R,LV=WORKL,      FREE WORKING STORAGE                X\n               A=(R2)\n         DROP  R2                  #####\n         LTR   R9,R9               AUTHORIZED TO SVC 239?\n         BNZ   RET16\nCHKTEST  TM    TCBABF,TCBTCP       TEST MODE?\n         BO    RET8                YES - IGNORE SVC CALL\n         L     R2,TCBJSCB          GET JSCB\n         USING IEZJSCB,R2          #####\n         CL    R8,=CL4'AON'        REQUEST TO TURN AUTH ON?\n         BNE   SETOFF              NO - GO TURN AUTH OFF\n         TM    JSCBOPTS,JSCBAUTH   ALREADY AUTHORIZED?\n         BO    RET4                YES - LEAVE NON-ZERO RETURN CODE\n         OI    JSCBOPTS,JSCBAUTH   NO - AUTHORIZE CALLER\n         B     RET0\nSETOFF   NI    JSCBOPTS,X'FF'-JSCBAUTH  TURN AUTHORIZATION OFF\n         DROP  R2                  #####\n         CL    R8,=CL4'AOFF'       TURN AUTHORIZATION OFF?\n         BNE   RET12               NO - BAD ENTRY\nRET0     SR    R15,R15             SET GOOD RETURN CODE\n         BR    R14                 RETURN TO CALLER\nRET4     LA    R15,4               SET RC=4\n         BR    R14\nRET8     LA    R15,8               SET RC=8\n         BR    R14\nRET12    LA    R15,12              SET RC=12\n         BR    R14\nRET16    L     R2,TCBJSCB          GET JSCB\n         USING IEZJSCB,R2          #####\n         EX    0,SETOFF            TURN OFF AUTHORIZATION\n         LA    R15,16              SET RC=16\n         BR    R14\n         EJECT\nRACHECK  RACHECK MF=L              LIST FORM OF RACHECK\nRACHECKL EQU   *-RACHECK\nSVCENT   DC    CL8'SVC239'         ENTITY NAME FOR RACHECK\nSVCCLS   DC    AL1(4),C'APPL'      CLASS NAME FOR RACHECK\n         LTORG\n         EJECT\n         REGEQU\n         SPACE 5\nWORK     DSECT                     WORK AREA\nWRACHECK DS    XL(RACHECKL)        SPACE FOR LIST FORM OF RACHECK\nWORKL    EQU   *-WORK\n         SPACE 5\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEZJSCB\n         IHARB\n         IKJTCB\n         PRINT GEN\n         END   IGC0023I\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESEXIT2": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02$\\x02$\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 548, "newlines": 548, "modlines": 0, "user": "FILE013"}, "text": "         TITLE 'JESEXIT2 - ENFORCE JOB NAME STANDARDS'\n**********************************************************************\n*                                                                    *\n* MODULE NAME: JESEXIT2                                              *\n*                                                                    *\n* FUNCTION:    THIS EXIT (JES #2) WILL ENFORCE  JOB CARD STAN-       *\n*              DARDS. EXCEPTIONS TO THE STANDARDS WILL BE ALLOWED    *\n*              IF THE SUBMITTOR HAVE RACF READ ACCESS TO THE RACF    *\n*              PROFILE IN THE JES2 CLASS THAT MATCHES THE KEYWORD(S) *\n*              THAT ARE EXCEPTIONS. IF A JOB DOES NOT PASS THE       *\n*              CRITERIA FOR JOB CARD STANDARDS, THE JOB WILL END     *\n*              WITH A JCL ERROR.                                     *\n*                                                                    *\n* STANDARDS:   JOB NAME - MUST USER-ID + 1 CHARACTER                 *\n*              CLASSES  - INPUT CLASSES ARE ALWAYS CHECKED VIA RACF  *\n*              ACCT NUM - ACCOUNT NUMBERS ARE CHECKED IN JES EXIT #3 *\n*              TIME     - TIME= PARAMETERS NORMALLY NOT ALLOWED      *\n*              PRTY     - PRTY= PARAMETERS NORMALLY NOT ALLOWED      *\n*              ADDRSPC  - ADDRSPC= PARAMETERS NORMALLY NOT ALLLOWED  *\n*              PERFORM  - PERFORM= PARAMETERS NORMALLY NOT ALLLOWED  *\n*              RD       - RD= PARAMETERS NORMALLY NOT ALLLOWED       *\n*                                                                    *\n* RACF:        ALL OF THE ABOVE STANDARDS (EXCEPT ACCT NUM) ARE      *\n*              VALIDATED BY THIS EXIT. THE RACF CLASS 'JES2' HAS     *\n*              BEEN SET UP AS A USER DEFINED CLASS. WITHIN THE JES2  *\n*              CLASS, THERE ARE PROFILES THAT ARE CHECKED BY THIS    *\n*              EXIT TO SEE IF A USER IS ALLOWED TO USE THE VARIOUS   *\n*              JOB CARD PARAMETERS AVAILABLE. THIS EXIT ISSUES A     *\n*              'THIRD PARTY RACHECK' WHICH IS A FEATURE OF RACF      *\n*              RELEASE 1.8. THE PROFILES THAT ARE USED ARE:          *\n*                                                                    *\n*              JOBNAME  - IF YOU HAVE ACCESS, YOU CAN HAVE A NON-    *\n*                         STANDARD JOB NAME                          *\n*              CLASS%   - WHERE '%' IS AN INPUT CLASS, OR * FOR A    *\n*                         CATCH-ALL GENERIC PROFILE                  *\n*              TIME     - ACCESS TO THIS PROFILE ALLOWS USE OF TIME= *\n*              PRTY     - ACCESS TO THIS PROFILE ALLOWS USE OF PRTY= *\n*              ADDRSPC  - ACCESS TO THIS PROFILE ALLOWS USE OF THE   *\n*                         ADDRSPC= PARAMETER                         *\n*              PERFORM  - ACCESS TO THIS PROFILE ALLOWS USE OF THE   *\n*                         PERFORM= PARAMETER                         *\n*              RD       - ACCESS TO THIS PROFILE ALLOWS USE OF RD=   *\n*                                                                    *\n**********************************************************************\n         EJECT\n**********************************************************************\n*                                                                    *\n* EXIT FLAGS:  JCTUSER0 - FLAG FOR EXIT #2 COMPLETE                  *\n*              JCTUSER1 - FLAGS FOR TIME, PRTY, CLASS IN THE EXIT    *\n*              JCTUSER2 - FLAGS FOR ADDRSPC, PERFORM, RD IN THE EXIT *\n*              JCTUSER3 - NOT USED                                   *\n*              JCTUSER4 - FLAG TO HAVE EXIT 20 CANCEL THE JOB        *\n*              JCTUSER5 - USED BY THIS EXIT FOR JOB CARD SCANNING    *\n*                                                                    *\n* RETURN CODE: AT EXIT, REGISTER 15 WILL HAVE ONE OF THE FOLLOWING   *\n*              0  - CONTINUE WITH ADDITIONAL EXITS/HASPRDR PROCESSING*\n*              4  - CONTINUE WITH NORMAL HASPRDR PROCESSING (EXIT 20 *\n*                   WILL CANCEL THIS JOB                             *\n*                                                                    *\n* LINK EDIT:   NAME(JESEXIT2),RENT,REUS,AC(1),RMODE=24,AMODE=31      *\n*                                                                    *\n* CHANGES:     10/18/88   WRITTEN                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         COPY  $HASPGBL                 COPY HASP GLOBALS\nJESEXIT2 $MODULE $BUFFER,                                              +\n               $HASPEQU,                REQUIRED FOR REG CONVENTIONS   +\n               $HCT,                    REQ'D BY $SAVE,$RETURN,ETC.    +\n               $JCT,                    REQ'D FOR MAPPING              +\n               $JOE,                    REQ'D BY $COMWORK              +\n               $MIT,                    REQ'D BY $MODULE               +\n               $NHD,                    REQ'D BY RACF                  +\n               $PCE,                    HASP PROCESSOR CONTROL ELEMENT +\n               $RDRWORK,                HASP INPUT SERVICE PCE WORK    +\n               RPL                      REQ'D BY $BUFFER\n         TITLE 'JESEXIT2 - ENFORCE JOB NAME STANDARDS'\n         PRINT NOGEN\n         EJECT\n***********************************************************************\n*        JES2 - INITIALIZATION AND ADDRESSABILITY                     *\n***********************************************************************\nJSEXIT2  $ENTRY BASE=R12                EXIT ROUTINE ENTRY POINT\n         $SAVE\n         LR    R12,R15                  LOAD LOCAL BASE REG\n         SLR   R15,R15                  CLEAR REG 15\n         LR    R5,R1                    SAVE PARMLIST ADDRESS\n         USING JCT,R10                  ADDRESSABILITY TO JCT\n         USING HCT,R11                  ADDRESSABILITY TO HCT\n         LA    R8,JCTNJHDR              FIND ADDRESS OF NJH\n         USING NJH,R8                   ADDRESSABILITY TO NJH\n*\n         CLC   JOB,JCTJOBID             THIS A BATCH JOB?\n         BNE   RETURN                   NO, RETURN\n         TM    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETED?\n         BO    RETURN                   YES, WE'RE DONE\n*\n         C     R0,F0                    INITIAL JOB STATEMENT?\n         BNE   PARMS000                 NO, DON'T INITIALIZE JCTUSER'S\n*\n         MVC   JCTXWRK(80),SPACES       BLANK OUT WORK FIELD FIRST\n         EJECT\n***********************************************************************\n* SCAN THROUGH THE CARD FOR BLANKS, QUOTES, AND COMMAS                *\n***********************************************************************\nPARMS000 DS    0H\n         SLR   R15,R15                  CLEAR REG 15\n         L     R2,0(R5)                 POINT TO JOB STMT IMAGE BUFFER\n         LA    R3,70                    MAX LENGTH OF JOB STMT BUFFER\n*\n         C     R0,F0                    INITIAL JOB STATEMENT?\n         BE    PARMS010                 YES, SCAN CARD\n*\n         CLC   ERROR,0(R2)              SHOULD THIS JOB BE CANCELED?\n         BE    RETURN                   YES, FLAG SET SO JUST RETURN\n         CLC   COMMENT,0(R2)            IS THIS A COMMENT?\n         BE    RETURN                   YES, RETURN\n*\n         CLC   CONTINUE,0(R2)           IS THIS A CONTINUED JOBCARD\n         BNE   RETURN                   NO, EXIT NOW.\n         LA    R2,3(R2)                 THIS IS A CONTINUED JOB CARD\nBLANKER  DS    0H\n         CLC   BLANK,0(R2)              A LEADING BLANK?\n         BNE   PARMS010                 NO, PROCESS STATEMENT\n         LA    R2,1(R2)                 BUMP UP R2 BY 1\n         BCT   R3,BLANKER               CONTINUE TO SCAN FOR BLANKS\n*\nPARMS010 DS    0H\n         CLC   QUOTE,0(R2)              IS THIS A SINGLE QUOTE?\n         BNE   CONT1                    IF NOT, SEE WHAT IT IS\nQUOTES   DS    0H\n         LA    R2,1(R2)                 BUMP POINTER UP BY 1\n         CLC   QUOTE,0(R2)              IS THIS A SINGLE QUOTE?\n         BE    CONT2                    IF SO, BYPASS PROGRAMMER NAME\n         BCT   R3,QUOTES                IF NOT, CONTINUE TO SCAN\n         EJECT\n***********************************************************************\n* CHECK TO SEE IF WE HAVE ANY OF THESE PARAMETERS.                    *\n***********************************************************************\nCONT1    DS    0H\n         CLC   TIME1,0(R2)              IS THIS A TIME= PARAMETER?\n         BE    PARMS030                 YES, SET FLAGS\n         CLC   PRTY1,0(R2)              IS THIS A PRTY= PARAMETER?\n         BE    PARMS035                 YES, SET FLAGS\n         CLC   CLASS1,0(R2)             IS THIS A MSGCLASS= PARAMETER\n         BE    PARMS038                 YES, BUMP PAST IT\n         CLC   CLASS2,0(R2)             IS THIS A CLASS= PARAMETER?\n         BE    PARMS040                 YES, SET FLAGS\n         CLC   SCANJOB,0(R2)            IS THIS ' JOB ' STATEMENT\n         BE    PARMS045                 YES, SET FOUND JOBCARD FLAGS\n         CLC   ADDRSPC,0(R2)            IS THIS AN ADDRSPC= PARAMETER?\n         BE    PARMS060                 YES, SET FLAGS\n         CLC   PERFORM,0(R2)            IS THIS A PERFORM= PARAMETER?\n         BE    PARMS065                 YES, SET FLAGS\n         CLC   RD,0(R2)                 IS THIS A RD= PARAMETER?\n         BE    PARMS070                 YES, SET FLAGS\n         CLC   TRAILCOM,0(R2)           IS THIS ', ' (TRAILING COMMA)?\n         BE    RETURN                   END OF STMT, CONTINUATION NEXT\n         CLC   BLANK,0(R2)              IS THIS A ' ' BLANK\n         BNE   CONT2                    NO, KEEP GOING\n*\n         C     R0,F0                    INITIAL JOB STATEMENT?\n         BNE   RACF000                  NO,  DONE\n*\n         TM    JCTUSER5+1,SCANFLG1      FLAG1 SET?\n         BNO   CONT2                    NO, CONTINUE\n*\n         TM    JCTUSER5+1,SCANFLG2      FLAG2 SET?\n         BO    RACF000                  YES, DONE\n*\nBLANKET  DS    0H\n         LA    R2,1(R2)                 INCREMENT REG2\n         CLC   BLANK,0(R2)              ANOTHER BLANK\n         BNE   PARMS050                 NO, SET FLAG2\n         BCT   R3,BLANKET               CONTINUE TO SCAN\n         B     RETURN                   NO, EXIT NOW\n*\nCONT2    DS    0H\n         LA    R2,1(R2)                 INCREMENT REG2\n         BCT   R3,PARMS010              CONTINUE TO SCAN\n         B     RACF000                  PERFORM POST JOBCARD PROCESSING\n         EJECT\n***********************************************************************\n*        TIME=                                                        *\n***********************************************************************\nPARMS030 DS    0H\n         OI    JCTUSER1+1,TIMEUSER      SET TIME FLAG\n         LA    R2,5(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        PRTY=                                                        *\n***********************************************************************\nPARMS035 DS    0H\n         OI    JCTUSER1+1,PRTYUSER      SET PRTY FLAG\n         LA    R2,5(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        MSGCLASS=                                                    *\n***********************************************************************\nPARMS038 DS    0H\n         LA    R2,9(R2)                 INCREMENT REG2 TO BYPASS THIS\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        CLASS=                                                       *\n***********************************************************************\nPARMS040 DS    0H\n         OI    JCTUSER1+1,JOBCLASS      SET CLASS FLAG\n         LA    R2,6(R2)                 INCREMENT REG2\n         MVC   JCTXWRK(1),0(R2)         SAVE JOBCLASS\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        SCAN FLAG1                                                   *\n***********************************************************************\nPARMS045 DS    0H\n         OI    JCTUSER5+1,SCANFLG1      SET SCAN FLAG\n         LA    R2,4(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        SCAN FLAG2                                                   *\n***********************************************************************\nPARMS050 DS    0H\n         OI    JCTUSER5+1,SCANFLG2      SET SCAN FLAG\n         B     PARMS010                 SCAN NON BLANK\n***********************************************************************\n*        ADDRSPC=                                                     *\n***********************************************************************\nPARMS060 DS    0H\n         OI    JCTUSER2+1,ADDRUSER      SET ADDRSPC FLAG\n         LA    R2,6(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        PERFORM=                                                     *\n***********************************************************************\nPARMS065 DS    0H\n         OI    JCTUSER2+1,PERFUSER      SET PERFORM FLAG\n         LA    R2,6(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n***********************************************************************\n*        RD=                                                          *\n***********************************************************************\nPARMS070 DS    0H\n         OI    JCTUSER2+1,RDUSER        SET RD FLAG\n         LA    R2,1(R2)                 INCREMENT REG2\n         B     CONT2                    CONTINUE\n         EJECT\n***********************************************************************\n*  GETMAIN RACF WORK AREA, FIND USER-ID, AND INITIALIZE FOR RACF WORK *\n***********************************************************************\nRACF000  DS    0H\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         $GETMAIN RC,LV=(R0),SP=230,LOC=BELOW    GETTMAIN STG FOR RACF\n         LR    R9,R1                    R9 - ADDRESS OF GETMAINED AREA\n         USING RACWORK,R9               ESTABLISH ADDRESSABILITY TO\n         MVC   RACROUT1(RACRTLEN),ROUTDATA   MOVE STATIC INTO DYNAMIC\n         LA    R7,PROFILE               COPY ADDR OF PROFILE\n         MVC   USERID(8),SPACES         INITIALIZE FIELD\n         MVC   JBCLASS(1),JCTXWRK       INITIALIZE FIELD\n         CLC   =X'00',NJH2USR           IF ZEROS, IT IS PROPAGATED\n         BNE   NOPROP                   IF NOT GET IT FROM NJH2USR\n         MVC   USERID(8),NJH2SUSR       SAVE USER-ID OF SUBMITTOR\n         B     CHECKJOB                 SEE IF IT MATCHES JOBNAME\nNOPROP   DS    0H\n         MVC   USERID(8),NJH2USR        SAVE USER-ID OF SUBMITTOR\n         EJECT\n***********************************************************************\n*  CHECK TO SEE IF WE HAVE A VALID JOB NAME. PROFILE=JOBNAME          *\n***********************************************************************\nCHECKJOB DS    0H\n         LA    R6,USERID                GRAB ADDR OF MESSAGE\n         CLC   USERID(6),JCTJNAME       IS THE JOB NAME VALID?\n         BE    RACF100                  YES, GO CHECK FOR TIME\n         MVC   PROFILE(25),SPACES       INTITALIZE FIELD\n         MVC   PROFILE(7),=C'JOBNAME'   CHECKING FOR JOBNAME AUTH\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF100                  IF NOT 8 OR ABOVE, ALLOW IT\n         MVC   JCTXWRK(80),ERR4             BAD JOBNAME\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 ABEND\n         EJECT\n***********************************************************************\n* IF THE USER WANTS TO USE TIME=, CHECK RACF PROFILE 'TIME'.          *\n***********************************************************************\nRACF100  DS    0H\n         TM    JCTUSER1+1,TIMEUSER      TIME= ON THE JOB CARD?\n         BNO   RACF200                  NO, DON'T CHECK WITH RACF\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE TO CHECK\n         MVC   PROFILE(4),=C'TIME'      CHECKING FOR TIME= AUTH\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF200                  IF LESS THAN 8, ALLOW IT.\n         MVC   JCTXWRK(80),ERR1         MOVE IN NOT ALLOWED MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 EXIT WITH A JCL ERROR\n         EJECT\n***********************************************************************\n* IF THE USER WANTS TO USE PRTY=, CHECK RACF PROFILE 'PRTY'.          *\n***********************************************************************\nRACF200  DS    0H\n         TM    JCTUSER1+1,PRTYUSER      PRTY= ON THE JOB CARD?\n         BNO   RACF300                  NO, BYPASS RACF CHECK\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE FIELD\n         MVC   PROFILE(4),=C'PRTY'      CHECKING FOR JOBNAME AUTH\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF300                  IF LESS THAN 8, ALLOW IT\n         MVC   JCTXWRK(80),ERR2         MOVE IN NOT ALLOWED MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 EXIT WITH A JCL ERROR\n         EJECT\n***********************************************************************\n* WE SAVED THE JOB CLASS FROM THE CLASS= PARAMETER. WE NOW CREATE A   *\n* LITERAL OF 'CLASS%' WHERE '%' IS THE CLASS THE USER WANTS. WE USE   *\n* THIS LITERAL AS THE PROFILE NAME TO DO A RACF CHECK ON.             *\n***********************************************************************\nRACF300  DS    0H\n         TM    JCTUSER1+1,JOBCLASS      CLASS= ON THE JOB CARD?\n         BNO   RACF400                  NO, BYPASS THIS RACF CHECK\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE TO PASS\n         MVC   PROFILE(5),=C'CLASS'     PUT IN CLASS\n         MVC   PROFILE+5(1),JBCLASS     MAKE IT A REAL JOB CLASS\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF400                  IF LESS THAN 8, ALLOW IT\n         MVC   JCTXWRK(80),ERR3         MOVE IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 GO ISSUE A JCL ERROR\n         EJECT\n***********************************************************************\n* IF THE USER WANTS TO USE ADDRSPC=, CHECK RACF PROFILE 'ADDRSPC'.    *\n***********************************************************************\nRACF400  DS    0H\n         TM    JCTUSER2+1,ADDRUSER      ADDRSPC= ON THE JOB CARD\n         BNO   RACF500                  NO, BYPASS THIS RACF CHECK\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE TO PASS\n         MVC   PROFILE(7),=C'ADDRSPC'   MOVE IN PROFILE NAME TO CHECK\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF500                  IF LESS THAN 8, ALLOW IT\n         MVC   JCTXWRK(80),ERR5         MOVE IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 EXIT WITH A JCL ERROR\n         EJECT\n***********************************************************************\n* IF THE USER WANTS TO USE ADDRSPC=, CHECK RACF PROFILE 'ADDRSPC'.    *\n***********************************************************************\nRACF500  DS    0H\n         TM    JCTUSER2+1,PERFUSER      PERFORM= ON JOB CARD?\n         BNO   RACF600                  NO, BYPASS THIS RACF CHECK\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE TO PASS\n         MVC   PROFILE(7),=C'PERFORM'   MOVE IN PROFILE NAME TO CHECK\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RACF600                  IF LESS THAN 8, ALLOW IT\n         MVC   JCTXWRK(80),ERR6         MOVE IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n         B     PARMS080                 EXIT WITH A JCL ERROR\n         EJECT\n***********************************************************************\n* IF THE USER WANTS TO USE RD=, CHECK RACF PROFILE 'RD'.              *\n***********************************************************************\nRACF600  DS    0H\n         TM    JCTUSER2+1,RDUSER        RD= ON THE JOB CARD\n         BNO   RETURN0                  NO, EXIT. A GOOD JOB CARD\n         MVC   PROFILE(25),SPACES       INTITALIZE PROFILE TO PASS\n         MVC   PROFILE(2),=C'RD'        MOVE IN PROFILE NAME\n         RACROUTE REQUEST=AUTH,         WE WANT A RACHECK              X\n               CLASS=RACLASS,           CLASS IN THE RACF CDT (JES2)   X\n               ENTITY=((R7)),           PROFILE NAME TO CHECK          X\n               USERID=((R6)),           THIRD PARTY RACHECK USER-ID    X\n               ATTR=READ,               SEE IF THEY CAN READ IT        X\n               LOG=ASIS,                LOG IF PROFILE SET TO LOG      X\n               RELEASE=1.8,             WE ARE USING RACF V1R8         X\n               WORKA=RACWK,             512 BYTE RACROUTE WORK AREA    X\n               MF=(E,RACROUT1)          EXECUTE FORM OF RACROUTE\n         C     R15,=F'8'                CHECK RETURN CODE\n         BL    RETURN0                  IF LESS THAN 8, ALLOW IT\n         MVC   JCTXWRK(80),ERR7         MOVE IN ERROR MESSAGE\n         OI    RDWFLAGX,RDWXXSNC        SET JES2 FLAG\n*                                       FALL THROUGH FOR A JCL ERROR\n         EJECT\n***********************************************************************\n* FLAG THIS JOB AS 'SHOULD BE CANCELLED'                              *\n***********************************************************************\nPARMS080 DS    0H\n         OI    RDWFLAGX,RDWXXSNC        WE'VE SUPPLIED NEXT STMT IMAGE\n         OI    JCTUSER4,BYTEFF          JOB WILL BE CANCELED IN EXIT020\n         OI    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETE\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         LA    R1,RACWORK               ADDRESS OF GETMAIN AREA\n         $FREMAIN R,LV=(R0),A=(R1),SP=230    FREEMAIN STORAGE\n         LA    R15,4                    GIVE EM A RETURN CODE OF 4\n         B     RETURN                   WE'RE DONE\n***********************************************************************\n* EXIT WITH RETURN CODE 0                                             *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R0,WORKLEN               LENGTH OF GETMAIN AREA\n         LA    R1,RACWORK               ADDRESS OF GETMAIN AREA\n         $FREMAIN R,LV=(R0),A=(R1),SP=230    FREEMAIN STORAGE\n         OI    JCTUSER0+2,EXIT002       EXIT 02 PROCESSING COMPLETE\n         SLR   R15,R15                  EXIT WITH RETURN CODE 0\n         B     RETURN                   WE'RE DONE\n***********************************************************************\n* RESTORE REGISTERS AND RETURN                                        *\n***********************************************************************\nRETURN   DS    0H\n         $RETURN RC=(R15)               RETURN TO CALLER\n         EJECT\n***********************************************************************\n* FLAGS USED BY THIS EXIT                                             *\n***********************************************************************\n*\n*        JCTUSER0\n*\nEXIT002  EQU   X'01'                    EXIT 02 PROCESSING COMPLETE\n*\n*        JCTUSER1\n*\nTIMEUSER EQU   X'10'                    USER SPECIFIED 'TIME' PARAMETER\nPRTYUSER EQU   X'20'                    USER SPECIFIED 'PRTY'\nJOBCLASS EQU   X'40'                    USER SPECIFIED 'CLASS'\n*\n*        JCTUSER2\n*\nADDRUSER EQU   X'10'                    USER SPECIFIED 'ADDRSPC'\nPERFUSER EQU   X'20'                    USER SPECIFIED 'PERFORM'\nRDUSER   EQU   X'40'                    USER SPECIFIED 'RD'\n*\n*        JCTUSER4\n*\nBYTEFF   EQU   X'FF'                    BYTE CONSTANT, VALUE X'FF'\n*\n*        JCTUSER5\n*\nSCANFLG1 EQU   X'40'                    JOBCARD SPACES\nSCANFLG2 EQU   X'80'                    JOBCARD SPACES DONE\n         EJECT\n***********************************************************************\n* PROGRAM CONSTANTS                                                   *\n***********************************************************************\nF0       DC    F'0'                     FULLWORD CONSTANT, VALUE X'00'\nF8       DC    F'8'                     FULLWORD CONSTANT, VALUE X'08'\nRACLASS  DS    0F                       ADDRESS OF RACF CLASS NAME\n         DC    AL1(4)                   LENGTH OF CLASS NAME\nRACLASSN DC    CL8'JES2'                RACF CLASS TO CHECK IN\nTIME1    DC    C'TIME='                 TIME PARAMETER\nCLASS1   DC    C'MSGCLASS='             MSGCLASS PARAMETER\nCLASS2   DC    C'CLASS='                CLASS PARAMETER\nPRTY1    DC    C'PRTY='                 PRTY PARAMETER\nADDRSPC  DC    C'ADDRSPC'               ADDRSPC\nPERFORM  DC    C'PERFORM'               PERFORM\nRD       DC    C'RD'                    RD\nQUOTE    DC    C''''                    QUOTE\nTRAILCOM DC    C', '                    TRAILING COMMA\nSPACES   DC    CL80' '                  BLANKS\nJOB      DC    C'JOB'                   JCTJOBID FOR BATCH JOB\nSCANJOB  DC    C' JOB '                 JOBCARD SCAN\nCOMMENT  DC    C'//*'                   USED TO CHECK FOR COMMENT\nCONTINUE DC    C'// '                   USED TO CHECK FOR CONTINUE\nBLANK    DC    C' '                     USED TO SKIP LEADING BLANKS\nERROR    DC    C'//**ERROR**'           USED TO CHECK FOR ERROR CARD\nERR1     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR TIME='\nERR2     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR PRTY='\nERR3     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR JOB CLAX\n               SS'\nERR4     DC    CL80'//**ERROR** BAD JOBCARD, JOBNAME MUST BE YOUR USERIX\n               D PLUS 1 CHARACTER'\nERR5     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR ADDRSPCX\n               ='\nERR6     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR PERFORMX\n               ='\nERR7     DC    CL80'//**ERROR** BAD JOBCARD, NOT AUTHORIZED FOR RD='\n***********************************************************************\n* LIST FORM OF RACROUTE MACRO                                         *\n***********************************************************************\n         DS    0F\nROUTDATA RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*,RELEASE=1.8\nRACRTLEN EQU   *-ROUTDATA\n         LTORG\n         EJECT\n***********************************************************************\n* DYNAMIC AREA FOR GETMAINED VARIABLES AND RACF WORK AREAS            *\n***********************************************************************\nRACWORK  DSECT\nUSERID   DS    CL8                      USER-ID TO RACHECK AGAINST\nPROFILE  DS    CL25                     PROFILE TO RACHECK AGAINST\nJCLASS   DS    0CL6                     JOBCLASS TO RACHECK AGAINST\nCLASWORD DS    CL5                      LITERAL 'CLASS'\nJBCLASS  DS    CL1                      ACTUAL JOB CLASS FROM JCL\nRACWK    DS    CL512                    RACROUTE WORK AREA\n         DS    0D                       ALIGNMENT ON DOUBLEWORD BDY\nDOUBLE   DC    D'0'\nRACROUT1 RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*,RELEASE=1.8,             X\n               CLASS=RACLASS,LOG=ASIS,ENTITY=PROFILE,USERID=USERID,    X\n               ATTR=READ\nWORKLEN  EQU   *-RACWORK\nJESEXIT2 CSECT\n         $MODEND\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES020": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02x\\x02x\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 632, "newlines": 632, "modlines": 0, "user": "FILE013"}, "text": "JES020   TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS'\n***********************************************************************\n*                                                                     *\n*  PROGRAM: JES020                                                    *\n*  PURPOSE: ASSIGN PROGRAMMER-NAME ROOM-NUMBER AND MSGCLASS           *\n*           FROM RACF USER PROFILE FOR STARTED-TASK AND TSO.          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  CHANGE LOG:                                                        *\n*  08/21/86  MKH  INITIAL VERSION                                  001*\n*  10/19/86  MKH  REMOVE JOURNALING FOR STARTED TASKS              002*\n*  10/26/86  MKH  VERSION REWRITE                                  003*\n*  11/19/86  MKH  DO NOT DEFAULT ROOM FOR TSO USERS                004*\n*  12/01/86  MKH  ADD DUAL VERSION SUPPORT                         005*\n*                                                                     *\n*  CHANGE LEVEL:                                                      *\n         LCLC  &LEVEL,&UMOD,&UDATE                                    *\n&LEVEL   SETC  '005-MKH'    <------ CURRENT MODIFICATION LEVEL        *\n&UDATE   SETC  '12/01/86'   <------ VERSION DATE                      *\n&UMOD    SETC  'MJES020'    <------ SMP USERMOD ID                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DEPENDENCIES:                                                      *\n*           - RACF RELEASE 1.7 OR HIGHER.                             *\n*           - SETUSER TSO COMMAND.                                    *\n*                                                                     *\n*  SOURCE:  'MVSSUPRT.MVSXA.SOURCE(JES020)'                           *\n*  LOADMOD: 'SYS1.LINKLIB(JES020)'                                    *\n*  EXIT-NAME:  EXIT020                                                *\n*                                                                     *\n*                                                                     *\n*  ASSEMBLY:   //SYSLIB DD DSN=SYS1.SMPMTS,DISP=SHR                   *\n*              //       DD DSN=SYS1.MACLIB,DISP=SHR                   *\n*              //       DD DSN=SYS1.HASPSRC,DISP=SHR                  *\n*              //       DD DSN=SYS1.AMODGEN,DISP=SHR                  *\n*                                                                     *\n*  LINKEDIT:   'RENT,REUS,REFR,NCAL,...'                              *\n*              MUST RESIDE IN APF LINKLIST LIBRARY, OR LPA.           *\n*              //SYSLIN DD *                                          *\n*                 INCLUDE SYSPUNCH(JES020)                            *\n*                 ENTRY JES020   <--- MIT DIRECTORY                   *\n*                 SETCODE AC(0)                                       *\n*                NAME JES020(R)                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*  DESCRIPTION:                                                       *\n*    THE JES2 EXIT #20 GETS CALLED AFTER ALL JCL STATEMENTS HAVE      *\n*    BEEN READ IN, AND BEFORE THE JCT IS TO BE WRITTEN TO THE         *\n*    CHECKPOINT DATASET.  THE EXIT RUNS UNDER THE JES2 MAINTASK       *\n*    IN THE JES2 ADDRESS-SPACE IN KEY-1.  WE USE THE RACF MANAGER     *\n*    MACROS TO RETRIEVE THE USERID-RELATED DATA FROM THE              *\n*    RACF USER PROFILE.  THE TEMPLATE NAMES FOR THESE FIELDS ARE:     *\n*       PGMRNAME - PROGRAMMER NAME FIELD                              *\n*       USRDATA  - ROOM NUMBER                                        *\n*       USRFLG   - DEFAULT MSGCLASS (FOR STARTED-TASKS ONLY)          *\n*    THE PROGRAMMER-NAME FIELD CAN BE SET IN THE PROFILE BY EITHER    *\n*    THE RACF 'ALTUSER' TSO COMMAND, OR BY THE SEAFIRST 'SETUSER'     *\n*    TSO COMMAND.  THE ROOM AND MSGCLASS MUST BE SET BY THE           *\n*    'SETUSER' COMMAND.                                               *\n*    NOTE:  JES2 EXITS #2 AND #4 DO NOT GET CALLED FOR STARTED        *\n*           TASKS AND TSO LOGONS.                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** JES2 DSECTS ***'\n         COPY  $HASPGBL               COPY HASP GLOBALS\n&PRINT   SETC  'GEN'                  PRINT GEN OPTION FOR CSECT\n&LISTJES SETC  'GEN'                  PRINT GEN OPTION FOR JES2 DSECTS\n         EJECT\nJES020   $MODULE $BUFFER,                                              X\n               $CAT,                  REQ'D BY $JCT                    X\n               $DCT,                                                   X\n               $HASPEQU,              REG EQUATES                      X\n               $HCT,                  REQ'D FOR $SAVE,$RETURN,ETC.     X\n               $JCT,                  REQ'D BY $CAT                    X\n               $JOE,                  REQ'D TO GET SYSOUT CLASS        X\n               $JQE,                  REQ'D BY $HCT                    X\n               $MIT,                  REQ'D BY $MODEND                 X\n               $PCE,                  REQ'D BY $HCT                    X\n               $PDDB,                                                  X\n               $PPPWORK               REQ'D TO FIND JOB\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  MODULE IDENTIFICATION:                                       ****\n***********************************************************************\n$ID      DS    0D\n         DC    C'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS '\n         DC    C'USERMOD &UMOD '\n         DC    C'VERSION &VERSION &LEVEL &UDATE'                   005\n         DS    0D\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  SET JES2 VERSION DEPENDENT USINGS:                      **** 005\n***********************************************************************\n         AIF   ('&VERSION' EQ 'SP 1.3.4').OLDVER                   005\n.NEWVER  ANOP  ,                   JES 2.1.5 USINGS:               005\n         USING JCT,R10                SET ADDRESSABLILTY           005\n         USING HCT,R11                SET ADDRESSABLILTY           005\n         USING PCE,R13                SET ADDRESSABLILTY           005\n         AGO   .ENDVER                                             005\n.OLDVER  ANOP  ,                   JES 1.3.4 USINGS:               005\n         USING JCTDSECT,R10           SET ADDRESSABLILTY           005\n         USING HCTDSECT,R11           SET ADDRESSABLILTY           005\n         USING PCEDSECT,R13           SET ADDRESSABLILTY           005\n.ENDVER  ANOP  ,                                                   005\n*=====================================================================*\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** EXIT020 CSECT ***'\n***********************************************************************\n****  PERFORM JES2 EXIT LINKAGE:                                   ****\n***********************************************************************\nEXIT020  RMODE 24                     BELOW 16M LINE\nEXIT020  AMODE 24                     MUST HAVE 24-BIT PSW\nEXIT020  $ENTRY CSECT=YES,BASE=R12\n         $SAVE ,                      SAVE REGS\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  INITIALIZE REGISTER ASSIGNMENTS:                             ****\n***********************************************************************\nPROC100  DS    0H                  INITIAL ENTRY:\n         LR    R12,R15                R12: BASE REG\n         L     R8,CVTPTR              R8: CVT ADDRESS\n         L     R8,CVTRAC-CVT(,R8)     R8: RCVT ADDRESS (RACF)\n         USING RCVT,R8                USE ICHPRCVT MACRO\n         LTR   R8,R8                  IS RCVT THERE ?\n         BZ    RETURN                 NO:  EXIT\n         TM    RCVTSTAT,RCVTRNA       IS RACF INACTIVE ?\n         BO    RETURN                 YES: EXIT\n         CLC   =CL4'JCT',JCTID        CORRECT OFFSETS ?\n         BNE   RETURN                 NO: EXIT\n         TM    JCTJOBFL,JCTSTCJB      IS STARTED TASK ?\n         BO    PROC200                YES: PROCESS\n         TM    JCTJOBFL,JCTTSUJB      IS TSO USER ?\n         BO    PROC200                YES: PROCESS\n         B     RETURN                 NO: EXIT\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  GETMAIN OUR DYNAMIC WORKING-STORAGE AREA:                    ****\n***********************************************************************\nPROC200  DS    0H                  INIT WORKAREA:\n         LA    R0,#SIZE               R0: LENGTH OF GETMAINED WORKAREA\n         GETMAIN R,LV=(0)             GETMAIN THE WORKAREA\n         LA    R9,0(,R1)              R9: WORKAREA\n         USING #AREA,R9               SET ADDRESSABILITY\n         LR    R0,R9                  R0: MVCL TARGET ADDR\n         LA    R1,#SIZE               R1: MVCL TARGET SIZE\n         XR    R2,R2                  RESET R2\n         XR    R3,R3                  RESET R3\n         MVCL  R0,R2                  CLEAR GETMAINED AREA\n         LA    R1,#SIZE               GETMAIN AREA SIZE\n         ST    R1,#GMFM               SAVE GETMAIN/FREEMAIN PARM\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  GET THE ASSOCIATED RACF USERID:                              ****\n****                                                               ****\n****  IF THIS IS A TSO USER, THEN WE CAN ASSUME THAT THE JOBNAME   ****\n****   AND THE USERID ARE THE SAME.                                ****\n****  IF THIS IS A STARTED-TASK JOB, THEN WE NEED TO REFERENCE     ****\n****   THE RACF STARTED-TASK NAME TABLE (ICHRIN03) TO DETERMINE    ****\n****   THE APPROPRIATE USERID.                                     ****\n****                                                               ****\n***********************************************************************\nPROC300  DS    0H                  EXTRACT USERID:\n         MVC   #USERIDN,JCTJNAME      MOVE JOBNAME\n         TM    JCTJOBFL,JCTTSUJB      IS TSO USER ?\n         BO    PROC400                YES: JOBNAME IS USERID\n*---------------------------------------------------------------------*\nPROC310  DS    0H                  ONLY STARTED-TASKS HERE:\n         L     R7,RCVTSPT             R7: ICHRIN03 ADDRESS\n         LTR   R7,R7                  DOES ICHRIN03 EXIST ?\n         BZ    PROC400                NO: DONT REFER TO TABLE\n         ICM   R3,B'0011',0(R7)       R3: ICHRIN03 ENTRIES\n         LA    R0,X'FFF'              R0: 'AND' MASK\n         NR    R3,R0                  SAVE LOW 3 NIBBLES\n         LA    R2,2(,R7)              R2: START OF TABLE\n*---------------------------------------------------------------------*\nPROC320  DS    0H                  SCAN ICHRIN03 TABLE:\n         CLC   #USERIDN,0(R2)         DOES JOBNAME MATCH ?\n         BE    PROC340                YES: SUPPLY NEW USERID\n         LA    R2,32(,R2)             R2: NEXT ENTRY\n         BCT   R3,PROC320             CONTINUE TABLE SCAN,\n         B     PROC400                -OR ASSUME JOBNAME=USERID\nPROC340  DS    0H                  SET USERID PER ICHRIN03:\n         MVC   #USERIDN,8(R2)         SET NEW USERID\n*        B     PROC400                CONTINUE\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  SET THE USERID CHARACTER LENGTH FIELD:                       ****\n***********************************************************************\nPROC400  DS    0H                  SET USERID STRING LENGTH:\n         LA    R4,#USERIDN            R4: SCAN POINTER\n         LA    R5,8                   R5: LOOP CONTROL\n         XR    R3,R3                  R3: USERID LENGTH COUNTER\n*---------------------------------------------------------------------*\nPROC420  DS    0H                  COUNT USERID CHARS:\n         CLI   0(R4),C'$'             IS VALID CHAR ?\n         BL    PROC440                NO: EXIT LOOP\n         LA    R3,1(,R3)              YES: INCREMENT LENGTH\n         LA    R4,1(,R4)              BUMP POINTER\n         BCT   R5,PROC420             DECR LOOP CONTROL\n*---------------------------------------------------------------------*\nPROC440  DS    0H                  SET USERID LENGTH:\n         STC   R3,#USERIDL            SET THE LENGTH\n         LTR   R3,R3                  ANY USERID ?\n         BNP   PROC800                NO: CLEANUP AND RETURN\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  CALL RACF MANAGER FOR USERID INFORMATION:                    ****\n****                                                               ****\n****  THE ICHEINTY MACRO INVOKES THE RACF MANAGER VIA SVC-132.     ****\n****  THE 'ACTIONS' KEYWORD SPECIFIES SECONDARY PARAMETER LISTS    ****\n****   WHICH DESCRIBE WHICH RACF FIELDS WE WANT TO RETRIEVE.       ****\n****  THE SECOND-LEVEL PLISTS (ICHEACTN MACROS) PASS THE SYMBOLIC  ****\n****   NAME OF THE FIELDS DIRECTLY TO RACF, SO THAT RACF CAN       ****\n****   INTERPRET THEM AGAINST HIS TEMPLATES.                       ****\n****  THE THIRD-LEVEL PLIST (ICHETEST MACRO) PROVIDES RACF WITH    ****\n****   A CONDITION THAT MUST OCCUR FOR THE SECOND-LEVEL PLIST TO   ****\n****   WORK, SO THAT WE CAN RETRIEVE A SPECIFIC SEGMENT, I.E.  A   ****\n****   UNIQUE REPEAT OCCURRENCE, OF A UNIT OF DATA.                ****\n****  ICHEINTY RETURN-CODES AND RACF TEMPLATES ARE DESCRIBED IN    ****\n****   THE RACF SPL, SC28-1343.                                    ****\n****                                                               ****\n***********************************************************************\nPROC500  DS    0H                  RETRIEVE RACF DATA:\n         LA    R2,RACFEND-RACFAREA    R2: LENGTH OF WKAREA\n         ST    R2,RACALENG            SET WKAREA LENGTH\n         XC    RACCNTL,RACCNTL        RESET ICHEINTY CONTROL AREA\n         LA    R1,#LOCATE             R1: PLIST ADDRESS\n         MVC   0(#LOCATEL,R1),PLOCATE PREFORMAT MACRO PLIST\n         LA    R2,RACFAREA            R2: WORKAREA ADDRESS\n         LA    R3,#USERID             R3: USERID AREA\n*---------------------------------------------------------------------*\n         ICHEINTY LOCATE,MF=(E,(1)),  RETRIEVE RACF DATA:              X\n               WKAREA=(R2),           - ANSWER AREA                    X\n               ENTRY=(R3)             - USERID AREA\n*---------------------------------------------------------------------*\nPROC520  DS    0H                  PROCESS PER RETURN-CODE:\n         LTR   R15,R15                WAS RACF MANAGER CALL GOOD ?\n         BZ    PROC540                YES: SET UNIT POINTERS\n         CH    R15,=H'12'             WAS USER UNDEFINED ?\n         BE    PROC600                YES: PROCESS WITHOUT POINTERS\n         B     PROC580                NO: ISSUE ERROR MESSAGE\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****    ICHEINTY RETURN-CODE = +0                                  ****\n***********************************************************************\nPROC540  DS    0H                  USERID PROFILE RETRIEVED:\n         LA    R2,RACDATA             R2: START OF RACF'S REPLY\n         XR    R3,R3                  RESET R3\n         ST    R2,#PTRNAME            SET PROGRAMMER NAME FIELD\n*---------------------------------------------------------------------*\n         ICM   R3,B'0011',0(R2)       R3: LENGTH OF PGMRNAME UNIT\n         LA    R2,2(R3,R2)            R2: NEXT FIELD\n         ST    R2,#PTRROOM            SET ROOM NUMBER UNIT ADDRESS\n*---------------------------------------------------------------------*\n         ICM   R3,B'0011',0(R2)       R3: LENGTH OF ROOM UNIT\n         LA    R2,2(R3,R2)            R2: NEXT FIELD\n         ST    R2,#PTRMSGC            SET MSGCLASS UNIT ADDRESS\n*---------------------------------------------------------------------*\n         B     PROC600                PROCESS JCT\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****    ICHEINTY RETURN-CODE = ???                                 ****\n***********************************************************************\nPROC580  DS    0H                  CRITICAL RACF ERROR:\n         STC   R15,#F+1               SET R15 LOW-NIBBLE IN BYTE-1\n         SRL   R15,4                  SHIFT OUT LOW NIBBLE\n         STC   R15,#F+0               SET R15 HI-NIBBLE IN BYTE-0\n         STC   R0,#F+3                SET R0 LOW-NIBBLE IN BYTE-3\n         SRL   R0,4                   SHIFT OUT LOW NIBBLE\n         STC   R0,#F+2                SET R0 HI-NIBBLE IN BYTE-2\n         NC    #F,ANDMASK             'AND'-OUT TRASH\n         TR    #F,HEXCHARS            CONVERT TO EBCDIC\n         LA    R1,#WTOMSG             R1: WTO PLIST AREA\n         MVC   0(MSG1LEN,R1),MSG1     PREFORMAT WTO PLIST\n         USING MSG1,R1                SETUP TEMP ADDRESSABILITY\n         MVC   MSG1RC,#F+0            SET RETURN-CODE\n         MVC   MSG1R0,#F+2            SET REASON CODE\n         MVC   MSG1JOB,JCTJNAME       SET JOBNAME\n         MVC   MSG1JBNO,JCTJOBID+4    SET JOB NUMBER\n         MVC   MSG1USER,#USERIDN      SET USERID\n         XR    R0,R0                  RESET R0\n         WTO   ,MF=(E,(1))            ISSUE WTO MESSAGE\n         DROP  R1                     DROP WTO PLIST MAPPING\n         B     PROC800                CLEANUP AND RETURN\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  EXTRACT RESULTS FROM RACF MANAGER CALL:                      ****\n****                                                               ****\n****  THE INFORMATION RETURNED FROM RACF WILL BE PLACED INTO       ****\n****   'STAGING' AREAS, SO THAT WE CAN DECEIDE WHAT TO DO WITH     ****\n****   THEM, DEPENDING UPON WHAT WE GOT.                           ****\n****                                                               ****\n***********************************************************************\n         SPACE 2\n*---------------------------------------------------------------------*\nPROC600  DS    0H                  RACF DATA RETRIEVED OK:\n***********************************************************************\n****  PROC60:  EXTRACT PROGRAMMER NAME FIELD:                      ****\n***********************************************************************\nPROC60   DS    0H                  SET PROGRAMMER NAME FIELD:\n         L     R4,#PTRNAME            R4: RACF PROGRAMMER NAME FIELD\n         LTR   R4,R4                  WAS FIELD RETRIEVED ?\n         BZ    PROC60N                NO: SET DEFAULT NAME\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         CH    R5,=H'20'              WAS FIELD RETRIEVED ?\n         BNE   PROC60N                NO: PROCESS DEFAULT NAME\n         CLC   2(20,R4),BLANKS        DOES NAME DATA EXIST ?\n         BL    PROC60N                NO: PROCESS DEFAULT NAME\n*---------------------------------------------------------------------*\nPROC60Y  DS    0H                  SET PROGRAMMER NAME FIELD:\n         MVC   JCTPNAME,2(R4)         YES: SET PROGRAMMER NAME FIELD\n         B     PROC60X                PGMRNAME COMPLETE\n*---------------------------------------------------------------------*\nPROC60N  DS    0H                  SET DEFAULT PROGRAMMER NAME FIELD:\n         MVC   JCTPNAME(12),=CL12'UNKN USERID'\n         MVC   JCTPNAME+12(8),#USERIDN\n*---------------------------------------------------------------------*\nPROC60X  DS    0H                  PROGRAMMER NAME FIELD IS SET:\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  PROC61:  EXTRACT ROOM NUMBER:                                ****\n***********************************************************************\nPROC61   DS    0H                  EXTRACT ROOM NUMBER:\n         L     R4,#PTRROOM            R4: RACF ROOM NUMBER FIELD\n         LTR   R4,R4                  WAS FIELD RETRIEVED ?\n         BZ    PROC61N                NO: SET DEFAULT ROOM\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         CH    R5,=H'10'              WAS FIELD RETRIEVED ?\n         BNH   PROC61N                NO: SET DEFAULT ROOM\n         CLC   2(8,R4),ROOMKEY        IS CORRECT KEY ?\n         BNE   PROC61N                NO: SET DEFAULT ROOM\n*---------------------------------------------------------------------*\nPROC61A  DS    0H                  EXTRACT ROOM NUMBER AND TEST:\n         LA    R0,#F                  R0: MVCL TARGET ADDR\n         LA    R1,L'#F                R1: MVCL TARGET SIZE\n         LA    R2,2+8+1(,R4)          R2: START OF ROOM NUMBER\n         XR    R3,R3                  RESET R3\n         IC    R3,2+8(,R4)            R3: LENGTH OF ROOM NUMBER\n         ICM   R3,B'1000',BLANKS      SET FILL CHARACTER\n         MVCL  R0,R2                  MOVE ROOM NUMBER TO '#F'\n         CLI   #F,C' '                DOES ROOM NUMBER EXIST ?\n         BNH   PROC61N                NO: SET DEFAULT ROOM\n         CLI   #F,C'*'                DOES ROOM NUMBER EXIST ?\n         BE    PROC61N                NO: SET DEFAULT ROOM\n*---------------------------------------------------------------------*\nPROC61Y  DS    0H                  SET ROOM NUMBER IN JCT:\n         MVC   JCTROOMN,#F            SET ROOM NUMBER\n         B     PROC61X                ROOM NUMBER COMPLETE\n*---------------------------------------------------------------------*\nPROC61N  DS    0H                  SET DEFAULT NUMBER IN JCT:\n         TM    JCTJOBFL,JCTTSUJB      ARE WE A TSO USER ?          004\n         BO    PROC61T                YES: SET ROOM = ????         004\n*        BZ    PROC61J                NO:  SET ROOM = FA12         004\n*----------------------------------------------------------------* 004\nPROC61J  DS    0H                  DEFAULT ROOM FOR STARTED TASK:  004\n         MVC   JCTROOMN,=C'FA12'      SET ROOM NUMBER\n         B     PROC61X                ROOM NUMBER COMPLETE\n*----------------------------------------------------------------* 004\nPROC61T  DS    0H                  DEFAULT ROOM FOR TSO USER:      004\n         MVC   JCTROOMN,=C'????'      SET UNKNOWN ROOM NUMBER      004\n*        B     PROC61X                ROOM NUMBER COMPLETE         004\n*---------------------------------------------------------------------*\nPROC61X  DS    0H                  ROOM NUMBER HAS BEEN SET:\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  PROC62:  EXTRACT MSGCLASS USING 'MSGCLASS' KEY:              ****\n***********************************************************************\nPROC62   DS    0H                  SET MSGCLASS USING MSGCLASS KEY:\n         MVI   #C,0                   RESET TEMP MSGCLASS BYTE\n         L     R4,#PTRMSGC            R4: RACF MSGCLASS FIELD\n         LTR   R4,R4                  WAS FIELD RETRIEVED ?\n         BZ    PROC63                 NO: TRY OLD METHOD\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         CH    R5,=H'10'              WAS FIELD RETRIEVED ?\n         BNH   PROC63                 NO: TRY OLD METHOD\n         MVC   #C(1),2+8+1(R4)        YES: MOVE MSGCLASS VALUE\n         B     PROC64                 YES: GO SET MSGCLASS\n*=====================================================================*\n         SPACE 2\n***********************************************************************\n****  PROC63:  EXTRACT MSGCLASS FROM 'ROOM' FLAG:                  ****\n***********************************************************************\nPROC63   DS    0H                  SET MSGCLASS USING OLD METHOD:\n         MVI   #C,0                   RESET TEMP MSGCLASS BYTE\n         L     R4,#PTRROOM            R4: RACF ROOM FIELD\n         LTR   R4,R4                  WAS FIELD RETRIEVED ?\n         BZ    PROC64                 NO: DONT SET MSGCLASS FIELD\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         CH    R5,=H'10'              WAS FIELD RETRIEVED ?\n         BNH   PROC64                 NO: DONT SET MSGCLASS FIELD\n*---------------------------------------------------------------------*\n         LA    R4,2+8(,R4)            R4: USRDATA ADDRESS\n         XR    R5,R5                  RESET R5\n         IC    R5,0(,R4)              R5: LENGTH OF USRDATA FIELD\n         LA    R4,1(R5,R4)            R4: USRFLAG FIELD\n         MVC   #C(1),0(R4)            MOVE ROOM USRFLG\n*        B     PROC64                 GO TEST MSGCLASS VALIDITY\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  PROC64:  VALIDATE MSGCLASS AND SET:                          ****\n***********************************************************************\nPROC64   DS    0H                  CONDITIONALLY SET MSGCLASS:\n         CLI   #C,C'A'                VALID CHAR ?\n         BL    PROC64N                NO: DONT MODIFY MSGCLASS\n         CLI   #C,C'I'                VALID CHAR ?\n         BNH   PROC64Y                YES: SET MSGCLASS\n*\n         CLI   #C,C'J'                VALID CHAR ?\n         BL    PROC64N                NO: DONT MODIFY MSGCLASS\n         CLI   #C,C'R'                VALID CHAR ?\n         BNH   PROC64Y                YES: SET MSGCLASS\n*\n         CLI   #C,C'S'                VALID CHAR ?\n         BL    PROC64N                NO: DONT MODIFY MSGCLASS\n         CLI   #C,C'Z'                VALID CHAR ?\n         BNH   PROC64Y                YES: SET MSGCLASS\n*\n         CLI   #C,C'0'                VALID CHAR ?\n         BL    PROC64N                NO: DONT MODIFY MSGCLASS\n         CLI   #C,C'9'                VALID CHAR ?\n         BNH   PROC64Y                YES: SET MSGCLASS\n         B     PROC64N                NO: DONT MODIFY MSGCLASS\n*---------------------------------------------------------------------*\nPROC64Y  DS    0H                  SET MSGCLASS:\n         MVC   JCTMCLAS(1),#C         SET MSGCLASS\nPROC64N  DS    0H                  DON'T SET MSGCLASS:\n*=====================================================================*\n         SPACE 2\n***********************************************************************\n****  PROC65:  MODIFY JOBLOG FLAGS:                                ****\n***********************************************************************\nPROC65   DS    0H                  SEE IF MSGCLASS=Z:\n         CLI   JCTMCLAS,C'Z'          IS MSGCLASS=Z ?\n         BE    PROC65Y                YES: SUPPRESS JOBLOG\n*---------------------------------------------------------------------*\nPROC65N  DS    0H                  KEEP THE JOBLOG:\n         NI    JCTJOBFL,255-JCTNOUPT  FORCE OUTPUT\n         NI    JCTJBOPT,255-JCTNOLOG  FORCE JOBLOG\n         B     PROC65X                EXIT\n*---------------------------------------------------------------------*\nPROC65Y  DS    0H                  SUPPRESS THE JOBLOG:\n         OI    JCTJBOPT,JCTNOLOG      SET NO JOBLOG\n*        B     PROC65X                EXIT\n*---------------------------------------------------------------------*\nPROC65X  DS    0H                  JOBLOG PROCESSING COMPLETE:\n*        B     PROC800                EXIT\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n****  RETURN TO JES2:                                              ****\n***********************************************************************\nPROC800  DS    0H                  FREEMAIN WORKAREA:\n         L     R0,#GMFM               R0: FREEMAIN PARM\n         LA    R1,#AREA               R1: FREEMAIN AREA\n         FREEMAIN R,LV=(0),A=(1)      FREEMAIN WORKAREA\n*---------------------------------------------------------------------*\nRETURN   DS    0H                  RETURN TO JES2:\n         XR    R15,R15                SET RC=0\n         $RETURN RC=(R15)\n*=====================================================================*\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** STATIC WORKING STORAGE AREA ***'\n***********************************************************************\n****  STATIC WORKING-STORAGE AREA:                                 ****\n***********************************************************************\n         LTORG ,                      LITERAL POOL\n*---------------------------------------------------------------------*\nBLANKS   DC    CL20' '\nANDMASK  DC    XL08'0F0F0F0F0F0F0F0F' EXTRACT LOW-NIBBLES\nHEXCHARS DC    CL16'0123456789ABCDEF' TRANSLATE HEX TO EBCDIC\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  ICHEINTY MACRO PLIST PROTOTYPE:                              ****\n***********************************************************************\nPLOCATE  ICHEINTY LOCATE,MF=L,        RACF PROFILE RETRIEVAL LIST:     X\n               TYPE='USR',            - WE WANT 'USER' PROFILE         X\n               FLDEF=ICHELIST,        - REMOTE ICHEACTN LIST           X\n               ENTRY=R2,              - (R2) ADDR OF USERID AREA       X\n               WKAREA=R3              - (R3) ADDR OF ANSWER AREA\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  ICHEINTY REMOTE ACTION LIST:                                 ****\n***********************************************************************\nICHELIST ICHEINTY FLDEF,MF=L,         SPECIFY ACTION/TEST LIST(S)      X\n               ACTIONS=(ICHANAME,     - RETRIEVE PGMRNAME              X\n               ICHAROOM,              - RETRIEVE USERDATA(ROOM)        X\n               ICHAMCLS)              - RETRIEVE USERDATA(MSGCLASS)\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  ACTION: RETRIEVE PROGRAMMER NAME FIELD:                      ****\n***********************************************************************\nICHANAME ICHEACTN FIELD=PGMRNAME,MF=L\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  ACTION: RETRIEVE USERDATA SEGMENT THAT HAS USRNM='ROOM'      ****\n***********************************************************************\nICHAROOM ICHEACTN FIELD=USERDATA,TESTS=(ICHTROOM),MF=L\n*---------------------------------------------------------------------*\nICHTROOM ICHETEST FIELD=USRNM,FLDATA=(8,ROOMKEY),COND=EQ,MF=L\nROOMKEY  DC    CL8'ROOM'              SEGMENT IDENTIFIER\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  ACTION: RETRIEVE USERDATA SEGMENT THAT HAS USRNM='MSGCLASS'  ****\n***********************************************************************\nICHAMCLS ICHEACTN FIELD=USERDATA,TESTS=(ICHTMCLS),MF=L\n*---------------------------------------------------------------------*\nICHTMCLS ICHETEST FIELD=USRNM,FLDATA=(8,MCLSKEY),COND=EQ,MF=L\nMCLSKEY  DC    CL8'MSGCLASS'          SEGMENT IDENTIFIER\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  MSG1 ERROR MESSAGE:                                          ****\n****  THIS WTO PLIST IS COPIED INTO DYNAMIC STORAGE, AND THEN      ****\n****   ALTERED.  IN THIS WAY, THE CSECT CAN REMAIN RE-ENTRANT.     ****\n***********************************************************************\nMSG1     DS    0F                     WTO MESSAGE PLIST\n         DC    AL2(MSG1E-MSG1B)       - WTO LENGTH PARM\n         DC    BL2'1000000000000000'  - MCS FLAGS\nMSG1B    DC    C'$JES0201: '          - MESSAGE ID\n         DC    C'ICHRSV00 ERROR RC='\nMSG1RC   DC    CL2'00'                - RETURN-CODE\n         DC    C',R0='\nMSG1R0   DC    CL2'00'                - REASON-CODE\n         DC    C' JOB='\nMSG1JOB  DC    CL8' '                 - JOBNAME\n         DC    C' JOBNO='\nMSG1JBNO DC    CL4'0000'              - JOB NUMBER\n         DC    C' ID='\nMSG1USER DC    CL8' '                 - USERID\n         DC    BL2'0000000000000000'  - DESC=\n         DC    BL2'0100000000100000'  - ROUTCDE=(2,11)\nMSG1E    EQU   *                      END OF PLIST\nMSG1LEN  EQU   MSG1E-MSG1             LENGTH OF ENTIRE PLIST\n*---------------------------------------------------------------------*\nEND020   DS    0D                     END OF EXIT020 CSECT\n*=====================================================================*\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** EPILOGUE ***'\n         $MODEND ,\n*=====================================================================*\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** LOCAL DSECTS ***'\n***********************************************************************\n****  DYNAMIC WORKING-STORAGE:    (BASED R9)                       ****\n***********************************************************************\n#AREA    DSECT ,\n#GMFM    DS    F                      LENGTH OF THIS STORAGE AREA\n*---------------------------------------------------------------------*\n#F       DS    F                      FULL-WORD WORK\n#D       DS    D                      DOUBLE-WORD WORK\n#C       DS    C                      1-CHARACTER WORK\n*---------------------------------------------------------------------*\n#USERID  DS    0CL9                   USERID AREA:\n#USERIDL DS    AL1                    - LENGTH OF USERID\n#USERIDN DS    CL8                    - USERID\n*---------------------------------------------------------------------*\n#LOCATE  ICHEINTY LOCATE,MF=L,        RACF MANAGER PLIST AREA:         X\n               TYPE='USR',            - WE WANT 'USER' PROFILE         X\n               FLDEF=R0,              - REMOTE ICHEACTN LIST           X\n               ENTRY=R2,              - (R2) ADDR OF USERID AREA       X\n               WKAREA=R3              - (R3) ADDR OF ANSWER AREA\n#LOCATEL EQU   *-#LOCATE\n*---------------------------------------------------------------------*\n         DS    0F                     #WKAREA POINTERS:\n#PTRNAME DS    A                      - ADDR OF PGMRNAME UNIT\n#PTRROOM DS    A                      - ADDR OF ROOM UNIT\n#PTRMSGC DS    A                      - ADDR OF MSGCLASS UNIT\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n         DS    0D\n#WTOMSG  DS    CL128                  WTO MESSAGE AREA:\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  RACF WKAREA BUFFER:                                          ****\n***********************************************************************\nRACFAREA DS    0D                  RETURNED DATA FROM ICHEINTY:\nRACALENG DS    A                      LENGTH OF BUFFER AREA\nRACCNTL  DS    0XL30                  RESET AREA\nRACRBA   DS    XL6\nRACFLG1  DS    BL1\nRACRSV1  DS    XL1\nRACDUPCT DS    A\nRACRSV2  DS    XL8\nRACRLENG DS    F                      LENGTH OF RETURNED DATA\nRACDATA  DS    CL1024                 AREA FOR RETURNED FIELDS\nRACFEND  DS    0D                     END OF RACF RETURN BUFFER\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n#END     DS    0D                     END OF #AREA\n#SIZE    EQU   *-#AREA                SIZE OF #AREA\n*=====================================================================*\n         TITLE 'JES2 EXIT020 STC/TSU NAME ROOM AND MSGCLASS            X\n               *** SYSTEM DSECTS ***'\n***********************************************************************\n****  SYSTEM DSECTS:                                               ****\n***********************************************************************\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=YES     CVT:  SYS1.AMODGEN\n         ICHPRCVT ,                   RCVT: SYS1.MACLIB   (RACF)\n*=====================================================================*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES020S": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00?\\x00?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "FILE013"}, "text": "++ USERMOD(MJES020)  /*\n *********************************************************************\n *                                                                   *\n * USERMOD:  MJES020                                                 *\n * TITLE:    JES2 EXIT-20 SET ROOM AND PGMRNAME FOR TSU/STC          *\n *                                                                   *\n *-------------------------------------------------------------------*\n *                                                                   *\n * SYSMOD TYPE:         MODULE                                       *\n * TARGET ELEMENT NAME: JES020                                       *\n * LEVEL:               JES2 V-215                                   *\n *                                                                   *\n * VENDOR AND/OR COMPONENT:  MVS/XA                                  *\n *                                                                   *\n *-------------------------------------------------------------------*\n *                                                                   *\n * ABSTRACT:                                                         *\n *    JES EXIT 20 SET PGMRNAME ROOM AND MSGCLASS FOR                 *\n *    STARTED-TASKS AND TSO-LOGONS.  THIS EXIT WORKS IN              *\n *    CONJUNCTION WITH THE TSO 'SETUSER' COMMAND, AND                *\n *    RACF RELEASE 1.7 OR HIGHER.                                    *\n *                                                                   *\n *    PRIMARY SOURCE IS IN 'MVSSUPRT.Z038.USERSRC(JES020)'           *\n *                                                                   *\n *    THIS USERMOD WILL ASSEMBLE AND LINK JES020                     *\n *                                                                   *\n *                                                                   *\n * RELATED ELEMENTS AND DEPENDENCIES:                                *\n *   JES2 RELEASE 215.                                               *\n *   RACF RELEASE 1.7 OR HIGHER                                      *\n *   TSO 'SETUSER' COMMAND                                           *\n *   JES2PARM EXIT DEFINITION:                                       *\n *           LOAD=JES020                                             *\n *           EXIT020 ROUTINE=EXIT020,ENABLE,TRACE=NO                 *\n *                                                                   *\n * REQUIRED SMP DDNAMES:                                             *\n *    //AUSERMOD  DD   DSN=SYS1.DLIB.AUSERMOD,DISP=SHR               *\n *    //AUSERSRC  DD   DSN=SYS1.DLIB.AUSERSRC,DISP=SHR               *\n *    //USERSRC   DD   DSN=SYS1.TARG.USERSRC,DISP=SHR                *\n *    //LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR                     *\n *                                                                   *\n *                                                                   *\n *-------------------------------------------------------------------*\n * CHANGE LOG:                                                       *\n * 0000   11/26/86  MKH   INITIAL VERSION.                           *\n *                                                                   *\n *********************************************************************\n                                                                   */.\n++VER(Z038) FMID(USERMOD).\n++JCLIN.\n//JCLIN JOB (0000)\n//LKED     EXEC PGM=IEWL,REGION=512K,\n//             PARM='RENT,REUS,REFR'\n//SYSPRINT DD   SYSOUT=A\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(25,10))\n//AUSERMOD DD   DSN=SYS1.DLIB.AUSERMOD,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.TARG.LINKLIB,DISP=SHR\n//SYSLIN   DD   *\n   INCLUDE AUSERMOD(JES020)\n   ENTRY JES020\n  NAME JES020(R)\n/*\n++SRC(JES020) DISTLIB(AUSERSRC) TXLIB(USERSRC).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBACESS": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\xd4\\x01\\xd4\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 468, "newlines": 468, "modlines": 0, "user": "FILE013"}, "text": "         TITLE 'IOF JOBACESS INSTALLATION EXIT'\n*        THE PURPOSE OF THIS EXIT ROUTINE IS TO ALLOW EACH IOF\n*        INSTALLATION TO DEFINE ITS OWN RULES FOR ACCESSING AND\n*        MODIFYING JOBS FROM IOF. THE JAC PARM LIST THAT IS PASSED\n*        TO THIS ROUTINE CONTAINS INPUT DATA THAT CAN BE USED TO HELP\n*        MAKE THESE DECISIONS. THERE ARE SEVERAL DIFFERENT BASIC TYPE\n*        CALLS THAT ARE MADE TO JOBACESS. THE FIELD 'JACCALL' IN THE\n*        JAC INDICATES THE TYPE OF CALL.\n*\n*        JACCALL = 4 IMPLIES THAT JOBACESS IS BEING CALLED FROM IOF\n*        INITIALIZATION. ALL OF THE PARMS SUPPLIED BY (OR DEFAULTED\n*        FOR) THE USER ON THE IOF COMMAND (OR ON THE SPF INTERFACE\n*        PANEL) ARE PASSED IN THE FOLLOWING FIELDS IN THE JAC:\n*\n*        JACITYPE                 TYPE OF ELEMENT TO BE DISPLAYED\n*                                     (INPUT, GROUP, QUEUE, ETC.)\n*        JACISELN                 VALUE FROM 'SELECT' OPERAND\n*        JACISELP                 VALUE FROM 'VALUE' OPERAND\n*        JACISORT                 VALUE FROM 'SORT' OPERAND\n*        JACICLAS                 VALUE FROM 'INPUT' KEYWORD\n*        JACIFROM                 VALUE FROM 'FROMNODE' KEYWORD\n*        JACITO                   VALUE FROM 'TONODE' KEYWORD\n*        JACIXEQ                  VALUE FROM 'XEQNODE' KEYWORD\n*        JACUSIDL                 LENGTH OF USERID OPERAND\n*        JACUSID                  VALUE FROM 'USERID' OPERAND\n*        JACIALLJ                 'Y' => ALL JOBS, 'N' => NOT ALL JOBS\n*        JACJNAM                  JOBNAME SPECIFIED BY USER\n*        JACJBIB                  JOBID SPECIFIED BY USER\n*        JACDEST                  VALUE FROM 'DEST' OPERAND\n*        JACICURR (IN JACIFLAG)   'CURRENT' SPECIFIED\n*        JACIXTND  (IN JACIFLAG)  'EXTEND' SPECIFIED\n*\n*        THERE ARE THREE THINGS THAT MUST BE ACCOMPLISHED BY THIS\n*        INITIALIZATION (JACCALL = 4) CALL TO JOBACESS:\n*\n*        1. DETERMINE IF THIS IOF SESSION SHOULD CONTINUE\n*        2. CREATE THE 'SELSETUP' PARM LIST THAT IS TO BE USED TO\n*           PRODUCE THE JOB LIST.\n*        3. SET THE JACDALOW FIELD TO THE DEFAULT INITIAL ACCESS\n*           AUTHORIZATION FOR THE JOBS ON THE JOB LIST.\n*\n*\n*        JACCALL = 8 IMPLIES THAT JOBACESS IS BEING CALLED AFTER THE\n*        JCT FOR A JOB HAS BEEN READ. THIS GIVES JOBACESS A CHANCE TO\n*        ALTER THE CURRENT PERMISSION FLAGS FOR THE JOB (PASSED IN\n*        JACJALOW) BASED UPON INFORMATION FROM THE JOB'S JCT. THE\n*        ADDRESS OF THE JCT FOR THE JOB IS PASSED IN JACJCT. THIS IS\n*        THE ONLY TYPE JOBACESS CALL FOR WHICH THE JACJCT FIELD IS\n*        MEANINGFUL. THE JOB NAME AND JOBID FOR THE JOB ARE PASSED\n*        IN JACJOBN AND JACJOBI. THE VALUE JACUSER IS COPIED TO THE\n*        JACUSER FIELD FROM AN OFFSET IN THE JCT BASED UPON THE VALUE\n*        JMJCTACC IN THE JESCTL SOURCE MODULE. THIS IS CONVENIENT IF\n*        YOU REALLY ONLY NEED ONE FIELD FROM THE JCT IN ORDER TO MAKE\n*        YOUR DECISIONS (YOU WON'T NEED TO USE JACJCT AT ALL). YOU\n*        CAN CHANGE JMJCTACC IN JESCTL TO CAUSE A DIFFERENT FIELD TO\n*        BE PASSED TO THIS CALL. THE DEFAULT VALUE PASSED IS THE\n*        NOTIFY USERID FOR THE JOB.\n*            IF YOU WANT TO SAVE SOME INFORMATION FROM THE JCT SO THAT\n*        IT WILL BE AVAILABLE FOR SUBSEQUENT VALIDATION CALLS, YOU\n*        CAN SIMPLY ADD DATA FIELDS TO THE JWKDSECT AREA DEFINED\n*        BELOW. THE ADDRESS OF AN AREA OF SIZE JWKSIZE WILL BE PASSED\n*        TO THIS CALL IN JACJDATA AND ALSO TO ALL SUBSEQUENT\n*        VALIDATION CALLS FOR THIS JOB.\n*\n*        JACCALL = 12 IMPLIES THAT THE USER HAS REQUESTED A FUNCTION\n*        AND JOBACESS IS TO DETERMINE WHETHER THE USER IS ALLOWED TO\n*        PERFORM THE FUNCTION. THE JACJOBN AND JACJOBI FIELDS\n*        WILL ALWAYS BE FILLED IN. THE JACJALOW FIELD WILL CONTAIN\n*        THE CURRENT JOB PERMISSION FLAGS FOR THE JOB. THE JACJDATA\n*        FIELD WILL BE PRESENT IF DATA HAS BEEN SAVED THERE DURING\n*        A PREVIOUS 'JACCALL = 4' CALL TO JOBACESS. THIS ADDRESS\n*        SHOULD ALWAYS BE TESTED FOR ZERO BEFORE USING. SEE THE JAC\n*        DEFINITION BELOW BEGINNING AT LABEL JACPARMS FOR\n*        A DESCRIPTION OF ADDITIONAL INFORMATION AVAILABLE\n*        FOR SPECIFIC TYPES OF IOF FUNCTIONS.\n*\n*        JACCALL = 16 IMPLIES THAT IOF IS SHUTTING DOWN.\n*\n         EJECT\n*\n*        MOST OF THE IMPORTANT DECISIONS WITH RESPECT TO JOB ACCESS\n*        ARE MADE IN SUBROUTINES AND TABLES DEFINED IN THE SOURCE\n*        MEMBER JOBACOPY WHICH IS COPIED INTO THE BOTTOM OF THIS\n*        ASSEMBLY. THESE SUBROUTINES AND TABLES SHOULD BE EASIER TO\n*        MODIFY AND MAINTAIN SINCE THEY ARE OUT OF THE MAIN FLOW\n*        OF THE JOBACESS ROUTINE. IT IS INTENDED THAT ALL CHANGES\n*        TO JOBACESS CAN BE ACCOMPLISHED THROUGH MODIFICATIONS TO\n*        THE JOBACOPY MEMBER, BUT OF COURSE YOU CAN ALWAYS JUST\n*        MODIFY JOBACESS ALSO IF NEEDED. HOWEVER, THE INTERFACES\n*        TO THE JOBACOPY ROUTINES WILL CONTINUE TO BE SUPPORTED\n*        WHILE THE INTERNAL CONTROL STRUCTURE OF JOBACESS ITSELF\n*        MAY INDEED BE SUBJECT TO CHANGE. THIS JUST MEANS THAT IT\n*        WILL BE EASIER TO MAINTAIN YOUR MODIFICATIONS IF YOU CAN\n*        ACCOMPLISH THEM USING ONLY CHANGES TO JOBACOPY.\n         EJECT\nJOBACESS START\n         PRINT NOGEN\n         REGISTER\n         SAVE  (14,12)\n         LR    R12,R15\n         USING JOBACESS,R12\n         LR    R11,R1             ADDRESS OF JAC PARM LIST\n         USING JACDSECT,R11\n         SPACE\n         LA    R1,72(R13)         ADDR OF SAVE/WORK AREA         CCCC\n         ST    R1,8(R13)          CHAIN IT AS A SAVE AREA\n         ST    R13,4(R1)\n         LR    R13,R1\n         USING WRKDSECT,R13\n         SPACE\n         L     R10,JACPSCB        PSCB ADDRESS FOR USE BELOW\n         USING PSCB,R10\n         SPACE\n         LA    R0,JACJALOW        SET DEFAULT TO SET JACJALOW (MRGVECT)\n         ST    R0,JACPALOW        SET PTR TO 16 BYTE AREA\n         SPACE 3\n*        VECTOR ON THE TYPE OF CALL INDICATED IN JACCALL.\n         LH    R15,JACCALL\n         B     *(R15)\n         B     IOFINIT             4 => IOF SESSION INIT\n         B     JOBINIT             8 => JOB JCT JUST READ\n         B     VALIDATE           12 => VALIDATE USER FUNCTION\n         B     IOFDOWN            16 => IOF SHUTTING DOWN SESSION\n         EJECT\n*        IOF INITIALIZATION CALL TO JOBACESS. THERE ARE THREE THINGS\n*        THAT MUST BE ACCOMPLISHED BY THIS ROUTINE:\n*\n*        1. DETERMINE IF THIS IOF SESSION SHOULD CONTINUE.\n*        2. BUILD THE PARM LIST FOR THE 'SELSETUP' ROUTINE, WHICH\n*           WILL THEN BUILD THE PARM LIST TO CRATE THE JOB LIST.\n*        3. SET DEFAULT INITIAL ACCESS AUTHORIZATION FOR JOBS ON THE\n*           JOB LIST\n*\nIOFINIT  EQU   *\n         LA    R0,JACDALOW        SET JACDALOW (IN MRGVECT)\n         ST    R0,JACPALOW        SET POINTER TO 16 BYTE AREA\n         L     R8,JACSEL          ADDR OF PARM LIST FOR SELSETUP\n         USING SELDSECT,R8\n         SPACE\n*        ALLOW INSTALLATION TO VALIDATE ANY AND ALL PARMS BEFORE\n*        WE BEGIN ANY PROCESSING OF THE INPUT PARMS.\n         BAL   R9,CHEKPARM        GIVE INSTALLATION CHANCE TO OK\n         B     EXIT               +0 => FAIL IOF SESSION\n         SPACE 3\n*        FIRST WE WILL SET SELUSID TO THE VALUE (EITHER SPECIFIED\n*        OR DEFAULTED) FOR THE USERID FOR THIS SESSION, AND ALSO\n*        SET SELUIDL TO THE LENGTH OF THE USERID. SELUIDL IS A MAJOR\n*        CONTROL KEY IN THE PROCESSING BELOW. IF THIS ROUTINE SETS\n*        SELUIDL = 0, THEN THE JOBS FETCHED FOR THE JOB LIST WILL\n*        NOT BE RESTRICTED TO THOSE OWNED BY THIS USER. SELUIDL\n*        WILL ALWAYS BE INITIALLY SET NOT TO ZERO, BUT SEVERAL OF\n*        THE ROUTINES BELOW WILL SET IT TO ZERO IF THE USER IS\n*        AUTHORIZED TO LOOK AT ALL OF THE JOBS ON THE QUEUE.\n         MVC   SELUID,=CL8' '\n         MVC   SELUID(7),PSCBUSER  ALWAYS START WITH USER'S ACTUAL ID\n         MVC   SELUIDL,PSCBUSRL   AND LENGTH\n         CLI   SELUIDL,0          IS THE USERID NULL (TSO BATCH)\n         BNE   NOTNULL            NO - LEAVE IT ALONE\n         MVI   SELUIDL,7          YES - CONVERT TO 'WORTHLESS' ID\n         MVC   SELUID,=C'$#@$#@$#'         DONE\nNOTNULL  EQU   *\n         SPACE\n         CLI   JACUSIDL,0         DID USER SPECIFY 'USERID'\n         BE    NOTUSID            NO - ALL SET FOR NOW WITH SELUID\n         BAL   R9,CHEKUSER        YES - SEE IF THIS USER IS AUTH.\n*                                 TO ACCESS JOBS FOR THAT USER.\n         B     EXIT               +0 => NO - FAIL IOF SESSION\n         SPACE\n         MVC   SELUID,JACUSID     YES - SWITCH TO USER SUPPLIED USID\n         MVC   SELUIDL,JACUSIDL\nNOTUSID  EQU   *\n         SPACE 3\n*        PROCESS THE JOB NAME IF ENTERED BY THE USER.\n         MVC   SELJOBN,JACJNAM    COPY JOB NAME TO PARM LIST\n         CLI   SELJOBN,C' '       WAS A JOB NAME SPECIFIED\n         BE    NOTJOBN            NO - IGNORE JOB NAME CODE\n         BAL   R9,TRICKJOB        YES - SEE IF THIS IS A 'TRICK'\n*                                      JOB NAME.\n         B     NOTTRICK           +0 => NO - NORMAL JOB NAME\n         SPACE\n         BAL   R9,CHKTRICK        GO SEE IF GLOBAL ACCESS OK\n*                                 FOR JOBS IN 'TRICK' CATEGORY\n         SPACE\n         B     NOTJOBN            NOW THROUGH WITH JOB NAME\nNOTTRICK EQU   *\n         SPACE\n*        NORMAL JOB NAME SPECIFIED (NOT TRICK)\n         CLI   JACUSIDL,0         WAS A USERID SPECIFIED\n         BNE   *+4+4              YES - LEAVE USERID OWNERSHIP ALONE\n         MVI   SELUIDL,0          ELSE REMOVE RESTRICTION THAT THE JOB\n*                                 MUST BELONG TO THIS USER BASED UPON\n*                                 JQE CRITERIA. THIS IS NOT A PROBLEM,\n*                                 SINCE NO PERMISSIONS WILL BE GRANTED\n*                                 FOR THE JOB UNTIL 'JOBINIT' CALL\n*                                 WITH THE JCT READ BELOW.\n         SPACE\n         BAL   R9,CHEKCURR        SEE IF 'CURRENT' SPECIFIED\n         B     NOTJOBN            +0 => YES - NOW DONE WITH JOB NAME\n         SPACE\n*        NOT 'CURRENT' JOB\n         BAL   R9,CHEKJOBN        SEE IF USER OWNS JOB JUST BASED\n*                                 ON THE JOB NAME.\n         B     EXIT               +0 => NO - FAIL IOF SESSION\nNOTJOBN  EQU   *\n         SPACE 3\n*        INITIALIZE MORE FIELDS IN THE SELSETUP PARM LIST\n         MVC   SELJOBI,JACJBID    JOB ID OPERAND\n         MVC   SELDEST,JACDEST    DEST OPERAND\n         CLI   SELDEST,C' '       WAS 'DEST' SPECIFIED\n         BE    NOTDEST            NO\n         BAL   R9,CHEKDEST        YES - SEE IF USER AUTHORIZED TO\n*                                 CONTROL JOBS FOR THIS DEST.\n         B     EXIT               +0 => NO - FAIL THIS SESSION\n         SPACE\nNOTDEST  EQU   *\n         SPACE\n         MVC   SELTYPE,JACITYPE   'TYPE' OF JOBS DESIRED\n         MVC   SELSELN,JACISELN   'SELECT' CRITERIA\n         MVC   SELSELP,JACISELP   'VALUE' FOR 'SELECT' OPTION\n         MVC   SELSORT,JACISORT   'SORT' VALUE\n         MVC   SELCLASS,JACICLAS  JOB INPUT CLASS\n         MVC   SELFROM(3*L'SELFROM),JACIFROM  FROM, TO, XEQ NODES\n         SPACE 3\n         BAL   R9,NEEDALLJ        SEE IF WE NEED TO REMOVE USID REQ.\n         B     NOTALLJ            +0 => NO\n         SPACE\n         BAL   R9,CHEKALLJ        SEE IF USER OK FOR 'ALLJOBS'\n         B     NOTALLJ            +0 => NO - JUST IGNORE THE REQUEST\n         SPACE\n         BAL   R14,KILLUSID       TRY TO REMOVE USERID REQ.\nNOTALLJ  EQU   *\n         SPACE 3\n*        NOW ADD POSSIBLE 'OPERATOR' OR 'OWNER' ACCESS PRIVILEDGES\n*        TO THE JOBS SELECTED ABOVE.\n         BAL   R9,CHEKOPER        SEE IF 'OPERATOR' STATUS\n         SPACE\n         BAL   R9,CHEKOWNR        SEE IF 'OWNER' STATUS\n         SPACE 3\n         SPACE\n*        SET SELECTIVE FIELD DISPLAY CRITERIA (IF ANY)\n         BAL   R9,SETFIELD        SET SELGROUP IF NECESSARY\n         SPACE\n         B     OKEXIT             AND RETURN TO THE CALLER.\n         EJECT\n*        THE JCT FOR A JOB HAS JUST BEEN READ. THIS WILL NORMALLY\n*        OCCUR AS A JOB IS BEING SELECTED FOR OUTPUT REVIEW. IT CAN\n*        ALSO OCCUR IF A JOB FUNCTION (CANCEL, ROUTE, ETC.) IS REQUESTE\n*        BEFORE THE JOB HAS BEEN SELECTED FOR OUTPUT REVIEW. NOTE\n*        THAT THIS CALL CANNOT BE MADE FOR AN INPUT JOB. THE FIELD\n*        JACUSER HAS BEEN FILLED IN FROM THE OFFSET DEFINED AT\n*        JMJCTACC IN JESCTL. THE FIELD JACJCT POINTS TO THE JCT FOR\n*        THE JOB. THIS DEFAULT ROUTINE USES ONLY THE JACUSER FIELD\n*        (THE NOTIFY VALUE FROM THE JOB STATEMENT) TO TRY TO SEE\n*        IF THE PERMISSION FLAGS FOR THIS JOB SHOULD BE EXPANDED.\n*        IF THE JACUSER FIELD MATCHES THIS USER WE WILL ALLOW ALL\n*        FUNCTIONS FOR THIS JOB. IF YOU WANT TO SAVE SOME JCT DATA\n*        FOR LATER 'VALIDATE' CALLS JUST ADD DATA FIELDS TO THE\n*        JWKDSECT AREA BELOW AND THE ADDRESS OF THE AREA WILL BE\n*        PASSED (TO THIS AND ALL VALIDATE CALLS) IN JACJDATA.\n*\nJOBINIT  EQU   *\n         LA    R1,ALOWOWNR        INIT TO ADDING 'OWNER' PERMISSIONS\n         CLC   PSCBUSER,JACJUSER  DOES USERID MATCH NOTIFY USERID FROM\n*                                 THE JOB STATEMENT.\n         BE    MRGJALOW           YES - MERGE 'OWNER' PERMISSIONS\n         SPACE\n         LA    R2,JACJUSER        GO SEE IF CURRENT USER HAS SPECIAL\n*                                 PRIVILEDGES OVER USER WHO OWNS THIS\n*                                 JOB. PASS ADDR OF JOB OWNER'S ID.\n         SR    R1,R1              INIT TO NO NEW PERMISSIONS\n         BAL   R9,CHEKJCT         SEE IF THIS USER IS JOB OWNER\n         SPACE\nMRGJALOW EQU   *\n         LTR   R1,R1              ANY PERMISSIONS TO BE 'ADDED'\n         BZ    SKPMERGE           NO\n         BAL   R14,MRGVECT        YES - ADD NEW PERMISSIONS TO OLD MASK\nSKPMERGE EQU   *\n         SPACE\n         ICM   R15,B'1111',JACJDATA   IS JWKDSECT EMPTY\n         BZ    OKEXIT             YES - IGNORE IT\n         SPACE\n         BAL   R9,SAVEJCT         COPY ANY DATA FROM JCT TO JWK\n         B     OKEXIT\n         EJECT\n*        VALIDATE A FUNCTION REQUESTED BY A USER. THE FIELD JACFUNC\n*        CONTAINS THE INDEX OF THE FUNCTION DESIRED.\nVALIDATE EQU   *\n         LH    R15,JACFUNC        FUNCTION INDEX\n         BAL   R14,FCTFLAG        CONVERT INDEX TO FLAG BIT\n         N     R0,JACJALOW        SEE IF CORRESPONDING PERMISSION BIT\n*                                     IS ON\n         BNZ   OKFUNC             IT IS - NOW SEE IF OPERANDS ARE OK\n         SPACE\n*        THE FUNCTION BIT FOR THE REQUESTED FUNCTION IS NOT SET. THIS\n*        MEANS THAT THE FUNCTION HAS NOT BEEN ALLOWED YET. THE\n*        ROUTINES BELOW CAN PERFORM FURTHER CHECKING TO DETERMINE IF\n*        THE FUNCTION IS OK FOR THIS USER AND THIS JOB. AS A MINIMUM\n*        THE ROUTINES BELOW WILL NEED TO ASSOCIATE A USERID WITH\n*        THE JOB. THIS ROUTINE WILL ATTEMPT TO SET UP R2 POINTING\n*        TO THE USERID FOR THE OWNER OF THE JOB IN QUESTION. NOTE THAT\n*        JACJUSER   IS   NOT   VALID   ON   THIS   CALL   !!!!.\n*\n         SPACE\n         ICM   R15,B'1111',JACJDATA   HAS JCT DATA BEEN SAVED YET\n         BZ    TRYFAIL            NO - LEAVE R2 = 0\n         USING JWKDSECT,R15       YES - CHECK BIT TO MAKE SURE\n         TM    JWKFLAG,JWKFINIT   HAS JOBINIT FILLED IN JCT DATA\n         BZ    TRYFAIL            NO - LEAVE R2 = 0\n         LA    R2,JWKJUSER        YES - POINT TO USERID SAVED FROM JCT\n         DROP  R15\nTRYFAIL  EQU   *\n         SPACE\n         LTR   R2,R2              WAS A USERID FOUND FOR THE JOB\n         BNZ   *+4+4              YES - LEAVE R2 ALONE\n         LA    R2,=C'IBMUSER'     NO - SHOW 'IBMUSER' AS OWNER OF JOB\n         SPACE\n*        THE BIT FOR THE REQUESTED FUNCTION IS NOT ON. VECTOR ON THE\n*        TYPE OF FUNCTION REQUESTED SO THAT AN INSTALLATION CAN TAKE\n*        ACTION DEPENDING UPON THE FUNCTION REQUESTED.\n         LH    R15,JACFUNC        INDEX FOR FUNCTION DESIRED\n         SLL   R15,2              NO - NOW MULTIPLE OF 4\n         L     R15,FUNCTABL(R15)  ADR OF VALIDATION SUBROUTINE\n         BALR  R9,R15             INVOKE VALIDATION SUBROUTINE\n         B     FAILIT             +0 => FAIL REQUEST\n         B     OKFUNC             +4 => ALLOW REQUEST\n         EJECT\n*        FUNCTION IS ALLOWED FOR THIS JOB. SEE IF OPERANDS ARE.\nOKFUNC   EQU   *\n         LH    R15,JACFUNC        FUNCTION INDEX\n         LA    R15,FUNCMAP-1(R15)  GET OFFSET TO BIT MASK\n         SR    R1,R1\n         IC    R1,0(R15)          GOT OFFSET TO BIT MASK\n         LTR   R1,R1              IS IT ZERO\n         BZ    OKOPER             YES - NO OPERANDS TO VALIDATE\n         SPACE\n         L     R15,JACJALOW(R1)   NO - PICK UP OPERAND BIT MASK\n         L     R14,JACFPDV        ADDR OF PARM BIT MASK FROM USER\n         X     R15,=X'FFFFFFFF'   NOW HAS OPERANDS NOT ALOWED\n         N     R15,0(R14)         ANY 'NOT ALLOWED' OPERANDS\n         BZ    OKOPER             NO - ALLOW FUNCTION TO CONTINUE\n         SPACE\n*        FUNCTION IS ALLOWED BUT A RESTRICTED OPERAND HAS BEEN ENTERED.\n*        INVOKE A ROUTINE BASED UPON THE FUNCTION REQUESTED.\n         LH    R15,JACFUNC        FUNCTION INDEX\n         SLL   R15,2              NOW MULTIPLE OF 4\n         L     R15,FUNCTAB2(R15)  OPERAND FAILURE ROUTINE\n         BALR  R9,R15             INVOKE INSTALLATION VALIDATION RTN\n         B     FAILIT             +0 => FAIL THE REQUESTED FUNCTION\n         B     OKOPER             +4 => OK\n         EJECT\n*        THE FUNCTION IS OK AND SO ARE THE OPERANDS. NOW GIVE THE\n*        INSTALLATION ONE LAST CHANCE TO DENY THE REQUEST. THIS\n*        FACILITY IS MOST USEFUL FOR INSTALLING GLOBAL EXCEPTIONS\n*        (LIKE NO ACCESS TO SYSOUT DATA SETS OF CLASS X).\nOKOPER   EQU   *\n         LH    R15,JACFUNC        FUNCTION INDEX\n         SLL   R15,2              NOW MULT OF 4\n         L     R15,OKTABL(R15)    ADDR OF VALIDATION ROUTINE\n         BALR  R9,R15             SEE IF FUNCTION IS OK\n         B     FAILIT             +0 => NO - FAIL THE REQUEST\n         B     OKEXIT             +4 => OK\n         EJECT\n*\n*        FAIL THE REQUESTED FUNCTION BY RETURNING WITH RC=4\n*\nFAILIT   EQU   *\n         LA    R15,4              FAIL THE REQUEST\n         B     EXIT               RETURN TO CALLER\n         EJECT\n*        IOF IS SHUTTING DOWN THIS SESSION.\nIOFDOWN  EQU   *\n         B     OKEXIT\n         EJECT\n*        EXIT WITH ZERO RETURN CODE\nOKEXIT   EQU   *\n         SR    R15,R15\n         SPACE 3\n*        RETURN TO CALLER\nEXIT     EQU   *\n         L     R13,4(R13)         BACK UP TO CALLER'S SAVE AREA\n         RETURN (14,12),RC=(15)\n         EJECT\n*        CONVERT A FUNCTION INDEX PASSED IN R15 TO A PERMISSION\n*        BIT PROPERLY SHIFTED IN R0.\nFCTFLAG  EQU   *\n         BCTR  R15,0              BASE 1 TO 0\n         L     R0,=X'80000000'    VALUE FOR INDEX = 1\n         SRL   R0,0(R15)          POSITION TO PROPER BIT LOCATION\n         BR    R14                RETURN TO CALLER\n         SPACE 3\n*        CONVERT A VECTOR OF 1 BYTE PERMISSION INDICES INTO A MASK\n*        WORD CONTAINING THE CORRESPONDING PERMISSION BITS.\nMRGVECT  EQU   *\n         SR    R15,R15\n         L     R4,=X'80000000'    PRE-LOAD START VALUE\n         LA    R0,4               NUMBER OF BIT MASKS\n         LR    R5,R1              ADDR OF PTR TO 1ST VECTOR\n         L     R6,JACPALOW        PTR TO 1ST OUTPUT BIT MASK\nPTRLOOP  EQU   *\n         L     R1,0(R5)           ADDR OF NEXT VECTOR\n         SR    R3,R3              CLEAR ACCUMULATION REG\nVECTLOOP EQU   *\n         CLI   0(R1),32           IS INDEX LARGER THAN MAX\n         BH    VECTNEXT           YES - PROBABLY ZAPPED OUT - IGNORE\n         IC    R15,0(R1)          NEXT INDEX VALUE\n         BCTR  R15,0              BASE 1 TO 0\n         LR    R2,R4              START WITH BIT AT VALUE=1\n         SRL   R2,0(R15)          POSITION BIT PROPERLY\n         OR    R3,R2              AND ADD IT TO PREVIOUS MASK\nVECTNEXT EQU   *\n         LA    R1,1(R1)           NEXT BYTE IN VECTOR\n         CLI   0(R1),255          IS IT END OF VECTOR\n         BNE   VECTLOOP           NO - KEEP CONVERTING\n         O     R3,0(R6)           ADD BITS TO EXISTING BITS\n         ST    R3,0(R6)             AND STORE NEW MASK\n         LA    R6,4(R6)           NEXT OUTPUT BIT MASK\n         LA    R5,4(R5)           ADDR OF NEXT VECTOR PTR\n         BCT   R0,PTRLOOP         CONTINUE IF MORE TO PROCESS\n         BR    R14                YES - RETURN MASK IN R0\n         SPACE 3\n         SPACE 3\n*        THIS LENGTH FIELD IS USED TO DETERMINE THE EXISTENCE AND SIZE\n*        OF THE JWKDSECT AREA.\n         ENTRY JWKSAVE\nJWKSAVE  DC    AL2(JWKSIZE)\n         DC    AL2(WRKSIZE)                                      CCCC\n         SPACE 3\n         LTORG\n         EJECT\n*        SAVE AREA FOR DATA SAVED FROM JCT AT JACCALL = 8 ENTRY.\nJWKDSECT DSECT\nJWKJUSER DS    CL7                USERID FROM JCT\nJWKFLAG  DS    C\nJWKFINIT EQU   X'80'              JCT USERID COPIED TO JWKJUSER\n         SPACE\n*        JUST ADD YOUR DATA FIELDS TO JWKDSECT ENTENSION IN JOBACOPY\n         SPACE 3\n*        WORK AREA DSECT\nWRKDSECT DSECT\n         DS    18F                SAVE AREA\n*        JUST ADD YOUR DATA FIELDS TO WRKDSECT ENTENSION IN JOBACOPY\n         EJECT\n         PRINT GEN\n         JAC\n         EJECT\n         IOFFCT\n         EJECT\n         PDV\n         EJECT\n         JOV\n         EJECT\n         JMP\n         EJECT\n         DFN\n         EJECT\n         TFN\n         EJECT\n         SRPX\n         EJECT\n         SEL\n         EJECT\n         SPACE 3\n         PRINT NOGEN\n         IKJPSCB\n         SPACE 3\n         COPY  JOBACOPY\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBACOPY": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x04~\\x04~\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 1150, "newlines": 1150, "modlines": 0, "user": "FILE013"}, "text": "         EJECT\n         TITLE 'JOBACOPY COPY MEMBER - INSTALLATION MODIFIABLE CODE'\n*---------------------------------------------------------------------*\n*        THIS SOURCE MEMBER IS COPIED INTO THE BOTTOM OF THE IOF      *\n*        JOBACESS SOURCE MODULE AND CONTAINS ALL OF THE SUBROUTINES   *\n*        AND TABLES WHICH ARE USED TO MAKE THE ACCESS DECISIONS FOR   *\n*        THE JOBACESS MODULE. BY MODIFYING OR REPLACING THIS MEMBER   *\n*        YOU CAN INSTALL YOUR OWN SET OF JOB ACCESS RULES FOR IOF.    *\n*---------------------------------------------------------------------*\n* MODIFICATIONS:                                                      *\n*                                                                     *\n*   THIS SOURCE AS PROVIDED BY TRIANGLE SYSTEMS SOFTWARE FOR LOCAL    *\n*   TAILORING BY A CUSTOMER HAS BEEN MODIFIED WITH A RACF INTERFACE   *\n*   FOR AUTHORIZATION DETERMINATION.                                  *\n*                                                                     *\n*   NEEDED - RACF RESOURCE CLASSES:  $JOBNAME                         *\n*                                    $DESTID                          *\n*                                                                     *\n*              WHERE '$JOBNAME' REPRESENTS THE JES 'JOBNAMES'         *\n*            &       '$DESTID' IDENTIFIES PRINTERS, REMOTES, ETC.     *\n*                                                                     *\n*   NOTES:                                                            *\n*                                                                     *\n*     AUTHORITY IS DETERMINED BY A COMBINATION OF METHODS.            *\n*     TSO UADS IS CHECKED TO SEE IF THE USER HAS 'OPER' AUTH          *\n*     AND IF SO, IS PROVIDED AN AUTOMATIC LEVEL OF AUTHORITY.         *\n*     IN ADDITION, VARIOUS USER GROUPS ARE GIVEN GLOBAL AUTHORITY     *\n*     SINCE THEIR JOB FUNCTION REQUIRES SUCH(I.E. - PRODUCTION        *\n*     CONTROL)                                                        *\n*                                                                     *\n*     THE RACF INTERFACE PERFORMS RACROUTE/RACHECKS AGAINST           *\n*     CLASS($JOBNAME/$DESTID) TO DETERMINE THE LEVEL OF AUTHORITY     *\n*     THAT THE USER HAS AGAINST THE JOBS/DESTINATIONS HE IS TRYING    *\n*     TO READ/UPDATE/ALTER.                                           *\n*                                                                     *\n*     THE 'IOFCMD' MODULE MUST BE LINKED (AC=1) SINCE RACF            *\n*     REQUIRES THE AUTHORIZATION OR 'IOFCMD' MAY BE PLACED            *\n*     IN THE RACF AUTHORIZED CALLER TABLE.                            *\n*                                                                     *\n*                                                                     *\n*   AUTHORIZATION:                                                    *\n*                                                                     *\n*     READ   - ABILITY TO VIEW JOBS WITHIN THAT ENTITY                *\n*     UPDATE - ABILITY TO ROUTE, RELEASE, HOLD, ETC.                  *\n*     ALTER  - ABILITY TO CANCEL/PURGE HELD OUTPUT                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nJOBACESS CSECT\n         EJECT\n*        THIS SUBROUTINE DETERMINES IF THE CURRENT USER SHOULD\n*        BE GRANTED 'OPERATOR' AUTHORITY FOR JOBS SELECTED FOR THIS\n*        IOF SESSION.\n*\nCHEKOPER DS    0H\n         BAL   R14,ISITOPER       USE SEPARATE ROUTINE TO TELL\n         B     0(R9)              NO - NOT 'OPERATOR' USER\n         SPACE\n         LA    R1,ALOWOPER        YES - APPEND 'OPERATOR' PRIV.\n         BAL   R14,MRGVECT           TO PREVIOS PRIVILEDGES\n         BR    R9                 AND RETURN TO CALLER\n         EJECT\n*        DETERMINE IF THIS USER HAS 'OPERATOR' AUTHORITY\nISITOPER EQU   *\n         CLC   PSCBUSER(2),=C'PC' IS IT OPER (MCI DEFINITION)\n         BE    4(R14)\n         CLC   PSCBUSER(2),=C'PJ' IS IT OPER (MCI DEFINITION)\n         BE    4(R14)\n         CLC   PSCBUSER(2),=C'PB' IS IT OPER (MCI DEFINITION)\n         BE    4(R14)\n         CLC   PSCBUSER(2),=C'PA' IS IT OPER (MCI DEFINITION)\n         BE    4(R14)\n         TM    PSCBATR1,PSCBCTRL  WELL, IS IT 'OPERATOR' USER\n         BZR   R14                NO - RETURN TO +0\n         B     4(R14)             YES - RETURN TO +4\n         EJECT\n*        CHECK TO SEE IF THE CURRENT USER HAS SPECIAL PRIVILEDGES TO\n*        MANAGE THE JOBS WITH THE DESTINATION SPECIFIED IN THE\n*        'DEST' OPERAND OF IOF. WE WILL CALL RACF IN ORDER TO\n*        DETERMINE DESTINATION AUTHORITY.\n*\n*        INPUT REGISTERS TO THIS ROUTINE:\n*\n*        R11 POINTS TO THE JAC DSECT\n*        R10 POINTS TO THE SEL DSECT\n*        R9  IS THE RETURN REGISTER\n*\n*\nCHEKDEST DS    0H\n         BAL   R14,ISITOPER       SEE IF 'OPERATOR' USER\n         B     *+4+4              +0 => NO - CONTINUE\n         B     OKDEST             +4 => YES - ALLOW ACCESS TO JOBS\n         SPACE\n         XR    R1,R1              CLEAR OUT PERMISSIONS\n         L     R3,CVTPTR          LOAD ADDRESS OF CVT\n         USING CVT,R3\n         L     R3,CVTSMCA         LOAD ADDRESS OF SMCA\n         USING SMCABASE,R3\n         MVC   RACDEST(4),SMCASID COPY SMF ID TO USER\n         DROP  R3\n         MVI   RACDEST+4,X'4B'    PERIOD AS DELIMITER\n         MVC   RACDEST+5(8),JACDEST\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL  SET PATTERN FOR MACRO\n         LA    R4,RACDEST         COPY THE DEST POINTER\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS1,ATTR=READ,                               X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK RC\n         BNZ   0(R9)              +0 => NO - FAIL REQUEST\nOKDEST   EQU   *\n         BAL   R14,KILLUSID       REMOVE USERID RESTRICTION\n         SPACE\n         LA    R1,ALOWDEST        AND GRANT 'DEST' PERMISSIONS\n         BAL   R14,MRGVECT        DONE\n         B     4(R9)              +4 => YES - ALLOW SESSION\n         EJECT\n*        THE USER ENTERED 'IOF * USERID(XXXXX)' (OR SPF EQUIVALENT).\n*        CHECK TO SEE IF THE CURRENT USER HAS SPECIAL PRIVILEDGES\n*        TO CONTROL THE JOBS OF THE USER WHOSE USERID IS JACUSID.\n*        WE WILL CALL RACF TO DETERMINE IF THE USER HAS AUTHORITY\n*        OVER JOBS BEGINNING 'USERID*'.\n*\n*        INPUT REGISTERS TO THIS ROUTINE:\n*\n*        R11 POINTS TO THE JAC DSECT\n*        R9  IS THE RETURN REGISTER\n*\n*\nCHEKUSER DS    0H\n         BAL   R14,ISITOPER       IS THIS 'OPERATOR' USER\n         B     *+4+4              +0 => NO - CONTINUE\n         B     4(R9)              +4 => YES - ALLOW SESSION\n         SPACE\n         XR    R1,R1              CLEAR OUT PERMISSION VECTOR\n         MVI   RACUSID,X'40'      CLEAR OUT RACF ENTITY NAME\n         MVC   RACUSID+1(7),RACUSID\n         MVC   RACUSID(7),JACUSID MOVE USERID INTO FIELD\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL  SET PATTERN FOR MACRO\n         LA    R4,RACUSID         POINT TO RACF ENTITY NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=READ,                               X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK RC\n         BNZ   0(R9)              +0 => NO - FAIL REQUEST\nOKUSER   EQU   *\n         B     4(R9)              +4 => YES - ALLOW SESSION\n         EJECT\n*        USER ENTERED IOF JOBNAME (OR IOF JOBNAME(JOBID)). IF THE\n*        JOB NAME BEGINS WITH THE USER'S USERID WE WILL ALLOW ALL\n*        FUNCTIONS. IF NOT, WE WILL CHECK RACF TO DETERMINE IF THE\n*        USER HAS AUTHORITY TO THE JOBNAME.\n*\n*        INPUT REGISTERS TO THIS ROUTINE:\n*\n*        R11 POINTS TO THE JAC DSECT\n*        R9  IS THE RETURN REGISTER\n*\n*\nCHEKJOBN EQU   *\n         BAL   R14,ISITOPER       IS THIS 'OPERATOR' USER\n         B     *+4+4              +0 => NO - CONTINUE\n         B     4(R9)              +4 => YES - ALLOW SESSION\n         SPACE\n         XR    R1,R1              CLEAR OUT PERMISSION VECTOR\n         SR    R14,R14\n         IC    R14,PSCBUSRL       LENGTH OF USERID\n         LTR   R14,R14            IS IT NULL (TSO BATCH)\n         BZ    CHEKJOB2           YES - NO POSSIBLE MATCH\n         BCTR  R14,0              MINUS 1\n         EX    R14,CLCUSR         SEE IF JOBNAME STARTS WITH USERID\n         BNE   CHEKJOB2           NO - CHECK RACF\n         LA    R1,ALOWOWNR        YES - ALLOW 'OWNER' PERMISSIONS\n         BAL   R14,MRGVECT        AND APPEND TO PREVIOUS\n         B     4(R9)              +4 => YES - ALLOW SESSION\nCLCUSR   CLC   JACJNAM(*-*),PSCBUSER\n         SPACE\nCHEKJOB2 MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJNAM         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=READ,                               X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK RC\n         BNZ   0(R9)              +0 => NO - FAIL REQUEST\nOKJOBN   EQU   *\n         B     4(R9)              +4 => YES - ALLOW SESSION\n         EJECT\n*        JCT FOR THE JOB HAS BEEN READ.\n*        CHECK TO SEE IF THE CURRENT USER HAS SPECIAL PRIVILEDGES\n*        TO CONTROL THE JOBS OF THE USER WHOSE USERID ADDRESS IS PASSED\n*        TO THIS ROUTINE IN R2. WE WILL SEARCH AN INSTALLATION DEFINED\n*        TABLE IN CSECT USIDTABL (SEE SAMPLE SOURCE MEMBER USIDTABL).\n*\n*        INPUT REGISTERS TO THIS ROUTINE:\n*\n*        R11 POINTS TO THE JAC DSECT\n*        R2  HAS THE ADDRESS OF THE USERID IN THE JCT\n*        R9  IS THE RETURN REGISTER\n*\n*        OUTPUT REGISTERS:\n*\n*        R1 = ADDRESS OF A PERMISSION VECTOR TO BE ADDED (OR'ED)\n*        WITH JACJALOW TO FORM A NEW JACJALOW. THIS ALLOWS YOU TO\n*        EXPAND THE PERMISSIONS FOR A SPECIFIC JOB BASED UPON DATA\n*        CONTAINED IN THE JOB'S JCT.\n*\nCHEKJCT  DS    0H\n         XR    R1,R1              START WITH NO PERMISSIONS\n         BR    R9                 RETURN TO CALLER\n         EJECT\n*        COPY ANY DESIRED JCT DATA TO THE JWK DSECT SO THAT IT WILL\n*        BE AVAILABLE FOR VALIDATE CALLS. ALTHOUGH THIS DEFAULT CODE\n*        WILL ONLY SAVE JACJUSER FROM THE JCT, YOU CAN USE JACJCT TO\n*        ACCESS THE JCT FOR THE JOB, ADD FIELDS TO THE JWK DSECT\n*        BELOW, AND THEN SAVE ADDITIONAL JCT DATA INTO THE JWK DSECT.\n*\n*        INPUT PARMS:\n*\n*        R15 POINTS TO A DATA AREA WHERE YOU CAN SAVE JCT DATA FOR\n*            THE JOB. THIS IS NECESSARY SINCE THE JCT WILL NOT BE\n*            AVAILABLE DURING 'VALIDATE' CALLS LATER. YOU CAN ADD MORE\n*            VARIABLES TO THE JWK AREA BY JUST EXPANDING THE JWKDSECT\n*            AS PROVIDED BELOW.\n*        JACJCT POINTS TO THE JCT FOR THE CURRENT JOB.\n*        JACJUSER CONTAINS THE USERID FROM THE JCT. SEE SOURCE MEMBER\n*                 JESEQUAT TO REDEFINE THE VALUE PASSED IN JACJUSER.\n*\nSAVEJCT  DS    0H\n         USING JWKDSECT,R15\n         MVC   JWKJUSER,JACJUSER  JUST COPY USERID FROM JCT\n         SPACE\n         L     R14,=V(JMJQE#US)   ADDR OF OFFSET TO JQE USERID\n         LH    R2,0(R14)          OFFSET INTO JQE FOR USERID\n         LTR   R2,R2              IS THERE ONE\n         BZ    NOTINJQE           NO - INSTALLATION DOES NOT HAVE MOD\n         A     R2,JACJQE          ADDR OF USERID IN JQE FOR JOB\n         MVC   JWKJUSER,0(R2)     USE JQE USERID INSTEAD OF JCT USID\nNOTINJQE EQU   *\n         SPACE\n         OI    JWKFLAG,JWKFINIT   AND MARK DATA AS SAVED\n         DROP  R15\n         BR    R9                 RETURN TO CALLER\n         EJECT\n*        LOOK TO SEE IF THE JOB NAME SPECIFIED IN JACJNAM IS A\n*        'SPECIAL' JOB NAME THAT IS ACTUALLY KEYED TO A SPECIFIC\n*        CATEGORY OF JOBS. THE TABLE WHICH DEFINES THESE JOB NAMES\n*        IS NAMED 'XFORMTAB' AND IS CONTAINED IN THE 'SELSETUP'\n*        ASSEMBLY. THIS ROUTINE IS SUPPOSED TO DETERMINE IF THIS IS\n*        ONE OF THE 'TRICK' JOB NAMES.\nTRICKJOB EQU   *\n         CLI   JACJNAM,C' '       IS THERE A JOB NAME AT ALL\n         BE    0(R9)              NO - +0 RETURN IMPLIES NOT 'TRICK'\n         SPACE\n         L     R15,=V(XFORMTAB)   ADDR OF 'TRICK' JOB TABLE\n         USING TFNDSECT,R15\nTRIKLOOP EQU   *\n         CLC   TFNNAME,JACJNAM    IS THIS A MATCH\n         BE    4(R9)              YES - +4 RETURN IMPLIES 'YES'\n         TM    TFNFLAG,TFNFLAST   NO - IS THIS LAST ENTRY\n         BO    0(R9)              YES - +0 RETURN IMPLIES NOT 'TRICK'\n         LA    R15,TFNLEN(R15)    NO - NEXT TABLE ENTRY\n         B     TRIKLOOP           CONTINUE SCAN TIL MATCH OR END\n         DROP  R15\n         EJECT\n*        DETERMINE IF THIS USER IS AUTHORIZED TO USE ONE OF THE\n*        'TRICK' JOB NAMES WITHOUT BEING RESTRICTED TO ONLY THOSE\n*        JOBS AUTHORIZED TO HIS USERID. IF SO, THEN ALLOW OPERATOR\n*        PERMISSIONS AND REMOVE THE USERID LIMITATION.\nCHKTRICK EQU   *\n         BAL   R14,ISITOPER       IS THIS 'OPERATOR' USER\n         B     0(R9)              +0 => NO - DO NOT ALLOW 'GLOBAL'\n         SPACE\n         BAL   R14,KILLUSID       REMOVE USERID RESTRICTION\n         SPACE\n         LA    R1,ALOWOPER        AND GRANT OPERATOR PERMISSIONS\n         BAL   R14,MRGVECT        DONE\n         BR    R9                 +0 => YES - ALLOW SESSION\n         EJECT\n*        CHECK TO SEE IF THE JOBNAME WAS SUPPLIED BY SPECIFYING THE\n*        'CURRENT' OPERAND OF IOF. IF SO, THEN THE ACTUAL JOB NAME\n*        AND JOB ID WILL HAVE BEEN FILLED IN AND WE SHOULD ALLOW\n*        OWNER PERMISSIONS AND REMOVE THE USERID LIMITATION. THE\n*        BASIS FOR THIS IS THAT ANY JOB SHOULD BE ALLOWED TO INVOKE\n*        IOF TO LOOK AT ITSELF.\nCHEKCURR EQU   *\n         TM    JACIFLAG,JACICURR  'CURRENT' SPECIFIED\n         BZ    4(R9)              NO - +4 => NOT 'CURRENT'\n         SPACE\n         MVI   SELUIDL,0          YES - REMOVE USERID LIMITATION\n         LA    R1,ALOWOWNR        AND ALLOW OWNER PERMISSIONS\n         BAL   R14,MRGVECT           DONE\n         B     0(R9)              +0 RETURN IMPLIES 'CURRENT' SPECIFIED\n         EJECT\n*        USER HAS REQUESTED 'ALLJOBS'. SEE IF THIS USER IS AUTHORIZED\n*        TO DISPLAY JOBS THAT DO NOT 'BELONG' TO HIM.\nCHEKALLJ EQU   *\n         BAL   R14,ISITOPER       IS THIS AN 'OPERATOR' USER\n         B     0(R9)              +0 => NO - IGNORE THE REQUEST\n         SPACE\n         B     4(R9)              OK RETURN\n         EJECT\n*        CHECK TO SEE IF THE USER HAS ENTERED ANY OPERANDS THAT\n*        IMPLY THAT THE USERID RESTRICTION SHOULD BE REMOVED.\n*        IF SO, THE 'CHEKALLJ' ROUTINE WILL BE CALLED (BY OUR CALLER)\n*        TO VERIFY THAT THE USER IS INDEED AUTHORIZED.\nNEEDALLJ EQU   *\n         CLI   JACIALLJ,C'Y'      ARE ALL JOBS 'FORCED'\n         BE    4(R9)              YES - NEED TO REMOVE USERID REQ.\n         CLI   SELUIDL,0          USERID ALREADY REMOVED\n         BER   R9                 YES - NO NEED TO CHECK FURTHER\n         SPACE\n         CLC   SELTYPE,=CL8'ALL'  IS THIS 'SIMPLE' IOF SESSION\n         BNE   4(R9)              NO - TRY TO REMOVE USERID REQ.\n         SPACE\n         TM    SELCLASS,X'BF'     INPUT CLASS SPECIFIED\n         BNZ   4(R9)              YES - TRY TO REMOVE USERID REQ.\n         TM    SELDEST,X'BF'      HOW ABOUT 'DEST'\n         BNZ   4(R9)              YES - TRY TO REMOVE USERID REQ.\n         TM    SELFROM,X'BF'      HOW ABOUT 'FROM'\n         BNZ   4(R9)              YES - TRY TO REMOVE USERID REQ.\n         TM    SELTO,X'BF'        HOW ABOUT 'TO'\n         BNZ   4(R9)              YES - TRY TO REMOVE USERID REQ.\n         TM    SELXEQ,X'BF'       HOW ABOUT 'XEQ'\n         BNZ   4(R9)              YES\n         TM    SELSELN,X'BF'      HOW ABOUT 'SELECT'\n         BNZ   4(R9)              YES\n         SPACE\n         BR    R9                 SIMPLE SESSION - LEAVE USERID REQ.\n         EJECT\n*        INSTALLATION EXIT ROUTINE TO COMPLETELY EXAMINE ANY INPUT\n*        PARMS FOR THIS SESSION AND FAIL THE SESSION IF NECESSARY.\nCHEKPARM EQU   *\n         B     4(R9)              ALLOW ALL PARMS AS OK\n         EJECT\n*\nCHEKOWNR EQU   *\n         CLI   SELUIDL,0          IS USERID LIMITATION STILL IN EFFECT\n         BER   R9                 NO - JUST RETURN\n         CLC   PSCBUSER,SELUID    AND IS IT THIS USER\n         BNER  R9                 NO - JUST RETURN\n         LA    R1,ALOWOWNR        YES - GRANT OWNER PERMISSIONS\n         BAL   R14,MRGVECT           DONE\n         BR    R9                 RETURN TO CALLER\n         EJECT\n*        THIS ROUTINE WILL SET THE 'SELGROUP' BYTE TO INDICATE\n*        ANY SPECIAL DISPLAY FIELDS THAT SHOULD BE PRESENTED TO THIS\n*        USER. EACH BIT IN 'SELGROUP' REPRESENTS A SINGLE GROUP OF\n*        DISPLAY FIELDS. IF THE GROUP OPERAND OF A #FIELD MACRO\n*        (IN THE FORMJQE, FORMJOE, ETC. ASSEMBLIES) IS SPECIFIED\n*        THEN THE CORRESPONDING BIT IN THE SELGROUP BYTE MUST BE SETR\n*        IN ORDER FOR THAT FIELD TO APPEAR ON THE DISPLAY.\n*\n*        AS DISTRIBUTED, IOF ONLY USES ONE SPECIAL GROUP OF FIELDS,\n*        AND THAT IS THE SET OF DISPLAY FIELDS FROM A JOB'S JCT CONTROL\n*        BLOCK. TO SEE THE JCT FIELDS, THE USER ENTERS THE 'EXTEND'\n*        COMMAND ON EITHER THE 'JOB LIST' OR 'OUTPUT GROUP' DISPLAY.\n*        ONLY OPERATOR USERS ARE ALLOWED TO SEE THE JCT FIELDS. IF\n*        YOU WANT TO CHANGE THAT, JUST CHANGE THE CODE BELOW.\nSETFIELD      EQU                *\n         TM    JACIFLAG,JACIXTND  DID USER REQUEST EXTEND\n         BZ    NOTXTND            NO\n         SPACE\n         BAL   R14,ISITOPER       IS THIS 'OPERATOR' USER\n         B     NOTXTND            +0 => NO - QUIETLY IGNORE THE REQUEST\n         SPACE\n         MVI   SELGROUP,SELGRP1   YES - SET 'EXTEND' GROUP\nNOTXTND  EQU   *\n         BR    R9\n         EJECT\n*        REMOVE THE USERID REQUIREMENT FOR ELEMENTS DISPLAYED DURING\n*        THIS TSO SESSION. DO NOT REMOVE REQUIREMENT IF USER ENTERED\n*        'MYJOBS'  (OR 'NO' IN ALLJOBS ISPF FIELD) OR IF THE USER\n*        EXPLICITLY REQUESTED A USERID.\nKILLUSID EQU   *\n         CLI   JACIALLJ,C'N'      'MYJOBS' SPECIFIED\n         BER   R14                YES - DON'T REMOVE USERID REQ.\n         CLI   JACUSIDL,0         NO - DID USER SUPPLY A USERID\n         BNER  R14                YES - DON'T REMOVE USERID REQ.\n         SPACE\n         MVI   SELUIDL,0          KILL USERID REQ. FOR THIS SESSION\n         BR    R14\n         EJECT\n*        THE ROUTINES BELOW ARE THE VALIDATION SUBROUTINES THAT ARE\n*        CALLED WHEN AN IOF FUNCTION HAS BEEN REQUESTED BY THE USER\n*        BUT THE SPECIFIED FUNCTION HAS NOT YET BEEN AUTHORIZED FOR\n*        THE USER. THESE ROUTINES CAN JUST FAIL THE REQUEST OR USE\n*        ADDITIONAL INFORMATION TO TRY TO MAKE A MORE REFINED\n*        DECISION. ON INPUT TO ALL OF THESE ROUTINES:\n*\n*        R2   ADDR OF USERID WHO OWNS THIS JOB\n*        R9   RETURN REGISTER\n*             RETURN TO 0(R9) IMPLIES FAIL THE REQUEST\n*             RETURN TO 4(R9) IMPLIES ALLOW THE REQUEST\n*\n*        ADDITIONAL INPUT VALUES ARE DEFINED IN THE COMMENTS FOR\n*        EACH FUNCTION.\n*\n         SPACE 3\n*        VECTOR TABLE FOR INDIVIDUAL VALIDATION ROUTINES\nFUNCTABL DS    0F\n         DC    A(FAILIT)          0  UNDEFINED FUNCTION\n         DC    A(JCANCEL)         1  CANCEL A JOB\n         DC    A(JRELEASE)        2  RELEASE HELD DATA SETS FOR JOB\n         DC    A(JROUTE)          3  ROUTE A JOB\n         DC    A(JSELECT)         4  SELECT A JOB FOR OUTPUT REVIEW\n         SPACE\n         DC    A(DBROWSE)         5  SELECT A DATA SET FOR BROWSE\n         DC    A(DPRINT)          6  PRINT A DATA SET TO SYSOUT\n         DC    A(DRELEASE)        7  RELEASE A HELD SYSOUT DATA SET\n         DC    A(DCANCEL)         8  CANCEL A HELD SYSOUT DATA SET\n         DC    A(DSAVE)           9  SNAP DATA TO EXTERNAL DATA SET\n         DC    A(DMODIFY)         10 MODIFY ATTR OF HELD SYSOUT\n         DC    A(DDISPLAY)        11 DISPLAY DATA SET ON MENU\n         SPACE\n         DC    6A(FAILIT)         12-17  UNDEFINED FUNCTIONS\n         DC    A(JSET)            18  SET ATTRIBUTES FOR A JOB\n         DC    A(JOCAN)           19 CANCEL A JOE\n         DC    A(JOSET)           20 SET VALUES FOR A JOE\n         DC    4A(FAILIT)         21-24\n         SPACE\n         DC    A(IHOLD)           25 FCTJHOLD  =>  HOLD A JOB\n         DC    A(IRELEASE)        26 FCTJRLSE  =>  RELEASE A JOB\n         DC    A(IRESTART)        27 FCTJRSTR  => RESTART JOB\n         DC    A(ICOMMAND)        28 JCTJMVSC  => MVS OR JES2 COMMAND\n         SPACE\n         DC    4A(FAILIT)         29-32  UNDEFINED FUNCTIONS\n         EJECT\n*        ROUTINES INVOKED BY 'VALIDATE' WHEN THE REQUESTED FUNCTION\n*        IS ALLOWED BUT ONE OR MORE OPERANDS (PARMS) SPECIFIED BY\n*        THE USER ARE NOT ALLOWED.\n         SPACE\nFUNCTAB2 DS    0F\n         DC    A(FAILIT)          0  INVALID\n         DC    A(FAILIT)          1  CANCEL JOB (NO PARMS)\n         DC    A(JRELEAS2)        2  RELEASE HELD SYSOUTS FOR JOB\n         DC    A(JROUTE2)         3  ROUTE A JOB\n         DC    A(FAILIT)          4  SELECT A JOB (NO PARMS)\n         SPACE\n         DC    A(FAILIT)          5  BROWSE (NO PARMS)\n         DC    A(DPRINT2)         6  PRINT DATA SET\n         DC    A(DRELEAS2)        7  RELEASE A SYSOUT DATA SET\n         DC    A(FAILIT)          8  CANCEL DATA SET (NO PARMS)\n         DC    A(DSAVE2)          9  SNAP\n         DC    A(DMODIFY2)        10 MODIFY DATA SET\n         DC    A(FAILIT)          11 DISPLAY DATA SET ON MENU\n         SPACE\n         DC    6A(FAILIT)         12-17\n         DC    A(JSET2)           18 SET JOB ATTRIBUTES\n         DC    A(FAILIT)          19 CANCEL A JOE (NO PARMS)\n         DC    A(JOSET2)          20 SET JOE ATTRIBUTES\n         DC    4A(FAILIT)         21-24\n         SPACE\n         DC    A(FAILIT)          25 HOLD A JOB (NO PARMS)\n         DC    A(FAILIT)          26 RELEASE A JOB (NO PARMS)\n         DC    A(FAILIT)          27 RESTART A JOB\n         DC    A(FAILIT)          28 ENTER AN MVS OR JES2 COMMAND\n         SPACE\n         DC    4A(FAILIT)\n         EJECT\n*        ROUTINES INVOKED AS A LAST CHANCE FOR INSTALLATION TO\n*        FAIL A PARTICULAR FUNCTION EVEN AFTER PERMISSION HAS BEEN\n*        GRANTED FOR THE FUNCTION AND ITS OPERANDS.\nOKTABL   DS    0F\n         DC    A(FAILIT)          0  INVALID FCT\n         DC    A(OCANCEL)         1  JOB CANCEL\n         DC    A(ORELEASE)        2  JOB HELD SYSOUT RELEASE\n         DC    A(OROUTE)          3  JOB ROUTE\n         DC    A(OSELECT)         4  JOB SELECT\n         SPACE\n         DC    A(ODBROWSE)        5  DATA SET BROWSE\n         DC    A(ODPRINT)         6  DATA SET PRINT\n         DC    A(ODRLSE)          7  DATA SET RELEASE\n         DC    A(ODCANCEL)        8  DATA SET CANCEL\n         DC    A(ODSAVE)          9  DATA SET SNAP\n         DC    A(ODMODIFY)        10 DATA SET MODIFY\n         DC    A(ODDSPLAY)        11 DISPLAY DATA SET ON MENU\n         SPACE\n         DC    6A(FAILIT)         12-17 INVALID\n         DC    A(OJSET)           18 JOB ATTR SET\n         DC    A(OJOCAN)          19 JOE CANCEL\n         DC    A(OJOSET)          20 JOE SET\n         DC    4A(FAILIT)         21-24 INVALID\n         SPACE\n         DC    A(OIHOLD)          25 JOB HOLD\n         DC    A(OIRLSE)          26 JOB RLSE\n         DC    A(OIRSTRT)         27 JOB RESTART\n         DC    A(OICOMAND)        28 MVS/JES2 COMMAND\n         DC    4A(FAILIT)         29-32 INVALID\n         EJECT\n*\n*        THE INDIVIDUAL FUNCTION VALIDATION ROUTINES BELOW ARE FOR THOS\n*        FUNCTIONS THAT AFFECT AN ENTIRE JOB (CANCEL, ROUTE, ETC.).\n*\n         SPACE 3\n*\n*        CANCEL A JOB\n*\nJCANCEL  EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=ALTER,                              X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\n*\n*        RELEASE ALL HELD SYSOUT DATA SETS FOR A JOB\n*\nJRELEASE EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME         **\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=UPDATE,                             X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         SPACE\nJRELEAS2 EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         EJECT\n*\n*        CHANGE THE PRINT AND PUNCH ROUTE FOR A JOB\n*\nJROUTE   EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=UPDATE,                             X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         SPACE\nJROUTE2  EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         EJECT\nJSELECT  EQU  *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=READ,                               X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\nJSET     EQU   *\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         SPACE\nJSET2    EQU   *\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\n*\n*        THE INDIVIDUAL FUNCTION VALIDATION ROUTINES BELOW ARE FOR THOS\n*        FUNCTIONS THAT AFFECT ONLY A SINGLE SYSOUT DATA SET (BROWSE,\n*        CANCEL, ETC.). NOTE THAT THESE ROUTINES CAN ONLY BE CALLED IF\n*        THE USER HAS BEEN GRANTED PERMISSION TO SELECT THE JOB FOR\n*        OUTPUT REVIEW BUT THE SPECIFIC DATA SET FUNCTION HAS NOT\n*        BEEN AUTHORIZED BY TURNING ON THE JACJALOW BIT FOR THE\n*        FUNCTION.\n*\n*        JACOPDV POINTS TO THE PDV FOR THE DATA SET. THE PDV CONTAINS\n*        ALL THE SYSOUT ATTRIBUTES FOR A DATA SET. IF YOU WANT TO\n*        LIMIT ACCESS BY CLASS, FORMS, OR OTHER ATTRIBUTES YOU SHOULD\n*        NOT GRANT DATA SET FUNCTIONS (BROWSE, RELEASE, ETC.) IN THE\n*        DEFAULT 'ALL' PERMISSIONS GRANTED AT IOFINIT AND JOBINIT ABOVE\n*\n*        THIS WILL CAUSE THE DATA SET FUNCTION ROUTINES BELOW TO BE\n*        CALLED. THEY CAN THEN MAKE THE DETERMINATION OF WHETHER THE\n*        SPECIFIC FUNCTION SHOULD BE ALLOWED BASED UPON THE VALUES IN\n*        THE PDV FOR THE SPECIFIC DATA SET.\n*\nDRELEASE EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME         **\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=UPDATE,                      **     X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         SPACE\nDRELEAS2 EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         EJECT\n*\n*        CANCEL A HELD SYSOUT DATA SET\n*\n*        JACOPDV POINTS TO THE PDV FOR THE DATA SET TO BE CANCELLED.\n*\nDCANCEL  EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=ALTER,                              X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\n*\n*        MODIFY ATTRIBUTES OF A SYSOUT DATA SET.\n*\n*        JACOPDV POINTS TO PDV FOR DATA SET TO BE MODIFIED.\n*        JACPPDV POINTS TO 'PARM' PDV CONTAINING VALUES SUPPLIED\n*           BY THE USER ON THE MODIFY FUNCTION.\n*        JACFPDV POINTS TO A BIT MASK INDICATING WHICH PARMS WERE\n*           SUPPLIED BY THE USER (AND ARE CONTAINED IN JACPPDV PDV).\n*\nDMODIFY  EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=UPDATE,                             X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         SPACE\nDMODIFY2 EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         EJECT\n*\n*        THE FOLLOWING DSET FUNCTIONS ARE ALWAYS AUTHORIZED\n*        AS THEY REQUIRE SELECTION.  PREVIOUS SELECTION\n*        READ AUTHORITY.  THESE FUNCTIONS REQUIRE READ\n*        AUTHORITY.  THEREFORE, THESE FUNCTIONS ARE AUTHORIZED\n*\n*        NOTE, USERS WHO REACH THESE ROUTINES WILL NOT BE\n*        GRANTED PERMISSION VECTORS.\n*\nDBROWSE  EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         SPACE\nDPRINT   EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         SPACE\nDPRINT2  EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         SPACE\nDSAVE    EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         SPACE\nDSAVE2   EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         SPACE\nDDISPLAY EQU   *\n         B     4(R9)              AUTHORIZED (RETURN +4)\n         EJECT\n*\n*        THE INDIVIDUAL FUNCTION VALIDATION ROUTINES BELOW ARE FOR\n*        FUNCTIONS REQUESTED AGAINST A SPECIFIC JOB OUTPUT ELEMENT(JOE)\n*        THE FOLLOWING PARMS ARE SET:\n*\n*        JACFPDV   ADDR OF BIT MASK OF OPERANDS SPECIFIED\n*        JACPPDV   ADDR OF PARM JOV WITH SPECIFIED PARMS\n*        JACOPDV   ADDR OF ORIGINAL JOV\n*\n         SPACE 3\n*\n*        CANCEL A JOE\n*\nJOCAN    EQU   *\n         MVC   WRKRACFL(RACFSKLN),RACFSKEL   SET PATTERN FOR MACRO\n         LA    R4,JACJOBN         POINT TO THE JOB NAME\n         LA    R5,RACWK           DEFINE WORK AREA ADDRESS\n         RACROUTE REQUEST=AUTH,WORKA=(R5),ENTITY=((R4)),               X\n               CLASS=RACLASS2,ATTR=ALTER,                              X\n               MF=(E,WRKRACFL)\n         LTR   R15,R15            CHECK IF AUTHORIZED TO ACCESS\n         BZ    4(R9)              AUTHORIZED (RETURN +4)\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\n*\n*        SET VALUES FOR A JOE\n*\nJOSET    EQU   *\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n*\n*        SET VALUES FOR A JOE (OPERAND)\n*\nJOSET2   EQU   *\n         BR    R9                 NOT AUTHORIZED, (RETURN +0)\n         EJECT\n*\n*        THE INDIVIDUAL FUNCTION VALIDATION ROUTINES BELOW ARE FOR\n*        THOSE INSTALLATION DEFINED FUNCTIONS THAT ARE DEFINED FOR\n*        THE IOF JOB LIST PANEL.\n*\n*\n*        ISSUE THE JES2 $HJ COMMAND TO HOLD A JOB.\n*        THIS IS AN EXAMPLE OF AN INSTALLATION DEFINED COMMAND.\n*        SEE JESCTL ASSEMBLY FOR INFORMATION ON ADDING YOUR OWN\n*        INSTALLATION DEFINED COMMANDS.\n*\nIHOLD    EQU   *\n         BR    R9                 FAIL THE REQUEST\n         SPACE\n*\n*        ISSUE THE JES2 $AJ COMMAND TO RELEASE A JOB FROM HOLD\n*        THIS IS ALSO AN EXAMPLE OF AN INSTALLATION DEFINED COMMAND.\n*\nIRELEASE EQU   *\n         BR    R9                 FAIL THE REQUEST\n         SPACE\n*\n*        ISSUE THE JES2 $EJ COMMAND TO 'RESTART' A JOB\n*\nIRESTART EQU   *\n         BR    R9\n         SPACE\n*\n*        ISSUE AN MVS OR A JES2 COMMAND. THE FIELD JACOPDV CONTAINS THE\n*        ADDR OF THE SVC 34 COMMAND BUFFER, INCLUDING PREFIX.\n*\nICOMMAND EQU   *\n         BR    R9                 FAIL THE REQUEST\n         EJECT\n*        THE INDIVIDUAL ROUTINES BELOW ARE CALLED AFTER BOTH THE\n*        FUNCTION AND USER-SUPPLIED OPERANDS HAVE BEEN OK'ED. THIS\n*        GIVES THE INSTALLATION A CHANCE TO EASILY INSTALL GLOBAL\n*        EXCEPTION RULES (LIKE NO ACCESS TO ANY SYSOUT DATA SET OF\n*        CLASS X).\n*\n*        THE JAC PARM VALUES ARE THE SAME HERE AS FOR THE INDIVIDUAL\n*        FUNCTION AND OPERAND VALIDATION ROUTINES ABOVE.\n*\n*\n         SPACE\n*        CANCEL A JOB\nOCANCEL  EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        RELEASE HELD SYSOUTS FOR A JOB\nORELEASE EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        ROUTE A JOB\nOROUTE   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        SELECT A JOB FOR OUTPUT REVIEW\nOSELECT  EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        SET ATTRIBUTES FOR A JOB\nOJSET    EQU   *\n         TM    PSCBATR1,PSCBCTRL  WELL, IS IT 'OPERATOR' USER\n         BZR   R9                 NO - RETURN TO +0\n         B     4(R9)             YES - RETURN TO +4\n         SPACE\n*        HOLD A JOB\nOIHOLD   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        RELEASE A JOB\nOIRLSE   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        RESTART A JOB AFTER EXECUTION COMPLETES\nOIRSTRT  EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        ISSUE JES2 OR MVS COMMANDS\nOICOMAND EQU   *\n         TM    PSCBATR1,PSCBCTRL  WELL, IS IT 'OPERATOR' USER\n         BZR   R9                 NO - RETURN TO +0\n         B     4(R9)             YES - RETURN TO +4\n         EJECT\n*        FINAL OK ROUTINES FOR DATA SET FUNCTIONS\n         SPACE\n*        BROWSE A DATA SET\nODBROWSE EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        PRINT A DATA SET\nODPRINT  EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        RELEASE HELD DATA SET\nODRLSE   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        CANCEL HELD SYSOUT\nODCANCEL EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        SNAP A DATA SET\nODSAVE   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        MODIFY HELD SYSOUT\nODMODIFY EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        DISPLAY DATA SET ON MENU\nODDSPLAY EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         EJECT\n*        FINAL VALIDATION CHANCE FOR JOE FUNCTIONS\n         SPACE\n*        CANCEL A JOE\nOJOCAN   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         SPACE\n*        MODIFY ATTRIBUTES OF A JOE\nOJOSET   EQU   *\n         B     4(R9)              FUNCTION AND OPERANDS ARE STILL OK\n         EJECT\n*        THE TABLES BELOW CONTROL THE PERMISSIONS ALLOWED FOR VARIOUS\n*        TYPES OF IOF ACCESS. THE COMMENTS WITH EACH TABLE DESCRIBE\n*        THE TYPE OF ACCESS TO WHICH THE TABLE APPLIES.\n         SPACE 3\n*        THE TABLE BELOW SPECIFIES THE PERMISSIONS ALLOWED TO THE\n*        OWNER OF A JOB. A USER OWNS A JOB IF IT APPEARS ON HIS JOB\n*        LIST MENU WHEN HE HAS ENTERED IOF WITH NO OPERANDS OR IF\n*        THE USER IS ALLOWED TO USE THE USERID OPERAND WITH ANOTHER\n*        USER'S JOBS, OR IF THE USER IS ALLOWED ACCESS TO ALL THE\n*        JOBS ROUTED TO A SPECIFIC DESTINATION.\n*\nALOWOWNR DS    0F\n         DC    A(OWNRFUNC)        ADDR OF FUNCTIONS ALLOWED VECTOR\n         DC    A(OWNRJSET)        ADDR OF JOB SET OPERANDS ALLOWED\n         DC    A(OWNROSET)        ADDR OF JOE SET OPERANDS ALLOWED\n         DC    A(OWNRDSET)        ADDR OF DATA SET OPERANDS ALLOWED\n         SPACE\n*        VECTOR OF FUNCTIONS ALLOWED\nOWNRFUNC DS    0C\n         DC    AL1(FCTCANC)       CANCEL A JOB\n         DC    AL1(FCTRLSE)       RELEASE HELD SYSOUTS FOR A JOB\n         DC    AL1(FCTROUTE)      ROUTE A JOB\n         DC    AL1(FCTSEL)        SELECT A JOB FOR REVIEW\n*        DC    AL1(FCTSET)        SET ATTRIBUTES FOR A JOB\n         DC    AL1(FCTDBRWS)      BROWSE A DATA SET\n         DC    AL1(FCTDPRNT)      SNAP OR PRINT A DATA SET TO SYSOUT\n         DC    AL1(FCTDRLSE)      RELEASE A HELD SYSOUT\n         DC    AL1(FCTDCANC)      CANCEL A HELD SYSOUT\n         DC    AL1(FCTDSAVE)      SNAP SYSOUT DATA SET TO NON-SYSOUT\n         DC    AL1(FCTDMODF)      MODIFY ATTR OF HELD SYSOUT\n         DC    AL1(FCTDDISP)      DISPLAY DATA SET ON MENU\n         DC    AL1(FCTJOCAN)      CANCEL A JOE\n*        DC    AL1(FCTJOSET)      SET ATTRIBUTES FOR A JOE\n         DC    AL1(255)\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR JOB MODIFICATION FUNCTIONS\nOWNRJSET DS    0C\n*        DC    AL1($JPDESTI)      XEQ DEST\n*        DC    AL1($JPDESTO)      OUTPUT DEST\n*        DC    AL1($JPSYIDS)      SYSID(S)\n*        DC    AL1($JPIND)        INDEPENDENT MODE\n*        DC    AL1($JPPRTY)       PRIORITY\n*        DC    AL1($JPCLASI)      INPUT CLASS\n*        DC    AL1($JPCLASO)      NEW OUTPUT SYSOUT CLASS\n*        DC    AL1($JPOCLAS)      OLD OUTPUT CLASSES\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SETTING JOE ATTRIBUTES\nOWNROSET DS    0C\n*        DC    AL1($JOBURST)      BURST\n*        DC    AL1($JOCLASS)      CLASS\n*        DC    AL1($JODEST)       DEST\n*        DC    AL1($JOFCB)        FCB\n*        DC    AL1($JOFLASH)      FLASH\n*        DC    AL1($JOFORM)       FORMS\n*        DC    AL1($JOPRIO)       PRIORITY\n*        DC    AL1($JOPRMOD)      PRMODE\n*        DC    AL1($JOSEL)        SELECT\n*        DC    AL1($JOUCS)        UCS\n*        DC    AL1($JOWTRID)      WRITER ID\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SYSOUT DATA SET FUNCTIONS\nOWNRDSET DS    0C\n         DC    AL1($DFDEST)       DEST\n         DC    AL1($DFCLASS)      CLASS\n         DC    AL1($DFCOPYS)      COPYS\n         DC    AL1($DFUCS)        UCS\n         DC    AL1($DFFORMS)      FORMS\n         DC    AL1($DFFCB)        FCB\n         DC    AL1($DF2BRST)      BURST\n         DC    AL1($DFCHARS)      CHARS\n         DC    AL1($DFFLSHC)      FLASHC\n         DC    AL1($DFFLASH)      FLASH\n         DC    AL1($DFMODF)       MODIFY\n         DC    AL1($DFCOPYG)      COPYG\n         DC    AL1($DFINDEX)      INDEX\n         DC    AL1($DFLNDEX)      LINDEX\n         DC    AL1($DFCPTN)       Z\n         DC    AL1($DFCKPTP)      CKPTPGS\n         DC    AL1($DFCKPTL)      CKPTLNS\n         DC    AL1($DFMODFT)      MODTRC\n         DC    AL1($DFWTRID)      WRITER ID\n         DC    AL1($DFLINCT)      LINECT\n         DC    AL1($DFUSER)       SECONDARY DEST\n         DC    AL1($DFPRMOD)      PRMODE\n         DC    X'FF'\n         EJECT\n*        THE TABLE BELOW DEFINES THE PERMISSIONS GRANTED FOR ALL JOBS\n*        TO A USER WHO HAS 'OPERATOR' AUTHORITY.\nALOWOPER DS    0F\n         DC    A(OPERFUNC)        ADDR OF FUNCTIONS ALLOWED BIT MASK\n         DC    A(OPERJSET)        ADDR OF JOB SET OPERANDS ALLOWED MASK\n         DC    A(OPEROSET)        ADDR OF JOE SET OPERANDS ALLOWED MASK\n         DC    A(OPERDSET)        ADDR OF DATA SET FUNCTIONS OPERANDS\n         SPACE\n*        VECTOR OF FUNCTIONS ALLOWED\nOPERFUNC DS    0C\n         DC    AL1(FCTCANC)       CANCEL A JOB\n         DC    AL1(FCTRLSE)       RELEASE HELD SYSOUTS FOR A JOB\n         DC    AL1(FCTROUTE)      ROUTE A JOB\n         DC    AL1(FCTSEL)        SELECT A JOB FOR REVIEW\n         DC    AL1(FCTSET)        SET ATTRIBUTES FOR A JOB\n         DC    AL1(FCTDBRWS)      BROWSE A DATA SET\n         DC    AL1(FCTDPRNT)      SNAP OR PRINT A DATA SET TO SYSOUT\n         DC    AL1(FCTDRLSE)      RELEASE A HELD SYSOUT\n         DC    AL1(FCTDCANC)      CANCEL A HELD SYSOUT\n         DC    AL1(FCTDSAVE)      SNAP SYSOUT DATA SET TO NON-SYSOUT\n         DC    AL1(FCTDMODF)      MODIFY ATTR OF HELD SYSOUT\n         DC    AL1(FCTDDISP)      DISPLAY DATA SET ON MENU\n         DC    AL1(FCTJOCAN)      CANCEL A JOE\n         DC    AL1(FCTJOSET)      SET ATTRIBUTES FOR A JOE\n         DC    AL1(FCTJHOLD)      HOLD A JOB\n         DC    AL1(FCTJRLSE)      RELEASE A JOB\n         DC    AL1(FCTJRSTR)      RESTART A JOB\n         DC    AL1(FCTJMVSC)      ENTER AN MVS OR JES2 COMMAND\n         DC    AL1(255)\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR JOB MODIFICATION FUNCTIONS\nOPERJSET DS    0C\n         DC    AL1($JPDESTI)      XEQ DEST\n         DC    AL1($JPDESTO)      OUTPUT DEST\n         DC    AL1($JPSYIDS)      SYSID(S)\n         DC    AL1($JPIND)        INDEPENDENT MODE\n         DC    AL1($JPPRTY)       PRIORITY\n         DC    AL1($JPCLASI)      INPUT CLASS\n         DC    AL1($JPCLASO)      NEW OUTPUT SYSOUT CLASS\n         DC    AL1($JPOCLAS)      OLD OUTPUT CLASSES\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SETTING JOE ATTRIBUTES\nOPEROSET DS    0C\n         DC    AL1($JOBURST)      BURST\n         DC    AL1($JOCLASS)      CLASS\n         DC    AL1($JODEST)       DEST\n         DC    AL1($JOFCB)        FCB\n         DC    AL1($JOFLASH)      FLASH\n         DC    AL1($JOFORM)       FORMS\n         DC    AL1($JOPRIO)       PRIORITY\n         DC    AL1($JOPRMOD)      PRMODE\n         DC    AL1($JOSEL)        SELECT\n         DC    AL1($JOUCS)        UCS\n         DC    AL1($JOWTRID)      WRITER ID\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SYSOUT DATA SET FUNCTIONS\nOPERDSET DS    0C\n         DC    AL1($DFDEST)       DEST\n         DC    AL1($DFCLASS)      CLASS\n         DC    AL1($DFCOPYS)      COPYS\n         DC    AL1($DFUCS)        UCS\n         DC    AL1($DFFORMS)      FORMS\n         DC    AL1($DFFCB)        FCB\n         DC    AL1($DF2BRST)      BURST\n         DC    AL1($DFCHARS)      CHARS\n         DC    AL1($DFFLSHC)      FLASHC\n         DC    AL1($DFFLASH)      FLASH\n         DC    AL1($DFMODF)       MODIFY\n         DC    AL1($DFCOPYG)      COPYG\n         DC    AL1($DFINDEX)      INDEX\n         DC    AL1($DFLNDEX)      LINDEX\n         DC    AL1($DFCPTN)       Z\n         DC    AL1($DFCKPTP)      CKPTPGS\n         DC    AL1($DFCKPTL)      CKPTLNS\n         DC    AL1($DFMODFT)      MODTRC\n         DC    AL1($DFWTRID)      WRITER ID\n         DC    AL1($DFLINCT)      LINECT\n         DC    AL1($DFUSER)       SECONDARY DEST\n         DC    AL1($DFPRMOD)      PRMODE\n         DC    X'FF'\n         SPACE 3\n*        THE TABLE BELOW DEFINES THE PERMISSIONS GRANTED FOR ALL\n*        JOBS ROUTED TO A SPECIFIC DESTINATION TO A USER WHO IS\n*        AUTHORIZED TO USE THE DEST OPERAND OF IOF FOR THAT DEST.\n*\nALOWDEST DS    0F\n         DC    A(DESTFUNC)        ADDR OF FUNCTIONS ALLOWED VECTOR\n         DC    A(DESTJSET)        ADDR OF JOB SET OPERANDS ALLOWED\n         DC    A(DESTOSET)        ADDR OF JOE SET OPERANDS ALLOWED\n         DC    A(DESTDSET)        ADDR OF DATA SET OPERANDS ALLOWED\n         SPACE\n*        VECTOR OF FUNCTIONS ALLOWED\nDESTFUNC DS    0C\n*        DC    AL1(FCTCANC)       CANCEL A JOB\n*        DC    AL1(FCTRLSE)       RELEASE HELD SYSOUTS FOR A JOB\n*        DC    AL1(FCTROUTE)      ROUTE A JOB\n         DC    AL1(FCTSEL)        SELECT A JOB FOR REVIEW\n*        DC    AL1(FCTSET)        SET ATTRIBUTES FOR A JOB\n         DC    AL1(FCTDBRWS)      BROWSE A DATA SET\n         DC    AL1(FCTDPRNT)      SNAP OR PRINT A DATA SET TO SYSOUT\n*        DC    AL1(FCTDRLSE)      RELEASE A HELD SYSOUT\n*        DC    AL1(FCTDCANC)      CANCEL A HELD SYSOUT\n         DC    AL1(FCTDSAVE)      SNAP SYSOUT DATA SET TO NON-SYSOUT\n*        DC    AL1(FCTDMODF)      MODIFY ATTR OF HELD SYSOUT\n         DC    AL1(FCTDDISP)      DISPLAY DATA SET ON MENU\n         DC    AL1(FCTJOCAN)      CANCEL A JOE\n         DC    AL1(FCTJOSET)      SET ATTRIBUTES FOR A JOE\n         DC    AL1(255)\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR JOB MODIFICATION FUNCTIONS\nDESTJSET DS    0C\n*        DC    AL1($JPDESTI)      XEQ DEST\n*        DC    AL1($JPDESTO)      OUTPUT DEST\n*        DC    AL1($JPSYIDS)      SYSID(S)\n*        DC    AL1($JPIND)        INDEPENDENT MODE\n*        DC    AL1($JPPRTY)       PRIORITY\n*        DC    AL1($JPCLASI)      INPUT CLASS\n*        DC    AL1($JPCLASO)      NEW OUTPUT SYSOUT CLASS\n*        DC    AL1($JPOCLAS)      OLD OUTPUT CLASSES\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SETTING JOE ATTRIBUTES\nDESTOSET DS    0C\n         DC    AL1($JOBURST)      BURST\n         DC    AL1($JOCLASS)      CLASS\n         DC    AL1($JODEST)       DEST\n         DC    AL1($JOFCB)        FCB\n         DC    AL1($JOFLASH)      FLASH\n         DC    AL1($JOFORM)       FORMS\n         DC    AL1($JOPRIO)       PRIORITY\n         DC    AL1($JOPRMOD)      PRMODE\n         DC    AL1($JOSEL)        SELECT\n         DC    AL1($JOUCS)        UCS\n         DC    AL1($JOWTRID)      WRITER ID\n         DC    X'FF'\n         SPACE\n*        VECTOR OF OPERANDS ALLOWED FOR SYSOUT DATA SET FUNCTIONS\nDESTDSET DS    0C\n*        DC    AL1($DFDEST)       DEST\n*        DC    AL1($DFCLASS)      CLASS\n*        DC    AL1($DFCOPYS)      COPYS\n*        DC    AL1($DFUCS)        UCS\n*        DC    AL1($DFFORMS)      FORMS\n*        DC    AL1($DFFCB)        FCB\n*        DC    AL1($DF2BRST)      BURST\n*        DC    AL1($DFCHARS)      CHARS\n*        DC    AL1($DFFLSHC)      FLASHC\n*        DC    AL1($DFFLASH)      FLASH\n*        DC    AL1($DFMODF)       MODIFY\n*        DC    AL1($DFCOPYG)      COPYG\n*        DC    AL1($DFINDEX)      INDEX\n*        DC    AL1($DFLNDEX)      LINDEX\n*        DC    AL1($DFCPTN)       Z\n*        DC    AL1($DFCKPTP)      CKPTPGS\n*        DC    AL1($DFCKPTL)      CKPTLNS\n*        DC    AL1($DFMODFT)      MODTRC\n*        DC    AL1($DFWTRID)      WRITER ID\n*        DC    AL1($DFLINCT)      LINECT\n*        DC    AL1($DFUSER)       SECONDARY DEST\n*        DC    AL1($DFPRMOD)      PRMODE\n         DC    X'FF'\n         EJECT\n*        TABLE THAT MAPS AN IOF FUNCTION INDEX INTO AN OFFSET FROM\n*        JACJALOW AT WHICH THE BIT MASK IS STORED INDICATING WHICH\n*        OPERANDS ARE ALLOWED FOR THE FUNCTION.\nFUNCMAP  DS    0C\n         DC    AL1(0)             CANCEL (NO PARMS)\n         DC    AL1(JACJSET-JACJALOW)   RELEASE HELD SYSOUTS FOR A JOB\n         DC    AL1(JACJSET-JACJALOW)   ROUTE A JOB\n         DC    AL1(0)             SELECT (NO PARMS)\n         SPACE\n         DC    AL1(0)             BROWSE (NO PARMS)\n         DC    AL1(JACDSET-JACJALOW)   PRINT A DATA SET\n         DC    AL1(JACDSET-JACJALOW)   RELEASE A HELD SYSOUT\n         DC    AL1(0)             CANCEL A HELD SYSOUT (NO PARMS)\n         DC    AL1(0)                  SNAP\n         DC    AL1(JACDSET-JACJALOW)   MODIFY A SYSOUT DATA SET\n         DC    AL1(0)             DISPLAY DATA SET ON MENU\n         SPACE\n         DC    6AL1(0)\n         DC    AL1(JACJSET-JACJALOW)   SET JOB ATTRIBUTES\n         DC    AL1(0)             CANCEL A JOE\n         DC    AL1(JACOSET-JACJALOW)   SET JOE ATTRIBUTES\n         SPACE\n         DC    4AL1(0)\n         SPACE\n         DC    AL1(0)             HOLD JOB (NO PARMS)\n         DC    AL1(0)             RELEASE JOB (NO PARMS)\n         DC    AL1(0)             RESTART JOB (NO PARMS)\n         DC    AL1(0)             MVS (OR JES2) CMND (NO PARMS)\n         SPACE\n         DC    4AL1(0)            **** RESERVED ****\n         EJECT\n*        THE DSECT BELOW IS JUST AN EXTENSION OF THE WRKDSECT DSECT\n*        DEFINED IN THE BODY OF THE JOBACESS SOURCE MODULE. ANY\n*        VARIABLES THAT YOU ADD HERE WILL JUST BE APPENDED TO THE\n*        END OF THE WRKDSECT DSECT.\n*\n*\n*        CONSTANTS AND SKELETONS NEEDED\n*\nRACLASS1 DC    XL1'07'\n         DC    CL7'$DESTID'\nRACLASS2 DC    XL1'08'\n         DC    CL8'$JOBNAME'\nRACFSKEL RACROUTE REQUEST=AUTH,ATTR=READ,                              X\n               MF=L\nRACFSKLN EQU   *-RACFSKEL          LENGTH OF SKELETON RACFPATT\n*\n*        THE DSECT BELOW IS JUST AN EXTENSION OF THE WRKDSECT DSECT\n*        DEFINED IN THE BODY OF THE JOBACESS SOURCE MODULE. ANY\n*        VARIABLES THAT YOU ADD HERE WILL JUST BE APPENDED TO THE\n*        END OF THE WRKDSECT DSECT.\n*\nWRKDSECT DSECT\n*        JUST ADD YOUR WORK AREAS RIGHT HERE\nRACWK    DS    CL512\nWRKRACFL DS    0F,CL(RACFSKLN)\nRACUSID  DS    0F\n         DS    CL8         8 CHARACTER USERID FIELD FOR RACF\nRACDEST  DS    0F\n         DS    CL13        SMFID+'.'+JACDEST\nWRKSIZE  EQU   *-WRKDSECT\n         EJECT\n*\n*        THE DSECT BELOW IS JUST AN EXTENSION OF THE JWKDSECT DSECT\n*        DEFINED IN THE BODY OF THE JOBACESS SOURCE MODULE. ANY\n*        VARIABLES THAT YOU ADD HERE WILL JUST BE APPENDED TO THE\n*        END OF THE JWKDSECT DSECT. THIS WORK AREA IS USED TO SAVE\n*        JCT DATA FOR EACH JOB AT 'JOBINIT' SO THAT IT WILL BE\n*        AVAILABLE AT 'VALIDATE'.\n*\nJWKDSECT DSECT\n*        JUST ADD YOUR VARIABLE DEFINITIONS RIGHT HERE\nJWKSIZE  EQU   *-JWKDSECT\n         EJECT\n*        IF YOU NEED TO SPECIFY ANY ADDITIONAL DSECTS FOR WORK AREAS\n*        YOU CAN JUST DEFINE THEM RIGHT HERE.\n         CVT   DSECT=YES           MAP THE CVT\n         IEESMCA ,                 MAP THE SMCA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTRP": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01)\\x01)\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 297, "newlines": 297, "modlines": 0, "user": "FILE013"}, "text": " /*  LISTRP -  L I S T  R A C F  P R O T E C T I O N                  */  LISTRP\n /*********************************************************************/  LISTRP\n /*                                                                   */  LISTRP\n /* PROGRAM NAME: LISTRP   (LIST RACF PROTECTION)                     */  LISTRP\n /*               UTILITY PROGRAM TO COMPARE OUTPUT FROM A LISTCAT AND*/  LISTRP\n /*               THE OUTPUT FROM A RACF SEARCH COMMAND TO DETERMINE  */  LISTRP\n /*               WHICH RACF PROFILES PROTECT WHICH CATALOGED DATASETS*/  LISTRP\n /*               (NONVSAM, CLUSTERS, AND DATA & INDEX COMPONENTS).   */  LISTRP\n /*               THIS PROGRAM CONVERTED (ALMOST) LINE FOR LINE FROM  */  LISTRP\n /*               THE CLIST LISTRP IN 'SYS1.SAMPLIB(RACINSTL)'.       */  LISTRP\n /*                                                                   */  LISTRP\n /* AUTHOR:       STUART SABEL, BLUE CROSS OF WASHINGTON & ALASKA 4/85*/  LISTRP\n /*                                                                   */  LISTRP\n /* INPUT DATA:   DDNAME - RACFIN, DATASET - &SYSUID.EXEC.RACF.CLIST  */  LISTRP\n /*               THIS DATASET CONTAINS THE OUTPUT FROM THE COMMAND   */  LISTRP\n /*                  SEARCH MASK(&PREFIX) CLIST NOLIST                */  LISTRP\n /*                                                                   */  LISTRP\n /*               DDNAME - LISTCAT, DCB=(LRECL=125,RECFM=VBA)         */  LISTRP\n /*               THIS DATASET CONTAINS THE OUTPUT FROM THE FOLLOWING */  LISTRP\n /*               LISTCAT COMMAND:                                    */  LISTRP\n /*                  LISTCAT LEVEL(&PREFIX) OFILE(LISTCAT)            */  LISTRP\n /*                                                                   */  LISTRP\n /*                                                                   */  LISTRP\n /* OUTPUT DATA:  THE OUTPUT FROM THIS PROGRAM IS A REPORT OF WHICH   */  LISTRP\n /*               RACF PROFILES PROTECT WHICH CATALOGED DATASETS.     */  LISTRP\n /*               DDNAME - SYSPRINT                                   */  LISTRP\n /*                                                                   */  LISTRP\n /*                                                                   */  LISTRP\n /* NOTES:        ARRAYS FOR RACF RECORDS AND LISTCAT RECORDS ARE     */  LISTRP\n /*               SET UP FOR A MAXIMUM OF 1000 RECORDS EACH.          */  LISTRP\n /*                                                                   */  LISTRP\n /*               THIS PROGRAM MAY BE EXECUTED FROM EITHER A CLIST,   */  LISTRP\n /*               OR IN A BATCH JOB. THE PROGRAM EXECUTES QUICKLY;    */  LISTRP\n /*               THE PROBLEM WITH EXECUTING IT FROM A CLIST IS THAT  */  LISTRP\n /*               THE SEARCH COMMAND, OR LISTC COMMAND TO GET THE     */  LISTRP\n /*               NECESSARY DATA MAY TAKE A LONG TIME...              */  LISTRP\n /*                                                                   */  LISTRP\n /*********************************************************************/  LISTRP\n LISTRP: PROC OPTIONS(MAIN);                   /* MAIN PROCEDURE START*/  LISTRP\n DCL RACFIN   FILE;                            /* SEARCH CMD OUTPUT.  */  LISTRP\n DCL LISTCAT  FILE;                            /* LISTCAT OUTPUT.     */  LISTRP\n DCL SYSPRINT FILE;                            /* SYSOUT MESSAGES.    */  LISTRP\n DCL INDEX    BUILTIN;                         /* INDEX FUNCTION.     */  LISTRP\n DCL LENGTH   BUILTIN;                         /* LENGTH FUNCTION.    */  LISTRP\n DCL STRING   BUILTIN;                         /* STRING FUNCTION.    */  LISTRP\n DCL SUBSTR   BUILTIN;                         /* SUBSTRING FUNCTION. */  LISTRP\n DCL RCOUNT1  FIXED       BIN(15)     INIT(0); /* RACFIN READ COUNT.  */  LISTRP\n DCL RCOUNT2  FIXED       BIN(15)     INIT(0); /* LISTCAT READ COUNT. */  LISTRP\n DCL LEN      FIXED       BIN(31)     INIT(0); /* STRING LENGTH VAR.  */  LISTRP\n DCL RACIN    CHAR(255)   VARYING     INIT((255) ' '); /* RACF REC.   */  LISTRP\n DCL CATIN    CHAR(125)   VARYING     INIT((125) ' '); /* LISTC REC.  */  LISTRP\n DCL STRPOS   FIXED       BIN(31)     INIT(0); /* CHAR. POSITION VAR. */  LISTRP\n DCL RTOT     FIXED       BIN(31)     INIT(1); /* TOT # OF RACF DSNS  */  LISTRP\n DCL CTOT     FIXED       BIN(31)     INIT(1); /* TOT # OF LISTC DSNS */  LISTRP\n DCL RACREC(1000) CHAR(53) VARYING    INIT((1000) (53) ' '); /* ARRAY */  LISTRP\n DCL CATREC(1000) CHAR(61) VARYING    INIT((1000) (61) ' '); /* ARRAY */  LISTRP\n DCL PREFIX   CHAR(08)    VARYING     INIT((8)' '); /* GRAB HLQ.      */  LISTRP\n DCL PROFILE  CHAR(44)    VARYING     INIT((44)' '); /* MATCH PROFILE.*/  LISTRP\n DCL DATASET  CHAR(44)    VARYING     INIT((44)' '); /* MATCH DSNAME. */  LISTRP\n DCL DSN_COL  FIXED       BIN(31)     INIT(0); /* COLUMN POINTER.     */  LISTRP\n DCL PROF_COL FIXED       BIN(31)     INIT(0); /* COLUMN POINTER.     */  LISTRP\n DCL PSEUDO   CHAR(44)    VARYING     INIT((44)' '); /* PSEUDO DSNAME */  LISTRP\n DCL RUNNER   FIXED       BIN(31)     INIT(0); /* ARRAY COUNTER. RACF */  LISTRP\n DCL RUNNER2  FIXED       BIN(31)     INIT(0); /* ARRAY COUNTER. CATLG*/  LISTRP\n DCL COUNT    FIXED       BIN(31)     INIT(0); /* COLUMN COUNTER.     */  LISTRP\n DCL COUNT2   FIXED       BIN(31)     INIT(0); /* COLUMN COUNTER.     */  LISTRP\n DCL MATCHDS  CHAR(03)    VARYING     INIT((03)' '); /* MATCH FLAG.   */  LISTRP\n DCL PROF_LEN FIXED       BIN(31)     INIT(0); /* PROFILE LENGTH CNTR.*/  LISTRP\n DCL DSN_LEN  FIXED       BIN(31)     INIT(0); /* DSNAME LENGTH CNTR. */  LISTRP\n DCL START    FIXED       BIN(31)     INIT(0); /* COL. SCAN START COL.*/  LISTRP\n DCL DCR      FIXED       BIN(31)     INIT(0); /* DSN COLUMN POINTER. */  LISTRP\n DCL PLEN     FIXED       BIN(31)     INIT(0); /* PSEUDO NAME LENGTH. */  LISTRP\n DCL FTIME    CHAR(03)    VARYING     INIT((03)' '); /* PROCESS FLAG. */  LISTRP\n DCL DATS     CHAR(44)    VARYING     INIT((44)' '); /* DS SCAN VAR.  */  LISTRP\n /*********************************************************************/  LISTRP\n /* SET UP VARIABLES WITH CURRENT DATE AND TIME.                      */  LISTRP\n /*********************************************************************/  LISTRP\n DCL DATE     BUILTIN;                                                    LISTRP\n DCL TIME     BUILTIN;                                                    LISTRP\n DCL SL            CHAR(01)   INIT('/');                                  LISTRP\n DCL CO            CHAR(01)   INIT(':');                                  LISTRP\n DCL CURRDATE      CHAR(08)   INIT((08)' ');                              LISTRP\n DCL CURRTIME      CHAR(08)   INIT((08)' ');                              LISTRP\n DCL 1 DATEIN,                                                            LISTRP\n       5 YEAR      CHAR(02)   INIT('  '),                                 LISTRP\n       5 MONTH     CHAR(02)   INIT('  '),                                 LISTRP\n       5 DAY       CHAR(02)   INIT('  ');                                 LISTRP\n DCL 1 TIMEIN,                                                            LISTRP\n       5 HOURS     CHAR(02)   INIT('  '),                                 LISTRP\n       5 MINUTES   CHAR(02)   INIT('  '),                                 LISTRP\n       5 SECONDS   CHAR(02)   INIT('  '),                                 LISTRP\n       5 MILLIES   CHAR(03)   INIT('  ');                                 LISTRP\n STRING(DATEIN) = DATE;                        /* PULL IN CURR DATE. */   LISTRP\n STRING(TIMEIN) = TIME;                        /* PULL IN CURR TIME. */   LISTRP\n CURRDATE = MONTH || SL || DAY || SL || YEAR ;       /* SET UP DATE. */   LISTRP\n CURRTIME = HOURS || CO || MINUTES || CO || SECONDS ;/* SET UP TIME. */   LISTRP\n /*********************************************************************/  LISTRP\n /* WHAT TO DO WITH END OF FILE CONDITIONS...                         */  LISTRP\n /*********************************************************************/  LISTRP\n ON ENDFILE(RACFIN) GOTO READ2;                /* AT EOF, READ NEXT.  */  LISTRP\n ON ENDFILE(LISTCAT) GOTO GETPREF;             /* AT EOF, PROCESS EM. */  LISTRP\n                                                                          LISTRP\n /*********************************************************************/  LISTRP\n /* SET UP REPORT HEADINGS.                                           */  LISTRP\n /*********************************************************************/  LISTRP\n PUT SKIP EDIT ('BLUE CROSS OF WA/AK   -   LIST RACF PROTECTIO',          LISTRP\n                'N UTILITY ') (A,A);           /* SET UP HEADINGS     */  LISTRP\n PUT SKIP EDIT (CURRDATE,'                                      ',        LISTRP\n                CURRTIME) (A,A,A);             /* WRITE DATE AND TIME */  LISTRP\n PUT SKIP EDIT                                 /* WRITE TOTAL LINE.   */  LISTRP\n       ('------------------------------------------------------')         LISTRP\n            (A);                               /*                     */  LISTRP\n PUT SKIP EDIT (' ') (A);                      /* WRITE BLANK LINE.   */  LISTRP\n                                               /*                     */  LISTRP\n /*********************************************************************/  LISTRP\n /* READ RACF SEARCH COMMAND DATA INTO THE RACIN ARRAY.               */  LISTRP\n /*********************************************************************/  LISTRP\n READ1: READ FILE(RACFIN) INTO(RACIN);         /* READ 'RACFIN'.      */  LISTRP\n    RCOUNT1 = RCOUNT1 + 1;                     /* COUNT THE READ.     */  LISTRP\n    LEN = LENGTH(RACIN);                       /* FIND LENGTH.        */  LISTRP\n    RACREC(RTOT) = SUBSTR(RACIN,10,LEN-10);    /* GRAB DSN, NO QUOTES */  LISTRP\n    RTOT = RTOT + 1;                           /* INCREMENT COUNTER.  */  LISTRP\n    GOTO READ1;                                /* READ THE NEXT ONE.  */  LISTRP\n /*********************************************************************/  LISTRP\n /* READ LISTCAT COMMAND DATA INTO THE CATIN ARRAY.                   */  LISTRP\n /*********************************************************************/  LISTRP\n READ2: READ FILE(LISTCAT) INTO(CATIN);        /* READ 'LISTCAT'      */  LISTRP\n    IF SUBSTR(CATIN,02,07) = 'NONVSAM'         /* TAKE AS VALID -     */  LISTRP\n         THEN GOTO GOTIT;                      /* NONVSAM DATASETS    */  LISTRP\n    IF SUBSTR(CATIN,02,07) = 'CLUSTER'         /* TAKE AS VALID -     */  LISTRP\n         THEN GOTO GOTIT;                      /* VSAM CLUSTERS.      */  LISTRP\n    IF SUBSTR(CATIN,02,05) = 'INDEX'           /* TAKE AS VALID -     */  LISTRP\n         THEN GOTO GOTIT;                      /* VSAM INDEX COMPONENT*/  LISTRP\n    IF SUBSTR(CATIN,02,04) = 'DATA'            /* TAKE AS VALID -     */  LISTRP\n         THEN GOTO GOTIT;                      /* VSAM DATA COMPONENTS*/  LISTRP\n    GOTO READ2;                                /* IF NOT, READ AGAIN. */  LISTRP\n    GOTIT:                                                                LISTRP\n    LEN = LENGTH(CATIN);                       /* FIND LENGTH.        */  LISTRP\n    CATREC(CTOT) = SUBSTR(CATIN,18,LEN-17);    /* GRAB DSNAME ONLY.   */  LISTRP\n    RCOUNT2 = RCOUNT2 + 1;                     /* COUNT THE READ.     */  LISTRP\n    CTOT = CTOT + 1;                           /* INCREMENT COUNTER.  */  LISTRP\n    GOTO READ2;                                /* READ THE NEXT ONE.  */  LISTRP\n                                                                          LISTRP\n /*********************************************************************/  LISTRP\n /* FIRST, GET THE PREFIX OF THE USER/GROUP TO BE PROCESSED.          */  LISTRP\n /*********************************************************************/  LISTRP\n GETPREF:                                                                 LISTRP\n      STRPOS = INDEX(RACREC(1),'.');           /* LOOK FOR FIRST DOT. */  LISTRP\n      PREFIX = SUBSTR(RACREC(1),01,STRPOS-1);  /* GRAB PREFIX.        */  LISTRP\n /*********************************************************************/  LISTRP\n /* CLIST DATA STARTS HERE.                                           */  LISTRP\n /*********************************************************************/  LISTRP\n  COUNT = RTOT;                                /* SET COUNT TO RTOT.  */  LISTRP\n COUNT2 = CTOT;                                /* SET COUNT2 TO CTOT. */  LISTRP\n START = LENGTH(PREFIX) + 2;                   /* GET STARTING COLUMN.*/  LISTRP\n RUNNER = 1 ;                                  /* SET ARRAY COUNTER.  */  LISTRP\n DO WHILE (RUNNER <= COUNT);                   /* PROCESS ALL PROFILES*/  LISTRP\n   MATCHDS = 'NO';                             /* MATCH INDICATOR = NO*/  LISTRP\n   PROFILE = RACREC(RUNNER);                   /* SET UP PROFILE.     */  LISTRP\n   PUT SKIP EDIT (' ') (A);                    /* WRITE A BLANK LINE. */  LISTRP\n   PUT SKIP EDIT ('     PROFILE ===> ',PROFILE) (A,A);                    LISTRP\n   PUT SKIP EDIT                                                          LISTRP\n        ('  PROTECTS THE FOLLOWING CATALOGED DATA SET(S)') (A);           LISTRP\n   PROF_LEN = LENGTH(PROFILE);                 /* GET PROFILE LENGTH. */  LISTRP\n   RUNNER2 = 1;                                /* SET ARRAY COUNTER.  */  LISTRP\n  DO WHILE (RUNNER2 <= COUNT2);                /* PROCESS ALL DATASETS*/  LISTRP\n   DATASET = CATREC(RUNNER2);                  /* SET UP DSNAME.      */  LISTRP\n   IF DATASET = '9' THEN GOTO BYPASSDS;        /* BYPASSED PROCESSED. */  LISTRP\n   DSN_LEN = LENGTH(DATASET);                  /* SET SCAN LIMIT.     */  LISTRP\n   DSN_COL = START;                            /* DSN COL SCAN VALUE. */  LISTRP\n   PROF_COL = START;                           /* PROF COL SCAN VALUE.*/  LISTRP\n   PSEUDO = PREFIX || '.' ;                    /* SET UP SCAN PROFILE.*/  LISTRP\n   DO WHILE (PROF_COL <= PROF_LEN);            /* IF WHOLE PROF\u00acSCANND*/  LISTRP\n /*********************************************************************/  LISTRP\n /* IF A PERCENT '%' SIGN IS FOUND, PROCESS IT.                       */  LISTRP\n /*********************************************************************/  LISTRP\n    IF SUBSTR(PROFILE,PROF_COL,1) = '%' THEN DO; /* IF PERCENT, THEN. */  LISTRP\n      IF DSN_COL <= DSN_LEN THEN               /* GET NEXT CHARACTER. */  LISTRP\n         PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,1);                    LISTRP\n      PROF_COL = PROF_COL + 1;                 /* INCR. COL CNTR BY 1.*/  LISTRP\n      DSN_COL = DSN_COL + 1;                   /* INCR. COL CNTR BY 1.*/  LISTRP\n      GOTO ENDMAIN;                            /*                     */  LISTRP\n     END;                                                                 LISTRP\n /*********************************************************************/  LISTRP\n /* IF AN ASTERISK IS FOUND, AND THE PROFILE IS THE SAME LENGTH AS    */  LISTRP\n /* THE DATASET NAME, THEN PROCESS IT HERE.                           */  LISTRP\n /*********************************************************************/  LISTRP\n    IF SUBSTR(PROFILE,PROF_COL,1) = '*' &      /* LOOK FOR GENERIC    */  LISTRP\n         PROF_COL = PROF_LEN THEN DO;          /* CHARS. IF SO THEN...*/  LISTRP\n      IF DSN_COL <= DSN_LEN THEN               /* IF SO, GRAB INFO.   */  LISTRP\n           PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,DSN_LEN-DSN_COL+1);  LISTRP\n      DSN_COL = DSN_LEN;                       /* RESET DSN_COL.      */  LISTRP\n      PROF_COL = PROF_COL + 1;                 /* ADD ONE TO PROF_COL.*/  LISTRP\n      GOTO ENDMAIN;                            /*                     */  LISTRP\n     END;                                                                 LISTRP\n /*********************************************************************/  LISTRP\n /* IF AN ASTERISK IS FOUND, AND THE PROFILE IS SHORTER IN LENGTH     */  LISTRP\n /* THAN THE DATASET NAME, PROCESS IT HERE.                           */  LISTRP\n /*********************************************************************/  LISTRP\n    IF SUBSTR(PROFILE,PROF_COL,1) = '*' & PROF_COL < PROF_LEN  THEN DO;   LISTRP\n      IF (DSN_COL <= DSN_LEN) THEN DO;         /*                     */  LISTRP\n          DCR = DSN_COL;                       /* CURR DS RANGE TO DSN*/  LISTRP\n          DO WHILE (SUBSTR(DATASET,DCR,1) \u00ac= '.' & DCR < DSN_LEN);        LISTRP\n            DCR = DCR + 1;                                                LISTRP\n          END;                                                            LISTRP\n          PSEUDO = PSEUDO || SUBSTR(DATASET,DSN_COL,DCR-DSN_COL);         LISTRP\n        END;                                                              LISTRP\n      PROF_COL = PROF_COL + 1;                 /* INCR COLUMN COUNTER.*/  LISTRP\n      DSN_COL = DCR;                           /* RESET DSN POINTER.  */  LISTRP\n      GOTO ENDMAIN;                            /*                     */  LISTRP\n     END;                                      /*                     */  LISTRP\n    PSEUDO = PSEUDO || SUBSTR(PROFILE,PROF_COL,1);                        LISTRP\n    PROF_COL = PROF_COL + 1;                   /* INCR COLUMN COUNTER.*/  LISTRP\n    DSN_COL = DSN_COL + 1;                     /* INCR COLUMN COUNTER.*/  LISTRP\n /*********************************************************************/  LISTRP\n /* CHECK TO SEE IF THE PSEUDO NAME AND THE DATASET NAME MATCH. IF    */  LISTRP\n /* NOT, THEN TRY AGAIN.                                              */  LISTRP\n /*********************************************************************/  LISTRP\n   ENDMAIN:                                                               LISTRP\n    PLEN = LENGTH(PSEUDO);                     /* SAVE LEN. OF PSEUDO.*/  LISTRP\n    IF PLEN > DSN_LEN THEN PLEN = DSN_LEN;     /* RESET PLEN IF >     */  LISTRP\n    IF PSEUDO \u00ac= SUBSTR(DATASET,1,PLEN) THEN   /* IF NO MATCH, RESET  */  LISTRP\n         PROF_COL = PROF_LEN + 1;              /* PROF_COL.           */  LISTRP\n   END;                                                                   LISTRP\n /*********************************************************************/  LISTRP\n /* IF THE PSEUDO AND THE DATASET NAME MATCH, WRITE IT OUT HERE.      */  LISTRP\n /*********************************************************************/  LISTRP\n   IF PSEUDO = DATASET THEN DO;                /* IF A MATCH, THEN....*/  LISTRP\n        PUT SKIP EDIT                          /* WRITE OUT THE DATA- */  LISTRP\n             ('DATASET ===> ',DATASET) (A,A);  /* SET NAME.           */  LISTRP\n        CATREC(RUNNER2) = '9';                 /* MARK DSN AS MATCHED.*/  LISTRP\n        MATCHDS = 'YES';                       /* MATCHED FLAG=YES.   */  LISTRP\n    END;                                                                  LISTRP\n /*********************************************************************/  LISTRP\n /* THIS LABEL IS FOR BYPASSING INVALID DATASET NAME, AND ADVANCING   */  LISTRP\n /* THE ARRAY COUNTER FOR DATASETS.                                   */  LISTRP\n /*********************************************************************/  LISTRP\n   BYPASSDS:                                                              LISTRP\n    RUNNER2 = RUNNER2 + 1;                     /* ADVANCE TO NEXT DSN.*/  LISTRP\n   END;                                                                   LISTRP\n /*********************************************************************/  LISTRP\n /* IF NO MATCHING DATASET NAMES ARE FOUND, WRITE OUT A MESSAGE HERE. */  LISTRP\n /*********************************************************************/  LISTRP\n IF MATCHDS = 'NO' THEN DO;                    /* IF NO MATCH TO PROF,*/  LISTRP\n    PUT SKIP EDIT                              /* WRITE NONE FOUND.   */  LISTRP\n         ('NO MATCHING DATA SET NAMES FOUND') (A);                        LISTRP\n    PUT SKIP EDIT (' ') (A);                                              LISTRP\n  END;                                                                    LISTRP\n /*********************************************************************/  LISTRP\n /* ADVANCE THE PROFILE ARRAY COUNTER BY ONE.                         */  LISTRP\n /*********************************************************************/  LISTRP\n NEXTPROF:                                                                LISTRP\n  RUNNER = RUNNER + 1;                         /* GET NEXT PROFILE.   */  LISTRP\n  IF SUBSTR(RACREC(RUNNER),1,1) = ' ' THEN     /* DO NOT PROCESS ANY  */  LISTRP\n       GOTO NEXTPROF;                          /* BLANK PROFILE NAMES.*/  LISTRP\n END;                                                                     LISTRP\n /*********************************************************************/  LISTRP\n /* WHEN ALL DATASETS AND PROFILES HAVE BEEN MATCHED, SCAN THE        */  LISTRP\n /* DATASETS TO DETERMINE WHICH (IF ANY) ARE UNPROTECTED.             */  LISTRP\n /*********************************************************************/  LISTRP\n   RUNNER = 1;                                 /* RESET COUNTER.      */  LISTRP\n   FTIME = 'YES';                              /* FIRST TIME THROUGH. */  LISTRP\n   DO WHILE (RUNNER <= COUNT2);                /* PROCESS ALL DSNS.   */  LISTRP\n   DATS = CATREC(RUNNER);                      /* SET UP DSNAME.      */  LISTRP\n   IF SUBSTR(DATS,1,1) = ' ' THEN GOTO REALEND;/* IF EOF, QUIT IT.    */  LISTRP\n   IF DATS \u00ac= '9' THEN DO;                     /* IF NOT PROCESSED....*/  LISTRP\n      IF FTIME = 'YES' THEN DO;                /* AND FIRST TIME THRU,*/  LISTRP\n        PUT SKIP EDIT (' ') (A);               /* WRITE A BLANK..     */  LISTRP\n        PUT SKIP EDIT (' ') (A);               /* WRITE A BLANK..     */  LISTRP\n        PUT SKIP EDIT                          /* WRITE OUT UNPROTECT */  LISTRP\n             ('THE FOLLOWING DATASET(S) ARE NOT RACF PROTECTED') (A);     LISTRP\n        PUT SKIP EDIT (' ') (A);                                          LISTRP\n       END;                                                               LISTRP\n      PUT SKIP EDIT ('UNPROTECTED DATASET ===> ',DATS) (A,A);             LISTRP\n      FTIME = 'NO';                            /* SET FTIME=NO        */  LISTRP\n     END;                                                                 LISTRP\n   RUNNER = RUNNER + 1;                        /* INCREMENT ARRAY CNTR*/  LISTRP\n   END;                                                                   LISTRP\n /*********************************************************************/  LISTRP\n /* DISPLAY THE COUNTS HERE.                                          */  LISTRP\n /*********************************************************************/  LISTRP\n REALEND:                                                                 LISTRP\n       PUT SKIP EDIT (' ') (A);                /* WRITE BLANK LINE.   */  LISTRP\n       PUT SKIP EDIT                           /* WRITE TOTAL LINE.   */  LISTRP\n       ('-------------------------------------------------------')        LISTRP\n            (A);                               /*                     */  LISTRP\n       PUT SKIP EDIT (' ') (A);                /* WRITE BLANK LINE.   */  LISTRP\n       PUT SKIP EDIT (RCOUNT1,' RACF PROFILES.') (A,A);                   LISTRP\n       PUT SKIP EDIT (RCOUNT2,' CATALOGED DATASETS.') (A,A);              LISTRP\n /*********************************************************************/  LISTRP\n /* CLOSE THE INPUT FILES AND GET OUT.                                */  LISTRP\n /*********************************************************************/  LISTRP\n ALLDONE:                                                                 LISTRP\n    CLOSE FILE(RACFIN);                        /* CLOSE RACF FILE.    */  LISTRP\n    CLOSE FILE(LISTCAT);                       /* CLOSE LISTCAT FILE. */  LISTRP\n    RETURN(0);                                 /* TERMINATE BLOCK.    */  LISTRP\n    END LISTRP;                                /* THAT'S ALL FOLKS!   */  LISTRP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTU": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 176, "newlines": 176, "modlines": 0, "user": "FILE013"}, "text": "LISTU    TITLE 'LISTU - DISPLAY A USER''S NAME AND DEFAULT GROUP'\n**********************************************************************\n*                                                                    *\n*  PROGRAM NAME:  LISTU                                              *\n*                                                                    *\n*  FUNCTION:      TSO COMMAND PROCESSOR TO DISPLAY A USER'S NAME AND *\n*                 DEFAULT GROUP FROM THE  RACF DATA BASE.            *\n*                                                                    *\n*  LINKEDIT:      NORENT,NOREUS,AC=1                                 *\n*                                                                    *\n*  12/19/88   SJS                                                    *\n*                                                                    *\n**********************************************************************\n* SET UP PROGRAM ADDRESSABILITY                                      *\n**********************************************************************\nLISTU    CSECT\nLISTU    AMODE 24\nLISTU    RMODE 24\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         BALR  R12,0                   SET CURRENT ADDRESS\n         USING *,R12                   ESTABLISH ADDRESSABILITY\n         ST    R13,SAVE+4              CHAIN SAVE AREA\n         LR    R11,R13                 POINT TO CALLERS SAVE AREA\n         LA    R13,SAVE                POINT TO OUR SAVE AREA\n         ST    R13,8(R11)              CHAIN SAVE AREA\n**********************************************************************\n* MAP COMMAND PROCESSOR PARM LIST                                    *\n**********************************************************************\n         USING CPPL,R1                 ADDRESS CPPL\n         L     R2,CPPLCBUF             POINT TO COMMAND BUFFER\n         LA    R3,4(R2)                POINT TO START OF INPUT TEXT\n         AH    R3,2(R2)                POINT TO USERID ENTERED\n         AH    R2,0(R2)                POINT TO END OF COMMAND BUFFER\n         SR    R2,R3                   POINT TO PARAMETER ENTERED\n**********************************************************************\n* SEE IF RACF IS ACTIVE                                              *\n**********************************************************************\n         RACSTAT                       CHECK RACF STATUS\n         LTR   R15,R15                 IS RACF UP?\n         BZ    RACFOK                  YUP, KEEP GOING\n         TPUT  NORACF,L'NORACF         WRITE ERROR MESSGAE\n         B     RETURN                  RETURN TO CALLER\n         EJECT\n**********************************************************************\n* IF NO USER-ID WAS SPECIFIED, DEFAULT TO THE USER'S ID              *\n**********************************************************************\nRACFOK   DS    0H\n         CH    R2,=H'0'                WAS A USER-ID ENTERED?\n         BNE   PARMOK                  YUP, KEEP GOING\n         L     R5,X'10'                POINT TO CVT\n         USING CVT,R5                  CVT ADDRESSABILITY\n         L     R7,CVTTCBP              FIND THE TCB POINTERS\n         L     R6,12(0,R7)             LOAD CURRENT ASCB ADDRESS\n         USING ASCB,R6                 ASCB ADDRESSABILITY\n         L     R7,ASCBASXB             LOAD THE ASXB ADDRESS\n         USING ASXB,R7                 ASXB ADDRESSABILITY\n         DROP  R5,R6                   DROP BASES\n         LA    R6,ASXBUSER+6           POINT TO END OF USER-ID\n         LA    R8,7                    LOAD THE COUNTER\nUIDLOOP  DS    0H\n         CLC   =C' ',0(R6)             IS THIS BYTE A BLANK?\n         BNE   UIDCONT                 IF NOT, WE HAVE USERID LENGTH\n         BCTR  R6,0                    BUMP DOWN THE POINTER BY 1\n         BCT   R8,UIDLOOP              BUMP DOWN THE COUNTER BY 1\nUIDCONT  DS    0H\n         BCTR  R8,0                    MINUS 1 MORE FOR EXECUTE\n         MVC   USERID(0),ASXBUSER      EXECUTED MOVE FOR THE USERID\n         EX    R8,*-6                  EXECUTE THE MOVE\n         B     RACFCHK                 GO DO THE ICHEINTY\n         EJECT\n**********************************************************************\n* GET THE USER-ID TO USE FROM THE CPPL                               *\n**********************************************************************\nPARMOK   BCTR  R2,0                    MINUS 1 FOR EXECUTE\n         MVC   USERID(0),0(R3)         MOVE PARAMETER TO RACF PARMLIST\n         EX    R2,*-6                  EXECUTED MOVE\n         OC    USERID(0),=CL7' '       MAKE SURE IT'S UPPER CASE\n         EX    R2,*-6                  EXECUTE THE UPPER CASING\n         EJECT\n**********************************************************************\n* ISSUE SVC132 TO GET USER PROFILE INFO FROM RACF                    *\n**********************************************************************\nRACFCHK  ICHEINTY LOCATE,              LOCATE OUR USER'S PROFILE       X\n               TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA,                   X\n               ACTIONS=(ACTION1,ACTION2)\n         LTR   R15,R15                 WAS THE LOCATE SUCCESSFUL?\n         BZ    FOUND                   YUP, KEEP GOING\n         C     R15,=F'12'              WAS THE USER-ID FOUND?\n         BE    NOTFOUND                IF NOT, ISSUE ERROR MESSAGE\n**********************************************************************\n* IF THE RETURN CODE IS NOT ZERO OR 12, ISSUE AN ERROR MESSAGE       *\n**********************************************************************\n         CVD   R15,WORKD               CONVERT THE RETURN CODE TO DEC.\n         UNPK  ERRORCD,WORKD+6(2)      MOVE IT INTO THE ERROR MSG\n         OI    ERRORCD+1,X'F0'         MAKE LAST CHARACTER PRINTABLE\n         TPUT  RACFERR,L'RACFERR       ISSUE THE ERROR MESSAGE\n         B     RETURN                  RETURN TO CALLER\n         EJECT\n**********************************************************************\n* USER-ID WAS FOUND, FORMAT AND DISPLAY A LINE OF DATA.              *\n**********************************************************************\nFOUND    DS    0H\n         MVC   OUTLINE+5(8),USERID     MOVE USERID INTO OUTPUT MSG\n         MVC   OUTLINE+19(20),NAME     MOVE USER NAME INTO OUTPUT MSG\n         MVC   OUTLINE+54(8),GROUP     MOVE DFLT GROUP INTO OUTPUT MSG\n         TPUT  OUTLINE,L'OUTLINE       WRITE MESSAGE\n         B     RETURN                  RETURN TO CALLER\n**********************************************************************\n* USER-ID WAS NOT FOUND, ISSUE AN ERROR MESSAGE.                     *\n**********************************************************************\nNOTFOUND TPUT  NOTFND,L'NOTFND         ISSUE NOT FOUND MESSAGE\n         B     RETURN                  RETURN TO CALLER\n         EJECT\n**********************************************************************\n* RESTORE REGISTERS AND RETURN TO THE CALLER                         *\n**********************************************************************\nRETURN   L     R13,SAVE+4              LOAD CALLER'S SAVE AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER\n         EJECT\n**********************************************************************\n* WORKING STORAGE AND DATA AREAS                                     *\n**********************************************************************\nSAVE     DS    18F                     MY SAVE AREA\nWORKD    DS    D                       DOUBLEWORD WORK AREA\nENTRY    DC    AL1(7)                  LENGTH OF USERID FIELD\nUSERID   DC    XL8'00'                 USERID\n         DS    0F                      ALIGNMENT\nWKAREA   DC    AL4(WKAREAL)            LENGTH OF WORKAREA\nRBA      DS    CL6                     RBA OF RACF RECORD\nFLAGS    DS    X                       FLAGS\n         DS    C                       RESERVED\nDUPCOUNT DS    AL4                     DUPLICATE RECORD COUNT\n         DS    CL8                     RESERVED\nRETLEN   DS    AL4                     LENGTH OF RETURNED DATA\nNAMEL    DS    AL2                     LENGTH OF USER NAME\nNAME     DS    CL20                    USER NAME FROM USER PROFILE\nGRPL     DS    AL2                     LENGTH OF GROUP-ID\nGROUP    DS    CL8                     DFLT GROUP-ID FROM USER PROFILE\nWKAREAL  EQU   *-WKAREA                WORK AREA LENGTH\nOUTLINE  DC    CL62'USER=XXXXXXXX NAME=XXXXXXXXXXXXXXXXXXXX DEFAULT-GRO+\n               UP=XXXXXXXX'\nNORACF   DC    C'RACF IS NOT CURRENTLY ACTIVE'\nNOTFND   DC    C'USERID NOT FOUND'\nRACFERR  DC    C'RACF ERROR, RETURN CODE FROM ICHEINTY MACRO = XX'\n         ORG   RACFERR+46\nERRORCD  DS    CL2                     ICHEINTY RETURN CODE\n         ORG\n         EJECT\nACTION1  ICHEACTN FIELD=PGMRNAME       TELL IT WE WANT PGMRNAME\nACTION2  ICHEACTN FIELD=DFLTGRP        TELL IT WE WANT DEFAULT GROUP\n         EJECT\n         PRINT NOGEN\n         IKJCPPL                       COMMAND PROCESSOR PARM LIST\n         IHAASCB                       ADDRESS SPACE CONTROL BLOCK\n         IHAASXB                       ADDRESS SPACE EXTENSION BLOCK\n         CVT   DSECT=YES,LIST=NO       COMMUNICATIONS VECTOR TABLE\n**********************************************************************\n* REGISTER EQUATES                                                   *\n**********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACROS": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00g\\x00g\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "FILE013"}, "text": "         MACRO\n         AINILIST\n**********************************************************************\n*  DSECT NAME -                                                      *\n*     AINILIST                                                       *\n*  FUNCTION -                                                        *\n*     PROVIDE MAPPING FOR THE PARAMETER LIST PASSED TO THE RACINIT   *\n*     EXIT ROUTINES (ICHRIX01 AND ICHRIX02).  THIS DSECT WAS DERIVED *\n*     FROM THE 'RACF INSTALLATION REFERENCE MANUAL'.                 *\n**********************************************************************\nAINILIST DSECT                     RACINIT PARAMETER LIST\nAINI@LEN DS    A                   ADDRESS OF FULLWORD LENGTH\nAINI@FG1 DS    A                   ADDRESS OF FLAG BYTE:\nAINIECRE EQU   X'00'               ENVIR=CREATE SPECIFIED\nAINIECHA EQU   X'40'               ENVIR=CHANGE SPECIFIED\nAINIEDEL EQU   X'80'               ENVIR=DELETE SPECIFIED\nAINISMCY EQU   X'00'               SMC=YES SPECIFIED\nAINISMCN EQU   X'20'               SMC=NO SPECIFIED\nAINISUBP EQU   X'10'               SUBPOOL SPECIFIED\nAINICHKY EQU   X'00'               PASSCHK=YES SPECIFIED\nAINICHKN EQU   X'08'               PASSCHK=NO SPECIFIED\nAINI@UID DS    A                   ADDRESS OF USERID\nAINI@PWD DS    A                   ADDRESS OF PASSWORD\nAINI@PRO DS    A                   ADDRESS OF PROCEDURE NAME\nAINI@INS DS    A                   ADDRESS OF INSTALLATION PARAMETERS\nAINI@GRP DS    A                   ADDRESS OF GROUP NAME\nAINI@NEW DS    A                   ADDRESS OF NEW PASSWORD\nAINI@ACE DS    A                   ADDRESS OF ACEE\nAINI@NAM DS    A                   ADDRESS OF PROGRAMMER NAME FIELD\nAINI@ACT DS    A                   ADDRESS OF ACCOUNTING DATA\nAINI@OID DS    A                   ADDRESS OF OPERATOR ID CARD INFO\nAINI@TRM DS    A                   ADDRESS OF TERMINAL IDENTIFIER\nAINI@WRK DS    A                   ADDRESS OF WORK AREA OR ZERO\nAINI@ABE DS    A                   ADDRESS OF RACF ABEND CODE\nAINI@RTC DS    A                   ADDRESS OF RACINIT RETURN CODE\nAINI@FG2 DS    A                   ADDRESS OF FLAG BYTE:\nAINIIOID EQU   X'80'               BYPASS OIDCARD PROCESSING\nAINI@TDA DS    A                   ADDRESS OF TERMINAL DATA\nAINI@UDA DS    A                   ADDRESS OF USER DATA\nAINI@TLV DS    A                   ADDRESS OF TERMINAL LEVEL\nAINI@JOB DS    A                   ADDRESS OF JOBNAME\nAINI@APP DS    A                   ADDRESS OF APPL NAME\nAINI@SUB DS    A                   ADDRESS OF SUBPOOL\nAINI@ACA DS    A                   ADDRESS OF ACEE FROM RACINIT\nAINI@ADA DS    A                   ADDRESS OF APPL DATA\nAINI@ALV DS    A                   ADDRESS OF APPL LEVEL\nAINI@PCI DS    A                   ADDRESS OF PASSWORD CHANGE INTERVAL\nAINI@PCD DS    A                   ADDRESS OF LAST PASSWORD CHANGE DATE\n         MEND\n         MACRO\n         REGS\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NJEPROP1": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE013"}, "text": "++USERMOD (UMOD0XX)\n  /**********************************************/\n  /*  USERMOD NAME -                            */\n  /*     UMOD0XX                                */\n  /*  FUNCTION -                                */\n  /*     THIS USERMOD TO JES2 1.3.4 CAUSES THE  */\n  /*     PROPOGATED USERID/GROUP INFORMATION TO */\n  /*     BE TRANSMITTED ACROSS NJE NODES (SEE   */\n  /*     JES2 APAR OZ81051 - RACF 1.6 ENHANCE-  */\n  /*     MENTS).     @ LEVEL 8801               */\n  /**********************************************/.\n++VER (Z038) FMID (HJE2330) PRE (UY17072).\n++SRCUPD (HASPNET).\n./ CHANGE NAME=HASPNET\n         B     JJOBTRNS             TRANSMIT AUTH INFO ALWAYS   UMOD0XX\n         B     NSTJCT03             TRANSMIT AUTH INFO ALWAYS   UMOD0XX\n++SRCUPD (HASPRDR).\n./ CHANGE NAME=HASPRDR\n         B     RNJHRETN             ALWAYS SKIP AUTH ZEROING    UMOD0XX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NJEPROP2": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE013"}, "text": "++USERMOD (UMOD0YY)\n  /******************************************************************/\n  /*  USERMOD NAME -                                                */\n  /*     UMOD0YY                                                    */\n  /*                                                                */\n  /*  FUNCTION -                                                    */\n  /*     THIS USERMOD FOR JES2 (2.1.5) WILL PERFORM                 */\n  /*     \"JES PROPAGATION\" (SEE APAR OZ81051) ACCROSS               */\n  /*     NJE NODES.  @ LEVEL 8801                                   */\n  /*                                                                */\n  /*  REQUIREMENTS -                                                */\n  /*     RACF 1.6 OR HIGHER MUST BE INSTALLED.                      */\n  /*                                                                */\n  /*  NOTES -                                                       */\n  /*     THIS MOD SHOULD BE ACCOMPANIED BY A JES EXIT#2             */\n  /*     THAT VERIFIES \"TRUSTED\" NODES OF A COMPANY'S               */\n  /*     NETWORK OF NODES.                                          */\n  /*                                                                */\n  /******************************************************************/.\n++VER (Z038) FMID (HJE2215) PRE (UY17074).\n++SRCUPD (HASPNET).\n./ CHANGE NAME=HASPNET\n         B     JNODECHK             TRANSMIT AUTH INFO ALWAYS   UMOD0YY\n         B     NSTJCT03             TRANSMIT AUTH INFO ALWAYS   UMOD0YY\n++SRCUPD (HASPRDR).\n./ CHANGE NAME=HASPRDR\n         B     RNJHRETN             ALWAYS SKIP AUTH ZEROING    UMOD0YY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NJEPROP3": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE013"}, "text": "++USERMOD (UMOD0ZZ)\n  /******************************************************************/\n  /*  USERMOD NAME -                                                */\n  /*     UMOD0ZZ                                                    */\n  /*                                                                */\n  /*  FUNCTION -                                                    */\n  /*     THIS USERMOD FOR JES2 (2.2.0) WILL PERFORM                 */\n  /*     \"JES PROPAGATION\" (SEE APAR OZ81051) ACCROSS               */\n  /*     NJE NODES.  @ LEVEL 8801                                   */\n  /*                                                                */\n  /*  REQUIREMENTS -                                                */\n  /*     RACF 1.6 OR HIGHER MUST BE INSTALLED                       */\n  /*                                                                */\n  /*  NOTES -                                                       */\n  /*     THIS MOD SHOULD BE ACCOMPANIED BY A JES EXIT#2             */\n  /*     THAT VERIFIES \"TRUSTED\" NODES OF A COMPANY'S               */\n  /*     NETWORK OF NODES.                                          */\n  /*                                                                */\n  /******************************************************************/.\n++VER (Z038) FMID (HJE2221) PRE (UY17075).\n++SRCUPD (HASPNET).\n./ CHANGE NAME=HASPNET\n         B     JNODECHK             TRANSMIT AUTH INFO ALWAYS   UMOD0ZZ\n         B     NSTJCT03             TRANSMIT AUTH INFO ALWAYS   UMOD0ZZ\n++SRCUPD (HASPRDR).\n./ CHANGE NAME=HASPRDR\n         B     RNJHRETN             ALWAYS SKIP AUTH ZEROING    UMOD0ZZ\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OMRACF": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x97\\x01\\x97\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 407, "newlines": 407, "modlines": 0, "user": "FILE013"}, "text": "URACF    TITLE 'RACF VALIDATION CHECK FOR OMEGAMON'\n*\n*****************************************************************\n*  URACF -  OMEGAMON/RACF INTERFACE FOR EXTERNAL SECURITY       *\n*           CHECKING AND VTAM LOGON                             *\n*                                                               *\n*                                                               *\n*  ON ENTRY: R15 - ADDRESS OF OM$URACF (BASE REG)               *\n*            R13 - SAVE AREA                                    *\n*            R14 - RETURN ADDRESS                               *\n*            R1  - PARM                                         *\n*                  +00 - $UCHECK WORKAREA                       *\n*                                                               *\n*  UACF2 LOGIC:                                                 *\n*                                                               *\n*           PHASE 1) - IF OMVTAM, VALIDATE USERID AND PASSWORD  *\n*           PHASE 2) - ALL MODES, SET INTERNAL SECURITY LEVEL   *\n*           PHASE 3) - ALL MODES, VALIDATE OMEGAMON COMMANDS    *\n*                                                               *\n*           OMEGAMON MUST BE APF AUTHORIZED TO PROCESS          *\n*           THE FOLLOWING:                                      *\n*                                                               *\n*           1) VALIDATION OF USERID AND PASSWORD FOR VTAM MODE  *\n*                                                               *\n*  NOTE:                                                        *\n*           THE CODE FOR THIS EXIT IS NOT SUPPORTED BY          *\n*           CANDLE.  IT IS AN EXAMPLE OF A WORKING EXIT         *\n*           THAT SHOULD BE USED AS A STARTING POINT.            *\n*           REFER TO YOUR RACF PROGRAMMERS GUIDE FOR            *\n*           ADDITIONAL INFORMATION.                             *\n*                                                               *\n*****************************************************************\nOM$URACF START 0\n         SAVE  (14,12),,OM$URACF-&SYSDATE-&SYSTIME\n         LR    RC,RF              SET BASE REGISTER\n         USING OM$URACF,RC\n         L     R2,0(R1)            GET PASSED PARAMS\n         ST    RD,4(R2)            CHAIN THEM\n         ST    R2,8(RD)            MORE CHAIN\n         LR    RD,R2               A NEW SAVE AREA\n         USING $UCHECK,RD\n         MVI   M#SW1,0             RESET MY SWITCH\n         OI    U#CHAUT1,U@CH1RAC   SET SECURITY SYSTEM TO RACF\n*** MCI *** FOLLOWING TWO (2) LINES ADDED TO MOVE IN CLASS DESCRIPTOR\n         MVI   U#CHCLS,L'M$OMCLAS  MOVE IN CLASS DESCRIPTOR LENGTH\n         MVC   U#CHCLSD,M$OMCLAS   MOVE IN CLASS DESCRIPTOR\n*\n*        ARE WE AUTHORIZED ?\n*\n         TESTAUTH FCTN=1           ARE WE AUTHORIZED?\n         LTR   RF,RF               CHECK IT OUT\n         BNZ   *+8                 NOT AUTH'D\n         OI    M#SW1,M@SW1AUT      INDICATE AUTHORIZATION\n*\n         CLI   U#CHTYP,U@CHCOM    IS IT COMMAND VALIDATION\n         BE    CKCMDVER            YES, DO IT NOW\n         CLI   U#CHTYP,U@CHTERM   IS IT TERMINATION?\n         BE    CKTERM              YES, DO IT NOW\n         CLI   U#CHTYP,U@CHINIT   IS IT INITIALIZATION?\n         BNE   EXIT0               NOT MY CALL\n*\n*        SEE IF CLASS OMCANDLE IS ACTIVE AND RACF IS ACTIVE\n*\n         MVC   OMRACSL(RACSMDLL),RACSMDL SET MODEL FOR RACSTAT\n         RACSTAT CLASS=U#CHCLSD,MF=(E,OMRACSL)\n         ST    RF,M#SRET            RACSTAT RETURN VALUE\n         CH    RF,=H'4'             IS RACF ACTIVE? WITH CLASS\n         BL    ISAUTHD              ACTIVE\n         BH    EXIT0                NO, RACF/CLASS NOT THERE\n*\n*        CLASS INACTIVE, INDICATE TO USER\n*\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG00)/2(L'MSG00),MSG00\n         B     EXIT4\n*\n*        IF USERID, THEN MUST BE OMVTAM.\n*\nISAUTHD  EQU   *\n         CLI   U#CHUID,0           ANY USER ID?\n         BE    CHOMEGA             NO, VTAM LOGON CODE\n*\n*****************************************************************\n* PHASE 1 -                                                     *\n*                                                               *\n*     VALIDATE VTAM USERID AND PASSWORD AND CHANGE PASSWORD     *\n*     IF REQUESTED.                                             *\n*                                                               *\n*****************************************************************\n*\n*        ARE WE AUTHORIZED, IF NOT, FAIL, CANNOT VERIFY PASSWORD\n*\n         TM    M#SW1,M@SW1AUT      ARE WE AUTH'D?\n         BO    VALIDAT             YES, CONTINUE\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG01)/2(L'MSG01),MSG01\n         B     EXIT4                   EXIT\n*\n*        FREE ANY PRIOR ACEE, THIS MAY BE A RELOGON AND WE DO NOT\n*        WANT ACEES HANGING AROUND.\n*\nVALIDAT  EQU   *\n         BAL   R9,FREEACEE         FREE IT\n*\n*        CHECK THE USERID / PASSWORD\n*\nCHKUID   DS    0H\n         SLR   R2,R2                   NO GROUP\n         CLI   U#CHGRP,0               ANY GROUP?\n         BE    *+8                     NO\n         LA    R2,U#CHGRP              POINT TO IT\n         SLR   R3,R3                   NO PASSWORD\n         CLI   U#CHNPW,0               ANY NEW PASSWORD?\n         BE    *+8                     NO\n         LA    R3,U#CHNPW              POINT TO IT\n         MVC   M#RACIL(RACIMDLL),RACIMDL SET MODEL CODE IN PLACE\n         RACINIT USERID=U#CHUID,        USER ID FIELD                  X\n               PASSWRD=U#CHCMD,         STORED IN COMMAND FIELD        X\n               GROUP=(R2),                                             X\n               NEWPASS=(R3),                                           X\n               ENVIR=CREATE,                                           X\n               ACEE=U#CHACEE,                                          X\n               SMC=NO,                                                 X\n               PASSCHK=YES,                                            X\n               MF=(E,M#RACIL)           USE THIS STORAGE\n         ST    RF,M#IRET                SAVE IT\n*\n*        DETERMINE IF RECOVERABLE ERROR\n*\n         CH    RF,=H'20'                AN ERROR?\n         BH    EXIT4                    YES, TOO BAD\n         B     *+4(RF)                  INTO THE TABLE\n         B     CHOMEGA              0   GOOD\n         B     INUID                4 INVALID USER ID\n         B     INPWD                8 INVALID PASSWORD\n         B     EXPWD               12 EXPIRED PASSWORD\n         B     INNPW               16 INVALID NEW PASSWORD\n         B     INGRP               20 INVALID GROUP ID\n*\n*        INVALID USER ID\n*\nINUID    EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG04)/2(L'MSG04),MSG04\n         B     EXIT4                  DO NOT ALLOW\n*\n*        INVALID PASSWORD\n*\nINPWD    EQU   *\n         MVI   U#CHCMD,0             NO LONGER VALID\n         LH    R1,M#PWTIME           GET COUNT\n         LA    R1,1(R1)              A HIGHER COUNT\n         CH    R1,=H'3'              MUST NOT BE MORE\n         BH    INPWDA                TOO BAD, EXIT ERROR\n         STH   R1,M#PWTIME           SAVE FOR NEXT TRY\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG08A)/2(L'MSG08A),MSG08A\n         B     EXIT4A                 RETRY IT\nINPWDA   EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG08B)/2(L'MSG08B),MSG08B\n         B     EXIT4                  DO NOT ALLOW\n*\n*        EXPIRED PASSWORD\n*\nEXPWD    EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG12)/2(L'MSG12),MSG12\n         B     EXIT4A                 SECOND TRY\n*\n*        NEW PASSWORD ERRROR\n*\nINNPW    EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG16)/2(L'MSG16),MSG16\n         MVI   U#CHNPW,0               RESET PASSWORD\n         B     EXIT4A                 SECOND TRY\n*\n*        INVALID GROUP ID\n*\nINGRP    EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG20)/2(L'MSG20),MSG20\n         MVI   U#CHGRP,0               SET LENGTH OFF\n         B     EXIT4A                 SECOND TRY\n*\n*****************************************************************\n* PHASE 2 -                                                     *\n*                                                               *\n*   CHECK RESOURCE INITIAL3,2,1,0 AND IF DEFINED LOCK /PWD TO   *\n*   THE RESPECTIVE LEVEL.                                       *\n*                                                               *\n*   A RESOURCE OF INITIAL (WITHOUT A NUMBER) ALLOWS THE USER    *\n*   TO SET HIS OWN SECURITY LEVEL VIA THE /PWD COMMAND          *\n*                                                               *\n*   IF NO RESOURCE IS DEFINED THEN NO ONE WILL BE ALLOWED TO    *\n*   USE OMEGAMON....SO DEFINE AT LEAST ONE RESOURCE.            *\n*                                                               *\n*****************************************************************\n*        HE IS WHO HE SAID HE IS, IS OMEGAMON ALLOWED?\nCHOMEGA  EQU   *\n         LA    R3,OMENTS           POINT TO TABLE OF RESOURCES\nRCHECK   DS    0H\n         L     R2,U#CHACEE          POINT TO ACEE IF PRESENT\n         MVC   M#RACCL(RACCMDLL),RACCMDL SET MODEL FOR RACHECK\n         RACHECK ACEE=(R2),ENTITY=((R3)),CLASS=U#CHCLS,                X\n               MF=(E,M#RACCL)\n         ST    RF,M#CRET            RACSTAT RETURN VALUE\n         B     *+4(RF)              DO IT\n         B     CKOK             0   USER IS AUTHORIZED\n         B     NOTDEF           4   NOT DEFINED, SAME AS A REJECT\n         B     CKLEVL           8   NOT AT THIS LEVEL\n         B     SETLOW          12   SHOULD NOT OCCUR\nNOTDEF   EQU   *\nCKLEVL   EQU   *\n         LA    R3,L'OMENTS(R3)     NEXT ONE\n         CLI   0(R3),255           END OF LIST?\n         BNE   RCHECK              NO, DO MORE\n         B     NOTALLOW            TOO BAD, DON'T ACCEPT IT\nSETLOW   EQU   *\n         LA    R3,OMENT0            PASS WITH LOW AUTH\nCKOK     EQU   *\n         MVC   U#CHAUT4,OMENTOFF(R3) GET NUMBER 0 - 3 DECIMAL\n         NI    U#CHAUT4,X'0F'    CLEAR TOP OF BYTE\n         CLI   OMENTOFF(R3),C' '   IS IT BLANK? (XXXXXXX_)\n         BE    EXIT0               YES, NOT LOCKED\n         OI    U#CHAUT1,U@CH1LOK   INDICATE WE WERE THERE\n         B     EXIT0\nNOTALLOW EQU   *\n         MVC   U#CHMSG+(L'U#CHMSG-L'MSG25)/2(L'MSG25),MSG25 TEXT\n*\n*        RELEASE THE ACEE\n*\n         BAL   R9,FREEACEE          FREE IT\n         B     EXIT4                FAIL REQUEST\n*\n*        TERMINATION ROUTINE HERE\n*\nCKTERM   DS    0H\n*\n*        IF AUTHORIZED, THEN RELEASE ACEE\n*\n         TM    M#SW1,M@SW1AUT      INDICATE AUTHORIZATION\n         BNO   EXIT0               NOTHING TO DO\n*\n*        RELEASE THE ACEE\n*\n         BAL   R9,FREEACEE          FREE IT\n         B     EXIT0                 CONTINUE\n*\n*****************************************************************\n* PHASE 2 -                                                     *\n*                                                               *\n*  EXTERNAL COMMANDS ARE VALIDATED HERE.  THE CLASS CANDLE      *\n*  SUPPLIES IS 'OMCANDLE' AND THE RESOURCE IS THE OMEGAMON      *\n*  COMMAND.                                                     *\n*                                                               *\n*****************************************************************\n*\n*        COMMAND VERIFICATION HERE\n*\nCKCMDVER DS    0H\n         MVI   M#SCR32,C' '                     INSERT A BLANK\n         MVC   M#SCR32+1(L'M#SCR32-1),M#SCR32   BLANK ENTIRE BUFFER\n*\n*        CHANGE COMMANDS THAT HAVE NON STANDARD SYNTAX TO SOMETHING\n*        RACF CALL DEAL WITH\n*\n         CLI   U#CHCMDD,C'/'   /GIVE => $GIVE   IS THIS AN INFO-LINE\n         BNE   CKCMD00                          NO, LOOK FOR A DOT\n         MVI   U#CHCMDD,U@CHCINF                REPLACE WITH NEW CHAR\n         B     CKCMD10\nCKCMD00  DS    0H\n*\n         CLI   U#CHCMDD,C'.'  .DIR => @DIR      IS THIS A DOT CMD\n         BNE   CKCMD10                          NO, NORMAL COMMAND\n         MVI   U#CHCMDD,U@CHCDOT                REPLACE WITH NEW CHAR\nCKCMD10  DS    0H\n*\n         MVC   M#SCR32(8),U#CHCMDD              MOVE IN COMMAND\n         L     R3,U#CHACEE                      GET ADDRESS OF ACEE\n         LA    R4,M#SCR32                       LOAD RESOURCE ADDR\n         LA    R5,U#CHCLS                       LOAD CLASS ADDR\n*\n         MVC   M#RACCL(RACCMDLL),RACCMDL SET MODEL FOR RACHECK\n         RACHECK ENTITY=((R4)),CLASS=(R5),ATTR=READ,                   X\n               ACEE=(R3),MF=(E,M#RACCL)\n*\n         B     *+4(15)             TEST RACHECK RETURN CODES\n         B     EXIT0           0   ACCESS IS ALLOWED\n         B     EXIT4           4   RESOURCE NOT DEFINED TO RACF\n         B     EXIT8           8   RESOURCE NOT ALLOWED BY RACF\n         B     EXIT4           C   SHOULD NEVER HAPPEN\n*\n*        RETURN TO CALLER WITH PROPER RETURN CODE\n*\nEXIT0    DS    0H\n         LA    RF,0                SET RETURN CODE\n         B     INPW990\n*\nEXIT4A   DS    0H\n         OI    U#CHRESP,U@CHRSHO   SET RESHOW BEFORE EXIT\nEXIT4    DS    0H\n         LA    RF,4                SET RETURN CODE\n         B     INPW990\n*\nEXIT8    DS    0H\n         MVC   U#CHMSG(L'MSG30+L'MSG30A),MSG30  MOVE IN MESSAGE\n         OI    U#CHRESP,U@CHMSHO   SET MSG PENDING FLAG\n         LA    RF,8                SET RETURN CODE\n         B     INPW990\n*\nINPW990  DS    0H\n         L     RD,4(RD)              PRIOR SAVE\n         RETURN (14,12),RC=(15)      RETURN TO THE CALLER\n*\n* RELEASE ACEE SUBROUTINE\n*\nFREEACEE DS    0H\n         CLC   U#CHACEE,=A(0)       IS THERE AN ACEE?\n         BER   R9                   NO, GET OUT OF HERE FAST!\n         XC    M#PWTIME,M#PWTIME    ALLOW FULL MULTIPLE TRY\n         MVC   M#RACFL(RACFMDLL),RACFMDL   MOVE IN DELETE MODEL\n         RACINIT ACEE=U#CHACEE,MF=(E,M#RACFL)\n         XC    U#CHACEE,U#CHACEE    RESET IT\n         BR    R9                   RETURN TO CALLER\n*\nRACIMDL  RACINIT USERID=*-*,            USER ID FIELD                  X\n               PASSWRD=*-*,             STORED IN COMMAND FIELD        X\n               GROUP=*-*,                                              X\n               NEWPASS=*-*,                                            X\n               ENVIR=CREATE,                                           X\n               ACEE=*-*,                                               X\n               SMC=NO,                                                 X\n               PASSCHK=YES,                                            X\n               APPL=M$APPL,                                            X\n               MF=L                     MODEL CODE\nRACIMDLL EQU   *-RACIMDL\nRACFMDL  RACINIT ACEE=*-*,                                             X\n               ENVIR=DELETE,                                           X\n               SMC=NO,                                                 X\n               MF=L                     MODEL CODE\nRACFMDLL EQU   *-RACFMDL\nRACSMDL  RACSTAT CLASS=*-*,MF=L\nRACSMDLL EQU   *-RACSMDL\nRACCMDL  RACHECK ENTITY=(*-*),                                         X\n               CLASS=*-*,                                              X\n               ATTR=READ,                                              X\n               APPL=M$APPL,                                            X\n               MF=L\nRACCMDLL EQU   *-RACCMDL\n*\nOMENTS   DS    0CL32\n         DC    CL32'INITIAL3'\nOMENTOFF EQU   7              OFFSET TO NUMERIC FLAG VALUE\n         DC    CL32'INITIAL2'\n         DC    CL32'INITIAL1'\nOMENT0   DC    CL32'INITIAL0'\n         DC    CL32'INITIAL '\n         DC    AL1(255)\n*\nM$APPL   DC    CL8'CANDLE'\nM$OMCLAS DC    CL8'$OMEGAMN'\n*\nMSG00    DC    C'REQUIRED RACF CLASS INACTIVE'\nMSG01    DC    C'SESSION NOT APF AUTHORIZED'\nMSG04    DC    C'USER NOT DEFINED TO RACF'\nMSG08A   DC    C'INVALID PASSWORD, REENTER RACF PASSWORD'\nMSG08B   DC    C'INVALID PASSWORD, SESSION REJECTED BY RACF'\nMSG12    DC    C'PASSWORD HAS EXPIRED, ENTER NEW PASSWORD'\nMSG16    DC    C'NEW PASSWORD IS INVALID, REENTER'\nMSG20    DC    C'USER NOT DEFINED TO THIS GROUP, REENTER GROUP'\nMSG25    DC    C'RESOURCE CHECKING DONE BY RACF'\nMSG30    DC    CL20' '\nMSG30A   DC    C'>> SECURITY CHECK FAILED (RACF) <<'\n*\n         $UCHECK ,\n         ORG   U#CHUSER              GO TO USER AREA\nM#SW1    DS    X\nM@SW1AUT EQU   B'10000000'            AUTHORIZED\nM#PWTIME DS    H                     NUMBER OF PASSWORD ATTEMPTS\nM#SRET   DS    F                     RACSTAT RETURN CODE\nM#IRET   DS    F                     RACINIT RETURN CODE\nM#CRET   DS    F                     RACHECK RETURN CODE\nM#SCR32  DS    CL32                  32 SCRATCH BYTES\n         DS    0F\nM#RACIL  DS    XL(RACIMDLL)          RACINIT WORK AREA\n         ORG   M#RACIL               USE SAME AREA\nOMRACSL  DS    XL(RACSMDLL)\n         ORG   M#RACIL               USE SAME AREA\nM#RACCL  DS    XL(RACCMDLL)\n         ORG   M#RACIL               USE SAME AREA\nM#RACFL  DS    XL(RACFMDLL)\n         ORG   ,\nM@VERFY  EQU   $UCHECK-(*-$UCHECK)+U@CHLEN   OVERLAY\n*\n*        REGISTER EQUATES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         END   OM$URACF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OUSRSCT": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x002\\x002\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "FILE013"}, "text": "         MACRO                                                          01-USRSC\n         USRSCT                                                         01-USRSC\n**********************************************************************  01-USRSC\n*  DSECT NAME -                                                      *  01-USRSC\n*     USRSCT                                                         *  01-USRSC\n*  FUNCTION -                                                        *  01-USRSC\n*     THIS MACRO MAPS THE USER SCT.  IT CONTAINS INFORMATION ABOUT   *  01-USRSC\n*     THE LOGGED ON USER AND APPLIES TO TERMINAL SCT ONLY.           *  01-USRSC\n*     THIS STORAGE IS ACQUIRED BY THE LOGON EXIT SASSXXL1 THE        *  01-USRSC\n*     FIRST TIME A TERMINAL BECOMES ACTIVE.                          *  01-USRSC\n**********************************************************************  01-USRSC\nUSRSCT   DSECT                                                          01-USRSC\nUSR#FLG1 DS    X                   FLAG1 FIELDS                         01-USRSC\nUSR#TACT EQU   X'80'               TERMINAL ACTIVE                      01-USRSC\nUSR#RACF EQU   X'40'               ACEE ACQUIRED                        01-USRSC\nUSR#NOR  EQU   X'20'               NO RACF CHECKING FOR USER            01-USRSC\nUSR#XACE EQU   X'10'               DELETE ACEE                          01-USRSC\nUSR#RCHK EQU   X'08'               RACHECK REQUEST                      01-USRSC\nUSR#FLG2 DS    X                   * RESERVED *                         01-USRSC\nUSR#FLG3 DS    X                   * RESERVED *                         01-USRSC\nUSR#FLG4 DS    X                   * RESERVED *                         01-USRSC\nUSR#ACEE DC    A(0)                POINTER TO ACTIVE ACEE               01-USRSC\n*\n* THE UCC7 OPID CAN ONLY BE 6 BYTES IN LENGTH.\n* SINCE WE USE OPID AS RACF GROUP AND MANY USERS HAVE 8 CHARACTER\n* RACF GROUP NAMES, A TRANSLATION IS MADE FROM 8 CHARACTER GROUP\n* NAME TO A 1-6 CHARACTER OPID IF THE GROUP PASSED IS GREATER THAN\n* SIX CHARACTERS.\n*\nUSR#OPID DC    CL6' '              UCC7 OPID                            01-USRSC\nUSR#LGRP DC    X'00'               LENGTH OF GROUP OR OPID              01-USRSC\nUSR#GRP  DC    CL8' '              GROUP NAME                           01-USRSC\nUSR#LUSR DC    X'00'               LENGTH OF USER ID                    01-USRSC\nUSR#UID  DC    CL7' '              USER ID                              01-USRSC\nUSR#LPAS DC    X'00'               LENGTH OF PASSWORD                   01-USRSC\nUSR#PASS DC    CL8' '              USER PASSWORD\nUSR#SAVE DS    72F                 SAVE AREA FOR USER ROUTINES\nUSR#XADR DS    3F                  RACF SUB TASK PARMS\nUSR#RPRM DS    7F                  RACF ROUTINE PARM\nUSR#DATE DS    CL5                 UNPACKED CURRENT DATE\nUSR#PDAT DS    PL3                 PACKED CURRENT DATE\nUSR#PLST DS    10F                 PLIST FOR SAS ROUTINES\nUSR#VOL  DS    CL6                 VOLUME FOR LOCATE REQUEST\nUSR#WORK DS    CL265               USER WORK AREA\n         DS    0F                  FULLWORD ALIGN\nUSR#RIDP DS    CL(RACDEND-RACDEL)  RACINIT DELETE PARMLIST\nUSR#RICP DS    CL(RACCEND-RACCRE)  RACINIT CREATE PARMLIST\nUSR#RCP  DS    CL(RACHKEND-RACHK)  RACHECK PARMLIST\nUSR#SIZE EQU   *-USRSCT            USRSCT LENGTH\n         MEND                                                           01-USRSC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFALT": {"ttr": 4102, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01V\\x01V\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 342, "newlines": 342, "modlines": 0, "user": "FILE013"}, "text": "         TITLE 'RACFALT - GEN CLIST FOR ALTERING RACF DATA SET DEF'\n***********************************************************************\n*                                                                     *\n*                D  I  S  C  L  A  I  M  E  R                         *\n*                                                                     *\n*        AS ALWAYS YOU USE THIS PROGRAM AT YOUR OWN RISK. THERE       *\n*        ARE NO GUARANTEES INTENDED.                                  *\n*                                                                     *\n*                                                                     *\n*             MODULE NAME = RACFALT                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME = GENERATE CLIST TO CHANGE THE         *\n*                VOLUME SERIAL NUMBERS IN THE NON-VSAM DATA           *\n*                SETS ON THE SPECIFIED VOLUME.                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                CREATES CLIST WHICH WILL ALLOW A SYSTEM              *\n*                PROGRAMMER TO CHANGE THE VOLUME SERIAL               *\n*                NUMBER IN EACH DATA SET ON A SPECIFIED               *\n*                VOLUME.  THIS WILL BE ACCOMPLISHED WITH              *\n*                THE 'ALTDSD' RACF COMMAND.                           *\n*                                                                     *\n*                OPERATION =                                          *\n*                   GET NEW VOLUME SERIAL NUMBER FROM PARAMETERS      *\n*                   OPEN THE VTOC FOR THE SPECIFIED VOLUME            *\n*                   OPEN THE SPECIFIED OUTPUT FILE (FOR CLIST)        *\n*                   READ FORMAT 1 RECORDS OF VTOC FOR DATA SET NAME   *\n*                   IGNORE CERTAIN DATA SETS, INCLUDING ALL VSAM      *\n*                   IF RACF PROTECTED,                                *\n*                     WRITE LINE TO CHANGE VOLUME SERIAL NUMBER       *\n*                   CONTINUE READING VTOC TIL ALL DATA SETS PROCESSED *\n*                   CLOSE VTOC AND OUTPUT FILE                        *\n*                   EXIT                                              *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 4  = LINKAGE & WORK REGISTERS     *\n*                    REGISTERS 5 TO 9  = WORK REGISTERS               *\n*                    REGISTER  10      = ADDRESSABILITY TO DCB        *\n*                    REGISTER  11      = ADDRESSABILITY TO JFCB &     *\n*                                        DSCB                         *\n*                    REGISTER  12      = WORK REGISTER                *\n*                    REGISTER  13      = SAVE AREA REGISTER AND       *\n*                                        ADDRESSABILITY TO GETMAINED  *\n*                                        WORK AREA                    *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*             MACROS =                                                *\n*                SAVE, GETMAIN, RDJFCB, OPEN, READ, CHECK,            *\n*                CLOSE, PUT                                           *\n*                                                                     *\n*             CHANGE ACTIVITY =                                       *\n*                10/21/83  WRITTEN.      BC.                          *\n*                                                                     *\n* SAMPLE JCL =                                                        *\n*                                                                     *\n*   //JOBNAME JOB (GEE1,0104),'PROG NAME',CLASS=S,MSGCLASS=A,         *\n*   //        MSGLEVEL=(2,0),USER=SYSPGM,PASSWORD=????????            *\n*   //STEP1 EXEC  PGM=RACFALT,PARM='NEWVOL'                           *\n*   //VTOC  DD UNIT=3350,VOL=SER=DLX170,DISP=OLD                      *\n*   //CLIST DD DSN=T99999.TEST.CLIST,VOL=SER=DLXTSO,UNIT=3380,        *\n*   //         DISP=(NEW,CATLG),SPACE=(TRK,(10,1)),                   *\n*   //         DCB=(RECFM=VB,LRECL=255,BLKSIZE=6233)                  *\n*                                                                     *\n***********************************************************************\n*\n         PRINT NOGEN\nRACFALT CSECT\n         SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15\n         USING RACFALT,R12             ESTABLISH ADDRESSABILITY\n         LR    R2,R1                   PRESERVE PTR TO PARMS\n         GETMAIN R,LV=LDATA            GET DYNAMIC WORK AREA\n         LR    R10,R1                  PRESERVE PTR TO WORK AREA\n         ST    R13,4(R10)              STORE ADDR OF PREVIOUS SA\n         ST    R10,8(,R13)             STORE ADDR OF CURRENT SA\n         LR    R13,R10                 LOAD ADDR OF CURRENT SA\n         USING WORKAREA,R13            ESTABLISH ADDRESSABILITY\n*\n*  GET PARMS TO DETERMINE THE ALTERNATE VOLUME.\n*\nGETPARM  EQU   *\n         L     R5,0(R2)                GET PARM ADDRESS\n         LH    R3,0(R5)                SAVE PARM LENGTH\n         LTR   R3,R3                   ANY PARM DATA?\n         BZ    GP40                    IF NOT, BRANCH TO ABEND\n         LA    R5,2(R5)                SKIP PARM LENGTH FIELD\n         LA    R4,PARMBUF              SET POINTER INTO PARM BUFFER\n         MVI   PARMBUF,X'40'           CLEAR PARM BUFFER\n         MVC   PARMBUF+1(L'PARMBUF-1),PARMBUF\nGP10     EQU   *\n         CLI   0(R5),C','              DELIMITING COMMA?\n         BE    GP20                    IF SO, BRANCH\n         MVC   0(1,R4),0(R5)           STORE PARM CHARACTER\n         LA    R4,1(R4)                INCREMENT PARM BUFFER POINTER\n         LA    R5,1(R5)                GO TO NEXT PARM CHARACTER\n         BCT   R3,GP10                 LOOP BACK TIL DONE\nGP20     EQU   *\n         MVC   ALTVOL,PARMBUF          STORE ALTERNATE VOLUME\n         B     INIT                    AND IGNORE ANYTHING ELSE\nGP40     EQU   *\n         ABEND 16,DUMP\n*\n*  INITIALIZE THE WORK AREA.  OPEN THE VTOC AND CLIST OUTPUT FILE.\n*    WRITE THE FIRST 2 LINES OF THE CLIST INTO THE OUTPUT FILE.\n*\nINIT     EQU   *\n         LA    R6,DATA                 SET UP REGISTERS FOR\n         LA    R7,MOVEL                  LONG MOVE\n         LA    R8,CDATA\n         LA    R9,MOVEL\n         MVCL  R6,R8                   LOAD INITIAL DATA INTO WORKAREA\n         LA    R10,VTOC                GET ADDRESS OF DCB1\n         USING IHADCB,R10              ADDRESSIBILITY TO DCB\n         LA    R11,JFCBA               GET ADDRESS OF BUFFER\n         ST    R11,EXLIST              STORE ADDRESS IN EXIT LIST\n         MVI   EXLIST,X'87'            SET END OF LIST & JFCB BYTE\n         LA    R6,EXLIST               GET ADDRESS OF EXIT LIST\n         ST    R6,DCBEXLST             STORE IN DCB\n         DROP  R10\n         RDJFCB (VTOC,),MF=(E,EX1)     READ JOB FILE CONTROL BLOCK\n         USING INFMJFCB,R11            ESTABLISH ADDRESSABILITY\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNZ   RETURN                  IF NOT SUCCESSFUL, EXIT\n         MVI   JFCBDSNM,X'04'          CHANGE DATASET NAME TO\n         MVC   JFCBDSNM+1(43),JFCBDSNM   44 X'04'S\n         OI    JFCBTSDM,JFCNWRIT       SET FLAG NOT TO WRITE BACK\n         MVC   VOL,JFCBVOLS            SAVE VOLSER\n         DROP  R11\n         OPEN  (VTOC,INPUT),TYPE=J,MF=(E,EX2) OPEN THE VTOC\n         LTR   R15,R15\n         BNZ   CLOSEX\nIN10     EQU   *\n         OPEN  (PRINT,OUTPUT),MF=(E,EX2) OPEN OUTPUT FILE\n         LTR   R15,R15\n         BNZ   CLOSEX\n         MVI   LINE,X'40'              INITIALIZE LINE\n         MVC   LINE+1(L'LINE-1),LINE     TO ALL SPACES\n         LA    R5,RPARMS               SET R5 TO PARM ADDRESS\n         MVC   DLXCMD(L'FSTLINE),FSTLINE\n         BAL   R3,PRINTIT              OUTPUT FIRST LINE OF CLIST\n         MVC   DLXCMD(L'SNDLINE),SNDLINE\n         BAL   R3,PRINTIT              OUTPUT SECOND LINE OF CLIST\n*\n*  READ THE VTOC FORMAT-1 RECORDS.  PROCESS ALL NON-VSAM DATA SETS\n*    ON VOLUME WITH THE EXCEPTION OF A FEW (SUCH AS THE VTOC INDEX,\n*    CATALOG, CATALOG INDEX, TEMPORARY DATA SETS, ETC.)\n*\nREADIT   EQU   *\n         READ  DECB,SF,VTOC,DSCB,'S',MF=E  READ A VTOC RECORD\n         CHECK DECB                    WAIT TIL DONE\n         USING IECSDSL1,R11            ESTABLISH ADDRESSABILITY\n         LA    R11,DSCB                LOAD DSCB ADDRESS\n         CLI   DS1FMTID,C'1'           FORMAT 1 RECORD?\n         BNE   READIT                  IF NOT, GO BACK FOR ANOTHER\n         CLC   DS1DSNAM(11),=C'SYS1.VTOCIX'\n         BE    READIT\n         CLC   DS1DSNAM(9),=C'SYS1.VVDS'\n         BE    READIT\n         CLC   DS1DSNAM(7),=C'CATALOG'            IGNORE CERTAIN\n         BE    READIT                              DATA SETS\n         CLC   DS1DSNAM(8),=C'CATINDEX'\n         BE    READIT\n         CLC   DS1DSNAM(8),=C'FDRABR.V'\n         BE    READIT\n         CLC   DS1DSNAM(3),=C'SYS'\n         BNE   RI30\n         LA    R7,DS1DSNAM+3\n         LA    R8,5\nRI20     EQU   *\n         TM    0(R7),X'F0'\n         BNO   RI30\n         LA    R7,1(R7)\n         BCT   R8,RI20\n         B     READIT\nRI30     EQU   *\n         TM    DS1DSORG+1,DS1ACBM      VSAM FILE?\n         BO    READIT                  IF SO, IGNORE IT\n         TM    DS1DSIND,DS1IND40       RACF PROTECTED?\n         BNO   READIT                  IF NOT, IGNORE IT\n*\n*  GENERATE CLIST COMMANDS FOR THE DATA SET.\n*\nNONVSAM  EQU   *\n         MVC   DLXCMD,=C'DLXAUTHC'     LOAD PRINT LINE FOR\n         MVC   RACFCMD,=C'ALD'           MODIFYING RACF PROFILE\n         MVC   0(L'DS1DSNAM,R5),DS1DSNAM\n         BAL   R2,NXTSPC               FIND NEXT SPACE\n         MVC   0(L'VOLPARM,R5),VOLPARM   AND LOAD VOLUME PARM\n         MVC   L'VOLPARM(L'VOL,R5),VOL\n         MVI   L'VOLPARM+L'VOL(R5),C')'\n         BAL   R2,NXTSPC               FIND NEXT SPACE\n         MVC   0(L'AVOLPARM,R5),AVOLPARM  AND LOAD ALTERNATE VOLUME\n         MVC   L'AVOLPARM(L'VOL,R5),VOL\n         MVC   L'AVOLPARM+L'VOL+1(L'ALTVOL,R5),ALTVOL\n         MVI   L'AVOLPARM+L'VOL+1+L'ALTVOL(R5),C')'\n         BAL   R3,PRINTIT              PRINT THE LINE\n         B     READIT                  GO BACK FOR MORE\n*\n*  CLOSE FILES AND TERMINATE PROGRAM.\n*\nCLOSEX   EQU   *                       ERROR EXIT\n         LR    R7,R15                  SAVE CONTENTS OF R15\n         CLOSE (VTOC,,PRINT),MF=(E,EX4) CLOSE THE FILES\n         LR    R15,R7                  RESTORE CONTENTS OF R15\n         B     RETURN\nCLOSE    EQU   *                       STANDARD EXIT\n         MVC   DLXCMD(L'LSTLINE),LSTLINE\n         BAL   R3,PRINTIT              OUTPUT LAST LINE OF CLIST\n         CLOSE (VTOC,,PRINT),MF=(E,EX4) CLOSE THE FILES\nRETURN   L     R13,4(R13)              RESTORE REGISTERS\n         RETURN (14,12),RC=(15)        AND END\n*\n***********************************************************************\n*                                                                     *\n*                      SUBROUTINES                                    *\n*                                                                     *\n***********************************************************************\n*\n*  SUBROUTINE TO WRITE THE OUTPUT LINE INTO THE CLIST DATA SET\n*\nPRINTIT  EQU   *\n         AP    LINE#,=P'100'           INCREMENT LINE NUMBER\n         UNPK  LINENO,LINE#            UNPACK LINE NUMBER\n         MVZ   LINENO+7(1),LINENO+6      & MOVE THE ZONE BYTE\n         BAL   R2,NXTSPC               FIND END OF LINE\n         LA    R2,LINE\n         SR    R5,R2                   CALCULATE LINE LENGTH\n         STH   R5,LINE                   AND STORE\n         MVC   LINE+2(2),=X'0000'\n         PUT   PRINT,LINE              PRINT THE LINE\n         MVI   LINE,X'40'              RESET THE LINE BUFFER\n         MVC   LINE+1(L'LINE-1),LINE     TO SPACES\n         LA    R5,RPARMS               RESET R5 TO PARM ADDRESS\n         BR    R3                      RETURN\n*\n*  SUBROUTINE TO POINT TO THE NEXT DATA POSITION IN THE OUTPUT LINE.\n*\nNXTSPC   EQU   *\n         LA    R5,1(R5)                INCREMENT POINTER\n         CLC   0(4,R5),=C'    '        CHECK FOR A SPACE\n         BNE   NXTSPC                  LOOP TIL SPACE FOUND\n         LA    R5,1(R5)                INCREMENT ONCE MORE\n         BR    R2                      RETURN\n*\n***********************************************************************\n*                                                                     *\n*                     CONSTANT DATA                                   *\n*                                                                     *\n***********************************************************************\n*\n*  REGISTER EQUATES\n*\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\n*    THE FOLLOWING DATA IS USED TO INIT PART OF THE GETMAIN'ED AREA\n*\nCDATA    DS    0F\nILINE#   DC    P'00000000'\nDCB1     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE\nDCB2     DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nLIST1    RDJFCB (,),MF=L\nLIST2    OPEN   (,),MF=L\nLIST3    READ   DECB1,SF,MF=L\nLIST4    CLOSE  (,),MF=L\nMOVEL    EQU   *-CDATA\n*\n*  MISCELLANEOUS CONSTANTS\n*\nVOLPARM  DC    C'VOLUME('\nAVOLPARM DC    C'ALTVOL('\nFSTLINE  DC    C'PROC 0'\nSNDLINE  DC    C'CONTROL LIST NOFLUSH PROMPT MSG'\nLSTLINE  DC    C'END'\n*\n***********************************************************************\n*                                                                     *\n*                    DSECTS FOR GETMAIN'ED AREA                       *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F\n*\nLINE     DS    0CL255\n         DS    CL4\nLINENO   DS    CL8\nDLXCMD   DS    CL8\n         DS    CL1\nRACFCMD  DS    CL3\n         DS    CL1\nRPARMS   DS    CL230\n*\nPARMBUF  DS    CL20\nALTVOL   DS    CL6\nVOL      DS    CL6\nDSCB     DS    XL140\nJFCBA    DS    XL176\nEXLIST   DS    1F\n*\nDATA     DS    0F\nLINE#    DS    P'00000000'\nVTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE\nPRINT    DCB   DDNAME=CLIST,DSORG=PS,RECFM=VB,LRECL=255,               X\n               MACRF=(PM)\nEX1      RDJFCB (,),MF=L\nEX2      OPEN   (,),MF=L\nEX3      READ   DECB,SF,MF=L\nEX4      CLOSE  (,),MF=L\n*\nLDATA    EQU   *-WORKAREA\n*\n*\n*\nDSCB1    DSECT\n         IECSDSL1 1\nJFCB     DSECT\n         IEFJFCBN ,\nDCBSECT  DSECT\n         DCBD  DSORG=PS,DEVD=DA\n         END   RACFALT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFDOC": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x82\\x01\\x82\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 386, "newlines": 386, "modlines": 0, "user": "FILE013"}, "text": "\nTHE FOLLOWING IS THE DOCUMENTATION FOR THE RACFRPT PROGRAM IN THIS DATA SET.\n\n     ******************************************************************\n\n      RACFRPT PROVIDES A SYNOPSIS OF THE FOLLOWING INFORMATION:\n\n          FIELD                                DESCRIPTION\n       =============================================================\n       1. USER/JOB                       INTERACTIVE USERID OR\n                                         BATCH JOB CARD NAME\n\n       2. GRP/STEP                       RACF CONNECTED GROUP OR\n                                         JOB STEP NAME\n\n       3. DATE                           DATE EVENT OCCURED\n\n       4. TIME                           TIME EVENT OCCURED\n\n       5. DATA SET NAME / RACF RESOURCE  DATA SET OR PROFILE NAME\n\n       6. VOLID                          VOLUME WHERE RESOURCE RESIDES\n\n       7. TERMINAL ID                    NETWORK NODE ID\n\n       8. EVENT FLAG                     V = VIOLATIONS\n                                         W = WARNING\n                                         E = ERROR\n\n       9. EVENT DESCRIPTION              TEXT DESCRIPTION OF THE EVENT\n\n      10. SYSTEM ID                      JES2 SMF SYSTEM IDENTIFICATION\n\n     ******************************************************************\n\n      REPORT CONTROL CARD OPTIONS:\n\n      - SELECTION BY GROUPS\n      - SELECTION BY USERS\n      - SELECTION BY DATES\n      - SELECTION BY TIMES\n      - SELECTION BY EVENT(S)\n      - SELECTION BY FULL OR PARTIAL DATA SET NAME\n                          AND OR RACF PROFILE NAME\n\n      - SUPPRESSION BY FULL OR PARTIAL DATA SET NAME\n                           AND OR RACF PROFILE NAME\n\n      - SORTING BY SYSID, GROUP, USER, EVENT, DATE AND TIME\n\n     ******************************************************************\n\n      CONTROL CARDS:\n\n         ALL CONTROL CARDS ARE OPTIONAL.\n\n         THERE IS A MINIMUM OF ERROR CHECKING DONE ON CONTROL CARD\n         SYNTAX.  IF INVALID OPTIONS OR FORMATS ARE USED THE RESULTS\n         ARE UNPREDICTABLE.\n\n         THE RECORD SELECTION/SUPPRESSION HIERARCHY IS AS FOLLOWS:\n\n               *------------------------------*\n               *  ALL RECORDS (SEE SUPR CARD) *\n               *------------------------------*\n               * EVENT (TYPE / GROUP NUMBER)  *\n               *------------------------------*\n               *          DATASET             *\n               *------------------------------*\n               *           GROUP              *\n               *------------------------------*\n               *        USER / JOB            *\n               *------------------------------*\n               *           DATES              *\n               *------------------------------*\n               *           TIMES              *\n               *------------------------------*\n\n      GROUPS  - SELECTIONS MAY BE MADE ON SPECIFIC GROUPS BY USING ONE\n                MORE GROUP CONTROL CARDS.  GROUP NAMES SHOULD BEGIN\n                IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n                SEPERATED BY ONE BLANK.  IF NO GROUP CONTROL CARD OR\n                GROUP NAMES ARE FOUND THEN NO FILTERING WILL BE DONE\n                BASED ON THE GROUP. THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                GROUPS   GROUPID1 GROUPID2 GROUPID3 ... GROUPIDX\n\n                GROUPS                  ( SELECT ALL GROUPS )\n                GROUPS   SYSTEMS TEST   ( SELECT ONLY GROUPS\n                                          SYSTEMS AND TEST )\n\n      USERS   - SELECTIONS MAY BE MADE ON SPECIFIC USERS BY USING ONE\n                MORE USER CONTROL CARDS.  USERIDS SHOULD BEGIN IN\n                CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n                SEPERATED BY ONE BLANK.  IF NO USER CONTROL CARD OR\n                USERIDS ARE FOUND THEN NO FILTERING WILL BE DONE\n                BASED ON THE USERID. ( THIS OPTION NOT AVAILABLE IF\n                THE \"JOB\" PARM IS USED ). THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                USERS    USER01 USER02 USER03 USER04 ... USERXX\n\n                USERS                  ( SELECT ALL USERS )\n                USERS    SYS01 DEV01   ( SELECT ONLY SYS01 AND\n                                         DEV01 )\n\n      JOBS    - SELECTIONS MAY BE MADE ON SPECIFIC JOBNAME BY USING\n                ONE OR MORE USER CONTROL CARDS.  JOB NAMES SHOULD BEGIN\n                IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n                SEPERATED BY ONE BLANK.  IF NO JOBS CONTROL CARD OR\n                JOBNAMES ARE FOUND THEN NO FILTERING WILL BE DONE\n                BASED ON THE JOBNAME. ( THIS OPTION IS ONLY AVAILABLE\n                IF THE \"JOB\" PARM IS USED ).\n                THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                JOBS     JOBNAME1 JOBNAME2 JOBNAME3 ... JOBNAMEX\n\n                JOBS                    ( SELECT ALL JOBS )\n                JOBS     CICS BATCH1    ( SELECT ONLY CICS AND BATCH1 )\n\n      DATES   - SELECTION CAN BE LIMITED TO A SPECIFIC RANGE.\n                IF A DATES CONTROL CARD IS NOT FOUND OR CONTAINS\n                A BLANK IN CARD COLUMN 10, NO FILTERING WILL\n                BE DONE BASE ON THE DATE.  THE FORMAT FOR THIS\n                CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                DATES                            ( SELECT ALL DATES )\n\n                DATES    01/01/86-12/31/86       ( SELECT A RANGE\n                           (LOW)   (HIGH)          OF DATES )\n\n      TIMES   - SELECTION CAN BE LIMITED TO A SPECIFIC RANGE.\n                IF A TIMES CONTROL CARD IS NOT FOUND OR CONTAINS\n                A BLANK IN CARD COLUMN 10, NO FILTERING WILL\n                BE DONE BASED ON TIME.  THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                TIMES                            ( SELECT ALL TIMES )\n\n                TIMES    00:00-23:59             ( SELECT A RANGE\n                         (BEG) (END)               OF TIMES )\n\n      DATASET - SELECTION CAN BE LIMITED BY A FULL OR PARTIAL DATA\n                SET NAME.  FOR RACF COMMAND EVENTS THE DATASET/RESOURCE\n                FIELD CONTAINS A RACF PROFILE NAME.  IF A DATASET\n                CONTROL CARD IS NOT FOUND OR CONTAINS A BLANK IN CARD\n                COLUMN 10, NO FILTERING WILL BE DONE BASE ON THE\n                DATASET/RESOURCE NAME.  IF AN ASTERISK IS FOUND AT THE\n                END OF A PARTIALLY SPECIFIED DATASET/RESOURCE NAME\n                SELECTION WILL BE MADE ON ALL ENTRIES THAT MATCH THE\n                THE CHARATERS UP TO THE ASTERISK.  DATASET/RESOURCE\n                NAMES THAT DO NOT CONTAIN AN ASTERISK MUST MATCH\n                EXACTLY.  THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                DATASET                 ( SELECT ALL )\n\n                DATASET  SYS1.*         ( SELECT HLQ SYS1. )\n                DATASET  SYS*           ( SELECT ALL BEGINING W/ SYS )\n                DATASET  SYS1.DATA      ( SELECT ONLY SYS1.DATA )\n\n      EVENT   - SELECTION CAN BE LIMITED TO ONE OF THREE EVENT TYPES,\n                (IG. VIOLATIONS, WARNINGS AND EVENTS) AND UP TO 30\n                EVENT GROUP CODES.  IF AN EVENT CONTROL CARD IS NOT\n                FOUND OR CONTAINS A BLANK IN CARD COLUMN 10, NO\n                FILTERING WILL BE DONE BASED ON EVENT TYPE.  IF AN\n                EVENT CONTROL CARD IS NOT FOUND OR CONTAINS BLANKS\n                IN CARD COLUMNS 11 AND 12, NO FILTERING WILL BE DONE\n                BASED ON THE EVENT GROUP NUMBER.  THE FORMAT FOR THIS\n                CONTROL CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                EVENT                ( SELECT ALL EVENT TYPES )\n\n                EVENT    TNN...      ( T  = EVENT TYPE )\n                                     ( NN = GROUP NUMBER\n                                          - MUST BE TWO DIGITS )\n\n                EVENT     02         ( SELECT ALL FOR RESOURCE ACCESS )\n                EVENT    V01         ( SELECT VIOLATIONS FOR LOGON )\n                EVENT    W           ( SELECT ALL WARNINGS )\n                EVENT    E0213       ( SELECT ERRORS FOR RESOURCE\n                                       ACCESS AND ALT USER COMMANDS )\n\n                EVENT TYPES:\n\n                V = VIOLATIONS, W = WARNINGS, E = ERRORS\n\n                GROUP\n                NUMBER           DESCRIPTION\n               ===================================================\n                  01             JOB INITIATION / LOGON\n                  02             RESOURCE ACCESS\n                  03             END OF VOLUME\n                  04             RENAME DATA SET\n                  05             SCRATCH DATA SET\n                  06             DEL DATA SET / TAPE VOLUME\n                  07             DEFINE DATA SET / TAPE VOLUME\n                  08             ADDSD\n                  09             ADDGROUP\n                  10             ADDUSER\n                  11             ALTDSD\n                  12             ALTGROUP\n                  13             ALTUSER\n                  14             CONNECT\n                  15             DELDSD\n                  16             DELGROUP\n                  17             DELUSER\n                  18             PASSWORD\n                  19             PERMIT\n                  20             RALTER\n                  21             RDEFINE\n                  22             RDELETE\n                  23             REMOVE\n                  24             SETROPTS\n                  25             RVARY\n\n      SUPR    - REPORT RECORDS CAN BE SUPPRESSED BY EITHER A FULL\n                OR PARTIAL DATA SET NAME.  FOR RACF COMMAND EVENTS\n                THE DATASET/RESOURCE FIELD CONTAINS A RACF PROFILE\n                NAME.  IF A SUPR CONTROL CARD IS NOT FOUND OR CONTAINS\n                A BLANK IN CARD COLUMN 10, THEN NO RECORDS WILL BE\n                SUPPRESSED BASED ON THE DATASET/RESOURCE NAME. IF\n                AN ASTERISK IS FOUND AT THE END OF A PARTIALLY\n                SPECIFIED DATASET/RESOURCE NAME, RECORDS WILL BE\n                SUPPRESSED ON ALL ENTRIES THAT MATCH THE CHARATERS\n                UP TO THE ASTERISK.  A DATASET/RESOURCE NAME THAT\n                DOES NOT CONTAIN AN ASTERISK MUST MATCH EXACTLY TO BE\n                SUPPRESSED. THE FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                SUPR                    ( SUPPRESS NONE )\n\n                SUPR     SYS87*         ( SUPPRESS ALL 1987 SYSTEM\n                                          TEMPORARY DATA SETS )\n                SUPR     SYS1.DATA      ( SUPPRESS ALL RECORDS THAT\n                                          REFERENCE THE SYS1.DATA\n                                          FILE AND OR THE SYS1.DATA\n                                          RACF PROFILE )\n                SUPR     SYS1.*         ( SUPPRESS ALL RECORDS THAT\n                                          REFERENCE DATA SETS THAT\n                                          BEGIN WITH \"SYS1.\" AND OR\n                                          THE \"SYS1.* RACF\" PROFILE )\n\n\n      STATS  - USE THIS CARD TO REQUEST THAT A SUMMARY OF USERS\n               SUCCESSES, FAILURES AND ERROR STATISTICS BE PRINTED\n               OUT AS AN APPENDIX TO THE STANDARD REPORT.  SUCCESSES\n               VIOLATIONS AND ERRORS ARE ROLLED UP IN USER / GROUP\n               SORT SEQUENCE.  ALSO DISPLAYED ARE TOTAL \"JOB STARTS\",\n               \"TOTAL RESOURCE ACESSES\" AND \"TOTAL RACF COMMANDS\".\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                STATS                ( GENERATE STATS REPORT )\n                STATS    ONLY        ( GENERATE ONLY STATS REPORT )\n\n\n      SORT   - THE REPORT OUTPUT CAN BE SORTED ON ANY COMBINATION\n               OF SIX DESIGNATED FIELDS.  SORT OPTIONS SHOULD BEGIN\n               IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70,\n               AND SEPERATED BY ONE BLANK.  IF NO SORT CONTROL CARD\n               OR NO SORT CONTROL OPTIONS ARE FOUND THAN THE REPORT\n               OUTPUT WILL BE SORTED IN THE DEFAULT SEQUENCE.  THE\n               FORMAT FOR THIS CARD IS:\n\n                         1         2         3         4         5\n                |---5----0----5----0----5----0----5----0----5----0\n                SORT                            ( SORT IN DEFAULT SEQ )\n\n                SORT     EVENT DATE TIME        ( SORT BY EVENT DATE\n                                                  AND TIME )\n\n                REPORT SORT OPTIONS: ( DEFAULT SEQUENCE SHOWN )\n\n                            - SORT BY SYSID\n                            - SORT BY GROUP\n                            - SORT BY USER / JOBS  ( SEE \"1\" BELOW )\n                            - SORT BY DATE\n                            - SORT BY TIME\n                            - SORT BY EVENT ( SEE \"2\" BELOW )\n\n                            - OR ANY COMBINATION OF THE ABOVE\n\n                            1. IF THE \"JOB\" PARM IS USED THE KEYWORD\n                               \"JOBS\" IS IN EFFECT OTHERWISE THE\n                               KEYWORD \"USER\" SHOULD BE USED.\n\n                            2. EVENT VIOLATIONS AND ERRORS WILL BE\n                               SORTED AHEAD OF SUCCESSES.\n\n     ******************************************************************\n\n      PARMS  -\n\n      JOB      IF THE \"JOB\" PARM OPTION IS IN EFFECT THE REPORT OUTPUT\n               WILL CONTAIN THE TASK JOB NAME IN THE USER/JOB COLUMN.\n               IF THE JOB NAME IS NOT SIGNIFICANT (HEX ZEROS) THEN\n               THE USER NAME FIELD WILL BE USED.  THIS OPTION ACTIVATES\n               THE \"JOBS\" CONTROL CARD AND THE \"JOBS\" SORT OPTION.\n\n     ******************************************************************\n\n      RETURN CODES -\n\n               FOR NON-ZERO RETURN CODES REFER TO THE DFSORT OR\n               SYNCSORT SYSTEM REFERENCE GUIDE.  THE RETURN CODE PASSED\n               FROM THE SORT EXIT IS PASSED BY RACFRPT AT END OF JOB.\n\n     ******************************************************************\n\n      NOTES  -\n\n               \"RACFRPT\" WAS WRITTEN TO PROVIDE A MORE READABLE\n               ALTERNATIVE FOR RACF ADMINISTRATORS THAN IBM'S\n               TSO RACF REPORT WRITER.  THE GOAL WAS TO BE EASY TO\n               USE AND EASY TO READ.\n\n               HOWEVER \"RACFRPT\" DOES NOT PROVIDED ALL THE DETAIL\n               SUMMARY INFORMATION THAT IBM'S RACF REPORT CAN PROVIDE.\n               THIS INCLUDES:\n\n                1) THE PROFILE NAME OF THE PROTECTED RESOURCE.\n                2) THE LEVEL OF PROTECTION FOR THE PROTECTED RESOURCE.\n                3) THE LEVEL OF ACCESS REQUESTED FOR A PROTECTED\n                   RESOURCE AND THE HIGHEST LEVEL ALLOWED.\n                4) THE AUTHORIZATION GRANTED WITH THE PERMIT COMMAND.\n                5) SUCCESSFUL STARTS FOR TSO SESSIONS AND BATCH JOBS.\n                   ( UNSUCCESSFUL STARTS ARE RECORDED IN SMF TYPE 80\n                     AND THEREFORE SHOW UP IN THIS REPORT )\n\n               WHEN A MORE COMPLETE PICTURE OF AN AUTHORIZED OR UN-\n               AUTHORIZED EVENT SHOULD BE NEEDED THE IBM REPORTS CAN\n               BE USED TO PROVIDED THE DETAILS.\n\n               THE PROGRAM IS PROVIDED AS IS WITHOUT WARRANTY OF\n               ANY KIND.  CORRECTIONS, MODIFICATIONS AND COMMENTS\n               ARE ENCOURAGED.\n\n\n                                   GARY H. COLLINS  01/01/88\n\n                                   TRIDENT REFIT FACILITY\n                                   IBM SYSTEMS SUPPORT DIVISION, C/633\n                                   SILVERDALE, WASHINGTON 98315\n\n                                   (206) 396 - 4321 EXT. 1024\n\n     ******************************************************************\n\n      JCL -\n\n           RACF REPORT WRITER\n\n  //STEP1  EXEC PGM=RACFRPT,REGION=1024K\n  //*TEP1  EXEC PGM=RACFRPT,PARM=JOB,REGION=1024K\n  //SMFIN    DD DSN=SYS2.SMFDUMPW,DISP=SHR    <== SMF ACCUMULATION FILE\n  //SORTIN   DD DSN=&&SORT,DISP=(,PASS),\n  //            UNIT=SYSDA,SPACE=(CYL,(10,5))\n  //SORTWK00 DD UNIT=SYSDA,SPACE=(CYL,5)\n  //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n  //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n  //SYSPRINT DD SYSOUT=*\n  //SYSOUT   DD SYSOUT=*\n  //SYSIN    DD *\n  GROUPS\n  USERS\n  DATES\n  TIMES\n  EVENT\n  DATASET\n  STATS\n  SUPR\n  SORT\n  /*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFDSET": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xee\\x00\\xee\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 238, "newlines": 238, "modlines": 0, "user": "FILE013"}, "text": "//insert your job card here\n//*********************************************************************\n//* THE FORMAT OF THE OUTPUT RECORDS PRODUCED BY THIS PROGRAM IS:     *\n//*                                                                   *\n//*    COLUMNS  1-44: DATASET PROFILE NAME                            *\n//*    COLUMNS 45-52: RESOURCE CLASS (SHOULD ALWAYS BE \"DATASET\")     *\n//*    COLUMNS 53-60: OWNER                                           *\n//*    COLUMN     61: UACC                                            *\n//*    COLUMN  62-69: AUTHORIZED USER                                 *\n//*    COLUMN     70: AUTHORIZED USER'S ACCESS AUTHORITY              *\n//*    COLUMN  71-78: PROFILE TYPE (\"GENERIC\" OR \"DISCRETE\")          *\n//*                                                                   *\n//*********************************************************************\n//RACFDSET EXEC PGM=RACFDSET\n//STEPLIB    DD DSN=insert your authorized library name here,DISP=SHR\n//DSETFILE   DD SYSOUT=*,DCB=(LRECL=78,BLKSIZE=23440,RECFM=FB)\n//SYSUDUMP   DD SYSOUT=*\n//SYSABEND   DD SYSOUT=*\n//\nRACFDSET START 0\n***********************************************************************\n* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM ALL      *\n* DATASET PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA          *\n* IS PUT INTO A FILE WITH RECORDS FORMATTED AS FOLLOWS:               *\n*                                                                     *\n*           COLUMNS  1-44: DATASET NAME                               *\n*           COLUMNS 45-52: RESOURCE CLASS (SHOULD ALWAYS BE \"DATASET\")*\n*           COLUMNS 53-60: OWNER                                      *\n*           COLUMN     61: UACC                                       *\n*           COLUMN  62-69: AUTHORIZED USER                            *\n*           COLUMN     70: AUTHORIZED USER'S ACCESS AUTHORITY         *\n*           COLUMN  71-78: PROFILE TYPE (\"GENERIC\" OR \"DISCRETE\")     *\n*                                                                     *\n* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *\n*       AUTHORIZED LIBRARY.                                           *\n*                                                                     *\n* CODED:  9/25/87 BY SCOTT WILSON                                     *\n***********************************************************************\nR0       EQU   0                       USED BY SYS. MACROS\nR1       EQU   1                       USED BY SYS. MACROS\nR2       EQU   2                       1ST BASE REGISTER FOR WORKSPACE\nR3       EQU   3                       USER COUNT\nR4       EQU   4                       MULTIPLIER REGISTER\nR5       EQU   5                       2ND BASE REGISTER FOR WORKSPACE\nR6       EQU   6                       DUMMY REGISTER FOR MVCL;\n*                                      3RD BASE REGISTER FOR WORKSPACE\nR7       EQU   7                       ZERO INDICATOR FOR MVCL\nR8       EQU   8                       ADDRESS OF WORKAREA\nR9       EQU   9                       LENGTH OF WORKAREA\nR10      EQU   10                      ADDRESS OF END OF WORKAREA\nR11      EQU   11                      LENGTH OF DATASET NAME\nR12      EQU   12                      PROGRAM BASE REGISTER\nR13      EQU   13                      ADDRESS OF MVS SAVEAREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      COMPLETION CODE\n*\n***********************************************************************\n* START OF JOB HOUSEKEEPING                                           *\n***********************************************************************\n         STM   R14,R12,12(R13)         STORE MVS REGISTERS\n         BALR  R12,0                   ESTABLISH R12 AS BASE REGISTER\n         USING *,R12                   IDENTIFY BASE REGISTER\n         ST    R13,SAVEAREA+4          STORE ADD. OF MVS REG. SAVEAREA\n         LA    R13,SAVEAREA            LOAD ADDRESS OF PGM. SAVEAREA\n*\n***********************************************************************\n* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *\n***********************************************************************\nWORKADDR EQU   *\n         LA    R2,WORKSPCE             LOAD ADDRESS OF WORKSPACE\n         USING WORKSPCE,R2             SET ADDRESSABILITY TO WORKSPACE\n*\n***********************************************************************\n* OPEN OUTPUT FILES                                                   *\n***********************************************************************\n         OPEN  (DSETFILE,(OUTPUT))     OPEN OUTPUT FILE\n*\n***********************************************************************\n* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *\n***********************************************************************\nINITPROF MVI   PROFILE,X'01'           INITIAL PROFILE LENGTH = 1 BYTE\n         MVC   WRKLNGTH(4),=XL4'00008000' PUT WORKAREA LENGTH WHERE...\n*                                         ...RACF CAN FIND IT\n         MVI   ENTRYNAM,X'00'             CLEAR DATASET PROFILE NAME...\n         MVC   ENTRYNAM+1(43),ENTRYNAM    ...IN TWO STEPS\n***********************************************************************\n* GET A RACF PROFILE                                                  *\n***********************************************************************\nCLERWORK EQU   *\n         L     R7,=XL4'00000000'       INDICATE CLEAR FUNCTION TO MVCL\n         LA    R8,WORKDATA             LOAD ADDRESS OF WORK AREA\n         L     R9,=XL4'00007FE4'       LOAD LENGTH OF DATA IN WORKAREA\n         MVCL  R8,R6                   ZERO OUT THE WORK AREA\n         MODESET MODE=SUP,KEY=ZERO          GO SUPERVISOR STATE/KEY 0\n         CLI   GENFLAG,X'80'           WAS PREVIOUS PROFILE GENERIC?\n         BNE   DISCPROF                IF NOT, ASSUME DISCRETE\n         ICHEINTY NEXTC,MF=(E,GENERIC) IF SO, ASSUME ANOTHER GENERIC\n         CLI   GENFLAG,X'80'           WAS RETURNED PROFILE GENERIC?\n         BNE   MARKDISC                IF NOT, MARK IT AS DISCRETE\nGENPROF  MVC   OUTPTYPE,=CL8'GENERIC ' INDICATE GENERIC PROFILE\n         B     CHECKRC                 CHECK ICHEINTY RETURN CODE\nDISCPROF EQU   *\n         ICHEINTY NEXTC,MF=(E,DISCRETE)    DISCRETE ICHEINTY\n         CLI   GENFLAG,X'80'           WAS RETURNED PROFILE GENERIC?\n         BE    GENPROF                 IF SO, MARK IT AS GENERIC\nMARKDISC MVC   OUTPTYPE,=CL8'DISCRETE' INDICATE DISCRETE PROFILE\n         MVI   GENFLAG,X'00'           INDICATE DISCRETE LAST PROCESSED\nCHECKRC  LTR   R15,R15                 CHECK RETURN CODE FROM ICHEINTY\n         BNZ   WRAPUP                  IF NON-ZERO, EXIT THIS PROGRAM\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n*\n***********************************************************************\n* WRITE THE RETURNED DATA                                             *\n***********************************************************************\n         MVI   OUTRECRD,C' '           PROPOGATE BLANK SPACE TO...\n         MVC   OUTRECRD+1(69),OUTRECRD ...OUTPUT RECORD IN TWO STEPS\n         LA    R10,WORKDATA            LOAD ADDRESS OF RETURNED DATA\n         A     R10,DATALNTH            ADD LENGTH OF RETURNED DATA\n         L     R11,DSETLNTH            LOAD LENGTH OF DSET-ID\n         S     R11,=XL4'00000001'      SUBTRACT 1 FROM DSET-ID LENGTH\n         EX    R11,MOVEDSET            ALTER LENGTH OF DSET-ID FOR MVC\n         B     MOVECLAS                DON'T EXECUTE MVC TWICE\nMOVEDSET MVC   OUTDSET(0),ENTRYNAM     MOVE DATASET INTO OUTPUT FIELD\nMOVECLAS MVC   OUTCLASS(8),=CL8'DATASET '  MOVE RESOURCE CLASS TO O'PUT\n         MVC   OUTOWNER(8),WORKDATA+2  MOVE OWNER INTO OUTPUT FIELD\n         MVC   OUTUACC(1),WORKDATA+12  MOVE UACC TO OUTPUT FIELD\n         LH    R3,WORKDATA+15          LOAD NUMBER OF USER-IDS\n         SLL   R3,16                   TRUNCATE SIGN FIELD\n         SRL   R3,16                   RIGHT JUSTIFY NUMBER OF USERS\n         LA    R6,WORKDATA+19          LOAD ADDRESS OF FIRST USER-ID\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER-ID\n         SR    R4,R4                   CLEAR OUT REGISTER 4\n         C     R3,=XL4'00000000'       ARE THERE AUTHORIZED USERS?\n         BNZ   FINDACES                IF SO, LOCATE ACCESS LIST\n         L     R3,=XL4'00000001'       IF NOT, WRITE INDICATIVE...\n         MVC   OUTUSER(8),=CL8'* NONE *'  ...RECORD CONTAINING...\n         MVI   OUTACESS,X'00'             ...THIS INFO\n         B     WRITEIT                 WRITE THE OUTPUT RECORD\nFINDACES LR    R5,R3                   LOAD # OF USERIDS\n         M     R4,=XL4'00000008'       MULTIPLY BY USER-ID LENGTH (8)\n         A     R5,=XL4'00000002'       ADD OFFSET FOR ACCESS PREFIX\n         AR    R5,R6                   ADD ADDRESS OF FIRST USER-ID\n         USING ACCESS,R5               SET ADDRESSABILITY TO ACCESS\nNEXTUSER EQU   *\nMOVEUSER EQU   *\n         MVC   OUTUSER(8),0(R6)        MOVE USER-ID TO OUTPUT FIELD\n         MVC   OUTACESS(1),0(R5)       MOVE ACCESS TO OUTPUT FIELD\nWRITEIT  EQU   *\n         PUT   DSETFILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         A     R6,=XL4'00000008'       POINT TO NEXT USER-ID\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER-ID\n         A     R5,=XL4'00000001'       POINT TO NEXT USER ACCESS\n         USING ACCESS,R5               SET ADDRESSABILITY TO ACCESS\n         S     R3,=XL4'00000001'       DECREMENT NUMBER OF USERIDS\n         C     R3,=XL4'00000000'       ANY MORE REMAINING USER-IDS?\n         BZ    CLERWORK                IF NOT, GET NEXT PROFILE\n         B     NEXTUSER                GET THE NEXT USER-ID\n*\n***********************************************************************\n* END OF JOB HOUSEKEEPING                                             *\n***********************************************************************\nWRAPUP   EQU   *\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\nCLOSING  CLOSE (DSETFILE)              CLOSE THE OUTPUT FILE\n         DROP  R2,R5,R6                RELEASE BASE REGISTERS\n         L     R13,SAVEAREA+4          LOAD RETURN ADDRESS (MVS R13)\n         L     R14,12(R13)             LOAD MVS R14 VALUE\n         LM    R0,R12,20(R13)          RESTORE MVS REGISTERS 0-12\n         SR    R15,R15                 GUARANTEE ZERO RETURN CODE\n         BR    R14                     RETURN TO MVS\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n*\nGENERIC  ICHEINTY NEXTC,ENTRY=PROFILE,WKAREA=WORKAREA,MF=L,TYPE='DS',  +\n               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +\n               GENERIC=UNCOND\n*\nDISCRETE ICHEINTY NEXTC,ENTRY=PROFILE,WKAREA=WORKAREA,MF=L,TYPE='DS',  +\n               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +\n               GENERIC=NO\n*\nDSETLNTH DC    XL3'000000'             PADDING FOR REGISTER LOADS\nPROFILE  DS    AL1                     ENTRY LENGTH FIELD\nENTRYNAM DS    XL44                    DATASET NAME\n*\nGETCNT   ICHEACTN FIELD=ACLCNT,MF=L    RETREIVE # OF AUTHORIZED USERS\nGETOWNR  ICHEACTN FIELD=AUTHOR,MF=L    RETREIVE PROFILE OWNER\nGETUACC  ICHEACTN FIELD=UNIVACS,MF=L   RETREIVE UACC\nGETUSER  ICHEACTN FIELD=USERID,MF=L    RETREIVE AUTHORIZED USER\nGETUACS  ICHEACTN FIELD=USERACS,MF=L   RETREIVE ACCESS AUTHORITY\n*\nACLCNT   DC    CL8'ACLCNT  '           # OF AUTHORIZED USERS\nOWNER    DC    CL8'AUTHOR  '           OWNER\nUACC     DC    CL8'UNIVACS '           UACC\nUSERID   DC    CL8'USERID  '           AUTHORIZED USER-ID OR GROUP\nUSERACS  DC    CL8'USERACS '           AUTHORIZED USER ACCESS AUTHORITY\n*                  *\nOUTRECRD DS    0XL78                   OUTPUT RECORDS\nOUTDSET  DS    XL44                    DATASET NAME\nOUTCLASS DS    XL8                     DATASET CLASS\nOUTOWNER DS    XL8                     OWNER\nOUTUACC  DS    XL1                     UACC\nOUTUSER  DS    XL8                     AUTHORIZED USER-ID OR GROUP\nOUTACESS DS    XL1                     AUTHORIZED USER ACCESS AUTHORITY\nOUTPTYPE DS    XL8                     PROFILE TYPE (GENERIC/DISCRETE)\n*\n***********************************************************************\n* OUTPUT FILE DEFINITION                                              *\n***********************************************************************\nDSETFILE DCB   DDNAME=DSETFILE,MACRF=PM,DSORG=PS\n*\n         LTORG\n*\nWORKSPCE EQU   *\nWORKAREA DS    0F                      WORKAREA ALIGNMENT ON FULLWORD\nWRKLNGTH DS    F                       WORK AREA LENGTH\nRBA      DS    CL6                     RBA OF RETURNED ENTRY\nGENFLAG  EQU   *                       NEXT BYTE IS GENERIC FLAG\n         DS    XL2                     RESERVED (BY IBM)\nDUPCOUNT DS    F                       DUPLICATE DATASET NAME COUNT\n         DS    2F                      RESERVED (BY IBM)\nDATALNTH DS    F                       LENGTH OF RETURNED DATA\nWORKDATA DS    CL32740                 32K MAXIMUM RETURNED DATA\nENDWORK  EQU   *                       END OF WORKAREA\n*\nACCESS   DSECT\nUSRACESS DS    XL1\n*\nUSER$ID  DSECT\nUSER     DS    CL8\n*\nFULLWORD DSECT\nPARMADDR DS    F\nPARM     DS    CL8\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFGRES": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 256, "newlines": 256, "modlines": 0, "user": "FILE013"}, "text": "//insert your job card here\n//*********************************************************************\n//* THE FORMAT OF THE OUTPUT PRODUCED BY THIS PROGRAM IS AS FOLLOWS:  *\n//*                                                                   *\n//*           COLUMNS   1-8: RESOURCE NAME                            *\n//*           COLUMNS  9-16: RESOURCE CLASS                           *\n//*           COLUMNS 17-24: OWNER                                    *\n//*           COLUMN     25: UACC                                     *\n//*           COLUMN  26-33: AUTHORIZED USER                          *\n//*           COLUMN     34: AUTHORIZED USER'S ACCESS AUTHORITY       *\n//*                                                                   *\n//*********************************************************************\n//RACFGRES EXEC PGM=RACFGRES,PARM='insert your general resource class'\n//STEPLIB    DD DSN=insert your authorized library name here,DISP=SHR\n//GRESFILE   DD SYSOUT=*,DCB=(LRECL=37,BLKSIZE=23458,RECFM=FB)\n//SYSUDUMP   DD SYSOUT=*\n//SYSABEND   DD SYSOUT=*\n//\nRACFGRES START 0\n***********************************************************************\n* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM ALL      *\n* GENERAL RESOURCE PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA *\n* IS PUT INTO A FILE WITH RECORDS FORMATTED AS FOLLOWS:               *\n*                                                                     *\n*           COLUMNS   1-8: RESOURCE NAME                              *\n*           COLUMNS  9-16: RESOURCE CLASS (SEE NOTE BELOW)            *\n*           COLUMNS 17-24: OWNER                                      *\n*           COLUMN     25: UACC                                       *\n*           COLUMN  26-33: AUTHORIZED USER                            *\n*           COLUMN     34: AUTHORIZED USER'S ACCESS AUTHORITY         *\n*                                                                     *\n* THIS PROGRAM MAY PROCESS ONLY ONE RESOURCE CLASS AT A TIME, WHICH   *\n* IS SPECIFIED IN A PARAMETER PASSED TO THE PROGRAM. THE RESOURCE     *\n* CLASS NAME PASSED AS A PARAMETER SHOULD BE AT LEAST 4 BYTES LONG.   *\n*                                                                     *\n* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *\n*       AUTHORIZED LIBRARY.                                           *\n*                                                                     *\n* CODED:  8/17/87 BY SCOTT WILSON                                     *\n***********************************************************************\nR0       EQU   0                       USED BY SYS. MACROS; PARM LENGTH\nR1       EQU   1                       USED BY SYS. MACROS; PARM ADDR.\nR2       EQU   2                       1ST BASE REGISTER FOR WORKSPACE\nR3       EQU   3                       USER COUNT\nR4       EQU   4                       MULTIPLIER REGISTER\nR5       EQU   5                       2ND BASE REGISTER FOR WORKSPACE\nR6       EQU   6                       DUMMY REGISTER FOR MVCL;\n*                                      3RD BASE REGISTER FOR WORKSPACE\nR7       EQU   7                       ZERO INDICATOR FOR MVCL\nR8       EQU   8                       ADDRESS OF WORKAREA\nR9       EQU   9                       LENGTH OF WORKAREA\nR10      EQU   10                      ADDRESS OF END OF WORKAREA\nR11      EQU   11                      LENGTH OF RESOURCE NAME\nR12      EQU   12                      PROGRAM BASE REGISTER\nR13      EQU   13                      ADDRESS OF MVS SAVEAREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      COMPLETION CODE\n*\n***********************************************************************\n* START OF JOB HOUSEKEEPING                                           *\n***********************************************************************\n         STM   R14,R12,12(R13)         STORE MVS REGISTERS\n         BALR  R12,0                   ESTABLISH R12 AS BASE REGISTER\n         USING *,R12                   IDENTIFY BASE REGISTER\n         ST    R13,SAVEAREA+4          STORE ADD. OF MVS REG. SAVEAREA\n         LA    R13,SAVEAREA            LOAD ADDRESS OF PGM. SAVEAREA\n*\n***********************************************************************\n* RETRIEVE PASSED PARAMETER AND STORE FOR ICHEINTY MACRO              *\n***********************************************************************\n         USING FULLWORD,R1             SET ADDRESSABILITY TO R1 VALUE\n         L     R1,0(R1)                LOAD ADDRESS OF PARM DATA AREA\nMOVEPARM MVC   GRESCLAS(8),2(R1)       MOVE PARM INTO CLASS FIELD\n*\n***********************************************************************\n* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *\n***********************************************************************\nWORKADDR EQU   *\n         DROP  R1\n         LA    R2,WORKSPCE             LOAD ADDRESS OF WORKSPACE\n         USING WORKSPCE,R2             SET ADDRESSABILITY TO WORKSPACE\n*\n***********************************************************************\n* OPEN OUTPUT FILES                                                   *\n***********************************************************************\n         OPEN  (GRESFILE,(OUTPUT))     OPEN OUTPUT FILE\n*\n***********************************************************************\n* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *\n***********************************************************************\nINITPROF MVI   PROFILE,X'01'           INITIAL PROFILE LENGTH = 1 BYTE\n         MVC   WRKLNGTH(4),=XL4'00008000'  PUT WORKAREA LENGTH WHERE...\n*                                          ...RACF CAN FIND IT\n***********************************************************************\n* GET A RACF PROFILE                                                  *\n***********************************************************************\nCLERWORK EQU   *\n         L     R7,=XL4'00000000'       INDICATE CLEAR FUNCTION TO MVCL\n         LA    R8,WORKDATA             LOAD ADDRESS OF WORK AREA\n         L     R9,=XL4'00007FE4'       LOAD LENGTH OF DATA IN WORKAREA\n         MVCL  R8,R6                   ZERO OUT THE WORK AREA\n***********************************************************************\n* THIS PROGRAM RUNS IN TWO \"PHASES\"; FIRST SCANNING FOR DISCRETE      *\n* PROFILES, AND THEN FOR GENERIC PROFILES. THESE ARE DONE SEPARATELY  *\n* BECAUSE DIFFERENT, NON-SUBSTITUTABLE PARAMETERS OF THE ICHEINTY     *\n* MACRO ARE NECESSARY FOR EACH OF THE TWO TYPES OF PROFILES. A FLAG   *\n* (MACTYPE) DETERMINES THE MACRO TO BE USED, AND THEREFORE THE        *\n* CURRENT PHASE OF THE PROGRAM.                                       *\n***********************************************************************\n         MODESET MODE=SUP,KEY=ZERO          GO SUPERVISOR STATE/KEY 0\n         CLC   MACTYPE(8),=CL8'DISCRETE'    ICHEINTY FOR DISCRETE?\n         BNE   GENMAC                       IF NOT, EXECUTE FOR GENERIC\nDISMAC   ICHEINTY NEXT,MF=(E,DISCRETE)      FIND NEXT DISCRETE PROFILE\n         B     CHECKRC                      CHECK ICHEINTY RETURN CODE\nGENMAC   ICHEINTY NEXT,MF=(E,GENERIC)       FIND NEXT GENERIC PROFILE\nCHECKRC  LTR   R15,R15                 CHECK RETURN CODE FROM ICHEINTY\n         BNZ   WRAPUP                  IF NON-ZERO, EXIT THIS PROGRAM\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n*\n***********************************************************************\n* WRITE THE RETURNED DATA                                             *\n***********************************************************************\n         MVI   OUTRECRD,C' '              PROPOGATE BLANK SPACE TO...\n         MVC   OUTRECRD+1(36),OUTRECRD    ...OUTPUT RECORD IN TWO STEPS\n         LA    R10,WORKDATA            LOAD ADDRESS OF RETURNED DATA\n         A     R10,DATALNTH            ADD LENGTH OF RETURNED DATA\n         L     R11,GRESLNTH            LOAD LENGTH OF GRES-ID\n         S     R11,=XL4'00000001'      SUBTRACT 1 FROM GRES-ID LENGTH\n         EX    R11,MOVEGRES            ALTER LENGTH OF GRES-ID FOR MVC\n         B     MOVECLAS                DON'T EXECUTE MVC TWICE\nMOVEGRES MVC   OUTGRES(0),ENTRYNAM     MOVE RESOURCE INTO OUTPUT FIELD\nMOVECLAS MVC   OUTCLASS(8),GRESCLAS    MOVE CLASS INTO OUTPUT FIELD\n         MVC   OUTOWNER(8),WORKDATA+2  MOVE OWNER INTO OUTPUT FIELD\n         MVC   OUTUACC(1),WORKDATA+12  MOVE UACC TO OUTPUT FIELD\n         LH    R3,WORKDATA+15          LOAD NUMBER OF USER-IDS\n         SLL   R3,16                   TRUNCATE SIGN FIELD\n         SRL   R3,16                   RIGHT JUSTIFY NUMBER OF USERS\n         LA    R6,WORKDATA+19          LOAD ADDRESS OF FIRST USER-ID\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER-ID\n         SR    R4,R4                   CLEAR OUT REGISTER 4\n         C     R3,=XL4'00000000'       ARE THERE AUTHORIZED USERS?\n         BNZ   FINDACES                IF SO, LOCATE ACCESS LIST\n         L     R3,=XL4'00000001'       IF NOT, WRITE INDICATIVE...\n         MVC   OUTUSER(8),=CL8'* NONE *'  ...RECORD CONTAINING...\n         MVI   OUTACESS,X'00'             ...THIS INFO\n         B     WRITEIT                 WRITE THE OUTPUT RECORD\nFINDACES LR    R5,R3                   LOAD # OF USERIDS\n         M     R4,=XL4'00000008'       MULTIPLY BY USER-ID LENGTH (8)\n         A     R5,=XL4'00000002'       ADD OFFSET FOR ACCESS PREFIX\n         AR    R5,R6                   ADD ADDRESS OF FIRST USER-ID\n         USING ACCESS,R5               SET ADDRESSABILITY TO ACCESS\nNEXTUSER EQU   *\n*        CR    R6,R10                  ARE WE PAST THE END OF THE DATA?\n*        BP    CLERWORK                IF SO, GET ANOTHER PROFILE\nMOVEUSER EQU   *\n         MVC   OUTUSER(8),0(R6)        MOVE USER-ID TO OUTPUT FIELD\n*        CR    R5,R10                  ARE WE PAST THE END OF THE DATA?\n*        BP    CLERWORK                IF SO, GET ANOTHER PROFILE\n         MVC   OUTACESS(1),0(R5)       MOVE ACCESS TO OUTPUT FIELD\nWRITEIT  PUT   GRESFILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         A     R6,=XL4'00000008'       POINT TO NEXT USER-ID\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER-ID\n         A     R5,=XL4'00000001'       POINT TO NEXT USER ACCESS\n         USING ACCESS,R5               SET ADDRESSABILITY TO ACCESS\n         S     R3,=XL4'00000001'       DECREMENT NUMBER OF USERIDS\n         C     R3,=XL4'00000000'       ANY MORE REMAINING USER-IDS?\n         BZ    CLERWORK                IF NOT, GET NEXT PROFILE\n         B     NEXTUSER                GET THE NEXT USER-ID\n*\n***********************************************************************\n* END OF JOB HOUSEKEEPING                                             *\n***********************************************************************\nWRAPUP   EQU   *\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n         CLC   MACTYPE(8),=CL8'DISCRETE'     BEEN PROCESSING DISCRETES?\n         BNE   CLOSING                       IF NOT, EXIT PROGRAM\n         MVC   GRESLNTH(12),=XL12'000000000000000000000000'\n         MVC   MACTYPE(8),=CL8'GENERIC '     INDICATE GENERIC ICHEINTY\n         B     INITPROF                      BEGIN SEARCH FOR GENERICS\nCLOSING  CLOSE (GRESFILE)              CLOSE THE OUTPUT FILE\n         DROP  R2,R5,R6                RELEASE BASE REGISTERS\n         L     R13,SAVEAREA+4          LOAD RETURN ADDRESS (MVS R13)\n         L     R14,12(R13)             LOAD MVS R14 VALUE\n         LM    R0,R12,20(R13)          RESTORE MVS REGISTERS 0-12\n         SR    R15,R15                 GUARANTEE ZERO RETURN CODE\n         BR    R14                     RETURN TO MVS\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n*\nGENERIC  ICHEINTY NEXT,ENTRY=PROFILE,WKAREA=WORKAREA,MF=L,TYPE='GEN',  +\n               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +\n               CLASS=GRESCLAS,GENERIC=UNCOND\n*\nDISCRETE ICHEINTY NEXT,ENTRY=PROFILE,WKAREA=WORKAREA,MF=L,TYPE='GEN',  +\n               ACTIONS=(GETOWNR,GETUACC,GETCNT,GETUSER,GETUACS),       +\n               CLASS=GRESCLAS,GENERIC=NO\n*\nMACTYPE  DC    CL8'DISCRETE'           ICHEINTY MACRO TYPE FLAG\n*\nGRESCLAS DC    CL8'        '           CLASS NAME USED BY ICHEINTY\n*\nGRESLNTH DC    XL3'000000'             PADDING FOR REGISTER LOADS\nPROFILE  DS    AL1                     ENTRY LENGTH FIELD\nENTRYNAM DC    XL8'0000000000000000'   GENERAL RESOURCE NAME\n*\nGETCNT   ICHEACTN FIELD=ACLCNT,MF=L    RETREIVE # OF AUTHORIZED USERS\nGETOWNR  ICHEACTN FIELD=OWNER,MF=L     RETREIVE PROFILE OWNER\nGETUACC  ICHEACTN FIELD=UACC,MF=L      RETREIVE UACC\nGETUSER  ICHEACTN FIELD=USERID,MF=L    RETREIVE AUTHORIZED USER\nGETUACS  ICHEACTN FIELD=USERACS,MF=L   RETREIVE ACCESS AUTHORITY\n*\nACLCNT   DC    CL8'ACLCNT  '           # OF AUTHORIZED USERS\nOWNER    DC    CL8'OWNER   '           OWNER\nUACC     DC    CL8'UACC    '           UACC\nUSERID   DC    CL8'USERID  '           AUTHORIZED USER-ID OR GROUP\nUSERACS  DC    CL8'USERACS '           AUTHORIZED USER ACCESS AUTHORITY\n*                  *\nOUTRECRD DS    0XL34                   OUTPUT RECORDS\nOUTGRES  DS    XL8                     GENERAL RESOURCE NAME\nOUTCLASS DS    XL8                     RESOURCE CLASS\nOUTOWNER DS    XL8                     OWNER\nOUTUACC  DS    XL1                     UACC\nOUTUSER  DS    XL8                     AUTHORIZED USER-ID OR GROUP\nOUTACESS DS    XL1                     AUTHORIZED USER ACCESS AUTHORITY\n*\n***********************************************************************\n* OUTPUT FILE DEFINITION                                              *\n***********************************************************************\nGRESFILE DCB   DDNAME=GRESFILE,MACRF=PM,DSORG=PS\n*\n         LTORG\n*\nWORKSPCE EQU   *\nWORKAREA DS    0F                      WORKAREA ALIGNMENT ON FULLWORD\nWRKLNGTH DS    F                       WORK AREA LENGTH\nRBA      DS    CL6                     RBA OF RETURNED ENTRY\n         DS    CL2                     RESERVED (BY IBM)\n         DS    F                       DUPLICATE DATASET NAME COUNT\n         DS    2F                      RESERVED (BY IBM)\nDATALNTH DS    F                       LENGTH OF RETURNED DATA\nWORKDATA DS    CL32740                 32K MAXIMUM RETURNED DATA\nENDWORK  EQU   *                       END OF WORKAREA\n*\nACCESS   DSECT\nUSRACESS DS    XL1\n*\nUSER$ID  DSECT\nUSER     DS    CL8\n*\nFULLWORD DSECT\nPARMADDR DS    F\nPARM     DS    CL8\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFGRP1": {"ttr": 4614, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xd1\\x00\\xd1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 209, "newlines": 209, "modlines": 0, "user": "FILE013"}, "text": "//insert your job card here\n//*\n//RACFGRP1 EXEC PGM=RACFGRP1\n//*********************************************************************\n//* THE OUTPUT FROM RACFGRP1 IS FORMATTED AS FOLLOWS:                 *\n//*                                                                   *\n//*           COLUMNS   1-8: GROUP NAME                               *\n//*           COLUMNS  9-16: SUPERIOR GROUP                           *\n//*           COLUMNS 17-24: OWNER                                    *\n//*           COLUMN     25: UACC                                     *\n//*           COLUMN     26: NOTERMUACC                               *\n//*           COLUMNS 27-28: NUMBER OF SUBGROUPS                      *\n//*           COLUMNS 29-36: SUBGROUP NAME                            *\n//*                                                                   *\n//*********************************************************************\n//STEPLIB      DD DSN=insert your authorized library name here,DISP=SHR\n//GRP1FILE     DD SYSOUT=*,DCB=(LRECL=36,BLKSIZE=23472,RECFM=FB)\n//SYSUDUMP     DD SYSOUT=*\n//SYSABEND     DD SYSOUT=*\n//\nRACFGRP1 START 0\n***********************************************************************\n* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM ALL      *\n* GROUP PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA            *\n* IS PUT INTO A FILE WITH RECORDS FORMATTED AS FOLLOWS:               *\n*                                                                     *\n*           COLUMNS   1-8: GROUP NAME                                 *\n*           COLUMNS  9-16: SUPERIOR GROUP                             *\n*           COLUMNS 17-24: OWNER                                      *\n*           COLUMN     25: UACC                                       *\n*           COLUMN     26: NOTERMUACC                                 *\n*           COLUMNS 27-28: NUMBER OF SUBGROUPS                        *\n*           COLUMNS 29-36: SUBGROUP NAME                              *\n*                                                                     *\n* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *\n*       AUTHORIZED LIBRARY.                                           *\n*                                                                     *\n* CODED: 10/07/87 BY SCOTT WILSON                                     *\n***********************************************************************\nR0       EQU   0                       USED BY SYS. MACROS\nR1       EQU   1                       USED BY SYS. MACROS\nR2       EQU   2                       1ST BASE REGISTER FOR WORKSPACE\nR3       EQU   3                       SUBGROUP COUNT\nR4       EQU   4                       1ST MULTIPLIER REGISTER\nR5       EQU   5                       2ND MULTIPLIER REGISTER\nR6       EQU   6                       DUMMY REGISTER FOR MVCL;\n*                                      3RD BASE REGISTER FOR WORKSPACE\nR7       EQU   7                       ZERO INDICATOR FOR MVCL\nR8       EQU   8                       ADDRESS OF WORKAREA\nR9       EQU   9                       LENGTH OF WORKAREA\nR10      EQU   10                      ADDRESS OF END OF WORKAREA\nR11      EQU   11                      LENGTH OF GROUP NAME\nR12      EQU   12                      PROGRAM BASE REGISTER\nR13      EQU   13                      ADDRESS OF MVS SAVEAREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      COMPLETION CODE\n*\n***********************************************************************\n* START OF JOB HOUSEKEEPING                                           *\n***********************************************************************\n         STM   R14,R12,12(R13)         STORE MVS REGISTERS\n         BALR  R12,0                   ESTABLISH R12 AS BASE REGISTER\n         USING *,R12                   IDENTIFY BASE REGISTER\n         ST    R13,SAVEAREA+4          STORE ADD. OF MVS REG. SAVEAREA\n         LA    R13,SAVEAREA            LOAD ADDRESS OF PGM. SAVEAREA\n*\n***********************************************************************\n* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *\n***********************************************************************\nWORKADDR EQU   *\n         LA    R2,WORKSPCE             LOAD ADDRESS OF WORKSPACE\n         USING WORKSPCE,R2             SET ADDRESSABILITY TO WORKSPACE\n*\n***********************************************************************\n* OPEN OUTPUT FILES                                                   *\n***********************************************************************\n         OPEN  (GRP1FILE,(OUTPUT))     OPEN OUTPUT FILE\n*\n***********************************************************************\n* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *\n***********************************************************************\nINITPROF MVI   PROFILE,X'01'           INITIAL PROFILE LENGTH = 1 BYTE\n         MVC   WRKLNGTH(4),=XL4'00008000' PUT WORKAREA LENGTH WHERE...\n*                                         ...RACF CAN FIND IT\n         MVI   ENTRYNAM,X'00'             CLEAR GROUP PROFILE NAME...\n         MVC   ENTRYNAM+1(7),ENTRYNAM     ...IN TWO STEPS\n***********************************************************************\n* GET A RACF PROFILE                                                  *\n***********************************************************************\nCLERWORK EQU   *\n         L     R7,=XL4'00000000'       INDICATE CLEAR FUNCTION TO MVCL\n         LA    R8,WORKDATA             LOAD ADDRESS OF WORK AREA\n         L     R9,=XL4'00007FE4'       LOAD LENGTH OF DATA IN WORKAREA\n         MVCL  R8,R6                   ZERO OUT THE WORK AREA\n         MODESET MODE=SUP,KEY=ZERO          GO SUPERVISOR STATE/KEY 0\n         ICHEINTY NEXTC,ENTRY=PROFILE,WKAREA=WORKAREA,TYPE='GRP',      +\n               ACTIONS=(GETSGRP,GETOWNR,GETUACC,GETTUACC,GET#SUBG,     +\n               GETSUBG)\nCHECKRC  LTR   R15,R15                 CHECK RETURN CODE FROM ICHEINTY\n         BNZ   WRAPUP                  IF NON-ZERO, EXIT THIS PROGRAM\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n*        ABEND 1,DUMP\n*\n***********************************************************************\n* WRITE THE RETURNED DATA                                             *\n***********************************************************************\n         MVI   OUTRECRD,C' '           PROPOGATE BLANK SPACE TO...\n         MVC   OUTRECRD+1(35),OUTRECRD ...OUTPUT RECORD IN TWO STEPS\n         LA    R10,WORKDATA            LOAD ADDRESS OF RETURNED DATA\n         A     R10,DATALNTH            ADD LENGTH OF RETURNED DATA\n         L     R11,GRP1LNTH            LOAD LENGTH OF GROUP-ID\n         S     R11,=XL4'00000001'      SUBTRACT 1 FROM GROUP-ID LENGTH\n         EX    R11,MOVEGRP1            ALTER LENGTH OF GROUP-ID FOR MVC\n         B     MOVEOWNR                DON'T EXECUTE MVC TWICE\nMOVEGRP1 MVC   OUTGROUP(0),ENTRYNAM    MOVE GROUP INTO OUTPUT FIELD\nMOVEOWNR MVC   OUTOWNER(8),WORKSPCE+40 MOVE OWNER INTO OUTPUT FIELD\n         MVC   OUTSGRP(8),WORKSPCE+30  MOVE SUPGROUP TO OUTPUT FIELD\n         MVC   OUTUACC(1),WORKSPCE+50  MOVE UACC TO OUTPUT FIELD\n         MVC   OUTTUACC(1),WORKSPCE+53 MOVE TERMUACC TO OUTPUT FIELD\n         MVC   OUTSGRPS(2),WORKSPCE+56 MOVE # SUBGROUPS TO OUTPUT FLD.\n         LH    R3,WORKSPCE+56          LOAD NUMBER OF SUBGROUPS\n         SLL   R3,16                   TRUNCATE SIGN FIELD\n         SRL   R3,16                   RIGHT JUSTIFY NUMBER OF SUBG'S\n         LA    R6,WORKSPCE+60          LOAD ADDRESS OF FIRST SUBGROUP\n         USING SUBG$ID,R6              SET ADDRESSABILITY TO SUBGROUP\n         SR    R4,R4                   CLEAR OUT REGISTER 4\n         C     R3,=XL4'00000000'       ARE THERE SUBGROUPS?\n         BNZ   MOVESUBG                IF SO, MOVE IT TO OUTPUT AREA\n         L     R3,=XL4'00000001'       IF NOT, WRITE INDICATIVE...\n         MVC   OUTSUBG(8),=CL8'* NONE *' ...RECORD CONTAINING THIS INFO\n         B     WRITEIT                 WRITE THE OUTPUT RECORD\nNEXTSUBG EQU   *\nMOVESUBG EQU   *\n         MVC   OUTSUBG(8),0(R6)        MOVE SUBGROUP TO OUTPUT FIELD\nWRITEIT  EQU   *\n         PUT   GRP1FILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         A     R6,=XL4'00000008'       POINT TO NEXT SUBGROUP\n         USING SUBG$ID,R6              SET ADDRESSABILITY TO SUBGROUP\n         S     R3,=XL4'00000001'       DECREMENT NUMBER OF SUBGROUPS\n         C     R3,=XL4'00000000'       ANY MORE REMAINING SUBGROUPS?\n         BZ    CLERWORK                IF NOT, GET NEXT PROFILE\n         B     NEXTSUBG                GET THE NEXT SUBGROUP\n*\n***********************************************************************\n* END OF JOB HOUSEKEEPING                                             *\n***********************************************************************\nWRAPUP   EQU   *\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\nCLOSING  CLOSE (GRP1FILE)              CLOSE THE OUTPUT FILE\n         DROP  R2,R6                   RELEASE BASE REGISTERS\n         L     R13,SAVEAREA+4          LOAD RETURN ADDRESS (MVS R13)\n         L     R14,12(R13)             LOAD MVS R14 VALUE\n         LM    R0,R12,20(R13)          RESTORE MVS REGISTERS 0-12\n         SR    R15,R15                 GUARANTEE ZERO RETURN CODE\n         BR    R14                     RETURN TO MVS\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n*\nGRP1LNTH DC    XL3'000000'             PADDING FOR REGISTER LOADS\nPROFILE  DS    AL1                     ENTRY LENGTH FIELD\nENTRYNAM DS    XL8                     GROUP NAME\n*\nGETSGRP  ICHEACTN FIELD=SUPGROUP,MF=L  RETREIVE NUMBER OF SUBGROUPS\nGETOWNR  ICHEACTN FIELD=AUTHOR,MF=L    RETREIVE PROFILE OWNER\nGETUACC  ICHEACTN FIELD=UACC,MF=L      RETREIVE UACC\nGETTUACC ICHEACTN FIELD=NOTRMUAC,MF=L  RETREIVE NOTERMUACC\nGET#SUBG ICHEACTN FIELD=SUBGRPCT,MF=L  RETREIVE NUMBER OF SUBGROUPS\nGETSUBG  ICHEACTN FIELD=SUBGRPNM,MF=L  RETREIVE SUBGROUP NAME\n*\nSUPGROUP DC    CL8'SUPGROUP'           NUMBER OF SUBGROUPS\nOWNER    DC    CL8'AUTHOR  '           OWNER\nUACC     DC    CL8'UACC    '           UACC\nNOTRMUAC DC    CL8'NOTRMUAC'           NOTERMUACC\nSUBGRPCT DC    CL8'SUBGRPCT'           NUMBER OF SUBGROUPS\nSUBGRPNM DC    CL8'SUBGRPNM'           NAME OF SUBGROUP\n*                  *\nOUTRECRD DS    0XL36                   OUTPUT RECORDS\nOUTGROUP DS    XL8                     GROUP NAME\nOUTSGRP  DS    XL8                     SUPERIOR GROUP NAME\nOUTOWNER DS    XL8                     OWNER\nOUTUACC  DS    XL1                     UACC\nOUTTUACC DS    XL1                     NOTERMUACC\nOUTSGRPS DS    XL2                     NUMBER OF SUBGROUPS\nOUTSUBG  DS    XL8                     SUBGROUP\n*\n***********************************************************************\n* OUTPUT FILE DEFINITION                                              *\n***********************************************************************\nGRP1FILE DCB   DDNAME=GRP1FILE,MACRF=PM,DSORG=PS\n*\n         LTORG\n*\nWORKSPCE EQU   *\nWORKAREA DS    0F                      WORKAREA ALIGNMENT ON FULLWORD\nWRKLNGTH DS    F                       WORK AREA LENGTH\nRBA      DS    CL6                     RBA OF RETURNED ENTRY\n         DS    XL2                     RESERVED (BY IBM)\nDUPCOUNT DS    F                       DUPLICATE DATASET NAME COUNT\n         DS    2F                      RESERVED (BY IBM)\nDATALNTH DS    F                       LENGTH OF RETURNED DATA\nWORKDATA DS    CL32740                 32K MAXIMUM RETURNED DATA\nENDWORK  EQU   *                       END OF WORKAREA\n*\nSUBG$ID  DSECT\nSUBGROUP DS    CL8\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFGRP2": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xde\\x00\\xde\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 222, "newlines": 222, "modlines": 0, "user": "FILE013"}, "text": "//insert your job card here\n//*\n//RACFGRP2 EXEC PGM=RACFGRP2\n//*********************************************************************\n//* THE OUTPUT FROM RACFGRP2 IS FORMATTED AS FOLLOWS:                 *\n//*                                                                   *\n//*           COLUMNS   1-8: GROUP NAME                               *\n//*           COLUMNS  9-16: SUPERIOR GROUP                           *\n//*           COLUMNS 17-24: OWNER                                    *\n//*           COLUMN     25: UACC                                     *\n//*           COLUMN     26: NOTERMUACC                               *\n//*           COLUMNS 27-28: NUMBER OF CONNECTED USERS                *\n//*           COLUMNS 29-36: CONNECTED USER-ID                        *\n//*           COLUMN     37: GROUP AUTHORITY OF CONNECTED USER        *\n//*********************************************************************\n//STEPLIB      DD DSN=insert your authorized library name here,DISP=SHR\n//GRP2FILE     DD SYSOUT=*,DCB=(LRECL=37,BLKSIZE=23458,RECFM=FB)\n//SYSUDUMP     DD SYSOUT=*\n//SYSABEND     DD SYSOUT=*\n//\nRACFGRP2 START 0\n***********************************************************************\n* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT INFORMATION FROM ALL      *\n* GROUP PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA            *\n* IS PUT INTO A FILE WITH RECORDS FORMATTED AS FOLLOWS:               *\n*                                                                     *\n*           COLUMNS   1-8: GROUP NAME                                 *\n*           COLUMNS  9-16: SUPERIOR GROUP                             *\n*           COLUMNS 17-24: OWNER                                      *\n*           COLUMN     25: UACC                                       *\n*           COLUMN     26: NOTERMUACC                                 *\n*           COLUMNS 27-28: NUMBER OF CONNECTED USERS                  *\n*           COLUMNS 29-36: CONNECTED USER-ID                          *\n*           COLUMN     37: GROUP AUTHORITY OF CONNECTED USER          *\n*                                                                     *\n* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *\n*       AUTHORIZED LIBRARY.                                           *\n*                                                                     *\n* CODED: 10/07/87 BY SCOTT WILSON                                     *\n***********************************************************************\nR0       EQU   0                       USED BY SYS. MACROS\nR1       EQU   1                       USED BY SYS. MACROS\nR2       EQU   2                       1ST BASE REGISTER FOR WORKSPACE\nR3       EQU   3                       USER COUNT\nR4       EQU   4                       1ST MULTIPLIER REGISTER\nR5       EQU   5                       2ND MULTIPLIER REGISTER\nR6       EQU   6                       DUMMY REGISTER FOR MVCL;\n*                                      3RD BASE REGISTER FOR WORKSPACE\nR7       EQU   7                       ZERO INDICATOR FOR MVCL\nR8       EQU   8                       ADDRESS OF WORKAREA\nR9       EQU   9                       LENGTH OF WORKAREA\nR10      EQU   10                      ADDRESS OF END OF WORKAREA\nR11      EQU   11                      LENGTH OF GROUP NAME\nR12      EQU   12                      PROGRAM BASE REGISTER\nR13      EQU   13                      ADDRESS OF MVS SAVEAREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      COMPLETION CODE\n*\n***********************************************************************\n* START OF JOB HOUSEKEEPING                                           *\n***********************************************************************\n         STM   R14,R12,12(R13)         STORE MVS REGISTERS\n         BALR  R12,0                   ESTABLISH R12 AS BASE REGISTER\n         USING *,R12                   IDENTIFY BASE REGISTER\n         ST    R13,SAVEAREA+4          STORE ADD. OF MVS REG. SAVEAREA\n         LA    R13,SAVEAREA            LOAD ADDRESS OF PGM. SAVEAREA\n*\n***********************************************************************\n* SET ADDRESSABILITY TO A 32K WORKSPACE (MAXIMUM RACF PROFILE SIZE)   *\n***********************************************************************\nWORKADDR EQU   *\n         LA    R2,WORKSPCE             LOAD ADDRESS OF WORKSPACE\n         USING WORKSPCE,R2             SET ADDRESSABILITY TO WORKSPACE\n*\n***********************************************************************\n* OPEN OUTPUT FILES                                                   *\n***********************************************************************\n         OPEN  (GRP2FILE,(OUTPUT))     OPEN OUTPUT FILE\n*\n***********************************************************************\n* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *\n***********************************************************************\nINITPROF MVI   PROFILE,X'01'           INITIAL PROFILE LENGTH = 1 BYTE\n         MVC   WRKLNGTH(4),=XL4'00008000' PUT WORKAREA LENGTH WHERE...\n*                                         ...RACF CAN FIND IT\n         MVI   ENTRYNAM,X'00'             CLEAR GROUP PROFILE NAME...\n         MVC   ENTRYNAM+1(7),ENTRYNAM     ...IN TWO STEPS\n***********************************************************************\n* GET A RACF PROFILE                                                  *\n***********************************************************************\nCLERWORK EQU   *\n         L     R7,=XL4'00000000'       INDICATE CLEAR FUNCTION TO MVCL\n         LA    R8,WORKDATA             LOAD ADDRESS OF WORK AREA\n         L     R9,=XL4'00007FE4'       LOAD LENGTH OF DATA IN WORKAREA\n         MVCL  R8,R6                   ZERO OUT THE WORK AREA\n         MODESET MODE=SUP,KEY=ZERO          GO SUPERVISOR STATE/KEY 0\n         ICHEINTY NEXTC,ENTRY=PROFILE,WKAREA=WORKAREA,TYPE='GRP',      +\n               ACTIONS=(GETSGRP,GETOWNR,GETUACC,GETTUACC,GETACL,       +\n               GETUSER,GETACCES)\nCHECKRC  LTR   R15,R15                 CHECK RETURN CODE FROM ICHEINTY\n         BNZ   WRAPUP                  IF NON-ZERO, EXIT THIS PROGRAM\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n*        ABEND 1,DUMP\n*\n***********************************************************************\n* WRITE THE RETURNED DATA                                             *\n***********************************************************************\n         MVI   OUTRECRD,C' '           PROPOGATE BLANK SPACE TO...\n         MVC   OUTRECRD+1(36),OUTRECRD ...OUTPUT RECORD IN TWO STEPS\n         LA    R10,WORKDATA            LOAD ADDRESS OF RETURNED DATA\n         A     R10,DATALNTH            ADD LENGTH OF RETURNED DATA\n         L     R11,GRP2LNTH            LOAD LENGTH OF GROUP-ID\n         S     R11,=XL4'00000001'      SUBTRACT 1 FROM GROUP-ID LENGTH\n         EX    R11,MOVEGRP2            ALTER LENGTH OF GROUP-ID FOR MVC\n         B     MOVEOWNR                DON'T EXECUTE MVC TWICE\nMOVEGRP2 MVC   OUTGROUP(0),ENTRYNAM    MOVE GROUP INTO OUTPUT FIELD\nMOVEOWNR MVC   OUTOWNER(8),WORKSPCE+40 MOVE OWNER INTO OUTPUT FIELD\n         MVC   OUTSGRP(8),WORKSPCE+30  MOVE SUPGROUP TO OUTPUT FIELD\n         MVC   OUTUACC(1),WORKSPCE+50  MOVE UACC TO OUTPUT FIELD\n         MVC   OUTTUACC(1),WORKSPCE+53 MOVE TERMUACC TO OUTPUT FIELD\n         MVC   OUTUSERS(2),WORKSPCE+56 MOVE # OF USERS TO OUTPUT FIELD\n         LH    R3,WORKSPCE+56          LOAD NUMBER OF USERS\n         SLL   R3,16                   TRUNCATE SIGN FIELD\n         SRL   R3,16                   RIGHT JUSTIFY NUMBER OF USER'S\n         LA    R6,WORKSPCE+60          LOAD ADDRESS OF FIRST USER\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER\n         SR    R4,R4                   CLEAR OUT REGISTER 4\n         C     R3,=XL4'00000000'       ARE THERE USERS?\n         BNZ   FINDACES                IF SO, FIND ACCESS LEVEL\n         L     R3,=XL4'00000001'       IF NOT, WRITE INDICATIVE...\n         MVC   OUTUSER(8),=CL8'* NONE *' ...RECORD CONTAINING THIS INFO\n         B     WRITEIT                 WRITE THE OUTPUT RECORD\nFINDACES LR    R5,R3                   LOAD # OF USERIDS\n         M     R4,=XL4'00000008'       MULTIPLY BY USER-ID LENGTH (8)\n         A     R5,=XL4'00000002'       ADD OFFSET FOR ACCESS PREFIX\n         AR    R5,R6                   ADD ADDRESS OF FIRST USER-ID\n         USING ACCESS,R5               SET ADDRESSABILITY TO ACCESS\nNEXTUSER EQU   *\nMOVEUSER EQU   *\n         MVC   OUTUSER(8),0(R6)        MOVE USER TO OUTPUT FIELD\n         MVC   OUTACESS(1),0(R5)       MOVE USER'S GROUP AUTHORITY\nWRITEIT  EQU   *\n         PUT   GRP2FILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         A     R6,=XL4'00000008'       POINT TO NEXT USER\n         USING USER$ID,R6              SET ADDRESSABILITY TO USER\n         S     R3,=XL4'00000001'       DECREMENT NUMBER OF USERS\n         C     R3,=XL4'00000000'       ANY MORE REMAINING USERS?\n         BZ    CLERWORK                IF NOT, GET NEXT PROFILE\n         B     NEXTUSER                GET THE NEXT USER\n*\n***********************************************************************\n* END OF JOB HOUSEKEEPING                                             *\n***********************************************************************\nWRAPUP   EQU   *\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\nCLOSING  CLOSE (GRP2FILE)              CLOSE THE OUTPUT FILE\n         DROP  R2,R5,R6                RELEASE BASE REGISTERS\n         L     R13,SAVEAREA+4          LOAD RETURN ADDRESS (MVS R13)\n         L     R14,12(R13)             LOAD MVS R14 VALUE\n         LM    R0,R12,20(R13)          RESTORE MVS REGISTERS 0-12\n         SR    R15,R15                 GUARANTEE ZERO RETURN CODE\n         BR    R14                     RETURN TO MVS\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n*\nGRP2LNTH DC    XL3'000000'             PADDING FOR REGISTER LOADS\nPROFILE  DS    AL1                     ENTRY LENGTH FIELD\nENTRYNAM DS    XL8                     GROUP NAME\n*\nGETSGRP  ICHEACTN FIELD=SUPGROUP,MF=L  RETREIVE NUMBER OF USERS\nGETOWNR  ICHEACTN FIELD=AUTHOR,MF=L    RETREIVE PROFILE OWNER\nGETUACC  ICHEACTN FIELD=UACC,MF=L      RETREIVE UACC\nGETTUACC ICHEACTN FIELD=NOTRMUAC,MF=L  RETREIVE NOTERMUACC\nGETACL   ICHEACTN FIELD=ACLCNT,MF=L    RETREIVE NUMBER OF USER-IDS\nGETUSER  ICHEACTN FIELD=USERID,MF=L    RETREIVE USER NAME\nGETACCES ICHEACTN FIELD=USERACS,MF=L   RETREIVE USER'S GROUP AUTHORITY\n*\nSUPGROUP DC    CL8'SUPGROUP'           NUMBER OF USERS\nOWNER    DC    CL8'AUTHOR  '           OWNER\nUACC     DC    CL8'UACC    '           UACC\nNOTRMUAC DC    CL8'NOTRMUAC'           NOTERMUACC\nACLCNT   DC    CL8'ACLCNT  '           NUMBER OF USER-IDS\nUSERID   DC    CL8'USERID  '           CONNECTED USER-ID\nUSERACS  DC    CL8'USERACS '           GROUP AUTHORITY OF USER\n*                  *\nOUTRECRD DS    0XL37                   OUTPUT RECORDS\nOUTGROUP DS    XL8                     GROUP NAME\nOUTSGRP  DS    XL8                     SUPERIOR GROUP\nOUTOWNER DS    XL8                     OWNER\nOUTUACC  DS    XL1                     UACC\nOUTTUACC DS    XL1                     NOTERMUACC\nOUTUSERS DS    XL2                     NUMBER OF USERS\nOUTUSER  DS    XL8                     USER-ID\nOUTACESS DS    XL1                     GROUP AUTHORITY\n*\n***********************************************************************\n* OUTPUT FILE DEFINITION                                              *\n***********************************************************************\nGRP2FILE DCB   DDNAME=GRP2FILE,MACRF=PM,DSORG=PS\n*\n         LTORG\n*\nWORKSPCE EQU   *\nWORKAREA DS    0F                      WORKAREA ALIGNMENT ON FULLWORD\nWRKLNGTH DS    F                       WORK AREA LENGTH\nRBA      DS    CL6                     RBA OF RETURNED ENTRY\n         DS    XL2                     RESERVED (BY IBM)\nDUPCOUNT DS    F                       DUPLICATE DATASET NAME COUNT\n         DS    2F                      RESERVED (BY IBM)\nDATALNTH DS    F                       LENGTH OF RETURNED DATA\nWORKDATA DS    CL32740                 32K MAXIMUM RETURNED DATA\nENDWORK  EQU   *                       END OF WORKAREA\n*\nACCESS   DSECT\nUSRACESS DS    XL1\n*\nUSER$ID  DSECT\nUSER     DS    CL8\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFLIST": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00d\\x00d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "FILE013"}, "text": "PROC 0 PREFIX(&SYSUID) PRINTER()\nCONTROL NOFLUSH NOMSG\n/**********************************************************************/\n/* RACFLIST (LIST RACF PROTECTION)                                    */\n/*                                                                    */\n/* THIS CLIST WILL DETERMINE WHICH RACF PROFILES PROTECT WHICH        */\n/* CATALOGED DATASETS FOR A GIVEN USERID OR GROUPID. THE RACF SEARCH  */\n/* COMMAND IS USED TO LIST THE PROFILES DEFINED TO RACF. IN ORDER TO  */\n/* HAVE THE SEARCH COMMAND LIST THE PROFILES, YOU MUST HAVE AT LEAST  */\n/* READ PERMISSION TO THE PROFILES. THE LISTCAT COMMAND EXTRACTS      */\n/* NAMES OF CATALOGED DATASETS AND WRITES THEM TO A TEMPORARY FILE.   */\n/* THE NAMES OF PROFILES AND CATALOGED DATASETS ARE THEN PROCESSED IN */\n/* THE PROGRAM 'LISTRP'.       S. SABEL, BCWA 5/85                    */\n/*                                                                    */\n/* SYNTAX -                                                           */\n/* %RACFLIST PREFIX(PREFIX) PRINTER(PRINTER-ID)                       */\n/*                                                                    */\n/* REQUIRED - NONE                                                    */\n/*                                                                    */\n/* OPERANDS -                                                         */\n/* PREFIX() SPECIFIES A HIGH LEVEL QUALIFIER FOR A USER OR            */\n/*          GROUP THAT YOU WANT TO LIST THE RACF PROTECTION           */\n/*          FOR. IF YOU DO NOT SPECIFY A PREFIX, THE                  */\n/*          DEFAULT IS YOUR USERID.                                   */\n/*                                                                    */\n/* PRINTER() SPECIFIES A LOCAL PRINTER ID TO SEND THE OUTPUT TO       */\n/*           VIA DSPRINT                                              */\n/*                                                                    */\n/**********************************************************************/\n/* USE THE RACF SEARCH COMMAND TO WRITE THE PROFILE NAMES OUT TO THE  */\n/* DATASET '&SYSUID.EXEC.RACF.CLIST'.                                 */\n/**********************************************************************/\nWRITE <*> EXECUTING 'RACFLIST'\nWRITE     -LOADING RACF FILE FOR PREFIX '&PREFIX'.\nSEARCH MASK(&PREFIX) CLIST NOLIST\nSET &LCC = &LASTCC\nIF &LCC = 4 THEN DO\n     WRITE +THERE ARE NO RACF PROFILES DEFINED FOR '&PREFIX'\n     WRITE  ANY DATASETS UNDER PREFIX '&PREFIX' ARE UNPROTECTED.\n\n     EXIT\nEND\nIF &LCC = 8 THEN DO\n     WRITE +YOU ARE NOT AUTHORIZED TO LIST RACF\n     WRITE  INFORMATION FOR PREFIX '&PREFIX'.\n\n     EXIT\nEND\nFREE DA('&SYSUID..EXEC.RACF.CLIST')\nFREE FI(RACFIN)\nALLOC FI(RACFIN) DA('&SYSUID..EXEC.RACF.CLIST') SHR\nSET &LCC = &LASTCC\nIF &LCC \u00ac= 0 THEN DO\n     WRITE +YOU ARE NOT AUTHORIZED TO LIST RACF\n     WRITE  INFORMATION FOR PREFIX '&PREFIX'.\n\n     EXIT\nEND\n/**********************************************************************/\n/* ALLOCATE THE TEMPORARY FILE 'LISTCAT' TO HOLD LISTCAT OUTPUT.      */\n/**********************************************************************/\nFREE FI(LISTCAT)\nALLOC FI(LISTCAT) NEW DELETE TRACKS SPACE(5 5) RECFM(V B A) +\n      LRECL(125) BLKSIZE(6129) DSORG(PS) UNIT(WORK)\nIF &LASTCC \u00ac= 0 THEN DO\n     WRITE +UNABLE TO ALLOCATE LISTCAT OUTPUT FILE.\n     WRITE  COMMAND TERMINATING DUE TO ERROR.\n\n     EXIT\n     END\n/**********************************************************************/\n/* ALLOCATE A TEMPORARY OUTPUT DATASET                                */\n/**********************************************************************/\nSET &D = &STR(T&SUBSTR(01:02,&SYSTIME)&SUBSTR(04:05,&SYSTIME)+\n               &SUBSTR(07:08,&SYSTIME))\nFREE FI(SYSPRINT)\nALLOC FI(SYSPRINT) DA('&SYSUID..RACFLIST.&D') NEW CATALOG TRACKS +\n                   SPACE(2 2) RECFM(F B A) BLKSIZE(6156) LRECL(81)\nIF &LASTCC \u00ac= 0 THEN DO\n     WRITE +UNABLE TO ALLOCATE OUTPUT FILE.\n     WRITE  COMMAND TERMINATING DUE TO ERRROR.\n     EXIT\nEND\n/**********************************************************************/\n/* EXECUTE THE LISTCAT COMMAND TO WRITE OUT THE DATASET NAMES.        */\n/**********************************************************************/\nWRITE     -LOADING LISTCAT FILE FOR PREFIX '&PREFIX'.\nLISTCAT LEVEL(&PREFIX) OFILE(LISTCAT)\n/**********************************************************************/\n/* CLEAR THE SCREEN AND EXECUTE THE PROGRAM 'LISTRP'                  */\n/**********************************************************************/\nWRITE     -EXECUTING PROGRAM LISTRP.\nCALL 'SYSX.LINKLIB1(LISTRP)'\nISPEXEC BROWSE DATASET('&SYSUID..RACFLIST.&D')\nIF &PRINTER \u00ac= THEN DSPRINT '&SYSUID..RACFLIST.&D' &PRINTER CCHAR NONUM\nFREE FI(RACFIN LISTCAT SYSPRINT)\nALLOC FI(SYSPRINT) DA(*)\nCONTROL NOFLUSH NOMSG\nDELETE '&SYSUID..RACFLIST.&D'\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFPROF": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\x0f\\x01\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 271, "newlines": 271, "modlines": 0, "user": "FILE013"}, "text": "***********************************************************************\n*                                                                     *\n* PROGRAM NAME: RACFPROF                                              *\n*                                                                     *\n* FUNCTION:     TO READ A RACF DATASET AND DUMP OUT A SEQUENTIAL      *\n*               FILE OF VARIABLE BLOCKED RECORDS CONTAINING INFO      *\n*               CONTAINED ON EACH PROFILE. TO USE THE DATA, YOU       *\n*               SHOULD HAVE THE TEMPLATES FOR EACH RECORD TYPE,       *\n*               OTHERWISE, THE OUTPUT WON'T BE OF MUCH USE...         *\n*                                                                     *\n* NOTES:        THIS PROGRAM IS NOT AUTHORIZED.                       *\n*               THIS PROGRAM DOES NOT CHANGE THE RACF DATASET.        *\n*                                                                     *\n* SAMPLE EXECUTE JCL:  (NOTICE THE BUFFERING - IT RUNS REALLY FAST    *\n*                       WITH BUFFERING BUMPED UP.)                    *\n*                                                                     *\n*    //JOBNAMEX JOB ACCT,'NAME',CLASS=A,MSGCLASS=A                    *\n*    //RACFPROF EXEC PGM=RACFPROF                                     *\n*    //STEPLIB  DD DSN=STEP.LIB.DSNAME,DISP=SHR                       *\n*    //SYSZRACF DD DSN=RACF.DATASET.NAME,DISP=SHR,DCB=BUFNO=10        *\n*    //SYSUT2   DD DSN=OUTPUT.DATASET.NAME,                           *\n*    //            DISP=(NEW,CATLG,DELETE),UNIT=<DISK>,               *\n*    //            SPACE=(TRK,(5,5),RLSE),                            *\n*    //            DCB=(LRECL=1024,BLKSIZE=1028,RECFM=VB,BUFNO=10)    *\n*                                                                     *\n***********************************************************************\nRACFPROF RMODE 24\nRACFPROF AMODE 31\n* /*     BGNSECT RENT=NO,BASE=(12)\nRACFPROF CSECT\n         USING RACFPROF,15\n         B     V$0001B\n         DC    AL1(V$0001B-*-1),C'RACFPROF 03/13/87 14.14 '\nV$0001B  STM   14,12,12(13)\n         LR    12,15\n         DROP  15\n         USING RACFPROF,12\n         LA    15,V$0001V          OUR SVA\n         ST    15,8(,13)\n         ST    13,4(,15)           SAVE OUR HSA\n         LR    13,15\n*---------------------------------------------------------------------*\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         OPEN  (RACFDCB,INPUT)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         GETMAIN RU,LV=32768,LOC=BELOW\n         ST    R1,@BUFF               SAVE INPUT BUFFER ADDRESS\n         L     R4,@BUFF               R4: BUFFER ADDR\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n*  READ THE RACF DATASET'S ICB RECORD:                                *\n*  THIS SHOWS US HOW BIG THE DATASET IS, AND HOW MANY 1K BLOCKS       *\n*  THE DATASET CAN HAVE:                                              *\n***********************************************************************\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         GET   RACFDCB,(R4)           READ ICB\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R3,4(,R4)              R3: NUMBER OF BAM BLOCKS\n         MH    R3,=H'2008'            TIMES MAX # BLOCKS\n         SLL   R3,10                  TIME 1024 (FOR EACH BLOCK)\n         ST    R3,@TABSIZE            SAVE LENGTH OF GETMAIN\n         GETMAIN RU,LV=(R3),LOC=ANY   GETMAIN TABLE AREA\n         ST    R1,@TABLE              SAVE TABLE ADDRESS\n         LA    R9,0(,R1)              R9: TABLE ORIGIN\n         LR    R2,R9\n         LA    R3,1024\n         LA    R5,1024\n         MVCL  R2,R4                  SET 1ST BLOCK\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n*  LOAD THE RACF DATASET INTO EXTENDED PRIVATE                        *\n***********************************************************************\n* /*     WHILE ALWAYS,DO\nB11W     DS    0H\nB11D     DS    0H\n            LA    R9,1024(,R9)           R9: NEXT ENTRY ADDRESS\n            L     R4,@BUFF               R4: BUFFER ADDR\n* /*        XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n            GET   RACFDCB,(R4)           READ ICB\n* /*        XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n            LR    R2,R9\n            LA    R3,1024\n            LA    R5,1024\n            MVCL  R2,R4                  SET 1ST BLOCK\n* /*     ENDDO ,\n         B     B11W                BACK TO WHILE TEST\nB11N     DS    0H\n*---------------------------------------------------------------------*\nEOF      DS    0H\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         CLOSE (RACFDCB)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n*---------------------------------------------------------------------*\n***********************************************************************\n* R8 POINTS TO THE LEVEL-1 INDEX BLOCK:                               *\n***********************************************************************\nANALYZE  DS    0H                  START TABLE ANALYSIS:\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         OPEN  (SYSUT2,OUTPUT)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R9,@TABLE              R9: TABLE ADDRESS\n         ICM   R8,15,16(R9)           R8: RBA OF 1ST SEQUENCE BLOCK\n         LA    R8,0(R8,R9)            R8: ADR OF 1ST SEQUENCE BLOCK\n*---------------------------------------------------------------------*\n***********************************************************************\n*  R7 POINTS TO THE INDEX ENTRY IN THE INDEX BLOCK                    *\n***********************************************************************\nHEADER   DS    0H                  PROCESS SEQUENCE BLOCK HEADER\n*                                     R8: HEADER OF SEQ BLOCK\n         LA    R7,10(,R8)             R7: INDEX ENTRY BLOCK\n*---------------------------------------------------------------------*\n***********************************************************************\n* POINT R7 TO NEXT INDEX ENTRY IN THIS OR NEXT INDEX BLOCK            *\n***********************************************************************\nENTRY    DS    0H                  PROCESS NEXT ENTRY:\n*                                     R7: UNALIGNED ENTRY ADDRESS\n* /*     IF    (0(R7),EQI,X'20'),THEN IF CHAIN POINTER:\n         CLI   0(R7),X'20'\n         BC    7,B21F\nB21T     DS   0H\n            ICM   R8,15,4(R7)            R8: NEXT SEQ BLOCK RBA\n            LTR   R8,R8                  IS ZERO ?\n            BZ    RETURN                 YES: END OF CHAIN\n            LA    R8,0(R8,R9)            R8: NEXT SEQ BLK ADDR\n            B     HEADER                 PROCESS HEXT HEADER\n* /*     ENDIF ,\nB21F     DS    0H\n* /*     CALLM FORMAT                 FORMAT THE ENTRY\n         BAL   14,FORMAT           CALL LOCAL\n         XR    R2,R2                  RESET R2\n         IC    R2,1(,R7)              R7: NAME LENGTH\n         LA    R7,7(R2,R7)            R7: NEXT ENTRY\n         B     ENTRY\n*---------------------------------------------------------------------*\n***********************************************************************\n*                                                                     *\n***********************************************************************\nRETURN   DS    0H\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         CLOSE (SYSUT2)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R4,@BUFF\n         FREEMAIN RU,LV=32768,A=(R4)\n         L     R0,@TABSIZE\n         L     R1,@TABLE\n         FREEMAIN RU,LV=(0),A=(1)\n* /*     EMOD  RC=0\n         SR    15,15\n         L     13,4(,13)           HSA, OUR CALLERS SVA\n         MVI   8(13),X'FF'         FLAG MEANINGLESS LSA POINTER\n         L     14,12(,13)          RETURN (LEAVE  RC=(15),R0,R1)\n         LM    2,12,28(13)         RESTORE REGS\n         BR    14                   DONE\nV$0001V  DC    18F'0'\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  R9:  IN-CORE RACF DATASET ADDRESS                                  *\n*  R8:  INDEX BLOCK ADDRESS                                           *\n*  R7:  INDEX ENTRY ADDRESS                                           *\n*  R6:  PROFILE ENTRY ADDRESS                                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n* /*     BMOD  ,                      R7: INDEX ENTRY\nFORMAT   ST    14,V$0043           SAVE THE RETURN ADDRESS\n         CLC   =X'0400FF',1(R7)       END OF SEQUENCE SET ?\n         BE    FMTEND                 YES: DONT FORMAT TERMINATOR\n*---------------------------------------------------------------------*\n         XR    R2,R2                  RESET R2\n         IC    R2,1(,R7)              R7: NAME LENGTH\n         LA    R2,1(R2,R7)            R2: ADR OF PROFILE RBA\n         ICM   R6,15,2(R2)            R6: PROFILE RBA\n         LA    R6,0(R6,R9)            R6: PROFILE ADDRESS\n*---------------------------------------------------------------------*\n         L     R2,@BUFF               R2: TARGET BUFFER ADDRESS\n         XR    R3,R3                  RESET R3\n         ICM   R3,B'0011',3(R6)       R3: LOGICAL DATA LENGTH\n         LA    R1,4(,R3)              R1: LLZZ LENGTH\n         SLL   R1,16                  MAKE LLZZ FORMAT\n         ST    R1,0(,R2)              SET RDW\n         LA    R2,4(,R2)              R2: MVCL TARGET ADDR\n         LA    R4,5(,R6)              R4: MVCL SOURCE ADDR\n         LR    R5,R3\n         MVCL  R2,R4                  TRANSFER RACF PROFILE\n*---------------------------------------------------------------------*\nFMTEND   DS    0H\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         L     R2,@BUFF               R2: BUFFER ADDRESS\n         PUT   SYSUT2,(R2)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n*---------------------------------------------------------------------*\n* /*     EMOD  RC=0\n         SR    15,15\n         L     14,V$0043           MODULE RETURN ADDRESS\n         BR    14                  RETURN\nV$0043   DC    1F'0'\n*=====================================================================*\n         EJECT ,\n*=====================================================================*\n* /*     BMOD  ,C\n         LTORG ,\n*---------------------------------------------------------------------*\n@BUFF    DC    A(0)                   RACF INPUT BUFFER ADDRESS\n@TABLE   DC    A(0)                   ADDRESS OF TABLE\n@TABSIZE DC    A(0)                   GETMAINED LENGTH OF TABLE\n*---------------------------------------------------------------------*\nRACFDCB  DCB   DDNAME=SYSZRACF,DSORG=PS,MACRF=GM,EODAD=EOF\n*---------------------------------------------------------------------*\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM,RECFM=VB\n*---------------------------------------------------------------------*\n* /*     EMOD  ,\n         DC    0F'0'\n*=====================================================================*\n* /*     ENDSECT ,\nV$0001F  DC    0F'0'\n         DROP  ,\n         DS    0D                      ***RNB MKH\n         YREGS ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFPROT": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01t\\x01t\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 372, "newlines": 372, "modlines": 0, "user": "FILE013"}, "text": "RACFPROT TITLE 'RACFPROT - DISPLAY RACF PROFILES FOR DATA SETS'\n***********************************************************************\n*                                                                     *\n* MODULE NAME:     RACFPROT                                           *\n*                                                                     *\n* FUNCTION:        TSO COMMAND PROCESSOR THAT WILL ACCEPT CATALOG     *\n*                  NODES AS INPUT AND RETURN DATA SET NAMES UNDER     *\n*                  THOSE NODES AND THE GENERIC RACF PROFILES THAT     *\n*                  PROTECT THEM VIA THE PUTLINE MACRO.                *\n*                                                                     *\n* INPUT DATASETS:  NONE                                               *\n*                                                                     *\n* OUTPUT DATASETS: NONE                                               *\n*                                                                     *\n* ATTRIBUTES:      NON-REENTRANT, AC=1                                *\n*                                                                     *\n* REGISTER USAGE:  USES STANDARD LINKAGE CONVENTIONS                  *\n*                  R0 - COUNTER BASE                                  *\n*                  R1 - COMMAND PROCESSOR INPUT BUFFER                *\n*                  R2 - R11 - WORK REGISTERS                          *\n*                  R12- BASE REGISTER                                 *\n*                  R13- IBM LINKAGE ETC.                              *\n*                                                                     *\n* RETURN CODES:    0  - SUCCESSFUL                                    *\n*                  4  - NODE(S) NOT FOUND                             *\n*                  8  - ERROR IN PARSE                                *\n*                  12 - WORK AREA TOO SMALL                           *\n*                  16 - SYNTAX ERROR                                  *\n*                  20 - RACHECK ERROR                                 *\n*                                                                     *\n* SYNTAX:          LOC CATALOG.NODES NOHEADING                        *\n*                  YOU MAY SPECIFY ALL NODES EXCEPT FOR THE LAST NODE.*\n*                                                                     *\n* NOTE:            DURING ASSEMBLY YOU MAY RECEIVE A LEVEL 4 MNOTE    *\n*                  FROM THE RACHECK MACRO. THIS IS BECAUSE OF THE     *\n*                  'PRIVATE' KEYWORD ON THE ENTITY STATEMENT AND CAN  *\n*                  BE IGNORED.                                        *\n*                                                                     *\n* AUTHOR:          STUART SABEL  12/23/88                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n         USING SAVEAREA,R13\n         USING RACFPROT,R12\n         USING CPPL,R11\n         USING PPL,R10\n         USING MYPDL,R6\nRACFPROT CSECT\n         SAVE  (14,12),,'RACFPROT - &SYSDATE.&SYSTIME' SAVE REGISTERS\n         LR    R12,R15                 ESTABLISH BASE REGISTER\n         LR    R11,R1                  SAVE CPPL ADDRESS\n         GETMAIN R,LV=WORKSIZE         OBTAIN A WORK AREA\n         ST    R1,SAVENEW              FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN\n         LR    R13,R1                  SAVE THE SAVE AREA POINTER\n         XC    SAVENEW(4),SAVENEW      CLEAR FORWARD CHAIN\n         EJECT\n**********************************************************************\n*  INITIALIZE THE PARSE PARAMETER LIST.                              *\n**********************************************************************\n         LA    R10,MYPPL               GET THE PPL ADDRESS\n         MVC   PPLUPT(4),CPPLUPT       MOVE THE UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT       MOVE THE ECT ADDRESS\n         LA    R1,MYECB                GET THE ECB ADDRESS\n         ST    R1,PPLECB               SAVE THE ECB ADDRESS\n         L     R1,=A(MYPCL)            GET THE PCL ADDRESS\n         ST    R1,PPLPCL               SAVE THE PCL ADDRESS\n         LA    R1,MYPDLA               GET THE PDL ADDRESS AREA ADDRESS\n         ST    R1,PPLANS               SAVE THE PDL ADDR AREA ADDRESS\n         MVC   PPLCBUF(4),CPPLCBUF     MOVE THE COMMAND BUFFER ADDRESS\n         XC    PPLUWA(4),PPLUWA        CLEAR THE USER WORK AREA ADDRESS\n         MVC   LOCATE(44),=CL44' '     INITIALIZE THE INPUT AREA\n         XC    MYECB(4),MYECB          CLEAR THE ECB\n**********************************************************************\n*  INITIALIZE THE MESSAGE PARAMETER LIST.                            *\n**********************************************************************\n         LA    R1,MTCSECTP             GET THE MT DESCRIPTOR ADDRESS\n         ST    R1,MTPLPTR              SAVE IN THE MT HEADER\n         ST    R11,MTCPPLP             SAVE THE CPPL ADDRESS\n         XC    MTECBP(4),MTECBP        CLEAR THE ECB POINTER\n         L     R1,=A(SETMYMSG)         GET THE MESSAGE CSECT ADDRESS\n         ST    R1,MTCSECTP             SAVE THE MESSAGE CSECT ADDRESS\n         MVI   MTSW1,MTHEXSW+MTPUTLSW  INSERTS HEX + PUTLINE\n         MVI   MTSW2,X'00'             CLEAR SWITCHES\n         XC    MTINSRTS(16),MTINSRTS   CLEAR INSERTS\n         EJECT\n**********************************************************************\n*  PARSE THE COMMAND LINE FOR THE DATA WANTED.                       *\n**********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,(R10))    PARSE THE COMMAND LINE\n         LTR   R15,R15                 DID THE PARSE COMPLETE?\n         BNZ   PARSEERR                NO, GO ANALYZE THE ERROR\n         L     R6,PPLANS               GET THE PDL ADDRESS ADDRESS\n         L     R6,0(,R6)               GET THE PDL ADDRESS\nGETDSN   DS    0H\n         LH    R3,MYDSN+4              GET THE DATASET LENGTH\n         STC   R3,LOCLEN               SAVE THE DATASET LENGTH\n         BCTR  R3,0                    SUBTRACT ONE FOR MOVE\n         L     R1,MYDSN                GET THE DATASET NAME ADDRESS\n         LA    R2,LOCATE               GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM             MOVE THE DSNAME TO THE WORK AREA\n         EJECT\n**********************************************************************\n*  SET UP IKJEHCIR PARAMETER LIST                                    *\n**********************************************************************\n         DS    0H\n         L     R4,SHORTLN             GET SHORT LIST LENG\n         GETMAIN RU,LV=(R4),BNDRY=PAGE GET ONE PAGE WORTH\n         ST    R1,STORAGE             SAVE STORAGE PTR\n         LR    R3,R1                  SET ADDRESSABILITY\n         USING MYALIST,R3             ADDRESSABILITY\n         SR    R1,R1                  CLEAR R1\n         XC    MYALIST(255),MYALIST   CLEAR HEADER ETC\n         STH   R4,LISTLEN             SET LENGTH INTO LIST\n         XC    CLEAR1,CLEAR1          CLEAR PARM LIST\n         XC    CLEAR2,CLEAR2          CLEAR PARM LIST\n         XC    CLEAR3,CLEAR3          CLEAR PARM LIST\n         MVI   RETURNC,0              CLEAR RETURN CODE\n         EJECT\n**********************************************************************\n*  CALL IKJEHCIR TO DO THE CATALOG LOCATE                            *\n**********************************************************************\nDOIT     DS    0H\n         LA    R1,CATPARMS            POINT TO PARAMETER LIST\n         CALLTSSR EP=IKJEHCIR,MF=(E,(R1)) CALL IT\n**********************************************************************\n*  CHECK THE RETURN CODE TO SEE WHAT THE STATUS OF THE LOCATE IS.    *\n**********************************************************************\n         CLI   RETURNC,0              CHECK IF SUCCESSFUL\n         BZ    GOTNAMES               PUT OUT DSNAMES IF SUCCESSFUL\n         CLI   RETURNC,40             WORK AREA TOO SMALL\n         BE    TOOSMALL               GO ISSUE AN ERROR MESSAGE\n         CLI   RETURNC,44             OTHER WAY TO SAY TOO SMALL\n         BE    TOOSMALL               GO ISSUE AN ERROR MESSAGE\n         B     NOTFOUND               GO ISSUE AN ERROR MESSAGE\n         EJECT\n**********************************************************************\n*  LOOP THROUGH THE DATASET NAMES AND ISSUE A PUTLINE FOR EACH ONE.  *\n**********************************************************************\nGOTNAMES DS    0H\n         LH    R5,USELEN               GET LENGTH OF RETURNED DATA\n         N     R5,LOWBITS              KEEP LOW HALF WORD\n         SH    R5,=H'4'                SUBTRACT OUT FIRST WORD\n         LA    R7,LISTTYPE             POINT TO FIRST ENTRY\n         USING SDATA,R7                WORK ADDRESSABILITY\n         L     R8,CPPLUPT              SAVE ADDRESS OF THE UPT\n         L     R4,CPPLECT              SAVE ADDRESS OF THE ECT\n         CLI   NOHEAD+1,1              NO HEADINGS WANTED?\n         BE    LOOP1                   THEN DON'T DISPLAY HEADINGS\n         MVC   LINE+4(90),HEAD1        MOVE IN FIRST HEADING\n         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE,TERM,SINGLE,DATA),          X\n               MF=(E,IOPLADS),UPT=(R8),ECT=(R4),ECB=MYECB\n         MVC   LINE+4(90),HEAD2        MOVE IN SECOND HEADING\n         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE,TERM,SINGLE,DATA),          X\n               MF=(E,IOPLADS),UPT=(R8),ECT=(R4),ECB=MYECB\nLOOP1    DS    0H\n         MVC   DSNAME,DATANAME         COPY DATA SET NAME\n         MVC   LINE+4(44),DSNAME       MOVE IT TO THE OUTPUT LINE\nCHECK    DS    0H\n         MVC   PROFILE(44),BLANKS      BLANK OUT PROFILE NAME\n*        LA    R2,LISTFORM             ADDRESS OF RACHECK MF=L\n*        USING ACHKLIST,R2             RACHECK PARM LIST MAP\n*        OI    ACHKFLG3,ACHKPRI        SET 'PRIVATE' BIT\n*        DROP  R2                      NO MORE BASE\n         MVC   MYCHECK(LISTLENG),LISTFORM   MOVE IN RACHECK LIST\n         MODESET KEY=ZERO              BECOME A MINOR DEITY\n         RACHECK ENTITY=(DSNAME,PRIVATE),MF=(E,MYCHECK)\n         USING RRPF,R1                 RETURNED AREA ADDRESSABILITY\n         C     R15,=X'00000004'        PROFILE NOT FOUND?\n         BE    NOPROT                  NOPE, TELL ME\n         C     R15,=X'00000008'        NOT AUTHORIZED?\n         BE    GOTPROF                 TELL 'EM ANYWAY\n         LTR   R15,R15                 CHECK IT AGAIN\n         BNZ   RACFERR                 NO GOOD IF NOT ZERO\n         B     GOTPROF                 LOOKS GOOD\nNOPROT   DS    0H\n         MVC   PROFILE(44),UNPROT      MOVE IN UNPROTECTED MSG\n         B     FREEME                  GO FREEMAIN SP229\nGOTPROF  MVC   PROFILE(44),DSPDSNM     COPY PROFILE NAME\nFREEME   DS    0H\n         MVC   GETLEN(3),RRPLEN        COPY SP229 LENGTH\n         L     R0,GETLEN               LOAD TO R0\n         SRL   R0,4                    SHIFT RIGHT FOR FULLWORD\n         FREEMAIN R,LV=(R0),A=(R1),SP=229   FREE SP 229 FROM RACHECK\n         MODESET KEY=NZERO             BECOME A PEASANT AGAIN\n         MVC   LINE+50(44),PROFILE     MOVE IN PROFILE NAME\nPUTIT    DS    0H\n         PUTLINE PARM=PUTBLOK,OUTPUT=(LINE,TERM,SINGLE,DATA),          X\n               MF=(E,IOPLADS),UPT=(R8),ECT=(R4),ECB=MYECB\nNOVOLS   DS    0H\n         LA    R7,ENTLE1(R7)           INCR TO NEXT ENTRY\n         SH    R5,ENTLEN1              DECR REMAINING DATA\n         LTR   R5,R5                   CHECK IF DONE\n         BP    LOOP1                   CONTINUE IF NOT DONE\n         B     AOK                     WE BE DONE NOW.\n         EJECT\n**********************************************************************\n*  ISSUE MESSAGES INDICATING THE STATUS OF THE LOCATE REQUEST.       *\n**********************************************************************\nTOOSMALL MVC   MTMSGID(4),=CL4'LA01'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,12                   SYNTAX ERROR RETURN CODE\n         B     INSERTRC                INSERT THE RC AND WRITE\nNOTFOUND MVC   MTMSGID(4),=CL4'LA02'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,4                    SYNTAX ERROR RETURN CODE\n         B     INSERTRC                INSERT THE RC AND WRITE\nPARSEERR MVC   MTMSGID(4),=CL4'LA03'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,8                    PARSE ERROR RETURN CODE\n         B     INSERTRC                INSERT THE RC AND WRITE\nRACFERR  MVC   MTMSGID(4),=CL4'LA05'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,20                   PARSE ERROR RETURN CODE\n         B     INSERTRC                INSERT THE RC AND WRITE\nSYNERROR MVC   MTMSGID(4),=CL4'LA04'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,16                   SYNTAX ERROR RETURN CODE\n         B     WRITEMSG                WRITE THE ERROR MESSAGE\nAOK      LA    R2,0                    NORMAL RETURN CODE\n         B     FREE                    EXIT WITHOUT ANY MESSAGE\nINSERTRC ST    R15,MYINSRC             SAVE THE RETURN CODE\n         LA    R1,MYINSRC              GET THE RETURN CODE ADDRESS\n         STCM  R1,B'0111',MTADDR       PUT THE ADDRESS IN THE PLIST\n         MVI   MTLEN,4                 LENGTH OF ENTRY IS 4 BYTES\n         OI    MTHIGHL,X'80'           INDICATE TRANSLATION IS DESIRED\nWRITEMSG CALLTSSR EP=IKJEFF02,MF=(E,MTPARML)     WRITE THE MESSAGE\n         B     FREE                    GO FREE THE PDL AND EXIT\n         EJECT\n**********************************************************************\n*  FREE GETMAINED STORAGE AND RETURN CONTROL TO THE TMP              *\n**********************************************************************\nFREE     IKJRLSA MYPDLA                RELEASE THE PDL STORAGE\nEXIT     DS    0H\n         LR    R1,R3                   STORAGE ADDRESS FOR IKJEHCIR\n         L     R4,SHORTLN              SAVE STORAGE SIZE\n         FREEMAIN RU,LV=(R4),A=(R1)    FREE IKJEHCIR WORK AREA\n         LR    R1,R13                  GET THE WORK AREA POINTER\n         L     R13,SAVEOLD             GET CALLER'S SAVE AREA\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE OUR WORK AREA\n         LR    R15,R2                  PUT THE RETURN CODE INTO R15\n         ST    R15,SAVER15             SET RETURN CODE\n         XC    SAVENEW(4),SAVENEW      CLEAR FORWARD CHAIN\n         RETURN (14,12),RC=(15)        RESTORE REGISTERS AND RETURN\n         EJECT\n**********************************************************************\n*  PARSE PARAMETER CONTROL LIST.                                     *\n**********************************************************************\nMYPCL    IKJPARM DSECT=MYPDL\nMYDSN    IKJPOSIT DSNAME,PROMPT='THE CATALOG NODE(S) TO SEARCH FOR',   X\n               HELP='COMPLETE, UNQUOTED CATALOG NODES TO SCAN FOR.'\nNOHEAD   IKJKEYWD\n         IKJNAME  'NOHEAD',ALIAS=('N','NO','NOHEAD','NOHEADING')\n         IKJENDP\n**********************************************************************\n*  CONSTANTS AND SKELETONS.                                          *\n**********************************************************************\nLISTFORM RACHECK ENTITY=DSNAME,CLASS='DATASET',ATTR=READ,RELEASE=1.8,  X\n               DSTYPE=N,LOG=NOSTAT,RACFIND=NO,GENERIC=ASIS,STATUS=NONE,X\n               VOLSER=VOLUME,MF=L\nLISTLENG EQU   *-LISTFORM              LENGTH OF RACHECK MACRO\nPUTBLOK  PUTLINE MF=L                  DEFAULT PUTLINE MACRO, LIST FORM\nMOVEPARM MVC   0(*-*,R2),0(R1)         EXECUTED MOVE INSTRUCTION\nHEAD1    DC    CL90'CATALOGED DATA SET NAME                       PROTE+\n               CTING RACF PROFILE'\nHEAD2    DC    CL90'--------------------------------------------  -----+\n               ---------------------------------------'\nVOLUME   DC    CL6' '                  DUMMY VOLSER FOR RACHECK\nUNPROT   DC    CL44'***** UNPROTECTED DATA SET *****'\nBLANKS   DC    CL44' '                 BLANK SPACES\nLINE     DC    H'90',H'0'              PUTLINE OUTPUT LENGTH/RSVD BYTE\n         DC    CL90' '                 PUTLINE OUTPUT LINE\nENTLENG  DC    H'58'                   COUNTER\nENTLEN1  DC    H'45'                   COUNTER\nDSNAME   DC    CL44' '                 RETURNED DATA SET NAME\nLOCATE   DC    CL44' '                 NODES FROM COMMAND LINE\nSHORTLN  DC    F'131064'               WORKAREA SIZE FOR LOCATES\nLOWBITS  DC    F'65535'                LOW VALUES\nCATPARMS DC    X'02'                   LOCATE OPTION - LOCATE ALL NAMES\nCLEAR1   DC    XL2'0'                  RESERVED\nRETURNC  DC    X'0'                    CATALOG RETURN CODE\nCATARG   DC    A(LOCATE)               CATALOG SEARCH ARGUMENT\nCLEAR2   DC    A(0)                    VOLSER OF CVOL\nSTORAGE  DC    A(0)                    WORK AREA ADDRESS\nCATSAVE  DC    A(REGSAVE)              SAVE AREA\nCLEAR3   DC    A(0)                    PASSWORD\nALIGNMNT DS    0D                      ALIGNMENT\nREGSAVE  DS    16F                     REGISTER SAVE AREA\nREGSAVE1 DS    16F                     REGISTER SAVE AREA\n         LTORG\nSDATA    DSECT\nTYPEX    DS    CL1                     DATA SET TYPE\nDATANAME DS    CL44                    RETURNED DATA SET NAME\nENTLE1   EQU   *-SDATA                 LENGTH OF CATALOG ENTRIES\nMYALIST  DSECT\nLISTLEN  DS    H                       LENGTH OF THIS BLOCK\nUSELEN   DS    H                       LENGTH OF BLOCK USED\nLISTTYPE DS    CL1                     TYPE OF CATALOG ENTRY\nLISTNAME DS    CL44                    DATA SET NAME ENTRY\n         EJECT\n**********************************************************************\n*  COMMAND ERROR AND INFORMATIONAL MESSAGES.                         *\n**********************************************************************\nSETMYMSG CSECT\nLOC001E  IKJTSMSG ('RAC001E TOO MANY ENTRIES - IKJEHCIR RC = ',),LA01\nLOC002E  IKJTSMSG ('RAC002E CATALOG NODE(S) NOT FOUND - IKJEHCIR RC = 'X\n               ,),LA02\nLOC003E  IKJTSMSG ('RAC003E PARSE ERROR - IKJPARS RC =',),LA03\nLOC004E  IKJTSMSG ('RAC004E SYNTAX ERROR. USE UNQUOTED NODES'),LA04\nLOC005E  IKJTSMSG ('RAC005E ERROR CONDITION IN RACHECK'),LA05\n         IKJTSMSG\n         EJECT\n**********************************************************************\n*  SAVE AND WORK AREA.                                               *\n**********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    0F\nSAVEPLI  DS    F                       USED BY PL/I PGMS\nSAVEOLD  DS    F                       BACKWARD CHAIN\nSAVENEW  DS    F                       FORWARD CHAIN\nSAVER14  DS    F                       SAVE CALLER'S R0-15\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\nSAVER2   DS    F\nSAVER3   DS    F\nSAVER4   DS    F\nSAVER5   DS    F\nSAVER6   DS    F\nSAVER7   DS    F\nSAVER8   DS    F\nSAVER9   DS    F\nSAVER10  DS    F\nSAVER11  DS    F\nSAVER12  DS    F\nSAVESIZE EQU   *-SAVEAREA              SIZE OF THIS AREA\n         DS    0F                      ALIGNMENT\nGETLEN   DS    XL3                     SP229 GETMAINED LENGTH\nMYPPL    DS    0F,CL(PPLSIZE)          PARSE PARAMETER LIST\nMYECB    DS    F                       PARSE EVENT CONTROL BLOCK\nIOPLADS  DS    4F'0'                   SPACE FOR IO PARM LIST\nMYPDLA   DS    F                       PARSE ANSWER AREA ADDRESS\nMYINSRC  DS    F                       RETURN CODE FOR INSERT\nLOCLEN   DS    AL1                     LENGTH OF DATASET NAME\nPROFILE  DS    CL44                    RETURNED PROFILE NAME\nMYCHECK  RACHECK ENTITY=DSNAME,CLASS='DATASET',ATTR=READ,RELEASE=1.8,  X\n               DSTYPE=N,LOG=NOSTAT,RACFIND=NO,GENERIC=ASIS,STATUS=NONE,X\n               VOLSER=VOLUME,MF=L\n         PRINT NOGEN\nMYMSGPL  IKJEFFMT MTDSECT=NO           IKJEFF02 MESSAGE PARAMETER LIST\nWORKSIZE EQU   *-WORKAREA\n         IKJCPPL                       CMD PROC PARM LIST MAP\n         IKJPPL                        PARSE PARM LIST MAP\nPPLSIZE  EQU   *-PPL\n         CVT   DSECT=YES,LIST=NO       COMMUNICATIONS VECTOR TABLE\n         ICHRRPF                       RACF RESIDENT PROFILE MAP\n         ICHACHKL                      RACHECK PARM LIST MAP\n**********************************************************************\n* REGISTER EQUATES                                                   *\n**********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   RACFPROT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFRPT": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x07\\xf6\\x07\\xf6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 2038, "newlines": 2038, "modlines": 0, "user": "FILE013"}, "text": "* //*******************************************************************\n* //*\n* //* RACFRPT PROVIDES A SYNOPSIS OF THE FOLLOWING INFORMATION:\n* //*\n* //*     FIELD                                DESCRIPTION\n* //*  =============================================================\n* //*  1. USER/JOB                       INTERACTIVE USERID OR\n* //*                                    BATCH JOB CARD NAME\n* //*\n* //*  2. GRP/STEP                       RACF CONNECTED GROUP OR\n* //*                                    JOB STEP NAME\n* //*\n* //*  3. DATE                           DATE EVENT OCCURED\n* //*\n* //*  4. TIME                           TIME EVENT OCCURED\n* //*\n* //*  5. DATA SET NAME / RACF RESOURCE  DATA SET OR PROFILE NAME\n* //*\n* //*  6. VOLID                          VOLUME WHERE RESOURCE RESIDES\n* //*\n* //*  7. TERMINAL ID                    NETWORK NODE ID\n* //*\n* //*  8. EVENT FLAG                     V = VIOLATIONS\n* //*                                    W = WARNING\n* //*                                    E = ERROR\n* //*\n* //*  9. EVENT DESCRIPTION              TEXT DESCRIPTION OF THE EVENT\n* //*\n* //* 10. SYSTEM ID                      JES2 SMF SYSTEM IDENTIFICATION\n* //*\n* //*******************************************************************\n* //*\n* //* REPORT CONTROL CARD OPTIONS:\n* //*\n* //* - SELECTION BY GROUPS\n* //* - SELECTION BY USERS\n* //* - SELECTION BY DATES\n* //* - SELECTION BY TIMES\n* //* - SELECTION BY EVENT(S)\n* //* - SELECTION BY FULL OR PARTIAL DATA SET NAME\n* //*                     AND OR RACF PROFILE NAME\n* //*\n* //* - SUPPRESSION BY FULL OR PARTIAL DATA SET NAME\n* //*                      AND OR RACF PROFILE NAME\n* //*\n* //* - SORTING BY SYSID, GROUP, USER, EVENT, DATE AND TIME\n* //*\n* //*******************************************************************\n* //*\n* //* CONTROL CARDS:\n* //*\n* //*    ALL CONTROL CARDS ARE OPTIONAL.\n* //*\n* //*    THERE IS A MINIMUM OF ERROR CHECKING DONE ON CONTROL CARD\n* //*    SYNTAX.  IF INVALID OPTIONS OR FORMATS ARE USED THE RESULTS\n* //*    ARE UNPREDICTABLE.\n* //*\n* //*    THE RECORD SELECTION/SUPPRESSION HIERARCHY IS AS FOLLOWS:\n* //*\n* //*          *------------------------------*\n* //*          *  ALL RECORDS (SEE SUPR CARD) *\n* //*          *------------------------------*\n* //*          * EVENT (TYPE / GROUP NUMBER)  *\n* //*          *------------------------------*\n* //*          *          DATASET             *\n* //*          *------------------------------*\n* //*          *           GROUP              *\n* //*          *------------------------------*\n* //*          *        USER / JOB            *\n* //*          *------------------------------*\n* //*          *           DATES              *\n* //*          *------------------------------*\n* //*          *           TIMES              *\n* //*          *------------------------------*\n* //*\n* //* GROUPS  - SELECTIONS MAY BE MADE ON SPECIFIC GROUPS BY USING ONE\n* //*           MORE GROUP CONTROL CARDS.  GROUP NAMES SHOULD BEGIN\n* //*           IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n* //*           SEPERATED BY ONE BLANK.  IF NO GROUP CONTROL CARD OR\n* //*           GROUP NAMES ARE FOUND THEN NO FILTERING WILL BE DONE\n* //*           BASED ON THE GROUP. THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           GROUPS   GROUPID1 GROUPID2 GROUPID3 ... GROUPIDX\n* //*\n* //*           GROUPS                  ( SELECT ALL GROUPS )\n* //*           GROUPS   SYSTEMS TEST   ( SELECT ONLY GROUPS\n* //*                                     SYSTEMS AND TEST )\n* //*\n* //* USERS   - SELECTIONS MAY BE MADE ON SPECIFIC USERS BY USING ONE\n* //*           MORE USER CONTROL CARDS.  USERIDS SHOULD BEGIN IN\n* //*           CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n* //*           SEPERATED BY ONE BLANK.  IF NO USER CONTROL CARD OR\n* //*           USERIDS ARE FOUND THEN NO FILTERING WILL BE DONE\n* //*           BASED ON THE USERID. ( THIS OPTION NOT AVAILABLE IF\n* //*           THE \"JOB\" PARM IS USED ). THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           USERS    USER01 USER02 USER03 USER04 ... USERXX\n* //*\n* //*           USERS                  ( SELECT ALL USERS )\n* //*           USERS    SYS01 DEV01   ( SELECT ONLY SYS01 AND\n* //*                                    DEV01 )\n* //*\n* //* JOBS    - SELECTIONS MAY BE MADE ON SPECIFIC JOBNAME BY USING\n* //*           ONE OR MORE USER CONTROL CARDS.  JOB NAMES SHOULD BEGIN\n* //*           IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70\n* //*           SEPERATED BY ONE BLANK.  IF NO JOBS CONTROL CARD OR\n* //*           JOBNAMES ARE FOUND THEN NO FILTERING WILL BE DONE\n* //*           BASED ON THE JOBNAME. ( THIS OPTION IS ONLY AVAILABLE\n* //*           IF THE \"JOB\" PARM IS USED ).\n* //*           THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           JOBS     JOBNAME1 JOBNAME2 JOBNAME3 ... JOBNAMEX\n* //*\n* //*           JOBS                    ( SELECT ALL JOBS )\n* //*           JOBS     CICS BATCH1    ( SELECT ONLY CICS AND BATCH1 )\n* //*\n* //* DATES   - SELECTION CAN BE LIMITED TO A SPECIFIC RANGE.\n* //*           IF A DATES CONTROL CARD IS NOT FOUND OR CONTAINS\n* //*           A BLANK IN CARD COLUMN 10, NO FILTERING WILL\n* //*           BE DONE BASE ON THE DATE.  THE FORMAT FOR THIS\n* //*           CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           DATES                            ( SELECT ALL DATES )\n* //*\n* //*           DATES    01/01/86-12/31/86       ( SELECT A RANGE\n* //*                      (LOW)   (HIGH)          OF DATES )\n* //*\n* //* TIMES   - SELECTION CAN BE LIMITED TO A SPECIFIC RANGE.\n* //*           IF A TIMES CONTROL CARD IS NOT FOUND OR CONTAINS\n* //*           A BLANK IN CARD COLUMN 10, NO FILTERING WILL\n* //*           BE DONE BASED ON TIME.  THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           TIMES                            ( SELECT ALL TIMES )\n* //*\n* //*           TIMES    00:00-23:59             ( SELECT A RANGE\n* //*                    (BEG) (END)               OF TIMES )\n* //*\n* //* DATASET - SELECTION CAN BE LIMITED BY A FULL OR PARTIAL DATA\n* //*           SET NAME.  FOR RACF COMMAND EVENTS THE DATASET/RESOURCE\n* //*           FIELD CONTAINS A RACF PROFILE NAME.  IF A DATASET\n* //*           CONTROL CARD IS NOT FOUND OR CONTAINS A BLANK IN CARD\n* //*           COLUMN 10, NO FILTERING WILL BE DONE BASE ON THE\n* //*           DATASET/RESOURCE NAME.  IF AN ASTERISK IS FOUND AT THE\n* //*           END OF A PARTIALLY SPECIFIED DATASET/RESOURCE NAME\n* //*           SELECTION WILL BE MADE ON ALL ENTRIES THAT MATCH THE\n* //*           THE CHARATERS UP TO THE ASTERISK.  DATASET/RESOURCE\n* //*           NAMES THAT DO NOT CONTAIN AN ASTERISK MUST MATCH\n* //*           EXACTLY.  THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           DATASET                 ( SELECT ALL )\n* //*\n* //*           DATASET  SYS1.*         ( SELECT HLQ SYS1. )\n* //*           DATASET  SYS*           ( SELECT ALL BEGINING W/ SYS )\n* //*           DATASET  SYS1.DATA      ( SELECT ONLY SYS1.DATA )\n* //*\n* //* EVENT   - SELECTION CAN BE LIMITED TO ONE OF THREE EVENT TYPES,\n* //*           (IG. VIOLATIONS, WARNINGS AND EVENTS) AND UP TO 30\n* //*           EVENT GROUP CODES.  IF AN EVENT CONTROL CARD IS NOT\n* //*           FOUND OR CONTAINS A BLANK IN CARD COLUMN 10, NO\n* //*           FILTERING WILL BE DONE BASED ON EVENT TYPE.  IF AN\n* //*           EVENT CONTROL CARD IS NOT FOUND OR CONTAINS BLANKS\n* //*           IN CARD COLUMNS 11 AND 12, NO FILTERING WILL BE DONE\n* //*           BASED ON THE EVENT GROUP NUMBER.  THE FORMAT FOR THIS\n* //*           CONTROL CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           EVENT                ( SELECT ALL EVENT TYPES )\n* //*\n* //*           EVENT    TNN...      ( T  = EVENT TYPE )\n* //*                                ( NN = GROUP NUMBER\n* //*                                     - MUST BE TWO DIGITS )\n* //*\n* //*           EVENT     02         ( SELECT ALL FOR RESOURCE ACCESS )\n* //*           EVENT    V01         ( SELECT VIOLATIONS FOR LOGON )\n* //*           EVENT    W           ( SELECT ALL WARNINGS )\n* //*           EVENT    E0213       ( SELECT ERRORS FOR RESOURCE\n* //*                                  ACCESS AND ALT USER COMMANDS )\n* //*\n* //*           EVENT TYPES:\n* //*\n* //*           V = VIOLATIONS, W = WARNINGS, E = ERRORS\n* //*\n* //*           GROUP\n* //*           NUMBER           DESCRIPTION\n* //*          ===================================================\n* //*             01             JOB INITIATION / LOGON\n* //*             02             RESOURCE ACCESS\n* //*             03             END OF VOLUME\n* //*             04             RENAME DATA SET\n* //*             05             SCRATCH DATA SET\n* //*             06             DEL DATA SET / TAPE VOLUME\n* //*             07             DEFINE DATA SET / TAPE VOLUME\n* //*             08             ADDSD\n* //*             09             ADDGROUP\n* //*             10             ADDUSER\n* //*             11             ALTDSD\n* //*             12             ALTGROUP\n* //*             13             ALTUSER\n* //*             14             CONNECT\n* //*             15             DELDSD\n* //*             16             DELGROUP\n* //*             17             DELUSER\n* //*             18             PASSWORD\n* //*             19             PERMIT\n* //*             20             RALTER\n* //*             21             RDEFINE\n* //*             22             RDELETE\n* //*             23             REMOVE\n* //*             24             SETROPTS\n* //*             25             RVARY\n* //*\n* //* SUPR    - REPORT RECORDS CAN BE SUPPRESSED BY EITHER A FULL\n* //*           OR PARTIAL DATA SET NAME.  FOR RACF COMMAND EVENTS\n* //*           THE DATASET/RESOURCE FIELD CONTAINS A RACF PROFILE\n* //*           NAME.  IF A SUPR CONTROL CARD IS NOT FOUND OR CONTAINS\n* //*           A BLANK IN CARD COLUMN 10, THEN NO RECORDS WILL BE\n* //*           SUPPRESSED BASED ON THE DATASET/RESOURCE NAME. IF\n* //*           AN ASTERISK IS FOUND AT THE END OF A PARTIALLY\n* //*           SPECIFIED DATASET/RESOURCE NAME, RECORDS WILL BE\n* //*           SUPPRESSED ON ALL ENTRIES THAT MATCH THE CHARATERS\n* //*           UP TO THE ASTERISK.  A DATASET/RESOURCE NAME THAT\n* //*           DOES NOT CONTAIN AN ASTERISK MUST MATCH EXACTLY TO BE\n* //*           SUPPRESSED. THE FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           SUPR                    ( SUPPRESS NONE )\n* //*\n* //*           SUPR     SYS87*         ( SUPPRESS ALL 1987 SYSTEM\n* //*                                     TEMPORARY DATA SETS )\n* //*           SUPR     SYS1.DATA      ( SUPPRESS ALL RECORDS THAT\n* //*                                     REFERENCE THE SYS1.DATA\n* //*                                     FILE AND OR THE SYS1.DATA\n* //*                                     RACF PROFILE )\n* //*           SUPR     SYS1.*         ( SUPPRESS ALL RECORDS THAT\n* //*                                     REFERENCE DATA SETS THAT\n* //*                                     BEGIN WITH \"SYS1.\" AND OR\n* //*                                     THE \"SYS1.* RACF\" PROFILE )\n* //*\n* //*\n* //* STATS  - USE THIS CARD TO REQUEST THAT A SUMMARY OF USERS\n* //*          SUCCESSES, FAILURES AND ERROR STATISTICS BE PRINTED\n* //*          OUT AS AN APPENDIX TO THE STANDARD REPORT.  SUCCESSES\n* //*          VIOLATIONS AND ERRORS ARE ROLLED UP IN USER / GROUP\n* //*          SORT SEQUENCE.  ALSO DISPLAYED ARE TOTAL \"JOB STARTS\",\n* //*          \"TOTAL RESOURCE ACESSES\" AND \"TOTAL RACF COMMANDS\".\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           STATS                ( GENERATE STATS REPORT )\n* //*           STATS    ONLY        ( GENERATE ONLY STATS REPORT )\n* //*\n* //*\n* //* SORT   - THE REPORT OUTPUT CAN BE SORTED ON ANY COMBINATION\n* //*          OF SIX DESIGNATED FIELDS.  SORT OPTIONS SHOULD BEGIN\n* //*          IN CARD COLUMN 10 AND END ON OR BEFOR CARD COLUMN 70,\n* //*          AND SEPERATED BY ONE BLANK.  IF NO SORT CONTROL CARD\n* //*          OR NO SORT CONTROL OPTIONS ARE FOUND THAN THE REPORT\n* //*          OUTPUT WILL BE SORTED IN THE DEFAULT SEQUENCE.  THE\n* //*          FORMAT FOR THIS CARD IS:\n* //*\n* //*                    1         2         3         4         5\n* //*           |---5----0----5----0----5----0----5----0----5----0\n* //*           SORT                            ( SORT IN DEFAULT SEQ )\n* //*\n* //*           SORT     EVENT DATE TIME        ( SORT BY EVENT DATE\n* //*                                             AND TIME )\n* //*\n* //*           REPORT SORT OPTIONS: ( DEFAULT SEQUENCE SHOWN )\n* //*\n* //*                       - SORT BY SYSID\n* //*                       - SORT BY GROUP\n* //*                       - SORT BY USER / JOBS  ( SEE \"1\" BELOW )\n* //*                       - SORT BY DATE\n* //*                       - SORT BY TIME\n* //*                       - SORT BY EVENT ( SEE \"2\" BELOW )\n* //*\n* //*                       - OR ANY COMBINATION OF THE ABOVE\n* //*\n* //*                       1. IF THE \"JOB\" PARM IS USED THE KEYWORD\n* //*                          \"JOBS\" IS IN EFFECT OTHERWISE THE\n* //*                          KEYWORD \"USER\" SHOULD BE USED.\n* //*\n* //*                       2. EVENT VIOLATIONS AND ERRORS WILL BE\n* //*                          SORTED AHEAD OF SUCCESSES.\n* //*\n* //*******************************************************************\n* //*\n* //* PARMS  -\n* //*\n* //* JOB      IF THE \"JOB\" PARM OPTION IS IN EFFECT THE REPORT OUTPUT\n* //*          WILL CONTAIN THE TASK JOB NAME IN THE USER/JOB COLUMN.\n* //*          IF THE JOB NAME IS NOT SIGNIFICANT (HEX ZEROS) THEN\n* //*          THE USER NAME FIELD WILL BE USED.  THIS OPTION ACTIVATES\n* //*          THE \"JOBS\" CONTROL CARD AND THE \"JOBS\" SORT OPTION.\n* //*\n* //*******************************************************************\n* //*\n* //* RETURN CODES -\n* //*\n* //*          FOR NON-ZERO RETURN CODES REFER TO THE DFSORT OR\n* //*          SYNCSORT SYSTEM REFERENCE GUIDE.  THE RETURN CODE PASSED\n* //*          FROM THE SORT EXIT IS PASSED BY RACFRPT AT END OF JOB.\n* //*\n* //*******************************************************************\n* //*\n* //* NOTES  -\n* //*\n* //*          \"RACFRPT\" WAS WRITTEN TO PROVIDE A MORE READABLE\n* //*          ALTERNATIVE FOR RACF ADMINISTRATORS THAN IBM'S\n* //*          TSO RACF REPORT WRITER.  THE GOAL WAS TO BE EASY TO\n* //*          USE AND EASY TO READ.\n* //*\n* //*          HOWEVER \"RACFRPT\" DOES NOT PROVIDED ALL THE DETAIL\n* //*          SUMMARY INFORMATION THAT IBM'S RACF REPORT CAN PROVIDE.\n* //*          THIS INCLUDES:\n* //*\n* //*           1) THE PROFILE NAME OF THE PROTECTED RESOURCE.\n* //*           2) THE LEVEL OF PROTECTION FOR THE PROTECTED RESOURCE.\n* //*           3) THE LEVEL OF ACCESS REQUESTED FOR A PROTECTED\n* //*              RESOURCE AND THE HIGHEST LEVEL ALLOWED.\n* //*           4) THE AUTHORIZATION GRANTED WITH THE PERMIT COMMAND.\n* //*           5) SUCCESSFUL STARTS FOR TSO SESSIONS AND BATCH JOBS.\n* //*              ( UNSUCCESSFUL STARTS ARE RECORDED IN SMF TYPE 80\n* //*                AND THEREFORE SHOW UP IN THIS REPORT )\n* //*\n* //*          WHEN A MORE COMPLETE PICTURE OF AN AUTHORIZED OR UN-\n* //*          AUTHORIZED EVENT SHOULD BE NEEDED THE IBM REPORTS CAN\n* //*          BE USED TO PROVIDED THE DETAILS.\n* //*\n* //*          THE PROGRAM IS PROVIDED AS IS WITHOUT WARRANTY OF\n* //*          ANY KIND.  CORRECTIONS, MODIFICATIONS AND COMMENTS\n* //*          ARE ENCOURAGED.\n* //*\n* //*\n* //*                              GARY H. COLLINS  01/01/88\n* //*\n* //*                              TRIDENT REFIT FACILITY\n* //*                              IBM SYSTEMS SUPPORT DIVISION, C/633\n* //*                              SILVERDALE, WASHINGTON 98315\n* //*\n* //*                              (206) 396 - 4321 EXT. 1024\n* //*\n* //*******************************************************************\n* //*\n* //* JCL -\n* //*\n* //*      RACF REPORT WRITER\n* //*\n* //STEP1  EXEC PGM=RACFRPT,REGION=1024K\n* //*TEP1  EXEC PGM=RACFRPT,PARM=JOB,REGION=1024K\n* //SMFIN    DD DSN=SYS2.SMFDUMPW,DISP=SHR    <== SMF ACCUMULATION FILE\n* //SORTIN   DD DSN=&&SORT,DISP=(,PASS),\n* //            UNIT=SYSDA,SPACE=(CYL,(10,5))\n* //SORTWK00 DD UNIT=SYSDA,SPACE=(CYL,5)\n* //SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n* //SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n* //SYSPRINT DD SYSOUT=*\n* //SYSOUT   DD SYSOUT=*\n* //SYSIN    DD *\n* GROUPS\n* USERS\n* DATES\n* TIMES\n* EVENT\n* DATASET\n* STATS\n* SUPR\n* SORT\n* /*\n         TITLE 'RACF REPORT'\n         PRINT NOGEN\n         SPACE\n*----------------------------------------------------------------------\n* RACF REPORT PROGRAM\n* WRITTEN BY:  GARY COLLINS\n* DESCRIPTION: READS SMF FILE FOR TYPE 80 RECORDS AND CREATES A RACF\n*              ACCESS REPORT.\n*----------------------------------------------------------------------\n* LINKAGE SECTION -----------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nRACFRPT  CSECT                                   STANDARD IRS LINKAGE\n         B     72(0,15)\n         DC    17F'0'\n         STM   14,12,12(13)\n         ST    13,4(0,15)\n         ST    15,8(0,13)\n         LR    13,15\n         LA    12,4095(0,13)\n         LA    12,1(0,12)\n         LA    11,4095(0,12)\n         LA    11,1(0,11)\n         USING RACFRPT,13,12,11\n         SPACE\n         L     R2,0(,R1)                         PARM ROUTINE\n         CLI   1(R2),X'00'\n         BE    NOPARM\n         CLI   1(R2),X'03'\n         BNE   PARMERR\n         CLC   =C'JOB',2(R2)\n         BNE   PARMERR\n         MVI   JOBSW+1,X'00'\n         MVC   CK4USER+2(2),=S(JOBS)\n         MVC   SRTUSR(5),JOBS\n         B     REWA\n         SPACE\nPARMERR  WTO   'RACF REPORT - INVALID PARM FOUND'\n         SPACE\nNOPARM   B     REWA\n         SPACE\n         DC    C'WRITTEN BY GARY COLLINS 1986,1987 (C)'\n         EJECT\n*----------------------------------------------------------------------\n* MAIN PROCESSING -----------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nREWA     BAL   R14,BEGIN                         INITIALIZATION\n         BAL   R14,CONTROL                       PROCESS CONTROL CARDS\nMAINLUP  BAL   R14,GETREC                        GET A RECORD\n         BAL   R14,ANALYZE                       BUILD OUPUT RECORD\n         BAL   R14,FILTER                        APPLY SELECT CRITERA\n         BAL   R14,PUTIT                         PUT TO SORT FILE\n         B     MAINLUP                           LOOP SMF FILE\nSMFEOF   BAL   R14,SORTIT                        SORT OUTPUT\n         B     EOJ                               END OF JOB\n         EJECT\n*----------------------------------------------------------------------\n* INITIALIZATION PROCESSING -------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nBEGIN    ST    R14,BEGIN14\n         SPACE\n         WTO   'RACF REPORT STARTING '\n         SPACE\n         BAL   R7,GETTBLS                        GETMAIN FOR GROUP TBL\n         ST    R1,GROUPTBL\n         ST    R1,GROUPNDX\n         ST    R2,GROUPTBX\n         SPACE\n         BAL   R7,GETTBLS                        GETMAIN FOR USER TBL\n         ST    R1,USERTBL\n         ST    R1,USERNDX\n         ST    R2,USERTBX\n         SPACE\n         B     GOTSPACE\n         SPACE\nGETTBLS  GETMAIN R,LV=8000\n         LTR   R15,R15\n         BNZ   NOSPACE\n         L     R2,=F'7938'                       R2 = (8000 - 62)\n*                                                      |      |\n*                                        LENGTH OF TABLE      |\n*                                                             |\n*                                           LENGTH OF CARD DATA\n         LA    R2,0(R2,R1)\n         BR    R7\n         SPACE\nNOSPACE  WTO   'RACF REPORT - GETMAIN FAILED'\n         SPACE\n         B     EARLYOUT\n         SPACE\nGOTSPACE TIME\n         SPACE\n         BAL   R14,GETDATE                       GET TODAYS DATE\n         SPACE\n         MVC   TODAY,HLDDATE\n         SPACE\n         OPEN  (SMFIN,,SORTFILE,(OUTPUT))\n         SPACE\n         L     R14,BEGIN14\n         BR    R14\n         SPACE\nBEGIN14  DS    F\n         EJECT\n*----------------------------------------------------------------------\n* CONTROL CARD PROCESSING ---------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nCONTROL  ST    R14,CNTL14\n         SPACE\n         OPEN  (CNTLFILE,(INPUT),MSGFILE,(OUTPUT))\n         SPACE\n         PUT   MSGFILE,CNTLDATA\n         SPACE\nCNTLREAD GET   CNTLFILE\n         SPACE\n         LR    R10,R1\n         USING SYSINREC,R10\n         SPACE\n         MVI   CNTLDATA,C' '\n         MVC   CNTLDATA+1(132),CNTLDATA\n         MVC   CNTLDATA+1(80),0(R1)\n         SPACE\n         PUT   MSGFILE,CNTLDATA\n         SPACE\nCK4GROUP CLC   =C'GROUPS',SYSINREC               DEFAULT ALL\n         BNE   CK4USER\n         CLI   SYSINREC+9,X'40'\n         BE    CK4USER\n         MVI   SYSINREC+71,X'40'\n         LA    R5,SYSINREC+9\n         L     R6,GROUPNDX\nGETGRP   C     R6,GROUPTBX\n         BNL   TBLERR\n         LA    R4,SYSINREC+72\n         CR    R4,R5\n         BNH   LASTGRP\n         BAL   R14,SCAN\n         CLI   0(R5),C' '\n         BNE   GETGRP\nLASTGRP  ST    R6,GROUPNDX\n         B     CNTLREAD\n         SPACE\nCK4USER  CLC   =C'USERS',SYSINREC                DEFAULT ALL\n         BNE   CK4DATE\n         CLI   SYSINREC+9,X'40'\n         BE    CK4DATE\n         MVI   SYSINREC+71,X'40'\n         LA    R5,SYSINREC+9\n         L     R6,USERNDX\nGETUSR   C     R6,USERTBX\n         BNL   TBLERR\n         LA    R4,SYSINREC+72\n         CR    R4,R5\n         BNH   LASTUSR\n         BAL   R14,SCAN\n         CLI   0(R5),C' '\n         BNE   GETUSR\nLASTUSR  ST    R6,USERNDX\n         B     CNTLREAD\n         SPACE\nCK4DATE  CLC   =C'DATES',SYSINREC                DEFAULT ALL\n         BNE   CK4TIME\n         CLI   SYSINREC+9,X'40'\n         BE    CK4TIME\n         MVC   LOWDTE,SYSINREC+9\n         MVC   HIGHDTE,SYSINREC+18\n         SPACE\n         B     CNTLREAD\n         SPACE\nCK4TIME  CLC   =C'TIMES',SYSINREC                DEFAULT ALL\n         BNE   CK4EVENT\n         CLI   SYSINREC+9,X'40'\n         BE    CK4EVENT\n         MVC   BEGTIME,SYSINREC+9\n         MVC   ENDTIME,SYSINREC+15\n         B     CNTLREAD\n         SPACE\nCK4EVENT CLC   =C'EVENT',SYSINREC\n         BNE   CK4SYS\n         CLI   SYSINREC+9,C' '                   DEFAULT ALL\n         BE    CK4ENUM\n         MVC   EVENTCK,SYSINREC+9\nCK4ENUM  LA    R4,SYSINREC+10\n         LA    R5,EVENTBL\nCK4ELUP  CLC   0(2,R4),=CL2' '\n         BE    CNTLREAD\n         PACK  DWD,0(2,R4)\n         CVB   R3,DWD\n         STCM  R3,B'0001',0(R5)\n         LA    R4,2(,R4)\n         LA    R5,1(,R5)\n         B     CK4ELUP\n         SPACE\nCK4SYS   CLC   =C'SUPR',SYSINREC                 DEFAULT ALL\n         BNE   CK4DS\n         MVI   SUPCK,C' '\n         MVC   SUPCK+1(L'SUPCK-1),SUPCK\n         CLI   SYSINREC+9,X'40'\n         BE    CK4DS\n         MVI   SYSINREC+54,X'40'\n         LA    R5,SYSINREC+9\n         LA    R6,SUPCK\n         BAL   R14,GETPARM\n         STCM  R4,R1,SUPCKL\n         B     CNTLREAD\n         SPACE\nCK4DS    CLC   =C'DATASET',SYSINREC              DEFAULT ALL\n         BNE   CK4STATS\n         MVI   DSCK,C' '\n         MVC   DSCK+1(L'DSCK-1),DSCK\n         CLI   SYSINREC+9,X'40'\n         BE    CK4STATS\n         MVI   SYSINREC+54,X'40'\n         LA    R5,SYSINREC+9\n         LA    R6,DSCK\n         BAL   R14,GETPARM\n         STCM  R4,R1,DSCKL\n         B     CNTLREAD\n         SPACE\nCK4STATS CLC   =C'STATS',SYSINREC                DEFAULT NO\n         BNE   CK4SORT\n         CLC   =C'ONLY',SYSINREC+9\n         BNE   SETSW\n         MVI   STATSCK,C'O'\n         B     CNTLREAD\nSETSW    MVI   STATSCK,C'Y'\n         B     CNTLREAD\n         SPACE\nCK4SORT  NOP   CNTLREAD\n         CLC   =C'SORT',SYSINREC\n         BNE   CNTLREAD\n         CLI   SYSINREC+9,X'40'\n         BE    CNTLREAD\n         MVI   CK4SORT+1,X'F0'\n         MVI   SYSINREC+71,X'40'\n         LA    R5,SYSINREC+9\n         LA    R6,HLDSRT\n         LA    R7,SRTCRD\nGETSORT  LA    R4,SYSINREC+72\n         CR    R4,R5\n         BNH   LASTSRT\n         SR    R4,R5\n         EX    R4,SYSINTRT\n         LR    R4,R1\n         SR    R4,R5\n         BCTR  R4,R0\n         MVC   HLDSRT,BLANKS\n         EX    R4,SYSINMVC\n         STM   R1,R6,HOLDREGS\n         BAL   R14,CKSRT\n         LM    R1,R6,HOLDREGS\n         LA    R5,1(,R1)\n         CLI   0(R5),C' '\n         BNE   GETSORT\nLASTSRT  LA    R6,SRTTBL\n         LA    R8,6\nSRTLUP   CLI   5(R6),X'FF'\n         BE    NEXTSRT\n         SR    R4,R4\n         ICM   R4,R1,6(R6)\n         EX    R4,SRTMVC\n         LA    R7,1(R4,R7)\nNEXTSRT  LA    R6,24(,R6)\n         BCT   R8,SRTLUP\n         BCTR  R7,R0\n         MVI   0(R7),C')'\n         B     CNTLREAD\n         SPACE\nCKSRT    LA    R6,SRTTBL\n         LA    R8,6\nCKSRTLUP CLC   HLDSRT,0(R6)\n         BE    SRTHIT\n         LA    R6,24(,R6)\n         BCT   R8,CKSRTLUP\n         BR    R14\n         SPACE\nSRTHIT   MVI   5(R6),X'FF'\n         SR    R4,R4\n         ICM   R4,R1,6(R6)\n         EX    R4,SRTMVC\n         LA    R7,1(R4,R7)\n         BR    R14\n         SPACE\nSCAN     SR    R4,R5\n         EX    R4,SYSINTRT\n         LR    R4,R1\n         SR    R4,R5\n         BCTR  R4,R0\n         STCM  R4,R1,0(R6)\n         LA    R6,1(,R6)\n         EX    R4,SYSINMVC\n         LA    R6,1(R4,R6)\n         LA    R5,1(,R1)\n         BR    R14\n         SPACE\nGETPARM  LA    R4,SYSINREC+55\n         SR    R4,R5\n         EX    R4,SYSINTRT\n         LR    R4,R1\n         SR    R4,R5\n         BCTR  R4,R0\n         EX    R4,SYSINMVC\n         BR    R14\n         SPACE\nTBLERR   WTO   'RACFRPT - TABLE SIZE EXECEDED'\n         B     CNTLREAD\n         SPACE\nCNTLEOF  CLOSE (CNTLFILE,,MSGFILE)\n         SPACE\n         L     R6,GROUPNDX\n         C     R6,GROUPTBL\n         BNE   GRPSETUP\n         XC    GRPTBL,GRPTBL\n         B     NOGRPCK\nGRPSETUP ST    R6,GROUPTBX\n         SPACE\nNOGRPCK  L     R6,USERNDX\n         C     R6,USERTBL\n         BNE   USRSETUP\n         XC    USRTBL,USRTBL\n         B     NOUSRCK\nUSRSETUP ST    R6,USERTBX\n         SPACE\nNOUSRCK  L     R14,CNTL14\n         BR    R14\n         DROP  R10\n         SPACE\nCNTL14   DS    F\n         EJECT\n*----------------------------------------------------------------------\n* INPUT RECORD PROCESSING ---------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\n         USING SMF80,R3\nGETREC   ST    R14,GETREC14\nGETSMF   GET   SMFIN\n         ST    R1,WKAREA\n         LR    R3,R1\n         AP    TOTRECS,=P'1'\n         SPACE\nCK4SMF20 CLI   SMF80RTY,20                       START OF JOB ?\n         BNE   CK4SMF30\n         USING SMF20,R4\n         USING SMF20RS,R5\n         LR    R4,R3\n         CLC   SMF20RLO,=H'0'\n         BE    GETSMF\n         LH    R5,SMF20RLO\n         LA    R5,4(R4,R5)\n         CLC   SMF20RLS,=H'26'\n         BNE   CK4RACF\n         CLC   SMF20TID,ZEROS\n         BE    GETSMF\n         MVC   HLDUSR,SMF20USR\n         MVC   HLDGRP,SMF20GRP\n         MVC   HLDTID,SMF20TID\n         B     GETSMF\n         DROP  R4,R5\n         SPACE\nCK4SMF30 CLI   SMF80RTY,30                       COMMON ADDRESS SPACE ?\n         BNE   CK4RACF\n         USING SMF30,R4\n         USING SMF30SI,R5\n         LR    R4,R3\n         CLC   SMF30IOF,ZEROS\n         BE    GETSMF\n         MVC   FWD,SMF30IOF\n         L     R5,FWD\n         LA    R5,0(R4,R5)\n         CLC   SMF30TID,ZEROS\n         BE    GETSMF\n         MVC   HLDGRP,SMF30GRP\n         MVC   HLDUSR,SMF30USR\n         MVC   HLDTID,SMF30TID\n         B     GETSMF\n         DROP  R4,R5\n         SPACE\nCK4RACF  CLI   SMF80RTY,80                       RACF RECORD ?\n         BNE   GETSMF\n         AP    TOTSMF80,=P'1'\n         SPACE\nGETEXIT  L     R14,GETREC14\n         BR    R14\n         SPACE\nGETREC14 DS    F\n         EJECT\n*----------------------------------------------------------------------\n* ANALYZE ROUTINE -----------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nANALYZE  ST    R14,ANALZ14\n         SPACE\n         ICM   R1,B'1111',SMF80DTE                GET DATE\n         BAL   R14,GETDATE\n         MVC   DATE,HLDDATE\n         SPACE\n         CLI   HLDFLD,0                           GET TERMINAL\n         BE    CK80TRM\n         CLC   HLDFLD(16),BLANKS\n         BE    CK80TRM\n         CLC   SMF80GRP,HLDGRP\n         BNE   CK80TRM\n         CLC   SMF80USR,HLDUSR\n         BNE   CK80TRM\n         MVC   TERMID,HLDTID\n         B     CLEARHLD\n         SPACE\nCK80TRM  CLC   SMF80TRM,ZEROS\n         BE    CLEARHLD\n         MVC   TERMID,SMF80TRM\nCLEARHLD XC    HLDFLD,HLDFLD\n         SPACE\n         LM    R5,R7,EVTPARM1                    GET EVENT\nEVTLUP1  CLC   0(2,R5),SMF80EVT\n         BE    EVTFIND1\n         BXLE  R5,R6,EVTLUP1\n         B     TIMERTN\n         SPACE\nEVTFIND1 MVC   EVENT,2(R5)\n         MVC   EVENTQ,12(R5)\n         MVC   DESFLG,22(R5)\n         MVC   EVTTAG,SMF80EVT\n         SPACE\nTIMERTN  SR    R4,R4                             GET TIME\n         MVC   FWD,SMF80TME\n         L     R5,FWD\n         D     R4,=F'100'\n         ST    R5,FWD\n         SR    R4,R4\n         D     R4,=F'3600'\n         CVD   R5,DWD\n         UNPK  HOURS,DWD+6(2)\n         OI    HOURS+1,X'F0'\n         MH    R5,=H'3600'\n         L     R4,FWD\n         SR    R4,R5\n         LR    R5,R4\n         SR    R4,R4\n         D     R4,=F'60'\n         CVD   R5,DWD\n         UNPK  MINS,DWD+6(2)\n         OI    MINS+1,X'F0'\n         MVI   TIMEDEL,C':'\n         SPACE\nJOBSW    B     GETUSER\n         CLC   SMF80JBN,=XL8'0'\n         BE    GETUSER\n         MVC   USER,SMF80JBN\n         B     GETGROUP\n         SPACE\nGETUSER  MVC   USER,SMF80USR                     GET USER\n         CLI   SMF80EVT,X'01'\n         BNE   GETGROUP\n         CLC   SMF80JBN,=XL8'0'\n         BE    GETGROUP\n         MVC   DATASET(8),SMF80JBN\n         SPACE\nGETGROUP MVC   GROUP,SMF80GRP                    GET GROUP\n         MVC   SYSID,SMF80SID                    GET SYSID\n         SPACE\n         LH    R4,SMF80CNT                       GET VAR DATA\n         CH    R4,=H'0'\n         BNH   FINISH\n         CH    R4,=H'10'\n         BH    FINISH\n         CLI   SMF80EVT,7\n         BH    RACFCMD\n         CLI   SMF80EVT,2\n         BL    FINISH\n         LR    R5,R3\n         AH    R5,SMF80LEN\n         ST    R5,EORADD\n         AH    R3,SMF80REL\n         LA    R3,4(R0,R3)\n         C     R3,EORADD\n         BNL   VARERR\n         SPACE\n         USING SMF80VAR,R3\nLUPVARS  CLI   SMF80DTP,1\n         BE    GETDSN\n         LA    R14,LUPVARS\n         B     NEXTSECT\n         SPACE\nGETDSN   SR    R5,R5\n         ICM   R5,B'0001',SMF80DLN\n         SH    R5,=H'1'\n         LA    R6,SMF80DTA\n         EX    R5,MOVEDSN\n         SPACE\nLUK4VOL  CLC   SMF80DTP,=X'0F06'\n         BE    GETVOL\n         LA    R14,LUK4VOL\n         B     NEXTSECT\n         SPACE\nGETVOL   MVC   VOLID(6),SMF80DTA\n         B     FINISH\n         SPACE\nNEXTSECT MVC   HWD,SMF80DTP\n         NI    HWD,X'00'\n         AH    R3,HWD\n         LA    R3,2(R0,R3)\n         C     R3,EORADD\n         BH    VARERR\n         BCTR  R4,R14\n         B     FINISH\n         SPACE\n         USING SMF80,R3\nRACFCMD  CLI   SMF80EVT,23\n         BH    FINISH\n         SPACE\n         SR    R4,R4\n         LH    R4,SMF80CNT\n         LR    R5,R3\n         AH    R5,SMF80LEN\n         ST    R5,EORADD\n         AH    R3,SMF80REL\n         LA    R3,4(R0,R3)\n         C     R3,EORADD\n         BNL   VARERR\n         SPACE\n         USING SMF80VAR,R3\nLUK4RES  CLI   SMF80DTP,6\n         BE    TYPE06\n         CLI   SMF80DTP,9\n         BE    TYPE09\nBUMPSECT MVC   HWD,SMF80DTP\n         NI    HWD,X'00'\n         AH    R3,HWD\n         LA    R3,2(R0,R3)\n         C     R3,EORADD\n         BNL   VARERR\n         BCT   R4,LUK4RES\n         B     VARERR\n         SPACE\nTYPE06   CLI   EVTTAG,22\n         BH    EVTDATA\n         CLI   EVTTAG,19\n         BL    EVTDATA\n         B     BUMPSECT\n         SPACE\nEVTDATA  LM    R5,R7,EVTPARM2\nEVTLUP2  CLC   0(1,R5),EVTTAG\n         BE    EVTFIND2\n         BXLE  R5,R6,EVTLUP2\n         B     VARERR\n         SPACE\nEVTFIND2 ICM   R6,B'0001',2(R5)\n         ICM   R5,B'0001',1(R5)\n         LA    R6,SMF80DTA(R6)\n         B     MOVEIT\n         SPACE\nTYPE09   SR    R5,R5\n         ICM   R5,B'0001',SMF80DLN\n         LA    R6,SMF80DTA\n         SH    R5,=H'1'\n         SPACE\nMOVEIT   EX    R5,MOVEDSN\n         B     FINISH\n         SPACE\nVARERR   MVC   DATASET,=CL44'* ERROR READING VARIABLE DATA *'\n         SPACE\n         B     FINISH\n         SPACE\nFINISH   L     R14,ANALZ14\n         BR    R14\n         SPACE\nANALZ14  DS    F\n         EJECT\n*----------------------------------------------------------------------\n* FILTER ROUTINE ------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nFILTER   ST    R14,FILTER14\n         SPACE\n         MVI   HEXTBL+C' ',X'00'\n         MVI   HEXTBL+C'*',X'FF'\n         SPACE\nSUPTST   CLI   SUPCK,C' '                        SUPPRESSION TEST\n         BE    EVTTST\n         TRT   SUPCK,HEXTBL\n         BNE   SUPGEN\n         MVC   SUPCLC+1(1),=AL1(43)\n         B     SUPCLC\nSUPGEN   SR    R3,R3\n         ICM   R3,R1,SUPCKL\n         SH    R3,=H'1'\n         BM    SKIP\n         STCM  R3,R1,SUPCLC+1\nSUPCLC   CLC   DATASET,SUPCK\n         BE    SKIP\n         SPACE\nEVTTST   CLI   EVENTCK,C' '                      EVENT TYPE TEST\n         BE    EVTTSTGP\n         CLC   DESFLG,EVENTCK\n         BE    EVTTSTGP\n         B     SKIP\n         SPACE\nEVTTSTGP LA    R3,EVENTBL                        EVENT GROUP TEST\n         CLI   0(R3),C' '\n         BE    DSTST\nEVTTSTLP CLI   0(R3),0\n         BE    SKIP\n         CLC   EVTTAG,0(R3)\n         BE    DSTST\n         LA    R3,1(,R3)\n         B     EVTTSTLP\n         SPACE\nDSTST    CLI   DSCK,C' '                         DATA SET TEST\n         BE    GRPTST\n         TRT   DSCK,HEXTBL\n         BNE   DSGEN\n         MVC   DSCLC+1(1),=AL1(43)\n         B     DSCLC\nDSGEN    SR    R3,R3\n         ICM   R3,R1,DSCKL\n         SH    R3,=H'1'\n         BM    GRPTST\n         STCM  R3,R1,DSCLC+1\nDSCLC    CLC   DATASET,DSCK\n         BNE   SKIP\n         SPACE\nGRPTST   L     R3,GROUPTBL                       GROUP TEST\n         C     R3,=F'0'\n         BE    USRTST\nGRPTSTLP C     R3,GROUPTBX\n         BNL   SKIP\n         SR    R4,R4\n         ICM   R4,R1,0(R3)\n         STCM  R4,R1,GRPCLC+1\n         LA    R3,1(,R3)\nGRPCLC   CLC   GROUP(0),0(R3)\n         BE    USRTST\n         LA    R3,1(R4,R3)\n         B     GRPTSTLP\n         SPACE\nUSRTST   L     R3,USERTBL                       USER TEST\n         C     R3,=F'0'\n         BE    DTETST\nUSRTSTLP C     R3,USERTBX\n         BNL   SKIP\n         SR    R4,R4\n         ICM   R4,R1,0(R3)\n         STCM  R4,R1,USRCLC+1\n         LA    R3,1(,R3)\nUSRCLC   CLC   USER(0),0(R3)\n         BE    DTETST\n         LA    R3,1(R4,R3)\n         B     USRTSTLP\n         SPACE\nDTETST   CLI   DTETBL,C' '                       DATE TEST\n         BE    TMETST\n         SPACE\n         CLC   DATE,HIGHDTE\n         BH    SKIP\n         CLC   DATE,LOWDTE\n         BL    SKIP\n         SPACE\nTMETST   CLI   TMETBL,C' '                       TIME TEST\n         BE    PASS\n         SPACE\n         CLC   TIME,ENDTIME\n         BH    SKIP\n         CLC   TIME,BEGTIME\n         BNL   PASS\n         SPACE\nSKIP     MVI   CARD,C' '                         CLEAR OLD CARD\n         MVC   CARD+1(132),CARD\n         SPACE\n         AP    TOTSKIP,=P'1'\n         SPACE\n         L     R14,SKIPADD\n         BR    R14\n         SPACE\nPASS     CLI   DESFLG,C' '\n         BE    SUCCESS\n         CLI   DESFLG,C'V'\n         BE    FAILED\n         CLI   DESFLG,C'E'\n         BE    ERROR\n         CLI   DESFLG,C'W'\n         BE    WARN\n         B     FILTEND\n         SPACE\nSUCCESS  AP    TOTOK,=P'1'\n         B     FILTEND\nFAILED   AP    TOTFAIL,=P'1'\n         B     FILTEND\nERROR    AP    TOTERR,=P'1'\n         B     FILTEND\nWARN     AP    TOTWARN,=P'1'\n         SPACE\nFILTEND  MVI   HEXTBL+C' ',X'FF'\n         MVI   HEXTBL+C'*',X'00'\n         L     R14,FILTER14\n         BR    R14\n         SPACE\nFILTER14 DS    F\nSKIPADD  DC    A(MAINLUP)\n         EJECT\n*----------------------------------------------------------------------\n* PUT ROUTINE ---------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nPUTIT    ST    R14,PUTIT14\n         SPACE\n         PUT   SORTFILE,CARD\n         SPACE\n         MVI   CARD,C' '                         CLEAR OLD CARD\n         MVC   CARD+1(132),CARD\n         SPACE\n         L     R14,PUTIT14\n         BR    R14\n         SPACE\nPUTIT14  DS    F\n         EJECT\n*----------------------------------------------------------------------\n* CALL SORT ROUTINE(S) ------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nSORTIT   ST    R14,SORT14\n         SPACE\n         CLOSE (SMFIN,,SORTFILE)\n         SPACE\n         OPEN  (PRTFILE,(OUTPUT))\n         SPACE\n         CLI   STATSCK,C'O'\n         BE    CKSTATS\n         SPACE\n         LA    R1,1\n         ST    R1,SORTSW\n         SPACE\n         LA    R1,SORTMAIN\n         LINK  EP=SORT\n         SPACE\n         ST    R15,ERRSW\n         SPACE\n         LTR   R15,R15\n         BNZ   NOSTATS\n         SPACE\nCKSTATS  CLI   STATSCK,C'N'\n         BE    NOSTATS\n         SPACE\n         LA    R1,2\n         ST    R1,SORTSW\n         SPACE\n         LA    R1,SORTSTAT\n         LINK  EP=SORT\n         SPACE\n         ST    R15,ERRSW\n         SPACE\nNOSTATS  L     R14,SORT14\n         BR    R14\n         SPACE\nSORT14   DS    F\n         EJECT\n*----------------------------------------------------------------------\n* GETDATE ROUTINE -----------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nGETDATE  ST    R14,DATE14\n         SPACE\n         LR    R4,R1\n         ZAP   PJDAY,=P'0'\n         ZAP   PYEAR,=P'0'\n         ZAP   TJD,=P'0'\n         STCM  R4,R3,PJDAY+6\n         STCM  R4,R4,BYTE\n         MVO   PYEAR,BYTE\n         SR    R4,R4\n         CVB   R5,PYEAR\n         D     R4,=F'4'\n         LTR   R4,R4\n         BNZ   NOLEAP\n         MVC   DTABLE+6(2),=PL2'29'\n         MVI   RESET+1,X'00'\nNOLEAP   LA    R4,DTABLE\n         LA    R5,12\nDLOOP    AP    TJD,2(2,R4)\n         CP    TJD,PJDAY+6(2)\n         BNL   COMPDATE\n         LA    R4,4(R0,R4)\n         BCT   R5,DLOOP\nDATERR   MVC   DAY,=C'??'\n         MVC   MTH,=C'??'\n         MVC   YEAR,=C'??'\n         B     RESET\n         SPACE\nCOMPDATE SP    TJD,2(2,R4)\n         SP    PJDAY,TJD\n         UNPK  DAY,PJDAY+6(2)\n         OI    DAY+1,X'F0'\n         MVC   MTH,0(R4)\n         UNPK  YEAR(2),PYEAR+6(2)\n         OI    YEAR+1,X'F0'\n         SPACE\nRESET    B     DATEXIT\n         MVI   *-3,X'F0'\n         MVC   DTABLE+6(2),=PL2'28'\n         SPACE\nDATEXIT  L     R14,DATE14\n         BR    R14\n         SPACE\nDATE14   DS    F\n         EJECT\n*----------------------------------------------------------------------\n* EOJ ROUTINE ---------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nEOJ      LA    R4,MSGTBL\n         LA    R5,TOTTBL\n         LA    R6,7\nMSGLUP   ED    80(12,R4),0(R5)\n         PUT   PRTFILE,(R4)\n         LA    R4,133(R4)\n         LA    R5,5(R5)\n         BCT   R6,MSGLUP\n         SPACE\n         WTO   'RACF REPORT EOJ'\n         SPACE\nEARLYOUT CLOSE (PRTFILE)\n         SPACE\n         L     15,ERRSW\n         L     13,4(13)\n         ST    15,16(,13)\n         LM    14,12,12(13)\n         BR    14\n         EJECT\n*----------------------------------------------------------------------\n* PROGRAM VARS CONSTANTS AND TABLES -----------------------------------\n*----------------------------------------------------------------------\n         SPACE\nDWD      DS    D\nFWD      DS    F\nHWD      DS    H\n         SPACE\nEORADD   DC    F'0'\nWKAREA   DC    F'0'\nERRSW    DC    F'0'\n         SPACE\nHOLDREGS DS    16F\n         SPACE\n         DS    0F\nGRPTBL   DS    0XL12\nGROUPTBL DC    F'0'\nGROUPNDX DC    F'0'\nGROUPTBX DC    F'0'\n         SPACE\n         DS    0F\nUSRTBL   DS    0XL12\nUSERTBL  DC    F'0'\nUSERNDX  DC    F'0'\nUSERTBX  DC    F'0'\n         SPACE\nBYTE     DC    CL1' '\nZEROS    DC    256X'0'\nBLANKS   DC    256C' '\nJOBS     DC    CL5'JOBS'\n         SPACE\nEVTPARM1 DC    A(EVTBL1,23,EVTBL1X-1)\nEVTPARM2 DC    A(EVTBL2,3,EVTBL2X-1)\n         SPACE\nSRTMVC   MVC   0(0,R7),7(R6)\nMOVEDSN  MVC   DATASET(0),0(R6)\nSYSINMVC MVC   0(0,R6),0(R5)\nSYSINTRT TRT   0(0,R5),HEXTBL\n         SPACE\n         DS    0D\nPJDAY    DC    PL8'0'\nPYEAR    DC    PL8'0'\nTJD      DC    PL4'0'\nTODAY    DC    CL8' '\n         SPACE\nHLDFLD   DS    0CL29\nHLDUSR   DC    CL8' '\nHLDGRP   DC    CL8' '\nHLDTID   DC    CL8' '\nHLDSRT   DC    CL5' '\n         SPACE\nHLDDATE  DS    0CL8\nMTH      DC    CL2' '\n         DC    CL1'/'\nDAY      DC    CL2' '\n         DC    CL1'/'\nYEAR     DC    CL2' '\n         SPACE\n         DS    0F\nCARD     DS    0CL133\n         DS    CL1\nUSER     DS    CL8\n         DS    CL2\nGROUP    DS    CL8\n         DS    CL2\nDATE     DS    CL8\n         DS    CL2\nTIME     DS    0CL5\nHOURS    DS    CL2\nTIMEDEL  DS    CL1\nMINS     DS    CL2\n         DS    CL2\nDATASET  DS    CL44\n         DS    CL2\nVOLID    DS    CL6\n         DS    CL2\nTERMID   DS    CL8\n         DS    CL2\nDESFLG   DS    CL1\n         DS    CL1\nEVTTAG   DS    CL1\nEVENT    DS    CL10\n         DS    CL2\nEVENTQ   DS    CL10\n         DS    CL2\nSYSID    DS    CL4\n         ORG   CARD+133\n         SPACE\nSTATSCK  DC    CL1'N'\nEVENTCK  DC    CL1' '\nEVENTBL  DC    C' ',29X'0'\nDSCKL    DC    XL1'0'\nDSCK     DC    CL44' '\nSUPCKL   DC    XL1'0'\nSUPCK    DC    CL44' '\nDTETBL   DS    0CL8\nLOWDTE   DC    CL8' '\nHIGHDTE  DC    CL8' '\nTMETBL   DS    0CL10\nBEGTIME  DC    CL5' '\nENDTIME  DC    CL5' '\n         SPACE\nTOTTBL   DS    0F\nTOTRECS  DC    PL5'0'\nTOTSMF80 DC    PL5'0'\nTOTSKIP  DC    PL5'0'\nTOTOK    DC    PL5'0'\nTOTFAIL  DC    PL5'0'\nTOTERR   DC    PL5'0'\nTOTWARN  DC    PL5'0'\n         SPACE\nSRTTBL   DS    0C\nSRTSID   DC    CL5'SYSID',X'00',X'07',CL17'130,4,A,'\nSRTGRP   DC    CL5'GROUP',X'00',X'06',CL17'12,8,A,'\nSRTUSR   DC    CL5'USER ',X'00',X'05',CL17'2,8,A,'\nSRTDTE   DC    CL5'DATE ',X'00',X'06',CL17'22,8,A,'\nSRTTME   DC    CL5'TIME ',X'00',X'06',CL17'32,5,A,'\nSRTEVT   DC    CL5'EVENT',X'00',X'10',CL17'103,1,D,106,10,A,'\n         SPACE\nCNTLDATA DC    CL133' RACF REPORT, LINKED &SYSDATE &SYSTIME, SYSIN CARDX\n               (S):'\n         SPACE\nMSGTBL   DS    0F\n         DC    CL40'1'\n         DC    C'A)  RACF REPORT SMF RECORDS.............'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'B)  RACF REPORT SMF TYPE 80 RECORDS.....'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'C)  RACF REPORT RECORDS FILTERED........'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'D)  RACF REPORT SELECTED SUCCESSES......'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'E)  RACF REPORT SELECTED VIOLATIONS.....'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'F)  RACF REPORT SELECTED ERRORS.........'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         DC    CL40' '\n         DC    C'G)  RACF REPORT SELECTED WARNINGS.......'\n         DC    X'4B2020206B2020206B202120',CL41' '\n         SPACE\nEVTBL1   DC    XL2'0100',CL10'JOB INIT  ',CL10'          ',CL1' '\n         DC    XL2'0101',CL10'JOB INIT  ',CL10'INVAL PASS',CL1'V'\n         DC    XL2'0102',CL10'JOB INIT  ',CL10'INVAL GRP ',CL1'V'\n         DC    XL2'0103',CL10'JOB INIT  ',CL10'INVAL OID ',CL1'V'\n         DC    XL2'0104',CL10'JOB INIT  ',CL10'INVAL TERM',CL1'V'\n         DC    XL2'0105',CL10'JOB INIT  ',CL10'INVAL APPL',CL1'V'\n         DC    XL2'0106',CL10'JOB INIT  ',CL10'REVOK USER',CL1'V'\n         DC    XL2'0107',CL10'JOB INIT  ',CL10'AUTO REVOK',CL1'V'\n         DC    XL2'0200',CL10'RES ACCESS',CL10'          ',CL1' '\n         DC    XL2'0201',CL10'RES ACCESS',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0202',CL10'RES ACCESS',CL10'NOT FOUND ',CL1'E'\n         DC    XL2'0203',CL10'RES ACCESS',CL10'WARNING   ',CL1'W'\n         DC    XL2'0300',CL10'E O V     ',CL10'          ',CL1' '\n         DC    XL2'0301',CL10'E O V     ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0400',CL10'RENAME    ',CL10'          ',CL1' '\n         DC    XL2'0401',CL10'RENAME    ',CL10'INVAL GRP ',CL1'V'\n         DC    XL2'0402',CL10'RENAME    ',CL10'NO GROUP  ',CL1'E'\n         DC    XL2'0403',CL10'RENAME    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0404',CL10'RENAME    ',CL10'RENAME ERR',CL1'E'\n         DC    XL2'0405',CL10'RENAME    ',CL10'INVAL USER',CL1'V'\n         DC    XL2'0500',CL10'SCRATCH   ',CL10'          ',CL1' '\n         DC    XL2'0501',CL10'SCRATCH   ',CL10'NOT FOUND ',CL1'E'\n         DC    XL2'0502',CL10'SCRATCH   ',CL10'INVAL VOL ',CL1'V'\n         DC    XL2'0600',CL10'DELETE 1ST',CL10'MULT VOLS ',CL1'E'\n         DC    XL2'0700',CL10'DEFINE    ',CL10'          ',CL1' '\n         DC    XL2'0701',CL10'DEFINE    ',CL10'INVAL GRP ',CL1'V'\n         DC    XL2'0702',CL10'DEFINE    ',CL10'NO GROUP  ',CL1'E'\n         DC    XL2'0703',CL10'DEFINE    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0704',CL10'DEFINE    ',CL10'DEFINE ERR',CL1'E'\n         DC    XL2'0705',CL10'DEFINE    ',CL10'INVAL USER',CL1'V'\n         DC    XL2'0800',CL10'ADDSD     ',CL10'          ',CL1' '\n         DC    XL2'0801',CL10'ADDSD     ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0802',CL10'ADDSD     ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0900',CL10'ADDGROUP  ',CL10'          ',CL1' '\n         DC    XL2'0901',CL10'ADDGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0902',CL10'ADDGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0A00',CL10'ADDUSER   ',CL10'          ',CL1' '\n         DC    XL2'0A01',CL10'ADDUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0A02',CL10'ADDUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0B00',CL10'ALTDSD    ',CL10'          ',CL1' '\n         DC    XL2'0B01',CL10'ALTDSD    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0B02',CL10'ALTDSD    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0C00',CL10'ALTGROUP  ',CL10'          ',CL1' '\n         DC    XL2'0C01',CL10'ALTGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0C02',CL10'ALTGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0D00',CL10'ALTUSER   ',CL10'          ',CL1' '\n         DC    XL2'0D01',CL10'ALTUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0D02',CL10'ALTUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0E00',CL10'CONNECT   ',CL10'          ',CL1' '\n         DC    XL2'0E01',CL10'CONNECT   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0E02',CL10'CONNECT   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0F00',CL10'DELDSD    ',CL10'          ',CL1' '\n         DC    XL2'0F01',CL10'DELDSD    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'0F02',CL10'DELDSD    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1000',CL10'DELGROUP  ',CL10'          ',CL1' '\n         DC    XL2'1001',CL10'DELGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1002',CL10'DELGROUP  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1100',CL10'DELUSER   ',CL10'          ',CL1' '\n         DC    XL2'1101',CL10'DELUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1102',CL10'DELUSER   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1200',CL10'PASSWORD  ',CL10'          ',CL1' '\n         DC    XL2'1201',CL10'PASSWORD  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1202',CL10'PASSWORD  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1300',CL10'PERMIT    ',CL10'          ',CL1' '\n         DC    XL2'1301',CL10'PERMIT    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1302',CL10'PERMIT    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1400',CL10'RALTER    ',CL10'          ',CL1' '\n         DC    XL2'1401',CL10'RALTER    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1402',CL10'RALTER    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1500',CL10'RDEFINE   ',CL10'          ',CL1' '\n         DC    XL2'1501',CL10'RDEFINE   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1502',CL10'RDEFINE   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1600',CL10'RDELETE   ',CL10'          ',CL1' '\n         DC    XL2'1601',CL10'RDELETE   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1602',CL10'RDELETE   ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1700',CL10'REMOVE    ',CL10'          ',CL1' '\n         DC    XL2'1701',CL10'REMOVE    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1702',CL10'REMOVE    ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1800',CL10'SETROPTS  ',CL10'          ',CL1' '\n         DC    XL2'1801',CL10'SETROPTS  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1802',CL10'SETROPTS  ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1900',CL10'RVARY     ',CL10'          ',CL1' '\n         DC    XL2'1901',CL10'RVARY     ',CL10'INSUF AUTH',CL1'V'\n         DC    XL2'1902',CL10'RVARY     ',CL10'INSUF AUTH',CL1'V'\nEVTBL1X  EQU   *\n         SPACE\nEVTBL2   DC    X'082B04',X'090702',X'0A070D',X'0B2B06',X'0C0703'\n         DC    X'0D070D',X'0E0704',X'0F2B02',X'100700',X'110700'\n         DC    X'120707',X'170702'\nEVTBL2X  EQU   *\n         SPACE\nDTABLE   DC    CL2'01',PL2'31',CL2'02',PL2'28',CL2'03',PL2'31'\n         DC    CL2'04',PL2'30',CL2'05',PL2'31',CL2'06',PL2'30'\n         DC    CL2'07',PL2'31',CL2'08',PL2'31',CL2'09',PL2'30'\n         DC    CL2'10',PL2'31',CL2'11',PL2'30',CL2'12',PL2'31'\n         SPACE\nHEXTBL   DC    256X'0'\n         ORG   HEXTBL+C' '\n         DC    X'FF'\n         ORG   HEXTBL+256\n         SPACE\nSORTSW   DS    F'0'\nSORTMAIN DC    X'80',AL3(SPARMS)\n         CNOP  2,4\nSPARMS   DC    AL2(PARMSEND-PARMSBEG)\nPARMSBEG DC    A(SORTBEG)\n         DC    A(SORTEND)\n         DC    A(RECBEG)\n         DC    A(RECEND)\n         DC    A(0)\n         DC    A(E35RTN)\nPARMSEND EQU   *\nSORTBEG  DC    C' SORT FIELDS=('\nSRTCRD   DC    C'130,4,A,12,8,A,2,8,A,22,8,A,32,5,A,103,1,D,106,10,A'\n         DC    C'),FORMAT=CH'\nSORTEND  DC    C' '\nRECBEG   DC    C' RECORD TYPE=F,LENGTH=(133,133,133)'\nRECEND   DC    C' '\n         SPACE\n         DS    0F\nSORTSTAT DC    X'80',AL3(STATSP)\n         CNOP  2,4\nSTATSP   DC    AL2(STATSEND-STATSBEG)\nSTATSBEG DC    A(STATBEG)\n         DC    A(STATEND)\n         DC    A(STABEG)\n         DC    A(STAEND)\n         DC    A(0)\n         DC    A(E35RTN)\nSTATSEND EQU   *\nSTATBEG  DC    C' SORT FIELDS=('\n         DC    C'2,8,A,12,8,A'\n         DC    C'),FORMAT=CH'\nSTATEND  DC    C' '\nSTABEG   DC    C' RECORD TYPE=F,LENGTH=(133,133,133)'\nSTAEND   DC    C' '\n         SPACE\n         EJECT\n*----------------------------------------------------------------------\n* FILE DCB'S ----------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nCNTLFILE DCB   DDNAME=SYSIN,                                           X\n               DSORG=PS,                                               X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               MACRF=(GL),                                             X\n               EODAD=CNTLEOF\n         SPACE\nSMFIN    DCB   DDNAME=SMFIN,                                           X\n               DSORG=PS,                                               X\n               RECFM=VBS,                                              X\n               BFTEK=A,                                                X\n               MACRF=(GL),                                             X\n               EODAD=SMFEOF\n         SPACE\nSORTFILE DCB   DDNAME=SORTIN,                                          X\n               DSORG=PS,                                               X\n               RECFM=FBA,                                              X\n               LRECL=133,                                              X\n               BLKSIZE=133,                                            X\n               MACRF=(PM)\n         SPACE\nPRTFILE  DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               RECFM=FBA,                                              X\n               LRECL=133,                                              X\n               BLKSIZE=133,                                            X\n               MACRF=(PM)\n         SPACE\nMSGFILE  DCB   DDNAME=SYSOUT,                                          X\n               DSORG=PS,                                               X\n               RECFM=FBA,                                              X\n               LRECL=133,                                              X\n               BLKSIZE=133,                                            X\n               MACRF=(PM)\n         EJECT\n*----------------------------------------------------------------------\n* LITERALS FOR BASE1 AND BASE2 ----------------------------------------\n*----------------------------------------------------------------------\n         SPACE\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n* EQUATES FOR PROGRAM -------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n*----------------------------------------------------------------------\n* DSECTS --------------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\n* OPTIONAL: THIS CODE MAKES USE OF IBM'S RACF DSECT MACRO\n* SMF80  DSECT\n*        IFASMFR9 80\n         SPACE\nSMF80    DSECT\nSMF80LEN DS    CL2           TOTAL RECORD LENGTH\n         DS    CL2           RESERVED\nSMF80FLG DS    CL1           SYSTEM INDICATOR:\n*                            BIT    MEANING WHEN SET -\n*                            5      MVS/XA\n*                            6      VS2\n*                            7      VS1\nSMF80RTY DS    CL1           RECORD TYPE\nSMF80TME DS    CL4           SVC 83 TIME IN BINARY\nSMF80DTE DS    CL4           DATE RECORD CREATED 00YYDDDF\nSMF80SID DS    CL4           SVC 83 SYSTEM ID\nSMF80DES DS    CL2           DESCRIPTOR FLAGS:\n*                            BIT    MEANING WHEN SET -\n*                            0      THE EVENT IS A VIOLATION\n*                            1      USER NOT DEFINED TO RACF\n*                            3      THE EVENT IS A WARNING\n*                            2      RECORD HAS A VER IND SEE SMF80OVER\nSMF80EVT DS    CL1           EVENT CODE - SEE TABLE 1 AND SMF80EVQ\nSMF80EVQ DS    CL1           EVENT CODE QUALIFIER\nSMF80USR DS    CL8           USER OR JOBNAME - EBCDIC\nSMF80GRP DS    CL8           GROUP OR STEPNAME - EBCDIC\nSMF80REL DS    CL2           OFFSET FROM BEGINING OF RECORD HEADER TO\n*                            FIRST RELOCATABLE SECTION\nSMF80CNT DS    CL2           COUNT OF THE NUMBER OF RELOCATE SECTIONS\nSMF80ATH DS    CL1           AUTHORITIES USED\n*                            BIT    MEANING WHEN SET -\n*                            0      NORMAL AUTH CHECK (RESOURCE)\n*                            1      SPECIAL ATTRIBUTE (COMMAND EXEC)\n*                            2      OPERATIONS ATTRIBUTE (RESOURCE)\n*                            3      AUDITOR ATTRIBUTE (COMMAND EXEC)\n*                            4      INSTALLATION EXIT (RESOURCE)\n*                            5      FAILSOFT PROCESSING (RESOURCE)\nSMF80REA DS    CL1           REASON FOR LOGGING\n*                            BIT    MEANING WHEN SET -\n*                            0      CHANGES BEING MADE\n*                            1 - 3  AUDITING OF USER OR RESOURCE\n*                            4      RACINIT FAILURE\n*                            5      COMMAND ALLWAYS AUDITED\n*                            6      VIOLATION W/CMDVIOL\n*                            7      AUDIT DUE TO GLOBALAUDIT\nSMF80TLV DS    CL1           TERMINAL LEVEL NO\nSMF80ERR DS    CL1           COMMAND PROCESSING ERROR FLAG:\n*                            BIT    MEANING WHEN SET -\n*                            0      COMMAND HAD ERROR, AND COULD NOT\n*                                   BACK OUT CHANGES\n*                            1      NO CHANGES MADE DUE TO ERROR\nSMF80TRM DS    CL8           TERMINAL ID OF FOREGROUND USER - EBCDIC\nSMF80JBN DS    CL8           JOB NAME\nSMF80RST DS    CL4           TIME - JOB CARD WAS IN THE READER\nSMF80RSD DS    CL4           DATE - JOB CARD WAS IN THE READER\nSMF80UID DS    CL8           USER ID FROM COMMON SMF EXIT AREA\nSMF80VER DS    CL1           VERSION INDICATOR (1.6)\n         SPACE\nSMF80VAR DSECT\nSMF80DTP DS    CL1           DATA TYPE:\nSMF80DLN DS    CL1           LENGTH OF DATA THAT FOLLOWS\nSMF80DTA DS    0CL255        VARIABLE DATA:\nEVENT16  DS    0CL8          DELGROUP GROUP NAME  +0\nEVENT17  DS    0CL8          DELUSER USER ID      +0\n         DS    CL2\nEVENT09  DS    0CL8          ADDGROUP GROUP NAME  +2\nEVENT15  DS    0CL44         DELDSD DATA SET NAME +2\n         DS    CL1\nEVENT12  DS    0CL8          ALTGROUP GROUP NAME  +3\n         DS    CL1\nEVENT08  DS    0CL44         ADDSD DATA SET NAME  +4\nEVENT14  DS    0CL8          CONNECT USER ID      +4\n         DS    CL2\nEVENT11  DS    0CL44         ALTDSD DATA SET NAME +6\n         DS    CL1\nEVENT18  DS    0CL8          PASSWORD USER ID     +7\n         DS    CL6\nEVENT10  DS    0CL8          ADDUSER USER ID      +D\nEVENT13  DS    0CL8          ALTUSER USER ID      +D\n         SPACE\nSMF20    DSECT               SMF 20 JOB INITIATION RECORD\nSMF20LEN DS    CL2\nSMF20SEG DS    CL2\nSMF20FLG DS    CL1\nSMF20RTY DS    CL1\nSMF20TME DS    CL4\nSMF20DTE DS    CL4\nSMF20SID DS    CL4\nSMF20JBN DS    CL8\nSMF20RST DS    CL4\nSMF20RSD DS    CL4\nSMF20UID DS    CL8\nSMF20RLO DS    CL2           OFFSET TO IDENTIFICATION SECTION\n         SPACE\nSMF20RS  DSECT               RELOCATABLE SECTION FOR SMF 20 RECORDS\nSMF20RLS DS    CL2\nSMF20GRP DS    CL8\nSMF20USR DS    CL8\nSMF20TID DS    CL8\n         SPACE\nSMF30    DSECT               SMF 30 COMMON ADDRESS SPACE WORK RECORD\nSMF30LEN DS    CL2\nSMF30SEG DS    CL2\nSMF30FLG DS    CL1\nSMF30RTY DS    CL1\nSMF30TME DS    CL4\nSMF30DTE DS    CL4\nSMF30SID DS    CL4\nSMF30WID DS    CL4\n         DS    CL2\nSMF30SO  DS    CL4           OFFSET TO SUBSYSTEM SECTION\nSMF30SLN DS    CL2           LENGTH OF SUBSYSTEM SECTION\nSMF30SON DS    CL2           NUMBER OF SUBSYSTEM SECTIONS\nSMF30IOF DS    CL4           OFFSET TO IDENTIFICATION SECITON\nSMF30ILN DS    CL2           LENGTH OF IDENTIFICATION SECTION\nSMF30ION DS    CL2           NUMBER OF IDENTIFICATION SECTIONS\n         SPACE\nSMF30SU  DSECT               SUB SYS DSECT FOR SMF 30 RECORDS\nSMF30TYP DS    CL2\nSMF30RS1 DS    CL2\nSMF30RVN DS    CL2\nSMF30PNM DS    CL8\n         SPACE\nSMF30SI  DSECT               SYS ID DSECT FOR SMF 30 RECORDS\n         DS    CL100\nSMF30GRP DS    CL8\nSMF30USR DS    CL8\nSMF30TID DS    CL8\n         SPACE\nSYSINREC DSECT               SYSIN CARD\n         DS    CL80\n         EJECT\n*----------------------------------------------------------------------\n* E35 SYNCSORT ROUTINE ------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\n         DROP  R13,R12\n         SPACE\nE35RTN   CSECT\n         B     72(0,15)\n         DC    17F'0'\n         STM   14,12,12(13)\n         ST    13,4(0,15)\n         ST    15,8(0,13)\n         LR    13,15\n         LA    12,4095(0,13)\n         LA    12,1(0,12)\n         USING E35RTN,13\n         USING WCARD,R10\n         SPACE\n         L     R10,0(R0,R1)\n         SPACE\n         L     R2,SWADD\n         L     R2,0(R0,R2)\n         CH    R2,=H'1'\n         BE    RACFPRT\n         B     STATPRT\n         SPACE\nRACFPRT  LTR   R10,R10\n         BNZ   MORE1\n         ZAP   LINECNT,PKDPAGE\n         B     E35FINI\n         SPACE\nMORE1    BAL   R14,WHATPAGE\n         BCT   R15,PUTREC1\n         BAL   R14,HEADER1\n         SPACE\nPUTREC1  MVI   WEVTTAG,X'40'\n         L     R1,DCBADD\n         PUT   (R1),(R10)\n         AP    LINECNT,=P'1'\n         B     E35MORE\n         SPACE\nSTATPRT  LTR   R10,R10\n         BNZ   MORE2\n         BAL   R14,LASTSTAT\n         B     E35FINI\n         SPACE\nMORE2    BAL   R14,WHATPAGE\n         BCT   R15,PUTREC2\n         BAL   R14,HEADER2\nPUTREC2  BAL   R14,STATSTOT\n         SPACE\nE35MORE  LA    R1,04\n         B     E35EXIT\n         SPACE\nE35FINI  LA    R1,08\n         SPACE\nE35EXIT  L     R13,4(R13)\n         ST    R1,16(,R13)\n         LM    R14,R12,12(R13)\n         BR    R14\n         EJECT\n*----------------------------------------------------------------------\n* E35 SUB ROUTINES ----------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nHEADER1  ST    R14,E35SAVE\n         BAL   R7,LINECLR\n         MVI   HCARD,X'F1'\n         SPACE\n         L     R3,DTEADD\n         MVC   HCARD+1(8),0(R3)\n         MVC   HCARD+58(44),=CL44'TRF SMF RACF REPORT'\n         MVC   HCARD+123(5),=CL5'PAGE'\n         MVC   HCARD+127(6),PAGEPAT\n         ED    HCARD+127(6),PAGECNT\n         BAL   R7,LINEPUT\n         SPACE\n         BAL   R7,LINECLR\n         BAL   R7,LINEPUT\n         BAL   R7,LINEPUT\n         BAL   R7,LINEPUT\n         SPACE\n         MVC   HCARD+1(8),=CL8'USER/JOB'\n         MVC   HCARD+11(8),=CL8'GRP/STEP'\n         MVC   HCARD+21(8),=CL8'DATE'\n         MVC   HCARD+31(5),=CL5'TIME'\n         SPACE\n         MVC   HCARD+38(44),=CL44'DATA SET NAME / RACF RESOURCE'\n         MVC   HCARD+84(6),=CL6'VOLID'\n         MVC   HCARD+92(8),=CL8'TERM ID'\n         MVC   HCARD+105(10),=CL10'EVENT'\n         MVC   HCARD+129(4),=C'SYS'\n         BAL   R7,LINEPUT\n         SPACE\n         MVI   HCARD,C'='\n         MVC   HCARD+1(132),HCARD\n         MVI   HCARD,C' '\n         BAL   R7,LINEPUT\n         BAL   R7,LINECLR\n         SPACE\n         L     R14,E35SAVE\n         BR    R14\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nHEADER2  ST    R14,E35SAVE\n         BAL   R7,LINECLR\n         MVI   HCARD,X'F1'\n         SPACE\n         L     R3,DTEADD\n         MVC   HCARD+1(8),0(R3)\n         MVC   HCARD+58(44),=CL44'TRF SMF RACF REPORT SUMMARY'\n         MVC   HCARD+123(5),=CL5'PAGE'\n         MVC   HCARD+127(6),PAGEPAT\n         ED    HCARD+127(6),PAGECNT\n         BAL   R7,LINEPUT\n         SPACE\n         BAL   R7,LINECLR\n         BAL   R7,LINEPUT\n         BAL   R7,LINEPUT\n         BAL   R7,LINEPUT\n         SPACE\n         MVC   HCARD+1(8),=CL8'USER'\n         MVC   HCARD+10(8),=CL8'GROUP'\n         MVC   HCARD+21(12),=CL12'SUCCESSES'\n         MVC   HCARD+32(12),=CL12'VIOLATIONS'\n         MVC   HCARD+48(12),=CL12'ERRORS'\n         MVC   HCARD+55(12),=CL12'JOBS/LOGONS'\n         MVC   HCARD+68(12),=CL12'RES ACCESS'\n         MVC   HCARD+81(12),=CL12'RACF CMDS'\n         BAL   R7,LINEPUT\n         SPACE\n         MVI   HCARD,C'='\n         MVC   HCARD+1(132),HCARD\n         MVI   HCARD,C' '\n         BAL   R7,LINEPUT\n         BAL   R7,LINECLR\n         SPACE\n         L     R14,E35SAVE\n         BR    R14\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nWHATPAGE ST    R14,E35SAVE\n         CVB   R3,LINECNT\n         CH    R3,HWDPAGE\n         BL    SAMEPAGE\n         AP    PAGECNT,=P'1'\n         ZAP   LINECNT,=P'0'\n         LA    R15,1\n         B     PGEXIT\n         SPACE\nSAMEPAGE LA    R15,0\n         SPACE\nPGEXIT   L     R14,E35SAVE\n         BR    R14\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nSTATSTOT ST    R14,E35SAVE\n         SPACE\nONETIME  NOP   AROUND\n         OI    *-3,X'F0'\n         MVC   HUSER,WUSER\n         MVC   HGROUP,WGROUP\n         SPACE\nAROUND   CLC   HUSER,WUSER\n         BNE   PRINTIT\n         CLC   HGROUP,WGROUP\n         BE    CKDESFLG\n         SPACE\nPRINTIT  BAL   R7,EDITSTAT\n         MVC   HUSER,WUSER\n         MVC   HGROUP,WGROUP\n         BAL   R7,ZAPHSTAT\n         BAL   R7,LINEPUT\n         SPACE\nCKDESFLG CLI   WDESFLG,C' '\n         BNE   CK4WARN\n         AP    HOK,=P'1'\n         B     CKJOBST\n         SPACE\nCK4WARN  CLI   WDESFLG,C'W'\n         BNE   CK4VIO\n         AP    HOK,=P'1'\n         B     CKJOBST\n         SPACE\nCK4VIO   CLI   WDESFLG,C'V'\n         BNE   CK4ERR\n         AP    HVIO,=P'1'\n         B     CKJOBST\n         SPACE\nCK4ERR   CLI   WDESFLG,C'E'\n         BNE   CKJOBST\n         AP    HERR,=P'1'\n         SPACE\nCKJOBST  CLI   WEVTTAG,1\n         BL    STATSXIT\n         BH    CKRESST\n         AP    HJOB,=P'1'\n         B     STATSXIT\n         SPACE\nCKRESST  CLI   WEVTTAG,7\n         BH    CKRACST\n         AP    HRES,=P'1'\n         B     STATSXIT\n         SPACE\nCKRACST  CLI   WEVTTAG,25\n         BH    STATSXIT\n         AP    HRAC,=P'1'\n         SPACE\nSTATSXIT L     R14,E35SAVE\n         BR    R14\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nEDITSTAT MVC   HCARD+1(8),HUSER\n         MVC   HCARD+10(8),HGROUP\n         MVC   HCARD+20(72),STATSPAT\n         ED    HCARD+20(10),HOK\n         ED    HCARD+32(10),HVIO\n         ED    HCARD+44(10),HERR\n         ED    HCARD+56(10),HJOB\n         ED    HCARD+68(10),HRES\n         ED    HCARD+80(10),HRAC\n         BR    R7\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nZAPHSTAT ZAP   HOK,=P'0'\n         ZAP   HVIO,=P'0'\n         ZAP   HERR,=P'0'\n         ZAP   HJOB,=P'0'\n         ZAP   HRES,=P'0'\n         ZAP   HRAC,=P'0'\n         BR    R7\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nLASTSTAT ST    R14,E35SAVE\n         SPACE\n         CLC   HUSER,=CL8' '\n         BE    LASTXIT\n         BAL   R7,EDITSTAT\n         BAL   R7,LINEPUT\n         SPACE\nLASTXIT  L     R14,E35SAVE\n         BR    R14\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nLINECLR  MVI   HCARD,C' '\n         MVC   HCARD+1(132),HCARD\n         BR    R7\n         SPACE\n*----------------------------------------------------------------------\n         SPACE\nLINEPUT  L     R1,DCBADD\n         PUT   (R1),HCARD\n         AP    LINECNT,=P'1'\n         BR    R7\n         EJECT\n*----------------------------------------------------------------------\n* E35 VAR AND CONST ---------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\n         DS    0D\nLINECNT  DC    PL8'60'\nHWDPAGE  DC    H'60'\nPKDPAGE  DC    P'60'\n         SPACE\nPAGECNT  DC    PL3'0'\n         SPACE\nPAGEPAT  DC    X'402020202020'\nSTATSPAT DS    0CL72\n         DC    X'40206B2020206B2021204040'\n         DC    X'40206B2020206B2021204040'\n         DC    X'40206B2020206B2021204040'\n         DC    X'40206B2020206B2021204040'\n         DC    X'40206B2020206B2021204040'\n         DC    X'40206B2020206B2021204040'\n         SPACE\nDCBADD   DC    A(PRTFILE)\nDTEADD   DC    A(TODAY)\nSWADD    DC    A(SORTSW)\n         SPACE\nE35SAVE  DC    F'0'\n         SPACE\nHSTATS   DS    0CL40\nHUSER    DC    CL8' '\nHGROUP   DC    CL8' '\nHOK      DC    PL4'0'\nHVIO     DC    PL4'0'\nHERR     DC    PL4'0'\nHJOB     DC    PL4'0'\nHRES     DC    PL4'0'\nHRAC     DC    PL4'0'\n         SPACE\n         DS    0F\nHCARD    DS    CL133\n         SPACE\n         LTORG\n         EJECT\n*----------------------------------------------------------------------\n* E35 DSECTS ----------------------------------------------------------\n*----------------------------------------------------------------------\n         SPACE\nWCARD    DSECT\n         DS    0CL133\n         DS    CL1\nWUSER    DS    CL8\n         DS    CL2\nWGROUP   DS    CL8\n         DS    CL2\nWDATE    DS    0CL8\nWDAY     DS    CL2\n         DS    CL1\nWMTH     DS    CL2\n         DS    CL1\nWYEAR    DS    CL2\n         DS    CL2\nWTIME    DS    0CL5\nWHOURS   DS    CL2\nWTIMEDEL DS    CL1\nWMINS    DS    CL2\n         DS    CL2\nWDATASET DS    CL44\n         DS    CL2\nWVOLID   DS    CL6\n         DS    CL2\nWTERMID  DS    CL8\n         DS    CL2\nWDESFLG  DS    CL1\n         DS    CL1\nWEVTTAG  DS    CL1\nWEVENT   DS    CL10\n         DS    CL2\nWEVENTQ  DS    CL8\n         DS    CL4\nWSYSID   DS    CL4\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFSAMP": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x8d\\x00\\x8d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 141, "newlines": 141, "modlines": 0, "user": "FILE013"}, "text": "//*********************************************************************\n//* This job is a sample job which will produce a cross reference\n//* report of users authorized to use IMS transactions which uses\n//* the programs RACFUSR, and RACFGRES which are included on this file.\n//*********************************************************************\n//insert your job card here\n//*********************************************************************\n//* JOBSTREAM TO PRODUCE A CROSS REFERENCE REPORT OF PRODUCTION IMS   *\n//* USERS AND THEIR AUTHORIZED TRANSACTIONS, SORTED BY USER NAME      *\n//*********************************************************************\n//*\n//*********************************************************************\n//* TWO OUTPUT RECORDS ARE PRODUCED FOR EACH USER-ID EXTRACTED.       *\n//* THESE RECORDS ARE FORMATTED AS FOLLOWS:                           *\n//*                                                                   *\n//* RECORD 1: COLUMNS   1-8: USER-ID                                  *\n//*           COLUMNS  9-28: USER NAME                                *\n//*           COLUMNS 29-36: OWNER                                    *\n//*           COLUMNS 37-44: DEFAULT GROUP                            *\n//*           COLUMN     45: REVOKED INDICATOR                        *\n//*           COLUMN     46: SPECIAL INDICATOR                        *\n//*           COLUMN     47: OPERATIONS INDICATOR                     *\n//*           COLUMN     48: AUDITOR INDICATOR                        *\n//*           COLUMN     49: USER AUDIT INDICATOR                     *\n//*           COLUMNS 50-52: LAST SIGNON DATE                         *\n//*           COLUMNS 53-56: LAST SIGNON TIME                         *\n//*           COLUMNS 57-59: LAST PASSWORD CHANGE DATE                *\n//*           COLUMN     60: PASSWORD CHANGE INTERVAL                 *\n//*                                                                   *\n//* RECORD 2: COLUMNS 1-255: USER DATA AREA                           *\n//*********************************************************************\n//RACFUSER EXEC PGM=RACFUSER\n//STEPLIB    DD DSN=insert your authorized library name here,DISP=SHR\n//USERFILE   DD DSN=&&USERS,DCB=(LRECL=255,BLKSIZE=18870,RECFM=FB),\n//           SPACE=(CYL,(1,1)),UNIT=SYSDA,DISP=(NEW,PASS)\n//SYSUDUMP   DD SYSOUT=*\n//SYSABEND   DD SYSOUT=*\n//*\n//*********************************************************************\n//* THE OUTPUT RECORDS OF THIS PROGRAM ARE FORMATTED AS FOLLOWS:      *\n//*                                                                   *\n//*           COLUMNS   1-8: RESOURCE NAME                            *\n//*           COLUMNS  9-16: RESOURCE CLASS                           *\n//*           COLUMNS 17-24: OWNER                                    *\n//*           COLUMN     25: UACC                                     *\n//*           COLUMN  26-33: AUTHORIZED USER                          *\n//*           COLUMN     34: AUTHORIZED USER'S ACCESS AUTHORITY       *\n//*********************************************************************\n//RACFGRES EXEC PGM=RACFGRES,PARM='insert resource class',COND=(0,LT)\n//STEPLIB    DD DSN=SS.AUTH.LOAD,DISP=SHR\n//GRESFILE   DD DSN=&&TRANS,DCB=(LRECL=34,BLKSIZE=19040,RECFM=FB),\n//           SPACE=(CYL,(1,1)),UNIT=SYSDA,DISP=(NEW,PASS)\n//SYSUDUMP   DD SYSOUT=*\n//SYSABEND   DD SYSOUT=*\n//*\n//SASMERGE EXEC SAS,PERFORM=25,COND=(0,LT)\n//SAS.SYSIN  DD *\nDATA USERS;\n /********************************************************************/\n /* READ IN THE OUTPUT FROM RACFUSER. DUMMY OUT THE USER DATA TO     */\n /* DIRECT SAS TO SKIP THE CARDS THAT CONTAIN IT                     */\n /********************************************************************/\n     ATTRIB USERID   LENGTH=$8;\n     ATTRIB NAME     LENGTH=$20;\n     ATTRIB REVOKED  LENGTH=$1;\n     ATTRIB USERDATA LENGTH=$200; /* MAXIMUM LENGTH FOR $ DATA */\n     INFILE USERS;\n     INPUT #1 USERID   $   1-8\n           #1 NAME     $ & 9-28\n           #1 REVOKED  $ @ 45\n           #2 USERDATA $ & 1-200;\n     DROP USERDATA;\n     PROC SORT DATA=USERS; BY USERID;\nDATA IMSTRANS;\n     ATTRIB TRANID LENGTH=$8;\n     ATTRIB CLASS  LENGTH=$8;\n     INFILE TRANS;\n     INPUT TRANID $   1-8\n           CLASS  $  9-16\n           USERID $ 26-33;\n     PROC SORT DATA=IMSTRANS; BY USERID;\nDATA OUTFILE;\n /********************************************************************/\n /* WRITE AN OUTPUT FILE OF THE MERGED DATASETS, OMITTING RECORDS    */\n /* OF USERS NOT AUTHORIZED TO ANY IMS TRANSACTIONS.                 */\n /********************************************************************/\n     MERGE USERS IMSTRANS; BY USERID;\n     IF CLASS = '        ' THEN DELETE;\n     FILE DYLIN;\n     PUT USERID  $     1-8\n         TRANID  $     10-17\n         NAME    $ &   20-39\n         CLASS   $     40-47\n         REVOKED $   @ 50;\n//USERS     DD DSN=&&USERS,DISP=(OLD,DELETE,DELETE)\n//TRANS     DD DSN=&&TRANS,DISP=(OLD,DELETE,DELETE)\n//DYLIN     DD DSN=&&DYLIN,DISP=(NEW,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(1,1)),DCB=(LRECL=80,BLKSIZE=19040,RECFM=FB)\n//*\n//DYL280 EXEC DYL280,COND=(4,LT)\n//*********************************************************************\n//* MAKE A PRETTY REPORT FOR THE END USER                             *\n//*********************************************************************\n//SYS280R  DD SYSOUT=*\n//SYSIN    DD *\n********************************************************************\nFILE INFILE FB 80 19040\nUSERID       8  1 CH ('USER ID)\nTRANSACTION  8 10 CH (AUTHORIZED'TRANSACTIONS)\nNAME        20 20 CH ('USER NAME)\nCLASS        8 40 CH\n RACFGRES    1 40 CH\n APPL        7 41 CH ('APPLICATION)\nREVOKEFLAG   1 50 BI\n*\nWORKAREA\nREVOKED      3    CH (USER'REVOKED?)\n*\nIF (REVOKEFLAG GT X'7F') MOVE 'YES' TO REVOKED\n   ELSE MOVE 'NO ' TO REVOKED ENDIF\nMOVE X'00' TO REVOKEFLAG\n*\nSORT INFILE USING NAME USERID TRANSACTION\n*\nCONTROL NAME\n*\nLIST SUPPRESS NAME SUPPRESS USERID SUPPRESS REVOKED APPL TRANSACTION\n*\nON CHANGE IN NAME LIST BLANKS ; SPACE BETWEEN USERS\n*\nT1 ' '\nT1+1   DYLDATE\nT1+10  DYLETIME\nT1+120 DYLPAGE\nT2     'USERS OF RACF PROTECTED IMS TRANSACTIONS' WITH 1 AFTER\nT3     ' ' ; SPACE BETWEEN TITLE AND COLUMN HEADINGS\n*\nFIN\n********************************************************************\n//INFILE   DD DSN=&&DYLIN,DISP=(OLD,DELETE,DELETE)\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACFSUMM": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01p\\x01p\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 368, "newlines": 368, "modlines": 0, "user": "FILE013"}, "text": "***********************************************************************\n*                                                                     *\n* PROGRAM NAME: RACFSUMM                                              *\n*                                                                     *\n* FUNCTION:     TO READ A RACF DATASET AND DUMP OUT A SEQUENTIAL      *\n*               FILE OF PROFILE TYPES AND THE NAMES OF THE PROFILES.  *\n*               THE OUTPUT CAN BE USED AS INPUT TO A SAS PROGRAM      *\n*               OR SOMETHING LIKE IT...                               *\n*                                                                     *\n* NOTES:        THIS PROGRAM IS NOT AUTHORIZED.                       *\n*               THIS PROGRAM DOES NOT CHANGE THE RACF DATASET.        *\n*                                                                     *\n* SAMPLE EXECUTE JCL:  (NOTICE THE BUFFERING - IT RUNS REALLY FAST    *\n*                       WITH BUFFERING BUMPED UP.)                    *\n*                                                                     *\n*    //JOBNAMEX JOB ACCT,'NAME',CLASS=A,MSGCLASS=A                    *\n*    //RACFSUMM EXEC PGM=RACFSUMM                                     *\n*    //STEPLIB  DD DSN=STEP.LIB.DSNAME,DISP=SHR                       *\n*    //SYSZRACF DD DSN=RACF.DATASET.NAME,DISP=SHR,DCB=BUFNO=10        *\n*    //SYSUT2   DD DSN=OUTPUT.DATASET.NAME,                           *\n*    //            DISP=(NEW,CATLG,DELETE),UNIT=<DISK>,               *\n*    //            SPACE=(TRK,(5,5),RLSE),                            *\n*    //            DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB,BUFNO=10)      *\n*                                                                     *\n***********************************************************************\nRACFSUMM RMODE 24\nRACFSUMM AMODE 31\nRACFSUMM CSECT\n         USING RACFSUMM,15\n         B     V$0001B\n         DC    AL1(V$0001B-*-1),C'RACFSUMM 03/13/87 14.14 '\nV$0001B  STM   14,12,12(13)\n         LR    12,15\n         DROP  15\n         USING RACFSUMM,12\n         LA    15,V$0001V          OUR SVA\n         ST    15,8(,13)\n         ST    13,4(,15)           SAVE OUR HSA\n         LR    13,15\n*---------------------------------------------------------------------*\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         OPEN  (RACFDCB,INPUT)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         GETMAIN RU,LV=1024,LOC=BELOW\n         ST    R1,@BUFF               SAVE INPUT BUFFER ADDRESS\n         L     R4,@BUFF               R4: BUFFER ADDR\n*---------------------------------------------------------------------*\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         GET   RACFDCB,(R4)           READ ICB\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R3,4(,R4)              R3: NUMBER OF BAM BLOCKS\n         MH    R3,=H'2008'            TIMES MAX # BLOCKS\n         SLL   R3,10                  TIME 1024 (FOR EACH BLOCK)\n         ST    R3,@TABSIZE            SAVE LENGTH OF GETMAIN\n         GETMAIN RU,LV=(R3),LOC=ANY   GETMAIN TABLE AREA\n         ST    R1,@TABLE              SAVE TABLE ADDRESS\n         LA    R9,0(,R1)              R9: TABLE ORIGIN\n         LR    R2,R9\n         LA    R3,1024\n         LA    R5,1024\n         MVCL  R2,R4                  SET 1ST BLOCK\n*---------------------------------------------------------------------*\n* /*     WHILE ALWAYS,DO\nB11W     DS    0H\nB11D     DS    0H\n            LA    R9,1024(,R9)           R9: NEXT ENTRY ADDRESS\n            L     R4,@BUFF               R4: BUFFER ADDR\n* /*        XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n            GET   RACFDCB,(R4)           READ ICB\n* /*        XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n            LR    R2,R9\n            LA    R3,1024\n            LA    R5,1024\n            MVCL  R2,R4                  SET 1ST BLOCK\n* /*     ENDDO ,\n         B     B11W                BACK TO WHILE TEST\nB11N     DS    0H\n*---------------------------------------------------------------------*\nEOF      DS    0H\n         L     R4,@BUFF\n         FREEMAIN RU,LV=1024,A=(R4)\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         CLOSE (RACFDCB)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         XR    R0,R0\n         ST    R0,@BUFF\n*---------------------------------------------------------------------*\nANALYZE  DS    0H                  START TABLE ANALYSIS:\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         OPEN  (SYSUT2,OUTPUT)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R9,@TABLE              R9: TABLE ADDRESS\n         ICM   R8,15,16(R9)           R8: RBA OF 1ST SEQUENCE BLOCK\n         LA    R8,0(R8,R9)            R8: ADR OF 1ST SEQUENCE BLOCK\n*---------------------------------------------------------------------*\nHEADER   DS    0H                  PROCESS SEQUENCE BLOCK HEADER\n*                                     R8: HEADER OF SEQ BLOCK\n         LA    R7,10(,R8)             R7: INDEX ENTRY BLOCK\n*---------------------------------------------------------------------*\nENTRY    DS    0H                  PROCESS NEXT ENTRY:\n*                                     R7: UNALIGNED ENTRY ADDRESS\n* /*     IF    (0(R7),EQI,X'20'),THEN IF CHAIN POINTER:\n         CLI   0(R7),X'20'\n         BC    7,B21F\nB21T     DS   0H\n            ICM   R8,15,4(R7)            R8: NEXT SEQ BLOCK RBA\n            LTR   R8,R8                  IS ZERO ?\n            BZ    RETURN                 YES: END OF CHAIN\n            LA    R8,0(R8,R9)            R8: NEXT SEQ BLK ADDR\n            B     HEADER                 PROCESS HEXT HEADER\n* /*     ENDIF ,\nB21F     DS    0H\n* /*     CALLM FORMAT                 FORMAT THE ENTRY\n         BAL   14,FORMAT           CALL LOCAL\n         XR    R2,R2                  RESET R2\n         IC    R2,1(,R7)              R7: NAME LENGTH\n         LA    R7,7(R2,R7)            R7: NEXT ENTRY\n         B     ENTRY\n*---------------------------------------------------------------------*\nRETURN   DS    0H\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         CLOSE (SYSUT2)\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n         L     R0,@TABSIZE\n         L     R1,@TABLE\n         FREEMAIN RU,LV=(0),A=(1)\n* /*     EMOD  RC=0\n         SR    15,15\n         L     13,4(,13)           HSA, OUR CALLERS SVA\n         MVI   8(13),X'FF'         FLAG MEANINGLESS LSA POINTER\n         L     14,12(,13)          RETURN (LEAVE  RC=(15),R0,R1)\n         LM    2,12,28(13)         RESTORE REGS\n         BR    14                   DONE\nV$0001V  DC    18F'0'\n*=====================================================================*\n         EJECT ,\n*---------------------------------------------------------------------*\n*FORMAT   BMOD  ,                      R7: INDEX ENTRY\nRACFSUMM CSECT\nFORMAT   ST    14,V$0043           SAVE THE RETURN ADDRESS\n         CLC   =X'0400FF',1(R7)       END OF SEQUENCE SET ?\n         BE    FMTEND                 YES: DONT FORMAT TERMINATOR\n         MVC   OUTTEMP,BLANKS\n         MVI   OUTGEN,C' '\n         MVC   OUTNAME,BLANKS\n         XR    R2,R2                  RESET R2\n         IC    R2,1(,R7)              R7: NAME LENGTH\n         LA    R2,1(R2,R7)            R2: ADR OF PROFILE RBA\n         ICM   R6,15,2(R2)            R6: PROFILE RBA\n         LA    R6,0(R6,R9)            R6: PROFILE ADDRESS\n         XR    R5,R5                  RESET R2\n         IC    R5,5(,R6)              R7: DSNAME LENGTH\n         LA    R0,OUTNAME\n         LA    R1,L'OUTNAME\n         LA    R2,6(,R6)              R2: MVCL SOURCE ADDR\n         LR    R3,R5                  R3: LENGTH OF ENTITY\n         ICM   R3,B'1000',BLANKS\n         MVCL  R0,R2                  SET ENTITY NAME\n*---------------------------------------------------------------------*\n         LA    R2,6(R5,R6)            R2: ADR OF ENTITY TYPE\n* /*     IF    (0(R2),EQI,1),THEN     IF GROUP\n         CLI   0(R2),1\n         BC    7,B31F\nB31T     DS   0H\n            MVC   OUTTEMP,=CL8'GROUP'\n* /*     ENDIF ,\nB31F     DS    0H\n* /*     IF    (0(R2),EQI,2),THEN     IF USER\n         CLI   0(R2),2\n         BC    7,B41F\nB41T     DS   0H\n            MVC   OUTTEMP,=CL8'USER'\n* /*     ENDIF ,\nB41F     DS    0H\n* /*     IF    (0(R2),EQI,3),THEN     IF CONNECT\n         CLI   0(R2),3\n         BC    7,B51F\nB51T     DS   0H\n            MVC   OUTTEMP,=CL8'CONNECT'\n* /*     ENDIF ,\nB51F     DS    0H\n* /*     IF    (0(R2),EQI,4),THEN     IF DATASET\n         CLI   0(R2),4\n         BC    7,B61F\nB61T     DS   0H\n            MVC   OUTTEMP,=CL8'DATASET'\n* /*     ENDIF ,\nB61F     DS    0H\n* /*     IF    (0(R2),EQI,5),THEN     IF GENERAL\n         CLI   0(R2),5\n         BC    7,B71F\nB71T     DS   0H\n            MVC   OUTTEMP,=CL8'GENERAL'\n* /*     ENDIF ,\nB71F     DS    0H\n*---------------------------------------------------------------------*\n         LA    R2,OUTNAME\n         LR    R3,R5\n* /*     WHILE ((R3),GT,0),DO\nB81W     DS    0H\n         LTR   R3,R3\n         BC    12,B81N\nB81D     DS    0H\n* /*        IF    (0(R2),EQI,1),THEN\n         CLI   0(R2),1\n         BC    7,B92F\nB92T     DS   0H\n               MVI   0(R2),C'.'\n               MVI   OUTGEN,C'G'\n               XR    R3,R3\n* /*        ENDIF ,\nB92F     DS    0H\n* /*        IF    (0(R2),EQI,2),THEN\n         CLI   0(R2),2\n         BC    7,B102F\nB102T    DS   0H\n               MVI   0(R2),C'-'\n               MVI   OUTGEN,C'G'\n               XR    R3,R3\n* /*        ENDIF ,\nB102F    DS    0H\n* /*        IF    OR,(0(R2),EQI,C'.'),(0(R2),EQI,C'-'),THEN\n         CLI   0(R2),C'.'\n         BC    8,B112T\n         CLI   0(R2),C'-'\n         BC    7,B112F\nB112T    DS   0H\n               XR    R3,R3\n* /*        ENDIF ,\nB112F    DS    0H\n            LA    R2,1(,R2)\n            BCTR  R3,0\n* /*     ENDDO ,\n         B     B81W                BACK TO WHILE TEST\nB81N     DS    0H\n*---------------------------------------------------------------------*\n         LA    R2,OUTNAME\n         LR    R3,R5\n* /*     WHILE ((R3),GT,0),DO\nB121W    DS    0H\n         LTR   R3,R3\n         BC    12,B121N\nB121D    DS    0H\n* /*        IF    (0(R2),EQI,0),THEN\n         CLI   0(R2),0\n         BC    7,B132F\nB132T    DS   0H\n               MVI   0(R2),C'|'\n* /*        ENDIF ,\nB132F    DS    0H\n* /*        IF    (=X'FCFE',EQ,0(R2)),THEN\n         CLC   =X'FCFE',0(R2)\n         BC    7,B142F\nB142T    DS   0H\n               MVC   0(2,R2),=C'* '\n               XR    R3,R3\n* /*        ENDIF ,\nB142F    DS    0H\n* /*        IF    (0(R2),EQI,X'FB'),THEN\n         CLI   0(R2),X'FB'\n         BC    7,B152F\nB152T    DS   0H\n               MVI   0(R2),C'%'\n* /*        ENDIF ,\nB152F    DS    0H\n* /*        IF    (0(R2),EQI,X'FC'),THEN\n         CLI   0(R2),X'FC'\n         BC    7,B162F\nB162T    DS   0H\n               MVI   0(R2),C'*'\n* /*        ENDIF ,\nB162F    DS    0H\n            LA    R2,1(,R2)\n            BCTR  R3,0\n* /*     ENDDO ,\n         B     B121W               BACK TO WHILE TEST\nB121N    DS    0H\n*---------------------------------------------------------------------*\nFMTEND   DS    0H\n* /*     XAMODE 24\n         LA    15,*+6                 R15: INSTR AFTER BSM\n         BSM   0,15                   NOW IN AMODE-24\n         PUT   SYSUT2,OUTREC\n* /*     XAMODE 31\n         CNOP  2,4                    ALIGN ON HWORD/NON-FWORD\n         LA    15,*+14                R15: ADDRESS AFTER XAMODE'S 'DC'\n         O     15,*+6                 TURN ON HI-ORDER BIT\n         BSM   0,15                   GO AMODE-31\n         DC    XL4'80000000'          (AMODE-31 MASK)\n*---------------------------------------------------------------------*\n* /*     EMOD  RC=0\n         SR    15,15\n         L     14,V$0043           MODULE RETURN ADDRESS\n         BR    14                  RETURN\nV$0043   DC    1F'0'\n*=====================================================================*\n         EJECT ,\n*=====================================================================*\n* /*     BMOD  ,C\nRACFSUMM CSECT\n         LTORG ,\n*---------------------------------------------------------------------*\n@BUFF    DC    A(0)                   RACF INPUT BUFFER ADDRESS\n@TABLE   DC    A(0)                   ADDRESS OF TABLE\n@TABSIZE DC    A(0)                   GETMAINED LENGTH OF TABLE\n*---------------------------------------------------------------------*\nOUTREC   DS    0D\nOUTTEMP  DC    CL8' '                 TEMPLATE TYPE\n         DC    C' '\nOUTGEN   DC    C' '                   GENERIC FLAG\n         DC    C' '\nOUTNAME  DC    CL44' '                ENTITY\nBLANKS   DC    CL44' '\n*---------------------------------------------------------------------*\nRACFDCB  DCB   DDNAME=SYSZRACF,DSORG=PS,MACRF=GM,EODAD=EOF\n*---------------------------------------------------------------------*\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM\n*---------------------------------------------------------------------*\n* /*     EMOD  ,\n         DC    0F'0'\n* /*     ENDSECT ,\nV$0001F  DC    0F'0'\n         DS    0D                      ***RNB MKH\n*=====================================================================*\n         YREGS ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFTSO5": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xbc\\x00\\xbc\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 188, "newlines": 188, "modlines": 0, "user": "FILE013"}, "text": "//RACFTSO5 JOB (NNNNN,8),'BILL HORTON',CLASS=A,NOTIFY=XXXXXX\n//        EXEC PGM=FILEAID\n//SYSPRINT DD  SYSOUT=$\n//SYSIN    DD  DSN=PROD.CNTRLIB2($$DD01),DISP=SHR\n//DD01     DD  DSN=SYS1.UADS,DISP=SHR\n//DD01O    DD  DSN=XXXXXX.UADS.LIST,SPACE=(CYL,(1,1)),DISP=(,CATLG),\n//             UNIT=SYSDA,DCB=(LRECL=172,RECFM=FB,BLKSIZE=17200)\n//        EXEC ASMHCL,PARM.LKED='LIST,MAP,AC=1'\n//SYSIN    DD  *\n*\n* RACFTSO5\n* --------\n*\n* This program can be used, when converting TSO logon information from\n* SYS1.UADS to RACF, to migrate the first TSO command to be issued from\n* SYS1.UADS to RACF (which is not done by the RACONVRT command).\n*\n* Input is a flat file of 172 byte SYS1.UADS records.  You should\n* concatenate all SYS1.UADS members to provide this input.\n*\n* When the program finds a TSO command to be issued, it updates the\n* appropriate field in the RACF data base, so that this command will\n* not be lost across the conversion from SYS1.UADS to RACF.\n*\n* We used this program at the PUT 8801 level, with TSO/E 4.0 and RACF\n* 1.8.\n*\nRACFTSO5 CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9            POINTER TO DYNAMIC AREA\nR10      EQU   10           BASE REGISTER\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12),,RACFTSO5._&SYSDATE._&SYSTIME\n         LR    R10,R15\n         USING RACFTSO5,R10\n         L     R0,LDYNAREA              LOAD LENGTH OF DYNAMIC AREA.\n         GETMAIN R,LV=(R0)              GET DYNAMIC AREA.\n         LR    R9,R1                    SAVE ADDRESS.\n         LR    R2,R9                    POINT TO DYNAMIC AREA.\n         LR    R3,R0                    GET LENGTH.\n         LA    R4,0                     ZERO.\n         LA    R5,0                     PADDING BYTE AND LENGTH.\n         MVCL  R2,R4                    CLEAR DYNAMIC AREA.\n         USING DYNAREA,R9               ADDRESSIBILITY.\n         LA    R2,SAVEAREA\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n         LA    R3,=A(WEND-WORKAREA)     GET LENGTH OF WORKAREA.\n         ST    R3,WLENGTH\n         ICHEACTN FIELD=TCOMMAND,FLDATA=(80,LIDATAX),MF=(E,LUPD1)\n         MVI   LUPD1+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         OPEN  (SYSUT1,(INPUT))\n*\n*\n*\nREADLOOP GET   SYSUT1\n         LR    R8,R1\n         LA    R3,4(R8)                 POINT TO USERID.\n         MVI   12(R8),C' '              PUT IN ONE MORE BLANK.\n         TRT   4(9,R8),BLANKTAB         GET L(USERID) + 1\n         SR    R1,R3                    LENGTH OF USERID + 1.\n         BCTR  R1,0                     DECREMENT TO GET TRUE LENGTH.\n         STC   R1,LUSERID               SAVE LENGTH OF USERID.\n         BCTR  R1,0                     DECREMENT FOR EX.\n         EX    R1,MOVE1                 COPY USERID.\nMOVE1    MVC   USERID(0),0(R3)          COPY USERID.\n         MVC   WTP1+16(7),=CL7' '\n         EX    R1,MOVE2                 COPY USERID.\nMOVE2    MVC   WTP1+16(0),0(R3)         COPY USERID.\nWTP1     WTP   'USERID: XXXXXXX'\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         LA    R3,WORKAREA              POINT TO WORK AREA.\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=(R2),ACTIONS=(ACT1),         X\n               WKAREA=(R3),OPTIONS=(FLDEF,ACTION),MF=(E,LOCATE)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    GETOK                    YES, CONTINUE.\n         CH    R5,=H'12'\n         BNE   BADNEWS\n         WTP   'ABOVE NOT A RACF USERID'\n         B     GETOK\nBADNEWS  ABEND 1,DUMP                   NO, THROW UP.\n         PUSH  PRINT\n         PRINT NOGEN\nGETOK    GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         GET   SYSUT1\n         LR    R8,R1\n         POP   PRINT\n         MVC   RCMD(6),166(R8)\n         GET   SYSUT1\n         LR    R8,R1\n         MVC   RCMD+6(74),0(R8)\n         CLC   RCMD,BLANKS              NOTHING HERE?\n         BE    READLOOP                 YES, GO GET NEXT USER'S DATA.\n         CH    R5,=H'0'                 DID USERID EXIST?\n         BNE   READLOOP                 NO, CONTINUE.\n         MVC   WTP2+26(80),RCMD\nWTP2     WTP   'DATA CHANGED TO: \"----5---10----5---20----5---30----5--X\n               -40----5---50----5---60----5---70----5---80\"'\n         MVC   LIDATA(3),=X'005150'     SPECIFY LENGTH.\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         ICHEINTY ALTER,TYPE='USR',ENTRY=(R2),ACTIONS=(LUPD1),         X\n               OPTIONS=(FLDEF,ACTION),MF=(E,ALTER)\n         LTR   R15,R15                  GOOD RETURN FROM RACF?\n         BZ    READLOOP                 YES, CONTINUE.\n         ABEND 2,DUMP                   NO, THROW UP.\n*\n* PROCESSING COMPLETED.\n*\nEOF      CLOSE (SYSUT1)\n         L     R13,SAVEAREA+4\n         L     R0,LDYNAREA              FREE\n         FREEMAIN R,LV=(R0),A=(R9)      DYNAMIC AREA.\n         LA     R15,0                   SET RETURN CODE.\n         RETURN (14,12),,RC=(15)        RETURN TO CALLER.\nLDYNAREA DC    A(EDYNAREA-DYNAREA)\nSYSUT1   DCB   DSORG=PS,LRECL=172,RECFM=FB,DDNAME=SYSUT1,EODAD=EOF,    X\n               MACRF=(GL)\nACT1     ICHEACTN FIELD=TCOMMAND\nTCOMMAND EQU   *-8\nBLANKS   DC    CL80' '\nBLANKTAB DC    XL256'00'\n         ORG   BLANKTAB+X'40'\n         DC    X'40'\n         ORG\n         LTORG ,\n         EJECT\nDYNAREA  DSECT\nSAVEAREA DS    18F\nLUPD1    ICHEACTN FIELD=TCOMMAND,FLDATA=(80,LUPD1),MF=L\nLOCATE   ICHEINTY LOCATE,ACTIONS=(LUPD1),MF=L\nALTER    ICHEINTY ALTER,ACTIONS=(LUPD1),MF=L\nHALF1    DS    D\nLUSERID  DS    C\nUSERID   DS    CL7\nWORKAREA DS    0F                      /* WORK AREA FOR ICHEACTN     */\nWLENGTH  DS    A                       /* LENGTH OF WORK AREA        */\nWRBA     DS    CL6                     /* RBA RETURN AREA            */\nWFLAGS   DS    C                       /* FLAGS                      */\nWRES1    DS    C                       /* RESERVED                   */\nWDDSNC   DS    CL4                     /* DUPL. DATASET NAME COUNT   */\nWRES2    DS    CL8                     /* RESERVED                   */\nWDATALEN DS    CL4                     /* LENGTH OF RETURNED DATA    */\nLIDATA   DS    CL2                     /* LENGTH OF INSTDATA FIELD   */\nLIDATAX  DS    C                       /* LENGTH OF DATA IN FIELD    */\nRCMD     DS    CL80                    /* ACCOUNTING CODE            */\n         DS    CL255                   /* RESERVED                   */\n         DS    F                       /*                            */\nWEND     EQU   *                       /* END OF WORK AREA           */\nEDYNAREA EQU   *\n         END\n/*\n//LKED.SYSLMOD DD DSN=APF.LIBRARY(RACFTSO5),DISP=SHR\n//GO      EXEC PGM=RACFTSO5,COND=(0,NE)\n//STEPLIB  DD  DSN=APF.LIBRARY,DISP=SHR\n//SYSUDUMP DD  SYSOUT=$\n//SYSUT1   DD  DSN=XXXXXX.UADS.LIST,DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFUSER": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x07\\x07\\x07\\x07\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 1799, "newlines": 1799, "modlines": 0, "user": "FILE013"}, "text": "//UCCCEDR1 JOB (1310,0001),'CHUCK / ADM 1-101',\n//             CLASS=Z,\n//             NOTIFY=UCCCED,\n//             REGION=1024K,\n//             MSGCLASS=S\n/*JOBPARM   L=9999\n//********************************************************************\n//* BEFORE SUBMITTING THIS JOB, CHANGE THE DATA SET NAME FROM        *\n//*    MVS.SYSTEMS.LINKLIB                                           *\n//* TO AN APPROPRIATE LOAD MODULE LIBRARY.                           *\n//********************************************************************\n//PROC01    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nRACFUSER TITLE 'ROUTINE TO READ THE RACF MASTER FILE'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = RACFUSER                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME = LISTS USERIDS IN THE RACF MASTER FILE     *\n*                                                                     *\n*        AUTHOR = CHUCK DAVIS         DATE = 03/21/86                 *\n*                                                                     *\n*        FUNCTION =                                                   *\n*                                                                     *\n*        RACFUSER IS AN ASSEMBER SOURCE PROGRAM WHICH WILL READ THE   *\n*        RACF MASTER DATA SET, PRINT THE PASSWORD EXPIRATION DATE,    *\n*        AND CLASSIFY A USERID INTO ONE OF THE FOLLOWING CATEGORIES:  *\n*          A. PASSWORD WILL EXPIRE BEFORE A SPECIFIED THRUDATE (WHICH *\n*             IS SPECIFIED ON A PARM OR ALLOWED TO DEFAULT TO SEVEN   *\n*             DAYS FROM TODAY).                                       *\n*          B. PASSWORD WILL REMAIN ACTIVE AFTER THE THRUDATE,         *\n*          C. PASSWORD CURRENTLY EXPIRED,           OR                *\n*          D. USERID HAS NEVER BEEN USED,                             *\n*        THIS INFORMATION CAN BE USED BY A SECURITY ADMINISTRATOR TO  *\n*        CONTROL THE CONTENTS OF THE RACF MASTER DATA SET WHICH       *\n*        INCLUDES ELIMINATING UNUSED OR OBSOLETE USERIDS AND NOTIFING *\n*        DATA CONTROL ABOUT UPCOMING PASSWORD EXPIRATIONS IN SELDOM   *\n*        RUN BATCH JOBS.  THIS HELP PREVENT JCL ERRORS DUE TO AN      *\n*        EXPIRED PASSWORD.                                            *\n*                                                                     *\n*        OPERATION =                                                  *\n*                                                                     *\n*           RACFUSER IS USES BSAM PROCESSING TO DIRECTLY ACCESS THE   *\n*        RACF MASTER DATA SET.  A POINT MACRO FOLLOWED BY A READ      *\n*        MACRO OBTAINS THE CORRECT PHYSICAL BLOCK.                    *\n*                                                                     *\n*        THE LOGIC OVERVIEW IS AS FOLLOWS:                            *\n*          1.  PROCESS THE PARM FIELD.                                *\n*          2.  PROCESS THE RACF MASTER DATA SET HEADER (ICB).         *\n*          3.  FROM THE ICB, DETERMINE THE RBA OF THE SEQUENCE SET    *\n*              INDEX.                                                 *\n*          4.  READ THE FIRST SEQUENCE SET INDEX BLOCK AND DETERMINE  *\n*              THE RBA OF THE ASSOCIATED PROFILE.                     *\n*          5.  READ THE PROFILE, DETERMINE THE EXPIRATION DATE AND    *\n*              OPTIONALLY PRINT THE INFORMATION.                      *\n*          6.  CONTINUE WITH THE NEXT ELEMENT IN THE INDEX BLOCKS     *\n*              SEQUENTIALLY UNTIL THE END.                            *\n*          7.  USE DATA IN COLUMNS 1-8 OF THE DATA SET SPECIFIED BY   *\n*              RACFEXCL TO EXCLUDE LISTING OF VARIOUS USERIDS.  THIS  *\n*              COULD BE USED TO PREVENT THE PRINTING OF TSO USERIDS.  *\n*          8.  FINALLY, STATISTICS INCLUDE THE NUMBER OF USERIDS      *\n*              IN THE RACF DATA SET.                                  *\n*                                                                     *\n*        THE EXTERNAL ROUTINE, XDATEDIT, IS USED TO CONVERT A JULIAN  *\n*        DATE TO MM/DD/YY FORMAT.                                     *\n*                                                                     *\n*        THE EXTERNAL ROUTINE, YDATEDIT, IS USED TO CONVERT A DATE IN *\n*        MM/DD/YY FORMAT TO JULIAN.                                   *\n*                                                                     *\n*       REGISTER ASSIGNMENTS                                          *\n*        R0  - WORK                                                   *\n*        R1  - WORK                                                   *\n*        R2  - WORK                                                   *\n*        R3  - WORK                                                   *\n*        R4  - WORK                                                   *\n*        R5  - WORK                                                   *\n*        R6  - FREE                                                   *\n*        R7  - ADDRESS OF THE CURRENT SEQ SET ITEM BEING PROCESSED    *\n*        R8  - ADDRESS OF THE CURRENT PROFILE BEING PROCESSED         *\n*        R9  - DCB ADDRESS FOR RACFMAST                               *\n*        R10 - REGISTER USED IN PROGRAM CONTROL (BAL)                 *\n*        R11 - PROGRAM BASE REGISTER                                  *\n*        R12 - PROGRAM BASE REGISTER                                  *\n*        R13 - WORK/SAVE AREA BASE REGISTER                           *\n*        R14 - WORK/RETURN ADDRESS                                    *\n*        R15 - WORK/RETURN CODE                                       *\n*                                                                     *\n*        PROGRAM TYPE = MAINLINE                                      *\n*                                                                     *\n*               PROCESSOR = ASM                                       *\n*                                                                     *\n*               MODULE SIZE = LESS THAN 8K BYTES                      *\n*                                                                     *\n*               ATTRIBUTES = PROBLEM PROGRAM STATE                    *\n*                                                                     *\n*        ENTRY POINTS = RACFUSER                                      *\n*                                                                     *\n*               LINKAGE FROM = JCL OR CALLABLE FROM TSO               *\n*                                                                     *\n*        INPUT =                                                      *\n*                                                                     *\n*               REGISTER 1 - ADDRESS OF AN OPTIONAL PARAMETER WHICH   *\n*                            DETERMINES WHICH USERIDS ARE TO BE       *\n*                            PRINTED.                                 *\n*                                                                     *\n*        OUTPUT =                                                     *\n*                                                                     *\n*               A LIST OF USERIDS ON DDNAME, SYSPRINT                 *\n*                                                                     *\n*        EXIT - NORMAL = RETURN                                       *\n*               OUTPUT = LIST OF USERIDS                              *\n*               RETURN CODE = RC = 0                                  *\n*                                                                     *\n*        EXIT - ERROR =  NONE                                         *\n*               OUTPUT = UNPREDICTABLE                                *\n*               RETURN CODE = RC = 16                                 *\n*                                                                     *\n*        EXTERNAL REFERENCES =                                        *\n*                                                                     *\n*               ROUTINES     A. XDATEDIT - CONVERT YYDDD TO MM/DD/YY  *\n*                            B. YDATEDIT - CONVERT MM/DD/YY TO YYDDD  *\n*               DATA AREAS   A. RACFMAST - THE RACF MASTER FILE       *\n*                            B. RACFEXCL - THE USERID EXCLUDE FILE    *\n*                            C. SYSPRINT - THE OUTPUT DATA SET        *\n*               CONTROL BLOCKS  NONE                                  *\n*               TABLES          EXCLUDE TABLE IS READ FROM RACFEXCL   *\n*                                                                     *\n*        MACROS USED =                                                *\n*                  MACRO           DSNAME                             *\n*                  --------        --------------------               *\n*                   SAVE            SYS1.MACLIB                       *\n*                   RETURN          SYS1.MACLIB                       *\n*                   GETMAIN         SYS1.MACLIB                       *\n*                   FREEMAIN        SYS1.MACLIB                       *\n*                   GET             SYS1.MACLIB                       *\n*                   PUT             SYS1.MACLIB                       *\n*                   READ            SYS1.MACLIB                       *\n*                   CHECK           SYS1.MACLIB                       *\n*                   POINT           SYS1.MACLIB                       *\n*                   OPEN            SYS1.MACLIB                       *\n*                   CLOSE           SYS1.MACLIB                       *\n*                   FREEPOOL        SYS1.MACLIB                       *\n*                   TIME            SYS1.MACLIB                       *\n*                   DCB             SYS1.MACLIB                       *\n*                   DCBD            SYS1.MACLIB                       *\n*                   REGISTER        IN STREAM                         *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*   DATE    USERID              ACTIVITY                              *\n* 03/21/86 UCCCED   CUTOFF FROM THE DEVELOPMENT                       *\n* 04/03/86 UCCCED   ADD CODE TO PRINT THE THRU DATE BEGIN USED.       *\n*                                                                     *\n*        MESSAGES = SEE MESSAGES AT MSG1... AND ERR1...               *\n*                                                                     *\n*        ABEND CODES = NONE                                           *\n*                                                                     *\n*        EXAMPLE 1                                                    *\n*                                                                     *\n*    //UCCCEDR1 JOB (1310,0001),'CHUCK /  RM 1-101',                  *\n*    //             CLASS=A,                                          *\n*    //             NOTIFY=UCCCED,                                    *\n*    //             REGION=64K                                        *\n*    //             MSGCLASS=A                                        *\n*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *\n*    /*JOBPARM  L=2                                                   *\n*    //EXAMPLE1 EXEC PGM=RACFUSER,PARM='F,THRU=04/30/86'              *\n*    //***********************************************************    *\n*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *\n*    //* OUTPUT AS FOLLOWS:                                      *    *\n*    //*  F - LIST USERIDS WHICH WILL EXPIRE BEFORE THE THRUDATE *    *\n*    //*  THRU= KEYWORD PARAMETER WHICH FOLLOWS THE LIST         *    *\n*    //*        PARAMETERS AND IS OF THE FORMAT MM/DD/YY.  IT    *    *\n*    //*        CORRESPONDS WITH THE \"F\" LIST PARAMETER.         *    *\n*    //*        IF THRU IS NOT SPECIFIED, IT DEFAULTS TO THE     *    *\n*    //*        CURRENT DATE + 7.                                *    *\n*    //* FOR EXAMPLE, ALL USERIDS WHICH EXPIRE BEFORE 04/30/86   *    *\n*    //*   WILL BE LISTED.                                       *    *\n*    //***********************************************************    *\n*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *\n*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *\n*    //RACFEXCL DD DUMMY                                              *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*                                                                     *\n*        SAMPLE OUTPUT FROM EXAMPLE 1 - RUN DATE IS 04/04/86          *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* LISTING OF USERIDS FROM THE RACF DATA SET            PAGE 001       *\n*     USERID    EXPDATE      PERTINENT INFORMATION                    *\n*                                                                     *\n* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *\n* F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)                *\n*                                                                     *\n* THE ACTUAL THRU DATE BEING USED IS     04/30/86     (86120)         *\n*                                                                     *\n* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *\n*                                                                     *\n* NO USERIDS ARE BEING EXCLUDED                                       *\n*                                                                     *\n*   ** BIODWP    04/13/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*  +++ DBTBTCH   04/29/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*   ** ECOHLW    04/14/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*  +++ FRSBTCH   04/26/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        EXAMPLE 2                                                    *\n*                                                                     *\n*                                                                     *\n*    //UCCCEDR2 JOB (1310,0001),'CHUCK /  RM 1-101',                  *\n*    //             CLASS=A,                                          *\n*    //             NOTIFY=UCCCED,                                    *\n*    //             REGION=64K                                        *\n*    //             MSGCLASS=A                                        *\n*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *\n*    /*JOBPARM  L=2                                                   *\n*    //EXAMPLE2 EXEC PGM=RACFUSER,PARM='AEN'                          *\n*    //***********************************************************    *\n*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *\n*    //* OUTPUT AS FOLLOWS:                                      *    *\n*    //*  A - LIST ACTIVE USERS                                  *    *\n*    //*  E - LIST EXPIRED USERS                                 *    *\n*    //*  N - LIST USERIDS WHICH HAVE NEVER BEEN USED            *    *\n*    //***********************************************************    *\n*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *\n*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *\n*    //RACFEXCL DD DSN=MVS.SYSTEMS.PARMLIB(RACFEXCL),DISP=SHR  *****  *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*    //                                                               *\n*                                                                     *\n*        CONTENTS OF MVS.SYSTEMS.PARMLIB(RACFEXCL)                    *\n*                                                                     *\n*    * THIS IS A COMMENT                                              *\n*    * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                      *\n*    TSO001                                                           *\n*    TSO002                                                           *\n*    CSC099                                                           *\n*    CIS001                                                           *\n*    * END OF THE EXCLUDE LIST                                        *\n*                                                                     *\n*        SAMPLE OUTPUT FROM EXAMPLE 2 - DATE OF RUN IS 04/04/86       *\n*                                                                     *\n***********************************************************************\n* LISTING OF USERIDS FROM THE RACF DATA SET           PAGE 001        *\n*     USERID    EXPDATE      PERTINENT INFORMATION                    *\n*                                                                     *\n* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *\n* A (CURRENTLY ACTIVE)                                                *\n* E (PASSWORD CURRENTLY EXPIRED)                                      *\n* N (NEVER USED AS A LOGON ID)                                        *\n*                                                                     *\n* *****                                                               *\n*                                                                     *\n* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *\n* * THIS IS A COMMENT                                                 *\n* * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                         *\n* TSO001                                                              *\n* TSO002                                                              *\n* CSC099                                                              *\n* CIS001                                                              *\n* * END OF THE EXCLUDE LIST                                           *\n*                                                                     *\n*    * ASFRRK    03/11/86   PASSWORD IS CURRENTLY EXPIRED.            *\n*      CISWHH    08/20/86   USERID WILL REMAIN ACTIVE AFTER THRUDATE. *\n*    * CIS002     - NA -    USERID HAS NEVER BEEN USED.               *\n*    * CIS003     - NA -    USERID HAS NEVER BEEN USED.               *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*   THE FOLLOWING COMMAND PROCEDURE MAY BE USED UNDER TSO TO LIST     *\n*   THE USERIDS WHOSE PASSWORD WILL EXPIRE BEFORE THE THRU DATE.      *\n*                                                                     *\n*        PROC 1 THRUDATE  DEBUG                                       *\n*        /* THRUDATE MUST BE SPECIFIED AS \"MM/DD/YY\".    */           *\n*        IF &DEBUG = DEBUG                  -                         *\n*             THEN DO                                                 *\n*                  CONTROL LIST   MSG                                 *\n*                  END                                                *\n*             ELSE DO                                                 *\n*                  CONTROL NOLIST NOMSG                               *\n*                  END                                                *\n*        FREE F(RACFMAST SYSPRINT RACFEXCL)                           *\n*        ALLOC F(RACFMAST) DS('SYS1.RACF.MASTER') SHR                 *\n*        ALLOC F(RACFEXCL) DUMMY                                      *\n*        ALLOC F(SYSPRINT) DS(*)                                      *\n*        CALL 'MVS.SYSTEMS.LINKLIB(RACFUSER)' 'F,THRU=&THRUDATE.'     *\n*                                                                     *\n***********************************************************************\n* END OF DOCUMENTATION SECTION.                                       *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         TITLE 'HOUSEKEEPING'\n         PRINT GEN\nRACFUSER CSECT\n         SAVE  (14,12),,RACFUSER.&SYSDATE..&SYSTIME\n         LR    R11,R15            LOAD THE FIRST BASE REGISTER\n         USING RACFUSER,R11,R12   TELL ASM\n         LR    R3,R1              SAVE PARM ADDRESS\n         LR    R12,R11            SET UP THE SECOND BASE REGISTER\n         LA    R12,4095(R12)       REGISTER AT 4096 PAST THE\n         LA    R12,1(R12)          FIRST BASE REGISTER.\n         LA    R0,SAVEALEN        GET THE LENGTH FOR THE GETMAIN\n         GETMAIN R,LV=(R0)        GETMAIN THE WORK/SAVE AREA\n         USING SAVEAREA,R1        TEMPORARILY ADDRESS IT\n         ST    R13,REGSAVE+4      SET UP BACKWARD POINTER\n         LR    R2,R13             DUP OLD SAVEAREA\n         LA    R13,SAVEAREA       POINT TO NEW AREA\n         ST    R13,8(R2)          SET UP FORWARD POINTER IN OLD AREA\n         DROP  R1\n         USING SAVEAREA,R13       PERMANENT WORK/SAVE AREA\n         ST    R3,PARMADDR        STORE THE ADDRESS OF THE INPUT PARM\n* -ESTABLISH DSECT ADDRESSABILITY ----------------------------------*\n         USING IHADCB,R9          ADDRESS THE RACFMAST DSECT\n         TITLE 'MAIN PROGRAM BODY'\n        BAL   R10,PROLOGUE       INITIALIZE ROUTINE\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,OPENALL        OPEN THE FILES\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PRTHEAD        PRODUCE THE HEADER\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCPARM       PROCESS THE INPUT PARM\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCEXC1       PROCESS THE EXCLUDE TABLE\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF ICB BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE RACF HEADER BLOCK (ICB)\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCICB        PROCESS THE DATA IN THE ICB\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         MVC   RBA(6),CEDSSRBA    SET RBA FOR INDEX SEQUENCE SET\n         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCINDX       PROCESS THE DATA IN THE SEQ SET INDEX\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCSTAT       TELL THE NUMBER OF USERS\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,CLOSEALL       CLOSE THE FILES\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,EPILOGUE       PREPARE FOR THE SHUTDOWN\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         XR    R15,R15            CLEAR THE RETURN CODE\n         B     ENDJOB             WE ARE FINISHED.\n         TITLE 'ERROR HANDLERS'\nERRGENRL DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR1L),ERR1   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERRINDEX DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR2L),ERR2   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERR3PROF DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR3L),ERR3   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERR4PROF DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR3L),ERR4   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nENDJOB   DS    0H\n         LA    R0,SAVEALEN        GET THE LENGTH FOR FREEMAIN\n         LR    R1,R13             GET THE ADDRESS FOR FREEMAIN\n         L     R13,REGSAVE+4      REESTABLISH PREVIOUS SAVE AREA\n         FREEMAIN R,LV=(R0),A=(R1)     FREE THE STORAGE\n         RETURN (14,12),,RC=(15)  RETURN TO YOUR SENDER\n         TITLE 'INITIALIZE KEY VARIABLES'\nPROLOGUE DS    0H                 INITIALIZE KEY VARIABLES\n         SPACE\n         LA    R0,0               LOAD BINARY ZEROES\n         ST    R0,DECB            INITIALIZE THE ECB FOR DASD READ\n         ST    R0,LINECNTR        INITIALIZE THE LINECNTR\n         ZAP   PAGECNTR(4),=PL3'+1'  INITIALIZE THE PAGE COUNTER\n         ZAP   USERCNTR(4),=PL3'+0'  INITIALIZE THE USER COUNTER\n         SPACE\n         LOAD  EPLOC=XDATEDIT     LOAD THE LOAD MODULE\n         ST    R0,XDATADDR        STORE THE ADDRESS OF THE MODULE\n         SPACE\n         TIME  DEC                GET 00YYDDDF DATE IN R1\n         MVC   CRNTPDAT(8),=XL8'0000000000000000'  ZERO FIELD OUT\n         ST    R1,CRNTPDAT+4      STORE IN LAST 4 BYTES\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         CVB   R3,CRNTPDAT        CONVERT FOR BINARY OPERATIONS\n         ST    R3,CRNTBDAT        SAVE AS BINARY\n         D     R2,=F'1000'        BREAK INTO DAY AND YEAR\n         ST    R3,CRNTYR          STORE THE QUOTIENT - THE CURRENT YEAR\n         ST    R2,CRNTDAY         STORE THE REMAINDER - THE CURRENT DAY\n* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?\n*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.\nLPYR1    XR    R2,R2              CLEAR FOR THE DIVIDE\n         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LPYR1NO            A. NO\nLPYR1YES MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     LPYR2\nLPYR1NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LPYR2\n* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?\n*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.\nLPYR2    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,CRNTYR          RELOAD THE CURRENT YEAR\n         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LPYR3              A. NO\nLPYR2NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LPYR3\n* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?\n*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.\nLPYR3    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,CRNTYR          RELOAD THE CURRENT YEAR\n         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   PTHRUDF1           A. NO\nLPYR3NO  MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366\nPTHRUDF1 L     R2,CRNTDAY         RELOAD THE CURRENT DAY\n         L     R3,CRNTYR          RELOAD THE CURRENT YR\n*      ADD 7 TO CURRENT DATE FOR DEFAULT TARGET DATE\n         LA    R2,7(R2)           FIND DAY+7\n         CL    R2,CRNTDPY         Q. DID WE OVERFLOW THE YEAR ?\n         BNH   PTHRUDF2           A. NO\n         S     R2,CRNTDPY         DETERMINE THE OVERFLOW\n         LA    R3,1(R3)           INCREMENT THE YEAR\nPTHRUDF2 ST    R3,TRGTYR          STORE THE QUOTIENT - THE TARGET YEAR\n         ST    R2,TRGTDAY         STORE THE REMAINDER - THE TARGET DAY\n         XR    R2,R2              CLEAR FOR THE MULTIPLY\n         M     R2,=F'1000'        MOVE THE YEAR OVER\n         A     R3,TRGTDAY         ADD THE DAYS BACK IN\n         CVD   R3,TRGTPDAT        STORE AS THE TARGET DATE\n         SPACE\n         OI    TRGTPDAT+7,X'0F'   MAKE TARGET     DATE UNSIGNED\n         OI    CRNTPDAT+7,X'0F'   MAKE CURRENT    DATE UNSIGNED\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'OPEN ALL FILES'\nOPENALL  DS    0H                 OPEN THE PROCESSING FILES\n         LA    R9,RACFMAST        LOAD DCB ADDRESS\n         SPACE\n         OPEN  ((R9),INPUT)       OPEN RACF MASTER DATA SET\n         SPACE 3\n         OPEN  (RACFEXCL,INPUT)   OPEN EXCLUDE TABLE FILE\n         SPACE 3\n         OPEN  (SYSPRINT,OUTPUT)  OPEN OUTPUT TO THE PRINTER\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE PARM'\nPROCPARM DS    0H                 PROCESS THE PARM FIELDS\n         SPACE 1\n         ST    R10,SAVEPARM       SAVE R10\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG7L),MSG7   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVI   PARMFLAG,X'00'     INITIALIZE THE PARM FLAGS\n         L     R2,PARMADDR        LOAD ADDRESS PARM FIELD ADDRESS\n         L     R2,0(R2)           LOAD ADDRESS OF THE PARM FIELD\n         USING PARMREC,R2         ADDRESS THE PARM FIELD\n         LH    R3,PARMCNT         GET THE PARM COUNT\n         LTR   R3,R3              Q. DOES IT EXIST ?\n         BE    PPARMDFT           A. NO, SET THE DEFAULTS\n         LA    R4,PARMDATA        FIND THE PARM BEGINNING\nPPARML0  DS    0H\n         CLI   0(R4),C','         Q. DOES THIS START THE SECOND PART ?\n         BE    PTHRU              A. YES, PROCESS THE \",THRU=MM/DD/YY\"\n         CLC   0(5,R4),=C'THRU='  Q. DOES THIS START THE SECOND PART ?\n         BE    PTHRU1             A. YES, PROCESS THE \"THRU=MM/DD/YY\"\nPPARML1  DS    0H\n         CLI   0(R4),C'A'         Q. LIST ACTIVE USERS ?\n         BNE   PPARML2            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMA     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG8L),MSG8   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML2  DS    0H\n         CLI   0(R4),C'E'         Q. LIST EXPIRED USERS ?\n         BNE   PPARML3            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARME     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG9L),MSG9   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML3  DS    0H\n         CLI   0(R4),C'F'         Q. LIST FUTURE EXPIREES ?\n         BNE   PPARML4            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMF     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML4  DS    0H\n         CLI   0(R4),C'N'         Q. LIST NEVER ACTIVE ?\n         BNE   PPARML5            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMN     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG11L),MSG11 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML5  LA    R4,1(R4)           INCREMENT POINTER\n         BCT   R3,PPARML0         LOOP UNTIL NO MORE DATA\n         B     PPARMEND\n         SPACE\nPTHRU    DS    0H                 PROCESS THE \",THRU=MM/DD/YY\" KEYWORD\n         CL    R3,=F'14'          Q. ARE THERE ENOUGH CHARACTERS ?\n         BL    PTHRUDFT           A. NO, USE THE DEFAULT\n         LA    R4,1(R4)           INCREMENT PAST THE COMMA\n         B     PTHRU2             LET HIM THRU\nPTHRU1   DS    0H                 PROCESS THE \"THRU=MM/DD/YY\" KEYWORD\n         CL    R3,=F'13'          Q. ARE THERE ENOUGH CHARACTERS ?\n         BL    PTHRUDFT           A. NO, USE THE DEFAULT\nPTHRU2   CLC   0(5,R4),=C'THRU='  Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         CLI   7(R4),C'/'         Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         CLI   10(R4),C'/'        Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         MVC   YDATEWRK(8),5(R4)  MOVE IT TO THE WORK AREA\n* CONVERT THE PARM DATE TO JULIAN\n         LA    R1,YDATEWRK        ADDRESS OF THE YDATEDIT WORK AREA\n         ST    R1,YDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    YDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,YDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         LINK  EP=YDATEDIT        LINK TO YDATEDIT\n         LTR   R15,R15            Q. WAS RETURN CODE GOOD?\n         BE    PTHRU01            A. YES, DATE WAS CONVERTED\n         B     PTHRUDFT           USE THRU DEFAULTS\n         SPACE\nPTHRU01  DS    0H                 SET UP THE RESULTS\n         MVC   TRGTPDAT(8),YDATEWRK MOVE IN RETURNED VALUE\n         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?\n         BO    PPARMEND           A. YES, CONTINUE\n         OI    PARMFLAG,PARMF     NO, BUT HE GOT IT ANYHOW\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG15L),MSG15 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE 2\nPPARMDFT MVI   PARMFLAG,PARMF     DEFAULT IS TO LIST FUTURE EXPIREES\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE\nPTHRUDFT DS    0H                 USE THRU DEFAULTS\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG16L),MSG16 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG17L),MSG17 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE\nPPARMEND DS    0H\n         CLI   PARMFLAG,X'00'     Q. ANY PARM SET ?\n         BE    PPARMDFT           A. NO, FORCE THE DEFAULTS\n         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?\n         BNO   PPARMEN2           A. NO, SKIP THE CHECK\n         CLC   TRGTPDAT(8),=XL8'0000000000000000' Q. TRGTPDAT SET ?\n         BNE   PPARMEN1           A. YES, CONTINUE\n         B     PTHRUDFT           SET UP THE DEFAULT TRGTPDAT\nPPARMEN1 DS    0H               CONVERT THRU DATE AND TELL THE USER\n         MVC   XDATEWRK(8),TRGTPDAT  MOVE THE THRU DATE\n         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA\n         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE\n         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         SPACE 1\n         MVC   DATA6(DATA6LEN),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA6MSG(MSG18L),MSG18    MOVE IN THE MESSAGE\n         MVC   DATA6MDY(8),XDATEWRK      MOVE IN THE MM/DD/YY\n         MVI   DATA6BP,C'('              MOVE BEGINNING PARENTHESIS\n         UNPK  DATA6JOU(5),TRGTPDAT+5(3) MOVE IN THE YYDDD\n         OI    DATA6JOU+4,X'F0'          MAKE IT EBCDIC\n         MVI   DATA6EP,C')'              MOVE ENDING PARENTHESIS\n         MVC   LINE(LINELEN),DATA6       MOVE IT TO THE PRINT RECORD\n         BAL   R10,PRTLINE               PRINT A BLANK LINE\n         SPACE 1\nPPARMEN2 DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         XR    R15,R15            SET THE RETURN CODE\n         L     R10,SAVEPARM       RELOAD R10\n         BR    R10                RETURN\n         TITLE 'LOAD THE EXCLUDE TABLE'\nPROCEXC1 DS    0H                 LOAD THE EXCLUDE TABLE\n         SPACE 3\n         ST    R10,SAVEEXC1       SAVE R10\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG12L),MSG12 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         XR    R4,R4              CLEAR FOR A DIVIDE\n         LA    R5,EXCTABLN        GET TABLE SIZE\n         D     R4,=F'8'           FIND NUMBER OF ENTRIES\n         ST    R5,EXCTBMAX        STORE IT\n         LA    R2,8               LENGTH OF EACH TABLE ENTRY\n         LA    R3,EXCTABLE+EXCTABLN-8   END OF THE TABLE LESS 8\n         LA    R4,0               EXCLUDE TABLE ENTRY COUNTER\n         LA    R5,EXCTABLE        ADDRESS OF THE EXCLUDE TABLE\n         SPACE\nPEXC101  DS    0H\n         GET   RACFEXCL,DATA3     INPUT AN EXCLUDE RECORD\n         MVC   LINE+1(LINELEN-1),DATA3   MOVE TO AN OUTPUT BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         CLI   DATA4STR,C'*'      Q. IS THIS A COMMENT ?\n         BE    PEXC101            Q. YES, SKIP IT\n         MVC   0(8,R5),DATA3UID   MOVE IN THE USERID TO BE EXCLUDED\n         SPACE\nPEXC102  DS    0H                 ADD THE ENTRY\n         LA    R4,1(R4)           ENCREMENT THE COUNTER\n         CL    R4,EXCTBMAX        Q. HAS MAX SIZE BEEN EXCLUDED ?\n         BH    PEXC103            A. YES, TELL THE USER\n         BXLE  R5,R2,PEXC101      R3 IS THE COMPARE VALUE\n         B     PEXC104            THAT'S ALL FOLKS.\n         SPACE\nPEXC103  DS    0H                 ERROR ENDING\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(ERR5L),ERR5   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         L     R10,SAVEPARM       RESTORE IT\n         LA    R15,8              SET A BAD RETURN CODE\n         BR    R10                RETURN\n         SPACE\nPEXC104  DS    0H                 NORMAL RETURN\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         ST    R4,EXCTBCNT        STORE THE ENTRY COUNT\n         CL    R4,=F'0'           Q. ANY ENTRIES ?\n         BNE   PEXC105            A. AT LEAST ONE.\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG13L),MSG13 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\nPEXC105  DS    0H                 NORMAL RETURN\n         L     R10,SAVEEXC1       RESTORE IT\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE 3\n         TITLE 'SEARCH THE EXCLUDE TABLE'\n* THIS LOGIC SEARCHES THE EXCLUDE TABLE TO SEE IF THE USERID IS THERE.\n* IF USERID IS NOT TO BE EXCLUDED, RC=0 IS RETURNED.\n* IF USERID IS     TO BE EXCLUDED, RC=8 IS RETURNED.\nPROCEXC2 DS    0H                 SEARCH THE EXCLUDE TABLE\n         LA    R1,EXCTABLE        LOAD TABLE ADDRESS\n         L     R2,EXCTBCNT        GET THE NUMBER OF ENTRIES\n         LTR   R2,R2              Q. DO WE HAVE ZERO ENTRIES ?\n         BE    PEXC203            A. YES, BYPASS SEARCH\nPEXC201  DS    0H                 BEGIN LOOP\n         CLC   0(8,R1),PRFNAME    Q. IS USERID IN THE TABLE\n         BE    PEXC204            A. YES THIS IS IT\n         LA    R1,8(R1)           INCREMENT TO THE NEXT ENTRY\n         BCT   R2,PEXC201         CONTINUE SEARCH\n         SPACE\nPEXC203  DS    0H                 DO NOT EXCLUDE THE USERID\n         LA    R15,0              SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\nPEXC204  DS    0H                 DO     EXCLUDE THE USERID\n         LA    R15,8              SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'CODE TO READ THE NEXT RACF MASTER BLOCK'\nREADNEXT DS    0H\n         SPACE\n* R3 CONTAINS ADDRESS OF INPUT BUFFER\n* R9 CONTAINS ADDRESS OF DCB\n         SPACE\n         MVI   DECB,X'00'         CLEAR THE ECB\n         LA    R4,1024            LENGTH OF LOGICAL RECORD\n         SPACE\n         READ  DECB,SF,(R9),(R3),(R4)\n         SPACE 3\n         CHECK DECB\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE SEQUENCE SET INDEX'\nPROCINDX DS    0H\n         SPACE\n         ST    R10,SAVEINDX       SAVE R10\n* R7 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK\n         SPACE\n         USING INDXHREC,R7        ADDRESS THE INDEX HEADER FIELDS\nPINDX01  XR    R2,R2              CLEAR FOR THE DIVIDE\n         LH    R3,DCBLRECL        LOAD THE LRECL\n         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...\n         AR    R7,R3              ADD THE OFFSET TO THE BEGINNING\n         A     R7,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING\n         SPACE\n         CLI   INDXHID,HEX8A      Q. IS THIS  THE INDEX BLOCK ID\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         CLI   INDXHI2,HEX4E      Q. IS THIS  THE INDEX BLOCK ID\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         CLI   INDXHILN,HEX01     Q. IS THIS  INDEX LEVEL 1\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         LA    R1,RACFINDX        LOAD ADDRESS OF INDEX BUFFER\n         AH    R1,INDXHO1         ADD OFFSET TO INDEX CHAIN\n         ST    R1,ENDADRIX        ADDRESS OF SEQ SET CHAIN POINTER\n         SPACE\n         LA    R7,10(R7)          INCREMENT PAST SEQ SET HEADER\n         DROP  R7\n         USING INDXEREC,R7        ADDRESS THE INDEX ENTRY FIELDS\n         SPACE\nPINDX02  DS    0H\n         CL    R7,ENDADRIX        Q. IS THIS  THE END OF THE INDEX?\n         BH    PINDX05            A. NO, CONTINUE AS BEFORE\n         SPACE\n         CLI   INDXEID,HEX21      Q. IS THIS  A X'21' ?\n         BE    PINDX03            A. YES, LET IT PASS\n         SPACE\n         CLI   INDXEID,HEX22      Q. IS THIS  A X'22' ?\n         BE    PINDX03            A. YES, LET IT PASS\n         SPACE\n         CLI   INDXEID,HEX20      Q. IS THIS  A X'20' (CHAIN POINTER) ?\n         BE    PINDX05            A. YES, TREAT AS THE INDEX END\n         B     ERRINDEX           A. NO, PUNT\n         SPACE\nPINDX03  DS    0H                 GET AND PROCESS PROFILE\n         XR    R1,R1              CLEAR FOR THE IC\n         IC    R1,INDXELN         GET THE INDEX NAME LENGTH+3\n         LA    R1,1(R1)           INCREMENT PAST THE POINTER ID\n         AR    R7,R1              ADJUST R7 PAST THE VARIABLE NAME\n         DROP  R7\n         SPACE\n         MVC   RBA(6),0(R7)       GET THE PROFILE RBA\n         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?\n         BE    PINDX09                   A. YES, QUIT INDEX\n         SPACE\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         SPACE\n         LA    R8,RACFPROF        ADDRESS OF THE RACF PROFILE BUFFER\n         LR    R3,R8              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE PROFILE RECORD\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         SPACE\n        BAL   R10,PROCPROF       PROCESS THE PROFILE RECORD\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,6(R7)           INCREMENT PAST THE RBA\n         SPACE\n         B     PINDX02            RETURN TO THE TOP OF THE LOOP\n         SPACE\nPINDX05  DS    0H                 PROCESS INDEX CHAIN\n         USING INDXCREC,R7        ADDRESS THE INDEX CHAIN FIELDS\n         SPACE\n         CLI   INDXCPID,HEX20     Q. IS THIS  A X'20' ?\n         BNE   ERRINDEX           A. NO, WE ARE IN TROUBLE\n         SPACE\n         MVC   RBA(6),INDXCRBA    MOVE RBA OF NEXT LEVEL 1 INDX SEQ SET\n         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?\n         BE    PINDX09                   A. YES, QUIT INDEX\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n         CLC   RBA(6),RBAINDEX    Q. DO WE WANT THE CURRENT SEQ SET ?\n         BE    PINDX01            A. YES, LETS SAVE AN I/O\n        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET\n         B     PINDX01\nPINDX09  DS    0H                 RETURN TO MASTER LOOP\n         SPACE\n         L     R10,SAVEINDX       RELOAD\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE PROFILE'\nPROCPROF DS    0H\n         SPACE\n         ST    R10,SAVEPROF       SAVEPROF IS USED BY PROFILE PROCESS\n* R8 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK\n         SPACE\n         USING PROFHREC,R8        ADDRESS THE PROFILE HEADER FIELDS\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         LH    R3,DCBLRECL        LOAD THE LRECL\n         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...\n         AR    R8,R3              ADD THE OFFSET TO THE BEGINNING\n         A     R8,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING\n         SPACE\n         CLI   PROFRID,HEX82      Q. IS THIS  THE PROFILE HEADER\n         BNE   ERR3PROF           A. NO, PUNT\n         SPACE\n         XR    R1,R1              CLEAR FOR THE IC\n         IC    R1,PROFNLEN        GET THE PROFILE NAME LENGTH\n         BCTR  R1,0               DECREMENT THE LENGTH FOR EX\n         LTR   R1,R1              Q. IS THE LENGTH POSITIVE ?\n         BNH   ERR4PROF           A. NO, PUNT\n         CL    R1,=F'8'           Q. IS THE LENGTH TOO LONG\n         BL    PPROF01            A. NO, CONTINUE\n         LA    R1,7               SET LENGTH TO (MAX-1)\nPPROF01  MVC   PRFNAME(8),=CL8' ' CLEAR THE RECEIVING FIELD\n         EX    R1,MOVEPFN         MOVE THE PROFILE NAME\n         SPACE\n         LA    R2,7(R1)           ADJUST PAST THE NAME - KEEP R1\n         AR    R8,R2              ADJUST THE BASE REGISTER\n         SPACE\n         USING PROFEREC,R8        USE GOOD CODING TECHNIQUES\n         CLI   PROFENT,HEX02      Q. IS THIS A USER ENTITY\n         BNE   PPROF10            A. NO, SKIP IT\n         SPACE 3\n         AP    USERCNTR(4),=PL3'+1'   INCREMENT NUMBER OF USERS\n         SPACE 3\n        BAL   R10,PROCEXC2        CHECK THE EXCLUSION TABLE\n          LTR   R15,R15           Q. IS THIS A USERID TO BE EXCLUDED ?\n          BNE   PPROF10           A. YES, SKIP IT\n         SPACE\n         ZAP   PSWDPDAT(8),PROFPDAT(3)  MOVE IN THE LAST CHANGED FIELD\n         CLC   PSWDPDAT+5(3),=XL3'00000C' Q. HAS PW EVER BEEN UPDATED ?\n         BE    PPROF09                    A. NO, TELL DATA CONTROL\n         CLC   PSWDPDAT+5(3),=XL3'00000F' Q. HAS PW EVER BEEN UPDATED ?\n         BE    PPROF09                    A. NO, TELL DATA CONTROL\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         CVB   R3,PSWDPDAT        CONVERT FOR BINARY OPERATIONS\n         ST    R3,PSWDBDAT        SAVE AS BINARY\n         D     R2,=F'1000'        BREAK INTO DAY AND YEAR\n         ST    R3,PSWDYR          STORE THE QUOTIENT - THE YEAR\n         ST    R2,PSWDDAY         STORE THE REMAINDER - THE DAY\n* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?\n*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.\nLEAP1    XR    R2,R2              CLEAR FOR THE DIVIDE\n         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LEAP1NO            A. NO\nLEAP1YES MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     LEAP2\nLEAP1NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LEAP2\n* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?\n*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.\nLEAP2    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,PSWDYR          RELOAD THE YEAR\n         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LEAP3              A. NO\nLEAP2NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LEAP3\n* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?\n*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.\nLEAP3    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,PSWDYR          RELOAD THE YEAR\n         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   PPROF02            A. NO\nLEAP3NO  MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     PPROF02\nPPROF02  DS    0H\n* BEGIN DATE CALCULATIONS\n*   1. ADD PSWD INTERVAL TO DATE LAST CHANGED FOR EXPIRATION DATE\n*   2. CONVERT DATES BACK TO PACKED DECIMAL\n         SPACE\n         XR    R1,R1              CLEAR FOR IC\n         IC    R1,PROFPINT        LOAD THE PASSWORD INTERVAL\n         L     R2,PSWDDAY         FIND DAY  PSWD LAST CHANGED\n         L     R3,PSWDYR          FIND YEAR PSWD LAST CHANGED\n         AR    R2,R1              ADD THE PASSWORD INTERVAL\n         CL    R2,PSWDDPY         Q. DID WE OVERFLOW THE YEAR ?\n         BNH   EXPDOKAY           A. NO\n         S     R2,PSWDDPY         DETERMINE THE OVERFLOW\n         LA    R3,1(R3)           INCREMENT THE YEAR\nEXPDOKAY ST    R3,EXPDYR          STORE THE QUOTIENT - THE EXPIRED YEAR\n         ST    R2,EXPDDAY         STORE THE REMAINDER - THE EXPIRE  DAY\n         XR    R2,R2              CLEAR FOR THE MULTIPLY\n         M     R2,=F'1000'        MOVE THE YEAR OVER\n         A     R3,EXPDDAY         ADD THE DAYS BACK IN\n         CVD   R3,EXPDPDAT        STORE AS THE EXPIRED DATE\n* ENSURE THE SIGNS ARE ALL THE SAME\n         OI    EXPDPDAT+7,X'0F'   MAKE EXPIRATION DATE UNSIGNED\n* CONVERT THE DATES\n         MVC   XDATEWRK(8),EXPDPDAT  MOVE THE EXP DATE\n         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA\n         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE\n         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY\n         LTR   R15,R15            Q. WAS RETURN CODE GOOD?\n         BE    XDATGOOD           A. YES, DATE WAS CONVERTED\nXDATBAD  DS    0H         ACTUALLY THIS IS A BRANCH POINT FOR TEST\n* COMPARE THE DATES\nXDATGOOD CLC   EXPDPDAT(8),TRGTPDAT  Q. IS USER ALIVE AND ACTIVE\n         BH    PPROF06            A. LOOK LIKE IT - IGNORE IT\n         CLC   EXPDPDAT(8),CRNTPDAT  Q. WILL USER EXPIRE THIS WEEK ?\n         BH    PPROF07            A. LOOKS LIKE IT - TELL DATA CONTROL\n         B     PPROF08            USER ALREADY HAS EXPIRED\n         SPACE\nPPROF06  DS    0H                 ACTIVE USERS\n         TM    PARMFLAG,PARMA     Q. LIST ACTIVE USERS ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDGOOD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG6L),MSG6   ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF07  DS    0H                 FUTURE EXPIREES\n         TM    PARMFLAG,PARMF     Q. LIST FUTURE EXPIREES ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),ID2EXP    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG5L),MSG5   ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE\n* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR\n* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION\n* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.\n         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?\n         BNE   PPROF07A                  A. NO, NO SPECIAL FLAG\n         MVC   DATA1FLG(DATA1FLL),IDBTCH    SET EXPIRED FLAG\nPPROF07A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF08  DS    0H                 CURRENTLY EXPIRED\n         TM    PARMFLAG,PARME     Q. LIST CURRENTLY EXPIRED ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG4L),MSG4  ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE\n* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR\n* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION\n* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.\n         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?\n         BNE   PPROF08A                  A. NO, NO SPECIAL FLAG\n         MVC   DATA1FLG(DATA1FLL),IDEBTCH   SET EXPIRED FLAG\nPPROF08A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF09  DS    0H                 NEVER USED\n         TM    PARMFLAG,PARMN     Q. LIST NEVER USED ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG3L),MSG3 ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),=CL8' - NA - ' MOVE IN NOT APPLICABLE\n         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF10  DS    0H\n         L     R10,SAVEPROF       RELOAD R10\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         USING PROFHREC,R8\nMOVEPFN  MVC   PRFNAME(*-*),PROFNAME  MOVE THE PROFILE NAME IN\n         DROP  R8\n         TITLE 'PROCESS THE RACF DATA SET HEADER'\nPROCICB  DS    0H                 PROCESS THE ICB\n         SPACE\n* R7 CONTAINS FIRST THE ADDRESS OF THE ICB AND THEN THE SEQ SET ADDR\n         SPACE\n         USING ICBREC,R7          ADDRESS THE ICB FIELDS\n         MVC   CEDSSRBA(6),ICISSRBA  MOVE THE INDEX SEQ SET    RBA\n         SPACE\n         DROP  R7\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'CLOSE ALL OPEN DATA SETS'\nCLOSEALL DS    0H                 CLOSE ALL FILES\n         SPACE\n         CLOSE ((R9))             CLOSE RACF MASTER DATA SET\n         SPACE 3\n         FREEPOOL  (R9)           FREE THE FILE BUFFERS\n         SPACE 3\n         CLOSE (RACFEXCL)         CLOSE EXCLUDE TABLE FIEL\n         SPACE 3\n         FREEPOOL  RACFEXCL       FREE THE EXCLUDE BUFFERS\n         SPACE 3\n         CLOSE (SYSPRINT)         CLOSE PRINT FILE\n         SPACE 3\n         FREEPOOL  SYSPRINT       FREE THE PRINTER BUFFERS\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PRINT RACF DATA SET STATISTICS'\nPROCSTAT DS    0H                 PRINT THE STATISTICS\n         ST    R10,SAVESTAT       SAVE RETURN ADDRESS\n         SPACE\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         SPACE\n         MVC   DATA5(DATA5LEN),=CL80' ' SPACE OUT THE BUFFER\n         MVC   DATA5MSG(MSG14L),MSG14    MOVE IN A MESSAGE\n         UNPK  DATA5CNT+1(4),USERCNTR+2(2) UNPK THE USER COUNTER\n         OI    DATA5CNT+4,X'F0'   MAKE IT EBCDIC\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         MVC   LINE(LINELEN),DATA5 MOVE IN THE TEXT\n         BAL   R10,PRTLINE        PRINT IT\n         SPACE\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         L     R10,SAVESTAT       RESTORE THE RETURN ADDRESS\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         TITLE 'PRINT THE CONTENTS OF LINE'\nPRTLINE  DS    0H                 WRITE A NEW DETAIL LINE\n         ST    R10,SAVEPRT        SAVE RETURN ADDRESS\n         SPACE\nPRTLINE1 L     R0,LINECNTR        LOAD THE LINE COUNTER\n         A     R0,=F'1'           INCREMENT\n         ST    R0,LINECNTR        STORE IT\n         CL    R0,LPP             Q. HAVE WE EXCEEDED LINES PER PAGE\n         BL    PRTLINE3           A. NO\nPRTLINE2 DS    0H\n         BAL   R10,PRTHEAD        PRODUCE THE HEADER\n         SPACE 3\nPRTLINE3 PUT   SYSPRINT,LINE      WRITE NEXT LINE\n         SPACE 3\n         L     R10,SAVEPRT        RESTORE THE RETURN ADDRESS\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PRINT A NEW HEADER'\nPRTHEAD  DS    0H                 WRITE THE PAGE HEADING\n         SPACE\n         LA    R0,2               LOAD A BINARY ZERO\n         ST    R0,LINECNTR        CLEAR THE LINE COUNTER\n         SPACE\n         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER\n         UNPK  DATA2PAG(3),PAGECNTR+2(2) UNPK THE PAGE COUNTER\n         OI    DATA2PAG+2,X'F0'   MAKE IT EBCDIC\n         MVC   DATA2TTL(6),=C' PAGE ' GIVE IT A HEADER\n         SPACE\n         MVC   DATA2MSG(MSG1L),MSG1  MOVE THE MESSAGE IN\n         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE\n         SPACE\n         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER\n         MVC   DATA2MSG(MSG2L),MSG2  MOVE THE MESSAGE IN\n         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE\n         SPACE 3\n         AP    PAGECNTR(4),=PL3'+1'   INCREMENT IT\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PREPARE FOR THE SHUTDOWN'\nEPILOGUE DS    0H                 INITIALIZE KEY VARIABLES\n         SPACE\n         DELETE EPLOC=XDATEDIT    DELETE THE LOAD MODULE\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         TITLE 'LOGIC TO CONVERT AN RBA TO TTR AND ISSUE POINT'\nPOINT    DS    0H\n**********************************************************************\n* THIS ROUTINE IS A GENERAL PURPOSE ROUTINE WHICH HAS BEEN USED HERE *\n* IN THIS PROGRAM.  FOR INSTANCE, THE NEXT SECTION OF CODE COMPUTES  *\n* THE NUMBER OF LOGICAL RECORDS PER BLOCK; HOWEVER IN OUR READING OF *\n* THE RACF MASTER FILE, WE KNOW THE FILE IS BLOCKED 1 RECORD PER     *\n* BLOCK. STILL I FEEL THAT A GENERAL PURPOSE ROUTINE IS BETTER IN    *\n* THE LONG RUN.                                                      *\n**********************************************************************\n*--------------------------------------------------------------------*\n* ---------COMPUTE A= RECORDS PER BLOCK-------------------------------*\n*--------------------------------------------------------------------*\n         XR    R2,R2              CLEAR FOR DIVIDE\n         LH    R3,DCBBLKSI        LOAD THE BLOCKSIZE\n         LH    R4,DCBLRECL        LOAD THE LRECL\n         DR    R2,R4              GET NUM OF RECORDS PER BLOCK\n         LTR   R2,R2              WAS REMAINDER ZERO\n         BNE   ERRGENRL           IF NOT, TELL USER\n         ST    R3,RECBLK          STORE FOR LATER USE\n* ---------COMPUTE B = Q--RELATIVE BLOCK FROM BEGINNING OF DS---------*\n* ---------            R--RELATIVE RECORD WITHIN THAT BLOCK-----------*\n         LH    R2,RBA             R2 WILL CONTAIN THE FULL\n         L     R3,RBA+2             SIX BYTE RELATIVE BYTE ADDRESS\n         LH    R4,DCBLRECL        LOAD THE LRECL\n         DR    R2,R4              COMPUTE THE RELATIVE RECORD NUMBER\n         ST    R2,RBAOFF          SAVE OFFSET FROM BEGINNING OF RECORD\n         XR    R2,R2              CLEAR FOR DIVIDE\n         D     R2,RECBLK          COMPUTE WHICH BLOCK/RECORD\n         ST    R3,BLOCKNO         SAVE THE BLOCK NUMBER\n         ST    R2,RECNO           SAVE THE RECORD-1 NUMBER\n         TITLE 'THE DEVICE DEPENDENT BLOCK / TRACK CALCULATION'\n* ---------COMPUTE C = Q--BLOCKS PER TRACK ON THE DEVICE--------------*\n* ---------            R--NEGLIGIBLE----------------------------------*\n         SPACE 1\n         TM    DCBDEVT,DCBDV375   DEVICE=3375\n         BO    D3375              YEP\n         TM    DCBDEVT,DCBDV340   DEVICE=3340\n         BO    D3340              YEP\n         TM    DCBDEVT,DCBDV380   DEVICE=3380\n         BO    D3380              YEP\n         TM    DCBDEVT,DCBDV350   DEVICE=3350\n         BO    D3350              YEP\n         TM    DCBDEVT,DCBDV331   DEVICE=3330-1\n         BO    D3330              YEP\n         TM    DCBDEVT,DCBDV330   DEVICE=3330\n         BO    D3330              YEP\n         TM    DCBDEVT,DCBDV314   DEVICE=2314\n         BO    D2314              YEP\n         TM    DCBDEVT,DCBDV305   DEVICE=2305-2\n         BO    D23052             YEP\n         TM    DCBDEVT,DCBD1305   DEVICE=2305-1\n         BO    D23051             YEP\n         B     ERRGENRL           PROBABLY NOT FOR DASD\nD23051   XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'14568'       LOAD 2305-1 TRACK CAPACITY\n         L     R4,=F'432'         LOAD 2305-1 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD23052   XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'14858'       LOAD 2305-2 TRACK CAPACITY\n         L     R4,=F'198'         LOAD 2305-2 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD2314    XR    R2,R2              CLEAR FOR DIVIDE\n         LH    R3,DCBBLKSI        INITIALIZE W/ BLOCKSIZE\n         MH    R3,=H'534'         FIGURE SOME MULTIPLE\n         D     R2,=F'512'         FIGURE SOME QUOTIENT\n         LR    R4,R3              MOVE TO SECOND HALF\n         AH    R4,=H'101'         ADD IN SOME OVERHEAD BYTES\n         XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'7294'        LOAD THE TRACK CAPACITY\n         DR    R2,R4              COMPUTE BLOCKS/TRACK\n         ST    R3,BLKTRACK        SAVE FOR LATER USE\n         B     DEVEND             FINISH THE ROUTINE\nD3330    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'13165'       LOAD 3330 TRACK CAPACITY\n         L     R4,=F'135'         LOAD 3330 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3340    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'8535'        LOAD 3340 TRACK CAPACITY\n         L     R4,=F'167'         LOAD 3340 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3350    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'19254'       LOAD 3350 TRACK CAPACITY\n         L     R4,=F'185'         LOAD 3350 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3375    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'36000'       LOAD 3375 TRACK CAPACITY\n         L     R4,=F'415'         LOAD 3375 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3380    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'47968'       LOAD 3380 TRACK CAPACITY\n         L     R4,=F'523'         LOAD 3380 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nDEVEND   DS    0H\n         TITLE 'COMPUTE THE TTR AND ISSUE THE POINT'\n* ---------COMPUTE D = Q--BLOCKS PER TRACK ON THE DEVICE--------------*\n* ---------            R--NEGLIGIBLE----------------------------------*\nCOMPTTR  XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,BLOCKNO         RELOAD BLOCK NUMBER\n         D     R2,BLKTRACK        COMPUTE WHICH TRACK\n         LR    R0,R3              SAVE RELATIVE TRACK(BASE 0)\n         A     R2,=F'1'           INCREMENT FOR BASE 1\n         LR    R1,R2              COPY THE RELATIVE RECORD(BASE 1)\n         SLL   R1,24              LEFT JUSTIFY IN R1\n         SLDL  R0,8               SHIFT THE BYTE IN\n         SLL   R0,8               LEFT JUSTIFY IN R0\n         ST    R0,POINTTTR        STORE FOR THE POINT\n         SPACE 3\n         POINT (R9),POINTTTR      ISSUE THE MACRO\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE 3\n         TITLE 'CONSTANT AREA'\nMSG1     DC    C'1LISTING OF USERIDS FROM THE RACF DATA SET'\nMSG1L    EQU   *-MSG1\nMSG2     DC  C'     USERID    EXPDATE      PERTINENT INFORMATION'\nMSG2L    EQU   *-MSG2\nMSG3     DC  C' USERID HAS NEVER BEEN USED.'\nMSG3L    EQU   *-MSG3\nMSG4     DC  C' PASSWORD IS CURRENTLY EXPIRED.'\nMSG4L    EQU   *-MSG4\nMSG5     DC  C' PASSWORD WILL EXPIRE BEFORE THE THRU DATE'\nMSG5L    EQU   *-MSG5\nMSG6     DC    C' USERID WILL REMAIN ACTIVE AFTER THE THRU DATE.'\nMSG6L    EQU   *-MSG6\nMSG7     DC    C' THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LIX\n               STED:'\nMSG7L    EQU   *-MSG7\nMSG8     DC    C' A (PASSWORD WILL REMAIN ACTIVE AFTER THE THRU DATE)'\nMSG8L    EQU   *-MSG8\nMSG9     DC    C' E (PASSWORD IS CURRENTLY EXPIRED)'\nMSG9L    EQU   *-MSG9\nMSG10    DC    C' F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C' N (NEVER USED AS A LOGON ID)'\nMSG11L   EQU   *-MSG11\nMSG12    DC    C' THE FOLLOWING USERIDS ARE BEING EXCLUDED:'\nMSG12L   EQU   *-MSG12\nMSG13    DC    C' NO USERIDS ARE BEING EXCLUDED'\nMSG13L   EQU   *-MSG13\nMSG14    DC    C' THE TOTAL NUMBER OF RACF USERIDS READ WAS  '\nMSG14L   EQU   *-MSG14\nMSG15    DC    C' F (FUTURE EXPIRATIONS NOT REQUESTED BUT WAS FORCED)'\nMSG15L   EQU   *-MSG15\nMSG16    DC    C' AN ERROR WAS DETECTED IN THE SYNTAX OF THE THRU DATE'\nMSG16L   EQU   *-MSG16\nMSG17    DC    C' PROCESSING WILL CONTINUE WITH THE DEFAULT OF TODAY\"S X\n               DATE + 7'\nMSG17L   EQU   *-MSG17\nMSG18    DC    C' THE ACTUAL THRU DATE BEING USED IS '\nMSG18L   EQU   *-MSG18\n         SPACE\nERR1     DC    C' *** RACFUSER ABORTED - AN ERROR HAS BEEN DETECTED'\nERR1L    EQU   *-ERR1\nERR2     DC    C' *** AN ERROR OCCURRED IN THE INDEX RECORDS'\nERR2L    EQU   *-ERR2\nERR3     DC    C' *** AN INVALID PROFILE HEADER HAS BEEN DETECTED'\nERR3L    EQU   *-ERR3\nERR4     DC    C' *** AN INVALID PROFILE NAME LENGTH HAS BEEN DETECTED'\nERR4L    EQU   *-ERR4\nERR5     DC    C' *** EXCLUDE TABLE HAS BEEN EXCEEDED - PLEASE EXPAND'\nERR5L    EQU   *-ERR5\n         SPACE\nLPP      DC    F'60'              PRODUCE 60 LINES PER PAGE\nXDATEDIT DC    CL8'XDATEDIT'      CONSTANT FOR THE LOAD FOR XDATEDIT\n         SPACE\nIDGOOD   DC    CL3'   '           USERID IS CURRENTLY ACTIVE\nIDEXPD   DC    CL3'  *'           USERID IS CURRENTLY EXPIRED\nID2EXP   DC    CL3' **'           USERID WILL EXPIRE IN THE FUTURE\nIDBTCH   DC    CL3'+++'           USERID WILL EXPIRE AND IS PRODUCTION\nIDEBTCH  DC    CL3'  +'           USERID IS EXPIRED AND IS PRODUCTION\n         TITLE 'DCB FOR RACF MASTER FILE'\nRACFMAST DCB   BUFNO=1,MACRF=(RP),DSORG=PS,DEVD=DA,DDNAME=RACFMAST\n         TITLE 'DCB FOR EXCLUDE TABLE'\nRACFEXCL DCB   BUFNO=3,MACRF=(GM),DSORG=PS,DEVD=DA,DDNAME=RACFEXCL,    X\n               EODAD=PEXC104\n         TITLE 'DCB FOR LISTING OF USERS'\nSYSPRINT DCB   LRECL=80,BLKSIZE=17520,BUFNO=1,RECFM=FBA,MACRF=(PM),    X\n               DSORG=PS,DEVD=DA,DDNAME=SYSPRINT\n         TITLE 'WORK/SAVE AREA'\nSAVEAREA DSECT\nREGSAVE  DS    18F                AREA FOR REGS\nSAVEINDX DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPROF DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPRT  DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPARM DS    F                  AREA FOR R10 TEMPORARILY\nSAVEEXC1 DS    F                  AREA FOR R10 TEMPORARILY\nSAVESTAT DS    F                  AREA FOR R10 TEMPORARILY\nPARMADDR DS    F                  ADDRESS OF PARM AREA\n         SPACE\nXDATADDR DS    F                  ADDRESS OF THE LOAD MODULE\nXDATEPRM DS    F                  ADDRESS OF THE XDATEDIT WORK AREA\nXDATEWRK DS    D                  WORK AREA FOR XDATEDIT\nYDATEPRM DS    F                  ADDRESS OF THE YDATEDIT WORK AREA\nYDATEWRK DS    D                  WORK AREA FOR YDATEDIT\n         SPACE\nPSWDPDAT DS    D                  DATE PASSWORD LAST CHANGED - PACKED\nEXPDPDAT DS    D                  DATE PASSWORD EXPIRED - PACKED\nCRNTPDAT DS    D                  CURRENT DATE - PACKED\nTRGTPDAT DS    D                  TARGET EXPIRATION DATE - PACKED\n         SPACE\nPSWDBDAT DS    F                  DATE PASSWORD LAST CHANGED - BINARY\nEXPDBDAT DS    F                  DATE PASSWORD EXPIRED - BINARY\nCRNTBDAT DS    F                  CURRENT DATE - BINARY\nTRGTBDAT DS    F                  TARGET EXPIRATION DATE - BINARY\n         SPACE\nPSWDDAY  DS    F                  DAY  PORTION IN BINARY OF PSWDBDAT\nEXPDDAY  DS    F                  DAY  PORTION IN BINARY OF EXPDBDAT\nCRNTDAY  DS    F                  DAY  PORTION IN BINARY OF CRNTBDAT\nTRGTDAY  DS    F                  DAY  PORTION IN BINARY OF TRGTBDAT\n         SPACE\nPSWDYR   DS    F                  YEAR PORTION IN BINARY OF PSWDBDAT\nEXPDYR   DS    F                  YEAR PORTION IN BINARY OF EXPDBDAT\nCRNTYR   DS    F                  YEAR PORTION IN BINARY OF CRNTBDAT\nTRGTYR   DS    F                  YEAR PORTION IN BINARY OF TRGTBDAT\n         SPACE\nCRNTDPY  DS    F                  DAYS PER YEAR IN CURRENT YEAR\nPSWDDPY  DS    F                  DAYS PER YEAR WHEN PASSWORD LAST SET\nCEDSSRBA DS    CL6                RBA OF INDEX SEQUENCE SET\n         CNOP  6,8\nRBA      DS    CL6                RBA FOR THE POINT MACRO\n         CNOP  6,8\nRBAINDEX DS    CL6                RBA FOR THE CURRENT INDEX\nRBAPROF  DS    CL6                RBA FOR THE CURRENT PROFILE\nENDADRIX DS    F                  ADDRESS OF THE END OF SEQ SET INDEX\nRBAOFF   DS    F                  OFFSET TO WHERE ACTUAL DATA BEGINS\nRECBLK   DS    F                  COMPUTED NUMBER OF RECORDS/BLOCK\nBLOCKNO  DS    F                  RELATIVE BLOCK WHICH CONTAINS RBA\nRECNO    DS    F                  RELATIVE REC IN BLOCK WITH DATA\nBLKTRACK DS    F                  DEVICE DEPENDENT BLOCKS/TRACK\nPOINTTTR DS    F                  CALCULATED TTR INFO FOR POINT\nPRFNAME  DS    CL8                NAME OF THE PROFILE\n         DS    CL8                FILLER\n         SPACE 2\n*-  SYSPRINT LOGICAL RECORD-----------------------------------------*\nLINE     DS    CL80               SYSPRINT LOGICAL RECORD\nLINELEN  EQU   *-LINE             LENGTH OF LOGICAL RECORD\nLINECNTR DS    F                  LINE COUNTER\nPAGECNTR DS    PL4                PAGE COUNTER\nUSERCNTR DS    PL4                USER COUNTER\n         SPACE 2\n*-  DATA RECORD 1---------------------------------------------------*\nDATA1    DS    0CL80\n         DS    CL2                FILLER\nDATA1FLG DS    CL3                FLAG\nDATA1FLL EQU   *-DATA1FLG         LENGTH OF DATA1FLG\n         DS    CL1                FILLER\nDATA1USR DS    CL8                USERID\nDATA1USL EQU   *-DATA1USR         LENGTH OF DATA1USR\n         DS    CL2                FILLER\nDATA1EXP DS    CL8                EXPIRATION DATE\nDATA1EXL EQU   *-DATA1EXP         LENGTH OF DATA1EXP\n         DS    CL2                FILLER\nDATA1MSG DS    CL54               INFORMATIVE MESSAGE\nDATA1MSL EQU   *-DATA1MSG         LENGTH OF DATA1MSG\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR A SECOND MESSAGE\nDATA2    DS    0CL80\nDATA2MSG DS    CL70               INFORMATIVE MESSAGE\nDATA2TTL DS    CL6                FIELD TITLE\nDATA2PAG DS    CL3                PAGE NUMBER\n         DS    CL1                FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE USERID\nDATA3    DS    0CL80\nDATA3UID DS    CL8                USERID\n         DS    CL72               FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT\nDATA4    DS    0CL80\nDATA4STR DS    CL1                COMMENT\n         DS    CL79               FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT\nDATA5    DS    0CL80\nDATA5MSG DS    CL45               MESSAGE AREA\nDATA5CNT DS    CL5                NUMBER OF USERIDS\n         DS    CL30               FILLER\nDATA5LEN EQU   *-DATA5            LENGTH OF DATA1\n         ORG   DATA1    BEGIN THE REDEFINES FOR THRU DATE MESSAGE\nDATA6    DS    0CL80\nDATA6MSG DS    CL40               MESSAGE AREA\nDATA6MDY DS    CL8                DATE IN MM/DD/YY FORMAT\n         DS    CL5                FILLER\nDATA6BP  DS    CL1                BEGINNING PARENTHESIS\nDATA6JOU DS    CL5                DATE IN YYDDD    FORMAT\nDATA6EP  DS    CL1                ENDING PARENTHESIS\n         DS    CL30               FILLER\nDATA6LEN EQU   *-DATA6            LENGTH OF DATA1\nDATA1LEN EQU   *-DATA1            LENGTH OF DATA1\n         SPACE 3\nPARMFLAG DS    C                  FLAG FROM PARM INFO\nPARMA    EQU   X'01'              LIST THE USERS THAT ARE ACTIVE\nPARME    EQU   X'02'              LIST THE EXPIRED USERS\nPARMF    EQU   X'04'              LIST THE FUTURE EXPIRATIONS\nPARMN    EQU   X'08'              LIST THE NEVER USED USERS\n         SPACE 3\nRACFINDX DS    CL1024             I/O AREA FOR ICB/INDEX BLOCKS\n         SPACE\nRACFPROF DS    CL1024             I/O AREA FOR PROFILES\n         SPACE\nEXCTABLE DS    100CL8             TABLE OF EXCLUDED USERIDS\nEXCTABLN EQU   *-EXCTABLE         TABLE LENGTH\nEXCTBMAX DS    F                  MAXIMUM TABLE SIZE\nEXCTBCNT DS    F                  ACTUAL NUMBER OF TABLE ENTRIES\n         SPACE\nSAVEALEN EQU   *-SAVEAREA         LENGTH OF SAVE AREA\n         SPACE 3\n         REGISTER                 NAME THE REGISTERS\n         TITLE 'RACF ICB - LAYOUT OF KEY FIELDS'\nICBREC   DSECT                    LAYOUT OF KEY FIELDS IN THE ICB\n         DS    CL14               FILLER\nICISSRBA DS    CL6                RBA OF INDEX SEQUENCE SET\n         DS    CL1004             FILLER\n         TITLE 'RACF SEQUENCE SET RECORD - LAYOUT OF KEY FIELDS'\nHEX00    EQU   X'00'                X'00'\nHEX01    EQU   X'01'                X'01'\nHEX02    EQU   X'02'                X'02'\nHEX20    EQU   X'20'                X'20'\nHEX21    EQU   X'21'                X'21'\nHEX22    EQU   X'22'                X'22'\nHEX4E    EQU   X'4E'                X'4E'\nHEX62    EQU   X'62'                X'62'\nHEX66    EQU   X'66'                X'66'\nHEX82    EQU   X'82'                X'82'\nHEX8A    EQU   X'8A'                X'8A'\n         SPACE\nINDXHREC DSECT                    LAYOUT OF THE SEQUENCE SET HEADER\nINDXHDR  DS    0H              RECORD 1 - THE HEADER\nINDXHID  DS    C                  INDEX BLOCK IDENTIFIER (X'8A')\nINDXHLN  DS    AL2                INDEX BLOCK LENGTH     (X'0400')\nINDXHI2  DS    C                  INDEX BLOCK IDENTIFIER (X'4E')\nINDXHFI  DS    C                  FORMAT ID              (X'00')\nINDXHILN DS    C                  INDEX LEVEL NUMBER\nINDXHO1  DS    AL2                OFFSET TO SEQ SET CHAIN POINTER\nINDXHO2  DS    AL2                OFFSET TO FREE SPACE\n         SPACE\nINDXEREC DSECT                    LAYOUT OF THE INDEX ENTRY\nINDXENT  DS    0H              RECORD 2 - THE INDEX ENTRIES\nINDXEID  DS    C                  ENTRY IDENTIFIER\nINDXELN  DS    C                  ENTRY LENGTH + 3\nINDXECMP DS    C                  ENTRY FRONT-END COMPRESSION COUNT\nINDXENAM DS    CL8                ENTRY NAME - ***** VARIABLE *****\nINDXEPID DS    C                  ENTRY POINTER IDENTIFIER\nINDXERBA DS    CL6                RBA OF PROFILE\n         SPACE\nINDXCREC DSECT                    LAYOUT OF THE INDEX CHAIN POINTER\nINDXCHN  DS    0H              RECORD 3 - THE INDEX CHAIN\nINDXCPID DS    C                  CHAIN POINTER IDENTIFIER (X'20')\nINDXCPI  DS    C                  ENTRY POINTER IDENTIFIER (62 OR 66)\nINDXCRBA DS    CL6                RBA OF NEXT LEVEL 1 BLOCK\n         TITLE 'RACF PROFILE RECORD - LAYOUT OF KEY FIELDS'\nPROFHREC DSECT                    LAYOUT OF THE PROFILE HEADER\nPROFHDR  DS    0H              RECORD 1 - THE HEADER\nPROFRID  DS    C                  PROFILE RECORD IDENTIFIER\nPROFPLR  DS    AL2                PROFILE PHYSICAL RECORD LENGTH\nPROFLLR  DS    AL2                PROFILE LOGICAL  RECORD LENGTH\nPROFNLEN DS    C                  PROFILE NAME LENGTH\nPROFNAME DS    C                  PROFILE NAME\n         SPACE\nPROFEREC DSECT                    LAYOUT OF THE PROFILE ENTITY RECORD\nPROFUSER DS    0H              RECORD 2 - THE USER TEMPLATE\nPROFENT  DS    C                  PROFILE ENTYPE FOR USER (X'02')\n         DS    CL17               FILLER\nPROFPINT DS    C                  PASSWORD INTERVAL\n         DS    CL8                FILLER\nPROFPDAT DS    CL3                DATE PASSWORD LAST CHANGED\n         SPACE 3\nPARMREC  DSECT                    LAYOUT OF THE PARMETER RECORD\nPARMRECD DS    0H                 PARMETER RECORD\nPARMCNT  DS    H                  LENGTH OF THE PARM INFO\nPARMDATA DS    CL80               VERBAGE\n         SPACE 3\n         PRINT NOGEN\n         DCBD  DSORG=(BS),DEVD=DA\n         SPACE 3\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(RACFUSER),DISP=SHR,SPACE=\n//PROC02    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nXDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* XDATEDIT                                                            *\n*                                                                     *\n* FUNCTION     CONVERT DATE FROM JULIAN DATE (YYDDD) IN PACKED        *\n*              DECIMAL FORM TO MM/DD/YY IN EBCDIC.                    *\n*                                                                     *\n* DESCRIPTION  XDATEDIT IS CALLED TO CONVERT THE DATE FROM            *\n*              A PACKED DECIMAL JULIAN DATE TO MONTH, DAY,            *\n*              YEAR FORM IN EBCDIC FOR PRINTING.                      *\n*                                                                     *\n*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *\n*              MM/DD/YY FORM IN EBCDIC.  IF THE DATE IS INVALID       *\n*              IT WILL BE CONVERTED TO BYY.DDDB IN EBCDIC, WHERE      *\n*                      B    REPRESENTS A BLANK                        *\n*                      YY   REPRESENTS THE YEAR                       *\n*                      DDD  REPRESENTS THE DAY OF THE YEAR            *\n*                                                                     *\n* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *\n*              FIELD.  THE FIELD CONTAINS THE PACKED DECIMAL          *\n*              JULIAN DATE IN THE LOW ORDER 3 BYTES OF THE FIELD.     *\n*                                                                     *\n* OUTPUT       THE WORK AREA CONTAINS THE DATE IN EBCDIC FORM.        *\n*                                                                     *\n*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *\n*                      0 - VALID DATE - WORK AREA CONTAINS MM/DD/YY   *\n*                                       IN EBCDIC.                    *\n*                      4 - INVALID DATE - WORK AREA CONTAINS          *\n*                                       BYY.DDDB IN EBCDIC.           *\n*                                                                     *\n*          UPDATE HISTORY                                             *\n*                                                                     *\n*   DATE   USERID  FUNCTION PERFORMED                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         SPACE 3\nXDATEDIT CSECT\n         SAVE  (14,12),,XDATEDIT.&SYSDATE..&SYSTIME.\n         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT\n         USING XDATEDIT,R12\n         SPACE 2\n         L     R11,0(R1)               LOAD ADDR OF PARAMETER\n         MVI   0(R11),X'00'            ZERO FIRST BYTE\n         MVC   1(4,R11),0(R11)         ZERO 4 MORE BYTES\n         OI    7(R11),X'0F'            SET SIGN CODE OF LAST BYTE\n         SPACE\n         L     R2,4(0,R11)             LOAD PACKED JULIAN DATE\n         CVB   R5,0(0,R11)             CONVERT TO BINARY\n         SR    R4,R4                   CLEAR HIGH REGISTER\n         D     R4,F1000                DIVIDE BY 1000 TO GET YEAR\n         LA    R7,NORMALYR             LOAD NORMAL YEAR TABLE ADDRESS\n         LTR   R6,R5                   COPY QUOTIENT TO R6\n         BZ    CHECKDAY\n         N     R6,MASK                 SEE IF YEAR DIVISIBLE BY 4\n         BNZ   CHECKDAY\n         LA    R7,LEAPYEAR             LOAD LEAP YEAR TABLE ADDRESS\n         SPACE\nCHECKDAY LTR   R4,R4                   TEST DAY AGAINST MINIMUM\n         BZ    BADDAY\n         CH    R4,0(R7)                TEST DAY AGAINST MAXIMUM\n         BH    BADDAY\n         LA    R3,1                    INITIALIZE MONTH\n         SR    R6,R6                   CLEAR REGISTER 6\n         SPACE\nFINDMNTH IC    R6,1(R3,R7)             INSERT DAYS IN MONTH\n         CR    R4,R6                   COMPARE AGAINST DAYS LEFT\n         BNH   GOTMONTH\n         SR    R4,R6                   SUBTRACT FROM DAYS LEFT\n         LA    R3,1(R3)                INCREMENT MONTH\n         B     FINDMNTH                LOOP BACK\n         SPACE\nGOTMONTH MH    R3,H1000                MULTIPLY MONTH BY 1000      MM00\n         AR    R3,R4                   ADD DAY                     MMDD\n         MH    R3,H1000                MULTIPLY BY 1000          MMDD00\n         AR    R3,R5                   ADD YEAR                  MMDDYY\n         CVD   R3,0(0,R11)             CONVERT TO DECIMAL\n         MVC   0(5,R11),3(R11)         LEFT JUSTIFY\n         UNPK  0(8,R11),0(5,R11)       UNPACK\n         OI    7(R11),X'F0'            SET SIGN CODE\n         MVI   2(R11),C'/'             ADD /\n         MVI   5(R11),C'/'             ADD /\n         SPACE\n         XR    R15,R15                 CLEAR RETURN CODE\nRETURN   RETURN (14,12),,RC=(15)       RETURN\n         SPACE 3\nBADDAY   ST    R2,0(0,R11)             STORE ORIGINAL DATA\n         UNPK  2(5,R11),1(3,R11)       UNPACK\n         MVC   1(2,R11),2(R11)         SLIDE YR TO MAKE ROOM FOR .\n         MVI   0(R11),C' '             ADD BLANK\n         MVI   3(R11),C'.'             ADD .\n         MVI   7(R11),C' '             ADD BLANK\n         LA    R15,4                   SET RETURN CODE\n         B     RETURN                  RETURN\n         TITLE 'CONSTANTS AND LITERALS'\nNORMALYR DC    H'365'\n         DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nLEAPYEAR DC    H'366'\n         DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nF1000    DC    F'1000'\nH1000    EQU   F1000+2\n         DS    1F\nMASK     DC    X'00000003'\n         SPACE 3\n         LTORG\n         TITLE 'REGISTERS'\n         REGISTER\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(XDATEDIT),DISP=SHR,SPACE=\n//PROC03    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nYDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* YDATEDIT                                                            *\n*                                                                     *\n* FUNCTION     CONVERT DATE FROM MM/DD/YY IN EBCDIC TO JULIAN DATE    *\n*              (YYDDD) IN PACKED DECIMAL FORM.                        *\n*                                                                     *\n* DESCRIPTION  YDATEDIT IS CALLED TO CONVERT THE DATE FROM MONTH,     *\n*              DAY, YEAR FORM IN EBCDIC TO A PACKED DECIMAL JULIAN    *\n*              DATE.  THIS IS USEFUL WHEN THE DATE IS READ IN OR      *\n*              IS ENTERED VIA A PARM FIELD.                           *\n*                                                                     *\n*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *\n*              YYDDDC FORM.  IF THE DATE IS INVALID, IT WILL NOT BE   *\n*              MODIFIED.                                              *\n*                                                                     *\n* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *\n*              FIELD WHICH CONTAINS THE MM/DD/YY FORM OF THE DATE.    *\n*                                                                     *\n* OUTPUT       THE WORK AREA CONTAINS THE DATE IN PACKED DECIMAL      *\n*              JULIAN FORMAT WITH A POSITIVE SIGN.                    *\n*                                                                     *\n*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *\n*                      0 - VALID DATE - WORK AREA CONTAINS YYDDDC     *\n*                      4 - INVALID DATE - WORK AREA WAS NOT MODIFIED  *\n*                                                                     *\n* PROGRAM COMMENTS - NONE                                             *\n*                                                                     *\n*          UPDATE HISTORY                                             *\n*                                                                     *\n*   DATE   USERID  FUNCTION PERFORMED                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         SPACE 3\nYDATEDIT CSECT\n         SAVE  (14,12),,YDATEDIT.&SYSDATE..&SYSTIME.\n         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT\n         USING YDATEDIT,R12\n         SPACE 2\n         L     R11,0(R1)               LOAD ADDR OF PARAMETER\n         SPACE\nCHKSLASH DS    0H                      CHECK DATE FORMAT\n         CLI   2(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?\n         BNE   BADDATE                 A. NO, MISSING '/'\n         CLI   5(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?\n         BNE   BADDATE                 A. NO, MISSING '/'\nMOVEDATE DS    0H                      MOVE TO REGISTERS\n         XR    R2,R2                   CLEAR THE REGISTER\n         XR    R3,R3                   CLEAR THE REGISTER\n         ICM   R2,3,0(R11)             PUT THE EBCDIC MONTH IN R2\n         ICM   R3,3,3(R11)             PUT THE EBCDIC DAY   IN R3\n*\n         MVC   0(4,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         PACK  0(2,R11),6(2,R11)       MAKE THE YEAR PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R4,0(R11)               GET THE BINARY YEAR IN R4\n*\n         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         ST    R3,4(R11)               RETURN THE EBCDIC DAY\n         PACK  0(2,R11),6(2,R11)       MAKE THE DAY  PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R5,0(R11)               GET THE BINARY DAY\n*\n         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         ST    R2,4(R11)               RETURN THE EBCDIC MONTH\n         PACK  0(2,R11),6(2,R11)       MAKE THE MONTH PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R6,0(R11)               GET THE BINARY MONTH\nLEAPCHK  DS    0H\n         XR    R8,R8                   CLEAR FOR THE DIVIDE\n         LR    R9,R4                   MOVE THE YEAR FOR THE DIVIDE\n         LA    R10,4                   LOAD A DIVISOR\n         DR    R8,R10                  DIVIDE BY 4\n         LTR   R8,R8                   Q. IS THE REMAINDER ZERO ?\n         BE    LEAPYES                 A. YES, PROBABLY A LEAP YEAR\nLEAPNO   DS    0H\n         LA    R3,NORMALYR             ADDRESS OF NORMAL YEAR TABLE\n         B     ADDMONTH\nLEAPYES  DS    0H\n         LA    R3,LEAPYEAR             ADDRESS OF LEAP YEAR TABLE\n         B     ADDMONTH\nADDMONTH DS    0H\n         LR    R2,R6                   USE THE MONTH TO INDEX TABLE\n         BCTR  R2,0                    DECREMENT FOR (MONTH-1)\n         XR    R9,R9                   CLEAR FOR ACCUMULATING DAYS\n         LTR   R2,R2                   Q. SHOULD I GO THRU THE LOOP\n         BE    ADDDAYS                 A. NO, JUST ADD THE DAYS\nADDMTHLP DS    0H\n         XR    R10,R10                 CLEAR THE REGISTER\n         IC    R10,0(R3)               INSERT DAYS PER MONTH\n         AR    R9,R10                  ADD THE DAYS PER MONTH\n         LA    R3,1(R3)                INCREMENT FOR THE NEXT MONTH\n         BCT   R2,ADDMTHLP             CONTINUE\nADDDAYS  DS    0H\n         AR    R9,R5                   ADD THE DAYS IN CURRENT MONTH\nRECONVRT DS    0H\n         CVD   R4,0(R11)               CONVERT YEAR TO PACKED DECIMAL\n         L     R8,4(R11)               MOVE TO R8\n         CVD   R9,0(R11)               CONVERT DAYS TO PACKED DECIMAL\n         L     R9,4(R11)               MOVE TO R9\nSTUFFIT  DS    0H\n         SRL   R8,4                    KILL THE SIGN ON THE YEAR\n         SLL   R9,16                   MOVE THE DAYS OVER\n         SLDL  R8,12                   MOVE DAYS IN R8\n         LA    R9,12                   LOAD THE SIGN\n         SLL   R9,28                   MOVE THE SIGN OVER\n         SLDL  R8,4                    MOVE THE SIGN INTO POSITION\n         MVC   0(8,R11),=XL8'0000000000000000' CLEAR THE WORK AREA\n         ST    R8,4(R11)               SAVE THE DATE\nGOODDATE DS    0H\n         XR    R15,R15                 CLEAR RETURN CODE\n         B     RETURN                  RETURN\n         SPACE 3\nBADDATE  DS    0H\n         LA    R15,4                   SET RETURN CODE\n         B     RETURN                  RETURN\n         SPACE 3\nRETURN   RETURN (14,12),,RC=(15)       RETURN\n         TITLE 'CONSTANTS AND LITERALS'\nNORMALYR DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nLEAPYEAR DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'\n         SPACE 3\n         LTORG\n         TITLE 'REGISTERS'\n         REGISTER\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(YDATEDIT),DISP=SHR,SPACE=\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFUSR": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xe2\\x00\\xe2\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 226, "newlines": 226, "modlines": 0, "user": "FILE013"}, "text": "//insert your job card here\n//*********************************************************************\n//* TWO OUTPUT RECORDS ARE PRODUCED FOR EACH USER-ID EXTRACTED.       *\n//* THESE RECORDS ARE FORMATTED AS FOLLOWS:                           *\n//*                                                                   *\n//* RECORD 1: COLUMNS   1-8: USER-ID                                  *\n//*           COLUMNS  9-28: USER NAME                                *\n//*           COLUMNS 29-36: OWNER                                    *\n//*           COLUMNS 37-44: DEFAULT GROUP                            *\n//*           COLUMN     45: REVOKED INDICATOR                        *\n//*           COLUMN     46: SPECIAL INDICATOR                        *\n//*           COLUMN     47: OPERATIONS INDICATOR                     *\n//*           COLUMN     48: AUDITOR INDICATOR                        *\n//*           COLUMN     49: USER AUDIT INDICATOR                     *\n//*           COLUMNS 50-52: LAST SIGNON DATE                         *\n//*           COLUMNS 53-56: LAST SIGNON TIME                         *\n//*           COLUMNS 57-59: LAST PASSWORD CHANGE DATE                *\n//*           COLUMN     60: PASSWORD CHANGE INTERVAL                 *\n//*                                                                   *\n//* RECORD 2: COLUMNS 1-255: USER DATA AREA                           *\n//*********************************************************************\n//RACFUSER EXEC PGM=RACFUSER\n//STEPLIB    DD DSN=insert your authorized library name here,DISP=SHR\n//USERFILE   DD SYSOUT=*,DCB=(LRECL=255,BLKSIZE=18870,RECFM=FB)\n//SYSUDUMP   DD SYSOUT=*\n//SYSABEND   DD SYSOUT=*\n//\nRACFUSER START 0\n***********************************************************************\n* THE PURPOSE OF THIS PROGRAM IS TO EXTRACT USER INFORMATION FROM ALL *\n* USER PROFILES IN A RACF 1.7 DATASET. THE EXTRACTED DATA IS PUT INTO *\n* A FILE WITH LRECL=255 SO THAT IT MAY BE BROWSED BY ISPF. FOR THIS   *\n* REASON, IT IS NECESSARY TO PUT THE USER DATA AREA (WHICH MAY        *\n* CONTAIN AS MANY AS 255 CHARACTERS BY ITSELF) ON A RECORD SEPARATE   *\n* FROM (AND IMMEDIATELY FOLLOWING) THE RECORD CONTAINING THE REST OF  *\n* THE EXTRACTED DATA; I.E., TWO OUTPUT RECORDS ARE PRODUCED FOR EACH  *\n* USER-ID EXTRACTED. THESE RECORDS ARE FORMATTED AS FOLLOWS:          *\n*                                                                     *\n* RECORD 1: COLUMNS   1-8: USER-ID                                    *\n*           COLUMNS  9-28: USER NAME                                  *\n*           COLUMNS 29-36: OWNER                                      *\n*           COLUMNS 37-44: DEFAULT GROUP                              *\n*           COLUMN     45: REVOKED INDICATOR                          *\n*           COLUMN     46: SPECIAL INDICATOR                          *\n*           COLUMN     47: OPERATIONS INDICATOR                       *\n*           COLUMN     48: AUDITOR INDICATOR                          *\n*           COLUMN     49: USER AUDIT INDICATOR                       *\n*           COLUMNS 50-52: LAST SIGNON DATE                           *\n*           COLUMNS 53-56: LAST SIGNON TIME                           *\n*           COLUMNS 57-59: LAST PASSWORD CHANGE DATE                  *\n*           COLUMN     60: PASSWORD CHANGE INTERVAL                   *\n*                                                                     *\n* RECORD 2: COLUMNS 1-255: USER DATA AREA                             *\n*                                                                     *\n* NOTE: THIS PROGRAM MUST BE LINKEDITED INTO AND RUN FROM AN APF      *\n*       AUTHORIZED LIBRARY.                                           *\n*                                                                     *\n* CODED:  8/11/87 BY SCOTT WILSON                                     *\n***********************************************************************\nR0       EQU   0                       USED BY SYSTEM MACROS\nR1       EQU   1                       USED BY SYSTEM MACROS\nR2       EQU   2                       UNUSED\nR3       EQU   3                       UNUSED\nR4       EQU   4                       UNUSED\nR5       EQU   5                       UNUSED\nR6       EQU   6                       UNUSED\nR7       EQU   7                       UNUSED\nR8       EQU   8                       UNUSED\nR9       EQU   9                       UNUSED\nR10      EQU   10                      LENGTH OF USER-ID\nR11      EQU   11                      LENGTH OF WORKAREA\nR12      EQU   12                      PROGRAM BASE REGISTER\nR13      EQU   13                      ADDRESS OF MVS SAVEAREA\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      COMPLETION CODE\n*\n***********************************************************************\n* START OF JOB HOUSEKEEPING                                           *\n***********************************************************************\n         STM   R14,R12,12(R13)         STORE MVS REGISTERS\n         BALR  R12,0                   ESTABLISH R12 AS BASE REGISTER\n         USING *,R12                   IDENTIFY BASE REGISTER\n         ST    R13,SAVEAREA+4          STORE ADD. OF MVS REG. SAVEAREA\n         LA    R13,SAVEAREA            LOAD ADDRESS OF PGM. SAVEAREA\n         OPEN  (USERFILE,(OUTPUT))     OPEN OUTPUT FILE\n*\n***********************************************************************\n* CLEAR OUT THE WORKAREA BY FILLING IT WITH BINARY ZEROES             *\n***********************************************************************\n         XC    WORKAREA,WORKAREA       ZERO OUT WORKAREA\n*\n***********************************************************************\n* SET THE LENGTH OF THE WORKAREA AND PROFILE ENTRY                    *\n***********************************************************************\n         MVI   PROFILE,X'01'           INITIAL PROFILE LENGTH = 1 BYTE\n         LA    R11,ENDWORK-WORKAREA    CALCULATE WORKAREA LENGTH\n         ST    R11,WRKLNGTH            PLACE WORKAREA LENGTH WHERE...\n*                                      ...RACF CAN FIND IT\n***********************************************************************\n* GET A RACF PROFILE                                                  *\n***********************************************************************\nFINDUSER EQU   *\n         MVI   WORKDATA,X'00'          PROPOGATE HEX ZEROES TO...\n         MVC   WORKDATA+1(254),WORKDATA   ...CLEAR WORK SPACE FIELDS...\n         MVC   WORKDATA+256(86),WORKDATA  ...IN TWO STEPS\n         MODESET MODE=SUP,KEY=ZERO     GO SUPERVISOR STATE/KEY ZERO\n         ICHEINTY NEXT,ENTRY=PROFILE,WKAREA=WORKAREA,MF=I,TYPE='USR',  +\n               ACTIONS=(GETNAME,GETOWNR,GETDFLT,GETRVOK,GETSPEC,       +\n               GETOPER,GETAUDT,GETUAUD,GETDATE,GETTIME,GETPCDT,        +\n               GETPINT,GETDATA)\n         LTR   R15,R15                 CHECK RETRUN CODE FROM ICHEINTY\n         BNZ   WRAPUP                  IF NON-ZERO, EXIT THIS PROGRAM\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\n*\n***********************************************************************\n* WRITE THE RETURNED DATA                                             *\n***********************************************************************\n         MVI   OUTRECRD,C' '               PROPOGATE BLANK SPACE TO...\n         MVC   OUTRECRD+1(254),OUTRECRD   ...OUTPUT RECORD IN TWO STEPS\n         L     R10,USRLNGTH            LOAD LENGTH OF USER-ID\n         S     R10,=XL4'00000001'      SUBTRACT 1 FROM USER-ID LENGTH\n         EX    R10,MOVEID              ALTER LENGTH OF USER-ID FOR MVC\n         B     MOVENAME                DON'T EXECUTE MVC TWICE\nMOVEID   MVC   OUTUSER(0),ENTRYNAM     MOVE USERID INTO OUTPUT FIELD\nMOVENAME MVC   OUTNAME(20),WORKDATA+4  MOVE NAME INTO OUTPUT FIELD\n         MVC   OUTOWNER(8),WORKDATA+26 MOVE OWNER INTO OUTPUT FIELD\n         MVC   OUTDFLT(8),WORKDATA+36  MOVE DEFAULT GRP TO OUTPUT FIELD\n         MVC   OUTREVOK(1),WORKDATA+46 MOVE REVOKE FLAG TO OUTPUT FIELD\n         MVC   OUTSPEC(1),WORKDATA+49  MOVE SPECIAL FLAG TO OUT. FIELD\n         MVC   OUTOPER(1),WORKDATA+52  MOVE OPERATION FLAG TO OUT. FLD.\n         MVC   OUTAUDIT(1),WORKDATA+55 MOVE AUDITOR FLAG TO OUTPUT FLD.\n         MVC   OUTUAUDT(1),WORKDATA+58 MOVE UAUDIT FLAG TO OUTPUT FIELD\n         MVC   OUTLDATE(3),WORKDATA+61 MOVE LAST USE DATE TO OUT. FLD.\n         MVC   OUTLTIME(4),WORKDATA+66 MOVE LAST USE TIME TO OUT. FLD.\n         MVC   OUTPDATE(3),WORKDATA+72 MOVE PASSWORD CHANGE DATE\n         MVC   OUTPINT(1),WORKDATA+77  MOVE PASSWORD CHANGE INTERVAL\nWRITEIT  EQU   *\n         PUT   USERFILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         MVI   OUTRECRD,C' '           PROPOGATE BLANK SPACE TO CLEAR..\n         MVC   OUTRECRD+1(254),OUTRECRD   ...OUTPUT RECORD IN TWO STEPS\n         MVC   OUTRECRD(255),WORKDATA+81  MOVE USER DATA AREA TO OUTPUT\n         PUT   USERFILE,OUTRECRD       WRITE THE OUTPUT RECORD\n         B     FINDUSER                FIND THE NEXT PROFILE\n*\n***********************************************************************\n* END OF JOB HOUSEKEEPING                                             *\n***********************************************************************\nWRAPUP   EQU   *\n         MODESET MODE=PROB,KEY=NZERO   RETURN TO PROBLEM STATE/NON-ZERO\nCLOSING  CLOSE (USERFILE)              CLOSE THE OUTPUT FILE\n         L     R13,SAVEAREA+4          LOAD RETURN ADDRESS (MVS R13)\n         L     R14,12(R13)             LOAD MVS R14 VALUE\n         LM    R0,R12,20(R13)          RESTORE MVS REGISTERS 0-12\n         SR    R15,R15                 GUARANTEE ZERO RETURN CODE\n         BR    R14                     RETURN TO MVS\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n*\nUSRLNGTH DS    XL3'000000'             PADDING FOR REGISTER LOADS\nPROFILE  DS    AL1                     ENTRY LENGTH FIELD\nENTRYNAM DS    XL8'0000000000000000'   USER-ID\n*\nGETNAME  ICHEACTN FIELD=PGMRNAME,MF=L  RETREIVE USER NAME\nGETOWNR  ICHEACTN FIELD=AUTHOR,MF=L    RETREIVE PROFILE OWNER\nGETDFLT  ICHEACTN FIELD=DFLTGRP,MF=L   RETREIVE DEFAULT GROUP\nGETRVOK  ICHEACTN FIELD=FLAG4,MF=L     RETREIVE FLAG 4 (REVOKED)\nGETSPEC  ICHEACTN FIELD=FLAG2,MF=L     RETREIVE FLAG 2 (SPECIAL)\nGETOPER  ICHEACTN FIELD=FLAG3,MF=L     RETREIVE FLAG 3 (OPERATIONS)\nGETAUDT  ICHEACTN FIELD=FLAG6,MF=L     RETREIVE FLAG 6 (AUDITOR)\nGETUAUD  ICHEACTN FIELD=UAUDIT,MF=L    RETREIVE USER AUDIT\nGETDATE  ICHEACTN FIELD=LJDATE,MF=L    RETREIVE LAST SIGNON DATE\nGETTIME  ICHEACTN FIELD=LJTIME,MF=L    RETREIVE LAST SIGNON TIME\nGETPCDT  ICHEACTN FIELD=PASSDATE,MF=L  RETREIVE PASSWORD CHANGE DATE\nGETPINT  ICHEACTN FIELD=PASSINT,MF=L   RETREIVE PASSWORD INTERVAL\nGETDATA  ICHEACTN FIELD=INSTDATA,MF=L  RETREIVE USER DATA\n*\nPGMRNAME DS    CL8'PGMRNAME'           PROGRAMMER NAME FIELD DATA\nAUTHOR   DS    CL8'AUTHOR  '           OWNER\nDFLTGRP  DS    CL8'DFLTGRP '           DEFAULT GROUP\nFLAG4    DS    CL8'FLAG4   '           REVOKED USER-ID\nFLAG2    DS    CL8'FLAG2   '           SPECIAL USER\nFLAG3    DS    CL8'FLAG3   '           OPERATIONS USER\nFLAG6    DS    CL8'FLAG6   '           AUDITOR\nUAUDIT   DS    CL8'UAUDIT  '           USER AUDIT\nLJDATE   DS    CL8'LJDATE  '           LAST SIGNON DATE\nLJTIME   DS    CL8'LJTIME  '           LIST SIGNON TIME\nPASSDATE DS    CL8'PASSDATE'           PASSWORD CHANGE DATE\nPASSINT  DS    CL8'PASSINT '           PASSWORD INTERVAL\nINSTDATA DS    CL8'INSTDATA'           INSTALLATION DATA FIELD DATA\n*                  *\nWORKAREA DS    0F                      WORKAREA ALIGNMENT ON FULLWORD\nWRKLNGTH DS    F                       WORK AREA LENGTH\nRBA      DS    CL6                     RBA OF RETURNED ENTRY\n         DS    CL2                     RESERVED (BY IBM)\n         DS    F                       DUPLICATE DATASET NAME COUNT\n         DS    2F                      RESERVED (BY IBM)\n         DS    CL2                     LENGTH OF RETURNED DATA\nWORKDATA DS    CL341                   RETURNED DATA\nENDWORK  EQU   *                       END OF WORKAREA\n*\nOUTRECRD DS    0XL255                  OUTPUT RECORDS\nOUTUSER  DS    XL8                     USER-ID\nOUTNAME  DS    XL20                    USER NAME\nOUTOWNER DS    XL8                     OWNER\nOUTDFLT  DS    XL8                     DEFAULT GROUP\nOUTREVOK DS    XL1                     REVOKED\nOUTSPEC  DS    XL1                     SPECIAL\nOUTOPER  DS    XL1                     OPERATIONS\nOUTAUDIT DS    XL1                     AUDITOR\nOUTUAUDT DS    XL1                     USER AUDIT\nOUTLDATE DS    XL3                     LAST SIGNON DATE\nOUTLTIME DS    XL4                     LAST SIGNON TIME\nOUTPDATE DS    XL3                     LAST PASSWORD CHANGE DATE\nOUTPINT  DS    XL1                     PASSWORD CHANGE INTERVAL\nOUTFILLR DS    XL195                   FILLER\n*\n***********************************************************************\n* OUTPUT FILE DEFINITION                                              *\n***********************************************************************\nUSERFILE DCB   DDNAME=USERFILE,MACRF=PM,DSORG=PS\n*\n         LTORG\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RACRIX01": {"ttr": 7173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01!\\x01!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 289, "newlines": 289, "modlines": 0, "user": "FILE013"}, "text": "*          DATA SET RACRIX01   AT LEVEL 005 AS OF 06/11/82\nICHRIX01 TITLE 'RACINIT PRE-PROCESSING EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THE RACINIT PRE-PROCESSING EXIT GETS CONTROL BEFORE THE ACEE HAS   *\n*  BEEN BUILT FOR THE USER. IT HAS THE OPPORTUNITY TO CONSTRUCT A     *\n*  USERID OR EFFECT SUCH OPTIONS AS BYPASSING PASSWORD CHECKING.      *\n*                                                                     *\n*  THIS EXIT UTILIZES THE FOLLOWING LOGIC:                            *\n*                                                                     *\n*      IF THE USER IS A STARTED TASK, BUILD THE USERID FROM THE       *\n*      FIRST 7 CHARACTERS OF THE STC NAME AND EXIT.                   *\n*                                                                     *\n*      IF THE USER IS A TSU WITH NO USERID, FAIL RACINIT.             *\n*                                                                     *\n*      IF THE JOB IS TESTING WITH NO USERID, FAIL RACINIT.            *\n*                                                                     *\n*      IF THERE IS A RACF USERID AND THERE IS NO RACF PASSWORD THEN   *\n*         BYPASS PASSWORD VERIFICATION AND EXIT.                      *\n*                                                                     *\n*      LOOK UP THE MAJOR ACCOUNTING CODE IN THE ACCOUNT LOOKUP TABLE, *\n*      LOAD THE ADDRESS OF THE APPROPRIATE PROCESSING ROUTINE FOR     *\n*      THAT MAJOR ACCOUNT AND BRANCH TO IT.                           *\n*                                                                     *\n*      REGISTERS ARE AS FOLLOWS:                                      *\n*                                                                     *\n*           R0  =    WORK                                             *\n*           R1  =    WORK                                             *\n*           R2  -->  STC/BATCH JOBNAME                                *\n*           R3  -->  ACCOUNTING INFORMATION                           *\n*           R4  -->  RACF USERID (OR BLANK)                           *\n*           R5  -->  RACF FLAG BYTE ONE                               *\n*           R6  =    WORK                                             *\n*           R7  =    WORK                                             *\n*           R8  =    WORK                                             *\n*           R9  =    WORK                                             *\n*           R10 =    WORK                                             *\n*           R11 -->  PARAMETER LIST                                   *\n*           R12 =    MODULE BASE REGISTER                             *\n*           R13 -->  SAVE AREA                                        *\n*           R14 =    RETURN REGISTER                                  *\n*           R15 =    RETURN CODE REGISTER                             *\n*                                                                     *\n*        RETURN CODES ARE AS FOLLOWS:                                 *\n*                                                                     *\n*           00  NORMAL RETURN CONTINUE PROCESSING                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nICHRIX01 CSECT\n         SPACE\n         STM   R14,R12,12(R13)         * SAVE CALLER'S REGS\n         LR    R12,R15                 * CHANGE MODULE BASE REG\n         USING ICHRIX01,R12            * SET ADDRESSABILITY\n         B     START                   * SKIP OVER CONSTANTS\n         SPACE\n         DC    C'ICHRIX01'             * CSECT NAME\n         DC    C'&SYSDATE'             * DATE ASSEMBLED\n         DC    C'&SYSTIME'             * TIME ASSEMBLED\n         SPACE\nSTART    LR    R11,R1                  * SAVE PARM REG\n         USING RPPL,R11                * SET ADDRESSABILITY\n         EJECT\n         L     R1,RPPLFLG1             * R1 ---> ACEE FLAG 1\n         TM    0(R1),X'C0'             * ENVIRON=CHANGE|DELETE?\n         BNZ   EXIT                    *    YES..EXIT\n         SPACE\n         L     R2,RPPLSTCN             * R2 ---> STARTED TASK NAME\n         CLI   0(R2),C' '              * STC NAME BLANK?\n         BNE   STC                     *    NO...PROCESS STC\n         SPACE\n         L     R2,RPPLJOBN             * R2 ---> BATCH JOBNAME\n         CLI   0(R2),C' '              * BATCH JOB NAME BLANK?\n         BE    TSU                     *    YES..PROCESS TSU\n         SPACE\n         L     R3,RPPLACCT             * R3 ---> ACCOUNTING DATA\n         LTR   R3,R3                   * IS THERE ANY?\n         BZ    TSU                     *    NO...PROCESS AS TSU\n         SPACE\n         CLI   0(R3),X'02'             * IS IT AT LEAST 2 FIELDS\n         BL    TSU                     *    NO...PROCESS AS TSU\n         SPACE\n         SR    R7,R7                   * RESET WORK REGISTER\n         LA    R3,1(R3)                * R3 --> FIRST FIELD LENGTH\n         IC    R7,0(R3)                * R7 = LENGTH OF FIRST FIELD\n         SPACE\n         LA    R3,1(R3)                * R3 --> FIRST FIELD DATA\n         LR    R4,R3                   * R4 --> FIRST FIELD DATA\n         AR    R4,R7                   * R4 --> SECOND FIELD LENGTH\n         LA    R4,1(R4)                * R4 --> SECOND FIELD DATA\n         CLI   0(R4),C'S'              * IS THIS TSO SUBMIT?\n         BE    TESTING                 *    YES..PROCESS AS TESTING\n         SPACE\n         CLI   0(R4),C'T'              * IS THIS TEST JOB?\n         BE    TESTING                 *    YES..PROCESS AS TESTING\n         SPACE\n         L     R4,RPPLUSRI             * R4 --> RACF USERID\n         CLI   0(R4),X'00'             * IS THERE ONE?\n         BNE   SETPW                   *    YES..GO TO PW BYPASS\n         TITLE 'LOOK UP ACCOUNT AND BRANCH TO USERID BUILD ROUTINE'\n         LA    R8,ACCTTBL              * ADDRESS OF ACCOUNT TABLE\n         SPACE\nACCTLOOP CLC   0(4,R8),TBLEND          * END OF TABLE?\n         BE    MATCH                   *    YES..DO NOT PROCESS\n         SPACE\n         CLC   0(4,R8),0(R3)           * ACCOUNT = TABLE?\n         BE    MATCH                   *    YES..PROCESS\n         SPACE\n         LA    R8,8(R8)                * UPDATE POINTER\n         B     ACCTLOOP                * AND LOOP\n         SPACE 2\nMATCH    L     R8,4(R8)                * LOAD ROUTINE ADDRESS\n         BR    R8                      * AND BRANCH TO IT\n         TITLE 'PROCESS STARTED TASKS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        USERID = SUBSTR(STCNAME,1,7)                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSTC      L     R4,RPPLUSRI             * R4 ---> RACF USERID\n         MVC   1(7,R4),0(R2)           * MOVE STCNAME TO USERID\n         LA    R5,1(R4)                * POINT TO ACTUAL USERID\n         LA    R7,7                    * SET USERID MAX LENGTH\n         LA    R8,7(R5)                * POINT TO END OF USERID\n         SPACE\nSTCLOOP  CLI   0(R8),C' '              * BLANK?\n         BNE   STCLEN                  *   NO...END OF USERID\n         SPACE\n         BCTR  R8,0                    * BUMP POINTER\n         BCT   R7,STCLOOP              * AND LOOP\n         SPACE\nSTCLEN   SR    R8,R5                   * COMPUTE USERID LENGTH\n         LA    R8,1(R8)                * PLUS ONE\n         STC   R8,0(R4)                * STORE INTO PARM LIST\n         SPACE\n         B     SETPW                   * AND EXIT\n         TITLE 'PROCESS TSO USERS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FAIL RACINIT IF USERID NOT PRESENT                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nTSU      L     R4,RPPLUSRI             * R4 ---> RACF USERID\n         CLI   0(R4),X'00'             * USERID MISSING?\n         BNE   EXIT                    *    NO...EXIT\n         TPUT  NOUSERID,72             * 'USER NOT IDENTIFIED TO RACF'\n         SPACE\n         LA    R15,4                   * FAIL RACINIT\n         B     RETURN                  *\n         TITLE 'PROCESS TESTING JOBS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FAIL RACINIT IF USERID NOT PRESENT                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nTESTING  L     R4,RPPLUSRI             * R4 ---> RACF USERID\n         CLI   0(R4),X'00'             * USERID MISSING?\n         BNE   EXIT                    *    NO...EXIT\n         WTO   'ICHRIX01 - RACF USERID NOT SPECIFIED',ROUTCDE=(9,11)\n         SPACE\n         LA    R15,4                   * FAIL RACINIT\n         B     RETURN                  *\n         TITLE 'PROCESS HNB PRODUCTION JOBS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IF NO USERID THEN USERID = SUBSTR(JOBNAME,1,7)               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nHNBPROD  L     R2,RPPLJOBN             * R2 ---> BATCH JOB NAME\n         L     R4,RPPLUSRI             * R4 ---> RACF USERID\n         MVC   1(7,R4),0(R2)           * MOVE JOBNAME TO USERID\n         LA    R5,1(R4)                * POINT TO ACTUAL USERID\n         LA    R7,7                    * SET USERID MAX LENGTH\n         LA    R8,7(R5)                * POINT TO END OF USERID\n         SPACE\nUIDLOOP  CLI   0(R8),C' '              * BLANK?\n         BNE   SETLEN                  *   NO...END OF USERID\n         SPACE\n         BCTR  R8,0                    * BUMP POINTER\n         BCT   R7,UIDLOOP              * AND LOOP\n         SPACE\nSETLEN   SR    R8,R5                   * COMPUTE USERID LENGTH\n         LA    R8,1(R8)                * PLUS ONE FOR REAL LENGTH\n         STC   R8,0(R4)                * STORE INTO PARM LIST\n         SPACE\nHNBEXIT  B     SETPW                   * SET BYPASS PASSWORD\n         TITLE 'PROCESS LEE ENTERPRISES JOBS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IF NO USERID THEN USERID = SUBSTR(JOBNAME,1,2)||'RJE'        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nLEE      L     R4,RPPLUSRI             * R4 -> RACF USERID\n         SPACE\n         MVC   1(2,R4),0(R2)           * FIRST 2 BYTES OF JOBNAME\n         MVC   3(3,R4),CRJE            * PLUS 'RJE'\n         MVI   0(R4),X'05'             * USERID LENGTH IS FIVE (5)\n         SPACE\n         B     SETPW                   * SET BYPASS PASSWORD\n         TITLE 'PROCESS GENERAL RJE USERS'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IF NO USERID THEN USERID = SUBSTR(JOBNAME,1,3)||MAJORACCT    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nRJE      L     R4,RPPLUSRI             * R4 -> RACF USERID\n         SPACE\n         MVC   1(3,R4),0(R2)           * FIRST 3 BYTES OF JOBNAME\n         MVC   4(4,R4),0(R3)           * PLUS MAJOR ACCOUNT NUMBER\n         MVI   0(R4),X'07'             * USERID LENGTH IS SEVEN (7)\n         SPACE\n         B     SETPW                   * SET BYPASS PASSWORD\n         TITLE 'SET PASSWORD BYPASS FOR PRODUCTION, RJE, STCS'\nSETPW    L     R5,RPPLPSWD             * ADDRESS OF USER PASSWORD\n         SPACE\n         CLI   0(R5),X'00'             * PASSWORD SUPPLIED?\n         BNE   EXIT                    *   YES...EXIT\n         SPACE\nNOPW     L     R5,RPPLFLG1             * RACF FLAG BYTE ONE\n         OI    0(R5),X'08'             * SET BYPASS PASSWORD PROTECTION\n         SPACE\nEXIT     SR    R15,R15                 * RC=0 (CONTINUE PROCESSING)\nRETURN   L     R14,12(,R13)            * RESTORE R14\n         LM    R0,R12,20(R13)          * RESTORE R0-R12\n         BR    R14                     * RETURN TO CALLER\n         TITLE 'CONSTANTS AND STORAGE'\nCRJE     DC    CL3'RJE'\nNOUSERID DC    CL72'ICHRIX01 - USERID NOT INDENTIFIED TO RACF'\n         SPACE\n         REGEQ\n         SPACE\n         LTORG\n         TITLE 'ACCOUNT PROCESSING TABLE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        EACH ENTRY IN THIS TABLE INDICATES THE TYPE OF RACINIT       *\n*        PROCESSING TO BE PERFORMED FOR THAT MAJOR ACCOUNT NUMBER.    *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nACCTTBL  DS   0F\n         DC    CL4'9999',AL4(HNBPROD)  * HNB PRODUCTION\n         DC    CL4'1002',AL4(LEE)      * LEE ENTERPRISES\n         DC    CL4'1003',AL4(LEE)      * LEE ENTERPRISES\n         DC    CL4'1004',AL4(RJE)      * UCC SOFTWARE\n         DC    CL4'1006',AL4(RJE)      * MIDDLETOWN RJE\n         DC    CL4'1009',AL4(RJE)      * CEM RJE\n         DC    CL4'1010',AL4(RJE)      * RPD RJE\n         DC    CL4'7777',AL4(HNBPROD)  * VNB PRODUCTION\nTBLEND   DC    XL4'FFFFFFFF',AL4(EXIT) * DEFAULT = NO PROCESSING\n         TITLE 'RACINIT PRE/POST PROCESSING PARAMETER LIST'\nRPPL     DSECT\n         SPACE\nRPPLFCNT DS    A                       * ADDR(NUMBER OF WORDS IN LIST)\nRPPLFLG1 DS    A                       * ADDR(FLAGE BYTE 1)\nRPPLUSRI DS    A                       * ADDR(USERID)\nRPPLPSWD DS    A                       * ADDR(PASSWORD)\nRPPLSTCN DS    A                       * ADDR(STARTED TASK PROC NAME)\nRPPLINST DS    A                       * ADDR(INSTALLATION PARMS)\nRPPLGRP  DS    A                       * ADDR(GROUP NAME)\nRPPLNPSW DS    A                       * ADDR(NEW PASSWORD)\nRPPLACE1 DS    A                       * ADDR(ACEE FOR POST PROCESSING)\nRPPLPGMN DS    A                       * ADDR(PROGRAMMER NAME)\nRPPLACCT DS    A                       * ADDR(ACCOUNT INFORMTION)\nRPPLOIDC DS    A                       * ADDR(OIDCARD IDENTIFICATION #)\nRPPLTERM DS    A                       * ADDR(TERMINAL IDENTIFIER)\nRPPLWORK DS    A                       * ADDR(FULLWORD WORK AREA)\nRPPLABND DS    A                       * ADDR(ABEND CODE TO BE ISSUED)\nRPPLRTRN DS    A                       * ADDR(RETURN CODE TO RACINIT)\nRPPLFLG2 DS    A                       * ADDR(FLAG BYTE 2)\nRPPLTRMD DS    A                       * ADDR(TERMINAL DATA FIELD)\nRPPLUSDA DS    A                       * ADDR(INSTALLATION DATA)\nRPPLTRML DS    A                       * ADDR(TERMINAL LEVEL NUMBER)\nRPPLJOBN DS    A                       * ADDR(JOB NAME)\nRPPLAPPL DS    A                       * ADDR(APPLICATION NAME)\nRPPLSUBP DS    A                       * ADDR(SUBPOOL FOR ACEE)\nRPPLACE2 DS    A                       * ADDR(ACEE)\nRPPLAPLD DS    A                       * ADDR(APPLICATION DATA)\nRPPLAPLL DS    A                       * ADDR(APPLICATION LEVEL)\nRPPLPWIN DS    A                       * ADDR(PASSWORD INTERVAL)\nRPPLPWDT DS    A                       * ADDR(PASSWORD DATE)\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACRIX02": {"ttr": 7179, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00y\\x00y\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 121, "newlines": 121, "modlines": 0, "user": "FILE013"}, "text": "*          DATA SET RACRIX02   AT LEVEL 037 AS OF 06/08/82\nICHRIX02 TITLE 'RACINIT POST PROCESSING EXIT'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THE RACINIT POST PROCESSING EXIT GETS CONTROL AFTER THE RACINIT    *\n*  MACRO INSTRUCTION HAS BEEN ISSUED. IT HAS THE OPPORTUNITY TO CHECK *\n*  ANY ABEND OR RETURN CODES AND MAKE A DECISION ON WHETHER OR NOT    *\n*  TO KILL THE JOB OR TO CONTINUE PROCESSING.                         *\n*                                                                     *\n*  THIS EXIT WILL CHECK FOR A BLANK USERID AND WILL INDICATE TO       *\n*  RACF THAT IT IS AN 'INVALID USERID' (RC=4).                        *\n*                                                                     *\n*       REGISTERS ARE AS FOLLOWS:                                     *\n*                                                                     *\n*             R0   =  WORK                                            *\n*             R1   =  WORK                                            *\n*             R2   =  WORK                                            *\n*             R3   =  WORK                                            *\n*             R4   =  WORK                                            *\n*             R5   =  WORK                                            *\n*             R6   =  WORK                                            *\n*             R7  --> RACINIT RETURN CODE                             *\n*             R8  --> ABEND CODE                                      *\n*             R9  --> ACCOUNTING INFORMATION                          *\n*             R10 --> JOB NAME                                        *\n*             R11  =  PARAMETER LIST REG                              *\n*             R12  =  MODULE BASE REG                                 *\n*             R13  =  SAVE AREA REG                                   *\n*             R14  =  RETURN REG                                      *\n*             R15  =  RETURN CODE REG                                 *\n*                                                                     *\n*        RETURN CODES ARE AS FOLLOWS:                                 *\n*                                                                     *\n*           00  NORMAL RETURN CONTINUE PROCESSING                     *\n*           04  RETRY RACINIT PROCESSING (NOT USED)                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT 'RACINIT POST PROCESSING EXIT'\nICHRIX02 CSECT\n         USING ICHRIX02,R15            * SET ADDRESSABILITY\n         B     START                   * BRANCH OVER CONSTANTS\n         DC    C'ICHRIX02'             * CSECT NAME\n         DC    C'&SYSDATE'             * DATE ASSEMBLED\n         DC    C'&SYSTIME'             * TIME ASSEMBLED\nSTART    STM   R14,R12,12(R13)         * SAVE CALLER'S REGS\n         LR    R12,R15                 * CHANGE MODULE BASE REG\n         USING ICHRIX02,R12            * CHANGE BASE REGISTER\n         DROP  R15                     * DROP OLD BASE REGISTER\n         LR    R11,R1                  * SAVE PARM REG\n         USING RPPL,R11                * SET ADDRESSABILITY\n         SPACE\n         L     R1,RPPLFLG1             * R1 --> ACEE FLAG 1\n         TM    0(R1),X'C0'             * ENVIRON=CHANGE|DELETE?\n         BNZ   EXIT                    *   YES..EXIT\n         SPACE\n         L     R2,RPPLSTCN             * R2 --> STARTED TASK NAME\n         CLI   0(R2),C' '              * IS IT BLANK?\n         BNE   RESET                   *   NO...THIS IS AN STC\n         SPACE\n         L     R1,RPPLTERM             * R1 --> TERMINAL ADDRESS\n         LTR   R1,R1                   * IS THERE ANY?\n         BNZ   EXIT                    *   YES..TSO/CICS - EXIT\n         SPACE\n         L     R9,RPPLACCT             * R9 --> ACCOUNTING DATA\n         LTR   R9,R9                   * IS THERE ANY?\n         BZ    EXIT                    *   NO...ERROR\n         SPACE\n         CLI   0(R9),X'02'             * LESS THAN 2 ACCOUNTING FIELDS?\n         BL    EXIT                    *   YES..TSO USER/STC\n         SPACE\nRESET    L     R7,RPPLRTRN             * R7  --> RACINIT RETURN CODE\n         CLI   3(R7),X'00'             * RACINIT RETURN CODE = 0?\n         BNE   EXIT                    *    NO...EXIT WITH RACINIT RC\n         SPACE\n         L     R10,RPPLUSRI            * R10 --> USERID\n         CLI   0(R10),X'00'            * USERID = BLANK?\n         BNE   EXIT                    *    NO...EXIT WITH RACINIT RC\n         SPACE\n         MVI   3(R7),X'04'             * RACINIT 'INVALID USERID' RC\n         SPACE\nEXIT     SR    R15,R15                 * 'CONTINUE PROCESSING'\n         L     R14,12(,R13)            * RESTORE R14\n         LM    R0,R12,20(R13)          * RESTORE R0-R12\n         BR    R14                     * RETURN TO CALLER\n         TITLE 'STORAGE, LITERALS, EQUATES'\nF0       DC    F'0'\n         SPACE\n         LTORG\n         SPACE\n         REGEQ\n         TITLE 'RACINIT PRE/POST PROCESSING PARAMETER LIST'\nRPPL     DSECT\n         SPACE\nRPPLFCNT DS    A                       * ADDR(NUMBER OF WORDS IN LIST)\nRPPLFLG1 DS    A                       * ADDR(FLAGE BYTE 1)\nRPPLUSRI DS    A                       * ADDR(USERID)\nRPPLPSWD DS    A                       * ADDR(PASSWORD)\nRPPLSTCN DS    A                       * ADDR(STARTED TASK PROC NAME)\nRPPLINST DS    A                       * ADDR(INSTALLATION PARMS)\nRPPLGRP  DS    A                       * ADDR(GROUP NAME)\nRPPLNPSW DS    A                       * ADDR(NEW PASSWORD)\nRPPLACE1 DS    A                       * ADDR(ACEE FOR POST PROCESSING)\nRPPLPGMN DS    A                       * ADDR(PROGRAMMER NAME)\nRPPLACCT DS    A                       * ADDR(ACCOUNT INFORMTION)\nRPPLOIDC DS    A                       * ADDR(OIDCARD IDENTIFICATION #)\nRPPLTERM DS    A                       * ADDR(TERMINAL IDENTIFIER)\nRPPLWORK DS    A                       * ADDR(FULLWORD WORK AREA)\nRPPLABND DS    A                       * ADDR(ABEND CODE TO BE ISSUED)\nRPPLRTRN DS    A                       * ADDR(RETURN CODE TO RACINIT)\nRPPLFLG2 DS    A                       * ADDR(FLAG BYTE 2)\nRPPLTRMD DS    A                       * ADDR(TERMINAL DATA FIELD)\nRPPLUSDA DS    A                       * ADDR(INSTALLATION DATA)\nRPPLTRML DS    A                       * ADDR(TERMINAL LEVEL NUMBER)\nRPPLJOBN DS    A                       * ADDR(JOB NAME)\nRPPLAPPL DS    A                       * ADDR(APPLICATION NAME)\nRPPLSUBP DS    A                       * ADDR(SUBPOOL FOR ACEE)\nRPPLACE2 DS    A                       * ADDR(ACEE)\nRPPLAPLD DS    A                       * ADDR(APPLICATION DATA)\nRPPLAPLL DS    A                       * ADDR(APPLICATION LEVEL)\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RGROUP": {"ttr": 7425, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02I\\x02I\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 585, "newlines": 585, "modlines": 0, "user": "FILE013"}, "text": "RGROUP   TITLE 'CHANGE CURRENT RACF CONNECT GROUP'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  RGROUP    WALT FARRELL, RAINIER BANK, 11/10/78                     *\n*                                                                     *\n*  PURPOSE:  TO CHANGE THE RACF GROUP TO WHICH A RACF TSO-USER OR JOB *\n*            IS CURRENTLY CONNECTED.                                  *\n*                                                                     *\n*  INPUT:    (1) A GROUP NAME, WHICH WILL BECOME THE NEW CURRENT      *\n*                GROUP NAME IF THE USER IS RACF AUTHORIZED TO IT.     *\n*             OR                                                      *\n*            (2) NO PARAMETER, IN WHICH CASE THE NAME OF THE CURRENT  *\n*                GROUP WILL BE LISTED.                                *\n*  NOTE:     THIS PROGRAM MAY BE RUN UNDER TSO OR AS A BACKGROUND JOB.*\n*            IT MUST BE APF AUTHORIZED, WHICH WILL LIMIT THE WAYS IT  *\n*            CAN BE EXECUTED UNDER TSO.                               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  MODIFICATIONS:                                                     *\n*            (1) AFTER SUCCESSFULLY CHANGING THE CURRENT GROUP,       *\n*                PROPAGATE THE SETTING OF THE ACEE ADSP FLAG INTO THE *\n*                JSCB, WHERE THE SYSTEM ACTUALLY CHECKS IT. THIS WILL *\n*                BYPASS AN IBM DESIGN FLAW.                           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRGROUP   CSECT\n         GBLA  &NUMINS                  MAXIMUM NUMBER OF INSERTS\n&NUMINS  SETA  2                        FOR IKJEFF02\n         SPACE\n*                                       REGISTER EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nBR       EQU   12\nCCR      EQU   13\nLR       EQU   14\nR14      EQU   14\nEPR      EQU   15\nR15      EQU   15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         STM   LR,BR,12(CCR)       SAVE REGS AND LINK SAVE AREAS\n         LR    BR,EPR\n         USING RGROUP,BR           #####\n         LR    R11,R1              SAVE PARM ADDRESS\n         GETMAIN R,LV=LWORKA\n         USING WORKA,R1            #####\n         ST    CCR,WSAVE+4\n         ST    R1,8(,CCR)\n         LR    CCR,R1\n         DROP  R1                  #####\n         USING WORKA,CCR           #####\n         ST    R11,WCPPLP          SAVE POSSIBLE CPPL ADDRESS\n         MVI   WFLAGS,0            CLEAR THE FLAG BYTE\n         XC    WRETCDE,WRETCDE     SET RETURN CODE TO ZERO\n         XC    WECB,WECB           CLEAR PARSE ECB\n         MVC   WRACINIT,RACINIT    INIT LIST FORM OF RACINIT\n         MVC   WEXTRACT,EXTRACT    INIT LIST FORM OF EXTRACT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        VERIFY RACF ACTIVE AND USER DEFINED TO RACF                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         L     R2,X'10'            GET CVT\n         USING CVT,R2              #####\n         RACSTAT ,                 TEST FOR RACF ACTIVE\n         LTR   R15,R15             ACTIVE?\n         BNZ   RGNORACF            MESSAGEIF NOT\n         L     R3,CVTTCBP          GET ASCB ADDR\n         L     R3,12(,R3)\n         USING ASCB,R3             #####\n         L     R3,ASCBASXB         GET ASXB ADDRESS\n         USING ASXB,R3             #####\n         L     R3,ASXBSENV         GET ACEE ADDRESS\n         LA    R3,0(,R3)\n         LTR   R3,R3               ACEE ADDRESS THERE?\n         BZ    RGNOUSER            ISSUE MSG IF NOT - NOT RACF USER\n         USING ACEE,R3             #####\n         CLC   ACEEACEE,CACEE      ACEE VALID?\n         BNE   RGACERR             MSG IF NOT\n         TM    ACEEFLG1,ACEERACF   RACF DEFINED USER?\n         BZ    RGNOUSER            MSG IF NOT\n         ST    R3,WACEEP           SAVE ACEE ADDRESS\n         DROP  R2,R3               #####\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK MODE OF OPERATION (CP OR CALLED)                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n         EXTRACT WAPSCB,'S',       GET PSCB ADDRESS                    X\n               FIELDS=(PSB),                                           X\n               MF=(E,WEXTRACT)\n         L     R2,WAPSCB           ENSURE HIGH BYTE CLEAR\n         LA    R2,0(,R2)\n         ST    R2,WAPSCB\n         TM    0(R11),X'80'        ONLY ONE PARM IN PARMLIST?\n         BZ    RG010               NO, ASSUME CP FOR NOW\n         NI    WFLAGS,X'FF'-WFCP   YES, NOT A CP\n         B     RG020               GO CHECK AUTHORIZATION\nRG010    EQU   *\n         USING CPPL,R11            #####\n         L     R2,CPPLPSCB         PICK UP PSCB ADDR FROM CPPL\n         LA    R2,0(,R2)           CLEAR HIGH BYTE\n         C     R2,WAPSCB           VERIFY PSCB CORRECT\n         BNE   RGERR2              ERROR IF NOT CORRECT PSCB ADDRESS\n         OI    WFLAGS,WFCP         SHOW WE ARE A CP\n         DROP  R11                 #####\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* GET GROUP NAME FROM CALL COMMAND                                    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG020    EQU   *\n         TM    WFLAGS,WFCP         RUNNING AS A CP?\n         BO    RG030               YES, GO PARSE COMMAND\n*                                  ELSE USE PARM FROM CALL COMMAND\n         L     R1,0(,R11)          PICK UP THE PARM\n         LH    R2,0(,R1)           GET THE PARM LENGTH\n         LTR   R2,R2               CHECK FOR VALID PARM LENGTH\n         BZ    RG500               IF ZERO, LIST CURRENT GROUP NAME\n         BM    RGERR4              IF MINUS, ERROR\n         C     R2,=F'8'            IF GREATER THAN 8 THEN ERROR\n         BH    RGERR4\n         STC   R2,WGROUPL          SAVE LENGTH OF NAME\n         BCTR  R2,0                DECREMENT FOR EXECUTE\n         MVC   WGROUPN(0),2(R1)    **EXECUTED**\n         EX    R2,*-6              SAVE THE GROUP NAME\n         B     RG100               CONTINUE PROCESSING\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* PARSE COMMAND TO GET GROUP NAME                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG030    EQU   *\n         LA    R2,WPPL             POINT TO PPL IN WORKAREA\n         USING PPL,R2              #####\n         L     R3,WCPPLP           POINT TO CPPL\n         USING CPPL,R3             #####\n         MVC   PPLUPT,CPPLUPT      SET UP PPL\n         MVC   PPLECT,CPPLECT\n         LA    R1,WECB\n         ST    R1,PPLECB\n         L     R1,APCL\n         ST    R1,PPLPCL\n         LA    R1,WANS\n         ST    R1,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         XC    PPLUWA,PPLUWA\n         DROP  R2,R3               #####\n         CALLTSSR EP=IKJPARS,      PARSE THE COMMAND                   X\n               MF=(E,WPPL)\n         CLC   WANS,=X'FF000000'   PARSE OK?\n         BE    RGERR5              ERROR IF NOT\n         L     R1,WANS             POINT TO PDL\n         USING IKJPARMD,R1         #####\n         TM    PGRP+6,X'80'        PARAMETER PRESENT?\n         BZ    RG500               GO LIST CURRENT GROUP NAME IF NOT\n         L     R2,PGRP             POINT TO GROUP NAME\n         LH    R3,PGRP+4           GET LENGTH\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* PARSE COMMAND TO GET GROUP NAME (CONTINUED)                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         STC   R3,WGROUPL          SAVE LENGTH OF GROUP NAME\n         BCTR  R3,0                DECREMENT FOR EXECUTE\n         MVC   WGROUPN(0),0(R2)    **EXECUTED**\n         EX    R3,*-6              MOVE IN GROUP NAME\n         IKJRLSA (1)               FREE PDL STORAGE\n         DROP  R1                  #####\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* CHANGE CURRENT CONNECT GROUP                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG100    EQU   *\n         MVC   WINSGRPL,WGROUPL         SET UP INSERTS FOR\n         LA    R1,WGROUPN               POSSIBLE ERROR MESSAGE\n         STCM  R1,7,WINSGRPA\n         LA    R1,X'84'\n         STC   R1,WINSGR2L\n         LA    R1,WSAVR15\n         STCM  R1,7,WINSGR2A\n         LA    R1,2\n         ST    R1,WINSGRPC\n         RACINIT GROUP=WGROUP,ENVIR=CHANGE,MF=(E,WRACINIT)\n         LTR   R15,R15                  SUCCESSFUL?\n         BZ    RG600                    YES - GO PROPAGATE ADSP TO GET\n*                                             AROUND IBM BUG\n         ST    R15,WSAVR15              ELSE SAVE FOR ERROR MSG AND\n         C     R15,=XL4'14'             CHECK ERROR CODE\n         BE    RGNOGRP                  BIF NOT DEFINED TO GROUP\n         C     R15,=XL4'18'\n         BE    RGFEXIT                  BIF FAILED BY INST. EXIT\n         C     R15,=XL4'24'\n         BE    RGGREV                   BIF USER REVOKED IN GROUP\n         C     R15,=XL4'30'\n         BE    RGNOTERM                 BIF TERMINAL NOT ALLOWED\n         B     RGRACERR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* LIST CURRENT CONNECT GROUP                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG500    EQU   *\n         L     R1,WACEEP                ADDRESS ACEE\n         USING ACEE,R1                  #####\n         MVC   WINSGRPL,ACEEGRPL        SET UP INSERTS\n         MVC   WGROUPN,ACEEGRPN\n         DROP  R1                       #####\n         LA    R1,WGROUPN\n         STCM  R1,7,WINSGRPA\n         LA    R1,1\n         ST    R1,WINSGRPC\n         LA    R2,WINSGRP               ISSUE MESSAGE GIVING CURRENT\n         LA    R3,RGM02                 GROUP\n         BAL   LR,RGEFF02\n         B     RG900\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* PROPAGATE ADSP FROM ACEE TO JSCB TO GET AROUND IBM DESIGN FLAW      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG600    EQU   *\n         L     R1,CVTPTR                GET JSCB ADDRESS\n         USING CVT,R1                   #####\n         L     R1,CVTTCBP\n         L     R1,4(,R1)\n         USING TCB,R1                   #####\n         L     R2,TCBJSCB\n         USING IEZJSCB,R2               #####\n         DROP  R1                       #####\n         L     R3,WACEEP                GET ACEE ADDRESS\n         USING ACEE,R3                  #####\n         MODESET KEY=ZERO               GET UPDATE ACCESS TO JSCB\n         NI    JSCBFBYT,X'FF'-JSCBADSP  TURN OFF ADSP IN JSCB\n         TM    ACEEFLG1,ACEEADSP        DOES USER NOW HAVE ADSP?\n         BZ    RG650                    /NO  - LEAVE JSCBADSP OFF\n         OI    JSCBFBYT,JSCBADSP        /YES - TURN JSCBADSP ON\nRG650    MODESET KEY=NZERO              BACK TO OUR NORMAL KEY\n         B     RG900\n         DROP  R2,R3                    #####\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* CLEANUP AND LEAVE                                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRG900    EQU   *\nRG999    EQU   *\n         LR    R1,CCR                   GET ADDR/LENGTH OF\n         LA    R0,LWORKA                WORKING STORAGE\n         L     CCR,4(,CCR)              FIND LAST SAVE AREA\n         L     R2,WRETCDE               SAVE RETURN CODE\n         FREEMAIN R,LV=(0),A=(1)        FREE WORKING STORAGE\n         LR    R15,R2                   GET RETURN CODE\n         RETURN (14,12),RC=(15)         RESTORE REGS AND RETURN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* ERROR HANDLING                                                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n*\n* RACF NOT ACTIVE\n*\nRGNORACF SR    R2,R2                    NO INSERT LIST\n         LA    R3,RGM03                 ISSUE MESSAGE 3\n         BAL   LR,RGEFF02\n         B     RGRET4                   RC=4\n*\n* USER NOT DEFINED TO RACF\n*\nRGNOUSER SR    R2,R2                    NO INSERT LIST\n         LA    R3,RGM04                 ISSUE MESSAGE 4\n         BAL   LR,RGEFF02\n         B     RGRET4                   RC=4\n*\n* INVALID ACEE\n*\nRGACERR  LA    R2,INSACEE               INSERT = 'ACEE'\n         LA    R3,RGM05                 ISSUE MESSAGE 5\n         BAL   LR,RGEFF02\n         B     RGRET16                  RC=16\n*\n* INVALID PARM LIST (PSCB ADDR WRONG)\n*\nRGERR2   LA    R2,INSPSCB               INSERT = 'PSCB'\n         LA    R3,RGM05                 ISSUE MESSAGE 5\n         BAL   LR,RGEFF02\n         B     RGRET16                  RC=16\n*\n* INVALID PARM LIST (PARM LENGTH WRONG)\n*\nRGERR4   LA    R2,INSPARM               INSERT = 'PARAMETER LENGTH'\n         LA    R3,RGM05                 ISSUE MESSAGE 5\n         BAL   LR,RGEFF02\n         B     RGRET8                   RC=8\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* ERROR HANDLING CONTINUED                                            *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n*\n* PARSE ERROR\n*\nRGERR5   ST    R15,WSAVR15              SAVE ERROR CODE\n         LA    R2,WINSR15               INSERT = 'PARAMETER LENGTH'\n         USING INSDSECT,R2              #####\n         LA    R3,1                     SET UP INSERT\n         ST    R3,INSCNT\n         MVI   INSLEN,X'84'             LEN=4, TRANSLATE TO NUMERIC\n         LA    R3,WSAVR15\n         STCM  R3,7,INSDATA\n         LA    R3,RGM06                 ISSUE MESSAGE 6\n         BAL   LR,RGEFF02\n         B     RGRET16                  RC=16\n*\n* USER NOT DEFINED IN REQUESTED GROUP\n*\nRGNOGRP  LA    R2,WINSGRP               INSERT = GROUP NAME\n         LA    R3,RGM07                 ISSUE MESSAGE 7\n         BAL   LR,RGEFF02\n         B     RGRET8                   RC=8\n*\n* RACINIT FAILED BY INST. EXIT\n*\nRGFEXIT  SR    R2,R2                    NO INSERT\n         LA    R3,RGM08                 ISSUE MESSAGE 8\n         BAL   LR,RGEFF02\n         B     RGRET8                   RC=8\n*\n* USER REVOKED IN REQUESTED GROUP\n*\nRGGREV   LA    R2,WINSGRP               INSERT = GROUP NAME\n         LA    R3,RGM10                 ISSUE MESSAGE 10\n         BAL   LR,RGEFF02\n         B     RGRET8                   RC=8\n*\n* TERMINAL NOT AUTHORIZED\n*\nRGNOTERM L     R2,WACEEP                GET ACEE ADDRESS\n         USING ACEE,R2                  #####\n         LA    R2,ACEETRID              POINT TO TERMINAL ID\n         DROP  R2                       #####\n         STCM  R2,7,WINSGR2A            PUT INTO INSERT LIST\n         LA    R2,8                     LENGTH OF INSERT IS 8\n         STC   R2,WINSGR2L\n         LA    R2,WINSGRP               INSERT = GRP NAME/TERMINAL ID\n         LA    R3,RGM12                 ISSUE MESSAGE 12\n         BAL   LR,RGEFF02\n         B     RGRET8                   RC=8\n*\n* UNEXPECTED RACINIT RETURN CODE\n*\nRGRACERR LA    R2,WINSGRP               INSERT GROUP NAME/RC\n         LA    R3,RGM11                 ISSUE MESSAGE 10\n         BAL   LR,RGEFF02\n         B     RGRET16                  RC=16\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* INTERFACE TO IKJEFF02     R2->INSDSECT, R3->CL4'MSGID',LR->RETURN   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRGEFF02  ST    LR,WSAVLR           SAVE RETURN REG\n         XC    MTPARML(MTLENMT),MTPARML  CLEAR PARMS\n         LA    R1,MTCSECTP         INIT PARMS\n         ST    R1,MTPLPTR\n         TM    WFLAGS,WFCP         CP?\n         BZ    RGEFF02A            NO CPPL IF NOT, SO USE WTP\n         L     R1,WCPPLP\n         ST    R1,MTCPPLP\n         OI    MTSW1,MTPUTLSW      SET FOR PUTLINE IF CPPL\n         B     RGEFF02B\nRGEFF02A OI    MTSW1,MTWTPSW       SET FOR WTP IF NO CPPL\nRGEFF02B OI    MTSW1,MTHEXSW       HEX TRANSLATION FOR NUMERIC INSERTS\n         OI    MTHIGH,X'80'\n         L     R1,AMSGS\n         ST    R1,MTCSECTP\n         MVC   MTMSGID(4),0(R3)\n         LTR   R2,R2               ANY INSERTS?\n         BZ    RGEFF02D            BIF NOT\n         USING INSDSECT,R2         #####\n         L     R1,INSCNT           GET NUMBER OF INSERTS\n         C     R1,=F'&NUMINS'      ENSURE COUNT OK\n         BNH   RGEFF02C\n         ABEND RGA01               IF NOT, USER 1 ABEND\nRGEFF02C SLL   R1,2                ELSE GET COUNT*4\n         BCTR  R1,0                LESS ONE FOR EXECUTE\n         MVC   MTINSRTS(0),INSLEN  **EXECUTED**\n         EX    R1,*-6              MOVE INSERT DATA INTO PARMLIST\n         DROP  R2                  #####\nRGEFF02D EQU   *\n         CALLTSSR EP=IKJEFF02,     ISSUE MESSAGE                       X\n               MF=(E,MTPARML)\n         L     LR,WSAVLR           RETURN TO CALLER\n         BR    LR\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* ROUTINES TO SET RETURN CODE AND BEGIN TO EXIT                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRGRET4   LA    R1,4\n         ST    R1,WRETCDE\n         B     RG900\nRGRET8   LA    R1,8\n         ST    R1,WRETCDE\n         B     RG900\nRGRET16  LA    R1,16\n         ST    R1,WRETCDE\n         B     RG900\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* CONSTANTS, ETC.                                                     *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nAPCL     DC    A(PCL)\nAMSGS    DC    A(MSGS)\n         DS    0F\nRACINIT  RACINIT ENVIR=CHANGE,MF=L\nRACINITL EQU   *-RACINIT\n         DS    0F\nEXTRACT  EXTRACT ,'S',FIELDS=(PSB),MF=L\nEXTRACTL EQU   *-EXTRACT\n         DS    0F\nINSACEE  DC    F'1',AL1(L'CACEE),AL3(CACEE)\nINSPSCB  DC    F'1',AL1(L'CPSCB),AL3(CPSCB)\nINSPARM  DC    F'1',AL1(L'CPMLN),AL3(CPMLN)\nCACEE    DC    C'ACEE'\nCPSCB    DC    C'PSCB'\nCPMLN    DC    C'PARAMETER LENGTH'\nRGA01    EQU   1                   USER 1 ABEND CODE\nRGM02    DC    C'RG02'             MESSAGE ID'S\nRGM03    DC    C'RG03'\nRGM04    DC    C'RG04'\nRGM05    DC    C'RG05'\nRGM06    DC    C'RG06'\nRGM07    DC    C'RG07'\nRGM08    DC    C'RG08'\nRGM09    DC    C'RG09'\nRGM10    DC    C'RG10'\nRGM11    DC    C'RG11'\nRGM12    DC    C'RG12'\n         LTORG\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* IBM DSECTS                                                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         PRINT NOGEN\n         IKJCPPL\n         IKJPPL\nLPPL     EQU   *-PPL\n         IHAACEE\n         IHAASCB\n         IHAASXB\n         IKJTCB\n         IEZJSCB\n         ICHPRCVT\n         CVT   DSECT=YES\n         PRINT GEN\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* LOCAL DSECTS                                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nWORKA    DSECT\nWSAVE    DS    18F                 MUST BE FIRST IN WORKA\nWSAVLR   DS    F                   SAVE AREA FOR LR FOR INTERNAL SUBS\nWSAVR15  DS    F                   SAVE AREA FOR R15 FOR ERROR MSGS\nWCPPLP   DS    A                   A(CPPL) IF ANY\nWACEEP   DS    A                   A(ACEE)\nWANS     DS    A                   A(PDE)\nWAPSCB   DS    A                   A(PSCB)\nWECB     DS    F                   PARSE ECB\nWRETCDE  DS    F                   RETURN CODE FOR CALLER\nWINS     DS    F,FL1,AL3           MAPPED BY INSDSECT\nWGROUP   DS    0XL9                GROUP PARAMETER FOR RACINIT:\nWGROUPL  DS    X                     LENGTH OF NEW GROUP NAME\nWGROUPN  DS    CL8                   NEW GROUP NAME\n         DS    0F\nWPPL     DS    XL(LPPL)            PARSE PARAMETER LIST(FULLWORD ALIGN)\n         DS    0F\nWRACINIT DS    XL(RACINITL)        AREA FOR LIST FORM RACINIT\n         DS    0F\nWEXTRACT DS    XL(EXTRACTL)        AREA FOR LIST FORM EXTRACT\nWFLAGS   DS    X                   FLAGS:\nWFCP     EQU   X'80'                 RGROUP RUNNING AS A CP\nWINSGRP  DS    0F                  MSG INSERT FOR GROUP NAME:\nWINSGRPC DS    F                     INSERT COUNT\nWINSGRPL DS    X                     LENGTH OF INSERT\nWINSGRPA DS    AL3                   ADDR OF INSERT\nWINSGR2L DS    X                     LENGTH OF INSERT\nWINSGR2A DS    AL3                   ADDR OF INSERT\nWINSR15  DS    XL8                 INSERT AREA FOR R15\n         IKJEFFMT MTNINST=&NUMINS\nLWORKA   EQU   *-WORKA\nINSDSECT DSECT\nINSCNT   DS    F                   COUNT OF INSERTS\nINSLEN   DS    FL1                 LENGTH OF INSERT\nINSDATA  DS    AL3                 ADDR OF INSERT\n* . . .\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* PARSE PARAMETER CONTROL LIST (PCL)                                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nRGROUP   CSECT ,  ENSURE WE ARE IN A CSECT\nPCL      IKJPARM\nPGRP     IKJIDENT 'GROUP NAME',UPPERCASE,MAXLNTH=8,                    X\n               FIRST=ALPHA,OTHER=ALPHANUM,                             X\n               HELP=('NAME OF A RACF GROUP TO WHICH YOU ARE CONNECTED')\n         IKJENDP\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n* MESSAGES FOR ISSUANCE BY IKJEFF02                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nMSGS     CSECT\n         IKJTSMSG ('RG02 CURRENT GROUP IS ',),RG02\n         IKJTSMSG ('RG03 RGROUP IGNORED, RACF NOT ACTIVE'),RG03\n         IKJTSMSG ('RG04 RGROUP IGNORED, NOT DEFINED TO RACF'),RG04\n         IKJTSMSG ('RG05 INVALID ',),RG05\n         IKJTSMSG ('RG06 PARSE ERROR ',),RG06\n         IKJTSMSG ('RG07 RGROUP FAILED. YOU ARE NOT AUTHORIZED TO USE G$\n               ROUP ',),RG07\n         IKJTSMSG ('RG08 RGROUP FAILED BY INSTALLATION EXIT'),RG08\n         IKJTSMSG ('RG10 RGROUP FAILED. YOU ARE NOT CURRENTLY AUTHORIZE$\n               D TO USE GROUP ',),RG10\n         IKJTSMSG ('RG11 RACINIT FAILED, GROUP = ',,', RC = ',),RG11\n         IKJTSMSG ('RG12 RGROUP FAILED. GROUP ',,' IS NOT AUTHORIZED TO$\n                USE TERMINAL ',),RG12\n         IKJTSMSG\n         END   RGROUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SACXTRT": {"ttr": 7681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01G\\x01G\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 327, "newlines": 327, "modlines": 0, "user": "FILE013"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM:       SACXTRT                                            *\n*                                                                     *\n*   WRITTEN BY:                                                       *\n*                                                                     *\n*   DATE:          FEBRUARY 18, 1987                                  *\n*                                                                     *\n*   FUNCTION:      THIS PROGRAM WRITES A RECORD TO 'DDNAME=RACFOUT'   *\n*                  FOR EACH GROUP IN THE RACF DATABASE.               *\n*                                                                     *\n*   SPECIAL NOTES: THIS MODULE MUST RESIDE IN APF AUTHORIZED LIBRARY  *\n*                  AS IT ISSUES RACF MANAGER REQUESTS.                *\n*                                                                     *\n*                  THIS MODULE IS PROTECTED BY RACF PROGRAM           *\n*                  PROTECTION.  IT SHOULD BE RESTRICTED TO SELECT     *\n*                  AUTHORIZED USERS DUE TO THE NATURE OF IT'S         *\n*                  FUNCTION.                                          *\n*                                                                     *\n*   GLOSSARY OF OUTPUT:                                               *\n*   ===================                                               *\n*                                                                     *\n*   SMFID   - SMFID OF SYSTEM WHERE DATA RETRIEVED                    *\n*   PROFLEN - LENGTH OF CONNECT                                       *\n*   RACPROF - CONNECT NAME                                            *\n*   AUTHDATE- DATE CREATED                                            *\n*   LJDATE  - LAST JOB ACCESS DATE                                    *\n*   AUTHOR  - OWNER                                                   *\n*   UACC    - GROUP UNIVERSAL ACCESS                                  *\n*   INITCNT - RACINIT COUNT                                           *\n*   FLAG1   - GROUP-ADSP                                              *\n*   FLAG2   - GROUP-SPECIAL                                           *\n*   FLAG3   - GROUP-OPEATIONS                                         *\n*   FLAG4   - GROUP-REVOKED                                           *\n*   FLAG5   - GROUP-GRPACC                                            *\n*   NOTRMUAC- TERMINAL UNIVERSAL ACCESS                               *\n*   GRPAUDIT- GROUP-AUDITOR                                           *\n*                                                                     *\n*   REGISTER CONVENTIONS:                                             *\n*                                                                     *\n*      PROLOGUE : R2 - CVT BASE                                       *\n*                 R3 - ASCB BASE                                      *\n*                 R4 - ASXB BASE                                      *\n*                 R5 - ACEE BASE                                      *\n*                 R8 - WORKAREA BASE                                  *\n*                                                                     *\n*      MAIN     : R2 - GENERAL TARGET                                 *\n*                 R3 - TARGET LENGTH                                  *\n*                 R4 - GENERAL SOURCE                                 *\n*                 R5 - SOURCE LENGTH                                  *\n*                 R6 - GENERAL LENGTH                                 *\n*                 R7 - GENERAL ADDRESS                                *\n*                 R8 - WORKAREA BASE                                  *\n*                 R9 - LINK CONTROL REGISTER                          *\n*                 R10- LINK CONTROL REGISTER                          *\n*                                                                     *\n*      NOTE - OPERANDS ON ICHEINTY MACRO MUST BE ABSOLUTE             *\n*                                                                     *\n*      THE FOLLOWING SAMPLE JCL CAN BE USED TO EXECUTE SACXTRT.       *\n*                                                                     *\n*      //STEP1    EXEC PGM=SACXTRT,REGION=1024K                       *\n*      //STEPLIB  DD DSN=YOUR.APFAUTH.LIBRARY,DISP=SHR                *\n*      //SYSPRINT DD SYSOUT=*                                         *\n*      //SYSUDUMP DD SYSOUT=*                                         *\n*      //RACFOUT  DD DSN=YOUR.TARGET.DATASET,                         *\n*      //            DISP=(NEW,CATLG,DELETE),                         *\n*      //            UNIT=3380,                                       *\n*      //            SPACE=(CYL,(2,1)),                               *\n*      //            DCB=(LRECL=46,RECFM=VB,BLKSIZE=23460)            *\n*      //*                                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         REGISTER\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n*\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n*\n         REGISTER\n*\n         USING CVT,R2\n         USING ASCB,R3\n         USING ASXB,R4\n         USING ACEE,R5\n         USING WORKAREA,R8\n         USING SACXTRT,R12\nSACXTRT CSECT\n         SAVE  (14,12),,'SACXTRT &SYSDATE.&SYSTIME'\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n*        LR    R11,R1             SET PARM SAVE REGISTER\n         GETMAIN R,LV=WORKSIZE\n         ST    R1,8(,R1)          FORWARD POINTER\n         ST    R13,4(,R1)         BACKWARD POINTER\n         LR    R8,R1              ESTABLISH ADDRESSABILITY\n         LR    R13,R1             POINT TO NEW SAVE AREA\n         MVC   LINE(133),BLANKS   BLANK OUT PRINT LINE\n         OPEN  (RACFOUT,(OUTPUT),SYSPRINT,(OUTPUT))\n         SPACE\n         L     R2,CVTPTR          POINT TO CVT\n         L     R3,CVTTCBP         POINT TO TCB AND ASCB POINTERS\n         L     R3,12(,R3)         POINT TO CURRENT ASCB\n         L     R4,ASCBASXB        POINT TO ASXB\n         L     R5,ASXBSENV        POINT TO ACEE\n         LTR   R5,R5              IS THERE AN ACEE?\n         BNZ   RACFCHK           ..YES, CONTINUE\n         MVC   LINE(L'MSG1),MSG1  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nRACFCHK  RACSTAT\n         LTR   R15,R15            IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG2),MSG2  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         EJECT\nRACFOK   L     R3,CVTSMCA         POINT TO SMCA\n         USING SMCABASE,R3\n         MVC   SMFID(4),SMCASID   RETRIEVE SMFID FROM SMCA\n         DROP  R2\n         DROP  R3\n         DROP  R4\n         DROP  R5\n         MVI   ENTRYNAM,X'00'\n         MVC   ENTRYNAM+1(16),ENTRYNAM SET INITIAL PROFILE NAME\n         MVI   ENTRY,X'11'        SET INITIAL PROFILE LENGTH\n         EJECT\nLOOP     LA    R2,RBA             POINT TO TARGET FIELD\n         L     R3,=A(WKAREAL)     SET FIELD LENGTH\n         XR    R4,R4              SET SOURCE FIELD TO NULL\n         XR    R5,R5              SET SOURCE LENGTH AND PAD TO X'00'\n         MVCL  R2,R4              CLEAR THE WORK AREA\n         ICHEINTY NEXTC,TYPE='CON',ENTRY=ENTRY,WKAREA=WKAREA,          X\n               ACTIONS=(ACTN1,ACTN2,ACTN3,ACTN4,ACTN5,ACTN6,           X\n               ACTN7,ACTN8,ACTN9,ACTN10,ACTN11,ACTN12)\n         LTR   R15,R15            WAS LOCATE SUCCESSFUL?\n         BNZ   LOCATNZ            ..NO, PROCESS EXCEPTION\n         BAL   R9,LOCAT0\n         B     LOOP\n         EJECT\nLOCATNZ  C     R15,=F'12'         HAVE WE CHECKED ALL CONNECTS?\n         BE    LASTCON            ..YES\n         SPACE\nBADRETCD CVD   R15,WORKD          CONVERT RETURN CODE TO DECIMAL\n         UNPK  MSG3CD,WORKD+6(2)  MOVE TO ERROR MESSAGE\n         OI    MSG3CD+1,X'F0'     MAKE LAST CHARACTER PRINTABLE\n         MVC   LINE(L'MSG3),MSG3  SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nLASTCON  MVC   LINE(L'MSG4),MSG4  SETUP MESSAGE\n         PUT   SYSPRINT,LINE      WRITE SUCCESS MESSGAE\n         SPACE\nRETURN   CLOSE (RACFOUT,,SYSPRINT)\n         L     R13,SAVEOLD        BACKWARD POINTER\n         DROP  R8                 DROP R8 ADDRESSABILITY\n         FREEMAIN R,LV=WORKSIZE,A=(R8)\n         USING SAVEAREA,R13       USE OLD SAVE AREA FRO ADDRESSABILITY\n         XC    SAVER15(4),SAVER15 CLEAR RETURN CODE\n         XC    SAVENEW,SAVENEW    CLEAR FORWARD POINTER\n         RETURN (14,12)           RETURN TO CALLER\n         EJECT\nLOCAT0   LA    R2,RACPROF         POINT TO TARGET FIELD\n         XR    R3,R3              CLEAR WORK REGISTER\n         IC    R3,ENTRY           GET LENGTH OF PROFILE NAME\n         STC   R3,PROFLEN         GET LENGTH OF PROFILE NAME\n         LR    R5,R3\n         LA    R4,ENTRYNAM        POINT TO SOURCE FIELD\n         MVC   RACPROF(17),BLANKS BLANK OUT TARGET FIELD\n         MVCL  R2,R4              MOVE PROFILE NAME TO BUFFER\n         XR    R6,R6              CLEAR R6\n         LA    R6,RETDATA         SET INITIAL ADDRESS FOR RETDATA\n$AUTHDTE LA    R2,AUTHDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHOR  LA    R2,AUTHOR          POINT TO TARGET\n         BAL   R10,MOVEIT\n$LJDATE  LA    R2,LJDATE          POINT TO TARGET\n         BAL   R10,MOVEIT\n$UACC    LA    R2,UACC            POINT TO TARGET\n         BAL   R10,MOVEIT\n$INITCNT LA    R2,INITCNT         POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG1   LA    R2,FLAG1           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG2   LA    R2,FLAG2           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG3   LA    R2,FLAG3           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG4   LA    R2,FLAG4           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG5   LA    R2,FLAG5           POINT TO TARGET\n         BAL   R10,MOVEIT\n$NOTRMU  LA    R2,NOTRMUAC        POINT TO TARGET\n         BAL   R10,MOVEIT\n$GRPAUDT LA    R2,GRPAUDIT        POINT TO TARGET\n         BAL   R10,MOVEIT\n         PUT   RACFOUT,RACREC\n         BR    R9\nMOVEIT   XR    R7,R7              CLEAR WORK REGISTER\n         LH    R7,0(,R6)          LOAD RETURNED LENGTH\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,2(,R6)          POINT TO SOURCE\n         MVCL  R2,R4\n         LA    R6,2(R7,R6)        POINT TO NEXT FIELD\n         BR    R10\n         LTORG\nBLANKS   DC    CL255' '\n         SPACE\nMSG1     DC    C'1**ERROR** - TASK ACEE NOT FOUND'\nMSG2     DC    C'1**ERROR** - RACF IS NOT OPERATING'\nMSG3     DC    C'1**ERROR** - RACF INTERNAL ERROR CODE = XX'\n         ORG   *-2\nMSG3CD   DS    CL2\nMSG4     DC    C'1SACXTRT COMPLETED SUCCESSFULLY'\n         SPACE\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FA,LRECL=133,   X\n               BLKSIZE=133\nRACFOUT  DCB   DSORG=PS,DDNAME=RACFOUT,MACRF=PM,RECFM=FB\n         SPACE\nENTRY    DS    AL1(1)             LENGTH OF PROFILE NAME FIELD\nENTRYNAM DS    XL44               PROFILE NAME\nWKAREA   DS    0F\nWKAREAS  DC    AL4(WKAREAL+4)     LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nRETDATA  DS    CL58               RETURNED DATA\nWKAREAE  EQU   *                  END OF WORK AREA\nWKAREAL  EQU   *-RBA              CALCULATE WORK AREA LENGTH\nACTN1    ICHEACTN FIELD=AUTHDATE  CREATE DATE\nACTN2    ICHEACTN FIELD=AUTHOR    OWNER\nACTN3    ICHEACTN FIELD=LJDATE    LAST ACCESS DATE\nACTN4    ICHEACTN FIELD=UACC      UNIVERSAL ACCESS\nACTN5    ICHEACTN FIELD=INITCNT   RACINIT COUNT\nACTN6    ICHEACTN FIELD=FLAG1     ADSP\nACTN7    ICHEACTN FIELD=FLAG2     SPECIAL\nACTN8    ICHEACTN FIELD=FLAG3     OPERATIONS\nACTN9    ICHEACTN FIELD=FLAG4     REVOKED\nACTN10   ICHEACTN FIELD=FLAG5     GRPACC\nACTN11   ICHEACTN FIELD=NOTRMUAC  TERMINAL UNIVERSAL ACCESS\nACTN12   ICHEACTN FIELD=GRPAUDIT  AUDITOR\n         EJECT\n         PRINT NOGEN\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nWORKD    DS    D                  DOUBLEWORD WORK AREA FOR ARITHMETIC\nLINE     DS    CL133              DETAIL PRINT LINE\n         DS    0D\nRACREC   DS    CL46               DETAIL RAC RECORD\n         ORG   RACREC\nSMFID    DS    CL4                SMFID FROM SMCASID\nPROFLEN  DS    B                  CONNECT NAME LENGTH\nRACPROF  DS    CL17               CONNECT NAME\nAUTHDATE DS    CL3                CREATE DATE\nAUTHOR   DS    CL8                OWNER\nLJDATE   DS    CL3                LAST ACCESS DATE\nUACC     DS    B                  GROUP UNIVERSAL ACCESS\nINITCNT  DS    CL2                RACINIT COUNT\nFLAG1    DS    B                  ADSP\nFLAG2    DS    B                  SPECIAL\nFLAG3    DS    B                  OPERATIONS\nFLAG4    DS    B                  REVOKED\nFLAG5    DS    B                  GRPACC\nNOTRMUAC DS    B                  TERMINAL UNIVERSAL ACCESS\nGRPAUDIT DS    B                  AUDITOR\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         CVT DSECT=YES\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEESMCA ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAGXTRT": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x018\\x018\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 312, "newlines": 312, "modlines": 0, "user": "FILE013"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM:       SAGXTRT                                            *\n*                                                                     *\n*   WRITTEN BY:                                                       *\n*                                                                     *\n*   DATE:          FEBRUARY 18, 1987                                  *\n*                                                                     *\n*   FUNCTION:      THIS PROGRAM WRITES A RECORD TO 'DDNAME=RACFOUT'   *\n*                  FOR EACH GROUP IN THE RACF DATABASE.               *\n*                                                                     *\n*   SPECIAL NOTES: THIS MODULE MUST RESIDE IN APF AUTHORIZED LIBRARY  *\n*                  AS IT ISSUES RACF MANAGER REQUESTS.                *\n*                                                                     *\n*                  THIS MODULE IS PROTECTED BY RACF PROGRAM           *\n*                  PROTECTION.  IT SHOULD BE RESTRICTED TO SELECT     *\n*                  AUTHORIZED USERS DUE TO THE NATURE OF IT'S         *\n*                  FUNCTION.                                          *\n*                                                                     *\n*   GLOSSARY OF OUTPUT:                                               *\n*                                                                     *\n*   SMFID   - SMFID OF SYSTEM WHERE DATA RETRIEVED                    *\n*   PROFLEN - LENGTH OF GROUP                                         *\n*   RACPROF - GROUP                                                   *\n*   SUPGROUP- SUPERIOR GROUP                                          *\n*   AUTHDATE- DATE CREATED                                            *\n*   AUTHOR  - OWNER                                                   *\n*   UACC    - GROUP UNIVERSAL ACCESS                                  *\n*   NOTRMUAC- TERMINAL UNIVERSAL ACCESS                               *\n*   INSTLEN - LENGTH OF INSTALLATION DATA FIELD                       *\n*   INSTDATA- INSTALLATION DATA                                       *\n*                                                                     *\n*   REGISTER CONVENTIONS:                                             *\n*                                                                     *\n*      PROLOGUE : R2 - CVT BASE                                       *\n*                 R3 - ASCB BASE                                      *\n*                 R4 - ASXB BASE                                      *\n*                 R5 - ACEE BASE                                      *\n*                 R8 - WORKAREA BASE                                  *\n*                                                                     *\n*      MAIN     : R2 - GENERAL TARGET                                 *\n*                 R3 - TARGET LENGTH                                  *\n*                 R4 - GENERAL SOURCE                                 *\n*                 R5 - SOURCE LENGTH                                  *\n*                 R6 - GENERAL LENGTH                                 *\n*                 R7 - GENERAL ADDRESS                                *\n*                 R8 - WORKAREA BASE                                  *\n*                 R9 - LINK CONTROL REGISTER                          *\n*                 R10- LINK CONTROL REGISTER                          *\n*                                                                     *\n*      NOTE - OPERANDS ON ICHEINTY MACRO MUST BE ABSOLUTE             *\n*                                                                     *\n*      THE FOLLOWING SAMPLE JCL CAN BE USED TO EXECUTE SAGXTRT.       *\n*                                                                     *\n*      //STEP1    EXEC PGM=SAGXTRT,REGION=1024K                       *\n*      //STEPLIB  DD DSN=YOUR.APFAUTH.LIBRARY,DISP=SHR                *\n*      //SYSPRINT DD SYSOUT=*                                         *\n*      //SYSUDUMP DD SYSOUT=*                                         *\n*      //RACFOUT  DD DSN=YOUR.TARGET.DATASET,                         *\n*      //            DISP=(NEW,CATLG,DELETE),                         *\n*      //            UNIT=3380,                                       *\n*      //            SPACE=(CYL,(2,1)),                               *\n*      //            DCB=(LRECL=294,RECFM=VB,BLKSIZE=23476)           *\n*      //*                                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         REGISTER\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n*\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n*\n         REGISTER\n*\n         USING CVT,R2\n         USING ASCB,R3\n         USING ASXB,R4\n         USING ACEE,R5\n         USING WORKAREA,R8\n         USING SAGXTRT,R12\nSAGXTRT CSECT\n         SAVE  (14,12),,'SAGXTRT &SYSDATE.&SYSTIME'\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n*        LR    R11,R1             SET PARM SAVE REGISTER\n         GETMAIN R,LV=WORKSIZE\n         ST    R1,8(,R1)          FORWARD POINTER\n         ST    R13,4(,R1)         BACKWARD POINTER\n         LR    R8,R1              ESTABLISH ADDRESSABILITY\n         LR    R13,R1             POINT TO NEW SAVE AREA\n         MVC   LINE(133),BLANKS   BLANK OUT PRINT LINE\n         OPEN  (RACFOUT,(OUTPUT),SYSPRINT,(OUTPUT))\n         SPACE\n         L     R2,CVTPTR          POINT TO CVT\n         L     R3,CVTTCBP         POINT TO TCB AND ASCB POINTERS\n         L     R3,12(,R3)         POINT TO CURRENT ASCB\n         L     R4,ASCBASXB        POINT TO ASXB\n         L     R5,ASXBSENV        POINT TO ACEE\n         LTR   R5,R5              IS THERE AN ACEE?\n         BNZ   RACFCHK           ..YES, CONTINUE\n         MVC   LINE(L'MSG1),MSG1  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nRACFCHK  RACSTAT\n         LTR   R15,R15            IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG2),MSG2  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         EJECT\nRACFOK   L     R3,CVTSMCA         POINT TO SMCA\n         USING SMCABASE,R3\n         MVC   SMFID(4),SMCASID   RETRIEVE SMFID FROM SMCA\n         DROP  R2\n         DROP  R3\n         DROP  R4\n         DROP  R5\n         XR    R3,R3\n         STH   R3,RACRDW2\n         MVI   ENTRYNAM,X'00'\n         MVC   ENTRYNAM+1(7),ENTRYNAM SET INITIAL PROFILE NAME\n         MVI   ENTRY,X'08'        SET INITIAL PROFILE LENGTH\n         EJECT\nLOOP     LA    R2,RBA             POINT TO TARGET FIELD\n         L     R3,=A(WKAREAL)     SET FIELD LENGTH\n         XR    R4,R4              SET SOURCE FIELD TO NULL\n         XR    R5,R5              SET SOURCE LENGTH AND PAD TO X'00'\n         MVCL  R2,R4              CLEAR THE WORK AREA\n         ICHEINTY NEXT,TYPE='GRP',ENTRY=ENTRY,WKAREA=WKAREA,           X\n               ACTIONS=(ACTN1,ACTN2,ACTN3,ACTN4,ACTN5,ACTN6)\n         LTR   R15,R15            WAS LOCATE SUCCESSFUL?\n         BNZ   LOCATNZ            ..NO, PROCESS EXCEPTION\n         BAL   R9,LOCAT0\n         B     LOOP\n         EJECT\nLOCATNZ  C     R15,=F'12'         HAVE WE CHECKED ALL USERS?\n         BE    LASTGRP            ..YES\n         SPACE\nBADRETCD CVD   R15,WORKD          CONVERT RETURN CODE TO DECIMAL\n         UNPK  MSG3CD,WORKD+6(2)  MOVE TO ERROR MESSAGE\n         OI    MSG3CD+1,X'F0'     MAKE LAST CHARACTER PRINTABLE\n         MVC   LINE(L'MSG3),MSG3  SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nLASTGRP  MVC   LINE(L'MSG4),MSG4  SETUP MESSAGE\n         PUT   SYSPRINT,LINE      WRITE SUCCESS MESSGAE\n         SPACE\nRETURN   CLOSE (RACFOUT,,SYSPRINT)\n         L     R13,SAVEOLD        BACKWARD POINTER\n         DROP  R8                 DROP R8 ADDRESSABILITY\n         FREEMAIN R,LV=WORKSIZE,A=(R8)\n         USING SAVEAREA,R13       USE OLD SAVE AREA FRO ADDRESSABILITY\n         XC    SAVER15(4),SAVER15 CLEAR RETURN CODE\n         XC    SAVENEW,SAVENEW    CLEAR FORWARD POINTER\n         RETURN (14,12)           RETURN TO CALLER\n         EJECT\nLOCAT0   LA    R2,RACPROF         POINT TO TARGET FIELD\n         XR    R3,R3              CLEAR WORK REGISTER\n         IC    R3,ENTRY           GET LENGTH OF PROFILE NAME\n         STC   R3,PROFLEN         GET LENGTH OF PROFILE NAME\n         LR    R5,R3\n         LA    R4,ENTRYNAM        POINT TO SOURCE FIELD\n         MVC   RACPROF(8),BLANKS  BLANK OUT TARGET FIELD\n         MVCL  R2,R4              MOVE PROFILE NAME TO PRINT LINE\n         XR    R6,R6              CLEAR R6\n         LA    R6,RETDATA         SET INITIAL ADDRESS FOR RETDATA\n$SUPGRP  LA    R2,SUPGROUP        POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHDTE LA    R2,AUTHDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHOR  LA    R2,AUTHOR          POINT TO TARGET\n         BAL   R10,MOVEIT\n$UACC    LA    R2,UACC            POINT TO TARGET\n         BAL   R10,MOVEIT\n$NOTRMU  LA    R2,NOTRMUAC        POINT TO TARGET\n         BAL   R10,MOVEIT\n$INST    LA    R2,INSTDATA\n         XR    R7,R7              CLEAR WORK REGISTER\n         IC    R7,2(R6)           INSTALLATION VARIABLE LENGTH FIELD\n         STC   R7,INSTLEN         INSTALLATION VARIABLE LENGTH FIELD\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,3(R6)           ESTABLISH FIRST BYTE OF DATA\n         EX    R3,BLNKINST\n         MVCL  R2,R4\n         LA    R7,39(R7)\n         STH   R7,RACRDW1\n         PUT   RACFOUT,RACREC\n         BR    R9\nMOVEIT   XR    R7,R7              CLEAR WORK REGISTER\n         LH    R7,0(,R6)          LOAD RETURNED LENGTH OF FLG4\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,2(,R6)          POINT TO SOURCE\n         MVCL  R2,R4\n         LA    R6,2(R7,R6)        POINT TO NEXT FIELD\n         BR    R10\n         LTORG\nBLANKS   DC    CL255' '\n         SPACE\nMSG1     DC    C'1**ERROR** - TASK ACEE NOT FOUND'\nMSG2     DC    C'1**ERROR** - RACF IS NOT OPERATING'\nMSG3     DC    C'1**ERROR** - RACF INTERNAL ERROR CODE = XX'\n         ORG   *-2\nMSG3CD   DS    CL2\nMSG4     DC    C'1SAGXTRT COMPLETED SUCCESSFULLY'\n         SPACE\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FA,LRECL=133,   X\n               BLKSIZE=133\nRACFOUT  DCB   DSORG=PS,DDNAME=RACFOUT,MACRF=PM,RECFM=VB\n         SPACE\nENTRY    DS    AL1(1)             LENGTH OF PROFILE NAME FIELD\nENTRYNAM DS    XL44               PROFILE NAME\nWKAREA   DS    0F\nWKAREAS  DC    AL4(WKAREAL+4)     LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nRETDATA  DS    CL282              RETURNED DATA\nWKAREAE  EQU   *                  END OF WORK AREA\nWKAREAL  EQU   *-RBA              CALCULATE WORK AREA LENGTH\nACTN1    ICHEACTN FIELD=SUPGROUP  SUPERIOR GROUP\nACTN2    ICHEACTN FIELD=AUTHDATE  CREATE DATE\nACTN3    ICHEACTN FIELD=AUTHOR    OWNER\nACTN4    ICHEACTN FIELD=UACC      UNIVERSAL ACCESS\nACTN5    ICHEACTN FIELD=NOTRMUAC  TERMINAL UNIVERSAL ACCESS\nACTN6    ICHEACTN FIELD=INSTDATA  INSTALLATION DATA\n         SPACE\nBLNKINST MVC   INSTDATA(255),BLANKS\n         EJECT\n         PRINT NOGEN\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nWORKD    DS    D                  DOUBLEWORD WORK AREA FOR ARITHMETIC\nLINE     DS    CL133              DETAIL PRINT LINE\n         DS    0D\nRACREC   DS    CL294              DETAIL RAC RECORD\n         ORG   RACREC\nRACRDW1  DS    H                  VARIABLE RECORD LENGTH\nRACRDW2  DS    H                  SEQUENCE FOR VBS RECORDS\nSMFID    DS    CL4                SMFID FROM SMCASID\nPROFLEN  DS    B                  USERID LENGTH\nRACPROF  DS    CL8                USERID\nSUPGROUP DS    CL8                SUPERIOR GROUP\nAUTHDATE DS    CL3                CREATE DATE\nAUTHOR   DS    CL8                OWNER\nUACC     DS    B                  GROUP UNIVERSAL ACCESS\nNOTRMUAC DS    B                  TERMINAL UNIVERSAL ACCESS\nINSTLEN  DS    B                  INSTALLATION DATA LENGTH\nINSTDATA DS    CL255              INSTALLATION DATA\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         CVT DSECT=YES\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEESMCA ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SANOADSP": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xa3\\x00\\xa3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 163, "newlines": 163, "modlines": 0, "user": "FILE013"}, "text": "*---------------------------------------------------------------------*\n*   PROGRAM:       SANOADSP                                           *\n*                                                                     *\n*   AUTHOR:                                                           *\n*                                                                     *\n*   DATE:          02/13/87                                           *\n*                                                                     *\n*   FUNCTION:      FLIPS THE 'ADSP' ATTRIBUTE OFF ON ALL              *\n*                  USER PROFILES.                                     *\n*                                                                     *\n*   SPECIAL NOTES: THIS MODULE MUST RESIDE IN APF AUTHORIZED LIBRARY  *\n*                  SINCE IT ISSUES RACF MANAGER REQUESTS.             *\n*                                                                     *\n*                  THIS PROGRAM SHOULD BE PROTECTED BY RACF PROGRAM   *\n*                  PROTECTION LIMITED TO SELECT USERS DUE TO THE      *\n*                  NATURE OF IT'S FUNCTION.                           *\n*   CHANGES:                                                          *\n*---------------------------------------------------------------------*\nNOADSP   CSECT\n         STM   14,12,12(13)       SAVE CALLERS REGISTERS\n         BALR  12,0               SET CURRENT ADDRESS\n         USING *,12               ESTABLISH ADDRESSABILITY\n         ST    13,SAVE+4          CHAIN SAVE AREA\n         LR    11,13              POINT TO CALLERS SAVE AREA\n         LA    13,SAVE            POINT TO OUR SAVE AREA\n         ST    13,8(11)           CHAIN SAVE AREA\n         OPEN  (SYSPRINT,(OUTPUT))\n         SPACE\n         L     2,16               POINT TO CVT\n         USING CVT,2\n         L     2,CVTTCBP          POINT TO TCB AND ASCB POINTERS\n         L     3,12(2)            POINT TO CURRENT ASCB\n         USING ASCB,3\n         L     3,ASCBASXB         POINT TO ASXB\n         USING ASXB,3\n         L     3,ASXBSENV         POINT TO ACEE\n         USING ACEE,3\n         LTR   3,3                IS THERE AN ACEE?\n         BNZ   ACEEOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG1),MSG1  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RACABND            AND TERMINATE THE PROGRAM\n         EJECT\nACEEOK   TM    ACEEFLG1,ACEESPEC  DO WE HAVE RACF SPECIAL AUTHORITY?\n         BO    APFAUTH            ..YES, CONTINUE\n         MVC   LINE(L'MSG2),MSG2  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RACABND            AND TERMINATE THE PROGRAM\n         EJECT\nAPFAUTH  L     3,4(2)             TCB POINTER\n         USING TCB,3\n         L     3,TCBJSCB          GET JSCB\n         USING IEZJSCB,3\n         XI    JSCBSWT1,JSCBPASS   FLIP THE APF AUTHORIZATION STATE\n         XI    JSCBOPTS,JSCBAUTH   FLIP THE APF AUTHORIZATION STATE\n         SPACE\n         RACSTAT\n         LTR   15,15              IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG3),MSG3  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RACABND            AND TERMINATE THE PROGRAM\n         SPACE\nRACFOK   DS    0H\n         LA    2,RBA              POINT TO TARGET FIELD\n         L     3,=A(WKAREAL)      SET FIELD LENGTH\n         XR    4,4                SET SOURCE FIELD TO NULL\n         XR    5,5                SET SOURCE LENGTH AND PAD TO X'00'\n         MVCL  2,4                CLEAR THE WORK AREA\n         MVI   ENTRYNAM,X'00'\n         MVC   ENTRYNAM+1(7),ENTRYNAM SET INITIAL PROFILE NAME\n         MVI   ENTRY,X'08'        SET INITIAL PROFILE LENGTH\nLOOP     ICHEINTY NEXT,                                                X\n               TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA\n         LTR   15,15              WAS LOCATE SUCCESSFUL?\n         BZ    MODIT              ..YES, CONTINUE\n         C     15,=F'12'          HAVE WE CHECKED ALL USERS?\n         BE    ALLDONE            ..YES, COMPLETED\n         B     RACABND\nMODIT    ICHEINTY ALTER,                                               X\n               TYPE='USR',ENTRY=ENTRY,                                 X\n               TESTS=(TEST1),                                          X\n               ACTIONS=(ACTION1)\n         LTR   15,15              WAS ALTER SUCCESSFUL?\n         BZ    DIDMOD             ..YES, CONTINUE\n         C     15,=F'52'          DID TEST FAIL?\n         BE    TSTFAIL            ..YES, COMPLETED\n         B     RACABND\nDIDMOD   MVI   LINE,X'40'\n         MVC   LINE+1(132),LINE\n         MVC   MSG5USR(8),ENTRYNAM\n         MVC   LINE(L'MSG5),MSG5\n         PUT   SYSPRINT,LINE\n         B     LOOP\nTSTFAIL  MVI   LINE,X'40'\n         MVC   LINE+1(132),LINE\n         MVC   MSG6USR(8),ENTRYNAM\n         MVC   LINE(L'MSG6),MSG6\n         PUT   SYSPRINT,LINE\n         B     LOOP\nALLDONE  CLOSE (SYSPRINT)\n         L     13,SAVE+4          POINT TO CALLERS SAVE AREA\n         RETURN (14,12),RC=0      RETURN TO CALLER\n         EJECT\nRACABND  CVD   15,WORKD           CONVERT RETURN CODE TO DECIMAL\n         UNPK  MSG4CD,WORKD+6(2)  MOVE TO ERROR MESSAGE\n         OI    MSG4CD+1,X'F0'     MAKE LAST CHARACTER PRINTABLE\n         MVI   LINE,X'40'\n         MVC   LINE+1(132),LINE\n         MVC   LINE(L'MSG4),MSG4  SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         EJECT\n         LTORG\nSAVE     DS    18F                SAVE AREA\nWORKD    DS    D                  DOUBLEWORD WORK AREA\nENTRY    DC    AL1(1)             LENGTH OF PROFILE NAME FIELD\nENTRYNAM DC    XL8'00'            PROFILE NAME\n         EJECT\nMSG1     DC    C'1**ERROR** - TASK ACEE NOT FOUND'\nMSG2     DC    C'1**ERROR** - USER MUST HAVE SPECIAL AUTHORITY'\nMSG3     DC    C'1**ERROR** - RACF IS NOT OPERATING'\nMSG4     DC    C'1**ERROR** - RACF INTERNAL ERROR CODE = XX'\n         ORG   *-2\nMSG4CD   DS    CL2\n         ORG\nMSG5     DC    C' RACF USERID XXXXXXXX RESET TO NOADSP'\n         ORG   *-24\nMSG5USR  DS    CL8\n         ORG\nMSG6     DC    C' RACF USERID XXXXXXXX ALREADY SET TO NOADSP'\n         ORG   *-30\nMSG6USR  DS    CL8\n         ORG\nLINE     DC    CL133' '           DETAIL PRINT LINE\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FA,LRECL=133,   X\n               BLKSIZE=133\nACTION1  ICHEACTN FIELD=FLAG1,                                         X\n               FLDATA='DEL',                                           X\n               MF=L\nTEST1    ICHETEST FIELD=FLAG1,                                         X\n               FLDATA=(1,ADSPON),                                      X\n               COND=ONES,                                              X\n               MF=L\nADSPON   DC    X'80'\nWKAREA   DS    0F\nWKAREAS  DC    AL4(WKAREAL+4)     LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nRETDATA  DS    CL30               RETURNED DATA/NO DATA TO BE RETURNED\nWKAREAE  EQU   *                  END OF WORK AREA\nWKAREAL  EQU   *-RBA              CALCULATE WORK AREA LENGTH\n         EJECT\n         CVT DSECT=YES\n         IKJTCB\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEZJSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAPXTRT": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01y\\x01y\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 377, "newlines": 377, "modlines": 0, "user": "FILE013"}, "text": "*---------------------------------------------------------------------*\n*   PROGRAM:       SAPXTRT                                            *\n*                                                                     *\n*   AUTHOR:                                                           *\n*                                                                     *\n*   DATE:          12/10/86                                           *\n*                                                                     *\n*   FUNCTION:      WRITES A RECORD TO DDNAME=RACFOUT FOR EACH         *\n*                  USERID(+ THE USERID'S PASSWORD) IN THE RACF        *\n*                  DATABASE.                                          *\n*                                                                     *\n*   SPECIAL NOTES: THIS MODULE MUST RESIDE IN APF AUTHORIZED LIBRARY  *\n*                  SINCE IT ISSUES RACF MANAGER REQUESTS.             *\n*                                                                     *\n*                  THIS PROGRAM SHOULD BE PROTECTED BY RACF PROGRAM   *\n*                  PROTECTION LIMITED TO SELECT USERS DUE TO THE      *\n*                  NATURE OF IT'S FUNCTION.                           *\n*                                                                     *\n*   GLOSSARY OF OUTPUT:                                               *\n*                                                                     *\n*   SMFID   - SMFID OF SYSTEM WHERE DATA RETRIEVED                    *\n*   PROFLEN - LENGTH OF USERID                                        *\n*   RACPROF - USERD                                                   *\n*   PASSWORD- PASSWORD                                                *\n*   FLAG1   - ADSP                                                    *\n*   FLAG2   - SPECIAL                                                 *\n*   FLAG3   - OPERATIONS                                              *\n*   FLAG4   - AUDITOR                                                 *\n*   FLAG5   - GRPACC                                                  *\n*   FLAG6   - AUDITOR                                                 *\n*   FLAG7   - PASSWORD REQUIRED                                       *\n*   FLAG8   - OIDCARD REQUIRED                                        *\n*   UAUDIT  - UAUDIT                                                  *\n*   PASSINT - PASSWORD INTERVAL                                       *\n*   AUTHOR  - OWNER                                                   *\n*   DFLTGRP - DEFAULT GROUP                                           *\n*   AUTHDATE- CREATE DATE                                             *\n*   PASSDATE- PASSWORD CHANGE DATE                                    *\n*   LJDATE  - LAST ACCESS DATE                                        *\n*   PGMRNAME- PROGRAMMER NAME                                         *\n*   INSTLEN - LENGTH OF INSTALLATION DATA FIELD                       *\n*   INSTDATA- INSTALLATION DATA                                       *\n*                                                                     *\n*   REGISTER CONVENTIONS:                                             *\n*                                                                     *\n*      PROLOGUE : R2 - CVT BASE                                       *\n*                 R3 - ASCB BASE                                      *\n*                 R4 - ASXB BASE                                      *\n*                 R5 - ACEE BASE                                      *\n*                 R8 - WORKAREA BASE                                  *\n*                                                                     *\n*      MAIN     : R2 - GENERAL TARGET                                 *\n*                 R3 - TARGET LENGTH                                  *\n*                 R4 - GENERAL SOURCE                                 *\n*                 R5 - SOURCE LENGTH                                  *\n*                 R6 - GENERAL LENGTH                                 *\n*                 R7 - GENERAL ADDRESS                                *\n*                 R8 - WORKAREA BASE                                  *\n*                 R9 - LINK CONTROL REGISTER                          *\n*                 R10- LINK CONTROL REGISTER                          *\n*                                                                     *\n*      NOTE - OPERANDS ON ICHEINTY MACRO MUST BE ABSOLUTE             *\n*                                                                     *\n*      THE FOLLOWING SAMPLE JCL CAN BE USED TO EXECUTE SAPXTRT.       *\n*                                                                     *\n*      //STEP1    EXEC PGM=SAPXTRT,REGION=1024K                       *\n*      //STEPLIB  DD DSN=YOUR.APFAUTH.LIBRARY,DISP=SHR                *\n*      //SYSPRINT DD SYSOUT=*                                         *\n*      //SYSUDUMP DD SYSOUT=*                                         *\n*      //RACFOUT  DD DSN=YOUR.TARGET.DATASET,                         *\n*      //            DISP=(NEW,CATLG,DELETE),                         *\n*      //            UNIT=3380,                                       *\n*      //            SPACE=(CYL,(2,1)),                               *\n*      //            DCB=(LRECL=328,RECFM=VB,BLKSIZE=23476)           *\n*      //*                                                            *\n*                                                                     *\n*   CHANGES:                                                          *\n*---------------------------------------------------------------------*\n         MACRO\n         REGISTER\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n*\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n*\n         REGISTER\n*\n         USING CVT,R2\n         USING ASCB,R3\n         USING ASXB,R4\n         USING ACEE,R5\n         USING WORKAREA,R8\n         USING SAPXTRT,R12\nSAPXTRT CSECT\n         SAVE  (14,12),,'SAPXTRT &SYSDATE.&SYSTIME'\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n*        LR    R11,R1             SET PARM SAVE REGISTER\n         GETMAIN R,LV=WORKSIZE\n         ST    R1,8(,R1)          FORWARD POINTER\n         ST    R13,4(,R1)         BACKWARD POINTER\n         LR    R8,R1              ESTABLISH ADDRESSABILITY\n         LR    R13,R1             POINT TO NEW SAVE AREA\n         MVC   LINE(133),BLANKS   BLANK OUT PRINT LINE\n         OPEN  (RACFOUT,(OUTPUT),SYSPRINT,(OUTPUT))\n         SPACE\n         L     R2,CVTPTR          POINT TO CVT\n         L     R3,CVTTCBP         POINT TO TCB AND ASCB POINTERS\n         L     R3,12(,R3)         POINT TO CURRENT ASCB\n         L     R4,ASCBASXB        POINT TO ASXB\n         L     R5,ASXBSENV        POINT TO ACEE\n         LTR   R5,R5              IS THERE AN ACEE?\n         BNZ   RACFCHK           ..YES, CONTINUE\n         MVC   LINE(L'MSG1),MSG1  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nRACFCHK  RACSTAT\n         LTR   R15,R15            IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG2),MSG2  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         EJECT\nRACFOK   L     R3,CVTSMCA         POINT TO SMCA\n         USING SMCABASE,R3\n         MVC   SMFID(4),SMCASID   RETRIEVE SMFID FROM SMCA\n         DROP  R2\n         DROP  R3\n         DROP  R4\n         DROP  R5\n         XR    R3,R3\n         STH   R3,RACRDW2\n         MVI   ENTRYNAM,X'00'\n         MVC   ENTRYNAM+1(7),ENTRYNAM SET INITIAL PROFILE NAME\n         MVI   ENTRY,X'08'        SET INITIAL PROFILE LENGTH\n         EJECT\nLOOP     LA    R2,RBA             POINT TO TARGET FIELD\n         L     R3,=A(WKAREAL)     SET FIELD LENGTH\n         XR    R4,R4              SET SOURCE FIELD TO NULL\n         XR    R5,R5              SET SOURCE LENGTH AND PAD TO X'00'\n         MVCL  R2,R4              CLEAR THE WORK AREA\n         ICHEINTY NEXT,TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA,           X\n               ACTIONS=(ACTN1,ACTN2,ACTN3,ACTN4,ACTN5,ACTN6,ACTN7,     X\n               ACTN8,ACTN9,ACTN10,ACTN11,ACTN12,ACTN13,ACTN14,ACTN15,  X\n               ACTN16,ACTN17,ACTN18)\n         LTR   R15,R15            WAS LOCATE SUCCESSFUL?\n         BNZ   LOCATNZ            ..NO, PROCESS EXCEPTION\n         BAL   R9,LOCAT0\n         B     LOOP\n         EJECT\nLOCATNZ  C     R15,=F'12'         HAVE WE CHECKED ALL USERS?\n         BE    LASTUSER           ..YES\n         SPACE\nBADRETCD CVD   R15,WORKD          CONVERT RETURN CODE TO DECIMAL\n         UNPK  MSG3CD,WORKD+6(2)  MOVE TO ERROR MESSAGE\n         OI    MSG3CD+1,X'F0'     MAKE LAST CHARACTER PRINTABLE\n         MVC   LINE(L'MSG3),MSG3  SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nLASTUSER MVC   LINE(L'MSG4),MSG4  SETUP MESSAGE\n         PUT   SYSPRINT,LINE      WRITE SUCCESS MESSGAE\n         SPACE\nRETURN   CLOSE (RACFOUT,,SYSPRINT)\n         L     R13,SAVEOLD        BACKWARD POINTER\n         DROP  R8                 DROP R8 ADDRESSABILITY\n         FREEMAIN R,LV=WORKSIZE,A=(R8)\n         USING SAVEAREA,R13       USE OLD SAVE AREA FRO ADDRESSABILITY\n         XC    SAVER15(4),SAVER15 CLEAR RETURN CODE\n         XC    SAVENEW,SAVENEW    CLEAR FORWARD POINTER\n         RETURN (14,12)           RETURN TO CALLER\n         EJECT\nLOCAT0   LA    R2,RACPROF         POINT TO TARGET FIELD\n         XR    R3,R3              CLEAR WORK REGISTER\n         IC    R3,ENTRY           GET LENGTH OF PROFILE NAME\n         STC   R3,PROFLEN         GET LENGTH OF PROFILE NAME\n         LR    R5,R3\n         LA    R4,ENTRYNAM        POINT TO SOURCE FIELD\n         MVC   RACPROF(8),BLANKS  BLANK OUT TARGET FIELD\n         MVCL  R2,R4              MOVE PROFILE NAME TO PRINT LINE\n         XR    R6,R6              CLEAR R6\n         LA    R6,RETDATA         SET INITIAL ADDRESS FOR RETDATA\n$PSWD    LA    R2,PSWD            PASSWORD\n         BAL   R10,MOVEIT\n         CALL  SAUNMASK,(PSWD)\n         MVC   PASSWORD(8),PSWD\n$FLAG1   LA    R2,FLAG1           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG2   LA    R2,FLAG2           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG3   LA    R2,FLAG3           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG4   LA    R2,FLAG4           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG5   LA    R2,FLAG5           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG6   LA    R2,FLAG6           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG7   LA    R2,FLAG7           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG8   LA    R2,FLAG8           POINT TO TARGET\n         BAL   R10,MOVEIT\n$UAUDIT  LA    R2,UAUDIT          POINT TO TARGET\n         BAL   R10,MOVEIT\n$PASSINT LA    R2,PASSINT         POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHOR  LA    R2,AUTHOR          POINT TO TARGET\n         BAL   R10,MOVEIT\n$DFLTGRP LA    R2,DFLTGRP         POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHDTE LA    R2,AUTHDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$PASSDTE LA    R2,PASSDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$LJDTE   LA    R2,LJDATE          POINT TO TARGET\n         BAL   R10,MOVEIT\n$PGMRNME LA    R2,PGMRNAME        POINT TO TARGET\n         BAL   R10,MOVEIT\n$INST    LA    R2,INSTDATA\n         XR    R7,R7              CLEAR WORK REGISTER\n         IC    R7,2(R6)           INSTALLATION VARIABLE LENGTH FIELD\n         STC   R7,INSTLEN         INSTALLATION VARIABLE LENGTH FIELD\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,3(R6)           ESTABLISH FIRST BYTE OF DATA\n         EX    R3,BLNKINST\n         MVCL  R2,R4\n         LA    R7,81(R7)\n         STH   R7,RACRDW1\n         PUT   RACFOUT,RACREC\n         BR    R9\nMOVEIT   XR    R7,R7              CLEAR WORK REGISTER\n         LH    R7,0(,R6)          LOAD RETURNED LENGTH OF FLG4\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,2(,R6)          POINT TO SOURCE\n         MVCL  R2,R4\n         LA    R6,2(R7,R6)        POINT TO NEXT FIELD\n         BR    R10\n         LTORG\nBLANKS   DC    CL255' '\nPSWD     DC    XL8'00'\n         SPACE\nMSG1     DC    C'1**ERROR** - TASK ACEE NOT FOUND'\nMSG2     DC    C'1**ERROR** - RACF IS NOT OPERATING'\nMSG3     DC    C'1**ERROR** - RACF INTERNAL ERROR CODE = XX'\n         ORG   *-2\nMSG3CD   DS    CL2\nMSG4     DC    C'1SAPXTRT COMPLETED SUCCESSFULLY'\n         SPACE\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FA,LRECL=133,   X\n               BLKSIZE=133\nRACFOUT  DCB   DSORG=PS,DDNAME=RACFOUT,MACRF=PM,RECFM=VB\n         SPACE\nENTRY    DS    AL1(1)             LENGTH OF PROFILE NAME FIELD\nENTRYNAM DS    XL44               PROFILE NAME\nWKAREA   DS    0F\nWKAREAS  DC    AL4(WKAREAL+4)     LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nRETDATA  DS    CL335              RETURNED DATA\nWKAREAE  EQU   *                  END OF WORK AREA\nWKAREAL  EQU   *-RBA              CALCULATE WORK AREA LENGTH\nACTN1    ICHEACTN FIELD=PASSWORD  PASSWORD\nACTN2    ICHEACTN FIELD=FLAG1     ADSP\nACTN3    ICHEACTN FIELD=FLAG2     SPECIAL\nACTN4    ICHEACTN FIELD=FLAG3     OPERATIONS\nACTN5    ICHEACTN FIELD=FLAG4     REVOKE\nACTN6    ICHEACTN FIELD=FLAG5     GRPACC\nACTN7    ICHEACTN FIELD=FLAG6     AUDITOR\nACTN8    ICHEACTN FIELD=FLAG7     PASSWORD REQUIRED\nACTN9    ICHEACTN FIELD=FLAG8     OIDCARD REQUIRED\nACTN10   ICHEACTN FIELD=UAUDIT    UAUDIT\nACTN11 ICHEACTN FIELD=PASSINT     PASSWORD INTERVAL\nACTN12 ICHEACTN FIELD=AUTHOR      OWNER\nACTN13 ICHEACTN FIELD=DFLTGRP     DEFAULT GROUP\nACTN14 ICHEACTN FIELD=AUTHDATE    CREATE DATE\nACTN15 ICHEACTN FIELD=PASSDATE    PASSWORD CHANGE DATE\nACTN16 ICHEACTN FIELD=LJDATE      LAST ACCESS DATE\nACTN17 ICHEACTN FIELD=PGMRNAME    PROGRAMMER NAME\nACTN18 ICHEACTN FIELD=INSTDATA    INSTALLATION DATA\n         SPACE\nBLNKINST MVC   INSTDATA(255),BLANKS\n         EJECT\n         PRINT NOGEN\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nWORKD    DS    D                  DOUBLEWORD WORK AREA FOR ARITHMETIC\nLINE     DS    CL133              DETAIL PRINT LINE\n         DS    0D\nRACREC   DS    CL336              DETAIL RAC RECORD\n         ORG   RACREC\nRACRDW1  DS    H                  VARIABLE RECORD LENGTH\nRACRDW2  DS    H                  SEQUENCE FOR VBS RECORDS\nSMFID    DS    CL4                SMFID FROM SMCASID\nPROFLEN  DS    B                  USERID LENGTH\nRACPROF  DS    CL8                USERID\nPASSWORD DS    CL8                PASSWORD\nFLAG1    DS    B                  ADSP\nFLAG2    DS    B                  SPECIAL\nFLAG3    DS    B                  OPERATIONS\nFLAG4    DS    B                  REVOKE\nFLAG5    DS    B                  GRPACC\nFLAG6    DS    B                  AUDITOR\nFLAG7    DS    B                  PASSWORD REQUIRED\nFLAG8    DS    B                  OIDCARD REQUIRED\nUAUDIT   DS    B                  UAUDIT\nPASSINT  DS    CL1                PASSWORD INTERVAL\nAUTHOR   DS    CL8                OWNER\nDFLTGRP  DS    CL8                DEFAULT GROUP\nAUTHDATE DS    CL3                CREATE DATE\nPASSDATE DS    CL3                PASSWORD CHANGE DATE\nLJDATE   DS    CL3                LAST ACCESS DATE\nPGMRNAME DS    CL20               PROGRAMMER NAME\nINSTLEN  DS    B                  INSTALLATION DATA LENGTH\nINSTDATA DS    CL255              INSTALLATION DATA\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         CVT DSECT=YES\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEESMCA ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SARUSRUX": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x95\\x00\\x95\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "FILE013"}, "text": "         TITLE 'SARUSRUX - USERID OBTAIN USER EXIT FOR ROSCOE'\nSARUSRUX CSECT\n***********************************************************************\n*                                                                     *\n* SARUSRUX -                                                          *\n*        USER EXIT TO OBTAIN USERID FOR ROSCOE USER.                  *\n*                                                                     *\n* INPUTS -                                                            *\n*        REG 1 - ADDRESS OF PARAMETER LIST (MAPPED BY SARUPL).        *\n*        REG13 - ADDRESS OF REGISTER SAVE AREA                        *\n*        REG14 - RETURN ADDRESS                                       *\n*        REG15 - ENTRY POINT ADDRESS.                                 *\n*                                                                     *\n* RETURN CODES -                                                      *\n*        0 - USER IS ALLOWED ACCESS TO SAR.                           *\n*        4 - DENY ACCESS TO SAR.                                      *\n*        8 - USER IS TO BE PROMPTED FOR HIS USERID AND PASSWORD.      *\n*            THE EXIT WILL BE CALLED AGAIN AFTER PROMPTING SO THAT    *\n*            THE USERID AND PASSWORD ENTERED BY THE USER CAN BE       *\n*            VERIFIED.                                                *\n*                                                                     *\n* ATTRIBUTES -                                                        *\n*        RENT, REUS.                                                  *\n*        MUST BE LINKED AS AUTHORIZED, BUT EXECUTES IN UNAUTHORIZED   *\n*        STATE.                                                       *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,SARUSRUX.&SYSDATE\n         LR    R12,R15             LOAD BASE REGISTER\n         USING SARUSRUX,R12\n         LR    R10,R1              LOAD PLIST ADDRESS\n         USING UPL,R10             ADDRESSABILITY FOR PLIST\n         LA    R11,UPLUWORK        LOAD WORK AREA ADDRESS\n         USING RACF,R11            BASE FOR RACF DSECT\n         SPACE\n         L     R3,UPLUSERA         LOAD USERID ADDRESS\n         CLI   0(R3),C' '          ANY USERID SUPPLIED?\n         BE    RC8                 NO, GO PROMPT FOR ONE\n         SPACE\n         L     R3,UPLPSWDA         LOAD PASSWRD ADDRESS\n         CLI   0(R3),C' '          ANY PASSWRD SUPPLIED?\n         BNE   DORACF              NO, CHECK RACF\n         SPACE\n         B     RC8\n         SPACE\nDORACF   XC    RACFKEY,RACFKEY\n         XC    RACFPSW,RACFPSW\n         SPACE\n         LA    R6,8\n         LA    R5,0\n         LA    R4,RACFKEY\n         L     R3,UPLUSERA\nUSERLUP  CLI   0(R3),X'40'\n         BE    USEREND\n         MVC   0(1,R4),0(R3)\n         LA    R3,1(R3)\n         LA    R4,1(R4)\n         LA    R5,1(R5)\n         BCT   R6,USERLUP\n         B     RC4\n         SPACE\nUSEREND  STCM  R5,R1,RACFKEYL\n         SPACE\n         LA    R6,7\n         LA    R5,0\n         LA    R4,RACFPSW\n         L     R3,UPLPSWDA\nPASSLUP  CLI   0(R3),X'40'\n         BE    PASSEND\n         MVC   0(1,R4),0(R3)\n         LA    R3,1(R3)\n         LA    R4,1(R4)\n         LA    R5,1(R5)\n         BCT   R6,PASSLUP\n         B     RC4\n         SPACE\nPASSEND  STCM  R5,R1,RACFPSWL\n         SPACE\n         XC    ACFB,ACFB\n         SR    R7,R7\n         SR    R5,R5\n         SR    R6,R6\n         SPACE\n         LA    R4,RACFEXEC\n         MVC   0(RACFILEN,R4),RACFINT\n         SPACE\n         RACINIT ENVIR=CREATE,                                         X\n               USERID=RACFKEYL,                                        X\n               PASSWRD=RACFPSWL,                                       X\n               NEWPASS=(7),                                            X\n               GROUP=(6),                                              X\n               TERMID=(5),                                             X\n               ACEE=ACFB,                                              X\n               MF=(E,(4))\n         SPACE\n         ST    R15,RACFRESP\n         SPACE\n         LA    R4,RACFEXEC\n         MVC   0(RACFILEN,R4),RACFINT\n         SPACE\n         RACINIT ENVIR=DELETE,                                         X\n               ACEE=ACFB,                                              X\n               MF=(E,(4))\n         SPACE\n         L     R15,RACFRESP\n         LTR   R15,R15\n         BZ    RC0\n         B     RC4\n         SPACE\nRC0      RETURN (14,12),RC=0       RETURN TO ALLOW FULL ACCESS\nRC4      RETURN (14,12),RC=4       RETURN TO PREVENT ACCESS\nRC8      RETURN (14,12),RC=8       RETURN TO PROMPT FOR USERID\n         SPACE\nRACFINT  DS    0F\n         RACINIT MF=L\nRACFILEN EQU   *-RACFINT\n         SPACE\nRACFM    DS    0F\n         SPACE\nRACF     DSECT\nRACFEXEC DS    CL(RACFILEN)\nACFB     DS    A\nRACFRESP DS    F\nRACFKEYL DS    X\nRACFKEY  DS    CL8\nRACFPSWL DS    X\nRACFPSW  DS    CL8\n         SPACE\n         SARUPL\n         SPACE\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASRGEN": {"ttr": 8197, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02\\xb0\\x02\\xb0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 688, "newlines": 688, "modlines": 0, "user": "FILE013"}, "text": "//SASRGEN   JOB (,E112),'DAN SQUILLACE',TIME=2,NOTIFY=\n/*JOBPARM FETCH\n//*\n//*  THIS JOB TAKES IN A SET OF DISCRETE PROFILES LISTED BY THE\n//*  LD COMMAND AND PRODUCES A SET OF EQUIVALENT GENERICS OF THE FORMS:\n//*\n//*     A.*\n//*     A.B.*\n//*     A.B.C.*\n//*     A.B.C.D.*\n//*     A.B.C.D.E.*\n//*     A.B.C.D.E.F.*\n//*     A.B.C.D.E.F.G\n//*\n//*  AT ANY GIVEN LEVEL, THE ACCESS LIST WHICH COVERS THE MOST\n//*  DISCRETE PROFILES AT THAT LEVEL IS ASSIGNED.\n//*\n//*  RACF COMMANDS TO DEFINE THE NEW GENERIC PROFILES ARE STORED IN\n//*  THE DATASET REFERENCED BY DDNAME DEFCMDS AND COMMANDS TO DELETE\n//*  THE DISCRETE PROFILES ARE STORED IN THE DATASET REFERENCED BY\n//*  DDNAME DELCMDS.\n//*\n//*  NOTE THAT GENERIC FORMS SUCH AS A.*.B AND THOSE CONTAINING\n//*  WILDCARD CHARACTERS ARE NOT GENERATED.\n//*\n//* THIS PROGRAM ALSO PROCESSES ONLY THE TRADITIONAL ID/ACCESS\n//* AND UACC INFORMATION.  THE NEW SECURITY LEVEL AND CLASSIFICATION\n//* CONTROLS INTRODUCED IN RELEASE 7 ARE NOT SUPPORTED.  HOWEVER,\n//* THE PROGRAM COULD BE EXTENDED TO SUPPORT THESE.\n//*\n//*\n//* EXECUTE TSO LISTDSD COMMAND FOR IDS OR PREFIXS TO BE CONVERTED\n//*\n//S1      EXEC PGM=IKJEFT01\n//SYSTSPRT  DD DSN=&&LDOUT,DISP=(,PASS),UNIT=RIO,SPACE=(CYL,(5,10)),\n// DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSPRINT  DD SYSOUT=*\n//SYSTSIN   DD *\n LD PREFIX(SSD)    AUTHUSER\n//*\n//S2    EXEC SAS\n//WORK  DD UNIT=RIO,SPACE=(CYL,(20,10))\n//RACFIN    DD DSN=&&LDOUT,DISP=OLD\n//RACFDB    DD DSN=SNODJS.RACFDBA,DISP=OLD\n//*ACFDB    DD DSN=SNODJS.RACFDBA,DISP=(,CATLG),\n//*VOL=SER=SNO111,UNIT=3350,SPACE=(CYL,(20,10))\n//DEFCMDS   DD DSN=SNODJS.RACF.DEFCMDS,DISP=OLD\n//*EFCMDS   DD DSN=SNODJS.RACF.DEFCMDS,DISP=(,CATLG),\n//*VOL=SER=SNO111,UNIT=3350,SPACE=(CYL,(1,1)),\n//*DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//DELCMDS   DD DSN=SNODJS.RACF.DELCMDS,DISP=OLD\n//*ELCMDS   DD DSN=SNODJS.RACF.DELCMDS,DISP=(,CATLG),\n//*VOL=SER=SNO111,UNIT=3350,SPACE=(CYL,(1,1)),\n//*DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n /*\n   SCAN OUTPUT OF LISTDSD AND GENERATE ONE RECORD FOR EACH\n   DATASET/PROTECTION RULE COMBINATION\n */\n\n  DATA RACFDB.DPROFS(KEEP = DATASET ID ACCESS OWNER UACC CGROUP VOL);\n  LENGTH LINE $ 13;\n  LENGTH UACC $ 8;\n  INFILE RACFIN EOF=QUIT;\n  /*IF _N_ > 200   THEN STOP;*/\n   DO UNTIL(LINE  = 'INFORMATION');\n       INPUT @2 LINE   $CHAR11.\n             @26 DATASET $CHAR44.;\n       END;\n\n   DO UNTIL(LINE  = 'LEVEL');\n       INPUT @2 LINE  $CHAR5.;\n       END;\n\n  INPUT /   @9 OWNER $CHAR8.\n            @23 UACC $8.;\n\n  DO UNTIL(LINE  = 'YOUR ACCESS');\n       INPUT @2 LINE  $CHAR11.;\n       END;\n\n  INPUT /   @18 CGROUP $CHAR8.;\n\n  DO UNTIL(LINE  = 'VOLUMES');\n       INPUT @2 LINE  $CHAR7.;\n       END;\n\n  INPUT /   @2 VOL $CHAR6.;\n  IF VOL = 'RACF01' OR SUBSTR(VOL,1,1) = ' '\n  THEN VOL = ' ';\n\n  DO UNTIL(LINE  = 'ID     ACCESS');\n    INPUT @5 LINE  $CHAR13.;\n    END;\n\n  INPUT;\n  NOACC = 1;\n  NEXT: INPUT @2 ID $CHAR8.\n              @13 ACCESS $CHAR1.;\n        IF ID = ' ' THEN DO;\n                         IF NOACC THEN DO;\n                            ID = '******';\n                            ACCESS = '*';\n                            OUTPUT;\n                            END;\n                         RETURN;\n                         END;\n        NOACC = 0;\n        IF ACCESS = 'P' THEN ACCESS = 'U';\n        ELSE IF ACCESS = 'O' THEN ACCESS = 'C';\n        OUTPUT;\n        GO TO NEXT;\n  QUIT: STOP;\n  RUN;\n\n  PROC SORT DATA=RACFDB.DPROFS NODUPS;BY DATASET VOL ID;\n  RUN;\n\n /*\n    GENERATE ONE RECORD PER DATASET.  CONSOLIDATE ACCESS RULES\n    INTO AN ACCESS STRING\n */\n\n  DATA RACFDB.DPROF2(KEEP= DATASET ACCLIST CGROUP UACC VOL LEV1-LEV7\n                           OWNER MODEL);\n  ARRAY LEVEL{7} $ 8 LEV1-LEV7;\n  LENGTH ACCLIST $  200;\n  RETAIN ACCLIST;\n  SET RACFDB.DPROFS;BY DATASET VOL;\n  ACCLIST = TRIM(ACCLIST)||TRIM(ID)||','||ACCESS||'/';\n  IF LAST.VOL THEN DO;\n     LINK PARSEDSN;\n     IF LEV2 = 'MODEL' AND LEV3 = ' ' THEN MODEL = 'M' ;\n       ELSE MODEL = 'N';\n     OUTPUT;\n     ACCLIST = ' ';\n     END;\n PARSEDSN:\n   DO I = 1 TO 7;\n    LEVEL{I} = SCAN(DATASET,I,'.');\n   END;\n   RETURN;\n  RUN;\n\n PROC PRINT;VAR DATASET VOL UACC ACCLIST;\n FORMAT ACCLIST $CHAR60.;\n TITLE1 \"PROFILES AS THEY EXIST BEFORE CONVERSION\";\n RUN;\n\n\n\n PROC SORT DATA=RACFDB.DPROF2 OUT=PROFWORK;BY LEV1    MODEL;\n RUN;\n\n /*\n  DELETE ALL RECORDS WHICH MATCH THE MODEL PROFILE\n */\n\n DATA RACFDB.DPROF3;\n DROP  MACC MUACC;\n RETAIN MACC MUACC;\n SET PROFWORK;\n IF MODEL = 'M' THEN DO;\n                MACC = ACCLIST;\n                MUACC = UACC;\n                RETURN;\n                END;\n IF ACCLIST = MACC AND MUACC = UACC THEN DELETE;\n RUN;\n\n  /* -----------\n\n PROC PRINT DATA=RACFDB.DPROF3; ID DATASET;VAR UACC ACCLIST;\n FORMAT DATASET $CHAR30. ACCLIST $CHAR95.;\n TITLE1 \"DISCRETE PROFILES SORTED BY DATASET NAME\";\n RUN;\n\n     ----------- */\n\n PROC SORT DATA=RACFDB.DPROF3 OUT=PROFWORK;\n           BY LEV1 ACCLIST UACC DATASET;\n RUN;\n\n  /* -----------\n\n PROC PRINT; ID DATASET;VAR UACC ACCLIST;\n FORMAT DATASET $CHAR30. ACCLIST $CHAR90.;\n TITLE 'SORTED BY ACCESS LIST';\n RUN;\n\n     ----------- */\n\n DATA PROFWORK;\n LENGTH COUNT2-COUNT7 ID2-ID7 4;\n RETAIN ID2-ID7 1;\n DROP WRITEGEN MODEL;\n SET PROFWORK;\n    BY LEV1 ACCLIST UACC LEV2 LEV3 LEV4 LEV5 LEV6 LEV7;\n IF MODEL = 'M' THEN DELETE;\n COUNT2+1;\n COUNT3+1;\n COUNT4+1;\n COUNT5+1;\n COUNT6+1;\n COUNT7+1;\n WRITEGEN =1;\n IF LAST.LEV2 THEN DO;\n               IF LEV2 \u00ac= ' ' THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID2+1;\n               COUNT2 = 0;\n               END;\n IF LAST.LEV3 THEN DO;\n               IF LEV3 \u00ac= ' ' AND WRITEGEN THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID3+1;\n               COUNT3 = 0;\n               END;\n IF LAST.LEV4 THEN DO;\n               IF LEV4 \u00ac= ' ' AND WRITEGEN THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID4+1;\n               COUNT4 = 0;\n               END;\n IF LAST.LEV5 THEN DO;\n               IF LEV5 \u00ac= ' ' AND WRITEGEN THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID5+1;\n               COUNT5 = 0;\n               END;\n IF LAST.LEV6 THEN DO;\n               IF LEV6 \u00ac= ' ' AND WRITEGEN THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID6+1;\n               COUNT6 = 0;\n               END;\n IF LAST.LEV7 THEN DO;\n               IF LEV7 \u00ac= ' ' AND WRITEGEN THEN DO;\n                                   OUTPUT PROFWORK;\n                                   WRITEGEN=0;\n                                   END;\n               ID7+1;\n               COUNT7 = 0;\n               END;\n RUN;\n\n PROC SORT DATA=PROFWORK;BY LEV1 LEV2 DESCENDING COUNT2;\n RUN;\n\n  /* -----------\n\n PROC PRINT; VAR LEV1 LEV2 ID2 COUNT2\n                      LEV3 ID3 COUNT3\n                      LEV4 ID4 COUNT4;\n TITLE \"DEBUGGING REPORT\";\n RUN;\n\n     ----------- */\n\n *\n *   GENERATE 2-LEVEL GENERICS\n *;\n\n DATA\n RACFDB.L2PROF(KEEP = LEV1 LEV2 ID2 UACC ACCLIST OWNER CGROUP)\n        PROFWORK(DROP = RID);\n RETAIN RID;\n SET PROFWORK;BY LEV1 LEV2;\n IF FIRST.LEV2 THEN DO;\n                    OUTPUT RACFDB.L2PROF;\n                    RID = ID2;\n                    END;\n ELSE IF RID = ID2 OR LEV3 = ' '  THEN DELETE;\n ELSE OUTPUT PROFWORK;\n RUN;\n\n PROC PRINT DATA=RACFDB.L2PROF;VAR LEV1 LEV2 ID2;\n TITLE '2-LEVEL GENERICS';\n RUN;\n *\n *   GENERATE 3-LEVEL GENERICS\n *;\n PROC SORT DATA=PROFWORK;BY LEV1 LEV2 LEV3 DESCENDING COUNT3;\n RUN;\n\n DATA\n RACFDB.L3PROF(KEEP = LEV1-LEV3 ID3 UACC ACCLIST OWNER CGROUP)\n        PROFWORK(DROP = RID);\n RETAIN RID;\n SET PROFWORK;BY LEV1 LEV2 LEV3;\n IF FIRST.LEV3 THEN DO;\n                    OUTPUT RACFDB.L3PROF;\n                    RID = ID3;\n                    END;\n ELSE IF RID = ID3 OR LEV4 = ' ' THEN DELETE;\n ELSE OUTPUT PROFWORK;\n RUN;\n\n PROC PRINT DATA=RACFDB.L3PROF;VAR LEV1-LEV3 ID3;\n TITLE '3-LEVEL GENERICS';\n RUN;\n *\n *   GENERATE 4-LEVEL GENERICS\n *;\n PROC SORT DATA=PROFWORK;BY LEV1 LEV2 LEV3 LEV4 DESCENDING COUNT4;\n RUN;\n\n DATA\n RACFDB.L4PROF(KEEP = LEV1-LEV4 ID4 UACC ACCLIST OWNER CGROUP)\n        PROFWORK(DROP = RID);\n RETAIN RID;\n SET PROFWORK;BY LEV1 LEV2 LEV3 LEV4;\n IF FIRST.LEV4 THEN DO;\n                    OUTPUT RACFDB.L4PROF;\n                    RID = ID4;\n                    END;\n ELSE IF RID = ID4 OR LEV5 = ' ' THEN DELETE;\n ELSE OUTPUT PROFWORK;\n RUN;\n\n PROC PRINT DATA=RACFDB.L4PROF;VAR LEV1-LEV4 ID4;\n TITLE '4-LEVEL GENERICS';\n RUN;\n *\n *   GENERATE 5-LEVEL GENERICS\n *;\n PROC SORT DATA=PROFWORK;BY LEV1 LEV2 LEV3 LEV4 LEV5\n                          DESCENDING COUNT5;\n RUN;\n\n DATA\n RACFDB.L5PROF(KEEP = LEV1-LEV5 ID5 UACC ACCLIST OWNER CGROUP)\n       PROFWORK(DROP = RID);\n RETAIN RID;\n SET PROFWORK;BY LEV1 LEV2 LEV3 LEV4 LEV5;\n IF FIRST.LEV5 THEN DO;\n                    OUTPUT RACFDB.L5PROF;\n                    RID = ID5;\n                    END;\n ELSE IF RID = ID5 OR LEV6 = ' ' THEN DELETE;\n ELSE OUTPUT PROFWORK;\n RUN;\n\n PROC PRINT DATA=RACFDB.L5PROF;VAR LEV1-LEV5 ID5;\n TITLE '5-LEVEL GENERICS';\n RUN;\n *\n *   GENERATE 6-LEVEL GENERICS\n *;\n PROC SORT DATA=PROFWORK;BY LEV1 LEV2 LEV3 LEV4 LEV5 LEV6\n                          DESCENDING COUNT6;\n RUN;\n\n DATA\n RACFDB.L6PROF(KEEP = LEV1-LEV6 ID6 UACC ACCLIST OWNER CGROUP)\n      RACFDB.L7PROF(KEEP = DATASET UACC ACCLIST OWNER CGROUP);\n RETAIN RID;\n SET PROFWORK;BY LEV1 LEV2 LEV3 LEV4 LEV5 LEV6;\n IF FIRST.LEV6 THEN DO;\n                    OUTPUT RACFDB.L6PROF;\n                    RID = ID6;\n                    END;\n ELSE IF RID = ID6 OR LEV7 = ' ' THEN DELETE;\n ELSE OUTPUT RACFDB.L7PROF;\n RUN;\n\n PROC PRINT DATA=RACFDB.L6PROF;VAR LEV1-LEV6 ID6;\n TITLE '6-LEVEL GENERICS';\n RUN;\n\n PROC PRINT DATA=RACFDB.L7PROF;VAR DATASET;\n TITLE '7-LEVEL PROFILES';\n RUN;\n\n %MACRO GENCMD;\n LOADUP:\n IN=1;IR=1;IU=1;IA=1;IC=1;\n DO I = 1 TO 40;\n NAC{I} = ' ';\n RAC{I} = ' ';\n UAC{I} = ' ';\n AAC{I} = ' ';\n CAC{I} = ' ';\n END;\n DO IX = 1 BY 1;\n  ACCRULE = SCAN(ACCLIST,IX,'/');\n  IF ACCRULE = ' ' THEN RETURN;\n  ACCID =   SCAN(ACCRULE,1,',');\n  ACCTYPE = SCAN(ACCRULE,2,',');\n  IF ACCTYPE = 'R' THEN DO;\n                   RAC{IR} = ACCID;\n                   IR+1;END;\n  ELSE IF ACCTYPE = 'U' THEN DO;\n                   UAC{IU} = ACCID;\n                   IU+1;END;\n  ELSE IF ACCTYPE = 'A' THEN DO;\n                   AAC{IA} = ACCID;\n                   IA+1;END;\n  ELSE IF ACCTYPE = 'N' THEN DO;\n                   NAC{IN} = ACCID;\n                   IN+1;END;\n  ELSE IF ACCTYPE = 'C' THEN DO;\n                   CAC{IC} = ACCID;\n                   IC+1;END;\n  END;\n\nPERMIT:\nRESET = 'RESET';\nIF CAC{1} \u00ac= ' ' THEN DO;\n                    LINK PC;\n                    RESET = ' ';\n                    END;\nIF AAC{1} \u00ac= ' ' THEN DO;\n                    LINK PA;\n                    RESET = ' ';\n                    END;\nIF UAC{1} \u00ac= ' ' THEN DO;\n                    LINK PU;\n                    RESET = ' ';\n                    END;\nIF RAC{1} \u00ac= ' ' THEN DO;\n                    LINK PR;\n                    RESET = ' ';\n                    END;\nIF  NAC{1} \u00ac= ' ' THEN DO;\n                    LINK PN;\n                    RESET = ' ';\n                    END;\nRETURN;\n\nPC:\nIDCNT = 1;\nPUT \"  PE \" RNAME \"ACCESS(CONTROL) GENERIC \" RESET \" +\";\nPUT \"   ID(\" @;\nDO IX = 1 TO 40;\nIF CAC{IX} = ' ' THEN GO TO ENDC;\nIF IDCNT = 8 THEN DO;\n                  IDCNT = 1;\n                  PUT '+'/'     ' @;\n                  END;\nPUT CAC{IX} @;\nIDCNT+1;\nEND;\nENDC: PUT \")\";\n      RETURN;\n\nPA:\nIDCNT = 1;\nPUT \"  PE \" RNAME \"ACCESS(ALTER) GENERIC \" RESET \" +\";\nPUT \"   ID(\" @;\nDO IX = 1 TO 40;\nIF AAC{IX} = ' ' THEN GO TO ENDA;\nIF IDCNT = 8 THEN DO;\n                  IDCNT = 1;\n                  PUT '+'/'     ' @;\n                  END;\nPUT AAC{IX} @;\nIDCNT+1;\nEND;\nENDA: PUT \")\";\n      RETURN;\n\nPU:\nIDCNT = 1;\nPUT \"  PE \" RNAME \"ACCESS(UPDATE) GENERIC \" RESET \" +\";\nPUT \"   ID(\" @;\nDO IX = 1 TO 40;\nIF UAC{IX} = ' ' THEN GO TO ENDU;\nIF IDCNT = 8 THEN DO;\n                  IDCNT = 1;\n                  PUT '+'/'     ' @;\n                  END;\nPUT UAC{IX} @;\nIDCNT+1;\nEND;\nENDU: PUT \")\";\n      RETURN;\n\nPR:\nIDCNT = 1;\nPUT \"  PE \" RNAME \"ACCESS(READ) GENERIC \" RESET \" +\";\nPUT \"   ID(\" @;\nDO IX = 1 TO 40;\nIF RAC{IX} = ' ' THEN GO TO ENDR;\nIF IDCNT = 8 THEN DO;\n                  IDCNT = 1;\n                  PUT '+'/'     ' @;\n                  END;\nPUT RAC{IX} @;\nIDCNT+1;\nEND;\nENDR: PUT \")\";\n      RETURN;\n\nPN:\nIDCNT = 1;\nPUT \"  PE \" RNAME \"ACCESS(NONE) GENERIC \" RESET \" +\";\nPUT \"   ID(\" @;\nDO IX = 1 TO 40;\nIF  NAC{IX} = ' ' THEN GO TO ENDN;\nIF IDCNT = 8 THEN DO;\n                  IDCNT = 1;\n                  PUT '+'/'     ' @;\n                  END;\nPUT  NAC{IX} @;\nIDCNT+1;\nEND;\nENDN: PUT \")\";\n      RETURN;\n%MEND;\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 1 (MODEL) PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 12;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.DPROF3;\n IF MODEL = 'M';\n RNAME= \"'\"||TRIM(LEV1)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 2  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L2PROF;\n RNAME= \"'\"||TRIM(LEV1)||\".\"||TRIM(LEV2)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 3  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L3PROF;\n RNAME= \"'\"||TRIM(LEV1)||\".\"||TRIM(LEV2)||\".\"||TRIM(LEV3)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 4  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L4PROF;\n RNAME= \"'\"||TRIM(LEV1)||\".\"||TRIM(LEV2)||\".\"||TRIM(LEV3)||\".\"\n           ||TRIM(LEV4)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 5  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L5PROF;\n RNAME= \"'\"||TRIM(LEV1)||\".\"||TRIM(LEV2)||\".\"||TRIM(LEV3)||\".\"\n           ||TRIM(LEV4)||\".\"||TRIM(LEV5)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 6  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L6PROF;\n RNAME= \"'\"||TRIM(LEV1)||\".\"||TRIM(LEV2)||\".\"||TRIM(LEV3)||\".\"\n           ||TRIM(LEV4)||\".\"||TRIM(LEV5)||\".\"||TRIM(LEV6)||\".*'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n*\n* GENERATE COMMANDS TO DEFINE LEVEL 7  PROFILES\n*;\n DATA _NULL_;\n FILE DEFCMDS MOD;\n LENGTH IN IR IU IA IC IX 4;\n LENGTH ACCRULE $ 10 ACCTYPE $ 1 ACCID $ 8 RNAME $ 46;\n ARRAY    NAC{40} $ 8;\n ARRAY    RAC{40} $ 8;\n ARRAY    UAC{40} $ 8;\n ARRAY    AAC{40} $ 8;\n ARRAY    CAC{40} $ 8;\n SET RACFDB.L7PROF;\n RNAME= \"'\"||TRIM(DATASET)||\"'\";\n PUT  \"AD \" RNAME \" UACC(\" UACC \") OWNER(\" OWNER \") GENERIC\";\n LINK LOADUP;\n LINK PERMIT;\n RETURN;\n\n %GENCMD\n RUN;\n\n *\n * GENERATE DELDSD COMMANDS TO DELETE DISCRETE PROFILES\n *;\n DATA _NULL_;\n FILE DELCMDS;\n SET RACFDB.DPROF2;\n RNAME= \"'\"||TRIM(DATASET)||\"'\";\n PUT  \"DD \" RNAME @;\n IF VOL = ' ' THEN PUT \"NOSET\";\n              ELSE PUT \"VOLUME(\" VOL \") SET\";\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SASRLIST": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00q\\x00q\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "FILE013"}, "text": "//RACFLIST JOB (,E217),'DAN SQUILLACE',NOTIFY=\n/*JOBPARM FETCH\n//*\n//* PRODUCE CONCISE RACF ACCESS RULE LIST\n//*\n//* USE ONE OR MORE LD ID() OR LD PREFIX() COMMANDS TO\n//* SELECT PROFILES FOR THE REPORT\n//*\n//S1      EXEC PGM=IKJEFT01\n//SYSTSPRT  DD DSN=&&PROFLST,UNIT=SYSDA,DISP=(,PASS),\n// SPACE=(CYL,(10,5)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)\n//SYSPRINT  DD SYSOUT=*\n//SYSTSIN   DD *\n LD ID(SSD)     AUTHUSER\n//S2    EXEC SAS\n//RACFIN    DD DSN=&&PROFLST,DISP=OLD\n /*************************************************************\n   THIS PROGRAM PRODUCES A CONCISE DATASET ACCESS RULE REPORT\n   FROM THE OUTPUT OF THE LISTDSD COMMAND.  EACH ENTRY IS OF THE\n   FORM:\n\n     DSNAME VOLUME UACC  /ID1,PRIV1/ID2,PRIV2/...../IDN,PRIVN/\n\n   VOLUME IS APPLICABLE ONLY FOR DISCRETE PROFILES.\n\n  *************************************************************/\n\n  DATA DPROFS(KEEP = DATASET ID ACCESS OWNER CGROUP UACC VOL);\n  LENGTH LINE $ 13;\n  LENGTH UACC $ 8;\n  LENGTH VOL $ 6;\n  INFILE RACFIN;\n   DO UNTIL(LINE  = 'INFORMATION');\n       INPUT @2 LINE   $CHAR11.\n             @26 DATASET $CHAR44.;\n       END;\n\n   DO UNTIL(LINE  = 'LEVEL');\n       INPUT @2 LINE  $CHAR5.;\n       END;\n\n  INPUT /   @9 OWNER $CHAR8.\n            @23 UACC $8.;\n\n  DO UNTIL(LINE  = 'YOUR ACCESS');\n       INPUT @2 LINE  $CHAR11.;\n       END;\n\n  INPUT /   @18 CGROUP $CHAR8.;\n\n\n  VOL = ' ';\n  IF SCAN(DATASET,2,'(') \u00ac= ' ' /* INDICATES GENERIC ENTRY */\n   THEN GOTO SKIPVOL;\n\n  DO UNTIL(LINE  = 'VOLUMES');\n       INPUT @2 LINE  $CHAR7.;\n       END;\n\n  INPUT /   @2 VOL $CHAR6.;\n  IF VOL = 'RACF01' OR SUBSTR(VOL,1,1) = ' '\n  THEN VOL = ' ';   /* RACF01 INDICATES A MODEL PROFILE */\n\n  SKIPVOL:\n  DO UNTIL(LINE  = 'ID     ACCESS');\n    INPUT @5 LINE  $CHAR13.;\n    END;\n\n  INPUT;\n  NOACC = 1;\n  NEXT: INPUT @2 ID $CHAR8.\n              @13 ACCESS $CHAR1.;\n        IF ID = ' ' THEN DO;\n                         IF NOACC THEN DO;\n                            ID = '******';\n                            ACCESS = '*';\n                            OUTPUT;\n                            END;\n                         RETURN;\n                         END;\n        NOACC = 0;\n        IF ACCESS = 'P' THEN ACCESS = 'U';       /* UPDATE */\n        ELSE IF ACCESS = 'O' THEN ACCESS = 'C'; /* CONTROL */\n        OUTPUT;\n        GO TO NEXT;\n        RUN;\n\n  PROC SORT DATA=DPROFS NODUPS;BY DATASET VOL ID;\n  RUN;\n\n  DATA DPROF2(KEEP= DATASET ACCLIST CGROUP UACC VOL OWNER);\n  LENGTH ACCLIST $  200;\n  RETAIN ACCLIST;\n  SET DPROFS;BY DATASET VOL;\n  ACCLIST = TRIM(ACCLIST)||TRIM(ID)||','||ACCESS||'/';\n  IF LAST.VOL THEN DO;\n     OUTPUT;\n     ACCLIST = ' ';\n     END;\n  RUN;\n\n PROC PRINT;ID DATASET;VAR VOL UACC ACCLIST;\n FORMAT ACCLIST $CHAR75.;\n TITLE \"PROFILES IN DATASET NAME ORDER\";\n RUN;\n\n PROC SORT DATA=DPROF2;BY ACCLIST DATASET;\n RUN;\n\n PROC PRINT;ID DATASET;VAR VOL UACC ACCLIST;\n FORMAT ACCLIST $CHAR75.;\n TITLE \"PROFILES BY DATASET WITHIN ACCESS LIST\";\n RUN;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SASSXXL1": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02-\\x02-\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 557, "newlines": 557, "modlines": 0, "user": "FILE013"}, "text": "SASSXXL1 TITLE 'SASSXXL1 -- UCC7/RACF LOGON EXIT'\n*--------------------------------------------------------------------*\n*  PROGRAM NAME:                                                     *\n*                                                                    *\n*     SASSXXL1 -- UCC7/RACF LOGON EXIT                               *\n*                                                                    *\n*  FUNCTION:                                                         *\n*                                                                    *\n*        /LOGON                         (S/R)                        *\n*                                                                    *\n*        GROUP,USERIDPWD                (S/R) (IF USERID IS 7 BYTES  *\n*                                              LONG)                 *\n*             OR                                                     *\n*                                                                    *\n*        GROUP,USERID/PWD               (S/R) (NOT DEPENDENT ON      *\n*                                              USERID LENGTH)        *\n*             OR                                                     *\n*                                                                    *\n*        GROUP,USERID,PWD               (S/R) (NOT DEPENDENT ON      *\n*                                              USERID LENGTH)        *\n*                                                                    *\n*      - 'GROUP' IS A VALID RACF GROUP                               *\n*      - 'USERID' IS A VALID TSO USERID(MUST BE PART OF RACF GROUP)  *\n*      - 'PWD' IS THE PASSWORD FOR THE USERID                        *\n*                                                                    *\n*        AFTER THE RACINIT IS COMPLETED, THE POINTER IS PLACED       *\n*        IN THE SCTUSRXX FIELD FOR USE BY SGETPDS/SPUTPDS RACF       *\n*        VERIFICATION USER EXITS.                                    *\n*                                                                    *\n*        IF A LOGON IS BEING DONE FROM THE MASTER CONSOLE THEN       *\n*        AN OPID OF MASTER IS REQUIRED AND RACF CHECKING IS NOT      *\n*        DONE.                                                       *\n*                                                                    *\n* USAGE  NOTES:                                                      *\n*                                                                    *\n*     -  EACH RACF GROUP USING UCC7 MUST BE INCLUDED IN THE          *\n*        SASSSECI SECURITY GEN MODULE AS THE OPID IF LESS THAN       *\n*        7 CHARACTERS.                                               *\n*                                                                    *\n*     -  A TRANSLATE TABLE FOR RACF GROUPS GREATER THAN 6            *\n*        CHARACTERS HAS BEEN DISABLED.  ALL RACF GROUPS FOR          *\n*        THE PURPOSE OF UCC7/RACF MUST BE 6 CHARACTERS OR LESS       *\n*        SINCE UCC7 \"OPIDS\" ARE LIMITED TO 6 CHARACTERS.             *\n*                                                                    *\n*     -  MACLIBS NEEDED FOR ASSEMBLY:                                *\n*                                                                    *\n*        -   'SYS1.MACLIB'                                           *\n*        -   'SS.UCC7.R28.MACLIB'                                    *\n*        -   'SYS1.AMODGEN'                                          *\n*                                                                    *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*   REENTRANT, REUSEABLE                                             *\n*                                                                    *\n*                                                                    *\n* REGISTER USAGE CONVENTIONS:                                        *\n*                                                                    *\n*  INPUT:                                                            *\n*                                                                    *\n*     R2  = ADDR OF 8 BYTE AREA CONTAINING OPERATOR ID ENTERED       *\n*                                                                    *\n*     R3  = ADDR OF AREA CONTAINING PASSWORD IF ENTERED OR ZEROS     *\n*           IF NOT ENTERED.  IF PASSWORD ENTERED, AREA CONSISTS      *\n*           OF 2 BYTE LENGTH FIELD FOLLOWED BY PASSWORD ENTERED.     *\n*           LENGTH INCLUDES LENGTH FIELD.                            *\n*                                                                    *\n*     R5  = ADDR OF TERMINAL CONTROL BLOCK.  1ST 7 POSITIONS         *\n*           CONTAIN TERMINAL NAME FROM INIT DECK.                    *\n*                                                                    *\n*  OUTPUT -                                                          *\n*                                                                    *\n*     R15  = RETURN CODE FOR UCC7                                    *\n*                                                                    *\n*            0 = ACCEPT THE LOGON                                    *\n*        NOT 0 = REJECT THE LOGON                                    *\n*                                                                    *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         SPACE  3\n*\n         PRINT NOGEN\n         UCC7SVT\n         SASSEQU\n         SCTENTRY\n         SASSVTMB\n         SASSTBLK\n         PRINT GEN\n         USRSVT\n         USRSCT MOD=LOGON\n         USING SASSXXL1,R10\n         USING SCTSTART,R11\n         USING TRMDEF,R5\n         USING UCC7SVT,R12\n         USING USRSCT,R4\nSASSXXL1 CSECT\n         LR    R10,R15\n         B     SXL1_INIT_USR_SCT        INITIALIZE USERSCT\n         DC    C'SASSXXL1 &SYSDATE'\n*\n*---------------------------------------------------------------------*\n*  ACQUIRE STORAGE FOR USER SCT IF NOT ALREADY DONE.                 *\n*    AND INITIALIZE PARM FIELDS.                                     *\n*---------------------------------------------------------------------*\n*\nSXL1_INIT_USR_SCT       DS 0H\n         L     R4,SCTUSRXX              ADDRESS OF USER SCT\n         LTR   R4,R4                    STORAGE ACQUIRED\n         BNZ   SXL1_MASTER_TERMINAL     CHECK FOR MASTER TERM\n*\nSXL1_GET_USR_SCT        DS 0H\n         LA    R0,USR#SIZE              LENGTH OF USER SCT\n         SGETM SIZE=(R0),BUSY=SXL1_WAIT,RETURN=SXL1_GOT_USR_SCT\n*\nSXL1_WAIT               DS 0H\n*\n         SWAIT ECFADD=(R0),ECFMASK=(R0),RETURN=SXL1_GET_USR_SCT\n*\nSXL1_GOT_USR_SCT        DS 0H\n         ST    R1,SCTUSRXX              SAVE POINTER TO USER SCT\n         LR    R4,R1                    POINT TO USER SCT\n         LA    R6,USR#SIZE              LENGTH TO CLEAR\n*\nSXL1_CLEAR_USRSCT       DS 0H\n*\n         MVI   0(R1),X'00'              ZERO BYTE\n         LA    R1,1(R1)                 NEXT BYTE\n         BCT   R6,SXL1_CLEAR_USRSCT     CLEAR THIS ONE\n         LA    R1,RACFRTN               ADDR OF RACF ROUTINE\n         ST    R1,USR#XADR              STORE IN SCHADR PARMLIST\n         LA    R1,USR#RPRM              RACF PARMLIST\n         ST    R1,USR#XADR+4            STORE IN SCHADR PARMLIST\n         MVI   USR#XADR+8,144           INDICATE BALR 14,15\n         ST    R12,USR#RPRM             SAVE POINTER TO SVT\n         ST    R11,USR#RPRM+4           SAVE POINTER TO SCT\n         LA    R1,USR#LGRP              POINT TO GROUP/OPID NAME\n         ST    R1,USR#RPRM+8            SAVE IN PARMLIST\n         LA    R1,USR#LUSR              POINT TO USER ID NAME\n         ST    R1,USR#RPRM+12           SAVE IN PARMLIST\n         LA    R1,USR#LPAS              POINT TO PASSWORD\n         ST    R1,USR#RPRM+16           SAVE IN PARMLIST\n         OI    USR#RPRM+16,X'80'        INDICATE LAST IN LIST\n         MVC   USR#RIDP,RACDEL          BUILD RACINIT DELETE PARM\n         MVC   USR#RICP,RACCRE          BUILD RACINIT CREATE PARM\n         MVC   USR#RCP,RACHK            BUILD RACHECK PARM\n*---------------------------------------------------------------------*\n* CLEAR ACEE FIELD IF PREVIOUSLY ACQUIRED.                            *\n* CHECK MASTER TERMINAL, SPECIAL BATHC OPIDS AND \"SECRET\" LOGON       *\n*\nSXL1_MASTER_TERMINAL    DS 0H\n*\n         TM    USR#FLG1,USR#RACF        ACEE FROM PREVIOUS USER\n         BNO   SXL1_NO_ACEE             'N' - NOTHING TO FREE\n         NI    USR#FLG1,X'FF'-USR#RACF  TURN OFF FLAG\n         OI    USR#FLG1,USR#XACE        INDICATE CLEAR ACEE\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUB TASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n*\nSXL1_NO_ACEE            DS 0H\n*\n         CLI   TRMDVC,TRMBATCH          IS THIS A BATCH TERM\n         BNE   NOT_BATCH                THIS IS NOT A BATCH TERM\n         B     BATCH_CHECK              BRANCH BATCH TERM SECTION\nNOT_BATCH               DS 0H\n         CLI   TRMDVC,TRMTRL            IS THIS A TARILER TERM\n         BNE   NOT_TRAILER              THIS IS NOT A TRAILER TRM\n         B     TRAILER_CHECK            BRANCH TRAILER TRM SECTION\nNOT_TRAILER             DS 0H\n         MVC   USR#GRP,0(R2)            INIT RACF GROUP NAME\n         MVC   USR#OPID,0(R2)           INIT OPID\n         MVC   USR#UID,=CL7' '          INIT USER ID\n         MVC   USR#PASS,=CL8' '         INIT PASSWORD\n         OI    USR#FLG1,USR#NOR         INIT AS NO RACF CHECKING\n         TIME  ,                        FIND THE CURRENT DATE\n*\n         STCM  R1,B'0111',USR#PDAT      STORE DATE\n         CLC   =C'UCC7MST',0(R5)        IS THIS THE MASTER TERMINAL?\n         BNE   SXL1_INIT_SCAN           'N' - INITIALIZE FOR SCAN\n*\n         CLC   =C'MASTER',0(R2)         OPID OF MASTER REQUIRED\n         BE    SXL1_EXIT_RC0            'Y' - CONTINUE LOGON\n         B     SXL1_EXIT_RC8            'N' - FAIL LOGON\n*---------------------------------------------------------------------*\n* SCAN USERID AND PASSWORD FIELD POINTED TO BY (R3)                   *\n* IF NO  PASSWORD FIELD EXISTS FAIL LOGON                             *\n* THEN CHECK FOR A USERID AND PASSWORD DELIMITED BY A                 *\n* \"/\" OR  \",\"                                                         *\n*                                                                     *\n* IF THE \"/\" OR \",\" DELIMITERS ARE USED THE USERID MAYBE              *\n* ANY LENGTH UP TO 7 BYTES.                                           *\n*                                                                     *\n* FROM THIS POINT ON THE OPID IS POINTED TO BY R9                     *\n* SINCE TRT DESTROYS R2.                                              *\n*---------------------------------------------------------------------*\n*\nSXL1_INIT_SCAN          DS 0H\n*\n         NI    USR#FLG1,X'FF'-USR#NOR   TURN OFF NO RACF INDICATOR\n         LR    R9,R2                    SAVE ADDR OF OPID\n         LTR   R3,R3                    AT THIS POINT WE NEED A PSWD\n         BZ    SXL1_EXIT_RC8            'N' - FAIL LOGON\n         LA    R6,2(R3)                 WHERE PARM BEGINS\n         LH    R7,0(R3)                 MAX LENGTH OF USERID/PSWD FIELD\n         BCTR  R7,0                     GET MACHINE LENGTH\n         BCTR  R7,0                     GET MACHINE LENGTH\n         BCTR  R7,0                     GET MACHINE LENGTH\n         LR    R1,R3                    POINT TO FIELD\n         EX    R7,TRTPARSE              PARSE FIELD BYTE\n         BC    8,SXL1_FULL_LENGTH       NONE FOUND\n         BC    2,SXL1_FOUND_BLANK       LAST CHAR IS BLANK\n         CLM   R2,B'0001',C' '          DID WE FIND A BLANK?\n         BE    SXL1_FOUND_BLANK         'Y' - CALCULATE LENGTH OF PSWD\n*\n         LR    R2,R1                    WHERE \"/\" IS\n         SR    R2,R6                    LENGTH OF USERID\n         SR    R7,R2                    LENGTH OF PASSWORD\n*\n*  USERID CAN NOT BE GREATER THAN 7 OR LESS THAN 1 CHARACTER(S)\n*\n         CH    R2,=H'7'                 IS USERID TOO LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         LTR   R2,R2                    IS USERID 'ZERO'?\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n*\nSXL1_CHK_FOR_BLANKS     DS 0H\n*\n* IF THE USER HIT THE SPACE BAR AFTER ENTERING USERID AND\n*   PASSWORD, THE BLANK WILL BE PASSED ALONG AS A VALID\n*   CHARACTER.  RACINIT WILL USE THE BLANK AS PART OF THE\n*   PASSWORD AND CAUSE ABEND S283.\n* THEREFORE, OMIT ALL TRAILING BLANKS .\n*\n         LA    R8,0(R7,R1)              END OF PASSWORD\n         CLI   0(R8),C' '               MAKE SURE NO BLANKS\n         BNE   SXL1_PASSWORD_LEN        'N' - NO TRAILING BLANKS\n         BCTR  R7,0                     DECREMENT LENGTH\n         LTR   R7,R7                    PASSWORD ALL BLANKS?\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         B     SXL1_CHK_FOR_BLANKS      CONTINUE SCAN\n*\nSXL1_PASSWORD_LEN       DS 0H\n*\n         CH    R7,=H'8'                 IS PASSWORD TOO LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         STC   R2,USR#LUSR              SAVE LENGTH\n         STC   R7,USR#LPAS              SAVE PSWD LENGTH\n         BCTR  R2,0                     MACHINE LENGTH\n         BCTR  R7,0                     MACHINE LENGTH\n         EX    R2,MVCUSRID              MOVE USERID\n         EX    R7,MVCPASS               MOVE PASSWORD\n         B     SXL1_SAVE_RACF_GRP       NOW MOVE THE RACFGRP TO PARMLST\n*\n*---------------------------------------------------------------------*\n* LAST CHARACTER IS A BLANK, SO SET MAX LENGTH OF USERID / PSWD       *\n*   FIELD AND CONTINUE AS IF NO BLANKS FOUND.                         *\n*                                                                     *\n* AT THIS POINT, THE USERID IS ASSUMED TO BE 7 BYTES LONG.            *\n*   TOO BAD IF IT ISN'T...                                            *\n*---------------------------------------------------------------------*\n*\nSXL1_FOUND_BLANK        DS 0H\n*\n         CLM   R2,B'0001',=C' '         IS THIS INDEED A BLANK?\n         BNE   SXL1_EXIT_RC8            'N' - A \"/\" OR \",\" NOT ALLOWED\n         LR    R2,R1                    WHERE BLANK IS\n         SR    R2,R6                    LENGTH TO BLANK\n         B     SXL1_MOVE_FIELDS         CONTINUE WITH THE MOVE\n*\nSXL1_FULL_LENGTH        DS 0H\n*\n*  THE USERID IS ASSUMED TO BE 7 BYTES SO THIS MEANS THAT\n*     THE FIELD MUST BE AT LEAST 8 BYTES LONG\n*     AND NO GREATER THAN 15 BYTES LONG.\n*\n         LH    R2,0(R3)                 LENGTH OF FIELD\n         S     R2,=F'2'                 OMIT LENGTH OF HALFWORD\n*\nSXL1_MOVE_FIELDS        DS 0H\n*\n         CH    R2,=H'8'                 LESS THAN 8 BYTES LONG\n         BL    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         CH    R2,=H'15'                GREATER THAN 15 BYTES LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         MVI   USR#LUSR,X'07'           LENGTH OF USERID\n         MVC   USR#UID,0(R6)            MOVE USERID\n*\n* REG 1 IS LOADED TO MATCH MVCPASS EXECUTED MOVE INSTRUCTION\n*\n         LA    R1,6(R6)                 WHERE PASSWORD BEGINS-1\n         S     R2,=F'7'                 OMIT LENGTH OF USERID+1\n         STC   R2,USR#LPAS              STORE LENGTH\n         BCTR  R2,0                     MACHINE LENGTH\n         EX    R2,MVCPASS               MOVE THE PASSWORD\n*\n*---------------------------------------------------------------------*\n* THE OPID ENTERED MUST BE A VALID RACF GROUP.                        *\n* IT IS NECESSARY TO CALCULATE THE LENGTH AND SAVE IN THE             *\n*   GROUP FIELD FOR THE RACINIT.                                      *\n*---------------------------------------------------------------------*\n*\nSXL1_SAVE_RACF_GRP      DS 0H\n*\n         TRT   0(8,R9),PARSE            SEE HOW LONG OPID IS\n         BC    8,SXL1_8BYTE_OPID        IT IS EIGHT BYTES LONG\n         BC    2,SXL1_7BYTE_OPID        IT IS SEVEN BYTES LONG\n         CLM   R2,B'0001',=C' '         IS THIS A BLANK?\n         BNE   SXL1_EXIT_RC8            'N' - ONLY BLANK ALLOWED,\n*                                               FAIL LOGON\n         LR    R2,R1                    WHERE BLANK IS\n         SR    R2,R9                    LENGTH TO BLANK\n         LTR   R2,R2                    LENGTH = 0\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         STC   R2,USR#LGRP              STORE LENGTH OF GROUP\n         B     SXL1_ATTACH_RACINIT      CONTINUE WITH LOGON\n*\nSXL1_7BYTE_OPID         DS 0H\n*\n         CLM   R2,B'0001',=C' '         IS THIS A BLANK\n         BNE   SXL1_EXIT_RC8            'N' - ONLY BLANK ALLOWED,\n*                                           FAIL LOGON\n         MVI   USR#LGRP,X'07'           STORE LENGTH OF GROUP\n         B     SXL1_XLATE_GROUP         RACF GROUP DOES NOT = OPID\n*\nSXL1_8BYTE_OPID         DS 0H\n*\n         MVI   USR#LGRP,X'08'           STORE LENGTH OF GROUP\n*\n*---------------------------------------------------------------------*\n* SINCE THE RACF GROUP IS GREATER THAN 6 CHARACTERS IT CANNOT BE      *\n*  EQUAL TO THE OPID IN THE UCC7 SECURITY TABLE.  IT WILL BE          *\n*  NECESSARY TO TRANSLATE THIS RACF GROUP INTO ITS PROPER OPID        *\n*  BEFORE HANDING CONTROL BACK TO UCC7.                               *\n*---------------------------------------------------------------------*\n*\nSXL1_XLATE_GROUP        DS 0H\n*\n         L     R6,SVTUFLD               POINT TO USER SVT\n         L     R1,USR$GRPS-USRSVT(R6)   RACF/OPID XLATE TABLE\n         LTR   R1,R1                    TABLE LOADED\n         BNZ   SXL1_XLATE_LOOP          'Y' - LOAD ALREADY DONE\n*\n         SLOAD EPLOC=SASS$GRP           LOAD MODULE\n*\n         LTR   R15,R15                  LOAD SUCCESSFUL\n         BZ    SXL1_EXIT_RC8            'N' - FAIL LOGON\n         ST    R15,USR$GRPS-USRSVT(R6)  SAVE POINTER TO GROUP XLATE TAB\n         LR    R1,R15                   POINT TO IT\n*\nSXL1_XLATE_LOOP         DS 0H\n*\n         CLI   0(R1),X'FF'              END OF TABLE\n         BE    SXL1_EXIT_RC8            'Y' - FAIL THE LOGON\n         CLI   0(R1),X'40'              END OF TABLE\n         BE    SXL1_EXIT_RC8            'Y' - FAIL THE LOGON\n         CLC   0(8,R1),0(R9)            MATCH AN OPID\n         BE    SXL1_XLATE_MATCH         'Y' - SAVE OPID\n         LA    R1,16(R1)                NEXT TABLE ENTRY\n         B     SXL1_XLATE_LOOP          DO THE NEXT ENTRY\n*\nSXL1_XLATE_MATCH        DS 0H\n*\n         MVC   0(8,R9),8(R1)            CHANGE OPID FOR UCC7\n         MVC   USR#OPID,8(R1)           SAVE OPID IN USRSCT\n*\n*---------------------------------------------------------------------*\n* THE RACINIT CAUSES A WAIT TO BE ISSUED IF RACF PROFILE DATASET      *\n*   IS BUSY THEREFORE IT IS NECESSARY TO USE THE SUBTASK FUNCTION     *\n*   OF UCC7 TO PREVENT WAITS.                                         *\n*---------------------------------------------------------------------*\n*\nSXL1_ATTACH_RACINIT     DS 0H\n*\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUBTASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n         LTR   R15,R15                  CONTINUE WITH LOGON\n         BZ    SXL1_EXIT_RC0            'Y' - CONTINUE ALL IS OK\n*\n*---------------------------------------------------------------------*\n* EXIT ROUTINES                                                       *\n*---------------------------------------------------------------------*\n*\nSXL1_EXIT_RC8           DS 0H\n*\n         LA    R15,8                    SET RC=8\n         SEXIT                          RETURN\n*\nSXL1_EXIT_RC0           DS 0H\n*\n         OI    USR#FLG1,USR#TACT        MARK TERMINAL ACTIVE\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\nBATCH_CHECK             DS 0H\n*\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\nTRAILER_CHECK           DS 0H\n*\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\n*---------------------------------------------------------------------*\n* RACF SUBROUTINE:                                                    *\n*                                                                     *\n*   THE PURPOSE OF THIS ROUTINE IS 2-FOLD.                            *\n*                                                                     *\n*   1) MAKE SURE THAT THE USER LOGGING ON PROVIDED A VALID            *\n*      USERID AND PASSWORD.                                           *\n*                                                                     *\n*   2) IF THE USERID AND PASSWORD ARE VALID THEN SAVE THE             *\n*      ACEE POINTER TO BE USED BY SGETPDS/SPUTPDS USER EXITS          *\n*      TO VERIFY RACF AUTHORITY.                                      *\n*                                                                     *\n*   IT IS POSSIBLE THAT THE LAST USER OF THE TERMINAL SCT DID         *\n*   NOT LOGOFF AND THUS DRIVE THE LOGOFF EXIT SASSXFF.  IN            *\n*   THIS CASE IT IS NECESSARY TO FREE THE ACEE ACQUIRED FOR           *\n*   THAT SESSION BEFORE OBTAINING THE CURRENT USER'S ACEE.            *\n*                                                                     *\n*   NOTE:  THE DELETE ACEE ROUTINE IS USED BY SASSXXFF AS             *\n*          WELL AS SASSXXL1.                                          *\n*                                                                     *\n*          SASSXX07 USES THE RACHECK CODE IN THIS MODULE.             *\n*---------------------------------------------------------------------*\n*\n         PUSH  USING\n         USING SCTSTART,R11\n         USING UCC7SVT,R12\n         USING RACFRTN,R15\n         USING USRSCT,R4\n*\nRACFRTN  DS    0H\n*\n         B     RACFSTRT                 BRANCH AROUND DATE/MOD STAMP\n         DC    C'RACFRTN &SYSDATE'      DATE/MODULE STAMP\n*\nRACFSTRT DS    0H\n*\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         DROP  R15\n         USING RACFRTN,R10\n         LR    R10,R15                  BASE REG\n         LR    R3,R1                    SAVE PARM\n         L     R12,0(,R3)               POINTER TO UCC7SVT\n         L     R11,4(,R3)               POINTER TO TERMINAL SCT\n         L     R4,SCTUSRXX              POINT TO USRSCT\n         ST    R13,USR#SAVE+4           CHAIN CALLERS SAVEAREA\n         LA    R1,USR#SAVE              POINT TO MY SAVEAREA\n         ST    R1,8(R13)                CHAIN MY SAVEAREA\n         LR    R13,R1                   SET MY SAVEAREA\n*\n* SEE IF RACINIT(DELETE) REQUEST\n*\n         TM    USR#FLG1,USR#XACE        CLEAR ACEE\n         BNO   RACINIT_NO_DELETE        'N' - REQUIRE ACEE\n         NI    USR#FLG1,X'FF'-USR#XACE  TURN OFF FLAGS\n         SR    R15,R15                  INIT RC=0\n         L     R5,USR#ACEE              POINT TO ACEE ADDRESS\n         LTR   R5,R5                    PREVIOUS ACEE ACQUIRED/\n*                                         NOT FREED\n         BZ    RACFRTN_EXIT             'N' - NOTHING TO DO\n         B     RACINIT_NO_DELETE   ATB INSERTEDEQUIRE ACEE\n*        L     R5,USR#ACEE              WHERE ACEE POINTER WILL BE\n         LA    R5,USR#ACEE   CH(ATB)    WHERE ACEE POINTER WILL BE\n*\n         RACINIT ENVIR=DELETE,ACEE=(R5),RELEASE=1.7,                   X\n               MF=(E,USR#RIDP)\n*\n         XC    USR#ACEE,USR#ACEE        CLEAR ACEE POINTER\n         B     RACFRTN_EXIT             RETURN\n*\nRACINIT_NO_DELETE       DS 0H\n*\n*  SEE IF RACHECK REQUEST\n*\n         TM    USR#FLG1,USR#RCHK        RACHECK REQUEST\n         BO    RACFRTN_RACHECK          'Y' - ISSUE RACHECK\n         LA    R5,USR#ACEE              WHERE ACEE POINTER WILL GO\n         L     R9,12(,R3)               POINTER TO USERID\n         L     R2,16(,R3)               POINTER TO PASSWORD\n         L     R7,8(,R3)                POINTER TO GROUP\n*\n         RACINIT USERID=(R9),PASSWRD=(R2),GROUP=(R7),PASSCHK=YES,      X\n               ENVIR=CREATE,ACEE=(R5),RELEASE=1.7,LOG=ALL,             X\n               MF=(E,USR#RICP)\n*\n         OI    USR#FLG1,USR#RACF        INDICATE ACEE ACQUIRED\n         B     RACFRTN_EXIT\n*\nRACFRTN_RACHECK         DS 0H\n*\n         L     R5,USR#ACEE              ADDRESS OF ACEE\n         L     R2,20(,R3)               ADDRESS OF DSNAME\n         LA    R6,USR#VOL               ADDRESS OF VOLUME NAME\n         SR    R7,R7                    CLEAR A REGISTER\n         IC    R7,24(,R3)               RACF ATTR\n*\n         RACHECK ENTITY=((R2)),VOLSER=(R6),                            X\n               DSTYPE=N,ACEE=(R5),ATTR=(R7),                           X\n               MF=(E,USR#RCP)\n*\n         NI    USR#FLG1,X'FF'-USR#RCHK  TURN OFF FLAG\n*\nRACFRTN_EXIT            DS 0H\n*\n         L     R13,USR#SAVE+4           GET CALLERS SAVEAREA\n         ST    R15,16(,R13)             SAVE RETURN CODE\n         LM    R14,R12,12(R13)          RESTORE REGS\n         BR    R14\n         POP   USING\n*\n*---------------------------------------------------------------------*\n*  DATA DEFINITIONS                                                   *\n*---------------------------------------------------------------------*\n*\n         LTORG\nSASS$GRP DC    CL8'SASS$GRP'\nMVCUSRID MVC   USR#UID(0),2(R3)         SAVE USERID\nMVCPASS  MVC   USR#PASS(0),1(R1)        SAVE PASSWORD\nTRTPARSE TRT   2(0,R1),PARSE            SEARCH FOR A BLANK OR SLASH\n*\n* RACINIT DELETE LIST\n*\nRACDEL   RACINIT ENVIR=DELETE,ACEE=RACDEL,RELEASE=1.7,MF=L\n*\nRACDEND  EQU   *\n*\n* RACINIT CREATE LIST\n*\nRACCRE   RACINIT USERID=RACCRE,PASSWRD=RACCRE,GROUP=RACCRE,            X\n               PASSCHK=YES,ENVIR=CREATE,ACEE=RACCRE,                   X\n               RELEASE=1.7,LOG=ALL,MF=L\n*\nRACCEND  EQU   *\n*\n* RACHECK LIST\n*\nRACHK    RACHECK ENTITY=(RACHK),VOLSER=RACHK,CLASS='DATASET',          X\n               DSTYPE=N,ACEE=RACHK,APPL='RLCLEAR',MF=L\n*\nRACHKEND EQU   *\n*\nPARSE    DC    XL256'00'\n         ORG   PARSE+C' '\n         DC    C' '\n         ORG   PARSE+C'/'\n         DC    C'/'\n         ORG   PARSE+C','\n         DC    C','\n         ORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAUNMASK": {"ttr": 8711, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00W\\x00W\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "FILE013"}, "text": "UNMASK   TITLE 'UNMASK USERID PASSWORD'\n*---------------------------------------------------------------------*\n*  THIS PROGRAM IS QUITE SENSITIVE IN NATURE.  IT WILL 'UNMASK' A     *\n*  USER'S PASSWORD IN THE RACF DATABASE ASSUMING THE STANDARD RACF    *\n*  MASKING IS USED.  IF THE DES ENCRYPTION METHOD (OR ANOTHER FORM    *\n*  OF ENCRYPTION) HAS BEEN EMPLOYED, THIS PROGRAM WILL NOT WORK.      *\n*---------------------------------------------------------------------*\n         MACRO\n         REGISTER\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n*\n         REGISTER\n*\nSAUNMASK CSECT\n         SAVE  (14,12),,'SAUNMASK&SYSDATE.&SYSTIME'\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n         USING SAUNMASK,R12\n         ST    R13,SAVEAREA+4     BACKWARD POINTER\n         LR    R2,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(,R2)\n         LR    R3,R1                 SAVE PARM ADDR\n         L     R3,0(R3)              GET ADDR OF ID FIELD\n         XC    OPASS(8),OPASS        CLEAR OUT SAVED AREA\n         L     R6,0(R3)              GET HIGH WORD ENCRYPTED PSWD\n         XR    R7,R7                 CLEAR BOTTOM OF PASSWORD\n         L     R4,=X'F0000000'       DEAL WITH 4 BITS AT ONCE\n         XR    R5,R5\n         LR    R8,R6\n         SRL   R8,3\n         XR    R6,R8\n         NR    R6,R4                 FIRST FOUR BITS IN R6\n         ST    R6,OPASS              SAVE IT IN A SAFE PLACE\n         LA    R10,15                COUNT FOR NUMBER OF NYBBLES\nLOOP     EQU   *\n         LM    R8,R9,0(R3)           AND ENCRYPTED PASSWORD\n         NR    R6,R4                 GET THE PREV GROUP OF 4 BITS\n         NR    R7,R5\n         SRDL  R4,4                  CREATE NEW MASK\n         NR    R8,R4                 GET CURRENT GROUP\n         NR    R9,R5\n         SRDL  R6,4                  SET UP FOR DECRYPTING\n         XR    R8,R6\n         XR    R9,R7\n         SLDL  R6,1\n         XR    R8,R6\n         XR    R9,R7\n         NR    R8,R4                 CLEAR EXTRANEOUS BITS\n         NR    R9,R5\n         LR    R6,R8\n         LR    R7,R9\n         SRDL  R6,3\n         XR    R8,R6\n         XR    R9,R7\n         NR    R8,R4                 CLEAR EXTRANEOUS BITS\n         NR    R9,R5\n         LM    R6,R7,OPASS           OR IN NOW DECRYPTED BITS\n         OR    R6,R8\n         OR    R7,R9\n         STM   R6,R7,OPASS           STORE ENLARGED PSWD\n         BCT   R10,LOOP              DONE?\n         STM   R6,R7,0(R3)           MOVE IN PASSWORD\n         L     R13,SAVEAREA+4     BACKWARD POINTER\n         RETURN (14,12),RC=0\n         LTORG\nSAVEAREA DS    18F\nOPASS    DC    XL8'00'\n         END SAUNMASK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAUXTRT": {"ttr": 8714, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01o\\x01o\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 367, "newlines": 367, "modlines": 0, "user": "FILE013"}, "text": "*---------------------------------------------------------------------*\n*   PROGRAM:       SAUXTRT                                            *\n*                                                                     *\n*   AUTHOR:                                                           *\n*                                                                     *\n*   DATE:          12/10/86                                           *\n*                                                                     *\n*   FUNCTION:      WRITES A RECORD TO DDNAME=RACFOUT FOR EACH         *\n*                  USERID IN THE RACF DATABASE.                       *\n*                                                                     *\n*   SPECIAL NOTES: THIS MODULE MUST RESIDE IN APF AUTHORIZED LIBRARY  *\n*                  SINCE IT ISSUES RACF MANAGER REQUESTS.             *\n*                                                                     *\n*                  THIS PROGRAM SHOULD BE PROTECTED BY RACF PROGRAM   *\n*                  PROTECTION LIMITED TO SELECT USERS DUE TO THE      *\n*                  NATURE OF IT'S FUNCTION.                           *\n*                                                                     *\n*   GLOSSARY OF OUTPUT:                                               *\n*                                                                     *\n*   SMFID   - SMFID OF SYSTEM WHERE DATA RETRIEVED                    *\n*   PROFLEN - LENGTH OF USERID                                        *\n*   RACPROF - USERD                                                   *\n*   FLAG1   - ADSP                                                    *\n*   FLAG2   - SPECIAL                                                 *\n*   FLAG3   - OPERATIONS                                              *\n*   FLAG4   - AUDITOR                                                 *\n*   FLAG5   - GRPACC                                                  *\n*   FLAG6   - AUDITOR                                                 *\n*   FLAG7   - PASSWORD REQUIRED                                       *\n*   FLAG8   - OIDCARD REQUIRED                                        *\n*   UAUDIT  - UAUDIT                                                  *\n*   PASSINT - PASSWORD INTERVAL                                       *\n*   AUTHOR  - OWNER                                                   *\n*   DFLTGRP - DEFAULT GROUP                                           *\n*   AUTHDATE- CREATE DATE                                             *\n*   PASSDATE- PASSWORD CHANGE DATE                                    *\n*   LJDATE  - LAST ACCESS DATE                                        *\n*   PGMRNAME- PROGRAMMER NAME                                         *\n*   INSTLEN - LENGTH OF INSTALLATION DATA FIELD                       *\n*   INSTDATA- INSTALLATION DATA                                       *\n*                                                                     *\n*   REGISTER CONVENTIONS:                                             *\n*                                                                     *\n*      PROLOGUE : R2 - CVT BASE                                       *\n*                 R3 - ASCB BASE                                      *\n*                 R4 - ASXB BASE                                      *\n*                 R5 - ACEE BASE                                      *\n*                 R8 - WORKAREA BASE                                  *\n*                                                                     *\n*      MAIN     : R2 - GENERAL TARGET                                 *\n*                 R3 - TARGET LENGTH                                  *\n*                 R4 - GENERAL SOURCE                                 *\n*                 R5 - SOURCE LENGTH                                  *\n*                 R6 - GENERAL LENGTH                                 *\n*                 R7 - GENERAL ADDRESS                                *\n*                 R8 - WORKAREA BASE                                  *\n*                 R9 - LINK CONTROL REGISTER                          *\n*                 R10- LINK CONTROL REGISTER                          *\n*                                                                     *\n*      NOTE - OPERANDS ON ICHEINTY MACRO MUST BE ABSOLUTE             *\n*                                                                     *\n*      THE FOLLOWING SAMPLE JCL CAN BE USED TO EXECUTE SAUXTRT.       *\n*                                                                     *\n*      //STEP1    EXEC PGM=SAUXTRT,REGION=1024K                       *\n*      //STEPLIB  DD DSN=YOUR.APFAUTH.LIBRARY,DISP=SHR                *\n*      //SYSPRINT DD SYSOUT=*                                         *\n*      //SYSUDUMP DD SYSOUT=*                                         *\n*      //RACFOUT  DD DSN=YOUR.TARGET.DATASET,                         *\n*      //            DISP=(NEW,CATLG,DELETE),                         *\n*      //            UNIT=3380,                                       *\n*      //            SPACE=(CYL,(2,1)),                               *\n*      //            DCB=(LRECL=328,RECFM=VB,BLKSIZE=23476)           *\n*      //*                                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         REGISTER\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n*\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n*\n         REGISTER\n*\n         USING CVT,R2\n         USING ASCB,R3\n         USING ASXB,R4\n         USING ACEE,R5\n         USING WORKAREA,R8\n         USING SAUXTRT,R12\nSAUXTRT CSECT\n         SAVE  (14,12),,'SAUXTRT &SYSDATE.&SYSTIME'\n         LR    R12,R15            ESTABLISH ADDRESSABILITY\n*        LR    R11,R1             SET PARM SAVE REGISTER\n         GETMAIN R,LV=WORKSIZE\n         ST    R1,8(,R1)          FORWARD POINTER\n         ST    R13,4(,R1)         BACKWARD POINTER\n         LR    R8,R1              ESTABLISH ADDRESSABILITY\n         LR    R13,R1             POINT TO NEW SAVE AREA\n         MVC   LINE(133),BLANKS   BLANK OUT PRINT LINE\n         OPEN  (RACFOUT,(OUTPUT),SYSPRINT,(OUTPUT))\n         SPACE\n         L     R2,CVTPTR          POINT TO CVT\n         L     R3,CVTTCBP         POINT TO TCB AND ASCB POINTERS\n         L     R3,12(,R3)         POINT TO CURRENT ASCB\n         L     R4,ASCBASXB        POINT TO ASXB\n         L     R5,ASXBSENV        POINT TO ACEE\n         LTR   R5,R5              IS THERE AN ACEE?\n         BNZ   RACFCHK           ..YES, CONTINUE\n         MVC   LINE(L'MSG1),MSG1  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nRACFCHK  RACSTAT\n         LTR   R15,R15            IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         MVC   LINE(L'MSG2),MSG2  ..NO, SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         EJECT\nRACFOK   L     R3,CVTSMCA         POINT TO SMCA\n         USING SMCABASE,R3\n         MVC   SMFID(4),SMCASID   RETRIEVE SMFID FROM SMCA\n         DROP  R2\n         DROP  R3\n         DROP  R4\n         DROP  R5\n         XR    R3,R3\n         STH   R3,RACRDW2\n         MVI   ENTRYNAM,X'00'\n         MVC   ENTRYNAM+1(7),ENTRYNAM SET INITIAL PROFILE NAME\n         MVI   ENTRY,X'08'        SET INITIAL PROFILE LENGTH\n         EJECT\nLOOP     LA    R2,RBA             POINT TO TARGET FIELD\n         L     R3,=A(WKAREAL)     SET FIELD LENGTH\n         XR    R4,R4              SET SOURCE FIELD TO NULL\n         XR    R5,R5              SET SOURCE LENGTH AND PAD TO X'00'\n         MVCL  R2,R4              CLEAR THE WORK AREA\n         ICHEINTY NEXT,TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA,           X\n               ACTIONS=(ACTN1,ACTN2,ACTN3,ACTN4,ACTN5,ACTN6,ACTN7,     X\n               ACTN8,ACTN9,ACTN10,ACTN11,ACTN12,ACTN13,ACTN14,ACTN15,  X\n               ACTN16,ACTN17)\n         LTR   R15,R15            WAS LOCATE SUCCESSFUL?\n         BNZ   LOCATNZ            ..NO, PROCESS EXCEPTION\n         BAL   R9,LOCAT0\n         B     LOOP\n         EJECT\nLOCATNZ  C     R15,=F'12'         HAVE WE CHECKED ALL USERS?\n         BE    LASTUSER           ..YES\n         SPACE\nBADRETCD CVD   R15,WORKD          CONVERT RETURN CODE TO DECIMAL\n         UNPK  MSG3CD,WORKD+6(2)  MOVE TO ERROR MESSAGE\n         OI    MSG3CD+1,X'F0'     MAKE LAST CHARACTER PRINTABLE\n         MVC   LINE(L'MSG3),MSG3  SETUP ERROR MESSAGE\n         PUT   SYSPRINT,LINE      WRITE ERROR MESSGAE\n         B     RETURN             AND TERMINATE THE PROGRAM\n         SPACE\nLASTUSER MVC   LINE(L'MSG4),MSG4  SETUP MESSAGE\n         PUT   SYSPRINT,LINE      WRITE SUCCESS MESSGAE\n         SPACE\nRETURN   CLOSE (RACFOUT,,SYSPRINT)\n         L     R13,SAVEOLD        BACKWARD POINTER\n         DROP  R8                 DROP R8 ADDRESSABILITY\n         FREEMAIN R,LV=WORKSIZE,A=(R8)\n         USING SAVEAREA,R13       USE OLD SAVE AREA FRO ADDRESSABILITY\n         XC    SAVER15(4),SAVER15 CLEAR RETURN CODE\n         XC    SAVENEW,SAVENEW    CLEAR FORWARD POINTER\n         RETURN (14,12)           RETURN TO CALLER\n         EJECT\nLOCAT0   LA    R2,RACPROF         POINT TO TARGET FIELD\n         XR    R3,R3              CLEAR WORK REGISTER\n         IC    R3,ENTRY           GET LENGTH OF PROFILE NAME\n         STC   R3,PROFLEN         GET LENGTH OF PROFILE NAME\n         LR    R5,R3\n         LA    R4,ENTRYNAM        POINT TO SOURCE FIELD\n         MVC   RACPROF(8),BLANKS  BLANK OUT TARGET FIELD\n         MVCL  R2,R4              MOVE PROFILE NAME TO PRINT LINE\n         XR    R6,R6              CLEAR R6\n         LA    R6,RETDATA         SET INITIAL ADDRESS FOR RETDATA\n$FLAG1   LA    R2,FLAG1           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG2   LA    R2,FLAG2           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG3   LA    R2,FLAG3           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG4   LA    R2,FLAG4           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG5   LA    R2,FLAG5           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG6   LA    R2,FLAG6           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG7   LA    R2,FLAG7           POINT TO TARGET\n         BAL   R10,MOVEIT\n$FLAG8   LA    R2,FLAG8           POINT TO TARGET\n         BAL   R10,MOVEIT\n$UAUDIT  LA    R2,UAUDIT          POINT TO TARGET\n         BAL   R10,MOVEIT\n$PASSINT LA    R2,PASSINT         POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHOR  LA    R2,AUTHOR          POINT TO TARGET\n         BAL   R10,MOVEIT\n$DFLTGRP LA    R2,DFLTGRP         POINT TO TARGET\n         BAL   R10,MOVEIT\n$AUTHDTE LA    R2,AUTHDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$PASSDTE LA    R2,PASSDATE        POINT TO TARGET\n         BAL   R10,MOVEIT\n$LJDTE   LA    R2,LJDATE          POINT TO TARGET\n         BAL   R10,MOVEIT\n$PGMRNME LA    R2,PGMRNAME        POINT TO TARGET\n         BAL   R10,MOVEIT\n$INST    LA    R2,INSTDATA\n         XR    R7,R7              CLEAR WORK REGISTER\n         IC    R7,2(R6)           INSTALLATION VARIABLE LENGTH FIELD\n         STC   R7,INSTLEN         INSTALLATION VARIABLE LENGTH FIELD\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,3(R6)           ESTABLISH FIRST BYTE OF DATA\n         EX    R3,BLNKINST\n         MVCL  R2,R4\n         LA    R7,73(R7)\n         STH   R7,RACRDW1\n         PUT   RACFOUT,RACREC\n         BR    R9\nMOVEIT   XR    R7,R7              CLEAR WORK REGISTER\n         LH    R7,0(,R6)          LOAD RETURNED LENGTH OF FLG4\n         LR    R3,R7\n         LR    R5,R7\n         LA    R4,2(,R6)          POINT TO SOURCE\n         MVCL  R2,R4\n         LA    R6,2(R7,R6)        POINT TO NEXT FIELD\n         BR    R10\n         LTORG\nBLANKS   DC    CL255' '\n         SPACE\nMSG1     DC    C'1**ERROR** - TASK ACEE NOT FOUND'\nMSG2     DC    C'1**ERROR** - RACF IS NOT OPERATING'\nMSG3     DC    C'1**ERROR** - RACF INTERNAL ERROR CODE = XX'\n         ORG   *-2\nMSG3CD   DS    CL2\nMSG4     DC    C'1SAUXTRT COMPLETED SUCCESSFULLY'\n         SPACE\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FA,LRECL=133,   X\n               BLKSIZE=133\nRACFOUT  DCB   DSORG=PS,DDNAME=RACFOUT,MACRF=PM,RECFM=VB\n         SPACE\nENTRY    DS    AL1(1)             LENGTH OF PROFILE NAME FIELD\nENTRYNAM DS    XL44               PROFILE NAME\nWKAREA   DS    0F\nWKAREAS  DC    AL4(WKAREAL+4)     LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nRETDATA  DS    CL327              RETURNED DATA\nWKAREAE  EQU   *                  END OF WORK AREA\nWKAREAL  EQU   *-RBA              CALCULATE WORK AREA LENGTH\nACTN1    ICHEACTN FIELD=FLAG1     ADSP\nACTN2    ICHEACTN FIELD=FLAG2     SPECIAL\nACTN3    ICHEACTN FIELD=FLAG3     OPERATIONS\nACTN4    ICHEACTN FIELD=FLAG4     REVOKE\nACTN5    ICHEACTN FIELD=FLAG5     GRPACC\nACTN6    ICHEACTN FIELD=FLAG6     AUDITOR\nACTN7    ICHEACTN FIELD=FLAG7     PASSWORD REQUIRED\nACTN8    ICHEACTN FIELD=FLAG8     OIDCARD REQUIRED\nACTN9    ICHEACTN FIELD=UAUDIT    UAUDIT\nACTN10 ICHEACTN FIELD=PASSINT     PASSWORD INTERVAL\nACTN11 ICHEACTN FIELD=AUTHOR      OWNER\nACTN12 ICHEACTN FIELD=DFLTGRP     DEFAULT GROUP\nACTN13 ICHEACTN FIELD=AUTHDATE    CREATE DATE\nACTN14 ICHEACTN FIELD=PASSDATE    PASSWORD CHANGE DATE\nACTN15 ICHEACTN FIELD=LJDATE      LAST ACCESS DATE\nACTN16 ICHEACTN FIELD=PGMRNAME    PROGRAMMER NAME\nACTN17 ICHEACTN FIELD=INSTDATA    INSTALLATION DATA\n         SPACE\nBLNKINST MVC   INSTDATA(255),BLANKS\n         EJECT\n         PRINT NOGEN\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nWORKD    DS    D                  DOUBLEWORD WORK AREA FOR ARITHMETIC\nLINE     DS    CL133              DETAIL PRINT LINE\n         DS    0D\nRACREC   DS    CL328              DETAIL RAC RECORD\n         ORG   RACREC\nRACRDW1  DS    H                  VARIABLE RECORD LENGTH\nRACRDW2  DS    H                  SEQUENCE FOR VBS RECORDS\nSMFID    DS    CL4                SMFID FROM SMCASID\nPROFLEN  DS    B                  USERID LENGTH\nRACPROF  DS    CL8                USERID\nFLAG1    DS    B                  ADSP\nFLAG2    DS    B                  SPECIAL\nFLAG3    DS    B                  OPERATIONS\nFLAG4    DS    B                  REVOKE\nFLAG5    DS    B                  GRPACC\nFLAG6    DS    B                  AUDITOR\nFLAG7    DS    B                  PASSWORD REQUIRED\nFLAG8    DS    B                  OIDCARD REQUIRED\nUAUDIT   DS    B                  UAUDIT\nPASSINT  DS    CL1                PASSWORD INTERVAL\nAUTHOR   DS    CL8                OWNER\nDFLTGRP  DS    CL8                DEFAULT GROUP\nAUTHDATE DS    CL3                CREATE DATE\nPASSDATE DS    CL3                PASSWORD CHANGE DATE\nLJDATE   DS    CL3                LAST ACCESS DATE\nPGMRNAME DS    CL20               PROGRAMMER NAME\nINSTLEN  DS    B                  INSTALLATION DATA LENGTH\nINSTDATA DS    CL255              INSTALLATION DATA\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         CVT DSECT=YES\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEESMCA ,\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETPW": {"ttr": 8966, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01-\\x01-\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 301, "newlines": 301, "modlines": 0, "user": "FILE013"}, "text": "SETPW    TITLE 'SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE                 *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THIS TSO COMMAND PROCESSOR ALLOWS PASSWORDS TO BE CHANGED IN   *\n*     ORDER THAT CENTRALIZED PASSWORD CONTROL CAN BE PERFORMED.  THIS*\n*     COMMAND CAN ONLY BE ISSUED BY A RACF USER WHO HAS SPECIAL      *\n*     AUTHORITY.  THE SYNTAX OF THE SETPW COMMAND IS:                *\n*                                                                    *\n*        SETPW USERID PASSWORD                                       *\n*                                                                    *\n*  NOTE -                                                            *\n*                                                                    *\n*     THIS COMMAND MUST BE ENTERED IN THE TSO AUTHORIZED             *\n*     COMMAND TABLE, 'IKJEFTE2' AND LINKED 'AC=1'.                   *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     REENTRANT, AUTHORIZED, ATTACHED FROM THE TMP                   *\n*                                                                    *\n*  ENTRY CONDITIONS -                                                *\n*                                                                    *\n*     R1  - ADDRESS OF THE COMMAND PROCESSOR PARAMETER LIST (CPPL)   *\n*     R13 - ADDRESS OF A STANDARD SAVE AREA                          *\n*     R14 - RETURN ADDRESS                                           *\n*     R15 - ENTRY ADDRESS (SETPW)                                    *\n*                                                                    *\n*  EXIT CONDITIONS -                                                 *\n*                                                                    *\n*     R15 - CONTAINS A RETURN CODE:                                  *\n*        R15 = 0 - PASSWORD CHANGED FOR USERID                       *\n*        R15 = 8 - PARSE ERROR                                       *\n*        R15 = 12 - ERROR IN RACF PROCESSING                         *\n*        R15 = 16 - RACF NOT ACTIVE                                  *\n*        R15 = 20 - USERID NOT AUTHORIZED                            *\n*                                                                    *\n*  REGISTER USAGE -                                                  *\n*                                                                    *\n*     R13 - ADDRESS OF SAVE/WORK AREA                                *\n*     R12 - BASE ADDRESS (SETPW)                                     *\n*     R11 - ADDRESS OF COMMAND PROCESSOR PARAMETER LIST (CPPL)       *\n*     R10 - ADDRESS OF PARSE PARAMETER LIST (PPL)                    *\n*     R9  - ADDRESS OF ADDRESS SPACE CONTROL BLOCK (ASCB)            *\n*     R8  - ADDRESS OF ADDRESS SPACE EXTENSION BLOCK (ASXB)          *\n*     R7  - ADDRESS OF ACCESSOR ENVIRONMENT ELEMENT (ACEE)           *\n*     R6  - ADDRESS OF PARAMETER DESCRIPTOR LIST (PDL)               *\n*     R4  - WORK                                                     *\n*     R3  - WORK                                                     *\n*     R2  - WORK                                                     *\n*     R1  - WORK                                                     *\n*     R0  - WORK                                                     *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     1.  CHECK THE USER'S AUTHORIZATION FOR THE COMMAND AND THE     *\n*         STATUS OF RACF (ACTIVE OR INACTIVE).                       *\n*     2.  CALL IKJPARS TO PARSE THE COMMAND LINE FOR THE PARAMETERS. *\n*     3.  SET THE NEW PASSWORD AND PASSWORD CHANGE DATE IN THE       *\n*         TEMPLATE AND REWRITE THE USER TEMPLATE.                    *\n*     4.  EXIT.                                                      *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*     WRITTEN 10/85 BY BILL SOMERVILLE,                              *\n*                                                                    *\n*           MCI TELECOMMUNICATIONS CORP.                             *\n*           1151 SEVEN LOCKS ROAD                                    *\n*           ROCKVILLE, MARYLAND 20854                                *\n*           (301) 738-2768                                           *\n*                                                                    *\n**********************************************************************\n         EJECT\n         USING SAVEAREA,R13\n         USING SETPW,R12\n         USING CPPL,R11\n         USING PPL,R10\n         USING ASCB,R9\n         USING ASXB,R8\n         USING ACEE,R7\n         USING SETPWPDL,R6\n         USING PSA,R0\nSETPW    CSECT\n         SAVE  (14,12),,'SETPW   &SYSDATE.&SYSTIME'    SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LR    R11,R1              SAVE CPPL ADDRESS\n         GETMAIN R,LV=WORKSIZE     OBTAIN A WORK AREA\n         ST    R1,SAVENEW          FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN\n         LR    R13,R1              SAVE THE SAVE AREA POINTER\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n**********************************************************************\n*  INITIALIZE THE PARSE PARAMETER LIST.                              *\n**********************************************************************\n         LA    R10,PWPPL           GET THE PPL ADDRESS\n         MVC   PPLUPT(4),CPPLUPT   MOVE THE UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT   MOVE THE ECT ADDRESS\n         LA    R1,PWECB            GET THE ECB ADDRESS\n         ST    R1,PPLECB           SAVE THE ECB ADDRESS\n         L     R1,=A(SETPWPCL)     GET THE PCL ADDRESS\n         ST    R1,PPLPCL           SAVE THE PCL ADDRESS\n         LA    R1,PWPDL            GET THE PDL ADDRESS AREA ADDRESS\n         ST    R1,PPLANS           SAVE THE PDL ADDRESS AREA ADDRESS\n         MVC   PPLCBUF(4),CPPLCBUF MOVE THE COMMAND BUFFER ADDRESS\n         XC    PPLUWA(4),PPLUWA    CLEAR THE USER WORK AREA ADDRESS\n         MVC   PWUSERID(8),=CL8' ' INITIALIZE THE USERID\n         MVC   PWPSWD(8),=CL8' '   INITIALIZE THE PASSWORD\n         XC    PWECB(4),PWECB      CLEAR THE ECB\n**********************************************************************\n*  INITIALIZE THE MESSAGE PARAMETER LIST.                            *\n**********************************************************************\n         LA    R1,MTCSECTP         GET THE MT DESCRIPTOR ADDRESS\n         ST    R1,MTPLPTR          SAVE IN THE MT HEADER\n         ST    R11,MTCPPLP         SAVE THE CPPL ADDRESS\n         XC    MTECBP(4),MTECBP    CLEAR THE ECB POINTER\n         L     R1,=A(SETPWMSG)     GET THE MESSAGE CSECT ADDRESS\n         ST    R1,MTCSECTP         SAVE THE MESSAGE CSECT ADDRESS\n         MVI   MTSW1,MTHEXSW+MTPUTLSW   INSERTS HEX + PUTLINE\n         MVI   MTSW2,X'00'         CLEAR SWITCHES\n         XC    MTINSRTS(16),MTINSRTS    CLEAR INSERTS\n         EJECT\n**********************************************************************\n*  PARSE THE COMMAND LINE FOR THE USERID AND PASSWORD.               *\n**********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,(R10))    PARSE THE COMMAND LINE\n         LTR   R15,R15             DID THE PARSE COMPLETE?\n         BNZ   PARSEERR            NO, GO ANALYZE THE ERROR\n         L     R6,PPLANS           GET THE PDL ADDRESS ADDRESS\n         L     R6,0(,R6)           GET THE PDL ADDRESS\n         LH    R3,USERID+4         GET THE USERID LENGTH\n         STC   R3,PWUSERLN         SAVE THE USERID LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,USERID           GET THE USERID ADDRESS\n         LA    R2,PWUSERID         GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE USERID TO THE WORK AREA\n         LH    R3,PASSWORD+4       GET THE PASSWORD LENGTH\n         STC   R3,PWPSWDLN         SAVE THE PASSWORD LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,PASSWORD         GET THE PASSWORD ADDRESS\n         LA    R2,PWPSWD           GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE PASSWORD TO THE WORK AREA\n         TIME  DEC                 OBTAIN THE CURRENT DATE\n         STCM  R1,B'0111',PWDATE   SAVE THE DATE\n         EJECT\n**********************************************************************\n*  CHECK ON THE STATUS OF RACF AND THE USER'S AUTHORITY TO ISSUE     *\n*  THIS COMMAND.                                                     *\n**********************************************************************\n         RACSTAT ,                 CHECK ON RACF STATUS\n         LTR   R15,R15             IS RACF ALIVE AND WELL?\n         BNZ   RACINACT            NO, GO ISSUE MESSAGE AND END\n         L     R9,PSAAOLD          GET OUR ASCB ADDRESS\n         L     R8,ASCBASXB         GET OUR ASXB ADDRESS\n         ICM   R7,B'1111',ASXBSENV IS THERE AN ACEE?\n         BZ    NOTAUTHR            NO, USER NOT AUTHORIZED\n         TM    ACEEFLG1,ACEESPEC   IS THE USER SPECIAL?\n         BNO   NOTAUTHR            NO, USER NOT AUTHORIZED\n         EJECT\n**********************************************************************\n*  CHANGE THE PASSWORD AND THE PASSWORD CHANGE DATE.                 *\n**********************************************************************\n         XR    R2,R2               CLEAR R2\n         IC    R2,PWPSWDLN         GET THE PASSWORD LENGTH\n         LA    R3,PWPSWD           GET THE PASSWORD ADDRESS\n         LA    R4,PWDATE           GET THE PASSWORD CHANGE DATE ADDRESS\n         MVC   PWUPDPWD(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDDAT(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         ICHEACTN FIELD='PASSWORD',FLDATA=((R2),(R3)),ENCRYPT=YES,     X\n               MF=(E,PWUPDPWD)\n         ICHEACTN FIELD='PASSDATE',FLDATA=(3,(R4)),MF=(E,PWUPDDAT)\n         MVC   PWUPDATE(INTYSKLN),INTYSKEL   MOVE IN SKELETON UPDATE\n         LA    R1,PWUPDATE+X'1C'   GET THE FLDEF ADDRESS\n         ST    R1,PWUPDATE+X'08'   SAVE FLDEF ADDRESS IN THE PLIST\n         ICHEINTY ALTER,TYPE='USR',ENTRY=PWUSERLN,MF=(E,PWUPDATE),     X\n               ACTIONS=(PWUPDPWD,PWUPDDAT)\n         LTR   R15,R15             WAS THE PASSWORD UPDATED PROPERLY?\n         BNZ   RACERR              NO, GO PRINT A MESSAGE AND EXIT\n         B     UPDATEOK            YES, INDICATE UPDATE WAS SUCCESSFUL\n         EJECT\n**********************************************************************\n*  ISSUE MESSAGES INDICATING THE STATUS OF THE CHANGE REQUEST.       *\n**********************************************************************\nRACINACT MVC   MTMSGID(4),=CL4'PW01'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,16              SYNTAX ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nNOTAUTHR MVC   MTMSGID(4),=CL4'PW02'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,20              SYNTAX ERROR RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nPARSEERR MVC   MTMSGID(4),=CL4'PW03'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,8               PARSE ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERR   LA    R2,12              RACF ERROR RETURN CODE\n         C     R15,=F'12'         WAS THE USERID FOUND?\n         BE    RACERRNU           NO, PRINT SPECIAL MESSAGE\n         MVC   MTMSGID(4),=CL4'PW04'   PUT MESSAGE CODE INTO PLIST\n         C     R15,=F'36'         IS THERE MORE INFO IN R0?\n         BNE   INSERTRC           NO, GO AHEAD AND ISSUE MESSAGE\n         SLL   R0,16              SHIFT REASON CODE\n         OR    R15,R0             INSERT R0 AS HIGH ORDER BYTES\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERRNU MVC   MTMSGID(4),=CL4'PW05'   PUT MESSAGE CODE INTO PLIST\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nUPDATEOK MVC   MTMSGID(4),=CL4'PW06'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,0               NORMAL RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nINSERTRC ST    R15,PWINSRC        SAVE THE RETURN CODE\n         LA    R1,PWINSRC         GET THE RETURN CODE ADDRESS\n         STCM  R1,B'0111',MTADDR  PUT THE ADDRESS IN THE PLIST\n         MVI   MTLEN,4            LENGTH OF ENTRY IS 4 BYTES\n         OI    MTHIGHL,X'80'      INDICATE TRANSLATION IS DESIRED\nWRITEMSG CALLTSSR EP=IKJEFF02,MF=(E,MTPARML)     WRITE THE MESSAGE\n         B     FREE               GO FREE THE PDL AND EXIT\n         EJECT\n**********************************************************************\n*  RETURN CONTROL TO THE TMP.                                        *\n**********************************************************************\nFREE     IKJRLSA PWPDL             RELEASE THE PDL STORAGE\n         LR    R15,R2              PUT THE RETURN CODE INTO R15\nEXIT     LR    R1,R13              GET THE WORK AREA POINTER\n         L     R13,SAVEOLD         GET CALLER'S SAVE AREA\n         ST    R15,SAVER15         SET RETURN CODE\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE OUR WORK AREA\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n         RETURN (14,12)            RESTORE REGISTERS AND RETURN\n         EJECT\n**********************************************************************\n*  CONSTANTS AND SKELETONS.                                          *\n**********************************************************************\nMOVEPARM MVC   0(*-*,R2),0(R1)     EXECUTED MOVE INSTRUCTION\nACTNSKEL ICHEACTN FIELD=PASSWORD,FLDATA=(8,ACTNSKLN),MF=L\nACTNSKLN EQU   *-ACTNSKEL          LENGTH OF SKELETON ICHEACTN PLIST\nINTYSKEL ICHEINTY ALTER,TYPE='USR',ENTRY=INTYSKLN,MF=L,                X\n               ACTIONS=(INTYSKLN,INTYSKLN)\nINTYSKLN EQU   *-INTYSKEL          LENGTH OF SKELETON ICHEINTY PLIST\n         EJECT\n         LTORG\n         EJECT\n**********************************************************************\n*  PARSE PARAMETER CONTROL LIST.                                     *\n**********************************************************************\nSETPWPCL IKJPARM DSECT=SETPWPDL\nUSERID   IKJIDENT 'USERID',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,       X\n               PROMPT='USERID TO BE CHANGED'\nPASSWORD IKJIDENT 'PASSWORD',PTBYPS,MAXLNTH=8,PROMPT='NEW PASSWORD',   X\n               FIRST=NONATNUM,OTHER=NONATNUM\n         IKJENDP\n         EJECT\n**********************************************************************\n*  COMMAND ERROR AND INFORMATIONAL MESSAGES.                         *\n**********************************************************************\nSETPWMSG CSECT\nPWD001E  IKJTSMSG ('PWD001E RACF IS INACTIVE - RACSTAT RC = ',),PW01\nPWD002E  IKJTSMSG ('PWD002E USER NOT AUTHORIZED TO THIS FUNCTION'),PW02\nPWD003E  IKJTSMSG ('PWD003E PARSE ERROR - IKJPARS RC =',),PW03\nPWD004E  IKJTSMSG ('PWD004E RACF ERROR - ICHEINTY RC = ',),PW04\nPWD005E  IKJTSMSG ('PWD005E USERID NOT FOUND'),PW05\nPWD006I  IKJTSMSG ('PWD006I PASSWORD CHANGED'),PW06\n         IKJTSMSG\n         EJECT\n         REGS\n         EJECT\n**********************************************************************\n*  SAVE AND WORK AREA.                                               *\n**********************************************************************\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nPWPPL    DS    0F,CL(PPLSIZE)      PARSE PARAMETER LIST\nPWECB    DS    F                   PARSE EVENT CONTROL BLOCK\nPWPDL    DS    F                   PARSE ANSWER AREA ADDRESS\nPWINSRC  DS    F                   RETURN CODE FOR INSERT\nPWUSERLN DS    AL1                 LENGTH OF USERID FIELD\nPWUSERID DS    CL8                 USERID FROM COMMAND LINE\nPWPSWDLN DS    AL1                 LENGTH OF PASSWORD FIELD\nPWPSWD   DS    CL8                 PASSWORD FROM COMMAND LINE\nPWDATE   DS    XL3                 PASSWORD CHANGE DATE\nPWUPDATE DS    0F,CL(INTYSKLN)     UPDATE PARAMETER LIST\nPWUPDPWD DS    0F,CL(ACTNSKLN)     PASSWORD UPDATE ACTION ENTRY\nPWUPDDAT DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWMSGPL  IKJEFFMT MTDSECT=NO       IKJEFF02 MESSAGE PARAMETER LIST\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJPPL\nPPLSIZE  EQU   *-PPL\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IHAACEE\n         EJECT\n         IHAPSA\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         END   SETPW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETPW2": {"ttr": 8972, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x05%\\x0f\\x01\\x05%\\x0f\\x08U\\x02\\x0e\\x02\\x0e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-09-07T00:00:00", "modifydate": "2005-09-07T08:55:00", "lines": 526, "newlines": 526, "modlines": 0, "user": "FILE013"}, "text": "SETPW    TITLE 'SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE'\n         PUNCH ' SETCODE AC(1)'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE                 *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THIS TSO COMMAND PROCESSOR ALLOWS THE AUTHORIZED USER TO       *\n*     CHANGE PASSWORDS FOR OTHER USERS. AN 'AUTHORIZED USER' IS      *\n*     ONE THAT HAS EITHER THE SPECIAL AUTHORITY, OR ONE THAT IS      *\n*     AUTHORIZED TO 'RACFPW.CHANGES' IN THE FACILITY CLASS. THIS     *\n*     COMMAND CAN BE USEFUL WHEN YOU HAVE CENTRALIZED USER ADMIN-    *\n*     ISTRATION, BUT CANNOT BE IN FOUR BUILDINGS AT ONCE AND YOU     *\n*     DON'T BELIEVE IN GIVING NEW PASSWORDS OUT OVER THE PHONE.      *\n*                                                                    *\n*     NOTES FOR 'SPECIAL' USERS:                                     *\n*          IF THE USER EXECUTING 'SETPW' HAS SPECIAL, THE FOLLOWING  *\n*          OCCURS:                                                   *\n*             THE PASSWORD IS RESET.                                 *\n*             THE PASSDATE IS SET TO THE CURRENT DATE.               *\n*             THE REVOKE BIT (FLAG4) IS SET TO 0 (NOT REVOKED).      *\n*          IN OTHER WORDS, THE USER WILL NOT HAVE TO CHANGE HIS/HER  *\n*          PASSWORD WHEN LOGGING ON FOR THE FIRST TIME.              *\n*                                                                    *\n*     NOTES FOR NON-SPECIAL USERS:                                   *\n*          IF THE USER EXECUTING 'SETPW' DOES NOT HAVE SPECIAL,      *\n*          BUT IS AUTHORIZED VIA 'RACFPW.CHANGES', THE FOLLOWING     *\n*          OCCURS:                                                   *\n*             THE PASSWORD IS RESET.                                 *\n*             THE PASSDATE IS SET TO 00.000                          *\n*             THE REVOKE BIT (FLAG4) IS SET TO 0 (NOT REVOKED).      *\n*          THE USER LOGGING ON MUST THEN CHANGE THEIR PASSWORD       *\n*          WHEN THEY LOGON FOR THE FIRST TIME.                       *\n*                                                                    *\n*                                                                    *\n*     COMMAND SYNTAX:                                                *\n*        SETPW USERID PASSWORD                                       *\n*                                                                    *\n*  NOTE -                                                            *\n*                                                                    *\n*     THIS COMMAND MUST BE ENTERED IN THE TSO AUTHORIZED             *\n*     COMMAND TABLE, 'IKJEFTE2' AND LINKED 'AC=1'.                   *\n*                                                                    *\n*  CSECTS -                                                          *\n*                                                                    *\n*     SETPW    - MAINLINE PROGRAM                                    *\n*     RACFPW01 - RACROUTE ROUTINE TO CHECK 'RACFPW.CHANGES'          *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     REENTRANT, AUTHORIZED, ATTACHED FROM THE TMP                   *\n*                                                                    *\n*  ENTRY CONDITIONS -                                                *\n*                                                                    *\n*     R1  - ADDRESS OF THE COMMAND PROCESSOR PARAMETER LIST (CPPL)   *\n*     R13 - ADDRESS OF A STANDARD SAVE AREA                          *\n*     R14 - RETURN ADDRESS                                           *\n*     R15 - ENTRY ADDRESS (SETPW)                                    *\n*                                                                    *\n*  EXIT CONDITIONS -                                                 *\n*                                                                    *\n*     R15 - CONTAINS A RETURN CODE:                                  *\n*        R15 = 0 - PASSWORD CHANGED FOR USERID                       *\n*        R15 = 8 - PARSE ERROR                                       *\n*        R15 = 12 - ERROR IN RACF PROCESSING                         *\n*        R15 = 16 - RACF NOT ACTIVE                                  *\n*        R15 = 20 - USERID NOT AUTHORIZED                            *\n*                                                                    *\n*  REGISTER USAGE -                                                  *\n*                                                                    *\n*     R13 - ADDRESS OF SAVE/WORK AREA                                *\n*     R12 - BASE ADDRESS (SETPW)                                     *\n*     R11 - ADDRESS OF COMMAND PROCESSOR PARAMETER LIST (CPPL)       *\n*     R10 - ADDRESS OF PARSE PARAMETER LIST (PPL)                    *\n*     R9  - ADDRESS OF ADDRESS SPACE CONTROL BLOCK (ASCB)            *\n*     R8  - ADDRESS OF ADDRESS SPACE EXTENSION BLOCK (ASXB)          *\n*     R7  - ADDRESS OF ACCESSOR ENVIRONMENT ELEMENT (ACEE)           *\n*     R6  - ADDRESS OF PARAMETER DESCRIPTOR LIST (PDL)               *\n*     R4  - WORK                                                     *\n*     R3  - WORK                                                     *\n*     R2  - WORK                                                     *\n*     R1  - WORK                                                     *\n*     R0  - WORK                                                     *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     1.  CHECK THE USER'S AUTHORIZATION FOR THE COMMAND AND THE     *\n*         STATUS OF RACF (ACTIVE OR INACTIVE).                       *\n*     2.  CALL IKJPARS TO PARSE THE COMMAND LINE FOR THE PARAMETERS. *\n*     3.  SET THE NEW PASSWORD AND PASSWORD CHANGE DATE IN THE       *\n*         TEMPLATE AND REWRITE THE USER TEMPLATE.                    *\n*     4.  EXIT.                                                      *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*     WRITTEN 10/85 BY BILL SOMERVILLE,                              *\n*                                                                    *\n*           MCI TELECOMMUNICATIONS CORP.                             *\n*           1151 SEVEN LOCKS ROAD                                    *\n*           ROCKVILLE, MARYLAND 20854                                *\n*           (301) 738-2768                                           *\n*                                                                    *\n*     ADDED RACROUTE, PASSDATE, REVOKE FLAG CODE 02/02/87            *\n*           STUART SABEL, BLUE CROSS OF WASHINGTON AND ALASKA        *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n*****************  START OF NON-IBM MACROS  **************************\n**********************************************************************\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n         MACRO\n         REGS\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n**********************************************************************\n*****************  END OF NON-IBM MACROS  ****************************\n**********************************************************************\n         EJECT\n         USING SAVEAREA,R13\n         USING SETPW,R12\n         USING CPPL,R11\n         USING PPL,R10\n         USING ASCB,R9\n         USING ASXB,R8\n         USING ACEE,R7\n         USING SETPWPDL,R6\n         USING PSA,R0\nSETPW    CSECT\n         SAVE  (14,12),,'SETPW   &SYSDATE.&SYSTIME'    SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LR    R11,R1              SAVE CPPL ADDRESS\n         GETMAIN R,LV=WORKSIZE     OBTAIN A WORK AREA\n         ST    R1,SAVENEW          FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN\n         LR    R13,R1              SAVE THE SAVE AREA POINTER\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n**********************************************************************\n*  INITIALIZE THE PARSE PARAMETER LIST.                              *\n**********************************************************************\n         LA    R10,PWPPL           GET THE PPL ADDRESS\n         MVC   PPLUPT(4),CPPLUPT   MOVE THE UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT   MOVE THE ECT ADDRESS\n         LA    R1,PWECB            GET THE ECB ADDRESS\n         ST    R1,PPLECB           SAVE THE ECB ADDRESS\n         L     R1,=A(SETPWPCL)     GET THE PCL ADDRESS\n         ST    R1,PPLPCL           SAVE THE PCL ADDRESS\n         LA    R1,PWPDL            GET THE PDL ADDRESS AREA ADDRESS\n         ST    R1,PPLANS           SAVE THE PDL ADDRESS AREA ADDRESS\n         MVC   PPLCBUF(4),CPPLCBUF MOVE THE COMMAND BUFFER ADDRESS\n         XC    PPLUWA(4),PPLUWA    CLEAR THE USER WORK AREA ADDRESS\n         MVC   PWUSERID(8),=CL8' ' INITIALIZE THE USERID\n         MVC   PWPSWD(8),=CL8' '   INITIALIZE THE PASSWORD\n         XC    PWECB(4),PWECB      CLEAR THE ECB\n**********************************************************************\n*  INITIALIZE THE MESSAGE PARAMETER LIST.                            *\n**********************************************************************\n         LA    R1,MTCSECTP         GET THE MT DESCRIPTOR ADDRESS\n         ST    R1,MTPLPTR          SAVE IN THE MT HEADER\n         ST    R11,MTCPPLP         SAVE THE CPPL ADDRESS\n         XC    MTECBP(4),MTECBP    CLEAR THE ECB POINTER\n         L     R1,=A(SETPWMSG)     GET THE MESSAGE CSECT ADDRESS\n         ST    R1,MTCSECTP         SAVE THE MESSAGE CSECT ADDRESS\n         MVI   MTSW1,MTHEXSW+MTPUTLSW   INSERTS HEX + PUTLINE\n         MVI   MTSW2,X'00'         CLEAR SWITCHES\n         XC    MTINSRTS(16),MTINSRTS    CLEAR INSERTS\n         EJECT\n**********************************************************************\n*  PARSE THE COMMAND LINE FOR THE USERID AND PASSWORD.               *\n**********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,(R10))    PARSE THE COMMAND LINE\n         LTR   R15,R15             DID THE PARSE COMPLETE?\n         BNZ   PARSEERR            NO, GO ANALYZE THE ERROR\n         L     R6,PPLANS           GET THE PDL ADDRESS ADDRESS\n         L     R6,0(,R6)           GET THE PDL ADDRESS\n         LH    R3,USERID+4         GET THE USERID LENGTH\n         STC   R3,PWUSERLN         SAVE THE USERID LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,USERID           GET THE USERID ADDRESS\n         LA    R2,PWUSERID         GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE USERID TO THE WORK AREA\n         LH    R3,PASSWORD+4       GET THE PASSWORD LENGTH\n         STC   R3,PWPSWDLN         SAVE THE PASSWORD LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,PASSWORD         GET THE PASSWORD ADDRESS\n         LA    R2,PWPSWD           GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE PASSWORD TO THE WORK AREA\n         TIME  DEC                 OBTAIN THE CURRENT DATE\n         STCM  R1,B'0111',PWDATE   SAVE THE DATE\n         EJECT\n**********************************************************************\n*  CHECK ON THE STATUS OF RACF AND THE USER'S AUTHORITY TO ISSUE     *\n*  THIS COMMAND.                                                     *\n**********************************************************************\n         RACSTAT ,                 CHECK ON RACF STATUS\n         LTR   R15,R15             IS RACF ALIVE AND WELL?\n         BNZ   RACINACT            NO, GO ISSUE MESSAGE AND END\n         L     R9,PSAAOLD          GET OUR ASCB ADDRESS\n         L     R8,ASCBASXB         GET OUR ASXB ADDRESS\n         ICM   R7,B'1111',ASXBSENV IS THERE AN ACEE?\n         BZ    NOTAUTHR            NO, USER NOT AUTHORIZED\n         TM    ACEEFLG1,ACEESPEC   IS THE USER SPECIAL?\n         BO    CHGPW               YES, GO ON WITH PASSWORD CHANGE\n         CALL  RACFPW01            AUTHORIZED TO 'RACFPW.CHANGES'?\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   NOTAUTHR            IF NOT ZERO-YOU CAN'T DO IT\n         MVC   PWDATE,ZERODATE     BLANK OUT THE PASSWORD DATE FIELD\n         EJECT\n**********************************************************************\n*  CHANGE THE PASSWORD AND THE PASSWORD CHANGE DATE.                 *\n**********************************************************************\nCHGPW    DS    0H\n         XR    R2,R2               CLEAR R2\n         IC    R2,PWPSWDLN         GET THE PASSWORD LENGTH\n         LA    R3,PWPSWD           GET THE PASSWORD ADDRESS\n         LA    R4,PWDATE           GET THE PASSWORD CHANGE DATE ADDRESS\n         LA    R5,PWREV            GET THE REVOKED FIELD ADDRESS\n         MVC   PWUPDPWD(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDDAT(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDREV(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         ICHEACTN FIELD='PASSWORD',FLDATA=((R2),(R3)),ENCRYPT=YES,     X\n               MF=(E,PWUPDPWD)\n         ICHEACTN FIELD='PASSDATE',FLDATA=(3,(R4)),MF=(E,PWUPDDAT)\n         ICHEACTN FIELD='FLAG4',FLDATA=(1,(R5)),MF=(E,PWUPDREV)\n         MVC   PWUPDATE(INTYSKLN),INTYSKEL   MOVE IN SKELETON UPDATE\n         LA    R1,PWUPDATE+X'1C'   GET THE FLDEF ADDRESS\n         ST    R1,PWUPDATE+X'08'   SAVE FLDEF ADDRESS IN THE PLIST\n         ICHEINTY ALTER,TYPE='USR',ENTRY=PWUSERLN,MF=(E,PWUPDATE),     X\n               ACTIONS=(PWUPDPWD,PWUPDDAT,PWUPDREV)\n         LTR   R15,R15             WAS THE PASSWORD UPDATED PROPERLY?\n         BNZ   RACERR              NO, GO PRINT A MESSAGE AND EXIT\n         B     UPDATEOK            YES, INDICATE UPDATE WAS SUCCESSFUL\n         EJECT\n**********************************************************************\n*  ISSUE MESSAGES INDICATING THE STATUS OF THE CHANGE REQUEST.       *\n**********************************************************************\nRACINACT MVC   MTMSGID(4),=CL4'PW01'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,16              SYNTAX ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nNOTAUTHR MVC   MTMSGID(4),=CL4'PW02'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,20              SYNTAX ERROR RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nPARSEERR MVC   MTMSGID(4),=CL4'PW03'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,8               PARSE ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERR   LA    R2,12              RACF ERROR RETURN CODE\n         C     R15,=F'12'         WAS THE USERID FOUND?\n         BE    RACERRNU           NO, PRINT SPECIAL MESSAGE\n         MVC   MTMSGID(4),=CL4'PW04'   PUT MESSAGE CODE INTO PLIST\n         C     R15,=F'36'         IS THERE MORE INFO IN R0?\n         BNE   INSERTRC           NO, GO AHEAD AND ISSUE MESSAGE\n         SLL   R0,16              SHIFT REASON CODE\n         OR    R15,R0             INSERT R0 AS HIGH ORDER BYTES\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERRNU MVC   MTMSGID(4),=CL4'PW05'   PUT MESSAGE CODE INTO PLIST\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nUPDATEOK MVC   MTMSGID(4),=CL4'PW06'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,0               NORMAL RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nINSERTRC ST    R15,PWINSRC        SAVE THE RETURN CODE\n         LA    R1,PWINSRC         GET THE RETURN CODE ADDRESS\n         STCM  R1,B'0111',MTADDR  PUT THE ADDRESS IN THE PLIST\n         MVI   MTLEN,4            LENGTH OF ENTRY IS 4 BYTES\n         OI    MTHIGHL,X'80'      INDICATE TRANSLATION IS DESIRED\nWRITEMSG CALLTSSR EP=IKJEFF02,MF=(E,MTPARML)     WRITE THE MESSAGE\n         B     FREE               GO FREE THE PDL AND EXIT\n         EJECT\n**********************************************************************\n*  RETURN CONTROL TO THE TMP.                                        *\n**********************************************************************\nFREE     IKJRLSA PWPDL             RELEASE THE PDL STORAGE\n         LR    R15,R2              PUT THE RETURN CODE INTO R15\nEXIT     LR    R1,R13              GET THE WORK AREA POINTER\n         L     R13,SAVEOLD         GET CALLER'S SAVE AREA\n         ST    R15,SAVER15         SET RETURN CODE\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE OUR WORK AREA\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n         RETURN (14,12)            RESTORE REGISTERS AND RETURN\n         EJECT\n**********************************************************************\n*  CONSTANTS AND SKELETONS.                                          *\n**********************************************************************\nZERODATE DC    X'00000F'           ZEROS FOR PASSDATE\nPWREV    DC    B'0'                USER NOT REVOKED FLAG\nMOVEPARM MVC   0(*-*,R2),0(R1)     EXECUTED MOVE INSTRUCTION\nACTNSKEL ICHEACTN FIELD=PASSWORD,FLDATA=(8,ACTNSKLN),MF=L\nACTNSKLN EQU   *-ACTNSKEL          LENGTH OF SKELETON ICHEACTN PLIST\nINTYSKEL ICHEINTY ALTER,TYPE='USR',ENTRY=INTYSKLN,MF=L,                X\n               ACTIONS=(INTYSKLN,INTYSKLN,INTYSKLN)\nINTYSKLN EQU   *-INTYSKEL          LENGTH OF SKELETON ICHEINTY PLIST\n         EJECT\n         LTORG\n         EJECT\n**********************************************************************\n*  PARSE PARAMETER CONTROL LIST.                                     *\n**********************************************************************\nSETPWPCL IKJPARM DSECT=SETPWPDL\nUSERID   IKJIDENT 'USERID',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,       X\n               PROMPT='USERID TO BE CHANGED'\nPASSWORD IKJIDENT 'PASSWORD',PTBYPS,MAXLNTH=8,PROMPT='NEW PASSWORD',   X\n               FIRST=NONATNUM,OTHER=NONATNUM\n         IKJENDP\n         EJECT\n**********************************************************************\n*  COMMAND ERROR AND INFORMATIONAL MESSAGES.                         *\n**********************************************************************\nSETPWMSG CSECT\nPWD001E  IKJTSMSG ('PWD001E RACF IS INACTIVE - RACSTAT RC = ',),PW01\nPWD002E  IKJTSMSG ('PWD002E USER NOT AUTHORIZED TO THIS FUNCTION'),PW02\nPWD003E  IKJTSMSG ('PWD003E PARSE ERROR - IKJPARS RC =',),PW03\nPWD004E  IKJTSMSG ('PWD004E RACF ERROR - ICHEINTY RC = ',),PW04\nPWD005E  IKJTSMSG ('PWD005E USERID NOT FOUND'),PW05\nPWD006I  IKJTSMSG ('PWD006I PASSWORD CHANGED'),PW06\n         IKJTSMSG\n         EJECT\n         REGS\n         EJECT\n**********************************************************************\n*  SAVE AND WORK AREA.                                               *\n**********************************************************************\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nPWPPL    DS    0F,CL(PPLSIZE)      PARSE PARAMETER LIST\nPWECB    DS    F                   PARSE EVENT CONTROL BLOCK\nPWPDL    DS    F                   PARSE ANSWER AREA ADDRESS\nPWINSRC  DS    F                   RETURN CODE FOR INSERT\nPWUSERLN DS    AL1                 LENGTH OF USERID FIELD\nPWUSERID DS    CL8                 USERID FROM COMMAND LINE\nPWPSWDLN DS    AL1                 LENGTH OF PASSWORD FIELD\nPWPSWD   DS    CL8                 PASSWORD FROM COMMAND LINE\nPWDATE   DS    XL3                 PASSWORD CHANGE DATE\nPWUPDATE DS    0F,CL(INTYSKLN)     UPDATE PARAMETER LIST\nPWUPDPWD DS    0F,CL(ACTNSKLN)     PASSWORD UPDATE ACTION ENTRY\nPWUPDDAT DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWUPDREV DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWMSGPL  IKJEFFMT MTDSECT=NO       IKJEFF02 MESSAGE PARAMETER LIST\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJPPL\nPPLSIZE  EQU   *-PPL\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IHAACEE\n         EJECT\n         IHAPSA\n         EJECT\n         CVT   DSECT=YES,LIST=NO\n         EJECT\n         TITLE 'RACFPW01 - CHECK TO SEE IF USER MAY CHANGE PASSWORDS'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      MODULE - RACFPW01                                          ***\n***                                                                 ***\n***      ROUTINE CALLED BY 'SETPW' COMMAND PROCESSOR                ***\n***                                                                 ***\n***      THIS MODULE WILL CONTROL WHO MAY EXECUTE THE 'SETPW' TSO   ***\n***      COMMAND TO CHANGE THE PASSWORDS OF OTHER USERS.            ***\n***                                                                 ***\n***      REQUIREMENTS:                                              ***\n***      1. CLASS 'FACILITY' MUST BE ACTIVATED. THE PROFILE NAME    ***\n***         USED MUST BE DEFINED AS 'RACFPW.CHANGES'                ***\n***                                                                 ***\n***      2. IF A NON-SPECIAL USER WISHES TO USE THE 'SETPW'         ***\n***         COMMAND, THE USER MUST BE AUTHORIZED TO THIS PROFILE    ***\n***         WITH AT LEAST 'READ' AUTHORITY.                         ***\n***                                                                 ***\n***         EXAMPLE:                                                ***\n***         RDEF RACFPW.CHANGES CL(FACILITY) UACC(NONE)             ***\n***         PERMIT RACFPW.CHANGES CL(FACILITY) ID(SYS1) AC(READ)    ***\n***                                                                 ***\n***      RETURN CODES:                                              ***\n***         0 - USER AUTHORIZED TO 'RACFPW.CHANGES'                 ***\n***                                                                 ***\n***         4 - FAIL REQUEST FOR PASSWORD CHANGE                    ***\n***             USED IF RACHECK RETURNS WITH NON-ZERO RETURN CODE   ***\n***                                                                 ***\n***      LOGGING SHOULD BE PERFORMED IN ALL CASES.                  ***\n***      THE PROFILE SPECIFIES AUDIT(ALL).                          ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nRACFPW01 CSECT ,\n         SAVE  (14,12),,RACFPW01-&SYSDATE-&SYSTIME\n         LR    R12,R15             PROGRAM ADDRESSABILITY\n         USING RACFPW01,R12        ****\n***********************************************************************\n* GET SPACE FOR RACROUTE PARM LIST                                    *\n***********************************************************************\n         L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         GETMAIN RU,               GETMAIN                             *\n               LV=(0),SP=229               DYNAMIC AREA\n         LR    R11,R1              DYNAMIC AREA ADDRESSABILITY\n         USING DATD,R11            ****\n         ST    R13,SAVEIT+4        SAVE CALLER'S SAVEAREA ADR\n         ST    R11,8(,R13)         SAVE OUR SAVEAREA ADR\n         LR    R13,R11             OUR SAVEAREA ADR TO R13\n***********************************************************************\n* ISSUE RACROUTE FOR AUTHORITY TO CHANGE PASSWORDS                    *\n***********************************************************************\nRACF     DS    0H\n         MVC   AUTHCHK(LRACROUT),RACROUTL INIT RACROUTE MACRO\n         MVC   PROFILE,RACPROF     INIT RACROUTE PROFILE\n         RACROUTE REQUEST=AUTH,    RACHECK REQUEST.                    *\n               CLASS=RACLASS,      CHECK FOR                           *\n               ATTR=READ,          READ                                *\n               ENTITY=PROFILE,     AUTHORITY                           *\n               LOG=ASIS,           TO CHANGE A PASSWORD                *\n               WORKA=SAFWORK,      SAF WORK AREA.                      *\n               MF=(E,AUTHCHK)\n***********************************************************************\n* PROCESS RETURN CODE                                                 *\n***********************************************************************\n         LA    R8,SAFWORK          SAF WORK AREA.\n         USING SAFW,R8\n         C     R15,=F'0'           AUTHORIZED?\n         BE    RETURN0             YES - RETURN WITH RC=0\n*\nSETFAIL  DS    0H\n         LA    R3,4                SET RETURN CODE TO FAIL REQUEST\n         B     FINAL\n*\nRETURN0  SR    R3,R3               SET RETURN CODE TO ALLOW REQUEST\n***********************************************************************\n* CLEAN UP AND QUIT                                                   *\n***********************************************************************\nFINAL    DS    0H\n         L     R13,SAVEIT+4        RESTORE R13\n         L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         LR    R1,R11              DYNAMIC DATA ADDRESS TO R1\n         FREEMAIN RU,SP=229,       FREEMAIN                            *\n               LV=(0),             DYNAMIC                             *\n               A=(1)               AREA\n         LR    R15,R3              LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)  RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n* DATA AREAS                                                          *\n***********************************************************************\n         DS    0D                   DOUBLE WORD ALIGN\nDYNSIZE  DC    AL4(SIZEDATD)        DYN AREA SIZE\nRACLASS  DC    AL1(L'RACLASSN)      CLASS NAME FOR RACROUTE\nRACLASSN DC    C'FACILITY'          CLASS NAME FOR RACROUTE\nRACPROF  DC    CL39'RACFPW.CHANGES' PROFILE FOR RACROUTE\nRACROUTL RACROUTE REQUEST=AUTH,WORKA=*-*,MF=L\nLRACROUT EQU   *-RACROUTL           LENGTH OF RACROUTE MACRO.\n         DS    0D\n         LTORG\n***********************************************************************\n* DSECT FOR THIS PROGRAM'S DYNAMIC AREA                               *\n***********************************************************************\nDATD     DSECT\nSAVEIT   DS    18F                 REGISTER SAVE AREA\nSAFWORK  DS    CL512               SAF WORK AREA.\n         DS    0D\nDOUBLE   DC    D'0'                WORK DOUBLE WORD\nPROFILE  DS    CL39                PROFILE FOR RACROUTE\n         ORG   PROFILE\nRACPPREF DC    C'RACFPW.CHANGES'   PROFILE PREFIX\n         ORG\n         DS    0D\nAUTHCHK  RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*\nSIZEDATD EQU   *-DATD              LENGTH OF DSECT\n*\n         ICHSAFW  ,\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETPW2A": {"ttr": 9225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x05%\\x1f\\x01\\x05%\\x1f\\x12P\\x02\\x0f\\x02\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2005-09-08T00:00:00", "modifydate": "2005-09-08T12:50:47", "lines": 527, "newlines": 527, "modlines": 0, "user": "FILE013"}, "text": "SETPW    TITLE 'SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE'\n         PUNCH ' SETCODE AC(1)'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     SETPW -- RACF CENTRALIZED PASSWORD MAINTENANCE                 *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THIS TSO COMMAND PROCESSOR ALLOWS THE AUTHORIZED USER TO       *\n*     CHANGE PASSWORDS FOR OTHER USERS. AN 'AUTHORIZED USER' IS      *\n*     ONE THAT HAS EITHER THE SPECIAL AUTHORITY, OR ONE THAT IS      *\n*     AUTHORIZED TO 'RACFPW.CHANGES' IN THE FACILITY CLASS. THIS     *\n*     COMMAND CAN BE USEFUL WHEN YOU HAVE CENTRALIZED USER ADMIN-    *\n*     ISTRATION, BUT CANNOT BE IN FOUR BUILDINGS AT ONCE AND YOU     *\n*     DON'T BELIEVE IN GIVING NEW PASSWORDS OUT OVER THE PHONE.      *\n*                                                                    *\n*     THE FOLLOWING OCCURS:                                          *\n*        THE PASSWORD IS RESET.                                      *\n*        THE PASSDATE IS SET TO 00.000                               *\n*        THE REVOKE BIT (FLAG4) IS SET TO 0 (NOT REVOKED).           *\n*        THE LAST-USED DATE & TIME ARE SET TO CURRENT DATE & TIME    *\n*     THE USER LOGGING ON MUST THEN CHANGE HIS PASSWORD              *\n*     WHEN HE LOGS ON FOR THE FIRST TIME.                            *\n*                                                                    *\n*                                                                    *\n*     COMMAND SYNTAX:                                                *\n*        SETPW USERID PASSWORD                                       *\n*                                                                    *\n*  NOTE -                                                            *\n*                                                                    *\n*     THIS COMMAND MUST BE ENTERED IN THE TSO AUTHORIZED             *\n*     COMMAND TABLE, 'IKJEFTE2' AND LINKED 'AC=1'.                   *\n*                                                                    *\n*  CSECTS -                                                          *\n*                                                                    *\n*     SETPW    - MAINLINE PROGRAM                                    *\n*     RACFPW01 - RACROUTE ROUTINE TO CHECK 'RACFPW.CHANGES'          *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     REENTRANT, AUTHORIZED, ATTACHED FROM THE TMP                   *\n*                                                                    *\n*  ENTRY CONDITIONS -                                                *\n*                                                                    *\n*     R1  - ADDRESS OF THE COMMAND PROCESSOR PARAMETER LIST (CPPL)   *\n*     R13 - ADDRESS OF A STANDARD SAVE AREA                          *\n*     R14 - RETURN ADDRESS                                           *\n*     R15 - ENTRY ADDRESS (SETPW)                                    *\n*                                                                    *\n*  EXIT CONDITIONS -                                                 *\n*                                                                    *\n*     R15 - CONTAINS A RETURN CODE:                                  *\n*        R15 = 0 - PASSWORD CHANGED FOR USERID                       *\n*        R15 = 8 - PARSE ERROR                                       *\n*        R15 = 12 - ERROR IN RACF PROCESSING                         *\n*        R15 = 16 - RACF NOT ACTIVE                                  *\n*        R15 = 20 - USERID NOT AUTHORIZED                            *\n*                                                                    *\n*  REGISTER USAGE -                                                  *\n*                                                                    *\n*     R13 - ADDRESS OF SAVE/WORK AREA                                *\n*     R12 - BASE ADDRESS (SETPW)                                     *\n*     R11 - ADDRESS OF COMMAND PROCESSOR PARAMETER LIST (CPPL)       *\n*     R10 - ADDRESS OF PARSE PARAMETER LIST (PPL)                    *\n*     R9  - ADDRESS OF ADDRESS SPACE CONTROL BLOCK (ASCB)            *\n*     R8  - ADDRESS OF ADDRESS SPACE EXTENSION BLOCK (ASXB)          *\n*     R7  - ADDRESS OF ACCESSOR ENVIRONMENT ELEMENT (ACEE)           *\n*     R6  - ADDRESS OF PARAMETER DESCRIPTOR LIST (PDL)               *\n*     R4  - WORK                                                     *\n*     R3  - WORK                                                     *\n*     R2  - WORK                                                     *\n*     R1  - WORK                                                     *\n*     R0  - WORK                                                     *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     1.  CHECK THE USER'S AUTHORIZATION FOR THE COMMAND AND THE     *\n*         STATUS OF RACF (ACTIVE OR INACTIVE).                       *\n*     2.  CALL IKJPARS TO PARSE THE COMMAND LINE FOR THE PARAMETERS. *\n*     3.  SET THE NEW PASSWORD AND PASSWORD CHANGE DATE IN THE       *\n*         TEMPLATE AND REWRITE THE USER TEMPLATE.                    *\n*     4.  EXIT.                                                      *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*     WRITTEN 10/85 BY BILL SOMERVILLE,                              *\n*                                                                    *\n*           MCI TELECOMMUNICATIONS CORP.                             *\n*           1151 SEVEN LOCKS ROAD                                    *\n*           ROCKVILLE, MARYLAND 20854                                *\n*           (301) 738-2768                                           *\n*                                                                    *\n*     ADDED RACROUTE, PASSDATE, REVOKE FLAG CODE 02/02/87            *\n*           STUART SABEL, BLUE CROSS OF WASHINGTON AND ALASKA        *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n*****************  START OF NON-IBM MACROS  **************************\n**********************************************************************\n         MACRO\n         SAVEAREA &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODSECT\n         AIF   ('&DSECT' NE 'YES').PARMERR\nSAVEAREA DSECT                     FORMAT OF STANDARD SAVE AREA\n         AGO   .COMMON\n.NODSECT ANOP\nSAVEAREA DS    0F                  FORMAT OF STANDARD SAVE AREA\n.COMMON  ANOP\nSAVEPLI  DS    F                   USED BY PL/I\nSAVEOLD  DS    F                   OLD (BACK-CHAIN) SAVE AREA\nSAVENEW  DS    F                   NEW (FORWARD-CHAIN) SAVE AREA\nSAVER14  DS    F                   CALLER'S R14\nSAVER15  DS    F                   CALLER'S R15\nSAVER0   DS    F                   CALLER'S R0\nSAVER1   DS    F                   CALLER'S R1\nSAVER2   DS    F                   CALLER'S R2\nSAVER3   DS    F                   CALLER'S R3\nSAVER4   DS    F                   CALLER'S R4\nSAVER5   DS    F                   CALLER'S R5\nSAVER6   DS    F                   CALLER'S R6\nSAVER7   DS    F                   CALLER'S R7\nSAVER8   DS    F                   CALLER'S R8\nSAVER9   DS    F                   CALLER'S R9\nSAVER10  DS    F                   CALLER'S R10\nSAVER11  DS    F                   CALLER'S R11\nSAVER12  DS    F                   CALLER'S R12\nSAVESIZE EQU   *-SAVEAREA          LENGTH OF SAVEAREA IN BYTES\n         MEXIT\n.PARMERR ANOP\n         MNOTE 8,'*** ERROR *** INVALID PARM: DSECT=&DSECT'\n         MEND\n         MACRO\n         REGS\n         LCLA  &REG\n&REG     SETA  0\n*  GENERAL REGISTER EQUATES\n.RLOOP   ANOP\nR&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).RLOOP\n&REG     SETA  0\n*  CONTROL REGISTER EQUATES\n.CLOOP   ANOP\nC&REG    EQU   &REG\n&REG     SETA  &REG+1\n         AIF   (&REG LE 15).CLOOP\n&REG     SETA  0\n*  FLOATING-POINT REGISTER EQUATES\n.FLOOP   ANOP\nF&REG    EQU   &REG\n&REG     SETA  &REG+2\n         AIF   (&REG LE 6).FLOOP\n         MEND\n**********************************************************************\n*****************  END OF NON-IBM MACROS  ****************************\n**********************************************************************\n         EJECT\n         USING SAVEAREA,R13\n         USING SETPW,R12\n         USING CPPL,R11\n         USING PPL,R10\n         USING ASCB,R9\n         USING ASXB,R8\n         USING ACEE,R7\n         USING SETPWPDL,R6\n         USING PSA,R0\nSETPW    CSECT\n         SAVE  (14,12),,'SETPW   &SYSDATE.&SYSTIME'    SAVE REGISTERS\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LR    R11,R1              SAVE CPPL ADDRESS\n         GETMAIN R,LV=WORKSIZE     OBTAIN A WORK AREA\n         ST    R1,SAVENEW          FORWARD CHAIN\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN\n         LR    R13,R1              SAVE THE SAVE AREA POINTER\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n**********************************************************************\n*  INITIALIZE THE PARSE PARAMETER LIST.                              *\n**********************************************************************\n         LA    R10,PWPPL           GET THE PPL ADDRESS\n         MVC   PPLUPT(4),CPPLUPT   MOVE THE UPT ADDRESS\n         MVC   PPLECT(4),CPPLECT   MOVE THE ECT ADDRESS\n         LA    R1,PWECB            GET THE ECB ADDRESS\n         ST    R1,PPLECB           SAVE THE ECB ADDRESS\n         L     R1,=A(SETPWPCL)     GET THE PCL ADDRESS\n         ST    R1,PPLPCL           SAVE THE PCL ADDRESS\n         LA    R1,PWPDL            GET THE PDL ADDRESS AREA ADDRESS\n         ST    R1,PPLANS           SAVE THE PDL ADDRESS AREA ADDRESS\n         MVC   PPLCBUF(4),CPPLCBUF MOVE THE COMMAND BUFFER ADDRESS\n         XC    PPLUWA(4),PPLUWA    CLEAR THE USER WORK AREA ADDRESS\n         MVC   PWUSERID(8),=CL8' ' INITIALIZE THE USERID\n         MVC   PWPSWD(8),=CL8' '   INITIALIZE THE PASSWORD\n         XC    PWECB(4),PWECB      CLEAR THE ECB\n**********************************************************************\n*  INITIALIZE THE MESSAGE PARAMETER LIST.                            *\n**********************************************************************\n         LA    R1,MTCSECTP         GET THE MT DESCRIPTOR ADDRESS\n         ST    R1,MTPLPTR          SAVE IN THE MT HEADER\n         ST    R11,MTCPPLP         SAVE THE CPPL ADDRESS\n         XC    MTECBP(4),MTECBP    CLEAR THE ECB POINTER\n         L     R1,=A(SETPWMSG)     GET THE MESSAGE CSECT ADDRESS\n         ST    R1,MTCSECTP         SAVE THE MESSAGE CSECT ADDRESS\n         MVI   MTSW1,MTHEXSW+MTPUTLSW   INSERTS HEX + PUTLINE\n         MVI   MTSW2,X'00'         CLEAR SWITCHES\n         XC    MTINSRTS(16),MTINSRTS    CLEAR INSERTS\n         EJECT\n**********************************************************************\n*  PARSE THE COMMAND LINE FOR THE USERID AND PASSWORD.               *\n**********************************************************************\n         CALLTSSR EP=IKJPARS,MF=(E,(R10))    PARSE THE COMMAND LINE\n         LTR   R15,R15             DID THE PARSE COMPLETE?\n         BNZ   PARSEERR            NO, GO ANALYZE THE ERROR\n         L     R6,PPLANS           GET THE PDL ADDRESS ADDRESS\n         L     R6,0(,R6)           GET THE PDL ADDRESS\n         LH    R3,USERID+4         GET THE USERID LENGTH\n         STC   R3,PWUSERLN         SAVE THE USERID LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,USERID           GET THE USERID ADDRESS\n         LA    R2,PWUSERID         GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE USERID TO THE WORK AREA\n         LH    R3,PASSWORD+4       GET THE PASSWORD LENGTH\n         STC   R3,PWPSWDLN         SAVE THE PASSWORD LENGTH\n         BCTR  R3,R0               SUBTRACT ONE FOR MOVE\n         L     R1,PASSWORD         GET THE PASSWORD ADDRESS\n         LA    R2,PWPSWD           GET THE WORK AREA ADDRESS\n         EX    R3,MOVEPARM         MOVE THE PASSWORD TO THE WORK AREA\n         TIME  DEC                 OBTAIN THE CURRENT DATE\n         STM   R0,R1,CTD           SAVE CURRENT DATE & TIME\n         EJECT\n**********************************************************************\n*  CHECK ON THE STATUS OF RACF AND THE USER'S AUTHORITY TO ISSUE     *\n*  THIS COMMAND.                                                     *\n**********************************************************************\n         RACSTAT ,                 CHECK ON RACF STATUS\n         LTR   R15,R15             IS RACF ALIVE AND WELL?\n         BNZ   RACINACT            NO, GO ISSUE MESSAGE AND END\n         L     R9,PSAAOLD          GET OUR ASCB ADDRESS\n         L     R8,ASCBASXB         GET OUR ASXB ADDRESS\n         ICM   R7,B'1111',ASXBSENV IS THERE AN ACEE?\n         BZ    NOTAUTHR            NO, USER NOT AUTHORIZED\n         TM    ACEEFLG1,ACEESPEC   IS THE USER SPECIAL?\n         BO    CHGPW               YES, GO ON WITH PASSWORD CHANGE\n         CALL  RACFPW01,MF=(E,PWUSERID)  AUTHORIZED TO USERID?\n         LTR   R15,R15             CHECK RETURN CODE\n         BNZ   NOTAUTHR            IF NOT ZERO-YOU CAN'T DO IT\n         EJECT\n**********************************************************************\n*  CHANGE THE PASSWORD AND THE PASSWORD CHANGE DATE.                 *\n**********************************************************************\nCHGPW    DS    0H\n         XR    R2,R2               CLEAR R2\n         IC    R2,PWPSWDLN         GET THE PASSWORD LENGTH\n         LA    R3,PWPSWD           GET THE PASSWORD ADDRESS\n         LA    R4,ZERODATE         GET THE PASSWORD CHANGE DATE ADDRESS\n         LA    R5,PWREV            GET THE REVOKED FIELD ADDRESS\n         MVC   PWUPDPWD(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDDAT(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDREV(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDLJD(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         MVC   PWUPDLJT(ACTNSKLN),ACTNSKEL   MOVE IN SKELETON ACTION\n         ICHEACTN FIELD='PASSWORD',FLDATA=((R2),(R3)),ENCRYPT=YES,     X\n               MF=(E,PWUPDPWD)\n         ICHEACTN FIELD='PASSDATE',FLDATA=(3,(R4)),MF=(E,PWUPDDAT)\n         ICHEACTN FIELD='FLAG4',FLDATA=(1,(R5)),MF=(E,PWUPDREV)\n         ICHEACTN FIELD='LJTIME',FLDATA=(,CTDT),MF=(E,PWUPDLJD)\n         ICHEACTN FIELD='LJDATE',FLDATA=(,CTDD3),MF=(E,PWUPDLJT)\n         MVC   PWUPDATE(INTYSKLN),INTYSKEL   MOVE IN SKELETON UPDATE\n         ICHEINTY ALTER,TYPE='USR',ENTRY=PWUSERLN,MF=(E,PWUPDATE),     X\n               ACTIONS=(PWUPDPWD,PWUPDDAT,PWUPDREV,PWUPDLJD,PWUPDLJT), X\n               OPTIONS=FLDEF\n         LTR   R15,R15             WAS THE PASSWORD UPDATED PROPERLY?\n         BNZ   RACERR              NO, GO PRINT A MESSAGE AND EXIT\n         B     UPDATEOK            YES, INDICATE UPDATE WAS SUCCESSFUL\n         EJECT\n**********************************************************************\n*  ISSUE MESSAGES INDICATING THE STATUS OF THE CHANGE REQUEST.       *\n**********************************************************************\nRACINACT MVC   MTMSGID(4),=CL4'PW01'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,16              SYNTAX ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nNOTAUTHR MVC   MTMSGID(4),=CL4'PW02'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,20              SYNTAX ERROR RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nPARSEERR MVC   MTMSGID(4),=CL4'PW03'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,8               PARSE ERROR RETURN CODE\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERR   LA    R2,12              RACF ERROR RETURN CODE\n         C     R15,=F'12'         WAS THE USERID FOUND?\n         BE    RACERRNU           NO, PRINT SPECIAL MESSAGE\n         MVC   MTMSGID(4),=CL4'PW04'   PUT MESSAGE CODE INTO PLIST\n         C     R15,=F'36'         IS THERE MORE INFO IN R0?\n         BNE   INSERTRC           NO, GO AHEAD AND ISSUE MESSAGE\n         SLL   R0,16              SHIFT REASON CODE\n         OR    R15,R0             INSERT R0 AS HIGH ORDER BYTES\n         B     INSERTRC           INSERT THE RC AND WRITE\nRACERRNU MVC   MTMSGID(4),=CL4'PW05'   PUT MESSAGE CODE INTO PLIST\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nUPDATEOK MVC   MTMSGID(4),=CL4'PW06'   PUT MESSAGE CODE INTO PLIST\n         LA    R2,0               NORMAL RETURN CODE\n         B     WRITEMSG           WRITE THE ERROR MESSAGE\nINSERTRC ST    R15,PWINSRC        SAVE THE RETURN CODE\n         LA    R1,PWINSRC         GET THE RETURN CODE ADDRESS\n         STCM  R1,B'0111',MTADDR  PUT THE ADDRESS IN THE PLIST\n         MVI   MTLEN,4            LENGTH OF ENTRY IS 4 BYTES\n         OI    MTHIGHL,X'80'      INDICATE TRANSLATION IS DESIRED\nWRITEMSG CALLTSSR EP=IKJEFF02,MF=(E,MTPARML)     WRITE THE MESSAGE\n         B     FREE               GO FREE THE PDL AND EXIT\n         EJECT\n**********************************************************************\n*  RETURN CONTROL TO THE TMP.                                        *\n**********************************************************************\nFREE     IKJRLSA PWPDL             RELEASE THE PDL STORAGE\n         LR    R15,R2              PUT THE RETURN CODE INTO R15\nEXIT     LR    R1,R13              GET THE WORK AREA POINTER\n         L     R13,SAVEOLD         GET CALLER'S SAVE AREA\n         ST    R15,SAVER15         SET RETURN CODE\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE OUR WORK AREA\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN\n         RETURN (14,12)            RESTORE REGISTERS AND RETURN\n         EJECT\n**********************************************************************\n*  CONSTANTS AND SKELETONS.                                          *\n**********************************************************************\nZERODATE DC    X'00000F'           ZEROS FOR PASSDATE\nPWREV    DC    B'0'                USER NOT REVOKED FLAG\nMOVEPARM MVC   0(*-*,R2),0(R1)     EXECUTED MOVE INSTRUCTION\nACTNSKEL ICHEACTN FIELD=PASSWORD,FLDATA=(8,ACTNSKLN),MF=L\nACTNSKLN EQU   *-ACTNSKEL          LENGTH OF SKELETON ICHEACTN PLIST\nINTYSKEL ICHEINTY ALTER,TYPE='USR',ENTRY=INTYSKLN,MF=L,                X\n               ACTIONS=(*-*,*-*,*-*,*-*,*-*)\nINTYSKLN EQU   *-INTYSKEL          LENGTH OF SKELETON ICHEINTY PLIST\n         EJECT\n         LTORG\n         EJECT\n**********************************************************************\n*  PARSE PARAMETER CONTROL LIST.                                     *\n**********************************************************************\nSETPWPCL IKJPARM DSECT=SETPWPDL\nUSERID   IKJIDENT 'USERID',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,       X\n               PROMPT='USERID TO BE CHANGED'\nPASSWORD IKJIDENT 'PASSWORD',PTBYPS,MAXLNTH=8,PROMPT='NEW PASSWORD',   X\n               FIRST=NONATNUM,OTHER=NONATNUM\n         IKJENDP\n         EJECT\n**********************************************************************\n*  COMMAND ERROR AND INFORMATIONAL MESSAGES.                         *\n**********************************************************************\nSETPWMSG CSECT\nPWD001E  IKJTSMSG ('PWD001E RACF IS INACTIVE - RACSTAT RC = ',),PW01\nPWD002E  IKJTSMSG ('PWD002E USER NOT AUTHORIZED TO THIS FUNCTION'),PW02\nPWD003E  IKJTSMSG ('PWD003E PARSE ERROR - IKJPARS RC =',),PW03\nPWD004E  IKJTSMSG ('PWD004E RACF ERROR - ICHEINTY RC = ',),PW04\nPWD005E  IKJTSMSG ('PWD005E USERID NOT FOUND'),PW05\nPWD006I  IKJTSMSG ('PWD006I PASSWORD CHANGED'),PW06\n         IKJTSMSG\n         EJECT\n         REGS\n         EJECT\n**********************************************************************\n*  SAVE AND WORK AREA.                                               *\n**********************************************************************\nWORKAREA DSECT\n         SAVEAREA DSECT=NO\nPWPPL    DS    0F,CL(PPLSIZE)      PARSE PARAMETER LIST\nPWECB    DS    F                   PARSE EVENT CONTROL BLOCK\nPWPDL    DS    F                   PARSE ANSWER AREA ADDRESS\nPWINSRC  DS    F                   RETURN CODE FOR INSERT\nPWUSERLN DS    AL1                 LENGTH OF USERID FIELD\nPWUSERID DS    CL8                 USERID FROM COMMAND LINE\nPWPSWDLN DS    AL1                 LENGTH OF PASSWORD FIELD\nPWPSWD   DS    CL8                 PASSWORD FROM COMMAND LINE\nCTD@     DS    0A                  CURRENT TIME AND DATE\nCTDT     DS    A                   CURRENT TIME, HHMMSSTH\nCTDD     DS    A                   CURRENT DATE, CCYYMMMD\nCTDD3    EQU   CTDD+L'CTDD-3,3     CURRENT DATE, LO 3 BYTES: YYMMMD\nCTD      EQU   CTD@,*-CTD@\nPWUPDATE DS    0F,CL(INTYSKLN)     UPDATE PARAMETER LIST\nPWUPDPWD DS    0F,CL(ACTNSKLN)     PASSWORD UPDATE ACTION ENTRY\nPWUPDDAT DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWUPDREV DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWUPDLJD DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWUPDLJT DS    0F,CL(ACTNSKLN)     PASSDATE UPDATE ACTION ENTRY\nPWMSGPL  IKJEFFMT MTDSECT=NO       IKJEFF02 MESSAGE PARAMETER LIST\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJPPL\nPPLSIZE  EQU   *-PPL\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IHAACEE\n         EJECT\n         IHAPSA\n         EJECT\n         CVT   DSECT=YES,LIST=NO\n         EJECT\n         TITLE 'RACFPW01 - CHECK TO SEE IF USER MAY CHANGE PASSWORDS'\n***********************************************************************\n***********************************************************************\n***                                                                 ***\n***      MODULE - RACFPW01                                          ***\n***                                                                 ***\n***      ROUTINE CALLED BY 'SETPW' COMMAND PROCESSOR                ***\n***                                                                 ***\n***      THIS MODULE WILL CONTROL WHO MAY EXECUTE THE 'SETPW' TSO   ***\n***      COMMAND TO CHANGE THE PASSWORDS OF OTHER USERS.            ***\n***                                                                 ***\n***      REQUIREMENTS:                                              ***\n***      1. CLASS 'FACILITY' MUST BE ACTIVATED. THE PROFILE NAME    ***\n***         USED MUST BE DEFINED AS 'RACFPW.CHANGES'                ***\n***                                                                 ***\n***      2. IF A NON-SPECIAL USER WISHES TO USE THE 'SETPW'         ***\n***         COMMAND, THE USER MUST BE AUTHORIZED TO THIS PROFILE    ***\n***         WITH AT LEAST 'READ' AUTHORITY.                         ***\n***                                                                 ***\n***         EXAMPLE:                                                ***\n***         RDEF RACFPW.CHANGES CL(FACILITY) UACC(NONE)             ***\n***         PERMIT RACFPW.CHANGES CL(FACILITY) ID(SYS1) AC(READ)    ***\n***                                                                 ***\n***      RETURN CODES:                                              ***\n***         0 - USER AUTHORIZED TO 'RACFPW.CHANGES'                 ***\n***                                                                 ***\n***         4 - FAIL REQUEST FOR PASSWORD CHANGE                    ***\n***             USED IF RACHECK RETURNS WITH NON-ZERO RETURN CODE   ***\n***                                                                 ***\n***      LOGGING SHOULD BE PERFORMED IN ALL CASES.                  ***\n***      THE PROFILE SPECIFIES AUDIT(ALL).                          ***\n***                                                                 ***\n***                                                                 ***\n***********************************************************************\n***********************************************************************\n         EJECT\nRACFPW01 CSECT ,\n         SAVE  (14,12),,RACFPW01-&SYSDATE-&SYSTIME\n         LR    R12,R15             PROGRAM ADDRESSABILITY\n         LR    R2,R1               SAVE USERID PARM\n         USING RACFPW01,R12        ****\n***********************************************************************\n* GET SPACE FOR RACROUTE PARM LIST                                    *\n***********************************************************************\n         L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         GETMAIN RU,               GETMAIN                             *\n               LV=(0),SP=229              DYNAMIC AREA\n         LR    R11,R1              DYNAMIC AREA ADDRESSABILITY\n         USING DATD,R11            ****\n         ST    R13,SAVEIT+4        SAVE CALLER'S SAVEAREA ADR\n         ST    R11,8(,R13)         SAVE OUR SAVEAREA ADR\n         LR    R13,R11             OUR SAVEAREA ADR TO R13\n***********************************************************************\n* ISSUE RACROUTE FOR AUTHORITY TO CHANGE PASSWORDS                    *\n***********************************************************************\nRACF     DS    0H\n         MVC   AUTHCHK(LRACROUT),RACROUTL INIT RACROUTE MACRO\n         MVC   ENW,ENI             INIT RACROUTE PROFILE\n         MVC   ENWUID,0(R2)        COMPLETE PROFILE NAME WITH USERID\n         RACROUTE REQUEST=AUTH,    RACHECK REQUEST.                    *\n               CLASS=RACLASS,      CHECK FOR                           *\n               ATTR=READ,          READ                                *\n               ENTITY=ENWPFX,      AUTHORITY                           *\n               LOG=ASIS,           TO CHANGE A PASSWORD                *\n               WORKA=SAFWORK,      SAF WORK AREA.                      *\n               MF=(E,AUTHCHK)\n***********************************************************************\n* PROCESS RETURN CODE                                                 *\n***********************************************************************\n         LA    R8,SAFWORK          SAF WORK AREA.\n         USING SAFW,R8\n         C     R15,=F'0'           AUTHORIZED?\n         BE    RETURN0             YES - RETURN WITH RC=0\n*\nSETFAIL  DS    0H\n         LA    R3,4                SET RETURN CODE TO FAIL REQUEST\n         B     FINAL\n*\nRETURN0  SR    R3,R3               SET RETURN CODE TO ALLOW REQUEST\n***********************************************************************\n* CLEAN UP AND QUIT                                                   *\n***********************************************************************\nFINAL    DS    0H\n         L     R13,SAVEIT+4        RESTORE R13\n         L     R0,DYNSIZE          DYNAMIC AREA SIZE TO R0\n         LR    R1,R11              DYNAMIC DATA ADDRESS TO R1\n         FREEMAIN RU,SP=229,       FREEMAIN                            *\n               LV=(0),             DYNAMIC                             *\n               A=(1)               AREA\n         LR    R15,R3              LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)  RESTORE REGISTERS AND RETURN\n         EJECT\n***********************************************************************\n* DATA AREAS                                                          *\n***********************************************************************\n         DS    0D                   DOUBLE WORD ALIGN\nDYNSIZE  DC    AL4(SIZEDATD)        DYN AREA SIZE\nRACLASS  DC    AL1(L'RACLASSN)      CLASS NAME FOR RACROUTE\nRACLASSN DC    C'FACILITY'          CLASS NAME FOR RACROUTE\nENI      DS    0CL29                INITIAL VALUE FOR ENTITY NAME\nENIPFX   DC    C'RACFPW.CHANGES.'   PREFIX FOR ENTITY NAME\nENIUID   DS    CL(L'PWUSERID)       USERID EXTENSION\n         DC    (ENI+L'ENI-*)C' '    BLANK PAD\nRACROUTL RACROUTE REQUEST=AUTH,WORKA=*-*,MF=L\nLRACROUT EQU   *-RACROUTL           LENGTH OF RACROUTE MACRO.\n         DS    0D\n         LTORG\n***********************************************************************\n* DSECT FOR THIS PROGRAM'S DYNAMIC AREA                               *\n***********************************************************************\nDATD     DSECT\nSAVEIT   DS    18F                 REGISTER SAVE AREA\nSAFWORK  DS    CL512               SAF WORK AREA.\n         DS    0D\nDOUBLE   DC    D'0'                WORK DOUBLE WORD\nENW      DS    CL(L'ENI)           ENTITY NAME IN WORKAREA\nENWPFX   EQU   ENIPFX-ENI+ENW,,C'C'\nENWUID   EQU   ENIUID-ENI+ENW,,C'C'\n         DS    0D\nAUTHCHK  RACROUTE REQUEST=AUTH,MF=L,WORKA=*-*\nSIZEDATD EQU   *-DATD              LENGTH OF DSECT\n*\n         ICHSAFW  ,\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETUSER": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x06\\xcd\\x06\\xcd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 1741, "newlines": 1741, "modlines": 0, "user": "FILE013"}, "text": "CMD007   TITLE 'SET RACF USER PROFILE FOR TSU/STC'\n***********************************************************************\n*                                                                     *\n* USERMOD:  MCMD007                                                   *\n* TITLE:    TSO-CP SETUSER: SET RACF USER PROFILE FOR TSU/STC         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* SYSMOD TYPE:          SOURCE ASSEMBLY                               *\n* TARGET ELEMENT NAME:  CMDLIB(SETUSER)                               *\n*                       HELP(SETUSER)                                 *\n* LEVEL:                                                              *\n*                                                                     *\n* VENDOR AND/OR COMPONENT:                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* ABSTRACT:                                                           *\n*    THE SETUSER COMMAND PROVIDES A MEANS (SIMILAR TO ALTUSER)        *\n*    TO UPDATE AND/OR LIST THE RACF USERID PROFILE ATTRIBUTES         *\n*    IN THE USERDATA FIELDS.                                          *\n*                                                                     *\n* REQUIRED SMP DDNAMES:                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*  Change Log:                                                        *\n*  09/06/86  MKH  Initial Version                                  001*\n*  10/26/86  MKH  Rewrite Version                                  002*\n*  01/18/87  MKH  Fix ABEND0C4 due to AMODE problems.              003*\n*                                                                     *\n*  Change Level:                                                      *\n         LCLC  &LEVEL,&MODDATE,&UMOD                                  *\n&LEVEL   SETC  '003'           <---- Current Modification Level       *\n&UMOD    SETC  'MCMD007'       <---- SMP Sysmod ID                    *\n&MODDATE SETC  '01/18/87-MKH'  <---- Modification Date and Author     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n*  METHOD:                                                            *\n*     IKJPARSE is invoked to breakdown the command text as entered    *\n*     by the TSO user.  We then obtain the current ACEE to determine  *\n*     whether the user is authorized to perform the operation.        *\n*     If the user wishes to inspect or alter his own profile, then    *\n*     the user should always be able to do so.  For functions         *\n*     on other userid's, we check to see whether the issuer has       *\n*     the special attribute.  If the issuer has the auditor attribute,*\n*     then we will at least allow him to inquire on any other user.   *\n*     If none of the attributes apply to the situation, we issue      *\n*     an RACHECK to CLASS=$APPL, ENTITY=SETUSER in order to determine *\n*     whether the issuer can perform this function.  To update other  *\n*     profiles, the issuer must have at least UPDATE access to the    *\n*     SETUSER profile.  Once we have the appropriate clearance, then  *\n*     the ICHEINTY macros are setup for the appropriate calls.        *\n*     SETUSER alters the following user-profile fields:               *\n*        PGMRNAME - The 20-character user name field.                 *\n*        USRCNT   - Number of USERDATA segments in the profile.       *\n*        USERDATA - A compound structure incorporating:               *\n*         USRNM    - 8-byte key 'ROOM    '                            *\n*         USRDATA  - 4-character room number.                         *\n*         USRFLG   - 1-character flag of X'00'.                       *\n*        USERDATA - A compound structure incorporating:               *\n*         USRNM    - 8-byte key 'MSGCLASS'                            *\n*         USRDATA  - 1-character sysout message-class.                *\n*         USRFLG   - 1-character flag of X'00'.                       *\n*     These values will be picked-up by the JES2-Exit-20 routine.     *\n*     When the TSO-user logs onto the system, all dynamic sysout      *\n*     will contain the correct programmer-name and room number        *\n*     for proper distribution.  When a started-task job executes,     *\n*     the MSGCLASS parameter is used for the sysout, in addition      *\n*     to having the programmer-name and room-number assigned.         *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*  HELP MEMBER TEXT:                                                  *\n*---------------------------------------------------------------------*\n*)F FUNCTION -                                                        *\n*     The SETUSER command changes the RACF user profile for fields    *\n*     applicable for the automatic assignment of the sysout programmer*\n*     name field and room-number for TSO and started-task printout.   *\n*     If no operands, or only the userid operand is specified, then   *\n*     the associated userid attributes will be listed.                *\n*     As with the ALTUSER command, the SETUSER command will allow you *\n*     to change your 20-character programmer name field.  You can also*\n*     specify a 4-character ROOM number.  In order to change userid's *\n*     other than your own, you must have SPECIAL authority, or have   *\n*     UPDATE access to the SETUSER resource in the $APPL class.       *\n*     If you have the AUDITOR attribute, then you can list any userid's\n*     profile information.                                            *\n*                                                                     *\n*     NOTE:  When invoked under ISPF, the SETUSER command must be     *\n*            issued via the TSOEXEC command.                          *\n*)X SYNTAX -                                                          *\n*     SETUSER         USERID('userid'/* ... )                         *\n*                     NAME('user-name')                               *\n*                     ROOM('room-numb')                               *\n*                     MSGCLASS('sysout-class')                        *\n*  REQUIRED - NONE                                                    *\n*  DEFAULTS - USERID(*)                                               *\n*  ALIAS    - SETU                                                    *\n*)O OPERANDS -                                                        *\n*))USERID('userid'...) - Specifies the users for which the specified  *\n*     attributes are to be modified.  If this parameter is omitted,   *\n*     then the current userid is assumed.                             *\n*))NAME('user-name') - Specifies a new value for the user's name      *\n*     field in the RACF data set.  The name may be from 1 to 20       *\n*     alphameric, special, or national characters, the first of       *\n*     which must be alphameric.  If special characters and/or         *\n*     blanks are included, then the text must be enclosed within      *\n*     quotes.                                                         *\n*))ROOM('room-numb') - Specifies a 1 to 4 character alphameric room   *\n*     number to where your sysout will be delivered.  For TSO users,  *\n*     this will be printed on the banner page of dynamically allocated*\n*     sysout datasets.  For started-task jobs, this will be printed   *\n*     on the banner page for all sysout.   When ROOM(*) is specified, *\n*     the ROOM value is removed from the user profile.                *\n*))MSGCLASS('sysout-class') - Specifies the sysout class for the job  *\n*     log, jobjcl, and jobmsg output for started-task jobs.  If the   *\n*     MSGCLASS is set for a TSO userid, then sysout for the TSO logon *\n*     will be generated, which is usually not too appropriate.        *\n*     When MSGCLASS(*) is specified, the MSGCLASS value is removed.   *\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*  SOURCE LIBRARY:  'MVSSUPRT.Z038.USERSRC(SETUSER)'                  *\n*  MACRO LIBRARIES:  'SYS1.MACLIB'                                    *\n*                    'SYS1.AMODGEN'                                   *\n*  LOAD LIBRARY:     'SYS1.LINKLIB'                                   *\n*  LINKEDIT PARMS:   'RENT,REUS,REFR'                                 *\n*                        INCLUDE SYSPUNCH(SETUSER)                    *\n*                        ENTRY SETUSER                                *\n*                        ALIAS SETU                                   *\n*                        SETCODE AC(1)                                *\n*                       NAME SETUSER(R)                               *\n*  OTHER MODULE DEPENDENCIES:                                         *\n*     IKJEFTE2 - TSO AUTHORIZED COMMAND TABLE                         *\n*     ISPTCM   - ISPF AUTHORIZED COMMAND TABLE                        *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   REGS R14-R5 ARE USED AS GENERAL WORK REGS                         *\n*   R13: SAVEAREA AND @WRKAREA                                        *\n*   R12: BASE REG                                                     *\n*   R11: CPPL ADDRESS                                                 *\n*   R10: PDL ADDRESS (CREATED BY IKJPARS)                             *\n*   R9:  ADDRESS OF ISSUER'S ACEE                                     *\n*   R8:  PDE/ECT                                                      *\n*                                                                     *\n* PROCEDURE SYNOPSIS:                                                 *\n*  1)  INIT:  GETMAIN AND INIT STORAGE, CALL PARSE.                   *\n*  2)  FUNC:  SET @FLAG1 TO DETERMINE REQUEST TYPE.                   *\n*  3)  AUTH:  RACHECK FOR USER AUTHORITY.                             *\n*  4)  UPDT:  PERFORM RACF PROFILE UPDATES.                           *\n*  5)  LIST:  LIST RACF PROFILES.                                     *\n*  6)  TERM:  CLEANUP, EOJ.                                           *\n*                                                                     *\n* SUBROUTINES:                                                        *\n*  RETRIEVE:  RETRIEVE PROFILE INFORMATION FROM RACF.                 *\n*  PUTLINE:   CALL IKJEFF02 TSO/E MESSAGE GENERATOR.                  *\n*                                                                     *\n* CSECTS:                                                             *\n*  SETUSER:  MAINLINE COMMAND PROCESSOR.                              *\n*  SETUPCL:  IKJPARS SYNTAX PARAMETERS.                               *\n*  SETUPDL:  IKJPARS RETURN BUFFER DSECT.                             *\n*  SETUMSG:  IKJTSMSG TEXTS FOR IKJEFF02 MESSAGE GENERATOR.           *\n*                                                                     *\n***********************************************************************\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** CSECT INITIALIZATION ***'\n***********************************************************************\n****  CSECT ENTRY POINT:                                           ****\n***********************************************************************\nSETUSER  RMODE 24                                                  003\nSETUSER  AMODE 24                                                  003\nSETUSER  CSECT ,                      PRIMARY CSECT\nSETU     EQU   SETUSER                ALIAS NAME IS SETU\n         ENTRY SETU                   IDENTIFY TO LINKAGE EDITOR\n         B     INIT000-*(,R15)        SKIP AROUND ID AREA\n*---------------------------------------------------------------------*\n         DC    AL1($IDLEN)            LENGTH OF ID SECTION:\n$ID      DC    C'SETUSER   &UMOD V&LEVEL &MODDATE '\n         DC    C'TSOCP SET RACF USER PGMRNAME ROOM MSGCLASS '\n         DC    C'&SYSDATE &SYSTIME'\n$IDLEN   EQU   *-$ID\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  INIT @WRKAREA, CHAIN SAVEAREAS:                              ****\n***********************************************************************\nINIT000  DS    0H                  START EXECUTABLE CODE:\n         STM   R14,R12,12(R13)        SAVE REGS\n         LA    R12,0(,R15)            R12: NEW BASE REG\n         USING SETUSER,R12            SET CSECT ADDRESSABILITY\n         LA    R11,0(,R1)             R11: CPPL ADDRESS\n         USING CPPL,R11               USE IKJCPPL MACRO DSECT\n         GETMAIN R,LV=@WRKSIZE        GETMAIN STORAGE\n         LA    R2,0(,R1)              R2: WORKAREA ADDRESS\n         LR    R0,R2                  R0: MVCL TARGET ADDR\n         LA    R1,@WRKSIZE            R1: MVCL TARGET SIZE\n         XR    R14,R14                RESET R14\n         XR    R15,R15                RESET R15\n         MVCL  R0,R14                 CLEAR WORKAREA\n         ST    R13,4(,R2)             CHAIN SAVEAREA\n         ST    R2,8(,R13)             CHAIN SAVEAREA\n         LR    R13,R2                 CHAIN SAVEAREA\n         USING @WRKAREA,R13           USE LOCAL DSECT\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*****  INIT THE IKJEFFMT MESSAGE INTERFACE AREA:                  *****\n***********************************************************************\nINIT100  DS    0H                  INIT IKJEFFMT:\n         LA    R2,MTCSECTP            SET ADDR OF IKJTSMSG PTR\n         ST    R2,MTPLPTR\n         ST    R11,MTCPPLP            SET CPPL ADDRESS\n         OI    MTHIGH,X'80'           INDIC STANDARD LINKAGE\n         L     R2,=V(SETUMSG)         R2: IKJTSMSG CSECT ADDRESS\n         ST    R2,MTCSECTP            SET ADDR OF IKJTSMSG CSECT\n         OI    MTSW1,MTPUTLSW         INDIC 'PUTLINE'\n         MVI   MTEXTRLN,124           EXTRACT BUFFER LENGTH\n         OI    MTSW2,MTEXTRCN         INDIC BOTH PUTLINE AND EXTRACT\n         OI    MTSW2,MTFMT            INDIC MTFORMAT=NEW\n         LA    R2,@WTOBUFF            R2: WTO BUFFER AREA\n         ST    R2,MTEXTRBF            R2: SET EXTRACT BUFFER PTR\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n*****  FORMAT THE PARSE PARAMETER LIST (PPL) FOR IKJPARS:         *****\n***********************************************************************\nINIT200  DS    0H                  FORMAT THE PPL:\n         LA    R2,@PPL                R2: PARSE PARAMETER LIST AREA\n         USING PPL,R2                 USE IKJPPL MAPPING MACRO\n         L     R1,CPPLUPT\n         ST    R1,PPLUPT              SET UPT ADDRESS\n         L     R1,CPPLECT\n         ST    R1,PPLECT              SET ECT ADDRESS\n         L     R1,CPPLCBUF\n         ST    R1,PPLCBUF             SET COMMAND BUFFER ADDR\n         LA    R1,@ECBTSO\n         ST    R1,PPLECB              SET ECB ADDRESS\n         L     R1,=V(SETUPCL)         R1: PCL CSECT\n         ST    R1,PPLPCL              SET IKJPARM CSECT ADDRESS\n         LA    R1,@PDLPTR             R1: PDL POINTER AREA\n         ST    R1,PPLANS              SET IKJPARMD PTR PTR\n         DROP  R2                     DROP PPL MAPPING\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n*****  ISSUE CALL TO IKJPARS TO EXTRACT COMMAND:                  *****\n***********************************************************************\nINIT300  DS    0H                  ISSUE CALL TO IKJPARS:\n         LA    R1,@PPL                R1: PARSE PARAMETER LIST ADDR\n         L     R15,CVTPTR             R15: CVT ADDRESS\n         L     R15,CVTTVT-CVT(,R15)   R15: TSVT ADDRESS\n         LTR   R15,R15                IS TSVT THERE ?\n         BZ    INIT400                NO: TSO/E IS NOT INSTALLED\n         L     R15,TSVTPARS-TSVT(,R15) R15: IKJPARS EPA\n         LTR   R15,R15                IS TSVT THERE ?\n         BZ    INIT400                NO: TSO/E IS NOT INSTALLED\n         SYNCH (15),AMODE=DEFINED     CALL IKJPARS                 003\n*---------------------------------------------------------------------*\nINIT320  DS    0H                  RETURN FROM IKJPARS:\n         L     R10,@PDLPTR            R10: PARSE ANSWER AREA\n         USING SETUPDL,R10            USE IKJPARMD DSECT AREA\n         LTR   R15,R15                WAS PARSE SUCCESSFUL ?\n         BZ    INIT600                YES: INIT COMPLETE\n         B     INIT500                NO: HANDLE PARSE ERROR\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n*****  HANDLE NO TSO/E ENVIRONMENT:                               *****\n***********************************************************************\nINIT400  DS    0H                  TSO/E ERROR:\n         LA    R1,MSG10               R1: WTO MESSAGE PLIST\n         XR    R0,R0                  RESET R0\n         WTO   ,MF=(E,(1))            ISSUE MESSAGE-10\n         LA    R1,MSG10+4             R1: TPUT MESSAGE TEXT\n         LH    R0,MSG10               R0: WTO PLIST LENGTH\n         SH    R0,=H'4'               MINUS PREFIX LENGTH\n         TPUT  (1),(0)                ISSUE MESSAGE\n         LA    R15,16                 SET RC=16\n         ST    R15,@RETCODE           SET MAXCC\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n*****  HANDLE PARSE SYSTEM ERROR:                                 *****\n***********************************************************************\nINIT500  DS    0H                  IKJPARS ERROR:\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         MVC   MTMSGID,=C'M011'       SET MESSAGE ID CODE\n         LA    R2,1                   R2: RETURN-CODE LENGTH\n         LA    R3,@RETCODE+3          R3: RETURN-CODE ADDRESS\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         OI    @SEG1L,X'80'           INDIC TRANSLATE REQUIRED\n         OI    MTSW1,MTHEXSW          INDIC TRANSLATE TO HEXEBCDIC\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n*****  CHECK APF AUTHORIZATION:                                   *****\n***********************************************************************\nINIT600  DS    0H                  CHECK APF AUTH:\n         USING PSA,R0                 USE IHAPSA MACRO\n         L     R15,PSATOLD            R15: OUR TCB ADDRESS\n         L     R15,TCBJSCB-TCB(,R15)  R15: OUR JSCB ADDRESS\n         USING IEZJSCB,R15            USE IEZJSCB MACRO\n         TM    JSCBOPTS,JSCBAUTH      DO WE HAVE APF ?\n         BO    INIT700                YES: APF IS OK\n*---------------------------------------------------------------------*\nINIT620  DS    0H                  APF ERROR:\n         DROP  R15                    DROP JSCB MAPPING\n         MVC   MTMSGID,=C'M012'       SET MESSAGE ID CODE\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         LA    R15,4                  SET RC=4\n         ST    R15,@RETCODE           SAVE\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n*****  INIT PHASE IS COMPLETE:                                    *****\n***********************************************************************\nINIT700  DS    0H                  INIT PHASE IS COMPLETE:\n*=====================================================================*\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** FUNCTION CHECKING ***'\n***********************************************************************\n*  FUNCTION CHECKING:                                                 *\n*                                                                     *\n*  THIS SECTION SETS @FLAG1 INDICATORS WHICH REPRESENT WHAT TYPES     *\n*  OF FUNCTIONS THE USER IS REQUESTING IN THIS COMMAND.               *\n*  THE PROGRAMMER NAME FIELD, ROOM NUMBER, AND MSGCLASS VALUES        *\n*  ARE ALSO EXTRACTED, AND SAVED IN DYNAMIC STORAGE.                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n****  OBTAIN THE CURRENT USER'S USERID:                            ****\n***********************************************************************\nFUNC000  DS    0H                  LOCATE ACEE AND GET USERID:\n         USING PSA,R0                 USE IHAPSA MACRO\n         L     R15,PSAAOLD            R15: OUR ASCB ADDRESS\n         USING ASCB,R15               USE IHAASCB MACRO\n         L     R15,ASCBASXB           R15: ASXB ADDRESS\n         USING ASXB,R15               USE IHAASXB MACRO\n         L     R9,ASXBSENV            R9: ACEE ADDRESS\n         USING ACEE,R9                USE IHAACEE MACRO\n         MVC   @TSOUID(9),ACEEUSER    EXTRACT THE USERID\n         DROP  R15                    DROP ASXB MAP\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  EXAMINE WHAT WAS SPECIFIED FOR 'USERID':                     ****\n***********************************************************************\nFUNC100  DS    0H                  SCAN LIST OF USERID'S:\n         XR    R6,R6                  R6: COUNTER OF USERID'S\n         TM    PDLKUID+1,X'01'        WAS 'USER(' SPECIFIED ?\n         BNO   FUNC160                NO: WE CAN ASSUME 'SELF'\n         LA    R15,PDLLUID            R15: 1ST USERID PDE ADDRESS\n         USING PDE,R15                USE LOCAL DSECT\n*---------------------------------------------------------------------*\nFUNC120  DS    0H                  PROCESS NEXT PDE:\n         LA    R6,1(,R6)              INCR USERID COUNTER\n         L     R4,PDEDATA             R4: ADDR OF USERID\n         LH    R5,PDELENG             R5: LENGTH OF USERID\n         STC   R5,@USERIDL            SAVE USERID LEN\n         LA    R2,@USERIDN            R2: MOVE TARGET\n         LA    R3,8                   R3: USER LENGTH\n         ICM   R5,B'1000',BLANKS      SET BLANK FILL CHAR\n         MVCL  R2,R4                  MOVE USERID\n         CLC   @USERID,@TSOUID        IS SAME GUY ?\n         BE    FUNC140                YES: THIS ONE'S OK\n         CLC   =C'* ',@USERIDN        IS SAME GUY ?\n         BE    FUNC140                YES: DONT SET 'OTHER' FLAG\n*---------------------------------------------------------------------*\nFUNC130  DS    0H                  REQUEST IS FOR NON-SELF:\n         OI    @FLAG1,@F1OTHER        INDIC OTHER USERID\n*---------------------------------------------------------------------*\nFUNC140  DS    0H                  LOOK FOR NEXT PDE:\n         L     R15,PDENEXT            R15: NEXT PDE\n         N     R15,=X'00FFFFFF'       AND ADDRESS MASK\n         BNZ   FUNC120                PROCESS NEXT PDE\n         DROP  R15                    DROP PDE MAPPING\n*---------------------------------------------------------------------*\nFUNC160  DS    0H                  SEE IF THIS IS MULTI REQUEST:\n         CH    R6,=H'1'               ARE WE OVER 1 REQUEST ?\n         BNH   FUNC180                NO: DONT SET MULTI FLAG\n         OI    @FLAG1,@F1MULTI        YES: ACCESS FOR MULTIPLE USERS\n*---------------------------------------------------------------------*\nFUNC180  DS    0H                  USERID EXTRACT COMPLETE:\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  EXTRACT PROGRAMMER NAME FIELD:                               ****\n***********************************************************************\nFUNC200  DS    0H                  SEE IF NAME IS SPECIFIED:\n         TM    PDLKNAM+1,X'01'        WAS 'NAME(' SPECIFIED ?\n         BNO   FUNC240                NO:  SKIP PGMRNAME TESTING\n         USING PDE,R8                 USE LOCAL DSECT\n         LA    R8,PDLLNAM             R8: 'NAME' PDE\n*---------------------------------------------------------------------*\nFUNC220  DS    0H                  EXTRACT NAME DATA FROM COMMAND:\n         LA    R2,@REQNAME            R2: MVCL TARGET ADDR\n         LA    R3,L'@REQNAME          R3: MVCL TARGET SIZE\n         L     R4,PDEDATA             R4: TSO DATA ADDRESS\n         LH    R5,PDELENG             R5: LENGTH OF DATA\n         ICM   R5,B'1000',BLANKS      SET FILL CHAR\n         MVCL  R2,R4                  TRANSFER PROGRAMMER NAME\n         OI    @FLAG1,@F1NAME         INDIC NAME UPDATE REQUESTED\n*---------------------------------------------------------------------*\nFUNC240  DS    0H                  NAME PROCESSING FINISHED:\n         DROP  R8                     DROP PDE MAPPING\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  EXTRACT ROOM NUMBER FIELD:                                   ****\n***********************************************************************\nFUNC300  DS    0H                  SEE IF ROOM IS SPECIFIED:\n         TM    PDLKROM+1,X'01'        WAS 'ROOM(' SPECIFIED ?\n         BNO   FUNC360                NO:  SKIP ROOM TESTING\n         USING PDE,R8                 USE LOCAL DSECT\n         LA    R8,PDLLROM             R8: 'ROOM' PDE\n*---------------------------------------------------------------------*\nFUNC320  DS    0H                  EXTRACT ROOM DATA FROM COMMAND:\n         LA    R2,@REQROOM            R2: MVCL TARGET ADDR\n         LA    R3,L'@REQROOM          R3: MVCL TARGET SIZE\n         L     R4,PDEDATA             R4: TSO DATA ADDRESS\n         LH    R5,PDELENG             R5: LENGTH OF DATA\n         ICM   R5,B'1000',BLANKS      SET FILL CHAR\n         MVCL  R2,R4                  TRANSFER ROOM NUMBER\n         OI    @FLAG1,@F1ROOM         INDIC ROOM UPDATE REQUESTED\n*---------------------------------------------------------------------*\nFUNC360  DS    0H                  ROOM PROCESSING FINISHED:\n         DROP  R8                     DROP PDE MAPPING\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  EXTRACT MSGCLASS NUMBER FIELD:                               ****\n***********************************************************************\nFUNC400  DS    0H                  SEE IF MSGCLASS IS SPECIFIED:\n         TM    PDLKMSG+1,X'01'        WAS 'MSGCLASS(' SPECIFIED ?\n         BNO   FUNC440                NO:  SKIP MSGCLASS TESTING\n         USING PDE,R8                 USE LOCAL DSECT\n         LA    R8,PDLLMSG             R8: 'MSGCLASS' PDE\n*---------------------------------------------------------------------*\nFUNC420  DS    0H                  EXTRACT MSGCLASS DATA FROM COMMAND:\n         LA    R2,@REQMSGC            R2: MVCL TARGET ADDR\n         LA    R3,L'@REQMSGC          R3: MVCL TARGET SIZE\n         L     R4,PDEDATA             R4: TSO DATA ADDRESS\n         LH    R5,PDELENG             R5: LENGTH OF DATA\n         ICM   R5,B'1000',BLANKS      SET FILL CHAR\n         MVCL  R2,R4                  TRANSFER MSGCLASS\n         OI    @FLAG1,@F1MSGC         INDIC MSGCLASS UPDATE REQUESTED\n*---------------------------------------------------------------------*\nFUNC440  DS    0H                  MSGCLASS PROCESSING FINISHED:\n         DROP  R8                     DROP PDE MAPPING\n*=====================================================================*\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** AUTHORIZATION CHECKING ***'\n***********************************************************************\n* AUTHORIZATION CHECKING:                                             *\n*                                                                     *\n*   THE FUNCTION CHECKING SECTION SET @FLAG1, WHICH GIVES US A        *\n*   VAGUE IDEA OF WHAT THE COMMAND ISSUER WISHES TO ACCOMPLISH.       *\n*   IN THE AUTH SECTION, WE WILL:                                     *\n*   A) ALLOW ANYONE TO REVIEW OR UPDATE HIS OWN NAME OR ROOM NUMBER.  *\n*   B) ALLOW 'SPECIAL' ID'S TO REVIEW OR UPDATE ANYONE.               *\n*   C) ALLOW AUDIT AND OPERATIONS TO REVIEW ANYONE.                   *\n*   D) ALLOW THOSE WITH ACCESS(READ) TO $APPL/SETUSER ABILITY TO      *\n*       REVIEW ANYONE.                                                *\n*   E) ALLOW THOSE WITH ACCESS(UPDATE) TO $APPL/SETUSER ABILITY TO    *\n*       REVIEW OR UPDATE ANYONE.                                      *\n*   F) REQUIRE ACCESS(UPDATE) TO $APPL/SETUSER IN ORDER TO SET THE    *\n*       MESSAGE CLASS.                                                *\n*   A LIST-ONLY REQUEST CAN SPECIFY MULTIPLE USERID'S.                *\n*   HOWEVER, ONLY ONE USERID MAY BE SPECIFIED IF ANY DATA IS TO BE    *\n*    UPDATED.                                                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n****  SEE IF WE ARE ONLY LISTING:                                  ****\n***********************************************************************\nAUTH000  DS    0H                  CHECK FOR LIST FUNC:\n         TM    @FLAG1,@F1UPDAT        ANY UPDATES REQUESTED ?\n         BNZ   AUTH100                YES: CHECK FOR SYNTAX\n         TM    @FLAG1,@F1OTHER        LISTING FOR NON-SELF ?\n         BO    AUTH300                YES: READ ACCESS IS REQUIRED\n         B     AUTH500                NO: ALLOW USER TO LIST SELF\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  CHECK UPDATE SYNTAX:                                         ****\n***********************************************************************\nAUTH100  DS    0H                  CHECK UPDATE FUNC:\n         TM    @FLAG1,@F1MULTI        UPDATING MULTIPLE ID'S ?\n         BO    AUTH200                YES: UPDATE ONE AT A TIME\n         TM    @FLAG1,@F1OTHER        UPDATE FOR NON-SELF ?\n         BO    AUTH400                YES: CHECK RACF UPDT ACCESS\n         TM    @FLAG1,@F1MSGC         WILL WE UPDATE MSGCLASS ?\n         BO    AUTH400                YES: UPDATE ACCESS REQUIRED\n         B     AUTH500                NO: USER CAN UPDATE HIMSELF\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  ERROR:  CANNOT UPDATE MULTIPLE USERIDS AT ONCE:              ****\n***********************************************************************\nAUTH200  DS    0H                  ISSUE ERROR MESSAGE:\n         MVC   MTMSGID,=C'M031'       SET MESSAGE ID CODE\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         LA    R15,8                  SET RETURN-CODE = 8\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  CHECK FOR READ ACCESS:                                       ****\n***********************************************************************\nAUTH300  DS    0H                  INSPECT ACEE FOR QUICK-AUTH:\n         TM    ACEEFLG1,ACEESPEC      DO WE HAVE SPCL ?\n         BO    AUTH500                YES: WE CAN ACCESS OTHERS\n         TM    ACEEFLG1,ACEEOPER      DO WE HAVE OPERATIONS ?\n         BO    AUTH500                YES: ALLOW READ ACCESS\n         TM    ACEEFLG1,ACEEAUDT      DO WE HAVE AUDIT ?\n         BO    AUTH500                YES: ALLOW READ ACCESS\n*---------------------------------------------------------------------*\nAUTH320  DS    0H                  ISSUE RACHECK FOR READ ACCESS:\n         LA    R1,@RACH               R1: RACHECK PLIST AREA\n         MVC   0(@RACHL,R1),PRACH     PREFORMAT PLIST\n         RACHECK ATTR=READ,MF=(E,(1)) TEST FOR READ ACCESS\n         LTR   R15,R15                IS USER AUTHORIZED ?\n         BZ    AUTH500                YES: ALLOW USAGE\n*---------------------------------------------------------------------*\nAUTH340  DS    0H                  READ ACCESS FAILED:\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         MVC   MTMSGID,=C'M033'       SET MESSAGE ID CODE\n         XR    R2,R2                  RESET R2\n         IC    R2,@TSOUIDL            R2: TSO USERID LENGTH\n         LA    R3,@TSOUIDN            R3: TSO USERID TEXT\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         LA    R15,8                  SET RETURN-CODE = 8\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  RACHECK FOR SETUSER UPDATE ACCESS:                           ****\n***********************************************************************\nAUTH400  DS    0H                  INSPECT ACEE FOR UPDATE QUICK-AUTH:\n         TM    ACEEFLG1,ACEESPEC      DO WE HAVE SPCL ?\n         BO    AUTH500                YES: WE CAN UPDATE OTHERS\n*---------------------------------------------------------------------*\nAUTH420  DS    0H                  RACHECK ACCESS=UPDATE:\n         LA    R1,@RACH               R1: RACHECK PLIST AREA\n         MVC   0(@RACHL,R1),PRACH     PREFORMAT PLIST\n         RACHECK ATTR=UPDATE,MF=(E,(1))\n         LTR   R15,R15                IS USER AUTHORIZED ?\n         BZ    AUTH500                YES: ALLOW USAGE\n*---------------------------------------------------------------------*\nAUTH440  DS    0H                  NON-SELF UPDATE AUTH FAILED:\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         TM    @FLAG1,@F1OTHER        GOING FOR NON-SELF ?\n         BNO   AUTH460                NO: MUST BE MSGCLASS ATTEMPT\n         MVC   MTMSGID,=C'M034'       SET MESSAGE ID CODE\n         XR    R2,R2                  RESET R2\n         IC    R2,@TSOUIDL            R2: TSO USERID LENGTH\n         LA    R3,@TSOUIDN            R3: TSO USERID TEXT\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\nAUTH460  DS    0H                  MSGCLASS UPDATE AUTH FAILED:\n         MVC   MTMSGID,=C'M035'       SET MESSAGE ID CODE\n         XR    R2,R2                  RESET R2\n         IC    R2,@TSOUIDL            R3: TSO USERID LENGTH\n         LA    R3,@TSOUIDN            R3: TSO USERID TEXT\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n         B     CLEANUP                EXIT\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  END OF AUTH CHECKING:                                        ****\n***********************************************************************\nAUTH500  DS    0H                  WE HAVE SECURITY CLEARANCE:\n*=====================================================================*\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** UPDATE PROCESSING ***'\n***********************************************************************\n****  SEE IF UPDATE IS REQUESTED:                                  ****\n***********************************************************************\nUPDT000  DS    0H                  SEE IF UPDATE IS REQUESTED:\n         TM    @FLAG1,@F1UPDAT        ANY UPDATES ?\n         BZ    UPDT900                NO: SKIP UPDATE PROCESSING\n*---------------------------------------------------------------------*\nUPDT020  DS    0H                  ENSURE @USERID IS SET:\n         TM    @FLAG1,@F1OTHER        UPDATES FOR NON-SELF ?\n         BO    UPDT040                YES: @USERID IS SET\n         MVC   @USERID,@TSOUID        NO:  ASSUME CURRENT USER\nUPDT040  DS    0H                  @USERID IS SET:\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  RETRIEVE USERID PROFILE:                                     ****\n***********************************************************************\nUPDT100  DS    0H                  GET USERID PROFILE INFO:\n         BAL   R14,RETRIEVE           RETRIEVE PROFILE IN @USERID\n         LTR   R15,R15                DID WE GET IT ?\n         BZ    UPDT200                YES: PROCEDE\n         CH    R15,=H'12'             WAS USER NOT FOUND ?\n         BE    UPDT900                YES: EXIT UPDATE\n         B     CLEANUP                NO:  GO CLEANUP\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  UPDATE THE PROGRAMMER NAME FIELD:                            ****\n***********************************************************************\nUPDT200  DS    0H                  SEE IF NAME CHANGES:\n         TM    @FLAG1,@F1NAME         NAME CHANGE REQUESTED ?\n         BNO   UPDT280                NO: DONT UPDATE NAME\n         CLC   @REQNAME,@OLDNAME      NAME CHANGE REQUESTED ?\n         BE    UPDT280                NO: DONT UPDATE NAME\n*---------------------------------------------------------------------*\nUPDT220  DS    0H                  SETUP RACF ACTION PARMS:\n         LA    R1,@ACTION             R1: ACTION PLIST\n         MVC   0(@ACTIONL,R1),ACTNAME PRE-FORMAT IT\n         LA    R2,@REQNAME            R2: NEW PROGRAMMER NAME FIELD\n         ICHEACTN MF=(E,(1)),         MODIFY ACTION STMT               X\n               FLDATA=(20,(R2))\n*---------------------------------------------------------------------*\nUPDT240  DS    0H                  UPDATE THE PGMRNAME FIELD:\n         LA    R1,@ALTER              R1: ICHEINTY PLIST AREA\n         MVC   0(@ALTERL,R1),PALTER   PRE-FORMAT IT\n         LA    R2,@USERID             R2: TARGET USERID\n         LA    R3,@ACTION             R3: ACTIONS PLIST\n         ICHEINTY ALTER,MF=(E,(1)),   ALTER THE USER PROFILE:          X\n               ENTRY=(R2),            - SPECIFY USERID,                X\n               ACTIONS=((R3)),        - INDICATE WHAT FIELD AND DATA,  X\n               OPTIONS=(FLDEF,ACTION) - PLIST MANIPULATION OPTIONS\n*---------------------------------------------------------------------*\nUPDT260  DS    0H                  CHECK THE RETURN-CODE:\n         LTR   R15,R15                WAS UPDATE SUCCESSFUL ?\n         BZ    UPDT280                YES: CONTINUE\n         EX    R15,*                  NO: (CHOKE)\n*---------------------------------------------------------------------*\nUPDT280  DS    0H                  PGMRNAME PROCESSING DONE:\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  UPDATE ROOM NUMBER:                                          ****\n***********************************************************************\nUPDT300  DS    0H                  SEE IF ROOM CHANGES:\n         TM    @FLAG1,@F1ROOM         ROOM CHANGE REQUESTED ?\n         BNO   UPDT390                NO: DONT UPDATE ROOM\n         CLC   @REQROOM,@OLDROOM      ROOM CHANGE REQUESTED ?\n         BE    UPDT390                NO: DONT UPDATE ROOM\n         TM    @FLAG2,@F2OLDMS        OLD-STYLE MSGCLASS EXIST ?\n         BNO   UPDT310                NO\n         TM    @FLAG1,@F1MSGC         WILL MSGCLASS UPDATE ?\n         BO    UPDT310                YES: DONT CONVERT\n         MVC   @REQMSGC(1),@OLDMSGC   NO: STAGE FOR CONVERT\n         OI    @FLAG1,@F1MSGC         FORCE MSGCLASS UPDATE\n*---------------------------------------------------------------------*\nUPDT310  DS    0H                  FORMAT TEST LIST:\n         LA    R1,@TEST               R1: TEST PLIST\n         MVC   0(@TESTL,R1),TSTSEGM   PRE-FORMAT IT\n         LA    R2,ROOMKEY             R2: NEW ROOM FIELD\n         ICHETEST MF=(E,(1)),         MODIFY TEST STMT                 X\n               FLDATA=(8,(R2)),       - SET COMPARAND DATA             X\n               COND=EQ                - ASSUME 'REPLACE' FUNCTION\n*---------------------------------------------------------------------*\nUPDT320  DS    0H                  SEE IF WE NEED TO ADD OR REPLACE:\n         TM    @FLAG2,@F2ROOM         DID ROOM SEGMENT EXIST ?\n         BO    UPDT330                YES: GO WITH COND=EQ\n         ICHETEST MF=(E,(1)),         NO:  MODIFY THE CONDITION:       X\n               COND=NE                - CHANGE TO 'ADD' FUNCTION\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\nUPDT330  DS    0H                  CONSTRUCT THE SEGMENT DATA:\n         MVC   @USRNM,ROOMKEY         SET SEGMENT KEY\n         MVI   @USRDATA+0,4           SET ROOM LENGTH\n         MVC   @USRDATA+1(4),@REQROOM SET NEW ROOM NUMBER\n         MVI   @USRDATA+5,0           INIT FLAG TO ZERO\n*---------------------------------------------------------------------*\nUPDT340  DS    0H                  FORMAT THE ACTION PARMS:\n         LA    R1,@ACTION             R1: ACTION PLIST\n         MVC   0(@ACTIONL,R1),ACTSEGM PRE-FORMAT IT\n         LA    R2,@TEST               R2: CONDITIONAL TEST STMT\n         LA    R3,@USERDAT            R3: NEW ROOM SEGMENT\n         ICHEACTN MF=(E,(1)),         MODIFY ACTION STMT:              X\n               TESTS=((R2)),          - POINT TO CONDITION PARM,       X\n               FLDATA=(14,(R3))       - SPECIFY THE NEW DATA\n*---------------------------------------------------------------------*\nUPDT360  DS    0H                  PERFORM THE SEGMENT UPDATE:\n         LA    R1,@ALTER              R1: ICHEINTY PLIST AREA\n         MVC   0(@ALTERL,R1),PALTER   PRE-FORMAT IT\n         LA    R2,@USERID             R2: TARGET USERID\n         LA    R3,@ACTION             R3: ACTIONS PLIST\n         ICHEINTY ALTER,MF=(E,(1)),   UPDATE THE USER PROFILE:         X\n               ENTRY=(R2),            - R2: @USERID                    X\n               ACTIONS=((R3)),        - R3: ACTION PARM LIST           X\n               OPTIONS=(FLDEF,ACTION) - PLIST MANIPULATION OPTIONS\n*---------------------------------------------------------------------*\nUPDT380  DS    0H                  CHECK THE CCONDITION CODE:\n         LTR   R15,R15                WAS UPDATE SUCCESSFUL ?\n         BZ    UPDT390                YES: CONTINUE\n         EX    R15,*                  NO: (CHOKE)\n*---------------------------------------------------------------------*\nUPDT390  DS    0H                  ROOM NUMBER HAS BEEN PROCESSED:\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  UPDATE MSGCLASS NUMBER:                                      ****\n***********************************************************************\nUPDT400  DS    0H                  SEE IF MSGCLASS CHANGES:\n         TM    @FLAG1,@F1MSGC         MSGCLASS UPDATE REQUESTED ?\n         BNO   UPDT490                NO: DONT UPDATE MSGCLASS\n*\n         CLI   @REQMSGC,C'A'          VALID SYSOUT CLASS ?\n         BL    UPDT410                NO: SET DUMMY CHAR\n         CLI   @REQMSGC,C'I'          VALID SYSOUT CLASS ?\n         BNH   UPDT420                YES: USE THIS CHAR\n*\n         CLI   @REQMSGC,C'J'          VALID SYSOUT CLASS ?\n         BL    UPDT410                NO: SET DUMMY CHAR\n         CLI   @REQMSGC,C'R'          VALID SYSOUT CLASS ?\n         BNH   UPDT420                YES: USE THIS CHAR\n*\n         CLI   @REQMSGC,C'S'          VALID SYSOUT CLASS ?\n         BL    UPDT410                NO: SET DUMMY CHAR\n         CLI   @REQMSGC,C'Z'          VALID SYSOUT CLASS ?\n         BNH   UPDT420                YES: USE THIS CHAR\n*\n         CLI   @REQMSGC,C'0'          VALID SYSOUT CLASS ?\n         BL    UPDT410                NO: SET DUMMY CHAR\n         CLI   @REQMSGC,C'9'          VALID SYSOUT CLASS ?\n         BNH   UPDT420                YES: USE THIS CHAR\n*---------------------------------------------------------------------*\nUPDT410  DS    0H                  SET DUMMY MSGCLASS:\n         MVI   @REQMSGC,C'*'          ASTERISK MEANS 'NONE'\n*---------------------------------------------------------------------*\nUPDT420  DS    0H                  FORMAT TEST LIST:\n         LA    R1,@TEST               R1: TEST PLIST\n         MVC   0(@TESTL,R1),TSTSEGM   PRE-FORMAT IT\n         LA    R2,MSGCKEY             R2: NEW MSGCLASS FIELD\n         ICHETEST MF=(E,(1)),         MODIFY TEST STMT                 X\n               FLDATA=(8,(R2)),       - SET COMPARAND KEY,             X\n               COND=EQ                - ASSUME 'REPLACE' FUNCTION\n*---------------------------------------------------------------------*\nUPDT430  DS    0H                  CHECK FOR ADD OR REPLACE:\n         TM    @FLAG2,@F2MSGC         DID MSGCLASS SEGMENT EXIST ?\n         BO    UPDT440                YES: GO WITH COND=EQ\n         ICHETEST MF=(E,(1)),         NO:  CHANGE TO COND=NE           X\n               COND=NE                - SPECIFY 'ADD' FUNCTION\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\nUPDT440  DS    0H                  CONSTRUCT 'MSGCLASS' SEGMENT DATA:\n         MVC   @USRNM,MSGCKEY         SET SEGMENT KEY\n         MVI   @USRDATA+0,1           SET MSGCLASS LENGTH\n         MVC   @USRDATA+1(1),@REQMSGC SET NEW MSGCLASS\n         MVI   @USRDATA+2,0           INIT FLAG TO ZERO\n*---------------------------------------------------------------------*\nUPDT450  DS    0H                  BUILD ACTION PARMLIST:\n         LA    R1,@ACTION             R1: ACTION PLIST\n         MVC   0(@ACTIONL,R1),ACTSEGM PRE-FORMAT IT\n         LA    R2,@TEST               R2: CONDITIONAL TEST STMT\n         LA    R3,@USERDAT            R3: NEW MSGCLASS SEGMENT\n         ICHEACTN MF=(E,(1)),         MODIFY ACTION STMT               X\n               TESTS=((R2)),          - R2 SELECTS SEGMENT KEY         X\n               FLDATA=(11,(R3))       - R3 SPECIFIES NEW SEGMENT DATA\n*---------------------------------------------------------------------*\nUPDT460  DS    0H                  UPDATE MSGCLASS SEGMENT:\n         LA    R1,@ALTER              R1: ICHEINTY PLIST AREA\n         MVC   0(@ALTERL,R1),PALTER   PRE-FORMAT IT\n         LA    R2,@USERID             R2: TARGET USERID\n         LA    R3,@ACTION             R3: ACTIONS PLIST\n         ICHEINTY ALTER,MF=(E,(1)),   UPDATE USER PROFILE:             X\n               ENTRY=(R2),            - R2 IS @USERID                  X\n               ACTIONS=((R3)),        - R3 SPECIFIES @ACTION           X\n               OPTIONS=(FLDEF,ACTION) - PLIST MANIPULATION OPTIONS\n*---------------------------------------------------------------------*\nUPDT470  DS    0H                  CHECK CONDITION CODE:\n         LTR   R15,R15                WAS UPDATE SUCCESSFUL ?\n         BZ    UPDT490                YES: CONTINUE\n         EX    R15,*                  NO: (CHOKE)\n*---------------------------------------------------------------------*\nUPDT490  DS    0H                  MSGCLASS UPDATES DONE:\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  USER PROFILE UPDATE IS COMPLETE:                             ****\n***********************************************************************\nUPDT900  DS    0H                  SETUSER UPDATES DONE:\n*=====================================================================*\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** LIST PROCESSING ***'\n***********************************************************************\n*                                                                     *\n* LIST PROCESSING:                                                    *\n*                                                                     *\n*     THE PDE'S (PARAMETER DESCRIPTION ENTRIES) FOR THE LIST OF       *\n*     USERID'S ARE ALL SCANNED, AND EACH USERID IN THE LIST WILL      *\n*     HAVE ITS PGMRNAME ROOM AMD MSGCLASS SETTINGS DISPLAYED          *\n*     IN THE FORMAT OF A SETUSER COMMAND.                             *\n*     R8 MAPS THE PDE CHAIN.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n****  IF USERID NOT SPECIFIED, PROVIDE DUMMY PDE:                  ****\n***********************************************************************\nLIST000  DS    0H                  SETUP DUMMY PDE:\n         LA    R8,PDLLUID             R8: 1ST USERID PDE ADDRESS\n         USING PDE,R8                 USE LOCAL DSECT\n         TM    PDLKUID+1,X'01'        WAS 'USER(' SPECIFIED ?\n         BO    LIST100                YES: USE REAL PDE\n         LA    R8,DUMMYPDE            NO:  USE A DUMMY PDE INSTEAD\n*        B     LIST100                GO PROCESS DUMMY PDE\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  THIS LOOP WILL PROCESS EACH USERID:                          ****\n***********************************************************************\nLIST100  DS    0H                  SCAN EACH PDE:\n         L     R4,PDEDATA             R4: ADDR OF USERID\n         LH    R5,PDELENG             R5: LENGTH OF USERID\n         STC   R5,@USERIDL            SAVE USERID LEN\n         LA    R2,@USERIDN            R2: MOVE TARGET\n         LA    R3,8                   R3: USER LENGTH\n         ICM   R5,B'1000',BLANKS      SET BLANK FILL CHAR\n         MVCL  R2,R4                  MOVE USERID\n*---------------------------------------------------------------------*\nLIST120  DS    0H                  CHECK FOR (*) SUBSTITUTION:\n         CLC   =C'* ',@USERIDN        IS SAME GUY ?\n         BNE   LIST200                NO: WE HAVE A USERID\n         MVC   @USERID,@TSOUID        YES: SUBSTITUTE NAME\n*---------------------------------------------------------------------*\nLIST140  DS    0H                  @USERID IS SET:\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  RETRIEVE USERID'S PROFILE DATA:                              ****\n***********************************************************************\nLIST200  DS    0H                  ISSUE CALL TO RACF FOR @USERID:\n         BAL   R14,RETRIEVE           CALL RETRIEVAL ROUTINE\n         LTR   R15,R15                WAS RETRIEVE OK ?\n         BZ    LIST300                YES: GO DISPLAY PROFILE\n         CH    R15,=H'12'             USER NOT FOUND ?\n         BE    LIST700                YES: TRY NEXT ONE\n         B     CLEANUP                NO: WE HAD A BAD ERROR\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  BUILD DISPLAY TEXT FOR USER PROFILE:                         ****\n***********************************************************************\nLIST300  DS    0H                  DISPLAY USER PROFILE:\n         MVC   MTMSGID,=C'M050'       SET MESSAGE ID CODE\n*---------------------------------------------------------------------*\nLIST310  DS    0H                  SET USERID:\n         LA    R2,8                   R2: TSO USERID LENGTH\n         LA    R3,@USERIDN            R3: TSO USERID TEXT\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n*---------------------------------------------------------------------*\nLIST320  DS    0H                  SET PROGRAMMER NAME FIELD:\n         LA    R2,L'@OLDNAME          R2: PGMRNAME LENGTH\n         LA    R3,@OLDNAME            R3: PGMRNAME TEXT\n         STM   R2,R3,@SEG2            SET IKJTSMSG INTERFACE\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  BUILD DISPLAY TEXT FOR ROOM NUMBER:                          ****\n***********************************************************************\nLIST400  DS    0H                  SET ROOM NUMBER:\n         LA    R2,4                   R2: ROOM TEXT LENGTH\n         LA    R3,@OLDROOM            R3: ROOM NUMBER TEXT\n         STM   R2,R3,@SEG3            SET IKJTSMSG INTERFACE\n         CLI   @OLDROOM,C'*'          IS ASTERISK ?\n         BE    LIST420                YES: SET DEFAULT\n         TM    @FLAG2,@F2ROOM         WAS ROOM THERE ?\n         BO    LIST440                YES: DONT SET DEFAULT\n*---------------------------------------------------------------------*\nLIST420  DS    0H                  SET ROOM NUMBER DEFAULT:\n         MVI   @OLDROOM,C'*'          SET UNKNOWN ROOM NUMBER\n         LA    R2,1                   R2: ROOM TEXT LENGTH\n         ST    R2,@SEG3L              SET LENGTH = 1\n*---------------------------------------------------------------------*\nLIST440  DS    0H                  ROOM NUMBER SET:\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  BUILD DISPLAY TEXT FOR MSGCLASS (IF APPLICABLE):             ****\n***********************************************************************\nLIST500  DS    0H                  SEE IF WE SHOULD LIST MSGCLASS:\n         MVC   @USERDAT,BLANKS        INIT A WORKAREA\n         LA    R2,1                   R2: MSGCLASS TEXT LENGTH\n         LA    R3,@USERDAT            R3: MSGCLASS TEXT\n         STM   R2,R3,@SEG4            SET IKJEFF02 INTERFACE\n         TM    @FLAG2,@F2MSGC+@F2OLDMS WAS MSGCLASS THERE ?\n         BZ    LIST540                NO: PRINT BLANKS\n         CLI   @OLDMSGC,C'*'          IS ASTERISK ?\n         BE    LIST540                YES: PRINT BLANKS\n*---------------------------------------------------------------------*\nLIST520  DS    0H                  LIST MSGCLASS:\n         LA    R3,@USERDAT            R3: MSGCLASS TEXT\n         MVC   0(11,R3),=C'MSGCLASS(*)' SET TEXT\n         MVC   9(1,R3),@OLDMSGC       SET MSGCLASS\n         LA    R2,11                  R2: MSGCLASS TEXT LENGTH\n         STM   R2,R3,@SEG4            SET IKJTSMSG INTERFACE\n*---------------------------------------------------------------------*\nLIST540  DS    0H                  MSGCLASS LIST FINISHED.\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  OUTPUT THE MESSAGE TEXT:                                     ****\n***********************************************************************\nLIST600  DS    0H                  SET MSGCLASS:\n         BAL   R14,PUTLINE            CALL MESSAGE GENERATOR\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n****  GET NEXT PDE (USERID) OR EXIT:                               ****\n***********************************************************************\nLIST700  DS    0H                  LOOK FOR NEXT PDE:\n         L     R8,PDENEXT             R8: NEXT PDE\n         N     R8,=X'00FFFFFF'        AND ADDRESS MASK\n         BNZ   LIST100                LOOP AND PROCESS NEXT PDE\n*---------------------------------------------------------------------*\nLIST720  DS    0H                  END OF USERID PDE'S:\n         XR    R15,R15                SET RC=0\n*        B     CLEANUP                END OF LIST\n*=====================================================================*\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** CSECT TERMINATION ***'\n***********************************************************************\n*****  FREEMAIN PDL AND PDE'S CREATED BY IKJPARSE:                *****\n***********************************************************************\nCLEANUP  DS    0H                  FREE UP PDL STORAGE:\n         L     R1,@PDLPTR             R1: PDL ADDRESS\n         LTR   R1,R1                  IS PDL STILL THERE ?\n         BZ    FREEMAIN               NO: DONT RELEASE STORAGE\n*---------------------------------------------------------------------*\n         IKJRLSA @PDLPTR              FREEMAIN PARSE ANSWER AREA\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n*****  RETURN TO TSO TMP:                                         *****\n***********************************************************************\nFREEMAIN DS    0H                  EXIT COMMAND-PROCESSOR:\n         L     R5,@RETCODE            SAVE RETURN-CODE\n         LR    R1,R13                 R1: GETMAINED AREA\n         L     R13,4(,R13)            R13: CALLER'S SAVEAREA\n         FREEMAIN R,LV=@WRKSIZE,A=(1) FREEMAIN WORKAREA\n         LR    R15,R5                 R15: RETURN-CODE\n         L     R14,12(,R13)           RESTORE RETURN REG\n         LM    R0,R12,20(R13)         RESTORE REST OF REGS\n         BR    R14                    RETURN TO TMP\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** RACF RETRIEVAL SUBROUTINE ***'\nRETRIEVE DS    0H                  INITIALIZE:\n***********************************************************************\n*                                                                     *\n* RETRIEVE SUBROUTINE:                                                *\n*    THIS SUBROUTINE RETRIEVES THE PGMRNAME ROOM AND MSGCLASS         *\n*    FOR THE USERID SPECIFIED IN @USERID.                             *\n*    THE STATUS OF THE DATA IS POSTED IN @FLAG2, AND THE DATA         *\n*    IS STORED IN @OLDNAME, @OLDROOM, AND @OLDMSGC.                   *\n*    IF A RACF ERROR CONDITION IS ENCOUNTERED, THEN AN ERROR MESSAGE  *\n*    IS SENT TO THE USER TERMINAL.                                    *\n*    REGISTERS R14-R5 ARE TRASHED.                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n****  RETRIEVE RACF USER PROFILE DATA:                             ****\n***********************************************************************\nRETR000  DS    0H                  INITIALIZE:\n         ST    R14,@LINKREG           SAVE R14 RETURN ADDRESS\n         MVI   @FLAG2,0               RESET RETRIEVAL FLAG\n         XC    @OLDNAME,@OLDNAME      RESET PROGRAMMER NAME\n         XC    @OLDROOM,@OLDROOM      RESET ROOM NUMBER\n         MVI   @OLDMSGC,0             RESET MSGCLASS\n*---------------------------------------------------------------------*\n         SPACE 1\n*---------------------------------------------------------------------*\nRETR100  DS    0H                  SETUP ICHEINTY LOCATE:\n         LA    R1,@LOCATE             R1: PLIST ADDRESS\n         MVC   0(@LOCATEL,R1),PLOCATE PREFORMAT MACRO PLIST\n         LA    R2,@RACBUFF            R2: WORKAREA ADDRESS\n         USING RACFAREA,R2            USE LOCAL DSECT\n         LA    R15,L'@RACBUFF         R15: LENGTH OF WORKAREA\n         ST    R15,RACALENG           SAVE RACF BUFFER SIZE\n         XC    RACCNTL,RACCNTL        RESET CONTROL AREAS\n         LA    R3,@USERID             R3: USERID AREA\n         DROP  R2                     DROP RACFAREA MAP\n*---------------------------------------------------------------------*\nRETR120  DS    0H                  ISSUE ICHEINTY CALL:\n         ICHEINTY LOCATE,TYPE='USR',  RETRIEVE RACF DATA:              X\n               WKAREA=(R2),           - ANSWER AREA                    X\n               ENTRY=(R3),            - USERID AREA                    X\n               MF=(E,(1))             - EXECUTE REMOTE PLIST\n*---------------------------------------------------------------------*\nRETR140  DS    0H                  CHECK ICHEINTY RETURN-CODE\n         LTR   R15,R15                WAS RACF MANAGER CALL GOOD ?\n         BZ    RETR400                YES: SET POINTERS\n         CH    R15,=H'12'             WAS USER NOT FOUND ?\n         BE    RETR200                YES: LET CALLER HANDLE IT\n         B     RETR300                NO: WE HAVE CRITICAL ERROR\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  USERID NOT DEFINED TO RACF:                                  ****\n***********************************************************************\nRETR200  DS    0H                  USERID NOT DEFINED:\n         ST    R15,@FWORD             SAVE RETURN-CODE\n         XR    R2,R2                  RESET R2\n         ST    R2,@PTRNAME            RESET NAME ADDRESS\n         ST    R2,@PTRROOM            RESET ROOM ADDRESS\n         ST    R2,@PTRMSGC            RESET MSGC ADDRESS\n         MVC   MTMSGID,=C'M070'       SET MESSAGE ID CODE\n         IC    R2,@USERIDL            R2: USERID TEXT LENGTH\n         LA    R3,@USERIDN            R3: USERID TEXT\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         BAL   R14,PUTLINE            ISSUE PUTLINE\n         L     R15,@FWORD             RESTORE RETURN-CODE\n         B     RETR900                RETURN WITH RC\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  CRITICAL RACF ERROR ENCOUNTERED:                             ****\n***********************************************************************\nRETR300  DS    0H                  RACF MANAGER ERROR:\n         ST    R15,@RETCODE           SAVE RETURN-CODE\n         ST    R0,@FWORD              SAVE REASON-CODE\n         MVC   MTMSGID,=C'M071'       SET MESSAGE ID CODE\n         OI    MTSW1,MTHEXSW          INDIC TRANSLATE TO HEXEBCDIC\n         LA    R2,1                   R2: RETURN-CODE LENGTH\n         LA    R3,@RETCODE+3          R3: RETURN-CODE ADDRESS\n         STM   R2,R3,@SEG1            SET IKJTSMSG INTERFACE\n         OI    @SEG1L,X'80'           INDIC TRANSLATE REQUIRED\n         LA    R2,1                   R2: REASON-CODE LENGTH\n         LA    R3,@FWORD+3            R3: REASON-CODE ADDRESS\n         STM   R2,R3,@SEG2            SET IKJTSMSG INTERFACE\n         OI    @SEG2L,X'80'           INDIC TRANSLATE REQUIRED\n         IC    R2,@USERIDL            R2: USERID TEXT LENGTH\n         LA    R3,@USERIDN            R3: USERID TEXT\n         STM   R2,R3,@SEG3            SET IKJTSMSG INTERFACE\n         BAL   R14,PUTLINE            ISSUE PUTLINE\n         L     R15,@RETCODE           RESTORE RETURN-CODE\n         B     RETR900                EXIT\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  RACF CALL WAS SUCCESSFUL:                                    ****\n***********************************************************************\nRETR400  DS    0H                  ICHEINTY SUCCESSFUL:\n         LA    R2,@RACBUFF            R2: WORKAREA ADDRESS\n         USING RACFAREA,R2            USE LOCAL DSECT\n         LA    R2,RACDATA             R2: RACF DATA AREA\n         DROP  R2                     DROP RACFAREA MAP\n         XR    R3,R3                  RESET R3\n*---------------------------------------------------------------------*\nRETR420  DS    0H                  SET UNIT POINTER ADDRESSES:\n         ST    R2,@PTRNAME            SET NAME ADDRESS\n         ICM   R3,B'0011',0(R2)       R3: LENGTH OF NAME FIELD\n         LA    R2,2(R3,R2)            R2: ADDRESS OF ROOM SEGMENT\n         ST    R2,@PTRROOM            SET ROOM ADDRESS\n         ICM   R3,B'0011',0(R2)       R3: LENGTH OF ROOM FIELD\n         LA    R2,2(R3,R2)            R2: ADDRESS OF MSGC SEGMENT\n         ST    R2,@PTRMSGC            SET MSGC ADDRESS\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  EXTRACT PROGRAMMER NAME FIELD:                               ****\n***********************************************************************\nRETR500  DS    0H                  INTERPRET PROGRAMMER DATA\n         L     R4,@PTRNAME            R4: RETRIEVED PGMRNAME\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         LA    R4,2(,R4)              R4: POINTS TO DATA\n         LA    R2,@OLDNAME            R2: MVCL TARGET ADDR\n         LA    R3,L'@OLDNAME          R3: MVCL TARGET SIZE\n         ICM   R5,B'1000',BLANKS      SET FILL CHARACTER\n         MVCL  R2,R4                  MOVE PROGRAMMER NAME FIELD\n         OI    @FLAG2,@F2NAME         INDIC NAME RETRIEVED\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  EXTRACT ROOM NUMBER:                                         ****\n***********************************************************************\nRETR600  DS    0H                  INTERPRET ROOM NUMBER DATA\n         XC    @OLDROOM,@OLDROOM      RESET ROOM NUMBER\n         L     R4,@PTRROOM            R4: RETRIEVED SEGMENT\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         LA    R4,2(,R4)              R4: POINT TO SEGMENT DATA\n         CH    R5,=H'10'              WAS SEGMENT RETRIEVED ?\n         BL    RETR640                NO: DONT SET @OLDROOM\n         CLC   0(8,R4),ROOMKEY        KEY MATCH ?\n         BNE   RETR640                NO: DONT SET @OLDROOM\n*---------------------------------------------------------------------*\nRETR620  DS    0H                  SET THE ROOM NUMBER:\n         LA    R4,8(,R4)              R4: SKIP PAST KEY\n         XR    R5,R5                  RESET R5\n         IC    R5,0(,R4)              R5: LENGTH OF 'ROOM'\n         LA    R4,1(,R4)              R4: SKIP PAST LENGTH BYTE\n         LA    R2,@OLDROOM            R2: MVCL TARGET ADDR\n         LA    R3,L'@OLDROOM          R3: MVCL TARGET SIZE\n         ICM   R5,B'1000',BLANKS      SET FILL CHAR\n         MVCL  R2,R4                  SET ROOM NUMBER\n         OI    @FLAG2,@F2ROOM         INDIC ROOM SEG RETRIEVED\n*---------------------------------------------------------------------*\nRETR640  DS    0H                  ROOM NUMBER DATA HAS BEEN CHECKED\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  EXTRACT MSGCLASS:                                            ****\n***********************************************************************\nRETR700  DS    0H                  INTERPRET MSGCLASS DATA\n         XC    @OLDMSGC,@OLDMSGC      RESET MSGCLASS\n         L     R4,@PTRMSGC            R4: RETRIEVED SEGMENT\n         XR    R5,R5                  RESET R5\n         ICM   R5,B'0011',0(R4)       R5: LENGTH OF DATA\n         LA    R4,2(,R4)              R4: POINT TO SEGMENT DATA\n         CH    R5,=H'10'              WAS SEGMENT RETRIEVED ?\n         BL    RETR740                NO: DONT SET @OLDMSGC\n         CLC   0(8,R4),MSGCKEY        KEY MATCH ?\n         BNE   RETR740                NO: DONT SET @OLDMSGC\n         LA    R4,8(,R4)              R4: SKIP PAST KEY\n         CLI   0(R4),0                DOES USRDATA HAVE ANY LENGTH ?\n         BNH   RETR740                NO: DONT SET @OLDMSGC\n*---------------------------------------------------------------------*\nRETR720  DS    0H                  SET MSGCLASS DATA:\n         MVC   @OLDMSGC,1(R4)         YES: SET MSGCLASS VALUE\n         OI    @FLAG2,@F2MSGC         INDIC MSGCLASS SEG RETRIEVED\n*---------------------------------------------------------------------*\nRETR740  DS    0H                  MSGCLASS DATA HAS BEEN CHECKED\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  EXTRACT MSGCLASS:                                            ****\n***********************************************************************\nRETR760  DS    0H                  CHECK FOR OLD-STYLE MSGCLASS:\n         TM    @FLAG2,@F2MSGC         MSGCLASS SEG RETRIEVED ?\n         BO    RETR780                YES: DONT OVERLAY IT\n         TM    @FLAG2,@F2ROOM         WAS ROOM SEG RETRIEVED ?\n         BNO   RETR780                NO:  OLD-STYLE NOT THERE EITHER\n         L     R4,@PTRROOM            R4: RETRIEVED ROOM SEGMENT\n         LA    R4,8(,R4)              R4: SKIP PAST KEY\n         XR    R5,R5                  RESET R5\n         IC    R5,0(,R4)              R5: LENGTH OF ROOM NUMBER\n         LA    R4,1(R5,R4)            R4: SKIP TO FLAG BYTE\n         CLI   0(R4),0                FLAG BYTE ZERO ?\n         BE    RETR780                YES: DONT SET @OLDMSGC\n         CLI   0(R4),C'*'             IS ASTERISK ?\n         BE    RETR780                YES: DONT SET @OLDMSGC\n*---------------------------------------------------------------------*\nRETR770  DS    0H                  USE OLD-STYLE MSGCLASS:\n         MVC   @OLDMSGC(1),0(R4)      NO: SET CLASS\n         OI    @FLAG2,@F2OLDMS        INDIC OLD-STYLE MSGCLASS\n*---------------------------------------------------------------------*\nRETR780  DS    0H                  OLD-STYLE MSGCLASS CHECKED:\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  EXTRACT PROCESSING COMPLETE:                                 ****\n***********************************************************************\nRETR800  DS    0H                  END OF PROFILE DATA EXTRACT:\n         XR    R15,R15                SET RC=0\n*        B     RETR900                RETURN\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n****  RETURN TO CALLER:                                            ****\n***********************************************************************\nRETR900  DS    0H                  RETURN TO CALLER:\n         L     R14,@LINKREG           R14: CALLERS RETURN ADDRESS\n         BR    R14                    RETURN WITH RC\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** TSO PUTLINE SUBROUTINE ***'\nPUTLINE  DS    0H                  CALL IKJEFF02:\n***********************************************************************\n*                                                                     *\n* PUTLINE SUBROUTINE:                                                 *\n*                                                                     *\n*   THIS ROUTINE INTERFACES TO IKJEFF02, THE MESSAGE GENERATOR.       *\n*   THE IKJTSFMT PARAMETER BLOCK IS ASSUMED TO BE FORMATTED.          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n****  PUTLINE SUBROUTINE:                                          ****\n***********************************************************************\nPUTL000  DS    0H                  SAVE RETURN REG:\n         ST    R14,@PUTLREG           SAVE RETURN ADDRESS\n*---------------------------------------------------------------------*\nPUTL100  DS    0H                  FIND IKJEFF02 EPA:\n         L     R15,CVTPTR             R15: CVT ADDRESS\n         L     R15,CVTTVT-CVT(,R15)   R15: TSVT ADDRESS\n         LTR   R15,R15                TSO/E ?\n         BZ    PUTL400                NO: GO EXIT\n         L     R15,TSVTEF02-TSVT(,R15) IKJEFF02 EPA\n         LTR   R15,R15                TSO/E ?\n         BZ    PUTL400                NO: EXIT\n*---------------------------------------------------------------------*\nPUTL200  DS    0H                  CALL IKJEFF02:\n         LA    R1,MTPARML             R1: IKJEFF02 PARM LIST\n         SYNCH (15),AMODE=DEFINED     CALL IKJEFF02                003\n*---------------------------------------------------------------------*\nPUTL400  DS    0H                  RETURN TO CALLER:\n         L     R14,@PUTLREG           RESTORE R14\n         BR    R14                    RETURN TO CALLER\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** STATIC WORKING-STORAGE ***'\n***********************************************************************\n*****  STATIC WORKING STORAGE AREA                                *****\n***********************************************************************\n         LTORG ,\n*---------------------------------------------------------------------*\nBLANKS   DC    CL16' '\nTRANHEX  DC    CL16'0123456789ABCDEF'\n*---------------------------------------------------------------------*\nDUMMYUID DC    C'*'                   DUMMY USERID\n         DS    0F\nDUMMYPDE DS    0XL12                  DUMMY PDE:\n         DC    A(DUMMYUID)            - ADDRESS OF DATA\n         DC    AL2(1)                 - LENGTH OF DATA\n         DC    BL1'10000000'          - FLAG BYTE\n         DC    XL1'00'                - (RESERVED)\n         DC    A(0)                   - NO MORE PDE'S IN CHAIN\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n* RACHECK Parameter List Prototype:                                   *\n***********************************************************************\nPRACH    RACHECK MF=L,                RACHECK PLIST PROTOTYPE:         X\n               ENTITY=(RACFENT),      - ENTITY NAME 'SETUSER',         X\n               CLASS='$APPL',         - RESOURCE CLASS '$APPL          X\n               ATTR=READ              - INITIALIZE FOR READ ACCESS\n         DS    0F\nRACFENT  DC    CL8'SETUSER'           RACHECK ENTITY NAME\n*---------------------------------------------------------------------*\n         SPACE 2\n***********************************************************************\n* ICHEINTY LOCATE PLIST PROTOTYPE:                                    *\n***********************************************************************\nPLOCATE  ICHEINTY LOCATE,MF=L,                                         X\n               ENTRY=R2,                                               X\n               WKAREA=R3,                                              X\n               FLDEF=LOCLIST\n*---------------------------------------------------------------------*\nLOCLIST  ICHEINTY FLDEF,MF=L,                                          X\n               ACTIONS=(GETNAME,                                       X\n               GETROOM,                                                X\n               GETMSGC)\n*---------------------------------------------------------------------*\nGETNAME  ICHEACTN FIELD=PGMRNAME\n*---------------------------------------------------------------------*\nGETROOM  ICHEACTN FIELD=USERDATA,TESTS=(OLDROOM)\n*---------------------------------------------------------------------*\nOLDROOM  ICHETEST FIELD=USRNM,FLDATA=(8,ROOMKEY),COND=EQ\nROOMKEY  DC    CL8'ROOM'\n*---------------------------------------------------------------------*\nGETMSGC  ICHEACTN FIELD=USERDATA,TESTS=(OLDMSGC)\n*---------------------------------------------------------------------*\nOLDMSGC  ICHETEST FIELD=USRNM,FLDATA=(8,MSGCKEY),COND=EQ\nMSGCKEY  DC    CL8'MSGCLASS'\n*---------------------------------------------------------------------*\nPALTER   ICHEINTY ALTER,MF=L,                                          X\n               TYPE='USR',                                             X\n               ENTRY=R2,                                               X\n               ACTIONS=(R3)\n*---------------------------------------------------------------------*\nACTNAME  ICHEACTN FIELD=PGMRNAME,FLDATA=(20,R2)\n*---------------------------------------------------------------------*\nACTSEGM  ICHEACTN FIELD=USERDATA,FLDATA=(20,R2)\n*---------------------------------------------------------------------*\nTSTSEGM  ICHETEST FIELD=USRNM,FLDATA=(8,R2),COND=EQ\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  MESSAGE TEXTS:                                               ****\n***********************************************************************\nMSG10    DS    0H\n         DC    AL2(MSG10L)\n         DC    AL2(0)\n         DC    C'SETUSER-10: '\n         DC    C'SYSTEM ERROR - TSO/E IS NOT INSTALLED.'\nMSG10L   EQU   *-MSG10\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** DYNAMIC WORKING-STORAGE ***'\n***********************************************************************\n*****  DYNAMIC WORKING STORAGE AREA                               *****\n***********************************************************************\n@WRKAREA DSECT ,\n@SAVE0   DS    9D                     RESERVE SAVEAREA\n@SAVE1   DS    9D                     RESERVE SAVEAREA\n*---------------------------------------------------------------------*\n@RETCODE DS    F                       MAXIMUM RETURN-CODE\n@LINKREG DS    A                       SUBROUTINE RETURN LINKAGE\n@PUTLREG DS    A                       SUBROUTINE RETURN LINKAGE\n@ECBTSO  DS    F                       ECB FOR TSO ROUTINES\n@PDLPTR  DS    F                       ADDR OF PARSE ANSWER\n*---------------------------------------------------------------------*\n@PTRNAME DS    A                       PGMRNAME FIELD FROM RACF\n@PTRROOM DS    A                       ROOM USERDATA FIELD FROM RACF\n@PTRMSGC DS    A                       MSGCLASS FIELD FROM RACF\n*---------------------------------------------------------------------*\n@FWORD   DS    F                      (WORK)\n@DWORD   DS    D                      (WORK)\n*---------------------------------------------------------------------*\n         DS    0F\n@PPL     DS    CL28                    IKJPPL AREA\n*---------------------------------------------------------------------*\n@TSOUID  DS    0CL9                   ISSUER'S TSO USERID:\n@TSOUIDL DC    AL1(0)                 - LENGTH\n@TSOUIDN DC    CL8' '                 - USERID\n*---------------------------------------------------------------------*\n@FLAG1   DS    XL1'00'                TSO COMMAND REQUEST FLAGS:\n@F1OTHER EQU   B'10000000'            - REQUEST FOR NON-SELF\n@F1MULTI EQU   B'01000000'            - REQUEST FOR MULTIPLE ID'S\n@F1NAME  EQU   B'00100000'            - ALTER PGMRNAME FIELD\n@F1ROOM  EQU   B'00010000'            - ALTER THE ROOM NUMBER\n@F1MSGC  EQU   B'00001000'            - ALTER THE MSGCLASS\n@F1UPDAT EQU   B'00111000'            - (ANY) AN UPDATE IS REQUESTED\n*---------------------------------------------------------------------*\n@FLAG2   DS    XL1'00'                OLD STATUS FLAGS:\n@F2NAME  EQU   B'10000000'            - PGMRNAME FIELD EXISTED\n@F2ROOM  EQU   B'01000000'            - ROOM SEGMENT EXISTED\n@F2MSGC  EQU   B'00100000'            - MSGCLASS SEGMENT EXISTED\n@F2OLDMS EQU   B'00010000'            - OLD-STYLE MSGCLASS IN USE\n*---------------------------------------------------------------------*\n         DS    0D                  EXTRACTED INFORMATION FROM RACF:\n@OLDNAME DC    CL20' '                (PGMRNAME) FIELD\n@OLDROOM DC    CL4' '                 (USRDATA) ROOM NUMBER\n@OLDMSGC DC    CL1' '                 (USRDATA) MSGCLASS\n*---------------------------------------------------------------------*\n         DS    0D                  REQUESTED UPDATES FROM TSO USER:\n@REQNAME DC    CL20' '                (PGMRNAME) FIELD\n@REQROOM DC    CL4' '                 (USRDATA) ROOM NUMBER\n@REQMSGC DC    CL1' '                 (USRDATA) MSGCLASS\n*---------------------------------------------------------------------*\n@USERID  DS    0CL9                OBJECT TSO USERID: (THE VICTIM)\n@USERIDL DC    AL1(0)                 - LENGTH\n@USERIDN DC    CL8' '                 - USERID\n*---------------------------------------------------------------------*\n@USERDAT DS    0CL14               RESULTANT UPDATES TO RACF:\n@USRNM   DC    CL8' '                 (PGMRNAME) FIELD\n@USRDATA DC    CL5' '                 (USRDATA) ROOM NUMBER\n@USRFLAG DC    XL1'00'                (USRFLAG) FLAG\n*---------------------------------------------------------------------*\n         EJECT ,\n*---------------------------------------------------------------------*\n         DS    0D\n         IKJEFFMT MTFORMAT=NEW\n         ORG   MTINSRTS               REMAP INSERT AREA\n@SEGAREA DS    0H                   WHOLE SEGMENT AREA:\n@SEG1    DS    0F                     1ST SEGMENT INSERT:\n@SEG1L   DS    A                      - LENGTH OF SEGMENT INSERT\n@SEG1A   DS    A                      - ADDRESS OF SEGMENT INSERT\n@SEG2    DS    0F                     2ND SEGMENT INSERT:\n@SEG2L   DS    A                      - LENGTH OF SEGMENT INSERT\n@SEG2A   DS    A                      - ADDRESS OF SEGMENT INSERT\n@SEG3    DS    0F                     3RD SEGMENT INSERT:\n@SEG3L   DS    A                      - LENGTH OF SEGMENT INSERT\n@SEG3A   DS    A                      - ADDRESS OF SEGMENT INSERT\n@SEG4    DS    0F                     4TH SEGMENT INSERT:\n@SEG4L   DS    A                      - LENGTH OF SEGMENT INSERT\n@SEG4A   DS    A                      - ADDRESS OF SEGMENT INSERT\n@SEG5    DS    0F                     5TH SEGMENT INSERT:\n@SEG5L   DS    A                      - LENGTH OF SEGMENT INSERT\n@SEG5A   DS    A                      - ADDRESS OF SEGMENT INSERT\n@SEGSIZE EQU   *-@SEGAREA             LENGTH OF SEGMENTS\n         ORG   ,                      RESUME MAPPING\n*---------------------------------------------------------------------*\n***********************************************************************\n****  START OF OVERLAY STORAGE AREA:                               ****\n***********************************************************************\n@OVERLAY DS    0D\n*---------------------------------------------------------------------*\n@WTOBUFF DS    0CL256                  PUTLINE MESSAGE BUFFER\n@WTOLL   DS    H\n@WTOZZ   DS    H\n@WTODATA DS    CL252\n*---------------------------------------------------------------------*\n         ORG   @OVERLAY\n@RACH    RACHECK ENTITY=(R2),CLASS=R3,ATTR=READ,MF=L\n@RACHL   EQU   *-@RACH\n         ORG   ,\n*---------------------------------------------------------------------*\n         ORG   @OVERLAY\n@LOCATE  ICHEINTY LOCATE,TYPE='USR',  RETRIVE USER PROFILE DATA        X\n               WKAREA=R2,             (R2) ADDR OF ANSWER AREA         X\n               ENTRY=R3,              (R3) ADDR OF USERID AREA         X\n               FLDEF=R4,              (R4,R5) 2ND-LEVEL PLISTS         X\n               MF=L                   THIS IS A LIST-FORMAT\n@LOCATEL EQU   *-@LOCATE\n         DS    0D\n@RACBUFF DS    CL1024                 RACF BUFFER AREA\n         ORG   ,\n*---------------------------------------------------------------------*\n         ORG   @OVERLAY\n@ALTER   ICHEINTY ALTER,TYPE='USR',  RETRIVE USER PROFILE DATA         X\n               ENTRY=R3,              (R3) ADDR OF USERID AREA         X\n               ACTIONS=(R4),          (R4) 2ND-LEVEL PLISTS            X\n               MF=L                   THIS IS A LIST-FORMAT\n@ALTERL  EQU   *-@ALTER\n*---------------------------------------------------------------------*\n@ACTION  ICHEACTN FIELD=USERDATA,FLDATA=(R2,R3),TESTS=(R4),MF=L\n@ACTIONL EQU   *-@ACTION\n*---------------------------------------------------------------------*\n@TEST    ICHETEST FIELD=USRNM,FLDATA=(14,R2),COND=EQ,MF=L\n@TESTL   EQU   *-@TEST\n         ORG   ,\n*---------------------------------------------------------------------*\n@WRKEND  DS    0D                     END OF @WRKAREA\n@WRKSIZE EQU   @WRKEND-@WRKAREA       LENGTH OF @WRKAREA\n*---------------------------------------------------------------------*\n         PUSH  PRINT                  - SAVE PRINT OPTIONS STATUS\n         PRINT NOGEN                  - SUPPRESS MACRO EXPANSIONS\n         POP   PRINT\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** IKJPARSE PARM CSECT/DSECT ***'\nSETUSER  CSECT ,\n***********************************************************************\n*  IKJPARSE CSECT/DSECT AREA:                                         *\n*                                                                     *\n*  The following IKJPARM specification will kick-off the generation   *\n*  of the SETUPCL CSECT and the SETUPDL DSECT.  The CSECT tells       *\n*  IKJPARS what we want, and IKJPARS tells us what we got via the     *\n*  DSECT.  This information is passed via the Parse Parameter List,   *\n*  or the PPL.                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n*---------------------------------------------------------------------*\nSETUPCL  IKJPARM DSECT=SETUPDL\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  The USERID Keyword:                                                *\n*                                                                     *\n*  The following IKJKEYWD specification tells IKJPARS that we are     *\n*  looking for the keyword 'USERID', and it has some subfields.       *\n*  Label PDLKUID resides in the DSECT, where PARSE will tell us       *\n*  whether the USERID keyword was specified.  Label PCLKUID resides   *\n*  in the CSECT, and defines everything that will be in between the   *\n*  parentheses of USERID(.....).                                      *\n*                                                                     *\n***********************************************************************\nPDLKUID  IKJKEYWD ,\n*---------------------------------------------------------------------*\n         IKJNAME 'USERID',SUBFLD=PCLKUID\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  The NAME Keyword:                                                  *\n*                                                                     *\n*  The following IKJKEYWD specification tells IKJPARS that we are     *\n*  looking for the keyword 'NAME', and it has some subfields.         *\n*  We will also accept PROGRAMMERNAME or PGMRNAME as synonyms for     *\n*  NAME.  Label PDLKNAM resides in the DSECT, where PARSE will tell   *\n*  us whether the NAME keyword was specified.    Label PCLKNAM        *\n*  resides in the CSECT, and defines everything that will be in       *\n*  between the parentheses of NAME(.....).                            *\n*                                                                     *\n***********************************************************************\nPDLKNAM  IKJKEYWD ,\n*---------------------------------------------------------------------*\n         IKJNAME 'NAME',ALIAS=('PROGRAMMERNAME','PGMRNAME'),           X\n               SUBFLD=PCLKNAM\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  The ROOM Keyword:                                                  *\n*                                                                     *\n*  The following IKJKEYWD specification tells IKJPARS that we are     *\n*  looking for the keyword 'ROOMNUMBER', and it has some subfields.   *\n*  Label PDLKROM resides in the DSECT, where PARSE will tell us       *\n*  whether the USERID keyword was specified.  Label PCLKROM resides   *\n*  in the CSECT, and defines everything that will be in between the   *\n*  parentheses of ROOMNUMBER(.....).                                  *\n*                                                                     *\n***********************************************************************\nPDLKROM  IKJKEYWD ,\n*---------------------------------------------------------------------*\n         IKJNAME 'ROOMNUMBER',SUBFLD=PCLKROM\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  The MSGCLASS Keyword:                                              *\n*                                                                     *\n*  The following IKJKEYWD specification tells IKJPARS that we are     *\n*  looking for the keyword 'MSGCLASS', and it has some subfields.     *\n*  We will also accept SYSOUTCLASS as a synonym for MSGCLASS. Label   *\n*  PDLKMSG resides in the DSECT, where PARSE will tell us whether     *\n*  the MSGCLASS keyword was specified.  Label PCLKMSG resides in the  *\n*  CSECT, and defines everything that will be in between the          *\n*  parentheses of MSGCLASS(.....).                                    *\n*                                                                     *\n***********************************************************************\nPDLKMSG  IKJKEYWD ,\n*---------------------------------------------------------------------*\n         IKJNAME 'MSGCLASS',ALIAS=('SYSOUTCLASS'),                     X\n               SUBFLD=PCLKMSG\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  Contents of the USERID keyword:                                    *\n*  The following IKJSUBF and IKJIDENT macros determines the content   *\n*  of the USERID keyword.  PCLKUID is referenced by the IKJNAME       *\n*  macro for USERID via the SUBFLD, and resides within the CSECT.     *\n*  The IKJIDENT defines what the subfield information is to look      *\n*  like.  Label PDLLUID represents the PDE that will be returned by   *\n*  PARSE.  The format of the 3-word PDE is described by our own PDE   *\n*  dsect.  Through the PDE's, we will obtain the actual string of     *\n*  USERID's specified from the issuer's command text.  If the USERID  *\n*  parameter contains no data, then PARSE will stuff an asterisk (*)  *\n*  for the parameter subfield value.                                  *\n***********************************************************************\nPCLKUID  IKJSUBF\nPDLLUID  IKJIDENT 'USERID',LIST,                                       X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                X\n               ASTERISK,DEFAULT='*',                                   X\n               HELP=('You must have RACF SPECIAL and/or OPERATIONS authX\n               ority to access user profiles other than your own.')\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  Contents of the NAME keyword:                                      *\n*  The following IKJSUBF and IKJIDENT macros determines the content   *\n*  of the NAME keyword.  PCLKNAM is referenced by the IKJNAME         *\n*  macro for NAME via the SUBFLD, and resides within the CSECT.       *\n*  The IKJIDENT defines what the subfield information is to look      *\n*  like.  Label PDLLNAM represents the PDE that will be returned by   *\n*  PARSE.  The format of the 3-word PDE is described by our own PDE   *\n*  DSECT.  Through the PDE's, we will obtain the actual content of    *\n*  NAME as specified from the issuer's command text.  If the NAME     *\n*  parameter contained no data, then PARSE will stuff an asterisk (*) *\n*  for the parameter subfield value.                                  *\n***********************************************************************\nPCLKNAM  IKJSUBF\nPDLLNAM  IKJIDENT 'NAME',UPPERCASE,ASTERISK,MAXLNTH=20,                X\n               DEFAULT='*',CHAR,FIRST=ANY,OTHER=ANY,                   X\n               HELP=('20-char PROGRAMMER-NAME field for TSU/STC jobs.')\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  Contents of the ROOMNUMBER keyword:                                *\n*  The following IKJSUBF and IKJIDENT macros determines the content   *\n*  of the ROOMNUMBER keyword.  PCLKROM is referenced by the IKJNAME   *\n*  macro for ROOMNUMBER via the SUBFLD, and resides within the        *\n*  CSECT.  The IKJIDENT defines what the subfield information is to   *\n*  look like.  Label PDLLROM represents the PDE that will be          *\n*  returned by PARSE.  The format of the 3-word PDE is described by   *\n*  our own PDE DSECT.  Through the PDE's, we will obtain the actual   *\n*  content of ROOMNUMBER as specified from the issuer's command       *\n*  text.  If the ROOMNUMBER parameter was specified, but contained    *\n*  no data, then PARSE will stuff an asterisk (*) for the parameter   *\n*  subfield value.                                                    *\n***********************************************************************\nPCLKROM  IKJSUBF\nPDLLROM  IKJIDENT 'ROOM-NUMBER',UPPERCASE,ASTERISK,MAXLNTH=4,          X\n               FIRST=ALPHANUM,OTHER=ALPHANUM,DEFAULT='*',              X\n               HELP=('Your 4-char room number or floor.')\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  Contents of the MSGCLASS keyword:                                  *\n*  The following IKJSUBF and IKJIDENT macros determines the content   *\n*  of the MSGCLASS keyword.    PCLKMSG is referenced by the IKJNAME   *\n*  macro for MSGCLASS via the SUBFLD, and resides within the          *\n*  CSECT.  The IKJIDENT defines what the subfield information is to   *\n*  look like.  Label PDLLMSG represents the PDE that will be          *\n*  returned by PARSE.  The format of the 2-word PDE is described by   *\n*  our own PDE DSECT.  Through the PDE's, we will obtain the actual   *\n*  content of MSGCLASS as specified from the issuer's command         *\n*  text.  If the MSGCLASS parameter was specified, but contained      *\n*  no data, then PARSE will stuff an asterisk (*) for the parameter   *\n*  subfield value.                                                    *\n***********************************************************************\nPCLKMSG  IKJSUBF\nPDLLMSG  IKJIDENT 'MSGCLASS',UPPERCASE,ASTERISK,MAXLNTH=1,             X\n               FIRST=ALPHANUM,DEFAULT='*',                             X\n               HELP=('The MSGCLASS must be a valid sysout class.')\n*=====================================================================*\n         EJECT ,\n***********************************************************************\n*  IKJENDP Macro:                                                     *\n*                                                                     *\n*  This determines the end of the SETUPCL CSECT and the SETUPDL       *\n*  DSECT.                                                             *\n*                                                                     *\n***********************************************************************\n         IKJENDP\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** IKJTSMSG CSECT ***'\n         EJECT\n***********************************************************************\n****  SETUMSG: MESSAGE CSECT                                       ****\n***********************************************************************\nSETUMSG  CSECT ,\n*---------------------------------------------------------------------*\nMSG11    IKJTSMSG ('SETUSER-11: Error in PARSE serfice routine, RC=',  X\n               ,                      <---- (RETURN-CODE GOES HERE)    X\n               '.'),M011\n*---------------------------------------------------------------------*\nMSG12    IKJTSMSG ('SETUSER-12: Command must be issued via TSOEXEC whenX\n                invoked under ISPF.'),M012\n*---------------------------------------------------------------------*\nMSG31    IKJTSMSG ('SETUSER-31: Simultaneous update of multiple useridsX\n                is not supported.'),                                   X\n               M031\n*---------------------------------------------------------------------*\nMSG33    IKJTSMSG ('SETUSER-33: Userid ',                              X\n               ,                      <---- (USERID GOES HERE)         X\n               ' is not authorized to access other ID''S.'),           X\n               M033\n*---------------------------------------------------------------------*\nMSG34    IKJTSMSG ('SETUSER-34: Userid ',                              X\n               ,                      <---- (USERID GOES HERE)         X\n               ' is not authorized to update other ID''S.'),           X\n               M034\n*---------------------------------------------------------------------*\nMSG35    IKJTSMSG ('SETUSER-35: Userid ',                              X\n               ,                      <---- (USERID GOES HERE)         X\n               ' is not authorized to update MSGCLASS value.'),        X\n               M035\n*---------------------------------------------------------------------*\nMSG50    IKJTSMSG (' SETUSER  USERID(',                                X\n               ,                      <---- (USERID GOES HERE)         X\n               ')  NAME(''',                                           X\n               ,                      <---- (PGMRNAME GOES HERE)       X\n               ''')  ROOM(',                                           X\n               ,                      <---- (ROOM NUM GOES HERE)       X\n               ')  ',                                                  X\n               ,),                    <---- (MSGCLASS TEXT HERE)       X\n               M050\n*---------------------------------------------------------------------*\nMSG70    IKJTSMSG ('SETUSER-70: User ',                                X\n               ,                      <---- (USERID GOES HERE)         X\n               ' is not defined to RACF.'),                            X\n               M070\n*---------------------------------------------------------------------*\nMSG71    IKJTSMSG ('SETUSER-71: RACF MGR Locate Call Error, RC=',      X\n               ,                      <---- (RETURN-CODE GOES HERE)    X\n               'Reason=',                                              X\n               ,                      <---- (REASON-CODE GOES HERE)    X\n               'for Userid=',                                          X\n               ,                      <---- (USERID GOES HERE)         X\n               '.'),M071\n*---------------------------------------------------------------------*\n         IKJTSMSG ,\n*=====================================================================*\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         TITLE 'SET RACF USER PROFILE FOR TSU/STC                      X\n               *** DSECTS ***'\n***********************************************************************\n*****  PDE:  A PARAMETER DESCRIPTOR ENTRY                         *****\n***********************************************************************\nPDE      DSECT ,\nPDEDATA  DS    A                      ADDRESS OF DATA\nPDELENG  DS    H                      LENGTH OF DATA\nPDEFLAG  DS    BL1                    FLAG BYTE\n         DS    XL1                    (RESERVED)\nPDENEXT  DS    A                      ADDR OF NEXT PDE IN CHAIN\n*---------------------------------------------------------------------*\n         SPACE 1\n***********************************************************************\n*****  SAVEAREA:                                                  *****\n***********************************************************************\nSAVEAREA DSECT ,\nSAVEWD1  DS    F                      PL/I WORD\nSAVELAST DS    A                      CALLER'S SAVEAREA\nSAVENEXT DS    A                      CALLEE'S SAVEAREA\nSAVER14  DS    F                      R14\nSAVER15  DS    F                      R15\nSAVER0   DS    F                      R0\nSAVER1   DS    F                      R1\nSAVER2   DS    F                      R2\nSAVER3   DS    F                      R3\nSAVER4   DS    F                      R4\nSAVER5   DS    F                      R5\nSAVER6   DS    F                      R6\nSAVER7   DS    F                      R7\nSAVER8   DS    F                      R8\nSAVER9   DS    F                      R9\nSAVER10  DS    F                      R10\nSAVER11  DS    F                      R11\nSAVER12  DS    F                      R12\n*---------------------------------------------------------------------*\n         EJECT ,\n***********************************************************************\n****  RACF WKAREA BUFFER:                                          ****\n***********************************************************************\nRACFAREA DSECT ,                   RETURNED DATA FROM ICHEINTY:\nRACALENG DS    A                      LENGTH OF BUFFER AREA\nRACCNTL  DS    0XL30                  RESET AREA\nRACRBA   DS    XL6\nRACFLG1  DS    BL1\nRACRSV1  DS    XL1\nRACDUPCT DS    A\nRACRSV2  DS    XL8\nRACRLENG DS    F                      LENGTH OF RETURNED DATA\nRACDATA  DS    0C                     AREA FOR RETURNED FIELDS\n*---------------------------------------------------------------------*\n         PRINT NOGEN\n***********************************************************************\n*****    TSO DSECTS:                                              *****\n***********************************************************************\n         IKJCPPL ,                     CPPL: SYS1.MACLIB\n         IKJPPL ,                      PPL:  SYS1.MACLIB\n         IKJTSVT ,                     TSVT: SYS1.MACLIB\n         SPACE 1\n***********************************************************************\n*****  OTHER SYSTEM DSECTS:                                       *****\n***********************************************************************\n         YREGS ,                      REGS: SYS1.MACLIB\n         IHAPSA DSECT=YES,LIST=YES    PSA:  SYS1.AMODGEN\n         IKJTCB DSECT=YES,LIST=YES    TCB:  SYS1.AMODGEN\n         IEZJSCB ,                    JSCB: SYS1.AMODGEN\n         CVT   DSECT=YES,LIST=YES     CVT:  SYS1.AMODGEN\n         IHAASCB DSECT=YES            ASCB: SYS1.AMODGEN\n         IHAASXB DSECT=YES            ASXB: SYS1.AMODGEN\n         IHAACEE ,                    ACEE: SYS1.MACLIB\n         SPACE 1\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETUSERH": {"ttr": 10246, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00N\\x00N\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "FILE013"}, "text": "***********************************************************************\n*                                                                     *\n* USERMOD:  MCMD007                                                   *\n* TITLE:    TSO-CP SETUSER: SET RACF USER PROFILE FOR TSU/STC         *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* SYSMOD TYPE:          HELP TEXT                                     *\n* TARGET ELEMENT NAME:  CMDLIB(SETUSER)                               *\n*                       HELP(SETUSER)                                 *\n* LEVEL:                                                              *\n*                                                                     *\n* VENDOR AND/OR COMPONENT:                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* ABSTRACT:                                                           *\n*    THE SETUSER COMMAND PROVIDES A MEANS (SIMILAR TO ALTUSER)        *\n*    TO UPDATE AND/OR LIST THE RACF USERID PROFILE ATTRIBUTES         *\n*    IN THE USERDATA FIELDS.                                          *\n*                                                                     *\n* REQUIRED SMP DDNAMES:                                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*  Change Log:                                                        *\n*  09/06/86  MKH  Initial Version                                  001*\n*  10/26/86  MKH  Rewrite Version                                  002*\n*  01/18/87  MKH  Fix ABEND0C4 due to AMODE problems.              003*\n*                                                                     *\n*---------------------------------------------------------------------*\n)F FUNCTION -\n     The SETUSER command changes the RACF user profile for fields\n     applicable for the automatic assignment of the sysout programmer\n     name field and room-number for TSO and started-task printout.\n     If no operands, or only the userid operand is specified, then\n     the associated userid attributes will be listed.\n     As with the ALTUSER command, the SETUSER command will allow you\n     to change your 20-character programmer name field.  You can also\n     specify a 4-character ROOM number.  In order to change userid's\n     other than your own, you must have SPECIAL authority, or have\n     UPDATE access to the SETUSER resource in the $APPL class.\n     If you have the AUDITOR attribute, then you can list any userid's\n     profile information.\n\n     NOTE:  When invoked under ISPF, the SETUSER command must be\n            issued via the TSOEXEC command.\n)X SYNTAX -\n     SETUSER         USERID('userid'/* ... )\n                     NAME('user-name')\n                     ROOM('room-numb')\n                     MSGCLASS('sysout-class')\n  REQUIRED - NONE\n  DEFAULTS - USERID(*)\n  ALIAS    - SETU\n)O OPERANDS -\n))USERID('userid'...) - Specifies the users for which the specified\n     attributes are to be modified.  If this parameter is omitted,\n     then the current userid is assumed.\n))NAME('user-name') - Specifies a new value for the user's name\n     field in the RACF data set.  The name may be from 1 to 20\n     alphameric, special, or national characters, the first of\n     which must be alphameric.  If special characters and/or\n     blanks are included, then the text must be enclosed within\n     quotes.\n))ROOM('room-numb') - Specifies a 1 to 4 character alphameric room\n     number to where your sysout will be delivered.  For TSO users,\n     this will be printed on the banner page of dynamically allocated\n     sysout datasets.  For started-task jobs, this will be printed\n     on the banner page for all sysout.   When ROOM(*) is specified,\n     the ROOM value is removed from the user profile.\n))MSGCLASS('sysout-class') - Specifies the sysout class for the job\n     log, jobjcl, and jobmsg output for started-task jobs.  If the\n     MSGCLASS is set for a TSO userid, then sysout for the TSO logon\n     will be generated, which is usually not too appropriate.\n     When MSGCLASS(*) is specified, the MSGCLASS value is removed.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETUSERS": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00/\\x00/\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "FILE013"}, "text": "++ USERMOD(MCMD007)  /*\n *********************************************************************\n *                                                                   *\n * USERMOD:  MCMD007                                                 *\n * TITLE:    TSO-CP SETUSER: SET RACF USER PGMRNAME ROOM MSGCLASS    *\n *                                                                   *\n *-------------------------------------------------------------------*\n *                                                                   *\n * SYSMOD TYPE:          SOURCE ASSEMBLY                             *\n * TARGET ELEMENT NAME:  CMDLIB(SETUSER)                             *\n *                       HELP(SETUSER)                               *\n * LEVEL:                                                            *\n *                                                                   *\n * VENDOR AND/OR COMPONENT:                                          *\n *                                                                   *\n *-------------------------------------------------------------------*\n *                                                                   *\n * ABSTRACT:                                                         *\n *    THE SETUSER COMMAND PROVIDES A MEANS (SIMILAR TO ALTUSER)      *\n *    TO UPDATE AND/OR LIST THE RACF USERID PROFILE ATTRIBUTES       *\n *    IN THE USERDATA FIELDS.                                        *\n *                                                                   *\n * REQUIRED SMP DDNAMES:                                             *\n *                                                                   *\n *-------------------------------------------------------------------*\n *                                                                   *\n * CHANGE LOG:                                                       *\n * 001  01/18/87  MKH  INITIAL VERSION                               *\n *                                                                   *\n *********************************************************************\n                                                                   */.\n++VER (Z038) FMID(USERMOD).\n++JCLIN.\n//MCMD007  JOB  (JCLIN,JOB)\n//CMDLIB   EXEC PGM=IEWL,PARM='RENT,REUS,REFR'\n//AUSERMOD DD   DSN=MVSSUPRT.Z038.AUSERMOD,DISP=SHR\n//SYSLMOD  DD   DSN=SYS1.CMDLIB,DISP=SHR\n//SYSLIN   DD   *\n   INCLUDE AUSERMOD(SETUSER)\n   ENTRY   SETUSER\n   ALIAS   SETU\n   SETCODE AC(1)\n NAME SETUSER(R)\n/*\n++SRC (SETUSER) TXLIB(USERSRC) DISTLIB(AUSERSRC).\n++MAC (SETUSER) TXLIB(USERMAC) DISTLIB(AUSERMAC)\n                SYSLIB(HELP) MALIAS(SETU).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STARTASK": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00j\\x00j\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "FILE013"}, "text": "***********************************************************************\n*                                                                     *\n* STARTASK MACRO:                                                     *\n*                                                                     *\n*     THIS MACRO IS A SHORT CUT DEFINITION FOR AN ENTRY IN THE RACF   *\n*     STARTED TASK NAME TABLE. VALID UP TO RACFV1R7                   *\n*                                                                     *\n*     OPERANDS:                                                       *\n*          &NAME   -  STARTED TASK JOBNAME                            *\n*          &USER   -  STARTED TASK RACF USERID.                       *\n*                     IF USER=* IS SPECIFIED OR DEFAULTED TO, THEN    *\n*                     THE USERID IS ASSUMED TO BE THE SAME AS THE     *\n*                     JOBNAME (&NAME)                                 *\n*          &GROUP  -  RACF CONNECT GROUP ASSOCIATED WITH THE          *\n*                     USERID'S (&USER'S) LOGON. DEFAULT=STARTASK.     *\n*                                                                     *\n*     NOTE:                                                           *\n*          THIS MACRO DOES NOT INCLUDE USE OF THE PRIVILEGED FLAGS.   *\n*          IF THEY ARE NEEDED IN THE FUTURE, THIS MACRO SHOULD BE     *\n*          UPGRADED ACCORDINGLY TO SET THESE BITS.                    *\n*                                                                     *\n***********************************************************************\n         MACRO\n&LABEL   STARTASK &NAME,&USER=*,&GROUP=STARTASK\n         LCLC  &C1\n&C1      SETC  '&NAME'.'        '\n&C1      SETC  '&C1'(1,8)\n         DC    CL8'&C1'                STARTED TASK NAME\n         AIF   ('&USER' EQ '*').UIDEF\n&C1      SETC  '&USER'.'        '\n&C1      SETC  '&C1'(1,8)\n.UIDEF   ANOP\n         DC    CL8'&C1'                STARTED TASK USERID\n&C1      SETC  '&GROUP'.'        '\n&C1      SETC  '&C1'(1,8)\n         DC    CL8'&C1'                STARTED TASK GROUPID\n         DC    XL8'0000000000000000'   PRIVILIGE FLAG & RESERVED BYTES\n*\n         MEXIT ,\n         MEND  ,\n***********************************************************************\n* IN-LINE MACRO ENDS HERE.                                            *\n***********************************************************************\n* THE RACF STARTED TASK TABLE ICHRIN03 BEGINS HERE                    *\n***********************************************************************\nICHRIN03 CSECT\nNUMENTS  EQU   ((ENDTABLE-BGNTABLE)/ENTLEN)    CALCULATE # OF ENTRIES\n         DC    AL2(NUMENTS+X'8000')\n*\nBGNTABLE EQU   *\n         STARTASK ADMPRINT             PRINT GDDM STUFF\n*\nENTLEN   EQU   *-BGNTABLE\n*\n         STARTASK ARTSINIT             UCC11 INIT\n         STARTASK CICSA                TEST CICS 'A'\n         STARTASK CICSB                PROD CICS 'B'\n         STARTASK CLRDMP               DUMP DATASET CLEARING TASK\n         STARTASK CMFXA                CMF MONITORING\n         STARTASK DBRCPROD             IMS 1.3 PRODUCTION DBRC\n         STARTASK DBRCTEST             IMS 1.3 TEST DBRC\n         STARTASK DLIPROD              IMS 1.3 DLI SAS\n         STARTASK DLITEST              IMS 1.3 DLI SAS\n         STARTASK DSPRINT              TSO PRINT FACILITY\n         STARTASK EREP                 IBM CE TASK\n         STARTASK EREPTSS,USER=EREP    IBM CE TASK\n         STARTASK FOCUS                FOCUS SU UPDATES\n         STARTASK HDRCART,USER=HEADER  DUMP CARTRIDGE TAPE HEADER\n         STARTASK HDR1600,USER=HEADER  DUMP 1600 BPI TAPE HEADER\n         STARTASK HDR3480,USER=HEADER  DUMP 3480 TAPE HEADER\n         STARTASK HDR6250,USER=HEADER  DUMP 6250 BPI TAPE HEADER\n         STARTASK H015                 HYPERCHANNEL\n         STARTASK ICOM                 UCC SMF WRITER\n         STARTASK IMFSS                PROD IMS MONITOR\n         STARTASK IMFSST               TEST IMS MONITOR\n         STARTASK IMSRDR               IMS INTERNAL READER JOB\n         STARTASK IMS80000             PROD IMS CONTROL REGION\n         STARTASK INIT                 INITIATORS\n         STARTASK IRLMPROC             DB2 IRLM ADDRESS SPACE\n         STARTASK JESA,USER=JES2       JES2 ALTERNATE \"A\"\n         STARTASK JESB,USER=JES2       JES2 ALTERNATE \"B\"\n         STARTASK JES2                 JES2\n         STARTASK LLA                  LINKLIST LOOKASIDE\n         STARTASK NCCF                 NETWORK STUFF\n         STARTASK NET                  VTAM, ETC.\n         STARTASK NPM                  NETWORK PERFORMANCE MONITOR\n         STARTASK OLTEP,USER=EREP      IBM CE TASK\n         STARTASK OLTEPU,USER=EREP     IBM CE TASK\n         STARTASK ROSBTAM,USER=ROSCOE  PRODUCTION ROSCOE BTAM\n         STARTASK ROSCOE,USER=ROSCOE   PRODUCTION ROSCOE VTAM\n         STARTASK SMFDUMP              DUMP THE SMF DATASETS\n         STARTASK STOPFOC,USER=FOCUS   STOP PROD FOCUS\n         STARTASK STOPTFOC,USER=FOCUS  STOP TEST FOCUS\n         STARTASK TESTFOC              TEST FOCUS SU UPDATES\n         STARTASK TESTIMS              TEST IMS CONTROL REGION\n         STARTASK TESTROS              TEST ROSCOE\n         STARTASK TMSINIT              UCC1 INIT\n         STARTASK TSO                  TSO\n         STARTASK TSSO                 STAND ALONE TSO SUBSYSTEM\n         STARTASK UCC7ONLN             UCC7 SCHEDULING SYSTEM\n         STARTASK VTAM                 VTAM\n         STARTASK X                    X\n         STARTASK XWTR                 EXTERNAL WRITER\n*\nENDTABLE EQU   *\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SUBEXIT": {"ttr": 10254, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02\\x16\\x02\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 534, "newlines": 534, "modlines": 0, "user": "FILE013"}, "text": "         PRINT NOGEN\nSUBX     TITLE 'SUBMIT EXIT FOR THE INSERTION OF RACF INFORMATION'\n*---------------------------------------------------------------------*\n*   R O S C O E  S U B M I T  E X I T                                 *\n*---------------------------------------------------------------------*\n* MODIFICATION HISTORY\n* GARY M. BOATMAN 7 AUG 84\n*  INSERT RACF USER INFORMATION DURING SUBMIT PROCESSING\n*  THIS ROUTINE OPERATES ON ALL JOBCARDS IN THE SUBMIT.\n*  JCL CARDS ENCOUNTERED AFTER ,DLM=  ARE SKIPPED UNTIL\n*  THE DELIMITER IS ENCOUNTERED.\n*  RACF CARD IS INSERTED AS THE LAST JOBCARD.  THIS VERSION IS NOT\n*  AFFECTED BY THE PRESENCE OF COMMENTS.\n*  RESTRICTIONS:\n*    JOB AND ,DLM=   FIRST CHARACTER MUST BE CODED PROIR TO CC 31\n*\n*\n* DAVE CALDWELL   5 OCT 86, BLUE CROSS OF WA/AK\n* ADDED BCWA STANDARDS : LABELS = BLUC00   CHECKS ACCOUNTING FIELD\n*                      : LABELS = BLUC01   CHECKS JOBNAME\n*                      : LABELS = BLUC02   CHECKS JOB CLASS\n*                      : LABELS = BLUC03   CHECKS JOB PRTY\n*                      : LABELS = BLUC04   CHECKS JOB TIME\n*\n*\n*        SUBEXIT ROSCOE SUBMIT USER EXIT                              *\n*                                                                     *\n*        AT ENTRY:                                                    *\n*              R1   --> PARMLIST (UXDSECT)                            *\n*              R14  --> RETURN ADDRESS                                *\n*              R15  --> ENTRY POINT                                   *\n*                                                                     *\n*        FOR INFORMATION ABOUT THE PARAMETERS                         *\n*        LIST UXDSECT MACROS EXIT=SUB                                 *\n*                                                                     *\n*        AT EXIT:                                                     *\n*              R15 = RETURN CODE (0 THRU 16)                          *\n*                                                                     *\n*        ATTRIBUTES: REENTRABLE                                       *\n*---------------------------------------------------------------------*\n*\n*---------------------------------------------------------------------*\n*        DSECT WORK AREA (REENTRANT)                                  *\n*---------------------------------------------------------------------*\n*\nSUBXWK   DSECT\nAJOBCRD  DS    A                       ADDRESS OF JCL CARD\nARACFCRD DS    A                       ADDRESS OF RACF CARD\nJOBCRD   DS    CL80                    JCL CARD\nRACFCRD  DS    CL80                    RACF CARD\nUSERID   EQU   RACFCRD+20\nSUBXLEN  EQU   (((*-SUBXWK+255)/256)*256)\n*\n         UXDSECT EXIT=SUB\n         IHAACEE\n         ROT\n         SCB\n         PCB\n*\nSUBEXIT  CSECT\n         UXENTER REG=(R12)\n         L     R11,0(R1)               R11 --> UXDSECT\n         USING UXDSECT,R11\n         L     R10,UXSCBADR            R10 --> SCB\n         USING SCB,R10\n*        CLC   SCBUSER1(12),=XL12'00'  ACFEXIT DATA SAVED ?\n*        BE    EXIT0                     NO CONTINUE PROCESSING\n         L     R9,UXPCBADR             R9  --> PCB\n         USING PCB,R9\n         L     R8,UXROTADR             R8  --> ROT\n         USING ROT,R8\n         L     R2,UXCODE               ADDRESS USER EXIT CODE\n         SR    R3,R3                   CLEAR REG 3\n         IC    R3,3(R2)                INSERT UXCODE VALUE\n         B     *+4(R3)                   AND BRANCH\n         B     INITL                   INITIAL CALL    (0)\n         B     NEXT                    NEXT RECORD     (4)\n         B     ERROR                   ERROR           (8)  *\n         B     LIBMAST                 OPEN LIB MASTER (12) *\n         B     ENDIP                   END INPUT       (16) *\n         B     LASTCALL                FINAL CALL      (20)\n         B     LASTCALL                SUBTASK ABORT   (24)\n*     \"*\" INDICATES NO ACTION TAKEN ON THESE CALLS\n*---------------------------------------------------------------------*\n*        INITIAL CALL  GETMAIN WORK AREA\n*---------------------------------------------------------------------*\n*\nINITL    XC    UXWKAREA(16),UXWKAREA   CLEAR USER WORK AREA\n         GETMAIN RC,LV=256\n         LTR   R15,R15                 CHECK RETURN CODE\n         BZ    INITL01                   OK\n         B     EXIT0\n*\nINITL01  DS    0H\n         ST    R1,UXWKAREA             SAVE GETMAIN ADDR IN UXWKAREA\n         B     EXIT0\n*---------------------------------------------------------------------*\n*        CALLS WITH NEXT RECORD                                       *\n*---------------------------------------------------------------------*\n*\nNEXT     DS    0H\n         L     R7,UXWKAREA             LOAD WORKAREA ADDRESS\n         USING SUBXWK,R7\n         LTR   R7,R7                   CORE OBTAINED ?\n         BZ    NOCORE                    NO\n         L     R1,UXSUBREC             R1 --> FIRST CARD\n         CLC   UXWKAREA+4(2),=X'0000'    IS THE DELIMITER INACTIVE\n         BE    NEXT01                    YES CONTINUE\n         CLC   0(2,R1),UXWKAREA+4      IS CC 1-2 THE DLM\n         BNE   EXIT0                     NO  EXIT\n         MVC   UXWKAREA+4(2),=X'0000'  YES MAKE DLM INACTIVE\n         B     EXIT0                     AND EXIT\n*\nNEXT01   DS    0H\n         CLC   0(10,R1),=C'/*PRIORITY' JES2 PRIORITY CARD ?\n         BE    EXIT0                     YES\n         CLC   0(1,R1),=C' '           CC 1-2 SPACE\n         BE    EXIT0                     YES EXIT\n         CLC   0(3,R1),=C'//*'         CC 1-3 COMMENT\n         BE    EXIT0                     YES EXIT\n         CLC   0(2,R1),=C'/*'          CC 1-2 DATA EOF\n         BE    EXIT0                     YES EXIT\n         CLC   0(2,R1),=C'//'          CC1-2 JCL CARD\n         BNE   EXIT0                     NO EXIT\n         CLI   UXWKAREA+6,C'C'         JOB CONTINUATION CARD ?\n         BE    NEXTEX0                   YES\n         CLC   0(3,R1),=C'// '         ANOTHER CONTINUATION ?\n         BE    EXIT0                     EXIT\n         MVC   JOBCRD(80),0(R1)        MOVE JCL CARD\n         LA    R3,JOBCRD               SET FOR SCAN\n         LA    R4,JOBCRD\n         LA    R4,29(R4)               END AT CC 30\n         LA    R3,3(R3)                BEGIN AT CC 4\n*\nNEXT02   DS    0H                       SCAN FOR JOB OR ,DLM=\n         CLC   0(5,R3),=C' JOB '       JOB ?\n         BE    NEXT05                    YES\n         CLC   0(5,R3),=C',DLM='       ,DLM= ?\n         BE    NEXT03                    YES\n         LA    R3,1(R3)                BUMP INDEX\n         CR    R3,R4                   RIGHT SIDE LIMIT ?\n         BE    EXIT0                     YES EXIT\n         B     NEXT02                  SCAN MORE\n*\nNEXT03   DS    0H                      ,DLM= WAS ENCOUNTERED\n         LA    R3,5(R3)                BUMP PAST = IN ,DLM=\n         CLC   0(1,R3),=X'7D'          QUOTE ?\n         BE    NEXT04                    YES\n         MVC   UXWKAREA+4(2),0(R3)     MOVE DELIMITER TO SAVE AREA\n         B     EXIT0\n*\nNEXT04   DS    0H                      DLM HAS QUOTES\n         MVC   UXWKAREA+4(2),1(R3)     MOVE DELIMITER TO SAVE AREA\n         B     EXIT0\n*\nNEXT05   DS    0H                      PROCESS ADD OF RACF CARD\n         MVI   UXWKAREA+6,C'J'         SHOW JOB CARD BEING PROCESSED\n         LA    R3,5(R3)                BUMP INDEX\n         MVC   RACFCRD(80),USEREQ      MOVE USER=\n         LA    R4,USERID\n         MVC   USERID(7),ACCNUM        MOVE ACCNUM\n*\n*---------------------------------------------------------------------\n*\nBLUC0    DS    0H\n         CLC   0(1,R3),=C' '           FIND ACCOUNT FIELD\n         BNE   BLUC00\n         LA    R3,1(R3)                BUMP INDEX\n         B     BLUC0\n*\n*\nBLUC00   DS    0H                      CHECK ACCOUNT FIELD\n         LA    R4,ACCTABLE             POINT TO TABLE\nBLUC000  DS    0H                      CHECK ACCOUNT FIELD\n         CLC   0(3,R3),0(R4)\n         BE    BLUC01\n         CLC   0(3,R4),=C'999'\n         BE    BLUCERR0\n         LA    R4,4(R4)                BUMP POINTER\n         B     BLUC000\n*\n*\nBLUC01   DS    0H                      LOOK AT JOB NAME\n         LA    R4,USERID\n         CLC   ACCNUM(2),=C'TS'        EXEMPT TECH SUPPORT\n         BE    NEXT06\n         CLC   ACCNUM(2),=C'OP'        EXEMPT OPERATIONS\n         BE    NEXT06\n*\n         CLC   ACCNUM(5),=C'TSIBM'     EXEMPT IBM, GEORGE B.\n         BE    NEXT06\n         CLC   ACCNUM(7),=C'US02435'   EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(7),=C'US03933'   EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(7),=C'US02160'   EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(7),=C'US05721'   EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(6),=C'IC4402'    EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(6),=C'IC5514'    EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(6),=C'IC4488'    EXEMPT ACCOUNTING.\n         BE    NEXT06\n         CLC   ACCNUM(6),=C'IC5837'    EXEMPT ACCOUNTING.\n         BE    NEXT06\n*\n*\n         CLC   ACCNUM(2),=C'IC'        TEST FOR IC\n         BE    BLUC21\n         CLC   2(7,R1),ACCNUM          FORCE USERID\n         BE    NEXT06\n         B     BLUCERR1\n*\nBLUC21   DS    0H\n         CLC   2(6,R1),ACCNUM          FORCE USERID\n         BE    NEXT06\n         B     BLUCERR1\n*\n*\nNEXT06   DS    0H\n         CLI   0(R4),C' '              FIRST BLANK AFTER USERID ?\n         BE    NEXT07                    YES\n         LA    R4,1(R4)                BUMP TO NEXT BYTE\n         B     NEXT06                  AND LOOK AGAIN\n*\nNEXT07   DS    0H                      FIRST CHARACTER AFTER USERID\n         L     R10,UXSCBADR            R10 --> SCB\n         USING SCB,R10\n*\n         CLC   SCBUSER1(12),=XL12'00'  ACFEXIT DATA SAVED ?\n         BE    NEXTEX1                   NO BRANCH AROUND\n*\n         MVC   0(10,R4),PASSEQ         MOVE ,PASSWORD=\n         LA    R4,10(R4)               BUMP R4 PAST ,PASSWORD=\n         XC    SCBUSER1(12),ACCSONT+1  UNMASK LENGTH AND PASSWORD\n         XR    R5,R5                   CLEAR R5\n         IC    R5,SCBUSER1             INSERT PASSWORD LENGTH\n         BCTR  R5,0                    DECREMENT BY 1 FOR EXECUTE MVC\n         EX    R5,MOVEPSW              MOVE PASSWORD\n         XC    SCBUSER1(12),ACCSONT+1  REMASK LENGTH AND PASSWORD\n         AR    R4,R5                   ADD LENGTH OF PASSWORD TO R4\n         LA    R2,1(R4)                POINT R2 PAST PASSWORD (GMB)\n         L     R6,SCBACFB              ACEE ADDRESS POINTER\n         LTR   R6,R6                   ACEE PRESENT ?\n         BZ    NEXTEX1                   NO SKIP FOLLOWING TEST\n         USING ACEE,R6\n         MVC   0(7,R2),=CL7',GROUP='\n         MVC   7(8,R2),ACEEGRPN\n*\n*        CLC   ACEEGRPN,=CL8'TECHSVCS'       TECH SERVICES USER?\n*        BE    NEXTEX1                         YES\n*        CLC   ACEEGRPN,=CL8'OPNS'           OPERATIONS\n*        BE    NEXTEX1                         YES\n*        MVC   JOBCRD+2(3),ACCNUM            OTHER BCWA USERID\n*\n         B     NEXTEX1\n*\nNEXTEX0  DS    0H                      JOB CONTINUATION ENCOUNTERED\n         MVC   JOBCRD(80),0(R1)        MOVE JCL CARD\n         LA    R1,JOBCRD               R1 ---> JOBCRD\n         LA    R3,2(R1)                SET FOR SCAN\n         B     NEXTEX1B\n*\nNEXTEX1  DS    0H                      PROCESS CONTINUATIONS ETC.\n         LA    R1,JOBCRD               R1 ---> JOBCRD\n*\n*\nNEXTEX1B DS    0H\n         LA    R4,1                    SET FOR INCREMENT\n         LA    R5,71(R1)               POINT AT RIGHT SIDE LIMIT\n*\nNEXTEX1C DS    0H                      FIND START OF OPERAND\n         CLI   0(R3),C' '              LOOK FOR 1ST NON BLANK\n         BNE   NEXTEX2                 1ST NON-BLANK FOUND\n         BXH   R3,R4,NEXTEX3           DO IT UNTIL LIMIT\n         B     NEXTEX1C                GO TRY AGAIN FOR 1ST NON-BLANK\n*\nNEXTEX2  DS    0H                      START OF OPERAND WAS FOUND\n*\n         CLC   0(8,R3),=C'MSGCLASS'    SKIP MSGCLASS\n         BNE   BLUC02\n         LA    R3,8(R3)                BUMP INDEX PAST\n         B     BLUNEXT                 GO AGAIN\n*\nBLUC02   DS    0H\n         CLC   0(6,R3),=C'CLASS='      CHECK CLASS\n         BNE   BLUC03\n         CLC   ACCNUM(3),=C'TS0'       EXEMPT TECH SUPPORT\n         BE    BLUNEXT\n         CLC   ACCNUM(3),=C'OP0'       EXEMPT OPERATIONS\n         BE    BLUNEXT\n*\n         CLC   ACCNUM(5),=C'TSIBM'     EXEMPT IBM, GEORGE B.\n         BE    BLUNEXT\n         CLC   ACCNUM(7),=C'US02435'   EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(7),=C'US03933'   EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(7),=C'US02160'   EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(7),=C'US05721'   EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(6),=C'IC4402'    EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(6),=C'IC5514'    EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(6),=C'IC4488'    EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n         CLC   ACCNUM(6),=C'IC5837'    EXEMPT ACCOUNTING.\n         BE    BLUNEXT\n*\n         CLC   6(1,R3),=C'K'           ALLOW CLASS=K\n         BE    BLUNEXT\n         CLC   6(1,R3),=C'R'           ALLOW CLASS=R\n         BE    BLUNEXT\n         CLC   6(1,R3),=C'L'           ALLOW CLASS=L\n         BE    BLUNEXT\n         CLC   6(1,R3),=C'T'           ALLOW CLASS=T\n         BE    BLUNEXT\n         CLC   6(1,R3),=C'M'           ALLOW CLASS=M\n         BE    BLUNEXT\n         CLC   6(1,R3),=C'N'           ALLOW CLASS=N\n         BE    BLUNEXT\n         B   BLUCERR2\n*\nBLUC03   DS    0H\n         CLC   0(5,R3),=C'PRTY='       CHECK PRTY\n         BNE   BLUC04\n         CLC   ACCNUM(3),=C'TS0'       EXEMPT TECH SUPPORT\n         BE    BLUNEXT\n         CLC   ACCNUM(3),=C'OP0'       EXEMPT OPERATIONS\n         BE    BLUNEXT\n         CLC   ACCNUM(5),=C'TSIBM'     EXEMPT IBM, GEORGE B.\n         BE    BLUNEXT\n         CLC   6(1,R3),=C' '           CHECK FOR 2 DIGIT PRTY\n         BE    BLUNEXT\n         CLC   6(1,R3),=C','\n         BE    BLUNEXT\n         B     BLUCERR3\n*\nBLUC04   DS    0H\n         CLC   ACCNUM(3),=C'TS0'       EXEMPT TECH SUPPORT\n         BE    BLUNEXT\n         CLC   ACCNUM(3),=C'OP0'       EXEMPT OPERATIONS\n         BE    BLUNEXT\n         CLC   ACCNUM(5),=C'TSIBM'     EXEMPT IBM, GEORGE B.\n         BE    BLUNEXT\n         CLC   0(5,R3),=C'TIME='       CHECK TIME\n         BE    BLUCERR4\n*\nBLUNEXT  DS    0H\n*\n         CLI   0(R3),X'7D'             BEGINNING QUOTE ?\n         BE    NEXTEX2E                  YES\n         CLI   0(R3),C' '              BLANK ?\n         BE    NEXTEX3                   YES\n*\nNEXTEX2C BXH   R3,R4,NEXTEX3           SCAN FOR BLANK OR QUOTE\n         B     NEXTEX2                 UNTIL LIMIT REACHED\n*\nNEXTEX2D DS    0H                      SCAN FOR THE SECOND QUOTE\n         CLI   0(R3),X'7D'             2ND QUOTE ?\n         BE    NEXTEX2C                  YES CONTINUE MAIN SCAN\n*\nNEXTEX2E DS    0H                      SCAN FOR SECOND QUOTE\n         BXLE  R3,R4,NEXTEX2D          DO IT UNTIL LIMIT\n*\nNEXTEX3  DS    0H                      END OF OPERAND FOUND\n         AH    R3,=H'-1'               BACKUP 1 BYTE\n         CLI   0(R3),C','              CONTINUATION INDICATED\n         BNE   NEXTEX99                  NO NEXT99\n*\nNEXTEX4  DS    0H                      CARD IS CONTINUED\n         CLI   UXWKAREA+6,C'J'         JOB CARD BEING PROCESSED ?\n         BNE   EXIT0                   NO CONTINUATION BUT NOT 'JOB'\n*\nNEXTEX98 DS    0H                      CONTINUED AND 'JOB'\n         LA    R14,JOBCRD              PUT JOBCARD IN LIST\n         ST    R14,AJOBCRD             \"\n         OI    AJOBCRD,X'80'             END OF LIST\n         MVI   UXWKAREA+6,C'C'         SHOW JOB CONTINUATION IS NEXT\n         B     INSERT\n*\nNEXTEX99 DS    0H                      CARD NOT CONTINUED\n         CLC   SCBUSER1(12),=XL12'00'  ACFEXIT DATA SAVED ?\n         BE    EXIT0                     NO CONTINUE PROCESSING\n         LA    R3,1(R3)                INCREMENT POINTER\n         MVI   0(R3),C','              CONTINUE THE CARD\n         LA    R14,JOBCRD              PUT CARD IN LIST\n         ST    R14,AJOBCRD             \"\n         LA    R14,RACFCRD             PUT RACF CARD IN LIST\n         ST    R14,ARACFCRD            \"\n         OI    ARACFCRD,X'80'            END OF LIST\n         MVI   UXWKAREA+6,C' '         SHOW PROCESSING COMPLETE\n*\n*\n*\nINSERT   DS    0H\n         L     R14,UXSUBRCO            ESTABLISH\n         LA    R1,AJOBCRD                PARMLIST\n         ST    R1,0(R14)                   ADDRESSABILITY\n         LA    R15,8                   SET INSERT RETURN CODE\n         B     EXIT                    AND BRANCH TO EXIT\n*\nNOCORE   DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'CMSG+4,R2),CMSGA      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\n*\nBLUCERR0 DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'BLM0+4,R2),BLM0A      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\nBLUCERR1 DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'BLM1+4,R2),BLM1A      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\nBLUCERR2 DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'BLM2+4,R2),BLM2A      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\nBLUCERR3 DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'BLM3+4,R2),BLM3A      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\nBLUCERR4 DS    0H\n         L     R2,UXRETFLG\n         OI    0(R2),X'80'             INDICATE USER MESSAGE\n         L     R2,UXMSGADR             SET UP MESSAGE IN\n         MVC   0(L'BLM4+4,R2),BLM4A      AREA\n         LA    R15,12                  SET CANCEL RET. CODE\n         B     EXIT                    AND GO TO EXIT\n*\nLASTCALL DS    0H\n         L     R1,UXWKAREA             LOAD GETMAINED ADDRESS\n         LTR   R1,R1                   CHECK THAT WE HAVE CORE TO FREE\n         BZ    EXIT0                     NO CORE EXIT0\n         FREEMAIN R,LV=256,A=(1)\n         XC    UXWKAREA(16),UXWKAREA   CLEAR AREA\n*\nEXIT0    DS    0H\n         SLR   R15,R15                 SET REG 15 TO 0\n*\nEXIT     EQU   *                       COMMON EXIT ADDRESS\n         UXEXIT RC=(15)                RETURN WITH RC IN R15\n*---------------------------------------------------------------------*\n*        CONSTANTS AND EQUATES       .                                *\n*---------------------------------------------------------------------*\nLIBMAST  EQU   EXIT0\nERROR    EQU   EXIT0\nENDIP    EQU   EXIT0\nCMSGA    DC    AL2(L'CMSG)\n         DC    X'0000'\nCMSG     DC    C'SUBEXIT:  INSUFFICIENT CORE AVAILABLE TO SUBMIT.'\n*\nBLM0A    DC    AL2(L'BLM0)\n         DC    X'0000'\nBLM0     DC    C'SUBEXIT:  BAD JOBCARD, ACCOUNT FIELD UNKNOWN.'\n*\nBLM1A    DC    AL2(L'BLM1)\n         DC    X'0000'\nBLM1     DC    C'SUBEXIT:  BAD JOBCARD, JOBNAME NOT USER-ID.'\n*\nBLM2A    DC    AL2(L'BLM2)\n         DC    X'0000'\nBLM2     DC    C'SUBEXIT:  BAD JOBCARD, CLASS NE (K,R,L,T,M,N).'\n*\nBLM3A    DC    AL2(L'BLM3)\n         DC    X'0000'\nBLM3     DC    C'SUBEXIT:  BAD JOBCARD, PRIORITY  MUST BE 1 DIGIT.'\n*\nBLM4A    DC    AL2(L'BLM4)\n         DC    X'0000'\nBLM4     DC    C'SUBEXIT:  BAD JOBCARD, TIME PARM NOT ALLOWED.'\n*\nUSEREQ   DC    CL80'//             USER='\nPASSEQ   DC    CL10',PASSWORD='\n*\nMOVEPSW  MVC   0(*-*,R4),SCBUSER1+1 **---> EXECUTE ONLY <---**\n*\n*\n*ACCTABLE LENGTH OF EACH LINE = 40 CHARS\n*ACCTABLE MUST END WITH 999\n*\nACCTABLE DS    0CL(920)\n         DC    C'ABA,ACA,ACE,ACT,ADF,AHP,AIR,AMB,AME,AMS,'\n         DC    C'APS,AZZ,BAD,BAE,BAM,BCE,BCI,BCM,BMX,BOS,'\n         DC    C'BPS,BTA,BTS,CAE,CCC,CDP,CDS,CES,CIS,CLE,'\n         DC    C'CME,CMG,CMP,CMS,COB,COP,COS,COT,CPD,CPE,'\n         DC    C'CPS,CQE,CSE,CWE,CWP,CZZ,DBS,DDD,DEF,DEM,'\n         DC    C'DFH,DFS,DIA,DIC,DIT,DMS,DPI,DYL,EMC,EMS,'\n         DC    C'EOB,ESS,FDR,FEP,FMA,FPS,GAS,GCS,GFS,GLS,'\n         DC    C'GSI,HED,HEM,HME,HMO,HPS,ICG,ICI,ICU,IMP,'\n         DC    C'IMS,INV,IPB,IPR,IPW,ITS,JBA,KCE,LIB,LKE,'\n         DC    C'MAR,MDA,MIS,MMF,MOS,MPR,MPS,MTH,MTP,MTT,'\n         DC    C'NPC,OLD,OSS,PAY,PCA,PCS,PIN,PPS,PRF,PUR,'\n         DC    C'PWP,RCE,REF,RME,RMF,ROS,SBS,SBU,SDP,SEC,'\n         DC    C'SID,SMP,SOS,SOT,SQT,SSS,SUS,SYN,SYS,TMS,'\n         DC    C'UCR,UMS,UWC,UWE,UWI,UWM,UWS,VCI,VSA,VTY,'\n         DC    C'WEA,WME,WPS,XSS,ZCR,ZWM,ZZZ,SLS,MCC,CHM,'\n         DC    C'M01,M02,M03,M04,M05,M06,M07,M08,M09,M10,'\n         DC    C'M11,M12,M13,M14,M15,M16,M17,M18,M19,M20,'\n         DC    C'F01,F02,F03,F04,F05,F06,F07,F08,F09,F10,'\n         DC    C'F11,F12,F13,F14,F15,F16,F17,F18,F19,F20,'\n         DC    C'C01,C02,C03,C04,C05,C06,C07,C08,C09,C10,'\n         DC    C'C11,C12,C13,C14,C15,C16,C17,C18,C19,C20,'\n         DC    C'CHA,TSO,GLC,GSF,MBR,MCC,XIC,STR,999,XXX,'\n         DC    C'XXX,XXX,XXX,XXX,XXX,XXX,XXX,XXX,XXX,999,'\n*\n         LTORG\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TECZ00": {"ttr": 10505, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "FILE013"}, "text": "TECZ000  '&TECSMSG' .ALARM = NO\n'&TECLMSG'\n\nTECZ001  '&TECSMSG' .ALARM = YES\n'&TECLMSG'\n\nTECZ002  '&TECSMSG' .ALARM = NO .HELP = &TECHELP\n'&TECLMSG'\n\nTECZ003  '&TECSMSG' .ALARM = YES .HELP = &TECHELP\n'&TECLMSG'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEC107": {"ttr": 10507, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x03;\\x03;\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 827, "newlines": 827, "modlines": 0, "user": "FILE013"}, "text": "*          DATA SET CBT1428    AT LEVEL 001 AS OF 03/27/83\n*    PROGRAM STARTS ABOUT 155 LINES DOWN                                00001\n         MACRO                                                          00002\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO                           00003\n         GBLB  &SAVRENT                                                 00004\n         GBLB  &REGSW                                                   00005\n         GBLB  &TIME                                                    00006\n         GBLC  &SAVNDX                                                  00007\n&SAVNDX  SETC  '&SYSNDX'                                                00008\n&NAME    CSECT                                                          00009\n         AIF   ('&SAVRENT' EQ '1').NOTFREE                              00010\n         AIF   ('&REGSW' EQ '1').NOEQU                                  00011\n         AIF   ('&EQU' NE 'YES').NOEQU                                  00012\n&REGSW   SETB  1                                                        00013\n         SPACE                                                          00014\n*********************************************************************** 00015\n********           DEFINITION OF GENERAL REGISTERS             ******** 00016\n*********************************************************************** 00017\nR0       EQU   0    GENERAL REGISTER ZERO                               00018\nR1       EQU   1    GENERAL REGISTER ONE                                00019\nR2       EQU   2    GENERAL REGISTER TWO                                00020\nR3       EQU   3    GENERAL REGISTER THREE                              00021\nR4       EQU   4    GENERAL REGISTER FOUR                               00022\nR5       EQU   5    GENERAL REGISTER FIVE                               00023\nR6       EQU   6    GENERAL REGISTER SIX                                00024\nR7       EQU   7    GENERAL REGISTER SEVEN                              00025\nR8       EQU   8    GENERAL REGISTER EIGHT                              00026\nR9       EQU   9    GENERAL REGISTER NINE                               00027\nR10      EQU   10   GENERAL REGISTER TEN                                00028\nR11      EQU   11   GENERAL REGISTER ELEVEN                             00029\nR12      EQU   12   GENERAL REGISTER TWELVE                             00030\nR13      EQU   13   GENERAL REGISTER THIRTEEN                           00031\nR14      EQU   14   GENERAL REGISTER FOURTEEN                           00032\nR15      EQU   15   GENERAL REGISTER FIFTEEN                            00033\n         SPACE                                                          00034\nRA       EQU   10   GENERAL REGISTER TEN                                00035\nRB       EQU   11   GENERAL REGISTER ELEVEN                             00036\nRC       EQU   12   GENERAL REGISTER TWELVE                             00037\nRD       EQU   13   GENERAL REGISTER THIRTEEN                           00038\nRE       EQU   14   GENERAL REGISTER FOURTEEN                           00039\nRF       EQU   15   GENERAL REGISTER FIFTEEN                            00040\n*********************************************************************** 00041\n********             END OF REGISTER DEFINITIONS               ******** 00042\n*********************************************************************** 00043\n         SPACE                                                          00044\n.NOEQU   ANOP                                                           00045\n         SAVE  (14,12)                                                  00046\n         AIF   ('&REG' EQ '').MESS                                      00047\n         BALR  &REG(1),0                                                00048\n         AIF   (N'&REG EQ 1).A                                          00049\n         AIF   (N'&REG EQ 2).B                                          00050\n         AIF   (N'&REG EQ 3).C                                          00051\n         AIF   (N'&REG EQ 4).D                                          00052\n         AIF   (N'&REG EQ 5).E                                          00053\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'      00054\n         AGO   .E                                                       00055\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'              00056\n         MEXIT                                                          00057\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'  00058\n         MEXIT                                                          00059\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)                00060\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00061\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00062\n         L     &REG(4),=A(Q&SYSNDX+12288)                               00063\n         L     &REG(5),=A(Q&SYSNDX+16384)                               00064\n         AGO   .END                                                     00065\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)                        00066\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00067\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00068\n         L     &REG(4),=A(Q&SYSNDX+12288)                               00069\n         AGO   .END                                                     00070\n.C       USING *,&REG(1),&REG(2),&REG(3)                                00071\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00072\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00073\n         AGO   .END                                                     00074\n.B       USING *,&REG(1),&REG(2)                                        00075\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER         00076\n         AGO   .END                                                     00077\n.A       USING *,&REG(1)                                                00078\n.END     ANOP                                                           00079\n         AIF   ('&RENT' NE 'RENT').NORENT                               00080\n&SAVRENT SETB  1                                                        00081\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA            00082\n         ST    13,4(1)             SET UP FORWARD CHAIN                 00083\n         ST    1,8(13)             SET UP BACKWARD CHAIN                00084\n         L     0,20(0,13)          RESET REGISTER 0                     00085\n         L     1,24(0,13)          RESET REGISTER 1                     00086\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS               00087\n         B     J&SYSNDX           BRANCH AROUND LTORG                   00088\n         AGO   .RENT                                                    00089\n.NORENT  ANOP                                                           00090\n&TIME    SETB  1                                                        00091\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN                 00092\n         LA    1,SAVE&SYSNDX                                            00093\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN                00094\n         L     1,24(0,13)          RESET REGISTER 1                     00095\n         LA    13,SAVE&SYSNDX                                           00096\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST     00097\nSAVE&SYSNDX DC 18F'0'                                                   00098\n.RENT    ANOP                                                           00099\n         LTORG                                                          00100\n         AIF   ('&ID' NE 'YES').NOID                                    00101\n         DC    CL8'&SYSDATE'                                            00102\n         DC    CL8'&SYSTIME'                                            00103\n.NOID    ANOP                                                           00104\nJ&SYSNDX DS    0H                                                       00105\n         MEND                                                           00106\n         MACRO                                                          00107\n&NAME    ENDALL &CODE=                                                  00108\n         GBLB  &TIME                                                    00109\n         GBLB  &SAVRENT                                                 00110\n         GBLC  &SAVNDX                                                  00111\n         LCLA  &LEN                                                     00112\n         LCLC  &REG                                                     00113\n         AIF   ('&CODE' GT '4095').INVRET                               00114\n&NAME    DS    0H                                                       00115\n         AIF   (K'&CODE LE 0).CHKRENT                                   00116\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT                            00117\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG          00118\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG            00119\n         AIF   ('&CODE' NE '(15)').CHKRENT                              00120\n         LR    2,15               SAVE REG 15 RETURN CODE               00121\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT                                   00122\n&SAVRENT SETB  0                                                        00123\n         LR    1,13               LOAD SAVE AREA ADDRESS                00124\n         L     13,4(0,13)         RE-LOAD REGISTER 13                   00125\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE                00126\n         AGO   .RENT                                                    00127\n.NOTRENT ANOP                                                           00128\n         AIF   (NOT &TIME).NOSAVE                                       00129\n&TIME    SETB  0                                                        00130\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13                   00131\n.RENT    ANOP                                                           00132\n         AIF   ('&CODE' EQ '').COND1                                    00133\n         AIF   ('&CODE' NE '(15)').CHKREG                               00134\n         LR    15,2               GET RETURN CODE BACK FROM R2          00135\n         AGO   .ENDIT                                                   00136\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG                             00137\n&LEN     SETA  K'&CODE-2                                                00138\n&REG     SETC  '&CODE'(2,&LEN)                                          00139\n         LR    15,&REG            GET RETURN CODE                       00140\n         AGO   .ENDIT                                                   00141\n.NOTREG  ANOP                                                           00142\n         LA    15,&CODE           LOAD CODE TO REG 15                   00143\n         AGO   .ENDIT                                                   00144\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'    00145\n         MEXIT                                                          00146\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'      00147\n         MEXIT                                                          00148\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"' 00149\n         MEXIT                                                          00150\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15         00151\n.ENDIT   ANOP                                                           00152\n         RETURN     (14,12),T,RC=(15)                                   00153\n         MEND                                                           00154\n*          DATA SET DEDIOS     AT LEVEL 001 AS OF 03/24/83              00155\n*********************************************************************   00156\n*********************************************************************   00157\n**                                                                 **   00158\n**       THIS PROGRAM HAS TO RUN APF AUTHORIZED.                   **   00159\n**                                                                 **   00160\n**       CONDITIONALLY FIX DSCB VOLSER IN DSCB, OR                 **   00161\n**       TURN RACF BITS ON OR OFF.                                 **   00162\n**                                                                 **   00163\n**       VALID PARMS ARE:                                          **   00164\n**                                                                 **   00165\n**       PARM='CUA,VOLSER' FIX VOLSER ALL VOLSERS IF WRONG         **   00166\n**       PARM='CUA,RACFON' TURN ALL RACF BITS ON                   **   00167\n**       PARM='CUA,NORACF' TURN ALL RACF BITS OFF                  **   00168\n**                                                                 **   00169\n**       * NOTE * WITH PARMS RACFON AND NORACF VSAM WILL NOT       **   00170\n**                BE TOUCHED.                                      **   00171\n**                                                                 **   00172\n**       WHERE CUA = DEVICE ADDRESS OF VOLUME TO BE CHANGED        **   00173\n**                                                                 **   00174\n**       SAMPLE JCL.                                               **   00175\n**       //TEC107   EXEC PGM=TEC107,PARM='100,NORACF'              **   00176\n**       //STEPLIB  DD   DSN=AUTHORIZED.LIBRARY,DISP=SHR           **   00177\n**       //SYSPRINT DD   SYSOUT=1                                  **   00178\n**                                                                 **   00179\n**-----------------------------------------------------------------**   00180\n** CHANGES:  ENABLED PROGRAM TO RUN IN AN MVS/XA ENVIRONMENT       **   00180\n**              09/03/86                                           **   00180\n**                                                                 **   00180\n**                                                                 **   00180\n**                                                                 **   00180\n**                                                                 **   00181\n*********************************************************************   00182\n*********************************************************************   00183\nTEC107   SAVEALL REG=(12)                                               00184\n         EJECT                                                          00185\n*********************************************************************   00186\n*********************************************************************   00187\n**                                                                 **   00188\n**       CHECK FOR VALID PARM.                                     **   00189\n**                                                                 **   00190\n*********************************************************************   00191\n*********************************************************************   00192\n         SPACE                                                          00193\n         L     R2,0(R1)                ADDRESS OF PARM FIELD            00194\n         LH    R9,0(R2)                LENGTH                           00195\n         LTR   R9,R9                   IS THERE A PARM?                 00196\n         BZ    NOPARM                      NO.. GET OUT                 00197\n         CLC   0(2,R2),=XL2'000A'     LENGTH 10?                        00198\n         BNE   BADPARM                    NO - BAD PARM                 00199\n         CLC   6(6,R2),=C'VOLSER'      FIX VOLSER IN DSCB?              00200\n         BE    PARM1                      YES.. CONTINUE                00201\n         CLC   6(6,R2),=C'RACFON'      TURN ON RACF BIT IN DSCB?        00202\n         BE    PARM2                      YES.. CONTINUE                00203\n         CLC   6(6,R2),=C'NORACF'      TURN OFF RACF NIT IN DSCB?       00204\n         BE    PARM3                      YES.. CONTINUE                00205\n         B     BADPARM                    NO... PARM INVALID            00206\n         SPACE                                                          00207\nPARM1    MVI   FLAG,C'1'               SET FIX DSCB VOLSER              00208\n         B     START                                                    00209\nPARM2    MVI   FLAG,C'2'               SET RACF BIT ON                  00210\n         B     START                                                    00211\nPARM3    MVI   FLAG,C'3'               SET RACF OFF                     00212\n         B     START                                                    00213\n         EJECT                                                          00214\n*********************************************************************   00215\n*********************************************************************   00216\n**                                                                 **   00217\n**       GET DEVICE ADDRESS AND COVERT IT TO HEX FOR IOSLOOK       **   00218\n**                                                                 **   00219\n*********************************************************************   00220\n*********************************************************************   00221\n         SPACE                                                          00222\nSTART    OPEN  (SYSPRINT,(OUTPUT))     OPEN PRINT FILE                  00223\n         MVC   ADDRWRK(3),2(R2)        GET DEVICE ADDRESS               00224\n         TR    ADDRWRK,HEX             CONVERT EACH BYTE TO HEX         00225\n         IC    R4,ADDRWRK+1            GET UNIT ADDRESS                 00226\n         SLL   R4,4                    SHIFT LEFT 4 BITS                00227\n         STC   R4,ADDRWRK+1            AND RESTORE                      00228\n         OC    ADDRWRK+2(1),ADDRWRK+1  'OR' OVER DEVICE ADDRESS         00229\n         MVC   ADDRWRK+1(1),ADDRWRK    MOVE CHANNEL ADDRESS RIGHT       00230\n         MVI   ADDRWRK,X'00'           ZERO OUT HIGH ORDER BYTE         00231\n         SR    R4,R4                   RESET R4                         00232\n         ICM   R4,7,ADDRWRK            GET DEVICE ADDRESS (HEX)         00233\n         EJECT                                                          00234\n*********************************************************************   00235\n*********************************************************************   00236\n**                                                                 **   00237\n**       GET INTO SUPERVISOR MODE KEY 0 AND DO AN IOSLOOK TO       **   00238\n**       FIND THE UCB ADDRESS FOR CVAF.                            **   00239\n**                                                                 **   00240\n*********************************************************************   00241\n*********************************************************************   00242\n         SPACE                                                          00243\nSETSUP   MODESET MODE=SUP,KEY=ZERO     GO TO SUPERVISOR STATE AND KEY 0 00244\n         SPACE                                                          00245\nIOSLOOK  ST    R13,SAVE13              SAVE MY REG 13                   00246\n         LA    R13,IOSSAVE             POINT TO IOS SAVE AREA           00247\n         IOSLOOK DEV=(4),UCB=(5)       RETURN UCB ADDRESS IN R5         00248\n         SPACE                                                          00249\n         L     R13,SAVE13              RESTORE REG 13                   00250\n         MODESET MODE=PROB,KEY=NZERO   RESET TO PROBLEM STATE AND KEY   00251\n         LTR   R15,R15                 VALID DEVICE?                    00252\n         BNZ   BADUCB                     NO...END                      00253\n         EJECT                                                          00254\n*********************************************************************   00255\n*********************************************************************   00256\n**                                                                 **   00257\n**       HAVE A VALID UCB IS IT A BLANK VOLSER?                    **   00258\n**                                                                 **   00259\n*********************************************************************   00260\n*********************************************************************   00261\n         SPACE                                                          00262\n         USING UCBOB,R5                                                 00263\nGOTUCB   CLC   UCBVOLI,=XL6'00'        BLANK VOLSER?                    00264\n         BNE   UNITTST                   NO...CONTINUE                  00265\n         WTO   'BLANK UCB',ROUTCDE=(11)  YES..                          00266\n         L     R15,8                   SET BAD RETURN CODE              00267\n         B     EOF                            AND RETURN                00268\n         EJECT                                                          00269\n*********************************************************************   00270\n*********************************************************************   00271\n**                                                                 **   00272\n**       CHECK TO SEE IF INDEXED OR NON-INDEXED VTOC               **   00273\n**       AND BRANCH TO APPROPRIATE ROUTINE.                        **   00274\n**                                                                 **   00275\n*********************************************************************   00276\n*********************************************************************   00277\n         SPACE                                                          00278\nUNITTST  CLC   UCBNAME(3),2(R2)        RIGHT UCB?                       00279\n         BE    CVAFTST                                                  00280\n         ABEND 1,DUMP                                                   00281\n         SPACE                                                          00282\nCVAFTST  MVC   PVOL,UCBVOLI            PUT VOLSER IN PRINT LINE         00283\n         MVC   PUNIT(3),2(R2)          PUT UNIT IN PRINT LINE           00284\n         MVC   PPARM(6),6(R2)          PUT PARM IN PRINT LINE           00285\n         MVC   VOLUME,UCBVOLI          GET VOLSER FOR ENQ/DEQ           00286\n         CVAFTST UCB=(R5)              INDEXED VTOC?                    00287\n         SPACE                                                          00288\n         B     TSTRTN(R15)             BRANCH TO APPROPRIATE ROUTINE    00289\nTSTRTN   DS    0H                                                       00290\n         B     NOINDEX                 RC 0 - NO DF/DS UNINDEXED        00291\n         B     NOINDEX                 RC 4 - NO INDEXED VTOC           00292\n         B     INDEXED                 RC 8 - INDEXED VTOC              00293\n         B     NOMOUNT                 RC 12- VOL NOT MOUNTED           00294\n         B     NODASD                  RC 16- NOT DASD                  00295\n         ABEND 16                      JUST IN CASE                     00296\n         EJECT                                                          00297\n*********************************************************************   00298\n*********************************************************************   00299\n**                                                                 **   00300\n**       SET UP BUFFER TO READ FIRST DSCB                          **   00301\n**                                                                 **   00302\n*********************************************************************   00303\n*********************************************************************   00304\n         SPACE                                                          00305\nINDEXED  MVI   IXVTOC,C'1'             SET THIS IS INDEXED VTOC         00306\n         SPACE                                                          00307\nNOINDEX  BAL   R10,NEWPAGE             AND START A NEW PAGE             00308\n         XC    BUFLIST(BFLHLN),BUFLIST CLEAR BUFFER LIST                00309\n         XC    BFLE(BFLELN),BFLE       CLEAR BUFFER ENTRY               00310\n         MVI   BFLHNOE,X'1'            NUMBER OF DSCBS TO BE READ = 1   00311\n         OI    BFLHFL,BFLHDSCB         SET DSCBS AS ARGUMENT            00312\n         OI    BFLEFL,BFLECHR          ARGUMENT IS CCHHR                00313\n         MVI   BFLELTH,DSCBLTH         LENTGH OF DSCB                   00314\n         XC    BFLEARG,BFLEARG         SET TO READ 1ST DSCB             00315\n         LA    R3,DS1DSNAM             ADDR OF DSCB BUFFER              00316\n         ST    R3,BFLEBUF              PLC ADDR OF DSCB BUFFER IN BFLE  00317\n         EJECT                                                          00318\n*********************************************************************   00319\n*********************************************************************   00320\n**                                                                 **   00321\n**       READ THE DSCBS AND CHECK RETURN CODE.                     **   00322\n**                                                                 **   00323\n*********************************************************************   00324\n*********************************************************************   00325\n         SPACE                                                          00326\nSEQLOOP  CVAFSEQ BRANCH=YES,MF=(E,CVPL),UCB=(R5)  GET A DSCB            00327\n         SPACE                                                          00328\n         LTR   R15,R15                 ANY ERROR?                       00329\n         BZ    CKFMT1                     NO....CHECK FOR FORMAT 1      00330\n         C     R15,=F'4'               RETURN CODE 4?                   00331\n         SPACE                                                          00332\n         BH    ABEND12                   NO...ABEND (RC=R15 AND CVSTAT) 00333\n         CLI   CVSTAT,X'20'            END OF VTOC?                     00334\n         SPACE                                                          00335\n         BNE   ABEND12                   NO...ABEND (RC=R15 AND CVSTAT) 00336\n         SR    R15,R15                   GIVE ZERO RETURN CODE          00337\n         B     EOF                       YES..EOJ                       00338\n         EJECT                                                          00339\n*********************************************************************   00340\n*********************************************************************   00341\n**                                                                 **   00342\n**       IS IT A FORMAT 1 DSCB?                                    **   00343\n**       INITIALIZE PRINT LINE.                                    **   00344\n**       GO READ NEXT DSCB IF NOT FORMAT 1.                        **   00345\n**                                                                 **   00346\n*********************************************************************   00347\n*********************************************************************   00348\n         SPACE                                                          00349\nCKFMT1   CLC   DS1FMTID(1),FORMAT1     FORMAT 1 DSCB?                   00350\n         BNE   SEQLOOP                    NO....GET ANOTHER DSCB        00351\n         MVC   DSNAME(44),DS1DSNAM     MOVE DSN TO SYSPRINT             00352\n         MVC   VOLSER(6),DS1DSSN       MOVE VOLSER TO SYSPRINT          00353\n         MVC   STAT(2),=C'  '          SET DEFAULT NOT CHANGED          00354\n         MVC   VCHG(11),=C'NOT CHANGED' SET DEFAULT VOLSER NOT CHANGED  00355\n         MVC   RCHG(11),=C'NOT CHANGED' SET DEFAULT RACF   NOT CHANGED  00356\n         CLI   FLAG,C'1'               DOING VOLSERS ONLY?              00357\n         BE    CKDSCBV                    YES... GO CHECK DSCBS         00358\n         CLI   FLAG,C'2'               DOING RACF ON ONLY?              00359\n         BE    RACON                       YES... GO CHECK IT OUT       00360\n         CLI   FLAG,C'3'               DOING RACF OFF ONLY?             00361\n         BE    RACOFF                     YES... GO CHECK IT OUT        00362\n         ABEND 8                       JUST IN CASE                     00363\n         EJECT                                                          00364\n*********************************************************************   00365\n*********************************************************************   00366\n**                                                                 **   00367\n**       HERE WE ARE TURNING THE RACF INDICATOR OFF IF IT IS ON    **   00368\n**                                                                 **   00369\n*********************************************************************   00370\n*********************************************************************   00371\n         SPACE                                                          00372\nRACOFF   TM    DS1DSORG+1,X'08'        VSAM?                            00373\n         BO    PRINT                      YES.. DONT TOUCH              00374\n         TM    DS1DSIND,X'40'          IS RACF BIT ON?                  00375\n         BNO   PRINT                      NO... JUST PRINT              00376\n         NI    DS1DSIND,X'BF'   TURN RACF BIT OFF, PRESERVE OTHER INFO  00377\n         MVC   RCHG(11),=C'CHANGED    ' SAY WE CHANGED THE VOLSER       00378\n         MVC   STAT(2),=C'**'          INDICATE CHANGED                 00379\n         B     PRINTW                  BRANCH TO PRINT AND REWRITE      00380\n         EJECT                                                          00381\n*********************************************************************   00382\n*********************************************************************   00383\n**                                                                 **   00384\n**       HERE WE ARE TURNING THE RACF INDICATOR ON IF IT IS OFF    **   00385\n**                                                                 **   00386\n*********************************************************************   00387\n*********************************************************************   00388\n         SPACE                                                          00389\nRACON    TM    DS1DSORG+1,X'08'        VSAM?                            00390\n         BO    PRINT                      YES.. DONT TOUCH              00391\n         TM    DS1DSIND,X'40'          IS RACF BIT ON?                  00392\n         BO    PRINT                      YES.. JUST PRINT              00393\n         OI    DS1DSIND,X'40'          TURN RACF BIT ON                 00394\n         MVC   RCHG(11),=C'CHANGED    ' SAY WE CHANGED THE VOLSER       00395\n         MVC   STAT(2),=C'**'          INDICATE CHANGED                 00396\n         B     PRINTW                  BRANCH TO PRINT AND REWRITE      00397\n         EJECT                                                          00398\n*********************************************************************   00399\n*********************************************************************   00400\n**                                                                 **   00401\n**       HERE WE FIXING THE DSCB VOLSER IF IT IS INCORRECT         **   00402\n**                                                                 **   00403\n*********************************************************************   00404\n*********************************************************************   00405\n         SPACE                                                          00406\nCKDSCBV  CLC   UCBVOLI,DS1DSSN         VOLSER MATCH?                    00407\n         BNE   CHGV                       NO... BAD VOLSER, GO FIX IT   00408\n         B     PRINT                   PRINT AND GET ANOTHER DSCB       00409\nCHGV     MVC   DS1DSSN(6),UCBVOLI      MOVE IN CORRECT VOLSER           00410\n         MVC   VCHG(11),=C'CHANGED    ' SAY WE CHANGED THE VOLSER       00411\n         MVC   STAT(2),=C'**'          INDICATE VOLSER WAS CHANGED      00412\n         B     PRINTW                  GO PRINT AND REWRITE             00413\n         EJECT                                                          00414\n*********************************************************************   00415\n*********************************************************************   00416\n**                                                                 **   00417\n**       REWRITE THE DSCB IF WE HAVE CHANGED SOMETHING             **   00418\n**                                                                 **   00419\n*********************************************************************   00420\n*********************************************************************   00421\n         SPACE                                                          00422\nREWRITE  MVI   BADSW,C'1'              WE HAVE CHANGED SOMETHING        00423\n         USING CVPL,R1                                                  00424\n         XR    R9,R9                   ZERO OUT REGISTER 9              00425\n         LA    R9,DS1DSNAM             LOADING THE DSN OF BAD DSCB      00426\n         XR    R8,R8                   ZERO OUT REGISTER 8              00427\n         LA    R8,BUFLIST              LOADING THE ADDRESS OF BUFLIST   00428\n         EJECT                                                          00429\n         ENQ   (QNAME,VOLUME,E,6,SYSTEM)  ENQ THE VTOC                  00430\n         SPACE 3                                                        00431\n*        RESERVE (CNBVOL,RVOLUME,E,0,SYSTEMS),UCB=(R5) RESERVE IT       00432\n         EJECT                                                          00433\n         CVAFDIR ACCESS=WRITE,DSN=(R9),BUFLIST=(R8),                   X00434\n               BRANCH=NO,UCB=(R5),IOAREA=NOKEEP,MAPRCDS=NO              00435\n         EJECT                                                          00436\n         DEQ   (QNAME,VOLUME,6,SYSTEM)    DEQ THE VTOC                  00437\n         SPACE 3                                                        00438\n*        DEQ   (CNBVOL,VOLUME,6,SYSTEMS),UCB=(R5) RELEASE THE VTOC      00439\n         SPACE                                                          00440\n         LTR   R15,R15                                                  00441\n         BNZ   CHECKDIR                                                 00442\n         B     SEQLOOP                                                  00443\n         EJECT                                                          00444\n*********************************************************************   00445\n*********************************************************************   00446\n**                                                                 **   00447\n**       PRINT LOOP IF REWRITING THE DSCB                          **   00448\n**                                                                 **   00449\n*********************************************************************   00450\n*********************************************************************   00451\n         SPACE                                                          00452\nPRINTW   CP    LINECTR,=PL2'53'        53 LINES?                        00453\n         BNE   CONT1                       NO...CONTINUE                00454\n         BAL   R10,NEWPAGE                 YES..GO DO NEW PAGE          00455\n         SPACE                                                          00456\nCONT1    AP    LINECTR,ONE             ADD ONE TO LINE COUNTER          00457\n         PUT   SYSPRINT,PRINTLNE       PRINT THE LINE                   00458\n         B     REWRITE                                                  00459\n         EJECT                                                          00460\n*********************************************************************   00461\n*********************************************************************   00462\n**                                                                 **   00463\n**       PRINT LOOP IF NOT REWRITING THE DSCB                      **   00464\n**                                                                 **   00465\n*********************************************************************   00466\n*********************************************************************   00467\n         SPACE                                                          00468\nPRINT    CP    LINECTR,=PL2'53'        FULL PAGE?                       00469\n         BNE   CONT2                      NO... CONTINUE                00470\n         BAL   R10,NEWPAGE                YES.. NEW PAGE                00471\n         SPACE                                                          00472\nCONT2    AP    LINECTR,ONE             ADD ONE TO LINE COUNTER          00473\n         PUT   SYSPRINT,PRINTLNE       PRINT THE LINE                   00474\n         B     SEQLOOP                 GO GET NEXT DSCB                 00475\n         EJECT                                                          00476\n*********************************************************************   00477\n*********************************************************************   00478\n**                                                                 **   00479\n**       HAVE AND INVALID UCB.                                     **   00480\n**                                                                 **   00481\n*********************************************************************   00482\n*********************************************************************   00483\n         SPACE                                                          00484\nBADUCB   WTO   'INVALID UCB',ROUTCDE=(11) NO...INDICATE INVALID UCB     00485\n         L     R15,12                  SET BAD RETURN CODE              00486\n         B     EOF                             AND RETURN               00487\n         EJECT                                                          00488\n*********************************************************************   00489\n*********************************************************************   00490\n**                                                                 **   00491\n**       NO PARM SPECIFIED                                         **   00492\n**                                                                 **   00493\n*********************************************************************   00494\n*********************************************************************   00495\n         SPACE                                                          00496\nNOPARM   WTO   'NO PARM SPECIFIED',ROUTCDE=(11)     YES..               00497\n         L     R15,4                   SET BAD RETURN CODE              00498\n         B     EOJ                            AND RETURN                00499\n         EJECT                                                          00500\n*********************************************************************   00501\n*********************************************************************   00502\n**                                                                 **   00503\n**      BAD PARM SPECIFIED                                         **   00504\n**                                                                 **   00505\n*********************************************************************   00506\n*********************************************************************   00507\n         SPACE                                                          00508\nBADPARM  WTO   'INVALID PARM SPECIFIED',ROUTCDE=(11)     YES..          00509\n         L     R15,4                   SET BAD RETURN CODE              00510\n         B     EOJ                            AND RETURN                00511\n         EJECT                                                          00512\n*********************************************************************   00513\n*********************************************************************   00514\n**                                                                 **   00515\n**       ERROR VOLUME NOT MOUNTED.                                 **   00516\n**                                                                 **   00517\n*********************************************************************   00518\n*********************************************************************   00519\n         SPACE                                                          00520\nNOMOUNT  WTO   'VOLUME NOT MOUNTED',ROUTCDE=(11)                        00521\n         L     R15,8                              SET BAD RETURN CODE   00522\n         B     EOF                                AND GO TO EOJ         00523\n         EJECT                                                          00524\n*********************************************************************   00525\n*********************************************************************   00526\n**                                                                 **   00527\n**       ERROR FROM DSCB WRITE (CVAFDIR)                           **   00528\n**                                                                 **   00529\n*********************************************************************   00530\n*********************************************************************   00531\n         SPACE                                                          00532\nCHECKDIR DS    0H                                                       00533\n         WTO   'ERROR FROM CVAFDIR',ROUTCDE=(11)                        00534\n         ABEND 10,DUMP                            ABEND                 00535\n         EJECT                                                          00536\n*********************************************************************   00537\n*********************************************************************   00538\n**                                                                 **   00539\n**       ERROR VOLUME NOT DASD.                                    **   00540\n**                                                                 **   00541\n*********************************************************************   00542\n*********************************************************************   00543\n         SPACE                                                          00544\nNODASD   WTO   'VOLUME NOT DASD',ROUTCDE=(11)                           00545\n         L     R15,8                              SET BAD RETURN CODE   00546\n         B     EOF                                AND GO TO EOJ         00547\n         EJECT                                                          00548\n*********************************************************************   00549\n*********************************************************************   00550\n**                                                                 **   00551\n**       EOJ PROCESSING.                                           **   00552\n**                                                                 **   00553\n*********************************************************************   00554\n*********************************************************************   00555\n         SPACE                                                          00556\nEOF      CLI   BADSW,C'1'              ANY BAD DSCB'S?                  00557\n         BE    ENDIT                      YES..EOJ                      00558\n         BAL   R10,NEWPAGE                NO...GO DO NEW PAGE           00559\n         PUT   SYSPRINT,BLANKS                 PRINT BLANK LINE         00560\n         PUT   SYSPRINT,NOBAD                  WRITE...NO UPDATES       00561\nENDIT    CLOSE SYSPRINT                CLOSE PRINT FILE                 00562\nEOJ      ENDALL CODE=(15)              RETURN TO MVS WITH RETURN CODE   00563\n         EJECT                                                          00564\n*********************************************************************   00565\n*********************************************************************   00566\n**                                                                 **   00567\n**       NEW PAGE ROUTINE.                                         **   00568\n**                                                                 **   00569\n*********************************************************************   00570\n*********************************************************************   00571\n         SPACE                                                          00572\nNEWPAGE  AP    PAGECTR,ONE             ADD ONE TO PAGE COUNTER          00573\n         MVC   PAGE,PATTERN            MOVE IN PAGE NUMBER PATTERN      00574\n         ED    PAGE,PAGECTR            EDIT THE PAGE NUMBER IN          00575\n         PUT   SYSPRINT,HEADER         PRINT HEADER                     00576\n         PUT   SYSPRINT,BLANKS         PRINT BLANK LINE                 00577\n         PUT   SYSPRINT,HEADER2        PRINT HEADER2                    00578\n         PUT   SYSPRINT,UNDERL         UNDERLINE IT                     00579\n         PUT   SYSPRINT,BLANKS         PRINT BLANK LINE                 00580\n         SP    LINECTR,LINECTR         CLEAR LINE COUNTER               00581\n         BR    R10                                                      00582\n         EJECT                                                          00583\n*********************************************************************   00584\n*********************************************************************   00585\n**                                                                 **   00586\n**       SYSPRINT DCB                                              **   00587\n**                                                                 **   00588\n*********************************************************************   00589\n*********************************************************************   00590\n         SPACE                                                          00591\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA    00592\n         EJECT                                                          00593\n*********************************************************************   00594\n*********************************************************************   00595\n**                                                                 **   00596\n**       NO ERRORS FOUND LINE.                                     **   00597\n**                                                                 **   00598\n*********************************************************************   00599\n*********************************************************************   00600\n         SPACE                                                          00601\nNOBAD    DS   0CL133                                                    00602\n         DC   C' '                                                      00603\n         DC   CL132'NO DSCB''S CHANGED'                                 00604\n         EJECT                                                          00605\n*********************************************************************   00606\n*********************************************************************   00607\n**                                                                 **   00608\n**       HEADER LINE.                                              **   00609\n**                                                                 **   00610\n*********************************************************************   00611\n*********************************************************************   00612\n         SPACE                                                          00613\nHEADER   DS   0CL133                                                    00614\n         DC   C'1'                                                      00615\n         DC   CL15' '                                                   00616\n         DC   C'STATUS OF DSCB CHANGES FOR VOLUME '                     00617\nPVOL     DS   CL6                                                       00618\n         DC   C' ON UNIT '                                              00619\nPUNIT    DS   CL3                                                       00620\n         DC   C' '                                                      00621\n         DC   C'USING PARM VALUE - '                                    00622\nPPARM    DS   CL6                                                       00623\n         DC   CL15' '                                                   00624\n         DC   C'PAGE '                                                  00625\nPAGE     DS   CL2                                                       00626\n         DC   CL20' '                                                   00627\n         EJECT                                                          00628\n*********************************************************************   00629\n*********************************************************************   00630\n**                                                                 **   00631\n**       HEADER LINE 2                                             **   00632\n**                                                                 **   00633\n*********************************************************************   00634\n*********************************************************************   00635\n         SPACE                                                          00636\nHEADER2  DS   0CL133                                                    00637\n         DC   C' '                                                      00638\n         DC   CL2' '                                                    00639\n         DC   C' '                                                      00640\n         DC   CL44'DATASET NAME'                                        00641\n         DC   CL2' '                                                    00642\n         DC   CL6'VOLSER'                                               00643\n         DC   CL4' '                                                    00644\n         DC   C'VOLSER CHANGE'                                          00645\n         DC   CL6' '                                                    00646\n         DC   C'RACF CHANGE'                                            00647\n         DC   CL80' '                                                   00648\n         EJECT                                                          00649\n*********************************************************************   00650\n*********************************************************************   00651\n**                                                                 **   00652\n**       UNDER LINE HEADER 2                                       **   00653\n**                                                                 **   00654\n*********************************************************************   00655\n*********************************************************************   00656\n         SPACE                                                          00657\nUNDERL   DS   0CL133                                                    00658\n         DC   C'+'                                                      00659\n         DC   CL2' '                                                    00660\n         DC   C' '                                                      00661\n         DC   44C'_'                                                    00662\n         DC   CL2' '                                                    00663\n         DC   6C'_'                                                     00664\n         DC   CL4' '                                                    00665\n         DC   13C'_'                                                    00666\n         DC   CL6' '                                                    00667\n         DC   11C'_'                                                    00668\n         DC   CL80' '                                                   00669\n         EJECT                                                          00670\n*********************************************************************   00671\n*********************************************************************   00672\n**                                                                 **   00673\n**       PRINT  LINE.                                              **   00674\n**                                                                 **   00675\n*********************************************************************   00676\n*********************************************************************   00677\n         SPACE                                                          00678\nPRINTLNE DS   0CL133                                                    00679\nCC       DC   C' '                                                      00680\nSTAT     DS   CL2                                                       00681\n         DC   C' '                                                      00682\nDSNAME   DS   CL44                                                      00683\n         DC   CL2' '                                                    00684\nVOLSER   DS   CL6                                                       00685\n         DC   CL4' '                                                    00686\nVCHG     DS   CL11                                                      00687\n         DC   CL8' '                                                    00688\nRCHG     DS   CL11                                                      00689\n         DC   CL80' '                                                   00690\n         EJECT                                                          00691\n*********************************************************************   00692\n*********************************************************************   00693\n**                                                                 **   00694\n**       STORAGE AND CONSTANTS.                                    **   00695\n**                                                                 **   00696\n*********************************************************************   00697\n*********************************************************************   00698\n         SPACE                                                          00699\n         DS  0F                                                         00700\nQNAME    DC   CL8'SYSVTOC '                                             00701\n         DS  0F                                                         00702\nCNBVOL   DC   CL8'CNBVOL  '                                             00703\nFLAG     DS   CL1                                                       00704\n         DS  0F                                                         00705\nRVOLUME  DS  0CL7                                                       00706\n         DC   X'06'                                                     00707\nVOLUME   DS   CL6                                                       00708\nPAGECTR  DC   PL1'0'                                                    00709\nLINECTR  DC   PL2'0'                                                    00710\nONE      DC   PL1'1'                                                    00711\nPATTERN  DC   XL2'4021'                                                 00712\n         EJECT                                                          00713\nABEND12  ABEND 12,DUMP                                                  00714\nLISTSTRT DC    F'0'                    ADDR O FCCHHR TO START SEARCH    00715\nLISTPRMS EQU   *                                                        00716\nLISTBUF  DC    F'0'                                                     00717\nLISTCHR  DS    0F                                                       00718\nLISTLAST DC    X'00'                                                    00719\nLASTBIT  EQU   X'80'                                                    00720\n         DC    AL3(0)                                                   00721\nLISTNEXT EQU   *                                                        00722\n         EJECT                                                          00723\nBADSW    DS    CL1                                                      00724\nIXVTOC   DS    CL1                                                      00725\nBLANKS   DC    CL133' '                                                 00726\nFORMAT1  DC    C'1'                    FORMAT 1 DSCB                    00727\nSAVE13   DC    F'0'                    IOSLOOK SAVE AREA                00728\nIOSSAVE  DC    16F'0'                  IOSLOOK SAVE AREA                00729\nADDRWRK  DC    XL3'000000'             DEVICE ADDRESS WORK AREA         00730\nHEX      DC    CL255' '                HEX TRANSLATE TABLE              00731\n         ORG   HEX+C'0'                                                 00732\n         DC    X'00010203040506070809' DIGITS 0-9                       00733\n         ORG   HEX+C'A'                                                 00734\n         DC    X'0A0B0C0D0E0F'         CHARS A-F                        00735\n         ORG                                                            00736\n         EJECT                                                          00737\n*********************************************************************   00738\n*********************************************************************   00739\n**                                                                 **   00740\n**       LITERALS                                                  **   00741\n**                                                                 **   00742\n*********************************************************************   00743\n*********************************************************************   00744\n         SPACE                                                          00745\n         LTORG                                                          00746\n         SPACE                                                          00747\n         EJECT                                                          00748\n*********************************************************************   00749\n*********************************************************************   00750\n**                                                                 **   00751\n**       CVAF MAPPING MACRO                                        **   00752\n**                                                                 **   00753\n*********************************************************************   00754\n*********************************************************************   00755\n         SPACE                                                          00756\n         LTORG                                                          00757\nBUFLIST  ICVAFBFL DSECT=NO                                              00758\n         EJECT                                                          00759\n*********************************************************************   00760\n*********************************************************************   00761\n**                                                                 **   00762\n**       FORMAT 1 DSCB MAPPING MACRO                               **   00763\n**                                                                 **   00764\n*********************************************************************   00765\n*********************************************************************   00766\n         SPACE                                                          00767\n         IECSDSL1  (1)                                                  00768\nDSCBLTH  EQU   *-IECSDSL1              LENGTH OF DSCB                   00769\n         EJECT                                                          00770\n*********************************************************************   00771\n*********************************************************************   00772\n**                                                                 **   00773\n**       CVAFSEQ (NON-INDEXED VTOC)                                **   00774\n**                                                                 **   00775\n*********************************************************************   00776\n*********************************************************************   00777\n         SPACE                                                          00778\nCVPL     CVAFSEQ ACCESS=GT,BRANCH=(YES,PGM),BUFLIST=BUFLIST,MF=L        00779\n         ORG   CVPL                                                     00780\n         EJECT                                                          00781\n*********************************************************************   00782\n*********************************************************************   00783\n**                                                                 **   00784\n**       CVPL MAPPING MACRO                                        **   00785\n**                                                                 **   00786\n*********************************************************************   00787\n*********************************************************************   00788\n         SPACE                                                          00789\nCVPLMAP  ICVAFPL  DSECT=NO                                              00790\n         EJECT                                                          00791\n*********************************************************************   00792\n*********************************************************************   00793\n**                                                                 **   00794\n**       CVT  MAPPING MACRO                                        **   00795\n**                                                                 **   00796\n*********************************************************************   00797\n*********************************************************************   00798\n         SPACE                                                          00799\n         CVT   DSECT=YES                                                00800\n         EJECT                                                          00801\n*********************************************************************   00802\n*********************************************************************   00803\n**                                                                 **   00804\n**    IOSLOOK MAPPING MACRO                                        **   00805\n**                                                                 **   00806\n*********************************************************************   00807\n*********************************************************************   00808\n         SPACE                                                          00809\n         IECDIOCM                                                       00810\n         EJECT                                                          00811\n*********************************************************************   00812\n*********************************************************************   00813\n**                                                                 **   00814\n**       UCB  MAPPING MACRO                                        **   00815\n**                                                                 **   00816\n*********************************************************************   00817\n*********************************************************************   00818\n         SPACE                                                          00819\n         IEFUCBOB LIST=YES                                              00820\n         END                                                            00821\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TMPFRONT": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01)\\x01)\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 297, "newlines": 297, "modlines": 0, "user": "FILE013"}, "text": "TEC402   TITLE 'TSO TERMINAL MONITOR PROGRAM FRONT-END'\n***********************************************************************\n* MEMBER: TEC402                                                      *\n* MACRO LIBS NEEDED: SYS1.MACLIB                                      *\n*                    SYS1.AMODGEN\n* LINKAGE EDITOR PARMS: LET,NCAL,RENT,AC=1                            *\n*                                                                     *\n* PURPOSE:                                                            *\n*        TEC402 IS USED TO:\n*          (1) PREVENT A TSO USER FROM DE-ALLOCATING HIS SPFMENUS AND *\n*              SPFPROCS DATA SETS. THIS KEEPS THE USER FROM BYPASSING *\n*              THE LIMITS PLACED ON HIM BY THE SPF MENU TAILORING     *\n*              FACILITIES. FOR EXAMPLE, IF ALLOWED TO DE-ALLOCATE     *\n*              SPFMENUS AND SPFPROCS AND SUBSTITUTE OTHER DATA SETS,  *\n*              A USER COULD PERFORM SPF FUNCTIONS THAT WE DON'T WANT  *\n*              THAT USER TO HAVE AVAILABLE.                           *\n*              NOTE: THIS FUNCTION WILL NOT BE PERFORMED FOR USERIDS  *\n*              THAT BEGIN WITH 'TEC'.                                 *\n*          (2) PREVENT A TSO USER FROM LOGGING ON WHEN OPERATIONS     *\n*              (OR TEC SUPPORT DURING TEST TIME) DOESN'T WANT ANYONE  *\n*              LOGGING ON. THIS IS MORE FLEXIBLE THAN SETTING USERMAX *\n*              TO 0 SINCE IT LETS SOME PEOPLE LOG ON WHILE KEEPING    *\n*              OTHERS OFF. ALSO, WE USE TCAM, NOT VTAM, AND SO CAN'T  *\n*              SET USERMAX TO 0 TO KEEP PEOPLE OFF.                   *\n*                                                                     *\n* METHOD:                                                             *\n*        THE PROGRAM IS USED AS A FRONT END TO IKJEFT01 IN THE TSO    *\n*        LOGON PROC. TEC402 RACHECKS FOR READ AUTHORITY TO            *\n*        APPL  TSOXXXX WHERE XXXX IS THE SMF SID FROM THE SMCA. IF    *\n*        SUCCESSFUL, TEC402 OPENS THE SPFMENUS AND SPFPROCS DATA      *\n*        SETS, THUS PREVENTING THEIR DE-ALLOCATION, AND THEN LINKS    *\n*        TO IKJEFT01. UPON RETURN FROM IKJEFT01, THE DATA SETS ARE    *\n*        CLOSED.                                                      *\n*                                                                     *\n* RETURN CODES:                                                       *\n*        THE RETURN CODE GENERATED BY IKJEFT02 IS PROPAGATED.         *\n*                                                                     *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*        12/17/79  INITIAL VERSION.                                   *\n*        12/18/79  AFTER RETURN FROM IKJEFT02, FOLLOW SAVE AREA CHAIN *\n*                    FROM TCBFSA TO FIND OUR WORKAREA/REGS            *\n*        07/01/80  BEFORE DOING ANYTHING, RACHECK FOR READ AUTHORITY  *\n*                    TO APPL  TSOXXXX WHERE XXXX IS THE SMF SYSID. IF *\n*                    NOT AUTHORIZED, DO NOT ALLOW LOGON. DO NOT OPEN  *\n*                    MENUS/PROCS FOR TEC USERS                        *\n*        09/12/80  IF THE RACHECK IS NOT SUCCESSFUL, WAIT 15 SECONDS  *\n*                    AFTER ISSUING THE MESSAGE IN CASE TSO/VTAM IS    *\n*                    BEING USED SO MESSAGE CAN BE READ. NOTE THAT     *\n*                    THE BROADCAST MESSAGES WILL HAVE BEEN DISPLAYED  *\n*                    BEFORE OUR MESSAGE, SO THEY CAN BE USED TO       *\n*                    EXPLAIN WHY TSO IS NOT AVAILABLE.                *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*     I N I T I A L I Z A T I O N                                     *\n*                                                                     *\n***********************************************************************\n*\nTEC402   CSECT\n         USING *,R15                    #####\n         SAVE  (14,12),,TEC402_&SYSDATE_&SYSTIME\n         LR    R12,R15                  GET GOOD BASE REG\n         DROP  R15                      #####\n         USING TEC402,R12               #####\n         LR    R2,R1                    SAVE PARM LIST\n         GETMAIN R,LV=WORKLEN           GET SOME STORAGE\n         ST    R13,4(,R1)               LINK SAVE AREAS\n         ST    R1,8(,R13)\n         LR    R13,R1                   NEW SAVE AREA POINTER\n         USING WORK,R13                 #####\n         ST    R2,WPARM                 SAVE PARM LIST\n         MVC   WMENUDCB,CMENUDCB        COPY DCB'S TO WORK AREA\n         MVC   WPROCDCB,CPROCDCB\n         MVC   WOPEN,COPEN              COPY OPEN LIST TO WORK AREA\n         MVC   WRACHECK,CRACHECK        COPY RACHECK LIST TO WORK AREA\n         MVI   WFLAGS,X'00'             INIT FLAG BYTE\n         MVC   WENTITY(8),=CL8'TSOXXXX' INIT RACF ENTITY\n         MVC   WENTITY+8(L'WENTITY-8),WENTITY+7\n         MVC   WNOLOGON,NOLOGON         INIT NO-LOGON MESSAGE\n         XC    WRC,WRC\n         EJECT\n***********************************************************************\n*                                                                     *\n*     C H E C K   F O R   T E C   U S E R                             *\n*                                                                     *\n***********************************************************************\n*\n         L     R2,CVTPTR                CVT\n         USING CVT,R2                   #####\n         L     R3,CVTTCBP               TCB WORDS\n         L     R3,12(,R3)               OUR ASCB\n         USING ASCB,R3                  #####\n         L     R3,ASCBJBNS              GET POINTER TO JOBNAME\n         DROP  R3                       #####\n         CLC   =C'TEC',0(R3)            IS IT TEC?\n         BNE   RACHECK                  /NO  - GO DO RACHECK\n         OI    WFLAGS,WTECUSER          /YES - SET FLAG AND RACHECK\n         EJECT\n***********************************************************************\n*                                                                     *\n*     R A C H E C K   F O R   L O G O N   A L L O W E D               *\n*                                                                     *\n***********************************************************************\n*\nRACHECK  L     R3,CVTSMCA               POINT TO SMCA\n         USING SMCABASE,R3              #####\n         MVC   WENTITY+3(4),SMCASID     COMPLETE ENTITY NAME FROM SID\n         MVC   WNOLOGON+47(4),SMCASID   COMPLETE NO-LOGON MESSAGE\n         DROP  R3                       #####\n         RACSTAT ,                      ENSURE RACF AVAILABLE\n         LTR   R15,R15\n         BNZ   CHEKDEV\n         RACHECK ENTITY=(WENTITY),      DO THE RACHECK                 X\n               MF=(E,WRACHECK)\n         LTR   R15,R15                  WAS USER AUTHORIZED?\n         BZ    CHEKDEV                  /YES - ALLOW LOGON TO CONTINUE\n         C     R15,=F'4'                WAS ENTITY FOUND?\n         BE    CHEKDEV                  /NO  - ALLOW LOGON TO CONTINUE\n*                                       /YES - DISALLOW LOGON\n         L     R3,CVTTCBP               SETUP RELOGON BUFFER\n         L     R3,4(,R3)                TCB\n         USING TCB,R3                   #####\n         L     R3,TCBJSCB               JSCB\n         USING IEZJSCB,R3               #####\n         L     R3,JSCBPSCB              PSCB\n         USING PSCB,R3                  #####\n         L     R3,PSCBRLGB              THE RELOGON BUFFER\n         DROP  R3                       #####\n         MVC   6(6,R3),=C'LOGOFF'       SETUP LOGOFF COMMAND\n         LA    R3,WNOLOGON\n         TPUT  (R3),L'WNOLOGON,WAIT,HOLD  SEND THE MESSAGE\n         STIMER WAIT,BINTVL=WAITTIME    WAIT TO ALLOW TIME FOR MSG\n         B     RETURN                   TO BE READ\n         EJECT\n***********************************************************************\n*                                                                     *\n*     C H E C K   F O R   M I S S I N G   D D   S T A T E M E N T S   *\n*                                                                     *\n***********************************************************************\n*\nCHEKDEV  TM    WFLAGS,WTECUSER          IS THIS A TEC USER?\n         BO    LINK                     /YES - DON'T OPEN MENUS/PROCS\n         DEVTYPE CSPFMENU,WDEVCHAR      IS SPFMENUS DD STMT THERE?\n         LTR   R15,R15                    .\n         BNZ   TRYPROCS                 /NO  - GO TRY SPFPROCS DD\n         OI    WFLAGS,WMENUDD           /YES - SET FLAG SO WE OPEN IT\n*\nTRYPROCS DEVTYPE CSPFPROC,WDEVCHAR      IS SPFPROCS DD STMT THERE?\n         LTR   R15,R15                    .\n         BNZ   OPENMENU                 /NO  - GO OPEN THINGS\n         OI    WFLAGS,WPROCDD           /YES - SET FLAG SO WE OPEN IT\n         EJECT\n***********************************************************************\n*                                                                     *\n*     O P E N   D C B ' S   I F   N E C E S S A R Y                   *\n*                                                                     *\n* (WE ASSUME THE OPEN'S WILL WORK, AS ALLOCATION WAS SUCCESSFUL AND   *\n*  WE KNOW WHAT THE LOGON PROCS CONTAIN)                              *\n***********************************************************************\n*\nOPENMENU TM    WFLAGS,WMENUDD           SHOULD WE OPEN THE MENUS DD?\n         BZ    OPENPROC                 /NO  - GO TRY PROCS DD\n         OPEN  (WMENUDCB,INPUT),        /YES - OPEN IT                 X\n               MF=(E,WOPEN)\n*\nOPENPROC TM    WFLAGS,WPROCDD           SHOULD WE OPEN THE PROCS DD?\n         BZ    LINK                     /NO  - GO LINK TO IKJEFT01\n         OPEN  (WPROCDCB,INPUT),        /YES - OPEN IT                 X\n               MF=(E,WOPEN)\n         EJECT\n***********************************************************************\n*                                                                     *\n*     L I N K   T O   I K J E F T 0 1 ( T M P )                       *\n*                                                                     *\n***********************************************************************\n*\nLINK     L     R1,WPARM                 GET THE PARM LIST\n         LINK  EP=IKJEFT01              LINK TO IKJEFT01 TO START TSO\n*                                       SESSION\n*\n* AT THIS POINT NONE OF THE REGS ARE GOOD, SO WE MUST FIND THEM AGAIN\n*\n*\n         L     R2,CVTPTR                CVT\n         USING CVT,R2                   #####\n         L     R2,CVTTCBP               TCB WORDS\n         L     R2,4(,R2)                OUR TCB\n         USING TCB,R2                   #####\n         L     R13,TCBFSA               FIRST SAVE AREA IN CHAIN\n         L     R13,8(,R13)              OUR WORKAREA\n         LM    R2,R12,28(R13)           OUR REGS\n         DROP  R2                       #####\n         ST    R15,WRC                  SAVE THE RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*     C L O S E   T H E   D C B ' S                                   *\n*                                                                     *\n***********************************************************************\n*\n         TM    WFLAGS,WMENUDD           WAS MENU DD OPENED?\n         BZ    CLOSPROC                 /NO  - GO TRY PROCS\n         CLOSE (WMENUDCB),MF=(E,WOPEN)  /YES - CLOSE IT\n*\nCLOSPROC TM    WFLAGS,WPROCDD           WAS PROC DD OPENED?\n         BZ    RETURN                   /NO  - GO RETURN\n         CLOSE (WPROCDCB),MF=(E,WOPEN)  /YES - CLOSE IT\n         EJECT\n***********************************************************************\n*                                                                     *\n*     F R E E   W O R K   A R E A   A N D   L E A V E                 *\n*                                                                     *\n***********************************************************************\n*\nRETURN   L     R2,WRC                   SAVE THE RETURN CODE\n         LR    R1,R13                   GET ADDRESS TO FREE\n         L     R13,4(,R13)              GET PREVIOUS SAVE AREA\n         FREEMAIN R,A=(1),LV=WORKLEN    FREE THE GOTTEN AREA\n         LR    R15,R2                   SET THE RETURN CODE\n         RETURN (14,12),RC=(15)         RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*     C O N S T A N T S ,   E T C .                                   *\n*                                                                     *\n***********************************************************************\n*\n         DS    0F\nCSPFMENU DC    CL8'SPFMENUS'            CONSTANTS FOR DEVTYPE\nCSPFPROC DC    CL8'SPFPROCS'              .\nWAITTIME DC    F'1500'                  FIFTEEN SECOND INTERVAL\nCMENUDCB DCB   DDNAME=SPFMENUS,         CONSTANT DCB FOR SPFMENUS      X\n               DSORG=PS,                  (PS SO DD DUMMY WILL WORK)   X\n               MACRF=R                    (FOR BSAM)\nLMENUDCB EQU   *-CMENUDCB               LENGTH OF MENU DCB\n         DS    0F\nCPROCDCB DCB   DDNAME=SPFPROCS,         CONSTANT DCB FOR SPFPROCS      X\n               DSORG=PS,                  (PS SO DD DUMMY WILL WORK)   X\n               MACRF=R                    (FOR BSAM)\nLPROCDCB EQU   *-CPROCDCB               LENGTH OF PROC DCB\n         DS    0F\nCOPEN    OPEN  (CMENUDCB,INPUT),MF=L    CONSTANT OPEN LIST\nLOPEN    EQU   *-COPEN\n         DS    0F\nCRACHECK RACHECK CLASS='APPL',          CONSTANT RACHECK LIST          X\n               ATTR=READ,                                              X\n               LOG=NONE,                                               X\n               MF=L\nLRACHECK EQU   *-CRACHECK\n*\nNOLOGON  DC    C'TEC40200 TSO IS NOT AVAILABLE AT THIS TIME (TSOXXXX)'\n         LTORG ,\n         REGEQU\n         EJECT\n***********************************************************************\n*                                                                     *\n*     W O R K   A R E A   D S E C T                                   *\n*                                                                     *\n***********************************************************************\n*\nWORK     DSECT\n         DS    18F                      SAVE AREA (MUST BE FIRST)\nWDEVCHAR DS    D                        AREA FOR DEVTYPE INFO\nWMENUDCB DS    XL(LMENUDCB)             AREA FOR SPFMENUS DCB\n         DS    0F\nWPROCDCB DS    XL(LPROCDCB)             AREA FOR SPFPROCS DCB\n         DS    0F\nWOPEN    DS    XL(LOPEN)                AREA FOR OPEN LIST\n         DS    0F\nWRACHECK DS    XL(LRACHECK)             AREA FOR OPEN LIST\nWPARM    DS    A                        AREA TO SAVE PARM POINTER (R1)\nWRC      DS    F                        AREA TO SAVE IKJEFT02 RC\nWFLAGS   DS    X                        FLAG BYTE:\nWMENUDD  EQU   X'80'                      SPFMENUS DD PRESENT\nWPROCDD  EQU   X'40'                      SPFPROCS DD PRESENT\nWTECUSER EQU   X'20'                      USER IS A 'TEC' USER\nWENTITY  DS    CL39                     ENTITY FOR RACHECK\nWNOLOGON DS    CL(L'NOLOGON)            MODIFIABLE NO-LOGON MESSAGE\nWORKLEN  EQU   *-WORK                   LENGTH OF WORK AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*     O T H E R   D S E C T S                                         *\n*                                                                     *\n***********************************************************************\n*\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IEESMCA\n         IEZJSCB\n         IHAASCB\n         IKJPSCB\n         IKJTCB\n         END   TEC402\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TMS#RACF": {"ttr": 11017, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x8e\\x00\\x8e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 142, "newlines": 142, "modlines": 0, "user": "FILE013"}, "text": "IEFUJI   TITLE 'MVS SMF JOB INITIATION EXIT'                            00001**2\nIEFUJI   CSECT                                                          00002**2\n* FUNCTION                                                              00003**2\n*                                                                       00004**2\n* THE PURPOSE OF THIS ROUTINE IS TO PASS USERID AND ACCOUNTING          00005**2\n* INFORMATION TO THE TMS ACCOUNTING ROUTINE TMSACTRT.                   00006**2\n* THE TMS USER ACCOUNTING FIELD IN THE TMC RECORD IS 41 BYTES.          00007**2\n* ALL TMS ROUTINES ASSUME 41 BYTES ARE USED. THIS ROUTINE               00008**2\n* PLACES RACFID IN 1-6 FOLLOWED BY AN 8 BYTE FIELD IN 7-14              00009**2\n* OF ACCOUNTING INFO FROM THE SMFJMR FOR A TOTAL 14 BYTES USED.         00010**2\n*                                                                       00011**2\n* INPUT                                                                 00012**2\n*                                                                       00013**2\n*    REGISTER 1 POINTS TO A LIST OF 4 BYTE ADDRESSES FOR THE            00014**2\n*    FOLLOWING FOUR PARAMETERS:                                         00015**2\n*       1 - JOB MANAGEMENT RECORD                                       00016**2\n*       2 - 20 BYTES CONTAINING THE PROGRAMMERS NAME                    00017**2\n*       3 - 1 BYTE INDICATING THE EFFECTIVE JOB PRIORITY                00018**2\n*       4 - JOB ACCOUNTING FIELDS                                       00019**2\n*                                                                       00020**2\n*                                                                       00021**2\n* OUTPUT                                                                00022**2\n*                                                                       00023**2\n*    REGISTER 15 WILL CONTAIN  THE FOLLOWING RETURN CODE:               00024**2\n*       0 - CONTINUE PROCESSING THE JOB                                 00025**2\n*                                                                       00026**2\n* ENTRY POINTS                                                          00027**2\n*                                                                       00028**2\n*    IEFUJI                                                             00029**2\n*                                                                       00030**2\n* EXTERNAL REFERENCES                                                   00031**2\n*                                                                       00032**2\n*    TMSACTRT - VIA LINK                                                00033**2\n*    NOTE: TMACTRT SHOULD BE RESIDENT IN THE LINK PACK AREA             00034**2\n*                                                                       00035**2\n* EXITS, NORMAL - RETURN TO INITIATOR WITH A RETURN CODE OF ZERO        00036**2\n*                                                                       00037**2\n* ATTRIBUTES                                                            00038**2\n*    REENTRANT (REQUIRED FOR LINK PACK AREA RESIDENCY)                  00039**2\n*    AC=1 (REQUIRED FOR ISSUANCE OF RACXTRT MACRO)                      00040**2\n*********************************************************************** 00041**2\n*  CHANGE HISTORY                                                       00042**2\n*    CREATED 05/22/86                                                   00043**2\n*                                                                       00044**2\n*********************************************************************** 00045**2\n         SPACE 3                                                        00046**2\n*********************************************************************** 00047**2\n*                                                                     * 00048**2\n*                 REGISTER EQUATES                                    * 00049**2\n*                                                                     * 00050**2\n*********************************************************************** 00051**2\n         SPACE 3                                                        00052**2\nR0       EQU   0                                                        00053**2\nR1       EQU   1                                                        00054**2\nR2       EQU   2                                                        00055**2\nR3       EQU   3                                                        00056**2\nR4       EQU   4                                                        00057**2\nR5       EQU   5                                                        00058**2\nR6       EQU   6                                                        00059**2\nR7       EQU   7                                                        00060**2\nR8       EQU   8                                                        00061**2\nR9       EQU   9                                                        00062**2\nR10      EQU   10                                                       00063**2\nR11      EQU   11                                                       00064**2\nR12      EQU   12                                                       00065**2\nR13      EQU   13                                                       00066**2\nR14      EQU   14                                                       00067**2\nR15      EQU   15                                                       00068**2\n         EJECT                                                          00069**2\n         SAVE  (14,12),,*     STANDARD LINKAGE                          00070**2\n         SPACE 1                                                        00071**2\n         LR    R12,R15                                                  00072**2\n         USING IEFUJI,R12                                               00073**2\n         LR    R4,R1          SAVE PARAMETER LIST IN R4                 00074**2\n         SPACE 1                                                        00075**2\n         GETMAIN  R,LV=SAVELNTH,SP=245   #2  SPECIFY SUBPOOL 245        00076**2\n         SPACE 1                                                        00077**2\n         LR    R3,R13         RETAIN ADDRESS OF HIGHER SAVE AREA IN R3  00078**2\n         LR    R13,R1                                                   00079**2\n         ST    R13,8(R3)                                                00080**2\n         ST    R3,4(R13)                                                00081**2\n         USING SAVEAREA,R13                                             00082**2\n         SPACE 1                                                        00083**2\n         XC    16(4,R3),16(R3)  SET DEFAULT RETURN CODE OF ZERO         00084**2\n         SPACE 1                                                        00085**2\n*  GO GET THE ACCOUNTING INFORMATION AND RACFID                         00086**2\n         USING SMFPARAM,R4            DSECT OF INPUT PARAMETERS         00087**2\n         L     R2,SMFACCT             ADDRESS OF JOB ACCOUNTING DATA    00088**2\n         MVC   TMSACTNC(8),=CL8'00000000' DEFAULT TO ZEROS              00089**2\n         LA    R5,41                  SET MAX MOVE AT 41 BYTES          00090**2\n         CLI   1(R2),X'00'            IS LENGTH ZERO                    00091**2\n         BE    USERIDM                NO, GO FOR VAR NEW MOVE           00092**2\n         CLI   1(R2),X'29'            TMS MAXIMIM LENGTH IS 41 BYTES    00093**2\n         BH    EXMVC                  IF HIGHER THEN LIMIT IT           00094**2\n         LA    R5,0                   ZERO R5                           00095**2\n         IC    R5,1(R2)               INSERT LENGTH CODE                00096**2\n         BCTR  R5,0                   DECREMENT BY 1                    00097**2\nEXMVC    EX    R5,MVCACT              MOVE NEW VAR ACT NUMBER           00098**2\nUSERIDM  DS    0H                                                       00099**2\n         RACXTRT TYPE=EXTRACT,SUBPOOL=245 ASK RACF FOR PROFILE OF ACEE  00100**2\n         LTR   R15,R15                IF R15 NOT ZERO THEN I CANT       00101**2\n         BNZ   RETURN                 FREEMAIN OR DO TMSACTRT LINK      00102**2\n         MVC   TMSUSERI,24(R1)        MOVE IN RACFID                    00103**2\n         L     R0,0(R1)               SET SUBPOOL AND LENGTH            00104**2\n         FREEMAIN  R,LV=(0),A=(1)     FREEMAIN THAT AREA                00105**2\n*                                                                       00106**2\n         LA    R1,72(R13)             ADDRESS OF TMSACCT IN R1          00107**2\n*                                    ADDRESS OF SAVE AREA ALREADY IN 13 00108**2\n         LINK EP=TMSACTRT             PASS CONTROL TO TMASCTRT          00109**2\n         SPACE 1                                                        00110**2\nRETURN   DS    0H                                                       00111**2\n         LR    R1,R13                                                   00112**2\n         L     R13,4(R13)                                               00113**2\n         FREEMAIN  R,LV=SAVELNTH,SP=245,A=(1)  #2  SPECIFY SUBPOOL 245  00114**2\n         RETURN  (14,12),T                                              00115**2\n         EJECT                                                          00116**2\n         SPACE 3                                                        00117**2\nMVCACT   MVC   TMSACTNC(0),2(R2)                                        00118**2\n         LTORG                                                          00119**2\nSAVEAREA DSECT                                                          00120**2\n         SPACE 1                                                        00121**2\n         DS    18F            STANDARD SAVE AREA                        00122**2\n         SPACE 1                                                        00123**2\n         TMACCT               TMS ACCT AREA DSECT                       00124**2\n         SPACE 1                                                        00125**2\nSAVEEND  EQU   *                                                        00126**2\nSAVELNTH EQU   SAVEEND-SAVEAREA                                         00127**2\n         EJECT                                                          00128**2\n         SPACE 3                                                        00129**2\n*        DSECT OF INPUT PARAMETER LIST POINTED TO BY REG 1              00130**2\n         SPACE                                                          00131**2\nSMFPARAM DSECT                        INPUT PARAMETER LIST              00132**2\nSMFJMR   DS    A                      ADDRESS OF SMF PARAM AREA         00133**2\nSMFPROG  DS    A                      ADDRESS OF PROGRAMMER NAME        00134**2\nSMFPRI   DS    A                      ADDRESS OF JOB SELECTION PRIORITY 00135**2\nSMFACCT  DS    A                      ADDRESS OF JOB ACCOUNTING DATA    00136**2\n*                                       FORMAT OF JOB ACCOUNTING DATA:  00137**2\n*                                         0 - NUMBER OF ACCOUNT FIELDS  00138**2\n*                                         1 - LENGTH OF FIRST FIELD     00139**2\n*                                         2 - FIRST ACCOUNT FIELD       00140**2\n*                                         ETC.                          00141**2\n         END                                                            00142**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOSUB01": {"ttr": 11021, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01N\\x01N\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 334, "newlines": 334, "modlines": 0, "user": "FILE013"}, "text": "IKJEFF10 CSECT\n*\n*  THIS EXIT INSERTS A CONTINUATION OF EACH JOB CARD SUBMITTED BY\n*  A RACF DEFINED USER. THE CONTINUATION CARD CONTAINS THE USER ID\n*  AND LOGON PASSWORD OF THE PERSION SUBMITTING THE JOB. IF THERE\n*  IS NO ROOM TO INSERT A COMMA AND A BLANK THE JOB IS SUBMITTED\n*  WITHOUT ADDING A CONTINNUATION CARD AND A MESSAGE IS SENT TO THE\n*  USER INFORMING THEM OF THIS. IF THE USER IS NOT RACF DEFINED OR\n*  EITHER 'USER' OR 'PASSWORD' KEY WORDS ARE FOUND THEN THE JOB IS\n*  PASSED ON ASIS AND NO MESSAGE IS SENT. YOU CANNOT GET SOMEONE\n*  ELSES PASSWORD BY USING THIS EXIT AS WRITTEN.\n*\n*  THIS EXIT IKJEFF10 REPLACES THE IBM VERSION OF IKJEFF10 WHICH IS\n*  EFECTIVELY A BR14.  THIS EXIT WORKS WITH OR WITHOUT THE TSO/E OR\n*  THE EARLYER TSO COMMAND PACKAGE AS THE DUMMY EXIT IS IN THE BASE\n*  TSO CODE.  THIS EXIT WAS DEVELOPED AT THE GEORGIA DEPARTMENT OF\n*  LABOR AND HAS BEEN IN USE FOR OVER ONE YEAR WITH NO KNOWN PROBLEMS.\n*  WE WILL ATTEMPT TO FIX ERRORS AS LONG AS WE CONTINUE TO USE THIS\n*  EXIT, BUT DO NOT PROMISE THAT WE WILL FIX BUGS OR PROVIDE ANY\n*  SUPPORT IN THE FUTURE.\n*\n*  SEND COMMENTS AND ERROR REPORTS TO:\n*        SYSTEMS SUPPORT UNIT\n*        GEORGIA DEPARTMENT OF LABOR\n*        ROOM 370 STATE LABOR BUILDING\n*        ATLANTA, GA  30334\n*\nR0       EQU 0  OS LINKAGE\nR1       EQU 1  OS LINKAGE - POINTER TO POINTER TO PARM LIST (IEEXITL)\nR2       EQU 2  WORK REGISTER FOR GETMAIN, CVT, USERJCL, AND GENCD\nR3       EQU 3  BASE REGISTER FOR ASCB\nR4       EQU 4  BASE REGISTER FOR ASXB\nR5       EQU 5  BASE REGISTER FOR ACEE\nR6       EQU 6  BASE REGISTER FOR TSB\nR7       EQU 7  BASE REGISTER FOR IEEXITL\nR8       EQU 8  BASE REGISTER FOR IESUBCTD\nR9       EQU 9  WORK REGISTER FOR CHANGING USERJCL (BASE FROM IECARDP)\nR10      EQU 10 WORK REGISTER FOR USERJCL, MSGTEXT1, AND GENCD\nR11      EQU 11 BASE REGISTER FOR GETMAIN AREA (STORED IN IEEXITWD)\nR12      EQU 12 BASE REGISTER\nR13      EQU 13 SAVE AREA\nR14      EQU 14 OS LINKAGE\nR15      EQU 15 OS LINKAGE - RETURN CODE FOR CALLING PROGRAM IKJEFF09\n*\n         USING *,R15\n         SAVE  (14,12),,IKJEFF10-SUBMIT-USER-EXIT-&SYSDATE-&SYSTIME\n         BALR  R12,R0\n         USING *,R12\n*\nPBASE    EQU   *\n         DROP  R15\n*\n*                                    REGISTERS NOT CHAINED UNTIL AFTER\n*                                      GETMAIN\n*\n         L     R7,0(0,R1)            GET ADDRESS OF PARM LIST (IEEXITL)\n         USING IEEXITL,R7\n         L     R8,IESUBCTP           GET ADDRESS OF SUBMIT JCL INFO\n         USING IESUBCTD,R8\n*\n         CLC   IEEXITWD,ZEROS        FIRST INVOCATION OF THIS EXIT?\n         BE    GETMAIN               YES, INITIALIZE\n*\n         L     R11,IEEXITWD          NO, POINT TO SAME GETMAIN AREA\n         B     CONTINUA              GO AROUND GETMAIN\n*\nGETMAIN  EQU   *\n         L     R2,SIZDATD\n         GETMAIN  R,LV=(2),SP=230\n         LR    R11,R1                GET ADDRESS OF GETMAIN DSECT\n         USING DATD,R11\n         ST    R11,IEEXITWD          POINT TO GETMAIN AREA\n         MVC   DATD(1),BLANKS\n         MVC   DATD+1(ENDDATD-DATD-1),DATD       CLEAR GETMAIN AREA\n*\n         L     R2,CVTPTR             GET ADDRESS OF CVT (X'10')\n         L     R2,0(R2)              GET ADDRESS OF LIST AF ADDRESSES\n         L     R3,12(R2)             GET ADDRESS OF CURRENT ASCB\n         USING ASCB,R3\n         L     R4,ASCBASXB           GET ADDRESS OF CURRENT ASXB\n         USING ASXB,R4\n         L     R5,ASXBSENV           GET ADDRESS OF CURRENT ACEE\n         USING ACEE,R5\n         TM    ACEEFLG1,ACEERACF     IS USER RACF DEFINED?\n         BZ    TAKEEXOF              NO, NO MORE JOB CARDS TO COME\n*                                      TO THIS EXIT FOR THIS SUBMIT\n         L     R6,ASCBTSB            GET ADDRESS OF TSB\n         LTR   R6,R6                 IS THERE A TSB ADDRESS?\n         BZ    TAKEEXOF              NO, CAN'T INSERT CARD\n*\n         USING TSB,R6\n         MODESET KEY=ZERO\n         MVC   SAVEPSWD,TSBPSWD      SAVE PASSWORD FROM TSB\n         MODESET KEY=NZERO\n         CLC   SAVEPSWD,ZEROS        IS THERE A LOGON PASSWORD?\n         BE    TAKEEXOF              NO, CAN'T INSERT CARD\n*\n         MVC   SAVEUSER,ACEEUSER     SAVE PASSWORD FROM TSB\n         B     CONTINUA\n*\nTAKEEXOF EQU   *\n         MVI   IETAKEEX,ZEROHEX      TURN OFF TAKE EXIT SWITCH\n         B     SETRC0\n*\nCONTINUA EQU   *\n         LA    R1,SAVE\n         ST    R13,4(,R1)             BACK CHAIN SAVE AREAS\n         ST    R1,8(,R13)             FORWARD CHAIN SAVE AREAS\n         LR    R13,R1                 SET R13 TO NEW SAVE AREA\n         L     R1,4(R13)              SET R1 TO SAVE AREA AT ENTRY\n         L     R1,24(,R1)             RESTORE R1 FROM SAVE AREA\n*\n         TM    IETAKEEX,IETJOB       TAKE EXIT FOR JOB CARD?\n         BZ    SETRC0                SHOULD NOT BE IN THIS EXIT\n*\n         TM    IESTMTYP,IESJOB       IS STATEMENT JOB CARD?\n         BZ    SETRC0                NO, DONT INSERT\n*\n         CLC   IEMSGP,ZEROS          RETURN FROM SENDING MESSAGE?\n         BE    REENT                 NO,\n*\n         MVC   IEMSGP,ZEROS          YES, CLEAR POINTER TO MESSAGE\n         B     SETRC0                THIS CARD ALREADY PROCESSED\n*\nREENT    EQU   *\n         L     R9,IECARDP            GET ADDRESS OF CURRENT\n         LTR   R9,R9                 IS EXIT BEING RE-ENTERED?\n         BZ    GENCD                 YES, INSERT USER AND PASSWORD CARD\n*\nOPRAND   EQU   *\n         CLI   IEOPRAND,ZEROHEX      OPERAND COLUMN?\n         BZ    NOOPRAND              NO OPERANDS ON THIS CARD\n*\n         SR    R2,R2\n         IC    R2,IEOPRAND\n         AR    R9,R2                 REGISTER TO POINT TO OPERAND\n         BCTR  R9,R0\n*\n         L     R10,COMMALMT          IN LOOP, LOOK AT 71 COLUMNS\n         SR    R10,R2                LESS FIRST PART OF CARD\n*\n         SR    R2,R2                 CLEAR FOR QUOTE SEARCH\n*\nCOMPQUOT EQU   *\n         CLC   0(1,R9),QUOTE         IS IT A QUOTE MARK?\n         BNE   CKQUOT                NO,\n*\n         LTR   R2,R2                 IS IT THE BEGINNING QUOTE?\n         BZ    BEGQUOT               YES\n*\n         SR    R2,R2                 NO, END OF QUOTE, RESET SWITCH\n         B     NEXTCOL\n*\nBEGQUOT  EQU   *\n         LA    R2,1                  SET SWITCH ON FOR QUOTE\n         B     NEXTCOL               AND GO TO NEXT COLUMN\n*\nCKQUOT   EQU   *\n         LTR   R2,R2                 ARE WE IN A QUOTATION?\n         BP    NEXTCOL               YES, DONT LOOK FOR PASSWORD=\n*\nCOMPPSWD EQU   *\n         CLC   0(9,R9),PSWDCON       IS IT PASSWORD=?\n         BE    SETSW                 YES, DONT INSERT CARD\n*\nCOMPUSER EQU   *\n         CLC   0(5,R9),USRCON        IS IT USER=?\n         BE    SETSW                 YES, DONT INSERT CARD\n*\nCOMPBLK  EQU   *\n         CLC   0(1,R9),BLANKS        END OF OPERANDS?\n         BNE   NEXTCOL               NO,\n*\n         B     CONTOPER              YES\n*\nNEXTCOL  EQU   *\n         LA    R9,1(R9)              TRY NEXT COLUMN\n         BCT   R10,COMPQUOT          IF NOT AT END OF CARD, LOOP\n*\n         B     CONTOPER              YES, IS OPERAND CONTINUED?\n*\nSETSW    EQU   *\n         MVI   SW,ONE                TURN SWITCH ON, DONT NEED CARD\n*\nCONTOPER EQU   *\n         TM    IESTMTYP,IESOPCON     IS OPERAND TO BE CONTINUED?\n         BO    SETRC0                YES\n*\n         CLI   SW,ONE                NEED TO INSERT CARD?\n         BE    NOINSERT              NO, GO GET NEXT STATEMENT, IF ANY\n*\n         CLC   SAVEUSER,BLANKS       HAVE A GOOD USER VALUE?\n         BE    SETRC0                NO,\n*\n         CLC   SAVEPSWD,BLANKS       HAVE A GOOD PSWD VALUE?\n         BE    SETRC0                NO,\n*\n         CLC   0(2,R9),BLANKS        ROOM FOR COMMA AND BLANK?\n         BE    MVCOMMA               YES, CAN INSERT CARD\n*\n         CLC   0(1,R9),BLANKS        ROOM FOR JUST COMMA?\n         BE    LASTCOL               MAYBE OK\n*\n         B     WARNING               CANT INSERT CARD\n*\nLASTCOL  EQU   *\n         C     R10,ZEROS             AT COLUMN 71?\n         BE    MVCOMMA               YES, CAN PUT COMMA WITHOUT BLANK\n*                                       FOLLOWING\nWARNING  EQU   *\n         MVC   MSG,MSG1              MOVE MSG TO MSG AREA\n         LA    R10,MSG               POINT REGISTER TO MESSAGE AREA\n         ST    R10,IEMSGP            GIVE ADDRESS TO CALLER\n         LA    R15,IEMSG             RC=8, TELL CALLER TO SEND MESSAGE\n         B     RETURN\n*\nMVCOMMA  EQU   *\n         MVI   0(R9),COMMA\n*\n         MVC   SAVETYP,IESTMTYP      SAVE SWITCHES\n         OI    IESTMTYP,IESOPCON     NOW THERE IS A COMMA,\n         OI    IESTMTYP,IESSCON        SO SET THE FLAGS\n         LA    R15,IERETURN          RC=4, TELL CALLER TO RETURN FOR\n         B     RETURN                    INSERTED CARDS\n*\nNOOPRAND EQU   *\n         CLI   SW,ONE                USER OR PASSWORD ALREADY FOUND\n         BNE   SETRC0                OR NOT FOUND AND GENERATED\n*\nNOINSERT EQU   *\n         MVC   SW,BLANKS             TURN SWITCH OFF FOR NEXT JOB CARD\n*\nSETRC0   EQU   *\n         LA    R15,IECONTIN          RC=0, TELL CALLER TO COMPLETE\n*\nRETURN   EQU   *\n         L     R13,4(R13)            RESTORE SAVE AREA\n         RETURN (14,12),RC=(15)\n*\nGENCD    EQU   *\n         LA    R10,CD               POINT WORK REGISTER TO GETMAIN AREA\n         ST    R10,IECARDP          POINT TO INSERTED CARD FOR CALLER\n         MVC   CD(1),BLANKS\n         MVC   CD+1(ENDCD-CD-1),CD  CLEAR CARD AREA\n         MVC   0(19,R10),CDUSER     MOVE USER CONSTANT\n         LA    R10,19(R10)\n         MVC   0(8,R10),SAVEUSRI    MOVE USER TO CARD\n         SR    R2,R2                CLEAR REG FOR LENGTH\n         IC    R2,SAVEUSRL\n         AR    R10,R2               BUMP PAST USER\n         MVC   0(10,R10),CDPSWD     MOVE PASSWORD CONSTANT TO CARD\n         LA    R10,10(R10)\n         MVC   0(8,R10),SAVEPSWD    MOVE PASSWORD TO CARD\n         LA    R10,8(R10)\n         MVC   0(26,R10),CDMSG      MOVE COMMENT CONSTANT\n*\n         MVI   IEOPRAND,FIFTEEN     MOVE OPERAND COLUMN NUMBER\n*\n         MVC   IESTMTYP,SAVETYP     RESTORE SWITCH\n         TM    IESTMTYP,IESSCON     IS THIS LAST CARD?\n         BZ    SETCONTN             YES\n*\n         LR    R10,R11              SET UP WORK REGISTER\n         LA    R10,71(R10)          TO COLUMN 72\n         MVI   0(R10),NONBLANK      AND MOVE X TO COLUMN 72\n*\nSETCONTN EQU   *\n         OI    IESTMTYP,IESCONTN    SET CONTINUATION FLAG\n         B     SETRC0               AND LEAVE\n         EJECT\n*                        CONSTANTS IN PROGRAM\nZEROS    DC    D'0'\n*\nCOMMALMT DC    F'71'\n*\nSIZDATD  DC    AL1(0)\n         DC    AL3(ENDDATD-DATD)\n*\nUSRCON   DC    CL5'USER='\nPSWDCON  DC    CL9'PASSWORD='\nBLANKS   DC    CL9'         '\nQUOTE    DC    XL1'7D'\n*\nCDUSER   DC    CL19'//            USER='\nCDPSWD   DC    CL10',PASSWORD='\nCDMSG    DC    CL26'          GENERATED BY GDL'\n*\nMSG1     EQU   *\nMSGL1    DC    AL2(L'MSGTEXT1+2)\nMSGTEXT1 DC    C'NO SPACE FOR COMMA - CAN NOT INSERT USER/PASSWORD'\n*\nMSGAREAL EQU   L'MSGTEXT1+2          LENGTH OF AREA IN GETMAIN AREA\n*\nCOMMA    EQU   C','\nONE      EQU   C'1'\nNONBLANK EQU   C'X'\nZEROHEX  EQU   X'00'\nFIFTEEN  EQU   X'0F'\n*\n         LTORG\n*                        CONSTANTS IN GETMAIN AREA\nDATD     DSECT\n*                        CONSTANTS IN GETMAIN AREA\nCD       DS    CL80                       CARD TO BE INSERTED IN JCL\nENDCD    EQU   *\n*\nSAVE     DS    CL72                       REGISTER SAVE AREA\n*\nMSG      DS    CL(MSGAREAL)               WARNING MESSAGE TO TSO USER\n*\nSW       DS    CL1                 SWITCH ON(=1) IF USER OR PASSWORD\n*                                     ALREADY ON THE JOB STATEMENT\nSAVEUSER DS    0CL9\nSAVEUSRL DS    AL1\nSAVEUSRI DS    CL8\n*\nSAVEPSWD DS    CL8\n*\nSAVETYP  DS    CL1\n*\nENDDATD  EQU   *\n         EJECT\n         CVT      DSECT=YES\n         EJECT\n         IHAACEE\n         EJECT\n         IHAASCB\n         EJECT\n         IHAASXB\n         EJECT\n         IKJEFFIE IETYPE=SUBMIT\n         EJECT\n         IKJTSB   LIST=YES\n         END   IKJEFF10\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UADSDUMP": {"ttr": 11270, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02\\xbb\\x02\\xbb\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 699, "newlines": 699, "modlines": 0, "user": "FILE013"}, "text": "UADSDUMP TITLE 'UADSDUMP -- UADS UNLOAD PROGRAM'                        00001**1\n**********************************************************************  00002**1\n*                                                                    *  00003**1\n*  MODULE NAME -                                                     *  00004**1\n*                                                                    *  00005**1\n*     UADSDUMP -- UADS UNLOAD PROGRAM                                *  00006**1\n*                                                                    *  00007**1\n*  FUNCTION -                                                        *  00008**1\n*                                                                    *  00009**1\n*     THIS PROGRAM READS THE SYS1.UADS DATASET AND OUTPUTS ACCOUNT   *  00010**1\n*     CONTROL CARDS TO BE USED TO REBUILD SYS1.UADS.                 *  00011**1\n*                                                                    *  00012**1\n*  ATTRIBUTES -                                                      *  00013**1\n*                                                                    *  00014**1\n*     REENTRANT.                                                     *  00015**1\n*                                                                    *  00016**1\n*  ENTRY CONDITIONS -                                                *  00017**1\n*                                                                    *  00018**1\n*     R15 - ENTRY ADDRESS (UADSDUMP)                                 *  00019**1\n*     R14 - RETURN ADDRESS                                           *  00020**1\n*     R13 - ADDRESS OF A STANDARD SAVE AREA                          *  00021**1\n*                                                                    *  00022**1\n*  EXIT CONDITIONS -                                                 *  00023**1\n*                                                                    *  00024**1\n*     NONE.                                                          *  00025**1\n*                                                                    *  00026**1\n*  REGISTER USAGE -                                                  *  00027**1\n*                                                                    *  00028**1\n*     R15 - WORK                                                     *  00029*29\n*     R14 - WORK                                                     *  00030*29\n*     R13 - ADDRESS OF SAVE (WORK) AREA                              *  00031**1\n*     R12 - BASE ADDRESS (UADSDUMP)                                  *  00032**1\n*     R11 - DCB ADDRESS                                              *  00033**1\n*     R10 - DIRECTORY LIST ENTRY                                     *  00034**1\n*     R9  - DIRECTORY BLOCK ENTRY                                    *  00035**1\n*     R8  - ADDRESS OF UADS ENTRY                                    *  00036*37\n*     R7  - ADDRESS OF THE UADS PASSWORD OFFSET BLOCK (DPOB)         *  00037*24\n*     R6  - INTERNAL SUBROUTINE LINKAGE                              *  00038**9\n*     R5  - ADDRESS OF THE UADS ACCOUNT OFFSET BLOCK (DNOB)          *  00039*24\n*     R4  - ADDRESS OF THE UADS PROCEDURE OFFSET BLOCK (DROB)        *  00040*24\n*     R3  - WORK                                                     *  00041*24\n*     R2  - WORK                                                     *  00042*24\n*     R1  - WORK                                                     *  00043**9\n*     R0  - WORK                                                     *  00044**9\n*                                                                    *  00045**1\n*  RESTRICTIONS -                                                    *  00046*36\n*                                                                    *  00047*36\n*     PRESENTLY, THIS PROGRAM PROCESSES SINGLE-BLOCK UADS ENTRIES    *  00048*36\n*     ONLY.  ANY MULTIPLE-BLOCK ENTRIES ARE SKIPPED AND A WARNING    *  00049*36\n*     MESSAGE IS PRINTED (THE FIRST BLOCK IS, HOWEVER, PROCESSED).   *  00050*36\n*     ALSO, THIS PROGRAM ASSUMES THAT THE UADS IS IN THE EXTENDED    *  00051*36\n*     (TSO/E) FORMAT.                                                *  00052*36\n*                                                                    *  00053*36\n*  OPERATION -                                                       *  00054**1\n*     1.  PROGRAM INITIALIZATION IS PERFORMED AND THE MESSAGE DATASET*  00055*36\n*         IS OPENED.  FAILURE TO OPEN THE MESSAGE DATASET FORCES AN  *  00056*36\n*         ABEND.                                                     *  00057*36\n*     2.  THE UADS DIRECTORY IS OPENED AND AN IN-STORAGE MEMBER LIST *  00058*36\n*         IS BUILT FROM THE DIRECTORY.                               *  00059*36\n*     3.  THE UADS IS OPENED (AS A PDS) AND A BUFFER IS OBTAINED     *  00060*37\n*         BASED ON THE BLOCKSIZE.  THE ACCOUNT CARD FILE IS OPENED.  *  00061*37\n*     4.  EACH UADS MEMBER IN THE MEMBER LIST IS READ FROM THE UADS  *  00062*36\n*         DATASET.  AS THE MEMBERS ARE READ, ACCOUNT CONTROL CARDS   *  00063*36\n*         ARE WRITTEN TO THE ACCOUNT DATASET.                        *  00064*36\n*     5.  ONCE THE LAST MEMBER HAS BEEN PROCESSED, THE UADS AND      *  00065*36\n*         ACCOUNT DATASETS ARE CLOSED.                               *  00066*36\n*                                                                    *  00067*36\n*  SAMPLE JCL -                                                      *  00067*36\n*                                                                    *  00067*36\n*    //JOBNAME  JOB (ACCOUNTING DATA),'PROGRAMMER NAME',             *\n*    //         CLASS=X,MSGCLASS=X,NOTIFY=XXXXXX                     *\n*    //UADSDUMP EXEC PGM=UADSDUMP                                    *\n*    //SYSPRINT  DD  SYSOUT=*                                        *\n*    //SYSUDUMP  DD  SYSOUT=*                                        *\n*    //PDS       DD  DSN=SYS1.UADS,DISP=SHR                          *\n*    //*ACCOUNT   DD  DSN=USERID.UADS.SOURCE,DISP=(,CATLG),          *\n*    //*             SPACE=(CYL,(20,2),RLSE),UNIT=3380,              *\n*    //*             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)            *\n*    //ACCOUNT   DD  SYSOUT=*,DCB=(RECFM=F,BLKSIZE=80)               *\n*                                                                    *  00067*36\n***  WHERE THE 'ACCOUNT' DDNAME IS THE OUTPUT DESTINATION,           *  00067*36\n***            'PDS' DDNAME IS THE INPUT SOURCE UADS DATASET         *  00067*36\n*                                                                    *  00067*36\n*                                                                    *  00067*36\n*  CHANGE HISTORY -                                                  *  00068**1\n*                                                                    *  00069**1\n*     WRITTEN 03/86 BY BILL SOMERVILLE, MCI.                         *  00070**1\n*     CHANGED 10/86 BY BILL SOMERVILLE - SUPPORT DIFFERENT BLOCKSIZES*  00071*37\n*        FOR THE VARIOUS TYPES OF SYS1.UADS.                         *  00072*37\n*                                                                    *  00073*37\n**********************************************************************  00074**1\n         EJECT                                                          00075**1\n         USING SAVEAREA,R13                                             00076**1\n         USING UADSDUMP,R12                                             00077**1\n         USING IHADCB,R11                                               00078**1\n         USING ENTLIST,R10                                              00079**1\n         USING DIRENT,R9                                                00080**1\n         USING DHED,R8                                                  00081**9\nUADSDUMP CSECT                                                          00082**1\n         SAVE (14,12),,'UADSDUMP&SYSDATE.&SYSTIME'     SAVE REGISTERS   00083**1\n         LR    R12,R15             ESTABLISH BASE REGISTER              00084**1\n         GETMAIN R,LV=WORKSIZE     OBTAIN A WORK AREA                   00085**1\n         ST    R1,SAVENEW          FORWARD CHAIN                        00086**1\n         ST    R13,SAVEOLD-SAVEAREA(,R1)     BACKWARD CHAIN             00087**1\n         LR    R13,R1              SAVE THE WORK AREA POINTER           00088**1\n**********************************************************************  00089**8\n*  INITIALIZE THE WORK AREA AND OPEN THE MESSAGE DATASET.            *  00090**8\n**********************************************************************  00091**8\n         XC    ENTLISTH(4),ENTLISTH     CLEAR ENTRY LIST HEAD           00092**2\n         XC    ENTNUM(4),ENTNUM    CLEAR NUMBER OF ENTRIES              00093**8\n         XC    RETCODE(4),RETCODE  CLEAR THE RETURN CODE                00094**8\n         XC    BUFSIZE(4),BUFSIZE  CLEAR THE BUFFER SIZE                00095*37\n         MVC   DIRECTRY(DIRSKELN),DIRSKEL    COPY SKELETON DCB          00096**2\n         MVC   PDS(PDSSKELN),PDSSKEL    COPY SKELETON DCB               00097**2\n         LA    R11,PDS             GET THE PDS DCB ADDRESS              00098*37\n         LA    R1,UADSJFCB         GET THE JFCB ADDRESS                 00099*37\n         ST    R1,PDSEXLST         SAVE THE JFCB ADDRESS                00100*37\n         MVI   PDSEXLST,X'87'      INDICATE JFCB ADDRESS + END OF LIST  00101*37\n         LA    R1,PDSEXLST         GET THE EXIT LIST ADDRESS            00102*37\n         STCM  R1,B'0111',DCBEXLSA SAVE THE EXIT LIST ADDRESS           00103*38\n         MVC   ACCOUNT(ACCSKELN),ACCSKEL     COPY SKELETON DCB          00104**3\n         MVC   SYSPRINT(SYSSKELN),SYSSKEL    COPY SKELETON DCB          00105**6\n         MVC   OPENPARM(OPENSKLN),OPENSKEL   COPY SKELETON OPEN         00106**6\n         MVC   CLOSPARM(CLOSSKLN),CLOSSKEL   COPY SKELETON CLOSE        00107**6\n         MVI   USERLNTH,1          INITIALIZE THE USERID LENGTH         00108*23\n         MVC   USERID(8),=CL8' '   CLEAR THE USERID                     00109*23\n         OPEN  (SYSPRINT,OUTPUT),MF=(E,OPENPARM)  OPEN SYSPRINT         00110**8\n         LA    R11,SYSPRINT        GET THE DCB ADDRESS                  00111**8\n         TM    DCBOFLGS,DCBOFOPN   DID SYSPRINT OPEN?                   00112**8\n         BO    OPENDIR             YES, START PROCESSING                00113**8\n         ABEND X'B40'              NO, ABEND                            00114**8\n         EJECT                                                          00115**1\n**********************************************************************  00116**8\n*  READ THE DIRECTORY OF THE PDS AND BUILD AN IN-STORAGE MEMBER LIST.*  00117**8\n**********************************************************************  00118**8\nOPENDIR  OPEN  (DIRECTRY,INPUT),MF=(E,OPENPARM)   OPEN THE DIRECTORY    00119**8\n         LA    R2,=CL8'DIRECTRY'   GET TEXT ADDRESS TO INSERT INTO MSG  00120**8\n         LA    R11,DIRECTRY        GET THE DCB ADDRESS                  00121**3\n         TM    DCBOFLGS,DCBOFOPN   DID THE DIRECTORY OPEN?              00122**3\n         BNO   OPENERR             NO, ISSUE ERROR MESSAGE AND EXIT     00123**8\n         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00124**8\n         BAL   R6,MESSAGE                                               00125**8\n         XR    R10,R10             CLEAR THE ENTRY LIST POINTER         00126**3\nREADDIR  GET   DIRECTRY,DIRBLOCK   READ A DIRECTORY RECORD              00127*37\n         LH    R2,DIRBLOCK         GET THE RECORD LENGTH                00128*37\n         LA    R9,DIRBLOCK+2       POINT TO THE FIRST ENTRY             00129*37\n         AR    R2,R9               POINT TO THE END OF THE BLOCK        00130**3\n         S     R2,=F'2'                                                 00131**3\nDEBLOCK  CR    R2,R9               ARE WE PAST THE END OF THE BLOCK?    00132**3\n         BNH   READDIR             YES, GO READ A NEW RECORD            00133**3\n         CLC   DIRNAME(8),=8X'FF'  IS THIS THE LAST MEMBER?             00134**3\n         BE    DIREOF              YES, SIGNAL EOF                      00135**3\n         L     R1,ENTNUM           GET THE NUMBER OF ENTRIES            00136**8\n         LA    R1,1(,R1)           INCREMENT THE ENTRY COUNT            00137**8\n         ST    R1,ENTNUM           SAVE THE NEW ENTRY COUNT             00138**8\n         GETMAIN R,LV=ENTLSIZE     OBTAIN STORAGE FOR A LIST ENTRY      00139**3\n         C     R10,=F'0'           IS THERE AN ENTRY IN THE LIST?       00140**3\n         BNE   CHAINENT            YES, CHAIN THE NEW ENTRY             00141**3\n         ST    R1,ENTLISTH         MAKE THE NEW ENTRY THE FIRST         00142**3\n         B     MAKECURR            MAKE THE NEW ENTRY THE CURRENT       00143**3\nCHAINENT ST    R1,ENTNEXT          CHAIN THE NEW ENTRY INTO THE LIST    00144**3\nMAKECURR LR    R10,R1              MAKE THE NEW ENTRY CURRENT           00145**3\n         MVC   ENTNAME(8),DIRNAME  MOVE THE ENTRY NAME                  00146**3\n         MVC   ENTTTR(3),DIRTTR    MOVE THE ENTRY TTR                   00147**3\n         XC    ENTTTR+3(1),ENTTTR+3     CLEAR THE LAST BYTE             00148**3\n         XC    ENTNEXT(4),ENTNEXT  CLEAR THE NEXT ENTRY POINTER         00149**3\n         IC    R1,DIRFLAGS         GET THE DIRECTORY ENTRY FLAGS        00150**3\n         N     R1,=X'0000001F'     CLEAR FLAGS                          00151**3\n         SLL   R1,1                MULTIPLY BY TWO TO GET LENGTH        00152**3\n         A     R1,=F'12'           ADD LENGTH OF NAME AND TTRN          00153**3\n         AR    R9,R1               POINT TO THE NEXT ENTRY              00154**3\n         B     DEBLOCK             GO GET THE NEXT DIRECTORY ENTRY      00155**4\nDIREOF   CLOSE (DIRECTRY),MF=(E,CLOSPARM)    CLOSE THE DIRECTORY        00156**4\n         L     R1,ENTNUM           GET THE NUMBER OF ENTRIES            00157**9\n         CVD   R1,CVDWORK          CONVERT ENTRIES TO DECIMAL           00158**9\n         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT ENTRIES TO EBCDIC       00159*12\n         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00160*12\n         LA    R1,3                ISSUE NUMBER OF MEMBERS MESSAGE      00161**9\n         LA    R2,CVEWORK          INSERT NUMBER OF ENTRIES             00162*12\n         BAL   R6,MESSAGE                                               00163**9\n         B     OPENPDS             OPEN THE PDS FOR PROCESSING          00164**8\nOPENERR  LA    R1,2                ISSUE OPEN FAILURE MESSAGE           00165**8\n         BAL   R6,MESSAGE                                               00166**8\n         MVC   RETCODE(4),=F'16'   SET THE RETURN CODE                  00167**8\n         B     EXIT                EXIT                                 00168**8\nJFCBERR  CVD   R15,CVDWORK         CONVERT RETURN CODE TO DECIMAL       00169*37\n         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT RETURN CODE TO EBCDIC   00170*37\n         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00171*37\n         LA    R2,CVEWORK          POINT TO THE EBCDIC RETURN CODE      00172*37\n         LA    R1,6                ISSUE JFCB READ FAILED MESSAGE       00173*37\n         BAL   R6,MESSAGE                                               00174*37\n         MVC   RETCODE(4),=F'16'   SET THE RETURN CODE                  00175*37\n         B     EXIT                EXIT                                 00176*37\n         EJECT                                                          00177**3\n**********************************************************************  00178**9\n*  OPEN THE PDS FOR INPUT PROCESSING AND THE ACCOUNT FILE FOR OUTPUT *  00179**9\n*  PROCESSING (FOR ACCOUNT CONTROL CARDS).                           *  00180**9\n**********************************************************************  00181**9\nOPENPDS  OPEN  (PDS,INPUT),MF=(E,OPENPARM)   OPEN THE PDS               00182**8\n         LA    R2,=CL8'PDS'        GET TEXT ADDRESS TO INSERT INTO MSG  00183**8\n         LA    R11,PDS             GET THE PDS DCB ADDRESS              00184**8\n         TM    DCBOFLGS,DCBOFOPN   DID THE PDS OPEN?                    00185**8\n         BNO   OPENERR             NO, ISSUE OPEN FAILURE MESSAGE       00186**8\n         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00187**8\n         BAL   R6,MESSAGE                                               00188**8\n         RDJFCB (PDS),MF=(E,OPENPARM)   READ THE PDS JFCB               00189*37\n         LTR   R15,R15             DID THE JFCB READ GO AS PLANNED?     00190*37\n         BNZ   JFCBERR             NO, ISSUE JFCB READ FAILURE MESSAGE  00191*37\n         LA    R1,UADSJFCB         GET THE JFCB ADDRESS                 00192*37\n         USING JFCB,R1                                                  00193*37\n         LH    R0,JFCBLKSI         GET THE UADS BLOCK SIZE              00194*37\n         ST    R0,BUFSIZE          SAVE THE BUFFER SIZE                 00195*37\n         DROP  R1                                                       00196*37\n         GETMAIN R,LV=(0)          OBTAIN A BUFFER                      00197*37\n         LR    R8,R1               SAVE THE BUFFER ADDRESS              00198*37\n         OPEN  (ACCOUNT,OUTPUT),MF=(E,OPENPARM)   OPEN THE ACCOUNT FILE 00199**8\n         LA    R2,=CL8'ACCOUNT'    GET TEXT ADDRESS TO INSERT INTO MSG  00200**8\n         LA    R11,ACCOUNT         GET THE ACCOUNT DCB ADDRESS          00201**8\n         TM    DCBOFLGS,DCBOFOPN   DID THE ACCOUNT FILE OPEN?           00202**8\n         BNO   OPENERR             NO, ISSUE OPEN FAILURE MESSAGE       00203**8\n         LA    R1,1                ISSUE OPEN SUCCESSFUL MESSAGE        00204**8\n         BAL   R6,MESSAGE                                               00205**8\n         L     R10,ENTLISTH        GET THE ENTRY LIST HEAD POINTER      00206**9\n         EJECT                                                          00207**8\n**********************************************************************  00208**9\n*  FOR EACH ENTRY IN THE MEMBER LIST, READ THE UADS RECORD AND WRITE *  00209**9\n*  CONTROL CARDS TO BE USED AS INPUT TO ACCOUNT.                     *  00210**9\n**********************************************************************  00211**9\nREADUADS C     R10,=F'0'           IS THERE AN ENTRY TO BE PROCESSED?   00212**9\n         BE    READDONE            NO, CLOSE FILES AND EXIT             00213**9\n         FIND  PDS,ENTTTR,C        LOCATE THE MEMBER                    00214**9\n         READ  READDECB,SF,PDS,DHED,'S',MF=(E,READPARM)     READ UADS   00215*37\n         CHECK READDECB            CHECK STATUS OF READ OPERATION       00216**9\n         OI    DUMPFLGS,DUMPFUSR   INDICATE NEW USER BEING PROCESSED    00217*13\n         LA    R1,7                GET THE USERID LENGTH                00218*21\n         LA    R2,UADSUSER+7       POINT TO THE LAST CHARACTER          00219*21\nUSERLOOP CLI   0(R2),C' '          IS THIS THE LAST CHARACTER?          00220*14\n         BNE   TESTUSER            YES, COPY THE USERID FROM UADS       00221*21\n         BCTR  R2,R0               DECREMENT THE ADDRESS                00222*21\n         BCT   R1,USERLOOP         CHECK THE NEXT CHARACTER             00223*14\nTESTUSER STC   R1,USERLNTH         SAVE THE USERID LENGTH               00224*21\n         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE/COMPARE    00225*21\n         EX    R1,USERCOMP         IS THIS A NEW USERID?                00226*21\n         BNE   MOVEUSER            YES, MOVE NEW USERID OVER            00227*21\n         LA    R1,5                ISSUE WARNING FOR EXTENSION BLOCK    00228*21\n         LA    R2,USERID           INSERT USERID INTO MESSAGE           00229*21\n         BAL   R6,MESSAGE                                               00230*21\n         MVC   RETCODE(4),=F'4'    SET THE RETURN CODE                  00231*23\n         B     NEXTUSER            GO READ THE NEXT USER ENTRY          00232*21\nMOVEUSER MVC   USERID(8),=CL8' '   CLEAR THE USERID                     00233*21\n         EX    R1,USERMOVE         MOVE OVER THE USERID                 00234*21\n         MVC   PASSWORD(8),=CL8'*' INITIALIZE PASSWORD FIELD            00235*21\n         MVI   ACNTLNTH,1          INITIALIZE ACCOUNT FIELD LENGTH      00236*13\n         MVC   ACNTDATA(1),=CL1'*' INITIALIZE ACCOUNT FIELD             00237*13\n         L     R7,UADSPWD1         GET THE PASSWORD OFFSET BLOCK OFFSET 00238*13\nNEXTPSWD AR    R7,R8               ADD THE BUFFER ADDRESS               00239*18\n         TM    DUMPFLGS,DUMPFUSR   FIRST PASS FOR THIS USER?            00240*24\n         BNO   GETDPOBD            NO, CONTINUE                         00241*24\n         ST    R7,LASTDPOB         SAVE THE DPOB POINTER                00242*24\n         USING DPOB,R7                                                  00243*13\nGETDPOBD ICM   R5,B'1111',UADSPDAT IS THERE A PASSWORD DATA BLOCK?      00244*24\n         BZ    ACCTLOOP            NO, BYPASS PASSWORD PROCESSING       00245*13\n         AR    R5,R8               ADD THE BUFFER ADDRESS               00246*18\n         USING DPOBD,R5                                                 00247*13\n         MVC   PASSWORD(8),UADSPPWD     MOVE OVER THE PASSWORD          00248*13\n         DROP  R5                                                       00249*13\nACCTLOOP L     R5,UADSPSUB         GET THE ACCOUNT OFFSET BLOCK         00250*24\nNEXTACNT AR    R5,R8               ADD THE BUFFER ADDRESS               00251*13\n         TM    DUMPFLGS,DUMPFUSR   FIRST PASS FOR THIS USER?            00252*24\n         BNO   GETDNOBD            NO, CONTINUE                         00253*24\n         ST    R5,LASTDNOB         SAVE THE DNOB POINTER                00254*27\n         USING DNOB,R5                                                  00255*13\nGETDNOBD ICM   R4,B'1111',UADSADAT IS THERE AN ACCOUNT DATA BLOCK?      00256*25\n         BZ    PROCLOOP            NO, BYPASS ACCOUNT PROCESSING        00257*13\n         AR    R4,R8               ADD THE BUFFER ADDRESS               00258*13\n         USING DNOBD,R4                                                 00259*13\n         XR    R1,R1               CLEAR R1                             00260*13\n         IC    R1,UADSALEN         GET THE ACCOUNT NUMBER LENGTH        00261*13\n         STC   R1,ACNTLNTH         SAVE THE ACCOUNT NUMBER LENGTH       00262*13\n         BCTR  R1,R0               DECREMENT ACCOUNT NUMBER FOR MOVE    00263*13\n         LA    R2,ACNTDATA         GET THE DESTINATION ADDRESS          00264*13\n         LA    R3,UADSANUM         GET THE SOURCE ADDRESS               00265*13\n         EX    R1,VARMOVE          MOVE THE ACCOUNT NUMBER              00266*21\n         DROP  R4                                                       00267*13\nPROCLOOP ICM   R4,B'1111',UADSASUB IS THERE A PROCEDURE OFFSET BLOCK?   00268*13\n         BZ    PROCERR             NO, THINGS MUST BE MESSED UP         00269*13\nNEXTPROC AR    R4,R8               ADD THE BUFFER ADDRESS               00270*13\n         USING DROB,R4                                                  00271*13\n         ICM   R3,B'1111',UADSRDAT IS THERE A PROCEDURE DATA BLOCK?     00272*13\n         BZ    PROCERR             NO, THINGS MUST BE MESSED UP         00273*13\n         AR    R3,R8               ADD THE BUFFER ADDRESS               00274*17\n         USING DROBD,R3                                                 00275*13\n         MVC   PROCNAME(8),UADSRNAM     MOVE OVER THE PROCEDURE NAME    00276*13\n         MVC   PROCUNIT(8),UADSUNAM     MOVE OVER THE ESOTERIC UNITNAME 00277*13\n         MVC   PROCSIZE(4),UADSRSIZ     GET THE PROCEDURE SIZE          00278*14\n         DROP  R3                                                       00279*13\n         BAL   R6,GENERATE         GENERATE THE CONTROL CARD(S)         00280*13\n         NI    DUMPFLGS,X'FF'-DUMPFUSR  INDICATE FIRST CARD GENERATED   00281*13\n         TM    UADSRFLG,FLGR01     ARE THERE ANY MORE PROCEDURES?       00282*13\n         BO    TESTACNT            NO, GET THE NEXT ACCOUNT NUMBER      00283*19\n         ICM   R4,B'0111',UADSRNEX GET THE NEXT OFFSET BLOCK            00284*13\n         B     NEXTPROC            PROCESS THE NEXT OFFSET BLOCK        00285*13\n         DROP  R4                                                       00286*13\nPROCERR  LA    R1,4                ISSUE PROCEDURE NOT FOUND MESSAGE    00287*15\n         LA    R2,USERID           INSERT THE USERID INTO THE MESSAGE   00288*15\n         BAL   R6,MESSAGE                                               00289*15\n         MVC   RETCODE(4),=F'8'    SET RETURN CODE                      00290*15\n         B     NEXTUSER            CONTINUE WITH THE NEXT USER ENTRY    00291*15\nTESTACNT TM    UADSAFLG,AFLG01     ARE THERE ANY MORE ACCOUNT NUMBERS?  00292*13\n         BO    TESTPSWD            NO, GET THE NEXT PASSWORD            00293*19\n         ICM   R5,B'0111',UADSANEX GET THE NEXT OFFSET BLOCK            00294*13\n         B     NEXTACNT            PROCESS THE NEXT OFFSET BLOCK        00295*13\n         DROP  R5                                                       00296*13\nTESTPSWD TM    UADSPFLG,PFLG01     ARE THERE ANY MORE PASSWORDS?        00297*13\n         BO    NEXTUSER            NO, READ THE NEXT USER ENTRY         00298*19\n         ICM   R7,B'0111',UADSPNEX GET THE NEXT OFFSET BLOCK            00299*13\n         B     NEXTPSWD            PROCESS THE NEXT OFFSET BLOCK        00300*13\n         DROP  R7                                                       00301*13\nNEXTUSER L     R10,ENTNEXT         POINT TO THE NEXT USER ENTRY         00302*13\n         B     READUADS            READ THE NEXT USER ENTRY FROM UADS   00303*13\nREADDONE CLOSE (PDS),MF=(E,CLOSPARM)    CLOSE THE UADS                  00304*13\n         CLOSE (ACCOUNT),MF=(E,CLOSPARM)     CLOSE THE ACCOUNT FILE     00305*13\n         EJECT                                                          00306**9\nEXIT     ICM   R0,B'1111',BUFSIZE  SHOULD THE BUFFER BE FREED?          00307*37\n         BZ    EXITDONE            NO, CONTINUE                         00308*37\n         FREEMAIN R,LV=(0),A=(R8)  FREE THE BUFFER                      00309*37\nEXITDONE LR    R1,R13              GET THE SAVE AREA POINTER            00310*37\n         L     R2,SAVEOLD          GET CALLER'S SAVE AREA               00311**8\n         MVC   SAVER15-SAVEAREA(4,R2),RETCODE     SET THE RETURN CODE   00312**8\n         FREEMAIN R,LV=WORKSIZE,A=(R1)  FREE THE WORK AREA              00313**5\n         LR    R13,R2              MAKE THE CALLER'S SAVE AREA CURRENT  00314**8\n         XC    SAVENEW(4),SAVENEW  CLEAR FORWARD CHAIN                  00315**1\n         RETURN (14,12)            RESTORE REGISTERS AND RETURN         00316**1\n         EJECT                                                          00317**9\n**********************************************************************  00318**9\n*  SUBROUTINE NAME -                                                 *  00319**9\n*                                                                    *  00320**9\n*     MESSAGE                                                        *  00321**9\n*                                                                    *  00322**9\n*  FUNCTION -                                                        *  00323**9\n*                                                                    *  00324**9\n*     THIS SUBROUTINE TAKES A MESSAGE NUMBER PASSED IN THROUGH R1 AND*  00325**9\n*     AN OPTIONAL TEXT ADDRESS PASSED IN THROUGH R2 AND WRITES A     *  00326**9\n*     MESSAGE TO THE SYSPRINT DATASET (WITH OPTIONAL TEXT INSERTION).*  00327**9\n**********************************************************************  00328**9\nMESSAGE  SLL   R1,2                MULTIPLY NUMBER BY 4 TO GET INDEX    00329**9\n         L     R3,=A(MSGTEXT)      GET THE MESSAGE TEXT CSECT ADDRESS   00330**9\n         L     R3,0(R3,R1)         GET THE MESSAGE TEXT ADDRESS         00331**9\n         XR    R1,R1               CLEAR R1                             00332**9\n         IC    R1,0(,R3)           GET THE MESSAGE LENGTH               00333*10\n         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00334**9\n         MVI   MSGBUF,C' '         CLEAR THE MESSAGE BUFFER             00335*10\n         MVC   MSGBUF+1(L'MSGBUF-1),MSGBUF                              00336*10\n         EX    R1,MSGMOVE          MOVE THE MESSAGE TEXT                00337**9\n         LTR   R2,R2               IS THERE ANYTHING TO INSERT?         00338**9\n         BZ    MSGWRITE            NO, GO AHEAD AND WRITE THE MESSAGE   00339**9\n         LA    R1,MSGBUF+1(R1)     POINT TO THE END OF THE MESSAGE      00340*10\n         MVC   0(8,R1),0(R2)       INSERT THE TEXT                      00341**9\nMSGWRITE PUT   SYSPRINT,MSGBUF     WRITE THE MESSAGE                    00342**9\n         BR    R6                  RETURN                               00343*10\n         EJECT                                                          00344**1\n**********************************************************************  00345*14\n*  SUBROUTINE NAME -                                                 *  00346*14\n*                                                                    *  00347*14\n*     GENERATE                                                       *  00348*14\n*                                                                    *  00349*14\n*  FUNCTION -                                                        *  00350*14\n*                                                                    *  00351*14\n*     THIS SUBROUTINE GENERATES THE ACCOUNT CONTROL CARDS FROM THE   *  00352*14\n*     INFORMATION PROVIDED IN THE WORK AREA AND THE UADS HEADER.     *  00353*14\n**********************************************************************  00354*14\nGENERATE MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00355*14\n         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00356*14\n         NI    DUMPFLGS,X'FF'-(DUMPCONT+DUMPDATA) CLEAR FLAGS           00357*24\n         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00358*14\n         MVC   0(5,R2),=C'ADD ('   MOVE IN INITIAL STRING               00359*14\n         LA    R2,5(,R2)           INCREMENT PAST STRING                00360*14\n         XR    R1,R1               CLEAR R1                             00361*21\n         IC    R1,USERLNTH         GET THE USERID LENGTH                00362*21\n         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00363*21\n         LA    R3,USERID           GET THE USERID ADDRESS               00364*21\n         EX    R1,VARMOVE          MOVE IN THE USERID                   00365*21\n         LA    R2,1(R2,R1)         INCREMENT PAST USERID                00366*24\n         C     R7,LASTDPOB         IS THIS A NEW PASSWORD?              00367*24\n         BE    GENPSWD             NO, CONTINUE                         00368*26\n         OI    DUMPFLGS,DUMPDATA   INDICATE DATA INSERTED               00369*24\n         ST    R7,LASTDPOB         SAVE THE NEW DPOB                    00370*24\n         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00371*24\n         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00372*24\nGENPSWD  MVC   1(8,R2),PASSWORD    MOVE IN THE PASSWORD                 00373*24\n         LA    R2,9(,R2)           INCREMENT PAST PASSWORD              00374*24\n         C     R5,LASTDNOB         IS THIS A NEW ACCOUNT?               00375*24\n         BE    GENACNT             NO, CONTINUE                         00376*26\n         ST    R5,LASTDNOB         SAVE THE NEW DNOB                    00377*24\n         TM    DUMPFLGS,DUMPDATA   DATA ALREADY INSERTED?               00378*24\n         BO    GENACNT             YES, CONTINUE                        00379*24\n         OI    DUMPFLGS,DUMPDATA   INDICATE DATA INSERTED               00380*24\n         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00381*24\n         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00382*24\nGENACNT  XR    R1,R1               CLEAR R1                             00383*24\n         IC    R1,ACNTLNTH         GET THE ACCOUNT LENGTH               00384*14\n         BCTR  R1,R0               DECREMENT LENGTH FOR MOVE            00385*17\n         LA    R2,1(,R2)           INCREMENT TO NEXT CHARACTER          00386*24\n         LA    R3,ACNTDATA         GET THE ACCOUNT ADDRESS              00387*14\n         EX    R1,VARMOVE          MOVE IN THE ACCOUNT                  00388*21\n         LA    R2,1(R2,R1)         INCREMENT PAST ACCOUNT               00389*18\n         TM    DUMPFLGS,DUMPFUSR+DUMPDATA    FIRST CARD OR DATA DONE?   00390*24\n         BNZ   GENPROC             YES, COPY PROCEDURE NAME             00391*24\n         MVC   0(8,R2),=C') DATA ('     MOVE IN DATA STRING             00392*14\n         LA    R2,7(,R2)           INCREMENT PAST DATA STRING           00393*20\nGENPROC  MVC   1(8,R2),PROCNAME    MOVE IN THE PROCEDURE                00394*18\n         MVI   9(R2),C')'          CLOSE THE PARENTHESIS                00395*18\n         LA    R2,11(,R2)          INCREMENT PAST THE COMMAND           00396*18\n         TM    DUMPFLGS,DUMPFUSR   IS THIS THE FIRST CARD FOR A USER?   00397*28\n         BO    GENCONT             YES, CONTINUE ANYWAY                 00398*28\n         CLC   PROCSIZE(4),=F'0'   IS THERE A SIZE PARAMETER?           00399*14\n         BNE   GENCONT             YES, GO OUTPUT CARD AND CONTINUE     00400*14\n         CLI   PROCUNIT,C' '       IS THERE A UNIT PARAMETER?           00401*14\n         BE    FIRSTOUT            NO, GO OUTPUT CARD                   00402*14\nGENCONT  MVI   0(R2),C'+'          INDICATE CONTINUATION                00403*14\n         OI    DUMPFLGS,DUMPCONT                                        00404*28\nFIRSTOUT PUT   ACCOUNT,ACNTCARD    OUTPUT THE CARD                      00405*14\n         TM    DUMPFLGS,DUMPCONT   WAS THERE A CONTINUATION?            00406*28\n         BNOR  R6                  NO, RETURN                           00407*28\n         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00408*14\n         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00409*14\n         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00410*17\n         ICM   R1,B'1111',PROCSIZE IS THERE A SIZE PARAMETER?           00411*14\n         BZ    TESTUNIT            NO, CHECK FOR A UNIT PARAMETER       00412*14\n         CVD   R1,CVDWORK          CONVERT THE SIZE TO DECIMAL          00413*14\n         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT THE SIZE TO EBCDIC      00414*14\n         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00415*14\n         MVC   0(6,R2),=C'SIZE ('  INSERT SIZE STRING                   00416*14\n         LA    R2,6(,R2)           INCREMENT PAST STRING                00417*14\n         MVC   0(7,R2),CVEWORK+1   MOVE IN SIZE VALUE                   00418*23\n         MVI   7(R2),C')'          CLOSE SIZE PARAMETER                 00419*23\n         LA    R2,9(,R2)           INCREMENT PAST SIZE PARAMETER        00420*23\nTESTUNIT CLI   PROCUNIT,C' '       IS THERE A UNIT PARAMETER?           00421*14\n         BE    FIRSTTST            NO, CHECK TO SEE IF WE'RE DONE       00422*14\n         MVC   0(6,R2),=C'UNIT ('  INSERT UNIT STRING                   00423*14\n         LA    R2,6(,R2)           INCREMENT PAST STRING                00424*14\n         MVC   0(8,R2),PROCUNIT    MOVE IN UNIT VALUE                   00425*14\n         MVI   8(R2),C')'          CLOSE UNIT PARAMETER                 00426*14\n         LA    R2,10(,R2)          INCREMENT PAST UNIT PARAMETER        00427*14\nFIRSTTST TM    DUMPFLGS,DUMPFUSR   IS THIS THE FIRST CARD FOR A USER?   00428*14\n         BNO   GENLAST             NO, GENERATE THE LAST CARD           00429*28\n         TM    UADSATTR,USATR00    DOES USER HAVE OPER AUTHORITY?       00430*28\n         BNO   CHEKACCT            NO, CHECK FOR ACCT AUTHORITY         00431*28\n         MVC   0(4,R2),=C'OPER'    INDICATE OPER AUTHORITY              00432*28\n         LA    R2,5(,R2)           INCREMENT PAST STRING                00433*28\nCHEKACCT TM    UADSATTR,USATR01    DOES USER HAVE ACCT AUTHORITY?       00434*28\n         BNO   CHEKJCL             NO, CHECK FOR JCL AUTHORITY          00435*28\n         MVC   0(4,R2),=C'ACCT'    INDICATE ACCT AUTHORITY              00436*28\n         LA    R2,5(,R2)           INCREMENT PAST STRING                00437*28\nCHEKJCL  TM    UADSATTR,USATR02    DOES USER HAVE JCL AUTHORITY?        00438*28\n         BNO   CHEKMNT             NO, CHECK FOR MOUNT AUTHORITY        00439*28\n         MVC   0(3,R2),=C'JCL'     INDICATE JCL AUTHORITY               00440*28\n         LA    R2,4(,R2)           INCREMENT PAST STRING                00441*28\nCHEKMNT  TM    UADSATTR,USATR03    DOES USER HAVE MOUNT AUTHORITY?      00442*28\n         BNO   CHEKRCVR            NO, CHECK FOR RECOVER AUTHORITY      00443*28\n         MVC   0(5,R2),=C'MOUNT'   INDICATE MOUNT AUTHORITY             00444*28\n         LA    R2,6(,R2)           INCREMENT PAST STRING                00445*28\nCHEKRCVR TM    UADSATTR,USATR04    DOES USER HAVE RECOVER AUTHORITY?    00446*28\n         BNO   USERDATA            YES, PROCESS USERDATA                00447*28\n         MVC   0(8,R2),=C'NORECOVER'    INDICATE NO RECOVER AUTHORITY   00448*28\n         LA    R2,9(,R2)           INCREMENT PAST STRING                00449*28\nUSERDATA ICM   R1,B'0011',UADSINST GET THE USERDATA HALFWORD            00450*28\n         MVC   0(9,R2),=C'USERDATA('    INSERT USERDATA STRING          00451*28\n         LA    R2,9(,R2)           INCREMENT PAST STRING                00452*28\n         BAL   R3,CVTBH            INSERT HEX USERDATA INTO COMMAND     00453*28\n         MVI   4(R2),C')'          CLOSE THE USERDATA STRING            00454*28\n         MVI   6(R2),C'+'          INDICATE CONTINUATION                00455*28\n         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00456*32\n         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00457*32\n         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00458*32\n         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00459*32\n**********************************************************************  00460*32\n*  PROCESS THE PERFORMANCE GROUP MASK.  THIS MASK IS A 32 BYTE BIT-  *  00461*32\n*  MASK OF PERFORMANCE GROUPS (1-256).                               *  00462*32\n**********************************************************************  00463*32\n         ICM   R3,B'1111',UADSPERP IS THERE A PERFORM OFFSET?           00464*32\n         BZ    CHEKDEST            NO, GO CHECK DESTINATION             00465*32\n         MVC   0(8,R2),=C'PERFORM('     INSERT PERFORM STRING           00466*34\n         LA    R2,8(,R2)           INCREMENT PAST STRING                00467*34\n         AR    R3,R8               ADD THE BUFFER ADDRESS               00468*32\n         LA    R14,32              NUMBER OF BYTES IN PERFORM MASK      00469*32\nNEXTBYTE CLI   0(R3),X'00'         QUICK CHECK, ANYTHING TO PROCESS?    00470*32\n         BZ    NEXTRNGE            NO, GO INCREMENT TO THE NEXT BYTE    00471*35\n         LA    R15,8               NUMBER OF BITS PER BYTE              00472*32\n         LA    R1,X'80'            INITIAL MASK FOR THIS BYTE           00473*32\n         LA    R0,32               COMPUTE PERFORMANCE RANGE            00474*32\n         SR    R0,R14              PR = (8 * (32 - BYTE)) + 8           00475*32\n         SLL   R0,3                                                     00476*32\n         AR    R0,R15                                                   00477*32\n         ST    R0,PERFRNGE         SAVE THE PERFORMANCE RANGE           00478*32\nBYTELOOP EX    R1,PERFTEST         CHECK THIS PERFORMANCE GROUP         00479*32\n         BNO   NEXTMASK            NO PERFORMANCE GROUP FOR THIS MASK   00480*32\n         L     R0,PERFRNGE         GET THE PERFORMANCE RANGE            00481*32\n         SR    R0,R15              SUBTRACT BIT OFFSET TO GET GROUP     00482*32\n         A     R0,=F'1'            INCREMENT FOR ZERO ORIGIN            00483*32\n         MVC   0(4,R2),=X'40202120'     INSERT EDIT MASK INTO BUFFER    00484*32\n         CVD   R0,CVDWORK          CONVERT PERFORMANCE GROUP TO DECIMAL 00485*32\n         ED    0(4,R2),CVDWORK+6   CONVERT PERFORMANCE GROUP TO EBCDIC  00486*32\n         LA    R2,4(,R2)           INCREMENT PAST PERFORMANCE GROUP     00487*32\n         LA    R0,ACNTCARD+L'ACNTCARD-4 SHOULD WE WRITE A CARD YET?     00488*32\n         SR    R0,R2                                                    00489*32\n         BP    NEXTMASK            NO, GO PROCESS THE NEXT GROUP        00490*32\n         MVI   1(R2),C'+'          INDICATE CONTINUATION                00491*32\n         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00492*32\n         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00493*32\n         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00494*32\n         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00495*32\nNEXTMASK SRL   R1,1                SHIFT MASK RIGHT TO GET NEXT MASK    00496*32\n         BCT   R15,BYTELOOP        CHECK THE NEW PERFORMANCE GROUP      00497*32\nNEXTRNGE LA    R3,1(,R3)           INCREMENT TO NEXT BYTE               00498*35\n         BCT   R14,NEXTBYTE        GO PROCESS THE NEXT RANGE            00499*32\n         MVI   0(R2),C')'          CLOSE PARENTHESES                    00500*34\n         MVI   2(R2),C'+'          INDICATE CONTINUATION                00501*32\n         PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00502*32\n         MVI   ACNTCARD,C' '       CLEAR THE ACCOUNT CARD               00503*32\n         MVC   ACNTCARD+1(L'ACNTCARD-1),ACNTCARD                        00504*32\n         LA    R2,ACNTCARD         GET THE ACCOUNT CARD ADDRESS         00505*32\nCHEKDEST CLI   UADSDEST,X'00'      IS THERE A DESTINATION?              00506*34\n         BE    CHEKSUBH            NO, CHECK FOR HOLD CLASS             00507*34\n         MVC   0(5,R2),=C'DEST('   INSERT DEST STRING                   00508*34\n         LA    R2,5(,R2)           INCREMENT PAST STRING                00509*34\n         MVC   0(8,R2),UADSDEST    MOVE OVER THE DESTINATION            00510*34\n         MVI   8(R2),C')'          CLOSE PARENTHESES                    00511*34\n         LA    R2,10(,R2)          INCREMENT PAST DESTINATION           00512*34\nCHEKSUBH CLI   UADSSUBH,X'00'      IS THERE A HOLD CLASS?               00513*34\n         BE    CHEKSUBC            NO, CHECK FOR JOB CLASS              00514*34\n         MVC   0(5,R2),=C'HOLD('   INSERT HOLD STRING                   00515*34\n         LA    R2,5(,R2)           INCREMENT PAST STRING                00516*34\n         MVC   0(1,R2),UADSSUBH    MOVE OVER THE HOLD CLASS             00517*34\n         MVI   1(R2),C')'          CLOSE PARENTHESES                    00518*34\n         LA    R2,3(,R2)           INCREMENT PAST HOLD CLASS            00519*34\nCHEKSUBC CLI   UADSSUBC,X'00'      IS THERE A JOB CLASS?                00520*34\n         BE    CHEKSUBM            NO, CHECK FOR MESSAGE CLASS          00521*35\n         MVC   0(9,R2),=C'JOBCLASS('    INSERT JOBCLASS STRING          00522*34\n         LA    R2,9(,R2)           INCREMENT PAST STRING                00523*34\n         MVC   0(1,R2),UADSSUBC    MOVE OVER THE JOB CLASS              00524*34\n         MVI   1(R2),C')'          CLOSE PARENTHESES                    00525*34\n         LA    R2,3(,R2)           INCREMENT PAST JOB CLASS             00526*34\nCHEKSUBM CLI   UADSSUBM,X'00'      IS THERE A MESSAGE CLASS?            00527*34\n         BE    CHEKSOUT            NO, CHECK FOR SYSOUT CLASS           00528*34\n         MVC   0(5,R2),=C'MSGCLASS('    INSERT MSGCLASS STRING          00529*34\n         LA    R2,9(,R2)           INCREMENT PAST STRING                00530*34\n         MVC   0(1,R2),UADSSUBM    MOVE OVER THE MESSAGE CLASS          00531*34\n         MVI   1(R2),C')'          CLOSE PARENTHESES                    00532*34\n         LA    R2,3(,R2)           INCREMENT PAST MESSAGE CLASS         00533*34\nCHEKSOUT CLI   UADSSOUT,X'00'      IS THERE A SYSOUT CLASS?             00534*35\n         BE    CHEKMAXC            NO, CHECK FOR MAX SIZE               00535*34\n         MVC   0(7,R2),=C'SYSOUT(' INSERT SYSOUT STRING                 00536*34\n         LA    R2,7(,R2)           INCREMENT PAST STRING                00537*34\n         MVC   0(1,R2),UADSSOUT    MOVE OVER THE SYSOUT CLASS           00538*34\n         MVI   1(R2),C')'          CLOSE PARENTHESES                    00539*34\n         LA    R2,3(,R2)           INCREMENT PAST SYSOUT CLASS          00540*34\nCHEKMAXC ICM   R1,B'1111',UADSMAXC IS THERE A MAXIMUM SIZE?             00541*34\n         BZ    MAXCNOLM            NO, INSERT NOLIM STRING              00542*34\n         MVC   0(8,R2),=C'MAXSIZE('     INSERT MAXSIZE STRING           00543*34\n         LA    R2,8(,R2)           INCREMENT PAST STRING                00544*34\n         CVD   R1,CVDWORK          CONVERT MAXSIZE TO DECIMAL           00545*34\n         UNPK  CVEWORK(8),CVDWORK+4(4)  CONVERT MAXSIZE TO EBCDIC       00546*34\n         OI    CVEWORK+7,X'F0'     MASK OUT SIGN                        00547*34\n         MVC   0(7,R2),CVEWORK+1   MOVE OVER MAXSIZE                    00548*34\n         MVI   7(R2),C')'          CLOSE PARENTHESES                    00549*34\n         LA    R2,9(,R2)           INCREMENT PAST MAXSIZE               00550*34\n         B     GENLAST             OUTPUT LAST CARD                     00551*34\nMAXCNOLM MVC   0(5,R2),=C'NOLIM'   INSERT NOLIM STRING                  00552*34\n         LA    R2,7(,R2)           INCREMENT PAST NOLIM                 00553*34\nGENLAST  PUT   ACCOUNT,ACNTCARD    OUTPUT THE CONTINUATION CARD         00554*32\n         BR    R6                  RETURN                               00555*14\n         EJECT                                                          00556*14\n*********************************************************************** 00557*28\n*  SUBROUTINE NAME -                                                  * 00558*28\n*                                                                     * 00559*28\n*     CVTBH                                                           * 00560*28\n*                                                                     * 00561*28\n*  FUNCTION -                                                         * 00562*28\n*                                                                     * 00563*28\n*     CONVERT THE DATA IN THE RIGHTMOST 4 NIBBLES OF R1 TO EBCDIC HEX * 00564*28\n*     AND INSERT INTO THE BUFFER POINTED TO BY R2.                    * 00565*28\n*********************************************************************** 00566*28\nCVTBH    LA    R14,3               GET NUMBER OF DIGITS TO CONVERT - 1  00567*30\nCVTLOOP  LA    R15,X'0F'           LOAD MASK INTO R15                   00568*28\n         NR    R15,R1              MASK OUT ALL BUT LOW DIGIT           00569*29\n         IC    R15,EBCDHEX(R15)    GET THE EBCDIC DIGIT                 00570*28\n         STC   R15,0(R14,R2)       PUT EBCDIC DIGIT INTO BUFFER         00571*28\n         SRL   R1,4                SHIFT NEXT DIGIT DOWN                00572*28\n         S     R14,=F'1'           DECREMENT INDEX                      00573*31\n         BNM   CVTLOOP             BRANCH BACK FOR NEXT DIGIT           00574*30\n         BR    R3                  RETURN                               00575*28\n         EJECT                                                          00576*28\nMSGMOVE  MVC   MSGBUF(*-*),1(R3)   EXECUTED MESSAGE MOVE                00577*21\nVARMOVE  MVC   0(*-*,R2),0(R3)     EXECUTED STRING MOVE                 00578*21\nUSERCOMP CLC   USERID(*-*),UADSUSER     EXECUTED USERID COMPARE         00579*21\nUSERMOVE MVC   USERID(*-*),UADSUSER     EXECUTED USERID MOVE            00580*21\nPERFTEST TM    0(R3),X'00'         EXECUTED PERFORMANCE GROUP TEST      00581*33\n         PRINT ON,NOGEN                                                 00582**5\nDIRSKEL  DCB   DSORG=PS,MACRF=GM,DDNAME=PDS,RECFM=U,BLKSIZE=256,       X00583**3\n               EODAD=DIREOF                                             00584**3\nDIRSKELN EQU   *-DIRSKEL                                                00585**2\nPDSSKEL  DCB   DSORG=PO,MACRF=R,DDNAME=PDS,RECFM=U,EXLST=0              00586*37\nPDSSKELN EQU   *-PDSSKEL                                                00587**2\nACCSKEL  DCB   DSORG=PS,MACRF=PM,DDNAME=ACCOUNT,RECFM=FB,BLKSIZE=3120, X00588**3\n               LRECL=80                                                 00589**3\nACCSKELN EQU   *-ACCSKEL                                                00590**3\nSYSSKEL  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FB,LRECL=80      00591**3\nSYSSKELN EQU   *-SYSSKEL                                                00592**7\nOPENSKEL OPEN  (,),MF=L                                                 00593**6\nOPENSKLN EQU   *-OPENSKEL                                               00594**6\nCLOSSKEL CLOSE (),MF=L                                                  00595**6\nCLOSSKLN EQU   *-CLOSSKEL                                               00596**6\n         PRINT ON,GEN                                                   00597**5\nEBCDHEX  DC    C'0123456789ABCDEF'                                      00598*30\n         EJECT                                                          00599**2\n         LTORG                                                          00600**1\n         EJECT                                                          00601**1\nMSGTEXT  CSECT                                                          00602**8\nMSGVECT  DS    F                   MESSAGE ADDRESS VECTOR               00603**8\n         DC    A(MSG001)           OPEN SUCCESSFUL FOR FILE: XXXXXXXX   00604*15\n         DC    A(MSG002)           OPEN FAILURE FOR FILE: XXXXXXXX      00605*15\n         DC    A(MSG003)           NUMBER OF ENTRIES READ: XXXXXXXX     00606*15\n         DC    A(MSG004)           PROCEDURE NOT FOUND FOR USER: XXXX   00607*15\n         DC    A(MSG005)           UADS EXTENSION BLOCK SKIPPED FOR ... 00608*21\n         DC    A(MSG006)           JFCB READ FAILED, RC = XXXXXXXX      00609*37\nMSG001   DC    AL1(MSG002-MSG001-1)                                     00610**8\n         DC    C'OPEN SUCCESSFUL FOR FILE: '                            00611**9\nMSG002   DC    AL1(MSG003-MSG002-1)                                     00612**8\n         DC    C'OPEN FAILURE FOR FILE: '                               00613**9\nMSG003   DC    AL1(MSG004-MSG003-1)                                     00614**8\n         DC    C'NUMBER OF ENTRIES READ: '                              00615**9\nMSG004   DC    AL1(MSG005-MSG004-1)                                     00616*15\n         DC    C'PROCEDURE NOT FOUND FOR USER: '                        00617*15\nMSG005   DC    AL1(MSG006-MSG005-1)                                     00618*21\n         DC    C'UADS EXTENSION BLOCK SKIPPED FOR USER: '               00619*21\nMSG006   DC    AL1(MSGTEXTE-MSG006-1)                                   00620*21\n         DC    C'JFCB READ FAILED, RC = '                               00621*37\nMSGTEXTE EQU   *                                                        00622*11\n         EJECT                                                          00623**8\n         REGS                                                           00624**1\n         EJECT                                                          00625**1\nWORKAREA DSECT                     REENTRANT WORK AREA                  00626**1\n         SAVEAREA DSECT=NO                                              00627**1\nCVDWORK  DS    D                   BINARY TO DECIMAL WORK AREA          00628**9\nENTNUM   DS    F                   NUMBER OF ENTRIES IN THE DIRECTORY   00629**8\nRETCODE  DS    F                   RETURN CODE                          00630**8\nPROCSIZE DS    F                   PROCEDURE SIZE FIELD                 00631*14\nBUFSIZE  DS    F                   UADS BUFFER SIZE FIELD               00632*37\nPERFRNGE DS    F                   PERFORMANCE GROUP RANGE              00633*32\nENTLISTH DS    A                   DIRECTORY LIST HEAD                  00634**2\nLASTDPOB DS    A                   LAST DPOB ADDRESS                    00635*24\nLASTDNOB DS    A                   LAST DNOB ADDRESS                    00636*24\nDIRECTRY DS    0F,CL(DIRSKELN)     PDS DIRECTORY DCB                    00637**2\nPDS      DS    0F,CL(PDSSKELN)     PDS DATA DCB                         00638**2\nACCOUNT  DS    0F,CL(ACCSKELN)     ACCOUNT CARD FILE DCB                00639**3\nSYSPRINT DS    0F,CL(SYSSKELN)     SYSPRINT DCB                         00640**3\nOPENPARM DS    0F,CL(OPENSKLN)     OPEN PARAMETER LIST                  00641**7\nREADPARM READ  READDECB,SF,MF=L    READ PARAMETER LIST                  00642**3\nCLOSPARM DS    0F,CL(CLOSSKLN)     CLOSE PARAMETER LIST                 00643**7\nUADSJFCB DS    0F,CL(JFCBSIZE)     JFCB FOR SYS1.UADS                   00644*37\nPDSEXLST DS    F                   EXIT LIST FOR PDS DCB                00645*37\nDIRBLOCK DS    CL256               DIRECTORY BLOCK BUFFER               00646*37\nACNTCARD DS    CL80                ACCOUNT CARD BUFFER                  00647**3\nMSGBUF   DS    CL80                MESSAGE BUFFER                       00648*12\nCVEWORK  DS    CL8                 DECIMAL TO EBCDIC WORK AREA          00649*12\nUSERLNTH DS    AL1                 USERID LENGTH                        00650*22\nUSERID   DS    CL8                 USERID FIELD                         00651*13\nPASSWORD DS    CL8                 PASSWORD FIELD                       00652*13\nPROCNAME DS    CL8                 PROCEDURE NAME FIELD                 00653*13\nPROCUNIT DS    CL8                 PROCEDURE UNIT NAME FIELD            00654*13\nACNTLNTH DS    AL1                 ACCOUNT NUMBER FIELD LENGTH          00655*13\nACNTDATA DS    CL40                ACCOUNT NUMBER FIELD                 00656*13\nDUMPFLGS DS    XL1                 FLAGS                                00657*15\nDUMPFUSR EQU   X'80'               FIRST CALL TO GENERATE FOR THIS USER 00658*15\nDUMPCONT EQU   X'40'               CONTINUATION CARD HAS BEEN USED      00659*15\nDUMPDATA EQU   X'20'               DATA CARD HAS BEEN INSERTED          00660*24\nWORKSIZE EQU   *-WORKAREA          WORK AREA LENGTH IN BYTES            00661**1\n         EJECT                                                          00662**1\nENTLIST  DSECT                     DIRECTORY LIST ENTRY                 00663**2\nENTNAME  DS    CL8                 ENTRY NAME                           00664**2\nENTTTR   DS    XL4                 ENTRY TTR                            00665**3\nENTNEXT  DS    A                   NEXT DIRECTORY LIST ENTRY            00666**2\nENTLSIZE EQU   *-ENTLIST           DIRECTORY LIST ENTRY SIZE IN BYTES   00667**2\n         EJECT                                                          00668**2\nDIRENT   DSECT                     DIRECTORY BLOCK ENTRY                00669**2\nDIRNAME  DS    CL8                 ENTRY NAME                           00670**2\nDIRTTR   DS    XL3                 ENTRY TTR                            00671**3\nDIRFLAGS DS    XL1                 ENTRY FLAGS                          00672**3\n         EJECT                                                          00673**2\n         DCBD  DSORG=PS,DEVD=DA                                         00674**4\n         EJECT                                                          00675**4\n         IKJEFUAD DSPL,ALL                                              00676**4\n         EJECT                                                          00677**4\nJFCB     DSECT                                                          00678*37\n         IEFJFCBN LIST=YES                                              00679*37\nJFCBSIZE EQU   *-JFCB                                                   00680*37\n         EJECT                                                          00681*37\n         END   UADSDUMP                                                 00682**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UADSREF": {"ttr": 11527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\xc4\\x00\\xc4\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 196, "newlines": 196, "modlines": 0, "user": "FILE013"}, "text": "1UADSREF: PROCEDURE OPTIONS (MAIN REENTRANT) REORDER;                   00001\n0/*******************************************************************/  00002\n /*                                                                 */  00003\n /*  PROGRAM NAME -                                                 */  00004\n /*                                                                 */  00005\n /*     UADSREF                                                     */  00006\n /*                                                                 */  00007\n /*  FUNCTION -                                                     */  00008\n /*                                                                 */  00009\n /*     THIS PROGRAM READS THE SYS1.UADS DATASET AND PRODUCES       */  00010\n /*     \"ACCOUNT\" CONTROL CARDS TO DELETE AND ADD USERIDS.          */  00011\n /*                                                                 */  00012\n /*  REQUIREMENTS -                                                 */  00012\n /*                                                                 */  00012\n /*     THIS PROGRAM REQUIRES THAT PL/I RELEASE 5.1 OR HIGHER       */  00012\n /*     BE INSTALLED FOR EXECUTION.                                 */  00012\n /*                                                                 */  00012\n /*  SAMPLE JCL -                                                   */\n /*                                                                 */\n /*  //JOBNAME  JOB (ACCT DATA,'PROGRAMMER NAME',                   */       000\n /*  //         CLASS=X,MSGCLASS=X,NOTIFY=XXXXXX                    */       000\n /*  //UADSREF  EXEC PGM=UADSREF                                    */       000\n /*  //SYSPRINT  DD  SYSOUT=*                                       */       000\n /*  //SYSOUT    DD  SYSOUT=*                                       */       000\n /*  //PL1DUMP   DD  SYSOUT=*                                       */       000\n /*  //UADS      DD  DSN=SYS1.UADS(USERID0),DISP=SHR,DCB=(RECFM=U,  */       000\n /*  //             BLKSIZE=6192)                                   */       000\n /*                                                                 */  00012\n /*******************************************************************/  00013\n1   DECLARE                                                             00014\n       UADS FILE RECORD INPUT,                                          00015\n       SYSPRINT FILE PRINT,                                             00016\n       ACCOUNT FILE RECORD OUTPUT,                                      00017\n0      1 DHED BASED (HEDBPTR),                                          00018\n          2 UADSMHDR,                                                   00019\n             3 UADSBLNG FIXED BIN (15),                                 00020\n             3 UADSFSQP FIXED BIN (15),                                 00021\n             3 UADSUSER CHAR (8),                                       00022\n             3 UADSBN01,                                                00023\n                4 UADSBN1R CHAR (1),                                    00024\n                4 UADSBN1F CHAR (1),                                    00025\n             3 UADSOMAX FIXED BIN (15),                                 00026\n             3 UADSATTR,                                                00027\n                4 UADSATR1 CHAR (1),                                    00028\n                4 UADSATR2 CHAR (1),                                    00029\n             3 UADSINST BIT (16) ALIGNED,                               00030\n             3 UADSUPTP FIXED BIN (31),                                 00031\n             3 UADSPWD1 FIXED BIN (31),                                 00032\n             3 UADSPERP FIXED BIN (31),                                 00033\n             3 UADSDEST CHAR (8),                                       00034\n             3 UADSSUBH CHAR (1),                                       00035\n             3 UADSSUBC CHAR (1),                                       00036\n             3 UADSSUBM CHAR (1),                                       00037\n             3 UADSSOUT CHAR (1),                                       00038\n             3 UADSSUBR CHAR (1),                                       00039\n             3 UADSDRBA CHAR (3),                                       00040\n             3 UADSDFTP FIXED BIN (31),                                 00041\n             3 UADSMAXC FIXED BIN (31),                                 00042\n             3 UADSRSVD CHAR (8),                                       00043\n       HEDBPTR POINTER,                                                 00044\n       OVLY_UADSENT (200) FIXED BIN (31),                               00045\n       UADSENT CHAR (800) VAR BASED (HEDBPTR),                          00046\n0      1 UADSNODE BASED (UADSNPTR),                                     00047\n          2 UADSNNFL CHAR (1),                                          00048\n          2 UADSNNEX CHAR (3),                                          00049\n          2 UADSNSUB FIXED BIN (31),                                    00050\n          2 UADSNDAT FIXED BIN (31),                                    00051\n       UADSNPTR POINTER,                                                00052\n       OVLY_NODE CHAR (12),                                             00053\n0      1 DPOPB BASED (UADSPPTR),                                        00054\n          2 UADSPCTR CHAR (1),                                          00055\n          2 UADSRSVD CHAR (3),                                          00056\n          2 UADSPPWD CHAR (8),                                          00057\n       UADSPPTR POINTER,                                                00058\n       OVLY_DPOPB CHAR (12),                                            00059\n0      1 DNOBD BASED (UADSAPTR),                                        00060\n          2 UADSACTR CHAR (1),                                          00061\n          2 UADSRSVD CHAR (3),                                          00062\n          2 UADSADRF CHAR (40),                                         00063\n          2 UADSALEN CHAR (1),                                          00064\n          2 UADSANUM CHAR (40 REFER (UADSALEN)),                        00065\n       UADSAPTR POINTER,                                                00066\n       OVLY_DNOBD CHAR (85),                                            00067\n0      1 DROBD BASED (UADSRPTR),                                        00068\n          2 UADSRCTR CHAR (1),                                          00069\n          2 UADSRSVD CHAR (3),                                          00070\n          2 UADSRNAM CHAR (8),                                          00071\n          2 UADSRSIZ FIXED BIN (31),                                    00072\n          2 UADSUNAM CHAR (8),                                          00073\n       UADSRPTR POINTER,                                                00074\n       OVLY_DROBD CHAR (24),                                            00075\n0   OUT_REC CHAR (132) VAR,                                             00076\n0   SUBSTR BUILTIN,                                                     00077\n    ADDR BUILTIN,                                                       00078\n    LENGTH BUILTIN,                                                     00079**2\n    LOW BUILTIN,                                                        00080**2\n    UNSPEC BUILTIN;                                                     00081**2\n1   HEDBPTR = ADDR (OVLY_UADSENT);                                      00082\n    UADSNPTR = ADDR (OVLY_NODE);                                        00083\n    UADSPPTR = ADDR (OVLY_DPOPB);                                       00084\n    UADSAPTR = ADDR (OVLY_DNOBD);                                       00085\n    UADSRPTR = ADDR (OVLY_DROBD);                                       00086\n    READ FILE (UADS) INTO (OVLY_UADSENT);                               00087\n    OUT_REC = UADSUSER || ' USER ATTRIBUTES: ';                         00088\n    IF UNSPEC (UADSATR1) & '10000000'B THEN                             00089\n       OUT_REC = OUT_REC || '  OPER ';                                  00090\n    ELSE                                                                00091\n       OUT_REC = OUT_REC || 'NOOPER ';                                  00092\n    IF UNSPEC (UADSATR1) & '01000000'B THEN                             00093\n       OUT_REC = OUT_REC || '  ACCT ';                                  00094\n    ELSE                                                                00095\n       OUT_REC = OUT_REC || 'NOACCT ';                                  00096\n    IF UNSPEC (UADSATR1) & '00100000'B THEN                             00097\n       OUT_REC = OUT_REC || '  JCL ';                                   00098\n    ELSE                                                                00099\n       OUT_REC = OUT_REC || 'NOJCL ';                                   00100\n    IF UNSPEC (UADSATR1) & '00010000'B THEN                             00101\n       OUT_REC = OUT_REC || '  MOUNT ';                                 00102\n    ELSE                                                                00103\n       OUT_REC = OUT_REC || 'NOMOUNT ';                                 00104\n    IF UNSPEC (UADSATR1) & '00000100'B THEN                             00105\n       OUT_REC = OUT_REC || 'NORECOVER ';                               00106\n    ELSE                                                                00107\n       OUT_REC = OUT_REC || '  RECOVER ';                               00108\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00109\n    OUT_REC = (9) ' ' || 'INSTALLATION ATTRIBUTES (HEX): ' ||           00110\n       HEX (UADSINST);                                                  00111\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00112\n    OUT_REC = (9) ' ' || 'MAXSIZE: ';                                   00113\n    IF UADSMAXC = 0 THEN                                                00114\n       PUT FILE (SYSPRINT) EDIT (OUT_REC, 'NOLIM') (SKIP, (2) A);       00115\n    ELSE                                                                00116\n       PUT FILE (SYSPRINT) EDIT (OUT_REC, UADSMAXC) (SKIP, A, F (6));   00117\n    OUT_REC = (9) ' ' || 'DESTINATION:   ';                             00118\n    IF UADSDEST = LOW (8) THEN                                          00119\n       OUT_REC = OUT_REC || 'DEFAULT';                                  00120\n    ELSE                                                                00121\n       OUT_REC = OUT_REC || UADSDEST;                                   00122\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00123\n    OUT_REC = (9) ' ' || 'HOLD MSGCLASS: ';                             00124\n    IF UADSSUBH = LOW (1) THEN                                          00125\n       OUT_REC = OUT_REC || 'DEFAULT';                                  00126\n    ELSE                                                                00127\n       OUT_REC = OUT_REC || UADSSUBH;                                   00128\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00129\n    OUT_REC = (9) ' ' || 'JOB CLASS:     ';                             00130\n    IF UADSSUBC = LOW (1) THEN                                          00131\n       OUT_REC = OUT_REC || 'DEFAULT';                                  00132\n    ELSE                                                                00133\n       OUT_REC = OUT_REC || UADSSUBC;                                   00134\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00135\n    OUT_REC = (9) ' ' || 'MESSAGE CLASS: ';                             00136\n    IF UADSSUBM = LOW (1) THEN                                          00137\n       OUT_REC = OUT_REC || 'DEFAULT';                                  00138\n    ELSE                                                                00139\n       OUT_REC = OUT_REC || UADSSUBM;                                   00140\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00141\n    OUT_REC = (9) ' ' || 'SYSOUT CLASS:  ';                             00142\n    IF UADSSOUT = LOW (1) THEN                                          00143\n       OUT_REC = OUT_REC || 'DEFAULT';                                  00144\n    ELSE                                                                00145\n       OUT_REC = OUT_REC || UADSSOUT;                                   00146\n    PUT FILE (SYSPRINT) EDIT (OUT_REC) (SKIP, A);                       00147\n    RETURN;                                                             00148\n1HEX: PROCEDURE (BIT_STRING) RETURNS (CHAR (512) VAR);                  00149\n0/*******************************************************************/  00150\n /*                                                                 */  00151\n /*  FUNCTION NAME -                                                */  00152\n /*                                                                 */  00153\n /*     HEX                                                         */  00154\n /*                                                                 */  00155\n /*  FUNCTION -                                                     */  00156\n /*                                                                 */  00157\n /*     THIS FUNCTION RETURNS THE EBCDIC HEX REPRESENTATION OF THE  */  00158\n /*     STRING PASSED TO IT.                                        */  00159\n /*                                                                 */  00160\n /*******************************************************************/  00161\n1   DECLARE                                                             00162\n       BIT_STRING BIT (1024) VAR,                                       00163\n       CHAR_STRING CHAR (512) VAR,                                      00164\n0      BIT_LEN FIXED BIN (31),                                          00165\n       BIT_POS FIXED BIN (31),                                          00166\n0      CONV_CHARS (0 : 15) CHAR (1) STATIC                              00167\n          INIT ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',       00168\n          'A', 'B', 'C', 'D', 'E', 'F');                                00169\n1   BIT_LEN = LENGTH (BIT_STRING);                                      00170\n    BIT_POS = 1;                                                        00171\n    CHAR_STRING = '';                                                   00172\n    DO WHILE (BIT_LEN > BIT_POS);                                       00173\n       CHAR_STRING = CHAR_STRING ||                                     00174\n          CONV_CHARS (SUBSTR (BIT_STRING, BIT_POS, 4));                 00175\n       BIT_POS = BIT_POS + 4;                                           00176\n       END;                                                             00177\n    RETURN (CHAR_STRING);                                               00178\n    END HEX;                                                            00179\n    END UADSREF;                                                        00180\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCC7DSNX": {"ttr": 11531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00r\\x00r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "FILE013"}, "text": "SASSXX07 TITLE 'SASSXX07 -- UCC7/RACF LOGOFF EXIT'\n*--------------------------------------------------------------------*\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     SASSXX07 -- UCC7/RACF EXTERNAL DATASET SECURITY EXIT           *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     THE PURPOSE OF THIS EXIT IS TO ISSUE RACHECKS FOR ALL          *\n*     ACCESSES TO EXTERNAL DATASETS BASED ON THE USER'S ACEE.        *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*                                                                    *\n*  OPERATION -                                                       *\n*                                                                    *\n*     THE ACEE IS CREATED AT LOGON AND DELETED AT LOGOFF.            *\n*                                                                    *\n*     NO CHECKING IS DONE FOR THE SECRET PASSWORD.  JCL UPDATES      *\n*     ARE ALWAYS REJECTED IF FROM THE MASTER TERMINAL WHICH          *\n*     IN THIS INSTALLATION IS THE MVS WTOR INTERFACE.                *\n*                                                                    *\n*  INPUT -                                                           *\n*                                                                    *\n*     R2  = PARMLIST                                                 *\n*                                                                    *\n*              +0 USERID OF TERMINAL OPERATION                       *\n*              +1 READ/WRITE INDICATOR  ('R' OR 'W')                 *\n*              +2 RETURN CODE FROM UCC7  SECURITY CHECK              *\n*                   (0=ACCEPT, 4=REJECT)                             *\n*              +4 ADDRESS OF THE 44 BYTE DSN AREA                    *\n*              +8 AL1(184) CONSTANT                                  *\n*              +9 ADDRESS OF MEMBER NAME OR ZEROS                    *\n*                                                                    *\n*     R11 = ADDR OF SCT                                              *\n*     R12 = ADDR OF SVT                                              *\n*                                                                    *\n*     NOTE:  THE RACHECK ROUTINE IS LOCATED IN SOURCE                *\n*            SASSXXL1.                                               *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         SPACE  3\n*\n         PRINT NOGEN\n         UCC7SVT\n         SASSEQU\n         SCTENTRY\n         USRSCT\n         PRINT GEN\n         USING SASSXX07,R10\n         USING SCTSTART,R11\n         USING UCC7SVT,R12\n         USING USRSCT,R4\nSASSXX07 CSECT\n         LR    R10,R15\n         B     SX07_FIND_ACEE         CHECK IF USER SCT EXISTS\n         DC    C'SASSXX07 &SYSDATE'\n*\n*---------------------------------------------------------------------*\n*  CHECK TO SEE IF USER SCT WAS ACQUIRED.                             *\n*  CHECK TO SEE IF ACEE WAS ACQUIRED.                                 *\n*---------------------------------------------------------------------*\n*\nSX07_FIND_ACEE             DS 0H\n         L     R4,SCTUSRXX              USER SCT\n         LTR   R4,R4                    WAS IT ACQUIRED\n         BZ    SX07_EXIT                'N' - RETURN\n         TM    USR#FLG1,USR#RACF        ACEE ACQUIRED\n         BNO   SX07_EXIT                'N' - RETURN\n*\n         XC    USR#WORK(256),USR#WORK   CLEAR WORKAREA\n         MVI   USR#WORK+C'R',X'02'      SET READ INDICATOR FOR TR\n         MVI   USR#WORK+C'W',X'04'      SET WRITE INDICATOR FOR TR\n         MVC   USR#RPRM+24,1(R2)        COPY R/W FROM PARMLIST\n         TR    USR#RPRM+24(1),USR#WORK  TRANSLATE FOR RACHECK\n         L     R5,4(R2)                 ADDRESS OF DSNAME\n*\n*  IF THE FOLLOWING LOCATE FAILS THEN NO NEED FOR FURTHER\n*  SECURITY CHECKING SINCE DSNAME DOES NOT EXIST ANYWAY.\n*\n         SLOC  DSN=(R5),AREA=USR#WORK,PLIST=USR#PLST,                  X\n               VOL=USR#VOL,ERR=SX07_EXIT\n*\n         ST    R5,USR#RPRM+20           SAVE DSN\n         OI    USR#FLG1,USR#RCHK        INDICATE RACHECK\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUB TASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n         LTR   R15,R15                  USER AUTHORIZED\n         BZ    SX07_EXIT                'Y' - SET RC=0\n         CH    R15,=H'4'                'N' - SEE IF NOT DEF TO RACF\n         BE    SX07_EXIT                'Y' - SET RC=0\n         MVI   2(R2),X'04'              'N' - SET RC=4\n         LA    R15,4                    RC=4\n         SEXIT                          RETURN\n*\n*-------------------------------------------------------------------*\n* EXIT ROUTINES\n*-------------------------------------------------------------------*\n*\nSX07_EXIT                     DS  0H\n         LA    R15,0                    RC=0\n         SEXIT                          RETURN\n*\n*-------------------------------------------------------------------*\n* DATA DEFINITIONS\n*-------------------------------------------------------------------*\n*\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCC7LOGF": {"ttr": 11779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00S\\x00S\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "FILE013"}, "text": "SASSXXFF TITLE 'SASSXXFF -- UCC7/RACF LOGOFF EXIT'\n*--------------------------------------------------------------------*\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     SASSXXFF -- UCC7/RACF LOGOFF EXIT                              *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     LOGOFF OF UCC7/RACF BY PERFORMING CLEANUP, FREE THE ACEE       *\n*     AT LOGOFF AS IT WAS ACQUIRED BY THE LOGON EXIT.                *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*                                                                    *\n*     REENTRANT, REUSABLE                                            *\n*  OPERATION -                                                       *\n*                                                                    *\n*     THE FIRST FULLWORD OF THE SCTUSRXX FIELD IS USED AS A          *\n*     POINTER TO A USER SCT.  THIS DATA AREA WILL PROBABLY           *\n*     EXPAND AS THE NEED ARISES.  HOWEVER, FOR NOW IT KEEPS          *\n*     A RECORD OF THE USERID, GROUP, PASSWORD AND POINTS TO          *\n*     THE ACEE FOR THE CURRENT LOGGED ON USER.                       *\n*                                                                    *\n*  INPUT -                                                           *\n*                                                                    *\n*     R11 = ADDR OF SCT                                              *\n*     R12 = ADDR OF SVT                                              *\n*                                                                    *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         SPACE  3\n*\n         PRINT NOGEN\n         UCC7SVT\n         SASSEQU\n         SCTENTRY\n         USRSCT\n         PRINT GEN\n         USING SASSXXFF,R10\n         USING SCTSTART,R11\n         USING UCC7SVT,R12\n         USING USRSCT,R4\nSASSXXFF CSECT\n         LR    R10,R15\n         B     SXFF_FREE_ACEE         CHECK IF ACEE EXISTS\n         DC    C'SASSXXFF &SYSDATE'\n*\n*---------------------------------------------------------------------*\n*  CHECK TO SEE IF USER SCT WAS ACQUIRED.                             *\n*  CHECK TO SEE IF ACEE WAS ACQUIRED.                                 *\n*  IF ACEE WAS  ACQUIRED, THEN FREE IT.                               *\n*  NOTE:  THE RACF ROUTINE RESIDES IN SOURCE MODULE SASSXXL1.         *\n*---------------------------------------------------------------------*\n*\nSXFF_FREE_ACEE             DS 0H\n         L     R4,SCTUSRXX              USER SCT\n         LTR   R4,R4                    WAS IT ACQUIRED\n         BZ    SXFF_EXIT                N - RETURN\n         TM    USR#FLG1,USR#RACF        ACEE TO FREE\n         BNO   SXFF_EXIT                N - RETURN\n         NI    USR#FLG1,X'FF'-USR#RACF  TURN OFF FLAG\n         OI    USR#FLG1,USR#XACE        INDICATE CLEAR ACEE\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUB TASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n         NI    USR#FLG1,X'FF'-USR#TACT  TURN OFF ACTIVE FLAG\n*---------------------------------------------------------------------*\n*        EXIT  ROUTINES\n*---------------------------------------------------------------------*\nSXFF_EXIT                     DS 0H\n         LA    R15,0                    SET RC EQUAL TO 0\n         SEXIT                          RETURN\n*\n*---------------------------------------------------------------------*\n*        DATA  DEFINITIONS\n*---------------------------------------------------------------------*\n*\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCC7LOGO": {"ttr": 11782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x02-\\x02-\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 557, "newlines": 557, "modlines": 0, "user": "FILE013"}, "text": "SASSXXL1 TITLE 'SASSXXL1 -- UCC7/RACF LOGON EXIT'\n*--------------------------------------------------------------------*\n*  PROGRAM NAME:                                                     *\n*                                                                    *\n*     SASSXXL1 -- UCC7/RACF LOGON EXIT                               *\n*                                                                    *\n*  FUNCTION:                                                         *\n*                                                                    *\n*        /LOGON                         (S/R)                        *\n*                                                                    *\n*        GROUP,USERIDPWD                (S/R) (IF USERID IS 7 BYTES  *\n*                                              LONG)                 *\n*             OR                                                     *\n*                                                                    *\n*        GROUP,USERID/PWD               (S/R) (NOT DEPENDENT ON      *\n*                                              USERID LENGTH)        *\n*             OR                                                     *\n*                                                                    *\n*        GROUP,USERID,PWD               (S/R) (NOT DEPENDENT ON      *\n*                                              USERID LENGTH)        *\n*                                                                    *\n*      - 'GROUP' IS A VALID RACF GROUP                               *\n*      - 'USERID' IS A VALID TSO USERID(MUST BE PART OF RACF GROUP)  *\n*      - 'PWD' IS THE PASSWORD FOR THE USERID                        *\n*                                                                    *\n*        AFTER THE RACINIT IS COMPLETED, THE POINTER IS PLACED       *\n*        IN THE SCTUSRXX FIELD FOR USE BY SGETPDS/SPUTPDS RACF       *\n*        VERIFICATION USER EXITS.                                    *\n*                                                                    *\n*        IF A LOGON IS BEING DONE FROM THE MASTER CONSOLE THEN       *\n*        AN OPID OF MASTER IS REQUIRED AND RACF CHECKING IS NOT      *\n*        DONE.                                                       *\n*                                                                    *\n* USAGE  NOTES:                                                      *\n*                                                                    *\n*     -  EACH RACF GROUP USING UCC7 MUST BE INCLUDED IN THE          *\n*        SASSSECI SECURITY GEN MODULE AS THE OPID IF LESS THAN       *\n*        7 CHARACTERS.                                               *\n*                                                                    *\n*     -  A TRANSLATE TABLE FOR RACF GROUPS GREATER THAN 6            *\n*        CHARACTERS HAS BEEN DISABLED.  ALL RACF GROUPS FOR          *\n*        THE PURPOSE OF UCC7/RACF MUST BE 6 CHARACTERS OR LESS       *\n*        SINCE UCC7 \"OPIDS\" ARE LIMITED TO 6 CHARACTERS.             *\n*                                                                    *\n*     -  MACLIBS NEEDED FOR ASSEMBLY:                                *\n*                                                                    *\n*        -   'SYS1.MACLIB'                                           *\n*        -   'SS.UCC7.R28.MACLIB'                                    *\n*        -   'SYS1.AMODGEN'                                          *\n*                                                                    *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*   REENTRANT, REUSEABLE                                             *\n*                                                                    *\n*                                                                    *\n* REGISTER USAGE CONVENTIONS:                                        *\n*                                                                    *\n*  INPUT:                                                            *\n*                                                                    *\n*     R2  = ADDR OF 8 BYTE AREA CONTAINING OPERATOR ID ENTERED       *\n*                                                                    *\n*     R3  = ADDR OF AREA CONTAINING PASSWORD IF ENTERED OR ZEROS     *\n*           IF NOT ENTERED.  IF PASSWORD ENTERED, AREA CONSISTS      *\n*           OF 2 BYTE LENGTH FIELD FOLLOWED BY PASSWORD ENTERED.     *\n*           LENGTH INCLUDES LENGTH FIELD.                            *\n*                                                                    *\n*     R5  = ADDR OF TERMINAL CONTROL BLOCK.  1ST 7 POSITIONS         *\n*           CONTAIN TERMINAL NAME FROM INIT DECK.                    *\n*                                                                    *\n*  OUTPUT -                                                          *\n*                                                                    *\n*     R15  = RETURN CODE FOR UCC7                                    *\n*                                                                    *\n*            0 = ACCEPT THE LOGON                                    *\n*        NOT 0 = REJECT THE LOGON                                    *\n*                                                                    *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*                                                                    *\n**********************************************************************\n         EJECT\n         SPACE  3\n*\n         PRINT NOGEN\n         UCC7SVT\n         SASSEQU\n         SCTENTRY\n         SASSVTMB\n         SASSTBLK\n         PRINT GEN\n         USRSVT\n         USRSCT MOD=LOGON\n         USING SASSXXL1,R10\n         USING SCTSTART,R11\n         USING TRMDEF,R5\n         USING UCC7SVT,R12\n         USING USRSCT,R4\nSASSXXL1 CSECT\n         LR    R10,R15\n         B     SXL1_INIT_USR_SCT        INITIALIZE USERSCT\n         DC    C'SASSXXL1 &SYSDATE'\n*\n*---------------------------------------------------------------------*\n*  ACQUIRE STORAGE FOR USER SCT IF NOT ALREADY DONE.                 *\n*    AND INITIALIZE PARM FIELDS.                                     *\n*---------------------------------------------------------------------*\n*\nSXL1_INIT_USR_SCT       DS 0H\n         L     R4,SCTUSRXX              ADDRESS OF USER SCT\n         LTR   R4,R4                    STORAGE ACQUIRED\n         BNZ   SXL1_MASTER_TERMINAL     CHECK FOR MASTER TERM\n*\nSXL1_GET_USR_SCT        DS 0H\n         LA    R0,USR#SIZE              LENGTH OF USER SCT\n         SGETM SIZE=(R0),BUSY=SXL1_WAIT,RETURN=SXL1_GOT_USR_SCT\n*\nSXL1_WAIT               DS 0H\n*\n         SWAIT ECFADD=(R0),ECFMASK=(R0),RETURN=SXL1_GET_USR_SCT\n*\nSXL1_GOT_USR_SCT        DS 0H\n         ST    R1,SCTUSRXX              SAVE POINTER TO USER SCT\n         LR    R4,R1                    POINT TO USER SCT\n         LA    R6,USR#SIZE              LENGTH TO CLEAR\n*\nSXL1_CLEAR_USRSCT       DS 0H\n*\n         MVI   0(R1),X'00'              ZERO BYTE\n         LA    R1,1(R1)                 NEXT BYTE\n         BCT   R6,SXL1_CLEAR_USRSCT     CLEAR THIS ONE\n         LA    R1,RACFRTN               ADDR OF RACF ROUTINE\n         ST    R1,USR#XADR              STORE IN SCHADR PARMLIST\n         LA    R1,USR#RPRM              RACF PARMLIST\n         ST    R1,USR#XADR+4            STORE IN SCHADR PARMLIST\n         MVI   USR#XADR+8,144           INDICATE BALR 14,15\n         ST    R12,USR#RPRM             SAVE POINTER TO SVT\n         ST    R11,USR#RPRM+4           SAVE POINTER TO SCT\n         LA    R1,USR#LGRP              POINT TO GROUP/OPID NAME\n         ST    R1,USR#RPRM+8            SAVE IN PARMLIST\n         LA    R1,USR#LUSR              POINT TO USER ID NAME\n         ST    R1,USR#RPRM+12           SAVE IN PARMLIST\n         LA    R1,USR#LPAS              POINT TO PASSWORD\n         ST    R1,USR#RPRM+16           SAVE IN PARMLIST\n         OI    USR#RPRM+16,X'80'        INDICATE LAST IN LIST\n         MVC   USR#RIDP,RACDEL          BUILD RACINIT DELETE PARM\n         MVC   USR#RICP,RACCRE          BUILD RACINIT CREATE PARM\n         MVC   USR#RCP,RACHK            BUILD RACHECK PARM\n*---------------------------------------------------------------------*\n* CLEAR ACEE FIELD IF PREVIOUSLY ACQUIRED.                            *\n* CHECK MASTER TERMINAL, SPECIAL BATHC OPIDS AND \"SECRET\" LOGON       *\n*\nSXL1_MASTER_TERMINAL    DS 0H\n*\n         TM    USR#FLG1,USR#RACF        ACEE FROM PREVIOUS USER\n         BNO   SXL1_NO_ACEE             'N' - NOTHING TO FREE\n         NI    USR#FLG1,X'FF'-USR#RACF  TURN OFF FLAG\n         OI    USR#FLG1,USR#XACE        INDICATE CLEAR ACEE\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUB TASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n*\nSXL1_NO_ACEE            DS 0H\n*\n         CLI   TRMDVC,TRMBATCH          IS THIS A BATCH TERM\n         BNE   NOT_BATCH                THIS IS NOT A BATCH TERM\n         B     BATCH_CHECK              BRANCH BATCH TERM SECTION\nNOT_BATCH               DS 0H\n         CLI   TRMDVC,TRMTRL            IS THIS A TARILER TERM\n         BNE   NOT_TRAILER              THIS IS NOT A TRAILER TRM\n         B     TRAILER_CHECK            BRANCH TRAILER TRM SECTION\nNOT_TRAILER             DS 0H\n         MVC   USR#GRP,0(R2)            INIT RACF GROUP NAME\n         MVC   USR#OPID,0(R2)           INIT OPID\n         MVC   USR#UID,=CL7' '          INIT USER ID\n         MVC   USR#PASS,=CL8' '         INIT PASSWORD\n         OI    USR#FLG1,USR#NOR         INIT AS NO RACF CHECKING\n         TIME  ,                        FIND THE CURRENT DATE\n*\n         STCM  R1,B'0111',USR#PDAT      STORE DATE\n         CLC   =C'UCC7MST',0(R5)        IS THIS THE MASTER TERMINAL?\n         BNE   SXL1_INIT_SCAN           'N' - INITIALIZE FOR SCAN\n*\n         CLC   =C'MASTER',0(R2)         OPID OF MASTER REQUIRED\n         BE    SXL1_EXIT_RC0            'Y' - CONTINUE LOGON\n         B     SXL1_EXIT_RC8            'N' - FAIL LOGON\n*---------------------------------------------------------------------*\n* SCAN USERID AND PASSWORD FIELD POINTED TO BY (R3)                   *\n* IF NO  PASSWORD FIELD EXISTS FAIL LOGON                             *\n* THEN CHECK FOR A USERID AND PASSWORD DELIMITED BY A                 *\n* \"/\" OR  \",\"                                                         *\n*                                                                     *\n* IF THE \"/\" OR \",\" DELIMITERS ARE USED THE USERID MAYBE              *\n* ANY LENGTH UP TO 7 BYTES.                                           *\n*                                                                     *\n* FROM THIS POINT ON THE OPID IS POINTED TO BY R9                     *\n* SINCE TRT DESTROYS R2.                                              *\n*---------------------------------------------------------------------*\n*\nSXL1_INIT_SCAN          DS 0H\n*\n         NI    USR#FLG1,X'FF'-USR#NOR   TURN OFF NO RACF INDICATOR\n         LR    R9,R2                    SAVE ADDR OF OPID\n         LTR   R3,R3                    AT THIS POINT WE NEED A PSWD\n         BZ    SXL1_EXIT_RC8            'N' - FAIL LOGON\n         LA    R6,2(R3)                 WHERE PARM BEGINS\n         LH    R7,0(R3)                 MAX LENGTH OF USERID/PSWD FIELD\n         BCTR  R7,0                     GET MACHINE LENGTH\n         BCTR  R7,0                     GET MACHINE LENGTH\n         BCTR  R7,0                     GET MACHINE LENGTH\n         LR    R1,R3                    POINT TO FIELD\n         EX    R7,TRTPARSE              PARSE FIELD BYTE\n         BC    8,SXL1_FULL_LENGTH       NONE FOUND\n         BC    2,SXL1_FOUND_BLANK       LAST CHAR IS BLANK\n         CLM   R2,B'0001',C' '          DID WE FIND A BLANK?\n         BE    SXL1_FOUND_BLANK         'Y' - CALCULATE LENGTH OF PSWD\n*\n         LR    R2,R1                    WHERE \"/\" IS\n         SR    R2,R6                    LENGTH OF USERID\n         SR    R7,R2                    LENGTH OF PASSWORD\n*\n*  USERID CAN NOT BE GREATER THAN 7 OR LESS THAN 1 CHARACTER(S)\n*\n         CH    R2,=H'7'                 IS USERID TOO LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         LTR   R2,R2                    IS USERID 'ZERO'?\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n*\nSXL1_CHK_FOR_BLANKS     DS 0H\n*\n* IF THE USER HIT THE SPACE BAR AFTER ENTERING USERID AND\n*   PASSWORD, THE BLANK WILL BE PASSED ALONG AS A VALID\n*   CHARACTER.  RACINIT WILL USE THE BLANK AS PART OF THE\n*   PASSWORD AND CAUSE ABEND S283.\n* THEREFORE, OMIT ALL TRAILING BLANKS .\n*\n         LA    R8,0(R7,R1)              END OF PASSWORD\n         CLI   0(R8),C' '               MAKE SURE NO BLANKS\n         BNE   SXL1_PASSWORD_LEN        'N' - NO TRAILING BLANKS\n         BCTR  R7,0                     DECREMENT LENGTH\n         LTR   R7,R7                    PASSWORD ALL BLANKS?\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         B     SXL1_CHK_FOR_BLANKS      CONTINUE SCAN\n*\nSXL1_PASSWORD_LEN       DS 0H\n*\n         CH    R7,=H'8'                 IS PASSWORD TOO LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         STC   R2,USR#LUSR              SAVE LENGTH\n         STC   R7,USR#LPAS              SAVE PSWD LENGTH\n         BCTR  R2,0                     MACHINE LENGTH\n         BCTR  R7,0                     MACHINE LENGTH\n         EX    R2,MVCUSRID              MOVE USERID\n         EX    R7,MVCPASS               MOVE PASSWORD\n         B     SXL1_SAVE_RACF_GRP       NOW MOVE THE RACFGRP TO PARMLST\n*\n*---------------------------------------------------------------------*\n* LAST CHARACTER IS A BLANK, SO SET MAX LENGTH OF USERID / PSWD       *\n*   FIELD AND CONTINUE AS IF NO BLANKS FOUND.                         *\n*                                                                     *\n* AT THIS POINT, THE USERID IS ASSUMED TO BE 7 BYTES LONG.            *\n*   TOO BAD IF IT ISN'T...                                            *\n*---------------------------------------------------------------------*\n*\nSXL1_FOUND_BLANK        DS 0H\n*\n         CLM   R2,B'0001',=C' '         IS THIS INDEED A BLANK?\n         BNE   SXL1_EXIT_RC8            'N' - A \"/\" OR \",\" NOT ALLOWED\n         LR    R2,R1                    WHERE BLANK IS\n         SR    R2,R6                    LENGTH TO BLANK\n         B     SXL1_MOVE_FIELDS         CONTINUE WITH THE MOVE\n*\nSXL1_FULL_LENGTH        DS 0H\n*\n*  THE USERID IS ASSUMED TO BE 7 BYTES SO THIS MEANS THAT\n*     THE FIELD MUST BE AT LEAST 8 BYTES LONG\n*     AND NO GREATER THAN 15 BYTES LONG.\n*\n         LH    R2,0(R3)                 LENGTH OF FIELD\n         S     R2,=F'2'                 OMIT LENGTH OF HALFWORD\n*\nSXL1_MOVE_FIELDS        DS 0H\n*\n         CH    R2,=H'8'                 LESS THAN 8 BYTES LONG\n         BL    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         CH    R2,=H'15'                GREATER THAN 15 BYTES LONG?\n         BH    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         MVI   USR#LUSR,X'07'           LENGTH OF USERID\n         MVC   USR#UID,0(R6)            MOVE USERID\n*\n* REG 1 IS LOADED TO MATCH MVCPASS EXECUTED MOVE INSTRUCTION\n*\n         LA    R1,6(R6)                 WHERE PASSWORD BEGINS-1\n         S     R2,=F'7'                 OMIT LENGTH OF USERID+1\n         STC   R2,USR#LPAS              STORE LENGTH\n         BCTR  R2,0                     MACHINE LENGTH\n         EX    R2,MVCPASS               MOVE THE PASSWORD\n*\n*---------------------------------------------------------------------*\n* THE OPID ENTERED MUST BE A VALID RACF GROUP.                        *\n* IT IS NECESSARY TO CALCULATE THE LENGTH AND SAVE IN THE             *\n*   GROUP FIELD FOR THE RACINIT.                                      *\n*---------------------------------------------------------------------*\n*\nSXL1_SAVE_RACF_GRP      DS 0H\n*\n         TRT   0(8,R9),PARSE            SEE HOW LONG OPID IS\n         BC    8,SXL1_8BYTE_OPID        IT IS EIGHT BYTES LONG\n         BC    2,SXL1_7BYTE_OPID        IT IS SEVEN BYTES LONG\n         CLM   R2,B'0001',=C' '         IS THIS A BLANK?\n         BNE   SXL1_EXIT_RC8            'N' - ONLY BLANK ALLOWED,\n*                                               FAIL LOGON\n         LR    R2,R1                    WHERE BLANK IS\n         SR    R2,R9                    LENGTH TO BLANK\n         LTR   R2,R2                    LENGTH = 0\n         BZ    SXL1_EXIT_RC8            'Y' - FAIL LOGON\n         STC   R2,USR#LGRP              STORE LENGTH OF GROUP\n         B     SXL1_ATTACH_RACINIT      CONTINUE WITH LOGON\n*\nSXL1_7BYTE_OPID         DS 0H\n*\n         CLM   R2,B'0001',=C' '         IS THIS A BLANK\n         BNE   SXL1_EXIT_RC8            'N' - ONLY BLANK ALLOWED,\n*                                           FAIL LOGON\n         MVI   USR#LGRP,X'07'           STORE LENGTH OF GROUP\n         B     SXL1_XLATE_GROUP         RACF GROUP DOES NOT = OPID\n*\nSXL1_8BYTE_OPID         DS 0H\n*\n         MVI   USR#LGRP,X'08'           STORE LENGTH OF GROUP\n*\n*---------------------------------------------------------------------*\n* SINCE THE RACF GROUP IS GREATER THAN 6 CHARACTERS IT CANNOT BE      *\n*  EQUAL TO THE OPID IN THE UCC7 SECURITY TABLE.  IT WILL BE          *\n*  NECESSARY TO TRANSLATE THIS RACF GROUP INTO ITS PROPER OPID        *\n*  BEFORE HANDING CONTROL BACK TO UCC7.                               *\n*---------------------------------------------------------------------*\n*\nSXL1_XLATE_GROUP        DS 0H\n*\n         L     R6,SVTUFLD               POINT TO USER SVT\n         L     R1,USR$GRPS-USRSVT(R6)   RACF/OPID XLATE TABLE\n         LTR   R1,R1                    TABLE LOADED\n         BNZ   SXL1_XLATE_LOOP          'Y' - LOAD ALREADY DONE\n*\n         SLOAD EPLOC=SASS$GRP           LOAD MODULE\n*\n         LTR   R15,R15                  LOAD SUCCESSFUL\n         BZ    SXL1_EXIT_RC8            'N' - FAIL LOGON\n         ST    R15,USR$GRPS-USRSVT(R6)  SAVE POINTER TO GROUP XLATE TAB\n         LR    R1,R15                   POINT TO IT\n*\nSXL1_XLATE_LOOP         DS 0H\n*\n         CLI   0(R1),X'FF'              END OF TABLE\n         BE    SXL1_EXIT_RC8            'Y' - FAIL THE LOGON\n         CLI   0(R1),X'40'              END OF TABLE\n         BE    SXL1_EXIT_RC8            'Y' - FAIL THE LOGON\n         CLC   0(8,R1),0(R9)            MATCH AN OPID\n         BE    SXL1_XLATE_MATCH         'Y' - SAVE OPID\n         LA    R1,16(R1)                NEXT TABLE ENTRY\n         B     SXL1_XLATE_LOOP          DO THE NEXT ENTRY\n*\nSXL1_XLATE_MATCH        DS 0H\n*\n         MVC   0(8,R9),8(R1)            CHANGE OPID FOR UCC7\n         MVC   USR#OPID,8(R1)           SAVE OPID IN USRSCT\n*\n*---------------------------------------------------------------------*\n* THE RACINIT CAUSES A WAIT TO BE ISSUED IF RACF PROFILE DATASET      *\n*   IS BUSY THEREFORE IT IS NECESSARY TO USE THE SUBTASK FUNCTION     *\n*   OF UCC7 TO PREVENT WAITS.                                         *\n*---------------------------------------------------------------------*\n*\nSXL1_ATTACH_RACINIT     DS 0H\n*\n         LA    R1,USR#XADR              PARM FOR SASSCHDX\n         L     R15,SCHDXADR             EP FOR SUBTASK MANAGER\n         BALR  R14,R15                  DO THE RACF ROUTINE\n         LTR   R15,R15                  CONTINUE WITH LOGON\n         BZ    SXL1_EXIT_RC0            'Y' - CONTINUE ALL IS OK\n*\n*---------------------------------------------------------------------*\n* EXIT ROUTINES                                                       *\n*---------------------------------------------------------------------*\n*\nSXL1_EXIT_RC8           DS 0H\n*\n         LA    R15,8                    SET RC=8\n         SEXIT                          RETURN\n*\nSXL1_EXIT_RC0           DS 0H\n*\n         OI    USR#FLG1,USR#TACT        MARK TERMINAL ACTIVE\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\nBATCH_CHECK             DS 0H\n*\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\nTRAILER_CHECK           DS 0H\n*\n         LA    R15,0                    SET RC=0\n         SEXIT                          RETURN\n*\n*---------------------------------------------------------------------*\n* RACF SUBROUTINE:                                                    *\n*                                                                     *\n*   THE PURPOSE OF THIS ROUTINE IS 2-FOLD.                            *\n*                                                                     *\n*   1) MAKE SURE THAT THE USER LOGGING ON PROVIDED A VALID            *\n*      USERID AND PASSWORD.                                           *\n*                                                                     *\n*   2) IF THE USERID AND PASSWORD ARE VALID THEN SAVE THE             *\n*      ACEE POINTER TO BE USED BY SGETPDS/SPUTPDS USER EXITS          *\n*      TO VERIFY RACF AUTHORITY.                                      *\n*                                                                     *\n*   IT IS POSSIBLE THAT THE LAST USER OF THE TERMINAL SCT DID         *\n*   NOT LOGOFF AND THUS DRIVE THE LOGOFF EXIT SASSXFF.  IN            *\n*   THIS CASE IT IS NECESSARY TO FREE THE ACEE ACQUIRED FOR           *\n*   THAT SESSION BEFORE OBTAINING THE CURRENT USER'S ACEE.            *\n*                                                                     *\n*   NOTE:  THE DELETE ACEE ROUTINE IS USED BY SASSXXFF AS             *\n*          WELL AS SASSXXL1.                                          *\n*                                                                     *\n*          SASSXX07 USES THE RACHECK CODE IN THIS MODULE.             *\n*---------------------------------------------------------------------*\n*\n         PUSH  USING\n         USING SCTSTART,R11\n         USING UCC7SVT,R12\n         USING RACFRTN,R15\n         USING USRSCT,R4\n*\nRACFRTN  DS    0H\n*\n         B     RACFSTRT                 BRANCH AROUND DATE/MOD STAMP\n         DC    C'RACFRTN &SYSDATE'      DATE/MODULE STAMP\n*\nRACFSTRT DS    0H\n*\n         STM   R14,R12,12(R13)          SAVE CALLERS REGS\n         DROP  R15\n         USING RACFRTN,R10\n         LR    R10,R15                  BASE REG\n         LR    R3,R1                    SAVE PARM\n         L     R12,0(,R3)               POINTER TO UCC7SVT\n         L     R11,4(,R3)               POINTER TO TERMINAL SCT\n         L     R4,SCTUSRXX              POINT TO USRSCT\n         ST    R13,USR#SAVE+4           CHAIN CALLERS SAVEAREA\n         LA    R1,USR#SAVE              POINT TO MY SAVEAREA\n         ST    R1,8(R13)                CHAIN MY SAVEAREA\n         LR    R13,R1                   SET MY SAVEAREA\n*\n* SEE IF RACINIT(DELETE) REQUEST\n*\n         TM    USR#FLG1,USR#XACE        CLEAR ACEE\n         BNO   RACINIT_NO_DELETE        'N' - REQUIRE ACEE\n         NI    USR#FLG1,X'FF'-USR#XACE  TURN OFF FLAGS\n         SR    R15,R15                  INIT RC=0\n         L     R5,USR#ACEE              POINT TO ACEE ADDRESS\n         LTR   R5,R5                    PREVIOUS ACEE ACQUIRED/\n*                                         NOT FREED\n         BZ    RACFRTN_EXIT             'N' - NOTHING TO DO\n         B     RACINIT_NO_DELETE   ATB INSERTEDEQUIRE ACEE\n*        L     R5,USR#ACEE              WHERE ACEE POINTER WILL BE\n         LA    R5,USR#ACEE   CH(ATB)    WHERE ACEE POINTER WILL BE\n*\n         RACINIT ENVIR=DELETE,ACEE=(R5),RELEASE=1.7,                   X\n               MF=(E,USR#RIDP)\n*\n         XC    USR#ACEE,USR#ACEE        CLEAR ACEE POINTER\n         B     RACFRTN_EXIT             RETURN\n*\nRACINIT_NO_DELETE       DS 0H\n*\n*  SEE IF RACHECK REQUEST\n*\n         TM    USR#FLG1,USR#RCHK        RACHECK REQUEST\n         BO    RACFRTN_RACHECK          'Y' - ISSUE RACHECK\n         LA    R5,USR#ACEE              WHERE ACEE POINTER WILL GO\n         L     R9,12(,R3)               POINTER TO USERID\n         L     R2,16(,R3)               POINTER TO PASSWORD\n         L     R7,8(,R3)                POINTER TO GROUP\n*\n         RACINIT USERID=(R9),PASSWRD=(R2),GROUP=(R7),PASSCHK=YES,      X\n               ENVIR=CREATE,ACEE=(R5),RELEASE=1.7,LOG=ALL,             X\n               MF=(E,USR#RICP)\n*\n         OI    USR#FLG1,USR#RACF        INDICATE ACEE ACQUIRED\n         B     RACFRTN_EXIT\n*\nRACFRTN_RACHECK         DS 0H\n*\n         L     R5,USR#ACEE              ADDRESS OF ACEE\n         L     R2,20(,R3)               ADDRESS OF DSNAME\n         LA    R6,USR#VOL               ADDRESS OF VOLUME NAME\n         SR    R7,R7                    CLEAR A REGISTER\n         IC    R7,24(,R3)               RACF ATTR\n*\n         RACHECK ENTITY=((R2)),VOLSER=(R6),                            X\n               DSTYPE=N,ACEE=(R5),ATTR=(R7),                           X\n               MF=(E,USR#RCP)\n*\n         NI    USR#FLG1,X'FF'-USR#RCHK  TURN OFF FLAG\n*\nRACFRTN_EXIT            DS 0H\n*\n         L     R13,USR#SAVE+4           GET CALLERS SAVEAREA\n         ST    R15,16(,R13)             SAVE RETURN CODE\n         LM    R14,R12,12(R13)          RESTORE REGS\n         BR    R14\n         POP   USING\n*\n*---------------------------------------------------------------------*\n*  DATA DEFINITIONS                                                   *\n*---------------------------------------------------------------------*\n*\n         LTORG\nSASS$GRP DC    CL8'SASS$GRP'\nMVCUSRID MVC   USR#UID(0),2(R3)         SAVE USERID\nMVCPASS  MVC   USR#PASS(0),1(R1)        SAVE PASSWORD\nTRTPARSE TRT   2(0,R1),PARSE            SEARCH FOR A BLANK OR SLASH\n*\n* RACINIT DELETE LIST\n*\nRACDEL   RACINIT ENVIR=DELETE,ACEE=RACDEL,RELEASE=1.7,MF=L\n*\nRACDEND  EQU   *\n*\n* RACINIT CREATE LIST\n*\nRACCRE   RACINIT USERID=RACCRE,PASSWRD=RACCRE,GROUP=RACCRE,            X\n               PASSCHK=YES,ENVIR=CREATE,ACEE=RACCRE,                   X\n               RELEASE=1.7,LOG=ALL,MF=L\n*\nRACCEND  EQU   *\n*\n* RACHECK LIST\n*\nRACHK    RACHECK ENTITY=(RACHK),VOLSER=RACHK,CLASS='DATASET',          X\n               DSTYPE=N,ACEE=RACHK,APPL='RLCLEAR',MF=L\n*\nRACHKEND EQU   *\n*\nPARSE    DC    XL256'00'\n         ORG   PARSE+C' '\n         DC    C' '\n         ORG   PARSE+C'/'\n         DC    C'/'\n         ORG   PARSE+C','\n         DC    C','\n         ORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNPROTCT": {"ttr": 12035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01!\\x01!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 289, "newlines": 289, "modlines": 0, "user": "FILE013"}, "text": "TEC417   TITLE 'UNPROTECT DASD DATA SETS'\n***********************************************************************\n* MEMBER: TEC417                                                      *\n* MACRO LIBS NEEDED: SYS1.AMODGEN (IEFJFCBN, IECSDSL1)                *\n*                    SYS1.MACLIB                                      *\n* LINKAGE EDITOR PARMS: LET,NCAL,XREF,MAP,LIST                        *\n*                                                                     *\n* PURPOSE:                                                            *\n*        THIS PROGRAM IS PART OF A DISASTER RECOVERY PLAN. IT WILL    *\n*        PRODUCE AMASPZAP CONTROL CARDS TO TURN OFF RACF AND          *\n*        PASSWORD PROTECTION FOR ALL NON-VSAM DATA SETS ON A DASD     *\n*        VOLUME. THIS IS NECESSARY IF A PACK DUMPED AT RNB MUST BE    *\n*        RESTORED AT ANOTHER SITE FOR DISASTER RECOVERY, SO THAT      *\n*        THE DEPENDENCE ON THAT SITE HAVING RACF IS REMOVED, AS WELL  *\n*        AS NOT REQUIRING ENTRIES IN THE PASSWORD DATA SET FOR OUR    *\n*        DATA SETS TO BE ACCESSED AT THAT SITE. THE PROGRAM SHOULD    *\n*        BE RUN AT THE RECOVERY SITE AFTER THE DATA SETS HAVE BEEN    *\n*        RESTORED.                                                    *\n* ABEND CODES:                                                        *\n*        U0001 - SYSPUNCH OPEN FAILED (PROBABLY SYSPUNCH MISSING)     *\n*        U0002 - RDJFCB FAILED (PROBABLY SYSUT1 MISSING)              *\n*        U0003 - SYSUT1 OPEN FAILED (PROBABLY SYSUT1 MISSING)         *\n*        U0004 - FIRST DSCB READ FROM SYSUT1 WAS NOT FMT4             *\n* JCL REQUIRED:                                                       *\n*                                                                     *\n*        //S1       EXEC PGM=TEC417                                   *\n*        //STEPLIB  DD DSN=. . .                                      *\n*    (1) //SYSPUNCH DD DSN=WHATEVER,UNIT=SYSDA,SPACE=(TRK,(1,1)),     *\n*        //            DISP=(,CATLG),DCB=BLKSIZE=A-MULTIPLE-OF-80     *\n*    (2) //SYSUT1   DD UNIT=SYSDA,VOL=SER=XXXXXX,DISP=OLD             *\n*        //*                                                          *\n*        //S2       EXEC PGM=AMASPZAP                                 *\n*        //SYSPRINT DD SYSOUT=*                                       *\n*    (3) //SYSLIB   DD DSN=FORMAT4.DSCB,DISP=OLD,UNIT=SYSDA,          *\n*        //            VOL=SER=XXXXXX,DCB=KEYLEN=44                   *\n*        //SYSIN    DD DSN=WHATEVER,DISP=OLD                          *\n*                                                                     *\n*        (1) SYSPUNCH WILL CONTAIN THE AMASPZAP CONTROL CARDS.        *\n*            THE BLKSIZE WILL DEFAULT TO 80 IF NOT SPECIFIED.         *\n*        (2) SYSUT1 POINTS TO THE DASD VOLUME TO BE PROCESSED         *\n*        (3) SYSLIB POINTS TO THE SAME VOLUME AS SYSUT1. AN OPERATOR  *\n*            REPLY WILL BE NECESSARY FOR THIS STEP TO RUN. KEYLEN     *\n*            MUST BE SPECIFIED AS 44.                                 *\n*                                                                     *\n* CHANGE LOG:                                                         *\n*        04/22/80  INITIAL VERSION, RAINIER NATIONAL BANK        WBF  *\n*        04/23/80  ADD SUPPORT FOR PARM=TEST                     WBF  *\n*        04/25/80  CHANGED TO NOT REWRITE JFCB. ADDED MACRO      WBF  *\n*                  BASED JFCB/DSCB REFERENCES.                   WBF  *\n***********************************************************************\n*\n         EJECT\nTEC417   CSECT\n*\nR0       EQU   0     WORK REG\nR1       EQU   1     PARAMETER REG, WORK REG\nR2       EQU   2     BASE FOR SYSUT1 DCB, WORK REG IN DCB EXIT\nR3       EQU   3     WORK REG IN DCB EXIT\nR4       EQU   4     WORK REG IN DCB EXIT\nR5       EQU   5     NOT USED\nR6       EQU   6     NOT USED\nR7       EQU   7     NOT USED\nR8       EQU   8     NOT USED\nR9       EQU   9     NOT USED\nR10      EQU   10    NOT USED\nR11      EQU   11    NOT USED\nR12      EQU   12    PROGRAM BASE\nR13      EQU   13    SAVE AREA POINTER\nR14      EQU   14    LINK REG\nR15      EQU   15    LINK REG\n*\n         USING *,R15               #####TEMPORARY PROGRAM BASE\n         SAVE  (14,12),,TEC417_&SYSDATE_&SYSTIME\n         LR    R12,R15             GET GOOD BASE REG\n         DROP  R15                 #####\n         USING TEC417,R12          #####PERMANENT PROGRAM BASE\n         LA    R2,SAVE             LINK SAVE AREAS\n         ST    R13,SAVE+4            .\n         ST    R2,8(,R13)            .\n         LA    R13,SAVE              .\n         L     R1,0(,R1)           GET EXEC PARM\n         CLC   0(2,R1),=H'4'       IS PARM AT LEAST 4 BYTES?\n         BL    OPENPUN             /NO  - CAN'T BE TEST\n*                                  /YES - CHECK IT\n         CLC   2(4,R1),=C'TEST'    TEST?\n         BNE   OPENPUN             /NO  - NORMAL RUN\n         MVI   ZAP5,C'*'           /YES - COMMENT OUT THE REP CARD\n         MVC   COM2TEST(6),=C'(TEST)'  AND SET A FLAG IN THE 2ND\n*                                      COMMENT RECORD\nOPENPUN  EQU   *\n         OPEN  (SYSPUNCH,OUTPUT)   OPEN THE OUTPUT DATA SET\n         TM    SYSPUNCH+DCBOFLGS-IHADCB,DCBOFOPN   DID IT OPEN?\n         BO    RDJFCB                              /YES\n         ABEND U0001                               /NO\n*\nRDJFCB   EQU   *\n         LA    R2,SYSUT1           BASE FOR SYSUT1 DCB\n         USING IHADCB,R2           #####SYSUT1 BASE\n         RDJFCB ((R2))             GET THE JFCB FOR SYSUT1\n         LTR   R15,R15             SUCCESSFUL?\n         BZ    OPENUT1             /YES\n         ABEND U0002               /NO\n*\nOPENUT1  EQU   *\n         MVI   JFCBDSNM,X'04'      RESET JFCB DSNAME TO 44 X'04'\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         OI    JFCBTSDM,JFCNWRIT   DON'T REWRITE JFCB\n         OPEN  ((R2),INPUT),       OPEN THE VTOC ON SYSUT1 PACK        X\n               TYPE=J\n         TM    DCBOFLGS,DCBOFOPN   DID IT OPEN?\n         BO    LOGVOLSR            /YES\n         ABEND U0003               /NO\n*\nLOGVOLSR EQU   *\n         PUT   SYSPUNCH,COM1       PUT COMMENT TO SYSPUNCH\n         MVC   COM2VOL,JFCBVOLS    LOG VOLSER BEING PROCESSED TO\n         PUT   SYSPUNCH,COM2       SYSPUNCH AS A COMMENT\n*\n         READ  FMT4DECB,           READ THE FORMAT 4 DSCB              X\n               SF,                                                     X\n               (R2),                                                   X\n               FMT4DSCB\n         CHECK FMT4DECB            WAIT FOR COMPLETION OF FMT4 READ\n*\n         CLI   DS4IDFMT,C'4'       DID WE GET THE FMT4 DSCB?\n         BE    FMT1LOOP            /YES\n         ABEND U0004,DUMP          /NO\n*\nFMT1LOOP EQU   *\n         CLC   DCBFDAD+3(5),DS4HPCHR HAVE WE REACHED FMT1 HWM?\n         BH    FMT1DONE              /YES\n*                                    /NO\n         READ  FMT1DECB,           READ A DSCB                         X\n               SF,                                                     X\n               (R2),                                                   X\n               FMT1DSCB\n         CHECK FMT1DECB            WAIT FOR THE READ TO COMPLETE\n*\n         CLI   DS1FMTID,C'1'       IS IT A FORMAT 1 DSCB?\n         BNE   FMT1LOOP            /NO  - SKIP IT\n*                                  /YES\n         CLC   DS1DSORG(2),=X'0008'   VSAM DATA SET?\n         BE    FMT1LOOP            /YES - SKIP IT\n*                                  /NO\n         TM    DS1DSIND,DS1IND40+DS1IND10    RACF OR PSWD PROTECTED?\n         BZ    FMT1LOOP            /NO  - SKIP IT\n*                                  /YES - PRODUCE ZAP CARDS\n*\n*\n         UNPK  WORK(11),DCBFDAD+3(6) GET CCHHR FOR 1ST CONTROL CARD\n         TR    WORK(10),HEXTAB\n         MVC   ZAP1CHR,WORK        PUT CCHHR IN CONTROL CARD\n         MVC   ZAP1DSN,DS1DSNAM    PUT DSNAME IN AS A COMMENT\n         PUT   SYSPUNCH,ZAP1       OUTPUT THE CONTROL CARD\n*\n         UNPK  WORK+00(15),DS1DSNAM+00(8)  GET DSNAME IN HEX FOR\n         UNPK  WORK+14(15),DS1DSNAM+07(8)  CONTROL CARDS\n         UNPK  WORK+28(15),DS1DSNAM+14(8)    .\n         UNPK  WORK+42(15),DS1DSNAM+21(8)    .\n         UNPK  WORK+56(15),DS1DSNAM+28(8)    .\n         UNPK  WORK+70(15),DS1DSNAM+35(8)    .\n         UNPK  WORK+84(05),DS1DSNAM+42(3)    .\n         TR    WORK(88),HEXTAB               .\n*\n         MVC   ZAP2DSN(44),WORK    VERIFY 1ST HALF OF DSN\n         PUT   SYSPUNCH,ZAP2\n*\n         MVC   ZAP3DSN(44),WORK+44 VERIFY 2ND HALF OF DSN\n         PUT   SYSPUNCH,ZAP3\n*\n         UNPK  WORK(3),DS1DSIND(2) GET DS1DSIND IN HEX\n         TR    WORK(2),HEXTAB      FOR CONTROL CARD\n         MVC   ZAP4DATA,WORK         .\n         PUT   SYSPUNCH,ZAP4         .\n*\n         NI    DS1DSIND,X'FF'-(DS1IND40+DS1IND10+DS1IND04) TURN OFF\n         UNPK  WORK(3),DS1DSIND(2) PROTECT FLAGS IN DSCB COPY AND\n         TR    WORK(2),HEXTAB      MAKE THE RESULE HEX FOR THE\n         MVC   ZAP5DATA,WORK       CONTROL CARD\n         PUT   SYSPUNCH,ZAP5         .\n         B     FMT1LOOP            PROCESS NEXT DSCB\n*\nFMT1DONE EQU   *\n         CLOSE (SYSUT1,,SYSPUNCH)  CLOSE THE DCB'S\n         L     R13,SAVE+4          RESTORE THE REGS AND\n         RETURN (14,12),RC=0       RETURN\n         DROP  R2,R12\n*\n* DCB EXIT\n*\nDCBEXIT  EQU   *\n         USING *,R15             ON ENTRY, R15 POINTS TO US\n         USING IHADCB,R1         AND R1 POINTS TO THE DCB\n         LH    R4,DCBLRECL       GET THE LRECL AND\n         LH    R3,DCBBLKSI       THE BLOCKSIZE\n         STH   R4,DCBBLKSI       SET BLKSIZE TO LRECL\n         LTR   R3,R3             HAS BLKSIZE BEEN GIVEN?\n         BZR   R14               /NO  - LEAVE AS LRECL\n         SR    R2,R2             /YES - ENSURE MULTIPLE OF LRECL\n         DR    R2,R4\n         MR    R2,R4\n         STH   R3,DCBBLKSI\n         BR    R14               RETURN TO OPEN\n         DROP  R1,R15\n         LTORG ,\nSAVE     DS    18F\nSYSPUNCH DCB   DDNAME=SYSPUNCH,                                        X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               EXLST=EXPUN,                                            X\n               LRECL=80,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\nSYSUT1   DCB   BLKSIZE=96,                                             X\n               DDNAME=SYSUT1,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               EODAD=FMT1DONE,                                         X\n               EXLST=EXUT1,                                            X\n               KEYLEN=44,                                              X\n               MACRF=R,                                                X\n               RECFM=F\n*\nEXUT1    DC    0F'0',X'87',AL3(JFCB)\nEXPUN    DC    0F'0',X'85',AL3(DCBEXIT)\n*\nHEXTAB   EQU   *-240               THESE 2 CARDS MUST\n         DC    C'0123456789ABCDEF'   STAY TOGETHER\n*\nCOM1     DC    CL80'*  CONTROL CARDS TO TURN OFF PROTECTION FOR ALL'\n*\nCOM2     DC    CL80' '                             |THESE\n         ORG   COM2                                | CARDS\n         DC    C'*  NON-VSAM DATA SETS ON VOLUME ' |  MUST\nCOM2VOL  DC    C'XXXXXX'                           |   STAY\n         DC    C'  '                               |    TOGETHER\nCOM2TEST DC    C'      '                           |     .\n         ORG   ,                                   |      .\n*\nZAP1     DC    CL80' '                             |THESE\n         ORG   ZAP1                                |  CARDS\n         DC    C'CCHHR '                           |    MUST\nZAP1CHR  DC    C'CCCCHHHHRR'                       |      STAY\n         DC    C'   '                              |        TOGETHER\nZAP1DSN  DC    CL44'DSNAME'                        |          .\n         ORG   ,                                   |            .\n*\nZAP2     DC    CL80' '                             | THESE\n         ORG   ZAP2                                |  CARDS\n         DC    C'  VER 00 '                        |   MUST\nZAP2DSN  DC    CL44'HEX DSNAME'                    |    STAY\n         ORG   ,                                   |     TOGETHER\n*\nZAP3     DC    CL80' '                             | THESE\n         ORG   ZAP3                                |  CARDS\n         DC    C'  VER 16 '                        |   MUST\nZAP3DSN  DC    CL44'HEX DSNAME'                    |    STAY\n         ORG   ,                                   |     TOGETHER\n*\nZAP4     DC    CL80' '                             | THESE\n         ORG   ZAP4                                |  CARDS\n         DC    C'  VER 5D '                        |   MUST\nZAP4DATA DC    C'XX'                               |    STAY\n         ORG   ,                                   |     TOGETHER\n*\nZAP5     DC    CL80' '                             | THESE\n         ORG   ZAP5                                |  CARDS\n         DC    C'  REP 5D '                        |   MUST\nZAP5DATA DC    C'XX'                               |    STAY\n         ORG   ,                                   |     TOGETHER\n*\nFMT4DSCB DS    0D\nFMT4KEY  DS    XL44\n         IECSDSL1 4\n*\nFMT1DSCB DS    0D\n         IECSDSL1 1\n*\nJFCB     DS    0D\n         IEFJFCBN LIST=YES\n*\nWORK     DS    XL89\nU0001    EQU   1\nU0002    EQU   2\nU0003    EQU   3\nU0004    EQU   4\n         PRINT NOGEN\n         DCBD  DEVD=DA,DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USRSCT": {"ttr": 12041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x002\\x002\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "FILE013"}, "text": "         MACRO\n         USRSCT &MOD=NLGN\n***********************************************************************\n*    THIS MACRO MAPS THE USER SCT                                     *\n*    IT CONTAINS INFORMATION ABOUT THE LOGGED ON USER AND APPLIES     *\n*    TO TERMINAL SCT ONLY. THIS STORAGE IS AQUIRED BY THE LOGON       *\n*    EXIT SASSXXL1 THE FIRST TIME A TERMINAL BECOMES ACTIVE.          *\n***********************************************************************\nUSRSCT   DSECT\nUSR#FLG1 DS    X                  FLAG1 FIELDS\nUSR#TACT EQU   X'80'                TERMINAL ACTIVE\nUSR#RACF EQU   X'40'                ACEE REQUIRED\nUSR#NOR  EQU   X'20'                NO RACF CHECKING FOR USER\nUSR#XACE EQU   X'10'                DELETE ACEE\nUSR#RCHK EQU   X'08'                RACHECK REQUEST\nUSR#FLG2 DS    X                  * RESERVED *\nUSR#FLG3 DS    X                  * RESERVED *\nUSR#FLG4 DS    X                  * RESERVED *\nUSR#ACEE DC    A(0)               POINTER TO ACTIVE ACEE\n***********************************************************************\n*    THE UCC7 OPID CAN ONLY BE 6 BYTES IN LENGTH. SINCE WE USE        *\n*    OPID AS RACF GROUP AND MANY USERS HAVE 8 CHARACTER RACF          *\n*    GROUPS, A TRANSLATION IS MADE FROM 8 CHARACTER RACF GROUPS TO    *\n*    A 1 TO 6 CHARACTER OPID IF THE GROUP PASSED IS GREATER THAN 6    *\n*    CHARACTERS                                                       *\n***********************************************************************\nUSR#OPID DC    CL6' '             UCC7 OPID\nUSR#LGRP DC    X'00'              LENGTH OF GROUP OR OPID\nUSR#GRP  DC    CL8' '             GROUP NAME\nUSR#LUSR DC    X'00'              LENGTH OF USERID\nUSR#UID  DC    CL7' '             USERID\nUSR#LPAS DC    X'00'              LENGTH OF PASSWORD\nUSR#PASS DC    CL8' '             USER PASSWORD\nUSR#SAVE DS    72F                SAVE AREA FOR USER ROUTINES\nUSR#XADR DS    3F                 RACF SUBTASK PARMS\nUSR#RPRM DS    7F                 RACF ROUTINE PARM\nUSR#DATE DS    CL5                UNPACKED CURRENT DATE\nUSR#PDAT DS    PL3                PACKED CURRENT DATE\nUSR#PLST DS    10F                PLIST FOR SAS ROUTINES\nUSR#VOL  DS    CL6                VOLUME FOR LOCATE REQUEST\nUSR#WORK DS    CL256              USER WORK AREA\n         AIF   ('&MOD' EQ 'LOGON').LOGON\n         MEXIT\n.LOGON   ANOP\n         DS    0F                 FULLWORD ALIGNMENT\nUSR#RIDP DS    CL(RACDEND-RACDEL) RACINIT DELETE PARMLIST\nUSR#RICP DS    CL(RACCEND-RACCRE) RACINIT CREATE PARMLIST\nUSR#RCP  DS    CL(RACHKEND-RACHK) RACINIT CREATE PARMLIST\nUSR#SIZE EQU   *-USRSCT           USRSCT LENGTH\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USRSVT": {"ttr": 12043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00-\\x00-\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "FILE013"}, "text": "         MACRO                                                          01-USRSV\n         USRSVT                                                         01-USRSV\n**********************************************************************  01-USRSV\n*  DSECT NAME -                                                      *  01-USRSV\n*     USRSVT                                                         *  01-USRSV\n*  FUNCTION -                                                        *  01-USRSV\n*     THIS MACRO MAPS THE USER SVT.  IT CONTAINS INFORMATION USED    *  01-USRSV\n*     GLOBALLY BY ALL USER SCTS.  IT WILL HAVE ENTRY POINTS TO       *  01-USRSV\n*     COMMON ROUTINES AND FLAGS.                                     *  01-USRSV\n**********************************************************************  01-USRSV\nUSRSVT   DSECT                                                          01-USRSV\nUSR$SVT  DC    CL4'USVT'           SVT ID                               01-USRSV\nUSR$FLG1 DS    X                   FLAG1 FIELDS                         01-USRSV\nUSR$DBMS EQU   X'80'               DBM SYSTEM                           01-USRSV\nUSR$PRDS EQU   X'40'               PROD SYSTEM                          01-USRSV\nUSR$FLG2 DS    X                   * RESERVED *                         01-USRSV\nUSR$FLG3 DS    X                   * RESERVED *                         01-USRSV\nUSR$FLG4 DS    X                   * RESERVED *                         01-USRSV\nUSR$VAL  DC    V(SASS$VAL)         VOLUME ALLOC ROUTINE                 01-USRSV\nUSR$DYN  DC    V(SASS$DYN)         MULTI-PURPOSE ALLOC                  01-USRSV\nUSR$STAE DC    V(SASS$STA)         GLOBAL ESTAE ROUTINE                 01-USRSV\nUSR$CMS  DC    V(SASS$CMS)         GLOBAL CATALOG MANAGEMENT            01-USRSV\nUSR$GRPS DC    A(0)                RACF GROUP TO OPID XLATE             01-USRSV\nUSR$ENV  DS    CL4                 SYSTEM ENVIRONMENT                   01-USRSV\nUSR$SID  DS    X                   SYSTEM ID                            01-USRSV\nUSR$7JOB DS    CL8                 UCC7 JOBNAME THIS EXEC               01-USRSV\nUSR$ENVT DC    C'L',C'TEST'                                             01-USRSV\n         DC    C'U',C'TEST'                                             01-USRSV\n         DC    C'F',C'CRIS'                                             01-USRSV\n         DC    C'G',C'CRIS'                                             01-USRSV\n         DC    C'T',C'CRIS'                                             01-USRSV\n         DC    C'W',C'ENGR'                                             01-USRSV\n         DC    C'Y',C'ENGR'                                             01-USRSV\n         DC    C'D',C'PTLD'                                             01-USRSV\n         DC    C'M',C'PTLD'                                             01-USRSV\n         DC    C'J',C'PTLD'                                             01-USRSV\n         DC    C'H',C'ACCT'                                             01-USRSV\n         DC    C'E',C'ACCT'                                             01-USRSV\n         DC    C'N',C'ACCT'                                             01-USRSV\n         DC    C'K',C'CORD'                                             01-USRSV\n         DC    C'R',C'CORD'                                             01-USRSV\n         DC    C'V',C'CORD'                                             01-USRSV\n         DC    X'FF',C'UNKN'                                            01-USRSV\nUSR$SIZE EQU   *-USRSVT            USRSVT LENGTH                        01-USRSV\n         MEND                                                           01-USRSV\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VLOGON": {"ttr": 12045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01\\xdd\\x01\\xdd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 477, "newlines": 477, "modlines": 0, "user": "FILE013"}, "text": "//VLOGON   JOB (NNNNN,8),'BILL HORTON',CLASS=A,NOTIFY=XXXXXx\n//*-----------------------------------------------------------------***\n//*                                                                 ***\n//* LIBRARY: xxxxxxxxxxxxxxxx                                       ***\n//* MEMBER:  VLOGON                                                 ***\n//*                                                                 ***\n//* PURPOSE:                                                        ***\n//* INSTALL VLOGON PROGRAM (UPDATE TSO LOGON INFO DIALOG - ISPF 11) ***\n//*                                                                 ***\n//* STRINGS TO BE CHANGED BEFORE SUBMISSION ARE:                    ***\n//*                                                                 ***\n//* USERID   <=== YOUR USER ID                                      ***\n//* PNAME    <=== YOUR NAME                                         ***\n//*                                                                 ***\n//*-----------------------------------------------------------------***\n//       EXEC ASMHCL,PARM.ASM='TERM,RENT',\n//            PARM.LKED='LIST,MAP,RENT,REUS'\n         TITLE 'VLOGON - ISPF DIALOG TO UPDATE TEC LOGON INFO'\n*\n* VLOGON\n* ------\n*\n* This is an ISPF dialog to facilitate the updating of certain TSO logon\n* information fields.  Some of these fields can be updated from the\n* TSO/E fullscreen logon panel, but many of our TSO users never see this\n* panel, as we have a windowing package which automatically supplies\n* their password.  Also, it's more convenient to change these fields\n* when you think of it, rather than having to wait until your next\n* LOGON.\n*\n* Information which may be updated in this dialog is:\n*\n*   o Name\n*\n*   o Station (first four bytes of installation data)\n*\n*   o Account\n*\n*   o Logon procedure\n*\n*   o Initial command\n*\n* All of the above are the standard RACF data base fields TSO/E uses\n* after the conversion from SYS1.UADS to RACF.  (Each shop will of\n* course have its own uses for installation data.)\n*\n* Fields which require RACF authoriztion to use specific values will be\n* checked and error messages issued if the user is not authorized.  For\n* example, if you try to change to an invalid account code (i.e., an\n* account code not defined to RACF) you will get an error message.\n*\n* You will not be able to use this code as written as it has local\n* dependencies.  There shouldn't be TOO much to change though.\n*\n* Member VLOGONP should be renamed VLOGON when stored in your panel\n* library.  This panel references a tutorial panel, VLOGONT, which is\n* not supplied.\n*\n* Since this dialog uses RACF internal macros, it must be authorized.\n* Since ISPF services cannot be invoked from an authorized program, you\n* must use something (e.g., an authorization SVC) to flip the\n* authorization bit on and off.  This code uses SVC 255.  You will have\n* to change this to use your authorization mechanism.\n*\n* Members: VLOGON   - Source and JCL in install program\n*          VLOGONP  - ISPF panel (rename VLOGON in your panel library)\n*          TECZ00   - ISPF message\n*\nVLOGON   CSECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9            POINTER TO DYNAMIC AREA\nR10      EQU   10           BASE REGISTER\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*---------------------------------------------------------------------*\n*                                                                     *\n* THIS PROGRAM IS AN ISPF/PDF DIALOG FOR DISPLAYING/UPDATING TEC      *\n* LOGON INFORMATION.  THIS INFO IS KEPT IN THE RACF DATASET; THE      *\n* PROGRAMMER NAME IN THE PGMRNAME FIELD AND THE OTHER FIELDS IN THE   *\n* USERDATA FIELD.                                                     *\n*                                                                     *\n* USER ABEND CODES:                                                   *\n*                   0001 - BAD RETURN FROM RACF LOCATE FUNCTION       *\n*                   0002 - BAD RETURN FROM RACF ALTER FUNCTION        *\n*                          (REGISTERS 5 AND 6 HOLD REGISTER 15 AND    *\n*                           0 CONTENTS AFTER USER ABENDS)             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SAVE  (14,12),,VLOGON._&SYSDATE._&SYSTIME\n         LR    R10,R15\n         USING VLOGON,R10\n         L     R0,LDYNAREA              LOAD LENGTH OF DYNAMIC AREA.\n         GETMAIN R,LV=(R0)              GET DYNAMIC AREA.\n         LR    R9,R1                    SAVE ADDRESS.\n         LR    R2,R9                    POINT TO DYNAMIC AREA.\n         LR    R3,R0                    GET LENGTH.\n         LA    R4,0                     ZERO.\n         LA    R5,0                     PADDING BYTE AND LENGTH.\n         MVCL  R2,R4                    CLEAR DYNAMIC AREA.\n         USING DYNAREA,R9               ADDRESSIBILITY.\n         LA    R2,SAVEAREA\n         ST    R13,4(R2)\n         ST    R2,8(R13)\n         LR    R13,R2\n*\n* INITIALIZE WORK AREA.\n*\n         MVC   ACCOUNT,BLANKS\n         MVC   CURSOR,BLANKS\n         LA    R3,=A(WEND-WORKAREA)     GET LENGTH OF WORKAREA.\n         ST    R3,WLENGTH\n         PUSH  PRINT\n         PRINT NOGEN\n         ICHEACTN FIELD=PGMRNAME,FLDATA=(20,RNAME),MF=(E,LUPD1)\n         MVI   LUPD1+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=TACCNT,FLDATA=(40,LLACCT),MF=(E,LUPD2)\n         MVI   LUPD2+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=TLPROC,FLDATA=(8,LLPROC),MF=(E,LUPD3)\n         MVI   LUPD3+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         ICHEACTN FIELD=INSTDATA,FLDATA=(4,LLSTA),MF=(E,LUPD4)\n         MVI   LUPD4+1,X'01'            SET NUMBER OF FIELDS BYTE.\n         MVC   RRP1(ERRP0-RRP0),RRP0    COPY RACROUTE MACRO FOR TSOPROC\n         MVC   RRA1(ERRA0-RRA0),RRA0    COPY RACROUTE MACRO FOR TACCNT\n         L     R3,16                    POINT TO CVT.\n         L     R3,0(R3)                 POINT TO TCB CHAIN.\n         L     R3,4(R3)                 GET CURRENT TCB.\n         L     R3,12(R3)                POINT TO TIOT (JOBNAME).\n         TRT   0(8,R3),BLANKTAB         FIND FIRST BLANK.\n         SR    R1,R3                    GET LENGTH OF USERID.\n         STC   R1,LUSERID               SAVE LENGTH OF USERID.\n         MVC   USERID,0(R3)             COPY USERID.\n*\n* SET UP IPSF ENVIRONMENT\n*\n         LOAD  EP=ISPLINK               LOAD ISPLINK ROUTINE.\n         ST    R0,@ISPLINK              SAVE.\n         DELETE EP=ISPLINK              GET RID OF ISPF MODULE.\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XNAME,XNAME,#C,F20),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XACCT,XACCT,#C,F5),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XPROC,XPROC,#C,F8),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XCMD,XCMD,#C,F80),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#XSTA,XSTA,#C,F4),VL,MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#TECSMSG,TECSMSG,#C,F24),VL,             X\n               MF=(E,VDEFINE)\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDEFINE,#TECLMSG,TECLMSG,#C,F78),VL,             X\n               MF=(E,VDEFINE)\n         POP   PRINT\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         LA    R3,WORKAREA              POINT TO WORK AREA.\n         MVC   LACCT(3),=X'002928'      SPECIFY LENGTH.\n         MVC   LPROC(3),=X'000908'      SPECIFY LENGTH.\n         MVC   LSTA(3),=X'000504'       SPECIFY LENGTH.\n         MVI   RACCT,C' '               BLANK OUT.\n         MVC   RACCT+1(39),RACCT        ACCOUNT FIELD.\n         ICHEINTY LOCATE,TYPE='USR',ENTRY=(R2),WKAREA=(R3),            X\n               ACTIONS=(ACT1,ACT2,ACT3,ACT4),                          X\n               OPTIONS=(FLDEF,ACTION),MF=(E,LOCATE)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    GETOK                    YES, CONTINUE.\n         MVC   TECSMSG,=CL24'Read from RACF failed'\n         MVC   TECLMSG,=CL78'Unable to read current LOGON data from RACX\n               F dataset'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     RETURN\nGETOK    MVC   XNAME,RNAME              COPY FIELDS.\n         MVC   XACCT,RACCT\n         MVC   XPROC,RPROC\n         SR    R1,R1\n         USING PSA,R1\n         L     R2,PSAANEW\n         USING ASCB,R2\n         L     R3,ASCBASXB\n         USING ASXB,R3\n         L     R4,ASXBLWA\n         DROP  R1,R2,R3\n         USING LWA,R4\n         MVC   XCMD,LWALGCMD\n         MVC   XSTA,RSTA\n*\n*        DISPLAY FIRST PANEL\n*\nDVPANEL  DS    0H\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#DISPLAY,#VPANL,BLANKS,CURSOR),VL,MF=(E,DISPLAY)\n         LTR   R15,R15                  TEST RETURN CODE.\n         BNZ   RETURN                   RC > 0, GO HOME.\n         MVC   CURSOR,BLANKS            RESET NAME OF CURSOR FIELD.\n         MVI   CHSWITCH,C'N'            SET \"NO CHANGE\".\n*\n*        SEE IF THE NAME HAS CHANGED\n*\n         CLC   XNAME,RNAME              HAS XNAME CHANGED ?\n         BE    CHKACCT                  NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n*\n*        SEE IF THE ACCOUNT CODE HAS CHANGED\n*\nCHKACCT  CLC   XACCT,RACCT              HAS XACCT CHANGED ?\n         BE    CHKPROC                  NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n         MVC   ACCOUNT(5),XACCT\n         RACROUTE REQUEST=AUTH,ENTITY=ACCOUNT,WORKA=RACWORK,MF=(E,RRA1)\n         CH    R15,=H'0'                IS ACCOUNT CODE OK ?\n         BE    CHKPROC                  YES, CONTINUE\n         MVC   CURSOR,=CL9'XACCT'\n         CH    R15,=H'4'                \"RESOURCE NOT PROTECTED\" ?\n         BNE   NOACCT                   NO, CONTINUE\n         MVC   TECSMSG,=CL24'Account code not defined'\n         MVC   TECLMSG,=CL78'Call extension 3089 or 3090 (3601 after 5 X\n               p.m.) for further information'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nNOACCT   CH    R15,=H'8'                \"USER NOT AUTHORIZED\" ?\n         BNE   BADRACF1                 NO, CONTINUE\n         MVC   TECSMSG,=CL24'User unauthorized'\n         MVC   TECLMSG,=CL78'You are not authorized to use this accountX\n                code'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nBADRACF1 MVC   TECSMSG,=CL24'Logic error'\n         MVC   TECLMSG,=CL78'RACROUTE for account validation failed'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nCHKPROC  CLC   XPROC,RPROC              HAS XPROC CHANGED ?\n         BE    CHKSTA                   NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\n         RACROUTE REQUEST=AUTH,ENTITY=XPROC,WORKA=RACWORK,MF=(E,RRP1)\n         CH    R15,=H'0'                IS PROC NAME OK ?\n         BE    CHKSTA                   YES, CONTINUE\n         MVC   CURSOR,=CL9'XPROC'\n         CH    R15,=H'4'                \"RESOURCE NOT PROTECTED\" ?\n         BNE   NOPROC                   NO, CONTINUE\n         MVC   TECSMSG,=CL24'Proc name not defined'\n         MVC   TECLMSG,=CL78'Contact the TSO system programmer for a liX\n               st of valid logon procedures'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nNOPROC   CH    R15,=H'8'                \"USER NOT AUTHORIZED\" ?\n         BNE   BADRACF2                 NO, CONTINUE\n         MVC   TECSMSG,=CL24'User unauthorized'\n         MVC   TECLMSG,=CL78'You are not authorized to use this TSO logX\n               on procedure'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nBADRACF2 MVC   TECSMSG,=CL24'Logic error'\n         MVC   TECLMSG,=CL78'RACROUTE for procedure validation failed'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     DVPANEL\nCHKSTA   CLC   XSTA,RSTA                HAS XSTA CHANGED ?\n         BE    CHKMOD                   NO, CONTINUE\n         MVI   CHSWITCH,C'Y'            SET \"CHANGE\".\nCHKMOD   CLI   CHSWITCH,C'N'            \"NO CHANGE\" ?\n         BE    CHKCMD                   YES, CONTINUE.\n*\n*        ONE OF THE RACF FIELDS HAS CHANGED.  UPDATE RACF DATASET.\n*\n         MVC   RNAME,XNAME              UPDATE FIELDS.\n         MVC   RACCT,XACCT\n         MVC   RPROC,XPROC\n         MVC   RSTA,XSTA\n         TR    RNAME,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RACCT,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RPROC,TTABLE             TRANSLATE OUT BAD CHARS\n         TR    RSTA(4),TTABLE           BAD CHARACTERS.\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         LA    R2,LUSERID               POINT TO LENGTH OF USERID.\n         ICHEINTY ALTER,TYPE='USR',ENTRY=(R2),                         X\n               ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),                      X\n               OPTIONS=(FLDEF,ACTION),MF=(E,ALTER)\n         LR    R5,R15                   SAVE RETURN CODE.\n         LR    R6,R0                    ADDITIONAL CODES.\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\n         LTR   R5,R5                    GOOD RETURN FROM RACF ?\n         BZ    CHKCMD                   YES, CONTINUE.\n         MVC   TECSMSG,=CL24'Write to RACF failed'\n         MVC   TECLMSG,=CL78'Unable to write new logon data to RACF datX\n               aset'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ001),VL,MF=(E,VDELETE)\n         B     RETURN\n*\n*        SEE IF LOGON COMMAND HAS CHANGED.\n*\nCHKCMD   CLC   XCMD,LWALGCMD            IS XCMD UNCHANGED ?\n         BE    DVPANEL                  YES, CONTINUE\n         LA    R1,PASSWORD              POINT TO PASSWORD.\n         LA    R15,3                    REQUEST AUTHORIZATION.\n         SVC   255\n         MODESET KEY=ZERO\n         MVC   LWALGCMD,XCMD            COPY IN NEW COMMAND.\n         MODESET KEY=NZERO\n         LA    R15,4                    REQUEST UNAUTHORIZATION.\n         SVC   255\nUPDOK    MVC   TECSMSG,=CL24'Logon data updated'\n         MVC   TECLMSG,=CL78'New values will take effect upon your nextX\n                logon to TSO'\n         L     R15,@ISPLINK\n         CALL  (15),(#SETMSG,#TECZ000),VL,MF=(E,VDELETE)\n         B     DVPANEL\nPASSWORD DC    C'AUTH'\n         EJECT\n*\n*        PROCESSING COMPLETED.\n*\nRETURN   DS    0H\n         L     R15,@ISPLINK             GET ISPLINK ADDRESS.\n         CALL  (15),(#VDELETE,#ALL),VL,MF=(E,VDELETE)\nRET      DS    0H\n         L     R13,SAVEAREA+4\n         L     R0,LDYNAREA              FREE\n         FREEMAIN R,LV=(R0),A=(R9)      DYNAMIC AREA.\n         LA     R15,0                   SET RETURN CODE.\n         RETURN (14,12),,RC=15          RETURN TO CALLER.\nLDYNAREA DC    A(EDYNAREA-DYNAREA)\nACT1     ICHEACTN FIELD=PGMRNAME\nPGMRNAME EQU   *-8\nACT2     ICHEACTN FIELD=TACCNT\nTACCNT   EQU   *-8\nACT3     ICHEACTN FIELD=TLPROC\nTLPROC   EQU   *-8\nACT4     ICHEACTN FIELD=INSTDATA\nINSTDATA EQU   *-8\nRRA0     RACROUTE REQUEST=AUTH,CLASS='ACCTNUM',MF=L\nERRA0    EQU   *\nRRP0     RACROUTE REQUEST=AUTH,CLASS='TSOPROC',MF=L\nERRP0    EQU   *\nF4       DC    F'4'\nF5       DC    F'5'\nF8       DC    F'8'\nF20      DC    F'20'\nF24      DC    F'24'\nF78      DC    F'78'\nF80      DC    F'80'\nBLANKS   DC    CL80' '\n*\n* DEFINE ISPF FUNCTION NAMES\n*\n#VDEFINE DC    C'VDEFINE '\n#VDELETE DC    C'VDELETE '\n#DISPLAY DC    C'DISPLAY '\n#C       DC    C'CHAR '\n#VPANL   DC    C'VLOGON '\n#SETMSG  DC    C'SETMSG'\n#ALL     DC    C'* '\n*\n* DEFINE ISPF DIALOG VARIABLES\n*\n#XNAME   DC    C'XNAME '\n#XACCT   DC    C'XACCT '\n#XPROC   DC    C'XPROC '\n#XCMD    DC    C'XCMD '\n#XSTA    DC    C'XSTA  '\n#TECSMSG DC    C'TECSMSG '\n#TECLMSG DC    C'TECLMSG '\n#TECZ000 DC    C'TECZ000 '\n#TECZ001 DC    C'TECZ001 '\n*                0123456789ABCDEF\nTTABLE   DC    C'                ' 0\n         DC    C'                ' 1\n         DC    C'                ' 2\n         DC    C'                ' 3\n         DC    C'           .<(+|' 4\n         DC    C'          !$*);\u00ac' 5\n         DC    C'-/         ,%_>?' 6\n         DC    C'          :#@''=\"' 7\n         DC    C' ABCDEFGHI      ' 8\n         DC    C' JKLMNOPQR      ' 9\n         DC    C'  STUVWXYZ      ' A\n         DC    C'                ' B\n         DC    C' ABCDEFGHI      ' C\n         DC    C' JKLMNOPQR      ' D\n         DC    C'  STUVWXYZ      ' E\n         DC    C'0123456789      ' F\nBLANKTAB DC    XL256'00'\n         ORG   BLANKTAB+X'40'\n         DC    X'40'\n         ORG\n         LTORG ,\n         EJECT\nDYNAREA  DSECT\nSAVEAREA DS    18F\nDISPLAY  CALL  ,(,,),VL,MF=L\nVDEFINE  CALL  ,(,,,,),VL,MF=L\nVDELETE  CALL  ,(,),VL,MF=L\nLUPD1    ICHEACTN FIELD=PGMRNAME,FLDATA=(20,LUPD1),MF=L\nLUPD2    ICHEACTN FIELD=TACCT,FLDATA=(20,LUPD2),MF=L\nLUPD3    ICHEACTN FIELD=TLPROC,FLDATA=(20,LUPD3),MF=L\nLUPD4    ICHEACTN FIELD=INSTDATA,FLDATA=(4,LUPD4),MF=L\nLOCATE   ICHEINTY LOCATE,ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),MF=L\nALTER    ICHEINTY ALTER,ACTIONS=(LUPD1,LUPD2,LUPD3,LUPD4),MF=L\nRRA1     RACROUTE REQUEST=AUTH,CLASS='ACCTNUM',MF=L\nRRP1     RACROUTE REQUEST=AUTH,CLASS='TSOPROC',MF=L\nHALF1    DS    D\n@ISPLINK DS    F                        ADDRESS OF ISPLINK ROUTINE.\n*\n* ISPF/PDF DISPLAY VARIABLE STORAGE.\n*\nXNAME    DS    CL20                    /* PROGRAMMER NAME            */\nXACCT    DS    CL5                     /* ACCOUNTING CODE            */\nXPROC    DS    CL8                     /* LOGON PROCEDURE NAME       */\nXCMD     DS    CL80                    /* INITIAL TSO COMMAND        */\nXSTA     DS    CL4                     /* MAIL STATION               */\nTECSMSG  DS    CL24                    /* SHORT MESSAGE              */\nTECLMSG  DS    CL78                    /* LONG  MESSAGE              */\nLUSERID  DS    C\nUSERID   DS    CL7\nCURSOR   DS    CL9                     /* NAME OF FIELD FOR CURSOR   */\nCHSWITCH DS    C                       /* \"N\": NO CHANGE \"Y\": CHANGE */\nACCOUNT  DS    CL40                    /* ACCOUNT CODE               */\nWORKAREA DS    0F                      /* WORK AREA FOR ICHEACTN     */\nWLENGTH  DS    A                       /* LENGTH OF WORK AREA        */\nWRBA     DS    CL6                     /* RBA RETURN AREA            */\nWFLAGS   DS    C                       /* FLAGS                      */\nWRES1    DS    C                       /* RESERVED                   */\nWDDSNC   DS    CL4                     /* DUPL. DATASET NAME COUNT   */\nWRES2    DS    CL8                     /* RESERVED                   */\nWDATALEN DS    CL4                     /* LENGTH OF RETURNED DATA    */\n         DS    CL2                     /* LENGTH OF PGMRNAME FIELD   */\nRNAME    DS    CL20                    /* PROGRAMMER NAME            */\nLACCT    DS    CL2                     /* LENGTH OF ACCOUNT FIELD    */\nLLACCT   DS    C                       /* LENGTH OF DATA IN FIELD    */\nRACCT    DS    CL5                     /* ACCOUNT CODE               */\n         DS    CL35                    /* REST OF ACCOUNT CODE FIELD */\nLPROC    DS    CL2                     /* LENGTH OF PROC NAME FIELD  */\nLLPROC   DS    C                       /* LENGTH OF DATA IN FIELD    */\nRPROC    DS    CL8                     /* NAME OF LOGON PROCEDURE    */\nLSTA     DS    CL2                     /* LENGTH OF INSTDATA FIELD   */\nLLSTA    DS    C                       /* LENGTH OF DATA IN FIELD    */\nRSTA     DS    CL4                     /* MAIL STATION               */\n         DS    CL247                   /* RESERVED                   */\n         DS    F                       /*                            */\nWEND     EQU   *                       /* END OF WORK AREA           */\nRACWORK  DS    CL512                   /* RACROUTE WORK AREA         */\nEDYNAREA EQU   *\n         IHAPSA\n         IHAASCB\n         IHAASXB\n         IKJEFLWA\n         END\n/*\n//LKED.SYSLMOD DD DSN=SYS1.LPALIB2(VLOGON),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VLOGONP": {"ttr": 12295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE013"}, "text": ")ATTR\n + TYPE(TEXT) SKIP(ON) INTENS(LOW)\n \u00a2 TYPE(TEXT) INTENS(LOW)\n @ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)\n)BODY\n%------------------------------  TEC LOGON DATA -------------------------------T\n%COMMAND ===>_ZCMD                                                             +\n\n+Enter/verify data for &ZUSER below:\n\n+Name             %===>_XNAME              +     (Required for TSO job card)\n\n Mail Station     %===>@XSTA+                    (Required for TSO job card)\n\n Accounting charge%===>_XACCT\u00a2\n\n Logon procedure  %===>_XPROC   \u00a2\n\n Initial command  %===>_XCMD\n                        +\n Note: Accounting charge, logon procedure, and initial command may also be\n       specified on the TSO/E logon panel (displayed upon logon to TSO).\n)INIT\n.HELP = VLOGONT\n)PROC\nIF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\nVER(&XNAME,NB)\nVER(&XPROC,NB,NAME)\nVER(&XSTA,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOIS": {"ttr": 12297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01\\x14\\x05o\\x01\\x14\\x05o\\x00T\\x00\\xa5\\x00\\xa5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-02-25T00:00:00", "modifydate": "2014-02-25T00:54:20", "lines": 165, "newlines": 165, "modlines": 0, "user": "FILE013"}, "text": "WHOIS    TITLE 'WHOIS -- TSO USERID COMMAND'\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     WHOIS  -- TSO COMMAND PROCESSOR TO DISPLAY THE \"NAME\"          *\n*               FIELD OF A RACF USERID AT THE TERMINAL.              *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     SEE ABOVE...                                                   *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     NONREENTRANT, NONREUSABLE, NONREFRESHABLE                      *\n*     MUST RUN AMODE / RMODE 24                                      *\n*                                                                    *\n*  REQUIREMENTS -                                                    *\n*                                                                    *\n*     -  'WHOIS' MUST BE ENTERED IN THE RACF AUTHORIZED              *\n*            CALLER TABLE (ICHAUTAB)                                 *\n*                                                                    *\n*     -  'WHOIS' SHOULD BE ENTERED INTO THE TSO/E AUTHORIZED         *\n*            COMMAND TABLE (IKJEFTE2)                                *\n*                                                                    *\n*     -  LOAD MODULE MUST BE LINKED 'AC=1' AND PLACED INTO           *\n*            AN APF AUTHORIZED LIBRARY                               *\n*                                                                    *\n*     -  THE RACF USERID(S) MUST BE >1  CHARACTERS IN LENGTH         *\n*         CHANGED BY DXI                                             *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*     02/17/13, REMOVED THE 6 CHARACTER RESTRICTION                  *\n*                                                                    *\n*     03/11/87, REMOVED THE CODE FOR 'SVC 236' THAT KARL TAI HAD     *\n*               WRITTEN, WILL USE THE RACF AUTHORIZED CALLER TABLE   *\n*               INSTEAD AS IT SHOULD BE...ELL                        *\n*                                                                    *\n**********************************************************************\nWHOIS    CSECT\nWHOIS    AMODE 24\nWHOIS    RMODE 24\n         STM   14,12,12(13)       SAVE CALLERS REGISTERS\n         BALR  12,0               SET CURRENT ADDRESS\n         USING *,12               ESTABLISH ADDRESSABILITY\n         ST    13,SAVE+4          CHAIN SAVE AREA\n         LR    11,13              POINT TO CALLERS SAVE AREA\n         LA    13,SAVE            POINT TO OUR SAVE AREA\n         ST    13,8(11)           CHAIN SAVE AREA\n         SPACE\n         USING CPPL,R1            ADDRESS CPPL\n         L    R2,CPPLCBUF         POINT TO COMMAND BUFFER\n         LA   R3,4(R2)             POINT TO START OF INPUT TEXT\n         AH   R3,2(R2)             POINT TO USERID ENTERED\n         AH    R2,0(R2)             POINT TO END OF COMMAND BUFFER\n         SR    R2,R3                POINT TO PARAMETER ENTERED\n         CH    R2,=H'1'            WAS > 1 CHARACTER PARAMTER ENTERED?\n         BH    PARMOK1            ..YES, CONTINUE 1 AND 8\n         B     PARMFAIL\nPARMOK1  DS    0H\n         CH    R2,=H'9'            WAS > 1 CHARACTER PARAMTER ENTERED?\n         BL    PARMOK             ..YES, CONTINUE\nPARMFAIL TPUT  MSG1,L'MSG1        WRITE ERROR MESSGAE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nPARMOK   DS    0H\n         STH  R2,LENFLD\n         BCTR R2,0                DOWN 1 FOR EXECUTE MOVE\n         EX    R2,EXMVC           MOVE PARAMETER TO RACF PARMLIST\n         EX    R2,EXOC            UPPER CASE\n         L     R3,16               POINT TO CVT\n         USING CVT,R3\n         L     R3,CVTTCBP          POINT TO TCB AND ASCB POINTERS\n         L     R3,4(R3)             POINT TO CURRENT TCB\n         EJECT\nAUTHOK   DS    0H\n         RACSTAT\n         LTR   R15,R15              IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         TPUT  MSG2,L'MSG2        WRITE ERROR MESSGAE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nRACFOK   ICHEINTY LOCATE,         LOCATE NEXT USERID                   X\n               TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA,                   X\n               ACTIONS=(ACTION1)\n         LTR   R15,R15              WAS LOCATE SUCCESSFUL?\n         BZ    FOUND              ..YES, CONTINUE\n         C     R15,=F'12'          WAS LOCATE UNSUCCESSFUL?\n         BE    NOTFOUND           ..YES, CONTINUE\n         CVD   15,WORKD           CONVERT RETURN CODE TO DECIMAL\n         UNPK  ERRORCD,WORKD+6(2) MOVE TO ERROR MESSAGE\n         OI    ERRORCD+1,X'F0'    MAKE LAST CHARACTER PRINTABLE\n         TPUT  MSG5,L'MSG5        WRITE ERROR MESSAGE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nFOUND    MVC   MSG3,NAME          MOVE TO MESSAGE\n         TPUT  MSG3,L'MSG3        WRITE MESSAGE\n         B     RETURN             RETURN TO CALLER\nNOTFOUND DS    0H                 WRITE NOFOUND MESSAGE\n         MVC   MSG4(8),USERID\n         TPUT  MSG4,L'MSG4        WRITE NOFOUND MESSAGE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nRETURN   L     13,SAVE+4          POINT TO CALLERS SAVE AREA\n         RETURN (14,12),RC=0      RETURN TO CALLER\n         EJECT\nSAVE     DS    18F                SAVE AREA\nWORKD    DS    D                  DOUBLEWORD WORK AREA\n* PARM FIELD\nLENFLD   DS    0H\n         DS    AL1    FILLER\n*   BEGINS HERE ...\nENTRY    DC    AL1(0)             LENGTH OF USERID FIELD\nUSERID   DC    XL8'00'            USERID\n*   ENDS\nBLANK8   DC    CL8'        '      8 BLANKS\nEXMVC    MVC   USERID(0),0(R3)\nEXOC     OC    USERID(0),BLANK8\n         DS    0F\nWKAREA   DC    AL4(WKAREAL)       LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nNAMEL    DS    AL2\nNAME     DS    CL20\nWKAREAL  EQU   *-WKAREA           CALCULATE WORK AREA LENGTH\nMSG1     DC    C'USERID NOT VALID - MUST BE > 1 < 9  CHARACTERS'\nMSG2     DC    C'RACF IS NOT OPERATING'\nMSG3     DC    CL20' '\nMSG4     DC    C'         NOT FOUND'\nMSG5     DC    C'RACF ERROR, RETURN CODE FROM ICHEINTY MACRO = XX'\n         ORG   MSG5+46\nERRORCD  DS    CL2                ERROR RETURN CODE\n         ORG\n         LTORG\n         EJECT\nACTION1  ICHEACTN FIELD=PGMRNAME\n         EJECT\n         PRINT NOGEN\n         IKJCPPL\n         CVT DSECT=YES\n         IKJTCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHOIS$": {"ttr": 12301, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00B\\x01\\x01\\x04O\\x01\\x165o\\t2\\x00\\x1d\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2001-02-13T00:00:00", "modifydate": "2016-12-21T09:32:42", "lines": 29, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB (CCMVS),'HI FOLKS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//*        DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE013\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE013(WHOIS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB493013\n SETCODE AC(1)\n NAME    WHOIS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHOIS01": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00}\\x00}\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "FILE013"}, "text": "WHOIS    TITLE 'WHOIS -- TSO USERID COMMAND'\n**********************************************************************\n*                                                                    *\n*  MODULE NAME -                                                     *\n*                                                                    *\n*     WHOIS  -- TSO COMMAND PROCESSOR TO DISPLAY THE \"NAME\"          *\n*               FIELD OF A RACF USERID AT THE TERMINAL.              *\n*                                                                    *\n*  FUNCTION -                                                        *\n*                                                                    *\n*     SEE ABOVE...                                                   *\n*                                                                    *\n*  ATTRIBUTES -                                                      *\n*                                                                    *\n*     NONREENTRANT, NONREUSABLE, NONREFRESHABLE                      *\n*                                                                    *\n*  REQUIREMENTS -                                                    *\n*                                                                    *\n*     -  'WHOIS' MUST BE ENTERED IN THE RACF AUTHORIZED              *\n*            CALLER TABLE (ICHAUTAB)                                 *\n*                                                                    *\n*     -  'WHOIS' SHOULD BE ENTERED INTO THE TSO/E AUTHORIZED         *\n*            COMMAND TABLE (IKJEFTE2)                                *\n*                                                                    *\n*     -  LOAD MODULE MUST BE LINKED 'AC=1' AND PLACED INTO           *\n*            AN APF AUTHORIZED LIBRARY                               *\n*                                                                    *\n*     -  THE RACF USERID(S) MUST BE (6) CHARACTERS IN LENGTH         *\n*                                                                    *\n*  CHANGE HISTORY -                                                  *\n*                                                                    *\n*     03/11/87, REMOVED THE CODE FOR 'SVC 236' THAT KARL TAI HAD     *\n*               WRITTEN, WILL USE THE RACF AUTHORIZED CALLER TABLE   *\n*               INSTEAD AS IT SHOULD BE...ELL                        *\n*                                                                    *\n**********************************************************************\nWHOIS    CSECT\nWHOIS    AMODE 24\nWHOIS    RMODE 24\n         STM   14,12,12(13)       SAVE CALLERS REGISTERS\n         BALR  12,0               SET CURRENT ADDRESS\n         USING *,12               ESTABLISH ADDRESSABILITY\n         ST    13,SAVE+4          CHAIN SAVE AREA\n         LR    11,13              POINT TO CALLERS SAVE AREA\n         LA    13,SAVE            POINT TO OUR SAVE AREA\n         ST    13,8(11)           CHAIN SAVE AREA\n         SPACE\n         USING CPPL,1             ADDRESS CPPL\n         L     2,CPPLCBUF         POINT TO COMMAND BUFFER\n         LA    3,4(2)             POINT TO START OF INPUT TEXT\n         AH    3,2(2)             POINT TO USERID ENTERED\n         AH    2,0(2)             POINT TO END OF COMMAND BUFFER\n         SR    2,3                POINT TO PARAMETER ENTERED\n         CH    2,=H'6'            WAS 6 CHARACTER PARAMTER ENTERED?\n         BE    PARMOK             ..YES, CONTINUE\n         TPUT  MSG1,L'MSG1        WRITE ERROR MESSGAE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nPARMOK   MVC   USERID(6),0(3)     MOVE PARAMETER TO RACF PARMLIST\n         OC    USERID(6),=CL6' '  INSURE UPPER CASE\n         L     3,16               POINT TO CVT\n         USING CVT,3\n         L     3,CVTTCBP          POINT TO TCB AND ASCB POINTERS\n         L     3,4(3)             POINT TO CURRENT TCB\n         EJECT\nAUTHOK   DS    0H\n         RACSTAT\n         LTR   15,15              IS RACF OPERATING?\n         BZ    RACFOK             ..YES, CONTINUE\n         TPUT  MSG2,L'MSG2        WRITE ERROR MESSGAE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nRACFOK   ICHEINTY LOCATE,         LOCATE NEXT USERID                   X\n               TYPE='USR',ENTRY=ENTRY,WKAREA=WKAREA,                   X\n               ACTIONS=(ACTION1)\n         LTR   15,15              WAS LOCATE SUCCESSFUL?\n         BZ    FOUND              ..YES, CONTINUE\n         C     15,=F'12'          WAS LOCATE UNSUCCESSFUL?\n         BE    NOTFOUND           ..YES, CONTINUE\n         CVD   15,WORKD           CONVERT RETURN CODE TO DECIMAL\n         UNPK  ERRORCD,WORKD+6(2) MOVE TO ERROR MESSAGE\n         OI    ERRORCD+1,X'F0'    MAKE LAST CHARACTER PRINTABLE\n         TPUT  MSG5,L'MSG5        WRITE ERROR MESSAGE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nFOUND    MVC   MSG3,NAME          MOVE TO MESSAGE\n         TPUT  MSG3,L'MSG3        WRITE MESSAGE\n         B     RETURN             RETURN TO CALLER\nNOTFOUND TPUT  MSG4,L'MSG4        WRITE NOFOUND MESSAGE\n         B     RETURN             RETURN TO CALLER\n         EJECT\nRETURN   L     13,SAVE+4          POINT TO CALLERS SAVE AREA\n         RETURN (14,12),RC=0      RETURN TO CALLER\n         EJECT\nSAVE     DS    18F                SAVE AREA\nWORKD    DS    D                  DOUBLEWORD WORK AREA\nENTRY    DC    AL1(6)             LENGTH OF USERID FIELD\nUSERID   DC    XL8'00'            USERID\n         DS    0F\nWKAREA   DC    AL4(WKAREAL)       LENGTH OF WORKAREA\nRBA      DS    CL6                RBA OF RACF RECORD\nFLAGS    DS    X                  FLAGS\n         DS    C                  RESERVED\nDUPCOUNT DS    AL4                DUPLICATE RECORD COUNT\n         DS    CL8                RESERVED\nRETLEN   DS    AL4                LENGTH OF RETURNED DATA\nNAMEL    DS    AL2\nNAME     DS    CL20\nWKAREAL  EQU   *-WKAREA           CALCULATE WORK AREA LENGTH\nMSG1     DC    C'USERID NOT VALID - MUST BE SEVEN CHARACTERS'\nMSG2     DC    C'RACF IS NOT OPERATING'\nMSG3     DC    CL20' '\nMSG4     DC    C'USERID NOT FOUND'\nMSG5     DC    C'RACF ERROR, RETURN CODE FROM ICHEINTY MACRO = XX'\n         ORG   MSG5+46\nERRORCD  DS    CL2                ERROR RETURN CODE\n         ORG\n         EJECT\nACTION1  ICHEACTN FIELD=PGMRNAME\n         EJECT\n         PRINT NOGEN\n         IKJCPPL\n         CVT DSECT=YES\n         IKJTCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WPC": {"ttr": 12548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x01u\\x01u\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 373, "newlines": 373, "modlines": 0, "user": "FILE013"}, "text": "WPC     TITLE 'DISPLAY WHAT PROFILE COVERS A DATASET'\n*---------------------------------------------------------------------*\n*\n*  PROGRAM     WPC\n*\n*  ABSTRACT    THE WPC COMMAND WILL DISPLAY THE NAME OF THE PROFILE\n*              THAT 'COVERS' THE DATASET GIVEN ON THE COMMAND. THIS\n*              IS DONE USING AN UNDOCUMENTED FUNCTION OF RACHECK.\n*\n*  INPUTS:\n*      PARAMETERS  R1 -> STANDARD CPPL REPRESENTING COMMAND:\n*                           \"WPC FILE.NAME\"\n*      FILES       NONE\n*      OTHER       NONE\n*\n*  OUTPUTS:\n*      MESSAGES    \"ENTITY(....) IS PROTECTED BY PROFILE(....)\"\n*                  VARIOUS ERROR MSGS IF THINGS GO WRONG\n*      FILES       NONE\n*      OTHER       NONE\n*\n*  PROGRAM     REENTRANT, PROBLEM KEY AND STATE EXCEPT AS REQUIRED,\n*  ATTRIBUTES  STD. LINKAGE, APF-AUTHORIZED, AMODE(24), RMODE(24)\n*\n*  SPECIAL\n*  NOTES       WPC MUST BE AUTHORIZED. INCLUDE ITS NAME IN TMP TABLE\n*              IKJEFTE2 IF IT IS TO BE USED AS A STD. TSO COMMAND.\n*\n*              BECAUSE WPC USES TAGS > 8 CHARACTERS, ASSEMBLER H IS\n*              REQUIRED TO ASSEMBLE IT AS PROVIDED.  CHANGE THE TAG\n*              NAMES TO <= 8 CHARACTERS IF YOU MUST USE ASSEMBLER F.\n*\n*              ASSEMBLY OF WPC REQUIRES SYS1.AMODGEN.\n*\n*  CHANGE\n*  HISTORY     10/23/86 JCB - NEW\n*              01/19/89 JCB - CONVERTED AWAY FROM CLEMSON STRUCTURED\n*                             MACROS TO ALLOW DIST. ON RACF MODS TAPE\n*              __/__/__ ___\n*\n*  METHOD OF   PARSE COMMAND FOR DATASET NAME\n*  OPERATION   GET DATASET'S VOLSER FROM CATALOG\n*              ISSUE RACHECK FOR ALTER WITH MAGIC OPTION\n*              TELL USER WHAT WE FOUND\n*\n*\n*---------------------------------------------------------------------*\n         EJECT                        |\n         MACRO                        |\n&TAG     MESSAGE  &MSGID,&PRINT='NO'  |\n         AIF   ('&TAG' EQ '').NOTAG   |\n&TAG     DS    0H                     |\n.NOTAG   ANOP                         |\n         AIF   ('&PRINT' EQ 'YES').GO |\n         PRINT NOGEN                  |\n.GO      ANOP                         |\n         SPACE 1                      |\n         LA    R1,&MSGID              | POINT TO MESSAGE TO ISSUE\n         LA    R15,PWAPUTL            | FIND OUR PTPB\n         USING PTPB,R15               |\n         ST    R1,PTPBOPUT            |  AND POINT IT AT THE MESSAGE.\n         DROP  R15                    |\n         LA    R1,PWAIOPL             | POINT R1 AT IOPL\n         LA    R15,PWAPUTL            |\n         ST    R15,IOPLIOPB-IOPL(,R1) |\n         L     R15,PWAAPUTL         GET ADDRESS OF PUTLINE\n         PUTLINE  MF=(E,(1)),ENTRY=(15)   AND ISSUE THE MESSAGE.\n         SPACE 1                      |\n         AIF   ('&PRINT' EQ 'YES').QUIT\n         PRINT GEN                    |\n.QUIT    ANOP                         |\n         MEND                         |\n         EJECT                        |\n*BLOCK NAME=WPC,TYPE=PROGRAM,OPTIONS=*PWA,R1SAVE=R7\nWPC      CSECT ,                      |\n         STM   R14,R12,12(R13)        |\n         LR    R12,R15                |\n         USING WPC,R12                |\n         LR    R7,R1                  |\n         GETMAIN R,LV=PWAPLLEN        |\n         ST    R13,4(R1)              |\n         ST    R1,8(R13)              |\n         LR    R13,R1                 |\n         USING PWA,R13                |\nR0       EQU   0                      |\nR1       EQU   1                      |\nR2       EQU   2                      |\nR3       EQU   3                      |\nR4       EQU   4                      |\nR5       EQU   5                      |\nR6       EQU   6                      |\nR7       EQU   7                      |\nR8       EQU   8                      |\nR9       EQU   9                      |\nR10      EQU   10                     |\nR11      EQU   11                     |\nR12      EQU   12                     |\nR13      EQU   13                     |\nR14      EQU   14                     |\nR15      EQU   15                     |\n  SPACE 1                             |\n  USING CPPL,R7                       |\n*---------------------------------------------------------------------*\n*     SET UP TO ISSUE PUTLINES\n*---------------------------------------------------------------------*\n  MVC   PWAPUTL(12),STCPUTL           |   SET WORKING PTPB TO MF=L COPY\n  LA    R1,PWAIOPL                    |   BUILD THE IOPL FOR MESSAGES\n  USING IOPL,R1                       |\n  MVC   IOPLUPT,CPPLUPT               |   COPY UPT ADDRESS INTO IOPL\n  MVC   IOPLECT,CPPLECT               |   COPY ECT ADDRESS INTO IOPL\n  LA    R2,PWACPECB                   |   COPY ECB ADDRESS\n  ST    R2,IOPLECB                    |    INTO IOPL\n  DROP  R1                            |\n         SPACE 1                      |\n*---------------------------------------------------------------------*\n*     SET UP TO CALL IKJPARS\n*---------------------------------------------------------------------*\n  LA    R2,PWAPPL                     |\n  USING PPL,R2                        |\n  MVC   PPLUPT,CPPLUPT                |   COPY UPT POINTER\n  MVC   PPLECT,CPPLECT                |   COPY ECT POINTER\n  MVC   PPLCBUF,CPPLCBUF              |   COPY COMMAND BUFFER POINTER\n  LA    R1,PWACPECB                   |   SET ECB POINTER\n  ST    R1,PPLECB                     |\n  LA    R1,PWAPDLP                    |   SET ANSWER-AREA POINTER\n  ST    R1,PPLANS                     |\n  MVC   PPLPCL,=V(PARSBASE)           |   SET UP PARSE CONTROL LIST PTR\n  DROP  R2                            |\n*---------------------------------------------------------------------*\n*    PULL ADDRESSES OF PUTLINE, IKJPARS; CALL IKJPARS\n*---------------------------------------------------------------------*\n  L     R1,CVTPTR                     |\n  USING CVT,R1                        |\n  MVC   PWAAPUTL,CVTPUTL              |   SAVE ADDRESS OF PUTLINE AND\n  MVC   PWAAPARS,CVTPARS              |    IKJPARS SERVICE ROUTINES\n  DROP  R1                            |\n        SPACE 1                       |\n  LA    R1,PWAPPL                     |\n  L     R15,PWAAPARS                  |\n  BALR  R14,R15                       |   CALL IKJPARS\n* ERREXIT      NAME=IKJPARS_ERROR,    |   ERREXIT IF PARS HAD TROUBLE\n*              (TREG,R15,NZ)          |\n        LTR   R15,R15                 |\n        BNZ   IKJPARS_ERROR           |\n* *-------------------------------------------------------------------*\n* * LOOK AT RESULTS FROM IKJPARS; CONSTRUCT DSNAME TO DO RACHECK FOR\n* *-------------------------------------------------------------------*\n  L     R9,PWAPPL+(PPLANS-PPL)        | POINT TO PARS ANSWER AREA ...\n  L     R9,0(R9)                      |\n  USING IKJPARMD,R9                   | ... AND BASE ON IT\n* FILL  PWADSN,C' '                   |\n        MVI   PWADSN,C' '             |\n        MVC   PWADSN+1(L'PWADSN-1),PWADSN\n  L     R1,PDEDSN                     | POINT TO PARSED DSNAME\n  BCTR  R1,0                          | BACK UP ONE CHAR\n* IF    (CLI,0(R1),NE,C'''')          | IF DSNAME DOESN'T START W/QUOTE\n          CLI   0(R1),C''''           |\n          BE    ELSE_1                |\n   L     R2,CPPLUPT                   |  BUILD DSNAME IN PWA BY\n   USING UPT,R2                       |   PREFIXING W/UPT PREFIX.\n   MVC   PWADSN+1(L'UPTPREFX),UPTPREFX    A LENGTH BYTE GOES IN\n*  L8    R3,UPTPREFL                  |   FRONT OF DSNAME, TOO.\n          XR    R3,R3                 |\n          ICM   R3,B'0001',UPTPREFL   |\n   LA    R15,PWADSN+1(R3)             |\n   MVI   0(R15),C'.'                  |\n   LH    R14,PDEDSN+4                 |\n   LA    R3,1(R3,R14)                 |\n   STC   R3,PWADSN                    |\n   BCTR  R14,0                        |\n*  EXI   R14,(MVC,1(0,R15),1(R1))     |\n         EX    R14,EXMVC1             |\n   DROP  R2                           |\n* ELSE                                | OTHERWISE\n         B     ENDIF_1                |\nELSE_1   DS    0H                     |\n   LH    R15,PDEDSN+4                 |   MOVE STRAIGHT DSNAME. PUT\n   STC   R15,PWADSN                   |   LENGTH BYTE ON FRONT, TOO\n   BCTR  R15,0                        |\n*  EXI   R15,(MVC,PWADSN+1(0),1(R1))  |\n          EX    R15,EXMVC2            |\n* ENDIF                               |\nENDIF_1   DS    0H                    |\n* *-------------------------------------------------------------------*\n* *  SEE IF DATASET IS CATALOGUED, AND WHAT VOLUME IT'S ON.  NOTE THAT\n* *  WPC DOES NOT SUPPORT UNCATALOGUED DATASETS.\n* *-------------------------------------------------------------------*\n  MVC   PWACML(LENCML),STCCML         | COPY LOCATE PARMS\n  LA    R1,PWADSN+1                   |\n  ST    R1,CMLDSNAM                   | SET A(DSNAME) FOR LOCATE\n  LA    R1,PWACAMWA                   |\n  ST    R1,CMLWORK                    | SET A(WORKAREA) FOR LOCATE\n  XC    CMLCVOL,CMLCVOL               | NO CVOL.\n  LOCATE PWACML                       | SEE IF CATLG'D TO GET VOLUME\n* IF    (TREG,R15,NZ)                 | LOCATE RC NONZERO?\n         LTR   R15,R15                |\n         BZ    ENDIF_2                |\n   MESSAGE STCNCATM                   |  ASSUME IT'S UNCATALOGUED\n*  LEAVE BLOCK=WPC                    |   AND EXIT WPC COMMAND.\n         B     ENDWPC0                |\n* ENDIF                               |\nENDIF_2  DS    0H                     |\n         SPACE 1                      |\n* *-------------------------------------------------------------------*\n* *  RACHECK THE DATASET NAME PROVIDED WITH THE MAGIC OPTION.\n* *-------------------------------------------------------------------*\n  MVC   PWARCHK(LENRCHK),STCRCHK      | RACHECK PARMS -> PWA\n  LA    R1,PWARCHK                    | BASE ON RACHECK PARMS\n  USING ACHKLIST,R1                   |\n* SBIT  ACHKFLG3,ACHKPRI              | <<< SET THE BIT >>>\n          OI    ACHKFLG3,ACHKPRI      |\n  DROP  R1                            |\n  MODESET KEY=ZERO                    | MAGIC PARM REQUIRES KEY ZERO\n  LA    R3,PWACAMWA+6                 | GET POINTER TO VOLSER\n  RACHECK ENTITY=(PWADSN+1),          | ISSUE RACHECK                  *\n               VOLSER=(R3),           |                                *\n               MF=(E,PWARCHK)         |\n* ERREXIT NAME=RACHECK_ERROR,(TREG,R15,NZ)  ERREXIT IF RACHECK RC NZ\n         LTR   R15,R15                |\n         BNZ   RACHECK_ERROR          |\n* *-------------------------------------------------------------------*\n* *  BUILD AND ISSUE RESULTS MESSAGE\n* *-------------------------------------------------------------------*\n  MVC   PWAGEN+1(L'PWAGEN-1),4(R1)    |   R1 POINTS TO RETURN AREA:\n*                                         PROFILE NAME IS AT +4\n  MODESET KEY=NZERO                   |   GET NORMAL AGAIN\n  LA    R1,PWAGEN+1                   |   SEE HOW LONG PROFILE NAME IS\n* LOOP  WHILE,(CLI,0(R1),NE,C' ')     |    BY SCANNONG FOR A BLANK\nLOOP1    DS    0H                     |\n         CLI   0(R1),C' '             |\n         BE    ENDLOOP1               |\n   LA    R1,1(R1)                     |\n* ENDLOOP WHILE                       |\n         B     LOOP1                  |\nENDLOOP1 DS    0H                     |\n  LA    R15,PWAGEN+1                  |   GET START OF NAME\n  SR    R1,R15                        |   GET DIFFERENCE AND\n  STC   R1,PWAGEN                     |    SET LENGTH.\n* FILL  PWAMSG,C' '                   |   BUILD MESSAGE\n          MVI   PWAMSG,C' '           |\n          MVC   PWAMSG+1(L'PWAMSG-1),PWAMSG\n  XC    PWAMSG+2(2),PWAMSG+2          |\n  MVC   PWAMSG+4(L'STCRM1),STCRM1     | MESSAGE SEGMENT 1\n* L8    R1,PWADSN                     | INCLUDE DATASET NAME\n          XR    R1,R1                 |\n          ICM   R1,B'0001',PWADSN     |\n  BCTR  R1,0                          |\n* EXI   R1,(MVC,PWAMSG+4+L'STCRM1(0),PWADSN+1)\n         EX    R1,EXMVC3              |\n  LA    R1,1+PWAMSG+4+L'STCRM1(R1)    | POINT PAST DSNAME\n  MVC   0(L'STCRM2,R1),STCRM2         | MESSAGE SEGMENT 2\n  LA    R1,L'STCRM2(R1)               | POINT PAST MSGSEG 2\n* L8    R15,PWAGEN                    |\n         XR    R15,R15                |\n         ICM   R15,B'0001',PWAGEN     |\n  BCTR  R15,0                         |\n* EXI   R15,(MVC,0(0,R1),PWAGEN+1)    | INCLUDE PROFILE NAME\n         EX    R15,EXMVC4             |\n  LA    R1,1(R1,R15)                  |\n  MVI   0(R1),C')'                    | APPEND CLOSING PAREN\n  LA    R1,1(R1)                      | POINT TO END OF MESSAGE\n  LA    R15,PWAMSG                    | POINT TO START\n  SR    R1,R15                        | GET DIFFERENCE\n  STH   R1,PWAMSG                     |  AND SET LENGTH FOR PUTLINE.\n*\n  MESSAGE PWAMSG                      | SAY WHAT WE FOUND\n         SPACE 1                      |\n* *-------------------------------------------------------------------*\n* *  TERMINATE.\n* *-------------------------------------------------------------------*\n*ENDBLK BLOCK=WPC,RC=0                |\nENDWPC0  DS    0H                     |\n         XR    R15,R15                |\nENDWPC   DS    0H                     |\n         LR    R1,R13                 |\n         L     R13,4(,R13)            |\n         FREEMAIN R,A=(1),LV=PWAPLLEN |\n         L     R14,12(,R13)           |\n         LM    R0,R12,20(R13)         |\n         BR    R14                    |\n         SPACE ,                      |\n*BLOCK NAME=IKJPARS_ERROR,TYPE=ERREXIT\nIKJPARS_ERROR DS    0H                |\n  MESSAGE STCPARSM                    | IKJPARS ERROR MESSAGE\n*ENDBLK BLOCK=IKJPARS_ERROR,RC=12     |\n         LA    R15,12                 |\n         B     ENDWPC                 |\n         SPACE ,                      |\n*BLOCK NAME=RACHECK_ERROR,TYPE=ERREXIT\nRACHECK_ERROR DS    0H                |\n  LR    R3,R15                        | SAVE RACHECK RETURNCODE\n  MODESET KEY=NZERO                   | WE GOT CALLED IN KEY ZERO\n  CH    R3,=H'4'                      |\n  BE    RE_NO_PROFILE                 |\n  MESSAGE STCRCKIA                    | RC=8+: INSUFFICIENT ACCESS\n  B     RACHECK_ERROR_END             |\nRE_NO_PROFILE DS  0H                  |\n  MESSAGE STCRCKNP                    | RC=4: NO PROFILE\n* DC    H'0'\n*ENDBLK BLOCK=RACHECK_ERROR,RC=8      |\nRACHECK_ERROR_END DS 0H               |\n         LA    R15,8                  |\n         B     ENDWPC                 |\n         EJECT ,                      |\nEXMVC1   MVC    1(0,R15),1(R1)        |\nEXMVC2   MVC    PWADSN+1(0),1(R1)     |\nEXMVC3   MVC    PWAMSG+4+L'STCRM1(0),PWADSN+1\nEXMVC4   MVC    0(0,R1),PWAGEN+1      |\n         SPACE  1                     |\nSTCCML   CAMLST NAME,*,,*           CAMLST NAME FOR GETTING VOLSERS\nLENCML   EQU   *-STCCML               |\n         SPACE 1                      |\nSTCPARSM DC    AL2(L'STCPARST+4),AL2(0)\nSTCPARST DC    C'IKJPARS SERVICE ROUTINE ERROR'\n         SPACE 1                      |\nSTCRCKIA DC    AL2(L'STCRCKIT+4),AL2(0)\nSTCRCKIT DC    C'INSUFFICIENT ACCESS TO DATASET.'\n         SPACE 1                      |\nSTCRCKNP DC    AL2(L'STCRCPNT+4),AL2(0)\nSTCRCPNT DC    C'DATASET IS NOT COVERED BY A RACF PROFILE.'\n         SPACE 1                      |\nSTCNCATM DC    AL2(L'STCNCATT+4),AL2(0)\nSTCNCATT DC    C'DATASET IS NOT CATALOGUED.'\n         SPACE 1                      |\nSTCRM1   DC    C'ENTITY('             |\nSTCRM2   DC    C') IS PROTECTED BY PROFILE('\n         SPACE 1                      |\nSTCRCHK  RACHECK CLASS='DATASET',ATTR=ALTER,MF=L\nLENRCHK  EQU   *-STCRCHK              |\n         SPACE 1                      |\nSTCPUTL  PUTLINE OUTPUT=(0,DATA),MF=L |\nLENPUTL  EQU   *-STCPUTL              |\n         EJECT                        |\n         TITLE 'WPC -- IKJPARS MACROS'\n         PRINT NOGEN                  |\nPARSBASE IKJPARM  ,                   |\n         SPACE 2                      |\nPDEDSN   IKJPOSIT DSNAME,             |                                *\n               PROMPT='DATASET NAME TO LOCATE PROFILE FOR'\n         SPACE 2                      |\n         IKJENDP  ,                   |\n         PRINT GEN                    |\nPWA      DSECT ,                      |\nPWASAVE  DS    18F                    |\nPWARCHK  DS    0F,CL(LENRCHK)         | RACHECK PARMS\nPWAPUTL  DS    0F,CL(LENPUTL)         | PUTLINE PARMS\nPWAAPUTL DS    A                      | ADDRESS OF PUTLINE\nPWAAPARS DS    A                      | ADDRESS OF IKJPARS\nPWACPECB DS    F                      | ECB FOR PARS, PUTLINE\nPWAPDLP  DS    F                      | POINTER TO PARS PDE'S\nPWAIOPL  DS    4F                     | IOPL FOR PUTLINE\nPWAPPL   DS    7F                     | PARMS FOR IKJPARS\n         DS    0F                     |\nPWACML   DS    CL(LENCML)             | LOCATE DSNAMES IN CATALOG\n         ORG   PWACML                 |\nCMLFLAGS DS    F                      | FLAGS FOR LOCATE\nCMLDSNAM DS    F                      | A(DATASETNAME)\nCMLCVOL  DS    F                      | CVOL POINTER OR ZERO\nCMLWORK  DS    F                      | A(LOCATE'S PWA)\n         ORG   ,                      |\nPWAMSG   DS    CL100                  |\nPWADSN   DS    CL45                   |\nPWAGEN   DS    CL45                   |\nPWACAMWA DS    0D,CL265               |\nPWAPLLEN EQU   *-PWA                  |\n         IKJCPPL  ,                   |\n         IKJPTPB  ,                   |\n         IKJPPL   ,                   |\n         IKJUPT   ,                   |\n         IKJIOPL  ,                   |\n         ICHACHKL ,                   | << MAPPING MACRO FOR RACHECK PL\n         CVT   DSECT=YES              |\n         END   ,                      |\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZAPDFP": {"ttr": 12555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x03O\\x00\\x89\\x03O\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf1\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-02-03T00:00:00", "modifydate": "1989-02-03T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE013"}, "text": "***********************************************************************\n*                                                                     *\n*     01/05/87                                                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*     THIS MEMBER USED TO CONTAIN AN SMP/E USERMOD TO ZAP A DFP       *\n*     MODULE TO PREVENT KICKDOWN OF TAPES WITH THE WRITE RING IN      *\n*     THEM IF THE USER HAD ONLY READ AUTHORITY TO THE TAPE.           *\n*                                                                     *\n*     THE ABILITY TO DO THIS WITHOUT A USERMOD HAS NOW BEEN PROVIDED  *\n*     BY IBM VIA APAR OY08209.                                        *\n*                                                                     *\n*     PTF FOR DFP 2.2 IS: UY15884                                     *\n*     PTF FOR DFP 2.3 IS: UY15883                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPDFPO": {"ttr": 12557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x16$_\\x01\\x16$_\"\\x19\\x00#\\x00#\\x00\\x00\\xd9\\xc5\\xc1\\xd3\\xe9\\xc1\\xd7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-09-01T00:00:00", "modifydate": "2016-09-01T22:19:37", "lines": 35, "newlines": 35, "modlines": 0, "user": "REALZAP"}, "text": "//*-------------------------------------------------------------------*\n//*   USERMOD TO IGNORE THE \"WRITE-ENABLED\" ON TAPES FOR              *\n//*   RACF TAPEDS PROTECTION, SO THE TAPE WILL NOT KICK DOWN          *\n//*-------------------------------------------------------------------*\n//UMOD000  EXEC PGM=GIMSMP,REGION=4096K\n//SMPCSI   DD DSN=SMP.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD SYSOUT=*\n//SMPRPT   DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SMPCNTL  DD *\n SET BDY(TARGET).\n RESTORE S(UMOD000).\n SET BDY(GLOBAL).\n REJECT S(UMOD000).\n RECEIVE SYSMODS.\n SET BDY(TARGET).\n APPLY GROUP S(UMOD000) REDO.\n/*\n//SMP.SMPPTFIN DD DATA,DLM=$$\n++ USERMOD (UMOD000)\n   /*\n      THIS ZAP IGNORES THE EXISTENCE OF THE \"WRITE-ENABLED\"\n      IN TAPES(3420/3480) FOR RACF TAPEDS PROTECTION, SO\n      THAT MVS WILL NOT KICK DOWN A TAPE IF A \"WRITE ENABLED\"\n      IS DETECTED, EVEN THOUGH THE USER ONLY WANTS 'READ'.\n                                                               */.\n++ VER (Z038)\n   PRE(UY08699)\n   FMID(HDP2210) .\n++ ZAP (IFG0194F) .\n         NAME IFG0194A IFG0194F\n         VER  05C2 9180,41D6,4710,35E0\n         REP  05C6 47F0,35E0\n$$\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT013/FILE013.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT013", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}