//SAMPLE   JOB 1,JAFFE,CLASS=A,MSGCLASS=T,NOTIFY=&SYSUID
//ASM     EXEC ASMAC,
//             PARM.C='EXIT(INX(FLOWASM),LBX(FLOWASM))'
//C.STEPLIB DD DSN=SYS2.LINKLIB,DISP=SHR
//C.SYSLIB  DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYS1.MODGEN,DISP=SHR
//          DD DSN=HLA.SASMMAC1,DISP=SHR
//          DD DSN=HLA.SASMMAC2,DISP=SHR
//          DD DSN=EDJXADM.FLOWASM.PDS,DISP=SHR
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD *
SAMPLE CSECT ,
SAMPLE AMODE 31
SAMPLE RMODE 31
     COPY  ASMMSP                  Structured assembler support
     SYSSTATE ARCHLVL=1            Program supports immediate/relative
     ASMMREL ON                    Enable relative branch for SPMs

     STM   R14,R12,12(R13)         Save the registers

     CNOP  0,4                     Align to fullword
     JAS   R12,*+8                 Point to constants
     DC    A(SAMPLE_Const-*)       (same)
     AL    R12,0(,R12)             (same)
     USING SAMPLE_Const,R12    *** Synchronize base register
     USING STKSECT,StackCntl   *** Synchronize STKSECT

     STKSAVE INIT,                 Initialize save area stack
           ARMODE=YES,             - Support AR mode
           PREFIX=Sample           - Program prefix

     JAS   R14,Routine1            Invoke Routine1

     LM    R14,R12,12(R13)         Restore the registers
     BR    R14                     Return

Routine1 DC 0H
     STKSAVE PUSH                  Save the registers

     XR    R15,R15                 Set return code = 0

     STKSAVE POP,                  Restore the registers
           RETREGS=(R15)           - Pass back return code
     BR    R14                     Return

SAMPLE_Const DC 0D                 Constants for SAMPLE
StackCntl    DC (STKLNTH)X'00'     Stack control area
             STKSAVE DEFINE,       Define save area stack
                   COUNT=20,       - Number of stack frames
                   ARMODE=YES,     - Support AR mode
                   PREFIX=Sample   - Program prefix

             LTORG ,               Literals

             ASMDREG ,             Register equates

     END   SAMPLE                  End the program
//
