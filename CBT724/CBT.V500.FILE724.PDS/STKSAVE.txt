         MACRO ,
&LABEL   STKSAVE &TYPE,            Requested function                  +
               &ARMODE=,           AR mode indicator                   +
               &RETREGS=,          Registers to be returned            +
               &REGS=(R14:R13),    Registers to be saved/restored      +
               &LST=,              Load or STore operation             +
               &COUNT=10,          Number of stack frames              +
               &PREFIX=            Program prefix
.*START OF SPECIFICATIONS**************************************
.*                                                            *
.* MACRO NAME = STKSAVE                                       *
.*                                                            *
.* DESCRIPTIVE NAME = Local Save Area Stack Services          *
.*                                                            *
.* FUNCTION =                                                 *
.*                                                            *
.*    This macro provides low-overhead local save area stack  *
.*    services. A local save area stack is not intended to be *
.*    used for inter-program linkage. Other functions exist   *
.*    to address that need.                                   *
.*                                                            *
.* AUTHOR =                                                   *
.*                                                            *
.*    Edward E. Jaffe                                         *
.*    Phoenix Software International                          *
.*    5200 W. Century Blvd., Suite 800                        *
.*    Los Angeles, CA 90045 U.S.A.                            *
.*                                                            *
.*                                                            *
.* OPERATION =                                                *
.*                                                            *
.*    STKSAVE DEFINE                                          *
.*          {,COUNT=count}                                    *
.*          {,ARMODE=YES|NO}                                  *
.*          {,PREFIX=prefix}                                  *
.*                                                            *
.*      Defines storage for the stack. Specify the number     *
.*      of stack frames using the COUNT= keyword. ARMODE=YES  *
.*      generates stack frames large enough to save both the  *
.*      access and general purpose registers. Use of the      *
.*      optional PREFIX= allows multiple uniquely-named stack *
.*      areas to exist within a single assembly.              *
.*                                                            *
.*    STKSAVE INIT                                            *
.*          {,ARMODE=YES|NO}                                  *
.*          {,PREFIX=prefix}                                  *
.*                                                            *
.*      Generates code to initialize the stack control area.  *
.*      Use of the optional PREFIX= allows multiple uniquely- *
.*      named stacks to exist within a single assembly.       *
.*                                                            *
.*    STKSAVE PUSH                                            *
.*          {,REGS=(low{:high}{,low{:high}}{, ...})           *
.*                                                            *
.*      Saves the registers. The optional REGS= keyword       *
.*      allows you to specify which registers are saved.      *
.*      You can specify single registers or ranges. For       *
.*      example: REGS=(R14:R2,R13) specifies R14 through      *
.*      R2 (wrapping after R15) and R13. The default is       *
.*      REGS=(R14:R13).                                       *
.*                                                            *
.*    STKSAVE POP                                             *
.*          {,REGS=(low{:high}{,low{:high}}{, ...})           *
.*          {,RETREGS=(reg1,reg2,...,regn)}                   *
.*                                                            *
.*      Restores the registers. The optional REGS= keyword    *
.*      allows you to specify which registers are restored.   *
.*      You can specify single registers or ranges. For       *
.*      example: REGS=(R14:R2,R13) specifies R14 through      *
.*      R2 (wrapping after R15) and R13. The default is       *
.*      REGS=(R14:R13).                                       *
.*                                                            *
.*      Registers that must be passed back in-tact to the     *
.*      caller are listed in the RETREGS= register list.      *
.*      R14 is not eligible for this treatment.               *
.*                                                            *
.*    ------------------------------------------------------- *
.*                                                            *
.*    Notes: ARMODE=YES|NO sets a macro global variable.      *
.*           Only the first of DEFINE or INIT need specify    *
.*           this value. One of these must precede the first  *
.*           use of PUSH and/or POP in the assembly.          *
.*                                                            *
.*    ------------------------------------------------------- *
.*                                                            *
.*    To define the stack control area, place the following   *
.*    at the top of your program after addressability to your *
.*    working storage has been established:                   *
.*                                                            *
.*             USING STKSECT,label                            *
.*                                                            *
.*    and place the following in your working storage area:   *
.*                                                            *
.*    label    DC    (STKLNTH/8)D'0'                          *
.*                                                            *
.*END OF SPECIFICATIONS****************************************
         GBLB  &STKAR
         GBLB  &STKSECT
         LCLB  &REG(16)
         AIF   ('&TYPE' EQ 'ARMODE').ARMODE  Handle ARMODE keyword
         AIF   ('&TYPE' EQ 'DEFINE').DEFINE  Define save area stack
         AIF   ('&TYPE' EQ 'INIT').INIT      Init save area stack
         AIF   ('&TYPE' EQ 'PUSH').PUSH      Save the registers
         AIF   ('&TYPE' EQ 'POP').POP        Restore the registers
         AIF   ('&TYPE' EQ 'REGS').REGS      Manipulate the registers
         MNOTE 8,'*** &TYPE is invalid ***'
         MEXIT ,
.*
.ARMODE  ANOP  ,
         AIF   ('&ARMODE' EQ '').ARMODE1
&STKAR   SETB  0
         AIF   ('&ARMODE' EQ 'NO').ARMODE1
&STKAR   SETB  1
         AIF   ('&ARMODE' EQ 'YES').ARMODE1
         MNOTE 8,'*** ARMODE=''&ARMODE'' is invalid ***'
.ARMODE1 ANOP  ,
         MEXIT ,
.*
.DEFINE  ANOP  ,
         AIF   (&STKSECT).DEFINE1
&STKSECT SETB  1
****************************************************************
*                 Save Area Stack Control Area                 *
****************************************************************
STKSECT  DSECT ,                   Save Area Stack Control
STKCUR   DS    A                   Pointer to current element
STKBGN   DS    A                   Pointer to start of stack
STKEND   DS    A                   Pointer past end of stack
STKWORK  DS    F                   Work register save area
         DS    0D                  Ensure doubleword alignment
STKLNTH  EQU   *-STKSECT           Length of Stack Control data
STKESIZ  EQU   4*16                Length of save area element
STKAESZ  EQU   4*32                Length of save area element (ARMODE)

&SYSECT  &SYSSTYP ,                Restore section

.DEFINE1 ANOP  ,
         PUSH  PRINT,NOPRINT
         PRINT NOMCALL,NOPRINT
         STKSAVE ARMODE,ARMODE=&ARMODE
         POP   PRINT,NOPRINT
&P       SETC  '&PREFIX'
         AIF   (&STKAR).DEFINE2
&P.STAKZ EQU   &COUNT*STKESIZ      Size of save area stack
         AGO   .DEFINE3
.DEFINE2 ANOP  ,
&P.STAKZ EQU   &COUNT*STKAESZ      Size of save area stack
.DEFINE3 ANOP  ,
&P.STAK  DC    (&P.STAKZ/8)D'0'    Save area stack
&P.STAKE EQU   *                   (same)
         MEXIT ,
.*
.INIT    ANOP ,
         PUSH  PRINT,NOPRINT
         PRINT NOMCALL,NOPRINT
         STKSAVE ARMODE,ARMODE=&ARMODE
         POP   PRINT,NOPRINT
&P       SETC  '&PREFIX'
     LA    R15,&P.STAK             Point to stack start
     ST    R15,STKBGN              Save stack begin address
     LR    R14,R15                 Save starting address
     AHI   R15,&P.STAKZ            Point past end of stack
     ST    R15,STKEND              Save stack end address
         AIF   (&STKAR).INIT1
     AHI   R14,-STKESIZ            Prime stack pointer
     ST    R14,STKCUR              (same)
         MEXIT ,
.INIT1   ANOP  ,
     AHI   R14,-STKAESZ            Prime stack pointer
     ST    R14,STKCUR              (same)
         MEXIT ,
.*
.PUSH    ANOP ,
     ST    R14,STKWORK             Save work register
     L     R14,STKCUR              Get current pointer
         AIF   (&STKAR).PUSH1
     AHI   R14,STKESIZ             Advance pointer
         AGO   .PUSH2
.PUSH1   ANOP ,
     LAE   R14,STKAESZ(R14,0)      Advance pointer
.PUSH2   ANOP ,
     C     R14,STKEND              Overflow ?
     BNL   1(0,0)                  Abend if yes
     ST    R14,STKCUR              Save new pointer
     MVC   0(4,R14),STKWORK        Save register 14
     PUSH  PRINT,NOPRINT
     PRINT NOMCALL,NOPRINT
     STKSAVE REGS,                 Save the registers
           LST=ST,                 (same)
           REGS=&REGS              (same)
     POP   PRINT,NOPRINT
     L     R14,STKWORK             Restore work register
         MEXIT ,
.*
.POP     ANOP ,
     L     R14,STKCUR              Get current pointer
         AIF   (&STKAR).POP1
     AHI   R14,-STKESIZ            Decrement pointer
         AGO   .POP2
.POP1    ANOP ,
     AHI   R14,-STKAESZ            Decrement pointer
     LAE   R14,0(R14,0)            Zero AR14
.POP2    ANOP ,
     C     R14,STKBGN              Underflow ?
     BL    1(0,0)                  Abend if yes
     ST    R14,STKCUR              Save new pointer
     PUSH  PRINT,NOPRINT
     PRINT NOMCALL,NOPRINT
     STKSAVE REGS,                 Load select registers
           LST=L,                  (same)
           REGS=&REGS,             (same)
           RETREGS=&RETREGS        (same)
     POP   PRINT,NOPRINT
         MEXIT ,
.*
.REGS       ANOP  ,
.* Populate Register Bit Mask
&REG(1)     SETB  0
&REG(2)     SETB  0
&REG(3)     SETB  0
&REG(4)     SETB  0
&REG(5)     SETB  0
&REG(6)     SETB  0
&REG(7)     SETB  0
&REG(8)     SETB  0
&REG(9)     SETB  0
&REG(10)    SETB  0
&REG(11)    SETB  0
&REG(12)    SETB  0
&REG(13)    SETB  0
&REG(14)    SETB  0
&REG(15)    SETB  1
&REG(16)    SETB  1
&I1         SETA  1
.REG1       ANOP  ,
&C1         SETC  '&REGS(&I1)'
&C2         SETC  '&C1'
&I2         SETA  INDEX('&C1',':')
            AIF   (&I2 EQ 0).REG2
&C2         SETC  '&C1'(&I2+1,*)
&C1         SETC  '&C1'(1,&I2-1)
.REG2       ANOP  ,
&C1         SETC  '&C1'(2,*)
&C2         SETC  '&C2'(2,*)
&I2         SETA  &C1
&I3         SETA  &C2
.REG3       ANOP  ,
&REG(&I2+1) SETB  1
            AIF   (&I2 EQ &I3).REG4
&I2         SETA  &I2+1
            AIF   (&I2 LE 15).REG3
&I2         SETA  0
            AGO   .REG3
.REG4       ANOP  ,
&I1         SETA  &I1+1
            AIF   (&I1 LE N'&REGS).REG1
.* Remove any RETREGS from list
&I1         SETA  1
.REG5       ANOP  ,
            AIF   (&I1 GT N'&RETREGS).REG6
&C1         SETC  '&RETREGS(&I1)'
&C1         SETC  '&C1'(2,*)
&I2         SETA  &C1
&REG(&I2+1) SETB  0
&I1         SETA  &I1+1
            AGO   .REG5
.REG6       ANOP  ,
.* LOAD/STORE Registers
&P          SETC  '&LST'
&I5         SETA  &STKAR
&I5         SETA  &I5*64+64
            AIF   ('&P' EQ 'L').REG7
&REG(15)    SETB  0
&I5         SETA  0
.REG7       ANOP  ,
&I1         SETA  14
.REG8       ANOP  ,
            AIF   (&REG(&I1)).REG9
&I1         SETA  &I1-1
            AIF   (&I1 GT 0).REG8
            AGO   .REG16
.REG9       ANOP  ,
&I3         SETA  &I1-1
.REG10      ANOP  ,
&I1         SETA  &I1-1
            AIF   (&I1 EQ 0).REG11
            AIF   (&REG(&I1)).REG10
.REG11      ANOP  ,
&I2         SETA  &I1
&I4         SETA  8+(4*&I2)+&I5
            AIF   (&I2 GT 0).REG12
            AIF   (NOT &REG(16)).REG12
&I2         SETA  15
&I4         SETA  4+&I5
&REG(16)    SETB  0
            AIF   (NOT &REG(15)).REG12
&I2         SETA  14
&I4         SETA  0+&I5
&REG(15)    SETB  0
.REG12      ANOP  ,
            AIF   (NOT &STKAR).REG13
            AIF   (&I2 EQ 14).REG$$
     &P.AM &I2,&I3,64+&I4.(R14)    ARs
            AGO   .REG13
.REG$$      ANOP  ,
            AIF   (&I3 EQ 14).REG13
     &P.AM R15,&I3,64+4+&I4.(R14)  ARs
.REG13      ANOP  ,
            AIF   (&I2 NE &I3).REG14
     &P    &I2,&I4.(,R14)          A single GPR
            AGO   .REG15
.REG14      ANOP  ,
     &P.M  &I2,&I3,&I4.(R14)       Multiple GPRs
.REG15      ANOP  ,
            AIF   (&I1 GT 0).REG8
.REG16      ANOP  ,
            AIF   (NOT &REG(15) AND NOT &REG(16)).REG99
&I2         SETA  14
&I3         SETA  14
&I4         SETA  0+&I5
            AIF   (&REG(15) AND NOT &REG(16)).REG17
&I2         SETA  15
&I3         SETA  15
&I4         SETA  4+&I5
            AIF   (NOT &REG(15) AND &REG(16)).REG17
&I2         SETA  14
&I3         SETA  15
&I4         SETA  0+&I5
.REG17      ANOP  ,
            AIF   (NOT &STKAR OR NOT &REG(16)).REG18
     &P.AM R15,R15,64+&I4.(R14)    AR15
.REG18      ANOP  ,
            AIF   (&I2 NE &I3).REG19
     &P    &I2,&I4.(,R14)          A single GPR
            AGO   .REG99
.REG19      ANOP  ,
     &P.M  &I2,&I3,&I4.(R14)       Multiple GPRs
.REG99      ANOP  ,
            MEXIT ,
         MEND  ,
