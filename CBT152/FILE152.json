{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011344000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1058148, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE152.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE152.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x12\\x04'", "DS1TRBAL": "b'\\xcb\\x12'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x14\\x00\\t\\x01\\x15\\x00\\x0c\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  DISCLAIMER\n      These programs work for us but no warentee or guarentee is made\n      by me or American Greetings Corporation about their correct\n      operation.  Run them at your own risk.\n\n\n   MEMBER\n\n   $$DOC      This member\n   AGGETVLI   subroutine used in INLINE\n   AGTERM     subroutine used in INLINE\n   AMAZING    Produce a maze with one entrance and one exit\n              (source)\n   AMAZING2   Run the program, print on a printer that does not skip\n              over the perfs.\n   CALENDAR   Print a combined Julian and Gegorian calendar for any\n              year\n   F11UP      PPFA source, form defintion for 1 up printing\n   F12UP      PPFA source, form definition for rotated 2 up printing\n   INLINE     Cobol source for a program to copy pagedefs and formdefs\n              inline with the data for testing new page and form defs\n              Compiled with the NORES parameter with the old OS/VS COBOL\n              compiler\n   INLINER    Run time JCL for INLINE\n   JOVERBLD   The SAS job to create PSF type overlays\n   NCZ93205   An updated version of a PDS member read subroutine found\n              on the CBT tape, one bug corrected, extra parameter added\n              so the calling program can pass a DDNAME to read from\n   O$$DOC     Documentation on the two overlays\n   O11UP      Source for the PSF 1 up overlay\n   O12UP      Source for the PSF 2 up overlay\n   POSTERT    JCL to run Poster for non-laser printers\n   POSTERT2   Decompiled source for the POSTER program found on the CBT\n              tape, some bugs fixed, card input now allowed\n   POSTER2    JCL to print POSTER output on a SIEMENS/STC laser printer\n              which are compatible with IBM 3800-3/6 printers but you\n              can print perf to perf, but with some degradation\n   PSFSCAN    A series of SAS programs used to print and manipulate PSF\n              objects.  I have used them to make simple changes to\n              character sets, modify bar code fonts, produce rotated\n              fonts, produce our own grey bar pattern, and produce our\n              own simple overlays.\n              These have been designed around the 3800 type printer\n              there are differences with 3820/3835 fonts that these\n              programs probably will not handle.  Since we do not have\n              the other printers I could not modify and test the\n              programs.\n   PSFSCANA   SAS program to load a PSF character group into a SAS file\n   PSFSCANB   SAS program to take SAS data and build new PSF character\n              group, ie a C1xxxxx member\n   PSFSCANC   Delete a character from the SAS data set\n   PSFSCAND   Add a character to the SAS data set\n   PSFSCANE   Print the SAS file data and character raster pattern\n   PSFSCANF   Print info and the characters from the SAS data file\n   PSFSCANH   Load a code page into a SAS file, ie T1xxxxx member\n   PSFSCANI   Print the code page from the SAS file\n   PSFSCANJ   Delete a character from the SAS code page file\n   PSFSCANK   Add a character to the SAS code page file\n   PSFSCANL   Build a new code page from the SAS file\n   PSFSCANM   Take 3800-3 \"down\" font and change it into an \"up\" font\n              ie take a C2xxxxx member and change into a C4xxxxx\n   PSFSCANN   Print an up raster pattern from the SAS file\n   PSFSCANO   Build the \"up\" character set from the SAS file\n   PSFSCANP   Compare a SAS character set and SAS code page\n   PSFSCANQ   Build an overlay using SAS and source commands\n              A sample overlay testing out all of the commands\n   PSFSCAN1   Read a group of X1xxxx font members, sort and print data\n   PSFSCAN4   Print info on one T1xxxxx member, a code page print\n   PSFSCAN5   Print info on 1 C1xxxxx member, a character group\n   PSFSCAN6   Print info on a group of character groups\n   PSFSCAN7   Print a 1 line summary on a single character groups\n   PSFSCAN8   Print a 1 page summary on a group of character groups\n   PSFSCAN9   Print info and the raster pattern of one character group\n   P12UP      PPFA source for our 2 up page def\n   P18B2      PPFA source for our 1 up page def\n   RFIXMOVE   Subroutine used in INLINER\n   RPRINT02   Subroutine used in INLINER\n   RPRINT07   Subroutine used in INLINER\n   RPRINT09   Subroutine used in INLINER\n   T$$DOC     doc on our code pages\n   TIMETAKE   Source for a program analyser program.  The program\n              loads and runs a target program.  It sets a timer which\n              is used to sample where a program is (PSW instruction)\n              and write the info out to a file.  This can be used to\n              tell you where your program is spending the most time.\n              Works on 24 or 31 bit programs.\n              There are much better programs on the market.\n              It is best if all of the subroutines are linked as part\n              of the load module.\n   TIMEHIST   COBOL program used to print a histogram of the data\n              gathered by TIMETAKE.  This is an old OS/VS Cobol\n              program.\n   TIMHISTJ   Sample JCL for running TIMEHIST\n   TIMTAKEJ   Sample JCL for running TIMETAKE\n   X$$DOC     Doc on our Character sets\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AGGETVLI": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         PUNCH ' MODE AMODE(ANY),RMODE(24)'                             00001**4\nAGGETVLI START                                                          00002\n* UPDATED 7/89 BY H. ZBIEGIEN TO MAKE 31 BIT COMPATIBLE                 00003**2\n* CHANGED JANUARY, 1990 BY H. ZBIEGIEN                                  00004**3\n*   PUT PUNCH CARD IN TO DOCUMENT THE LOAD MODULE MODE                  00005**3\nAGGETVLI  AMODE ANY                                                     00006**2\nAGGETVLI  RMODE ANY                                                     00007**2\n         USING *,15          SET BASE                                   00008\n         STM   2,3,SAVE      SAVE REGISTERS                             00009\n         LM    2,3,0(1)      GET ADD OF REC, ADD OF RESULT              00010\n         S     2,=F'4'       GET TO VLI                                 00011\n         MVC   0(2,3),0(2)   MOVE VLI, 2 BYTES                          00012\n         LM    2,3,SAVE      RESTORE REGISTERS                          00013\n         SR    15,15         SET RETURN CODE TO ZERO                    00014\n         BR    14            RETURN                                     00015\n         DC    C'AGGETVLI&SYSDATE&SYSTIME'                              00016**2\nSAVE     DC    2F'0'         SAVE AREA                                  00017\n*                                                                       00018\n*     GET  THE VLI AND RETURN IT TO COBOL                               00019\n*                                                                       00020\n*     SAMPLE COBOL CALL:                                                00021\n*                                                                       00022\n*          CALL 'AGGETVLI' USING VAR-REC, WS-RESULT.                    00023\n*                                                                       00024\n*          WS-RESULT         PIC S9(4) COMP SYNC.                       00025\n*                                                                       00026\n         END                                                            00027\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AGTERM": {"ttr": 521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE ' AG ABEND NO DUMP-USER 777'                             00001\n* UPDATED 7/89 BY H. ZBIEGIEN TO MAKE 31 BIT COMPATIBLE                 00002**2\n         PUNCH ' MODE AMODE(ANY),RMODE(24)'                             00003**3\n* CHANGED JANUARY, 1990 BY H. ZBIEGIEN                                  00004**3\n*   PUT PUNCH CARD IN TO DOCUMENT THE LOAD MODULE MODE                  00005**3\n* CAUSE THE STEP TO ABEND, WITHOUT A DUMP                               00006**2\nAGTERM   START 0                                                        00007\nAGTERM   AMODE ANY                                                      00008**2\nAGTERM   RMODE ANY                                                      00009**2\n         ABEND 777,,STEP                                                00010**2\n         DC    C'AGTERM&SYSDATE&SYSTIME'                                00011**2\n*                                                                       00012**2\n*   COBOL CALL                                                          00013**2\n*                                                                       00014**2\n*   CALL 'AGTERM'                                                       00015**2\n*                                                                       00016**2\n         END   AGTERM                                                   00017\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMAZING": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$PRT JOB ,ZBIEGIEN,MSGCLASS=W,TIME=(,3),CLASS=Q\n/*JOBPARM ROOM=3426\n//A EXEC PGM=AMAZEING,PARM=43123438295\n//*                        WWLLLRRRRRRS\n//*    WW   A 2 DIGIT WIDTH 01-43\n//*    LLL  A 3 DIGIT LENGTH 001-999\n//*RRRRRR A 6 DIGIT RANDOM NUMBER MAKE DIFFERENT FOR DIFF MAZE\n//*    S  A NONBLANK CHARACTER IF YOU WANT THE SOLUTION PRINTED\n//*\n//STEPLIB DD DSN=HPZ.TESTLIB,DISP=SHR\n//PRINTER DD SYSOUT=W,DCB=(LRECL=133,RECFM=FBA,BLKSIZE=1729)\n//SYSUDUMP DD SYSOUT=W\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AMAZING2": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$FOR JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//A EXEC AGASMCL,LIBRARY='HPZ.TESTLIB(AMAZEING)'\n//ASM.SYSIN DD *\nAMAZEING START 0\n* PROGRAM TO PRINT OUT A MAZE\n         SAVE  (14,12),,AMAZEING&SYSDATE.&SYSTIME\n         LR    R12,R15                 R12 BASE\n         USING AMAZEING,R12\n         ST    R13,SAVEAREA+4          SET UP DAVE AREA\n         LR    R2,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R2)\n         USING SAVEAREA,R13\n         DROP  R12\n         B     CONT\nSAVEAREA DC    18F'0'\nBASES    DC    A(SAVEAREA+4096)\n         DC    A(SAVEAREA+8192)\n         DC    A(SAVEAREA+12288)\nCONT     LM    R10,R12,BASES           SET BASES\n         USING SAVEAREA+4096,R10,R11,R12\n*     CHECK PARM VALUES\n         L     R1,0(R1)                GET ADDR OF PARMS\n         LH    R2,0(R1)                GET LENGTH\n         CH    R2,=H'11'               CHECK LENGTH\n         BE    PARMOK\n         CH    R2,=H'12'               CHECK LENGTH\n         BNE   PARMERR\n         MVI   SOLUTSW,C'Y'            SET SOLUTION SWITCH\nPARMOK   LR    R3,R1                   SAVE R1\n         TRT   2(11,R3),NUMERICT       CHECK FOR NUMERICS\n         BNE   PARMERR\n         LR    R1,R3                   RESTORE R1\n         PACK  PACKWORK,2(2,R1)        PACK WIDTH\n         CVB   R2,PACKWORK             AND CHECK\n         C     R2,=F'0'                WIDTH GTR 0\n         BE    PARMERR\n         C     R2,=F'43'               WIDTH LE 43\n         BH    PARMERR\n         ST    R2,PARMW\n         ST    R2,SEINIT+4\n         LA    R2,1(R2)\n         ST    R2,WIDTH\n         LA    R2,1(R2)\n         ST    R2,ROWLNGTH\n         PACK  PACKWORK,4(3,R1)        PACK LENGTH\n         CVB   R2,PACKWORK             AND CHECK\n         C     R2,=F'0'                LENGTH GTR 0\n         BE    PARMERR\n         ST    R2,PARML\n         LA    R2,1(R2)\n         ST    R2,LENGTH\n         PACK  PACKWORK,7(6,R1)        PACK RANDOM START\n         CVB   R2,PACKWORK\n         ST    R2,PARMR\n         L     R2,ROWLNGTH\n         MH    R2,LENGTH+2             CALCULATE BOTTOM ROW OFFSET\n         ST    R2,BOTROW\n         OPEN  (PRINTER,(OUTPUT))\n*     INITIALIZE WORK TABLES\n         L     R1,ROWLNGTH\n         ST    R1,DOWN\n         LCR   R1,R1\n         ST    R1,UP\n         L     R4,LENGTH\n         LA    R4,1(R4)\n         L     R3,WIDTH\n         LA    R3,1(R3)\n         MR    R2,R4                   WIDTH+2* LENGTH+2 IN R3\n         LA    R2,TABLEST\n         SR    R4,R4\n         SR    R5,R5\n         LR    R6,R3                   SAVE LENGTH\n         MVCL  R2,R4                   ZERO TABLE\n         LA    R2,TABLEST+1\n         AR    R2,R6\n         ST    R2,SETABLE              START END TABLE ADDRESS\n         L     R3,LENGTH\nLOOP     MVC   0(8,R2),SEINIT          MOVE INITIAL VALUE\n         LA    R2,8(R2)\n         BCT   R3,LOOP                 LOOP\n*     BUILD GUARD BLOCKS  SIDES FIRST\n         L     R2,LENGTH               TIMES\n         LA    R2,1(R2)\n         LA    R3,TABLEST              LEFT SIDE\n         LR    R4,R3\n         L     R5,WIDTH\n         AR    R4,R5                   RIGHT SIDE\n         LA    R5,1(R5)                SIZE OF ROW\nLOOPBG1  MVI   0(R3),X'F8'             SET LEFT\n         MVI   0(R4),X'F8'             SET RIGHT\n         AR    R3,R5\n         AR    R4,R5\n         BCT   R2,LOOPBG1\n*     NOW  DO TOP AND BOTTOM\n         LR    R3,R5\n*                                      R5 HAS COUNT\n         M     R2,LENGTH\n         LA    R2,TABLEST\n         AR    R3,R2\nLOOPBG2  MVI   0(R2),X'F0'             SET TOP\n         MVI   0(R3),X'F0'             SET BOTTOM\n         LA    R2,1(R2)\n         LA    R3,1(R3)\n         BCT   R5,LOOPBG2\n*     GET STARTING POSITION, SAVE IT AS CHAIN ZERO\n         BAL   R14,RANDOM              GET RANDOM # IN R1\n         D     R0,PARMW                MOD W\n         LR    R1,R0\n         LA    R1,1(R1)                VALUE 1-W\n         ST    R1,CHAINZ+4\n         ST    R1,COL\n         LA    R2,TABLEST\n         LR    TBLS,R2\n         AR    R2,R1\n         OI    0(R2),X'04'             MARK DOWN\n         A     R2,ROWLNGTH\n         OI    0(R2),X'10'             MARK CHAIN 4\n         MVC   ROW,ROWLNGTH\n         L     R2,ROWLNGTH             SET UP TOP GUARD BOXES\n         LR    R1,TBLS\n         LR    R3,TBLS\n         A     R3,COL\nLOOPTOP  CR    R1,R3\n         BH    ROFTOP\n         BE    NEXTTOP\nLOFTOP   OI    0(R1),X'01'             MARK RIGHT MOVE\n         B     NEXTTOP\nROFTOP   OI    0(R1),X'02'             MARK LEFT MOVE\nNEXTTOP  LA    R1,1(R1)\n         BCT   R2,LOOPTOP\n*     START MAKING THE SOLUTION, CHAIN 1\n         MVC   PREV(8),CHAINZ\nCHAINONE BAL   R14,PICKMOVE\n         BAL   R14,DOMOVE\n         CLC   BOTROW,ROW              AT BOTTOM ?\n         BNE   CHAINONE                NO\n*    SET NOPS TO BR\n         OI    RULE2+1,X'F0'\n         OI    RULE3+1,X'F0'\n         OI    RULE4+1,X'F0'\n         OI    RULE5+1,X'F0'\n*     BUILD RANDOM CHAINS OFF OF MAIN CHAIN\n         LA    R1,16\n         ST    R1,LOOPCNT\nFILLOOP  L     R7,CHAINZ               SET UP CHAINP\n         A     R7,CHAINZ+4\n         AR    R7,TBLS\n         ST    R7,CHAINST\n         SR    R7,R7                   SET UP CHAINY\n         STC   R7,CHAINST+8\n         LA    R7,CHAINST\n         BAL   R14,FBCHAIN             FIND AND BUILD CHAIN\n         L     R1,LOOPCNT\n         LA    R1,16(R1)\n         ST    R1,LOOPCNT\n         C     R1,=F'224'              14*16\n         BNE   FILLOOP\n*     NOW FILL IN ALL THE UNUSED SQUARES\n         L     R0,PARMW\n         MH    R0,PARML+2\n         ST    R0,LXW\nFREECK   CLC   COUNT,LXW               SEE IF USE ALL SQUARES\n         BE    PRINTOUT\n         L     R5,SETABLE\n         SR    R6,R6                   INITIALIZE\n         S     R5,=F'8'\nROWCK    A     R6,ROWLNGTH             UP\n         A     R5,=F'8'\n         C     R6,BOTROW               SEE IF DONE\n         BE    FREECK\n         CLC   0(4,R5),=X'FFFFFFFF'    SEE IF ROW ALL USED\n         BE    ROWCK\n*     START SEARCHING A ROW\n         MVC   SAVEE,4(R5)             SAVE END\n         L     R4,0(R5)                GET START\n         MVC   0(8,R5),=X'FFFFFFFFFFFFFFFF'\nCOLCK    BAL   R14,CONNECT             SEE IF UNUSED AND CONNECT\n         LA    R4,1(R4)                UP COL\n         C     R4,SAVEE                END COL ?\n         BH    ROWCK                   YES\n         B     COLCK                   NO\n*     PRINT OUT THE MAZE\nPRINTOUT LA    R2,TABLEST\n         BAL   R14,PRINTBOT            PRINT BOTTOM OF GUARD BLOCK\n         L     R7,PARML                LENGTH\nPLOOP    A     R2,ROWLNGTH\n         BAL   R14,PRINTMID            PRINT MIDDLE\n         BAL   R14,PRINTBOT            PRINT BOTTOM\n         BCT   R7,PLOOP\n         CLOSE (PRINTER)               CLOSE\n         L     R13,4(R13)              GET RETURN ADDRESS\n         RETURN (14,12),RC=0           STOP RUN\nPARMERR  L     R13,4(R13)              GET RETURN ADDRESS\n         RETURN (14,12),RC=4           STOP RUN\n*\n*     START OF SUBROUTINES\n*\nRANDOM   L     R1,RNO                  GET PREVIOUS NUMBER\n         SR    R0,R0\n         M     R0,=F'65539'            MAGIC NUMBER1\n         LTR   R1,R1\n         BNM   L200\n         A     R1,=F'2147483647'       MAGIC NUMBER 2\n         A     R1,=F'1'\nL200     ST    R1,RNO                  SAVE NUMBER\n         SR    R0,R0\n         D     R0,=F'21474837'\n         SR    R0,R0\n         BR    R14                     RETURN\n*     GENERATE RANDOM NUMBER\n*     PICK A MOVE, SET UP DIRECTION, AND NEXT ROW, COL\nPICKMOVE ST    R14,PMR14               SAVE REG\nTRYOTHER BAL   R14,RANDOM              GET RANDOM NUMBER\n         D     R0,=F'4'                0-3,UDLR\n         LR    R1,R0\n         SLL   R1,3                    0,8,16,24\n         LR    DIRR,R1                 SAVE\n         LR    R3,DIRR                 TO MOVE MOVED IN SAME DIRRECT.\n         SRL   R3,3                    0,1,2,3,UDLR\n         LA    R3,BITMOVES(R3)\n         MVC   BITDIR,0(R3)            MOVE BIT DIRECTION\nRULE1    L     R2,ROW                  SEE IF NEXT POSITION\n         A     R2,DIRECTTB(DIRR)       IS USED\n         ST    R2,NEXTROW              SAVE NEXT ROW\n         L     R1,COL\n         A     R1,DIRECTTB+4(DIRR)\n         ST    R1,NEXTCOL              SAVE NEXT COL\n         AR    R1,R2\n         AR    R1,TBLS\n         TM    0(R1),X'F0'             CHECK POSITION\n         BM    TRYOTHER                ALREADY USED\nRULE2    NOP   RULE2A                  CHECK FOR BOTTOM\n         CLC   NEXTROW,BOTROW          OR GUARD BLOCKS\n         BE    PICKED\nRULE2A   TM    0(R1),X'F0'             GUARD BLOCK ID\n         BO    TRYOTHER                GUARD BLOCK\nRULE3    NOP   RULE4                   CHECK IF NO MOVE OUT\n         LR    R3,R1                   GET NEW POSITION\n         A     R3,UP                   TRY UP\n         TM    0(R3),X'F0'\n         BZ    RULE4                   CAN MOVE OUT UP\n         LR    R3,R1                   GET NEW POSITION\n         A     R3,DOWN                 TRY DOWN\n         TM    0(R3),X'F0'\n         BZ    RULE4                   CAN MOVE DOWN\n         LR    R3,R1                   GET NEW POSITION\n         A     R3,LEFT+4               TRY LEFT\n         TM    0(R3),X'F0'\n         BZ    RULE4                   CAN MOVE LEFT\n         LR    R3,R1                   GET NEW POSITION\n         A     R3,RIGHT+4              TRY RIGHT\n         TM    0(R3),X'F0'\n         BZ    RULE4                   CAN MOVE RIGHT\n         B     TRYOTHER\nRULE4    NOP   RULE5                   SEE IF ADJACENT,PERPENDICULAR\n         LR    R3,DIRR                 0,8,16,24,UDLR\n         SRL   R3,4                    0,0,1,1\n         LA    R4,1\n         SR    R4,R3                   1,1,0,0\n         SLL   R4,4                    16,16,0,0\n         L     R2,ROW                  CURR ROW\n         AR    R2,TBLS\n         A     R2,COL                  CURRENT POS\n         LR    R3,R2                   COPY CURR POSITION\n         A     R3,DIRECTTB(R4)         TRY UP OR LEFT\n         A     R3,DIRECTTB+4(R4)\n         IC    R5,BITDIR\n         EX    R5,TMM\n         BO    TRYOTHER                MOVE IN SAME DIRECTION\n         LR    R3,R2                   COPY CURR POSITION\n         A     R3,DIRECTTB+8(R4)       TRY DOWN OF RIGHT\n         A     R3,DIRECTTB+12(R4)\n         EX    R5,TMM\n         BO    TRYOTHER                MOVE IN SAME DIRECTION\nRULE5    NOP   PICKED                  ADJACENT TO NEW MOVE,\n*                                      PERPENDICULAR TO MOVE, IS THERE\n*                                      A MOVE IN THE SAME DIRECTION\n         LR    R2,TBLS                 GET NEW POSITION\n         A     R2,NEXTROW\n         A     R2,NEXTCOL\n*                                      R4 AND R5 STILL SET UP\n         LR    R3,R2                   COPY NEW POSITION\n         A     R3,DIRECTTB(R4)         TRY  UP OR LEFT\n         A     R3,DIRECTTB+4(R4)\n         EX    R5,TMM\n         BO    TRYOTHER\n         LR    R3,R2                   COPY NEW POSITION\n         A     R3,DIRECTTB+8(R4)       TRY DOWN OR RIGHT\n         A     R3,DIRECTTB+12(R4)\n         EX    R5,TMM\n         BO    TRYOTHER\n         L     R2,ROW                  BACK DOWN, DO\n         A     R2,COL                  REVERSE OF NEXTMOVE\n         SLL   R2,1\n         S     R2,NEXTROW\n         S     R2,NEXTCOL\n         AR    R2,TBLS\n         LR    R3,R2                   COPY NEW POSITION\n         A     R3,DIRECTTB(R4)         TRY  UP OR LEFT\n         A     R3,DIRECTTB+4(R4)\n         TM    0(R3),X'F0'             BYPASS WALLS\n         BO    RULE5X\n         EX    R5,TMM\n         BZ    RULE5X\n         BAL   R14,RULE5A\nRULE5X   LR    R3,R2                   COPY NEW POSITION\n         A     R3,DIRECTTB+8(R4)       TRY DOWN OR RIGHT\n         A     R3,DIRECTTB+12(R4)\n         TM    0(R3),X'F0'             BYPASS WALLS\n         BO    RULE6\n         EX    R5,TMM\n         BZ    RULE6\n         BAL   R14,RULE5A\n         B     RULE6\nRULE5A   MVC   WORKB,0(R3)             SEE IF THEY ARE CONNECTED\n         LR    R0,R2\n         LR    R2,R3\n         NI    WORKB,X'0F'\n         TR    WORKB,DIROFFTB\n         SR    R1,R1\n         IC    R1,WORKB\n         A     R2,DIRECTTB(R1)\n         A     R2,DIRECTTB+4(R1)\n         MVC   WORKB,0(R2)\n         NI    WORKB,X'0F'\n         TR    WORKB,DIROFFTB\n         SR    R1,R1\n         IC    R1,WORKB\n         A     R2,DIRECTTB(R1)\n         A     R2,DIRECTTB+4(R1)\n         S     R2,COL\n         SR    R2,TBLS\n         C     R2,ROW\n         BNE   TRYOTHER\n         LR    R2,R0\n         BR    R14\nRULE6    L     R2,PREV                 GET PREVIOUS DIRECTION\n         A     R2,PREV+4\n         AR    R2,TBLS\n         MVC   PD,0(R2)\n         NI    PD,X'0F'\n         MVC   KK,PD\n         OC    KK,BITDIR\n         CLI   KK,X'0A'\n         BE    RULE5Z\n         CLI   KK,X'09'\n         BE    RULE5Z\n         CLI   KK,X'06'\n         BE    RULE5Z\n         CLI   KK,X'05'\n         BE    RULE5Z\n         B     PICKED\nRULE5Z   DS    0H\n         OI    PD,X'10'\n         MVC   KL,BITDIR\n         OI    KL,X'10'\n         L     R1,NEXTROW\n         A     R1,NEXTCOL\n         L     R2,ROW\n         A     R2,COL\n         SR    R1,R2\n         SLL   R2,1\n         S     R2,PREV\n         S     R2,PREV+4\n         SR    R2,R1\n         AR    R2,TBLS\n         MVC   WK,0(R2)\n         CLC   WK,PD\n         BNE   PICKED\n         SR    R2,R1\n         MVC   WK,0(R2)\n         CLC   WK,KL\n         BE    TRYOTHER\nPICKED   L     R14,PMR14               RETURN\n         BR    R14\n*     MAKE THE MOVE\nDOMOVE   L     R1,ROW\n         A     R1,COL\n         AR    R1,TBLS\n         OC    0(1,R1),BITDIR          MARK MOVE\n         L     R1,NEXTROW\n         A     R1,NEXTCOL\n         AR    R1,TBLS\n         OC    0(1,R1),LOOPCNT+3       MARK CHAIN\n         MVC   PREV(8),ROW\n         MVC   ROW(8),NEXTROW          SET ROW AND COL\n         L     R1,COUNT                UP COUNT OF USED\n         LA    R1,1(R1)\n         ST    R1,COUNT\n         BR    R14                     RETURN\n*    RECURSIVE SUBROUTINE FIND AND BUILD CHAIN\nFBCHAIN  DS    0H                      GO DOWN CHAIN Y LOOKING FOR\n         USING CHAINTBL,R7             CHAIN Y+1=X\n         SR    R1,R1                   GET Y+1\n         ST    R1,CHAINNP\n         IC    R1,CHAINY\n         LA    R1,16(R1)\n         STC   R1,CHAINY+1\n         ST    R14,CHAINRET            SAVE RETURN ADDRESS\n         L     R1,CHAINP               GET POSITION\nNEXTPOS  LA    R2,16                   GET INITIAL DIRECTION\n         STC   R2,CHAINDIR\n         IC    R3,0(R1)\n         N     R3,=X'0000000F'         GET DIRECTIONS\n         STC   R3,CHAINWK\n         LA    R4,4                    BCT COUNTER\nFBLOOPD  SR    R2,R2\n         IC    R2,CHAINDIR             DIRECTION LOOP\n         SRL   R2,1                    SHIFT DIRECTION 8,4,2,1,UDLR\n         STC   R2,CHAINDIR\n         EX    R2,DCTM                 TM DIR AGAINST WK\n         BZ    NEXTDIR                 TRY NEXT DIRECTION\n*     THERE IS A MOVE\n         STC   R2,WORKB                8,4,2,1,UDLR\n         TR    WORKB,DIROFFTB          0,8,16,24\n         SR    R2,R2\n         IC    R2,WORKB\n         LR    R3,R1                   GET CURR POS\n         A     R3,DIRECTTB(R2)         ADD TO GET NEW POS\n         A     R3,DIRECTTB+4(R2)\n         MVC   WORKB,0(R3)             GET POS IN THAT DIRECTION\n         NI    WORKB,X'F0'             GET CHAIN # ONLY\n         CLC   WORKB,CHAINY            SEE IF NEXT FOR THIS CHAIN\n         BNE   CHECKY1                 YES\n         ST    R3,CHAINNP              SAVE PT\nCHECKY1  CLC   WORKB,CHAINY1           = CHAIN Y+1 ?\n         BNE   NEXTDIR\n         CLC   WORKB,LOOPCNT+3         IS COUNT EQU Y+1\n         BE    FOUNDCHN                FOUND CHAIN\n*     NOW      PUSH AND RECURSE PUSH\n         IC    R2,CHAINY1\n         ST    R4,CHAINDC\n         LA    R7,20(R7)               RECURSE\n         ST    R3,CHAINP\n         STC   R2,CHAINY\n         BAL   R14,FBCHAIN\n         L     R1,CHAINP               RESTORE INFO\n         L     R4,CHAINDC\nNEXTDIR  BCT   R4,FBLOOPD\n*     GO TO NEXT POSITION IN CHAIN Y\n         L     R1,CHAINNP\n         ST    R1,CHAINP\n         MVC   CHAINNP,=F'0'\n*                                      SEE IF END OF CHAIN\n         LTR   R1,R1\n         BZ    CHAINEND\n         IC    R2,0(R1)\n         N     R2,=X'0000000F'         GET DIRECTION ONLY\n         LTR   R2,R2\n         BNZ   NEXTPOS                 MOVE MOVES\nFBEXIT   B     CHAINEND                NOMORE MOVES\nFOUNDCHN BAL   R14,RANDOM              GET A RANDOM NO 1-5\n         D     R0,=F'5'                AND TRAVEL TO END\n         LR    R1,R0\n         LA    R1,1(R1)                VALUE IN R4\n         LR    R4,R1\n*     R3  HAS NEXT POSITION AND THERE IS ONLY ONE DIRECTION ON THIS\n*     SUB CHAIN\n*     GET NEXT ON THIS CHAIN\nGODOWN   SR    R2,R2                   GET DIRECTION\n         IC    R2,0(R3)                8,4,2,1,U,D,L,R\n         N     R2,=X'0000000F'\n         STC   R2,WORKB\nGODOWN2  TR    WORKB,DIROFFTB          GET OFFSET INTO TABLE\n         SR    R2,R2\n         IC    R2,WORKB\n         LR    R1,R3                   NEXT POSITION\n         A     R1,DIRECTTB(R2)         CALCULATE NEW POSITION\n         A     R1,DIRECTTB+4(R2)\n*     R1 HAS THE NEXT MOVE\n         BCT   R4,CKEND                COUNT DOWN\n         B     BUILDCHN\nCKEND    IC    R2,0(R3)                SEE IF AT END\n         STC   R2,CHKMV\n         LR    R3,R1\n         NI    CHKMV,X'0F'             DIRECTION ONLY\n         CLI   CHKMV,X'00'\n         BE    CHAINEND                YES\n         B     GODOWN                  NO\nBUILDCHN ST    R1,NEXTMSV              SAVE NEXT MOVE\n         IC    R2,0(R3)\n         STC   R2,CHKMV\n         NI    CHKMV,X'0F'             DIRECTION ONLY\n         SR    R2,R2                   GET ROW AND COL OF THIS POS\n         SR    R3,TBLS\n         D     R2,ROWLNGTH\n         MH    R3,ROWLNGTH+2\n         ST    R3,ROW\n         ST    R2,COL\n         C     R3,BOTROW\n         BE    CHAINEND\n         L     R2,LOOPCNT\n         LA    R2,16(R2)\n         ST    R2,LOOPCNT\n         BAL   R14,MAKCHAIN            MAKE A CHAIN\n         L     R2,LOOPCNT\n         S     R2,=F'16'\n         ST    R2,LOOPCNT\n         L     R3,NEXTMSV\n         CLI   CHKMV,X'00'             SEE IF AT END OF CHAIN\n         BE    CHAINEND                NO\n         MVC   CHKMV,0(R3)\n         NI    CHKMV,X'0F'\n         CLI   CHKMV,X'00'\n         BE    CHAINEND\n         MVC   WORKB,CHKMV             GET MOVE\n         BAL   R14,RANDOM              CONTINUE,NEW COUNT DOWN\n         D     R0,=F'5'\n         LR    R1,R0\n         LA    R4,1(R1)\n         B     GODOWN2\nCHAINEND L     R14,CHAINRET            RETURN\n         S     R7,=F'20'               POP\n         BR    R14\n         DROP  R7\n*            MAKE A CHAIN\nMAKCHAIN ST    R14,MAKSVR14            SAVE R14\n*     CHECK FOR POSIBLE MOVE\nMAKLOOP  L     R3,ROW                  GET CURR POS\n         A     R3,COL\n         AR    R3,TBLS\n         LR    R2,R3                   COPY CURR POS\n         A     R2,UP                   TRY UP\n         TM    0(R2),X'F0'\n         BZ    OK\n         LR    R2,R3                   COPY CURR POS\n         A     R2,DOWN                 TRY DOWN\n         TM    0(R2),X'F0'\n         BZ    OK\n         LR    R2,R3                   COPY CURR POS\n         A     R2,LEFT+4               TRY LEFT\n         TM    0(R2),X'F0'\n         BZ    OK\n         LR    R2,R3                   COPY CURR POS\n         A     R2,RIGHT+4              TRY RIGHT\n         TM    0(R2),X'F0'\n         BZ    OK\n         L     R14,MAKSVR14\n         BR    R14                     RETURN\nOK       BAL   R14,PICKMOVE            PICK A MOVE\n         BAL   R14,DOMOVE              MARK IT\n         B     MAKLOOP\n*     CHECK IF SQUARE UNUSED, CONNECT IF POSSIBLE, MAINTAIN NEW\n*     START AND END VALUES\n*     R4=COL, R5=SE-TABLE, R6=ROW\nCONNECT  ST    R6,SAVER                SAVE REG\n         LR    R2,TBLS                 START OF TABLE\n         AR    R2,R6                   ADD ROW OFFSET\n         AR    R2,R4                   ADD COL OFFSET\n         TM    0(R2),X'F0'             SEE IF USED\n         BCR   5,R14                   IF ONES OR MIXED\n*     POSITON IS UNUSED, LOOK FOR AN ADJACENT USED POSITION\n         LR    R3,R14                  SAVE RETURN\n         BAL   R14,RANDOM              GET RANDOM #\n         LR    R14,R3\n         D     R0,=F'4'\n         LR    R1,R0\n         LA    R1,BITMOVES(R1)\n         SR    R3,R3\n         LR    R6,R3\n         ST    R3,COUNT4\nCKDIR    MVC   WORKB,0(R1)             8,4,2,1\n         TR    WORKB,DIROFFTB          NOW IS OFFSET TO TABLE\n         IC    R6,WORKB\n         LR    R3,R2                   GET CURR POS\n         A     R3,DIRECTTB(R6)\n         A     R3,DIRECTTB+4(R6)\n         TM    0(R3),X'F0'             SEE IF WALL\n         BO    NEXTD                   NEXT DIRECTION\n         BZ    NEXTD                   NOT USED ALSO\n*     FOUND A USED ONE,CONNECT UP\n         OI    0(R2),X'E0'             MARK AS CHAIN 14\n         MVC   WORKB,0(R1)\n         TR    WORKB,REVERSED          REVERSE DIRECTION\n         OC    0(1,R3),WORKB           PUT IN MOVE\n         L     R3,COUNT                INCREMENT USED COUNT\n         LA    R3,1(R3)\n         ST    R3,COUNT\n         B     GOBACK                  RETURN\nNEXTD    L     R3,COUNT4\n         LA    R3,1(R3)\n         ST    R3,COUNT4\n         C     R3,=F'4'\n         BE    UNUSED                  CHECKED ALL 4 DIRECTIONS\n         C     R1,=A(BITMOVES+3)       SEE IF AT END\n         BNE   UP1\n         LA    R1,BITMOVES\n         B     CKDIR\nUP1      LA    R1,1(R1)\n         B     CKDIR\nUNUSED   CLC   0(4,R5),=X'FFFFFFFF'    SEE IF UNUSED AND S= -1\n         BNE   UUECK                   NO\n         ST    R4,0(R5)                YES\nUUECK    ST    R4,4(R5)                SAVE END\nGOBACK   L     R6,SAVER                RESTORE REG\n         BR    R14                     RETURN\n*     PRINT BOTTOM LINE\nPRINTBOT ST    R14,SAVEPR14\n         L     R6,PARMW\n         LR    R3,R2                   FIRST COL POSITION\n         LA    R5,PLINE-2\nNEXTB    LA    R3,1(R3)\n         LA    R5,3(R5)\n         MVC   0(3,R5),=C'=--'         INITIALIZE\n         TM    0(R3),X'04'             IF MOVE DOWN\n         BZ    PTU\n         MVC   1(2,R5),=C'  '          YES\n         B     PBOTCK\nPTU      LR    R4,R3                   ROW\n         A     R4,ROWLNGTH                 +1\n         TM    0(R4),X'08'             IF MOVE UP\n         BZ    PBOTCK                  NO\n         MVC   1(2,R5),=C'  '          YES\nPBOTCK   BCT   R6,NEXTB\n         MVI   3(R5),C'='\n         PUT   PRINTER,PLINE           PRINT\n         MVI   PLINE,C' '              CLEAR LINE\n         MVC   PLINE+1(132),PLINE\n         L     R14,SAVEPR14\n         BR    R14                     RETURN\n*     PRINT MIDDLE LINE\nPRINTMID ST    R14,SAVEPR14\n         L     R6,PARMW\n         LR    R3,R2                   FIRST COL POS\n         LA    R5,PLINE-2\nNEXTM    LA    R3,1(R3)\n         LA    R5,3(R5)\n         MVC   0(3,R5),=C'I  '         INITIALIZE\n         TM    0(R3),X'02'             IF MOVE LEFT\n         BZ    PTR                     NO\n         MVI   0(R5),X'40'             YES\n         B     PMIDCK\nPTR      LR    R4,R3                   COL\n         S     R4,=F'1'                   -1\n         TM    0(R4),X'01'             IF MOVE RIGHT\n         BZ    PMIDCK                  NO\n         MVI   0(R5),X'40'             YES\nPMIDCK   CLI   SOLUTSW,C'Y'            SEE IF WE WANT THE SOLUTION\n         BNE   PMIDLOOP                NO\n         SR    R4,R4\n         IC    R4,0(R3)                GET ENTRY\n         N     R4,=X'000000F0'         ZERO OUT ALL BUT CHAIN COUNT\n         C     R4,=X'00000010'         SEE IF CHAIN ONE\n         BNE   PMIDLOOP                NO\n         MVI   1(R5),C'*'              MARK SOLUTION\nPMIDLOOP BCT   R6,NEXTM\n         MVI   3(R5),C'I'\n         PUT   PRINTER,PLINE           PRINT\n         MVI   PLINE,C' '              CLEAR LINE\n         MVC   PLINE+1(132),PLINE\n         L     R14,SAVEPR14\n         BR    R14                     RETURN\n*     WORK AREAS\n         DS    D\nPACKWORK DC    PL8'0'\nSOLUTSW  DC    C' '                    SOLUTION SWITCH\nPARMW    DC    F'0'                    PARM WIDTH\nPARML    DC    F'0'                    PARM LENGTH\nPARMR    DC    F'0'                    PARM RANDOM NUMBER\nRNO      EQU   PARMR                   RANDOM NUMBER\nWIDTH    DC    F'0'                    WIDTH+1,RELATIVE ZERO\nLENGTH   DC    F'0'                    LENGTH+1,RELATIVE ZERO\nPREV     DC    F'0',F'0'\nPD       DC    X'00'                   PREVIOUS DIRECTION\nWK       DC    X'00'                   WORK\nKK       DC    X'00'                   WORK\nKL       DC    X'00'                   WORK\nSETABLE  DC    A(0)                    START END TABLE\nSEINIT   DC    F'1'                    SE TABLE INITIAL VALUES 0\n         DC    F'0'                    WIDTH  1-W\nCHAINZ   DC    F'0'                    CHAIN ZERO ROW\n         DC    F'0'                               COLUMN\nROWLNGTH DC    F'0'                    W+2\nROW      DC    F'0'                    CURR ROW\nCOL      DC    F'0'                    CURR COL\nBOTROW   DC    F'0'                    REL TO TBLST\nDIRECTTB DS    0F                      DIRECTION TABLE\nUP       DC    F'-1',F'0'\nDOWN     DC    F'1',F'0'\nLEFT     DC    F'0',F'-1'\nRIGHT    DC    F'0',F'1'\nNEXTROW  DC    F'0'\nNEXTCOL  DC    F'0'\nBITMOVES DC    X'08040201'             UP,DOWN,LEFT,RIGHT\nBITDIR   DC    X'00'                   DIRECTION IN BIT FORMAT\nPMR14    DC    A(0)\nTMM      TM    0(R3),X'00'\nLOOPCNT  DC    F'16'                   LOOP COUNT 1 TO 14,CHAIN\n*        DS    0H\nDCTM     TM    11(R7),X'00'            CHAINWK\nDIROFFTB DC    X'FF1810FF08FFFFFF00'   DIRECTION TO OFFSET TABLE\nWORKB    DC    X'00'\nNEXTMSV  DC    F'0'\nCHKMV    DC    X'00'\nCOUNT    DC    F'0'                    COUNT OF USED SQUARES\nLXW      DC    F'0'                    ROW X COL\nSAVEE    DC    F'0'                    END VALUE SAVE\nCOUNT4   DC    F'0'                    1-4\nSAVER    DC    F'0'                    SAVE FOR CONNECT\nREVERSED DC    X'000201000800000004'\nSAVEPR14 DC    F'0'\nPLINE    DC    C'1',CL132' '\nMAKSVR14 DC    F'0'\nCHAINST  DC    75F'0'                  CHAIN START TABLE 15*5\nNUMERICT DC    240X'01',10X'00',6X'01'\n*     TABLE OF POSITIONS\n*     FIRST 4 BITS IS A CHAIN NUMBER\n*     CHAIN 15 IS A GUARD BLOCK\n*     NEXT 4 BITS ARE DIRRECTIONS OF MOVES  U,D,L,R\n*\nPRINTER  DCB   MACRF=PM,DDNAME=PRINTER,RECFM=FBA,DSORG=PS\n         LTORG\nTABLEST  DS    13500F                  TABLE SPACE\n*                                      1001X45 + 1001X8\nR0       EQU   0                       RETURN VALUE\nR1       EQU   1                       WORK\nR2       EQU   2                       WORK\nR3       EQU   3                       WORK\nR4       EQU   4                       WORK\nR5       EQU   5                       WORK\nR6       EQU   6                       WORK\nR7       EQU   7                       CHAIN BASE\nR8       EQU   8                       DIRECTION\nR9       EQU   9                       TABLEST\nR10      EQU   10                      BASE\nR11      EQU   11                      BASE\nR12      EQU   12                      BASE\nR13      EQU   13                      BASE AND SAVE\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15\nTBLS     EQU   9\nDIRR     EQU   8\nCHAINTBL DSECT\nCHAINP   DS    F\n*                                      POS OF POINTER TO NEW CHAIN\nCHAINRET DS    F                       R14 SAVE\nCHAINY   DS    X                       Y COUNT\nCHAINY1  DS    X                       Y+1 COUNT\nCHAINDIR DS    X                       DIRECTION SAVE\nCHAINWK  DS    X                       DIRECTIONS FROM POINTER\nCHAINNP  DS    F                       POS OF NEXT IN THIS CHAIN\nCHAINDC  DS    F                       CHAIN DIRECTION LOOP COUNTER\n         END   AMAZEING\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CALENDAR": {"ttr": 776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$CAL   JOB ,ZBIEGIEN,TIME=3,CLASS=3,MSGCLASS=W\n/*JOBPARM ROOM=3426\n//COMP EXEC AGASMCL,LIBRARY='HPZ.TESTLIB(CAL)'\n//ASM.SYSIN DD *\nCAL      SUBENTRY BASES=(R13,R12)       SET BASES\n         L     R2,0(R1)                 GET ADDRESS OF PARM\n         MVC   YEARX,2(R2)              MOVE YEAR\n         PACK  WORK,YEARX               PACK\n         CVB   R2,WORK\n         STH   R2,YEAR                  SAVE\n         LA    R15,19                   SET COUNTER\n         LA    R14,FIRSTL+1             GET LOCATION\nLOOP1    MVC   0(4,R14),YEARX           MOVE YEAR\n         LA    R14,7(R14)               UP LOCATION\n         BCT   R15,LOOP1                BRANCH\n         LH    R3,YEAR\n         SR    R2,R2\n         D     R2,=F'4'                 DIVIDE BY 4\n         C     R2,=F'0'                 SEE IF ZERO\n         BNE   NOTLEAP\n         MVC   LEAP,=H'1'              SET TO ONE\nNOTLEAP  LA    R1,365\n         AH    R1,LEAP                 SET COUNTER\nLOOP2    BAL   R14,GEN                 GEN TABLE\n         BCT   R1,LOOP2\n         OPEN (PRINTER,(OUTPUT))\n         LA    R4,44\n         LA    R3,FIRSTL\nLOOP3    PUT   PRINTER,(R3)\n         LA    R3,133(R3)\n         BCT   R4,LOOP3\n         CLOSE (PRINTER)\n         SUBEXIT\nGEN      TAG\n         LH    R2,NNN                  GET JULIAN DAY\n         AH    R2,=H'1'                UP ONE\n         STH   R2,NNN                  SAVE\n         LH    R5,YEAR                 GET YEAR\n         M     R4,=F'5'                TIMES 5\n         D     R4,=F'4'                DIVIDE BY 4\n         AR    R5,R2\n         SH    R5,LEAP\n         SH    R5,=H'2'\n         SR    R4,R4\n         D     R4,=F'7'\n         STH   R4,DOW\n         LA    R7,59\n         AH    R7,LEAP\n         CR    R2,R7\n         BNH   CONT1\n         LA    R2,2(R2)\n         SH    R2,LEAP\nCONT1    LA    R2,91(R2)\n         LR    R5,R2\n         M     R4,=F'100'\n         D     R4,=F'3055'\n         STH   R5,MM\n         M     R4,=F'3055'\n         D     R4,=F'100'\n         SR    R2,R5\n         STH   R2,DD\n         CLC   MM,OLDMM                SEE IF MONTH CHANGED\n         BE    CONT2                   NO\n         MVC   OFFSET,=F'0'            RESET COUNT\nCONT2    LH    R2,DOW                  CALC ADD TO PUT\n         MVC   OLDMM,MM\n         MH    R2,=H'4'                EACH ENTRY 4 BXTES\n         A     R2,OFFSET               FOR WEEK\n         LA    R3,MONTHTB              ADDRESS OF MONTH OFFSETS\n         LH    R4,MM                   MONTH *4\n         S     R4,=F'3'\n         MH    R4,=H'4'                =WORD OFFSET\n         AR    R3,R4\n         A     R2,0(R3)                ADD OFFSET\n         BCTR  R2,0                    DOWN ONE\n         LH    R3,DD\n         CVD   R3,WORK\n         IC    R6,0(R2)                 SAVE CC\n         MVC   0(4,R2),=X'40202020'\n         ED    0(4,R2),WORK+6          MOVE DAY OF MONTH\n         STC   R6,0(R2)\n         LH    R3,NNN\n         CVD   R3,WORK\n         IC    R6,133(R2)               SAVE CC\n         MVC   133(4,R2),=X'40202020'\n         ED    133(4,R2),WORK+6        MOVE DAY OF YEAR\n         STC   R6,133(R2)               SAVE CC\n         CLC   DOW,=H'6'\n         BNER  R14\n         L     R2,OFFSET\n         LA    R2,266(R2)\n         ST    R2,OFFSET\n         BR    R14\n         LTORG\n         EQUREGS\nPRINTER  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=133\nYEARX    DC    CL4' '                  YEAR\nYEAR     DC    H'0'                    YEAR\nLEAP     DC    H'0'                    1=LEAP\nNNN      DC    H'0'                    DAY OF YEAR\nDOW      DC    H'0'                    DAY OF WEEK 0=SUN\nMM       DC    H'0'                    MONTH\nDD       DC    H'0'                    DAY\nOLDMM    DC    H'0'\nOFFSET   DC    F'0'\nWORK     DC    D'0'\nMONTHTB    DC  A(FIRSTL+533)\n           DC  A(FIRSTL+567)\n           DC  A(FIRSTL+601)\n           DC  A(FIRSTL+635)\n           DC  A(FIRSTL+2395)\n           DC  A(FIRSTL+2429)\n           DC  A(FIRSTL+2463)\n           DC  A(FIRSTL+2497)\n           DC  A(FIRSTL+4257)\n           DC  A(FIRSTL+4291)\n           DC  A(FIRSTL+4325)\n           DC  A(FIRSTL+4359)\nFIRSTL   DC    CL133'1'\n         DC    CL133'-'\n         DC    CL11'-',C'JANUARY',CL27' ',C'FEBRUARY'\n         DC    CL27' ',C'MARCH',CL29' ',C'APRIL',CL14' '\n         DC    C'0'\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL3' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL13'-',C'MAY',CL31' ',C'JUNE',CL30' '\n         DC    C'JULY',CL29' ',C'AUGUST',CL13' '\n         DC    C'0'\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL3' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL10'-',C'SEPTEMBER',CL26' ',C'OCTOBER'\n         DC    CL27' ',C'NOVEMBER',CL26' ',C'DECEMBER',CL12' '\n         DC    C'0'\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL7' '\n         DC    C'SUN MON TUE WED THU FRI SAT'\n         DC    CL3' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         DC    CL133'0'\n         DC    CL133' '\n         END   CAL\n//TEST EXEC  PGM=CAL,PARM=1980\n//STEPLIB  DD DSN=HPZ.TESTLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=W,DCB=BLKSIZE=1729\n//SYSUDUMP DD SYSOUT=W\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUREGS": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          00148\n         EQUREGS &LIMITS                                                00149\n.*                                                                      00150\n.*             MACRO-ID. 'EQUREGS'.                                     00151\n.*             AUTHOR. DON HIGGINS.                                     00152\n.*             DATE WRITTEN. 08/04/70.                                  00153\n.*             REMARKS.                                                 00154\n.*                 THIS MACRO GENERATES EQU STATEMENTS FOR 1 TO 16      00155\n.*                 SYMBOLIC REGISTER NAMES OF THE FORM R0 UP TO R15     00156\n.*             THE REGISTER EQU DESIRED CAN BE SPECIFIED IN THE FORM    00157\n.*             OF  (0,15), (14,1), (2,6), ETC.                          00158\n         LCLA  &LOW,&HIGH                                               00159\n         AIF   (N'&SYSLIST EQ 1).GETLIM                                 00160\n.DEFAULT ANOP                                                           00161\n&LOW     SETA  0                                                        00162\n&HIGH    SETA  15                                                       00163\n.GEN     ANOP                                                           00164\nR&LOW    EQU   &LOW                                                     00165\n         AIF   (&LOW EQ &HIGH).DONE                                     00166\n&LOW     SETA  &LOW+1                                                   00167\n         AIF   (&LOW LE 15).GEN                                         00168\n&LOW     SETA  0                                                        00169\n         AGO   .GEN                                                     00170\n.GETLIM  AIF   (N'&SYSLIST(1) NE 2).DEFAULT                             00171\n         AIF   (T'&SYSLIST(1,1) NE 'N').DEFAULT                         00172\n         AIF   (T'&SYSLIST(1,2) NE 'N').DEFAULT                         00173\n&LOW     SETA  &SYSLIST(1,1)                                            00174\n         AIF   (&LOW LT 0).DEFAULT                                      00175\n         AIF   (&LOW GT 15).DEFAULT                                     00176\n&HIGH    SETA  &SYSLIST(1,2)                                            00177\n         AIF   (&HIGH LT 0).DEFAULT                                     00178\n         AIF   (&HIGH GT 15).DEFAULT                                    00179\n         AGO   .GEN                                                     00180\n.DONE    MEXIT                                                          00181\n         MEND                                                           00182\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F11UP": {"ttr": 1027, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /* CREATED H. ZBIEGIEN 9/88  */\n  /* 1UP PRINTING, CALL IN GRAY BARS */\nFORMDEF 1UP\n     OFFSET .4 IN .375 IN REPLACE YES;\n\n  OVERLAY 1UP;\n\n  SUBGROUP COPIES 1\n       OVERLAY 1UP;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "F12UP": {"ttr": 1029, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  /* CREATED H. ZBIEGIEN 9/88  */\n  /* UPDATED H. ZBIEGIEN 2/14/89  CHANGED OFFSETS */\n  /* 2UP PRINTING, CALL IN GRAY BARS */\nFORMDEF 2UP\n    OFFSET .2 IN .55  IN REPLACE YES;\n\n OVERLAY 2UP;\n     SUBGROUP COPIES 1\n     OVERLAY 2UP;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INLINE": {"ttr": 1031, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "INLINER": {"ttr": 1036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "     THIS IS ON MEMBER HZ.INLINER\n\n//*\n//* THIS PROGRAM TAKES A PRINTOUT AND THE ASSOCIATED PAGEDEF AND\n//* FORMDEF AND COMBINES IT ALL INTO ONE SYSOUT DATA SET.  THE PAGEDEF\n//* AND FORMDEF CAN COME FROM A PRIVATE LIBRARY.  ONCE THEY ARE TESTED\n//* OUT THE PAGEDEF AND FORMDEF CAN BE MOVED INTO A PRODUCTION LIBRARY\n//* FOR USE BY EVERYONE.\n//*\n//* THE PARM CONSISTS OF THE 8 CHARACTER FORMDEF NAME AND THE 8\n//* CHARACTER PAGEDEF NAME.  THEY MUST BE 8 CHARACTERS AND INCLUDE THE\n//* P1 OR F1 PREFIX.\n//* THE PAGEDEF AND FORMDEF DD STATEMENTS MUST POINT TO THE CORRECT\n//* MEMBERS IN THE PRIVATE LIBRARY.  THE NAMES MUST MATCH THOSE USED\n//* IN THE PARM\n//* THE INPUT REPORT -DD-FILEIN- CAN BE ANY LRECL OR RECFM OR BLKSIZE\n//* BUT IT MUST HAVE EITHER ASA OR MACHINE CONTROL CHARACTERS.  CHANGE\n//* THE RECFM (VBA OR VBM) (A OR M) ON THE FILEOT DD TO MATCH THE\n//* FILEIN DD.  THE REST OF THE FILEOT DCB MUST BE AS SPECIFIED.\n//*\n//A EXEC PGM=INLINE,PARM='F11UP   P18B2   ' COPY PGM TO YOUR LIBRARY\n//ABC OUTPUT PAGEDEF=8B2,FORMDEF=1UP,PRMODE=PAGE\n//STEPLIB DD DSN=XXX.TESTLIB,DISP=SHR <==USE YOUR OWN LIBRARY\n//SYSUDUMP DD SYSOUT=W\n//SYSOUT  DD SYSOUT=W\n//PDEFLIB DD DSN=XXX.PDEFLIB(P18B2),DISP=SHR <== PAGEDEF\n//FDEFLIB DD DSN=XXX.FDEFLIB(F11UP),DISP=SHR <== FORMDEF\n//FILEOT DD SYSOUT=W,DCB=(LRECL=8205,RECFM=FBA,BLKSIZE=8209),\n//  OUTPUT=*.ABC\n//FILEIN DD *,DCB=(LRECL=80,BLKSIZE=800)  <== PRINT FILE\n1TOP OF PAGE\n SINGLE SPACE\n0DOUBLE SPACE\n-TRIPLE SPACE\n+              NO SPACE\n END\n//*----------------------------------------------------\n//* SAMPLE JCL FOR ALLOCATING A PDEF OR FDEF LIBRARY\n//A EXEC PGM=IEFBR14\n//A DD DSN=XXX.PDEFLIB,DISP=(,CATLG,DELETE),UNIT=DISK,\n// SPACE=(TRK,(3,3,8)),\n//  DCB=(RECFM=VBM,LRECL=8205,BLKSIZE=8209,DSORG=PO)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOVERBLD": {"ttr": 1038, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$W   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=A321\n//* BUILD OVERLAY, PUT TO TEMP FILE\n//* ONCE NO ERRORS, WRITE TO A PERMANENT FILE AND THEN COPY INTO YOUR\n//* PRODUCTION OVERLAY LIBRARY FOR TESTING\n//A EXEC SAS@\n//OUT DD SYSOUT=W INPUT LISTING AND ERROR MESSAGES\n//XYZ OUTPUT PRMODE=PAGE,DATACK=BLKCHAR,FORMDEF=AGOGL\n//NEWCHAR DD DSN=&&TEMP,DISP=(,PASS),UNIT=DISK,\n//* YOU CAN PRINT IT OUT DIRRECTLY\n//*EWCHAR DD SYSOUT=F,OUTPUT=*.XYZ, CAN PRNT TO SEE WHAT IT LOOKS LIKE\n// DCB=(RECFM=VBA,BLKSIZE=8209,LRECL=8205),SPACE=(TRK,(5,5),RLSE)\n//ABC DD DSN=AGPP.AFP.SOURCE(O1XXXX),DISP=SHR  SOURCE INPUT\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA  _NULL_;\nFILE NEWCHAR LINESIZE=8201 NOPRINT COLUMN=COLOUT;\nINFILE ABC STOPOVER;\n LENGTH CRD $ 80;\n INPUT CRD $CHAR80. @;\n FILE OUT;\n PUT '  ' CRD $CHAR80.;\n FILE NEWCHAR LINESIZE=8201 NOPRINT COLUMN=COLOUT;\nLENGTH OPCODE $ 6;\nINPUT @1 OPCODE $       @;\nIF OPCODE ='BMO' THEN DO; /* BEGIN MEDIUM OVERLAY */;\n LENGTH OVERNAME $ 8;\n RETAIN OVERNAME  ;\n INPUT OVERNAME $ ;\n PUT '5A0016D3A8DF000001'X OVERNAME $CHAR8. '000000000000'X;\n RETURN;\nEND;\nIF OPCODE ='NOP' THEN DO; /* WRITE A DUMMY COMMENT */;\n T1=TIME();\n T2=DATE();\n PUT '5A003FD3EEEE000001'X 'CREATED BY HPZ' T1 TIME8.\n      T2 MMDDYY8. @64 'X';\n RETURN;\nEND;\nIF OPCODE='BAG' THEN DO; /* BEGIN ACTIVE ENVIRONMENT */;\n PUT '5A0016D3A8C9000002'X 'HPZTOKEN' '000000000000'X;\n RETURN;\nEND;\nRETAIN X Y ;\nIF OPCODE='PGD' THEN DO; /* PAGE DESCRIPTOR */;\n INPUT X XTYPE $ Y YTYPE $ ; /* READ PAGE SIZE */\n LINK CHKX;\n LINK CHKY;\n PUT '5A0017D3A6AF000002000009600960'X X IB3. Y IB3.\n     '000400'X;\n RETAIN XSIZE YSIZE;\n XSIZE=X;\n YSIZE=Y;\n RETURN;\nEND;\nIF OPCODE='CTC' THEN DO; /* COMPOSED TEXT CONTROL */;\n PUT '5A0012D3A79B00000300000000000000002D00'X;\n RETURN;\nEND;\nIF OPCODE='CTD' THEN DO; /* COMPOSED TEXT DESCRIPTOR */;\n PUT '5A0019D3A69B000004000009600960'X  XSIZE IB2. YSIZE IB2.\n     '00000000000000'X;\n RETURN;\nEND;\nIF OPCODE='EAG' THEN DO; /* END ACTIVE ENVIRONMET GROUP */;\n PUT '5A0010D3A9C9000002'X 'HPZTOKEN' ;\n RETURN;\nEND;\nIF OPCODE='IPS' THEN DO; /* INCLUDE PAGE SEGMENT */;\n INPUT SEGNAME $ @;\n INPUT X XTYPE $ Y YTYPE $ ; /* READ PAGE SIZE */\n LINK CHKX;\n LINK CHKY;\n PUT '5A0018D3AF5F000005'X SEGNAME $CHAR8.\n     X IB3. Y IB3. '0000'X;\n RETURN;\nEND;\nIF OPCODE='EMO' THEN DO; /* END MEDIUM OVERLAY */;\n PUT '5A0010D3A9DF000001'X OVERNAME $CHAR8.;\n RETURN;\nEND;\n  /* IF BEGIN/END PAGE INSTEAD OF OVERLAY THEN CAN WRITE TO SYSOUT*/;\nIF OPCODE ='BPG' THEN DO; /* BEGIN PAGE */;\n INPUT OVERNAME $ ;\n PUT '5A0016D3A8AF000001'X OVERNAME $CHAR8. '000000000000'X;\n RETURN;\nEND;\nIF OPCODE='EPG' THEN DO; /* END PAGE */;\n PUT '5A0010D3A9AF000001'X OVERNAME $CHAR8.;\n RETURN;\nEND;\nIF OPCODE ='BCT' THEN DO; /* BEGIN TEXT BLOCK */;\n PUT '5A0016D3A89B000001'X 'TEXTTOK '  '000000000000'X;\n RETURN;\nEND;\nIF OPCODE='ECT' THEN DO; /* END TEXT BLOCK */;\n PUT '5A0010D3A99B000001'X 'TEXTTOK ' ;\n RETURN;\nEND;\n RETAIN XPOS YPOS;\nIF OPCODE='MCF' THEN DO; /* MAP CODED FONT */;\n RETAIN FNTNO;\n FNTNAME='        ';\n FNTNO=1;\n DO UNTIL (FNTNAME='ENDMCF');\n  INPUT FNTNAME $ @;\n  IF FNTNAME NE 'ENDMCF' THEN DO;\n   PT=28*(FNTNO-1)+14;\n   PUT @PT FNTNO PIB1. '000000'X FNTNAME $CHAR8.\n      'FFFF000000000000'X 'FFFF000000000000'X @;\n   FNTNO=FNTNO+1;\n  END;\n  ELSE DO;\n   PUT @1 '5A'X @4 'D3B18A0000011C000000'X @;\n   FNTNO=FNTNO-1;\n   WORK=FNTNO*28+12;\n   PUT @2 WORK IB2.;\n  END;\n END;\n RETURN;\nEND;\nIF OPCODE='CTX' THEN DO; /* START COMPOSED TEXT */;\n PUT @1 '5A0000D3EE9B0000012BD3'X @;\n RETURN;\nEND;\nIF OPCODE='AMB' THEN DO; /* ABSOLUTE MOVE BASELINE */;\n INPUT Y YTYPE $ ;\n LINK CHKY;\n IF Y>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04D3'X Y IB2. @;\n YPOS=Y;\n RETURN;\nEND;\nIF OPCODE='AMI' THEN DO; /* ABSOLUTE MOVE INLINE */;\n INPUT X XTYPE $ ;\n LINK CHKX;\n IF X>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04C7'X X IB2. @;\n XPOS=X;\n RETURN;\nEND;\nIF OPCODE='RMB' THEN DO; /* RELATIVE MOVE BASELINE */;\n INPUT Y YTYPE $ ;\n LINK CHKY;\n IF Y+YPOS>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04D5'X Y IB2. @;\n YPOS=Y+YPOS;\n RETURN;\nEND;\nIF OPCODE='RMI' THEN DO; /* RELATIVE MOVE INLINE */;\n INPUT X XTYPE $ ;\n LINK CHKX;\n IF X+XPOS>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04C9'X X IB2. @;\n XPOS=X+XPOS;\n RETURN;\nEND;\nIF OPCODE='DBR' THEN DO; /* DRAW BASELINE RULE */;\n INPUT Y YTYPE $ THICK;\n LINK CHKTHICK;\n LINK CHKY;\n IF YPOS+Y>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y LENGTH TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '07E7'X Y IB2. THICK IB3. @;\n RETURN;\nEND;\nIF OPCODE='DIR' THEN DO; /* DRAW INLINE RULE */;\n INPUT X XTYPE $ THICK;\n LINK CHKTHICK;\n LINK CHKX;\n IF XPOS+X>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X LENGTH TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '07E5'X X IB2. THICK IB3. @;\n RETURN;\nEND;\nIF OPCODE='ENDCTX' THEN DO; /* PSEUDO OP CODE, WRITE CTX RECORD */;\n PUT '02F8'X @; /* NOOP CTX */;\n WORK=COLOUT-2;\n PUT @2 WORK IB2.;\n RETURN;\nEND;\nIF OPCODE='SCFL' THEN DO; /* SET CODED FONT LOCAL */;\n INPUT FONT;\n IF FONT<0 OR FONT>FNTNO THEN DO;\n  FILE OUT;\n  PUT 'FONT NUMBER INVALID ON SCFL CARD';\n  ABORT;\n END;\n PUT '03F1'X FONT IB1. @;\n RETURN;\nEND;\nIF OPCODE='TRN' THEN DO; /* TRANSPARENT DATA */;\n INPUT TEXTLEN @;\n IF TEXTLEN <1 OR TEXTLEN>69 THEN DO;\n  FILE OUT;\n  PUT 'TEXT LENGTH IS INVALID ON ' OPCODE ' CARD';\n  ABORT;\n END;\n INPUT TEXT $VARYING69. TEXTLEN;\n WORK=TEXTLEN+2;\n PUT WORK PIB1. 'DB'X TEXT $VARYING69. TEXTLEN @;\n RETURN;\nEND;\nIF OPCODE='RPS' THEN DO; /* REPEAT STRING */;\n INPUT OLEN @;\n IF OLEN <1 OR OLEN> 4096 THEN DO;\n  FILE OUT;\n  PUT 'OUTPUT LENGTH INVALID ON RPS CARD';\n  ABORT;\n END;\n INPUT TEXTLEN @;\n IF TEXTLEN <1 OR TEXTLEN>69 THEN DO;\n  FILE OUT;\n  PUT 'TEXT LENGTH IS INVALID ON ' OPCODE ' CARD';\n  ABORT;\n END;\n INPUT TEXT $VARYING69. TEXTLEN;\n WORK=TEXTLEN+4;\n PUT WORK PIB1. 'EF'X OLEN IB2. TEXT $VARYING69. TEXTLEN @;\n RETURN;\nEND;\nIF OPCODE='BOX' THEN DO; /* PSEUDO OP TO DRAW BOX */;\n INPUT X XTYPE $ Y YTYPE $ THICK ;\n LINK CHKX;\n LINK CHKY;\n LINK CHKTHICK;\n TH=THICK/256;\n IF X+XPOS+TH >XSIZE THEN DO;\n  FILE OUT;\n  PUT 'BOX EXCEEDS X PAGESIZE';\n  ABORT;\n END;\n IF Y+YPOS+TH >YSIZE THEN DO;\n  FILE OUT;\n  PUT 'BOX EXCEEDS Y PAGESIZE';\n  ABORT;\n END;\n /* NOTE THE COORDINATES ARE THE OUTSIDE CORNERS OF THE BOX */\n /* THE THICKNESS STARTS ON THE PEL COORDINATE AND EXTENDS   */\n /* TOWARD THE CENTER OF THE BOX */;\n WLEN=-X;\n HLEN=-Y;\n THICK=-THICK;\n PUT '04D5'X Y IB2. /*RMB*/ '04C9'X X IB2. /*RMI*/\n     '07E7'X HLEN IB2. THICK IB3. @ /* DBR */;\n PUT '07E5'X WLEN IB2. THICK IB3. @ /* DIR */;\n X=-X;\n Y=-Y;\n WLEN=-WLEN;\n HLEN=-HLEN;\n THICK=-THICK;\n PUT '04D5'X Y IB2. /*RMB*/ '04C9'X X IB2. /*RMI*/\n     '07E5'X WLEN IB2. THICK IB3. /* DIR */\n     '07E7'X HLEN IB2. THICK IB3. @ /* DBR */;\n RETURN;\nEND;\nIF OPCODE='MATRIX' THEN DO; /* PSEUDO OP CODE TO DRAW GRID */;\n INPUT X XTYPE $ Y YTYPE $ ;\n LINK CHKX;\n LINK CHKY;\n XTMP=0;\n YTMP=0;\n PUT '04D3000004C70000'X @;/* AMB, AMI TO ORIGIN */;\n DO UNTIL (YTMP>YSIZE);\n  PUT '07E5'X XSIZE IB2. '000100'X @; /* DIR */;\n  YTMP=YTMP+Y;\n  IF YTMP+1<=YSIZE THEN PUT '04D5'X Y IB2. @;/* RMB */;\n END;\n PUT '04D30000'X @;/* AMB TO ORIGIN */;\n DO UNTIL (XTMP>XSIZE);\n  PUT '07E7'X YSIZE IB2. '000100'X @; /* DBR */;\n  XTMP=XTMP+X;\n  IF XTMP+1<=XSIZE THEN PUT '04C9'X X IB2. @;/* RMI */;\n END;\n YPOS=0;\n XPOS=0;\n PUT '04D3'X YPOS IB2. '04C7'X XPOS IB2. @;/* AMB AMI */;\n RETURN;\nEND;\nIF OPCODE='BLN' THEN DO; /* BEGIN LINE */;\n PUT '02D9'X @;\n RETURN;\nEND;\nIF OPCODE='SBI' THEN DO; /* SET BASELINE INCR */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<5 OR X>240 THEN DO;\n  PUT 'SET BASELINE INCR VALUE LT 5 OR GT 240 ' X;\n  ABORT;\n END;\n PUT '04D1'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='SIM' THEN DO; /* SET INLINE MARGIN */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<0 OR X>2000 THEN DO;\n  PUT 'SET INLINE MARGIN VALUE LT 0 OR GT 2000 ' X;\n  ABORT;\n END;\n PUT '04C1'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='SVI' THEN DO; /* SET VARIABLE SPACE INCREMENT */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<1 OR X>240 THEN DO;\n  PUT 'SET VARIABLE SPACE INCREMENT LT 1 OR GT 240 ' X;\n  ABORT;\n END;\n PUT '04C5'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='STO' THEN DO; /* SET TEXT ORIENTATION */;\n INPUT DIR $;\n IF NOT (DIR='ACROSS' OR DIR='UP' OR DIR='DOWN') THEN DO;\n  PUT 'SET TEXT ORIENTATION DIRECTION INVALID ' DIR;\n  ABORT;\n END;\n LENGTH DIRX $ 4;\n IF DIR='ACROSS'    THEN DIRX='00002D00'X;\n ELSE IF DIR='DOWN' THEN DIRX='2D005A00'X;\n ELSE                    DIRX='87000000'X;\n PUT '06F7'X DIRX $CHAR4. @;\n RETURN;\nEND;\nIF OPCODE='SII' THEN DO; /* SET INTERCHARACTER INCREMENT */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X < 0 OR X>240 THEN DO;\n  PUT 'SET INTERCHARACTER INCREMENT INVALID ' X;\n  ABORT;\n END;\n PUT '04C3'X X PIB2. @;\n RETURN;\nEND;\n\nFILE OUT;\nPUT 'UNKNOWN OPCODE TYPE:' OPCODE;\nABORT;\nRETURN;\nCHKY:\n IF NOT (YTYPE='IN' OR YTYPE='PELS') THEN DO;\n  FILE OUT;\n  PUT 'INVALID TYPE OF INCREMENT ON ' OPCODE ' CARD:' YTYPE;\n  ABORT;\n END;\n IF YTYPE='IN' THEN Y=Y*240;\n Y=INT(Y);\n RETURN;\nCHKX:\n IF NOT (XTYPE='IN' OR XTYPE='PELS') THEN DO;\n  FILE OUT;\n  PUT 'INVALID TYPE OF INCREMENT ON ' OPCODE ' CARD:' XTYPE;\n  ABORT;\n END;\n IF XTYPE='IN' THEN X=X*240;\n X=INT(X);\n RETURN;\nCHKTHICK:\n IF THICK>10 OR THICK<-10 THEN DO;\n  FILE OUT;\n  PUT 'THICKNESS VALUE INVALID ON ' OPCODE ' CARD:' THICK;\n  ABORT;\n END;\n THICK=THICK*256; /* MOVE OVER 8 BITS FOR LATER OUTPUT */;\n RETURN;\n//A EXEC AGRPRINT,REPO=W   UTILITY TO PRINT IN HEX AND CHARACTER\nPRTBV\n//INPUT DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NCZ93205": {"ttr": 1285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$FOR JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//A EXEC AGASMCL,OUT=W,LIBRARY='HPZ.TESTLIB(NCZ93205)'\n//ASM.SYSIN DD *\n* I PUT ALL THE MACROS INSTREAM\n         MACRO\n&NAME    MCLEAR &RC=0,&RE=NO,&LDSA=YES\n.*       SII MCEVOY RETURN MACRO\n.* CHANGE HISTORY:\n.* 28/10/81 RH : CREATED WITHOUT MODIFICATIONS FROM LOLA 'CLEAR'\n.*\n         AIF   ('&RE' EQ 'NO').LOAD13\n         AIF   ('&RE' EQ 'YES').RESET13\n         MNOTE 4,'INVALID SPECIFICATION FOR ''RE'' ''NO'' ASSUMED'\n         AGO   .LOAD13\n.RESET13 ANOP\n&NAME    LA    1,8\n         LA    13,0(13)\n         SR    13,1\n         L     0,0(13)\n         L     1,4(13)\n         LA    1,0(1)\n         L     13,12(13)\n         FREEMAIN R,LV=(0),A=(1)\n         AGO   .TESTRC\n.LOAD13  AIF   ('&LDSA' EQ 'YES').SET13\n         AIF   ('&LDSA' EQ 'NO').NOLDSA\n         MNOTE 4,'INVALID LDSA SPECIFIED ''NO'' ASSUMED'\n.NOLDSA  ANOP\n&NAME    LA    13,0(13)\n         AGO   .TESTRC\n.SET13   ANOP\n&NAME    L     13,4(13)\n.TESTRC  AIF   ('&RC' EQ '(15)').STR15\n         AIF   (T'&RC NE 'N').INVLCD\n         AIF   (&RC EQ 0).RC0\n         AIF   (&RC GE 1 AND &RC LE 4095).SETRC\n.INVLCD  ANOP\n         MNOTE 4,'RETURN CODE SPECIFICATION INVALID - IGNORED'\n         AGO   .RELOAD\n.STR15   ST    15,16(13)\n         AGO   .RELOAD\n.SETRC   LA    15,&RC\n         ST    15,16(13)\n         AGO   .RELOAD\n.RC0     SR    15,15\n         ST    15,16(13)\n.RELOAD  LM    14,12,12(13)\n         BR    14\n         MEND\n         MACRO\n&CSECTNM MSETUP &R1,&R2,&LDSA=72,&RE=NO,&EQUATE=YES,&BITEQU=NO,        *\n               &VERSN=,                                                *\n               &SP=0\n.*       SII MCEVOY PROGRAM SETUP MACRO\n.* CHANGE HISTORY:\n.* 28/10/81 RH : CREATED FROM LOLA SETUP MACRO - SEE <=== FOR CHANGES\n.*\n         LCLA  &BASE1,&BASE2,&L,&L1,&L2,&LVN,&LDT,&LID,&S\n         LCLA  &SUBPOOL\n         LCLB  &B1,&B2,&B3,&B4,&B5\n         LCLC  &LBL(9),&VLBL,&AMP,&DATE,&ID          <==== RH\n&DATE    SETC  '&SYSDATE-&SYSTIME'                   <==== RH\n&AMP     SETC  '&&'\n&B1      SETB  ('&SYSECT' NE '')\n&B2      SETB  ('&CSECTNM' NE '')\n         AIF   (&B2).SETNM\n         AIF   (&B1).TSTBASE\n         MNOTE 4,'NO CSECT NAME GIVEN - CSECT IS UNAMED'\n.SETNM   ANOP\n&CSECTNM CSECT\n&ID      SETC  '&CSECTNM'                            <==== RH\n.TSTBASE ANOP\n         AIF   (T'&R1 EQ 'O' OR T'&R1 NE 'N').DEFLT\n&BASE1   SETA  &R1\n         AIF   (&BASE1 GT 1 AND &BASE1 LE 12).TSTBAS2\n         AIF   (&BASE1 EQ 13 AND '&RE' EQ 'NO').TSTBAS2\n.DEFLT   ANOP\n         MNOTE 4,'FIRST BASE REGISTER NOT SPECIFIED OR INVALID 12 SUBST*\n               ITUTED'\n&BASE1   SETA  12\n.TSTBAS2 ANOP\n         AIF   (T'&R2 EQ 'O').TSTVDAT\n         AIF   (T'&R2 NE 'N').MNOTE2\n&BASE2   SETA  &R2\n         AIF   (&BASE2 GT 1 AND &BASE2 LE 12 AND &BASE2 NE &BASE1).SETB*\n               2\n.MNOTE2  MNOTE 4,'SECOND BASE REGISTER INVALID / IGNORED'\n         AGO   .TSTVDAT\n.SETB2   ANOP\n&B3      SETB  (1)\n.TSTVDAT USING *,15\n         AIF   ('&VERSN' EQ '' AND '&DATE' EQ '' AND '&ID' EQ '').NONME\n         AIF   ('&VERSN' EQ '').TSTDTE\n&LVN     SETA  K'&VERSN\n         AIF   (&LVN LE 8).SETVSN\n&LVN     SETA  8\n.SETVSN  ANOP\n&S       SETA  &S+1\n&LBL(&S) SETC  '&VERSN'(1,&LVN)\n&VLBL    SETC  '&LBL(&S)'\n.TSTDTE  AIF   ('&DATE' EQ '').TSTID\n&LDT     SETA  K'&DATE\n         AIF   ('&DATE'(1,1) EQ '''' AND '&DATE'(&LDT,1) EQ '''').STL1A\n&L1      SETA  1\n&L2      SETA  0\n         AGO   .TSLOOP1\n.STL1A   AIF   (&LDT LE 2).DTER1\n&L1      SETA  2\n&L2      SETA  0\n&B5      SETB  (1)\n&LDT     SETA  &LDT-2\n.TSLOOP1 AIF   (&B5).TSCNTR1\n         AIF   (&L1 GT &LDT).EXLOOP1\n         AGO   .TB41\n.TSCNTR1 AIF   (&L1-1 GT &LDT).EXLOOP1\n.TB41    AIF   (&B4).TLSTCH1\n         AIF   ('&DATE'(&L1,1) EQ '''' OR '&DATE'(&L1,1) EQ '&AMP'(1,1)*\n               ).STB41\n.SETL2B  ANOP\n&L2      SETA  &L2+1\n.SETL1B  ANOP\n&L1      SETA  &L1+1\n         AIF   (&L2 EQ 20).EXLOOP1\n         AGO   .TSLOOP1\n.STB41   ANOP\n&B4      SETB  (1)\n         AGO   .SETL1B\n.TLSTCH1 AIF   ('&DATE'(&L1,1) NE '&DATE'(&L1-1,1)).DTER2\n&B4      SETB  (0)\n         AGO   .SETL2B\n.DTER1   MNOTE 4,'INVALID SPEC. FOR DATE KEYWORD - IGNORED'\n&LDT     SETA  0\n         AGO   .TSTID\n.DTER2   MNOTE 4,'UNPAIRED QUOTE  OR AMPERSAND IN DATE SPEC. IGNORED'\n&LDT     SETA  0\n         AGO   .TSTID\n.EXLOOP1 AIF   (&B4).DTER2\n&L1      SETA  &L1-1\n         AIF   (NOT &B5).STLDT1\n&L1      SETA  &L1-1\n.STLDT1  ANOP\n&LDT     SETA  &L2\n         AIF   (&LVN EQ 0).NOVN\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LVN     SETA  &LVN+1\n.NOVN    ANOP\n&L2      SETA  0\n         AIF   (NOT &B5).DTECNT\n&L2      SETA  1\n.DTECNT  ANOP\n         AIF   (&L1 EQ 0).TSTID\n&S       SETA  &S+1\n         AIF   (&L1 GT 8).SPLT1\n&LBL(&S) SETC  '&DATE'(&L2+1,&L1)\n         AGO   .TSTID\n.SPLT1   ANOP\n&LBL(&S) SETC  '&DATE'(&L2+1,8)\n&L1      SETA  &L1-8\n&L2      SETA  &L2+8\n         AGO   .DTECNT\n.TSTID   AIF   ('&ID' EQ '').SETBRD1\n         AIF   ('&ID' EQ '*').DEFID\n&LID     SETA  K'&ID\n&B4      SETB  (0)\n&B5      SETB  (0)\n         AIF   ('&ID'(1,1) EQ '''' AND '&ID'(&LID,1) EQ '''').STL1C\n&L1      SETA  1\n&L2      SETA  0\n         AGO   .TSLOOP2\n.STL1C   AIF   (&LID LE 2).IDER1\n&L1      SETA  2\n&L2      SETA  0\n&B5      SETB  (1)\n&LID     SETA  &LID-2\n.TSLOOP2 AIF   (&B5).TSCNTR2\n         AIF   (&L1 GT &LID).EXLOOP2\n         AGO   .TB42\n.TSCNTR2 AIF   (&L1-1 GT &LID).EXLOOP2\n.TB42    AIF   (&B4).TLSTCH2\n         AIF   ('&ID'(&L1,1) EQ '''' OR '&ID'(&L1,1) EQ '&AMP'(1,1)).ST*\n               B42\n.SETL2C  ANOP\n&L2      SETA  &L2+1\n.SETL1D  ANOP\n&L1      SETA  &L1+1\n         AIF   (&L2 EQ 20).EXLOOP2\n         AGO   .TSLOOP2\n.STB42   ANOP\n&B4      SETB  (1)\n         AGO   .SETL1D\n.TLSTCH2 AIF   ('&ID'(&L1,1) NE '&ID'(&L1-1,1)).IDER2\n&B4      SETB  0\n         AGO   .SETL2C\n.IDER1   MNOTE 4,'INVALID SPEC FOR ID KEYWORD - IGNORED'\n&LID     SETA  0\n         AGO   .SETBRD1\n.IDER2   MNOTE 4,'UNPAIRED QUOTE  OR AMPERSAND IN ID SPEC. IGNORED'\n&LID     SETA  0\n         AGO   .SETBRD1\n.EXLOOP2 AIF   (&B4).IDER2\n&L1      SETA  &L1-1\n         AIF   (NOT &B5).STLID1\n&L1      SETA  &L1-1\n.STLID1  ANOP\n&LID     SETA  &L2\n         AIF   (&LVN EQ 0 AND &LDT EQ 0).SETL1\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LDT     SETA  &LDT+1\n         AGO   .SETL1\n.DEFID   AIF   (&B1 OR &B2).TLDT\n&LID     SETA  0\n         AGO   .SETBRD1\n.TLDT    AIF   (&LVN EQ 0 AND &LDT EQ 0).NODT\n&S       SETA  &S+1\n&LBL(&S) SETC  ' '\n&LDT     SETA  &LDT+1\n.NODT    ANOP\n&S       SETA  &S+1\n         AIF   (&B2).SETID1\n&LBL(&S) SETC  '&SYSECT'\n         AGO   .KNAME\n.SETID1  ANOP\n&LBL(&S) SETC  '&CSECTNM'\n.KNAME   ANOP\n&LID     SETA  1\n.KNAME2  AIF   ('&LBL(&S)'(1,&LID) EQ '&LBL(&S)').SETBRD1\n&LID     SETA  &LID+1\n         AGO   .KNAME2\n.SETL1   ANOP\n&L2      SETA  0\n         AIF   (NOT &B5).IDCNT\n&L2      SETA  1\n.IDCNT   ANOP\n         AIF   (&L1 EQ 0).SETBRD1\n&S       SETA  &S+1\n         AIF   (&L1 GT 8).SPLT2\n&LBL(&S) SETC  '&ID'(&L2+1,&L1)\n         AGO   .SETBRD1\n.SPLT2   ANOP\n&LBL(&S) SETC  '&ID'(&L2+1,8)\n&L1      SETA  &L1-8\n&L2      SETA  &L2+8\n         AGO   .IDCNT\n.SETBRD1 ANOP\n&L1      SETA  4+2*((&LVN+&LDT+&LID+1)/2)\n         AIF   (&L1 EQ 4).SETSTM\n         B     *+&L1\n         DC    C'&LBL(1).&LBL(2).&LBL(3).&LBL(4).&LBL(5).&LBL(6).&LBL(7*\n               ).&LBL(8).&LBL(9)'\n         AGO   .NOCONST\n.NONME   AIF   (&B2 EQ 0).NOCONST\n         B     12(0,15)\n         DC    CL8'&CSECTNM'\n.NOCONST ANOP\n         AIF   ('&VLBL' EQ '').SETSTM\n         ENTRY &VLBL\n.SETSTM  ANOP\n&VLBL    STM   14,12,12(13)\n         AIF   (T'&LDSA EQ 'N').TSTZR0\n         MNOTE 4,'LSDA NOT SPECIFIED OR INVALID 72 SUBSTITUTED'\n         AGO   .L72\n.TSTZR0  AIF   (&LDSA NE 0).TESTL\n         AIF   (&BASE1 EQ 13).TESTL\n&L       SETA  0\n         AGO   .NORENT\n.TESTL   AIF    (&LDSA LE 71).SET72\n         AIF   (&LDSA GT 4064).SET4064\n&L       SETA  &LDSA\n         AGO   .TSTRENT\n.SET72   ANOP\n         MNOTE 4,'LDSA SPECIFIED IS LESS THAN 72 - 72 PROVIDED'\n.L72     ANOP\n&L       SETA  72\n         AGO   .TSTRENT\n.SET4064 ANOP\n         MNOTE 4,'LDSA GIVEN IS GREATER THAN 4064 - 4064 PROVIDED'\n&L       SETA  4064\n.TSTRENT ANOP\n         AIF   ('&RE' EQ 'NO').NORENT\n         AIF   ('&RE' EQ 'YES').RENT\n         MNOTE 4,'RE SPECIFICATION INVALID - RE=NO ASSUMED'\n         AGO   .NORENT\n.RENT    MNOTE 0,'RE-ENTRANT FORM OF MACRO SPECIFIED'\n         AIF   (&SP LE 255).SPOK\n         MNOTE 4,'SUBPOOL SPECIFIED GREATER THAN 255 - 0 ASSUMED'\n&SUBPOOL SETA  0\n         AGO   .SPSET\n.SPOK    ANOP\n&SUBPOOL SETA  &SP\n.SPSET   ANOP\n         LA    2,&L\n         LA    2,7(2)\n         LA    0,4088\n         NR    2,0\n         LA    2,8(2)\n         LR    0,2\n         LA    2,&SUBPOOL\n         SLL   2,24\n         OR    0,2\n         LR    2,0\n         GETMAIN R,LV=(0)\n         ST    2,0(1)\n         ST    1,4(1)\n         XC    8(4,1),8(1)\n         ST    13,12(1)\n         LA    1,8(1)\n         ST    1,8(13)\n         LR    13,1\n         L     1,4(13)\n         LM    0,2,20(1)\n         AGO   .SETBASE\n.NORENT  ANOP\n         MNOTE 0,'NON-RE-ENTRANT FORM OF MACRO USED'\n         AIF   (&L EQ 0).SETBASE\n&L1      SETA  4+2*((&L+1)/2)\n&L2      SETA  &L1+20\n         CNOP  4,8\n         BAL   1,*+&L1\n         DS    CL&L\n         XC    0(4,1),0(1)\n         ST    13,4(1)\n         ST    1,8(13)\n         LR    13,1\n         L     1,4(13)\n         LM    1,2,24(1)\n.SETBSES ANOP\n         AIF   (&BASE1 NE 13).SETBASE\n         AIF   (&B3).TWOBSES\n         USING *-&L2,&BASE1\n         AGO   .TSTEQU\n.TWOBSES USING *-&L2,&BASE1,&BASE2\n         LA    &BASE2,4095(&BASE1)\n         LA    &BASE2,1(&BASE2)\n         AGO   .TSTEQU\n.SETBASE BALR  &BASE1,0\n         AIF   (&B3).TWOREGS\n         USING *,&BASE1\n         AGO   .TSTEQU\n.TWOREGS USING *,&BASE1,&BASE2\n         LA    &BASE2,4095(&BASE1)\n         LA    &BASE2,1(&BASE2)\n.TSTEQU  ANOP\n         DROP  15\n         AIF   ('&EQUATE' EQ 'NO').TSTBIT\n         AIF   ('&EQUATE' EQ 'YES').EQU\n         MNOTE 4,'EQUATE SPECIFICATION INVALID - YES ASSUMED'\n.EQU     ANOP\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.TSTBIT  AIF   ('&BITEQU' EQ 'NO').EXIT\n         AIF   ('&BITEQU' EQ 'YES').EQUBIT\n         MNOTE 4,'BIT EQUATE SPEC. INVALID - YES ASSUMED'\n.EQUBIT  ANOP\nBIT0     EQU   128\nBIT1     EQU    64\nBIT2     EQU    32\nBIT3     EQU    16\nBIT4     EQU     8\nBIT5     EQU     4\nBIT6     EQU     2\nBIT7     EQU     1\n.EXIT    MEND\nNCZ93205 TITLE 'SUBROUTINE TO READ PARTITIONED DATASET MEMBERS         *\n               - PROGRAM DOCUMENTATION'\n*****                                                             *****\n*                                                                     *\n* ID:          NCZ93205 - SUBROUTINE TO READ PDS MEMBERS              *\n*                                                                     *\n* NCZ93205.1 PROGRAM DESCRIPTION                                      *\n*                                                                     *\n* THIS PROGRAM CAN BE CALLED AS A SUBROUTINE FROM AN ASSEMBLER OR     *\n* COBOL PROGRAM TO PROVIDE READ ACCESS TO MEMBER(S) OF A PDS. THE     *\n* MEMBER NAME(S) MAY BE SPECIFIED DYNAMICALLY VIA THE PARAMETERS.     *\n* THUS THIS PROGRAM ENABLES A COBOL PROGRAM TO ACCESS MANY MEMBERS    *\n* OF A PDS WHEN THE NAMES OF THE MEMBERS ARE NOT KNOWN UNTIL EXECUTION*\n* TIME.                                                               *\n*                                                                     *\n* ONLY COMBINATIONS OF RECFM = F/B/A ARE SUPPORTED.                   *\n*                                                                     *\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*                                                                     *\n* NCZ93205.2 USER INSTRUCTIONS                                        *\n*                                                                     *\n* PARAMETERS:                                                         *\n* ----------                                                          *\n* THE PROGRAM OBSERVES A STANDARD OS LINKAGE. IT SHOULD ALWAYS BE     *\n* CALLED WITH 4 PARAMETERS WHICH ARE:                                 *\n*                                                                     *\n* P1 - REQUEST CODE      FULLWORD BINARY  COBOL PIC S9(8) COMP.       *\n*      VALUES:                                                        *\n*      0   -  OPEN DDNAME 'PDS'                                       *\n*      4   -  LOCATE MEMBER (DOES NOT READ MEMBER)                    *\n*      8   -  READ NEXT RECORD IN CURRENT MEMBER                      *\n*      12  -  CLOSE DDNAME 'PDS'                                      *\n*                                                                     *\n* P2 - MEMBER NAME      CHARACTER STRING COBOL PIC X(8).              *\n*      CONTAINS NAME OF MEMBER WHEN P1 = 4                            *\n*                                                                     *\n* P3 - INPUT AREA       CHARACTER STRING. IT IS THE RESPONSIBLITY OF  *\n*      WHEN P1 = 8                        THE CALLING PROGRAM TO      *\n*                                         ENSURE THAT THIS AREA WILL  *\n*                                         ACCOMMODATE THE LONGEST     *\n*                                         RECORD TO BE READ.          *\n*                                                                     *\n* P4 - DD NAME          CHARACTER STRING                              *\n*      WHEN P1 = 0                                                    *\n*                                                                     *\n* RETURN CODE -                                                       *\n*      VALUES:                                                        *\n*      0   - REQUESTED FUNCTION COMPLETED WITHOUT ERROR               *\n*      4   - REQUESTED FUNCTION DID NOT COMPLETE FOR REASON:          *\n*            WHEN P1 = 0  FILE COULD NOT BE OPENED                    *\n*                      4  MEMBER WAS NOT FOUND                        *\n*                      8  END OF FILE ON CURRENT MEMBER               *\n*      8   - SERIOUS ERROR. PROCESSING SHOULD BE TERMINATED.          *\n*                                                                     *\n* EXAMPLE CALL FROM COBOL:                                            *\n*                                                                     *\n*      CALL 'NCZ93205' USING FUNC, MEMBER, INPUT-AREA DD-NAME         *\n*      IF RETURN-CODE = ZERO GO TO .....                              *\n*                                                                     *\n* THE SPECIAL REGISTER 'RETURN-CODE' SHOULD BE CLEARED TO ZERO BY     *\n* THE APPLICATION PROGRAM BEFORE PROGRAM TERMINATION OTHERWISE        *\n* IT MAY BE PROPAGATED UPWARDS TO OS WITH A NON ZERO VALUE.           *\n*                                                                     *\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*                                                                     *\n* NCZ93205.3 MESSAGES                                                 *\n*                                                                     *\n* NONE.                                                               *\n*                                                                     *\n*****                                                             *****\n         SPACE\n*****                                                             *****\n*                                                                     *\n* NCZ93205.4 ABEND CODES                                              *\n*                                                                     *\n* NONE. IT IS THE RESPOSIBILITY OF THE CALLING PROGRAM TO TERMINATE   *\n* AFTER A SERIOUS ERROR CONDITION.                                    *\n*                                                                     *\n*****                                                             *****\n         SPACE\n*****                                                             *****\n*                                                                     *\n* NCZ93205.5 IMPLEMENTATION METHOD                                    *\n*                                                                     *\n* MOVE TO MAC1.ASM AND PASMAL.                                        *\n*                                                                     *\n*****                                                             *****\n         SPACE\n*****                                                             *****\n*                                                                     *\n* NCZ93205.6 AMENDMENT HISTORY                                        *\n*                                                                     *\n* MAINTAIN THE RECORD BELOW.                                          *\n*                                                                     *\n* CHANGE HISTORY:                                                     *\n* DATE      INITS VERSION COMMENTS                                    *\n*                                                                     *\n* 17 NOV 82 RH    V01     CREATED                                     *\n*                                                                     *\n* SUGGESTED ENHANCEMENTS:                                             *\n*                                                                     *\n* NONE YET.                                                           *\n*                                                                     *\n* DD MMM YY WHO : COMMENTS                                            *\n*                                                                     *\n*****                                                             *****\n         EJECT\n*****                                                             *****\n*                                                                     *\n* NCZ93205.7 MODULARISATION DETAILS                                   *\n*                                                                     *\n* SIMPLE LINEAR STRUCTURE.                                            *\n* USES OPEN, FIND, CLOSE, READ, CHECK (BSAM).                         *\n*                                                                     *\n*****                                                             *****\n         SPACE\n*****                                                             *****\n*                                                                     *\n* NCZ93205.8 PROGRAM LOGIC OVERVIEW                                   *\n*                                                                     *\n* OMITTED. IT SHOULD BE NOTED THAT THIS PROGRAM HAS TO BE PRETTY      *\n* RUGGED. DO NOT ASSUME THAT ALL CALLS ARE IN LOGICAL SEQUENCE.       *\n*                                                                     *\n*****                                                             *****\n*                                                                     *\n* NCZ93205.9 MODIFICATION,  H. ZBIEGIEN 1/90                          *\n*  PASS DDNAME ON OPEN CALL                                           *\n*  FIX BUG, PGM USED TO PASS BACK 1 BYTE TOO MUCH                     *\n*                                                                     *\n*****                                                             *****\n         TITLE 'SUBROUTINE TO READ PARTITIONED DATASET MEMBERS         *\n               - PROGRAM PROLOGUE'\n*****                                                             *****\n*                                                                     *\n* ID:          NCZ93205 - SUBROUTINE TO READ PDS MEMBERS              *\n*                                                                     *\n* ENTRY INTFCE: STANDARD OS - SEE ABOVE.                              *\n*                                                                     *\n* EXIT  INTFCE: STANDARD OS - SEE ABOVE.                              *\n*                                                                     *\n* RETURN CODES:RC = 0       - OK                                      *\n*                                                                     *\n*              RC = 4       - REQUESTED FUNCTION DID NOT COMPLETE     *\n*                                                                     *\n*              RC = 8       - SERIOUS ERROR - TERMINATION ADVISED     *\n*                                                                     *\n* REG USAGE:   R0 -                                                   *\n*              R1 -                                                   *\n*              R2 -      -> P1  (FUNCTION)                            *\n*              R3 -      -> P2  (MEMBER)                              *\n*              R4 -      -> P3  (INPUT AREA)                          *\n*              R5 -      WORK: -> BUFFER                              *\n*              R6 -      WORK: -> RECORD                              *\n*              R7 -                                                   *\n*              R8 -                                                   *\n*              R9                                                     *\n*              R10 -                                                  *\n*              R11 -                                                  *\n*              R12 -     -> DCB                                       *\n*              R13 -     SAVE AREA + BASE                             *\n*              R14 -                                                  *\n*              R15 -                                                  *\n*                                                                     *\n*****                                                             *****\n         TITLE 'SUBROUTINE TO READ PARTITIONED DATASET MEMBERS         *\n               - PROGRAM CODE'\nNCZ93205 MSETUP 13\n         LA    R12,PDS\n         USING IHADCB,R12\n         LM    R2,R4,0(R1)\n         SPACE\n         L     R15,0(R2)               GET FUNCTION CODE\n         CH    R15,=H'0'               Q - OPEN ?\n         BE    P01                     Y\n         CH    R15,=H'4'               Q - FIND ?\n         BE    P02                     Y\n         CH    R15,=H'8'               Q - READ ?\n         BE    P03                     Y\n         CH    R15,=H'12'              Q - CLOSE ?\n         BE    P04                     Y\n         B     P99                     BAD FUNCTION CODE\n         SPACE\n*        OPEN DATASET\nP01      DS    0H\n         TM    DCBOFLGS,DCBOFOPN        Q - DATASET OPEN ?\n         BO    P99                      Y BOMB OUT\n         L     R5,12(R1)                GET DD NAME\n         MVC   DCBDDNAM,0(R5)           COPY DD NAME\n         OPEN  (PDS,INPUT)              OPEN IT\n         TM    DCBOFLGS,DCBOFOPN        Q - OK ?\n         BZ    P98                      N EXIT RC=4\n         CLI   DCBDSORG,DCBDSGPO        Q - IS THIS A PDS ?\n         BNE   P0105                    N GO CLOSE\n         TM    DCBRECFM,X'FF'-(DCBRECF+DCBRECBR+DCBRECCA) Q - RECFM ?\n         BZ    P0110                    OK\n         SPACE\nP0105    EQU   *\n         CLOSE PDS\n         B     P99\n         SPACE\nP0110    LH    R0,DCBBLKSI\n         GETMAIN R,LV=(0)               GET A BUFFER\n         ST    R1,BUFA\n         B     P97                      EXIT OK\n         SPACE\n*        FIND MEMBER\nP02      DS    0H\n         TM    DCBOFLGS,DCBOFOPN        Q - DATASET OPEN ?\n         BZ    P99                      N BOMB OUT\n         FIND  (12),(3),D               LOCATE MEMBER\n         LTR   R15,R15                  Q - OK ?\n         BNZ   P98                      N EXIT RC=4\n         NI    FLAGS,X'FF'-EOM          Y CLEAR END OF MEMBER FLAG\n         OI    FLAGS,DOREAD             SET FLAG TO DO READ\n         B     P97                      EXIT RC=0\n         EJECT\n*        GET NEXT RECORD FOR THIS MEMBER\nP03      DS    0H\n         TM    DCBOFLGS,DCBOFOPN        Q - DATASET OPEN ?\n         BZ    P99                      N - BOMB OUT\n         SPACE\n         TM    FLAGS,EOM                Q - EOM ALREADY ?\n         BO    P99                      Y BOMB OUT\n         SPACE\nP0305    L     R5,BUFA                  R5 -> INPUT BUFFER\n         L     R6,RECA                  R6 -> NEXT RECORD IN BUFFER\n         TM    FLAGS,DOREAD             Q - SHOULD WE READ NEXT BLOCK ?\n         BZ    P0310                    N\n         SPACE\n         READ  DECB1,                   READ A BLOCK OF RECORDS        *\n               SF,                                                     *\n               (12),                                                   *\n               (5),                                                    *\n               'S'\n         CHECK DECB1                    WAIT FOR IO TO COMPLETE\n         SPACE\n         LH    R10,DCBBLKSI             # OF BYTES WE COULD HAVE READ\n         L     R1,DCBIOBA\n         SH    R10,22(R1)               LESS # OF BYTES WE DID'NT READ\n         BZ    P03EOM                   NOTHING READ - MUST BE EOM\n         AR    R10,R5\n         ST    R10,BLOCKEND             SAVE ADDRESS END OF THIS BLOCK\n         NI    FLAGS,X'FF'-DOREAD       SET FLAG OFF - WE DID A READ\n         LR    R6,R5                    R6 -> FIRST RECORD IN BLOCK\n         SPACE\nP0310    LH    R15,DCBLRECL             GET RECORD LENGTH\n         BCTR  R15,0                    DECREMENT COUNT HPZ\n         EX    R15,EXMVC                MOVE RECORD TO INPUT AREA\n         LA    R15,1(R15)               ADD 1 BACK      HPZ\n         AR    R6,R15                   R6 -> NEXT RECORD IN BUFFER\n         C     R6,BLOCKEND              Q - END OF THIS BLOCK ?\n         BNL   P0320                    Y GO SET FLAG TO DO READ\n         SPACE\n         ST    R6,RECA                  SAVE CURRENT RECORD POINTER\n         B     P97                      EXIT RC=0\n         SPACE\nP0320    OI    FLAGS,DOREAD             DO READ FOR NEXT RECORD\n         B     P97                      EXIT RC=0\n         SPACE\nP03EOM   DS    0H\n         OI    FLAGS,EOM                INDICATE END OF MEMBER\n         B     P98                      EXIT RC = 4\n         EJECT\n*        CLOSE PDS\nP04      DS    0H\n         TM    DCBOFLGS,DCBOFOPN        Q - DATASET OPEN ?\n         BZ    P99                      N BOMB OUT\n         LH    R0,DCBBLKSI\n         L     R5,BUFA\n         FREEMAIN R,LV=(0),A=(5)\n         CLOSE PDS\n         SPACE\nP97      MCLEAR RC=0\nP98      MCLEAR RC=4\nP99      MCLEAR RC=8\n         SPACE\nPDS      DCB   DDNAME=PDS,DSORG=PO,MACRF=(R),EODAD=P03EOM\nFLAGS    DC    X'00'\nEOM      EQU   X'80'                    REACHED END OF CURRENT MEMBER\nDOREAD   EQU   X'40'                    INDICATES CURRENT BLOCK IS     *\n                                        EXHAUSTED\nEXMVC    MVC   0(0,R4),0(R6)            MOVE RECORD TO INPUT AREA\nBUFA     DS    F                        -> BUFFER\nRECA     DS    F                        -> CURRENT RECORD IN BUFFER\nBLOCKEND DS    F                        -> END OF CURRENT BLOCK\n         PRINT NOGEN\n         DCBD  DSORG=BS,DEVD=DA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "O$$DOC": {"ttr": 1542, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "OVERLAY DOCUMENTATION\n\nOVERLAYS ARE NORMALLY CREATED WITH THE OVERLAY GENERATION PROGRAM\nPRODUCT.  BUT WE DON'T HAVE THAT, SO I WROTE SOME SAS PROGRAMS THAT CAN\nBE USED TO CREATE THE OVERLAY.  THE SOURCE PARAMETER CARDS USED IN THE\nSAS PROGRAM ARE WHAT I STORED IN THE OVERLAY MEMBER IN THIS LIBRARY.\nELSEWHERE IN THIS LIBRARY IS THE ACTUAL SAS PROGRAM.\n\nO11UP    - USE FOR 1 UP PRINTING, PRINTS THE GRAY BARS\nO12UP    - USED FOR 2 UP PRINTING, ROTATED, PRINTS THE GRAY BARS AND BOX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "O11UP": {"ttr": 1544, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BMO 1UP                       BEGIN MEDIUM OVERLAY - OVERLAY NAME\nNOP                           NOP REC\nBAG                           BEGIN ACTIVE ENVIRONMENT\nMCF X1AG0004 ENDMCF           DEFINE CODED FONT NAMES, X1HPZ2\nPGD 13.87  IN 8.332 IN        PAGE DESCRIPTOR X BY Y\nCTC                           COMPOSED TEXT CONTROL\nCTD                           COMPOSED TEXT DESCRIPTOR\nEAG                           END ACTIVE ENVIRONMENT GROUP\nBCT                           BEGIN TEXT BLOCK\nCTX                           START COMPOSED TEXT\nAMI .3 IN                     ABSOLUTE MOVE INLINE\nSTO ACROSS                    SET TEXT ORIENTATION\nAMB .5   IN                   ABSOLUTE MOVE BASELINE\nSIM .3   IN                   ABSOLUTE MOVE INLINE\nSBI .125 IN                   SET BASE LINE INCREMENT\nSCFL 1   PATTERN              SET CODED FONT LOCAL, CALL IN FONT 1\nBLN  GET TO LINE 2            BEGIN LINE\nBLN   GET TO LINE 3\nRPS 134 1 a  LINE 3   repeat string, # of times, len of string, string\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 6\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE  9\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 12\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 15\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 18\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 21\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 24\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 27\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 30\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 33\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 36\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 39\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 42\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 45\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 48\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 51\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 54\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 57\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 60\nBLN\nBLN\nBLN\nRPS 134 1 a  LINE 63\nENDCTX                       PSEUDO OP CODE, END CTX RECORD\nECT                          END TEXT BLOCK\nEMO                          END MEDIUM OVERLAY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "O12UP": {"ttr": 1547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "BMO 2UP                           BEGIN MEDIUM OVERLAY, OVERLAY NAME\nNOP                               NOOP\nBAG                               BEGIN ACTIVE ENVIRONMENT GROUP\nMCF X2AG0004 ENDMCF               MAP CODED FONT, DEFINE FONT 1\nPGD 13.873 IN 7.955 IN            PAGE DESCRIPTOR, X BY Y\nCTC                               COMPOSED TEXT CONTROL\nCTD                               COMPOSED TEXT DESCRIPTOR\nEAG                               END ACTIVE ENVIRONMENT GROUP\nBCT                               BEGIN TEXT BLOCK\nCTX                               START COMPOSED TEXT\nSTO ACROSS                        SET TEXT ORIENTATION\nAMB .55  IN                       ABSOLUTE MOVE BASE LINE\nAMI .2  IN                        ABSOLUTE MOVE INLINE\nDIR 3233 PELS 1                   DRAW INLINE RULE, ACROSS PAGE\nDBR 1777 PELS 1                   DRAW BASE LINE RELATIVE, DOWN PAGE\nRMB 1776 PELS                     RELATIVE MOVE BASELINE\nDIR 3233 PELS 1                   DRAW INLINE RULE\nAMB .55  IN                       ABSOULUTE MOVE\nRMI 3232 PELS                     RELATIVE MOVE INLINE\nDBR 1777 PELS 1                   DRAW BASELINE RELATIVE\nRMI -1608 PELS\nDBR 1777 PELS 1\nAMI 0 IN                          RESET COORDINATES\nAMB 0 IN\nSTO DOWN                          SET TEXT ORIENTATION DOWN\nAMB .3   IN                       MOVE OVER\nSBI .1   IN BASE LINE INC         AND DOWN THE ROTATED PAGE\nSIM .55  IN SET INLINE MARGIN     SET INLINE MARGIN, X\nSCFL 1   PATTERN                  SET CODED FONT LOCAL, 1\nBLN  GET TO LINE 2                BEGIN LINE NEW\nBLN   GET TO LINE 3\nBLN   GET TO LINE 4\nRPS 74 1 ~  LINE 4   REPEAT STRING, # of times, len of string, string\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 8\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 12\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 16\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 20\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 24\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 28\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 32\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 36\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 40\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 44\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 48\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 52\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 56\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 60\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 64\nBLN  ONE FOR GOOD MEASURE\nAMB 7.02 IN   TO NEW \"PAGE\"\nBLN  GET TO LINE 2\nBLN   GET TO LINE 3\nBLN   GET TO LINE 4\nRPS 74 1 ~  LINE 4\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 8\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 12\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 16\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 20\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 24\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 28\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 32\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 36\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 40\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 44\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 48\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 52\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 56\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 60\nBLN\nBLN\nBLN\nBLN\nRPS 74 1 ~  LINE 64\nENDCTX                            END TEXT PSEUDO OP\nECT                               END TEXT BLOCK\nEMO                               END MEDIUM OVERLAY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "POSTERT": {"ttr": 1551, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$PT  JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426,LINECT=0\n//A EXEC PGM=POSTEZ\n//STEPLIB DD DSN=HPZ.TESTLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=W\n//* THE JOBPARM CARD MUST SPECIFY \"LINECT=0\"\n//* THE FIRST CARD CONTAINS TWO SWITCHES, THE FIRST CARD COLUMN IS AN\n//* P FOR BLACK ON WHITE PRINTING OR N FOR WHITE ON BLACK PRINTING\n//* THE SECOND CARD COLUMN IS BLANK IF YOU WANT THE CHARACTERS TO BE\n//* PRINTED WITH ITSELF OR THE CHARACTER ITSELF THAT YOU WANT TO USE\n//* INSTEAD OF X. IE (PH) WILL PRINT BLACK ON WHITE WITH \"H\" AS THE\n//* CHARACTER TO MAKE THE BLACK. IE (N ) WILL PRINT EACH CHARACTER OF\n//* THE MESSAGE WITH THE MESSAGE CHARACTER ITSELF, BLACK ON WHITE\n//* THE SECOND AND SUCCEEDING CARDS CONTAIN THE LENGTH OF THE MESSAGE\n//* IN COLUMNS 1 AND 2 (01-78) AND THE MESSAGE STARTING IN COL 3\n//* ANY NUMBER OF MESSAGE CARDS CAN BE ENTERED.\n//* THE MESSAGE CAN BE MADE UP OF THE FOLLOWING CHARACTERS; A-Z,0-9,\n//* BLANK,-.:=,;?'/()#%<>+$*,EXCLAMATION,VERTICAL BAR,LOGICAL NOT,\n//* CENT SIGN   NOTE @\"&,BRACES,UNDERSCORE  CAN NOT BE PRINTED\n//* THE () PARENTHESIS ACTUALLY COME OUT AS SQUARE BRACKETS\n//SYSIN DD *\nPX\n36ABCDEFGHIJKLMNOPQRSTUVWXYZ012345678\n22-.:=,;?'/()#%<>+$!\u00a2\u00ac|*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "POSTERT2": {"ttr": 1793, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$PT  JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426,LINECT=0\n//A EXEC PGM=POSTEZ\n//STEPLIB DD DSN=HPZ.TESTLIB,DISP=SHR\n//* THE SECOND AND SUCCEEDING CARDS CONTAIN THE LENGTH OF THE MESSAGE\n//SYSIN DD *\nPX\n11 GO BROWNS\n//SYSPRINT DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n//  DCB=(LRECL=133,BLKSIZE=133,RECFM=FA),\n//   SPACE=(TRK,(60,60))\n//*    PPFA SAMPLE JOB TO BUILD A PERF TO PERF FORMDEF\n//PPFA    EXEC PGM=AKQPPFA\n//STEPLIB DD DSN=SYSP.AKQMOD0,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n//* FORMLIB DD  DSN=AGPT.FDEFLIB,DISP=SHR\n//* PAGELIB DD  DSN=AGPT.PDEFLIB,DISP=SHR\n//PAGELIB DD UNIT=DISK,SPACE=(TRK,(5,5,5)),DSN=&&PLIB,DISP=(,PASS),\n//  DCB=(LRECL=8205,RECFM=VBM,BLKSIZE=8209,DSORG=PO)\n//FORMLIB DD UNIT=DISK,SPACE=(TRK,(5,5,5)),DSN=&&FLIB,DISP=(,PASS),\n//  DCB=(LRECL=8205,RECFM=VBM,BLKSIZE=8209,DSORG=PO)\n//SYSIN    DD  *\n /* CREATED H. ZBIEGIEN  11/89     */\n /* USE FOR PRINTING POSTERS */\n /* ONE PART OUTPUT OF 1485R1 PAPER 68 LINES */\n PAGEDEF POSTER\n    WIDTH 13.8 IN HEIGHT 8.5   IN\n    /* 8.5 INCHES - NO MARGINS, PERF TO PERF */\n    LINEONE 0 IN .1 IN   REPLACE YES;\n  /*24 PELS*/\n    FONT AOA; /* I CHOSE A BOLD FONT SO THAT IT LOOKS DARKER */\n    SETUNITS LINESP 8 LPI;\n\n    PAGEFORMAT P28B2 DIRECTION ACROSS;\n       PRINTLINE REPEAT  1 FONT AOA CHANNEL 1 POSITION MARGIN TOP;\n       PRINTLINE REPEAT 67 FONT AOA           POSITION MARGIN NEXT;\n//A EXEC PGM=INLINE,PARM='F1AGOGL P1POSTER' COPY PGM TO YOUR LIBRARY\n//ABC OUTPUT PAGEDEF=POSTER,FORMDEF=AGOGL,PRMODE=PAGE,\n//  DATACK=BLKCHAR\n//STEPLIB DD DSN=HPZ.TESTLIB,DISP=SHR <==USE YOUR OWN LIBRARY\n//SYSUDUMP DD SYSOUT=W\n//SYSOUT  DD SYSOUT=W\n//PDEFLIB DD DSN=&&PLIB(P1POSTER),DISP=SHR <== PAGEDEF\n//FDEFLIB DD DSN=AGPP.FDEFLIB(F1AGOGL),DISP=SHR <== FORMDEF\n//FILEOT DD SYSOUT=W,DCB=(LRECL=8205,RECFM=FBA,BLKSIZE=8209),\n//  OUTPUT=*.ABC\n//FILEIN DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "POSTER2": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$P   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//A EXEC AGASMCL,OUT=W,LIBRARY='HPZ.TESTLIB(POSTEZ)'\n//* EXEC AGASMC,OUT=W\n//ASM.SYSIN DD *\nPOSTER   CSECT\n* THIS PROGRAM WAS ON A CBT TAPE VERSION 275\n* I DISASSEMBLED THE PROGRAM, AND PUT IN SOME LOGICAL LABELS\n* I ALSO CORRECTED SOME BUGS IN THE PRINTING OF A VERTICAL BAR, LEFT\n* AND RIGHT PARENTHESIS, PERCENT AND CENT SIGN, ALONG WITH BUGS IN\n* PRINTING A PERIOD AND EXCLAMATION POINT AND THE LEFT AND RIGHT CORNER\n* BRACKETS.\n* I TOOK OUT MOST OF THE WTO AND ALL THE WTOR MACROS.  I REPLACED THEM\n* WITH CARD INPUT.  A ZERO RETURN CODE IS NOW PASSED ALSO.  THE PROGRAM\n* NO LONGER CONSISTS OF 4 CSECTS, JUST ONE\n* I CHANGE THE DOLLAR SIGN AND CENT SIGN SO THE BAR PORTION OF THE\n* LETTER WOULD EXTEND ABOVE AND BELOW THE LINE\n* I ADDED THE CODE FOR PRINTING AN \"*\"\n* I REWORKED THE BASE REGISTERS TO PROVIDE ROOM FOR FUTURE XTRA CODE\n*\n*  SAMPLE JCL\n*\n* //A EXEC PGM=POSTER\n* //STEPLIB DD DSN=HPZ.TESTLIB,DISP=SHR\n* //SYSPRINT DD SYSOUT=W\n* //SYSIN DD *\n* PX\n* 36ABCDEFGHIJKLMNOPQRSTUVWXYZ012345678\n* 22-.:=,;?'/()#%<>+$!\u00a2\u00ac|*\n* /*\n*\n* THE JOBPARM CARD MUST SPECIFY \"LINECT=0\"\n* THE FIRST CARD CONTAINS TWO SWITCHES, THE FIRST CARD COLUMN IS AN\n* P FOR BLACK ON WHITE PRINTING OR N FOR WHITE ON BLACK PRINTING\n* THE SECOND CARD COLUMN IS BLANK IF YOU WANT THE CHARACTERS TO BE\n* PRINTED WITH ITSELF OR THE CHARACTER ITSELF THAT YOU WANT TO USE\n* INSTEAD OF X. IE (PH) WILL PRINT BLACK ON WHITE WITH \"H\" AS THE\n* CHARACTER TO MAKE THE BLACK. IE (N ) WILL PRINT EACH CHARACTER OF\n* THE MESSAGE WITH THE MESSAGE CHARACTER ITSELF, BLACK ON WHITE\n* THE SECOND AND SUCCEEDING CARDS CONTAIN THE LENGTH OF THE MESSAGE\n* IN COLUMNS 1 AND 2 (01-78) AND THE MESSAGE STARTING IN COL 3\n* ANY NUMBER OF MESSAGE CARDS CAN BE ENTERED.\n* THE MESSAGE CAN BE MADE UP OF THE FOLLOWING CHARACTERS; A-Z,0-9,\n* BLANK,-.:=,;?'/()#%<>+$*,EXCLAMATION,VERTICAL BAR,LOGICAL NOT,\n* CENT SIGN   NOTE @\"&,BRACES,UNDERSCORE  CAN NOT BE PRINTED\n* THE () PARENTHESIS ACTUALLY COME OUT AS SQUARE BRACKETS\n* HAROLD ZBIEGIEN OCT 87, AMERICAN GREETINGS CORP.\n*\n* REGISTER USAGE\n*  R0    STD\n*  R1    NOT USED, STD\n*  R2    POINTS TO CURRENT CHARACTER TO PRINT\n*  R3    ADDRESS OF PRNT1X5 (PRINT LINES 1 THRU 5)\n*  R4    ADDRESS OF PRNTLOOP (PRINT LINE 1 X TIMES)\n*  R5    CONTAINS COUNT OF NUMBER OF TIMES TO PRINT LINE 1\n*  R6    SUBROUTINE LINK REGISTER\n*  R7    NOT USED\n*  R8    SECONDARY LINK REGISTER FOR PART-OF-LETTER SUBROUTINES\n*  R9    BASE\n*  R10   BASE\n*  R11   BASE\n*  R12   BASE\n*  R13   SAVE\n*  R14   STD\n*  R15   STD\n*\n         STM   R14,R12,12(R13)             SAVE REGS\n         BALR  R9,R0                       ADDRESS SET\n         USING *,R9\n         L     R10,ADCONP2\n         USING POSTER+4096,R10\n         L     R11,ADCONP3\n         USING POSTER+8192,R11\n         ST    R13,SAVEAREA+4\n         LR    R12,R13\n         LA    R13,SAVEAREA\n         ST    R13,8(R12)\n         L     R12,ADCONP4\n         USING POSTER+12288,R12\n         LA    R3,PRNT1X5\n         LA    R4,PRNTLOOP\n         OPEN  (SYSPRINT,(OUTPUT))     OPEN FILES\n         OPEN  (SYSIN,(INPUT))\nGETOPTNS MVI   POSNEG,C'P'             INITIALIZE, MAY NOT BE NEEDED\n         MVI   CHARORX,C' '\n         MVI   OPTSECB,X'00'\n         GET   SYSIN,CARD              GET FIRST CARD WITH OPTIONS\n         MVC   POSNEG(2),CARD\n         OI    POSNEG,X'40'            UPPER CASE ONLY\n         CLI   POSNEG,C'P'             CHECK\n         BE    GETMSG\n         CLI   POSNEG,C'N'\n         BE    GETMSG\n         WTO   'BAD POS-NEG VALUE'     DISPLAY ERROR MESSAGE\n         B     RETURN                  AND EXIT PROGRAM\nGETMSG   LA    R2,MESSAGE              SET UP MESSAGE ARES\n         MVI   MSGECB,X'00'\n         MVI   0(R2),X'00'\n         MVC   1(127,R2),0(R2)\nGETCARD  GET   SYSIN,CARD               GET RECORD                      00038\n         CLI   INLL,C'0'                CHECK NUMERIC                   00039\n         BL    NOLENGTH                                                 00040\n         CLI   INLL,C'9'                                                00041\n         BH    NOLENGTH                                                 00042\n         CLI   INLL+1,C'0'                                              00043\n         BL    NOLENGTH                                                 00044\n         CLI   INLL+1,C'9'                                              00045\n         BH    NOLENGTH                                                 00046\n         PACK  DOUBLE,INLL              PACK LENGTH                     00047\n         CVB   R2,DOUBLE                                                00048\n         C     R2,=F'78'                SEE IF LARGER THAN 78           00049\n         BH    NOLENGTH                                                 00050\n         B     MOVECRDM                                                 00051\nNOLENGTH WTO   'BAD LENGTH VALUE'      DISPLAY MESSAGE                  00052\n         B     RETURN                  AND EXIT PROGRAM\nMOVECRDM BCTR  R2,0\n         EX    R2,MOVEMSG\n         LA    R2,MESSAGE\n         MVI   SWITCH,X'FF'\nCHKMSG   TM    0(R2),X'FF'             CHECK FOR NULL CHARACTER\n         BZ    CHKEOM\n         CLI   0(R2),C'$'              SEE IF DOLLAR\n         BE    CHEKEND\n         B     POSTER2\nNEXTCHAR BAL   R6,INITPT2                  PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\nINCRMSG  LA    R2,1(R2)\n         B     CHKMSG\nCHKEOM   TM    SWITCH,X'FF'\n         BZ    GETMSG\n         MVI   SWITCH,X'00'\n         PUT   SYSPRINT,BLANKL\n         LA    R2,MESSAGE\n         B     CHKMSG\nCHEKEND  CLI   1(R2),C'$'\n         BC    6,LETTR5B\n         CLI   2(R2),C'$'\n         BC    6,LETTR5B\n         TM    SWITCH,X'FF'\n         BZ    RETURN\n         MVI   SWITCH,X'00'\n         PUT   SYSPRINT,BLANKL\n         LA    R2,MESSAGE\n         B     CHKMSG\nBADCHAR  MVC   A000XX+18(1),0(R2)\n         CNOP  0,4\nA000XX   WTO   'CHARACTER   NOT AVAILABLE. RE ENTER MESSAGE'\n         B     GETMSG\nEOF      DS    0H\nRETURN   CLOSE (SYSPRINT)\n         CLOSE (SYSIN)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)             RESTORE REGS\n         SR    R15,R15                     ZERO RETURN CODE\n         BR    R14                         EXIT\nSAVEAREA DC    18F'0'\nOPTSECB  DC    F'0'\nMSGECB   DC    F'0'\nSWITCH   DC    X'FF'\nPOSNEG   DC    C'P'\nCHARORX  DC    X'00'\nPATRNR1  DC    X'00'         PATTERN RECORD 1\nPATPL1   DC    XL131'00'\nPATRNR2  DC    X'00'         PATTERN RECORD 2\nPATPL2   DC    XL131'00'\nPATPL2X  EQU   PATPL2+6\nSAVPTRN  DC    XL131'00'\n         DC    X'00'\nREC1     DC    C' '\nPRNTLN1  DC    XL132'00'\nREC2     DC    C' '\nPRNTLN2  DC    XL132'00'\nREC3     DC    C' '\nPRNTLN3  DC    XL132'00'\nREC4     DC    C' '\nPRNTLN4  DC    XL132'00'\nREC5     DC    C' '\nPRNTLN5  DC    XL132'00'\n         DC    XL20'00'\nMESSAGE  DC    XL132'00'\nADCONP2  DC    A(POSTER+4096)\nADCONP3  DC    A(POSTER+8192)\nADCONP4  DC    A(POSTER+12288)\nSETUP    TM    SWITCH,X'FF'\n         BO    INCRMSG\n         CLI   CHARORX,C' '\n         BE    CHECKPN\n         MVC   CHAR(1),CHARORX\nCHECKPN  CLI   POSNEG,C'P'\n         BE    CHKPATN\n         MVC   PATRNR2,CHAR\n         MVC   PATPL2,PATRNR2\n         MVI   PATRNR1,C' '\n         MVC   PATPL1,PATRNR1\n         MVC   SAVPTRN(132),PATRNR1\n         B     INITPT2\nCHKPATN  MVC   PATRNR1,CHAR\n         MVC   PATPL1,PATRNR1\n         MVC   SAVPTRN,PATRNR1\n         MVI   PATRNR2,C' '\n         MVC   PATPL2,PATRNR2\nINITPT2  MVC   PRNTLN1,PATRNR2    INITIALIZE WITH PATTERN2\nINIT2345 MVC   PRNTLN2,PRNTLN1\n         MVC   PRNTLN3,PRNTLN1\n         MVC   PRNTLN4,PRNTLN1\n         MVC   PRNTLN5,PRNTLN1\n         LA    R5,7\n         BR    R6\nCHAR     DC    H'0'\nPRNT1X5  PUT   SYSPRINT,REC1\n         PUT   SYSPRINT,REC2\n         PUT   SYSPRINT,REC3\n         PUT   SYSPRINT,REC4\n         PUT   SYSPRINT,REC5\n         BR    R6\nPRNTLOOP PUT   SYSPRINT,REC1\n         BCT   R5,PRNTLOOP\n         BR    R6\nSYSPRINT DCB   MACRF=PMC,DDNAME=SYSPRINT,BLKSIZE=133,LRECL=133,        X\n               DSORG=PS,RECFM=FA,EROPT=ACC\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,EODAD=EOF,DSORG=PS\nMOVEMSG  MVC   MESSAGE(1),INMSG\nCARD     DS    0CL80\nINLL     DS    CL2\nINMSG    DS    CL78\nDOUBLE   DS    D\n         LTORG\nPOSTER2  DS    0H\n         OI    0(R2),X'40'\n         CLI   0(R2),C'A'\n         BE    LETTERA\n         CLI   0(R2),C' '\n         BE    POSTER3\n         CLI   0(R2),C'E'\n         BE    LETTERE\n         CLI   0(R2),C'I'\n         BE    LETTERI\n         CLI   0(R2),C'O'\n         BE    LETTERO\n         CLI   0(R2),C'U'\n         BE    LETTERU\n         CLI   0(R2),C'B'\n         BE    LETTERB\n         CLI   0(R2),C'C'\n         BE    LETTERC\n         CLI   0(R2),C'D'\n         BE    LETTERD\n         CLI   0(R2),C'F'\n         BE    LETTERF\n         CLI   0(R2),C'G'\n         BE    LETTERG\n         CLI   0(R2),C'H'\n         BE    LETTERH\n         CLI   0(R2),C'J'\n         BE    LETTERJ\n         CLI   0(R2),C'K'\n         BE    LETTERK\n         CLI   0(R2),C'L'\n         BE    LETTERL\n         CLI   0(R2),C'M'\n         BE    LETTERM\n         CLI   0(R2),C'N'\n         BE    LETTERN\n         CLI   0(R2),C'P'\n         BE    LETTERP\n         CLI   0(R2),C'Q'\n         BE    LETTERQ\n         CLI   0(R2),C'R'\n         BE    LETTERR\n         CLI   0(R2),C'S'\n         BE    LETTERS\n         CLI   0(R2),C'T'\n         BE    LETTERT\n         CLI   0(R2),C'V'\n         BE    LETTERV\n         CLI   0(R2),C'W'\n         BE    LETTERW\n         CLI   0(R2),C'X'\n         BE    LETTERX\n         CLI   0(R2),C'Y'\n         BE    LETTERY\n         CLI   0(R2),C'Z'\n         BE    LETTERZ\n         CLI   0(R2),C'0'\n         BE    LETTER0\n         CLI   0(R2),C'1'\n         BE    LETTER1\n         CLI   0(R2),C'2'\n         BE    LETTER2\n         CLI   0(R2),C'3'\n         BE    LETTER3\n         CLI   0(R2),C'4'\n         BE    LETTER4\n         CLI   0(R2),C'5'\n         BE    LETTER5\n         CLI   0(R2),C'6'\n         BE    LETTER6\n         CLI   0(R2),C'7'\n         BE    LETTER7\n         CLI   0(R2),C'8'\n         BE    LETTER8\n         CLI   0(R2),C'9'\n         BE    LETTER9\n         CLI   0(R2),C'-'\n         BE    LETTRX60\n         CLI   0(R2),X'7E'\n         BE    LETTRX7E\n         CLI   0(R2),C'.'\n         BE    LETTRX4B\n         CLI   0(R2),C':'\n         BE    LETTRX7A\n         CLI   0(R2),C','\n         BE    LETTRX6B\n         CLI   0(R2),C';'\n         BE    LETTRX5E\n         CLI   0(R2),C'?'\n         BE    LETTRX6F\n         CLI   0(R2),X'5A' EXCLMATION MARK\n         BE    LETTRX5A\n         CLI   0(R2),X'7D' APPOSTROPHE\n         BE    LETTRX7D\n         CLI   0(R2),C'/'\n         BE    LETTRX61\n         CLI   0(R2),X'4F' VERTICAL BAR\n         BE    LETTRX4F\n         CLI   0(R2),C'('\n         BE    LETTRX4D\n         CLI   0(R2),C')'\n         BE    LETTRX5D\n         CLI   0(R2),C'#'\n         BE    LETTRX7B\n         CLI   0(R2),C'%'\n         BE    LETTRX6C\n         CLI   0(R2),X'4A' CENT SIGN\n         BE    LETTRX4A\n         CLI   0(R2),X'5F' LOGICAL NOT\n         BE    LETTRX5F\n         CLI   0(R2),C'<'\n         BE    LETTRX4C\n         CLI   0(R2),C'>'\n         BE    LETTRX6E\n         CLI   0(R2),C'+'\n         BE    LETTRX4E\n         CLI   0(R2),C'*'\n         BE    LETTRX5C\n         B     BADCHAR\nLETTR5B  MVI   CHAR,C'X'      DOLLAR\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LETSSUB                  PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+1(131),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1(132),PRNTLN2\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     LETSYSUB\nLETTER0  MVI   CHAR,C'0'\n         BAL   R6,SETUP                PERFORM\n         B     LETOSUB\nLETTER1  MVI   CHAR,C'1'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(18),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+112(6),PATRNR1\n         MVC   PRNTLN2+112(8),PATRNR1\n         MVC   PRNTLN3+112(11),PATRNR1\n         MVC   PRNTLN4+112(13),PATRNR1\n         MVC   PRNTLN5+112(16),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(18),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTER2  MVI   CHAR,C'2'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(51),PATRNR1\n         MVC   PRNTLN2+4(53),PATRNR1\n         MVC   PRNTLN3+4(56),PATRNR1\n         MVC   PRNTLN4+4(58),PATRNR1\n         MVC   PRNTLN5+4(61),PATRNR1\n         MVC   PRNTLN1+104(1),PATRNR1\n         MVC   PRNTLN2+104(3),PATRNR1\n         MVC   PRNTLN3+104(6),PATRNR1\n         MVC   PRNTLN4+104(8),PATRNR1\n         MVC   PRNTLN5+104(11),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(63),PATRNR1\n         MVC   PRNTLN2+4(66),PATRNR1\n         MVC   PRNTLN3+4(68),PATRNR1\n         MVC   PRNTLN4+4(71),PATRNR1\n         MVC   PRNTLN5+4(73),PATRNR1\n         MVC   PRNTLN1+104(13),PATRNR1\n         MVC   PRNTLN2+104(16),PATRNR1\n         MVC   PRNTLN3+104(18),PATRNR1\n         MVC   PRNTLN4+104(21),PATRNR1\n         MVC   PRNTLN5+104(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(75),PATRNR1\n         MVC   PRNTLN1+104(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+29(2),PATRNR2\n         MVC   PRNTLN2+29(4),PATRNR2\n         MVC   PRNTLN3+29(7),PATRNR2\n         MVC   PRNTLN4+29(9),PATRNR2\n         MVC   PRNTLN5+29(12),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(14),PATRNR2\n         MVC   PRNTLN2+29(17),PATRNR2\n         MVC   PRNTLN3+29(19),PATRNR2\n         MVC   PRNTLN4+29(22),PATRNR2\n         MVC   PRNTLN5+29(24),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(25),PATRNR2\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     LETPSUB\nLETTER3  MVI   CHAR,C'3'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+66(1),PATRNR1\n         MVC   PRNTLN2+63(7),PATRNR1\n         MVC   PRNTLN3+61(11),PATRNR1\n         MVC   PRNTLN4+58(17),PATRNR1\n         MVC   PRNTLN5+56(21),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     LETBSUB\nLETTER4  MVI   CHAR,C'4'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(75),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(50),PATRNR2\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+54(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTER5  MVI   CHAR,C'5'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+54(75),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(25),PATRNR2\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INIT2345                PERFORM\n         B     LETSYSUB\nLETTER6  MVI   CHAR,C'6'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(51),PATRNR1\n         MVC   PRNTLN2+38(57),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+33(67),PATRNR1\n         MVC   PRNTLN5+31(71),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(77),PATRNR1\n         MVC   PRNTLN2+26(81),PATRNR1\n         MVC   PRNTLN3+23(87),PATRNR1\n         MVC   PRNTLN4+21(91),PATRNR1\n         MVC   PRNTLN5+18(97),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(101),PATRNR1\n         MVC   PRNTLN2+13(107),PATRNR1\n         MVC   PRNTLN3+11(111),PATRNR1\n         MVC   PRNTLN4+8(117),PATRNR1\n         MVC   PRNTLN5+6(121),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+79(2),PATRNR2\n         MVC   PRNTLN2+79(4),PATRNR2\n         MVC   PRNTLN3+79(7),PATRNR2\n         MVC   PRNTLN4+79(9),PATRNR2\n         MVC   PRNTLN5+79(12),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(14),PATRNR2\n         MVC   PRNTLN2+79(17),PATRNR2\n         MVC   PRNTLN3+79(19),PATRNR2\n         MVC   PRNTLN4+79(22),PATRNR2\n         MVC   PRNTLN5+79(24),PATRNR2\n         MVC   PRNTLN1+40(4),PATRNR2\n         MVC   PRNTLN2+37(9),PATRNR2\n         MVC   PRNTLN3+35(13),PATRNR2\n         MVC   PRNTLN4+32(19),PATRNR2\n         MVC   PRNTLN5+30(23),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(25),PATRNR2\n         MVC   PRNTLN1+79(25),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     LETSYSUB\nLETTER7  MVI   CHAR,C'7'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         LA    R8,LET7YSUB\nLET7WSUB MVC   PRNTLN1+104(25),PATRNR1\nLET7XSUB MVC   PRNTLN1+4(13),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN2+4(16),PATRNR1\n         MVC   PRNTLN3+4(18),PATRNR1\n         MVC   PRNTLN4+4(21),PATRNR1\n         MVC   PRNTLN5+4(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BR    R8\nLET7YSUB LA    R8,LETZXSUB\nLET7ZSUB MVC   PRNTLN1+4(51),PATPL2X+123\n         MVC   PRNTLN2+4(53),PATPL2X+121\n         MVC   PRNTLN3+4(56),PATPL2X+118\n         MVC   PRNTLN4+4(58),PATPL2X+116\n         MVC   PRNTLN5+4(61),PATPL2X+113\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(63),PATPL2X+111\n         MVC   PRNTLN2+4(66),PATPL2X+108\n         MVC   PRNTLN3+4(68),PATPL2X+106\n         MVC   PRNTLN4+4(71),PATPL2X+103\n         MVC   PRNTLN5+4(73),PATPL2X+101\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         B     LETZSUB\nLETTER8  MVI   CHAR,C'8'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(1),PATRNR1\n         MVC   PRNTLN2+38(7),PATRNR1\n         MVC   PRNTLN3+36(11),PATRNR1\n         MVC   PRNTLN4+33(17),PATRNR1\n         MVC   PRNTLN5+31(21),PATRNR1\n         MVC   PRNTLN1+91(1),PATRNR1\n         MVC   PRNTLN2+88(7),PATRNR1\n         MVC   PRNTLN3+86(11),PATRNR1\n         MVC   PRNTLN4+83(17),PATRNR1\n         MVC   PRNTLN5+81(21),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(27),PATRNR1\n         MVC   PRNTLN2+26(31),PATRNR1\n         MVC   PRNTLN3+23(37),PATRNR1\n         MVC   PRNTLN4+21(41),PATRNR1\n         MVC   PRNTLN5+18(47),PATRNR1\n         MVC   PRNTLN1+78(27),PATRNR1\n         MVC   PRNTLN2+76(31),PATRNR1\n         MVC   PRNTLN3+73(37),PATRNR1\n         MVC   PRNTLN4+71(41),PATRNR1\n         MVC   PRNTLN5+68(47),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(101),PATRNR1\n         MVC   PRNTLN2+13(107),PATRNR1\n         MVC   PRNTLN3+11(111),PATRNR1\n         MVC   PRNTLN4+8(117),PATRNR1\n         MVC   PRNTLN5+6(121),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+40(4),PATRNR2\n         MVC   PRNTLN2+37(10),PATRNR2\n         MVC   PRNTLN3+35(14),PATRNR2\n         MVC   PRNTLN4+32(20),PATRNR2\n         MVC   PRNTLN5+30(24),PATRNR2\n         MVC   PRNTLN1+90(4),PATRNR2\n         MVC   PRNTLN2+87(10),PATRNR2\n         MVC   PRNTLN3+85(14),PATRNR2\n         MVC   PRNTLN4+82(20),PATRNR2\n         MVC   PRNTLN5+80(24),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(26),PATRNR2\n         MVC   PRNTLN1+79(26),PATRNR2\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     LETBSUB\nLETTER9  MVI   CHAR,C'9'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+91(1),PATRNR1\n         MVC   PRNTLN2+88(7),PATRNR1\n         MVC   PRNTLN3+86(11),PATRNR1\n         MVC   PRNTLN4+83(17),PATRNR1\n         MVC   PRNTLN5+81(21),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+78(27),PATRNR1\n         MVC   PRNTLN2+76(31),PATRNR1\n         MVC   PRNTLN3+73(37),PATRNR1\n         MVC   PRNTLN4+71(41),PATRNR1\n         MVC   PRNTLN5+68(47),PATRNR1\n         MVC   PRNTLN1+28(1),PATRNR1\n         MVC   PRNTLN2+26(3),PATRNR1\n         MVC   PRNTLN3+23(6),PATRNR1\n         MVC   PRNTLN4+21(8),PATRNR1\n         MVC   PRNTLN5+18(11),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+66(51),PATRNR1\n         MVC   PRNTLN2+63(57),PATRNR1\n         MVC   PRNTLN3+61(61),PATRNR1\n         MVC   PRNTLN4+58(67),PATRNR1\n         MVC   PRNTLN5+56(71),PATRNR1\n         MVC   PRNTLN1+16(13),PATRNR1\n         MVC   PRNTLN2+13(16),PATRNR1\n         MVC   PRNTLN3+11(18),PATRNR1\n         MVC   PRNTLN4+8(21),PATRNR1\n         MVC   PRNTLN5+6(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+54(76),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+90(4),PATRNR2\n         MVC   PRNTLN2+87(10),PATRNR2\n         MVC   PRNTLN3+85(14),PATRNR2\n         MVC   PRNTLN4+82(20),PATRNR2\n         MVC   PRNTLN5+80(24),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(26),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(1),PATRNR1\n         MVC   PRNTLN2+79(3),PATRNR1\n         MVC   PRNTLN3+79(6),PATRNR1\n         MVC   PRNTLN4+79(8),PATRNR1\n         MVC   PRNTLN5+79(12),PATRNR1\n         B     LETDSUB\nLETTRX60 MVI   CHAR,C'X'    MINUS\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(25),PATRNR1\n         LA    R5,35\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX7E MVI   CHAR,C'X'    EQUAL\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(25),PATRNR1\n         MVC   PRNTLN1+79(25),PATRNR1\n         LA    R5,35\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX4B MVI   CHAR,C'X'    PERIOD\n         BAL   R6,SETUP\nLET4BSUB MVC   PRNTLN1+4(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX7A MVI   CHAR,C'X'    COLON\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+104(25),PATRNR1\n         B     LET4BSUB\nLETTRX6B MVI   CHAR,C'X'    COMMA\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\nLET6BSUB MVC   PRNTLN1+10(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+4(1),PATRNR1\n         MVC   PRNTLN2+4(2),PATRNR1\n         MVC   PRNTLN3+4(3),PATRNR1\n         MVC   PRNTLN4+4(4),PATRNR1\n         MVC   PRNTLN5+4(5),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(6),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN2+4(2),PATRNR2\n         MVC   PRNTLN3+4(3),PATRNR2\n         MVC   PRNTLN4+4(4),PATRNR2\n         MVC   PRNTLN5+4(5),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX5E MVI   CHAR,C'X'    SEMI-COLON\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+104(25),PATRNR1\n         B     LET6BSUB\nLETTRX6F MVI   CHAR,C'X'    QUESTION MARK\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+40(38),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(51),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     LETPSUB\nLETTRX5A MVI   CHAR,C'X'    EXCLAMATION MARK\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+40(89),PATRNR1\n         B     LET4BSUB\nLETTRX7D MVI   CHAR,C'X'    APPOSTROPHE\n         BAL   R6,SETUP                PERFORM\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     INCRMSG     NO SPACE, NORMALLY 7 BLANK LINES\nLETTRX61 MVI   CHAR,C'X'    SLASH\n         BAL   R6,SETUP                PERFORM\n         LA    R8,LET7YSUB\n         B     LET7XSUB\nLETTRX4F MVI   CHAR,C'X'    VERTICAL BAR\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX4D MVI   CHAR,C'X'    LEFT PARENTHIS, LEFT SQ BRACKET\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+19(95),PATRNR2\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX5D MVI   CHAR,C'X'    RIGHT PARENTHIS, RIGHT SQ BRACKET\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         MVC   PRNTLN1+19(95),PATRNR2\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX7B MVI   CHAR,C'X'    POUND SIGN\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(25),PATRNR1\n         MVC   PRNTLN1+79(25),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         MVC   PRNTLN1+79(25),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         MVC   PRNTLN1+79(25),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX6C MVI   CHAR,C'X'    PERCENT SIGN\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LET7WSUB                 PERFORM\n         MVC   PRNTLN1+100(30),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         BAL   R8,LET7ZSUB                 PERFORM\n         MVC   PRNTLN1+4(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         B     LETZXSUB\nLETTRX4A MVI   CHAR,C'X'    CENT SIGN\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LETCSUB                  PERFORM\n         MVC   PRNTLN1+1(131),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(75),PATRNR2\n         B     LETCYSUB\nLETTRX6E MVI   CHAR,C'X'   > GREATER THAN\n         BAL   R6,SETUP                PERFORM\n         MVC   PRNTLN1+4(125),PATRNR1\n         MVC   PRNTLN2+6(121),PATRNR1\n         MVC   PRNTLN3+9(115),PATRNR1\n         MVC   PRNTLN4+12(109),PATRNR1\n         MVC   PRNTLN5+15(103),PATRNR1\n         MVC   PRNTLN1+43(47),PATRNR2\n         MVC   PRNTLN2+46(41),PATRNR2\n         MVC   PRNTLN3+48(37),PATRNR2\n         MVC   PRNTLN4+51(31),PATRNR2\n         MVC   PRNTLN5+53(27),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+17(99),PATRNR1\n         MVC   PRNTLN2+20(93),PATRNR1\n         MVC   PRNTLN3+22(89),PATRNR1\n         MVC   PRNTLN4+25(83),PATRNR1\n         MVC   PRNTLN5+27(79),PATRNR1\n         MVC   PRNTLN1+56(21),PATRNR2\n         MVC   PRNTLN2+58(17),PATRNR2\n         MVC   PRNTLN3+61(11),PATRNR2\n         MVC   PRNTLN4+63(7),PATRNR2\n         MVC   PRNTLN5+66(1),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+30(73),PATRNR1\n         MVC   PRNTLN2+33(67),PATRNR1\n         MVC   PRNTLN3+35(63),PATRNR1\n         MVC   PRNTLN4+38(57),PATRNR1\n         MVC   PRNTLN5+41(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+43(47),PATRNR1\n         MVC   PRNTLN2+46(41),PATRNR1\n         MVC   PRNTLN3+48(37),PATRNR1\n         MVC   PRNTLN4+51(31),PATRNR1\n         MVC   PRNTLN5+53(27),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+56(21),PATRNR1\n         MVC   PRNTLN2+58(17),PATRNR1\n         MVC   PRNTLN3+61(11),PATRNR1\n         MVC   PRNTLN4+63(7),PATRNR1\n         MVC   PRNTLN5+66(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX4C MVI   CHAR,C'X'   < LESS THAN\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+66(1),PATRNR1\n         MVC   PRNTLN2+63(7),PATRNR1\n         MVC   PRNTLN3+61(11),PATRNR1\n         MVC   PRNTLN4+58(17),PATRNR1\n         MVC   PRNTLN5+56(21),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+53(27),PATRNR1\n         MVC   PRNTLN2+51(31),PATRNR1\n         MVC   PRNTLN3+48(37),PATRNR1\n         MVC   PRNTLN4+46(41),PATRNR1\n         MVC   PRNTLN5+43(47),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(51),PATRNR1\n         MVC   PRNTLN2+38(57),PATRNR1\n         MVC   PRNTLN3+35(63),PATRNR1\n         MVC   PRNTLN4+33(67),PATRNR1\n         MVC   PRNTLN5+30(73),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+27(79),PATRNR1\n         MVC   PRNTLN2+25(83),PATRNR1\n         MVC   PRNTLN3+22(89),PATRNR1\n         MVC   PRNTLN4+20(93),PATRNR1\n         MVC   PRNTLN5+17(99),PATRNR1\n         MVC   PRNTLN1+66(1),PATRNR2\n         MVC   PRNTLN2+63(7),PATRNR2\n         MVC   PRNTLN3+61(11),PATRNR2\n         MVC   PRNTLN4+58(17),PATRNR2\n         MVC   PRNTLN5+56(21),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+15(103),PATRNR1\n         MVC   PRNTLN2+12(109),PATRNR1\n         MVC   PRNTLN3+9(115),PATRNR1\n         MVC   PRNTLN4+6(121),PATRNR1\n         MVC   PRNTLN5+4(125),PATRNR1\n         MVC   PRNTLN1+53(27),PATRNR2\n         MVC   PRNTLN2+51(31),PATRNR2\n         MVC   PRNTLN3+48(37),PATRNR2\n         MVC   PRNTLN4+46(41),PATRNR2\n         MVC   PRNTLN5+43(47),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX5F MVI   CHAR,C'X'   LOGICAL NOT\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,30\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+84(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX4E MVI   CHAR,C'X'   PLUS SIGN\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(25),PATRNR1\n         LA    R5,25\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+14(105),PATRNR1\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+54(25),PATRNR1\n         LA    R5,25\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nPOSTER3  DS    0H\n         MVI   CHAR,C'M'\n         BAL   R6,SETUP                PERFORM\n         LA    R5,70\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     INCRMSG\nLETTERB  MVI   CHAR,C'B'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(24),PATRNR2\n         MVC   PRNTLN1+79(24),PATRNR2\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\nLETBSUB  BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+29(1),PATRNR1\n         MVC   PRNTLN2+29(3),PATRNR1\n         MVC   PRNTLN3+29(6),PATRNR1\n         MVC   PRNTLN4+29(8),PATRNR1\n         MVC   PRNTLN5+29(11),PATRNR1\n         MVC   PRNTLN1+53(26),PATRNR1\n         MVC   PRNTLN2+51(30),PATRNR1\n         MVC   PRNTLN3+48(36),PATRNR1\n         MVC   PRNTLN4+46(40),PATRNR1\n         MVC   PRNTLN5+43(45),PATRNR1\n         MVC   PRNTLN1+103(20),PATRNR1\n         MVC   PRNTLN2+101(20),PATRNR1\n         MVC   PRNTLN3+98(20),PATRNR1\n         MVC   PRNTLN4+96(20),PATRNR1\n         MVC   PRNTLN5+94(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1(132),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+5(121),PATRNR1\n         MVC   PRNTLN2+7(116),PATRNR1\n         MVC   PRNTLN3+10(110),PATRNR1\n         MVC   PRNTLN4+12(106),PATRNR1\n         MVC   PRNTLN5+15(100),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1(132),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+17(46),PATRNR1\n         MVC   PRNTLN2+20(40),PATRNR1\n         MVC   PRNTLN3+22(36),PATRNR1\n         MVC   PRNTLN4+25(30),PATRNR1\n         MVC   PRNTLN5+27(26),PATRNR1\n         MVC   PRNTLN1+69(46),PATRNR1\n         MVC   PRNTLN2+71(40),PATRNR1\n         MVC   PRNTLN3+73(36),PATRNR1\n         MVC   PRNTLN4+76(30),PATRNR1\n         MVC   PRNTLN5+78(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1(132),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+30(20),PATRNR1\n         MVC   PRNTLN2+32(16),PATRNR1\n         MVC   PRNTLN3+35(10),PATRNR1\n         MVC   PRNTLN4+37(6),PATRNR1\n         MVC   PRNTLN5+39(1),PATRNR1\n         MVC   PRNTLN1+81(20),PATRNR1\n         MVC   PRNTLN2+83(16),PATRNR1\n         MVC   PRNTLN3+86(10),PATRNR1\n         MVC   PRNTLN4+88(6),PATRNR1\n         MVC   PRNTLN5+91(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERE  MVI   CHAR,C'E'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(24),PATRNR2\n         MVC   PRNTLN1+78(24),PATRNR2\n         LA    R5,30\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(60),PATRNR2\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERA  MVI   CHAR,C'A'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(63),PATRNR1\n         MVC   PRNTLN2+4(66),PATRNR1\n         MVC   PRNTLN3+4(68),PATRNR1\n         MVC   PRNTLN4+4(70),PATRNR1\n         MVC   PRNTLN5+4(72),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(75),PATRNR1\n         MVC   PRNTLN2+4(77),PATRNR1\n         MVC   PRNTLN3+4(80),PATRNR1\n         MVC   PRNTLN4+4(82),PATRNR1\n         MVC   PRNTLN5+4(85),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(87),PATRNR1\n         MVC   PRNTLN2+4(90),PATRNR1\n         MVC   PRNTLN3+4(92),PATRNR1\n         MVC   PRNTLN4+4(95),PATRNR1\n         MVC   PRNTLN5+4(97),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+56(49),PATRNR1\n         MVC   PRNTLN2+58(49),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+63(49),PATRNR1\n         MVC   PRNTLN5+66(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+68(49),PATRNR1\n         MVC   PRNTLN2+71(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+76(49),PATRNR1\n         MVC   PRNTLN5+78(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+81(48),PATRNR1\n         MVC   PRNTLN2+83(46),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+88(41),PATRNR1\n         MVC   PRNTLN5+91(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+91(38),PATRNR1\n         MVC   PRNTLN2+88(41),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+83(46),PATRNR1\n         MVC   PRNTLN5+81(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+78(49),PATRNR1\n         MVC   PRNTLN2+76(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+71(49),PATRNR1\n         MVC   PRNTLN5+68(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+29(25),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+66(49),PATRNR1\n         MVC   PRNTLN2+63(49),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+58(49),PATRNR1\n         MVC   PRNTLN5+56(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(50),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+53(49),PATRNR1\n         MVC   PRNTLN2+51(49),PATRNR1\n         MVC   PRNTLN3+48(49),PATRNR1\n         MVC   PRNTLN4+46(49),PATRNR1\n         MVC   PRNTLN5+43(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(50),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+41(49),PATRNR1\n         MVC   PRNTLN2+38(49),PATRNR1\n         MVC   PRNTLN3+36(49),PATRNR1\n         MVC   PRNTLN4+33(49),PATRNR1\n         MVC   PRNTLN5+31(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(50),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+28(49),PATRNR1\n         MVC   PRNTLN2+26(49),PATRNR1\n         MVC   PRNTLN3+23(49),PATRNR1\n         MVC   PRNTLN4+21(49),PATRNR1\n         MVC   PRNTLN5+18(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERC  MVI   CHAR,C'C'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         LA    R8,LETCXSUB\nLETCSUB  MVC   PRNTLN1+41(51),PATRNR1\n         MVC   PRNTLN2+38(57),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+33(67),PATRNR1\n         MVC   PRNTLN5+31(71),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(77),PATRNR1\n         MVC   PRNTLN2+26(81),PATRNR1\n         MVC   PRNTLN3+23(87),PATRNR1\n         MVC   PRNTLN4+21(91),PATRNR1\n         MVC   PRNTLN5+18(97),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(101),PATRNR1\n         MVC   PRNTLN2+13(107),PATRNR1\n         MVC   PRNTLN3+11(111),PATRNR1\n         MVC   PRNTLN4+8(117),PATRNR1\n         MVC   PRNTLN5+6(121),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(48),PATRNR1\n         MVC   PRNTLN2+4(46),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(41),PATRNR1\n         MVC   PRNTLN5+4(38),PATRNR1\n         MVC   PRNTLN1+81(48),PATRNR1\n         MVC   PRNTLN2+83(46),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+88(41),PATRNR1\n         MVC   PRNTLN5+91(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(36),PATRNR1\n         MVC   PRNTLN2+4(33),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(28),PATRNR1\n         MVC   PRNTLN5+4(26),PATRNR1\n         MVC   PRNTLN1+93(36),PATRNR1\n         MVC   PRNTLN2+96(33),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+101(28),PATRNR1\n         MVC   PRNTLN5+103(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+104(25),PATRNR1\n         BR    R8\nLETCXSUB NOP    LETCSUB\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\nLETCYSUB MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         MVC   PRNTLN1+103(26),PATRNR1\n         MVC   PRNTLN2+101(28),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+96(33),PATRNR1\n         MVC   PRNTLN5+93(36),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         MVC   PRNTLN1+91(38),PATRNR1\n         MVC   PRNTLN2+88(41),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+83(46),PATRNR1\n         MVC   PRNTLN5+81(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(48),PATRNR1\n         MVC   PRNTLN2+8(46),PATRNR1\n         MVC   PRNTLN3+11(43),PATRNR1\n         MVC   PRNTLN4+13(41),PATRNR1\n         MVC   PRNTLN5+16(38),PATRNR1\n         MVC   PRNTLN1+78(48),PATRNR1\n         MVC   PRNTLN2+78(46),PATRNR1\n         MVC   PRNTLN3+78(43),PATRNR1\n         MVC   PRNTLN4+78(41),PATRNR1\n         MVC   PRNTLN5+78(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(36),PATRNR1\n         MVC   PRNTLN2+21(33),PATRNR1\n         MVC   PRNTLN3+23(31),PATRNR1\n         MVC   PRNTLN4+26(28),PATRNR1\n         MVC   PRNTLN5+28(26),PATRNR1\n         MVC   PRNTLN1+78(36),PATRNR1\n         MVC   PRNTLN2+78(33),PATRNR1\n         MVC   PRNTLN3+78(31),PATRNR1\n         MVC   PRNTLN4+78(28),PATRNR1\n         MVC   PRNTLN5+78(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(23),PATRNR1\n         MVC   PRNTLN2+33(21),PATRNR1\n         MVC   PRNTLN3+36(18),PATRNR1\n         MVC   PRNTLN4+38(16),PATRNR1\n         MVC   PRNTLN5+41(13),PATRNR1\n         MVC   PRNTLN1+78(23),PATRNR1\n         MVC   PRNTLN2+78(21),PATRNR1\n         MVC   PRNTLN3+78(18),PATRNR1\n         MVC   PRNTLN4+78(16),PATRNR1\n         MVC   PRNTLN5+78(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERD  MVI   CHAR,C'D'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(75),PATRNR2\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\nLETDSUB  MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         MVC   PRNTLN1+103(26),PATRNR1\n         MVC   PRNTLN2+101(28),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+96(33),PATRNR1\n         MVC   PRNTLN5+93(36),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1(125),PRNTLN5+0\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         MVC   PRNTLN1+91(38),PATRNR1\n         MVC   PRNTLN2+88(41),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+83(46),PATRNR1\n         MVC   PRNTLN5+81(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(121),PATRNR1\n         MVC   PRNTLN2+8(117),PATRNR1\n         MVC   PRNTLN3+11(111),PATRNR1\n         MVC   PRNTLN4+13(107),PATRNR1\n         MVC   PRNTLN5+16(101),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(97),PATRNR1\n         MVC   PRNTLN2+21(91),PATRNR1\n         MVC   PRNTLN3+23(87),PATRNR1\n         MVC   PRNTLN4+26(81),PATRNR1\n         MVC   PRNTLN5+28(77),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(71),PATRNR1\n         MVC   PRNTLN2+33(67),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+38(57),PATRNR1\n         MVC   PRNTLN5+41(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERF  MVI   CHAR,C'F'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(50),PATRNR2\n         MVC   PRNTLN1+79(25),PATRNR2\n         LA    R5,30\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(85),PATRNR2\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERG  MVI   CHAR,C'G'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LETCSUB                  PERFORM\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(12),PATRNR1\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         MVC   PRNTLN1+53(12),PATRNR1\n         MVC   PRNTLN2+51(12),PATRNR1\n         MVC   PRNTLN3+48(12),PATRNR1\n         MVC   PRNTLN4+46(12),PATRNR1\n         MVC   PRNTLN5+44(12),PATRNR1\n         MVC   PRNTLN1+102(12),PATRNR1\n         MVC   PRNTLN2+100(12),PATRNR1\n         MVC   PRNTLN3+97(12),PATRNR1\n         MVC   PRNTLN4+95(12),PATRNR1\n         MVC   PRNTLN5+92(12),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(55),PATRNR1\n         MVC   PRNTLN1+90(20),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN2+87(12),PATRNR1\n         MVC   PRNTLN3+85(12),PATRNR1\n         MVC   PRNTLN4+82(12),PATRNR1\n         MVC   PRNTLN5+80(12),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(60),PATRNR1\n         MVC   PRNTLN2+8(58),PATRNR1\n         MVC   PRNTLN3+11(55),PATRNR1\n         MVC   PRNTLN4+13(53),PATRNR1\n         MVC   PRNTLN5+16(50),PATRNR1\n         MVC   PRNTLN1+78(48),PATRNR1\n         MVC   PRNTLN2+78(46),PATRNR1\n         MVC   PRNTLN3+78(43),PATRNR1\n         MVC   PRNTLN4+78(41),PATRNR1\n         MVC   PRNTLN5+78(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(48),PATRNR1\n         MVC   PRNTLN2+21(45),PATRNR1\n         MVC   PRNTLN3+23(43),PATRNR1\n         MVC   PRNTLN4+26(40),PATRNR1\n         MVC   PRNTLN5+28(38),PATRNR1\n         MVC   PRNTLN1+78(36),PATRNR1\n         MVC   PRNTLN2+78(33),PATRNR1\n         MVC   PRNTLN3+78(31),PATRNR1\n         MVC   PRNTLN4+78(28),PATRNR1\n         MVC   PRNTLN5+78(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(35),PATRNR1\n         MVC   PRNTLN2+33(33),PATRNR1\n         MVC   PRNTLN3+36(30),PATRNR1\n         MVC   PRNTLN4+38(28),PATRNR1\n         MVC   PRNTLN5+41(25),PATRNR1\n         MVC   PRNTLN1+78(23),PATRNR1\n         MVC   PRNTLN2+78(21),PATRNR1\n         MVC   PRNTLN3+78(18),PATRNR1\n         MVC   PRNTLN4+78(16),PATRNR1\n         MVC   PRNTLN5+78(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERH  MVI   CHAR,C'H'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+53(25),PATRNR1\n         LA    R5,30\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERI  MVI   CHAR,C'I'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(18),PATRNR1\n         MVC   PRNTLN1+111(18),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(18),PATRNR1\n         MVC   PRNTLN1+111(18),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERJ  MVI   CHAR,C'J'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(13),PATRNR1\n         MVC   PRNTLN2+38(16),PATRNR1\n         MVC   PRNTLN3+36(18),PATRNR1\n         MVC   PRNTLN4+33(21),PATRNR1\n         MVC   PRNTLN5+31(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(15),PATRNR1\n         MVC   PRNTLN2+26(15),PATRNR1\n         MVC   PRNTLN3+23(15),PATRNR1\n         MVC   PRNTLN4+21(15),PATRNR1\n         MVC   PRNTLN5+18(15),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(15),PATRNR1\n         MVC   PRNTLN2+13(15),PATRNR1\n         MVC   PRNTLN3+11(15),PATRNR1\n         MVC   PRNTLN4+8(15),PATRNR1\n         MVC   PRNTLN5+6(15),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\nLETJSUB  BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(48),PATRNR1\n         MVC   PRNTLN2+4(46),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(41),PATRNR1\n         MVC   PRNTLN5+4(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(36),PATRNR1\n         MVC   PRNTLN2+4(33),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(28),PATRNR1\n         MVC   PRNTLN5+4(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(25),PATRNR1\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+50(78),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+6(50),PATRNR1\n         MVC   PRNTLN2+8(50),PATRNR1\n         MVC   PRNTLN3+11(50),PATRNR1\n         MVC   PRNTLN4+13(50),PATRNR1\n         MVC   PRNTLN5+16(50),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+50(78),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+18(50),PATRNR1\n         MVC   PRNTLN2+21(50),PATRNR1\n         MVC   PRNTLN3+23(50),PATRNR1\n         MVC   PRNTLN4+26(50),PATRNR1\n         MVC   PRNTLN5+28(50),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+50(78),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+31(50),PATRNR1\n         MVC   PRNTLN2+33(50),PATRNR1\n         MVC   PRNTLN3+36(50),PATRNR1\n         MVC   PRNTLN4+38(50),PATRNR1\n         MVC   PRNTLN5+41(50),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERK  MVI   CHAR,C'K'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(26),PATRNR1\n         MVC   PRNTLN2+63(32),PATRNR1\n         MVC   PRNTLN3+61(36),PATRNR1\n         MVC   PRNTLN4+58(42),PATRNR1\n         MVC   PRNTLN5+56(46),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+53(52),PATRNR1\n         MVC   PRNTLN2+51(56),PATRNR1\n         MVC   PRNTLN3+48(62),PATRNR1\n         MVC   PRNTLN4+46(66),PATRNR1\n         MVC   PRNTLN5+43(72),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(76),PATRNR1\n         MVC   PRNTLN2+38(82),PATRNR1\n         MVC   PRNTLN3+36(86),PATRNR1\n         MVC   PRNTLN4+33(92),PATRNR1\n         MVC   PRNTLN5+31(96),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+28(48),PATRNR1\n         MVC   PRNTLN2+26(48),PATRNR1\n         MVC   PRNTLN3+23(48),PATRNR1\n         MVC   PRNTLN4+21(48),PATRNR1\n         MVC   PRNTLN5+18(48),PATRNR1\n         MVC   PRNTLN1+81(48),PATRNR1\n         MVC   PRNTLN2+83(46),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+88(41),PATRNR1\n         MVC   PRNTLN5+91(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+16(48),PATRNR1\n         MVC   PRNTLN2+13(48),PATRNR1\n         MVC   PRNTLN3+11(48),PATRNR1\n         MVC   PRNTLN4+8(48),PATRNR1\n         MVC   PRNTLN5+6(48),PATRNR1\n         MVC   PRNTLN1+93(36),PATRNR1\n         MVC   PRNTLN2+96(33),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+101(28),PATRNR1\n         MVC   PRNTLN5+103(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(48),PATRNR1\n         MVC   PRNTLN2+4(46),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(41),PATRNR1\n         MVC   PRNTLN5+4(38),PATRNR1\n         MVC   PRNTLN1+106(23),PATRNR1\n         MVC   PRNTLN2+108(21),PATRNR1\n         MVC   PRNTLN3+111(18),PATRNR1\n         MVC   PRNTLN4+113(16),PATRNR1\n         MVC   PRNTLN5+116(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(36),PATRNR1\n         MVC   PRNTLN2+4(33),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(28),PATRNR1\n         MVC   PRNTLN5+4(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(23),PATRNR1\n         MVC   PRNTLN2+4(21),PATRNR1\n         MVC   PRNTLN3+4(18),PATRNR1\n         MVC   PRNTLN4+4(16),PATRNR1\n         MVC   PRNTLN5+4(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(11),PATRNR1\n         MVC   PRNTLN2+4(8),PATRNR1\n         MVC   PRNTLN3+4(6),PATRNR1\n         MVC   PRNTLN4+4(3),PATRNR1\n         MVC   PRNTLN5+4(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERL  MVI   CHAR,C'L'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(110),PATRNR2\n         LA    R5,30\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERM  MVI   CHAR,C'M'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+78(48),PATRNR1\n         MVC   PRNTLN2+76(48),PATRNR1\n         MVC   PRNTLN3+73(48),PATRNR1\n         MVC   PRNTLN4+71(48),PATRNR1\n         MVC   PRNTLN5+68(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(48),PATRNR1\n         MVC   PRNTLN2+63(48),PATRNR1\n         MVC   PRNTLN3+61(48),PATRNR1\n         MVC   PRNTLN4+58(48),PATRNR1\n         MVC   PRNTLN5+56(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+54(48),PATRNR1\n         MVC   PRNTLN2+54(45),PATRNR1\n         MVC   PRNTLN3+54(42),PATRNR1\n         MVC   PRNTLN4+54(40),PATRNR1\n         MVC   PRNTLN5+54(37),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+54(37),PATRNR1\n         MVC   PRNTLN2+54(40),PATRNR1\n         MVC   PRNTLN3+54(42),PATRNR1\n         MVC   PRNTLN4+54(45),PATRNR1\n         MVC   PRNTLN5+54(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+56(48),PATRNR1\n         MVC   PRNTLN2+58(48),PATRNR1\n         MVC   PRNTLN3+61(48),PATRNR1\n         MVC   PRNTLN4+63(48),PATRNR1\n         MVC   PRNTLN5+66(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+68(48),PATRNR1\n         MVC   PRNTLN2+71(48),PATRNR1\n         MVC   PRNTLN3+73(48),PATRNR1\n         MVC   PRNTLN4+76(48),PATRNR1\n         MVC   PRNTLN5+78(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERN  MVI   CHAR,C'N'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+78(49),PATRNR1\n         MVC   PRNTLN2+76(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+71(49),PATRNR1\n         MVC   PRNTLN5+68(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(60),PATPL1+84\n         MVC   PRNTLN2+63(60),PATPL1+84\n         MVC   PRNTLN3+61(60),PATPL1+84\n         MVC   PRNTLN4+58(60),PATPL1+84\n         MVC   PRNTLN5+56(60),PATPL1+84\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+53(60),PATPL1+84\n         MVC   PRNTLN2+51(60),PATPL1+84\n         MVC   PRNTLN3+48(60),PATPL1+84\n         MVC   PRNTLN4+46(60),PATPL1+84\n         MVC   PRNTLN5+43(60),PATPL1+84\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(60),PATPL1+84\n         MVC   PRNTLN2+38(60),PATPL1+84\n         MVC   PRNTLN3+36(60),PATPL1+84\n         MVC   PRNTLN4+33(60),PATPL1+84\n         MVC   PRNTLN5+31(60),PATPL1+84\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(60),PATPL1+84\n         MVC   PRNTLN2+26(60),PATPL1+84\n         MVC   PRNTLN3+23(60),PATPL1+84\n         MVC   PRNTLN4+21(60),PATPL1+84\n         MVC   PRNTLN5+18(60),PATPL1+84\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(60),PATPL1+84\n         MVC   PRNTLN2+13(60),PATPL1+84\n         MVC   PRNTLN3+11(60),PATPL1+84\n         MVC   PRNTLN4+8(60),PATPL1+84\n         MVC   PRNTLN5+6(60),PATPL1+84\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERO  MVI   CHAR,C'O'\n         BAL   R6,SETUP                PERFORM\nLETOSUB  BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LETCSUB                  PERFORM\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     LETDSUB\nLETTERP  MVI   CHAR,C'P'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(50),PATRNR2\n         MVC   PRNTLN1+79(25),PATRNR2\n         LA    R5,20\n         BALR  R6,R4                       NONSTD LINKAGE\nLETPSUB  NOP    LETSYSUB\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+60(20),PATRNR1\n         MVC   PRNTLN2+60(22),PATRNR1\n         MVC   PRNTLN3+60(25),PATRNR1\n         MVC   PRNTLN4+60(27),PATRNR1\n         MVC   PRNTLN5+60(30),PATRNR1\n         MVC   PRNTLN1+103(15),PATRNR1\n         MVC   PRNTLN2+101(15),PATRNR1\n         MVC   PRNTLN3+98(15),PATRNR1\n         MVC   PRNTLN4+96(15),PATRNR1\n         MVC   PRNTLN5+94(15),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+60(50),PATRNR1\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+50(80),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+56(71),PATRNR1\n         MVC   PRNTLN2+58(66),PATRNR1\n         MVC   PRNTLN3+61(61),PATRNR1\n         MVC   PRNTLN4+63(56),PATRNR1\n         MVC   PRNTLN5+66(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+50(80),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+68(46),PATRNR1\n         MVC   PRNTLN2+71(41),PATRNR1\n         MVC   PRNTLN3+73(36),PATRNR1\n         MVC   PRNTLN4+76(31),PATRNR1\n         MVC   PRNTLN5+78(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+50(80),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+81(21),PATRNR1\n         MVC   PRNTLN2+83(16),PATRNR1\n         MVC   PRNTLN3+86(11),PATRNR1\n         MVC   PRNTLN4+88(6),PATRNR1\n         MVC   PRNTLN5+91(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nPOSTER4  DS    0H\nLETTERQ  MVI   CHAR,C'Q'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R8,LETCSUB                  PERFORM\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+41(13),PATRNR1\n         MVC   PRNTLN2+38(16),PATRNR1\n         MVC   PRNTLN3+36(18),PATRNR1\n         MVC   PRNTLN4+33(21),PATRNR1\n         MVC   PRNTLN5+31(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(40),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+103(20),PATRNR1\n         MVC   PRNTLN2+101(20),PATRNR1\n         MVC   PRNTLN3+98(20),PATRNR1\n         MVC   PRNTLN4+96(20),PATRNR1\n         MVC   PRNTLN5+93(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+91(20),PATRNR1\n         MVC   PRNTLN2+88(20),PATRNR1\n         MVC   PRNTLN3+86(20),PATRNR1\n         MVC   PRNTLN4+83(20),PATRNR1\n         MVC   PRNTLN5+81(20),PATRNR1\n         MVC   PRNTLN1+53(1),PATRNR2\n         MVC   PRNTLN2+52(2),PATRNR2\n         MVC   PRNTLN3+50(4),PATRNR2\n         MVC   PRNTLN4+48(6),PATRNR2\n         MVC   PRNTLN5+50(4),PATRNR2\n         MVC   PRNTLN2+4(1),PATRNR2\n         MVC   PRNTLN3+4(3),PATRNR2\n         MVC   PRNTLN4+4(4),PATRNR2\n         MVC   PRNTLN5+4(6),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+12(115),PATRNR1\n         MVC   PRNTLN2+10(115),PATRNR1\n         MVC   PRNTLN3+7(115),PATRNR1\n         MVC   PRNTLN4+4(116),PATRNR1\n         MVC   PRNTLN5+4(113),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(111),PATRNR1\n         MVC   PRNTLN2+4(108),PATRNR1\n         MVC   PRNTLN3+4(106),PATRNR1\n         MVC   PRNTLN4+4(103),PATRNR1\n         MVC   PRNTLN5+4(101),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(23),PATRNR1\n         MVC   PRNTLN2+4(21),PATRNR1\n         MVC   PRNTLN3+4(18),PATRNR1\n         MVC   PRNTLN4+4(16),PATRNR1\n         MVC   PRNTLN5+4(13),PATRNR1\n         MVC   PRNTLN1+31(71),PATRNR1\n         MVC   PRNTLN2+33(67),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+38(57),PATRNR1\n         MVC   PRNTLN5+41(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERR  MVI   CHAR,C'R'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(50),PATRNR2\n         MVC   PRNTLN1+78(25),PATRNR2\n         LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+53(20),PATRNR1\n         MVC   PRNTLN2+51(20),PATRNR1\n         MVC   PRNTLN3+48(20),PATRNR1\n         MVC   PRNTLN4+46(20),PATRNR1\n         MVC   PRNTLN5+43(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(20),PATRNR1\n         MVC   PRNTLN2+38(20),PATRNR1\n         MVC   PRNTLN3+36(20),PATRNR1\n         MVC   PRNTLN4+33(20),PATRNR1\n         MVC   PRNTLN5+31(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(20),PATRNR1\n         MVC   PRNTLN2+26(20),PATRNR1\n         MVC   PRNTLN3+23(20),PATRNR1\n         MVC   PRNTLN4+21(20),PATRNR1\n         MVC   PRNTLN5+18(20),PATRNR1\n         MVC   PRNTLN1+59(20),PATRNR1\n         MVC   PRNTLN2+61(20),PATRNR1\n         MVC   PRNTLN3+64(20),PATRNR1\n         MVC   PRNTLN4+67(20),PATRNR1\n         MVC   PRNTLN5+69(20),PATRNR1\n         MVC   PRNTLN1+103(20),PATRNR1\n         MVC   PRNTLN2+101(20),PATRNR1\n         MVC   PRNTLN3+98(20),PATRNR1\n         MVC   PRNTLN4+96(20),PATRNR1\n         MVC   PRNTLN5+93(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+75(30),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+16(20),PATRNR1\n         MVC   PRNTLN2+13(20),PATRNR1\n         MVC   PRNTLN3+11(20),PATRNR1\n         MVC   PRNTLN4+8(20),PATRNR1\n         MVC   PRNTLN5+6(30),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(48),PATRNR1\n         MVC   PRNTLN2+4(46),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(41),PATRNR1\n         MVC   PRNTLN5+4(38),PATRNR1\n         MVC   PRNTLN1+56(71),PATRNR1\n         MVC   PRNTLN2+58(67),PATRNR1\n         MVC   PRNTLN3+61(61),PATRNR1\n         MVC   PRNTLN4+63(57),PATRNR1\n         MVC   PRNTLN5+66(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(36),PATRNR1\n         MVC   PRNTLN2+4(33),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(28),PATRNR1\n         MVC   PRNTLN5+4(26),PATRNR1\n         MVC   PRNTLN1+68(47),PATRNR1\n         MVC   PRNTLN2+71(41),PATRNR1\n         MVC   PRNTLN3+73(37),PATRNR1\n         MVC   PRNTLN4+76(31),PATRNR1\n         MVC   PRNTLN5+78(27),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(23),PATRNR1\n         MVC   PRNTLN2+4(21),PATRNR1\n         MVC   PRNTLN3+4(18),PATRNR1\n         MVC   PRNTLN4+4(16),PATRNR1\n         MVC   PRNTLN5+4(13),PATRNR1\n         MVC   PRNTLN1+81(21),PATRNR1\n         MVC   PRNTLN2+83(17),PATRNR1\n         MVC   PRNTLN3+86(11),PATRNR1\n         MVC   PRNTLN4+88(7),PATRNR1\n         MVC   PRNTLN5+91(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERS  MVI   CHAR,C'S'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         LA    R8,LETSXSUB\nLETSSUB  MVC   PRNTLN1+91(1),PATRNR1\n         MVC   PRNTLN2+88(7),PATRNR1\n         MVC   PRNTLN3+86(11),PATRNR1\n         MVC   PRNTLN4+83(17),PATRNR1\n         MVC   PRNTLN5+81(21),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+78(27),PATRNR1\n         MVC   PRNTLN2+76(31),PATRNR1\n         MVC   PRNTLN3+73(37),PATRNR1\n         MVC   PRNTLN4+71(41),PATRNR1\n         MVC   PRNTLN5+68(47),PATRNR1\n         MVC   PRNTLN1+28(1),PATRNR1\n         MVC   PRNTLN2+26(3),PATRNR1\n         MVC   PRNTLN3+23(6),PATRNR1\n         MVC   PRNTLN4+21(8),PATRNR1\n         MVC   PRNTLN5+18(11),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+66(51),PATRNR1\n         MVC   PRNTLN2+63(57),PATRNR1\n         MVC   PRNTLN3+61(61),PATRNR1\n         MVC   PRNTLN4+58(67),PATRNR1\n         MVC   PRNTLN5+56(71),PATRNR1\n         MVC   PRNTLN1+16(13),PATRNR1\n         MVC   PRNTLN2+13(16),PATRNR1\n         MVC   PRNTLN3+11(18),PATRNR1\n         MVC   PRNTLN4+8(21),PATRNR1\n         MVC   PRNTLN5+6(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(25),PATRNR1\n         MVC   PRNTLN1+54(75),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+90(4),PATRNR2\n         MVC   PRNTLN2+87(9),PATRNR2\n         MVC   PRNTLN3+85(13),PATRNR2\n         MVC   PRNTLN4+82(19),PATRNR2\n         MVC   PRNTLN5+80(23),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+79(25),PATRNR2\n         BAL   R6,INIT2345                PERFORM\n         BR    R8\nLETSXSUB LA    R5,10\n         BALR  R6,R4                       NONSTD LINKAGE\nLETSYSUB MVC   PRNTLN1+4(26),PATRNR1\n         MVC   PRNTLN2+4(28),PATRNR1\n         MVC   PRNTLN3+4(31),PATRNR1\n         MVC   PRNTLN4+4(33),PATRNR1\n         MVC   PRNTLN5+4(36),PATRNR1\n         MVC   PRNTLN1+53(20),PATRNR1\n         MVC   PRNTLN2+51(20),PATRNR1\n         MVC   PRNTLN3+48(20),PATRNR1\n         MVC   PRNTLN4+46(20),PATRNR1\n         MVC   PRNTLN5+44(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(50),PATRNR1\n         LA    R5,5\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(71),PATRNR1\n         MVC   PRNTLN2+8(67),PATRNR1\n         MVC   PRNTLN3+11(61),PATRNR1\n         MVC   PRNTLN4+13(57),PATRNR1\n         MVC   PRNTLN5+16(51),PATRNR1\n         MVC   PRNTLN1+104(23),PATRNR1\n         MVC   PRNTLN2+104(21),PATRNR1\n         MVC   PRNTLN3+104(18),PATRNR1\n         MVC   PRNTLN4+104(16),PATRNR1\n         MVC   PRNTLN5+104(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(47),PATRNR1\n         MVC   PRNTLN2+21(41),PATRNR1\n         MVC   PRNTLN3+23(37),PATRNR1\n         MVC   PRNTLN4+26(31),PATRNR1\n         MVC   PRNTLN5+28(27),PATRNR1\n         MVC   PRNTLN1+104(11),PATRNR1\n         MVC   PRNTLN2+104(8),PATRNR1\n         MVC   PRNTLN3+104(6),PATRNR1\n         MVC   PRNTLN4+104(3),PATRNR1\n         MVC   PRNTLN5+104(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(21),PATRNR1\n         MVC   PRNTLN2+33(17),PATRNR1\n         MVC   PRNTLN3+36(11),PATRNR1\n         MVC   PRNTLN4+38(7),PATRNR1\n         MVC   PRNTLN5+41(1),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERT  MVI   CHAR,C'T'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+104(25),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERU  MVI   CHAR,C'U'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(88),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN2+38(20),PATRNR1\n         MVC   PRNTLN3+36(20),PATRNR1\n         MVC   PRNTLN4+33(20),PATRNR1\n         MVC   PRNTLN5+31(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+28(20),PATRNR1\n         MVC   PRNTLN2+26(20),PATRNR1\n         MVC   PRNTLN3+23(20),PATRNR1\n         MVC   PRNTLN4+21(20),PATRNR1\n         MVC   PRNTLN5+18(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(20),PATRNR1\n         MVC   PRNTLN2+13(20),PATRNR1\n         MVC   PRNTLN3+11(20),PATRNR1\n         MVC   PRNTLN4+8(20),PATRNR1\n         MVC   PRNTLN5+6(20),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     LETJSUB\nLETTERV  MVI   CHAR,C'V'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+66(63),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN2+63(49),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+58(49),PATRNR1\n         MVC   PRNTLN5+56(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+53(49),PATRNR1\n         MVC   PRNTLN2+51(49),PATRNR1\n         MVC   PRNTLN3+48(49),PATRNR1\n         MVC   PRNTLN3+48(49),PATRNR1\n         MVC   PRNTLN4+46(49),PATRNR1\n         MVC   PRNTLN5+43(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(49),PATRNR1\n         MVC   PRNTLN2+38(49),PATRNR1\n         MVC   PRNTLN3+36(49),PATRNR1\n         MVC   PRNTLN4+33(49),PATRNR1\n         MVC   PRNTLN5+31(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+28(49),PATRNR1\n         MVC   PRNTLN2+26(49),PATRNR1\n         MVC   PRNTLN3+23(49),PATRNR1\n         MVC   PRNTLN4+21(49),PATRNR1\n         MVC   PRNTLN5+18(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+16(49),PATRNR1\n         MVC   PRNTLN2+13(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+8(49),PATRNR1\n         MVC   PRNTLN5+6(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(48),PATRNR1\n         MVC   PRNTLN2+4(46),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(41),PATRNR1\n         MVC   PRNTLN5+4(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(38),PATRNR1\n         MVC   PRNTLN2+4(41),PATRNR1\n         MVC   PRNTLN3+4(43),PATRNR1\n         MVC   PRNTLN4+4(46),PATRNR1\n         MVC   PRNTLN5+4(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(49),PATRNR1\n         MVC   PRNTLN2+8(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+13(49),PATRNR1\n         MVC   PRNTLN5+16(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(49),PATRNR1\n         MVC   PRNTLN2+21(49),PATRNR1\n         MVC   PRNTLN3+23(49),PATRNR1\n         MVC   PRNTLN4+26(49),PATRNR1\n         MVC   PRNTLN5+28(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(63),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+31(49),PATRNR1\n         MVC   PRNTLN2+33(49),PATRNR1\n         MVC   PRNTLN3+36(49),PATRNR1\n         MVC   PRNTLN4+38(49),PATRNR1\n         MVC   PRNTLN5+41(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(63),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+43(49),PATRNR1\n         MVC   PRNTLN2+46(49),PATRNR1\n         MVC   PRNTLN3+48(49),PATRNR1\n         MVC   PRNTLN4+51(49),PATRNR1\n         MVC   PRNTLN5+53(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(63),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+56(49),PATRNR1\n         MVC   PRNTLN2+58(49),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+63(49),PATRNR1\n         MVC   PRNTLN5+66(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERW  MVI   CHAR,C'W'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(49),PATRNR1\n         MVC   PRNTLN2+8(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+13(49),PATRNR1\n         MVC   PRNTLN5+16(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(49),PATRNR1\n         MVC   PRNTLN2+21(49),PATRNR1\n         MVC   PRNTLN3+23(49),PATRNR1\n         MVC   PRNTLN4+26(49),PATRNR1\n         MVC   PRNTLN5+28(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(48),PATRNR1\n         MVC   PRNTLN2+33(46),PATRNR1\n         MVC   PRNTLN3+36(43),PATRNR1\n         MVC   PRNTLN4+38(41),PATRNR1\n         MVC   PRNTLN5+41(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+41(38),PATRNR1\n         MVC   PRNTLN2+38(41),PATRNR1\n         MVC   PRNTLN3+36(43),PATRNR1\n         MVC   PRNTLN4+33(46),PATRNR1\n         MVC   PRNTLN5+31(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+28(49),PATRNR1\n         MVC   PRNTLN2+26(49),PATRNR1\n         MVC   PRNTLN3+23(49),PATRNR1\n         MVC   PRNTLN4+21(49),PATRNR1\n         MVC   PRNTLN5+18(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+16(49),PATRNR1\n         MVC   PRNTLN2+13(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+8(49),PATRNR1\n         MVC   PRNTLN5+6(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         LA    R5,15\n         BALR  R6,R4                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERX  MVI   CHAR,C'X'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+17(99),PATRNR2\n         MVC   PRNTLN2+20(93),PATRNR2\n         MVC   PRNTLN3+22(89),PATRNR2\n         MVC   PRNTLN4+25(83),PATRNR2\n         MVC   PRNTLN5+27(79),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+30(73),PATRNR2\n         MVC   PRNTLN2+32(69),PATRNR2\n         MVC   PRNTLN3+35(63),PATRNR2\n         MVC   PRNTLN4+37(59),PATRNR2\n         MVC   PRNTLN5+40(53),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+42(49),PATRNR2\n         MVC   PRNTLN2+45(43),PATRNR2\n         MVC   PRNTLN3+47(39),PATRNR2\n         MVC   PRNTLN4+50(33),PATRNR2\n         MVC   PRNTLN5+52(29),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+6(49),PATRNR1\n         MVC   PRNTLN2+8(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+13(49),PATRNR1\n         MVC   PRNTLN5+16(49),PATRNR1\n         MVC   PRNTLN1+78(49),PATRNR1\n         MVC   PRNTLN2+76(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+71(49),PATRNR1\n         MVC   PRNTLN5+69(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+18(97),PATRNR1\n         MVC   PRNTLN2+21(91),PATRNR1\n         MVC   PRNTLN3+23(87),PATRNR1\n         MVC   PRNTLN4+26(81),PATRNR1\n         MVC   PRNTLN5+28(77),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+31(71),PATRNR1\n         MVC   PRNTLN2+33(67),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+38(57),PATRNR1\n         MVC   PRNTLN5+41(51),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+41(51),PATRNR1\n         MVC   PRNTLN2+38(57),PATRNR1\n         MVC   PRNTLN3+36(61),PATRNR1\n         MVC   PRNTLN4+33(67),PATRNR1\n         MVC   PRNTLN5+31(71),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+28(77),PATRNR1\n         MVC   PRNTLN2+26(81),PATRNR1\n         MVC   PRNTLN3+23(87),PATRNR1\n         MVC   PRNTLN4+21(91),PATRNR1\n         MVC   PRNTLN5+18(97),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+16(49),PATRNR1\n         MVC   PRNTLN2+13(49),PATRNR1\n         MVC   PRNTLN3+11(49),PATRNR1\n         MVC   PRNTLN4+8(49),PATRNR1\n         MVC   PRNTLN5+6(49),PATRNR1\n         MVC   PRNTLN1+69(49),PATRNR1\n         MVC   PRNTLN2+71(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+76(49),PATRNR1\n         MVC   PRNTLN5+78(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+4(125),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN1+52(29),PATRNR2\n         MVC   PRNTLN2+50(33),PATRNR2\n         MVC   PRNTLN3+47(39),PATRNR2\n         MVC   PRNTLN4+45(43),PATRNR2\n         MVC   PRNTLN5+42(49),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+40(53),PATRNR2\n         MVC   PRNTLN2+37(59),PATRNR2\n         MVC   PRNTLN3+35(63),PATRNR2\n         MVC   PRNTLN4+32(69),PATRNR2\n         MVC   PRNTLN5+30(73),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+27(79),PATRNR2\n         MVC   PRNTLN2+25(83),PATRNR2\n         MVC   PRNTLN3+22(89),PATRNR2\n         MVC   PRNTLN4+20(93),PATRNR2\n         MVC   PRNTLN5+17(99),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERY  MVI   CHAR,C'Y'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         MVC   PRNTLN1+116(13),PATRNR1\n         MVC   PRNTLN2+113(16),PATRNR1\n         MVC   PRNTLN3+111(18),PATRNR1\n         MVC   PRNTLN4+108(21),PATRNR1\n         MVC   PRNTLN5+106(23),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+103(26),PATRNR1\n         MVC   PRNTLN2+101(28),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+96(33),PATRNR1\n         MVC   PRNTLN5+93(36),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+91(38),PATRNR1\n         MVC   PRNTLN2+88(41),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+83(46),PATRNR1\n         MVC   PRNTLN5+81(48),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+78(49),PATRNR1\n         MVC   PRNTLN2+76(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+71(49),PATRNR1\n         MVC   PRNTLN5+68(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+66(49),PATRNR1\n         MVC   PRNTLN2+63(49),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+4(103),PATRNR1\n         MVC   PRNTLN5+4(101),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(98),PATRNR1\n         MVC   PRNTLN2+4(96),PATRNR1\n         MVC   PRNTLN3+4(93),PATRNR1\n         MVC   PRNTLN4+4(91),PATRNR1\n         MVC   PRNTLN5+4(88),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(88),PATRNR1\n         MVC   PRNTLN2+4(91),PATRNR1\n         MVC   PRNTLN3+4(93),PATRNR1\n         MVC   PRNTLN4+4(96),PATRNR1\n         MVC   PRNTLN5+4(98),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+4(101),PATRNR1\n         MVC   PRNTLN2+4(103),PATRNR1\n         MVC   PRNTLN3+61(49),PATRNR1\n         MVC   PRNTLN4+63(49),PATRNR1\n         MVC   PRNTLN5+66(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+68(49),PATRNR1\n         MVC   PRNTLN2+71(49),PATRNR1\n         MVC   PRNTLN3+73(49),PATRNR1\n         MVC   PRNTLN4+76(49),PATRNR1\n         MVC   PRNTLN5+78(49),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+81(48),PATRNR1\n         MVC   PRNTLN2+83(46),PATRNR1\n         MVC   PRNTLN3+86(43),PATRNR1\n         MVC   PRNTLN4+88(41),PATRNR1\n         MVC   PRNTLN5+91(38),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+93(36),PATRNR1\n         MVC   PRNTLN2+96(33),PATRNR1\n         MVC   PRNTLN3+98(31),PATRNR1\n         MVC   PRNTLN4+101(28),PATRNR1\n         MVC   PRNTLN5+103(26),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         BAL   R6,INITPT2                PERFORM\n         MVC   PRNTLN1+106(23),PATRNR1\n         MVC   PRNTLN2+108(21),PATRNR1\n         MVC   PRNTLN3+111(18),PATRNR1\n         MVC   PRNTLN4+113(16),PATRNR1\n         MVC   PRNTLN5+116(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTERZ  MVI   CHAR,C'Z'\n         BAL   R6,SETUP                PERFORM\n         BALR  R6,R4                       NONSTD LINKAGE\n         LA    R8,LETZXSUB\n         MVC   PRNTLN1+104(25),PATRNR1\n         MVC   PRNTLN1+4(13),PATRNR1\n         BAL   R6,INIT2345                PERFORM\n         MVC   PRNTLN2+7(13),PATRNR1\n         MVC   PRNTLN3+9(13),PATRNR1\n         MVC   PRNTLN4+11(13),PATRNR1\n         MVC   PRNTLN5+14(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+16(13),PATRNR1\n         MVC   PRNTLN2+19(13),PATRNR1\n         MVC   PRNTLN3+21(13),PATRNR1\n         MVC   PRNTLN4+24(13),PATRNR1\n         MVC   PRNTLN5+26(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(13),PATRNR1\n         MVC   PRNTLN2+31(13),PATRNR1\n         MVC   PRNTLN3+34(13),PATRNR1\n         MVC   PRNTLN4+36(13),PATRNR1\n         MVC   PRNTLN5+39(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+41(13),PATRNR1\n         MVC   PRNTLN2+44(13),PATRNR1\n         MVC   PRNTLN3+46(13),PATRNR1\n         MVC   PRNTLN4+49(13),PATRNR1\n         MVC   PRNTLN5+51(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+54(13),PATRNR1\n         MVC   PRNTLN2+56(13),PATRNR1\n         MVC   PRNTLN3+59(13),PATRNR1\n         MVC   PRNTLN4+61(13),PATRNR1\n         MVC   PRNTLN5+64(13),PATRNR1\n         BALR  R6,R3                       NONSTD LINKAGE\nLETZSUB  MVC   PRNTLN1+29(51),PATPL2X+123\n         MVC   PRNTLN2+29(53),PATPL2X+121\n         MVC   PRNTLN3+29(56),PATPL2X+118\n         MVC   PRNTLN4+29(58),PATPL2X+116\n         MVC   PRNTLN5+29(61),PATPL2X+113\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(63),PATPL2X+111\n         MVC   PRNTLN2+29(66),PATPL2X+108\n         MVC   PRNTLN3+29(68),PATPL2X+106\n         MVC   PRNTLN4+29(71),PATPL2X+103\n         MVC   PRNTLN5+29(73),PATPL2X+101\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(76),PATPL2X+98\n         MVC   PRNTLN2+29(78),PATPL2X+96\n         MVC   PRNTLN3+29(81),PATPL2X+93\n         MVC   PRNTLN4+29(83),PATPL2X+91\n         MVC   PRNTLN5+29(86),PATPL2X+88\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(88),PATPL2X+86\n         MVC   PRNTLN2+29(91),PATPL2X+83\n         MVC   PRNTLN3+29(93),PATPL2X+81\n         MVC   PRNTLN4+29(96),PATPL2X+78\n         MVC   PRNTLN5+29(98),PATPL2X+76\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+29(100),PATPL2X+73\n         BAL   R6,INIT2345                PERFORM\n         BR    R8\nLETZXSUB MVC   PRNTLN1+66(15),PATRNR2\n         MVC   PRNTLN2+68(15),PATRNR2\n         MVC   PRNTLN3+71(15),PATRNR2\n         MVC   PRNTLN4+73(15),PATRNR2\n         MVC   PRNTLN5+76(15),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+78(15),PATRNR2\n         MVC   PRNTLN2+81(15),PATRNR2\n         MVC   PRNTLN3+83(15),PATRNR2\n         MVC   PRNTLN4+86(15),PATRNR2\n         MVC   PRNTLN5+88(15),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         MVC   PRNTLN1+91(15),PATRNR2\n         MVC   PRNTLN2+93(15),PATRNR2\n         MVC   PRNTLN3+96(15),PATRNR2\n         MVC   PRNTLN4+98(15),PATRNR2\n         MVC   PRNTLN5+101(15),PATRNR2\n         BALR  R6,R3                       NONSTD LINKAGE\n         B     NEXTCHAR\nLETTRX5C MVI   CHAR,C'X'       ASTERICK\n         BAL   R6,SETUP\n         BALR  R6,R4\n         MVC   PRNTLN1+61(12),PATRNR1\n         LA    R5,6\n         BALR  R6,R4\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+43(48),PATRNR1\n         MVC   PRNTLN1+45(16),PATRNR2\n         MVC   PRNTLN1+73(16),PATRNR2\n         MVC   PRNTLN2+41(52),PATRNR1\n         MVC   PRNTLN2+46(15),PATRNR2\n         MVC   PRNTLN2+73(15),PATRNR2\n         MVC   PRNTLN3+39(56),PATRNR1\n         MVC   PRNTLN3+47(14),PATRNR2\n         MVC   PRNTLN3+73(14),PATRNR2\n         MVC   PRNTLN4+37(60),PATRNR1\n         MVC   PRNTLN4+48(13),PATRNR2\n         MVC   PRNTLN4+73(13),PATRNR2\n         MVC   PRNTLN5+35(64),PATRNR1\n         MVC   PRNTLN5+49(12),PATRNR2\n         MVC   PRNTLN5+73(12),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+35(64),PATRNR1\n         MVC   PRNTLN1+50(11),PATRNR2\n         MVC   PRNTLN1+73(11),PATRNR2\n         MVC   PRNTLN2+36(62),PATRNR1\n         MVC   PRNTLN2+51(10),PATRNR2\n         MVC   PRNTLN2+73(10),PATRNR2\n         MVC   PRNTLN3+37(60),PATRNR1\n         MVC   PRNTLN3+52(9),PATRNR2\n         MVC   PRNTLN3+73(9),PATRNR2\n         MVC   PRNTLN4+38(58),PATRNR1\n         MVC   PRNTLN4+53(8),PATRNR2\n         MVC   PRNTLN4+73(8),PATRNR2\n         MVC   PRNTLN5+39(56),PATRNR1\n         MVC   PRNTLN5+54(7),PATRNR2\n         MVC   PRNTLN5+73(7),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+40(54),PATRNR1\n         MVC   PRNTLN1+55(6),PATRNR2\n         MVC   PRNTLN1+73(6),PATRNR2\n         MVC   PRNTLN2+41(52),PATRNR1\n         MVC   PRNTLN2+56(5),PATRNR2\n         MVC   PRNTLN2+73(5),PATRNR2\n         MVC   PRNTLN3+42(50),PATRNR1\n         MVC   PRNTLN3+57(4),PATRNR2\n         MVC   PRNTLN3+73(4),PATRNR2\n         MVC   PRNTLN4+43(48),PATRNR1\n         MVC   PRNTLN4+58(3),PATRNR2\n         MVC   PRNTLN4+73(3),PATRNR2\n         MVC   PRNTLN5+44(46),PATRNR1\n         MVC   PRNTLN5+59(2),PATRNR2\n         MVC   PRNTLN5+73(2),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+45(44),PATRNR1\n         MVC   PRNTLN1+60(1),PATRNR2\n         MVC   PRNTLN1+73(1),PATRNR2\n         MVC   PRNTLN2+46(42),PATRNR1\n         MVC   PRNTLN3+47(40),PATRNR1\n         MVC   PRNTLN4+48(38),PATRNR1\n         MVC   PRNTLN5+49(36),PATRNR1\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+50(34),PATRNR1\n         MVC   PRNTLN2+51(32),PATRNR1\n         MVC   PRNTLN3+52(30),PATRNR1\n         MVC   PRNTLN4+53(28),PATRNR1\n         MVC   PRNTLN5+23(86),PATRNR1\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+23(86),PATRNR1\n         LA    R5,9\n         BALR  R6,R4\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+53(28),PATRNR1\n         MVC   PRNTLN2+52(30),PATRNR1\n         MVC   PRNTLN3+51(32),PATRNR1\n         MVC   PRNTLN4+50(34),PATRNR1\n         MVC   PRNTLN5+49(36),PATRNR1\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+48(38),PATRNR1\n         MVC   PRNTLN2+47(40),PATRNR1\n         MVC   PRNTLN3+46(42),PATRNR1\n         MVC   PRNTLN4+45(44),PATRNR1\n         MVC   PRNTLN4+60(1),PATRNR2\n         MVC   PRNTLN4+73(1),PATRNR2\n         MVC   PRNTLN5+44(46),PATRNR1\n         MVC   PRNTLN5+59(2),PATRNR2\n         MVC   PRNTLN5+73(2),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+43(48),PATRNR1\n         MVC   PRNTLN1+58(3),PATRNR2\n         MVC   PRNTLN1+73(3),PATRNR2\n         MVC   PRNTLN2+42(50),PATRNR1\n         MVC   PRNTLN2+57(4),PATRNR2\n         MVC   PRNTLN2+73(4),PATRNR2\n         MVC   PRNTLN3+41(52),PATRNR1\n         MVC   PRNTLN3+56(5),PATRNR2\n         MVC   PRNTLN3+73(5),PATRNR2\n         MVC   PRNTLN4+40(54),PATRNR1\n         MVC   PRNTLN4+55(6),PATRNR2\n         MVC   PRNTLN4+73(6),PATRNR2\n         MVC   PRNTLN5+39(56),PATRNR1\n         MVC   PRNTLN5+54(7),PATRNR2\n         MVC   PRNTLN5+73(7),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+38(58),PATRNR1\n         MVC   PRNTLN1+53(8),PATRNR2\n         MVC   PRNTLN1+73(8),PATRNR2\n         MVC   PRNTLN2+37(60),PATRNR1\n         MVC   PRNTLN2+52(9),PATRNR2\n         MVC   PRNTLN2+73(9),PATRNR2\n         MVC   PRNTLN3+36(62),PATRNR1\n         MVC   PRNTLN3+51(10),PATRNR2\n         MVC   PRNTLN3+73(10),PATRNR2\n         MVC   PRNTLN4+35(64),PATRNR1\n         MVC   PRNTLN4+50(11),PATRNR2\n         MVC   PRNTLN4+73(11),PATRNR2\n         MVC   PRNTLN5+35(64),PATRNR1\n         MVC   PRNTLN5+49(12),PATRNR2\n         MVC   PRNTLN5+73(12),PATRNR2\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+38(58),PATRNR1\n         MVC   PRNTLN1+37(60),PATRNR1\n         MVC   PRNTLN1+48(13),PATRNR2\n         MVC   PRNTLN1+73(13),PATRNR2\n         MVC   PRNTLN2+39(56),PATRNR1\n         MVC   PRNTLN2+47(14),PATRNR2\n         MVC   PRNTLN2+73(14),PATRNR2\n         MVC   PRNTLN3+41(52),PATRNR1\n         MVC   PRNTLN3+46(15),PATRNR2\n         MVC   PRNTLN3+73(15),PATRNR2\n         MVC   PRNTLN4+43(48),PATRNR1\n         MVC   PRNTLN4+45(16),PATRNR2\n         MVC   PRNTLN4+73(16),PATRNR2\n         MVC   PRNTLN5+61(12),PATRNR1\n         BALR  R6,R3\n         BAL   R6,INITPT2\n         MVC   PRNTLN1+61(12),PATRNR1\n         LA    R5,5\n         BALR  R6,R4\n         B     NEXTCHAR\nBLANKL   DC    CL133' '\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSFSCANA": {"ttr": 2820, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$A   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* TAKE A CHARACTER SET AND WRITE THE CHARACTER INFO TO A SAS FILE\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=AGPT.FONTLIB(C1A055Z0),DISP=SHR\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD TLG,DELETE),UNIT=DISK,\n//*  SPACE=(TRK,(5,5))\nOPTIONS GEN=0;\n /* LOAD A CHARACTER SET INTO A SAS FILE */;\n /* PRINT CHARACTER SET INFO AND RASTER PATTERN ALSO */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\nPROC DATASETS DDNAME=CHAR;  /* DELETE ANY OLD INFO */;\n DELETE RASTER;\n DELETE CHARDAT1;\n\nDATA\n CHAR.RASTER(KEEP= CHARID XPATTRN)\n CHAR.CHARDAT1(KEEP=CHARID CINCR CWIDTH CHEIGTH MASCEND UBASEOFF\n               ASPACE BSPACE CSPACE);\nRETAIN CODES 0;\nLENGTH XPATTRN $ 16;\nFILE OUT PRINT;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN; /* START AND END */;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN;\n PUT _PAGE_ ' CHARACTER SET NAME: ' SETNAME / / COMMT / ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT 'WEIGHT:' XWEIGHT '  WIDTH:' XWIDTH '  POINTSIZE:' POINTS\n     '  PRINT DIRECTION:' XDIR '  CHARACTER ROTATION:' XROT /\n     '  ITALIC:' ITALIC '  UNDERSCORE:' UNDERS '  OVERSTRIKE:' OVERS;\nEND;\nRETAIN MASCEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT 'LOWERCASE HEIGTH:' LCASEH '  UPPER CASE HEIGTH:' UCASEH\n     '  MAXIMUM ASCENDER:' MASCEND '  MAXIMUM DESCENDER:' MDESCEND;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n RETAIN PATTRNC;\n IF CID ='00'X THEN PUT'SINGLE BYTE FONT';\n ELSE PUT 'NOT A SINGLE BYTE FONT, THIS PROGRAM CAN NOT HANDLE THIS';\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT 'KERNING:' KERNING '  BOX SIZE:' BOXSIZE\n   '  MAXIMUM BOX SIZE WIDTH:'\n   MAXBOXW '  HEIGTH:' MAXBOXH / 'PATTERN DATA COUNT:' PATTRNC\n   '  UNIFORM INLINE OFFSET:' INLNOFF;\nEND;\nRETAIN UBASEOFF;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH CHARACTER HAS OWN INCREMENT     ';\n                     ELSE XVAR='UNIFORM CHAR INCREMENT APPLIES TO ALL';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT 'TEXT ORIENTATION:' XTEXT '  UNIFORM BASELINE OFFSET:' UBASEOFF\n  '  MAXIMUM CHARACTER INCREMENT:' MAXCHARI\n  '  VARIABLE SPACE INCREMENT:'\n  VARINCR / 'MAXIMUM BASELINE EXTENT:' MAXBASEE +1 XVAR '  EM SPACE:'\n  EMSPACE / 'FIGURE SPACE:' FIGSPACE '  DEFAULT BASELINE INCREMENT:'\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @60 'CHARACTERS:'CHARS;\n PUT / 'CHAR-ID INCR  W    H   A   B   C'\n  @ 34 'CHAR-ID INCR  W    H   A   B   C'\n  @ 67 'CHAR-ID INCR  W    H   A   B   C'\n @ 100 'CHAR-ID INCR  W    H   A   B   C';\n PT3=0;\n ARRAY VADDS(X) AADD1-AADD256;\n ARRAY    VA(X)   AA1-AA256;\n ARRAY    VB(X)   AB1-AB256;\n ARRAY    VC(X)   AC1-AC256;\n ARRAY    VH(X)   AH1-AH256;\n ARRAY    VW(X)   AW1-AW256;\n ARRAY VINCR(X) AINCR1-AINCR256;\n ARRAY VNAME(X) $ 8 ANAME1-ANAME256;\n RETAIN AADD1-AADD256;\n RETAIN   AA1-AA256;\n RETAIN   AB1-AB256;\n RETAIN   AC1-AC256;\n RETAIN   AH1-AH256;\n RETAIN   AW1-AW256;\n RETAIN AINCR1-AINCR256;\n RETAIN ANAME1-ANAME256;\n RETAIN CHARS;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  OUTPUT CHAR.CHARDAT1;\n  X=I+1; VADDS=CADD*8;\n  VA=ASPACE;VB=BSPACE;VC=CSPACE;VINCR=CINCR;VW=CWIDTH;VH=CHEIGTH;\n  VNAME=CHARID;\n  PT2=PT3*33+1;\n  PUT @PT2    CHARID    CINCR 3. +1  CWIDTH 3. +1 CHEIGTH 3.\n    +1  ASPACE 3. +1 BSPACE 3. +1 CSPACE 3. @;\n  IF PT3=3 THEN DO; PUT; PT3=0; END; ELSE PT3=PT3+1;\n END;\n RETAIN CHARP;\n CHARP=0; /* CHARACTER COUNTER OR POINTER */;\nEND;\nIF ID='D3EE89'X THEN DO /* FONT PATTERN RECORDS */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN+1;TBYTES=0;\n PT=10;/* GET NEXT CHARACTER INFO, START LOOP */;\n DO UNTIL(PT>10000) /* THIS IS A NEVER ENDING LOOP */;\n  CHARP=CHARP+1;IF CHARP>CHARS THEN RETURN;X=CHARP;\n  WBYTES=(VW+1)/8;\n  TBYTES=(WBYTES*(VH+1));\n  RTBYTES=8*CEIL(TBYTES/8) /* ROUND UP TO 8 BYTE BOUNDARY */;\n  TPT=2048*(CEIL((PT-10)/2048));\n  IF (PT-10+RTBYTES)>TPT THEN PT=TPT+10;\n  /* HAS TO FIT IN 2048 BYTE BLOCKS */;\n  PUT 'ADD=' VADDS ', TOTAL BYTES=' TBYTES ', ROUNDED TOAL BYTES='\n    RTBYTES ' ,POINTER=' PT ', 2048 BOUNDARY POINTER=' TPT\n    ', CHARACTER =' CHARP;\n     X=X+1;\n     IF X>CHARS THEN AD=PATTRNC;ELSE AD=VADDS;\n     X=X-1;\n     DIFF=AD-VADDS; IF DIFF NE RTBYTES THEN PUT '******<====';\n     PUT DIFF;IF CHARP NE CHARS THEN RTBYTES=DIFF;\n /* PREV 2 LINES ARE PROGRAM DIAGNOSTIC DATA */;\n  IF (PT-10+RTBYTES)>LEN THEN DO;\n   CHARP=CHARP-1;\n   RETURN;\n  END;\n    PUT _PAGE_ VNAME '  W=' VW  '  H=' VH '  A=' VA\n        '  B=' VB  '  C=' VC   / /; SEQ=0;\n  CHARID=VNAME;\n  DO K=0 TO VH BY 1;\n   XPATTRN='        ';\n   DO L=0 TO (WBYTES-1) BY 1;\n    INPUT @PT XC $CHAR1. @;\n    SUBSTR(XPATTRN,L+1,1)=XC;\n    PT=PT+1;\n   END;\n   /* OUTPUT SAS RECORD */;\n   DO;\n    LENGTH XHEX $ 32;\n    LENGTH XPRTLN $ 128;\n    XHEX=PUT(XPATTRN,$HEX32.);\n    XPRTLN=REPEAT(' ',128);\n    DO J=1 TO ((VW+1)/4);\n     XC=SUBSTR(XHEX,J,1);\n     SUBSTR(XPRTLN,((J-1)*4+1),4)=PUT(XC,$BIN.);\n    END;\n    PUT XPRTLN;\n    OUTPUT CHAR.RASTER;\n   END;\n   SEQ=SEQ+1;\n  END;\n  PT=PT+RTBYTES-TBYTES;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANB": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$B   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//* TAKE THE SAS RASTER FILE AND BUILD THE CHARACTER SET AGAIN\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//* A MODEL CHARACTER SET MUST BE INPUT, USUALLY THE ONE YOU ARE\n//* CHANGING OR MODIFYING\n//CHARX DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n//NEWCHAR DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(RECFM=VBA,BLKSIZE=8209,LRECL=8205),SPACE=(TRK,(5,5),RLSE)\n//* ONCE NO ERRORS CHANGE THE NEWCAR DD TO GO TO A PERMANENT FILE\n//* WHICH THEN IS COPIED INTO YOUR \"FONTLIB\" DATA SET THAT PSF USES\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//ABC DD *   YOU MUST NAME THE NEW CHARACTER SET\nC1D0HPZ1\n//SYSIN DD *\nOPTIONS GEN=0;\n  /* RASTER MUST HAVE #RECORDS = (HEIGHT+1) */\n  /*        MUST HAVE BIT PATTER IN XPATTRN */;\nDATA CHARDAT2(KEEP=CHARID CINCR CWIDTH CHEIGTH ASPACE BSPACE\n              CSPACE ADD PBYTES FBYTES)\n     CHARHDR(KEEP= TOTALBY CHARS);\nRETAIN TOTALBY 0 CHARS 0 ADD 0 CNT 0;\n  /* READ THE SAS FILES AND CALCULATE SOME GLOBAL DATA */;\nMERGE CHAR.RASTER\n      CHAR.CHARDAT1 END=EODAT;\n BY CHARID;\nIF _N_ = 1 THEN ADD=0;\nCNT+1;\nIF LAST.CHARID THEN DO;\n CHARS+1;\n FBYTES=(CWIDTH+1)/8*CNT;\n CNT=0;\n PBYTES=CEIL(FBYTES/8)*8; /* MOVE UP TO AN 8 BYTE BOUNDARY */;\n FBYTES=PBYTES-FBYTES; /* FILLER BYTES */;\n WORK=ADD+PBYTES;\n IF INT(ADD/2048) NE INT(WORK/2048) THEN /* OVERLAYS 2048 BOUNDARY */\n    ADD=INT(WORK/2048)*2048;\n OUTPUT CHARDAT2;\n ADD=ADD+PBYTES;\nEND;\nIF EODAT THEN DO;\n TOTALBY=ADD;\n OUTPUT CHARHDR;\nEND;\n\n /*PROC PRINT DATA=CHARDAT2 */;\n /*PROC PRINT DATA=CHARHDR */;\n\nDATA  _NULL_;  /* BUILD THE CHARACTER SET */;\nFILE NEWCHAR LINESIZE=8201 NOPRINT;\nINFILE CHARX STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X THEN DO /* PROCESS BEGIN FONT */;\n PUT _INFILE_;  /* COPY */;\n RETURN;\nEND;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n T1=TODAY();\n T2=TIME();\n INFILE ABC;\n INPUT SETNAME $8.;\n INFILE CHARX STOPOVER;\n PUT _INFILE_ @10 'HPZ CHANGED' T1 MMDDYY8.    /* COPY AN MODIFY */\n T2 TIME8. @36 SETNAME $8.  ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n PUT _INFILE_; /* COPY */;\n RETURN;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n PUT _INFILE_; /* COPY */;\n RETURN;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n SET CHARHDR;\n PUT _INFILE_ @27 TOTALBY IB3.;  /* COPY BUT MODIFIED */;\n RETURN;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n PUT _INFILE_; /* COPY */;\n RETURN;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n WORK=24*CHARS+8;\n PUT @1 '5A'X  @4 'D38C89000007'X  @2 WORK IB2. @;\n DO I =0 TO (CHARS-1);\n  SET CHARDAT2;\n  PT=10+I*24;\n  WORK=ADD/8;\n  PUT @PT CHARID $CHAR8. CINCR IB2. CWIDTH IB2. CHEIGTH IB2.\n      WORK IB4. ASPACE IB2. BSPACE IB2. CSPACE IB2. @;\n END;\n PUT @1 '5A'X;\n RETURN;\nEND;\nIF ID='D3EE89'X THEN DO /* FONT PATTERN RECORDS */;\n RETURN;  /*DROP ORIGINAL RECORDS */;\nEND;\nRETAIN SEQ 8;\nRETAIN PREV 10;\nLENGTH XC $ 1;\nIF ID='D3A989'X THEN DO /* END FONT */;\n DO I=0 TO (CHARS-1); /* OUTPUT RASTER PATTERN */;\n  SET CHARDAT2 END=ENDCHAR;\n  IF MOD(ADD,8192) EQ 0 AND ADD NE 0 THEN DO;\n   DO J=PREV TO (8192+10-1);\n    PUT @J '00'X  @;\n   END;\n   PUT @1 '5A2008D3EE8900'X  SEQ IB2.;\n   SEQ=SEQ+1;\n   PREV=10;\n  END;\n  WORK=MOD(ADD,8192);\n  DO J=PREV   TO WORK+10-1; /* FILL OTHER ON 2048 BOUNDARY */;\n   PUT @J '00'X  @;\n  END;\n  PT=10+WORK;\n  W=((CWIDTH+1)/8)-1;\n  DO M=0 TO CHEIGTH;\n   SET CHAR.RASTER;\n   DO K=0 TO W;\n    XC=SUBSTR(XPATTRN,(K+1),1);\n    PUT @PT XC $CHAR1. @;\n    PT=PT+1;\n   END;\n  END;\n  DO J=PT TO PT+FBYTES-1; /* FILL FILLER BYTES */;\n   PUT @J '00'X  @;\n   PT=PT+1;\n  END;\n  PREV=PT;\n  IF ENDCHAR     THEN DO;\n   WORK=PT+8-10;\n   PUT @1 '5A'X  WORK IB2. 'D3EE8900'X  SEQ IB2.;\n   SEQ=SEQ+1;\n  END;\n END;\nEND;\nIF ID='D3A989'X THEN    /* END FONT RECORD */;\n  PUT _INFILE_ @8 SEQ IB2.;\n//  EXEC AGIBMCOM,REPO=W UTILITY TO COMPARE TWO FILES\nOPT\n//OLD DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n//NEW DD DSN=&&TEMP,DISP=(OLD,PASS,DELETE)\n// EXEC AGRPRINT,REPO=W,COND=(0,NE) UTILITY TO PRINT FILE\nPRTBV\n//INPUT DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSFSCANC": {"ttr": 2829, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$C   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* TAKE THE SAS RASTER FILE AND DELETE CHARACTERS\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//ABC DD *   NAMES OF CHARACTERS TO DELETE, ONE PER CARD\nABCDEF00\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\nOPTIONS GEN=0;\nDATA ABC  (KEEP= CHARID);\nINFILE ABC;\nINPUT CHARID $CHAR8.;\n\nPROC SORT DATA=ABC;\n BY CHARID;\n\nDATA CHAR.RASTER(DROP=INRAS INABC);\nMERGE CHAR.RASTER(IN=INRAS)\n      ABC(IN=INABC);\n BY CHARID;\nIF INRAS AND INABC THEN RETURN;\nIF INRAS AND NOT INABC THEN OUTPUT CHAR.RASTER;\nIF NOT INRAS AND INABC THEN\n  PUT ' THE CHARACTER IS NOT IN THE CHARACTER SET ,CHAR=' CHARID;\n\nDATA CHAR.CHARDAT1(DROP=INRAS INABC);\nMERGE CHAR.CHARDAT1(IN=INCHAR)\n      ABC(IN=INABC);\n BY CHARID;\nIF INCHAR AND INABC THEN RETURN;\nIF INCHAR AND NOT INABC THEN OUTPUT CHAR.CHARDAT1;\nIF NOT INCHAR AND INABC THEN\n  PUT ' THE CHARACTER IS NOT IN THE CHARACTER SET ,CHAR=' CHARID;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAND": {"ttr": 3073, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$D   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* TAKE THE SAS RASTER FILE AND ADD A CHARACTER\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//* MULTIPLE CHARACTERS CAN BE ADDED IN ONE RUN\n//* NAME CINCR, CWIDTH, CHEIGHT, ASPACE, BSPACE, CSPACE\n//* CINCR IS CHARACTER INCREMENT,\n//* CWIDTH IS CHARACTER WIDTH\n//* CHEIGHT IS CHARACTER HEIGHT\n//* ASPACE, BSPACE AND CSPACE ARE THE CHARACTER A,B, AND C SPACE\n//*  VALUES\n//ABC DD *   NEW CHARACTER INFO AND RASTER PATTERN\nND100000        20         31          29    3   14    3\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n........****....................\n......********..................\n.....**********.................\n.....***....***.................\n....***......***................\n....***......***................\n...***........***...............\n...***...**...***...............\n...***..****..***...............\n...***..****..***...............\n...***..****..***...............\n...***..****..***...............\n...***..****..***...............\n...***..****..***...............\n...***..****..***...............\n...***...**...***...............\n...***........***...............\n....***......***................\n....***......***................\n.....***....***.................\n.....**********.................\n......********..................\n........****....................\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\nOPTIONS GEN=0;\nPROC FORMAT;\nVALUE $UNBIN (MAX=1)\n '....' = '0'\n '...*' = '1'\n '..*.' = '2'\n '..**' = '3'\n '.*..' = '4'\n '.*.*' = '5'\n '.**.' = '6'\n '.***' = '7'\n '*...' = '8'\n '*..*' = '9'\n '*.*.' = 'A'\n '*.**' = 'B'\n '**..' = 'C'\n '**.*' = 'D'\n '***.' = 'E'\n '****' = 'F'\n OTHER  = '*';\n\nDATA TEMPDAT1(KEEP=CHARID CINCR CWIDTH CHEIGTH ASPACE BSPACE CSPACE)\n     TEMPRAST(KEEP=CHARID XPATTRN);\nINFILE ABC  END=EOD ;\nRETAIN FLG 0;\nRETAIN CINCR CWIDTH CHEIGTH ASPACE BSPACE CSPACE;\nLENGTH CHARID $  8;\nLENGTH XPRTLN $ 128;\nRETAIN CHARID;\nIF FLG=0 THEN DO; /* READ AND PROCESS HEADER CARD */;\n INPUT CHARID $CHAR8. CINCR CWIDTH CHEIGTH ASPACE BSPACE CSPACE;\n FLG=1;\n IF CINCR NE (ASPACE + BSPACE + CSPACE) THEN DO;\n  PUT 'INCR NE A+B+C';\n  ABORT;\n END;\n IF NOT(CWIDTH = 15 OR CWIDTH = 31 OR CWIDTH = 63 OR CWIDTH=95\n  OR CWIDTH=127) THEN DO;\n  PUT 'WIDTH NOT 15, 31, 63, 95 OR 127 ' CWIDTH;\n  ABORT;\n END;\n OUTPUT TEMPDAT1;\nEND;\nIF FLG NE 0 THEN DO;\n IF CWIDTH = 95 THEN INPUT @1 XPRTLN $CHAR96. ;\n ELSE IF CWIDTH = 127 THEN INPUT @1 XPRTLN $CHAR128.;\n ELSE INPUT @1 XPRTLN $CHAR64.;\n IF VERIFY(SUBSTR(XPRTLN,1,(CWIDTH+1)),'.*') NE 0 THEN DO;\n  PUT 'PATTERN DATA NOT ALL (.) OR (*) ' XPRTLN;\n  ABORT;\n END;\n XHEX='0000000000000000';\n DO I=0 TO ((CWIDTH+1)/4)-1;\n  SUBSTR(XHEX,(I+1),1)=PUT(SUBSTR(XPRTLN,((I*4)+1),4),$UNBIN.);\n END;\n XPATTRN=(INPUT(XHEX,$HEX16.));\n OUTPUT TEMPRAST;\nEND;\nIF EOD AND FLG NE (CHEIGTH+1) THEN DO;\n PUT 'MISSING RASTER CARDS ';\n ABORT;\nEND;\nIF FLG=(CHEIGTH+1) THEN FLG=0;\n                   ELSE FLG=FLG+1;\n\nDATA CHAR.CHARDAT1(DROP= INMSTR INTEMP);\nMERGE CHAR.CHARDAT1(IN= INMSTR)\n           TEMPDAT1(IN= INTEMP);\n BY CHARID;\nIF INMSTR AND INTEMP THEN DO;\n PUT 'HAVE TO DELETE THE CHARACTER BEFORE ADDING, CAN NOT DO THIS '\n     CHARID;\n ABORT;\nEND;\nOUTPUT CHAR.CHARDAT1;\n\nDATA CHAR.RASTER(DROP= INMSTR INTEMP);\nMERGE CHAR.RASTER(IN= INMSTR)\n           TEMPRAST(IN= INTEMP);\n BY CHARID;\nIF INMSTR AND INTEMP THEN DO;\n PUT 'HAVE TO DELETE THE CHARACTER BEFORE ADDING, CAN NOT DO THIS '\n     CHARID;\n ABORT;\nEND;\nOUTPUT CHAR.RASTER;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANE": {"ttr": 3076, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$E   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* PRINT ALL INFO ABOUT THE CHARACTER IN THE SAS DATASET\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=SHR\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS AND THE RASTER PATTERN */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\n\nPROC PRINT DATA=CHAR.CHARDAT1;\nTITLE1 'CHARACTER DATA';\n\nDATA _NULL_;\nMERGE CHAR.RASTER CHAR.CHARDAT1;\n BY CHARID;\nIF FIRST.CHARID THEN\n PUT  _PAGE_ 'CHARACTER=' CHARID / /;\nLENGTH XHEX $ 32;\nLENGTH XPRTLN $ 128;\nXHEX=PUT(XPATTRN,$HEX32.);\nXPRTLN=REPEAT(' ',128);\nDO J=1 TO ((CWIDTH+1)/4);\n XC=SUBSTR(XHEX,J,1);\n SUBSTR(XPRTLN,((J-1)*4+1),4)=PUT(XC,$BIN.);\nEND;\nPUT XPRTLN;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANF": {"ttr": 3078, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$F   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* PRINT ALL INFO ON SELECTED CHARACTERS IN THE SAS DATASET\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=SHR\n//ABC DD * PUT THE NAMES OF THE CHARACTERS THAT YOU WANT PRINTED HERE\nLA010000\nND010000\n//SYSIN DD *\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS AND THE RASTER PATTERN */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\n\nDATA ABC;\nINFILE ABC;\nINPUT CHARID $CHAR8.;\n\nPROC SORT DATA=ABC;\nBY CHARID;\n\n\nDATA _NULL_;\nMERGE CHAR.RASTER(IN= INRAST)\n      CHAR.CHARDAT1(IN= INCHAR)\n      ABC (IN= INABC);\n BY CHARID;\nFILE OUT PRINT;\nIF INABC AND (NOT INRAST OR NOT INCHAR) THEN\n PUT 'REQUESTED CHAR NOT IN FILE, ' CHARID;\nIF NOT INABC THEN RETURN;\n\nIF FIRST.CHARID THEN DO;\n PUT  _PAGE_ 'CHARACTER=' CHARID $8. ', INCR=' CINCR 3.\n     ', WIDTH=' CWIDTH 3. ', HEIGTH=' CHEIGTH 3.\n     ', ASPACE=' ASPACE 3. ', BSPACE=' BSPACE 3.\n     ', CSPACE=' CSPACE 3. / /;\nEND;\nLENGTH XHEX $ 32;\nLENGTH XPRTLN $ 128;\nXHEX=PUT(XPATTRN,$HEX32.);\nXPRTLN=REPEAT(' ',128);\nDO J=1 TO ((CWIDTH+1)/4);\n XC=SUBSTR(XHEX,J,1);\n SUBSTR(XPRTLN,((J-1)*4+1),4)=PUT(XC,$BIN.);\nEND;\nPUT XPRTLN;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANH": {"ttr": 3080, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$H   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//* LOAD A CODE PAGE TO THE SAS FILE\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//TRANS DD DSN=SYS1.FONTLIB(T1D0BASE),DISP=SHR\n /* LOAD A CODE PAGE TO THE SAS FILE  SOME OF THE CODE IS NOT NEEDED\n /* THIS PROGRAM WAS CLONED FROM A MAP AND PRINT PROGRAM */;\nOPTIONS GEN=0;\nDATA CHAR.TRANSHDR(KEEP=CDPOINTS DEFAULTG\n                        DVALID DPRINT DINCR VARBSPAC)\n     CHAR.TRANSCHR(KEEP=CHARID CVALID CPRINT CINCR CDPOINT);\nRETAIN CDPOINTS 0;\nINFILE TRANS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A887'X OR ID= 'D3A987'X THEN RETURN; /* START AND END */;\nIF ID='D3EEEE'X THEN RETURN ; /* NOOP RECORD */;\nIF ID='D3A687'X THEN DO /* CODE PAGE DESCRIPTOR */;\n INPUT @46 CDPOINTS PIB2.;\nEND;\nIF ID='D3A787'X THEN DO /* CODE PAGE CONTROL */;\n INPUT @10 DEFAULTG $CHAR8.\n           FLG1 $CHAR1.\n       @22 FLG2 $CHAR1.;\n IF FLG1 ='0... ....'B THEN DVALID='Y';\n                       ELSE DVALID='N';\n IF FLG1 ='.0.. ....'B THEN DPRINT='Y';\n                       ELSE DPRINT='N';\n IF FLG1 ='..0. ....'B THEN DINCR='Y';\n                       ELSE DINCR='N';\n IF FLG2 ='.... 0...'B THEN VARBSPAC='Y';\n                       ELSE VARBSPAC='N';\n OUTPUT CHAR.TRANSHDR;\nEND;\nIF ID='D38C87'X THEN DO /* CODE PAGE INDEX */;\n X=0;\n DO I=0 TO (CDPOINTS-1);\n  PT=10+(I*10);\n  INPUT @PT        CHARID $CHAR8.\n                   CFLAG $CHAR1.\n                   CDPOINT $CHAR1. @;\n  IF CFLAG='0... ....'B THEN CVALID='Y';\n                        ELSE CVALID='N';\n  IF CFLAG='.0.. ....'B THEN CINCR='Y';\n                        ELSE CINCR='N';\n  IF CFLAG='..0. ....'B THEN CPRINT='Y';\n                        ELSE CPRINT='N';\n  PT2=X*33+1;\n  FORMAT CDPOINT $HEX2.;\n  OUTPUT CHAR.TRANSCHR;\n END;\nEND;\n\nPROC PRINT DATA=CHAR.TRANSHDR;\nPROC PRINT DATA=CHAR.TRANSCHR;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANI": {"ttr": 3082, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$I   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* PRINT A CODE PAGE FROM THE SAS FILE\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=OLD\nOPTIONS GEN=0;\nPROC PRINT DATA=CHAR.TRANSHDR;\nPROC PRINT DATA=CHAR.TRANSCHR;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANJ": {"ttr": 3084, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$J   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* DELETE CHARACTERS FROM A CODE PAGE, 1 OR MORE\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//ABC  DD  * PUT NAMES OF CHARACTERS TO DELETE\nABCDEF01\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA ABC;\nINFILE ABC;\nINPUT CHARID $CHAR8. ;\n\nPROC SORT DATA=ABC;\n BY CHARID;\n\nDATA CHAR.TRANSCHR(KEEP=CHARID CVALID CPRINT CINCR CDPOINT);\nMERGE ABC (IN= INABC)\n      CHAR.TRANSCHR(IN= INTRANS);\n BY CHARID;\nIF INABC AND NOT INTRANS THEN DO;\n PUT 'CHARACTER TO DELETE IS NOT IN THE FILE, CHAR=' CHARID;\n RETURN;\nEND;\nIF INABC AND INTRANS THEN DO;\n PUT 'THIS CHARACTER IS BEING DELETED=' CHARID;\n RETURN;\nEND;\nIF NOT INABC AND INTRANS THEN\n OUTPUT CHAR.TRANSCHR;\n\nDATA CHAR.TRANSHDR(KEEP=CDPOINTS DEFAULTG\n                        DVALID DPRINT DINCR VARBSPAC);\nSET CHAR.TRANSCHR END=EODAT;\nX+1;\nIF EODAT THEN DO;\n SET CHAR.TRANSHDR;\n CDPOINTS=X;\n OUTPUT CHAR.TRANSHDR;\nEND;\n\nPROC PRINT DATA=CHAR.TRANSHDR;\nPROC PRINT DATA=CHAR.TRANSCHR;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANK": {"ttr": 3086, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$K   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* ADD CHARACTERS TO  A CODE PAGE\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//* CHARID CVALID CPRINT CINCR CODEPOINT\n//* 'DEFAULT ' CHARID DVALID DPRINT DINCR VARBSPAC\n//* START IN COL 1, 1 SPACE BETWEEN FIELDS, DEFAULT MUST BE 8 CHARS\n//ABC  DD  * PUT CHARACTER DATA HERE\nLA010000 Y Y Y E1\nDEFAULT  SP010000 N Y Y N\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA TEMPHDR(KEEP=XEFAULTG XVALID XPRINT XINCR XARBSPAC)\n     TEMPCHR(KEEP=CHARID CVALID CPRINT CINCR CDPOINT);\nINFILE ABC END=EODAT;\nRETAIN SWITCH 0;\nINPUT CHARID $CHAR8. @;\nIF CHARID = 'DEFAULT' THEN DO;\n INPUT @1 DEFAULT $8. +1 XEFAULTG $8. +1 XVALID $1.\n         +1 XPRINT $1. +1 XINCR $1. +1 XARBSPAC $1.;\n IF NOT (XVALID = 'Y' OR XVALID='N')\n OR NOT (XPRINT='Y' OR XPRINT='N')\n OR NOT (XINCR='Y' OR XINCR='N')\n OR NOT (XARBSPAC='Y' OR XARBSPAC='N') THEN DO;\n  PUT 'ONE OF THE FLAGS FOR THE DEFAULT ARE NOT VALID';\n  ABORT;\n END;\n OUTPUT TEMPHDR;\n SWITCH=1;\nEND;\nELSE DO;\n INPUT @1 CHARID $8. +1 CVALID $1. +1 CPRINT $1.\n    +1 CINCR $1. +1 CDPOINT $HEX2.;\n IF NOT (CVALID = 'Y' OR CVALID='N')\n OR NOT (CPRINT='Y' OR CPRINT='N')\n OR NOT (CINCR='Y' OR CINCR='N') THEN DO;\n  PUT 'ONE OF THE FLAGS FOR THE CHARACTER ARE NOT VALID';\n  ABORT;\n END;\n OUTPUT TEMPCHR;\nEND;\nIF EODAT AND SWITCH = 0 THEN DO;\n XEFAULTG='NODEFAUL';\n OUTPUT TEMPHDR;\nEND;\n\nPROC SORT DATA=TEMPCHR;\n BY CHARID;\n\nDATA CHAR.TRANSCHR(KEEP=CHARID CVALID CPRINT CINCR CDPOINT);\nMERGE TEMPCHR(IN= INTMP)\n      CHAR.TRANSCHR(IN= INTRANS);\n BY CHARID;\nIF INTMP AND NOT INTRANS THEN DO;\n OUTPUT CHAR.TRANSCHR;\n PUT 'ADDING THIS CHARACTER=' CHARID;\n RETURN;\nEND;\nIF INTMP AND INTRANS THEN DO;\n PUT 'THIS CHARACTER IS BEING ALREADY IN THE FILE=' CHARID;\n ABORT;\nEND;\nIF NOT INTMP AND INTRANS THEN\n OUTPUT CHAR.TRANSCHR;\n\nDATA CHAR.TRANSHDR(KEEP=CDPOINTS DEFAULTG\n                        DVALID DPRINT DINCR VARBSPAC);\nSET CHAR.TRANSHDR;\nSET TEMPHDR;\nIF XEFAULTG NE 'NODEFAUL' THEN DO;\n DEFAULT=XEFAULTG;\n DVALID=XVALID;\n DPRINT=XPRINT;\n DINCR=XINCR;\n VARBSPAC=XARBSPAC;\nEND;\nOUTPUT CHAR.TRANSHDR;\n\nDATA CHAR.TRANSHDR(KEEP=CDPOINTS DEFAULTG\n                        DVALID DPRINT DINCR VARBSPAC);\nSET CHAR.TRANSCHR END=EODAT;\nX+1;\nIF EODAT THEN DO;\n SET CHAR.TRANSHDR;\n CDPOINTS=X;\n OUTPUT CHAR.TRANSHDR;\nEND;\n\nPROC PRINT DATA=CHAR.TRANSHDR;\nPROC PRINT DATA=CHAR.TRANSCHR;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANL": {"ttr": 3089, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$L   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//* TAKE THE SAS CODE PAGE AND BUILD THE REAL THING\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//NEWCHAR DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(RECFM=VBA,BLKSIZE=8209,LRECL=8205),SPACE=(TRK,(5,5),RLSE)\n//* WHEN READY CHANGE THE NEWCHAR DD TO WRITE TO A FILE AND THEN COPY\n//* THE FILE INTO THE \"FONTLIB\" PDS THAT IS USED BY PSF\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//ABC DD *  PUT NAME OF THE CODE PAGE HERE\nT1D0HPZ1\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA  _NULL_;\nFILE NEWCHAR LINESIZE=8201 NOPRINT;\nINFILE ABC;\nINPUT TRANNAME $ ;\nPUT '5A0008D3A887000001'X; /* BEGIN CODE PAGE */;\nT1=TIME();\nT2=DATE();\nM=-1;\nWORK=63;\nPUT '5A'X @4 'D3EEEE000002'X @2 WORK IB2. /* NOOP RECORD */\n    @10 'BUILT BY HPZ' @36 TRANNAME $8. T1 TIME. T2 MMDDYY8. @ 64 'X';\nSET CHAR.TRANSHDR;\nPUT '5A0032D3A687000003'X      /* CODE PAGE DESCRIPTOR */\n    'DCF REL 2 COMPATIBILITY HPZ'\n    @42 '0008000000'X    CDPOINTS IB1.    'FFFF0000'X;\nFLAG=0;\nIF DVALID='N' THEN FLAG=128;\nIF DPRINT='N' THEN FLAG=FLAG+64;\nIF DINCR='N' THEN FLAG=FLAG+32;\nFLG2=0;\nIF VARBSPAC='N' THEN FLG2=8 ;\nPUT '5A0015D3A787000004'X     /* CODE PAGE CONTROL */\n    DEFAULTG $8.    FLAG PIB1.\n    '0A4040'X    FLG2 IB1.;\nDO I=0 TO (CDPOINTS-1);   /* CODE PAGE INDEX */;\n SET CHAR.TRANSCHR;\n FLAG=0;\n IF CVALID='N' THEN FLAG=128;\n IF CPRINT='N' THEN FLAG=FLAG+64;\n IF CINCR='N' THEN FLAG=FLAG+32;\n PT=(10*I)+10;\n PUT @PT CHARID @PT+8 FLAG PIB1. CDPOINT $CHAR1. @;\nEND;\nWORK=CDPOINTS*10+8;\nPUT @1 '5A'X @2 WORK IB2. @4 'D38C87000005'X;\nPUT '5A0008D3A987000006'X; /* END CODE PAGE */;\n//  EXEC AGIBMCOM,REPO=W COMPARE UTILITY\nOPT\n//OLD DD DSN=SYS1.FONTLIB(T1D0BASE),DISP=SHR\n//NEW DD DSN=&&TEMP,DISP=(OLD,PASS,DELETE)\n// EXEC AGRPRINT,REPO=W,COND=(0,NE) PRINT UTILITY\nPRTBV\n//INPUT DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSFSCANM": {"ttr": 3329, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$M   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* ROTATE A CHARACTER SET\n//* THE DD NAME OF THE SAS FILE IS CHAR\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\nOPTIONS GEN=0;\n  /* TAKE A DOWN CHARACTER SET C2......  AND ROTATE IT AND BUILD\n     THE CORRESPONDING UP FONT C4......  */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\nVALUE $UNBIN (MAX=1)\n '....' = '0'\n '...*' = '1'\n '..*.' = '2'\n '..**' = '3'\n '.*..' = '4'\n '.*.*' = '5'\n '.**.' = '6'\n '.***' = '7'\n '*...' = '8'\n '*..*' = '9'\n '*.*.' = 'A'\n '*.**' = 'B'\n '**..' = 'C'\n '**.*' = 'D'\n '***.' = 'E'\n '****' = 'F'\n OTHER  = '*';\n\nDATA\n CHAR.NEWRAS(KEEP= CHARID XPATTRN)\n CHAR.NEWCHAR(KEEP=CHARID CINCR CWIDTH CHEIGTH MASCEND UBASEOFF\n               ASPACE BSPACE CSPACE);\n LENGTH XPATTRN $ 16;\n LENGTH CHARID $ 8;\n ARRAY VBITL(X) $ 8 ABIT1-ABIT64;  /* BIT ARRAY */;\n RETAIN ABIT1-ABIT64 ;\nSET CHAR.CHARDAT1;\nDO OVER VBITL;\n VBITL= '0000000000000000'X;  /* INITIALIZE */;\nEND;\nX=1;\nDO Y=1 TO (CHEIGTH+1); /* LOAD PATTERN INTO ARRAY */;\n SET CHAR.RASTER;\n IF Y> ASPACE THEN DO;\n  X=CHEIGTH+2-Y;\n  IF CWIDTH=15 THEN SUBSTR(XPATTRN,3,6)='000000000000'X;\n  IF CWIDTH=31 THEN SUBSTR(XPATTRN,5,4)='00000000'X;\n  VBITL=XPATTRN;\n END;\nEND;\nDO X=1 TO BSPACE; /* NOW FLIP LEFT TO RIGHT */;\n TP=1;\n LENGTH XTO $ 64;\n XTO=REPEAT('.',64);\n DO;  /* EXPAND */;\n  LENGTH XHEX $ 16;\n  LENGTH XFROM $ 64;\n  LENGTH TEMP $ 8;\n  TEMP=VBITL;\n  XHEX=PUT(TEMP,$HEX16.);\n  XFROM=REPEAT('.',64);\n  DO J=1 TO 16;\n   XC=SUBSTR(XHEX,J,1);\n   SUBSTR(XFROM,((J-1)*4+1),4)=PUT(XC,$BIN.);\n  END;\n END;\n LEN=MASCEND+UBASEOFF;\n SUBSTR(XTO,1,LEN)=REVERSE(SUBSTR(XFROM,1,LEN));\n XHEX='0000000000000000';\n DO I=0 TO 15; /* SHRINK */;\n  SUBSTR(XHEX,(I+1),1)=PUT(SUBSTR(XTO,((I*4)+1),4),$UNBIN.);\n END;\n TEMP=(INPUT(XHEX,$HEX16.));\n VBITL=TEMP;\nEND;\nMAX=0;\nDO J=1 TO CHEIGTH+1; /* CHECK MAX AND OUTPUT */;\n X=J;\n TEMP=VBITL;\n DO I =8 TO 1 BY -1;\n  IF SUBSTR(TEMP,I,1) NE '00'X THEN DO;\n   IF MAX<I THEN MAX=I;\n  END;\n END;\n XPATTRN=TEMP;\n OUTPUT CHAR.NEWRAS;\nEND;\nIF MAX=1 THEN MAX=2; /* 15 */\nIF MAX=0 THEN MAX=2; /* 15 */\nIF MAX=3 THEN MAX=4; /* 31 */\nIF MAX=5 OR MAX=6 OR MAX=7 THEN MAX=8; /* 63 */\nCWIDTH=(MAX*8)-1;\nUBASEOFF=MASCEND;\nOUTPUT CHAR.NEWCHAR;\n\n    PROC PRINT DATA=CHAR.NEWCHAR  ;\n  /*PROC PRINT DATA=CHAR.NEWRAS*/;\n  /*FORMAT XPATTRN $HEX16. */;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANN": {"ttr": 3332, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$N   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* PRINT ALL INFO ABOUT THE CHARACTER IN THE SAS DATASET\n//A EXEC SAS@\n//CHAR DD DSN=HPZ.SAS.CHARSET,DISP=SHR\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS AND THE RASTER PATTERN */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\n\nPROC PRINT DATA=CHAR.NEWCHAR;\nTITLE1 'CHARACTER DATA';\n\nDATA _NULL_;\nMERGE CHAR.NEWRAS CHAR.NEWCHAR;\n BY CHARID;\nIF FIRST.CHARID THEN\n PUT  _PAGE_ 'CHARACTER=' CHARID / /;\nLENGTH XHEX $ 16;\nLENGTH XPRTLN $ 64;\nXHEX=PUT(XPATTRN,$HEX16.);\nXPRTLN=REPEAT(' ',64);\nDO J=1 TO ((CWIDTH+1)/4);\n XC=SUBSTR(XHEX,J,1);\n SUBSTR(XPRTLN,((J-1)*4+1),4)=PUT(XC,$BIN.);\nEND;\nPUT XPRTLN;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANO": {"ttr": 3334, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$O   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* TAKE THE SAS RASTER FILE AND BUILD THE CHARACTER SET AGAIN\n//* BUT THIS IS AN UP VERSION OF THE SET\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//* A MODEL OF THE CHARACTER SET MUST BE INPUT, USUALLY THIS IS THE\n//* DOWN VERSION OF THE CHARACTER SET\n//CHARX DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n//NEWCHAR DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(RECFM=VBA,BLKSIZE=8209,LRECL=8205),SPACE=(TRK,(5,5),RLSE)\n//* WHEN READY CHANGE THE NEWCHAR DD TO CREATE A FILE AND THEN COPY\n//* THE FILE INTO YOUR \"FONTLIB\" PDS THAT PSF USES\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//ABC DD * NEW NAME OF THE CHARACTER SET\nC4D0HPZ1\n//SYSIN DD *\nOPTIONS GEN=0;\n  /* RASTER MUST HAVE #RECORDS = (HEIGHT+1) */\n  /*        MUST HAVE BIT PATTER IN XPATTRN */;\nDATA CHARDAT2(KEEP=CHARID CINCR CWIDTH CHEIGTH ASPACE BSPACE\n              CSPACE ADD PBYTES FBYTES)\n     CHARHDR(KEEP= TOTALBY CHARS);\nRETAIN TOTALBY 0 CHARS 0 ADD 0 CNT 0;\nMERGE CHAR.NEWRAS\n      CHAR.NEWCHAR END=EODAT;\n BY CHARID;\n  /* BUILD SOME GLOBAL DATA NEEDED LATER ON */;\nIF _N_ = 1 THEN ADD=0;\nCNT+1;\nIF LAST.CHARID THEN DO;\n CHARS+1;\n FBYTES=(CWIDTH+1)/8*CNT;\n CNT=0;\n PBYTES=CEIL(FBYTES/8)*8; /* MOVE UP TO AN 8 BYTE BOUNDARY */;\n FBYTES=PBYTES-FBYTES; /* FILLER BYTES */;\n WORK=ADD+PBYTES;\n IF INT(ADD/2048) NE INT(WORK/2048) THEN /* OVERLAYS 2048 BOUNDARY */\n    ADD=INT(WORK/2048)*2048;\n OUTPUT CHARDAT2;\n ADD=ADD+PBYTES;\nEND;\nIF EODAT THEN DO;\n TOTALBY=ADD;\n OUTPUT CHARHDR;\nEND;\n\n /*PROC PRINT DATA=CHARDAT2 */;\n /*PROC PRINT DATA=CHARHDR */;\n\nDATA  _NULL_;\nFILE NEWCHAR LINESIZE=8201 NOPRINT;\nINFILE CHARX STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X THEN DO /* PROCESS BEGIN FONT */;\n PUT _INFILE_; /* COPY */;\n RETURN;\nEND;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n T1=TODAY();\n T2=TIME();\n INFILE ABC;\n INPUT SETNAME $8.;\n INFILE CHARX STOPOVER;\n PUT _INFILE_ @10 'HPZ CHANGED' T1 MMDDYY8.  /*COPY PLUS CHANGES */\n T2 TIME8. @36 SETNAME $8.  ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n PUT _INFILE_  @56 '870087008700'X; /* COPY WITH CHANGES */;\n RETURN;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n PUT _INFILE_; /* COPY */;\n RETURN;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n SET CHARHDR;\n PUT _INFILE_ @27 TOTALBY IB3.; /* COPY WITH CHANGES */;\n RETURN;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n PUT _INFILE_ @10 '87000000'X; /* COPY WITH CHANGES */;\n RETURN;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n WORK=24*CHARS+8;  /* BUILD FROM SAS DATA */;\n PUT @1 '5A'X  @4 'D38C89000007'X  @2 WORK IB2. @;\n DO I =0 TO (CHARS-1);\n  SET CHARDAT2;\n  PT=10+I*24;\n  WORK=ADD/8;\n  PUT @PT CHARID $CHAR8. CINCR IB2. CWIDTH IB2. CHEIGTH IB2.\n      WORK IB4. ASPACE IB2. BSPACE IB2. CSPACE IB2. @;\n END;\n PUT @1 '5A'X;\n RETURN;\nEND;\nIF ID='D3EE89'X THEN DO /* FONT PATTERN RECORDS */;\n RETURN; /* DROP INPUT RECORDS */;\nEND;\nRETAIN SEQ 8;\nRETAIN PREV 10;\nLENGTH XC $ 1;\nIF ID='D3A989'X THEN DO /* END FONT */;\n DO I=0 TO (CHARS-1); /* OUTPUT RASTER PATTERN */;\n  SET CHARDAT2 END=ENDCHAR;\n  IF MOD(ADD,8192) EQ 0 AND ADD NE 0 THEN DO;\n   DO J=PREV TO (8192+10-1);\n    PUT @J '00'X  @;\n   END;\n   PUT @1 '5A2008D3EE8900'X  SEQ IB2.;\n   SEQ=SEQ+1;\n   PREV=10;\n  END;\n  WORK=MOD(ADD,8192);\n  DO J=PREV   TO WORK+10-1; /* FILL OTHER ON 2048 BOUNDARY */;\n   PUT @J '00'X  @;\n  END;\n  PT=10+WORK;\n  W=((CWIDTH+1)/8)-1;\n  DO M=0 TO CHEIGTH;\n   SET CHAR.NEWRAS;\n   DO K=0 TO W;\n    XC=SUBSTR(XPATTRN,(K+1),1);\n    PUT @PT XC $CHAR1. @;\n    PT=PT+1;\n   END;\n  END;\n  DO J=PT TO PT+FBYTES-1; /* FILL FILLER BYTES */;\n   PUT @J '00'X  @;\n   PT=PT+1;\n  END;\n  PREV=PT;\n  IF ENDCHAR     THEN DO;\n   WORK=PT+8-10;\n   PUT @1 '5A'X  WORK IB2. 'D3EE8900'X  SEQ IB2.;\n   SEQ=SEQ+1;\n  END;\n END;\nEND;\nIF ID='D3A989'X THEN    /* END FONT RECORD */;\n  PUT _INFILE_ @8 SEQ IB2.;\n//  EXEC AGIBMCOM,REPO=W A COMPARE UTILITY\nOPT\n//OLD DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n//NEW DD DSN=&&TEMP,DISP=(OLD,PASS,DELETE)\n// EXEC AGRPRINT,REPO=W,COND=(0,NE) A FILE PRINT UTILITY\nPRTBV\n//INPUT DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PSFSCANP": {"ttr": 3338, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$P   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* COMPARE THE SAS CHARACTER AND TRANSLATE FILES FOR DIFFERENCES\n//* MANY TIMES THERE ARE DIFFERENCES, MATCH BY CHARACTER NAME\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHAR  DD DSN=HPZ.SAS.CHARSET,DISP=OLD\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA ABC(KEEP= CHARID CDPOINT);\nMERGE CHAR.TRANSCHR(IN=INTRAN RENAME=(CINCR=XINCR))\n      CHAR.CHARDAT1(IN=INCHAR);\n BY CHARID;\nIF INCHAR AND NOT INTRAN THEN\n PUT CHARID 'IN CHARACTER ONLY';\nIF INTRAN AND NOT INCHAR THEN\n PUT CHARID 'IN TRANSLATE ONLY';\nIF INTRAN AND INCHAR THEN OUTPUT ABC;\n\nPROC SORT DATA=ABC;\n BY CDPOINT;\n\nPROC PRINT DATA=ABC;\nFORMAT CDPOINT $HEX2.;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCANQ": {"ttr": 3340, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$Q   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* BUILD OVERLAYS\n//* BUT THIS IS AN UP VERSION OF THE SET\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//XYZ OUTPUT PRMODE=PAGE,DATACK=BLKCHAR\n//NEWCHAR DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(RECFM=VBA,BLKSIZE=8209,LRECL=8205),SPACE=(TRK,(5,5),RLSE)\n//* TO SEE YOUR RESULTS YOU CAN SEND THE NEWCHAR DD FILE DIRRECTLY\n//* TO THE PRINTER\n//ABC DD *\nBPG HPZ1\nNOP\nBAG\nMCF X1GT10 X1GB10 X2GT18 X2AG0002 X1GT20 X1GT18 ENDMCF\nPGD 11.005 IN 7.005 IN\nCTC\nCTD\nEAG\nIPS S1SIGNAT 1 IN 1 IN\nIPS S1PALM2  3 IN 1 IN\nIPS S1ROSE   1 IN 5 IN\nBCT\nCTX\nMATRIX .5 IN .5 IN\nENDCTX\nCTX\nAMB 3.2 IN\nAMI 3.1 IN\nBOX 1 IN 1 IN 5\nRMB 1.1 IN\nRMI 1.1 IN\nDIR .3 IN 8\nDBR .1 IN 8\nRMB -0.9 IN\nRMI -0.5 IN\nSCFL 2\nTRN 5 ABCDEF\nRMB .25 IN\nSCFL 1\nRPS 3 1 X\nENDCTX\nCTX\nSTO DOWN\nAMB 3.2 IN\nAMI 3.1 IN\nSIM .5 IN\nSBI .1 IN\nSCFL 4\nRPS 20 1 ~\nRMI -2 IN\nSCFL 3\nTRN 20 THIS IS A SAMPLE 1\nBLN\nSCFL 4\nRPS 20 1 ~\nRMI -2 IN\nSCFL 3\nTRN 20 THIS IS A SAMPLE 2\nBLN\nSCFL 4\nRPS 20 1 ~\nRMI -2 IN\nSCFL 3\nTRN 20 THIS IS A SAMPLE 3\nBLN\nSCFL 4\nRPS 20 1 ~\nRMI -2 IN\nSCFL 3\nTRN 20 THIS IS A SAMPLE 4\nBLN\nSTO ACROSS\nSIM 1.1 IN\nBLN\nSCFL 5\nSVI .2 IN\nTRN 25 SAMPLE AT .1 INCH APART1\nBLN\nSCFL 6\nSII 20 PELS\nTRN 25 SAMPLE AT .1 INCH APART2\nBLN\nDIR 1 IN 3\nDBR 1 IN 3\nRMB 1 IN\nRMI .5 IN\nDIR .5 IN 6\nDBR .5 IN 6\nSIM 0 PELS\nENDCTX\nECT\nEPG\n//SYSIN DD *\nOPTIONS GEN=0;\nDATA  _NULL_;\nFILE NEWCHAR LINESIZE=8201 NOPRINT COLUMN=COLOUT;\nINFILE ABC STOPOVER;\n LENGTH CRD $ 80;\n INPUT CRD $CHAR80. @;\n FILE OUT;\n PUT '  ' CRD $CHAR80.;\n FILE NEWCHAR LINESIZE=8201 NOPRINT COLUMN=COLOUT;\nLENGTH OPCODE $ 6;\nINPUT @1 OPCODE $       @;\nIF OPCODE ='BMO' THEN DO; /* BEGIN MEDIUM OVERLAY */;\n LENGTH OVERNAME $ 8;\n RETAIN OVERNAME  ;\n INPUT OVERNAME $ ;\n PUT '5A0016D3A8DF000001'X OVERNAME $CHAR8. '000000000000'X;\n RETURN;\nEND;\nIF OPCODE ='NOP' THEN DO; /* WRITE A DUMMY COMMENT */;\n T1=TIME();\n T2=DATE();\n PUT '5A003FD3EEEE000001'X 'CREATED BY HPZ' T1 TIME8.\n      T2 MMDDYY8. @64 'X';\n RETURN;\nEND;\nIF OPCODE='BAG' THEN DO; /* BEGIN ACTIVE ENVIRONMENT */;\n PUT '5A0016D3A8C9000002'X 'HPZTOKEN' '000000000000'X;\n RETURN;\nEND;\nRETAIN X Y ;\nIF OPCODE='PGD' THEN DO; /* PAGE DESCRIPTOR */;\n INPUT X XTYPE $ Y YTYPE $ ; /* READ PAGE SIZE */\n LINK CHKX;\n LINK CHKY;\n PUT '5A0017D3A6AF000002000009600960'X X IB3. Y IB3.\n     '000400'X;\n RETAIN XSIZE YSIZE;\n XSIZE=X;\n YSIZE=Y;\n RETURN;\nEND;\nIF OPCODE='CTC' THEN DO; /* COMPOSED TEXT CONTROL */;\n PUT '5A0012D3A79B00000300000000000000002D00'X;\n RETURN;\nEND;\nIF OPCODE='CTD' THEN DO; /* COMPOSED TEXT DESCRIPTOR */;\n PUT '5A0019D3A69B000004000009600960'X  XSIZE IB2. YSIZE IB2.\n     '00000000000000'X;\n RETURN;\nEND;\nIF OPCODE='EAG' THEN DO; /* END ACTIVE ENVIRONMET GROUP */;\n PUT '5A0010D3A9C9000002'X 'HPZTOKEN' ;\n RETURN;\nEND;\nIF OPCODE='IPS' THEN DO; /* INCLUDE PAGE SEGMENT */;\n INPUT SEGNAME $ @;\n INPUT X XTYPE $ Y YTYPE $ ; /* READ PAGE SIZE */\n LINK CHKX;\n LINK CHKY;\n PUT '5A0018D3AF5F000005'X SEGNAME $CHAR8.\n     X IB3. Y IB3. '0000'X;\n RETURN;\nEND;\nIF OPCODE='EMO' THEN DO; /* END MEDIUM OVERLAY */;\n PUT '5A0010D3A9DF000001'X OVERNAME $CHAR8.;\n RETURN;\nEND;\n  /* IF BEGIN/END PAGE INSTEAD OF OVERLAY THEN CAN WRITE TO SYSOUT*/;\nIF OPCODE ='BPG' THEN DO; /* BEGIN PAGE */;\n INPUT OVERNAME $ ;\n PUT '5A0016D3A8AF000001'X OVERNAME $CHAR8. '000000000000'X;\n RETURN;\nEND;\nIF OPCODE='EPG' THEN DO; /* END PAGE */;\n PUT '5A0010D3A9AF000001'X OVERNAME $CHAR8.;\n RETURN;\nEND;\nIF OPCODE ='BCT' THEN DO; /* BEGIN TEXT BLOCK */;\n PUT '5A0016D3A89B000001'X 'TEXTTOK '  '000000000000'X;\n RETURN;\nEND;\nIF OPCODE='ECT' THEN DO; /* END TEXT BLOCK */;\n PUT '5A0010D3A99B000001'X 'TEXTTOK ' ;\n RETURN;\nEND;\n RETAIN XPOS YPOS;\nIF OPCODE='MCF' THEN DO; /* MAP CODED FONT */;\n RETAIN FNTNO;\n FNTNAME='        ';\n FNTNO=1;\n DO UNTIL (FNTNAME='ENDMCF');\n  INPUT FNTNAME $ @;\n  IF FNTNAME NE 'ENDMCF' THEN DO;\n   PT=28*(FNTNO-1)+14;\n   PUT @PT FNTNO PIB1. '000000'X FNTNAME $CHAR8.\n      'FFFF000000000000'X 'FFFF000000000000'X @;\n   FNTNO=FNTNO+1;\n  END;\n  ELSE DO;\n   PUT @1 '5A'X @4 'D3B18A0000011C000000'X @;\n   FNTNO=FNTNO-1;\n   WORK=FNTNO*28+12;\n   PUT @2 WORK IB2.;\n  END;\n END;\n RETURN;\nEND;\nIF OPCODE='CTX' THEN DO; /* START COMPOSED TEXT */;\n PUT @1 '5A0000D3EE9B0000012BD3'X @;\n RETURN;\nEND;\nIF OPCODE='AMB' THEN DO; /* ABSOLUTE MOVE BASELINE */;\n INPUT Y YTYPE $ ;\n LINK CHKY;\n IF Y>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04D3'X Y IB2. @;\n YPOS=Y;\n RETURN;\nEND;\nIF OPCODE='AMI' THEN DO; /* ABSOLUTE MOVE INLINE */;\n INPUT X XTYPE $ ;\n LINK CHKX;\n IF X>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04C7'X X IB2. @;\n XPOS=X;\n RETURN;\nEND;\nIF OPCODE='RMB' THEN DO; /* RELATIVE MOVE BASELINE */;\n INPUT Y YTYPE $ ;\n LINK CHKY;\n IF Y+YPOS>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04D5'X Y IB2. @;\n YPOS=Y+YPOS;\n RETURN;\nEND;\nIF OPCODE='RMI' THEN DO; /* RELATIVE MOVE INLINE */;\n INPUT X XTYPE $ ;\n LINK CHKX;\n IF X+XPOS>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X POSITION TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '04C9'X X IB2. @;\n XPOS=X+XPOS;\n RETURN;\nEND;\nIF OPCODE='DBR' THEN DO; /* DRAW BASELINE RULE */;\n INPUT Y YTYPE $ THICK;\n LINK CHKTHICK;\n LINK CHKY;\n IF YPOS+Y>YSIZE THEN DO;\n  FILE OUT;\n  PUT 'Y LENGTH TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '07E7'X Y IB2. THICK IB3. @;\n RETURN;\nEND;\nIF OPCODE='DIR' THEN DO; /* DRAW INLINE RULE */;\n INPUT X XTYPE $ THICK;\n LINK CHKTHICK;\n LINK CHKX;\n IF XPOS+X>XSIZE THEN DO;\n  FILE OUT;\n  PUT 'X LENGTH TOO LARGE ON ' OPCODE ' CARD';\n  ABORT;\n END;\n PUT '07E5'X X IB2. THICK IB3. @;\n RETURN;\nEND;\nIF OPCODE='ENDCTX' THEN DO; /* PSEUDO OP CODE, WRITE CTX RECORD */;\n PUT '02F8'X @; /* NOOP CTX */;\n WORK=COLOUT-2;\n PUT @2 WORK IB2.;\n RETURN;\nEND;\nIF OPCODE='SCFL' THEN DO; /* SET CODED FONT LOCAL */;\n INPUT FONT;\n IF FONT<0 OR FONT>FNTNO THEN DO;\n  FILE OUT;\n  PUT 'FONT NUMBER INVALID ON SCFL CARD';\n  ABORT;\n END;\n PUT '03F1'X FONT IB1. @;\n RETURN;\nEND;\nIF OPCODE='TRN' THEN DO; /* TRANSPARENT DATA */;\n INPUT TEXTLEN @;\n IF TEXTLEN <1 OR TEXTLEN>69 THEN DO;\n  FILE OUT;\n  PUT 'TEXT LENGTH IS INVALID ON ' OPCODE ' CARD';\n  ABORT;\n END;\n INPUT TEXT $VARYING69. TEXTLEN;\n WORK=TEXTLEN+2;\n PUT WORK PIB1. 'DB'X TEXT $VARYING69. TEXTLEN @;\n RETURN;\nEND;\nIF OPCODE='RPS' THEN DO; /* REPEAT STRING */;\n INPUT OLEN @;\n IF OLEN <1 OR OLEN> 4096 THEN DO;\n  FILE OUT;\n  PUT 'OUTPUT LENGTH INVALID ON RPS CARD';\n  ABORT;\n END;\n INPUT TEXTLEN @;\n IF TEXTLEN <1 OR TEXTLEN>69 THEN DO;\n  FILE OUT;\n  PUT 'TEXT LENGTH IS INVALID ON ' OPCODE ' CARD';\n  ABORT;\n END;\n INPUT TEXT $VARYING69. TEXTLEN;\n WORK=TEXTLEN+4;\n PUT WORK PIB1. 'EF'X OLEN IB2. TEXT $VARYING69. TEXTLEN @;\n RETURN;\nEND;\nIF OPCODE='BOX' THEN DO; /* PSEUDO OP TO DRAW BOX */;\n INPUT X XTYPE $ Y YTYPE $ THICK ;\n LINK CHKX;\n LINK CHKY;\n LINK CHKTHICK;\n TH=THICK/256;\n IF X+XPOS+TH >XSIZE THEN DO;\n  FILE OUT;\n  PUT 'BOX EXCEEDS X PAGESIZE';\n  ABORT;\n END;\n IF Y+YPOS+TH >YSIZE THEN DO;\n  FILE OUT;\n  PUT 'BOX EXCEEDS Y PAGESIZE';\n  ABORT;\n END;\n /* NOTE THE COORDINATES ARE THE OUTSIDE CORNERS OF THE BOX */\n /* THE THICKNESS STARTS ON THE PEL COORDINATE AND EXTENDS   */\n /* TOWARD THE CENTER OF THE BOX */;\n WLEN=-X;\n HLEN=-Y;\n THICK=-THICK;\n PUT '04D5'X Y IB2. /*RMB*/ '04C9'X X IB2. /*RMI*/\n     '07E7'X HLEN IB2. THICK IB3. @ /* DBR */;\n PUT '07E5'X WLEN IB2. THICK IB3. @ /* DIR */;\n X=-X;\n Y=-Y;\n WLEN=-WLEN;\n HLEN=-HLEN;\n THICK=-THICK;\n PUT '04D5'X Y IB2. /*RMB*/ '04C9'X X IB2. /*RMI*/\n     '07E5'X WLEN IB2. THICK IB3. /* DIR */\n     '07E7'X HLEN IB2. THICK IB3. @ /* DBR */;\n RETURN;\nEND;\nIF OPCODE='MATRIX' THEN DO; /* PSEUDO OP CODE TO DRAW GRID */;\n INPUT X XTYPE $ Y YTYPE $ ;\n LINK CHKX;\n LINK CHKY;\n XTMP=0;\n YTMP=0;\n PUT '04D3000004C70000'X @;/* AMB, AMI TO ORIGIN */;\n DO UNTIL (YTMP>YSIZE);\n  PUT '07E5'X XSIZE IB2. '000100'X @; /* DIR */;\n  YTMP=YTMP+Y;\n  IF YTMP+1<=YSIZE THEN PUT '04D5'X Y IB2. @;/* RMB */;\n END;\n PUT '04D30000'X @;/* AMB TO ORIGIN */;\n DO UNTIL (XTMP>XSIZE);\n  PUT '07E7'X YSIZE IB2. '000100'X @; /* DBR */;\n  XTMP=XTMP+X;\n  IF XTMP+1<=XSIZE THEN PUT '04C9'X X IB2. @;/* RMI */;\n END;\n YPOS=0;\n XPOS=0;\n PUT '04D3'X YPOS IB2. '04C7'X XPOS IB2. @;/* AMB AMI */;\n RETURN;\nEND;\nIF OPCODE='BLN' THEN DO; /* BEGIN LINE */;\n PUT '02D9'X @;\n RETURN;\nEND;\nIF OPCODE='SBI' THEN DO; /* SET BASELINE INCR */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<5 OR X>240 THEN DO;\n  PUT 'SET BASELINE INCR VALUE LT 5 OR GT 240 ' X;\n  ABORT;\n END;\n PUT '04D1'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='SIM' THEN DO; /* SET INLINE MARGIN */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<0 OR X>2000 THEN DO;\n  PUT 'SET INLINE MARGIN VALUE LT 0 OR GT 2000 ' X;\n  ABORT;\n END;\n PUT '04C1'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='SVI' THEN DO; /* SET VARIABLE SPACE INCREMENT */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X<1 OR X>240 THEN DO;\n  PUT 'SET VARIABLE SPACE INCREMENT LT 1 OR GT 240 ' X;\n  ABORT;\n END;\n PUT '04C5'X X PIB2. @;\n RETURN;\nEND;\nIF OPCODE='STO' THEN DO; /* SET TEXT ORIENTATION */;\n INPUT DIR $;\n IF NOT (DIR='ACROSS' OR DIR='UP' OR DIR='DOWN') THEN DO;\n  PUT 'SET TEXT ORIENTATION DIRECTION INVALID ' DIR;\n  ABORT;\n END;\n LENGTH DIRX $ 4;\n IF DIR='ACROSS'    THEN DIRX='00002D00'X;\n ELSE IF DIR='DOWN' THEN DIRX='2D005A00'X;\n ELSE                    DIRX='87000000'X;\n PUT '06F7'X DIRX $CHAR4. @;\n RETURN;\nEND;\nIF OPCODE='SII' THEN DO; /* SET INTERCHARACTER INCREMENT */;\n INPUT X XTYPE;\n LINK CHKX;\n IF X < 0 OR X>240 THEN DO;\n  PUT 'SET INTERCHARACTER INCREMENT INVALID ' X;\n  ABORT;\n END;\n PUT '04C3'X X PIB2. @;\n RETURN;\nEND;\n\nFILE OUT;\nPUT 'UNKNOWN OPCODE TYPE:' OPCODE;\nABORT;\nRETURN;\nCHKY:\n IF NOT (YTYPE='IN' OR YTYPE='PELS') THEN DO;\n  FILE OUT;\n  PUT 'INVALID TYPE OF INCREMENT ON ' OPCODE ' CARD:' YTYPE;\n  ABORT;\n END;\n IF YTYPE='IN' THEN Y=Y*240;\n Y=INT(Y);\n RETURN;\nCHKX:\n IF NOT (XTYPE='IN' OR XTYPE='PELS') THEN DO;\n  FILE OUT;\n  PUT 'INVALID TYPE OF INCREMENT ON ' OPCODE ' CARD:' XTYPE;\n  ABORT;\n END;\n IF XTYPE='IN' THEN X=X*240;\n X=INT(X);\n RETURN;\nCHKTHICK:\n IF THICK>10 OR THICK<-10 THEN DO;\n  FILE OUT;\n  PUT 'THICKNESS VALUE INVALID ON ' OPCODE ' CARD:' THICK;\n  ABORT;\n END;\n THICK=THICK*256; /* MOVE OVER 8 BITS FOR LATER OUTPUT */;\n RETURN;\n//A EXEC AGRPRINT,REPO=W  A FILE PRINT UTILITY\nPRTBV\n//INPUT DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN1": {"ttr": 3590, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$F   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//*  UNLOAD THE FONTLIB BUT SELECT THE X1.... MEMBERS ONLY\n//*  PRODUCE A CROSS REFERENCE REPORT OF THE CHARACTER SETS TO\n//*  TRANSLATE TABLES TO FONT NAMES.\n//A EXEC SAS@\n//OUT1 DD UNIT=DISK,SPACE=(CYL,(5,5),RLSE),\n//   DSN=&&TEMP,DISP=(,PASS,DELETE),\n//  DCB=(LRECL=80,RECFM=FB,BLKSIZE=11440)\n//PROCLIB DD DSN=SYS1.FONTLIB,DISP=SHR\nOPTIONS GEN=0;\nPROC SOURCE INDD=PROCLIB NOPRINT OUTDD=OUT1 NOALIAS;\nSELECT X1:; /* SELECT MEMBERS STARTING WITH X1 ONLY */;\nDATA ABC(KEEP=FONT CHARSET TRANSTBL);\nINFILE OUT1;\nRETAIN SW 0;\nLENGTH FONT $ 8;\nRETAIN FONT;\nINPUT @16 NAMEX1 $CHAR7. @;\nIF NAMEX1 = 'NAME=X1' THEN DO; /* PICK UP THE FONT NAME */;\n   SW=1;INPUT @21 FONT $CHAR8. ;DELETE;END;\nIF SW = 0 THEN DELETE; /* DELETE REST OF THE RECORDS */;\nINPUT @46 CHARSET $CHAR8. TRANSTBL $CHAR8.; /*GET REST */;\nSW=0;\nOUTPUT ABC;\n\nPROC PRINT DATA=ABC;\nTITLE1 'FONTS AND THEIR CORRESPONDING CHARACTER SETS AND';\nTITLE2 'TRANSLATE TABLES';\nTITLE3 'SORTED BY FONT NAME';\n\nPROC SORT DATA=ABC;\nBY CHARSET FONT;\n\nPROC PRINT DATA=ABC;\nTITLE1 'FONTS AND THEIR CORRESPONDING CHARACTER SETS AND';\nTITLE2 'TRANSLATE TABLES';\nTITLE3 'SORTED BY CHARACTER SET NAME AND FONT NAME';\n\nPROC SORT DATA=ABC;\nBY TRANSTBL FONT;\n\nPROC PRINT DATA=ABC;\nTITLE1 'FONTS AND THEIR CORRESPONDING CHARACTER SETS AND';\nTITLE2 'TRANSLATE TABLES';\nTITLE3 'SORTED BY TRANSLATE TABLE AND FONT NAME';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN4": {"ttr": 3592, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$F   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* READ A SINGLE TRANSLATE MEMBER AND FORMAT OUT ITS CONTENTS\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//TRANS DD DSN=SYS1.FONTLIB(T1D0BASE),DISP=SHR  INPUT\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE TRANSLATE TABLES */;\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nINFILE TRANS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ RECORD ID */;\nIF ID ='D3A887'X OR ID= 'D3A987'X THEN RETURN; /* START AND END */;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 TBLID $CHAR8.\n       @10 COMMT $VARYING101. LEN;  /* PICK UP COMMENT /*;\n PUT _PAGE_ ' TRANSLATE TABLE: ' TBLID / / COMMT / ;\n RETURN;\nEND;\nIF ID='D3A687'X THEN DO /* CODE PAGE DESCRIPTOR */;\n INPUT @ 10 CPD $CHAR32.\n       @46 CODES PIB2.;\n PUT 'DESCRIPTOR: ' CPD ' CODEPOINTS: ' CODES / ;\nEND;\nIF ID='D3A787'X THEN DO /* CODE PAGE CONTROL */;\n INPUT @10 DEFGRAPH $CHAR8.\n           FLG1 $CHAR1.\n       @22 FLG2 $CHAR1.;\n IF FLG1 ='0... ....'B THEN XVALID='YES';\n                       ELSE XVALID=' NO';\n IF FLG1 ='.0.. ....'B THEN XPRINT='YES';\n                       ELSE XPRINT=' NO';\n IF FLG1 ='..0. ....'B THEN XINCR='YES';\n                       ELSE XINCR=' NO';\n IF FLG2 ='.... 0...'B THEN XVB='VARIABLE SPACING NOT ENABLED';\n                       ELSE XVB='VARIABLE SPACING ENABLED    ';\n PUT 'DEFAULT CHARACTER:' DEFGRAPH 'VALID='    XVALID 'INCREMENT='\n        XINCR 'PRINT='    XPRINT  +1 XVB /;\n PUT @001 'CHARACTER CODE VALID INCR PRINT'  /* HEADING LINE */\n     @034 'CHARACTER CODE VALID INCR PRINT'\n     @067 'CHARACTER CODE VALID INCR PRINT'\n     @100 'CHARACTER CODE VALID INCR PRINT';\nEND;\nIF ID='D38C87'X THEN DO /* CODE PAGE INDEX */;\n X=0;\n DO I=0 TO (CODES-1);\n  PT=10+(I*10);\n  INPUT @PT        CHARID $CHAR8.  /* CHARACTER NAME */\n                   CFLAG $CHAR1.\n                   CODEPNT $CHAR1. @; /* HEX VALUE */\n  IF CFLAG='0... ....'B THEN XVAL='YES';\n                        ELSE XVAL=' NO';\n  IF CFLAG='.0.. ....'B THEN XINCR='YES';\n                        ELSE XINCR=' NO';\n  IF CFLAG='..0. ....'B THEN XPRNT='YES';\n                        ELSE XPRNT=' NO';\n  PT2=X*33+1;\n  PUT @PT2    CHARID +3 CODEPNT $HEX2. +2 XVAL +1 XINCR +2 XPRNT @;\n  IF X=3 THEN DO; PUT; X=0; END; ELSE X=X+1;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN5": {"ttr": 3594, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$C   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* PRINT INFO FROM THE DESCRIPTOR RECORDS  A CHARACTER SET, BUT\n//* DO NOT PRINT THE RASTER PATTERN\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR   INPUT\n//* MULTIPLE CHARACTER SET MEMBERS CAN BE CONCATENATED HERE IF YOU\n//* WANT TO REPORT ON MORE THAT ONE AT ONCE\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS, BUT NO RASTER PATTERN */;\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ RECORD ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN; /*START AND END REC*/;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN; /* READ COMMENT */;\n PUT _PAGE_ ' CHARACTER SET NAME: ' SETNAME / / COMMT / ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT 'WEIGHT:' XWEIGHT '  WIDTH:' XWIDTH '  POINTSIZE:' POINTS\n     '  PRINT DIRECTION:' XDIR '  CHARACTER ROTATION:' XROT /\n     '  ITALIC:' ITALIC '  UNDERSCORE:' UNDERS '  OVERSTRIKE:' OVERS;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT 'LOWERCASE HEIGTH:' LCASEH '  UPPER CASE HEIGTH:' UCASEH\n     '  MAXIMUM ASCENDER:' MASCEND '  MAXIMUM DESCENDER:' MDESCEND;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n IF CID ='00'X THEN PUT'SINGLE BYTE FONT';\n ELSE PUT 'NOT A SINGLE BYTE FONT, THIS PROGRAM CAN NOT HANDLE THIS';\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT 'KERNING:' KERNING '  BOX SIZE:' BOXSIZE\n   '  MAXIMUM BOX SIZE WIDTH:'\n   MAXBOXW '  HEIGTH:' MAXBOXH / 'PATTERN DATA COUNT:' PATTRNC\n   '  UNIFORM INLINE OFFSET:' INLNOFF;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH CHARACTER HAS OWN INCREMENT     ';\n                     ELSE XVAR='UNIFORM CHAR INCREMENT APPLIES TO ALL';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT 'TEXT ORIENTATION:' XTEXT '  UNIFORM BASELINE OFFSET:' UBASEOFF\n  '  MAXIMUM CHARACTER INCREMENT:' MAXCHARI\n  '  VARIABLE SPACE INCREMENT:'\n  VARINCR / 'MAXIMUM BASELINE EXTENT:' MAXBASEE +1 XVAR '  EM SPACE:'\n  EMSPACE / 'FIGURE SPACE:' FIGSPACE '  DEFAULT BASELINE INCREMENT:'\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @60 'CHARACTERS:'CHARS;\n PUT / 'CHAR-ID INCR  W    H   A   B   C'\n  @ 34 'CHAR-ID INCR  W    H   A   B   C'\n  @ 67 'CHAR-ID INCR  W    H   A   B   C'\n @ 100 'CHAR-ID INCR  W    H   A   B   C';\n PT3=0;\n ARRAY CADDS(X) ADDD1-ADDD256;\n RETAIN ADDD1-ADDD256; /* ARRAYS NOT REALLY NEEDED FOR THIS PROGRAM*/;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  X=I+1; CADDS=CADD*8;\n  PT2=PT3*33+1;\n  PUT @PT2    CHARID    CINCR 3. +1  CWIDTH 3. +1 CHEIGTH 3.\n    +1  ASPACE 3. +1 BSPACE 3. +1 CSPACE 3. @;\n  IF PT3=3 THEN DO; PUT; PT3=0; END; ELSE PT3=PT3+1;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN6": {"ttr": 3598, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$U2 JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//A EXEC PGM=AGCGENER\n//SYSPRINT DD SYSOUT=W\n//SYSUT2 DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(LRECL=8205,RECFM=VBM,BLKSIZE=8209),\n// SPACE=(CYL,(5,5))\n//SYSUT1 DD DSN=SYS1.FONTLIB(C1D0GB10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GC15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GP12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT18),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT20),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT24),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0RT10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SI10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SO12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0DUMP),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0KATA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0TU10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00AOA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00AON),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00BOA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00BON),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00GSC),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00GUC),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00OAB),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00T11),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0AE10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0AE20),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0BITR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0BRTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CE10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CH10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CI10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CO10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0DOTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EBTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EITR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0ELTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EOTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0ESTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0LB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0LR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0OB10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0OR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0SR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S192),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S193),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S198),DISP=SHR\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS */;\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN;\n PUT _PAGE_ ' CHARACTER SET NAME: ' SETNAME / / COMMT / ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT 'WEIGHT:' XWEIGHT '  WIDTH:' XWIDTH '  POINTSIZE:' POINTS\n     '  PRINT DIRECTION:' XDIR '  CHARACTER ROTATION:' XROT /\n     '  ITALIC:' ITALIC '  UNDERSCORE:' UNDERS '  OVERSTRIKE:' OVERS;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT 'LOWERCASE HEIGTH:' LCASEH '  UPPER CASE HEIGTH:' UCASEH\n     '  MAXIMUM ASCENDER:' MASCEND '  MAXIMUM DESCENDER:' MDESCEND;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n IF CID ='00'X THEN PUT'SINGLE BYTE FONT';\n ELSE PUT 'NOT A SINGLE BYTE FONT, THIS PROGRAM CAN NOT HANDLE THIS';\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT 'KERNING:' KERNING '  BOX SIZE:' BOXSIZE\n   '  MAXIMUM BOX SIZE WIDTH:'\n   MAXBOXW '  HEIGTH:' MAXBOXH / 'PATTERN DATA COUNT:' PATTRNC\n   '  UNIFORM INLINE OFFSET:' INLNOFF;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH CHARACTER HAS OWN INCREMENT     ';\n                     ELSE XVAR='UNIFORM CHAR INCREMENT APPLIES TO ALL';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT 'TEXT ORIENTATION:' XTEXT '  UNIFORM BASELINE OFFSET:' UBASEOFF\n  '  MAXIMUM CHARACTER INCREMENT:' MAXCHARI\n  '  VARIABLE SPACE INCREMENT:'\n  VARINCR / 'MAXIMUM BASELINE EXTENT:' MAXBASEE +1 XVAR '  EM SPACE:'\n  EMSPACE / 'FIGURE SPACE:' FIGSPACE '  DEFAULT BASELINE INCREMENT:'\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @60 'CHARACTERS:'CHARS;\n PUT / 'CHAR-ID INCR  W    H   A   B   C'\n  @ 34 'CHAR-ID INCR  W    H   A   B   C'\n  @ 67 'CHAR-ID INCR  W    H   A   B   C'\n @ 100 'CHAR-ID INCR  W    H   A   B   C';\n PT3=0;\n ARRAY CADDS(X) ADDD1-ADDD256;\n RETAIN ADDD1-ADDD256;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  X=I+1; CADDS=CADD*8;\n  PT2=PT3*33+1;\n  PUT @PT2    CHARID    CINCR 3. +1  CWIDTH 3. +1 CHEIGTH 3.\n    +1  ASPACE 3. +1 BSPACE 3. +1 CSPACE 3. @;\n  IF PT3=3 THEN DO; PUT; PT3=0; END; ELSE PT3=PT3+1;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN7": {"ttr": 3845, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$C   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=D\n/*JOBPARM ROOM=3426\n//* THIS REPORTS A SINGLE LINE OF INFO ABOUT A CHARACTER SET, MULTIPLE\n//* MEMBERS SHOULD BE CONCATENATED ON THE INPUT TO MAKE A USEFUL REPORT\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS */;\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nIF _N_ =1 THEN DO;\nPUT 'PNT=POINTS, ITA=ITALIC, UNS=UNDERSCORE, OVS=OVERSTRIKE, '\n    'LCH=LOWER CASE HEIGHT, UCH=UPPERCASE HEIGHT, MXA=MAX ASCENDER';\nPUT 'MXD=MAX DESCENDER, UIO=UNIFORM INLINE OFFSET, UBO=UNIFORM BASE'\n    ', MCI=MACH CHAR INCR, VSI=VARIABLE SPACE INCREMENT, MXB=MAX BASE';\nPUT 'EM=EM SPACE, FS=FIGURE SPACE, DFB=DEFAULT BASE, CHAR=# OF CHARACT'\n    'ERS, INCR=UNIFORM SPACE, PATTSP=BYTES IN RASTER, KRN=KERNING' /;\nPUT '    NAME   WEIGHT    WIDTH PNT ITA UNS OVS  LCH UCH MXA MXD'\n    ' UIO UBO MCI VSI MBS  EM  FS DFB CHAR     INCR PATTSP KRN';\nEND;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN; /*START AND END */;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN; /*COMMENT */;\n PUT SETNAME @;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT @10       XWEIGHT       @19  XWIDTH    @27         POINTS 4.1\n     @33         ITALIC @37             UNDERS @41        OVERS @;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT @45                 LCASEH  3.    @49             UCASEH  3.\n            @53            MASCEND    3. @57     MDESCEND 3. @;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT @114       KERNING\n                                 @107                  PATTRNC 6.\n     @61                      INLNOFF 3. @;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH   ';\n                     ELSE XVAR='UNIFORM';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT                           @65                      UBASEOFF 3.\n     @69                           MAXCHARI 3.\n  @73\n  VARINCR 3.  @77                 MAXBASEE 3. @98 XVAR @81\n  EMSPACE 3. @85            FIGSPACE 3.        @89\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @93              CHARS 4.  ;\n PT3=0;\n ARRAY CADDS(X) ADDD1-ADDD256;\n RETAIN ADDD1-ADDD256; /* ARRAYS NOT NEEDED IN THIS PROGRAM */;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  X=I+1; CADDS=CADD*8;\n  PT2=PT3*33+1;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN8": {"ttr": 3849, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$U2 JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//A EXEC PGM=AGCGENER\n//SYSPRINT DD SYSOUT=W\n//SYSUT2 DD DSN=&&TEMP,DISP=(,PASS,DELETE),UNIT=DISK,\n// DCB=(LRECL=8205,RECFM=VBM,BLKSIZE=8209),\n// SPACE=(CYL,(5,5))\n//SYSUT1 DD DSN=SYS1.FONTLIB(C1D0GB10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GC15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GP12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT18),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT20),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0GT24),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0RT10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SI10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0SO12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1D0ST15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0DUMP),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0FM15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0GU15),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0KATA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L0TU10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00AOA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00AON),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00BOA),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00BON),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00GSC),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00GUC),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00OAB),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1L00T11),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0AE10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0AE20),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0BITR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0BRTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CE10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CE12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CH10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CI10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CO10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0CR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0DOTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EBTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EITR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0ELTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0EOTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0ESTR),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0LB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0LR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0OB10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0OR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PB12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PI12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PR10),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0PR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0SR12),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S192),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S193),DISP=SHR\n// DD DSN=SYS1.FONTLIB(C1S0S198),DISP=SHR\n//B EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=&&TEMP,DISP=(OLD,DELETE,DELETE)\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS */;\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nIF _N_ =1 THEN DO;\nPUT 'PNT=POINTS, ITA=ITALIC, UNS=UNDERSCORE, OVS=OVERSTRIKE, '\n    'LCH=LOWER CASE HEIGHT, UCH=UPPERCASE HEIGHT, MXA=MAX ASCENDER';\nPUT 'MXD=MAX DESCENDER, UIO=UNIFORM INLINE OFFSET, UBO=UNIFORM BASE'\n    ', MCI=MACH CHAR INCR, VSI=VARIABLE SPACE INCREMENT, MXB=MAX BASE';\nPUT 'EM=EM SPACE, FS=FIGURE SPACE, DFB=DEFAULT BASE, CHAR=# OF CHARACT'\n    'ERS, INCR=UNIFORM SPACE, PATTSP=BYTES IN RASTER, KRN=KERNING' /;\nPUT '    NAME   WEIGHT    WIDTH PNT ITA UNS OVS  LCH UCH MXA MXD'\n    ' UIO UBO MCI VSI MBS  EM  FS DFB CHAR     INCR PATTSP KRN';\nEND;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN;\n PUT SETNAME @;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT @10       XWEIGHT       @19  XWIDTH    @27         POINTS 4.1\n     @33         ITALIC @37             UNDERS @41        OVERS @;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT @45                 LCASEH  3.    @49             UCASEH  3.\n            @53            MASCEND    3. @57     MDESCEND 3. @;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT @114       KERNING\n                                 @107                  PATTRNC 6.\n     @61                      INLNOFF 3. @;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH   ';\n                     ELSE XVAR='UNIFORM';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT                           @65                      UBASEOFF 3.\n     @69                           MAXCHARI 3.\n  @73\n  VARINCR 3.  @77                 MAXBASEE 3. @98 XVAR @81\n  EMSPACE 3. @85            FIGSPACE 3.        @89\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @93              CHARS 4.  ;\n PT3=0;\n ARRAY CADDS(X) ADDD1-ADDD256;\n RETAIN ADDD1-ADDD256;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  X=I+1; CADDS=CADD*8;\n  PT2=PT3*33+1;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSFSCAN9": {"ttr": 3854, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$9   JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//* MAP OUT ALL INFO ON A CHARACTER SET INCLUDING THE RASTER\n//* PATTERN\n//A EXEC SAS@\n//OUT DD SYSOUT=W\n//CHARS DD DSN=AGPP.FONTLIB(C1BAR050),DISP=SHR\nOPTIONS GEN=0;\n /* PRINT OUT INFO ABOUT THE CHARACTER SETS AND THE RASTER PATTERN */;\nPROC FORMAT;\n VALUE $BIN (MAX=4)\n  '0' ='....'\n  '1' ='...*'\n  '2' ='..*.'\n  '3' ='..**'\n  '4' ='.*..'\n  '5' ='.*.*'\n  '6' ='.**.'\n  '7' ='.***'\n  '8' ='*...'\n  '9' ='*..*'\n  'A' ='*.*.'\n  'B' ='*.**'\n  'C' ='**..'\n  'D' ='**.*'\n  'E' ='***.'\n  'F' ='****';\nDATA _NULL_;\nRETAIN CODES 0;\nFILE OUT PRINT;\nINFILE CHARS STOPOVER;\nINPUT @4 ID $CHAR3. @ /* READ ID */;\nIF ID ='D3A889'X OR ID= 'D3A989'X THEN RETURN; /*START AND END */;\nIF ID='D3EEEE'X THEN DO /* NOOP RECORD */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN-8;\n INPUT @36 SETNAME $CHAR8.\n       @10 COMMT $VARYING132. LEN; /* COMMENT */;\n PUT _PAGE_ ' CHARACTER SET NAME: ' SETNAME / / COMMT / ;\n RETURN;\nEND;\nIF ID='D3A689'X THEN DO /* FONT DESCRIPTOR */;\n INPUT @ 10 TYPEFACE $CHAR32.\n            WEIGHT $CHAR1.\n            WIDTH $CHAR1.\n         +2 POINTS PIB2.1\n        +10 DIRECTN $CHAR2.\n        +4  ROTATN  $CHAR2.\n        +8 FLG $CHAR1.\n        +4 UWIDTH IB2.\n           UPOS   IB2.;\n IF DIRECTN='0000'X THEN XDIR='ACROSS';\n ELSE IF DIRECTN='2D00'X THEN XDIR='DOWN  ';\n                         ELSE XDIR='UP    ';\n IF      ROTATN='0000'X THEN XROT='  0';\n ELSE IF ROTATN='2D00'X THEN XROT=' 90';\n ELSE IF ROTATN='5A00'X THEN XROT='180';\n ELSE                        XROT='270';\n IF FLG='0... ....'B THEN ITALIC=' NO';\n                     ELSE ITALIC='YES';\n IF FLG='.0.. ....'B THEN UNDERS=' NO';\n                     ELSE UNDERS='YES';\n IF FLG='.... 0...'B THEN OVERS=' NO';\n                     ELSE OVERS='YES';\n IF      WEIGHT='01'X THEN XWEIGHT='ULTRA-LIGHT';\n ELSE IF WEIGHT='02'X THEN XWEIGHT='EXTRA-LIGHT';\n ELSE IF WEIGHT='03'X THEN XWEIGHT='LIGHT      ';\n ELSE IF WEIGHT='04'X THEN XWEIGHT='SEMI-LIGHT ';\n ELSE IF WEIGHT='05'X THEN XWEIGHT='MEDIUM     ';\n ELSE IF WEIGHT='06'X THEN XWEIGHT='SEMI-BOLD  ';\n ELSE IF WEIGHT='07'X THEN XWEIGHT='BOLD       ';\n ELSE IF WEIGHT='08'X THEN XWEIGHT='EXTRA-BOLD ';\n ELSE IF WEIGHT='09'X THEN XWEIGHT='ULTRA-BOLD ';\n IF      WIDTH= '01'X THEN XWIDTH='ULTRA-CONDENSED';\n ELSE IF WIDTH= '02'X THEN XWIDTH='EXTRA-CONDENSED';\n ELSE IF WIDTH= '03'X THEN XWIDTH='CONDENSED      ';\n ELSE IF WIDTH= '04'X THEN XWIDTH='SEMI-CONDENSED ';\n ELSE IF WIDTH= '05'X THEN XWIDTH='MEDIUM         ';\n ELSE IF WIDTH= '06'X THEN XWIDTH='SEMI-EXPANDED  ';\n ELSE IF WIDTH= '07'X THEN XWIDTH='EXPANDED       ';\n ELSE IF WIDTH= '08'X THEN XWIDTH='EXTRA-EXPANDED ';\n ELSE IF WIDTH= '09'X THEN XWIDTH='ULTRA-EXPANDED ';\n PUT 'WEIGHT:' XWEIGHT '  WIDTH:' XWIDTH '  POINTSIZE:' POINTS\n     '  PRINT DIRECTION:' XDIR '  CHARACTER ROTATION:' XROT /\n     '  ITALIC:' ITALIC '  UNDERSCORE:' UNDERS '  OVERSTRIKE:' OVERS;\nEND;\nIF ID='D3AC89'X THEN DO /* FONT CHARACTER POSITION */;\n INPUT @12 LCASEH IB2.\n           UCASEH IB2.\n           MASCEND   IB2.\n           MDESCEND  IB2.;\n PUT 'LOWERCASE HEIGTH:' LCASEH '  UPPER CASE HEIGTH:' UCASEH\n     '  MAXIMUM ASCENDER:' MASCEND '  MAXIMUM DESCENDER:' MDESCEND;\nEND;\nIF ID='D3A789'X THEN DO /* FONT CONTROL */;\n INPUT @12 CID $CHAR1.\n           FLG $CHAR1.\n        +6 MAXBOXW IB2.\n           MAXBOXH IB2.\n        +3 PATTRNC IB3.\n           INLNOFF IB2.;\n RETAIN PATTRNC;\n IF CID ='00'X THEN PUT'SINGLE BYTE FONT';\n ELSE PUT 'NOT A SINGLE BYTE FONT, THIS PROGRAM CAN NOT HANDLE THIS';\n IF FLG='.... .0..'B THEN KERNING='NOT ALLOWED';\n                     ELSE KERNING='ALLOWED    ';\n IF FLG='.... ..0.'B THEN BOXSIZE='VARIABLE';\n                     ELSE BOXSIZE='UNIFORM ';\n PUT 'KERNING:' KERNING '  BOX SIZE:' BOXSIZE\n   '  MAXIMUM BOX SIZE WIDTH:'\n   MAXBOXW '  HEIGTH:' MAXBOXH / 'PATTERN DATA COUNT:' PATTRNC\n   '  UNIFORM INLINE OFFSET:' INLNOFF;\nEND;\nIF ID='D3AE89'X THEN DO /* FONT ORIENTATON */;\n INPUT @10 TEXTOR $CHAR4.\n           UBASEOFF IB2.\n           MAXCHARI IB2.\n           VARINCR  IB2.\n           MAXBASEE IB2.\n           FLG      $CHAR1.\n       +1  EMSPACE  IB2.\n       +2  FIGSPACE IB2.\n       +2  BASEINCR IB2.;\n IF FLG='.... ...0'B THEN XVAR='EACH CHARACTER HAS OWN INCREMENT     ';\n                     ELSE XVAR='UNIFORM CHAR INCREMENT APPLIES TO ALL';\n IF      TEXTOR='00002D00'X THEN XTEXT='  0, 90';\n ELSE IF TEXTOR='2D005A00'X THEN XTEXT=' 90,180';\n ELSE                            XTEXT='270,  0';\n PUT 'TEXT ORIENTATION:' XTEXT '  UNIFORM BASELINE OFFSET:' UBASEOFF\n  '  MAXIMUM CHARACTER INCREMENT:' MAXCHARI\n  '  VARIABLE SPACE INCREMENT:'\n  VARINCR / 'MAXIMUM BASELINE EXTENT:' MAXBASEE +1 XVAR '  EM SPACE:'\n  EMSPACE / 'FIGURE SPACE:' FIGSPACE '  DEFAULT BASELINE INCREMENT:'\n     BASEINCR @;\nEND;\nIF ID='D38C89'X THEN DO /* FONT INDEX */;\n INPUT @2 LEN IB2. @;\n CHARS= ((LEN-8)/24)   /* TAKE OFF 8 BYTE HEADER, EACH ENTRY 24 BYTES\n                        */;\n PUT @60 'CHARACTERS:'CHARS;\n PUT / 'CHAR-ID INCR  W    H   A   B   C'\n  @ 34 'CHAR-ID INCR  W    H   A   B   C'\n  @ 67 'CHAR-ID INCR  W    H   A   B   C'\n @ 100 'CHAR-ID INCR  W    H   A   B   C';\n PT3=0;\n ARRAY VADDS(X) AADD1-AADD256;  /* ADDRESS */;\n ARRAY    VA(X)   AA1-AA256; /* A SPACE */;\n ARRAY    VB(X)   AB1-AB256; /* B SPACE */;\n ARRAY    VC(X)   AC1-AC256; /* C SPACE */;\n ARRAY    VH(X)   AH1-AH256; /* HEIGHT  */;\n ARRAY    VW(X)   AW1-AW256; /* WIDTH   */;\n ARRAY VINCR(X) AINCR1-AINCR256; /* INCREMENT */;\n ARRAY VNAME(X) $ 8 ANAME1-ANAME256; /* CHARACTER NAME */;\n RETAIN AADD1-AADD256;\n RETAIN   AA1-AA256;\n RETAIN   AB1-AB256;\n RETAIN   AC1-AC256;\n RETAIN   AH1-AH256;\n RETAIN   AW1-AW256;\n RETAIN AINCR1-AINCR256;\n RETAIN ANAME1-ANAME256;\n RETAIN CHARS;\n DO I=0 TO (CHARS-1);\n  PT=10+(I*24);\n  INPUT @PT        CHARID $CHAR8.\n                   CINCR IB2.\n                   CWIDTH IB2.\n                   CHEIGTH IB2.\n                   CADD   IB4.\n                   ASPACE IB2.\n                   BSPACE IB2.\n                   CSPACE IB2. @;\n  X=I+1; VADDS=CADD*8; /* ADDRESS IS MULTIPLE OF 8 IN THE RECORD */;\n  VA=ASPACE;VB=BSPACE;VC=CSPACE;VINCR=CINCR;VW=CWIDTH;VH=CHEIGTH;\n  VNAME=CHARID;\n  PT2=PT3*33+1;\n  PUT @PT2    CHARID    CINCR 3. +1  CWIDTH 3. +1 CHEIGTH 3.\n    +1  ASPACE 3. +1 BSPACE 3. +1 CSPACE 3. @;\n  IF PT3=3 THEN DO; PUT; PT3=0; END; ELSE PT3=PT3+1;\n END;\n RETAIN CHARP;\n CHARP=0; /* CHARACTER COUNTER OR POINTER */;\nEND;\nIF ID='D3EE89'X THEN DO /* FONT PATTERN RECORDS */;\n INPUT @2 LEN PIB2. @;\n LEN=LEN+1;TBYTES=0;\n PT=10;/* GET NEXT CHARACTER INFO, START LOOP */;\n DO UNTIL(PT>10000) /* THIS IS A NEVER ENDING LOOP */;\n  CHARP=CHARP+1;IF CHARP>CHARS THEN RETURN;X=CHARP;\n  WBYTES=(VW+1)/8;\n  TBYTES=(WBYTES*(VH+1));\n  RTBYTES=8*CEIL(TBYTES/8) /* ROUND UP TO 8 BYTE BOUNDARY */;\n  TPT=2048*(CEIL((PT-10)/2048)); /* 2K PAGES */;\n  IF (PT-10+RTBYTES)>TPT THEN PT=TPT+10;\n  /* HAS TO FIT IN 2048 BYTE BLOCKS */;\n  PUT 'ADD=' VADDS ', TOTAL BYTES=' TBYTES ', ROUNDED TOAL BYTES='\n    RTBYTES ' ,POINTER=' PT ', 2048 BOUNDARY POINTER=' TPT\n    ', CHARACTER =' CHARP;\n     X=X+1;\n     IF X>CHARS THEN AD=PATTRNC;ELSE AD=VADDS;\n     X=X-1;\n     DIFF=AD-VADDS; IF DIFF NE RTBYTES THEN PUT '******<====';\n     PUT DIFF;IF CHARP NE CHARS THEN RTBYTES=DIFF;\n /* PREV 2 LINES PROGRAM DIAGNOSTIC DATA */;\n  IF (PT-10+RTBYTES)>LEN THEN DO;\n   CHARP=CHARP-1;\n   RETURN;\n  END;\n    PUT _PAGE_ VNAME '  W=' VW  '  H=' VH '  A=' VA\n        '  B=' VB  '  C=' VC   / /; SEQ=0;\n  DO K=0 TO VH BY 1; /* START LOOP OVER HEIGHT */;\n   XPATTRN='                '; /* INITIALIZE*/;\n   DO L=0 TO (WBYTES-1) BY 1;  /* WIDTH OF RASTER IN BYTES */;\n    INPUT @PT XC $CHAR1. @;\n    SUBSTR(XPATTRN,L+1,1)=XC;\n    PT=PT+1;\n   END;\n   /* FORMAT PRINT LINE */;\n   DO;\n    LENGTH XHEX $ 32;\n    LENGTH XPRTLN $ 128;\n    XHEX=PUT(XPATTRN,$HEX32.); /* TEMP FORMAT IN HEX */;\n    XPRTLN=REPEAT(' ',128);    /* INITIALIZE RESULT */;\n    DO J=1 TO ((VW+1)/4);      /* LOOP ACROSS THE PRINT LINE */;\n     XC=SUBSTR(XHEX,J,1);    /* CONVERT HEX TO DOT-ASTERICK PATTERN*/;\n     SUBSTR(XPRTLN,((J-1)*4+1),4)=PUT(XC,$BIN.);\n    END;\n    PUT XPRTLN;  /* PRINT ONE LINE OF PATTERN */;\n   END;\n   SEQ=SEQ+1;\n  END;\n  PT=PT+RTBYTES-TBYTES;\n END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "P12UP": {"ttr": 4101, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  /* CREATED H. ZBIEGIEN  9/88   */\n  /* CHANGE P1GL01 ALSO WHEN CHANGING THIS */\n  /* 2UP PRINTING  66 LINES PER LOGICAL PAGE, FOLLOWS THE 8B2 LOOP */\n  /* 2UP PRINTING, ROTATED ON 8.5 BY 14 INCH PAPER */\n PAGEDEF 2UP\n    WIDTH 7.4 IN HEIGHT 13.473 IN\n    LINEONE .208 IN .1 IN REPLACE YES; /* START ON LINE 4 */\n\n  FONT GT18;\n  SETUNITS LINESP 10 LPI;\n\n  PAGEFORMAT P22UP    DIRECTION DOWN;\n   /* LOGIC PAGE 1 */\n     PRINTLINE REPEAT  5 CHANNEL  1 POSITION MARGIN TOP FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  2 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  3 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  9 CHANNEL  4 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  5 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  6 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  7 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  8 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL 10 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT 10 CHANNEL 11 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  6 CHANNEL 12 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  1 CHANNEL  9 POSITION MARGIN NEXT FONT GT18;\n\n   /* LOGIC PAGE 2 */\n     PRINTLINE REPEAT  5 CHANNEL  1 POSITION MARGIN 6.82 FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  2 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  3 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  9 CHANNEL  4 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  5 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  6 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  7 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL  8 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  5 CHANNEL 10 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT 10 CHANNEL 11 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  6 CHANNEL 12 POSITION MARGIN NEXT FONT GT18;\n     PRINTLINE REPEAT  1 CHANNEL  9 POSITION MARGIN NEXT FONT GT18;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "P18B2": {"ttr": 4103, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /* CREATED H. ZBIEGIEN  8/88      */\n /* USE THE FOLLOWING AS THE DEFAULT PAGE DEF TO SUPPORT STANDARD */\n /* ONE PART OUTPUT OF 1485R1 PAPER ,CHANGED 8-19 FOR 64 LINES */\n PAGEDEF 8B2\n    WIDTH 13.3 IN HEIGHT 8.332 IN\n    /* 8.5 INCHES - 1/6 MARGIN IS 8.322 */\n    LINEONE 0 IN .125 IN REPLACE YES; /* START ON LINE 4 */\n\n    FONT GT10;\n    SETUNITS LINESP 8 LPI;\n\n    PAGEFORMAT P28B2 DIRECTION ACROSS;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 1 POSITION MARGIN TOP;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 2 POSITION MARGIN .75 ;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 3 POSITION MARGIN 1.375;\n       PRINTLINE REPEAT  9 FONT GT10 CHANNEL 4 POSITION MARGIN 2.0;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 5 POSITION MARGIN 3.125;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 6 POSITION MARGIN 3.75;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 7 POSITION MARGIN 4.375;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 8 POSITION MARGIN 5.0;\n       PRINTLINE REPEAT  5 FONT GT10 CHANNEL 10 POSITION MARGIN 5.625;\n       PRINTLINE REPEAT 10 FONT GT10 CHANNEL 11 POSITION MARGIN 6.25;\n       PRINTLINE REPEAT  4 FONT GT10 CHANNEL 12 POSITION MARGIN 7.5;\n       PRINTLINE           FONT GT10 CHANNEL 9 POSITION MARGIN 8.00;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RFIXMOVE": {"ttr": 4105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RFIXMOVE START                                                          00001\n* UPDATED DEC 1,82 TO MAKE REENTRANT IN CICS SENSE                      00002\n* UPDATED 7/89 BY H. ZBIEGIEN TO MAKE 31 BIT COMPATIBLE                 00003**5\nRFIXMOVE  AMODE ANY                                                     00004**5\nRFIXMOVE  RMODE ANY                                                     00005**5\n         USING *,15                     SET BASE                        00006\n         STM   2,5,28(13)               SAVE REGISTERS                  00007\n         L     2,0(1)                   GET ADDRESS OF FROM             00008\n         L     4,4(1)                   GET ADDRESS OF TO               00009\n         L     3,8(1)                   GET ADDRESS OF LENGTH           00010\n         LH    5,0(3)                   LOAD LENGTH                     00011\n         LR    3,5                      INTO BOTH REGISTERS             00012\n         MVCL  4,2                      MOVE                            00013\n         LM    2,5,28(13)               RESTORE REGISTERS               00014\n         SR    15,15                    ZERO RETURN CODE                00015\n         BR    14                       RETURN                          00016\n         DC    C'RFIXMOVE&SYSDATE&SYSTIME'                              00017**5\n*                                                                       00018\n*    COBOL CALL:  CALL 'RFIXMOVE' USING  FROM-REC, TO-REC, LEN.         00019\n*                                                                       00020\n*       LEN IS 2 BYTES BINARY SYNC.                                     00021\n*                                                                       00022\n         END   RFIXMOVE                                                 00023\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RPRINT02": {"ttr": 4107, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RPRINT02 START                                                          00001\n         USING *,15                                                     00002\n         ST    1,SAVE1            SAVE  REG1                            00003\n         ST    2,SAVE2            SAVE  REG2                            00004\n         L     2,4(1)             ADDRESS OF WS-DCB                     00005\n         L     1,0(1)             ADDRESS OF DCB                        00006\n         MVC   0(1,2),17(1)       DEV TYPE                              00007\n         MVC   1(1,2),26(1)       DSOR                                  00008\n         MVC   2(1,2),36(1)       RECFM                                 00009\n         MVC   4(2,2),62(1)       BLKSIZE                               00010\n         MVC   6(2,2),82(1)       LRECL                                 00011\n         L     1,SAVE1            RESTORE REG1                          00012\n         L     2,SAVE2            RESTORE REG2                          00013\n         SR    15,15              RETURN CODE OF ZERO                   00014\n         BR   14                  RETURN                                00015\nSAVE1    DC   F'0'                                                      00016\nSAVE2    DC   F'0'                                                      00017\n*                                                                       00018\n*     GET  INFORMATION FROM THE DCB AND PASS BACK                       00019\n*                                                                       00020\n*     COBOL CALL:    CALL 'RPRINT02' USING FD-NAME, WS-DCB-PARMS.       00021\n*                                                                       00022\n*      01  WS-DCB-PARMS.                                                00023\n*      05  WS-DEVICE-TYPE    PIC X.                                     00024\n*      05  WS-DSORG          PIC X.                                     00025\n*      05  WS-RECFM          PIC X.                                     00026\n*      05     FILLER         PIC X.                                     00027\n*      05  WS-BLKSIZE        PIC S9(4) COMP SYNC.                       00028\n*      05  WS-LRECL          PIC S9(4) COMP SYNC.                       00029\n*                                                                       00030\n         END  RPRINT02                                                  00031\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RPRINT07": {"ttr": 4109, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RPRINT07 START                                                          00001\n         USING *,15                                                     00002\n         ST    1,SAVE1       SAVE REG1                                  00003\n         L     1,0(1)        ADDRESS OF DCB                             00004\n         MVI   82(1),X'00'   ZERO                                       00005\n         MVI   83(1),X'00'     LRECL                                    00006\n         L     1,SAVE1       RESTORE REG1                               00007\n         SR    15,15         RETURN CODE OF ZERO                        00008\n         BR    14            RETURN                                     00009\nSAVE1    DC    F'0'                                                     00010\n*                                                                       00011\n*      ZERO REC LEN IN THE DCB                                          00012\n*                                                                       00013\n*      COBOL CALL:   CALL 'RPRINT07' USING FD-NAME.                     00014\n*                                                                       00015\n         END   RPRINT07                                                 00016\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RPRINT09": {"ttr": 4111, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RPRINT09 START                                                          00001\n         USING *,15                                                     00002\n         ST    1,SAVER                  SAVE REGISTER                   00003\n         L     1,ADD                    GET ADDRESS OF ENTRY POINT      00004\n         CLI   FLAG,C'F'                SEE IF FIRST ENTRY              00005\n         BNE   NOTFIRST                                                 00006\n         MVC   SAVE(2),0(1)             SAVE 2 BYTES                    00007\n         MVC   0(2,1),INST              MOVE BR 14                      00008\n         MVI   FLAG,X'40'               CLEAR FLAG                      00009\n         B     RETURN                                                   00010\nNOTFIRST MVI   FLAG,C'F'                RESET FLAG                      00011\n         MVC   0(2,1),SAVE              RETURN INST                     00012**2\nRETURN   L     1,SAVER                  RESTORE REGISTER                00013\n         SR    15,15                    ZERO RETURN CODE                00014\nINST     BR    14                       RETURN                          00015\nSAVE     DC    H'0'                                                     00016\nFLAG     DC    C'F'                                                     00017\nSAVER    DC    F'0'                                                     00018\nADD      DC    V(ILBOEXT1)                                              00019\n*                                                                       00020\n*       ALLOW  ANY RECFM TO BE ENTERED IN THE NEXT FILE TO BE OPENED    00021\n*                                                                       00022\n*       SAMPLE CALL:  CALL 'RPRINT09'                                   00023\n*                                                                       00024\n*                                                                       00025\n         END   RPRINT09                                                 00026\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBENTRY": {"ttr": 4113, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          00259\n&NAME    SUBENTRY &CSECT=YES,&BASES=(13),&RENT=NO,&RWA=,&RWALNG=0       00260\n         LCLA  &NBASE,&S,&OFFSET                                        00261\n.*             MACRO-ID. 'SUBENTRY'                                     00262\n.*             AUTHOR.   DON HIGGINS.                                   00263\n.*             DATE WRITTEN.  07/28/70.                                 00264\n.*             REMARKS.  THIS MACRO GENERATES THE CODE TO ESTABLISH A   00265\n.*                       CSECT WITH SAVE AREA AND BASE REGISTER USING   00266\n.*                       STANDARD OS LINKAGE CONVENTIONS.               00267\n.*             REV1 11/14/74 ADD REENTRANT OPTION WITH WORK AREA        00268\n.*                 1.  FOR REENTRANT LINKAGE YOU MUST SPECIFY           00269\n.*                     A.  RENT=YES                                     00270\n.*                     B.  AT LEAST ONE BASE REGISTER OTHER THAN 13     00271\n.*                         SUCH AS BASES=(R12)                          00272\n.*                 2.  OPTIONALLY YOU CAN SPECIFY A DSECT NAME AND      00273\n.*                     LENGTH FOR A WORK AREA BUILT BEHIND SAVE AREA.   00274\n.*                     FOR EXAMPLE  RWADSECT=MYWORK,RWALNG=8            00275\n.*                     NOTE THAT THIS WORK AREA LENGTH MUST ALSO BE     00276\n.*                     SPECIFIED AT SUBEXIT TIME TO CORRECTLY CALCULATE 00277\n.*                     THE FREEMAIN LENGTH.                             00278\n         AIF   ('&CSECT'(1,1) EQ 'N').NOCSECT                           00279\n&NAME    CSECT                                                          00280\n         AGO   .STM                                                     00281\n.NOCSECT ANOP                                                           00282\n&NAME    DS    0D                                                       00283\n.STM     ANOP                                                           00284\n         AIF   ('&RENT'(1,1) EQ 'N').NORENT                             00285\n.RENT    ANOP                                                           00286\n         STM   14,12,12(13)                                             00287\n         BAL   &BASES(1),16(15)                                         00288\n         USING &NAME+8,&BASES(1)                                        00289\n         DC    CL8'&NAME'                                               00290\n         LA    0,72+&RWALNG                                             00291\n         GETMAIN R,LV=(0)                                               00292\n         ST    1,8(13)                                                  00293\n         ST    13,4(1)                                                  00294\n         LM    14,1,12(13)                                              00295\n         L     13,8(13)                                                 00296\n         AIF   (&RWALNG EQ 0).GEN                                       00297\n         USING &RWA-72,13                                               00298\n         AGO   .GEN                                                     00299\n.NORENT  ANOP                                                           00300\n         STM   14,12,12(13)                                             00301\n         BAL   15,88(15)                                                00302\n         DC    9D'0'                                                    00303\n         DC    CL8'&NAME'                                               00304\n         ST    15,8(13)                                                 00305\n         ST    13,4(15)                                                 00306\n         LR    13,15                                                    00307\n         AIF   (T'&BASES(1) NE 'N').CHKR13                              00308\n         AIF   (&BASES(1) EQ 13).GENB13                                 00309\n         AGO   .GENBX                                                   00310\n.CHKR13  ANOP                                                           00311\n         AIF   ('&BASES'(2,3) EQ 'R13').GENB13                          00312\n.GENBX   ANOP                                                           00313\n         LR    &BASES(1),13                                             00314\n         USING &NAME+8,&BASES(1)                                        00315\n         AGO   .GEN                                                     00316\n.GENB13  ANOP                                                           00317\n         USING &NAME+8,13                                               00318\n.GEN     ANOP                                                           00319\n&NBASE   SETA  N'&BASES                                                 00320\n&S       SETA  1                                                        00321\n.L1      ANOP                                                           00322\n&S       SETA  &S+1                                                     00323\n         AIF   (&S GT &NBASE).EXIT                                      00324\n&OFFSET  SETA  &OFFSET+4095                                             00325\n         LA    &BASES(&S),4095(&BASES(&S-1))                            00326\n         USING &NAME+8+&OFFSET,&BASES(&S)                               00327\n         AGO   .L1                                                      00328\n.EXIT    ANOP                                                           00329\n         MEND                                                           00330\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBEXIT": {"ttr": 4116, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          00332\n&NAME    SUBEXIT &RC=0,&RENT=NO,&RWALNG=0                               00333\n.*             MACRO-ID. 'SUBEXIT'.                                     00334\n.*             AUTHOR.   DON HIGGINS.                                   00335\n.*             DATE WRITTEN.  07/28/70.                                 00336\n.*             REMARKS.  THIS MACRO GENERATES THE CODE TO RESTORE       00337\n.*                       REGISTERS AND RETURN FROM A CSECT.  A RETURN   00338\n.*                       CODE OF ZERO IS RETURNED UNLESS A DIFFERENT    00339\n.*                       CODE IS SPECIFIED USING THE KEY WORD RC=.      00340\n.*             REV1 11/14/74 ADD REENTRANT OPTION. SEE SUBENTRY.        00341\n         AIF   ('&RENT'(1,1) EQ 'N').NORENT                             00342\n.RENT    ANOP                                                           00343\n&NAME    L     13,4(13)                                                 00344\n         STM   0,1,20(13)                                               00345\n         L     1,8(13)                                                  00346\n         LA    0,72+&RWALNG                                             00347\n         FREEMAIN R,LV=(0),A=(1)                                        00348\n         LM    14,12,12(13)                                             00349\n         LA    15,&RC                                                   00350\n         BR    14                                                       00351\n         AGO   .EXIT                                                    00352\n.NORENT  ANOP                                                           00353\n&NAME    L     13,4(13)                                                 00354\n         L     14,12(13)                                                00355\n         LM    2,12,28(13)                                              00356\n         LA    15,&RC                                                   00357\n         BR    14                                                       00358\n.EXIT    ANOP                                                           00359\n         MEND                                                           00360\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "T$$DOC": {"ttr": 4118, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TRANSLATE TABLE DEFINITIONS  (CODE PAGE)\n\nA TABLE IS USED TO MAP A 1 BYTE HEX CODE TO AN 8 CHARACTER NAME.\nTHE 8 CHARACTER NAME IS THE SAME AS USED IN THE CHARACTER SET.\nA CHARACTER SET NAME STARTS WITH C1, C2, OR C4\nA FONT NAME, WHICH STARTS WITH AN X PREFIX TIES THE TRANSLATE TABLE TO\nTHE CHARACTER SET AND PROVIDES ONE NAME THAT CAN BE USED TO REFERENCE\nTHE WHOLE WORKS.\n\nT1AG0004  - THIS IS THE TRANSLATE TABLE USED FOR THE GREY BARS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAG": {"ttr": 4120, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO                                                          00372\n&NAME    TAG                                                            00373\n&NAME    DS    0H                                                       00374\n         MEND                                                           00375\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIMEHIST": {"ttr": 4353, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "00001  IDENTIFICATION DIVISION.                                         05/05/78\n00002  PROGRAM-ID. TIMEHIST.                                            TIMEHIST\n00003  ENVIRONMENT DIVISION.                                               LV005\n00004  CONFIGURATION SECTION.                                           TIMEHIST\n00005  SOURCE-COMPUTER. IBM-370.                                        TIMEHIST\n00006  OBJECT-COMPUTER. IBM-370.                                        TIMEHIST\n00007  SPECIAL-NAMES.                                                   TIMEHIST\n00008      C01 IS TOP-OF-PAGE.                                          TIMEHIST\n00009  INPUT-OUTPUT SECTION.                                            TIMEHIST\n00010  FILE-CONTROL.                                                    TIMEHIST\n00011      SELECT UCRI-CARD    ASSIGN TO UT-S-SYSIN.                    TIMEHIST\n00012      SELECT UPRO-PRINTER ASSIGN TO UT-S-PRINTER.                  TIMEHIST\n00013      SELECT UDAI-DATA    ASSIGN TO UT-S-TIMEDATA.                 TIMEHIST\n00014  DATA DIVISION.                                                   TIMEHIST\n00015  FILE SECTION.                                                    TIMEHIST\n00016  FD  UCRI-CARD                                                    TIMEHIST\n00017      BLOCK CONTAINS 0 RECORDS                                     TIMEHIST\n00018      RECORD CONTAINS 80 CHARACTERS                                TIMEHIST\n00019      LABEL RECORDS ARE OMITTED.                                   TIMEHIST\n00020  01  UCRI-REC.                                                    TIMEHIST\n00021  05  UCRI-START        PIC X(6).                                  TIMEHIST\n00022  05  UCRI-ILENX.                                                  TIMEHIST\n00023  10  UCRI-ILEN         PIC 9(4).                                  TIMEHIST\n00024  05     FILLER         PIC X(30).                                 TIMEHIST\n00025  05  UCRI-COMMENT      PIC X(40).                                 TIMEHIST\n00026  FD  UPRO-PRINTER                                                 TIMEHIST\n00027      BLOCK CONTAINS 0 RECORDS                                     TIMEHIST\n00028      RECORD CONTAINS 133 CHARACTERS                               TIMEHIST\n00029      LABEL RECORDS ARE OMITTED.                                   TIMEHIST\n00030  01  UPRO-REC.                                                    TIMEHIST\n00031  05     FILLER         PIC X.                                     TIMEHIST\n00032  05  UPRO-LINE         PIC X(132).                                TIMEHIST\n00033  FD  UDAI-DATA                                                    TIMEHIST\n00034      BLOCK CONTAINS 0 RECORDS                                     TIMEHIST\n00035      RECORD CONTAINS 4 CHARACTERS                                 TIMEHIST\n00036      LABEL RECORDS ARE STANDARD.                                  TIMEHIST\n00037  01  UDAI-REC.                                                    TIMEHIST\n00038  05  UDAI-ADDR         PIC S9(8) COMP SYNC.                       TIMEHIST\n00039  WORKING-STORAGE SECTION.                                         TIMEHIST\n00040  01     FILLER.                                                   TIMEHIST\n00041  05     FILLER         PIC X(36) VALUE                            TIMEHIST\n00042        'TIMEHIST WORKING-STORAGE STARTS HERE'.                    TIMEHIST\n00043  05  WS-CARDS-EOF-FLAG PIC X VALUE SPACES.                        TIMEHIST\n00044  88  WS-GOT-A-CARD     VALUE SPACES.                              TIMEHIST\n00045  88  WS-CARDS-AT-EOF   VALUE 'E'.                                 TIMEHIST\n00046 *                                                                 TIMEHIST\n00047  05  WS-VALID-FLAG     PIC X VALUE SPACES.                        TIMEHIST\n00048  88  WS-INVALID        VALUE 'I'.                                 TIMEHIST\n00049  88  WS-VALID          VALUE 'V'.                                 TIMEHIST\n00050 *                                                                 TIMEHIST\n00051  05  WS-START          PIC S9(8) COMP SYNC.                       TIMEHIST\n00052  05  WS-ILEN           PIC S9(4) COMP SYNC.                       TIMEHIST\n00053 *                                                                 TIMEHIST\n00054  05  WS-UN-HEX         PIC X(6).                                  TIMEHIST\n00055  05     FILLER         REDEFINES WS-UN-HEX.                       TIMEHIST\n00056  10  WS-UN-HEX-CH      OCCURS 6 TIMES                             TIMEHIST\n00057                        INDEXED BY WS-UH-IX                        TIMEHIST\n00058                        PIC X.                                     TIMEHIST\n00059  05  WS-CHAR.                                                     TIMEHIST\n00060  10  WS-CHARU          PIC 9.                                     TIMEHIST\n00061 *                                                                 TIMEHIST\n00062  05  WS-TITLE.                                                    TIMEHIST\n00063  10     FILLER         PIC X(10) VALUE SPACES.                    TIMEHIST\n00064  10     FILLER         PIC X(8) VALUE 'TIMEHIST'.                 TIMEHIST\n00065  10     FILLER         PIC X(13) VALUE '    INTERVAL='.              CL**4\n00066  10  WS-TITLE-INT      PIC ZZZ9.                                     CL**4\n00067  10     FILLER         PIC X(11) VALUE SPACES.                       CL**4\n00068  10  WS-COMMENT        PIC X(40).                                 TIMEHIST\n00069  10     FILLER         PIC X(05) VALUE 'MAX ='.                      CL**4\n00070  10  WS-TITLE-MAX      PIC ZZ,ZZZ,ZZ9.                               CL**4\n00071  10     FILLER         PIC X(10) VALUE ', TOTAL = '.                 CL**4\n00072  10  WS-TITLE-TOTAL    PIC ZZ,ZZZ,ZZ9.                               CL**4\n00073 *                                                                    CL**4\n00074  05  WS-TOTAL          PIC S9(8) COMP SYNC.                          CL**4\n00075 *                                                                 TIMEHIST\n00076  05  WS-HIGH           PIC S9(8) COMP SYNC.                       TIMEHIST\n00077  05  WS-LOW-COUNT      PIC S9(8) COMP SYNC.                       TIMEHIST\n00078  05  WS-HIGH-COUNT     PIC S9(8) COMP SYNC.                       TIMEHIST\n00079 *                                                                 TIMEHIST\n00080  05  WS-WORK-COUNT     PIC S9(8) COMP SYNC.                       TIMEHIST\n00081  05     FILLER         REDEFINES WS-WORK-COUNT.                   TIMEHIST\n00082  10  WS-WORK-1B        PIC X.                                     TIMEHIST\n00083  10  WS-WORK-3B        PIC XXX.                                   TIMEHIST\n00084 *                                                                 TIMEHIST\n00085  05  WS-MAX            PIC S9(8) COMP SYNC.                       TIMEHIST\n00086 *                                                                 TIMEHIST\n00087  05  WS-PRINT-FLAG     PIC X VALUE SPACES.                        TIMEHIST\n00088  88  WS-MORE-TO-PRINT  VALUE SPACES.                              TIMEHIST\n00089  88  WS-DONE-PRINTING  VALUE 'D'.                                 TIMEHIST\n00090 *                                                                 TIMEHIST\n00091  05  WS-WORK-AST       PIC S9(4) COMP SYNC.                       TIMEHIST\n00092 *                                                                 TIMEHIST\n00093  05  WS-PRINT-LINE.                                               TIMEHIST\n00094  10  WS-PL-1ST-HALF    PIC X(66).                                 TIMEHIST\n00095  10  WS-PL-2ND-HALF    PIC X(66).                                 TIMEHIST\n00096 *                                                                 TIMEHIST\n00097  05  WS-HALF.                                                     TIMEHIST\n00098  10  WS-HALF-FROM      PIC X(6).                                  TIMEHIST\n00099  10     FILLER         PIC X VALUE '-'.                           TIMEHIST\n00100  10  WS-HALF-TO        PIC X(6).                                  TIMEHIST\n00101  10  WS-HALF-TIMES     PIC Z(8).                                  TIMEHIST\n00102  10  WS-HALF-AST-F.                                               TIMEHIST\n00103  15  WS-HA-CH          OCCURS 45 TIMES                            TIMEHIST\n00104                        INDEXED BY WS-HA-IX                        TIMEHIST\n00105                        PIC X.                                     TIMEHIST\n00106 *                                                                 TIMEHIST\n00107  05  WS-LG-FLAG        PIC X VALUE SPACES.                        TIMEHIST\n00108  88  WS-LESS           VALUE 'L'.                                 TIMEHIST\n00109  88  WS-GTR            VALUE 'G'.                                 TIMEHIST\n00110 *                                                                 TIMEHIST\n00111  05  WS-REM            PIC S9(4) COMP SYNC.                       TIMEHIST\n00112 *                                                                 TIMEHIST\n00113  05  WS-HEX-TBL        PIC X(16) VALUE '0123456789ABCDEF'.        TIMEHIST\n00114  05     FILLER         REDEFINES WS-HEX-TBL.                      TIMEHIST\n00115  10  WS-HEX-CHAR       OCCURS 16 TIMES                            TIMEHIST\n00116                        PIC X.                                     TIMEHIST\n00117 *                                                                 TIMEHIST\n00118  05  WS-HEX-ADDR-F.                                               TIMEHIST\n00119  10  WS-HEX-ADDR-CH    OCCURS 6 TIMES                             TIMEHIST\n00120                        INDEXED BY WS-HAC-IX                       TIMEHIST\n00121                        PIC X.                                     TIMEHIST\n00122 *                                                                 TIMEHIST\n00123  05  WS-CAPT.                                                     TIMEHIST\n00124  10     FILLER         PIC X(21) VALUE '  FROM-    TO   TIMES'.   TIMEHIST\n00125  10     FILLER         PIC X(45) VALUE SPACES.                    TIMEHIST\n00126  10     FILLER         PIC X(21) VALUE '  FROM-    TO   TIMES'.   TIMEHIST\n00127 *                                                                 TIMEHIST\n00128  05  WS-PRINT-TABLE.                                              TIMEHIST\n00129  10  WS-PRINT-ENTRY    OCCURS 100 TIMES                           TIMEHIST\n00130                        INDEXED BY WS-PT-IX.                       TIMEHIST\n00131  15  WS-FROMX.                                                    TIMEHIST\n00132  20  WS-FROM           PIC S9(8) COMP SYNC.                       TIMEHIST\n00133  15  WS-TIMES          PIC S9(8) COMP SYNC.                       TIMEHIST\n00134  15  WS-AST-CNT        PIC S9(4) COMP SYNC.                       TIMEHIST\n00135  01  WS-TIME-TABLE.                                               TIMEHIST\n00136  05  WS-TIME-COUNT     OCCURS 32767 TIMES                         TIMEHIST\n00137                        INDEXED BY WS-TC-IX                        TIMEHIST\n00138                        PIC X(3).                                  TIMEHIST\n00139  05     FILLER         PIC X(32760).                              TIMEHIST\n00140  05     FILLER         PIC X(9).                                  TIMEHIST\n00141  PROCEDURE DIVISION.                                              TIMEHIST\n00142  200-START.                                                       TIMEHIST\n00143      OPEN INPUT UCRI-CARD.                                        TIMEHIST\n00144      OPEN OUTPUT UPRO-PRINTER.                                    TIMEHIST\n00145      PERFORM 210-PROCESS THRU 210-P-EXIT                          TIMEHIST\n00146         UNTIL WS-CARDS-AT-EOF.                                    TIMEHIST\n00147      CLOSE UPRO-PRINTER.                                          TIMEHIST\n00148      CLOSE UCRI-CARD.                                             TIMEHIST\n00149      STOP RUN.                                                    TIMEHIST\n00150 *                                                                 TIMEHIST\n00151 *                                                                 TIMEHIST\n00152  210-PROCESS.                                                     TIMEHIST\n00153      MOVE SPACES TO WS-VALID-FLAG.                                TIMEHIST\n00154      PERFORM 220-AUDIT-CARD THRU 220-AC-EXIT                      TIMEHIST\n00155         UNTIL WS-VALID OR WS-CARDS-AT-EOF.                        TIMEHIST\n00156      IF WS-GOT-A-CARD                                             TIMEHIST\n00157         PERFORM 300-FILE-PROCESS THRU 300-FP-EXIT.                TIMEHIST\n00158 *                                                                 TIMEHIST\n00159 *                                                                 TIMEHIST\n00160  210-P-EXIT.                                                      TIMEHIST\n00161      EXIT.                                                        TIMEHIST\n00162 *                                                                 TIMEHIST\n00163 *                                                                 TIMEHIST\n00164  220-AUDIT-CARD.                                                  TIMEHIST\n00165      READ UCRI-CARD AT END                                        TIMEHIST\n00166         MOVE 'E' TO WS-CARDS-EOF-FLAG                             TIMEHIST\n00167         GO TO 220-AC-EXIT.                                        TIMEHIST\n00168      MOVE UCRI-REC TO UPRO-LINE.                                  TIMEHIST\n00169      WRITE UPRO-REC AFTER ADVANCING TOP-OF-PAGE.                  TIMEHIST\n00170      MOVE ZERO TO WS-START.                                       TIMEHIST\n00171      IF UCRI-START IS NOT EQUAL TO SPACES                         TIMEHIST\n00172         MOVE UCRI-START TO WS-UN-HEX                              TIMEHIST\n00173         SET WS-UH-IX TO 1                                         TIMEHIST\n00174         PERFORM 230-HEX-TO-BIN THRU 230-HTB-EXIT 6 TIMES.         TIMEHIST\n00175      IF WS-INVALID                                                TIMEHIST\n00176         MOVE 'INVALID START FIELD' TO UPRO-LINE                   TIMEHIST\n00177         WRITE UPRO-REC AFTER ADVANCING 2 LINES.                   TIMEHIST\n00178      EXAMINE UCRI-ILENX REPLACING LEADING SPACES BY ZERO.         TIMEHIST\n00179      IF UCRI-ILEN IS NOT NUMERIC                                  TIMEHIST\n00180         OR UCRI-ILEN IS EQUAL TO ZERO                             TIMEHIST\n00181         MOVE 'INVALID INTERVAL LENGTH' TO UPRO-LINE               TIMEHIST\n00182         WRITE UPRO-REC AFTER ADVANCING 2 LINES                    TIMEHIST\n00183         MOVE 'I' TO WS-VALID-FLAG                                 TIMEHIST\n00184      ELSE                                                         TIMEHIST\n00185         MOVE UCRI-ILEN TO WS-TITLE-INT                               CL**4\n00186         MOVE UCRI-ILEN TO WS-ILEN.                                TIMEHIST\n00187      IF NOT WS-INVALID                                            TIMEHIST\n00188         MOVE 'V' TO WS-VALID-FLAG                                 TIMEHIST\n00189      ELSE                                                         TIMEHIST\n00190         MOVE SPACES TO WS-VALID-FLAG.                             TIMEHIST\n00191      MOVE UCRI-COMMENT TO WS-COMMENT.                             TIMEHIST\n00192 *                                                                 TIMEHIST\n00193 *                                                                 TIMEHIST\n00194  220-AC-EXIT.                                                     TIMEHIST\n00195      EXIT.                                                        TIMEHIST\n00196 *                                                                 TIMEHIST\n00197 *                                                                 TIMEHIST\n00198  230-HEX-TO-BIN.                                                  TIMEHIST\n00199      MOVE WS-UN-HEX-CH (WS-UH-IX) TO WS-CHAR.                     TIMEHIST\n00200      MULTIPLY 16 BY WS-START.                                     TIMEHIST\n00201      IF WS-CHAR IS NUMERIC                                        TIMEHIST\n00202         ADD WS-CHARU TO WS-START                                  TIMEHIST\n00203      ELSE                                                         TIMEHIST\n00204         IF WS-CHAR IS EQUAL TO 'A'                                TIMEHIST\n00205            ADD 10 TO WS-START                                     TIMEHIST\n00206      ELSE                                                         TIMEHIST\n00207         IF WS-CHAR IS EQUAL TO 'B'                                TIMEHIST\n00208            ADD 11 TO WS-START                                     TIMEHIST\n00209      ELSE                                                         TIMEHIST\n00210         IF WS-CHAR IS EQUAL TO 'C'                                TIMEHIST\n00211            ADD 12 TO WS-START                                     TIMEHIST\n00212      ELSE                                                         TIMEHIST\n00213         IF WS-CHAR IS EQUAL TO 'D'                                TIMEHIST\n00214            ADD 13 TO WS-START                                     TIMEHIST\n00215      ELSE                                                         TIMEHIST\n00216         IF WS-CHAR IS EQUAL TO 'E'                                TIMEHIST\n00217            ADD 14 TO WS-START                                     TIMEHIST\n00218      ELSE                                                         TIMEHIST\n00219         IF WS-CHAR IS EQUAL TO 'F'                                TIMEHIST\n00220            ADD 15 TO WS-START                                     TIMEHIST\n00221      ELSE                                                         TIMEHIST\n00222         MOVE 'I' TO WS-VALID-FLAG.                                TIMEHIST\n00223      SET WS-UH-IX UP BY 1.                                        TIMEHIST\n00224 *                                                                 TIMEHIST\n00225 *                                                                 TIMEHIST\n00226  230-HTB-EXIT.                                                    TIMEHIST\n00227      EXIT.                                                        TIMEHIST\n00228 *                                                                 TIMEHIST\n00229 *                                                                 TIMEHIST\n00230  300-FILE-PROCESS.                                                TIMEHIST\n00231      OPEN INPUT UDAI-DATA.                                        TIMEHIST\n00232      MOVE LOW-VALUES TO WS-TIME-TABLE.                            TIMEHIST\n00233      MOVE WS-ILEN TO WS-HIGH.                                     TIMEHIST\n00234      MULTIPLY 43690 BY WS-HIGH.                                   TIMEHIST\n00235      SUBTRACT 1 FROM WS-HIGH.                                     TIMEHIST\n00236      ADD WS-START TO WS-HIGH.                                     TIMEHIST\n00237      MOVE ZERO TO WS-LOW-COUNT, WS-HIGH-COUNT.                    TIMEHIST\n00238      MOVE ZERO TO WS-TOTAL.                                          CL**4\n00239      PERFORM 310-INPUT-DATA THRU 310-ID-EXIT.                     TIMEHIST\n00240      CLOSE UDAI-DATA.                                             TIMEHIST\n00241      MOVE LOW-VALUES TO WS-WORK-1B.                               TIMEHIST\n00242      MOVE ZERO TO WS-MAX.                                         TIMEHIST\n00243      SET WS-TC-IX TO 1.                                           TIMEHIST\n00244      PERFORM 320-MAX-GET THRU 320-MG-EXIT.                        TIMEHIST\n00245      MOVE SPACES TO WS-PRINT-FLAG.                                TIMEHIST\n00246      MOVE WS-MAX TO WS-TITLE-MAX.                                    CL**4\n00247      MOVE WS-TOTAL TO WS-TITLE-TOTAL.                                CL**4\n00248      SET WS-TC-IX TO 1.                                           TIMEHIST\n00249      PERFORM 330-PRINT-ALL THRU 330-PA-EXIT                       TIMEHIST\n00250         UNTIL WS-DONE-PRINTING.                                   TIMEHIST\n00251 *                                                                 TIMEHIST\n00252 *                                                                 TIMEHIST\n00253  300-FP-EXIT.                                                     TIMEHIST\n00254      EXIT.                                                        TIMEHIST\n00255 *                                                                 TIMEHIST\n00256 *                                                                 TIMEHIST\n00257  310-INPUT-DATA.                                                  TIMEHIST\n00258      READ UDAI-DATA AT END                                        TIMEHIST\n00259         GO TO 310-ID-EXIT.                                        TIMEHIST\n00260      ADD 1 TO WS-TOTAL.                                              CL**4\n00261      IF UDAI-ADDR IS LESS THAN WS-START                           TIMEHIST\n00262         ADD 1 TO WS-LOW-COUNT                                     TIMEHIST\n00263      ELSE                                                         TIMEHIST\n00264         IF UDAI-ADDR IS IS GREATER THAN WS-HIGH                   TIMEHIST\n00265            ADD 1 TO WS-HIGH-COUNT                                 TIMEHIST\n00266         ELSE                                                      TIMEHIST\n00267            SUBTRACT WS-START FROM UDAI-ADDR                       TIMEHIST\n00268            DIVIDE WS-ILEN INTO UDAI-ADDR                          TIMEHIST\n00269            ADD 1 TO UDAI-ADDR                                        CL**2\n00270            MOVE LOW-VALUES TO WS-WORK-1B                          TIMEHIST\n00271            MOVE WS-TIME-COUNT (UDAI-ADDR) TO WS-WORK-3B           TIMEHIST\n00272            ADD 1 TO WS-WORK-COUNT                                 TIMEHIST\n00273            MOVE WS-WORK-3B TO WS-TIME-COUNT (UDAI-ADDR).          TIMEHIST\n00274      GO TO 310-INPUT-DATA.                                        TIMEHIST\n00275 *                                                                 TIMEHIST\n00276 *                                                                 TIMEHIST\n00277  310-ID-EXIT.                                                     TIMEHIST\n00278      EXIT.                                                        TIMEHIST\n00279 *                                                                 TIMEHIST\n00280 *                                                                 TIMEHIST\n00281  320-MAX-GET.                                                     TIMEHIST\n00282      IF WS-TIME-COUNT (WS-TC-IX) IS GREATER THAN WS-WORK-3B          CL**2\n00283         MOVE WS-TIME-COUNT (WS-TC-IX) TO WS-WORK-3B.                 CL**2\n00284      SET WS-TC-IX UP BY 1.                                        TIMEHIST\n00285      IF WS-TC-IX IS LESS THAN 43691                               TIMEHIST\n00286         GO TO 320-MAX-GET.                                        TIMEHIST\n00287      MOVE WS-WORK-COUNT TO WS-MAX.                                   CL**5\n00288 *                                                                 TIMEHIST\n00289 *                                                                 TIMEHIST\n00290  320-MG-EXIT.                                                     TIMEHIST\n00291      EXIT.                                                        TIMEHIST\n00292 *                                                                 TIMEHIST\n00293 *                                                                 TIMEHIST\n00294  330-PRINT-ALL.                                                   TIMEHIST\n00295      IF WS-TC-IX IS NOT LESS THAN 43691                           TIMEHIST\n00296         MOVE 'D' TO WS-PRINT-FLAG                                 TIMEHIST\n00297         GO TO 330-PA-EXIT.                                        TIMEHIST\n00298      SET WS-PT-IX TO 1.                                           TIMEHIST\n00299      MOVE LOW-VALUES TO WS-PRINT-TABLE.                           TIMEHIST\n00300      PERFORM 340-FILL-TABLE THRU 340-FT-EXIT                      TIMEHIST\n00301      PERFORM 350-PRINT-TABLE THRU 350-PT-EXIT.                    TIMEHIST\n00302 *                                                                 TIMEHIST\n00303 *                                                                 TIMEHIST\n00304  330-PA-EXIT.                                                     TIMEHIST\n00305      EXIT.                                                        TIMEHIST\n00306 *                                                                 TIMEHIST\n00307 *                                                                 TIMEHIST\n00308  340-FILL-TABLE.                                                  TIMEHIST\n00309      IF WS-TC-IX IS EQUAL TO 1                                    TIMEHIST\n00310         MOVE 'LESS' TO WS-FROMX (WS-PT-IX)                        TIMEHIST\n00311         MOVE WS-LOW-COUNT TO WS-TIMES (WS-PT-IX)                  TIMEHIST\n00312         MOVE ZERO TO WS-WORK-AST                                     CL**5\n00313         MOVE WS-WORK-AST TO WS-AST-CNT (WS-PT-IX)                 TIMEHIST\n00314         SET WS-PT-IX UP BY 1.                                     TIMEHIST\n00315      IF WS-TC-IX IS EQUAL TO 43691                                TIMEHIST\n00316         MOVE 'GTR ' TO WS-FROMX (WS-PT-IX)                        TIMEHIST\n00317         MOVE WS-HIGH-COUNT TO WS-TIMES (WS-PT-IX)                 TIMEHIST\n00318         MOVE ZERO TO WS-WORK-AST                                     CL**5\n00319         MOVE WS-WORK-AST TO WS-AST-CNT (WS-PT-IX)                 TIMEHIST\n00320         SET WS-PT-IX UP BY 1                                      TIMEHIST\n00321         GO TO 340-FT-EXIT.                                        TIMEHIST\n00322      IF WS-TIME-COUNT (WS-TC-IX) IS NOT EQUAL TO LOW-VALUES       TIMEHIST\n00323         SET WS-WORK-COUNT TO WS-TC-IX                             TIMEHIST\n00324         SUBTRACT 1 FROM WS-WORK-COUNT                                CL**3\n00325         MULTIPLY WS-ILEN BY WS-WORK-COUNT                         TIMEHIST\n00326         ADD WS-START TO WS-WORK-COUNT                             TIMEHIST\n00327         MOVE WS-WORK-COUNT TO WS-FROM (WS-PT-IX)                  TIMEHIST\n00328         MOVE WS-TIME-COUNT (WS-TC-IX) TO WS-WORK-3B               TIMEHIST\n00329         MOVE LOW-VALUES TO WS-WORK-1B                             TIMEHIST\n00330         MOVE WS-WORK-COUNT TO WS-TIMES (WS-PT-IX)                 TIMEHIST\n00331         COMPUTE WS-WORK-AST = (WS-WORK-COUNT * 45) / WS-MAX       TIMEHIST\n00332         MOVE WS-WORK-AST TO WS-AST-CNT (WS-PT-IX)                 TIMEHIST\n00333         SET WS-PT-IX UP BY 1.                                     TIMEHIST\n00334      SET WS-TC-IX UP BY 1.                                        TIMEHIST\n00335      IF WS-PT-IX IS LESS THAN 101                                 TIMEHIST\n00336         AND WS-TC-IX IS NOT GREATER THAN 43691                    TIMEHIST\n00337         GO TO 340-FILL-TABLE.                                     TIMEHIST\n00338 *                                                                 TIMEHIST\n00339 *                                                                 TIMEHIST\n00340  340-FT-EXIT.                                                     TIMEHIST\n00341      EXIT.                                                        TIMEHIST\n00342 *                                                                 TIMEHIST\n00343 *                                                                 TIMEHIST\n00344 *                                                                 TIMEHIST\n00345  350-PRINT-TABLE.                                                 TIMEHIST\n00346      MOVE WS-TITLE TO UPRO-LINE.                                  TIMEHIST\n00347      WRITE UPRO-REC AFTER ADVANCING TOP-OF-PAGE.                  TIMEHIST\n00348      MOVE WS-CAPT TO UPRO-LINE.                                   TIMEHIST\n00349      WRITE UPRO-REC AFTER ADVANCING 3 LINES.                      TIMEHIST\n00350      SET WS-PT-IX TO 1.                                           TIMEHIST\n00351 *                                                                 TIMEHIST\n00352  350-LOOP.                                                        TIMEHIST\n00353      PERFORM 360-BUILD-HALF THRU 360-BH-EXIT.                     TIMEHIST\n00354      MOVE WS-HALF TO WS-PL-1ST-HALF.                              TIMEHIST\n00355      SET WS-PT-IX UP BY 50.                                       TIMEHIST\n00356      PERFORM 360-BUILD-HALF THRU 360-BH-EXIT.                     TIMEHIST\n00357      MOVE WS-HALF TO WS-PL-2ND-HALF.                              TIMEHIST\n00358      MOVE WS-PRINT-LINE TO UPRO-LINE.                             TIMEHIST\n00359      WRITE UPRO-REC AFTER ADVANCING 1 LINES.                      TIMEHIST\n00360      SET WS-PT-IX DOWN BY 49.                                     TIMEHIST\n00361      IF WS-PT-IX IS NOT EQUAL TO 51                               TIMEHIST\n00362         GO TO 350-LOOP.                                           TIMEHIST\n00363 *                                                                 TIMEHIST\n00364 *                                                                 TIMEHIST\n00365  350-PT-EXIT.                                                     TIMEHIST\n00366      EXIT.                                                        TIMEHIST\n00367 *                                                                 TIMEHIST\n00368 *                                                                 TIMEHIST\n00369  360-BUILD-HALF.                                                  TIMEHIST\n00370      IF WS-TIMES (WS-PT-IX) IS EQUAL TO ZERO                      TIMEHIST\n00371         MOVE SPACES TO WS-HALF                                    TIMEHIST\n00372         GO TO 360-BH-EXIT.                                        TIMEHIST\n00373      MOVE SPACES TO WS-LG-FLAG.                                   TIMEHIST\n00374      IF WS-FROMX (WS-PT-IX) IS EQUAL TO 'LESS'                    TIMEHIST\n00375         MOVE 'L' TO WS-LG-FLAG                                    TIMEHIST\n00376         MOVE WS-START TO WS-FROM (WS-PT-IX)                       TIMEHIST\n00377         ADD 1 TO WS-FROM (WS-PT-IX)                               TIMEHIST\n00378         SUBTRACT WS-ILEN FROM WS-FROM (WS-PT-IX).                 TIMEHIST\n00379      IF WS-FROMX (WS-PT-IX) IS EQUAL TO 'GTR '                    TIMEHIST\n00380         MOVE 'G' TO WS-LG-FLAG                                    TIMEHIST\n00381         MOVE WS-ILEN TO WS-WORK-COUNT                             TIMEHIST\n00382         MULTIPLY 43690 BY WS-WORK-COUNT                           TIMEHIST\n00383         ADD WS-START TO WS-WORK-COUNT                             TIMEHIST\n00384         MOVE WS-WORK-COUNT TO WS-FROM (WS-PT-IX).                 TIMEHIST\n00385      MOVE '      -' TO WS-HALF.                                   TIMEHIST\n00386      MOVE WS-FROM (WS-PT-IX) TO WS-WORK-COUNT.                    TIMEHIST\n00387      PERFORM 370-CVT-TO-HEX THRU 370-CTH-EXIT.                    TIMEHIST\n00388      MOVE WS-HEX-ADDR-F TO WS-HALF-FROM.                          TIMEHIST\n00389      MOVE WS-FROM (WS-PT-IX) TO WS-WORK-COUNT.                    TIMEHIST\n00390      ADD WS-ILEN TO WS-WORK-COUNT.                                TIMEHIST\n00391      SUBTRACT 1 FROM WS-WORK-COUNT.                               TIMEHIST\n00392      PERFORM 370-CVT-TO-HEX THRU 370-CTH-EXIT.                    TIMEHIST\n00393      MOVE WS-HEX-ADDR-F TO WS-HALF-TO.                            TIMEHIST\n00394      MOVE WS-TIMES (WS-PT-IX) TO WS-HALF-TIMES.                   TIMEHIST\n00395      IF WS-LESS                                                   TIMEHIST\n00396         MOVE 'LESS' TO WS-HALF-FROM.                              TIMEHIST\n00397      IF WS-GTR                                                    TIMEHIST\n00398         MOVE 'GTR' TO WS-HALF-TO.                                 TIMEHIST\n00399      SET WS-HA-IX TO 1.                                           TIMEHIST\n00400  360-LOOP.                                                        TIMEHIST\n00401      IF WS-HA-IX IS NOT GREATER THAN WS-AST-CNT (WS-PT-IX)        TIMEHIST\n00402         MOVE '*' TO WS-HA-CH (WS-HA-IX)                           TIMEHIST\n00403         SET WS-HA-IX UP BY 1                                      TIMEHIST\n00404         GO TO 360-LOOP.                                           TIMEHIST\n00405 *                                                                 TIMEHIST\n00406 *                                                                 TIMEHIST\n00407  360-BH-EXIT.                                                     TIMEHIST\n00408      EXIT.                                                        TIMEHIST\n00409 *                                                                 TIMEHIST\n00410 *                                                                 TIMEHIST\n00411  370-CVT-TO-HEX.                                                  TIMEHIST\n00412      SET WS-HAC-IX TO 6.                                          TIMEHIST\n00413  370-LOOP.                                                        TIMEHIST\n00414      DIVIDE 16 INTO WS-WORK-COUNT GIVING WS-WORK-COUNT            TIMEHIST\n00415         REMAINDER WS-REM.                                         TIMEHIST\n00416      ADD 1 TO WS-REM.                                             TIMEHIST\n00417      MOVE WS-HEX-CHAR (WS-REM) TO WS-HEX-ADDR-CH (WS-HAC-IX).     TIMEHIST\n00418      IF WS-HAC-IX IS NOT EQUAL TO 1                               TIMEHIST\n00419         SET WS-HAC-IX DOWN BY 1                                   TIMEHIST\n00420         GO TO 370-LOOP.                                           TIMEHIST\n00421 *                                                                 TIMEHIST\n00422 *                                                                 TIMEHIST\n00423  370-CTH-EXIT.                                                    TIMEHIST\n00424      EXIT.                                                        TIMEHIST\n00425 *                                                                 TIMEHIST\n00426 *                                                                 TIMEHIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIMETAKE": {"ttr": 4361, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TIMETAKE SUBENTRY                                                       00001\n* CHANGED 6/14/89 BY H. ZBIEGIEN TO HANDLE 31 BIT PROGRAMS              00002**4\n         ST    R1,SAVER1                                                00003\n         OPEN  (TIMEPARM,(INPUT))  OPEN PARAMETER FILE                  00004\n         GET   TIMEPARM      GET A PARM CARD                            00005\n         LR    R10,R1        R10 NOW POINTS TO CARD                     00006\n         MVC   PGM,0(R10)    GET PROGRAM NAME                           00007\n         PACK  PTUS,8(5,R10) GET # OF TIMER UNITS                       00008\n         CVB   R2,PTUS       CONVERT TO BINARY                          00009\n         ST    R2,PTUB       SAVE TIMER UNITS                           00010\nNOCARD   TAG                                                            00011\n         CLOSE (TIMEPARM)    CLOSE PARAMETER FILE                       00012\n         LOAD  EPLOC=PGM     LOAD PROGRAM                               00013\n         ST    R0,EPLOC      SAVE ENTRY POINT ADDRESS                   00014\n         OPEN  (TIMEDATA,(OUTPUT)) OPEN DATA FILE                       00015\n         STIMER TASK,EXITA,TUINTVL=PTUB   SET TIMMER                    00016\n         L     R1,SAVER1     RETURN R1                                  00017\n         L     R15,EPLOC     GET ADDR OF EP OF PROGRAM                  00018\n         BASSM R14,R15       BRANCH AND SET ADDRESS MODE   HPZ          00019**4\n         L     R14,=A(NEXT)  RETURNED, NOW SET BACK TO     HPZ          00020**4\n         BASSM R14,R14       24 BIT MODE                   HPZ          00021**4\nNEXT     TTIMER CANCEL       CANCEL OUTSTANDING TIME                    00022**4\n         CLOSE (TIMEDATA)    CLOSE DATA FILE                            00023\n         SUBEXIT             RETURN FROM TIMINGS                        00024\n         DROP  R13                                                      00025\nEXITA    TAG                                                            00026\n         USING *,R15                                                    00027\n         STM   R0,R15,MYSAVEA  SAVE IN MY AREA                          00028\n         LA    R13,NEWSAVEA    NEW SAVE AREA                            00029\n         L     R12,EXITAC      SET UP R12 AS A BASE                     00030\n         DROP  R15                                                      00031\n         USING EXITA,R12                                                00032\n         BAL   R11,COMMON      BRANCH TO COMMON ROUTINE                 00033\n         STIMER TASK,EXITB,TUINTVL=PTUB  SET TIMER                      00034\n         LM    R0,R15,MYSAVEA  RESTORE REGISTER                         00035\n         BR    14              RETURN FROM TIMMING A                    00036\nEXITB    TAG                                                            00037\n         DROP  R12                                                      00038\n         USING *,R15                                                    00039\n         STM   R0,R15,MYSAVEB  SAVE IN MYAREA                           00040\n         LA    R13,NEWSAVEB    NEW SAVE AREA                            00041\n         L     R12,EXITAC      SET UP R12 AS A BASE                     00042\n         DROP  R15                                                      00043\n         USING EXITA,R12                                                00044\n         BAL   R11,COMMON      BRANCH TO COMMON ROUTINE                 00045\n         STIMER TASK,EXITC,TUINTVL=PTUB SET TIMER                       00046\n         LM    R0,R15,MYSAVEB  RESTORE REGISTERS                        00047\n         BR    14              RETURN FROM TIMMING B                    00048\n         DROP  R12                                                      00049\nEXITC    TAG                                                            00050\n         USING *,R15                                                    00051\n         STM   R0,R15,MYSAVEC  SAVE IN MY AREA                          00052\n         LA    R13,NEWSAVEC    NEW SAVE AREA                            00053\n         L     R12,EXITAC      SET UP R12 AS A BASE                     00054\n         DROP  R15                                                      00055\n         USING EXITA,R12                                                00056\n         BAL   R11,COMMON      BRANCH TO COMMON ROUTINE                 00057\n         STIMER TASK,EXITA,TUINTVL=PTUB SET TIMER                       00058\n         LM    R0,R15,MYSAVEC  RESTORE REGISTERS                        00059\n         BR    14              RETURN FROM TIMMING                      00060\n         DROP  R12                                                      00061\nCOMMON   TAG                                                            00062\n         USING EXITA,R12                                                00063\n         L     R5,CVTADDR    R5= A(CVT)                                 00064\n         L     R5,0(R5)      R5= A(TCB WORDS)                           00065\n         L     R5,4(R5)      R5= A(MYTCB)                               00066\n         LR    R6,R5         SAVE FOR TEST                              00067\n         L     R5,0(R5)      R5= A(LAST ACTIVE RB)                      00068\n         LA    R6,0(R6)      STRIP BYTE                                 00069\nRBLOOP   TAG                                                            00070\n         L     R4,12(R5)     GET CDE ADDRESS    MVS HPZ                 00071\n         CLC   MYNAME,8(R4)  SEE IF MY TCB      MVS HPZ                 00072\n         BE    FOUND                                                    00073\n         L     R5,28(R5)     GET NEXT RB                                00074\n         LA    R5,0(R5)      STRIP BYTE                                 00075\n         CR    R6,R5         BACK AT TCB ?                              00076\n         BE    ABEND1        YES                                        00077\n         B     RBLOOP        LOOP                                       00078\nFOUND    TAG                                                            00079\n         L     R4,20(R5)     PSW WORD                                   00080\n         N     R4,=X'7FFFFFFF'   STRIP HIGH BIT    HPZ                  00081**4\n         L     R5,36(R6)     R5=A(LLS)                                  00082\nLLSLOOP  TAG                                                            00083\n         L     R3,4(R5)      PT TO CDE         MVZ HPZ                  00084\n         CLC   PGM,8(R3)     CHECK LPRB NAME   MVS HPZ                  00085\n         BE    FOUND2                                                   00086\n         CLC   MYNAME,8(R3)  SEE IF ERROR      MVS HPZ                  00087\n         BE    ABEND2                                                   00088\n         L     R5,0(R5)      GET NEXT  LOAD LIST ENTRY MVS HPZ          00089\n         LTR   R5,R5         SEE IF NOMORE             MVS HPZ          00090\n         BZ    ABEND2                                  MVS HPZ          00091\n         B     LLSLOOP                                                  00092\nFOUND2   TAG                                                            00093\n         L     R3,20(R3)     GET ADDRESS OF EXTENT LIST  MVS HPZ        00094\n         L     R3,12(R3)     GET  LOAD ADDRESS           MVS HPZ        00095\n         N     R3,=X'7FFFFFFF'   STRIP HIGH BIT HPZ                     00096**4\n         SR    R4,R3         R3-R4 INTO R4                              00097\n         ST    R4,WORD                                                  00098\n         PUT   TIMEDATA,WORD  WRITE ADDRESS OUT                         00099\n         BR    R11           RETURN FROM COMMON                         00100\nABEND1   ABEND 1000,DUMP                                                00101\nABEND2   ABEND 1001,DUMP                                                00102\n         LTORG                                                          00103\n         EQUREGS                                                        00104\nCVTADDR  EQU  X'4C'                                                     00105\nMYSAVEA  DC    16F'0'        SAVE AREA EXITA                            00106\nNEWSAVEA DC    18F'0'        SAVE AREA EXITA                            00107\nMYSAVEB  DC    16F'0'        SAVE AREA EXITB                            00108\nNEWSAVEB DC    18F'0'        SAVE AREA EXITB                            00109\nMYSAVEC  DC    16F'0'        SAVE AREA EXITC                            00110\nNEWSAVEC DC    18F'0'        SAVE AREA EXITC                            00111\nTIMEPARM DCB   DSORG=PS,MACRF=GL,DDNAME=TIMEPARM,EODAD=NOCARD,         X00112\n               RECFM=F,LRECL=80                                         00113\nTIMEDATA  DCB   DSORG=PS,MACRF=PM,DDNAME=TIMEDATA,RECFM=FB,            X00114\n               LRECL=4                                                  00115\nPGM      DC    CL8'ABCDEFGH' DUMMY PROGRAM NAME                         00116\nMYNAME   DC    CL8'TIMETAKE'                                            00117\n         DS    0D                                                       00118**4\nPTUS     DC    PL8'38'       #OF TIMMER UNITS IN PACKED MODE            00119\nPTUB     DC    F'38'         #OF TIMMER UNITS IN BINARY 26.0416         00120\nEPLOC    DC    F'0'          ENTRY POINT LOCATION OF PROGRAM            00121\nSAVER1   DC    F'0'          JCL PARM POINTER SAVE                      00122\nEXITAC   DC    A(EXITA)      ADCON FOR BASING                           00123\nWORD     DC    F'0'          THE RELATIVE ADDRESS                       00124\n         END   TIMETAKE                                                 00125\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIMHISTJ": {"ttr": 4364, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$TPOS JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//TIMEHIST EXEC PGM=TIMEHIST\n//STEPLIB  DD   DSN=PRODLIB,\n//             DISP=SHR\n//SYSUDUMP DD   SYSOUT=W\n//PRINTER  DD   SYSOUT=W,\n//             DCB=(LRECL=133,RECFM=FB,BLKSIZE=1729)\n//TIMEDATA DD   DSN=&&PGRMR,\n//             DISP=(OLD,DELETE,DELETE)\n//*   ADD  SYSIN DD *  CARD WITH MULTIPLE DATA CARDS AFTER IT\n//*  FIRST 6 COLUMNS OF DATA CARD IS THE HEX ADDRESS OR BLANK OF THE\n//*        FIRST ENTRY IN THE TABLE\n//*  NEXT 4 COLUMNS IS THE INTERVAL OF EACH SIZE IN THE TABLE\n      0002\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIMTAKEJ": {"ttr": 4609, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//HPZ$TPOS JOB ,ZBIEGIEN,MSGCLASS=W,CLASS=3\n/*JOBPARM ROOM=3426\n//TIMETAKE PROC STPLIB=PRODLIB,\n//             PGRMR=XYZ,              PROGRAMMER'S INITIALS\n//             DISPD='(,PASS,DELETE)',  DISP OF DATA FILE\n//             BLKS=160   40640 TIMINGS SECONDARY ALLOCATION\n//*   TAKE TIME SAMPLES OF A PROGRAM\n//*   CREATED  MAY 15,1978 H ZBIEGIEN\n//TIMETAKE EXEC  PGM=TIMETAKE\n//STEPLIB  DD   DSN=&PGRMR..TESTLIB,\n//             DISP=SHR\n//         DD   DSN=&STPLIB,\n//             DISP=SHR\n//TIMEDATA DD   DSN=&&PGRMR,\n//             DISP=&DISPD,\n//             UNIT=SYSDA,\n//             DCB=(LRECL=4,RECFM=FBS,BLKSIZE=1016),  254 SAMPLES\n//             SPACE=(1016,(32,&BLKS),RLSE)    8128 SAMPLES\n//SYSUDUMP DD   SYSOUT=W\n//*   ADD  TIMEPARM DD *  CARD FOLLOWED BY 1 DATA CARD\n//*   FIRST 8 COLUMNS OF DATA CARD IS THE PROGRAM NAME TO BE SAMPLED\n//*   NEXT 5 COLUMNS IS THE TIME INTERVAL IN UNITS OF 26.0416 MICRO SEC\n//*  A VALUE OF 00380 IS 10 MILLI SECONDS,OR 100 SAMPLES PER CPU SEC\n// PEND\n//A EXEC TIMETAKE,PGRMR=HPZ\n//TIMEPARM DD *\nPOSA    00020\n//CARDS   DD *  THE REST OF YOUR JCL AS YOU NORMALLY WOULD HAVE         00124\nPTM99505013179                                                          00125\nPTM10604252550108D 120                                                  00126\n//CE    DD SYSOUT=W,DCB=(LRECL=133,RECFM=FB,BLKSIZE=1729)               00204\n//WORKFILE DD UNIT=SYSDA,SPACE=(6160,(10,20)),                          00205\n//    DCB=(LRECL=80,RECFM=FBS,BLKSIZE=6160)                             00206\n//POSTABLE    DD UNIT=SYSDA,SPACE=(6228,(4,4)),                         00207\n//   DCB=(LRECL=12,RECFM=FBS,BLKSIZE=6228)                              00208\n//CHNGCRDS   DD UNIT=SYSDA,SPACE=(6160,(10,20)),                        00209\n//   DCB=(LRECL=77,RECFM=FBS,BLKSIZE=6160)                              00210\n//IGZSRTCD DD DUMMY\n//SYSOUT   DD SYSOUT=W                                                  00211\n//SORTLIB  DD DSN=SYS1.SORTLIB,DISP=SHR                                 00212\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,1)                                  0213\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,1)                                  0214\n//SORTWK03 DD UNIT=SYSDA,SPACE=(CYL,1)                                  0215\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X$$DOC": {"ttr": 4611, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS DESCRIBES THE FONT MEMBERS\n\nTHE FONT MEMBERS NAME THE CHARACTER SET AND THE ASSOCIATED TRANSLATE\nTABLE.\n\nX1AG0004 - GRAY BAR  CHARACTER SET\nX2AG0004 - ROTATED GRAY BAR CHARACTER SET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT152/FILE152.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT152", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}