{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012614000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE690.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE690.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0f'", "DS1TRBAL": "b'\\x1a\\xb2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd2\\x00\\n\\x04\\xd3\\x00\\x00\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x04$\\x7f\\x01\\x04$\\x7f\\x10E\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-09-03T00:00:00", "modifydate": "2004-09-03T10:45:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-467"}, "text": "REGULAR CBT TAPE - VERSION 467    FILE:  690\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT467.FILE690\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   20 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,107 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/03/04    10:45:44    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00F\\x01\\x04#\\x7f\\x01\\x04$\\x7f\\x101\\x00M\\x00F\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-09-03T10:31:46", "lines": 77, "newlines": 70, "modlines": 0, "user": "SBGOLOB"}, "text": "This is the documentation for the cross-memory browser (originally\ncalled MINDRDR) from Martin Kline.\n\nAs of 08/24/2004, Martin is employed with American Century Investments\nin Kansas City, MO. He can be reached for information at\nmartin_kline@americancentury.com\n\nThe source originated in the mid 1980's, so it could possibly use\nsome updates. It was written as a tool to help in the design and\nimplementation of several major applications, including a replacement\nfor TCAM TSO (without VTAM), and a complete report management\nsubsystem.\n\nThe tool allows a user to browse through any address space from the\nconvenience of their own TSO session. Obviously, this has some\nsecurity risks, and should only be used by responsible persons. When\nit was first written, several major security holes were found,\nincluding the availability of passwords in various control blocks.\nMost of those security holes have since been fixed.\n\nThe XMDSMAIN program checks the logon proc name to see if the\nuser should be allowed to run the program. If not, it simply\nexits.\n\nInstallation:\n\nAll of the source, JCL and macro members are contained in this PDS.\nDetermine which load library is to receive the XMDSMAIN module.\nMember $$ASM is the JCL to assemble the source members and to build\nan authorized load module. Add a job card. Change the input and output\ndatasets, and run it.\n\nMove the resulting load module to an authorized linklist library.\n(You really didn't think you could do this without some sort of\nauthorization, did you?) If you prefer to use a user SVC to change\nthe APF authorization dynamically, then find all of the @AUTH macro\nreferences in the source, and change them to call your SVC.\n\nAdd the XMDSMAIN program to the IKJTSOxx member of SYS1.PARMLIB as\nan authorized command.\n\nYou have to customize and run the ZAPPROC job, or else you have to\nalter the source code to not check for your logon proc.\n\nUsage:\n\nInvoke the program from anywhere in TSO/ISPF. ISPF is not required.\n\nAssigned keys are:\n\n  PF1  - Help\n  PF3  - End\n  PF5  - Repeat find\n  PF7  - Scroll backward\n  PF8  - Scroll forward\n  PF11 - Pick up address from cursor and show that storage\n\n  FIND command - FIND or F  'string' or x'string'\n                 Searches up to 16 meg of storage\n                 Can take a long time if storage not allocated.\n\n  LOCATE command - LOCATE or L   block-name\n                   Locates and displays various control blocks.\n                   Use PF1 to see a list of supported blocks.\n\nFields:\n\n  ADDRESS   - Current address. Overtype to show a specific location\n  MODE      - Addressing mode. D = 24-bit mode, X = 31-bit mode\n  ASID      - Decimal ASID of displayed address space. Overtype\n              to change ASIDs\n  JOBNAME   - Job name of displayed address space. Overtype to change.\n\nDisplayed storage cannot be altered. Use TAB key to move to a field\nbefore pressing PF11 to link to that address.\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$ASM": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00!\\x00!\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 33, "newlines": 33, "modlines": 0, "user": "MKLINE"}, "text": "//ASSEM    JOB     'YOUR JOB CARD'\n//*\n//XMDASM PROC\n//ASM  EXEC PGM=ASMA90,PARM='OBJECT',COND=(0,NE)\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=XMEM.ASM,DISP=SHR\n//SYSLIN   DD DSN=&&SYSLIN,DISP=(MOD,PASS),UNIT=DISK,\n//         SPACE=(TRK,(5,5)),DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSPUNCH  DD DUMMY,DCB=BLKSIZE=80\n//SYSUT1   DD UNIT=VIO,SPACE=(TRK,5)\n//SYSIN    DD DSN=XMEM.ASM(&MEM),DISP=SHR\n// PEND\n//*\n//ASMCMD    EXEC XMDASM,MEM=XMDSCMD\n//ASMFIND   EXEC XMDASM,MEM=XMDSFIND\n//ASMFORM   EXEC XMDASM,MEM=XMDSFORM\n//ASMHELP   EXEC XMDASM,MEM=XMDSHELP\n//ASMMAIN   EXEC XMDASM,MEM=XMDSMAIN\n//ASMMAP    EXEC XMDASM,MEM=XMDSMAP\n//ASMMVCP   EXEC XMDASM,MEM=XMDSMVCP\n//ASMTGET   EXEC XMDASM,MEM=XMDSTGET\n//ASMTPUT   EXEC XMDASM,MEM=XMDSTPUT\n//LINK EXEC PGM=IEWL,COND=(0,NE),\n//   PARM='LET,LIST,MAP,NCAL,XREF,AC(1),AMODE(24),RMODE(24)'\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=XMEM.LOAD,DISP=SHR\n//OBJECT   DD DSN=&&SYSLIN,DISP=(OLD,DELETE)\n//SYSLMOD  DD DSN=XMEM.LOAD(XMDSMAIN),DISP=SHR\n//SYSLIN   DD *\n ENTRY XMDSMAIN\n INCLUDE OBJECT\n NAME XMDSMAIN(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE690": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x04$\\x7f\\x01\\x04$\\x7f\\x10E\\x00X\\x00X\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-09-03T00:00:00", "modifydate": "2004-09-03T10:45:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "CBT-467"}, "text": "//***FILE 690 is from Martin Kline, and contains a cross memory     *   FILE 690\n//*           storage browser called XMDSMAIN or MINDRDR.           *   FILE 690\n//*                                                                 *   FILE 690\n//*           email:  martin_kline@americancentury.com              *   FILE 690\n//*                                                                 *   FILE 690\n//*     This is the documentation for the cross-memory browser      *   FILE 690\n//*     (originally called MINDRDR) from Martin Kline.              *   FILE 690\n//*                                                                 *   FILE 690\n//*     The source originated in the mid 1980's, so it could        *   FILE 690\n//*     possibly use some updates. It was written as a tool to      *   FILE 690\n//*     help in the design and implementation of several major      *   FILE 690\n//*     applications, including a replacement for TCAM TSO          *   FILE 690\n//*     (without VTAM), and a complete report management            *   FILE 690\n//*     subsystem.                                                  *   FILE 690\n//*                                                                 *   FILE 690\n//*     The tool allows a user to browse through any address        *   FILE 690\n//*     space from the convenience of their own TSO session.        *   FILE 690\n//*     Obviously, this has some security risks, and should         *   FILE 690\n//*     only be used by responsible persons. When it was first      *   FILE 690\n//*     written, several major security holes were found,           *   FILE 690\n//*     including the availability of passwords in various          *   FILE 690\n//*     control blocks.  Most of those security holes have          *   FILE 690\n//*     since been fixed.                                           *   FILE 690\n//*                                                                 *   FILE 690\n//*     The XMDSMAIN program checks the logon proc name to see      *   FILE 690\n//*     if the user should be allowed to run the program. If        *   FILE 690\n//*     not, it simply exits.                                       *   FILE 690\n//*                                                                 *   FILE 690\n//*     Installation:                                               *   FILE 690\n//*                                                                 *   FILE 690\n//*     All of the source, JCL and macro members are contained      *   FILE 690\n//*     in this PDS.  Determine which load library is to receive    *   FILE 690\n//*     the XMDSMAIN module.  Member $$ASM is the JCL to            *   FILE 690\n//*     assemble the source members and to build an authorized      *   FILE 690\n//*     load module. Add a job card. Change the input and output    *   FILE 690\n//*     datasets, and run it.                                       *   FILE 690\n//*                                                                 *   FILE 690\n//*     Move the resulting load module to an authorized linklist    *   FILE 690\n//*     library.  (You really didn't think you could do this        *   FILE 690\n//*     without some sort of authorization, did you?)  If you       *   FILE 690\n//*     prefer to use a user SVC to change the APF authorization    *   FILE 690\n//*     dynamically, then find all of the @AUTH macro references    *   FILE 690\n//*     in the source, and change them to call your SVC.            *   FILE 690\n//*                                                                 *   FILE 690\n//*     Add the XMDSMAIN program to the IKJTSOxx member of          *   FILE 690\n//*     SYS1.PARMLIB as an authorized command.                      *   FILE 690\n//*                                                                 *   FILE 690\n//*     Usage:                                                      *   FILE 690\n//*                                                                 *   FILE 690\n//*     Invoke the program from anywhere in TSO/ISPF. ISPF is       *   FILE 690\n//*     not required.                                               *   FILE 690\n//*                                                                 *   FILE 690\n//*     Assigned keys are:                                          *   FILE 690\n//*                                                                 *   FILE 690\n//*       PF1  - Help                                               *   FILE 690\n//*       PF3  - End                                                *   FILE 690\n//*       PF5  - Repeat find                                        *   FILE 690\n//*       PF7  - Scroll backward                                    *   FILE 690\n//*       PF8  - Scroll foreward                                    *   FILE 690\n//*       PF11 - Pick up address from cursor and show that          *   FILE 690\n//*              storage                                            *   FILE 690\n//*                                                                 *   FILE 690\n//*       FIND command - FIND or F  'string' or x'string'           *   FILE 690\n//*                      Searches up to 16 meg of storage           *   FILE 690\n//*                      Can take a long time if storage not        *   FILE 690\n//*                      allocated.                                 *   FILE 690\n//*                                                                 *   FILE 690\n//*       LOCATE command - LOCATE or L   block-name                 *   FILE 690\n//*                        Locates and displays various control     *   FILE 690\n//*                        blocks.                                  *   FILE 690\n//*                        Use PF1 to see a list of supported       *   FILE 690\n//*                        blocks.                                  *   FILE 690\n//*                                                                 *   FILE 690\n//*     Fields:                                                     *   FILE 690\n//*                                                                 *   FILE 690\n//*       ADDRESS   - Current address. Overtype to show a           *   FILE 690\n//*                   specific location                             *   FILE 690\n//*       MODE      - Addressing mode. D = 24-bit mode,             *   FILE 690\n//*                   X = 31-bit mode                               *   FILE 690\n//*       ASID      - Decimal ASID of displayed address space.      *   FILE 690\n//*                   Overtype to change ASIDs                      *   FILE 690\n//*       JOBNAME   - Job name of displayed address space.          *   FILE 690\n//*                   Overtype to change.                           *   FILE 690\n//*                                                                 *   FILE 690\n//*     Displayed storage cannot be altered. Use TAB key to         *   FILE 690\n//*     move to a field before pressing PF11 to link to that        *   FILE 690\n//*     address.                                                    *   FILE 690\n//*                                                                 *   FILE 690\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@RETURN": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00\\x14\\x00\\x14\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 20, "newlines": 20, "modlines": 0, "user": "MKLINE"}, "text": "         MACRO\n&NAME    @RETURN\n         GBLC  &CORE,&SPL\n&NAME    LA    R0,&CORE                SAVEAREA LENGTH\n         AIF   ('&SPL' EQ '0').LABL01\n         LA    R1,&SPL                 LOAD SUBPOOL\n         SLL   R1,24                   SHIFT 24-BITS LEFT\n         OR    R0,R1                   PUT SUBPOOL INTO R0\n.LABL01  ANOP\n         LR    R1,R13                  SAVEAREA ADDRESS\n         L     R13,4(,R13)             RESTORE SIGHER SAVE AREA\n         LR    R5,R15                  SAVE RETURN CODE\n         FREEMAIN R,LV=(0),A=(1)       FREE STORAGE\n&CORE    SETC  '0'\n&SPL     SETC  '0'\n         LR    R15,R5                  RESTORE RETURN CODE\n         LM    R0,R12,20(R13)          RESTORE REGISTERS 0-12\n         L     R14,12(,R13)            RESTORE REGISTER 14\n         BR    R14                     RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@SAVE": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00#\\x00#\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 35, "newlines": 35, "modlines": 0, "user": "MKLINE"}, "text": "         MACRO\n&NAME    @SAVE &BASE=R12,&BASE2=0,&LV=0,&SP=0\n         GBLC  &LABEL,&CORE,&SPL\n&NAME    CSECT\n         USING *,R15                   ESTABLISH TEMPORARY BASE\n&LABEL   SETC  '@@00'.'&SYSNDX'\n         B     &LABEL                  BRANCH PAST MODULE ID\n         DC    AL1(&LABEL-*)\n         DC    CL9'&NAME '\n         DC    CL8'&SYSDATE'\n&LABEL   STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    &BASE,R15               LOAD BASE REGISTER\n         AIF   ('&BASE2' EQ '0').LABL01\n         LA    &BASE2,2048(,&BASE)     ESTABLISH\n         LA    &BASE2,2048(,&BASE2)    2ND BASE REGISTER\n         DROP  R15                     DROP TEMPORARY BASE\n         USING &NAME,&BASE,&BASE2      DEFINE BASE REGISTERS\n         AGO   .LABL02\n.LABL01  DROP  R15                     DROP TEMPORARY BASE\n         USING &NAME,&BASE             DEFINE BASE REGISTER\n.LABL02  ANOP\n&CORE    SETC  '&LV'.'+72'\n         LA    R0,&CORE                SAVEAREA LENGTH\n         AIF   ('&SP' EQ '0').LABL03\n         LA    R1,&SP                  LOAD SUBPOOL\n         SLL   R1,24                   SHIFT 24-BITS LEFT\n         OR    R0,R1                   PUT SUBPOOL INTO R0\n.LABL03  ANOP\n         GETMAIN R,LV=(0)              OBTAIN STORAGE\n&SPL     SETC  '&SP'\n         ST    R13,4(,R1)              SET UP BACKWARD\n         ST    R1,8(,R13)              AND FORWARD POINTERS\n         LM    R0,R1,20(R13)           RESTORE R0-R1\n         L     R13,8(,R13)             POINT TO NEW SAVEAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMDSECT": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00x\\x00x\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 120, "newlines": 120, "modlines": 0, "user": "MKLINE"}, "text": ".* MEMDSECT - COMMON WORK AREA DSECT FOR CROSS-MEMORY BROWSER\n.* AUTHOR   - MARTIN KLINE\n.*\n         MACRO\n         MEMDSECT\nMEMDSECT DSECT\nMLINE1   DS   CL132\n         ORG  MLINE1\n         DS   XL1\n         DC   CL12'ADDRESS --->'\n         DS   XL1\nMADDR    DC   CL8'00000000'\n         DS   XL1\n         DC   CL9'MODE --->'\n         DS   XL1\nMMODE    DC   CL1'D'\n         DS   XL1\n         DC   CL9'ASID --->'\n         DS   XL1\nMASID    DC   CL4'0000'\n         DS   XL1\n         DC   CL12'JOBNAME --->'\n         DS   XL1\nMJOB     DC   CL8' '\n         DS   XL1\n         ORG\nMLINE2   DS   CL132\n         ORG  MLINE2\n         DS   XL1\n         DS   CL12'COMMAND --->'\n         DS   XL1\n         DS   CL64\n         DS   XL1\n         ORG\nMLINE3   DS   CL132\nMLINE4   DS   0CL132\n         DS   XL1\nMLADDR   DS   CL8\n         DS   XL1\nMLKEY    DS   CL2\n         DS   XL1\nMLHEX1   DS   CL8\n         DS   XL2\nMLHEX2   DS   CL8\n         DS   XL2\nMLHEX3   DS   CL8\n         DS   XL2\nMLHEX4   DS   CL8\n         DS   XL2\nMLCHAR16 DS   CL18\n         ORG  MLCHAR16\nMLHEX5   DS   CL8\n         DS   XL2\nMLHEX6   DS   CL8\n         DS   XL2\nMLHEX7   DS   CL8\n         DS   XL2\nMLHEX8   DS   CL8\n         DS   XL2\nMLCHAR32 DS   CL34\n         ORG\nMLINE5   DS   CL132\nMLINE6   DS   CL132\nMLINE7   DS   CL132\nMLINE8   DS   CL132\nMLINE9   DS   CL132\nMLINE10  DS   CL132\nMLINE11  DS   CL132\nMLINE12  DS   CL132\nMLINE13  DS   CL132\nMLINE14  DS   CL132\nMLINE15  DS   CL132\nMLINE16  DS   CL132\nMLINE17  DS   CL132\nMLINE18  DS   CL132\nMLINE19  DS   CL132\nMLINE20  DS   CL132\nMLINE21  DS   CL132\nMLINE22  DS   CL132\nMLINE23  DS   CL132\nMLINE24  DS   CL132\nMLINE25  DS   CL132\nMLINE26  DS   CL132\nMLINE27  DS   CL132\nMLINE28  DS   CL132\nMLINE29  DS   CL132\nMLINE30  DS   CL132\nMLINE31  DS   CL132\nMLINE32  DS   CL132\nMLINE33  DS   CL132\nMLINE34  DS   CL132\nMLINE35  DS   CL132\nMLINE36  DS   CL132\nMLINE37  DS   CL132\nMLINE38  DS   CL132\nMLINE39  DS   CL132\nMLINE40  DS   CL132\nMLINE41  DS   CL132\nMLINE42  DS   CL132\nMLINE43  DS   CL132\nMLINE44  DS   CL132\nMLINE45  DS   CL132\nMLINE46  DS   CL132\nMLINE47  DS   CL132\nMLINE48  DS   CL132\nMLINE49  DS   CL132\nMLINE50  DS   CL132\nMLINE51  DS   CL132\nMLINE52  DS   CL132\nMLINE53  DS   CL132\nMLINE54  DS   CL132\nMLINE55  DS   CL132\nMLINE56  DS   CL132\nMLINE57  DS   CL132\nMLINE58  DS   CL132\nMLINE59  DS   CL132\nMLINE60  DS   CL132\nMLINE61  DS   CL132\nMLINE62  DS   CL132\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMWORK": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00/\\x00/\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 47, "newlines": 47, "modlines": 0, "user": "MKLINE"}, "text": ".* MEMWORK  - COMMON WORK AREA DSECT FOR CROSS-MEMORY BROWSER\n.* AUTHOR   - MARTIN KLINE\n.*\n         MACRO\n         MEMWORK\nMEMWORK  DSECT\nDWORD    DS   D\nASCBPTR  DS   F\nMAPPTR   DS   F\nADDRESS  DS   F\nMAXADDR  DS   F\nDATALEN  DS   F\nMSPIESV  DS   F\nTERMATTR DS   F\nPRMSIZE  DS   H\nALTSIZE  DS   H\nSCRSIZE  DS   H\nHOME     DS   H\nROWS     DS   H\nCOLS     DS   H\nCURSOR   DS   H\nWORK8    DS   XL8,XL1\nWORK16   DS   XL16\nMWORK32  DS   XL32\nWORK64   DS   XL64\nWORK256  DS   XL256\nFINDSTRL DS   XL1\nFINDSTR  DS   CL64\nCOMMAND  DS   CL64\nMODE     DS   CL1\nSSARFLAG DS   XL1\nAID      DS   XL1\nPF1      EQU  C'1'\nPF2      EQU  C'2'\nPF3      EQU  C'3'\nPF4      EQU  C'4'\nPF5      EQU  C'5'\nPF6      EQU  C'6'\nPF7      EQU  C'7'\nPF8      EQU  C'8'\nPF9      EQU  C'9'\nPF10     EQU  X'7A'\nPF11     EQU  X'7B'\nPF12     EQU  X'7C'\nENTER    EQU  X'7D'\nWORKSIZE EQU  *-MEMWORK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REG": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00\\x13\\x00\\x13\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 19, "newlines": 19, "modlines": 0, "user": "MKLINE"}, "text": "         MACRO\n         REG\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSCMD": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x016\\x016\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 310, "newlines": 310, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSCMD  - COMMAND PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSCMD  CSECT\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING XMDSCMD,R12\n         GETMAIN RU,LV=72\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING MEMWORK,R10\n         CLI   AID,PF5\n         BE    FIND\n         LA    R9,COMMAND\n         LA    R8,L'COMMAND\n*\nFIND1ST  CLI   0(R9),C' '\n         BNE   GOT1ST\n*\n         LA    R9,1(,R9)\n         BCT   R8,FIND1ST\n         B     EXIT\n*\nGOT1ST   SH    R8,=H'2'\n         BNH   EXIT\n         LA    R7,1(,R9)\n         CLI   0(R9),C'+'\n         BE    PLUS\n*\n         CLI   0(R9),C'-'\n         BE    MINUS\n*\n         LA    R7,2(,R9)\n         OC    0(2,R9),=8C' '\n         CLC   0(2,R9),=C'L '\n         BE    LOCATE\n*\n         CLC   0(2,R9),=C'F '\n         BE    FIND\n*\n         SH    R8,=H'2'\n         BNH   EXIT\n         LA    R7,4(,R9)\n         OC    0(4,R9),=8C' '\n         CLC   0(4,R9),=C'LOC '\n         BE    LOCATE\n*\n         SH    R8,=H'1'\n         BNH   EXIT\n*\n         LA    R7,5(,R9)\n         OC    0(5,R9),=8C' '\n         CLC   0(5,R9),=C'FIND '\n         BE    FIND\n*\n         SH    R8,=H'2'\n         BNH   EXIT\n*\n         LA    R7,7(,R9)\n         OC    0(7,R9),=8C' '\n         CLC   0(7,R9),=C'LOCATE '\n         BE    LOCATE\n         BNE   EXIT\n*\nFIND     CALL  XMDSFIND\n         B     EXIT\n*\nLOCATE   OC    COMMAND,=64C' '\n         LR    R9,R7\n*\nFIND2ND  CLI   0(R9),C' '\n         BNE   GOT2ND\n         LA    R9,1(,R9)\n         BCT   R8,FIND2ND\n         B     EXIT\n*\nGOT2ND   LA    R5,CMDTABLE\n         XR    R4,R4\n         XR    R3,R3\n*\nLOCLOOP  ICM   R4,1,0(R5)\n         BZ    EXIT\n         CR    R4,R8\n         BNL   LOCSKIP\n         ICM   R3,7,1(R5)\n         CLC   0(0,R9),4(R5)\n         EX    R4,*-6\n         BER   R3\n*\nLOCSKIP  LA    R5,5(R4,R5)\n         B     LOCLOOP\n*\nLOCPSA   XC    ADDRESS,ADDRESS\n         B     EXIT\n*\nLOCCVT   MVC   ADDRESS,16\n         B     EXIT\n*\nLOCSMCA  L     R1,16\n         MVC   ADDRESS,196(R1)\n         B     EXIT\n*\nLOCASVT  L     R1,16\n         MVC   ADDRESS,556(R1)\n         B     EXIT\n*\nLOCSMCT  L     R1,16\n         MVC   ADDRESS,604(R1)\n         B     EXIT\n*\nLOCASMVT L     R1,16\n         MVC   ADDRESS,704(R1)\n         B     EXIT\n*\nLOCTRACE MVC   ADDRESS,84\n         B     EXIT\n*\nLOCPCCA  MVC   ADDRESS,520\n         B     EXIT\n*\nLOCLCCA  MVC   ADDRESS,528\n         B     EXIT\n*\nLOCLOCKS LA    R1,640\n         ST    R1,ADDRESS\n         B     EXIT\n*\nLOCJESCT L     R1,16\n         MVC   ADDRESS,296(R1)\n         B     EXIT\n*\nLOCPVT   L     R1,16\n         MVC   ADDRESS,356(R1)\n         B     EXIT\n*\nLOCCSA   L     R1,16\n         MVC   ADDRESS,416(R1)\n         B     EXIT\n*\nLOCAPF   L     R1,16\n         MVC   ADDRESS,484(R1)\n         B     EXIT\n*\nLOCASCB  MVC   ADDRESS,ASCBPTR\n         B     EXIT\n*\nLOCASXB  L     R1,ASCBPTR\n         MVC   ADDRESS,108(R1)\n         B     EXIT\n*\nLOCTSB   L     R1,ASCBPTR\n         MVC   ADDRESS,60(R1)\n         B     EXIT\n*\nLOCCSCB  L     R1,ASCBPTR\n         MVC   ADDRESS,56(R1)\n         B     EXIT\n*\nLRCTTCB  L     R1,ASCBPTR\n         MVC   ADDRESS,124(R1)\n         B     EXIT\n*\nLOCOUCB  L     R1,ASCBPTR\n         MVC   ADDRESS,144(R1)\n         B     EXIT\n*\nLOCOUXB  L     R1,ASCBPTR\n         MVC   ADDRESS,148(R1)\n         B     EXIT\n*\nLOCOUSB  B     EXIT\n*\nLOCTCB1  L     R1,ASCBPTR\n         L     R1,108(,R1)\n         LA    R1,4(,R1)\n         CALL  XMDSMVCP\n         ST    R1,ADDRESS\n         B     EXIT\n*\nLTCBLAST L     R1,ASCBPTR\n         L     R1,108(,R1)\n         LA    R1,8(,R1)\n         CALL  XMDSMVCP\n         ST    R1,ADDRESS\n         B     EXIT\n*\nLOCACEE  L     R1,ASCBPTR\n         L     R1,108(,R1)\n         LA    R1,200(,R1)\n         CALL  XMDSMVCP\n         ST    R1,ADDRESS\n         B     EXIT\n*\nLOCRB    B     EXIT\nLOCTIOT  B     EXIT\nLOCDEBQ  B     EXIT\nLOCTCT   B     EXIT\nLOCJSCB  B     EXIT\n*\nLSVCTABL L     R1,16\n         L     R1,200(,R1)\n         MVC   ADDRESS,132(R1)\n         B     EXIT\n*\nPLUS     DS    0H\nMINUS    DS    0H\n         OC    COMMAND,=64C' '\n         LR    R2,R9\n         LR    R9,R7\n*\nPLUS2    CLI   0(R9),C' '\n         BNE   PLUS3\n         LA    R9,1(,R9)\n         BCT   R8,PLUS2\n         B     EXIT\n*\nPLUS3    LR    R7,R9\nPLUS4    CLI   0(R7),C' '\n         BE    PLUS5\n         CLI   0(R7),C'%'\n         BE    PLUS5\n         LA    R7,1(,R7)\n         BCT   R8,PLUS4\n*\nPLUS5    SR    R7,R9\n         CH    R7,=H'8'\n         BH    EXIT\n         MVC   WORK8,=8C'0'\n         LA    R1,WORK8+8\n         SR    R1,R7\n         BCTR  R7,0\n         MVC   0(0,R1),0(R9)\n         EX    R7,*-6\n         TR    WORK8(8),TRCHAR\n         PACK  DWORD(5),WORK8(9)\n         L     R1,DWORD\n         L     R0,ADDRESS\n         CLI   0(R2),C'+'\n         BE    PLUS6\n         SR    R0,R1\n         ST    R0,ADDRESS\n         B     PLUS7\n*\nPLUS6    AR    R0,R1\n         ST    R0,ADDRESS\n*\nPLUS7    LA    R1,1(R7,R9)\n         CLI   0(R1),C'%'\n         BNE   EXIT\n*\n         L     R1,ADDRESS\n         CALL  XMDSMVCP\n         ST    R1,ADDRESS\n         B     EXIT\n*\nEXIT     MVI   COMMAND,C' '\n         MVC   COMMAND+1(L'COMMAND-1),COMMAND\n         LR    R3,R13\n         L     R13,4(,R13)\n         STM   R15,R1,16(R13)\n         FREEMAIN RU,LV=72,A=(3)\n         LM    R14,R12,12(R13)\n         BR    R14\n*\nTRCHAR   EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TRCHAR+C'0'\n         DC    X'00010203040506070809'\n         ORG\n         LTORG\n*\n         ENTRY CMDTABLE\nCMDTABLE DS    0F\n         DC    AL1(1),AL3(LOCPSA),C'0 '\n         DC    AL1(2),AL3(LOCRB),C'RB '\n         DC    AL1(3),AL3(LOCTSB),C'TSB '\n         DC    AL1(3),AL3(LOCTCT),C'TCT '\n         DC    AL1(3),AL3(LOCPSA),C'PSA '\n         DC    AL1(3),AL3(LOCCVT),C'CVT '\n         DC    AL1(3),AL3(LOCPVT),C'PVT '\n         DC    AL1(3),AL3(LOCCSA),C'CSA '\n         DC    AL1(3),AL3(LOCAPF),C'APF '\n         DC    AL1(4),AL3(LOCASCB),C'ASCB '\n         DC    AL1(4),AL3(LOCASXB),C'ASXB '\n         DC    AL1(4),AL3(LOCCSCB),C'CSCB '\n         DC    AL1(4),AL3(LOCOUCB),C'OUCB '\n         DC    AL1(4),AL3(LOCOUXB),C'OUXB '\n         DC    AL1(4),AL3(LOCOUSB),C'OUSB '\n         DC    AL1(4),AL3(LOCTCB1),C'TCB1 '\n         DC    AL1(4),AL3(LOCACEE),C'ACEE '\n         DC    AL1(4),AL3(LOCTIOT),C'TIOT '\n         DC    AL1(4),AL3(LOCDEBQ),C'DEBQ '\n         DC    AL1(4),AL3(LOCJSCB),C'JSCB '\n         DC    AL1(4),AL3(LOCSMCA),C'SMCA '\n         DC    AL1(4),AL3(LOCASVT),C'ASVT '\n         DC    AL1(4),AL3(LOCSMCT),C'SMCT '\n         DC    AL1(4),AL3(LOCPCCA),C'PCCA '\n         DC    AL1(4),AL3(LOCLCCA),C'LCCA '\n         DC    AL1(5),AL3(LOCJESCT),C'JESCT '\n         DC    AL1(5),AL3(LOCASMVT),C'ASMVT '\n         DC    AL1(5),AL3(LOCTRACE),C'TRACE '\n         DC    AL1(5),AL3(LOCLOCKS),C'LOCKS '\n         DC    AL1(6),AL3(LRCTTCB),C'RCTTCB '\n         DC    AL1(7),AL3(LTCBLAST),C'TCBLAST '\n         DC    AL1(8),AL3(LSVCTABL),C'SVCTABLE '\n         DC    AL1(0)\n         MEMWORK\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSFIND": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00\\xd8\\x00\\xd8\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 216, "newlines": 216, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSFIND - FIND COMMAND PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSFIND CSECT\n         STM   R14,R12,12(R13)         SAVE REGS\n         LR    R12,R15                 SET UP BASE\n         USING XMDSFIND,R12\n         GETMAIN RU,LV=72              GET SAVE AREA\n         ST    R13,4(,R1)              CHAIN\n         ST    R1,8(,R13)                    SAVE\n         LR    R13,R1                             AREAS\n         USING MEMWORK,R10             COMMON AREA ADDRESSABILITY\n         MVC   MAXADDR,=X'00FFFFFF'    SET LIMIT FOR SEARCH AREA\n         CLI   MODE,C'X'               EXTENDED ADDRESSING ?\n         BNE   NOMODEX                 NO - GO ON\n*\n         L     R1,ADDRESS              PICK UP CURRENT ADDRESS\n         AL    R1,=F'16777216'         ADD 16 MEG\n         ST    R1,MAXADDR              THAT'S THE MAX ADDRESS\n         LA    R1,NOMODEX              WHERE TO GO\n         ICM   R1,8,=X'80'             31-BIT MODE\n         BSM   R0,R1                   SWITCH TO 31-BIT MODE\n*\nNOMODEX  CLI   AID,PF5                 REPEAT FIND ?\n         BE    REPEAT                  YES - REPEAT\n         LA    R1,COMMAND              POINT TO COMMAND AREA\n         LA    R2,L'COMMAND            GET LENGTH OF COMMAND AREA\n*\nSKIP1    CLI   0(R1),C' '              LOOK FOR COMMAND\n         BNE   AT1                     FOUND IT\n         LA    R1,1(,R1)               SKIP OVER BLANK\n         BCT   R2,SKIP1                LOOP TO FIND COMMAND\n         B     EXIT                    NONE - EXIT\n*\nAT1      CH    R2,=H'5'                AT LEAST 5 CHARACTERS LEFT ?\n         BL    EXIT                    NO - EXIT\n         LA    R0,1                    ASSUME 'F' COMMAND LENGTH\n         CLC   0(2,R1),=C'F '          IS IT JUST 'F' ?\n         BE    ATFIND                  YES - GO ON\n         CH    R2,=H'8'                AT LEAST 8 CHARACTERS LEFT ?\n         BL    EXIT                    NO - EXIT\n         LA    R0,4                    ASSUME 'FIND' COMMAND LENGTH\n         CLC   0(5,R1),=C'FIND '       IS IT 'FIND' COMMAND ?\n         BNE   EXIT                    NO - EXIT\n*\nATFIND   AR    R1,R0                   POINT PAST 'F' OR 'FIND'\n         SR    R2,R0                   REDUCE REMAINING LENGTH\n*\nSKIP2    CLI   0(R1),C' '              LOOK FOR START OF SEARCH STRING\n         BNE   AT2                     GOT IT - GO ON\n         LA    R1,1(,R1)               BUMP POINTER\n         BCT   R2,SKIP2                LOOP\n         B     EXIT                    NO STRING - EXIT\n*\nAT2      CH    R2,=H'3'                AT LEAST 3 CHARACTER LEFT ?\n         BL    EXIT                    NO - EXIT\n         CLC   0(2,R1),=X'E77D'        IS IT HEX FORM - X'???'\n         BE    ATX                     YES - HANDLE THAT\n         CLC   0(2,R1),=X'A77D'        HOW ABOUT LOWER CASE ?\n         BE    ATX                     YES - HANDLE THAT\n         CLI   0(R1),X'7D'             IS IT QUOTED STRING ?\n         BNE   EXIT                    NO - EXIT\n*\n         LA    R3,1(,R1)               POINT PAST THE QUOTE\n         BCTR  R2,0                    REDUCE REMAINING LENGTH\n         BAL   R14,GETLEN              GO GET STRING LENGTH\n*\n         BCTR  R3,0                    REDUCE LENGTH FOR EXECUTE\n         MVC   FINDSTR(0),1(R1)        EXCUTED MOVE\n         EX    R3,*-6                  COPY STRING\n         STC   R3,FINDSTRL             SAVE EXECUTE LENGTH\n         L     R8,ADDRESS              PICK UP START ADDRESS\n         B     SEARCH                  GO START SEARCHING\n*\nATX      LA    R3,2(,R1)               SKIP OVER HEX FORMAT\n         SH    R2,=H'2'                REDUCE REMAINING LENGTH\n         BAL   R14,GETLEN              GO GET STRING LENGTH\n         CH    R3,=H'30'               MORE THAN 30 CHARACTERS ?\n         BH    EXIT                    YES - EXIT\n         LA    R0,1                    CHECK FOR\n         NR    R0,R3                             EVEN NUM CHARACTERS\n         BO    EXIT                    NO - EXIT\n         BCTR  R3,0                    REDUCE LENGTH FOR EXCUTE\n         EX    R3,MOVEWK32             MOVE TO WORK AREA\n         OC    MWORK32(30),=30C' '     UPPER CASE\n         EX    R3,TRANWK32             TRANSLATE FOR CONVERSION\n         PACK  FINDSTR(8),MWORK32(15)       CONVERT 7 CHARACTERS\n         PACK  FINDSTR+7(8),MWORK32+14(15)  CONVERT 7 MORE\n         PACK  FINDSTR+14(2),MWORK32+28(3)  CONVERT 1 MORE\n         SRL   R3,1                    DIVIDE LENGTH BY 2\n         STC   R3,FINDSTRL             SAVE IT\n         L     R8,ADDRESS              POINT TO START OF SEARCH\n         B     SEARCH                  GO FIND DATA\n*\nGETLEN   LR    R0,R3                   COPY POINTER\nLENLOOP  CLI   0(R3),X'7D'             ENDING QUOTE ?\n         BE    GOTLEN                  YES - GO ON\n         LA    R3,1(,R3)               BUMP POINTER\n         BCT   R2,LENLOOP              REDUCE LENGTH AND LOOP\n         B     EXIT                    END OF AREA - EXIT\n*\nGOTLEN   SR    R3,R0                   CALCULATE LENGTH OF STRING\n         BR    R14                     RETURN\n*\nREPEAT   CLI   FINDSTRL,64             IS FIND STRING TOO LONG ?\n         BH    EXIT                    YES - EXIT\n         L     R8,ADDRESS              POINT TO LAST ADDRESS\n         LA    R8,1(,R8)               SKIP ONE BYTE\n         B     SEARCH                  THEN START SEARCH\n*\n***RCH   @AUTH\nSEARCH   MODESET MODE=SUP              SUPERVISOR STATE\n***      @NOAUTH\n         ESTAE ESTAEXIT,CT             SET UP ESTAE\n         MVI   SSARFLAG,X'00'          RESET SSAR FLAG\n         LA    R7,256                  LENGTH IS 256\n         LA    R6,WORK256              COPY AREA ADDRESS\n*\nMVCP     CLI   SSARFLAG,X'FF'          IS SSAR SET ?\n         BE    INSSAR                  YES - GO ON\n         EPAR  1                       GET PRIMARY ASID\n         SSAR  1                       SET SECONDARY = PRIMARY\n         LA    R1,1\n         AXSET AX=(R1)\n         L     R1,ASCBPTR              POINT TO TARGET ASCB\n         USING ASCB,R1\n         LH    R0,ASCBASID             PICK UP TARGET ASID\n         SSAR  R0                      SET SECONDARY ASID\n         MVI   SSARFLAG,X'FF'          INDICATE SECONDARY ASID SET\n*\nINSSAR   XR    R1,R1                   CLEAR REG 1\n         MVCP  0(R7,R6),0(R8),R1       MOVE DATA TO PRIMARY STORAGE\n         IC    R1,FINDSTRL             GET STRING LENGTH\n         LA    R7,256                  AREA LENGTH = 256\n         SR    R7,R1                   MINUS STRING LENGTH\n         LA    R5,WORK256              POINT TO SCAN AREA\n         ALR   R8,R5\n         SLR   R8,R6                   RE-CALCULATE ADDRESS\n*\nCOMPARE  EX    R1,CLCWORK              CHECK FOR MATCH\n         BE    FOUND                   FOUND - GO ON\n         AL    R8,=F'1'                BUMP ADDRESS POINTER\n         LA    R5,1(,R5)               BUMP AREA POINTER\n         BCT   R7,COMPARE              LOOP FOR COMPARE\n         CL    R8,MAXADDR              AT END OF SEARCH AREA ?\n         BH    NOTFOUND                YES - NOT FOUND\n         LA    R7,256                  ANOTHER 256 TO GET\n         LA    R6,WORK256              POINT TO WORK AREA\n         SR    R7,R1                   SUBTRACE FROM LENGTH\n         AR    R6,R1                   AND BUMP POINTER\n         B     INSSAR                  GO GET MORE DATA\n*\nNOTAVAIL SRL   R8,11                   DROP OFF PAGE OFFSET\n         LA    R8,1(,R8)               NEXT PAGE\n         SLL   R8,11                   ADDRESS IS NOW NEXT PAGE\n         CL    R8,MAXADDR              AT END OF AREA ?\n         BH    NOTFOUND                YES - NOT FOUND\n         LA    R7,256                  SET LENGTH TO GET\n         LA    R6,WORK256              POINT TO AREA FOR DATA\n         B     MVCP                    GO MOVE MORE DATA\n*\nFOUND    ST    R8,ADDRESS              SAVE ADDRESS OF DATA\nNOTFOUND EPAR  R0                      GET PRIMARY ASID\n         SSAR  R0                      SET SECONDARY ASID\n         MVI   SSARFLAG,X'00'          SECONDARY NO LONGER SET\n         ESTAE 0                       REMOVE ESTAE\n         MODESET MODE=PROB             BACK TO PROBLEM STATE\n*\nEXIT     LA    R3,*+6                  POINT PAST BSM\n         BSM   R0,R3                   RETURN TO 24-BIT MODE\n         LR    R3,R13                  COPY SAVE AREA ADDRESS\n         L     R13,4(,R13)             UNCHAIN SAVE AREAS\n         STM   R15,R1,16(R13)          SAVE RETURN REGS IN SAVE AREA\n         FREEMAIN RU,LV=72,A=(R3)      RELEASE SAVE AREA STORAGE\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS\n         BR    R14                     GO BACK\n         USING SDWA,R1\n*\nESTAEXIT NOPR  R14\n         LM    R2,R12,SDWAGR02         RESTORE MY REGS\n         MVI   SSARFLAG,X'00'          NO LONGER IN SECONDARY MODE\n         MVC   DATALEN,SDWAABCC\n         MVC   DATALEN+3(1),SDWAICD1\n         CLC   SDWACMPC(3),=X'0C4000'  INTERCEPTED S0C4 ?\n         BE    ESTAEOK                 YES - GO ON\n         CLI   SDWAICD1,X'04'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'05'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'10'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'11'\n         BE    ESTAEOK\n         BR    R14\n*\nESTAEOK  LA    R2,NOTAVAIL\n         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,DUMP=NO\n         BR    R14\n*\nMOVEWK32 MVC   MWORK32(0),2(R1)\nTRANWK32 TR    MWORK32(0),TRCHAR\nCLCWORK  CLC   0(0,R5),FINDSTR\nTRCHAR   EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TRCHAR+C'0'\n         DC    C'0123456789'\n         ORG\n         LTORG\n*\n         MEMWORK\n         MEMDSECT\n         PRINT NOGEN\n         IHASDWA\n         IHAASCB\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSFORM": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x01%\\x01%\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 293, "newlines": 293, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSCMD  - FORMAT PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSFORM CSECT\n         STM   R14,R12,12(R13)         SAVE REGS\n         LR    R12,R15                 SET ADDRESSABILITY\n         USING XMDSFORM,R12\n         GETMAIN RU,LV=72              GET SAVE AREA\n         ST    R13,4(,R1)              CHAIN\n         ST    R1,8(,R13)                    SAVE\n         LR    R13,R1                             AREAS\n         USING MEMWORK,R10             ESTABLISH COMMON ADDRESSABILITY\n         L     R9,MAPPTR               POINT TO POINTER\n         L     R9,0(,R9)               POINT TO MAP\n         USING MEMDSECT,R9             MAKE IT ADDRESSABLE\n*\n         LA    R1,WORK8                POINT TO 8-BYTE AREA\n         L     R0,ADDRESS              PICK UP STORAGE ADDRESS\n         BAL   R14,HEXCNVT             CONVERT IT TO PRINTABLE\n         MVC   MADDR,WORK8             PUT RESULT IN DISPLAY AREA\n         L     R1,ASCBPTR              POINT TO ASCB\n         USING ASCB,R1\n         ICM   R2,15,ASCBJBNI          GET JOB NAME POINTER\n         BNZ   MOVEJOB                 IF AVAILABLE, GO ON\n*\n         ICM   R2,15,ASCBJBNS          ELSE POINT TO STC NAME\n         BNZ   MOVEJOB                 IF AVAILABLE, GO ON\n*\n         LA    R2,=8C' '               ELSE POINT TO BLANKS\nMOVEJOB  MVC   MJOB,0(R2)              PUT JOB NAME INTO DISPLAY\n         LH    R0,ASCBASID             GET ASID\n         DROP  R1                      LOSE THE ASCB\n         CVD   R0,DWORD                CONVERT ASID TO DECIMAL\n         UNPK  MASID,DWORD\n         OI    MASID+3,C'0'\n         MVC   MMODE,MODE              MOVE DECIMAL ASID TO DISPLAY\n*\n***      @AUTH\n         MODESET MODE=SUP              SWITCH STATE\n***      @NOAUTH\n*\n         CLI   MODE,C'X'               31-BIT ADDRESSING ?\n         BNE   SETESTAE                NO - GO ON\n         LA    R3,SETESTAE             SET WHERE TO GO\n         ICM   R3,8,=X'80'             SET 31-BIT BIT\n         BSM   R0,R3                   SWITCH TO 31-BIT MODE\n*\nSETESTAE ESTAE ESTAEXIT,CT             SET UP RECOVERY\n*\n         STCM  R1,15,MSPIESV           SAVE RESULTS\n         L     R8,ADDRESS              PICK UP STORAGE ADDRESS\n         SRL   R8,4                    DIVIDE BY 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SRL   R8,1                    NO - DIVIDE BY 2 MORE\n*\n         SLL   R8,4                    MULTIPLY BY 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SLL   R8,1                    NO - MULTIPLY BY 2 MORE\n*\n         LH    R7,ROWS                 GET NUMBER OF ROWS ON DISPLAY\n         SH    R7,=H'3'                MINUS TOP 3 ROWS\n         MVI   SSARFLAG,X'00'          SET NOT IN SSAR MODE\n         LH    R15,COLS                GET NUM COLUMNS ON DISPLAY\n         MH    R15,=H'3'               TIMES 3\n         LA    R9,0(R15,R9)            POINT PAST HEADINGS\n         USING MLINE4,R9               ESTABLISH LINE ADDRESSABILITY\n*\nLINELOOP LA    R0,0(,R8)               GET ADDRESS\n         LA    R1,WORK8                POINT TO WORK AREA\n         BAL   R14,HEXCNVT             CONVERT ADDRESS TO PRINTABLE\n         MVC   MLADDR,WORK8            MOVE ADDRESS TO DISPLAY\n         CLI   SSARFLAG,X'FF'          SSAR MODE ?\n         BE    INSSAR                  YES - GO ON\n*\n         EPAR  1                       GET PRIMARY ASID\n         SSAR  1                       SET SECONDARY ASID\n*\n         LA    R1,1                    INDEX = 1\n         AXSET AX=(R1)                 SET INDEX\n*\n         L     R1,ASCBPTR              POINT TO TARGET ASCB\n         USING ASCB,R1\n         LH    R0,ASCBASID             GET TARGET ASID\n         MVI   ESTAEXIT+1,X'0E'        CHANGE THE ESTAE EXIT\n         SSAR  0                       SWITCH TO SECONDARY MODE\n         MVI   ESTAEXIT+1,X'FE'        CHANGE THE ESTAE EXIT BACK\n         MVI   SSARFLAG,X'FF'          SET SSAR INDICATOR FLAG\n*\nINSSAR   XC    MLKEY,MLKEY             CLEAR KEY\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BNE   MOD5                    NO - ASSUME 132 COLUMNS\n         MVI   MLCHAR16,C'|'           MOVE LEADING CHAR TO CHARACTER\n         MVI   MLCHAR16+17,C'|'        MOVE TRAILING CHAR\n         LA    R6,4                    WILL GET 4 WORDS PER LINE\n         LA    R5,MLHEX1               POINT TO FIRST HEX FIELD\n         LA    R4,MLCHAR16+1           POINT TO FIRST CHAR FIELD\n         LA    R3,MWORK32              POINT TO 32-BYTE WORK AREA\n         B     GO                      GO ON\n*\nMOD5     MVI   MLCHAR32,C'|'           MOVE LEADING CHAR TO CHARACTER\n         MVI   MLCHAR32+33,C'|'        MOVE TRAILING CHARACTER\n         LA    R6,8                    WILL GET 8 WORDS PER LINE\n         LA    R5,MLHEX1               POINT TO FIRST HEX FIELD\n         LA    R4,MLCHAR32+1           POINT TO FIRST CHAR FIELD\n         LA    R3,MWORK32              POINT TO 32-BYTE WORK AREA\n*\nGO       XR    R0,R0                   CLEAR REG 0\n         LR    R1,R8                   COPY ADDRESS OF DATA\n         SRL   R1,4                    DIVIDE ADDRESS BY 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SRL   R1,1                    NO - DIVIDE BY ANOTHER 2\n*\n         LA    R1,1(,R1)               ADD ONE\n         SLL   R1,4                    MULTIPLY BY 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SLL   R1,1                    NO - MULTIPLE BY ANOTHER 2\n*\n         SR    R1,R8                   CALCULATE THE DIFFERENCE\n         MVI   ESTAEXIT+1,X'0E'        ALTER THE ESTAE\n         MVCP  MWORK32(R1),0(R8),0     MOVE THAT MANY BYTES\n         MVI   ESTAEXIT+1,X'FE'        RESTORE THE ESTAE\n         B     ADDRLOOP                GO FORMAT DATA\n*\nNOTAVAIL MVC   MLKEY,=C'NA'            SET KEY FIELD TO NOT AVAILABLE\nADDRLUP  MVC   0(8,R5),=8X'00'         SET AREA TO ZEROES\n         MVC   0(4,R4),=4C' '          SET DISPLAY AREA TO BLANKS\n         LA    R4,4(,R4)               BUMP CHARACTER AREA 4 BYTES\n         LA    R5,10(,R5)              BUMP HEX AREA 10 BYTES\n         BCT   R6,ADDRLUP              LOOP\n         B     BYLINE                  GO ON - LINE NOT AVAILABLE\n*\nADDRLOOP LR    R1,R5                   COPY HEX AREA POINTER\n         ICM   R0,15,0(R3)             GET 4 BYTES OF DATA\n         BAL   R14,HEXCNVT             CONVERT TO PRINTABLE\n*\n         MVC   0(4,R4),0(R3)           MOVE TO CHARACTER AREA\n         LA    R3,4(,R3)               BUMP DATA POINTER\n         LA    R4,4(,R4)               BUMP CHARACTER POINTER\n         LA    R5,10(,R5)              BUMP HEX POINTER\n         BCT   R6,ADDRLOOP             LOOP THROUGH DATA\n*\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BNE   MOD5T                   NO - ASSUME 132 COLUMNS\n*\n         TR    MLCHAR16,VALIDTRT       TRANSLATE PRINTABLE CHARS\n         B     *+10                    GO ON\n*\nMOD5T    TR    MLCHAR32,VALIDTRT       TRANSLATE 32 PRINTABLES\n         LH    R15,ROWS                GET NUMBER OF ROWS\n         SH    R15,=H'3'               MINUS 3 FOR HEADING\n         CR    R7,R15                  LAST LINE ?\n         BNE   BYLINE                  NO - GO ON\n*\n         L     R2,ADDRESS              PICK UP ADDRESS\n         SLL   R2,27                   JUST KEEP THE LAST 5 BITS\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BNE   *+8                     NO - GO ON\n         SLL   R2,1                    YES - JUST THE LAST 4 BITS\n*\n         LTR   R2,R2                   IS REG ZERO ?\n         BZ    BYLINE                  YES - NEW LINE\n*\n         SRDL  R2,29                   KEEP JUST 3 BITS\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BNE   *+8                     NO - GO ON\n         SRDL  R2,1                    YES - JUST KEEP 2 BITS\n*\n         SRL   R3,30\n         LA    R5,MLHEX1\n         LA    R4,MLCHAR16+1\n         CLC   COLS,=H'80'\n         BE    *+8\n         LA    R4,MLCHAR32+1\n*\n         LTR   R2,R2\n         BZ    ENDWDS\n*\nL1FIX1   MVC   0(8,R5),=CL8' '         MOVE BLANKS TO HEX FIELD\n         MVC   0(4,R4),=CL8' '         MOVE BLANKS TO CHAR FIELD\n         LA    R5,10(,R5)              SKIP OVER HEX FIELD\n         LA    R4,4(,R4)               SKIP CHAR FIELD\n         BCT   R2,L1FIX1               LOOP\n*\nENDWDS   LTR   R3,R3                   ANY MORE ?\n         BZ    BYLINE                  NO - DONE WITH LINE\n*\nL1FIX2   MVC   0(2,R5),=CL8' '         MOVE 2 BLANKS TO HEX FIELD\n         MVI   0(R4),C' '              MOVE 1 BLANK TO CHAR FIELD\n         LA    R5,2(,R5)               BUMP HEX POINTER\n         LA    R4,1(,R4)               BUMP CHAR POINTER\n         BCT   R3,L1FIX2               LOOP THROUGH ONE FIELD\n*\nBYLINE   AH    R9,COLS                 BUMP COLUMN POINTER\n         LA    R8,16(,R8)              BUMP ADDRESS POINTER\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n*\n         LA    R8,16(,R8)              NO - BUMP ADDRESS POINTER AGAIN\n         BCT   R7,LINELOOP             LOOP THROUGH LINES\n*\n         XC    MSPIESV,MSPIESV\n         EPAR  0                       GET PRIMARY ASID\n         SSAR  0                       RESET SECONDARY ASID\n*\n         MVI   SSARFLAG,X'00'          RESET SSAR FLAG\n***      @AUTH\n         MODESET MODE=PROB             BACK TO PROBLEM STATE\n***      @NOAUTH\n         ICM   R2,15,MSPIESV\n         ESTAE 0                       RESET ESTAE\n*\n         LA    R3,*+6                  POINT WHERE TO GO\n         BSM   R0,R3                   SWITCH TO 24-BIT MODE\n*\n         LR    R3,R13                  POINT TO SAVE AREA\n         L     R13,4(,R13)             UNCHAIN SAVE AREAS\n         STM   R15,R1,16(R13)          SAVE RETURN REGS\n         FREEMAIN RU,LV=72,A=(R3)      RELEASE MY SAVE AREA STORAGE\n         LM    R14,R12,12(R13)         RESTORE REGS\n         BR    R14                     GO BACK\n*\n         USING SDWA,R1\nESTAEXIT NOPR  R14                     ALTERABLE INSTRUCTION\n         LM    R2,R12,SDWAGR02         RESTORE MY REGS\n         MVI   ESTAEXIT+1,X'FE'        CHANGE ESTAE TO A BRANCH\n         MVI   SSARFLAG,X'00'          NOT IN SSAR\n         MVC   DATALEN,SDWAABCC\n         CLC   SDWACMPC,=X'0D5000'     S0D5 ABEND ?\n         BE    ESTAEOK                 YES - OK\n         CLI   SDWAICD1,X'04'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'05'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'10'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'11'\n         BE    ESTAEOK\n         BR    R14                     RETURN\n*\nESTAEOK  LA    R2,NOTAVAIL\n         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,DUMP=NO\n         BR    R14\n*\nHEXCNVT  LA    R15,8                   LENGTH TO CONVERT\nHLOOP    STC   R0,7(,R1)               SAVE ONE NIBBLE\n         SRL   R0,4                    SHIFT IT OFF\n         BCTR  R1,0                    BACK UP A BYTE\n         BCT   R15,HLOOP               LOOP THROUGH WORD\n         LA    R1,8(,R1)               POINT TO TARGET AREA\n         MVZ   0(8,R1),=8X'00'         SET ZONES TO ALL ZEROES\n         TR    0(8,R1),HTRTAB          CONVERT TO PRINTABLE HEX\n         BR    R14                     RETURN\n*\nSAVE0    DC    F'0'\nHTRTAB   DC    C'0123456789ABCDEF'\nVALIDTRT DC    256C'.'\n         ORG   VALIDTRT+C' '\n         DC    C' '\n         ORG   VALIDTRT+C'|'\n         DC    C'|'\n         ORG   VALIDTRT+X'3F'\n         DC    C'. <(+|&&'\n         ORG   VALIDTRT+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   VALIDTRT+C'`'\n         DC    C'`:#@''=\"'\n         ORG   VALIDTRT+X'81'\n         DC    X'818283848586878889'\n         ORG   VALIDTRT+X'91'\n         DC    X'919293949596979899'\n         ORG   VALIDTRT+X'A1'\n         DC    X'A1A2A3A4A5A6A7A8A9'\n         ORG   VALIDTRT+C'{'\n         DC    C'{ABCDEFGHI'\n         ORG   VALIDTRT+C'}'\n         DC    C'}JKLMNOPQR'\n         ORG   VALIDTRT+C'\\'\n         DC    C'\\.STUVWXYZ'\n         ORG   VALIDTRT+C'0'\n         DC    C'0123456789'\n         ORG\n         LTORG\n         MEMWORK\n         MEMDSECT\n         PRINT NOGEN\n         IHAASCB\n         IHASDWA\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XMDSHELP": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00K\\x00K\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 75, "newlines": 75, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSHELP - HELP PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSHELP @SAVE BASE=R12                NORMAL ENTRY\n         USING MEMWORK,R10             WORK AREA PASSED IN REG 10\n         GETMAIN RU,LV=16384           GET DISPLAY AREA\n*\n         LR    R11,R1                  COPY AREA ADDRESS\n         LR    R0,R1                   COPY IT AGAIN\n         L     R1,=F'6144'             GET LENGTH OF IT\n         XR    R14,R14                 CLEAR REG 14\n         XR    R15,R15                       AND 15\n         ICM   R15,8,=X'40'            INSERT A BLANK\n         MVCL  R0,R14                  MAKE ENTIRE AREA BLANKS\n*\n         LR    R9,R11                  COPY AREA POINTER\n         MVC   0(8,R9),=X'27F5401140401DF0'  3270 HEADING\n         CLC   PRMSIZE,ALTSIZE         PRIMARY = ALTERNATE ?\n         BE    *+8                     YES - GO ON\n         MVI   1(R9),X'7E'             NO - USE ALTERNATE\n         LA    R9,8(,R9)               POINT PAST PREFIX\n         MVC   0(41,R9),=C'THE FOLLOWING MAJOR COMMANDS ARE ALLOWED:'\n         AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         MVC   5(25,R9),=C'L | LOC | LOCATE    BLOCK'\n         AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         MVC   10(38,R9),=C'WHERE ''BLOCK'' IS ONE OF THE FOLLOWING:'\n         AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         L     R7,=V(CMDTABLE)         POINT TO COMMAND TABLE\n*\nCMDLOOP1 LA    R6,15(,R9)              POINT TO COMMAND\n         LA    R5,7                    LOOP LIMIT\n         XR    R1,R1                   CLEAR REG 1\n*\nCMDLOOP2 ICM   R1,1,0(R7)              GET COMMAND LENGTH\n         BZ    ENDCMDS                 IF ZERO, DONE\n*\n         MVC   0(0,R6),4(R7)           EXECUTED MOVE\n         EX    R1,*-6                  MOVE COMMAND TO DISPLAY\n         LA    R7,5(R1,R7)             POINT TO NEXT COMMAND\n         LA    R6,9(,R6)               POINT TO NEXT DISPLAY FIELD\n         BCT   R5,CMDLOOP2             LOOP THROUGH COMMANDS\n*\n         AH    R9,COLS                 POINT TO NEXT LINE\n         B     CMDLOOP1                LOOP\n*\nENDCMDS  AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         MVC   5(31,R9),=C'F | FIND   ''STRING'' | X''STRING'''\n         AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         MVC   0(36,R9),=C'THE FOLLOWING PF KEYS ARE SUPPORTED:'\n         AH    R9,COLS                 SKIP A LINE\n         AH    R9,COLS                 SKIP ANOTHER LINE\n         MVC   5(29,R9),=C'PF1 - HELP          PF3 - END'\n         AH    R9,COLS                 SKIP A LINE\n         MVC   5(35,R9),=C'PF5 - REPEAT FIND   PF7 - SCROLL UP'\n         AH    R9,COLS                 SKIP A LINE\n         MVC   5(55,R9),=C'PF8 - SCROOL DOWN   PF11 - LINK TO ADDRESS U+\n               NDER CURSOR'\n         AH    R9,COLS                 SKIP A LINE\n         SR    R9,R11                  CALCULATE DISPLAY LENGTH\n*\n         TPUT  (R11),(R9),FULLSCR      DISPLAY IT\n         TGET  (R11),(R9),ASIS         GET ANSWER\n         FREEMAIN RU,LV=16384,A=(R11)   FREE DISPLAY BUFFER\n         XR    R15,R15                 SET RETURN CODE\n         @RETURN ,                     GO BACK\n*\n         LTORG\n         MEMWORK\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSMAIN": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00n\\x00n\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 110, "newlines": 110, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSMAIN - MAIN ENTRY FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSMAIN @SAVE BASE=R12                SAVE REGISTERS, ETC.\n         TM    0(R1),X'80'             INVOKED AS COMMAND PROCESSOR?\n         BZ    CP                      YES, BRANCH\n*\nCALL     L     R1,0(,R1)               LOAD PARM ADDRESS\n         LH    R15,0(,R1)              LOAD PARM LENGTH\n         LA    R1,2(,R1)               POINT PAST LENGTH\n         B     GO                      BRANCH\n*\nCP       L     R1,0(,R1)               LOAD PARM ADDRESS\n         LH    R15,0(,R1)              LOAD PARM LENGTH\n         SH    R15,2(,R1)              SUBTRACT PARM OFFSET\n         SH    R15,=H'4'\n         AH    R1,2(,R1)               ADD OFFSET\n         LA    R1,4(,R1)               ADD 4 MORE\n*\nGO       LTR   R15,R15                 ANY PARM DATA?\n         BZ    CONT                    NO, BRANCH\n*\n         CLI   0(R1),X'97'             LOWERCASE 'P'\n         BE    EWP                     YES, IGNORE IT\n*\n         CLI   0(R1),X'D7'             UPPERCASE 'P'\n         BNE   CONT\n*\nEWP      MVI   PARM,C'P'               USE PRIMARY SCREEN SIZE\nCONT     DS    0H\n         USING PSA,R0                  PROVIDE PSA ADDRESSABILITY\n         GETMAIN RU,LV=WORKSIZE        GET STORAGE FOR WORKAREA\n         LR    R10,R1                  SAVE STORAGE ADDRESS\n         USING MEMWORK,R10             PROVIDE ADDRESSABILITY\n         L     R1,PSATOLD              LOAD TCB ADDRESS\n         L     R1,12(,R1)              LOAD TIOT ADDRESS\n         CLC   $SSG,16(R1)             $SSG LOGON PROC?\n         BNE   EXIT                    NO, EXIT\n*\n         LA    R2,PRMSIZE              POINT TO HALFWORD SAVE AREA\n         LA    R3,ALTSIZE              POINT TO HALFWORD SAVE AREA\n         LA    R4,TERMATTR             POINT TO ATTRIBUTE FIELD\n         GTTERM PRMSZE=(2),ALTSZE=(3),ATTRIB=(4)\n*\n         CLI   PARM,C'P'               USE PRIMARY SCREEN ONLY?\n         BNE   *+10                    NO, BRANCH\n*\n         MVC   ALTSIZE,PRMSIZE         ALTSIZE = PRMSIZE\n**\n         XR    1,1\n         IC    1,ALTSIZE               GET NUMBER OF ROWS\n         STH   1,ROWS                  SAVE IT\n         XR    15,15\n         IC    15,ALTSIZE+1            GET NUMBER OF COLUMNS\n         STH   15,COLS                 SAVE IT\n         XR    0,0\n         MR    0,15                    CALCULATE TOTAL SCREEN SIZE\n         STH   1,SCRSIZE               SAVE IT\n         MVC   HOME,=X'C15E'           ASSUME 80-COL HOME ADDRESS\n         CLC   COLS,=H'80'             IS IT 80 COLUMNS ?\n         BE    COLS80                  YES - GO ON\n         MVC   HOME,=X'C2D2'           NO - SET 132 COL HOME ADDRESS\nCOLS80   MVC   CURSOR,HOME             SET CURSOR LOCATION\n         MVI   FINDSTRL,X'FF'          SET LENGTH OF FIND STRING\n         CALL  XMDSMAP                 MAP THE DISPLAY SCREEN\n*\n         ST    R1,MAPPTR               SAVE MAP POINTER\n         L     R1,548                  LOAD ASCB ADDRESS\n         ST    R1,ASCBPTR              SAVE ASCB ADDRESS\n         XC    ADDRESS,ADDRESS         SET INITIAL ADDRESS TO ZERO\n         MVI   MODE,C'D'               SET INITIAL MODE TO 'DISPLAY'\n         STAX  STAXEXIT,USADDR=(10)    SET ATTENTION EXIT\n*\nREFORM   CALL  XMDSFORM                FORMAT OUTPUT BUFFER\n         CALL  XMDSTPUT                DISPLAY BUFFER\n         CLI   MODE,C'M'               MONITOR MODE?\n         BNE   READ                    NO, BRANCH\n*\n         STIMER WAIT,BINTVL=MWAIT      YES, WAIT\n         B     REFORM                  BRANCH\n*\nREAD     CALL  XMDSTGET                READ INPUT BUFFER\n         CLI   AID,X'F3'               PF3 HIT?\n         BE    EXIT                    YES, EXIT\n*\n         CALL  XMDSCMD                 PARSE POSSIBLE COMMAND\n         B     REFORM                  BRANCH\n*\nEXIT     TPUT  ERASE,L'ERASE,FULLSCR   CLEAR SCREEN\n         FREEMAIN RU,LV=WORKSIZE,A=(10) FREEMAIN THE WORK AREA\n         @RETURN ,                     EXIT\n*\nSTAXEXIT L     R15,8(,R1)              POINT TO WORK BUFFER\n         MVI   MODE-MEMWORK(15),C'D'   SET MODE TO 'DISPLAY'\n         XR    R15,R15                 RC=0\n         BR    R14                     RETURN\n*\n         EJECT\nMWAIT    DC    A(100)                  1-SECOND WAIT\nERASE    DC    X'27F540114040'\nTERMMSG  DC    C'INVALID TERMINAL SIZE '\n$SSG     DC    CL8'@TSOSYSP'\nPARM     DC    CL1'A'\n         LTORG\n         MEMWORK\n         MEMDSECT\n         PRINT NOGEN\n         IHAPSA\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSMAP": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00\\x8f\\x00\\x8f\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 143, "newlines": 143, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSMAP  - MAP PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSMAP  CSECT\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R12,R15                 SET BASE REG\n         USING XMDSMAP,R12             ESTABLISH ADDRESSABILITY\n         GETMAIN RU,LV=72              GET SPACE FOR MY SAVE AREA\n         ST    R13,4(,R1)              CHAIN\n         ST    R1,8(,R13)                    SAVE\n         LR    R13,R1                             AREAS\n         USING MEMWORK,R10             WORK AREA PASSED VIA REG 10\n*\n         LH    R0,SCRSIZE              GET SCREEN SIZE\n         SLL   R0,1                    TIMES 2\n         GETMAIN RU,LV=(0)             GET AREA FOR SCREEN\n         LR    R11,R1                  SAVE ADDRESS OF AREA\n         GETMAIN RU,LV=16384           GET AREA\n         LR    R9,R1                   POINT TO AREA\n         LR    R0,R11                  COPY SCREEN AREA POINTER\n         LH    R1,SCRSIZE              GET SCREEN SIZE\n         XR    R2,R2                   CLEAR REG 2\n         XR    R3,R3                   CLEAR REG 3\n         MVCL  R0,R2                   SET SCREEN AREA TO ZEROES\n*\n         ST    R11,0(,R9)              SAVE SCREEN POINTER IN AREA\n         LA    R7,4(,R9)               POINT PAST POINTER\n         LR    R8,R11                  COPY SCREEN POINTER\n         MVC   1(12,R8),=C'ADDRESS --->'  INSERT LABEL\n         LA    R8,13(,R8)              BUMP PAST LABEL\n         MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),8                 INSERT 8\n         STCM  R8,15,2(R7)             SAVE FIELD ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,9(,R8)               BUMP ADDRESS\n         MVC   0(2,R7),=X'F000'        INSERT CHAR 0 AND BINARY 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         MVC   0(9,R8),=C'MODE --->'   INSERT LABEL\n         LA    R8,9(,R8)               POINT PAST LABEL\n         MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),1                 INSERT 1\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,2(,R8)               BUMP ADDRESS\n         MVC   0(2,R7),=X'F000'        INSERT CHAR 0 AND HEX 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         MVC   0(9,R8),=C'ASID --->'   INSERT LABEL\n         LA    R8,9(,R8)               POINT PAST LABEL\n         MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),4                 INSERT 4\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,5(,R8)               BUMP ADDRESS\n         MVC   0(2,R7),=X'F000'        INSERT CHAR 0 AND HEX 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         MVC   0(12,R8),=C'JOBNAME --->' INSERT LABEL\n         LA    R8,12(,R8)              POINT PAST LABEL\n         MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),8                 INSERT 8\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,9(,R8)               BUMP ADDRESS\n         MVC   0(2,R7),=X'F000'        INSERT CHAR 0 AND HEX 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         LH    R15,COLS                GET NUM COLUMNS\n         LA    R8,0(R15,R11)           POINT TO NEXT LINE\n         MVC   1(12,R8),=C'COMMAND --->' INSERT LABEL\n         LA    R8,13(,R8)              POINT PAST LABEL\n         MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),64                INSERT 4\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,65(,R8)              BUMP ADDRESS\n         MVC   0(2,R7),=X'F800'        INSERT CHAR 8 AND HEX 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         LA    R15,3\n         MH    R15,COLS                SIZE OF 3 ROWS\n         LA    R8,0(R15,R11)           POINT PAST THEM\n         LH    R6,ROWS                 GET NUMBER OF ROWS\n         SH    R6,=H'3'                MINUS 3\n*\nLINELOOP LR    R5,R8                   COPY ROW POINTER\n         MVI   0(R7),X'F0'             INSERT CHAR 0\n         MVI   1(R7),8                 INSERT 6\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,12(,R8)              BUMP ADDRESS\n         LA    R4,4                    COUNT 4 WORDS PER LINE\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    MIDLOOP                 YES - THAT'S RIGHT\n         LA    R4,8                    NO - 8 WORDS PER LINE\n*\nMIDLOOP  MVI   0(R7),X'40'             INSERT BLANK\n         MVI   1(R7),8                 INSERT 8\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,9(,R8)               BUMP ADDRESS\n         MVC   0(2,R7),=X'F000'        INSERT CHAR 0 AND HEX 0\n         STCM  R8,15,2(R7)             SAVE ADDRESS\n*\n         LA    R7,6(,R7)               BUMP POINTER\n         LA    R8,1(,R8)               BUMP ADDRESS\n         BCT   R4,MIDLOOP              LOOP FOR ONE LINE\n*\n         LH    R15,COLS                GET NUM COLUMNS\n         LA    R8,0(R15,R5)            POINT TO NEXT ROW\n         BCT   R6,LINELOOP             LOOP FOR ALL ROWS\n*\n         XC    0(10,R7),0(R7)          CLEAR START OF AREA\n         LR    R1,R9                   COPY ADDRESS OF MAP\n         LR    R3,R13                  POINT TO MY SAVE AREA\n         L     R13,4(,R13)             RESTORE CALLER'S SAVE AREA\n         STM   R15,R1,16(R13)          SAVE RETURN REGS\n         FREEMAIN RU,LV=72,A=(R3)      FREE MY SAVE AREA\n         LM    R14,R12,12(R13)         RESTORE REGS\n         BR    R14                     GO BACK\n*\n         LTORG\n         MEMWORK\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSMVCP": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00Z\\x00Z\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 90, "newlines": 90, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSMVCP - MOVETO PRIMARY PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSMVCP CSECT\n         STM   R14,R12,12(R13)         SAVE REGS\n         LR    R12,R15                 SET UP BASE REG\n         USING XMDSMVCP,R12\n         LR    R8,R1                   SAVE PARM REG\n         GETMAIN RU,LV=72              GET MY SAVE AREA\n         ST    R13,4(,R1)              CHAIN\n         ST    R1,8(,R13)                    SAVE\n         LR    R13,R1                             AREAS\n         USING MEMWORK,R10             WORK AREA PASSED VIA REG 10\n*\n***      @AUTH\n         MODESET MODE=SUP              SUPERVISOR STATE\n***      @NOAUTH\n         CLI   MODE,C'X'               EXTENDED ADDRESSING MODE ?\n         BNE   SETESTAE                NO - GO ON\n*\n         LA    R3,SETESTAE             WHERE TO GO\n         ICM   R3,8,=X'80'             SET 31-BIT\n         BSM   R0,R3                   SWITCH TO 31-BIT MODE\n*\nSETESTAE ESTAE ESTAEXIT,CT             SET UP RECOVERY\n*\n         STCM  R1,15,MSPIESV           SAVE REGS FOR RECOVERY\n         EPAR  1                       GET PRIMARY ASID\n         SSAR  1                       RESET SECONDARY ASID\n*\n         LA    R1,1                    INDEX = 1\n         AXSET AX=(R1)                 SET INDEX\n         L     R1,ASCBPTR              POINT TO TARGET ASCB\n         USING ASCB,R1\n         LH    R0,ASCBASID             GET TARGET ASID\n         SSAR  0                       SWITCH TO SECONDARY MODE\n*\n         LA    R0,0                    SET KEY\n         LA    R1,4                    SET LENGTH\n         MVCP  WORK8(R1),0(R8),0       MOVE 4 BYTES\n         B     DONE                    GO ON\n*\nNOTAVAIL STCM  R8,15,WORK8\nDONE     EPAR  0                       GET PRIMARY ASID\n         SSAR  0                       SET SECONDARY ASID\n*\n***      @AUTH\n         MODESET MODE=PROB             SWITCH STATE\n***      @NOAUTH\n*\n         ICM   R2,15,MSPIESV           RESTORE REGS\n         ESTAE 0                       REMOVE RECOVERY\n         LA    R3,EXIT                 WHERE TO GO\n         BSM   R0,R3                   SET AMODE = 24\n*\nEXIT     ICM   R1,15,WORK8             GET RETURN POINTER\n         LR    R3,R13                  COPY SAVE AREA ADDRESS\n         L     R13,4(,R13)             RESTORE CALLER'S SAVE AREA\n         STM   R15,R1,16(R13)          SAVE RETURN REGS\n         FREEMAIN RU,LV=72,A=(R3)      RELEASE MY SAVE AREA\n         LM    R14,R12,12(R13)         RESTORE REGS\n         BR    R14                     GO BACK\n*\nESTAEXIT DS    0H\n         USING SDWA,R1\n         LM    R2,R12,SDWAGR02\n         MVC   DATALEN,SDWAABCC\n         CLC   SDWACMPC,=X'0D5000'     0D5 ABEND ?\n         BE    ESTAEOK                 YES - OK\n         CLI   SDWAICD1,X'04'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'05'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'10'\n         BE    ESTAEOK\n         CLI   SDWAICD1,X'11'\n         BE    ESTAEOK\n         BR    R14\n*\nESTAEOK  LA    R2,NOTAVAIL\n         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,DUMP=NO\n         BR    R14\n*\n         LTORG\n         MEMWORK\n         PRINT NOGEN\n         IHAASCB\n         IHASDWA\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSTGET": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x01F\\x01F\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 326, "newlines": 326, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSTGET - TGET PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSTGET @SAVE BASE=R12                SAVE REGS AND SET BASE\n         USING MEMWORK,R10             WORK AREA PASSED VIA REG 10\n         MVI   COMMAND,C' '            CLEAR COMMAND AREA\n         MVC   COMMAND+1(L'COMMAND-1),COMMAND\n         GETMAIN RU,LV=16384           GET WORK AREA\n         LR    R9,R1                   COPY WORK AREA ADDRESS\n*\n         LHI   R0,16000\n         TGET  (9),(0),ASIS            GET INPUT\n*\n*        ST    R10,ADDRESS\n*        B     RETURN\n*\n         MVC   CURSOR,HOME             SET ADDRESS FOR CURSOR\n         LA    R2,0(R1,R9)             POINT TO END OF DATA\n         MVC   0(3,R2),=X'110000'      INSERT END FLAGS\n         LR    R8,R1                   COPY LENGTH\n         MVC   AID,0(R9)               PICK UP AID BYTE\n         CLI   AID,PF1                 'HELP' KEY ?\n         BE    HELP                    YES - GO GET HELP\n*\n         CLI   AID,PF7                 'UP' KEY ?\n         BE    UP                      YES - SCROLL UP\n*\n         CLI   AID,PF8                 'DOWN' KEY ?\n         BE    DOWN                    YES - SCROLL DOWN\n*\n         CLI   AID,PF11                'LINK' KEY ?\n         BE    LINK                    YES - USE FIELD AS LINK ADDRESS\n*\n         CLI   AID,ENTER               'ENTER' KEY ?\n         BE    ENTERK                  YES - PROCESS IT\n*\n         BNE   EXIT                    OTHERWISE, EXIT\n*\nHELP     CALL  XMDSHELP                CALL HELP PROCESSOR\n         B     EXIT                    RETURN\n*\nUP       L     R0,ADDRESS              PICK UP OLD ADDRESS\n         LR    R1,R0                   COPY IT\n         N     R1,=F'31'               TURN OFF ALL BUT 5 BITS\n         CLC   COLS,=H'80'             80 COLUMNS ?\n         BNE   *+8                     NO - GO ON\n         N     R1,=F'15'               YES - TURN OFF ALL BUT 4 BITS\n*\n         LTR   R1,R1                   ZERO ?\n         BZ    UP0                     YES - UP FULL PAGE\n*\n         SRL   R0,4                    REMOVE 4 BITS FROM ADDRESS\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SRL   R0,1                    NO - REMOVE ANOTHER BIT\n*\n         AH    R0,=H'1'                ADD ONE\n         SLL   R0,4                    RESTORE POSITION\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SLL   R0,1                    NO - RESTORE REMAINING POSITION\n*\nUP0      LH    R15,ROWS                GET NUM ROWS\n         SH    R15,=H'3'               MINUS 3 HEADING ROWS\n         MH    R15,=H'16'              TIME 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         MH    R15,=H'2'               NO - TIMES 2 MORE\n*\n         SLR   R0,R15                  SUBTRACT THAT FROM CURRENT ADDR\n         ST    R0,ADDRESS              SET NEW ADDRESS\n         B     EXIT                    GO TO EXIT\n*\nDOWN     L     R1,ADDRESS              PICK UP OLD ADDRESS\n         SRL   R1,4                    REMOVE LOW 4 BITS\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SRL   R1,1                    NO - REMOVE ANOTHER BIT\n*\n         SLL   R1,4                    RESTORE 4 BIT POSITIONS\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         SLL   R1,1                    RESTORE ANOTHER POSITION\n*\n         LH    R15,ROWS                GET NUM ROWS\n         SH    R15,=H'3'               MINUS 3 FOR HEADINGS\n         MH    R15,=H'16'              TIMES 16\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BE    *+8                     YES - GO ON\n         MH    R15,=H'2'               NO - TIMES ANOTHER 2\n*\n         AR    R1,R15                  ADD TO OLD ADDRESS\n         ST    R1,ADDRESS              SET NEW ADDRESS\n         B     EXIT                    GO TO EXIT\n*\nLINK     XR    R0,R0                   CLEAR REG 0\n         XR    R1,R1                     AND REG 1\n         ICM   R1,3,1(R9)              PICK UP CURSOR POSITION\n         CHI   R1,X'4000'\n         BL    NOCNVT\n         SLL   R1,18                   REMOVE FIRST 14 BITS\n         SLDL  R0,6                    PICK OFF NEXT 6 BITS\n         SLL   R1,2                    REMOVE 2 BITS\n         SRDL  R0,26                   PUT REMAINDER IN REG 1\nNOCNVT   LR    R2,R1                   COPY RELATIVE CURSOR POSITION\n         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?\n         BNE   MOD5                    NO - ASSUME 132 COLUMNS\n*\n         D     R0,=F'80'               DIVIDE OFFSET BY ROW LENGTH\n         B     MOD5+4                  GO ON\n*\nMOD5     D     R0,=F'132'              DIVIDE OFFSET BY ROW LENGTH\n         CH    R1,=H'3'                CURSOR IN 1ST 3 ROWS ?\n         BL    EXIT                    YES - EXIT\n         LH    R15,ROWS                GET NUM ROWS\n         SH    R15,=H'3'               MINUS 3\n         CR    R1,R15                  CURSOR BEYOND LAST ROW ?\n         BNL   EXIT                    YES - EXIT\n*\n         LA    R1,8                    LOOP LIMIT\n         LA    R3,13                   COLUMN 13\n*\nLINKLOOP CR    R0,R3                   THIS COLUMN ?\n         BE    LINK2                   YES - GO ON\n*\n         LA    R3,10(,R3)              ADD 10 TO COLUMN\n         BCT   R1,LINKLOOP             LOOP UP TO 8 TIMES\n*\n         B     EXIT                    NOT MATCHED - EXIT\n*\nLINK2    L     R1,MAPPTR               POINT TO MAP POINTER\n         L     R1,0(,R1)               POINT TO MAP\n         AR    R2,R1                   ADD CURSOR POSITION\n         CLI   0(R2),C' '              BLANK ?\n         BE    EXIT                    YES - NOT VALID\n*\n         MVC   MWORK32(8),0(R2)        MOVE DISPLAY DATA TO WORK\n         TR    MWORK32(8),TRCHAR       TRANSLATE IT FOR CONVERSION\n         PACK  DWORD,MWORK32(9)        PACK IT\n         ICM   R1,15,DWORD+3           PICK UP THIS AS ADDRESS\n         ST    R1,ADDRESS              SAVE NEW ADDRESS\n         MVC   CURSOR,1(R9)            SET CURSOR TO SAME OFFSET\n         B     EXIT                    EXIT\n*\nENTERK   LA    R8,3(,R9)               POINT PAST CURSOR\n*\nUNRAVEL  CLC   1(2,R8),=X'0000'        ENDING (FAKE) SBA ?\n         BE    EXIT                    YES - EXIT\n*\n         LA    R3,3(,R8)               POINT PAST 1ST SBA\n         TRT   0(256,R3),NEXTSBA       LOOK FOR NEXT SBA\n         BZ    EXIT                    NONE - EXIT\n*\n         LR    R7,R1                   POINT TO SBA\n         SR    R7,R3                   CALCULATE DATA LENGTH\n         BNZ   CHKSBA                  IF VALID, GO ON\n         LA    R8,3(,R8)               POINT PAST SBA\n         B     UNRAVEL                 GO UNRAVEL DATA\n*\nCHKSBA   CLC   0(3,R8),=X'11404E'      SBA FOR FIRST FIELD ?\n         BE    SBA1                    YES - HANDLE IT\n         CLC   0(3,R8),=X'11000E'      SBA FOR FIRST FIELD ?\n         BE    SBA1                    YES - HANDLE IT\n*\n         CLC   0(3,R8),=X'114061'      2ND FIELD ?\n         BE    SBA2                    YES - HANDLE IT\n         CLC   0(3,R8),=X'110021'      2ND FIELD ?\n         BE    SBA2                    YES - HANDLE IT\n*\n         CLC   0(3,R8),=X'11406D'      3RD FIELD ?\n         BE    SBA3                    YES - HANDLE IT\n         CLC   0(3,R8),=X'11002D'      3RD FIELD ?\n         BE    SBA3                    YES - HANDLE IT\n*\n         CLC   COLS,=H'80'             80 COLUMNS ?\n         BNE   C132                    NO - GO ON\n*\n         CLC   0(3,R8),=X'11C15E'      4TH FIELD ?\n         BE    SBA4                    YES - HANDLE IT\n         CLC   0(3,R8),=X'11002E'      4TH FIELD ?\n         BE    SBA4                    YES - HANDLE IT\n*\n         B     C80                     GO ON\nC132     CLC   0(3,R8),=X'11C2D2'      FOURTH FIELD (132 COL) ?\n         BE    SBA4                    YES - HANDLE IT\n         CLC   0(3,R8),=X'110092'      FOURTH FIELD (132 COL) ?\n         BE    SBA4                    YES - HANDLE IT\n*\nC80      CLC   0(3,R8),=X'11407F'      5TH FIELD ?\n         BE    SBA5                    YES - HANDLE IT\n         CLC   0(3,R8),=X'11003F'      5TH FIELD ?\n         BE    SBA5                    YES - HANDLE IT\n         B     EXIT                    OTHER FIELD - EXIT\n*\nSBA1     MVC   WORK8,=8C'0'            MOVE EIGHT ZEROES TO WORK AREA\n         LA    R6,WORK8+7              POINT TO LAST ZERO\n         LA    R5,2(R7,R8)             POINT TO 2ND SBA ADDR BYTE\n         LR    R4,R7                   COPY ADDRESS\n*\nS1LOOP   MVC   0(1,R6),0(R5)           MOVE ONE CHARACTER\n         BCTR  R6,0                    BACK UP ONE\n         BCTR  R5,0                    BACK UP ONE\n         BCT   R4,S1LOOP               COPY ALL CHARACTERS\n*\n         OC    WORK8,=8C' '            CONVERT TO UPPER CASE\n         TR    WORK8,TRCHAR            TRANSLATE TO VALID CHARACTERS\n         MVI   WORK8+8,X'F0'           NEXT CHARACTER IS ZERO\n         PACK  DWORD,WORK8(9)          PACK DATA\n         ICM   R1,15,DWORD+3           PICK UP AS ADDRESS\n         ST    R1,ADDRESS              SAVE NEW ADDRESS\n         LA    R8,3(R7,R8)             POINT PAST FIELD\n         B     UNRAVEL                 CONTINUE UNRAVELLING\n*\nSBA2     MVC   MODE,3(R8)              MOVE CHARACTER TO 24/31 MODE\n         OI    MODE,C' '               CONVERT TO UPPER CASE\n         LA    R8,3(R7,R8)             POINT PAST CHARACTER\n         CLI   MODE,C'A'               IS IT 'A' ?\n         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING\n*\n         CLI   MODE,C'X'               IS IT 'X' ?\n         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING\n*\n         CLI   MODE,C'M'               IS IT 'M' ?\n         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING\n*\n         MVI   MODE,C'D'               MAKE IT 'D'\n         B     UNRAVEL                 THEN CONTINUE UNRAVELLING\n*\nSBA3     MVC   WORK8(4),=4C'0'         MOVE FOUR ZEROES\n         LA    R6,WORK8+3              POINT TO LAST ONE\n         LA    R5,2(R7,R8)             POINT TO LAST CHARACTER\n         LR    R4,R7                   COPY POINTER\n*\nS3LOOP   MVC   0(1,R6),0(R5)           MOVE ONE CHARACTER\n         BCTR  R6,0                    BACK UP ONE\n         BCTR  R5,0                    BACK UP ONE\n         BCT   R4,S3LOOP               LOOP\n*\n         OC    WORK8(4),=4C'0'         CONVERT TO UPPER CASE\n         PACK  DWORD,WORK8(4)          CONVERT TO PACKED\n         CVB   R1,DWORD                CONVERT TO BINARY\n         LA    R8,3(R7,R8)             POINT PAST DATA\n         LTR   R1,R1                   VALUE = 0 ?\n         BZ    UNRAVEL                 YES - CONTINUE UNRAVELLING\n*\n         L     R2,16                   PICK UP CVT ADDRESS\n         L     R2,556(,R2)             PICK UP ASVT ADDRESS\n         C     R1,516(,R2)             ASID TOO HIGH ?\n         BH    UNRAVEL                 YES - CONTINUE UNRAVELLING\n*\n         BCTR  R1,0                    SUBTRACT ONE FROM INPUT ASID\n         SLL   R1,2                    TIMES 4 (ENTRY LENGTH)\n         LA    R1,528(R1,R2)           POINT TO ENTRY FOR THIS ASID\n         TM    0(R1),X'80'             ASID IN USE ?\n         BO    UNRAVEL                 NO - CONTINUE UNRAVELLING\n         MVC   ASCBPTR,0(R1)           YES - COPY ASCB ADDRESS\n         B     UNRAVEL                 THEN CONTINUE UNRAVELLING\n*\nSBA4     LR    R1,R7                   COPY LENGTH\n         BCTR  R1,R0                   SUBTRACT ONE FOR EXECUTE\n         MVC   COMMAND(0),3(R8)        EXECUTED MOVE\n         EX    R1,*-6                  MOVE DATA TO COMMAND FIELD\n         LA    R8,3(R7,R8)             POINT TO NEXT INPUT\n         B     UNRAVEL                 CONTINUE UNRAVELLING\n*\nSBA5     MVC   WORK8,=8C' '            MOVE BLANKS TO WORK\n         LR    R1,R7                   COPY LENGTH\n         BCTR  R1,0                    MINUS ONE FOR EXECUTE\n         OC    WORK8(0),3(R8)          EXECUTED INSTRUCTION\n         EX    R1,*-6                  MOVE AND CONVERT TO UPPER CASE\n         LA    R8,3(R7,R8)             POINT TO NEXT INPUT\n         LA    R1,S1CSCB               WHERE TO GO\n         ICM   R1,8,=X'80'             31-BIT BIT\n         BSM   R0,R1                   SWITCH TO 31-BIT MODE\n*\nS1CSCB   L     R1,16                   POINT TO CVT\n         L     R1,148(,R1)             POINT TO MAST SCHED DATA ARAE\n         L     R1,0(,R1)               POINT TO CSCB CHAIN\n*\nS5LOOP   LTR   R1,R1                   END OF CHAIN ?\n         BZ    RESET                   YES - MATCHING CSCB NOT FOUND\n*\n         CLC   8(8,R1),WORK8           DOES NAME MATCH ?\n         BE    S5CSCB                  YES - GO ON\n*\n         L     R1,0(,R1)               POINT TO NEXT CSCB\n         B     S5LOOP                  KEEP ON LOOKING\n*\nS5CSCB   LH    R1,30(,R1)              GET ASID\n         LTR   R1,R1                   IS ASID ZERO ?\n         BZ    RESET                   YES - ASID IS NOT VALID\n*\n         L     R2,16                   POINT TO CVT\n         L     R2,556(,R2)             POINT TO ASVT\n         C     R1,516(,R2)             IS ASID TOO HIGH ?\n         BH    RESET                   YES - ASID NOT VALID\n*\n         BCTR  R1,0                    ASID - 1\n         SLL   R1,2                    TIMES 4 (LENGTH OF ENTRY)\n         LA    R1,528(R1,R2)           POINT TO ASCB POINTER\n         TM    0(R1),X'80'             ASCB IN USE ?\n         BO    RESET                   NO - NOT VALID\n*\n         MVC   ASCBPTR,0(R1)           COPY ASCB POINTER\n         B     RESET                   GO ON\n*\nRESET    LA    R3,UNRAVEL              POINT TO UNRAVELL ROUTINE\n         BSM   R0,R3                   RETURN TO 24-BIT MODE\n*\nEXIT     FREEMAIN RU,LV=16384,A=(9)    RELEASE WORKING AREA\nRETURN   @RETURN ,                     RETURN\n*\nTRCHAR   EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TRCHAR+C'0'\n         DC    C'0123456789'\n         ORG\nNEXTSBA  DC    256X'00'\n         ORG   NEXTSBA+X'11'\n         DC    X'11'\n         ORG\n         LTORG\n         MEMWORK\n         MEMDSECT\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XMDSTPUT": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04#\\x7f\\x01\\x04#\\x7f\\x08C\\x00?\\x00?\\x00\\x00\\xd4\\xd2\\xd3\\xc9\\xd5\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-24T00:00:00", "modifydate": "2004-08-24T08:43:37", "lines": 63, "newlines": 63, "modlines": 0, "user": "MKLINE"}, "text": "* XMDSTPUT - TPUT PROCESSOR FOR CROSS-MEMORY BROWSER\n* AUTHOR   - MARTIN KLINE\n*\nXMDSTPUT @SAVE BASE=R12                SAVE REGS AND SET BASE\n         USING MEMWORK,R10             WORK AREA PASSED VIA REG 9\n         L     R9,MAPPTR               POINT TO MAP AREA\n         L     R11,0(,R9)\n         LA    R9,4(,R9)\n         GETMAIN RU,LV=16384           GET OUTPUT AREA\n         LR    R8,R1                   COPY AREA ADDRESS\n         LR    R7,R11                  COPY ADDRESS AGAIN\n         LR    R6,R8                   COPY ADDRESS AGAIN\n         MVC   0(8,R6),=X'27F5401140401DF0' INSERT START COMMANDS\n         CLC   PRMSIZE,ALTSIZE         ALTERNATE SCREEN ?\n         BE    *+8                     NO - GO ON\n         MVI   1(R6),X'7E'             YES - INDICATE ALTERNATE\n         LA    R6,8(,R6)               POINT PAST START COMMANDS\n         LA    R7,1(,R7)               BUMP REG 7\n*\nLOOP     ICM   R1,15,2(R9)             ANY FIELD ?\n         BNZ   CHKDATA                 YES - GO ON\n*\n         LH    R15,SCRSIZE             GET SCREEN SIZE\n         LA    R1,0(R15,R11)           POINT PAST SCREEN AREA\n*\nCHKDATA  SR    R1,R7                   BEYOND END OF SCREEN ?\n         BNH   ADDATTR                 NO - GO ON\n*\n         LR    R4,R7                   COPY SOURCE POINTER\n         LR    R2,R6                   COPY TARGET POINTER\n         LR    R3,R1                   COPY TARGET LENGTH\n         LR    R5,R1                   COPY SOURCE LENGTH\n         MVCL  R2,R4                   MOVE A LITTLE BIT\n         AR    R6,R1                   BUMP POINTER\n         AR    R7,R1                   BUMP POINTER\n*\nADDATTR  CLC   0(4,R9),=F'0'           END OF ATTRIBUTES ?\n         BE    ENDATTR                 YES - GO ON\n*\n         MVI   0(R6),X'1D'             INSERT START FIELD CHARACTER\n         MVC   1(1,R6),0(R9)           SET FIELD\n         LA    R6,2(,R6)               BUMP POINTER\n         LA    R7,1(,R7)               BUMP POINTER\n         LA    R9,6(,R9)               BUMP POINTER\n         B     LOOP                    LOOP\n*\nENDATTR  MVI   0(R6),X'11'             INSERT SBA\n         MVC   1(2,R6),CURSOR          INSERT CURSOR POSITION\n         MVI   3(R6),X'13'             INSERT INSERT CURSOR\n         LA    R6,4(,R6)               BUMP POINTER\n         SR    R6,R8                   CALCULATE LENGTH\n*\n         TPUT  (8),(6),FULLSCR         WRITE IT\n*\n         FREEMAIN RU,LV=16384,A=(8)    FREE WORKING AREA\n*\n         XR    R15,R15                 SET RETURN CODE\n         @RETURN ,                     GO BACK\n*\n         LTORG\n         MEMWORK\n         REG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZAPPROC": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00)\\x01\\x04$\\x7f\\x01\\x04$\\x7f\\x104\\x00\\x12\\x00\\x12\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2004-09-03T00:00:00", "modifydate": "2004-09-03T10:34:29", "lines": 18, "newlines": 18, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//***************************************************************//\n//*                                                             *//\n//*  AUTHORIZE YOUR OWN LOGON PROC TO EXECUTE XMDSMAIN.         *//\n//*    (OR CHANGE THE SOURCE CODE IN MEMBER XMDSMAIN)           *//\n//*                                                             *//\n//***************************************************************//\n//*\n//ZAPNOTE EXEC PGM=AMASPZAP\n//SYSUDUMP DD  SYSOUT=*,HOLD=YES\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SBGOLOB.W$$.LINKLIB,DISP=SHR   <== YOUR AUTH LIB\n//SYSIN    DD  *\n NAME  XMDSMAIN XMDSMAIN\n VER   0258   7CE3E2D6 E2E8E2D7   @TSOSYSP LOGON PROC IN HEX\n REP   0258   C9E2D7C6 D7D9D6C3   ISPFPROC LOGON PROC-SUBSTITUTE YOURS\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZNOAUTH": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Y\\x01\\x04$\\x7f\\x01\\x04$\\x7f\\x10D\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-09-03T00:00:00", "modifydate": "2004-09-03T10:44:59", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "*  TO ELIMINATE THE AUTHORIZATION CHECK ALTOGETHER, SUBSTITUTE THIS\n*   CODE IN MEMBER XMDSMAIN.\nCONT     DS    0H\n         USING PSA,R0                  PROVIDE PSA ADDRESSABILITY\n         GETMAIN RU,LV=WORKSIZE        GET STORAGE FOR WORKAREA\n         LR    R10,R1                  SAVE STORAGE ADDRESS\n         USING MEMWORK,R10             PROVIDE ADDRESSABILITY\n         L     R1,PSATOLD              LOAD TCB ADDRESS\n         L     R1,12(,R1)              LOAD TIOT ADDRESS\n*        CLC   $SSG,16(R1)             COMMENT OUT LOGON PROC CHECK\n*        BNE   EXIT                    AND CONTINUE UNCONDITIONALLY\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT690/FILE690.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT690", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}