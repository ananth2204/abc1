* XMDSFIND - FIND COMMAND PROCESSOR FOR CROSS-MEMORY BROWSER
* AUTHOR   - MARTIN KLINE
*
XMDSFIND CSECT
         STM   R14,R12,12(R13)         SAVE REGS
         LR    R12,R15                 SET UP BASE
         USING XMDSFIND,R12
         GETMAIN RU,LV=72              GET SAVE AREA
         ST    R13,4(,R1)              CHAIN
         ST    R1,8(,R13)                    SAVE
         LR    R13,R1                             AREAS
         USING MEMWORK,R10             COMMON AREA ADDRESSABILITY
         MVC   MAXADDR,=X'00FFFFFF'    SET LIMIT FOR SEARCH AREA
         CLI   MODE,C'X'               EXTENDED ADDRESSING ?
         BNE   NOMODEX                 NO - GO ON
*
         L     R1,ADDRESS              PICK UP CURRENT ADDRESS
         AL    R1,=F'16777216'         ADD 16 MEG
         ST    R1,MAXADDR              THAT'S THE MAX ADDRESS
         LA    R1,NOMODEX              WHERE TO GO
         ICM   R1,8,=X'80'             31-BIT MODE
         BSM   R0,R1                   SWITCH TO 31-BIT MODE
*
NOMODEX  CLI   AID,PF5                 REPEAT FIND ?
         BE    REPEAT                  YES - REPEAT
         LA    R1,COMMAND              POINT TO COMMAND AREA
         LA    R2,L'COMMAND            GET LENGTH OF COMMAND AREA
*
SKIP1    CLI   0(R1),C' '              LOOK FOR COMMAND
         BNE   AT1                     FOUND IT
         LA    R1,1(,R1)               SKIP OVER BLANK
         BCT   R2,SKIP1                LOOP TO FIND COMMAND
         B     EXIT                    NONE - EXIT
*
AT1      CH    R2,=H'5'                AT LEAST 5 CHARACTERS LEFT ?
         BL    EXIT                    NO - EXIT
         LA    R0,1                    ASSUME 'F' COMMAND LENGTH
         CLC   0(2,R1),=C'F '          IS IT JUST 'F' ?
         BE    ATFIND                  YES - GO ON
         CH    R2,=H'8'                AT LEAST 8 CHARACTERS LEFT ?
         BL    EXIT                    NO - EXIT
         LA    R0,4                    ASSUME 'FIND' COMMAND LENGTH
         CLC   0(5,R1),=C'FIND '       IS IT 'FIND' COMMAND ?
         BNE   EXIT                    NO - EXIT
*
ATFIND   AR    R1,R0                   POINT PAST 'F' OR 'FIND'
         SR    R2,R0                   REDUCE REMAINING LENGTH
*
SKIP2    CLI   0(R1),C' '              LOOK FOR START OF SEARCH STRING
         BNE   AT2                     GOT IT - GO ON
         LA    R1,1(,R1)               BUMP POINTER
         BCT   R2,SKIP2                LOOP
         B     EXIT                    NO STRING - EXIT
*
AT2      CH    R2,=H'3'                AT LEAST 3 CHARACTER LEFT ?
         BL    EXIT                    NO - EXIT
         CLC   0(2,R1),=X'E77D'        IS IT HEX FORM - X'???'
         BE    ATX                     YES - HANDLE THAT
         CLC   0(2,R1),=X'A77D'        HOW ABOUT LOWER CASE ?
         BE    ATX                     YES - HANDLE THAT
         CLI   0(R1),X'7D'             IS IT QUOTED STRING ?
         BNE   EXIT                    NO - EXIT
*
         LA    R3,1(,R1)               POINT PAST THE QUOTE
         BCTR  R2,0                    REDUCE REMAINING LENGTH
         BAL   R14,GETLEN              GO GET STRING LENGTH
*
         BCTR  R3,0                    REDUCE LENGTH FOR EXECUTE
         MVC   FINDSTR(0),1(R1)        EXCUTED MOVE
         EX    R3,*-6                  COPY STRING
         STC   R3,FINDSTRL             SAVE EXECUTE LENGTH
         L     R8,ADDRESS              PICK UP START ADDRESS
         B     SEARCH                  GO START SEARCHING
*
ATX      LA    R3,2(,R1)               SKIP OVER HEX FORMAT
         SH    R2,=H'2'                REDUCE REMAINING LENGTH
         BAL   R14,GETLEN              GO GET STRING LENGTH
         CH    R3,=H'30'               MORE THAN 30 CHARACTERS ?
         BH    EXIT                    YES - EXIT
         LA    R0,1                    CHECK FOR
         NR    R0,R3                             EVEN NUM CHARACTERS
         BO    EXIT                    NO - EXIT
         BCTR  R3,0                    REDUCE LENGTH FOR EXCUTE
         EX    R3,MOVEWK32             MOVE TO WORK AREA
         OC    MWORK32(30),=30C' '     UPPER CASE
         EX    R3,TRANWK32             TRANSLATE FOR CONVERSION
         PACK  FINDSTR(8),MWORK32(15)       CONVERT 7 CHARACTERS
         PACK  FINDSTR+7(8),MWORK32+14(15)  CONVERT 7 MORE
         PACK  FINDSTR+14(2),MWORK32+28(3)  CONVERT 1 MORE
         SRL   R3,1                    DIVIDE LENGTH BY 2
         STC   R3,FINDSTRL             SAVE IT
         L     R8,ADDRESS              POINT TO START OF SEARCH
         B     SEARCH                  GO FIND DATA
*
GETLEN   LR    R0,R3                   COPY POINTER
LENLOOP  CLI   0(R3),X'7D'             ENDING QUOTE ?
         BE    GOTLEN                  YES - GO ON
         LA    R3,1(,R3)               BUMP POINTER
         BCT   R2,LENLOOP              REDUCE LENGTH AND LOOP
         B     EXIT                    END OF AREA - EXIT
*
GOTLEN   SR    R3,R0                   CALCULATE LENGTH OF STRING
         BR    R14                     RETURN
*
REPEAT   CLI   FINDSTRL,64             IS FIND STRING TOO LONG ?
         BH    EXIT                    YES - EXIT
         L     R8,ADDRESS              POINT TO LAST ADDRESS
         LA    R8,1(,R8)               SKIP ONE BYTE
         B     SEARCH                  THEN START SEARCH
*
***RCH   @AUTH
SEARCH   MODESET MODE=SUP              SUPERVISOR STATE
***      @NOAUTH
         ESTAE ESTAEXIT,CT             SET UP ESTAE
         MVI   SSARFLAG,X'00'          RESET SSAR FLAG
         LA    R7,256                  LENGTH IS 256
         LA    R6,WORK256              COPY AREA ADDRESS
*
MVCP     CLI   SSARFLAG,X'FF'          IS SSAR SET ?
         BE    INSSAR                  YES - GO ON
         EPAR  1                       GET PRIMARY ASID
         SSAR  1                       SET SECONDARY = PRIMARY
         LA    R1,1
         AXSET AX=(R1)
         L     R1,ASCBPTR              POINT TO TARGET ASCB
         USING ASCB,R1
         LH    R0,ASCBASID             PICK UP TARGET ASID
         SSAR  R0                      SET SECONDARY ASID
         MVI   SSARFLAG,X'FF'          INDICATE SECONDARY ASID SET
*
INSSAR   XR    R1,R1                   CLEAR REG 1
         MVCP  0(R7,R6),0(R8),R1       MOVE DATA TO PRIMARY STORAGE
         IC    R1,FINDSTRL             GET STRING LENGTH
         LA    R7,256                  AREA LENGTH = 256
         SR    R7,R1                   MINUS STRING LENGTH
         LA    R5,WORK256              POINT TO SCAN AREA
         ALR   R8,R5
         SLR   R8,R6                   RE-CALCULATE ADDRESS
*
COMPARE  EX    R1,CLCWORK              CHECK FOR MATCH
         BE    FOUND                   FOUND - GO ON
         AL    R8,=F'1'                BUMP ADDRESS POINTER
         LA    R5,1(,R5)               BUMP AREA POINTER
         BCT   R7,COMPARE              LOOP FOR COMPARE
         CL    R8,MAXADDR              AT END OF SEARCH AREA ?
         BH    NOTFOUND                YES - NOT FOUND
         LA    R7,256                  ANOTHER 256 TO GET
         LA    R6,WORK256              POINT TO WORK AREA
         SR    R7,R1                   SUBTRACE FROM LENGTH
         AR    R6,R1                   AND BUMP POINTER
         B     INSSAR                  GO GET MORE DATA
*
NOTAVAIL SRL   R8,11                   DROP OFF PAGE OFFSET
         LA    R8,1(,R8)               NEXT PAGE
         SLL   R8,11                   ADDRESS IS NOW NEXT PAGE
         CL    R8,MAXADDR              AT END OF AREA ?
         BH    NOTFOUND                YES - NOT FOUND
         LA    R7,256                  SET LENGTH TO GET
         LA    R6,WORK256              POINT TO AREA FOR DATA
         B     MVCP                    GO MOVE MORE DATA
*
FOUND    ST    R8,ADDRESS              SAVE ADDRESS OF DATA
NOTFOUND EPAR  R0                      GET PRIMARY ASID
         SSAR  R0                      SET SECONDARY ASID
         MVI   SSARFLAG,X'00'          SECONDARY NO LONGER SET
         ESTAE 0                       REMOVE ESTAE
         MODESET MODE=PROB             BACK TO PROBLEM STATE
*
EXIT     LA    R3,*+6                  POINT PAST BSM
         BSM   R0,R3                   RETURN TO 24-BIT MODE
         LR    R3,R13                  COPY SAVE AREA ADDRESS
         L     R13,4(,R13)             UNCHAIN SAVE AREAS
         STM   R15,R1,16(R13)          SAVE RETURN REGS IN SAVE AREA
         FREEMAIN RU,LV=72,A=(R3)      RELEASE SAVE AREA STORAGE
         LM    R14,R12,12(R13)         RESTORE CALLER'S REGS
         BR    R14                     GO BACK
         USING SDWA,R1
*
ESTAEXIT NOPR  R14
         LM    R2,R12,SDWAGR02         RESTORE MY REGS
         MVI   SSARFLAG,X'00'          NO LONGER IN SECONDARY MODE
         MVC   DATALEN,SDWAABCC
         MVC   DATALEN+3(1),SDWAICD1
         CLC   SDWACMPC(3),=X'0C4000'  INTERCEPTED S0C4 ?
         BE    ESTAEOK                 YES - GO ON
         CLI   SDWAICD1,X'04'
         BE    ESTAEOK
         CLI   SDWAICD1,X'05'
         BE    ESTAEOK
         CLI   SDWAICD1,X'10'
         BE    ESTAEOK
         CLI   SDWAICD1,X'11'
         BE    ESTAEOK
         BR    R14
*
ESTAEOK  LA    R2,NOTAVAIL
         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,DUMP=NO
         BR    R14
*
MOVEWK32 MVC   MWORK32(0),2(R1)
TRANWK32 TR    MWORK32(0),TRCHAR
CLCWORK  CLC   0(0,R5),FINDSTR
TRCHAR   EQU   *-C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRCHAR+C'0'
         DC    C'0123456789'
         ORG
         LTORG
*
         MEMWORK
         MEMDSECT
         PRINT NOGEN
         IHASDWA
         IHAASCB
         REG
         END
