* XMDSTGET - TGET PROCESSOR FOR CROSS-MEMORY BROWSER
* AUTHOR   - MARTIN KLINE
*
XMDSTGET @SAVE BASE=R12                SAVE REGS AND SET BASE
         USING MEMWORK,R10             WORK AREA PASSED VIA REG 10
         MVI   COMMAND,C' '            CLEAR COMMAND AREA
         MVC   COMMAND+1(L'COMMAND-1),COMMAND
         GETMAIN RU,LV=16384           GET WORK AREA
         LR    R9,R1                   COPY WORK AREA ADDRESS
*
         LHI   R0,16000
         TGET  (9),(0),ASIS            GET INPUT
*
*        ST    R10,ADDRESS
*        B     RETURN
*
         MVC   CURSOR,HOME             SET ADDRESS FOR CURSOR
         LA    R2,0(R1,R9)             POINT TO END OF DATA
         MVC   0(3,R2),=X'110000'      INSERT END FLAGS
         LR    R8,R1                   COPY LENGTH
         MVC   AID,0(R9)               PICK UP AID BYTE
         CLI   AID,PF1                 'HELP' KEY ?
         BE    HELP                    YES - GO GET HELP
*
         CLI   AID,PF7                 'UP' KEY ?
         BE    UP                      YES - SCROLL UP
*
         CLI   AID,PF8                 'DOWN' KEY ?
         BE    DOWN                    YES - SCROLL DOWN
*
         CLI   AID,PF11                'LINK' KEY ?
         BE    LINK                    YES - USE FIELD AS LINK ADDRESS
*
         CLI   AID,ENTER               'ENTER' KEY ?
         BE    ENTERK                  YES - PROCESS IT
*
         BNE   EXIT                    OTHERWISE, EXIT
*
HELP     CALL  XMDSHELP                CALL HELP PROCESSOR
         B     EXIT                    RETURN
*
UP       L     R0,ADDRESS              PICK UP OLD ADDRESS
         LR    R1,R0                   COPY IT
         N     R1,=F'31'               TURN OFF ALL BUT 5 BITS
         CLC   COLS,=H'80'             80 COLUMNS ?
         BNE   *+8                     NO - GO ON
         N     R1,=F'15'               YES - TURN OFF ALL BUT 4 BITS
*
         LTR   R1,R1                   ZERO ?
         BZ    UP0                     YES - UP FULL PAGE
*
         SRL   R0,4                    REMOVE 4 BITS FROM ADDRESS
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SRL   R0,1                    NO - REMOVE ANOTHER BIT
*
         AH    R0,=H'1'                ADD ONE
         SLL   R0,4                    RESTORE POSITION
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SLL   R0,1                    NO - RESTORE REMAINING POSITION
*
UP0      LH    R15,ROWS                GET NUM ROWS
         SH    R15,=H'3'               MINUS 3 HEADING ROWS
         MH    R15,=H'16'              TIME 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         MH    R15,=H'2'               NO - TIMES 2 MORE
*
         SLR   R0,R15                  SUBTRACT THAT FROM CURRENT ADDR
         ST    R0,ADDRESS              SET NEW ADDRESS
         B     EXIT                    GO TO EXIT
*
DOWN     L     R1,ADDRESS              PICK UP OLD ADDRESS
         SRL   R1,4                    REMOVE LOW 4 BITS
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SRL   R1,1                    NO - REMOVE ANOTHER BIT
*
         SLL   R1,4                    RESTORE 4 BIT POSITIONS
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SLL   R1,1                    RESTORE ANOTHER POSITION
*
         LH    R15,ROWS                GET NUM ROWS
         SH    R15,=H'3'               MINUS 3 FOR HEADINGS
         MH    R15,=H'16'              TIMES 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         MH    R15,=H'2'               NO - TIMES ANOTHER 2
*
         AR    R1,R15                  ADD TO OLD ADDRESS
         ST    R1,ADDRESS              SET NEW ADDRESS
         B     EXIT                    GO TO EXIT
*
LINK     XR    R0,R0                   CLEAR REG 0
         XR    R1,R1                     AND REG 1
         ICM   R1,3,1(R9)              PICK UP CURSOR POSITION
         CHI   R1,X'4000'
         BL    NOCNVT
         SLL   R1,18                   REMOVE FIRST 14 BITS
         SLDL  R0,6                    PICK OFF NEXT 6 BITS
         SLL   R1,2                    REMOVE 2 BITS
         SRDL  R0,26                   PUT REMAINDER IN REG 1
NOCNVT   LR    R2,R1                   COPY RELATIVE CURSOR POSITION
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BNE   MOD5                    NO - ASSUME 132 COLUMNS
*
         D     R0,=F'80'               DIVIDE OFFSET BY ROW LENGTH
         B     MOD5+4                  GO ON
*
MOD5     D     R0,=F'132'              DIVIDE OFFSET BY ROW LENGTH
         CH    R1,=H'3'                CURSOR IN 1ST 3 ROWS ?
         BL    EXIT                    YES - EXIT
         LH    R15,ROWS                GET NUM ROWS
         SH    R15,=H'3'               MINUS 3
         CR    R1,R15                  CURSOR BEYOND LAST ROW ?
         BNL   EXIT                    YES - EXIT
*
         LA    R1,8                    LOOP LIMIT
         LA    R3,13                   COLUMN 13
*
LINKLOOP CR    R0,R3                   THIS COLUMN ?
         BE    LINK2                   YES - GO ON
*
         LA    R3,10(,R3)              ADD 10 TO COLUMN
         BCT   R1,LINKLOOP             LOOP UP TO 8 TIMES
*
         B     EXIT                    NOT MATCHED - EXIT
*
LINK2    L     R1,MAPPTR               POINT TO MAP POINTER
         L     R1,0(,R1)               POINT TO MAP
         AR    R2,R1                   ADD CURSOR POSITION
         CLI   0(R2),C' '              BLANK ?
         BE    EXIT                    YES - NOT VALID
*
         MVC   MWORK32(8),0(R2)        MOVE DISPLAY DATA TO WORK
         TR    MWORK32(8),TRCHAR       TRANSLATE IT FOR CONVERSION
         PACK  DWORD,MWORK32(9)        PACK IT
         ICM   R1,15,DWORD+3           PICK UP THIS AS ADDRESS
         ST    R1,ADDRESS              SAVE NEW ADDRESS
         MVC   CURSOR,1(R9)            SET CURSOR TO SAME OFFSET
         B     EXIT                    EXIT
*
ENTERK   LA    R8,3(,R9)               POINT PAST CURSOR
*
UNRAVEL  CLC   1(2,R8),=X'0000'        ENDING (FAKE) SBA ?
         BE    EXIT                    YES - EXIT
*
         LA    R3,3(,R8)               POINT PAST 1ST SBA
         TRT   0(256,R3),NEXTSBA       LOOK FOR NEXT SBA
         BZ    EXIT                    NONE - EXIT
*
         LR    R7,R1                   POINT TO SBA
         SR    R7,R3                   CALCULATE DATA LENGTH
         BNZ   CHKSBA                  IF VALID, GO ON
         LA    R8,3(,R8)               POINT PAST SBA
         B     UNRAVEL                 GO UNRAVEL DATA
*
CHKSBA   CLC   0(3,R8),=X'11404E'      SBA FOR FIRST FIELD ?
         BE    SBA1                    YES - HANDLE IT
         CLC   0(3,R8),=X'11000E'      SBA FOR FIRST FIELD ?
         BE    SBA1                    YES - HANDLE IT
*
         CLC   0(3,R8),=X'114061'      2ND FIELD ?
         BE    SBA2                    YES - HANDLE IT
         CLC   0(3,R8),=X'110021'      2ND FIELD ?
         BE    SBA2                    YES - HANDLE IT
*
         CLC   0(3,R8),=X'11406D'      3RD FIELD ?
         BE    SBA3                    YES - HANDLE IT
         CLC   0(3,R8),=X'11002D'      3RD FIELD ?
         BE    SBA3                    YES - HANDLE IT
*
         CLC   COLS,=H'80'             80 COLUMNS ?
         BNE   C132                    NO - GO ON
*
         CLC   0(3,R8),=X'11C15E'      4TH FIELD ?
         BE    SBA4                    YES - HANDLE IT
         CLC   0(3,R8),=X'11002E'      4TH FIELD ?
         BE    SBA4                    YES - HANDLE IT
*
         B     C80                     GO ON
C132     CLC   0(3,R8),=X'11C2D2'      FOURTH FIELD (132 COL) ?
         BE    SBA4                    YES - HANDLE IT
         CLC   0(3,R8),=X'110092'      FOURTH FIELD (132 COL) ?
         BE    SBA4                    YES - HANDLE IT
*
C80      CLC   0(3,R8),=X'11407F'      5TH FIELD ?
         BE    SBA5                    YES - HANDLE IT
         CLC   0(3,R8),=X'11003F'      5TH FIELD ?
         BE    SBA5                    YES - HANDLE IT
         B     EXIT                    OTHER FIELD - EXIT
*
SBA1     MVC   WORK8,=8C'0'            MOVE EIGHT ZEROES TO WORK AREA
         LA    R6,WORK8+7              POINT TO LAST ZERO
         LA    R5,2(R7,R8)             POINT TO 2ND SBA ADDR BYTE
         LR    R4,R7                   COPY ADDRESS
*
S1LOOP   MVC   0(1,R6),0(R5)           MOVE ONE CHARACTER
         BCTR  R6,0                    BACK UP ONE
         BCTR  R5,0                    BACK UP ONE
         BCT   R4,S1LOOP               COPY ALL CHARACTERS
*
         OC    WORK8,=8C' '            CONVERT TO UPPER CASE
         TR    WORK8,TRCHAR            TRANSLATE TO VALID CHARACTERS
         MVI   WORK8+8,X'F0'           NEXT CHARACTER IS ZERO
         PACK  DWORD,WORK8(9)          PACK DATA
         ICM   R1,15,DWORD+3           PICK UP AS ADDRESS
         ST    R1,ADDRESS              SAVE NEW ADDRESS
         LA    R8,3(R7,R8)             POINT PAST FIELD
         B     UNRAVEL                 CONTINUE UNRAVELLING
*
SBA2     MVC   MODE,3(R8)              MOVE CHARACTER TO 24/31 MODE
         OI    MODE,C' '               CONVERT TO UPPER CASE
         LA    R8,3(R7,R8)             POINT PAST CHARACTER
         CLI   MODE,C'A'               IS IT 'A' ?
         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING
*
         CLI   MODE,C'X'               IS IT 'X' ?
         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING
*
         CLI   MODE,C'M'               IS IT 'M' ?
         BE    UNRAVEL                 YES - CONTINUE UNRAVELLING
*
         MVI   MODE,C'D'               MAKE IT 'D'
         B     UNRAVEL                 THEN CONTINUE UNRAVELLING
*
SBA3     MVC   WORK8(4),=4C'0'         MOVE FOUR ZEROES
         LA    R6,WORK8+3              POINT TO LAST ONE
         LA    R5,2(R7,R8)             POINT TO LAST CHARACTER
         LR    R4,R7                   COPY POINTER
*
S3LOOP   MVC   0(1,R6),0(R5)           MOVE ONE CHARACTER
         BCTR  R6,0                    BACK UP ONE
         BCTR  R5,0                    BACK UP ONE
         BCT   R4,S3LOOP               LOOP
*
         OC    WORK8(4),=4C'0'         CONVERT TO UPPER CASE
         PACK  DWORD,WORK8(4)          CONVERT TO PACKED
         CVB   R1,DWORD                CONVERT TO BINARY
         LA    R8,3(R7,R8)             POINT PAST DATA
         LTR   R1,R1                   VALUE = 0 ?
         BZ    UNRAVEL                 YES - CONTINUE UNRAVELLING
*
         L     R2,16                   PICK UP CVT ADDRESS
         L     R2,556(,R2)             PICK UP ASVT ADDRESS
         C     R1,516(,R2)             ASID TOO HIGH ?
         BH    UNRAVEL                 YES - CONTINUE UNRAVELLING
*
         BCTR  R1,0                    SUBTRACT ONE FROM INPUT ASID
         SLL   R1,2                    TIMES 4 (ENTRY LENGTH)
         LA    R1,528(R1,R2)           POINT TO ENTRY FOR THIS ASID
         TM    0(R1),X'80'             ASID IN USE ?
         BO    UNRAVEL                 NO - CONTINUE UNRAVELLING
         MVC   ASCBPTR,0(R1)           YES - COPY ASCB ADDRESS
         B     UNRAVEL                 THEN CONTINUE UNRAVELLING
*
SBA4     LR    R1,R7                   COPY LENGTH
         BCTR  R1,R0                   SUBTRACT ONE FOR EXECUTE
         MVC   COMMAND(0),3(R8)        EXECUTED MOVE
         EX    R1,*-6                  MOVE DATA TO COMMAND FIELD
         LA    R8,3(R7,R8)             POINT TO NEXT INPUT
         B     UNRAVEL                 CONTINUE UNRAVELLING
*
SBA5     MVC   WORK8,=8C' '            MOVE BLANKS TO WORK
         LR    R1,R7                   COPY LENGTH
         BCTR  R1,0                    MINUS ONE FOR EXECUTE
         OC    WORK8(0),3(R8)          EXECUTED INSTRUCTION
         EX    R1,*-6                  MOVE AND CONVERT TO UPPER CASE
         LA    R8,3(R7,R8)             POINT TO NEXT INPUT
         LA    R1,S1CSCB               WHERE TO GO
         ICM   R1,8,=X'80'             31-BIT BIT
         BSM   R0,R1                   SWITCH TO 31-BIT MODE
*
S1CSCB   L     R1,16                   POINT TO CVT
         L     R1,148(,R1)             POINT TO MAST SCHED DATA ARAE
         L     R1,0(,R1)               POINT TO CSCB CHAIN
*
S5LOOP   LTR   R1,R1                   END OF CHAIN ?
         BZ    RESET                   YES - MATCHING CSCB NOT FOUND
*
         CLC   8(8,R1),WORK8           DOES NAME MATCH ?
         BE    S5CSCB                  YES - GO ON
*
         L     R1,0(,R1)               POINT TO NEXT CSCB
         B     S5LOOP                  KEEP ON LOOKING
*
S5CSCB   LH    R1,30(,R1)              GET ASID
         LTR   R1,R1                   IS ASID ZERO ?
         BZ    RESET                   YES - ASID IS NOT VALID
*
         L     R2,16                   POINT TO CVT
         L     R2,556(,R2)             POINT TO ASVT
         C     R1,516(,R2)             IS ASID TOO HIGH ?
         BH    RESET                   YES - ASID NOT VALID
*
         BCTR  R1,0                    ASID - 1
         SLL   R1,2                    TIMES 4 (LENGTH OF ENTRY)
         LA    R1,528(R1,R2)           POINT TO ASCB POINTER
         TM    0(R1),X'80'             ASCB IN USE ?
         BO    RESET                   NO - NOT VALID
*
         MVC   ASCBPTR,0(R1)           COPY ASCB POINTER
         B     RESET                   GO ON
*
RESET    LA    R3,UNRAVEL              POINT TO UNRAVELL ROUTINE
         BSM   R0,R3                   RETURN TO 24-BIT MODE
*
EXIT     FREEMAIN RU,LV=16384,A=(9)    RELEASE WORKING AREA
RETURN   @RETURN ,                     RETURN
*
TRCHAR   EQU   *-C'A'
         DC    X'0A0B0C0D0E0F'
         ORG   TRCHAR+C'0'
         DC    C'0123456789'
         ORG
NEXTSBA  DC    256X'00'
         ORG   NEXTSBA+X'11'
         DC    X'11'
         ORG
         LTORG
         MEMWORK
         MEMDSECT
         REG
         END
