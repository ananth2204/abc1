* XMDSCMD  - FORMAT PROCESSOR FOR CROSS-MEMORY BROWSER
* AUTHOR   - MARTIN KLINE
*
XMDSFORM CSECT
         STM   R14,R12,12(R13)         SAVE REGS
         LR    R12,R15                 SET ADDRESSABILITY
         USING XMDSFORM,R12
         GETMAIN RU,LV=72              GET SAVE AREA
         ST    R13,4(,R1)              CHAIN
         ST    R1,8(,R13)                    SAVE
         LR    R13,R1                             AREAS
         USING MEMWORK,R10             ESTABLISH COMMON ADDRESSABILITY
         L     R9,MAPPTR               POINT TO POINTER
         L     R9,0(,R9)               POINT TO MAP
         USING MEMDSECT,R9             MAKE IT ADDRESSABLE
*
         LA    R1,WORK8                POINT TO 8-BYTE AREA
         L     R0,ADDRESS              PICK UP STORAGE ADDRESS
         BAL   R14,HEXCNVT             CONVERT IT TO PRINTABLE
         MVC   MADDR,WORK8             PUT RESULT IN DISPLAY AREA
         L     R1,ASCBPTR              POINT TO ASCB
         USING ASCB,R1
         ICM   R2,15,ASCBJBNI          GET JOB NAME POINTER
         BNZ   MOVEJOB                 IF AVAILABLE, GO ON
*
         ICM   R2,15,ASCBJBNS          ELSE POINT TO STC NAME
         BNZ   MOVEJOB                 IF AVAILABLE, GO ON
*
         LA    R2,=8C' '               ELSE POINT TO BLANKS
MOVEJOB  MVC   MJOB,0(R2)              PUT JOB NAME INTO DISPLAY
         LH    R0,ASCBASID             GET ASID
         DROP  R1                      LOSE THE ASCB
         CVD   R0,DWORD                CONVERT ASID TO DECIMAL
         UNPK  MASID,DWORD
         OI    MASID+3,C'0'
         MVC   MMODE,MODE              MOVE DECIMAL ASID TO DISPLAY
*
***      @AUTH
         MODESET MODE=SUP              SWITCH STATE
***      @NOAUTH
*
         CLI   MODE,C'X'               31-BIT ADDRESSING ?
         BNE   SETESTAE                NO - GO ON
         LA    R3,SETESTAE             SET WHERE TO GO
         ICM   R3,8,=X'80'             SET 31-BIT BIT
         BSM   R0,R3                   SWITCH TO 31-BIT MODE
*
SETESTAE ESTAE ESTAEXIT,CT             SET UP RECOVERY
*
         STCM  R1,15,MSPIESV           SAVE RESULTS
         L     R8,ADDRESS              PICK UP STORAGE ADDRESS
         SRL   R8,4                    DIVIDE BY 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SRL   R8,1                    NO - DIVIDE BY 2 MORE
*
         SLL   R8,4                    MULTIPLY BY 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SLL   R8,1                    NO - MULTIPLY BY 2 MORE
*
         LH    R7,ROWS                 GET NUMBER OF ROWS ON DISPLAY
         SH    R7,=H'3'                MINUS TOP 3 ROWS
         MVI   SSARFLAG,X'00'          SET NOT IN SSAR MODE
         LH    R15,COLS                GET NUM COLUMNS ON DISPLAY
         MH    R15,=H'3'               TIMES 3
         LA    R9,0(R15,R9)            POINT PAST HEADINGS
         USING MLINE4,R9               ESTABLISH LINE ADDRESSABILITY
*
LINELOOP LA    R0,0(,R8)               GET ADDRESS
         LA    R1,WORK8                POINT TO WORK AREA
         BAL   R14,HEXCNVT             CONVERT ADDRESS TO PRINTABLE
         MVC   MLADDR,WORK8            MOVE ADDRESS TO DISPLAY
         CLI   SSARFLAG,X'FF'          SSAR MODE ?
         BE    INSSAR                  YES - GO ON
*
         EPAR  1                       GET PRIMARY ASID
         SSAR  1                       SET SECONDARY ASID
*
         LA    R1,1                    INDEX = 1
         AXSET AX=(R1)                 SET INDEX
*
         L     R1,ASCBPTR              POINT TO TARGET ASCB
         USING ASCB,R1
         LH    R0,ASCBASID             GET TARGET ASID
         MVI   ESTAEXIT+1,X'0E'        CHANGE THE ESTAE EXIT
         SSAR  0                       SWITCH TO SECONDARY MODE
         MVI   ESTAEXIT+1,X'FE'        CHANGE THE ESTAE EXIT BACK
         MVI   SSARFLAG,X'FF'          SET SSAR INDICATOR FLAG
*
INSSAR   XC    MLKEY,MLKEY             CLEAR KEY
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BNE   MOD5                    NO - ASSUME 132 COLUMNS
         MVI   MLCHAR16,C'|'           MOVE LEADING CHAR TO CHARACTER
         MVI   MLCHAR16+17,C'|'        MOVE TRAILING CHAR
         LA    R6,4                    WILL GET 4 WORDS PER LINE
         LA    R5,MLHEX1               POINT TO FIRST HEX FIELD
         LA    R4,MLCHAR16+1           POINT TO FIRST CHAR FIELD
         LA    R3,MWORK32              POINT TO 32-BYTE WORK AREA
         B     GO                      GO ON
*
MOD5     MVI   MLCHAR32,C'|'           MOVE LEADING CHAR TO CHARACTER
         MVI   MLCHAR32+33,C'|'        MOVE TRAILING CHARACTER
         LA    R6,8                    WILL GET 8 WORDS PER LINE
         LA    R5,MLHEX1               POINT TO FIRST HEX FIELD
         LA    R4,MLCHAR32+1           POINT TO FIRST CHAR FIELD
         LA    R3,MWORK32              POINT TO 32-BYTE WORK AREA
*
GO       XR    R0,R0                   CLEAR REG 0
         LR    R1,R8                   COPY ADDRESS OF DATA
         SRL   R1,4                    DIVIDE ADDRESS BY 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SRL   R1,1                    NO - DIVIDE BY ANOTHER 2
*
         LA    R1,1(,R1)               ADD ONE
         SLL   R1,4                    MULTIPLY BY 16
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
         SLL   R1,1                    NO - MULTIPLE BY ANOTHER 2
*
         SR    R1,R8                   CALCULATE THE DIFFERENCE
         MVI   ESTAEXIT+1,X'0E'        ALTER THE ESTAE
         MVCP  MWORK32(R1),0(R8),0     MOVE THAT MANY BYTES
         MVI   ESTAEXIT+1,X'FE'        RESTORE THE ESTAE
         B     ADDRLOOP                GO FORMAT DATA
*
NOTAVAIL MVC   MLKEY,=C'NA'            SET KEY FIELD TO NOT AVAILABLE
ADDRLUP  MVC   0(8,R5),=8X'00'         SET AREA TO ZEROES
         MVC   0(4,R4),=4C' '          SET DISPLAY AREA TO BLANKS
         LA    R4,4(,R4)               BUMP CHARACTER AREA 4 BYTES
         LA    R5,10(,R5)              BUMP HEX AREA 10 BYTES
         BCT   R6,ADDRLUP              LOOP
         B     BYLINE                  GO ON - LINE NOT AVAILABLE
*
ADDRLOOP LR    R1,R5                   COPY HEX AREA POINTER
         ICM   R0,15,0(R3)             GET 4 BYTES OF DATA
         BAL   R14,HEXCNVT             CONVERT TO PRINTABLE
*
         MVC   0(4,R4),0(R3)           MOVE TO CHARACTER AREA
         LA    R3,4(,R3)               BUMP DATA POINTER
         LA    R4,4(,R4)               BUMP CHARACTER POINTER
         LA    R5,10(,R5)              BUMP HEX POINTER
         BCT   R6,ADDRLOOP             LOOP THROUGH DATA
*
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BNE   MOD5T                   NO - ASSUME 132 COLUMNS
*
         TR    MLCHAR16,VALIDTRT       TRANSLATE PRINTABLE CHARS
         B     *+10                    GO ON
*
MOD5T    TR    MLCHAR32,VALIDTRT       TRANSLATE 32 PRINTABLES
         LH    R15,ROWS                GET NUMBER OF ROWS
         SH    R15,=H'3'               MINUS 3 FOR HEADING
         CR    R7,R15                  LAST LINE ?
         BNE   BYLINE                  NO - GO ON
*
         L     R2,ADDRESS              PICK UP ADDRESS
         SLL   R2,27                   JUST KEEP THE LAST 5 BITS
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BNE   *+8                     NO - GO ON
         SLL   R2,1                    YES - JUST THE LAST 4 BITS
*
         LTR   R2,R2                   IS REG ZERO ?
         BZ    BYLINE                  YES - NEW LINE
*
         SRDL  R2,29                   KEEP JUST 3 BITS
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BNE   *+8                     NO - GO ON
         SRDL  R2,1                    YES - JUST KEEP 2 BITS
*
         SRL   R3,30
         LA    R5,MLHEX1
         LA    R4,MLCHAR16+1
         CLC   COLS,=H'80'
         BE    *+8
         LA    R4,MLCHAR32+1
*
         LTR   R2,R2
         BZ    ENDWDS
*
L1FIX1   MVC   0(8,R5),=CL8' '         MOVE BLANKS TO HEX FIELD
         MVC   0(4,R4),=CL8' '         MOVE BLANKS TO CHAR FIELD
         LA    R5,10(,R5)              SKIP OVER HEX FIELD
         LA    R4,4(,R4)               SKIP CHAR FIELD
         BCT   R2,L1FIX1               LOOP
*
ENDWDS   LTR   R3,R3                   ANY MORE ?
         BZ    BYLINE                  NO - DONE WITH LINE
*
L1FIX2   MVC   0(2,R5),=CL8' '         MOVE 2 BLANKS TO HEX FIELD
         MVI   0(R4),C' '              MOVE 1 BLANK TO CHAR FIELD
         LA    R5,2(,R5)               BUMP HEX POINTER
         LA    R4,1(,R4)               BUMP CHAR POINTER
         BCT   R3,L1FIX2               LOOP THROUGH ONE FIELD
*
BYLINE   AH    R9,COLS                 BUMP COLUMN POINTER
         LA    R8,16(,R8)              BUMP ADDRESS POINTER
         CLC   COLS,=H'80'             80-COLUMN DISPLAY ?
         BE    *+8                     YES - GO ON
*
         LA    R8,16(,R8)              NO - BUMP ADDRESS POINTER AGAIN
         BCT   R7,LINELOOP             LOOP THROUGH LINES
*
         XC    MSPIESV,MSPIESV
         EPAR  0                       GET PRIMARY ASID
         SSAR  0                       RESET SECONDARY ASID
*
         MVI   SSARFLAG,X'00'          RESET SSAR FLAG
***      @AUTH
         MODESET MODE=PROB             BACK TO PROBLEM STATE
***      @NOAUTH
         ICM   R2,15,MSPIESV
         ESTAE 0                       RESET ESTAE
*
         LA    R3,*+6                  POINT WHERE TO GO
         BSM   R0,R3                   SWITCH TO 24-BIT MODE
*
         LR    R3,R13                  POINT TO SAVE AREA
         L     R13,4(,R13)             UNCHAIN SAVE AREAS
         STM   R15,R1,16(R13)          SAVE RETURN REGS
         FREEMAIN RU,LV=72,A=(R3)      RELEASE MY SAVE AREA STORAGE
         LM    R14,R12,12(R13)         RESTORE REGS
         BR    R14                     GO BACK
*
         USING SDWA,R1
ESTAEXIT NOPR  R14                     ALTERABLE INSTRUCTION
         LM    R2,R12,SDWAGR02         RESTORE MY REGS
         MVI   ESTAEXIT+1,X'FE'        CHANGE ESTAE TO A BRANCH
         MVI   SSARFLAG,X'00'          NOT IN SSAR
         MVC   DATALEN,SDWAABCC
         CLC   SDWACMPC,=X'0D5000'     S0D5 ABEND ?
         BE    ESTAEOK                 YES - OK
         CLI   SDWAICD1,X'04'
         BE    ESTAEOK
         CLI   SDWAICD1,X'05'
         BE    ESTAEOK
         CLI   SDWAICD1,X'10'
         BE    ESTAEOK
         CLI   SDWAICD1,X'11'
         BE    ESTAEOK
         BR    R14                     RETURN
*
ESTAEOK  LA    R2,NOTAVAIL
         SETRP RC=4,RETADDR=(R2),FRESDWA=YES,DUMP=NO
         BR    R14
*
HEXCNVT  LA    R15,8                   LENGTH TO CONVERT
HLOOP    STC   R0,7(,R1)               SAVE ONE NIBBLE
         SRL   R0,4                    SHIFT IT OFF
         BCTR  R1,0                    BACK UP A BYTE
         BCT   R15,HLOOP               LOOP THROUGH WORD
         LA    R1,8(,R1)               POINT TO TARGET AREA
         MVZ   0(8,R1),=8X'00'         SET ZONES TO ALL ZEROES
         TR    0(8,R1),HTRTAB          CONVERT TO PRINTABLE HEX
         BR    R14                     RETURN
*
SAVE0    DC    F'0'
HTRTAB   DC    C'0123456789ABCDEF'
VALIDTRT DC    256C'.'
         ORG   VALIDTRT+C' '
         DC    C' '
         ORG   VALIDTRT+C'|'
         DC    C'|'
         ORG   VALIDTRT+X'3F'
         DC    C'. <(+|&&'
         ORG   VALIDTRT+C'!'
         DC    C'!$*);¬-/'
         ORG   VALIDTRT+C'`'
         DC    C'`:#@''="'
         ORG   VALIDTRT+X'81'
         DC    X'818283848586878889'
         ORG   VALIDTRT+X'91'
         DC    X'919293949596979899'
         ORG   VALIDTRT+X'A1'
         DC    X'A1A2A3A4A5A6A7A8A9'
         ORG   VALIDTRT+C'{'
         DC    C'{ABCDEFGHI'
         ORG   VALIDTRT+C'}'
         DC    C'}JKLMNOPQR'
         ORG   VALIDTRT+C'\'
         DC    C'\.STUVWXYZ'
         ORG   VALIDTRT+C'0'
         DC    C'0123456789'
         ORG
         LTORG
         MEMWORK
         MEMDSECT
         PRINT NOGEN
         IHAASCB
         IHASDWA
         REG
         END
