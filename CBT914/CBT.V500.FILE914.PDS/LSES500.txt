++USERMOD(LSES500)
 /* ***************************************************************
    ** *                                                       * **
    ** * THIS USERMOD HANDLES ALL CHANGES REQUIRED TO CREATE   * **
    ** * LOCAL EXTENSIONS TO THE JQE AND JCT.                  * **
    ** *                                                       * **
    ** *    THIS ONE USERMOD (PLUS INIT STATEMENTS) IS ALL     * **
    ** *    THAT IS NEEDED TO INSTALL THE SHARED SPOOL MODS.   * **
    ** *    SAMPLE INIT STATEMENTS ARE IN MEMBER JES2PARM      * **
    ** *   SEE THE @@README MEMBER TO LOCATE ALL DOCUMENTATION * **
    ** *                                                       * **
    ** *  YOU MAY HAVE TO UPDATE THE FMID FOR JES2 HJE7790 -   * **
    ** *  CHECK YOUR CURRENT SMPE ZONES.                       * **
    ** *                                                       * **
    ** *  ALL ELEMENTS ARE *NEW* EXCEPT FOR MAC($USERCBS), IF  * **
    ** *  YOU HAVE APPLIED MAINTENANCE TO $USERCBS, YOU WILL   * **
    ** *  HAVE TO CHANGE $USERCBS IN THIS USERMOD TO REFLECT   * **
    ** *  THE ORIGINAL CHANGES AS WELL AS ADD A ++VER FOR THE  * **
    ** *  MAINTNENANCE THAT CHANGED THE MACRO.                 * **
    ** *                                                       * **
    ** *    THOSE USERS WHO WANT *ALL* OF THE BANKS JES2 UMODS * **
    ** *    USERMODS AND NOT JUST THE SHARED SPOOL MODS,       * **
    ** *    SHOULD INSTALL LSES501 *INSTEAD* OF LSES500.       * **
    ** *    (I WOULD NOT RECOMMEND INSTALLING ALL BANK MODS!)  * **
    ** *                                                       * **
    ** *  AUTHOR: STPEHEN MCCOLLEY                             * **
    ** *          MCCOLLEY SYSTEMS GROUP INC.                  * **
    ** *          WWW.MVSPROGRAMMER.COM                        * **
    ** *          EMAIL - STEPHEN.MCCOLLEY@MVSPROGRAMMER.COM   * **
    ** *          ATLANTA, GA.                                 * **
    ** *                                                       * **
    ** *          DDDD   OOO        N   N  OOO  TTTTT          * **
    ** *          D   D O   O       NN  N O   O   T            * **
    ** *          D   D O   O       N N N O   O   T            * **
    ** *          D   D O   O       N  NN O   O   T            * **
    ** *          DDDD   OOO        N   N  OOO    T            * **
    ** *                                                       * **
    ** *  *** P L E A S E   D O  N O T  E v e r  renumber !    * **
    ** *   (future maintenance requires THESE line numbers)    * **
    ** *                                                       * **
    ***************************************************************
    */ .
++VER(Z038) FMID(HJE7790)
++MAC(BOOLEAN)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
               ASSEM(STJTABS,STSCX54B,STSC2050,STSCX49A) .
         MACRO
         BOOLEAN &B
.*
.* sample invocation:     label1  boolean  flag1,(d1fil1,d1fil2,f3,f4)
.*                        equated fields are filled from x'80' to x'01'
.*                        with names from first to last in parens
.*
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
         GBLC  &SWN(100)
         GBLC  &SWB(800)
         GBLA  &SWA(800)
         GBLA  &SW1
         GBLA  &SW2
         LCLC  &OP1
         LCLC  &OP2
         LCLC  &SWL
         LCLA  &NM
         LCLA  &NN
         LCLC  &TEMP
         AIF   (N'&SYSLIST NE 2).SW0010
&OP1     SETC  '&SYSLIST(1)'
&OP2     SETC  '&SYSLIST(2)'
         AGO   .SW0040
.SW0010  ANOP
         MNOTE 8,'BOOLEAN01 - TWO PARAMETERS MUST BE USED ON "BOOLEAN" *
               MACRO (THE FIRST MAY BE NULL)'
         MEXIT
.SW0040  ANOP
         AIF   (N'&SYSLIST(2) GT 8).SW0070
         AIF   (N'&SYSLIST(2) LT 1).SW0080
&NM      SETA  1
&SWL     SETC  '&OP1'
&SW1     SETA  &SW1+1
&SWN(&SW1) SETC '&SWL'
***** START OF SWITCH BYTE *****
         AIF   ('&SWL' EQ '').SW0050
&SWL     DS    X'00'
.SW0050  ANOP
         AIF   (K'&SYSLIST(2,&NM) LT 1).SW0090
&SWL     SETC  '&SYSLIST(2,&NM)'
         AIF   (&NM EQ 1).SW00580
         AIF   (&NM EQ 2).SW00540
         AIF   (&NM EQ 3).SW00520
         AIF   (&NM EQ 4).SW00510
         AIF   (&NM EQ 5).SW00508
         AIF   (&NM EQ 6).SW00504
         AIF   (&NM EQ 7).SW00502
&TEMP    SETC  'X''01'''
         AGO   .SW0050A
.SW00502 ANOP
&TEMP    SETC  'X''02'''
         AGO   .SW0050A
.SW00504 ANOP
&TEMP    SETC  'X''04'''
         AGO   .SW0050A
.SW00508 ANOP
&TEMP    SETC  'X''08'''
         AGO   .SW0050A
.SW00510 ANOP
&TEMP    SETC  'X''10'''
         AGO   .SW0050A
.SW00520 ANOP
&TEMP    SETC  'X''20'''
         AGO   .SW0050A
.SW00540 ANOP
&TEMP    SETC  'X''40'''
         AGO   .SW0050A
.SW00580 ANOP
&TEMP    SETC  'X''80'''
.SW0050A ANOP
&SWL     EQU   &TEMP
&NM      SETA  &NM+1
&SW2     SETA  &SW2+1
&SWB(&SW2) SETC '&SWL'
&SWA(&SW2) SETA &SW1
         AIF   (&NM LE N'&SYSLIST(2)).SW0050
*****  END OF SWITCH BYTE  *****
         MEXIT
.SW0070  ANOP
         MNOTE 8,'BOOLEAN02 - 8 IS THE MAXIMUM NUMBER OF BIT NAMES ALLO*
               WED'
         MEXIT
.SW0080  ANOP
         MNOTE 8,'BOOLEAN03 - AT LEAST 1 BIT NAME MUST BE SPECIFIED'
         MEXIT
.SW0090  ANOP
&TEMP    SETC  '&NM.TH'
         AIF   (&NM GT 3).SW0090C
         AIF   (&NM EQ 1).SW0090A
         AIF   (&NM EQ 2).SW0090B
&TEMP    SETC  '3RD'
         AGO   .SW0090C
.SW0090A ANOP
&TEMP    SETC  '1ST'
         AGO   .SW0090C
.SW0090B ANOP
&TEMP    SETC  '2ND'
.SW0090C ANOP
         MNOTE 8,'BOOLEAN04 - THE &TEMP PARAMETER OF THE BIT NAME LIST *
               IS INVALID'
         MEND
++MAC($STJCTX)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
               ASSEM(STJTABS,STSCX54B,STSC2050,STSCX49A) .
         MACRO  - $STJCTX -- JCT EXTENTION
&LABEL   $STJCTX
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.*********************************************************************
.*                                                                   *
.* FUNCTION: MAPPING MACRO FOR JCT EXTENTION.                        *
.*                                                                   *
.* REVISION HISTORY:                                                 *
.*                                                                   *
.*   DATE   NAME         DESCRIPTION OF CHANGE                       *
.* -------- ------------ ---------------------------------------------*
.* 04/20/00 S MCCOLLEY   ADDED THIS COMMENT BLOCK. *                  *
.* 11/13/03 S MCCOLLEY   ADDED CONDITIONAL EXPANSION OF $JCTX *       *
.* 08/18/06 S MCCOLLEY   ADDED VRM FIELD - TO AIDE OTHERS IN DEBUGGING*
.* 10/11/06 S MCCOLLEY   ADDED NEW JCX AND BERT FIELDS FOR UPGRADE    *
.* 10/11/06 S MCCOLLEY   ADDED COMMON DSECT FOR ECSA AREA - HOLDS THE *
.*                            VALUES FOR NEW PARMS -SMF#, WAITS ETC.  *
.* *                                                                  *
.**********************************************************************
         LCLC  &JCXOK
&JCXOK   SETC  T'JCXORG                     GET THE TYPE FOR JCXORG
         AIF   ('&JCXOK' NE 'U').STNXPND      ** IF NOT DEFINED ADD IT
         $JCTX
.STNXPND ANOP
STJCTX   DSECT
*
* STSC EXTENSION OF THE JCT TO BE USED FOR ALL EXITS
*
         DS    XL(JCXORG-JCTX)     DEFINE REQUIRED $JCTX PREFIX AREA
*
UJCXMFLG DS    XL1                 RESOURCE ROUTING FLAGS
UJCXAFT  EQU   B'00000001'           /*AFTER  SPECIFIED
UJCXBEF  EQU   B'00000010'           /*BEFORE SPECIFIED
UJCXCNTL EQU   B'00000100'           /*CNTL   SPECIFIED
UJCXWITF EQU   B'00001000'           /*WITH   SPECIFIED
*              B'11110000'           # OF /*CNTL NAMES PRESENT
*
*                                  i.e. what type cards are present
        BOOLEAN UJCXUFLG,(UJCXXVRM,UJCXXEYE)
*--UJCXXVRM  VRM FIELD IS PRESENT
*--UJCXXEYE  EYECATCHER IS PRESENT- it also indicates a new format rec.
UJCXDLYS DS    X                   JOB DELAY REASONS FROM OUR EXIT 49
*
UJCXWITH DS    CL8                 SAVE A WITH NAME HERE
UJCXAFTN DS    CL8                 SAVE AN AFTER NAME HERE
UJCXBFOR DS    CL8                 SAVE A BEFORE NAME HERE
UJCXDNAM DS    CL45                NAMES FROM CNTL CARDS AND THEIR     X
                                    SHARE TYPES - CL8=NAME, FOLLOWED BYX
                                    1 BYTE OF TYPE CL8RESNAME, CL1TYPE
*
         DS    0H                  DOUBLE WORD ALLIGN
*
*
*** NOTE ! ! ***  the old version had the 4 byte work field where we
*            ***  now keep the VRM field - that way we can safely test
*            ***  for a VRM value - old versions won't have a vrm, but
*            ***  there will be a data area so we won't get an abend
*            ***  when checking for one.
*            ***  This is just a safeguard, since we will also check
*            ***  to see if the VRM and EYECATCHER flags are on before
*            ***  trying to use any of the new fields.
*
UJCXVRM  DS    XL4                 VRM AREA X'00VVRRMM' USEFUL ID INFO
*
*
*  NEW fields from here on down... (ujcxwork and ujcxvrm were swapped)
*
*
UJCXWORK DS    CL4                 UNUSED, BUT KEPT FOR COMPATABILITY
*
UJCXID   DS    CL4                 EYECATCHER CL4'JCX' JCT EXTENSION
** *************************************************************** **
** *************************************************************** **
**                           **                                    **
**                           **                                    **
** SSM  SHARED SPOOL MODS - NEW FUNCTION ZOS 1.8 11/06 START THERE **
**                                                                 **
** *************************************************************** **
*
*
*/* FLAGS BYTE     - SUPPORT FOR WAITFOR AND WAITTILL
*
      BOOLEAN UJCWATF,(UJCWATT,UJCWATFR,UJCWATTS,UJCWATFS,UJCWALLS)
*
*-- UJCWATT      WAIT UNTIL TIME SPECIFIED
*-- UJCWATFR     WAIT FOR TIME SPECIFIED
*-- UJCWATTS     WAIT UNTIL IS SATISFIED
*-- UJCWATFS     WAIT FOR TIME IS SATISFIED
*-- UJCWALLS     ALL WAIT TIMES ARE NOW SATISFIED
*
       BOOLEAN UJCTAPF1,(UJCTPANY,UJCTAPNON)
*
*-- UJCTPANY     SET IF ANY TAPES ARE REQUIRED
*-- UJCTPNON     SET WHEN NO MORE TAPES ARE NEEDED
*
*/* FLAGS BYTE     - misc. support member routing - noauto and without
*
       BOOLEAN UJCMSCF1,(UJCMSWOJ,UJCMSNOT,UJCMSMEM,UJCMSNMM)
*
*-- UJCMSWOJ     WITHOUT JOBNAME SPECIFIED
*-- UJCMSNOT     NO AUTO RESOURCE ROUTING THIS JOB
*-- UJCMSMEM     OK MEMBER ROUTING PRESENT
*-- UJCMSNMM     NOT OK MEMBER ROUTING PRESENT
*
UJCOPNF  DS    XL1                 AN OPEN UNUSED FLAG BYTE
*
* FIELDS FOR /*HOLDTIL HH:MM:SS  CARDS
*
*  ALL TIME VALUES ARE BIN EQUIVELENT TIME VALUES
*
UJCHLDU  DS    XL4                 USER REQUESTED HOLD UNTIL TIME
*                                   x'hhmmss0f' is the format
UJCHLDUX DS    XL4                 TIME / DATE HOLD TILL IS SATISFIED
*                                   STCK TIME FORMAT OR STKE+1(4)
*
* SUPPORT /*HOLDFOR HH:MM:SS  CARDS
*
UJCHLDF  DS    XL4                 USER REQUESTED HOLD FOR TIME
*                                   x'hhmmss0f' is the format
UJCHLDFX DS    XL4                 TIME / DATE hoLDFOR IS SATISFIED
*                                   STCK TIME FORMAT OR STKE+1(4)
*
UJWIOUT  DS    CL8                 SUPPORT FOR /*WITHOUT JOBNAME
*
*    LIMIT JOB SELECTION BASED ON A MAS MEMBER NAME(S)
*
*
UJMMTQE  DS    XL1                 BIT MAPPED BYTE SHOWS WHICH MEMBERS
*                                  OF THE MAS HAD $STIMERS ISSUED FOR
*                                  THE CURRENT WAIT REASON -
*                                  MEMBER 1 =B'XXXX XXX1'
*                                  MEMBER 4 =B'XXXX 1XXX' ETC. ETC.
*
UJMMSTK  DS    8XL4                ROOM FOR 8 STCK VALUES FROM 8 MEMBER
*                                  MEMBER STARTUP TIMES, USED WITH
*                                  STTQEX AND $STIMER, AND UBRMMTQE.
UJRSVD   DS    XL31                RESERVED, CURRENTLY UNUSED SPACE.
*
UJCXSLN1 EQU   *-STJCTX            LENGTH OF SECTION
*
         MEND
++MAC($STQNAME) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
               ASSEM(STJTABS,STSC2050,STSCX54B,STSCX49A) .
         MACRO -- $STQNAME -- SUNTRUSTS JQE EXTENSION
&LABEL   $STQNAME &DSECT=YES
.*
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.**********************************************************************
.*
.* FUNCTION: DEFINE A BERT, AN EXTENSION TO THE JQE.
.*
.* NOTES:    THIS BERT ENTRY CONTAINS ALL THE FIELDS WE USED TO
.*           INCLUDE INTO THE $JQE MACRO PRIOR TO OS/390.
.*
.*           SOME OF THESE FIELD MUST BE IDENTICALLY DEFINED AND USED
.*           IN THE JCTX: UBRDNAME, UBRUFLAG, UBRMFLAG, UBRDLAYS.
.*
.*
.* REVISION HISTORY:
.*
.*   DATE   NAME         DESCRIPTION OF CHANGE
.* -------- ------------ ----------------------------------------------
.* 04/20/00 S MCCOLLEY   INITIAL VERSION -- FOR OS/390 2.6.
.*
.**********************************************************************
.*
STQNAME  DSECT ,
*
* UBRDNAME IS THE LIST OF AFTER/BEFORE JOBNAMES AND/OR CNTL RESOURCES
*          AND THE /*CNTL SHARE TYPE ("S" OR "E").  THESE SHARE TYPE
*          BYTES IMMEDIATELY FOLLOW THE RESOURCE NAME.
*
*   AFTER   (IF ANY) MUST BE FIRST  (SEE UBRAFT).
*   BEFORE  (IF ANY) MUST BE SECOND (SEE UBRBEF).
*   CNTL(S) (IF ANY) MUST BE LAST   (SEE UBRCNTL AND 4 HIGH ORDER BITS
*           OF UBRMFLAG.  THERE CAN BE UP TO 4 CNTL NAMES.)
*
UBRWITH  DS    CL8                 PLACE TO HOLD A /*WITH NAME
UBRAFTR  DS    CL8                 PLACE TO HOLD A /*AFTER NAME
UBRBFOR  DS    CL8                 PLACE TO HOLD A /*BEFORE NAME
UBRDNAME DS    CL45                NAMES FROM CNTL CARDS AND SHARE TYPES
                                   CL8(RESNAME)+CL1(TYPE) TYPE=S¦E¦P
UBRDNAML EQU   9                   LENGTH OF EACH NAME/SHARE TYPE FIELD
*
*                               UBRUFLAG WAS ** UNUSED ** BEFORE 1.7
        BOOLEAN UBRUFLAG,(UBRXXVRM,UBRXXEYE)
*-- UBRXXVRM  VRM FIELD IS PRESENT
*-- UBRXXEYE  EYECATCHER IS PRESENT
*
*
UBRMFLAG DS    BL1                 RESOURCE FLAGS
UBRAFT   EQU   B'00000001'           /*AFTER  SPECIFIED
UBRBEF   EQU   B'00000010'           /*BEFORE SPECIFIED
UBRCNTL  EQU   B'00000100'           /*CNTL   SPECIFIED
UBRWITHF EQU   B'00001000'           /*WITH   SPECIFIED
*              B'11110000'           # OF /*CNTL NAMES PRESENT
*
UBRNCTL  EQU   X'08'               MAX # OF NAMES INCLUDING
*                                    /*AFTER, /*BEFORE, AND  /*CNTL
*
*
UBRDLAYS DS    BL1                 DELAY REASONS FROM OUR EXIT 49.  .
*
*  THE - UBRXXVRM BIT IS NEW - IT WAS UNUSED BEFORE AND WILL BE TESTED
* BEFORE TRYING TO ACCESS ANY OF THE NEW EXPANDED FIELDS.  IT IS
* SIMPLY A BIT USED FOR COMPATIBILITY AS WE EXPAND THE EXTENSIONS FOR
* NEW FUTURE FUNCTION AND ADD VRM FIELDS AT THE JES2 1.7 LEVEL.
*
*
*
UBRDLWIT EQU   X'01'                /*WITH CONTENTION DELAY
UBRDLWIO EQU   X'02'                /*WITHOUT  CONTENTION (RESUSED)
UBRDLWFR EQU   X'03'                TIMING DELAY HOLDTIL/FOR (REUSD
UBRDLWTL EQU   X'04'                TIMING DELAY HOLDTIL/FOR (REUSD
UBRDLWTG EQU   X'05'                 GENERAL PURPOSE WAIT
UBRDLDUP EQU   X'06'                HOLD/DUP   CONTENTION
UBRDLAFT EQU   X'07'                /*AFTER    CONTENTION
UBRDLBEF EQU   X'08'                /*BEFORE   CONTENTION
UBRDLCTL EQU   X'09'                /*CNTL     CONTENTION
UBRDLCLS EQU   X'0A'                CLASS LIMIT REACHED
UBRDLJNM EQU   X'0B'                JOBNAME MASK LIMIT HAS BEEN REACHED
UBRDLSEL EQU   X'0C'                JOB HAS BEEN SELECTED - NO DELAY
UBRDLUID EQU   X'0D'                UID MASK LIMIT REACHED
*                                  SET TO MATCH THE UJCXWORK WORK AREA
UBRVRM   DS    XL4                X'00VVRRMM' (VRM) 1.7.0
*
UBRVRML  EQU   00010700            THE VRM VALUE
UBRXID   DS    CL4                EYECATCHER CL4'JQEX'  JQE BERT EXT.

       BOOLEAN UBRWATF,(UBRWATT,UBRWATFR,UBRWATTS,UBRWATFS,UBRWALLS)
*
*-- UBRWATT    WAIT UNTIL TIME SPECIFIED
*-- UBRWATFR   WAIT FOR TIME SPECIFIED
*-- UBRWATTS   WAIT UNTIL IS SATISFIED
*-- UBRWATFS   WAIT FOR TIME IS SATISFIED
*-- UBRWALLS   ALL WAIT TIMES ARE NOW SATISFIED
*
       BOOLEAN UBRTAPF1,(UBRTPANY,UBRTAPNON)
*
*-- UBRTPANY   SET IF ANY TAPES ARE REQUIRED
*-- UBRTPNON   SET WHEN NO MORE TAPES ARE NEEDED
*
*/* FLAGS BYTE     - SUPPORT FOR THIS AND THAT - LEFT OVERS
*
       BOOLEAN UBRMSCF1,(UBRMSWOJ,UBRMSNOT,UBRMSMEM,UBRMSNMM,          X
               UBRSABEF,UBRSAAFT)
*
*-- UBRMSWOJ   WITHOUT JOBNAME SPECIFIED
*-- UBRMSNOT   NO AUTO RESOURCE ROUTING THIS JOB
*-- UBRMSMEM   OK MEMBER ROUTING PRESENT
*-- UBRMSNMM   NOT OK MEMBER ROUTING PRESENT
*-- UBRSABEF   POSITIVE ACKNOLEDGEMENT OF BEFORE IS SATISFIED.
*-- UBRSAAFT   POSITIVE ACKNOLEDGEMENT OF AFTER IS SATISFIED.
*
*
UBROPNF1 DS    XL1                 AN OPEN FLAG - FOR ALIGNMENT
*
*
*
* FIELDS FOR /*HOLDTIL HH:MM:SS VALUES
*
*  ALL TIME VALUES ARE BIN EQUIVELENT TIME VALUES
*
UBRHLDU  DS    CL4                 USER REQUESTED HOLD UNTIL TIME
*                                   x'hhmmss0f' is the format
UBRHLDUX DS    XL4                 DATE/TIME HOLDTIL WILL BE SATISFIED
*                                   STCK TIME FORMAT OR STKE+1(4)
*
* SUPPORT /*HOLDFOR HH:MM:SS  CARDS
*
UBRHLDF  DS    CL4                 USER REQUESTED HOLD FOR TIME
*                                   x'hhmmss0f' is the format
UBRHLDFX DS    XL4                 DATE/TIME HOLDFOR WILL BE SATISFIED
*                                   STCK TIME FORMAT OR STKE+1(4)
*
UBRWIOUT DS    CL8                 SUPPORT FOR /*WITHOUT JOBNAME
*
*    LIMIT JOB SELECTION BASED ON A MAS MEMBER NAME(S)
*
*

UBRMMTQE DS    XL1                 BIT MAPPED BYTE SHOWS WHICH MEMBERS
*                                  OF THE MAS HAD $STIMERS ISSUED FOR
*                                  THE CURRENT WAIT REASON -
*                                  MEMBER 1 =B'XXXX XXX1'
*                                  MEMBER 4 =B'XXXX 1XXX' ETC. ETC.
*
UBRMMSTK DS    8XL4                ROOM FOR 8 STCK VALUES FROM 8 MEMBER
*                                  MEMBER STARTUP TIMES, USED WITH
*                                  STTQEX AND $STIMER, AND UBRMMTQE.
UBRRSVD  DS    XL31                RESERVED, CURRENTLY UNUSED SPACE.
*
*
STQNAMELN EQU  *-STQNAME           LENGTH OF THE BERTIE
*
         MEND
++MAC($SSMTB)   SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
      ASSEM(STJTABS,STSCX49A,STSCX54B,STSCX19A,STSCX24A,STSSMTBS) .
         MACRO - $SSMTB - SunTrust Common ECSA area for SSM controls
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.**********************************************************************
.*
.* $SSMTB - our SSM table area, referenced through a Name/Token pair.
.* The name used to get our token changes depending on whether JES2
.* has fully initialized:  at first, it is the literal SSMTEMP- plus
.* the JES2 ASID, but after initialization, it is SSM plus the local
.* XCFGRPNM.  The token is laid out as follows (16 bytes long):
.*
.*       AL4   A($SSMTB)
.*       CL4   =C'SSMT'
.*       AL4   A($SSMTB- BACKUP)
.*       AL4   OPEN FOR NOW - OR - C'SSMT'
.*
.**********************************************************************
&LABEL   $SSMTB
SSMTB    DSECT  ,
* SSMT Identification information
SSMLEN   DS     F                  length of table
SSMEYE   DS     CL4                eyecatcher  "SSMT"
SSMVRM   DS     XL4                version numeric X'00VVRRMM'
SSMUPCEC DS     F                  POINTER TO FIRST OF OUR TQEX PCE'S
SSMPCEDH EQU    (SSMUPCEC-SSMTB)   DISPLACEMENT TO USER PCE HEAD PTR
SSMUPCEK DS     F                  COUNTS FOR OUR TQEX PCES
*                                  1ST XL2 = #DEFINED, 2ND XL2 = #ACTIV
SSMPCEDK EQU    (SSMUPCEK-SSMTB)   DISPLACEMENT TO USER PCE COUNTS
*
SSMTQCB1 DS     F                  POINTER TO FIRST TQE CONTROL BLOCK
*
* Global SSM controls
*
SSMSMFNM DS     B                  SMF record number (0-255)
*
SSMSMFOP DS     CL1                SMF option:
SSMSMF_ALL      EQU  C'A'             All
SSMSMF_INPUT    EQU  C'I'             Input
SSMSMF_ACTION   EQU  C'X'             Action
SSMSMF_NONE     EQU  C' '             None
*
         DS     B                  open/reserved byte
*
SSMALLWS DS     B                  Allow $S commands (on/off)
SSMALLWS_ON     EQU  X'FF'            allow
SSMALLWS_OFF    EQU  X'00'            do not allow (default)
*
SSMCLSOP DS     B                  Limit by class (use/do not use)
SSMCLSOP_ON     EQU  X'FF'            use limit
SSMCLSOP_OFF    EQU  X'00'            use limit
*
SSMBEAFT DS     CL1                Before/After processing:
SSMBEAFT_POS    EQU  C'P'             Positive - future option only!
SSMBEAFT_DELAY  EQU  C'D'             Delay
SSMBEAFT_PREMOD EQU  C' '             Pre-modification behaviour
SSMBATIM DS     H                  Before/After time (for delay)
*
SSMUIDMX DS     H                  Userid Max (1-4096)
SSMUMASK DS     BL2                Userid Mask (bit representation)
         ORG    SSMUMASK
SSMUMHI  DS     B                     first four characters
SSMUMLO  DS     B                     last four characters
*
SSMJBNMX DS     H                  Jobname Max (1-4096)
SSMJMASK DS     BL2                Jobname Mask (bit representation)
         ORG    SSMJMASK
SSMJMHI  DS     B                     first four characters
SSMJMLO  DS     B                     last four characters
*
SSMUMSKC DS     CL8                Userid Mask (characters)
SSMJMSKC DS     CL8                Jobname Mask (characters)
*
SSMMSK1         EQU  C'U'             represent U as 1 bit
SSMMSK0         EQU  C'*'             represent * as 0 bit
*
*
SSMCLSLM DS     100Y               Class limit table
SSMCLSEN        EQU  SSMCLSLM,2,C'Y'  Class limit entry
SSMCLSLN        EQU  *-SSMCLSLM       length of limit table
SSMCLSNO        EQU  (SSMCLSLN/L'SSMCLSEN)  # of entries
*
SSMTBLEN EQU    ((((*-SSMTB)+7)/8)*8)    actual length (in doublewds)
         MEND
++MAC($STTQE)  SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
         ASSEM(STJTABS,STSCX49A).
         MACRO
&LABEL   $STTQE  &DSECT=YES
         AIF   ('&DSECT' NE 'YES').NDS1
STTQE    DSECT
.NDS1    ANOP
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.**********************************************************************
.* THIS MACRO EXPANSION MAPS A STTQEX - TQE EXTENSION - ONE IS
.*  OBTAINED ( SOMEHOW ) WHEN NEEDED BY EXIT49A - WHEN A JOB IS
.*  REJECTED FOR A TIME RELATED REASON (HOLDFOR, GENERAL BEAFT/ ETC)
.*   LOOKS LIKE ABOUT 24 BYTES WITH AT JES2 1.7
.**********************************************************************
STTQFP   DS    F                   FORWARD POINTER
STTQBK   DS    F                   BACKWARD POINTER
STTQTQE  DS    XL16                LENGTH OF THE JES2 TQE +4 J.I.Case
STTQLEN  EQU   *-STTQFP            LENGTH OF THE ENTIRE CONTROL BLOCK
         MEND
++MAC($STTQEXW) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
         ASSEM(STJTABS).
         MACRO
&LABEL   $STTQEXW &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').NDS1
STTQEXW  DSECT
.NDS1    ANOP
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.**********************************************************************
.* THIS MACRO EXPANSION MAPS A WORK AREA EXTENSION FOR THE STTQEPCE
.*  THE TQE (TIMER QUEUE) PCE.  THERE IS ONE FOR EACH PCE OF THIS TYPE.
.**********************************************************************
STTXNTN  DS    CL16                NAME/TOKEN PAIR - NAME VALUE
STTXNTT  DS    CL16                NAME/TOKEN PAIR - TOKEN VALUE
STTXDBL1 DS    D                   DOUBLE WORD TO SAVE $STCK VALUE IN
STTXLSAT DS    F                   WORK AREA - LOWEST SATISFIED TIME
STTXLSPT DS    F                   POINTER TO STTQE WITH LOWEST TIME
STTXLEN  EQU   *-STTXNTN           LENGTH OF THE ENTIRE PCE WORK AREA
$DRTQEX  EQU   63                  DISPATCHER STTQE RESOURCE
TQEX     EQU   255                 ID OF PCE
         MEND
++MAC(STPCSMFD) SYSLIB(SHASMAC) DISTLIB(AHASMAC) DISTMOD(AHASMOD)
         ASSEM(STJTABS,STSCX54B,STSCX49A).
         MACRO
&LAB1    STPCSMFD &DSECT=N,&JES2=N
         AIF   ('&DSECT' NE 'Y').NDS1
STPCSMFD DSECT
.NDS1    ANOP
         AIF   ('&LAB1' EQ '').LBL2
&LAB1    EQU   *
.LBL2    ANOP
.*
.*
         AIF   ('&JES2' EQ 'N').NJS1
         SPACE 2
SMFXXJES DS    CL8                 PREFIX FOR JES2 CHAINING AREA
.NJS1    ANOP
.*
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.*
** * ------------------------------------------------------------- * **
** * -- THIS GROUP OF DS'S IS INTEDED TO BE USED AS PART OF AN  -- * **
** * -- EXISTING DSECT, TO DESCRIBE AN SMF BUFFER FOR RECORD    -- * **
** * -- TYPE 216 (D8) TECH SUBTYPED SMF RECORDS.                -- * **
** * ------------------------------------------------------------- * **
SMFBASE  EQU   *                   USE THIS LABEL FOR USING - NON JES2
SMFXLEN  DS    XL2                LRECL INCLUDING RDW
SMFXSEG  DS    XL2                SEGMENT - ALWAYS ZEROS
SMFXFLG  DS    XL1                B'0101 1110' INDICATES SUBTYPES
SMFXRTY  DS    XL1                SMF RECORD TYPE = 216 = X'D8'
SMFXTME  DS    XL4                TIME SINCE MIDNIGHT IN 1/100TH SEC.
*  TOD, USING FORMAT FROM TIME MACRO WITH BIN. INTVL
SMFXDTE  DS    PL4                X'01YYDDDF'
*  DATE IN PACKED DECIMAL FORM: 01YYDDDF
SMFXSID  DS    XL4                SYSID FROM ( SID )
SMFXSSI  DS    XL4                SUBSYS ID  (SSID = TECH) OR BLANKS
SMFXSTY  DS    XL2                RECORD SUBTYPE X'01'-X'FF'
*                 ****  PROGRAM EXECUTION TRACKING SUBTYPES  ****
*                         X'01' = TECH PGM EXECUTION
*                         X'02' = TECH PGM EXECUTION DUP LIB.
*                         X'03' = TECH PGM EXECUTION DUP LIB.
*                         X'04' = TECH PGM EXECUTION DUP LIB.
*                         X'05' = TECH PGM EXECUTION DUP LIB.
*                 ****  S.S.M. = SHARED SPOOL MODS SUBTYPES  ****
*                         X'40' = SSM REJECTION INFORMATION
*                         X'41' = SSM JOB PASSED SELECTION
*              FUTURE     X'42' = SSM OPERATOR ACTIONS ($T CMDS)
*                         X'43' = $SJ - ALLOWED OR REJECTED
*                         X'44' = SSM JECL CARD ACCEPTED
*              FUTURE     X'45' = SSM JECL CARD REJCTED JCL ERROR
*                         X'46' = SSM JOB SELECTION REDRIVEN
*              FUTURE     X'47' = JES2 SSM PARM ACCEPTED
*              FUTURE     X'48' = RESERVED FOR SSM
*              FUTURE     X'49' = RESERVED FOR SSM
SMFXNUMT DS    XL2                NUMBER OF TRIPLETS (SUBTYPES 1-5= 2)
*
SMFXRESV DS    XL2                LENGTH OF SELF-DEFINING SECTION
*** SELF-DEFINING SECTION ***
* - FIRST TRIPLET - PRODUCT SECTION
OFFPRD01 DS    XL4                OFFSET FROM RDW TO PROD. SECTION
LENPRD01 DS    XL2                LENGTH OF PRODUCT SECTION
NUMPRD01 DS    XL2                NUMBER OF PRODUCT SECTIONS
* - SECOND TRIPLET - SUBTYPED DATA SECTION
OFFTEC01 DS    XL4                OFFSET FROM RDW TO SUBTYPED DATA
LENTEC01 DS    XL2                LENGTH OF SUBTYPED SECTION
NUMTEC01 DS    XL2                NUMBER OF SUBTYPED SECTIONS
*
SDSEND   EQU   *                  END OF SELF DEFINING SECTION
SMFD8SSD EQU   SDSEND-OFFPRD01    EQU'D LEN OF SELF DEFINING ssm SECT.
SMFD8TSD EQU   SDSEND-OFFPRD01    EQU'D LEN OF SELF DEFINING tech SECT.
*
* THE PRODUCT SECTION FOR USE WITH TECH SUBSYSTEM GOES HERE
*
PRDOFT   EQU   *-SMFXLEN          OFFSET TO TECH PRODUCT SECTION
SMFD8TTY DS    XL2                SUBTYPE - 01 FOR PGM EXECUTION
SMFD8TVN DS    CL2                VERSION # C'01'
SMFD8TNM DS    XL16               C'TECH SUBSYSTEM  '
PRDLENT  EQU   *-SMFD8TTY         LENGTH OF THE PRODUCT SECTION
*
* THE SUBTYPED TECH SUBSYSTEM DATA GOES IN HERE
*
STDOFT   EQU   *-SMFXLEN          OFFSET TO SUBTYPED DATA
SMFD8TTP DS    XL2                SUBTYPE - X'01-05' = PGM EXECUTION
SMFD8TCF DS    CL8                RACFID OF EXECUTOR -
SMFD8TPN DS    CL8                RACFID GROUP NAME  -
SMFD8TGM DS    CL8                PROGRAM NAME
SMFD8TID DS    CL8                RACF TERMINAL ID
SMFD8TOB DS    CL8                THE JOB NAME
SMFD8TSI DS    CL4                SYSTEM ID
SMFD8TTE DS    PL4                SMF STYLE DATE
SMFD8TME DS    XL4                SMF STYLE TIME
STDLENT  EQU   *-SMFD8TTP         LENGTH OF SUBTYPED TECH TYPE DATA
SMFXLJ01 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
* THE PRODUCT SECTION(S) FOR JES2 SSM GOES HERE
*
         ORG   SDSEND             ORG TO END OF SELF DEFINING SECITON
*
PRDOFS   EQU   *-SMFXLEN          OFFSET TO PRODUCT SECTION
SMFD8STY DS    XL2                SUBTYPE - REPEATED - JUST IN CASE
SMFD8SVR DS    XL4                SAME AS UBRVRM AND UJCXVRM
SMFD8SID DS    XL16               C'SHARED SPOOL MOD'
PRDLENS  EQU   *-SMFD8STY         LENGTH OF THE SSM PRODUCT SECTION
*
PRD8JZZ  EQU   *                  END OF SSM PRODUCT SECTION
*
* THE SUBTYPED SHARED SPOOL MODS DATA GOES IN HERE
*
STDOFFS  EQU   *-SMFXLEN          OFFSET TO SUBTYPED SSM DATA
*
SMFD8S40 DS    XL2                SUBTYPE - X'0040' SSM REJECTION INFO
SMFD80JI DS    XL4                JOBID
SMFD80JN DS    CL8                JOBNAME
SMFD80SI DS    XL4                NODE ID REJECT TOOK PLACE ON
SMFD80TE DS    XL8                NODE NAME REJECT TOOK PLACE ON
SMFD80GN DS    XL8                NODE NAME REJECT TOOK PLACE ON
SMFD80ME DS    CL12               REJECTION REASON
SMFD80XT DS    CL8                STCK FORMAT DATE AND TIME
SMFLNS40 EQU   *-SMFD8S40         LENGTH OF SUBTYPED DATA
SMFXLS40 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S41 DS    XL2                SUBTYPE - X'0041' SSM JOB SELECTED
SMFD81IN DS    XL2                INPUT NODE ID       JQEINPND
SMFD81XN DS    XL2                EXECUTION NODE ID   JQEXEQND
SMFD81CD DS    CL1                JQE CREATION TIME    - JQXCRTME
SMFD81JC DS    CL1                JOB CLASS   JQEJCLAS
SMFD81JI DS    XL4                JOBID
SMFD81JN DS    CL8                JOBNAME JQEJNAME
SMFD81RI DS    CL8                USERID OF JOB OWNER    - JQEUSRID
SMFD81SL DS    CL8                SECURITY LABEL OF JOB   - JQESECLB
SMFD81XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFD81SE DS    CL16               SCHEDULING ENVIRONMENT NAME -JQASCHE
SMFD81TE DS    XL8                NODE NAME ACCEPTED ON
SMFD81GN DS    CL8                XCF GROUP NAME ACCEPTED ON
SMFLNS41 EQU   *-SMFD8S41         LENGTH OF SUBTYPED DATA
SMFXLS41 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S42 DS    XL2                SUBTYPE - X'0042' SSM OPER CMDS
SMFD82XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
* THE ONLY THINGS AN OPERATOR CAN CHANGE ARE IN THE ECSA AREA -
* HERE IS A BEFORE AND AFTER COPY OF THE ECSA AREA
SMFD82NN DS    XL8                NODE NAME ACCEPTED ON
SMFD82NX DS    XL8                NODE ID COMMAND ENTERED ON
SMFD82CM DS    CL140              THE COMMAND ITSELF (IF WE CAN GET IT)
SMFD82CB DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF (BEFORE)
SMFD82CA DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF (AFTER)
SMFLNS42 EQU   *-SMFD8S42         LENGTH OF SUBTYPED DATA
SMFXLS42 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S43 DS    XL2                SUBTYPE - X'0043' $SJ ALLOWED OR NOT
SMFD83DT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFD83NN DS    CL1                A=$SJ IS ALLOWED ;;;; X=$SJ REJECTED
SMFLNS43 EQU   *-SMFD8S43         LENGTH OF SUBTYPED DATA
SMFXLS43 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S44 DS    XL2                SUBTYPE - X'0044' JECL CARD ACCPETED
SMFD84IN DS    XL2                INPUT NODE ID       JQEINPND
SMFD84CD DS    CL4                JQE CREATION TIME    - JCTRDRON
SMFD84JC DS    CL1                JOB CLASS   JQEJCLAS
SMFD84JI DS    XL8                JOBID
SMFD84JN DS    CL8                JOBNAME JQEJNAME
SMFD84XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFD84MG DS    CL60               DETAILED INFO FOR SMF
SMFD84JA DS    CL(UJCXSLN1)       THE STQNAME (JCT EXTENSION) AFTER
*                                     PROCESSING CURRENT STATEMENT
SMFLNS44 EQU   *-SMFD8S44         LENGTH OF SUBTYPED DATA
SMFXLS44 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S45 DS    XL2                SUBTYPE - X'0045' JECL CARD REJECTED
SMFD85IN DS    XL2                INPUT NODE ID       JQEINPND
SMFD85CD DS    CL4                JQE CREATION TIME    - JQXCRTME
SMFD85JC DS    CL1                JOB CLASS   JQEJCLAS
SMFD85JI DS    XL8                JOBID
SMFD85JN DS    CL8                JOBNAME JQEJNAME
SMFD85XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFD85MG DS    CL140              JECL CARD IMAGE PROCESSED
SMFLNS45 EQU   *-SMFD8S45         LENGTH OF SUBTYPED DATA
SMFXLS45 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S46 DS    XL2                SUBTYPE - X'0046' QSEL IS REDRIVEN
SMFD86IN DS    XL2                NODEID SOMEWHERE IN $HCT OR $HCCT
SMFD86XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFLNS46 EQU   *-SMFD8S46         LENGTH OF SUBTYPED DATA
SMFXLS46 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S47 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED
SMFD87IN DS    XL2                NODEID SOMEWHERE IN $HCT OR $HCCT
SMFD87XT DS    CL8                STCK FORMAT DATE AND TIME - THIS REC
SMFD87PM DS    CL256              PARM VALUE ACCEPTED
SMFD87EC DS    XL(SSMTBLEN)       THE ECSA AREA ITSELF
SMFLNS47 EQU   *-SMFD8S47         LENGTH OF SUBTYPED DATA
SMFXLS47 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S48 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED
SMFD8801 DS    XL1                SOME DATA TO RECORD(UNUSED FOR NOW)
SMFD8802 DS    XL1                  MORE DATA TO RECORD
SMFLNS48 EQU   *-SMFD8S48         LENGTH OF SUBTYPED DATA
SMFXLS48 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   PRD8JZZ            ORG TO END OF SSM PRODUCT SECTION
*
SMFD8S49 DS    XL2                SUBTYPE - X'0047' SSM PARM ACCEPTED
SMFD8901 DS    XL1                SOME DATA TO RECORD(UNUSED FOR NOW)
SMFD8902 DS    XL1                  MORE DATA TO RECORD
SMFLNS49 EQU   *-SMFD8S49         LENGTH OF SUBTYPED DATA
SMFXLS49 EQU   *-SMFXLEN          LENGTH OF THE ENTIRE RECORD
*
         ORG   ,
         DS    0F
* USE SMFD8LEN TO FIND BUFFER SIZE FOR *ANY* VERSION OF SMFD8...
SMFD8LEN EQU   *-STPCSMFD
         MEND
++MAC($USERCBS) SYSLIB(SHASMAC) DISTLIB(AHASMAC)
  /* NOTE - THERE ARE NO - NN OO - EXPLICIT ASSEM ENTRIES FOR THE
    $USERCBS MACRO - FOR ONE THING IT WOULD REQUIRE A COMMON LIBRARY
    FOR  JES2  AND sdsf BE IN USE, FOR ANOTHER WE ALREADY HAVE AN
    EXPLICIT ASSEM ENTRY FOR EACH MACRO THAT IS IN THE $USERCBS THAT
    WOULD CAUSE US TO NEED TO REASSEMBLE IN THE FIRST PLACE.  */  .
         MACRO - $USERCBS - EXPAND ALL USER CONTROL BLOCKS
&LABEL   $USERCBS
.*
.* *******************************************************************
.*                                                                   *
.*   THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
.* BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS*
.* MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED *
.* FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF  *
.* THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE*
.* USEFULLNESS OF THE MATERIAL.                                      *
.*                                                                   *
.*   WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
.* NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE *
.* IN THE FUTURE.                                                    *
.*                                                                   *
.* *******************************************************************
.**********************************************************************
.*
.* FUNCTION: GENERATE ALL SUNTRUST MAPPING MACROS FOR JES2.
.*
.* NOTES:    THIS MACRO IS REQUIRED FOR ALL SUNTRUST JES2 EXIT MODULES
.*           ALL USER MAPPING MACROS SHOULD BE EXPANDED HERE.
.*
.* REVISION HISTORY:
.*
.*   DATE   NAME         DESCRIPTION OF CHANGE
.* -------- ------------ ----------------------------------------------
.*
.**********************************************************************
.*
.*       TITLE '$STJCTX -- USER EXTENSION TO THE JCT
         $STJCTX  ,
.*
.*       TITLE '$STQNAME -- USER EXTENSION TO THE JQE
         $STQNAME ,
.*
.*       TITLE 'STPCSMFD -- USER SMF DSECTS FOR SHARED SPOOL MODS'
         STPCSMFD JES2=Y,DSECT=Y
.*
.*       TITLE '$SSMTB -- - COMMON ECSA AREA FOR JES2 SSM CONTROLS'
         $SSMTB ,
.*
.*       TITLE '$STTQEXW -- THE TIMER QUEUE PCE WORK AREA '
         $STTQEXW
.*
.*       TITLE '$STTQE   -- THE SSM TIMER QUEUE CONTROL BLOCK'
         $STTQE
.*
         MEND
++JCLIN.
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//*        DCB=BUFNO=1
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STJTABS),UNIT=SYSDA
//*        SPACE=(80,(200,50,2)),DISP=(NEW,PASS)
//SYSLIN   DD   DSN=&&OBJ
//*        DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1),
//*        DISP=(MOD,PASS),UNIT=VIO,SPACE=(3040,(40,40),,,ROUND)
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE  AHASMOD(STJTABS)
 NAME STJTABS(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX50A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ,
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 ENTRY   EXIT50A
 INCLUDE AHASMOD(STSCX50A)
 INCLUDE AHASMOD(STSC2050)
 ORDER   STSCX50A,STSC2050
 NAME STSCX50A(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX04A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX04A)
 NAME STSCX04A(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD   DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX54A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX54A)
 NAME STSCX54A(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//         DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX54B),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.APF.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX54B)
 NAME STSCX54B(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND)
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX06A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX06A)
 NAME STSCX06A(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND)
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSC2050),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSC2050)
 NAME STSC2050(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSIN    DD   *
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX20A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD  DD   DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 ENTRY  EXIT20A
 INCLUDE AHASMOD(STSCX20A)
 INCLUDE AHASMOD(STSC2050)
 ORDER   STSCX20A,STSC2050
 NAME STSCX20A(R)
/*
//STEPASM  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX49A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//STEPLNK  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX49A)
 NAME STSCX49A(R)
/*
//ASMX19A  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX19A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//LNKX19A  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//         COND=(8,LT,STEPASM)
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSCX19A)
 NAME STSCX19A(R)
/*
//ASMX24A  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSCX24A),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//LNKX24A  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD (STSCX24A)
 NAME STSCX24A(R)
/*
//ASMSSMT  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSSMTBS),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//LNKSSMT  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 INCLUDE AHASMOD(STSSMTBS)
 NAME STSSMTBS(R)
/*
//ASMSSMT  EXEC PGM=ASMA90,PARM='NOOBJECT,DECK'
//SYSLIB   DD   DISP=SHR,DSN=SYS1.SMPMTS
//         DD   DISP=SHR,DSN=SYS1.SHASMAC
//         DD   DISP=SHR,DSN=SYS1.SHASSRC
//         DD   DISP=SHR,DSN=SYS1.AHASMAC
//         DD   DISP=SHR,DSN=SYS1.AHASSRC
//         DD   DISP=SHR,DSN=SYS1.MACLIB
//         DD   DISP=SHR,DSN=SYS1.MODGEN
//         DD   DISP=SHR,DSN=SYS1.AMACLIB
//         DD   DISP=SHR,DSN=SYS1.AMODGEN
//SYSUT1   DD  DSN=&&SYSUT1,SPACE=(4096,(2500,60),,,ROUND),UNIT=VIO
//SYSPRINT DD   SYSOUT=*
//SYSPUNCH DD   DSN=SYS1.AHASMOD(STSSMTBS),UNIT=SYSDA
//SYSLIN   DD   DSN=&&OBJ
//SYSIN    DD   *
//LNKSSMT  EXEC PGM=IEWBLINK,PARM='AMODE=31,RMODE=ANY,AC=1,REUS=REFR'
//AHASMOD   DD  DSN=SYS1.AHASMOD,DISP=SHR
//SYSLMOD  DD   DISP=SHR,DSN=SYS1.SHASLNKE
//SYSLIN   DD   *
 SETOPT PARM(AMODE=31,RMODE=ANY,REUS=REFR)
 INCLUDE AHASMOD(MSSWAIT)
 NAME MSSWAIT(R)
/*
++SRC(STJTABS)  SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STJTABS  TITLE 'INSTALLATION DEFINED TABLES FOR JES2'
 PUNCH ' SETOPT PARM(AMODE=31,RMODE=ANY,AC=1) '
*
* MODULE NAME:  STJTABS
*
*
* FUNCTION:     THIS MODULE CONTAINS THE USER TABLES REFERENCED IN
*               THE JES2 HASPTABS MODULE.  IT ALSO CONTAINS ANY
*               PRE- OR POST SCAN EXITS CALLED FOR BY THESE
*               TABLE ENTRIES.
*
*               TABLES AND FUNCTIONS ADDED:
*
*                 MAIN PARAMETER TABLE:
*
*                 BERT TABLE FOR OUR EXTENSION TO THE JQE:
*
*                 - STQNAME  - ALL OUR JQE EXTENSION.
*
*                 JQE TABLE:
*
*                 - BERAFTCT - PSEUDO FIELD TO DISPLAY THE VALUES
*                              FOR A JOB'S /*BEFORE, /*AFTER, AND/OR
*                              /*CNTL CARDS WITH A PRE-SCAN EXIT.
*
*
* ENTRY POINTS: PARMSCAN -- INSTALLATION'S MAIN PARAMETER
*                           $SCAN TABLE
*
*               USERJQE  -- INSTALLATION'S JQE SUB-SCAN
*                           $SCAN TABLE
*
*               USERBERT -- INSTALLATION'S BERT TABLE.
*
*               UPCETBL1 -- INSTALLATION'S PCE TABLE.
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*
* REVISION HISTORY:
*
*   DATE   NAME        DESCRIPTION OF CHANGES
* -------- ----------- ------------------------------------------------
         SPACE 3
         COPY  $HASPGBL            INCLUDE JES GLOBAL VALUES
         PRINT ON                  RESTORE FULL PRINTING
         EJECT
STJTABS $MODULE TITLE='SUNTRUST USER TABLES MODULE',                   X
               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X
               RMODE=ANY,                                              X
               ENVIRON=JES2,                                           X
               MLTE,                                                   X
               RESPA,              JES FSI RESPA DSECT                 X
               RPL,                MVS ACB REQUEST BLOCK DSECT         X
               ASCB,                                                   X
               CVT,                                                    X
               NTASM,         Name/Token constants                     X
               $BERT,              ($BERT)                             X
               $BERTTAB,           ($BERT)                             X
               $BUFFER,            HASP SPOOL BUFFER DSECT             X
               $CAT,               HASP CLASS ATTRIBUTE TABLE DSECT    X
               $CATBERT,           ($DOGBERT)                          X
               $CADDR,             JES2 COMMON STORAGE ADDRESS TABLE   X
               $CMB,                                                   X
               $COMWORK,           HASP COMM PCE WORK AREA DSECT       X
               $DCT,                                                   X
               $HASPEQU,           HASP EQUATES                        X
               $HCCT,              HASP HCCT DSECT                     X
               $HCT,               HASP CONTROL TABLE DSECT            X
               $HFAME,             HASP HFAME DSECT                    X
               $JCT,               HASP JOB CONTROL TABLE DSECT        X
               $JOE,               HASP JOB OUTPUT ELEMENT DSECT       X
               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X
               $MCT,                                                   X
               $MIT,               HASP MIT DSECT                      X
               $MITETBL,                                               X
               $MODMAP,            HASP MODULE MAP DSECT               X
               $PADDR,             HASP PADDR DSECT                    X
               $PARMLST,                                               X
               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X
               $PCETAB,            HASP PCE TABLE DSECT                X
               $PSV,                                                   X
               $QSE,                                                   X
               $RDRWORK,                                               X
               $SAFINFO,                                               X
               $SCAT,              HASP SCAT DSECT                     X
               $SCANTAB,           HASP SCAN TABLE DSECT               X
               $SCANWA,            HASP $SCAN WORK AREA DSECT          X
               $TQE,               HASP TIMER QUEUE ENTRY              X
               $USERCBS,           USER MAPPING MACROS                 X
               $XECB               HASP XECB DSECT
         TITLE 'USER TABLE MODULE -- USER MAIN PARAMETER STATEMENT $SCAX
               N TABLE'
         TITLE 'USER TABLE MODULE -- USERJQE SUB-SCAN TABLE'
**********************************************************************
*
*   THIS IS THE $SCAN TABLE FOR CONTROLLING SCANNING OF THE PARMS FOR
*    JQES.
*   WE USE IT TO ADD OUR STATEMENTS FOR:
*
*     BEFAFTCT - DISPLAY ONLY OF BEFORE/AFTER/CNTL CARD INFORMATION.
*
**********************************************************************
USERJQE  $SCANTAB  TABLE=(DYNAMIC,MCTJQETP)
         SPACE 3
        $SCANTAB NAME=BEFAFTCT,    BEFORE/AFTER/CNTL INFORMATION       X
               CB=PARENT,                                              X
               DSECT=JQE,                                              X
               FILTER=NO,          CAN NOT BE A FILTER                 X
               CALLERS=($SCDCMDS), DISPLAY COMMANDS                    X
               PRESCAN=(QBACDISP,DISPLAY)  DISPLAY PRESCAN EXIT
         SPACE 3
         $SCANTAB  TABLE=END       DEFINE END OF USER TABLE
         TITLE 'USER TABLE MODULE -- DYNAMIC BERT TABLE'
**********************************************************************
*
*   THIS IS THE $BERTTAB TABLE TO DEFINE OUR STQNAME ENTRY IN THE JQA.
*   REFER TO THE $STQNAME MACRO FOR DETAILS.
*
**********************************************************************
USERBERT $BERTTAB  TABLE=(DYNAMIC) START OF DYNAMIC TABLE
         SPACE 3
        $BERTTAB CBTYPE=JQE,       CONTROL BLOCK TYPE                  X
               NAME=STQNAME,       ID OF OUR BERTIE                    X
               CBOFF=*,            GENERATE OFFSET DYNAMICALLY         X
               LEN=STQNAMELN,      LENGTH OF OUR BERTIE                X
               FILL=C' '           FILL CHARACTER
         SPACE 3
         $BERTTAB  TABLE=END       DEFINE END OF USER TABLE
UPCETBL1 $PCETAB TABLE=(DYNAMIC)
*              local token  =C'SSM_LOCAL_TOKEN1'
*
         $PCETAB NAME=TQEX,        NAME OF PCE = TQEX                  X
               DESC='SSM TIMER QUEUE CNTL',                            X
               DCTTAB=*-*,         NO DCT ASSOCIATED WITH THIS PCE     x
               ENTRYPT=(STPCENT,ENTRY), USE STPCENT ON A $ENTRY        X
               CHAIN=(SSMPCEDH,TOKEN), DISP INTO SSM TO OUR PCE HEAD   X
               CHAINTK=(SSM_LOCAL_TOKEN1,TASK), use local nt pair      X
               COUNTS=(SSMPCEDK,TOKEN), DISP TO COUNT FIELD IN SSMT    X
               COUNTTK=(SSM_LOCAL_TOKEN1,TASK),   use local nt pair    X
               DISPTCH=INIT,        START AT WARMSTART                 X
               MACRO=STTQEPCE,      MACRO THAT MAPS THE PCE (DOC ONLY) X
               FSS=NO,              NOT AVAILABLE FOR FSS TASKS.       X
               WORKLEN=STTXLEN,     WORKLEN FOR THIS PCE. SEE $STTQEXW X
               PCEID=(0,TQEX)      UPCETB IS EQUATED AS 250
         $PCETAB TABLE=END         THE END OF OUR DYNAMIC PCE TABLE DEF
*
*
         TITLE 'USER TABLE MODULE -- $SCAN PRE-SCAN DISPLAY EXIT ROUTINX
               E FOR JQA BEFORE/AFTER/CNTL INFORMATION'
**********************************************************************
*
*   $SCAN FACILITY PRE-SCAN EXIT TO DISPLAY THE SCHEDULING INFORMATION
*   FROM THE /*BEFORE, /*AFTER AND /*CNTL JECL CARDS FOR BATCH JOBS.
*
*   NOTE: THESE FIELDS ARE ONLY DISPLAYED FOR BATCH JOBS THAT ARE
*         EITHER AWAITING OR IN EXECUTION, SINCE THEY HAVE NO VALUE
*         FOR TSU OR STC JOBS AND HAVE NO PURPOSE POST EXECUTION.
*
**********************************************************************
         SPACE 2
         USING STAB,R8             DEFINE BASE REGISTER
         USING SCWA,R10            DEFINE BASE REGISTER
         USING HCT,R11             DEFINE BASE REGISTER
         USING QBACDISP,R12        DEFINE BASE REGISTER
         USING PCE,R13             DEFINE BASE REGISTER
*
QBACDISP $SAVE ,                   GET SAVE AREA AND SAVE REGS
*
         LR    R12,R15             GET ROUTINE'S BASE ADDRESS
         LR    R10,R1              GET ADDRESS OF SCWA
         L     R8,SCWASTAB         GET ADDRESS OF STAB
         L     R7,SCWACBAD         GET ADDRESS OF OUR CB (JQE)
         USING JQE,R7
*
         LA    R4,8                PRESET RETURN CODE -- ALL DONE
         TM    JQEFLAG3,JQE3JOB    CHECK IF THIS IS A BATCH JOB
         BNZ   QBACRET             TSU OR STC -- EXIT, NO JQA TO FREE
         TM    JQETYPE,$XEQ        CHECK IF JOB IS WAITING/IN EXEC
         BZ    QBACRET             NO -- EXIT, NO JQA TO FREE
*
         $DOGJQE ACTION=(FETCH,READ),    GET A READ-ONLY MODE JQA      X
               JQE=(R7),                                               X
               ERRET=QBACBDJQ
*
         LR    R7,R0               GET THE ADDR OF OUR JQA
         USING JQA,R7              DEFINE BASE REGISTER
*
         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X
               CBTYPE=JQE,                IN THE JQA                   X
               NAME=STQNAME,                 OF OUR BERT               X
               ERRET=QBACBDBR
*
         LA    R6,0(R1,R7)         GET ADDRESS OF OUR BERT
         USING STQNAME,R6
*
* first things first - is it a new format extension?
* if it is, then why was it not selected - yet ?
*
         TM    UBRUFLAG,UBRXXVRM   IS VRM BIT SET ON? IS THIS 1.7?
         BZ    QBAFT                 IF NOT SKIP DELAY REASON CHECKS
         CLC   UBRVRM(4),=X'00010700'  BOTH MUST MATCH FIRST
         BNE   QBAFT
*
         MVC   SCWAWK16,UBRDLAYS   MOVE THE DELAYS BYTE TO A WORK AREA
         NI    SCWAWK16,X'7F'      TURN OFF THE HIGH ORDER BIT
*
         XR    R2,R2               CLEAR THE WORK REG NOW.
         IC    R2,SCWAWK16         GET THE DELAY CODE
         CHI   R2,DLYTABMX         IS IT BEYOND THE LIMIT OF THE TABLE?
         JH    BADDLYCD            HANDLE A BAD DELAY CODE
         MH    R2,=AL2(DLYSEGL)    R3 = CODE * 12 = DISP TO ENTRY
         LA    R5,DLYTAB           POINT TO MESSAGE TABLE
         LA    R5,0(R2,R5)         PLUS THE INDEX WE JUST BUILT = MSG
         LA    R2,DLYSEGL          R2 = LENGTH OF TEXT
         J     DLYCDS
BADDLYCD EQU   *
*  here is the display if we have an invalid delay reason code.
BDLYCDS $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='INVALID DELAY=',BRKOPT=YES,CONV=CHAR,   X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=SCWAWK16,LENGTH=1,BRKOPT=NO,CONV=HEX
         J     QBAFT

*  here is display for valid reason code values
DLYCDS  $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='DELAY RSN=',BRKOPT=YES,CONV=CHAR,       X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
* SET UP AND DISPLAY THE VALUE OF THE UDCTUCS FIELD
*
QBAFT    TM    UBRMFLAG,UBRAFT     DID JOB SPECIFY A /*AFTER NAME?
         BZ    QBACBEF             NO -- CHECK FOR BEFORE NAME
         LA    R5,UBRAFTR          GET ADDR OF OUR NAMES FIELD
         LA    R2,8                GET LENGTH OF OUR FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='AFTER=',BRKOPT=YES,CONV=CHAR,           X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBACBEF  DS    0H
         TM    UBRMFLAG,UBRBEF     DID JOB SPECIFY A /*BEFORE NAME?
         BZ    QBACWITH            NO -- CHECK FOR WITH NAME(S)
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,UBRBFOR          POINT TO OUR NAME FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='BEFORE=',BRKOPT=YES,CONV=CHAR,          X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBACWITH DS    0H
         TM    UBRMFLAG,UBRWITHF   DID JOB SPECIFY A /*WITH NAME ?
         BZ    QBACWOUT            NO -- CHECK FOR /*WITHOUT NAME
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,UBRWITH          GET ADDRESS OF FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='WITH=',BRKOPT=YES,CONV=CHAR,            X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBACWOUT DS    0H
         TM    UBRUFLAG,UBRXXVRM   IS VRM BIT SET ON? IS THIS 1.7?
         BZ    QBACCNTL            IF NOT SKIP WITHOUT CHECK
         CLC   UBRVRM(4),=X'00010700'  BOTH MUST MATCH FIRST
         BNE   QBACCNTL
*  NOW WE CAN SAFELY CHECK AND FORMAT THE RESULT
         TM    UBRMSCF1,UBRMSWOJ   DID JOB SPECIFY A /*WITHOUT NAME?
         BZ    QBAHOLDF            NO -- CHECK FOR HOLDFOR TIME
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,UBRWIOUT         GET ADDRESS OF FIELD
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='WITHOUT=',BRKOPT=YES,CONV=CHAR,         X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
*
QBAHOLDF DS    0H
* TEST IF EITHER EXPLICT TIMER SETTING IS IN USE *
         TM    UBRWATF,UBRWATFR+UBRWATT  IF BOTH ARE "OFF" THEN
         JZ    QBANOAUT                    SKIP THE TESTS
*                                  IF EITHER IS IN USE,
         $STCK ADDR=$DOUBLE          GET THE CURRENT TIME NOW.
         TM    UBRWATF,UBRWATFR    DID JOB SPECIFY A /*HOLDFOR CARD?
         JZ    QBAHOLDT            NO -- CHECK FOR HOLD TIL TIME
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,SCWAWK16         GET ADDRESS OF FIELD
         UNPK  SCWAWK16(3),UBRHLDF(2)   X'HHMMSS0F'
         MVI   SCWAWK16+2,C':'     INSERT COLON

         UNPK  SCWAWK16+3(3),UBRHLDF+1(2)   X'HHMMSS0F'
         MVI   SCWAWK16+5,C':'     INSERT COLON
         UNPK  SCWAWK16+6(3),UBRHLDF+2(2)   X'HHMMSS0F'
         MVI   SCWAWK16+8,C' '     JUST KEEP THINGS CLEAN
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='HOLDFOR=',BRKOPT=YES,CONV=CHAR,         X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
         CLC   UBRHLDFX,$DOUBLE    IF TIMR > NOW - THEN NOT ELAPSED.
         JH    QBAHOLDT              IF NOT ELAPSED, SKIP LITERAL!
         $SCAND SCWA=SCWA,TEXT='¦ELAPSED',BRKOPT=NO,CONV=CHAR,         X
               DEBLANK=NO
*
QBAHOLDT DS    0H
         TM    UBRWATF,UBRWATT     DID JOB SPECIFY A /*HOLDTIL CARD?
         JZ    QBANOAUT            NO -- CHECK FOR NO AUTOROUTING
         LA    R2,8                GET LENGTH OF OUR FIELD
         LA    R5,SCWAWK16         GET ADDRESS OF FIELD
         UNPK  SCWAWK16(3),UBRHLDU(2)   X'HHMMSS0F'
         MVI   SCWAWK16+2,C':'     INSERT COLON

         UNPK  SCWAWK16+3(3),UBRHLDU+1(2)   X'HHMMSS0F'
         MVI   SCWAWK16+5,C':'     INSERT COLON
         UNPK  SCWAWK16+6(3),UBRHLDU+2(2)   X'HHMMSS0F'
         MVI   SCWAWK16+8,C' '     JUST KEEP THINGS CLEAN
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='HOLDTIL=',BRKOPT=YES,CONV=CHAR,         X
               DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
         CLC   UBRHLDUX,$DOUBLE    IF TIMER > NOW THEN NOT EXPIRED
         JH    QBANOAUT             IF NOT EXPIRED, SKIP LITERAL!
         $SCAND SCWA=SCWA,TEXT='-EXPIRED',BRKOPT=NO,CONV=CHAR,         X
               DEBLANK=NO
*
QBANOAUT DS    0H
         TM    UBRMSCF1,UBRMSNOT   IS NO AUTOROUTING SET?
         BZ    QBACCNTL            IF NOT CHECK FOR CNTL VALUES
        $SCAND SCWA,TEXT=',NO AUTOROUTING',BRKOPT=YES,CONV=CHAR,       X
               DEBLANK=NO
*
QBACCNTL DS    0H
         TM    UBRMFLAG,UBRCNTL    DID JOB SPECIFY A /*CNTL NAME?
         BZ    QBACRC08            NO -- RETURN TO CALLER
         LA    R5,UBRDNAME         POINT TO NAME FIELD
         SLR   R3,R3               ZERO R3 FOR IC
         IC    R3,UBRMFLAG         GET CNTL COUNTS AND FLAGS
         SRL   R3,4                SHIFT OUT THE FLAG BITS
         LTR   R3,R3               VERIFY WE HAVE AT LEAST ONE CNTL
         BZ    QBACRC08            ZERO -- RETURN TO CALLER
*
* - DO GROUP LITERALS (HEADING TYPE INFO) FIRST.
*
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
        $SCAND SCWA=SCWA,TEXT='CNTL=(',BRKOPT=YES,CONV=CHAR,           X
               DEBLANK=NO
         B     QBACCTSK            SKIP COMMA BEFORE FIRST NAME
*  - AN ITEM SEPERATOR (A COMMA)
QBACCTLP DS    0H
        $SCAND SCWA=SCWA,TEXT=',',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
QBACCTSK DS    0H
         LA    R2,8                GET LENGTH OF OUR FIELD
        $SCAND SCWA=SCWA,TEXT=(R5),LENGTH=(R2),BRKOPT=NO,CONV=CHAR
        $SCAND SCWA=SCWA,TEXT='-',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
         LA    R2,1                GET LENGTH OF OUR FIELD
         LA    R4,8(,R5)           GET ADDR OF SHARE TYPE
        $SCAND SCWA=SCWA,TEXT=(R4),LENGTH=(R2),BRKOPT=NO,CONV=CHAR,    X
               DEBLANK=NO
*
         LA    R5,UBRDNAML(,R5)    POINT TO NEXT NAME
         BCT   R3,QBACCTLP         LOOP THROUGH ALL NAMES
*
        $SCAND SCWA=SCWA,TEXT=')',BRKOPT=NO,CONV=CHAR,DEBLANK=NO
*
*
QBACRC08 DS    0H                  "NORMAL" RETURN FROM PRE-SCAN EXIT
*
         LA    R4,8                SET ALL DONE RETURN CODE
*
QBACRJQA DS    0H
         $DOGJQE ACTION=(RETURN),  RETURN THE READ MODE JQA            X
               CBADDR=(R7)
*
QBACRET  DS    0H
         $RETURN RC=(R4)           RETURN TO CALLER
*
*
QBACBDJQ DS    0H                  NO JQE AVAILABLE
         LA    R1,QBACBDJM         GET ERROR MSG HEADER ADDRESS
         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA
         LA    R4,4                SET ERROR MSG RETURN CODE
         B     QBACRET             EXIT BUT DON'T RETURN THE JQA
*
QBACBDJM DC    CL2'99'             REASON CODE
         DC    AL1(L'QBACBDJT)     MESSAGE LENGTH
QBACBDJT DC    C'QBACDISP: JQE/JQA NOT AVAILABLE OR INVALID.'
*
*
QBACBDBR DS    0H                  ERROR GETTING THE BERT
         LA    R1,QBACBDBM         GET ERROR MSG HEADER ADDRESS
         $STORE R1                 SAVE ERROR MSG IN CURRENT SAVE AREA
         LA    R4,4                SET ERROR MSG RETURN CODE
         B     QBACRJQA            GO RETURN THE JQA
*
QBACBDBM DC    CL2'99'             REASON CODE
         DC    AL1(L'QBACBDBT)     MESSAGE LENGTH
QBACBDBT DC    C'QBACDISP: ERROR RETURNED LOCATING STQNAME.'
*
*  HERE IS THE DELAY REASON TABLE, THEY MUST ALL BE THE SAME LENGTH!
DLYTAB   DC    C'JES2- NOTSEL'     HAS NOT BEEN SELECTED BY JES2 YET
         DC    C'/*WITH CARD '
         DC    C'/*WITHOUT   '
         DC    C'HOLDFOR TIMR'
         DC    C'HOLDTIL TIMR'
         DC    C'GENERAL TIMR'
         DC    C'OPEN -UNUSED'      UNSUED AT THIS TIME.
         DC    C'/*AFTER CARD'
         DC    C'/*BEFORE CRD'
         DC    C'/*CNTL CONFL'
         DC    C'CLASS LIMIT '
         DC    C'JOBNAME LIM '
         DC    C' - NONE -   '     JOB HAS BEEN SELECTED - NO DELAYS
         DC    C'USERID LIMIT'     MASKED/USERID LIMIT REACHED
DLYSEGL  EQU   L'DLYTAB
DLYTABMX EQU   (*-DLYTAB)/DLYSEGL  NUMBER OF ENTRIES IN TABLE.
*
         LTORG ,
*
         DROP  R6,R7,R8,R10,R11,R12,R13

         TITLE  'USER EXTENSION MODULE --- SUNTRUST PCE ENTRY POINT'

** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * -- Processor name -- TQEX -                                -- * **
** * --                                                         -- * **
** * -- DESC. NAME- 'TIMER QUEUE CNTL FOR SHARED SPOOL MODS'    -- * **
** * --                                                         -- * **
** * -- Function --                                             -- * **
** * --   When posted, locate the SSMT (ecsa ssmt) and from     -- * **
** * --   there, run our special chain of cntl areas, looking   -- * **
** * --   for expired tqe's - we check based on "satisfied time"-- * **
** * --   < "current time", both values are the 4 high order    -- * **
** * --   bytes of a $STCK format.  Remove from the chain any   -- * **
** * --   expired blocks, and adjust pointers (they are forward -- * **
** * --   and backward chained, with pointers to first and last -- * **
** * --   in SSMT).                                             -- * **
** * --     After freeing any unneeded control blocks, issue a  -- * **
** * --        $POSTXEQ MASPOST=NO macro, and go back to the    -- * **
** * --     top of the loop and $wait to be posted again.  we   -- * **
** * --     are only posted by $STIMER - our PCE address is     -- * **
** * --     saved in the TQEPCE field before callin $STIMER.    -- * **
** * --                                                         -- * **
** * --  - notes -                                              -- * **
** * --                                                         -- * **
** * --   We are only posted by $STIMER, the $STIMER calls are  -- * **
** * --   all made from STSCX49A when a job is rejected for a   -- * **
** * --   time related reason.  Since we are MainTask we can    -- * **
** * --   use the "fixed" name for the n/t pair to locate the   -- * **
** * --   ssmt area in ecsa.  The module is clear from storage  -- * **
** * --   at task termination.                                  -- * **
** * --                                                         -- * **
** * -- Register conventions - r0 - r2  -- work registers       -- * **
** * --                        r3 - r10 -- work registers       -- * **
** * --                        r11      -- address of $HCT      -- * **
** * --                        r12      -- base                 -- * **
** * --                        r13      -- address of PCE       -- * **
** * --                        r14      -- linkage register     -- * **
** * --                        r15      -- linkage register     -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
STPCENT  $ENTRY BASE=R12       PROVIDE PROCESSOR ENTRY POINT
         USING PCE,R13             EST. ADDRESSABILITY FOR TQEPCE
         L     R10,PCEWORKA        GET THE ADDR OF THE PCE WORK AREA
         USING STTQEXW,R10         SET ADDRESSABITLY FOR OUR WORK AREA
         USING HCT,R11
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * --     MAIN LOOP OF THE TQEX PROCESSOR                     -- * **
** * --                                                         -- * **
** * -- We have been dispatched becuase one of our two pce's    -- * **
** * -- was posted when a tqe (pointing to the PCE) expired.    -- * **
** * -- We now need to do cleanup, running the STTQE chain and  -- * **
** * -- removing any sttqe timer elements that have expired.    -- * **
** * -- Finally we issue a $POSTXEQ MASPOST=NO  to get any      -- * **
** * -- jobs that are ready to run, selected for for work.      -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * --     LOCATE THE ECSA CONTROL BLOCK (SSMT)                -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         MVC   STTXNTN(16),=C'SSM_LOCAL_TOKEN1'
         XC    STTXNTT,STTXNTT         CLEAR THE TOKEN FIELD NOW
*
*  Now we will create a name/token pair at the task level only - it is
*  available only to JES2 MAINTASK routines, but it can be specified
*  via a fixed name, not one that needs to be built.
*
*
        $TOKENSR REQUEST=RETRIEVE, LOCATE THE TOKEN VALUE              X
               NAME=STTXNTN,          NAME COMES FROM HERE             X
               LEVEL=TASK,             TYPE IS TASK ONLY               X
               VALUE=STTXNTT             RESULT GOES HERE AND R0
         LR    R9,R0
         USING SSMTB,R9
*
TQEXLOP  $ACTIVE                    INDICATE PROCESSOR ACTIVE
         $STCK ADDR=STTXDBL1       SAVE THE CURRENT STCK FORMAT TIME
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * -- up front work is now done.  The next thing for us to    -- * **
** * -- do is to run the STTQE chain and remove any expired     -- * **
** * -- entries, there may be several simultaneous entries, for -- * **
** * -- expample if several jobs have /*holdtil 00:00:01,       -- * **
** * -- so then if any are left, which have not already expired -- * **
** * -- we update the tqepce address in the tqe area of the     -- * **
** * -- sttqe area and issue a new $STIMER for the entry with   -- * **
** * -- the next (lowest) satisified time.                      -- * **
** * --                                                         -- * **
** * -- after all that, we issue a $POSTXEQ so jes2 can go find -- * **
** * -- the jobs that are now available to execute.             -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
* NOW  LOOK FOR TABLE ENTRIES WITH POPED TIMERS -- AND REMOVE THEM
*
* R3=PREV  R4=CUR  R6=POSTING STTQE  R7=TQE WITH LOWEST SATISFIED TIME
*
         L     R4,SSMTQCB1         GET POINTER TO FIRST C.B. (OR ZERO)
         LTR   R4,R4               ZERO - SHOULDN'T BE, BUT OK DEAL...
         JZ    TABDONE             GO HANDLE AN EMPTY TABLE.
         XR    R3,R3               THERE IS NO PREVIOUS ENTRY YET
         XR    R5,R5               THERE IS NO NEXT STTQE FOUND YET

* HERE IS THE SCAN OF THE CHAIN - LOOKING FOR EXPIRED ENTRIES *
*
LOPCHN   TM    TQEFLAG1+STTQTQE-STTQE(R4),TQE1TPOP  POPPED YET?
         JNZ   REMTAB               IF < OR = NOW REMOVE ENT.
*
* THAT'S REALLY ALL WE DO IN THE LOOP.
*
*  TIME TO BUMP THE POINTERS AND GET THE NEXT ENTRY
BMPTBL   LR    R3,R4               CURRENT IS NOW TO BE PREVIOUS
         L     R4,STTQFP-STTQE(R4) GET THE NEXT AS THE CURRENT.
         LTR   R4,R4
         JNZ   LOPCHN
         JZ    TABDONE             IF NO MORE, WE ARE DONE!
* - REMTAB - REMOVE THE TABLE ENTRY POINTED TO BY R4 (CUR)
REMTAB   L     R5,STTQFP-STTQE(R4) GET POINTER TO NEXT ITEM
         LTR   R5,R5               IN NO NEXT ENTRY - THEN SPECIAL
         JZ    TRUNCTAB              HANDLING IS IN ORDER - TRUNCATE
         L     R3,STTQBK-STTQE(R4) GET POINTER TO PREV ITEM
         LTR   R3,R3               IF NO PREV. ITEM - THEN SPECIAL
         JZ    REMTOPCB              HANDLING - REMOVE TOP ENTRY
* OK, NOT FIRST ENTRY, NOT LAST ENTRY, - DO SIMPLE SWAP OF PTRS
         ST    R3,STTQBK-STTQE(R5) SAVE OLD PREV IN NEXT CB'S PREV.
         ST    R5,STTQFP-STTQE(R3) SAVE OLD NEXT IN PREV CB'S NEXT
*     THEY ARE SWAPPED - IT IS OUT OF THE CHAIN.
RELCEL   $GETHP TYPE=FREE,CELL=(R4)   REMOVE THE CB FROM STORAGE
         LR    R4,R3               MAKE THE PREV. CB = THE CURRENT CB
         J     BMPTBL              AND THEN BUMP TABLE POINTERS
*
TRUNCTAB LTR   R3,R3               FIRST SEE IF THERE IS A PREV ENTRY
         JZ    ZEROTAB             IF NOT WE ARE REMOVING THE ONLY CB
         MVC   STTQFP-STTQE(4,R3),$ZEROS ZERO THE FORWARD PTR IN PREV
         J     RELCEL              GO RELEASE CELL AND RETURN TO LOOP
*
REMTOPCB ST    R5,SSMTQCB1         SAVE PTR TO NEXT CB IN ECSA AREA
         MVC   STTQBK-STTQE(4,R5),$ZEROS  ZERO BKWD PTR IN NEW TOP CB
         $GETHP TYPE=FREE,CELL=(R4)  FREE THE CB NOW
         LR    R4,R5               MAKE THE NEXT CB THE CURRENT AND
         J     LOPCHN              AND PROCESS IT AS THE FIRST
*
ZEROTAB  EQU   *                   REMOVE THE LAST TABLE ENTRY
         $GETHP TYPE=FREE,CELL=(R4)  REMOVE THE LAST CB
         XC    SSMTQCB1,SSMTQCB1   ZERO PTR IN ECSA TO FIRST CB
TABDONE  EQU   *          ALL OLD ENTRIES ARE PROCESSED -
*
         $POSTXEQ MASPOST=NO       TELL JES TO LOOK FOR JOBS NOW!
*
         $DORMANT                  OK TO END JES2 NOW... IF YA WANT TO
         $WAIT TQEX,INHIBIT=NO     JUST WAIT TILL WE GET POSTED AGAIN.
         J     TQEXLOP             GO PROCESS SOME MORE
         TITLE 'USER TABLE MODULE -- EPILOG'
         $MODEND ,
         SPACE 2
         END   ,                   END OF MODULE
++SRC(STSCX50A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSCX50A TITLE 'JES2 USER ENVIRONEMNT END OF INPUT EXIT'
***********************************************************************
*                                                                     *
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *
*  USEFULLNESS OF THE MATERIAL.                                       *
*                                                                     *
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *
*  IN THE FUTURE.                                                     *
*                                                                     *
***********************************************************************
***********************************************************************
* EXIT 50 - JES2 USERTASK - END OF INPUT EXIT - CALLED FOR INTERNAL
* READER END OF INPUT - YES! THAT INCLUDES TSO SUBMITTED JOBS!
*
* THE FUNCTION IS TO CHECK FOR A /*ROUTE XEQ HERE, AND SET A SYSAFF IF
* NEEDED AND THEN TO $CALL THE COMMON STSC2050 MODULE TO COPY THE JCTX
* TO THE JQEX (BERT EXTENSION).
***********************************************************************
         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES
         PRINT ON                  RETORE FULL PRINTING
STSCX50A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X
               RMODE=ANY,                                              X
               ENVIRON=(USER,ANY),                                     X
               RPL,                GENERATE RPL DSECT                  X
               $BERT,              (BERT)                              X
               $BERTTAB,           (BERT)                              X
               $BUFFER,            HASP SPOOL BUFFER DSECT             X
               $CADDR,                                                 X
               $CATBERT,           (BERT)                              X
               $CMB,               ($RDRWORK)                          X
               $DCT,               (INFORM)                            X
               $HASPEQU,           HASP EQUATES                        X
               $HCCT,              (BERT)                              X
               $HCT,                                                   X
               $HFAME,             ($HCCT)                             X
               $JCT,               HASP JOB CONTROL TABLE DSECT        X
               $JCTX,              HASP JOB CONTROL TABLE DSECT        X
               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X
               $MIT,               HASP MIT DSECT                      X
               $MITETBL,                                               X
               $PADDR,             HASP PADDR DSECT                    X
               $PARMLST,                                               X
               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X
               $PSV,                                                   X
               $QSE,               ($HCT)                              X
               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X
               $SAFINFO,           ($RDRWORK)                          X
               $SCAT,              HASP SCAT DSECT                     X
               $SCANTAB,           HASP SCAN TABLE DSECT               X
               $SJB,               (INFORM)                            X
               $TQE,               ($SJB)                              X
               $TRE,               HASP TRE DSECT                      X
               $USERCBS,           USER DSECTS                         X
               $XECB,              ($HCT)                              X
               $XPL
         USING JCT,R10             AS PASSED
         USING XPL,R5                  BY THE
         USING PCE,R13                    CALLING
         USING HCCT,R11                      MODULES
EXIT50A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
         $SAVE  ,                  SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER
         SPACE 2
*
*  UP FRONT HOUSEKEEPING HERE...
*
         LR    R5,R1               SET BASE FOR THE XPL
         USING XPL,R5
         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED
         BZ    RETURN              NO - JUST RETURN
*
* NOTE! WE GET JQE FROM XPL - IT ISN'T PASSED TO US IN 13 LIKE EXIT20
*
         ICM   R9,B'1111',X050JQE  GET AN UPDATE MODE JQE (JQA)
         BZ    RET00               IF NOT VALID -- THEN JUST RETURN
*
*  CHECK FOR "HERE" TYPE OF ROUTING
*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS
*  ALREADY SET - THEN SET IT FOR "HERE"
*
         USING JQE,R9
         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR "HERE" ROUTING
         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE
*
* ALWAYS CLEAR THE "HERE " LITERAL OUT OF JCTSCHEN, NEVER LEAVE IT
*
         MVI   JCTSCHEN,C' '
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD
*
* TEST TO SEE IF AUTOMATIC RESTART MANAGER HAS OVERRIDDEN SYSAFF
* AND IF  SO,  LEAVE IT ALONE.
*
         TM    X050FLG1,X0501ARM   DID ARM OVERRIDE SYSAFF?
         BNZ   NOTHERE             IF SO, DON'T CHANGE IT NOW
*
* ELSE  -
*  RESET THE AFFINIT TO "HERE" REGUARDLESS OF ANY OTHER SYSAFF=
*
         $SETAFF REQUEST=CLEAR,AFFIELD=X050SAF
         $SETAFF REQUEST=MOVE,AFFIELD=X050SAF,                         X
               ID=CCTTOQUL
         DROP  R9
NOTHERE  EQU   *
*
* CALL OUR COMMON ROUTINE TO COPY  JCT EXTENSIONS TO JQE BERTS
*     ( WE ARE ALREADY IN USER ENVIRONMENT SO JUST DO A $CALL)
*
         $CALL STSX2050,            CALL THE COMMON COPY ROUTINE       X
               PARM0=(R5)             SET R0 = THE XPL WE HAD
         LTR   R15,R15             CHECK THE RETURN CODE FIRST
         JZ    RET00               IF OK, THEN JUST END
*                                  OTHERWISE ISSUE A WTO MESSAGE
         WTO   '$HASP999 - ERROR RETURNED GETTING BERT IN STSCX50A.'
*
********************************************************************
*  EXIT RETURN POINT
********************************************************************
RET00    DS    0H
         XR    R15,R15             SET NORMAL RETURN CODE
*
RETURN   DS    0H
         $RETURN RC=(R15)          RETURN TO CALLER
*
         $MODEND ,
         END   ,
++SRC(STSCX04A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
* *%PDSDOC 00 SSMods exits 4a & 54a for /*ROUTE XEQ STATEMENTS
*********************************************************************
*                                                                   *
*                        HASP EXIT 4A AND 54A                       *
*                  JECL CONTROL STATEMENT SCAN #1                   *
*                                                                   *
*  These exits handle JES2 maintask and user address space jcl      *
*  scans for "/*ROUTE XEQ resname" statements.                      *
*  Exits 04B and 54B for the scan of other statments.  The          *
*  requirements for /*ROUTE XEQ resname are sufficiently different  *
*  to justify this seperate set of exits.                           *
*                                                                   *
*  FUNCTION -                                                       *
*                                                                   *
*   These exits look for /*ROUTE XEQ resname or                     *
*   /*ROUTE XEQ nodename statements.   When one is found -          *
*    1 - Isolate the resname or nodename value.                     *
*    2 - Test the value to see if it is a valid SCHENV name.        *
*    3 - If an INVALID SCHENVNAME, assume it is a real              *
*        JES2 route statement, and leave it for JES2 to handle.     *
*    4 - If a VALID SCHENVNAME, then update the JCT with the        *
*        new envirnoment name - JCTSCHENV is the field updated.     *
*    5 - Comment out the statement so JES2 doesn't know about it.   *
*                                                                   *
*                                                                   *
*  ENTRY POINT -                                                    *
*    EXIT04A                                                        *
*                                                                   *
*                                                                   *
*  ATTRIBUTES -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  INPUT REGISTERS:     (NOTE: not all passed values doc'd here.)   *
*                                                                   *
*        R0     Pointer to the XPL                                  *
*                 XPLID     eyecatcher                              *
*                 XPLXITID  exit id #                               *
*                 X004IND  = 00  = JCL                              *
*                          = 01  = JECL                             *
*                 X004COND  condition byte                          *
*                     x004CONT  - continuation indicator            *
*                     x004CMDD  - /*$ command statement             *
*                     x004JOBP  - /*JOBPARM                         *
*                 X004RESP  Response Byte                           *
*                     X004XSNC  - exit supplied next card           *
*                     X004XSEM  - exit supplied msg in x004jcmt     *
*                     X004JCMT  - skip processing card              *
*                 X004CARD  80 byte card image                      *
*                 X004JXWR  80 byte exit work area (JCTXWRK)        *
*                 X004JCT   JCT pointer                             *
*                 X004JQE   JQE pointer                             *
*                 X004AREA  JRWAREA                                 *
*                 X004STMT  concatenated statemnt buffer            *
*                 X004STML  statement label                         *
*                 X004STMV  statement verb                          *
*                                                                   *
*        R1     Pointer to 3-word list                              *
*                 word1 -  pointer to image buffer                  *
*                 word2 -  pointer to exit flg byte JRWFLAGX in JRW *
*                 word3 -  pointer to JCTXWRK in the JCT            *
*                                                                   *
*        R2-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0-14  UNCHANGED                                           *
*        R15:   RETURN CODE                                         *
*               rc=00  = Continue Normally                          *
*               rc=04  = Ignore other exits                         *
*               rc=08  = No processing - write to JCL dataset       *
*               rc=12  = Cancel Job                                 *
*               rc=16  = Purge job                                  *
*                                                                   *
*     Register DIFFERENCES BETWEEN exit04 and exit 54               *
*                                                                   *
*        r11  -  HCCT in exit 54 not the HCT as in exit 4           *
*        r13  -  SAVE AREA in exit 54, not the PCE address          *
*                                                                   *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-9   WORK REGISTERS                                      *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     NOTE -                                                        *
*      We will use the provided work area instead of acquiring one  *
*      for ourselves.  The provided 80 bytes are currently enough   *
*      to handle the IWMSEVWK area, but this may change in the      *
*      future, so watch the size of work area needed by IWMSEVAL.   *
*                                                                   *
*      This exit is intended for use with JES2 1.7                  *
*                                                                   *
*                                                                   *
*     AUTHOR: Stpehen McColley                                      *
*             Atlanta, GA.                                          *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'USER EXIT04-A HANDLES /*ROUTE XEQ STATEMENTS'
         COPY  $HASPGBL
STSCX04A $MODULE ENVIRON=JES2,                                         X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='JES2 EXIT4A ',                                   X
               CVT,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CMB,                                                   X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $HFAME,                                                 X
               $JCT,                                                   X
               $JQE,                                                   X
               $JRW,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $PSV,                                                   X
               $QSE,                                                   X
               $RDRWORK,                                               X
               $SAFINFO,                                               X
               $SCAT,                                                  X
               $SQD,                                                   X
               $TRE,                                                   X
               $TRX,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XPL

EXIT04A  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************
        $ENVIRON PUSH,                                                 X
               ENVIRON=(USER,ANY),  SET PROPER ENVIRONMENT             X
               SETR11=YES


CALLX54  $EXIT 54,                  CALL THE COMMON (EXIT54) ROUTINE   X
               XPL=(R0),            USING THE PASSED XPL               X
               MAXRC=12
         $ENVIRON POP,              RESTORE THE ENVIRONMENT            X
               SETR11=YES
         $RETURN RC=(R15)           RETURN TO JES2 MAIN TASK CALLER

         DROP  R12
         LTORG
         $MODEND
APARNUM  DC    CL8'NONE'            APAR NUMBER - WHAT A LAUGH
PTFNUM   DC    CL8'NONE'            PTF NUMBER... WHAT A LAUGH
         END   ,                    END OF STSCX04A
++SRC(STSCX54A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
* *%PDSDOC 00 SSMods exits 4a & 54a for /*ROUTE XEQ STATEMENTS
*********************************************************************
*                                                                   *
*                        HASP EXIT 4A AND 54A                       *
*                   JCL CONTROL STATEMENT SCAN #1                   *
*                                                                   *
*  These exits handle JES2 maintask and user address space jcl      *
*  scans for "/*ROUTE XEQ resname" statements.                      *
*  Exits 04B and 54B for the scan of other statments.  The          *
*  requirements for /*ROUTE XEQ resname are sufficiently different  *
*  to justify this seperate set of exits.                           *
*                                                                   *
*  FUNCTION -                                                       *
*                                                                   *
*   These exits look for /*ROUTE XEQ resname or                     *
*   /*ROUTE XEQ nodename statements.   When one is found -          *
*    1 - Isolate the resname or nodename value.                     *
*    2 - Test the value to see if it is a valid SCHENV name.        *
*    3 - If an INVALID SCHENVNAME, assume it is a real              *
*        JES2 route statement, and leave it for JES2 to handle.     *
*    4 - If a VALID SCHENVNAME, then update the JCT with the        *
*        new envirnoment name - JCTSCHENV is the field updated.     *
*    5 - Comment out the statement so JES2 doesn't know about it.   *
*                                                                   *
*                                                                   *
*  ENTRY POINT -                                                    *
*    EXIT54A                                                        *
*                                                                   *
*                                                                   *
*  ATTRIBUTES -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  INPUT REGISTERS:     (NOTE: not all passed values doc'd here.)   *
*    NOTE: THE XPL FOR EXIT 04 AND EXIT 54 ARE IDENTICAL.           *
*                                                                   *
*        R0     Pointer to the XPL                                  *
*                 XPLID     eyecatcher                              *
*                 XPLXITID  exit id #                               *
*                 X054IND  = 00  = JCL                              *
*                          = 01  = JECL                             *
*                 X004COND  condition byte                          *
*                     X054CONT  - CONTINUATION INDICATOR            *
*                     X054CMDD  - /*$ COMMAND STATEMENT             *
*                     X054JOBP  - /*JOBPARM                         *
*                 X054RESP  RESPONSE BYTE                           *
*                     X054XSNC  - EXIT SUPPLIED NEXT CARD           *
*                     X054XSEM  - EXIT SUPPLIED MSG IN X004JCMT     *
*                     X054JCMT  - SKIP PROCESSING CARD              *
*                 X054CARD  80 BYTE card image                      *
*                 X054JXWR  80 BYTE exit work area (JCTXWRK)        *
*                 X054JCT   JCT POINTER                             *
*                 X054JQE   JQE POINTER                             *
*                 X054AREA  JRWAREA                                 *
*                 X054STMT  CONCATENATED STATEMNT BUFFER            *
*                 X054STML  STATEMENT LABEL                         *
*                 X054STMV  STATEMENT VERB                          *
*                                                                   *
*        R1     Pointer to 3-word list                              *
*                 word1 -  pointer to image buffer                  *
*                 word2 -  pointer to exit flg byte JRWFLAGX in JRW *
*                 word3 -  pointer to JCTXWRK in the JCT            *
*                                                                   *
*        R2-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0-14  UNCHANGED                                           *
*        R15:   RETURN CODE                                         *
*               rc=00  = Continue Normally                          *
*               rc=04  = Ignore other exits                         *
*               rc=08  = No processing - write to JCL dataset       *
*               rc=12  = Cancel Job                                 *
*               rc=16  = Purge job                                  *
*                                                                   *
*     Register DIFFERENCES BETWEEN exit04 and exit 54               *
*                                                                   *
*        r11  -  HCCT in exit 54 not the HCT as in exit 4           *
*        r13  -  SAVE AREA in exit 54, not the PCE address          *
*                                                                   *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-9   WORK REGISTERS                                      *
*        R10    JCT ADDRESS                                         *
*        R11    HCT ADDRESS                                         *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     NOTE -                                                        *
*      We will use the provided work area instead of acquiring one  *
*      for ourselves.  The provided 80 bytes are currently enough   *
*      to handle the IWMSEVWK area, but this may change in the      *
*      future, so watch the size of work area needed by IWMSEVAL.   *
*                                                                   *
*      This exit is intended for use with JES2 1.7                  *
*                                                                   *
*                                                                   *
*     AUTHOR: Stpehen McColley                                      *
*             Atlanta, GA.                                          *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'USER EXIT54-A HANDLES /*ROUTE XEQ STATEMENTS'
         COPY  $HASPGBL
*              SYSP=(GEN,GEN,DATA,NOGEN,NOGEN)
STSCX54A $MODULE ENVIRON=(USER,ANY),                                   X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='JES2 EXIT54A',                                   X
               CVT,                                                    X
               PSA,                                                    X
               RPL,                                                    X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CMB,                                                   X
               $DCT,                                                   X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $HFAME,                                                 X
               $JCT,                                                   X
               $JQE,                                                   X
               $JRW,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $PSV,                                                   X
               $QSE,                                                   X
               $RDRWORK,                                               X
               $SAFINFO,                                               X
               $SCAT,                                                  X
               $SQD,                                                   X
               $TRE,                                                   X
               $TRX,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XPL


*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

EXIT54A  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT
         USING XPL,R8
         USING JCT,R10
         LR    R8,R0                COPY THE XPL POINTER
         L     R10,X054JCT          GET THE POINTER TO THE JCT
         XR    R6,R6                CLEAR THE POINTER TO OUR WORK AREA

*********************************************************************
*                                                                   *
*        DETERMINE IF THIS EXIT WAS ENTERED FOR A JES2 CONTROL      *
*        STATEMENT.                                                 *
*                                                                   *
*********************************************************************
         TM    X054IND,X054JECL    IS THS A JECL STATEMENT?
         JNO   RETURN0             IF NOT - i DON'T CARE ABOUT IT !

         TM    X054COND,X054CONT    IS THIS A CONTINUATION CARD?
         JO    RETURN0              IF SO, WE DON'T DO CONTINUATIONS!

*********************************************************************
*                                                                   *
*        DETERMINE IF A JCT IS PRESENT.                             *
*                                                                   *
*********************************************************************

         LTR   R10,R10             JCT PRESENT?
         BZ    RETURN0             NO - BRANCH, RETURN


*********************************************************************
*                                                                   *
*        DETERMINE IF A "/*ROUTE XEQ" CONTROL STATEMENT IS BEING    *
*        PROCESSED.                                                 *
*                                                                   *
*********************************************************************

         L     R3,X054CARD         GET CONTOL STATEMENT IMAGE ADDRESS
         CLC   =C'/*ROUTE ',0(R3)   /*ROUTE STATEMTNE ?
         BNE   RETURN0             NO - BRANCH, RETURN
         CLI   XPLXITID,X'04'      WERE WE CALLED FROM EXIT04?
         JNE   DOOBTAIN            IF NOT JUST DO USERMODE OBTAIN.
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         $GETWORK WORDS=(@454LEN)/4,USE=SSMY,LOC=ANY
        $ENVIRON POP,SETR11=YES
         J     STOROK              WE HAVE STORAGE - JUMP OVER OBTAIN
DOOBTAIN EQU   *
*
         L     R2,X0454LEN
         STORAGE OBTAIN,LENGTH=(2),LOC=RES
* A WAIT IS ACCEPTABLE IN THE USER ENVIRONMENT READER ROUTINE. *
STOROK   EQU   *
         LR    R6,R1               NOW WE HAVE A WORK AREA.
         LR    R14,R1              GET THE WORK AREA - TO ADDR
         L     R15,X0454LEN        TO LENGTH = LENGTH OF AREA
         XR    R1,R1               FROM LENG = ZERO = PAD CHAR
*                                  FROM ADDR = WHO CARES, MOVING 0 LEN
         MVCL  R14,R0              CLEAR IT ALL WITH THE MVCL
         USING EXIT454,R6
         L     R1,X0454LEN
         ST    R1,X454LEN          SAVE LENGTH FOR LATER RELEASE
         MVC   X454EYE,=C'SSMY'    MOVE AN EYECATCHER
         MVC   CJCTWRK,JCTXWRK     SAVE THE OLD JCTXWRK
* NEXT SEE IF THIS IS AN XEQ STATEMENT OR NOT
         LA    R3,8(R0,R3)          POINT PAST CONSTANT VALUE
         LA    R2,52               MAX VALUE TO LOOK FOR XEQ VALUE
*                                   72 - LEADING LIT. - TRAILING CL8
FINDXEQ  EQU   *
         CLI   0(R3),C' '
         BE    LOOPXEQ            IF BLANK JUST KEEP LOOKING
         CLC   XEQ,0(R3)          WE ARE ONLY LOOKING FOR XEQ CARDS
         BE    XEQCARD              - IF WE FIND ONE, BRANCH AN CONT.
         B     RETURN0                - ELSE JUST QUIT ( GIVE TO JES)
LOOPXEQ  LA    R3,1(R0,R3)        BUMP POINTER IN ONE
         BCT   R2,FINDXEQ           - IF WE RUN OUT OF CARD -
         B     RETURN0            CAN NOT IDENTIFY, just quit -
*                                  and give it to jes to handle
XEQCARD  EQU   *
*********************************************************************
*                                                                   *
*        ISOLATE THE RESOURCE NAME OR JES2 DESTINATION.             *
*                                                                   *
*********************************************************************

         LA    R3,L'XEQ(R0,R3)     POINT PAST CONSTANT VALUE
FINDNAME CLI   0(R3),C' '
         BNE   PASTXEQ            WE HAVE FOUND THE NAME VALUE
         LA    R3,1(R0,R3)        BUMP INTO CARD
         BCT   R2,FINDNAME         LIMIT SEARCH INTO CARD
         B     RETURN0            JUST LET JES2 FIGURE IT OUT
** * ------------------------------------------------------------- * **
** * -- NOTE - WE LOSE ADDRESSABILITY TO OUR THREE PASSED WORDS -- * **
** * -- HERE.  IF WE NEED THEM IN THE FUTURE USE A DIFFERENT REG.- * **
** * ------------------------------------------------------------- * **
PASTXEQ  EQU   *                  R3 POINTS TO START OF INPUT VALUE
         LA    R1,16(R0,R3)         SET END - IN CASE NO END IS FOUND
         TRT   0(16,R3),DELIMTAB    FIND END OF RESOURCE NAME
         SLR   R1,R3                CALCULATE RESOURCE NAME LENGTH
         LR    R2,R1                SAVE RESOURCE NAME LENGTH
         CH    R2,=H'16'
         BNH   LT16OK                IF 16 OR LESS THEN CONTINUE AS IS
         LH    R2,=H'16'             FORCE A MAX. VALUE IF GT 16
LT16OK   EQU   *
         LTR   R2,R2              TEST FOR ZERO VALUE
         BZ    NOBCTR              IF ZERO DO NOT REDUCE
         BCTR  R2,R0                 REDUCE BY ONE FOR EXECUTE LATER
NOBCTR   EQU   *
** * ------------------------------------------------------------- * **
** * --    R2 = LENGTH OF RESOURCE NAME -- R3 = POINTER TO NAME -- * **
** * ------------------------------------------------------------- * **

         MVI   RESNAME,C' '               CLEAR THE RESOURCE NAME
         MVC   RESNAME+1(L'RESNAME-1),RESNAME  BEFORE ANYTHING ELSE

*********************************************************************
*                                                                   *
*    DETERMINE IF THIS IS A SHARED SPOOL MODS ROUTING REQUEST OR -  *
*    IF IT IS A VALID /*ROUTE CONTROL STATMENT (TO A DESTID)        *
*                                                                   *
*    IF THE LOCATION FROM THE ROUTE STATEMENT IS A VALID SCHENV     *
*    VALUE THEN USE IT FOR ROUTING - ELSE LET JES2 HAVE THE         *
*    STATEMENT TO PROCESS AS IS.                                    *
*                                                                   *
*********************************************************************
* THE NEXT INSTRUCTION THE MVC RESNAME(0) IS EXECUTED BY THE NEXT   *
* INSTRUCTION AFTER THAT - DON'T GET RATTLED ABOUT IT.              *
*********************************************************************
MVRESNAM MVC   RESNAME(0),0(R3)            MOVE THE RESOURCE NAME
         EX    R2,MVRESNAM             SET SCHEDULING ENVIRONMENT
*********************************************************************
*          DON'T LET JES HAVE THE SPECIAL CASE OF /*ROUTE XEQ HERE  *
*********************************************************************
         CLC   =C'HERE ',RESNAME       IS THIS A SPECIAL CASE?
         BE    SETINJCT                  IS SO SKIP SETTING WITH WLM...
         MVC   IWMSEVWK(IWMSEVLN),IWMSEVL  SET IWMSEVAL PARM LIST

         IWMSEVAL SCHENV=RESNAME,MF=(E,IWMSEVWK)

         LTR   R15,R15
         BNZ   RETURN0             YES - BRANCH, CONTINUE
*
* OLD LOGIC BELOW: IF VALID DESTID THEN LET JES2 HANDLE IT...
*

*********************************************************************
*                                                                   *
*        SET THE SCHEDULING ENVIRONMENT IN THE JCT.                 *
*  NOTE- WE CHECK THE CI TEXT TO SEE IF THERE IS A SCHENV= ON THE   *
*        JOBCARD, AND IF THERE IS WE CLEAR THIS VALUE IN THE JCT.   *
*********************************************************************

SETINJCT EQU   *
         MVI   JCTSCHEN,C' '        BLANK INIT SCHEDULING ENVIRONMENT
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *
         MVC   JCTSCHEN(L'JCTSCHEN),RESNAME

*********************************************************************
*                                                                   *
*        CONVERT THE "/*ROUTE XEQ" STATEMENT TO A JCL COMMENT       *
*        STATEMENT.  THIS WILL PREVENT AN INVALID DESTINATION FROM  *
*        CAUSING A JCL ERROR.                                       *
*                                                                   *
*********************************************************************

         B     RETURN8              BRANCH - SET RETURN CODE = 8

*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RETURN0  EQU   *
         XR    R15,R15              PRESET RETURN CODE
         LTR   R6,R6                DO WE HAVE A WORK AREA?
         BZ    RETURN               IF NOT JUST END NOW
         B     RETSTG                 ELSE RELEASE OUR WORK AREA FIRST
RETURN8  EQU   *
         LA    R15,8(0,0)           SET RC=8
         LTR   R6,R6                DO WE HAVE A WORK AREA?
         BNZ   RETSTG               IF SO RETURN THE WORK AREA FIRST
RETURN  $RETURN RC=(R15)            RETURN TO CALLER
RETSTG   EQU   *
         LR    R5,R15               SAVE THE RETURN CODE FOR NOW.
         MVC   JCTXWRK,CJCTWRK      RESTORE THE ORIGINAL JCTXWRK FIRST
         CLI   XPLXITID,X'04'      IS IT EXIT04 THAT CALLED US?
         JNE   DOURLS              IF NOT THEN DO RELEASE STORAGE CODE
* ELSE USE $RETWORK TO RETURN OUR STORAGE AREA
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         $RETWORK  (R6)            * RETURN OUR WORK AREA NOW
        $ENVIRON POP,SETR11=YES
         LR    R15,R5              RESTORE RTN CODE FROM TMP REG NOW
         B     RETURN
DOURLS   EQU   *
         LR    R5,R15              SAVE RETURN CODE FOR A SECOND
         L     R8,X454LEN          GET THE LENGTH OF STORAGE TO RELSE
         STORAGE RELEASE,ADDR=(R6),LENGTH=(R8)
         LR    R15,R5               RESTORE RTN CODE IN TMP REG
         B     RETURN               JUST RETURN - WE ARE DONE HERE
*

         IWMSEVAL MF=(L,IWMSEVL)   IWMSEVAL PARM LIST
IWMSEVLN EQU   *-IWMSEVL
X0454LEN DC    AL4(@454LEN)        ADCON WITH LENGTH OF DSECT=EXIT454
XEQ      DC    C'XEQ '              CHECK OF XEQ TYPE /*ROUTE ONLY!
DELIMTAB DC    256X'00'             EXIT04 TRANSLATE TABLE
         ORG   DELIMTAB
         DC    X'FF'                HEX ZEROS ARE INVALID
         ORG   DELIMTAB+C' '
         DC    X'FF'                HIGH VALUES ARE INVALID
         ORG   DELIMTAB+256         BACK TO NORMAL
         LTORG

         DROP  R6,R10,R8

        $MODEND ,
APARNUM  DC    CL8'NONE'            APAR NUMBER - WHAT A LAUGH
PTFNUM   DC    CL8'NONE'            PTF NUMBER... WHAT A LAUGH
EXIT454  DSECT                     EXIT04 WORKAREA
X454LEN  DS    F                   LENGTH OF THIS WORK AREA
X454EYE  DS    CL4                 EYECATCHER FOR THIS WORK AREA
RESNAME  DS    CL16                RESOURCE NAME
CJCTWRK  DS    CL80                80 BYTE WORK AREA TO SAVE JCTWK AREA
IWMSEVWK DS    (IWMSEVLN)X         IWMSEVAL PARM LIST WORKAREA
@454LEN  EQU   (((*-EXIT454)+7)/8)*8  WRKAREA LEN ROUNDED TO DBLWORD

         IWMSET
         IWMYCON

         END
++SRC(STSCX54B) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
* *%PDSDOC 00 SSMODS EXIT 54B FOR ALL OTHER SSM STATEMENTS
*********************************************************************
*                                                                   *
*                           HASP EXIT 54B                           *
*                   JCL CONTROL STATEMENT SCAN #2                   *
*                                                                   *
*  THIS EXIT HANDLES JES2 MAINTASK AND USER ADDRESS SPACE JCL       *
*  SCANS FOR ALL SSM (SHARED SPOOL MODS) STATEMENTS EXCEPT FOR THE  *
*  /*ROUTE, WHICH IS HANDLED BY EXIT54A.                            *
*                                                                   *
*  FUNCTION -                                                       *
*                                                                   *
*   THIS EXIT WILL CHECK THE PASSED JECL VERB AGAINST AN INTERNAL   *
*   TABLE, AND IF A MATCH IS FOUND, THE CARD IS ASSUMED TO BE OURS. *
*   IF THE JECL CARD IS ONE OF OURS, USE THE $SCAN ROUTINE TO       *
*   VALIDATE IT, PARSE THE VALUES, AND UPDATE THE CORRECT JCTX      *
*   FIELDS.  IT IS EXPECTED THAT BY USING $SCAN AND $PAIR WE WILL   *
*   BE ABLE TO MAINTAIN THE EXIT WITH FEWER AND SIMPLER CHANGES.    *
*                                                                   *
*  THE EXIT MAY BE CALLED IN USERMODE, OR IN JES2 MAINTASK MODE IF
*  INVOKED FROM  STSCX04A (XPLID=X'04').  IF CALLED VIA $EXIT FROM
*  STSCX04A WE WILL USE $GETWORK, $RETWORK INSTEAD OF STORAGE OBTAIN/
*  RELEASE, AND USE $GETSMFB & WRITE IT USING $QUESMFB INSTEAD OF
*  SMFEWTM.   THE PROBLEM WE FOUND IS EVEN THOUGH WE SET THE ASSEMBLY
*  ENVIRONMENT TO USER MODE, WE ARE STILL IN MAINTASK, RUNNING UNDER
*  A PCE - AND SO CAN NOT USE STANDARD LINKAGE OR ALLOW WAITS.
*  ENTRY POINT -                                                    *
*    EXIT54A                                                        *
*                                                                   *
*                                                                   *
*  ATTRIBUTES -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  INPUT REGISTERS:     (NOTE: NOT ALL PASSED VALUES DOC'D HERE.)   *
*    NOTE: THE XPL FOR EXIT 04 AND EXIT 54 ARE ALMOST IDENTICAL.    *
*                                                                   *
*        R0     POINTER TO THE XPL                                  *
*                 XPLID     EYECATCHER                              *
*                 XPLXITID  EXIT ID #                               *
*                 X054IND  = 00  = JCL                              *
*                          = 01  = JECL                             *
*                 X004COND  CONDITION BYTE                          *
*                     X054CONT  - CONTINUATION INDICATOR            *
*                     X054CMDD  - /*$ COMMAND STATEMENT             *
*                     X054JOBP  - /*JOBPARM                         *
*                 X054RESP  RESPONSE BYTE                           *
*                     X054XSNC  - EXIT SUPPLIED NEXT CARD           *
*                     X054XSEM  - EXIT SUPPLIED MSG IN X004JCMT     *
*                     X054JCMT  - SKIP PROCESSING CARD              *
*                 X054CARD  80 BYTE CARD IMAGE                      *
*                 X054JXWR  80 BYTE EXIT WORK AREA (JCTXWRK)        *
*                 X054JCT   JCT POINTER                             *
*                 X054JQE   JQE POINTER                             *
*                 X054AREA  JRWAREA                                 *
*                 X054STMT  CONCATENATED STATEMNT BUFFER            *
*                 X054STML  STATEMENT LABEL                         *
*                 X054STMV  STATEMENT VERB                          *
*                                                                   *
*        R1     POINTER TO 3-WORD LIST                              *
*                 WORD1 -  POINTER TO IMAGE BUFFER                  *
*                 WORD2 -  POINTER TO EXIT FLG BYTE JRWFLAGX IN JRW *
*                 WORD3 -  POINTER TO JCTXWRK IN THE JCT            *
*                                                                   *
*        R2-10  N/A                                                 *
*        R11    HCT ADDRESS                                         *
*        R12    N/A                                                 *
*        R13    PCE ADDRESS                                         *
*        R14    RETURN ADDRESS                                      *
*        R15    ENTRY ADDRESS                                       *
*                                                                   *
*     OUTPUT REGISTERS:                                             *
*        R0-14  UNCHANGED                                           *
*        R15:   RETURN CODE                                         *
*               RC=00  = CONTINUE NORMALLY                          *
*               RC=04  = IGNORE OTHER EXITS                         *
*               RC=08  = NO PROCESSING - WRITE TO JCL DATASET       *
*               RC=12  = CANCEL JOB                                 *
*               RC=16  = PURGE JOB                                  *
*                                                                   *
*     REGISTER DIFFERENCES BETWEEN EXIT04 AND EXIT 54               *
*                                                                   *
*        R11  -  HCCT IN EXIT 54 NOT THE HCT AS IN EXIT 4           *
*        R13  -  SAVE AREA IN EXIT 54, NOT THE PCE ADDRESS          *
*                                                                   *
*                                                                   *
*     REGISTER USAGE(INTERNAL):                                     *
*        R0-9   WORK REGISTERS                                      *
*        R10    JCT ADDRESS                                         *
*        R11    HCCT ADDRESS                                        *
*        R12    BASE REGISTER                                       *
*        R13    PCE ADDRESS                                         *
*        R14-15 WORK AND LINKAGE REGISTERS                          *
*                                                                   *
*     NOTE -                                                        *
*      THIS EXIT IS INTENDED FOR USE WITH JES2 1.7                  *
*                                                                   *
*                                                                   *
*     AUTHOR: STPEHEN MCCOLLEY                                      *
*             ATLANTA, GA.                                          *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'USER EXIT54-B HANDLES /*ROUTE XEQ STATEMENTS'
         COPY  $HASPGBL
*              SYSP=(GEN,GEN,DATA,NOGEN,NOGEN)
STSCX54B $MODULE ENVIRON=(USER,ANY),                                   X
               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X
               RMODE=ANY,                                              X
               TITLE='JES2 EXIT54A',                                   X
               ASCB,                                                   X
               CVT,                                                    X
               NTASM,         Name/Token constants                     X
               PSA,                                                    X
               RPL,                                                    X
               SMCA,                                                   X
               $BUFFER,                                                X
               $CADDR,                                                 X
               $CMB,                                                   X
               $CPINDEX,                                               X
               $DCT,                                                   X
               $HASB,                                                  X
               $HASPEQU,                                               X
               $HASXB,                                                 X
               $HCT,                                                   X
               $HCCT,                                                  X
               $HFAME,                                                 X
               $JCT,                                                   X
               $JQE,                                                   X
               $JRW,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $PSV,                                                   X
               $RID,                                                   X
               $QSE,                                                   X
               $RDRWORK,                                               X
               $RJCB,                                                  X
               $SAFINFO,                                               X
               $SCAT,                                                  X
               $SJB,                                                   X
               $SQD,                                                   X
               $TRE,                                                   X
               $TRX,                                                   X
               $TQE,                                                   X
               $USERCBS,                                               X
               $XECB,                                                  X
               $XIT,                                                   X
               $XPL


*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

** * ------------------------------------------------------------- * **
** * -- some useful equates for addressing the jctxwrk area     -- * **
** * ------------------------------------------------------------- * **
         USING JCT,R8               ADDRESS THE JCT
         USING XPL,R9               ADDRESS THE PARAMETER LIST
         USING JRW,R10              ADDRESS THE JRW
         USING HCCT,R11             ADDRESS THE HCT
*        USING BASE,R12             OUR BASE REG - SEE $ENTRY ABOVE
         USING PCE,R13              ADDRESS THE PCE
EXIT54B  $ENTRY BASE=R12,SAVE=YES   EXIT ROUTINE ENTRY POINT
         LR    R9,R0                SET THE XPL BASE
         L     R10,X054AREA         SET THE JRW BASE
         L     R8,X054JCT           SET THE JCT BASE
*        LA    R11,0(0,R11)         HCCT ADDR ALREADY SET
*        LA    R13,0(0,R13)         PCE ADDR ALREADY SET
         XR    R6,R6               POINTER TO WORKAREA 0 UNTIL OBTAIND
** * ------------------------------------------------------------- * **
** * --  IS THIS A CONTINUATION STATEMENT ?                     -- * **
** * ------------------------------------------------------------- * **
         TM    X054COND,X054CONT    IS THIS A CONTINUATION CARD?
         JO    X054RC00             JUST RETURN NOW
** * ------------------------------------------------------------- * **
** * --  IS THIS EVEN A JECL CARD,  OR WAS IT ALREADY HANDLED?  -- * **
** * ------------------------------------------------------------- * **
         TM    X054IND,X054JECL
         JNO   X054RC00             IF NOT JUST RETURN
         TM    X054IND,X054JCMT     ALREADY HANDLED BY ANOTHER EXIT?
         JO    X054RC00
         CLC   X054JCT,CCTZEROS     IS THERE A JCT AT ALL?
         JE    X054RC00
** * ------------------------------------------------------------- * **
** * -- IT MIGHT BE A VALID SSM CARD - TEST IT AGAINST OUR      -- * **
** * -- TABLE OF VALID VERBS.                                   -- * **
** * ------------------------------------------------------------- * **
         LA    R4,12                LENGTH OF EACH ENTRY IN TABLE
         LA    R3,VERBTAB           TOP OF TABLE
         LA    R5,VERBLAST          PAST END OF TABLE
TSTVRB   CLC   X054STMV,0(R3)       IS IT A MATCH?
         JE    DOSCAN               IF YES, THEN SCAN IT!
         BXLE  R3,R4,TSTVRB         ELSE BUMP AND LOOP
         J     X054RC00             IF NOT FOUND JUST RETURN NOW
** * ------------------------------------------------------------- * **
** * --  DO THE FIRST LEVEL $SCAN NOW - VERBCODE ONLY.          -- * **
** * --                                                         -- * **
** * -- A FEW NOTES ABOUT RCARDSCN - (ADDRESS IN $CADDR)        -- * **
** * --  USER ENVIRONMENT -  NO ESTAE OF IT'S OWN.              -- * **
** * --  INPUT VIA REGS -                                       -- * **
** * --      (INPUT )               (ON RETURN)                 -- * **
** * --    R0-KEYWORD TABLE         UNCHANGED                   -- * **
** * --    R1= JRW ADDRESS          R1=LAST CHAR OF STMT NOT -  -- * **
** * --    R2-R10- N/A                   PROCESSED +1           -- * **
** * --    R11 = HCCT               R2-R14=UNCHANGED            -- * **
** * --    R13=SAVEAREA                                         -- * **
** * --    R14=RETURN ADDR                                      -- * **
** * --    R15=ENTRY ADDRESS       R15 = RTN CODE               -- * **
** * --                                                         -- * **
** * --  REGS ON ENTRY TO / EXIT FROM PROCESSING ROUTINE ARE:   -- * **
** * --                                                         -- * **
** * --   R0      N/A                   N/A                     -- * **
** * --   R1      JCT BASE ADDRESS      80 BYTE MESSAGE TO      -- * **
** * --                                 ADD TO JCL STREAM       -- * **
** * --                                 OR ZERO                 -- * **
** * --   R2-R9   N/A                   UNCHANGED               -- * **
** * --   R10     JRW ADDRESS           UNCHANGED               -- * **
** * --   R11     HCCT ADDRESS          UNCHANGED               -- * **
** * --   R12     N/A                   UNCHANGED               -- * **
** * --   R13     SAVE AREA ADDRESS     UNCHANGED               -- * **
** * --   R14     RETURN ADDRESS        N/A                     -- * **
** * --   R15     ENTRY ADDRESS         RETURN CODE             -- * **
** * --                                                         -- * **
** * --   RETURN CODES (R15 ON EXIT):                           -- * **
** * --                                                         -- * **
** * --     0  -  PROCESSING SUCCESSFUL                         -- * **
** * --     4  -  ERROR ENCOUNTERED, FAIL JOB AT END OF         -- * **
** * --           INPUT (KEEP SCANING STATEMENT)                -- * **
** * --     8  -  ERROR ENCOUNTERED, STOP SCANNING              -- * **
** * --           STATEMENT AND KILL JOB                        -- * **
** * --                                                         -- * **
** * --  PROCESSING OF KEYWORDS WILL STOP AND AN ERROR          -- * **
** * --  MESSAGE QUEUED IF A CONDITION OCCURS (OTHER THAN       -- * **
** * --  *DUP AND *NULL) FOR WHICH THERE IS NO TABLE ENTRY      -- * **
** * --  TO PROCESSES.  PROCESSING IN THIS CASE IS THE SAME     -- * **
** * --  AS A PROCESSING ROUTINE RETURNING A RC=8.              -- * **
** * --                                                         -- * **
** * --  IF R1 IS NON-ZERO ON RETURN, IT IS ASSUMED TO          -- * **
** * --  POINT TO AN 80 CHARACTER MESSAGE TO BE ADDED TO        -- * **
** * --  THE JCL INPUT STREAM.  IF A RETURN CODE OF ZERO        -- * **
** * --  IS GIVEN, THE MESSAGE SHOULD START WITH A '//*' TO     -- * **
** * --  PREVENT LATER JCL ERRORS.  JES2 DOES NOT EXAMINE       -- * **
** * --  THIS MESSAGE OR PASS IT TO ANY EXITS.                  -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
DOSCAN   EQU   *                    PARSE THE CARD NOW
         OI    X054RESP,X054JCMT    INDICATE STATEMENT PROCESSED
* load as a test - a final load of r0 is done just before rcardscn
         L     R0,8(R0,R3)          POINT TO THE CARD KEY LIST
         LTR   R0,R0                CHECK TO SEE IF SUPPRESSION IS ON.
         JZ    X054RC00              IF SO.. DO NOTHING AT ALL.
** * ------------------------------------------------------------- * **
** * -- Just before call to RCARDSCN we will obtain a good work -- * **
** * -- area to use - it is destroyed upon return from the exit.-- * **
** * ------------------------------------------------------------- * **
         CLI   XPLXITID,X'04'      WERE WE CALLED FROM EXIT04?
         JNE   DOOBTAIN            IF NOT JUST DO USERMODE OBTAIN.
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         $GETWORK WORDS=(@0454LEN)/4,USE=SSMZ,LOC=ANY
        $ENVIRON POP,SETR11=YES
         J     STOROK              WE HAVE STORAGE - JUMP OVER OBTAIN
DOOBTAIN EQU   *
*
         L     R2,X0454LEN
         STORAGE OBTAIN,LENGTH=(2),LOC=RES
* A WAIT IS ACCEPTABLE IN THE USER ENVIRONMENT READER ROUTINE. *
STOROK   EQU   *
         LR    R6,R1               NOW WE HAVE A WORK AREA.
         LR    R14,R1              GET THE WORK AREA - TO ADDR
         L     R15,X0454LEN        TO LENGTH = LENGTH OF AREA
         XR    R1,R1               FROM LENG = ZERO = PAD CHAR
*                                  FROM ADDR = WHO CARES, MOVING 0 LEN
         MVCL  R14,R0              CLEAR IT ALL WITH THE MVCL
         USING X0454DS,R6
         L     R1,X0454LEN
         ST    R1,X454LEN          SAVE LENGTH FOR LATER RELEASE
         MVC   X454EYE,=C'SSMZ'    MOVE AN EYECATCHER
         MVC   C454CDSV(80),JCTXWRK     SAVE THE JCTXWRK AREA NOW
*                                        IT WILL BE RESTORED LATER
* NEXT GET THE ECSA POINTER FOR LATER USE *
         XC    X454TIMD,X454TIMD   CLEAR THE FIELD TO USE FOR N/T NAME
         XC    X454NAME,X454NAME   CLEAR THE FIELD TO USE FOR N/T TOKEN
         MVC   X454TIMD(3),=C'SSM' MOVE THE LITERAL PART OF THE NAME
         MVC   X454TIMD+3(8),CCTGPNM  AND THE XCFGRP NAME
        $TOKENSR  REQUEST=RETRIEVE,NAME=X454TIMD,                      X
               LEVEL=SYSTEM,ERRET=ERNOECSA,OKRET=GOODECSA
GOODECSA EQU   *
         LR    R1,R0               get ssmt ptr from r0; r0 = 1st word
*                                   in returned token - r1 = 2nd word
         USING SSMTB,R1
         CLC   SSMEYE,=C'SSMT'     CHECK THE LOCATED EYECATCHER
         JNE   ERNOECSA            IF NOT VALID - WE DIDN'T FIND IT.
         CLI   SSMSMFNM,X'81'      IS SMF NUMBER LESS THAN 128 ?
         JL    ERNOECSA             IF LESS THAN 129 - DONT TRY IT!
         ST    R1,X454ECSA         SAVE THE RETURNED TOKEN FOR LATER
         J     CALLRSCN            GO DO THE WORK NOW
ERNOECSA EQU   *
         XC    X454ECSA,X454ECSA   INDICATE NO ECSA WAS FOUND.
* THE SMF DATA WILL BE FILLED AT THE END OF THE RCARDSCAN. *
CALLRSCN EQU   *
         DROP  R1                  LOSE ADDRESSABILITY TO ECSA AREA
         XC    X454TIMD,X454TIMD   RECLEAR THE FIELD USED FOR N/T NAME
         XC    X454NAME,X454NAME   RECLEAR THE FIELD USED FOR N/T TOKN
         XC    X454TIME,X454TIME   RECLEAR THE FIELD USED FOR N/T TOKN
         XC    X454MSGM,X454MSGM   RECLEAR THE FIELD USED FOR N/T TOKN
*
         STCM  R6,B'1111',JCTXWRK+72 SAVE THE WORK AREA POINTER NOW
         L     R0,8(R0,R3)          POINT TO THE CARD KEY LIST
*
         $CALL RCARDSCN,            CALL CARD SCAN                     X
               PARM0=(R0),            R0=KEYLIST $STMTTAB TABLE        X
               PARM1=JRW,             R1= CARD IMAGE                   X
               OKRET=X054RTST       IF OK TST FOR CNTL OR JUST RETURN
*                                    FALL THRU TO NEXT LINE.
** * ------------------------------------------------------------- * **
** * -- BASED ON THE CALLING CODE                               -- * **
** * --                                                         -- * **
** * --  Return codes from exit 54:                             -- * **
** * --                                                         -- * **
** * --  0    -   Continue Normal Processing                    -- * **
** * --  4    -   Continue Normal Processing                    -- * **
** * --            (No other calls)                             -- * **
** * --  8    -   Process JECL statement as if it were a        -- * **
** * --           JCL comment stmt; Continue if JCL stmt        -- * **
** * --  12   -   Illegal Control Card detected, Kill Job       -- * **
** * --  16   -   Purge Job                                     -- * **
** * --                                                         -- * **
** * --  THE RETURN CODE SETS THE FOLLOWING BITS IN X054RESP,   -- * **
** * --  OR WE CAN SET THEM OURSELVES AND FORGET THE RC.        -- * **
** * --                                                         -- * **
** * --          OI X054RESP,X054JCMT OR RC=8 = DO NOT DO JECL  -- * **
** * --          OI X054RESP,X054KILL OR RC=12= KILL THE JOB    -- * **
** * --          OI X054RESP,X054PURG OR RC=16= PURGE JOB       -- * **
** * --          RC >16  = GO BOOM BIG TIME ! (LIMIT NOT TESTED)-- * **
** * --  THE BOOK SAYS A MESSAGE IS SUPPORTED FOR RC=12 OR 16,  -- * **
** * --       MOVE MSG TO X054JXWR AND OI X002RESP,X002XSEM     -- * **
** * --   (I JUST DON'T SEE IT IN THE CODE IN HASCINJR )        -- * **
** * --                                                         -- * **
** * -- CURRENTLY WE SET ALL ERROR MESSAGES IN RCARDSCN ROUTINES-- * **
** * -- AND ONLY NEED TO ISSUE A MESSAGE FROM MAINLINE (RTN TO  -- * **
** * -- THE EXIT54 CALL) IF EVERYTHING WENT OK (RC=8).          -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
*
X054RC12 LA    R15,12(R0,R0)        SET RETURN CODE 12 - JCL ERROR
         J     RJCLRET                 JCL ERROR THE JOB.
*
X054RC08 LA    R15,8(R0,R0)         RC=8 - TREAT AS A COMMENT
         J     RJCLRET
*
X054RC00 XR    R15,R15             RC=0 - DO NOTHING - NORMAL JES2
RJCLRET  EQU   *                   ABOUT TO RETURN HOME
         LTR   R6,R6               IS THERE A WORK AREA?
         JZ    RETN06              JUST RETURN WITHOUT RELEASING WRK
* NEXT CHECK THE ECSA AREA TO SEE IF WE EVEN NEED TO WRITE SMF OR NOT
         L     R2,X454ECSA         GET THE ECSA POINTER IN R2 NOW
         USING  SSMTB,R2           SET A TEMP USING FOR IT
         CLC   SSMEYE,=CL4'SSMT'   IS IT REALLY WHAT WE THINK IT IS?
         JNE   SKPSMF44             IF NOT SKIP THE SMF PROCESS
* NEXT DO WE NEED TO WRITE AN SMF REC - OR - NOT ?
         CLI   SSMSMFOP,SSMSMF_ALL DO THEY WANT THEM ALL?
         JE    DOSMF
         CLI   SSMSMFOP,SSMSMF_INPUT  MAYBE JUST THE INPUT RECS
         JNE   SKPSMF44            IF SET TO 'ACTION' OR 'NONE' SKIP IT
DOSMF    EQU   *
** * ------------------------------------------------------------- * **
** * --  We also need to get the ECSA area here to check if we  -- * **
** * -- even need to write a record or not..                    -- * **
** * ------------------------------------------------------------- * **
         LA    R5,X454SMFX         I WILL SET UP THE USING FOR SMF NOW
*        USING STPCSMFD,R5
         USING SMFBASE,R5
         LR    R4,R15              SAVE RETURN CODE NOW - RESTORE IT
*                                    LATER...
         XC    X454SMFW,X454SMFW   CLEAR A WORK AREA NOW
         CLI   SSMSMFNM,X'81'      BAD SMF NUMBER? < 81 IS NO GOOD !
         JL    SKPSMF44            SKIP IT IS BAD.
         CLI   XPLXITID,X'04'      FROM EXIT04 - OR EXIT54 ?
         JNE   DOUSRTN1            IF NOT 04 THEN DO USER MODE CODE.
*                                     ELSE TREAT AS THOUGH IN MAINTASK
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         XR    R1,R1               CLEAR RESULT REG BEFORE THE CALL
         $GETSMFB WAIT=NO          TRY TO GET AN SMF BUFFER TO FILL.
        $ENVIRON POP,SETR11=YES
         JZ    SKPSMF44            REVERSE RC LOGIC - RC=0=ERROR!
         LTR   R1,R1               DID THEY GIVE US BACK A ZERO ADDR?
         JZ    SKPSMF44              - IF SO - CONTINUE BY SKIPPING IT!
         ST    R1,X454SMFW         ELSE WE HAVE ONE, SAVE PTR IN SMFW
         LR    R5,R1               BUFFER PTR IN R5 ( REPLACE ORIG. R5)
         LA    R5,8(0,R1)          ADJUST FOR THE OFFSET USING STATEMNT
         MVC   SMFXLEN,=AL2(SMFXLS44)  LEN OF TYPE 44 RECS.
         XC    SMFXSEG,SMFXSEG      ZERO THE SEGMENT NOW
         MVI   SMFXFLG,B'01011110'  INDICATE A SUBTYPED RECORD.
         MVC   SMFXRTY,SSMSMFNM     MOVE THE SMF NUMBER FROM ECSA
*   NOW GET DATE AND TIME FOR AN SMF RECORD.
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         $STCK ADDR=X454TIMD

         LM    R0,R1,X454TIMD      LOAD REGS BEFORE CALLING CONVERSION
*  DATE / TIME IS NOW IN R0 AND R1
         $CALL HCNVTIME            CONVERT TO A FORMAT VALID FOR SMF
        $ENVIRON POP,SETR11=YES
         STCM  R1,B'1111',SMFXDTE  STORE DATE IN RECORD.
         STCM  R0,B'1111',SMFXTME  STORE TIME IN RECORD.
         J     DOCOMN              DO THE COMMON SMF STUFF.
DOUSRTN1 EQU   *                   RETURN TO NORMAL 'USER MODE'

* BEFORE RELEASING STORAGE , FILL IN THE SMF RECORD AND WIRTE IT!
         MVC   SMFXLEN,=AL2(SMFXLS44)  LENGTH OF SMF TYPE 44 RECORD
         XC    SMFXSEG,SMFXSEG     ZERO THE SEGMENT NOW.
         MVI   SMFXFLG,B'01011110' INDICATE SUB-TYPED RECORD
         MVC   SMFXRTY,SSMSMFNM    MOVE SMF# FROM ECSA
         CLI   SSMSMFNM,X'81'      IF LESS THAN X'81'
         BL    SKPSMF44            SKIP IT - INVALID SMF#
         DROP  R2                  DROP LINKAGE TO THE ECSA AREA NOW
* WE NEED THE TIME TO FINISH
*        LA    R2,X454TIMD
*        TIME  BIN,(2),ZONE=UTC,DATETYPE=YYYYDDD,
*              LINKAGE=SYSTEM,MF=(E,TIMEDS)
*        MVC   SMFXTME,X454TIMD    TIME IN 1/100THS OF A SEC.
*        MVI   SMFXDTE+3,X'0F'     PREP DATE FIELD
*        MVO   SMFXDTE(4),X454TIMD+9(3)
* WE REPLACED THE ABOVE TIME / DATE MANIPULATION WITH THIS NEW ONE
         STCK  X454WKDD            STORE CLOCK INTO WORK AREA
         LM    R0,R1,X454WKDD      SET UP PARMS TO PASS TO HCNVTIME
        $CALL  HCNVTIME            HCNVTIME MAKES STCK INTO SMF TIME/DT
*                                   TIME IN .01 SEC UNITS & PACKED DATE
         STCM  R0,B'1111',SMFXTME  SAVE THE TIME AND DATE, SUITABLE
         STCM  R1,B'1111',SMFXDTE    FOR USE IN AN SMF RECORD.
*
*
*   finally done with time and date.
DOCOMN   EQU   *
*
         MVC   SMFXSID,CCTSID      (SYSTEM ID)
         MVI   SMFXSSI,X'40'
         MVC   SMFXSSI+1(L'SMFXSSI-1),SMFXSSI  CLEAR SMFXSSI FIELD
         MVC   SMFXNUMT,=X'0002'   2 TRIPLETS IN THIS RECORD
         MVC   SMFXRESV,=AL2(SMFD8TSD)  SELF DEFINING SECTION LENGTH
         MVC   OFFPRD01,=A(PRDOFT)   OFFSET RDW TO PROD SECTION
         MVC   LENPRD01,=AL2(PRDLENS)
         MVC   NUMPRD01,=X'0001'   ONLY 1 PRODUCT SECTION
         MVC   OFFTEC01,=AL4(STDOFFS) OFFSET TO SUBTYPES
* NEXT GET THE PRODUCT SECTION FOR SSM RECORDS
         MVC   SMFD8SVR,=X'00010700'  MOVE THE VRM
         MVC   SMFD8SID,=CL16'SHARED SPOOL MOD'
* NOW THE SUB-TYPE SPECIFIC INFORMATION
         MVC   SMFXSTY,=X'0044'    MOVE THE SUB TYPE
         MVC   SMFD8STY,=X'0044'     TO ALL THREE
         MVC   SMFD8S44,=X'0044'        FIELDS
         MVC   NUMTEC01,=X'0001'   # OF SUBTYPED SECTIONS = 1
         MVC   LENTEC01,=AL2(SMFLNS44) SET LEN OF SUBTYPED DATA ONLY
         MVC   SMFD84IN,JCTRNODE
         MVC   SMFD84CD,JCTRDRON
         MVC   SMFD84JC,JCTJCLAS
         MVC   SMFD84JI,JCTJOBID
         MVC   SMFD84JN,JCTJMRJN
         MVC   SMFD84XT,JCTETS
         MVC   SMFD84MG(1),X454CTYP     MOVE THE CNTL TYPE
         MVC   SMFD84MG+2(8),X454RELT
         MVC   SMFD84MG+12(8),X454NAME
         MVC   SMFD84MG+21(1),X454CTYP
         MVC   SMFD84MG+24(8),X454TIME
         MVC   SMFD84MG+34(1),X454TYPE
* GET THE JQA EXTENTSION AS IT CURRENTLY EXISTS - IF IT EXISTS.
         MVI   SMFD84JA,X'40'            CLEAR THE JCTEXTENSION AREA
         MVC   SMFD84JA+1(L'SMFD84JA-1),SMFD84JA
         $JCTXGET JCT=(R8),TYPE='USER',MOD=1,                          X
               NOTFOUND=SKPJCTX,FOUND=JCTXX54,ERRET=SKPJCTX
JCTXX54  EQU   *
         MVC   SMFD84JA,0(R1)      MOVE THE JCT EXTENSION WHEN FOUND
SKPJCTX  B     DOSMFX54
* DONE - RECORD IS FORMATTED -
DOSMFX54 EQU   *                   RECORD IS NOW FORMATTED.
         CLI   XPLXITID,X'04'      ARE WE MAINTASK, FROM EXIT04?
         JNE   DOWTM               IF NOT JUST DO OLD USERMODE ROUTINE
*
         L     R1,X454SMFW         GET ORIGINAL BUFFER POINTER
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
        $QUESMFB  (R1)             QUEUE THE BUFFER TO A SUBTASK
        $ENVIRON POP,SETR11=YES
         J     SKPSMF44            JUMP PAST THE 'USER' SMF WRITE SEG.
DOWTM    EQU   *                   DO THE ORIGINAL USERMODE SMF ROUTINE
         LA    R5,SMFXLEN          PREPARE TO ISSUE SMFEWTM
*                                    JES2 BUFFER HEADER FOR SMF RECS.
         LA    R7,X454SMFW
         SMFEWTM  (5),BRANCH=YES,WRKAREA=(7)
SKPSMF44 EQU   *
         LTR   R6,R6               IS THERE A WORK AREA?
         JZ    RETN06
         MVC   JCTXWRK(80),C454CDSV       RESTORE THE JCTXWRK AREA NOW
         LR    R15,R4              RESTORE THE SAVED RTN CODE (USR TSK)
         CLI   XPLXITID,X'04'      IS IT EXIT04 THAT CALLED US?
         JNE   DOURLS              IF NOT THEN DO RELEASE STORAGE CODE
* ELSE USE $RETWORK TO RETURN OUR STORAGE AREA
        $ENVIRON PUSH,ENVIRON=JES2,SETR11=YES
         $RETWORK  (R6)            * RETURN OUR WORK AREA NOW
        $ENVIRON POP,SETR11=YES
         LR    R15,R4              RESTORE RTN CODE (MAIN TASK)
         J     RETN06
DOURLS   EQU   *
         LR    R5,R15              SAVE RETURN CODE FOR A SECOND
         L     R7,X454LEN          GET THE LENGTH OF STORAGE TO RELSE
         STORAGE RELEASE,ADDR=(R6),LENGTH=(R7)
         LR    R15,R5              RESTORE RETURN CODE
RETN06   EQU   *
         $RETURN (R15)
         DROP  R5
*
X054RTST EQU   *
         ICM   R6,B'1111',JCTXWRK+72 RESTORE R6 (PROBABLY NOT NEEDED)
         ICM   R4,B'1111',X454MSGM GET ADDR OF MSG MODEL
         LTR   R4,R4               IS THERE A MESSAGE MODEL SET?
         JZ    X054RC08
         XR    R1,R1               CLEAR R1 TO RECIEVE TYPE INDICATOR
         IC    R1,X454TYPE         GET THE TYPE INDICATOR
         CHI   R1,BTABMAX
         JH    X054RC12            IF TOO BIG, JUST ERROR OUT NOW.
*                                    THIS PREVENTS WILD BRANCHES.
         XR    R15,R15             CLEAR R15 BEFORE LOADING MSG LEN.
         ICM   R15,B'0011',0(R4)   USE 1ST 2 BYTES OF MSG MODEL AS LEN
         LTR   R15,R15             IF A ZERO LEN MSG IS PROVIDED.
         JZ    X054RC08            RETURN AND DON'T DO A MESSAGE!

         BCTR  R15,R0              REDUCE BY ONE FOR EX'ED INST.
         EX    R15,MVMSGMDL        MOVE THE MESSAGE MODEL NOW.
MVMSGMDL MVC   JCTXWRK(0),2(R4)    "EX"ED MOVE THE MESSGE MODEL

         B     BTAB1(R1)           BRANCH INTO BRANCH TABLE
BTAB1    J     X054RC00            NO ACTION IF RC=0
         J     X54CNTL             RC=4 = CNTL STATEMENTS
         J     X54BEFR             BEFORE,AFTER,WITH,WITHOUT ROUTINE
         J     X54TIME             HOLD FOR AND HOLD TILL STATEMENTS
         J     FINALFMT            NO AUTO ROUTING
         J     X054RC08
         J     X054RC08            OK MEMBERS
         J     X054RC08            NOT OK MEMBERS
         J     X054RC12            GENERAL ERRROR ROUTINE INVALID BR.
BTABMAX  EQU   *-BTAB1             MAX RETURN CODE VALUE ALLOWED
*
** * ------------------------------------------------------------- * **
** * -- ON RETURN, IF THIS WAS A CNTL STATEMENT, BUILD AND      -- * **
** * -- ISSUE A MESSAGE ABOUT THE STATMENT - IT IS IMPOSSIBLE TO - * **
** * -- BUILD THE MESSAGE WITHIN THE PROCESSING ROUTINES SO WE  -- * **
** * -- DO IT HERE INSTEAD.                                     -- * **
** * ------------------------------------------------------------- * **
X54CNTL  EQU   *
** * ------------------------------------------------------------- * **
** * -- CNTL USES TYPE=4, RELATIVE1=CNTLNAME, RELATIVE2=E,S,P   -- * **
** * ------------------------------------------------------------- * **
         MVC   JCTXWRK+38(8),X454NAME  MOVE THE CNTL NAME
         MVC   JCTXWRK+47(1),X454CTYP  MOVE THE CNTL TYPE (S/E/P)
         CLI   JCTXWRK+47,C'S'     IS IT SHR?
         JE    CNTLS
         CLI   JCTXWRK+47,C'P'
         JE    CNTLP
         CLI   JCTXWRK+47,C'E'
         JE    CNTLE
         J     X054RC12            ERROR IF NOT E,S, OR P.
CNTLP    EQU   *
         MVC   JCTXWRK+48(2),=C'RG'
         J     FINALFMT               HERE IS WHERE
CNTLS    EQU   *
         MVC   JCTXWRK+48(2),=C'HR'    WE SET THE MODIFIER
         J     FINALFMT
CNTLE    EQU   *                           SHR, OR EXC, OR PRG
         MVC   JCTXWRK+48(2),=C'XC'

FINALFMT EQU   *                   FIRST TEST FOR A SPECIAL CONDITION
         LA    R15,1(R0,R15)       add 1 to r15 (RESTORE original len)

** * ------------------------------------------------------------- * **
** * -- finally adjust for jobid of not the submitters jobid,   -- * **
** * -- but for the jobid (jobname) of the job being processed. -- * **
** * ------------------------------------------------------------- * **

         MVC   JCTXWRK+9(8),JCTJNAME

         $WTO  JCTXWRK,(R15),WAIT=YES,JOB=NO,                          X
               ROUTE=$LOG+$MAIN,CLASS=$ACTION,PRI=$ST
         J     X054RC08            JUST RETURN WE ARE DONE.
X54BEFR  EQU   *                   BEFORE MESSAGES
         MVC   JCTXWRK+23(8),X454RELT  MOVE THE RELATIONAL TYPE
         MVC   JCTXWRK+42(8),X454NAME  MOVE THE NAME
         B     FINALFMT
X54TIME  EQU   *                   WAITFOR AND WAITTIL MESSAGES
         MVC   JCTXWRK+36(8),X454TIMD MOVE THE TIME VALUE TO JCTXWRK
         B     FINALFMT
** * ------------------------------------------------------------- * **
** * --  HERE ARE THE STATEMENT TABLES FOR PARSING THE JECL!    -- * **
** * --   THE STATEMENT TABLES LINK US TO THE PROCESSING        -- * **
** * --   ROUTINES THAT DO FINAL VALIDATION AND UPDATE FIELDS.  -- * **
** * --                                                         -- * **
** * --  INSIDE THE RTRELJOB WE WILL HANDLE ALL RELATIVE JOB    -- * **
** * --   VALUES FOR THE /*AFTER, /*WITH, /*WITHOUT, /*BEFORE   -- * **
** * --  STATEMENTS, OR RECOGNIZE THEY ARE NOT FOR THAT ROUTINE -- * **
** * --  IN WHICH CASE WE SIMPLY GO ON TO THE NEXT ROUTINE.     -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
RSRELJOB $STMTTAB TABLE=USER
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               ROUTINE=RTRELJOB,    THE ROUTINE TO GET CONTROL FOR IT  X
               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X
               POSITION=1           AND IT'S POSITION ON THE CARD
         $STMTTAB TABLE=END
*
RSCNTL   $STMTTAB TABLE=USER
* RESOURCE IN  /*CNTL RESOURCE
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               ROUTINE=RTCNTL1,     THE ROUTINE TO GET CONTROL FOR IT  X
               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X
               POSITION=1           AND IT'S POSITION ON THE CARD
* SHR, OR EXC IN   /*CNTL RESOURCE,SHR¦EXC¦SHARED¦EXCLUSIVE¦PURGE
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               ROUTINE=RTCNTL2,     THE ROUTINE TO GET CONTROL FOR IT  X
               REQUIRED=NO,         THIS IS A REQUIRED KEYWORD         X
               POSITION=2           AND IT'S POSITION ON THE CARD
         $STMTTAB TABLE=END
* /*NOAUTORT
RSNOAUT  $STMTTAB TABLE=USER
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               ROUTINE=RTNOAUT,     THE ROUTINE TO GET CONTROL FOR IT  X
               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X
               POSITION=1           AND IT'S POSITION ON THE CARD
         $STMTTAB TABLE=END
** * ------------------------------------------------------------- * **
** * -- RSHOLDT HOLDTILL STATEMENTS -                           -- * **
** * --  /*HOLDTILL HH:MM:SS                                    -- * **
** *
** * ------------------------------------------------------------- * **
RSHOLDT  $STMTTAB TABLE=USER
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X
               ROUTINE=RTTIME,      THE ROUTINE TO GET CONTROL FOR IT  X
               POSITION=1           AND IT'S POSITION ON THE CARD
         $STMTTAB TABLE=END
** * ------------------------------------------------------------- * **
** * -- RSHOLDF HOLDFOR  STATEMENTS -                           -- * **
** * --  /*HOLDFOR  HHH:MM:SS -OR - HHH:MM:SS.TT.HH             -- * **
** * ------------------------------------------------------------- * **
RSHOLDF  $STMTTAB TABLE=USER
         $STMTTAB KEYWORD=POS,      INDICATE A POSITIONAL KEYWORD      X
               REQUIRED=YES,        THIS IS A REQUIRED KEYWORD         X
               ROUTINE=RTTIMEX,     THE ROUTINE TO GET CONTROL FOR IT  X
               POSITION=1           AND IT'S POSITION ON THE CARD
         $STMTTAB TABLE=END
         DS    0F
VERBTAB  EQU   *                    INSERT VERBS OF LENGTH 8 WITH
*                                   ADCONS FOR THE ASSOCIATED KEYLISTS
*                                   FOLLOWING EACH VERB, FOR 12 BYTE
*                                   TABLE ENTRIES.
         DC    CL8'AFTER',A(RSRELJOB)
         DC    CL8'BEFORE',A(RSRELJOB)
         DC    CL8'WITH',A(RSRELJOB)
         DC    CL8'WITHOUT',A(RSRELJOB)
         DC    CL8'CNTL',A(RSCNTL)
         DC    CL8'NOAUTORT',A(RSNOAUT)
         DC    CL8'HOLDTIL',A(RSHOLDT)
         DC    CL8'HOLDFOR',A(RSHOLDF)
         DC    CL8'OKMEMS ',A(*-*)
         DC    CL8'NOTMEMS',A(*-*)
VERBLAST EQU   *
X0454LEN DC    AL4(@0454LEN)
         LTORG
         DROP  R6,R8,R9,R10,R11,R12,R13
*
*
** * ------------------------------------------------------------- * **
** * -- ROUTINES CALLED FROM THE ROUTINE= STATEMENT ON THE      -- * **
** * -- $STMTTAB MACROS ABOVE.                                  -- * **
** * -- HERE'S WHERE ALL THE REAL WORK HAPPENS.                 -- * **
** * ------------------------------------------------------------- * **
         EJECT

** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTRELJOB                                     -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    PICKS THE RELATIONAL JOBNAME UP FROM THE FOLLOWING - -- * **
** * -- /*AFTER, /*WITH, /*BEFORE, /*WITHOUT  STATEMENTS.       -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  GROUP NOT VALID                             -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING JCT,R8
         USING JRW,R10
         USING RTRELJOB,R12         SET LOCAL BASE
         USING STJCTX,R7            ADDRESS OUR JCTX
*
RTRELJOB $SAVE  ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
         LH    R0,JRWRSCNL          GET LENGTH OF OPERAND
         CHI   R0,L'JCTJNAME        COMPARE LENGTH TO VALID JOBNAME
         JH    RNLERR1              JOBNAME LENGTH ERROR
         CLC   JCTJNAME,JRWRSCNV    IS IT THE SAME AS OUR JOBNAME
         JE    JNLDUP1              DO DUPLICATE TO OUR JOBNAME ERROR
**** NOW WE HAVE A VALID JOBNAME PASSED TO US **
**** WE  NEED TO ADD IT TO THE JCTX           **
         $CALL LOCJCTX
*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP
         LTR   R15,R15
         JZ    GOTJX01              IF NOT ZERO - MSG ALREADY SETUP.
         LR    R1,R7               ELSE R7 HAS AN ERROR MSG SET UP
         J     RTN0104
* NOW UP DATE  THE CORRECT JCTX FIELD
* FIRST PREP A MESSAGE AREA WITH MESSAGE MODEL - TO BE ALTERED LATER
GOTJX01  EQU   *
         ICM   R6,B'1111',JCTXWRK+72  RESTORE THE POINTER TO WORK AREA
* SINCE THIS ROUTINE IS CALLED FOR SEVERAL DIFFERENT VERBS WE NEED
* TO SEE WHICH ONE WE ARE WORKING WITH.
         CLC   JRWSTMTV,=CL8'AFTER  '  IS IT AN AFTER CARD?
         JE    UPDTAFT
         CLC   JRWSTMTV,=CL8'BEFORE '  IS IT A BEFORE STATEMENT
         JE    UPDTBEF
         CLC   JRWSTMTV,=CL8'WITHOUT ' IS IT A WITHOUT (WATCH POSITION)
         JE    UPDTWTHO
         CLC   JRWSTMTV,=CL8'WITH '   IS IT WITH?  (WATCH POSITION!)
         JE    UPDTWITH
         LA    R1,VERBER            ELSE WE HAVE A BIG ERROR!
         J     RTN0104              RETURN AND GIVE THEM THE MESSAGE
** IT WAS A /*AFTER
UPDTAFT  EQU   *
         OI    UJCXMFLG,UJCXAFT     WE HAVE AN AFTER STATEMENT
         MVC   UJCXAFTN,JRWRSCNV    MOVE THE JOBNAME TO AFTER FIELD
         J     RTN0100              RETURN RC=0 FROM SUB RTN.
** IT WAS A /*BEFORE
UPDTBEF  EQU   *
         OI    UJCXMFLG,UJCXBEF     SET /*BEFORE CARD PRESENT
         MVC   UJCXBFOR,JRWRSCNV    MOVE JOBNAME FROM RCARDSCN AREA
         J     RTN0100              RETURN RC=0 FROM SUB RTN.
** IT WAS A /*WITHOUT
UPDTWTHO EQU   *
         OI    UJCMSCF1,UJCMSWOJ    SET WITHOUT STATMENT FLAG IN MCSF1
         MVC   UJWIOUT,JRWRSCNV      MOVE JOBNAME FROM RCARDSCN AREA
         J     RTN0100              RETURN RC=0 FROM SUB RTN.
** IT WAS A /*WITH
UPDTWITH EQU   *
         OI    UJCXMFLG,UJCXWITF    SET /*WITH CARD PRESENT
         MVC   UJCXWITH,JRWRSCNV    MOVE JOBNAME FROM RCARDSCN AREA
         J     RTN0100              RETURN RC=0 FROM SUB RTN.
RNLERR1  EQU   *                    RELATIONAL JOBNAME IS TOO LONG.
         LA    R1,RELJNML           POINT TO MSG
         J     RTN0104
JNLDUP1  EQU   *                    DUPLICATE JOB / RELATIONAL JOBNAME
         LA    R1,RELDUP            POINT TO ERROR MNESSAGE
         J     RTN0104              RETURN - SUB RTN RC=04
RTN0100  EQU   *                   SUCESS - RETURN NOW.
         MVC   X454NAME,JRWRSCNV   MOVE JOBNAME TO RELATIVE VAL 1
         MVC   X454RELT,JRWSTMTV   MOVE THE STATEMENT VERB (BEF/AFT)
         MVI   X454TYPE,X'08'      MOVE BRANCH LABEL X'08'
         LA    R15,RELXMSG
         ST    R15,X454MSGM        SAVE MODEL ADDRESS NOW
         XR    R15,R15
         J     RTN01
RTN0104  $STORE (R1)               save return message
         LHI   R15,4
*        J     RTN01
RTN01    $RETURN RC=(R15)          RETURN - JUST DO IT!
RELJNML  DC    Y(L'RELJNMLM)
RELJNMLM $MSG  999,'STSCX54B-E RELATIONAL JOBNAME LENGTH IS GREATER THAX
               N ALLOWED.'
RELDUP   DC    Y(L'RELDUPM)
RELDUPM  $MSG  999,'STSCX54B-E RELATIONAL JOBNAME CANNOT BE THE SAME ASX
                CURRENT JOBNAME.'
VERBER   DC    Y(L'VERBERM)
VERBERM  $MSG  999,'STSCX54B-E ERROR FOUND IN RTRELJOB ROUTINE WHILE CHX
               ECKING JRW VERB.'
         $MID   943
RELXMSG  DC    AL2(L'RELXMSGD)     LENGTH OF THE MESSAGE
RELXMSGD DC    C'&MID.JOBNAMEX * -- TYPEDATA JOBNAME = 12345678  --'
         LTORG
         DROP  R6,R7,R8,R10,R12
** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTCNTL1                                      -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    PICKS THE ARBITRARY RESOURCE NAME FROM A /*CNTL    - -- * **
** * -- STATEMENT, AND SAVES IT IN A JRW AREA FOR LATER USE.    -- * **
** * --                                                         -- * **
** * -- THE FUNCTION ROUTINE FOR /*CNTL IS DIFFERENT, IN THAT   -- * **
** * -- WE ONLY SET ERROR MESSAGES FROM HERE - THE INFO STATEMENT  * **
** * -- THAT ENDS UP IN THE JCL LISTING IS GENERATED AFTER WE   -- * **
** * -- RETURN FROM THE CALL TO RCARDSCN, BECAUSE WE DO NOT     -- * **
** * -- KNOW WHAT THE WHOLE STATEMENT MEANS UNTIL ALL PARTS,    -- * **
** * -- INCLUDING OPTIONAL (MISSING) POSITIONALS ARE SCANED.    -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  GROUP NOT VALID                             -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING STJCTX,R7            ADDRESS OUR JCTX
         USING JCT,R8
         USING JRW,R10
         USING RTCNTL1,R12          SET LOCAL BASE
*
RTCNTL1  $SAVE  ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
         LH    R2,JRWRSCNL          GET LENGTH OF OPERAND
         LTR   R2,R2
         JM    NORESNAM            OPERAND WAS MISSING - BIG TIME ERROR
         CHI   R2,L'JCTJNAME        COMPARE LENGTH TO VALID JOBNAME
         JH    RNLERR2              JOBNAME LENGTH ERROR
** NOW WE HAVE A VALID RESOURCE - ASSUME SHARED, AND ADD TO JCTX
         $CALL LOCJCTX
*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP
         LTR   R15,R15
         JZ    GOTJX02             WE GOT IT - ELSE WE HAD AN ERROR -
         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG
         J     RTN0204
* NOW UP DATE  THE CORRECT JCTX AND JXW FIELDS
GOTJX02  EQU   *
         ICM   R6,B'1111',JCTXWRK+72 RESTORE R6 (PROBABLY NOT NEEDED)
         LA    R15,CNTLMSG         GET OUR MESSAGE SKELETON ADDR
         ST    R15,X454MSGM        AND SAVE IN THE JCTXWRK AREA
         MVI   X454TYPE,X'04'      TELL THEM WE ARE A CNTL STATEMENT
         MVC   X454NAME,JRWRSCNV    MOVE THE NAME TO JCTX
*  WE SAVED THE NAME IN THE JCTXWRK TO USE IN THE INFO MSG LATER.
         OI    UJCXMFLG,UJCXCNTL    INDICATE WE HAVE AT LEASE 1 CNTL
         XR    R2,R2                CLEAR WORK REG
         IC    R2,UJCXMFLG          GET COUNT OF USED CNTL NAMES
         SRL   R2,4                 SHIFT & LEAVE ONLY THE CNTL COUNT
         XR    R1,R1                CLEAR THE WORK REG FIRST
         LA    R1,UBRNCTL-3(R0,R0)  GET THE MAX NUMBER OF CNTL CARDS
*    MAX CARDS = UBRNCTL - 1 AFTER, 1 BEFORE AND 1 WITH - THERE IS A
*                                   POOL OF CNTL CARDS POSSIBLE.
         CR    R2,R1                ARE WE GOING TO SPILL OVER TABLE?
         JNL   CNTMAX1              IF YES - DONT DO IT - JCLERROR!
* IT WILL FIT - NOW UPDATE THE COUNT *
         IC    R15,UJCXMFLG         PICK UP ORIGNINAL FLAG IN R15
         AHI   R15,X'0010'          BUMP COUNT IN HIGH ORDER NIBBLE
         STC   R15,UJCXMFLG         SAVE NEW COUNT IN UJCXMFLG
* (OUR "MULTIPLICATION" WONT WORK FOR ZERO - SHORT CUT IT)
         LTR   R2,R2                FIRST CHECK TO SEE IF ZERO
         JZ    SAVE1ST              IF ZERO, SAVE IN FIRST SLOT
* IF NOT ZERO, THEN "MULTIPLY" BY 9.
         LR    R1,R2                SAVE ORIGINAL COUNT IN R1
         SLL   R2,3                 MULITPLY BY 8
         AR    R2,R1                PLUS ONE MORE TIME = *9 = DISPL.
SAVE1ST  LA    R1,UJCXDNAM(R2)      GET THE ADDR TO MOVE NAME TO
         MVC   0(8,R1),JRWRSCNV     MOVE THE PARSED RESOURCE NAME
         MVC   X454NAME,JRWRSCNV   MOVE THE RESOURCE NAME TO REL1

         MVI   8(R1),C'S'           ASSUME SHARED FOR NOW.
         MVI   X454CTYP,C'S'       MOVE "S" TO RELATIVE VALUE #2
* OUR WORK IS DONE HERE - RETURN FOR MORE PARMS.
         J     RTN0200             THEN RETURN WE ARE DONE!
RNLERR2  EQU   *                    RELATIONAL JOBNAME IS TOO LONG.
         LA    R1,RNLNML1           POINT TO MSG
         J     RTN0204
CNTMAX1  EQU   *                    TOO MANY /*CNTL STATEMENTS
         LA    R1,CNTMAXM           POINT TO ERROR MNESSAGE
         J     RTN0204              RETURN - SUB RTN RC=04
NORESNAM LA    R1,RNLNML0           RESOURCE NAME MISSING MSG
         J     RTN0204
RTN0200  XR    R15,R15
         J     RTN02
RTN0204  $STORE (R1)               save return message
         LHI   R15,4
RTN02    $RETURN RC=(R15)          RETURN - JUST DO IT!
RNLNML0  DC    Y(L'RNLNMMD)
RNLNMMD  $MSG  999,'STSCX54B-E CNTL RESOURCE NAME IS MISSING.'
RNLNML1  DC    Y(L'RNLNMLD)
RNLNMLD  $MSG  999,'STSCX54B-E CNTL RESOURCE NAME IS TOO LONG.'
CNTMAXM  DC    Y(L'CNTMAXD)
CNTMAXD  $MSG  999,'STSCX54B-E TOO MANY CNTL STATEMENTS FOR ONE JOB.'
         $MID   943
CNTLMSG  DC    AL2(L'CNTLMSGD)     LENGTH OF THE MESSAGE
CNTLMSGD DC    C'&MID.JOBNAMEX * -- CONTROL INFO = ********,***  --'
         LTORG
         DROP  R6,R7,R8,R10,R12
** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTCNTL2                                      -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    PICKS THE SHARED / EXCLUSIVE PARM FROM A /*CNTL    - -- * **
** * -- STATEMENT, AND SAVES IT IN A JRW AREA FOR LATER USE.    -- * **
** * --                                                         -- * **
** * -- THE FUNCTION ROUTINE FOR /*CNTL IS DIFFERENT, IN THAT   -- * **
** * -- WE ONLY SET ERROR MESSAGES FROM HERE - THE INFO STATEMENT  * **
** * -- THAT ENDS UP IN THE JCL LISTING IS GENERATED AFTER WE   -- * **
** * -- RETURN FROM THE CALL TO RCARDSCN, BECAUSE WE DO NOT     -- * **
** * -- KNOW WHAT THE WHOLE STATEMENT MEANS UNTIL ALL PARTS,    -- * **
** * -- INCLUDING OPTIONAL (MISSING) POSITIONALS ARE SCANED.    -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  GROUP NOT VALID                             -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING STJCTX,R7            ADDRESS OUR JCTX
         USING JCT,R8
         USING JRW,R10
         USING RTCNTL2,R12          SET LOCAL BASE
*
RTCNTL2  $SAVE  ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
         XR    R4,R4                CLEAR R4 - IT IS A PLACEHOLDER
*
         CLC   =C'SHR ',JRWRSCNV    IF IT IS "SHR" OR "SHARED",
         JE    RTN0300                WE ARE DONE - JUST GO HOME.
         CLC   =C'SHARE ',JRWRSCNV  IF IT IS "SHR" OR "SHARED",
         JE    RTN0300                WE ARE DONE - JUST GO HOME.
         CLC   =C'SHARED ',JRWRSCNV IF IT IS "SHR" OR "SHARED",
         JE    RTN0300                WE ARE DONE - JUST GO HOME.
*
         CLC   =C'EXC ',JRWRSCNV    IF IT'S 'EXC' OR 'EXCLUSIVE'
         JE    DOEXCUPD              THEN UPDATE TO AN EXCLUSIVE ENQ
         CLC   =C'EXCLUSIVE ',JRWRSCNV  IF IT'S SO, THEN MAKE IT SO.
         JE    DOEXCUPD
         CLC   =C'PURGE ',JRWRSCNV  ALSO HANDLE THE PURGE OPTION IF
*                                     PRESENTED AS 2ND PARM.
         JE    DOPURGE
         CLC   =C'PRG ',JRWRSCNV  ALSO HANDLE THE PURGE OPTION
         JE    DOPURGE
         J     UNKNWCNT             UNIDENTIFIED PARM HAS BEEN PASSED
DOPURGE  EQU   *
*        MVI   X454CTYP,C'P'        MAKE THE UPDATE VALUE A P - PURGE
         IC    R4,=C'PURGE'         JUST SAVE THE FIRST BYTE - P-PURGE
         J     UPEXCPRG             UPDATE THE EXCLUSIVE OR PURGE
DOEXCUPD EQU   *
*        MVI   X454CTYP,C'E'        MAKE THE UPDATE VALUE A P - PURGE
         IC    R4,=C'EXC '          JSUT SAVE THE FIRST BYTE E - EXCE
UPEXCPRG EQU   *
** NOW WE HAVE TO UPDATE TO AN EXCLUSIVE RESOURCE NAME
         $CALL LOCJCTX
*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP
         LTR   R15,R15
         JZ    GOTJX03              IF NOT ZERO - MSG ALREADY SETUP.
         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG
         J     RTN0304
* NOW UP DATE  THE CORRECT JCTX FIELD     DGRP
GOTJX03  EQU   *
         ICM   R6,B'1111',JCTXWRK+72  SET POINTER TO WORK AREA
         XR    R2,R2                CLEAR A WORK REG.
         IC    R2,UJCXMFLG          GET THE FLAG BYTE
         SRL   R2,4                 CLEAR ALL BUT THE COUNT BITS
         BCTR  R2,R0                RUDUCE BY ONE (FIND CURRENT - NOT
*                                      THE NEXT AVAILABLE).
         LTR   R2,R2                TEST FOR ZERO FIRST
         JZ    ONLYON0               OUR "MULTIPLY" WONT WORK FOR ZERO
         LR    R1,R2                SAVE ORIGINAL VALUE IN R1
         SLL   R2,3                 MULTIPLY R2 *8
         AR    R2,R1                PLUS THE ORIGINAL = * 9 = DISP
ONLYON0  LA    R1,UJCXDNAM(R2)
         STC   R4,8(R1)            SAVE FLAG IN JCTX
         STC   R4,X454CTYP          MOVE THE E OR P TO THE WORKAREA
RCNTL2R0 XR    R15,R15             CLEAR THE RETURN CODE NOW
         J     RTN0300              RETURN WE ARE DONE
UNKNWCNT LA    R1,BADPRMM
         J     RTN0304
RTN0300  XR    R15,R15
         J     RTN03
RTN0304  $STORE (R1)               save return message
         LHI   R15,4
*        J     RTN03
RTN03    $RETURN RC=(R15)          RETURN - JUST DO IT!
BADPRMM  DC    Y(L'BADPRMD)
BADPRMD  $MSG  999,'STSCX54B-E UNEXPECTED PARM FOUND PROCESSING /*CNTL X
               STATEMENT.'
         LTORG
         DROP  R6,R7,R8,R10,R12

** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTTIME                                       -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    PICKS THE TIME VALUE UP FROM THE FOLLOWING -         -- * **
** * --        /*HOLDTIL  HH:MM:SS                              -- * **
** * --                                                         -- * **
** * --    WE VALIDATE THE TIME AS                              -- * **
** * --        required -  HH = 00 - 23 (single digit is ok)    -- * **
** * --        required -  MM = 00 - 59 (single digit is ok)    -- * **
** * --        optional -  ss = 00 - 59 (single digit is ok)    -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  PARSED DATA IS INVALID                      -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING JCT,R8
         USING JRW,R10
         USING RTTIME,R12           SET LOCAL BASE
         USING STJCTX,R7            ADDRESS OUR JCTX
*
RTTIME   $SAVE  ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
         $CALL LOCJCTX             GO GET THE JCT EXTENSION
         LTR   R15,R15             DID WE GET IT OR NOT
         JZ    GOTJX04
         LR    R1,R7               ELSE GET THE ERROR MESSAGE
         J     RTN0404             AND RETURN WITH ERRORS.
GOTJX04  EQU   *
         ICM   R6,B'1111',JCTXWRK+72  RESTORE POINTER TO WORK AREA
         $CALL VALTIME             VALIDATE A TIME PARAMETER
         LTR   R15,R15
         JZ    TIMEISOK            IF ZERO, TIME IS OK - ELSE
         LR    R1,R15              SAVE ERRROR MESSAGE ADDRESS
         J     RTN0404
TIMEISOK EQU   *                   VALIDATE RANGES NOW.
         CLC   X454TIME(2),=C'23'  HOURS CAN NOT BE GREATER THAN 23
         JH    ERHRS9              TELL THEM HOURS ARE TOO BIG.
         CLC   X454TIME+2(2),=C'59'
         JH    ERMNS9              TELL THEM MINUTES ARE TOO BIG.
         CLC   X454TIME+4(2),=C'59'
         JH    ERSEC9              TELL THEM SECONDS ARE TOO BIG.
* WE SHOULD NOW HAVE 8 DIGITS AT JXWREL5 - THEY SHOULD BE IN THE
* FORM OF HHMMSS00 - EVEN IF SECONDS OR MINUTES AND SECONDS WERE NOT
* PRESENTED TO US - ALSO WE SHOULD HAVE PROPERLY PADDED SINGLE DIGITS
* WITH A LEADING ZERO , SO 1:5 IS VALID AND BECOMES 01050000
         MVI   X454TIME+6,X'F0'    ADD A TRAILING ZERO
         PACK  X454TIMP(4),X454TIME(7) PACK INTO FIRST FOUR BYTES
         MVI   X454TIMP+3,X'0F'
*
*                        X454TIMP = RESULT = X'HHMMSS0F'
*
         MVC   UJCHLDU,X454TIMP    MOVE THE PACKED VALUE TO JCTX
         OI    UJCWATF,UJCWATT     SET THE FLAG NOW
         MVI   X454TYPE,12         FINAL MESSAGE FORMATTING ROUTINE#
         LA    R1,HOLDTM           GET MSG ADDR
         ST    R1,X454MSGM         AND SAVE IN THE JCTXWRK AREA
         LA    R2,X454TIMD
* NOW FLAG IS SET, PACKED VALUE IS MOVED, GET CURRENT TIME NEXT -
         TIME  DEC,(R2),ZONE=LT,DATETYPE=YYYYDDD,LINKAGE=SYSTEM,       X
               MF=(E,TIMEDS)
*
* time puts time into x454timd(8) = x'hhmmssthmiju0000'
* time puts date into x454timd+8(4) = x'0yyyyddd'
*
*
         MVI   X454TIMD+3,X'0F'
*               current     requested
         CP    X454TIMD(4),X454TIMP(4) IS IT PAST CURRENT TIME?
         JH    CHKLEAP             GO ADJUST DATE BEFORE CONVERSION
* IF HOLDTILL IS IN FUTURE - THEN
*   USE CONVTOD TO GET TIME WHEN REQUEST WILL BE SATISFIED IN STCK FMT.
DOTME1   MVC   X454TIMD(3),X454TIMP MOVE THE REQUESTED TIME TO REL1
         MVC   X454TIMD+3(5),=XL5'00' ALL TRAILING ZEROS
* DATE IS STILL IN X454TIMD+8(4) FROM THE TIME CALL WE DID JUST ABOVE
         XC    X454TIMD+12(4),X454TIMD+12 CLEAR DATE FIELD +4
         LA    R1,CONVDS
         CONVTOD CONVVAL=X454TIMD,    TIME/DATE TO CONVERT, IN REL1/2  X
               TODVAL=X454TIMS,    RESULT FIELD GOES INTO WORK AREA    X
               TIMETYPE=DEC,       INPUT TIME IN PACKED DECIMAL FMT    X
               DATETYPE=YYYYDDD,MF=(E,(R1))   DATE FORMAT IS YYYY DDD
* ALMOST DONE - JUST ADJUST FOR GMT/UTC TIME INSTEAD OF LOCAL *
*  UNFORTUNATELY USERS WANT TO USE LOCAL INSTEAD OF GMT.. DUNNO WHY?
*~~~~~~~ ~~~~~ ~~~~~~~~~~~~~~~~~
*------------------------------------------------------------*
*                                                            *
*        Convert local time to GMT time                      *
*                                                            *
*          GMT time = Local time - local offset + leap secs  *
*                                                            *
*------------------------------------------------------------*
         SPACE 1
         L     R1,CVTPTR(,0)       Get CVT addressability
         L     R1,CVTEXT2-CVT(,R1) Get address of extension
         LG    R0,X454TIMS         Get local time from convtod
         SLG   R0,CVTLDTO-CVTXTNT2(,R1) SUBTRACT TIME ZONE DIFFERENCE
         ALG   R0,CVTLSO-CVTXTNT2(,R1)  ADD THE LEAP SECONDS BACK IN
         AG    R0,=FD'4096000000'  ADD ONE SECOND - FOR ROUNDING ISSUES
         STG   R0,X454TIMS         SAVE IN A WORK AREA FOR A SEC.
         MVC   UJCHLDUX,X454TIMS   MOVE HIGH ORDER WORD TO HOLD UNITLX
*                                    to time returned from stck
         B     RTN0400
*   USE CONVTOD TO GET TIME WHEN REQUEST WILL BE SATISFIED IN STCK FMT.
CHKLEAP  EQU   *
         MVC   X454TIMD+12(2),X454TIMD+10 MOVE  YDDD ONLY
         MVI   X454TIMD+14,X'0F'       MAKE A VALID SIGN FOR AP / CP
         NI    X454TIMD+12,X'0F'       CLEAR THE DANLING YEAR DIGIT
         AP    X454TIMD+12(3),=PL2'10' ADD 1 DAY
* X454TIMD+12(3) = NEW DAY DDD0F
         XC    X454TIMS,X454TIMS       CLEAR WORK AREA - FOR YEAR WORK
         MVC   X454TIMS+1(3),X454TIMD+8   MOVE 0Y YY YD  -
         OI    X454TIMS+3,X'0F'        MAKE A SIGN FOR IT
         DP    X454TIMS(4),=PL1'4'     IS IT A LEAP YEAR ?
         CP    X454TIMS+3(1),=PL1'0'   IF ZERO THEN LEAP IT IS.
         JNE   TOMROW                  NOT A LEAP IF NOT ZERO
DOLEAPT  EQU   *
         CP    X454TIMD+12(3),=PL3'3670' WILL IT BE PAST LEAP END?
         JL    ADD1DAY                 IF NOT - JUST ADD A DAY
         J     ADDYEAR                 ELSE SET DAY=1 AND ADD 1 YEAR
TOMROW   CP    X454TIMD+12(3),=PL3'3660' PAST END OF NORMAL YEAR?
         JL    ADD1DAY                  IF NOT JUST ADD ONE DAY
ADDYEAR  EQU   *                          - ELSE ADD A YEAR
         XC    X454TIMS,X454TIMS       CLEAR WORK AREA FOR YEAR
         MVC   X454TIMS+1(3),X454TIMD+8  MOVE 0Y YY YD  FROM NOW FIELD
         OI    X454TIMS+3,X'0F'          FORCE SIGN  0Y YY YF
         AP    X454TIMS(4),=PL1'1'     ADD 1 TO YEAR - IT WAS OUR GOAL
* X454TIMD+8 = X'0YYYY001'   THIS IS WHAT WE NEED IN X454TIMD+8
         MVC   X454TIMD+8(3),X454TIMS+1  MOVE 0Y YY YD
         NI    X454TIMD+10,X'F0'         KEEP LOW ORDER YEAR, 0 DAY.
         MVI   X454TIMD+11,X'01'       FINISH WITH DAY 1 = 0Y YY Y0 01
         XC    X454TIMD+12(4),X454TIMD+12  CLEAR WORK AREA NOW
         B     DOTME1                      TRY WITH ADJUSTED DATE/TIME
         B     DOTME1              DATE IS FIXED - MOVE RQSTED TIME
ADD1DAY  EQU   *  NEW PACKED DAY VALUE IS IN X454TIMS(3) = X'0DDD0F'
         NC    X454TIMD+10(2),=X'F000' ZERO DAYS FIELD IN X54TIMD
         OC    X454TIMD+10(2),X454TIMD+12     OR 'NEW' DAYS VALUE- DONE
         J     DOTME1
         B     DOTME1
* VARIOUS RETURN ROUTINES
RTN0400  XR    R15,R15
         MVI   X454TIMD,X'40'
         MVC   X454TIMD+1(L'X454TIMD-1),X454TIMD  CLEAR THE FIELD OUT
         MVC   X454TIMD(2),X454TIME   MOVE THE HOURS
         MVI   X454TIMD+2,C':'          MAKE IT PRETTY
         MVC   X454TIMD+3(2),X454TIME+2  MOVE THE MINUTES
         MVI   X454TIMD+5,C':'             MAKE IT VERY PRETTY
         MVC   X454TIMD+6(2),X454TIME+4
         J     RTN04
RTN0404  $STORE (R1)               save return message
         LHI   R15,4
*        J     RTN04
RTN04    $RETURN RC=(R15)          RETURN - JUST DO IT!
ERHRS9   LA    R1,ERHRS9M
         J     RTN0404
ERMNS9   LA    R1,ERMNS9M
         J     RTN0404
ERSEC9   LA    R1,ERSEC9M
         J     RTN0404
ERHRS9M  DC    Y(L'ETH9D)
ETH9D    $MSG  999,'STSCX54B-E HOURS IN TIME SEGMENT MUST BE BETWEEN 00X
                AND 23. '
ERMNS9M  DC    Y(L'ETM9D)
ETM9D    $MSG  999,'STSCX54B-E MINUTES IN TIME PARM MUST BE BETWEEN 00 X
               AND 59. '
ERSEC9M  DC    Y(L'ETS9D)
ETS9D    $MSG  999,'STSCX54B-E SECONDS IN TIME PARM MUST BE BETWEEN 00 X
               AND 59. '
         $MID   943
HOLDTM   DC    AL2(L'HOLDTMDD)     LENGTH OF THE MESSAGE
HOLDTMDD DC    C'&MID.JOBNAMEX * -- HOLD UNTIL = HH:MM:SS        --'
         LTORG
         DROP  R6,R7,R8,R10,R12

** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTTIMEX                                      -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    PICKS THE TIME VALUE UP FROM THE FOLLOWING -         -- * **
** * --        /*HOLDFOR  HH:MM:SS                              -- * **
** * --                                                         -- * **
** * --    WE VALIDATE THE TIME AS                              -- * **
** * --        required -  HH = 00 - 99 (SINGLE DIGIT IS OK)    -- * **
** * --        required -  MM = 00 - 59 (single digit is ok)    -- * **
** * --        optional -  ss = 00 - 59 (single digit is ok)    -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  PARSED DATA IS INVALID                      -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING JCT,R8
         USING JRW,R10
         USING RTTIMEX,R12          SET LOCAL BASE
         USING STJCTX,R7            ADDRESS OUR JCTX
*
RTTIMEX  $SAVE  ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
         $CALL LOCJCTX
*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP
         LTR   R15,R15
         JZ    GOTJX05              IF NOT ZERO - MSG ALREADY SETUP.
         LR    R1,R7               ELSE R7 HAS AN ERROR MSG SET UP
         J     RTN0104
* NOW UPDATE THE CORRECT JCTX FIELD
* FIRST PREP A MESSAGE AREA WITH MESSAGE MODEL - TO BE ALTERED LATER

GOTJX05  EQU   *
         ICM   R6,B'1111',JCTXWRK+72  RESTORE POINTER TO WORK AREA
         $CALL VALTIME             VALIDATE A TIME PARAMETER
         LTR   R15,R15
         JZ    TIMEOKX             IF ZERO, TIME IS OK - ELSE
         LR    R1,R15              SAVE ERRROR MESSAGE ADDRESS
         J     RTN0504
TIMEOKX  EQU   *                   VALIDATE RANGES NOW.
* THERE IS NO LIMIT ON THE SIZE OF HOURS - UP 99 IS OK.
         MVC   X454TIMD(8),X454TIME   MOVE CHARS TO REL1 4 LATER
         CLC   X454TIMD+2(2),=C'59'
         JH    ERMNX9              TELL THEM MINUTES ARE TOO BIG.
         CLC   X454TIMD+4(2),=C'59'
         JH    ERSEX9              TELL THEM SECONDS ARE TOO BIG.
* WE SHOULD NOW HAVE 8 DIGITS AT JXWREL1 - THEY SHOULD BE IN THE
* FORM OF HHMMSS00 - EVEN IF SECONDS OR MINUTES AND SECONDS WERE NOT
* PRESENTED TO US - ALSO WE SHOULD HAVE PROPERLY PADDED SINGLE DIGITS
* WITH A LEADING ZERO , SO 1:5 IS VALID AND BECOMES 01050000
**** WE  NEED TO ADD IT TO THE JCTX           **
         OI    UJCWATF,UJCWATFR     FLAG AS A WAITFOR TIME GIVEN
         MVI   X454TYPE,12         FINAL MESSAGE FORMATTING ROUTINE#
         PACK  X454TIMP(4),X454TIMD(7) PACK INTO FIRST FOUR BYTES
         MVI   X454TIMP+3,X'0F'      FORCE SIGN AND LOW ORDER 0.
*                                    JXWREL3 NOW = X'HHMMSS0F'
         MVC   UJCHLDF(4),X454TIMP SAVE FOR EASY TO READ CONVERSION
* REL2 CAN NOW BE REUSED
*  FINALLY BUILD THE TIME STAMP WHEN THE HOLD FOR WILL BE SATISFIED.
         XGR   R5,R5               CLEAR WORK REG NOW
         LG    R3,=FD'14745600000000' =1 HR IN STCK FORMAT
         PACK  X454WKDD(16),X454TIMD(2) PACK UP THE HOURS
         CVBG  R1,X454WKDD         CONVERT HOURS TO BIN
         MSGR  R1,R3               ANSWER IS IN R3
         LGR   R5,R1               MOVE TO CUMULATIVE RESULT
         LG    R3,=FD'245760000000' =1 MINUTE IN STCK FORMAT
         PACK  X454WKDD(16),X454TIMD+2(2) PACK UP THE MINUTES FIELD
         CVBG  R1,X454WKDD
         MSGR  R1,R3               MINUTES*6000 = 1/100TH SECONDS.
         AGR   R5,R1               ACCUMULATE ANSWER IN R5
         LG    R3,=FD'4096000000'   =1 SECOND IN STCK FORMAT
         PACK  X454WKDD(16),X454TIMD+4(2) PACK UP THE SECONDS
         CVBG  R1,X454WKDD
         MSGR  R1,R3               R3=100 * SECONDS=R1 = ANSW (R3)
         AGR   R5,R1               R5 HAS THE TOTAL NUM OF 100/TH SECS
*                                  THIS SHIFT IS NEEDED FOR STCK FORMAT
* NOW GET THE CURRENT STCK VALUE AND ADD R5 TO IT FOR THE TIME STAMP
* VALUE WHEN THE HOLDFOR REQUEST WILL BE SATISFIED.
         TIME  STCK,X454TIMD,LINKAGE=SYSTEM,MF=(E,TIMEDS)
* TIME WITH NO PARMS GIVES US THE  TOD CLOCK IN REGS 0 AND 1.
         LG    R1,X454TIMD         PICK UP CURRENT TIME IN STCK FORMAT
         AGR   R5,R1               ADD CALCULATED SECONDS VALUE
*        STG   R5,UJCHLDFX         SAVE FINAL RESULT IN JCTX
         STMH  R5,R5,UJCHLDFX      SAVE FINAL RESULT IN JCTX
         MVI   X454CTYP,12
         LA    R15,HOLDFM          GET MESSAGE MODEL PLUS LENGTH
         ST    R15,X454MSGM        save for the return trip
RTN0500  XR    R15,R15
         MVI   X454TIMD,X'40'
         MVC   X454TIMD+1(L'X454TIMD-1),X454TIMD  CLEAR THE FIELD OUT
         MVC   X454TIMD(2),X454TIME   MOVE THE HOURS
         MVI   X454TIMD+2,C':'          MAKE IT PRETTY
         MVC   X454TIMD+3(2),X454TIME+2  MOVE THE MINUTES
         MVI   X454TIMD+5,C':'             MAKE IT VERY PRETTY
         MVC   X454TIMD+6(2),X454TIME+4
         J     RTN05
RTN0504  $STORE (R1)               save return message
         LHI   R15,4
RTN05    $RETURN RC=(R15)          RETURN - JUST DO IT!

ERMNX9   LA    R1,ERMNS8M
         J     RTN0504
ERSEX9   LA    R1,ERSEC8M
         J     RTN0504

ERMNS8M  DC    Y(L'ETM8D)
ETM8D    $MSG  999,'STSCX54B-E MINUTES IN TIME PARM MUST BE BETWEEN 00 X
               AND 59. '
ERSEC8M  DC    Y(L'ETS8D)
ETS8D    $MSG  999,'STSCX54B-E SECONDS IN TIME PARM MUST BE BETWEEN 00 X
               AND 59. '
         $MID   943
HOLDFM   DC    AL2(L'HOLDFMDD)     LENGTH OF THE MESSAGE
HOLDFMDD DC    C'&MID.JOBNAMEX * --   HOLD FOR = HH:MM:SS        --'
         LTORG
         DROP  R6,R7,R8,R10,R12
*
** * ------------------------------------------------------------- * **
** * --  ROUTINE:  RTNOAUT                                      -- * **
** * --                                                         -- * **
** * --  FUNCTION:                                              -- * **
** * --    RECOGNIZES THE NOAUTO KEYWORD CARD AND IF THE        -- * **
** * --    ROUTINE IS CALLED, WE SET THE FLAG IN THE JCTX.      -- * **
** * --                                                         -- * **
** * -- LINKAGE:  VIA $CALL FORM RCARDSCN                       -- * **
** * --                                                         -- * **
** * -- REGISTER USAGE (ENTRY / EXIT) :                         -- * **
** * --                                                         -- * **
** * --  REG         VALUE ON ENTRY   ........ VALUE ON EXIT    -- * **
** * --                                                         -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --   R1        JCT BASE ADDRESS           ERROR MESSAGE OR -- * **
** * --                                        ZERO             -- * **
** * --   R2-R9     N/A                        UNCHANGED        -- * **
** * --   R10       JRW ADDRESS                UNCHANGED        -- * **
** * --   R11       HCCT ADDRESS               UNCHANGED        -- * **
** * --   R12       N/A                        UNCHANGED        -- * **
** * --   R13       SAVE AREA ADDRESS          UNCHANGED        -- * **
** * --   R14       RETURN ADDRESS             UNCHANGED        -- * **
** * --   R15       ENTRY ADDRESS              RETURN CODE      -- * **
** * --                                                         -- * **
** * --  RETURN CODES (R15 ON EXIT):                            -- * **
** * --                                                         -- * **
** * --       0  -  PROCESSING SUCCESSFUL                       -- * **
** * --       4  -  GROUP NOT VALID                             -- * **
** * --   R0        N/A                        UNCHANGED        -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING STJCTX,R7            ADDRESS OUR JCTX
         USING JCT,R8
         USING JRW,R10
         USING RTNOAUT,R12          SET LOCAL BASE
*
* - IF WE GET HERE THEN WE NEED TO INDICATE - NO AUTOROUTING.
*
RTNOAUT $SAVE   ,                   SAVE CALLERS REGS
         LR    R12,R15              SET OUR LOCAL BASE
         LR    R8,R1                GET JCT ADDRESSABILITY
** FIRST LOCATE OR CREATE THE JCTX
         $CALL LOCJCTX
*  LOCJCTX PUTS THE JCTX ADDR IN R7 FOR US - SO USING IS ALREADY SETUP
         LTR   R15,R15
         JZ    GOTJX06              IF ZERO - WE HAVE THE JCTX IN R7
         LR    R1,R7               IF IN ERROR,  R7 = AN ERR MSG
         J     RTN0704
GOTJX06  EQU   *
         ICM   R6,B'1111',JCTXWRK+72 FLAG THIS JOB - NO AUTO ROUTING
         OI    UJCMSCF1,UJCMSNOT    FLAG THIS JOB - NO AUTO ROUTING
         LA    R15,NOAUTRTM
         ST    R15,X454MSGM        save for the return trip
         MVI   X454CTYP,16
         J     RTN0700              RETURN AND TELL THEM ABOUT IT.
*** RETURN ROUTINES ***
RTN0704  LHI   R15,4               MAX RC FROM PROCESSIN RTNS..
         $STORE (R1)               save return message
         J     RTN07
RTN0700  XR    R15,R15             ZERO = USUAL RTN PROCEEING RTNS.
RTN07    $RETURN RC=(R15)          RETURN - JUST DO IT!
         LTORG
         $MID   943
NOAUTRTM DC    AL2(L'NOAUTRTD)     LENGTH OF THE MESSAGE
NOAUTRTD DC    C'&MID.JOBNAMEX * -- AUTOROUTE FEAUTURE DIABLED   --'
         DROP  R6,R7,R8,R10,R12
** * ------------------------------------------------------------- * **
** * -- LOCJCTX - ROUTINE ENTERED VIA BAL R6,LOCJCTX  ON RETURN -- * **
** * -- IF R15=ZERO, THEN R7=JCTX ADDR, IF R15 NOT= 0 R1 POINTS -- * **
** * -- TO MESSAGE TO BE ISSUED AND R15 = RETURN CODE FOR EXIT. -- * **
** * --                                                         -- * **
** * --   IF THE JCTX CANNOT BE LOCATED, BECAUSE IT DOES NOT    -- * **
** * -- YET EXIST, IT WILL BE CREATED HERE.                     -- * **
** * ------------------------------------------------------------- * **
         USING LOCJCTX,R12
         USING JCT,R8
         USING STJCTX,R7            ADDRESS OUR JCTX
LOCJCTX  $SAVE
         LR    R12,R15             SET OUR LOCAL BASE
         LR    R8,R1               LOAD THE PASSED JCT ADDRESS
         $JCTXGET JCT=(R8),         GET (LOCATE) OUR JCT EXTENSION     X
               TYPE='USER',MOD=1,                                      X
               NOTFOUND=MAKEJCTX,   IF NOT CREATED YET - GO MAKE ONE   X
               FOUND=GOTJCTX1,      GOOD RETURN LABEL                  X
               ERRET=BADJCTX        SPECIFY ERROR RETURN LABEL
* we never fall thru - we must branch to support rtns from $jct calls
GOTJCTX1 XR    R15,R15              CLEAR RETURN CODE
         LR    R7,R1                SET JCTX ADDRESS
         $STORE (R7)               SET JCTX ADDR FOR THE CALLER
         $RETURN RC=(R15)            AND RETURN WITH A GOOD RC.

* INIT THE RECORD WHEN WE GET IT THE FIRST TIME ONLY.
GOTJCTX2 XR    R15,R15
         LR    R7,R1
** * ------------------------------------------------------------- * **
** * -- INITIALIZE THE JCT EXTENSION NOW.                       -- * **
** * ------------------------------------------------------------- * **
INITUJC  EQU   *
* first zero the entire user portion of the returned record
         XC    JCXBASLN(UJCXSLN1-JCXBASLN,R7),JCXBASLN(R7)
         MVC   UJCXVRM,=X'00010700'  SET THE VRM VALUE NOW 1.7.0
         MVC   UJCXID,=CL4'JCX'     MOVE THE EYECATCHER
         OI    UJCXUFLG,UJCXXEYE+UJCXXVRM  SET VRM AND EYE ARE INIT'ED
         MVI   UJCXWITH,C' '       BLANK THE BEFORE, AFTER, WITH
         MVC   UJCXWITH+1(L'UJCXWITH),UJCXWITH   FIELDS NOW
         MVC   UJCXAFTN,UJCXWITH
         MVC   UJCXBFOR,UJCXWITH
         MVC   UJCXDNAM,UJCXWITH
         MVC   UJWIOUT,UJCXWITH    BLANK THE WITHOUT FIELD
*        MVI   UJMEMOK,C' '        BLANK THE
*        MVC   UJMEMOK+1(15),UJMEMOK    MEMBER OK AND
*        MVI   UJMEMNOK,C' '                 NOT OK FIELDS
*        MVC   UJMEMNOK+1(15),UJMEMNOK           AS WELL.
RETSAV7  $STORE (R7)                SET THE JCTX ADDR FOR THE CALLER
         $RETURN RC=(R15)            ALSO USED FOR WTO MSGS, JCLERR
*
MAKEJCTX EQU   *
         $JCTXADD  JCT=(R8),                                           X
               TYPE='USER',MOD=1,LENGTH=UJCXSLN1,                      X
               FOUND=LOGERRMR,       THIS SHOULD NEVER HAPPEN!         X
               OKRET=GOTJCTX2,NOSPACE=JCTXSERR,ERRET=BADJCTX
*
BADJCTX  EQU   *                    GENERAL ERROR TRYING TO FIND JCTX
         LA    R7,BADJCTXM          POINT TO ERROR MESSAGE
         LA    R15,4(R0,R0)         SET AN RC=04
BADRTXX  $STORE (R7)                SET THE JCTX ADDR FOR THE CALLER
         $RETURN RC=(R15)            ALSO USED FOR WTO MSGS, JCLERR
*
JCTXSERR EQU   *                    SPACE ERROR WHEN GETTING JCTX
         LA    R7,SPCERRM           ADDRESS OF ERROR MESSAGE
         LHI   R15,4                SET RETURN CODE NON ZERO
         B     BADRTXX              RETURN TO CALLER
*
LOGERRMR EQU   *                    LOGICAL ERROR ENCOUNTERD -JCTX
         LA    R7,LOGERRM           ADDRESS OF ERROR MESSAGE
         LHI   R15,4                SET RETURN CODE NON ZERO
         B     BADRTXX              RETURN TO CALLER
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
BADJCTXM DC    Y(L'BDJCTXMM)
BDJCTXMM $MSG  999,'STSCX54B-E UNABLE TO LOCATE JCTX.'

LOGERRM  DC    Y(L'MLOGERRM)
MLOGERRM $MSG  999,'STSCX54B-E LOGIC ERROR CREATING JCTX.'

SPCERRM  DC    Y(L'MSPCERR)
MSPCERR  $MSG  999,'STSCX54B-E NO SPACE LEFT FOR NEW JCTX.'
         DS    0F
** * ------------------------------------------------------------- * **
** * -- VALTIME - ROUTINE TO VALIDATE A TIME PARAMETER - ALLOW  -- * **
** * --  HH:MM:SS - EACH SEGEMENT CAN BE 1 OR 2 DIGITS, TRAILING-- * **
** * -- SEGMENTS CAN BE OMITTED - NO INTERNAL CHECK FOR VALID RNG. * **
** * ------------------------------------------------------------- * **
         USING X0454DS,R6
         USING JRW,R10
         USING VALTIME,R12          SET LOCAL BASE
VALTIME  $SAVE
         LR    R12,R15             SET OUR BASE
         LR    R8,R1               GET PASSED JCT ADDRESS
         LH    R5,JRWRSCNL          GET LENGTH OF OPERAND
** * ------------------------------------------------------------- * **
** * -- FIRST WE MUST VALIDATE THE INPUT DATA - DO WE HAVE A    -- * **
** * -- VALID TIME OR NOT .                                     -- * **
** * ------------------------------------------------------------- * **
         CHI   R5,8                MAX SIZE OF A TIME OPERAND
         JH    TIMEBIGE            TIME TOO BIG ERROR HAS OCCURED
         CHI   R5,4                MIN SIZE OF A TIME OPERAND
         JL    TIMELOWE            TIME TOO SMALL ERROR HAS OCCURED
         BCTR  R5,R0               REDUCE LENGTH FOR AN EXECUTE
         XR    R1,R1               CLEAR RESULT REG FOR TABLE BYTE
         XR    R2,R2               CLEAR POINT TO ADDR OF HIT
         XR    R3,R3               CLEAR LENGTH SCANNED REG...
         LA    R4,JRWRSCNV         INITIALIZE POINTER TO TIME FIELD
         LA    R7,3                MAX VALUES TO PARSE FROM RESULT
         LA    R9,X454TIME         GET ADDR OF TEMP HOLD AREA (RSLT)
         MVC   X454TIME(8),=8C'0'  PREFILL RESULT WITH ALL ZEROS
         J     SCNTIM01            JUMP OVER ADJUSTMETS FOR SCANS 2-3

RESCNTIM EQU   *
         SR    R5,R3               ORIGINAL LENGTH - LAST SEGMENT LEN
         LA    R4,0(R4,R3)         OLD ADDR + SEG LEN + 1 = NEW ADDR

SCNTIM01 EX    R5,TRTTIME          TRT 0(XX,R4),TRTTIME
         BC    8,NOCOLONS          NOHITS FOUND - ERROR? MAYBE?
         BC    4,COLONFND          WE FOUND A NON-ZERO BYTE
         BC    2,ERTIMX1           ALWAYS AN ERROR BAD LAST BYTE

COLONFND EQU   *                   WE GOT A HIT IN THE MIDDLE OF DATA
         CLM   R2,B'0001',=X'01'   COMPARE TO SEE IF WE HIT A COLON !
         BH    ERRORTIM            ALWAYS AN INVALID TIME IF > 1
*
         LR    R3,R1               R3 & R1 = ADDR WHERE SCAN STOPPED
         SR    R3,R4               R3 = LENGTH OF SEGMENT JUST SCANNED
*STATUS; R1= WHERE SCAN STOPPED, R3=LENGTH OF SEGMENT, R4=TOP OF SEG.
* NOW EVALUATE THE DATA WE CAPTURED.
         BCTR  R3,R0               REDUCE LENGTH FOR AN EXECUTE
         LTR   R3,R3
         BZ    MOVESNGL
         CHI   R3,1                CHECK IF MORE THAN 2 DIGITS
         BH    ERTIMX4
*        EX    R3,MOVESEG          MOVE ONE OR TWO BYTES ONLY!
MOVESEG  MVC   0(2,R9),0(R4)       MOVE RESULT TO FINAL ANSWER AREA
         LA    R9,2(R9)            BUMP R9 FOR NEXT SEGMENT
         J     OVRSNGL
MOVESNGL EQU   *                   MOVE A SINGLE CHARACTER
         MVC   1(1,R9),0(R4)       MOVE JUST ONE CHARACTER INTO CC#2
         LA    R9,2(R0,R9)         BUMP R9 - TMP RESULTS AREA
OVRSNGL  EQU   *
         LA    R3,2(R0,R3)         RESTORE R3 (LENGTH) VALUE +1(colon)
         BCT   R7,RESCNTIM         TRT SCAN UP TO THREE TIMES.
         B     ERTIMX3             WE SHOULD NEVER FALL THRU
NOCOLONS EQU   *                   ONLY VALID IF ON THE THIRD PASS
* THIS *MUST* BE THE LAST SEGMENT - ELSE WE HAVE AN ERROR
* R5 = LENGTH OF EXECUTED TRT = LENGTH OF PARM LESS 1....S/B 0 OR 1
         CHI   R5,1
         BH    ERTIMX4             TOO MANY DIGITS IF > 1
* NO CHECKS LEFT, JUST MOVE THE ONE OR TWO DIGIT TIME SEGMENT
         BE    MVESEG              GO MOVE TWO DIGITS
*        B     MVESNGL             GO MOVE ONE DIGIT
*
MVESNGL  MVC   1(1,R9),0(R4)       MOVE THE SINGLE DIGIT
         J     FINALTIM
MVESEG   MVC   0(2,R9),0(R4)       MOVE RESULT TO FINAL ANSWER AREA
FINALTIM EQU   *
         XR    R15,R15
         $RETURN RC=(R15)
ERRORTIM LA    R15,ERTIX0M
         J     FTIMER
ERTIMX1  LA    R15,ERTIX1M
         J     FTIMER
ERTIMX2  LA    R15,ERTIX2M
         J     FTIMER
ERTIMX3  LA    R15,ERTIX3M
         J     FTIMER
ERTIMX4  LA    R15,ERTIX4M
         J     FTIMER
TIMEBIGE LA    R15,ERTIMBIG
         J     FTIMER
TIMELOWE LA    R15,ERTIMSHR
FTIMER   EQU   *
         $RETURN RC=(R15)          IF R15 ^=0 THEN R15=A(ERROR MSG)
TRTTIME  TRT   0(0,R4),TIMETAB
TIMETAB  DC    256X'FF'            NOTHING IS VALID -
         ORG   TIMETAB+C':'          EXCPET A COLON
         DC    X'01'                   WHICH IS A SPECIAL CASE
         ORG   TIMETAB+C'0'          AND EXCEPT FOR DIGITS
         DC    10X'00'                   ANY OF WHICH ARE ALLOWED
         ORG   TIMETAB+256         RESET COUNTER BACK WHERE IT WAS
ERTIX0M  DC    Y(L'ETMX0)
ETMX0    $MSG  999,'STSCX54B-E INVALID CHARACTER FOUND WHILE PARSING TIX
               ME PARM. '
ERTIX1M  DC    Y(L'ETMX1)
ETMX1    $MSG  999,'STSCX54B-E LAST POSITION OF TIME PARM IS NOT A DIGIX
               T .'
ERTIX2M  DC    Y(L'ETMX2)
ETMX2    $MSG  999,'STSCX54B-E TOO MANY DIGITS IN THE HH OR MM OR SS PAX
               RT OF TIME. '
*TMX2    $MSG  999,'STSCX54B-E TOO MANY DIGITS FOR THE HOURS, OR MINUTE
*              S OR SECONDS IN TIME PARM .'
ERTIX3M  DC    Y(L'ETMX3)
ETMX3    $MSG  999,'STSCX54B-E TIME PARM HAS TO MANY COMPONENTS - TRY HX
               H:MM:SS .'
ERTIX4M  DC    Y(L'ETMX4)
ETMX4    $MSG  999,'STSCX54B-E TIME PARM HAS TOO MANY DIGITS - TRY HH:MX
               M:SS .'
ERTIMBIG DC    Y(L'ETBIG)
ETBIG    $MSG  999,'STSCX54B-E TIME PARM IS TOO LONG IT SHOULD BE HH:MMX
               :SS .'
ERTIMSHR DC    Y(L'ETSHR)
ETSHR    $MSG  999,'STSCX54B-E TIME PARM IS TOO SHORT IT SHOULD BE HH:MX
               M:SS .'
        $MODEND ,
         LTORG
APARNUM  DC    CL8'NONE'            APAR NUMBER - WHAT A LAUGH
PTFNUM   DC    CL8'NONE'            PTF NUMBER... WHAT A LAUGH
X0454DS  DSECT
X454LEN  DS    F                   LENGTH OF AREA
X454EYE  DS    XL4                 C'SSMZ'
C454CDSV DS    CL80                          TMP SAVE AREA FOR JCTXWRK
X454RELT DS    CL8                 (BEFORE/AFTER/WITH/WITHOUT) TYPE
X454NAME DS    CL8                 NAME ASSOCIATED WITH RELATIVE OPER.
X454TIME DS    CL8                 TIME - CHARACTER FORMAT HH:MM:SS
X454MSGM DS    AL4                 ADCON TO MESSAGE MODEL
* the next two fields must stay together for SMF formatting reansons.
X454TIMP DS    XL4                 PACKED TIME VALUE
X454TIMS DS    XL4                 STCK FORMAT TIME / DATE
X454TIMD DS    2D
TIMEDS   TIME  LINKAGE=SYSTEM,MF=L
CONVDS   CONVTOD MF=L
X454CTYP DS    CL1                 CNTL TYPE - E / S / P
X454SMFX DS    XL(SMFD8LEN)        AREA TO BUILD AN SMF RECORD IN
X454SMFW DS    4F                  WORK AREA FOR THE SMFEWTM MACRO
X454WKDD DS    2D                  WORK AREA FOR STCK FORMAT DATE
X454ECSA DS    F                   POINTER TO ECSA AREA
X454TYPE DS    XL1                 MESSAGE FORMATTING ROUTINE #
@0454LEN EQU   (((*-X0454DS)+7)/8)*8  LENGTH OF OUR DSECT DWORD ROUNDED
         END
++SRC(STSCX06A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
*********************************************************************
*                                                                   *
*                        HASP EXIT 6                                *
*                                                                     *
*     THIS EXIT GETS CONTROL AFTER EACH JCL STATEMENT HAS BEEN        *
*     CONVERTED INTO INTERNAL TEXT AND ONCE AFTER ALL OF A JOB'S      *
*     JCL HAS BEEN CONVERTED.  IT PERFORMS THE FOLLOWING FUNCTIONS:   *
*     > CHECKS IF A SCHEDULING ENVIRONMENT (SCHENV=) HAS BEEN         *
*       CODED ON THE JOBCARD.  IF SPECIFIED, THE SCHEDULING           *
*       ENVIRONMENT IS USED.  OTHERWISE IF A MELLON RESOURCE NAME     *
*       HAS BEEN SPECIFIED ON A "/*ROUTE XEQ RESNAME" CONTROL         *
*       STATEMENT, THEN THE RESOURCE NAME IS USED AS A SCHEDULING     *
*       ENVIRONMENT.                                                  *
*                                                                     *
*     ENTRY POINT: EXIT06                                             *
*                                                                     *
* INPUT   R0  = A CODE INDICATING THE STATUS OF CONVERSION PROCESSING *
*               0  INDICATES THAT A JCL STATEMENT HAS BEEN CONVERTED  *
*                  TO AN C/I TEXT IMAGE                               *
*               4  INDICATES THAT ALL OF THE JCL FOR A PARTICULAR     *
*                  JOB HAS BEEN CONVERTED TO C/I TEXT.                *
*                                                                     *
*         R1  = ADDRESS OF A 4-WORD PARAMETER LIST WITH THE           *
*               FOLLOWING STRUCTURE:                                  *
*               WORD 1 (+0) = ADDR OF 16-BYTE WORK AREA               *
*               WORD 2 (+4) = IF THE CODE PASSED IN R0 IS 0, THIS     *
*                             POINTS TO THE ADDRESS OF THE LAST       *
*                             SINGLE INTERNAL TEXT IMAGE CONVERTED    *
*                             FROM A JCL STATEMENT.  IF THE CODE      *
*                             PASSED IN R0 IS 4, THIS WORD CONTAINS   *
*                             THE ADDRESS OF THE CONVERTER'S RETURN   *
*                             CODE.                                   *
*               WORD 3 (+8) = ADDRESS OF THE DTE                      *
*               WORD 4 (+12) = ADDRESS OF THE JCT                     *
*               WORD 4 (+16) = N/A on entry; used to store the        *
*                              IEFCNMB if gotten in exit              *
*        R2-10  N/A                                                   *
*        R11    HCT ADDRESS                                           *
*        R12    N/A                                                   *
*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA              *
*        R14    RETURN ADDRESS                                        *
*        R15    ENTRY ADDRESS                                         *
*                                                                     *
*     OUTPUT REGISTERS:                                               *
*        R0-14  UNCHANGED                                             *
*        R15:   RETURN CODE                                           *
*               0 - QUEUE JOB FOR EXECUTION                           *
*               8 - CANCEL JOB AND QUEUE FOR OUTPUT                   *
*                                                                     *
*     REGISTER USAGE(INTERNAL):                                       *
*        R0-8   WORK REGISTERS                                        *
*        R9     WORKAREA ADDRESS                                      *
*        R10    JCT ADDRESS                                           *
*        R11    HCT ADDRESS                                           *
*        R12    BASE REGISTER                                         *
*        R13    ADDRESS OF AN 18 WORD OS-STYLE SAVE AREA              *
*        R14-15 WORK AND LINKAGE REGISTERS                            *
*                                                                     *
*                                                                     *
*     AUTHOR: STEPHEN MCCOLLEY                                        *
*             ATLANTA, GA                                             *
*                                                                     *
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *
*  USEFULLNESS OF THE MATERIAL.                                       *
*                                                                     *
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *
*  IN THE FUTURE.                                                     *
*                                                                     *
***********************************************************************

         COPY  $HASPGBL
STSCX06A $MODULE ENVIRON=SUBTASK,                                      X
               IBMJES2=SAMPLE,                                         X
               TITLE='USER EXIT6A MOD. ',                              X
               RMODE=ANY,                                              X
               CNMB,                                                   X
               CVT,                                                    X
               KEYS,                                                   X
               PSA,                                                    X
               SJKEY,                                                  X
               TEXT,                                                   X
               $CADDR,                                                 X
               $DTE,                                                   X
               $DTECNV,                                                X
               $HASPEQU,                                               X
               $HCT,                                                   X
               $HCCT,                                                  X
               $JCT,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PCE,                                                   X
               $TRE,                                                   X
               $TQE,                                                   X
               $XIT

EXIT06A  $ENTRY BASE=R12           EXIT ROUTINE ENTRY POINT

*********************************************************************
*                                                                   *
*        SAVE CALLER'S REGISTERS AND ESTABLISH ADDRESSABILITIES.    *
*                                                                   *
*********************************************************************

         USING HCT,R11
        $SAVE  NAME=EXIT06A        SAVE CALLER'S REGISTERS
* GET THE JOBCARD WHEN IT FIRST HITS THIS EXIT *
* WE MAY HAVE ALREADY CHANGED THE SCHENV IN THE JCT - IN EXIT 4A/54A
         LTR   R0,R0                DID THEY GIVE US A ZERO OR FOUR?
         JNZ   RC00                 ONLY A ZERO IS GOOD FOR OUR USE.

         LR    R12,R15             SET BASE REGISTER
         L     R10,12(,R1)         GET JCT ADDRESS

         USING JCT,R10
         CLC   JCTCNVRC,=A(JCTCOK)  JOB SUCCESSFULLY CONVERTED?
         JNE   RC00                NO - BRANCH, RETURN

         TM    JCTJOBFL,JCTBATCH   BATCH JOB?
         JZ    RC00                NO - BRANCH, RETURN

         L     R9,4(,R1)           GET TEXT IMAGE ADDRESS
         USING TEXT,R9

         TM    STRINDCS,JOBSTR     'JOB' STATEMENT?
         JNO   RC00                IF NOT, THEN RETURN NOW
*
*********************************************************************
*                                                                   *
*        CHECK IF A SCHEDULING ENVIRONMENT HAS BEEN CODED ON        *
*        THE JOBCARD.  IF SPECIFIED, ALLOW IT TO BE USED.           *
*                                                                   *
*********************************************************************
         $CALL XJDTKEY,             FIND SCHENV TEXT x                 x
               PARM0=SJKYJENV,      INTERNAL TEXT KEY                  x
               PARM1=STRJKEY,       BEGIN OF TEXT FOR JOB              x
               ERRET=RC00           IF NOT FOUND - JUST END
         C     R15,=F'4'            TEST FOR NOT FOUND RETURN CODE
         JE    RC00
CLRJCT   SLR   R2,R2                CLEAR TO GET SCHENV LENGTH
         ICM   R2,B'0001',5(R1)     PICK UP THE LENGTH
         BNP   RC00                 IF ZERO OR NOT VALID - SKIP IT
* AT THIS POINT WE FOUND A NON-ZERO LENGTH, SCHENV PARM ON THE JOBCARD
         MVI   JCTSCHEN,C' '
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR OUR OVERRIDE




*********************************************************************
*                                                                   *
*        RETURN TO CALLER.                                          *
*                                                                   *
*********************************************************************

RC00     XR     R15,R15            SET RETURN CODE = 0
         J      RETURN             BRANCH - CONTINUE

RETURN8  EQU    *
         L      R15,$F8            SET RETURN CODE = 8

RETURN  $RETURN RC=(R15)           RETURN TO CALLER

         DROP  R9,R10,R11          TEXT, JCT, HCT

         LTORG

        $MODEND


         END
++SRC(STSC2050) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSC2050 TITLE 'JES2 USER ENVIRONEMNT END OF INPUT EXIT'
***********************************************************************
* STSC2050 - COMMON ROUTINE CALLED BY EXIT20A AND EXIT50A
* THE ROUTINE JUST COPIES JCT EXTENSION DATA TO JQE EXTENSIONS (BERTS)
***********************************************************************
***********************************************************************
*                                                                     *
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *
*  USEFULLNESS OF THE MATERIAL.                                       *
*                                                                     *
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *
*  IN THE FUTURE.                                                     *
*                                                                     *
***********************************************************************
STSC2050 $MODULE TITLE='JES2 COMMON RTNS FOR EXIT 20 AND 50',          X
               RMODE=ANY,                                              X
               ENVIRON=(USER,ANY),                                     X
               $BERT,                                                  X
               $BERTTAB,                                               X
               $CATBERT,           (BERT)                              X
               $HASPEQU,                                               X
               $HCCT,              (BERT)                              X
               $JCT,                                                   X
               $JCTX,                                                  X
               $JQE,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PCE,                                                   X
               $TRE,               HASP TRE DSECT                      X
               $TQE,               HASP TQE DSECT                      X
               $USERCBS,                                               X
               $XPL
         USING XPL,R5              ADDRESSABILITY TO THE XPL
         USING JQA,R9              ADDRESSABILITY TO THE JQE
         USING JCT,R10             ADDRESSABILITY TO THE JCT
STSX2050 $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
         LR    R12,R15             SET UP OUR BASE REG.
         LR    R5,R0               SET $XPL BASE REG.
         L     R9,X050JQE          SET ADDR UPDATE MODE JQA IN R9
         L     R10,X050JCT         SET ADDRESS OF JCT IN R10
COPYEXT  $JCTXGET  JCT=(R10),      LOCATE OUR JCT EXTENSION            X
               TYPE='USER',MOD=1,                                      X
               ERRET=RET00         DONT CREATE A JQEX IF NO JCTX
*
         LR    R7,R1               GET ADDRESS OF OUR EXTENSION
         USING STJCTX,R7
*
**********************************************************************
*  GET OUR JQE FOR UPDATE AND LOCATE OUR BERT FOR THIS
*  JOB (ALL TYPES: BATCH, STC, TSU) AND INITIALIZE FOR LATER USE.
**********************************************************************
*  WE DID THIS IN THE PAST - WE HAVE AN UPDATE MODE JQA ALREADY
*        $QSUSE  ,                 MAKE SURE WE OWN THE QUEUES
*
*  LIKEWISE - WE ARE GIVEN AN UPDATE MODE JQA - SO JUST USE THAT!
*
*        $DOGJQE ACTION=(FETCH,UPDATE),      GET AN UPDATE MODE JQA
*              JQE=(R9)
*  OBVIOUSLY NO NEED TO LOAD INTO R9 FROM $DOGJQE - WE ALREADY HAD IT!
*        LR    R9,R0               GET THE ADDR OF OUR JQA
*
         $DOGBERT ACTION=GETOFFSET,    GET THE OFFSET                  X
               CBTYPE=JQE,                IN THE JQA                   X
               NAME=STQNAME,                 OF OUR BERT               X
               ERRET=BADBERT
*
*  DOGBERT RETURNED THE OFFSET IN R1 --- R1+R9(THE UPDATE JQA) = BERT
*
         LA    R8,0(R1,R9)         GET ADDRESS OF OUR BERT
         USING STQNAME,R8
*
* WE NOW HAVE A JCT EXTENSION AND A BERT - DO THE COPIES!
*
* COPY OUR FIELDS FROM THE JCT EXTENSION TO OUR BERT.
*  FIRST  MOVE  FIELDS COMMON TO ALL VERSION OF THE MODS.
*
*  COPY FIXED RELATIONAL VALUES
         MVC   UBRWITH,UJCXWITH    MOVE THE WITH FIELD
         MVC   UBRAFTR,UJCXAFTN    MOVE THE AFTER FIELD
         MVC   UBRBFOR,UJCXBFOR    MOVE THE BEFORE FIELD
* COPY CNTL VALUES
         MVC   UBRDNAME,UJCXDNAM   MOVE THE 5 /*CNTL NAMES
*    COPY FLAGS
         MVC   UBRUFLAG,UJCXUFLG   MOVE FLAG 2 FIELD (VRM/EYE)
         MVC   UBRMFLAG,UJCXMFLG   MOVE FLAG 1 FIELD (BEF/AFT/ETC)
         MVC   UBRDLAYS,UJCXDLYS   MOVE THE DELAY REASONS FLAG
*
* WE ALWAYS CREATE A NEW FORMAT JQE, BUT MIGHT HAVE AN OLD JCT
*
         TM    UJCXUFLG,UJCXXVRM   IS THE VRM FLAG SET? DO WE HAVE ONE?
         BNO   DOOLDJCT            IF NOT WE HAVE AN OLD VERSION JCT.
**   ELSE MOVE THE NEWER - VERSIONED VALUES TO THE JQE
** NEW FIELDS BELOW **
* EXTENDED FLAG BYTES
         MVC   UBRWATF,UJCWATF     WAIT FOR FLAGS BYTE
         MVC   UBRTAPF1,UJCTAPF1   MOVE THE TAPE 1 FLAG BYTE
         MVC   UBRMSCF1,UJCMSCF1   MOVE FLAG BYTE FOR MISC INDICATORS
         MVC   UBROPNF1,UJCOPNF    MOVE THE OPEN (UNUSED) FLAG NEXT
* HOLD VALUES
         MVC   UBRHLDU,UJCHLDU     MOVE HOLD UNTIL TIME
         MVC   UBRHLDUX,UJCHLDUX   TIME HOLD TILL WILL BE SATISFIED
         MVC   UBRHLDF,UJCHLDF     MOVE HOLD FOR   TIME
         MVC   UBRHLDFX,UJCHLDFX   TIME HOLD FOR  WILL BE SATISFIED
* WITHOUT NAME
         MVC   UBRWIOUT,UJWIOUT    MOVE THE WITHOUT NAME
         MVC   UBRMMTQE(L'UBRMMTQE),UJMMTQE     MOVE MEMBER TQE VALUES
         MVC   UBRMMSTK(8*L'UBRMMSTK),UJMMSTK   MOVE MEMBER MASK VALS
         MVC   UBRRSVD(L'UBRRSVD),UJRSVD      MOVE RESERVED VALUES
DOOLDJCT MVI   UBRDLAYS,0          ZERO OUR DELAY FLAGS
* FIXED FIELDS - EYECATCHER AND VRM VALUES.
* WE CAN HANDLE AN OLD JCT AND A NEW JQE ... SHOULD NOT BE, BUT ITS OK
         MVC   UBRXID,=C'JQEX'     MOVE THE EYECATCHER
         MVC   UBRVRM,=X'00010700' MOVE THE VRM FIELD 1.7.0
         DROP  R7                  LOSE ADDRESS OF OUR JCTX
*
* CHECK JOB TYPE
*
********************************************************************
*  EXIT RETURN POINTS
********************************************************************
RET00    DS    0H
         LA    R6,0                SET NORMAL RETURN CODE
*
*   NO NEED TO RETURN THE UPDATE MODE JQA - THE CALLER HANDLES IT!
*
RETURN   DS    0H
         $RETURN RC=(R6)           RETURN TO CALLER
*
BADBERT  DS    0H                  ERROR RETURN FROM $DOGBERT
         LA    R6,16(0,0)          SET A BAD RETURN CODE - RC=16
         B     RETURN              GO RETURN TO CALLER
         $MODEND ,
         END   ,
++SRC(STSCX20A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSCX20A TITLE 'JES2 MAINTASK END OF INPUT USER EXIT'
***********************************************************************
* EXIT 20 - JES2 MAINTASK - END OF INPUT EXIT - CALLED FOR RJE / NJE
* AND OTHER SOURCES OF INPUT OTHER THAN INTERNAL READERS.
*
* THE FUNCTION IS TO CHECK FOR A /*ROUTE XEQ HERE, AND SET A SYSAFF IF
* NEEDED AND THEN TO $CALL THE COMMON STSC2050 MODULE TO COPY THE JCTX
* TO THE JQEX (BERT EXTENSION).
***********************************************************************
***********************************************************************
*                                                                     *
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE    *
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS *
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED  *
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF   *
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE *
*  USEFULLNESS OF THE MATERIAL.                                       *
*                                                                     *
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,   *
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE  *
*  IN THE FUTURE.                                                     *
*                                                                     *
***********************************************************************
         COPY  $HASPGBL            INCLUDE THE JES GLOBAL VALUES
         PRINT ON                  RETORE FULL PRINTING
STSCX20A $MODULE TITLE='JES2 END OF INPUT USER EXIT',                  X
               RMODE=ANY,                                              X
               SYSP=(GEN,GEN,DATA,GEN,GEN),                            X
               ENVIRON=JES2,                                           X
               RPL,                GENERATE RPL DSECT                  X
               $BERT,              (BERT)                              X
               $BERTTAB,           (BERT)                              X
               $BUFFER,            HASP SPOOL BUFFER DSECT             X
               $CADDR,                                                 X
               $CATBERT,           (BERT)                              X
               $CMB,               ($RDRWORK)                          X
               $DCT,               (INFORM)                            X
               $HASPEQU,           HASP EQUATES                        X
               $HCCT,              (BERT)                              X
               $HCT,                                                   X
               $HFAME,             ($HCCT)                             X
               $JCT,               HASP JOB CONTROL TABLE DSECT        X
               $JCTX,              HASP JOB CONTROL TABLE DSECT        X
               $JQE,               HASP JOB QUEUE ELEMENT DSECT        X
               $MIT,               HASP MIT DSECT                      X
               $MITETBL,                                               X
               $PADDR,             HASP PADDR DSECT                    X
               $PARMLST,                                               X
               $PCE,               HASP PROCESSOR CONTROL ENTRY DSECT  X
               $PSV,                                                   X
               $QSE,               ($HCT)                              X
               $RDRWORK,           HASP RDR PCE WORKAREA DSECT         X
               $SAFINFO,           ($RDRWORK)                          X
               $SCAT,              HASP SCAT DSECT                     X
               $SCANTAB,           HASP SCAN TABLE DSECT               X
               $SJB,               (INFORM)                            X
               $TQE,               ($SJB)                              X
               $TRE,               HASP TRE DSECT                      X
               $USERCBS,           USER DSECTS                         X
               $XECB,              ($HCT)                              X
               $XPL
         USING JCT,R10             AS PASSED
         USING XPL,R5                  BY THE
         USING PCE,R13                    CALLING
         USING HCT,R11                       MODULES
EXIT20A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
         $SAVE  ,                  SAVE CALLER'S REGISTERS
         LR    R12,R15             SET BASE REGISTER
         SPACE 2
*
*  UP FRONT HOUSEKEEPING HERE...
*
         LR    R5,R1               SET BASE FOR THE XPL
         USING XPL,R5
         LA    R6,0                PRESET RETURN CODE (NO JQA YET)
         LTR   R10,R10             CHECK IF A JCT WAS PROVIDED
         BZ    RET00               NO - JUST RETURN
         ICM   R9,B'1111',PCEJQE   GET OUR JQE ADDRESS AND VALIDATE
         BZ    RETURN              IF NOT VALID -- THEN JUST RETURN
*
*  CHECK FOR "HERE" TYPE OF ROUTING
*  IF HERE WAS SPECIFIED - CLEAR THE FIELD AND IF NO AFFINITY IS
*  ALREADY SET - THEN SET IT FOR "HERE"
*
         USING JQE,R9
         CLC   JCTSCHEN(5),=C'HERE '   CHECK FOR "HERE" ROUTING
         BNE   NOTHERE                 DON'T SET IN SCHENV IF HERE
*
* ALWAYS CLEAR THE "HERE " LITERAL OUT OF JCTSCHEN, NEVER LEAVE IT
*
         MVI   JCTSCHEN,C' '
         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  CLEAR THE FIELD
*
* TEST TO SEE IF AUTOMATIC RESTART MANAGER HAS OVERRIDDEN SYSAFF
* AND IF  SO,  LEAVE IT ALONE.
*
         TM    X020FLG1,X0201ARM   DID ARM OVERRIDE SYSAFF?
         BNZ   NOTHERE             IF SO, DON'T CHANGE IT NOW
* ELSE  -
*  RESET THE AFFINIT TO "HERE" REGUARDLESS OF ANY OTHER SYSAFF=
*
         $SETAFF REQUEST=CLEAR,AFFIELD=X020SAF
         $SETAFF REQUEST=ADD,AFFIELD=X020SAF,AFTOKEN=$AFFINTY
         DROP  R9
NOTHERE  EQU   *
*
* HERE'S THE TRICKY BIT, CHANGE TO A USER ENVIRONMENT AND CALL 2050
*
         $ENVIRON PUSH,ENVIRON=(USER,ANY),SETR11=YES
*
* CALL OUR COMMON ROUTINE TO COPY  JCT EXTENSIONS TO JQE BERTS
*
         LA    R3,X020JCT          POINT TO PASSED JCT/JQE ADDRESSES
         $CALL STSX2050,            CALL THE COMMON COPY ROUTINE       X
               PARM0=(R5)             SET R0 - XPL ADDRESS
         LR    R4,R15              SAVE RETURN CODE IN R3 FOR A SEC.
*
* NOW RESET THE ENVIRONMENT
*
         $ENVIRON POP,SETR11=YES

         LTR   R4,R4               WAS THERE A PROBLEM WITH THE COPY?
         JZ    RET00               IF NOT THEN JUST END
         $WTO  BADBERTM,L'BADBERTM,ROUTE=$MAIN,CLASS=$ALWAYS
*
********************************************************************
*  EXIT RETURN POINT
********************************************************************
RET00    DS    0H
         XR    R15,R15             SET NORMAL RETURN CODE
*
RETURN   DS    0H
         $RETURN RC=(R15)          RETURN TO CALLER
*
*
BADBERTM $MSG  999,'ERROR RETURNED GETTING BERT IN STSCX20A'
*
         $MODEND ,
         END   ,
++SRC(STSCX49A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSCX49A TITLE 'JES2 JOB QUEUE WORK SELECT USER EXIT -- PROLOG'
*
* FUNCTIONS: THIS MODULE EITHER ACCEPTS OR REJECTS JES2'S CHOICE
*          FOR JQE SELECTION.  WE USE IT TO SEQUENCE JOB'S BASED ON
*          THEIR /*AFTER, /*BEFORE, /*WITH /*WITHOUT, /*CNTL
*          /*NOAUTORT, /*HOLDTIL, AND /*HOLDFOR CARDS, AND UPON THE
*          CLASS LIMITS SET BY "SSMCLSSLM" INITIALIZATION STATMENTS
*          AND POSSIBLELY BY JOBNAME MASK SET BY SSMUIDMX.
*
*
* ENTRY PT:  EXIT49A -- STSC'S JOB QUEUE WORK SELECT EXIT.
*
* REGISTER USAGE:
*
* REG  ON ENTRY     USAGE WITHIN EXIT 49                  ON RETURN
* ---  ------------ ------------------------------------- ------------
* R0   N/A          WORK                                  RESTORED
* R1   XPL          WORK                                  RESTORED
* R2   N/A          ADDR OF THIS JOB'S STQNAME.           RESTORED
* R3   N/A          WORK AREA FOR THIS EXIT TO USE.       RESTORED
* R4   N/A          XPL ^ THEN LATER AS OFFSET TO BERT.   RESTORED
*                   ADDR OF TEST JOB'S UBRDNAME (INNER).
* R5   N/A          ^ JQE SELECTED BY JES2 TO EXEC NEXT.  RESTORED
*                   COUNTER OF TEST JOB'S UBRDNAME (INNER).
* R6   N/A          ^STQNAME OF JOB SELECTED BY JES2.     RESTORED
* R7   N/A          ^JQA OF JOB TO COMPARE (FROM SCAN).   RESTORED
* R8   N/A          ^STQNAME OF JOB TO COMPARE.           RESTORED
* R9   N/A          ^ $CAT / $qgt                         RESTORED
* R10  N/A          ^ SSM'S ECSA COMMON AREA. SSMTB.      RESTORED
* R11  HCT          HCT                                   RESTORED
* R12  N/A          BASE REGISTER FOR THE EXIT.           RESTORED
* R13                (SAVE AREA)
* R14  RETURN ADDR  LINKAGE AND WORK                      RESTORED
* R15  ENTRY ADDR   RETURN ADDR AND WORK                  RETURN CODE
*
*
*     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE
*  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY IS
*  MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS ASSUMED
*  FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY THE USE OF
*  THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY TO EVALUATE THE
*  USEFULLNESS OF THE MATERIAL.
*
*     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO DATE,
*  NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR EXTENSIONS MADE
*  IN THE FUTURE.
*
*  F U N C T I O N :
*     FUNCTION:  THIS MODULE IS EXIT49 (QGOT) & IS PASSED CONTROL
*  AFTER JES2 HAS SELECTED A NEW JOB FOR EXECUTION, AND IS GIVEN
*  A FINAL OPPORTUNITY TO ACCEPT, OR REJECT THE JOB.  THIS EXIT
* NEVER SELECTS A JOB FOR EXECUTION, IT CAN ONLY REJECT POSSIBLE
*  CHOICES MADE BY JES2.  THE EXIT IS ALSO CALLED FOR " $ST " CMDS;
*  WE CHECK OUR GLOBAL OPTIONS TO SEE IF WE SHOULD ALLOW OR REJECT
*  ANY " $SJ " COMMANDS, AND SET RETURN CODES APPROPRIATELY.
*   THIS EXIT IS WHERE THE /*AFTER /*BEFORE /*WITH /*WITHOUT /*CNTL
*  /*HOLDFOR /*HOLDTIL /*NOAUTORT, THE JOB CLASS LIMITS, AND UID
*  AND JOBID MASK LIMITS, ARE IMPLEMENTED.  OTHER EXITS INPUT VALIDATE
*  RECORD, OR MOVE THE SPECIFIED OPTIONS, BUT THIS EXIT IS WHERE THEY
*  ARE EVENTUALLY USED, AND CAUSE SOME ACTION TO TAKE PLACE, OR NOT
*  NOT TAKE PLACE.
*
* ENTRY POINT :
*  EXIT49A - JOB QUEUE WORK SELECTION EXIT.
*
*
*
* REVISION HISTORY:
*
*   DATE   NAME         DESCRIPTION OF CHANGE
* -------- ------------ -----------------------------------------------
* 01/31/07 S. MCCOLLEY  COMPLETE REWRITE
* 05/10/07 s. mccolley  disable the 'beaft_pos' options and logic
*                       this change idenntified by sgm001
* 05/25/07 S. MCCOLLEY  ADDED USING FOR $HCT IN BASICSMF ROUTINE
*
         TITLE 'JES2 JOB QUEUE WORK SELECTION EXIT'
         COPY  $HASPGBL
         PRINT OFF
STSCX49A $MODULE TITLE='JES2 JOB QUEUE WORK SELECTION EXIT',           X
               RMODE=ANY,                                              X
               ENVIRON=JES2,                                           X
               ASCB,                                                   X
               CVT,                                                    X
               NTASM,         Name/Token constants                     X
               PSA,           Program Save Area DSECT                  X
               RPL,                                                    X
               $BERT,              ($DOGBERT)                          X
               $BERTTAB,           ($DOGBERT)                          X
               $CADDR,                                                 X
               $CAT,               ($DOGCAT)                           X
               $CATBERT,           ($DOGBERT)                          X
               $HASPEQU,                                               X
               $HCCT,              ($DOGBERT)                          X
               $HCT,                                                   X
               $JCT,               ($USERCBS: STJCTX)                  X
               $JCTX,              ($USERCBS: STJCTX)                  X
               $JQE,                                                   X
               $MIT,                                                   X
               $MITETBL,                                               X
               $PADDR,                                                 X
               $PARMLST,                                               X
               $PSV,                                                   X
               $QGET,                                                  X
               $QSE,                                                   X
               $TQE,                                                   X
               $TRE,                                                   X
               $XECB,                                                  X
               $XPL
         USING HCT,R11
EXIT49A  $ENTRY BASE=(R12),CSECT=NO,ENTRY=YES,REGUSE=(R15)
         $SAVE ,
         LR    R12,R15             SET UP OUR BASE
         XR    R3,R3               CLEAR POINTER TO WORK AREA
         LR    R4,R1               PARM LIST POINTER TEMP USE(R4)
         USING XPL,R4
         L     R9,X049QGT          QGET PARM LIST
         USING QGT,R9              TEMP USE OF R9 FOR QGET
         L     R5,X049JQE          JQE OF SELECTED JOB
         USING JQE,R5
         XR    R10,R10             CLEAR POINTER TO ECSA AREA
         XR    R6,R6               INDICATE NO JQEX YET
* CHECK IF CALLED FOR SOMETHING WE DON'T HANDLE - EXIT NOW
         LTR   R9,R9               DID THEY PASS A QGT? IF NOT THEN,
         JZ    CHK$SJ              CHECK FOR A $SJ COMMAND
         CLI   QGTTYP,0            CHECK OF INWS,OJTWSC,OJTWS AND
         JNE   RELWDONE            WLMINWS - IF NOT THOSE - DONT CARE
         CLI   QGTWSTP,$QGTWLMQ    WLM MANAGED INITS?
         JE    TSTHOLDS            IF YES, KEEP CHECKING
         CLI   QGTWSTP,$QGTINWS    JES2 MANAGED INITS?
         JE    TSTHOLDS            IF YES, KEEP CHECKING
         J     RELWDONE             ANYTHING ELSE - LET IT GO !
TSTHOLDS EQU   *
CHK$SJ   EQU   *
** * ------------------------------------------------------------- * **
** * -- here is where we test for potential reasons to reject   -- * **
** * -- this job that JES2 has selected to be executed next.    -- * **
** * ------------------------------------------------------------- * **
* 1 - FIRST ACQUIRE A SMALL WORK AREA FOR LATER USE *
         $GETWORK WORDS=(SSM49LEN)/4,USE=SSMW,LOC=ANY,                 X
               ERRET=ERNOWA
* FIRST CLEAR OUR ENTIRE WORK AREA ***
         LR    R3,R1               GET THE RETURNED ADDR IN R3
         XC    4(SSM49LEN-4,R1),4(R1) CLEAR ALL BUT EYE CATCHER
         J     LEN49OK             JUMP OVER OUR SANITY CHECK YCON
CK0001   DC   Y(X'7FFF'-255+(SSM49LEN-4)) ENSURE SSM49WRK NOT TOO BIG!
LEN49OK  EQU   *
* NEXT WE USED TO DOUBLE WORK ALIGN THE WORK AREA - NO MATTER WHAT THEY
* GAVE US BACK - IT WAS NOT NECESSARY, AND SO THE BIT SHIFTING BY THREE
* WAS COMMENTED OUT BELOW - ALSO IT IS NO LONGER NECESSARY TO SAVE THE
* 'ORIGINAL' ADDRESS THEY GAVE US FOR THE $GETWORK.
*
*        LA    R3,7(R0,R3)         BUMP ADDR BY 7 (MAX FOR DBLWRD CHG)
*        SRL   R3,3                SLIDE RIGHT THREE BITS OUT
*        SLL   R3,3                REALIGN ( ON A DBLWORD )
         USING SSM49WRK,R3
*        ST    R1,SSMWADDR         SAVE ORIGINAL ADDR FOR RETWORK
         XC    SSMQBSY,SSMQBSY     NO REASONS TO CHECK YET -
* NOW WE ARE DBLWORD ALIGNED, NO MATTER WHAT THEY GAVE US BACK !
*
* 1A - SAVE THE ADDRESS OF OUR XPL - FOR FINAL UPDATE BEFORE RETURN
         ST    R4,SSMXPLPT            SAVE OUR XPL POINTER FOR LATER
         XR    R4,R4               CLEAR THE XPL POINTER NOW
         DROP  R4
         MVC   SSMSID,$XCFGPNM     SAVE FOR USE IN SMF FORMATTING
* 2 - LOCATE OUR ECSA AREA NOW - BASE IT IN R10
         MVC   NTNAMEWK(3),=C'SSM'   START BUILDING NAME FOR N/T PAIR
         MVC   NTNAMEWK+3(8),$XCFGPNM XCFGRP NAME FINISHES THE NAME
*
         $TOKENSR REQUEST=RETRIEVE,NAME=NTNAMEWK,                      X
               VALUE=NTTOKNWK,LEVEL=SYSTEM,                            X
               ERRET=ERNOECSA,OKRET=ECSAFND
ECSAFND  EQU   *                   ECSA TOKEN WAS FOUND
* FIRST WORD OF TOKEN - OUR ECSA POINTER IS IN R1
         XC    NTNAMEWK,NTNAMEWK   CLEAR THEM NOW THAT
         XC    NTTOKNWK,NTTOKNWK     WE HAVE FINISHED WITHT HEM
         XC    SSMWKF01,SSMWKF01   CLEAR WORK FLAG 1 NOW
         LR    R10,R0              ENABLE THE ECSA USING
*        LR    R10,R1              ENABLE THE ECSA USING
         USING SSMTB,R10
         CLC   SSMEYE,=CL4'SSMT'   JUST A DOUBLE CHECK IS IT REALLY US?
         JNE   ERNOECSA            IF NOT USE THE LOCATE ERROR RTN.
* WE HAVE A VRM FIELD, BUT IT SHOULD ALWAYS MATCH - SO... NO CHECK.
         ST    R10,ECSAPTR         JUST IN CASE WE LOSE TRACK OF IT
         J     TST$SJ
ERNOECSA EQU   *
         XC    NTNAMEWK,NTNAMEWK   CLEAR THEM NOW THAT
         XC    NTTOKNWK,NTTOKNWK     WE HAVE FINISHED WITH THEM
         XC    ECSAPTR,ECSAPTR     CLEAR POINTER TO THE ECSA
         XR    R10,R10             CLEAR BASE REG FOR ECSA AREA
         OI    SSMWKF01,SSMDUMY    INDICATE A DUMMY ECSA IN EFFECT
* FINALLY FILL A SET OF DUMMY OR DEFAULT VALUES TO USE -
*                                  WE MAY NEED TO CHECK CNTL/WITH/WITHO
         J     TST$SJ              NOW GO TEST FOR REASONS TO REJECT
* 3 - CHECK IF DOING A $SJ AND ALLOW / REJECT BASED ON OPTIONS
TST$SJ   EQU   *                   TEST OF $ST  (AGAIN)
         LTR   R9,R9               DID WE GET A $QGET PARM?
         JNZ   TSTJQE              IF SO TEST THE JQE
* ELSE IT MUST BE A "$SJ" COMMAND
         TM    SSMWKF01,SSMDUMY    IS THERE A DUMMY ECSA AREA?
         JO    $SJALOWD              IF NO ECSA AREA - ALWAYS ALLOW IT!
*                                   We don't know what they want....
         CLI   SSMALLWS,SSMALLWS_ON DO WE ALLOW $SJ COMMANDS?
         JE    $SJALOWD            IF ALLOWED BY OPTION; THEN ALLOW IT!
* ELSE (WE HAVE AN ECSA) AND (WE DON'T ALLOW $SJ CMDS) - DISALLOW CMD
         $WTO  MSGNO$SJ,L'MSGNO$SJ,JOB=NO,ROUTE=$MAIN
         OI    SSMWKF01,SSMDISA    SET FLAG - DISALLOW THE $SJ CMD
** * ------------------------------------------------------------- * **
** * -- The message is sent, now write an SMF record - $SJ has  -- * **
** * -- BEEN REJECTED, OR WILL BE ALLOWED, AFTER QUEUING THE    -- * **
** * -- NEW SMF RECORD - RETURN AFTER RELEASING WORK AREA       -- * **
** * -- AND SETTING THE X049SKIP BIT AS NEEDED.                 -- * **
** * ------------------------------------------------------------- * **
$SJALOWD EQU   *                   ALLOW THE $SJ TO BE PROCESSED.
         CLI   SSMSMFOP,SSMSMF_ALL ALL RECS?
         JE    DOSMF43             IF SO, THEN DO IT.
         CLI   SSMSMFOP,SSMSMF_ACTION ACTION ONLY
         JE    DOSMF43             IF SO THEN DO IT.
         CLI   SSMSMFOP,SSMSMF_INPUT  INPUT ONLY?
         JE    SKPSMF43                IF SO SKIP IT.
         CLI   SSMSMFOP,SSMSMF_NONE  IF TRUELY NONE -
         JE    SKPSMF43                THEN SKIP IT.
DOSMF43  EQU   *
         LR    R1,R3               PASS OUR WORK AREA TO COMMON RTN.
         $CALL BASICSMF            GO FORMAT BASIC SMF DATA NOW
         L     R1,SSMSMFBA         GET THE BUFFER ADDRESS
         USING STPCSMFD,R1
         LTR   R1,R1               JUST DBL CHECK FOR A GOOD BUFFER
         JZ    SKPSMF43

         MVC   SMFXLEN,=AL2(SMFXLS43) SET LEN OF ENTIRE SUBTYPED 43 REC
         MVC   LENTEC01,=AL2(SMFLNS43) SET LEN OF SUBTYPED DATA ONLY
         MVC   SMFXSTY,=XL2'0043'  MOVE THE SUBTYPE AGAIN.
         MVC   SMFD8STY,=XL2'0043' MOVE THE SUBTYPE AGAIN.
         MVC   SMFD8S43,=XL2'0043' MOVE THE SUBTYPE AGAIN.
*  JUST SUBTYPED DATA LEFT TO BE FILLED
         TM    SSMWKF01,SSMDISA    WAS THE CMD DISALLOWED?
         JZ    SMFSJOK               IF NOT IT IS OK TO GO..
         MVI   SMFD83NN,C'X'       ELSE CMD WAS (WILL BE) DISALLOWED.
         J     SMFSJXX             BUMP OVER THE ALTERNATIVE
SMFSJOK  MVI   SMFD83NN,C'A'        WHICH IS TO ALLOW THE COMMAND
SMFSJXX  EQU   *
         MVC   SMFD83DT,$CLOCK     MOVE THE STCK FORMAT DATE/TIME
         $QUESMFB (R1)             WRITE THE RECORD NOW.
SKPSMF43 TM    SSMWKF01,SSMDISA    ONCE MORE - WAS IT ALLOWED?
         JZ    TSTRTNWK             RETRN WRKAREA AND RC=00 ALLOW JOB
         JNZ   SKPSMF40             IF NOT OK - RETURN VIA SKP40
** * ------------------------------------------------------------- * **
** * -- a JQE has been selected by JES2 if we get here  - we    -- * **
** * -- will refer to it as the selected jqe or the chosen one. -- * **
** * --                                                         -- * **
** * -- now test to see if we can allow it to begin exectution. -- * **
** * ------------------------------------------------------------- * **
TSTJQE   EQU   *
** begin by setting flags for tests based on ecsa data and jqe only **
         LTR   R10,R10             IS THERE A REAL ECSA AREA??
         JZ    TSTWAITS              IF NOT SKIP ECSA BASED TESTS
* now - are we using positive recognition - or general waits to fix
* the /*before /*after apparent errors when submitted en-masse?
         CLI   SSMBEAFT,SSMBEAFT_DELAY WAS A DELAY TYPE RUN REQUESTED?
         JE    DOJQEDLY            DO NOTHING HERE FOR POSITIVE RECOG.
         CLI   SSMBEAFT,SSMBEAFT_PREMOD  IS OPTION - THE OLD DEFAULT?
         JE    TSTWAITS            DO NOTHING IF THE OLD OPT IS USED.
*SGM001 - COMMENTED NEXT 2 LINES - IGNORE BEAFT_POS OPTIONS
*        CLI   SSMBEAFT,SSMBEAFT_POS
*        JE    TSTWAITS            THAT WAS THE LAST OPTION...
* ELSE A DELAY OF ALL JOBS IS NEEDED - IGNORE ZERO TIME WAITS
DOJQEDLY CLC   SSMBATIM,=H'0'      IS GENERAL WAIT TIME ZERO
         JE    TSTWAITS            IF NOT TEST FOR HOLD TIMES
*
** * ------------------------------------------------------------- * **
** * -- next we check for holds based on times, /*holdfor,      -- * **
** * -- /*holdtil, or general hold from ssmbatime.  resolve them-- * **
** * -- now and allow job to continue or reject for time-delays.-- * **
** * ------------------------------------------------------------- * **
         XGR   R15,R15             CLEAR R15 BEFORE WORKING WITH IT
         ICM   R15,B'0011',SSMBATIM GET THE DELAY TIME (IN SECS.) IN 15
         ST    R15,SSMTQWAT        save time for use in stimer rtn.
         LG    R1,=FD'4096000000'  PUT ONE SECOND (IN CLOCK TICKS) IN
         MSGR  R15,R1              R1 THEN MULTIPLY BY WAIT TIME...
         XGR   R0,R0               CLEAR R1 AGAIN
         L     R0,JQXCRTME         GET ORIGINAL READER TIME
         SLLG  R1,R0,32            ADJUST DELAY TIME FOR COMPARISON
         AGR   R15,R1              ADD READER TIME PLUS DELAY
         CLG   R15,$CLOCK          FINALLY DO THE COMPARISON
         JNH   TSTWAITS            JUMP NOT HIGH
*                                    BUILD AND POST A STIMER CB
*                                    THEN REJECT IT .
         LR    R1,R3               PUT WORK AREA IN R1 FOR CALL
         $CALL STIMER              ISSUE $STIMER AGAINST A NEW STTQE CB
         OI    SSMWKF01,SSMGENWT   INDICATE A GENERAL WAIT - NO JQE
         J     REJECTIT
*
TSTWAITS EQU   *
         XC    SSMTQWAT,SSMTQWAT   CLEAR THE WAIT TIME FIELD
* 4 - LOCATE OUR JQA'S BERT OFFSET FOR LATER USE - IF THERE IS ONE...
         DROP  R9                  DROP USING FOR QGT PARMS
         $DOGBERT ACTION=GETOFFSET,CBTYPE=JQE,NAME=STQNAME,            X
               ERRET=NOSTQNME
         JNZ   NOSTQNME            IF OFFSET IS NOT FOUND - THEN WE
*                                    have a very big problem...
GOTBRTOK LR    R4,R1               JQA OFFSET IN R4
         LA    R6,0(R4,R5)         GET OUR BERTS ADDR.
         ST    R4,SSMJQAD          SAVE THE OFFSET TO BERT FOR LATER
         USING STQNAME,R6
         CLC   UBRXID,=C'JQEX'     CHECK THE EYECATCHER - IS IT RIGHT?
         JNE   NOBERT               IF NOT SET FLAGS AND CONTINUE
         J     GOTBERT
*
NOSTQNME EQU   *
* THIS IS THE  ** E R R O R ** ROUTINE FOR THE BERT LOCATE...
* IF WE ERRORED OUT WHILE LOOKING FOR IT- LET IT GO DO NOT HOLD IT!
         XR    R4,R4               INIDCATE WE HAVE NO DISP TO STQNAME
         ST    R4,SSMJQAD          SAVE OFFSET (0) TO BERT FOR LATER
         XR    R6,R6               NO DEVELOPED ADDR FOR THE JQA
         $WTO  MSGNOBRT,L'MSGNOBRT,JOB=NO,ROUTE=$MAIN,WAIT=NO
         J     TSTRTNWK            RTN WORK AREA, ALLOW JOB, END !
NOBERT   EQU   *                   WE DON'T HAVE A BERT - NOT FOUND
* THIS IS THE   ** N O   B E R T **  ROUTINE - WHEN THERE IS NO BERT
*  IT HAPPENS IF THERE ARE NO /* STATEMENTS
*  BUT WE STILL MUST CHECK FOR BEFORE/AFTER COONNECTIONS AND FOR THE
*  MAXIMUM LIMITS FOR JOBNAME MASK, UID MASK, AND CLASS LIMS.
         OI    SSMWKF01,SSMNOBRT   FLAG US AS "BERTLESS"
         B     CHK5                EVEN WITH NO BERT WE STILL TEST
*                                   JUST NOT MOST THINGS... WE DO
*                                    TEST CLASS, UID, JOBNAME LIMS
GOTBERT  EQU   *
** * ------------------------------------------------------------- * **
** * -- now do tests and set flags based on bert for the chosen -- * **
** * -- one, the selected jqe.                                  -- * **
** * ------------------------------------------------------------- * **
* -- NEXT TEST FOR THE USE OF A /*WITH JOBNAME CARD...
TS4WITH  TM    UBRMFLAG,UBRWITHF   IS A /*WITH IN PLAY
         JZ    TS5WITHO             IF NOT TEST FOR A /*WITHOUT
         OI    SSMQBSY,SSMQWIT     SET "WITH" FLAG
TS5WITHO TM    UBRUFLAG,UBRXXVRM   IS THIS NEW FMT STQNAME?
         JZ    CHK5                PAST 1.7 TYPE TESTS
         CLC   UBRVRM,=X'00010700' BEFORE 1.7 OR ALL ZEROS?
         JL    CHK5                PAST 1.7 TYPE TESTS
         TM    UBRMSCF1,UBRMSWOJ   WITHOUT IN PLAY?
         JZ    TESTTIME            PAST 1.7 TYPE TEST
         OI    SSMQBSY,SSMQWITO    WITHOUT IS NOW FLAGGED.
*
TESTTIME TM    UBRWATF,UBRWATFR+UBRWATT   ANY WAITS IN USE?
         JZ    CHK5
*
         TM    UBRWATF,UBRWALLS    ARE THEY ALL SATISFIED?
         JO    CHK5                          IF SO NEXT CHECK...
*
         TM    UBRWATF,UBRWATFR    IS WAITFOR IN THE MIX?
         JZ    TWATT                TEST WAITTIL
         TM    UBRWATF,UBRWATFS    IS WAITFOR SATISFIED ALREADY?
         JO    TWATT                 IF YES CHECK NEXT POSSIBILITY
* NOW WE CHECK IF WAITTIL IS SATISFIED....
TWATF    CLC   UBRHLDFX,$CLOCK      CURRENT => HOLD FOR SATISFIED TIME
         JH    REJWFR              REJECT FOR WAITFOR TIME
         OI    UBRWATF,UBRWATFS    WAIT FOR IS NOW SATISFIED
         CLI   UBRDLAYS,UBRDLWFR  WAS WAITFOR THE HOLD REASON?
         JNE   TWATFX1             IF NOT KEEP WORKING
         MVI   UBRDLAYS,X'00'      IF SO, THEN CLEAR THE DELAY REASON
         XC    UBRMMSTK(32),UBRMMSTK   ZERO THE STCK TIMES where we
*                                   ISSUED $STIMER (WITH TQE'S) ON.
         MVI   UBRMMTQE,X'00'     CLEAR THE MEMBER MASK -
TWATFX1  EQU   *
* NOW WE ARE NOT WAITING ON WAITTIL, AND WAITTIL STUFF IS CLEANED UP
         TM    UBRWATF,UBRWATT     IS WAIT TILL being required also?
         JO    TWATT
FLALLSAT OI    UBRWATF,UBRWALLS    INDICATE NO MORE TIME TESTS.
         J     CHK5                DONE WITH WAIT FOR / TILL
* AT THIS POINT THERE IS NO WAITFOR CARD, OR THERE IS AND IT IS PAST

TWATT    TM    UBRWATF,UBRWATT     IS WAITTIL IN THE MIX.
         JO    TSTWATT              IF SET TEST WAIT TIL VALUE
* WAITFOR IS NOT NEEDED, AND WAITTIL IS NOT USED, OR SATISFIED,
*   SO WE SHOULD FLAG AS BOTH SATISFIED.
         OI    UBRWATF,UBRWALLS    INDICATE NO MORE TIME TESTS NEEDED.
         J     CHK5
TSTWATT  CLC   $CLOCK(4),UBRHLDUX   CURRENT => WAIT TIL SATISFIED TIME?
         JL    REJWTT              REJECT FOR WAITTIL TIME
* ELSE IT IS SATISFIED AND THEY MUST ALL BE SATISFIED.
         OI    UBRWATF,UBRWALLS+UBRWATFS  THIS ONE (AND BOTH) SATISFIED
         CLI   UBRDLAYS,UBRDLWTL  WAS WAITTIL THE HOLD REASON BEFORE?
         JNE   TWATTX1              IF NOT KEEP WORKING
         MVI   UBRDLAYS,X'00'     IF IS, THEN CLEAR THE DELAY REASON
         XC    UBRMMSTK(32),UBRMMSTK  ZERO THE STCK TIMES where WE
*                                   ISSUED $STIMER (WITH TQE'S) ON.
         MVI   UBRMMTQE,X'00'     CLEAR THE MEMBER MASK AS WELL
TWATTX1  EQU   *
*
* now multiple tests - if any of these tests must be done, we must do
* a $qbusy for all comparisons jqe's
*
CHK5     EQU   *                   JMP HERE IF NO BERT ($DOGBERT=>RC=4)
*                                     FOR THE CHOSEN ONE. (NO STQNAME)
* CHK5 IS A TEST FOR CLASS LIMITS ***
         LTR   R10,R10             DID WE FIND AN ECSA AREA OR NOT
         JZ    MAINLINE              IF NOT SKIP FORWARD ....
*
         CLI   SSMCLSOP,SSMCLSOP_ON TEST LIMIT BY CLASS OPTION - IF ON.
         JNE   TS2JNM                 IF NOT ON TEST JOBNAME MASK OPTS
         OI    SSMQBSY,SSMQJC      SET FLAG FOR LIMIT BY CLASS
         XC    SSMCLSK,SSMCLSK      ZERO THE CLASS COUNT
* NOW SET UP CLASS LIMIT TO CHECK WHEN LOOPING THRU ACTIVE JOBS.
         IC    R1,JQEJCLAS         PICKUP JOB CLASS
         STC   R1,SSMTSTCL         SAVE THE CLASS TO CHECK FOR
         N     R1,=X'0000003F'     TURN OFF B'11000000' BITS IN CLASS
         SLL   R1,1                TIMES 2
         A     R1,=F'54'           = +54  BYTES INTO A 2 BYTE FIELD !
         LA    R1,SSMCLSLM(R1)     GET ADDRESS OF RESULTANT BYTE.
         MVC   SSMCLSL,0(R1)       COPY THE CLASS LIMIT VALUE
         CLC   SSMCLSL,=X'0000'    DON'T ALLOW ANYONE IN THIS CLASS?
         JE    REJCLS              IF SO THEN WE GET OUT RIGHT NOW!
*
* NOTE - CLASS LIM OF ZERO IS VALID - NO JOBS ALLOWED IN THAT CLASS !
*

TS2JNM   EQU   *
* TS2JNM IS A TEST TO SEE IF WE NEED TO CHECK JOBS LIMITED BY CLAS
         CLC   SSMJBNMX,$ZEROS     IS THE LIMIT 0? (0=NOLIMIT/NOCHECK)
         JE    TS3UID               IF NOT CHECK FOR UID LIMITS
* NOTE A JOBNAME MAX OF ZERO MEANS NO LIMIT IS IMPOSED *
         OI    SSMQBSY,SSMQJN      WE ARE CHEKING JOBNAMES - SET FLAG
         MVC   SSMJMSK1,=CL4' '    BLANK THE JOBNAME MASK 1
         MVC   SSMJMSK2,SSMJMSK1          AND MASK 2
DOJMSK1  XR    R1,R1               CLEAR OUR WORK REG FIRST
         ICM   R1,B'1000',SSMJMHI  PICK UP THE LEFT HALF OF BIT MASK
         SLL   R1,4                SLIDE IT TO THE EDGE OF THE REG.
         LA    R15,JQEJNAME        JOBNAME FIELD POINTER
         LA    R2,SSMJMSK1         RESULTS FIELD
MSKJLT1  LTR   R1,R1               IS HIGH ORDER BIT ON..
         JP    MSKJLOP1            IF POSITIVE (NO HIGH ORDER BIT) -
         MVC   0(1,R2),0(R15)       - ELSE MOVE THAT JOBNAME BYTE
         LA    R2,1(R0,R2)            FOR LATER USE & BUMP R2 BY 1
MSKJLOP1 LA    R15,1(R0,R15)       ALWAYS - BUMP R15 (FROM FIELD) BY 1
         SLL   R1,R1               SET UP THE NEXT BIT FOR TESTING
         LTR   R1,R1                - BUT FIRST - ARE WE ALL THROUGH?
         JNZ   MSKJLT1              IF NOT JUST KEEP LOOKING TILL DONE.
DOJMSK2  EQU   *  SECOND HALF OF MASK IS PROCESSED NEXT - SSMJMLO
         ICM   R1,B'1000',SSMJMLO  GET LAST 4 BITS OF JOBNAME MASK
         SLL   R1,4                SLIDE IT TO EDGE OF REGISTER
         LA    R15,JQEJNAME+4      POINT TO FROM FIELD
         LA    R2,SSMJMSK2         PTR TO RESULTS FIELD
MSKJLT2  LTR   R1,R1               IS HIGH ORDER BIT ON?
         JP    MSKJLOP2            IF NOT SKIP MOVING BYTES TO TST FLD
         MVC   0(1,R2),0(R15)      ELSE SAVE A BYTE TO THE TST FLD
         LA    R2,1(R0,R2)         BUMP TO NEXT LOCATION IN TO FIELD
MSKJLOP2 LA    R15,1(R0,R15)       BUMP THE ADDRESS IN R15 - ALWAYS!
         SLL   R1,1                SLIDE NEXT BIT INTO TEST POSITION
         LTR   R1,R1               CHECK IF WE ARE DONE - OR IF WE
         JNZ   MSKJLT2              HAVE MORE TO DO - WITH JOBNAME MSKS
CLRJNMK  XC    SSMJBNK,SSMJBNK      CLEAR MASKED JOBNAME COUNT.
** * ------------------------------------------------------------- * **
** * --  at this point, if there was a non-zero value in ssmjbnmx  * **
** * -- (jobname max), we have cleard the matching jobname count-- * **
** * -- (ssmjbwk) to 0, we used the "1" bits in the jobname mask-- * **
** * -- fields 1 and 2 to to select matching position characters-- * **
** * -- from the current jobname to build ssmjmsk1 and ssmjmsk2 -- * **
** * -- for example, if jobname mask is c"u*u***uu" then ssmjmhi-- * **
** * -- and ssmjmlo are b'1010' and b'0011' respectivly, they are  * **
** * -- set elsewhere - what we did was to create the test fields  * **
** * -- ssmjmsk1 and ssmjmsk2 - to continue the example if the  -- * **
** * -- masks were as describe above and the jobname was        -- * **
** * -- =c'abcdefgh' then the ssmjmsk1 would be =c'ac  ' and    -- * **
** * -- ssmjmsk2 would be =c'gh  '.  This is later used with a  -- * **
** * -- clm instruction to quickly test the other active jobs   -- * **
** * -- to see if they match the mask created with the selected -- * **
** * -- jobname ----- simple! (reread it if you need to).       -- * **
** * --                                                         -- * **
** * --  next we do the same with uid masks...                  -- * **
** * ------------------------------------------------------------- * **
TS3UID   CLC   SSMUIDMX,$ZEROS     IS LIMIT 0? (0=NOLIM = NO CHECKS)
         JE    MAINLINE            IF NOT NEEDED GO TO NEXT TEST
         OI    SSMQBSY,SSMQUID     SET FLAG TO INDICATE WE NEED TO TEST
         MVC   SSMUMSK1,=CL4' '    CLEAR THE USERID MASK
         MVC   SSMUMSK2,SSMUMSK1     BOTH OF THEM 1 AND 2
DOUMSK1  XR    R1,R1               ALWAYS CLEAR WORK BEFORE STARTING
         ICM   R1,B'1000',SSMUMHI  LOAD THE FIRST 4 BITS OF THE MASK
         SLL   R1,4                SLIDE TO EDGE OF REGISTER
         LA    R15,JQEUSRID        POINT TO TOP OF USERID (FROM VALUE)
         LA    R2,SSMUMSK1         POINT TO TOP OF MASK 1 (TO FIELD)
MSKULT1  LTR   R1,R1               IS HIGH ORDER BIT IN MASK ON?
         JP    MSKULOP1            IF NOT - JUST INDEX AND LOOP
         MVC   0(1,R2),0(R15)      MOVE MATCHING BYTE TO MASK 1
         LA    R2,1(R0,R2)          BUMP 'TO' FIELD POINTER
MSKULOP1 LA    R15,1(R0,R15)       ALWAYS BUMP 'FROM' POINTER
         SLL   R1,1                MOVE NEXT BIT TO TEST POSITION
         LTR   R1,R1               ARE WE THERE YET? ALL DONE I MEAN?
         JNZ   MSKULT1             END OF LOOP FOR MASK #1 -
DOUMSK2  ICM   R1,B'1000',SSMUMLO  LOAD NEXT FOR BITS OF MASK
         SLL   R1,4                SLIDE TO THE EDGE
         LA    R15,JQEUSRID+4      WHERE TO GET MATCHING BYTES FOR MSK2
         LA    R2,SSMUMSK2         WHERE TO MOVE BYTES TO IF MASKED OK
MSKULT2  LTR   R1,R1               TEST HIGH ORDER BIT (NEGATIVE IF 1)
         JP    MSKULOP2             JUMP "POSITIVE" IF ZERO HIGH ORDER
         MVC   0(1,R2),0(R15)      MOVE THE CHARACTER IF MASK MATCHES
         LA    R2,1(R0,R2)         BUMP THE "TO" FIELD POINTER
MSKULOP2 LA    R15,1(R0,R15)
         SLL   R1,1                MOVE NEXT BIT INTO TEST POSITION
         LTR   R1,R1               DONE YET
         JNZ   MSKULT2                IF NOT, RELOOP - TILL DONE.
CLRUIDK  XC    SSMUIDK,SSMUIDK
*
** * ------------------------------------------------------------- * **
** * -- Mainline Processing Logic -                             -- * **
** * --                                                         -- * **
** * --  SCAN OPTIONS HAVE ALREADY BEEN SET WHEN WE GET HERE.   -- * **
** * --                                                         -- * **
** * -- SOME COMBINATIONS OF OPTIONS DO NOT REQUIRE A SCAN AND  -- * **
** * -- FETCH OF A READ MODE JQA, WE WILL DO AS LITTLE AS IS    -- * **
** * -- REQUIRED TO VALIDATE THE SELECTED JOB.                  -- * **
** * --  As soon as it can be determined that a job needs to be -- * **
** * -- rejected, it will be, without any further checking.     -- * **
** * --                                                         -- * **
** * --  If needed, we will count jobs in the same execution    -- * **
** * -- class, or with the same jobname mask, and limits checked-- * **
** * -- as we progress through all active jobs.                 -- * **
** * --                                                         -- * **
** * --  Each time a job is rejected, it will have it's bert    -- * **
** * -- updated with the rejection reason, and the next potential  * **
** * -- job will be requested from jes2 for the same set of     -- * **
** * -- checks.                                                 -- * **
** * --                                                         -- * **
** * --  Graphically - we compare to 'Other" jobs like this...  -- * **
** * --                                                         -- * **
** * --                                                         -- * **
** * --         $dogcat   (when no more do qjqe type=rebuild)   -- * **
** * --           ¦                             ^  (end after   -- * **
** * --           ¦                             ¦   rebuild q)  -- * **
** * --          ->--> $qjqe  cat=x,mode=real ==                -- * **
** * --         ¦        ¦                                      -- * **
** * --         ^        +========> $QBUSY (COMPARISON JQE)     -- * **
** * --         ¦        ¦          (IS IT ACTIVE? - SAVE STATUS)  * **
** * --         ¦        ¦           (TEST AS NEEDED)           -- * **
** * --         ¦        ¦                                      -- * **
** * --         ^        '=> $dogjqe fetch read  (to get bert)  -- * **
** * --         ¦               ¦                 (if needed)   -- * **
** * --         ¦               ¦                               -- * **
** * --         ^               ¦                               -- * **
** * --         ¦               ¦'==> $DOGJQE (RETURN)          -- * **
** * --         ¦                               ¦  (for each    -- * **
** * --         =<==<==========<=======<======<='     $dogjqe)  -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
MAINLINE EQU   *
         USING CAT,R9              CLASS ATTRIBUTE TABLE
         XR    R9,R9               PRE CLEAR THE REGISTER
         XR    R8,R8               NO JQA TO RETURN - YET...
*
CATLOOP  EQU   *                   TOP OF THE LOOP
*
         $DOGCAT ACTION=(FETCHNEXT,READ),   LOOP THROUGH ALL CATS      X
               ALLQUES=(YES,REBLD),                                    X
               CAT=CAT,ERRET=X049RC0       WHEN DONE - IT MUST BE OK
         LR    R9,R1               GET RETURNED CAT ADDR.
* ON FIRST CALL TO DOGCAT SSMCATPT IS ZERO - FILL IT WITH FIRST CAT PTR
* THE FIRST POINTER IS NEEDED TO RELEASE THE $CAT WHEN WE ARE DONE,
*  - BUT ONLY IF WE DIDN'T RUN THROUGH ALL OF THE $CAT POINTERS!
         CLC   SSMCATPT,$ZEROS
         JNE   GETJQE             IF NOT ZEROS THEN JUST CONTINUE
         ST    R9,SSMCATPT         - ELSE SAVE IT FOR LATER
*                                  GO GET ALL JQES FOR THIS CAT...
*
GETJQE   EQU   *                   LOOP THRU ALL JQE'S FOR THIS CAT.
         $QJQE  CAT=CAT,REG=(R7),                                      X
               MODE=REAL,LOOP=NEXTJQE,  NEXTJQE = LABEL FOR LOOPING    X
               NOMORE=CATLOOP
GOTJQE   EQU   *
         XR    R8,R8               ONCE MORE CLEAR THE RTN JQA PTR.
* NOW CHECK THIS JQE LEVEL (NO UBR AVAILABLE YET)  FIELDS.
         TM    JQETYPE-JQE(R7),$SPIN  THE SPIN JQES
         JO    NEXTJQE             SKIP IF SPUN
         TM    JQETYPE-JQE(R7),$XEQ
         JO    TESTJQE             IF EXECUTION CLASS - DO IT!
         TM    JQETYPE-JQE(R7),$INPUT
         JZ    NEXTJQE             IF IN THE INPUT QUEUE - DO IT!
* 1 - CHECK IF TEST JOB IS ALSO THE CHOSEN ONE... NO CHECK NEEDED IF SO
TESTJQE  EQU   *
         CLC   JQEJBKEY,JQEJBKEY-JQE(R7) IS THE TEST JQE ALSO OUR JQE?
         JE    NEXTJQE
         TM    SSMWKF01,SSMNOBRT   IS THERE A SELECTED BERT?
         JO    CHK4                SKIP THE /*AFTER TEST IF NO BERT
* 2 - CHECK FOR /*AFTER IN 'SELECTED' JQE
CHK2     EQU   *                   TEST TO SEE IF - ANY - UBR FLAGS
         TM    UBRMFLAG,UBRAFT     /*AFTER IN 'SELECTED' JQE?
         JZ    CHK4                SKIP IF NOT SET.
         CLC   UBRAFTR(8),JQEJNAME-JQE(R7)  AFTER 'THIS' JOBNAME?
*SGM001- CHANGED  'JE REJAFT' TO 'JE REJAFT2' REJAFT SETS A 'POSITIVE'
*SGM001  FLAG & WE ARE DISABLING POS. LOGIC.
         JE    REJAFT2             REJECT BECAUSE OF /*AFTER
*                                   and flag 'after' as satisfied
* 4 - TEST FOR  /*BEFORE AND /*CNTL STATEMENTS
CHK4     TM    JQEFLAG3-JQE(R7),JQE3JOB  IS IT A BATCH JOB?
         JNZ   FINALCKS            IF NOT NO /*CNTL /*BEFOR'S TO FIND.
*
* HERE IS WHERE WE GET THE JQA FOR THE TEST (COMPARISON) JOB (R2)
*                       (READ MODE)
*
         $DOGJQE ACTION=(FETCH,READ),JQE=(R7) GET TEST JQE'S JQA
         LR    R2,R0               SAVE JQA IN R2
         ST    R2,SSMJQA           SAVE ADDR OF JQA TO BE RETURNED!
*                                    R7 MUST KEEP OLD JQE PTR FOR THE
*                                      THE FIND NEXT LOOP TO WORK RIGHT
*  turn off the busy bits before test -if jqe is active(acitve locally)
         NI    SSMWKF01,255-SSMBUSY TURN OFF THE BUSY ANYWHERE BIT
         NI    SSMWKF01,255-SSMBUSYL TURN OFF THE LOCAL BUSY BIT
         $QBUSY JQE=(R2),ACTION=(TEST,ANY),NOTBUSY=OVRNOBSY
         OI    SSMWKF01,SSMBUSY    MARK THE TEST JQE AS BUSY
* IF JQE IS ACTIVE - WE NEED TO SEE IF IT IS ACTIVE ON LOCAL SYSTEM!
         $QBUSY JQE=(R2),ACTION=(TEST,LOCAL),NOTBUSY=OVRNOBSY
         OI    SSMWKF01,SSMBUSYL   MARK THE TEST JQE AS BUSY HERE
         J     OVRNOBSY            JUMP OVER THE NOT BUSY ROUTINE
OVRNOBSY EQU   *
* *********************************************************************
         L     R4,SSMJQAD          GET THE DISPLACEMENT TO THE STQNAME
DODISP   LA    R8,0(R4,R2)         BERT (OUR JQEX), AND DEVELOP ADDR.
         NI    SSMWKF01,255-SSMNOTBR SET DEFAULT FLAG TO JQEX FOUND
         CLC   UBRXID-STQNAME(4,R8),=C'JQEX'  DOES EYECATCHER MATCH?
         BE    TSTBEF01             IF SO, IT WAS FOUND, ELSE WE JUST
         OI    SSMWKF01,SSMNOTBR     FLAG IT AS NO TEST BERT FOUND, &
         J     CMPQBSY                  CONTINUE WHERE IT MAKES SENSE
*
TSTBEF01 TM    UBRMFLAG-STQNAME(R8),UBRBEF DOES TST JQE HAVE A /*BEFORE
         JZ    TS3CNTL
         CLC   JQEJNAME,UBRBFOR-STQNAME(R8) /*BEFORE THIS JQE?
*sgm001- changed  'je rejbef' to 'je rejbef2' rejbef sets a'positive'
*sgm001  flag & we are disabling pos. logic.
         JE    REJBEF2             REJECT WITH A /*BEFORE REASON.
TS3CNTL  TM    UBRMFLAG,UBRCNTL    IS CNTL IN PLAY FOR SELECTED JOB
         JZ    CMPQBSY               IF NOT TEST FOR WITH
         TM    UBRMFLAG-STQNAME(R8),UBRCNTL  ALSO ON FOR 'THIS' JOB?
         JZ    CMPQBSY               IF NOT THEN CONTINUE - ELSE
*
* WE MUST TEST ALL JOBS FOR A 'PRG' OF A CNTL NAME, NOT JUST FOR
* ACTIVE JOBS LIKE WE DO FOR SHARED AND EXCLUSIVE JOBS.
*
DOCNTLT  EQU   *
NOTSTN1  TM    SSMWKF01,SSMNOTBR   IF NO TEST BERT - NO CNTL CONFLICTS
         JO    CMPQBSY               SO DON'T BOTHER CHECKING
         TM    SSMWKF01,SSMNOBRT   IF NOT SELCTED BERT - NO CNTL CHECKS
         JO    CMPQBSY               SO DON'T BOTHER CHECKING
         LA    R1,UBRDNAME         POINT TO CNTL NAMES FOR SELECTED JOB
         XR    R15,R15             CLEAR R15
         IC    R15,UBRMFLAG        R15 = FLAG BYTE FOR SELECTED JQE
         SRL   R15,4               ISOLATE CNTL COUNT
         LTR   R15,R15             DO WE HAVE A ZERO COUNT ? - IF SO,
         JZ    CMPQBSY               JUST SKIP THE LOOP-D-LOOP.
*
         STM   R4,R5,SAVE2REG      RESTORE OUR WORK REGS (4 AND 5)
*
CHKLP1   EQU   *                   TOP OF INNER LOOP - RESET VALUES
         LA    R4,UBRDNAME-STQNAME(R8) POINT TO CNTL NAMES FOR TST JOB
         XR    R5,R5               CLEAR R5
         IC    R5,UBRMFLAG-STQNAME(R8) POINT TO FLAG/COUNT BYTE
         SRL   R5,4                ISOLATE THE COUNT ONLY
         LTR   R5,R5                IS THE COUNT ZERO ?
         JZ    BOTLOP2                 DON'T TRY TO TEST INNER LOOP
* NOW - DO ALL NEEDED CNTL TESTING AT ONE TIME
CHKLPCHK CLC   0(8,R4),0(R1)       DO THE RESOURCE NAMES MATCH?
         JNE   CHKINRLP              IF NOT CHECK NEXT SET.
         CLI   8(R4),C'P'          IS TEST JOB A PURGE?
         JNE   TSTPG2                IF NOT SKIP PURGE TESTS
         CLI   8(R1),C'P'          IS SELECTED JOB ALSO A PRG?
         JNE   REJCTL                IF NOT A PRG ANYWHERE - ACTIVE
*                                    OR NOT TRUMPS AN EXC OR A SHR
*- BOTH JOBS ARE SET FOR PRG - TEST FURTHER
         TM    SSMWKF01,SSMBUSY    IS TEST JOB ALREDY ACTIVE?
         JO    REJCTL                IF TEST IS ACTIVE IT WINS - ONLY
*                                    ONE ACTIVE PURGE AT A TIME
         J     NJBSY               IF IT WASN'T ACTIVE KEEP LOOPING
TSTPG2   EQU   *      IT'S NOT A PURGE
         TM    SSMWKF01,SSMBUSY    IF TEST JOB NOT BUSY - SKIP IT.
         JZ    NJBSY
         CLI   8(R1),C'P'        IS SELECTED JOB A PRG? IF SO ...
         JE    REJCTL             PRG CANNOT RUN TILL ALL OTHERS DONE
*                                BUT -BOTH JOBS=PRG WAS TESTED ABOVE.
         CLI   8(R4),C'E'          DOES ACTIVE TST JOB HAVE RES='E'?
         JE    REJCTL                IF SO - REJECT (THEY HAVE EXC)
         CLI   8(R1),C'E'          DOES SELECTED JOB NEED TO EXCLUSIVE?
         JE    REJCTL               IF SO, REJECT- SOMEONE ELSE HAS IT
*
NJBSY    EQU   *
CHKINRLP LA    R4,UBRDNAML(,R4)    BUMP INNER LOOP PTR
         BCT   R5,CHKLPCHK         DECREMENT COUNT AND LOOP
* INNER LOOP DONE WHEN WE FALL THROUGH TO HERE....
BOTLOP2  LA    R1,UBRDNAML(,R1)    BUMP TO NEXT CNTL FOR OUTTER LOOP
         BCT   R15,CHKLP1          AND GO RESET INNER LOOP
*
*
         LM    R4,R5,SAVE2REG      RESTORE OUR WORK REGS (4 AND 5)
* TEST FOR CNTL IS NOW DONE !
*
CMPQBSY  CLI   SSMQBSY,X'00'       ANY 'BUSY' STYLE TESTS TO DO?
         JE    FINALCKS              IF NOT - SKIP AHEAD PAST BUSY TSTS
         TM    SSMWKF01,SSMBUSY    IS TEST JOB ACTIVE?
         JZ    FINALCKS              SKIP OVER THE 'BUSY' TESTS.
**
** all remaining tests in this loop require the current test job to be
** active on *this* system, not just anywhere in the mas, so if the
** locally busy bit is not set - skip to the end - the remaing tests
** are:  with, without, limits for jobclass, uid mask and jobname mask
**
         TM    SSMWKF01,SSMBUSYL   IS THE TEST JOB ACTIVE ON "THIS" SYS
         JZ    FINALCKS
*
* NEXT TEST TO ENSURE /*WITHOUT IS SATISFIED.
GLBLTSTS TM    SSMQBSY,SSMQWITO    CHECKING FOR /*WITHOUT
         JZ    RTWIT                IF NO /*WITHOUT - GO CHECK /*WITH
*  NOTE - WE ARE ONLY CHECKING JOBNAME - SO USE THE ORIGINAL JQE PTR.
*  THAT WAY WE CAN TEST, WHETHER WE GOT A JQA OR NOT...
         TM    SSMWKF01,SSMNOBRT   IF NO SELECTED JOB BERT
         JO    TSTJCLIM             SKIP THE NEXT 2 TESTS
         CLC   UBRWIOUT,JQEJNAME-JQE(R7)
         JE    REJWIO              IF A MATCH - REJECT - REASON=WITHOUT
RTWIT    EQU   *                   TEST FOR /*WITH MATCH
* ------------------------------------------------------------- * **
* -- NOTE - /*WITH DOES NOT CAUSE A REJECTION WHEN MATCHED - -- * **
* -- we will however turn off the with check bit in ssmqbsy  -- * **
* -- to indicate the following;                              -- * **
* --   1 - we dont need to check the condition any more.     -- * **
* --   2 - it no longer holds the job.                       -- * **
* -- (if the bit is still set when done with all other checks-- * **
* --  it was never satisfied - and that will cause a rejection! * **
* ------------------------------------------------------------- * **
         TM    SSMQBSY,SSMQWIT     IS THE WITH FLAG SET?
         JZ    TSTJCLIM            NO - GO CHECK JOB CLASS LIMITS
*  NOTE - WE ARE ONLY CHECKING JOBNAME - SO USE THE ORIGINAL JQE PTR.
*  THAT WAY WE CAN TEST, WHETHER WE GOT A JQA OR NOT...
         CLC   UBRWITH,JQEJNAME-JQE(R7) DO WE HAVE A MATCH?
         JNE   TSTJCLIM            IF NOT CHECK LIMIT BY JOBCLASS
         NI    SSMQBSY,X'FF'-SSMQWIT TURN OFF 'WITH' CHECK =SATISFIED!
TSTJCLIM EQU   *   TEST FOR LIMITS BY JOBCLASS
* WE ONLY DO THE NEXT 2 TESTS IF THE TEST JOB IS ALREADY BUSY (ACTIVE)
RTJC     TM    SSMWKF01,SSMDUMY    DID WE HAVE A DUMMY ECSA -
         JO    FINALCKS            SKIP PAST ALL ECSA VARIABLE TESTS.
         TM    SSMQBSY,SSMQJC      LIMITED BY JOB CLASS?
         JZ    RTJN                CHECK FOR LIMIT BY JOBNAME MASK.
         CLC   SSMTSTCL,JQEJCLAS-JQE(R2)  SAME CLASS?
         JNE   RTJN                 IF NOT WE DON'T CARE ABOUT IT.
         XR    R1,R1               CLEAR R1 BEFORE USING IT FOR WORK
         ICM   R1,B'0011',SSMCLSK  GET THE CLASS COUNT SO FAR
         LA    R1,1(0,R1)            UPDATE IT BY ONE
         STCM  R1,B'0011',SSMCLSK        ADN SAVE IT BACK.
         CLC   SSMCLSK,SSMCLSL     HAVE WE REACHED THE LIMIT?
         JNL   REJCLS              REJECT FOR CLASS COUNT
*
* THIS ROUTINE TESTS FOR LIMITS SET BY MASKED JOBNAMES THAT ARE ACTIVE
*  test for active job was done in previous routine
RTJN     EQU   *                   RETEST ACTIVE JOBNAME BY MASK LIM
         TM    SSMQBSY,SSMQJN      NEEED TO TEST AT ALL?
         JZ    RTUID                 IF NOT DO FINAL CHECKS CLEAN ETC.
         CLC   SSMJMHI(2),$ZEROS   IF BOTH HI AND LOW ARE ZERO
         JE    RTUID                 DON'T CHECK - THERE IS NO MASK!
* NOW DO THE LIMIT BY JOBNAME CHECK.
         XR    R4,R4               CLEAR WORK REG 4
TSTJBN1  IC    R4,SSMJMHI          GET HIGH ORDER MASK
         LTR   R4,R4               TEST IF WE HAVE A MASK TO CHECK?
         JZ    TSTJBN2             IF MASK ZERO - SKIP TESTING
         L     R1,JQEJNAME-JQE(R2)
         EX    R4,CLMJBN1          TEST 1ST 4 BYTES OF JOBNAME
*                                    AGAINST OUR MASK
         JNE   RTUID               IF NOT MATCH - EXIT NOW
TSTJBN2  IC    R4,SSMJMLO          GET LOW ORDER MASK
         LTR   R4,R4               TEST IF WE HAVE A MASK TO CHECK?
         JZ    JBNMTCH              IF NOT WE HAVE A MATCH !
         L     R1,JQEJNAME+4-JQE(R2)
         EX    R4,CLMJBN2          TEST LAST 4 BYTES OF JOBNAME
         JNE   RTUID               IF NO MATCH - EXIT NOW
JBNMTCH  XR    R1,R1
         ICM   R1,B'0011',SSMJBNK  BUMP
         LA    R1,1(0,R1)            OUR
         STCM  R1,B'0011',SSMJBNK     JOBNAME COUNT
         CLC   SSMJBNK,SSMJBNMX    OURS VS. THE MAX ?
         JNL   REJJNM               IF OURS IS NOT LOW REJECT IT.
         J     RTUID               ELSE GO DO THE FINAL SET OF TESTS
* THE NEXT TWO INSTRUCTIONS WERE 'EX' EXECUTED IN THE BLOCK ABOVE. *
CLMJBN1  CLM   R1,B'0000',SSMJMSK1
CLMJBN2  CLM   R1,B'0000',SSMJMSK2
*
*
* THIS ROUTINE TESTS FOR LIMITS SET BY MASKED USERIDS FOR ACTIVE JOBS
*
RTUID    EQU   *                   RETEST ACTIVE JOBNAME BY MASK LIM
         TM    SSMQBSY,SSMQUID     NEEED TO TEST AT ALL?
         JZ    FINALCKS              IF NOT DO FINAL CHECKS CLEAN ETC.
         CLC   SSMUMHI(2),$ZEROS   IF BOTH PARTS OF MASK ARE ZERO -
         JE    FINALCKS            THEN THERE IS NO MASK AND NO CHECK!
* NOW DO THE LIMIT BY JOBNAME CHECK.
         XR    R4,R4               CLEAR WORK REG 14
TSTUID1  IC    R4,SSMUMHI          GET HIGH ORDER MASK
         LTR   R4,R4               FIRST CHECK FOR A ZERO MASK
         JZ    TSTUID2               IF ZERO MASK TEST 2ND HALF
         L     R1,JQEUSRID-JQE(R2)
         EX    R4,CLMUID1          TEST 1ST 4 BYTES OF USER ID
*                                    AGAINST OUR MASK
         JNE   FINALCKS            IF NOT MATCH - EXIT NOW
TSTUID2  IC    R4,SSMUMLO          GET LOW ORDER MASK
         LTR   R4,R4               IS THIS MASK ZERO'ED OUT?
         JZ    UIDMTCH               IF SO WE HAVE A MATCH !
         L     R1,JQEUSRID+4-JQE(R2)
         EX    R4,CLMUID2          TEST LAST 4 BYTES OF JOBNAME
         JNE   FINALCKS            IF NO MATCH - EXIT NOW
UIDMTCH  XR    R1,R1
         ICM   R1,B'0011',SSMUIDK  BUMP
         LA    R1,1(0,R1)            OUR
         STCM  R1,B'0011',SSMUIDK     JOBNAME COUNT
         CLC   SSMUIDK,SSMUIDMX    OURS VS. THE MAX ?
         JNL   REJUID               IF OURS IS NOT LOW REJECT IT.
         J     FINALCKS            ELSE GO DO THE FINAL SET OF TESTS
* THE NEXT TWO INSTRUCTIONS WERE 'EX' EXECUTED IN THE BLOCK ABOVE. *
CLMUID1  CLM   R1,B'0000',SSMUMSK1
CLMUID2  CLM   R1,B'0000',SSMUMSK2
*
*
* ANY FINAL TESTS AND CLEANUP THAT ARE NEEDED (PER TEST JQE) GO HERE
*
FINALCKS EQU   *
         CLC   SSMJQA,$ZEROS
         JE    NORETJQA
         L     R2,SSMJQA           JUST IN CASE - RELOAD IT NOW.
         $DOGJQE ACTION=(RETURN),CBADDR=(R2)  RETURN THE JQA WE GOT
NORETJQA EQU   *                   INDICATE WE NO LONGER HAVE ONE.
         XR    R2,R2               INDICATE WE NO LONGER HAVE ONE.
         XR    R8,R8               ALSO WE HAVE NO STQNAME PTR FOR IT.
         STCM  R2,B'1111',SSMJQA   ZERO THE POINTER TO JQA 2B RETURNED
         J     NEXTJQE             END OF THE  B I G   LOOP
*
* BASIC RETURN ROUTINES -
*
X049RC4  EQU   *                   RETURN AND REJECT THE SELELCTION.
** * ------------------------------------------------------------- * **
** * -- IN THIS SECTION A JOB IS REJECTED - WE HAVE TO FREE THE -- * **
** * -- WORK AREA THE $DOGCAT GOT FOR US.                       -- * **
** * ------------------------------------------------------------- * **
         CLC   SSMCATPT,$ZEROS    IS THE POINTER ZERO ?
         JE    DOSMFRJ            IF SO, THEN NOT RETURN OF THE CAT
         L     R1,SSMCATPT        PUT POINTER IN R6 FOR DOGCAT CALL
         $DOGCAT ACTION=RETURN,CAT=(R1)
DOSMFRJ  EQU   *
** * ------------------------------------------------------------- * **
** * -- this is the smf routine for rejected jobs               -- * **
** * ------------------------------------------------------------- * **
X49SMFRJ EQU   *                   SMF REPORTING FOR REJECTED JOB.
         LTR   R10,R10             DO WE HAVE AN SSMT AREA?
         JZ    SKPSMF40              IF NOT - DEFAULT - NO SMF RECORDS
DOTST40  CLI   SSMSMFOP,SSMSMF_ALL  DO THEY WANT ALL SMF RECS
         JE    DOSMF40
         CLI   SSMSMFOP,SSMSMF_ACTION IF ACTION OR ALL, DO SMFRECS
         JE    DOSMF40
         CLI   SSMSMFOP,SSMSMF_NONE  IF DEFAULTED - NEVER DO SMF
         JE    SKPSMF40
         CLI   SSMSMFOP,SSMSMF_INPUT  INPUT ONLY
         JE    SKPSMF40                IF SO, THEN SKIP IT
*        J     DOSMF40             DEFAULT - ACTUALLY JUST FALL THRU
DOSMF40  EQU   *
         DROP  R9
         LR    R1,R3               PUT WORKAREA ADDR IN R1 FOR $CALL
         $CALL BASICSMF            GO DO BASIC SMF WORK
*
         L     R1,SSMSMFBA         GET  THE BUFFER ADDRESS
         USING STPCSMFD,R1
         LTR   R1,R1               DID WE ACTUALLY GET AN SMF BUFFER
         JZ    SKPSMF40            IF BAD START - DON'T TRY TO FINISH
*
         MVC   SMFXLEN,=AL2(SMFXLS40)  LENGTH OF ENTIRE SUB TYPED REC.
         MVC   SMFXSTY,=XL2'0040'  MOVE THE SUBTYPE NUMBER
         MVC   SMFD8STY,=XL2'0040' MOVE THE SUBTYPE NUMBER
         MVC   SMFD8S40,=XL2'0040'       TWICE...
         MVC   LENTEC01,=AL2(SMFLNS40) LENGTH OF SUB TYPED DATA ONLY
* SMF SUBTYPE = 40 = REJECTION RECORD ... NOW DO SPECIFIC FIELDS
         MVC   SMFD80JI,JQEJBNUM   MOVE THE JOB NUMBER
         MVC   SMFD80JN,JQEJNAME   MOVE THE JOB NAME
         MVC   SMFD80SI,SSMSID     MOVE THE SYSID
         MVC   SMFD80TE,$NDENAME   MOVE THE NODE NAME
         MVC   SMFD80GN,$XCFGPNM   MOVE THE GROUP NAME
         MVC   SMFD80XT,$CLOCK     MOVE THE STCK TIME
* FINALLY FILL THE DELAY REASON FROM OUR TABLE... WATCH TABLE MAINT...
         TM    SSMWKF01,SSMGENWT   IS IT A GENERAL WAIT - NO JQEX?
         JO    DOGWNJX             DO GENERAL WAITN - NO JQEX REASON
         TM    SSMWKF01,SSMNOBRT   IF NO SELECTED JOB BERT
         JO    NOBRTRC4             -  THEN UNKNOWN OR AFTER
         XR    R8,R8
         IC    R8,UBRDLAYS         UBRDLAYS = HEX DELAY CODE
         MHI   R8,12               MULTIPLY BY 12 TO GET THE DISPLACMNT
         LA    R7,DLAYTAB(R8)      POINT TO "OUR" DELAY REASON.
         LA    R8,DLAYTABE         POINT TO END OF TABLE
         CR    R7,R8               ARE WE PAST END OF TABLE (BAD INDEX)
         JNH   DOFNDRSN
NOBRTRC4 MVC   SMFD80ME,=CL12'BEFORE/UNKWN'
         J     SMF40OK
DOGWNJX  MVC   SMFD80ME,=CL12'GENERAL WAIT'
         J     SMF40OK
DOFNDRSN MVC   SMFD80ME,0(R7)      ELSE MOVE THE TABLED REASON NOW
SMF40OK  EQU   *
         $QUESMFB (R1)             WRITE THE RECORD NOW.
SKPSMF40 LTR   R3,R3               DO WE HAVE A WORK AREA
         JZ    NOWYET              NO WORK YET - JUMP THERE...
         L     R4,SSMXPLPT         RESTORE XPL POINTER  NOW.
NOWYET   EQU   *                   IF NO WORKAREA YET, XPL SHOULD BE OK
         USING XPL,R4
         OI    X049RESP,X049SKIP   GIVE THIS ONE A SKIP - DON'T DO IT!
*        XR    R6,R6               RESET FINAL RC TO ZERO.
         J     TSTRTJQA            JUMP INTO RC0 ROUTINES TO DO RTNS.
X049RC0  EQU   *
         XC    SSMCATPT,SSMCATPT   ALWAYS CLEAR CAT PTR (THIS IS THE
*                                  'NO MORE CATS' ROUTINE) X049RC0
         LTR   R3,R3               DO WE HAVE A WORK AREA?
         JZ    RELWDONE
         TM    SSMQBSY,SSMQWIT     IS A WITH FLAG STILL SET IN SSMQBSY
         JNZ   REJWITH              IF IT IS, IT WAS NEVER SATISFIED..
* /*AFTER CAUSES REJECTION AND AFTER SATISFIED FLAGS TO BE SET -
* IF THE OBJECT OF AFTER IS NOT STILL RUNNING, WE SIMPLY FALL THRU
* SO RETEST TO SEE IF WE ARE WAITING ON A /*AFTER, AND IF SO,
* IS THE OPTION SET FOR SSMBEAFT_POS, AND IF SO, IS IT SATISFIED.
*   OTHERWISE WE CAN STILL FAIL FOR A NO VERIFIED /*AFTER
TSTFNAFT EQU   *                   TEST FOR FINAL /*AFTER REJECTIONS
         TM    UBRMFLAG,UBRAFT     IS A /*AFTER IN 'THE CHOSEN' JOB?
         JZ    TSTFNBEF                -NO GO TEST /*BEFOERE STUFF
         CLI   SSMBEAFT,SSMBEAFT_PREMOD IS IT STILL THE BAD OLD DAYS?
         JE    TSTFNBEF                  - IF PREMOD - LET IT GO...
         CLI   SSMBEAFT,SSMBEAFT_POS  IS THIS POSITIVE VERIFICATION?
*SGM001- DISABLE BEAFT_POS OPTIONS - COMMENTED ORIGINAL 'JNE TSTFNBEF'
*        JNE   TSTFNBEF                 IF NOT POSITIVE LET IT GO
*SGM001- ADDED HARD BRANCH TO TSTFNBEF (SAME AS PREMOD)
         J     TSTFNBEF                  - IF PREMOD - LET IT GO...
*SGM001- COMENTED NEXT 2 UNREACHABLE LINES OF CODE.
* TSFNA2 TM    UBRMSCF1,UBRSAAFT   IS THE AFTER MARKED POSITIVE?
*        JZ    REJAFT2              REJECT, BUT DON'T MARK POSITIVE.
* ELSE FALL THRU, LET THEM RUN....
TSTFNBEF EQU   *                   FINAL TEST FOR /*BEFORE JOBNAME
         TM    UBRMFLAG,UBRBEF     IS A /*AFTER IN 'THE CHOSEN' JOB?
         JZ    ACCEPTIT                -NO proceed to next step...
*SGM001- COMENTED NEXT 4 LINES - IGNORE TEST FOR POS OPTION
*        TM    SSMBEAFT,SSMBEAFT_POS  IS THIS POSITIVE VERIFICATION?
*        JNE   ACCEPTIT                IF NOT, JUST CONT.  ACCPET IT.
*                                        ELSE TEST FOR BEF. SATISFIED
*        TM    UBRMSCF1,UBRSABEF   HAS THE BEFORE BEEN SATISFIED?
*        JZ    REJBEF2             IF NOT,REJECT BEFORE (&SET NO FLG)
* THAT WAS THE LAST CHECK - IF WE FELL THROUGH - THE JQE IS ACCEPTED!
ACCEPTIT MVI   UBRDLAYS,UBRDLSEL       FLAG THIS JQE AS SELECTED.
         LA    R6,0(0,0)           SET A ZERO IN R6 FOR RETURN CODE
*                                    WE NEED TO REJECT THE SELECTION.
X49SMFR1 EQU   *                   SMF REPORTING FOR REJECTED JOB.
         CLI   SSMSMFOP,SSMSMF_ALL DID THEY WANT ALL SMF RECORDS?
         JE    DOSMF41
         CLI   SSMSMFOP,SSMSMF_ACTION DID THEY WANT ACTION RECORDS?
         JE    DOSMF41
         CLI   SSMSMFOP,SSMSMF_NONE IF THEY DIDN'T SPECIFY - SKIP IT
         JE    SKPSMF41
         CLI   SSMSMFOP,SSMSMF_INPUT  INPUT ONLY
         JE    SKPSMF41                IF SO, THEN SKIP IT
DOSMF41  LR    R1,R3               POINT TO OUR WORK AREA FIRS
         $CALL BASICSMF            GO DO BASIC STUFF FIRST
*
*
         L     R1,SSMSMFBA         SAVE THE BUFFER ADDRESS
         USING STPCSMFD,R1
         LTR   R1,R1
         JZ    SKPSMF41            IF BAD START - DON'T TRY TO FINISH
*
         MVC   SMFXLEN,=AL2(SMFXLS41)  ENTIRE LENGTH OF A TYPE41 REC.
         MVC   SMFXSTY,=X'0041'    JOB PASSED SUB-TYPE SMF RECORD
         MVC   SMFD8STY,=X'0041'   JOB PASSED SUB-TYPE SMF RECORD
         MVC   SMFD8S41,=X'0041'   SUBTYPE DATA IS REPEATED
         MVC   LENTEC01,=AL2(SMFLNS41)  LENGTH OF SUB - TYPED DATA
* NOW HADLE THE DETAILED DATA
         MVC   SMFD81IN,JQEINPND
         MVC   SMFD81XN,$OWNNODE
         MVC   SMFD81CD,JQXCRTME
         MVC   SMFD81JC,JQEJCLAS
         MVC   SMFD81JI,JQEJBNUM
         MVC   SMFD81JN,JQEJNAME
         MVC   SMFD81RI,JQEUSRID
         MVC   SMFD81SL,JQESECLB
         MVC   SMFD81XT,$CLOCK
         MVC   SMFD81SE,JQASCHE
         MVC   SMFD81TE,$OWNNODE
         MVC   SMFD81GN,$XCFGPNM
         $QUESMFB (R1)
SKPSMF41 EQU   *
TSTRTJQA EQU   *
         CLC   SSMJQA,$ZEROS       IS THERE AN ERRANT JQA TO BE RETURND
         JE    TSTRTNWK
         L     R2,SSMJQA
         $DOGJQE ACTION=(RETURN),CBADDR=(R2)  RETURN IT IF WE HAVE IT!
TSTRTNWK XR    R2,R2
*        MVC   SSMJQA,$ZEROS       GOOD FORM, BUT WE WILL RELEASE BELOW
         LTR   R3,R3               TEST PTR TO WORK AREA - GOT ONE?
         JZ    RELWDONE            IF ZERO, DON'T RELEAST IT.
*        L     R3,SSMWADDR         GET THE ORIGINAL ADDRESS GIVEN TO US
         CLC   0(4,R3),=C'SSMW'    IF NOT OUR EYECATCHER......
         JNE   RELWDONE                 JUST LEAVE IT ALONE.
*
         $RETWORK (R3)
         LTR   R15,R15
         JZ    RELWDONE            RELEASE WAS DONE - BE HAPPY !
* NOTE - IT IS OK TO USE THE WORK AREA TO FORMAT A MESSAGE - IF THE
* WORK AREA WAS NOT RELEASED ! THAT'S MY STORY, I'M STICKING TO IT.
*
         LR    R0,R15              ELSE GET THE RETURN CODE
         LA    R15,8(R0,R0)        SHOW A LEN OF DIGITS TO DISPLAY
         BAS   R9,TOHEX
         MVC   MSGRW1F1,TOHEXFLD
         $WTO  MSGRW1,L'MSGRW1,JOB=YES,ROUTE=$ALL
RELWDONE EQU   *
         XR    R6,R6
JUSTGO   $RETURN RC=(R6)

ERNOWA   EQU   *                   NO WORK AREA COULD BE ACQUIRED
         LR    R0,R15              WHERE ID DATA (ERROR CODE?)
         LA    R15,8(0,0)          HOW LONG IS DATA TO DISPLAY?
         BAS   R9,TOHEX
         MVC   MSGGW1F,TOHEXFLD    MOVE DECODED VALUE FROM R15
         $WTO  MSGGW1,L'MSGGW1,JOB=YES,ROUTE=$ALL,WAIT=NO
         XR    R6,R6
         J     RELWDONE
** * ------------------------------------------------------------- * **
** * -- rejection routines go here - we update the rejection    -- * **
** * -- field in the stqname section of the selected job and    -- * **
** * -- then reject (rc4) the job. it is possible to issue msgs -- * **
** * -- in a rejection routine if needed.                       -- * **
** * ------------------------------------------------------------- * **
* UBRUFLAG DS    BL1              DELAY REASONS FROM OUR EXIT 49.
*
*  THE - UBRXXVRM BIT IS NEW - IT WAS UNUSED BEFORE AND WILL BE TESTED
* BEFORE TRYING TO ACCESS ANY OF THE NEW EXPANDED FIELDS.  IT IS
* SIMPLY A BIT USED FOR COMPATIBILITY AS WE EXPAND THE EXTENSIONS FOR
* NEW FUTURE FUNCTION AND ADD VRM FIELDS AT THE JES2 1.7 LEVEL.
*
*
* UBRDLWIT EQU   X'01'                /*WITH CONTENTION DELAY
* UBRDLWIO EQU   X'02'                /*WITHOUT  CONTENTION (RESUSED)
* UBRDLWFR EQU   X'03'                TIMING DELAY HOLDTIL/FOR (REUSD
* UBRDLWTL EQU   X'04'                TIMING DELAY HOLDTIL/FOR (REUSD
* UBRDLWTG EQU   X'05'                 GENERAL PURPOSE WAIT
* UBRDLDUP EQU   X'06'                HOLD/DUP   CONTENTION
* UBRDLAFT EQU   X'07                 /*AFTER    CONTENTION
* UBRDLBEF EQU   X'08'                /*BEFORE   CONTENTION
* UBRDLCTL EQU   X'09'                /*CNTL     CONTENTION
* UBRDLCLS EQU   X'0A'                CLASS LIMIT REACHED
* UBRDLJNM EQU   X'0B'                JOBNAME MASK
* UBRDLSEL EQU   X'0C'                JOB HAS BEEN SELECTED - NO DELAY
* UBRDLUID EQU   X'0D'                UID MASK LIMIT HAS BEEN REACHED
         DS    0H
* NOTE -
* NOTE - THIS IS A COPY OF THE TABLE MAINTAINED IN QBACDISP- KEEP THEM
* NOTE -  IN-SYNCH PLEASE!
* NOTE -
DLAYTAB  DC    C'JES2- NOTSEL'     HAS NOT BEEN SELECTED BY JES2 YET
         DC    C'/*WITH CARD '
         DC    C'/*WITHOUT   '
         DC    C'HOLDFOR TIMR'
         DC    C'HOLDTIL TIMR'
         DC    C'GENERAL TIMR'
         DC    C'OPEN -UNUSED'      UNSUED AT THIS TIME.
         DC    C'/*AFTER CARD'
         DC    C'/*BEFORE CRD'
         DC    C'/*CNTL CONFL'
         DC    C'CLASS LIMIT '
         DC    C'JOBNAME LIM '
         DC    C' - NONE -   '     JOB HAS BEEN SELECTED - NO DELAYS
DLAYTABE DC    C'USERID LIMIT'     MASKED/USERID LIMIT REACHED
         DS    0H
REJECTIT EQU   *                   REJECT FOR GENERAL WAIT TIME
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLWTG   INDICATE GENERAL WAIT
         J     X049RC4             JUST RETURN MAD...
REJWTT   EQU   *                   REJECT FOR WAIT UNTIL
** * ------------------------------------------------------------- * **
** * -- We are rejecting the job selection because it failed    -- * **
** * -- the holdtil time requirements.                          -- * **
** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **
** * --      (have we already set a stimer on this member?)     -- * **
** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **
** * --         Yes - that means no restart - just end -skip job-- * **
** * --         No  - a restart happened - then pretend this is -- * **
** * --               the first time entered and set a new timer-- * **
** * --               (below - answer no to question 1).        -- * **
** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **
** * --          get this member start time(stck) and save in   -- * **
** * --          ubrmmstk(index base on member number).         -- * **
** * --          Make a new sttqe and call $stimer              -- * **
** * --          set the delay reason in ubrdlays               -- * **
** * --          finally - reject the job - do not select.      -- * **
** * ------------------------------------------------------------- * **
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
**       CLI   UBRDLAYS,UBRDLWTL   HAS THIS DELAY TYPE ALREADY BEEN SET
**       JE    X049RC4             IF SO, DONT BOTHER RESETTING
*
*
** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **
**** USING HCT,R11 *** MAINTASK ***
         XR    R1,R1              clear r1 before loading jes2 member #
         IC    R1,$SIDBUSY        GET OUR MEMBER NUMBER
         CHI   R1,8                ONLY SET STIMERS ON FIRST 8 MEMBERS
         JH    X049RC4
         XR    R2,R2              CLEAR R2 - TO BUILD OUR MEMBER MASK
         LA    R2,1(R0,R0)        PUT A 1 IN R2
         LA    R15,UBRMMSTK        FIRST ENTRY - TABLE OF STCK'S
LOPMSKT  BCT   R1,BLDMSKT
         J     MSKBILTT           THE MASK IS NOW BUILT
BLDMSKT  SLL   R2,1               SLIDE TO THE LEFT ONE.
         LA    R15,4(R0,R15)        BUMP POINTER TO NEXT STCK ENTRY
         J     LOPMSKT
MSKBILTT EQU   *                  THE MASK BIT IS NOW SET IN R2.
         $GETADDR CB=ASCB
         USING  ASCB,R1
TMMSK    TM    UBRMMTQE,X'00'
         EX    R2,TMMSK           TEST TO SEE IF OUR BIT IS SET?!?
** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **
         JZ    SETTIMRT           IF NOT, THEN ALWAYS SET NEW STIMER
** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **
         CLC   0(4,R15),ASCBINTS-ASCB(R1) START STCK MATCH OLD STCK?
** * --         Yes - that means no restart - just end -skip job-- * **
         JE    X049RC4            THEY MATCH WE ARE DONE - REJECT IT
** * --         No  - a restart happened - then pretend this is -- * **
** * --               the first time entered and set a new timer-- * **
SETTIMRT EQU   *                  HERE WE SET A NEW STCK AND STIMER
         EX    R2,OIMSK
OIMSK    OI    UBRMMTQE,X'00'     **EXECUTED** 'OR' OUR BIT INTO MASK
         MVC   0(4,R15),ASCBINTS-ASCB(R1)  MOVE THE STCK TIME TO TABLE
         XR    R15,R15            CLEAR WORK REG R15 NOW
* IF FIRST TIME HERE - WE MUST ISSUE A STIMER SO WE WAKE UP AGAIN.
         XGR   R0,R0               CLEAR WORK REG NOW
         L     R0,UBRHLDUX         GET SATISFIED TIME IN STCK FMT
         SLLG  R1,R0,32            SHIFT R0 LEFT 32 AND SAVE IN R1
         LG    R0,$CLOCK           GET THE CURRENT TIME
         SGR   R1,R0               FUTURE TIME - CURR TIME = WAIT TIME
         XGR   R0,R0               CLEAR R0 THEN DIV. TO GET SECONDS
         DSG   R0,=FD'4096000000'  R1 = SECONDS, R0=REMAINDER
         LA    R1,1(R0,R1)         ADD A SECOND FOR ROUNDING ISSUES.
         ST    R1,SSMTQWAT         SAVE TIME FOR USE IN STIMER RTN.
         LR    R1,R3               PUT WORK AREA IN R1 FOR STIMER RTN
         $CALL STIMER              ISSUE STIM AGAINST A NEW STTQE CB
         MVI   UBRDLAYS,UBRDLWTL
         J     X049RC4             JUST RETURN MAD...
REJWFR   EQU   *                   REJECT FOR WAIT FOR
** * ------------------------------------------------------------- * **
** * -- ( SAME AS FOR ROUTINE REJWTT ABOVE)                     -- * **
** * -- We are rejecting the job selection because it failed    -- * **
** * -- THE HOLDFOR TIME REQUIREMENTS.                          -- * **
** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **
** * --      (have we already set a stimer on this member?)     -- * **
** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **
** * --         Yes - that means no restart - just end -skip job-- * **
** * --         No  - a restart happened - then pretend this is -- * **
** * --               the first time entered and set a new timer-- * **
** * --               (below - answer no to question 1).        -- * **
** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **
** * --          get this member start time(stck) and save in   -- * **
** * --          ubrmmstk(index base on member number).         -- * **
** * --          Make a new sttqe and call $stimer              -- * **
** * --          set the delay reason in ubrdlays               -- * **
** * --          finally - reject the job - do not select.      -- * **
** * ------------------------------------------------------------- * **
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
*        CLI   UBRDLAYS,UBRDLWFR   HAS WAIT FOR DELAY ALREADY BEEN SET?
*        JE    X049RC4             IF ALREADY SET JUST RETURN
*
** * -- 1 - check if our member bit is on in ubrmmtqe.          -- * **
**** USING HCT,R11 *** MAINTASK ***
         XR    R1,R1
         IC    R1,$SIDBUSY        GET OUR MEMBER NUMBER
         CHI   R1,8               IF MEMBER # IS > 8 THEN SKIP IT
         JH    X049RC4             LET THE FIRST 8 MEMBERS HANDLE IT.
         XR    R2,R2              CLEAR R2 - TO BUILD OUR MEMBER MASK
         LA    R2,1(R0,R0)        PUT A 1 IN R2
         LA    R15,UBRMMSTK        FIRST ENTRY - TABLE OF STCK'S
LOPMSKF  BCT   R1,BLDMSKF
         J     MSKBILTF           THE MASK IS NOW BUILT
BLDMSKF  SLL   R2,1               SLIDE TO THE LEFT ONE.
         LA    R15,4(R0,R15)        BUMP POINTER TO NEXT STCK ENTRY
         J     LOPMSKF
MSKBILTF EQU   *                  THE MASK BIT IS NOW SET IN R2.
         $GETADDR CB=ASCB
         USING  ASCB,R1
* NOW R2=MASK BIT, 515 => STCK ENTRY,  R1 = ASCB
TMMSKF   TM    UBRMMTQE,X'00'
         EX    R2,TMMSKF          TEST TO SEE IF OUR BIT IS SET?!?
** * --    No  - 'or' on our member bit in ubrmmtqe.            -- * **
         JZ    SETTIMRF           IF NOT, THEN ALWAYS SET NEW STIMER
** * --    Yes - does the STCK on ubrmmstk match our start time?-- * **
         CLC   0(4,R15),ASCBINTS-ASCB(R1) START STCK MATCH OLD STCK?
** * --         Yes - that means no restart - just end -skip job-- * **
         JE    X049RC4            THEY MATCH WE ARE DONE - REJECT IT
** * --         No  - a restart happened - then pretend this is -- * **
** * --               the first time entered and set a new timer-- * **
SETTIMRF EQU   *                  HERE WE SET A NEW STCK AND STIMER
         EX    R2,OIMSKF
OIMSKF   OI    UBRMMTQE,X'00'     **EXECUTED** 'OR' OUR BIT INTO MASK
         MVC   0(4,R15),ASCBINTS-ASCB(R1)  MOVE THE STCK TIME TO TABLE
         XR    R15,R15              CLEAR WORK REG R15 NOW
* IF FIRST TIME HERE - WE MUST ISSUE A STIMER SO WE WAKE UP AGAIN.
         XGR   R0,R0               CLEAR WORK REG 0 NOW
         L     R0,UBRHLDFX         GET SATISFIED TIME IN STCK FMT
         SLLG  R1,R0,32            SHIFT R0 LEFT 32 AND SAVE IN R1
         LG    R0,$CLOCK           GET THE CURRENT TIME
         SGR   R1,R0               FUTURE TIME - CURR TIME = WAIT TIME
         XGR   R0,R0               CLEAR R0 THEN DIV. TO GET SECONDS
         DSG   R0,=FD'4096000000'  R1 = SECONDS, R0=REMAINDER
         LA    R1,1(R0,R1)         ADD A SECOND FOR ROUNDING ISSUES.
         ST    R1,SSMTQWAT         SAVE TIME FOR USE IN STIMER RTN.
         LR    R1,R3               PUT WORK AREA IN R1 FOR STIMER RTN
         $CALL STIMER              ISSUE STIM AGAINST A NEW STTQE CB
*                                  FINALLY FALL THRU AND SET DELAY RSN
         MVI   UBRDLAYS,UBRDLWFR
         J     X049RC4             JUST RETURN MAD...
*SGM001- DELETED REJAFT ROUTINE - IT USED TO SET A 'POSITIVE' FLAG.
* REJAFT2 IS THE SAME AS REJAFT, BUT DOES NOT SET THE POSITIVE MATCH
* WE REJ ECT T HE JOB, AND HAVE NOT YET SEEN THE AFTER JOBNAME...
REJAFT2  EQU   *                   REJECT FOR /*AFTER CONFLICT
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLAFT
         J     X049RC4             JUST RETURN MAD...
*SGM001- DELETED REJBEF ROUTINE - IT USED TO SET A 'POSITIVE' FLAG.
* REJAFT2 IS THE SAME AS REJAFT, BUT DOES NOT SET THE POSITIVE MATCH
REJBEF2  EQU   *                   REJECT FOR BEFORE CONFLICT
         TM    SSMWKF01,SSMNOBRT   DO WE HAVE A JQEX(BERT) FOR REJ JOB?
         JO    X049RC4               IF NOT, THEN JUST REJECT IT
         TM    UBRUFLAG,UBRXXVRM      BUT IF IT IS ALSO THE NEW
         JZ    X049RC4                  FORMAT, THEN UPDATE THE
         MVI   UBRDLAYS,UBRDLBEF          REJECTION CODE BEFORE REJ.
         J     X049RC4             JUST RETURN MAD...
REJCTL   EQU   *                   REJECT FOR CNTL CONFLICT
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         LM    R4,R5,SAVE2REG      RESTORE WORK REGS 4 AND 5 FIRST
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLCTL
         J     X049RC4             JUST RETURN MAD...
REJWIO   EQU   *                   REJECT FOR WITHOUT CONFLICT
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLWIO   INDICATE WITHOUT CONFLICT
         J     X049RC4             JUST RETURN MAD...
REJCLS   EQU   *                   REJECT FOR WAIT UNTIL
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLCLS    CLASS LIMIT REACHED
         J     X049RC4             JUST RETURN MAD...
REJJNM   EQU   *                   REJECT FOR WAIT UNTIL
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4              JOBNAME MASK LIMIT REACHED.
         MVI   UBRDLAYS,UBRDLJNM
         J     X049RC4             JUST RETURN MAD...
REJUID   EQU   *                   REJECT FOR WAIT UNTIL
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4              JOBNAME MASK LIMIT REACHED.
         MVI   UBRDLAYS,UBRDLUID
         J     X049RC4             JUST RETURN MAD...
REJWITH  EQU   *                   REJECT FOR WAIT UNTIL
         LTR   R6,R6               DO WE EVEN HAVE A JQEX?
         JZ    X049RC4              IF NOT JUST END
         TM    UBRUFLAG,UBRXXVRM   NEW FORMAT - OR OLD?
         JZ    X049RC4             IF OLD - JUST GO BACK NOW.
         MVI   UBRDLAYS,UBRDLWIT   /*WITH WAS NOT SATISFIED.
         J     X049RC4             JUST RETURN MAD...
*
** * ------------------------------------------------------------- * **
** * --  tohex -  general use routine covert hex values to      -- * **
** * --  readable hex values - ie x'23C8' ==> c'23c8'           -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
TOHEX    EQU   *                   SHORT ROUTINE, FORMAT HEX FOR DISP.
         SRDL  R0,4                ISOLATE 4 BITS / TIME
         SRL   R1,28               RIGHT JUSTIFY 4 BITS
         CHI   R1,9                CHECK 0-9 VS A-F
         BH    TOHEXSKP            HIGHTER? - DON'T ADJUST
         LA    R1,C'0'-C'A'+10(,R1)  ADJUST FOR EBCIDIC CHARS
TOHEXSKP LA    R1,C'A'-10(,R1)     FINALLY MAKE IT PRINTABLE
         STC   R1,TOHEXFLD-1(R15)  SAVE RESULT INOT TMP FIELD
         BCT   R15,TOHEX           LOOP TIL DONE
         BR    R9                  RETURN WHEN DONE.

** * ------------------------------------------------------------- * **
** * -- basicsmf routine here - get buffer for an smf record    -- * **
** * -- and load it up with all the info we can in this routine -- * **
** * ------------------------------------------------------------- * **
BASICSMF $SAVE
         LR    R3,R1               SET BASE FOR OUR WORKAREA
         LR    R12,R15             SET LOCAL BASE
         USING BASICSMF,R12        SET OUR BASE
         USING HCT,R11             SET BASE FOR HCT
         USING SSM49WRK,R3         BASE FOR THE WORK AREA
         L     R10,ECSAPTR         GET THE ECSA PTR OUT OF WORK AREA
         USING SSMTB,R10           BASE FOR THE ECSA AREA
         CLI   SSMSMFOP,SSMSMF_NONE  NEVER USE SMF RECORDING?
         JE    BSRC04
* WE ALSO NEED PACKED UNSIGNED 1/100TH SECONDS STYLE TIME X'HHMMSSTH'
*TIMEISOK LG   R1,$CLOCK           GET ENTIRE STAMP
*        XGR   R0,R0               CLEAR WORK
*        DLG   R0,=FD'353894400000000' DIVIDE BY DAYS
* DAYS SINCE 1900 ARE IN R1(DATE) ; REMAINDER = TIME IN R0 IS CLOCKTICS
*        LGR   R1,R0               TIME IS NOW IN R1
*        XGR   R0,R0               CLEAR R0 AGAIN
*
*        DLG   R0,=FD'40960000'    =1/100TH SECONDS
*        ST    R1,SSMDBL2          SAVE TIME IN SSMDLB2 FOR LATER
*
* TIME IS READY - WE STILL NEED PACKED X'1YYDDD' FORMAT DATE.
*
* UNFORTUNATELY $STCK CONVERT ONLY GIVES TIME AS HHMMSS NO 1/10THS
*
*        $STCK STCK=$CLOCK,CONVERT=YES,ADDR=SSMDBL3
*  PACKED DATE IS IN SSMDBL3+0(4)  = X'00YYDDDF'
*
         $STCK ADDR=SSMDBL2        GET THE STCK VALUE
         LM    R0,R1,SSMDBL2       TIME IN REGS TO PASS TO CONVERSION
        $CALL  HCNVTIME             GO DO THE CONVERSION TO .01 SECS.
         STM   R0,R1,SSMDBL2       SSMDBL2 NOW HAS DATE AND TIME IN A
*                                     FORMAT THE IS GOOD FOR SMF HDRS.
*
*
*
*
* NEXT GET AN SMF BUFFER AND FILL IT UP.
         XC    SSMSMFBA,SSMSMFBA   CLEAR THE BUFFER ADDR.
         $GETSMFB  WAIT=NO
         JZ    BSRC04              BAD RETURN - JUST EXIT IF NO BUFFER
         LTR   R1,R1                 but experience shows differently!
         BZ    BSRC04
         ST    R1,SSMSMFBA         SAVE THE BUFFER ADDRESS
         USING STPCSMFD,R1
         XC    SMFXSEG,SMFXSEG     SEGMENT IS ALWAYS ZEROS
         MVI   SMFXFLG,B'01011110'  INDICATE WE ARE USING SUBTYPES.
         MVC   SMFXRTY,SSMSMFNM    MOVE THE SPECIFIED SMF NUMBER
         MVC   SMFXTME,SSMDBL2         TIME OF DAY IN 1/100TH OF A SEC
         MVC   SMFXDTE,SSMDBL2+4        & DATE IN PACKED (CENTURY) FMT.
*
         MVC   SMFXSID,SSMSID      MOVE SYSTEM ID (FROM WORK AREA)
         MVI   SMFXSSI,X'40'       CLEAR THE XXI AREA
         MVC   SMFXSSI+1(L'SMFXSSI-1),SMFXSSI      fix a bad ripple!
         MVI   SMFXNUMT+1,X'02'    WE ALWAYS HAVE JUST 2 TRIPLETS
         MVC   SMFXRESV,=AL2(SMFD8SSD) SELF-DEFINING SECTION LENGTH
**
         MVC   OFFPRD01,=AL4(PRDOFS) OFFSET FROM RDW TO PROD. SECT.
         MVC   LENPRD01,=AL2(PRDLENS) PRD. SECTION LENGTH
         MVC   NUMPRD01,=X'0001'   # OF PRODUCT SECTIONS - ALWAYS 1
**
         MVC   OFFTEC01,=AL4(STDOFFS) OFFSET FROM RDW TO SUBTYPED DATA
*        MVC   LENTEC01,=AL2(xxxxxxx)   varies -set when filled in
         MVC   NUMTEC01,=X'0001'   # OF SUBTYPED SECTIONS = 1
* PRODUCT SECTION GETS FILLED IN NEXT
         MVC   SMFD8SVR,=X'00010700'  THE VRM NUMBER WE USE WITH 1.7
         MVC   SMFD8SID,=C'SHARED SPOOL MOD'
* ALL OTHER FIELDS ARE SUBTYPE SPECIFIC
         XR    R15,R15
BSRC00   $RETURN RC=(15)            DONE - GO HOME
BSRC04   LA    R15,4(R0,R0)         LOAD A BAD RETURN VALUE
         XC    SSMSMFBA,SSMSMFBA   ENSURE WE HAVE NO BUF ADDR
         J     BSRC00
** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * -- fixed data area go here                                 -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
MSGRW1   $MSG  949,'STSCX49A ERROR: UNABLE TO RELEASE WORK AREA RC: FFFX
               FFFFF.'
MSGRW1F1 EQU   *-9,8               WHERE TO SAVE R15 VALUE
MSGGW1   $MSG  949,'STSCX49A ERROR: UNABLE TO OBTAIN A WORK AREA RC:XXXX
               XXXXX.'
MSGGW1F  EQU   *-9,8               WHERE TO SAVE R15 VALUE BEFORE WTO
MSGNO$SJ $MSG  949,'STSCX49A - $SJ COMMANDS ARE CURRENTLY DISALLOWED.'
MSGNOBRT $MSG  949,'STSCX49A - ERROR LOCATING STQNAME DISPLACEMENT.'
                LTORG
*
** * ------------------------------------------------------------- * **
** * --                 $ S T I M E R   R T N                    - * **
** * --  This routine is passed the address of our work area.    - * **
** * -- From the work area we locate the PCE address (which was  - * **
** * -- filled in from the ECSA SSMT area), and a time filed     - * **
** * -- with time in seconds.  If either field is zero, just     - * **
** * -- return with no action.  Otherwise obtain ($gethp) a      - * **
** * -- storage area for a new STTQE control block; fill in the  - * **
** * -- time and PCE pointer info - and finally insert it into   - * **
** * -- the doubly linked STTQE chain that is pointed to by      - * **
** * -- the ecsa area - also pointed to by the work area.        - * **
** * --  Finally a $STIMER macro is issued against the TQE field - * **
** * -- embedded in the STTQE control block, and we return to    - * **
** * -- our caller.  The PCE code will eventually release the    - * **
** * -- STTQE when timer has poped.                              - * **
** * --                                                          - * **
** * ------------------------------------------------------------- * **
STIMER   $SAVE
         LR    R3,R1               SET BASE FOR OUR WORKAREA
         LR    R12,R15             SET LOCAL BASE
         USING STIMER,R12          SET OUR BASE
         USING SSM49WRK,R3         BASE FOR THE WORK AREA
         L     R10,ECSAPTR         GET THE ECSA PTR OUT OF WORK AREA
         USING SSMTB,R10           BASE FOR THE ECSA AREA
* NOW CHECK TO SEE IF WE HAVE A TIME VALUE IN THE WORK AREA.
         CLC   SSMTQWAT,$ZEROS     IS THE TIMER ZEROS?
         JE    STRC00              IF SO JUST RETURN NOW
         LTR   R10,R10             DID WE HAVE AN ECSA AREA PTR?
         JZ    STRC00               IF NOT, THEN END QUICKLY
         CLC   SSMUPCEC,$ZEROS     IS THE PCE ADDRESSS ZEROS?
         JE    STRC00               ALSO, IF TRUE WE END NOW.

* NOW WE GET STORAGE FOR OUR NEW STTQE CONTROL BLOCK

         $GETHP TYPE=GET,CELL=(R6),VERSIZE=STTQLEN

* WE SHOULD NOW HAVE AN STTQE CONTROL BLOCK POINTED TO BY R6

         USING STTQE,R6            BASE OUR NEWEST CONTROL BLOCK
         XC    STTQE(STTQLEN),STTQE  ZERO THE ENTIRE PUPPY OUT NOW
         MVC   STTQTQE+TQETIME(4),SSMTQWAT  MOVE THE TIME TO WAIT
         MVC   STTQTQE+TQEPCE(4),SSMUPCEC  MOVE PTR TO PCE TO BE POSTED
         XC    SSMTQWAT,SSMTQWAT   CLEAR THE WAIT TIME IN WORKAREA

* TQE PORTION IS NOW FILLED IN - TIME TO INSERT INTO THE CHAIN *

* A NOTE ABOUT SERIALIZATION - WE ONLY ACCESS (UPDATE AND READ) THESE
* STTQE CB'S FROM JES2 MAINTASK EXITS.  MAINTASK EXITS ARE BY
* DEFINITION ALREADY SERIALIZED, SO NO OTHER ENQUE TECHNIQUE IS NEEDED.
         L     R7,SSMTQCB1         R7 = OUR FIRST STTQE
         LTR   R7,R7                DO WE HAVE ONE YET?
         JZ    FIRSTCB                IF NOT HANDLE THE SPECIAL COND.

         CLC   STTQBK-STTQE(4,R7),$ZEROS    BKWD POINTER ZERO FOR #1 ?
*        CLC   4(4,R7),$ZEROS       IS BKWD PTR ZERO FOR FIRST CB?
         JNE   ABORTTQE             IF NOT WE HAVE A PROBLEM QUIT NOW

         ST    R7,STTQFP           SAVE ADDR OF OLD FIRST AS FWD PTR
         ST    R6,STTQBK-STTQE(0,7) SAVE ADDR OF NEW FIRST AS BKW PTR
*        ST    R6,4(R7)            SAVE ADDR OF NEW 1ST CB AS BKWD PTR
*                                   IN OLD FIRST CB
*
FIRSTCB  ST    R6,SSMTQCB1         UPDATE THE ECSA POINTER TO QUEUE
         LA    R8,STTQTQE          GET ADDR OF THE EMBEDDED TQE
         $STIMER (R8)
STRC00   XR    R15,R15
         $RETURN RC=(15)            DONE - GO HOME
*
ABORTTQE EQU   *                   ONLY IF IT IS NOT POSSIBLE...
         $GETHP TYPE=FREE,CELL=(R6)
         J     STRC00

** * ------------------------------------------------------------- * **
** * --                                                         -- * **
** * -- our work area dsect goes here                           -- * **
** * --                                                         -- * **
** * ------------------------------------------------------------- * **
SSM49WRK DSECT
SSMXP    DS    XL4                 ID FROM $GETWORK = SSMW
SSMXPLPT DS    XL4                 POINTER SAVE AREA FOR THE XPL LIST
SSMJQA   DS    XL4                 ADDRESS OF JQA TO BE RETURNED OR 0
*SSMWADDR DS   XL4                 ADDRESS OF RETURNED WORK AREA
*
* WE MUST HAVE **EXACTLY** 16 BYTES PRECEEDING THE NTNAMEWK AREA
* THIS WAY WE CAN ENSURE DOUBLE WORD ALIGNMENT WHETHER IT EXISTS OR NOT
*
*                                      DOUBLE WORD ALIGNMENT
SSMDBLWD EQU   *,8                 TARGET FOR $STCK (NEEDS A DBLWORD)
ECSAPTR  EQU   *+8,4               PTR TO ECSA (REUSING NTNAMEWK AREA)
SSMUIDK  EQU   *+12,2              COUNT OF ALLOWED NAMES
SSMCLSL  EQU   *+14,2               CLASS LIMIT MAX
*
NTNAMEWK DS    CL16                NAME VALUE FOR N/T PAIR LOOKUP
*
TOHEXFLD EQU   *,8                 USED TO CNVT HEX TO CHAR.
SSMJMSK1 EQU   *,4
SSMJMSK2 EQU   *+4,4
SAVE2REG EQU   *+8,8               2 REG SAVE AREA
*
NTTOKNWK DS    CL16                TOKEN VALUE RETURNED FROM LOOKUP
*
SSMDBL2  DS    D                   WORK AREA FOR TIME ROUTINES
SSMDBL3  DS    D                   WORK AREA FOR TIME ROUTINES
SSMUMSK1 DS    CL4                 MASK FOR USERID LIMITS
SSMUMSK2 DS    CL4                 MASK FOR USERID LIMITS
SSMSID   DS    CL4                 SYSTEM ID - USED BY SMF FORMATING
SSMSMFBA DS    F                   BUFFER ADDRESS - OR - STIMER TIME
SSMJQAD  DS    F                   JQA DISP TO BERT (SAVED HERE)
SSMTQWAT DS    F                   WAIT TIME IN SECONDS FOR STIMER RTN
SSMCATPT DS    F                   FIRST $CAT ADDR FROM $DOGCAT
*
SSMTIMEP DS    PL6                 TIME IN PACKED FORMAT FOR SMF
SSMWKF01 DS    XL1                 FLAG BYTE
SSMDUMY  EQU   B'10000000'         DUMMY ECSA IS BEING USED
SSMDISA  EQU   B'01000000'         DISALLOW $SJ COMMAND
SSMNOBRT EQU   B'00100000'         NO BERT FOUND FOR SELECTED JOB
SSMBUSY  EQU   B'00010000'         TEST JQE IS ACTIVE (BUSY RUNNING)
SSMNOTBR EQU   B'00001000'         NO BERT FOUND FOR TEST JOB
SSMGENWT EQU   B'00000100'         GENERAL WAIT - NO BERT TO USE
SSMBUSYL EQU   B'00000010'         TEST JQE IS ACTIVE ON *THIS* SYSTEM
*
SSMQBSY  DS    XL1
SSMQJC   EQU   B'10000000'         CHECK ALL ACTIVE TO COUNT BY JOBCLS
SSMQJN   EQU   B'01000000'         CHECK ALL ACTIVE AGAINST JOBNAME MSK
SSMQCNT  EQU   B'00100000'         SCAN ALL ACTIVE FOR CNTLS
SSMQWIT  EQU   B'00010000'         SCAN FOR /*WITH UNTIL MATCHED
SSMQWITO EQU   B'00001000'         SCAN FOR /*WITHOUT UNTIL REJECTED
SSMQUID  EQU   B'00000100'         SCAN AGAINST MASK FOR MATCHING UIDS
*
SSMJBNK  DS    XL2                 JOBNAME LIMIT COUNT
SSMCLSK  DS    XL2                 CLASS LIMIT COUNT
SSMTSTCL DS    XL1                 TEST CLASS TO COUNT FOR CURRENT LIMT
         DS    XL7     POTENTIAL ADJUSTMENT AREA FOR DBLWORD ALIGNMENT
SSM49LEN EQU   (((*-SSM49WRK+3)/4)*4)  LENGTH ROUNDED TO FULLWORDS
*
        $MODEND ,
         END   ,                   END OF MODULE
++SRC(STSCX19A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSCX19A TITLE 'User Exit 19-A: PROLOG (module comment block)'
*********************************************************************
*                                                                   *
*                           HASP EXIT 19A                           *
*                Initialization Statement Preprocessor              *
*                                                                   *
*  This exit processes each initialization statement before JES2    *
*  does, and before any SCAN routines are run.                      *
*                                                                   *
*  Function -                                                       *
*                                                                   *
*    This exit will determine whether the temporary SSMT control    *
*    block (accessed by name/token processing) has been previously  *
*    allocated, and if not, allocate it.                            *
*    SSM statements will later be validated, parsed and placed in   *
*    the SSMT control block by $SCANTABs (see module STSSMTBS).     *
*    Note that the temporary SSMT name/token entry is replaced by   *
*    a permanent one (including the XCF group name in the name)     *
*    in Exit 24.  This permanent name is used by the Shared Spool   *
*    Mods exits to process the initialization parms.                *
*                                                                   *
*  Entry Point -                                                    *
*                                                                   *
*    EXIT19A                                                        *
*                                                                   *
*                                                                   *
*  Attributes -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  Input Registers:                                                 *
*                                                                   *
*    R0     indication of how the input was supplied:               *
*             0         input came from HASPARM parm file           *
*             4         input came from the console                 *
*             8         input came from a previous Exit 19          *
*    R1     pointer to a 4-word list                                *
*            +0         address of initialization statement         *
*            +4         length of init statement                    *
*            +8         address of init statement to insert         *
*           +12         length of insertable init statement         *
*    R2-10  N/A                                                     *
*    R11    HCT address                                             *
*    R12    N/A                                                     *
*    R13    PCE address                                             *
*    R14    RETURN address                                          *
*    R15    ENTRY address                                           *
*                                                                   *
*  Output Registers:                                                *
*                                                                   *
*    R0-14  unchanged                                               *
*    R15:   return code                                             *
*           RC=00  = continue normally                              *
*           RC=04  = ignore other exits                             *
*           RC=08  = bypass this statement and go on                *
*           RC=12  = terminate initialization processing            *
*           RC=16  = same as RC=0, except do not substitute text    *
*                    for system symbols in init statement           *
*                                                                   *
*  Register Usage (Internal):                                       *
*                                                                   *
*    R0-8   Work registers                                          *
*    R9     Exit working storage                                    *
*    R10    SSMT storage address                                    *
*    R11    HCT address                                             *
*    R12    Base register                                           *
*    R13    PCE address                                             *
*    R14-15 Work and Linkage registers                              *
*                                                                   *
*  Note:                                                            *
*    This exit is intended for use with JES2 v1r7.                  *
*                                                                   *
*  Author:                                                          *
*    Shannon Collinson, Atlanta, GA                                 *
*                                                                   *
* REVISION HISTORY:                                                 *
*                                                                   *
*   DATE   NAME         DESCRIPTION OF CHANGE                       *
* -------- ------------ ----------------------------------------    *
* 05/10/07 s. mccolley  disable the 'beaft_pos' option and change   *
*                       comments to reflect change.                 *
*                                                                   *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'USER EXIT19A Initialization statements  -- PROLOG'
         COPY  $HASPGBL            COPY HASP GLOBALS
STSCX19A $MODULE ENVIRON=JES2,                                         X
               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='HASP EXIT19A ',                                  X
               SPLEVEL=NOCHECK,                                        X
               ASCB,                                                   X
               CVT,                                                    X
               NTASM,         Name/Token constants                     X
               PSA,           Program Save Area DSECT                  X
               RPL,                                                    X
               $CIRWORK,      Common init routine PCE work area DSECT  X
               $CMB,          Console message buffer DSECT             X
               $HASPEQU,      HASP equates                             X
               $HCCT,         Common storage communication table       X
               $HCT,          HASP control table                       X
               $PCE,          Processor control element DSECT          X
               $PSV,          Process save area DSECT                  X
               $QSE,          Shared queue control element DSECT       X
               $RDRWORK,      Reader services PCE work area DSECT      X
               $TRE,          TCB recovery element DSECT               X
               $TRX,          TCB recovery element extension DSECT     X
               $TQE,          TIMER QUEUE ELEMENT                      X
               $USERCBS,      User defined control blocks              X
               $XIT           Exit information table DSECT
         TITLE 'USER EXIT19A Initialization Statements - EXIT19A - SetuX
               p SSM control blocks'
***********************************************************************
*                                                                     *
*         EXIT19A - Installation Exit 19 routine                      *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT19A  $ENTRY BASE=(R12)          Exit routine entry point

*********************************************************************
*                                                                   *
*        Save caller's registers and establish addressabilities.    *
*                                                                   *
*********************************************************************

         USING HCT,R11              Address the HCT
*        USING BASE,R12             Our base reg - see $ENTRY above
         USING PCE,R13              Address the PCE
         $SAVE NAME=EXIT19A
         LR    R12,R15              Set base register
*        LA    R11,0(0,R11)         HCT addr already set
*        LA    R13,0(0,R13)         PCE addr already set

*********************************************************************
*                                                                   *
*        Get working storage and create SSMT Name                   *
*                                                                   *
*********************************************************************

         LA    R1,EXIT19WL         get workarea length
         LA    R1,3(,R1)           round up to word boundary
         SRL   R1,2                convert to number of words
        $GETWORK WORDS=(R1),USE=EX19,WAIT=NO,LOC=ANY,                  X
               ERRET=NOWS
         LR    R9,R1               set workarea address
         USING EXIT19W,R9          address & init our working storage
         XC    EXIT19W(EXIT19WL),EXIT19W

*********************************************************************
*                                                                   *
*        Check for an existing Token/Name pair                      *
*                                                                   *
*********************************************************************

         XC    X19TKNAM(L'X19TKNAM),X19TKNAM
         MVC   X19TKPRE,X19TKTMP   move header for token to token name
*        get current ASID from PSA
         USING PSA,0               PSA starts at location 0
         MVC   X19TKASD,PSAAOLD    store ASCB address
         DROP  R0
*
        $TOKENSR REQUEST=RETRIEVE, See if SSMT exists yet              X
               NAME=X19TKNAM,                                          X
               LEVEL=SYSTEM,                                           X
               OKRET=RETURN0       Skip if so
         EJECT
**********************************************************************
*                                                                    *
*        Obtain and initialize the SSMT                              *
*                                                                    *
**********************************************************************
         SPACE 1
*
         LA    R8,SSMTBLEN
        $GETMAIN RU,               get SSMT control block storage      X
               LV=(R8),                                                X
               SP=$SPCSAF,                                             X
               LOC=31,                                                 X
               KEY=1,                                                  X
               ZEROSTOR=YES
         LTR   R15,R15             Getmain successful?
         JNZ   NOSSMT               No, indicate error allocating stor
         SPACE 1
         LR    R10,R1              set $SSMTB addressability
         USING SSMTB,R10           ...and address our SSMT
         SPACE 1
*
*        initialize values
*
         LA    R8,SSMTBLEN         set SSMT length
         ST    R8,SSMLEN             "
         MVC   SSMEYE,=CL4'SSMT'   set SSMT id
         MVC   SSMVRM,=XL4'00010200'   set version id
         MVC   SSMUPCEK,=XL4'00010000'  1 PCE  , NOT YET ALLOCATED
*              SSMSMFNM            SMF number defaults to 0
         MVI   SSMSMFOP,SSMSMF_NONE    set SMF operation (none)
*              SSMALLWS            allow start commands defs to off (0)
         MVI   SSMBEAFT,SSMBEAFT_PREMOD  bef/aft action defs to premod
*              SSMBATIM            bef/aft time defaults to 0
*              SSMUIDMX            default UID max to 0 (no limit)
*              SSMUMASK            UID mask defaults to 0
         MVC   SSMUMSKC,=CL8'********'   default UID mask chars
*              SSMJBNMX            default Jobname max to 0 (no limit)
*              SSMJMASK            Jobname mask default to 0
         MVC   SSMJMSKC,=CL8'********'   default Jobname mask chars
*              SSMCLSOP            class feature defaults to off (0)
*
*        load class limit table with defaults
*
         LA    R8,SSMCLSLM         R8 = start of class-lim table
         LA    R7,SSMCLSNO         R7 = number of class-lim entries
         L     R6,$F4096           R6 = default class limit (4096)
LOADCLS  EQU   *
         STH   R6,0(0,R8)          store default limit in entry
         LA    R8,L'SSMCLSEN(R8)   bump to next entry
         BCT   R7,LOADCLS          decrement counter and loop
*
*        initialize and create token itself
*
         XC    X19TOKEN(X19TKLEN),X19TOKEN    clear token
         MVC   X19TKID,SSMEYE      stick SSMT in token as well
         ST    R10,X19TKADR        save $SSMTB address
         SPACE 1
        $TOKENSR REQUEST=CREATE,   Set $SSMTB address and eyecatcher inX
               NAME=X19TKNAM,       NAME/TOKEN pair                    X
               LEVEL=SYSTEM,                                           X
               PERSIST=YES,         keep around even after JES2 terms  X
               VALUE=X19TOKEN
         SPACE 1
*
* now alter the name for local jes2 main processing only - level=task!
         MVC   X19TKNAM(16),=C'SSM_LOCAL_TOKEN1'
*
*  Now we will create a name/token pair at the task level only - it is
*  available only to JES2 MAINTASK routines, but it can be specified
*  via a fixed name, not one that needs to be built.
*
*
        $TOKENSR REQUEST=CREATE,   REASSOCIATE TOKEN WITH PERMANENT    X
               NAME=X19TKNAM,         NAME                             X
               LEVEL=TASK,           TASK LEVEL ONLY !                 X
               PERSIST=NO,             it goes away with this jes2     X
               VALUE=X19TOKEN
*
         J     RETURN0             Made it through successfully!!
         EJECT
**********************************************************************
*                                                                    *
*        Set messages and return appropriately.                      *
*                                                                    *
**********************************************************************
         SPACE 1
NOWS     EQU   *
         WTO   '$HASPX19A-E: UNABLE TO GET EXIT 19 WORKING STORAGE'
         J     RETURN0
         SPACE 1
NOSSMT   EQU   *
         WTO   '$HASPX19A-E: COULD NOT ALLOCATE SSMT STORAGE'
         J     RETURN0
         SPACE 1
**********************************************************************
*                                                                    *
*        Set return codes (0 = continue, 12 = stop initialization)   *
*                                                                    *
**********************************************************************
         SPACE 1
RETURNC  EQU   *
         LA    R15,12              Indicate error return
         J     RETURN              Go return to JES2
         SPACE 1
RETURN0  EQU   *
         SLR   R15,R15             Indicate good return
         SPACE 1
RETURN   EQU   *
         LR    R2,R15              Save return code
        $RETWORK (R9)              Return workarea
         LR    R15,R2              Set return code
        $RETURN TRACE=NO,RC=(R15)  End of EXIT19A initialization
         EJECT
         TITLE 'HASP EXIT19A initialization -- Epilog ($MODEND)'

         LTORG ,

X19TKTMP DC    C'SSMTEMP-'         Start of temporary token name

        $MODEND ,
*
EXIT19W  DSECT ,                   EXIT19 workarea
X19WKID  DS    CL4                 work area id
         DS    CL4                 for alignment
*
X19TKNAM DS    CL16                SSMT Token name
         ORG   X19TKNAM
X19TKPRE DS    CL8                 Prefix for token name
X19TKASD DS    F                   Current ASCB address
X19TKPAD DS    CL4                 padding for 16-byte SYSTEM token
*
X19TOKEN DS    2D                  proper alignment
         ORG   X19TOKEN
X19TKADR DS    AL4                 address of $SSMTB--start with addr.
X19TKID  DS    CL4                 SSMT Token itself--then the id
         DS    AL4                 open
         DS    AL4                 open
X19TKLEN EQU   *-X19TOKEN          token length
*
EXIT19WL EQU   *-EXIT19W           EXIT19 workarea length
*
         END   ,                   End of STSCX19A
++SRC(STSCX24A) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSCX24A TITLE 'User Exit 24-A: PROLOG (module comment block)'
*********************************************************************
*                                                                   *
*                           HASP EXIT 24A                           *
*                        Post-Initialization                        *
*                                                                   *
*  This exit is called after all control blocks have been built but *
*  just before initialization ends.                                 *
*                                                                   *
*  Function -                                                       *
*                                                                   *
*    This exit will replace the temporary SSMT name/token pair      *
*    "name" ("SSMTEMP-"+JES2 ascb) created by exit STSC019A with    *
*    the permanent name used by other Shared Spool Mods exits       *
*    ("SSM"+JES2 XCF group name).                                   *
*    This exit will also validate the use of two SSM-table fields:  *
*    if field SSMBEAFT is not = "D" (delay) and SSMBATIM is         *
*    non-0, a message will be issued indicating that the SSMBATIM   *
*    will be ignored.                                               *
*                                                                   *
*  Entry Point -                                                    *
*                                                                   *
*    EXIT24A                                                        *
*                                                                   *
*                                                                   *
*  Attributes -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  Input Registers:                                                 *
*                                                                   *
*    R0     N/A                                                     *
*    R1     pointer to a parm list mapped by $XPL but unused here   *
*    R2-10  N/A                                                     *
*    R11    HCT address                                             *
*    R12    N/A                                                     *
*    R13    PCE address                                             *
*    R14    RETURN address                                          *
*    R15    ENTRY address                                           *
*                                                                   *
*  Output Registers:                                                *
*                                                                   *
*    R0-14  unchanged                                               *
*    R15:   return code                                             *
*           RC=00  = continue normally                              *
*           RC=04  = ignore other exits                             *
*           RC=08  = terminate initialization processing            *
*                                                                   *
*  Register Usage (Internal):                                       *
*                                                                   *
*    R0-8   Work registers                                          *
*    R9     Exit working storage                                    *
*    R10    SSMT storage address                                    *
*    R11    HCT address                                             *
*    R12    Base register                                           *
*    R13    PCE address                                             *
*    R14-15 Work and Linkage registers                              *
*                                                                   *
*  Note:                                                            *
*    This exit is intended for use with JES2 v1r7.                  *
*                                                                   *
*  Author:                                                          *
*    Shannon Collinson, Atlanta, GA                                 *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'USER EXIT24A Initialization statements  -- PROLOG'
         COPY  $HASPGBL            COPY HASP GLOBALS
STSCX24A $MODULE ENVIRON=JES2,                                         X
               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X
               RMODE=ANY,                                              X
               IBMJES2=SAMPLE,                                         X
               TITLE='HASP EXIT24A ',                                  X
               SPLEVEL=NOCHECK,                                        X
               NTASM,         Name/Token constants                     X
               PSA,           Program Save Area DSECT                  X
               $CIRWORK,      Common init routine PCE work area DSECT  X
               $HASPEQU,      HASP equates                             X
               $HCCT,         Common storage communication table       X
               $HCT,          HASP control table                       X
               $PCE,          Processor control element DSECT          X
               $PSV,          Process save area DSECT                  X
               $RDRWORK,      Reader services PCE work area DSECT      X
               $TQE,          TIMER QUEUE ELEMENT                      X
               $USERCBS,      User defined control blocks              X
               $XIT           Exit information table DSECT
         TITLE 'USER EXIT24A Post-Initialization - EXIT24A - Finalize SX
               SM control block'
***********************************************************************
*                                                                     *
*         EXIT24A - Installation Exit 24 routine                      *
*                                                                     *
***********************************************************************
         SPACE 1
EXIT24A  $ENTRY BASE=(R12)          Exit routine entry point

*********************************************************************
*                                                                   *
*        Save caller's registers and establish addressabilities.    *
*                                                                   *
*********************************************************************

         USING HCT,R11              Address the HCT
*        USING BASE,R12             Our base reg - see $ENTRY above
         USING PCE,R13              Address the PCE
         $SAVE NAME=EXIT24A
         LR    R12,R15              Set base register
*        LA    R11,0(0,R11)         HCT addr already set
*        LA    R13,0(0,R13)         PCE addr already set

*********************************************************************
*                                                                   *
*        Get working storage and create SSMT Name                   *
*                                                                   *
*********************************************************************

         LA    R1,EXIT24WL         get workarea length
         LA    R1,3(,R1)           round up to word boundary
         SRL   R1,2                convert to number of words
        $GETWORK WORDS=(R1),USE=EX24,WAIT=NO,LOC=ANY,                  X
               ERRET=NOWS
         LR    R9,R1               set workarea address
         USING EXIT24W,R9
         XC    EXIT24W(EXIT24WL),EXIT24W

*********************************************************************
*                                                                   *
*        Check for an existing permanent Token/Name pair            *
*          (possible if JES2 restart)                               *
*                                                                   *
*********************************************************************

         MVC   X24PRMNM(3),=CL3'SSM'    stick perm prefix in name
*        get XCF group name from HCCT
         L     R3,$HCCT              load HCCT location
         USING HCCT,R3                 ...and address it
         MVC   X24PRMNM+3(8),CCTGPNM    move in XCF group name
         DROP  R3
*
        $TOKENSR REQUEST=RETRIEVE, See if SSMT exists yet              X
               NAME=X24PRMNM,                                          X
               VALUE=X24TOKEN,                                         X
               LEVEL=SYSTEM,                                           X
               ERRET=TKNSWTCH      If not, switch token names immed.
         SPACE
**********************************************************************
*                                                                    *
*        Free up old SSMT and delete the token/name pair             *
*                                                                    *
**********************************************************************
         L    R1,X24TKADR          load address of old SSMT for length
         USING SSMTB,R1            address the old SSMT
         L    R2,SSMLEN            save length
        $FREMAIN RU,               free SSMT control block storage     X
               A=(R1),                                                 X
               LV=(R2),                                                X
               SP=$SPCSAF,                                             X
               KEY=1
         LTR   R15,R15             freemain successful?
         JZ    SKIPMSG                yep, skip saying unable to free
         WTO   '$HASPX24A-W: UNABLE TO FREE OLD SSMT STORAGE'
SKIPMSG  EQU   *
         DROP R1                   drop addressability
*
        $TOKENSR REQUEST=DELETE,   Kill old permanent N/T pair         X
               NAME=X24PRMNM,                                          X
               LEVEL=SYSTEM
         EJECT
**********************************************************************
*                                                                    *
*        Retrieve temporary token and switch to permanent name       *
*                                                                    *
**********************************************************************
TKNSWTCH EQU   *
*
         MVC   X24TMPNM(8),=CL8'SSMTEMP-'    stick temp id in name
*        get current ASID from PSA
         USING PSA,0               PSA starts at location 0
         MVC   X24TMPNM+8(4),PSAAOLD  store ASCB address in token name
         DROP  R0
*
        $TOKENSR REQUEST=RETRIEVE, Get SSMT token                      X
               NAME=X24TMPNM,         associated with temporary name   X
               VALUE=X24TOKEN,        and save info                    X
               LEVEL=SYSTEM,                                           X
               ERRET=BADSSMT       if not found, bad SSM Token
*
         L    R10,X24TKADR         load address of SSMT
         USING SSMTB,R10           ...and get addressability
*
         CLC   SSMEYE,=CL4'SSMT'   eyecatcher correct?
         JNE   NOTSSMT                no, not SSMT control block
         CLC   SSMVRM,=XL4'00010200'  version correct?
         JNE   WRNGVRSN               no, bad version
*
        $TOKENSR REQUEST=CREATE,   Reassociate token with permanent    X
               NAME=X24PRMNM,         name                             X
               LEVEL=SYSTEM,                                           X
               PERSIST=YES,         keep around even after JES2 terms  X
               VALUE=X24TOKEN
*
*
*
        $TOKENSR REQUEST=DELETE,   Kill temporary N/T pair             X
               NAME=X24TMPNM,                                          X
               LEVEL=SYSTEM
         EJECT
**********************************************************************
*                                                                    *
*        Validate SSMBEAFT/SSMBATIM settings                         *
*        If BEAFT^=DELAY, then any BATIM will be ignored             *
*                                                                    *
**********************************************************************
         CLC  SSMBEAFT,SSMBEAFT_DELAY   set to delay?
         JE   RETURN0              yes, no more validation needed
*
         LHI  R2,0
         CH   R2,SSMBATIM          if time = 0
         JZ   RETURN0                 hop out
*                                  else, pop out a warning msg first
         WTO   '$HASPX24A-W: SINCE BEAFTER NOT DELAY, BATIME IGNORED'
         J    RETURN0
*
         EJECT
**********************************************************************
*                                                                    *
*        Set messages and return appropriately.                      *
*                                                                    *
**********************************************************************
         SPACE 1
NOWS     EQU   *
         WTO   '$HASPX24A-E: UNABLE TO GET EXIT 24 WORKING STORAGE'
         J     RETURN0
         SPACE 1
BADSSMT  EQU   *
         WTO   '$HASPX24A-E: UNABLE TO FIND SSMT FROM NAME/TOKEN PAIR!'
         J     RETURN0
         SPACE 1
NOTSSMT  EQU   *
         WTO   '$HASPX24A-E: NAME/TOKEN RETURNED NON-SSMT CONTROL BLOCKX
               !'
         J     RETURN0
         SPACE 1
WRNGVRSN EQU   *
         WTO   '$HASPX24A-E: NAME/TOKEN RETURNED WRONG SSMT VERSION!'
         J     RETURN0
         SPACE 1
**********************************************************************
*                                                                    *
*        Set return codes (0 = continue, 8 = end initialization)     *
*                                                                    *
**********************************************************************
         SPACE 1
RETURN8  EQU   *
         LA    R15,8               Indicate error return
         J     RETURN              Go return to JES2
         SPACE 1
RETURN0  EQU   *
         SLR   R15,R15             Indicate good return
         SPACE 1
**********************************************************************
*                                                                    *
*        Return to JES2                                              *
*                                                                    *
**********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    R2,R15              Save return code
        $RETWORK (R9)              Return workarea
         LR    R15,R2              Set return code
        $RETURN TRACE=NO,RC=(R15)  End of EXIT24A initialization
         EJECT
         TITLE 'HASP EXIT24A initialization -- Epilog ($MODEND)'

         LTORG ,

X24TKTMP DC    C'SSMTEMP-'         Start of temporary token name

        $MODEND ,
*
EXIT24W  DSECT ,                   EXIT24 workarea
X24WKID  DS    CL4                 work area id
         DS    CL4                 for alignment
*
X24PRMNM DS    CL16                SSMT permanent token name
X24TMPNM DS    CL16                SSMT temporary token name
*
X24TOKEN DS    2D                  proper alignment
         ORG   X24TOKEN
X24TKADR DS    AL4                 address of $SSMTB-- is first
X24TKID  DS    CL4                 SSMT Token itself--then verifiy id
         DS    AL4                 open
         DS    AL4                 open
X24TKLEN EQU   *-X24TOKEN          token length
*
EXIT24WL EQU   *-EXIT24W           EXIT24 workarea length
*
         END   ,                   End of STSCX24A
++SRC(STSSMTBS) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
STSSMTBS TITLE 'SSM Tables: PROLOG (module comment block)'
*********************************************************************
*                                                                   *
*                              STSSMTBS                             *
*                SSM Control Statement validation tables            *
*                                                                   *
*  This module contains the user scan tables that process the SSM   *
*  control statements.  It also contains any pre- and post-scan     *
*  exits called by those tables.                                    *
*                                                                   *
*  Function -                                                       *
*                                                                   *
*    Process all Shared Spool Mods initialization, set and display  *
*    commands.                                                      *
*                                                                   *
*  Entry Point -                                                    *
*                                                                   *
*    STSSMTBS                                                       *
*                                                                   *
*                                                                   *
*  Attributes -                                                     *
*                                                                   *
*    AC=1  AMODE=31  RMODE=ANY                                      *
*                                                                   *
*                                                                   *
*  Input Registers:                                                 *
*                                                                   *
*    N/A for the most part--check pre/post scan routines            *
*                                                                   *
*  Output Registers:                                                *
*                                                                   *
*    N/A for the most part--check pre/post scan routines            *
*                                                                   *
*  Register Usage conventions--may differ for specific routines:    *
*                                                                   *
*    R0-8   Work registers                                          *
*    R9     SSMT address                                            *
*    R10    SCWA storage address                                    *
*    R11    HCT address                                             *
*    R12    Base register if used                                   *
*    R13    PCE address                                             *
*    R14-15 Work and Linkage registers                              *
*                                                                   *
*  Note:                                                            *
*    This exit is intended for use with JES2 v1r7.                  *
*                                                                   *
*  Author:                                                          *
*    Shannon Collinson, Atlanta, GA                                 *
*********************************************************************
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *-     THE MODS ON THIS TAPE HAVE BEEN USED SUCCESSFULLY AND TO THE-*
* *-  BEST OF OUR KNOWLEDGE THEY ARE OPERATIONAL, HOWEVER NO WARRANTY-*
* *-  IS MADE TO THE ACCURACY OF THE MODS AND NO RESPONSIBILITY IS   -*
* *-  ASSUMED FOR ANY MODIFICATION DIRECTLY OR INDIRECTLY CAUSED BY  -*
* *-  THE USE OF THE MODIFICATIONS.  IT IS THE USERS RESPONSIBILITY  -*
* *-  TO EVALUATE THE USEFULLNESS OF THE MATERIAL.                   -*
* *-                                                                 -*
* *-     WE DO NOT GUARANTEE TO KEEP ANY MATERIAL PROVIDED UP TO     -*
* *-  DATE, NOR DO WE GUARANTEE TO PROVIDE ANY CORRECTIONS OR        -*
* *-  EXTENSIONS MADE IN THE FUTURE.                                 -*
* *-                                                                 -*
* *-*-*-----------------------------------------------------------*-*-*
         TITLE 'SSM Tables -- PROLOG'
         COPY  $HASPGBL            COPY HASP GLOBALS
STSSMTBS $MODULE ENVIRON=JES2,                                         X
               SYSP=(GEN,GEN,DATA,NOGEN,NOGEN),                        X
               RMODE=ANY,                                              X
               TITLE='SUNTRUST SSM TABLES MODULE',                     X
               SPLEVEL=NOCHECK,                                        X
               ASCB,          Address Space Control Block DSECT        X
               NTASM,         Name/Token constants                     X
               PSA,           Program Save Area DSECT                  X
               RPL,                                                    X
               $CIRWORK,      Common init routine PCE work area DSECT  X
               $CMB,          Console message buffer DSECT             X
               $HASPEQU,      HASP equates                             X
               $HCCT,         Common storage communication table       X
               $HCT,          HASP control table                       X
               $MCT,          HASP MCT table                           X
               $PCE,          Processor control element DSECT          X
               $PSV,          Process save area DSECT                  X
               $QSE,          Shared queue control element DSECT       X
               $RDRWORK,      Reader services PCE work area DSECT      X
               $SCANTAB,      Scan table DSECT                         X
               $SCANWA,       Scan table working storage DSECT         X
               $TQE,          Timer queuue element                     X
               $USERCBS       User defined control blocks
         TITLE 'SSM Tables - Init statement verification - STSSMTBS'
***********************************************************************
*                                                                     *
*   MCTMPSTP is the $SCAN table that controls scanning the main       *
*   parameter statements (initialization and command).  We use this   *
*   to add in our SSM control statements.                             *
*                                                                     *
***********************************************************************
SSMSTAB  $SCANTAB  TABLE=(DYNAMIC,MCTMPSTP)
         $SCANTAB NAME=SSM,        Keyword SSM                         X
               CB=PRESCAN,                                             X
               PRESCAN=(SSMPRE,HCT),   uses SSM pre-scan routine       X
               CONV=SUBSCAN,                                           X
               SCANTAB=(SSMPRMS,ADDR)
         $SCANTAB  TABLE=END       END of SSM SCAN table
         SPACE 3
SSMPRMS  $PAIR  ,
         $SCANTAB NAME=SMFNUM,     SSM SMF number                      X
               CB=PARENT,                                              X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMSMFNM,                                         X
               CONV=NUM,           Number between 0 and 255            X
               RANGE=(0,255)
         $SCANTAB NAME=SMFOPT,     SSM SMF Operation                   X
               CB=PARENT,                                              X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMSMFOP,                                         X
               CONV=FLAG,          (A)ll, (I)nput, (X)action, ( )none  X
               VALUE=SYSLIST,                                          X
               ACTION,SSMSMF_ACTION,SSMSMF_ACTION,                     X
               INPUT,SSMSMF_INPUT,SSMSMF_INPUT,                        X
               ALL,SSMSMF_ALL,SSMSMF_ALL,                              X
               NONE,SSMSMF_NONE,SSMSMF_NONE
         $SCANTAB NAME=BEAFTER,    SSM Before/After processing         X
               CB=PARENT,                                              X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMBEAFT,                                         X
               CONV=FLAG,          (P)ositive, (D)elay, (N)omod        X
               VALUE=SYSLIST,                                          X
               DELAY,SSMBEAFT_DELAY,SSMBEAFT_DELAY,                    X
               PREMOD,SSMBEAFT_PREMOD,SSMBEAFT_PREMOD
         $SCANTAB NAME=BATIME,     SSM Before/After Delay time         X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMBATIM,                                         X
               CONV=NUM,           Number between 0 and 4096           X
               RANGE=(0,4096)
         $SCANTAB NAME=UIDMAX,     SSM Userid Max                      X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMUIDMX,                                         X
               CONV=NUM,           Number between 0 and 4096           X
               RANGE=(0,4096)
         $SCANTAB NAME=UIDMASK,    SSM Userid Mask                     X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),   and post-scan routine!      X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMUMSKC,                                         X
               CONV=(CHAR,U,*),    mask of characters U and * only     X
               RANGE=(1,L'SSMUMSKC)    length 1-8
         $SCANTAB NAME=JBNMAX,     SSM Jobname Max                     X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMJBNMX,                                         X
               CONV=NUM,           Number between 0 and 4096           X
               RANGE=(0,4096)
         $SCANTAB NAME=JBNMASK,    SSM Jobname Mask                    X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),   and post-scan routine!      X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMJMSKC,                                         X
               CONV=(CHAR,U,*),    mask of characters U and * only     X
               RANGE=(1,L'SSMJMSKC)    length 1-8
         $SCANTAB NAME=ALLOWS,     SSM Allow Start ($S) commands       X
               CB=PARENT,                                              X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMALLWS,                                         X
               CONV=FLAG,          on = FF, off = 00                   X
               VALUE=SYSLIST,                                          X
               ON,SSMALLWS_ON,SSMALLWS_ON,                             X
               OFF,SSMALLWS_OFF,SSMALLWS_OFF
         $SCANTAB NAME=CLASSOPT,   SSM Class Operations                X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X
               FILTER=NO,          no filtering                        X
               DSECT=SSMTB,                                            X
               FIELD=SSMCLSOP,                                         X
               CONV=FLAG,          on = FF, off = 00                   X
               VALUE=SYSLIST,                                          X
               ON,SSMCLSOP_ON,SSMCLSOP_ON,                             X
               OFF,SSMCLSOP_OFF,SSMCLSOP_OFF
         $SCANTAB NAME=CLASSLIM,   SSM Class Limits table              X
               CB=PARENT,                                              X
               PSTSCAN=(SSMPST,SET,HCT),  post-scan re-drives getq     X
               FILTER=NO,          no filtering                        X
               CBIND=(SSMCLSLM,SSMTB,LA),    load start of class tbl   X
               SUBSCRP=(A,9,L'SSMCLSLM),     A-Z+0-9, len. SSMCLSLM    X
               DSECT=SSMTB,                                            X
               FIELD=SSMCLSEN,                                         X
               CONV=NUM,           table of numbers b/w 0 and 4096     X
               RANGE=(0,4096)
         SPACE 3
         $SCANTAB  TABLE=END       END of SSM pair table
         EJECT ,
*
         TITLE 'STSSMTBS Module -- SSMPRE -- PreScan for SSM commands'
***********************************************************************
*                                                                     *
*        SSMPRE   - Prescan to locate the SSM Control Block           *
*                   via the correct Token/Name pair                   *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        Issues the appropriate $TOKENSR call to locate               *
*        the SSMT control block and set its address as                *
*        the control block address.                                   *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Via PRESCAN=(SSMPRE) on $SCANTAB;                            *
*        $CALL'ed from $SCAN facility for each SSM entry.             *
*                                                                     *
*   REGISTER USAGE (ENTRY/EXIT):                                      *
*                                                                     *
*    REG       VALUE ON ENTRY             VALUE ON EXIT               *
*                                                                     *
*    R0        N/A                        Unchanged                   *
*    R1        SCWA address               Error text if RC=4          *
*    R2-R10    N/A                        Unchanged                   *
*    R11       HCT address                Unchanged                   *
*    R12       n/a                        Unchanged                   *
*    R13       PCE address                Unchanged                   *
*    R14       Return address             Unchanged                   *
*    R15       Entry address              Return code                 *
*                                                                     *
*   RETURN CODES (R15 ON EXIT):                                       *
*                                                                     *
*        0  -  Processing successful (no errors)                      *
*        4  -  Processing failed, terminate scan & restore            *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SSMPRE,R12          Local addressability
         USING SCWA,R10            SCWA addressability
         SPACE 1
SSMPRE   $SAVE ,                   Save registers
         LR    R12,R15             Set local base
         LR    R10,R1              Get SCWA address
         XC    SCWAWK16(L'SCWAWK16),SCWAWK16   init to 00s
*
         CLI   SCWACALR,$SCIRPL    Is this from init deck?
         JE    SSMPRTMT             Yes, load the temporary SSM CB
         CLI   SCWACALR,$SCIRPLC   Is this from console mode?
         JE    SSMPRTMT             Yes, load the temporary SSM CB
*
*        Determine the permanent SSM control block name:
*          'SSM' + XCF group name
*
         MVC   SCWAWK16(3),=CL3'SSM'    stick perm prefix in name
*        get XCF group name from HCCT
         L     R3,$HCCT               load HCCT location
         USING HCCT,R3                  ...and address it
         MVC   SCWAWK16+3(8),CCTGPNM  move in XCF group name
         DROP  R3
         J     SSMPRCN1
*
SSMPRTMT EQU   *
*
*        Determine the temporary SSM control block name
*          'SSMTEMP-' + JES2 ASCB address
*
         MVC   SCWAWK16(8),=CL8'SSMTEMP-'  stick temp id in name
*        get current ASID from PSA
         USING PSA,0               PSA starts at location 0
         MVC   SCWAWK16+8(4),PSAAOLD  store ASCB address in token name
         DROP  R0
*
SSMPRCN1 EQU   *
        $TOKENSR REQUEST=RETRIEVE, Get SSMT                            X
               NAME=SCWAWK16,      use name built in SCWAWK16          X
               LEVEL=SYSTEM,                                           X
               ERRET=SSMPRMS1     if not found, bad SSM Token
*        if found, token should be returned in R0/R1/AR0/AR1
*        R0 should be SSMT, R1 should be address of SSMT
         LR    R9,R0               grab SSMT pointer
         USING SSMTB,R9               ...and address it
         CLC   SSMEYE,=CL4'SSMT'   eyecatcher correct?
         JNE   SSMPRMS2               no, bad SSMT
         CLC   SSMVRM,=XL4'00010200'  version correct?
         JNE   SSMPRMS2               no, bad SSMT
*        otherwise, we found our control block!
         ST    R9,SCWACBAD         save the control block address
         J     SSMPRRC0            and exit successfully
         SPACE 1
SSMPRMS1 EQU   *
         LA    R1,SSMPRM1          Point to bad token message
         J     SSMPRRC4            Return error message
         SPACE 1
SSMPRMS2 EQU   *
         LA    R1,SSMPRM2          Point to error message
         SPACE 1
SSMPRRC4 EQU   *
         $STORE (R1)               Store R1 for $SCAN
         LHI   R15,4               Set RC=4 (error)
         J     SSMPRRTN            Return
         SPACE 1
SSMPRRC0 EQU   *
         SLR   R15,R15             Set RC=0 (continue)
         SPACE 1
SSMPRRTN EQU   *
         $RETURN RC=(R15)          Return to caller
         SPACE 1
         DROP  R9,R10,R12          Drop SSMT, SCWA, local
         SPACE 1
         LTORG ,
         EJECT ,
*------------------------------------------------------------*
*        $SCAN error text - standard format is               *
*          2-byte reason code                                *
*          1 byte text length                                *
*          text                                              *
*------------------------------------------------------------*
         SPACE 1
SSMPRM1  DC    Y(1900)
         DC    AL1(L'SSMPRM1T)
SSMPRM1T DC    C'SSMPRE: SSM TOKEN NOT FOUND'
         SPACE 1
SSMPRM2  DC    Y(1901)
         DC    AL1(L'SSMPRM2T)
SSMPRM2T DC    C'SSMPRE: INVALID SSM CONTROL BLOCK'
         EJECT ,
         TITLE 'STSSMTBS Module -- SSMPST -- PostScan for SSM commands'
***********************************************************************
*                                                                     *
*        SSMPST   - Postscan for any SSM post-scan processing.        *
*                                                                     *
*   FUNCTION:                                                         *
*                                                                     *
*        SSMxMASK keyword:  pad usermask with *s and convert          *
*           mask to a bit representation.                             *
*           Works for both SSMUMASK and SSMJMASK.                     *
*                                                                     *
*   LINKAGE:                                                          *
*                                                                     *
*        Via PSTSCAN=(SSMPST) on $SCANTAB;                            *
*        $CALL'ed from $SCAN facility for specific SSM entries.       *
*                                                                     *
*   REGISTER USAGE (ENTRY/EXIT):                                      *
*                                                                     *
*    REG       VALUE ON ENTRY             VALUE ON EXIT               *
*                                                                     *
*    R0        N/A                        Unchanged                   *
*    R1        SCWA address               Error text if RC=4          *
*    R2-R10    N/A                        Unchanged                   *
*    R11       HCT address                Unchanged                   *
*    R12       n/a                        Unchanged                   *
*    R13       PCE address                Unchanged                   *
*    R14       Return address             Unchanged                   *
*    R15       Entry address              Return code                 *
*                                                                     *
*   RETURN CODES (R15 ON EXIT):                                       *
*                                                                     *
*        0  -  Processing successful (no errors)                      *
*        4  -  Processing failed, terminate scan with message         *
*                                                                     *
***********************************************************************
         SPACE 1
         USING SSMPST,R12          Local addressability
         USING SCWA,R10            SCWA addressability
         USING SSMTB,R9            SSMT addressability
         SPACE 1
SSMPST   $SAVE ,                   Save registers
         LR    R12,R15             Set local base
         LR    R10,R1              Get SCWA address
         L     R9,SCWACBAD         Get SSMT address
         L     R8,SCWAKPTR         Grab current keyword
*
         CLC   0(7,R8),=C'UIDMASK'   Is this a UMASK call?
         JE    SSMPSUMS             Yes, process the UMASK
         CLC   0(7,R8),=C'JBNMASK'   Is this a JMASK call?
         JE    SSMPSJMS             Yes, process the JMASK
         J     SSMPSRC0            Otherwise, get out
*
SSMPSUMS EQU   *                   process as UMASK
         LA    R5,SSMUMSKC         R5 = usermask, saved by $SCANTAB
         J     SSMPSMSK
*
SSMPSJMS EQU   *                   process as JMASK
         LA    R5,SSMJMSKC         R5 = jobmask, saved by $SCANTAB
*
SSMPSMSK EQU   *                   SSMxMASK statement
*
*        Convert the SSM MASK characters to a bit string, where
*          U = 1 and * = 0.  Also, pad out the MASK with *
*
*            R5 = address of the character mask (max 8 chars)
*            R6 = bit representation of each character
*            R7 = counter for loop through characters
*
         XR    R6,R6               clear out bit result
         LA    R7,8                set loop limit (max 8 chars)
*
SSMPSLP1 EQU   *
         SLL   R6,1                shift bits one to the left
         CLI   0(R5),SSMMSK1       is this character a U?
         JNE   SSMPSNTU              no, skip setting the mask
         LA    R6,1(0,R6)          flag the character as a U
         J     SSMPSDLP            go through the loop
*
SSMPSNTU EQU   *
         MVI   0(R5),SSMMSK0       make sure a non-U is a *
*
SSMPSDLP EQU   *
         LA    R5,1(R5)            move one character into mask
         BCT   R7,SSMPSLP1         decrement counter & loop
*
*        Store bit-mask ('000000HL') in 2-byte SSMxMASK field:
*          SSMxMHI ('0H') + SSMxMLO ('0L')
*
         LR    R7,R6               copy the mask for manipulation
         SRL   R7,4                get rid of low bits in R7
         CLC   0(7,R8),=C'UIDMASK' Is this a UMASK call?
         JNE   SSMSVJMS              No, then save as JMASK
*                                Save as UMASK
         STC   R7,SSMUMHI          save off mask of first 4 characters
         LA    R7,15(0,0)          load R7 with 0000000F
         NR    R6,R7               wipe out all but low bits of mask
         STC   R6,SSMUMLO          save off mask of last 4 characters
         J     SSMPSRC0
*
SSMSVJMS EQU   *                 Save as JMASK
         STC   R7,SSMJMHI          save off mask of first 4 characters
         LA    R7,15(0,0)          load R7 with 0000000F
         NR    R6,R7               wipe out all but low bits of mask
         STC   R6,SSMJMLO          save off mask of last 4 characters
         J     SSMPSRC0
*
         SPACE 1
SSMPSMS1 EQU   *
         LA    R1,SSMPSM1          Point to error message
         SPACE 1
SSMPSRC4 EQU   *
         $STORE (R1)               Store R1 for $SCAN
         LHI   R4,4                Set RC=4 (error)
         J     SSMPSRTN            Return
         SPACE 1
SSMPSRC0 EQU   *
         SLR   R4,R4               Set RC=0 (continue)
         SPACE 1
SSMPSRTN EQU   *
         $POSTXEQ MASPOST=NO       always redrive job selection
         $RETURN RC=(R4)           Return to caller
         SPACE 1
         DROP  R9,R10,R12          Drop SSMT, SCWA, local
         SPACE 1
         LTORG ,
         EJECT ,
*------------------------------------------------------------*
*        $SCAN error text - standard format is               *
*          2-byte reason code                                *
*          1 byte text length                                *
*          text                                              *
*------------------------------------------------------------*
         SPACE 1
SSMPSM1  DC    Y(1902)
         DC    AL1(L'SSMPSM1T)
SSMPSM1T DC    C'SSMPST: SO FAR, NO POSTSCAN ERROR MESSAGES'
         SPACE 1
*
         TITLE 'SSM Tables - EPILOG'
         $MODEND ,
         SPACE 2
         END   ,                   End of STSSMTBS
++SRC(MSSWAIT) SYSLIB(SHASSRC) DISTLIB(AHASSRC) DISTMOD(AHASMOD).
WORKAREA DSECT
SAVEAREA DS    18F
INTERVAL DS    CL8                     WAITTIME HHMMSSTH
NUMONLY  DS    CL256
WORKLEN  EQU   *-WORKAREA              WORK AREA LENGTH
MSSWAIT  CSECT
MSSWAIT  AMODE 31
MSSWAIT  RMODE ANY
* *-*-*-----------------------------------------------------------*-*-*
* *-                                                                 -*
* *- UTILITY ROUTINE -                                               -*
* *- INPUT PARMS ARE - TIME TO WAIT C'HHMMSSTH'                      -*
* *-                                                                 -*
* *- INTENDED ENVIRONMENT - BATCH                                    -*
* *-                                                                 -*
* *- REGISTER USAGE -                                                -*
* *-  R0             R4 LVL1 BAL    R8  WORK         R12 BASE        -*
* *-  R1 LNKAGE      R5 LVL2 BAL    R9  WORK         R13 SAVE        -*
* *-  R2             R6 WORK        R10 PARM POINTER R14 LNKAGE      -*
* *-  R3             R7 WORK        R11              R15 LNKAGE      -*
* *-                                                                 -*
* *- AMODE 31, RMODE ANY                                             -*
* *-                                                                 -*
* *-  CHANGE HISTORY                                                 -*
* *- DATE  INITIALS    COMMENTS                                      -*
* *-*-*-----------------------------------------------------------*-*-*
*
         #REGEQU
         STM   14,12,12(R13)           SAVE THEIR REGS
         LR    12,15                   LOAD OUR BASE
         USING MSSWAIT,12
         LR    R10,R1                  SAVE POINTER TO PARMS
         LR    R9,R13                  SAVE POINTER TO THEIR WORK
         GETMAIN R,LV=WORKLEN               GET WORKING STORAGE
         LR    R13,R1                  POINT TO OUR SAVEAREA
         LR    R0,R1                   INITIALIZE...
         LA    R1,WORKLEN                 WORKAREA
         SR    R14,R14                       TO
         ICM   R15,B'1000',=X'40'              BLANKS.
         MVCL  R0,R14
         USING WORKAREA,R13            GET ADDRESSABILITY
         ST    R9,SAVEAREA+4           SAVE HIS IN OURS
         ST    13,8(R9)                STORE OUR SAVE IN HIS
         B     OVERID
         DC    C'SKEL01 VERSION 1.0  UTIL TO -              &SYSDATE '
OVERID   DS    0H
         L     R9,0(R10)               R9 HAS ADDRESS OF PARMS
         LH    R10,0(R9)
         LTR   R10,R10
         BZ    RETURN04
         C     R10,=F'08'
         BNE   RETURN04
         MVI   NUMONLY,X'FF'
         MVC   NUMONLY+1(255),NUMONLY
         MVI   NUMONLY+C'0',X'00'
         MVC   NUMONLY+C'1'(9),NUMONLY+C'0'
         TRT   2(8,R9),NUMONLY
         BNZ   RETURN04
         MVC   INTERVAL,2(R9)
         STIMER WAIT,DINTVL=INTERVAL
RETURN   LA    R0,WORKLEN
         LR    R1,R13                  ADDRESS OF WORKAREA
         L     R13,4(R13)              RESTORE THEIR SAVEA PTR
         FREEMAIN RU,LV=(0),A=(1)          FREE THE WORK AREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGS
         XR    15,15
         BR    R14                     GO HOME.....
RETURN04 EQU   *
         XR    R0,R0
         WTO   'MSSWAIT0 UNIQUE PROBLEMS WITH PARMS '
         LA    R0,WORKLEN
         LR    R1,R13                  ADDRESS OF WORKAREA
         L     R13,4(R13)              RESTORE THEIR SAVEA PTR
         FREEMAIN RU,LV=(0),A=(1)          FREE THE WORK AREA
         LM    R14,R12,12(R13)         RESTORE CALLERS REGS
         LA    R15,4
         BR    R14                     GO HOME.....
         LTORG
         END
