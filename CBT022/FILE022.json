{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011055000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2351440, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 26, "INMDSNAM": "CBT.V500.FILE022.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2351440, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2351440, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE022.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00&\\x0c'", "DS1TRBAL": "b'\\x0f\\x02'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\x006\\x00\\x0e\\x009\\x00\\x07\\x00'\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x00\\x01\\x181\\x7f\\x01\\x181\\x7f\"\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2018-11-13T00:00:00", "modifydate": "2018-11-13T22:22:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  022\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE022\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 121 MEMBERS COUNTED; CUMULATIVE SIZE IS 21,264 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/13/18    22:21:59    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x97\\x00\\x97\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 151, "newlines": 151, "modlines": 0, "user": "FILE022"}, "text": "\n LAST UPDATE: 03/11/88\n\n NOTE: NO PROGRAMS NEED AUTHORIZATION TO EXECUTE\n\n_MEMBER_    ________________________ FUNCTION _____________________________\n\n$CBTDOC.....MEMBER FOR CBT DOCUMENTATION\n\n$DOC........THIS MEMBER\n\n$STCK.......MACRO: FOR DATE/TIME CALCULATIONS, USED IN MEM(SYSTAT)\n\n$WHO........MACRO: FINDS OUT IF YOU ARE BATCH/TSO, NOT USED\n\n#CATRPT.....JCL: SUBSET OF (WEEKLY), CATALOG REPORTS\n\n#CSIRPT.....JCL: SUBSET OF (WEEKLY), SMP/E CSI REPORTS\n\n#PARMLIB....JCL: SUBSET OF (WEEKLY), LISTING OF PARMLIB\n\n#PROCLIB....JCL: SUBSET OF (WEEKLY), LISTING OF PROCLIB\n\n#RACF.......JCL: SUBSET OF (WEEKLY), RACF REPORTS\n\n#SMFRPT.....JCL: SUBSET OF (WEEKLY), SMF  REPORTS\n\n#VTOCS......JCL: SUBSET OF (WEEKLY), VTOCS REPORTS\n\nADRMCLVL....SOURCE: TO DETERMINE DFDSS LEVEL IN SYSTEM\nADRMCLV#....JCL: TO COMPILE\nADRMCLV$....CLIST: TO EXEC IT\n\nCATSTRI#....JCL: TO ASSEMBLE+LINK+RUN(CATSTRIP)\nCATSTRIP....SOURCE: USED TO EXAMINE OUTPUT OF LISTCAT FOR ICF-CATALOGS\n\nCENTER......MACRO: TO CENTER OUTPUT\n\nCLISTSOE....CLIST: DISPLAYS ALL NEW FUNCTIONS UNDER TSO/E 3\n\nDATERC......SOURCE: RETURNS RC BASED ON DATE\nDATERC#.....JCL: TO ASSEM, LINK, AND EXEC DATERC\n\nDI215.......SOURCE: DISPLAY ALL INITIATORS FOR JES 2.1.5\n\nICHRIN#.....JCL: TO ASSEMBLE MEM(ICHRIN03)\nICHRIN03....SOURCE: MODULE USED BY RACF IN CREATING THE STARTED TASK TABLE\n\nIDMSLOGS....SOURCE: PROCESSES IDMS/R DUMPED LOGS, TO GATHER SHUTDOWN STATS\nIDMSLOG#....JCL: TO ASSEM, LINK, AND EXEC IDMSLOGS\n\nJOBSTAT.....SOURCE: CHECKS TO SEE IF JOB/STC/TSO ACTIVE AND SETS RC\nJOBSTAT#....JCL: ASSEM, LINK, AND EXEC JOBSTAT\n\nMRGJNLOG....SOURCE: MERGES AND PORCESSES IDMS/R DUMPED JOUNALS AND LOGS\nMRGJNLO#....JCL: ASSEM, LINK, AND PROCESSING EXAMPLE\n\nMODE........MACRO: TO CHANGE ADDRESSING MODE OF ASSEMBLER CODE, MEM(SYSTAT)\n\nPUTCVRL.....SOURCE: PRINT COVER LETTERS FORM SEQ. PTF TAPES\nPUTCVRL#....JCL: SAMPLE JCL FOR THE PUTCVRL PGM\n\nRACFPGM.....MACRO: TO GERNERATE RACF PROTECTION FOR PROGRAMS\nRACFST......SOURCE: PROGRAM DISPLAY RACF STATUS INFORMATION: DSNS, FLAGS, STOR.\nRACFST#.....JCL: JCL TO ASSEMBLE AND LINK RACFST\n\nREGS........MACRO: REGISTER EQUATES\n\nRESCUE......MACRO: CREATES A JOB STREAM TO CREATE A ONE-PACK-SYSTEM !!!!!!\nRESCUE#.....JCL: TO ASSEMBLE MEM(RESUCE) - TRY IT FOR FUN\n\nROUTDESC....COMM: EXAMPLE OF ROUTING AND DESCRIPTOR CODES FOR WTO/WTOR'S HANDY\n\nSASCAT......SAS: READS OUTPUT OF MEM(CATSTRI#) AND SENDS IT THROUGH SAS\n\nSASDDDEF....SAS: A LOGICAL LISTING OF DDDEFS FROM SMP/E FOR ANY ZONE .\n\nSASNLDS.....SAS: READ SMF RECORD TYPE 27, NLDM RECORDS\n\nSASSMP......SAS: READS OUTPUT OF 'LIST FUNCTIONS' COMMAND, PROCESSING FMIDS\n\nSASSMP......SOURCE: SAS, TO PROCESSES NON-APPLIED SYSMODS IN ANY CSI ZONE\n\nSASTIMES....SAS: PROCESSES DATE/TIMES IN EVERY WAY POSSIBLE\n\nSASTMS......JCL+SOURCE: PROCESSES OUTPUT OF 'TMSGRW' INTO SAS FOR REPORTING\n\nSASVTOC.....SOURCE: SAS/GRAPH TO PROCESS ALL VTOCS BY DSORG, NOTING FREE SPACE\n\nSAS30M......SAS: PROCESS SMF TYPE 30 RECORDS\n\nSMF5........SOURCE: PROCESSES SMF TYPE 5 RECORDS\nSMF5#.......JCL: ASSEM, LINK, EXEC\n\nSMPELIS#....JCL: TO ASSEMBLE+LINK+RUN MEM(SMPELIST) - READS OUTPUT OF SMP/E\nSMPELIST....SOURCE: PROCESSES OUTPUT '//SMPELIST' FOR A 'LIST FUNCTIONS'\n\nSMPPRE......MACRO: A PEICE OF CODE NEEDED BY (SASSMP)+(SASDDDEF) FOR SAS PROCESS\n\nSYSLOG......SOURCE: PROCESSES A DUMPED MVS/XA SYSTEM LOG\nSYSLOG#.....JCL: ASSEM, LINKS, AND EXEC\nSYSLOG##....JCL: EXECUTION EXAMPLE\nSYSLOC......SOURCE: PROCESSES A GDG AND RETURNS FULL NAME AND LENGTH\nSYSLOC#.....JCL: ASSEM, LINKS, AND EXEC\nSYSLOG$.....CLIST: TO EXEC, IN CONJUCTION WITH ISPF PANEL SYSLOG$$\nSYSLOG$$....PANEL: TO EXEC, IN CONJUCTION WITH ISPF PANEL SYSLOG$$\n\nSYSTAT......SOURCE: EVERYTHING AN MVS-SYSTEM'S PROGRAMMER WANTS TO KNOW\nSYSTAT$.....CLIST: TO RUN SYSTAT\nSYSTAT#.....JCL: TO ASSEMBLE+LINK+(OPTIONALLY  RUN) SYSTAT\n\nTESTOPEN....MACRO: TEST THE OPEN OF ANY DCB, USED IN MEM(SYSTAT,UBCSCAN)\n\nUCBSVC78....SOURCE: GET FREE SPACE ON PARM PASSED VOLSER\nUCBSVC#.....JCL:\n\nUCBSCAN.....SOURCE: SCANS ALL SYSTEM UCB'S AND GIVES 'CHANNEL-PATHS' !!!!!!!\nUCBSCAN$....CLIST: TO RUN UCBSCAN - NOTE THE OPTIONS\nUCBSCAN#....JCL: TO ASSEMBLE+LINK+(OPTIONALLY RUN) UCBSCAN  TRY-IT\nUCBSCAN@....PROC: TO RUN PGM=UCBSCAN INTERACTIVELY WITH THE SYSTEM CONSOLE !!!!\nUCBTYPES....MACRO: USED BY MEM(UCBSCAN) TO DETERMINE DEVICE TYPES\n\nWEEKLY......JCL: WEEKLY JOB\n\nWTONROL#....JCL: TO ASSEMBLE AND LIN WTONROLL PROGRAM\nWTONROLL....SOURCE: PROGRAM TO ISSUE WTO'S TO CONSOLE W/O ROLLING THEM\n\nISREDIT MARCOS ...\n\n$AMODGEN....BROWSE AMODGEN\n$ASMHCL.....BUILD ASSEMBLE AND LINK JCL AROUND SOURCE CODE, OR FOREGROUND\n$BROWSE.....BROWSE FROM EDIT SESSION\n$COPY.......USE ADVANCED LMCOPY FUNCTION\n$EXEC.......ISSUE THE TSO 'EXEC' COMMAND FOR CURRENT CLIST ONE IS EDITING\n$GENER......EXEC IEBGENER\n$HASPSRC....BROWSE 'SYS1.HASPSRC'\n$IEHMAP.....MAP A VOLUME\n$JOB........PUT A JOBCARD AND DOCUMENTATION IN FRONT OF JCL\n$JUL........GET TODAY'S DATE\n$LC.........PERFORM LISTCAT\n$LD.........PERFORM LISTD ON CURRENT DATASET\n$LDI........PERFORM LISTDSI ON CURRENT DATASET\n$LISTLVL....PERFORM LISTCAT LEVEL\n$LM.........LIST ALL MEMBERS: PGM=LM\n$LS.........LIST FREE SPACE: PGM=LS; PGM=CLEAR\n$MACLIB.....BROWSE MACLIB\n$PEND.......PUT A PEN AND EXEC AT THE END OF A PROC\n$PRINT......USE PRINTOFF TO PRINT CURRENT MEMEBR\n$PROCLIB....EDIT SYS1.PROCLIB\n$RECEIVE....BUILD SMP/E JCL TO RECEIVE A PRODUCT/MAINT\n$SPACE......DETERMINE DISK/TAPE BLKSIZE BASED ON LRECL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$CBTDOC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00V\\x00V\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "FILE022"}, "text": "  THESE PROGRAMS WERE DEVELOPED AT ADRIA LABORATOIES DUBLIN OHIO\n  THEY CONTAIN ASSEMBLER ROUTINES THAT RUN UNDER\n  MVS/XA 2.1.7, JES 2.1.7, AND RACF 1.7, AS WELL AS SAS CODE\n  RUNNING SAS RELEASE 5.16. ANY QUESTIONS CALL MARK HEDGES AT\n  (614) 764-8175  LAST UPDATE 03/10/88 -MVH.\n\n  _ASSEMBLER_\n\n   ADRMCLVL   DETERMINES LEVEL OF DFDSS RUNNING IN YOUR SYSTEM\n   CATSTRIP   EXAMINE OUTPUT OF LISTCAT FOR ICF-CATALOGS\n              - USED IN CONJUNCTION WITH SASCATS\n   DATERC     SETS RRC BASED ON DATE-OF-WEEK\n   DI215      DISPLAY INITIATORS FOR JES 2.1.5/JES 2.1.7\n   ICHRIN03   MODULE USED BY RACF IN CREATING THE STARTED TASK TABLE\n              - THIS IS A MACRO WITH EXAMPLES TO CODE THIS TABEL\n   IDMSLOGS   PROCESSES IDMS/R SHUTDOWN STATS\n   JOBSTAT    DETERMINES IF JOB/STC/TSO IS CURRENTLY RUNNING\n   MRGJNLOG   MERGES ID,MS/R JOURNALS AND LOGS TO TAPE FILES - NICE\n   PUTCVRL    PRINT COVER LETTERS FORM SEQ. PTF TAPES, NOT TOO THRILLING\n   RACFPGM    TO GERNERATE RACF PROTECTION FOR PROGRAMS\n              - FOR ALL YOU FOLKS PRE-RACF 1.7\n   RACFST     PROGRAM DISPLAY RACF STATUS INFORMATION: DSNS, FLAGS, STOR\n              - NICE IF YOU WANT TO KNOW WHERE ALL RACF 1.7 DATASETS ARE\n   RESCUE     CREATES A JOB STREAM TO CREATE A ONE-PACK-SYSTEM\n              - INCLUDES SPOOL, CKPT, PAGE DATASETS, RACF TOO\n   ROUTDESC   EXAMPLE OF ROUTING AND DESCRIPTOR CODES FOR WTO/WTOR'S\n   SMF5       PROCESSES SMF TYPE 5 RECORDS\n   SMPLIST    PROCESSES OUTPUT OF AN SMP/E 'LIST FUNCTIONS'\n   SYSLOG     PROCESSES MVS/XA SYSLOGS FOR SCANNING AND REPORTING\n   SYSLOC     USED IN CONJUNTION WITH SYSLOG: PROCESSES GDG'S\n   SYSTAT     EVERYTHING AN MVS-SYSTEM'S PROGRAMMER WANTS TO KNOW\n              - MY BEST CODE, MUST BE AT LEAST MVS/XA 1.2.3\n              - GIVES IPL INFO, CONTROL BLOCK INFO (ADDRESSES),\n                MAPS STORAGE AND DRAWS MAP OF VIRTUAL STORAGE,\n                LISTS ALL APF DATASETS AND ISSUES A 'LOCATE' TO CHECK\n                CATALOG STATUS.\n              - RUNS A BATCH/TSO/STC\n   UCBSVC78   PARM INPUT THAT WRITES 1 LINER ON AVAILABLE SPACE\n   UCBSCAN    SCANS ALL SYSTEM UCB'S AND GIVES 'CHANNEL-PATHS'\n              - RUNS UNDER TSO, AS A BATCH JOB, OR STC\n              - GIVES UCB INFO, ISSUES LSPACE SVC\n              - HAS CLIST. EASY TO RUN AS STC TO ISSUE EVERY 8 HRS\n   UCBTYPES   USED BY MEM(UCBSCAN) TO DETERMINE DEVICE TYPES\n   WTONROLL   PROGRAM TO ISSUE WTO'S TO CONSOLE W/O ROLLING THEM\n  _SAS 5.16_\n   SASCATS    READS OUTPUT OF MEM(CATSTRI#) AND SENDS IT THROUGH SAS\n              - USES A 'LISTCAT ALL' AND CP 'VTOC' AS INPUT TO\n              - GIVE STATS ON ALL VSAM, NONVSAM, AND ICF-CATALOG INFO\n   SASDDDEF   A LOGICAL LISTING OF DDDEFS FROM SMP/E FOR ANY ZONE\n   SASSMP     READS OUTPUT OF 'LIST FUNCTIONS' COMMAND, PROCESSING FMIDS\n   SASSMP     SAS, TO PROCESSES NON-APPLIED SYSMODS IN ANY CSI ZONE\n   SASTMS     PROCESSES OUTPUT OF 'TMSGRW' INTO SAS FOR REPORTING\n   SASVTOC    SAS/GRAPH TO PROCESS ALL VTOCS BY DSORG, NOTING FREE SPACE\n   SMPELIST   PROCESSES OUTPUT '//SMPELIST' FOR A 'LIST FUNCTIONS'\n   TMSMACRO   PROCESSES OUTPUT OF TMC FROM TMCGRW PGM\n   SASSMF30   PROCESS SMF TYPE 30\n   _ CLIST _\n   CLISTSOE   DISPLAYS ALL NEW FUNCTIONS UNDER TSO/E 3\n   SYSTAT$    PROCESS SYSTAT PGM\n   UCBSCAN$   PROCESS UCBSCAN ROUTINE\n   ADRMCLVL$  PROCESS DFDSS LEVEL\n   _ ISPF V2.3 PANELS _\n   SYSLOG$$   FOR SYSLOG$ CLIST\n   _ ISREDIT MACROS _\n   $AMODGEN    BROWSE AMODGEN\n   $ASMHCL     BUILD ASSEMBLE AND LINK JCL AROUND SOURCE CODE, OR FOREGROUND\n   $BROWSE     BROWSE FROM EDIT SESSION\n   $COPY       USE ADVANCED LMCOPY FUNCTION\n   $EXEC       ISSUE THE TSO 'EXEC' COMMAND FOR CURRENT CLIST ONE IS EDITING\n   $GENER      EXEC IEBGENER\n   $HASPSRC    BROWSE 'SYS1.HASPSRC'\n   $IEHMAP     MAP A VOLUME\n   $JOB        PUT A JOBCARD AND DOCUMENTATION IN FRONT OF JCL\n   $JUL        GET TODAY'S DATE\n   $LC         PERFORM LISTCAT\n   $LD         PERFORM LISTD ON CURRENT DATASET\n   $LDI        PERFORM LISTDSI ON CURRENT DATASET\n   $LISTLVL    PERFORM LISTCAT LEVEL\n   $LM         LIST ALL MEMBERS: PGM=LM\n   $LS         LIST FREE SPACE: PGM=LS; PGM=CLEAR\n   $MACLIB     BROWSE MACLIB\n   $PEND       PUT A PEN AND EXEC AT THE END OF A PROC\n   $PRINT      USE PRINTOFF TO PRINT CURRENT MEMEBR\n   $PROCLIB    EDIT SYS1.PROCLIB\n   $RECEIVE    BUILD SMP/E JCL TO RECEIVE A PRODUCT/MAINT\n   $SPACE      DETERMINE DISK/TAPE BLKSIZE BASED ON LRECL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$AMODGEN": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: EDIT 'SYS1.AMODGEN' FILE WITH OPTIONAL MEMBER           */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (MEMBER)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &MEMBER\u00ac=  THEN DO\n   IF &SYSDSN('SYS1.AMODGEN(&MEMBER)')=OK THEN +\n      ISPEXEC BROWSE DATASET('SYS1.AMODGEN(&MEMBER)')\n END\n  ELSE DO\nISPEXEC BROWSE DATASET('SYS1.AMODGEN')\n END\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ASMHCL": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00j\\x00j\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.3 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: ADD JCL ONTO ASSEMBLER SOURCE CODE FOR ASSEM/LINK       */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X() SYSLMOD(LINKLIB)\nCONTROL MAIN CAPS\nISREDIT MACRO (FORE)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &FORE=FORE OR &FORE=F THEN GOTO FOREGR\nSET &PNT=0\nSET &ID=&SYSUID\nISREDIT\nISREDIT LINE_AFTER &PNT = \"//&MEM     JOB (000000),'&ID',\"\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = '//            CLASS=Z,MSGCLASS=X,'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = '//            NOTIFY=&ID'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT=+\n'//*-----------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT='//*   LIB: &DSN.(&MEM)'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT='//*   DOC: ASSEMBLE AND LINK USING ASMHCL'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT=+\n'//*-----------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT='//ASMHCL  EXEC ASMHCL'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = +\n '//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= '//          DD  DSN=SYS1.AMODGEN,DISP=SHR'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= '//          DD  DSN=&DSN,DISP=SHR'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = '//SYSIN    DD  *'\n\nISREDIT LABEL .ZLAST = .PNT\nISREDIT LINE_AFTER .PNT  = +\n '//L.SYSLMOD DD  DSN=&SYSLMOD(&MEM),DISP=SHR'\nISREDIT UP MAX\nISREDIT LEFT  MAX\nISREDIT CURSOR = 1 0\nEXIT CODE(&RC)\n\nFOREGR: CONTROL MAIN\nISREDIT SAVE\nWRITE DATASET &DSN.(&MEM) HAS BEEN SAVED\nDDD SYSIN '&DSN(&MEM)'\nDDD SYSLIB ('SYS1.AMODGEN' 'SYS1.MACLIB' '&DSN') +\n    BLKSIZE(32000) SHR\nDDD SYSUT1 '$' UNIT(SYSDA) NEW SPACE(4,1) CYL\nDDD SYSPRINT '$' MOD SPACE(1,1) CYL LRECL(121) BLKSIZE(23474) +\n    DSORG(PS) RECFM(F B A)\nOPENFILE SYSPRINT OUTPUT\nSET SYSPRINT=&STR(-)\nPUTFILE SYSPRINT\nSET SYSPRINT=&STR(0============> DSN=&DSN(&MEM))\nPUTFILE SYSPRINT\nSET SYSPRINT=&STR(0============>     DATE=&SYSDATE   TIME=&SYSTIME    )\nPUTFILE SYSPRINT\nCLOSFILE SYSPRINT\nDDD SYSTERM *\nDDD SYSLIN '$' MOD SP(1,1) CYL LRECL(80) BLKSIZE(800) DSORG(PS) +\n    RECFM(F B)\nTSOEXEC DOPROG IEV90  'NODECK,OBJECT,XREF(SHORT),TERM'\nSET &RC=&LASTCC\nREVIEW SYSPRINT FILE\nIF &RC=0 THEN DO\n   WRITENR TO LINK ENTER (Y/N):&STR( )\n   READ &A\n   IF &A\u00ac=Y THEN GOTO BADEND\n   DDD SYSLMOD '&SYSLMOD(&MEM)'\n   DDD SYSUT1 '$' UNIT(SYSDA) NEW SPACE(4,1) CYL\n   DOPROG HEWLH096  'LET,LIST,XREF,NCAL'\n   FREE DD(SYSLMOD)\n   OPENFILE SYSPRINT OUTPUT\n   SET SYSPRINT=&STR(-)\n   PUTFILE SYSPRINT\n   SET SYSPRINT=&STR(0============> SYSLMOD=&SYSLMOD(&MEM)  &VOL)\n   PUTFILE SYSPRINT\n   SET SYSPRINT=&STR(0)\n   PUTFILE SYSPRINT\n   CLOSE: CLOSFILE SYSPRINT\n   REV  SYSPRINT FILE\n  END\nBADEND: WRITENR TO PRINT ENTER (Y/N):&STR( )\n        READ &A\n        IF &A=Y THEN +\n            PRINTODD SYSPRINT\n        IF &A=M THEN +\n            PRINTODD SYSPRINT DEST(MISPRT1)\n        IF &A=F THEN +\n            PRINTODD SYSPRINT DEST(FINANCE)\n        FREEALL  LIST\n        DDD SYSIN *\n        DDD SYSPRINT *\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$BROWSE": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: BROWSE FROM AN EDIT SESSION                             */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X() RC(0)\nCONTROL MAIN\nISREDIT MACRO (NAME)\nISPEXEC CONTROL ERRORS RETURN\nISREDIT (DSN) =  DATASET\nSET &PNT=0\nSET &ID=&SYSUID\nIF &SYSDSN('&DSN.(&NAME)')=OK THEN DO\n   ISPEXEC BROWSE DATASET('&DSN.(&NAME)')\n   EXIT\n  END\nSET &ZEDSMSG = &STR(&NAME NOT FOUND)\nSET &ZEDLMSG = &STR(&NAME NOT IN &DSN)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$COPY": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00l\\x00l\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 108, "newlines": 108, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: COPY LIBARY AND MEMBER AFTER LINE POSITION              */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X() RC(0)\nCONTROL MAIN\nISREDIT MACRO NOPROCESS (INDSN INMEM)\nISPEXEC CONTROL ERRORS RETURN\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nSET &PNT=0\nSET &ID=&SYSUID\n\nIF &INDSN=CARDLIB  THEN SET &INDSN=&STR(SYS1.CARDLIB)\nIF &INDSN=JOBLIB   THEN SET &INDSN=&STR(SYS1.JOBLIB)\nIF &INDSN=PROCLIB  THEN SET &INDSN=&STR(SYS1.PROCLIB)\nIF &INDSN=PARMLIB  THEN SET &INDSN=&STR(SYS1.PARMLIB)\nIF &INDSN=PROC     THEN SET &INDSN=&STR(SYS1.PROC)\nIF &SYSDSN('&INDSN')\u00ac=OK THEN DO\n   IF &SYSDSN('&SYSUID..&INDSN')\u00ac=OK THEN DO\n      WRITE ... CAN NOT FIND '&INDSN'   OR '&SYSUID..&INDSN'\n      EXIT\n     END\n   SET &INDSN=&STR(&SYSUID..&INDSN)\n  END\nLISTDSI '&INDSN'\nIF &SYSDSORG=PS THEN GOTO DSORGPS\n\n/* FOR PDS'S */\nIF &SYSDSN('&INDSN.(&INMEM)')\u00ac=OK THEN DO\n   WRITE DSN = '&INDSN.(&INMEM)' NOT FOUND ...\n   WRITE ... WILL TRY &MEM\n   IF &SYSDSN('&INDSN.(&MEM)')\u00ac=OK THEN DO\n      WRITE DSN = '&INDSN.(&MEM)' NOT FOUND ...\n      EXIT\n     END\n   SET &INMEM=&MEM\n  END\n/* COPY REQUESTED MEMBER TO LIBRARY */\nSET &PW=\nIF &INDSN=&STR(SYS1.PROC) THEN SET &PW=&STR(PASSWORD(PASSWORD))\n\nISPEXEC LMINIT   DATAID(INDD) DATASET('&INDSN') ENQ(SHR) &PW\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE UNABLE TO ALLOCATE '&INDSN'\n   EXIT\n  END\nISPEXEC LMINIT   DATAID(OUTDD) DATASET('&DSN.') ENQ(SHRW) &PW\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE UNABLE TO ALLOCATE '&OUTDSN'\n   ISPEXEC LMFREE DATAID(&INDD)\n   EXIT\n  END\nISPEXEC LMCOPY FROMID(&INDD) FROMMEM(&INMEM) +\n               TODATAID(&OUTDD) TOMEM($$##$$##)\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE COPY UNSUCCESSFUL ....\n   GOTO FREEM\n  END\nGOTO DELIT\n\n/* FOR DSORG=PS */\nDSORGPS: +\nISPEXEC LMINIT   DATAID(INDD) DATASET('&INDSN') ENQ(SHR)\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE UNABLE TO ALLOCATE '&INDSN'\n   EXIT\n  END\nISPEXEC LMINIT   DATAID(OUTDD) DATASET('&DSN.') ENQ(SHRW) &PW\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE UNABLE TO ALLOCATE '&OUTDSN'\n   ISPEXEC LMFREE DATAID(&INDD)\n   EXIT\n  END\nISPEXEC LMCOPY FROMID(&INDD) +\n               TODATAID(&OUTDD) TOMEM($$##$$##)\nSET &RC=&LASTCC\nIF &RC\u00ac=0 THEN DO\n   WRITE COPY UNSUCCESSFUL ....\n   GOTO FREEM\n  END\n\nDELIT: +\nISREDIT PROCESS DEST\n\nISREDIT COPY $$##$$## AFTER .ZDEST\n\nISPEXEC LMOPEN   DATAID(&OUTDD) OPTION(OUTPUT)\nISPEXEC LMMDEL   DATAID(&OUTDD) MEMBER($$##$$##)\nISPEXEC LMCLOSE  DATAID(&OUTDD)\n\nFREEM: +\nISPEXEC LMFREE   DATAID(&INDD)\nISPEXEC LMFREE   DATAID(&OUTDD)\n\nSET &ZEDSMSG = &STR(&INMEM WAS COPIED)\nSET &ZEDLMSG = &STR(&INDSN.(&INMEM) WAS COPIED AFTER SPECIFIED LINE)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DATE": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00;\\x00;\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: CREATES JCL TO SUBMIT JOB FOR PGM=DATE80/DATE133        */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X() SUFF(80)\nCONTROL MAIN\nISREDIT MACRO (OP,OP1)\nSET &CL=\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (LRECL) = LRECL\nIF &LRECL = 133 THEN SET &SUFF=133\nISREDIT (MEM) =  MEMBER\nISREDIT SAVE\n\nSET &PARM=\nSET &COPIES=\nSET &DEST=LOCAL\nSET &SOUT=A\nSET &NAME=&SUBSTR(1:&LENGTH(&ID)-1,&ID)\n\nIF &DATATYPE(&OP)=CHAR THEN DO\n   IF &OP=OP OR &OP=O THEN SET &PARM=&STR(OVERPRINT)\n   IF &OP=L THEN SET &SOUT=L\n   IF &OP1=L THEN SET &SOUT=L\n   IF &OP=X THEN SET &SOUT=X\n   IF &OP1=A THEN SET &SOUT=A\n   IF &OP=A THEN SET &SOUT=A\n   IF &OP1=X THEN SET &SOUT=X\n   IF &OP1=OP OR &OP1=O THEN SET &PARM=&STR(OVERPRINT)\n   IF &OP1=M OR &OP1=MIS OR &OP1=MISPRT1 THEN +\n      SET &DEST=MISPRT1\n   IF &OP=M OR &OP=MIS OR &OP=MISPRT1 THEN +\n      SET &DEST=MISPRT1\n   IF &DATATYPE(&OP1)=NUM THEN SET &COPIES=&STR(COPIES(&OP1))\n  END\n                       ELSE DO\n   IF &OP\u00ac=  THEN SET &COPIES=&STR(COPIES(&OP))\n   IF &OP1=M OR &OP1=MIS OR &OP1=MISPRT1 THEN +\n      SET &DEST=MISPRT1\n   IF &OP1=L THEN  SET &CL=&STR(CLASS(L))\n  END\n\nIF &MEM\u00ac=  THEN SET &MEM=&STR((&MEM))\n\nDDD SYSUT1 '&DSN.&MEM' SHR\nDDD SYSUT2  SYSOUT(&SOUT) DEST(&DEST) &COPIES &CL\nCALL 'HEDGESM.LINKLIB(DATE&SUFF)' '&PARM'\nFREE DD(SYSUT1,SYSUT2)\n\nSET &ZEDSMSG = &STR(&MEM SAVED+PRINTED)\nSET &ZEDLMSG = &STR(&DSN.&MEM SAVED AND PRINTED ON &DEST &COPIES)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$EXEC": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: EXECUTE THE CURRENTLY EDITING CLIST                     */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nEX '&DSN.(&MEM)'\nSET &RC=&LASTCC\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$GENER": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: CREATES JCL TO SUBMIT JOB FOR PGM=SYSGENER              */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X()\nCONTROL MAIN\nISREDIT MACRO (CLASS)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nISREDIT (LRECL) =  LRECL\nISREDIT (RECFM) =  RECFM\n\nSUBMITIT: +\nIF &CLASS=  THEN SET &CLASS=A\nIF &MEM \u00ac=  THEN SET &MEM=&STR((&MEM))\nSET &NAME=&SUBSTR(1:&LENGTH(&ID)-1,&ID)\nSUBMIT * END($$)\n//&NAME JOB (000000,TECH),'&NAME-TECH',\n//      CLASS=Z,MSGCLASS=X,NOTIFY=&ID\n//GENER   EXEC  PGM=SYSGENER\n//SYSUT1   DD   DSN=&DSN.&MEM,DISP=SHR\n//SYSUT2   DD   SYSOUT=&CLASS,\n//         DCB=(&DSN,DSORG=PS)\n$$\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$HASPSRC": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: EDIT 'SYS1.HASPSRC' FILE WITH OPTIONAL MEMBER           */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (MEMBER)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &MEMBER\u00ac=  THEN IF &SYSDSN('SYS1.HASPSRC(&MEMBER)')=OK THEN +\n   ISPEXEC BROWSE DATASET('SYS1.HASPSRC(&MEMBER)')\n              ELSE +\nISPEXEC BROWSE DATASET('SYS1.HASPSRC')\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$IEHMAP": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\"\\x00\"\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: SUBMIT A BATCH JOB TO MAP A PACK                        */\n/*                                                                   */\n/* NOTE:                                                             */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL SYM CON LIST MSG NOFLUSH\nISREDIT MACRO (VOLUME)\nISPEXEC CONTROL ERRORS RETURN\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nDDD O '&ID..MAP' NEW DSORG(PS)\nOPENFILE O OUTPUT\nSET O=&STR( MAP VOL=&VOLUME)\nPUTFILE O\nCLOSFILE O\nFREE DD(O)\n\nSUBMIT * END($$)\n//&ID.A  JOB\n//IEHMAP  EXEC  PGM=IEHMAP,REGION=512K\n//SYSPRINT DD   SYSOUT=(,)\n//SYSUDUMP DD   SYSOUT=(,)\n//DD1      DD   UNIT=SYSDA,DISP=SHR,VOL=SER=&VOLUME\n//SYSIN    DD   DSN=&ID..MAP,DISP=(OLD,DELETE)\n/*\n//\n$$\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$JOB": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00?\\x00?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: ENTERS JOBCARD                                          */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X()\nCONTROL MAIN NOCAPS\nISREDIT MACRO (HOLD)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\n/* FIND OUT THE NUMBER OF LINES IN THE DATASET  */\nISREDIT (TOP,BOT) = DISPLAY_LINES\nSET &PNT=0\nSET &ID=&SYSUID\nIF &DSN=&STR(SYS1.PROCLIB) OR &DSN=&STR(SYS1.PRODPROC) OR +\n   &DSN=&STR(SYS1.TESTPROC) OR +\n   &DSN=&STR(SYS1.PROC) OR &DSN=&STR(SYS1.TEST.PROC) THEN GOTO PROC\nIF &ID=HEDGESM OR &ID=HEDGESX THEN SET &BIN=&STR(BN31)\nIF &ID=KASIERS THEN SET &BIN=&STR(BN20)\nISREDIT LINE_AFTER &PNT = \"//&MEM   JOB (000000,&BIN),'&ID',\"\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = '//            CLASS=Z,MSGCLASS=X,'\nSET &PNT=&PNT+1\nSET &X=\nIF &HOLD=HOLD THEN SET &X=&STR(,TYPRUN=HOLD)\nIF &HOLD=SCAN THEN SET &X=&STR(,TYPRUN=SCAN)\nISREDIT LINE_AFTER &PNT = '//            NOTIFY=&ID.&X'\nSET &PNT=&PNT+1\nGOTO COMMENTS\nPROC:  +\nISREDIT LINE_AFTER &PNT = '//&MEM     PROC'\nSET &PNT=&PNT+1\nCOMMENTS: +\nISREDIT LINE_AFTER &PNT= +\n'//*-----------------------------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//*   LIB: &DSN.(&MEM)'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n\"//*   DOC:                                                          *\"\nSET &PNT=&PNT+1\nSET &DT=&STR(&SYSDATE...&SYSTIME)\nISREDIT LINE_AFTER &PNT= +\n\"//*  NOTE: &DT \"\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//*                                                                 *'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//*-----------------------------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LABEL .ZLAST = .PNT\nISREDIT INSERT .PNT\nISREDIT (LLINE) = LINENUM  .PNT\nISREDIT LOCATE &LLINE\nISREDIT UP MAX\nISREDIT LEFT  MAX\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$JUL": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE022"}, "text": "PROC 0\nCONTROL MAIN\nISREDIT MACRO (DATE)\nJUL &DATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LC": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xa0\\x00\\xa0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "FILE022"}, "text": "PROC 0 NOALL TEST\nCONTROL MAIN\nISREDIT MACRO (TYPE,L)\nATTR A LRECL(125) BLKSIZE(629) RECFM(V B A) DSORG(PS)\nDDD OFILE '$' SP(1,1) CYL USING(A) MOD\nOPENFILE OFILE OUTPUT\nSET OFILE=&STR(   LISTC &T ALL OFILE(OFILE))\nPUTFILE OFILE\nCLOSFILE OFILE\nIF &TYPE= OR &TYPE=ALL THEN DO\n   SET &P=&SYSPREF\n   IF &P=   THEN PROF PREF(&SYSUID)\n   LISTCAT &TYPE OFILE(OFILE)\n   SET &RC=&LASTCC\n   IF &P=   THEN PROF NOPREFIX\n   IF &RC\u00ac=0 THEN GOTO FREEM\n   SET &DDNAME=OFILE\n   IF &TEST\u00ac=TEST THEN GOTO REVIEWM\nNEWSTUFF: DDD OFILE 'HEDGESM.IDCAMS'\nDDD SYSOUT '$' NEW LRECL(121) RECFM(F B A) DSORG(PS) BLKSIZE(23474)\nOPENFILE SYSOUT   OUTPUT\nOPENFILE OFILE INPUT\nERROR GOTO CLOSE\nCONTROL LIST SYM CON NOFLUSH MSG\nLOOP: GETFILE OFILE\n      IF &SUBSTR(1:1,&OFILE)=1 THEN GOTO LOOP\n      IF &SUBSTR(1:8,&OFILE)=&STR(0NONVSAM) THEN DO\n         SET &DSN=&SUBSTR(18:&LENGTH(&OFILE),&OFILE)\n         SET &A=3\n         DO WHILE (&A\u00ac=0)\n            LOOP2: GETFILE OFILE\n                   IF &SUBSTR(1:1,&OFILE)=1 THEN GOTO LOOP2\n                   SET &A=&A-1\n           END\n         IF &SUBSTR(38:45,&OFILE)=&STR(CREATION) THEN DO\n            SET &YY=&SUBSTR(56:57,&OFILE)\n            SET &DDD=&SUBSTR(59:61,&OFILE)\n          END\n         SET &A=3\n         DO WHILE (&A\u00ac=0)\n            LOOP3: GETFILE OFILE\n                   IF &SUBSTR(1:1,&OFILE)=1 THEN GOTO LOOP3\n                   SET &A=&A-1\n           END\n         IF &SUBSTR(9:14,&OFILE)=&STR(VOLSER) THEN +\n            SET &VOL=&SUBSTR(27:33,&OFILE)\n      END\n      IF &DSN\u00ac=   THEN DO\n         SET &DD=&STR(&DDD)\n         SET &X=&YY/4\n         SET &Y=&X*4\n         IF &Y=&YY THEN SET &L=1   /* LEAP YEAR  */\n                   ELSE SET &L=0\n         SET &MON=01\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=02\n         SET &DDD=&DDD-28-&L\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+28+&L\n            GOTO WRITE\n           END\n         SET &MON=03\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=04\n         SET &DDD=&DDD-30\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+30\n            GOTO WRITE\n           END\n         SET &MON=05\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=06\n         SET &DDD=&DDD-30\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+30\n            GOTO WRITE\n           END\n         SET &MON=07\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=08\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=09\n         SET &DDD=&DDD-30\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+30\n            GOTO WRITE\n           END\n         SET &MON=10\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         SET &MON=11\n         SET &DDD=&DDD-30\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+30\n            GOTO WRITE\n           END\n         SET &MON=12\n         SET &DDD=&DDD-31\n         IF &DDD<0 THEN DO\n            SET &DDD=&DDD+31\n            GOTO WRITE\n           END\n         WRITE: +\n         SET SYSOUT=&STR( &DSN.  &VOL  &YY.&DD  OR  &MON/&DDD/&YY)\n         PUTFILE SYSOUT\n        END\n      SET &DSN=\n\n      GOTO LOOP\nCLOSE: ERROR OFF\n       CLOSFILE OFILE\n       CLOSFILE SYSOUT\n       FREE DD(OFILE)\n       SET &DDNAME=SYSOUT\n       GOTO REVIEWM\n   EXIT\n  END\n\nIF &L=L THEN SET &T=&STR(LVL(&TYPE))\n        ELSE SET &T=&STR(ENT('&TYPE'))\nLISTC &T ALL OFILE(OFILE)\n\nIF &LASTCC\u00ac=0 THEN GOTO FREEM\nSET &DDNAME=OFILE\n\nREVIEWM: +\nISPEXEC  LMINIT  DATAID(ID1) DDNAME(&DDNAME)\nISPEXEC  BROWSE  DATAID(&ID1)\nISPEXEC  LMFREE  DATAID(&ID1)\n\nWRITENR TO PRINT ENTER (Y/N):&STR( )\nREAD &A\nIF &A=Y THEN PRINTODD &DDNAME DEST(MISPRT1) ASIS\nFREEM: +\nFREE DD(OFILE,A)\nIF &DDNAME=SYSOUT THEN  FREE DD(SYSOUT)\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LD": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: LISTD 'DATASET'                                         */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (DA,M)\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &DA=  THEN SET &DA=&STR('&DSN')\nIF &SUBSTR(1:1,&DA)\u00ac=&STR(') THEN +\n   SET &DA=&STR('&SYSUID..&DA')\nIF &SYSDSN(&DA)\u00ac=OK THEN EXIT CODE(12)\nIF &M\u00ac=    THEN SET &M=MEM\nLISTD &DA ST HI LABEL &M\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LDI": {"ttr": 789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\"\\x00\"\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "FILE022"}, "text": "PROC 1 DSN\nCLEAR\nCONTROL LIST MSG NOFLUSH\nLISTDSI '&DSN' DIRECTORY\nSET &RC=&LASTCC\nWRITE         - DSN   = &SYSDSNAME\nWRITE         - VOL   = &SYSVOLUME\nWRITE         - UNIT  = &SYSUNIT\nWRITE         - DSORG = &SYSDSORG\nWRITE         - RECFM = &SYSRECFM\nWRITE         - LRECL = &SYSLRECL\nWRITE         - BLKZ  = &SYSBLKSIZE\nWRITE         - Key   = &SYSKEYLEN\nWRITE         - Alloc = &SYSALLOC\nWRITE         - Used  = &SYSUSED  in units\nWRITE         - Prim. = &SYSPRIMARY in units\nWRITE         - Sec.  = &SYSSECONDS in units\nWRITE         - Units = &SYSUNITS\nWRITE         - Extnt = &SYSEXTENTS\nWRITE         - Cdate = &SYSCREATE\nWRITE         - Rdate = &SYSREFDATE\nWRITE         - Edate = &SYSEXDATE\nWRITE         - PSWD  = &SYSPASSWORD\nWRITE         - RACF  = &SYSRACFA\nWRITE         - Chng. = &SYSUPDATED\nWRITE         - Trk/Cyl = &SYSTRKSCYL\nWRITE         - Blk/Trk = &SYSBLKSTRK\nWRITE         - Dir alloc = &SYSADIRBLK\nWRITE         - Dir used = &SYSUDIRBLK\nWRITE         - #members = &SYSMEMBERS\nWRITE         - LASTCC = &RC\nWRITE         - Reason = &SYSREASON\nWRITE         - Msg 1  = &SYSMSGLVL1\nWRITE         - Msg 2  = &SYSMSGLVL2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$LISTLVL": {"ttr": 791, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: ADD JCL ONTO ASSEMBLER SOURCE CODE FOR ASSEM/LINK       */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 P( )\nCONTROL MAIN\nISREDIT MACRO (NAME)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &NAME\u00ac= THEN DO\n   SET &P=&SYSPREF\n   PROFILE PREFIX(&NAME)\n  END\n\nLISTC\n\nIF &P\u00ac=  THEN PROFILE PREFIX(&P)\n\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LM": {"ttr": 793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: ISSUES A 'LISTMEM' FOR THE CURRENT DATASET              */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (MASK)\nISREDIT (DSN) =  DATASET\nIF &MASK\u00ac=  THEN SET &MASK=&STR(M(&MASK))\nLM '&DSN' &MASK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LS": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: LIST SPACE ON VTOCS                                     */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (VOLS)\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nCLEAR\nIF &VOLS=KEEP OR &VOLS=K THEN DO\n   DDD SYSPRINT '$' NEW BLKSIZE(8100) +\n       LRECL(81) DSORG(PS) RECFM(F B)\n   LSPUT\n   REV SYSPRINT FILE\n   DDD SYSPRINT *\n   EXIT\n  END\n\nLS &VOLS\n\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$MACLIB": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: EDIT 'SYS1.MACLIB' FILE WITH OPTIONAL MEMBER            */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (MEMBER)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &MEMBER\u00ac=  THEN IF &SYSDSN('SYS1.MACLIB(&MEMBER)')=OK THEN +\n   ISPEXEC BROWSE DATASET('SYS1.MACLIB(&MEMBER)')\n              ELSE +\nISPEXEC BROWSE DATASET('SYS1.MACLIB')\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PEND": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: ADDS A JOB CARD AND A PEND AND AN EXEC TO               */\n/*           CREATE AN IN STREAM FROM A PROC                         */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nISREDIT MACRO (SCAN)\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nSET &PNT=1\nSET &ID=&SYSUID\nISREDIT LINE_BEFORE &PNT = \"//&MEM JOB (000000,TECH),'&ID',\"\nSET &PNT=&PNT+1\nIF &SCAN\u00ac=  THEN +\nISREDIT LINE_BEFORE &PNT = +\n'//       CLASS=Z,MSGCLASS=X,NOTIFY=&ID,TYPRUN=SCAN'\nELSE +\nISREDIT LINE_BEFORE &PNT = '//       CLASS=Z,MSGCLASS=X,NOTIFY=&ID'\nISREDIT LABEL .ZLAST = .PNT\nISREDIT LINE_AFTER .PNT  = '//   PEND '\nISREDIT LABEL .ZLAST = .PNT\nISREDIT LINE_AFTER .PNT = '//   EXEC  &MEM'\nISREDIT LABEL .ZLAST = .PNT\nISREDIT UP MAX\nISREDIT LEFT  MAX\nISREDIT CURSOR = 1 0\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$PRINT": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x000\\x000\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: PRINTS CURRENT MEMBER                                   */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X() HEADING( )\nCONTROL MAIN\n/*CONTROL LIST SYM CON MSG NOFLUSH*/\nISREDIT MACRO (COPIES,NO)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &MEM\u00ac=   THEN SET &DSN=&STR(&DSN.(&MEM))\nIF &SYSDSN('&DSN')\u00ac=OK THEN DO\n   WRITE\n   WRITE PLEASE 'SAVE' THIS FILE THEN RETRY COMMAND\n   WRITE\n   EXIT\n  END\nIF &LASTCC=0 AND &MEM\u00ac=  THEN SET &MEM=&STR((&MEM))\nIF &NO=NO OR &NO=NOHEADING OR &NO=NOHEADINGS THEN +\n   SET &HEADING=NOHEADING\nSET &DEST=&STR(DEST(MISPRT1))\nIF &DATATYPE(&COPIES)=NUM THEN SET &COPIES=&STR(COPIES(&COPIES))\nIF &COPIES\u00ac=  AND &DATATYPE(&COPIES)=CHAR THEN DO\n   SET &DEST=\n   IF &COPIES=F THEN SET &DEST=&STR(DEST(FINANCE))\n   IF &COPIES=A THEN SET &DEST=\n   IF &COPIES=M THEN SET &DEST=&STR(DEST(MISPRT1))\n   IF (&COPIES\u00ac=F AND &COPIES\u00ac=M) AND &COPIES\u00ac=  THEN  +\n      SET &DEST=&STR(CLASS(&COPIES))\n   SET &COPIES=\n  END\n\nCONTROL LIST MSG NOFLUSH\nPRINTOFF '&DSN' &DEST  &COPIES &HEADING\nCONTROL NOLIST MSG NOFLUSH\n\nIF &DEST\u00ac=  THEN SET &DEST=&SUBSTR(6:&LENGTH(&DEST)-1,&DEST)\n\nSET &ZEDSMSG = &STR(PRINTED &DEST)\nSET &ZEDLMSG = &STR(&DSN ON PRINTER &DEST)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PROCLIB": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: EDIT 'SYS1.PROCLIB' FILE WITH OPTIONAL MEMBER           */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (MEMBER)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\nIF &MEMBER\u00ac=  AND &LENGTH(&MEMBER) < 9 THEN +\nISPEXEC EDIT DATASET('SYS1.PROCLIB(&MEMBER)')\n              ELSE +\nISPEXEC EDIT DATASET('SYS1.PROCLIB')\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RECEIVE": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00w\\x00w\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 119, "newlines": 119, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: ENTERS COMMENTS PER DSN AND MEMBER NAME                 */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0 X()\nCONTROL MAIN\nISREDIT MACRO (HOLD)\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (MEM) =  MEMBER\n/* FIND OUT THE NUMBER OF LINES IN THE DATASET  */\nISREDIT (TOP,BOT) = DISPLAY_LINES\nSET &PNT=0\nSET &ID=&SYSUID\nISREDIT LINE_AFTER &PNT = \"//&MEM   JOB (000000),'&ID',\"\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT = '//            CLASS=Z,MSGCLASS=X,'\nSET &PNT=&PNT+1\nSET &X=\nIF &HOLD=HOLD THEN SET &X=&STR(,TYPRUN=HOLD)\nIF &HOLD=SCAN THEN SET &X=&STR(,TYPRUN=SCAN)\nISREDIT LINE_AFTER &PNT = '//            NOTIFY=&ID.&X'\nSET &PNT=&PNT+1\nGOTO COMMENTS\nPROC:  +\nISREDIT LINE_AFTER &PNT = '//&MEM     PROC'\nSET &PNT=&PNT+1\nCOMMENTS: +\nISREDIT LINE_AFTER &PNT= +\n'//*-----------------------------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT='//*   LIB: &DSN.(&MEM)'\nSET &PNT=&PNT+1\nWRITE ENTER PRODUCT TO RECEIVE FOR  &MEM\nWRITENR >&STR( )\nREAD\nISREDIT LINE_AFTER &PNT=\"//*   DOC: RECEIVE &SYSDVAL\"\nSET &PNT=&PNT+1\nSET &DT=&STR(&SYSDATE...&SYSTIME)\nISREDIT LINE_AFTER &PNT=\"//*  NOTE: &DT  \"\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//*                                                                 *'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//*-----------------------------------------------------------------*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//RECEIVE  EXEC  SMPE'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//SMPPTFIN  DD   DSN=SMPMCS,DISP=OLD,UNIT=TAPE,     '\nSET &PNT=&PNT+1\nWRITE ENTER VOLSER\nWRITENR >&STR( )\nREAD &VS\n\nIF &HOLD=SERVICE OR &HOLD=MAINT THEN DO\nISREDIT LINE_AFTER &PNT= +\n'//          LABEL=(1,NL,EXPDT=98000),VOL=SER=&VS,'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//          DCB=(LRECL=80,BLKSIZE=7200,REXFM=FB)'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//          DD   DSN=F3,DISP=OLD,UNIT=TAPE,       '\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//          LABEL=(3,NL,EXPDT=98000),VOL=SER=&VS,'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//          DCB=(LRECL=80,BLKSIZE=7200,REXFM=FB)'\nSET &PNT=&PNT+1\nEND\n                     ELSE DO\nISREDIT LINE_AFTER &PNT= +\n'//          LABEL=(1,SL,EXPDT=98000),VOL=SER=&VS,'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//          DCB=(LRECL=80,BLKSIZE=7200,REXFM=FB)'\nSET &PNT=&PNT+1\nEND\n\nISREDIT LINE_AFTER &PNT= +\n'//SMPCNTL   DD  *'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'  SET BDY(GLOBAL).     '\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'      RECEIVE          '\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'              SYSMODS          '\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'              LIST             '\nSET &PNT=&PNT+1\nWRITE ENTER SOURCEID PARM FOR SMP/E\nWRITENR >&STR( )\nREAD &SRCID\nISREDIT LINE_AFTER &PNT= +\n'              SOURCEID(&SRCID) '\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'              .'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'/*'\nSET &PNT=&PNT+1\nISREDIT LINE_AFTER &PNT= +\n'//'\nISREDIT UP MAX\nISREDIT LEFT  MAX\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$SPACE": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00)\\x00)\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "FILE022"}, "text": "PROC 0 TAPE CART VB RC(0)\nISREDIT MACRO (LRECL,TAPE,VB)\nIF &LRECL=  THEN DO\n   WRITENE ENTER LRECL:&STR( )\n   READ &LRECL\n   IF &LRECL=  THEN EXIT\n END\nIF &TAPE=VB THEN SET &VB=VB\nIF &VB=TAPE THEN SET &TAPE=TAPE\nIF &VB=VB THEN SET &LRECL=&LRECL+4     /* RECORD DESCRIPTOR WORD */\nIF &TAPE=TAPE OR &CART=CART THEN GOTO TAPEPROC\nSET &BLK=47476/&LRECL\nSET &BLK=&BLK/2\n/* BLKSIZE=23476 HIGH-WATER-MARK */\nSET &BLK=&BLK*&LRECL\nIF &BLK>23476 THEN DO\n   DO WHILE &BLK>23476\n      SET &BLK=&BLK-&LRECL\n     END\n  END\n/* VARIABLE LENGTH ADD 4 */\nIF &VB=VB THEN SET &BLK=&BLK+4\nIF &BLK>23476 THEN SET &BLK=&BLK-&LRECL\n\nSET &ZEDSMSG = &STR(&LRECL / &BLK )\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n\n/* TAPE OR CART PROCESSING.  NOTE: MAX BLKSIZE=32756/32760 */\nTAPEPROC: +\nSET &BLK=32760/&LRECL\n/* VARIABLE LENGTH SUB 4 */\nIF &VB=VB THEN SET &BLK=&BLK-4\nSET &BLK=&BLK*&LRECL\nIF &BLK>32760 THEN SET &BLK=&BLK-&LRECL\n\nSET &ZEDSMSG = &STR(&LRECL / &BLK - TAPE)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$STCK": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xdd\\x00\\xdd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 221, "newlines": 221, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&LABEL   $STCK  &GEN=GEN\n         LCLC   &L\n         GBLB   &SETI\n&L       SETC  '&SYSNDX'\n.**********************************************************************\n.****                                                             *****\n.****    THIS MACRO WILL PROVIDE THE DAY, DATE, AND TIME FROM     *****\n.****    THE TIME-OF-DAY CLOCK IN GREGORIAN (ENGLISH) FORMAT.     *****\n.****                                                             *****\n.****   XDAY    DS   X      A BINARY NUMBER (HEX) RELATIVE TO     *****\n.****                       THE DAY OF THE WEEK AS FOLLOWS        *****\n.****                       0=MONDAY, 1=TUESDAY, 2=WEDNESDAY,     *****\n.****                       3=THURSDAY, 4=FRIDAY,                 *****\n.****                       5=SATURDAY, 6=SUNDAY                  *****\n.****                                                             *****\n.****   XWEEKDAY DC  CL9    A CHAR REP OF DAY-OF-WEEK             *****\n.****                       'MONDAY'-'SUNDAY'                     *****\n.****                                                             *****\n.****   XMONTH   DC  CL9    A CHAR REP OF MONTH-OF-YEAR           *****\n.****                       'JANUARY'-'DECEMBER'                  *****\n.****                                                             *****\n.****                                                             *****\n.****   XDATE   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE DATE IN MM/DD/YY FORMAT           *****\n.****                                                             *****\n.****   XJDATE  DS   CL6    AN SIX CHARACTER FIELD CONTAINING     *****\n.****                       THE DATE IN YY.DDD                    *****\n.****                                                             *****\n.****   XTIME   DS   CL8    AN EIGHT CHARACTER FIELD CONTAINING   *****\n.****                       THE TIME IN HH:MM:SS FORMAT           *****\n.****                                                             *****\n.****    NOTE THAT THE CALLER MUST PROVIDE A REGISTER SAVE AREA   *****\n.****    THAT BEGINS ON A DOUBLEWORD BOUNDARY TO BE USED AS A     *****\n.****    WORK AREA BY THIS ROUTINE (R-13 BASED).                  *****\n.****                                                             *****\n.**********************************************************************\n         AIF   ('&GEN' EQ 'NOGEN').NOGEN\n         AGO   .START\n.NOGEN   ANOP\n         PUSH PRINT\n         PRINT OFF\n.START   ANOP\n         AIF   ('&LABEL' EQ '').NOLAB\n&LABEL   EQU   *\n.NOLAB   ANOP\n         STM   0,15,SV&L\n         STCK  8(13)              STORE THE TIME-OF-DAY CLOCK\n         LM    0,1,8(13)          LOAD INTO WORK REGS\n         L     15,16              GET CVT ADDRESS\n         A     0,304(15)          ADD LOCAL TIME DEVIATION\n         SRDL  0,12               ISOLATE NUMBER OF MICROSECONDS\n         D     0,MIN60            DIVIDE BY 60M (R1=MINUTES AFT EPOCH)\n         LR    15,0               COPY REMAINDER OF MICS TO GET SECS\n         SR    14,14              CLEAR FOR DIVIDE\n         D     14,SECR            DIVIDE TO GET REMAINING SECONDS (R5)\n         LR    14,15              COPY TO WORK REG\nS&L.B    SL    14,SEC60           DECREMENT BY 60 SECONDS\n         BM    S&L.S              LESS THAN SIXTY, CONTINUE\n         SL    15,SEC60           MORE THAN SIXTY, ADJUST FOR LEAP\n         AL    1,=F'1'            BUMP MINUTES\n         B     S&L.B              CHECK AGAIN\nS&L.S    CVD   15,8(13)           CONVERT SECONDS TO PACKED FORMAT\n         UNPK  24(4,13),14(2,13)  UNPACK SECONDS FOR PRINT\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   XTIME+6(2),26(13)   MOVE THE SECONDS\n         CVD   1,8(13)            CONVERT MINUTES TO PACKED FORMAT\n         DP    8(8,13),PACK60     DIVIDE INTO HOURS AND MINUTES\n         UNPK  24(4,13),14(2,13)  UNPACK THE MINUTES\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   XTIME+3(2),26(13)   MOVE THE MINUTES\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),PACK24     DIVIDE INTO DAYS AND HOURS\n         UNPK  24(4,13),14(2,13)  UNPACK THE HOURS\n         OI    27(13),X'F0'       SET UP FOR PRINTING\n         MVC   XTIME(2),26(13)     MOVE THE HOURS\n         MVI   XTIME+2,C':'        ADD COLIN\n         MVI   XTIME+5,C':'        ADD COLIN\n         ZAP   8(8,13),8(6,13)    RESET TO FULL LENGTH\n         DP    8(8,13),PACK7      DIVIDE BY NUMBER OF DAYS IN A WEEK\n         ZAP   8(8,13),15(1,13)   FILL DOUBLEW WITH THE REMAINDER\n         CVB   0,8(13)            CONVERT RELATIVE DAY TO BINARY\n         STC   0,XDAY              SET RELATIVE DAY OF WEEK\n.* CODE ADDED BY MVH\n         CLI   XDAY,X'00'         MONDAY ?\n         BE    MON&L\n         CLI   XDAY,X'01'         TUESDAY ?\n         BE    TUE&L\n         CLI   XDAY,X'02'         WEDNESDAY ?\n         BE    WED&L\n         CLI   XDAY,X'03'         THURSDAY ?\n         BE    THR&L\n         CLI   XDAY,X'04'         FRIDAY ?\n         BE    FRI&L\n         CLI   XDAY,X'05'         SATURDAY ?\n         BE    SAT&L\n         MVC   XWEEKDAY(9),=CL9'SUNDAY'\n         B     ZAP&L\nMON&L    MVC   XWEEKDAY(9),=CL9'MONDAY'\n         B     ZAP&L\nTUE&L    MVC   XWEEKDAY(9),=CL9'TUESDAY'\n         B     ZAP&L\nWED&L    MVC   XWEEKDAY(9),=CL9'WEDNESDAY'\n         B     ZAP&L\nTHR&L    MVC   XWEEKDAY(9),=CL9'THURSDAY'\n         B     ZAP&L\nFRI&L    MVC   XWEEKDAY(9),=CL9'FRIDAY'\n         B     ZAP&L\nSAT&L    MVC   XWEEKDAY(9),=CL9'SATURDAY'\n.**** END OF ADDED CODE\nZAP&L    ZAP   16(8,13),8(8,13)   SAVE THE NUMBER OF DAYS\n         L     1,16               GET CVT ADDRESS\n.* EDIT CVT-DATE\n         MVC   XTEMP(4),57(1)     EDIT CVT DATE\n         ED    XJDATE-1(7),XTEMP    EDIT CVT DATE\n.* LOAD PACKED CVT DATE\n         MVC   24(4,13),57(1)     MOVE CVT DATE TO WORK AREA\n         ZAP   8(8,13),PACK0      ZERO WORK AREA\n         MVO   14(2,13),24(1,13)  MOVE YEAR PORTION\n         UNPK  XDATE+6(2),14(2,13) UNPACK INTO OUTPUT AREA\n         LA    15,S&L.T           LOAD ADDR OF TABLE\n         CVB   1,8(13)            CONVERT TO BIN\n         SLL   1,30               SHIFT ALL BUT LAST TWO\n         LTR   1,1                TEST RESIDUAL\n         BNZ   *+8                NOT 0, BRANCH\n         LA    15,S&L.TL          LEAP YEAR\n         LR    14,15              SAVE TABLE IN USE\n         ZAP   8(8,13),25(2,13)   MOVE DAY PORTION\n         CVB   0,8(13)            CONVERT TO BIN\n         SR    1,1                CLEAR REG\n         IC    1,0(15)            LOAD CHAR FROM TABLE\n         LA    15,1(15)           INDEX TABLE POINTER\n         SR    0,1                SUBTRACT FROM WORK VALUE\n         BP    *-10               STILL POSITIVE, DO AGAIN\n         AR    0,1                ELSE, ADD IT BACK\n         CVD   0,8(13)            CONVERT TO DEC\n         UNPK  XDATE+3(2),14(2,13) UNPACK DAY INTO OUTPUT\n         SR    15,14              FIND VALUE OF CURRENT INDEX\n         CVD   15,8(13)           CONVERT TO DEC\n         UNPK  XDATE(2),14(2,13)   UNPACK MONTH INTO OUTPUT\n         OI    XDATE+1,C'0'        INSURE NUMERICS\n         OI    XDATE+4,C'0'        INSURE NUMERICS\n         OI    XDATE+7,C'0'        INSURE NUMERICS\n         MVI   XDATE+2,C'/'        ADD SLASH\n         MVI   XDATE+5,C'/'        ADD SLASH\n.* ADDED CODE FOR XMONTH - MVH\n         CLC   XDATE(2),=C'01'     JAN\n         BE    JAN&L\n         CLC   XDATE(2),=C'02'     FEB\n         BE    FEB&L\n         CLC   XDATE(2),=C'03'     MAR\n         BE    MAR&L\n         CLC   XDATE(2),=C'04'     APR\n         BE    APR&L\n         CLC   XDATE(2),=C'05'     MAY\n         BE    MAY&L\n         CLC   XDATE(2),=C'06'     JUN\n         BE    JUN&L\n         CLC   XDATE(2),=C'07'     JLY\n         BE    JLY&L\n         CLC   XDATE(2),=C'08'     AUG\n         BE    AUG&L\n         CLC   XDATE(2),=C'09'     SEP\n         BE    SEP&L\n         CLC   XDATE(2),=C'10'     OCT\n         BE    OCT&L\n         CLC   XDATE(2),=C'11'     NOV\n         BE    NOV&L\n         MVC   XMONTH(9),=CL9'DECEMBER'\n         B     MEN&L\nJAN&L    MVC   XMONTH(9),=CL9'JANUARY'\n         B     MEN&L\nFEB&L    MVC   XMONTH(9),=CL9'FEBRURAY'\n         B     MEN&L\nMAR&L    MVC   XMONTH(9),=CL9'MARCH'\n         B     MEN&L\nAPR&L    MVC   XMONTH(9),=CL9'APRIL'\n         B     MEN&L\nMAY&L    MVC   XMONTH(9),=CL9'MAY'\n         B     MEN&L\nJUN&L    MVC   XMONTH(9),=CL9'JUNE'\n         B     MEN&L\nJLY&L    MVC   XMONTH(9),=CL9'JULY'\n         B     MEN&L\nAUG&L    MVC   XMONTH(9),=CL9'AUGUST'\n         B     MEN&L\nSEP&L    MVC   XMONTH(9),=CL9'SEPTEMBER'\n         B     MEN&L\nOCT&L    MVC   XMONTH(9),=CL9'OCTOBER'\n         B     MEN&L\nNOV&L    MVC   XMONTH(9),=CL9'NOVEMBER'\nMEN&L    LM    0,15,SV&L\n         B     S&L.E              BRANCH AROUND CONSTANTS\nS&L.T    DC    AL1(31,28,31,30,31,30,31,31,30,31,30,31) MONTH TABLE\nS&L.TL   DC    AL1(31,29,31,30,31,30,31,31,30,31,30,31) LEAP YEAR\n         AIF   (&SETI).MEND\n&SETI    SETB  1\nMIN60    DC    F'60000000'\nSECR     DC    F'951424'\nSEC60    DC    F'60'\nPACK60   DC    P'60'\nPACK24   DC    P'24'\nPACK7    DC    P'7'\nPACK0    DC    P'0'\nSV&L     DS    18F\nXDAY     DC    XL1'00'\nXDATE    DC    CL8'  /  /  '\nXWEEKDAY DC    CL9' '\nXMONTH   DC    CL9' '\nXTIME    DC    CL8'  :  :  '\n*                Y Y . D D D\n         DC    X'40'\nXJDATE   DC    X'21204B202020'\nXTEMP    DC    CL4' '\nS&L.E    DS    0H\n.MEND    AIF   ('&GEN' EQ 'NOGEN').NOGEN2\n         AGO   .SKIP\n.NOGEN2  ANOP\n         POP  PRINT\n         PRINT ON\n.SKIP    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$V": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00$\\x00$\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.2 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE.                             */\n/*                                                                   */\n/* FUNCTION: PERFORM VTOC LISTINGS                                   */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0\nCONTROL MAIN\nISREDIT MACRO (VOLUME,FUNC,NOSORT)\nISPEXEC CONTROL ERRORS RETURN\nSET &ID=&SYSUID\nIF &SYSDSN('&ID..VTOC') = OK THEN SET &DIP=SHR\n                                 ELSE SET &DIP=NEW\nDDD VTOCOUT '&ID..VTOC' &DIP\nIF &FUNC\u00ac=  THEN DO\n   WRITE FUNC=&FUNC\n   IF &SUBSTR(1:1,&FUNC)= L THEN SET &F=LEVEL\n   IF &SUBSTR(1:1,&FUNC)= C THEN SET &F=CONTAINING\n   IF &SUBSTR(1:1,&FUNC)= E THEN SET &F=ENDING\n   SET &FUNC=&STR(&F.&SUBSTR(2:&LENGTH(&FUNC),&FUNC))\n   WRITE FUNC=&FUNC\n  END\nCLEAR\nLS &VOLUME\nIF &VOLUME=PROD THEN SET &VOLUME=&STR((DATA,SYSLB))\nVTOC &VOLUME +\nPRINT(NEW (DSNAME VOL LRECL BLKSZ RFM DSO EX ALLOC PCT CDATE REFDT)) +\n     &FUNC &NOSORT\nISPEXEC BROWSE DATASET('&ID..VTOC')\nWRITENR TO PRINT ENTER 'Y':&STR( )\nREAD &A\nIF &A=Y THEN PRINTO '&ID..VTOC' DEST(MISPRT1) LL(150)\nFREE  DD(VTOCOUT)\nDELETE '&ID..VTOC'\nEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$WHO": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x001\\x001\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n         $WHO   &REG,&DSECTS=YES\n.*------------------------------------------------------------------*\n.*                                                                  *\n.*  MACRO NAME: $WHO                                                *\n.*       PARMS: &REG = RETURN CODE REGISTER                         *\n.*              &DSECTS = YES MACRO WILL ISSUE CVT, IHAPSA, IHAASCB *\n.*                                                                  *\n.*    FUNCTION: THIS CODE DETERMINES WETHER OR NOT THIS PROGRAM IS  *\n.*              RUNNING IN THE FOREGROUND OR BACKGROUND             *\n.*              RC=0 IMPLIES FOREGROUND                             *\n.*              RC=4 IMPLIES BACKGROUND                             *\n.*                                                                  *\n.*                                                                  *\n.*------------------------------------------------------------------*\n         LCLC   &I\n&I       SETC   '&SYSNDX'\n         STM    0,15,SAV&I            * SAVE CALLERS REGS\n         L      2,CVTPTR              * CVT\n         USING  CVTMAP,2              *\n         L      1,CVTTCBP             * CVTTCBP -\n*                                     * ADDR OF A DW&I NEXT+CUR. TCB\n         ST     1,DW&I                * SAVE IT\n         LM     1,3,DW&I              * CVTTCBP - DWORD NEXT+CUR. TCB\n         USING  PSA,3                 * PSA - PREFIXED SAVE AREA\n         L      4,PSAAOLD             * ASCB OLD POINTER.\n         USING  ASCB,4                * ASCB - ADDR SPACE C. B.\n         L      5,ASCBTSB             * ADDR OF TSB\n         LTR    5,5                   * IS IT ZERO ?\n         BZ     *+14                  * YEP, BATCH\n         XR     &REG,&REG             * NOPE, TSO\n         B      *+8                   *\n         LA     &REG,4                * NOTIFY ASSEMBLER BATCH\n         ST     &REG,RTN&I            * SAVE RETURN CODE\n         LM     0,15,SAV&I            * SAVE CALLERS REGS\n         L      &REG,RTN&I\n         B      SKP&I\n         DS     0D\nDW&I     DS     D\nSAV&I    DS     16F\nRTN&I    DS     F\n         AIF    ('&DSECTS' NE 'YES').SKIP\n         CVT    DSECT=YES\n         IHAPSA\n         IHAASCB\n.SKIP    ANOP\nSKP&I     DS   0H\n&SYSECT   CSECT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CATRPT": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00-\\x00-\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "FILE022"}, "text": "//#CATRPT  JOB\n//*-------------------------------------------------------------------*\n//*   THIS JCL RUNS THE 'CATSTRIP' PGM AND THE 'VTOC' PGM, FROM THE   *\n//*    CBT TAPE, AND CAPTURES ALL CATALOG AND VTOC INFORMATION        *\n//*    FROM THE WHOLE SHOP. THEN ITS ALL PROCESSED THROUGH SAS.       *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//LISCAT   EXEC PGM=IDCAMS,REGION=3M\n//SYSPRINT  DD  DSN=&&Q,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(10,1),RLSE),\n//          DCB=(LRECL=125,BLKSIZE=629,RECFM=VBA,DSORG=PS)\n//SYSIN     DD  *\n  LISTCAT  ALL CAT(MASTER.CATALOG)\n  LISTCAT  ALL CAT(UCAT1)\n  LISTCAT  ALL CAT(UCAT2)\n//CATSTRIP EXEC PGM=CATSTRIP\n//STEPLIB   DD DSN=LINKLIB,DISP=SHR\n//LIST      DD DSN=&&Q,DISP=(OLD,DELETE)\n//SYSOUT    DD DSN=&&X,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(10,1))\n//SYSUDUMP  DD SYSOUT=(,)\n//IEFPROC  EXEC PGM=IKJEFT01,   ** TSO LOGON PGM\n//         DYNAMNBR=30,         ** NUMBER OF DYNAMIC ALLOC/SESION\n//         REGION=2M            ** REGION\n//SYSUDUMP DD SYSOUT=(,)\n//SYSPRINT DD SYSOUT=(,)\n//SYSTSPRT DD SYSOUT=(,)\n//SYSTERM  DD SYSOUT=(,)\n//SYSTSPRT DD SYSOUT=(,)\n//SYSOUT   DD SYSOUT=(,)\n//SYSIN    DD DUMMY\n//SYSTSIN  DD *\n//VTOCOUT   DD  DSN=&&VTOC,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(2,1))\n//INPUT     DD  *\nVTOC ALL TRK NOHEADING +\nPRINT(NEW (DSNAME VOLUME DSO EX BLKSZ LRECL REFDT ALLOC UNUSED))\n//SASCATS  EXEC SAS\n//FT11F001  DD  DUMMY   *** NOSOURCE;\n//SYSPRINT  DD  DSN=&&X,DISP=(OLD,DELETE)\n//OUTPUT    DD  DSN=&&T,DISP=(,DELETE),\n//          DCB=(LRECL=121,BLKSIZE=1210,RECFM=FB),\n//          UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSOUT   DD DUMMY\n//VTOCOUT   DD   DSN=&&VTOC,DISP=(OLD,DELETE)\n//SYSIN     DD   DSN=THIS.FILE(SASCATS),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#CSIRPT": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02\\xce\\x02\\xce\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 718, "newlines": 718, "modlines": 0, "user": "FILE022"}, "text": "//#CSIRPT JOB\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* THIS USES SAS TO GET SMP/E STATS FROM VSAM CLUSTER                *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//SAEXPL EXEC SASEXPL,FIRST='MVS/XA',SECOND=FMIDS\n//CSI EXEC SAS\n//SMPCSI     DD  DSN=SYS1.MVSSMPE.CSI,DISP=SHR\n//ZONERPT  DD       SYSOUT=(,)\n//DDEFRPT  DD DUMMY,SYSOUT=(,)\n//DSNRPT   DD DUMMY,SYSOUT=(,)\n//PGMRPT   DD DUMMY,SYSOUT=(,)\n//FMIDRPT  DD       SYSOUT=(,)\n//ASMRPT   DD DUMMY,SYSOUT=(,)\n//SYSMOD   DD DUMMY,SYSOUT=(,)\n//LMODRPT  DD DUMMY,SYSOUT=(,)\n//MACRPT   DD DUMMY,SYSOUT=(,)\n//MODRPT   DD DUMMY,SYSOUT=(,)\n//SRCRPT   DD DUMMY,SYSOUT=(,)\n//DLIBRPT  DD DUMMY,SYSOUT=(,)\n//SRCLTRPT DD DUMMY,SYSOUT=(,)\n//LMODCRPT DD DUMMY,SYSOUT=(,)\n//HOLDRPT  DD DUMMY,SYSOUT=(,)\n//SYSIN    DD *\n* SAS PROGRAM TO READ AND ANALYZE A PTF OUTPUT FROM SMPE ;\n\nOPTIONS MISSING=' ' TIME=MAX LINESIZE=132 ;\n\nDATA CSI(KEEP=IRBRELAX CCACZIDX IRBCATGX IRBOCCRX);\n\nLENGTH TYPE $ 8 SYSMOD $ 8 SYSENT $ 50  SYMTYPE $ 8 CSINAME $ 8 ;\nLENGTH SRCLST $ 8 DLIB $ 8 ATTRX $ 8 LMOD $ 8 MOD $ 8 MAC $ 8 SRC $ 8;\nLENGTH ZONEI $ 8 ZONE $ 8 DDEF $ 8 DSN $ 8 PGM $ 8 FMID $ 8 ASM $ 8;\nLENGTH PARM $ 50 CARD $ 80 HOLD $ 8 LMODCD $ 8;\n* ---------- DEFINE INFILE ---------------;\n  INFILE SMPCSI VSAM LENGTH=KEYLGTH ;\n\n*------------------------------------------------------------;\n* IRBCATG    DESCRIPTION\n   01        ZPOOL1\n   02        ZONE ASSIGNMENT (ZONEINDEX)\n   03\n   04        CATG=CAT\n   05        CATG=REL\n   10        ZONE\n   11        OPTIONS\n   12        DDDEF\n   13        UTILITY\n   14        FMIDSET\n   20        ASSEM\n   21        LMOD\n   22        MAC\n   23        MOD\n   24        SRC\n   25        DLIB\n   26        SYSMOD\n   30        ASM SRC\n   31        LMOD SRC\n   32        HOLD DATA ;\n*------------------------------------------------------------;\n* IRBRELA    DESCRIPTION           IRBRELA       DESCRIPTION\n* -------    ------------          ---------     --------------;\n* X'0101'      MAIN CSI             X'2001'      ASM SECURITY\n* X'0201'      ZONE INDEX CODE      X'2010'      ASM BACKUP\n* X'0301'      RDE  CODE            X'2100'      LMOD SECURITY\n* X'0401'           CODE            X'2101'      LMOD ATTR\n* X'0501'           CODE            X'2110'      LMOD BACKUP\n* X'1000'      ZONE SECURITY        X'2113'      LOADLIB\n* X'1001'      ZONE INDEX           X'2200'      MAC SECURITY\n* X'1020'      ZONE RELATED         X'2201'      MAC  FMID\n* X'1021'      ZONE SREL            X'2202'      MAC RMID\n* X'1022'      ZONE FMID            X'2210'      MAC BACKUP\n* X'1027'      ZONE OPTIONS         X'2211'      MAC DLIB\n* X'1172'      AMS IDCAMS UCLIN     X'2213'      MAC LIB\n* X'1173'      ASSEMBLER            X'2230'      GENASM\n* X'1174'      COMP                 X'2240'      ALIAS\n* X'1175'      IEBCOPY              X'2250'      UMID\n* X'1177'      LINKAGE EDITOR       X'2300'      MOD SECURITY\n* X'1178'      RETRY (IEBCOPY)      X'2301'      MOD FMID\n* X'1179'      UPDATE (IEBUPDTE)    X'2302'      MOD RMID\n* X'117A'      SZAP (IMASPZAP)      X'2310'      MOD BACKUP\n* X'117B'      NUCID                X'2311'      MODDLIB\n* X'1180'      UCLIN PAGELEN        X'2313'      MOD ATTR\n* X'1181'      UCLIN PREMAX         X'2340'      CSECT\n* X'1182'      PURGE/NOPURGE        X'2341'      CSECT LMODE\n* X'1183'      REQUEST/NOREQUEST    X'2342'      TALIAS\n* X'1188'      RETRY DDNAME         X'2343'      DALIAS\n* X'1190'      SAVEMTS              X'2350'      UPDATE ID (UMID)\n* X'1191'      SAVESTS              X'2401'      SRC FMID\n* X'1192'      DSSPACE              X'2402'      SRC RMID\n* X'1193'      DSPREFIX             X'2410'      SRC BACKUP\n* X'1201'      DSN=                 X'2411'      SRC DLIB\n* X'1202'      VOL=SER=             X'2413'      SRC LIB\n* X'1203'      UNIT=                X'2450'      SRC UMID\n* X'1209'      CONCAT DD            X'2500'      DLIB SECURITY\n* X'1210'      DISP=                X'2501'      DLIB BACKUP\n* X'1301'      PGM=                 X'2513'      COPY LIB\n* X'1302'      PARM=\n* X'1303'      DDN= (PRINT)\n* X'1304'      RETURN CODE\n* X'1401'      SETFMID ;\n* X'2600'      SYSMOD SECURITY      X'26A9'      VERSION\n* X'2601'      SYSMOD TYPE          X'26B1'      MOD\n* X'2602'      SYSMOD ATTRIBUTE     X'26B2'      ZAP\n* X'2611'      DELBY                X'26B3'      XZAP\n* X'2612'      LSUBBY               X'26B4'      MAC\n* X'2630'      BACKUP               X'26B5'      MACU\n* X'2631'      FMID                 X'26B6'      SRC\n* X'2632'      RECDATE              X'26B7'      SRCU\n* X'2633'      INSDATE              X'26C1'      ASM\n* X'2635'      RSTDATE              X'26C2'      APPLY ID\n* X'2636'      UCLDATE              X'26C3'      ACCEPT ID\n* X'2637'      DSN=                 X'26D1'      RMOD\n* X'2638'      # OF REL FILE        X'26D2'      RZAP\n* X'2639'      SECID                X'26D3'      RXZAP\n* X'263A'      FESN                 X'26D4'      RMAC\n* X'26A1'      VSREC                X'26D5'      RMACU\n* X'26A2'      VFMID                X'26D6'      RSRC\n* X'26A3'      VPRE                 X'26D7'      RSRCU\n* X'26A4'      VNPRE                X'26F0'      SUPBY\n* X'26A5'      VSUP                 X'26F1'      CIFREQ\n* X'26A6'      VREQ                 X'26F4'      HOLDERR\n* X'26A7'      VIREQ                X'26F5'      HOLDSYS\n* X'26A8'      VDEL                 X'26F6'      HOLDUSR  ;\n* X'3001'      SOURCE LISTING       X'3210'      ++HOLD CARD;\n* X'3101'      LMOD CARDS           X'3220'      ++HOLD COMMENT;\n*                                   X'3230'      ++HOLD FULLGEN;\nRETAIN PTR 13 I 1 TYPE SYSMOD SYSENT SYMTYPE ' ';\nRETAIN SRCLST DLIB LMOD MOD MAC SRC LMODCD HOLD ' ';\nRETAIN ZONEI ZONE DDEF DSN PGM FMID ASM ' ';\nRETAIN INDEX ' ';\n* CSI KEY FORMAT;\n  INPUT CCACZID PIB2.\n  @3    IRBCATG PIB1.\n  @4    IRBNAME1 $8.\n  @12   IRBRELA PIB2.\n  @12   IRBRELAC $CHAR2.\n  @14   IRBOCCR PIB2. @;\n* @16   IRBNAM2F $8. ;\n FORMAT  CCACZIDX IRBOCCRX HEX4. ;\n FORMAT IRBCATGX                   HEX2. ;\n IRBCATGX=IRBCATG;\n CCACZIDX=CCACZID;\n IRBOCCRX=IRBOCCR;\n* IF KEYLGTH > 23 THEN LIST;\n  NAMELEN=KEYLGTH-16;\n *--------  MAIN CSI  -----------------------------------------;\n IF IRBCATG = 1     THEN DELETE;\n *-----    ZONEINDEX ------------------------------------------;\n IF IRBCATG = 2 THEN DO;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEIX: IF ZONEI = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @4  (ZINDEX1 ZINDEX2) (PIB2.) @;\n      FORMAT ATTRX  $HEX8.;\n      FORMAT ZID1 ZID2   HEX4.;\n      ZID1=ZINDEX1; ZID2=ZINDEX2;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      PUT @PTR ' ZONENAME-' CSINAME @; PTR+20;\n      PUT @PTR ' PRIMARY INDEX-' ZID1 @; PTR+20;\n      PUT @PTR ' SECONDARY INDEX-' ZID2 ; PTR+20;\n      DELETE;\nEND;* END OF ZONEI=IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONEI=IRBNAME1;\n    PUT ' ZONEINDEX '@;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEIX;\n    END;\n    DELETE;\n    END;\n *-----    ZONE   ---------------------------------------------;\n IF  IRBCATG = 3 | IRBCATG = 4 | IRBCATG = 5  THEN DO;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEX: IF ZONE = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      LIST;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONE=IRBNAME1;\n    PUT '**@ ' ZONE @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEX;\n    END;\n    DELETE;\n    END;\n *-------   ZONE DEFINITION -----------------------------------;\n IF IRBCATG = 16    THEN DO; * ZONE;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEY: IF ZONE = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1000'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1001'X THEN DO;\n         INDEX=CSINAME;\n         PUT @PTR  ' INDEX-' CSINAME @; END;\n ELSE IF IRBRELAC = '1010'X THEN PUT @PTR  ' RELATED-' CSINAME @;\n ELSE IF IRBRELAC = '1021'X THEN PUT @PTR  ' SREL-' CSINAME @;\n ELSE IF IRBRELAC = '1022'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '1026'X THEN PUT @PTR  ' OPTS-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONE=IRBNAME1;\n    PUT '** ' ZONE @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEY;\n    END;\n    DELETE;\n    END;\n *-------   OTHER DEFINITION -----------------------------------;\n IF IRBCATG = 17    THEN DO; * ZONE;\n    FILE DDEFRPT HEADER=DDEFHDR NOTITLES PRINT;\nDDEFX:    IF DDEF = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1100'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1172'X THEN PUT @PTR  ' AMS-' CSINAME @;\n ELSE IF IRBRELAC = '1173'X THEN PUT @PTR  ' ASMBLR-' CSINAME @;\n ELSE IF IRBRELAC = '1174'X THEN PUT @PTR  ' COMPRS-' CSINAME @;\n ELSE IF IRBRELAC = '1175'X THEN PUT @PTR  ' COPY-' CSINAME @;\n ELSE IF IRBRELAC = '1177'X THEN PUT @PTR  ' LKED-' CSINAME @;\n ELSE IF IRBRELAC = '1178'X THEN PUT @PTR  ' RETRY-' CSINAME @;\n ELSE IF IRBRELAC = '1179'X THEN PUT @PTR  ' UPDTE-' CSINAME @;\n ELSE IF IRBRELAC = '117A'X THEN PUT @PTR  ' SZAP-' CSINAME @;\n ELSE IF IRBRELAC = '117B'X THEN PUT @PTR  ' NUCID-' CSINAME @;\n ELSE IF IRBRELAC = '1180'X THEN PUT @PTR  ' PGELEN-' CSINAME @;\n ELSE IF IRBRELAC = '1181'X THEN PUT @PTR  ' PREMAX-' CSINAME @;\n ELSE IF IRBRELAC = '1182'X THEN PUT @PTR  ' PURGE-' CSINAME @;\n ELSE IF IRBRELAC = '1183'X THEN PUT @PTR  ' REQST-' CSINAME @;\n ELSE IF IRBRELAC = '1188'X THEN PUT @PTR  ' RTYDD-' CSINAME @;\n ELSE IF IRBRELAC = '1190'X THEN PUT @PTR  ' SAVEMTS-' CSINAME @;\n ELSE IF IRBRELAC = '1191'X THEN PUT @PTR  ' SAVESTS-' CSINAME @;\n ELSE IF IRBRELAC = '1192'X THEN DO;\n        INPUT @16 PRIM PIB2. @18 SECS PIB2. @20 DIRECTY PIB2. @;\n        PUT @PTR  ' DSSPACE-' PRIM ',' SECS ',' DIRECTY @;\n        PTR+10; END;\n ELSE IF IRBRELAC = '1193'X THEN DO;\n        INPUT @16 PARM &$50.@;\n        PUT @PTR  ' DSPREFIX-' PARM @;\n        PTR+(NAMELEN-9); END;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DDEF=IRBNAME1;\n    PUT '** ' DDEF @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DDEFX;\n    END;\n    DELETE;\n    END;\n *-----DSN  ---------------------------------------------------;\n IF IRBCATG = 18    THEN DO; * LMOD;\n    FILE DSNRPT HEADER=DSNHDR NOTITLES PRINT;\nDSNX:  IF DSN = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1200'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1201'X THEN DO;\n        INPUT @16 PARM &$50.@;\n        PUT @PTR  ' DSN-' PARM @;\n        IF NAMELEN-9 < 20 THEN PTR+20;\n                          ELSE PTR+40;\n        END;\n ELSE IF IRBRELAC = '1202'X THEN PUT @PTR  ' VOL-' CSINAME @;\n ELSE IF IRBRELAC = '1203'X THEN PUT @PTR  ' UNIT-' CSINAME @;\n ELSE IF IRBRELAC = '1209'X THEN PUT @PTR  ' CONCAT-' CSINAME @;\n ELSE IF IRBRELAC = '1210'X THEN PUT @PTR  ' DISP-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DSN=IRBNAME1;\n    PUT '** ' DSN @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DSNX;\n    END;\n    DELETE;\n    END;\n *-----PGM NAME -----------------------------------------------;\n IF IRBCATG = 19    THEN DO; * LMOD;\n    FILE PGMRPT HEADER=PGMHDR NOTITLES PRINT;\n PGMX:   IF PGM = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 PARM &50. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1300'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1301'X THEN PUT @PTR  ' PGMNME-' CSINAME @;\n ELSE IF IRBRELAC = '1302'X THEN DO;\n          PUT @PTR  ' PARM-' PARM @; PTR+(NAMELEN-6); END;\n ELSE IF IRBRELAC = '1303'X THEN DO;\n          PUT @PTR  ' SYSOUT-' CSINAME @; PTR+5; END;\n ELSE IF IRBRELAC = '1304'X THEN PUT @PTR  ' RETCODE-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    PGM=IRBNAME1;\n    PUT '** ' PGM @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO PGMX;\n    END;\n    DELETE;\n    END;\n *-----SET FMID -----------------------------------------------;\n IF IRBCATG = 20    THEN DO; * LMOD;\n    FILE FMIDRPT HEADER=FMIDHDR NOTITLES PRINT;\nFMIDX: IF FMID = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1400'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1401'X THEN PUT @PTR  ' FMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    FMID=IRBNAME1;\n    PUT '** ' FMID @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO FMIDX;\n    END;\n    DELETE;\n    END;\n *-----ASM  -----------------------------------------------;\n IF IRBCATG = 32    THEN DO; * LMOD;\n    FILE ASMRPT HEADER=ASMHDR NOTITLES PRINT;\nASMX: IF ASM = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2000'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2010'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ASM=IRBNAME1;\n    PUT '** ' ASM @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ASMX;\n    END;\n    DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 33    THEN DO; * LMOD;\n    FILE LMODRPT HEADER=LMODHDR NOTITLES PRINT;\nLMODX: IF LMOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2100'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2101'X THEN PUT @PTR  ' ATTR-' ATTRX @;\n *  ATTR ANALYSIS CAN BE DONE ON IOPLMLEP SEE GIMMPIOP;\n ELSE IF IRBRELAC = '2110'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2113'X THEN PUT @PTR  ' LLIB-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    LMOD=IRBNAME1;\n    PUT '** ' LMOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO LMODX;\n    END;\n    DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 34    THEN DO; * MAC ;\n    FILE MACRPT  HEADER=MACHDR NOTITLES PRINT;\nMACX: IF MAC = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2200'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2201'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2202'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2210'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2211'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2213'X THEN PUT @PTR  ' LLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2230'X THEN PUT @PTR  ' GENASM-' CSINAME @;\n ELSE IF IRBRELAC = '2240'X THEN PUT @PTR  ' ALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2250'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF MAC =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    MAC=IRBNAME1;\n    PUT '** ' MAC @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO MACX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 35    THEN DO; * MOD ;\n    FILE MODRPT  HEADER=MODHDR NOTITLES PRINT;\nMODX:    IF MOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2300'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2301'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2302'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2310'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2311'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2313'X THEN PUT @PTR  ' ATTR-' ATTRX @;\n *  ATTR ANALYSIS CAN BE DONE ON IOPMDLEP SEE GIMMPIOP;\n ELSE IF IRBRELAC = '2340'X THEN PUT @PTR  ' CSECT-' CSINAME @;\n ELSE IF IRBRELAC = '2341'X THEN PUT @PTR  ' CSECTL-' CSINAME @;\n ELSE IF IRBRELAC = '2342'X THEN PUT @PTR  ' TALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2343'X THEN PUT @PTR  ' DALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2350'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    MOD=IRBNAME1;\n    PUT '** ' MOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO MODX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 36    THEN DO; * SRC ;\n    FILE SRCRPT  HEADER=SRCHDR NOTITLES PRINT;\nSRCX: IF SRC = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2400'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2401'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2402'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2410'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2411'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2413'X THEN PUT @PTR  ' LIB-' CSINAME @;\n ELSE IF IRBRELAC = '2450'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SRC=IRBNAME1;\n    PUT '** ' SRC @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SRCX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 37    THEN DO; * DLIB;\n    FILE DLIBRPT  HEADER=DLIBHDR NOTITLES PRINT;\nDLIBX: IF DLIB = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2500'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2510'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2513'X THEN PUT @PTR  ' CPYLIB-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DLIB=IRBNAME1;\n    PUT '** ' DLIB @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DLIBX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 38    THEN DO;    *SYSMOD RECORD;\n    FILE SYSMOD HEADER=SMODHDR NOTITLES PRINT;\nSYSMODX: IF SYSMOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2637'X | IRBRELAC = '2638'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2601'X THEN DO;\n         TYPE= CSINAME;\n         PUT @PTR  ' TYPE-' TYPE @ ; END;\n ELSE IF IRBRELAC = '2600'X THEN PUT @PTR  ' SMDSEC-' CSINAME @;\n ELSE IF IRBRELAC = '2602'X THEN DO;\n    PUT @PTR  ' ATTR-' ATTRX @;\n    PTR+15;\n    IF PTR > 118 THEN DO; PUT; PTR=13; END;\n    * IOPPSTAT ANALYSIS;\n    IF ATTRB1 = '1.......'B THEN DO;\n       PUT @PTR 'PTF APPLIED' @; PTR+15;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.1......'B THEN DO;\n       PUT @PTR 'RESTORE ATTEMPTED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '..1.....'B THEN DO;\n       PUT @PTR 'PTF ACCEPTED' @; PTR+15;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '...1....'B THEN DO;\n       PUT @PTR 'SYS ERR ENCOUNTERED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.....1..'B THEN DO;\n       PUT @PTR 'PTF IS SUPED/DELETED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '......1.'B THEN DO;\n       PUT @PTR 'BYPASS USED TO PROCESS' @; PTR+25;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.......1'B THEN DO;\n       PUT @PTR 'PTF DEFAULT APPLIED VIA SYSGEN' @; PTR+30;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n   END;\n ELSE IF IRBRELAC = '2611'X THEN PUT @PTR  ' DELBY-' CSINAME @;\n ELSE IF IRBRELAC = '2612'X THEN PUT @PTR  ' LSUBBY-' CSINAME @;\n ELSE IF IRBRELAC = '26A1'X THEN PUT @PTR  ' SREL-' CSINAME @;\n ELSE IF IRBRELAC = '26C2'X THEN PUT @PTR  ' APP-' CSINAME @;\n ELSE IF IRBRELAC = '26C3'X THEN PUT @PTR  ' ACC-' CSINAME @;\n ELSE IF IRBRELAC = '26F0'X THEN PUT @PTR  ' SUPBY-' CSINAME @;\n ELSE IF IRBRELAC = '26F1'X THEN DO;\n        PUT @PTR  ' CIREQ-' CSINAME @;\n      INPUT @24 IRBNAM2F $CHAR8. @;\n      CSINAME=IRBNAM2F; PTR+15; IF PTR >118 THEN  PUT;\n        PUT @PTR  ' CIREQ-' CSINAME @;\n        END;\n ELSE IF IRBRELAC = '26F4'X THEN PUT @PTR  ' HERR-' CSINAME @;\n ELSE IF IRBRELAC = '26F5'X THEN PUT @PTR  ' HSYS-' CSINAME @;\n ELSE IF IRBRELAC = '26F6'X THEN PUT @PTR  ' HUSER-' CSINAME @;\n ELSE IF IRBRELAC = '2630'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2631'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2639'X THEN PUT @PTR  ' SRCEID-' CSINAME @;\n ELSE IF IRBRELAC = '263A'X THEN PUT @PTR  ' FESD-' CSINAME @;\n ELSE IF IRBRELAC = '26A2'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '26A3'X THEN PUT @PTR  ' PRE-' CSINAME @;\n ELSE IF IRBRELAC = '26A4'X THEN PUT @PTR  ' NPRE-' CSINAME @;\n ELSE IF IRBRELAC = '26A5'X THEN PUT @PTR  ' SUP-' CSINAME @;\n ELSE IF IRBRELAC = '26A6'X THEN PUT @PTR  ' REQ-' CSINAME @;\n ELSE IF IRBRELAC = '26A7'X THEN PUT @PTR  ' IREQ-' CSINAME @;\n ELSE IF IRBRELAC = '26A8'X THEN PUT @PTR  ' DEL-' CSINAME @;\n ELSE IF IRBRELAC = '26A9'X THEN PUT @PTR  ' VERSION-' CSINAME @;\n ELSE IF IRBRELAC = '26B1'X THEN PUT @PTR  ' MOD-' CSINAME @;\n ELSE IF IRBRELAC = '26B2'X THEN PUT @PTR  ' ZAP-' CSINAME @;\n ELSE IF IRBRELAC = '26B3'X THEN PUT @PTR  ' XZAP-' CSINAME @;\n ELSE IF IRBRELAC = '26B4'X THEN PUT @PTR  ' MAC-' CSINAME @;\n ELSE IF IRBRELAC = '26B5'X THEN PUT @PTR  ' MACU-' CSINAME @;\n ELSE IF IRBRELAC = '26B6'X THEN PUT @PTR  ' SRC-' CSINAME @;\n ELSE IF IRBRELAC = '26B7'X THEN PUT @PTR  ' SRCU-' CSINAME @;\n ELSE IF IRBRELAC = '26C1'X THEN PUT @PTR  ' ASM-' CSINAME @;\n ELSE DO; INPUT  @16 IRBDATE PD3. @;\n    IF IRBRELAC = '2632'X THEN PUT @PTR  ' RECDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2633'X THEN PUT @PTR  ' INSDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2635'X THEN PUT @PTR  ' RSTDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2636'X THEN PUT @PTR  ' UCLDATE-' IRBDATE @ ;\n  END; * END OF IRBDATE;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SYSMOD=IRBNAME1;\n    PUT '** ' SYSMOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SYSMODX;\n    END;\n  DELETE;\n    END;\n *------------  SOURCE CARDS ------------------------------------;\n IF IRBCATG = 48    THEN DO;    *SRCLST RECORD;\n    FILE SRCLTRPT HEADER=SRCLTHDR NOTITLES PRINT;\nSRCLTX: IF SRCLST = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '3001'X THEN DO;\n         INPUT @16 CARD $80. @;\n         PUT @PTR  ' SRCLIST-' CARD ;\n        PTR=28 ; END;\nEND;* END OF SRCLST =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SRCLST=IRBNAME1;\n    PUT '** ' SRCLST @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SRCLTX;\n    END;\n  DELETE;\n    END;\n *------------  LMOD CARDS ------------------------------------;\n IF IRBCATG = 49    THEN DO;    *LMOD RECORD;\n    FILE LMODCRPT HEADER=LMODCHDR NOTITLES PRINT;\nLMODCX: IF LMODCD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC \u00ac= '3101'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '3101'X THEN DO;\n         INPUT @16 CARD $80. @;\n         PUT @PTR  ' LMODCARD-' CARD ;\n        PTR=28 ; END;\nEND;* END OF LMODCD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    LMODCD=IRBNAME1;\n    PUT '** ' LMODCD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO LMODCX;\n    END;\n  DELETE;\n    END;\n *------------  HOLD CARDS ------------------------------------;\n IF IRBCATG = 50    THEN DO;    *HOLD RECORD;\n    FILE HOLDRPT HEADER=HOLDHDR NOTITLES PRINT;\nHOLDX: IF HOLD = IRBNAME1 THEN DO;\n         INPUT @16 CARD $80. @;\n      IF IRBRELAC = '3210'X\n         THEN DO;\n         PUT @PTR  ' ++HOLD-' CARD ;\n        PTR=26 ; END;\n ELSE IF IRBRELAC = '3220'X THEN DO;\n         PUT @PTR  ' ++COMMENT-' CARD ;\n        PTR=26 ; END;\n ELSE IF IRBRELAC = '3230'X THEN DO;\n         PUT @PTR  ' ++FULLGEN-' CARD ;\n        PTR=26 ; END;\n        ELSE LIST;\nEND;* END OF HOLD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    HOLD=IRBNAME1;\n    PUT '** ' HOLD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+13;\n    GO TO HOLDX;\n    END;\n  DELETE;\n    END;\n LIST;DELETE;\nRETURN;\nSMODHDR: PUT ' CDSI -    SYSMOD LISTING FROM CSI FILE ';\n         RETURN;\nHOLDHDR: PUT ' CDSI -    ++HOLD LISTING FROM CSI FILE ';\n         RETURN;\nLMODHDR: PUT ' CDSI -    LMOD LISTING FROM CSI FILE ';\n         RETURN;\nLMODCHDR: PUT ' CDSI -    LMOD CARDS LISTING FROM CSI FILE ';\n         RETURN;\nSRCLTHDR: PUT ' CDSI -    SOURCE CARDS LISTING FROM CSI FILE ';\n         RETURN;\nMODHDR: PUT ' CDSI -    MOD LISTING FROM CSI FILE ';\n         RETURN;\nMACHDR: PUT ' CDSI -    MAC LISTING FROM CSI FILE ';\n         RETURN;\nSRCHDR: PUT ' CDSI -    SRC LISTING FROM CSI FILE ';\n         RETURN;\nDLIBHDR: PUT ' CDSI -    DLIB LISTING FROM CSI FILE ';\n         RETURN;\nZONEHDR: PUT ' CDSI -    ZONE LISTING FROM CSI FILE ';\n         RETURN;\nDDEFHDR: PUT ' CDSI -    DDDEF LISTING FROM CSI FILE ';\n         RETURN;\nDSNHDR: PUT ' CDSI -    DSN LISTING FROM CSI FILE ';\n         RETURN;\nPGMHDR: PUT ' CDSI -    PGM LISTING FROM CSI FILE ';\n         RETURN;\nFMIDHDR: PUT ' CDSI -   FMID LISTING FROM CSI FILE ';\n         RETURN;\nASMHDR: PUT ' CDSI -    ASM LISTING FROM CSI FILE ';\n         RETURN;\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PARMLIB": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE022"}, "text": "//#PARMLIB JOB\n//*-------------------------------------------------------------------*\n//*   DOC: PRINT PARMLIB WITH ISPF STATS, LISTING, AND BY UPDATES     *\n//*        WITHIN THE LAST 30 DAYS                                    *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//LISTPDS EXEC PGM=LISTPDS,PARM='LISTDIR'    OPT('LIST,UPDTE,DECK')\n//SYSLIB   DD  DSN=SYS1.PARMLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=(,)\n//SYSIN    DD  DUMMY\n//*\n//PARMPASS EXEC PGM=PARMPASS,PARM='./ LIST'\n//SYSOUT    DD  DSN=&&SYSIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)\n//*\n//PDSUTIL  EXEC PGM=PDSUTIL\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUT1    DD  DSN=SYS1.PARMLIB,DISP=SHR\n//SYSIN     DD  DSN=&&SYSIN,DISP=(OLD,DELETE)\n//*\n//SAS      EXEC SAS\n//FT11F001  DD  DUMMY\n//PDS       DD  DSN=SYS1.PARMLIB,DISP=SHR,\n//          DCB=(RECFM=F,LRECL=256,BLKSIZE=256)\n//SYSIN     DD  DSN=THIS.LIBRARY(SASPDS),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#PROCLIB": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE022"}, "text": "//#PROCLIB JOB\n//*-------------------------------------------------------------------*\n//*   DOC: PRINT PROCLIB WITH ISPF STATS, LISTING, AND BY UPDATES     *\n//*        WITHIN THE LAST 30 DAYS                                    *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//LISTPDS EXEC PGM=LISTPDS,PARM='LISTDIR'    OPT('LIST,UPDTE,DECK')\n//SYSLIB   DD  DSN=SYS1.PROCLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=(,)\n//SYSIN    DD  DUMMY\n//*\n//PARMPASS EXEC PGM=PARMPASS,PARM='./ LIST'\n//SYSOUT    DD  DSN=&&SYSIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)\n//*\n//PDSUTIL  EXEC PGM=PDSUTIL\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUT1    DD  DSN=SYS1.PROCLIB,DISP=SHR\n//SYSIN     DD  DSN=&&SYSIN,DISP=(OLD,DELETE)\n//*\n//SAS      EXEC SAS\n//FT11F001  DD  DUMMY\n//PDS       DD  DSN=SYS1.PROCLIB,DISP=SHR,\n//          DCB=(RECFM=F,LRECL=256,BLKSIZE=256)\n//SYSIN     DD  DSN=THIS.LIBRARY(SASPDS),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#RACF": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE022"}, "text": "//#RACF JOB\n//*-------------------------------------------------------------------*\n//*   DOC: PRINT ALL RACF PROFILES AND SYS1.UADS                      *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//TSOBATCH EXEC TSOBATCH\n//INPUT DD *\nACCOUNT\nLISTIDS\nL (*)\n/*\n// EXEC TSOBATCH\n//INPUT DD *\nSR MASK(*)  ALL\nLG (*)\nLU (*)\nLD PREFIX(PREFIX) ALL\nLD PREFIX(SYS1) ALL\nSETR LIST\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#SMFRPT": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xba\\x00\\xba\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 186, "newlines": 186, "modlines": 0, "user": "FILE022"}, "text": "//#SMFRPT JOB\n//*-------------------------------------------------------------------*\n//*   DOC: CREATE ALL REPORTS PRODUCED BY THE SMFDUMP ROUTINE IN THIS *\n//*        LIBRARY:                                                   *\n//*   _ STEP _   _________ FUNCTION ___________                       *\n//*                                                                   *\n//*     SMFCNT   COUNT AND DESCRIBE ALL SMF RECORDS                   *\n//*                                                                   *\n//*     SMF5     PROCESSES SMF TYPE 5 RECORDS                         *\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//SMFCNT  EXEC SAS,OPTIONS='NONEWS'\n//SMFDATA DD DSN=SMFDUMP,DISP=SHR\n//SYSOUT   DD DUMMY\n//SYSIN    DD *\n  OPTIONS NOSOURCE2 NODATE ERRORS=0 LABEL NOMACROGEN ;\n\n DATA A (KEEP=TYPE DATE TIME NUM)\n         ;\n    INFILE SMFDATA;\n    INPUT\n     @ 2 TYPE PIB1.\n     @ 3 ENDTIME    SMFSTAMP8.\n     @;\n    NUM=TYPE;\n    DATE=DATEPART(ENDTIME) ;\n    TIME=TIMEPART(ENDTIME) ;\n    LABEL DATE='REPORT*DATE'  TIME='REPORT*TIME';\n    FORMAT DATE DATE7. TIME TIME8.  ;\n    DROP ENDTIME;\n\nPROC SUMMARY NWAY DATA=A;CLASS DATE NUM;ID TYPE;OUTPUT OUT=B;\n\n* TOTALS BY DATE;\nPROC SUMMARY NWAY DATA=A; CLASS DATE; OUTPUT OUT=C;\nDATA C (KEEP=DATE N); SET C; N=_FREQ_;\n\nPROC FORMAT ;\n     VALUE SMFR\n      0='IPL'                     2='DUMP HEADER'\n      3='DUMP TRAILER'            4='STEP TERMINATION'\n      5='JOB TERMINATION'         6='JES2 WRITER'\n      7='DATA LOST'               8='I/O CONFIG'\n      9='VARY ONLINE'            10='ALLOC RECOVERY'\n     11='VARY OFFLINE'           14='OPEN INPUT'\n     15='OPEN OUTPUT'            16='SORT/MERGE'\n     17='SCRATCH NONVSAM'        18='RENAME NONVSAM'\n     19='DIRECT ACCESS'          20='JOB INITIALIZATION'\n     21='VOLUME ERRORS'          22='CONFIGURATION'\n     23='SMF STATUS'             25='JES3 DEVICE ALLOC'\n     26='JOB PURGE'              30='JOB/TSU/STC TERM'\n     31='TIOC INIT'              32='TSO ACCOUNTING'\n     34='TSU TERM'               35='LOGOFF'\n     38='NPM STATS.'             39='NLDM STATS.'\n     40='DYNAMIC ALLOC'          43='JES2 START'\n     45='JES2 WITHDRAWAL'        47='JES2 SIGNON/S LINE'\n     48='JES2 SIGNOFF/P LINE'    49='JES2 INTEGRITY'\n     50='ACF/VTAM STATS'         52='JES2 LOGON (SNA)'\n     53='JES2 LOGOFF (SNA)'      54='JES2 INTEGRITY (SNA)'\n     55='JES2 NETWORK SIGNON'    56='JES2 NETWORK INTEGRITY'\n     57='JES2 NETWORK SYSOUT'    58='JES2 NETWORK SIGNOFF'\n     60='VSAM VOL UPDATE'        61='ICF DEFINE'\n     62='VSAM CLUSTER OPEN'      63='VSAM DEFINE'\n     64='VSAM CLUSTER STATUS'    65='ICF DELETE'\n     66='ICF ALTER'              67='VSAM DELETE'\n     68='VSAM RENAME'            69='DEFINE VSAM SPACE'\n     70='RMF: CPU'               71='RMF: PAGING'\n     72='RMF: WORKLOAD'          73='RMF: CHANNEL PATH'\n     74='RMF: DEVICE'            75='RMF: PAGE/SWAP'\n     76='RMF: TRACE'             77='RMF: ENQUEUE'\n     78='RMF: MINITOR I'         79='RMF: MONITOR II'\n     80='RACF PROCESSING'        81='RACF INITIALIZATION'\n     90='SYSTEM STATUS'\n     128='ROSCOE'               129='CA/DISPATCH SMF REC6'\n     133='HSM133'               134='HSM134'\n     ;\nPROC SORT  DATA=B;  BY DATE;\nPROC SORT  DATA=C;  BY DATE;\nDATA MERGE;  MERGE B C; BY DATE;\n     PERCENT=(_FREQ_/N)*100;\nPROC PRINT DATA=MERGE LABEL NOOBS ;\n     BY DATE;\n     SUM _FREQ_ PERCENT;\n     VAR TYPE NUM _FREQ_ PERCENT;\n     FORMAT TYPE 2. NUM SMFR. PERCENT 3.2;\n\n/*\n//SMF5    EXEC SAS,OPTIONS='NONEWS'\n//SMFDATA DD DSN=SMFDUMP,DISP=SHR\n//SYSOUT   DD DUMMY\n//SYSIN    DD *\n  OPTIONS NOSOURCE2 NODATE ERRORS=0 LABEL NOMACROGEN ;\n\n DATA SMF5 (KEEP=TYPE ENDTIME SYSID JOBNAME READTIME NUMSTPS\n                 INITTIME INITDTE INITME WAITINIT\n                 ELAPSED\n                 RESDTIME JCLASS SRBTME TRANTIME PROGNAME TCBTME\n                 CPUTIME WAIT XREAD SHOUR)\n      ;\n    INFILE SMFDATA;\n    INPUT\n     @ 2 TYPE PIB1.\n     @ 3 ENDTIME    SMFSTAMP8.\n     @;\n    NUM=TYPE;\n    DATE=DATEPART(ENDTIME) ;\n    TIME=TIMEPART(ENDTIME) ;\n    LABEL DATE='REPORT*DATE'  TIME='REPORT*TIME';\n    FORMAT DATE DATE7. TIME TIME8.  ;\n    DROP ENDTIME;\n\n    IF TYPE=5 THEN DO;\n     LABEL TYPE='REC*TYPE'                 ENDTIME='JOB*END*TIME'\n           SYSID='SYSTEM*ID'               JOBNAME='JOB*NAME'\n           READTIME='READER*TIME'          NUMSTPS='NUMBER*OF*STEPS'\n           INITTIME='INIT*STRT*TIME*DATE'  INITDTE='INIT*STRT*DATE'\n           INITME='INIT*STRT'              WAITINIT='INIT*WAIT*TIME'\n           ELAPSED='JOB*ELAPSED*TIME'\n           RESDTIME='PROGRAM*RESIDENCY*TIME'\n           JCLASS='JOB*CLASS'              SRBTME='SRB*TIME'\n           TRANTIME='TRANS*TIME'           PROGNAME='PROGRAMMER*NAME'\n           TCBTME='TCB*TIME'               CPUTIME='CPU*TIME'\n           WAIT='JOB*SWAPPED*SEC'          XREAD='READER*STRT*TIME'\n           ;\n   FORMAT ENDTIME READTIME INITTIME DATETIME19.2\n          INITDTE DATE7.\n          TRANTIME RESDTIME ELAPSED XREAD INITME WAITINIT CPUTIME\n                  TIME8.\n          SHOUR 2.\n          ;\n         INPUT @3  ENDTIME   SMFSTAMP8.\n               @11 SYSID     $4.\n               @15 JOBNAME   $8.\n               @23 READTIME  SMFSTAMP8.\n               @39 NUMSTPS   PIB1.\n               @40 INITTIME  SMFSTAMP8. @;\n     * DETERMINE TIME WAITING FOR INITIATOR ;\n       XREAD=TIMEPART(READTIME);\n       WAITINIT=INITTIME-READTIME;\n     * DETERMINE STEP ELAPSED TIME;\n       ELAPSED=(ENDTIME-INITTIME);\n\n     * DATE AND TIME OF INITIATOR START TIMES;\n       INITDTE=DATEPART(INITTIME);\n       INITME=TIMEPART(INITTIME);\n       SHOUR=HOUR(INITTIME);\n\n       INPUT @65  RESDTME PIB4.     /* TRANSACTION RESD TIME  */\n             @72  JCLASS  $1.       /* JOBCLASS               */\n             @74  SRBTME  PIB3.     /* TIME DISPATCHED VIA SRB*/\n             @81  TRANTME PIB4.     /* TRANSACTION ACT  TIME  */\n             @94  PROGNAME $20.     /* PROGRAMMER NAME FIELD  */\n             @114 TCBTME  PIB3. ;   /* TIME DISPATCHED VIA TCB*/\n\n         * REMOVE ANY STARTED TASKS;\n           IF JCLASS=' ' THEN DELETE;\n\n         * TOTAL RESIDENCY TIME X 1024 MICROSECONDS;\n           RESDTIME=RESDTME*1.024;\n           IF RESDTME=0 THEN DELETE;   *** NO CYCLES USED !!!;\n\n         * TOTAL TRANS ACT TIME X 1024 MICROSECONDS;\n           TRANTIME=TRANTME*1.024;\n\n         * TOTAL CPU TIME SRB+TBB IN 100TH OF A SECOND;\n           CPUTIME=(SRBTME+TCBTME)/100;\n\n         * WAIT TIME FOR JOB: SWAPPED FOR CPU OR I/O;\n           WAIT=((RESDTIME/100)-CPUTIME)/1000;\n\n           TRANTIME=TRANTIME/1000;\n           RESDTIME=RESDTIME/1000;\n\n           OUTPUT SMF5 ;\n     END;\n\n  PROC TABULATE DATA=SMF5;\n       CLASS INITDTE JCLASS ;\n       VAR CPUTIME ;\n       TABLE (INITDTE ALL), JCLASS*CPUTIME*(N MEAN) / RTS=16\n       ;\n       TITLE 'INITIATOR CLASSES BY CPU SECOND' ;\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#VTOCS": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01N\\x01N\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 334, "newlines": 334, "modlines": 0, "user": "FILE022"}, "text": "//#VTOCS JOB\n//*-------------------------------------------------------------------*\n//*   DOC: PRINT AND GRAPH VTOCS                                      *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//TSOBATCH EXEC TSOBATCH\n//VTOCOUT   DD DSN=&&VTOC,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,1))\n//INPUT     DD *\nVTOC ALL TRK +\nPRINT(NEW +\n(DSNAME VOLUME DSO ALLOC UNUSED PCT EX LRECL BLKSZ CDATE REFDT)) +\nNOSORT NOHEADING\n//SAS      EXEC SAS\n//VTOCOUT   DD   DSN=&&VTOC,DISP=(OLD,DELETE)\n//SYSIN     DD   *\n OPTIONS  ERRORS=0 DATE LABEL NOTES SOURCE;\n\n *----------------------------------------------------------------*\n * FUNCTION: PROCESS VTOC INFORMATION BY:                         *\n *           - VOLUME-FREE SPACE VS. ALLOCATED SPACE              *\n *           - COMPANY                                            *\n *           - APPLICATION                                        *\n *           - COST CENTER                                        *\n *                                                                *\n *----------------------------------------------------------------* ;\n\n DATA\n      VTOCS (KEEP=\n                      DSNAME   VOLSER  DSORG   ALLOC\n                      UNUSED   PERCENT EXTENT\n                      BLKSIZE  LRECL   CDATE   RDATE\n                      NODE1    NODE2   NODE3\n                      COMPANY  APPL    COSTCEN\n                      VOLTRKS  TOTTRKS\n     )\n     TECHVOLS (KEEP=\n                      DSNAME   VOLSER  DSORG   ALLOC\n                      UNUSED   PERCENT EXTENT\n                      BLKSIZE  LRECL   CDATE   RDATE\n                      NODE1    NODE2   NODE3\n                      COSTCEN\n                      VOLTRKS  TOTTRKS\n     )\n     ;\n      INFILE VTOCOUT ;\n    * DROP CARRIAGE CONTROL ;\n      INPUT @1  CC  $1.  @; IF CC = '0'  THEN DELETE; DROP CC;\n\n      INPUT @2  DSNAME     $44.      @47 VOLSER     $6.\n            @54 DS         $2.       @59 ALLOC      5.\n            @66 UNUSED     5.        @72 PERCENT    3.\n            @76 EXTENT     2.        @80 LRECL      4.\n            @85 BLKSIZE    5.        @91 C_DATE    $5.\n            @97 R_DATE    $5.\n            ;\n\n      LABEL ALLOC='ALLOCATION*IN*TRACKS'   DSNAME='DATA*SET*NAME'\n            VOLSER='VOLUME*SERIAL*NUMBER'  DSORG='DATA*SET*ORGANZ'\n            UNUSED='UNUSED*SPACE*TRACKS'   PERCENT='PERCENT*USED'\n            EXTENT='EXTENTS'               LRECL='LRECL'\n            BLKSIZE='BLKSIZE'              CDATE='CREATION*DATE'\n            RDATE='LAST*REFERENCE*DATE'\n            COSTCEN='COST*CENTER'          APPL='APPLICATION'\n            ;\n      FORMAT RDATE CDATE DATE7.\n      ;\n      LENGTH NODE1 NODE2 NODE3 APPL $8.  COSTCEN $5.\n             DSORG $4.   COMPANY $3.\n      ;\n\n      * INITIALIZE VARIABLES;\n      IF _N_=1  THEN DO;\n         XDATE=TODAY(); JDATE=JULDATE(XDATE);\n       * CREATE TEMPORARY DATASET NAME, BEING: SYS87000. ;\n         TEMPDSN='SYS'||JDATE; TEMPDSN=COMPRESS(TEMPDSN);\n         DROP XDATE JDATE;\n         OLDVOL='      ';\n         TOTTRKS=0;\n       * 885 TRACKS PER CYLINDER, PROCESSED AFTER THIS DATA STEP;\n         VOLTRKS=885*15;\n         RETAIN VOLTRKS TEMPDSN OLDVOL ;\n        END;\n\n    * ELIMINATE TEMPORARY DATASETS ;\n      IF SUBSTR(DSNAME,1,8)=TEMPDSN THEN DELETE;\n\n      IF ALLOC=UNUSED THEN UNUSED=0;\n\n    * CHANGE DSORG NAME TO SOMETHING BETTER   ;\n      IF DS='VS' THEN DSORG='VSAM';\n      IF DS='PO' THEN DSORG='PART';\n      IF DS='PS' THEN DSORG='SEQ';\n      IF DS='DA' THEN DSORG='DIR';\n      DROP DS;\n\n    * PROCESS LAST REFERENCE AND CREATE DATES ;\n      IF C_DATE\u00ac=' 0000' THEN  CDATE=DATEJUL(C_DATE);\n      IF R_DATE\u00ac=' 0000' THEN  RDATE=DATEJUL(R_DATE);\n\n    * GATHER STATS @ VOLUME LEVEL   ;\n      IF OLDVOL\u00ac=VOLSER THEN DO;\n         OLDVOL=VOLSER;\n         TOTTRKS=TOTTRKS+VOLTRKS ;\n         RETAIN TOTTRKS OLDVOL;\n       * IF NOT 1ST TIME THRU, NEW VOLUME ENCOUNTERED;\n         IF _N_\u00ac=1  THEN DO;    *** OPS - I FORGOT WHAT TO DO ;\n        END;\n\n    *--------------------------------------*\n    * CREATE UNIQUE VARIABLES FROM DSNAME  *\n    *--------------------------------------* ;\n\n      LDSN=LENGTH(DSNAME);\n    * CREATE FIRST NODE OF DATASET NAME ;\n      X=INDEX(DSNAME,'.');\n      X=X-1;                         * ONE BACK FROM '.' ;\n      NODE1=SUBSTR(DSNAME,1,X);\n      X=X+2;                         * ONE UPTO '.' AND ONE PAST '.';\n      SUBDSN=SUBSTR(DSNAME,X,LDSN);\n      LDSN=LDSN-X;\n    * CREATE SECOND NODE OF DATASET NAME ;\n      X=INDEX(SUBDSN,'.');\n      X=X-1;\n      NODE2=SUBSTR(SUBDSN,1,X);\n      X=X+2;\n      SUBDSN=SUBSTR(SUBDSN,X,LDSN);\n      LDSN=LDSN-X;\n    * CREATE THIRD NODE OF DATASET NAME ;\n      X=INDEX(SUBDSN,'.');\n      X=X-1;\n      IF X>0 THEN  NODE3=SUBSTR(SUBDSN,1,X);\n             ELSE  NODE3=SUBSTR(SUBDSN,1,LDSN);\n      DROP X LDSN SUBDSN;\n\n    *--------------------------------------*\n    * INSTALLATION DEPENDENT CODE          *\n    *--------------------------------------*\n\n      NODE 1 ... COMPANY\n                 POS1(T/P) TEST/PRODUCTION  POS2-4(COMPANY NAME)\n      NODE 2 ... APPLICATION, USUALLY 4 CHAR\n      NODE 3 ... COST CENTER\n                 POS1('C') POS2-6(COST CENTER)        ;\n\n    * PROCESS STANDARD PRODUCTION AND TEST DATASETS ACCORDING TO\n                   THE PREVIOUS MENTIONED INFO    ;\n      TESTPROD=SUBSTR(NODE1,1,1);\n      IF (TESTPROD='T' OR TESTPROD='P') AND\n          NODE1\u00ac='PAGE'                 AND\n          NODE1\u00ac='TECH'                 AND\n          LENGTH(NODE1)=4               AND\n          LENGTH(NODE3)=6               AND\n          SUBSTR(NODE3,1,1)='C'\n                        THEN DO;\n             COMPANY=SUBSTR(NODE1,2,4);\n             APPL=NODE2;\n             IF SUBSTR(NODE3,1,1)='C' THEN\n                COSTCEN=SUBSTR(NODE3,2,LENGTH(NODE3));\n        END;\n                          ELSE DO;\n             COMPANY=' ';  APPL=' ';  COSTCEN=' ';\n        END;\n\n    * ELIMINATE CATALOGS, VVDSS'S, INDEXED VTOCS ;\n      IF NODE2='VVDS' OR NODE2='VTOCIX' OR SUBSTR(NODE1,1,3)='CAT'\n         THEN DELETE;\n\n    * KILL TEST VOLUMES ETC ...;\n      IF VOLSER='RESCUE' OR VOLSER='MVSDEV' THEN DELETE;\n\n    * FOR ALL THE TECH SUPPORT DATASETS .... ;\n      IF NODE1='SYS1'    OR\n         NODE1='PAGE'    OR\n         NODE1='HSM'     OR\n         NODE1='VSYS1'   OR\n         NODE1='MVSSMPE' OR\n         NODE1='TECH'    OR\n         NODE1='IPO1'    OR\n         NODE1='ISR'     OR\n         NODE1='ISP'     OR\n         NODE1='ISF'     OR\n         NODE1='ICQ'     OR\n         NODE1='AS'      OR\n         NODE1='DB2'     OR\n         NODE1='DEC'     OR\n         SUBSTR(NODE1,1,4)='CICS'\n             THEN  DO;\n                   APPL='TECHSUPP';\n                   COSTCEN='75100';   ** OUCH !!!! ;\n                   OUTPUT TECHVOLS;\n        END;\n\n\n      OUTPUT VTOCS;\nPAGE;\n   *------------------------*\n   * EVAL TECHVOLS VOLUMES  *\n   *------------------------*;\n     PROC SUMMARY DATA=TECHVOLS NWAY;\n          CLASS VOLSER NODE1 ;\n          VAR ALLOC UNUSED;\n          ID VOLTRKS;\n          OUTPUT OUT=TECHVOLS\n                 SUM=ALLOC UNUSED\n          ;\n     PROC SORT  DATA=TECHVOLS; BY VOLSER NODE1 ;\n   * DETERMINE FREE SPACE, NOTED BY TYPE='FREE', PER VOLSER ;\n     DATA TECHVOLX (KEEP=XPREFIX XALLOC OLDVOL) ;\n          SET TECHVOLS END=EOF ;\n          IF _N_=1 THEN DO; XPREFIX='FREE'; OLDVOL='      ';\n             RETAIN XPREFIX OLDVOL;END;\n          IF OLDVOL\u00ac=VOLSER OR EOF=1 THEN DO;\n             IF EOF=1 THEN XA=XA+ALLOC;\n             XALLOC=VOLTRKS-XA;\n             IF _N_\u00ac=1 THEN  OUTPUT TECHVOLX;\n             OLDVOL=VOLSER;\n             XA=0;\n             RETAIN XA OLDVOL ;\n            END;\n          XA=XA+ALLOC;\n     DATA TECHVOLX (KEEP=NODE1 ALLOC VOLSER); SET TECHVOLX;\n          VOLSER=OLDVOL; NODE1=XPREFIX; ALLOC=XALLOC;\n     DATA TECHVOLS; SET TECHVOLX TECHVOLS ;\n          CYLS=ALLOC/15;\n          CYLS=ROUND(CYLS,.1) ;\n     PROC SORT  DATA=TECHVOLS; BY VOLSER NODE1 ;\n     PROC CHART DATA=TECHVOLS;\n          PIE NODE1 / SUMVAR=ALLOC ;\n          BY VOLSER;\n          TITLE 'RMH   D A S D   ALLOCATIONS';\n          TITLE2 '---  SYSTEM  VOLUMES  ---';\n     PROC PRINT DATA=TECHVOLS NOOBS LABEL SPLIT='*' ;\n          VAR NODE1 ALLOC CYLS;\n          BY VOLSER ;\n          TITLE2 'BY VOLUME' ;\n          TITLE3 '---  ALL SYSTEM VOLUMES  ---';\n\n   *----------------------------*\n   * EVAL NON-TECHVOLS VOLUMES  *\n   *----------------------------*;\n     PROC SUMMARY DATA=VTOCS NWAY;\n          CLASS VOLSER DSORG ;\n          VAR ALLOC UNUSED;\n          ID VOLTRKS;\n          OUTPUT OUT=VTOC1\n                 SUM(ALLOC UNUSED)=ALLOC UNUSED\n          ;\n\n   * SORT ALL DATA BY VOLSER AND DSORG - A MUST !! ;\n     PROC SORT  DATA=VTOC1; BY VOLSER DSORG ;\n\n   * DETERMINE FREE SPACE, NOTED BY XDSORG='FREE', PER VOLSER ;\n     DATA VTOC2 (KEEP=XDSORG XALLOC OLDVOL)\n          ;\n          SET VTOC1 END=EOF ;\n          IF _N_=1 THEN DO;\n             XDSORG='FREE';\n             OLDVOL='      ';\n             RETAIN XDSORG OLDVOL ;\n             XA=0;\n            END;\n        * IF NEW VOLSER, PRINT FREE SPACE STATS ;\n          IF OLDVOL\u00ac=VOLSER OR EOF=1 THEN DO;\n             IF EOF=1 THEN XA=XA+ALLOC;\n             XALLOC=VOLTRKS-XA;\n             IF _N_\u00ac=1 THEN  OUTPUT VTOC2;\n             OLDVOL=VOLSER;\n             XA=0;\n             RETAIN XA OLDVOL ;\n            END;\n        * ACCUMULATE ALLOCATIONS STATS;\n          XA=XA+ALLOC;\n\n     DATA VTOC2 (KEEP=DSORG ALLOC VOLSER); SET VTOC2;\n          VOLSER=OLDVOL; DSORG=XDSORG; ALLOC=ABS(XALLOC);\n\n     DATA VTOC12; SET VTOC1 VTOC2;\n          CYLS=ALLOC/15;\n          CYLS=ROUND(CYLS,.1) ;\n\n     PROC SORT  DATA=VTOC12; BY VOLSER DSORG;\n     PROC CHART DATA=VTOC12 ;\n          PIE DSORG / SUMVAR=ALLOC ;\n          BY VOLSER ;\n          TITLE2 'BY VOLSER AND DSORG';\n\n   * SUMMARIZE ALL VTOC INFO BY DSORG;\n     PROC SUMMARY DATA=VTOC12 NWAY;\n          CLASS DSORG ;\n          VAR ALLOC;\n          OUTPUT OUT=VTOCMAX\n                 SUM=ALLOC\n          ;\n     PROC CHART DATA=VTOCMAX;\n          PIE DSORG / SUMVAR=ALLOC ;\n          TITLE 'RMH   D A S D   ALLOCATIONS';\n          TITLE2 'BY  DSORG';\n\n\n     PROC PRINT DATA=VTOC12 NOOBS LABEL SPLIT='*' ;\n          VAR DSORG ALLOC CYLS;\n          BY VOLSER ;\n          TITLE2 'BY VOLUME' ;\nPAGE;\n\n   * REPORTING BY COMPANY: NODE1 ;\n     PROC SUMMARY DATA=VTOCS NWAY;\n          CLASS COMPANY;\n          VAR ALLOC UNUSED;\n          OUTPUT OUT=COM_PANY SUM=ALLOC UNUSED;\n     PROC PRINT DATA=COM_PANY NOOBS LABEL SPLIT='*' ;\n          VAR COMPANY ALLOC UNUSED;\n          TITLE2 'BY COMPANY';\n\n   * REPORTING BY APPLICATION: NODE2 ;\n     PROC SUMMARY DATA=VTOCS NWAY;\n          CLASS APPL ;\n          VAR ALLOC UNUSED;\n          OUTPUT OUT=APP_L SUM=ALLOC UNUSED;\n     PROC PRINT DATA=APP_L  NOOBS LABEL SPLIT='*' ;\n          VAR APPL ALLOC UNUSED;\n          TITLE2 'BY APPLICATION';\n\n   * REPORTING BY COST CENTER: NODE3 ;\n     PROC SUMMARY DATA=VTOCS NWAY;\n          CLASS COSTCEN ;\n          VAR ALLOC UNUSED;\n          OUTPUT OUT=COST_CEN SUM=ALLOC UNUSED;\n     PROC PRINT DATA=COST_CEN  NOOBS LABEL SPLIT='*' ;\n          VAR COSTCEN ALLOC UNUSED;\n          TITLE2 'BY COST CENTER';\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE022": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00T\\x01\\x181\\x7f\\x01\\x181\\x7f\"!\\x00\\x86\\x00\\x86\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2018-11-13T00:00:00", "modifydate": "2018-11-13T22:21:54", "lines": 134, "newlines": 134, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 022 IS FROM MR MARK HEDGES, FORMERLY OF ADRIA             *   FILE 022\n//*           LABORATORIES IN DUBLIN OHIO.  THIS FILE CONTAINS      *   FILE 022\n//*           SEVERAL OF THEIR UTILITIES.  THIS FILE IS IN          *   FILE 022\n//*           IEBUPDTE SYSIN FORMAT.  FOR ADDITIONAL INFORMATION    *   FILE 022\n//*           SEE THE MEMBER CALLED $$DOC.                          *   FILE 022\n//*                                                                 *   FILE 022\n//*      MARK HEDGES IS NO LONGER AT ADRIA LABORATORIES...          *   FILE 022\n//*                                                                 *   FILE 022\n//*           CURRENT ADDRESS:  MARK HEDGES                         *   FILE 022\n//*                             11951 SENTINEL POINT COURT          *   FILE 022\n//*                             RESTON, VA  22091                   *   FILE 022\n//*           CURRENT PHONE:    (703) 383-1167                      *   FILE 022\n//*                   FAX  :    (703) 383-1168                      *   FILE 022\n//*                                                                 *   FILE 022\n//*           current email:    mhinva@earthlink.net                *   FILE 022\n//*                                                                 *   FILE 022\n//*           -ASSEMBLER-                                           *   FILE 022\n//*            ADRMCLVL   DETERMINES LEVEL OF DFDSS RUNNING IN      *   FILE 022\n//*                       YOUR SYSTEM                               *   FILE 022\n//*            CATSTRIP   EXAMINE OUTPUT OF LISTCAT FOR             *   FILE 022\n//*                       ICF-CATALOGS - USED IN CONJUNCTION WITH   *   FILE 022\n//*                       SASCATS                                   *   FILE 022\n//*            DATERC     SETS RRC BASED ON DATE-OF-WEEK            *   FILE 022\n//*            DI215      DISPLAY INITIATORS FOR JES 2.1.5/JES      *   FILE 022\n//*                       2.1.7                                     *   FILE 022\n//*            ICHRIN03   MODULE USED BY RACF IN CREATING THE       *   FILE 022\n//*                       STARTED TASK TABLE - THIS IS A MACRO      *   FILE 022\n//*                       WITH EXAMPLES TO CODE THIS TABLE          *   FILE 022\n//*            IDMSLOGS   PROCESSES IDMS/R SHUTDOWN STATS           *   FILE 022\n//*            JOBSTAT    DETERMINES IF JOB/STC/TSO IS CURRENTLY    *   FILE 022\n//*                       RUNNING                                   *   FILE 022\n//*            MRGJNLOG   MERGES IDMS/R JOURNALS AND LOGS TO        *   FILE 022\n//*                       TAPE FILES - NICE                         *   FILE 022\n//*            PUTCVRL    PRINT COVER LETTERS FROM SEQUENTIAL PTF   *   FILE 022\n//*                       TAPES, NOT TOO THRILLING                  *   FILE 022\n//*            RACFPGM    TO GENERATE RACF PROTECTION FOR PROGRAMS  *   FILE 022\n//*                       - FOR ALL YOU FOLKS PRE-RACF 1.7          *   FILE 022\n//*            RACFST     PROGRAM TO DISPLAY RACF STATUS            *   FILE 022\n//*                       INFORMATION:  DSNS, FLAGS, STOR - NICE    *   FILE 022\n//*                       IF YOU WANT TO KNOW WHERE ALL RACF 1.7    *   FILE 022\n//*                       DATASETS ARE                              *   FILE 022\n//*            RESCUE     CREATES A JOB STREAM TO CREATE A          *   FILE 022\n//*                       ONE-PACK-SYSTEM - INCLUDES SPOOL, CKPT,   *   FILE 022\n//*                       PAGE DATASETS, RACF TOO                   *   FILE 022\n//*            ROUTDESC   EXAMPLE OF ROUTING AND DESCRIPTOR CODES   *   FILE 022\n//*                       FOR WTO/WTOR'S                            *   FILE 022\n//*            SMF5       PROCESSES SMF TYPE 5 RECORDS              *   FILE 022\n//*            SMPLIST    PROCESSES OUTPUT OF AN SMP/E 'LIST        *   FILE 022\n//*                       FUNCTIONS'                                *   FILE 022\n//*            SYSLOG     PROCESSES MVS/XA SYSLOGS FOR SCANNING     *   FILE 022\n//*                       AND REPORTING                             *   FILE 022\n//*            SYSLOC     USED IN CONJUNCTION WITH SYSLOG:          *   FILE 022\n//*                       PROCESSES GDG'S                           *   FILE 022\n//*            SYSTAT     EVERYTHING AN MVS SYSTEMS PROGRAMMER      *   FILE 022\n//*                       WANTS TO KNOW                             *   FILE 022\n//*                       - MY BEST CODE, MUST BE AT LEAST MVS/XA   *   FILE 022\n//*                         2.1.3                                   *   FILE 022\n//*                       - GIVES IPL INFO, CONTROL BLOCK INFO      *   FILE 022\n//*                         (ADDRESSES), MAPS STORAGE AND DRAWS     *   FILE 022\n//*                         MAP OF VIRTUAL STORAGE, LISTS ALL APF   *   FILE 022\n//*                         DATASETS AND ISSUES A 'LOCATE' TO       *   FILE 022\n//*                         CHECK CATALOG STATUS.                   *   FILE 022\n//*                       - RUNS AS BATCH/TSO/STC                   *   FILE 022\n//*            UCBSVC78   PARM INPUT THAT WRITES 1 LINER ON         *   FILE 022\n//*                       AVAILABLE SPACE                           *   FILE 022\n//*            UCBSCAN    SCANS ALL SYSTEM UCB'S AND GIVES          *   FILE 022\n//*                       'CHANNEL-PATHS'                           *   FILE 022\n//*                       - RUNS UNDER TSO, AS A BATCH JOB, OR      *   FILE 022\n//*                         STC                                     *   FILE 022\n//*                       - GIVES UCB INFO, ISSUES LSPACE SVC       *   FILE 022\n//*                       - HAS CLIST.  EASY TO RUN AS STC TO       *   FILE 022\n//*                         ISSUE EVERY 8 HRS                       *   FILE 022\n//*            UCBTYPES   USED BY MEM(UCBSCAN) TO DETERMINE         *   FILE 022\n//*                       DEVICE TYPES                              *   FILE 022\n//*            WTONROLL   PROGRAM TO ISSUE WTO'S TO CONSOLE W/O     *   FILE 022\n//*                       ROLLING THEM                              *   FILE 022\n//*           -SAS 5.16-                                            *   FILE 022\n//*            SASCATS    READS OUTPUT OF MEM(CATSTRI#) AND SENDS   *   FILE 022\n//*                       IT THROUGH SAS                            *   FILE 022\n//*                       - USES A 'LISTCAT ALL' AND CP 'VTOC' AS   *   FILE 022\n//*                         INPUT TO                                *   FILE 022\n//*                       - GIVE STATS ON ALL VSAM, NONVSAM, AND    *   FILE 022\n//*                         ICF-CATALOG INFO                        *   FILE 022\n//*            SASDDDEF   A LOGICAL LISTING OF DDDEFS FROM SMP/E    *   FILE 022\n//*                       FOR ANY ZONE                              *   FILE 022\n//*            SASSMP     READS OUTPUT OF 'LIST FUNCTIONS'          *   FILE 022\n//*                       COMMAND, PROCESSING FMIDS                 *   FILE 022\n//*            SASSMP     SAS, TO PROCESSES NON-APPLIED SYSMODS     *   FILE 022\n//*                       IN ANY CSI ZONE                           *   FILE 022\n//*            SASTMS     PROCESSES OUTPUT OF 'TMSGRW' INTO SAS     *   FILE 022\n//*                       FOR REPORTING                             *   FILE 022\n//*            SASVTOC    SAS/GRAPH TO PROCESS ALL VTOCS BY         *   FILE 022\n//*                       DSORG, NOTING FREE SPACE                  *   FILE 022\n//*            SMPELIST   PROCESSES OUTPUT '//SMPELIST' FOR A       *   FILE 022\n//*                       'LIST FUNCTIONS'                          *   FILE 022\n//*            TMSMACRO   PROCESSES OUTPUT OF TMC FROM TMCGRW PGM   *   FILE 022\n//*            SASSMF30   PROCESS SMF TYPE 30                       *   FILE 022\n//*            - CLIST -                                            *   FILE 022\n//*            CLISTSOE   DISPLAYS ALL NEW FUNCTIONS UNDER TSO/E 3  *   FILE 022\n//*            SYSTAT$    PROCESS SYSTAT PGM                        *   FILE 022\n//*            UCBSCAN$   PROCESS UCBSCAN ROUTINE                   *   FILE 022\n//*            ADRMCLVL$  PROCESS DFDSS LEVEL                       *   FILE 022\n//*            - ISPF V2.3 PANELS -                                 *   FILE 022\n//*            SYSLOG$$   FOR SYSLOG$ CLIST                         *   FILE 022\n//*            - ISREDIT MACROS -                                   *   FILE 022\n//*            $AMODGEN    BROWSE AMODGEN                           *   FILE 022\n//*            $ASMHCL     BUILD ASSEMBLE AND LINK JCL AROUND       *   FILE 022\n//*                        SOURCE CODE, OR FOREGROUND               *   FILE 022\n//*            $BROWSE     BROWSE FROM EDIT SESSION                 *   FILE 022\n//*            $COPY       USE ADVANCED LMCOPY FUNCTION             *   FILE 022\n//*            $EXEC       ISSUE THE TSO 'EXEC' COMMAND FOR         *   FILE 022\n//*                        CURRENT CLIST ONE IS EDI                 *   FILE 022\n//*            $GENER      EXEC IEBGENER                            *   FILE 022\n//*            $HASPSRC    BROWSE 'SYS1.HASPSRC'                    *   FILE 022\n//*            $IEHMAP     MAP A VOLUME                             *   FILE 022\n//*            $JOB        PUT A JOBCARD AND DOCUMENTATION IN       *   FILE 022\n//*                        FRONT OF JCL                             *   FILE 022\n//*            $JUL        GET TODAY'S DATE                         *   FILE 022\n//*            $LC         PERFORM LISTCAT                          *   FILE 022\n//*            $LD         PERFORM LISTD ON CURRENT DATASET         *   FILE 022\n//*            $LDI        PERFORM LISTDSI ON CURRENT DATASET       *   FILE 022\n//*            $LISTLVL    PERFORM LISTCAT LEVEL                    *   FILE 022\n//*            $LM         LIST ALL MEMBERS: PGM=LM                 *   FILE 022\n//*            $LS         LIST FREE SPACE: PGM=LS; PGM=CLEAR       *   FILE 022\n//*            $MACLIB     BROWSE MACLIB                            *   FILE 022\n//*            $PEND       PUT A PEND AND EXEC AT THE END OF A      *   FILE 022\n//*                        PROC                                     *   FILE 022\n//*            $PRINT      USE PRINTOFF TO PRINT CURRENT MEMBER     *   FILE 022\n//*            $PROCLIB    EDIT SYS1.PROCLIB                        *   FILE 022\n//*            $RECEIVE    BUILD SMP/E JCL TO RECEIVE A             *   FILE 022\n//*                        PRODUCT/MAINT                            *   FILE 022\n//*            $SPACE      DETERMINE DISK/TAPE BLKSIZE BASED ON     *   FILE 022\n//*                        LRECL                                    *   FILE 022\n//*                                                                 *   FILE 022\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADRMCLC$": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "FILE022"}, "text": "PROC 0\nCONTROL MAIN\nCALL 'LINKLIB(ADRLEVEL)'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADRMCLV#": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE022"}, "text": "//ADRMCLV#   JOB\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=4M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.ASAMPLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=HEDGESM.RMHFILE,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=V3330,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(ADRCLVL),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(0,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=V3330,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLMOD  DD  DSN=LINKLIB(ADRLEVEL),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADRMCLVL": {"ttr": 1806, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x004\\x004\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "FILE022"}, "text": " TITLE 'DFDSS VERSION  -  ADDRESS FROM THE COMUNICATIONS VECTOR TABLE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  RETREIVE LEVEL OF DF/DSS FROM MVS                                  *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nADRLEVEL CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  ADRLEVEL,R12          * BASE                            S\n         B      *+24                  * BRANCH OVER CONSTANTS\n         DC     C'&SYSDATE_&SYSTIME_V1.0'\n         LA     R10,SAVE              *\n         ST     R10,8(R13)            *\n         ST     R13,SAVE+4            *\n         LR     R13,R10               *\nGO       STM    R0,R15,SAVE15\n         ADRMCLVL\n         ST     R1,PARM\n         SRL    R1,24                 * FIRST BYTE RC\n         LTR    R1,R1                 * HOW ARE WE DOIN'\n         BZ     OKAY\n         STC    R1,RC\n         TR     RC(1),TRTBL\n         MVC    ERRORMES(14),=C'RETURN CODE = '\n         TPUT   ERRORMES,15\n         B      RETURN\nOKAY     TR     PARM(4),TRTBL\n         MVC    VER(1),PARM+1\n         MVC    REL(1),PARM+2\n         MVC    MOD(1),PARM+3\n         TPUT   MESSAGE,50\nRETURN   LM     R0,R15,SAVE15\n         SR     R15,R15               *  ZERO RETURN REGISTER\n         L      R13,SAVE+4            * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)           * RETURN ADDRESS\n         LM     R0,R12,20(R13)        * REST OF THE REGS\n         BR     R14                   * RETURN\n         SPACE 2\nSAVE15   DS     15F\nSAVE     DS     16F\nPARM     DS     F\nERRORMES DC     CL14' '\nRC       DC     C' '\nMESSAGE  DC     C' DFDSS  VERSION=   RELEASE=   MODIFICATION LEVEL= '\nVER      EQU    MESSAGE+16\nREL      EQU    MESSAGE+27\nMOD      EQU    MESSAGE+49\nTRTBL    DC     C'0123456789ABCDEF'\n         REGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTHOR": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00W\\x00W\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME =                                                      *\n*                                                                     *\n*  DESCRIPTIVE NAME =                                                 *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION =                                                         *\n*                                                                     *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN                       *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS =          (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT =                                                *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BINTIME": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00:\\x00:\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&BINTME  BINTIME &VALUE,&RESULTS\n.*-------------------------------------------------------------------*\n.*    MACRO: BINTIME                                                 *\n.* FUNCTION: CONVERT TIME IN 100THS TO HH:MM:SS                      *\n.*           THIS FORMAT IS USED IN ALL SMF AND RMF RECORD TYPES     *\n.*           IT IS THE 'TIME BIN' MACRO FORMAT                       *\n.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION, THAT IS PASSED   *\n.*            'RESULTS' IS THE RX VALUE, CL8, THAT WILL CONTAIN      *\n.*            THE RETURNED VALUE                                     *\n.* EXAMPLE:   DOIT  BINTIME  SMF5TME,STARTME                         *\n.*            .                                                      *\n.*            .                                                      *\n.*            STARTME  DS    CL8                                     *\n.*-------------------------------------------------------------------*\n         GBLB   &TIMEG                 * SET GLOBAL VARIABLE\n         LCLC   &I                     *\n&I       SETC   '&SYSNDX'\n&BINTME  STM   0,4,STIME$$             * RESTORE REGS\n         ICM   1,B'1111',&VALUE        * IN HUNDREDTHS (.01) SEC\n         XR    0,0                     *\n         D     0,=F'100'               * MAKE INTO SECONDS\n         LR    2,1                     * SAVE SECONDS:            R2\n.* PROCESS HOURS\n         XR    0,0                     * CLEAR\n         D     0,=F'3600'              * GET HOURS\n         LR    3,1                     * STORE HOURS:             R3\n         M     0,=F'3600'              * HOURS * 3600 = MINUTES\n         SR    2,1                     * REMOVE HOURS\n         LR    1,2                     *\n.* PROCESS MINUTES\n         XR    0,0                     * CLEAR\n         D     0,=F'60'                * GET MINUTES\n         LR    4,1                     * STORE MINS:              R4\n         M     0,=F'60'                * REMOVE MINUTES\n         SR    2,1                     * SAVE DIFFERENCE\n.* EDIT HOURS MINUTES AND SECONDS\n         CVD   3,DWORD                 *\n         UNPK  &RESULTS.(2),DWORD+6(2) *\n         OI    &RESULTS.+1,X'F0'       *\n         CVD   4,DWORD                 *\n         UNPK  &RESULTS.+3(2),DWORD+6(2)\n         OI    &RESULTS.+1+3,X'F0'     * OR 1/2 BYTE\n         CVD   2,DWORD                 *\n         UNPK  &RESULTS.+3+3(2),DWORD+6(2)\n         OI    &RESULTS.+1+3+3,X'F0'   * OR 1/2 BYTE\n         MVI   &RESULTS.+2,C':'        * ADD HH:MM:SS\n         MVI   &RESULTS.+5,C':'        * ...\n         LM    0,4,STIME$$             * RESTORE REGS\n.*\n.* IF ISSUED BEFORE, SKIP VALUES\n.*\n         AIF    (&TIMEG).MEND\n&TIMEG   SETB  1\n         B     B&I                     * SKIP SAVE AREA\nSTIME$$  DS    5F                      * SAVE REGS\nB&I      EQU    *\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATSTRI#": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE022"}, "text": "//CATSTRIP  JOB\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE CATSTRIP CODE.    *\n//*                                                                   *\n//* PERFORM A 'CHANGE ALL' ON 'THIS.LIBRARY' AND 'A.LINKLIB' TO POINT *\n//*         TO INSTALLATION LIBRARIES                                 *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=2M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=16000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(CATSTRIP),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(6,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLMOD  DD  DSN=A.LINKLIB(CATSTRIP),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATSTRIP": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x83\\x00\\x83\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "FILE022"}, "text": " TITLE '  ICF -  CATALOG STRIP ROUTINE'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                               *\n*   THIS PROGRAM TAKE THE OUTPUT OF A 'LISTCAT CATALOG ALL'     *\n*   AN REMOVES ALL '-', DASHES, AND FORMATS THE CLUSTERS        *\n*   FOR THE FOLLOWING SAS STEP. (SASCAT)                        *\n*                                                               *\n*   DDNAME LIST - OUTPUT OF LISTCAT                             *\n*   DDNAME SYSOUT-OUTPUT OF CATSTRIP PGM, LRECL=120             *\n*                                                               *\n*           AUTHOR = MARK V. HEDGES -                           *\n*                    ADRIA LABORATORIES                         *\n*                    7001 POST ROAD                             *\n*                    DUBLIN OH 43017                            *\n*                    (614) 764-8175                      P.T.L. *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nCATSTRIP CSECT\n         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n         LR    R12,R15                 SAVE PGM BEGIN ADDR\n         USING CATSTRIP,R12,R11\n         L     R11,SEC4K               ADDR 2ND 4K\n         LA    R10,SAVE                ADDR NEW SAVE AREA\n         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR\n         B     BEGIN                   JUMP OVER SAVE\nSAVE     DS    18F                     SAVE AREA FOR THIS PGM\nSEC4K    DC    A(CATSTRIP+4096)          ADDR OF 2ND 4K\n         EJECT\nBEGIN    DS    0H\n         XR    R5,R5\n         OPEN  (SYSIN,,SYSOUT,OUTPUT)\n$LOW     A      R5,=F'1'\n$LOOP    MVC    INREC(125),=125C' '\n         GET    SYSIN,INREC\n         CLI    INREC+4,C'1'\n         BE     $LOOP\n         CLI    INREC+4,C'-'\n         BE     $LOOP\n         CLI    INREC+4,C'0'\n         BNE    $PUT\n         MVI    INREC+4,C' '\n$PUT     C      R5,=F'3'\n         BL     $LOW\n         CLC    INREC+4+1(7),=C'CLUSTER'\n         BE     $CLUSTER\n$PUTREC  MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         B      $LOOP\n$CLUSTER MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         MVC    INREC(125),=125C' '\n         BAL    R6,DASHES\n         GET    SYSIN,INREC\n         MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         MVC    INREC(125),=125C' '\n         BAL    R6,DASHES\n         GET    SYSIN,INREC\n         MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         MVC    INREC(125),=125C' '\n         BAL    R6,DASHES\n         GET    SYSIN,INREC\n         MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         MVC    INREC(125),=125C' '\n         BAL    R6,DASHES\n         GET    SYSIN,INREC\n         MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         MVC    INREC(125),=125C' '\n         BAL    R6,DASHES\n         GET    SYSIN,INREC\n         MVC    OUTREC(121),INREC+5\n         BAL    R6,DASHES\n         PUT    SYSOUT,OUTREC\n         LA     R3,10\n$REGET   MVC    INREC(125),=125C' '\n         GET    SYSIN,INREC\n         CLC    INREC+4+4(6),=C'DATA -'\n         BE     $PUTREC\n         BCT    R3,$REGET\n         B      $PUTREC\nDASHES   LA     R2,OUTREC\n         LA     R3,120\n$DASH    LA     R2,1(R2)\n         CLI    0(R2),C'-'\n         BNE    *+8\n         MVI    0(R2),C' '\n         BCT    R3,$DASH\n         BR     R6\n$EOF     CLOSE  (SYSIN)\n         CLOSE  (SYSOUT)\n         SR     R15,R15                 ZERO RETURN REGISTER\n         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            RETURN ADDRESS\n         LM     R0,R12,20(R13)         REST OF THE REGS\n         BR     R14                    RETURN\nOUTREC   DS    CL121\nINREC    DS    CL125\nOLDNAME  DS    CL44\nFLAG     DC    X'00'\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=LIST,RECFM=VBA,LRECL=125,DSORG=PS,BLKSIZE=629,   X\n               EODAD=$EOF,MACRF=GM\nSYSOUT   DCB   DDNAME=SYSOUT,RECFM=FB,LRECL=121,MACRF=PM,DSORG=PS,     X\n               BLKSIZE=23474\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CENTER": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&N       CENTER &M,&LEN=133,&FILL=' '    LEN=LENGTH OF LINE,\n         LCLA  &AL1,&AL2,&AL3            FILL=FILLER CHARS\n.*-------------------------------------------------------------------*\n.*                       E X A M P L E                               *\n.*      OUTFILE   DS   0H                               OUTPUT AREA  *\n.*      CARR      DC   C'1'                             TOP OF PAGE  *\n.*                CENTER 'T O P   O F   R E P O R T',LEN=132         *\n.*-------------------------------------------------------------------*\n&AL1     SETA  K'&M\n         AIF   ('&M'(1,1) NE '''').A\n&AL1     SETA  &AL1-2\n.A       ANOP\n         AIF   (&AL1 GT &LEN).D\n&AL2     SETA  (&LEN-&AL1)/2\n&AL3     SETA  &LEN-&AL1-&AL2\n.F       ANOP\n         AIF   ('&N' EQ '').E\n&N       EQU   *\n.E       AIF   (&AL3 EQ 0).C\n         DC    &AL3.C&FILL\n.C       AIF   ('&M'(1,1) EQ '''').B\n         DC    CL&AL1'&M'\n         AIF   (&AL2 EQ 0).END\n         DC    &AL2.C&FILL\n         MEXIT\n.B       DC    CL&AL1&M\n         AIF   (&AL2 EQ 0).END\n         DC    &AL2.C&FILL\n         MEXIT\n.D       ANOP\n&AL2     SETA  0\n&AL3     SETA  0\n         AGO   .F\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLEAR": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00%\\x00%\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "FILE022"}, "text": "CLEAR    CSECT\n***********************************************************************\n*                                                                     *\n*        CLEAR IS A TSO COMMAND PROCESSOR THAT MAY BE USED TO         *\n*        ERASE (CLEAR) A DISPLAY TUBE.  THIS FUNCTION HAS MANY        *\n*        USES ALTHOUGH IT IS BEST USED WITHIN CLISTS TO INSURE        *\n*        THAT WHEN DATA IS DISPLAYED, IT IS DISPLAYED FROM THE        *\n*        TOP OF THE SCREEN.                                           *\n*                                                                     *\n*        THIS ROUTINE IS DEPENDENT UPON THE INSTALLATION OF THE       *\n*        'SPF' FULLSCREEN MACROS IN YOUR TCAM MCP.  THESE TWO         *\n*        MACROS ARE AVAILABLE WITH 'SPF' (PROGRAM PRODUCT) OR         *\n*        WITH 'IPCS' (FREE WITH MVS).                                 *\n*                                                                     *\n*        THE FOLLOWING EXPLAINS THE DATA TRANSFERED:                  *\n*              F1   = WRITE CONTROL CHARACTER                         *\n*              11   = SET BUFFER ADDRESS                              *\n*              5D7E = ROW-24 COL-79 (END OF SCREEN-1 FOR SPF)         *\n*              11   = SETBUFFER ADDRESS                               *\n*              4040 = 1ST POSITION ON SCREEN (POSITION CURSOR SPF)    *\n*              11   = SET BUFFER ADDRESS                              *\n*              5D7F = ROW-24 COL-80 (END OF SCREEN)                   *\n*              13   = INSERT CURSOR                                   *\n*              3C   = REPEAT TO ADDRESS                               *\n*              5D7F = ROW-24 COL-80 (END OF SCREEN)                   *\n*              00   = FILL CHARACTER                                  *\n*                                                                     *\n***********************************************************************\n         USING CLEAR,15       INFORM THE ASSEMBLER\n         LA    0,3            GET TPUT OPTION BYTE\n         SLL   0,24           SHIFT TO HIGH ORDER\n         LA    1,=X'F1115D7E114040133C404000'\n         OR    1,0            COPY TPUT OPTION\n         LA    0,12           SET SIZE FOR TPUT\n         SVC   93             ISSUE TPUT SVC\n         BR    14             RETURN TO SYSTEM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLISTSOE": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x92\\x00\\x92\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 146, "newlines": 146, "modlines": 0, "user": "FILE022"}, "text": "PROC 0\nCONTROL MAIN\nCLEAR\nWRITE This is an example of all valid clist functions and their use\nDELAY 1\nWRITE __Function__ _________ Description ______________  ___ Value ___\nWRITE   SYSTSOE ..... Version of TSO/E .................... &SYSTSOE\nWRITE   SYSDATE ..... Date in the form MM/DD/YY ........... &SYSDATE\nWRITE   SYSSDATE .... Date in the form YY/MM/DD ........... &SYSSDATE\nWRITE   SYSJDATE .... Date in the form YY.DDD ............. &SYSJDATE\nWRITE   SYSTIME ..... Time in the form HH:MM:SS ........... &SYSTIME\nWRITE   SYSSTIME .... Time in the form HH:MM .............. &SYSSTIME\nWRITE   SYSLTERM .... Lines avail. to terminal ............ &SYSLTERM\nWRITE   SYSWTERM .... Width of screen ..................... &SYSWTERM\nWRITE   SYSUID ...... TSO userid .......................... &SYSUID\nWRITE   SYSPREF ..... Current TSO prefix from PORFILE ..... &SYSPREF\nWRITE   SYSPROC ..... Current TSO LOGON procedure ......... &SYSPROC\nWRITE   SYSCPU ...... CPU usage per signon secs.hndrts .... &SYSCPU\nWRITE   SYSSRV ...... SRM service units ................... &SYSSRV\nWRITE   SYSISPF ..... Is ISPF active ? (ACTIVE/NOT ACTIVE). &SYSISPF\nWRITE   SYSRACF ..... Is RACF active ? .................... &SYSRACF\nWRITE                 (AVAILABLE/NOT AVALIABLE/NOT INSTALLED)\nWRITE   SYSLRACF..... RACF version ........................ &SYSLRACF\nWRITE   SYSHSM ...... Is HSM active ? ..................... &SYSHSM\nWRITE   SYSENV ...... Is CLIST Mode ..(FORE/BACK).......... &SYSENV\nWRITE   SYSSCAN ..... Number of times symbolic sub (16) ... &SYSSCAN\nWRITE   SYSICMD ..... Explicit command invocation ......... &SYSICMD\nWRITE   SYSPCMD ..... Most recent TSO command entered ..... &SYSPCMD\nWRITE   SYSSCMD ..... Most recent TSO command via CLIST ... &SYSSCMD\n\nWRITENR\nREAD\nCLEAR\nWRITE __Function__ _________ Description ______________  ___ Value ___\nWRITE   SYSNEST ..... Are we executing in a nested proc ... &SYSNEST\nWRITE   SYSDLM ...... Used with TERMIN for position ....... &SYSDLM\nWRITE   SYSDVAL ..... An unformatted read form terminal ... &SYSDVAL\nWRITE   SYSOUTTRAP .. Max # lines of TSO command output ... &SYSOUTTRAP\nWRITE   SYSOUTLINE .. Max # lines of TSO command saved .... &SYSOUTLINE\nWRITE   LASTCC ...... Previous condition code ............. &LASTCC\nWRITE   MAXCC ....... MAX condition code .................. &MAXCC\nWRITE                 Using the TSOEXEC command ...\nWRITE   SYSABNCD .... ABEND code .......................... &SYSABNCD\nWRITE   SYSABNRC .... ABEND Reason Code ................... &SYSABNRC\nWRITE   SYSCMDRC .... ABEND Command Return Code ........... &SYSCMDRC\nWRITE   WHEN......... Used after a CALL or LOAD ........... n/a\nWRITE                 WHEN SYSRC(= 0)  CMD\n\nWRITENR\nREAD\nCLEAR\nWRITE __Function__ _________ Description ______________  ___ Value ___\nWRITE   EVAL ........ Evaluate an arith. expression .(1+6).. &EVAL(1+6)\nWRITE   LENGTH ...... Evaluate Length of exp. LENGTH(AA) .. &LENGTH(AA)\nWRITE   DATATYPE .... Eval. (CHAR/NUM) expression .123... &DATATYPE(123)\nWRITE   NRSTR ....... Remove an amperstand ................ &NSTR(&&A)\nWRITE   STR ......... Notify CLIST of a character string... &STR(5/5)\nWRITE   SUBSTR ...... SUBSTR(STRT:ENDCOL,VALUE) ...........\nWRITE   SYSCAPS ..... Change to upper case  'a' ........... &SYSCAPS(a)\nWRITE   SYSLC ....... Change to Lower case  'X' ........... &SYSLC(X)\nWRITENR\nREAD\nCLEAR\nWRITE __Function__ _________ Description ______________  ___ Value ___\nWRITE   SYSDSN ...... Wheter a dataset exits ..........................\nWRITE         (OK -------------------- Dataset exits or DSN and Member)\nWRITE         (MEMBER SPECIFIED, BUT DATASET NOT PARTITIONED - obvious)\nWRITE         (MEMBER NOT FOUND ------------------------------ obvious)\nWRITE         (DATASET NOT FOUND ----------------------------- obvious)\nWRITE         (ERROR PROCESSING REQUESTED DATASET ------------ obvious)\nWRITE         (PROCTECTED DATASET ---------------------------- RACF   )\nWRITE         (VOLUME NOT ON SYSTEM -------------------------- obvious)\nWRITE         (UNAVAILABLE DATASET  -------------------------- ENQ Prob)\nWRITE         (INVALID DATASET NAME -------------------------- obvious)\nWRITE         (MISSING DATASET NAME -------------------------- obvious)\nWRITE\nWRITE EXAMPLES:   for 'SYS1.PROCLIB'  SYSDSN=&SYSDSN('SYS1.PROCLIB')\nWRITE                 - Member QQ    SYSDSN=&SYSDSN('SYS1.PROCLIB(QQ)')\nWRITE             for 'SYS1.LOGREC'   SYSDSN=&SYSDSN('SYS1.LOGREC')\nWRITE                 - Member QQ    SYSDSN=&SYSDSN('SYS1.LOGREC(QQ)')\nWRITE             for 'SYS1.MAN1'     SYSDSN=&SYSDSN('SYS1.MAN1')\nWRITE\nWRITENR\nREAD\nCLEAR\nWRITE LISTDSI 'SYS1.PROCLIB' DIRECTORY\nLISTDSI 'SYS1.PROCLIB' DIRECTORY\nSET &RC=&LASTCC\nWRITE         - DSN   = &SYSDSNAME\nWRITE         - VOL   = &SYSVOLUME\nWRITE         - UNIT  = &SYSUNIT\nWRITE         - DSORG = &SYSDSORG\nWRITE         - RECFM = &SYSRECFM\nWRITE         - LRECL = &SYSLRECL\nWRITE         - BLKZ  = &SYSBLKSIZE\nWRITE         - Key   = &SYSKEYLEN\nWRITE         - Alloc = &SYSALLOC\nWRITE         - Used  = &SYSUSED  in units\nWRITE         - Prim. = &SYSPRIMARY in units\nWRITE         - Sec.  = &SYSSECONDS in units\nWRITE         - Units = &SYSUNITS\nWRITE         - Extnt = &SYSEXTENTS\nWRITE         - Cdate = &SYSCREATE\nWRITE         - Rdate = &SYSREFDATE\nWRITE         - Edate = &SYSEXDATE\nWRITE         - PSWD  = &SYSPASSWORD\nWRITE         - RACF  = &SYSRACFA\nWRITE         - Chng. = &SYSUPDATED\nWRITE         - Trk/Cyl = &SYSTRKSCYL\nWRITE         - Blk/Trk = &SYSBLKSTRK\nWRITE         - Dir alloc = &SYSADIRBLK\nWRITE         - Dir used = &SYSUDIRBLK\nWRITE         - #members = &SYSMEMBERS\nWRITE         - LASTCC = &RC\nWRITE         - Reason = &SYSREASON\nWRITE         - Msg 1  = &SYSMSGLVL1\nWRITE         - Msg 2  = &SYSMSGLVL2\nWRITENR\nREAD\nCLEAR\nWRITE __Function__ _________ Description ______________  ___ Value ___\nWRITE  READDVAL ...  Reads the values of SYSDVAL\nWRITE               IF SYSDVAL=XX,YY,ZZ THEN ...\nSET &SYSDVAL=&STR(XX,YY,ZZ)\nREADDVAL NAME1,NAME2,NAME3\nWRITE             READDVAL NAME1,NAME2,NAME3 = &NAME1,&NAME2,&NAME3\nWRITE\nWRITE                         Other functions\nWRITE DO-END\nWRITE\nWRITE GOTO Label .... Lable:  Command\nWRITE\nWRITE DO-WHILE-END\nWRITE\nWRITE IF-THEN-ELSE\nWRITE\nWRITE IF-THEN-DO-END\nWRITE\nWRITE IF-THEN-DO-END-ELSE-DO-END\nWRITE\nWRITE ... Normal file processing\nWRITE ALLOC-OPENFILE-ERROR ON-GETFILE-PUTFILE-ERROR OFF-CLOSFILE-FREE\nWRITE ... Normal file processing\nWRITE\nWRITE ALLOC-OPENFILE-ERROR ON-GETFILE-PUTFILE-ERROR OFF-CLOSFILE-FREE\nWRITE               if error goto close ... or close the file\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CPUTIME": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00J\\x00J\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&LABEL   CPUTIME  &VALUE,&FULL\n.*-------------------------------------------------------------------*\n.*    MACRO: CPUTIME                                                 *\n.* FUNCTION: CONVERT CPUTIME FROM BINARY TO MINUTE/SECONDS           *\n.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION OR REGISTER IN THE*\n.*            FORM '(3)', WHICH IS TRANSLATED INTO SECONDS.HNDTHS    *\n.*            FOR CPUTIME, FROMM SMF/RMF RECORDS                     *\n.* EXAMPLE:   DOIT  CPUTIME  SMF5JCPU                                *\n.*            (MINUTES.SECONDS) = CL7                                *\n.*            (VALUES ARE RETURNED IN VARIABLES MINUTES CL4          *\n.*             AND SECONDS CL3)                                      *\n.*                                                                   *\n.*                                                                   *\n.*                                                                   *\n.*-------------------------------------------------------------------*\n         GBLB   &GLBL                  * SET GLOBAL VARIABLE\n         LCLC   &I,&REG                *\n&I       SETC   '&SYSNDX'\n&LABEL   STM    0,4,S$$##$$            * SAVE REGS\n         XC     MINUTES,MINUTES        * ZERO\n         TR     MINUTES(4),=C' '       * BLANK\n.*-------------------------------------------------------------------*\n.* INSERT CPUTIME INTO R1                                            *\n.*-------------------------------------------------------------------*\n         AIF    ('&FULL' NE '').SKIP1\n         AIF    ('&VALUE'(1,1) EQ '(').REG\n         ICM    1,B'0111',&VALUE       * INSERT VALUE, 3 BYTES\n         AGO    .STORE1\n.SKIP1   ANOP\n         AIF    ('&VALUE'(1,1) EQ '(').REG\n         L      1,&VALUE               * LOAD VALUE\n         AGO    .STORE1\n.REG     ANOP\n&REG     SETC   '&VALUE'(2,1)\n         MNOTE  0,'REG=&REG'\n         LR     1,&REG\n.STORE1  ANOP\n         XR     0,0                    * CLEAR EVEN\n         D      0,=F'100'              * CHANGE 100TH SECOND TO SECONDS\n         LR     3,1                    * SAVE QUOTIENCT, SECONDS\n         XR     0,0                    *\n.*\n         D      0,=F'60'               * GET MINUTES\n         LTR    1,1                    * ANY MINUTES ?\n         BZ     SEC&I                  * NOPE, USE SECONDS ONLY\n         LR     4,1                    * YEP, SAVE QUOTIENCT, MINUTES\n         M      0,=F'60'               * FIGURE REMIANDER IN SECONDS\n         LR     0,3                    * RELOAD RAW SECONDS\n         SR     0,1                    * SEC-((SEC/60)*60),\n*                                        ... DROPPING THE REMAINDERS\n         LR     0,3                    * NEW SECONDS\n.*-------------------------------------------------------------------*\n.*       NOW WE HAVE MINUTES AND SECONDS                             *\n.*-------------------------------------------------------------------*\n         CVD    4,DWORD                *\n         MVC    MINUTES(4),=X'40202021'\n         ED     MINUTES(4),DWORD+6     *\n.*                                     *\nSEC&I    DS     0H                     *\n         CVD    3,DWORD                *\n         MVI    SECONDS,C'.'           * TELL ABEOUT SECONDS\n         UNPK   SECONDS+1(2),DWORD(8)  * UNPACK SECONDS\n         OI     SECONDS+2,X'F0'        * OR RESULTS\nLM&I     LM     0,4,S$$##$$            * RESTORE REGS\n.* IF ISSUED BEFORE, SKIP VALUES\n         AIF    (&GLBL).MEND           *\n&GLBL    SETB   1                      *\n         B      B&I                    * SKIP SAVE AREA\nS$$##$$  DS     5F                     *\nMINUTES  DS     CL4                    * MMMM\nSECONDS  DS     CL3                    *     .SS\nB&I      DS     0H                     *\n.MEND    MEND                          *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE$": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x005\\x005\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "FILE022"}, "text": "/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\n/* DOC:  THIS IS AN ISPF V2.3 ISREDIT MACRO                          */\n/* REQ:  USER MUST BE IN ISPF EDIT MODE                              */\n/*                                                                   */\n/* FUNCTION: CREATES JCL TO SUBMIT JOB FOR PGM=DATE80/DATE133        */\n/*                                                                   */\n/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/\nPROC 0  SUFF(80)\nCONTROL MAIN\nISREDIT MACRO (OP,OP1)\nSET &CL=\nSET &ID=&SYSUID\nSET &RC=0\nISREDIT (DSN) =  DATASET\nISREDIT (LRECL) = LRECL\nIF &LRECL = 133 THEN SET &SUFF=133\nISREDIT (MEM) =  MEMBER\nISREDIT SAVE\n\nSET &PARM=\nSET &COPIES=\nSET &DEST=LOCAL\nSET &SOUT=A\nSET &NAME=&SUBSTR(1:&LENGTH(&ID)-1,&ID)\n\nIF &DATATYPE(&OP)=CHAR THEN DO\n   IF &OP=OP OR &OP=O THEN SET &PARM=&STR(OVERPRINT)\n   IF &OP=L THEN SET &SOUT=L\n   IF &OP1=L THEN SET &SOUT=L\n   IF &OP=X THEN SET &SOUT=X\n   IF &OP1=A THEN SET &SOUT=A\n   IF &OP=A THEN SET &SOUT=A\n   IF &OP1=X THEN SET &SOUT=X\n   IF &OP1=OP OR &OP1=O THEN SET &PARM=&STR(OVERPRINT)\n   IF &DATATYPE(&OP1)=NUM THEN SET &COPIES=&STR(COPIES(&OP1))\n  END\n                       ELSE DO\n   IF &OP\u00ac=  THEN SET &COPIES=&STR(COPIES(&OP))\n   IF &OP1=L THEN  SET &CL=&STR(CLASS(L))\n  END\n\nIF &MEM\u00ac=  THEN SET &MEM=&STR((&MEM))\n\nALLOC DD(SYSUT1) DS('&DSN.&MEM') SHR\nALLOC DD(SYSUT2) SYSOUT(&SOUT) DEST(&DEST) &COPIES &CL\nCALL 'LINKLIB(DATE&SUFF)' '&PARM'\nFREE DD(SYSUT1,SYSUT2)\n\nSET &ZEDSMSG = &STR(&MEM SAVED+PRINTED)\nSET &ZEDLMSG = &STR(&DSN.&MEM SAVED AND PRINTED ON &DEST &COPIES)\n\nISPEXEC SETMSG MSG(ISRZ001)\nEXIT CODE(&RC)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATERC": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x80\\x00\\x80\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 128, "newlines": 128, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = DATERC                                               *\n*                                                                     *\n*  DESCRIPTIVE NAME = USES '$STCK' MACRO TO RETURN DAY-OF-WEEK        *\n*                     USED AS RETURN CODE IN REG15                    *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = RC=0, MONDAY - RC=6, SUNDAY                             *\n*                                                                     *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 ..... SAVE FOR RETURN CODE                             *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM:                                           *\n*                                                                     *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*             MODULE TYPE =                                           *\n*                                                                     *\n*                PROCESSOR = ASMH V2.1                                *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS =          (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT =                                                *\n*                                                                     *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\nDATERC   CSECT\n         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n         LR    R12,R15                 SAVE PGM BEGIN ADDR\n         USING DATERC,R12\n         LA    R10,SAVE                ADDR NEW SAVE AREA\n         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR\n         $STCK\n         XR     R2,R2\n         IC     R2,XDAY                LOAD DAY 0=MONDAY - 6=SATURDAY\n         ST     R2,RC\nFINISH   XR     R15,R15\n         L      R15,RC                 SET RETURN CODE\n         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            RETURN ADDRESS\n         LM     R0,R12,20(R13)         REST OF THE REGS\n         BR     R14                    RETURN\nSAVE     DS    18F                     SAVE AREA FOR THIS PGM\nSAVE1    DS    1F\nRC       DC    F'0'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATERC#": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE022"}, "text": "//DATERC   JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEMBLE AND EXEC DATERC PGM                             *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(DATERC),DISP=SHR\n//L.SYSLMOD DD  DSN=LINKLIB(DATERC),DISP=SHR\n//*\n//DOIT EXEC PGM=DATERC,COND=(0,LT)\n//STEPLIB DD  DSN=LINKLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE133": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xb6\\x00\\xb6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "FILE022"}, "text": "//DATE133    JOB (000000,TECH),'HEDGESM',\n//            CLASS=Z,MSGCLASS=X,\n//            NOTIFY=HEDGESM\n//*-----------------------------------------------*\n//*   LIB: TS.SOURCE.CNTL(DATE133)\n//*   DOC: ASSEMBLE AND LINK USING ASMHCL\n//*-----------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=HEDGESM.SOURCE,DISP=SHR\n//SYSIN    DD  *\n TITLE '  DATE 133 CHAR RECORD, ADDING DATE + PAGE #'\nDATE133  CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  DATE133,R12             * BASES\n         LA     R10,SAVE              *\n         ST     R10,8(R13)            *\n         ST     R13,SAVE+4            *\n         LR     R13,R10               *\n         ST    R1,PARM\n         PRINT NOGEN\n         $STCK\n         PRINT GEN\n         MVC    DATE(8),XDATE           * SAVE TODAY MM/DD/YY - JUST DD\n         L      R1,PARM\n         L      R2,0(,R1)\n         LH     R3,0(,R2)\n         LTR    R3,R3\n         BZ     $OPEN\n         CLC    2(9,R2),=C'OVERPRINT'\n         BNE    $OPEN\n         MVI    PRTFLG,X'FF'\n*\n$OPEN    OPEN   (SYSUT1,,SYSUT2,OUTPUT) * OPENFILES\n         SPACE\n         XR     R3,R3                   * INIT PAGE COUNT\n         XR     R2,R2                   * INIT LINE COUNT\n         XR     R6,R6                   * ZERO\n         RDJFCB SYSUT1\n         LTR    R15,R15\n         BNZ    $ERROR\nLOOP     GET    SYSUT1,RECORD           * GET RECORD\n         CLI    RECORD,C'1'             * IS THIS T-O-P\n         BE     PUTPAGE                 * YEP, BRANCH\n         C      R3,=F'0'\n         BE     PUTPAGE\n         MVC    OFILE+1(132),RECORD+1    * PUT COLS 2-133 ON OUT FILE\n         MVC    OFILE(1),RECORD+0       * PUT CC. IN COL 1\n         PUT    SYSUT2,OFILE            * NOPE, WRITE RECORD\n         CLI    OFILE,C'+'              * OVER PRINT\n         BE     LOOP                    * NO EXTRA LINE\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         CLI    OFILE,C'-'              * TRIPLE PRINT\n         BE     $ADD3                   *\n         CLI    OFILE,C'0'              * DOUBLE SPACE\n         BE     $ADD2                   *\n         B      $ADD1                   *\n$ADD3    A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     PUTPAGE-4\n$ADD2    A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     PUTPAGE-4\n$ADD1    A      R2,=F'1'                * ADD ONE TO LINE COUNT\n         C      R2,=F'59'\n         BH     *+8\n         B      LOOP                    * RETURN ...\n         MVI    FLG,X'FF'               * SET PAGE OVERFLOW FLAG\nPUTPAGE  DS     0H\n         MVC    OFILE(133),=133C' '\n         A      R3,=F'1'                * ADD ONE TO PAGE COUNTER\n         XR     R2,R2                   * CLEAR LINE COUNTER\n         CVD    R3,DWORD                * CONVERT PAGE COUNTER\n         ED     EDIT(4),DWORD+6         * EDIT PAGE COUNTER\n         MVC    PAGE(3),EDIT+1          * PUT PAGE COUNTER\n         MVC    EDIT(4),EDIT1           * RESET EDIT CHARS\n         CLI    FLG,X'FF'\n         BE     OVERFLW#\n         LA     R4,RECORD+1-1           * LOAD PAST CC\n         LA     R5,133                  * RECORD LENGTH\nLOOKEND  LA     R4,1(R4)                * NEXT PLACE\n         CLI    0(R4),C' '\n         BNE    FOUNDEND\n         BCT    R5,LOOKEND\n         B      PUTCC\nFOUNDEND BCTR   R5,0\n         SPACE\n* NO MATER WHERE THE TITLE LINE IS PUT IT IN COLUMN '2' OF OUTPUT LINE\n         SPACE\n         MVC    OFILE+1(*-*),0(R4)      * MOVE HEADER\n         EX     R5,*-6\nPUTCC    MVI    OFILE,C'1'              * PUT CC. IN COL 1\n         MVC    OFILE+133-LHDR(LHDR),HEADER\n         MVC    SAVEHDR(133),=133C' '   * CLEAR HEADER\n         MVC    SAVEHDR(133),OFILE      * SAVE HEADER\nPUTOFILE PUT    SYSUT2,OFILE            * WRITE RECORD\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         MVC    OFILE(133),=133C' '\n         B      LOOP\nOVERFLW# MVC    OFILE(133),SAVEHDR\n         MVC    OFILE+133-LHDR(LHDR),HEADER\n         PUT    SYSUT2,OFILE            * WRITE RECORD\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         MVI    FLG,X'00'\n         MVC    OFILE(133),=133C' '\n         B      LOOP\n$OVERPRT DS     0H\n         MVC    XFILE(133),OFILE\n         MVI    XFILE,C'+'\n         PUT    SYSUT2,XFILE\n         MVC    XFILE(133),=133C' '\n         BR     R6                      * RETURN\nEOF      CLOSE  (SYSUT1)\n         CLC    JFCBDSNM(4),=C'JES2'\n         BE     CLOSE\n         LA     R2,DSNINFO+5\n         LA     R3,JFCBDSNM\n         LR     R4,R3\n$AGAIN   A      R4,=F'1'\n         CLI    0(R4),C' '\n         BNE    $AGAIN\n         SR     R4,R3\n         MVC    0(*-*,R2),JFCBDSNM\n         EX     R4,*-6\n         AR     R2,R4\n         CLI    JFCBELNM,C' '\n         BE     $GETVOL\n         MVI    0(R2),C'('\n         MVC    1(8,R2),JFCBELNM\n         MVI    9(R2),C')'\n         A      R2,=F'10'\n$GETVOL  MVC    4(6,R2),JFCBVOLS\n         PUT    SYSUT2,DSNINFO\nCLOSE    CLOSE  (SYSUT2)\n         SR     R15,R15              *  ZERO RETURN REGISTER\n         B      *+8\n$ERROR   L      R15,=F'16'\n         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\nHEADER   DS     0H\nDATE     DC     CL8'  /'\n         DC     CL4' PG '\nPAGE     DC     CL4' '\nLHDR     EQU    *-HEADER\nEDIT     DC     X'40202021'\nEDIT1    DC     X'40202021'\nRECORD   DC     CL133' '\nFLG      DC     X'00'\nOFILE    DC     CL133' '\nXFILE    DC     CL133' '\nSAVEHDR  DC     CL133' '\n         DS     0D\nDWORD    DS     D\nANY      EQU    *\nPARM     DS     F\nDSNINFO  DC     CL133'-DSN='\nPRTFLG   DC     X'00'\n         SPACE\n         PRINT NOGEN\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=133,MACRF=(GM),RECFM=FB,   X\n               EODAD=EOF,EXLST=EXL\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,LRECL=133,MACRF=(PM),RECFM=FBA,  X\n               BLKSIZE=23408\nLASTADDR EQU   *\nSAVE     DS     18F\nEXL      DC    X'87',AL3(JFCB)\nJFCB     EQU   *\n         IEFJFCBN  LIST=YES\n         LTORG\n         REGS\n         END\n//L.SYSLMOD DD  DSN=HEDGESM.LINKLIB(DATE133),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE80": {"ttr": 2319, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xd8\\x00\\xd8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 216, "newlines": 216, "modlines": 0, "user": "FILE022"}, "text": "//DATE80     JOB (000000,TECH),'HEDGESM',\n//            CLASS=Z,MSGCLASS=X,\n//            NOTIFY=HEDGESM\n//*-----------------------------------------------*\n//*   LIB: TS.SOURCE.CNTL(DATE80)\n//*   DOC: ASSEMBLE AND LINK USING ASMHCL\n//*-----------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=HEDGESM.SOURCE,DISP=SHR\n//SYSIN    DD  *\n TITLE '  DATE 80 CHAR RECORD ADDING DATE + PAGE #'\nDATE80   CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  DATE80,R12              * BASES\n         LA     R10,SAVE              *\n         ST     R10,8(R13)            *\n         ST     R13,SAVE+4            *\n         LR     R13,R10               *\n         ST    R1,PARM\n         $STCK GEN=NOGEN\n         MVC    DATE(8),XDATE           * SAVE TODAY MM/DD/YY - JUST DD\n         L      R1,PARM\n         L      R2,0(,R1)\n         LH     R3,0(,R2)\n         LTR    R3,R3\n         BZ     $OPEN1\n         CLC    2(9,R2),=C'OVERPRINT'\n         BNE    $OPEN1\n         MVI    PRTFLG,X'FF'\n*\n$OPEN1   OPEN   (SYSCHK,)               * FIGURE NUMBER OF PAGES\n         XR     R2,R2\n         XR     R3,R3\n$LOOP1   GET    SYSCHK\n         CLI    0(R1),C'1'\n         BE     $TOP\n         CLI    0(R1),C'+'\n         BE     $LOOP1\n         CLI    0(R1),C'-'\n         BE     $$ADD3\n         CLI    0(R1),C'0'\n         BE     $$ADD2\n         B      $$ADD1\n$$ADD3   A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     $TOP\n$$ADD2   A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     $TOP\n$$ADD1   A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BL     $LOOP1\n$TOP     A      R3,=F'1'                * PAGE COUNTER\n         XR     R2,R2\n         B      $LOOP1\n$PAGEOF  DC     F'0'\n$EOF     ST     R3,$PAGEOF\n         CVD    R3,DWORD\n         UNPK   $PGOF(2),DWORD(8)\n         OI     $PGOF+1,X'F0'\n         CLOSE  (SYSCHK)\n*\n$OPEN2   OPEN   (SYSUT1,,SYSUT2,OUTPUT) * OPENFILES\n         SPACE\n         XR     R3,R3                   * INIT PAGE COUNT\n         XR     R2,R2                   * INIT LINE COUNT\n         XR     R6,R6                   * ZERO\n         RDJFCB SYSUT1\n         LTR    R15,R15\n         BNZ    $ERROR\nLOOP     GET    SYSUT1,RECORD           * GET RECORD\n         CLI    RECORD,C'1'             * IS THIS T-O-P\n         BE     PUTPAGE                 * YEP, BRANCH\n         C      R3,=F'0'\n         BE     PUTPAGE\n         MVC    OFILE+1(79),RECORD+1    * PUT COLS 2-80 ON OUT FILE\n         MVC    OFILE(1),RECORD+0       * PUT CC. IN COL 1\n         PUT    SYSUT2,OFILE            * NOPE, WRITE RECORD\n         CLI    OFILE,C'+'              * OVER PRINT\n         BE     LOOP                    * NO EXTRA LINE\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         CLI    OFILE,C'-'              * TRIPLE PRINT\n         BE     $ADD3                   *\n         CLI    OFILE,C'0'              * DOUBLE SPACE\n         BE     $ADD2                   *\n         B      $ADD1                   *\n$ADD3    A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     PUTPAGE-4\n$ADD2    A      R2,=F'1'                * LINE COUNTER+1\n         C      R2,=F'59'\n         BH     PUTPAGE-4\n$ADD1    A      R2,=F'1'                * ADD ONE TO LINE COUNT\n         C      R2,=F'59'\n         BH     *+8\n         B      LOOP                    * RETURN ...\n         MVI    FLG,X'FF'               * SET PAGE OVERFLOW FLAG\nPUTPAGE  DS     0H\n         MVC    OFILE(81),=81C' '\n         A      R3,=F'1'                * ADD ONE TO PAGE COUNTER\n         XR     R2,R2                   * CLEAR LINE COUNTER\n         CVD    R3,DWORD                * CONVERT PAGE COUNTER\n         ED     EDIT(4),DWORD+6         * EDIT PAGE COUNTER\n         MVC    PAGE-1(4),EDIT+1          * PUT PAGE COUNTER\n         MVC    EDIT(4),EDIT1           * RESET EDIT CHARS\n         CLI    FLG,X'FF'\n         BE     OVERFLW#\n         LA     R4,RECORD+1-1           * LOAD PAST CC\n         LA     R5,80                   * RECORD LENGTH\nLOOKEND  LA     R4,1(R4)                * NEXT PLACE\n         CLI    0(R4),C' '\n         BNE    FOUNDEND\n         BCT    R5,LOOKEND\n         B      PUTCC\nFOUNDEND BCTR   R5,0\n         SPACE\n* NO MATER WHERE THE TITLE LINE IS PUT IT IN COLUMN '2' OF OUTPUT LINE\n         SPACE\n         MVC    OFILE+1(*-*),0(R4)      * MOVE HEADER\n         EX     R5,*-6\nPUTCC    MVI    OFILE,C'1'              * PUT CC. IN COL 1\n         MVC    OFILE+81-LHDR(LHDR),HEADER\n         MVC    SAVEHDR(81),=81C' '     * CLEAR HEADER\n         MVC    SAVEHDR(81),OFILE       * SAVE HEADER\nPUTOFILE PUT    SYSUT2,OFILE            * WRITE RECORD\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         MVC    OFILE(81),=81C' '\n         B      LOOP\nOVERFLW# MVC    OFILE(81),SAVEHDR\n         MVC    OFILE+81-LHDR(LHDR),HEADER\n         PUT    SYSUT2,OFILE            * WRITE RECORD\n         CLI    PRTFLG,X'FF'\n         BNE    *+8\n         BAL    R6,$OVERPRT             * OVERPRINT\n         MVI    FLG,X'00'\n         MVC    OFILE(81),=81C' '\n         B      LOOP\n$OVERPRT DS     0H\n         MVC    XFILE(80),OFILE\n         MVI    XFILE,C'+'\n         PUT    SYSUT2,XFILE\n         MVC    XFILE(81),=81C' '\n         BR     R6                      * RETURN\nEOF      CLOSE  (SYSUT1)\n         CLC    JFCBDSNM(4),=C'JES2'\n         BE     CLOSE\n         LA     R2,DSNINFO+5\n         LA     R3,JFCBDSNM\n         LR     R4,R3\n$AGAIN   A      R4,=F'1'\n         CLI    0(R4),C' '\n         BNE    $AGAIN\n         SR     R4,R3\n         MVC    0(*-*,R2),JFCBDSNM\n         EX     R4,*-6\n         AR     R2,R4\n         CLI    JFCBELNM,C' '\n         BE     $GETVOL\n         MVI    0(R2),C'('\n         MVC    1(8,R2),JFCBELNM\n         MVI    9(R2),C')'\n         A      R2,=F'10'\n$GETVOL  MVC    4(6,R2),JFCBVOLS\n         PUT    SYSUT2,DSNINFO\nCLOSE    CLOSE  (SYSUT2)\n         SR     R15,R15              *  ZERO RETURN REGISTER\n         B      *+8\n$ERROR   L      R15,=F'16'\n         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\nHEADER   DS     0H\nDATE     DC     CL8'  /'\n         DC     CL4' PG '\nPAGE     DC     CL3' '\n         DC     C'/ '\n$PGOF    DC     CL3' '\nLHDR     EQU    *-HEADER\nEDIT     DC     X'40202021'\nEDIT1    DC     X'40202021'\nRECORD   DC     CL80' '\nFLG      DC     X'00'\nOFILE    DC     CL81' '\nXFILE    DC     CL81' '\nSAVEHDR  DC     CL81' '\n         DS     0D\nDWORD    DS     D\nANY      EQU    *\nPARM     DS     F\nDSNINFO  DC     CL81'-DSN='\nPRTFLG   DC     X'00'\n         SPACE\n         PRINT NOGEN\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,    X\n               EODAD=EOF,EXLST=EXL\nSYSCHK   DCB   DDNAME=SYSUT1,DSORG=PS,LRECL=80,MACRF=(GL),RECFM=FB,    X\n               EODAD=$EOF\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,LRECL=80,MACRF=(PM),RECFM=FBA,   X\n               BLKSIZE=800\nLASTADDR EQU   *\nSAVE     DS     18F\nEXL      DC    X'87',AL3(JFCB)\nJFCB     EQU   *\n         IEFJFCBN  LIST=YES\n         LTORG\n         REGS\n         END\n//L.SYSLMOD DD  DSN=HEDGESM.LINKLIB(DATE801),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DI215": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xa2\\x00\\xa2\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 162, "newlines": 162, "modlines": 0, "user": "FILE022"}, "text": " TITLE 'DISPLAY INITIATORS  -  UNDER JES 2.1.5               &SYSDATE'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                               *\n*   THIS ROUTINE DISPLAYS INITIATOR STATUS TO THE TERMINAL      *\n*        RUNNING TSO.                                           *\n*                                                               *\n*   JES2 LEVEL: 2.1.5                                           *\n*                                                               *\n*   CALLS: MODULE 'CLEAR' LINE # 56                             *\n*                                                               *\n*           AUTHOR = MARK V. HEDGES -                           *\n*                    ADRIA LABORATORIES                         *\n*                    7001 POST ROAD                             *\n*                    DUBLIN OH 43017                            *\n*                    (614) 764-8175                      P.T.L. *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*;\nDI       CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  DI,R12                * ADDRESSABILITY\n         B      *+24                  * BRANCH OVER CONSTANTS\n         DC     C'&SYSDATE_&SYSTIME_V2.0'\n         LA     R10,SAVE              *\n         ST     R10,8(R13)            *\n         ST     R13,SAVE+4            *\n         LR     R13,R10               *\n         L      R2,CVTPTR             * GET CVT POINTER\n         USING  CVT,R2\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM SSVT                          *\n*        AND CHECK TO SEE IF XA                                       *\n*                                                                     *\n***********************************************************************\n         L     R3,CVTSMCA             * POINT TO SMF\n         USING SMCABASE,R3            * ADDRESS SMF\n         MVC   SYSID(4),SMCASID       * GET THIST SYSTEMS SYSID\n         DROP  R3\n         L     R2,CVTJESCT            * POINT TO JESCT\n         DROP  R2\n         USING JESCT,R2               *\n         L     R2,JESSSCT             * POINT TO SSCT\n         DROP  R2\n         USING SSCT,R2                *\n         L     R2,SSCTSSVT            * POINT TO SSVT\n         DROP  R2\n         USING SSVT,R2                *\n***********************************************************************\n*                                                                     *\n*        FIND THE ACTIVE MAIN SUBSYSTEM'S PITS                        *\n*                                                                     *\n***********************************************************************\n         L     R7,SVTPIT              * POINT TO PITTABLE\n         LTR   R7,R7                  * TEST IF ANY PITS\n         BZ    NOPITS                 * NO, IGNORE COMMAND\n*******  LINK  EP=CLEAR\n         TPUT  INITHDR,80             * PUT HEADER\n         MODE  AMODE=31               * LET'S GO UP\n         LA    R6,36    36            * NUMBER OF CLASSES ALWAYS 36\n         USING PIT,R7                 *\n***********************************************************************\n*        BUILD THE MESSAGE(S) DESCRIBING THE PITS                     *\n***********************************************************************\nBLDMSG   MVC   $$OUT($$LOUT),BLANKS       CLEAR OUTPUT\n         MVC   INIT#(2),PITPATID          MOVE IN PIT ID\n         LR    R1,R6                      COPY THE LENGTH\n         BCTR  R1,0                       SUBTRACT ONE\n         MVC   CLASSES(*-*),PITCLASS      SET THE CLASSES\n         EX    R1,*-6                     MOVE THE CLASSES\n         TM    PITSTAT,PITHOLDA+PITHOLD1  TEST FOR DRAINED\n         BNZ   HOLDPIT                    YES\n         TM    PITSTAT,PITHALTA+PITHALT1  TEST FOR HALTED\n         BNZ   HALTPIT                    YES\n         MVC   STATUS,=CL8'ACTIVE'\n         TM    PITSTAT,PITBUSY            TEST FOR BUSY\n         BO    ACTPIT                     YES\n         MVC   STATUS,=CL8'INACTIVE'\n         B     NEXTPIT                    END OF MESSAGE LINE.\nHOLDPIT  MVC   STATUS,=CL8'DRAINED'       SET STATUS\n         TM    PITSTAT,PITBUSY            TEST FOR BUSY\n         BZ    NEXTPIT                    NO\n         MVC   STATUS+5(3),=C'ING'        SET STATUS\n         B     ACTPIT                     YES\nHALTPIT  MVC   STATUS,=CL8'HALTED'        SET STATUS\n         TM    PITSTAT,PITBUSY            TEST FOR BUSY\n         BZ    NEXTPIT                    NO\n         MVC   STATUS+4(3),=C'ING'        SET STATUS\nACTPIT   L     R5,PITSJB                  POINT TO THE SJB\n         USING SJB,R5\n         MVC   JOBNAME(8),SJBJOBNM        MOVE IN JOBNAME\n         MVI   JOBCLAS-1,C'('\n         MVC   JOBCLAS(1),SJBJCLAS        JOB CLASS\n         MVI   JOBCLAS+1,C')'\n         DROP  R5\n***********************************************************************\n*        SEND THE MESSAGE DESCRIBING THE PIT                          *\n***********************************************************************\nNEXTPIT  TPUT  $$OUT,$$LOUT               SEND IT\n         L     R7,PITNEXT                 POINT TO NEXT PIT\nNEXTPIT1 DS    0H\n         LTR   R7,R7                      TEST FOR NEXT PIT\n         BZ    CLEAR15                    NO, LETS STOP\n         B     BLDMSG\n***************************\n*        END IT ALL       *\n***************************\nNOPITS   EQU    *\n         DROP R5\nCLEAR15  EQU    *\n         MODE   AMODE=24\n         SR     R15,R15              *  ZERO RETURN REGISTER\n         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\nINITHDR  DC    C'INIT    STATUS   JOBNAME       CLASSES  SYSID('\nSYSID    DC    C'    )'\n         DC    CL(80-(*-INITHDR))' '\n*\nED5      DC    X'402020202120'\nSAVE     DS      18F\nSAVE1    DS      F                   * PARM IF ANY ...\nSAVBAL   DS      F                   * SAVE AREA FOR 'BALREG'\nWORK     DS    0H     COULD BE DSECT\n$$OUT    DS    C\nINIT#    DC    CL2' '\n         DC    CL4' '\nSTATUS   DC    CL8' '\n         DC    CL2' '\nJOBNAME  DC    CL9' '\nJOBCLAS  DC    CL5' '\nCLASSES  DC    CL8' '\n$$LOUT   EQU   *-$$OUT\nCONVERT  DS    D\nBLANKS   DC    CL100' '\n##JOBNO  DC    H'0'\n         LTORG\n TITLE 'CVT'\n         CVT   PREFIX=NO,DSECT=YES\n TITLE 'IEESMCA'\n        IEESMCA\n TITLE 'IEFJESCT'\n         IEFJESCT TYPE=DSECT\n TITLE 'IEFJSCVT'\n         IEFJSCVT ,\n TITLE '$PIT'\n         $PIT\n TITLE '$SJB'\n         $SJB\n TITLE '$JQE'\n         $JQE\n TITLE '$TQE'\n         $TQE\n TITLE '$XECB'\n         $XECB ,\n TITLE '$SCAT'\n         $SCAT ,\n TITLE '$SVT'\n         $SVT  ,\n TITLE '$HASPEQU'\n         $HASPEQU\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DI215#": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE022"}, "text": "//DI215# JOB\n//C      EXEC  ASMHCL\n//*------------------------------------------------------------*\n//*  ASSEMBLE MEMBER DI215\n//*------------------------------------------------------------*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR\n//         DD  DSN=THIS.FILE,DISP=SHR    *** AMODE MACRO\n//SYSIN    DD  DSN=THIS.FILE(DI215),DISP=SHR\n//L.SYSLMOD DD  DSN=LINKLIB($DI),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSCA#": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "FILE022"}, "text": "//DUMPSCAN     JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEMBLE, LINK, EXEC DUMPSCAN PGM                        *\n//*  NOTE: USES PRM=PARMPASS, IKJEFT01, AND IEBGENER TOO            *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(DUMPSCAN),DISP=SHR\n//L.SYSLMOD DD DSN=LINKLIB(DUMPSCAN),DISP=SHR\n//*\n//PARMPASS EXEC PGM=PARMPASS,COND=(0,LT),\n//         PARM='SYSDSCAN 00:02'   <---- HIGHEST NUMBER IN DUMP__ DS\n//SYSOUT   DD   DSN=&&SYSIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)\n//*\n//IEFPROC  EXEC PGM=IKJEFT01,DYNAMNBR=15,REGION=1M,COND=(0,LT)\n//SYSPRINT DD DUMMY\n//SYSTSPRT DD DSN=&&MOD,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,1),\n//         DCB=(LRECL=133,BLKSIZE=1330,RECFM=FB,DSORG=PS)\n//SYSIN    DD DUMMY\n//SYSTSIN  DD DSN=&&SYSIN,DISP=(OLD,DELETE)\n//*\n//DOIT    EXEC PGM=DUMPSCAN,COND=(5,LT),PARM=ALL\n//STEPLIB  DD DSN=.*L.SYSLMOD,DISP=SHR\n//SYSIN    DD DSN=&&MOD,DISP=(OLD,PASS)\n//SYSOUT   DD SYSOUT=(,)                SYSOUT=(A,INTRDR)\n//*\n//GENER    EXEC PGM=IEBGENER,COND=(5,LT)\n//SYSPRINT  DD  DUMMY\n//SYSIN     DD  DUMMY\n//SYSUT1    DD  DSN=&&MOD,DISP=(OLD,DELETE)\n//SYSUT2    DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPSCAN": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01&\\x01&\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 294, "newlines": 294, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = DUMPSCAN                                             *\n*                                                                     *\n*  DESCRIPTIVE NAME = PROCESS 'SYS1.DUMP__' FILLED DATASETS           *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = THIS PGM READS THE OUTPUT OF A TSO COMMAND 'SYSDSCAN'   *\n*             IT THEN BUILDS JCL TO PROCESS ANY DUMP                  *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN, WTO, WAIT            *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC: JCL CREATES EXECUTABLE CODE USING         *\n*                           PGM=PARMPASS, WTONROLL, AND COMMAND       *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = DUMPSCAN (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = OUTPUT OF A 'SYSDSCAN'                          *\n*                                                                     *\n*             OUTPUT = JCL, DDNAME INTRDR                             *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n  TITLE 'PROCESS THE OUTPUT OF A \"SYSDSCAN\" COMMAND FROM TSO'\nDUMPSCAN  CSECT\n          STM   R14,R12,12(R13)        * SAVE PREVIOUS REGS\n          LR    R12,R15                * SAVE PGM BEGIN ADDR\n          USING DUMPSCAN,R12           *\n          LA    R10,SAVE               * ADDR NEW SAVE AREA\n          ST    R10,8(R13)             * NEW SAVE ADDR IN OLD SAVE AREA\n          ST    R13,SAVE+4             * OLD SAVE ADDR IN NEW SAVE AREA\n          LR    R13,R10                * R13 CONTAINS NEW SAVE ADDR\n          B     PARM+4                 * JUMP OVER SAVE\nSAVE      DS    18F                    * SAVE AREA FOR THIS PGM\nSAVE1     DS    1F\nPARM      DS    F\n          ST    R1,PARM\n          L     R2,0(,R1)\n          LH    R3,0(,R2)\n          LTR   R3,R3\n          BZ    GETTME\n          CLC   2(3,R2),=C'ALL'\n          BNE   GETTME\n          MVI   ALLFLG,X'FF'\n          EJECT\n* GET DATE + TIME\nGETTME    DS    0H\n          GETTIME\n          PRINT NOGEN\n          $STCK\n          PRINT GEN\n          OPEN  (SYSIN,,SYSOUT,OUTPUT) * OPEN INPUT FILE\n          XR     R4,R4                 * ANOTHER 'ALL' FLAG\nLOOP      GET    SYSIN,RECORD          * READ RECORD\n          CLC    RECORD(9),=C'BLS18011I'  * FOR DUMP DATASET FULL\n          BE     CHKDATE               * CHECK FOR TODAYS DATE\n          B      LOOP                  * NOPE, LOOP\nCHKDATE   DS     0H\n          CLI    ALLFLG,X'FF'\n          BE     CONTINUE\n          CLC    RECORD+23(8),XDATE    * COMPARE DATES\n          BNE    LOOP                  * OLD DATE BYPASS\n          MVC    WTOSUFF(2),RECORD+19  * PUT DSN SUFFIX WTOR MESSAGE\n          SPACE\n          XC   RECB,RECB\n$WTOR     WTOR '@ SHOULD DUMP ____ BE SAVED AND PRINTED ...... (Y/N)', X\n               ANSW,1,RECB,ROUTCDE=1\nWTOSUFF   EQU    $WTOR+31\n          WAIT   ECB=RECB\n          XC     RECB,RECB\n          CLI    ANSW,C'Y'\n          BNE    EOF\nCONTINUE  EQU    *\n          MVC    DSNSUFF(2),RECORD+19  * PUT DSN SUFFIX ON DISK\n          MVC    ODSNSUFF(2),RECORD+19 * PUT DSN SUFFIX ON TAPE\n          MVC    MSGSUFF(2),RECORD+19  * PUT DSN SUFFIX ON MSG\n          MVC    LISTUFF(2),RECORD+19   * PUT DSN SUFFIX ON LISTCAT\n          MVC    DDCLEAR(2),RECORD+19   * PUT DSN SUFFIX ON LISTCAT\n          MVC    STEPSUFF(2),RECORD+19 *  ... ON STEPNAME\n          MVC    JULIAN(2),DATE+1      * PUT YEAR IN DSN, TODAY\n          MVC    JULIAN+2(3),DATE+4    * PUT DAY IN DSN, TODAY\n          MVC    TIME(5),RECORD+32\n          MVI    TIME+2,C'M'\n          CLI    ALLFLG,X'FF'\n          BE     PRINTALL\n          LA     R2,JCLSTRT            * STARTING ADDR OF JCL\n          LA     R3,LENJCL             * LENGTH OF JCL\nJCLOOP    PUT    SYSOUT,(2)            * PUT 80 CHARS OF JCL\n          A      R2,=F'80'             * POINT TO NEXT CARD\n          BCT    R3,JCLOOP             * DO IT UNTIL E-O-F\n*\n          XC   RECB,RECB\n WTOR '@ ENTER ''Y'' TO INCLUDE DUMP OPTIONS:  SUMMARY FORMAT+SUMDUMP',X\n               ANSW,1,RECB,ROUTCDE=1\n          WAIT   ECB=RECB\n          XC     RECB,RECB\n          CLI    ANSW,C'Y'\n          BNE    NEWLOOP2\n          PUT    SYSOUT,SUMMARY\n          PUT    SYSOUT,SUMDUMP\n*\nNEWLOOP2  LA     R2,JCLSTRT2           * STARTING ADDR OF JCL\n          LA     R3,ENDJCL             * LENGTH OF JCL\nJCLOOP2   PUT    SYSOUT,(2)            * PUT 80 CHARS OF JCL\n          A      R2,=F'80'             * POINT TO NEXT CARD\n          BCT    R3,JCLOOP2            * DO IT UNTIL E-O-F\n          B      LOOP\n          EJECT\nPRINTALL  DS     0H\n          LTR    R4,R4\n          BNZ    OKOPEN\n          A      R4,=F'1'\n          PUT    SYSOUT,JCLSTRT        * PUT JOBCARD\n          MVI    RETAIN,C' '           * REMOVE RETAIN\n          MVC    OREC(2),=C'/*'        * STEP END\nOKOPEN    DS     0H\n          LA     R2,DUMPSTRT           * STARTING ADDR OF JCL\n          LA     R3,DUMPJCL            * LENGTH OF JCL\nDMPLOOP   PUT    SYSOUT,(2)            * PUT 80 CHARS OF JCL\n          A      R2,=F'80'             * POINT TO NEXT CARD\n          BCT    R3,DMPLOOP            * DO IT UNTIL E-O-F\n          PUT    SYSOUT,OREC           * E-O-F\n          B      LOOP                  * ANY MORE ???\n*\n          EJECT\nEOF       CLOSE (SYSIN)\n          CLOSE  (SYSOUT)\nGOODEND   SR     R15,R15                 ZERO RETURN REGISTER\n          L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n          L      R14,12(R13)            RETURN ADDRESS\n          LM     R0,R12,20(R13)         REST OF THE REGS\n          BR     R14                    RETURN\n          DS  0F\nRECB      DC  F'0'\nANSW      DC  CL1' '\nRECORD    DC    CL133' '\nOREC      DC  CL80' '\nALLFLG    DC  X'00'\nJCLSTRT   DS    0F\n  DC CL80'//PRTDUMP  JOB YOUR.STUFF.HERE'\nDUMPSTRT EQU   *\n  DC CL80'//DUMPXX   EXEC PGM=IKJEFT01,PARM=AMDPRDMP'\nSTEPSUFF  EQU   *-80+6\n  DC CL80'//SYSTSIN  DD   DUMMY,'\n  DC CL80'//             DCB=(LRECL=80,BLKSIZE=80,RECFM=F)'\n  DC CL80'//SYSTSPRT DD   DUMMY'\n  DC CL80'//TAPE     DD   DSN=SYS1.DUMPXX,DISP=SHR'\nDSNSUFF EQU *-80+29\n  DC CL80'//SYSUT2   DD  DSN=TS.DUMPXX.AYYDDD.HHHMMM,DISP=(,CATLG),'\nODSNSUFF EQU *-80+26                   * XX\nJULIAN   EQU *-80+30                   * YYYDDD\nTIME     EQU *-80+37                   * HHHMMM\n  DC CL80'// UNIT=(TAPE,,DEFER),LABEL=(1,NL,EXPDT=98000),VOL=(,RETAIN)'\nRETAIN   EQU *-80+46\n  DC CL80'//INDEX    DD   SYSOUT=(,)'\n  DC CL80'//PRINTER  DD   SYSOUT=(,)'\n  DC CL80'//SYSPRINT DD   SYSOUT=(,)'\n  DC CL80'//SYSABEND DD   SYSOUT=(,)'\n  DC CL80'//SYSIN    DD   *'\n  DC CL80' END'\nDUMPJCL   EQU   ((*-DUMPSTRT)/80)\n  DC CL80'//PRINTDMP EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=4M'\n  DC CL80'//SYSTSIN  DD   DUMMY,'\n  DC CL80'//             DCB=(LRECL=80,BLKSIZE=80,RECFM=F)'\n  DC CL80'//SYSTSPRT DD   DUMMY'\n  DC CL80'//TAPE     DD   DSN=*.DUMP.SYSUT2,DISP=(OLD),'\n  DC CL80'//         LABEL=(1,NL,EXPDT=98000),UNIT=TAPE'\n  DC CL80'//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(100,10))'\n  DC CL80'//INDEX    DD   SYSOUT=(,)'\n  DC CL80'//PRINTER  DD   SYSOUT=(,)'\n  DC CL80'//SYSPRINT DD   SYSOUT=(,)'\n  DC CL80'//SYSABEND DD   SYSOUT=(,)'\n  DC CL80'//SYSIN    DD   *'\nDAEDATA  DC CL80' DAEDATA'\nCVTMAP   DC CL80' CVTMAP'\nPRINTC   DC CL80' PRINT CURRENT'\n*\nLENJCL    EQU   ((*-JCLSTRT)/80)\n*\nJCLSTRT2  DS    0F\nLOGDATA  DC CL80' LOGDATA'\nTRACE    DC CL80' TRACE ALL'\n  DC CL80' END'\n  DC CL80'/*'\n  DC CL80'//LISTCAT  EXEC PGM=IDCAMS'\n  DC CL80'//SYSPRINT  DD  SYSOUT=(,)'\n  DC CL80'//SYSIN     DD  *'\n  DC CL80'  LISTCAT LVL(TS.DUMPXX) ALL'\nLISTUFF EQU *-80+21\n  DC CL80'//ISSUE  EXEC  PGM=WTONROLL,COND=(0,LT,DUMP),'\n  SPACE\n* PGM=WTONROLL IS A PGM IN THIS LIBRARY ....\n  SPACE\n  DC CL80'// PARM=''@ DUMP DATASET  SYS1.DUMPNN  PROCESSED'''\nMSGSUFF EQU *-80+34\n  DC CL80'//CLEAR  EXEC  PGM=COMMAND,COND=(0,LT,DUMP),'\n  SPACE\n* PGM=COMMAND ISSUES AN SVC 34 TO PROCESS PARM,\n  SPACE\n  DC CL80'// PARM=''DD CLEAR,DSN=(__)'''\n  SPACE\nDDCLEAR EQU *-80+23\n  DC CL80'//'\nENDJCL    EQU   ((*-JCLSTRT2)/80)\n*\nSUMMARY  DC CL80' SUMMARY FORMAT'\nSUMDUMP  DC CL80' SUMDUMP'\n*\n          PRINT NOGEN\nSYSIN     DCB DDNAME=SYSIN,RECFM=FB,LRECL=133,DSORG=PS,                X\n               MACRF=GM,EODAD=EOF\nSYSOUT    DCB DDNAME=SYSOUT,RECFM=F,LRECL=80,BLKSIZE=80,DSORG=PS,      X\n               MACRF=PM\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n              END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GETJOBNM": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n         GETJOBNM  &NAME\n.*--------------------------------------------------------------------*\n.*  FUNCTION: GET CURRENT JOBNAME AND PLACE RESULTS IN PROVIDED       *\n.*            FILED BASED ON FIELD LENGTH                             *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         L    1,X'10'                  * CVT\n         L    1,0(,1)                  * R1=A(A(NEW TCB, CURRTCB))\n         L    1,4(,1)                  * R1=A(CURRTCB)\n         L    1,12(,1)                 * R1=A(TIOT1)\n         MVC  &NAME.(L'&NAME),0(1)     * R1=L'24 JOBNAME, PROCSTEP, STEP\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRIN#": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE022"}, "text": "//C      EXEC  PGM=IEV90,PARM='NOOBJECT,DECK,XREF',REGION=1M\n//*------------------------------------------------------------*\n//*  ASSEMBLE MEMBER ICHRIN03\n//*------------------------------------------------------------*\n//SYSLIB   DD  DSN=THIS.LIBRARY,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DSN=A.LIBRARY,DISP=(,CATLG),UNIT=SYSDA,\n// DCB=BLKSIZE=800\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&SYSLIN,DISP=(,PASS),UNIT=VIO,\n//         SPACE=(CYL,(1,1)),DCB=(LRECL=80,BLKSIZE=400,RECFM=FB)\n//SYSIN    DD  DSN=THIS.LIBRARY(ICHRIN03),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHRIN03": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01\\x11\\x01\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 273, "newlines": 273, "modlines": 0, "user": "FILE022"}, "text": "         PRINT OFF\n         MACRO\n&NAME    ICHRIN03  &PROC=,                                             X\n               &USERID=,                                               X\n               &GROUP=,                                                X\n               &PRIVL=N,                                               X\n               &LIST=YES,                                              X\n               &SYSRES=SYSRES\n.*-----------------------------------------------------------------*\n.*       MACRO: ICHRMIN03                                          *\n.*         USE: IN CREATING THE STARTED TASK AUTHORIZATION TABLE   *\n.*              FOR RACF. THIS CREATES A MODULE THAT IS LINKED     *\n.*              INTO LPALIB (CHECK LMOD(ICHRIN03) FOR ATRIBUTES)   *\n.*              ATTR USUALLY 'RENT'                                *\n.*        NOTE: ASSEMBLER STATEMENTS ARE WRITEN TO 'SYSPUNCH'      *\n.*              THEY THEN MUST BE MODIFIED (SEE NOTE)              *\n.*              THEN REASSEMBLED                                   *\n.*-----------------------------------------------------------------*\n         PUSH   PRINT\n         AIF    ('&LIST' EQ 'YES').PRINTM   * PRINT OPTION\n         PRINT  OFF\n.PRINTM  ANOP\n         GBLB   &ISSUED                     * GLOBAL, PREVIOUS ISSUE\n         GBLA   &TIMES                      * GLOBAL, TIMES THROUGH\n         GBLC   &PROCS(50)                  * GLOBAL, # PROCS\n         GBLC   &USERS(50)                  * GLOBAL, # USERS\n         GBLC   &GROUPS(50)                 * GLOBAL, # GROUPS\n         GBLC   &PRIV(50)                   * GLOBAL, # PRIVLEGE\n         AIF    (&ISSUED).OLD               * CHECK IF ISSUED BEFORE\n&ISSUED  SETB   1                           * NOPE, SET ISSUE FLAG\n MNOTE '-------------------------------------------------------------'\n MNOTE '                                                             '\n MNOTE 'MAC(ICHRIN03)  PROD(RACF):                                   '\n MNOTE '                                                             '\n MNOTE 'MODULE NAME = ICHRIN03                                       '\n MNOTE '                                                             '\n MNOTE 'DESCRIPTIVE NAME = RACF STARTED PROCEDURE TABLE MACRO        '\n MNOTE '                                                             '\n MNOTE 'COPYRIGHT =                                                  '\n MNOTE '         5740-XXH                                            '\n MNOTE '                                                             '\n MNOTE 'STATUS =   MVS/XA HRF1602                                    '\n MNOTE '                                                             '\n MNOTE 'FUNCTION = PROVIDES BAL SUPPORT FOR THE CODING OF THE        '\n MNOTE '           ICHRIN03 CSECT FOR THE AUTORIZED STARTED TASK     '\n MNOTE '           TABLE IN ''SYS1.LPALIB''                          '\n MNOTE '                                                             '\n MNOTE 'METHOD OF ACCESS =                                           '\n MNOTE '     BAL = ICHRIN03  MACRO                                   '\n MNOTE '           A LISTING IS PRODUCED UNLESS LIST=NO IS SPECIFIED '\n MNOTE '                                                             '\n MNOTE 'NAME  ICHRIN03  PROC=PROC-NAME,USERID=USER-ID,GROUP=GROUP,   '\n MNOTE '               PRIVL=N,SYSRES=SYSRES                         '\n MNOTE '                                                             '\n MNOTE '           WHERE PROC  = PROCDEURE NAME                      '\n MNOTE '                 USERID= USERID                              '\n MNOTE '                 GROUP = RACF GROUP                          '\n MNOTE '                 PRIVL = PRIVILEGE BIT ON/OFF .... Y/N       '\n MNOTE '                SYSRES = SYSTEM RESIDENCE VOLUME             '\n MNOTE '                                                             '\n MNOTE '-------------------------------------------------------------'\n PUNCH '//ICHRIN03  JOB (ACCT),''TECH SUPPORT'',CLASS=Z,MSGCLASS=X   '\n PUNCH '//DUMPT    EXEC  PGM=AMASPZAP                                '\n PUNCH '//SYSPRINT  DD   SYSOUT=*                                    '\n PUNCH '//SYSLIB    DD   DSN=SYS1.LPALIB,DISP=SHR,                   '\n PUNCH '//         UNIT=SYSDA,VOL=SER=&SYSRES                        '\n PUNCH '//SYSIN     DD   *                                           '\n PUNCH '  DUMPT  ICHRIN03 ALL                                        '\n PUNCH '//ASM     EXEC PGM=IEV90,REGION=2048K,                       '\n PUNCH '//        PARM=''OBJECT,NODECK,XREF(SHORT)''                 '\n PUNCH '//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR                      '\n PUNCH '//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))       '\n PUNCH '//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089                     '\n PUNCH '//SYSPUNCH DD  DSN=&&SYSPUNCH,DISP=(,PASS),UNIT=SYSDA,       '\n PUNCH '//         SPACE=(CYL,(5,5,0)),DCB=(SYS1.PROCLIB,DSORG=PS)   '\n PUNCH '//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),'\n PUNCH '//             DISP=(MOD,PASS)                               '\n PUNCH '//SYSIN    DD  *                                             '\n PUNCH ' TITLE ''ICHRIN03   - ASSEMBLY OF RACF STARTED PROCEDURE TABLE'X\n               ''\n PUNCH ' SPACE 2                                                     '\n PUNCH '*------------------------------------------------------------*'\n PUNCH '*                                                            *'\n PUNCH '* MAC(ICHRIN03)  PROD(RACF):                                 *'\n PUNCH '*                                                            *'\n PUNCH '* MODULE NAME = ICHRIN03                                     *'\n PUNCH '*                                                            *'\n PUNCH '* DESCRIPTIVE NAME = RACF STARTED PROCEDURE TABLE MACRO      *'\n PUNCH '*                                                            *'\n PUNCH '* COPYRIGHT =                                                *'\n PUNCH '*          5740-XXH                                          *'\n PUNCH '*                                                            *'\n PUNCH '* STATUS =   MVS/XA HRF1702                                  *'\n PUNCH '*                                                            *'\n PUNCH '* FUNCTION = PROVIDES BAL SUPPORT FOR THE CODING OF THE      *'\n PUNCH '*            ICHRIN03 CSECT FOR THE AUTORIZED STARTED TASK   *'\n PUNCH '*            TABLE IN ''SYS1.LPALIB''                        *'\n PUNCH '*                                                            *'\n PUNCH '* METHOD OF ACCESS =                                         *'\n PUNCH '*      BAL = ICHRIN03  MACRO                                 *'\n PUNCH '*          A LISTING IS PRODUCED UNLESS LIST=NO IS SPECIFIED *'\n PUNCH '*                                                            *'\n PUNCH '* NAME  ICHRIN03  PROC=PROC-NAME,USERID=USER-ID,GROUP=GROUP, *'\n PUNCH '*                 PRIVL=N                                    *'\n PUNCH '*                                                            *'\n PUNCH '*            WHERE PROC  = PROCDEURE NAME                    *'\n PUNCH '*                  USERID= USERID                            *'\n PUNCH '*                  GROUP = RACF GROUP                        *'\n PUNCH '*                  PRIVL = PRIVILEGE BIT ON/OFF .... Y/N     *'\n PUNCH '*               SYSRES = SYSTEM RESIDENCE VOLUME             *'\n PUNCH '*                                                            *'\n PUNCH '*------------------------------------------------------------*'\n PUNCH ' EJECT                                                       '\n PUNCH 'ICHRIN03   CSECT                                             '\n PUNCH '           SPACE                                             '\n PUNCH '* NOTE: THE FOLLOWING FIELD MUST BE MODIFIED FOR THE         '\n PUNCH '*       NUMBER OF ENTRIES IN THIS TABLE: X''8NNN''           '\n PUNCH '*       WHERE NNN=THE NUMBER OF ENTRIES                      '\n PUNCH '*       (SEE MNOTE FOR ENTRY NUMBERS FROM PREVIOUS RUN)      '\n PUNCH '           SPACE                                             '\n.OLD     ANOP                               * YEP, SKIPIT\n         LCLC   &I,&XTIMES                  * LOCAL, FOR SYSNDX\n         LCLA   &LPROC,&LUSERID,&LGROUP     * LENGTHS\n&I       SETC   '&SYSNDX'                   * EASIER TO USE\n&LPROC   SETA   K'&PROC                     * LENGTH OF PROC\n&LUSERID SETA   K'&USERID                   * LENGTH OF USERID\n&LGROUP  SETA   K'&GROUP                    * LENGTH OF GROUP NAME\n.*\n.*  VERIFY ALL PARMS\n.*\n         AIF    ('&PROC' EQ '' AND '&USERID' EQ '' AND '&GROUP' EQ ''  X\n               ).GENERIC                    * GENERIC OR LAST ENTRY\n.* CHECK PROCNAME\n         AIF    ('&PROC' EQ ' ').PROCER1    * PROCNAME NOT THERE\n         AIF    (K'&PROC GT 8).PROCER2      * LENGTH OF PROC > 8\n.* CHECK USER-ID\n         AIF    ('&USERID' EQ ' ').USERER1  * USERID   NOT THERE\n         AIF    (K'&USERID GT 8).USERER2    * LENGTH OF USER > 8\n.* CHECK GROUP\n         AIF    ('&GROUP' EQ ' ').GRPER1    * GROUP    NOT THERE\n         AIF    (K'&GROUP GT 8).GRPER2      * LENGTH OF GROUP > 8\n.* CHECK PRIVILEGE SPECIFICATION\n         AIF    ('&PRIVL' NE 'Y' AND '&PRIVL' NE 'N').PRIVER1\n.*\n.* PROCESS ENTRIES\n.*\n&TIMES   SETA   &TIMES+1                    * ADD 1 TO TIMES THRU\n&PROCS(&TIMES)  SETC   '&PROC'\n&USERS(&TIMES)  SETC   '&USERID'\n&GROUPS(&TIMES) SETC   '&GROUP'\n&PRIV(&TIMES)   SETC   '&PRIVL'\n                AGO   .MEND\n.*\n.*  GENERIC OR E-O-J PROCESSING\n.*\n.GENERIC ANOP\n.*\n.*  AT THIS POINT PROCESS ALL CREATED PROC,USER,GROUPS BUT ....\n.*\n.*\n.*\n.* EVAL 'TIMES-THU' AND MAKE INTO VALID NUMBER\n.*\n&TIMES   SETA   &TIMES+1                    * ADD LAST GENERIC ENTRY\n         AIF    (K'&TIMES EQ 1).X1\n         AIF    (K'&TIMES EQ 2).X2\n&XTIMES  SETC   '&TIMES'\n         AGO    .TIMNOTE\n.X1      ANOP\n&XTIMES  SETC   '00&TIMES'\n         AGO    .TIMNOTE\n.X2      ANOP\n&XTIMES  SETC   '0&TIMES'\n.TIMNOTE ANOP\n.*\n.* DEFINE LOOP VAIABLE AND ITS VAULE\n.*\n         LCLA   &CNT                        * FOR ARRAY PROCESSING\n.*\n.*   PUT THE COUNT X'8NNN' 1ST\n.*\n PUNCH 'ENTRIES  DC     X''8&XTIMES''       * MAXIMUM NUMBER OF ENTS.'\n         AIF    (&TIMES EQ 1).SKPLOOP       * GENERIC ENTRY ONLY\n&TIMES   SETA   &TIMES-1                    * SET IT BACK\n.*-------------------------------------------------------------------*\n.*                                                                   *\n.* THIS IS AN INNER-LOOP FOR MACRO PROCESSING FOR ALL ENTRIES        *\n.*                                                                   *\n.*-------------------------------------------------------------------*\n.ILOOP   ANOP                               * START OF INNER-LOOP PROC\n&CNT     SETA    &CNT+1                     * INCREMENT COUNTER\n.*\n.* NORMAL PROCESSING OF PROC, USERID, GROUP\n.*\n PUNCH '         SPACE 2                                             '\n PUNCH '* &PROCS(&CNT)  PROCEDURE                                    '\n PUNCH '         DC     CL8''&PROCS(&CNT)''             * PROC NAME  '\n PUNCH '         DC     CL8''&USERS(&CNT)''             * USERID     '\n PUNCH '         DC     CL8''&GROUPS(&CNT)''            * GROUP      '\n.*\n.* PRIVILEGE FLAG SETTINGS\n.*\n.PRVFLAG AIF    ('&PRIV(&CNT)' EQ 'Y').PRVL\n PUNCH '         DC     X''00''             * NO PRIVILEGE FLAG      '\n         AGO    .RSVD\n.PRVL    ANOP\n PUNCH '         DC     X''80''             * PRIVILEGE FLAG SET !!  '\n         AGO    .RSVD\n.*\n.* APPEND RESERVED BITS\n.*\n.RSVD    ANOP\n PUNCH '         DC     7X''00''            * SEVEN BYTES OF ZEROS   '\n.*\n.* DECREMENT TIME AND LOOP\n.*\n&TIMES   SETA   &TIMES-1\n         AIF    (&TIMES GT 0).ILOOP         * LOOP\n.SKPLOOP ANOP\n PUNCH '         SPACE 2                                             '\n PUNCH '* GENERIC PROFILE                                            '\n PUNCH '         DC     CL8''*''            * GENERIC PROC           '\n PUNCH '         DC     CL8''=''            * GENERIC USERID         '\n PUNCH '         DC     CL8''SYS1''         * GENERIC GROUP (SYS1)   '\n PUNCH '         DC     X''80''             * PRIVILEGE FLAG SET !!  '\n PUNCH '         DC     7X''00''            * SEVEN BYTES OF ZEROS   '\n         AGO    .MEND\n.* ERROR SECTION\n.PROCER1 MNOTE  8,'NO PROC NAME SPECIIFIED'\n         MEXIT\n.PROCER2 MNOTE  8,'PROC NAME TOO BIG  PROC=&PROC - MAX 8 CHARS'\n         MEXIT\n.USERER1 MNOTE  8,'NO USERID NAME SPECIIFIED'\n         MEXIT\n.USERER2 MNOTE  8,'USER-ID NAME TOO BIG  USERID=&USERID - MAX 8 CHARS'\n         MEXIT\n.GRPER1  MNOTE  8,'NO GROUP SPECIIFIED'\n         MEXIT\n.GRPER2  MNOTE  8,'GROUP NAME TOO BIG  GROUP=&GROUP - MAX 8 CHARS'\n         MEXIT\n         POP    PRINT\n.MEND    ANOP\n         AIF    ('&PROC' EQ '' AND '&USERID' EQ '' AND '&GROUP' EQ     X\n               '').PUTEND                  * GENERIC OR LAST ENTRY\n         MEXIT\n.PUTEND  ANOP\n PUNCH '         END    ICHRIN03                                     '\n PUNCH '//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL,RENT),      '\n PUNCH '//             COND=(6,LT,ASM),REGION=256K                   '\n PUNCH '//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))       '\n PUNCH '//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)                '\n PUNCH '//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)'\n PUNCH '//SYSLMOD  DD  DSN=SYS1.LPALIB(ICHRIN03),DISP=SHR,           '\n PUNCH '//         UNIT=SYSDA,VOL=SER=&SYSRES                        '\n PUNCH '//DUMPT    EXEC  PGM=AMASPZAP                                '\n PUNCH '//SYSPRINT  DD   SYSOUT=*                                    '\n PUNCH '//SYSLIB    DD   DSN=SYS1.LPALIB,DISP=SHR,                   '\n PUNCH '//         UNIT=SYSDA,VOL=SER=&SYSRES                        '\n PUNCH '//SYSIN     DD   *                                           '\n PUNCH '  DUMPT  ICHRIN03 ALL                                        '\n PUNCH '//'\n.*\n.* EXIT MACRO\n.*\n         MEND\n         EJECT\n         PRINT ON,DATA\n         ICHRIN03   USERID=TECH,GROUP=SYS1,PROC=XWTR,PRIVL=N\n         ICHRIN03   USERID=TECH,GROUP=SYS1,PROC=JES2,PRIVL=N\n         ICHRIN03   USERID=CICS,GROUP=CICS,PROC=CICS,PRIVL=N\n         ICHRIN03   USERID=RMF,GROUP=SYS1,PROC=RMF,PRIVL=N\n         ICHRIN03   SYSRES=MVSRES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDMSLOG#": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x001\\x001\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "FILE022"}, "text": "//IDMSLOGS   JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEM, LINK, AND EXEC IDMSLOGS                           *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(IDMSLOGS)\n//*\n//L.SYSLMOD DD  DSN=LINKLIB,DISP=SHR\n//SYSIN     DD  *\n  INCLUDE SYSLMOD(JULSUB)\n  NAME IDMSLOGS(R)\n/*\n//*\n//PRTPLOG EXEC PGM=RHDCPRLG,REGION=4M\n//SYSUDUMP DD  SYSOUT=(,)\n//SYSLST   DD  DSN=&&LOG,DISP=(,PASS),UNIT=SYSDA,\n// DCB=(LRECL=133,BLKSIZE=23408,RECFM=FBA),SPACE=(CYL,(30,1),RLSE)\n//DMSGDB   DD  DSN=DMSGDB,DISP=SHR\n//DICTDB   DD  DSN=DICTDB,DISP=SHR\n//DLOGDB   DD  DSN=DLOGDB,DISP=SHR\n//SYS002   DD  DUMMY\n//*\n//* GET ALOT OF 'M\n//*\n//SYS001   DD  DSN=ARCHIVE.LOG.DAILY(-00),DISP=SHR,UNIT=TAPE\n//         DD  DSN=ARCHIVE.LOG.DAILY(-01),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-02),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-03),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-04),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-05),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-06),DISP=SHR,UNIT=AFF=SYS001\n//         DD  DSN=ARCHIVE.LOG.DAILY(-07),DISP=SHR,UNIT=AFF=SYS001\n//J1JRNL   DD  DUMMY\n//J2JRNL   DD  DUMMY\n//J3JRNL   DD  DUMMY\n//J4JRNL   DD  DUMMY\n//SYSJRNL  DD  DUMMY\n//SYSIPT   DD  *\n INPUT ARCHIVE\n    PRINT (STAT)\n/*\n//SHUTDOWN EXEC PGM=IDMSLOGS\n//STEPLIB  DD  DSN=*.L.SYSLMOD,DISP=SHR\n//SYSLST   DD  DSN=&&LOG,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=(,)\n//SYSUDUMP DD  SYSOUT=(,)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IDMSLOGS": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xfd\\x00\\xfd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 253, "newlines": 253, "modlines": 0, "user": "FILE022"}, "text": " TITLE '>>> PROCESS THE DUMPED IDMS/LOG DATASET WITH STATS AS PARM <<<'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = IDMSLOGS                                             *\n*                                                                     *\n*  DESCRIPTIVE NAME =                                                 *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7, IDMS/R 10.1                  *\n*                                                                     *\n*  FUNCTION = PROCESSES THE OUTPUT OF THE IDMS/R LOG FILES,           *\n*             RETRIEVING ONLY THE SHUTDOWN STATS AND REPORTING        *\n*             ON THEM                                                 *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 ..... PAGE COUNT                                       *\n*           R6 ..... LINE COUNT                                       *\n*           R7 ..... BAL REG                                          *\n*           R8 ..... RECORD COUNT                                     *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 ..... BASE+4095                                        *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN, IEFJFCBN, RDJFCB     *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC: JULSUB BIIL G. FROM CBT FILE              *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = IDMSLOGS (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = DDNAME 'SYSLST' OUTPUT FORM IDMS/R LOG DUMP     *\n*                                                                     *\n*             OUTPUT = DDNAME SYSPRINT, SHUTDOWN STATS ONLY           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES  AND  SHEILA KAISER             *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\nIDMSLOGS CSECT\n         STM   R14,R12,12(R13)         * SAVE PREVIOUS REGS\n         LR    R12,R15                 * SAVE PGM BEGIN ADDR\n         USING IDMSLOGS,R12,R11        *\n         L     R11,SEC4K               *\n         LA    R10,SAVE                * ADDR NEW SAVE AREA\n         ST    R10,8(R13)              * NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              * OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 * R13 CONTAINS NEW SAVE ADDR\n         XR    R8,R8                   *\nPAGECNT  EQU   5                       * RECORD COUNTER\nLINECNT  EQU   6                       * RECORD COUNTER\nBALREG   EQU   7                       * BAL REG\nCOUNT    EQU   8                       * RECORD COUNTER\n         XR    PAGECNT,PAGECNT\n         XR    LINECNT,LINECNT\n         XR    COUNT,COUNT\n         XC    RC,RC                   * 0 RETURN CODE\n         RDJFCB SYSLST\n         LTR   R15,R15\n         BNZ   ESYSLST\n         OPEN  (SYSLST,,SYSPRINT,OUTPUT)\n         GETTIME DATE=QDATE\n         SPACE\n$READ    GET   SYSLST,REC              * READ RECORD\n         BAL   BALREG,$READCNT         * INCREASE RECORD COUNT\n         CLC   REC+17(17),=C'SYSTEM STATISTICS'\n         BNE   $READ\n         PACK  JULPARM1(4),REC+1(5)    * PACK DATE\n         BAL   BALREG,$JULDATE\n         MVC   ORDATE(8),JULPARM3\n         MVC   ORDAY(3),JULPARM3+8\n         MVI   REC+9,C':'\n         MVI   REC+12,C':'\n         MVC   ORTIME(8),REC+7\n         MVC   ODATE(15),QDATE+1\n         BAL   BALREG,$HEADER\n         LA    R3,15\n$PUTLOOP GET   SYSLST,REC\n         BAL   BALREG,$READCNT         * INCREASE RECORD COUNT\n         CLI   REC,C'1'\n         BNE   $CONT\n         GET   SYSLST,REC\n         BAL   BALREG,$READCNT         * INCREASE RECORD COUNT\n         GET   SYSLST,REC\n         BAL   BALREG,$READCNT         * INCREASE RECORD COUNT\n         GET   SYSLST,REC\n         BAL   BALREG,$READCNT         * INCREASE RECORD COUNT\n$CONT    MVI   REC,C'0'\n         PUT   SYSPRINT,REC\n         BCT   R3,$PUTLOOP\n         B     $READ\n$HEADER  DS    0H                      *\n         A     PAGECNT,=F'1'\n         CVD   PAGECNT,DWORD\n         MVC   OPAGECNT(4),=X'40202021'\n         ED    OPAGECNT(4),DWORD+6\n         PUT   SYSPRINT,HEADER         *\n         XR    LINECNT,LINECNT         *\n         A     LINECNT,=F'1'           *\n         BR    BALREG                  *\n         SPACE\nESYSLST  DS     0H\n         WTO    'MISSING DDNAME SYSLST ...'\n         LA     R1,8                   * SET RETURN CODE\n         ST     R1,RC                  * RC=08\n         B      FINISH                 * GO BACK\n$READCNT A      COUNT,=F'1'            * ADD ONE TO RECORD COUNT\n         BR     BALREG                 * GO BACK\n         SPACE\n$JULDATE DS    0H                      * THIS IS A JULIAN DATE\n         LA    R1,3                    * THIS IS A JULIAN DATE\n         ST    R1,JULPARM2             * ... SAVE IT\n         LA    R1,8+128                * WE WANT 'DDJANYY' AND WEEKDAY\n         ST    R1,JULPARM4             * ... SAVE THAT\n         LA    R1,JULPTRS              * LOAD ADDR OF PARM LIST\n         L     R15,=V(JULSUB)          * GET READY ...\n         BALR  R14,R15                 * DO IT\n         BR    BALREG\n         EJECT\n$EOF     CLOSE  (SYSLST)               *\n         CVD    COUNT,DWORD            * CONVERT\n         ED     RECREAD(8),DWORD+4     *\n         MVC    ODSN(44),JFCBDSNM      * GET DSN\n         MVC    OVOL(6),JFCBVOLS       * GET VOLSER\n         PUT    SYSPRINT,RECOUNT       *\n         CLOSE  (SYSPRINT)             *\n         B      FINISH                 *\nFINISH   SR     R15,R15                * ZERO RETURN REGISTER\n         L      R15,RC                 * LOAD RETURN CODE\n         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            * RETURN ADDRESS\n         LM     R0,R12,20(R13)         * REST OF THE REGS\n         BR     R14                    * RETURN\nSAVE     DS     18F                    * SAVE AREA FOR THIS PGM\nSAVE1    DS     1F\nSEC4K    DC     A(IDMSLOGS+4095)       *\nREC      DS     CL133                  * INPUT RECORD\nTRTBL    DC     C'0123456789ABCDEF'    * TRANSLATE TABLE FOR RCODE\nRC       DS     F                      * RETURN CODE\n         DS     0D                     *\nDWORD    DS     D                      * DOUBLE WORD\nJULPTRS  DC     A(JULPARM1)\n         DC     A(JULPARM2)\n         DC     A(JULPARM3)\n         DC     A(JULPARM4)\n         DC     A(JULPARM5)\nJULPARM1 DS     F                      * INPUT DATE: 'YYYYDDDF' PACKED\nJULPARM2 DS     F                      * INPUT CODE: JULIAN PL4\nJULPARM4 DS     F                      * OUTPUT CODE: 'YYMMMDD'\nJULPARM3 DS     CL8                    * OUTPUT FIELD\n         DS     CL12                   * WEEKDAY CL12\nJULPARM5 DS     32D                    * 256 BYE WORK AREA\nBLANKS   DC     CL133' '\nRECOUNT  DC     CL133'-'\n         ORG    RECOUNT+1\n         DC     C'DSNAME='\nODSN     DC     CL44' ',C'VOLSER='\nOVOL     DC     CL6' ',C'  RECORDS READ='\nRECREAD  DC     X'4020202020202021'\n         ORG    ,\nHEADER   DC     CL133'1'               * OUTPUT OF IDMSLOGS HEADER\n         ORG    HEADER+1\n         DC     C'SHUTDOWN STATISTICS'\n         DC     C'                REPORT DATE='\nORDATE   DC     CL8' '\nORDAY    DC     CL3' ',C' '\nORTIME   DC     CL7' '\n         ORG    ,\n         ORG    *-16-9-5\nODATE    DC     CL20' '\n         DC     C' PAGE'\nOPAGECNT DC     CL4' '\n         ORG    ,\n         SPACE\n         PRINT  NOGEN\nSYSLST   DCB   DDNAME=SYSLST,DSORG=PS,LRECL=133,RECFM=FBA,             X\n               MACRF=GM,EXLST=EXL,EODAD=$EOF\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,BLKSIZE=23408,       X\n               RECFM=FBA,MACRF=PM\n         SPACE\n         DS     0F\nEXL      DC     X'87',AL3(JFCB)\nJFCB     DS     0H\n         IEFJFCBN LIST=NO\n         PRINT  GEN\n         LTORG\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBSTAT": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xc8\\x00\\xc8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = JOBSTAT                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME =                                                 *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = TEST, VIA PARM, IF A JOB OR STARTED TASK IS ACTIVE      *\n*             THEN, RETURN A CONDITION CODE BASED ON RESULTS          *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE: NOT REALLY IMPORTANT                              *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM: CVT, ASVT, ASCB                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = JOBSTAT  (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = PARM                                            *\n*                                                                     *\n*             OUTPUT = RETURN CODE 0, 4, OR 8                         *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n*\n*  IF NO PARM RC=8\n*\n*  IF JOB ACTIVE RC=4\n*\n*  IF JOB NOT ACTIVE RC=0\n*\n*\n*\nJOBSTAT CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  JOBSTAT,R12           * BASES\n         B      *+24                  * BRANCH OVER CONSTANTS\n         DC     C'&SYSDATE_&SYSTIME_V1.0'\n         ST     R10,8(R13)             *\n         ST     R13,SAVE+4            *\n         LR     R10,R4                *\n         SPACE\n         SPLEVEL SET=2\n         SPACE\n         L     R15,=F'8'           RETURN CODE 8 DEFAULT\n*\n         L     R2,0(,R1)           LOAD ADDRESS OF PARM\n         LH    R3,0(,R2)           LOAD LENGTH OF PARM\n         LTR   R3,R3               IS THERE ANY PARM ?\n         BZ    RETURNE             YEP, RETURN RC=8\n         CH    R3,=H'8'            IS LENGTH > 8\n         BH    RETURNE             YEP, BYE-BYE\n         BCTR  R3,0                SETUP FOR EXEC\n         MVC   PARM(*-*),2(R2)     DO IT\n         EX    R3,*-6              NOW DO IT RIGHT\n         L     R15,=F'0'           RETURN CODE 0 RESET\n**+\n**+\n**+\n         L     R2,CVTPTR           LOCATE CVT\n         USING CVT,R2              SET CVT ADDRESSIBILITY\n         L     R2,CVTASVT          LOCATE ADDR SPACE VECTOR TBL\n         DROP  R2\n         USING ASVT,R2             SET ASVT ADDRESSIBILITY\n         L     R3,ASVTMAXU         MAX NUMBER OF ADDRESS SPACES\n         LA    R4,ASVTENTY         ENTRY FOR EACH POSSIBLE ASID.\n*                                  IF ADDRESS SPACE ASSIGNED, ENTRY\n*                                  CONTAINS ADDRESS OF ASCB. IF NOT\n*                                  ASSIGNED, ENTRY CONTAINS EITHER\n*                                  ADDRESS OF NEXT AVAILABLE ASID OR\n*                                  ZEROS WITH HIGH-ORDER BIT ON IF\n*                                  LAST ENTRY.\n*\n*ASVTAVAL EQU   X'80' -            BIT ONE IF ASID IS AVAILABLE AND\n*                                  ZERO IF ASID IS ASSIGNED\n*\n*\nLOOKJOB  DS    0H\n         ICM   R5,15,0(R4)         FETCH ASCB ADDRESS\n         BM    LOOKNEXT            SKIP IF NOT IN USE\n         USING ASCB,R5             DEFINE ASCB ADDRESSIBILITY\n         ICM   R9,15,ASCBJBNI      FETCH JOBNAME ADDRESS IF IN INIT.\n         BNZ   *+8                 SKIP IF THERE\n         ICM   R9,15,ASCBJBNS      FETCH STC/TSO NAME\n         CLC   0(8,R9),PARM        IS JOB/STC ACTIVE\n         BE    ABEND               YEP, ABEND !!!!!\nLOOKNEXT DS    0H\n         LA    R4,4(,R4)           ADDRESS NEXT TABLE ENTRY\n         CLI   0(R4),ASVTAVAL      IS THIS THE LAST ENTRY\n         BE    $AVAIL\n         BCT   R3,LOOKJOB          CONTINUE IF MORE ENTRIES\n         B     $DROP\n$AVAIL   CLC   0(8,R4),=X'8000000000000000'\n         BE    $DROP\n         BCT   R3,LOOKNEXT         SET LAST ENTRY\n$DROP    DS   0H\n*        L     R15,=F'4'           RETURN CODE 4 DEFAULT, JOB NOT FOUND\n         DROP  R5,R2               DROP ASCB, ASVT\n         B     RETURN\n         SPACE\nABEND    LA    R15,4\n         B     RETURNE\n*\nRETURN   SR     R15,R15              *  ZERO RETURN REGISTER\nRETURNE  L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\n         SPACE 2\nPARM     DC    CL8' '\nSAVE     DS    18F\n         EJECT\n         LTORG\n TITLE '>>> CVT      <<<'\n         CVT      DSECT=YES\n TITLE '>>> ASVT     <<<'\n         IHAASVT  DSECT=YES,LIST=YES\n TITLE '>>> ASCB     <<<'\n         IHAASCB  DSECT=YES,LIST=YES\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JOBSTAT#": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE022"}, "text": "//JOBSTAT   JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEM, LINK, AND RUN PGM JOBSTAT                         *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(JOBSTAT),DISP=SHR\n//*      END\n//L.SYSLMOD DD  DSN=LINKLIB(JOBSTAT),DISP=SHR\n//*\n//DOIT EXEC PGM=JOBSTAT,PARM=CICS\n//STEPLIB DD DSN=*.L.SYSLMOD,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULDATE": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE022"}, "text": "*\n* COPY BOOK FOR JULSUB SUBROUTINE\n*\n         DS     0D                     * SETUP FOR CALLING DATEJUL\nJULPTRS  DC     A(JULPARM1)            *\n         DC     A(JULPARM2)            *\n         DC     A(JULPARM3)            *\n         DC     A(JULPARM4)            *\n         DC     A(JULPARM5)            *\nJULPARM1 DS     F                      * INPUT DATE: 'YYYYDDDF' PACKED\nJULPARM2 DS     F                      * INPUT CODE: JULIAN PL4\nJULPARM4 DS     F                      * OUTPUT CODE: 'YYMMMDD'\nJULPARM3 DS     CL8                    * OUTPUT FIELD\n         DS     CL12                   * WEEKDAY CL12\nJULPARM5 DS     32D                    * 256 BYE WORK AREA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULSUB": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x021\\x021\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 561, "newlines": 561, "modlines": 0, "user": "FILE022"}, "text": "//JULSUB     JOB (000000,TECH),'HEDGESM',\n//            CLASS=Z,MSGCLASS=X,\n//            NOTIFY=HEDGESM\n//*-----------------------------------------------*\n//*   LIB: TS.SOURCE.CNTL(JULSUB)\n//*   DOC: ASSEMBLE AND LINK USING ASMHCL\n//*-----------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=TS.SOURCE.CNTL,DISP=SHR\n//SYSIN    DD  *\n         TITLE '   J U L S U B   '\n************************************************************\n*                                                          *\n*        'JULSUB'                                          *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n         SPACE\n         MACRO\n         STAMP\n         LCLC  &ASMTIME\n&ASMTIME SETC  '&SYSTIME'(1,5)\n         DC    CL16' &SYSDATE &ASMTIME '\n         MEND\n         SPACE\nJULSUB CSECT\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'JULSUB   '\n         STAMP\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET SAVEAREA ADDRESS\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2\n         USING @DATA,13\n         SPACE\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST\n         ST    R14,TIMEB\n         CLI   3(R3),INP003        INPUT JULIAN PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE\n*              INPUT IS JULIAN PACKED\n         SPACE\n         MVC   DOUBLE+4(4),INPUT   MOVE INPUT\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF\n         LH    R1,DOUBLE+4         GET 00YY\n         SLL   R1,16               GET 00YY0000\n         SRL   R1,12               GET 00000YY0\n         ST    R1,DOUBLE+4         STORE BACK 00000YY0\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n*\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE      00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\nINP01    CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         CVB   R1,DOUBLE\n         B     INP01B\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE\n*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n         SPACE\nTODD     MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\nDPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\nDPMWIN   CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE\n*              CONVERT MONTH NUMBER TO MONTH NAME\n*\n*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*                 OUTPUT - MONTH AND ALPHA\n         SPACE\nTOMON    L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE\n*              BUILD PROSE DATE\n*\n*                 INPUT  - MONTH, DDC, YYYYC\n         SPACE\nTOPROSE  TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n*        MVI   4(R1),C','          COMMA AFTER DAY\n*        LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n         CLC   5(2,R1),=C'00'\n         BNE   *+10\n         MVC   5(2,R1),=C'19'\n         BR    R9\n         SPACE\n*              INPUT IS YYYY/MM/DD BINARY\n         SPACE\nINP02    L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\n*              CONVERT M/D/Y TO JULIAN\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - DDDB, DDDC, JB\n         SPACE\nTOJUL    MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(2),YYC\n         PACK  DOUBLE,JC\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE\n*\n*\n*\n         SPACE\nTOSB     MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE\n*              GET DAY OF WEEK\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - WEEKB, WEEKC\n*\n*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*\nTOWEEK   TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\nWEEKFEB  LA    R14,14              SET M=14\nWEEKYMIN BCTR  R15,0               SET Y = Y-1\nWEEKMMOK LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE\n*\n*              CONVERT TIMEB TO TIMEC\n*\n*                 DIVIDE BY 10,10,10,6,10,6,10,6\n*\nTOTIME   TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\nTOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE\nOUTPUT   LR    R1,R4\n         TM    3(R5),OUT001\n         BZ    *+14\n         MVC   0(4,R1),JB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002\n         BZ    *+14\n         MVC   0(4,R1),SB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004\n         BZ    *+14\n         MVC   0(8,R1),SC\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008\n         BZ    *+14\n         MVC   0(8,R1),ALPHA\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064\n         BZ    *+14\n         MVC   0(4,R1),WEEKB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128\n         BZ    *+14\n         MVC   0(12,R1),WEEKC\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256\n         BZ    *+14\n         MVC   0(4,R1),TIMEB\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512\n         BZ    *+14\n         MVC   0(8,R1),TIMEC\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL5\n         DS    CL2\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE\n         REGS\n         SPACE 3\n         END\n//L.SYSLMOD DD  DSN=HEDGESM.LINKLIB(JULSUB),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MODE": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&NAME    MODE   &AMODE=31\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  SET ADDRESSING MODE.  EITHER 'MODE AMODE=31' OR 'MODE AMODE=24'  *\n.*                                                                   *\n.* NOTES: EXAMPLE - '    MODE AMODE=31  SET ADDREESSING MODE TO 31   *\n.*                  ' -MORE CODE -                                   *\n.*                  '    MODE AMODE=24  SET ADDREESSING MODE TO 24   *\n.*                                                                   *\n.*                                                                   *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*\n         LCLC   &I\n         GBLA   &B\n&I       SETC   '&SYSNDX'\n         AIF    (&AMODE EQ 31).MOD31\n&NAME    LA     15,RMOD&I\n         BSM    0,15\nRMOD&I   DS     0H\n         AGO    .MEND\n.MOD31   ANOP\n&NAME    L      15,AMOD&I\n         BSM    0,15\nAMOD&I   DC     A(CON&I+X'80000000')\nCON&I    DS     0H\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MRGJNLO#": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE022"}, "text": "//MRGJNLOG JOB\n//*-----------------------------------------------------------------*\n//*   DOC: LOCATE AND CREATE JCL FOR IDMS JOURNALS AND LOGS         *\n//*  NOTE: VERY COMPLICATED, SEE EXECUTION EXAMPLE\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=TS.SOURCE.CNTL,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(MRGJNLOG),DISP=SHR\n//L.SYSLMOD DD  DSN=LINKLIB(MRGJNLOG),DISP=SHR\n//*\n//DOIT EXEC PGM=MRGJNLOG,COND=(0,LT)\n//STEPLIB   DD  DSN=*.L.SYSLMOD,DISP=SHR\n//SYSOUT    DD  SYSOUT=(,)\n//INTRDR    DD  SYSOUT=(,)\n//JOBCARD   DD  DATA,DLM=$$\n//MERGE JOB (ACCT),CLASS=J,NSGCLASS=X,NOTIFY=YOU\n$$\n//PM        DD  DATA,DLM=$$\n//IDMSPM EXEC PERFORMANCE MONITOR\n//ALL OTHER DDNAMES AND INPUT STATEMENTS\n//* FOLLOWING INPUT DATA DET PROVIDED BY PGM DDNAME 'SYS011'\n$$\n//POSTLOG   DD  *\n  POSTLOG POSTLOG 1\n  POSTLOG POSTLOG 2\n  POSTLOG POSTLOG 3\n//SYSIN     DD  *\nINLOG=IDMS.PROD.ARCHIVE.LOG       DISK FILE, A GDG\nOUTLOG=IDMS.ARCHIVE.LOG.DAILY      TO TAPE GDG\nINJRNL=IDMS.BKJRNL                 DISK FILE, A GDG\nOUTJRNL=IDMS.ARCHIVE.JRNL.DAILY    TO TAPE GDG\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MRGJNLOG": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02 \\x02 \\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 544, "newlines": 544, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = MRGJNLOG                                             *\n*                                                                     *\n*  DESCRIPTIVE NAME = MERGE DAILY IDMS/R JOURNALS AND LOGS TO TAPE(S) *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = THIS WILL TAPE DISK/TAPE DUMPED JOURNALS OR LOGS        *\n*             AN MERGE THEM INTO ONE FILE. THIS IS HELPFUL FOR        *\n*             RECOVERY AND REPORTING PURPOSES                         *\n*             (SEE MEMBER MRGJNLO# FOR PROCESSING EXAMPLE)            *\n*                                                                     *\n*  NOTES = NONE                                                       *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 ..... BASE+4095                                        *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN, LOCATE, CAMLST       *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = MRGJNLOG (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = DDNAME SYSIN, INPUT PARMS                       *\n*                     DDNAME JOBCARD, INSTALLATION STANDARD JOBCARD   *\n*                     DDNAME PM, FOR POST PROCESSING OF THE IDMS/PM   *\n*                            IF WRITTEN TO LOG (OPTIONAL)             *\n*                     DDNAME POSTLOG, FOR POST PROCESSING THE LOG     *\n*                            DATA SET, (OPT)                          *\n*                     (SEE DSN 'MODELDCB' USED AS MODEL FOR CREATING  *\n*                      GDG'S ON TAPE)                                 *\n*                                                                     *\n*             OUTPUT = DDNAME INTRDR, THE CREATED JCL STREAM          *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n TITLE '>>> CREATES SINGLE IMAGE OF IDMS LOGS AND JOURNALS/DAY <<<'\nMRGJNLOG CSECT\n         STM    R14,R12,12(R13)        * SETUP\n         LR     R12,R15                *\n         USING  MRGJNLOG,R12,R11       * BASE\n         B      *+24+6                 * BRANCH OVER CONSTANTS\n         DC     C'&SYSDATE_&SYSTIME_V1.0'\n         DC     A(MRGJNLOG+4096)       *\n         L      R11,*-4                *\n         LA     R10,SAVE               *\n         ST     R10,8(R13)             *\n         ST     R13,SAVE+4             *\n         LR     R13,R10                *\nRC       EQU    8                      * RETURN CODE REGISTER\n         LA     RC,0                   *\n         SPACE\n         SPLEVEL SET=2\n         SPACE\n         PRINT  NOGEN\n         OPEN   (SYSIN,,JOBCARD,)\n         OPEN   (SYSOUT,OUTPUT,INTRDR,OUTPUT)\n         PRINT  GEN\n         LA     R2,LOGTBL              * LOAD ADDRESS OF LOG TABLE\n         ST     R2,LOGTBLA             * STORE INITIAL ADDRESS\n         LA     R2,JRNLTBL             * LOAD ADDRESS OF JRNL TABLE\n         ST     R2,JRNLTBLA            * STORE INITIAL ADDRESS\n         EJECT\n*\nGETREC   GET    SYSIN                  * READ 1ST RECORD\n         LR     R2,R1                  * SAVE ADDR OF RECORD\n         LA     R3,40                  * MAX LENGTH OF INPUT LINES\n         LR     R4,R3                  * SAVE THAT\n         MVC    OREC(80),BLANKS        * ... CLEAR\n         MVC    OREC(24),=C'INPUT RECORD FOLLOWS ...'\n         PUT    SYSOUT,OREC            * ... AND WRITE INPUT RECORD\n         MVC    OREC(80),BLANKS        * ... CLEAR\n         MVC    OREC(80),0(R2)         * ... MOVE\n         PUT    SYSOUT,OREC            * ... AND WRITE INPUT RECORD\n         XR     R5,R5                  * GDG LEVEL INDICATOR\n         CLC    0(7,R2),=C'INJRNL='    * IS THIS A JRNL\n         BE     $INJRNL\n         CLC    0(8,R2),=C'OUTJRNL='   * IS THE OUT JRNL GDG NAME\n         BE     $OUTJRNL\n         CLC    0(6,R2),=C'INLOG='     * INPUT LOG GDGNAME\n         BE     $INLOG\n         CLC    0(7,R2),=C'OUTLOG='    * OUTPUT LOG GDGNAME\n         BE     $OUTLOG\n         B      ERROR1\n$INLOG   A      R2,=F'6'\n         MVI    FLG,C'L'               * LOG FLAG\n         B      $START\n$OUTLOG  A      R2,=F'7'\n         MVI    FLG,C'L'               * LOG FLAG\n         B      $PARSE\n$INJRNL  A      R2,=F'7'\n         MVI    FLG,C'J'               * JOURNAL FLAG\n         B      $START\n$OUTJRNL A      R2,=F'8'\n         MVI    FLG,C'J'               * JOURNAL FLAG\n         B      $PARSE\n$PARSE   DS     0H\n         LR     R6,R2                  * SAVE ADDR OF RECORD+OFFSET\n$PARSEL  A      R2,=F'1'\n         CLI    0(R2),C' '             * END OF OUTLOG/JRNL GDG\n         BE     $EPARSE\n         BCT    R3,$PARSEL\n         B      ERROR1\n$EPARSE  SR     R4,R3                  * LENGTH OF GDG OUTPUT\n         CLI    FLG,C'L'               * IS THIS THE LOG\n         BE     $OUTL\n$OUTJ    MVC    OUTJRNL(*-*),0(R6)\n         EX     R4,*-6\n         A      R4,=F'1'\n         LA     R3,OUTJRNL\n         AR     R3,R4                  * END OF GDG\n         A      R3,=F'5'               * END ADDR OF DSN W/SUFFIX\n         ST     R3,OUTJNLA             * SAVE END ADDR\n         SR     R3,R4\n         S      R3,=F'5'\n         LR     R5,R3\n         B      $MOVEOUT\n$OUTL    MVC    OUTLOG(*-*),0(R6)\n         EX     R4,*-6\n         A      R4,=F'1'\n         LA     R3,OUTLOG\n         AR     R3,R4                  * END OF GDG\n         A      R3,=F'5'               * END ADDR OF DSN W/SUFFIX\n         ST     R3,OUTLOGA             * SAVE END ADDR\n         SR     R3,R4\n         S      R3,=F'5'\n         LR     R5,R3\n         B      $MOVEOUT\n$MOVEOUT AR     R3,R4                  * TO END OF GDGNAME\n         MVC    0(3,R3),=C'(0)'        * ADD GDG LEVEL STUFF, LOCATE\n         MVC    DSN(44),BLANKS\n         MVC    DSN(44),0(R5)          * MOVE  GDG OUPUT\n         XR     R1,R1                  *\n         LOCATE FINDSN                 *\n         LTR    R15,R15                *\n         BNZ    $OUTERR                * GDG LEVEL AIN'T GOOD !!!\n         MVC    0(5,R3),=C'(+01)'      * ADD GDG LEVEL STUFF, NEXT 1\n         B      GETREC\n$OUTERR  MVC    OREC,BLANKS\n         MVC    OREC(44),DSN\n         PUT    SYSOUT,OREC\n         MVC    OREC,BLANKS\n         MVC    OREC(32),=CL32'$   ERROR LOCATING THE ABOVE GDG'\n         PUT    SYSOUT,OREC\n         B      ERROR1\n*\n TITLE '>>> PROCESS GDGS READ FROM INPUT FILE AND BUILD TABLES <<<'\n$START   LR     R6,R2                  * SAVE ADDR OF RECORD+OFFSET\nLOOK     A      R2,=F'1'               * NEXT POISTION IN LINE\n         CLI    0(R2),C' '             * BLANK ?\n         BE     GDGEND                 * YEP, FOUND END\n         BCT    R3,LOOK                * NOPE, CONTINUE LOOKING\n         B      ERROR                  * TOO MANY...EXIT\nGDGEND   SR     R4,R3                  * LENGTH OF DSNAME 1\n         MVC    GDGNAME(44),BLANKS     *\n         MVC    GDGNAME(*-*),0(R6)     * << EXEC >>\n         EX     R4,*-6                 * FROM START OF GDG MOVE IT\n         A      R4,=F'1'               * ADD ONE\n         ST     R4,GDGL                * SAVE DSN LENGTH\n         LA     R3,GDGNAME             * GET ADDR OF DSN\n         AR     R3,R4                  * ... POSITION TO LAST CHAR\n         MVC    0(5,R3),=C'(-00)'       * ... ADD GDG LEVEL STUFF\n         ST     R3,GDGA                * STORE ENF-OF-DSN ADDR\n*\n TITLE '>>> LOCATE SECTION <<<'\nDOIT1    DS     0H\n         MVC    DSN(44),BLANKS         *\n         MVC    DSN(44),GDGNAME        * SETUP LOCATE MACRO\n         LOCATE FINDSN                 *\n         LTR    R15,R15                *\n         BNZ    GDGEND2                * GDG LEVEL AIN'T OLD ENOUGH !!\n         PUT    SYSOUT,GDGNAME         *\n         MVC    ODSN,BLANKS            *\n         MVC    ODSN(44),DSN           *\n         L      R3,GDGL                * LOAD GDG LENGTH\n         A      R3,=F'10'              * ADD TEN, WHY ? TO ADD VOLSERS\n         LA     R4,ODSN                *\n         AR     R4,R3                  *\n         MVC    0(9,R4),=C'VOL(S) = '  *\n         MVC    9(6,R4),DSNVOL1        *\n         MVC    16(6,R4),DSNVOL2        *\n         MVC    23(6,R4),DSNVOL3       *\n*                                      *\n         CLI    FLG,C'L'               * IS IT A LOG ENTRY: 'J' JRNL\n         BE     LOGENT                 *\nJRNLENT  L      R2,JRNLTBLA            * LOAD JRNL TABEL ADDRESS\n         L      R4,GDGL                * LOAD DSN LENGTH\n         A      R4,=F'5'               *\n         BCTR   R4,0                   * LOAD DSN LENGTH\n         MVC    0(*-*,R2),GDGNAME      *\n         EX     R4,*-6                 *\n         A      R2,=F'44'              *\n         ST     R2,JRNLTBLA            * STORE NEW JRNL TABEL ADDRESS\n         B      PUTODSN                *\nLOGENT   L      R2,LOGTBLA             * LOAD LOG TABEL ADDRESS\n         L      R4,GDGL                * LOAD DSN LENGTH\n         A      R4,=F'5'               *\n         BCTR   R4,0                   * LOAD DSN LENGTH\n         MVC    0(*-*,R2),GDGNAME      *\n         EX     R4,*-6                 *\n         A      R2,=F'44'              *\n         ST     R2,LOGTBLA             * STORE NEW LOG TABEL ADDRESS\n         B      PUTODSN                *\n*                                      *\nPUTODSN  PUT    SYSOUT,ODSN            *\n         A      R5,=F'1'               * NEW GENERATION\n         CVD    R5,DWORD               * ... CONVERT IT\n         UNPK   GDGLVL(2),DWORD(8)     * ... UNPACK RESULTS\n         OI     GDGLVL+1,X'F0'         * ... MAKE IT READABLE\n         L      R3,GDGA                * LOAD ADDR OF END OF DSN\n         MVC    0(5,R3),GDGPREF        * NOW PUT THE SUFFIX ON\n         B      DOIT1\nGDGEND2  B      GETREC                 *\n*\nERROR    LA     RC,8                   * SET RETURN CODE\n         B      DONE                   * NO FILES OPEN\nERROR1   LA     RC,8                   *\n         B      EOF                    * FILES OPEN\nEOF      CLOSE  (SYSIN)                *\n         C      RC,=F'0'               * IF RETURN CODE \u00ac= 0 FINISH\n         BNE    CLOSOUT                *\n         MVC    OREC(80),BLANKS        *\n         CLI    OUTJRNL,C' '           * NO JOURNAL OUT DATASET\n         BE     ERRJRNL                *\n         CLI    OUTLOG,C' '            * NO LOG OUT DATASET\n         BE     ERRLOG                 *\nJOBPROC  DS     0H                     * PROCESS JOBCARD FILE\n         GET    JOBCARD,OREC           *\n         PUT    INTRDR,OREC            *\n         B      JOBPROC                *\nEOFJOB   CLOSE  (JOBCARD)              * E-O-F\n*\n         EJECT\n         CLI    JRNLTBL,C' '           * ANY JOURNALS OUT THERE ?\n         BE     $PUTLOG                * NOPE, DO LOG\n         LA     R2,JCLJRNL             *\n         LA     R3,ENDJRNL             *\n         ST     R6,SAVE2\n         L      R6,OUTJNLA             * ADDR OF START OF DSNAME\n         MVI    0(R6),C','             * MOVE ',' FOR CONTINUATION\n         L      R6,SAVE2\nPUTJRNL  MVC    OREC(80),0(R2)         *\n         PUT    INTRDR,OREC            *\n         A      R2,=F'80'              *\n         BCT    R3,PUTJRNL             *\n*                                      *\n         LA     R2,JRNLTBL             * LOAD JOURNAL TABEL ADDR\n         MVC    JRNLDSN(44),0(R2)      *\n*\nJRNLDCB  LA     R6,JRNLDSN             * ADD PRIMARY DCB\n         L      R7,GDGL                * LOAD DSN LENGTH AND LENGTH OF.\n         A      R7,=F'5'               * L'(+00)\n         AR     R6,R7\n         MVI    0(R6),C','\n*\n         MVC    OREC(80),JRNLIN        * MOVE\n         MVC    OREC+2(6),=C'SYSUT1'   *\n         PUT    INTRDR,OREC            *\n         MVC    OREC(80),=CL80'//         DCB=BLKSIZE=32000'\n         PUT    INTRDR,OREC            *\n         MVC    JRNLIN+2(6),BLANKS     *\n         A      R2,=F'44'              *\n         CLI    0(R2),C' '             *\n         BE     $PUTLOG                *\nPUTJRNL1 MVC    JRNLDSN(44),0(R2)      *\n         MVC    OREC(80),JRNLIN        *\n         PUT    INTRDR,OREC            *\n         A      R2,=F'44'              *\n         CLI    0(R2),C' '             *\n         BE     $PUTLOG                *\n         B      PUTJRNL1               *\n*\n$PUTLOG  DS     0H\n         CLI    LOGTBL,C' '            * ANY LOG ENTRIES OUT THERE ?\n         BE     ALLDONE                * NOPE, FINISHED\n         LA     R2,JCLLOG              *\n         LA     R3,ENDLOG              *\n*                                      * ADD COMMA @ END OF DSN\n         ST     R6,SAVE2\n         L      R6,OUTLOGA             * ADDR OF START OF DSNAME\n         MVI    0(R6),C','             * MOVE ',' FOR CONTINUATION\n         L      R6,SAVE2\n*                                      *\nPUTLOG   MVC    OREC(80),0(R2)         *\n         PUT    INTRDR,OREC            *\n         A      R2,=F'80'              *\n         BCT    R3,PUTLOG              *\n*\n         LA     R2,LOGTBL              *\n         MVC    LOGDSN(44),0(R2)       *\n*\nLOGDCB   LA     R6,LOGDSN              * ADD PRIMARY DCB\n         L      R7,GDGL                * LOAD DSN LENGTH AND LENGTH OF.\n         A      R7,=F'5'               * L'(+00)\n         AR     R6,R7\n         A      R6,=F'10'\n         MVI    0(R6),C','\n*\n         MVC    OREC(80),LOGIN         *\n         MVC    OREC+2(6),=C'SYSUT1'   *\n         PUT    INTRDR,OREC            *\n         MVC    OREC(80),=CL80'//         DCB=BLKSIZE=32568'\n         PUT    INTRDR,OREC            *\n         A      R2,=F'44'              *\n         CLI    0(R2),C' '             *\n         BE     OPENPM                 *\nPUTLOG1  MVC    LOGDSN(44),0(R2)       *\n         MVC    OREC(80),LOGIN         *\n         PUT    INTRDR,OREC            *\n         A      R2,=F'44'              *\n         CLI    0(R2),C' '             *\n         BE     OPENPM                 *\n         B      PUTLOG1                *\n*                                      *\nOPENPM   RDJFCB PM                     *\n         LTR    R15,R15                *\n         BNZ    ALLDONE                *\n         OPEN   (PM,)                  *\nGETPM    GET    PM,OREC                *\n         PUT    INTRDR,OREC            *\n         B      GETPM                  *\nEOFPM    MVC    OREC(25),=C'//SYS011 DD DISP=SHR,DSN='\n         ST     R6,SAVE2               *\n         L      R6,OUTLOGA             * ADDR OF START OF DSNAME\n         MVI    0(R6),C' '             * MOVE ' ' FOR CONTINUATION\n         L      R6,SAVE2               *\n         MVC    OREC+25(80-25),OUTLOG  *\n         PUT    INTRDR,OREC            *\n         CLOSE  (PM)                   *\n         B      ALLDONE                *\n*                                      *\nERRJRNL  MVC    OREC(30),=C'... MISSING \"OUTJRNL=\" GDGNAME'\n         PUT    SYSOUT,OREC            *\n         B      CLOSOUT                *\nERRLOG   MVC    OREC(30),=C'... MISSING \"OUTLOG=\" GDGNAME '\n         PUT    SYSOUT,OREC            *\n         B      CLOSOUT                *\nALLDONE  DS     0H                     * CHECK FOR POST LOG PROCESSING\n         CLI    LOGTBL,C' '            * ANY LOG ENTRIES OUT THERE ?\n         BE     NPOSTLOG\n         RDJFCB POSTLOG                * ANY MORE JCL TO PEND ON ??\n         LTR    R15,R15\n         BNZ    NPOSTLOG\n         OPEN   (POSTLOG,)\nPOSTLOGL GET    POSTLOG,OREC\n         PUT    INTRDR,OREC\n         B      POSTLOGL\nEOFPOST CLOSE (POSTLOG)\nNPOSTLOG XR     R3,R3                  * DDNAME SUFFIX\n         PUT    INTRDR,SRCEXEC         *\n         MVC    OREC(80),BLANKS        *\n         LA     R2,JRNLTBL             *\nCHKJNL   CLI    0(R2),C' '             *\n         BE     SRCLOG                 *\n         MVC    SRCDSN(38),0(R2)       *\n         A      R3,=F'1'               *\n         CVD    R3,DWORD               *\n         UNPK   SRCSUFF(2),DWORD+4(4)  *\n         OI     SRCSUFF+1,X'F0'        *\n         PUT    INTRDR,SRCDDN          *\n         A      R2,=F'44'              *\n         B      CHKJNL                 *\nSRCLOG   LA     R2,LOGTBL              *\nCHKLOG   CLI    0(R2),C' '             *\n         BE     CLOSOUT                *\n         MVC    SRCDSN(38),0(R2)       *\n         A      R3,=F'1'               *\n         CVD    R3,DWORD               *\n         UNPK   SRCSUFF(2),DWORD+4(4)  *\n         OI     SRCSUFF+1,X'F0'        *\n         PUT    INTRDR,SRCDDN          *\n         A      R2,=F'44'              *\n         B      CHKLOG                 *\nCLOSOUT  DS     0H                     *\n         CLOSE  (SYSOUT)               *\n         CLOSE  (INTRDR)\n*\nCLEAR15  SR     R15,R15                * ZERO RETURN REGISTER\nDONE     LR     R15,RC                 * LOAD RETURN CODE\n         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            * RETURN ADDRESS\n         LM     R0,R12,20(R13)         * REST OF THE REGS\n         BR     R14                    * RETURN\n TITLE '>>> DATA SECTION <<<'\nSAVE     DS    18F\nSAVE2    DS    6F\nFLG      DS    C                       *\nGDGL     DS    F                       * DSN LENGTH\nGDGA     DS    F                       * ADDRESS INTO DSN FOR GDG\nGDGNAME  DC    CL80' '                 * 1ST DSN\nGDGPREF  DC    CL2'(-'                 *\nGDGLVL   DC    CL2' '                  *\nGDGSUFF  DC    CL1')'                  *\n*\nBLANKS   DC    CL125' '\n         DS    0D\nDWORD    DS    D\n*\nOSYSOUT  DC    CL80' '\n         SPACE 2\nODSN     DC     CL80' '\nOREC     DC     CL80' '\nFINDSN   CAMLST NAME,DSN,,DSNAREA\nDSN      DC     CL44' '\nDSNAREA  DS     0D\n         DC     265C' '\nNUMVOLS  EQU    DSNAREA                * HALF WORD\nDSNVOL1  EQU    DSNAREA+6              *\nDSNVOL2  EQU    DSNAREA+6+12           *\nDSNVOL3  EQU    DSNAREA+6+12+12        *\nDSNVOL4  EQU    DSNAREA+6+12+12+12     *\nDSNVOL5  EQU    DSNAREA+6+12+12+12+12  *\nDSNVOL6  EQU    DSNAREA+6+12+12+12+12+12 *\nJCLLOG   DS     0H                     *\n         DC     CL80'//LOGMERGE EXEC PGM=IEBGENER,REGION=4M           '\n         DC     CL80'//SYSPRINT DD  SYSOUT=(,)                        '\n         DC     CL80'//SYSIN    DD  DUMMY                             '\n         DC     CL80'//SYSUT2   DD  DSN=LOGGDG                        '\nOUTLOG   EQU    *-80+19\n       DC     CL80'//         DISP=(NEW,CATLG,DELETE),UNIT=TAPE,      '\n DC CL80'//         DCB=(MODELDCB,RECFM=VB,LRECL=288,BLKSIZE=32568), '\n       DC     CL80'//         LABEL=(1,SL,EXPDT=99000),VOL=(,RETAIN)  '\nENDLOG   EQU    (*-JCLLOG)/80          * NUMBER OF RECORDS\nOUTLOGA  DS     F                      * END ADDR OF LOG DSN W/O ','\nLOGIN    DC     CL80'//         DD  DISP=SHR,DSN=                     '\nLOGDSN   EQU    *-80+28                *\nLOGTBL   DC     10CL44' '\nLOGTBLA  DS     F\n         SPACE\nJCLJRNL  DS     0H                     *\n         DC     CL80'//JNLMERGE EXEC PGM=IEBGENER,REGION=4M           '\n         DC     CL80'//SYSPRINT DD  SYSOUT=(,)                        '\n         DC     CL80'//SYSIN    DD  DUMMY                             '\n         DC     CL80'//SYSUT2   DD  DSN=JRNLGDG                       '\nOUTJRNL  EQU    *-80+19\n         DC     CL80'//         DISP=(NEW,CATLG,DELETE),UNIT=TAPE,    '\n DC CL80'//         DCB=(MODELDCB,RECFM=FB,LRECL=8000,BLKSIZE=32000), '\n         DC     CL80'//         LABEL=(1,SL,EXPDT=99000)              '\nENDJRNL  EQU    (*-JCLJRNL)/80         * NUMBER OF RECORDS\nOUTJNLA  DS     F                      * END ADDR OF LOG DSN W/O ','\nJRNLIN   DC     CL80'//         DD  DISP=SHR,DSN=                     '\nJRNLDSN  EQU    *-80+28                *\nJRNLTBL  DC     10CL44' '\nJRNLTBLA DS     F\n*\nSRCEXEC  DC     CL80'//SCRATCH EXEC PGM=IEFBR14,COND=(0,LT)           '\nSRCDDN   DC     CL80'//DDN1     DD  DISP=(OLD,DELETE,KEEP),DSN=       '\nSRCSUFF  EQU    *-80+5\nSRCDSN   EQU    *-80+42\n         SPACE 2\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,LRECL=80,RECFM=FB,DSORG=PS,                X\n               MACRF=GL,EODAD=EOF\nJOBCARD  DCB   DDNAME=JOBCARD,LRECL=80,RECFM=FB,DSORG=PS,              X\n               MACRF=GM,EODAD=EOFJOB\nPM       DCB   DDNAME=PM,LRECL=80,RECFM=FB,DSORG=PS,                   X\n               MACRF=GM,EODAD=EOFPM,EXLST=EXLST\nPOSTLOG  DCB   DDNAME=POSTLOG,LRECL=80,RECFM=FB,DSORG=PS,              X\n               MACRF=GM,EODAD=EOFPOST,EXLST=EXLST\nINTRDR   DCB   DDNAME=INTRDR,LRECL=80,BLKSIZE=80,RECFM=F,DSORG=PS,     X\n               MACRF=PM\nSYSOUT   DCB   DDNAME=SYSOUT,LRECL=80,BLKSIZE=23440,RECFM=FB,DSORG=PS, X\n               MACRF=PM\nEXLST    DC    X'87',AL3(JFCB)         *\nJFCB     DS    0H                      *\n         IEFJFCBN LIST=NO              *\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARMPASS": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00?\\x00?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "FILE022"}, "text": "*-----------------------------------------------------------------*\n*  PGMNAME:  PARMPASS                                             *\n*                                                                 *\n*  FUNCTION: READ PARM PASSED TO PGM AND WRITE IT TO A DATASET    *\n*                                                                 *\n*  USE:  WELL,  YOU COULD HAVE SYMBOLIC SUBSITUTION FOR SYSIN     *\n*        STATEMENTS IN PROC'S ....                                *\n*                                                                 *\n*        //TESTPROC PROC IN=OUTDD                                 *\n*        // EXEC PGM=PARMPASS,PARM=' COPY INDD=&IN,OUTDD=OUT'     *\n*        //SYSOUT  DD DSN=&&SYSIN,DISP=(,PASS),UNIT=SYSDA,        *\n*        //        SPACE=(TRK,1)                                  *\n*        //*                                                      *\n*        // EXEC PGM=IEBCOPY                                      *\n*        //SYSPRINT DD SYSOUT=*                                   *\n*        //SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(3,1))               *\n*        //SYSUT4   DD UNIT=SYSDA,SPACE=(CYL,(1,1))               *\n*        //INDD     DD DSN=SYS1.PARMLIB,DISP=SHR                  *\n*        //OUTDD    DD DSN=SYS1.PARMLIB.BACKUP,DISP=SHR           *\n*        //SYSIN    DD DSN=&&SYSIN,DISP=(OLD,DELETE)              *\n*                                                                 *\n*     GOOD FOR IEHPROGM TOO !!!!!                                 *\n*                                                                 *\n*     MAKE RENT, REUS IF YOU WANT TOO !!!                         *\n*                                                                 *\n*                                                                 *\n*-----------------------------------------------------------------*\n TITLE '  PASSPARM PGM - PASS A PARM TO A SYSOUT DATASET '\n         $START PASSPARM\n         L      R2,0(,R1)\n         LH     R3,0(,R2)\n         LTR    R3,R3\n         BZ     $EXIT\n         BCTR   R3,0\n         MVC    #PARM(*-*),2(R2)\n         EX     R3,*-6\n         OPEN   (SYSOUT,OUTPUT)\n         PUT    SYSOUT,#PARM\n         CLOSE  (SYSOUT)\n$EXIT    $END\n         PRINT  NOGEN\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,LRECL=80,BLKSIZE=80,MACRF=(PM),  X\n               RECFM=F\n         PRINT  GEN\n#PARM    DC     CL80' '\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUTCVRL": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01?\\x01?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 319, "newlines": 319, "modlines": 0, "user": "FILE022"}, "text": " TITLE '        PTF COVER LETTER PRINTER FOR MVS PTF TAPES'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n* FUNCTION:    THIS PROGRAM READS A PTF TAPE AND PRINTS ALL PTFS    *\n*              LOOKING FOR '++ PTF' OR '++ APAR', PER PAGE. IT ALSO *\n*              LISTS THE PTF NUMBER ON THE FAR LEFT SIDE FOR        *\n*              EASY REFERENCE.  FINALLY A LIST OF ALL FMIDS ON THE  *\n*              TAPE ARE PRINTED.                                    *\n*                                                                   *\n* REG USAGE:                                                        *\n*     R12,R11 ........ BASE REGS                                    *\n*     R3 ............. BAL REG                                      *\n*     R5 ............. PAGE COUNTER REG                             *\n*     R6 ............. FMIDLIST ADDRESS INCREMENTED                 *\n*     R7,R8 .......... USED FOR BCT FOR PAGE COUNTER                *\n*     R9 ............. FMIDLIST ADDRESS INITIAL                     *\n*     AVAILABLE R2,R4                                               *\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT\nPUTCVRL  CSECT\n         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n         LR    R12,R15                 SAVE PGM BEGIN ADDR\n         USING PUTCVRL,R12,R11\n         L     R11,SEC4K               ADDR 2ND 4K\n         LA    R10,SAVE                ADDR NEW SAVE AREA\n         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR\n         B     BEGIN                   JUMP OVER SAVE\nSAVE     DS    18F                     SAVE AREA FOR THIS PGM\nSEC4K    DC    A(PUTCVRL+4096)          ADDR OF 2ND 4K\n         EJECT\nBEGIN    DS    0H\n         L     R2,0(,R1)           PARM ADDR\n         LH    R3,0(,R2)           PARM LENGTH\n         LTR   R3,R3               TEST\n         BZ    NOPARM\n         BCTR  R3,0\n         MVC   LINES(*-*),2(R2)    MOVE PARM\n         EX    R3,*-6              EXECUTED\n         PACK  DWORD(8),LINES(2)   YES, PACK LINECOUNT\n         CVB   R5,DWORD                 CONVERT IT\n         ST    R5,DWORD                 STORE COUNTER\n         B     GETT\nNOPARM   L     R2,=F'59'           NO, DEFAULT LINECOUNT\n         ST    R2,DWORD                STORE IN DOUBLE WORD\nGETT     EQU   *\n         GETTIME DATE=XDATE        GET DATE AND TIME\n         MVC   HDRDATE(15),XDATE+1 PUT IT ON HEADER\n         EJECT\n         PRINT NOGEN\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                   *\n* PTFFILE .... SEQ FILE OF SYSMODS LRECL(80) MACRF(GM)              *\n* SYSOUT  .... SEQ PRINT FILE OF SYSMODS LRECL(133) MACRF(PM)       *\n* SYSUT1 ..... SEQ TEMP FILE FOR WORK AREA LRECL(133) MACRF(PM,GM)  *\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\nOPEN     OPEN   (PTFFILE,,SYSOUT,OUTPUT,SYSUT1,OUTPUT)\n         LA     R3,2\nHEADER   MVI    COVER1,C'1'         ALL '****'\n         PUT    SYSOUT,COVER1\n         MVI    COVER1,C' '\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,#COVER\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,#LETTER\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,#PRINTER\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,#REL\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER2\n         PUT    SYSOUT,COVER1\n         BCT    R3,HEADER\n         SPACE 3\n         XR     R3,R3                  BAL REG FOR PTFS\n         LA     R7,1                   INIT FMID COUNTER\n         LR     R8,R7                  FMID VALUE SAVED\n         LA     R6,FMIDLIST+1          ADDRESS OF FMIDLISTS\n         PRINT GEN\n         EJECT\n         SPACE\nSTART    GET    PTFFILE,RECORD         GET RECORD\n         CLC    RECORD(6),=C'++ PTF'   IS IT A PTF ?\n         BE     PTF\n         CLC    RECORD(7),=C'++ APAR'  IS IT AN APAR ?\n         BE     APAR\n         CLC    RECORD(7),=C'++ HOLD'  IS IT RELATED HOLD DATA ?\n         BE     HOLDATA\n         B      START                  IF NONE ABOVE, RETURN\n         EJECT\nAPAR     MVC    PTFNUM(8),RECORD+9     MOVE APAR NUMBER IN\n         B      *+10\nPTF      AP     PAGENUM(2),=PL2'01'    INCREMENT PAGE COUNTER BY ONE\n         UNPK   PG(2),PAGENUM(2)\n         OI     PG+1,X'F0'\n         SPACE\n         MVC    PTFNUM(8),RECORD+8     SAVE PTF NUMBER\n         MVC    P1(1),PTFNUM+0         SET PTF NUMBER FOF PRINTING\n         MVC    P2(1),PTFNUM+1\n         MVC    P3(1),PTFNUM+2\n         MVC    P4(1),PTFNUM+3\n         MVC    P5(1),PTFNUM+4\n         MVC    P6(1),PTFNUM+5\n         MVC    P7(1),PTFNUM+6\n         SPACE\n         PUT    SYSOUT,HEADER1         PUT HEADER1\n         MVC    CONT(5),=C'     '      INIT 'CONT.' FIELD\n         PUT    SYSOUT,HEADER2         PUT SECOND HRD W/PTF NAME\n         LA     R5,2                   RESET PAGE COUNTER: 2 LINES\n         SPACE\nPRINTM   MVC    RECORD+71(10),=10C' '  GET RID OF LINE NUMBERS\n         CLC    RECORD+1(2),=C'/*'     BEGINNING OF COMMENTS\n         BE     COMMENTS\n         CLC    RECORD+2(2),=C'/*'     BEGINNING OF COMMENTS\n         BE     COMMENTS\n         CLC    RECORD+3(2),=C'/*'     BEGINNING OF COMMENTS\n         BE     COMMENTS\n         LR     R7,R8\n         PUT    SYSOUT,ORECORD         PUT RECORD\n         A      R5,=F'1'               ADD ONE TO  PAGE COUNTER\n         GET    PTFFILE,RECORD         GET ANOTHER RECORD\n         CLC    RECORD+3(4),=C'FMID'   IS IT THE 'FMID (XXXXXXX)' REC\n         BE     FMIDS\n*        CLC    RECORD+3(4),=C'    '   IT WAS A CONTINUATION .....\n*                                         OF A PRE,REQ, OR SUP\n*                                         SO WE MUST BRANCH TO THE\n*                                         CORRECT ROUTINE USING\n*                                         REG R3\n*        BE     BALIT\n*        CLC    RECORD+3(3),=C'PRE'    IS IT A PRE REQ ?\n*        BE     PRE\n*        CLC    RECORD+3(3),=C'REQ'    IS IT A PRE REQ ?\n*        BE     REQ\n*        CLC    RECORD+3(3),=C'SUP'    IS IT A SUP     ?\n*        BE     SUP\n         B      PRINTM\nCOMMENTS MVC    RECORD+71(10),=10C' '  GET RID OF LINE NUMBERS\n         PUT    SYSOUT,ORECORD         PUT RECORD\n         LR     R7,R8\n         A      R5,=F'1'               ADD ONE TO  PAGE COUNTER\n         C      R5,DWORD               CHECK FOR PAGE\n         BNE    CGET\n         BAL    R2,PAGE\nCGET     GET    PTFFILE,RECORD         GET ANOTHER RECORD\n         CLC    RECORD+1(3),=C'*/.'    IS IT THE END OF COMMENTS ?\n         BE     START\n         CLC    RECORD+2(3),=C'*/.'    IS IT THE END OF COMMENTS ?\n         BE     START\n         CLC    RECORD+3(3),=C'*/.'    IS IT THE END OF COMMENTS ?\n         BE     START\n         B      COMMENTS\n         SPACE\nHOLDATA  EQU    *\n         PUT    SYSOUT,HOLDHDR\n         A      R5,=F'2'\nOHOLDATA MVC    RECORD+71(10),=10C' '  GET RID OF LINE NUMBERS\n         PUT    SYSOUT,ORECORD\n         A      R5,=F'1'               ADD ONE TO  PAGE COUNTER\n         C      R5,DWORD               CHECK FOR PAGE\n         BNE    OGET\n         BAL    R2,PAGE\nOGET     GET    PTFFILE,RECORD\n         CLC    RECORD(2),=C'++'       LOOK FOR END OF HOLDDATA\n         BNE    OHOLDATA\n         B      START\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                   *\n*        PRINT A NEW PAGE AND ADD ONE TO PAGE COUNTER               *\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\nPAGE     AP     PAGENUM(2),=PL2'01'\n         UNPK   PG(2),PAGENUM(2)\n         OI     PG+1,X'F0'\n         PUT    SYSOUT,HEADER1\n         MVC    CONT(5),=C'CONT.'      PUT 'CONT.' IN HEADER\n         PUT    SYSOUT,HEADER2\n         LA     R5,2                   RESET PAGE COUNTER\n         BR     R2\n         SPACE 2\nFMIDS    LA     R9,FMIDLIST-7\n*        MVC    $OFMID(8),RECORD+8\n*        MVC    $OPTF(8),PTFNUM\nFMIDLOOP LA     R9,7(R9)               ADDR OF FMID LIST\n         CLC    0(7,R9),RECORD+8       IS THIS NEW ONE EQUAL TO AN\n         BE     PRINTM                    OLD ONE ?\n         BCT    R7,FMIDLOOP\n         MVC    0(7,R9),RECORD+8       NEW FMID - SAVE IT\n         A      R8,=F'1'               ADD ONE TO FMID COUNTER\n         B      PRINTM\n*PRE      EQU    *\n*         LA     R2,RECORD+9            SET RECORD TO PARSE IT\n*         CLI    0(R2),C','\n*         MVC    $OFMID(8),RECORD+8\n*         MVC    $OPTF(8),PTFNUM\n*         LA     R3,PRE                 FOR POSSIBLE BAL\n*         PUT    SYSOUT,ORECORD         PUT RECORD\n*         B      PRINTM\n*REQ      EQU    *\n*         LA     R3,REQ                 FOR POSSIBLE BAL\n*         PUT    SYSOUT,ORECORD         PUT RECORD\n*         B      PRINTM\n*SUP      EQU    *\n*         LA     R3,SUP                 FOR POSSIBLE BAL\n*         PUT    SYSOUT,ORECORD         PUT RECORD\n*         B      PRINTM\n*BALIT    BR     R3                     BRANCH ROUTINE FOR CONTINUATION\nEOF      CLOSE  (PTFFILE)\n         CLOSE  (SYSUT1)\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                   *\n*   PRINT THE FMID LIST FILE FOR ALL VALID FMIDS ON THSI TAPE       *\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n         LA     R2,FMIDLIST-7\n         PUT    SYSOUT,OFMIDH1\n         PUT    SYSOUT,OFMIDH2\nFMIDPRT  LA     R2,7(R2)\n         CLI    0(R2),C' '\n         BE     EOF2\n         MVC    OFMID(7),0(R2)\n         PUT    SYSOUT,OFMIDREC\n         B      FMIDPRT\nEOF2     CLOSE  (SYSOUT)\n         SR     R15,R15                 ZERO RETURN REGISTER\n         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            RETURN ADDRESS\n         LM     R0,R12,20(R13)         REST OF THE REGS\n         BR     R14                    RETURN\n         EJECT\n         TITLE '        DATA --- SECTION'\nLINES    DS     CL2\n         DS    0D\nDWORD    DS     D\nPTFNUM   DC     CL8' '\n         DS     0F\nORECORD  DC     CL1' '\n         DC     CL26' '\nRECORD   DC     CL80' '\n         DC     CL26' '\n         DS     0H\nHEADER1  DC CL42'1  - - - - - - - - - - - - - - - - - -    '\n         DC CL41'C O V E R    L E T T E R    P R I N T E R'\n         DC CL41'    - - - - - - - - - - - - - - - - - -  '\n         DC     C'  PAGE '\nPG       DC     CL8'0'\nHDRDATE  EQU    HEADER1+42+41+41-15\n         SPACE\nHOLDHDR  DC     CL15'0'\n         DC     CL(133-(*-HOLDHDR))' + +  H O L D D A T A'\nPAGENUM  DC     PL2'0'\n         SPACE 2\nHEADER2  DC     CL1'-'\nP1       DC     CL2' -'\nP2       DC     CL2' -'\nP3       DC     CL2' -'\nP4       DC     CL2' -'\nP5       DC     CL2' -'\nP6       DC     CL2' -'\nP7       DC     CL2' '\n         DC     CL112' '\nCONT     DC     CL6'     '\n         SPACE 2\nFMIDLIST DC     40CL7' '\nOFMIDH1  DC     CL133'1   A L L    A P P L I C A B L E    F M I D \" S'\nOFMIDH2  DC     CL133'-'\nOFMIDREC DC     CL5'0'\nOFMID    DC     CL128' '\n         DS     0H\nCOVER1   DC     C'1',132C'*'\nCOVER2   DC     C' ',C'*',130C' ',C'*'\n#COVER   DC     C' *'\n         CENTER 'C O V E R',LEN=130\n         DC     C'*'\n#LETTER  DC     C' *'\n         CENTER 'L E T T E R',LEN=130\n         DC     C'*'\n#PRINTER DC     C' *'\n         CENTER 'P R I N T E R',LEN=130\n         DC     C'*'\n#REL     DC     C' *'\n         CENTER 'REL 2.2.1',LEN=130\n         DC     C'*'\n         SPACE 2\n         PRINT  NOGEN\nPTFFILE  DCB  DDNAME=PTFFILE,DSORG=PS,LRECL=80,MACRF=(GM),             X\n               RECFM=FB,EODAD=EOF\nSYSOUT DCB DDNAME=SYSOUT,DSORG=PS,LRECL=133,BLKSIZE=1330,MACRF=(PM),   X\n               RECFM=FBA\nSYSUT1 DCB DDNAME=SYSUT1,DSORG=PS,LRECL=256,BLKSIZE=2560,MACRF=(PM,GM),X\n               RECFM=FB\n         SPACE 2\n         PRINT GEN\n* REGISTER EQUATES\n         SPACE\n         REGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PUTCVRL#": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "FILE022"}, "text": "// JOB\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//*     LIB: RMHFILE(PUTCVRL)                                         *\n//*     DOC: PRINT COVER LETTERS FOR PTFS                             *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//PRINT   EXEC PGM=PUTCVRL\n//PTFFILE DD  DSN=F1,DISP=OLD,UNIT=TAPE,VOL=SER=MAINT1,\n//        LABEL=(,NL),DCB=BLKSIZE=7200\n//SYSOUT   DD  SYSOUT=(,)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,1))\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFPGM": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00T\\x00T\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n&NAME    RACFPGM  &PGMNAME\n.*===================================================================\n.*      RACF PROGRAM CHECKING FRONT - END MODULE                    =\n.*===================================================================\n         LCLA   &A\n         AIF    (K'&PGMNAME GT 8).ERROR1   PGMNAME > 8\n.EQUATE  ANOP\nR&A      EQU    &A\n&A       SETA   &A+1\n         AIF    (&A LT 16).EQUATE\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                         *\n*  THIS PROGRAM WILL 'FRONT-END' A PROGRAM MODULE AND     *\n*                                                         *\n*  PERFORM A 'RACHECK' FOR ENTITY 'PGMNAME' FOR PROGRAM   *\n*                                                         *\n*  '&PGMNAME'.  ALL AUTHORIZED USERS OF THIS PROGRAM MUST *\n*                                                         *\n*  HAVE THEIR PROFILE DEFINED WITH THE 'PGMNAME' ENTITY   *\n*                                                         *\n*  AUTHORIZED TO USE '&PGMNAME'                           *\n*                                                         *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nRACFPGM  CSECT\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING RACFPGM,R12\n         GETMAIN R,LV=72          GET A SAVEAREA\n         ST    R13,4(1)\n         ST    R1,8(R13)\n         LR    R13,R1\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*   RACHECK INVOKES RACF TO SE IF USER IS AUTHORIZED      *\n*   TO EXECUTE THIS PROGRAM.  RC=0 SAYS IT'S OK.          *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\nRACHECK  RACHECK ENTITY=PGMNAME,CLASS='PGM1',ATTR=READ\n         LTR   R15,R15                   IS USER AUTHORIZED\n         BZ    CALLPGM                 YES, GO CALL PROGRAM\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*   USER IS NOT AUTHORIZED TO USE PROGRAM SO WRITE A      *\n*   MESSAGE TO SECURITY CONSOLE & USER, THEN ABEND.       *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n         XR    R0,R0\n         WTO   ('USER IS NOT AUTHORIZED',D),                           X\n               ('TO USE THE PROGRAM &PGMNAME.',DE),                    X\n               ROUTCDE=(9,11),DESC=6\n         ABEND 913,,STEP\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*   USER IS AUTHORIZED TO INVOKE THIS PROGRAM.            *\n*   CLEAN UP THEN BRANCH TO THE PROGRAM.                  *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\nCALLPGM  L     R11,4(13)\n         FREEMAIN R,LV=72,A=(13)        FREE UP SAVE AREA\n         LR    R13,R11                  R13=OLD SAVE AREA\n         L     R14,12(R13)              SET RETURN TO MVS\n         L     R15,PGMADDR              GET PROGRAM ADDRESS\n         LM    R0,R12,20(R13)           RESTORE REGS\n         BR    R15                      GO TO PROGRAM\nPGMNAME  DC    CL8'&PGMNAME'\nPGMADDR  DC    V(&PGMNAME)\n    MNOTE ' '\n    MNOTE '*********************************************************'\n    MNOTE '*                                                       *'\n    MNOTE '*   WHEN LINKING THE NEW MODULE \"&PGMNAME\", MAKE SURE   *'\n    MNOTE '*                                                       *'\n    MNOTE '*   TO \"ORDER\" THE MODULES WITH \"RACFPGM(P)\" ON A       *'\n    MNOTE '*                                                       *'\n    MNOTE '*   PAGE BOUNDARY AND AS THE ENTRY POINT INTO THE       *'\n    MNOTE '*                                                       *'\n    MNOTE '*   MODULE.  ALSO INCLUDE ANY ALIASES NECESSARY         *'\n    MNOTE '*                                                       *'\n    MNOTE '*********************************************************'\n    MNOTE ' '\n         END   RACFPGM\n         AGO   .MEND\n.ERROR1 MNOTE 12,'PROGRAM NAME  \"&PGMNAME\"  GREATER THAN 8 CHARACTERS'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFST": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02z\\x02z\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 634, "newlines": 634, "modlines": 0, "user": "FILE022"}, "text": " TITLE '     RACF   STATUS   PROGRAM 1.7 AND 1.7.1        &SYSDATE'\nRACFST   CSECT\n         STM    R14,R12,12(R13)       * SETUP\n         LR     R12,R15               *\n         USING  RACFST,R12,R11\n         B      $LOADR11              * BRANCH OVER CONSTANTS\n         DC     C'&SYSDATE_&SYSTIME_V2.1'\n         DC     A(RACFST+4095)\n$LOADR11 L      R11,*-4\n         A      R11,=F'1'\n         LA     R10,SAVE              *\n         ST     R10,8(R13)            *\n         ST     R13,SAVE+4            *\n         LR     R13,R10               *\n         SPACE\n         SPLEVEL SET=2\n         SPACE\nYEP      EQU    X'00'\nNOPE     EQU    X'FF'\n         ST     R1,SAVE1              * SAVE PARM IF ANY\n$GETCVT  DS     0H\n         RDJFCB SYSOUT                * READ JFCB                  *NEW\n         LTR    R15,R15               * IF DDNAME SYSOUT PRESENT   *NEW\n         BNZ    $NOPRINT              * NOPE, TPUTS                *NEW\n         OPEN   (SYSOUT,OUTPUT)\n         MVI    PRTFLG,YEP            * SET SYSOUT FLAG            *NEW\n         B      *+8                   * SKIP                       *NEW\n$NOPRINT MVI    PRTFLG,NOPE           * SET SYSOUT FLAG            *NEW\n         CLEAR  2,7                   * CLEAR REGS                 *NEW\n         L      R2,CVTPTR             * GET CVT POINTER\n         S      R2,=F'256'            * TO CVT PREFIX\n         USING  CVTFIX,R2             * ADDRESS CVT PREFIX\n         L      R3,CVTSMEXT           * LOAD STORAGE EXTENSION\n         USING  CVTVSTGX,R3           * ADDRESS PATCH AREA\n         L      R4,CVTEXT2            * CVT EXTENSION OS/VS1-OS/VS2\n         USING  CVTXTNT2,R4           * ADDRESS IT\n         L      R5,CVTRAC             * RACF CVT (MACRO: ICHPRCVT)\n         USING  RCVT,R5               * ADDRESS IT\n         L      R6,CVTTCBP            * CVTTCBP -\n*                                     * ADDR OF A DW NEXT+CUR. TCB\n         ST     R6,DWORD              * SAVE IT\n         LM     R6,R7,DWORD           * CVTTCBP - DWORD NEXT+CUR. TCB\n         USING  PSA,R7                * PSA - PREFIXED SAVE AREA\n         L      R6,PSAAOLD            * ASCB OLD POINTER.\n         USING  ASCB,R6               * ASCB - ADDR SPACE C. B.\n         DROP   R7\n         XR     R7,R7                 * CLEAR R7\n         XR     R8,R8                 * .\n         LH     R7,ASCBASID           * LOAD ASID\n         CVD    R7,DWORD              * - SHIFT ASID\n         ED     ASID(5),DWORD+6       * - CONVERT ASID TO READABLE HEX\n         L      R7,ASCBASXB           * GET  ASXB\n         IC     R8,ASCBDP             * DISPATCHING PRIORITY\n         CVD    R8,DWORD              * - CONVERT\n         ED     DISPRTY(4),DWORD+6    * - EDIT IT\n         DROP   R6\n         LR     R6,R7                 * .\n         EJECT\n*----------------------------------------------------------------*\n*  GET ACEE AND USER INFORMATION                                 *\n*----------------------------------------------------------------*\n         SPACE\n         USING  ASXB,R6               * ADDR ASXB\n         L      R7,ASXBSENV           * ADDR ACEE: HIGH STORAGE !!\n         LTR    R7,R7                 * DOES ENVIRONMENT EXIST ?\n         BZ     NOACEE                * NOPE, SKIP\n         MODE   AMODE=31\n         DROP   R6\n         LR     R6,R7                 * ACEE\n         USING  ACEE,R6               * ADDRESS IT\n         XR     R7,R7                 * CLEAR\n         IC     R7,ACEEUSRL           * USERID LENGTH\n         S      R7,=F'1'              * FOR EXEC\n         MVC    USERID(*-*),ACEEUSRI  * WHO WE ARE ...\n         EX     R7,*-6\n         IC     R7,ACEEGRPL           * GROUP  LENGTH\n         S      R7,=F'1'              * FOR EXEC\n         MVC    GROUP(*-*),ACEEGRPN   * WHAT GROUP WE ARE IN ...\n         EX     R7,*-6\n         IC     R7,ACEEFLG1           * USER FLAGS\n         LTR    R7,R7                 * IS THIS A RACF USER\n         BZ     NOACEE\n         SRL    R7,4            * LAST 4 BITS NOT VERY INFORMATIONAL\n* ARE WE SPECIAL, ADD/PSWD, OPERATORS, AND AUDITORS ???\n         LA     R9,15                 * R9=0000 000F\n         LR     R8,R7                 * SAVE FLAGS\n         SRL    R8,3\n         LTR    R8,R8\n         BNZ    *+8                   * SPECIAL\n         MVI    SPECIAL,C'N'\n         LR     R8,R7\n         SLL    R8,1                  * R8=0000 0000\n*                                                 000N NNN0=R8(BITS)\n         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL\n*                                                 0000 NNN0=R8(BITS)\n         SRL    R8,3                  * R8=0000 0000\n*                                                 0000 000N=R8(BITS)\n         LTR    R8,R8\n         BNZ    *+8                   * ADD PASSWORD\n         MVI    ADDPS,C'N'\n         LR     R8,R7\n         SLL    R8,2                  * R8=0000 0000\n*                                                 00NN NN00=R8(BITS)\n         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL\n*                                                 0000 NN00=R8(BITS)\n         SRL    R8,3                  * R8=0000 0000\n*                                                 0000 000N=R8(BITS)\n         LTR    R8,R8\n         BNZ    *+8                   * OPERATOR\n         MVI    OPER,C'N'\n         LR     R8,R7\n         SLL    R8,3                  * R8=0000 0000\n*                                                 0NNN N000=R8(BITS)\n         NR     R8,R9                 * AND THE REG TO REMOVE SPECIAL\n*                                                 0000 N000=R8(BITS)\n         LTR    R8,R8\n         BNZ    *+8                   * NOT AUDITOR\n         MVI    AUDITOR,C'N'\n*\n         XR     R8,R8                 * CLEAR REG\n         XR     R7,R7                 * .\n         IC     R7,ACEEFLG2           * LOAD UACC FLAG\n         SRL    R7,4                  * ONLY LAST 4 IMPORTANT\n         SLL    R7,4                  * MOV'M BACK\n         STC    R7,#ACEEFLG           * STORE IT\n         CLI    #ACEEFLG,ACEECNTL     * CONTROL IN THIS GROUP ?\n         BH     ALTERGRP              * TOO HIGH, ALTER\n         BE     CNTLGRP               * =, CONTROL\n         CLI    #ACEEFLG,ACEEREAD     * READ IN THIS GROUP ?\n         BH     UPDTGRP               * TOO HIGH, UPDATE\n         MVC    UACC(4),=C'READ'      * SET TO READ AUTHORITY\n         B      DOWNMODE\nALTERGRP MVC    UACC(5),=C'ALTER'     * SET TO ALTER AUTHORITY\n         B      DOWNMODE\nCNTLGRP  MVC    UACC(7),=C'CONTROL'   * SET TO CONTROL AUTHORITY\n         B      DOWNMODE\nUPDTGRP  MVC    UACC(6),=C'UPDATE'    * SET TO CONTROL AUTHORITY\nDOWNMODE EQU    *\n         XR     R8,R8                 * CLEAR REG\n         XR     R7,R7                 * .\n         IC     R7,ACEEFLG4           * 4TH FLAG\n         SLL    R7,26                 * ALL THE WAY UP\n         SRL    R7,31                 * ALL THE WAY BACK\n         LTR    R7,R7                 * ARE WE AUTH. TO ADD USERS ??\n         BZ     *+10\n         MVC    ADDUSER(3),=C'YES'\n         IC     R7,ACEEFLG4           * 4TH FLAG\n         SLL    R7,4                  * SHIFT HIGH ORDER BITS\n         LA     R9,15                 * LOAD 'X'0F'\n         NR     R8,R9                 * 'AND' THE REGS\n         SRL    R7,4                  * SHIFT BITS BACK\n         LR     R7,R8                 * SAVE RESULTS\n         MVC    TERMINAL(8),ACEETRID  * TERMINAL ID\n         DROP   R6\n         MODE   AMODE=24\n         EJECT\n*----------------------------------------------------------------*\n*  PUT SMF ID IN RECORD                                          *\n*----------------------------------------------------------------*\n         SPACE\nNOACEE   EQU    *\n         L      R6,CVTSMCA            * SMF ADDR\n         USING  SMCABASE,R6           * ADDRESS IT SMF\n         MVC    SYSID(4),SMCASID      * SYSTEM ID\n         DROP   R6\n         SPACE\n*----------------------------------------------------------------*\n*  GET RACF PRIMARY DATASETS UCB, LOOK IT UP                     *\n*----------------------------------------------------------------*\n         SPACE\n         MVC    #RCVTID(4),RCVTID     * RACF ID\n         L      R1,RCVTRUCB           * ADDRESS OF UCB FOR RACF DSN\n         BAL    R14,$UCBLOOK          * SEARCH UCB, RETURN R1 TBL ADDR\n$INCOR   EQU    *                     *\n         MVC    RACFDSN(44),RCVTDSN   * RACF DSN\n         XR     R6,R6                 * CLEAR\n         MVC    UADSDSN(44),RCVTUADS  * UADS DSN\n         LA     R6,UADSDSN            * FIND OF UADS DSN\nLOOKVOL  CLI    0(R6),C' '            *\n         BE     PUTVOL                *\n         A      R6,=F'1'              *\n         B      LOOKVOL               *\nPUTVOL   MVC    1(4,R6),=C'VOL='      *\n         MVC    5(6,R6),RCVTUVOL      * UADS VOLSER\n         XR     R6,R6                 * CLEAR\n         IC     R6,RCVTFLGS           * RACF STATUS FLAGS\n         SRL    R6,7                  * KEEP ONLY HIGH ORDER BIT\n         LTR    R6,R6                 * IS RACF 'RVARY' IED, DEACTIVAT\n         BZ     *+10                  * NOPE, SKIP\n         MVC    DEACTFLG(2),=C'IN'    * YEP, NOTE CONDITION\n         IC     R6,RCVTPINV           * PASSWORD INTERVAL 1-255\n         CVD    R6,DWORD              * - CONVERT IT\n         ED     PSWDINTV(4),DWORD+6   * - EDIT RESULTS\n         IC     R6,RCVTVERS           * RACF VERSION\n         CVD    R6,DWORD              * - CONVER IT\n         ED     VERSION(2),DWORD+7    * - EDIT RESULTS\n         MVI    VERSION,C'.'          * - PUT DOT FOR VERSION\n         IC     R6,RCVTRVOK           * # TRIES BEFORE REVOKE\n         CVD    R6,DWORD              * - CONVER IT\n         ED     REVOKID(4),DWORD+6    * - EDIT RESULTS\n         EJECT\n*----------------------------------------------------------------*\n*  LOOK AT STARTED TASK TABLE, ICHRIN03                          *\n*----------------------------------------------------------------*\n         SPACE\n         L      R6,RCVTSPT            * ICHRIN03 ADDRESS\n         USING  ICHRIN03,R6           * ADDRESS IT\n         LH     R7,$ICHID             * LOAD ID AND LENGTH X'8LLL'\n         SLL    R7,20                 * SHIFT R7='LLL0 0000'\n         SRL    R7,20                 * SHIFT R7='0000 0LLL'\n         CVD    R7,DWORD              * - CONVERT IT\n         ED     NUMPROCS(4),DWORD+6   * - EDIT IT\n         MVC    $PROC(8),$ICHPROC     * PROC NAME\n         MVC    $USER(8),$ICHUSER     * USER NAME\n         MVC    $GROUP(8),$ICHGRP     * GROUP NAME\n         CLI    $ICHPRVL,$ICHPRVN     * PRIVILIEG ???\n         MVC    $PRIVL(3),=C'NO '     * RESET\n         BE     *+10                  * NOPE, SKIP\n         MVC    $PRIVL(3),=C'YES'     * YEP\n         DROP   R6\n* GET RVARY PASSWORD\n         MVC    RVARYPSW(8),RCVTSWPW  * RVARY PASSWORD\n         MVC    RVARYSTA(8),RCVTINPW  * RVARY PASSWORD, STATUS\n         EJECT\n*----------------------------------------------------------------*\n*  LOOK AT DSN TABLES, EACH TABEL ENTRY CONSISTS OF TWO ENTRIES  *\n*----------------------------------------------------------------*\n         SPACE\n         XR     R6,R6                 * CLEAR R6\n         MODE   AMODE=31              * NOTE: DSDT IN EXTENDED CSA\n         L      R6,RCVTDSDT           * LOAD ADDR OF DSN TABLE\n         USING  ICHDSDT,R6            * MACRO: ICHDSDT\n         L      R7,DSDPXLEN           * LEN. IN-STOR BUFFERS\n         CVD    R7,DWORD              * - CONVERT IT\n         ED     INCORBLK(6),DWORD+5   * - EDIT\n         XR     R7,R7                 * CLEAR R7\n         IC     R7,DSDPRXNO           * # IN-STOR BUFFERS\n         CVD    R7,DWORD              * - CONVERT IT\n         ED     INCRBLKL(5),DWORD+6   * - EDIT RESULTS\n         MVC    BACKUPDS(44),DSDBDSN  * BACKUP DSN\n         L      R6,RCVTDSDT           * LOAD ADDR OF DSN TABLE\n         MVC    LINSTRBB(1),DSDBRXNO  * # IN-STOR. BACKUP BUFFERS\n         IC     R7,DSDPDSNL           * PRIMARY DATASET LENGTH\n         LA     R8,RACFDSN            * ADDR OF THE BEGIN. OF RACFDSN\n         AR     R8,R7                 * ADDR PAST DSN...\n         MVC    2(4,R8),=C'VOL='      * VOL=\n         MVC    6(6,R8),VOLSER        *      VOLSER\n         MVC    13(5,R8),=C'UNIT='    *             UNIT=\n         MVC    18(3,R8),UNITNAME     *                   UNITNAME\n         MVC    22(6,R8),=C'CHPID='   * CHANNEL PATHS\n         MVC    28(2,R8),CHPIDS       * 1ST CHPID\n         MVC    30(1,R8),=C','        *\n         MVC    31(2,R8),CHPIDS+3     * 2ND CHPID\n* IS PRIMARY DATASET ACTIVE ???\n         XR     R7,R7                 * CLEAR IT\n         IC     R7,DSDPSTAT           * INSERT FLAG\n         SRL    R7,7                  * KEEP HIGH ORDER BIT\n         MVC    OREC1+4(8),=C'  ACTIVE'\n         LTR    R7,R7                 * TEST RESULTS\n         BNZ    *+10                  * IF ZERO, NOT ACTIVE\n         MVC    OREC1+2(2),=C'IN'     * PUT 'INACTIVE'\n         SPACE\n* RACF BACKUP DATASET PROCESSING\n         SPACE\n         L      R1,DSDBRUCB           * BACKUP UCB DATA SET\n         BAL    R14,$UCBLOOK          * UCB LOOK UP\n         XR     R7,R7                 * CLEAR R6\n         IC     R7,DSDBDSNL           * BACKUPDS DATASET LENGTH\n         LA     R8,BACKUPDS           * ADDR OF THE BEGIN. OF RACFDSN\n         AR     R8,R7                 * ADDR PAST DSN...\n         MVC    2(4,R8),=C'VOL='      * VOL=\n         MVC    6(6,R8),VOLSER        *      VOLSER\n         MVC    13(5,R8),=C'UNIT='    *             UNIT=\n         MVC    18(3,R8),UNITNAME     *                   UNITNAME\n         MVC    22(6,R8),=C'CHPID='   * CHANNEL PATHS\n         MVC    28(2,R8),CHPIDS       * 1ST CHPID\n         MVC    30(1,R8),=C','        *\n         MVC    31(2,R8),CHPIDS+3     * 2ND CHPID\n* IS BACKUP DATASET ACTIVE ???\n         XR     R7,R7                 * CLEAR IT\n         IC     R7,DSDBSTAT           * INSERT FLAG\n         SRL    R7,7                  * KEEP HIGH ORDER BIT\n         MVC    OREC2+4(8),=C'  ACTIVE'\n         LTR    R7,R7                 * TEST RESULTS\n         BNZ    *+10                  * IF ZERO, NOT ACTIVE\n         MVC    OREC2+2(2),=C'IN'\n         XR     R7,R7                 * CLEAR R6\n         MODE   AMODE=24\n         DROP   R2,R3,R4,R5,R6\n         LA     R3,PUTLEN\n         LA     R2,PUTRPT-80\n         CLI    PRTFLG,YEP\n         BNE    $TPUTS\n         PUT    SYSOUT,BLANKS\nPUTLOOP  EQU    *\n         LA     R2,80(,R2)\n         PUT    SYSOUT,0(R2)\n         BCT    R3,PUTLOOP\n         CLOSE  (SYSOUT)             * YEP, CLOSE FILE\n         B      CLEAR15\n$TPUTS   TPUT   CLEAR,L'CLEAR,FULLSCR\n         TPUT   BLANKS,80\nTPUTLOOP EQU    *\n         LA     R2,80(,R2)\n         TPUT   (R2),80\n         BCT    R3,TPUTLOOP\nCLEAR15  SR     R15,R15              *  ZERO RETURN REGISTER\n         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\n TITLE '-->  UCB LOOK-UP  SECTION    '\n$UCBLOOK STM    R0,R15,SAVESUB        * SAVE REGS\n         LTR    R1,R1                 * IS THIS A VALID UCB ??\n         BZ     $ENDUCB               * NOPE, RETURN\n         USING  UCB,R1                * ADDRESS UCB\n         LA     R2,UCBPRFX            * UCB PREFIX\n         SR     R1,R2                 * ADDRESS UCB PREFIX\n         CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ??\n         BNE    $ENDUCB               * NOPE, SKIP\n         MVC    UNITNAME(3),UCBNAME   * UNIT - NAME\n         MVC    VOLSER(6),UCBVOLI     * VOL - SER\n         XR     R3,R3                 * CLEAR R3\n         LH     R3,UCBSCHNO           * LOAD SUB-CHANNEL\n         CVD    R3,DWORD              * LOAD SUB-CHANNEL\n         MVC    SUBCHAN(3),EDSCHANO   * MOVE EDIT\n         ED     SUBCHAN(3),DWORD+6    * EDIT RESULTS\n* PATH DETERMINATION\n         MVC    PATHS(8),BLANKS       * PATHS, SAVE'M\n         MVC    PATHS(8),UCBCHPID     * PATHS, SAVE'M\n         LA     R5,PATHS-1            * LOAD ADDRESS OF PATHS\n         LA     R6,8                  * MAX CHANNEL PATHS\n         MVC    #CHPIDS(32),BLANKS    * CLEAR WORK AREA\n         LA     R8,#CHPIDS-4          * CHPID TABLE ADDR\nPATHLOOP LA     R5,1(,R5)             * LOAD NEXT ADDR\n         CLI    0(R5),X'FF'           * EMPTY CHPID ?\n         BE     PATHDONE              * YEP, ALL DONE\n         XR     R7,R7                 * CLEAR\n         IC     R7,0(R5)              * LOAD CHPID\n         SLL    R7,8                  * SHIFT\n         IC     R7,=X'F0'             * NOW R7='0000 NNF0'\n         SRL    R7,4                  * NOW R7='0000 0NNF' PACKED!\n         STH    R7,PPATHS             * STORE IT\n         A      R8,=F'4'              * NEXT ADDR IN TABLE\n         MVC    0(4,R8),EDITPATH      * MOVE EDIT\n         ED     0(4,R8),PPATHS        * EDIT RESULTS\n         BCT    R6,PATHLOOP           * LOOP UPTO 8 TIMES\nPATHDONE EQU    *\n         MVC    CHPIDS(12),BLANKS     * CLEAR OLD CHANNLE PATHS\n         MVC    CHPIDS(2),#CHPIDS+2   * SAVE EACH ONE\n         MVC    CHPIDS+3(3),#CHPIDS+4+2\n         MVC    CHPIDS+3+3(3),#CHPIDS+4+4+2\n         MVC    CHPIDS+3+3+3(3),#CHPIDS+4+4+4+2\n         LA     R1,UCBLOOK            * R1: RETURN ADDR OF TABLE\n$ENDUCB  LM     R0,R15,SAVESUB        * RESTORE REGS\n         BR     R14                   * RETURN\nSAVESUB  DS     15F\n*\nUCBLOOK   EQU    *                     * UCB LOOK TABEL\nUNITNAME  DC     CL3' '                * UNIT NAME\nVOLSER    DC     CL6' '                * VOLSER\nSUBCHAN   DC     CL4' '                * SUB CHANNEL NUMBER NOT USED\nCHPIDS    DC     CL12' '               * MAX(4) CHANNEL PATHS\nUCBLEN    EQU    *-UCBLOOK             * UCB LOOK TABEL LEN (27)\n*\nSUBCHAN#  DS     F                     * SAVE SUB-CHANNEL #\nEDSCHANO  DC     X'402021'             * EDIT SUB CHANNEL\n*\nPATHS     DC     CL8' '\n#CHPIDS   DC     8CL4' '\nEDITPATH  DC     X'40202120'\nPPATHS    DS     H\n TITLE '--> DATA AREAS'\nSAVE     DS      18F\nSAVE1    DS      F                   * PARM IF ANY ...\nSAVBAL   DS      F                   * SAVE AREA FOR 'BALREG'\nBLANKS   DC      CL100' '\n#CVTRUCB DS      F                   * RACF PRIMARY UCB ADDR\n#CVTXLEN DS      F                   * IN-CORE BLOCK LENGTH\n         DS    0D\nDWORD    DS     D\nRVARYSTA DS     CL8\nINSTORBF DS     CL4\nLINSTORB DS     CL1\nLINSTRBB DS     CL1\nFLG1     DS     XL2\nFLG2     DS     XL2\n#ACEEFLG DS     C\nDSDT#    DC     CL4' '\n*\n* OUTPUT DATA AREA\nPUTRPT   EQU    *\nOREC     DC     CL80' '\n         ORG    OREC\n         DC     C' RACF 1'\nVERSION  DC     X'4020'\n         DC     C' IS'\nDEACTFLG DC     C'  ACTIVE ON SYSID('\nSYSID    DC     C'    )'\n         DC     CL8' RACFID('\n#RCVTID  DC     CL5'    )'\n         ORG\n*\nOFILL1   DC     CL80' '\nOREC1    DC     CL80' '\n         ORG    OREC1\n         DC     CL12' '\n         DC     CL13' PRIMARY DSN='\nRACFDSN  DS     CL44\n         ORG\n*\nOREC2    DC     CL80' '\n         ORG    OREC2\n         DC     CL12' '\n         DC     CL13' BACKUP  DSN='\nBACKUPDS DC     CL44' '\n         ORG\n*\nOREC4    DC     CL80' '\n         ORG    OREC4\n         DC     CL12' '\n         DC     CL13' UADS    DSN='\nUADSDSN  DC     CL44' '\n         ORG\n*\nOREC6    DC     CL80' '\n         ORG    OREC6\n         DC     CL12' '\n         DC     C' PASSWORD INTERVAL IN DAYS ='\nPSWDINTV DC     X'40202020'\n         ORG\nOREC7    DC     CL80' '\n         ORG    OREC7\n         DC     CL12' '\n         DC     CL18' RVARY PASSWORD ='\nRVARYPSW DS     CL8\n         DC     CL11' REVOKE ID='\nREVOKID  DC     X'40202021'\n         ORG\nOREC8    DC     CL80' '\n         ORG    OREC8\n         DC     CL12' '\n         DC     CL18' IN-CORE, BLOCKS ='\nINCORBLK DC     X'402020202021'    * IN-CORE BLOCK LENGTH\n         DC     CL11'   LENGTH ='\nINCRBLKL DC     X'40202021',C'K'\n         ORG\nOFILL2   DC     CL80' '\nOREC9    DC     CL80' '\n         ORG    OREC9\n         DC     CL12' '\n         DC     C' NUMBER OF PROCS IN ICHIN03 TABLE ='\nNUMPROCS DC     X'40202021'\n         ORG\nOREC10   DC     CL80' '\n         ORG    OREC10\n         DC     CL13' '\n         DC     C'NOTE: GENERICS,  PROC''S = ''*'', '\n         DC     C'USER = ''='''\n         ORG\nOREC11   DC     CL80' '\n         ORG    OREC11\n         DC     CL12' '\n         DC     C' PROC = '\n$PROC    DC     CL8' '\n         DC     C' USER = '\n$USER    DC     CL8' '\n         DC     C' GROUP = '\n$GROUP   DC     CL8' '\n         DC     C' PRIVILEDGE ? '\n$PRIVL   DC     CL3' '\n         ORG\nOBLANK1  DC     CL80' '\nOREC12   DC     CL80' '\n         ORG    OREC12\n         DC     CL12' '\n         DC     C' USERID='\nUSERID   DC     CL8' '\n         DC     C' GROUP='\nGROUP    DC     CL8' '\n         DC     C'  ASID= '\nASID     DC     X'4020202021'\n         DC     C'  DISPRTY='\nDISPRTY  DC     X'40202021'\n         ORG\nOREC13   DC     CL80' '\n         ORG    OREC13\n         DC     CL12' '\n         DC     C' SPEC='\nSPECIAL  DC     C'Y'\n         DC     C' ADDPS='\nADDPS    DC     C'Y'\n         DC     C' OPER='\nOPER     DC     C'Y'\n         DC     C' AUDITOR='\nAUDITOR  DC     C'Y'\n         DC     C' UACC('\nUACC     DC     C'       )'\n         ORG\nOREC14   DC     CL80' '\n         ORG    OREC14\n         DC     CL12' '\n         DC     C' ADDUSER='\nADDUSER  DC     CL3'NO'\n         DC     C' TERMID='\nTERMINAL DC     CL8' '\n         ORG\nPUTLEN   EQU    ((*-PUTRPT)/80)\n         SPACE\n* SOME TPUT/TGET VARIABLES\n         DS    0H\n#ASID    DS    F\nCLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN\nPRTFLG   DC    X'00'\n*\n         PRINT NOGEN\nSYSOUT DCB     DDNAME=SYSOUT,LRECL=80,RECFM=FBA,DSORG=PS,EXLST=EXL,    X\n               MACRF=PM\n         PRINT GEN\nEXL      DC    X'87',AL3(JFCB)\nJFCB     EQU   *\n         IEFJFCBN LIST=NO\n         LTORG\n         TITLE '--> CVT - DSECT'\n         CVT   DSECT=YES,PREFIX=YES\n         TITLE '--> ICHPRCVT - DSECT '\n         ICHPRCVT\n         TITLE '--> ICHRIN03 DSECT  '\nICHRIN03 DSECT\n$ICHID   DS    XL2           IDENTIFIER, USUALLY = B'1000' + LENGTH\n*                            - LENGTH LAST B'1000 LLLL LLLL LLLL'\n*                            - WHERE THE L'S STAND FOR TABLE LENGTH\n$ICHPROC DS    CL8           PROC NAME (GENERIC='*')\n$ICHUSER DS    CL8           USERID NAME (GENERIC='=')\n$ICHGRP  DS    CL8           GROUP NAME\n$ICHPRVL DS    XL1           PRIVILEGE IDENTIFIER\n$ICHPRVY EQU   X'80'         - ON\n$ICHPRVN EQU   X'00'         - OFF\n$ICHFILL DS    XL7           FILLER\n         MACRO\n         ICHDSDT  &LIST=YES,&VER=1,&REL=7\n.*-----------------------------------------------------------------*\n.*   MACRO NAME:  ICHDSDT                                          *\n.*     FUNCTION:  MAP OF THE RACF PRIMARY AND SECONDARY DATASETS   *\n.*    VARIABLES:  LIST=YES   TO LIST VARIABLE NAMES                *\n.*                VER=1      RACF VERSION NUMBER                   *\n.*                REL=7      RACF RELEASE (IE 6, 7, 7.1)           *\n.*-----------------------------------------------------------------*\n         AIF   ('&LIST' EQ 'YES').DSECT\n         PUSH  PRINT\n         PRINT  OFF\n.DSECT   ANOP\n TITLE 'ICHDSDT  DSECT  FOR  RACF  &VER - &REL '\nICHDSDT  DSECT\n*\nDSDT     DS    0CL8\nDSDTID   DS    CL4      *    EBCDIC ID\nDSDTNUM  DS    XL4      *    # OF ENTRIES IN TABLE\n         AIF   ('&REL'  EQ '7').REL7\n         AIF   ('&REL'  EQ '6').REL7\n         AIF   ('&REL'  EQ '7.1').REL71\n.REL71   ANOP\n                                                           RACF 1.7.1\nDSDTDSDX DS    A        * POINTER TO EXTENSION             RACF 1.7.1\nDSDTVRSN DS    X        * VERSION NUMBER OF DSDT           RACF 1.7.1\nDSDTFILL DS    3X       * DOUBLE WORD BOUNDARY             RACF 1.7.1\n         DS    0D\nDSDTENTY EQU   *        * ENTRY FOR DATA INFORMATION       RACF 1.7.1\n.REL7    ANOP\nDSDPDCB  DS    A        * PRT DCB PRIMARY RACF DATASET\nDSDPDEB  DS    A        * PRT DEB PRIMARY RACF DATASET\nDSDPINDX DS    A        * PRT IN-STOR BUF'S\nDSDPHRD  DS    A        * PRT RACF IN-STOR HEADER OR 0 SHR'D DASD\nDSDPRUCB DS    A        * UCB OF PRIMARY RACF DATASET\nDSDPXLEN DS    A        * LEN IN-STOR BUF/RESD INDX TBL\nDSDPBAM  DS    A        * LOC. IN-STOR BAM INFO\nDSDPDSNL DS    XL1      * LEN OF PRIMARY RACF DATASET\nDSDPSTAT DS    XL1      * RACF PRIMARY DS STATUS\nDSDPACTV EQU   X'80'      - ACTIVE\nDSDPPRIM EQU   X'40'      - THIS IS THE PRIMARY ONE\nDSDPMSTR EQU   X'20'      - THIS IS THE MASTER\nDSDPRFSH EQU   X'10'      - REFRESH ICB\nDSDPSHR  EQU   X'08'      - SHARED\nDSDPALTI EQU   X'04'      - ALTERI REQ. ARE BACKED-UP\nDSDPDAT  EQU   X'02'      - IN-STOR. BLOCKS CAN BE DATA BLOCKS\nDSDPNREC DS    XL2      * # RECORDS/TRK PRIMARY DS\nDSDPRXNO DS    XL1      * # IN-STOR. BUFS/INDX BLKS\nDSDPDSN  DS    CL44     * DSN OF PRIMARY DATASET\nDSDPDSNO DS    XL1      * DATA SET SEQ. #\n         DS    XL2\nDSDTBACK DS    0CL80   88    ENTRY FOR BACK-UP DATASET\nDSDBDCB  DS    A       88    PRT DCB BACKUP RACF DATASET\nDSDBDEB  DS    A       92    PRT DEB BACKUP RACF DATASET\nDSDBINDX DS    A       96    PRT IN-STOR BUF'S\nDSDBHRD  DS    A      100    PRT RACF IN-STOR HEADER OR 0 SHR'D DASD\nDSDBRUCB DS    A      104    UCB OF BACKUP RACF DATASET\nDSDBXLEN DS    A      108    LEN IN-STOR BUF/RESD INDX TBL\nDSDBBAM  DS    A      112    LOC. IN-STOR BAM INFO\nDSDBDSNL DS    XL1    116    LEN OF BACKUP RACF DATASET\nDSDBSTAT DS    XL1    117    RACF BACKUP DS STATUS\nDSDBACTV EQU   X'80'         - ACTIVE\nDSDBPRIM EQU   X'40'         - THIS IS THE BACKUP ONE\nDSDBMSTR EQU   X'20'         - THIS IS THE MASTER\nDSDBRFSH EQU   X'10'         - REFRESH ICB\nDSDBSHR  EQU   X'08'         - SHARED\nDSDBALTI EQU   X'04'         - ALTERI REQ. ARE BACKED-UP\nDSDBDAT  EQU   X'02'         - IN-STOR. BLOCKS CAN BE DATA BLOCKS\nDSDBNREC DS    XL2    118    # RECORDS/TRK BACKUP DS\nDSDBRXNO DS    XL1    120    # IN-STOR. BUFS/INDX BLKS\nDSDBDSN  DS    CL44   121    DSN OF BACKUP DATASET\nDSDBDSNO DS    XL1    165    DATA SET SEQ. #\n         DS    XL2\nDSDE     DS    CL80          OTHER ENTRIES\n         AIF   ('&LIST' EQ 'YES').MEND\n         POP   PRINT\n.MEND    MEND\n         ICHDSDT\n         PRINT NOGEN\n         TITLE 'PAS - DSECT'\n         IHAPSA\n         TITLE 'ASCB - DSECT'\n         IHAASCB\n         TITLE 'ASXB - DSECT'\n         IHAASXB\n         TITLE 'ACEE - DSECT'\n         PRINT GEN\n         IHAACEE\n         PRINT NOGEN\n         TITLE ' UCB - DSECT'\n         IEFUCBOB LIST=NO,PREFIX=YES\n         TITLE ' SMF\"S IEESMCA - DSECT'\n         IEESMCA\n         REGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFST#": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE022"}, "text": "//RACFST# JOB (000000,YOUR STUFF)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE RACFST CODE.      *\n//*                                                                   *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=4M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(RACFST),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(0,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSLMOD  DD  DSN=LINKLIB(RACFST),DISP=SHR\n//* TEST RUN IT\n//RACFST  EXEC PGM=RACFST,COND=(0,LT)\n//STEPLIB  DD  DSN=*.LKED.SYSLMOD,DISP=SHR\n//SYSOUT   DD  SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00!\\x00!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n         REGS    &NAME=R,&NUM=15,&COND=NO\n.*\n.* THIS IS A MACRO USED FOR EQUATING REGISTERS OR LENGTHS\n.*      IE.  'REGS R=L,NUM=30'\n.*           TO PRODUCE L1-L30 EQUATES\n.*\n         LCLA  &N\n&N       SETA  0\n.LOOP    ANOP\n&NAME.&N     EQU    &N\n&N       SETA  &N+1\n         AIF   (&N LT &NUM+1).LOOP\n         AIF   ('&COND' NE 'YES').MEND\n*----------------------  BRANCH CONDITION CODES  ---------------------*\nO        EQU   1 .   ONES/OVERFLOW                                    *\nH        EQU   2 .   HIGH                                             *\nP        EQU   2 .   POSITIVE/PLUS                                    *\nL        EQU   4 .   LOW                                              *\nM        EQU   4 .   MIXED/MINUS                                      *\nNE       EQU   7 .   NOT EQUAL                                        *\nNZ       EQU   7 .   NOT ZERO                                         *\nE        EQU   8 .   EQUAL                                            *\nZ        EQU   8 .   ZERO                                             *\nHE       EQU   11 .  HIGH OR EQUAL                                    *\nNL       EQU   11 .  NOT LOW                                          *\nNM       EQU   11 .  NOT MIXED/MINUS                                  *\nLE       EQU   13 .  LOW OR EQUAL                                     *\nNH       EQU   13 .  NOT HIGH                                         *\nNP       EQU   13 .  NOT POSITIVE/PLUS                                *\nNO       EQU   14 .  NOT ONES/OVERFLOW                                *\n*---------------------------------------------------------------------*\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGSX": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE022"}, "text": "R0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RESCUE": {"ttr": 4110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x04\\xd9\\x04\\xd9\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 1241, "newlines": 1241, "modlines": 0, "user": "FILE022"}, "text": "          MACRO\n          RESCUE &JOBNAME=RESCUE,                                      X\n               &JOBCLASS=A,                                            X\n               &JOBACCT='ACCTING,INFO',                                X\n               &JOBPROGM=PROGRAMMER,                                   X\n               &JOBMSGCL=X,                                            X\n               &NOTIFY=SYS1,                                           X\n               &TYPRUN=,                                               X\n               &CATALOG=CATALOG.RESCUE,                                X\n               &COMMAND=N,                                             X\n               &CMDPROC='SYS1.CMDPROC',                                X\n               &MASTRCAT=CATALOG.MVSICFM.VMVSCAT,                      X\n               &MASTRPW=MASTER,                                        X\n               &MCATVOL=MVSCAT,                                        X\n               &NCP=Y,                                                 X\n               &IPLTXT1=SYS1.SAMPLIB(IPLRECS),                         X\n               &IPLTXT2=SYS1.SAMPLIB(IEAIPL00),                        X\n               &VOLUME=RESCUE,                                         X\n               &DEVT=3380,                                             X\n               &OWNER=RESCUE,                                          X\n               &ICF=Y,                                                 X\n               &RACF=Y,                                                X\n               &RENAME=N,                                              X\n               &ISPFUSR1=SYS1,                                         X\n               &ISPFUSR2=TECH,                                         X\n               &SYSID=IPO1,                                            X\n               &SYS1=SYS1,                                             X\n               &SYSX=SYSX,                                             X\n               &SYSRES=MVSRES,                                         X\n               &TAPEUNIT=TAPE,                                         X\n               &TPDSN=SADPGM,                                          X\n               &TPVOL=RESCUT,                                          X\n               &TMS=Y,                                                 X\n               &UNITADR=1C3,                                           X\n               &VTAMLIB=VTAMLIB,                                       X\n               &VTAMLST=VTAMLST,                                       X\n               &ICKSADSF=SYS1.SAMPLIB,                                 X\n               &ADRDMPRS=SYS1.SAMPLIB,                                 X\n               &LIST=Y\n.**********************************************************************\n.*                                                                    *\n.*     MACRO: RESCUE                                                  *\n.*                                                                    *\n.*  FUNCTION: CREATE 5 JOB STREAMS THAT WILL CREATE A ONE PACK        *\n.*            IPL'ABLE SYSTEM, INCLUDING A MASTER CATALOG,            *\n.*            PAGE, SYS1.MANXX, STAGEINDX, AND ALL IPL RELATED        *\n.*            DATASETS FROM YOUR CURRENT SYSTEM.                      *\n.*            THE USER CAN OPTIONALLY CREATE ISPF-USER'S BY COPYING   *\n.*            THEIR CURRENT PROFILES TO NEW ONES.                     *\n.*                                                                    *\n.*  OPERANDS: DEFAULTS ARE LISTED ...                                 *\n.*                                                                    *\n.*   JOBNAME='RESCUE'                   ** JOB NAME                   *\n.*   JOBCLASS='A'                       ** JOB EXEC CLASS             *\n.*   JOBACCT='ACCTING,INFO'             ** ACCOUNTING INFORMATION     *\n.*   JOBPROGM='PROGRAMMER NAME'         ** PROGRAMMER NAME FIELD      *\n.*   JOBMSGCL='X'                       ** MSGCLASS                   *\n.*   NOTIFY='SYS1'                      ** NOTIFY=                    *\n.*   CATALOG='CATALOG.RESCUE'           ** RESCUE                     *\n.*   COMMAND=N                          ** IF PGM=COMMAND INSTALLED   *\n.*                                         ISSUES SVC 34'S            *\n.*   CMDPROC='SYS1.CMDPROC'             ** CLIST LIBRARY              *\n.*   MASTRCAT='CATALOG.MVSICFM.VMVSCAT' ** CURRENT MASTER CATALOG     *\n.*   MASTRPSW='MASTER',                 ** MASTER CATALOG PASSWORD    *\n.*   MCATVOL='MVSCAT',                  ** MASTER CATALOG VOLUME      *\n.*   NCP=Y                              ** IF NCP AND SSCPLIBS EXIST  *\n.*   IPLTXT1='SYS1.SAMPLIB(IPLRECS)'    ** IPL TEXT DATASET           *\n.*   IPLTXT2='SYS1.SAMPLIB(IEAIPL00)'   **     \"                      *\n.*   VOLUME='RESCUE'                    ** VOLSER OF RESCUE PACK      *\n.*   DEVT='3380'                        ** DEVICE TYPE OF RESCUE PACK *\n.*   OWNER='RESCUE PACK'                ** OWNER NAME                 *\n.*   ICF='Y'                            ** IS NEW MASTER CATALOG ICF? *\n.*   RACF='Y'                           ** IS RACF ACTIVE             *\n.*   RENAME=N                           ** WHETHER SYSX TO SYS1 ??    *\n.*   ISPFUSR1='SYS1'                    ** ISPFUSER 1                 *\n.*   ISPFUSR2='TECH'                    ** ISPFUSER 2                 *\n.*   SYSID=IPO1                         ** SYSTEM ID                  *\n.*   SYS1='SYS1'                        ** NEW HIGH-LEVEL QUALIFIER   *\n.*   SYSX='SYSX'                        ** TEMP HIGH-LEVEL QUALIFIER  *\n.*   SYSRES='MVSRES'                    ** CURRENT SYSTEM RESIDENCE   *\n.*   TAPEUNIT='TAPE'                    ** SA/DUMP UNITTYPE           *\n.*   TPDSN='SADPGM'                     ** SA/DUMP DSN                *\n.*   TPVOL='RESCUT'                     ** SA/DUMP VOLSER             *\n.*   TMS='Y'                            ** IF TMS IS ACTIVE           *\n.*   UNITADR=1C3                        ** UNIT ADDRESS OF RESCUE VOL *\n.*   VTAMLIB='VTAMLIB'                  ** SUFFIX FOR VTAM-LIB        *\n.*   VTAMLST='VTAMLST'                  ** SUFFIX FOR VTAM-LST        *\n.*   ICKSADSF='SYS1.SAMPLIB'            ** WHERE SA/ICKDSF IS         *\n.*   ADRDMPRS='SYS1.SAMPLIB'            ** WHERE SA/DUMP TEXT IS      *\n.*   LIST=YES                           ** USUAL LIST OPTION          *\n.*                                                                    *\n.*  CHANGE SECTION:   08/86  - CREATED                                *\n.*                    05/87  - UPDATED FOR LINE ADJUSTMENTS           *\n.*                                                                    *\n.*  EXECUTION RECCOMENDATIONS:  TRY EXEC W/O ANY OPERANDS             *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*                 VARIABLE DEFINITION SECTION                        *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n         LCLC   &I,&P,&MN,&TYPRN\n         LCLA   &A,&LCAT\n         LCLB   &B,&RACFLG,&ICFLG,&TMSFLG       FLAGS\n         GBLB   &ISSUE\n         AIF    (&ISSUE).ERR1\n&ISSUE   SETB   1\n&I       SETC   '&SYSNDX'\n&MN      SETC   ' MNOTE'\n         AIF    (K'&TYPRUN  EQ 0).SKIPTYP\n&TYPRN   SETC   ',TYPRUN=&TYPRUN'\n.SKIPTYP ANOP\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*                     VERIFICATION SECTION                           *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n         AIF    (K'&JOBNAME  GT 7).ERR2         JOBNAME > 7 CHARS\n         AIF    (K'&JOBCLASS NE 1).ERR3         JOBCLASS\u00ac=1 CHARS\n         AIF    (K'&JOBACCT  GT 30).ERR4        ACCOUNT > 16 CHARS\n         AIF    (K'&JOBPROGM GT 20).ERR5        PROG NAME>20 CHARS\n         AIF    (K'&JOBMSGCL NE 1).ERR6         MSGCLASS\u00ac=1 CHARS\n.*                                              NOTIFY>7 CHARS\n         AIF    (K'&NOTIFY GT 7 AND K'&NOTIFY NE 0).ERR7\n         AIF    (K'&CATALOG  GT 44).ERR8         LENGTH(CATALOG) > 44\n         AIF    (K'&MASTRCAT GT 44).ERR9         LENGTH(MCAT)    > 44\n.*                                               PASWWORD(MCAT) >8\n         AIF    (K'&MASTRPW  GT 8 AND K'&MASTRPW NE 0).ERR10\n         AIF    (K'&IPLTXT1 EQ  0).ERR11         NO IPL TEXT !!\n         AIF    (K'&VOLUME  NE  6).ERR12         LENGTH VOLSER \u00ac= 8\n         AIF    (K'&DEVT    EQ  0).ERR13         DEVT NOT THERE\n         AIF    ('&ICF'     NE 'Y').ICFNSET      SET ICF FLAG\n&ICFLG   SETB   1\n.ICFNSET AIF    ('&RACF'    NE 'Y').RACFNSET     SET RACF FLAG\n&RACFLG  SETB   1\n.RACFNSET ANOP\n         AIF    (K'&SYS1   EQ  0).ERR14         NO HIGH-LEVEL QUALIFIER\n         AIF    (K'&SYSX  EQ  0).ERR15         NO HIGH-LEVEL QUALIFIER\n         AIF    (K'&SYSRES NE  6).ERR16         SYSRES NOT RIGHT\n         AIF    (K'&ICKSADSF EQ  0).ERR17         NO SA/ICKDSF\n         AIF    (K'&ADRDMPRS EQ  0).ERR18         NO SA/DUMP TEXT\n         AIF    (K'&TPDSN    EQ  0).ERR19         NO TAPE DSN\n         AIF    (K'&SYSID    NE  4).ERR21         SYSTEM ID NOT 4\n         AIF    (K'&TPVOL    EQ  0).ERR20         NO TAPE VOLSER\n         AIF    (K'&UNITADR  EQ  0).ERR22         NO UNITADDRESS\n         AIF    ('&TMS'      NE  'Y').NOTSM       SET 'TMS' FLAG\n&TMSFLG  SETB   1\n.NOTSM   ANOP\n         PUSH   PRINT\n         AIF    ('&LIST'     EQ  'Y').LISTM\n         PRINT  OFF\n.LISTM   ANOP\n         AGO    .PROCESS\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*                       ERROR   SECTION                              *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.ERR1    MNOTE  8,'MACRO HAS BEEN ISSUED BEFORE, WHY ISSUE IT AGAIN?'\n         AGO    .MEND\n.ERR2    MNOTE  8,'JOB NAME > 7 CHARS: JOBNAME=&JOBNAME'\n         AGO    .MEND\n.ERR3    MNOTE  8,'JOB CLASS >1: JOBCALSS=&JOBCALSS'\n         AGO    .MEND\n.ERR4    MNOTE  8,'JOB ACCOUNTING INFO > 30'\n         AGO    .MEND\n.ERR5    MNOTE  8,'PROGRAMMER NAME FIELD>20'\n         AGO    .MEND\n.ERR6    MNOTE  8,'JOB MSGCLASS INVALID: JOBMSGCL=&JOBMSGCL'\n         AGO    .MEND\n.ERR7    MNOTE  8,'JOB NOTIFY INVALID: NOTIFY=&NOTIFY'\n         AGO    .MEND\n.ERR8    MNOTE  8,'TARGET CATALOG INVALID: CATALOG=&CATALOG'\n         AGO    .MEND\n.ERR9  MNOTE  8,'LENGTH OF MASTER CATALOG IN VALID: MASTRCAT=&MASTRCAT'\n         AGO    .MEND\n.ERR10   MNOTE  8,'MASTER CATALOG PASSWORD INVALID: MASTRPW=&MASTERPW'\n         AGO    .MEND\n.ERR11   MNOTE  8,'MISSING IPL TEXT: IPLTXT1'\n         AGO    .MEND\n.ERR12   MNOTE  8,'MISSING TARGET VOLUME: VOLUME'\n         AGO    .MEND\n.ERR13   MNOTE  8,'MISSING DEVICE TYPE SPECIFICATION: DEVT'\n         AGO    .MEND\n.ERR14   MNOTE  8,'INVALID OR MISSING HIGH-LEVEL QUALIFIER FOR'\n         MNOTE  8,'NEW ALLOCATION OF DATASETS: SYS1=&SYS1'\n         AGO    .MEND\n.ERR15   MNOTE  8,'INVALID OR MISSING HIGH-LEVEL QUALIFIER FOR'\n         MNOTE  8,'INITIAL ALLOCATION OF DATASETS: SYSX=&SYSX'\n         AGO    .MEND\n.ERR16   MNOTE  8,'NO OR INVALID SYSRES PROVIDED: SYSRES=&SYSRES'\n         AGO    .MEND\n.ERR17   MNOTE  8,'NO STANDALONE ICKDSF TEXT PROVIDED BY: ICKSADSF='\n         AGO    .MEND\n.ERR18   MNOTE  8,'NO STANDALONE DUMP TEXT PROVIDED BY: ADRDMPRS='\n         AGO    .MEND\n.ERR19   MNOTE  8,'NO TAPE DATASET NAME SPECIFIED BY: TPDSN='\n         AGO    .MEND\n.ERR20   MNOTE  8,'NO TAPE VOLSER WAS ENTERED BY: TPVOL='\n         AGO    .MEND\n.ERR21   MNOTE  8,'SYSTEM ID INCORRECT: SYSID = &SYSID'\n         AGO    .MEND\n.ERR22   MNOTE  8,'UNIT ADDRESS NOT SPECIFIED: UNITADR = &UNITADR '\n         AGO    .MEND\n.*\n.* PROCESS SECTION\n.*\n.PROCESS ANOP\n.*--------------------------------------------------------------------*\n.*    START OF JCL                                                    *\n.*--------------------------------------------------------------------*\n PUNCH '//*   AUTHOR = MARK V. HEDGES -                               '\n PUNCH '//*            ADRIA LABORATORIES                             '\n PUNCH '//*            7001 POST ROAD                                 '\n PUNCH '//*            DUBLIN, OHIO 43065                             '\n PUNCH '//*            (614) 764-8175           P.T.L.                '\n PUNCH '//&JOBNAME.0 JOB ('&JOBACCT'),''&JOBPROGM'',          '\n         AIF    (K'&NOTIFY EQ 0).SKIPNO0\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.,'\n PUNCH '//           NOTIFY=&NOTIFY'\n         AGO  .OVER0\n.SKIPNO0  ANOP\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN'\n.OVER0   ANOP\n PUNCH '//*---------------------------------------------------------* '\n PUNCH '//* JOB: &JOBNAME.0                                           '\n PUNCH '//* USE: TO INITALIZE THE VOLUME=&VOLUME ON UNIT=&UNITADR     '\n PUNCH '//*                                                           '\n PUNCH '//*     _STEPS_   __________ FUNCTION _____________________   '\n PUNCH '//*     EXPDISC   EXPORT-DISCONNECT OLD USERCATALOG           '\n         AIF   ('&COMMAND' EQ 'N').NCMD0\n PUNCH '//*     VARYOFF   VARY DEVICE OFFLINE                         '\n.NCMD0   ANOP\n PUNCH '//*     INITVOL   INITIALIZE DISK VOLUME USING ICKDSF         '\n PUNCH '//*---------------------------------------------------------* '\n PUNCH '//EXPDISC  EXEC  PGM=IDCAMS,REGION=1024K                      '\n PUNCH '//SYSPRINT  DD   SYSOUT=*                                     '\n PUNCH '//SYSIN     DD   *                                            '\n PUNCH '   EXPORT                                              -      '\n PUNCH '         &CATALOG  -'\n PUNCH '          DCON                                                '\n PUNCH '                                                              '\n PUNCH '   SET MAXCC=0                                                '\n PUNCH '//*---------------------------------------------------------- '\n PUNCH '//*    DEMOUNT THE VOLUME &VOLUME ON UNIT ADDRESS &UNITADR    '\n PUNCH '//*    BEFORE RELEASING THIS TASK                             '\n PUNCH '//*---------------------------------------------------------- '\n         AIF   ('&COMMAND' EQ 'N').NCMD1\n PUNCH '//VARYOFF EXEC PGM=COMMAND,                                   '\n PUNCH '//   PARM=''V &UNITADR,OFFLINE''                              '\n PUNCH '//DEALLOC EXEC PGM=COMMAND,                                   '\n PUNCH '//   PARM=''S DEALLOC''                                       '\n         AGO  .IVOL1\n.NCMD1   ANOP\n PUNCH '//*  V &UNITADR,OFFLINE                                       '\n.IVOL1   ANOP\n PUNCH '//INITVOL  EXEC PGM=ICKDSF                                    '\n PUNCH '//*                                                           '\n PUNCH '//* NOTE THE FOLLOWING CONCATINATION                          '\n PUNCH '//*                                                           '\n PUNCH '//IPLTEXT  DD  DISP=SHR,VOL=SER=&SYSRES,UNIT=SYSDA,           '\n PUNCH '//             DSN=&IPLTXT1 '\n         AIF (K'&IPLTXT2  EQ 0).SKIPL2\n PUNCH '//         DD  DISP=SHR,VOL=SER=&SYSRES,UNIT=SYSDA,           '\n PUNCH '//             DSN=&IPLTXT2 '\n.SKIPL2  ANOP\n PUNCH '//SYSPRINT DD   SYSOUT=*                                      '\n PUNCH '//SYSIN    DD   *                                             '\n PUNCH ' INIT   UNIT(&UNITADR)                                   -    '\n PUNCH '        VOLID(&VOLUME)                                   -    '\n PUNCH '        OWNERID(&OWNER)                                  -    '\n PUNCH '        VTOC(0,1,14)                                     -    '\n PUNCH '        PURGE                                            -    '\n PUNCH '        MAP                                              -    '\n PUNCH '        OWNER(ADR)                                       -    '\n PUNCH '      VERIFY(&VOLUME) /* VOLUME MUST BE LABLED */        -    '\n PUNCH '        NOVALIDATE                                       -    '\n PUNCH '        NOCHECK                                               '\n PUNCH '      IPLDD(IPLTEXT)                                        - '\n PUNCH '      NOBOOTSTRAP /* ICKDSF WILL SUPPLY IT */                 '\n PUNCH '/*                                                            '\n PUNCH '//*---------------------------------------------------------- '\n PUNCH '//*    A MOUNT FOR UNIT=&UNITADR FOR VOLUME=&VOLUME MUST      '\n PUNCH '//*    BE ISSUED BEFORE OTHER JOBS SUBMITTED                  '\n PUNCH '//*---------------------------------------------------------- '\n         AIF   ('&COMMAND' EQ 'N').NCMD2\n PUNCH '//MOUNT  EXEC PGM=COMMAND,COND=(0,LT),                        '\n PUNCH '//       PARM=''M &UNITADR,VOL=(SL,&VOLUME),USE=PRIVATE''    '\n         AGO  .NEXT0\n.NCMD2   ANOP\n PUNCH '//*  M &UNITADR,VOL=(SL,&VOLUME),USE=PRIVATE                  '\n.NEXT0   ANOP\n PUNCH '//                                                            '\n PUNCH '//&JOBNAME.1 JOB ('&JOBACCT'),''&JOBPROGM'',          '\n         AIF    (K'&NOTIFY EQ 0).SKIPNOT\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.,'\n PUNCH '//           NOTIFY=&NOTIFY'\n         AGO  .OVER1\n.SKIPNOT ANOP\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN'\n.OVER1   ANOP\n PUNCH '//*---------------------------------------------------------* '\n PUNCH '//* JOB: &JOBNAME.1                                           '\n PUNCH '//* USE: CREATE A VOLUME VOLSER(&VOLUME) THAT WILL CONTAIN    '\n PUNCH '//*      ALL THE NECESSARY DATASETS FOR AN IPL                '\n PUNCH '//*                                                           '\n PUNCH '//*     _STEPS_   __________ FUNCTION _____________________   '\n PUNCH '//*     DEFMCAT   DEFINE A MASTER CATALOG                     '\n PUNCH '//*     DEFVSAM   DEFINE ALL NECESSARY VSAM FILES             '\n PUNCH '//*     DEFNVSAM  DEFINE ALL NECESSARY NON-VSAM FILES         '\n PUNCH '//*               AND IMPORT THE CATALOG AS A UCAT TO THE MCAT'\n PUNCH '//*----------------------------------------------------------*'\n PUNCH '//*                                                           '\n PUNCH '//*                                                           '\n PUNCH '//DEFMCAT  EXEC PGM=IDCAMS,REGION=2048K,COND=(0,LT)           '\n PUNCH '//SYSPRINT  DD   SYSOUT=*                                     '\n PUNCH '//TARGET    DD   DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME          '\n PUNCH '//SYSIN     DD   *                                            '\n          AIF   (&ICFLG EQ 0).SKIPICF\n PUNCH ' DELETE                                                     - '\n PUNCH '         &SYS1..VVDS.V&VOLUME                               - '\n PUNCH '           FILE(TARGET)                                     - '\n PUNCH '           CLUSTER                                          - '\n PUNCH '           PURGE                                            - '\n PUNCH '       CATALOG(&MASTRCAT./&MASTRPW); '\n PUNCH '                                                              '\n PUNCH ' SET MAXCC=0                                                  '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                     - '\n PUNCH '  CLUSTER (                                                 - '\n PUNCH '           NAME( &SYS1..VVDS.V&VOLUME )                     - '\n PUNCH '           CYL(1,1)                                         - '\n PUNCH '           VOL(&VOLUME)                                     - '\n PUNCH '           FILE(TARGET)                                     - '\n PUNCH '           NONINDEXED                                       - '\n PUNCH '           OWNER(&OWNER)                                    - '\n PUNCH '         )                                                  - '\n PUNCH '       CATALOG(&MASTRCAT./&MASTRPW); '\n.SKIPICF  ANOP\n PUNCH ' DEFINE                                                     - '\n PUNCH '       MASTERCATALOG (                                      - '\n PUNCH '                       NAME( &CATALOG )      - '\n PUNCH '                       CYL(10 2)                           -'\n PUNCH '                       VOL(&VOLUME)                        -'\n PUNCH '                       ATTEMPTS(2)                         -'\n PUNCH '                       BUFFERSPACE(8192)                   -'\n PUNCH '                       BUFND(10)                           -'\n PUNCH '                       BUFNI(10)                           -'\n PUNCH '                       FILE(TARGET)                        -'\n          AIF   (&ICFLG EQ 0).SKIPICF2\n PUNCH '                       ICFCATALOG                          -'\n.SKIPICF2 ANOP\n PUNCH '                       OWNER(&OWNER)                       -'\n PUNCH '                       STRNO(9)                            -'\n PUNCH '                      )                                    -'\n PUNCH '       CATALOG(&MASTRCAT./&MASTRPW);  '\n PUNCH '//*                                                           '\n PUNCH '//DEFVSAM  EXEC PGM=IDCAMS,REGION=2048K,COND=(0,LT)           '\n PUNCH '//STEPCAT DD  DSN=&CATALOG,DISP=SHR'\n PUNCH '//SYSPRINT DD SYSOUT=*                                        '\n PUNCH '//TARGET DD   DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME             '\n PUNCH '//SYSIN  DD   *                                               '\n PUNCH ' DEFINE                                                    -'\n PUNCH '       CLUSTER (                                           -'\n PUNCH '                 NAME( &SYS1..STGINDEX )                   -'\n PUNCH '                 CYL(5)                                    -'\n PUNCH '                 VOL(&VOLUME)                              -'\n PUNCH '                 BUFFERSPACE(20480)                        -'\n PUNCH '                 FILE(TARGET)                              -'\n PUNCH '                 KEYS(12 8)                                -'\n PUNCH '                 OWNER(&OWNER)                             -'\n PUNCH '                 RECORDSIZE(2041,2041)                     -'\n PUNCH '                 REUSE                                     -'\n PUNCH '               )                                           -'\n PUNCH '       DATA (                                              -'\n PUNCH '                 NAME( &SYS1..STGINDEX.DATA )              -'\n PUNCH '                      CISZ(2048)                           -'\n PUNCH '            )                                              -'\n PUNCH '       INDEX (                                             -'\n PUNCH '                 NAME( &SYS1..STGINDEX.INDEX )             -'\n PUNCH '                      CISZ(1024)                           -'\n PUNCH '             )                                             -'\n PUNCH '  CATALOG(&CATALOG);  '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                    -'\n PUNCH '        PAGESPACE (                                        -'\n PUNCH '                     NAME( &SYS1..&VOLUME..PLPA)           -'\n PUNCH '                           CYL(16)                         -'\n PUNCH '                           VOL(&VOLUME)                    -'\n PUNCH '                           FILE(TARGET)                    -'\n PUNCH '                           OWNER(&OWNER)                   -'\n PUNCH '                           NOSWAP                          -'\n PUNCH '                           UNIQUE                          -'\n PUNCH '                   )                                       -'\n PUNCH '  CATALOG(&CATALOG); '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                    -'\n PUNCH '        PAGESPACE (                                        -'\n PUNCH '                     NAME( &SYS1..&VOLUME..COMMON )        -'\n PUNCH '                           CYL(6)                          -'\n PUNCH '                           VOL(&VOLUME)                    -'\n PUNCH '                           FILE(TARGET)                    -'\n PUNCH '                           OWNER( RESCUE )                 -'\n PUNCH '                           NOSWAP                          -'\n PUNCH '                           UNIQUE                          -'\n PUNCH '                   )                                       -'\n PUNCH '  CATALOG(&CATALOG);  '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                    -'\n PUNCH '        PAGESPACE (                                        -'\n PUNCH '                   NAME( &SYS1..&VOLUME..LOCAL1 )          -'\n PUNCH '                          CYL(30)                          -'\n PUNCH '                           VOL(&VOLUME)                    -'\n PUNCH '                           FILE(TARGET)                    -'\n PUNCH '                           OWNER(&OWNER)                   -'\n PUNCH '                           NOSWAP                          -'\n PUNCH '                           UNIQUE                          -'\n PUNCH '                  )                                        -'\n PUNCH '  CATALOG(&CATALOG); '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                    -'\n PUNCH '        CLUSTER (                                          -'\n PUNCH '                  NAME( &SYS1..MAN1 )                      -'\n PUNCH '                       CYL(5)                              -'\n PUNCH '                       VOL(&VOLUME)                        -'\n PUNCH '                       CISZ(4096)                          -'\n PUNCH '                       FILE(TARGET)                        -'\n PUNCH '                       NONINDEXED                          -'\n PUNCH '                       OWNER( RESCUE )                     -'\n PUNCH '                       RECORDSIZE(4086 32767)              -'\n PUNCH '                       REUSE   SHR(2 3)  SPANNED  SPEED    -'\n PUNCH '                 )                                         -'\n PUNCH '         DATA (                                            -'\n PUNCH '                 NAME( &SYS1..MAN1)                        -'\n PUNCH '              )                                            -'\n PUNCH '  CATALOG(&CATALOG); '\n PUNCH '                                                              '\n PUNCH ' DEFINE                                                    -'\n PUNCH '        CLUSTER (                                          -'\n PUNCH '                  NAME( &SYS1..MAN2 )                      -'\n PUNCH '                       CYL(5)                              -'\n PUNCH '                       VOL(&VOLUME)                        -'\n PUNCH '                       CISZ(4096)                          -'\n PUNCH '                       FILE(TARGET)                        -'\n PUNCH '                       NONINDEXED                          -'\n PUNCH '                       OWNER( RESCUE )                     -'\n PUNCH '                       RECORDSIZE(4086 32767)              -'\n PUNCH '                       REUSE   SHR(2 3)  SPANNED  SPEED    -'\n PUNCH '                 )                                         -'\n PUNCH '         DATA (                                            -'\n PUNCH '                 NAME( &SYS1..MAN2)                        -'\n PUNCH '              )                                            -'\n PUNCH '  CATALOG(&CATALOG); '\n PUNCH '                                                              '\n PUNCH '  LISTCAT  CAT(&CATALOG) ALL  '\n PUNCH '                                                              '\n PUNCH '                                                              '\n PUNCH '//DEFNVSAM EXEC PGM=IDCAMS,REGION=3096K,COND=(0,LT)           '\n PUNCH '//STEPCAT   DD  DSN=&CATALOG,DISP=SHR '\n PUNCH '//SYSPRINT  DD  SYSOUT=*                                      '\n PUNCH '//SYSIN     DD  *                                             '\n PUNCH ' DEF NVSAM (NAME(PASSWORD                    ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..BRODCAST            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&CMDPROC)        OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..CMDLIB              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..DAE                 ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..DUMP00              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..DUMP01              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..DCMLIB              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..HASPACE             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..HASPCKPT            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG);  '\n PUNCH ' DEF NVSAM (NAME(&SYS1..HASPINDX            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..HELP                ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..IMAGELIB            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..LINKLIB             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n           AIF    (&RACFLG EQ 0).SKIPRACF\n PUNCH ' DEF NVSAM (NAME(&SYS1..RACF                ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n.SKIPRACF  ANOP\n PUNCH ' DEF NVSAM (NAME(&SYS1..LOGREC              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..LPALIB              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG);  '\n PUNCH ' DEF NVSAM (NAME(&SYS1..MACLIB              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..NUCLEUS             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG);  '\n PUNCH ' DEF NVSAM (NAME(&SYS1..PAGEDUMP            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..PARMLIB             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..PROCLIB             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..SVCLIB              ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..TELCMLIB            ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..UADS                ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&SYS1..VTAMLIB             ) OWNER(&OWNER) -'\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&ISPFUSR1..ISPF.ISPPROF   ) OWNER(&OWNER) - '\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH ' DEF NVSAM (NAME(&ISPFUSR2..ISPF.ISPPROF   ) OWNER(&OWNER) - '\n PUNCH ' DEVT(0000) VOL(******))   CAT(&CATALOG); '\n PUNCH '                                                            '\n PUNCH ' IMPORT  CONNECT                                           -'\n PUNCH '         OBJECTS(                                          -'\n PUNCH '         (&MASTRCAT.   -'\n PUNCH '         VOLUME (&MCATVOL)                                 -'\n PUNCH '         DEVICETYPE(&DEVT)))                               -'\n PUNCH '         CATALOG(&CATALOG) '\n PUNCH '                                                              '\n PUNCH '  LISTC CATALOG(&CATALOG) NONVSAM  ALL     '\n PUNCH '                                                              '\n PUNCH '/*                                                            '\n PUNCH '//&JOBNAME.2 JOB ('&JOBACCT'),''&JOBPROGM'',          '\n         AIF    (K'&NOTIFY EQ 0).SKIPNO1\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.,'\n PUNCH '//           NOTIFY=&NOTIFY                         '\n         AGO  .OVER2\n.SKIPNO1 ANOP\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.'\n.OVER2   ANOP\n PUNCH '//*---------------------------------------------------------*'\n PUNCH '//* JOB: &JOBNAME.2                                         *'\n PUNCH '//* USE: CREATE A VOLUME VOLSER(&VOLUME) THAT WILL CONTAIN  *'\n PUNCH '//*      ALL THE NECESSARY DATASETS FOR AN IPL              *'\n PUNCH '//*                                                         *'\n PUNCH '//*  _STEPS_   __________ FUNCTION _____________________    *'\n PUNCH '//*   ALLOC     ALLOCATES ALL NEEDED DATASETS ON VOLUME     *'\n PUNCH '//*  LOAD#01    COPIES CURRENT LIBRARIES TO NEW             *'\n PUNCH '//*  LOAD#02    COPIES USER LIBRARIES TO NEW                *'\n PUNCH '//*  LOAD#03    COPIES VTAM LIBRARIES TO NEW                *'\n PUNCH '//*  IEBUPDTE   CREATES A JES2 PROC ON PROCLIB              *'\n PUNCH '//*  IEBUPDT2   CREATES AN \"IEASYS99\" MEMBER IN PARMLIB     *'\n PUNCH '//*  GENER      MODS \"LIST\" AND \"LOG\" COMMANDS ONTO JES2PARM*'\n PUNCH '//*  BRODCAST   ISSUE \"SYNC\" COMMAND VSAM FILES             *'\n PUNCH '//*---------------------------------------------------------*'\n PUNCH '//ALLOC   EXEC PGM=IEFBR14,REGION=1024K                      '\n PUNCH '//IPLTEXT  DD   DISP=(,KEEP),DSN=&SYSX..IPLTEXT,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(TRK,29)         '\n PUNCH '//LINKLIB  DD   DISP=(,KEEP),DSN=&SYSX..LINKLIB,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(55,00,551)),'\n PUNCH '//         DCB=(&SYS1..LINKLIB)                              '\n PUNCH '//LOGREC   DD   DISP=(,KEEP),DSN=&SYSX..LOGREC,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(4)),       '\n PUNCH '//         DCB=(&SYS1..LOGREC)                               '\n PUNCH '//CMDLIB   DD   DISP=(,KEEP),DSN=&SYSX..CMDLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(03,00,091)),'\n PUNCH '//         DCB=(&SYS1..CMDLIB)                               '\n PUNCH '//CMDPROC  DD  DISP=(,KEEP),DSN=&SYSX..CMDPROC,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(03,00,091)),'\n PUNCH '//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PO)     '\n PUNCH '//DUMP00   DD  DISP=(,KEEP),DSN=&SYSX..DUMP00,               '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,10),        '\n PUNCH '//         DCB=(&SYS1..DUMP00)                               '\n PUNCH '//DUMP01   DD   DISP=(,KEEP),DSN=&SYSX..DUMP01,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,10),        '\n PUNCH '//         DCB=(&SYS1..DUMP01)                               '\n         AIF ('&NCP' EQ 'N').NCP0\n PUNCH '//NCPDUMP  DD  DISP=(,KEEP),DSN=&SYSX..NCPDUMP,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(20,1)),    '\n PUNCH '//         DCB=(RECFM=F,LRECL=512,BLKSIZE=512)               '\n PUNCH '//NCPLIB   DD   DISP=(,KEEP),DSN=&SYSX..NCPLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(04,00,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//SSPLIB   DD   DISP=(,KEEP),DSN=&SYSX..SSPLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(04,00,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n.NCP0   ANOP\n PUNCH '//VTAMLIB  DD  DISP=(,KEEP),DSN=&SYSX..VTAMLIB,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(04,00,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//DAE      DD  DISP=(,KEEP),DSN=&SYSX..DAE,                  '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01,01)),   '\n PUNCH '//         DCB=(RECFM=FB,LRECL=255,BLKSIZE=6120)             '\n PUNCH '//DCMLIB   DD  DISP=(,KEEP),DSN=&SYSX..DCMLIB,               '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01,01,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//HELP     DD  DISP=(,KEEP),DSN=&SYSX..HELP,                 '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(04,02,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//MACLIB   DD  DISP=(,KEEP),DSN=&SYSX..MACLIB,               '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(40,06,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//PASSWORD DD  DISP=(,KEEP),DSN=PASSWORD,                    '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01)),      '\n PUNCH '//         DCB=(RECFM=F,LRECL=80,BLKSIZE=80)                 '\n           AIF    (&RACFLG EQ 0).SKPRACF1\n PUNCH '//RACF     DD  DISP=(,KEEP),DSN=&SYSX..RACF,                 '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,                       '\n PUNCH '//         SPACE=(CYL,(02),,CONTIG),                         '\n PUNCH '//         DCB=&SYS1..RACF                                   '\n.SKPRACF1  ANOP\n PUNCH '//SVCLIB   DD  DISP=(,KEEP),DSN=&SYSX..SVCLIB,               '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(02,00,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//TELCMLIB DD  DISP=(,KEEP),DSN=&SYSX..TELCMLIB,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(03,00,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//LPALIB   DD  DISP=(,KEEP),DSN=&SYSX..LPALIB,               '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(20,00,413)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//NUCLEUS  DD  DISP=(,KEEP),DSN=&SYSX..NUCLEUS,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(13,0,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//SAMPLIB  DD  DISP=(,KEEP),DSN=&SYSX..SAMPLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(08,02,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//BRODCAST DD  DISP=(,KEEP),DSN=&SYSX..BRODCAST,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01)),      '\n PUNCH '//         DCB=(RECFM=F,LRECL=129,BLKSIZE=129)               '\n PUNCH '//IMAGELIB DD  DISP=(,KEEP),DSN=&SYSX..IMAGELIB,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01,01,091)),'\n PUNCH '//         DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)               '\n PUNCH '//PARMLIB  DD  DISP=(,KEEP),DSN=&SYSX..PARMLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(03,01,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//PROCLIB  DD  DISP=(,KEEP),DSN=&SYSX..PROCLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(01,01,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//UADS     DD  DISP=(,KEEP),DSN=&SYSX..UADS,                 '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(10,02,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=172,BLKSIZE=3096)             '\n PUNCH '//ISRCLIB  DD  DISP=(,KEEP),DSN=&SYSX..ISFCLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(4,1,45)),  '\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//ISPPLIB  DD  DISP=(,KEEP),DSN=&SYSX..ISFPLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(15,05,321)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//ISPMLIB  DD  DISP=(,KEEP),DSN=&SYSX..ISFMLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(15,05,137)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//ISPSLIB  DD  DISP=(,KEEP),DSN=&SYSX..ISFSLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(05,02,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//ISPTLIB  DD  DISP=(,KEEP),DSN=&SYSX..ISFTLIB,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(15,05,091)),'\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//ISPHELP  DD  DISP=(,KEEP),DSN=&SYSX..ISFHELP,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(2,1,045)), '\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//HASPCKPT DD  DISP=(,KEEP),DSN=&SYSX..HASPCKPT,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,4)          '\n PUNCH '//HASPACE  DD  DISP=(,KEEP),DSN=&SYSX..HASPACE,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,60)         '\n PUNCH '//HASPINDX DD  DISP=(,KEEP),DSN=&SYSX..HASPINDX,             '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,1),         '\n PUNCH '//         DCB=(RECFM=FB,LRECL=4096,BLKSIZE=4096)            '\n PUNCH '//VTAMLST  DD  DISP=(,KEEP),DSN=&SYSX..VTAMLST,         '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(10,5,91)), '\n PUNCH '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160)              '\n PUNCH '//PROF01   DD  DISP=(,KEEP),DSN=&SYSX..ISPF1.ISPPROF,        '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(1,1,45)),  '\n PUNCH '//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)     '\n PUNCH '//PROF02   DD  DISP=(,KEEP),DSN=&SYSX..ISPF2.ISPPROF,        '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME,SPACE=(CYL,(1,1,45)),  '\n PUNCH '//         DCB=(LRECL=80,BLKSIZE=3120,RECFM=FB,DSORG=PS)     '\n PUNCH '//LOAD#01  EXEC PGM=IEBCOPY,REGION=6096K                '\n PUNCH '//SYSPRINT DD   SYSOUT=*                                '\n PUNCH '//SYSUT3  DD   UNIT=SYSDA,SPACE=(CYL,(100,1))           '\n PUNCH '//SYSUT4  DD   UNIT=SYSDA,SPACE=(CYL,(50,1))            '\n PUNCH '//FCMDLIB DD   DISP=SHR,DSN=&SYS1..CMDLIB               '\n PUNCH '//FCMDPROC DD  DISP=SHR,DSN=&CMDPROC'\n PUNCH '//FDCMLIB DD   DISP=SHR,DSN=&SYS1..DCMLIB               '\n PUNCH '//FELCMLIB DD  DISP=SHR,DSN=&SYS1..TELCMLIB             '\n PUNCH '//FHELP   DD   DISP=SHR,DSN=&SYS1..HELP                 '\n PUNCH '//FIMAGLIB DD  DISP=SHR,DSN=&SYS1..IMAGELIB             '\n PUNCH '//FLINKLIB DD  DISP=SHR,DSN=&SYS1..LINKLIB              '\n PUNCH '//FLPALIB DD   DISP=SHR,DSN=&SYS1..LPALIB               '\n PUNCH '//FMACLIB DD   DISP=SHR,DSN=&SYS1..MACLIB               '\n PUNCH '//FNUCLEUS DD  DISP=SHR,DSN=&SYS1..NUCLEUS              '\n         AIF ('&NCP' EQ 'N').NCP2\n PUNCH '//FNCPLIB DD   DISP=SHR,DSN=&SYS1..NCPLIB               '\n PUNCH '//FSSPLIB DD   DISP=SHR,DSN=&SYS1..SSPLIB               '\n.NCP2   ANOP\n PUNCH '//FPARMLIB DD  DISP=SHR,DSN=&SYS1..PARMLIB              '\n PUNCH '//FPROCLIB DD  DISP=SHR,DSN=&SYS1..PROCLIB              '\n PUNCH '//FSAMPLIB DD  DISP=SHR,DSN=&SYS1..SAMPLIB              '\n PUNCH '//FSVCLIB DD   DISP=SHR,DSN=&SYS1..SVCLIB               '\n PUNCH '//*                                                     '\n PUNCH '//TCMDLIB DD   DISP=SHR,DSN=&SYSX..CMDLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TCMDPROC DD  DISP=SHR,DSN=&SYSX..CMDPROC,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TDCMLIB DD   DISP=SHR,DSN=&SYSX..DCMLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TELCMLIB DD  DISP=SHR,DSN=&SYSX..TELCMLIB,            '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//THELP   DD   DISP=SHR,DSN=&SYSX..HELP,                '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TIMAGLIB DD  DISP=SHR,DSN=&SYSX..IMAGELIB,            '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TLINKLIB DD  DISP=SHR,DSN=&SYSX..LINKLIB,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TLPALIB DD   DISP=SHR,DSN=&SYSX..LPALIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TMACLIB DD   DISP=SHR,DSN=&SYSX..MACLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n         AIF ('&NCP' EQ 'N').NCP3\n PUNCH '//TNCPLIB DD   DISP=SHR,DSN=&SYSX..NCPLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TSSPLIB DD   DISP=SHR,DSN=&SYSX..SSPLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n.NCP3   ANOP\n PUNCH '//TNUCLEUS DD  DISP=SHR,DSN=&SYSX..NUCLEUS,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TPARMLIB DD  DISP=SHR,DSN=&SYSX..PARMLIB,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TPROCLIB DD  DISP=SHR,DSN=&SYSX..PROCLIB,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TSAMPLIB DD  DISP=SHR,DSN=&SYSX..SAMPLIB,             '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//TSVCLIB DD   DISP=SHR,DSN=&SYSX..SVCLIB,              '\n PUNCH '//        UNIT=&DEVT,VOL=SER=&VOLUME                    '\n PUNCH '//SYSIN   DD   *                                        '\n PUNCH 'LOAD#01 COPY INDD=FCMDLIB,OUTDD=TCMDLIB,LIST=NO         '\n PUNCH 'LOAD#01 COPY INDD=FCMDPROC,OUTDD=TCMDPROC,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FDCMLIB,OUTDD=TDCMLIB,LIST=NO         '\n PUNCH 'LOAD#01 COPY INDD=FELCMLIB,OUTDD=TELCMLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FHELP,OUTDD=THELP,LIST=NO             '\n PUNCH 'LOAD#01 COPY INDD=FIMAGLIB,OUTDD=TIMAGLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FLINKLIB,OUTDD=TLINKLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FLPALIB,OUTDD=TLPALIB,LIST=NO         '\n PUNCH 'LOAD#01 COPY INDD=FMACLIB,OUTDD=TMACLIB,LIST=NO         '\n         AIF ('&NCP' EQ 'N').NCP4\n PUNCH 'LOAD#01 COPY INDD=FNCPLIB,OUTDD=TNCPLIB,LIST=NO         '\n PUNCH 'LOAD#01 COPY INDD=FSSPLIB,OUTDD=TSSPLIB,LIST=NO         '\n.NCP4   ANOP\n PUNCH 'LOAD#01 COPY INDD=FNUCLEUS,OUTDD=TNUCLEUS,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FPARMLIB,OUTDD=TPARMLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FPROCLIB,OUTDD=TPROCLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FSAMPLIB,OUTDD=TSAMPLIB,LIST=NO       '\n PUNCH 'LOAD#01 COPY INDD=FSVCLIB,OUTDD=TSVCLIB,LIST=NO         '\n PUNCH '//*                                                     '\n PUNCH '//LOAD#02 EXEC PGM=IEBCOPY,REGION=6096K                 '\n PUNCH '//SYSPRINT DD  SYSOUT=*                                 '\n PUNCH '//SYSUT3  DD   UNIT=SYSDA,SPACE=(CYL,(48,8))            '\n PUNCH '//SYSUT4  DD   UNIT=SYSDA,SPACE=(CYL,(48,8))            '\n PUNCH '//FTSPPLIB DD  DSN=&SYS1..ISFPLIB,DISP=SHR              '\n PUNCH '//FISPPLIB DD  DSN=&SYS1..ISFPLIB,DISP=SHR              '\n PUNCH '//FBASPLIB DD  DSN=&SYS1..ISFPLIB,DISP=SHR              '\n PUNCH '//FISFCLIB DD  DSN=&SYS1..ISFCLIB,DISP=SHR              '\n PUNCH '//FISPMLIB DD  DSN=&SYS1..ISFMLIB,DISP=SHR              '\n PUNCH '//FBASMLIB DD  DSN=&SYS1..ISFMLIB,DISP=SHR              '\n PUNCH '//FISPSLIB DD  DSN=&SYS1..ISFSLIB,DISP=SHR              '\n PUNCH '//FBASSLIB DD  DSN=&SYS1..ISFSLIB,DISP=SHR              '\n PUNCH '//FISPTLIB DD  DSN=&SYS1..ISFTLIB,DISP=SHR              '\n PUNCH '//FBASTLIB DD  DSN=&SYS1..ISFTLIB,DISP=SHR              '\n PUNCH '//FISPHELP DD  DSN=&SYS1..ISFHELP,DISP=SHR              '\n PUNCH '//FBASHELP DD  DSN=&SYS1..ISFHELP,DISP=SHR              '\n PUNCH '//FPROFPR1 DD  DSN=&ISPFUSR1..ISPF.ISPPROF,DISP=SHR     '\n PUNCH '//FPROFPR2 DD  DSN=&ISPFUSR2..ISPF.ISPPROF,DISP=SHR     '\n PUNCH '//*                                                     '\n PUNCH '//TISPPLIB DD  DSN=&SYSX..ISFPLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TISFCLIB DD  DSN=&SYSX..ISFCLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TISPMLIB DD  DSN=&SYSX..ISFMLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TISPSLIB DD  DSN=&SYSX..ISFSLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TISPTLIB DD  DSN=&SYSX..ISFTLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TISPHELP DD  DSN=&SYSX..ISFHELP,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TLINKLIB DD  DSN=&SYSX..LINKLIB,DISP=SHR,             '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME                 '\n PUNCH '//TPROFPR1 DD  DSN=&ISPFUSR1..ISPF.ISPPROF,DISP=SHR,    '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME,FREE=CLOSE      '\n PUNCH '//TPROFPR2 DD  DSN=&ISPFUSR2..ISPF.ISPPROF,DISP=SHR,    '\n PUNCH '//            UNIT=3380,VOL=SER=&VOLUME,FREE=CLOSE      '\n PUNCH '//SYSIN   DD   *                                        '\n PUNCH 'LOAD#02 COPY INDD=FISFCLIB,OUTDD=TISFCLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FTSPPLIB,OUTDD=TISPPLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FISPPLIB,OUTDD=TISPPLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FBASPLIB,OUTDD=TISPPLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FISPMLIB,OUTDD=TISPMLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FBASMLIB,OUTDD=TISPMLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FISPSLIB,OUTDD=TISPSLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FBASSLIB,OUTDD=TISPSLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FISPTLIB,OUTDD=TISPTLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FBASTLIB,OUTDD=TISPTLIB,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FISPHELP,OUTDD=TISPHELP,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FBASHELP,OUTDD=TISPHELP,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FPROFPR1,OUTDD=TPROFPR1,LIST=NO       '\n PUNCH 'LOAD#02 COPY INDD=FPROFPR2,OUTDD=TPROFPR2,LIST=NO       '\n PUNCH '//*                                                     '\n PUNCH '//LOAD#03 EXEC PGM=IEBCOPY,REGION=4024K                 '\n PUNCH '//SYSPRINT DD  SYSOUT=*                                 '\n PUNCH '//SYSUT3  DD   UNIT=SYSDA,SPACE=(CYL,(48,8))            '\n PUNCH '//SYSUT4  DD   UNIT=SYSDA,SPACE=(CYL,(48,8))            '\n PUNCH '//FVTAMLIB DD  DSN=&SYS1..&VTAMLIB,DISP=SHR             '\n PUNCH '//FVTAMLST DD  DSN=&SYS1..&VTAMLST,DISP=SHR             '\n PUNCH '//TVTAMLIB DD  DSN=&SYSX..VTAMLIB,DISP=SHR,             '\n PUNCH '//            UNIT=SYSDA,VOL=SER=&VOLUME                '\n PUNCH '//TVTAMLST DD  DSN=&SYSX..VTAMLST,DISP=SHR,             '\n PUNCH '//            UNIT=SYSDA,VOL=SER=&VOLUME                '\n PUNCH '//SYSIN   DD   *                                        '\n PUNCH 'LOAD#03 COPY INDD=FVTAMLIB,OUTDD=TVTAMLIB,LIST=NO       '\n PUNCH 'LOAD#03 COPY INDD=FVTAMLST,OUTDD=TVTAMLST,LIST=NO       '\n PUNCH '//*                                                     '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//*      REPLACE ''JES2'' PROC IN SYSX.PROCLIB          '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//IEBUPDTE EXEC PGM=IEBUPDTE                            '\n PUNCH '//SYSPRINT DD  SYSOUT=*                                 '\n PUNCH '//SYSUT1  DD   DSN=&SYSX..PROCLIB,DISP=SHR,             '\n PUNCH '//        UNIT=3380,VOL=SER=&VOLUME                     '\n PUNCH '//SYSUT2  DD   DSN=&SYSX..PROCLIB,DISP=SHR,             '\n PUNCH '//        UNIT=3380,VOL=SER=&VOLUME                     '\n PUNCH '//SYSIN   DD   DATA,DLM=$$                              '\n PUNCH './ REPL NAME=JES2,LIST=ALL                              '\n PUNCH '//JES2 PROC                                             '\n PUNCH '//IEFPROC EXEC PGM=HASJES20,TIME=1440                   '\n PUNCH '//PROC00   DD  DSN=&SYS1..PROCLIB,DISP=SHR              '\n PUNCH '//HASPPARM DD  DSN=&SYS1..PARMLIB(JES2PARM),DISP=SHR     '\n PUNCH '//ALTPARMM DD  DSN=&SYS1..PARMLIB(JES2PARM),DISP=SHR     '\n PUNCH '//HASPLIST DD  DDNAME=IEFRDER                           '\n PUNCH './ ENDUP                                                '\n PUNCH '$$                                                      '\n PUNCH '//*                                                     '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//*        REPLACE PARMLIB MEMBERS                      '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//IEBUPDT2 EXEC PGM=IEBUPDTE                            '\n PUNCH '//SYSPRINT DD  SYSOUT=*                                 '\n PUNCH '//SYSUT1  DD   DSN=&SYSX..PARMLIB,DISP=SHR,             '\n PUNCH '//        UNIT=3380,VOL=SER=&VOLUME                     '\n PUNCH '//SYSUT2  DD   DSN=&SYSX..PARMLIB,DISP=SHR,             '\n PUNCH '//        UNIT=3380,VOL=SER=&VOLUME                     '\n PUNCH '//SYSIN   DD   *                                        '\n PUNCH './ REPL NAME=IEASYS99,LIST=ALL                          '\n PUNCH 'CMD=99,                           ** COMMAND MEMBER     '\n PUNCH 'LNK=99,                           ** LINKLIST MEMBER    '\n PUNCH 'PAGE=(&SYS1..&VOLUME..PLPA,       ** PLPA               '\n PUNCH '      &SYS1..&VOLUME..COMMON,     ** COMMON             '\n PUNCH '      &SYS1..&VOLUME..LOCAL1,L),  ** LOCAL              '\n PUNCH 'DUMP=(DASD,00-01),                ** SYSX.DUMP DATASETS '\n PUNCH 'PAGENUM=(3,6),                    ** EXTRA PAGE DS      '\n PUNCH 'LOGCLS=A,                         ** FOR SYSLOG DUMP    '\n PUNCH 'IPO=YES,                          ** LET OPER OVERRIDE IEASYS'\n PUNCH 'SMF=99,                           ** SMF PARMS          '\n PUNCH 'CLPA                              ** DO IT EVERY TIME   '\n PUNCH './ REPL NAME=SMFPRM99,LIST=ALL                          '\n PUNCH 'ACTIVE                                                  '\n PUNCH 'DSNAME(SYS1.MAN1,SYS1.MAN2)                             '\n PUNCH 'PROMPT                    /*  PROMPT OPERATOR FOR OPTIONS*/'\n PUNCH 'REC(PERM)                                               '\n PUNCH 'MAXDORM(3000)             /*  WRITE AN IDLE BUFFER AFTER30*/'\n PUNCH 'STATUS(010000)            /*  WRITE SMF STATS AFTER 1 HR*/'\n PUNCH 'JWT(1000)                 /*  522 AFTER ??? MINUTES*/   '\n PUNCH 'SID(&SYSID)               /*  SYSTEM ID */              '\n PUNCH 'LISTDSN                   /*  LIST DATA SET STATUS AT IPL*/'\n PUNCH 'SYS(TYPE(0:255),EXITS(IEFU83,IEFU84,IEFACTRT,IEFUJV,    '\n PUNCH ' IEFUSI,IEFUJI,IEFUTL,IEFU29),NOINTERVAL,NODETAIL)      '\n PUNCH 'SUBSYS(STC,EXITS(IEFU29,IEFU83,IEFU84,IEFUJP,IEFUSO))   '\n PUNCH './ REPL NAME=COMMND99,LIST=ALL                          '\n PUNCH 'TOD=PROMPT                                              '\n PUNCH 'MT=24K                                                  '\n PUNCH 'COM=''D T''                                             '\n PUNCH './  REPL NAME=LNKLST99,LIST=ALL                         '\n PUNCH '&SYS1..LINKLIB                                          '\n PUNCH './ ENDUP                                                '\n PUNCH '/*                                                      '\n PUNCH '//*                                                     '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//*        ADD A ''LIST'' AND ''LOG'' TO JES2PARM       '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//GENER  EXEC PGM=IEBGENER                              '\n PUNCH '//SYSPRINT DD SYSOUT=*                                  '\n PUNCH '//SYSUT2   DD DSN=&SYSX..TEMP,DCB=SYS1.PARMLIB,         '\n PUNCH '//         SPACE=(CYL,(1,1)),VOL=SER=&VOLUME,           '\n PUNCH '//         DISP=(,KEEP),UNIT=&DEVT                      '\n PUNCH '//SYSUT1   DD *,DCB=BLKSIZE=16000                       '\n PUNCH './ REPL NAME=JES2PARM,LIST=ALL                          '\n PUNCH 'LOG        * WRITE ALL INITIALIZATION STATEMENTS TO HARDCOPY'\n PUNCH 'LIST       * LIST ALL STATEMENTS TO CONSOLE             '\n PUNCH '//         DD DSN=&SYSX..PARMLIB(JES2PARM),             '\n PUNCH '//         DISP=SHR,                                    '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '\n PUNCH '//SYSIN    DD DUMMY                                     '\n PUNCH '//JES2PARM EXEC PGM=IEBUPDTE                            '\n PUNCH '//SYSPRINT DD SYSOUT=*                                  '\n PUNCH '//SYSUT1   DD DSN=&SYSX..PARMLIB,DISP=SHR,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '\n PUNCH '//SYSUT2   DD DSN=&SYSX..PARMLIB,DISP=SHR,              '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '\n PUNCH '//SYSIN    DD DSN=&SYSX..TEMP,DISP=(OLD,DELETE),        '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '\n PUNCH '//         DD *                                         '\n PUNCH './ ENDUP                                                '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//*        FORMAT BROADCAST DATASET                     '\n PUNCH '//*-----------------------------------------------------'\n PUNCH '//BROADCST EXEC PGM=IKJEFT01,                           '\n PUNCH '//        DYNAMNBR=15,                                  '\n PUNCH '//        REGION=2048K                                  '\n PUNCH '//SYSUADS DD DSN=&SYSX..UADS,DISP=SHR,                  '\n PUNCH '//        VOL=SER=&VOLUME,UNIT=SYSDA                    '\n PUNCH '//SYSLBC  DD DSN=&SYSX..BRODCAST,DISP=SHR,              '\n PUNCH '//        VOL=SER=&VOLUME,UNIT=SYSDA                    '\n PUNCH '//SYSPRINT DD SYSOUT=*                                  '\n PUNCH '//SYSTSPRT DD SYSOUT=*                                  '\n PUNCH '//SYSTERM  DD SYSOUT=*                                  '\n PUNCH '//SYSTSPRT DD SYSOUT=*                                  '\n PUNCH '//SYSIN    DD DUMMY                                     '\n PUNCH '//SYSTSIN  DD *                                         '\n PUNCH ' ACCOUNT                                                '\n PUNCH ' SYNC                                                   '\n PUNCH '//*                                                     '\n PUNCH '//&JOBNAME.3 JOB ('&JOBACCT'),''&JOBPROGM'',          '\n         AIF    (K'&NOTIFY EQ 0).SKIPNO2\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.,'\n PUNCH '//           NOTIFY=&NOTIFY                         '\n         AGO  .OVER3\n.SKIPNO2 ANOP\n PUNCH '//           CLASS=&JOBCLASS,MSGCLASS=&JOBMSGCL.&TYPRN.'\n.OVER3   ANOP\n PUNCH '//*------------------------------------------------------*'\n PUNCH '//*                                                      *'\n PUNCH '//*  _STEPS_   __________ FUNCTION _____________________ *'\n PUNCH '//*  IFCDIP00   INITS THE LOGREC DATASET                 *'\n PUNCH '//*  COPYPFK    COPIES CURRENT DCMLIB TO NEW ONE         *'\n PUNCH '//*  COPYPASS   COPIES CURRENT PASSWORD DATASET          *'\n PUNCH '//*  COPYUADS   COPIES CURRENT UADS                      *'\n PUNCH '//*  IDUMP00    INITS DUMP DATASETS                      *'\n            AIF    (&RACFLG EQ 0).SKPRACFX\n PUNCH '//*  INITALZE   INITS THE RACF DATASET                   *'\n.SKPRACFX   ANOP\n PUNCH '//*  FORMAT     FORMATS SMF DATASETS                     *'\n PUNCH '//*  PROTECT    PROTECTS MASTER CATALOG                  *'\n PUNCH '//*  SYSCATLG   BUILD, RELPACE, SYSCATLG MEMBER IN NUC   *'\n PUNCH '//*  DUMPT      PRINT NEW SYSCATLG MEMBER                *'\n        AIF  ('&RENAME' EQ 'N').NREN0\n PUNCH '//*  RENAME     RENAME ALL SYSX TO SYS1                  *'\n.NREN0  ANOP\n PUNCH '//*------------------------------------------------------*'\n PUNCH '//*                                                       '\n PUNCH '//IFCDIP00 EXEC PGM=IFCDIP00                              '\n PUNCH '//SERERDS DD DISP=SHR,DSN=&SYSX..LOGREC,                  '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n PUNCH '//*                                                       '\n PUNCH '//COPYPFK EXEC PGM=IEBCOPY                                '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//IN DD DSN=SYS1.DCMLIB,DISP=SHR                          '\n PUNCH '//OUT DD DSN=&SYSX..DCMLIB,DISP=SHR,                      '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n PUNCH '//SYSIN DD *                                              '\n PUNCH ' C I=((IN,R)),O=OUT                                       '\n PUNCH '//*                                                       '\n PUNCH '//*COPYPASS EXEC PGM=IEBGENER                             '\n PUNCH '//*SYSPRINT DD SYSOUT=*                                   '\n PUNCH '//*SYSUT1 DD DSN=PASSWORD,                                '\n PUNCH '//*       UNIT=&DEVT,VOL=SER=SYSRES,DISP=SHR              '\n PUNCH '//*SYSUT2 DD DSN=PASSWORD,                                '\n PUNCH '//*       UNIT=&DEVT,VOL=SER=&VOLUME,DISP=SHR             '\n PUNCH '//*SYSIN DD DUMMY                                         '\n PUNCH '//*                                                       '\n PUNCH '//COPYUADS EXEC PGM=IEBCOPY                               '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//SYSUT2 DD UNIT=SYSDA,SPACE=(20,10)                      '\n PUNCH '//SYSUT3 DD UNIT=SYSDA,SPACE=(20,10)                      '\n PUNCH '//FUADS DD DSN=SYS1.UADS,DISP=SHR                         '\n PUNCH '//TUADS DD DSN=&SYSX..UADS,DISP=SHR,                      '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n PUNCH '//SYSIN DD *                                              '\n PUNCH ' COPY I=((FUADS,R)),O=TUADS                               '\n PUNCH '//*                                                       '\n PUNCH '//IDUMP00 EXEC PGM=IEBGENER                               '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//SYSIN DD DUMMY                                          '\n PUNCH '//SYSUT1 DD DUMMY,DCB=&SYSX..DUMP00                       '\n PUNCH '//SYSUT2 DD DSN=&SYSX..DUMP00,DISP=SHR,                   '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n PUNCH '//IDUMP01 EXEC PGM=IEBGENER                               '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//SYSIN DD DUMMY                                          '\n PUNCH '//SYSUT1 DD DUMMY,DCB=&SYSX..DUMP00                       '\n PUNCH '//SYSUT2 DD DSN=&SYSX..DUMP01,DISP=SHR,                   '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n            AIF    (&RACFLG EQ 0).SKPRACF3\n PUNCH '//*                                                       '\n PUNCH '//INITALZE EXEC PGM=ICHMIN00,PARM=NEW                     '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//SYSTEMP DD DSN=&SYSX..MACLIB(ICHTEMP0),DISP=SHR         '\n PUNCH '//SYSRACF DD DSN=&SYSX..RACF,DISP=OLD,                    '\n PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '\n.SKPRACF3  ANOP\n PUNCH '//*                                                       '\n PUNCH '//FORMAT EXEC PGM=IFASMFDP                                '\n PUNCH '//STEPCAT DD DSN=CATALOG.I&VOLUME,DISP=SHR                '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH '//NEWMAN1 DD DSN=&SYS1..MAN1,DISP=SHR,                    '\n PUNCH '// UNIT=SYSDA,VOL=SER=&VOLUME                             '\n PUNCH '//NEWMAN2 DD DSN=&SYS1..MAN2,DISP=SHR,                    '\n PUNCH '// UNIT=SYSDA,VOL=SER=&VOLUME                             '\n PUNCH '//SYSIN DD *                                              '\n PUNCH ' INDD(NEWMAN1,OPTIONS(CLEAR))                             '\n PUNCH ' INDD(NEWMAN2,OPTIONS(CLEAR))                             '\n PUNCH '//*                                                       '\n PUNCH '//PROTECT  EXEC PGM=IDCAMS                                '\n PUNCH '//STEPCAT DD DSN=CATALOG.I&VOLUME,DISP=SHR                '\n PUNCH '//SYSPRINT DD SYSOUT=*                                    '\n PUNCH ' ALTER CATALOG.I&VOLUME MRPW(&MASTRPW) UPDPW(&MASTRPW) -  '\n PUNCH ' ATT(3) CODE(MASTCAT) -                                   '\n PUNCH ' CAT(&CATALOG/&MASTRPW)                                   '\n PUNCH ' LISTC CAT(&CATALOG/&MASTRPW) ALL                         '\n PUNCH '//*                                                       '\n PUNCH '//*-----------------------------------------------------------'\n PUNCH '//* DOC: THE PURPOSE OF THIS STEP  TO REPLACE MEMBER SYSCATLG'\n PUNCH '//*     IN DATA SET \"SYS1.NUCLEUS\" TO FACILITATE THE USE OF AN'\n PUNCH '//*    EXISTING ICF OR VSAM MASTER CATALOG WITH A NEWLY CREATE' D\n PUNCH '//*     IPL VOLUME.                                           '\n PUNCH '//*                                                           '\n PUNCH '//* NOTES: ACCEPTABLE CATALOG TYPE VALUES FOR \"FILL=\" ON THE  '\n PUNCH '//*        \"CATTYPE\" FD STATEMENT ARE:                        '\n PUNCH '//*          X''00'' AND X''40''  -  VSAM MASTER CATALOG      '\n PUNCH '//*          X''F1''            -  ICF MASTER CATALOG         '\n PUNCH '//*                                                           '\n PUNCH '//*        ACCEPTABLE IPO SUPPORTED DEVICE TYPES FOR \"FILL=\"  '\n PUNCH '//*        ON THE \"DEV\" FD STATEMENT ARE:                     '\n PUNCH '//*          X''0B'' 3350          X''0E'' 3380               '\n PUNCH '//*          X''0C'' 3375                                     '\n PUNCH '//*        THE IPO SUPPLIED DEFAULT IS X''0E'' FOR A 3380     '\n PUNCH '//*                                                           '\n PUNCH '//*        EXAMPLES OF OTHER DEVICE TYPE VALUES FOR \"FILL=\"   '\n PUNCH '//*        ON THE \"DEV\" FD STATEMENT ARE:                     '\n PUNCH '//*          X''0D'' 3330-1        X''06'' 2305-1             '\n PUNCH '//*          X''09'' 3330          X''07'' 2305-2             '\n PUNCH '//*          X''0A'' 3340          X''08'' 2314               '\n PUNCH '//*    THESE DEVICES ARE NOT SUPPORTED BY IPO FOR IPO VOLUMES;'\n PUNCH '//*    THESE EXAMPLES ARE INCLUDED FOR COMPLETENESS ONLY.     '\n PUNCH '//*                                                           '\n PUNCH '//*-----------------------------------------------------------'\n PUNCH '//SYSCATLG EXEC PGM=IEBDG,REGION=512K                        '\n PUNCH '//SYSPRINT DD  SYSOUT=*                                       '\n PUNCH '//NUCLEUS  DD  DSN=&SYSX..NUCLEUS(SYSCATLG),                  '\n PUNCH '//             UNIT=&DEVT,VOL=SER=&VOLUME,                    '\n PUNCH '//             DISP=OLD                                       '\n PUNCH '//SYSIN    DD  *                                              '\n        LCLC   &SYSVOL\n        AIF   ('&DEVT' EQ '3350').D3350\n        AIF   ('&DEVT' EQ '3375').D3375\n&SYSVOL SETC  '0E'\n        AGO   .FDS\n.D3350  ANOP\n&SYSVOL SETC  '0B'\n        AGO   .FDS\n.D3375  ANOP\n&SYSVOL SETC  '0C'\n.FDS    ANOP\n PUNCH 'DSD OUTPUT=(NUCLEUS)                                     '\n PUNCH 'FD NAME=VOL,                                             '\n PUNCH 'LENGTH=06,                                               '\n PUNCH 'STARTLOC=01,                                             '\n PUNCH 'FILL=X''40'',                                            '\n PUNCH 'PICTURE=6,''&VOLUME'' <-----VERIFY VOLSER OF CATALOG     '\n PUNCH 'FD NAME=CATTYPE,                                         '\n PUNCH 'LENGTH=01,                                               '\n PUNCH 'STARTLOC=07,                                             '\n       AIF    (&ICFLG EQ 0).VSAM\n PUNCH 'FILL=X''F1'' <-----VERIFY TYPE OF CATALOG                '\n       AGO   .NEXTFD\n.VSAM  ANOP\n PUNCH 'FILL=X''40'' <-----VERIFY TYPE OF CATALOG                '\n.NEXTFD ANOP\n PUNCH 'FD NAME=DEV,                                             '\n PUNCH 'LENGTH=01,                                               '\n PUNCH 'STARTLOC=08,                                             '\n PUNCH 'FILL=X''&SYSVOL'' <-----VERIFY DEVICE TYPE               '\n PUNCH 'FD NAME=CAT,                                             '\n PUNCH 'LENGTH=44,                                               '\n PUNCH 'STARTLOC=11,                                             '\n PUNCH 'FILL=X''40'',                                            '\n PUNCH 'PICTURE=44,''&MASTRCAT''                                 '\n PUNCH 'FD NAME=FIL,                                             '\n PUNCH 'LENGTH=26,                                               '\n PUNCH 'STARTLOC=55,                                             '\n PUNCH 'FILL=X''40''                                             '\n PUNCH ' CREATE QUANTITY=1,FILL=X''00'',NAME=(VOL,CATTYPE,DEV,CAT,FIL)'\n PUNCH '/*                                                   '\n PUNCH '//DUMPT  EXEC PGM=AMASPZAP                           '\n PUNCH '//SYSPRINT DD SYSOUT=*                               '\n PUNCH '//SYSLIB   DD DSN=&SYSX..NUCLEUS,DISP=SHR,           '\n PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                '\n PUNCH '//SYSIN    DD *                                      '\n PUNCH '  DUMPT SYSCATLG ALL                                 '\n PUNCH '/*                                                   '\n        AIF  ('&RENAME' EQ 'N').NREN1\n PUNCH '//*                                                          '\n PUNCH '//RENAME  EXEC PGM=IEFBR14,REGION=1024K                      '\n PUNCH '//RESCUE DD    DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME           '\n PUNCH '//*                                                          '\n PUNCH '//* YOU HAVE TO ADD YOUR OWN \"X\" IN COL 72 ...               '\n PUNCH '//*                                                          '\n PUNCH '//SYSIN   DD   *                                             '\n PUNCH ' RENAME DSNAME=&SYSX..IPLTEXT,NEWNAME=&SYS1..IPLTEXT,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..LINKLIB,NEWNAME=&SYS1..LINKLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..LOGREC,NEWNAME=&SYS1..LOGREC,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..CMDLIB,NEWNAME=&SYS1..CMDLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..CMDPROC,NEWNAME=&SYS1..CMDPROC,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..VTAMLIB,NEWNAME=&SYS1..VTAMLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..DAE,NEWNAME=&SYS1..DAE,                  X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..DUMP00,NEWNAME=&SYS1..DUMP00,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..DUMP01,NEWNAME=&SYS1..DUMP01,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..DCMLIB,NEWNAME=&SYS1..DCMLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..HELP,NEWNAME=&SYS1..HELP,                X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..MACLIB,NEWNAME=&SYS1..MACLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..SVCLIB,NEWNAME=&SYS1..SVCLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n           AIF    (&RACFLG EQ 0).SKPRACF2\n PUNCH ' RENAME DSNAME=&SYSX..RACF,NEWNAME=&SYS1..RACF,                X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n.SKPRACF2  ANOP\n PUNCH ' RENAME DSNAME=&SYSX..LPALIB,NEWNAME=&SYS1..LPALIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..NUCLEUS,NEWNAME=&SYS1..NUCLEUS,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..SAMPLIB,NEWNAME=&SYS1..SAMPLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFCLIB,NEWNAME=&SYS1..ISFCLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFPLIB,NEWNAME=&SYS1..ISFPLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFMLIB,NEWNAME=&SYS1..ISFMLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFSLIB,NEWNAME=&SYS1..ISFSLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFTLIB,NEWNAME=&SYS1..ISFTLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISFHELP,NEWNAME=&SYS1..ISFHELP,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n         AIF ('&NCP' EQ 'N').NCP1\n PUNCH ' RENAME DSNAME=&SYSX..NCPDUMP,NEWNAME=&SYS1..NCPDUMP,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..NCPLIB,NEWNAME=&SYS1..NCPLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..SSPLIB,NEWNAME=&SYS1..SSPLIB,            X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n.NCP1  ANOP\n PUNCH ' RENAME DSNAME=&SYSX..HASPCKPT,NEWNAME=&SYS1..HASPCKPT         X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..HASPACE,NEWNAME=&SYS1..HASPACE,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..HASPINDX,NEWNAME=&SYS1..HASPINDX,        X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..TELCMLIB,NEWNAME=&SYS1..TELCMLIB,        X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..BRODCAST,NEWNAME=&SYS1..BRODCAST,        X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..IMAGELIB,NEWNAME=&SYS1..IMAGELIB,        X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..PARMLIB,NEWNAME=&SYS1..PARMLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..PROCLIB,NEWNAME=&SYS1..PROCLIB,          X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..UADS,NEWNAME=&SYS1..UADS,                X\n                          X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISPF1.ISPPROF,                           X\n                        X'\n PUNCH '              NEWNAME=&ISPFUSR1..ISPF.ISPPROF,                 X\n                            X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n PUNCH ' RENAME DSNAME=&SYSX..ISPF2.ISPPROF,                           X\n                        X'\n PUNCH '              NEWNAME=&ISPFUSR2..ISPF.ISPPROF,                 X\n                            X'\n PUNCH '              VOL=&DEVT=&VOLUME                             '\n.NREN1   ANOP\n         POP  PRINT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESCUE#": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00%\\x00%\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "FILE022"}, "text": "//RESCUE  JOB (000,TECH),'HEDGES-TECH',CLASS=Z,MSGCLASS=X\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE AND PRINT THE RESCUE MACRO            *\n//*                                                                   *\n//*      PERFORM A 'CHANGE ALL' ON 'THIS.LIBRARY'                     *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n// EXEC PGM=IEFBR14\n//A DD DSN=HEDGESM.RESCUE,DISP=(OLD,DELETE)\n//**\n//ASM     EXEC PGM=IEV90,PARM='NOOBJECT,XREF(SHORT),DECK',REGION=2M\n//SYSLIB   DD  DSN=HEDGESM.RMHFILE,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=V3330,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DSN=HEDGESM.RESCUE,DISP=(,CATLG),UNIT=SYSDA,\n// SPACE=(CYL,1),DCB=(SYS1.PROCLIB,DSORG=PS)\n//SYSIN    DD  *\n  RESCUE       TYPRUN=HOLD,                                            X\n               JOBCLASS=Z,                                             X\n               JOBACCT='000000,TECH',                                  X\n               NOTIFY=HEDGESM,                                         X\n               MASTRPW=MVSXA,                                          X\n               RACF=N,                                                 X\n               SYSID=4381,                                             X\n               COMMAND=Y,                                              X\n               CMDPROC=SYS1.SYSPROC,                                   X\n               NCP=N,                                                  X\n               TMS=N,                                                  X\n               LIST=N\n END\n/*\n// EXEC PGM=SYSREPRO\n//SYSPRINT DD SYSOUT=*\n//SYSUT1 DD DSN=HEDGESM.RESCUE,DISP=SHR\n//SYSUT2 DD SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ROUTDESC": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE022"}, "text": "*FOR WTO'S     SEE (GC28-1194-3,4)\n*\n*    ROUTE CODES,                         DESCRIPTOR CODES\n* SPECIFIED ROUTCDE=()                  SPECIFIED DESC=()\n*  1 ... MASTER CONSOLE ACTION             1 ... SYSTEM FAILURE\n*  2 ... MASTER CONSOLE INFO               2 ... IMMEDIATE ACTION\n*  3 ... TAPE POOL (MOUNTS)                3 ... EVENTUAL ACTION\n*  4 ... DIRECT ACCESS POOL(MOUNT)         4 ... SYSTEMS STATUS\n*  5 ... TAPE LIBRARY                      5 ... IMMEDIATE COMMAND RESP\n*  6 ... DISK LIBRARY                      6 ... JOB STATUS (DEF)\n*  7 ... UNIT RECORD POOL                  7 ... APPLICATIONS\n*  8 ... TELEPROCESSING CONTROL            8 ... OUT-OF-LINE MESSAGE\n*  9 ... SYSTEMS SECURITY                  9 ... OPERATOR'S REQUEST\n* 10 ... SYSTEM/ERROR MAINTENANCE         10 ... TRACK COMMAND RESP\n* 11 ... PROGRAMMER INFO                  11 ... CRITICAL EVENTUAL ACT\n* 12 ... EMULATION                        12 ... RESV\n* 13 ... CUSTOMER                         13 ... RESV\n* 14 ... CUSTOMER                         14 ... RESV\n* 15 ... CUSTOMER                         15 ... RESV\n* 16 ... RESERVED                         16 ... RESV\n*\n*                                         COLOR CODES FOR DESC CODES\n*                                         1  ... W\n*                                         2  ... A OR D\n*                                      3, 11 ... E\n*                                     4 - 10 ... I\n*\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASCATS": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01\\xe8\\x01\\xe8\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 488, "newlines": 488, "modlines": 0, "user": "FILE022"}, "text": "//SASCATS JOB\n//*-------------------------------------------------------------------*\n//*   LIB: SAS.MACLIB(SASCATS )                                       *\n//*   DOC: PRINT ALL CATALOG INFORMATION                              *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//*\n//LISCAT   EXEC PGM=IDCAMS,REGION=3M\n//SYSPRINT  DD  DSN=&&Q,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(10,1),RLSE),\n//          DCB=(LRECL=125,BLKSIZE=629,RECFM=VBA,DSORG=PS)\n//SYSIN     DD  *\n  LISTCAT  ALL CAT(CATALOG.MVSICFM.VMASTER)\n  LISTCAT  ALL CAT(CATALOG.MVSICFU.VUSER01)\n  LISTCAT  ALL CAT(CATALOG.MVSICFU.VUSER02)\n//CATSTRIP EXEC PGM=CATSTRIP\n//STEPLIB   DD DSN=TEST.LINKLIB,DISP=SHR\n//LIST      DD DSN=&&Q,DISP=(OLD,DELETE)\n//SYSOUT    DD DSN=&&X,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(10,1))\n//SYSUDUMP  DD SYSOUT=(,)\n//*\n//TSOBATCH PROC SOUT='SYSOUT=(,)',RGN=2M\n//IEFPROC  EXEC PGM=IKJEFT01,   ** TSO LOGON PGM\n//         DYNAMNBR=30,         ** NUMBER OF DYNAMIC ALLOC/SESION\n//         REGION=&RGN          ** REGION\n//SYSUDUMP DD SYSOUT=A,HOLD=YES\n//SYSHELP  DD DSN=SYS1.HELP,DISP=SHR\n//SYSUADS  DD DSN=SYS1.UADS,DISP=SHR\n//SYSLBC   DD DSN=SYS1.BRODCAST,DISP=SHR\n//SYSPRINT DD &SOUT\n//SYSTSPRT DD &SOUT\n//SYSTERM  DD &SOUT\n//SYSTSPRT DD &SOUT\n//SYSIN    DD DUMMY\n//SYSTSIN  DD DDNAME=INPUT\n// PEND\n//TSOBATCH EXEC TSOBATCH\n//VTOCOUT   DD  DSN=&&VTOC,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(2,1))\n//INPUT     DD  *\nVTOC ALL TRK NOHEADING +\nPRINT(NEW (DSNAME VOLUME DSO EX BLKSZ LRECL REFDT ALLOC UNUSED CDATE))\n//*\n//SCRATCH  EXEC PGM=IEHPROGM\n//SYSPRINT DD  SYSOUT=Z\n//DD1      DD  UNIT=SYSDA,VOL=SER=PACK01,DISP=OLD\n//SYSIN    DD  *\n  SCRATCH DSNAME=SAS.WEEKLY.STATS,VOL=SYSDA=PACK01\n  UNCATLG DSNAME=SAS.WEEKLY.STATS\n//*\n//SASCATS  EXEC SAS\n//SYSPRINT  DD  DSN=&&X,DISP=(OLD,DELETE)\n//OUTPUT    DD  DSN=&&OUT,DISP=(,DELETE),\n//          DCB=(LRECL=121,BLKSIZE=23474,RECFM=FB),\n//          UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSOUT   DD DUMMY\n//VTOCOUT   DD   DSN=&&VTOC,DISP=(OLD,DELETE)\n//MACROS    DD   DSN=SAS.MACLIB,DISP=SHR\n//CAT       DD  DSN=SAS.WEEKLY.STATS,\n//          DISP=(,CATLG),UNIT=SYSDA,SPACE=(CYL,(7,1),RLSE),\n//          DCB=(RECFM=U,BLKSIZE=18148,LRECL=9072,DSORG=DA),\n//          VOL=SER=PACK01\n//SYSIN     DD  *\n  OPTIONS NOMACROGEN NOSOURCE2 DATE SOURCE ERRORS=0 ;\n\n  *--------------------------------------------------------------*\n  *      THIS ROUTINE STRIPS THE LISTCAT INTO A MORE READABLE    *\n  *                   FORMAT FOR PROCESSING                      *\n  *--------------------------------------------------------------*;\n\n   DATA _NULL_;\n      INFILE SYSPRINT LENGTH=LEN ;\n      INPUT DATA $VARYING121. LEN  ;\n      IF SUBSTR(DATA,1,4)  = '1IDC'   THEN DELETE ;\n      IF SUBSTR(DATA,1,15) = '0              ' THEN DELETE ;\n      IF SUBSTR(DATA,1,1)  = '0' THEN   DATA=SUBSTR(DATA,2,LEN);\n      FILE OUTPUT LS=121 NOPRINT NOTITLE;\n           PUT @1 DATA;\n\n  * INCLUDE MACROS - NECESSARY FOR MACRO %_DEVTYPE ;\n\n    %INCLUDE MACROS(SASCATSM) ;\n\nPAGE;\n  *--------------------------------------------------------------*\n  *                                                              *\n  *       ALL FILES USED IN PROCESSING THE OUTPUT OF THE         *\n  *                       LISTCAT ALL                            *\n  *                                                              *\n  *--------------------------------------------------------------*;\n\n DATA CAT.REPORT  (KEEP=DATE)\n      CAT.ALIAS   (KEEP=ALIAS ASSOC)\n      CAT.NVSAMD  (KEEP=NONVSAM VOLSER DEVT JDATE OWNERID)\n      CAT.NVSAMC  (KEEP=NONVSAM VOLSER DEVT JDATE OWNERID)\n      CAT.NVSAMT  (KEEP=NONVSAM VOLSER DEVT JDATE OWNERID)\n      CAT.VSAM    (KEEP=CLUSTER JDATE RACF KEYLEN AVGLRECL\n                   BUFSPACE CISZ MAXLRECL RECTOT CI_SPLTS CA_SPLTS\n                   CI_FREE CA_FREE ALLOC PRI SEC VOLSER DEVT\n                   REC_CI MAX_RECS DATE  EXCPS\n                   RECDEL EXTENTS RECINSRT RECUPDT RECRET FREEBYTE)\n      CAT.USERCAT  (KEEP=UCATNAME VOLSER DEVT)\n      CAT.PAGESPC  (KEEP=PAGENAME JDATE RACF DEVT ALLOC PRI SEC VOLSER)\n      CAT.CATALOG  (KEEP=CATNAME JDATE RACF PSWD)\n      CAT.GDGS     (KEEP=GDGNAME LIMIT OPTIONS JDATE)\n      CAT.GDGNVSAM (KEEP=NONVSAM VOLSER DEVT JDATE OWNERID)\n      ;\n\n      INFILE OUTPUT\n      ;\n PAGE;\n  *--------------------------------------------------------------*\n  *                                                              *\n  *       SAS  LABEL STATEMENTS FOR ALL FILES                    *\n  *                                                              *\n  *--------------------------------------------------------------*;\n         LABEL\n               ALIAS='ALIAS'\n               ALLOC='ALLOCATION*TYPE'\n               ASSOC='ASSOCIATIONS'\n               AVGLRECL='AVERAGE*RECORD*LENGTH'\n               BUFSPACE='BUFFER*SPACE'\n               CA_SPLTS='CONTROL*AREA*SPLITS'\n               CA_FREE='PERCENT*CA*FREE'\n               CI_SPLTS='CONTROL*INTERVAL*SPLITS'\n               CI_FREE='PERCENT*CI*FREE'\n               CISZ='CONTROL*INTERVAL*SIZE'\n               CLUSTER='CLUSTER*NAME'\n               DATE='CURRENT*DATE'\n               DEVT='DEVICE*TYPE'\n               EXCPS='EXCPS'\n               EXTENTS='EXTENTS'\n               FREEBYTE='FREE*BYTES'\n               GDGNAME='GDG*DATA*SET'\n               INCAT='CATALOG*ENTRY'\n               JDATE='CREATE*DATE'\n               KEYLEN='KEY*LENGTH'\n               LIMIT='NUMBER*OF*LEVELS'\n               MAXLRECL='MAXIMUM*RECORD*LENGTH'\n               NONVSAM='NON*VSAM*DSNAME'\n               OPTIONS='GENERATION*OPTIONS'\n               OWNERID='OWNER*ID'\n               PAGENAME='PAGE*SPACE*NAME'\n               PRI='PRIMARY*ALLOCATION'\n               RACF='RACF*PROTECTION'\n               RECTOT='TOTAL*RECORDS'\n               RECDEL='RECS*DELETED'\n               RECINSRT='RECS*INSERTED'\n               RECUPDT='RECS*UPDATED'\n               RECRET='RECS*RETREIVED'\n               SEC='SECONDARY*ALLOCATION'\n               UCATNAME='USER*CATALOG*NAME'\n               VOLSER='VOLUME*SERIAL'\n               ;\n\n\n    FORMAT  DEVT $4.  JDATE DATE DATE7. ;\n\n PAGE;\n  *--------------------------------------------------------------*\n  *                                                              *\n  *   PROCESSING OF THE FIRST FIELD TO DETERMINE TYPE OF ENTRY   *\n  *                                                              *\n  *--------------------------------------------------------------*;\n\n  INPUT @1 TYPE $11.\n        @;\n\n  IF _N_ = 1 THEN DO;\n     DATE=TODAY(); FORMAT DATE DATE7.; OUTPUT CAT.REPORT;\n    END;\n\n    *--------- ALIAS --------;\n      IF TYPE='ALIAS' THEN DO;\n         INPUT  #1  @17  ALIAS    $8.\n                #5  @10  ASSOC    $44.\n                ;\n         IF LENGTH(ALIAS)=1 THEN DELETE;\n         OUTPUT CAT.ALIAS;\n        END;\n\n    *-------- NONVSAM --------;\n      IF SUBSTR(TYPE,1,7)='NONVSAM' THEN DO;\n         INPUT #1  @10 GNONVSAM  $44.    /* GDG NAME ???     */\n                   @17 NONVSAM  $44.     /* DATA SET NAME    */\n               #2  @1  HIST     $7.      /* CHECK FOR HISTORY */\n                   @;\n               IF HIST='HISTORY' THEN DO;\n         INPUT    #3  @17 OWNERID   $8.     /* OWNER            */\n                      @48 CYY       $2.     /* CREATE YEAR      */\n                      @51 CDDD      $3.     /*CREATE DATE       */\n                  #6  @19 VOLSER    $6.     /* VOLUME SERIAL    */\n                      @45 DEVICE  HEX8.     /* DEVICE TYPE      */\n                      ;\n                  END;\n               IF HIST='IN-CAT'  THEN DO;\n         INPUT        @12 INCAT     $44.    /* CATALOG NAME     */\n                  #3  @17 OWNERID   $8.     /* OWNER            */\n                      @48 CYY       $2.     /* CREATE YEAR      */\n                      @51 CDDD      $3.     /*CREATE DATE       */\n                  #7  @19 VOLSER    $6.     /* VOLUME SERIAL    */\n                      @45 DEVICE  HEX8.     /* DEVICE TYPE      */\n                      ;\n                  END;\n       * INDIRECT ADDRESSING FOR SYSRES VOLUME ;\n         IF VOLSER='******' THEN VOLSER='SYSRES';\n         IF VOLSER=' '      THEN DELETE;\n         %_DEVTYPE\n         RNVSAM=REVERSE(NONVSAM);           /* REVERSE THE DSN   */\n         RGDG='00V';                        /* OPPOSITE OF 'V00' */\n         X=INDEX(RNVSAM,RGDG);              /* OPPOSITE OF 'V00' */\n         IF X\u00ac=0 THEN DO;                   /* FOUND A GDG FILE  */\n            NONVSAM=GNONVSAM;\n            OUTPUT CAT.GDGNVSAM;\n           END;\n       * DIVIDE OUT TAPE AND DISK DATASET NAMES;\n         IF DEVT='3420' OR DEVT='3480' THEN DO;\n             IF DEVT='3420' THEN OUTPUT CAT.NVSAMT;\n                            ELSE OUTPUT CAT.NVSAMC;\n            END;\n          ELSE DO;\n             OUTPUT CAT.NVSAMD;\n            END;\n      END;\n\n\n    *------- USERCATALOG -------;\n      IF TYPE='USERCATALOG' THEN DO;\n         INPUT #1  @17 UCATNAME $44.     /* DATA SET NAME       */\n               #5  @19 VOLSER    $6.     /* VOLSER              */\n                   @45 DEVICE  HEX8.     /* DEVICE TYPE         */\n               #6  @22 NULL      $4.     /* CHECK ASSOCIATIONS  */\n               ;\n         IF LENGTH(UCATNAME)=1 THEN DELETE;\n         %_DEVTYPE\n         OUTPUT CAT.USERCAT;\n        END;\n\n    *------- GDG BASE --------;\n      IF SUBSTR(TYPE,1,8)='GDG BASE' THEN DO;\n         INPUT #1  @17 GDGNAME  $44.     /* DATA SET NAME       */\n               #3  @48 CYY      $2.      /* CREATE YEAR         */\n                   @51 CDDD     $3.      /* CREATE DAY          */\n               #6  @24 LIMIT     3.      /* NUMBER OF GENRATIONS*/\n                   @30 OPTIONS  $40.     /* GDG OPTIONS         */\n               ;\n         %_DEVTYPE\n         OUTPUT CAT.GDGS;\n        END;\n\n    *------- PAGE SPACE ------;\n      IF SUBSTR(TYPE,1,9)='PAGESPACE'  THEN DO;\n         INPUT #1  @17 PAGENAME $44.     /* PAGE SPACE NAME    */\n               #3  @48 CYY       $2.     /* CREATE YEAR         */\n                   @51 CDDD      $3.     /* CREATE DATE         */\n               #5  @53 RACF      $1.     /* RACF: Y/N           */\n              #17  @49 MAXLRECL   5.     /* MAX RECORD LENGTH   */\n              #26  @1  QQQ       $10.    /* LOOKING FOR ALLOC   */\n               @;\n               IF QQQ='ALLOCATION' THEN DO;\n                   INPUT #27      @15 ALLOC    $10.\n                         #28      @18 PRI        7.\n                         #29      @20 SEC        5.\n                         #31      @19 VOLSER     $6.\n                         #32      @16 DEVICE   HEX8.\n                         ;\n                  END;\n             %_DEVTYPE\n             OUTPUT CAT.PAGESPC;\n           END;\nPAGE;\n    *------- CLUSTER ---------;\n\n      IF TYPE='CLUSTER'  THEN DO;\n         DATE=TODAY();                   /* SAVE CURRENT DATE   */\n         INPUT #1  @17 CLUSTER  $44.     /* DATA SET NAME       */\n               @;\n         IF SUBSTR(CLUSTER,1,4)='0000' THEN DO; /* ICF-CATALOG */\n            INPUT #7  @14 CATNAME  $44.  /* CATALOG NAME       */\n                  #9  @48 CYY      $2.   /* CREATE YEAR        */\n                      @51 CDDD     $3.   /* CREATE DAY         */\n                  #11 @22 PSWD     $4.   /* PASSWORD           */\n                      @53 RACF     $1.   /* RACF (Y/N)         */\n                      ;\n            %_DEVTYPE\n            OUTPUT CAT.CATALOG;\n            RETURN;\n           END;\n         INPUT #3  @48 CYY       $2.     /* CREATE YEAR         */\n                   @51 CDDD      $3.     /* CREATE DATE         */\n               #5  @22 PSWD      $4.     /* PASSWORD OR NULL    */\n                   @53 RACF      $1.     /* RACF: Y/N           */\n                   @;\n         IF RACF=' ' THEN RACF='N' ;\n         IF PSWD ='    '  THEN DO;         /* A PASSWORD EXISTS   */\n             INPUT #6   @17 MSTRPW     $8. /* MASTER PASSWORD */\n                        @46 UPDTPW     $8. /* UPDATE PASSWORD */\n                   #11  @22 DATAPSWD   $4. /* DATA PASSWORD ? */\n                   @;\n                   IF DATAPSWD='    ' THEN DO;\n                       INPUT #18  @22 KEYLEN     3.\n                                 @49 AVGLRECL   5.\n                                 @77 BUFSPACE   6.\n                                 @107 CISZ      5.\n                             #19 @49 MAXLRECL   5.\n                                 @98 CI_CA      4.\n                             #17 @1  SHROPT    $7.  @; /* BACK TRACK */\n                           END;\n                       ELSE DO; GOTO LINK1; END;\n                    END;\n                   ELSE DO;\n      LINK1: INPUT #15  @22 KEYLEN     3.\n                        @49 AVGLRECL   5.\n                        @77 BUFSPACE   6.\n                        @107 CISZ      5.\n                    #16 @49 MAXLRECL   5.\n                        @98 CI_CA      4.\n                    #17 @1  SHROPT    $7.     @;\n                    END;\n               IF SHROPT='RECORDS' THEN DO;\n                 INPUT\n                   #20      @18 REC_CI    7.    /* ALLOC RECORDS */\n                            @45 MAX_RECS  9.\n                   #21      @11 RECTOT    14.\n                            @50 CI_SPLTS   4.\n                   #22      @51 CA_SPLTS   4.\n                   #23      @52 CI_FREE    2.\n                   #24      @52 CA_FREE    2.\n                   #27      @15 ALLOC    $10.\n                   #28      @18 PRI        7.\n                   #29      @20 SEC        5.\n                   #31      @19 VOLSER     $6.\n                   #32      @16 DEVICE   HEX8.\n                   ;END;\n               ELSE DO;\n                   IF SHROPT='ATTRIBU' THEN DO;\n                    INPUT\n                       #23      @11 RECTOT    14.\n                                @50 CI_SPLTS   4.\n                                @70 EXCPS     13.\n                       #24      @14 RECDEL    11.\n                                @51 CA_SPLTS   4.\n                                @79 EXTENTS    4.\n                       #25      @14 RECINSRT  11.\n                                @52 CI_FREE    2.\n                       #26      @14 RECUPDT   11.\n                                @52 CA_FREE    2.\n                       #27      @14 RECRET    11.\n                                @44 FREEBYTE  10.\n                       #29      @15 ALLOC    $10.\n                       #30      @18 PRI        7.\n                       #31      @20 SEC        5.\n                       #33      @19 VOLSER     $6.\n                       #34      @16 DEVICE   HEX8.\n                       ;END;\n                   ELSE DO;\n                    INPUT\n                       #20      @11 RECTOT    14.\n                                @50 CI_SPLTS   4.\n                                @70 EXCPS     13.\n                       #21      @14 RECDEL    11.\n                                @51 CA_SPLTS   4.\n                                @79 EXTENTS    4.\n                       #22      @14 RECINSRT  11.\n                                @52 CI_FREE    2.\n                       #23      @14 RECUPDT   11.\n                                @52 CA_FREE    2.\n                       #24      @14 RECRET    11.\n                                @44 FREEBYTE  10.\n                       #26      @15 ALLOC    $10.\n                       #27      @18 PRI        7.\n                       #28      @20 SEC        5.\n                       #30      @19 VOLSER     $6.\n                       #31      @16 DEVICE   HEX8.\n                       ;END;\n                 END;\n         %_DEVTYPE\n         OUTPUT CAT.VSAM;\n        END;\nPAGE;\n    *---------------------------------------------*\n    *         NON-VSAM  FROM VTOC PROGRAM         *\n    *                                             *\n    *  NOTE: VTOC COMMAND WAS ...                 *\n    *                                             *\n    *        VTOC ALL TRK              +          *\n    *             NOHEADING            +          *\n    *             PRINT(NEW (DSNAME VOLUME DSO +  *\n    *                        EX BLKSZ LRECL    +  *\n    *                        REFDT ALLOC UNUSED + *\n    *                        CDATE))              *\n    *---------------------------------------------*;\n     DATA CAT.VTOCS\n                    (KEEP=NONVSAM VOLSER DSORG EXTENTS\n                          REFDT ALLOC UNUSED DSNAME VOL\n                          NODE1 NODE2 NODE3 )\n                     ;\n          LABEL ALLOC='ALLOC*IN*TRACKS'\n                CDATE='CREATE*DATE'\n                DSORG='DATA*SET*ORG'\n                EXTENTS='EXTENTS'\n                NODE1='DATA*SET*NODE1'\n                NODE2='DATA*SET*NODE2'\n                NODE3='DATA*SET*NODE3'\n                NONVSAM='DATE*SET*NAME'\n                REFDTE='LAST*REF.*DATE'\n                UNUSED='UNUSED*IN*TRACKS'\n                VOLSER='VOLUME*SERIAL'\n                ;\n          LENGTH  NODE1  NODE2  NODE3  $9. ;\n\n          INFILE VTOCOUT JFCB=JFCB VOLUME=IVOL;\n          INPUT @1  CC       $1.\n                @2  NONVSAM  $44.\n                @47 VOLSER   $6.\n                @54 DSORG    $2.\n                @58 EXTENTS   2.\n                @61 BLKSIZE   5.\n                @67 LRECL     5.\n                @72 R_DATE   $5.\n                @79 ALLOC     5.\n                @86 UNUSED    5.\n                @92 C_DATE   $5.\n                ;\n\n          IF _N_=1 THEN DO;\n             J_D=TODAY();  JD=DATEJUL(J_D);\n             TEMPDS=SYS||JD; TEMPDS=COMPRESS(TEMPDS); DROP J_D JD;\n             RETAIN TEMPDS;\n            END;\n\n        * KILL ANY RECORD WITH CARRIDGE CONTROL ;\n          IF CC='0' THEN DELETE;\n\n        * NOTE: ALL SPACE ALLOCAION IS IN TRACKS ...\n                AND BLKSIZE AND LRECL VARIABLES NOT KEPT   ;\n\n        * ELIMINATE ALL TEMP DATASETS;\n          IF SUBSTR(NONVSAM,1,8)=TEMPDS  THEN DELETE;\n\n\n          IF R_DATE \u00ac= ' 0000' AND R_DATE \u00ac= '     '\n             THEN REFDT=DATEJUL(R_DATE);\n          IF C_DATE \u00ac= ' 0000' AND C_DATE \u00ac= '     '\n             THEN CDATE=DATEJUL(C_DATE);\n          FORMAT REFDT CDATE DATE7.;\n\n\n    *--------------------------------------*\n    * CREATE UNIQUE VARIABLES FROM DSNAME  *\n    *--------------------------------------* ;\n\n      LDSN=LENGTH(NONVSAM);\n    * CREATE FIRST NODE OF DATASET NAME ;\n      X=INDEX(NONVSAM,'.');\n      X=X-1;                         * ONE BACK FROM '.' ;\n      NODE1=SUBSTR(NONVSAM,1,X);\n      X=X+2;                         * ONE UPTO '.' AND ONE PAST '.';\n      SUBDSN=SUBSTR(NONVSAM,X,LDSN);\n      LDSN=LDSN-X;\n    * CREATE SECOND NODE OF DATASET NAME ;\n      X=INDEX(SUBDSN,'.');\n      X=X-1;\n      NODE2=SUBSTR(SUBDSN,1,X);\n      X=X+2;\n      SUBDSN=SUBSTR(SUBDSN,X,LDSN);\n      LDSN=LDSN-X;\n    * CREATE THIRD NODE OF DATASET NAME ;\n      X=INDEX(SUBDSN,'.');\n      X=X-1;\n      IF X>0 THEN  NODE3=SUBSTR(SUBDSN,1,X);\n             ELSE  NODE3=SUBSTR(SUBDSN,1,LDSN);\n      DROP X LDSN SUBDSN;\n\n\n    * ELIMINATE CATALOGS, VVDSS'S, INDEXED VTOCS ;\n      IF NODE2='VVDS' OR NODE2='VTOCIX' OR NODE1='CATALOG'\n         THEN DELETE;\n\n\n* LIST ALL POSSIBLE REPORTS ;\n\n  %_REPORT\n\n  ENDSAS;\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASCATSM": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02\\x9c\\x02\\x9c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 668, "newlines": 668, "modlines": 0, "user": "FILE022"}, "text": "\n  *--------------------------------------------------------------*\n  *                                                              *\n  *   LIB: SAS.MACLIB(SASCATSM)                                  *\n  *   DOC: MACROS NEEDED IN THE SASCATS JOB STREAM               *\n  *                                                              *\n  *--------------------------------------------------------------*;\n\n    %MACRO _REPORT;\n    %*-------------------------------------------------------*\n     * MACRO: _REPORT                                        *\n     * FUNCT: PRINTS A LISTING OF ALL POSSIBLE REPORTS       *\n     *-------------------------------------------------------*;\n     DATA _NULL_ ;\n          SET CAT.REPORT ;\n          REP=REPEAT('*',131);\n          RDATE=DATE;\n          FORMAT RDATE DATE7. ;\n          PUT _PAGE_\n            /// @2  REP\n              / @1  '*'                                       @132 '*'\n              / @1  '*' @40 'GENERATE THE FOLLOWING REPORTS '\n                       'USING THE SPECFIED MACROS CALLED AS SHOWN'\n                @132 '*'\n              / @1  '*'                                       @132 '*'\n              / @1  '*' @48 'DATE SAS FILE WAS CREATED = '\n                             DATE WEEKDATE23.\n                @132 '*'\n              / @1  '*'                                       @132 '*'\n              / @1  '*' @5  'REPORT_NAME' @30 'F_U_N_C_T_I_O_N'\n                        @100 'PARMS'       @122 'DEPEND.'\n                @132 '*'\n              / @1  '*'                                       @132 '*'\n              / @1  '*' @6  '%_TITLE   '\n                @25 'THIS IS THE MAIN TITLE ON ALL REPORTS            '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_VARDASD'\n                @25 'THE VARAIBLES USED IN A PROC PRINT NON-VSAM DATA '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_VARVSAM'\n                @25 'THE VARAIBLES USED IN A PROC PRINT FOR VSAM DATA '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_CATALOG'\n                @25 'REPORT ON ALL CATALOG ENTRIES                    '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_ALIAS  '\n                @25 'REPORT ALL ALIASES BY ASSOCIATION                '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_NVSAMD '\n                @25 'REPORT ON ALL NON-VSAM ON DASD VIA VTOC+CATALOG  '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_TAPE   '\n                @25 'REPORT ON ALL TAPE, DEVT 3420 BY DSNAME + VOLUME'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_CART   '\n                @25 'REPORT ON ALL CARTS, DEVT 3480 BY DSNAME + VOLUME'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_UCAT   '\n                @25 'REPORT ON ALL USERCATALOGS                       '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_GDGBASE'\n                @25 'REPORT ON ALL GDG_BASES, EXCEPTION ON NOSCRATCH  '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_GDG    '\n                @25 'REPORT ON ALL GDG\"S                              '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_VSAM   '\n                @25 'REPORT ON ALL VSAM CLUSTERS                      '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_VSAMRPT'\n                @25 'REPORT OF VSAM USAGE                             '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_CISPLIT'\n                @25 'REPORT ON CONTROL INTERVAL SPLITS > 10           '\n                @98 'SPLITS=10'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_CASPLIT'\n                @25 'REPORT ON CONTROL AREA SPLITS > 2                '\n                @98 'SPLITS=2'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_NEWVSAM'\n                @25 'REPORT ON ALL NEW VSAM CREATED 7 OR LESS DAYS AGO'\n                @98 'DAYS=7'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_NWNVSAM'\n                @25 'REPORT ON ALL NEW NON-VSAM CREATED 7 OR LESS DAYS'\n                @98 'DAYS=7'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_SUMMARY'\n               @25 'PRODUCE A SUMMARY BASED ON FIRST A NODE OF THE DSN'\n                @98 'NODE=1'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_JALIAS '\n                @25 'CREATE DEFINE STATEMENTS FOR ALL ALIASES         '\n                @98 'DDNAME=JCL'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_JNVSAM '\n                @25 'CREATE DEFINE STATEMENTS FOR ALL NON-VSAM        '\n                @98  'DDNAME=JCL'\n                @121 '%_NVSAMD'\n                @132 '*'\n              / @1  '*' @6  '%_JUCAT  '\n                @25 'CREATE DEFINE STATEMENTS FOR ALL USERCATS        '\n                @98 'DDNAME=JCL'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_JGDG   '\n                @25 'CREATE DEFINE STATEMENTS FOR ALL GDG-BASES       '\n                @98 'DDNAME=JCL'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_JPAGE  '\n                @25 'CREATE DEFINE STATEMENTS FOR ALL PAGE SPACES     '\n                @98 'DDNAME=JCL'\n                @124 'N/A'\n                @132 '*'\n              / @1  '*' @6  '%_DEVTYPE'\n                @25 'EVALUATE DEVICE SPECIFICATIONS                   '\n                @124 'N/A'\n                @132 '*'\n              / @1  '*'                                       @132 '*'\n              / @1  REP\n              / _PAGE_\n              ;\n   %MEND;\n\n    %MACRO _TITLE;\n    %*-------------------------------------------------------*\n     * MACRO: _TITLE                                         *\n     * FUNCT: MAIN TITLE FOR ALL REPORTS                     *\n     *-------------------------------------------------------*;\n     TITLE 'CATALOG REPORT  FOR  RIVERSIDE METHODIST HOSPITAL';\n     %* CANCEL FOOTNOTE IF ANY ;\n     FOOTNOTE;\n   %MEND;\n\n    %MACRO _VARDASD;\n    %*-------------------------------------------------------*\n     * MACRO: _VARDASD                                       *\n     * FUNCT: CREATE 'VAR' STATEMENTS FOR PROC PRINTS        *\n     *        THROUGHOUT THIS REPORT                         *\n     *-------------------------------------------------------*;\n        VAR NONVSAM VOLSER  DEVT  JDATE\n            DSORG   EXTENTS REFDT ALLOC UNUSED OWNERID\n            ;\n     %MEND;\n\n    %MACRO _VARVSAM;\n    %*-------------------------------------------------------*\n     * MACRO: _VARVSAM                                       *\n     * FUNCT: CREATE 'VAR' STATEMENTS FOR PROC PRINTS        *\n     *        THROUGHOUT THIS REPORT                         *\n     *-------------------------------------------------------*;\n          VAR CLUSTER VOLSER    JDATE    DEVT    RACF\n              CISZ    CI_SPLTS  CA_SPLTS\n              ALLOC   PRI       SEC      EXTENTS\n              RECTOT  RECDEL    RECINSRT RECUPDT RECRET EXCPS\n              KEYLEN  AVGLRECL  MAXLRECL BUFSPACE\n              CI_FREE CA_FREE   FREEBYTE\n              REC_CI  MAX_RECS\n              ;\n     %MEND;\n\n    %MACRO _CATALOG;\n    %*-------------------------------------------------------*\n     * MACRO: _CATALOG                                       *\n     * FUNCT: REPORT ON MASTER AND USER CATALOGS             *\n     *-------------------------------------------------------*;\n     PROC PRINT DATA=CAT.CATALOG LABEL SPLIT='*' NOOBS;\n     %_TITLE\n     TITLE2 '              C A T A L O G    E N T R Y (S) ';\n     %MEND;\n\n    %MACRO _ALIAS;\n    %*-------------------------------------------------------*\n     * MACRO: _ALIAS                                         *\n     * FUNCT: REPORT ON ALL ALIASES                          *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.VTOCS OUT=VTOCS;\n          BY NONVSAM;   * MUST-MUST-MUST BE SORTED BY NONVSAM ;\n  %* RETURN # OF ENTRIES ON DISK PER  ALIAS ;\n     DATA PREFIX (KEEP=ALIAS N);\n          SET VTOCS;\n          IF _N_=1 THEN DO; DOT='.';FORMAT ALIAS $8.;ALIAS='        ';\n             RETAIN DOT ALIAS;END;\n          N+1;\n          X=INDEX(NONVSAM,DOT);\n          X=X-1;\n          IF X > 0 THEN DO;\n             IF SUBSTR(NONVSAM,1,X)\u00ac=ALIAS THEN DO;\n                IF _N_\u00ac=1 THEN OUTPUT;\n                N=0;\n                ALIAS=SUBSTR(NONVSAM,1,X);\n                RETAIN ALIAS;\n               END;\n            END;\n  %* READY FOR MERGE ;\n     PROC SORT DATA=CAT.ALIAS OUT=ALIAS;     BY ALIAS;\n     PROC SORT DATA=PREFIX;                  BY ALIAS;\n     DATA ALIASES;   MERGE ALIAS PREFIX;     BY ALIAS;\n          IF LENGTH(ASSOC) < 5 THEN DELETE;\n          AL=ALIAS||'_'||N;   AL=COMPRESS(AL);\n     PROC SORT DATA=ALIASES;  BY ASSOC ALIAS;\n     PROC FORMS DATA=ALIASES W=13 L=1 D=0 NA=12 B=4;\n          LINE 1 AL;\n          BY ASSOC;\n          %_TITLE\n          TITLE2 'ALL ALIASES' ;\n          TITLE3 'BY ASSOCIATION';\n          FOOTNOTE1\n       'ALL ALIASES HAVE AND ASSOCIATED NUMBER OF ENTRIES: ALIAS_###';\n    %MEND;\n\n    %MACRO _NVSAMD;\n    %*-------------------------------------------------------*\n     * MACRO: _NVSAMD                                        *\n     * FUNCT: REPORT ON THE NONVSAM DISK DATASETS            *\n     *        THOSE CATALOGED AND NOT CATALOGED              *\n     *-------------------------------------------------------*;\n     DATA VTOCNVSM;\n          SET CAT.VTOCS;\n       %* DELETE ALL VSAM;\n          IF DSORG='VS' THEN DELETE;\n     PROC SORT DATA=VTOCNVSM;                  BY VOLSER NONVSAM ;\n     PROC SORT DATA=CAT.NVSAMD OUT=NVSAMD;     BY VOLSER NONVSAM ;\n  %* MERGE CATALOG AND VTOC;\n     DATA TOTNVSAM;   MERGE VTOCNVSM NVSAMD;   BY VOLSER NONVSAM ;\n       %* CALC PERCENT USED;\n          PC_T=(UNUSED/ALLOC)*100;PCT=ROUND(PC_T,.01);DROP PC_T;\n          LABEL PCT='PERCENT*TRACKS*UNUSED';\n     PROC SORT DATA=TOTNVSAM;     BY VOLSER;\n     PROC PRINT DATA=TOTNVSAM LABEL SPLIT='*' NOOBS;\n          BY VOLSER;\n          %_VARDASD\n          %_TITLE\n          TITLE2 'ALL NONVSAM' ;\n          TITLE3 'DISK';\n          FOOTNOTE1\n          'IF DEVICE-TYPE AND CREATE-DATE ARE BLANK, NOT CATALOGED';\n    %MEND;\n\n    %MACRO _SUMMARY(NODE=1);\n    %*-------------------------------------------------------*\n     * MACRO: _SUMMARY                                       *\n     * FUNCT: SUMMARIZE DATA ON VTOC FILE BY NODE            *\n     *-------------------------------------------------------*;\n     PROC SUMMARY DATA=CAT.VTOCS NWAY ;\n          VAR ALLOC UNUSED ;\n          CLASS NODE&NODE ;\n          OUTPUT  OUT=NODE\n                  MEAN=MEAN_AL MEAN_UN\n                  SUM=SUM_AL SUM_UN\n                  N=NUM_AL NUM_UN\n                  ;\n     PROC SORT  DATA=NODE;  BY NODE&NODE ;\n     PROC PRINT DATA=NODE LABEL SPLIT='*' NOOBS;\n          VAR NODE&NODE SUM_AL SUM_UN  NUM_AL NUM_UN\n             MEAN_AL MEAN_UN\n             ;\n        LABEL SUM_AL=SUM*ALLOC'     SUM_UN='SUM*UNUSED'\n              NUM_AL=NUMBER*ALLOC'  NUM_UN='NUMBER*UNUSED'\n              MEAN_AL='MEAN*ALLOC'  MEAN_UN='MEAN*UNUSED'\n             ;\n          %_TITLE\n          TITLE2 'SPACE USED BY NODE';\n    %MEND;\n\n    %MACRO _TAPE;\n    %*-------------------------------------------------------*\n     * MACRO: _TAPE;                                         *\n     * FUNCT: REPORT ON THE TAPE, DEVICE TYPE 3420           *\n     *        DATASETS BY DATASET NAME AND VOLSER            *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.NVSAMT OUT=NVSAMT;    BY NONVSAM;\n     PROC PRINT DATA=NVSAMT  NOOBS SPLIT='*' LABEL;\n          VAR NONVSAM VOLSER DEVT JDATE OWNERID;\n          %_TITLE\n          TITLE2 'TAPE - 3420';\n          TITLE3 'BY DATASET NAME';\n     PROC SORT DATA=NVSAMT;     BY VOLSER ;\n     PROC PRINT DATA=NVSAMT  NOOBS SPLIT='*' LABEL;\n          VAR VOLSER NONVSAM DEVT JDATE OWNERID;\n          TITLE4 'BY VOLSER';\n    %MEND;\n\n    %MACRO _CART;\n    %*-------------------------------------------------------*\n     * MACRO: _CART;                                         *\n     * FUNCT: REPORT ON THE CART, DEVICE TYPE 3480           *\n     *        DATASETS BY DATASET NAME AND VOLSER            *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.NVSAMC OUT=NVSAMC;    BY NONVSAM;\n     PROC PRINT DATA=NVSAMC  NOOBS SPLIT='*' LABEL;\n          VAR NONVSAM VOLSER DEVT JDATE OWNERID;\n          %_TITLE\n          TITLE2 'TAPE - 3480';\n          TITLE3 'BY DATASET NAME';\n     PROC SORT DATA=NVSAMC;    BY VOLSER ;\n     PROC PRINT DATA=NVSAMC  NOOBS SPLIT='*' LABEL;\n          VAR VOLSER NONVSAM DEVT JDATE OWNERID;\n          TITLE3 'BY VOLSER';\n    %MEND;\n\n    %MACRO _UCAT;\n    %*-------------------------------------------------------*\n     * MACRO: _UCAT                                          *\n     * FUNCT: REPORT ON USERCATALOGS                         *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.USERCAT OUT=USERCAT;   BY UCATNAME VOLSER;\n     PROC PRINT DATA=USERCAT  NOOBS SPLIT='*' LABEL;\n          %_TITLE\n          TITLE2 'ALL USERCATS';\n    %MEND;\n\n    %MACRO _GDGBASE;\n    %*-------------------------------------------------------*\n     * MACRO: _GDGBSAE                                       *\n     * FUNCT: PROCESS AND REPORT ON GDGBASES                 *\n     *        INCLUDING GDGS  WITH THE OPTION OF NO-SCRATCH  *\n     *        SPECIFIED                                      *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.GDGS OUT=GDGS;     BY GDGNAME ;\n     PROC PRINT DATA=GDGS  NOOBS SPLIT='*' LABEL;\n          VAR GDGNAME JDATE LIMIT OPTIONS;\n          %_TITLE\n          TITLE2 'ALL GDG ENTRIES';\n  %* NOTE ALL GDG BASES WITH NOTE OF \"NOSCRATCH\" - PROBLEM !! ;\n     DATA GDGNOSCR;  SET GDGS;  IF SUBSTR(OPTIONS,1,9)='NOSCRATCH';\n     PROC PRINT DATA=GDGNOSCR  NOOBS SPLIT='*' LABEL;\n          VAR GDGNAME JDATE LIMIT OPTIONS;\n          TITLE2 'GDG ENTRIES';\n          TITLE3 '                  OPTIONS:  NOSCRATCH';\n    %MEND;\n\n    %MACRO _GDG;\n    %*-------------------------------------------------------*\n     * MACRO: _GDG                                           *\n     * FUNCT: REPORT ON ALL GDGS                             *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.GDGNVSAM OUT=GDGNVSAM;  BY NONVSAM ;\n     PROC PRINT DATA=GDGNVSAM  NOOBS SPLIT='*' LABEL;\n          VAR VOLSER NONVSAM DEVT JDATE OWNERID;\n          %_TITLE\n          TITLE2 'ALL CATALOGED GDG LEVELS';\n    %MEND;\n\n    %MACRO _VSAM;\n    %*-------------------------------------------------------*\n     * MACRO: _VSAM                                          *\n     * FUNCT: REPORT ON ALL VSAM                             *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.VSAM OUT=VSAM;     BY CLUSTER;\n     PROC PRINT DATA=VSAM  SPLIT='*' LABEL;\n          %_VARVSAM\n          %_TITLE\n          TITLE2 'ALL VSAM CLUSTERS';\n    %MEND;\n\n    %MACRO _VSAMRPT;\n    %*-------------------------------------------------------*\n     * MACRO: _VSAMRPT                                       *\n     * FUNCT: CREATE VSAM USAGE REPORTS                      *\n     *-------------------------------------------------------*;\n     DATA SP_VSAM  UN_VSAM;\n          SET CAT.VSAM;\n          IF _N_ = 1  THEN DO;  X='.';  RETAIN X;  END;\n          NM=INDEX(CLUSTER,X);  NM=NM-1;\n          IF SUBSTR(CLUSTER,1,NM)='SYS1' THEN DELETE;\n        * CALCULATE ALLOCATIONS BY CONVERTING EVERYTHING TO TRACKS ;\n          IF ALLOC='CYLINDER' THEN DO;\n             IF DEVT='3380' THEN AMT=15;  ELSE AMT=30;\n             PRI=PRI*AMT;\n             SEC=SEC*AMT;\n             DROP AMT;\n            END;\n          ALLOC='TRK';\n        * DATASET NOT IN USE - NO RECORDS ;\n          IF RECTOT = 0  THEN DO;\n             UNUSED=PRI+SEC;\n             LABEL UNUSED='UNUSED*TRACKS';\n             OUTPUT UN_VSAM;\n            END;\n        * CALC % USED SPACE  ;\n          USEDSPC=0;\n          IF AVGLRECL=0 THEN AVGLRECL=MAXLRECL;\n          IF FREEBYTE \u00ac= 0 AND RECTOT \u00ac= 0  THEN DO;\n             USEDSPC=(FREEBYTE/AVGLRECL)/(RECTOT*AVGLRECL) ;\n             USEDSPC=ROUND(USEDSPC,.01);\n             LABEL USEDSPC='UNUSED*RECORDS*  %' ;\n             OUTPUT SP_VSAM ;\n            END;\n     PROC SORT DATA=UN_VSAM;  BY DESCENDING UNUSED;\n     PROC PRINT LABEL SPLIT='*'  DATA=UN_VSAM;\n          VAR CLUSTER VOLSER    JDATE    UNUSED\n              ;\n          SUM UNUSED;\n     %_TITLE\n     TITLE2 'UNUSED VSAM DATASETS';\n     TITLE3 'SORTED BY UNUSED SPACE';\n     TITLE4 'IN TRACKS';\n     PROC PRINT LABEL SPLIT='*'  DATA=SP_VSAM;\n          VAR CLUSTER VOLSER    JDATE\n              RECTOT  FREEBYTE  USEDSPC\n              ALLOC   PRI       SEC      AVGLRECL\n              ;\n    %MEND;\n\n    %MACRO _CISPLIT(SPLITS=10);\n    %*-------------------------------------------------------*\n     * MACRO: _CISPLIT                                       *\n     * FUNCT: REPORT ON CI SPLITS BASED ON CRITERIA          *\n     *        SPECIFIED IN THE MACRO, DEFAULT 10             *\n     *-------------------------------------------------------*;\n     DATA CISPLITS; SET CAT.VSAM; IF CI_SPLTS >= &SPLITS THEN OUTPUT;\n     PROC PRINT DATA=CISPLITS SPLIT='*' LABEL;\n        %_VARVSAM\n        %_TITLE\n        TITLE2 'ALL VSAM CLUSTERS';\n        TITLE3 'WITH CI-SPLITS GREATER THAN  &SPLITS';\n   %MEND;\n\n    %MACRO _CASPLIT(SPLITS=2);\n    %*-------------------------------------------------------*\n     * MACRO: _CASPLIT                                       *\n     * FUNCT: REPORT ON CA SPLITS BASED ON CRITERIA          *\n     *        SPECIFIED IN THE MACRO, DEFAULT 2              *\n     *-------------------------------------------------------*;\n     DATA CASPLITS; SET CAT.VSAM; IF CA_SPLTS >= &SPLITS THEN OUTPUT;\n     PROC PRINT DATA=CASPLITS SPLIT='*' LABEL;\n        %_VARVSAM\n        %_TITLE\n        TITLE2 'ALL VSAM CLUSTERS';\n        TITLE3 'WITH CA-SPLITS GREATER THAN  &SPLITS';\n   %MEND;\n\n    %MACRO _NEWVSAM(DAYS=7);\n    %*-------------------------------------------------------*\n     * MACRO: _NEWVSAM                                       *\n     * FUNCT: REPORT ON NEW VSAM DATASETS CREATED WITHIN     *\n     *        X NUMBER OF DAYS, DEFAULT IS 7 DAYS            *\n     *-------------------------------------------------------*;\n     DATA NEWVSAM;  SET CAT.VSAM;\n          TDAY = TODAY()- &DAYS ;\n          IF JDATE < TDAY THEN DELETE;\n          DROP TDAY;\n        * CALCULATE ALLOCATIONS BY CONVERTING EVERYTHING TO TRACKS ;\n          IF ALLOC='CYLINDER' THEN DO;\n             IF DEVT='3380' THEN AMT=15;\n                            ELSE AMT=30;\n             PRI=PRI*AMT;\n             SEC=SEC*AMT;\n            END;\n          ALLOC='TRK';\n          OUTPUT;\n     PROC SORT  DATA=NEWVSAM;    BY CLUSTER VOLSER;\n     PROC PRINT DATA=NEWVSAM  LABEL SPLIT='*' NOOBS;\n          %_VARVSAM\n          SUM PRI SEC;\n          %_TITLE\n          TITLE2 'WITHIN THE LAST &DAYS DAYS';\n          TITLE3 'BY CLUSTER';\n   %MEND;\n\n    %MACRO _NWNVSAM(DAYS=7);\n    %*-------------------------------------------------------*\n     * MACRO: _NWNVSAM                                       *\n     * FUNCT: REPORT ON NEW NON-VSAM DATASETS CREATED WITHIN *\n     *        X NUMBER OF DAYS, DEFAULT IS 7 DAYS            *\n     *-------------------------------------------------------*;\n     DATA NEWNVSAM;  SET TOTNVSAM;\n          TDAY = TODAY() - &DAYS;\n          IF JDATE>=TDAY THEN OUTPUT;\n          DROP TDAY;\n     PROC SORT DATA=NEWNVSAM;    BY NONVSAM VOLSER;\n     PROC PRINT DATA=NEWNVSAM LABEL SPLIT='*' NOOBS;\n          %_VARDASD\n          %_TITLE\n          TITLE2 'NONVSAM DATASETS' ;\n          TITLE3 'WITHIN THE LAST &DAYS DAYS';\n   %MEND;\n\n    %MACRO _JALIAS(DDNAME=JCL);\n    %*-------------------------------------------------------*\n     * MACRO: _JALIAS                                        *\n     * FUNCT: CREATE JCL FOR ALIAS REDEFINITIONS             *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.ALIAS OUT=ALIAS;    BY ASSOC ALIAS;\n     DATA _NULL_; SET ALIAS;\n          FILE &DDNAME   LS=80   NOPRINT   NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'  @69 '*/'\n               / @2  '/*'  @30 'ALIAS DEFINITIONS'   @69 '*/'\n               / @2  '/*'  @69 '*/'\n              ;\n          PUT @2  'DEF ALIAS (NAME ( ' ALIAS $8.\n                  ' )  REL( ' ASSOC  ' ) ) -'\n            / @6 'CAT ( MASTER.CATALOG ) '\n            ;\n      %MEND;\n\n    %MACRO _JNVSAM(DDNAME=JCL);\n    %*-------------------------------------------------------*\n     * MACRO: _JNVSAM                                        *\n     * FUNCT: CREATE JCL FOR NONVSAM REDEFINITIONS           *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.NVSAMD OUT=NVSAMD; BY VOLSER NONVSAM;\n     DATA _NULL_; SET NVSAMD;\n          FILE &DDNAME   LS=80   NOPRINT   NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'    @69 '*/'\n               / @2  '/*'    @30 'NONVSAM DEFINITIONS'  @69 '*/'\n               / @2  '/*'    @69 '*/'\n                 ;\n       PUT / @2 'DELETE  ' NONVSAM  ' NONVSAM  NOSCRATCH    -'\n               / @10 'CAT ( MASTER.CATALOG ) '\n            ;\n       IF SUBSTR(NONVSAM,1,4)='SYS1' AND VOLSER='******' THEN\n          PUT @2  'DEF NONVSAM                   - '\n            / @14 '( NAME ( ' NONVSAM ' ) -'\n            / @14 '  VOL  ( ****** )      -'\n            / @14 '  DEVT ( 0000 )        -'\n            / @14 ')                       - '\n            / @10 'CAT ( MASTER.CATALOG ) '\n            ;\n      ELSE  IF OWNERID=. THEN\n          PUT @2  'DEF NONVSAM                   - '\n            / @14 '( NAME ( ' NONVSAM ' ) -'\n            / @14 '  VOL  ( ' VOLSER ' )      -'\n            / @14 '  DEVT ( ' DEVT ' )      -'\n            / @14 ')                       - '\n            / @10 'CAT ( ' CATNAME ' )'\n            ;\n     ELSE PUT @2  'DEF NONVSAM                   - '\n            / @14 '( NAME ( ' NONVSAM ' ) -'\n            / @14 '  VOL  ( ' VOLSER ' )      -'\n            / @14 '  DEVT ( ' DEVT ' )      -'\n            / @14 '  OWNER ( ' OWNERID ' )    -'\n            / @14 ')                        - '\n            / @10 'CAT ( MASTER.CATALOG ) '\n            ;\n   %MEND;\n\n    %MACRO _JUCAT(DDNAME=JCL);\n    %*-------------------------------------------------------*\n     * MACRO: _JUCAT                                         *\n     * FUNCT: REDEFINE ALL USERCAT ENTRIES                   *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.USERCAT OUT=USERCAT;   BY UCATNAME VOLSER;\n     DATA _NULL_; SET USERCAT;\n          FILE &DDNAME   LS=80   NOPRINT   NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'       @69 '*/'\n               / @2  '/*'\n                 @20 'USERCATALOG DEFINITIONS - NEED MODIFICATION'\n                 @69 '*/'\n               / @2  '/*'       @69 '*/'\n                 ;\n          PUT @2  'DEFINE USERCATALOG            - '\n            / @21 '(  NAME ( ' UCATNAME ' )  - '\n            / @21 '   VOL  ( ' VOLSER ' )         - '\n            / @21 '   DEVT ( ' DEVT ' )         - '\n            / @21 '   FILE ( DDNAME )          - '\n            / @21 '   CYL  ( PRI SEC )         - '\n            / @21 '   CISZ ( 512 )             - '\n            / @21 '   FSPC ( 10 5 )            - '\n            / @21 '   ICFCATALOG               - /* NOTE THIS */ '\n            / @21 '   RECSZ ( 4086 32400 )     - '\n            / @21 '   SHR ( 3 4 )              - '\n            / @21 ')                          - '\n            / @18 'CAT ( MASTER.CATALOG ) '\n            ;\n     DATA _NULL_; SET USERCAT;\n          FILE JCL LS=80 NOPRINT NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'          @69 '*/'\n               / @2  '/*'\n                 @20 'USERCATALOG DEFINITIONS - CONNECTIONS'\n                 @69 '*/'\n               / @2  '/*'           @69 '*/'\n                 ;\n          PUT @2  'IMPORT CONNECT OBJECTS (      - '\n            / @27 '( ' UCATNAME ' -'\n            / @27 '  DEVT ( ' DEVT ' )           -'\n            / @27 '  VOL  ( ' VOLSER ' )  )        -'\n            / @27 ')                               -'\n            / @9 'CAT ( MASTER.CATALOG )'\n            ;\n   %MEND;\n\n    %MACRO _JGDG(DDNAME=JCL);\n    %*-------------------------------------------------------*\n     * MACRO: _JGDG                                          *\n     * FUNCT: REDEFINE ALL GDG-BASES                         *\n     *-------------------------------------------------------*;\n     PROC SORT DATA=CAT.GDGS OUT=GDGS; BY GDGNAME ;\n     DATA _NULL_; SET GDGS;\n          FILE &DDNAME   LS=80   NOPRINT   NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'      @69 '*/'\n               / @2  '/*'  @30 'GDG DEFINITIONS' @69 '*/'\n               / @2  '/*'      @69 '*/'\n                 ;\n          PUT @2  'DEFINE GENERATIONDATAGROUP    - '\n            / @21 '( NAME ( '  GDGNAME ' )     - '\n            / @21 '  NOEMPTY                   - '\n            / @21 '  LIMIT( ' LIMIT ' )        - '\n            / @21 ' ' OPTIONS '               - '\n            / @21 ')                            '\n            ;\n   %MEND;\n\n    %MACRO _JPAGE(DDNAME=JCL);\n    %*-------------------------------------------------------*\n     * MACRO: _JUCAT                                         *\n     * FUNCT: REDEFINE ALL PAGE SPACES                       *\n     *-------------------------------------------------------*;\n     DATA _NULL_; SET CAT.PAGESPC OUT=PAGESPC;\n          FILE &DDNAME   LS=80   NOPRINT   NOTITLE;\n          IF _N_=1 THEN\n             PUT @2  '/*'            @69 '*/'\n               / @2  '/*'  @30 'PAGESPACE DEFINITIONS '  @69 '*/'\n               / @2  '/*'            @69 '*/'\n                 ;\n          PUT @2  'DEFINE PAGESPACE              - '\n            / @21 '( NAME ( ' PAGENAME ' )     - '\n            / @21 '  FILE ( FILE1 )            - '\n            / @22 ALLOC '( ' PRI ' ' SEC ' )   - '\n            / @21 '  VOL ( ' VOLSER ' )       - '\n            / @21 ')                          - '\n            / @18 'CAT ( MASTER.CATALOG ) '\n            ;\n   %MEND;\n\n    %MACRO _DEVTYPE;\n    %*-------------------------------------------------------*\n     * MACRO: _VARVSAM                                       *\n     * FUNCT: CREATE 'VAR' STATEMENTS FOR PROC PRINTS        *\n     *        THROUGHOUT THIS REPORT                         *\n     *-------------------------------------------------------*;\n         IF DEVICE = 3010200EX THEN DEVT='3380';\n         IF DEVICE = 3050200BX THEN DEVT='3350';\n         IF DEVICE = 32008003X THEN DEVT='3420';\n         IF DEVICE = 78008080X THEN DEVT='3480';\n         IF DEVICE = 00022000X THEN DEVT='?22?';\n         IF DEVICE = 00012000X THEN DEVT='?12?';\n         IF DEVICE = 32108003X THEN DEVT='?TP?';\n         JDATE=CYY||CDDD;  JDATE=COMPRESS(JDATE);\n         JDATE=DATEJUL(JDATE);\n      %MEND;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SASCATSR": {"ttr": 5129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00v\\x00v\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "FILE022"}, "text": "//SASCATSR JOB\n//*-------------------------------------------------------------------*\n//*   LIB: SAS.MACLIB(SASCATSR)                                       *\n//*   DOC: REPORT FROM WEEKLY CATALOG REPORT                          *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//*\n//SASCATS  EXEC SAS\n//SYSOUT   DD DUMMY\n//MACROS    DD  DSN=SAS.MACLIB,DISP=SHR\n//CAT       DD  DSN=SAS.WEEKLY.STATS,DISP=SHR\n//SYSIN     DD  *\n  OPTIONS NOSOURCE2 NOMACROGEN NONOTES NODATE SOURCE ERRORS=0 ;\n\n* LIST ALL POSSIBLE REPORTS ;\n\n %INCLUDE MACROS(SASCATSM);\n\n  %_REPORT\n\n  %_SUMMARY\n\n\n  ENDSAS;\n\n\n*-----------------------------------------------------------------*\n*--------------- R E P O R T     S E C T I O N  ------------------*\n*-----------------------------------------------------------------*;\n\n  * VSAM CATALOG REPORT ;\n\n    %_CATALOG\n\n  * ALIAS PROCESSING  ;\n\n    %_ALIAS\n\n  * ALL NON-VSAM DISK PROCESSING  ;\n\n    %_NVSAMD\n\n  * ALL TAPE, DEVT(3420), PROCESSING ;\n\n    %_TAPE\n\n  * ALL CARTRIDGE, DEVT(3480), PROCESSING ;\n\n    %_CART\n\n  * ALL USERCATALOG PROCESSING ;\n\n    %_UCAT\n\n  * ALL GDG-BASE PROCESSING ;\n\n    %_GDGBASE\n\n  * REPORT ON ALL GDG'S ;\n\n    %_GDG\n\n  * REPORT ON ALL VSAM;\n\n    %_VSAM\n\n  * GENERATE VSAM STATISTICS REPORTS;\n\n    %_VSAMRPT\n\n  * GENERATE CI-SPLIT REPORT W/SPLITS > 9 ;\n\n    %_CISPLIT\n\n  * GENERATE CA-SPLIT REPORT W/SPLITS > 2 ;\n\n    %_CASPLIT\n\n  * VSAM DATASETS CREATED WITHIN THE LAST SEVEN DAYS ;\n\n    %_NEWVSAM\n\n  * NON-VSAM DATASETS CREATED WITHIN THE LAST SEVEN DAYS ;\n\n    %_NWNVSAM\n\n\n\nENDSAS;\n\n\n\n\n\n\n  *---------------------------------------------------------*\n  *   CREATE JCL TO RECREATE THE CATALOG ENTRIES            *\n  *---------------------------------------------------------*;\n\n  * RECREATE THE USERCATS;\n\n    %_JUCAT\n\n  * RECREATE THE ALIASES;\n\n    %_JALIAS\n\n  * RECREATE THE NONVSAM;\n\n    %_JNVSAM\n\n  * RECREATE THE GDG'S;\n\n    %_JGDG\n\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASCSI": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02\\xc9\\x02\\xc9\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 713, "newlines": 713, "modlines": 0, "user": "FILE022"}, "text": "//SASCSI  JOB\n//*\n//CSI EXEC SAS\n//SMPCSI     DD  DSN=SYS1.MVSSMPE.CSI,DISP=SHR\n//ZONERPT  DD       SYSOUT=(,)\n//DDEFRPT  DD DUMMY,SYSOUT=(,)\n//DSNRPT   DD DUMMY,SYSOUT=(,)\n//PGMRPT   DD DUMMY,SYSOUT=(,)\n//FMIDRPT  DD       SYSOUT=(,)\n//ASMRPT   DD DUMMY,SYSOUT=(,)\n//SYSMOD   DD DUMMY,SYSOUT=(,)\n//LMODRPT  DD DUMMY,SYSOUT=(,)\n//MACRPT   DD DUMMY,SYSOUT=(,)\n//MODRPT   DD DUMMY,SYSOUT=(,)\n//SRCRPT   DD DUMMY,SYSOUT=(,)\n//DLIBRPT  DD DUMMY,SYSOUT=(,)\n//SRCLTRPT DD DUMMY,SYSOUT=(,)\n//LMODCRPT DD DUMMY,SYSOUT=(,)\n//HOLDRPT  DD DUMMY,SYSOUT=(,)\n//SYSIN    DD *\n* SAS PROGRAM TO READ AND ANALYZE A PTF OUTPUT FROM SMPE ;\n\nOPTIONS MISSING=' ' TIME=MAX LINESIZE=132 ;\n\nDATA CSI(KEEP=IRBRELAX CCACZIDX IRBCATGX IRBOCCRX);\n\nLENGTH TYPE $ 8 SYSMOD $ 8 SYSENT $ 50  SYMTYPE $ 8 CSINAME $ 8 ;\nLENGTH SRCLST $ 8 DLIB $ 8 ATTRX $ 8 LMOD $ 8 MOD $ 8 MAC $ 8 SRC $ 8;\nLENGTH ZONEI $ 8 ZONE $ 8 DDEF $ 8 DSN $ 8 PGM $ 8 FMID $ 8 ASM $ 8;\nLENGTH PARM $ 50 CARD $ 80 HOLD $ 8 LMODCD $ 8;\n* ---------- DEFINE INFILE ---------------;\n  INFILE SMPCSI VSAM LENGTH=KEYLGTH ;\n\n*------------------------------------------------------------;\n* IRBCATG    DESCRIPTION\n   01        ZPOOL1\n   02        ZONE ASSIGNMENT (ZONEINDEX)\n   03\n   04        CATG=CAT\n   05        CATG=REL\n   10        ZONE\n   11        OPTIONS\n   12        DDDEF\n   13        UTILITY\n   14        FMIDSET\n   20        ASSEM\n   21        LMOD\n   22        MAC\n   23        MOD\n   24        SRC\n   25        DLIB\n   26        SYSMOD\n   30        ASM SRC\n   31        LMOD SRC\n   32        HOLD DATA ;\n*------------------------------------------------------------;\n* IRBRELA    DESCRIPTION           IRBRELA       DESCRIPTION\n* -------    ------------          ---------     --------------;\n* X'0101'      MAIN CSI             X'2001'      ASM SECURITY\n* X'0201'      ZONE INDEX CODE      X'2010'      ASM BACKUP\n* X'0301'      RDE  CODE            X'2100'      LMOD SECURITY\n* X'0401'           CODE            X'2101'      LMOD ATTR\n* X'0501'           CODE            X'2110'      LMOD BACKUP\n* X'1000'      ZONE SECURITY        X'2113'      LOADLIB\n* X'1001'      ZONE INDEX           X'2200'      MAC SECURITY\n* X'1020'      ZONE RELATED         X'2201'      MAC  FMID\n* X'1021'      ZONE SREL            X'2202'      MAC RMID\n* X'1022'      ZONE FMID            X'2210'      MAC BACKUP\n* X'1027'      ZONE OPTIONS         X'2211'      MAC DLIB\n* X'1172'      AMS IDCAMS UCLIN     X'2213'      MAC LIB\n* X'1173'      ASSEMBLER            X'2230'      GENASM\n* X'1174'      COMP                 X'2240'      ALIAS\n* X'1175'      IEBCOPY              X'2250'      UMID\n* X'1177'      LINKAGE EDITOR       X'2300'      MOD SECURITY\n* X'1178'      RETRY (IEBCOPY)      X'2301'      MOD FMID\n* X'1179'      UPDATE (IEBUPDTE)    X'2302'      MOD RMID\n* X'117A'      SZAP (IMASPZAP)      X'2310'      MOD BACKUP\n* X'117B'      NUCID                X'2311'      MODDLIB\n* X'1180'      UCLIN PAGELEN        X'2313'      MOD ATTR\n* X'1181'      UCLIN PREMAX         X'2340'      CSECT\n* X'1182'      PURGE/NOPURGE        X'2341'      CSECT LMODE\n* X'1183'      REQUEST/NOREQUEST    X'2342'      TALIAS\n* X'1188'      RETRY DDNAME         X'2343'      DALIAS\n* X'1190'      SAVEMTS              X'2350'      UPDATE ID (UMID)\n* X'1191'      SAVESTS              X'2401'      SRC FMID\n* X'1192'      DSSPACE              X'2402'      SRC RMID\n* X'1193'      DSPREFIX             X'2410'      SRC BACKUP\n* X'1201'      DSN=                 X'2411'      SRC DLIB\n* X'1202'      VOL=SER=             X'2413'      SRC LIB\n* X'1203'      UNIT=                X'2450'      SRC UMID\n* X'1209'      CONCAT DD            X'2500'      DLIB SECURITY\n* X'1210'      DISP=                X'2501'      DLIB BACKUP\n* X'1301'      PGM=                 X'2513'      COPY LIB\n* X'1302'      PARM=\n* X'1303'      DDN= (PRINT)\n* X'1304'      RETURN CODE\n* X'1401'      SETFMID ;\n* X'2600'      SYSMOD SECURITY      X'26A9'      VERSION\n* X'2601'      SYSMOD TYPE          X'26B1'      MOD\n* X'2602'      SYSMOD ATTRIBUTE     X'26B2'      ZAP\n* X'2611'      DELBY                X'26B3'      XZAP\n* X'2612'      LSUBBY               X'26B4'      MAC\n* X'2630'      BACKUP               X'26B5'      MACU\n* X'2631'      FMID                 X'26B6'      SRC\n* X'2632'      RECDATE              X'26B7'      SRCU\n* X'2633'      INSDATE              X'26C1'      ASM\n* X'2635'      RSTDATE              X'26C2'      APPLY ID\n* X'2636'      UCLDATE              X'26C3'      ACCEPT ID\n* X'2637'      DSN=                 X'26D1'      RMOD\n* X'2638'      # OF REL FILE        X'26D2'      RZAP\n* X'2639'      SECID                X'26D3'      RXZAP\n* X'263A'      FESN                 X'26D4'      RMAC\n* X'26A1'      VSREC                X'26D5'      RMACU\n* X'26A2'      VFMID                X'26D6'      RSRC\n* X'26A3'      VPRE                 X'26D7'      RSRCU\n* X'26A4'      VNPRE                X'26F0'      SUPBY\n* X'26A5'      VSUP                 X'26F1'      CIFREQ\n* X'26A6'      VREQ                 X'26F4'      HOLDERR\n* X'26A7'      VIREQ                X'26F5'      HOLDSYS\n* X'26A8'      VDEL                 X'26F6'      HOLDUSR  ;\n* X'3001'      SOURCE LISTING       X'3210'      ++HOLD CARD;\n* X'3101'      LMOD CARDS           X'3220'      ++HOLD COMMENT;\n*                                   X'3230'      ++HOLD FULLGEN;\nRETAIN PTR 13 I 1 TYPE SYSMOD SYSENT SYMTYPE ' ';\nRETAIN SRCLST DLIB LMOD MOD MAC SRC LMODCD HOLD ' ';\nRETAIN ZONEI ZONE DDEF DSN PGM FMID ASM ' ';\nRETAIN INDEX ' ';\n* CSI KEY FORMAT;\n  INPUT CCACZID PIB2.\n  @3    IRBCATG PIB1.\n  @4    IRBNAME1 $8.\n  @12   IRBRELA PIB2.\n  @12   IRBRELAC $CHAR2.\n  @14   IRBOCCR PIB2. @;\n* @16   IRBNAM2F $8. ;\n FORMAT  CCACZIDX IRBOCCRX HEX4. ;\n FORMAT IRBCATGX                   HEX2. ;\n IRBCATGX=IRBCATG;\n CCACZIDX=CCACZID;\n IRBOCCRX=IRBOCCR;\n* IF KEYLGTH > 23 THEN LIST;\n  NAMELEN=KEYLGTH-16;\n *--------  MAIN CSI  -----------------------------------------;\n IF IRBCATG = 1     THEN DELETE;\n *-----    ZONEINDEX ------------------------------------------;\n IF IRBCATG = 2 THEN DO;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEIX: IF ZONEI = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @4  (ZINDEX1 ZINDEX2) (PIB2.) @;\n      FORMAT ATTRX  $HEX8.;\n      FORMAT ZID1 ZID2   HEX4.;\n      ZID1=ZINDEX1; ZID2=ZINDEX2;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      PUT @PTR ' ZONENAME-' CSINAME @; PTR+20;\n      PUT @PTR ' PRIMARY INDEX-' ZID1 @; PTR+20;\n      PUT @PTR ' SECONDARY INDEX-' ZID2 ; PTR+20;\n      DELETE;\nEND;* END OF ZONEI=IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONEI=IRBNAME1;\n    PUT ' ZONEINDEX '@;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEIX;\n    END;\n    DELETE;\n    END;\n *-----    ZONE   ---------------------------------------------;\n IF  IRBCATG = 3 | IRBCATG = 4 | IRBCATG = 5  THEN DO;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEX: IF ZONE = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      LIST;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONE=IRBNAME1;\n    PUT '**@ ' ZONE @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEX;\n    END;\n    DELETE;\n    END;\n *-------   ZONE DEFINITION -----------------------------------;\n IF IRBCATG = 16    THEN DO; * ZONE;\n    FILE ZONERPT HEADER=ZONEHDR NOTITLES PRINT;\nZONEY: IF ZONE = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1000'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1001'X THEN DO;\n         INDEX=CSINAME;\n         PUT @PTR  ' INDEX-' CSINAME @; END;\n ELSE IF IRBRELAC = '1010'X THEN PUT @PTR  ' RELATED-' CSINAME @;\n ELSE IF IRBRELAC = '1021'X THEN PUT @PTR  ' SREL-' CSINAME @;\n ELSE IF IRBRELAC = '1022'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '1026'X THEN PUT @PTR  ' OPTS-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ZONE=IRBNAME1;\n    PUT '** ' ZONE @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ZONEY;\n    END;\n    DELETE;\n    END;\n *-------   OTHER DEFINITION -----------------------------------;\n IF IRBCATG = 17    THEN DO; * ZONE;\n    FILE DDEFRPT HEADER=DDEFHDR NOTITLES PRINT;\nDDEFX:    IF DDEF = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1100'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1172'X THEN PUT @PTR  ' AMS-' CSINAME @;\n ELSE IF IRBRELAC = '1173'X THEN PUT @PTR  ' ASMBLR-' CSINAME @;\n ELSE IF IRBRELAC = '1174'X THEN PUT @PTR  ' COMPRS-' CSINAME @;\n ELSE IF IRBRELAC = '1175'X THEN PUT @PTR  ' COPY-' CSINAME @;\n ELSE IF IRBRELAC = '1177'X THEN PUT @PTR  ' LKED-' CSINAME @;\n ELSE IF IRBRELAC = '1178'X THEN PUT @PTR  ' RETRY-' CSINAME @;\n ELSE IF IRBRELAC = '1179'X THEN PUT @PTR  ' UPDTE-' CSINAME @;\n ELSE IF IRBRELAC = '117A'X THEN PUT @PTR  ' SZAP-' CSINAME @;\n ELSE IF IRBRELAC = '117B'X THEN PUT @PTR  ' NUCID-' CSINAME @;\n ELSE IF IRBRELAC = '1180'X THEN PUT @PTR  ' PGELEN-' CSINAME @;\n ELSE IF IRBRELAC = '1181'X THEN PUT @PTR  ' PREMAX-' CSINAME @;\n ELSE IF IRBRELAC = '1182'X THEN PUT @PTR  ' PURGE-' CSINAME @;\n ELSE IF IRBRELAC = '1183'X THEN PUT @PTR  ' REQST-' CSINAME @;\n ELSE IF IRBRELAC = '1188'X THEN PUT @PTR  ' RTYDD-' CSINAME @;\n ELSE IF IRBRELAC = '1190'X THEN PUT @PTR  ' SAVEMTS-' CSINAME @;\n ELSE IF IRBRELAC = '1191'X THEN PUT @PTR  ' SAVESTS-' CSINAME @;\n ELSE IF IRBRELAC = '1192'X THEN DO;\n        INPUT @16 PRIM PIB2. @18 SECS PIB2. @20 DIRECTY PIB2. @;\n        PUT @PTR  ' DSSPACE-' PRIM ',' SECS ',' DIRECTY @;\n        PTR+10; END;\n ELSE IF IRBRELAC = '1193'X THEN DO;\n        INPUT @16 PARM &$50.@;\n        PUT @PTR  ' DSPREFIX-' PARM @;\n        PTR+(NAMELEN-9); END;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DDEF=IRBNAME1;\n    PUT '** ' DDEF @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DDEFX;\n    END;\n    DELETE;\n    END;\n *-----DSN  ---------------------------------------------------;\n IF IRBCATG = 18    THEN DO; * LMOD;\n    FILE DSNRPT HEADER=DSNHDR NOTITLES PRINT;\nDSNX:  IF DSN = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1200'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1201'X THEN DO;\n        INPUT @16 PARM &$50.@;\n        PUT @PTR  ' DSN-' PARM @;\n        IF NAMELEN-9 < 20 THEN PTR+20;\n                          ELSE PTR+40;\n        END;\n ELSE IF IRBRELAC = '1202'X THEN PUT @PTR  ' VOL-' CSINAME @;\n ELSE IF IRBRELAC = '1203'X THEN PUT @PTR  ' UNIT-' CSINAME @;\n ELSE IF IRBRELAC = '1209'X THEN PUT @PTR  ' CONCAT-' CSINAME @;\n ELSE IF IRBRELAC = '1210'X THEN PUT @PTR  ' DISP-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DSN=IRBNAME1;\n    PUT '** ' DSN @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DSNX;\n    END;\n    DELETE;\n    END;\n *-----PGM NAME -----------------------------------------------;\n IF IRBCATG = 19    THEN DO; * LMOD;\n    FILE PGMRPT HEADER=PGMHDR NOTITLES PRINT;\n PGMX:   IF PGM = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 PARM &50. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1300'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1301'X THEN PUT @PTR  ' PGMNME-' CSINAME @;\n ELSE IF IRBRELAC = '1302'X THEN DO;\n          PUT @PTR  ' PARM-' PARM @; PTR+(NAMELEN-6); END;\n ELSE IF IRBRELAC = '1303'X THEN DO;\n          PUT @PTR  ' SYSOUT-' CSINAME @; PTR+5; END;\n ELSE IF IRBRELAC = '1304'X THEN PUT @PTR  ' RETCODE-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    PGM=IRBNAME1;\n    PUT '** ' PGM @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO PGMX;\n    END;\n    DELETE;\n    END;\n *-----SET FMID -----------------------------------------------;\n IF IRBCATG = 20    THEN DO; * LMOD;\n    FILE FMIDRPT HEADER=FMIDHDR NOTITLES PRINT;\nFMIDX: IF FMID = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '1400'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '1401'X THEN PUT @PTR  ' FMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    FMID=IRBNAME1;\n    PUT '** ' FMID @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO FMIDX;\n    END;\n    DELETE;\n    END;\n *-----ASM  -----------------------------------------------;\n IF IRBCATG = 32    THEN DO; * LMOD;\n    FILE ASMRPT HEADER=ASMHDR NOTITLES PRINT;\nASMX: IF ASM = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2000'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2010'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    ASM=IRBNAME1;\n    PUT '** ' ASM @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO ASMX;\n    END;\n    DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 33    THEN DO; * LMOD;\n    FILE LMODRPT HEADER=LMODHDR NOTITLES PRINT;\nLMODX: IF LMOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2100'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2101'X THEN PUT @PTR  ' ATTR-' ATTRX @;\n *  ATTR ANALYSIS CAN BE DONE ON IOPLMLEP SEE GIMMPIOP;\n ELSE IF IRBRELAC = '2110'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2113'X THEN PUT @PTR  ' LLIB-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF LMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    LMOD=IRBNAME1;\n    PUT '** ' LMOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO LMODX;\n    END;\n    DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 34    THEN DO; * MAC ;\n    FILE MACRPT  HEADER=MACHDR NOTITLES PRINT;\nMACX: IF MAC = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2200'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2201'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2202'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2210'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2211'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2213'X THEN PUT @PTR  ' LLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2230'X THEN PUT @PTR  ' GENASM-' CSINAME @;\n ELSE IF IRBRELAC = '2240'X THEN PUT @PTR  ' ALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2250'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF MAC =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    MAC=IRBNAME1;\n    PUT '** ' MAC @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO MACX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 35    THEN DO; * MOD ;\n    FILE MODRPT  HEADER=MODHDR NOTITLES PRINT;\nMODX:    IF MOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2300'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2301'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2302'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2310'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2311'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2313'X THEN PUT @PTR  ' ATTR-' ATTRX @;\n *  ATTR ANALYSIS CAN BE DONE ON IOPMDLEP SEE GIMMPIOP;\n ELSE IF IRBRELAC = '2340'X THEN PUT @PTR  ' CSECT-' CSINAME @;\n ELSE IF IRBRELAC = '2341'X THEN PUT @PTR  ' CSECTL-' CSINAME @;\n ELSE IF IRBRELAC = '2342'X THEN PUT @PTR  ' TALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2343'X THEN PUT @PTR  ' DALIAS-' CSINAME @;\n ELSE IF IRBRELAC = '2350'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    MOD=IRBNAME1;\n    PUT '** ' MOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO MODX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 36    THEN DO; * SRC ;\n    FILE SRCRPT  HEADER=SRCHDR NOTITLES PRINT;\nSRCX: IF SRC = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2400'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2401'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2402'X THEN PUT @PTR  ' RMID-' CSINAME @;\n ELSE IF IRBRELAC = '2410'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2411'X THEN PUT @PTR  ' DLIB-' CSINAME @;\n ELSE IF IRBRELAC = '2413'X THEN PUT @PTR  ' LIB-' CSINAME @;\n ELSE IF IRBRELAC = '2450'X THEN PUT @PTR  ' UMID-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SRC=IRBNAME1;\n    PUT '** ' SRC @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SRCX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 37    THEN DO; * DLIB;\n    FILE DLIBRPT  HEADER=DLIBHDR NOTITLES PRINT;\nDLIBX: IF DLIB = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2500'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2510'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2513'X THEN PUT @PTR  ' CPYLIB-' CSINAME @;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    DLIB=IRBNAME1;\n    PUT '** ' DLIB @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO DLIBX;\n    END;\n  DELETE;\n    END;\n *-------------------------------------------------------------;\n IF IRBCATG = 38    THEN DO;    *SYSMOD RECORD;\n    FILE SYSMOD HEADER=SMODHDR NOTITLES PRINT;\nSYSMODX: IF SYSMOD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '2637'X | IRBRELAC = '2638'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '2601'X THEN DO;\n         TYPE= CSINAME;\n         PUT @PTR  ' TYPE-' TYPE @ ; END;\n ELSE IF IRBRELAC = '2600'X THEN PUT @PTR  ' SMDSEC-' CSINAME @;\n ELSE IF IRBRELAC = '2602'X THEN DO;\n    PUT @PTR  ' ATTR-' ATTRX @;\n    PTR+15;\n    IF PTR > 118 THEN DO; PUT; PTR=13; END;\n    * IOPPSTAT ANALYSIS;\n    IF ATTRB1 = '1.......'B THEN DO;\n       PUT @PTR 'PTF APPLIED' @; PTR+15;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.1......'B THEN DO;\n       PUT @PTR 'RESTORE ATTEMPTED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '..1.....'B THEN DO;\n       PUT @PTR 'PTF ACCEPTED' @; PTR+15;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '...1....'B THEN DO;\n       PUT @PTR 'SYS ERR ENCOUNTERED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.....1..'B THEN DO;\n       PUT @PTR 'PTF IS SUPED/DELETED' @; PTR+20;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '......1.'B THEN DO;\n       PUT @PTR 'BYPASS USED TO PROCESS' @; PTR+25;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n    IF ATTRB1 = '.......1'B THEN DO;\n       PUT @PTR 'PTF DEFAULT APPLIED VIA SYSGEN' @; PTR+30;\n       IF PTR > 118 THEN DO; PUT; PTR=13; END;  END;\n   END;\n ELSE IF IRBRELAC = '2611'X THEN PUT @PTR  ' DELBY-' CSINAME @;\n ELSE IF IRBRELAC = '2612'X THEN PUT @PTR  ' LSUBBY-' CSINAME @;\n ELSE IF IRBRELAC = '26A1'X THEN PUT @PTR  ' SREL-' CSINAME @;\n ELSE IF IRBRELAC = '26C2'X THEN PUT @PTR  ' APP-' CSINAME @;\n ELSE IF IRBRELAC = '26C3'X THEN PUT @PTR  ' ACC-' CSINAME @;\n ELSE IF IRBRELAC = '26F0'X THEN PUT @PTR  ' SUPBY-' CSINAME @;\n ELSE IF IRBRELAC = '26F1'X THEN DO;\n        PUT @PTR  ' CIREQ-' CSINAME @;\n      INPUT @24 IRBNAM2F $CHAR8. @;\n      CSINAME=IRBNAM2F; PTR+15; IF PTR >118 THEN  PUT;\n        PUT @PTR  ' CIREQ-' CSINAME @;\n        END;\n ELSE IF IRBRELAC = '26F4'X THEN PUT @PTR  ' HERR-' CSINAME @;\n ELSE IF IRBRELAC = '26F5'X THEN PUT @PTR  ' HSYS-' CSINAME @;\n ELSE IF IRBRELAC = '26F6'X THEN PUT @PTR  ' HUSER-' CSINAME @;\n ELSE IF IRBRELAC = '2630'X THEN PUT @PTR  ' BKUP-' CSINAME @;\n ELSE IF IRBRELAC = '2631'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '2639'X THEN PUT @PTR  ' SRCEID-' CSINAME @;\n ELSE IF IRBRELAC = '263A'X THEN PUT @PTR  ' FESD-' CSINAME @;\n ELSE IF IRBRELAC = '26A2'X THEN PUT @PTR  ' FMID-' CSINAME @;\n ELSE IF IRBRELAC = '26A3'X THEN PUT @PTR  ' PRE-' CSINAME @;\n ELSE IF IRBRELAC = '26A4'X THEN PUT @PTR  ' NPRE-' CSINAME @;\n ELSE IF IRBRELAC = '26A5'X THEN PUT @PTR  ' SUP-' CSINAME @;\n ELSE IF IRBRELAC = '26A6'X THEN PUT @PTR  ' REQ-' CSINAME @;\n ELSE IF IRBRELAC = '26A7'X THEN PUT @PTR  ' IREQ-' CSINAME @;\n ELSE IF IRBRELAC = '26A8'X THEN PUT @PTR  ' DEL-' CSINAME @;\n ELSE IF IRBRELAC = '26A9'X THEN PUT @PTR  ' VERSION-' CSINAME @;\n ELSE IF IRBRELAC = '26B1'X THEN PUT @PTR  ' MOD-' CSINAME @;\n ELSE IF IRBRELAC = '26B2'X THEN PUT @PTR  ' ZAP-' CSINAME @;\n ELSE IF IRBRELAC = '26B3'X THEN PUT @PTR  ' XZAP-' CSINAME @;\n ELSE IF IRBRELAC = '26B4'X THEN PUT @PTR  ' MAC-' CSINAME @;\n ELSE IF IRBRELAC = '26B5'X THEN PUT @PTR  ' MACU-' CSINAME @;\n ELSE IF IRBRELAC = '26B6'X THEN PUT @PTR  ' SRC-' CSINAME @;\n ELSE IF IRBRELAC = '26B7'X THEN PUT @PTR  ' SRCU-' CSINAME @;\n ELSE IF IRBRELAC = '26C1'X THEN PUT @PTR  ' ASM-' CSINAME @;\n ELSE DO; INPUT  @16 IRBDATE PD3. @;\n    IF IRBRELAC = '2632'X THEN PUT @PTR  ' RECDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2633'X THEN PUT @PTR  ' INSDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2635'X THEN PUT @PTR  ' RSTDATE-' IRBDATE @;\n ELSE IF IRBRELAC = '2636'X THEN PUT @PTR  ' UCLDATE-' IRBDATE @ ;\n  END; * END OF IRBDATE;\n  PTR+15;\n  IF PTR > 118 THEN DO; PUT; PTR=13; END;\nEND;* END OF SYSMOD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SYSMOD=IRBNAME1;\n    PUT '** ' SYSMOD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SYSMODX;\n    END;\n  DELETE;\n    END;\n *------------  SOURCE CARDS ------------------------------------;\n IF IRBCATG = 48    THEN DO;    *SRCLST RECORD;\n    FILE SRCLTRPT HEADER=SRCLTHDR NOTITLES PRINT;\nSRCLTX: IF SRCLST = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC = '3001'X THEN DO;\n         INPUT @16 CARD $80. @;\n         PUT @PTR  ' SRCLIST-' CARD ;\n        PTR=28 ; END;\nEND;* END OF SRCLST =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    SRCLST=IRBNAME1;\n    PUT '** ' SRCLST @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO SRCLTX;\n    END;\n  DELETE;\n    END;\n *------------  LMOD CARDS ------------------------------------;\n IF IRBCATG = 49    THEN DO;    *LMOD RECORD;\n    FILE LMODCRPT HEADER=LMODCHDR NOTITLES PRINT;\nLMODCX: IF LMODCD = IRBNAME1 THEN DO;\n      INPUT @16 IRBNAM2F $CHAR8. @16 IRBATTRX $CHAR4.\n            @16 ATTRB1 PIB1. @;\n      FORMAT ATTRX  $HEX8.;\n      ATTRX=IRBATTRX;\n      CSINAME=IRBNAM2F;\n      IF IRBRELAC \u00ac= '3101'X\n         THEN DO; DELETE; RETURN; END;\n ELSE IF IRBRELAC = '3101'X THEN DO;\n         INPUT @16 CARD $80. @;\n         PUT @PTR  ' LMODCARD-' CARD ;\n        PTR=28 ; END;\nEND;* END OF LMODCD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    LMODCD=IRBNAME1;\n    PUT '** ' LMODCD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+15;\n    GO TO LMODCX;\n    END;\n  DELETE;\n    END;\n *------------  HOLD CARDS ------------------------------------;\n IF IRBCATG = 50    THEN DO;    *HOLD RECORD;\n    FILE HOLDRPT HEADER=HOLDHDR NOTITLES PRINT;\nHOLDX: IF HOLD = IRBNAME1 THEN DO;\n         INPUT @16 CARD $80. @;\n      IF IRBRELAC = '3210'X\n         THEN DO;\n         PUT @PTR  ' ++HOLD-' CARD ;\n        PTR=26 ; END;\n ELSE IF IRBRELAC = '3220'X THEN DO;\n         PUT @PTR  ' ++COMMENT-' CARD ;\n        PTR=26 ; END;\n ELSE IF IRBRELAC = '3230'X THEN DO;\n         PUT @PTR  ' ++FULLGEN-' CARD ;\n        PTR=26 ; END;\n        ELSE LIST;\nEND;* END OF HOLD =IRBNAME1;\nELSE DO;\n    PUT; PTR=13;\n    HOLD=IRBNAME1;\n    PUT '** ' HOLD @;\n    PUT @PTR ' ZONE-' CCACZIDX @; PTR+13;\n    GO TO HOLDX;\n    END;\n  DELETE;\n    END;\n LIST;DELETE;\nRETURN;\nSMODHDR: PUT ' CDSI -    SYSMOD LISTING FROM CSI FILE ';\n         RETURN;\nHOLDHDR: PUT ' CDSI -    ++HOLD LISTING FROM CSI FILE ';\n         RETURN;\nLMODHDR: PUT ' CDSI -    LMOD LISTING FROM CSI FILE ';\n         RETURN;\nLMODCHDR: PUT ' CDSI -    LMOD CARDS LISTING FROM CSI FILE ';\n         RETURN;\nSRCLTHDR: PUT ' CDSI -    SOURCE CARDS LISTING FROM CSI FILE ';\n         RETURN;\nMODHDR: PUT ' CDSI -    MOD LISTING FROM CSI FILE ';\n         RETURN;\nMACHDR: PUT ' CDSI -    MAC LISTING FROM CSI FILE ';\n         RETURN;\nSRCHDR: PUT ' CDSI -    SRC LISTING FROM CSI FILE ';\n         RETURN;\nDLIBHDR: PUT ' CDSI -    DLIB LISTING FROM CSI FILE ';\n         RETURN;\nZONEHDR: PUT ' CDSI -    ZONE LISTING FROM CSI FILE ';\n         RETURN;\nDDEFHDR: PUT ' CDSI -    DDDEF LISTING FROM CSI FILE ';\n         RETURN;\nDSNHDR: PUT ' CDSI -    DSN LISTING FROM CSI FILE ';\n         RETURN;\nPGMHDR: PUT ' CDSI -    PGM LISTING FROM CSI FILE ';\n         RETURN;\nFMIDHDR: PUT ' CDSI -   FMID LISTING FROM CSI FILE ';\n         RETURN;\nASMHDR: PUT ' CDSI -    ASM LISTING FROM CSI FILE ';\n         RETURN;\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASDDDEF": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00t\\x00t\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 116, "newlines": 116, "modlines": 0, "user": "FILE022"}, "text": "//  EXEC SMPE\n//SMPLIST  DD DSN=&&SMPE,UNIT=SYSDA,DISP=(,PASS),\n// SPACE=(CYL,(10,1)),DCB=BLKSIZE=12100\n//SMPCNTL  DD  *\n       SET BDY(TARGET_ZONE).\n          LIST DDDEF .\n//*\n//SAS   EXEC SAS\n//SMPELIST DD  DSN=&&SMPE,DISP=(OLD,DELETE)\n//SMPOUT   DD  UNIT=SYSDA,SPACE=(CYL,(10,1)),DSN=&&SMPOUT,\n//         DISP=(,PASS),DCB=(LRECL=120,BLKSIZE=12000,RECFM=FB)\n//UCLIN    DD  SYSOUT=*\n//SYSIN    DD  *\n  OPTIONS NOMACROGEN MPRINT DATE  ERRORS=0 ;\n\n  /*-------------------------------------------------------------*\n   * FUNCTION: THIS SAS PROGRAM PROCESSES THE OUTPUT OF A        *\n   *           'LIST DDDEF' COMMAND FROM SMP/E, REPORTING        *\n   *           ON THE RESULTS AND OPTIONALLY CREATING            *\n   *           STATEMENTS TO REDEFINE ALL DDDEF'S VIA THE        *\n   *           UCLIN DD CARD.                                    *\n   *                                                             *\n   * NOTE:     THIS PROGRAM ASSUMES THE FOLLOWING FORMAT         *\n   *           FOR ALL DDDEF ENTRIES, EXCEPT THE CONCATENATIONS  *\n   *       1   DDNAME  DSN                                       *\n   *       2           VOL                                       *\n   *       3           UNIT                                      *\n   *       4           DISP                                      *\n   *                                                             *\n   *                                                             *\n   *-------------------------------------------------------------*/\n\n   DATA _NULL_;\n      INFILE SMPELIST;\n      INPUT @1 CC   $1.\n            @2 DATA $120.;\n      IF SUBSTR(CC,1,1)='1'         THEN DELETE;\n      IF SUBSTR(DATA,1,6)='  NAME'  THEN DELETE;\n      IF SUBSTR(DATA,1,5)=' NAME'   THEN DELETE;\n      IF SUBSTR(DATA,1,4)='NAME'   THEN DELETE;\n      IF SUBSTR(DATA,1,6)='MVSTGT'  THEN DELETE;\n      IF SUBSTR(DATA,1,20)='                     ' THEN DELETE;\n      DROP CC;\n      FILE SMPOUT LS=120 NOPRINT NOTITLE;\n           PUT @1 DATA;\n\n   DATA DDDEFS (KEEP=DDNAME DSN VOLUME UNIT DISP)\n        CONCATS (KEEP=DDNAME CONCAT)\n        ;\n        INFILE SMPOUT;\n        INPUT @1   DDNAME   $8.\n              @11  DATASET  $7.\n              @;\n\n        IF DATASET='CONCAT ' THEN DO ;\n           INPUT #1 @29 CONCAT $102.   ;\n           OUTPUT CONCATS;\n           RETURN;\n          END;\n\n        IF DATASET='DATASET' THEN DO ;\n           INPUT #1   @29  DSN      $44.\n                 #2   @1   V_OL     $6.\n                 @;\n           IF V_OL='VOLUME' THEN DO;\n              INPUT #2   @19  VOLUME   $6.\n                    #3   @1   U_NIT    $4.\n                 @;\n             END;\n           IF V_OL='SHR' | V_OL='MOD' | V_OL='OLD' THEN DO;\n              INPUT #2   @19  DISP     $4. ;\n              GOTO PUTM;\n             END;\n              IF U_NIT='UNIT' THEN DO;\n                 INPUT #3   @19  UNIT     $4.\n                       #4   @1   DISP     $3.\n                       ;\n                END;\n        PUTM:    OUTPUT DDDEFS;\n          END;\n\n\n   PROC PRINT DATA=CONCATS;\n\n   PROC SORT DATA=DDDEFS; BY DDNAME;\n\n   PROC PRINT DATA=DDDEFS;\n\n   DATA _NULL_;\n        SET DDDEFS END=EOF;\n        FILE UCLIN LS=80 NOTITLES NOPRINT LRECL=80 ;\n        IF _N_=1 THEN DO;\n           PUT @1 ' SET BDY(MVSTGT).' / @6 'UCLIN.' /\n               @6 'REP TZONE(MVSTGT) OPTIONS(OPTMVST).'\n           ;\n          END;\n\n      *------------------------------------;\n      * CHANGE VOLSER REFERENCE FOR SYSRES ;\n      *------------------------------------;\n\n    /*  IF VOLUME='MVSRES' THEN VOLUME='MVSDEV' ;   */\n\n\n        DA='DA('||DSN||')'; DA=COMPRESS(DA);\n        DD='DDDEF('||DDNAME||')'; DD=COMPRESS(DD);\n        VS='VOLUME('||VOLUME||')'; VS=COMPRESS(VS);\n        PUT @6  'REP ' DD ' ' DA\n         /  @10 VS ' UNIT(3380) '  DISP '.'\n        ;\n        IF EOF THEN PUT @3 'ENDUCL.' ;\n\n\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASEXPL": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00!\\x00!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "FILE022"}, "text": "//SASEXPL  PROC FIRST='SYS1',SECOND='PARMLIB',LD=D\n//*------------------------------------------------------------------*\n//*    LIB: SYS1.PROCLIB(SASEXPL  )                                  *\n//*    DOC: WRITE BOLD LETTERS W/DATE APPENDED TO SYSOUT FILES       *\n//*         USIN SAS'S PROC EXPLODE                                  *\n//*------------------------------------------------------------------*\n//PARMPASS EXEC PGM=PARMPASS,PARM='PROC EXPLODE; PARMCARDS;'\n//SYSOUT DD DSN=&&SASIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,1)\n//PARMPASS EXEC PGM=PARMPASS,PARM='&LD'      EITHER L-LIGHT OR D-DARK\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM=' &FIRST'\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM=' &SECOND'\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//DATE   EXEC  PGM=SASEXPLD * PUTS DATE IN PROC EXPLODE AND UNDERLINES\n//STEPLIB DD   DSN=HEDGESM.LINKLIB,DISP=SHR\n//SYSOUT  DD   DSN=&&SASIN,DISP=(MOD,PASS)\n//*\n//SAS     EXEC PGM=SAS,PARM='SORT=3',REGION=3M\n//LIBRARY   DD DISP=(MOD,PASS),DSN=&LIBRARY,\n//             UNIT=SYSDA,SPACE=(CYL,(1,,20))\n//STEPLIB   DD DISP=SHR,DSN=SYS1.SAS.LIBRARY\n//          DD DISP=(OLD,PASS),DSN=*.LIBRARY,VOL=REF=*.LIBRARY\n//SASUTL    DD DISP=SHR,DSN=SYS1.SAS.UTILLIB\n//WORK      DD UNIT=SYSDA,SPACE=(CYL,(1,1),,,ROUND)\n//FT11F001  DD DUMMY\n//FT12F001  DD SYSOUT=(,),DCB=(BLKSIZE=2640,LRECL=260,RECFM=VBA),\n// COPIES=2\n//FT13F001  DD SYSOUT=B,DCB=(RECFM=F,BLKSIZE=80)\n//FT14F001  DD DUMMY\n//FT15F001  DD UNIT=SYSDA,SPACE=(400,(100,300)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=1)\n//SYSIN     DD DSN=&&SASIN,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASNLDM": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xa5\\x00\\xa5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 165, "newlines": 165, "modlines": 0, "user": "FILE022"}, "text": "//HEDGES JOB (MOK,$),'HEDGES-TECH',CLASS=Z,MSGCLASS=X,\n//       NOTIFY=HEDGESM\n/*JOBPARM ROOM=TECH\n//SAS27   EXEC SAS,OPTIONS='NONEWS'\n//SMFIN    DD DSN=SYS1.SMFDUMPW,DISP=SHR\n//*SMF27    DD DSN=HEDGESM.TECH.SMF27,\n//*  DISP=(,CATLG),\n//* DCB=(RECFM=U,BLKSIZE=9076,LRECL=9072,DSORG=DA),\n//* UNIT=SYSDA,SPACE=(CYL,(4,1),RLSE),VOL=REF=HEDGESM.JCL\n//SYSOUT   DD DUMMY\n//SYSIN    DD *\n  OPTIONS NOSOURCE2 NODATE ERRORS=0 LABEL NOMACROGEN ;\n\nDATA SMF27 ;\n\n     INFILE SMFIN;\n\n     INPUT @2  LOGRRECT  PIB1. @;\n\n     IF LOGRRECT\u00ac=27 THEN DELETE;\n\n     INPUT @3  LOG_DATE  SMFSTAMP8.      /*  TIME + DATE STAMP      */\n           @11 LOGRSYID  $4.             /*  SYSID                  */\n           @15 LOGRSUBS  $4.             /*  SUBSYS ID              */\n           @19 LOGRSUBT  PIB2.           /*  RECORD SUB-TYPE        */\n        /*   DATA DESCRIPTOR SECTION     */\n           @21 LHDRPRDO  PIB4.           /*  OFFSET OF PRODUCT SEC. */\n           @25 LHDRPRDL  PIB2.           /*  - LENGTH               */\n           @27 LHDRPRDN  PIB2.           /*  - # OF SECTIONS        */\n           @29 LHDRSESO  PIB4.           /*  OFFSET OF CONFIG. SEC. */\n           @33 LHDRSESL  PIB2.           /*  - LENGTH               */\n           @35 LHDRSESN  PIB2.           /*  - # OF SECTIONS        */\n           @37 LHDRRTEO  PIB4.           /*  OFFSET ROUTE DATA SEC. */\n           @41 LHDRRTEL  PIB2.           /*  - LENGTH               */\n           @43 LHDRRTEN  PIB2.           /*  - # OF SECTIONS        */\n           @45 LHDRRTMO  PIB4.           /*  OFFSET RESP-TIME  SEC. */\n           @49 LHDRRTML  PIB2.           /*  - LENGTH               */\n           @51 LHDRRTMN  PIB2.           /*  - # OF SECTIONS        */\n           @53 LHDRACCO  PIB4.           /*  OFFSET ACCOUNTING SEC. */\n           @57 LHDRACCL  PIB2.           /*  - LENGTH               */\n           @59 LHDRACCN  PIB2.           /*  - # OF SECTIONS        */\n           @;\n\n        /*   SESSION CONFIGURATION DATASECTION    */\n        INPUT @LHDRSESO\n               LSESREVL  PIB2.           /* REVISION LEVEL: 2       */\n               LSESPNAM  $8.             /* PRIMARY LOG UNIT: PLU   */\n               LSESPPUN  $8.             /* PRIM PHYISCAL UNIT: PU  */\n               LSESPLNK  $8.             /* PRIM. LINK NAME         */\n               LSESPSAP  $8.             /* PLU SUBAREA PU          */\n               LSESPDOM  $8.             /* PLU DOMAIN NAME         */\n               LSESSNAM  $8.             /* SECONDARY: SLU          */\n               LSESSPUN  $8.             /* PU  FOR  SLU            */\n               LSESSLNK  $8.             /* LINK NAME OF SLU        */\n               LSESSSAP  $8.             /* SLU SUBAREA PU          */\n               LSESSDOM  $8.             /* SLU DOMAIN              */\n               LSESPCLS  $8.             /* PERM. CLASS NAME        */\n               LSESCOST  $8.             /* CLASS OF SERVICE        */\n               LSESSERN  PIB2.           /* EXPLICIT ROUTE NUMBER   */\n               LSESRERN  PIB2.           /* REVERSE EXPLICIT RTE NO.*/\n               LSESSVRN  PIB2.           /* VIRTUAL ROUTE NUMBER    */\n               LSESSTPF  PIB2.           /* TRANSMISSION PRIORITY   */\n               LSESPCID  PIB8.           /* UNIQUE SESSION ID: PCID */\n               LSESTYPE  $1.             /* SESSION TYPE: 1-4       */\n               LSESXNET  $1.             /* CROSS NETWORK: Y/N      */\n               LSESCODE  PIB1.           /* BIND/UNBIND REASON CDE  */\n               @;\n         * NOTE: IF DATA IS UNAVAILABLE THEN\n                 LSESPPUN, LSESPLNK, AND LSESPSAP = X'00' ;\n\n   * NOTE: THE PRODUCT SECTION WILL BE SKIPPED ;\n\n   * DETERMINE RECORD SUBTYPE ;\n     IF LOGRSUBT=1 THEN DO;              * COLLECT RMT LOG           ;\n        LINK ROUTDATA;\n        LINK RESPTME;\n       END;\n     IF LOGRSUBT=2 THEN DO;              * SESSION END               ;\n        LINK ROUTDATA;\n        LINK RESPTME;\n        LINK ACCT;\n       END;\n     IF LOGRSUBT=3 THEN DO;              * SESSION START             ;\n        LINK ROUTDATA;\n        LINK ACCT;\n       END;\n     IF LOGRSUBT=4 THEN DO;              * ACCOUNTING AND AVAIL. DATA;\n        LINK ACCT;\n       END;\n     IF LOGRSUBT=5 THEN DO;              * COMBINED                  ;\n        LINK ROUTDATA;\n        LINK RESPTME;\n        LINK ACCT;\n       END;\n     IF LOGRSUBT=6 THEN DO;              * BIND FAILURE              ;\n        LINK ROUTDATA;\n       END;\n\n   INPUT ;\n\n   OUTPUT;\n\n     RETURN ;\nPAGE;\n   ROUTDATA:   INPUT @LHDRRTEO  @;\n         INPUT LRTEREVL  PIB2.           /* REVISION LEVEL: 1       */\n               LRTENUME  PIB2.           /* NUMBER OF ROUTE ELEMENTS*/\n               LRTENUMT  PIB2.           /* - # IN TABLE            */\n               @;\n            DO I=1 TO LRTENUME;\n               INPUT LRTEENAM   PIB8.    /* ROUTE ELELMENT NAME     */\n                     LRTEETGO   PIB2.    /* ROUTE ELELMENT NAME     */\n                     @;\n              END;\n    RETURN;\n\n   RESPTME: INPUT @LHDRRTMO  @; * LENGTH=LHRRRTML NUMBER=LHDRRTMN ;\n            INPUT LRTMREVL  PIB2.        /* REVISION LEVEL: 1       */\n                  LRTMCOLB  TODSTAMP4.   /* COLLECTION PERIOD TIME  */\n                  LRTMFIL1  PIB4.\n                  LRTMCOLE  TODSTAMP4.   /* - END TIME STAMP        */\n                  LRTMFIL2  PIB4.\n                  LRTMOBJP  PIB2.        /* OBJECTIVE - %           */\n                  LRTMOBJB  PIB2.        /* OBJECTIVE - COUNTER NUM */\n                  LRTMDEF     $1.        /* RESPONSE TIME DEF.      */\n                  LRTMOBJF    $1.        /* OBJECTIVE MET ? Y/N     */\n      /* 3274 */  LRTMTRAN  PIB4.        /* NUMBER OF TRANS MEASURED*/\n      /* 3274 */  LRTMTOTT  PIB4.        /* TOTAL RESPONCE DELAY    */\n                  L_TMBNDS  PIB8.        /* COUNTER BOUNDARIES      */\n                  BNDS1     PIB8.        /*                         */\n      /* 3274 */  L_TMBKTS  PIB8.        /* - CONTENTS              */\n                  BKTS1     PIB8.        /*                         */\n                  BKTS2     PIB4.        /*                         */\n                  LRTMOBJT  PIB4.        /* OBJECTIVE RESP. TIME    */\n                  @;\n           DROP LRTMFIL1 LRTMFIL2 ;\n           LRTMBNDS=L_TMBNDS||BNDS1;\n           LRTMBKTS=L_TMBKTS||BKTS1||BKTS2;\n     RETURN;\n\n   ACCT:    INPUT @LHDRACCO  @;   * LENGTH=LHDRACCL NUMBER=LHDRACCN ;\n            INPUT LACCREVL  PIB2.        /* REVISION LEVEL: 2       */\n                  LACCBEGT  TODSTAMP4.   /* COLLECTION TIME STAMP   */\n                  LACCFIL1  PIB4.        /*                         */\n                  LACCENDT  TODSTAMP4.   /* - END TIME STAMP        */\n                  LACCFIL2  PIB4.        /*                         */\n                  LACCPCBC  PIB4.        /* # PIU'S FROM 1 TO 2     */\n                  LACCPCCC  PIB4.        /* # CNTL BYTES FROM 1 TO 2*/\n                  LACCSCBC  PIB4.        /* # CNTL PUI'S 1 TO 2     */\n                  LACCSCCC  PIB4.        /* # CNTL BYTES 2 TO 1     */\n                  LACCPTBC  PIB4.        /* # TEXT PIU'S 1 TO 2     */\n                  LACCPTCC  PIB4.        /* # TEXT BYTES 1 TO 2     */\n                  LACCSTBC  PIB4.        /* # TEXT PIU'S 2 TO 1     */\n                  LACCSTCC  PIB4.        /* # TEXT BYTES 2 TO 1     */\n                  @;\n           DROP  LACCFIL1 LACCFIL2 ;\n\n     RETURN;\n\n\n\n\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASSMF3R": {"ttr": 5645, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "FILE022"}, "text": "//HEDGES JOB (MOK,$),'HEDGES-TECH',CLASS=Z,MSGCLASS=X\n/*JOBPARM ROOM=TECH\n//*\n//SAS     EXEC SAS,OPTIONS='NONEWS'\n//SMFIN     DD DSN=SYS1.SMFDUMPW,DISP=SHR\n//MACROS    DD DSN=TECH.CBT.RMHFILE,DISP=SHR\n//SMF30     DD  DSN=HEDGESM.SMF30,DISP=SHR\n//SYSIN     DD  *\n  OPTIONS NOMACROGEN NOSOURCE2 DATE SOURCE ERRORS=0 ;\n\n  %INCLUDE MACROS(SAS30M,SASTIMES) ;\n\n  OPTIONS MACROGEN SOURCE2 DATE SOURCE ERRORS=0 ;\n\n  DATA TSO;\n       %SET(SUBTYPE=4)\n       IF PGMNAME \u00ac= 'IKJEFT01' THEN DELETE;\n\n  PROC SUMMARY DATA=TSO NWAY;\n       CLASS EDATE JOBNAME ;\n       %STATS\n       OUTPUT OUT=TSO SUM=;\n\n  PROC PRINT DATA=TSO ;\n       VAR JOBNAME _FREQ_ %STATS(PRINT=Y) ;\n       TITLE 'TSO STATS BY JOBNAME NAME' ;\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASSMF30": {"ttr": 5647, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x01\\xe7\\x01\\xe7\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 487, "newlines": 487, "modlines": 0, "user": "FILE022"}, "text": "//SAS     EXEC SAS,OPTIONS='NONEWS'\n//SMFIN     DD DSN=SMFDUMP,DISP=SHR\n//MACRO    DD DSN=THIS.LIBRARY,DISP=SHR\n//SMF30     DD  DSN=HEDGESM.SMF30,\n//          DISP=(,CATLG),UNIT=SYSDA,SPACE=(CYL,(20,1),RLSE),\n//          DCB=(RECFM=U,BLKSIZE=18148,LRECL=9072,DSORG=DA),\n//          VOL=SER=DATA07\n//SYSIN     DD  *\n  OPTIONS NOMACROGEN NOSOURCE2 DATE SOURCE ERRORS=0 ;\n\n*---------------------------------------------------------------*\n* DOC: THIS PROGRAM READS TYPE 30 SMF RECORDS AND WRITES        *\n*      THEM TO A SAS FILE BASED ON THEIR SUB RECORD TYPES       *\n*                                                               *\n* NOTE: ALL SYSTEM TIMES ARE IN DATETIME FORMATS,               *\n*       ALL CPU MEASUREMENTS HAVE BEEN CONVERTED TO SECONDS,    *\n*       ALL REGION MEASUREMENTS HAVE BEEN CONVERTED TO 1K VALUES*\n*---------------------------------------------------------------*;\n\nDATA SMF30.SMF30S1\n     SMF30.SMF30S2\n     SMF30.SMF30S3\n     SMF30.SMF30S4\n     SMF30.SMF30S5\n     SMF30.SMF30S6\n     ;\n     INFILE SMFIN MISSOVER;\n     INPUT @2 TYPE PIB1. @;\n     IF TYPE\u00ac=30 THEN DELETE;\n     INPUT @3  ENDTIME   SMFSTAMP8.     /* END DATE+TIME STAMP    */\n           @11 SYSID     $4.            /* SYSTEM ID              */\n           @15 SUBSYS    $4.            /* SUBSYSTEM ID           */\n           @19 RECSUBTY  PIB2.          /* RECORD SUB_TYPE        */\n           @;\n      *----------------------------------*\n      * RECSUBTY  IDENTIFICATION         *\n      *   1        JOB START             *\n      *   2        INTERVAL              *\n      *   3        STEP TERMINATION      *\n      *   4        STEP TOTAL            *\n      *   5        JOB TERMINATION       *\n      *   6        SYSTEM ADDR. SPACE    *\n      *----------------------------------* ;\n\nPAGE;\n *----------------------------------------------------------------*\n *                    OFFSET SECTIONS                             *\n *                                                                *\n *     NOTE: ALL OFFSETS INCLUDE THE RECORD_DESC_WORD = 3 BYTES   *\n *                                                                *\n *----------------------------------------------------------------* ;\n\n   INPUT   @21 OFF_SUB   PIB4.          /* OFFSET TO SUB SECTION  */\n           @25 LEN_SUB   PIB2.          /* LENGTH                 */\n           @27 NUM_SUB   PIB2.          /* NUMBER                 */\n           @29 OFF_ID    PIB4.          /* OFFSET TO ID  SECTION  */\n           @33 LEN_ID    PIB2.          /* LENGTH                 */\n           @35 NUM_ID    PIB2.          /* NUMBER                 */\n           @37 OFF_IO    PIB4.          /* OFFSET TO IO  SECTION  */\n           @41 LEN_IO    PIB2.          /* LENGTH                 */\n           @43 NUM_IO    PIB2.          /* NUMBER                 */\n           @45 OFF_CM    PIB4.          /* OFFSET TO COMPLETION SE*/\n           @49 LEN_CM    PIB2.          /* LENGTH                 */\n           @51 NUM_CM    PIB2.          /* NUMBER                 */\n           @53 OFF_PR    PIB4.          /* OFFSET TO PROCESSOR SEC*/\n           @57 LEN_PR    PIB2.          /* LENGTH                 */\n           @59 NUM_PR    PIB2.          /* NUMBER                 */\n           @61 OFF_AC    PIB4.          /* OFFSET TO ACCNT. SEC   */\n           @65 LEN_AC    PIB2.          /* LENGTH                 */\n           @67 NUM_AC    PIB2.          /* NUMBER                 */\n           @69 OFF_SS    PIB4.          /* OFFSET TO STORAGE SEC  */\n           @73 LEN_SS    PIB2.          /* LENGTH                 */\n           @75 NUM_SS    PIB2.          /* NUMBER                 */\n           @77 OFF_PS    PIB4.          /* OFFSET TO PERFORMANCE  */\n           @81 LEN_PS    PIB2.          /* LENGTH                 */\n           @83 NUM_PS    PIB2.          /* NUMBER                 */\n           @85 OFF_OS    PIB4.          /* OFFSET TO OPERATION    */\n           @89 LEN_OS    PIB2.          /* LENGTH                 */\n           @91 NUM_OS    PIB2.          /* NUMBER                 */\n           @93 OFF_EX    PIB4.          /* OFFSET TO EXEC SECTION */\n           @97 LEN_EX    PIB2.          /* LENGTH                 */\n           @99 NUM_EX    PIB2.          /* NUMBER                 */\n          @101 NUM_EXS   PIB2.          /* NUMBER OF EXCP SECS.\n                                           IN SUBSEQUENT REORDS   */\n           @;\n\nPAGE;\n *----------------------------------------------------------------*\n *                    SUB SYSTEM SECTION                          *\n *----------------------------------------------------------------* ;\n\n     IF NUM_SUB \u00ac= 0  THEN DO;\n         POINTER=OFF_SUB; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30TYP  PIB2.\n                      SMF30RS1  PIB2.\n                      SMF30RVN  $2.\n                      SMF30PNM  $8.\n                     @;\n                     DROP SMF30RS1 ;\n            LABEL SMF30TYP='SUB*TYPE'\n                  SMF30RVN='REC*VER*NUM'\n                  SMF30PNM='SUBSYS*NAME'\n                  ;\n       END;\nPAGE;\n *----------------------------------------------------------------*\n *               IDENTIFICATION  SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_ID \u00ac= 0 THEN DO;\n         POINTER=OFF_ID; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30JBN  $8.     /* JOB OR SESSION NAME    */\n                      SMF30PGM  $8.     /* PROGRAM NAME           */\n                      SMF30STM  $8.     /* STEP NAME              */\n                      SMF30UIF  $8.     /* USER FROM EXIT         */\n                      SMF30JNM  $8.     /* JES NUMBER             */\n                      SMF30STN  PIB2.   /* STEP NUMBER 1-?        */\n                      SMF30CLS  $1.     /* JOB CLASS/BLANK FOR TSO*/\n                      ID_FILL1  PIB1.   /* RSVD                   */\n                      SMF30PGN  PIB2.   /* PERFORMANCE GROUP      */\n                      SMF30JPT  PIB2.   /* JOB PRIORITY           */\n                      SMF30AST  PIB4.   /* DEV ALLOC START TIME   */\n                      SMF30PPS  PIB4.   /* PROB. PGM STRT TIME    */\n                      SMF30SIT  SMFSTAMP8. /*INIT. PGM STRT TIME */\n                      SMF30STD  SMFSTAMP8. /*RDR START TIME       */\n                      SMF30RST  SMFSTAMP8. /*RDR ENDTIME          */\n                      SMF30USR  $20.    /* PROGRAMMER NAME        */\n                      SMF30GRP  $8.     /* RACF GROUP             */\n                      SMF30RUD  $8.     /* RACF USER              */\n                      SMF30TID  $8.     /* RACF TERM ID           */\n                      @;\n               DROP ID_FILL1 ;\n         LABEL   SMF30JBN='JOB*NAME'      SMF30PGM='PROGRAM*NAME'\n                 SMF30STN='STEP*NUMBER'   SMF30PPS='PGM*STRT*TIME'\n                 SMF30JNM='JES*NUMBER'    SMF30UIF='USER*EXIT'\n                 SMF30CLS='JOB*CLASS'     SMF30PGN='PERFOR.*GROUP'\n                 SMF30JPT='JOB*PRIORITY'  SMF30AST='DEVALLOC*TIME'\n                 SMF30SIT='INIT*STRT*TIME' SMF30STD='RDR*START*TIME'\n                 SMF30RST='RDR*ENDTIME'   SMF30USR='PROG*NAME'\n                 SMF30GRP='RACF*GROUP'    SMF30RUD='RACF*USER'\n                 SMF30TID='RACF*TERMID'\n                    ;\n       * NOW IN SECONDS, PROBLEM PGM START TIME;\n         SMF30PPS=SMF30PPS/100;\n         END;\nPAGE;\n *----------------------------------------------------------------*\n *                      I/O      SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_IO \u00ac= 0 THEN DO;\n         POINTER=OFF_IO; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30INP PIB4.   /* # OF INPUT CARDS       */\n                      SMF30TEP PIB4.   /* TOTAL BLOCKS TRANS     */\n                      SMF30TPT PIB4.   /* TOTAL # OF TPUTS       */\n                      SMF30TGT PIB4.   /* TOTAL # OF TGETS       */\n                      IO_FILL1 PIB2.   /*                        */\n                      SMF30TCN PIB4.   /* TOTAL DEVICE CONN. TIME*/\n                      IO_FILL2 PIB4.   /*                        */\n                      @;\n              DROP  IO_FILL1 IO_FILL2 ;\n             LABEL    SMF30INP='NUM*CARDS' SMF30TEP='TOT*BLOCKS*TRANS'\n                      SMF30TPT='TPUTS'     SMF30TGT='TGETS'\n                      SMF30TCN='DEVICE*CONN.*TIME'\n                      ;\n         END;\nPAGE;\n *----------------------------------------------------------------*\n *               COMPLETION      SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_CM \u00ac= 0 THEN DO;\n         POINTER=OFF_CM; POINTER=POINTER-3;\n         FORMAT SMF30SCC SMF30STI HEX4.  SMF30ARC HEX8.  ;\n         LENGTH REASON $8. ;\n         INPUT @POINTER\n                      SMF30SCC PIB2.    /* COMPLETION CODE        */\n                      SMF30ST1 PIB1.    /* REASON CODES ...       */\n                      SMF30ST2 PIB1.    /*                        */\n                      SMF30ARC PIB4.    /* ABEND CODE             */\n                      @;\n           LABEL   SMF30SCC='COMPLETION*CODE'\n                   SMF30ARC='ABEND*CODE'\n                   ;\n           IF SMF30ST1='..1.....'B THEN REASON='IEFUJI';\n           IF SMF30ST1='...1....'B THEN REASON='IEFUSI';\n           IF SMF30ST1='....1...'B THEN REASON='IEFACTRT' ;\n           IF SMF30ST1='.....1..'B THEN DO;\n              IF SMF30SCC=0322X OR SMF30SCC=0522X THEN\n                 REASON='IEFUTL';\n              IF SMF30SCC=0722X THEN REASON='IEFUSO';\n             END;\n           IF SMF30ST1='......1.'B THEN REASON='FLUSH';\n           IF SMF30ST1='.......1'B THEN REASON='BAD EXCP';\n           IF SMF30ST2='1.......'B THEN REASON='ERROR IN';\n           DROP SMF30ST1 SMF30ST2 ;\n        END;\nPAGE;\n *----------------------------------------------------------------*\n *                    PRODUCT    SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_PR \u00ac= 0 THEN DO;\n         POINTER=OFF_PR; POINTER=POINTER-3;\n         FORMAT SMF30PT1  SMF30PT2   HEX2.;\n         INPUT @POINTER\n               /*     SMF30PTY PIB2.       DISP. PRIORITY         */\n                      PR_FILL2 PIB1.    /* DISP. PRIORITY 1       */\n                      SMF30PTY PIB1.    /* DISP. PRIORITY 2       */\n                      PR_FILL1 PIB2.    /* RSVD                   */\n                      SMF30CPT PIB4.    /* TCB TIME IN 100THS     */\n                      SMF30CPS PIB4.    /* SRB TIME IN 100THS     */\n                      SMF30ICU PIB4.    /* TCB TIME IN 100THS INIT*/\n                      SMF30ISB PIB4.    /* SRB TIME IN 100THS INIT*/\n                      @;\n         * NOW IN SECONDS ;\n           SMF30CPT = SMF30CPT / 100 ;\n           SMF30CPS = SMF30CPS / 100 ;\n           SMF30ICU = SMF30ICU / 100 ;\n           SMF30ISB = SMF30ISB / 100 ;\n           CPUTIME = (SMF30CPT + SMF30CPS) ;\n           DROP PR_FILL1 PR_FILL2 ;\n           LABEL   CPUTIME='CPU*SEC'       SMF30PTY='DRPTY'\n                   SMF30CPT='TCB*SEC'      SMF30CPS='SRB*SEC'\n                   SMF30ICU='TCB*SEC*INIT' SMF30ISB='SRB*SEC*INIT'\n                   ;\n        END;\n\nPAGE;\n *----------------------------------------------------------------*\n *                 ACCOUNTING    SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_AC \u00ac= 0 THEN DO;\n         POINTER=OFF_AC; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30ACL PIB1.    /* LENGTH OF ACCOUNT SEC  */\n                                        /* ACCOUNTING INFO STEP   */\n                      SMF30ACT $VARYING20. SMF30ACL\n                      @;\n           DROP SMF30ACL ;\n           LABEL   SMF30ACT='ACCOUNT*INFO'\n                   ;\n        END;\nPAGE;\n *----------------------------------------------------------------*\n *                 STORAGE       SECTION                          *\n *----------------------------------------------------------------* ;\n\n      IF NUM_SS \u00ac= 0 THEN DO;\n         POINTER=OFF_SS; POINTER=POINTER-3;\n         FORMAT SMF30SPK HEX1. SMF_SPK HEX2. ;\n         INPUT @POINTER\n                      SS_FILL1  PIB2.   /* RSVD                   */\n                      SMF30SFL  PIB1.   /* STOR. FLAGS            */\n                      SMF_SPK   PIB1.   /* STOR. PROT KEY=XXXX0000*/\n                      SMF30PRV  PIB2.   /* STOR. USED K BOTTOM UP */\n                      SMF30SYS  PIB2.   /* STOR. USED K TOP DOWN  */\n                      SMF30PGI  PIB4.   /* PAGE INS               */\n                      SMF30PGO  PIB4.   /* PAGE OUT               */\n                      SMF30REC  PIB4.   /* PAGES RECLAIMED        */\n                      SMF30NSW  PIB4.   /* SWAP OUTS AND BACK IN  */\n                      SMF30PSI  PIB4.   /* PAGE INS+LSQA,FIX-RCLM */\n                      SMF30PSO  PIB4.   /* PAGE OUT+LSQA,FIX      */\n                      SMF30VPI  PIB4.   /* VIO PAGE INS           */\n                      SMF30VPO  PIB4.   /* VIO PAGE OUTS          */\n                      SMF30VPR  PIB4.   /* VIO PAGE RECLAIMS      */\n                      SMF30CPI  PIB4.   /* COMMON PAGE INS        */\n                      SMF30CPR  PIB4.   /* COMMON PAGE RECLAIMS   */\n                      SMF30LPI  PIB4.   /* LPA PAGE INS           */\n                      SMF30LPR  PIB4.   /* LPA PAGE RECLAIMS      */\n                      SMF30PST  PIB4.   /* PAGE STEELS            */\n                      SMF30PSC  PIB8.   /* CPU PAGE SECONDS       */\n                      SMF30RGB  PIB4.   /* PRIVATE BELOW 16M      */\n                      SMF30ERG  PIB4.   /* PRIVATE ABOVE 16M      */\n                      SMF30ARB  PIB4.   /* LSQA+SWA BELOW 16M     */\n                      SMF30EAR  PIB4.   /* LSQA+SWA BELOW 16M     */\n                      SMF30URB  PIB4.   /* MAX RGN IN BYTES SUBPOL*/\n                      SMF30EUR  PIB4.   /* MAX RGN IN BYTES SUBPOL*/\n                      SMF30RGN  PIB4.   /* REGION ROUNDED 4K      */\n                      @;\n         * CONVERT STORAGE PROTECTION KEY TO 1 HEX VALUE ;\n           SMF30SPK=SUBSTR(SMF_SPK,2,1);   * STOR. PROT KEY=XXXX0000 ;\n         * CONVERT EVERYTHING TO K BYTES;\n           SMF30RGB = SMF30RGB / 1024  ;\n           SMF30ERG = SMF30ERG / 1024  ;\n           SMF30ARB = SMF30ARB / 1024  ;\n           SMF30EAR = SMF30EAR / 1024  ;\n           SMF30URB = SMF30URB / 1024  ;\n           SMF30EUR = SMF30EUR / 1024  ;\n\n           DROP  SS_FILL1 ;\n           LABEL SMF30SFL='STOR*FLAGS'      SMF30SPK='STOR*PROTKEY'\n                 SMF30PRV='STOR*INKBOT'     SMF30SYS='STOR*INKTOP'\n                 SMF30PGI='PAGE*INS'        SMF30PGO='PAGE*OUT'\n                 SMF30REC='PAGES*RECL'      SMF30NSW='SWAP*OUTS*IN'\n                 SMF30PSI='PAGE*INS+LSQA'   SMF30PSO='PAGE*OUT+LSQA'\n                 SMF30VPI='VIO*PAGEINS'     SMF30VPO='VIO*PAGEO'\n                 SMF30VPR='VIO*PAGE*RECL'   SMF30CPI='COM.*PGINS'\n                 SMF30CPR='COM.*PAGE*RECL'  SMF30LPI='LPA*PGEINS'\n                 SMF30LPR='LPA*PAGE*RECL'   SMF30PST='PAGE*STEELS'\n                 SMF30PSC='CPU*PAGE*SECS'   SMF30RGB='PRIV*SWA*K'\n                 SMF30ERG='EXT*PRIV*K'      SMF30ARB='ELSQA*SWA*K'\n                 SMF30EAR='LSQA*SWA*K'      SMF30URB='RGN*SYSTEM*K'\n                 SMF30RGN='REGION*K'        SMF30EUR='ERGN*SYSTEM'\n                  ;\n        END;\nPAGE;\n *----------------------------------------------------------------*\n *                        PERFROMANCE SECTION                     *\n *----------------------------------------------------------------* ;\n\n      IF NUM_PS \u00ac= 0 THEN DO;\n         POINTER=OFF_PS; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30SRV PIB4.    /* TOTAL SERVICE UNITS    */\n                      SMF30CSU PIB4.    /* CPU SERVICE UNITS      */\n                      SMF30SRB PIB4.    /* SRB                    */\n                      SMF30IOV PIB4.    /* I/O                    */\n                      SMF30MSO PIB4.    /* MSO                    */\n                      SMF30TAT PIB4.    /* TANS ACTIVE TIME       */\n                      SMF30TET PIB4.    /* RSVD                   */\n                      SMF30RES PIB4.    /* TRQNS RESD TIME        */\n                      SMF30TRS PIB4.    /* TOTAL TRANS            */\n                      @;\n               LABEL  SMF30SRV='TOTAL*SERV*UNITS'\n                      SMF30CSU='CPU*SERV*UNITS'\n                      SMF30SRB='SRB*SERV*UNITS'\n                      SMF30IOV='I/O*SERV*UNITS'\n                      SMF30MSO='MSO*SERV*UNITS'\n                      SMF30TAT='TRANS*ACTIVE*TIME'\n                      SMF30RES='TRANS*RESD*TIME'\n                      SMF30TRS='TOTAL*TRANS'\n                      ;\n           END;\n\nPAGE;\n *----------------------------------------------------------------*\n *                      OPERATOR  SECTION                         *\n *----------------------------------------------------------------* ;\n\n      IF NUM_OS \u00ac= 0 THEN DO;\n         POINTER=OFF_OS; POINTER=POINTER-3;\n         INPUT @POINTER\n                      SMF30PDM PIB4.    /* NUM NON-SPECF DASD MOUNTS*/\n                      SMF30PRD PIB4.    /* NUM SPECF DASD MOUNTS  */\n                      SMF30PTM PIB4.    /* NUM TAPE               */\n                      SMF30TPR PIB4.    /* NUM TAPE               */\n                      SMF30MTM PIB4.    /* NUM MSS                */\n                      SMF30MSR PIB4.    /* NUM MSS                */\n                      @;\n                    SMF30TP=SMF30PRD+SMF30PTM;\n               LABEL SMF30TP='TOTAL*TAPE*MOUNTS'\n                     ;\n               DROP  SMF30PDM SMF30PRD\n                     SMF30MTM SMF30MSR\n                     SMF30PTM SMF30TPR\n                     ;\n         END;\n\nPAGE;\n *----------------------------------------------------------------*\n *                      EXCP      SECTION                         *\n *----------------------------------------------------------------* ;\n\n      IF NUM_EX \u00ac= 0 THEN DO;\n         POINTER=OFF_EX; POINTER=POINTER-3;\n         INPUT @POINTER @;\n         DO I=1 TO NUM_EX;\n              INPUT   SMF30DEV PIB1.    /* DEVICE CLASS             */\n                      SMF30UTP PIB1.    /* UNIT TYPE                */\n                      SMF30CUA PIB2.    /* DEVICE NUMBER            */\n                      SMF30DDN $8.      /* DDNAME                   */\n                      SMF30BLK PIB4.    /* BLOCK COUNT              */\n                      SMF30BSZ PIB2.    /* BIT SETTINGS:\n                                           0 - CHANGED BLKSIZE\n                                           1-15 LARGEST BLOCK SIZE  */\n                      SMF_DCT PIB4.     /* DEVICE CONNECT TIME IN\n                                           128 MICRO SECOND UNITS   */\n                      @;\n        * CHECK FOR BLOCK SIZE BIT CHANGE ;\n         IF SMF30BSZ='1...............'B THEN\n                     SMF30BSZ=SMF30BSZ-80X;\n\n         IF SMF30DEV=32 THEN DO;         * DASD 3350 AND 3380 ;\n            IF SMF30UTP=0BX THEN DO;\n               EXCP3350=SUM(EXCP3350,SMF30BLK);\n               DEVT3350=SUM(DEVT3350,SMF_DCT);\n              END;\n            IF SMF30UTP=0EX THEN DO;\n               EXCP3380=SUM(EXCP3380,SMF30BLK);\n               DEVT3380=SUM(DEVT3380,SMF_DCT);\n              END;\n           END;\n\n         IF SMF30DEV=080X THEN DO;       * TAPE 3480 AND 3420 S;\n            IF SMF30UTP=80X THEN DO;\n               EXCP3480=SUM(EXCP3480,SMF30BLK);\n               DEVT3480=SUM(DEVT3480,SMF_DCT);\n              END;\n              ELSE DO;\n               EXCP3420=SUM(EXCP3420,SMF30BLK);\n               DEVT3420=SUM(DEVT3420,SMF_DCT);\n              END;\n          END;\n       * TOTAL EVERYTHING ;\n         TOTEXCP=SUM(TOTEXCP,SMF30BLK);\n         TOTDEVT=SUM(TOTDEVT,SMF_DCT);\n       END;\n         LABEL        SMF30DEV='DEVICE*CLASS'\n                      SMF30UTP='UNIT*TYPE'\n                      SMF30CUA='DEVICE*NUMBER'\n                      SMF30DDN='DDNAME'\n                      SMF30BLK='BLOCK*COUNT'\n                      SMF30BSZ='BLKSIZE'\n                      SMF30DCT='DEVICE*CONNECT*TIME'\n                      EXCP3420='EXCP*3420'\n                      EXCP3480='EXCP*3480'\n                      EXCP3380='EXCP*3380'\n                      EXCP3350='EXCP*3350'\n                      TOTEXCP='TOTAL*EXCPS'\n                      DEVT3420='DEV*CONN*3420'\n                      DEVT3480='DEV*CONN*3480'\n                      DEVT3380='DEV*CONN*3380'\n                      DEVT3350='DEV*CONN*3350'\n                      TOTDEVT='TOTAL*DEVICE*CONN'\n                      ;\n\n       * CHANGE 128 MICRO SECONDS INTO SECONDS;\n         SMF30DCT=SMF_DCT  / 12800 ;\n         DEVT3420=DEVT3420 / 12800 ;\n         DEVT3480=DEVT3480 / 12800 ;\n         DEVT3350=DEVT3350 / 12800 ;\n         DEVT3380=DEVT3380 / 12800 ;\n         DROP SMF_DCT ;\n      END;\nPAGE;\n *----------------------------------------------------------------*\n *                   CLEANUP      SECTION                         *\n *----------------------------------------------------------------* ;\n\n  INPUT  ;\n\n           EDATE=DATEPART(ENDTIME);  ETIME=TIMEPART(ENDTIME);\n\n           FORMAT EDATE DATE7.\n                  ENDTIME  SMF30SIT SMF30STD SMF30RST DATETIME16.\n                  ETIME INTERVAL TIME7.\n                  COMPCODE ABEND HEX8.\n                  ;\n\n   LENGTH JOBNAME PGMNAME STEPNAME JOBNUM $8. JOBCLASS $1.\n          ;\n\n  DROP OFF_SUB LEN_SUB NUM_SUB OFF_ID LEN_ID NUM_ID OFF_IO LEN_IO\n       NUM_IO OFF_CM LEN_CM NUM_CM OFF_PR LEN_PR NUM_PR OFF_AC\n       OFF_PS LEN_AC NUM_AC OFF_SS LEN_SS NUM_SS LEN_PS NUM_PS\n       OFF_OS LEN_OS NUM_OS OFF_EX LEN_EX  NUM_EX\n       POINTER\n       ;\n\n * LETS GET SOME NORMAL NAMES .....;\n   JOBNAME=SMF30JBN;\n   PGMNAME=SMF30PGM;\n   STEPNAME=SMF30STM;\n   JOBNUM=SMF30JNM;\n   JOBCLASS=SMF30CLS;\n   COMPCODE=SMF30SCC;\n   ABEND=SMF30ARC;\n\n\n* SEE 'SYS1.PARMLIB(SMFPRM00)' FOR INTERVAL PERIOD;\n  IF RECSUBTY=2 OR RECSUBTY=3 THEN\n     INTERVAL='00:20:00'T ;\n\n  IF RECSUBTY=1 THEN OUTPUT SMF30.SMF30S1 ;\n  IF RECSUBTY=2 THEN OUTPUT SMF30.SMF30S2 ;\n  IF RECSUBTY=3 THEN OUTPUT SMF30.SMF30S3 ;\n  IF RECSUBTY=4 THEN OUTPUT SMF30.SMF30S4 ;\n  IF RECSUBTY=5 THEN OUTPUT SMF30.SMF30S5 ;\n  IF RECSUBTY=6 THEN OUTPUT SMF30.SMF30S6 ;\n\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASSMP": {"ttr": 5895, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xd5\\x00\\xd5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 213, "newlines": 213, "modlines": 0, "user": "FILE022"}, "text": "//SASSMP JOB\n//  EXEC SMPEPROC\n//SMPLIST  DD DSN=&&SMPE,UNIT=SYSDA,DISP=(,PASS),\n//         SPACE=(CYL,(10,1)),DCB=BLKSIZE=12100\n//SMPCNTL  DD  *\n    SET BDY(GLOBAL).\n        LIST SYSMOD NOAPPLY(TARGET).\n//*\n//SAS     EXEC SAS\n//MACROS   DD  DSN=THIS.DATASET,DISP=SHR\n//SMPELIST DD  DSN=&&SMPE,DISP=(OLD,DELETE)\n//SMPOUT   DD  UNIT=SYSDA,SPACE=(CYL,(10,1)),DSN=&&SMPOUT,\n//         DISP=(,PASS),DCB=(LRECL=120,BLKSIZE=12000,RECFM=FB)\n//SYSIN    DD  *\n /*----------------------------------------------------------------*\n *                                                                 *\n * SASSMP: THIS PROGRAM PROCESSES THE OUTPUT OF ANY LIST FUNCTION  *\n *         FROM SMP/E. IT EVALUATES SYSMODS ON THE BASIS OF        *\n *         THEIR STATUS, SREL, AND FMID, AND REPORTS ACCORDINGLY.  *\n *                                                                 *\n *----------------------------------------------------------------*/\n PAGE;\n  OPTIONS NOMACROGEN MPRINT DATE  ERRORS=0 ;\n\n\n /*----------------------------------------------------------------*\n * REWRITE THE SMPELIST FILE TO REMOVE ALL UNNECESSARY INFO FOR    *\n * EASIER PROCEESING.                                              *\n *                                                                 *\n * NOTE: YOU MUST INCLUDE THE NAMES OF YOUR 'GLOBAL' 'TARGET' AND  *\n *       'DLIB' ZONES IN THIS CODE.                                *\n *----------------------------------------------------------------*/\n\n     %INCLUDE MACROS(SMPPRE) ;\n\n   DATA SYSMODS (KEEP=SYSMOD TYPE STATUS DATE TIME SREL FMID R_DATE\n                      JCLIN SOURCEID)\n        APPLIED (KEEP=SYSMOD TYPE STATUS DATE TIME SREL FMID R_DATE\n                      IN_DATE IN_TIME JCLIN SOURCEID)\n        HOLDATA1 (KEEP=SYSMOD SREL HOLD ACTION)\n        HOLDATA2 (KEEP=SYSMOD SREL HOLD2 ACTION2)\n        ;\n        LABEL SYSMOD='SYSTEM*MOD'      TYPE='SYSMOD*TYPE'\n              STATUS='SYSMOD*STATUS'   SREL='SYSTEM*RELEASE'\n              FMID='FUNCTION'          R_DATE='JULIAN*DATE'\n              HOLD='HOLD*DATA'         HOLD2='HOLD*DATA'\n              ACTION='HOLD*ACTION'     ACTION2='HOLD*ACTION'\n              IN_DATE='INSTALL*DATE'   IN_TIME='INSTALL*TIME'\n        ;\n        INFILE SMPOUT;\n        FORMAT DATE IN_DATE DATE7. ;\n        IF _N_=1 THEN OLD_MOD='       ';\n        INPUT @1   H_OLD  $4.\n              @11  T_YPE  $8.\n              @;\n\n   IF T_YPE='TYPE' THEN DO;\n           INPUT #1   @1   SYSMOD   $7.\n                      @29  TYPE     $8.\n                 #2   @1   DELBY    $5.\n                      @19  STATUS   $20.\n                 @;\n         * NO SUPED SYSMODS ;\n           IF TYPE='SUPERSED' OR DELBY='DELBY' OR DELBY='LASTS'\n              THEN DELETE;\n           INPUT #3   @1   NEXT1    $6.\n                 @;\n         * SET LINE POINTER VALUE TO 3 ;\n           PV=3;\nPAGE;\n  /*-----------------------------------------------------------*\n   *                                                           *\n   *  THIS SECTION 'LINKS' ALL SUBROUTINES TO PERFORM          *\n   *  FUNCTIONS NECESSARY FOR EACH TYPE OF ENTRY OF A          *\n   *                      SYSMOD                               *\n   *                                                           *\n   *-----------------------------------------------------------*/\n   STATUS:\n\n         * ANY JCLIN ? ;\n           IF NEXT1='JCLIN ' THEN GOTO JCLIN;\n\n         * NEXT A 'FESN' ? ;\n           IF NEXT1='FESN  ' THEN GOTO DUMMY;\n\n         * DATE AND TIME RECORD ? ;\n           IF NEXT1='DATE/T'  THEN GOTO DATETIME;\n\n         * DATE AND TIME INSTALLED - IF PRESENT NO 'SREL' EXISTS ;\n           IF NEXT1='INS   ' THEN GOTO APPLYI;\n\n         * DSPREFIX FOR RELFILE ELEMENTS ;\n           IF NEXT1='DSPREF' THEN GOTO DUMMY;\n\n         * IF RECORD IS LASTSUPER ?;\n           IF NEXT1='LASTSU' THEN GOTO DUMMY;\n\n           IF NEXT1='APPLY ' THEN GOTO DUMMY;\n\n         * LAST TEST - SOURCEID PRESENT  ;\n           IF NEXT1='SOURCE' THEN GOTO SORCID;\n\n         * IF RSEL RECORD ;\n           IF NEXT1='SREL  ' THEN GOTO S_REL ;\n\n         * IF SYSMOD IS IN DELETE STATUS;\n           IF NEXT1='DELETE' THEN GOTO DUMMY;\n\n         * IF FMID RECORD ? ;\n           IF NEXT1='FMID  ' THEN GOTO F_MID;\n\n    DONE:\n\n         * IF APPLIED DATE EXISTS THEN NOT A SYSMOD ;\n           IF IN_DATE\u00ac=. THEN OUTPUT APPLIED ;\n                         ELSE OUTPUT SYSMODS;\n         * NOTE: THE LAST REFRENCED SYSMOD WILL BE KEEP       ;\n         *       IN THE CASE THEIR IS ANY HOLD-DATA           ;\n           RETAIN SREL SYSMOD ;\n    END;\n\n     IF H_OLD='HOLD' THEN DO;\n        IF OLD_MOD=SYSMOD THEN DO ;\n            INPUT  @5  HOLD2    $6.\n                   @19 ACTION2  $80.\n                   ;\n           OUTPUT HOLDATA2;\n           END;\n                          ELSE DO ;\n            INPUT  @5  HOLD     $6.\n                   @19 ACTION   $80.\n                   ;\n            OLD_MOD=SYSMOD;\n            RETAIN OLD_MOD;\n            OUTPUT HOLDATA1;\n           END;\n      END;\n\n    RETURN;\nPAGE;\n  *------------------->   SUBROUTINES   <--------------------* ;\n\n   F_MID:     INPUT  #PV    @19  FMID    $7.    @;\n              PV=PV+1;\n              INPUT  #PV     @1 NEXT1   $6.\n                    @;\n              GOTO STATUS ;\n\n   JCLIN:     PV=PV+1;\n              INPUT  #PV     @1 NEXT1   $6.    @;\n              JCLIN='YES';\n              GOTO STATUS ;\n\n   DATETIME:  INPUT  #PV   @19 YY $2. @22  DDD $3. @27 TIME TIME. @;\n              R_DATE=YY||DDD; R_DATE=COMPRESS(R_DATE);\n              DATE=DATEJUL(R_DATE);\n              PV=PV+1;\n              INPUT  #PV    @1   NEXT1    $6.  @;\n              GOTO STATUS ;\n\n   APPLYI:    INPUT  #PV  @9 IN_YY $2. @12 IN_DDD $3. @17 IN_TIME TIME.\n                     @;\n              T_DATE=IN_YY||IN_DDD; T_DATE=COMPRESS(T_DATE);\n              IN_DATE=DATEJUL(T_DATE);\n              PV=PV+1;\n              INPUT  #PV    @1   NEXT1     $6. @;\n              GOTO STATUS ;\n\n   SORCID:    INPUT  #PV    @19  SOURCEID  $8.  @;\n              PV=PV+1;\n              INPUT  #PV    @1   NEXT1     $6.  @;\n              GOTO STATUS ;\n\n   S_REL:     INPUT  #PV    @19  SREL    $4.    @;\n              PV=PV+1;\n              INPUT  #PV    @1   NEXT1   $6.    @;\n              GOTO STATUS ;\n\n   DUMMY:     PV=PV+1;\n              INPUT  #PV     @1 NEXT1   $6.    @;\n              GOTO STATUS ;\n\n\n   PROC SORT DATA=HOLDATA1;   BY SREL SYSMOD;\n   PROC SORT DATA=HOLDATA2;   BY SREL SYSMOD;\n   DATA HOLDATA;  MERGE HOLDATA1 HOLDATA2;  BY SREL SYSMOD ;\n\n   PROC SORT DATA=SYSMODS;   BY SREL SYSMOD;\n\n   PROC SORT DATA=APPLIED;   BY FMID SYSMOD TYPE IN_DATE;\n\n   DATA MERGE;  MERGE HOLDATA SYSMODS;  BY SREL SYSMOD ;\n\n   PROC SORT DATA=MERGE;   BY SREL STATUS FMID TYPE SYSMOD DATE;\n\n   PROC PRINT DATA=MERGE LABEL SPLIT='*' ;\n        BY SREL STATUS FMID;\n        FORMAT TIME TIME. DATE DATE7. ;\n        VAR  SYSMOD FMID TYPE SOURCEID DATE TIME R_DATE JCLIN\n             HOLD ACTION HOLD2 ACTION2 ;\n        TITLE 'SYSMODS ' ;\n        TITLE2 'SORTED BY SREL, STATUS, FMID, TYPE, SYSMOD, AND DATE';\n\n   PROC PRINT DATA=APPLIED LABEL SPLIT='*' ;\n        BY FMID;\n        FORMAT IN_TIME TIME. IN_DATE DATE7. ;\n        VAR  SYSMOD TYPE SOURCEID IN_DATE IN_TIME JCLIN\n             ;\n        TITLE 'APPLIED SYSMODS ' ;\n        TITLE2 'SORTED BY FMID, SYSMOD, TYPE, AND DATE';\n   ENDSAS;\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASTIMES": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00X\\x00X\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "FILE022"}, "text": "\n   %MACRO SASTIMES(VALUE);\n   *-------------------------------------------------------------*\n   *          MACRO: SASTIMES\n   *      VARIABLES: VALUE - A SAS DATETIME VALUE OR NULL\n   * CALL STATEMENT: %INCLUDE DDNAME(SASTIMES)\n   *                 ... %SASTIMES ... OR ...\n   *                 ... %SASTIMES('01OCT86:12:02:01'DT)\n   *\n   *\n   * VARIABLES RTND: _VARIABLE_    _DESCRIPTION_      (FORMAT)\n   *                 D_H_M_S ..... DAY,HOUR,MIN,SEC (DATETIME)\n   *                 D_T ......... DAY,HOUR,MIN,SEC (DATETIME)\n   *                 T_IME ....... TIME OF DAY        (TIME8.)\n   *                 H_M_S ....... HOUR,MINUTE,SECOND (TIME8.)\n   *                 H_OUR ....... HOUR                   (2.)\n   *                 M_INUTE ..... MINUTE                 (2.)\n   *                 S_ECOND ..... SECOND                 (2.)\n   *                 D_ATE ....... CURRENT DATE       (DATE7.)\n   *                 M_D_Y ....... MONTH,DAY,YEAR     (DATE7.)\n   *                 W_DTE ....... WEEK DATE: MON (WEEKDATE3.)\n   *                 W_DAY ....... WEEK DAY: 1-7 (SUN-SAT)(1.)\n   *                 Y_EAR ....... YEAR                   (2.)\n   *                 M_ONTH ...... MONTH                  (2.)\n   *                 D_O_M ....... DAY OF MONTH           (2.)\n   *                 WEEKNUM ..... WEEK NUMBER FORM 1/1/  (2.)\n   *                 WEEK_MON..... WEEK NUMBER W/I MONTH  (1.)\n   *                 Q_TR ........ QUARTER                (1.)\n   *                 Y_EARQ ...... YEAR TO QUARTER     (YYQ4.)\n   *\n   * CHECK TO SEE IF DATE TIME VARIABLE WAS PRESPECIFIED\n   *-----------------------------------------------------------*;\n   %IF %STR(&VALUE)\u00ac=    %THEN     D_T=&VALUE.    %STR(;)  ;\n                         %ELSE     D_T=DATETIME() %STR(;)  ;\n * TIME MANIPULATIONS                                       ;\n   T_IME=TIMEPART(D_T);             /* TIME PART OF DATETIME       */\n   H_OUR=HOUR(T_IME);               /* HOUR OF DAY                 */\n   M_INUTE=MINUTE(T_IME);           /* MINUTE OF HOUR              */\n   S_ECOND=SECOND(T_IME);           /* SECOND OF MINUTE            */\n                                    /* HOUR, MINUTE, SECOND        */\n   H_M_S=HMS(H_OUR,M_INUTE,S_ECOND);\n\n * DATE MANIPULATIONS                                       ;\n   D_ATE=DATEPART(D_T);             /* DATE PART OF DATETIME       */\n   J_DATE=JULDATE(D_ATE);           /* JULIAN DATE                 */\n   Y_EAR=YEAR(D_ATE);               /* YEAR FROM DATE              */\n   Q_TR=QTR(D_ATE);                 /* QUARTER: 1-4                */\n   Y_EARQ=YYQ(Y_EAR,Q_TR);          /* YEAR AND QUARTER: 1-4       */\n   M_ONTH=MONTH(D_ATE);             /* MONTH OF YEAR               */\n   D_O_M=DAY(D_ATE);                /* DAY OF MONTH                */\n   M_D_Y=MDY(M_ONTH,D_O_M,Y_EAR);   /* MONTH, DAY, YEAR            */\n   W_DAY=WEEKDAY(D_ATE);            /* WEEK DAY :SUN(1) - SAT(7)   */\n   W_DTE=D_ATE;                     /* WEEK DAY :SUN - SAT         */\n                                    /* DAY, HOUR, MINUTE, SECOND   */\n   D_H_M_S=DHMS(D_ATE,H_OUR,M_INUTE,S_ECOND);\n\n * FORMAT THE VARIABLES                                     ;\n   FORMAT T_IME       H_M_S                                   TIME8.\n          D_ATE       M_D_Y     M_D_CY   M_D_CZ               DATE7.\n          W_DTE                                           WEEKDATE3.\n          Y_EARQ                                               YYQ4.\n          Y_EAR                                                   4.\n          M_ONTH  H_OUR  M_INUTE  S_ECOND  D_O_M  WEEKNUM         2.\n          Q_TR        W_DAY   WEEK_MON                            1.\n          D_H_M_S     D_T                                DATETIME19.2\n        ;\n\n * CALCULATE WEEK: 1-52, WHERE A WEEK=(SUN=>SAT)         ;\n   M_D_CY=MDY(1,1,Y_EAR);                /* JAN 1 OF CURRENT YEAR  */\n   WEEKNUM=INTCK('WEEK',M_D_CY,D_ATE);   /* NUMBER OF WEEKS SINCE\n                                            JAN 1, OF THIS YEAR    */\n * CALCULATE WEEK OF MONTH                               ;\n   M_D_CZ=MDY(M_ONTH,1,Y_EAR);         /* 1ST DAY OF THIS MONTH  */\n   WEEK_MON=INTCK('WEEK',M_D_CZ,D_ATE);\n\n\n   /*          - POSSIBLE KEEP STATEMENT -\n   KEEP T_IME D_ATE J_DATE H_OUR M_INUTE S_ECOND H_M_S D_H_M_S\n        Y_EAR Q_TR Y_EARQ M_ONTH D_O_M WEEK_DAY WEEK_DTE\n        WEEKNUM D_T\n        ;                                                   */\n  /*\n     COMPARING DATE AND TIME VALUES:\n               IF D_T='12JAN86:12:13:21'DT THEN ....\n               IF D_ATE='12JAN86'D         THEN ....\n               IF T_IME='00:12:00'T        THEN ....\n  */\n  %MEND ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASTMS": {"ttr": 6148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xbc\\x00\\xbc\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 188, "newlines": 188, "modlines": 0, "user": "FILE022"}, "text": "//SASTSM  JOB\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//*   FUNCTION: THIS USES THE TMS AD-HOCK REPORT FEATURE 'TMSGRW'     *\n//*             THAT DUMPS THE ENTIRE TMC TO DDNAME(TMSRPT) IN        *\n//*             HEX FORMAT (SEE USERS GUIDE TO RECORD LAYOUT)         *\n//*             THIS NEWLY CREATED FILE IS THEN RUN THRU SAS          *\n//*             TO CREATE MEANINGFUL REPORTS                          *\n//*                                                                   *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//S1     EXEC  PGM=TMSGRW\n//STEPLIB  DD  DSN=TMS.LOADMOD,DISP=SHR\n//TMSRPT   DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//TMC      DD  DSN=TMS.TMC,DISP=SHR\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,(3,1))\n//OUTPUT   DD  DSN=&&TMSOUT,DISP=(,PASS),SPACE=(CYL,(3,1)),UNIT=SYSDA\n//SYSIN    DD  DUMMY    * ALL RECORDS\n//SASTMS  EXEC SAS\n//TMSLIST  DD DSN=&&TMSOUT,DISP=(OLD,DELETE)\n//SYSOUT   DD DUMMY\n//SYSIN      DD     *\n  OPTIONS NOSOURCE2 DATE ERRORS=0 LABEL NOMACROGEN ;\n\n\n      /* VARS =    DSN       STPNAME   SLOT      VOLSEQ\n                   CRTDT     EXPDT     TRTCH     DEN\n                   LABEL     RECFM     BLKSIZE   LRECL\n                   FLAG2     VOLSER    NEXTVOL   PREVVOL\n                   DSSFLAG   PASSWRD   NUMDSNB   FSTDSNB\n                   FSTVOL    BATCHID   FLAG3     CTIME\n                   CUNIT     LUNIT     LDATE     LJOB\n                   BTHDATE   COUNT     FLAG1     CLNCNT\n                   OUTDATE   OUTCODE   USECLN    DATECLN\n                   BLKCNT    READERR   WRITERR   CJOB\n                   ACCT\n                                                           */\n\nDATA TMSLIST (KEEP=DSN       STPNAME   SLOT      VOLSEQ\n                   CRTDT     EXPDT     TRTCH     DEN\n                   LABEL     RECFM     BLKSIZE   LRECL\n                   FLAG2     VOLSER    NEXTVOL   PREVVOL\n                   DSSFLAG   PASSWRD   NUMDSNB   FSTDSNB\n                   FSTVOL    BATCHID   FLAG3     CTIME\n                   CUNIT     LUNIT     LDATE     LJOB\n                   BTHDATE   COUNT     FLAG1     CLNCNT\n                   OUTDATE   OUTCODE   USECLN    DATECLN\n                   BLKCNT    READERR   WRITERR   CJOB\n                   ACCT\n                   ) ;\n     INFILE TMSLIST;\n  FORMAT CRTDT LDATE BTHDATE OUTDATE DATECLN EXPDT      DATE7.\n         CUNIT LUNIT DSSFLAG BATCHID                    HEX3.\n         DSSFLAG BATCHID                                HEX4.\n         LABEL RECFM FLAG2 FLAG3 FLAG1                  $3.\n         TRTCH                                          $5.\n         DEN                                            $7.\n         ;\n   /*------------------------------------------------------*/\n   /*- NOTE: NAMING CONVENTIONS FOLLOW THE ONES DESCRIBED -*/\n   /*-       IN THE UCC ONE TECHNICAL MANUAL APPENDIX C.1 -*/\n   /*-       ALL VARIABLE BEGINNING WITH AN 'X'           -*/\n   /*-       ARE TEMPORARY FOR LATER CONVERSION           -*/\n   /*------------------------------------------------------*/\n     INPUT @1   DSN      $44.      @45  STPNAME  $8.\n           @53  SLOT     PIB2.     @55  VOLSEQ   PIB2.\n           @57  CRTDT    PD3.      @60  EXPDT    PD3.\n           @63  XTRTCH   PIB1.     @64  XDEN     PIB1.\n           @65  XLABEL   PIB1.     @66  XRECFM   PIB1.\n           @67  BLKSIZE  PIB2.     @69  LRECL    PIB2.\n           @71  XFLAG2   PIB1.     @72  VOLSER   $6.\n           @78  NEXTVOL  $6.       @84  PREVVOL  $6.\n           @90  DSSFLAG  PIB1.     @91  PASSWRD  IB4.    /*UNDEFINED*/\n           @95  NUMDSNB  PIB2.     @97  FSTDSNB  PIB4.\n           @101 FSTVOL   $6.       @107 BATCHID  PIB1.\n           @108 XFLAG3   PIB1.     @109 CTIME    PD3.\n           @112 CUNIT    PIB2.     @114 LUNIT    PIB2.\n           @116 LDATE    PD3.      @119 LJOB     $8.\n           @127 BTHDATE  PD3.      @130 COUNT    PIB2.\n           @132 XFLAG1   PIB1.     @133 CLNCNT   PIB1.\n           @134 OUTDATE  PD3.      @137 OUTCODE  $4.\n           @141 USECLN   PIB2.     @143 DATECLN  PD3.\n           @146 BLKCNT   PIB4.     @150 READERR  PIB1.\n           @151 WRITERR  PIB1.     @152 CJOB     $8.\n           @160 ACCT     $41.\n           ;\n   /*---------------------------*/\n   /*- VARIABLE LABEL SECTION  -*/\n   /*---------------------------*/\n   LABEL\n        DSN='DATA*SET'            STPNAME='CREATE*STPNM'\n        SLOT='VOLT*SLOT'          VOLSEQ='VOLSEQ*NUM'\n        CRTDT='CREATE*DATE'       EXPDT='EXPIR*DATE'\n        TRTCH='RECORDING*TECHN'   DEN='TAPE*DENSITY'\n        LABEL='LABEL*TYPE'        RECFM='RECORD*FORMAT'\n        BLKSIZE='MAX*BLKSIZE'     LRECL='LRECL'\n        FLAG2='TAPE*STATUS'       VOLSER='VOLUME*SERIAL'\n        NEXTVOL='NEXT*VOLSER'     PREVVOL='PREVIOUS*VOLSER'\n        DSSFLAG='PSWD*FLAG'       PASSWRD='PASS*WORD'\n        NUMDSNB='NUMBER*DSN*BLKS' FSTDSNB='FIRST*DSNB'\n        FSTVOL='FIRST*VOLSER'     BATCHID='WHO*UPDATED'\n        FLAG3='PROC*FLAG'         CTIME='CREATE*TIME'\n        CUNIT='CREATE*UNIT'       LUNIT='LAST*UNIT'\n        LDATE='LAST*DATE'         LJOB='LAST*JOB'\n        BTHDATE='FIRST*USED'      COUNT='NUMBER*OPENS'\n        FLAG1='FLAG1'             CLNCNT='NUMBER*CLEANS'\n        OUTDATE='OUT*OF*AREA'     OUTCODE='OUT*OF AREA*CODE'\n        USECLN='USE*COUNT'        DATECLN='DATE*CLEANED'\n        BLKCNT='BLOCK*COUNT'      READERR='READ*ERRORS'\n        WRITERR='WRITE*ERRORS'    CJOB='CREATE*JOB'\n        ACCT='USER*ACCT*INFO'\n        CMONTH='CREATE*MONTH'     LMONTH='LASTUSED*MONTH'\n        EMONTH='EXPIR*MONTH'\n        CYRMON='CREATE*MONTH'     LYRMON='LASTUSED*MONTH'\n        EYRMON='EXPIR*MONTH'\n           ;\n /*---------------------------*/\n /*- CONVERT DATES SECTION   -*/\n /*---------------------------*/\n  CRTDT=DATEJUL(CRTDT);        EXPDT=DATEJUL(EXPDT);\n  LDATE=DATEJUL(LDATE);        BTHDATE=DATEJUL(BTHDATE);\n  DATECLN=DATEJUL(DATECLN);\n  IF OUTDATE\u00ac=. & OUTDATE\u00ac=0 THEN OUTDATE=DATEJUL(OUTDATE);\n /*---------------------------*/\n /*- CONVERT FLAGS SECTION   -*/\n /*---------------------------*/\n * RECORDING TECHNIQUE;\n   IF XTRTCH=13X|XTRTCH=23X|XTRTCH=2BX|XTRTCH=3BX THEN TRTCH='7TRK';\n      ELSE IF XTRTCH=80X THEN TRTCH='9TRK' ;\n      ELSE IF XTRTCH=0C0X THEN TRTCH='18TRK' ;\n * TAPE DENSITY;\n   IF XDEN=03X THEN DEN='200BPI'; ELSE IF XDEN=43X THEN DEN='556BPI';\n      ELSE\n   IF XDEN=83X THEN DEN='800BPI'; ELSE IF XDEN=0C3X THEN DEN='1600BPI';\n      ELSE\n   IF XDEN=0D3X THEN DEN='6250BPI';ELSE IF XDEN=0E3X THEN DEN='38KBPI';\n * LABEL TYPE ;\n   IF XLABEL=01X THEN LABEL='NL'; ELSE IF XLABEL=02X THEN LABEL='SL';\n      ELSE\n   IF XLABEL=04X THEN LABEL='NSL'; ELSE IF XLABEL=0AX THEN LABEL='SUL';\n      ELSE\n   IF XLABEL=10X THEN LABEL='BLP'; ELSE IF XLABEL=21X THEN LABEL='LTM';\n      ELSE\n   IF XLABEL=40X THEN LABEL='AL' ; ELSE IF XLABEL=48X THEN LABEL='AUL';\n * RECORD FORMAT;\n   IF XRECFM=40X THEN RECFM='V'; ELSE IF XRECFM=50X THEN RECFM='VB';\n      ELSE\n   IF XRECFM=58X THEN RECFM='VBS';ELSE IF XRECFM=80X THEN RECFM='F';\n      ELSE\n   IF XRECFM=90X THEN RECFM='FB';ELSE IF XRECFM=0C0X THEN RECFM='???' ;\n * FLAG 2;\n   IF XFLAG2=01X THEN FLAG2='ETM'; ELSE IF XFLAG2=02X THEN FLAG2='EDD';\n      ELSE\n   IF XFLAG2=04X THEN FLAG2='ECC'; ELSE IF XFLAG2=08X THEN FLAG2='E99';\n      ELSE\n   IF XFLAG2=10X THEN FLAG2='TEM'; ELSE IF XFLAG2=20X THEN FLAG2='REC';\n      ELSE\n   IF FLAG2=40X THEN FLAG2='OUT'; ELSE IF XFLAG2=80X THEN FLAG2='CAT' ;\n * BATCH ID: SKIP TOO COMPLEX;\n * FLAG 3;\n   IF XFLAG3=40X THEN FLAG3='ECH'; ELSE IF XFLAG3=80X THEN FLAG3='BAD';\n * FLAG 1;\n   IF XFLAG1=01X THEN FLAG1='DEF'; ELSE IF XFLAG1=02X THEN FLAG1='DEL';\n      ELSE\n   IF XFLAG1=04X THEN FLAG1='SCR'; ELSE IF XFLAG1=08X THEN FLAG1='CLN';\n      ELSE\n   IF XFLAG1=10X THEN FLAG1='ABN'; ELSE IF XFLAG1=20X THEN FLAG1='UPD';\n      ELSE\n   IF XFLAG1=40X THEN FLAG1='CLO'; ELSE IF XFLAG1=80X THEN FLAG1='INT';\n\n\n  DATA TMSLIST;  SET TMSLIST;   *IF LDATE>'01APR86'D THEN DELETE;\n       REFDTE=LDATE;FORMAT REFDTE MONYY7.;\n       LABEL REFDTE='LAST*REF*DATE ';\n\n  PROC SORT;  BY REFDTE LDATE;\n\n  PROC PRINT LABEL SPLIT='*' NOOBS;\n       BY REFDTE;\n       VAR DSN CRTDT LDATE LJOB EXPDT FLAG2\n           VOLSEQ VOLSER LRECL BLKSIZE BLKCNT\n           ;\n  TITLE 'UNREFENCED TAPE VOLUMES' ;\n  TITLE2 'IN THE PAST 30 DAYS';\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SASVTOC": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xb6\\x00\\xb6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "FILE022"}, "text": " OPTIONS  ERRORS=0 NODATE LABEL NONOTES TLS=80 PLS=80;\n\n GOPTIONS NOTEXT82 COLORS=(BLUE PINK YELLOW GREEN RED TURQ WHITE)\n          DEVICE=IBM3179G;\n\n\n /*---------------------------------------------------------------*\n  *  THIS IS A PIECE OF SAS CODE THAT USES THE COMMAND PROCESSOR  *\n  *  'VTOC' FORM THE C.B.T. TAPE.                                 *\n  *                                                               *\n  *  IT ISSUES THE 'VTOC' COMMAND FOR ALL DISK VOLUMES USING      *\n  *  THE SAS TSO INTERFACE. THEN PROCESS THE OUTPUT GROUPING THE  *\n  *  INFOMATION BY DATASET ORGANIZATION. REPORT THE RESULTS       *\n  *  USING SAS/GRAPH IN THE FOREGROUND BY DSORG, THEN DSORG BY    *\n  *  BY VOLSER.  NOTE: DSORG='FR' IS FREE SPACE. DSORG='VS' IS    *\n  *  ANY VSAM CLUSTER                                             *\n  *                                                               *\n  *                                                               *\n  *  NOTE: USE YOUR OWN GRAPHICS DEVICE IN GOPTIONS ABOVE !!!     *\n  *--------------------------------------------------------------*/\nPAGE;\n\n * NOTE: DSNAME'S MUST NOT BE SORTED, VOLSER'S MUST BE ;\n\n    TSO ALLOC DD(VTOCOUT) NEW DELETE SPACE(3,1) CYL;\n    TSO VTOC ALL TRK PRINT(NEW (DSNAME VOLUME DSO ALLOC UNUSED))\n           NOSORT NOHEADING;\n\n     DATA VTOCS;\n          * INITIALIZE VARIABLES;\n          IF _N_=1  THEN DO;\n             XDATE=TODAY();\n             JDATE=JULDATE(XDATE);\n             TEMPDSN='SYS'||JDATE; TEMPDSN=COMPRESS(TEMPDSN);\n             RETAIN TEMPDSN;\n             DROP XDATE JDATE;\n             OLDVOL='      ';\n             TOTTRKS=0;\n             VOLTRKS=885*15;\n             RETAIN VOLTRKS;\n            END;\n\n          INFILE VTOCOUT ;\n          INPUT @1  CC  $1.\n                @;\n          IF CC = '0'  THEN DELETE;\n          DROP CC;\n          INPUT @2  DSNAME     $44.\n                @47 VOLSER     $6.\n                @54 DS      $2.\n                @60 ALLOC      4.\n                @67 UNUSED     4.\n                ;\n          IF DS='VS' THEN DSORG='VSAM';\n          IF DS='PO' THEN DSORG='PART';\n          IF DS='PS' THEN DSORG='SEQ';\n          IF DS='DA' THEN DSORG='DIR';\n          DROP DS;\n\n          IF SUBSTR(DSNAME,1,8)=TEMPDSN THEN DELETE;  /*NO TEMP DS   */\n          IF SUBSTR(VOLSER,1,3)='WOR'   THEN DELETE;  /*NO WORK PACKS*/\n          IF SUBSTR(VOLSER,1,3)='RES'   THEN DELETE;  /*NO SYSRES'S  */\n          IF OLDVOL\u00ac=VOLSER THEN DO;\n             OLDVOL=VOLSER;\n             RETAIN OLDVOL;\n             * ADD 885 CYL TO TRACKS AND TOTAL;\n             TOTTRKS=TOTTRKS+(885*15);\n             RETAIN TOTTRKS;\n            END;\n\n   * SUMMARIZE ALL INFO BY VOLSER AND DSORG ;\n\n     PROC SUMMARY DATA=VTOCS;\n          CLASS VOLSER DSORG;\n          VAR ALLOC UNUSED TOTTRKS;\n          ID VOLTRKS;\n          OUTPUT OUT=VTOCVS\n                 SUM(ALLOC UNUSED)=ALLOC UNUSED\n                 MAX(TOTTRKS)=TOTTRKS\n          ;\n\n     DATA\n          TYPE1(KEEP=DSORG ALLOCX UNUSEDX)\n          TYPE3(KEEP=DSORG ALLOCX VOLSER)\n          ;\n          SET VTOCVS;\n\n          P_UNSD=100*(UNUSED/ALLOC);\n          ALLOCX=ALLOC;\n\n   * _TYPE_(0) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS ;\n          IF _TYPE_=0 THEN DO;\n             TOTAL=TOTTRKS;\n             RETAIN TOTAL;\n             ALLOCX=TOTTRKS-ALLOC;\n             DSORG='FREE';\n             OUTPUT TYPE1;\n            END;\n   * _TYPE_(1) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY DSORG;\n          IF _TYPE_=1 THEN DO;\n             UNUSEDX=UNUSED;\n             OUTPUT TYPE1;\n            END;\n   * _TYPE_(2) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY VOLUME;\n          IF _TYPE_=2 THEN DO;\n             ALLOCX=(VOLTRKS-ALLOC)/15;\n             DSORG='FREE';\n             OUTPUT TYPE3;\n            END;\n   * _TYPE_(3) ALL ALLOCATIONS, UNUSED, AND TOTAL TRACKS BY VOLUME\n                                                         AND DSORG ;\n          IF _TYPE_=3 THEN DO;\n             ALLOCX=ALLOC/15;\n             OUTPUT TYPE3;\n            END;\n\n     DATA TYPE1(KEEP=DSORG ALLOC UNUSED VOLALLOC)\n          TYPEU(KEEP=DSORG PER_OVR)\n          ;\n          SET TYPE1;\n          ALLOC=ALLOCX/15;    * in cylinders;\n          UNUSED=UNUSEDX/15;  * in cylinders;\n          VOLALLOC=ALLOC/885; * in volumes;\n          IF DSORG\u00ac='FREE' THEN DO;\n             PER_OVR=100*(UNUSED/ALLOC); * PERCENT UNUSED;\n             OUTPUT TYPEU;\n            END;\n          OUTPUT TYPE1;\n\n    PROC SORT DATA=TYPE3; BY VOLSER;\n\n    PROC GCHART DATA=TYPE1;\n         PIE DSORG / SUMVAR   = ALLOC\n                     COUTLINE = WHITE\n                     FILL     = SOLID\n                     PCT      = OUTSIDE\n                     MATCHCOLOR\n                     NOHEADING\n         ;\n    TITLE1 F=XSWISS C=RED 'All data sets' ;\n    TITLE2 C=GREEN 'Allocation by Dataset Organization';\n    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';\n\n    PROC GCHART DATA=TYPE1;\n         PIE DSORG / SUMVAR = VOLALLOC\n                     NOHEADING\n                     COUTLINE=WHITE\n                     FILL = SOLID\n                     PCT  = OUTSIDE\n                     MATCHCOLOR\n         ;\n    TITLE1 F=XSWISS C=RED 'All data sets' ;\n    TITLE2 C=GREEN 'Allocation by Dataset Organization';\n    FOOTNOTE C=YELLOW F=ITALIC 'In Volumes';\n\n    PROC GCHART DATA=TYPE3;\n         BY  VOLSER;\n         PIE DSORG / SUMVAR   = ALLOCX\n                     COUTLINE = WHITE\n                     FILL     = SOLID\n                     PCT      = OUTSIDE\n                     MATCHCOLOR\n                     NOHEADING\n         ;\n    TITLE1 F=XSWISS C=RED 'All data sets' ;\n    TITLE2 C=GREEN 'Allocation by Dataset Organization';\n    TITLE3 C=GREEN '          and Volume              ';\n    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';\n\n    PROC GCHART DATA=TYPEU;\n         PIE DSORG / SUMVAR    = PER_OVR\n                     COUTLINE  = WHITE\n                     FILL      = SOLID\n                     PCT       = OUTSIDE\n                     MATCHCOLOR\n                     NOHEADING\n         ;\n    TITLE1 F=XSWISS C=RED 'All data sets' ;\n    TITLE2 'Over Allocation by DSORG';\n    TITLE3 ;\n    FOOTNOTE C=YELLOW F=ITALIC 'In Cylinders';\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAS30M": {"ttr": 6156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xcd\\x00\\xcd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 205, "newlines": 205, "modlines": 0, "user": "FILE022"}, "text": "            %MACRO\n             VAR30\n    (ALL=N,HDR=N,SUB=N,ID=N,IO=N,CM=N,PR=N,AC=N,SS=N,PS=N,OS=N,EX=N,\n     FUNC=VAR);\n   %*-------------------------------------------------*\n    * NAME: %VAR30                                    *\n    * DOC: TO INCLUDE SELECTED VARIABLES FOR A PRINT  *\n    *      BASED ON RECORD TYPE 30                    *\n    * NOTE: SEMI-COLON NOT FOUND @ END                *\n    *-------------------------------------------------*;\n        &FUNC\n        %IF &HDR=Y | &ALL=Y %THEN %DO;\n               ENDTIME    EDATE  ETIME\n               SYSID\n               SUBSYS\n               RECSUBTY\n             %END;\n        %IF &SUB=Y | &ALL=Y  %THEN %DO;\n               SMF30TYP\n               SMF30RVN\n               SMF30PNM\n             %END;\n        %IF &ID=Y | &ALL=Y  | %THEN %DO;\n               SMF30JBN          /* JOB OR SESSION NAME    */\n               SMF30PGM          /* PROGRAM NAME           */\n               SMF30STM          /* STEP NAME              */\n               SMF30UIF          /* USER FROM EXIT         */\n               SMF30JNM          /* JES NUMBER             */\n               SMF30STN          /* STEP NUMBER 1-?        */\n               SMF30CLS          /* JOB CLASS/BLANK FOR TSO*/\n               SMF30PGN          /* PERFORMANCE GROUP      */\n               SMF30JPT          /* JOB PRIORITY           */\n               SMF30AST          /* DEV ALLOC START TIME   */\n               SMF30PPS          /* PROB. PGM STRT TIME    */\n               SMF30SIT          /* INIT. PGM STRT TIME    */\n               SMF30STD          /* RDR START TIME         */\n               SMF30RST          /* RDR ENDTIME            */\n               SMF30USR          /* PROGRAMMER NAME        */\n               SMF30GRP          /* RACF GROUP             */\n               SMF30RUD          /* RACF USER              */\n               SMF30TID          /* RACF TERM ID           */\n             %END;\n        %IF &IO=Y %THEN    %DO;\n               SMF30INP          /* # OF INPUT CARDS       */\n               SMF30TEP          /* TOTAL BLOCKS TRANS     */\n               SMF30TPT          /* TOTAL # OF TPUTS       */\n               SMF30TGT          /* TOTAL # OF TGETS       */\n               SMF30TCN          /* TOTAL DEVICE CONN. TIME*/\n             %END;\n        %IF &CM=Y %THEN    %DO;\n               SMF30SCC          /* COMPLETION CODE        */\n               SMF30ST1          /* REASON CODE            */\n               SMF30ST2          /* REASON CODE            */\n               SMF30ARC          /* ABEND CODE             */\n             %END;\n        %IF &PR=Y | &ALL=Y  %THEN %DO;\n               SMF30PT1          /* DISP. PRIORITY         */\n               SMF30PT2          /* DISP. PRIORITY         */\n               SMF30CPT          /* TCB TIME IN 100THS     */\n               SMF30CPS          /* SRB TIME IN 100THS     */\n               SMF30ICU          /* TCB TIME IN 100THS INIT*/\n               SMF30ISB          /* SRB TIME IN 100THS INIT*/\n               CPUTIME           /* CPU TIME               */\n             %END;\n        %IF &AC=Y | &ALL=Y  %THEN %DO;\n               SMF30ACT          /* PROGRMMER NAME FILED   */\n             %END;\n        %IF &SS=Y | &ALL=Y  %THEN %DO;\n               SMF30SFL          /* STOR. FLAGS            */\n               SMF30SPK           /* STOR. PROT KEY=XXXX0000*/\n               SMF30PRV         /* STOR. USED K BOTTOM UP */\n               SMF30SYS         /* STOR. USED K TOP DOWN  */\n               SMF30PGI          /* PAGE INS               */\n               SMF30PGO         /* PAGE OUT               */\n               SMF30REC           /* PAGES RECLAIMED        */\n               SMF30NSW         /* SWAP OUTS AND BACK IN  */\n               SMF30PSI         /* PAGE INS+LSQA,FIX-RCLM */\n               SMF30PSO         /* PAGE OUT+LSQA,FIX      */\n               SMF30VPI         /* VIO PAGE INS           */\n               SMF30VPO         /* VIO PAGE OUTS          */\n               SMF30VPR          /* VIO PAGE RECLAIMS      */\n               SMF30CPI          /* COMMON PAGE INS        */\n               SMF30CPR          /* COMMON PAGE RECLAIMS   */\n               SMF30LPI          /* LPA PAGE INS           */\n               SMF30LPR          /* LPA PAGE RECLAIMS      */\n               SMF30PST          /* PAGE STEELS            */\n               SMF30PSC           /* CPU PAGE SECONDS       */\n               SMF30RGB          /* PRIVATE BELOW 16M      */\n               SMF30ERG          /* PRIVATE ABOVE 16M      */\n               SMF30ARB          /* LSQA+SWA BELOW 16M     */\n               SMF30EAR          /* LSQA+SWA BELOW 16M     */\n               SMF30URB          /* MAX RGN IN BYTES SUBPOL*/\n               SMF30EUR          /* MAX RGN IN BYTES SUBPOL*/\n               SMF30RGN          /* REGION ROUNDED 4K      */\n             %END;\n        %IF &PS=Y | &ALL=Y  %THEN %DO;\n               SMF30SRV          /* TOTAL SERVICE UNITS    */\n               SMF30CSU          /* CPU SERVICE UNITS      */\n               SMF30SRB          /* SRB                    */\n               SMF30IOV          /* I/O                    */\n               SMF30MSO          /* MSO                    */\n               SMF30TAT          /* TANS ACTIVE TIME       */\n               SMF30TET          /* RSVD                   */\n               SMF30RES          /* TRQNS RESD TIME        */\n               SMF30TRS          /* TOTAL TRANS            */\n             %END;\n        %IF &OS=Y | &ALL=Y  %THEN %DO;\n               SMF30TP\n             %END;\n        %IF &EX=Y | &ALL=Y  %THEN %DO;\n               SMF30DEV          /* DEVICE CLASS             */\n               SMF30UTP          /* UNIT TYPE                */\n               SMF30CUA          /* DEVICE NUMBER            */\n               SMF30DDN          /* DDNAME                   */\n               SMF30BLK          /* BLOCK COUNT              */\n               SMF30BSZ          /* LARGEST BLOCK SIZE       */\n               SMF30DCT          /* DEVICE CONNECT TIME IN SECONDS */\n               EXCP3420\n               EXCP3480\n               EXCP3380\n               EXCP3350\n               TOTEXCP\n               DEVT3420\n               DEVT3480\n               DEVT3380\n               DEVT3350\n               TOTDEVT\n             %END;\n   %MEND;\n\n            %MACRO STATS(PRINT=N);\n   %*-------------------------------------------------*\n    * NAME: %STATS                                    *\n    * DOC: TO INCLUDE SELECTED VARIABLES SUMMARY      *\n    *-------------------------------------------------*;\n    %IF &PRINT=Y %THEN %GOTO PRINT;\n            ID EDATE  ETIME SYSID SUBSYS RECSUBTY\n               SMF30JBN SMF30PGM SMF30STM SMF30UIF SMF30JNM SMF30STN\n               SMF30CLS SMF30PGN SMF30JPT SMF30AST SMF30PPS SMF30SIT\n               SMF30STD SMF30RST SMF30USR SMF30GRP SMF30RUD SMF30TID\n               SMF30PTY SMF30ACT SMF30SFL SMF30SPK SMF30PRV SMF30SYS\n               SMF30RGB SMF30ERG SMF30ARB SMF30EAR SMF30URB SMF30EUR\n               SMF30RGN SMF30TP\n               ;\n          VAR  SMF30INP SMF30TEP SMF30TPT SMF30TGT SMF30TCN SMF30CPT\n               SMF30CPS SMF30ICU SMF30ISB CPUTIME  SMF30PGI SMF30PGO\n               SMF30REC SMF30NSW SMF30PSI SMF30PSO SMF30VPI SMF30VPO\n               SMF30VPR SMF30CPI SMF30CPR SMF30LPI SMF30LPR SMF30PST\n               SMF30PSC SMF30SRV SMF30CSU SMF30SRB SMF30IOV SMF30MSO\n               SMF30TAT SMF30TET SMF30RES SMF30TRS SMF30BLK SMF30BSZ\n               SMF30DCT EXCP3420 EXCP3480 EXCP3380 EXCP3350 TOTEXCP\n               DEVT3420 DEVT3480 DEVT3380 DEVT3350 TOTDEVT\n               ;\n               %GOTO EXIT;\n     %PRINT:   EDATE ETIME SYSID SUBSYS RECSUBTY\n               SMF30JBN SMF30PGM SMF30STM SMF30UIF\n               SMF30JNM SMF30STN SMF30CLS SMF30PGN SMF30JPT SMF30AST\n               SMF30PPS SMF30SIT SMF30STD SMF30RST SMF30USR SMF30GRP\n               SMF30RUD SMF30TID SMF30PTY SMF30ACT SMF30SFL SMF30SPK\n               SMF30PRV SMF30SYS SMF30RGB SMF30ERG SMF30ARB SMF30EAR\n               SMF30URB SMF30EUR SMF30RGN SMF30TP  SMF30INP SMF30TEP\n               SMF30TPT SMF30TGT SMF30TCN SMF30CPT SMF30CPS SMF30ICU\n               SMF30ISB CPUTIME  SMF30PGI SMF30PGO SMF30REC SMF30NSW\n               SMF30PSI SMF30PSO SMF30VPI SMF30VPO SMF30VPR SMF30CPI\n               SMF30CPR TOTDEVT  DEVT3350\n               SMF30PST SMF30LPI SMF30LPR SMF30PSC SMF30SRV SMF30CSU\n               SMF30SRB SMF30IOV SMF30MSO SMF30TAT SMF30TET SMF30RES\n               SMF30TRS SMF30BLK SMF30BSZ SMF30DCT EXCP3420 EXCP3480\n               EXCP3380 EXCP3350 TOTEXCP  DEVT3420 DEVT3480 DEVT3380\n               ;\n   %EXIT:  %MEND;\n\n            %MACRO SET(SUBTYPE=4);\n   %*-------------------------------------------------*\n    * NAME: %SET                                      *\n    * DOC:  INCLUDE APPROPREAITE DATA                 *\n    *-------------------------------------------------*;\n    %IF &SUBTYPE=1 %THEN %DO; SET SMF30.SMF30S1; %END;\n    %IF &SUBTYPE=2 %THEN %DO; SET SMF30.SMF30S2; %END;\n    %IF &SUBTYPE=3 %THEN %DO; SET SMF30.SMF30S3; %END;\n    %IF &SUBTYPE=4 %THEN %DO; SET SMF30.SMF30S4; %END;\n    %IF &SUBTYPE=5 %THEN %DO; SET SMF30.SMF30S5; %END;\n    %IF &SUBTYPE=6 %THEN %DO; SET SMF30.SMF30S6; %END;\n    %MEND;\n\n   %MACRO SUMMARY(TYPE,SUBTYPE=4) ;\n   %*-------------------------------------------------*\n    * NAME: %SUMMARY                                  *\n    * DOC: CREATE STATS RECORD BASED ON VARIABLE      *\n    *-------------------------------------------------*;\n     DATA SUM&SUBTYPE;\n          SET SMF30.SMF30S&SUBTYPE ;\n          IF COMPCODE\u00ac=0 THEN DELETE ;\n          IF &TYPE=' '  THEN DELETE;\n     PROC SUMMARY NWAY DATA=SUM&SUBTYPE;\n          CLASS EDATE ETIME &TYPE  ;\n       %* INCLUDE IDS AND VARS    ;\n          %STATS\n          OUTPUT OUT=SUM&SUBTYPE SUM=;\n     PROC SORT  DATA=SUM&SUBTYPE;\n          BY &TYPE ;\n     PROC PRINT DATA=SUM&SUBTYPE LABEL SPLIT='*' ;\n          VAR &TYPE %STATS(PRINT=Y) ;\n\n    %MEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMF5": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02[\\x02[\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 603, "newlines": 603, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n         TESTOPEN &DCB\n.*---------------------------------------------------------------*\n.*  FUNCTION: SEE IF DCB WAS OPENED\n.*    RETURN: RC IN R15  (RC=4 NO GOOD)\n.*---------------------------------------------------------------*\n         AIF ('&DCB' EQ '').ERR1\n         LCLC  &I\n&I       SETC  '&SYSNDX'\n         TM    &DCB+48,B'00010000'\n         BO    GOOD&I\n         LA    15,4\n         B     GOOD&I+4\nGOOD&I   LA    15,0\n         MEND\n         MACRO\n&BINTME  BINTIME &VALUE,&RESULTS\n.*-------------------------------------------------------------------*\n.*    MACRO: BINTIME                                                 *\n.* FUNCTION: CONVERT TIME IN 100THS TO HH:MM:SS                      *\n.*           THIS FORMAT IS USED IN ALL SMF AND RMF RECORD TYPES     *\n.*           IT IS THE 'TIME BIN' MACRO FORMAT                       *\n.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION, THAT IS PASSED   *\n.*            'RESULTS' IS THE RX VALUE, CL8, THAT WILL CONTAIN      *\n.*            THE RETURNED VALUE                                     *\n.* EXAMPLE:   DOIT  BINTIME  SMF5TME,STARTME                         *\n.*            .                                                      *\n.*            .                                                      *\n.*            STARTME  DS    CL8                                     *\n.*-------------------------------------------------------------------*\n         GBLB   &TIMEG                 * SET GLOBAL VARIABLE\n         LCLC   &I                     *\n&I       SETC   '&SYSNDX'\n&BINTME  STM   0,4,STIME$$             * RESTORE REGS\n         ICM   1,B'1111',&VALUE        * IN HUNDREDTHS (.01) SEC\n         XR    0,0                     *\n         D     0,=F'100'               * MAKE INTO SECONDS\n         LR    2,1                     * SAVE SECONDS:            R2\n.* PROCESS HOURS\n         XR    0,0                     * CLEAR\n         D     0,=F'3600'              * GET HOURS\n         LR    3,1                     * STORE HOURS:             R3\n         M     0,=F'3600'              * HOURS * 3600 = MINUTES\n         SR    2,1                     * REMOVE HOURS\n         LR    1,2                     *\n.* PROCESS MINUTES\n         XR    0,0                     * CLEAR\n         D     0,=F'60'                * GET MINUTES\n         LR    4,1                     * STORE MINS:              R4\n         M     0,=F'60'                * REMOVE MINUTES\n         SR    2,1                     * SAVE DIFFERENCE\n.* EDIT HOURS MINUTES AND SECONDS\n         CVD   3,DWORD                 *\n         UNPK  &RESULTS.(2),DWORD+6(2) *\n         OI    &RESULTS.+1,X'F0'       *\n         CVD   4,DWORD                 *\n         UNPK  &RESULTS.+3(2),DWORD+6(2)\n         OI    &RESULTS.+1+3,X'F0'     * OR 1/2 BYTE\n         CVD   2,DWORD                 *\n         UNPK  &RESULTS.+3+3(2),DWORD+6(2)\n         OI    &RESULTS.+1+3+3,X'F0'   * OR 1/2 BYTE\n         MVI   &RESULTS.+2,C':'        * ADD HH:MM:SS\n         MVI   &RESULTS.+5,C':'        * ...\n         LM    0,4,STIME$$             * RESTORE REGS\n.*\n.* IF ISSUED BEFORE, SKIP VALUES\n.*\n         AIF    (&TIMEG).MEND\n&TIMEG   SETB  1\n         B     B&I                     * SKIP SAVE AREA\nSTIME$$  DS    5F                      * SAVE REGS\nB&I      EQU    *\n.MEND    MEND\n         MACRO\n&LABEL   CPUTIME  &VALUE,&FULL\n.*-------------------------------------------------------------------*\n.*    MACRO: CPUTIME                                                 *\n.* FUNCTION: CONVERT CPUTIME FROM BINARY TO MINUTE/SECONDS           *\n.* VARIABLES: 'VALUE' IS THE VALUE, RX INSTRUCTION OR REGISTER IN THE*\n.*            FORM '(3)', WHICH IS TRANSLATED INTO SECONDS.HNDTHS    *\n.*            FOR CPUTIME, FROMM SMF/RMF RECORDS                     *\n.* EXAMPLE:   DOIT  CPUTIME  SMF5JCPU                                *\n.*            (MINUTES.SECONDS) = CL7                                *\n.*            (VALUES ARE RETURNED IN VARIABLES MINUTES CL4          *\n.*             AND SECONDS CL3)                                      *\n.*                                                                   *\n.*                                                                   *\n.*                                                                   *\n.*-------------------------------------------------------------------*\n         GBLB   &GLBL                  * SET GLOBAL VARIABLE\n         LCLC   &I,&REG                *\n&I       SETC   '&SYSNDX'\n&LABEL   STM    0,4,S$$##$$            * SAVE REGS\n         XC     MINUTES,MINUTES        * ZERO\n         TR     MINUTES(4),=C' '       * BLANK\n.*-------------------------------------------------------------------*\n.* INSERT CPUTIME INTO R1                                            *\n.*-------------------------------------------------------------------*\n         AIF    ('&FULL' NE '').SKIP1\n         AIF    ('&VALUE'(1,1) EQ '(').REG\n         ICM    1,B'0111',&VALUE       * INSERT VALUE, 3 BYTES\n         AGO    .STORE1\n.SKIP1   ANOP\n         AIF    ('&VALUE'(1,1) EQ '(').REG\n         L      1,&VALUE               * LOAD VALUE\n         AGO    .STORE1\n.REG     ANOP\n&REG     SETC   '&VALUE'(2,1)\n         MNOTE  0,'REG=&REG'\n         LR     1,&REG\n.STORE1  ANOP\n         XR     0,0                    * CLEAR EVEN\n         D      0,=F'100'              * CHANGE 100TH SECOND TO SECONDS\n         LR     3,1                    * SAVE QUOTIENCT, SECONDS\n         XR     0,0                    *\n.*\n         D      0,=F'60'               * GET MINUTES\n         LTR    1,1                    * ANY MINUTES ?\n         BZ     SEC&I                  * NOPE, USE SECONDS ONLY\n         LR     4,1                    * YEP, SAVE QUOTIENCT, MINUTES\n         M      0,=F'60'               * FIGURE REMIANDER IN SECONDS\n         LR     0,3                    * RELOAD RAW SECONDS\n         SR     0,1                    * SEC-((SEC/60)*60),\n*                                        ... DROPPING THE REMAINDERS\n         LR     0,3                    * NEW SECONDS\n.*-------------------------------------------------------------------*\n.*       NOW WE HAVE MINUTES AND SECONDS                             *\n.*-------------------------------------------------------------------*\n         CVD    4,DWORD                *\n         MVC    MINUTES(4),=X'40202021'\n         ED     MINUTES(4),DWORD+6     *\n.*                                     *\nSEC&I    DS     0H                     *\n         CVD    3,DWORD                *\n         MVI    SECONDS,C'.'           * TELL ABEOUT SECONDS\n         UNPK   SECONDS+1(2),DWORD(8)  * UNPACK SECONDS\n         OI     SECONDS+2,X'F0'        * OR RESULTS\nLM&I     LM     0,4,S$$##$$            * RESTORE REGS\n.* IF ISSUED BEFORE, SKIP VALUES\n         AIF    (&GLBL).MEND           *\n&GLBL    SETB   1                      *\n         B      B&I                    * SKIP SAVE AREA\nS$$##$$  DS     5F                     *\nMINUTES  DS     CL4                    * MMMM\nSECONDS  DS     CL3                    *     .SS\nB&I      DS     0H                     *\n.MEND    MEND                          *\n TITLE '>>> PROCESS SMF TYPE(05) RECORDS FROM DUMPPED FILES <<<'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = SMF5                                                 *\n*                                                                     *\n*  DESCRIPTIVE NAME = PROCESS SMF TYPE 5 RECORDS                      *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = PROCESS SMF TYPE 5 RECORDS EITHER TO SYSOUT DATASET     *\n*             OR TO A SORTIN DDNAME FOR POST PROCESSING               *\n*  NOTES = NONE                                                       *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 ..... ADDRESS TO SMF RECORD TYPE DSECT                 *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 ..... LINE COUNTER                                     *\n*           R7 ..... BAL REG.                                         *\n*           R8 ..... RECORD COUNTER                                   *\n*           R9 ..... PAGE COUNTER                                     *\n*          R10 .....                                                  *\n*          R11 ..... BASE+4095                                        *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: DCB, OPEN, GET, PUT, IEFJFCBN, IFASMFR    *\n*                                                                     *\n*                    OTHER: REGS                                      *\n*                                                                     *\n*        SUBROUTINES = PRC:  JULSUB FROM BILL G. OFF THE CBT TAPE     *\n*                                                                     *\n*             DSECTS = IBM: NONE                                      *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = SMF5     (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = DUMPED SMF RECORDS                              *\n*                                                                     *\n*             OUTPUT = DDNAME SYSPRINT AND/OR DDNAME SORTIN           *\n*                                                                     *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = WTO FOR MISSING DDNAME SMFIN                 *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88                                                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*          ANY ABITIOUS INDIVIDUALS WHO WOULD LIKE TO REWITE THIS     *\n*              TO MAKE IT RE-ENTERENT ??                              *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\nSMF5     CSECT\n         STM   R14,R12,12(R13)         * SAVE PREVIOUS REGS\n         LR    R12,R15                 * SAVE PGM BEGIN ADDR\n         USING SMF5,R12,R11            *\n         L     R11,SEC4K               *\n         LA    R10,SAVE                * ADDR NEW SAVE AREA\n         ST    R10,8(R13)              * NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              * OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 * R13 CONTAINS NEW SAVE ADDR\n         B     *+24\n         DC    C'&SYSDATE_&SYSTIME_V1.0'\nLINECNT  EQU   6                       * RECORD COUNTER\nBALREG   EQU   7                       * BAL REG\nCOUNT    EQU   8                       * RECORD COUNTER\nPGCOUNT  EQU   9                       * PAGE COUNTER\n         XC    RC,RC                   * 0 RETURN CODE\n         XR    LINECNT,LINECNT         * INIT LINE COUNT\n         XR    COUNT,COUNT             * RECORDER COUNTER\n         XR    PGCOUNT,PGCOUNT         * RECORDER COUNTER\n         RDJFCB SMFIN                  * MAKE SURE SMFIN FILE IS HERE\n         LTR   R15,R15                 *\n         BNZ   ERRSMFIN                *\n         MVC   ODSN(44),JFCBDSNM       * GET DSN\n         MVC   OVOL(6),JFCBVOLS        * GET VOLSER\n         RDJFCB SORTIN                 * IS SORTIN HERE ?\n         LTR   R15,R15                 *\n         BNZ   $OPEN                   *\n         OPEN  (SORTIN,OUTPUT)         * ... THEN OPEN IT\n$OPEN    OPEN  (SMFIN,,SYSPRINT,OUTPUT)\n         BAL   BALREG,$HEADER          *\n         SPACE 2\n$READ    GET   SMFIN                   * READ RECORD\n         LR    R2,R1                   * LOAD ADDRESS OF GET LOCATE\n         BAL   BALREG,$READCNT         *\n         USING SMFDSECT,R2             * ADDRESS SMF DESCT\n         CLI   SMF5RTY,X'05'           * RECORD TYPE FIVE ?\n         BNE   $READ                   * NOPE, READ SOME MORE\n         CLI   SMF5DTE+1,X'88'         * DATE VALID ?\n         BNE   $READ                   * NOPE, READ SOME MORE\n         CLI   SMF5LEN+1,X'77'         * SMALLER THAN X'85', 119\n         BL    $JCLERR                 * YEP, BAD TYPE 5 RECORDS\n* FOUND TYPE 5\n         BAL   BALREG,$BADJOBS         * CHECK FOR GOOD JOBS\n         LTR   R15,R15                 * CHECK\n         BNZ   $READ                   * BAD IF RC\u00ac=0\n         MVC   OJOB(L'SMF5JBN),SMF5JBN * JOB NAME\n         SPACE\n* DETERMINE TIMING FACTORS: CPU, TCB, SRB\n         SPACE\n         CPUTIME SMF5JCPU              * SRB\n         MVC   OTCB(L'MINUTES+L'SECONDS),MINUTES\n         CPUTIME SMF5SRBT              * TCB\n         MVC   OSRB(L'MINUTES+L'SECONDS),MINUTES\n         XR    R1,R1\n         XR    R3,R3\n         ICM   R1,B'0111',SMF5JCPU\n         ICM   R3,B'0111',SMF5SRBT\n         AR    R3,R1                   * ADD TCB AND SRB TIME TOGETHER\n         CPUTIME (3),FULL              * CALC. TOTAL TIME\n         MVC   OCPU(L'MINUTES+L'SECONDS),MINUTES\n         SPACE\n         BINTIME SMF5TME,OETIME        * JOB/STC/TSO END TIME\n         SPACE\n* COMPARE SMF TYPE 5: END DATE\n         CP    OLDEJUL(4),SMF5DTE      * END DATE CHANGE ?\n         BE    $NOEDATE                * NOPE, CONTINUE\n         MVC   OLDEJUL(4),SMF5DTE      * REPLACE OLD\n         MVC   JULPARM1(4),SMF5DTE     * LOAD PARM\n         BAL   BALREG,$JULDATE\n         MVC   OEDATE(8),JULPARM3      * SAVE 00JAN88\n         MVC   ODAY(3),JULPARM3+7      * SAVE 'WEEKDAY'\n$NOEDATE DS    0H\n         CLI   SMF5JICL,C' '           * NO JOB CLASS, MUST BE STC\n         BE    $STCTIME\n         CLI   SMF5JICL,X'00'          * NO JOB CLASS, MUST BE STC\n         BE    $STCTIME\n         SPACE\n* COMPARE SMF TYPE 5: JOB START INITIATION DATE\n         SPACE\n         BINTIME SMF5JIT,OSTIME        * JOB INITIATION TIME\n         CP    OLDSJUL(4),SMF5JID      * START DATE CHANGE ?\n         BE    $NOSDATE                * NOPE, CONTINUE\n         MVC   OLDSJUL(4),SMF5JID      * REPLACE DATE\n         MVC   JULPARM1(4),SMF5JID     * LOAD PARM\n         BAL   BALREG,$JULDATE         * DO IT\n         MVC   OSDATE(8),JULPARM3      * SAVE START INIT. DATE\n         MVC   ODAY(3),JULPARM3+8      * WEEK DAY\n         B     $NOSDATE                * CONTINUE, SKIP STC STUFF\n         SPACE\n$STCTIME DS    0H                      * READER TIME, STC\n         BINTIME SMF5RST,OSTIME        * READER TIME, STC\n         SPACE\n* COMPARE SMF TYPE 5: STC START READER DATE\n         SPACE\n         CP    OLDSJUL(4),SMF5RSD      * START DATE CHANGE ?\n         BE    $NOSDATE                * NOPE, CONTINUE\n         MVC   OLDSJUL(4),SMF5RSD      * REPLACE OLD DATE\n         MVC   JULPARM1(4),SMF5RSD     * LOAD PARM\n         BAL   BALREG,$JULDATE         * DO IT\n         MVC   OSDATE(8),JULPARM3      * SAVE READER START DATE\n         MVC   ODAY(3),JULPARM3+8      * WEEK DAY\n         SPACE\n$NOSDATE DS    0H\n         SPACE\n* PROCESS RETURN CODES\n         SPACE\n         XR    R5,R5\n         XR    R4,R4\n         ICM   R5,B'0011',SMF5JCC      * GET RETURN CODE\n         LTR   R5,R5                   * RC=0 ?\n         BZ    $ZERORC                 * YEP, SAY SO ...\n         ST    R5,TRC                  * STORE IT:    R5=0000 WXYZ\n         SRL   R5,3*4                  * GET TOP HALF R5=0000 000W\n         SLDL  R4,8*4                  * MOVE UP      R5=0000 0000\n*                                      *              R4=0000 000W\n         L     R5,TRC                  *              R5=0000 WXYZ\n         SRL   R5,2*4                  *              R5=0000 00WX\n         SLL   R5,7*4                  *              R5=X000 0000\n         SRL   R5,1*4                  *              R5=0X00 0000\n         SLDL  R4,2*4                  *              R5=0000 0000\n*                                      *              R4=0000 W0X0\n         L     R5,TRC                  *              R5=0000 WXYZ\n         SRL   R5,1*4                  *              R5=0000 0WXY\n         SLL   R5,7*4                  *              R5=Y000 0000\n         SRL   R5,1*4                  *              R5=0Y00 0000\n         SLDL  R4,2*4                  *              R5=0000 0000\n*                                      *              R4=000W X0Y0\n         L     R5,TRC                  *              R5=0000 WXYZ\n         SLL   R5,7*4                  *              R5=Z000 0000\n         SRL   R5,1*4                  *              R5=0Z00 0000\n         SLDL  R4,2*4                  *              R5=0000 0000\n*                                      *              R4=0W0X 0Y0Z\n         ST    R4,TRC\n         TR    TRC(4),TRTBL            *\n         CLI   TRC,C'0'\n         BNE   $NZERORC\n         MVI   TRC,X'40'\n         CLI   TRC+1,C'0'\n         BNE   $NZERORC\n         MVI   TRC+1,X'40'\n         B     $NZERORC\n$ZERORC  MVC   ORC(2),=C'  '\n         MVC   ORC+2(2),=C'00'\n         B     *+10\n$NZERORC MVC   ORC(4),TRC              *\n         MVC   OJOBCL(L'SMF5JICL),SMF5JICL * JOB CLASS\n         SPACE\n* PROCESS NUMBER OF STEPS\n         SPACE\n         XR    R1,R1                   *\n         IC    R1,SMF5NST              * NUMBER OF STEPS\n         CVD   R1,DWORD                * ... CONV\n         UNPK  OSTEPS(2),DWORD(8)      *\n         OI    OSTEPS+1,X'F0'          *\n         SPACE\n* PROCESS PERFORMANCE GROUP NUMBER\n         SPACE\n         ICM   R1,B'0011',SMF5PGNO     * PERFORMANCE GROUP\n         CVD   R1,DWORD                *\n         MVC   TGROUP(4),=X'40202021'  *\n         ED    TGROUP(4),DWORD+6       *\n         MVC   OGROUP(2),TGROUP+2      *\n         SPACE\n* PROCESS PROGRAMMER NAME\n         SPACE\n         MVC   OPGMR(L'SMF5PRGN),SMF5PRGN\n         SPACE\n* PRINT RESULTS\n         SPACE\n         TESTOPEN SORTIN\n         LTR   R15,R15\n         BZ    $SORTIN\n         C     LINECNT,=F'1'\n         BNE   $PUTREC\n         MVI   OSMF5,C'0'\n$PUTREC  PUT   SYSPRINT,OSMF5          * WRITE RECORD\n         MVI   OSMF5,C' '\n         A     LINECNT,=F'1'           * ADD TO LINE COUNT\n         C     LINECNT,=F'58'          * CHECK IT\n         BL    $READ                   *\n         BAL   BALREG,$HEADER          * IF HIGH, NEW HEADER\n         B     $READ                   *\n$SORTIN  MVI   OSMF5,C' '\n         PUT   SORTIN,OSMF5+1\n         B     $READ                   *\n         SPACE 2\n$HEADER  DS    0H                      *\n         A     PGCOUNT,=F'1'\n         CVD   PGCOUNT,DWORD\n         MVC   PAGE(4),=X'40202021'\n         ED    PAGE(4),DWORD+6\n         PUT   SYSPRINT,OSMF5H         *\n         XR    LINECNT,LINECNT         *\n         A     LINECNT,=F'1'           *\n         BR    BALREG                  *\n         SPACE\nERRSMFIN DS     0H\n         WTO    'MISSING DDNAME SMFIN ...'\n         LA     R1,8                   * SET RETURN CODE\n         ST     R1,RC                  * RC=08\n         B      FINISH                 * GO BACK\nERRSORTN DS     0H\n         WTO    'MISSING DDNAME SORTIN ...'\n         LA     R1,8                   * SET RETURN CODE\n         ST     R1,RC                  * RC=08\n         B      FINISH                 * GO BACK\n$READCNT A      COUNT,=F'1'            * ADD ONE TO RECORD COUNT\n         BR     BALREG                 * GO BACK\n         SPACE\n$JCLERR  DS    0H                      * SMF 5 REC LEN < X'78'\n         BAL   BALREG,$BADJOBS\n         LTR   R15,R15                 * CHECK\n         BNZ   $READ                   * BAD IF RC\u00ac=0\n         XC    BLANKS,BLANKS           * MAKE ZEROS\n         TR    BLANKS(133),=C' '       * MAKE BLANKS\n         MVI   BLANKS,C' '             * DOUBLE SPACE\n         MVC   BLANKS+1(L'SMF5JBN),SMF5JBN  MOVE JOBNAME\n         MVC   BLANKS+L'SMF5JBN+3(30),=CL30'JCL ERROR/TYPRUN SCAN'\n         TESTOPEN SORTIN\n         LTR   R15,R15\n         BZ    $SORTIN1\n         PUT   SYSPRINT,BLANKS\n         XC    BLANKS,BLANKS          * MAKE ZEROS\n         TR    BLANKS(133),=C' '      * MAKE BLANKS\n         A     LINECNT,=F'1'\n         C     LINECNT,=F'58'          * CHECK IT\n         BL    $READ                   *\n         BAL   BALREG,$HEADER          * IF HIGH, NEW HEADER\n         B     $READ\n$SORTIN1 MVI   BLANKS,C' '\n         PUT   SORTIN,BLANKS+1\n         XC    BLANKS,BLANKS          * MAKE ZEROS\n         TR    BLANKS(133),=C' '      * MAKE BLANKS\n         B     $READ                   *\n         SPACE\n$BADJOBS DS    0H                      * ___ BAD JOBS ___\n         CLC   SMF5JBN(3),=C'JOB'      * NO 'JOB'\n         BE    $BDJOB                  * NOPE, READ SOME MORE\n         CLC   SMF5JBN(7),=C'DEALLOC'  * NO 'DEALLOC'\n         BE    $BDJOB                  * NOPE, READ SOME MORE\n         LA    R15,0                   * SAY WE HAVE A GOOD ONE\n         BR    BALREG\n$BDJOB   LA    R15,4                   * SAY WE HAVE A BAD JOB\n         BR    BALREG\n$JULDATE DS    0H                      * THIS IS A JULIAN DATE\n         LA    R1,3                    * THIS IS A JULIAN DATE\n         ST    R1,JULPARM2             * ... SAVE IT\n         LA    R1,8+128                * WE WANT 'DDJANYY' AND WEEKDAY\n         ST    R1,JULPARM4             * ... SAVE THAT\n         LA    R1,JULPTRS              * LOAD ADDR OF PARM LIST\n         L     R15,=V(JULSUB)          * GET READY ...\n         BALR  R14,R15                 * DO IT\n         BR    BALREG\n         EJECT\n$EOF     CLOSE  (SMFIN)                *\n         TESTOPEN SORTIN\n         LTR   R15,R15\n         BNZ   $CONT1\n         CLOSE (SORTIN)\n$CONT1   CVD   COUNT,DWORD             * CONVERT\n         ED    RECREAD(8),DWORD+4      *\n         PUT   SYSPRINT,SMFFILE        *\n         CLOSE (SYSPRINT)              *\n         B     FINISH                  *\nFINISH   SR     R15,R15                * ZERO RETURN REGISTER\n         DROP   R2\n         L      R15,RC                 * LOAD RETURN CODE\n         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            * RETURN ADDRESS\n         LM     R0,R12,20(R13)         * REST OF THE REGS\n         BR     R14                    * RETURN\nSAVE     DS     18F                    * SAVE AREA FOR THIS PGM\nSAVE1    DS     1F\nSEC4K    DC     A(SMF5+4095)           *\nTRC      DS     F\nTRTBL    DC     C'0123456789ABCDEF'    * TRANSLATE TABLE FOR RCODE\nHRS      DS     F\nHRMIN    DS     F\nMINS     DS     F\nMINSEC   DS     F\nSECS     DS     F\nRC       DS     F                      * RETURN CODE\n         DS     0D                     *\nDWORD    DS     D                      * DOUBLE WORD\n         DS     0D                     * SETUP FOR CALLING DATEJUL\nJULPTRS  DC     A(JULPARM1)            *\n         DC     A(JULPARM2)            *\n         DC     A(JULPARM3)            *\n         DC     A(JULPARM4)            *\n         DC     A(JULPARM5)            *\nJULPARM1 DS     F                      * INPUT DATE: 'YYYYDDDF' PACKED\nJULPARM2 DS     F                      * INPUT CODE: JULIAN PL4\nJULPARM4 DS     F                      * OUTPUT CODE: 'YYMMMDD'\nJULPARM3 DS     CL8                    * OUTPUT FIELD\n         DS     CL12                   * WEEKDAY CL12\nJULPARM5 DS     32D                    * 256 BYE WORK AREA\nBLANKS   DC     CL133' '\nOLDEJUL  DC     PL4'0'\nOLDSJUL  DC     PL4'0'\nTGROUP   DC     CL4' '                 *\nTOTCPUTM DS     F\nSMFFILE  DC     CL133'0'               *\n         ORG    SMFFILE+1\n         DC     C'DSN='                *\nODSN     DC     CL44' '                *\n         DC     C'VOLSER='             *\nOVOL     DC     CL10' '                *\n         DC     C'RECORDS READ = '     *\nRECREAD  DC     X'4020202020202021'    * RECORDS READ\n         ORG    ,\n         EJECT\nOSMF5    DC     CL133' '               * OUTPUT OF SMF5 RECORD\n         ORG    OSMF5+1\nOJOB     DC     CL8' ',C' '            * JOB NAME\nORC      DC     CL4' ',C' '            * RETURN CODE\nOSTEPS   DC     CL2' ',C' '            * STEPS IN JOB\nOSTIME   DC     CL8' ',C' '            *\nOSDATE   DC     CL7' ',C' '            * DATE FROM JULSUB 'DDMMMYY'\nOETIME   DC     CL8' ',C' '            *\nOEDATE   DC     CL7' ',C' '            * DATE FROM JULSUB 'DDMMMYY'\nODAY     DC     CL3' ',C' '            * DATE FROM JULSUB 'WEEKDAY'\nOJOBCL   DC     CL2' '                 * JOBCLASS\nOTCB     DC     CL7' '                 * CPU SECONDS, SRB\nOSRB     DC     CL7' ',C' '            * CPU SECONDS, SRB\nOCPU     DC     CL8' ',C' '            * CPU SECONDS, TCB+SRB\nOGROUP   DC     CL2' ',C' '            * PERFORMANCE GROUP\nOPGMR    DC     CL20' ',C' '           * PROGRAMMER NAME\nLOSMF5   EQU    *-OJOB\n         ORG    ,\nOSMF5H   DC     CL133'1'               * OUTPUT OF SMF5 HEADER\n         ORG    OSMF5H+1\n         DC     CL9'__JOB__'           * JOB NAME\n         DC     CL5'  RC'               * RETURN CODE\n         DC     CL3' #'                * STEPS IN JOB\n         DC     CL9'_STIME_'           *\n         DC     CL8'_SDATE_'           * DATE FROM JULSUB 'DDMMMYY'\n         DC     CL9'_ETIME_'           *\n         DC     CL8'_EDATE_'           * DATE FROM JULSUB 'DDMMMYY'\n         DC     CL4'DAY'               * DATE FROM JULSUB 'WEEKDAY'\n         DC     CL3'CL'                *\n         DC     C'  TCB  + SRB = CPUTIME'\n         DC     C' PG',C' '            *\n         DC     C'_ PROGRAMMER NAME _',C'  '\n         ORG    ,\n         ORG    *-9\n         DC     C'PAGE '\nPAGE     DC     CL4' '\n         SPACE\n         PRINT  NOGEN\nSMFIN    DCB   DDNAME=SMFIN,DSORG=PS,LRECL=32767,RECFM=VBS,            X\n               MACRF=GL,EXLST=EXL1,EODAD=$EOF\nSORTIN   DCB   DDNAME=SORTIN,DSORG=PS,LRECL=121,RECFM=FB,BLKSIZE=23474,X\n               MACRF=PM,EXLST=EXL2\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=133,BLKSIZE=23408,       X\n               RECFM=FBA,MACRF=PM\n         SPACE\n         DS     0F\nEXL1     DC     X'07',AL3(JFCB)\nEXL2     DC     X'87',AL3(JFCB)\nJFCB     DS     0H\n         IEFJFCBN LIST=NO\n         PRINT  GEN\n         LTORG\nSMFDSECT DSECT\n         IFASMFR  5\n         REGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMF5#": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00@\\x00@\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 64, "newlines": 64, "modlines": 0, "user": "FILE022"}, "text": "//SMF5#  JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEMBLE, LINK AND EXECUTE SMF5 PGM WHICH PROCESSES      *\n//*        DUMPED SMF TYPE 5, STEP TERMINATION RECORDS              *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSIN    DD  *\n//L.SYSLMOD DD  DSN=LINKLIB,DISP=SHR\n//SYSIN     DD  *\n  INCLUDE SYSLMOD(JULSUB)\n  NAME SMF5(R)\n/*\n//DOIT    EXEC PGM=SMF5,COND=(0,LT)\n//STEPLIB  DD  DSN=*.L.SYSLMOD,DISP=SHR\n//SMFIN    DD  DSN=SMFDUMP,DISP=SHR\n//SORTIN   DD  DSN=&&TEMP,DISP=(,PASS),UNIT=DISK,SPACE=(CYL,(2,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSUDUMP DD  SYSOUT=(,)\n// EXEC PGM=IEBGENER\n//SYSUT2   DD  SYSOUT=(,)\n//SYSUT1   DD  DSN=&&TEMP,DISP=(OLD,DELETE)\n//*\n//SORTM   EXEC PGM=SORT\n//SORTLIB  DD  DSN=SYS1.SORTLIB,DISP=SHR\n//*SORTIN   DD  DSN=&&SORT,DISP=(OLD,DELETE)\n//SORTIN   DD  DSN=&&TEMP,DISP=(OLD,DELETE)\n//SORTOUT  DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SORTWK01 DD  UNIT=DISK,SPACE=(CYL,(5,1))\n//SORTWK02 DD  UNIT=DISK,SPACE=(CYL,(5,1))\n//SYSIN    DD  *\n*----------------------------------------------------------------*\n* RECORD LAY OUT:                                                *\n*  1 - 8  JOBNAME                                                *\n*  10-13  CONDITION CODE OR, ' JCL' FOR JCL ERROR                *\n*  15-16  NUMBER OF STEPS                                        *\n*  18-25  START TIME: HH:MM:SS                                   *\n*  27-33  START DATE: DDMMMYY                                    *\n*  35-42  END TIME: HH:MM:SS                                     *\n*  44-50  END DATE: DDMMMYY                                      *\n*  52-54  WEEK DAY:  MON-SUN                                     *\n*  56     JOB CLASS OR ' ' FOR STC TASK                          *\n*  58-64  TCB TIME IN MMMM.SS                                    *\n*  66-71  SRB TIME IN MMMM.SS                                    *\n*  73-79  TOT CPUTIME IN MMMM.SS                                 *\n*  82-83  JOB/TASK PERFORMANCE GROUP                             *\n*  85-105 PGM NAME FIELD                                         *\n*----------------------------------------------------------------*\n*\n  SORT FIELDS=COPY\n* CICS TASKS ONLY\n  INCLUDE COND=(1,4,CH,EQ,C'CICS',AND,11,3,CH,NE,C'JCL',AND,\n                56,1,CH,EQ,C' ')\n/*\n//\n* SORT BY JOB/TASK NAME\n  SORT FIELDS=(1,8,CH,D)\n* STARTED TASKS ONLY\n  INCLUDE COND=(56,1,CH,EQ,C' ',AND,11,3,CH,NE,C'JCL')\n  END\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMPELIS#": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x8f\\x00\\x8f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 143, "newlines": 143, "modlines": 0, "user": "FILE022"}, "text": "//SMPELIST JOB\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE SMPELIST MODULE.  *\n//*                                                                   *\n//* PERFORM A 'CHANGE ALL' ON 'THIS.LIBRARY' AND 'A.LINKLIB' TO POINT *\n//*         TO INSTALLATION LIBRARIES                                 *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=2M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=16000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=THIS.LIBRARY,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(SMPELIST),DISP=SHR\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(6,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLMOD  DD  DSN=A.LINKLIB(SMPELIST),DISP=SHR\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* RUN AN SMP/E LIST FOR ALL FUNCTIONS                               *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//  EXEC SMPELIST\n//SMPLIST  DD DSN=&&SMPE,UNIT=SYSDA,DISP=(,PASS),\n// SPACE=(CYL,(10,1))\n//SMPCNTL  DD  *\n SET BDY(MVSTGT).\n     LIST FUNCTIONS.\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* RUN AN SMP/E LISTING THRU SMPELIST PGM                            *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//SMPELIST EXEC PGM=SMPELIST\n//SYSLMOD  DD  DSN=A.LINKLIB(SMPELIST),DISP=SHR\n//SMPELIST DD   DSN=&&SMPE,DISP=(OLD,DELETE)\n//SYSOUT   DD   SYSOUT=*\n//\n//\n//*              ---------- OR ---------\n//*\n//*              ---------- OR ---------\n//*\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* RUN AN SMP/E LISTING THRU SMPELIST PGM AND SEND TO A DATASET      *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//SMPELIST EXEC PGM=SMPELIST,PARM=NOHEADER\n//SYSLMOD  DD  DSN=A.LINKLIB(SMPELIST),DISP=SHR\n//SMPELIST DD   DSN=&&SMPE,DISP=(OLD,DELETE)\n//SYSOUT   DD   DSN=&&SYSOUT,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(3,1))\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* CREATE A DATASET LIST FORM INFO/MVS V2 OF RECORD  'E000901'       *\n//*                                                                   *\n//* THIS RECORD IS THE COURTSEY RECORD IBM KEEPS ON ALL THEIR         *\n//*                        PRODUCTS                                   *\n//*                                                                   *\n//* THEN RUN IT THRU SAS. THIS REPORT WILL COMPARE YOUR FMID'S        *\n//* WITH WHAT IS IN 'E000901' AND CREATE A READABLE REPORT            *\n//*                                                                   *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*\n//INFOS#07 EXEC SAS\n//FILEIN    DD  DSN=INFOMVS.E000901,DISP=SHR\n//SMPELIST  DD  DSN=&&SYSOUT,DISP=(OLD,DELETE)\n//SYSIN     DD  *\n  OPTIONS MACROGEN MPRINT DATE SOURCE SOURCE2 ERROR=0 ;\n\n DATA SMPELIST ;\n      INFILE SMPELIST;\n      INPUT @1  FMID   $8.   @11 STAT1  $3.\n            @16 STAT2  $3.   @21 STAT3  $3.\n            @29 YY     $2.   @32 DDD    $3.\n            ;\n      FORMAT JDATE DATE7. ;\n      JDATE=YY||DDD;\n      JDATE=COMPRESS(JDATE);\n      JDATE=DATEJUL(JDATE);\n      STATS=STAT1||'/'||STAT2||'/'||STAT3; STATUS=COMPRESS(STATUS);\n      DROP YY DDD STAT1 STAT2 STAT3 ;\n      LABEL FMID='FUNTIONS'\n            JDATE='DATE*INSTALLED'\n            STATS='STATUS*INFO'\n            ;\n  DATA FMIDINFO;\n  INFILE FILEIN MISSOVER;\n  INPUT  @23   FMID       $7.\n               @23   FLDCHK1    $1.\n               @24   FLDCHK2    $1.\n               @25   FLDCHK3    $1.\n               @26   FLDCHK4    $1.\n               @27   FLDCHK5    $1.\n               @28   FLDCHK6    $1.\n               @29   FLDCHK7    $1.\n         @32   NAME       $20.        @56   COMPID1    $4. COMPID2 $5.\n         @66   RELKEY     $4.         @72   PSPUPG     $8.\n         ;\n  IF FMID     =  ' '   THEN DELETE;\n  IF FMID     =  '*'   THEN DELETE;\n  IF FLDCHK1  =  ' '   THEN DELETE;\n  IF FLDCHK2  =  ' '   THEN DELETE;\n  IF FLDCHK3  =  ' '   THEN DELETE;\n  IF FLDCHK4  =  ' '   THEN DELETE;\n  IF FLDCHK5  =  ' '   THEN DELETE;\n  IF FLDCHK6  =  ' '   THEN DELETE;\n  IF FLDCHK7  =  ' '   THEN DELETE;\n  COMPID=COMPID1||'-'||COMPID2; COMPID=COMPRESS(COMPID);\n  DROP FLDCHK1 FLDCHK2 FLDCHK3 FLDCHK4 FLDCHK5 FLDCHK6 FLDCHK7\n       COMPID1 COMPID2\n       ;\n      LABEL FMID='FUNTIONS'\n            NAME='FMID*NAME'\n          COMPID='COMPONENET*IDENTIFIER'\n          RELKEY='RELEASE*KEY'\n            ;\n\n  PROC SORT DATA=FMIDINFO; BY FMID;\n  PROC SORT DATA=SMPELIST; BY FMID;\n\n  DATA MERGE;\n       MERGE FMIDINFO(IN=INFO) SMPELIST(IN=SMPE); BY FMID;\n       IF INFO AND NOT SMPE THEN DELETE;\n\n\n PROC PRINT DATA=MERGE LABEL SPLIT='*' ;\n TITLE 'FUNCTIONS SORTED BY FMID';\n\n PROC SORT DATA=MERGE;   BY DESCENDING JDATE;\n\n PROC PRINT DATA=MERGE LABEL SPLIT='*' ;\n TITLE 'FUNCTIONS SORTED BY DESCENDING DATE';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMPELIST": {"ttr": 6665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xc1\\x00\\xc1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 193, "newlines": 193, "modlines": 0, "user": "FILE022"}, "text": "  TITLE 'PROCESS THE OUTPUT OF AND SMP/E LIST FUNCTIONS'\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                   *\n*   FUNCTION:  THIS PROGRAM PROCESSES THE OUTPUT OF A               *\n*              A SMP/E 'LIST FUNCTIONS' COMMAND, CREATING           *\n*              A \"ONE-LINER\" FOR EACH FMID AS TO ITS STATUS.        *\n*                                                                   *\n*      INPUT:  DDNAME(SMPELIST) - OUTPUT OF SMP/E LISTING           *\n*                                                                   *\n*     OUTPUT:  DDNAME(SYSOUT) - ONE LINERS, LRECL(80), FOR EACH     *\n*              FMID                                                 *\n*       PARM:  OPTIONALLY SPECIFYING: NOHEADER TO REMOVE HEADERS    *\n*              FROM THE REPORT                                      *\n*                                                                   *\n*       REGS: R1 ...... PARM, IF ANY                                *\n*             R12 ..... BASE                                        *\n*             R6 ...... LINES PER PAGE (#LINES)                     *\n*             R7 ...... PAGE NUMBER (#PGNUM)                        *\n*             R8 ...... BAL REG (#BAL)                              *\n*                                                                   *\n*      AUTHOR:  MARK V. HEDGES -                                    *\n*               RIVERSIDE METHODIST HOSPITAL                        *\n*               250 GRACELAND BLVD.                                 *\n*               COL. OH 43214                                       *\n*               (614) 431-1535                               P.T.L. *\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\nSMPELIST  CSECT\n          STM    R14,R12,12(R13)       * SETUP\n          LR     R12,R15\n          USING  SMPELIST,R12\n          B      *+24\n          DC     C'&SYSDATE_&SYSTIME_V1.0'\n          LA     R10,SAVE\n          ST     R10,8(R13)\n          ST     R13,SAVE+4\n          LR     R13,R10\n          L      R2,0(,R1)             * CHECK FOR PARM (IE NOHEADER)\n          LH     R3,0(,R2)             *\n          LTR    R3,R3                 * LENGTH\n          BZ     $HOUSEK               * NOPE, SKIP\n          BCTR   R3,0                  *\n          CLC    2(*-*,R2),=C'NOHEADER' * IS IT NO HEADER\n          EX     R3,*-6                *\n          BNE    $HOUSEK               *\n          MVI    FLG,X'FF'             * SET FLAG FO NOHEADER\n#LINES    EQU    6                     * NUMBER OF LINES\n#PGNUM    EQU    7                     * PAGENUMBER REG\n#BAL      EQU    8                     * REG TO BRANCH ON\n          SPACE\n$HOUSEK   XR    #PGNUM,#PGNUM          * INIT PAGE NUMBER (R7)\n          XR    #LINES,#LINES          * INIT LINE COUNTER\n          MVC   PAGE(4),=C'PAGE'       * PUT PAGE IN ITS PLACE\n          PRINT  NOGEN\n$OPEN     OPEN  (SMPELIST,,SYSOUT,OUTPUT)\n          PRINT  GEN\n          CLI    FLG,X'FF'             * IS NO HEADER FLAG ON ?\n          BE     $GET1                 * YEP,SKIP IT\n          GET    SMPELIST,RECORD       * READ 1ST RECORD\n          MVC    DATETIME(25),RECORD+1 * GET DATE AND TIME FORM REC\n          GET    SMPELIST,RECORD       * READ RECORD\n          GET    SMPELIST,RECORD       * READ RECORD\n          MVC    ZONENAME(8),RECORD+1  * GET ZONE NAME\n$BODY     BAL    #BAL,$HEADERS         * PUT THE HEADER OUT\n$GET1     GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n*                                      * IS IT A FUNCTION RECORD ?\n          CLC    RECORD+29(8),=C'FUNCTION'\n          BNE    $GET1\n          MVC    FUNCTION(8),RECORD+1  * SAVE FUNCTION NAME\n          GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n*                                      * IS IT THE STATUS RECORD ?\n          CLC    RECORD+11(6),=C'STATUS'\n          BNE    $GET1                 * NOPE, DON'T WANT RECORD\n          MVC    STATUS1(3),RECORD+29  * START OF STATUS INFO\n          MVC    STATUS2(3),RECORD+34  * STATUS INFO\n          MVC    STATUS3(3),RECORD+39  * STATUS INFO\n          GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n*                                      * IS IT THE FMID RECORD ?\n          CLC    RECORD+11(4),=C'FMID'\n          BNE    $PUTRECE              * PROBLEM !!!\n          GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n          MVI    JCLIN,C' '            * RESET JCLIN\n*                                      * IS IT A JCLIN FMID ?\n          CLC    RECORD+11(5),=C'JCLIN'\n          BNE    $SKIP1\n          MVI    JCLIN,C'Y'\n          GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n*                                      * IS IT A 'DATE/TIME' RECORD\n$SKIP1    CLC    RECORD+11(9),=C'DATE/TIME'\n          BNE    $PUTRECE              * ERROR IF NOT\n          GET    SMPELIST,RECORD       * GET RECORD\n          BAL    #BAL,$CHECK           * CHECK FOR '1' IN COL 1\n          MVC    DATE(6),RECORD+29     * SAVE DATE INFO\n* GOOD RECORD\n          MVC    OUTREC+0(8),FUNCTION  * PUT FUNCTION\n          MVC    OUTREC+10(3),STATUS1  * 1ST STATUS\n          MVC    OUTREC+15(3),STATUS2  * 2ND STATUS\n          MVC    OUTREC+20(3),STATUS3  * 3RD STATUS\n          MVC    OUTREC+28(6),DATE     * PUT THE DATE\n          LA     #BAL,$PUTREC\n          CLI    FLG,X'FF'             * IS NO HEADER FLAG ON ?\n          BE     $PUTREC               * YEP, SKIP IT\n          C      #LINES,=F'59'         * LINE CHECK\n          BH     $HEADERS\n$PUTREC   PUT    SYSOUT,OUTREC\n          B      $GET1\n          SPACE 4\n$PUTRECE  MVI    RECORD+0,C'*'         * SIGNAL ERROR\n          PUT    SYSOUT,RECORD         * PUT THE RECORD\n          B      $GET1                 * READ ANOTHER\n          SPACE\n$CHECK    CLI    RECORD,C'1'           * IF CC1 = '1'\n          BE     $REREAD               * READ SEVEN MORE\n          BR     #BAL                  * RETURN\n          SPACE\n          PRINT  NOGEN\n$REREAD   GET    SMPELIST,RECORD       * SKIP SEVEN RECORDS\n          GET    SMPELIST,RECORD\n          GET    SMPELIST,RECORD\n          GET    SMPELIST,RECORD\n          GET    SMPELIST,RECORD\n          GET    SMPELIST,RECORD\n          GET    SMPELIST,RECORD\n          PRINT  GEN\n          BR     #BAL\n          SPACE\n$HEADERS  A      #PGNUM,=F'1'           * ADD ONE TO PAGE NUMBER\n          CVD    #PGNUM,DWORD           * CONVERT TO DECIMAL\n          UNPK   PAGENUM(2),DWORD+6(2)  * PUT EDIT CHARS\n          OI     PAGENUM+1,X'F0'        * EDIT IT\n          PUT    SYSOUT,HEADER1         * PUT IT AND THE HEEADERS\n          PUT    SYSOUT,HEADER2         *\n          PUT    SYSOUT,HEADER3         *\n          XR     #LINES,#LINES          * INIT LINE COUNTER\n          A      #LINES,=F'3'           * LINES PRINTED\n          BR     #BAL\n          SPACE\nEOF       CLOSE  (SMPELIST)\n          CLOSE  (SYSOUT)\n$FINISH   SR     R15,R15              *  ZERO RETURN REGISTER\n          L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n          L      R14,12(R13)          * RETURN ADDRESS\n          LM     R0,R12,20(R13)       * REST OF THE REGS\n          BR     R14                  * RETURN\nSAVE      DS    18F\nFLG       DC    X'00'\n          DS    0D\nDWORD     DS    D\nRECORD    DS    CL121\nHEADER1   DC    CL31'   THIS IS A LISTING OF ZONE = '\nZONENAME  DC    CL9' '\n          DC    CL3'ON '\nDATETIME  DC    CL(80-(*-HEADER1))' '\nPAGE      EQU    *-7                   * ENOUGH FOR 'PAGE XX'\nPAGENUM   EQU    *-2                   * ENOUGH FOR 'PAGE XX'\nHEADER2   DC    CL34'__FMID__ ____ STATUS ____   _DATE_'\n*                    HOZ2103   REC  APP  ACC     YY.DDD\n          DC    CL46' _________________ FUNCTION __________________'\nHEADER3   DC    CL80' '\nOUTREC    DC    CL80' '\nFUNCTION  DC    CL8' '\nSTATUS1   DC    CL3' '\nSTATUS2   DC    CL3' '\nSTATUS3   DC    CL3' '\nJCLIN     DC    CL1' '\nDATE      DC    CL6' '\n          PRINT NOGEN\nSMPELIST  DCB DDNAME=SMPELIST,RECFM=FBA,LRECL=121,DSORG=PS,            X\n               MACRF=GM,EODAD=EOF\nSYSOUT    DCB DDNAME=SYSOUT,RECFM=FB,LRECL=80,BLKSIZE=3120,DSORG=PS,   X\n               MACRF=PM\nR0       EQU      0\nR1       EQU      1\nR2       EQU      2\nR3       EQU      3\nR4       EQU      4\nR5       EQU      5\nR6       EQU      6\nR7       EQU      7\nR8       EQU      8\nR9       EQU      9\nR10      EQU     10\nR11      EQU     11\nR12      EQU     12\nR13      EQU     13\nR14      EQU     14\nR15      EQU     15\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMPPRE": {"ttr": 6669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE022"}, "text": "  DATA _NULL_;\n     INFILE SMPELIST;\n     INPUT @1 CC   $1.\n           @2 DATA $120.;\n   * DROP ALL UNNECESSARY RECORDS ;\n     IF SUBSTR(CC,1,1)='1' | SUBSTR(DATA,1,6)='  NAME' |\n        SUBSTR(DATA,1,5)=' NAME' | SUBSTR(DATA,1,4)='NAME' THEN DELETE;\n\n    * NAMES OF YOUR GLOBAL, TARGET, AND DLIB ZONES ... ;\n\n      IF SUBSTR(DATA,1,6)='GLOBAL' |  SUBSTR(DATA,1,6)='MVSTGT' |\n         SUBSTR(DATA,1,6)='MVSDLB'  THEN DELETE;\n      IF SUBSTR(DATA,1,20)='                     ' THEN DELETE;\n      DROP CC;\n      FILE SMPOUT LS=120 NOPRINT NOTITLE;\n           PUT @1 DATA;\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOC": {"ttr": 6671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 176, "newlines": 176, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = SYSLOC                                               *\n*                                                                     *\n*  DESCRIPTIVE NAME = ISSUE LOCATE FOR GDG                            *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = PROCESSES PARM INPUT OF A GDG BASE NAME WITH A          *\n*             SPECIFIED LEVEL '(0)'. THEN OUTPUTS LENGTH OF           *\n*             FULL GDG NAME AND GDGNAME AND VOLSER                    *\n*             (IE  '20GDG.DATASET.G0001V00 MVSRES')                   *\n*                                                                     *\n*  NOTES = USED IN  CONJUNCTION WITH SYSLOG PGM, AND CLIST            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN, LOCATE, CAMLST       *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = SYSLOC   (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = PARM                                            *\n*                                                                     *\n*             OUTPUT = DDNAME  DSN                                    *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\nSYSLOC   CSECT\n         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n         LR    R12,R15                 SAVE PGM BEGIN ADDR\n         USING SYSLOC,R12,R11\n         L     R11,SEC4K               ADDR 2ND 4K\n         LA    R10,SAVE                ADDR NEW SAVE AREA\n         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR\n         B     BEGIN                   JUMP OVER SAVE\nSAVE     DS    18F                     SAVE AREA FOR THIS PGM\nSEC4K    DC    A(SYSLOC+4096)          ADDR OF 2ND 4K\nBEGIN    L      R2,0(,R1)\n         LH     R3,0(,R2)\n         LTR    R3,R3                 IS THERE A PARM ?\n         BZ     BADEND\n         BCTR   R3,0                  IF THERE IS I HOPE IT'S A DSN\n         MVC    DSN(*-*),2(R2)\n         EX     R3,*-6\n         XR     R4,R4\nREISSUE  EQU    *                     -- IF INVALID GDG REISSUE ONCE\n         LOCATE FINDSN\n         LTR    R15,R15\n         BNZ    ERROR\n         OPEN   (OUT,OUTPUT)\n         LA     R3,DSN\n         LR     R2,R3\n$EDSN    A      R3,=F'1'\n         CLI    0(R3),C' '\n         BNE    $EDSN\n         SR     R3,R2                 ** DSN LENGTH\n         CVD    R3,DWORD              ** PUT LENGTH OF DSN IN\n         UNPK   UNPK(2),DWORD+6(2)       FIRST 2 CHARS\n         OI     UNPK+1,X'F0'\n         MVC    ODSN+2(42),DSN\n         MVC    ODSN+45(6),DSNAREA+6     MOVE VOLSER\n         PUT    OUT,ODSN\n         CLOSE  (OUT)\n         B      EXIT\nERROR    C      R15,=F'8'\n         BNE    BADEND\n         A      R4,=F'1'\n         C      R4,=F'1'\n         BH     BADEND\n         LA     R3,DSN\nLOOKEND  A      R3,=F'1'\n         CLI    0(R3),C' '\n         BNE    LOOKEND\n         MVC    0(3,R3),=C'(0)'      SETUP FOR '0' GENERARTION LEVEL\n         B      REISSUE                --> REISSUE\nEXIT     SR     R15,R15                 ZERO RETURN REGISTER\nBADEND   DS     0H                     KEEP RETURN CODE\n         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            RETURN ADDRESS\n         LM     R0,R12,20(R13)         REST OF THE REGS\n         BR     R14                    RETURN\n         EJECT\nFINDSN   CAMLST NAME,DSN,,DSNAREA\nDSN      DC     CL44' '\nDSNAREA  DS     0D\n         DS     265C\nODSN     DC     CL80' '\nUNPK     EQU    ODSN\n         DS     0D\nDWORD    DS    D\n         DS    0H\n         PRINT NOGEN\nOUT    DCB DDNAME=DSN,DSORG=PS,LRECL=80,MACRF=(PM),RECFM=FB\n         PRINT GEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOG": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02=\\x02=\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 573, "newlines": 573, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = SYSLOG                                               *\n*                                                                     *\n*  DESCRIPTIVE NAME =                                                 *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = PROCESS DUMPED SYSLOGS FORM MVS/XA SYSTEM               *\n*                                                                     *\n*                                                                     *\n*  NOTES =                                                            *\n*                                                                     *\n* REG USAGE:                                                          *\n*                                                                     *\n*     R1 ...... PARM ADDR                                             *\n*     R2 ...... PARM AREA ADDR                                        *\n*     R3 ...... PARM LENGTH                                           *\n*     R4 ......                                                       *\n*     R5 ......                                                       *\n*     R6 ...... RECORDS WRITTEN                                       *\n*     R7 ...... RECORDS READ                                          *\n*     R8 ...... BAL REG FOR NUMBER RECS PROCESSED                     *\n*     R9 ......                                                       *\n*     R10......                                                       *\n*     R11...... BASE REG2                                             *\n*     R12...... BASE REG1                                             *\n*     R13......                                                       *\n*     R14......                                                       *\n*     R15......                                                       *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS =          (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT =                                                 *\n*                                                                     *\n*             OUTPUT =                                                *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n TITLE '>>>     SYSLOG SEARCH PROGRAM      <<<'\n SPACE 2\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n* FUNCTION:    THIS PROGRAM SEARCHES THE SYSTEM LOG FOR MVS/XA        *\n*              THAT HAS BEEN DUMPED TO A DISK DATASET                 *\n*                                                                     *\n* COMMANDS: NOHASP          - LIST EVERYTHING BUT $HASP AND ARC____   *\n*                             (HSM MESSAGES)                          *\n*           S /CMD/         - SEARCH FOR 1ST OCCUR. OF 'CMD'.AND AFTER*\n*           S ALL /CMD/     - SEARCH FOR ALL OCCUR. OF 'CMD'          *\n*           S D/86000/      - SEARCH FOR BEGINNING DATE 86000         *\n*           S T/06:00/      - SEARCH FOR BEGINNING TIME 06:00         *\n*           S J/NAME0001/   - SEARCH FOR ALL OCCUR. OF JOB NAME       *\n*           S J/NUM1/       - SEARCH FOR ALL OCCUR. OF JOB NUM        *\n*           S M/MESSAGES/   - SEARCH FOR ALL OCCUR. OF MESSAGE        *\n*           S JOB/NAME/     - GET START, END, PURGE FOR JOBS STARTING *\n*                             WITH WHAT EVER                          *\n*           S JOB/NAME/,PURGE GET START, END, PURGE FOR JOBS STARTING *\n*                             EXCEPT PURGE RECORDS                    *\n*                                                                     *\n* REG USAGE:                                                          *\n*                                                                     *\n*     R1 ...... PARM ADDR                                             *\n*     R2 ...... PARM AREA ADDR                                        *\n*     R3 ...... PARM LENGTH                                           *\n*     R4 ......                                                       *\n*     R5 ......                                                       *\n*     R6 ...... RECORDS WRITTEN                                       *\n*     R7 ...... RECORDS READ                                          *\n*     R8 ...... BAL REG FOR NUMBER RECS PROCESSED                     *\n*     R9 ......                                                       *\n*     R10......                                                       *\n*     R11...... BASE REG2                                             *\n*     R12...... BASE REG1                                             *\n*     R13......                                                       *\n*     R14......                                                       *\n*     R15......                                                       *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n* RECORD LAYOUTS:                                                     *\n*                                                                     *\n* 2 ..... C-CONSOLE, I-INTERNAL, BLANK                                *\n*                                                                     *\n* 8-11 .. SYSID                                                       *\n*                                                                     *\n* 17-21 . JULIAN TIME                                                 *\n*                                                                     *\n* 23-33 . MILITARY TIME:  HH:MM:SS.HH                                 *\n*                                                                     *\n* 35-37 . JOB, STC, OR TSU                                            *\n*                                                                     *\n* 39-42 . JOB, STC, OR TSU NUMBER                                     *\n*                                                                     *\n* 54-61 . MVS/JES2 MESSAGE                                            *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT\nSYSLOG   CSECT\n         STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n         LR    R12,R15                 SAVE PGM BEGIN ADDR\n         USING SYSLOG,R12,R11\n         L     R11,SEC4K               ADDR 2ND 4K\n         LA    R10,SAVE                ADDR NEW SAVE AREA\n         ST    R10,8(R13)              NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 R13 CONTAINS NEW SAVE ADDR\n         B     BEGIN                   JUMP OVER SAVE\nSAVE     DS    18F                     SAVE AREA FOR THIS PGM\nSEC4K    DC    A(SYSLOG+4096)          ADDR OF 2ND 4K\n         EJECT\nBEGIN    XR    R8,R8\n         XR    R7,R7\n         L     R2,0(,R1)\n         LH    R3,0(,R2)\n         LTR   R3,R3\n         BZ    OPEN\n         BCTR  R3,0\n         MVC   PARM(*-*),2(R2)\n         EX    R3,*-6\n         SPACE\nOPEN     DS    0H                     * READ JFCB TO MAP 'DSNAME'\n         GETTIME\n         MVC   DATETM(16),DATE        * PUT DATE AND TIME ON LISTING\n         RDJFCB IN\n         LTR   R15,R15\n         BNZ   $ERROR\n         OPEN  (IN,,OUT,OUTPUT)       * OPEN FILES\n         OPEN  (SYSPRINT,OUTPUT)\n         EJECT\nSTRTLOOP GET   IN,REC                 * BYPASS HEADERS\n         CLI   REC,C'1'\n         BE    PREVLOG\n         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE\n         BE    ALLJOB\n         CLC   REC+34(6),=C'SYSLOG'   * LOOKING FOR SYSLOG INIT CMD\n         BNE   STRTLOOP               * CONTINUE TO END\n         B     HEADER1\nPREVLOG  GET   IN,REC                 * SKIP 9 RECORDS\n         GET   IN,REC\n         GET   IN,REC\n         GET   IN,REC\n         GET   IN,REC\n         GET   IN,REC\n         GET   IN,REC\n         GET   IN,REC\nHEADER1  DS    0H\n         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE\n         BE    ALLJOB\n         MVC   REC(133),BLANKS        * INIT RECORD FIELD\n         MVC   REC+57(13),=C'P A R M S =  '\n         MVC   REC+70(*-*),2(R2)\n         EX    R3,*-6\n         MVC   ODSN(44),JFCBDSNM      * FROM JFCB\n         CLI   JFCBIND1,JFCGDG        * IS DATASET A GDG ???\n         BNE   NOJFGDG\n         MVC   ODSN+25(3),=C'GDG'\nNOJFGDG  MVC   OVOL(6),JFCBVOLS       * VOLSER OF DISK\n         MVI   FLAG,C'1'\n         PUT   OUT,HDR1\n         PUT   OUT,BLANKS\n         PUT   OUT,REC\n         PUT   OUT,BLANKS\n         LTR   R3,R3\n         BZ    NOPARM\n         EJECT\n         CLI   PARM,C'S'\n         BNE   $HASP\n         CLI   PARM+2,C'/'        - A SEACH FOR STRING\n         BE    STRING\n         CLC   PARM+2(3),=C'ALL'  - A SEARCH FOR ALL STRING\n         BE    STRALL\n         CLI   PARM+2,C'D'        - A DATE START SEARCH\n         BE    $DATE\n         CLI   PARM+2,C'T'        - A TIME START SEARCH\n         BE    TIME\n         CLC   PARM+2(3),=C'JOB'  - A JOB NAME START,END,PURGE\n         BE    ALLJOB\n         CLI   PARM+2,C'J'        - A JOB NAME/NUMBER SEARCH\n         BE    JOB\n*        CLI   PARM+2,C'M'        - A MESSAGE SEARCH\n*        BE    MESSAGE\n         B     EOF\n         EJECT\nSTRING   DS    0H                 - STRING SEARCH 'S /STRING/' 1ST\n         LA    R2,PARM+2\n         LA    R3,1(R2)           * SAVE START OF STRING\nSTRL1    A     R2,=F'1'           * SEARCH FOR END OF STRING\n         CLI   0(R2),C'/'         *\n         BNE   STRL1              * END OF SEARCH STRING\n         SR    R2,R3              * LENGTH OF STRING=R2\n         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'\n         LA    R4,98              * 133-35=98 THE REST OF THE RECORD\n         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)\n         LR    R5,R4              * SAVE (133-35)-LENGTH(SEARCH AUG)\nSTRLSE   LR    R4,R5              * 133-35=98 THE REST OF THE RECORD\n         GET   IN,REC             *\n         BAL   R8,$READCNT\n         LA    R3,REC+33          * PAST HEADER, DATE AND TIME\nSTRL2    A     R3,=F'1'\n         CLC   PARM+3(*-*),0(R3)  * COMPARE PARM WITH RECORD\n         EX    R2,*-6             *\n         BE    $FOUND             *\n         BCT   R4,STRL2           * PARSE THROUGH\n         B     STRLSE             *\n*                                 *\nSTRALL   DS    0H                 - STRING SEARCH 'S ALL /STRING/'\n         LA    R2,PARM+6\n         LA    R3,1(R2)           * SAVE START OF STRING\nSTRAL1   A     R2,=F'1'           * SEARCH FOR END OF STRING\n         CLI   0(R2),C'/'         *\n         BNE   STRAL1             * END OF SEARCH STRING\n         SR    R2,R3              * LENGTH OF STRING=R2\n         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'\n         LA    R4,98              * 133-35=98 THE REST OF THE RECORD\n         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)\n         LR    R5,R4              * SAVE LENGTH\nSTRALSE  LR    R4,R5              * 133-35=98 THE REST OF THE RECORD\n         GET   IN,REC             *\n         BAL   R8,$READCNT\n         LA    R3,REC+33          * PAST HEADER, DATE AND TIME\nSTRAL2   A     R3,=F'1'\n         CLC   PARM+7(*-*),0(R3)  * COMPARE PARM WITH RECORD\n         EX    R2,*-6             *\n         BE    $STRALL            *\n         BCT   R4,STRAL2          * PARSE THROUGH\n         B     STRALSE            *\n$STRALL  PUT   OUT,REC\n         B     STRALSE            *\n         EJECT\n$DATE    DS    0H                 - DATE SEARCH 'S D/86000/' 1ST\nGETDATE  GET   IN,REC\n         BAL   R8,$READCNT\n         CLC   PARM+4(5),REC+16   * COMPARE DATE WITH RECORD\n         BE    $FOUND             *\n         B     GETDATE            *\n*\nTIME     DS    0H                 - TIME SEARCH 'S T/00:00/ 1ST\nGETTIME  GET   IN,REC\n         BAL   R8,$READCNT\n         CLC   PARM+4(5),REC+22   * COMPARE DATE WITH RECORD\n         BE    $FOUND             *\n         B     GETTIME            *\n*                                 *\n         EJECT\nALLJOB   DS    0H\n         XR    R7,R7              * RECORDS READ\n         XR    R6,R6              * RECORDS WRITTEN\n         LA    R2,PARM+6          * START OF JOB/PREFIX NAME\n         LR    R3,R2              * SAVE START\n         S     R2,=F'1'           * ..BACKWARDS\nALLJOBL  A     R2,=F'1'           * ..FORWARDS\n         CLI   0(R2),C'/'         * ARE WE @ END\n         BNE   ALLJOBL            * NOPE, LOOP\n         CLC   2(7,R2),=C'NOPURGE'\n         BNE   $CONT1\n         MVI   NOPURGE,X'FF'\n$CONT1   SR    R2,R3              * GET LENGTH OF JOB/PREFIX NAME\n         BCTR  R2,0               * FOR <<EXEC>>\n         MVC   JOB#(*-*),PARM+6   * MOVE JOBNAME\n         EX    R2,*-6\nGALLJOB  GET   IN,REC\n         BAL   R8,$READCNT        * RECORD COUNTER\n         CLC   JOB#(*-*),REC+62   * CORRECT JOB OR PREFIX\n         EX    R2,*-6\n         BE    $JSTRT\n         CLC   JOB#(*-*),REC+61   * CORRECT JOB OR PREFIX\n         EX    R2,*-6\n         BNE   GALLJOB\n         CLC   REC+53(7),=C'IEF452I'\n         BE    $JCLMSG\n         CLC   REC+53(7),=C'IEF453I'\n         BE    $JCLMSG\n         B     GALLJOB\n$JSTRT   CLC   REC+53(8),=C'$HASP373'   JOB START\n         BNE   $JEND\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG\n         B     $JOKAY\n$JEND    CLC   REC+53(8),=C'$HASP395'   JOB END\n         BNE   $JPURGE\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG\n         B     $JOKAY\n$JPURGE  CLC   REC+53(8),=C'$HASP250'   JOB PURGE\n         BNE   $JCLERR\n         CLI   NOPURGE,X'FF'      * IF NO JOB PURGE\n         BE    $JCLERR\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(26),#MESG\n         B     $JOKAY\n$JCLERR  CLC   REC+53(8),=C'$HASP396'   ABNORMAL TERMINATION\n         BNE   GALLJOB\n         B     $JCLMSG1\n$JCLMSG  DS    0H\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(7),#MESG\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9+9(8),#MESG+8\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+17+9(11),#MESG+29\n         B     $JOKAY\n$JCLMSG1 DS    0H\n         MVC   OREC+L'JULPARM3+L'#TIME+L'#JNUM+3+9(35),#MESG\n         B     $JOKAY\n         SPACE 2\n* PUT RECORD TO OUTPUT DATASET\n         SPACE\n$JOKAY   DS    0H                      * OUTPUT ONLY PERTAINENT INFO\n         CLC   OLDJUL(5),#JULDATE      * DATE CHANGE ?\n         BE    $NONEWDT                * NOPE, CONTINUE\n         PACK  JULPARM1(4),#JULDATE(5) * YEP, PACK IT\n         LA    R1,3                    * THIS IS A JULIAN DATE\n         ST    R1,JULPARM2             * ... SAVE IT\n         LA    R1,8+128                * WE WANT 'DDJANYY' AND WEEKDAY\n         ST    R1,JULPARM4             * ... SAVE THAT\n         LA    R1,JULPTRS              * LOAD ADDR OF PARM LIST\n         L     R15,=V(JULSUB)          * GET READY ...\n         BALR  R14,R15                 * DO IT\n         MVC   OLDJUL(5),#JULDATE      * AND REPLACE OLD ON TOO\n$NONEWDT DS    0H\n         MVC   OREC(L'#JULDATE),#JULDATE\n         MVC   OREC+6(L'JULPARM3),JULPARM3\n         MVC   OREC+L'JULPARM3+6(3),WEEKDAY\n         MVC   OREC+L'JULPARM3+4+6(L'#TIME),#TIME\n         MVC   OREC+L'JULPARM3+L'#TIME+4+1+6(L'#JNUM),#JNUM\n         PUT   OUT,OREC           *\n         MVC   OREC,BLANKS\n         BAL   R8,$WRITCNT        * RECORD COUNTER, WRITES\n         B     GALLJOB\n         EJECT\nJOB      DS    0H                 - JOB SEARCH 'S J/NUM OR NAME/'\n         CLI   PARM+4,X'F0'       * IF LOWER THAN 0 THEN CHAR\n         BL    $CHAR\n         LA    R2,PARM+3          * START OF JOB NUMBER /1234/-LONGEST\n         LA    R3,1(R2)           * SAVE START+1\nJOBL1    A     R2,=F'1'\n         CLI   0(R2),C'/'\n         BNE   JOBL1\n         SR    R2,R3\n         CH    R2,=H'1'           * JOB NUMBER LENGTH = 1\n         BE    $JOB1\n         CH    R2,=H'2'           * JOB NUMBER LENGTH = 2\n         BE    $JOB2\n         CH    R2,=H'3'           * JOB NUMBER LENGTH = 3\n         BE    $JOB3\n         MVC   #JOB(4),PARM+4     * JOB NUM LEN=4\n         B     JOBL2\n#JOB     DC    CL4' '\n$JOB1    MVC   #JOB+3(1),PARM+4\n         B     JOBL2\n$JOB2    MVC   #JOB+2(1),PARM+4\n         B     JOBL2\n$JOB3    MVC   #JOB+1(1),PARM+4\nJOBL2    GET   IN,REC             *\n         BAL   R8,$READCNT        * RECORD COUNTER\n         CLC   REC+34(3),=C'JOB'  * COMPARE PARM WITH RECORD\n         BNE   JOBL2              *\n         CLC   REC+38(4),#JOB     * COMPARE JOBNUMS\n         BNE   JOBL2              *\n         PUT   OUT,REC            *\n         B     JOBL2              *\n*                                 *                    R\n*                                 *                    3\n$CHAR    DS    0H                 - STRING SEARCH 'S J/NAMEQTRS/'\n         LA    R2,PARM+3\n         LA    R3,1(R2)           * SAVE START OF JOBNAME\nCHL1     A     R2,=F'1'           * SEARCH FOR END OF JOBNAME\n         CLI   0(R2),C'/'         *\n         BNE   CHL1               * END OF SEARCH JOBNAME\n         SR    R2,R3              * LENGTH OF STRING=R2\n         S     R2,=F'1'           * FOR AND EXCUTED COMPARE: BEFORE '/'\n         LA    R4,80              * 133-53=80 THE REST OF THE RECORD\n         DS    0H\n         SR    R4,R2              * (133-35)-LENGTH(SEARCH AUG)\n         LR    R5,R4              * SAVE LENGTH\nCHL2     LR    R4,R5              * 133-35=98 THE REST OF THE RECORD\n         GET   IN,REC             *\n         BAL   R8,$READCNT\n         LA    R3,REC+52\nCHL3     A     R3,=F'1'\n         CLC   PARM+4(*-*),0(R3)  * COMPARE PARM WITH RECORD\n         EX    R2,*-6             *\n         BE    $CHARL             *\n         BCT   R4,CHL3            * PARSE THROUGH\n         B     CHL2               *\n$CHARL   PUT   OUT,REC\n         B     CHL2               *\n*                                 *\n$HASP    CLC   PARM(6),=C'NOHASP'\n         BNE   EOF                *\n$HASPGET GET   IN,REC\n         BAL   R8,$READCNT\n         CLI   REC+53,C'$'           * SKIP ALL $HASP COMMANDS\n         BE    $HASPGET\n         CLI   REC+53,C'='           * SKIP ALL '=' AFTER $HASP COMMDS\n         BE    $HASPGET\n         CLC   REC+53(3),=C'ARC'     * SKIP ALL ARC_____  MESSAGES\n         BE    $HASPGET                ISSUED BY HSM\n         PUT   OUT,REC\n         B     $HASPGET\n$FOUND   CVD   R7,DWORD\n         ED    FFIELD(8),DWORD+4  * EDIT OUTPUT\n         PUT   OUT,BLANKS\n         PUT   OUT,FREC\n         PUT   OUT,BLANKS\n         PUT   OUT,BLANKS\n$FOUNDL  PUT   OUT,REC\nNOPARM   GET   IN,REC\n         BAL   R8,$READCNT\n         B     $FOUNDL\n$READCNT A     R7,=F'1'           * RECORD INPUT RECORDS SEARCHED\n         BR    R8\n$WRITCNT A     R6,=F'1'           * RECORD INPUT RECORDS SEARCHED\n         BR    R8\nEOF      CLOSE  (IN)\n         CLI   JOB#,C' '\n         BNE   $CLOSE             * IS THERE A JOBALL PRESENT, YEP ..\n         CVD   R7,DWORD           * NOPE, CONVERT COUNTER TO DECIMAL\n         ED    EFIELD(8),DWORD+4  * EDIT OUTPUT\n         PUT   OUT,BLANKS\n         PUT   OUT,BLANKS\n         PUT   OUT,LASTREC\n         PUT   OUT,BLANKS\n         PUT   OUT,LASTHDR\n$CLOSE   CLOSE  (OUT)\n         TESTOPEN SYSPRINT\n         LTR    R15,R15\n         BNZ    EXIT\n         CVD    R7,DWORD           * CONVERT COUNTER TO DECIMAL, READ\n         ED     RREAD(10),DWORD+3  * EDIT OUTPUT\n         CVD    R6,DWORD           * CONVERT COUNTER TO DECIMAL, WRIT.\n         ED     RWRIT(10),DWORD+3  * EDIT OUTPUT\n         PUT    SYSPRINT,OSYSPRNT\n         CLOSE  (SYSPRINT)\n         B      EXIT\n$ERROR   WTO    'NO SYSLOG DDNAME '\n         LA     R15,8\n         B      EXIT+2\nEXIT     SR     R15,R15                 ZERO RETURN REGISTER\n         L      R13,SAVE+4             RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            RETURN ADDRESS\n         LM     R0,R12,20(R13)         REST OF THE REGS\n         BR     R14                    RETURN\n         EJECT\n  TITLE  '      DATA   SECTION'\nPARM     DC     CL30' '\nHDR1     CENTER 'S Y S L O G     S E A R C H    P R O G R A M'\nDATETM   EQU    *-19\nFLAG     EQU    HDR1+0\nBLANKS   DC     CL133' '\nJOB#     DC     CL8' '\nREC      DS     CL133\n         ORG    REC+1\n#CMD     DS     C                       * COMMAND AREAS\n         DS     CL5\n#SYSID   DS     CL4                     * SYSTEM ID\n         DS     CL5\n#JULDATE DS     CL5                     * DATE, JULIAN\n         DS     CL1\n#TIME    DS     CL11                    * TIME, MILITARY, HH:MM:SS.DD\n         DS     CL1\n#JST     DS     CL3                     * JOB, STC, OR TSU\n         DS     CL1\n#JNUM    DS     CL4                     * JOB, STC, OR TSU NUMBER\n         DS     CL11\n#MESG    DS     CL45                    * MESSAGE AREA\n         ORG    ,\nOREC     DS     CL133\n         DS    0D\nJULPTRS  DC    A(JULPARM1)\n         DC    A(JULPARM2)\n         DC    A(JULPARM3)\n         DC    A(JULPARM4)\n         DC    A(JULPARM5)\nJULPARM1 DS    F                  * INPUT DATE: 'YYYYDDDF' PACKED\nJULPARM2 DS    F                  * INPUT CODE: JULIAN PL4\nJULPARM4 DS    F                  * OUTPUT CODE: 'YYMMMDD'\nJULPARM3 DS    CL8                * OUTPUT FIELD\nWEEKDAY  DS    CL12               * WEEKDAY CL12\nJULPARM5 DS    32D                * 256 BYE WORK AREA\nOLDJUL   DC    CL5' '\n         DS     0D\nDWORD    DS     D\nLASTREC  DC     CL45' '\n         DC     CL38'R E C O R D S     P R O C E S S E D = '\nEFIELD   DC     X'4020202020202021'\n         DC     CL(133-(*-LASTREC))' '\nFREC     DC     CL45' '\n         DC     CL36'R E C O R D S     B Y P A S S E D = '\nFFIELD   DC     X'4020202020202021'\n         DC     CL(133-(*-FREC))' '\nLASTHDR  DC     CL45' '\n         DC     C'DSNAME='\nODSN     DC     CL44' '\n         DC     CL4'VOL='\nOVOL     DC     CL(133-(*-LASTHDR))' '\nOSYSPRNT DC     CL133' '\n         ORG    OSYSPRNT\n         DC     C'==> RECORDS READ = '\nRREAD    DC     X'40202020202020202021'\n         DC     C' ==>  RECORDS WRITTEN = '\nRWRIT    DC     X'40202020202020202021'\n         ORG    ,\nNOPURGE  DC    X'00'\n         PRINT NOGEN\nIN     DCB DDNAME=SYSLOG,DSORG=PS,LRECL=133,BLKSIZE=23408,MACRF=(GM),  X\n               RECFM=FB,EODAD=EOF,EXLST=EXL\nOUT    DCB DDNAME=SORTIN,DSORG=PS,LRECL=133,BLKSIZE=23408,MACRF=PM,    X\n               RECFM=FB\nSYSPRINT DCB DDNAME=SYSPRINT,DSORG=PS,RECFM=FB,MACRF=PM,               X\n               LRECL=133,BLKSIZE=23408\n         DS    0F\nEXL      DC    X'87',AL3($JFCB)\n$JFCB    DS    0H\n         IEFJFCBN LIST=NO\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOG$": {"ttr": 7172, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xae\\x00\\xae\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 174, "newlines": 174, "modlines": 0, "user": "FILE022"}, "text": "PROC 0 A(0) X( ) P( ) OFLAG( ) +\n     DS('TS.SYSLOG.DATA') +  /* DISK BASE GDG */\n     VOL(MVSDLB) +\n     GDG(0) NHASP CMD( ) CMDA( ) +\n     SDATE( ) STIME( ) SNUM( ) SNAME( ) SMSG( ) +\n     OTHER( ) L K DEST(LOCAL)\nCONTROL NOMSG NOLIST NOFLUSH\nSET &ID=&SYSUID\nFREE DD(SORTIN,SORTOUT,SORTWK01,SYSOUT)\nFREE ATTRLIST(SYSLOG)\nIF &SYSDSN('&ID..SORTIN')=OK THEN DELETE '&ID..SORTIN'\nIF &SYSDSN('&ID..SORTOUT')=OK THEN DELETE '&ID..SORTOUT'\nCONTROL MAIN MSG\n\nATTR SYSLOG LRECL(133) BLKSIZE(23408) RECFM(F B) DSORG(PS)\n\nIF &SYSISPF=ACTIVE THEN +\nISPEXEC VGET (GDG,NHASP,CMD,CMDA,SDATE,STIME,SNUM,SNAME,SMSG,OTHER,+\nL,K,DEST,P,JOB) SHARED\nIF &DEST=  THEN SET &DEST=LOCAL\n/*   CONVERSION  SECTION   */\nIF &L=Y OR &L=L THEN DO\n   FREE DD(SYSIN,W)\n   ATTR W  LRECL(125) BLKSIZE(629) RECFM(V B A) DSORG(PS)\n   ALLOC DD(SYSPRINT) SP(1,1) CYL NEW USING(W) DELETE\n   OPENFILE SYSIN OUTPUT\n   SET SYSIN=&STR( LISTCAT LVL('&DS') ALL)\n   PUTFILE SYSIN\n   CLOSFILE SYSIN\n   CALL 'SYS1.LINKLIB(IDCAMS)'\n   ISPEXEC  LMINIT  DATAID(ID1) DDNAME(SYSPRINT)\n   ISPEXEC  BROWSE  DATAID(&ID1)\n   IF &P=Y  THEN  DO\n      ISPEXEC LMPRINT DATAID(&ID1) FORMAT(NO)\n      SET &ZEDSMSG = &STR(LISTED)\n      SET &ZEDLMSG = &STR(PRINT SENT TO ISPF/LIST FILE)\n      ISPEXEC SETMSG MSG(ISRZ001)\n     END\n   ISPEXEC  LMFREE  DATAID(&ID1)\n   FREE DD(SYSPRINT,SYSIN)\n   ALLOC DD(SYSPRINT) DS(*)\n   ALLOC DD(SYSIN) DS(*)\n   ALLOC DD(VTOCOUT)  NEW DELETE\n   /* USE OF VTOC COMMAND PROCESSOR FROM CBT TAPE */\n   VTOC &VOL LEVEL(&DS) PRINT(NEW +\n        (DSNAME VOL LRECL BLKSZ RFM DSO EX ALLOC PCT CDATE REFDT))\n   ISPEXEC  LMINIT  DATAID(ID1) DDNAME(VTOCOUT)\n   ISPEXEC  BROWSE  DATAID(&ID1)\n   IF &P=Y  THEN  DO\n      ISPEXEC LMPRINT DATAID(&ID1) FORMAT(NO)\n      SET &ZEDSMSG = &STR(LISTED)\n      SET &ZEDLMSG = &STR(PRINT SENT TO ISPF/LIST FILE)\n      ISPEXEC SETMSG MSG(ISRZ001)\n     END\n   ISPEXEC  LMFREE  DATAID(&ID1)\n   ALLOC DD(SYSPRINT) DS(*)\n   FREE DD(VTOCOUT)\n   EXIT\n  END\n\n\nFREE DD(DSN,W)\nATTR W)   DSORG(PS) LRECL(80) BLKSIZE(3120) RECFM(F B)\nALLOC DD(DSN) NEW DELETE USING(W)\nCALL 'LINKLIB(SYSLOC)' '&DS(-&GDG)'\nIF &LASTCC\u00ac=0 THEN DO\n   WRITE DATASET '&DS(-&GDG)' NOT FOUND\n   WRITE\n   WRITE CLIST WILL ALLOCATE THE (0) GENERATION\n   CALL 'LINKLIB(SYSLOC)' '&DS(0)'\n   IF &LASTCC\u00ac=0 THEN GOTO BADEND\n  END\nOPENFILE DSN INPUT\nGETFILE DSN\nCLOSFILE DSN\nSET &L=&SUBSTR(1:2,&DSN)\nSET &L=&L+2\nALLOC DD(SYSLOG) DS('&SUBSTR(3:&L,&DSN)') SHR\nIF &LASTCC\u00ac=0 THEN GOTO BADEND\n\nALLOC DD(SORTIN) DS('&ID..SORTIN') NEW DELETE SPACE(7,1) CYL +\n      USING(SYSLOG) UNIT(DISK)\n\n/*=========>  CHECK PARMS  <==========*/\nIF &NHASP = Y OR &NHASP=NOHASP THEN SET &X=&STR(NOHASP)\nIF &CMD  \u00ac=   THEN SET &PARM=&STR(S /&CMD/)\nIF &CMDA \u00ac=   THEN SET &PARM=&STR(S ALL /&CMDA/)\nIF &SDATE\u00ac=   THEN SET &PARM=&STR(S D/&SDATE/)\nIF &STIME\u00ac=   THEN SET &PARM=&STR(S T/&STIME/)\nIF &SNUM \u00ac=   THEN SET &PARM=&STR(S J/&SNUM/)\nIF &SNAME\u00ac=   THEN SET &PARM=&STR(S J/&SNAME/)\nIF &SMSG \u00ac=   THEN SET &PARM=&STR(S M/&SMSG/)\nIF &JOB  \u00ac=   THEN DO\n   ALLOC DD(SORTOUT) DS('&ID..SORTOUT') NEW DELETE +\n         SPACE(4,1) CYL USING(SYSLOG) UNIT(DISK)\n   ALLOC DD(SORTWK01)  UNIT(SYSDA) SPACE(1,1) CYL NEW DELETE\n   FREE DD(SYSIN)\n   OPENFILE SYSIN OUTPUT\n   SET SYSIN=&STR( SORT FIELDS=(39,4,CH,A,17,17,CH,A))\n   PUTFILE SYSIN\n   CLOSFILE SYSIN\n   CALL 'LINKLIB(SYSLOG)' 'S JOB/&JOB/'\n   ALLOC DD(SYSOUT) DUMMY\n   CALL 'SYS1.LPALIB(ICEMAN)'\n   FREE DD(SYSOUT,SORTIN,SORTWK01,SYSIN,DSN)\n   ISPEXEC  LMINIT  DATAID(ID1) DDNAME(SORTOUT)\n   IF &LASTCC>0 THEN DO\n      WRITE UNABLE TO BROWSE DATA\n      FREE DD(SORTOUT,SYSLOG)\n      EXIT\n     END\n   ISPEXEC  BROWSE  DATAID(&ID1)\n   WRITENR TO PRINT TO &DEST PRINTER (Y):&STR( )\n   READ &A\n   IF &A=Y THEN DO\n      /* ISPEXEC LMPRINT DATAID(&ID1) FORMAT(NO) */\n      PRINTOFF '&ID..SORTOUT'  DEST(&DEST)\n      SET &ZEDSMSG = &STR(PRINTED)\n      SET &ZEDLMSG = &STR(PRINT SENT TO &DEST)\n      ISPEXEC SETMSG MSG(ISRZ001)\n     END\n   ISPEXEC  LMFREE  DATAID(&ID1)\n   IF &K=Y THEN DO\n      IF &SYSDSN('&ID..SYSLOG.FILE')=OK THEN DELETE '&ID..SYSLOG.FILE'\n      ALLOC DD(KEEP) DS('&ID..SYSLOG.FILE') NEW SP(1,2) CYL CATALOG +\n               USING(SYSLOG) UNIT(DISK)\n      COPYSDS SORTIN KEEP FILE\n      SET &ZEDSMSG = &STR(FILE KEPT)\n      SET &ZEDLMSG = &STR(FILE KEPT ON '&ID..SYSLOG.FILE')\n      ISPEXEC SETMSG MSG(ISRZ001)\n  END\n   FREE DD(SORTOUT,SYSLOG,SYSIN,SYSPRINT)\n   ALLOC DD(SYSPRINT) DS(*)\n   ALLOC DD(SYSIN) DS(*)\n   EXIT\n  END\n\nIF &X=  THEN  CALL 'LINKLIB(SYSLOG)' '&PARM'\n        ELSE  CALL 'HEDGESM.LINKLIB(SYSLOG)' 'NOHASP'\n\nISPEXEC  LMINIT  DATAID(ID1) DDNAME(SORTIN)\nIF &LASTCC>0 THEN DO\n   WRITE UNABLE TO BROWSE DATA\n   GOTO FREEDDS\n   EXIT\n  END\nIF &P=Y  THEN  DO\n   PRINTOFF '&ID..SORTIN' DEST(&DEST)\n   /*ISPEXEC LMPRINT DATAID(&ID1) FORMAT(NO)*/\n   SET &ZEDSMSG = &STR(PRINTED)\n   SET &ZEDLMSG = &STR(PRINT SENT TO &DEST)\n   ISPEXEC SETMSG MSG(ISRZ001)\n   GOTO LMFRE\n  END\nISPEXEC  BROWSE  DATAID(&ID1)\n\nLMFRE: ISPEXEC  LMFREE  DATAID(&ID1)\n\nIF &K=Y THEN DO\n   IF &SYSDSN('&ID..SYSLOG.FILE')=OK THEN DELETE '&ID..SYSLOG.FILE'\n      ALLOC DD(KEEP) DS('&ID..SYSLOG.FILE') NEW SP(1,2) CYL CATALOG +\n               USING(SYSLOG) UNIT(DISK)\n   COPYSDS SORTIN KEEP FILE\n   SET &ZEDSMSG = &STR(FILE KEPT)\n   SET &ZEDLMSG = &STR(FILE KEPT ON '&ID..SYSLOG.FILE')\n   ISPEXEC SETMSG MSG(ISRZ001)\n  END\n\nFREEDDS: +\nFREE DD(DSN,SORTIN,SYSIN,SYSPRINT)\nFREE ATTRLIST(SYSLOG)\nALLOC DD(SYSPRINT) DS(*)\nALLOC DD(SYSIN) DS(*)\nBADEND: EXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOG$$": {"ttr": 7176, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xd1\\x00\\xd1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 209, "newlines": 209, "modlines": 0, "user": "FILE022"}, "text": ")ATTR\n % TYPE(TEXT)  INTENS(HIGH)\n + TYPE(TEXT)  INTENS(LOW)\n _ TYPE(INPUT) INTENS(HIGH)\n # TYPE(OUTPUT) INTENS(LOW)\n @ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(ASIS)\n)BODY\n+------------------------%Extended Functions+-----------------------------------\n%COMMAND%>_ZCMD                                                                +\n+\n+     #PRJ1    +\n+     #LIB1    +\n+     #TYP1    + %>_LIBR+\n+TS.SYSMAINT.CNTL%>_SYSM+    SYS1.PROCLIB%>_PROC+\n+TS.SOURCE.CNTL  %>_SRC+     SYS1.PARMLIB%>_PARM +\n+TS.DBAMAINT.CNTL%>_DBAM+    SYS1.LINKLIB%>_LINK+\n+TS.CNTL         %>_CNTL+    SYS1.LPALIB %>_LPA+\n+TS.CMDS         %>_CMDS+    SYS1.NUCLEUS%>_NUC+\n+TS.%???+.INSTALL%>_PROD    +SYS1.MACLIB %>_MAC+\n+IDMS.INSTALL    %>_IDMS+    SYS1.AMODGEN%>_MOD+\n+                            SYS1.HASPSRC%>_HASP+\n+SYS1.PROC       %>_PRC+     SYS1.SAMPLIB%>_SAMP+\n+SYS1.JOBLIB     %>_JOB+     SYS1.GENLIB %>_GEN+\n+SYS1.CARDLIB    %>_CARD+    SYS1.VTAMLST%>_VTAM+\n+-Test Versions? %>_T+       -Vol %>_VOLSER+\n+\n+ Enter one of the following options beside the%DSN+selected:\n+ (%P+PDS,%E+Edit,%B+Browse,%I+info,%F+zap,%L+List mems,%Z+Compress)\n+\n+The%???+in the dataset name is the middle node specification required\n+\n)INIT\n  &OP = ' '\n)REINIT\n  &OP = ' '\n)PROC\n   VER (&LIBR,LIST, ,P,E,B,I,F,L,Z)\n   VER (&SYSM,LIST, ,P,E,B,I,F,L,Z)\n   VER (&SRC,LIST, ,P,E,B,I,F,L,Z)\n   VER (&DBAM,LIST, ,P,E,B,I,F,L,Z)\n   VER (&CNTL,LIST, ,P,E,B,I,F,L,Z)\n   VER (&CMDS,LIST, ,P,E,B,I,F,L,Z)\n   VER (&PRC,LIST, ,P,E,B,I,F,L,Z)\n   VER (&JOB,LIST, ,P,E,B,I,F,L,Z)\n   VER (&CARD,LIST, ,P,E,B,I,F,L,Z)\n   VER (&IDMS,LIST, ,P,E,B,I,F,L,Z)\n   VER (&PROC,LIST, ,P,E,B,I,F,L,Z)\n   VER (&PARM,LIST, ,P,E,B,I,F,L,Z)\n   VER (&LINK,LIST, ,P,E,B,I,F,L,Z)\n   VER (&LPA,LIST, ,P,E,B,I,F,L,Z)\n   VER (&NUC,LIST, ,P,E,B,I,F,L,Z)\n   VER (&MAC,LIST, ,P,E,B,I,F,L,Z)\n   VER (&MOD,LIST, ,P,E,B,I,F,L,Z)\n   VER (&HASP,LIST, ,P,E,B,I,F,L,Z)\n   VER (&SAMP,LIST, ,P,E,B,I,F,L,Z)\n   VER (&GEN,LIST, ,P,E,B,I,F,L,Z)\n   VER (&VTAM,LIST, ,P,E,B,I,F,L,Z)\n   IF (&LIBR = P) &OP=P\n   IF (&LIBR = E) &OP=E\n   IF (&LIBR = B) &OP=B\n   IF (&LIBR = I) &OP=I\n   IF (&LIBR = F) &OP=F\n   IF (&LIBR = L) &OP=L\n   IF (&LIBR = Z) &OP=Z\n   IF (&SYSM = P) &OP=P\n   IF (&SYSM = E) &OP=E\n   IF (&SYSM = B) &OP=B\n   IF (&SYSM = I) &OP=I\n   IF (&SYSM = F) &OP=F\n   IF (&SYSM = L) &OP=L\n   IF (&SYSM = Z) &OP=Z\n   IF (&SRC  = P) &OP=P\n   IF (&SRC  = E) &OP=E\n   IF (&SRC  = B) &OP=B\n   IF (&SRC  = I) &OP=I\n   IF (&SRC  = F) &OP=F\n   IF (&SRC  = L) &OP=L\n   IF (&SRC  = Z) &OP=Z\n   IF (&DBAM = P) &OP=P\n   IF (&DBAM = E) &OP=E\n   IF (&DBAM = B) &OP=B\n   IF (&DBAM = I) &OP=I\n   IF (&DBAM = F) &OP=F\n   IF (&DBAM = L) &OP=L\n   IF (&DBAM = Z) &OP=Z\n   IF (&CNTL = P) &OP=P\n   IF (&CNTL = E) &OP=E\n   IF (&CNTL = B) &OP=B\n   IF (&CNTL = I) &OP=I\n   IF (&CNTL = F) &OP=F\n   IF (&CNTL = L) &OP=L\n   IF (&CNTL = Z) &OP=Z\n   IF (&CMDS = P) &OP=P\n   IF (&CMDS = E) &OP=E\n   IF (&CMDS = B) &OP=B\n   IF (&CMDS = I) &OP=I\n   IF (&CMDS = F) &OP=F\n   IF (&CMDS = Z) &OP=Z\n   IF (&CMDS = L) &OP=L\n   IF (&PRC  = P) &OP=P\n   IF (&PRC  = E) &OP=E\n   IF (&PRC  = B) &OP=B\n   IF (&PRC  = I) &OP=I\n   IF (&PRC  = F) &OP=F\n   IF (&PRC  = L) &OP=L\n   IF (&PRC  = Z) &OP=Z\n   IF (&JOB  = P) &OP=P\n   IF (&JOB  = E) &OP=E\n   IF (&JOB  = B) &OP=B\n   IF (&JOB  = I) &OP=I\n   IF (&JOB  = F) &OP=F\n   IF (&JOB  = L) &OP=L\n   IF (&JOB  = Z) &OP=Z\n   IF (&CARD = P) &OP=P\n   IF (&CARD = E) &OP=E\n   IF (&CARD = B) &OP=B\n   IF (&CARD = I) &OP=I\n   IF (&CARD = F) &OP=F\n   IF (&CARD = L) &OP=L\n   IF (&CARD = Z) &OP=Z\n   IF (&IDMS = P) &OP=P\n   IF (&IDMS = E) &OP=E\n   IF (&IDMS = B) &OP=B\n   IF (&IDMS = I) &OP=I\n   IF (&IDMS = F) &OP=F\n   IF (&IDMS = L) &OP=L\n   IF (&IDMS = Z) &OP=Z\n   IF (&PROC = P) &OP=P\n   IF (&PROC = E) &OP=E\n   IF (&PROC = B) &OP=B\n   IF (&PROC = I) &OP=I\n   IF (&PROC = F) &OP=F\n   IF (&PROC = L) &OP=L\n   IF (&PROC = Z) &OP=Z\n   IF (&PARM = P) &OP=P\n   IF (&PARM = E) &OP=E\n   IF (&PARM = B) &OP=B\n   IF (&PARM = I) &OP=I\n   IF (&PARM = F) &OP=F\n   IF (&PARM = L) &OP=L\n   IF (&PARM = Z) &OP=Z\n   IF (&LINK = P) &OP=P\n   IF (&LINK = E) &OP=E\n   IF (&LINK = B) &OP=B\n   IF (&LINK = I) &OP=I\n   IF (&LINK = F) &OP=F\n   IF (&LINK = L) &OP=L\n   IF (&LINK = Z) &OP=Z\n   IF (&LPA  = P) &OP=P\n   IF (&LPA  = E) &OP=E\n   IF (&LPA  = B) &OP=B\n   IF (&LPA  = I) &OP=I\n   IF (&LPA  = F) &OP=F\n   IF (&LPA  = L) &OP=L\n   IF (&LPA  = Z) &OP=Z\n   IF (&NUC  = P) &OP=P\n   IF (&NUC  = E) &OP=E\n   IF (&NUC  = B) &OP=B\n   IF (&NUC  = I) &OP=I\n   IF (&NUC  = F) &OP=F\n   IF (&NUC  = L) &OP=L\n   IF (&NUC  = Z) &OP=Z\n   IF (&MAC  = P) &OP=P\n   IF (&MAC  = E) &OP=E\n   IF (&MAC  = B) &OP=B\n   IF (&MAC  = I) &OP=I\n   IF (&MAC  = F) &OP=F\n   IF (&MAC  = L) &OP=L\n   IF (&MAC  = Z) &OP=Z\n   IF (&MOD  = P) &OP=P\n   IF (&MOD  = E) &OP=E\n   IF (&MOD  = B) &OP=B\n   IF (&MOD  = I) &OP=I\n   IF (&MOD  = F) &OP=F\n   IF (&MOD  = L) &OP=L\n   IF (&MOD  = Z) &OP=Z\n   IF (&HASP = P) &OP=P\n   IF (&HASP = E) &OP=E\n   IF (&HASP = B) &OP=B\n   IF (&HASP = I) &OP=I\n   IF (&HASP = F) &OP=F\n   IF (&HASP = L) &OP=L\n   IF (&HASP = Z) &OP=Z\n   IF (&SAMP = P) &OP=P\n   IF (&SAMP = E) &OP=E\n   IF (&SAMP = B) &OP=B\n   IF (&SAMP = I) &OP=I\n   IF (&SAMP = F) &OP=F\n   IF (&SAMP = L) &OP=L\n   IF (&SAMP = Z) &OP=Z\n   IF (&GEN  = P) &OP=P\n   IF (&GEN  = E) &OP=E\n   IF (&GEN  = B) &OP=B\n   IF (&GEN  = I) &OP=I\n   IF (&GEN  = F) &OP=F\n   IF (&GEN  = L) &OP=L\n   IF (&GEN  = Z) &OP=Z\n   IF (&VTAM = P) &OP=P\n   IF (&VTAM = E) &OP=E\n   IF (&VTAM = B) &OP=B\n   IF (&VTAM = I) &OP=I\n   IF (&VTAM = F) &OP=F\n   IF (&VTAM = L) &OP=L\n   IF (&VTAM = Z) &OP=Z\n\n   IF (&PROD \u00ac= ' ') &OP=P\n   VPUT (OP) SHARED\n   &ZSEL = 'CMD(%SYSTEM$)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSLOG#": {"ttr": 7180, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE022"}, "text": "//SYSLOG   JOB\n//*-----------------------------------------------------------------*\n//*   DOC: ASSEM, LINK, AND EXEC SYSLOG                             *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=TS.SOURCE.CNTL,DISP=SHR\n//SYSIN     DD  DSN=THIS.LIBRARY(SYSLOG),DISP=SHR\n//*\n//L.SYSLMOD DD  DSN=LINKLIB,DISP=SHR\n//SYSIN     DD  *\n  INCLUDE SYSLMOD(JULSUB)\n  NAME SYSLOG(R)\n/*\n//DOIT    EXEC PGM=SYSLOG,PARM='S JOB/CICS/,NOPURGE',COND=(0,LT)\n//STEPLIB  DD  DSN=*.L.SYSLOMOD,DISP=SHR\n//SYSLOG   DD  DSN=DUMPPED.SYSLOG,DISP=SHR\n//SYSPRINT DD  SYSOUT=(,)\n//SYSUDUMP DD  SYSOUT=(,)\n//SORTIN   DD  SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSLOG##": {"ttr": 7182, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE022"}, "text": "//SYSLOG1#   JOB (000000,BN31),'HEDGESM',\n//            CLASS=Z,MSGCLASS=X,\n//            NOTIFY=HEDGESM\n//*-----------------------------------------------------------------*\n//*   LIB: TS.SOURCE.CNTL(SYSLOG1#)                                 *\n//*   DOC:                                                          *\n//*  NOTE: 02/15/88.11:27:21                                        *\n//*-----------------------------------------------------------------*\n//S1      EXEC PGM=SYSLOG1,PARM='S JOB/AR/,NOPURGE'\n//STEPLIB  DD DSN=HEDGESM.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=(,)\n//SYSLOG   DD DSN=TS.SYSLOG.DATA(-7),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-6),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-5),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-4),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-4),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-3),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-2),DISP=SHR\n//         DD DSN=TS.SYSLOG.DATA(-1),DISP=SHR\n//SORTIN   DD SYSOUT=(,)\n//SYSUDUMP DD SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSTAT": {"ttr": 7184, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\r\\x1d\\r\\x1d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 3357, "newlines": 3357, "modlines": 0, "user": "FILE022"}, "text": "SYSTAT TITLE 'SYSTEM STATUS - DISPLAY MVS/XA CONTROL BLOCK INFORMATION'\n         MACRO\n&NAME    MODE   &AMODE=31\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*                                                                   *\n.*  SET ADDRESSING MODE.  EITHER 'MODE AMODE=31' OR 'MODE AMODE=24'  *\n.*                                                                   *\n.* NOTES: EXAMPLE - '    MODE AMODE=31  SET ADDRESSING MODE TO 31    *\n.*                  ' -MORE CODE -                                   *\n.*                  '    MODE AMODE=24  SET ADDRESSING MODE TO 24    *\n.*                                                                   *\n.*                                                                   *\n.*                                                                   *\n.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n.*\n         LCLC   &I\n         GBLA   &B\n&I       SETC   '&SYSNDX'\n         AIF    (&AMODE EQ 31).MOD31\n&NAME    LA     15,RMOD&I\n         BSM    0,15\nRMOD&I   DS     0H\n         AGO    .MEND\n.MOD31   ANOP\n&NAME    L      15,AMOD&I\n         BSM    0,15\nAMOD&I   DC     A(CON&I+X'80000000')\nCON&I    DS     0H\n.MEND    MEND\n         SPACE 3\n         MACRO\n         TESTOPEN &DCB\n.*---------------------------------------------------------------*\n.*  FUNCTION: SEE IF DCB WAS OPENED\n.*    RETURN: RC IN R15  (RC=4 NO GOOD)\n.*---------------------------------------------------------------*\n         AIF ('&DCB' EQ '').ERR1\n         LCLC  &I\n&I       SETC  '&SYSNDX'\n         TM    &DCB+48,B'00010000'\n         BO    GOOD&I\n         LA    15,4\n         B     GOOD&I+4\nGOOD&I   LA    15,0\n         MEND\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             MODULE NAME = SYSTAT                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  SYSTEM STATUS INFORMATION DISPLAY   *\n*                ROUTINE TO EXAMINE AND DISPLAY SYSTEM CONTROL BLOCK  *\n*                INFORMATION.                                         *\n*                                                                     *\n*             OPERATING ENVIRONMENT = MVS/XA 2.1 AND ABOVE            *\n*                                                                     *\n*             FUNCTION =                                              *\n*                DISPLAY ADDRESSES AND AVAILABLE PRIVATE REGION       *\n*                                                                     *\n*             NOTES =  SOME                                           *\n*                                                                     *\n*              REGISTER USAGE:                                        *\n*                                                                     *\n*                          R1 ..... PASSING PARMS                     *\n*                          R2 ..... ADDRESSING OF CVT PREFIX          *\n*                          R3 ..... ADDRESSING OF CVT OS/VS2 EXTENSION*\n*                          R4 ..... ADDRESSING OF CVT OS/VS1 AND      *\n*                                   OS/VS2 EXTENSION                  *\n*                    WORK5,R5 ..... WORK REG: VARIABLE                *\n*                    WORK6,R6 ..... WORK REG: VARIABLE                *\n*                    WORK7,R7 ..... WORK REG: VARIABLE                *\n*                    WORK8,R8 ..... WORK REG: VARIABLE                *\n*     BASE4                R9 ..... BASE+4096+4096+4096            MTW*\n*     BASE3               R10 ..... BASE+4096+4096                 MTW*\n*     BASE2               R11 ..... BASE+4096 REG                     *\n*     BASE1               R12 ..... BASE REG                          *\n*                         R13 ..... SAVE AREA AND BASE REG         MTW*\n*                  BALREG,R14 ..... FOR BRANCHING                     *\n*                         R15 ..... USUAL                             *\n*                                                                     *\n*             MACROS = IBM: CAMLST, DCB, LOCATE, OPEN, PUT, RDJFCB,MTW*\n*                           STFSMODE, STLINENO, STTMPMD,  11/30/87 MTW*\n*                           TGET, TPUT, VSMREGN           11/30/87 MTW*\n*                    OTHER: MODE - SET AMODE              11/30/87 MTW*\n*                           TESTOPEN - CHECK FOR OPEN DCB (SET RC)    *\n*                                                                     *\n*        SUBROUTINES = PRC: JULSUB BY BILL GODFREY FROM CBT TAPE      *\n*                                                         11/30/87 MTW*\n*             DSECTS = IBM: CVT, IEESMCA, IEFUCBOB                    *\n*                                                                     *\n*                    OTHER: CDS, EXITTAB, IEEMBACT,       11/30/87 MTW*\n*                           IHAGDA, IRARMCT, RDS, SST, STGDSECT    MTW*\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASMH                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = SYSTAT   (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = NONE                                            *\n*                                                                     *\n*             OUTPUT = EITHER TO DDNAME SYSOUT OR TPUT'S UNDER TMP    *\n*                      (NOTE: SYSOUT IS OPENED AS A DSORG=PS FILE)    *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES = MANY ...                                       *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES  (new)                      *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                                 *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n* NOTE1: EACH SUB-SECTION STORES THE 'BALREG' AS ITS FIRST INSTR.     *\n*       AND AS ITS LAST IT LOADS IT. SO THE INTEGRITY OF THAT         *\n*       REGISTER IS NEVER IN QUESTION.                                *\n*                                                                     *\n* NOTE2: ALL MODE-SETTING NECCESSARY TO ADDRESS EXTENDED STORAGE      *\n*        IS PERFORMED IN THE SUB-SECTION.                             *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 11/30/87 MICHAEL WILCOX SUBSTITUTE THE JULSUB SUBROUTINE FOR $STCK. *\n*          ADD DISPLAY OF IPL DAY-OF-WEEK AND ELAPSED TIME SINCE IPL. *\n*          ADD DISPLAY OF NUMBER OF CPUS ONLINE.                      *\n*          ADD DISPLAY OF SMFPRMnn DATA.                              *\n*          ADD DISPLAY OF LINK LIST DATA SET NAMES.                   *\n*          FIX SEVERAL BUGS IN APF DATA SET NAMES DISPLAY PROMPTING.  *\n*          S0C4 IN CPU SERIAL NUMBER LOGIC.  ACCOMMODATE 8 PROCESSORS.*\n*          CHANGE SYSRES UCB TESTS FROM \"CLI\" TO \"TM\" INSTRUCTIONS.   *\n*          BIT TO TEST FOR A SHARED SYSRES IS \"UCBRR\", NOT \"UCBRPS\".  *\n*          MAKE TPUT/TGET LOGIC CONFORM TO FULL SCREEN PROTOCOLS.     *\n*          ENTIRELY REPLACE DISPLAY OF SYSTEM STORAGE AREA ADDRESSES. *\n*                                                                     *\n*          - MY THANKS TO MICHAEL                                 MVH *\n*                                                                     *\n* 01/28/88 SUBCHANNEL NUMBER FOR SYSRES CAUSES ABEND 0C7 WHEN         *\n*          IT'S NOT NUMERIC, MAKES SENSE !!                       MVH*\n*                                                                     *\n* -----------------------  Things to do  -----------------------------*\n*          Any abitious individuals who would like to rewite this     *\n*              to make it re-enterent ??                              *\n*          How about each routine as its own called subroutine ?      *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,                                          11/30/87 MTW\nSYSTAT   CSECT\n         SAVE  (14,12),,SYSTAT_&SYSDATE._&SYSTIME._V2.0    11/30/87 MTW\n         LR     R12,R15               * LOAD 1ST 4K        11/30/87 MTW\n         USING  SYSTAT,R12,R11,R10,R9 * R12, R11, R10, AND R9 BASE REGS\n         L      R11,BASE2             * LOAD 2ND 4K\n         L      R10,BASE3             * LOAD 3RD 4K\n         L      R9,BASE4              * LOAD 4TH 4K        11/30/87 MTW\n         L      R15,BASE5             * POINT TO SAVE AREA 11/30/87 MTW\n         ST     R15,8(,R13)           * FORWARD CHAIN      11/30/87 MTW\n         ST     R13,4(,R15)           * BACKWARD CHAIN     11/30/87 MTW\n         LR     R13,R15               * POINT TO SYSTAT SAVE AREA   MTW\n         USING  SAVE,R13              * R13 GIVES 5TH 4K   11/30/87 MTW\n         B      *+4+4+4+4+4           * SKIP EXT-ADDR.     11/30/87 MTW\nBASE2    DC     A(SYSTAT+4096)\nBASE3    DC     A(SYSTAT+4096+4096)\nBASE4    DC     A(SYSTAT+4096+4096+4096)\nBASE5    DC     A(SAVE)                                    11/30/87 MTW\n         SPACE\nBALREG   EQU    14                    * BAL RETURN REG\nWORK5    EQU    5                     * WORK REG\nWORK6    EQU    6                     * WORK REG EVEN\nWORK7    EQU    7                     * WORK REG ODD\nWORK8    EQU    8                     * WORK REG WHAT EVER\n         SPACE\n         SPLEVEL SET=2\n         SPACE\n         ST     R1,SAVE1              * SAVE PARM IF ANY\n         BAL    BALREG,$GETDCB        * CHECK FOR ALLOCATIONS\n         BAL    BALREG,$GETDATE       * RETREIVE DATE AND TIME INFO\n         BAL    BALREG,$GETCVT        * ADDRESS ALL CVT AREAS\n         BAL    BALREG,$GETSMF        * RETREIVE SMF INFO (IPL RELATED)\n         BAL    BALREG,$GETRES        * INFO OF SYSRES VOLSER\n         BAL    BALREG,$CVTINFO       * GET CVT CONTROL BLOCK INFO\n         BAL    BALREG,$PCCAVT        * GET CPU SERIAL NUMBER\n         BAL    BALREG,$VIRTADR       * OBTAIN PRIVATE STORAGE INFO\n         BAL    BALREG,$SRMPARM       * SRM PARMS: OPT, ICS, IPS\n         BAL    BALREG,$STORAGE       * GET STORAGE ADDRESSES\n         BAL    BALREG,$CONADR        * CONVERT STORAGE ADDR TO EBCDIC\n         BAL    BALREG,$STORMAP       * CREATE STORAGE MAP\n         BAL    BALREG,$TERMPUT       * TERMINAL 'TPUTS'\n         BAL    BALREG,$PUTSMF        * WRITE THE SMF SMCA TABLE    MTW\n         BAL    BALREG,$GETLLT        * EXAMINE LINK LIST TABLE, LOAD\n         BAL    BALREG,$PUTLLT        * AND WRITE THE DSN TABLE     MTW\n         BAL    BALREG,$GETAPF        * EXAMINE THE APF TABLE, LOAD MTW\n         BAL    BALREG,$PUTAPF        * AND WRITE THE DSN TABLE     MTW\n         B      $FINISH               * THAT'S ALL FOLKS\n         SPACE  3                                          11/30/87 MTW\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* READ JFCB FOR SYSOUT DATASET IF ALLOCATED                           *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETDCB  DS     0H\n         ST     BALREG,SAVBAL         * SAVE BAL REG\n         RDJFCB SYSOUT               * DDNAME ALLOCATED ?\n         LTR    R15,R15              * TEST RESULTS\n         BNZ    ENDDCB               * NOPE, DO TPUTS\n         OPEN   (SYSOUT,OUTPUT)      * OPEN SYSOUT FILE\n         TESTOPEN SYSOUT             * IS DDNAME THERE\n         LTR    R15,R15              * TEST OPEN\n         BNZ    ENDDCB               * NOPE, DO TPUTS\n         MVI    OPENFLG,X'FF'        * GOOD OPEN, SET FLAG\nENDDCB   L      BALREG,SAVBAL        * LOAD BAL REG\n         BR     BALREG               * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* GET CURRENT DATE AND TIME INFO. AND STORE IT.                       *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETDATE DS     0H\n         ST     BALREG,SAVBAL         * SAVE BAL REG\n         LA     R1,1                                       11/30/87 MTW\n         ST     R1,JULPARM2           * INPUT FORMAT CODE  11/30/87 MTW\n         XC     JULPARM1,JULPARM1     * INPUT DATE OF ZERO 11/30/87 MTW\n         LA     R1,1+16+128+512                            11/30/87 MTW\n         ST     R1,JULPARM4           * OUTPUT FORMAT CODE 11/30/87 MTW\n         LA     R1,JULPTRS                                 11/30/87 MTW\n         L      R15,=V(JULSUB)                             11/30/87 MTW\n         BALR   R14,R15                                    11/30/87 MTW\n         L      R1,JULPARM3           * LOAD JULIAN DATE   11/30/87 MTW\n         CVD    R1,DWORD              * CONVERT IT AND ... 11/30/87 MTW\n         ED     CURDATE,DWORD+5       *         EDIT IT    11/30/87 MTW\n         MVC    CURTIME,JULPARM3+36   * CURRENT TIME OF DAY11/30/87 MTW\n         MVC    CURWKDAY(9),JULPARM3+24         DAY OF WEEK11/30/87 MTW\n         MVC    CURMDY,JULPARM3+4     *      MONTH DAY YEAR11/30/87 MTW\n         L      BALREG,SAVBAL         * RELOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* SET ADDRESSABLITIY FOR ALL CVT DSECTS: OS/VS2 AND OS/VS1/VS2 EXTEN. *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETCVT  DS     0H\n         ST     BALREG,SAVBAL         * SAVE BAL REG\n         L      R2,CVTPTR             * GET CVT POINTER\n         S      R2,=F'256'            * TO CVT PREFIX\n         USING  CVTFIX,R2             * ADDRESS CVT PREFIX\n         L      R3,CVTSMEXT           * LOAD STORAGE EXTENSION\n         USING  CVTVSTGX,R3           * ADDRESS PATCH AREA\n         L      R4,CVTEXT2            * CVT EXTENSION OS/VS1-OS/VS2\n         USING  CVTXTNT2,R4           * ADDRESS IT\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* GET SMF IPL DATE+TIME, CREATE A TABLE OF SMCA DATA      11/30/87 MTW*\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETSMF  DS     0H\n         ST     BALREG,SAVBAL         * SAVE BAL REG\n         L      WORK5,CVTSMCA         * POINT TO SMF: 0 IF NOT THERE\n         C      WORK5,=F'0'           * ANY ADDRESS?\n         BE     NOSMF                 * NOPE, SMF NOT ACTIVE !\n         USING  SMCABASE,WORK5        * SMF DSECT\n         MVC    SYSID(4),SMCASID      * SYSTEM ID  +(16)\n         MVC    MTIME(4),SMCAITME     * IPL TIME +(336) BINARY\n         MVC    PDATE(4),SMCAIDTE     * IPL DATE +(340) 00YYDDDF\n* SMF BUFFER INFO\n         XR     WORK7,WORK7           * CLEAR WORK\n         LH     WORK7,SMCAMNBF        * SMF MIN BUFFERS\n         CVD    WORK7,DWORD           * CONVERT IT AND ...\n         ED     SMFMBUF(6),DWORD+5    *         EDIT IT\n         XR     WORK7,WORK7           * CLEAR WORK\n         LH     WORK7,SMCAMXBF        * SMF MAX BUFFERS\n         CVD    WORK7,DWORD           * CONVERT IT AND ...\n         ED     SMFXBUF(6),DWORD+5    *         EDIT IT\n         L      WORK7,SMCABFLS        * # RECORDS LOST DUE TO BUFF.LOW\n         CVD    WORK7,DWORD           * CONVERT IT AND ...\n         ED     SMFLOST(10),DWORD+3   *         EDIT IT\n         L      WORK7,SMCABFWT        * # RECORDS WRITEN TO BUFFERS\n         CVD    WORK7,DWORD           * CONVERT IT AND ...\n         ED     SMFBUFD(10),DWORD+3   *         EDIT IT\n* EDIT IPL DATE                                            11/30/87 MTW\n         ED     IPLDATE(7),PDATE+1    * EDIT IPL DATE      11/30/87 MTW\n         LA     R1,3                                       11/30/87 MTW\n         ST     R1,JULPARM2           * INPUT FORMAT CODE  11/30/87 MTW\n         MVC    JULPARM1,PDATE        * PACKED INPUT DATE  11/30/87 MTW\n         LA     R1,16+128                                  11/30/87 MTW\n         ST     R1,JULPARM4           * OUTPUT FORMAT CODE 11/30/87 MTW\n         LA     R1,JULPTRS                                 11/30/87 MTW\n         L      R15,=V(JULSUB)                             11/30/87 MTW\n         BALR   R14,R15                                    11/30/87 MTW\n         MVC    IPLWKDAY(9),JULPARM3+20   IPL DAY OF WEEK  11/30/87 MTW\n         MVC    IPLMDY,JULPARM3       * IPL MONTH DAY YEAR 11/30/87 MTW\n* EDIT IPL TIME\n         L      WORK7,MTIME           * LOAD TIME\n         XR     WORK6,WORK6           * CLEAR REG\n         D      WORK6,=F'360000'      * DIVIDE\n         CVD    WORK7,DWORD           * CONVERT\n         OI     DWORD+7,X'0F'         * OR\n         UNPK   IPLTIME(2),DWORD+6(2) * UNPACK             11/30/87 MTW\n         LR     WORK7,WORK6           * AND AGAIN ...\n         XR     WORK6,WORK6           *\n         D      WORK6,=F'6000'        *\n         CVD    WORK7,DWORD           *\n         OI     DWORD+7,X'0F'         *\n         UNPK   IPLTIME+3(2),DWORD+6(2)                    11/30/87 MTW\n         LR     WORK7,WORK6           * AND AGAIN ...      11/30/87 MTW\n         XR     WORK6,WORK6           *                    11/30/87 MTW\n         D      WORK6,=F'100'         *                    11/30/87 MTW\n         CVD    WORK7,DWORD           *                    11/30/87 MTW\n         OI     DWORD+7,X'0F'         *                    11/30/87 MTW\n         UNPK   IPLTIME+6(2),DWORD+6(2)                    11/30/87 MTW\n* SMFPRM MEMBER NAME SUFFIX                                11/30/87 MTW\n         L      WORK6,SMCAACTP        * POINT TO ACT\n         USING  IEEMBACT,WORK6\n         MVC    SMFPRM,ACTMEMID\n         DROP   WORK6\n* GETMAIN DYNAMIC STORAGE FOR THE TABLE OF SMCA DATA       11/30/87 MTW\nSMFGMAIN LA     R0,100                * ROOM FOR 100 SMCA TABLE ENTRIES\n         MH     R0,=H'60'             *     OF LENGTH 60\n         ST     R0,GETSIZE            * SAVE SMCA TABLE SIZE\n         GETMAIN R,LV=(0),RELATED=(SMFFMAIN)\n         ST     R1,GETREG             * SAVE SMCA TABLE ADDRESS\n* SID, JWT, MAXDORM AND STATUS                             11/30/87 MTW\n         MVC    WKSMFSID,=C'SID(XXXX)'\n         MVC    WKSID,SMCASID\n         MVC    WKJWT,=C'JWT(HHMM)'\n         MVC    WKJWT#,SMCASJWT\n         MVC    WKMAXDRM,=C'MAXDORM(MMSS)'\n         MVC    WKMAXDM#,SMCASMDM\n         MVC    WKSTATUS,=C'STATUS(HHMMSS)'\n         MVC    WKSTTUS#,SMCASSTS\n         BAL    BALREG,SAVESMCA       * SAVE SMF WORK BUFFER IN TABLE\n* SELECTIVITY TABLES                                       11/30/87 MTW\n         L     WORK6,SMCASSTP           A(SELECTIVITY TABLES)\n         USING SST,WORK6\n         LH    WORK7,SMCANSST           NUMBER OF SELECTIVITY TABLES\nSSTLOOP  DS    0H\n         TM    SSTFLAGS,SSTACTIV        Q. THIS SST IN USE\n         BZ    NEXTSST                  NO.\n         MVC   WKNAME,SSTNAME           SYS/SUBSYS\n         LA    WORK8,WKNAME+3\n         CLI   0(WORK8),C' '\n         BNE   *+4+2\n         BCTR  WORK8,0\n         MVI   1(WORK8),C':'\n         LA    WORK8,3(,WORK8)\n         TM    SSTFLAGS,SSTDETAL        Q. DETAILED ACCTNG\n         BNZ   *+4+6+4                  YES.\n         MVC   0(2,WORK8),=C'NO'        NO.\n         LA    WORK8,2(,WORK8)\n         MVC   0(6,WORK8),=C'DETAIL'\n         LA    WORK8,7(,WORK8)\n         MVC   0(10,WORK8),=C'NOINTERVAL'\n         CLC   SSTINTVL+1(7),SSTINTVL   Q. ANY INTERVAL\n         BE    NOINTVL                  NO.\n         MVC   0(16,WORK8),=C'INTERVAL(HHMMSS)'\n         LM    R0,R1,SSTINTVL\n         SRDL  R0,12\n         D     R0,=F'1E6'               R1=SECONDS\n         SR    R0,R0\n         D     R0,=A(60*60)             R1=HOURS\n         CVD   R1,DWORD\n         UNPK  9(2,WORK8),DWORD\n         SRDL  R0,32\n         D     R0,=A(60)                R1=MINUTES\n         CVD   R1,DWORD\n         UNPK  11(2,WORK8),DWORD\n         CVD   R0,DWORD                 R0=SECONDS\n         UNPK  13(2,WORK8),DWORD\n         MVZ   10(5,WORK8),9(WORK8)\nNOINTVL  DS    0H\n         BAL   BALREG,SAVESMCA\n         L     R15,SSTEXTAB             A(EXIT TABLES)\n         USING EXITTAB,R15\n         L     R14,EXITNMBR             NUM EXITS\n         LTR   R14,R14                  Q. ANY EXITS\n         BZ    NOEXITS                  NO.\n         MVC   WKEXITS,=C'EXITS'        PRINT EXITS (SANS \"IEF\")\n         LA    R15,EXITNTRY\n         USING EXITNTRY,R15\n         LA    R1,WKEXIT#               A(FIRST POS)\nEXITLOOP DS    0H\n         MVI   0(R1),C','\n         MVC   1(5,R1),EXITNAME+3\n         LA    R1,1(,R1)\n         CLI   0(R1),C' '\n         BNE   *-4-4\n         LA    R15,16(,R15)\n         BCT   R14,EXITLOOP\n         MVI   WKEXIT#,C'('             ENCLOSE EXIT NAMES\n         MVI   0(R1),C')'               \"       \"    \"\n         BAL   BALREG,SAVESMCA\nNOEXITS  DS    0H\nNEXTSST  DS    0H\n         AH    WORK6,SMCALSST           A(NEXT SEL. TABLE)\n         BCT   WORK7,SSTLOOP            NO.\n         DROP  WORK6,R15\n* SMF VSAM CLUSTER NAMES\n         L     WORK6,SMCAFRDS           A(FIRST RECORDING D/S BLOCK)\n         USING RDS,WORK6\n         MVI   WKPRIM,C'P'              FIRST ONE IS PRIMARY\nRDSLOOP  DS    0H\n         MVC   WKSMFDSN,=C'-DSN(SYS1.MANX)'\n         MVC   WKDSN,RDSNAME            SMF DSNAME\n         MVC   WKSMFVOL,=C'VOL(XXXXXX)'\n         MVC   WKVOL,RDSVOLID           SMF VOLSER\n         MVC   WKBLOCKS,=C'BLKS(XXXXXXX)'\n         L     R0,RDSCAPTY              CAPACITY (4096-BYTE BLKS)\n         CVD   R0,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  WKBLKS,DWORD\n         MVC   WKFULL,=C'FULL'\n         L     R15,RDSNXTBL             NEXT BLOCK\n         CR    R15,R0                   Q. FULL\n         BZ    QACTVRDS                 YES.\n         MVC   WKEMPTY,=C'EMPTY'\n         S     R15,=F'1'                Q. EMPTY\n         BZ    QACTVRDS\n         LTR   R0,R0                    Q. CAPACITY IN RDS\n         BZ    QACTVRDS                 NO. AVOID 0C9\n         MVC   WKPERCNT,=X'4021204B206C'\n         M     R14,=F'1E3'              SHIFT\n         DR    R14,R0\n         CVD   R15,DWORD\n         ED    WKPERCNT(5),DWORD+6\nQACTVRDS DS    0H\n         C     WORK6,SMCASRBR           Q. ACTIVE D/S\n         BNE   *+4+6                    NO.\n         MVC   WKACTDSN,=C'ACTIVE'      YES.\n         TM    RDSFLAG,RDSDUMP          Q. DUMP REQ'D\n         BZ    *+4+6                    NO.\n         MVC   WKDUMP,=C'DUMP REQ''D'   YES.\n         BAL   BALREG,SAVESMCA\n         L     WORK6,RDSNEXT            A(NEXT D/S BLOCK)\n         TM    RDSFLAG2,RDSLOST         Q. LOST DATA RDS\n         BNZ   ENDRDS                   YES. THAT'S ALL\n         MVI   WKSECND,C'S'             NO. INDIC SECONDARY D/S\n         B     RDSLOOP                  LOOP\n         DROP   WORK5,WORK6                                11/30/87 MTW\nENDRDS   DS     0H                                         11/30/87 MTW\nNOSMF    DS     0H                                         11/30/87 MTW\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN             11/30/87 MTW\n         SPACE  1                                          11/30/87 MTW\n* SUBROUTINE TO SAVE SMF WORK BUFFER IN AN SMCA TABLE ENTRY11/30/87 MTW\nSAVESMCA DS     0H\n         LH     R15,SMFCOUNT          * CURRENT SMCA TABLE ENTRY COUNT\n         MH     R15,=H'60'            * POINT TO\n         A      R15,GETREG            *     NEXT SMCA TABLE ENTRY\n         MVC    0(60,R15),WORKBUF     * WORK BUFFER INTO SMCA TABLE\n         LH     R15,SMFCOUNT          * BUMP SMCA TABLE\n         LA     R15,1(,R15)           *     ENTRY COUNT\n         STH    R15,SMFCOUNT          *         BY ONE\n         MVC    WORKBUF,WORKBUF-1     * CLEAR WORK BUFFER\n         C      R15,=F'100'           * END OF SMCA TABLE?\n         BNL    NOSMF                 * YES, STOP COLLECTING SMCA DATA\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* GET INFORMATION FROM THE SYSRES VOLUME                              *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETRES  DS     0H\n         ST     BALREG,SAVBAL         * STOR BAL REG\n         L      WORK6,CVTSYSAD        * UCB ADDR FOR SYSRES\n         LA     WORK7,UCBPRFX         * PREFIX UCB AREA\n         SR     WORK6,WORK7           * MOVE BACK TO ADDRESS IT\n         USING  UCB,WORK6             * ADDRESS UCB DSECT\n         SPACE\n* CHECK FOR UCB: ONLINE, DEVICE ALLOCATED, MOUNTED PERM, AND SYSRES\n         SPACE\n         TM     UCBSTAT,UCBONLI+UCBALOC+UCBPRES+UCBSYSR    11/30/87 MTW\n         BO     *+12                                       11/30/87 MTW\n         TM     UCBSTAT,UCBONLI+UCBPRES+UCBSYSR            11/30/87 MTW\n         BNO    NSYSRES                                    11/30/87 MTW\n         MVC    SYSRES(6),UCBVOLI     * VOLSER OF SYSRES\n         MVC    UNITADR(3),UCBNAME    * UNIT ADDR\n*        LA     WORK7,X'F0'           * SET SIGN NIBBLE    11/30/87 MTW\n*        ICM    WORK7,B'0110',UCBSCHNO  LOAD SUBCHANNEL NUMBER      MTW\n*        SRL    WORK7,4               * NOW WORK7='000N NNNF' PACKED!\n*        ST     WORK7,#SUBCHAN        * STORE IT           11/30/87 MTW\n*        ED     SUBCHAN,#SUBCHAN+1    * EDIT RESULTS       11/30/87 MTW\n         LH     WORK7,UCBSCHNO        * LOAD SUBCHANNEL #  01/28/88 MVH\n         CVD    WORK7,DWORD           * DECIMAL            01/28/88 MVH\n         ED     SUBCHAN(6),DWORD+5    * EDIT IT            01/28/88 MVH\n         MVC    PATHS(8),UCBCHPID     * PATHS\n         LA     WORK7,X'F0'           * SET SIGN NIBBLE    11/30/87 MTW\n         ICM    WORK7,B'0110',UCBCHAN * LOAD DEVICE NUMBER 11/30/87 MTW\n         SRL    WORK7,4               * NOW WORK7='000N NNNF' PACKED!\n         ST     WORK7,#DEVNO          * STORE IT           11/30/87 MTW\n         ED     DEVNO,#DEVNO+1        * EDIT RESULTS       11/30/87 MTW\n         TM     UCBMIHTI,UCBPGDEV     * PAGING DEVICE ??   11/30/87 MTW\n         BNO    *+10                  * PAGING FLAG        11/30/87 MTW\n         MVC    PAGEDEV(3),=C'YES'    * NOTIFY - THIS DEVICE: PAGING\n         TM     UCBTBYT2,UCBRR        * SHARABLE ?         11/30/87 MTW\n         BNO    *+10                  * PAGING FLAG        11/30/87 MTW\n         MVC    SHARE(3),=C'YES'      * SHARABLE ?\n         LA     R1,UCBVTOC            * TTR0 OF VTOC       11/30/87 MTW\n         BAL    BALREG,HEXOUT         * CONVERT TTR0 TO EBCDIC      MTW\n         MVC    TTR0(8),HEXWORK       * SAVE TTR0 IN EBCDIC11/30/87 MTW\n         LH     WORK7,UCBUSER         * NUMBER OF USERS\n         DROP   WORK6                 * DON'T NEED IT ANY MORE\n         CVD    WORK7,DWORD           * CONVERT IT\n         ED     USERS(6),DWORD+5      * EDIT RESULTS\n* PATH DETERMINATION\n         LA     WORK7,PATHS-1         * LOAD ADDRESS OF PATHS\n         LA     WORK6,8               * MAX CHANNEL PATHS\n         LA     WORK5,CHPIDS-4        * CHPID TABLE ADDR\nPATHLOOP LA     WORK7,1(,WORK7)       * LOAD NEXT ADDR\n         CLI    0(WORK7),X'FF'        * EMPTY CHPID ?\n         BE     PATHDONE              * YEP, ALL DONE\n         LA     WORK8,X'F0'           * SET SIGN NIBBLE    11/30/87 MTW\n         ICM    WORK8,B'0010',0(WORK7)  LOAD CHANNEL PATH IDENTIFIERMTW\n         SRL    WORK8,4               * NOW WORK8='0000 0NNF' PACKED!\n         STH    WORK8,PPATHS          * STORE IT\n         A      WORK5,=F'4'           * NEXT ADDR IN TABLE\n         MVC    0(4,WORK5),EDITPATH   * MOVE EDIT\n         ED     0(4,WORK5),PPATHS     * EDIT RESULTS\n         BCT    WORK6,PATHLOOP        * LOOP UPTO 8 TIMES\nPATHDONE DS     0H\n*\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n*                                                          11/30/87 MTW\nNSYSRES  MVC    SYSRES(6),=6C'?'      * STRANGE OCCURANCE\n         MVC    UNITADR(3),=3C'?'     * NOTE IT\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* FROM 'CVT' - GET OS/PRODUCT INFORMATION - CVT PREFIX                *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$CVTINFO DS     0H\n         ST     BALREG,SAVBAL         * STOR BAL REG\n         SPACE\n* PROCESS CVT PREFIX FOR STATUS INFO\n         SPACE\n         MVC    PRODLVL(16),CVTPROD   * PRODUCT LEVEL\n         MVC    PRODNAM(8),CVTPRODN   * PRODUCT NAME\n         MVC    PRODFMID(8),CVTPRODI  * FMID OF IPLED SYSTEM\n         MVC    CPUMDL(2),CVTMDL      * MODEL NUMBER OF CPU IN\n*                                     * NON-PACKED HEX: X'0145' SO ...\n*                                     *  CPUMDL ID A DC CL2' ',X'F0'\n*                                     *  - APPENDED A X'F0' MAKE SIGNED\n         ED     CPUMODL(5),CPUMDL     * EDIT RESULTS\n         MVC    #NUCID(1),CVTNUCLS    * NUC ID FOR IEANUC__\n         MVC    RELNUM(4),CVTRELNO    * OS/VS RELEASE NUMBER\n         SPACE\n* CPU PHYSICAL ID\n         SPACE\n         LH     WORK6,CVTICPID        * CVT IPL'ED PHYSICAL ID SIGNED\n         LTR    WORK6,WORK6\n         BZ     NOPID\n         ED     CPUPID(5),CVTICPID    * EDIT RESULTS\n         B      *+10\nNOPID    MVC    CPUPID(5),=C'UNKN '      * UNKNOWN\n         SPACE\n* CPU MAX PHYSICAL ADDRESS\n         SPACE\n         LH     WORK6,CVTMAXMP        * CVT MAX CPU PHYSICAL ADDR SGND\n         LTR    WORK6,WORK6\n         BZ     NOMAXMP\n         ED     MAXMP(5),CVTMAXMP     * EDIT RESULTS\n         B      *+10\nNOMAXMP  MVC    MAXMP(5),=C'UNKN '    * UNKNOWN\n         SPACE  1                                          11/30/87 MTW\n* NUMBER OF CPUS ONLINE                                    11/30/87 MTW\n         SPACE  1                                          11/30/87 MTW\n         L      WORK7,CVTCSD          * POINT TO CSD       11/30/87 MTW\n         USING  CSD,WORK7                                  11/30/87 MTW\n         LH     WORK6,CSDCPUOL        * NUM OF CPUS ONLINE 11/30/87 MTW\n         LTR    WORK6,WORK6                                11/30/87 MTW\n         BZ     NOCPUOL                                    11/30/87 MTW\n         ED     CPUONLIN(5),CSDCPUOL  * EDIT RESULTS       11/30/87 MTW\n         B      *+10                                       11/30/87 MTW\nNOCPUOL  MVC    CPUONLIN(5),=C'UNKN ' * UNKNOWN            11/30/87 MTW\n         DROP   WORK7                                      11/30/87 MTW\n         SPACE\n* CHECK FOR CLPA\n         SPACE\n         CLI    CVTDIRST,CVTDICOM     * TEST FOR CLPA\n         BNE    *+8                   * NOPE, CONTINUE\n         MVI    CLPA,C'Y'             * SET CLPA FLAG\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN             11/30/87 MTW\n         SPACE  3                                          11/30/87 MTW\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* FROM 'PCCAVT' - GET THE CPU ID NUMBER                               *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$PCCAVT  DS     0H\n         ST     BALREG,SAVBAL         * STOR BAL REG\n         L      WORK5,CVTPCCAT        * PCCAVT (+2FC)      11/30/87 MTW\n         ICM    WORK6,15,0(WORK5)     * UNIPROCESSOR ONLY!!11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO\n         ICM    WORK6,15,4(WORK5)     * TRY CPU 1          11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO\n         ICM    WORK6,15,8(WORK5)     * TRY CPU 2          11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO\n         ICM    WORK6,15,12(WORK5)    * TRY CPU 3 (3084)   11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO\n         ICM    WORK6,15,16(WORK5)    * TRY CPU 4 (3090)   11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO      11/30/87 MTW\n         ICM    WORK6,15,20(WORK5)    * TRY CPU 5 (3090)   11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO      11/30/87 MTW\n         ICM    WORK6,15,24(WORK5)    * TRY CPU 6 (FUTURE) 11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO      11/30/87 MTW\n         ICM    WORK6,15,28(WORK5)    * TRY CPU 7 (FUTURE) 11/30/87 MTW\n         BNZ    MCPUINFO              * MOVE CPU INFO      11/30/87 MTW\n         B      *+10                  * SKIP IT\nMCPUINFO MVC    SERIAL(6),6(WORK6)    * PCCACPID SERIAL # (6)\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n*\n         EJECT\n$VIRTADR DS     0H\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                   *\n*       DETERMINE VIRTUAL AND REAL STORAGE AMOUNTS      11/30/87 MTW*\n*                                                                   *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n         ST     BALREG,SAVBAL         * STOR BAL REG\n         MODE   AMODE=31\n         VSMREGN WKAREA=REGN      OBTAIN PRIVATE REGION INFORMATION\n         MODE   AMODE=24\n*                                                          11/30/87 MTW\n         MVC    #DAPVT,ADDRBL     THE GDA IS MISSING THIS ADDRESS   MTW\n*                                                          11/30/87 MTW\n*                                 FORMAT THE INFORMATION INTO DECIMAL\n*                                                          11/30/87 MTW\n         LA    R1,PARMLST1        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN BYTES\n*                                    BELOW 16M AND PLACE IN OUTPUT AREA\n         LA    R1,PARMLST2        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN BYTES\n*                                    ABOVE 16M AND PLACE IN OUTPUT AREA\n         L     WORK7,LENBL        LOAD SIZE OF PRIVATE AREA BELOW 16M\n         SRL   WORK7,10           DIVIDE BY 1024 = 1K      11/30/87 MTW\n         ST    WORK7,KREG24       SAVE PRIVATE AREA SIZE IN K BELOW 16M\n         LA    R1,PARMLST3        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN K\n*                                    BELOW 16M AND PLACE IN OUTPUT AREA\n         L     WORK7,KREG24       LOAD SIZE OF PRIVATE AREA IN K BELOW\n         SRL   WORK7,10           DIVIDE BY 1024 = 1MEG    11/30/87 MTW\n         ST    WORK7,MREG24       SAVE PRIVATE AREA SIZE IN MEGS BELOW\n         LA    R1,PARMLST4        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN MEGS\n*                                    BELOW 16M AND PLACE IN OUTPUT AREA\n         L     WORK7,LENAB        LOAD SIZE OF PRIVATE AREA ABOVE 16M\n         SRL   WORK7,10           DIVIDE BY 1024 = 1K      11/30/87 MTW\n         ST    WORK7,KREG31       SAVE PRIVATE AREA SIZE IN K ABOVE 16M\n         LA    R1,PARMLST5        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN K\n*                                    ABOVE 16M AND PLACE IN OUTPUT AREA\n         L     WORK7,KREG31       LOAD SIZE OF PRIVATE AREA IN K ABOVE\n         SRL   WORK7,10           DIVIDE BY 1024 = 1MEG    11/30/87 MTW\n         ST    WORK7,MREG31       SAVE PRIVATE AREA SIZE IN MEGS ABOVE\n         LA    R1,PARMLST6        PARAMETER LIST FOR CONVERT ROUTINE\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF PRIVATE AREA IN MEGS\n*                                    ABOVE 16M AND PLACE IN OUTPUT AREA\n         L     WORK7,CVTRLSTG     REAL STORAGE SIZE IN K   11/30/87 MTW\n         SLL   WORK7,10           MULTIPLY BY 1024 = BYTES 11/30/87 MTW\n         ST    WORK7,#VTRLSTB     SAVE REAL STORAGE SIZE IN BYTES   MTW\n         LA    R1,PARMLST7        PARAMETER LIST FOR CONVERT ROUTINEMTW\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF REAL STORAGE IN BYTES\n*                                                          11/30/87 MTW\n         L     WORK7,CVTRLSTG     REAL STORAGE SIZE IN K   11/30/87 MTW\n         ST    WORK7,#VTRLSTK     SAVE REAL STORAGE SIZE IN K       MTW\n         LA    R1,PARMLST8        PARAMETER LIST FOR CONVERT ROUTINEMTW\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF REAL STORAGE IN K MTW\n*                                                          11/30/87 MTW\n         L     WORK7,CVTRLSTG     REAL STORAGE SIZE IN K   11/30/87 MTW\n         SRL   WORK7,10           DIVIDE BY 1024 = 1MEG    11/30/87 MTW\n         ST    WORK7,#VTRLSTM     SAVE REAL STORAGE SIZE IN MEGS    MTW\n         LA    R1,PARMLST9        PARAMETER LIST FOR CONVERT ROUTINEMTW\n         BAL   WORK6,CONVCVD      CONVERT SIZE OF REAL STORAGE IN MEGS\n*                                                          11/30/87 MTW\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* FROM 'RMCT' - GET THE IPS, OPT, AND ICS MEMBER NAME SUFFIXES 11/30/87\n*             - CALCULATE ELAPSED TIME SINCE LAST IPL OR SET IPS    MTW\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$SRMPARM DS     0H\n         ST     BALREG,SAVBAL         * STOR BAL REG\n         MODE   AMODE=31              * GO INTO EXTENDED MODE\nGETINFO  L      WORK7,CVTOPCTP        * POINT TO RMCT      11/30/87 MTW\n         USING  RMCT,WORK7                                 11/30/87 MTW\n         L      WORK6,RMCTICST        * INSTALL. CONTROL SPEC. TABLE\n         MVC    ICSMSG(2),0(WORK6)    * MOVE IEAICS SUFFIX\n         L      WORK6,RMCTWMST        * WLM SPECIFICATION TABLE\n         MVC    IPSMSG(2),WMSTID(WORK6) MOVE IEAIPS SUFFIX\n         L      WORK6,RMCTRMPT        * SRM PARAMETER TABLE\n         MVC    OPTMSG(2),RMPTOPTN(WORK6) * MOVE IEAOPT SUFFIX\n* CALC TIME FROM IPL  (OR SET IPS)                         11/30/87 MTW\n         L      R14,CVTASVT           * ASVT\n         USING  ASVT,R14\n         L      R15,ASVTFRST+4        * MASTER SCHEDULER ASCB (I HOPE)\n         USING  ASCB,R15\n         L      R1,ASCBOUCB           * MASTER SCHEDULER OUCB\n         USING  OUCB,R1\n         L      R0,RMCTTOD            * CURRENT TOD\n         S      R0,OUCBTMO            * GET DELTA = (TIME SINCE IPL)\n         DROP   WORK7,R14,R15,R1\n         SRDL   R0,32                 * CONVERT TO\n         D      R0,=F'1024'           *            SECONDS.\n         SR     R0,R0                 * IGNORE REMAINDER.\n         A      R1,=F'1800'           * ROUND\n         D      R0,=F'3600'           * DIVIDE TO GET HOURS.\n         CVD    R1,DWORD              * CONVERT HOURS -\n         ED     ELAPSED,DWORD+6       * CONVERT TO PRINTABLE EBCDIC.\n         MODE   AMODE=24              * GO BACK\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* FROM 'CVT' AND 'GDA' - OBTAIN SYSTEM STORAGE AREA DATA  11/30/87 MTW*\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$STORAGE DS     0H\n         ST     BALREG,SAVBAL           * STOR BAL REG\n         MODE AMODE=31                  * GO INTO EXTENDED MODE\n*\n*              EXTRACT ADDRESSES FROM THE CVT WITH SPECIAL SIGNIFICANCE\n*\n         L     WORK7,CVTASVT\n         ST    WORK7,#ASVT\n         L     WORK7,CVTJESCT\n         ST    WORK7,#JESCT\n*        L     WORK7,CVTLLTRM                              11/30/87 MTW\n*        ST    WORK7,#LLA                                  11/30/87 MTW\n         L     WORK7,CVTUSER\n         ST    WORK7,#USR\n         L     WORK7,CVTRSV40\n         SLL   WORK7,8                * KILL RESERVED BITS\n         SRL   WORK7,8                * KEEP ADDRESS\n         ST    WORK7,#APF\n         L     WORK7,CVTVPSA\n         ST    WORK7,#PSA\n         L     WORK7,CVTRMFPT\n         ST    WORK7,#RMF\n*        L     WORK7,CVTAUTHL                              11/30/87 MTW\n*        ST    WORK7,#APF1                                 11/30/87 MTW\n         L     WORK7,CVTAPFT\n         ST    WORK7,#APF2\n         L     WORK7,CVTRAC\n         ST    WORK7,#RAC\n         L     WORK7,CVTHSM\n         ST    WORK7,#HSM\n         L     WORK7,CVTVFCB\n         ST    WORK7,#VIRT\n         L     WORK7,CVTGVT\n         ST    WORK7,#GRS\n         L     WORK7,CVTATCVT\n         L     WORK7,0(R7)         INDIRECT ADDRESS        11/30/87 MTW\n         ST    WORK7,#ATCVT\n         L     WORK7,CVTDOFFS                              11/30/87 MTW\n         ST    WORK7,#VTDOFFS                              11/30/87 MTW\n*\n*              EXTRACT STORAGE AREA DATA FROM THE CVT AND GDA\n*\n         LA    WORK5,STGLINE       POINT TO OUTPUT LINE\n         L     WORK6,CVTGDA        POINT TO GDA.\n         USING GDA,WORK6           TELL ASSEMBLER.\n         LA    WORK7,STGTABLE      POINT TO STORAGE TABLE ENTRY.\n         USING STGDSECT,WORK7      TELL ASSEMBLER.\nSTGLOOP  DS    0H\n         L     R15,STGRES          POINT TO DATA RESOLUTION ROUTINE.\n         BALR  BALREG,R15          FILL-IN TABLE ENTRY.\n         LA    R1,STGSTART         POINT TO AREA START ADDRESS.\n         TM    0(R1),X'80'         BUT IS AREA MISSING?\n         BO    STGNEXT             B IF AREA IS INDEED MISSING.\n         BAL   BALREG,HEXOUT       CONVERT TO CHARACTER HEX.\n         MVC   17(8,WORK5),HEXWORK MOVE START ADDRESS IN CHARACTER HEX.\n         LA    R1,STGEND           POINT TO AREA END ADDRESS.\n         BAL   BALREG,HEXOUT       CONVERT TO CHARACTER HEX.\n         MVC   27(8,WORK5),HEXWORK MOVE END ADDRESS IN CHARACTER HEX.\n         L     R1,STGSIZE          LOAD AREA SIZE FROM TABLE.\n         SRL   R1,10               \"DIVIDE\" BY 1K = 1024 BYTES\n         CVD   R1,DWORD            DECIMALIZE IT.\n         MVC   37(10,WORK5),=X'40206B2020206B202120'  MOVE EDIT PATTERN\n         ED    37(10,WORK5),DWORD+4  EDIT LENGTH.\n         ICM   R1,15,STGFULL       LOAD AREA BYTES USED.\n         BZ    STGNEXT             B IF ZERO.\n         MH    R1,=H'100'          MULTIPLY BYTES BY 100.\n         L     R15,STGSIZE         LOAD DIVISOR.\n         SR    R0,R0               ZERO HIGH ORDER DIVIDEND.\n         DR    R0,R15              GENERATE PERCENT USED.\n         SRL   R15,1               \"DIVIDE\" DIVISOR BY 2.\n         CR    R0,R15              SHALL I ROUND?\n         BL    STGPCT              B IF NOT.\n         LA    R1,1(,R1)           ROUND PERCENTAGE.\nSTGPCT   CVD   R1,DWORD            DECIMALIZE PERCENT.\n         UNPK  DWORD(3),DWORD+6(2) UNPACK PERCENT.\n         MVC   49(2,WORK5),DWORD+1 MOVE PERCENT.\n         OI    50(WORK5),X'F0'     FIX SIGN.\n         MVI   51(WORK5),C'%'      INSERT PERCENT SIGN\nSTGNEXT  DS    0H\n         LA    WORK7,STGLEN(,WORK7)    NEXT STORAGE TABLE ENTRY.\n         CLI   STGDSECT,X'FF'      END OF TABLE?\n         BE    STGEXIT             B IF YES.\nSTGBUMP  DS    0H\n         LA    WORK5,$TPUTLEN(,WORK5)  NEXT OUTPUT LINE.\n         CLI   0(WORK5),C' '       TOP-OF-PAGE OR HEADER LINE?\n         BE    STGBUMP             YES, DO NOT USE IT FOR OUTPUT\n         B     STGLOOP             LOOP.\n         SPACE 3                                           11/30/87 MTW\nSTGEXIT  DS    0H                                          11/30/87 MTW\n         MODE AMODE=24\n         L     BALREG,SAVBAL         * LOAD BAL REG\n         BR    BALREG                * RETURN\n         EJECT ,                                           11/30/87 MTW\n*\n*              DATA RESOLUTION ROUTINES\n*\nNOPRES   BR    BALREG              NOOP RESOLUTION ROUTINE.\nPRES     L     R1,GDAPVTSZ         LOAD PRIVATE SIZE.\n         BCTR  R1,*-*              GENERATE TRUE END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         S     R1,STGSTART         GENERATE ...\n         LA    R1,1(,R1)           ... TRUE LENGTH.\n         ST    R1,STGSIZE          SAVE IN TABLE.\n         BR    BALREG              RETURN.\nEPRES    L     R1,GDAEPVT          LOAD START OF E-PRIVATE.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDAEPVTS         LOAD LENGTH OF E-PRIVATE\n         ST    R0,STGSIZE          SAVE IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... E-PRIVATE END ADDRESS.\n         ST    R1,STGEND           SAVE END ADDRESS IN TABLE.\n         BR    BALREG              RETURN.\nCRES     L     R1,GDACSA           LOAD START OF CSA.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDACSASZ         LOAD LENGTH OF CSA.\n         ST    R0,STGSIZE          SAVE IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... CSA END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         S     R0,GDACSARE         GENERATE BYTES USED.\n         ST    R0,STGFULL          SAVE IN TABLE.\n         BR    BALREG              RETURN.\nECRES    L     R1,GDAECSA          LOAD START OF E-CSA.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDAECSAS         LOAD LENGTH OF E-CSA.\n         ST    R0,STGSIZE          SAVE IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... E-CSA END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         BR    BALREG              RETURN.\nSRES     L     R1,GDASQA           LOAD START OF SQA.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDASQASZ         LOAD LENGTH OF SQA.\n         ST    R0,STGSIZE          SAVE IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... SQA END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         BR    BALREG              RETURN.\nESRES    L     R1,GDAESQA          LOAD START OF E-SQA.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDAESQAS         LOAD LENGTH OF E-SQA.\n         ST    R0,STGSIZE          SAVE IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... E-SQA END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         BR    BALREG              RETURN.\nNRORES   L     R0,CVTRONS          LOAD START OF NUC R/O AREA.\n         ST    R0,STGSTART         SAVE IN TABLE.\n         L     R1,STGEND           LOAD X'00FFFFFF'.\n         SR    R1,R0               GENERATE ...\n         LA    R1,1(,R1)           ... LENGTH.\n         ST    R1,STGSIZE          SAVE IT IN TABLE.\n         BR    BALREG              RETURN.\nENRORES  L     R0,STGSTART         LOAD X'01000000'.\n         L     R1,CVTRONE          LOAD END OF NUC R/O AREA.\n         O     R1,=A(X'00000FFF')  FORCE ALIGNMENT TO END OF PAGE.\n         ST    R1,STGEND           SAVE IN TABLE.\n         SR    R1,R0               GENERATE ...\n         LA    R1,1(,R1)           ... LENGTH.\n         ST    R1,STGSIZE          SAVE IN TABLE.\n         BR    BALREG              RETURN.\nVRRES    L     R1,GDAVR            LOAD START OF V=R AREA.\n         ST    R1,STGSTART         SAVE IN TABLE.\n         L     R0,GDAVRSZ          LOAD LENGTH OF V=R AREA.\n         ST    R0,STGSIZE          SAVE LENGTH IN TABLE.\n         AR    R1,R0               GENERATE ...\n         BCTR  R1,*-*              ... V=R END ADDRESS.\n         ST    R1,STGEND           SAVE IN TABLE.\n         BR    BALREG              RETURN.\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*    THE FOLLOWING IS A GENERAL DATA RESOLUTION ROUTINE FOR           *\n*        STARTING-ENDING ADDRESS PAIRS IN THE MVS/XA VIRTUAL STORAGE  *\n*        MAP EXTENSION.  THE TABLE CONTAINS THE ABSOLUTE DISPLACEMENT *\n*        IN THE CVT EXTENSION TO THE STARTING ADDRESS RATHER THAN     *\n*        THE STARTING ADDRESS ITSELF; THE ENDING ADDRESS IS           *\n*        PRESUMED TO FOLLOW IN THE CVT EXTENSION.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCXRES    L     R1,CVTSMEXT         POINT TO CVT STORAGE MAP EXTENSION.\n         A     R1,STGSTART         POINT TO THE STARTING ADDRESS.\n         ICM   R0,15,4(R1)         LOAD ENDING ADDRESS.\n         BNP   CXNA                B IF THIS AREA IS STGMISS.\n         L     R1,0(,R1)           LOAD STARTING ADDRESS.\n         ST    R1,STGSTART         SAVE IT IN TABLE.\n         O     R0,=A(X'00000FFF')  FORCE END OF PAGE ALIGNMENT TO ...\n*                                  ... ACCOUNT FOR WASTE AT CHANGE ...\n*                                  ... OF PROTECTION BOUNDARIES.\n         ST    R0,STGEND           SAVE ENDING ADDRESS IN TABLE.\n         SR    R0,R1               GENERATE ...\n         LR    R1,R0\n         LA    R1,1(,R1)           LENGTH.\n         ST    R1,STGSIZE          SAVE IN TABLE.\n         BR    BALREG              RETURN.\nCXNA     LNR   R1,R1               MAKE R1 NEGATIVE.\n         ST    R1,STGSTART         SAVE IN TABLE START POSITION.\n         BR    BALREG              RETURN.\n*\n         DROP  WORK6,WORK7\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* ------------ CONVERT ALL ADDRESSES TO EBCDIC                        *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$CONADR  DS    0H\n         ST    BALREG,SAVBAL         * STOR BAL REG\n         LA    WORK6,PARM-8          * LOAD 1ST PARMETER LIST\n         LA    WORK7,PARMLEN         * LENGTH OF PARM LIST\nPARMLOOP LA    WORK6,8(,WORK6)       * LOAD NEXT PARM INTO WORK6\n         LR    R1,WORK6              * PUT IT IN R1\n         BAL   WORK8,CONVADR         * CONVERT IT\n         BCT   WORK7,PARMLOOP        * CONTINUE UNTIL TRU\n         L     BALREG,SAVBAL         * LOAD BAL REG\n         BR    BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* CREATE STORAGE MAP USING 'CVT' OFFSETS                              *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$STORMAP DS    0H\n         ST    BALREG,SAVBAL         * LOAD BAL REG\n         MVC    MEPRIV(8),ADDR31\n         MVC    MPRIV(8),ADDR24\n         MVC    MLEN24(12),KREG24A+7\n         MVI    MLEN24+13,C'K'\n         MVC    MLEN31(12),KREG31A+7\n         MVI    MLEN31+13,C'K'\n         L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  WRITE SCREENS                                                      *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$TERMPUT DS     0H\n         ST     BALREG,SAVBAL\n         CLI    OPENFLG,X'FF'        * DDNAME ALLOCATED ?\n         BNE    TPUTS                * NOPE, DO TPUTS\n         LA     WORK6,ENDTPUT           * LENGTH OF TPUT AREAS\n         LA     WORK7,OUTSTOR-$TPUTLEN  * START OF TPUT LINES\nPUTLOOP  LA     WORK7,$TPUTLEN(,WORK7)  * POINT TO NEXT LINE\n         MVI    OUTREC-1,C' '        * TOP OF PAGE\n         CLC    0($TPUTLEN,WORK7),=80C' '\n         BNE    *+8\n         MVI    OUTREC-1,C'1'        * TOP OF PAGE\n         MVC    OUTREC($TPUTLEN),0(R7)\n         PUT    SYSOUT,OUTREC-1      * PUT RECORD\n         BCT    WORK6,PUTLOOP        * DO FOR 'ENDTPUT' TIMES\n         L      BALREG,SAVBAL\n         BR     BALREG               * FINE ....\n         SPACE\nTPUTS    LA     WORK6,ENDTPUT        * LENGTH OF TPUT AREAS\n         LA     WORK7,OUTSTOR-$TPUTLEN * START OF TPUT LINES\n         XR     WORK8,WORK8          * LINES PER PAGE\n         STTMPMD  ON                 * TAKE OVER SCREEN CONTROL     MTW\n         STFSMODE ON,INITIAL=YES     * START FULLSCR MODE  11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     TPUTVTAM             * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nTPUTVTAM STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\nTPUTLOOP LA     WORK7,$TPUTLEN(,WORK7)     * POINT TO NEXT\n         CLC    0($TPUTLEN,WORK7),=80C' '\n         BE     PUTENTER             * YEP, CLEAR AND RESET\n         A      WORK8,=F'1'          * ADD ONE TO LINE COUNT\n         C      WORK8,=F'22'         * IS LINE COUNT > 26\n         BL     PUTIT                * NOPE, CONTINUE\n*                                    * ISSUE 'HIT ENTER MESSAGE'\nPUTENTER MVI    HENTER,C' '          * DUMMY LINE\n         TPUT   HENTER,1             * DUMMY LINE\n         TPUT   HITENTER,L'HITENTER,ASIS\n         TGET   HENTER,1             * GET 1 CHAR\n         CLI    HENTER,X'40'         * GREATER THAN ' '\n         BNE    GOHOME\n         STFSMODE ON                 * RESUME FULLSCR MODE 11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     PUTVTAM              * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nPUTVTAM  STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\n         XR     WORK8,WORK8          * REINIT LINE COUNTER\n         A      WORK8,=F'1'          * ADD ONE\nPUTIT    TPUT   (7),$TPUTLEN         * WRITE TO TERMINAL\n         BCT    WORK6,TPUTLOOP\nGOHOME   L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* PUT SMFPRMnn PARMLIB INFORMATION FROM THE SMCA TABLE    11/30/87 MTW*\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$PUTSMF  DS     0H\n         ST     BALREG,SAVBAL         * LOAD BAL REG\n         CLI    OPENFLG,X'FF'         * DDNAME ALLOCATED ?\n         BNE    SMFTPUTS              * NOPE, DO TPUTS\n         LH     WORK6,SMFCOUNT        * NUMBER OF ENTRIES IN SMCA TABLE\n         L      WORK7,GETREG          * ADDRESS OF SMCA TABLE\n         S      WORK7,=F'60'          * START OF DATA AREA\n         MVI    OUTREC-1,C'1'\n         MVC    OUTREC($TPUTLEN),=80C' '\n         PUT    SYSOUT,OUTREC-1\n         MVI    OUTREC-1,C' '\n         MVC    OUTREC($TPUTLEN),SMFMSG0\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),SMFMSG1\n         PUT    SYSOUT,OUTREC-1\nPUTSMFL  LA     WORK7,60(,WORK7)     * POINT TO NEXT LINE\n         MVC    OUTREC(60),0(WORK7)\n         PUT    SYSOUT,OUTREC-1      * PUT RECORD\n         BCT    WORK6,PUTSMFL        * DO FOR 'SMFCOUNT' TIMES\n         B      SMFFMAIN             * ALL DONE\n*\nSMFTPUTS DS     0H\n*\n* \"HENTER\" IS FROM THE PREVIOUS SECTION\n*           IF IT IS NON-BLANK SKIP EVERYTHING\n*\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    SMFFMAIN              * YES, FREE THE SMCA TABLE\n         L      WORK7,GETREG          * ADDR OF SMCA TABLE\n         LH     WORK6,SMFCOUNT        * NUMBER OF ENTRIES IN SMCA TABLE\n         S      WORK7,=F'60'          * NEXT ENTRY\n$SMFHDR  DS     0H\n         STFSMODE ON                 * RESUME FULLSCR MODE 11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     SMFVTAM              * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nSMFVTAM  STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\n         TPUT   SMFMSG0,$TPUTLEN      * SMF HEADER\n         TPUT   SMFMSG1,$TPUTLEN      * SMF HEADER\n         LA     WORK5,2               * TWO HEADER LINES\nTPUTSMFL A      WORK7,=F'60'          * NEXT ENTRY\n         TPUT   (7),60                *\n         C      WORK6,=F'1'           * LAST SMCA TABLE ENTRY?\n         BNH    SMFENTER              * YES, PROMPT FOR AN ENTER\n         A      WORK5,=F'1'           *\n         C      WORK5,=F'19'          * LINES PER PAGE\n         BNH    NOSMFHDR              *\nSMFENTER DS     0H\n         MVI    HENTER,C' '\n         TPUT   HENTER,1              * DUMMY LINE\n         TPUT   HITENTER,L'HITENTER,ASIS\n         TGET   HENTER,1              * GET 1 CHAR\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    SMFFMAIN\n         BCT    WORK6,$SMFHDR         * DO FOR 'SMFCOUNT' TIMES\n         B      SMFFMAIN\n         SPACE  1\nNOSMFHDR DS     0H\n         BCT    WORK6,TPUTSMFL        * DO FOR 'SMFCOUNT' TIMES\nSMFFMAIN L      R0,GETSIZE\n         FREEMAIN R,LV=(0),A=GETREG,RELATED=(SMFGMAIN)\n$ENDSMFP L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* LOAD \"CVTLLTA\" ADDRESS AND CREATE A LINK LIST DATA SET NAMES TABLE  *\n*                                                         11/30/87 MTW*\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETLLT  DS     0H\n         ST     BALREG,SAVBAL         * LOAD BAL REG\n         CLI    OPENFLG,X'FF'         * DDNAME ALLOCATED ?\n         BE     LLTGMAIN              * YES, NO ENTER CHECK\n*\n* \"HENTER\" IS FROM THE PREVIOUS SECTION\n*           IF IT IS NON-BLANK SKIP EVERYTHING\n*\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    $ENDLLT\nLLTGMAIN DS     0H\n         L      WORK6,CVTLLTA         * POINT TO LINK LIST TABLE\n         L      WORK7,4(,WORK6)       * NUM. OF LINK LIST TABLE ENTRIES\n         STH    WORK7,DSNCOUNT        * SAVE AS # DSN TABLE ENTRIES\n         LR     R0,WORK7              * COMPUTE SIZE OF THE\n         MH     R0,=H'60'             * ENTIRE DSN TABLE\n         ST     R0,GETSIZE            * SAVE DSN TABLE SIZE\n         GETMAIN R,LV=(0),RELATED=(LLTFMAIN)\n         ST     R1,GETREG             * SAVE DSN TABLE ADDRESS\n         A      WORK6,=F'8'           * POINT TO 1ST LLT TABLE ENTRY\n         LR     WORK5,R1              * POINT TO 1ST DSN TABLE ENTRY\n         S      WORK5,=F'60'          * BACK UP ONE DSN TABLE ENTRY\nLLTLOOP1 A      WORK5,=F'60'          * NEXT DSN TABLE ENTRY\n         XC     0(60,WORK5),0(WORK5)  * CLEAR TO ZEROS\n         XR     WORK8,WORK8           * CLEAR WORK\n         IC     WORK8,0(,R6)          * LENGTH OF LLT ENTRY UNSIG/UNPCK\n         A      WORK6,=F'1'           * BUMP PAST LENGTH BYTE\n         S      WORK8,=F'1'           * FOR EXEC INSTR.\n         MVC    0(*-*,WORK5),0(WORK6) * MOVE DATA SET NAME\n         EX     WORK8,*-6             * DO IT...\n         MVC    DSNAME(44),=44C' '    * CLEAR DSNAME\n         MVC    DSNAME(*-*),0(WORK5)  * SAVE DSNAME\n         EX     WORK8,*-6             * DO IT...\n         TR     0(47,WORK5),TRANSL    * TRANSLATE '.' FOR X'00'\n         MVI    TRANSL,C' '           * NOW @ X'00' C' '\n         TR     47(13,WORK5),TRANSL\n         MVI    TRANSL,C'.'           * NOW @ X'00' C'.'\n         A      WORK8,=F'1'           * RELOAD GOOD LENGTH\n         A      WORK6,=F'44'          * NEXT LLT TABLE ENTRY\n         SPACE  1\n         LOCATE FINDSN                * IS IT CATALOGED\n         LTR    R15,R15               * TEST IT\n         BNZ    LLTNOCAT              * NOPE, SAY SO\n         MVI    51(WORK5),C'Y'        * YEP, SAY SO\n         MVC    53(6,WORK5),DSNVOL    * SAVE VOL CATALOGED ON\n         B      *+8                   *\nLLTNOCAT MVI    51(WORK5),C'N'        *\n         BCT    WORK7,LLTLOOP1        * DO IT\n         SPACE  1\n         LH     WORK7,DSNCOUNT        * NUMBER OF ENTRIES IN DSN TABLE\n         L      WORK5,GETREG          * ADDRESS OF DSN TABLE\n         S      WORK5,=F'60'          * BACK UP ONE DSN TABLE ENTRY\nLLTLOOP2 A      WORK5,=F'60'          * NEXT DSN TABLE ENTRY\n         TM     0(R6),X'80'           * IS THE LLT ENTRY APF AUTHORIZED\n         BZ     LLTNOAPF              * NOPE, SAY SO\n         MVI    48(WORK5),C'Y'        * YEP, SAY SO\n         B      *+8                   *\nLLTNOAPF MVI    48(WORK5),C'N'        *\n         A      WORK6,=F'1'           * NEXT LLT APF ENTRY\n         BCT    WORK7,LLTLOOP2        * DO IT\n         SPACE  1\n$ENDLLT  L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         SPACE  3\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* PUT INFORMATION FROM THE LINK LIST DATA SET NAMES TABLE 11/30/87 MTW*\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$PUTLLT  DS     0H\n         ST     BALREG,SAVBAL         * LOAD BAL REG\n         CLI    OPENFLG,X'FF'         * DDNAME ALLOCATED ?\n         BNE    LLTTPUTS              * NOPE, DO TPUTS\n         LH     WORK6,DSNCOUNT        * NUMBER OF ENTRIES IN DSN TABLE\n         L      WORK7,GETREG          * ADDRESS OF DSN TABLE\n         S      WORK7,=F'60'          * START OF DATA AREA\n         MVI    OUTREC-1,C'1'\n         MVC    OUTREC($TPUTLEN),=80C' '\n         PUT    SYSOUT,OUTREC-1\n         MVI    OUTREC-1,C' '\n         MVC    OUTREC($TPUTLEN),LLTMSG0\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),LLTMSG2\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),LLTMSG4\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),LLTMSG5\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),LLTMSG6\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),LLTMSG7\n         PUT    SYSOUT,OUTREC-1\nPUTLLTL  LA     WORK7,60(,WORK7)  * POINT TO NEXT LINE\n         MVC    OUTREC(60),0(WORK7)\n         PUT    SYSOUT,OUTREC-1      * PUT RECORD\n         BCT    WORK6,PUTLLTL        * DO FOR 'DSNCOUNT' TIMES\n         B      LLTFMAIN             * ALL DONE\n*\nLLTTPUTS DS     0H\n*\n* \"HENTER\" IS FROM THE PREVIOUS SECTION\n*           IF IT IS NON-BLANK SKIP EVERYTHING\n*\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    $ENDLLTP\n         L      WORK7,GETREG          * ADDR OF DSN TABLE\n         LH     WORK6,DSNCOUNT        * NUMBER OF ENTRIES IN DSN TABLE\n         CVD    WORK6,DWORD           * CONVERT TO DECIMAL\n         ED     LLTENTS(4),DWORD+6    * EDIT RESULTS\n         S      WORK7,=F'60'          * NEXT ENTRY\n$LLTHDR  DS     0H\n         STFSMODE ON                 * RESUME FULLSCR MODE 11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     LLTVTAM              * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nLLTVTAM  STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\n         TPUT   LLTMSG0,$TPUTLEN      * LLT HEADER\n         TPUT   LLTMSG1,$TPUTLEN      * LLT HEADER\n         LA     WORK5,6               * SIX HEADER LINES\n         CH     WORK6,DSNCOUNT        * FIRST TIME THROUGH?\n         BL     $LLTSKIP              * NO, SKIP MSG2\n         LA     WORK5,7               * SEVEN HEADER LINES\n         TPUT   LLTMSG2,$TPUTLEN      * LLT HEADER\n$LLTSKIP DS     0H\n         TPUT   LLTMSG4,$TPUTLEN      * LLT HEADER\n         TPUT   LLTMSG5,$TPUTLEN      * LLT HEADER\n         TPUT   LLTMSG6,$TPUTLEN      * LLT HEADER\n         TPUT   LLTMSG7,$TPUTLEN      * LLT HEADER\nTPUTLLTL A      WORK7,=F'60'          * NEXT ENTRY\n         TPUT   (7),60                *\n         C      WORK6,=F'1'           * LAST DSN TABLE ENTRY?\n         BNH    LLTENTER              * YES, PROMPT FOR AN ENTER\n         A      WORK5,=F'1'           *\n         C      WORK5,=F'19'          * LINES PER PAGE\n         BNH    NOLLTHDR              *\nLLTENTER DS     0H\n         MVI    HENTER,C' '\n         TPUT   HENTER,1              * DUMMY LINE\n         TPUT   HITENTER,L'HITENTER,ASIS\n         TGET   HENTER,1              * GET 1 CHAR\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    LLTFMAIN\n         BCT    WORK6,$LLTHDR         * DO FOR 'DSNCOUNT' TIMES\n         B      LLTFMAIN\n         SPACE  1\nNOLLTHDR DS     0H\n         BCT    WORK6,TPUTLLTL        * DO FOR 'DSNCOUNT' TIMES\nLLTFMAIN L      R0,GETSIZE\n         FREEMAIN R,LV=(0),A=GETREG,RELATED=(LLTGMAIN)\n$ENDLLTP L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* LOAD \"CVTAUTHL\" ADDRESS AND CREATE A TABLE OF ALL APF DATA SET NAMES*\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETAPF  DS     0H\n         ST     BALREG,SAVBAL         * LOAD BAL REG       11/30/87 MTW\n         CLI    OPENFLG,X'FF'         * DDNAME ALLOCATED ? 11/30/87 MTW\n         BE     APFGMAIN              * YES, NO ENTER CHECK11/30/87 MTW\n*\n* \"HENTER\" IS FROM THE PREVIOUS SECTION\n*           IF IT IS NON-BLANK SKIP EVERYTHING\n*\n         CLI    HENTER,X'40'          * GREATER THAN ' '\n         BNE    $ENDAPF\nAPFGMAIN DS     0H                                         11/30/87 MTW\n         L      WORK6,CVTAUTHL        * POINT TO APF TABLE 11/30/87 MTW\n         LH     WORK7,0(,WORK6)       * # APF TABLE ENTRIES11/30/87 MTW\n         STH    WORK7,DSNCOUNT        * SAVE AS # DSN TABLE ENTRIES MTW\n         LR     R0,WORK7              * COMPUTE SIZE OF    11/30/87 MTW\n         MH     R0,=H'60'             * ENTIRE DSN TABLE   11/30/87 MTW\n         ST     R0,GETSIZE            * SAVE DSN TABLE SIZE11/30/87 MTW\n         GETMAIN R,LV=(0),RELATED=(APFFMAIN)               11/30/87 MTW\n         ST     R1,GETREG             * SAVE DSN TABLE ADDR11/30/87 MTW\n         A      WORK6,=F'2'           * POINT TO 1ST APF TABLE ENTRYMTW\n         LR     WORK5,R1              * POINT TO 1ST DSN TABLE ENTRYMTW\n         S      WORK5,=F'60'          * BACK UP ONE DSN TABLE ENTRY MTW\nAPFLOOP  A      WORK5,=F'60'          * NEXT DSN TABLE ENTRY        MTW\n         XC     0(60,WORK5),0(WORK5)  * CLEAR TO ZEROS     11/30/87 MTW\n         XR     WORK8,WORK8           * CLEAR WORK         11/30/87 MTW\n         IC     WORK8,0(,R6)          * LENGTH OF APF ENTRY UNSIG/UNPCK\n         A      WORK6,=F'1'           * BUMP PAST LENGTH BYTE       MTW\n         S      WORK8,=F'7'           * FOR EXEC INSTR.\n         MVC    0(*-*,WORK5),6(WORK6) * MOVE DSN: 6 PAST VOLSER\n         EX     WORK8,*-6             * DO IT...\n         MVC    DSNAME(44),=44C' '    * CLEAR DSNAME\n         MVC    DSNAME(*-*),0(WORK5)  * SAVE DSNAME\n         EX     WORK8,*-6             * DO IT...\n         TR     0(45,WORK5),TRANSL    * TRANSLATE '.' FOR X'00'     MTW\n         MVI    TRANSL,C' '          * NOW @ X'00' C' '\n         TR     45(15,WORK5),TRANSL\n         MVI    TRANSL,C'.'          * NOW @ X'00' C'.'\n         A      WORK8,=F'7'           * RELOAD GOOD LENGTH\n         MVC    44(6,WORK5),0(WORK6)  * LOAD VOLSER\n         AR     WORK6,WORK8           * NEXT APF TABLE ENTRY\n         SPACE  1                                          11/30/87 MTW\n         LOCATE FINDSN                * IS IT CATALOGED\n         LTR    R15,R15               * TEST IT\n         BNZ    APFNOCAT              * NOPE, SAY SO       11/30/87 MTW\n         MVI    51(WORK5),C'Y'        * YEP, SAY SO\n         MVC    53(6,WORK5),DSNVOL    * SAVE VOL CATALOGED ON\n         B      *+8                   *\nAPFNOCAT MVI    51(WORK5),C'N'                             11/30/87 MTW\n         BCT    WORK7,APFLOOP         * DO IT\n         SPACE  1                                          11/30/87 MTW\n$ENDAPF  L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         SPACE  3                                          11/30/87 MTW\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* PUT INFORMATION FROM THE APF TABLE                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$PUTAPF  DS     0H\n         ST     BALREG,SAVBAL         * LOAD BAL REG\n         CLI    OPENFLG,X'FF'        * DDNAME ALLOCATED ?\n         BNE    APFTPUTS              * NOPE, DO TPUTS\n         LH     WORK6,DSNCOUNT        * NUMBER OF ENTRIES IN DSN TABLE\n         L      WORK7,GETREG          * ADDRESS OF DSN TABLE\n         S      WORK7,=F'60'          * START OF DATA AREA\n         MVI    OUTREC-1,C'1'\n         MVC    OUTREC($TPUTLEN),=80C' '\n         PUT    SYSOUT,OUTREC-1\n         MVI    OUTREC-1,C' '\n         MVC    OUTREC($TPUTLEN),APFMSG0\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG2\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG3\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG4\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG5\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG6\n         PUT    SYSOUT,OUTREC-1\n         MVC    OUTREC($TPUTLEN),APFMSG7\n         PUT    SYSOUT,OUTREC-1\nPUTAPFL  LA     WORK7,60(,WORK7)  * POINT TO NEXT LINE\n         MVC    OUTREC(60),0(WORK7)\n         PUT    SYSOUT,OUTREC-1      * PUT RECORD\n         BCT    WORK6,PUTAPFL        * DO FOR 'DSNCOUNT' TIMES\n         B      APFFMAIN             * ALL DONE            11/30/87 MTW\n*\nAPFTPUTS DS     0H                                         11/30/87 MTW\n*                                                          11/30/87 MTW\n* \"HENTER\" IS FROM THE PREVIOUS SECTION                    11/30/87 MTW\n*           IF IT IS NON-BLANK SKIP EVERYTHING             11/30/87 MTW\n*                                                          11/30/87 MTW\n         CLI    HENTER,X'40'          * GREATER THAN ' '   11/30/87 MTW\n         BNE    $ENDAPFP                                   11/30/87 MTW\n         L      WORK7,GETREG          * ADDR DSN TABLE     11/30/87 MTW\n         LH     WORK6,DSNCOUNT        * NUMBER OF ENTRIES IN DSN TABLE\n         CVD    WORK6,DWORD           * CONVERT TO DECIMAL\n         ED     APFENTS(4),DWORD+6    * EDIT RESULTS       11/30/87 MTW\n         S      WORK7,=F'60'          * NEXT ENTRY\n$APFHDR  DS     0H                                         11/30/87 MTW\n         STFSMODE ON                 * RESUME FULLSCR MODE 11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     APFVTAM              * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nAPFVTAM  STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\n         TPUT   APFMSG0,$TPUTLEN      * APF HEADER\n         TPUT   APFMSG1,$TPUTLEN      * APF HEADER\n         LA     WORK5,6               * SIX HEADER LINES   11/30/87 MTW\n         CH     WORK6,DSNCOUNT        * FIRST TIME THROUGH?11/30/87 MTW\n         BL     $APFSKIP              * NO, SKIP MSG2 & 3  11/30/87 MTW\n         LA     WORK5,8               * EIGHT HEADER LINES 11/30/87 MTW\n         TPUT   APFMSG2,$TPUTLEN      * APF HEADER\n         TPUT   APFMSG3,$TPUTLEN      * APF HEADER\n$APFSKIP DS     0H                                         11/30/87 MTW\n         TPUT   APFMSG4,$TPUTLEN      * APF HEADER\n         TPUT   APFMSG5,$TPUTLEN      * APF HEADER\n         TPUT   APFMSG6,$TPUTLEN      * APF HEADER\n         TPUT   APFMSG7,$TPUTLEN      * APF HEADER\nTPUTAPFL A      WORK7,=F'60'          * NEXT ENTRY         11/30/87 MTW\n         TPUT   (7),60                *\n         C      WORK6,=F'1'           * LAST DSN TABLE ENTRY?       MTW\n         BNH    APFENTER              * YES, PROMPT FOR AN ENTER    MTW\n         A      WORK5,=F'1'           *\n         C      WORK5,=F'19'          * LINES PER PAGE\n         BNH    NOAPFHDR              *                    11/30/87 MTW\nAPFENTER DS     0H                                         11/30/87 MTW\n         MVI    HENTER,C' '                                11/30/87 MTW\n         TPUT   HENTER,1              * DUMMY LINE         11/30/87 MTW\n         TPUT   HITENTER,L'HITENTER,ASIS                   11/30/87 MTW\n         TGET   HENTER,1              * GET 1 CHAR         11/30/87 MTW\n         CLI    HENTER,X'40'          * GREATER THAN ' '   11/30/87 MTW\n         BNE    APFFMAIN                                   11/30/87 MTW\n         BCT    WORK6,$APFHDR         * DO FOR 'DSNCOUNT' TIMES     MTW\n         B      APFFMAIN                                   11/30/87 MTW\n         SPACE  1                                          11/30/87 MTW\nNOAPFHDR DS     0H                                         11/30/87 MTW\n         BCT    WORK6,TPUTAPFL        * DO FOR 'DSNCOUNT' TIMES     MTW\nAPFFMAIN L      R0,GETSIZE                                 11/30/87 MTW\n         FREEMAIN R,LV=(0),A=GETREG,RELATED=(APFGMAIN)     11/30/87 MTW\n$ENDAPFP L      BALREG,SAVBAL         * LOAD BAL REG\n         BR     BALREG                * RETURN\n         SPACE  3                                          11/30/87 MTW\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* THAT'S ALL FOLKS                                                    *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$FINISH  CLI    OPENFLG,X'FF'        * DDNAME ALLOCATED ?\n         BNE    NOCLOSE              * NOPE, CONTINUE      11/30/87 MTW\n         CLOSE  (SYSOUT)             * YEP, CLOSE FILE\n         B      CLEAR15                                    11/30/87 MTW\nNOCLOSE  DS     0H                                         11/30/87 MTW\n         STFSMODE ON                 * RESUME FULLSCR MODE 11/30/87 MTW\n         LTR    R15,R15              * TCAM?               11/30/87 MTW\n         BZ     FINIVTAM             * NOPE, GOT TO BE VTAM11/30/87 MTW\n         TPUT   CLEAR,CLEARLEN,FULLSCR,WAIT,HOLD * CLEAR THE SCREEN MTW\nFINIVTAM STLINENO LINE=1,MODE=OFF    * SET POINTER TO LINE ONE      MTW\n         STFSMODE OFF                * EXIT FULLSCR MODE   11/30/87 MTW\n         STTMPMD  OFF                * RELEASE SCREEN CONTROL       MTW\nCLEAR15  DS     0H                                         11/30/87 MTW\n         SR     R15,R15              *  ZERO RETURN REGISTER\n         DROP   R2,R3,R4\n         L      R13,SAVE+4           * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)          * RETURN ADDRESS\n         LM     R0,R12,20(R13)       * REST OF THE REGS\n         BR     R14                  * RETURN\n TITLE '--> CONVADR: CONVERT  XL8  TO  CL8 - EBCDIC'\n*------------------- CONVERT ADDRESS TO EBCDIC ----------------------*\nCONVADR  DS     0H                                                   *\n*                                                                    *\n*   SUBROUTINE TO CONVERT A HEXIDECIMAL NUMBER TO CHARACTER FORMAT   *\n*   AND PLACE RESULT IN THE AREA SPECIFIED BY THE SECOND PARAMETER.  *\n*                                                                    *\n*          EXAMPLE  LA    1,PARMLIST                                 *\n*                   BAL   R8,CONVADR                                 *\n*                   .....                                            *\n*          PARMLIST DC    A(VALUE)                                   *\n*                   DC    A(RETRUN)                                  *\n*          VALUE    DC    F'0'                                       *\n*          RETURN   DC   CL8' '                                      *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1                                           11/30/87 MTW\n         LR    R0,R1               * SAVE PARMLIST ADDRESS\n         L     R1,0(,R1)           * ADDRESS OF VALUE TO BE CONVERTED\n         BAL   BALREG,HEXOUT       * CALL CONVERSION ROUTINE\n         LR    R1,R0               * RESTORE PARMLIST ADDRESS\n         L     R1,4(,R1)           * ADDRESS WHERE OUTPUT\n         MVC   0(8,R1),HEXWORK             IS TO BE PLACED\n         LR    R1,R0               * RESTORE PARMLIST ADDRESS\n*\n         BR    WORK8              RETURN TO CALLER\n*-------------------- END OF CONVADR ROUTINE ------------------------*\n         SPACE 3                                           11/30/87 MTW\n*----------------- CONVERT HEXIDECIMAL TO EBCDIC --------------------*\nHEXOUT   DS    0H                                                    *\n*                                                                    *\n*        SUBROUTINE TO GENERATE CHARACTER CODED HEXADECIMAL          *\n*        FOR OUTPUT.  R1 POINTS TO THE FULLWORD TO BE TRANSLATED.    *\n*        FIND OUTPUT CHARACTER RESULT IN DOUBLEWORD \"HEXWORK.\"       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         SPACE 1\n         MVC   HEXWORK(4),0(R1)    MAKE A WORK COPY OF THE INPUT VALUE\n         UNPK  HEXWORK(9),HEXWORK(5)   TRANSLATE\n         TR    HEXWORK,HEXTRTBL-X'F0'      TO EBCDIC\n         BR    BALREG              RETURN TO CALLER.\n         SPACE 1\nHEXWORK  DS    D                   HEXOUT RESULT\n         DS    X                   HEXOUT WORK AREA\nHEXTRTBL DC    C'0123456789ABCDEF' TRANSLATE TO PRINTABLE HEX.\n*-------------------- END OF HEXOUT ROUTINE -------------------------*\n TITLE '--> CONVCVD: CONVERT  DECIMAL  TO  CL19  EBCDIC NUMERIC '\n*---------------------------------------------------------------------*\nCONVCVD  DS    0H                                                     *\n*                                                                     *\n*        SUBROUTINE TO CONVERT A HEXIDECIMAL NUMBER TO DECIMAL        *\n*        AND PLACE THE RESULT IN THE AREA SPECIFIED BY THE            *\n*        SECOND PARAMETER.                                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         STM   R14,R12,12(R13)    * SAVE CALLERS REGISTERS\n         L     R2,0(,R1)          * ADDRESS OF VALUE TO BE CONVERTED\n         L     R2,0(,R2)          * VALUE TO BE CONVERTED\n         L     R3,4(,R1)          * ADDRESS WHERE OUTPUT IS TO BE\n         CVD   R2,DWORD           * CONVERT TO DECIMAL\n         MVC   TEMPAREA,EDITMASK  * MOVE MASK TO TEMPORARY AREA\n         ED    TEMPAREA,DWORD     * EDIT TO INSERT COMMAS AND REMOVE\n*                                 * LEADING ZEROS\n         MVC   0(L'TEMPAREA,R3),TEMPAREA  * MOVE TO OUTPUT AREA\n         LM    R14,R12,12(R13)    * RESTORE CALLERS REGISTERS\n         BR    WORK6              * RETURN TO CALLER\nEDITMASK DC    X'402020202020206B2020206B2020206B202020' EDIT MASK\nTEMPAREA DC    CL19' '            TEMPORARY AREA FOR EDIT OF VALUE\n*------- END OF CONVCVD ----------------------------------------------*\n TITLE '--> SYSTEM STORAGE DISPLAY DATA AREAS'             11/30/87 MTW\n*                                                          11/30/87 MTW\n*              ADDRESS CONVERSION ROUTINE PARAMETER LISTS  11/30/87 MTW\n*                                                          11/30/87 MTW\n*                 SEND       RECEIVE\n*                ADDRESS     ADDRESS\nPARM     EQU   *\n         DC    A(ADDRAB),A(ADDR31)                         11/30/87 MTW\n         DC    A(#DAECSA),A(MECSA)                         11/30/87 MTW\n         DC    A(#VTEMLPS),A(MEMLPA)                       11/30/87 MTW\n         DC    A(#VTEFLPS),A(MEFLPA)                       11/30/87 MTW\n         DC    A(#VTEPLPS),A(MEPLPA)                       11/30/87 MTW\n         DC    A(#DAESQA),A(MESQA)                         11/30/87 MTW\n         DC    A(#VTERWNS),A(MERWNUC)                      11/30/87 MTW\n         DC    A(#VTERONS),A(MERONUC)                      11/30/87 MTW\n         DC    A(#VTRONS),A(MRONUC)                        11/30/87 MTW\n         DC    A(#VTRWNS),A(MRWNUC)                        11/30/87 MTW\n         DC    A(#DASQA),A(MSQA)                           11/30/87 MTW\n         DC    A(#VTPLPAS),A(MPLPA)                        11/30/87 MTW\n         DC    A(#VTFLPAS),A(MFLPA)                        11/30/87 MTW\n         DC    A(#VTMLPAS),A(MMLPA)                        11/30/87 MTW\n         DC    A(#VTSHRVM),A(MCSA)                         11/30/87 MTW\n         DC    A(ADDRBL),A(ADDR24)                         11/30/87 MTW\n         DC    A(#ASVT),A(#ASVTADR)\n         DC    A(#JESCT),A(#JES2ADR)\n*        DC    A(#LLA),A(#LLADDR)                          11/30/87 MTW\n         DC    A(#USR),A(#CVTUSER)\n         DC    A(#APF),A(#APFTBL)\n         DC    A(#PSA),A(#PSADDR)\n         DC    A(#RMF),A(#RMFCOL)\n*        DC    A(#APF1),A(#APFTBL1)                        11/30/87 MTW\n         DC    A(#APF2),A(#APFTBL2)\n         DC    A(#RAC),A(#RACF)\n         DC    A(#HSM),A(#DFHSM)\n         DC    A(#VIRT),A(#VIRTFET)\n         DC    A(#GRS),A(#GRSADDR)\n         DC    A(#ATCVT),A(#VTAMADR)                       11/30/87 MTW\n         DC    A(#VTDOFFS),A(#DATOFF)                      11/30/87 MTW\nPARMLEN  EQU   (*-PARM)/8\n         SPACE 3                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n* REAL AND PRIVATE AREA SIZE CONVERSION ROUTINE PARAMETER LISTS     MTW\n*                                                          11/30/87 MTW\n*                SEND     RECEIVE\n*               ADDRESS   ADDRESS\nPARMLST1 DC    A(LENBL),A(REGLGBL)\nPARMLST2 DC    A(LENAB),A(REGLGAB)\nPARMLST3 DC    A(KREG24),A(KREG24A)\nPARMLST4 DC    A(MREG24),A(MREG24A)\nPARMLST5 DC    A(KREG31),A(KREG31A)\nPARMLST6 DC    A(MREG31),A(MREG31A)\nPARMLST7 DC    A(#VTRLSTB),A(BREAL)                        11/30/87 MTW\nPARMLST8 DC    A(#VTRLSTK),A(KREAL)                        11/30/87 MTW\nPARMLST9 DC    A(#VTRLSTM),A(MREAL)                        11/30/87 MTW\n         SPACE 3                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n*        STORAGE FOR RESULTS OF \"VSMREGN\" MACRO            11/30/87 MTW\n*                                                          11/30/87 MTW\nREGN     DS    0F                 WORKAREA FOR VSREGN MACRO\nADDRBL   DC    F'0'               ADDRESS OF REGION BELOW 16M\nLENBL    DC    F'0'               LENGTH OF REGION BELOW 16M\nADDRAB   DC    F'0'               ADDRESS OF REGION ABOVE 16M\nLENAB    DC    F'0'               LENGTH OF REGION ABOVE 16M\nKREG24   DC    F'0'\nMREG24   DC    F'0'\nKREG31   DC    F'0'\nMREG31   DC    F'0'\n         SPACE 3                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n*        STORAGE FOR RESULTS OF LOADING CVT ADDRESSES      11/30/87 MTW\n*                                                          11/30/87 MTW\n#VTRLSTB DC    F'0'               REAL STORAGE SIZE IN BYTES        MTW\n#VTRLSTK DC    F'0'               REAL STORAGE SIZE IN K (1024 BYTES)\n#VTRLSTM DC    F'0'               REAL STORAGE SIZE IN MEGS (1024K) MTW\n#ASVT    DC    F'0'\n#JESCT   DC    F'0'\n*#LLA    DC    F'0'                                        11/30/87 MTW\n#USR     DC    F'0'\n#APF     DC    F'0'\n#PSA     DC    F'0'\n#RMF     DC    F'0'\n*#APF1   DC    F'0'                                        11/30/87 MTW\n#APF2    DC    F'0'\n#RAC     DC    F'0'\n#HSM     DC    F'0'\n#VIRT    DC    F'0'\n#GRS     DC    F'0'\n#ATCVT   DC    F'0'               VTAM CVT                 11/30/87 MTW\n#VTDOFFS DC    F'0'               DAT-OFF NUCLEUS (REAL ADDRESS)    MTW\n         EJECT ,                                           11/30/87 MTW\n***********************************************************11/30/87 MTW\n*                                                                     *\n*    THE FOLLOWING IS A TABLE OF STORAGE AREAS TO MAP.  THE INITIAL   *\n*        TWELVE BYTES OF EACH ENTRY DOES NOT ASSEMBLE, BUT DOCUMENTS  *\n*        THE TITLE OF THE AREA.  THE FIRST WORD IS THE START ADDRESS, *\n*        THE SECOND IS AREA SIZE, THE THIRD IS THE END ADDRESS,       *\n*        THE FOURTH IS THE NUMBER OF BYTES ACTUALLY USED WITHIN       *\n*        THE AREA (ZERO FOR EVERYTHING BUT BELOW THE LINE CSA),       *\n*        AND THE LAST WORD IS THE DATA RESOLUTION ROUTINE ADDRESS.    *\n*        IN THE SPECIAL CASE OF THE CXRES ROUTINE, THE START ADDRESS  *\n*        IS REPLACED BY THE ABSOLUTE DISPLACEMENT TO THE AREA START   *\n*        ADDRESS POINTER CONTAINED IN THE MVS/XA VIRTUAL STORAGE      *\n*        MAP EXTENSION TO THE CVT.                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTGDSECT DSECT                     TABLE ENTRY MAPPING DSECT.\nSTGTITLE DS    0CL12               TABLE ENTRY TITLE.\nSTGSTART DS    A                   START ADDRESS OF ENTRY'S AREA.\nSTGSIZE  DS    A                   SIZE OF ENTRY'S AREA.\nSTGEND   DS    A                   END ADDRESS OF ENTRY'S AREA.\nSTGFULL  DS    A                   NUMBER OF BYTES USED.\nSTGRES   DS    A                   ADDRESS OF RESOLUTION ROUTINE.\nSTGLEN   EQU   *-STGDSECT          LENGTH OF TABLE ENTRY.\n         SPACE 1\nSYSTAT   CSECT ,                   RESUME SYSTAT DSECT\n         SPACE 1\nSTGTABLE DS    0A                  START OF TABLE OF AREAS.\n#DAEPVT  DC    0CL12'E-PRIVATE',A(0),A(0),A(0),A(0),A(EPRES)\n#DAECSA  DC    0CL12'E-CSA',A(0),A(0),A(0),A(0),A(ECRES)\n#VTEMLPS DC    0CL12'E-MLPA'\n         DC    A(CVTEMLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTEFLPS DC    0CL12'E-FLPA'\n         DC    A(CVTEFLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTEPLPS DC    0CL12'E-PLPA'\n         DC    A(CVTEPLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#DAESQA  DC    0CL12'E-SQA',A(0),A(0),A(0),A(0),A(ESRES)\n#VTERWNS DC    0CL12'E-NUC (R/W)'\n         DC    A(CVTERWNS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTERONS DC    0CL12'E-NUC (R/O)',X'01000000',A(0),A(0),A(0),A(ENRORES)\n#VTRONS  DC    0CL12'NUC (R/O)',A(0),A(0),X'00FFFFFF',A(0),A(NRORES)\n#VTRWNS  DC    0CL12'NUC (R/W)'\n         DC    A(CVTRWNS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#DASQA   DC    0CL12'SQA',A(0),A(0),A(0),A(0),A(SRES)\n#VTPLPAS DC    0CL12'PLPA',A(CVTPLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTFLPAS DC    0CL12'FLPA',A(CVTFLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTMLPAS DC    0CL12'MLPA',A(CVTMLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)\n#VTSHRVM DC    0CL12'CSA',A(0),A(0),A(0),A(0),A(CRES)\n#DAPVT   DC    0CL12'PRIVATE',A(0),A(0),A(0),A(0),A(PRES)\n#VTREAL  DC    0CL12'V=R (IF ANY)',A(0),A(0),A(0),A(0),A(VRRES)\n         DC    0CL12'PSA',A(0),A(4096),A(4095),A(0),A(NOPRES)\n         DC    0CL12'END OF TABLE',X'FF'\n TITLE '--> STORAGE FOR ALL TPUTS: USING ORG STATEMENTS'\n         SPACE\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*  NOTE: LENGTH OF ALL 'TPUTS' ARE DETERMINED BY THE FOLLOWING      *\n*        EQUATE ...                                                 *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$TPUTLEN EQU   60                           * LENGTH OF TPUT'S\nCENTERA  EQU   $TPUTLEN/4                   * STRT\nCENTERL  EQU   ($TPUTLEN-($TPUTLEN/4))      * MAX LENGTH OF CENTERED\n         SPACE\n  TITLE '--> I P L   ADDRESS CONSTANTS'\nOUTSTOR  DS    0H\n         DC    CL($TPUTLEN)' '\n      ORG   *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- - - IPL INFORMATION - - -'\n      ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'SYSTEM ID = '\nSYSID    DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'-'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C' SYSRES UNIT SUBCH DEV# VTOC_TTR PAGE SHARE  USERS CHPX\n               IDS '                                       11/30/87 MTW\n         ORG\n*                         1         2         3         4         5\n*                12345678901234567890123456789012345678901234567890\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C' '\nSYSRES   DC    CL7' '          2-8\nUNITADR  DC    CL3' '             9-11\nSUBCHAN  DC    XL6'402020212020'      12-17                11/30/87 MTW\nDEVNO    DC    XL6'402020212020'           18-23           11/30/87 MTW\n         DC    C' '                             24         11/30/87 MTW\nTTR0     DC    CL10' '                            25-34\nPAGEDEV  DC    CL5'NO'                                 35-39\nSHARE    DC    CL4'NO'                                      40-43\nUSERS    DC    XL6'402020202021'                                 44-49\nCHPIDS   DC    2CL4' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'-'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'CLPA      = '\nCLPA     DC    C'N'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n     ORG   *-$TPUTLEN\n         DC    C'NUC ID    = '\n         DC    C'IEANUC0'\n#NUCID   DC    C' '\n     ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'ICS       = IEAICS'\nICSMSG   DC    C'  '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'IPS       = IEAIPS'\nIPSMSG   DC    C'  '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'OPT       = IEAOPT'\nOPTMSG   DC    C'  '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'-'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'IPL DATE  ='\n***              1 2 3 4 5 6 7\n***                Y Y . D D D\nIPLDATE  DC    X'4021204B202020'                           11/30/87 MTW\n         DC    C'    TIME = '                              11/30/87 MTW\nIPLTIME  DC    CL8'  .  .  '                               11/30/87 MTW\n         ORG\n*\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG   *-$TPUTLEN                                  11/30/87 MTW\n         DC    CL12' '                                     11/30/87 MTW\nIPLWKDAY DC    CL10' '                                     11/30/87 MTW\nIPLMDY   DC    CL20' '                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG   *-$TPUTLEN                                  11/30/87 MTW\n         DC    C'TODAY     ='                              11/30/87 MTW\n***              1 2 3 4 5 6 7                             11/30/87 MTW\n***                Y Y . D D D                             11/30/87 MTW\nCURDATE  DC    X'4021204B202020'                           11/30/87 MTW\n         DC    C'    TIME = '                              11/30/87 MTW\nCURTIME  DC    CL8' '                                      11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG   *-$TPUTLEN                                  11/30/87 MTW\n         DC    CL12' '                                     11/30/87 MTW\nCURWKDAY DC    CL10' '                                     11/30/87 MTW\nCURMDY   DC    CL20' '                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG   *-$TPUTLEN                                  11/30/87 MTW\nELAPSED  DC    X'40202120'                                 11/30/87 MTW\n         DC    C' HOURS SINCE LAST IPL OR SET IPS'         11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN              TOP-OF-PAGE\n         DC    C' '\n         ORG\n  TITLE '--> PRODUCTION INFORMATION CONSTANTS'\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- - PRODUCT INFORMATION - -'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'LEVEL     = '\nPRODLVL  DC    CL16' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'NAME      = '\nPRODNAM  DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'FMID      = '\nPRODFMID DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'REL NUM.  = '\nRELNUM   DC    CL8' '\n         ORG\n*\n  TITLE '--> C P U   ADDRESS CONSTANTS'\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- - - CPU INFORMATION - - -'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'MODEL #   ='\nCPUMODL  DC    X'4021202020'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'SERIAL #  = '\nSERIAL   DC    CL6'UNKN'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'IPL CPUID =  '                            11/30/87 MTW\nCPUPID   DC    X'4020202020'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n           ORG *-$TPUTLEN\n         DC    C'MAX CPUID =  '                            11/30/87 MTW\nMAXMP    DC    X'4020202020'\n         ORG\n*\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' # ONLINE =  '                            11/30/87 MTW\nCPUONLIN DC    X'4020202020'                               11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n  TITLE '--> S M F   ADDRESS CONSTANTS'\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+CENTERA-4                          11/30/87 MTW\n         DC    CL(CENTERL)'- - SMF BUFFER AREA INFORMATION - -'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'MIN BUFF  = '\nSMFMBUF  DC    X'402020202021'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'MAX BUFF. = '\nSMFXBUF  DC    X'402020202021'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n          ORG *-$TPUTLEN\n         DC    C'DATALOST? ='\nSMFLOST  DC    X'40202020202020202020'\n          ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'BUFF. OUT ='\nSMFBUFD  DC    X'40202020202020202021'\n         ORG\n*\n  TITLE '--> SYSTEM REGION ADDRESS CONSTANTS'\n         DC    CL($TPUTLEN)' '\n          ORG *-$TPUTLEN\n         DC    C' '      TOP-OF-PAGE    FILLER L(50)\n          ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- -  SYSTEM STORAGE VALUES - -'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'-'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'PRIVATE AREA ADDR BELOW 16M  = '\nADDR24   DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'              SIZE IN BYTES  ='\nREGLGBL  DC    CL19' '\n         DC    C' B'              PRIVATE AREA SIZE BELOW 16M IN BYTES\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'      SIZE IN K (1024 BYTES) ='\nKREG24A  DC    CL19' '            PRIVATE AREA SIZE BELOW 16M IN K\n         DC    C' K'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'  SIZE IN MEGS (1024K BYTES) ='\nMREG24A  DC    CL19' '            PRIVATE AREA SIZE BELOW 16M IN MEGS\n         DC    C' MEG'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG   *-$TPUTLEN\n         DC    C'-'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'PRIVATE AREA ADDR ABOVE 16M  = '\nADDR31   DC    CL8' '             PRIVATE AREA ADDRESS ABOVE 16M\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'              SIZE IN BYTES  ='\nREGLGAB  DC    CL19' '            PRIVATE AREA SIZE ABOVE 16M IN BYTES\n         DC    C' B'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'      SIZE IN K (1024 BYTES) ='\nKREG31A  DC    CL19' '            PRIVATE AREA SIZE ABOVE 16M IN K\n         DC    C' K'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'  SIZE IN MEGS (1024K BYTES) ='\nMREG31A  DC    CL19' '            PRIVATE AREA SIZE ABOVE 16M IN MEGS\n         DC    C' MEG'            FILLER\n         ORG\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG   *-$TPUTLEN                                  11/30/87 MTW\n         DC    C'-'                                        11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' REAL STORAGE SIZE IN BYTES  ='           11/30/87 MTW\nBREAL    DC    CL19' '                  CVTRLSTG*1024      11/30/87 MTW\n         DC    C' B'                                       11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'      SIZE IN K (1024 BYTES) ='           11/30/87 MTW\nKREAL    DC    CL19' '                  CVTRLSTG           11/30/87 MTW\n         DC    C' K'                                       11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'  SIZE IN MEGS (1024K BYTES) ='           11/30/87 MTW\nMREAL    DC    CL19' '                  CVTRLSTG/1024      11/30/87 MTW\n         DC    C' MEG'                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*\n  TITLE '--> SYSTEM STORGE ADDRESS CONSTANTS'\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C' '      TOP-OF-PAGE    FILLER L(50)\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- - SYSTEM STORAGE AREAS - -'\n         ORG\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '      HEADER LINE INDICATOR             11/30/87 MTW\n         DC    C'ABOVE THE LINE  '                         11/30/87 MTW\n         DC    C'  START   '                               11/30/87 MTW\n         DC    C'  END     '                               11/30/87 MTW\n         DC    C'LENGTH (K)'                               11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '      HEADER LINE INDICATOR             11/30/87 MTW\n         DC    C'--------------  '                         11/30/87 MTW\n         DC    C'--------  '                               11/30/87 MTW\n         DC    C'--------  '                               11/30/87 MTW\n         DC    C'----------'                               11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\nSTGLINE  DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-PRIVATE'                                11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-CSA'                                    11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-MLPA'                                   11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-FLPA'                                   11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-PLPA'                                   11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-SQA'                                    11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-NUC (R/W)'                              11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'E-NUC (R/O)'                              11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '      TOP-OF-PAGE                       11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN+CENTERA                            11/30/87 MTW\n         DC    CL(CENTERL)'- - SYSTEM STORAGE AREAS - -'   11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '      HEADER LINE INDICATOR             11/30/87 MTW\n         DC    C'BELOW THE LINE  '                         11/30/87 MTW\n         DC    C'  START   '                               11/30/87 MTW\n         DC    C'  END     '                               11/30/87 MTW\n         DC    C'LENGTH (K)'                               11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '      HEADER LINE INDICATOR             11/30/87 MTW\n         DC    C'--------------  '                         11/30/87 MTW\n         DC    C'--------  '                               11/30/87 MTW\n         DC    C'--------  '                               11/30/87 MTW\n         DC    C'----------'                               11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'NUC (R/O)'                                11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'NUC (R/W)'                                11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'SQA'                                      11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'PLPA'                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'FLPA'                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'MLPA'                                     11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'CSA'                                      11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'PRIVATE'                                  11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'V=R (IF ANY)'                             11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*                                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'PSA'        '                             11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*\n  TITLE '--> SYSTEM TASKS ADDRESSES '\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C' '                    TOP-OF-PAGE\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+CENTERA\n         DC    CL(CENTERL)'- - SYSTEM STORAGE AREAS - -'\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'ADDRESS SPACE VECTOR TABLE        = '\n#ASVTADR DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'JES SYSTEM CONTROL TABLE          = '\n#JES2ADR DC    CL8' '\n         ORG\n*                                                          11/30/87 MTW\n*        DC    CL($TPUTLEN)' '                             11/30/87 MTW\n*        ORG *-$TPUTLEN                                    11/30/87 MTW\n*        DC    C'LINK LIST MEMORY TERMINATION ADDR = '     11/30/87 MTW\n*#LLADDR DC    CL8' '                                      11/30/87 MTW\n*        ORG                                               11/30/87 MTW\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'CVT USER                          = '\n#CVTUSER DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'APF: CVTAPFA                      = '\n#APFTBL  DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'SYSGEN''ED PSA ADDRESS             = '    11/30/87 MTW\n#PSADDR  DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'RMF COLLECTION ROUTINE            = '\n#RMFCOL  DC    CL8' '\n         ORG\n*                                                          11/30/87 MTW\n*        DC    CL($TPUTLEN)' '                             11/30/87 MTW\n*        ORG *-$TPUTLEN                                    11/30/87 MTW\n*        DC    C'APF: CVTAUTHL                     = '     11/30/87 MTW\n*#APFTBL1 DC   CL8' '                                      11/30/87 MTW\n*        ORG                                               11/30/87 MTW\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'APF: CVTAPFT                      = '\n#APFTBL2 DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'RACF CVT                          = '\n#RACF    DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'DFHSM QUEUE CONTROL TABLE         = '\n#DFHSM   DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'VIRT FETCH                        = '\n#VIRTFET DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'GRS ADDRESS                       = '\n#GRSADDR DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C'VTAM ATCVT                        = '     11/30/87 MTW\n#VTAMADR DC    CL8' '\n         ORG\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C'DAT-OFF NUCLEUS (REAL ADDRESS)    = '     11/30/87 MTW\n#DATOFF  DC    CL8' '                                      11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C' '                    TOP OF PAGE\n         ORG\n  TITLE '--> STORAGE MAP CONSTANTS'\n*                             1         2         3         4\n*                    1234567890123456789012345678901234567890\n*\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'STORAGE MAP:'\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          ._______________________.'    L(35)\n         ORG\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'          |                       |'    L(35)     MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          //  E-LSQA/SWA/229/230 //'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' ---------|-----------------------|'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' USABLE   |      MAXIMUM          |'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' EXTENDED //     E-PRIVATE       //'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' PRIVATE  |                       |'    L(35)     MTW\n             ORG *-21\nMLEN31   DC     CL19' '\n         DC     C' |'\n         DC     C' '\nMEPRIV   DC     CL9' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' _________|_______________________|'    L(35)\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |        E-CSA          |'    L(35)\n         DC     C' '                                       11/30/87 MTW\nMECSA    DC     CL8' '                                     11/30/87 MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' COMMON   |        E-MLPA         |'    L(35)\n         DC     C' '\nMEMLPA   DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |        E-FLPA         |'    L(35)\n         DC     C' '\nMEFLPA   DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' EXTENDED |        E-PLPA         |'    L(35)\n         DC     C' '\nMEPLPA   DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'          |        E-SQA          |'    L(35)     MTW\n         DC     C' '                                       11/30/87 MTW\nMESQA    DC     CL8' '                                     11/30/87 MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'          |    E-READ-WRITE-NUC   |'    L(35)     MTW\n         DC     C' '                                       11/30/87 MTW\nMERWNUC  DC     CL8' '                                     11/30/87 MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'          |    E-READ-ONLY-NUC    |'    L(35)     MTW\n         DC     C' '\nMERONUC  DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' 16M LINE |-----------------------|'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC    C' '                    TOP OF PAGE\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'STORAGE MAP:'\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' 16M LINE |-----------------------|'    L(35)     MTW\n         DC     C' 00FFFFFF'\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |     READ-ONLY-NUC     |'    L(35)\n         DC     C' '\nMRONUC   DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |     READ-WRITE-NUC    |'    L(35)\n         DC     C' '\nMRWNUC   DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |         SQA           |'    L(35)\n         DC     C' '                                       11/30/87 MTW\nMSQA     DC     CL8' '                                     11/30/87 MTW\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' COMMON   |         PLPA          |'    L(35)\n         DC     C' '\nMPLPA    DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |         FLPA          |'    L(35)\n         DC     C' '\nMFLPA    DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |         MLPA          |'    L(35)\n         DC     C' '\nMMLPA    DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |         CSA           |'    L(35)\n         DC     C' '\nMCSA     DC     CL8' '\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'MEG-BNDY--|-----------------------|'     11/30/87 MTW\n         ORG\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'          //   LSQA/SWA/229/230  //'    L(35)     MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' ---------|-----------------------|'    L(35)     MTW\n         ORG\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C' USABLE   |        MAXIMUM        |'    L(35)     MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C' PRIVATE  //       PRIVATE       //'    L(35)     MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C' AREA     |                       |'     11/30/87 MTW\n         ORG    *-23                                       11/30/87 MTW\nMLEN24   DC     CL19' '                                    11/30/87 MTW\n         DC     C'   |'                                    11/30/87 MTW\n         DC     C' '                                       11/30/87 MTW\nMPRIV    DC     CL8' '                                     11/30/87 MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C' ---------|-----------------------|'    L(35)     MTW\n         ORG    ,                                          11/30/87 MTW\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |    SYSTEM REGION      |'\n         DC     C' 20K'\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          |         PSA           |'\n         DC     C' 4K'\n         ORG\n         DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'          !_______________________!'     11/30/87 MTW\n         ORG\n         DC    CL($TPUTLEN)' '                             11/30/87 MTW\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC    C' '                    TOP OF PAGE         11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\nENDTPUT  EQU   (*-OUTSTOR)/$TPUTLEN\n TITLE '--> DATA AREAS'\nSAVE     DS    18F\nSAVE1    DS    F                   * PARM IF ANY ...\nSAVBAL   DS    F                   * SAVE AREA FOR 'BALREG'\nOPENFLG  DC    X'00'               * SYSOUT - DCB OPEN/CLOSE FLAG\n* SOME TPUT/TGET VARIABLES\nCLEAR    DS    0X                                          11/30/87 MTW\n         DC    X'C3'          WCC - WCC RESET/KEYBRD RESTORE/RESET MDT\n         DC    X'115D7E'      SBA - SPF \"EXIT FULL SCREEN\" SIGNAL\n         DC    X'114040'      SBA - FIRST POSITION OF SCREEN\n         DC    X'3C404000'    RA  - FILL ENTIRE SCREEN WITH NULLS\n         DC    X'114040'      SBA - FIRST POSITION OF SCREEN\n         DC    X'13'          IC  - MOVE CURSOR TO FIRST POSITION\nCLEARLEN EQU   *-CLEAR                                     11/30/87 MTW\nHITENTER DC    CL23'HIT ENTER TO CONTINUE >'\nHENTER   DC    C' '\n*\nPDATE    DS    F\nMTIME    DS    F\n         SPACE\nDWORD    DS    D\nCPUMDL   DS    CL2\n         DC    X'F000'\n#SUBCHAN DC    PL4'0'                                      11/30/87 MTW\n#DEVNO   DC    PL4'0'                                      11/30/87 MTW\nPATHS    DC    CL8' '\nEDITPATH DC    X'40202120'\n         DS    0F\nPPATHS   DS    H\nGETREG   DS     F\n         SPACE 3                                           11/30/87 MTW\n         DS    0D                                          11/30/87 MTW\nJULPTRS  DC    A(JULPARM1)                                 11/30/87 MTW\n         DC    A(JULPARM2)                                 11/30/87 MTW\n         DC    A(JULPARM3)                                 11/30/87 MTW\n         DC    A(JULPARM4)                                 11/30/87 MTW\n         DC    X'80'                                       11/30/87 MTW\n         DC    AL3(JULPARM5)                               11/30/87 MTW\nJULPARM1 DS    F                      * THE INPUT DATE     11/30/87 MTW\nJULPARM2 DS    F                      * INPUT FORMAT CODE  11/30/87 MTW\nJULPARM4 DS    F                      * OUTPUT FORMAT CODE 11/30/87 MTW\nJULPARM3 DS    CL44                   * OUTPUT FIELD       11/30/87 MTW\nJULPARM5 DS    32D                    * 256 BYTE WORKAREA  11/30/87 MTW\n TITLE '-->  APF TABLE  TPUT SECTION '\nAPFMSG0  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'------------  IEAAPFnn  TABLE  ------------'\n         ORG\nAPFMSG1  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'TOTAL ENTRIES   ='\nAPFENTS  DC     X'40202020'\n         ORG\nAPFMSG2  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'NOTE: 1ST 2 ENTRIES ARE SYSTEM DEFAULTS'\n         ORG\nAPFMSG3  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'      SYS1.LINKLIB  AND SYS1.SVCLIB'\n         ORG\nAPFMSG4  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+$TPUTLEN-9\n         DC     C'C'\n         ORG\nAPFMSG5  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+$TPUTLEN-9\n         DC     C'A'\n         ORG\nAPFMSG6  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN                                    11/30/87 MTW\n         DC     C'                                           PARMLIB'\n         DC     C' T CATALOG'                              11/30/87 MTW\n         ORG\nAPFMSG7  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'______ DSNAME _____                         VOLSER'\n         DC     C' ? VOLSER'\n         ORG\n TITLE '-->  LINK LIST TABLE  TPUT SECTION '               11/30/87 MTW\nLLTMSG0  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'------------  LNKLSTnn  TABLE  ------------'\n         ORG\nLLTMSG1  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'TOTAL ENTRIES   ='\nLLTENTS  DC     X'40202020'\n         ORG\nLLTMSG2  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'NOTE: 1ST ENTRY, SYS1.LINKLIB, IS A SYSTEM DEFAULT'\n         ORG\nLLTMSG4  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+$TPUTLEN-12\n         DC     C'A  C'\n         ORG\nLLTMSG5  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+$TPUTLEN-12\n         DC     C'P  A'\n         ORG\nLLTMSG6  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN+$TPUTLEN-12\n         DC     C'F  T CATALOG'\n         ORG\nLLTMSG7  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'______ DSNAME _____                             '\n         DC     C'?  ? VOLSER'\n         ORG\n         SPACE  3\n*       -->  SMCA TABLE  TPUT SECTION                      11/30/87 MTW\nSMFMSG0  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'------------  SMFPRM'\nSMFPRM   DC     C'nn'\n         DC     C'  DATA  -------------'\n         ORG\nSMFMSG1  DC    CL($TPUTLEN)' '\n         ORG *-$TPUTLEN\n         DC     C'-'\n         ORG\n TITLE  '--> DATA SET NAME TABLE PROCESSING STORAGE'\nDSNCOUNT DS     H                                          11/30/87 MTW\nGETSIZE  DC     A(0)                                       11/30/87 MTW\n*\nFINDSN   CAMLST NAME,DSNAME,,DSNAREA\nDSNAME   DC     CL44' '\nDSNAREA  DS     0D\n         DS     265C\nDSNVOL   EQU    DSNAREA+6\n TITLE  '--> OPTIONAL DCB DEFINITION IF DDNAME(SYSOUT) WAS ALLOCATED'\n         SPACE\nCARCNTL  DC    CL1' '\nOUTREC   DC    CL79' '\nSYSOUT   DCB   DDNAME=SYSOUT,LRECL=80,RECFM=FBA,DSORG=PS,EXLST=EXL,    X\n               MACRF=PM\nEXL      DC    X'87',AL3(JFCB)\nJFCB     DS    176C\nTRANSL   EQU   *\n         DC    C'.'\n         DC    63C' '\n         DC    X'40404040404040404040' ****        ASCII\n         DC    X'4A'                   **** CENT OR (J)\n         DC    C'.<(+|'                ****\n         DC    X'50'                   AMPERSAND\n         DC    X'404040404040404040'\n         DC    X'5A'                   EXCLAMATION POINT\n         DC    C'$*);\u00ac-/'\n         DC    X'4040404040404040'     ****       ASCII-LOWERCASE\n         DC    X'6A'                   VERTICLE LINE (NOT |)\n         DC    C',%_>?'\n         DC    X'404040404040404040'\n         DC    X'79'                   GRAVE ACCENT\n         DC    C':#@'\n         DC    X'7D'                   SINGLE QUOTE\n         DC    C'=\"'                   **** END OF ASCII\n         DC    X'80'\n         DC    X'818283848586878889'   SMALL LETTERS\n         DC    X'40404040404040'\n         DC    X'919293949596979899'   SMALL LETTERS\n         DC    X'40404040404040'\n         DC    X'40'                   TILDE\n         DC    X'A2A3A4A5A6A7A8A9'     SMALL LETTERS\n         DC    X'404040404040'\n         DC    X'40404040404040404040'\n         DC    X'404040404040'\n         DC    X'C0'                   LEFT BRACE\n         DC    C'ABCDEFGHI'            CAPITAL LETTERS\n         DC    X'4040'\n         DC    X'40'                   HOOK\n         DC    X'40'\n         DC    X'40'                   FORK\n         DC    X'40'\n         DC    X'D0'                   RIGHT BRACE\n         DC    C'JKLMNOPQR'            CAPITAL LETTERS\n         DC    X'DADBDCDDDEDF'\n         DC    X'E0'                   REVERSE SLANT\n         DC    X'40'\n         DC    C'STUVWXYZ'             CAPITAL LETTERS\n         DC    X'4040'\n         DC    X'40'                   CHAIR\n         DC    X'404040'\n         DC    C'0123456789'           NUMERICS\n         DC    X'FA'                   LONG VERTICLE LINE (NOT\n         DC    X'4040404040'\n TITLE  '--> SMFPRMnn DATA WORKING STORAGE'                11/30/87 MTW\nSMFCOUNT DC    H'0'                    COUNT OF SMF SMCA BUFFERS BUILT\n         DC    C' '                    USED TO CLEAR WORKBUF        MTW\nWORKBUF  DC    CL71' '                 WORKING AREA BUFFER 11/30/87 MTW\n         SPACE 1                                           11/30/87 MTW\n         ORG   WORKBUF                                     11/30/87 MTW\nWKSMFSID DS    0C'SID(XXXX)',C'SID('                       11/30/87 MTW\nWKSID    DS    C'XXXX',C') '                               11/30/87 MTW\nWKJWT    DS    0C'JWT(HHMM)',C'JWT('                       11/30/87 MTW\nWKJWT#   DS    C'MMSS',C') '                               11/30/87 MTW\nWKMAXDRM DS    0C'MAXDORM(MMSS)',C'MAXDORM('               11/30/87 MTW\nWKMAXDM# DS    C'HHMM',C') '                               11/30/87 MTW\nWKSTATUS DS    0C'STATUS(HHMMSS)',C'STATUS('               11/30/87 MTW\nWKSTTUS# DS    C'HHMMSS',C')'                              11/30/87 MTW\n         ORG   WORKBUF                                     11/30/87 MTW\nWKNAME   DS    C'XXXX',C': DETAIL INTERVAL(HHMMSS)'        11/30/87 MTW\n         ORG   WORKBUF+2                                   11/30/87 MTW\nWKEXITS  DS    C'EXITS'                                    11/30/87 MTW\nWKEXIT#  DS    C                                           11/30/87 MTW\n         ORG   WORKBUF                                     11/30/87 MTW\nWKPRIM   DS    0C'P'                                       11/30/87 MTW\nWKSECND  DS    C'S'                                        11/30/87 MTW\nWKSMFDSN DS    0C'-DSN(SYS1.MANX)',C'-DSN('                11/30/87 MTW\nWKDSN    DS    C'SYS1.MANX',C') '                          11/30/87 MTW\nWKSMFVOL DS    0C'VOL(XXXXXX)',C'VOL('                     11/30/87 MTW\nWKVOL    DS    C'VOLSER',C') '                             11/30/87 MTW\nWKBLOCKS DS    0C'BLKS(XXXXXXX)',C'BLKS('                  11/30/87 MTW\nWKBLKS   DS    C'XXXXXXX',C')'                             11/30/87 MTW\nWKPERCNT DS    0CL6,C                                      11/30/87 MTW\nWKFULL   DS    0C'FULL'                                    11/30/87 MTW\nWKEMPTY  DS    C'EMPTY',C                                  11/30/87 MTW\nWKACTDSN DS    0C'ACTIVE'                                  11/30/87 MTW\nWKDUMP   DS    C'DUMP REQ''D'                              11/30/87 MTW\n         ORG   ,                                           11/30/87 MTW\n TITLE  '--> LITERALS'                                     11/30/87 MTW\n         LTORG\n         TITLE '--> CVT - DSECT'\n         CVT   DSECT=YES,PREFIX=YES\n         TITLE '--> UCB - DSECT'\n         IEFUCBOB PREFIX=YES\n         PRINT NOGEN\n         TITLE '--> ASVT - DSECT'                          11/30/87 MTW\n         IHAASVT\n         TITLE '--> ASCB - DSECT'                          11/30/87 MTW\n         IHAASCB\n         TITLE '--> OUCB - DSECT'                          11/30/87 MTW\n         IRAOUCB\n         TITLE '--> RMCT - DSECT'                          11/30/87 MTW\n*        IRARMCT                                           11/30/87 MTW\nRMCT     DSECT                                             11/30/87 MTW\n         ORG   RMCT+X'10'                                  11/30/87 MTW\nRMCTRMPT DS    A                      * SRM PARAMETER TABLE11/30/87 MTW\n         ORG   RMCT+X'18'                                  11/30/87 MTW\nRMCTWMST DS    A                      * WLM SPECIFCTN TABLE11/30/87 MTW\n         ORG   RMCT+X'7C'                                  11/30/87 MTW\nRMCTTOD  DS    F                      * CURRENT TIME OF DAY11/30/87 MTW\n         ORG   RMCT+X'DC'                                  11/30/87 MTW\nRMCTICST DS    A                      * ICSC TABLE ADDRESS 11/30/87 MTW\n         SPACE 1                                           11/30/87 MTW\nRMPTOPTN EQU   83                     * SUFFIX OF IEAOPT   11/30/87 MTW\n         SPACE 1                                           11/30/87 MTW\nWMSTID   EQU   4                      * SUFFIX OF IEAIPS   11/30/87 MTW\n         TITLE '--> RMCT - DESCT'                          11/30/87 MTW\n*        IRARMCT                                           11/30/87 MTW\nCSD      DSECT                                             11/30/87 MTW\n         ORG   CSD+X'0A'                                   11/30/87 MTW\nCSDCPUOL DC    H'0'        NUMBER OF CPU'S CURRENTLY ALIVE 11/30/87 MTW\n         TITLE '--> SMF - DSECTS'                          11/30/87 MTW\n         IEESMCA\n         EJECT ,                                           11/30/87 MTW\nRDS      DSECT\nRDSID    DS    C'RDS '\nRDSNEXT  DS    A\nRDSPREV  DS    A\nRDSFLAG  DS    X\nRDSFREE  EQU   X'10'                    NEED TO FREE DATASET AND RDS\nRDSDUMP  EQU   X'08'                    DATASET REQUIRES DUMP\nRDSREADY EQU   X'04'                    DATASET OPEN AND READY TO USE\nRDSCLOSE EQU   X'02'                    DATASET NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'                    DATASET NEEDS TO BE OPENED\nRDSFLAG2 DS    X\nRDSLOST  EQU   X'80'                    DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'80'                    PHYSICAL I/O ERROR\nRDSLOGER EQU   X'80'                    LOGICAL I/O ERROR\n         DS    XL2\nRDSNAME  DS    CL10                     DATASET NAME\nRDSVOLID DS    CL6                      VOLUME SERIAL\nRDSDDN   DS    CL8                      DDNAME\nRDSCAPTY DS    XL4                      DATASET CAPACITY (BLOCKS)\nRDSNXTBL DS    XL4                      NUM OF NEXT AVAIL BLOCK\nRDSBQE   DS    A                        A(BUFFER QUEUE ELEMENT)\nRDSAVSPC DS    F                        AVAILABLE SPACE\nRDSENRBA DS    XL4                      ENDRBA\nRDSCINV  DS    F                        CONTROL INTERVAL SIZE\nRDSDOMID DS    F                        MSG NUMBER OF DUMP MSG\nRDSRPL   DS    CL76                     VSAM RPL\nRDSACB   DS    CL76                     VSAM ACB\n         EJECT ,                                           11/30/87 MTW\nIEEMBACT DSECT\nACTID    DS    C'ACT '                  EYE CATCHER\nACTSRCP  DS    A                        A(PARSE INPUT)\nACTMSDCB DS    A                        A(MSG DCB)\nACTPLDCB DS    A                        A(PARMLIB DCB)\nACTOCB   DS    A                        A(FIRST OCB)\nACTDSNAM DS    A                        A(DSNAME OCBS)\nACTOCBPL DS    A                        A(OCB BUFFER POOL)\nACTCONID DS    C                        CONSOLE ID\nACTCAREA DS    C                        CONSOLE AREA\nACTALTCN DS    C                        ALTERNATE CONSOLE ID\nACTALTAR DS    C                        ALTERNATE CONSOLE AREA\nACTOPTAB DS    A\nACTFLGS  DS    0XL2                     FLAG BYTES\nACTFLAG1 DS    X                        FLAG BYTE\nACTDMP   EQU   X'80'                    DUMP PROCESSING\nACTSMF   EQU   X'40'                    SMF PROCESSING\nACTMEMBF EQU   X'20'                    PARM FROM PARMLIB MEMBER\nACTREPLF EQU   X'10'                    PARM FROM OPERATOR REPLY\nACTDFTSF EQU   X'80'                    PARM DEFAULTED\nACTSYSNF EQU   X'40'                    PARM FROM SYSIN\nACTMSGF  EQU   X'20'                    WRITE/SUPPRESS ERROR MSGS\nACTNOXF  EQU   X'10'                    \"NO\" XXX\nACTFLAG2 DS    X                        FLAG BYTE\nACTERRF  EQU   X'80'\nACTRANGF EQU   X'40'                    COLON FOUND IN TEXT STRING\nACTOPPRF EQU   X'20'\nACTPRMTL EQU   X'10'                    PROMPT(LIST)\nACTPRMTI EQU   X'08'                    PROMPT(IPLR)\nACTMEMID DS    CL2                      SMFPRM.. MEMBER ID\nACTCHARP DS    A                        A(CURRENT BUFFER)\nACTENDP  DS    A                        E(END OF BUFFER)\nACTOPTNE DS    A                        A(OPTION TABLE ENTRY)\nACTBUFP  DS    A                        A(START OF STRING)\nACTBUFL  DS    H                        L'BUFFER\nACTBUFL1 DS    H\nACTBSU   DS    X\nACTSTATE DS    X                        CURRENT PARSE STATE\nACTNXTST DS    X                        NEXT PARSE STATE\n         DS    X\nACTSVOCB DS    A                        SAVE SYSTEM OCB\n         EJECT ,                                           11/30/87 MTW\nSST      DSECT                          SMF SELECTIVITY TABLE\nSSTNAME  DS    CL4\nSSTFLAGS DS    X\nSSTDETAL EQU   X'80'                    DETAILED ACCT'NG\nSSTACTIV EQU   X'40'                    SUBSYSTEM ACTIVE\nSSTRESET EQU   X'20'\n         DS    XL3\nSSTINTVL DS    XL8                      INTERVAL LENGTH\nSSTRCDON DS    32X                      ONE BIT PER RECORD SELECTED\nSSTEXTAB DS    A                        A(EXIT TABLE)\n         SPACE 3                                           11/30/87 MTW\nEXITTAB  DSECT\nEXITSPL  DS    XL4                      SUBPOOL ID AND LENGTH\nEXITNMBR DS    F                        NUMBER OF EXITS\nEXITNTRY EQU   *\nEXITNAME DS    CL8                      EXIT NAME\n         DS    A                        A(0)\nEXITADDR DS    A                        A(EXIT)\nEXITINAC EQU   X'80'                    EXIT ACTIVE\n         TITLE '--> GDA - DESCT'                           11/30/87 MTW\n         IHAGDA ,                                          11/30/87 MTW\n         TITLE '   J U L S U B   '\n************************************************************\n*                                                          *\n*        'JULSUB'                                          *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. JUNE 4 1976.\n*        DATE UPDATED. APRIL 23 1980.\n*        ATTRIBUTES. RE-ENTRANT.\n*        REMARKS.\n*            THIS SUBPROGRAM CONVERTS A DATE FROM ONE FORMAT\n*            TO ANOTHER. THE DIFFERENT FORMATS ARE:\n*\n*            INPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               3   JULIAN       PACKED    PL4'YYYYDDDF'\n*\n*            OUTPUT\n*               1   JULIAN       BINARY    F'YYYYDDD'\n*               2   STANDARD     BINARY    F'YYYYMMDD'\n*               4   STANDARD     8-CHAR    CL8'MM/DD/YY'\n*               8   ALPHA        8-CHAR    CL8'03JUN76 '\n*              16   PROSE        20-CHAR   CL20'JUNE 3 1976'\n*              32   FRSTLAST     BINARY    F'0' 1 - FIRST OF MONTH\n*                                               2 - LAST OF MONTH\n*              64   WEEKDAYCODE  BINARY    F'0' (SATURDAY)\n*             128   WEEKDAY      12-CHAR   CL12'SATURDAY'\n*             256   TIME         BINARY    F'100THS SEC SINCE MIDNITE'\n*             512   TIME         8-CHAR    CL8'HH:MM:SS'\n*\n*            INPUT MUST BE EITHER JULIAN OR STANDARD.\n*\n*            PASS THE FOLLOWING PARAMETERS VIA A LIST OF ADDRESSES\n*            POINTED TO BY REGISTER 1\n*               1   THE INPUT DATE\n*               2   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE INPUT FORMAT\n*               3   THE RECEIVING FIELD FOR OUTPUT\n*               4   A FULLWORD CONTAINING THE NUMERIC CODE\n*                   WHICH DEFINES THE OUTPUT FORMAT\n*               5   A 256 BYTE WORKAREA (ON DOUBLEWORD BOUNDARY)\n*            NOTES.\n*               1) MAKE OUTPUT 00YY IF INPUT IS 00YY.\n*               2) FOR CURRENT DATE, USE TYPE 1 DATE ZERO.\n         SPACE\n         MACRO\n         STAMP\n         LCLC  &ASMTIME\n&ASMTIME SETC  '&SYSTIME'(1,5)\n         DC    CL16' &SYSDATE &ASMTIME '\n         MEND\n         SPACE\nJULSUB CSECT\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'JULSUB   '\n         STAMP\n@PROLOG  STM   14,12,12(13)\n         LR    R12,15\n         LR    R2,R1\n*        GETMAIN R,LV=@DATAL       GET SAVEAREA ADDRESS\n         L     R1,16(,R1)          GET SAVEAREA ADDRESS\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2\n         USING @DATA,13\n         SPACE\n         LM    R2,R3,0(R1)         GET INPUT AND DESCRIPTOR\n         LM    R4,R5,8(R1)         GET OUTPUT AND DESCRIPTOR\n         MVC   INPUT(4),0(R2)      COPY INPUT\n         XC    DOUBLE,DOUBLE\n         SLR   R14,R14             ZERO R14\n         ST    R14,FRSTLAST\n         ST    R14,TIMEB\n         CLI   3(R3),INP003        INPUT JULIAN PACKED?\n         BNE   INP01               NO - BRANCH\n         SPACE\n*              INPUT IS JULIAN PACKED\n         SPACE\n         MVC   DOUBLE+4(4),INPUT   MOVE INPUT\n         CVB   R1,DOUBLE\n         ST    R1,JB\nJULCOMM  L     R14,DOUBLE+4        SAVE 00YYDDDF\n         LH    R1,DOUBLE+4         GET 00YY\n         SLL   R1,16               GET 00YY0000\n         SRL   R1,12               GET 00000YY0\n         ST    R1,DOUBLE+4         STORE BACK 00000YY0\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)     SAVE YYYY CHAR\n         MVC   YYC,YYYYC+2\n*\n         ST    R14,DOUBLE+4        RESTORE 00YYDDDF\n         XC    DOUBLE(6),DOUBLE      00YYDDDF TO 0000DDDF\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)    SAVE DDD CHAR\n         CVB   R1,DOUBLE           CONVERT DDD TO BINARY\n         ST    R1,DDDB             SAVE DDD BINARY\n         SPACE\n         BAL   R9,TODD\n         BAL   R9,TOSB\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\nINP01    CLI   3(R3),INP001        INPUT JULIAN BINARY?\n         BNE   INP02               NO - BRANCH\n         L     R1,INPUT            GET BINARY YYYYDDD\n         LTR   R1,R1               ZERO?\n         BNZ   INP01A              NO - BRANCH\n         TIME  BIN\n         ST    R0,TIMEB            SAVE TIME\n         SLR   R0,R0\n         STM   R0,R1,DOUBLE\n         CVB   R1,DOUBLE\n         B     INP01B\nINP01A   CVD   R1,DOUBLE           TO DECIMAL\nINP01B   ST    R1,JB\n         B     JULCOMM             PROCEED AS IF INP003\n         SPACE\n*              CONVERT JULIAN DATE TO MONTH-DAY-YEAR\n*\n*                 INPUT  - YYYYB AND DDDB   (ALSO YYC)\n*\n*                 OUTPUT - MMB AND DDB, MMC AND DDC, FRSTLAST\n         SPACE\nTODD     MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   DPM365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   DPM366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   DPM365              NO - NOT A LEAP YEAR\nDPM366   MVI   DPM+3,29            CHANGE FEB TO 29 DAYS\nDPM365   EQU   *\n         LA    R14,2               INDEX FOR DPM\n         LR    R0,R14              INDEX INCREMENT\n         L     R1,DDDB             DAY OF YEAR\nDPMLOOP  CH    R1,DPM-2(R14)       DAY LESS THAN OR EQ ENTRY?\n         BE    DPMEND              EQUAL - BRANCH\n         BL    DPMWIN              LESS - BRANCH\n         SH    R1,DPM-2(R14)       NO, SUBTRACT ENTRY FROM DAY\n         ALR   R14,R0              ADD 2 TO INDEX\n         B     DPMLOOP             LOOP\nDPMEND   MVI   FRSTLAST+3,2        LAST DAY OF MONTH\n         B     DPMCOMM\nDPMWIN   CH    R1,=H'1'            FIRST OF MONTH?\n         BNE   DPMCOMM             NO - BRANCH\n         MVI   FRSTLAST+3,1        FIRST DAY OF MONTH\nDPMCOMM  SRL   R14,1               HALVE INDEX TO GET MM\n         ST    R1,DDB              SAVE DD BINARY\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  DDC,DOUBLE+6(2)     SAVE DD CHAR\n         ST    R14,MMB             SAVE MM BINARY\n         CVD   R14,DOUBLE          CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         UNPK  MMC,DOUBLE+6(2)     SAVE MM CHAR\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n         BR    R9\n         SPACE\n*              CONVERT MONTH NUMBER TO MONTH NAME\n*\n*                 INPUT  - MMB     (ALSO DDC AND YYC FOR MOVE)\n*\n*                 OUTPUT - MONTH AND ALPHA\n         SPACE\nTOMON    L     R15,MMB\n         MH    R15,=H'9'           MULT BY 9\n         LA    R15,ALPHAMON-9(R15) ADDRESS OF ENTRY\n         MVC   MONTH,0(R15)        SAVE PROSE MONTH\n         MVC   ALPHA+2(3),0(R15)   SAVE ALPHA MONTH\n         MVC   ALPHA(2),DDC\n         MVC   ALPHA+5(2),YYC\n         MVI   ALPHA+7,C' '\n         BR    R9\n         SPACE\n*              BUILD PROSE DATE\n*\n*                 INPUT  - MONTH, DDC, YYYYC\n         SPACE\nTOPROSE  TM    3(R5),OUT016\n         BZR   R9\n         MVI   PROSE,C' '\n         MVC   PROSE+1(L'PROSE-1),PROSE\n         MVC   PROSE(9),MONTH\n         LA    R1,PROSE+9\nPROSE01  CLI   0(R1),C' '          BLANK?\n         BNE   PROSE02             NO - FOUND LAST LETTER\n         BCT   R1,PROSE01          BACK UP AND BRANCH\nPROSE02  MVC   2(2,R1),DDC\n         CLI   2(R1),C'0'          LEADING ZERO?\n         BNE   PROSE03             NO - BRANCH\n         MVC   2(1,R1),3(R1)       YES - SHIFT\n         MVI   3(R1),C' '\n         BCTR  R1,0\nPROSE03  EQU   *\n*        MVI   4(R1),C','          COMMA AFTER DAY\n*        LA    R1,1(,R1)           ADD 1 FOR COMMA\n         MVC   5(4,R1),YYYYC\n         CLC   5(2,R1),=C'00'\n         BNE   *+10\n         MVC   5(2,R1),=C'19'\n         BR    R9\n         SPACE\n*              INPUT IS YYYY/MM/DD BINARY\n         SPACE\nINP02    L     R1,INPUT\n         CVD   R1,DOUBLE           GET 0000000Y YYYMMDDF\n         LM    R14,R15,DOUBLE\n         NC    DOUBLE,=X'0000000000000FFF' ISOLATE 00000DDF\n         CVB   R1,DOUBLE\n         ST    R1,DDB\n         OI    DOUBLE+7,X'0F'\n         UNPK  DDC,DOUBLE+6(2)\n*\n         STM   R14,R15,DOUBLE\n         NC    DOUBLE,=X'00000000000FF00F' ISOLATE 000MM00F\n         L     R1,DOUBLE+4\n         SRL   R1,8\n         ST    R1,DOUBLE+4\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         CH    R1,=H'12'\n         BNH   *+8\n         LA    R1,13               SET ALL BAD MONTHS TO 13\n         ST    R1,MMB\n         UNPK  MMC,DOUBLE+6(2)\n*\n         SRDL  R14,4               GET YYYYMMDD\n         SLR   R14,R14             GET 00000000 IN R14\n         SRL   R15,12              GET 000YYYYM IN R15\n         STM   R14,R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CVB   R1,DOUBLE\n         ST    R1,YYYYB\n         CH    R1,=H'99'\n         BH    *+8\n         AH    R1,=H'1900'\n         ST    R1,CENTB\n         UNPK  YYYYC,DOUBLE+5(3)\n         MVC   YYC,YYYYC+2\n         MVI   SLASH1,C'/'\n         MVI   SLASH2,C'/'\n*\n         BAL   R9,TOSB\n         BAL   R9,TOJUL\n         BAL   R9,TOMON\n         BAL   R9,TOPROSE\n         BAL   R9,TOWEEK\n         BAL   R9,TOTIME\n         BAL   R9,OUTPUT\n         B     EXIT0\n         SPACE\n*              CONVERT M/D/Y TO JULIAN\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - DDDB, DDDC, JB\n         SPACE\nTOJUL    MVC   DPM(26),DAYSPMON\n         TM    YYYYB+3,B'00000011' IS YEAR A MULTIPLE OF 4?\n         BNZ   JUL365              NO - BRANCH\n         CLC   YYC,=C'00'          DIVISIBLE BY 100?\n         BNE   JUL366              NO - BRANCH\n         L     R15,CENTB\n         SLR   R14,R14\n         D     R14,=F'400'\n         LTR   R14,R14             EVENLY DIVISIBLE BY 400?\n         BNZ   JUL365              NO - NOT A LEAP YEAR\nJUL366   MVI   DPM+3,29             CHANGE FEB TO 29 DAYS\nJUL365   EQU   *\n         L     R15,DDB              GET DAYS IN CURRENT MONTH\n         LR    R0,R15               SAVE IT TO COMPARE FOR LAST DAY\n         L     R14,MMB              GET CURRENT MONTH\n         BCTR  R14,0                GET NO. OF COMPLETED MONTHS\n         LA    R1,DPM\n         LTR   R14,R14              JANUARY?\n         BNP   JULEND               YES - BRANCH\n         B     *+8\nJULOOP   LA    R1,2(,R1)            POINT TO NEXT MONTH\n         AH    R15,0(,R1)           ADD DAYS IN MONTH TO TOTAL\n         BCT   R14,JULOOP\nJULEND   CH    R0,0(,R1)            LAST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,2         YES\n         CH    R0,=H'1'             FIRST DAY OF MONTH?\n         BNE   *+8                  NO\n         MVI   FRSTLAST+3,1         YES\n         ST    R15,DDDB             SAVE DDD\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'       SET SIGN\n         UNPK  DDDC,DOUBLE+4(4)     SAVE DDD CHAR\n         MVC   JC(2),YYC\n         PACK  DOUBLE,JC\n         CVB   R1,DOUBLE\n         ST    R1,JB\n         BR    R9\n         SPACE\n*\n*\n*\n         SPACE\nTOSB     MVC   WORK(4),YYYYC\n         MVC   WORK+4(2),MMC\n         MVC   WORK+6(2),DDC\n         PACK  DOUBLE,WORK(8)\n         CVB   R1,DOUBLE\n         ST    R1,SB\n         BR    R9\n         SPACE\n*              GET DAY OF WEEK\n*\n*                 INPUT  - MMB, DDB, YYYYB\n*\n*                 OUTPUT - WEEKB, WEEKC\n*\n*              N = D + 2M + 3(M+1)/5 + Y + Y/4 - Y/100 + Y/400 + 2\n*\n*                 WHERE M = 3-14 (JAN,FEB ARE 13,14 OF Y-1)\n*\n*                 N/7 LEAVES REMAINDER 0-6, 0 INDICATING SATURDAY\n*\nTOWEEK   TM    3(R5),OUT064+OUT128\n         BZR   R9\n         L     R1,DDB              SET N = D\n         L     R15,CENTB\n         L     R14,MMB\n         CH    R14,=H'2'           JAN OR FEB?\n         BH    WEEKMMOK\n         BE    WEEKFEB\n         LA    R14,13              SET M=13\n         B     WEEKYMIN\nWEEKFEB  LA    R14,14              SET M=14\nWEEKYMIN BCTR  R15,0               SET Y = Y-1\nWEEKMMOK LR    R0,R14              COPY M\n         ALR   R0,R0               GET 2M\n         ALR   R1,R0               SET N = N + 2M\n         LR    R0,R15              SAVE REDEFINED Y\n         SPACE\n         LA    R14,1(,R14)         GET M+1\n         MH    R14,=H'3'           GET 3(M+1)\n         SRDL  R14,32              SHIFT INTO R15, ZERO R14\n         D     R14,=F'5'           GET 3(M+1)/5 IN R15\n         ALR   R1,R15              SET N = N + 3(M+1)/5\n         SPACE\n         LR    R15,R0              GET Y\n         ALR   R1,R15              SET N = N + Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'4'           GET Y/4\n         ALR   R1,R15              SET N = N + Y/4\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'100'         GET Y/100\n         SLR   R1,R15              SET N = N - Y/100\n         SPACE\n         LR    R15,R0              GET Y\n         SLR   R14,R14             ZERO R14\n         D     R14,=F'400'         GET Y/400\n         ALR   R1,R15              SET N = N + Y/400\n         LA    R15,2               GET 2\n         ALR   R1,R15              SET N = N + 2\n         SLR   R0,R0               ZERO R0\n         D     R0,=F'7'            SET N = N/7\n         ST    R0,WEEKB            SAVE REMAINDER\n         LR    R1,R0\n         MH    R1,=H'9'\n         LA    R14,WEEKDAYS(R1)    POINT TO NAME\n         MVC   WEEKC(9),0(R14)     MOVE NAME\n         MVC   WEEKC+9(3),WEEKBLNK PLUS 3 BLANKS\n         BR    R9\n         SPACE\n*\n*              CONVERT TIMEB TO TIMEC\n*\n*                 DIVIDE BY 10,10,10,6,10,6,10,6\n*\nTOTIME   TM    2(R5),OUT512\n         BNOR  R9\n         L     R15,TIMEB\n         LA    R6,10               INITIAL DIVISOR\n         LA    R7,12               SET DIVISOR MASK\n         LA    R8,32               SHIFT COUNT\nDECLOOP  SR    R14,R14\n         DR    R14,R6\n         LR    R0,R14              SAVE REMAINDER\n         SRDL  R0,4                SHIFT INTO R1\n         SH    R8,=H'4'            DECREMENT SHIFT COUNT\n         LTR   R15,R15             QUOTIENT ZERO?\n         BZ    TOTIMX              YES - BRANCH\n         CL    R8,=F'24'           IF COUNT LT 24\n         BNL   DECLOOP             NO - BRANCH\n         XR    R6,R7               10 TO 6 TO 10 ETC\n         B     DECLOOP\nTOTIMX   SRL   R1,0(R8)            SHIFT REMAINING BITS\n         SRL   R1,4                GET 0HHMMSST\n         ST    R1,DOUBLE\n         OI    DOUBLE+3,X'0F'\n         MVC   DOUBLE+6(10),=X'402120204B20204B2020'\n         ED    DOUBLE+6(10),DOUBLE\n         MVC   TIMEC,DOUBLE+8\n         BR    R9\n         SPACE\nOUTPUT   LR    R1,R4\n         TM    3(R5),OUT001\n         BZ    *+14\n         MVC   0(4,R1),JB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT002\n         BZ    *+14\n         MVC   0(4,R1),SB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT004\n         BZ    *+14\n         MVC   0(8,R1),SC\n         LA    R1,8(,R1)\n         TM    3(R5),OUT008\n         BZ    *+14\n         MVC   0(8,R1),ALPHA\n         LA    R1,8(,R1)\n         TM    3(R5),OUT016\n         BZ    *+14\n         MVC   0(L'PROSE,R1),PROSE\n         LA    R1,L'PROSE(,R1)\n         TM    3(R5),OUT032\n         BZ    *+14\n         MVC   0(4,R1),FRSTLAST\n         LA    R1,4(,R1)\n         TM    3(R5),OUT064\n         BZ    *+14\n         MVC   0(4,R1),WEEKB\n         LA    R1,4(,R1)\n         TM    3(R5),OUT128\n         BZ    *+14\n         MVC   0(12,R1),WEEKC\n         LA    R1,12(,R1)\n         TM    2(R5),OUT256\n         BZ    *+14\n         MVC   0(4,R1),TIMEB\n         LA    R1,4(,R1)\n         TM    2(R5),OUT512\n         BZ    *+14\n         MVC   0(8,R1),TIMEC\n         LA    R1,8(,R1)\n         BR    R9\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     13,4(,13)\n         ST    15,16(,13)\n*        FREEMAIN R,A=(1),LV=@DATAL  (COMMENT)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nDAYSPMON DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\nALPHAMON DC    CL36'JANUARY  FEBRUARY MARCH    APRIL    '\n         DC    CL36'MAY      JUNE     JULY     AUGUST   '\n         DC    CL36'SEPTEMBEROCTOBER  NOVEMBER DECEMBER '\n         DC    CL09'UNKNOWN  '\nWEEKDAYS DC    CL36'SATURDAY SUNDAY   MONDAY   TUESDAY  '\n         DC    CL27'WEDNESDAYTHURSDAY FRIDAY   '\nWEEKBLNK EQU   WEEKDAYS+15         3 BLANKS\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nINPUT    DS    CL8\nDOUBLE   DS    D\nWORK     DS    8C\nSC       DS    0CL8\nMMC      DS    CL2\nSLASH1   DS    C\nDDC      DS    CL2\nSLASH2   DS    C\nYYC      DS    CL2\nYYYYC    DS    CL4\nDDB      DS    F\nMMB      DS    F\nYYYYB    DS    F\nCENTB    DS    F\nDDDB     DS    F\nJB       DS    F\nSB       DS    F\nWEEKB    DS    F\nFRSTLAST DS    F\nTIMEB    DS    F\nTIMEC    DS    CL8\nJC       DS    0CL5\n         DS    CL2\nDDDC     DS    CL3\nMONTH    DS    CL9\nALPHA    DS    0CL8\n         DS    CL2\nMON      DS    CL3\n         DS    CL2\n         DS    CL1                 BLANK FILLER LAST BYTE OF ALPHA\nWEEKC    DS    CL12\nPROSE    DS    CL20\nDPM      DS    13H\n@DATAL   EQU   *-@DATA\n         SPACE\nINP001   EQU   1\nINP002   EQU   2\nINP003   EQU   3\nOUT001   EQU   1\nOUT002   EQU   2\nOUT004   EQU   4\nOUT008   EQU   8\nOUT016   EQU   16\nOUT032   EQU   32\nOUT064   EQU   64\nOUT128   EQU   128\nOUT256   EQU   1\nOUT512   EQU   2\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSTAT$": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FILE022"}, "text": "PROC 0\n\n/* CLIST TO EXEC SYSTAT PGM - ALSO USES 'DD' AND REVIEW FROM CBT TAPE*/\n/* NOTE: 'DD' WAS RENAMED TO 'DDD' DUE TO RACF'S COMMAND 'DD         */\n\nCONTROL MAIN\n\nATTR A LRECL(80) RECFM(F B) BLKSIZE(800) DSORG(PS)\n\nDDD SYSOUT '$' NEW USING(A)\n\nCALL 'LINKLIB(SYSTAT)'    /* OR IF IN LNKLST USE 'DOPROG SYSTAT'  */\n\nREVIEW SYSOUT FILE\n\nFREE DD(SYSOUT,A)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSTAT#": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE022"}, "text": "//SYSTAT# JOB (000000,YOUR STUFF)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE SYSTAT CODE.      *\n//*                                                                   *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=4M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(SYSTAT),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(0,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSLMOD  DD  DSN=LINKLIB(SYSTAT),DISP=SHR\n//* TEST RUN IT\n//SYSTAT  EXEC PGM=SYSTAT,COND=(0,LT)\n//STEPLIB  DD  DSN=*.LKED.SYSLMOD,DISP=SHR\n//SYSOUT   DD  SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTOPEN": {"ttr": 8712, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE022"}, "text": "         MACRO\n         TESTOPEN &DCB\n.*---------------------------------------------------------------*\n.*  FUNCTION: SEE IF DCB WAS OPENED\n.*    RETURN: RC IN R15  (RC=4 NO GOOD)\n.*---------------------------------------------------------------*\n         AIF ('&DCB' EQ '').ERR1\n         LCLC  &I\n&I       SETC  '&SYSNDX'\n         TM    &DCB+48,B'00010000'\n         BO    GOOD&I\n         LA    15,4\n         B     GOOD&I+4\nGOOD&I   LA    15,0\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TRANSL": {"ttr": 8714, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x86\\x00\\x86\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 134, "newlines": 134, "modlines": 0, "user": "FILE022"}, "text": "//TRANSL     JOB (000000,TECH),'HEDGESM',\n//            CLASS=Z,MSGCLASS=Z,\n//            NOTIFY=HEDGESM\n//*-----------------------------------------------------------------*\n//*   LIB: TS.SOURCE.CNTL(TRANSL  )                                 *\n//*  NDOC: TRANSLATION                                              *\n//*  NOTE:                                                          *\n//*-----------------------------------------------------------------*\n//ASMHCL  EXEC ASMHCL,SOUT=A\n//C.SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//          DD  DSN=SYS1.AMODGEN,DISP=SHR\n//          DD  DSN=TS.SOURCE.CNTL,DISP=SHR\n//SYSIN    DD  *\nTRANSL  CSECT                          *\n         STM   R14,R12,12(R13)         * SAVE PREVIOUS REGS\n         LR    R12,R15                 * SAVE PGM BEGIN ADDR\n         USING TRANSL,R12,R11          *\n         L     R11,SEC4K               * ADDR 2ND 4K\n         LA    R10,SAVE                * ADDR NEW SAVE AREA\n         ST    R10,8(R13)              * NEW SAVE ADDR IN OLD SAVE AREA\n         ST    R13,SAVE+4              * OLD SAVE ADDR IN NEW SAVE AREA\n         LR    R13,R10                 * R13 CONTAINS NEW SAVE ADDR\n         B     SEC4K+4                 * JUMP OVER SAVE\nSAVE     DS    18F                     * SAVE AREA FOR THIS PGM\nSAVE1    DS    1F                      *\nSEC4K    DC    A(TRANSL+4096)          * ADDR OF 2ND 4K\n         OPEN   (SYSUT1,UPDAT)         *\n         LA     R2,SYSUT1              * DCB ADDR\n         RDJFCB SYSUT1\n         ST     R2,DCBADDR             * STORE DCB ADDR\n         USING  IHADCB,R2              * MAP DCB\n         LH     R3,DCBLRECL\n         LH     R4,DCBBLKSI\n         XR     R5,R5\n         IC     R5,DCBRECFM\n         CVD    R3,DWORD               *\n         MVC    DCBLREC(8),=X'4020202020202021'\n         MVC    DCBBLKS(8),=X'4020202020202021'\n         ED     DCBLREC(8),DWORD+4     *\n         CVD    R4,DWORD               *\n         ED     DCBBLKS(8),DWORD+4     *\n         LH     R3,JFCLRECL\n         LH     R4,JFCBLKSI\n         XR     R5,R5\n         IC     R5,JFCRECFM\n         CVD    R3,DWORD               *\n         MVC    JFCLREC(8),=X'4020202020202021'\n         MVC    JFCBLKS(8),=X'4020202020202021'\n         ED     JFCLREC(8),DWORD+4     *\n         CVD    R4,DWORD               *\n         ED     JFCBLKS(8),DWORD+4     *\n*\n         XR     R3,R3\n         LH     R4,JFCLRECL\n         C      R4,=F'256'\n         BH     LOOP2\n         PRINT NOGEN\nLOOP     GET    SYSUT1                 *\n         A      R3,=F'1'               *\n         TR     0(*-*,R1),TRANS        * TRANSLATE\n         EX     R4,*-6                 * DO IT FOR LRECL LENGTH\n         PUTX   SYSUT1                 *\n         B      LOOP                   *\nLOOP2    GET    SYSUT1                 *\n         A      R3,=F'1'               *\n         LR     R5,R4                  * SAVE LRECL\n         LA     R6,256-1               * INITIAL AMOUNT\nMORE2    TR     0(*-*,R1),TRANS        * TRANSLATE\n         EX     R6,*-6                 * DO IT FOR LRECL LENGTH\n         S      R5,=F'256'\n         BNP    PUT2\n         A      R1,=F'256'\n         B      MORE2\nPUT2     A      R5,=F'256'             * ADD IT BACK\n         SR     R6,R5                  * GET DIFFERENCE: 255-C(R5)\n         AR     R1,R6                  * NEXT ADDRESS POSITION\n         TR     0(*-*,R1),TRANS        * TRANSLATE\n         EX     R6,*-6                 * DO IT FOR LRECL LENGTH\n         PUTX   SYSUT1                 *\n         B      LOOP2                  *\nEOF      CLOSE  (SYSUT1)               *\n         OPEN   (SYSUT2,OUTPUT)        *\n         CVD    R3,DWORD\n         MVC    RECORDS(8),=X'4020202020202021'\n         ED     RECORDS(8),DWORD+4     *\n         PUT    SYSUT2,INFO            *\n         CLOSE  (SYSUT2)               *\n         PRINT  GEN\nFINISH   SR     R15,R15                * ZERO RETURN REGISTER\n         L      R13,SAVE+4             * RESTORE OLD SAVE AREA ADDR.\n         L      R14,12(R13)            * RETURN ADDRESS\n         LM     R0,R12,20(R13)         * REST OF THE REGS\n         BR     R14                    * RETURN\n         SPACE 2\n         PRINT  NOGEN\nSYSUT1 DCB DDNAME=SYSUT1,DSORG=PS,MACRF=(GL,PL),EODAD=EOF,EXLST=EXTLST\nSYSUT2 DCB DDNAME=SYSUT2,DSORG=PS,MACRF=PM,LRECL=80,RECFM=FB\n         PRINT  GEN\nINFO     DC     CL80' '                *\n         ORG    INFO\n         DC     C'INFO  DCBLRECL='\nDCBLREC  DC     CL8' '\n         DC     C' DCBBLKSI='           *\nDCBBLKS  DC     CL8' '\n         DC     C' JFCLRECL='           *\nJFCLREC  DC     CL8' '\n         DC     C' JFCBLKSI='           *\nJFCBLKS  DC     CL8' '\n         DC     C' RECORDS='            *\nRECORDS  DC     CL8' '\n         ORG\nDCBADDR  DS     F\n         DS    0D\nDWORD    DS     D\nTRANS    EQU    *\n*        COPY   EBCDIC\n         DC   74C' '\n         DC   C'\u00a2.<(+|',X'50',9C' ',C'!$*);\u00ac-/',8C' ',C'\u00a6,%_>?'\n         DC   9C' ',C'`:#@',X'7D',C'=\"',1C' '\n         DC   C'abcdefghi',7C' ',C'jklmnopqr',8C' ',C'stuvwxyz',23C' '\n         DC   C'ABCDEFGHI',7C' '\n         DC   C'JKLMNOPQR',8C' ',C'STUVWXYZ',6C' ',C'0123456789',C'|'\n         DC   5C' '\nEXTLST   DC    X'87',AL3(JFCB)\nJFCB     EQU   *\n TITLE '>>>>    JFCB <<<<'\n         IEFJFCBN  LIST=NO\n         LTORG\n TITLE '>>>>    DCBD <<<<'\n         PRINT NOGEN\n         DCBD   DSORG=PS,DEVD=DA\n         REGS\n         END\n//L.SYSLMOD DD  DSN=HEDGESM.LINKLIB(TRANSL),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBJCL": {"ttr": 8717, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xd2\\x00\\xd2\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 210, "newlines": 210, "modlines": 0, "user": "FILE022"}, "text": " TITLE '       WRITE ONLINE-DASD-NON/STORAGE-UCB''S TO SYSOUT DATASET'\nUCBJCL    CSECT\n          STM    R14,R12,12(R13)       * SETUP\n          LR     R12,R15\n          USING  UCBJCL,R12,R11       * R12, AND R11 BASE REGS\n          B      *+24\n          DC     C'&SYSDATE_&SYSTIME_V1.0'\n          L      R11,BASE2\n          LA     R10,SAVE\n          ST     R10,8(R13)\n          ST     R13,SAVE+4\n          LR     R13,R10\n          B      START\nBASE2     DC     A(UCBJCL+4096)\nBALREG    EQU    14\nCVTADR    EQU    2\nUCBADR    EQU    3\nUCBEXT1   EQU    4\nSTART     DS     0H\n$READJCB  DS     0H\n          RDJFCB SYSOUT                * DDNAME ALLOCATED ?\n          LTR    R15,R15               * TEST RESULTS\n          BNZ    $ERROR1               * NOPE, DO TPUTS\n          OPEN   (SYSOUT,OUTPUT)       * OPEN SYSOUT FILE\n          TESTOPEN SYSOUT              * IS DDNAME THERE\n          LTR    R15,R15               * TEST OPEN\n          BNZ    $ERROR1               * NOPE, DO TPUTS\n$UCBSCAN  DS     0H\n          PUT    SYSOUT,JOBCARD        * PUT JOB CARD\n          PUT    SYSOUT,ROOM           * PUT ROOM CARD\n          PUT    SYSOUT,EXECARD        * PUT EXEC CARD\n          PUT    SYSOUT,SYSPRINT       * PUT EXEC CARD\n          XR     R1,R1                 * CLEAR - USED FOR 'CONVADR'\n          XR     R2,R2                 * CLEAR - USED FOR CVT ADDR\n          XR     R3,R3                 * CLEAR - USED UCB ADDR (DSECT)\n          XR     R4,R4                 * CLEAR - WORK\n          XR     R5,R5                 * USED\n          XR     R6,R6                 *      FOR\n          XR     R7,R7                 *               DETERMIN-\n          LA     R7,VOLTBL             * VOLSER TABLE\n          XR     R8,R8                 * NUMBER OF VOLUMES\n          XC     WORKAREA,WORKAREA     * CLEAR R AREA\n          L      R2,CVTPTR             * CVT POINTER\n          USING  CVT,R2                * ADDRES CVT\n          SPACE\nUCBLOOK   L      R15,CVTUCBSC          * UCB SCAN ROUTINE: V-CONSTANT\n          CALL   (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n          LTR    R15,R15               * GOOD CALL ?\n          BNZ    $ENDUCB               * NOPE, ALL DONE\n          L      R3,ADDRUCB            * ADDRESS OF UCB\n          LTR    R3,R3                 * WAS ONE RETURNED ???\n          BZ     UCBLOOK               * TRY AGAIN\n          USING  UCB,R3                * ADDRESS IT\n          LA     R4,UCBPRFX            * LENGTH OF UCB PREFIX\n          SR     R3,R4                 * ADDRESS PREFIX\n          CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ???\n          BNE    UCBLOOK               * NOPE, LOOK AGAIN\n          MVC    UNITNAM(3),UCBNAME    * EBCDIC UCB NAME\n          XR     R5,R5                 * CLEAR\n          MVC    STATUS(L'STATUS),BLANKS\n          SPACE\n*     ONLINE  ?\n          CLI    UCBSTAT,UCBONLI\n          BL     UCBLOOK                * BRANCH IF LOW\n*     ONLINE, ALLOCATED, PERM, SYSRES ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(10),=C'A-RES-PERM'  * SYSRES-ONLINE\n*     ONLINE, ALLOCATED, PERM  ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES\n          BNE    *+10\n          MVC    STATUS(8),=C'O-A-PERM'\n*     ONLINE, ALLOCATED  ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC\n          BNE    *+10\n          MVC    STATUS(3),=C'O-A'       * ALLOCATED ONLINE\n*     ONLINE, PERM  ?\n          CLI    UCBSTAT,UCBONLI+UCBPRES\n          BNE    *+10\n          MVC    STATUS(6),=C'O-PERM'    * PERM-ONLINE NOT ALLOC\n*     ONLINE, PERM, SYSRES?\n          CLI    UCBSTAT,UCBONLI+UCBPRES+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(10),=C'O-RES-PERM'  * SYSRES-ONLINE\n*     ONLINE, CONSOLE ?\n          CLI    UCBSTAT,UCBONLI+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(3),=C'O-C'           * CONSOLE\n*--------------------------------------*\n* R2 = ADDR(CVT)                       *\n* R3 = ADDR(UCB)                       *\n* R4 = ADDR(UCBEXT1)                   *\n*--------------------------------------*\n          XR     R4,R4                 * UCB EXTENSION\n          XR     R5,R5                 * WORK\n          L      R4,UCBEXTPT           * EXTENSION\n          USING  UCBCMEXT,R4           * ADDRESS IT\n$DASD     EQU    *                     *\n          CLI    #TYPE4,DA4HEX07       * 2305 FIXED HEAD\n          BNE    *+10\n          MVC    DEVT(4),=C'2305'\n          CLI    #TYPE4,DA4HEX09       * 3330-1,2\n          BNE    *+10\n          MVC    DEVT(4),=C'3330'\n          CLI    #TYPE4,DA4HEX0A       * 3340\n          BNE    *+10\n          MVC    DEVT(4),=C'3340'\n          CLI    #TYPE4,DA4HEX0B       * 3350\n          BNE    *+10\n          MVC    DEVT(4),=C'3350'\n          CLI    #TYPE4,DA4HEX0C       * 3375\n          BNE    *+10\n          MVC    DEVT(4),=C'3375'\n          CLI    #TYPE4,DA4HEX0D       * 3330-11\n          BNE    *+10\n          MVC    DEVT(4),=C'3330'\n          CLI    #TYPE4,DA4HEX0E       * 3380\n          BNE    *+10\n          MVC    DEVT(4),=C'3380'\n          CLI    UCBSTAB,UCBBSTR                  * JUST STORAGE\n          BNE    *+14\n          B      UCBLOOK               * DON'T MAP STORAGE DEVICES\n* ISSUE THE CVAFTST MACRO TO DETERMINE IF INDEXED VTOC'S ON ???\n          SPACE\n          L      R5,ADDRUCB\n          CVAFTST  UCB=(5)\n          C      R15,=F'8'             * IS RC=8, SYSTEM SUPP, INDEXED\n          BNE    $NOINDEX              * SKIP ALL OTHERS\n          MVC    STATUS+8(4),=C'INDX'\n$NOINDEX  MVC    VOL1(6),UCBVOLI     * SAVE VOLSER\n          MVC    VOL2(6),UCBVOLI     * SAVE VOLSER\n          MVC    OVOL1(6),UCBVOLI    * SAVE VOLSER\n          MVC    OVOL2(6),UCBVOLI    * SAVE VOLSER\n          MVC    0(6,R7),UCBVOLI     * SAVE VOLSER\n          A      R8,=F'1'            * FOR VOLSER TABLE\n          A      R7,=F'6'            * NEXT IN TABLE\n          PUT    SYSOUT,VOLINE\n          PUT    SYSOUT,TAPEOUT1\n          PUT    SYSOUT,TAPEOUT2\n          B      UCBLOOK\n$ERROR1   DS     0H\n          B      $FINE\n$ENDUCB   PUT    SYSOUT,SYSIN          *\n          LA     R7,VOLTBL             *\n$UCBLOOP  EQU    *\n          MVC    VOLCARD1(6),0(R7)     *\n          MVC    VOLCARD2(6),0(R7)     *\n          PUT    SYSOUT,MAPCARD\n          A      R7,=F'6'\n          BCT    R8,$UCBLOOP\n          CLOSE  (SYSOUT)\n$FINE     SR     R15,R15               *\n          L      R13,SAVE+4            * RESTORE OLD SAVE AREA ADDR.\n          L      R14,12(R13)           * RETURN ADDRESS\n          LM     R0,R12,20(R13)        * REST OF THE REGS\n          BR     R14                   * RETURN\n          EJECT\n TITLE 'DATA SECTION - CONSTANTS'\nSAVE      DS     18F                   * SAVE AREA\n          DS     0D\nDWORD     DS     D                     * DOUBLE WORD\nBLANKS    DC     CL80' '\n SPACE\nJOBCARD   DC     CL80'//TECHSUPP JOB (000000),TECHSUPPORT,'\nROOM      DC     CL80'/*JOBPARM ROOM=TECH'\nEXECARD   DC     CL80'//S1  EXEC PGM=ADRDSSU,REGION=6M'\nSYSPRINT  DC     CL80'//SYSPRINT  DD  SYSOUT=A'\n*\nVOLINE    DC     CL2'//'\nVOL1      DC     CL8' ',CL4'DD',CL5'UNIT='\nDEVT      DC     CL4' ',CL9',VOL=SER='\nVOL2      DC     CL6' ',CL10',DISP=OLD'\nUNITNAM   DC     CL4' '\n          DC     CL4' '\nSTATUS    DC     CL10' '\nFILLER1   DC     CL(80-(*-VOLINE))' '\n*\nTAPEOUT1  DC     C'//T'\nOVOL1     DC     C'       DD  UNIT=TAPE,DSN=TS.BK'\nOVOL2     DC     CL(80-(*-TAPEOUT1))'      .GDG(+1),'\nTAPEOUT2  DC     CL80'//        DCB=MODELDCB,DISP=(,CATLG)'\n*\nSYSIN     DC     CL80'//SYSIN    DD   *'\nMAPCARD   DC     C'  DUMP  INDD('\nVOLCARD1  DC     C'      )   OUTDD(T'\nVOLCARD2  DC     CL(80-(*-MAPCARD))'      )'\nVOLTBL    DC     100CL6' '\n*\n*\n*--------------------  USED IN  UCB SCAN ROUTINE -------------------*\nADDRUCB   DS     A                     *\nWORKAREA  DC     XL100'00'             *\nDEVCLASS  DC     X'20'                 * DASD ONLY DEVICE CLASS\n*-------------------------------------------------------------------*\n*\nOREC      DS     CL80\n          PRINT NOGEN\nSYSOUT    DCB  DDNAME=SYSOUT,LRECL=80,RECFM=FB,DSORG=PS,EXLST=EXL,     X\n               MACRF=PM\nEXL       DC    X'87',AL3(JFCB)\nJFCB      DS    176C\n          LTORG\n          TITLE 'CVT'\n          CVT    DSECT=YES\n          TITLE 'IEFUCBOB'\n          IEFUCBOB PREFIX=YES,LIST=NO\n          TITLE 'UCBTYPES EQUATES'\n          UCBTYPES\n          REGS\n          END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBJCL#": {"ttr": 8721, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE022"}, "text": "//HEDGES JOB (000000,TECH),'HEDGES-TECH',CLASS=Z,MSGCLASS=X\n// EXEC PGM=UCBJCL\n//STEPLIB DD DSN=HEDGESM.LINKLIB,DISP=SHR\n//SYSOUT DD SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSCAN": {"ttr": 8961, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x04\\x1a\\x04\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 1050, "newlines": 1050, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             MODULE NAME = UCBSCAN                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME =  UNIT CONTROL BLOCK SCANNING ROUTINE *\n*                THIS PROGRAM SCAN ALL OR SELECTIVE UCB'S, AND        *\n*                DISPLAYS OR PRINTS THE INFORMATION                   *\n*                                                                     *\n*             OPERATING ENVIRONMENT = MVS/XA 2.1 AND ABOVE            *\n*                                                                     *\n*             FUNCTION =                                              *\n*                DISPLAY UNIT-ADDRESSES AND ASSOCIATED CHANNEL-PATHS  *\n*                                                                     *\n*             NOTES =  SOME                                           *\n*                                                                     *\n*              REGISTER USAGE:                                        *\n*                                                                     *\n*                          R1 ..... PASSING PARMS                     *\n*                          R2 ..... ADDRESSING OF CVT PREFIX          *\n*                          R3 ..... ADDRESSING OF UCB                 *\n*                          R4 ..... ADDRESSING OF UCB EXTENSION       *\n*                          R5 ..... WORK REG: VARIABLE                *\n*                          R6 ..... WORK REG: VARIABLE                *\n*                          R7 ..... WORK REG: VARIABLE                *\n*                          R8 ..... WORK REG: VARIABLE                *\n*                          R9 ..... LINES PER PAGE COUNTER            *\n*                         R10 ..... LINE COUNTER                      *\n*     BASE2               R11 ..... BASE+4096                         *\n*                         R12 ..... BASE REG                          *\n*                         R13 ..... OPEN                              *\n*                  BALREG,R14 ..... FOR BRANCHING                     *\n*                         R15 ..... USUAL                             *\n*                                                                     *\n*             MACROS = IBM: CVT, IHAASCB, IHAPSA, IEFUCBOB, DCB,      *\n*                           RDJFCB, LSPACE(SVC 78), CVAFTST           *\n*                    OTHER: UCBTYPES - (SEE DEBUGGING-VOLUME 5)       *\n*                                      IT LISTS DEVICE TYPES          *\n*                           MODE - SET AMODE                          *\n*                           TESTOPEN - CHECK FOR OPEN DCB (SET RC)    *\n*                                                                     *\n*             DSECTS = IBM: CVT, IHAASCB, IHAPSA, IEFUCBOB            *\n*                                                                     *\n*                    OTHER: NONE                                      *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASHM                                     *\n*                                                                     *\n*             ENTRY POINTS = UCBSCAN  (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = NONE                                            *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             OUTPUT = TO DDNAME SYSOUT, TPUT'S UNDER TMP,            *\n*                      OR  WTO'S IF RUNNING AS A STARTED TASK !!!     *\n*                                                                     *\n*                      (NOTE: SYSOUT IS OPENED AS A DSORG=PS FILE     *\n*                             RECFM=FBA,LRECL=133)                    *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES -                               *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST RD.                                  *\n*                      DUBLIN OH  43017                               *\n*                      (614) 764-8175                                 *\n*                                                                     *\n*             ACKNOWLEDGEMENTS = CANDEL REPORT FROM 1983 ON XA/UCB    *\n*                                PROCESSING                           *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n* NOTE1: EACH SUB-SECTION STORES THE 'BALREG' AS ITS FIRST INSTR.     *\n*       AND AS ITS LAST IT LOADS IT. SO THE INTEGRITY OF THAT         *\n*       REGISTER IS NEVER IN QUESTION.                                *\n*                                                                     *\n* NOTE2: ALL MODE-SETTING NECCESSARY TO ADDRESS EXTENDED STORAGE      *\n*        IS PERFORMED IN THE SUB-SECTION.                             *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* ATTEMPT TO ADD EXTENSION SECTION FOR ALL UCBS   - 10/29/86          *\n*                                                                     *\n*                                                                     *\n* -----------------------  NEEDED MODS -------------------------------*\n*                                                                     *\n* RE-ENTERENT ?                                                       *\n* OTHER DEVICE TYPE SUPPORT ?                                         *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n TITLE '       UNIT CONTROL BLOCK SCAN'\nUCBSCAN   CSECT\n          STM    R14,R12,12(R13)       * SETUP\n          LR     R12,R15\n          USING  UCBSCAN,R12,R11       * R12, AND R11 BASE REGS\n          B      *+24\n          DC     C'&SYSDATE_&SYSTIME_V1.0'\n          L      R11,BASE2\n          LA     R10,SAVE\n          ST     R10,8(R13)\n          ST     R13,SAVE+4\n          LR     R13,R10\n          B      START\nBASE2     DC     A(UCBSCAN+4096)\n* NOTE: LOOK @ +8(UCBNXUCB) ADDR OF NEXT UCB IN IEFUCBOB\n          SPACE\nBALREG    EQU    14\nCVTADR    EQU    2\nUCBADR    EQU    3\nUCBEXT1   EQU    4\n          ST     R1,PARMADR\n          SPACE\nSTART     DS     0H\n          BAL    BALREG,$PARM          * PARM PROCESSINF FOR DEVT'S\n          BAL    BALREG,$GETDATE       * GET TODAYS DATE AND TIME\n          BAL    BALREG,$WHOARE        * ARE WE TSO/BATCH ????\n          BAL    BALREG,$WTORS         * IF STC THEN ISSUE WTOR\n          BAL    BALREG,$READJCB       * READ JFCB\n          BAL    BALREG,$UCBSCAN       * UCB LOOK-UP\n          B      $FINE\n          EJECT\n$PARM     DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          L      R2,0(,R1)             * LOAD PARM\n          LH     R3,0(,R2)             * LOAD PARM LENGTH\n          LTR    R3,R3                 * ANY PARM\n          BZ     $PARMEND              * NOPE, END\n          CLC    2(4,R2),=C'TAPE'      * TAPE ONLY ?\n          BE     $PARMTP\n          CLC    2(4,R2),=C'DASD'      * DASD ONLY ?\n          BE     $PARMDA\n          CLC    2(4,R2),=C'DISK'      * DISK ONLY ?\n          BE     $PARMDA\n          CLC    2(4,R2),=C'COMM'      * COMM ONLY ?\n          BE     $PARMCM\n          CLC    2(2,R2),=C'UR'        * UNIT-RECORD ONLY ?\n          BE     $PARMUR\n          CLC    2(7,R2),=C'DISPLAY'   * DISPLAY ONLY ?\n          BE     $PARMDL\n          CLC    2(4,R2),=C'CHAR'      * CHAR-READER ONLY ?\n          BE     $PARMCH\n          CLC    2(2,R2),=C'ON'        * CHAR-READER ONLY ?\n          BE     $PARMON\n          CLC    2(6,R2),=C'ONLINE'    * CHAR-READER ONLY ?\n          BE     $PARMON\n          B      $PARMEND              *  END\n$PARMTP   MVI    DEVCLASS,#TAPECL\n          B      $PARMEND              *  END\n$PARMDA   MVI    DEVCLASS,#DASDCL\n          B      $PARMEND              *  END\n$PARMCM   MVI    DEVCLASS,#COMMCL\n          B      $PARMEND              *  END\n$PARMUR   MVI    DEVCLASS,#URCL\n          B      $PARMEND              *  END\n$PARMDL   MVI    DEVCLASS,#DSPCL\n          B      $PARMEND              *  END\n$PARMCH   MVI    DEVCLASS,#CHARCL\n          B      $PARMEND              *  END\n$PARMON   MVI    ONFLG,X'FF'           * SET ONLINE FLAG\n          B      $PARMEND              *  END\n$PARMEND  L      BALREG,BALSAVE        * LOAD BAL REG\n          BR     BALREG\n         EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n* GET CURRENT DATE AND TIME INFO. AND STORE IT.                       *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         SPACE\n$GETDATE  DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          $STCK                        * GET AND FORMAT DAT+TIME\n          SPACE\n          MVC    #WEEKDAY(9),XWEEKDAY  * WEEK-DAY, WORDS\n          MVC    #MONTH(9),XMONTH      * MONTH, WORDS\n          MVC    #JDATE(6),XJDATE      * JULIAN DATE\n          MVC    #TIME(8),XTIME        * HH:MM:SS\n          MVC    #DAY(2),XDATE+3       *    DD\n          MVC    #YEAR(2),XDATE+6      *       YY\n          L      BALREG,BALSAVE        * RELOAD BAL REG\n          BR     BALREG                * RETURN\n          EJECT\n$WHOARE   DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          SPACE\nBATCH     EQU    C'0'                  * BATCH FLAG - DEFAULT\nTSO       EQU    C'T'                  * TSO FLAG\nSTC       EQU    C'S'                  * BATCH FLAG\n          SPACE\n          L      R2,CVTPTR            * CVT\n          USING  CVT,R2               *\n          L      R1,CVTTCBP           * CVTTCBP -\n          DROP   R2\n*                                     * ADDR OF A DW   NEXT+CUR. TCB\n          ST     R1,DWORD             * SAVE IT\n          LM     R1,R2,DWORD          * CVTTCBP - DWORD NEXT+CUR. TCB\n          USING  PSA,R2               * PSA - PREFIXED SAVE AREA\n          L      R3,PSAAOLD           * ASCB OLD POINTER.\n          DROP   R2                   * DROP'M, EXCEPT ASCB IN R4\n*----------------------------------------------------------------*\n* GET THE ASCB INTO R3\n* -- CHECK CONTENTS OF ASCBTSB\n*    -- IF ZERO, COULD BE BATCH/STC\n*       -- CHECK ASCBJBNI, NON-ZERO FOR INITAITED TASKS\n*          -- IF ZERO THEN STC = C'S'\n*          -- IF NON-ZERO THEN BATCH = C'B'\n*    -- IF NON-ZERO THEN TSO = C'T'\n*----------------------------------------------------------------*\n          USING  ASCB,R3              * ASCB - ADDR SPACE C. B.\n          L      R4,ASCBTSB           * ADDR OF TSB\n          LTR    R4,R4                * IS IT ZERO ? (BATCH/STC)\n          BZ     $TBATCH              * YEP, BATCH/STC\n$TSO      MVI    FLG,TSO              * NOPE, TSO\n          L      R15,=F'0'            * SET RC FOR TSO = 00\n          L      R10,=F'21'           * LINE COUNT LEN\n          B      $OASCB\n*                                     * ... AND PASS ASCB IN R4\n          SPACE\n$TBATCH   CLC    ASCBJBNI(4),=X'00000000' * ADDR OF INIT TASK: IF BATCH\n          BE     $STC\n$BATCH    MVI    FLG,BATCH\n          L      R15,=F'4'            * SET RC FOR BATCH = 04\n          L      R10,=F'50'           * LINE COUNT MAX\n          B      $OASCB\n$STC      MVI    FLG,STC\n          L      R15,=F'8'            * SET RC FOR STC = 08\n          L      R10,=F'15'           * LINE COUNT MAX\n$OASCB    ST     R15,WHOFLG           * STORE RETURN CODE\n          ST     R10,LINECNT\n          L      BALREG,BALSAVE       * LOAD BAL REG\n          DROP   R3\n          BR     BALREG               * RETURN\n          DS     0F\n          EJECT\n$WTORS    DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          CLI    FLG,STC\n          BNE    $WTOREND\n          WTOR   'UCB01 ENTER ''DASD'' ''TAPE'' ''COMM'' OR ''ALL''',  X\n               ANSWER,4,RECB,ROUTCDE=(1),DESC=(11)\n          WAIT   ECB=RECB\n          XC     RECB,RECB\n          CLC    ANSWER(4),=C'TAPE'\n          BE     $WTOTAPE\n          CLC    ANSWER(4),=C'DASD'\n          BE     $WTODASD\n          CLC    ANSWER(4),=C'COMM'\n          BE     $WTOCOMM\n          CLC    ANSWER(4),=C'ALL'\n          BE     $WTOALL\n          B      $WTOREND              *  END\n$WTOTAPE  MVI    DEVCLASS,#TAPECL\n          B      $WTOREND              *  END\n$WTODASD  MVI    DEVCLASS,#DASDCL\n          B      $WTOREND              *  END\n$WTOCOMM  MVI    DEVCLASS,#COMMCL\n          B      $WTOREND              *  END\n$WTOALL   EQU    *                     * LIST ALL UCBS\n$WTOREND  L      BALREG,BALSAVE        * SAVE BAL REG\n          BR     BALREG                * RETURN\n          EJECT\n$READJCB  DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          RDJFCB SYSOUT                * DDNAME ALLOCATED ?\n          LTR    R15,R15               * TEST RESULTS\n          BNZ    $ENDREAD              * NOPE, DO TPUTS\n          OPEN   (SYSOUT,OUTPUT)       * OPEN SYSOUT FILE\n          TESTOPEN SYSOUT              * IS DDNAME THERE\n          LTR    R15,R15               * TEST OPEN\n          BNZ    $ENDREAD              * NOPE, DO TPUTS\n          MVI    OPENFLG,X'FF'         * GOOD OPEN, SET FLAG\nOPEN      EQU    X'FF'                 * ...FOR CLI'S\n$ENDREAD  L      BALREG,BALSAVE        * LOAD BAL REG\n          BR     BALREG                * RETURN\n          EJECT\n$UCBSCAN  DS     0H\n          ST     BALREG,BALSAVE        * SAVE BAL REG\n          XC     WORKAREA,WORKAREA     * CLEAR R AREA\n          XR     R1,R1                 * CLEAR - USED FOR 'CONVADR'\n          XR     R2,R2                 * CLEAR - USED FOR CVT ADDR\n          XR     R3,R3                 * CLEAR - USED UCB ADDR (DSECT)\n          XR     R4,R4                 * CLEAR - WORK\n          XR     R5,R5                 * USED\n          XR     R6,R6                 *      FOR\n          XR     R5,R5                 *          PATH\n          XR     R7,R7                 *               DETERMIN-\n          XR     R8,R8                 *                         ATION\n          XR     R10,R10               * INNER BAL REG\n          BAL    R10,$HEADER           * PRINT HEADER RECORD\n          L      R2,CVTPTR             * CVT POINTER\n          USING  CVT,R2                * ADDRES CVT\n          SPACE\nUCBLOOK   DS     0H\n          C      R9,LINECNT            * COMPARE LINE COUNT\n          BL     *+8                   * EQUAL DUE TO BATCH LINE/CNT\n          BAL    R10,$HEADER           * PRINT HEADER RECORD\n          L      R15,CVTUCBSC          * UCB SCAN ROUTINE: V-CONSTANT\n          CALL   (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n          LTR    R15,R15               * GOOD CALL ?\n          BNZ    $UCBEND               * NOPE, ALL DONE\n          L      R3,ADDRUCB            * ADDRESS OF UCB\n          LTR    R3,R3                 * WAS ONE RETURNED ???\n          BZ     UCBLOOK               * TRY AGAIN\n          USING  UCB,R3                * ADDRESS IT\n          LA     R4,UCBPRFX            * LENGTH OF UCB PREFIX\n          SR     R3,R4                 * ADDRESS PREFIX\n          CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ???\n          BNE    UCBLOOK               * NOPE, LOOK AGAIN\n          MVC    UNITNAM(3),UCBNAME    * EBCDIC UCB NAME\n          CLC    UNITNAM(3),OLDUCB     * COMPARE OLDUCB W/NEW\n          BE     UCBLOOK               *\n          MVC    OLDUCB(3),UNITNAM     * MAKE CURRENT VALID OLDONE\n          XR     R5,R5                 * CLEAR\n          LH     R5,UCBSCHNO           * SUB-CHANNEL NUMBER\n          SLL    R5,8                  * R5: 00SS SS00\n          ST     R5,#SCHANO            * ...STORE IT\n          OI     #SCHANO+3,X'F0'       * #SCHANO: 00SS SSF0\n          L      R5,#SCHANO            * R5: 00SS SSF0\n          SRL    R5,4                  * R5: 000S SSSF - PACKED\n          ST     R5,#SCHANO            * STORE IT\n          ED     EDSCHANO(6),#SCHANO+1 * EDIT RESULTS\n          MVC    SCHANO(4),EDSCHANO+2  * SAVE RESULTS\n          SPACE\n* PATH DETERMINATION\n          SPACE\n          MVC    PATHS(8),BLANKS       * PATHS, SAVE'M\n          MVC    PATHS(8),UCBCHPID     * PATHS, SAVE'M\n          LA     R5,PATHS-1            * LOAD ADDRESS OF PATHS\n          LA     R6,8                  * MAX CHANNEL PATHS\n          MVC    #CHPIDS(32),BLANKS    * CLEAR WORK AREA\n          LA     R8,#CHPIDS-4          * CHPID TABLE ADDR\nPATHLOOP  LA     R5,1(,R5)             * LOAD NEXT ADDR\n          CLI    0(R5),X'FF'           * EMPTY CHPID ?\n          BE     PATHDONE              * YEP, ALL DONE\n          XR     R7,R7                 * CLEAR\n          IC     R7,0(R5)              * LOAD CHPID\n          SLL    R7,8                  * SHIFT\n          IC     R7,=X'F0'             * NOW R7='0000 NNF0'\n          SRL    R7,4                  * NOW R7='0000 0NNF' PACKED!\n          STH    R7,PPATHS             * STORE IT\n          A      R8,=F'4'              * NEXT ADDR IN TABLE\n          MVC    0(4,R8),EDITPATH      * MOVE EDIT\n          ED     0(4,R8),PPATHS        * EDIT RESULTS\n          BCT    R6,PATHLOOP           * LOOP UPTO 8 TIMES\nPATHDONE  DS     0H                    * USE ONLY 1ST 4 CHANNEL PATHS\n          MVC    CHPIDS(12),BLANKS\n          MVC    OREC+1(132),BLANKS\n          MVC    CHPIDS(2),#CHPIDS+2   * MOVE/SAVE CHANNEL PATHS\n          MVC    CHPIDS+3(3),#CHPIDS+4+2\n          MVC    CHPIDS+3+3(3),#CHPIDS+4+4+2\n          MVC    CHPIDS+3+3+3(3),#CHPIDS+4+4+4+2\n* FROM OFFSET +18 OFF UCB, EVLUATE UCB DEVICE CLASSES: UCBDVCLS -\n*      SAME AS UCBTBYT3\n* NOTE: AT +X'10' - +X'13' IS USED BY UCBTYPES MACRO\n*\n* UCB STATUS ....\n*\n          MVC    STATUS(L'STATUS),BLANKS         * CLEAR STATUS ADDR\n          XR     R7,R7\n          IC     R7,UCBSTAT\n          SRL    R7,4\n          SLL    R7,4\n*     ONLINE  ?\n          CLI    UCBSTAT,UCBONLI\n          BL     $OFFLNE                * BRANCH IF LOW\n*     ONLINE, ALLOCATED, PERM, SYSRES ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(10),=C'A-RES-PERM'  * SYSRES-ONLINE\n*     ONLINE, ALLOCATED, PERM  ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC+UCBPRES\n          BNE    *+10\n          MVC    STATUS(8),=C'O-A-PERM'\n*     ONLINE, ALLOCATED  ?\n          CLI    UCBSTAT,UCBONLI+UCBALOC\n          BNE    *+10\n          MVC    STATUS(3),=C'O-A'       * ALLOCATED ONLINE\n*     ONLINE, PERM  ?\n          CLI    UCBSTAT,UCBONLI+UCBPRES\n          BNE    *+10\n          MVC    STATUS(6),=C'O-PERM'    * PERM-ONLINE NOT ALLOC\n*     ONLINE, PERM, SYSRES?\n          CLI    UCBSTAT,UCBONLI+UCBPRES+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(10),=C'O-RES-PERM'  * SYSRES-ONLINE\n*     ONLINE, CONSOLE ?\n          CLI    UCBSTAT,UCBONLI+UCBSYSR\n          BNE    *+10\n          MVC    STATUS(3),=C'O-C'           * CONSOLE\n*     ONLINE, SECONDARY CONSOLE\n          CLI    UCBSTAT,UCBONLI+UCBDADI\n          BNE    *+10\n          MVC    STATUS(7),=C'O-2ND-C'\n          CLI    STATUS,C' '           * ANY DETERMIATION YET ?\n          BNE    $UCBSTX               * YEP, GO HOME\n          MVC    STATUS(5),=C'O-PUB'   * NOPE, PUBLIC ONLINE\n          CLI    0(R7),UCBRESV         * RESERVED BIT ON ?\n          BNE    *+8\n          MVI    RSVD,C'R'\n          B      $UCBSTX               * NOW GO HOME\n*     OFFLINE\n$OFFLNE   CLI    UCBSTAT,UCBCHGS       * STATUS OF UCB: CHANGING ?\n          BE     $CHNG                 * YEP, TELL US\n          MVC    STATUS(3),=C'OFF'     * NOPE, OFFLINE\n          CLI    ONFLG,X'FF'\n          BE     UCBLOOK               * SKIP RECORD\n          B      $UCBSTX               *\n$CHNG     MVC    STATUS(3),=C'CHG'     * YEP, CHANGING\n$UCBSTX   DS     0H\n*\n* DEVICE STATUS FLAGS FOR DISABLED UCB'S\n*\n          MVC    DEVFLAGS(L'DEVFLAGS),BLANKS\n* UCB FLAG BYTE A\n          XR     R7,R7                 * CLEAR R7\n          XR     R8,R8                 * CLEAR R8: DEVICE FLG ADR\n          LA     R8,DEVFLAGS           * ADDR OF DEVICE FLAGS\n          IC     R7,UCBFLA             * INSERT UCB FLAG 1\n          LTR    R7,R7                 * CHECK FOR FLAGS\n          BZ     $ENDEV1               * END, DEVICE FLAG CHK ONE\n          ST     R7,#UCBFLG            * STORE IT\n          SRL    R7,4                  * SHIFT SO R7: 0000 000X\n          SLL    R7,4                  * SHIFT SO R7: 0000 00X0\n          STC    R7,#UCBFLGC           * STORE HALF FLAG\n*  UCB TEMP UNUSABLE, NOT-READY, SUB-CHAN UNUSABLE, PENDING SENSE\n          CLI    #UCBFLGC,UCBDEFER\n          BNE    *+14\n          MVC    0(5,R8),=C'DEFRD'\n          A      R8,=F'6'\n          CLI    #UCBFLGC,UCBNRY\n          BNE    *+14\n          MVC    0(4,R8),=C'NRDY'\n          A      R8,=F'5'\n          CLI    #UCBFLGC,UCBPERM\n          BNE    *+14\n          MVC    0(14,R8),=C'SUBCH-UNUSABLE'\n          A      R8,=F'15'\n          CLI    #UCBFLGC,UCBPSNS\n          BNE    *+14\n          MVC    0(13,R8),=C'PENDING-SENSE'\n          A      R8,=F'14'\n*     NEXT NIBBLE ....\n          L      R7,#UCBFLG            * R7: 0000 00XX\n          SLL    R7,28                 * R7: X000 0000\n          SRL    R7,28                 * R7: 0000 000X\n          LTR    R7,R7\n          BZ     $ENDEV1\n          STC    R7,#UCBFLGC           * STORE HALF FLAG\n*     SSCH, HSCH, CSCH, BOXED ?\n          CLI    #UCBFLGC,UCBSTRT\n          BNE    *+14\n          MVC    0(4,R8),=C'SSCH'\n          A      R8,=F'5'\n          CLI    #UCBFLGC,UCBHALT\n          BNE    *+14\n          MVC    0(4,R8),=C'HSCH'\n          A      R8,=F'5'\n          CLI    #UCBFLGC,UCBCLEAR\n          BNE    *+14\n          MVC    0(4,R8),=C'CSCH'\n          A      R8,=F'5'\n          CLI    #UCBFLGC,UCBBOX\n          BNE    *+14\n          MVC    0(8,R8),=C'BOXED !!'\n          A      R8,=F'9'\n$ENDEV1   DS     0H\n* UCB FLAG BYTE B\n          XR     R7,R7                 * CLEAR R7\n          IC     R7,UCBFLB             * INSERT UCB FLAG 1\n          LTR    R7,R7                 * CHECK FOR FLAGS\n          BZ     $ENDEV2               * END, DEVICE FLAG CHK ONE\n          ST     R7,#UCBFLG            * STORE IT\n          SRL    R7,4                  * SHIFT SO R7: 0000 000X\n          SLL    R7,4                  * SHIFT SO R7: 0000 00X0\n          STC    R7,#UCBFLGC           * STORE RESULTS\n* INTERUPT, NO OPERATIONAL PATHS, NOT CONN TO SUB-CHAN, NON-NORM UCB\n          CLI    #UCBFLGC,UCBINCPT\n          BNE    *+14\n          MVC    0(9,R8),=C'INTERCEPT'\n          A      R8,=F'10'\n          CLI    #UCBFLGC,UCBNOPTH\n          BNE    *+14\n          MVC    0(7,R8),=C'NO-PATH'\n          A      R8,=F'8'\n          CLI    #UCBFLGC,UCBNOCON\n          BNE    *+14\n          MVC    0(16,R8),=C'NOT-CONN-SUBCHAN'\n          A      R8,=F'17'\n          CLI    #UCBFLGC,UCBHILVL\n          BNE    *+14\n          MVC    0(12,R8),=C'NOT-NORM-UCB'\n          A      R8,=F'13'\n*     NEXT NIBBLE\n          L      R7,#UCBFLG            * R7: 0000 00XX\n          SLL    R7,28                 * R7: X000 0000\n          SRL    R7,28                 * R7: 0000 000X\n          LTR    R7,R7                 * ANYTHING THERE ?\n          BZ     $ENDEV2               * NOPE, END\n          STC    R7,#UCBFLGC           * STORE HALF FLAG\n          CLI    #UCBFLGC,UCBHDET      * HOT I/O ?????\n          BNE    *+10\n          MVC    0(10,R8),=C'HOT I/O !!'\n$ENDEV2   DS     0H\n          EJECT\n*--------------------------------------*\n* R2 = ADDR(CVT)                       *\n* R3 = ADDR(UCB)                       *\n* R4 = ADDR(UCBEXT1)                   *\n*--------------------------------------*\n          XR     R4,R4                 * UCB EXTENSION\n          XR     R5,R5                 * WORK\n          L      R4,UCBEXTPT           * EXTENSION\n          USING  UCBCMEXT,R4           * ADDRESS IT\n          MVC    DEVT(L'DEVT),BLANKS   * CLEAR DEVICE TYPE\n          CLI    UCBDVCLS,UCB3TAPE     * TAPE  ACCESS:\n          BE     $TAPE\n          CLI    UCBDVCLS,UCB3COMM     * COMMUNICATIONS DEVICE\n          BE     $COMM\n          CLI    UCBDVCLS,UCB3CTC      * CHAN-TO-CHAN ADAPTER\n          BE     $CTC\n          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS:\n          BE     $DASD\n          CLI    UCBDVCLS,UCB3DISP     * DISPLAY DEVICE\n          BE     $DISPLAY\n          CLI    UCBDVCLS,UCB3UREC     * UNIT RECORD DEVICE\n          BE     $UREC\n          CLI    UCBDVCLS,UCB3CHAR     * CHARACTER READER\n          BE     $CHARDR\n          MVC    DEVT(4),=C'UNKN'      * UNKNOWN DEVICE TYPE\n          B      $PUTREC\n$CTC      EQU    *\n          MVC    DEVT(3),=C'CTC'      * CHANNEL-TO- CHANNEL\n          B      $PUTREC\n$DISPLAY  EQU    *\n          MVC    DEVT(4),=C'327X'      * DEFAULT DISPLAY\n          CLI    #TYPE3,GC3HEX10       * GRAPHICS\n          BNE    *+10\n          MVC    DEVT(6),=C'327X-G'\n          B      $PUTREC\n$UREC     EQU    *\n          CLI    #TYPE4,UR4HEX06       * 3505\n          BNE    *+10\n          MVC    DEVT(4),=C'3505'\n          CLI    #TYPE4,UR4HEX08       * PRINTERS\n          BNE    *+10\n          MVC    DEVT(4),=C'PRT '\n          CLI    #TYPE4,UR4HEX09       * 3211\n          BNE    *+10\n          MVC    DEVT(4),=C'3211'\n          CLI    #TYPE4,UR4HEX0A       * 1443\n          BNE    *+10\n          MVC    DEVT(4),=C'1443'\n          CLI    #TYPE4,UR4HEX0B       * 3203\n          BNE    *+10\n          MVC    DEVT(4),=C'3203'\n          CLI    #TYPE4,UR4HEX0C       * 3525 CARD PUNCH\n          BNE    *+10\n          MVC    DEVT(4),=C'3525'\n          CLI    #TYPE4,UR4HEX0E       * 3800 CARD PUNCH\n          BNE    *+10\n          MVC    DEVT(4),=C'3800'\n          CLI    #TYPE4,UR4HEX11       * 3263 PRINTER\n          BNE    *+10\n          MVC    DEVT(4),=C'3800'\n          CLI    #TYPE4,UR4HEX16       * 3890 DOCUMENT PROCESSOR\n          BNE    *+10\n          MVC    DEVT(4),=C'3890'\n          CLI    #TYPE4,UR4HEX42       * 3851 MASS-STOR\n          BNE    *+10\n          MVC    DEVT(4),=C'3851'\n          CLI    #TYPE4,UR4HEX4C       * 3838 ARRAY PROCESSOR\n          BNE    *+10\n          MVC    DEVT(4),=C'3838'\n          B      $PUTREC\n$COMM     EQU    *\n          CLI    #TYPE4,CE4HEXF0       * ADPATER TYPE\n          BNE    *+10\n          MVC    DEVT(4),=C'ADPT'\n          CLI    #TYPE4,CE4HEX10       * ADPATER TYPE I\n          BNE    *+10\n          MVC    DEVT(6),=C'ADPT-I'\n          CLI    #TYPE4,CE4HEX20       * ADPATER TYPE I\n          BNE    *+10\n          MVC    DEVT(7),=C'ADPT-II'\n          CLI    #TYPE4,CE4HEX30       * TELEGRAPH ADP TYPE\n          BNE    *+10\n          MVC    DEVT(8),=C'TEL-APDT'\n          CLI    #TYPE4,CE4HEX40       * TELEGRAPH ADP TYPE I\n          BNE    *+10\n          MVC    DEVT(7),=C'TEL-A-I'\n          CLI    #TYPE4,CE4HEX50       * TELEGRAPH ADP TYPE II\n          BNE    *+10\n          MVC    DEVT(8),=C'TEL-A-II'\n          CLI    #TYPE4,CE4HEX60       * WORLD TRADE TELE-ADP\n          BNE    *+10\n          MVC    DEVT(4),=C'WTTA'\n          CLI    #TYPE4,CE4HEX70       * SYN -ADP I\n          BNE    *+10\n          MVC    DEVT(8),=C'SYNC-ADI'\n          CLI    #TYPE4,CE4HEX80       * ADP III\n          BNE    *+10\n          MVC    DEVT(8),=C'SYC-AIII'\n          CLI    #TYPE4,CE4HEX90       * SYNC -ADP II\n          BNE    *+10\n          MVC    DEVT(8),=C'SYNC-AII'\n          CLI    #TYPE4,CE4HEX0F       * CONTROL UNIT\n          BNE    *+10\n          MVC    DEVT(8),=C'CNTL-UNT'\n          CLI    #TYPE4,CE4HEX01       * 2702\n          BNE    *+10\n          MVC    DEVT(4),=C'2702'\n          CLI    #TYPE4,CE4HEX02       * 2701\n          BNE    *+10\n          MVC    DEVT(4),=C'2701'\n          CLI    #TYPE4,CE4HEX03       * 2703\n          BNE    *+10\n          MVC    DEVT(4),=C'2703'\n          CLI    #TYPE4,CE4HEX04       * 2955\n          BNE    *+10\n          MVC    DEVT(4),=C'2955'\n          CLI    #TYPE4,CE4HEX15       * 3704/3705/3725\n          BNE    *+10\n          MVC    DEVT(4),=C'370X'\n          CLI    #TYPE4,CE4HEXF1       * 3791L\n          BNE    *+10\n          MVC    DEVT(5),=C'3791L'\n          B      $PUTREC\n$CHARDR   MVC    DEVT(4),=C'CHRD'\n          B      $PUTREC\n          EJECT\n$TAPE     EQU    *                     *\n          CLI    #TYPE4,MT4HEX80       * 3480'S ?\n          BNE    *+10\n          MVC    DEVT(4),=C'3480'\n          CLI    #TYPE4,MT4HEX03       * 3420'S ?\n          BNE    $COMMON               * SKIP SHARABLE DEV NOT 3420\n          MVC    DEVT(4),=C'3420'\n*----\n* UCBVOLI, UCBSTAB, AND UCBDMCT ARE SAME FOR TAPE AND DISK\n*----\n          CLI    UCBSTAB,UCBDVSHR      * IS DEVICE SHARABLE\n          BNE    *+14\n          MVC    0(4,R8),=C'NSHR'\n          A      R8,=F'5'\n          CLI    UCBSTAB,UCBDVSHR+UCBBALB * IS DEVICE SHARABLE\n          BNE    *+14\n          MVC    0(4,R8),=C'NSHR'\n          A      R8,=F'5'\n          B      $COMMON\n          SPACE\n$DASD     EQU    *                     *\n          CLI    #TYPE4,DA4HEX07       * 2305 FIXED HEAD\n          BNE    *+10\n          MVC    DEVT(4),=C'2305'\n          CLI    #TYPE4,DA4HEX09       * 3330-1,2\n          BNE    *+10\n          MVC    DEVT(8),=C'3330-1,2'\n          CLI    #TYPE4,DA4HEX0A       * 3340\n          BNE    *+10\n          MVC    DEVT(4),=C'3340'\n          CLI    #TYPE4,DA4HEX0B       * 3350\n          BNE    *+10\n          MVC    DEVT(4),=C'3350'\n          CLI    #TYPE4,DA4HEX0C       * 3375\n          BNE    *+10\n          MVC    DEVT(4),=C'3375'\n          CLI    #TYPE4,DA4HEX0D       * 3330-11\n          BNE    *+10\n          MVC    DEVT(7),=C'3330-11'\n          CLI    #TYPE4,DA4HEX0E       * 3380\n          BNE    *+10\n          MVC    DEVT(4),=C'3380'\n*\n*----\n* UCBVOLI, UCBSTAB, AND UCBDMCT ARE SAME FOR TAPE AND DISK\n*----\n*\n          CLI    UCBSTAB,UCBPGFL+UCBBPRV+UCBSHAR  * PRIV, PAGE, SHR\n          BNE    *+14\n          MVC    0(9,R8),=C'PRIV-PAGE-SHR'\n          A      R8,=F'14'\n          CLI    UCBSTAB,UCBPGFL+UCBBPRV          * PAGE, PRIV\n          BNE    *+14\n          MVC    0(9,R8),=C'PRIV-PAGE'\n          A      R8,=F'10'\n          CLI    UCBSTAB,UCBPGFL+UCBBPUB          * PAGE, PUB ???\n          BNE    *+14\n          MVC    0(9,R8),=C'PUB-PAGE?'\n          A      R8,=F'10'\n          CLI    UCBSTAB,UCBPGFL+UCBBSTR          * PAGE, STG ???\n          BNE    *+14\n          MVC    0(9,R8),=C'STG-PAGE?'\n          A      R8,=F'10'\n          CLI    UCBSTAB,UCBBPRV+UCBSHAR          * PRIVATE - SHR ???\n          BNE    *+14\n          MVC    0(8,R8),=C'PRIV-SHR'\n          A      R8,=F'9'\n          CLI    UCBSTAB,UCBBPRV                  * JUST PRIVATE\n          BNE    *+14\n          MVC    0(4,R8),=C'PRIV'\n          A      R8,=F'5'\n          CLI    UCBSTAB,UCBBPUB+UCBSHAR          * PUB - SHR ???\n          BNE    *+14\n          MVC    0(7,R8),=C'PUB-SHR'\n          A      R8,=F'8'\n          CLI    UCBSTAB,UCBBPUB                  * JUST PUBLIC\n          BNE    *+14\n          MVC    0(3,R8),=C'PUB'\n          A      R8,=F'4'\n          CLI    UCBSTAB,UCBBSTR+UCBSHAR          * STG   SHR ???\n          BNE    *+14\n          MVC    0(7,R8),=C'STG-SHR'\n          A      R8,=F'8'\n          CLI    UCBSTAB,UCBBSTR                  * JUST STORAGE\n          BNE    *+14\n          MVC    0(3,R8),=C'STG'\n          A      R8,=F'4'\n* LOOK FOR CATALOG ON VOLUME\n          XR     R5,R5                 * CLEAR\n          IC     R5,UCBSTAB            * INSERT UCBSTAB\n          SLL    R5,31                 * LEAVE LAST BIT IF ANY\n          SRL    R5,31                 * SHIFT IT BACK\n          STC    R5,#UCBSTAB           * SAVE IT\n          CLI    #UCBSTAB,UCBBNUL      * IS THIS A CONTROL VOLUME\n          BNE    *+14\n          MVC    0(3,R8),=C'CAT'\n          A      R8,=F'4'\n          SPACE\n* HOW MUCH SPACE ON DISK PACK ????\n          SPACE\n          XR     R1,R1\n          XR     R0,R0\n          LA     R0,UCBCMSEG           * LOAD UCB ADDR\n*         LA     R0,ADDRUCB            * LOAD UCB ADDR:     02/09/88 MH\n          LA     R1,WORKA              * LOAD ADDR OF WORKAREA: CL30\n          SVC    78                    * ISSUE LSPACE\n          ST     R15,SVC78RC\n          LTR    R15,R15\n          BNZ    $CVAFTST\n          MVC    WORKA(6),=6C' '       * CLEAR 'SPACE=' MESSAGE\n          MVC    FREECYL(4),#CYL       * FREE CLYS\n          MVC    FREETRK(4),#TRK       * FREE TRKS\n          MVC    FREEEXT(4),#EXT       * AVAILABLE EXTENTS\n          MVC    CONTCYL(4),#CCYL      * CONTIG AVAIL CYLS\n          MVC    CONTTRK(4),#CTRK      * CONTIG AVAIL TRKS\n          SPACE\n* ISSUE THE CVAFTST MACRO TO DETERMINE IF INDEXED VTOC'S ON ???\n          SPACE\n$CVAFTST  DS     0H\n          L      R5,ADDRUCB\n          CVAFTST  UCB=(5)\n          LTR    R15,R15               * IS RC=8, SYSTEM SUPP, INDEXED\n          BNZ    $NOINDEX              * SKIP ALL OTHERS\n          MVC    0(7,R8),=C'INDEXED'\n          A      R8,=F'8'\n$NOINDEX  EQU    *\n          B      $COMMON\n$COMMON   DS     0H                    * COMMON SECTION FOR TAPE+DASD\n          SPACE\n* VOLSER DETERMIATION\n          SPACE\n          MVC    VOLSER(6),UCBVOLI     * SAVE VOLSER\n          CLC    VOLSER(6),=X'000000000000' * IF VOLSER HEX ZEROES\n          BNE    *+10                  * NOPE, CONTINUE\n          MVC    VOLSER(6),BLANKS      * YEP, BLANK IT OUT\n          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS:\n          BNE    SKPUSER               * NOPE, SKIP # USERS DETERM.\n          L      R5,UCBDDT             * ADD OF DEVICE DEPENDENT TBL\n          ST     R5,DEVDPND            * SAVE DEVICE DEPENDENT ADDR\n          L      R5,UCBCLEXT           * DEVICE CLASS EXT\n          ST     R5,DEVDPND+4          * SAVE DEVICE CLASS EXT ADDR\n          LH     R5,UCBUSER            * NUMBER OF USERS\n          CVD    R5,DWORD              * CONVERT IT\n          MVC    XUSERS(6),EDUSERS     * EDIT RESULTS\n          ED     XUSERS(6),DWORD+5     * EDIT RESULTS\n          MVC    USERS(3),XUSERS+3     * EDIT RESULTS\nSKPUSER   DS     0H\n$PUTREC   BAL    R10,$PUTLINE          * PUT OUTPUT RECORD\n          B      UCBLOOK               * LOOK SOME MORE\n$UCBEND   DS     0H                    * END OF SCANNING ROUTINE\n          L      BALREG,BALSAVE        * LOAD BAL REG\n          BR     BALREG                * GO-BACK\n*\n          EJECT\n*\n$PUTLINE  DS     0H\n          ST     R10,SAVE10            * SAVE BAL REG\n          L      R15,WHOFLG            * LOAD WHO WE ARE\n          B      $PUTLNE(R15)          * BRANCH BASED ON WHO\n$PUTLNE   B      $PLNETSO              * 0-TSO\n          B      $PLNEBTC              * 4-BATCH\n          B      $PLNESTC              * 8-STC\n          B      $ENDPUTL              * NOPE, HEAD BACK\n$PLNETSO  DS     0H                    * PUT'S FOR TSO\n          CLI    OPENFLG,OPEN          * DCB OPEN ?\n          BE     $PLNEBTC              * YEP, BRANCH TO BATCH ROUTINE\n          TPUT   OLINE,OLINELEN        * NOPE, ISSUE TPUTS\n          A      R9,=F'1'              * ADD 1 HEADER COUNT\n          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS ?\n          BNE    $ENDPUTL              * NOPE, HEAD BACK\n          L      R5,SVC78RC            * YEP, CHECK LSPACE RC\n          C      R5,=F'0'              * IS IT '0'\n          BNE    $ENDPUTL              * NOPE, HEAD BACK\n          CLI    DEVCLASS,#DASDCL      * WAS A DEVICE CLASS SPECIFIED\n          BNE    $ENDPUTL              * NOPE, HEAD BACK\n          TPUT   LSPACE-4,LSPCLEN+4    * YEP, MOVE HEADER\n          A      R9,=F'1'              *      ADD LINE COUNT\n          B      $ENDPUTL              *      HEAD BACK\n$PLNESTC  DS     0H                    * PUT'S FOR STC'S\n          MVC    MESSAGE(WTOTPUTL),OLINE  * ALL IMPORTANT STUFF\n          WTO    MF=(E,WTOMSG)         * ISSUE WTO\n          A      R9,=F'1'              * LINE CNT\n          B      $ENDPUTL              * HEAD BACK\n$PLNEBTC  DS     0H                    * PUT'S FOR BATCH JOBS\n          PUT    SYSOUT,OLINE-1        * DOUBLE SPACE EACH NEW UCB\n          A      R9,=F'2'              * ADD HEADER COUNT: DOUBLE SPACE\n          CLI    UCBDVCLS,UCB3DACC     * DIRECT ACCESS: PUT LSPACE INFO\n          BNE    $ENDPUTL              * HEAD BACK\n          L      R5,SVC78RC            * YEP, CHECK LSPACE RC\n          C      R5,=F'0'              * IS IT '0'\n          BNE    $ENDPUTL              * NOPE, HEAD BACK\n          MVC    OREC+1+OLINELEN(51),LSPACE\n          MVI    OREC,C'+'             * OVER PRINT\n          PUT    SYSOUT,OREC\n          MVI    OREC,C' '             * BACK TO NORMAL\n$ENDPUTL  L      R10,SAVE10            * LOAD BAL REG\n          BR     R10                   * GO BACK\n          SPACE 2\n$HEADER   DS     0H                    *\n*\n* LINES/PAGE RESET IS DONE IN EACH $HEAD... SUB SECTION (R9)\n*\n          ST     R10,SAVE10            * SAVE INNER BAL REG\n          L      R15,WHOFLG            * LOAD WHO WE ARE\n          B      $HEAD(R15)            * BRANCH BASED ON WHO\n$HEAD     B      $HEADTSO              * 0-TSO\n          B      $HEADBTC              * 4-BATCH\n          B      $HEADSTC              * 8-STC\n$HEADTSO  DS     0H\n          XR     R9,R9                 * LINES/PAGE RESET\n          CLI    OPENFLG,OPEN          * DCB OPEN ?\n          BE     $HEADBTC              * YEP, DO PUT'S\n          C      R2,=F'0'              * 1ST TIME, CVT ADDR NOT-THERE\n          BE     $TPUTHDR              * YEP, JUST PUT A HEADER\n          TPUT   HITENTER,L'HITENTER,ASIS\n          TGET   HENTER,1              * GET 1 CHAR\n*--------------------------------------*\n* THIS NEXT TEST MESSES-UP THE IDEA    *\n* OF THIS $HEADER ROUTINE LOOKING      *\n* LIKE A SUB-ROUTINE. IF THE USER      *\n* IS A 'TSO' USER THEN WE GIVE HIM THE *\n* OPTION TO EXIT THE PROGRAM HERE ...  *\n*--------------------------------------*\n          CLI    HENTER,X'40'          * GREATER THAN ' '\n          BNE    $UCBEND               * END OF SCAN !!!!!!\n$TPUTHDR  TPUT   CLEAR,8,FULLSCR       * CLEAR THE SCREEN\n          TPUT   TPUTREC,79            * CLEAR - USED FOR 'CONVADR'\n          A      R9,=F'1'              * ADD ONE FOR HEADER\n          B      $ENDHEAD\n$HEADSTC  DS     0H\n          MVC    MESSAGE(WTOTPUTL),TPUTREC   * ALL IMPORTANT STUFF\n          WTO    MF=(E,WTOMSG)\n          XR     R9,R9                 * LINES/PAGE RESET\n          A      R9,=F'1'              * ADD ONE FOR HEADER\n          B      $ENDHEAD\n$HEADBTC  DS     0H\n          XR     R9,R9                 * LINES/PAGE RESET\n          L      R5,PAGENUM            * LOAD PAGENUMBER\n          A      R5,=F'1'              * ADD ONE\n          ST     R5,PAGENUM            * STORE IT\n          CVD    R5,DWORD              * CONVERT IT\n          MVC    #PG(3),PAGEDIT        * MOVE EDIT\n          ED     #PG(3),DWORD+7        * EDIT IT\n          PUT    SYSOUT,TITLE1         * FOR '1' IN COL 1\n          A      R9,=F'1'              * ADD ONE\n          PUT    SYSOUT,TPUTREC-1      * A TRIPLE SPACE LINE\n          A      R9,=F'3'              * ADD 1ST LINE\n$ENDHEAD  L      R10,SAVE10            * LOAD BAL REG BACKUP\n          BR     R10                   * GO BACK\n          EJECT\n$FINE     SR     R15,R15               *  ZERO RETURN REGISTER\n          L      R13,SAVE+4            * RESTORE OLD SAVE AREA ADDR.\n          L      R14,12(R13)           * RETURN ADDRESS\n          LM     R0,R12,20(R13)        * REST OF THE REGS\n          BR     R14                   * RETURN\n          EJECT\n TITLE 'DATA SECTION - CONSTANTS'\nSAVE      DS     18F                   * SAVE AREA\nSAVE10    DS     F                     * INNER VBAL REG SAVE AREA\nPARMADR   DS     F                     * PARM ADDR IF ANY: DEVCLASS ?\n          DS     0D\nDWORD     DS     D                     * DOUBLE WORD\nLINECNT   DC     F'0'\nONFLG     DC     X'00'                 * ONLINE/OFFLINE FLAG\nBALSAVE   DS     F                     * BALLER REGISTER SAVE\nWHOFLG    DC     F'0'                  * WHO_FLG=...\n*                                      * (0=TSO),(4=BATCH),(8,STC)\nFLG       DC     C'0'                  * SET TSO/BATCH FLAG TO BATCH\n SPACE\n#UCBFLG   DS     F\n#UCBFLGC  DC     X'00'\n#UCBSTAB  DS     X\nRECB      DC     F'0'\nSVC78RC   DS     F                     * RETURN CODE FROM SVC78\nANSWER    DC     CL4' '\nHITENTER  DC     CL23'HIT ENTER TO CONTINUE >'\nHENTER    DC     C' '\n SPACE\nOLDUCB    DC     X'F0F0EF'             * PREVIOUS UCB NAME\n         DS    0H\nCLEAR    DC    X'C11140403C404000'\n          SPACE\n#SCHANO   DC     F'0'                  * SAVE\nEDSCHANO  DC     X'402020202021'       * EDIT\nSCHANO    DC     CL4' '                * SUB CHANNEL NUMBER NOT USED\n*\nPATHS     DC     CL8' '\n#CHPIDS   DC     8CL4' '\nEDITPATH  DC     X'40202120'\nPPATHS    DS     H\n*\nEDUSERS   DC     X'402020202021'\nXUSERS    DC     CL6' '\nDEVDPND   DS     2F                    * DEVICE DEPND+ CLASS DEPD\n*\n*\n*--------------------  USED IN  UCB SCAN ROUTINE -------------------*\nADDRUCB   DS     A                     *\nWORKAREA  DC     XL100'00'             *\nDEVCLASS  DC     X'00'                 * ALL DEVICE CLASSES\n*-------------------------------------------------------------------*\n          SPACE\n* DERIRVED FORM UCBDVCLS - PLACED IN DEVCLASS TO SEARCH ONLY THOSE\n          SPACE\n#TAPECL   EQU    X'80'                 * ONLY TAPE   \"\n#COMMCL   EQU    X'40'                 * ONLY COMM   \"\n#CTCCL    EQU    X'41'                 * ONLY CTC'S  \"\n#DASDCL   EQU    X'20'                 * ONLY DASD CLASSES\n#DSPCL    EQU    X'10'                 * ONLY DISPLAY \"\n#URCL     EQU    X'08'                 * UNIT RECORD  \"\n#CHARCL   EQU    X'04'                 * CHAR RDR     \"\n          SPACE 2\nPARMLIST  DS     3F\n          ORG    PARMLIST\nPARMWA    DS     F                     * ADDR OF WORK AREA\nPARMDEVT  DS     F                     * ADDR OF DEVICE TYPE\nPARMUCB   DS     F                     * ADDR OF RETURNED UCB\nSCANROUT  DS     F\nOPENFLG   DC     X'00'\n* WTO MESSAGE SECTION\nWTOMSG    DS     0F\n          DC     AL2(WTOMSGL,0)\n          DC     C' '\n          DC     C'UCB # '\nMESSAGE   DC     CL45' '\n          DC     X'20',X'80'\nWTOMSGL   EQU    *-WTOMSG\n          TITLE 'OUTPUT HEADER AND DETAIL LINES'\nTITLE1    DC     CL1'1'                * CARIDGE CONTROL\n          DC     CL76'U C B  -  S C A N   R O U T I N E'\n#WEEKDAY  DC     CL10' '\n#MONTH    DC     CL10' '\n#DAY      DC     CL5'  ,19'\n#YEAR     DC     CL3' '\n#TIME     DC     CL10' '\n#JDATE    DC     CL7' '\n#PAGE     DC     CL5'PAGE '\n#PG       DC     CL3' '\n          DC     CL(133-(*-TITLE1))' '\nPAGEDIT   DC     X'402021'\nPAGENUM   DC     F'0'\n*\n          DC     C'-'                   * TRIPLE SPACE\nTPUTREC   DC     CL4'UNT'\n          DC     CL8'DEVT'\n          DC     CL10'STATUS'\n          DC     CL13'___PATHS___'\n          DC     CL7'VOLSER'\nWTOTPUTL  EQU    *-TPUTREC\n          DC     CL6'USERS'\n          DC     CL30'_DEVICE FLAGS_'\n          DC     CL(133-(*-TPUTREC))' '\n* END DETAIL LINE\n          DC     C'0'                  * CC\nOLINE     EQU    *\nUNITNAM   DC     CL4' '                * UCB NAME\nDEVT      DC     CL8' '                * DEVICE TYPE\nSTATUS    DC     CL10' '               * ON/OFF-LINE\nCHPIDS    DC     4CL3' ',C' '          * CHPIDS\nVOLSER    DC     CL7' '                * VOLSER\nUSERS     DC     CL6' '                * NUMBER OF USERS ALLOCATED\nRSVD      DC     C' '                  * RESERVED BIT\nDEVFLAGS  DC     CL30' '               * DEVICE FLAGS\nOLINELEN  EQU    *-OLINE\n          DC     CL(133-(*-OLINE))' '\n*\n*  LSPACE HEADER AND MESSAGES\nWORKA     DS     CL30                  * WORK AREA FOR LSPACE SVC\n#CYL      EQU    WORKA+06,4            * FREE TOTAL CYL'S\n#TRK      EQU    WORKA+11,4            * FREE TOTAL TRACKS\n#EXT      EQU    WORKA+16,4            * AVAILABLE EXTENTS\n#CCYL     EQU    WORKA+21,4            * CONTIGUOUS CYL'S\n#CTRK     EQU    WORKA+26,4            * CONTIGUOUS TRK'S\n*\n          DC     CL4' '\nLSPACE    DC     CL5'#CYL='\nFREECYL   DC     CL4' '\n          DC     CL6',#TRK='\nFREETRK   DC     CL4' '\n          DC     CL6',#EXT='\nFREEEXT   DC     CL4' '\n          DC     CL7',C-CYL='\nCONTCYL   DC     CL4' '\n          DC     CL7',C-TRK='\nCONTTRK   DC     CL4' '\nLSPCLEN   EQU    *-LSPACE         TOTLEN(51)\n*\nBLANKS    DC     CL133' '\nOREC      DC     CL133' '\n          PRINT  NOGEN\nSYSOUT    DCB  DDNAME=SYSOUT,LRECL=133,RECFM=FBA,DSORG=PS,EXLST=EXL,   X\n               MACRF=PM\nEXL       DC    X'87',AL3(JFCB)\nJFCB      DS    176C\n          LTORG\n          TITLE 'CVT'\n          CVT    DSECT=YES\n          TITLE 'IEFUCBOB'\n          IEFUCBOB PREFIX=YES,LIST=NO\n          TITLE 'PSA DSECT'\n          IHAPSA\n          TITLE 'ASCB DSECT'\n          IHAASCB\n          REGS\n          PRINT GEN\n          TITLE 'UCBTYPES EQUATES'\n          UCBTYPES\n          END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UCBSCAN$": {"ttr": 9224, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE022"}, "text": "PROC 0  TAPE             +\n        DASD             +\n        DISPLAY          +\n        ON ONLINE        +\n        SYSOUT O OFILE\nCONTROL NOMSG NOFLUSH NOLIST\nFREE DD(A,SYSOUT)\nCONTROL MAIN\nIF &DASD=DASD THEN SET &P=DASD\nIF &TAPE=TAPE THEN SET &P=TAPE\nIF &COMM=COMM THEN SET &P=COMM\nIF &DISPLAY=DISPLAY THEN SET &P=DISPLAY\nIF &ON=ON THEN SET &P=ON\nIF &ONLINE=ONLINE THEN SET &P=ONLINE\nIF &O=O OR &OFILE=OFILE OR &SYSOUT=SYSOUT THEN DO\n   ATTR A LRECL(133) RECFM(F B A) DSORG(PS) BLKSIZE(1330)\n   ALLOC DD(SYSOUT) NEW  USING(A)\n  END\nCALL 'LINKLIB(UCBSCAN)' '&P'\n/*DOPROG UCBSCAN  '&P'*/\nIF &O=O OR &OFILE=OFILE OR &SYSOUT=SYSOUT THEN DO\n   IF &SYSISPF=ACTIVE THEN DO\n      ISPEXEC  LMINIT  DATAID(ID1) DDNAME(SYSOUT)\n      ISPEXEC  BROWSE  DATAID(&ID1)\n      ISPEXEC  LMFREE  DATAID(&ID1)\n     END\n\n   ELSE DO\n       REVIEW SYSOUT FILE\n     END\n   WRITENR TO PRINT ENTER (Y/N):&STR( )\n   READ &A\n   IF &A=Y THEN PRINTODD SYSOUT\n   FREE DD(SYSOUT,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSCAN#": {"ttr": 9226, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE022"}, "text": "//UCBSCAN# JOB (000000,YOUR STUFF)\n//*-------------------------------------------------------------------*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE UCBSCAN CODE.     *\n//*                                                                   *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=4M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(UCBSCAN),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(0,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=(,)\n//SYSLMOD  DD  DSN=LINKLIB(UCBSCAN),DISP=SHR\n//* TEST RUN IT\n//UCBSCAN EXEC PGM=UCBSCAN,COND=(0,LT)\n//STEPLIB  DD  DSN=*.LKED.SYSLMOD,DISP=SHR\n//SYSOUT   DD  SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSCAN@": {"ttr": 9228, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE022"}, "text": "//UCBSCAN  PROC\n//*-----------------------------------------------------------------\n//*     LIB: SYS1.PROCLIB(UCB)\n//*     USE: LISTS SELECTIVE UCB'S AND CHANNEL PATHS\n//*          THIS ISSUES A 'WTOR' FOR THE OPERATOR TO RESPOND\n//*          TO A LISTING OF UCBS INCLUDING:\n//*          UNIT  DEVICE    STATUS     VOLSER    ____PATHS____\n//*          AAA   3350     A-RES-PRIV  SYSRES    2 11\n//*           |     |          |          |            |\n//*           |     |          |          |            |- CHANNEL\n//*           |     |          |          |            |  PATH FOR\n//*           |     |          |          |            |  VARY PATH(\n//*           |     |          |          |- VOLSER\n//*           |     |          |- DEVICE ALLOCATION STATUS\n//*           |     |- DEVICE-TYPE (3350, 327X-G, 370X)\n//*           |- UNIT ADDRESS\n//*\n//*-----------------------------------------------------------------\n// EXEC PGM=UCBSCAN\n//STEPLIB DD DSN=LINKLIB,DISP=SHR\n//*SYSOUT DD SYSOUT=A ----- OPTIONAL PRINTOUT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSVC#": {"ttr": 9230, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE022"}, "text": "//UCBSVC78   JOB\n//*-----------------------------------------------------------------*\n//*   DOC: GET AVAIL. SPACE ON VOLUME BASED ON PARM IN EXEC STMT    *\n//*-----------------------------------------------------------------*\n//ASMHCL EXEC ASMHCL          ,SOUT=L\n//SYSLIB  DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=32000\n//        DD  DSN=SYS1.AMODGEN,DISP=SHR\n//        DD  DSN=TS.SOURCE.CNTL,DISP=SHR\n//SYSIN   DD  DSN=THIS.LIBRARY(UCBSVC78),DISP=SHR\n//*\n//L.SYSLMOD  DD DSN=LINKLIB(UCBSVC78),DISP=SHR\n//*\n// EXEC PGM=UCBSVC78,COND=(0,LT),PARM=WORK01\n//STEPLIB DD DSN=*.L.SYSLMOD,DISP=SHR\n//SYSOUT DD SYSOUT=(,)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBSVC78": {"ttr": 9473, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xff\\x00\\xff\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 255, "newlines": 255, "modlines": 0, "user": "FILE022"}, "text": "*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*  MODULE NAME = UCBSVC78                                             *\n*                                                                     *\n*  DESCRIPTIVE NAME =                                                 *\n*                                                                     *\n*  OPERATING ENVIRONMENT = MVS/XA 2.1.7                               *\n*                                                                     *\n*  FUNCTION = WRITES 1 LINE OF SPACE INFORMATION FROM LSPACE, SVC 78, *\n*             TO DATASET SYSOUT, GOOD MONITORING TOOL                 *\n*  NOTES =                                                            *\n*                                                                     *\n*   REGISTER USAGE:                                                   *\n*                                                                     *\n*           R1 .....                                                  *\n*           R2 .....                                                  *\n*           R3 .....                                                  *\n*           R4 .....                                                  *\n*           R5 .....                                                  *\n*           R6 .....                                                  *\n*           R7 .....                                                  *\n*           R8 .....                                                  *\n*           R9 .....                                                  *\n*          R10 .....                                                  *\n*          R11 .....                                                  *\n*          R12 ..... BASE                                             *\n*          R13 .....                                                  *\n*          R14 .....                                                  *\n*          R15 .....                                                  *\n*                                                                     *\n*             MACROS = IBM: GET, PUT, DCB, OPEN                       *\n*                                                                     *\n*                    OTHER: SVC 78                                    *\n*                                                                     *\n*                                                                     *\n*        SUBROUTINES = PRC:                                           *\n*                                                                     *\n*             DSECTS = IBM:                                           *\n*                                                                     *\n*                    OTHER:                                           *\n*                                                                     *\n*             MODULE TYPE = ASMH V2.1                                 *\n*                                                                     *\n*                PROCESSOR = 4381-11                                  *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n  EJECT\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n*                                                                     *\n*             ENTRY POINTS = UCBSVC78 (ONLY ENTRY POINT)              *\n*                                                                     *\n*             INPUT = PARM AS TO VOLSER                               *\n*                                                                     *\n*             OUTPUT = DDNAME SYSOUT, FOR LSPACE INFO                 *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES = NONE                              *\n*                                                                     *\n*             TABLES =                                                *\n*                                                                     *\n*             AUTHOR = MARK V. HEDGES                                 *\n*                      ADRIA LABORATORIES                             *\n*                      7001 POST ROAD                                 *\n*                      DUBLIN OH. 43017                               *\n*                      (614) 764-8175                            PTL  *\n*                                                                     *\n*             MESSAGES = NONE                                         *\n*                                                                     *\n*             ABEND CODES = NONE - WE HOPE                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  CHANGE SECTION  ---------------------------*\n*                                                                     *\n* 03/23/88 ADDED                                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* -----------------------  THINGS TO DO  -----------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n         EJECT  ,\n TITLE '>>>     WRITE FREE SPACE INFORMATION     <<<'\nUCBSVC78  CSECT\n          STM   R14,R12,12(R13)         SAVE PREVIOUS REGS\n          LR    R12,R15                 SAVE PGM BEGIN ADDR\n          USING UCBSVC78,R12\n          LA     R10,SAVE               ADDR NEW SAVE AREA\n          ST     R10,8(R13)             NEW SAVE ADDR IN OLD SAVE AREA\n          ST     R13,SAVE+4             OLD SAVE ADDR IN NEW SAVE AREA\n          LR     R13,R10                R13 CONTAINS NEW SAVE ADDR\nBALREG    EQU    14\nCVTADR    EQU    2\nUCBADR    EQU    3\nUCBEXT1   EQU    4\nSTART     DS     0H\n          L      R2,0(,R1)             * TEST FOR PSWD DSN\n          LH     R3,0(,R2)\n          LTR    R3,R3\n          BZ     $ERROR1\n          BCTR   R3,0\n          MVC    PARM(*-*),2(R2)\n          EX     R3,*-6\n$RDJFCB   DS     0H\n          RDJFCB SYSOUT                * DDNAME ALLOCATED ?\n          LTR    R15,R15               * TEST RESULTS\n          BNZ    $ERROR1               * NOPE, DO TPUTS\n          OPEN   (SYSOUT,OUTPUT)       * OPEN SYSOUT FILE\n$UCBSCAN  DS     0H\n          XR     R6,R6                 * N/A\n          S      R6,=F'1'              * FLAG FOR UNIT=AFF PARM\n          XR     R8,R8                 * NUMBER OF VOLUMES\n          XC     WORKAREA,WORKAREA     * CLEAR R AREA\n          L      R2,CVTPTR             * CVT POINTER\n          USING  CVT,R2                * ADDRES CVT\n          SPACE\nUCBLOOK   L      R15,CVTUCBSC          * UCB SCAN ROUTINE: V-CONSTANT\n          CALL   (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n          LTR    R15,R15               * GOOD CALL ?\n          BNZ    $ENDUCB               * NOPE, ALL DONE\n          A      R6,=F'1'\n          L      R3,ADDRUCB            * ADDRESS OF UCB\n          LTR    R3,R3                 * WAS ONE RETURNED ???\n          BZ     UCBLOOK               * TRY AGAIN\n          USING  UCB,R3                * ADDRESS IT\n          LA     R4,UCBPRFX            * LENGTH OF UCB PREFIX\n          SR     R3,R4                 * ADDRESS PREFIX\n          CLI    UCBID,UCBSTND         * IS THIS A STANDARD UCB ???\n          BNE    UCBLOOK               * NOPE, LOOK AGAIN\n          L      R4,UCBEXTPT           * EXTENSION\n          USING  UCBCMEXT,R4           * ADDRESS IT\n          CLC    UCBVOLI(6),PARM       * CHECK PARM\n          BNE    UCBLOOK               *\n* HOW MUCH SPACE ON DISK PACK ????\n          LA     R0,UCBCMSEG           * LOAD UCB ADDR\n          LA     R1,WORKA              * LOAD ADDR OF WORKAREA: CL30\n          SVC    78                    * ISSUE LSPACE\n          ST     R15,SVC78RC\n          CVD    R15,DWORD\n          UNPK   RC(2),DWORD(8)\n          OI     RC+1,X'F0'\n          LTR    R15,R15\n          BNZ    $ERRMSG\n          MVC    FREECYL(4),#CYL       * FREE CLYS\n          MVC    FREETRK(4),#TRK       * FREE TRKS\n          MVC    FREEEXT(4),#EXT       * AVAILABLE EXTENTS\n          MVC    CONTCYL(4),#CCYL      * CONTIG AVAIL CYLS\n          MVC    CONTTRK(4),#CTRK      * CONTIG AVAIL TRKS\n          B      $GETDATE\n$ERRMSG   MVC    LSPACE(BLANKOUT),BLANKS\n          MVC    RC-2(3),=C'RC('\n          MVI    RC+1,C')'\n          MVC    LSPACE(L'WORKA),WORKA\n TITLE '>>> GET DATE AND TIME ROUTINE <<<'\n$GETDATE  DS     0H\n          $STCK\n TITLE '>>>     WRITE FREE SPACE INFORMATION     <<<'\n          MVC    ODATE(8),XDATE        * GET MM/DD\n          MVC    ODATE+9(8),XTIME      * PUT TIME\n          MVC    ODATE+18(3),XWEEKDAY  * PUT WEEK DAY\n          PUT    SYSOUT,OREC\n          SPACE\n          B      $ENDUCB\n$ERROR1   DS     0H\n          WTO    'NO PARM OR NO SYSOUT DATASET SPECIFIED ... RC = 8'\n          LA     R15,8\n          B      $BADEND\n$ENDUCB   DS     0H\n          CLOSE  (SYSOUT)\n$FINE     SR     R15,R15               *\n$BADEND   L      R13,SAVE+4            * RESTORE OLD SAVE AREA ADDR.\n          L      R14,12(R13)           * RETURN ADDRESS\n          LM     R0,R12,20(R13)        * REST OF THE REGS\n          BR     R14                   * RETURN\n          EJECT\n TITLE 'DATA SECTION - CONSTANTS'\nSAVE      DS     18F                   * SAVE AREA\nBLANKS    DC     CL80' '\n*\n          DS     0D\nDWORD     DS     D                     * DOUBLE WORD\n SPACE\nSTATUS    DC     CL10' '\n*\n*--------------------  USED IN  UCB SCAN ROUTINE -------------------*\nADDRUCB   DS     A                     *\nWORKAREA  DC     XL100'00'             *\nDEVCLASS  DC     X'20'                 * DASD ONLY DEVICE CLASS\n*-------------------------------------------------------------------*\n*\n*  LSPACE HEADER AND MESSAGES\nWORKA     DS     CL30                  * WORK AREA FOR LSPACE SVC\n#CYL      EQU    WORKA+06,4            * FREE TOTAL CYL'S\n#TRK      EQU    WORKA+11,4            * FREE TOTAL TRACKS\n#EXT      EQU    WORKA+16,4            * AVAILABLE EXTENTS\n#CCYL     EQU    WORKA+21,4            * CONTIGUOUS CYL'S\n#CTRK     EQU    WORKA+26,4            * CONTIGUOUS TRK'S\n*\nSVC78RC   DC     F'0'\nOREC      DC     CL80' '\n          ORG    OREC\nODATE     DC     CL22' '\nLSPACE    DC     C'CYL='\nFREECYL   DC     CL4' '\n          DC     C','\nCONTCYL   DC     CL4' '\n          DC     C',TRK='\nFREETRK   DC     CL4' '\n          DC     C','\nCONTTRK   DC     CL4' '\n          DC     C',EXT='\nFREEEXT   DC     CL4' '\nBLANKOUT  EQU    *-LSPACE-1\n          DC     CL3' '\nPARM      DC     CL6' '\n          DC     CL3' '\nRC        DC     CL3' '\n          ORG    ,\n*\n          PRINT NOGEN\nSYSOUT    DCB  DDNAME=SYSOUT,LRECL=80,RECFM=FB,DSORG=PS,EXLST=EXL,     X\n               MACRF=PM\nEXL       DC    X'87',AL3(JFCB)\n          TITLE '>>> IEFJFCBN <<<'\nJFCB      EQU   *\n          IEFJFCBN  LIST=NO\n          LTORG\n          TITLE '>>> CVT      <<<'\n          CVT    DSECT=YES\n          TITLE '>>> IEFUCBOB <<<'\n          IEFUCBOB PREFIX=YES,LIST=NO\n          TITLE '>>> UCBTYPES <<<'\n          UCBTYPES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n          END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UCBTYPES": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\xb6\\x00\\xb6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "FILE022"}, "text": "          MACRO\n          UCBTYPES &LIST=YES,&GRAPHICS=NO\n*/*------------------------------------------------------------------*/\n*/*                                                                  */\n*/*    U N I T    C O N T R O L    B L O C K    T Y P E S            */\n*/*                                                                  */\n*/*------------------------------------------------------------------*/\n*/*                                                                  */\n*/*  STATUS = OS/VS2 JBB2125 04/24/86, LEVEL=1                       */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*                                                                  */\n*/*  - THIS IS THE 4 BYTE FIELD LOCATED IN THE UCB LOOK UP TABLE     */\n*/*    AT OFFSET +16, X'10'. NO DSECT WAS SUPPLIED SO THIS IS IT.    */\n*/*    WHEN \"GRAPHICS=NO\" IS SPECIFIED, THEN EQUATES FOR GRAPHIC     */\n*/*    DEVICES WILL NOT BE SPECIFIED, THIS IS THE DEFAULT.           */\n*/*                                                                  */\n*/*  - SEE DEBUGGING HANDBOOK #5 FOR UCBTYPE DEFINITIONS             */\n*/*                                                                  */\n*/*                                                                  */\n*/*                                                                  */\n*/*----------------------------------------------------------------- */\n          PUSH  PRINT\n          AIF   ('&LIST' EQ 'YES').UCB1\n          PRINT OFF\n.UCB1     ANOP\n.*\n.*  NOTE: MUST BE USED AFTER IEFUCBOB MARCO OR ASSEMBLY ERROR !!!!\n.*\n#TYPE1    EQU   UCBTBYT1       @OFFSET +X'10' IN IEFUCBOB\n#TYPE2    EQU   UCBTBYT2       @OFFSET +X'11' IN IEFUCBOB\n#TYPE3    EQU   UCBTBYT3       @OFFSET +X'12' IN IEFUCBOB\n#TYPE4    EQU   UCBTBYT4       @OFFSET +X'13' IN IEFUCBOB\n*--------------------------------------------------------------------\n*---------->  OFFSET +16  OR  X'10'  INTO IEFUCBOB DSECT <-----------\n*--------------------------------------------------------------------\nUR16      EQU  *      + OFFSET +16 OR X'10'\nUR1HEXF0  EQU  X'F0'  - I/O SUPERVISOR FLAGS\nUR1HEX80  EQU  X'80'  - RESERVED\nUR1HEX40  EQU  X'40'  - OVERRUNNABLE DEVICE\nUR1HEX20  EQU  X'20'  - IF BURST MODE ON, BYTE MODE OFF\nUR1HEX10  EQU  X'0F'  - MODEL CODE\nUR17      EQU  *      + OPTION FLAGS\nUR2HEX80  EQU  X'80'  - UNIVERSAL CHAR SET\nUR2HEX4E  EQU  X'4E'  - RESERVED\nUR2HEX20  EQU  X'20'  - 3225 TWO-LINE PRINT FEATURE\nUR2HEX10  EQU  X'10'  - 3525 MULTI-LINE PRINT FEATURE\nUR2HEX01  EQU  X'01'  - CARD IMAGE (BINARY MODE)\nUR18      EQU  *      - CLASS BITS\nUR3HEX08  EQU  X'08'  - UNIT RECORD\nUR19      EQU  *      + DEVICE CODE\nUR4HEX06  EQU  X'06'  - 3505 CARD READER\nUR4HEX08  EQU  X'08'  - PRINTRE MODELS N1, 2, 7 AND 1404\nUR4HEX09  EQU  X'09'  - 3211 PRINTER\nUR4HEX0A  EQU  X'0A'  - 1443 PRINTER MODEL N1\nUR4HEX0B  EQU  X'0B'  - 3203 PRINTER\nUR4HEX0C  EQU  X'0C'  - 3525 CARD PUNCH\nUR4HEX0E  EQU  X'0E'  - 3800 PRINTER SUBSYSTEM\nUR4HEX11  EQU  X'11'  - 3263 PRINTER\nUR4HEX16  EQU  X'16'  - 3890 DOCUMENT PROCESSOR\nUR4HEX42  EQU  X'42'  - 3851 MASS STOR\nUR4HEX4C  EQU  X'4C'  - 3838 ARRAY PROCESSOR\nTAPE16    EQU  *      + MODEL BITS\nMT1HEXF0  EQU  X'F0'  - I/O SUPERVISOR FLAGS\nMT1HEX80  EQU  X'80'  - RESV\nMT1HEX40  EQU  X'40'  - OVERRUNNABLE DEVICE\nMT1HEX20  EQU  X'20'  - BURST / BYTE MODES\nMT1HEX10  EQU  X'10'  - DATA CHAINING\nMT1HEX0F  EQU  X'0F'  - MODEL CODES\nMT1HEX09  EQU  X'09'  - RESV\nMT1HEX04  EQU  X'04'  - 1600 BPI\nMT1HEX02  EQU  X'02'  - 6250 BPI\nTAPE17    EQU  *      + OPTION FLAGS\nMT2HEX80  EQU  X'80'  - 7-TRACK COMPAT.\nMT2HEX40  EQU  X'40'  - DATA CONVERSION\nMT2HEX20  EQU  X'20'  - DUAL DEN (800/1600 BPI)\nMT2HEX10  EQU  X'10'  - DUAL DEN (6250/1600 BPI)\nMT2HEX07  EQU  X'07'  - RESV\nTAPE18    EQU  *      + CLASS BITS\nMT3HEX80  EQU  X'80'  - MAG TAPE\nTAPE19    EQU  *      + DEVICE CODE\nMT4HEX03  EQU  X'03'  - 3400 MAG TAPES\nMT4HEX80  EQU  X'80'  - 3480 CARTRIDGE TAPES\nDASD16    EQU  *      + MODEL BITS\nDA1HEXF0  EQU  X'F0'  - I/O SUPERVISOR FLAGS\nDA1HEX80  EQU  X'80'  - RESV\nDA1HEX40  EQU  X'40'  - OVERRUNNABLE DEVICE\nDA1HEX20  EQU  X'20'  - BURST / BYTE MODES\nDA1HEX10  EQU  X'10'  - DATA CHAINING\nDA1HEX0F  EQU  X'0F'  - MODEL CODES\nDASD17    EQU  *      + OPTION FLAGS\nDA2HEX40  EQU  X'40'  - TRACK OVERFLOW\nDA2HEX20  EQU  X'20'  - SHARED DASD\nDA2HEX10  EQU  X'10'  - ROTATIONAL POSITION SENSING\nDA2HEX08  EQU  X'08'  - VIRTUAL DASD\nDA2HEX84  EQU  X'84'  - RESV\nDASD18    EQU  *      + CLASS BITS\nDA3HEX20  EQU  X'20'  - DASD\nDASD19    EQU  *      + DEVICE CODE\nDA4HEX07  EQU  X'07'  - 2305 FIXED HEAD\nDA4HEX09  EQU  X'09'  - 3330 MODEL 1, 2\nDA4HEX0A  EQU  X'0A'  - 3340 DASD\nDA4HEX0B  EQU  X'0B'  - 3350 DASD, A2, B2, C2\nDA4HEX0C  EQU  X'0C'  - 3375 DASD\nDA4HEX0D  EQU  X'0D'  - 3330 DASD, 11\nDA4HEX0E  EQU  X'0E'  - 3380 DASD\nTERM16    EQU  *      + TERMINAL DEVICES\nGC1HEX11  EQU  X'11'  - MODEL 1\nGC1HEX12  EQU  X'12'  - MODEL 2, 2A, 2B, 3, 3A, 3B, OR 4\nTERM17    EQU  *      + OPTIONAL FEATURES\nGC2HEXE0  EQU  X'E0'  - KEY BOARD TYPE\nGC2HEX00  EQU  X'00'  - NO KEY BOARD, DOMESTIC CHAR GEN+MONOCHAR GEN.\nGC2HEX20  EQU  X'20'  - 66 KEY EBCDIC TYPEWRITER KEYBOARD\nGC2HEX40  EQU  X'40'  - 78 KEY EBCDIC TYPEWRITER KEYBOARD\nGC2HEX60  EQU  X'60'  - 66 KEY DATA ENTRY KEYBOARD\nGC2HEX80  EQU  X'80'  - 78 KEY OPERATOR CONSOLE KEYBOARD\nGC2HEXA0  EQU  X'A0'  - 66 KEY ASCII TYPEWRITER KEYBOARD\nGC2HEXC0  EQU  X'C0'  - 78 KEY ASCII TYPEWRITER KEYBOARD\nGC2HEX10  EQU  X'10'  - AUDITABLE ALARM FEATURE\nGC2HEX0E  EQU  X'0E'  - CHAR GEN TYPE\nGC2HEX02  EQU  X'02'  - ASCII A CHAR GEN.\nGC2HEX04  EQU  X'04'  - ASCII B CHAR GEN.\nGC2HEX06  EQU  X'06'  - U. K.  CHAR GEN.\nGC2HEX08  EQU  X'08'  - FRENCH CHAR GEN.\nGC2HEX0A  EQU  X'0A'  - GERMAN CHAR GEN.\nGC2HEX01  EQU  X'01'  - CHAR GEN. CASE\nTERM18    EQU  *      + DEVICE CLASS\nGC3HEX10  EQU  X'10'  - GRAPHICS BIT ON ????\nTERM19    EQU  *      + DEVICE CODE\nGC3HEX09  EQU  X'09'  - 3277, 3278, OR 3279 DISPLAY STATION\nCCADP18   EQU  *      + CHANNEL TO CHANNEL ADAPTER\nCC3HEX41  EQU  X'41'  - CHANNEL TO CHANNEL ADAPTER BYTE +18\nCOMM16    EQU  *      + COMMUNICATIONS DEVICE EQUIPMENT\nCE1HEXF0  EQU  X'F0'  - I/O SUPERVISOR\nCE1HEX80  EQU  X'80'  - RSVD\nCE1HEX40  EQU  X'40'  - OVERRUNNABLE TABLE\nCE1HEX20  EQU  X'20'  - ON=BURST\nCE1HEX10  EQU  X'10'  - DATA CHAINING\nCE1HEX0F  EQU  X'0F'  - MODEL CODE(+ADAPTER CODE=MODEL)\nCE1HEX01  EQU  X'01'  - ADAPTER TYPE 1-UNIT 1050,2-1030,3-1050,4-83B3\n*                                                5-TWX,6-WTTA,8-2260\nCE1HEX02  EQU  X'02'  - ADAPTER TYPE 1-1060, W/ADPT 4 A 115A\nCE1HEX03  EQU  X'03'  - ADAPTER TYPE 1-2740\nCE1HEX04  EQU  X'04'  - ADAPTER TYPE 1-2740\nCE1HEX05  EQU  X'05'  - ADAPTER TYPE 1-2740C, W/ADPT 9 A BSC1\nCE1HEX06  EQU  X'06'  - ADAPTER TYPE 1-2741P, W/ADPT 9 A BSC2\nCE1HEX07  EQU  X'07'  - ADAPTER TYPE 1-1050X, W/ADPT 9 A BSC3\nCE1HEX08  EQU  X'08'  - ADAPTER TYPE 1-2740X\nCE1HEX09  EQU  X'09'  - ADAPTER TYPE 1-2740B\nCOMM17    EQU  *      + OPTIONAL FEATURES\nCE2HEX80  EQU  X'80'  - AUTO CALLING\nCE2HEX40  EQU  X'40'  - AUTO POLLING\nCE2HEX20  EQU  X'20'  - CHECKING (2740 ONLY) OR DUAL COMM (2701 SDA-II)\nCE2HEX10  EQU  X'10'  - AUTO ANSWER\nCE2HEX08  EQU  X'08'  - STATION CONTROL (2740 ONLY)\nCE2HEX04  EQU  X'04'  - DUAL CODE (2701 SDA-II) OR 2740 ONLY\nCE2HEX0C  EQU  X'0C'  - OPTICAL IMAGE UNIT\nCE2HEX03  EQU  X'03'  - SADTHREE\nCE2HEX02  EQU  X'02'  - SADTWO\nCE2HEX01  EQU  X'01'  - SADONE\nCE2HEX00  EQU  X'00'  - SADZER\nCOMM18    EQU  *      + DEVICE CLASS\nCE3HEX40  EQU  X'40'  - COMM EQUIPMENT\nCOMM19    EQU  *      + UNIT TYPE\nCE4HEXF0  EQU  X'F0'  - ADPATER TYPE\nCE4HEX10  EQU  X'10'  - ADAPTER TYPE I\nCE4HEX20  EQU  X'20'  - ADAPTER TYPE II\nCE4HEX30  EQU  X'30'  - TELEGRAPH ADAPTER TYPE\nCE4HEX40  EQU  X'40'  - TELEGRAPH ADAPTER TYPE I\nCE4HEX50  EQU  X'50'  - TELEGRAPH ADAPTER TYPE II\nCE4HEX60  EQU  X'60'  - WORLD TRADE TELEGRAPH ADAPTER\nCE4HEX70  EQU  X'70'  - SYNCHRONOUS ADAPTER TYPE I\nCE4HEX80  EQU  X'80'  - ADAPTER TYPE III\nCE4HEX90  EQU  X'90'  - SYNCHRONOUS ADAPTER TYPE II\nCE4HEX0F  EQU  X'0F'  - CONTROL UNIT\nCE4HEX01  EQU  X'01'  - 2702 CU\nCE4HEX02  EQU  X'02'  - 2701 CU\nCE4HEX03  EQU  X'03'  - 2703 CU\nCE4HEX04  EQU  X'04'  - 2955 CU\nCE4HEX15  EQU  X'15'  - 3704/3705/3725\nCE4HEXF1  EQU  X'F1'  - 3791-LOGICAL CONTROL UNIT\n.MEND     MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WEEKLY": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x02r\\x02r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 626, "newlines": 626, "modlines": 0, "user": "FILE022"}, "text": "//WEEKLY  JOB\n//*-------------------------------------------------------------------*\n//*   DOC: IT DOES ALOT ......                                        *\n//*                                                                   *\n//*        1) PRINT PROCLIB AND PARMLIB                               *\n//*           - DIRECTORY ENTRIES                                     *\n//*           - MEMBER LISTINGS                                       *\n//*           - UPDATES WITHIN 30 DAYS                                *\n//*        2) LIST ALL CATALOGS AND USE SAS TO REPORT                 *\n//*        3) PROCESSES ALL VTOCS AND REPORTS, GRAPHS, AND PRINTS     *\n//*        4) MAP ALL SYSTEM PACKS                                    *\n//*        5) PRINTS SYS1.DAE DATASET                                 *\n//*        6) PRINT SYS1.UADS                                         *\n//*        7) LIST ALL RACF PROFILE INFORMATION                       *\n//*        8) HSM REPORT                                              *\n//*        9) SMP/E CSI REPORT                                        *\n//*       10) I/O CONFIGURATION REPORTS ..                            *\n//*       11) SYSTEM MODULES: TSO/E, MSTJCL00, ETC ...                *\n//*       12) LIST THIS MEMBER                                        *\n//*                                                                   *\n//*-------------------------------------------------------------------*\n//*----------------------------------------------------------------*\n//*  PROC: TITLE\n//*   USE: TO PUT 19 CHARS OF INFO PER LINE TO SAS'S PROC EXPLODE\n//* PARMS: PRE ... 1ST LINE\n//*        SUFF .. 2ND LINE\n//*             .. 3RD LINE PROVIDED BY ASSEMBLER (SASEXPLD)\n//*                WHICH PUTS THE DATE 'YY.DDD' IN DARK FORMAT\n//*                AND APPENDS THE 'PARM END' CARD FOR SAS'S EXPLODE\n//*        LD .... L=LIGHT PRINT, D=DARK\n//*\n//* OUTPUT: IS A DATASET '++SASIN' TO 'SYSIN' FOR A SAS EXECUTION\n//*----------------------------------------------------------------*\n//TITLE PROC PRE='SYS1',SUFF='PARMLIB',LD=D\n//PARMPASS EXEC PGM=PARMPASS,PARM=' OPTIONS NONOTES;'\n//SYSOUT DD DSN=&&SASIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)\n//PARMPASS EXEC PGM=PARMPASS,PARM='PROC EXPLODE;'\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM=' PARMCARDS; '\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM='&LD'      EITHER L-LIGHT OR D-DARK\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM=' &PRE'\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//PARMPASS EXEC PGM=PARMPASS,PARM=' &SUFF'\n//SYSOUT DD DSN=&&SASIN,DISP=(MOD,PASS)\n//DATE   EXEC  PGM=SASEXPLD * PUTS DATE IN PROC EXPLODE AND UNDERLINES\n//STEPLIB DD   DSN=HEDGESM.LINKLIB,DISP=SHR\n//SYSOUT  DD   DSN=&&SASIN,DISP=(MOD,PASS)\n//*\n//SAS     EXEC PGM=SAS,PARM='SORT=3',REGION=3M\n//LIBRARY   DD DISP=(MOD,PASS),DSN=&LIBRARY,\n//             UNIT=SYSDA,SPACE=(CYL,(1,,20))\n//STEPLIB   DD DISP=SHR,DSN=SYS1.SAS.LIBRARY\n//          DD DISP=(OLD,PASS),DSN=*.LIBRARY,VOL=REF=*.LIBRARY\n//SASUTL    DD DISP=SHR,DSN=SYS1.SAS.UTILLIB\n//SASHELP   DD DISP=SHR,DSN=SYS1.SAS.SASHELP\n//SASAUTOS  DD DISP=SHR,DSN=SYS1.SAS.MACAUTOS\n//WORK      DD UNIT=SYSDA,SPACE=(CYL,(1,1),,,ROUND)\n//FT11F001  DD DUMMY\n//FT12F001  DD SYSOUT=(,),DCB=(BLKSIZE=2640,LRECL=260,RECFM=VBA),\n// COPIES=2\n//FT13F001  DD SYSOUT=B,DCB=(RECFM=F,BLKSIZE=80)\n//FT14F001  DD DUMMY\n//FT15F001  DD UNIT=SYSDA,SPACE=(400,(100,300)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=400,BUFNO=1)\n//SYSIN     DD DSN=&&SASIN,DISP=(OLD,DELETE)\n//    PEND\n//*\n//PARMPASS EXEC PGM=PARMPASS,PARM='./ LIST'\n//SYSOUT DD DSN=&&SYSIN,DISP=(,PASS),UNIT=SYSDA,SPACE=(TRK,1)\n//*----------------------------------------------------------------*\n//*  PROC: PDS\n//*   USE: TO RUN PDSUTIL PGM\n//* PARMS: DSN ... DATASET NAME TO LIST\n//*        VS .... VOLSER OF DSN\n//*\n//* SYSIN:  CREATED BY PARM PASS './ LIST'\n//* OUTPUT: PDSLIST\n//*----------------------------------------------------------------*\n//PDS PROC DSN='SYS1.PARMLIB',VS=MVSRES\n// EXEC PGM=PDSUTIL\n//SYSPRINT DD  SYSOUT=(,)\n//SYSUT1   DD  UNIT=SYSDA,DISP=SHR,VOL=SER=&VS,DSN=&DSN\n//SYSIN    DD  DSN=&&SYSIN,DISP=(OLD,PASS)\n//   PEND\n//*\n//*----------------------------------------------------------------*\n//*  PROC: LISTPDS\n//*   USE: TO LIST THE ISPF/DIRECTORY OF A PDS\n//* PARMS: DS .... DATASET NAME TO LIST\n//*\n//* OUTPUT: PDSLIST DIRECTORY LIST\n//*----------------------------------------------------------------*\n//LISTPDS PROC DS='SYS1.PARMLIB'\n//LISTPDS EXEC PGM=LISTPDS,PARM='LISTDIR'    OPT('LIST,UPDTE,DECK')\n//SYSLIB   DD  DSN=&DS,DISP=SHR\n//SYSPRINT DD  SYSOUT=(,)\n//SYSIN    DD  DUMMY\n// PEND\n//*\n//*--- END OF PROCS\n//*\n//*--------------------------------------------------------------------\n//*  L I S T I N G    O F    A L L     S Y S T E M     P D S'S\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE='PARM+PROC LIB',SUFF='UPDATE 30 DAYS'\n// EXEC SAS\n//FT11F001  DD  DUMMY\n//PDS       DD  DSN=SYS1.PROCLIB,DISP=SHR,\n//          DCB=(RECFM=F,LRECL=256,BLKSIZE=256)\n//          DD  DSN=SYS1.PARMLIB,DISP=SHR,\n//          DCB=(RECFM=F,LRECL=256,BLKSIZE=256)\n//SYSIN     DD  *\nOPTIONS ERROR=0 NOMACROGEN NOSOURCE2 MISSING=0;\nDATA SPFMEM;LENGTH SOURCE $44 JFCB $176 MOD_TIME $5 LAST_MOD $8.;\n     RETAIN CC 3 LEN 0 EOV 1 SOURCE;\n     INFILE PDS JFCB=JFCB RECFM=F BLKSIZE=256 EOV=EOV END=END;\n     IF CC > LEN THEN DO;INPUT @1 LEN PIB2. @@; CC = 3;END;\n     IF EOV THEN DO;SOURCE = SUBSTR (JFCB, 1, 44);END;EOV=0;\n     INPUT @CC NAME $CHAR8. TT PIB2. R PIB1. C $CHAR1. @@; CC + 12;\n     IF NAME = 'FFFFFFFFFFFFFFFF'X THEN DO; DO UNTIL (END OR EOV);\n     INPUT;INPUT @@;END;CC=256;IF END THEN INPUT;DELETE;END;\n     IF C = '...01111'B THEN DO;\n     INPUT @CC VER PIB1. LEVEL PIB1. +2  C_DATE PD4. M_DATE PD4.\n     M_HH PK1. M_MM PK1. SIZE PIB2. INIT PIB2. MOD PIB2. ID $CHAR7. @@;\n     CC + 30;CREATED=DATEJUL (C_DATE);M_DATE=DATEJUL (M_DATE);\n     M_TIME=HMS (M_HH, M_MM, 0);VER_MOD=VER + LEVEL / 100;\n     L_MOD=PUT (M_DATE, YYMMDD7.);LAST_MOD=PUT (M_DATE, MMDDYY8.);\n     MOD_TIME=PUT (M_TIME, HHMM5.);END;\n     IF CC > LEN THEN INPUT;\n     FORMAT VER_MOD 5.2 CREATED MMDDYY8. SIZE INIT MOD 4.;KEEP NAME\n     VER_MOD CREATED SIZE INIT MOD ID SOURCE  L_MOD MOD_TIME LAST_MOD;\n     RUN;\nDATA A;SET SPFMEM;TQ=TODAY();TX=TQ-30;TD_30=PUT(TX,YYMMDD7.);\nIF L_MOD=0 OR L_MOD<TD_30 THEN DELETE;DROP TD_30;\nPROC SORT DATA=A;BY SOURCE NAME;PROC PRINT UNIFORM DATA=A;\nID NAME;VAR VER_MOD CREATED LAST_MOD MOD_TIME SIZE INIT MOD ID;\nBY SOURCE;TITLE 'ISPF LIBRARY MEMBERS';\nTITLE2 'MODIFIED WITHIN 30 DAYS:  SORTED BY LIBRARY AND MEMBER';\nPROC SORT DATA=A;BY SOURCE DESCENDING L_MOD;PROC PRINT UNIFORM DATA=A;\nID NAME; VAR VER_MOD CREATED LAST_MOD MOD_TIME SIZE INIT MOD ID;\nBY SOURCE;TITLE 'ISPF LIBRARY MEMBERS';\nTITLE2 'MODIFIED WITHIN 30 DAYS:  SORTED BY LIBRARY AND LAST-USED';\n// EXEC TITLE\n// EXEC LISTPDS\n//PARMLIB EXEC PDS\n//*\n// EXEC TITLE,SUFF=PROCLIB\n// EXEC LISTPDS,DS='SYS1.PROCLIB'\n//PROCLIB EXEC PDS,DSN='SYS1.PROCLIB'\n//*--------------------------------------------------------------------\n//*        L I S T   M A S T E R   C A T A L O G\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE=MASTER,SUFF='CATALOG'\n//LISCAT   EXEC PGM=IDCAMS,REGION=3M\n//SYSPRINT  DD  DSN=&&Q,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(10,1),RLSE),\n//          DCB=(LRECL=125,BLKSIZE=629,RECFM=VBA,DSORG=PS)\n//SYSIN     DD  *\n  LISTCAT  ALL CAT(MASTER.CATALOG)\n  LISTCAT  ALL CAT(USER.CATALOG)\n//CATSTRIP EXEC PGM=CATSTRIP\n//STEPLIB   DD DSN=LINKLIB,DISP=SHR\n//LIST      DD DSN=&&Q,DISP=(OLD,DELETE)\n//SYSOUT    DD DSN=&&X,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(10,1))\n//SYSUDUMP  DD SYSOUT=(,)\n//TSO  EXEC TSOBATCH\n//VTOCOUT   DD  DSN=&&VTOC,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(2,1))\n//INPUT     DD  *\nVTOC ALL TRK NOHEADING +\nPRINT(NEW (DSNAME VOLUME DSO EX BLKSZ LRECL REFDT ALLOC UNUSED))\n//SASCATS  EXEC SAS\n//FT11F001  DD  DUMMY   *** NOSOURCE;\n//SYSPRINT  DD  DSN=&&X,DISP=(OLD,DELETE)\n//OUTPUT    DD  DSN=&&T,DISP=(,DELETE),\n//          DCB=(LRECL=121,BLKSIZE=1210,RECFM=FB),\n//          UNIT=SYSDA,SPACE=(CYL,(2,1))\n//SYSOUT   DD DUMMY\n//VTOCOUT   DD   DSN=&&VTOC,DISP=(OLD,DELETE)\n//SYSIN     DD   DSN=THIS.LIBRARY(SASCATS),DISP=SHR\n//*--------------------------------------------------------------------\n//*  M A P   A L L   S Y S R E S   A N D   C A T A L O G   P A C K S\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE=SYSTEM,SUFF=PACKS\n//IEHMAP  EXEC  PGM=IEHMAP,REGION=1048K\n//SYSPRINT DD   SYSOUT=(,)\n//SYSUDUMP DD   SYSOUT=(,)\n//DD1      DD   UNIT=SYSDA,DISP=SHR,VOL=SER=MVSRES\n//DD2      DD   UNIT=SYSDA,DISP=SHR,VOL=SER=MVSCAT\n//DD3      DD   UNIT=SYSDA,DISP=SHR,VOL=SER=MVSDLB\n//SYSIN    DD   *\n   MAP    VOL=MVSRES\n   MAP    VOL=MVSCAT\n   MAP    VOL=MVSDLB\n/*\n//*--------------------------------------------------------------------\n//*  L I S T    S Y S 1 . D A E    D A T A S E T\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE=SYS1,SUFF=DAE\n// EXEC TSOBATCH\n//DAE   DD  DSN=SYS1.DAE,UNIT=SYSDA,VOL=SER=MVSRES,DISP=SHR\n//INPUT DD *\nPRINT IFILE(DAE) DUMP\n//*--------------------------------------------------------------------\n//*  L I S T    S Y S 1 . U A D S     D A T A S E T\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE=SYS1,SUFF=UADS\n// EXEC TSOBATCH\n//INPUT DD *\nACCOUNT\nLISTIDS\nL (*)\n//*--------------------------------------------------------------------\n//*  L I S T    R A C F    P R O F I L E S\n//*--------------------------------------------------------------------\n// EXEC TITLE,PRE=RACF,SUFF=PROFILES\n// EXEC TSOBATCH\n//INPUT DD *\nSR MASK(*)  ALL\nLG (*)\nLU (*)\nLD PREFIX(SYS1) ALL\nLD PREFIX(TECH) ALL\nSETR LIST\n//*--------------------------------------------------------------------\n//*  L I S T    A L L    V T O C S   U S E  S A S  T O   R E P O R T\n//*--------------------------------------------------------------------\n//TITLE    EXEC TITLE,PRE=VTOC,SUFF=REPORTS\n//TSOBATCH EXEC TSOBATCH\n//VTOCOUT   DD DSN=&&VTOC,DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,1))\n//INPUT     DD *\nVTOC ALL TRK +\nPRINT(NEW +\n(DSNAME VOLUME DSO ALLOC UNUSED PCT EX LRECL BLKSZ CDATE REFDT)) +\nNOSORT NOHEADING\n//SAS      EXEC SAS\n//VTOCOUT   DD   DSN=&&VTOC,DISP=(OLD,DELETE)\n//SYSIN     DD   *\n OPTIONS  ERRORS=0 DATE LABEL NOTES SOURCE;\n\n     DATA\n          ALLVTOCS  (KEEP=DSNAME VOLSER  DSORG  ALLOC\n                          UNUSED  PERCENT EXTENT\n                          BLKSIZE  CDATE   RDATE )\n          VTOCS\n          TECHVOLS\n          PRODDSN (KEEP=PREFIX DSNAME VOLSER DSORG ALLOC UNUSED)\n          ;\n          * INITIALIZE VARIABLES;\n          IF _N_=1  THEN DO;\n             XDATE=TODAY();\n             JDATE=JULDATE(XDATE);\n             TEMPDSN='SYS'||JDATE; TEMPDSN=COMPRESS(TEMPDSN);\n             DROP XDATE JDATE;\n             OLDVOL='      ';\n             TOTTRKS=0;\n             VOLTRKS=885*15;\n             RETAIN VOLTRKS TEMPDSN ;\n            END;\n          LABEL ALLOC='ALLOCATION*IN*TRACKS'   DSNAME='DATA*SET*NAME'\n                VOLSER='VOLUME*SERIAL*NUMBER'  DSORG='DATA*SET*ORGANZ'\n                UNUSED='UNUSED*SPACE*TRACKS'   TYPE='ALLOCATION*TYPE'\n                PREFIX='DATA*SET*PREFIX'       PERCENT='PERCENT*USED'\n                EXTENT='EXTENTS'               LRECL='LRECL'\n                BLKSIZE='BLKSIZE'              CDATE='CREATION*DATE'\n                RDATE='LAST*REFERENCE*DATE'\n                ;\n          INFILE VTOCOUT ;\n        * DROP CARRIAGE CONTROL ;\n          INPUT @1  CC  $1.  @; IF CC = '0'  THEN DELETE; DROP CC;\n\n          INPUT @2  DSNAME     $44.\n                @47 VOLSER     $6.\n                @54 DS         $2.\n                @59 ALLOC      5.\n                @66 UNUSED     5.\n                @72 PERCENT    3.\n                @76 EXTENT     2.\n                @80 LRECL      4.\n                @85 BLKSIZE    5.\n                @91 C_DATE    $5.\n                @97 R_DATE    $5.\n                ;\n          IF ALLOC=UNUSED THEN UNUSED=0;\n\n          IF DS='VS' THEN DSORG='VSAM';\n          IF DS='PO' THEN DSORG='PART';\n          IF DS='PS' THEN DSORG='SEQ';\n          IF DS='DA' THEN DSORG='DIR';\n          DROP DS;\n\n        * ELIMINATE TEMPORARY DATASETS ;\n          IF SUBSTR(DSNAME,1,8)=TEMPDSN THEN DELETE;\n\n        * PROCESS LAST REFERENCE AND CREATE DATES ;\n          IF C_DATE\u00ac=' 0000' THEN  CDATE=DATEJUL(C_DATE);\n          IF R_DATE\u00ac=' 0000' THEN  RDATE=DATEJUL(R_DATE);\n\n        * GATHER STATS @ VOLUME LEVEL   ;\n          IF OLDVOL\u00ac=VOLSER THEN DO;\n             OLDVOL=VOLSER;\n             TOTTRKS=TOTTRKS+(885*15);\n             RETAIN TOTTRKS OLDVOL;\n            END;\n\n        * SEGRAGATE BY TECH AND PROD    ;\n          PREFIX=SUBSTR(DSNAME,1,4) ;\n          IF PREFIX='TECH' OR PREFIX='SYS1' OR PREFIX='SYSU' OR\n             SUBSTR(DSNAME,1,5)='VSYS1'\n              THEN TYPE='TECH';\n              ELSE TYPE='PROD';\n          IF PREFIX='PRMH' OR PREFIX='PUSH' OR\n             PREFIX='ERMH'\n             THEN OUTPUT PRODDSN ;\n\n        * ELIMINATE CERTAIN VOLUMES;\n          SV=SUBSTR(VOLSER,1,3);\n          IF SV='MVS' OR SV='CAT' OR SV='WOR' OR SV='SMP'\n             OR SV='HAS' OR SV='DLB' OR SV='HSM'\n             THEN OUTPUT TECHVOLS;\n             ELSE OUTPUT VTOCS;\n\n        * PUT ALL VOLUMES OUT ;\n          OUTPUT ALLVTOCS;\n\n   *------------------------*\n   * EVAL TECHVOLS VOLUMES  *\n   *------------------------*;\n     DATA TECHVOLS;   SET TECHVOLS;\n          X=INDEX(DSNAME,'.');\n          PREFIX=SUBSTR(DSNAME,1,X);\n     PROC SUMMARY DATA=TECHVOLS NWAY;\n          CLASS VOLSER PREFIX ;\n          VAR ALLOC UNUSED;\n          ID VOLTRKS;\n          OUTPUT OUT=TECHVOLS\n                 SUM(ALLOC UNUSED)=ALLOC UNUSED\n          ;\n     PROC SORT  DATA=TECHVOLS; BY VOLSER PREFIX ;\n   * DETERMINE FREE SPACE, NOTED BY TYPE='F', PER VOLSER ;\n     DATA TECHVOLX (KEEP=XPREFIX XALLOC OLDVOL) ;\n          SET TECHVOLS END=EOF ;\n          IF _N_=1 THEN DO;XPREFIX='FREE.';OLDVOL='      ';\n             RETAIN XPREFIX OLDVOL;END;\n          IF OLDVOL\u00ac=VOLSER OR EOF=1 THEN DO;\n             IF EOF=1 THEN XA=XA+ALLOC;\n             XALLOC=VOLTRKS-XA;\n             IF _N_\u00ac=1 THEN  OUTPUT TECHVOLX;\n             OLDVOL=VOLSER;\n             XA=0;\n             RETAIN XA OLDVOL ;\n            END;\n          XA=XA+ALLOC;\n     DATA TECHVOLX (KEEP=TYPE ALLOC VOLSER); SET TECHVOLX;\n          VOLSER=OLDVOL; PREFIX=XPREFIX; ALLOC=XALLOC;\n     DATA TECHVOLS; SET TECHVOLX TECHVOLS ;\n          CYLS=ALLOC/15;\n          CYLS=ROUND(CYLS,.1) ;\n     PROC SORT  DATA=TECHVOLS; BY VOLSER PREFIX ;\n     PROC CHART DATA=TECHVOLS;\n          PIE PREFIX / SUMVAR=ALLOC ;\n          BY VOLSER;\n          TITLE 'RMH   D A S D   ALLOCATIONS';\n          TITLE2 '---  SYSTEM  VOLUMES  ---';\n     PROC PRINT DATA=TECHVOLS NOOBS LABEL SPLIT='*' ;\n          VAR PREFIX ALLOC CYLS;\n          BY VOLSER ;\n          TITLE 'RMH DASD ALLOCATIONS BY VOLUME' ;\n          TITLE2 '---  ALL SYSTEM VOLUMES  ---';\n\n   *----------------------------*\n   * EVAL NON-TECHVOLS VOLUMES  *\n   *----------------------------*;\n     PROC SUMMARY DATA=VTOCS NWAY;\n          CLASS TYPE VOLSER ;\n          VAR ALLOC UNUSED;\n          ID VOLTRKS;\n          OUTPUT OUT=VTOCVS\n                 SUM(ALLOC UNUSED)=ALLOC UNUSED\n          ;\n\n   * SORT ALL DATA BY VOLSER AND TYPE - A MUST !! ;\n     PROC SORT  DATA=VTOCVS; BY VOLSER TYPE ;\n\n   * DETERMINE FREE SPACE, NOTED BY TYPE='F', PER VOLSER ;\n     DATA VTOC1 (KEEP=XTYPE XALLOC OLDVOL)\n          ;\n          SET VTOCVS END=EOF ;\n          IF _N_=1 THEN DO;\n             XTYPE='FREE';\n             OLDVOL='      ';\n             RETAIN XTYPE OLDVOL ;\n            END;\n          IF OLDVOL\u00ac=VOLSER OR EOF=1 THEN DO;\n             IF EOF=1 THEN XA=XA+ALLOC;\n             XALLOC=VOLTRKS-XA;\n             IF _N_\u00ac=1 THEN  OUTPUT VTOC1;\n             OLDVOL=VOLSER;\n             XA=0;\n             RETAIN XA OLDVOL ;\n            END;\n          XA=XA+ALLOC;\n\n     DATA VTOC1 (KEEP=TYPE ALLOC VOLSER); SET VTOC1;\n          VOLSER=OLDVOL; TYPE=XTYPE; ALLOC=XALLOC;\n\n     DATA VTOCALL; SET VTOCVS VTOC1;\n          CYLS=ALLOC/15;\n          CYLS=ROUND(CYLS,.1) ;\n\n     PROC SORT  DATA=VTOCALL; BY VOLSER TYPE ;\n\n     PROC CHART;\n          PIE TYPE / SUMVAR=ALLOC ;\n          BY VOLSER ;\n          TITLE 'RMH   D A S D   ALLOCATIONS';\n          TITLE2 'BY VOLSER AND TYPE';\n\n   * SUMMARIZE ALL VTOC INFO BY TYPE;\n     PROC SUMMARY DATA=VTOCALL NWAY;\n          CLASS TYPE ;\n          VAR ALLOC;\n          OUTPUT OUT=VTOCMAX\n                 SUM=ALLOC\n          ;\n     PROC CHART DATA=VTOCMAX;\n          PIE TYPE / SUMVAR=ALLOC ;\n          TITLE 'RMH   D A S D   ALLOCATIONS';\n          TITLE2 'BY  TYPE';\n\n\n     PROC PRINT DATA=VTOCALL NOOBS LABEL SPLIT='*' ;\n          VAR TYPE ALLOC CYLS;\n          BY VOLSER ;\n          TITLE 'RMH DASD ALLOCATIONS BY VOLUME' ;\n\n     PROC SORT  DATA=PRODDSN;  BY PREFIX VOLSER DSNAME;\n     PROC PRINT DATA=PRODDSN NOOBS LABEL SPLIT='*' ;\n          VAR DSNAME VOLSER DSORG ALLOC UNUSED;\n          BY PREFIX ;\n          SUM ALLOC UNUSED ;\n          TITLE2 '__ PRODUCTION __';\n\n     PROC SORT  DATA=ALLVTOCS;  BY VOLSER;\n     PROC PRINT DATA=ALLVTOCS NOOBS LABEL SPLIT='*' ;\n          BY VOLSER;\n          VAR DSNAME DSORG  ALLOC UNUSED  PERCENT EXTENT\n              BLKSIZE  CDATE  RDATE;\n          FORMAT CDATE  RDATE DATE7. ;\n          TITLE 'ALL DASD ALLOCATIONS BY VOLUME' ;\n/*\n/*\n// EXEC TITLE,PRE=HSM,SUFF=REPORT\n//DFHSM#01 EXEC  PGM=HSMCHECK\n//SYSPRINT  DD   SYSOUT=(,)\n//SYSUDUMP  DD   SYSOUT=(,)\n//HSMPRINT  DD   SYSOUT=(,)\n//HSMINPUT  DD   DSN=DFHSM.BCDS,DISP=SHR\n//HSMCMNDS  DD  DSN=&&TEMP,DISP=(,PASS),UNIT=SYSDA,\n//          SPACE=(CYL,(1,1,45)),DCB=SYS1.PROCLIB\n//SYSIN     DD  *\nHSMVOLS(++++++)\n//*\n// EXEC TITLE,PRE=HMS,SUFF='BY.PREFIX'\n//DFHSMSAS EXEC SAS\n//FT11F001  DD  DUMMY\n//FILEIN   DD   DSN=&&TEMP,DISP=(OLD,DELETE)\n//SYSIN    DD   *\n  DATA DATA;\n  INFILE FILEIN MISSOVER;\n  INPUT  @1    TRASH      $1.\n         @12   DSN        $44.\n         @71   BKUPCNT    $2.;\n  FRSTNODE =  SUBSTR(DSN,1,(INDEXC(DSN,'.')-1));\n  DROP BKUPCNT DSN TRASH;\n\n  PROC SORT; BY FRSTNODE;\n  PROC FREQ;\n       TABLES FRSTNODE;\n       TITLE 'FREQUENCY BREAKDOWN OF DFHSM BCDS BY FIRST DSN NODE';\n// EXEC TITLE,PRE='MVS/XA',SUFF=FMIDS\n//CSI EXEC SAS\n//SMPCSI     DD  DSN=SYS1.MVSSMPE.CSI,DISP=SHR\n//ZONERPT  DD       SYSOUT=(,)\n//DDEFRPT  DD DUMMY,SYSOUT=(,)\n//DSNRPT   DD DUMMY,SYSOUT=(,)\n//PGMRPT   DD DUMMY,SYSOUT=(,)\n//FMIDRPT  DD       SYSOUT=(,)\n//ASMRPT   DD DUMMY,SYSOUT=(,)\n//SYSMOD   DD DUMMY,SYSOUT=(,)\n//LMODRPT  DD DUMMY,SYSOUT=(,)\n//MACRPT   DD DUMMY,SYSOUT=(,)\n//MODRPT   DD DUMMY,SYSOUT=(,)\n//SRCRPT   DD DUMMY,SYSOUT=(,)\n//DLIBRPT  DD DUMMY,SYSOUT=(,)\n//SRCLTRPT DD DUMMY,SYSOUT=(,)\n//LMODCRPT DD DUMMY,SYSOUT=(,)\n//HOLDRPT  DD DUMMY,SYSOUT=(,)\n//SYSIN    DD DSN=THIS.LIBRARY(CSIRPT),DISP=SHR\n// EXEC TITLE,PRE='    I/O',SUFF=CONFIGUARTION\n//CONFIG1  EXEC PGM=GAP1,PARM='VOL,LCH'    RANGE\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUDUMP  DD  SYSOUT=(,),HOLD=YES\n//ITABLE    DD  DSN=IPO1.GENLIB(DEVICES),DISP=SHR\n//RTABLE    DD  DSN=&&SYS1,DISP=(,PASS),SPACE=(TRK,(5,1)),UNIT=SYSDA\n//SYSIN     DD  *\n         TITLE                 I / O    CONFIGURATION\n         TITLE\n         TITLE\n         VOL   241=       243=       244=       245=       246=\n//CONFIF2  EXEC PGM=SORT\n//SYSOUT    DD  DUMMY\n//SYSUDUMP  DD  SYSOUT=(,)\n//SORTIN    DD  DSN=*.CONFIG1.RTABLE,DISP=(OLD,DELETE)\n//SORTWK01  DD  SPACE=(CYL,3),UNIT=SYSDA\n//SORTOUT   DD  DSN=&&SYS2,SPACE=(TRK,(5,1)),UNIT=SYSDA,DISP=(,PASS),\n//          DCB=(RECFM=FB,LRECL=80,BLKSIZE=9600)\n//SYSIN     DD  *\n SORT FIELDS=(9,1,CH,A,5,4,BI,A,13,4,BI,A)\n//*\n//CONFIG3  EXEC PGM=GAP2\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUDUMP  DD  SYSOUT=A,HOLD=YES\n//RIOTBL    DD  DSN=*.CONFIF2.SORTOUT,DISP=(OLD,DELETE)\n//RIOPRT    DD  DSN=&&SYS3,DISP=(,PASS),SPACE=(TRK,(3,1)),UNIT=SYSDA\n//RIOPRV    DD  DSN=&&SYSV,DISP=(,PASS),SPACE=(TRK,(3,1)),UNIT=SYSDA\n//*\n//CONFIG4  EXEC PGM=SORT\n//SYSOUT    DD  DUMMY\n//SYSUDUMP  DD  SYSOUT=A,HOLD=YES\n//SORTIN    DD  DSN=*.CONFIG3.RIOPRT,DISP=(OLD,DELETE)\n//SORTWK01  DD  SPACE=(CYL,3),UNIT=SYSDA\n//SORTOUT   DD  DSN=&&SYS4,SPACE=(CYL,(1,1)),UNIT=SYSDA,DISP=(,PASS),\n//          DCB=(RECFM=FB,LRECL=80,BLKSIZE=9600)\n//SYSIN     DD  *\n SORT FIELDS=(5,4,BI,A,9,1,CH,A,49,4,BI,A)\n//CONFIG5  EXEC PGM=GAP3\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUDUMP  DD  SYSOUT=A,HOLD=YES\n//RIOTBL    DD  DSN=*.CONFIG4.SORTOUT,DISP=(OLD,DELETE)\n//RIOPRT    DD  DSN=&&SYS5,DISP=(,PASS),SPACE=(CYL,(1,1)),UNIT=SYSDA\n//RIOPRT1   DD  DSN=&&SYS6,DISP=(,PASS),SPACE=(CYL,(1,1)),UNIT=SYSDA\n//*\n//CONFIG6  EXEC PGM=GAP4\n//SYSPRINT  DD  SYSOUT=(,)\n//SYSUDUMP  DD  SYSOUT=(,)\n//RIOPRV    DD  DSN=*.CONFIG3.RIOPRV,DISP=(OLD,DELETE)\n//RIOPRT1   DD  DSN=*.CONFIG5.RIOPRT1,DISP=(OLD,DELETE)\n//RIOPRT2   DD  DSN=&&DIAGF,DISP=(,PASS),SPACE=(CYL,(1,1)),UNIT=SYSDA\n//STEP01   EXEC PGM=IEBGENER\n//SYSPRINT  DD  DUMMY\n//SYSUT1    DD  DSN=&&DIAGF,DISP=(OLD,PASS)\n//SYSUT2    DD  SYSOUT=(,),DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330),\n//          COPIES=1\n//SYSIN     DD  DUMMY\n//UCBSCAN  EXEC  PGM=UCBSCAN\n//SYSOUT    DD   SYSOUT=(,)\n//*\n// EXEC TITLE,PRE=SYSTEM,SUFF=TABLES\n//SPZAP  EXEC PGM=AMASPZAP\n//SYSPRINT DD DSN=&&SYSP,DISP=(,PASS),UNIT=SYSDA,\n// SPACE=(CYL,(3,1))\n//SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN    DD *\n*------------------------------------------------------------------*\n*   TSO AUTHORIZED COMMANDS TABLE - SYS1.LPALIB                    *\n*------------------------------------------------------------------*\n*                                                                  *\n DUMPT IKJEFT02 IKJEFTE2\n DUMPT IKJEFT02 IKJEFTE8\n*------------------------------------------------------------------*\n*   PROGRAM PROPERTIES TABLE  -  SYS1.LPALIB                       *\n*------------------------------------------------------------------*\n*\n DUMPT IEFSD060 IEFSDPPT\n// EXEC PGM=IEBGENER,COND=(0,LT,SPZAP)\n//SYSPRINT DD DUMMY\n//SYSIN    DD DUMMY\n//SYSUT1   DD DSN=&&SYSP,DISP=(OLD,DELETE)\n//SYSUT2   DD SYSOUT=(,)\n//SPTSOE3 EXEC PGM=AMASPZAP,COND=(0,EQ,SPZAP) IF STEP(SPZAP) > 0 THEN\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN    DD *\n*------------------------------------------------------------------*\n*   TSO AUTHORIZED COMMANDS TABLE - SYS1.LPALIB  TSO/E V3          *\n*------------------------------------------------------------------*\n*                                                                  *\n DUMPT IKJTABLS IKJEFTE2\n DUMPT IKJTABLS IKJEFTE8\n DUMPT IKJTABLS IKJEFTNS\n DUMPT IKJTABLS IKJEFTAP\n//SPZAP2 EXEC PGM=AMASPZAP\n//SYSPRINT DD SYSOUT=(,)\n//SYSLIB   DD DSN=SYS1.LINKLIB,DISP=SHR\n//SYSIN    DD *\n*------------------------------------------------------------------*\n*   SUBSYSTEM NAME TABLE CL4'NAME' CL8'ENTRYPT' CL68'COMMENTS'     *\n*   EOF: XL4'FFFFFFFF' AS THE SUBSYSTEM NAME  -  SYS1.LINKLIB      *\n*------------------------------------------------------------------*\n*\n DUMPT IEFJSSNT ALL\n*------------------------------------------------------------------*\n*   MASTER JCL   - SYS1.LINKLIB                                    *\n*------------------------------------------------------------------*\n*\n DUMPT MSTJCL00\n//SPZAP3 EXEC PGM=AMASPZAP\n//SYSPRINT DD SYSOUT=(,)\n//SYSLIB   DD DSN=SYS1.NUCLEUS,DISP=SHR\n//SYSIN    DD *\n*------------------------------------------------------------------*\n*   IEALIMIT  - SYS1.NUCLEUS                                       *\n*------------------------------------------------------------------*\n*\n DUMPT IEANUC01 IEALIMIT\n/*\n// EXEC TITLE,PRE=WEEKLY,SUFF=JOBSTEPS\n// EXEC PGM=PDSUTIL\n//SYSPRINT DD  SYSOUT=(,)\n//SYSUT1   DD  DSN=THIS.LIBRARY,DISP=SHR\n//SYSIN    DD  *\n./ LIST WEEKLY\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTONROL#": {"ttr": 9737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FILE022"}, "text": "//WTONROLL JOB\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//*                                                                   *\n//* THIS IS THE JCL TO ASSEMBLE, LINK, AND EXEC THE WTONROLL CODE.    *\n//*                                                                   *\n//* PERFORM A 'CHANGE ALL' ON 'THIS.LIBRARY' AND 'A.LINKLIB' TO POINT *\n//*         TO INSTALLATION LIBRARIES                                 *\n//*                                                                   *\n//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\n//**\n//ASM     EXEC PGM=IEV90,PARM='OBJECT,XREF(SHORT)',REGION=2M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,DCB=BLKSIZE=16000\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=THIS.LIBRARY,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(6,1))\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(3120,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=THIS.LIBRARY(WTONROLL),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL),\n//             COND=(6,LT,ASM),REGION=256K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSLMOD  DD  DSN=A.LINKLIB(WTONROLL),DISP=SHR\n//* TEST RUN IT\n//SYSTAT  EXEC PGM=WTONROLL,PARM='TEST MESSAGE'\n//STEPLIB  DD  DSN=*.LKED.SYSLMOD,DISP=SHR\n//SYSOUT   DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WTONROLL": {"ttr": 9739, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x08\\x7f\\x00\\x88\\x08\\x7f\\x12\\x00\\x005\\x005\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-03-27T00:00:00", "modifydate": "1988-03-27T12:00:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "FILE022"}, "text": " TITLE '>>>  ISSUE A NON-ROLL WTO  <<<'\n*-------------------------------------------------------------------*\n*   NAME: WTONROLL                                                  *\n*                                                                   *\n*   FUNCTION: TO ISSUE A MESSAGE TO THE CONSOLE VIA PARM PASSED     *\n*             BY A PROGRAM. GOOD FOR CONDITION CODE CHECKING        *\n*             FOR ABENDED OR NON-ZERO RETURN CODES                  *\n*                                                                   *\n*                                                                   *\n*   MACROS: WTO, REGS                                               *\n*                                                                   *\n*   EXECUTION: //S1  EXEC PGM=WTONROLL,PARM='MESSAGE TO OPERATOR'   *\n*                                                                   *\n*             AUTHOR = MARK V. HEDGES                               *\n*                      ADRIA LABORATORIES                           *\n*                      7001 POST ROAD                               *\n*                      DUBLIN OH. 43017                             *\n*                      (614) 764-8175                          PTL  *\n*                                                                   *\n*                                                                   *\n*-------------------------------------------------------------------*\n         USING  *,R15\n         L      R2,0(,R1)              * LOAD PARM ADDRESS\n         LH     R3,0(,R2)              * LOAD LENGTH OF PARM\n         LTR    R3,R3                  * IS THERE ANY PARM ??\n         BZ     EXIT                   * NOPE, EXIT\n         LA     R4,WTOCMD+8            * ADDRESS INTO MESSAGE\n         BCTR   R3,0                   * FOR PARM LENGTH <EXEC>\n         MVC    0(*-*,R4),2(R2)        * <<EXCUTED>> MOVE PARM\n         EX     R3,*-6                 * DO IT\nWTOCMD   WTO   '                                                       X\n                             ',                                        X\n               ROUTCDE=(1),DESC=(11)\nEXIT     EQU    *\n         DROP   R15                    *\n         BR     R14\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT022/FILE022.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT022", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}