{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011453000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE192.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE192.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x07'", "DS1TRBAL": "b'\\xa58'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x82\\x00\\x02\\x01\\x82\\x00\\x07\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$README": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x07O\\x12\\x13\\x00\\xa1\\x00\\x9f\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-15T12:13:00", "lines": 161, "newlines": 159, "modlines": 0, "user": "SBGCSC"}, "text": "\n\n                 MVS Recovery Routines Sample Programs          Page 1\n\n\nOverview\n________\n\n    This directory  contains the  sample programs  and  macros  first\npresented in:\n\n    Session O318 - Recovery Routines in MVS: How to Write Them\n    Share 79\n    August 1992\n    Atlanta, Georgia\n\n    Also presented at Share 80 in San Francisco, California.\n\n    Also include  in this  directory are  the  control  statments  to\nupload the  files to  mainframe DASD using FTTSO, IND$FILE or XCOM6.2\nas well as the JCL to compile and execute the sample programs.\n\nFiles in This Directory\n_______________________\n\n    READ.ME        - This file\n    SENDASM.BAT    - FTTSO statements to upload assembly source\n    SENDJCL.BAT    - FTTSO statements to upload JCL files\n    SENDMAC.BAT    - FTTSO statements to upload macros\n    SYSIN01B.XCM   - XCOM6.2 statements to upload JCL\n    SYSIN01C.XCM   - XCOM6.2 statements to upload source and macros\n    ALLOC.JCL      - JCL to allocate libraries\n    ASMLKD.JCL     - JCL to assemble and link sample programs\n    EXEC.JCL       - JCL to execute sample programs\n    CARR.ASM       - Code fragment: establish an ARR\n    CESTAE.ASM     - Program: establish an ESTAEX routine\n    CFRR.ASM       - Code fragment: establish an FRR\n    GRECOV.ASM     - Program: Generalized recovery routine\n    ENDMOD.MAC     - Exit logic macro\n    EQUATES.MAC    - Inner macro for MODULE\n    ESTPARM.MAC    - DSECT that maps recovery routine parmlist\n    INNERMM.MAC    - Inner macro for MODULE\n    MODULE.MAC     - Entry logic macro\n\n\n                 MVS Recovery Routines Sample Programs          Page 2\n\n\nUploading Programs To MVS Using FTTSO or IND$FILE\n_________________________________________________\n\n    1) On  the MVS  system: Allocate  a JCL library using ISPF 3.2 or\n       IEFBR14.       The   library   should   have   the   following\n       characteristics:\n                    BLKSIZE=3120, LRECL=80, RECFM=FB,\n                    DSORG=PO, SPACE=(TRK,(15,1,10))\n\n    2) On  the PC:  Execute the file SENDJCL.BAT to transfer assembly\n       and link-edit  JCL to  the library  allocated in  the previous\n       step.   SENDJCL.BAT, as  well as  the other .BAT files on this\n       diskette,  contains   IND$FILE  control  statements  for  file\n       transfer.   If you are using FTTSO or some other file transfer\n       utility, edit  these files  so that  they contain  the correct\n       control statements.\n       Specify the host library as the operand of SENDJCL.BAT:\n                    SENDJCL host.jcl.library\n\n    3) On  the MVS  system:   Edit the JOB in member ALLOC in the JCL\n       library.   This JOB, which allocates a macro library, assembly\n       source library, object library and load library, contains edit\n       instructions.  Submit the JOB and check the return codes.\n\n    4) On the PC:  Execute the file SENDMAC.BAT to transfer macros to\n       the macro library allocated in the previous step.  Specify the\n       macro library as the operand of SENDMAC.BAT:\n                    SENDMAC host.macro.library\n\n    5) On  the PC:  Execute the file SENDASM.BAT to transfer assembly\n       source files  to the  source library  allocated in step 4.  If\n       you do  not want  to transfer all the source files to the host\n       system (the  transfer may  take some  time), add 'REM ' before\n       each SEND statement that is to be ignored.  Specify the source\n       library as the operand of SENDASM.BAT:\n                    SENDASM host.source.library\n\n\n                 MVS Recovery Routines Sample Programs          Page 3\n\n\nUploading Programs To MVS Using XCOM 6.2\n________________________________________\n\n    1) On  the MVS  system: Allocate  a JCL library using ISPF 3.2 or\n       IEFBR14.       The   library   should   have   the   following\n       characteristics:\n                    BLKSIZE=3120, LRECL=80, RECFM=FB,\n                    DSORG=PO, SPACE=(TRK,(15,1,10))\n\n    2) On MVS: Execute XCOM6.2 with the following SYSIN01 file:\n                    TYPE=RECEIVE\n                    LU=xcom-on-pc\n                    FILETYPE=FILE\n                    FILEOPT=REPLACE\n                    LFILE=host-jcl-library(SYSIN01B)\n                    FILE=A:\\SYSIN01B.XCM\n                    NEWXFER\n                    LFILE=host-jcl-library(SYSIN01C)\n                    FILE=A:\\SYSIN01C.XCM\n\n    3) On  MVS: edit  the member  SYSIN01B which was transferred from\n       the PC:\n\n       . Change LU= to PC XCOM's LU.\n       . Change all strings \"@JCL@\" to the host JCL library name.\n\n       Execute XCOM6.2 on MVS using this SYSIN01 file to.\n\n    4) On  the MVS  system:   Edit the JOB in member ALLOC in the JCL\n       library.   This JOB, which allocates a macro library, assembly\n       source library, object library and load library, contains edit\n       instructions.  Submit the JOB and check the return codes.\n\n    5) On MVS: edit the member SYSIN01C transferred from the PC:\n\n       . Change LU= to PC XCOM's LU\n       . Change  all strings  \"@SOURCE@\" to the host assembler source\n         library name.\n       . Change  all strings  \"@MACLIB@\" to  the host  macro  library\n         name.\n\n       Execute XCOM6.2 on MVS using this SYSIN01 file.\n\n\n                 MVS Recovery Routines Sample Programs          Page 4\n\n\nAssembling, Linking and Executing Programs\n__________________________________________\n\n    1) On  the MVS  system: Edit  the JOB in member ASMLKD in the JCL\n       library.   This JOB,  which contains  steps  to  assemble  and\n       linkedut the  programs in  the source  library, contains  edit\n       instructions.\n\n    2) The member EXEC in the JCL library contains JCL to execute the\n       sample program as a batch job.\n\n\nQuestions\n_________\n\n    If you  have any questions about any of the programs or macros in\nthis directory you can write or telephone:\n\n    Mitchell Marx\n    MD-Paladin Inc\n    Suite 169\n    163 Amsterdam Ave.\n    New York, NY 10023\n    (212) 787-9532\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$UPLOAD": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x04\\x00\\x04\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "PALADIN"}, "text": "CALL SEND CESTAE.ASM   '%1(CESTAE)'    CRLF ASCII\nCALL SEND GRECOV.ASM   '%1(GRECOV)'    CRLF ASCII\nCALL SEND CARR.ASM     '%1(CARR)'      CRLF ASCII\nCALL SEND CFRR.ASM     '%1(CFRR)'      CRLF ASCII\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$UPLOAJ": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x03\\x00\\x03\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "PALADIN"}, "text": "CALL SEND ALLOC.JCL   '%1(ALLOC)'  ASCII CRLF\nCALL SEND ASMLKD.JCL  '%1(ASMLKD)' ASCII CRLF\nCALL SEND EXEC.JCL    '%1(EXEC)'   ASCII CRLF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$UPLOAM": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x05\\x00\\x05\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "PALADIN"}, "text": "CALL SEND ENDMOD.MAC   '%1(ENDMOD)'    CRLF ASCII\nCALL SEND EQUATES.MAC  '%1(EQUATES)'   CRLF ASCII\nCALL SEND ESTPARM.MAC  '%1(ESTPARM)'   CRLF ASCII\nCALL SEND INNERMM.MAC  '%1(INNERMM)'   CRLF ASCII\nCALL SEND MODULE.MAC   '%1(MODULE)'    CRLF ASCII\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLOC": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00-\\x00-\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "PALADIN"}, "text": "//*-------------------------------------------------------------------*\n//*  THIS JOB ALLOCATES ALL LIBRARIES NEEDED TO ASSEMBLE AND LINK     *\n//*  PROGRAMS IN \"MVS POWER PROGRAMMING\".  BEFORE EXECUTING THIS JOB: *\n//*   1) ADD A JOB CARD.                                              *\n//*   2) CHANGE THE LINES MARKED \"<== \" .                             *\n//*   3) MAKE SURE THAT UNIT=SYSDA IS APPROPRIATE FOR THE VOLSERS     *\n//*      WHERE THE LIBRARIES ARE BEING ALLOCATED. CHANGE IF REQUIRED. *\n//*-------------------------------------------------------------------*\n//ALLOC    EXEC PGM=IEFBR14\n//*        *------------------------------*\n//*        *  ALLOCATE SOURCE LIBRARY     *\n//*        *------------------------------*\n//ASM      DD DSN=user.ASM,               <== DSNAME OF SOURCE LIBRARY\n//            VOL=SER=VOLSER,             <== VOLSER OF SOURCE LIBRARY\n//            UNIT=SYSDA,\n//            DISP=(,CATLG),\n//            SPACE=(CYL,(8,1,50)),\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120)\n//*        *------------------------------*\n//*        *  ALLOCATE MACRO LIBRARY      *\n//*        *------------------------------*\n//MACLIB   DD DSN=user.MACLIB,            <== DSNAME OF MACRO  LIBRARY\n//            VOL=SER=VOLSER,             <== VOLSER OF MACRO  LIBRARY\n//            UNIT=SYSDA,\n//            DISP=(,CATLG),\n//            SPACE=(CYL,(1,1,10)),\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120)\n//*        *------------------------------*\n//*        *  ALLOCATE OBJECT LIBRARY     *\n//*        *------------------------------*\n//OBJ      DD DSN=user.OBJ,               <== DSNAME OF OBJECT LIBRARY\n//            VOL=SER=VOLSER,             <== VOLSER OF OBJECT LIBRARY\n//            UNIT=SYSDA,\n//            DISP=(,CATLG),\n//            SPACE=(CYL,(8,1,50)),\n//            DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120)\n//*        *------------------------------*\n//*        *  ALLOCATE LOAD LIBRARY       *\n//*        *------------------------------*\n//LOAD     DD DSN=user.LOAD,              <== DSNAME OF LOAD   LIBRARY\n//            VOL=SER=VOLSER,             <== VOLSER OF LOAD   LIBRARY\n//            UNIT=SYSDA,\n//            DISP=(,CATLG),\n//            SPACE=(CYL,(10,1,50)),\n//            DCB=(DSORG=PO,RECFM=U,BLKSIZE=13030)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMLKD": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00C\\x00C\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "PALADIN"}, "text": "//*-------------------------------------------------------------------*\n//*  THIS JOB CONTAINS INSTREAM PROCEDURES AND STEPS TO ASSEMBLE      *\n//*  AND LINK EDIT THE PROGRAMS IN \"MVS POWER PROGRAMMING\".           *\n//*  BEFORE EXECUTING THIS JOB:                                       *\n//*    1) ADD A JOB CARD.                                             *\n//*    2) CHANGE EVERY LINE MARKED:  \"<== \" .                         *\n//*  COPY ANY PROGRAM LINKED WITH PARM='AC=1' INTO AN APF-AUTHORIZED  *\n//*  LIBRARY BEFORE EXECUTING IT.                                     *\n//*-------------------------------------------------------------------*\n//*        *------------------------------*\n//*        *  ASSEMBLY PROCEDURE          *\n//*        *------------------------------*\n//ASSEM    PROC MEMBER=,\n//         PARM1=,\n//         UNIT=SYSDA,                <== CHANGE IF NECESSARY\n//         MACLIB='MACLIB',           <== NAME OF MACRO  LIBRARY\n//         SOURCE='ASM',              <== NAME OF SOURCE LIBRARY\n//         OBJECT='OBJ'               <== NAME OF OBJECT LIBRARY\n//ASSEM    EXEC PGM=IEV90,\n//            PARM='NOOBJECT,DECK,XREF(SHORT),&PARM1'\n//SYSLIB   DD DISP=SHR,DSN=&MACLIB\n//         DD DISP=SHR,DSN=SYS1.AMODGEN\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//*        DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=&UNIT,SPACE=(1700,(600,100))\n//SYSUT2   DD UNIT=&UNIT,SPACE=(1700,(600,100))\n//SYSUT3   DD UNIT=&UNIT,SPACE=(1700,(600,100))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD DUMMY\n//SYSIN    DD DISP=SHR,DSN=&SOURCE(&MEMBER)\n//SYSPUNCH DD DISP=SHR,DSN=&OBJECT(&MEMBER)\n//         PEND\n//*        *------------------------------*\n//*        *  LINK EDIT PROCEDURE         *\n//*        *------------------------------*\n//LKED     PROC PARM1=,\n//         UNIT=SYSDA,                <== CHANGE IF NECESSARY\n//         OBJECT='OBJ',              <== NAME OF OBJECT LIBRARY\n//         LOAD='LOAD'                <== NAME OF LOAD   LIBRARY\n//LKED     EXEC PGM=IEWL,\n//            PARM='XREF,LET,LIST,NCAL,&PARM1'\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD UNIT=&UNIT,SPACE=(1024,(50,20))\n//OBJ      DD DSN=&OBJECT,DISP=SHR\n//SYSLMOD  DD DSN=&LOAD,DISP=SHR\n//SYSLIN   DD DDNAME=SYSIN\n//         PEND\n//*-------------------------------------------------------------------*\n//*        CESTAE                                                     *\n//*-------------------------------------------------------------------*\n//CESTAE   EXEC ASSEM,MEMBER=CESTAE,PARM1='RENT'\n//LCESTAE EXEC LKED,PARM1='RENT'\n//LKED.SYSIN DD *\n           ENTRY CESTAE\n           INCLUDE OBJ(CESTAE)\n           NAME  CESTAE(R)\n/*\n//*-------------------------------------------------------------------*\n//*        GRECOV                                                     *\n//*-------------------------------------------------------------------*\n//GRECOV   EXEC ASSEM,MEMBER=GRECOV,PARM1='RENT'\n//LGRECOV  EXEC LKED,PARM1='RENT'\n//LKED.SYSIN DD *\n           ENTRY GRECOV\n           INCLUDE OBJ(GRECOV)\n           NAME  GRECOV(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CARR": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00A\\x00A\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "PALADIN"}, "text": "..       ..    ..                      ..\n*        *---------------------------------------*                        96\n*        *     LOAD PROGRAM CALL (PC) ROUTINE    *                        97\n*        *---------------------------------------*                        98\n         LOAD  EP=PCRTN,ERRET=EXIT10   LOAD PROGRAM CALL ROUTINE          99\n         LR    R2,R0                   ADDRESS OF MODULE => R2           100\n..       ..    ..                      ..\n*        *---------------------------------------*                       102\n*        *     LOAD ARR                          *                       103\n*        *---------------------------------------*                       104\n         LOAD  EP=GRECOV,ERRET=EXIT14  LOAD RECOVERY ROUTINE             105\n         LR    R9,R0                   ADDRESS OF MODULE => R9           106\n..       ..    ..                      ..\n*        *---------------------------------------*                       115\n*        *     MODIFY THE ENTRY TABLE ENTRY      *                       116\n*        *---------------------------------------*                       117\n         ETDEF TYPE=SET,ETEADR=ETD1,   MODIFY ETE IN WORK AREA         X 118\n               ROUTINE=(2),            ADDRESS OF THE PC ROUTINE       X 119\n               PARM1=(7),              ADDRESS OF 1ST LATENT PARAMETER X 120\n               PC=STACKING,            STACKING PC ROUTINE             X 121\n               SSWITCH=YES,            BRANCH TO ANOTHER ADDRESS SPACE X 122\n               ASCMODE=PRIMARY,        RECEIVE CONTROL IN PRIMARY MODE X 123\n               SASN=OLD,               OLD PRIMARY IS NEW SECONDARY    X 124\n               AKM=(0:15),             CALLER CAN BE IN ANY PSW KEY    X 125\n               RAMODE=31,              ENTER IN 31 BIT MODE            X 126\n               STATE=SUPERVISOR,EK=8,  ENTERED IN PROB STATE/TCB KEY   X 127\n               EKM=(0:15),PKM=OR,      AT ENTRY SET NEW PKM 0:15       X 128\n               ARR=(9)                 ARR                               127\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CESTAE": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00c\\x00c\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 99, "newlines": 99, "modlines": 0, "user": "PALADIN"}, "text": "*+--------------------------------------------------------------------+    1\n*\u00a6       (C)   COPYRIGHT MD-PALADIN INC. 1992                         \u00a6    2\n*+--------------------------------------------------------------------+    3\n*\u00a6 FUNCTION:                                                          \u00a6    4\n*\u00a6   ILLUSTRATE HOW TO ESTABLISH AN ESTAEX RECOVERY ROUTINE           \u00a6    5\n*\u00a6 INPUTS:                                                            \u00a6    6\n*\u00a6   NONE                                                             \u00a6    7\n*\u00a6 OUTPUTS:                                                           \u00a6    8\n*\u00a6   R15 - RETURN CODE                                                \u00a6    9\n*\u00a6          0 - PROGRAM HAS COMPLETED NORMALLY                        \u00a6   10\n*\u00a6          8 - ESTAEX ROUTINE HAS BEEN ENTERED AND RECOVERED         \u00a6   11\n*\u00a6         12 - LOAD FAILED FOR ESTAEX ROUTINE                        \u00a6   12\n*\u00a6 PROGRAM LOGIC:                                                     \u00a6   13\n*\u00a6   1) LOAD THE ESTAE ROUTINE.                                       \u00a6   14\n*\u00a6   2) BUILD THE PARMLIST FOR THE ESTAEX ROUTINE.                    \u00a6   15\n*\u00a6   3) IF THE MODULE EXECUTES IN SUPERVISOR STATE, PUT THE MODULE    \u00a6   16\n*\u00a6      NAME AND ENTRY POINT IN THE PARMLIST.  (IN SUPERVISOR STATE,  \u00a6   17\n*\u00a6      RTM2 DOES NOT SUPPLY THEM IN THE SDWA.                        \u00a6   18\n*\u00a6   4) ISSUE THE ESTAEX MACRO TO ESTABLISH THE RECOVERY ROUTINE.     \u00a6   19\n*\u00a6   5) EXECUTE REMAINING INSTRUCTIONS; AN ERROR WILL CAUSE THE       \u00a6   20\n*\u00a6      ESTAEX ROUTINE TO RECOVER TO THE RECOVERY ADDRESS             \u00a6   21\n*\u00a6 ATTRIBUTES:                                                        \u00a6   22\n*\u00a6   REENTRANT, AMODE 31, RMODE ANY                                   \u00a6   23\n*+--------------------------------------------------------------------+   24\n         MODULE CESTAE,BASE=12,LOC=BELOW,AMODE=31,RMODE=ANY,           X  25\n               TEXT=' ESTABLISH AN ESTAEX ROUTINE'                        26\n*        *---------------------------------------*                        27\n*        *     LOAD THE ESTAE ROUTINE            *                        28\n*        *---------------------------------------*                        29\n         LOAD  EP=GRECOV,ERRET=EXIT0C LOAD THE ESTAEX ROUTINE             30\n         LR    R3,R0                 ADDRESS OF ESTAEX ROUTINE TO R3      31\n*        *---------------------------------------*                        32\n*        *     BUILD PARMLIST FOR ESTAEX ROUTINE *                        33\n*        *---------------------------------------*                        34\n         LAE   R4,ESTPARAM           ADDRESS OF PARMS FOR ESTAE RTN       35\n         USING ESTPARM,R4            MAP ESTAE PARMLIST                   36\n         LAE   R15,RETRY             RETRY ADDRESS                        37\n         ST    R15,ESTRETRY          SAVE IN PARMS FOR ESTAE ROUTINE      38\n*        *---------------------------------------*                        39\n*        *     UNCOMMENT THE FOLLOWING 2 LINES   *                        40\n*        *     IF THIS MODULE EXECUTES IN        *                        41\n*        *     SUPERVISOR STATE.                 *                        42\n*        *---------------------------------------*                        43\n*        ST    R12,ESTLOAD             ENTRY POINT TO ESTAE PARMLIST      44\n*        MVC   ESTMOD(8),=CL8'CESTAE'  MODULE NAME TO ESTAE PARMLIST      45\n*        *---------------------------------------*                        46\n*        *     ISSUE THE ESTAEX MACRO            *                        47\n*        *---------------------------------------*                        48\n         ESTAEX (R3),PARAM=(R4),MF=(E,ESTAELST)                           49\n*        *---------------------------------------*                        50\n*        *     THE FOLLOWING 4 INSTRUCTIONS      *                        51\n*        *     REPRESENTS THE REST OF THE        *                        52\n*        *     PROCESSING IN THIS MODULE.        *                        53\n*        *     AN ERROR WILL CAUSE RTM TO INVOKE *                        54\n*        *     THE ESTAEX ROUTINE.               *                        55\n*        *---------------------------------------*                        56\n         LAM   R1,R1,=A(X'00000001')        ..LOAD ACCESS REGS TO SHOW    57\n         LAM   R2,R2,=A(X'00000002')        ..HOW ESTAEX RTN DISPLAYS     58\nSOC1     DC    H'0'                         PROGRAM CHECK S0C1            59\n         B     EXIT00                                                     60\n*        *---------------------------------------*                        61\n*        *     THE ESTAEX ROUTINE RECOVERS HERE  *                        62\n*        *---------------------------------------*                        63\nRETRY    DS    0H                                                         64\n*        WTO   'AT RECOVERY POINT IN CALLER'                              65\n*======> ADD EXECUTABLE CODE HERE <====================================   66\n         B     EXIT08                                                     67\n*---------------------------------------------------------------------*   68\n*        EXIT ROUTINES                                                *   69\n*---------------------------------------------------------------------*   70\nEXIT00   DS    0H                      NORMAL COMPLETION                  71\n         XR    R15,R15                                                    72\n         B     EXIT                                                       73\nEXIT08   DS    0H                      ESTAE ROUTINE HAS RECOVERED        74\n         LAE   R15,8                                                      75\n         B     EXIT                                                       76\nEXIT0C   DS    0H                      LOAD FAILED FOR ESTAEX ROUTINE     77\n         LAE   R15,X'0C'                                                  78\n         B     EXIT                                                       79\n*---------------------------------------------------------------------*   80\n*        COMMON EXIT                                                  *   81\n*---------------------------------------------------------------------*   82\nEXIT     DS    0H                                                         83\n         LR    R2,R15                  PRESERVE RETURN CODE               84\n         ESTAEX 0                      CANCEL THE MOST RECENT ESTAE       85\n         LR    R15,R2                  RESTORE  RETURN CODE               86\n         ENDMOD                        RESTORE REGISTERS AND RETURN       87\n*---------------------------------------------------------------------*   88\n*        WORK AREA                                                    *   89\n*---------------------------------------------------------------------*   90\nWCESTAE  DSECT                                                            91\nESTAELST ESTAEX ,MF=L                  ESTAEX PARAMETER LIST              92\nESTPARAM DS    0F,CL(LESTPARM)         PARMLIST FOR ESTAEX ROUTINE        93\nLCESTAE  EQU   *-WCESTAE                                                  94\n*---------------------------------------------------------------------*   95\n*        OTHER DSECTS                                                 *   96\n*---------------------------------------------------------------------*   97\n         ESTPARM                       MAP PARMLIST FOR EXTAEX ROUTINE    98\n         END                                                              99\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CFRR": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00B\\x00B\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "PALADIN"}, "text": "\n..       ..    ..\n*        *---------------------------------------*                        25\n*        *     ESTABLISH FRR RECOVERY            *                        26\n*        *---------------------------------------*                        27\n         L     R2,SRBADFRR             ADDRESS FRR ROUTINE                28\n         SETFRR A,FRRAD=(R2),WRKREGS=(R4,R5),PARMAD=(R6)                  29\n         L     R5,SRBADFPM             ADDRESS OF PARMLIST FOR FRR RTN\n         ST    R5,0(R6)                SAVE IN PARM RETURNED BY SETFRR\n         USING ESTPARM,R5              MAP PARMLIST\n         LA    R1,RETRY                ..PUT RETRY ADDRESS                30\n         ST    R1,ESTRETRY             ..INTO FRR PARAMETER               31\n         ST    R9,ESTLOAD              BASE REGISTER INTO FRR PARMLIST\n         MVC   ESTMOD(8),=CL8'SRBRTN'  COPY MODULE NAME INTO FRR PARMS\n..       ..    ..\n*        *---------------------------------------*                        38\n*        *     CANCEL THE FRR                    *                        39\n*        *---------------------------------------*                        40\nRETRY    DS    0H                      FRR RETRIES TO HERE                41\n         SETFRR D,WRKREGS=(R4,R5)      DELETE THE FRR                     42\n..       ..    ..\n         ESTPARM\n..       ..    ..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDMOD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00e\\x00e\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "PALADIN"}, "text": "         MACRO                                                             1\n         ENDMOD                                                            2\n.*+-------------------------------------------------------------------+    3\n.*\u00a6                     MAINTENANCE LOG                               \u00a6    4\n.*+----------+------------------------------------+---------+---------+    5\n.*\u00a6  DATE    \u00a6      DESCRIPTION                   \u00a6 CHANGED \u00a6 REFER   \u00a6    6\n.*+----------+------------------------------------+---------+---------+    7\n.*\u00a6 02/19/92 \u00a6 USE REGISTER R1 INSTEAD OF R13     \u00a6 MJM     \u00a6 #01     \u00a6    8\n.*\u00a6          \u00a6   IN STORAGE RELEASE ADDR= OPERAND \u00a6         \u00a6         \u00a6    9\n.*\u00a6          \u00a6   (FIX#-R0001)                     \u00a6         \u00a6         \u00a6   10\n.*\u00a6 07/14/92 \u00a6 TYPE=ESTAEX/PCRETRY= SUPPORT       \u00a6 MJM     \u00a6 #02     \u00a6   11\n.*\u00a6          \u00a6   (FIX#-R0007)                     \u00a6         \u00a6         \u00a6   12\n.*+----------+------------------------------------+---------+---------+   13\n.*\u00a6      (C)   COPYRIGHT MD-PALADIN INC. 1992                         \u00a6   14\n.*+-------------------------------------------------------------------+   15\n.*                                                                    \u00a6   16\n.**********************************************************************   17\n.*       END MODULE WITH THIS MACRO                                   *   18\n.**********************************************************************   19\n         GBLA  &POOL                                                      20\n         GBLB  &CALSA,&WORKA,&FLOAT,&RENTA                                21\n         GBLB  &RETRYA                                              #02   22\n         GBLB  &ESTAEA                                              #02   23\n         GBLC  &SYSSPLV,&SYSASCE                                          24\n         GBLC  &DSCTLEN,&NRENTWK,&DNAME                                   25\n         GBLC  &SAVEGEN,&SAVELEN,&SAVEFLT,&SPLEVI                         26\n         GBLC  &GRSVRET                                             #02   27\n         LCLC  &AROUND                                                    28\n&AROUND  SETC  'AWK'.'&SYSNDX'                                            29\n*---------------------------------------------------------------------*   30\n*        COMMON EXIT                                                  *   31\n*---------------------------------------------------------------------*   32\n         AIF   (&FLOAT EQ 0).NOFLT                                        33\n         LD    0,&SAVEFLT               .. RESTORE                        34\n         LD    2,&SAVEFLT+8             ..FLOATING                        35\n         LD    4,&SAVEFLT+16            ..POINT                           36\n         LD    6,&SAVEFLT+24            ..REGISTERS                       37\n.NOFLT   ANOP                                                             38\n         AIF   (&RETRYA EQ 0).NRETY                                 #02   39\n         LM    0,1,&GRSVRET       LOAD GENERAL REGS 0 AND 1         #02   40\n         LAM   0,1,&GRSVRET+8     LOAD ACCESS  REGS 0 AND 1         #02   41\n         MSTA  0                  PUT ON LINKAGE STACK              #02   42\n.NRETY   ANOP                                                       #02   43\n         AIF   (&WORKA EQ 0).NOWORK                                       44\n         AIF   (&RENTA EQ 1).YRENT                                        45\n         B     &AROUND                  BRANCH AROUND WORK AREA           46\n         CNOP  0,8                      FORCE DOUBLEWORD ALIGNMENT        47\n&NRENTWK DS    CL(&DSCTLEN)             WORK AREA                         48\n&AROUND  DS    0H                                                         49\n         AGO   .NOWORK                                                    50\n.YRENT   ANOP                                                             51\n         L     0,&SAVELEN               LENGTH OF STORAGE                 52\n         LR    1,13                     A(SAVE AREA) => R2          #01   53\n         AIF   ('&SPLEVI' GT '2').ESA1                              #01   54\n         AIF   (&CALSA EQ 0).NOCSA                                        55\n         L     13,&SAVEGEN+4            A(CALLER'S SAVE AREA)             56\n*                                       FREE WORK AREA STORAGE            57\n.NOCSA   ANOP                                                             58\n         LR    2,15                                                       59\n         FREEMAIN RU,                                                  X  60\n               LV=(0),                                                 X  61\n               SP=&POOL,                                               X  62\n               A=(1)                                                      63\n         LR    15,2                                                       64\n         AGO   .NOWORK                                                    65\n.ESA1    ANOP                                                             66\n         LR    2,15                     RETURN CODE => R2                 67\n*                                       FREE WORK AREA STORAGE            68\n         STORAGE RELEASE,COND=NO,                                      X  69\n               LENGTH=(0),                                             X  70\n               ADDR=(1),                                            #01X  71\n               SP=&POOL                                                   72\n         LR    15,2                     RETURN CODE => R15                73\n.NOWORK  ANOP                                                             74\n         AIF   ('&SPLEVI' LT '3').NOESA1                                  75\n         AIF   (&ESTAEA EQ 1).SESTAE                                #02   76\n         LA    0,3                      ..RESTORE REGS 0 AND 1            77\n         ESTA  0,0                      ..FROM STACK MODIFIABLE AREA      78\n         AGO   .ISPR                                                #02   79\n.SESTAE  ANOP                                                       #02   80\n         EREG  0,1                      RESTORE REGS 0 AND 1        #02   81\n.ISPR    ANOP                                                       #02   82\n         PR                             RESTORE REGS AND RETURN           83\n         AGO   .MEND                                                      84\n.NOESA1  ANOP                                                             85\n         AIF   (&CALSA EQ 0).NOCSA1                                       86\n         ST    15,16(,13)                                                 87\n         LM    14,12,12(13)             RESTORE CALLER'S REGISTERS        88\n.NOCSA1  ANOP                                                             89\n         AIF   ('&SYSSPLV' EQ '1').NOXA1                                  90\n         BSM   0,14                     RESTORE AMODE AND RETURN          91\n         AGO   .MEND                                                      92\n.NOXA1   ANOP                                                             93\n         BR    14                       RETURN TO CALLER                  94\n         AGO   .MEND                                                      95\n*        *---------------------------------------*                        96\n*        *     LITERALS                          *                        97\n*        *---------------------------------------*                        98\n.MEND    ANOP                                                             99\n         LTORG                                                           100\n         MEND                                                            101\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EQUATES": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00D\\x00D\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "PALADIN"}, "text": "A0       EQU    0                      ACCESS REGISTER  0                  1\nA1       EQU    1                      ACCESS REGISTER  1                  2\nA2       EQU    2                      ACCESS REGISTER  2                  3\nA3       EQU    3                      ACCESS REGISTER  3                  4\nA4       EQU    4                      ACCESS REGISTER  4                  5\nA5       EQU    5                      ACCESS REGISTER  5                  6\nA6       EQU    6                      ACCESS REGISTER  6                  7\nA7       EQU    7                      ACCESS REGISTER  7                  8\nA8       EQU    8                      ACCESS REGISTER  8                  9\nA9       EQU    9                      ACCESS REGISTER  9                 10\nA10      EQU   10                      ACCESS REGISTER  10                11\nA11      EQU   11                      ACCESS REGISTER  11                12\nA12      EQU   12                      ACCESS REGISTER  12                13\nA13      EQU   13                      ACCESS REGISTER  13                14\nA14      EQU   14                      ACCESS REGISTER  14                15\nA15      EQU   15                      ACCESS REGISTER  15                16\nC0       EQU    0                      CONTROL REGISTER 0                 17\nC1       EQU    1                      CONTROL REGISTER 1                 18\nC2       EQU    2                      CONTROL REGISTER 2                 19\nC3       EQU    3                      CONTROL REGISTER 3                 20\nC4       EQU    4                      CONTROL REGISTER 4                 21\nC5       EQU    5                      CONTROL REGISTER 5                 22\nC6       EQU    6                      CONTROL REGISTER 6                 23\nC7       EQU    7                      CONTROL REGISTER 7                 24\nC8       EQU    8                      CONTROL REGISTER 8                 25\nC9       EQU    9                      CONTROL REGISTER 9                 26\nC10      EQU   10                      CONTROL REGISTER 10                27\nC11      EQU   11                      CONTROL REGISTER 11                28\nC12      EQU   12                      CONTROL REGISTER 12                29\nC13      EQU   13                      CONTROL REGISTER 13                30\nC14      EQU   14                      CONTROL REGISTER 14                31\nC15      EQU   15                      CONTROL REGISTER 15                32\nR0       EQU    0                      GENERAL REGISTER 0                 33\nR1       EQU    1                      GENERAL REGISTER 1                 34\nR2       EQU    2                      GENERAL REGISTER 2                 35\nR3       EQU    3                      GENERAL REGISTER 3                 36\nR4       EQU    4                      GENERAL REGISTER 4                 37\nR5       EQU    5                      GENERAL REGISTER 5                 38\nR6       EQU    6                      GENERAL REGISTER 6                 39\nR7       EQU    7                      GENERAL REGISTER 7                 40\nR8       EQU    8                      GENERAL REGISTER 8                 41\nR9       EQU    9                      GENERAL REGISTER 9                 42\nR10      EQU   10                      GENERAL REGISTER 10                43\nR11      EQU   11                      GENERAL REGISTER 11                44\nR12      EQU   12                      GENERAL REGISTER 12                45\nR13      EQU   13                      GENERAL REGISTER 13                46\nR14      EQU   14                      GENERAL REGISTER 14                47\nR15      EQU   15                      GENERAL REGISTER 15                48\nV0       EQU    0                      VECTOR REGISTER 0                  49\nV1       EQU    1                      VECTOR REGISTER 1                  50\nV2       EQU    2                      VECTOR REGISTER 2                  51\nV3       EQU    3                      VECTOR REGISTER 3                  52\nV4       EQU    4                      VECTOR REGISTER 4                  53\nV5       EQU    5                      VECTOR REGISTER 5                  54\nV6       EQU    6                      VECTOR REGISTER 6                  55\nV7       EQU    7                      VECTOR REGISTER 7                  56\nV8       EQU    8                      VECTOR REGISTER 8                  57\nV9       EQU    9                      VECTOR REGISTER 9                  58\nV10      EQU   10                      VECTOR REGISTER 10                 59\nV11      EQU   11                      VECTOR REGISTER 11                 60\nV12      EQU   12                      VECTOR REGISTER 12                 61\nV13      EQU   13                      VECTOR REGISTER 13                 62\nV14      EQU   14                      VECTOR REGISTER 14                 63\nV15      EQU   15                      VECTOR REGISTER 15                 64\nF0       EQU    0                      FLOATING POINT REGISTERS 0/1       65\nF2       EQU    2                      FLOATING POINT REGISTERS 2/3       66\nF4       EQU    4                      FLOATING POINT REGISTERS 4/5       67\nF6       EQU    6                      FLOATING POINT REGISTERS 6/7       68\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ESTPARM": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12$\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:24:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "SBGCSC"}, "text": "         MACRO                                                             1\n         ESTPARM                                                           2\n.*+-------------------------------------------------------------------+    3\n.*\u00a6       (C)   COPYRIGHT MD-PALADIN INC. 1992                        \u00a6    4\n*+--------------------------------------------------------------------+    5\n*\u00a6       PARMS SUPPLIED BY ESTABLISHER OF GENERALIZED RECOVERY RTN    \u00a6    6\n*+--------------------------------------------------------------------+    7\nESTPARM  DSECT                                                             8\nESTRETRY DS    A                  ADDRESS RETRY ROUTINE                    9\nESTFLAG  DS    X                  1ST FLAGS BYTE                          10\n@ESTSTAE EQU   X'20'              RECURSIVE ENTRY (FRRS AND ARRS)         11\nESTFLAG2 DS    X                  2ND FLAGS BYTE                          12\n@ESTNWTO EQU   X'80'              DO NOT ISSUE WTOS                       13\n         DS    2X                 NOT USED                                14\nESTRTN   DS    A                  ADDRESS OF USER ROUTINE                 15\nESTXPAR  DS    A                  ADDRESS OF ADDITIONAL PARMLIST          16\nESTLOAD  DS    A                  ESTABLISHER'S LOAD POINT                17\nESTRUB   DS    CL66               REGISTER UPDATE BLOCK (FLAGS+16 REGS)   18\nESTMOD   DS    CL8                MODULE NAME                             19\nLESTPARM EQU   *-ESTPARM          LENGTH OF PARMLIST                      20\n         MEND                                                             21\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "PALADIN"}, "text": "//*-------------------------------------------------------------------*\n//* TO EXECUTE THE SAMPLE PROGRAM:                                    *\n//*   1) ADD A JOB CARD.                                              *\n//*   2) CHANGE THE LOAD LIBRARY NAME WHERE INDICATED BY \"<====\"      *\n//*-------------------------------------------------------------------*\n//*\n//*-------------------------------------------------------------------*\n//*        CESTAE - TEST DRIVER FOR GRECOV AS AN ESTAE ROUTINE        *\n//*-------------------------------------------------------------------*\n//CESTAE   EXEC PGM=CESTAE\n//STEPLIB  DD DISP=SHR,DSN=LOADLIB      <==== CHANGE THIS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GRECOV": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x02P\\x02P\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 592, "newlines": 592, "modlines": 0, "user": "PALADIN"}, "text": "*                                                                          1\n*                                                                          2\n*+--------------------------------------------------------------------+    3\n*\u00a6       (C)   COPYRIGHT MD-PALADIN INC. 1992                         \u00a6    4\n*+--------------------------------------------------------------------+    5\n*\u00a6  FUNCTION:                                                         \u00a6    6\n*\u00a6    GENERALIZED RECOVERY ROUTINE.  CAN BE USED AS AN ESTAE(X) RTN,  \u00a6    7\n*\u00a6    FRR OR ARR.                                                     \u00a6    8\n*\u00a6  INPUTS:                                                           \u00a6    9\n*\u00a6    R1 - SDWA ADDRESS                                               \u00a6   10\n*\u00a6         ADDRESS OF USER PARMLIST ADDRESS IS IN FIELD SDWAPARM.     \u00a6   11\n*\u00a6         THE USER PARMLIST IS MAPPED BY THE ESTPARM MACRO.          \u00a6   12\n*\u00a6  OUTPUTS:                                                          \u00a6   13\n*\u00a6    VARIOUS WTOS.                                                   \u00a6   14\n*\u00a6    SDWA RETURNED TO RTM WITH RETRY ADDRESS IF RETRY IS DESIRED     \u00a6   15\n*\u00a6  LOGIC:                                                            \u00a6   16\n*\u00a6    1) THE EXPANSION OF MODULE ENTRY=ESTAEX MACRO TESTS WHETHER     \u00a6   17\n*\u00a6       RTM HAS SUPPLIED AN SDWA.  IF SDWA IS ABSENT, PERCOLATE.     \u00a6   18\n*\u00a6    2) ADDRESS THE SDWA EXTENSION AND USER PARMLIST. IF THERE IS    \u00a6   19\n*\u00a6       NO USER PARMLIST, PERCOLATE THE ABEND.                       \u00a6   20\n*\u00a6    3) TEST WHETHER THIS IS A RECURSIVE ENTRY. FOR AN ESTAE, RTM2   \u00a6   21\n*\u00a6       KEEPS TRACK OF RECURSION.  OTHERWISE, TEST USER FLAG.        \u00a6   22\n*\u00a6    4) ISSUE WTOS WITH INFORMATION FROM USER PARMLIST AND/OR SDWA.  \u00a6   23\n*\u00a6    5) IF USER HAS SUPPLIED THE ADDRESS OF AN ADDITIONAL ROUTINE,   \u00a6   24\n*\u00a6       INVOKE THE ROUTINE.  THE ROUTINE WILL RECEIVE CONTROL IN     \u00a6   25\n*\u00a6       PRIMARY ASC MODE AND WITH THE SDWA ADDRESS IN R1.  IF THE    \u00a6   26\n*\u00a6       ROUTINE RETURNS 0 IN R15, GRECOV WILL ATTEMPT RETRY.  ANY    \u00a6   27\n*\u00a6       OTHER VALUE WILL CAUSE GRETRY TO PERCOLATE THE ABEND.        \u00a6   28\n*\u00a6    6) IF THERE IS A RETRY ADDRESS IN THE PARMLIST, ISSUE SETRP     \u00a6   29\n*\u00a6       TO RETRY.  IF THIS IS AN ARR, BUILD A REGISTER UPDATE BLOCK  \u00a6   30\n*\u00a6       (RUB).  IF THERE IS NO RETRY ADDRESS, PERCOLATE THE ABEND.   \u00a6   31\n*\u00a6  ATTRIBUTES:                                                       \u00a6   32\n*\u00a6    AMODE 31, RMODE ANY, REENTRANT, ESA DEPENDENCIES                \u00a6   33\n*+--------------------------------------------------------------------+   34\n         MODULE GRECOV,BASE=12,LOC=BELOW,AMODE=31,RMODE=ANY,           X  35\n               ENTRY=ESTAEX,                                           X  36\n               TEXT=' GENERALIZED RECOVERY ROUTINE '                      37\n         SAC   0                       SET PSW TO PRIMARY SPACE ASC       38\n         SYSSTATE ASCENV=P             PRIMARY SPACE MODE MACROS          39\n         MVC   WTOLIST(LWTOLIST),WTOLISTM  COPY WTO PARMLIST TO RENT      40\n*        *---------------------------------------*                        41\n*        *     SET ADDRESSABILITY SDWA EXTENSION *                        42\n*        *---------------------------------------*                        43\n         L     R8,SDWAXPAD             ADDRESS SDWA EXTENSION PTRS        44\n         L     R8,SDWASRVP-SDWAPTRS(R8) ADDRESS OF RECORDABLE XTNSION     45\n         USING SDWARC1,R8              ADDRESSING FOR RECORDABLE XTN      46\n         ICM   R9,15,SDWAPARM          ADDRESS OF USER PARM ADDRESS       47\n         ICM   R9,15,0(R9)             ADDRESS OF USER PARM               48\n         USING ESTPARM,R9              MAP USER PARMLIST                  49\n         BNZ   CNTINUE                 PARM EXISTS; CONTINUE              50\n         MVC   WTOLINE(LNPARMSG),NPARMSG  ..OUTPUT NOPARM                 51\n         BAS   R14,WTORTN                 ..MESSAGE                       52\n         B     EXITPERC                YES; PERCOLATE THE ABEND           53\nCNTINUE  DS    0H                                                         54\n*        *---------------------------------------*                        55\n*        *     TEST RECURSION                    *                        56\n*        *---------------------------------------*                        57\n         CLI   SDWATYPE,SDWATEST       IS THIS AN ESTAE ?                 58\n         BNE   NESTTYPE                NO; DO NOT TEST SDWA FLAG          59\n         TM    SDWAERRD,SDWASTAE       RECURSIVE ENTRY ?                  60\n         BO    EXITPERC                YES; PERCOLATE THE ABEND           61\n         B     AFTRECRS                CONTINUE                           62\nNESTTYPE DS    0H                                                         63\n         TM    ESTFLAG,@ESTSTAE        IS RECURSION FLAG SET              64\n         BO    EXITPERC                YES; PERCOLATE THE ABEND           65\n         OI    ESTFLAG,@ESTSTAE        SET RECURSION FLAGE                66\nAFTRECRS DS    0H                                                         67\n*        *---------------------------------------*                        68\n*        *     WTO SDWA ADDRESS                  *                        69\n*        *---------------------------------------*                        70\n         MVC   WTOLINE(LSDWMSG1),SDWMSG1 COPY MESSAGE MODEL TO WORKAREA   71\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST      72\n         ST    R3,FORMAT                 SDWA ADDRESS TO FORMAT AREA      73\n         LA    R15,FORMAT                ..ADDRESS DISPHEX SOURCE         74\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST            75\n         LA    R15,4                       ..LENGTH OF DISPHEX SOURCE     76\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST          77\n         LA    R15,WTOLINE+(SDWAADDR-SDWMSG1)  ..ADDRESS DISPHEX TARGET   78\n         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST      79\n         LA    R15,L'SDWAADDR            ..LENGTH DISPHEX TARGET          80\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST            81\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE           82\n         BAS   R14,WTORTN                ISSUE WTO                        83\n*        *---------------------------------------*                        84\n*        *     WTO ABEND CODE                    *                        85\n*        *---------------------------------------*                        86\n         MVC   WTOLINE(LARRMSG1),ARRMSG1 COPY MESSAGE MODEL TO WORKAREA   87\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST      88\n         LA    R15,SDWAABCC+1            ..SDWA ABEND CODE ADDRESS        89\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST            90\n         LA    R15,L'SDWAABCC-1            ..LENGTH OF DISPHEX SOURCE     91\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST          92\n         LA    R15,WTOLINE+(ABNDCODE-ARRMSG1) ..ADDRESS DISPHEX TARGET    93\n         ST    R15,8(R1)                      ..TO DISPHEX PARMLIST       94\n         LA    R15,L'ABNDCODE            ..LENGTH DISPHEX TARGET          95\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST            96\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE           97\n         MVI   WTOLINE+(ABNDCODE-ARRMSG1)+3,X'40'   SPACE TO LAST BYTE    98\n         BAS   R14,WTORTN                  ISSUE WTO                      99\n*        *---------------------------------------*                       100\n*        *     WTO MODULE NAME AND ENTRY POINT   *                       101\n*        *---------------------------------------*                       102\n         MVC   WTOLINE(LDMODMSG),DMODMSG COPY MESSAGE MODEL TO WORKAREA  103\n         CLI   ESTMOD,X'00'              IS MODULE NAME IN PARMLIST?     104\n         BE    NESTPARM                  NO; GET MODULE NAME FROM SDWA   105\n         MVC   WTOLINE+(DMOD1-DMODMSG)(L'ESTMOD),ESTMOD                  106\n         B     AESTPARM                  FORMAT LOAD POINT               107\nNESTPARM DS    0H                                                        108\n         CLI   SDWANAME,X'00'            IS MODULE NAME IN SDWA ?        109\n         BE    AESTPARM                  NO; DO NOT COPY FROM SDWA       110\n         MVC   WTOLINE+(DMOD1-DMODMSG)(L'SDWANAME),SDWANAME              111\nAESTPARM DS    0H                                                        112\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     113\n         ICM   R15,15,ESTLOAD            ENTRY POINT FROM PARMLIST       114\n         BZ    NESTLOAD                  =0; GET FROM SDWA               115\n         LA    R15,ESTLOAD               ADDRESS OF ENTRY POINT          116\n         B     AESTLOAD                  FORMAT ENTRY POINT              117\nNESTLOAD DS    0H                                                        118\n         ICM   R15,15,SDWAEPA            MODULE ENTRY POINT FROM SDWA    119\n         BZ    NSDWLOAD                  =0; DO NOT FORMAT ENTRY PT      120\n         LA    R15,SDWAEPA               ADDRESS OF SDWA ENTRY POINT     121\nAESTLOAD DS    0H                                                        122\n         ST    R15,0(R1)                 SAVE ENTRY PT IN DISPHEX PARMS  123\n         LA    R15,4                     ..LENGTH OF DISPHEX SOURCE      124\n         ST    R15,4(R1)                 ..TO DISPHEX PARMLIST           125\n         LA    R15,WTOLINE+(DMODLOD-DMODMSG) ..ADDRESS DISPHEX TARGET    126\n         ST    R15,8(R1)                      ..TO DISPHEX PARMLIST      127\n         LA    R15,L'DMODLOD             ..LENGTH DISPHEX TARGET         128\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST           129\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          130\nNSDWLOAD DS    0H                                                        131\n         BAS   R14,WTORTN                ISSUE WTO                       132\n*        *---------------------------------------*                       133\n*        *     WTO PSW AND ABEND OFFSET          *                       134\n*        *---------------------------------------*                       135\n         MVC   WTOLINE(LDPSWMSG),DPSWMSG COPY MESSAGE MODEL TO WORKAREA  136\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     137\n         LA    R15,SDWAEC1               ..SDWA PSW                      138\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST           139\n         LA    R15,8                       ..LENGTH OF DISPHEX SOURCE    140\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST         141\n         LA    R15,FORMAT                      ..ADDRESS DISPHEX TARGET  142\n         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST     143\n         LA    R15,16                    ..LENGTH DISPHEX TARGET         144\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST           145\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          146\n*                                        COPY 1ST WORD PSW TO WTO        147\n         MVC   WTOLINE+(DPSW1-DPSWMSG)(L'DPSW1),FORMAT                   148\n*                                          COPY 2ST WORD PSW TO WTO      149\n         MVC   WTOLINE+(DPSW2-DPSWMSG)(L'DPSW2),FORMAT+L'DPSW1           150\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     151\n         L     R15,SDWAEC1+4             2ND WORD OF PSW                 152\n         LA    R15,0(R15)                CLEAR AMODE BIT                 153\n         ICM   R14,15,ESTLOAD            LOAD POINT FROM CALLER          154\n         BNZ   ESTLOD1                   \u00eb=0; IS IN PARMLIST             155\n         ICM   R14,15,SDWAEPA            GET LOAD POINT FROM SDWA        156\n         BZ    WPSWMSG                   =0; DO NOT CALCULATE OFFSET     157\nESTLOD1  DS    0H                                                        158\n         LA    R14,0(R14)                CLEAR HIGH ORDER BIT            159\n         SR    R15,R14                   SUBRTRACT TO FIND DISPLAC       160\n         BNH   WPSWMSG                   LE 0; OFFSET IS INVALID         161\n         ST    R15,FORMAT                SAVE OFFSET                     162\n         LA    R15,FORMAT                ADDRESS OF SAVED OFFSET         163\n         ST    R15,0(R1)                 OFFSET TO DISPHEX PARMLIST      164\n         LA    R15,4                     ..LENGTH OF DISPHEX SOURCE      165\n         ST    R15,4(R1)                 ..TO DISPHEX PARMLIST           166\n         LA    R15,WTOLINE+(OFFSET-DPSWMSG) ..ADDRESS DISPHEX TARGET     167\n         ST    R15,8(R1)                    ..TO DISPHEX PARMLIST        168\n         LA    R15,L'OFFSET              ..LENGTH DISPHEX TARGET         169\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST           170\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          171\nWPSWMSG  DS    0H                                                        172\n         BAS   R14,WTORTN                ISSUE WTO                       173\n*        *---------------------------------------*                       174\n*        *     ISSUE WTOS WITH ABEND GENERAL REGS*                       175\n*        *---------------------------------------*                       176\n         MVC   WTOLINE(LGENREGS),GENREGS ..ISSUE REGISTER                177\n         BAS   R14,WTORTN                ..MESSAGE                       178\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     179\n         LA    R15,SDWAGRSV              ..ADDRESS OF PSW REGISTERS      180\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST           181\n         LA    R15,L'SDWAGRSV              ..LENGTH OF DISPHEX SOURCE    182\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST         183\n         LA    R15,FORMAT                    ..ADDRESS DISPHEX TARGET    184\n         ST    R15,8(R1)                     ..TO DISPHEX PARMLIST       185\n         LA    R15,L'SDWAGRSV*2          ..LENGTH DISPHEX TARGET         186\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST           187\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          188\n         MVC   WTOLINE(LMREG1),MREG1                       ..ISSUE       189\n         MVC   WTOLINE+(DREG0-MREG1)(L'DREG0),FORMAT+0*8   ..WTO         190\n         MVC   WTOLINE+(DREG1-MREG1)(L'DREG1),FORMAT+1*8   ..WITH        191\n         MVC   WTOLINE+(DREG2-MREG1)(L'DREG2),FORMAT+2*8   ..FOUR        192\n         MVC   WTOLINE+(DREG3-MREG1)(L'DREG3),FORMAT+3*8   ..REGISTERS   193\n         BAS   R14,WTORTN                                  ..FROM FMT    194\n         MVC   WTOLINE(LMREG2),MREG2                     ..ISSUE         195\n         MVC   WTOLINE+(DREG4-MREG2)(L'DREG4),FORMAT+4*8 ..WTO           196\n         MVC   WTOLINE+(DREG5-MREG2)(L'DREG5),FORMAT+5*8 ..WITH          197\n         MVC   WTOLINE+(DREG6-MREG2)(L'DREG6),FORMAT+6*8 ..FOUR          198\n         MVC   WTOLINE+(DREG7-MREG2)(L'DREG7),FORMAT+7*8 ..REGISTERS     199\n         BAS   R14,WTORTN                                ..FROM FORMAT   200\n         MVC   WTOLINE(LMREG3),MREG3                        ..ISSUE      201\n         MVC   WTOLINE+(DREG8-MREG3)(L'DREG8),FORMAT+8*8    ..WTO        202\n         MVC   WTOLINE+(DREG9-MREG3)(L'DREG9),FORMAT+9*8    ..WITH       203\n         MVC   WTOLINE+(DREG10-MREG3)(L'DREG10),FORMAT+10*8 ..FOUR       204\n         MVC   WTOLINE+(DREG11-MREG3)(L'DREG11),FORMAT+11*8 ..REGISTERS  205\n         BAS   R14,WTORTN                                   ..FROM FMT   206\n         MVC   WTOLINE(LMREG4),MREG4                          ..ISSUE    207\n         MVC   WTOLINE+(DREG12-MREG4)(L'DREG12),FORMAT+12*8   ..WTO      208\n         MVC   WTOLINE+(DREG13-MREG4)(L'DREG13),FORMAT+13*8   ..WITH     209\n         MVC   WTOLINE+(DREG14-MREG4)(L'DREG14),FORMAT+14*8   ..FOUR     210\n         MVC   WTOLINE+(DREG15-MREG4)(L'DREG15),FORMAT+15*8   ..REGS     211\n         BAS   R14,WTORTN                                     ..FROMFMT  212\n*        *---------------------------------------*                       213\n*        *     ISSUE WTOS WITH ABEND ACCESS REGS *                       214\n*        *---------------------------------------*                       215\n         MVC   WTOLINE(LACCREGS),ACCREGS ..ISSUE REGISTER                216\n         BAS   R14,WTORTN                ..MESSAGE                       217\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     218\n         LA    R15,SDWAARER              ..ADDRESS OF PSW REGISTERS      219\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST           220\n         LA    R15,L'SDWAARER              ..LENGTH OF DISPHEX SOURCE    221\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST         222\n         LA    R15,FORMAT                ..ADDRESS DISPHEX TARGET        223\n         ST    R15,8(R1)                 ..TO DISPHEX PARMLIST           224\n         LA    R15,L'SDWAARER*2            ..LENGTH DISPHEX TARGET       225\n         ST    R15,12(R1)                  ..TO DISPHEX PARMLIST         226\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          227\n         MVC   WTOLINE(LMAR1),MAR1                         ..ISSUE       228\n         MVC   WTOLINE+(DAR0-MAR1)(L'DAR0),FORMAT+0*8   ..WTO            229\n         MVC   WTOLINE+(DAR1-MAR1)(L'DAR1),FORMAT+1*8   ..WITH           230\n         MVC   WTOLINE+(DAR2-MAR1)(L'DAR2),FORMAT+2*8   ..FOUR           231\n         MVC   WTOLINE+(DAR3-MAR1)(L'DAR3),FORMAT+3*8   ..REGISTERS      232\n         BAS   R14,WTORTN                               ..FROM FMT       233\n         MVC   WTOLINE(LMAR2),MAR2                    ..ISSUE            234\n         MVC   WTOLINE+(DAR4-MAR2)(L'DAR4),FORMAT+4*8 ..WTO              235\n         MVC   WTOLINE+(DAR5-MAR2)(L'DAR5),FORMAT+5*8 ..WITH             236\n         MVC   WTOLINE+(DAR6-MAR2)(L'DAR6),FORMAT+6*8 ..FOUR             237\n         MVC   WTOLINE+(DAR7-MAR2)(L'DAR7),FORMAT+7*8 ..REGISTERS        238\n         BAS   R14,WTORTN                             ..FROM FORMAT      239\n         MVC   WTOLINE(LMAR3),MAR3                       ..ISSUE         240\n         MVC   WTOLINE+(DAR8-MAR3)(L'DAR8),FORMAT+8*8    ..WTO           241\n         MVC   WTOLINE+(DAR9-MAR3)(L'DAR9),FORMAT+9*8    ..WITH          242\n         MVC   WTOLINE+(DAR10-MAR3)(L'DAR10),FORMAT+10*8 ..FOUR          243\n         MVC   WTOLINE+(DAR11-MAR3)(L'DAR11),FORMAT+11*8 ..REGISTERS     244\n         BAS   R14,WTORTN                                ..FROM FMT      245\n         MVC   WTOLINE(LMAR4),MAR4                           ..ISSUE     246\n         MVC   WTOLINE+(DAR12-MAR4)(L'DAR12),FORMAT+12*8  ..WTO          247\n         MVC   WTOLINE+(DAR13-MAR4)(L'DAR13),FORMAT+13*8  ..WITH         248\n         MVC   WTOLINE+(DAR14-MAR4)(L'DAR14),FORMAT+14*8  ..FOUR         249\n         MVC   WTOLINE+(DAR15-MAR4)(L'DAR15),FORMAT+15*8  ..REGS         250\n         BAS   R14,WTORTN                                 ..FROM FMT     251\n*        *---------------------------------------*                       252\n*        *     INVOKE USER ROUTINE               *                       253\n*        *---------------------------------------*                       254\n         ICM   R15,15,ESTRTN         USER ROUTINE ADDRESS                255\n         BZ    NUSERTN               =0; NO ROUTINE SPECIFIED            256\n         EREG  R1,R1                 MAKE SURE SDWA ADDRESS IS IN R1     257\n         BASSM R14,R15               INVOKE THE ROUTINE                  258\n         LTR   R15,R15               RC=0 ?                              259\n         BNZ   EXITPERC              NO; PERCOLATE                       260\nNUSERTN  DS    0H                                                        261\n*        *---------------------------------------*                       262\n*        *     RETRY OR PEROCLATE                *                       263\n*        *---------------------------------------*                       264\n         ICM   R4,15,ESTRETRY        RETRY ROUTINE ADDRESS               265\n         BNZ   EXITRTRY              \u00eb=0; ROUTINE ADDRESS SUPPLIED       266\n         B     EXITPERC              NO ROUTINE ADDRESS; PERCOLATE       267\n*---------------------------------------------------------------------*  268\n*        EXIT ROUTINES                                                *  269\n*---------------------------------------------------------------------*  270\n*        *---------------------------------------*                       271\n*        *     PERCOLATE THE ABEND               *                       272\n*        *---------------------------------------*                       273\nEXITPERC DS    0H                                                        274\n         MVC   WTOLINE(LNRETMSG),NRETMSG  ..OUTPUT PEROCLATE             275\n         BAS   R14,WTORTN                 ..MESSAGE                      276\n         EREG  R1,R1                   SDWA ADDRESS TO R1                277\n         SETRP RC=0                    SET SDWA TO PERCOLATE             278\n         B     EXIT                                                      279\n*        *---------------------------------------*                       280\n*        *     INVOKE THE RETRY ROUTINE          *                       281\n*        *---------------------------------------*                       282\nEXITRTRY DS    0H                                                        283\n         MVC   WTOLINE(LSDRETRY),SDRETRY COPY MESSAGE MODEL TO WORKAREA  284\n         LA    R1,DISPARM                ADDRESS OF DISPHEX PARMLIST     285\n         ST    R4,FORMAT                 RETRY ADDRESS TO FORMAT AREA    286\n         LA    R15,FORMAT                ..ADDRESS DISPHEX SOURCE        287\n         ST    R15,0(R1)                 ..TO DISPHEX PARMLIST           288\n         LA    R15,4                       ..LENGTH OF DISPHEX SOURCE    289\n         ST    R15,4(R1)                   ..TO DISPHEX PARMLIST         290\n         LA    R15,WTOLINE+(SDRETADR-SDRETRY)  ..ADDRESS DISPHEX TARGET  291\n         ST    R15,8(R1)                       ..TO DISPHEX PARMLIST     292\n         LA    R15,L'SDRETADR            ..LENGTH DISPHEX TARGET         293\n         ST    R15,12(R1)                ..TO DISPHEX PARMLIST           294\n         BAS   R14,DISPHEX               INVOKE DISPHEX ROUTINE          295\n         BAS   R14,WTORTN                ISSUE WTO                       296\n*        *---------------------------------------*                       297\n*        *     IF THIS IS ARR, BUILD RUB         *                       298\n*        *---------------------------------------*                       299\n         CLI   SDWATYPE,SDWATARR       IS THIS AN ARR ?                  300\n         BNE   NOTARRTN                NO; DO NOT BUILD RUB              301\n         MVC   ESTRUB(2),=X'FFFF'      RESTORE ALL REGISTERS             302\n         MVC   ESTRUB+2(L'SDWAGRSV),SDWAGRSV    MOVE REGISTER TO RUB     303\n         LA    R5,ESTRUB                        ADDRESS OF RUB           304\n         EREG  R1,R1                   SDWA ADDRESS TO R1                305\n         SETRP RC=4,RETREGS=YES,RETADDR=(R4),FRESDWA=YES,DUMP=NO,      X 306\n               RUB=(R5)                                                  307\n         B     EXIT                                                      308\nNOTARRTN DS    0H                                                        309\n         EREG  R1,R1                   SDWA ADDRESS TO R1                310\n         SETRP RC=4,RETREGS=YES,RETADDR=(R4),FRESDWA=YES,DUMP=NO         311\n         B     EXIT                                                      312\n*---------------------------------------------------------------------*  313\n*        DISPHEX SUBROUTINE                                           *  314\n* FUNCTION:                                                           *  315\n*   TRANSLATE BINARY NUMBER (HEX) NUMBER TO CHARACTER NUMBER.         *  316\n*   THIS ROUTINE WILL TRUNCATE INPUT OR PAD OUTPUT SO THAT OUTPUT     *  317\n*   IS TWICE INPUT SIZE.  THE MAXIMUM INPUT SIZE IS 128 BYTES.        *  318\n* INPUT:                                                              *  319\n*   ADDRESS OF PARMLIST IN R1                                         *  320\n*   PARMLIST FIELDS:                                                  *  321\n*   DS    A    ADDRESS OF INPUT FIELD                                 *  322\n*   DS    F    LENGTH OF INPUT FIELD                                  *  323\n*   DS    A    ADDRESS OF OUTPUT FIELD                                *  324\n*   DS    F    LENGTH OF OUTPUT FIELD                                 *  325\n*---------------------------------------------------------------------*  326\nDISPHEX  DS    0H                                                        327\n         BAKR  R14,0                   BUILD STACK STATE ENTRY           328\n         LM    R4,R7,0(R1)             LOAD REGS FROM PARMLIST           329\n         LR    R1,R5                   INPUT LENGTH TO R1                330\n         SLL   R1,1                    * 2                               331\n         CR    R7,R1                   IS OUTPUT LENGTH >= 2 * INPUT ?   332\n         BNL   LENGTHOK                YES; CONTINUE                     333\n         LR    R5,R7                   ..OUTPUT LENGTH                   334\n         SRL   R5,1                    ..DIVIDED BY 2 IS NEW INPUT LEN   335\nLENGTHOK DS    0H                                                        336\n         EREG  R1,R1                   EXTRACT PARMLIST ADDR FROM STACK  337\n         STM   R4,R7,0(R1)             SAVE REGS IN PARMLIST             338\nUNPKLP   DS    0H                                                        339\n         IC    R11,0(R4)               INPUT BYTE                        340\n         STC   R11,1(R6)               SAVE IN OUTPUT                    341\n         SRL   R11,4                   SHIFT INPUT BYTE                  342\n         STC   R11,0(R6)               SAVE IN OUTPUT                    343\n         LA    R4,1(R4)                POINT AT NEXT INPUT BYTE          344\n         LA    R6,2(R6)                POINT AT NEXT OUTPUT BYTE         345\n         BCT   R5,UNPKLP               LOOP FOR LENGTH OF INPUT          346\n         EREG  R1,R1                   EXTRACT PARMLIST ADDR FROM STACK  347\n         LM    R4,R7,0(R1)             LOAD REGS FROM PARMLIST           348\n         NI    0(R6),X'0F'             TURN OFF HIGH ORDER BITS 1ST BYT  349\n         BCTR  R7,0                    LENGTH LESS 1                     350\n         BCTR  R7,0                    LESS 1 FOR EXECUTE                351\n         EX    R7,MVZ1                 PROPOGATE HIGH ORDER BITS OFF     352\n         B     AMVZ1                   BRANCH AROUND EXECUTE             353\nMVZ1     MVZ   1(0,R6),0(R6)           ** EXECUTE ONLY **                354\nAMVZ1    DS    0H                                                        355\n         LA    R7,1(0,R7)              INCREASE TO LENGTH-1              356\n         EX    R7,TR1                  UNPACK INPUT INTO OUTPUT          357\n         B     ATR1                    BRANCH AROUND EXECUTE             358\nTR1      TR    0(0,R6),TRTAB           ** EXECUTE ONLY **                359\nATR1     DS    0H                                                        360\n         EREG  R15,R1                  RESTORE REGS 0,1,AND 15           361\n         PR                            RESTORE STACK                     362\nTRTAB    DC    C'0123456789ABCDEF'     TRANSLATION  TABLE                363\n*---------------------------------------------------------------------*  364\n*        WTO ROUTINE                                                  *  365\n*---------------------------------------------------------------------*  366\nWTORTN   DS 0H                                                           367\n         BAKR  R14,0                   SAVE ENVIRONMENT ON STACK         368\n         TM    ESTFLAG2,@ESTNWTO       NO WTOS?                          369\n         BO    WTORETN1                YES; EXIT ROUTINE                 370\n         LA    R11,WTOLINE             ADDRESS OF WTO TEXT               371\n         CLI   SDWATYPE,SDWATEST       IS PROGRAM CHECK FOR AN ESTAE?    372\n         BE    ESTWTO                  YES; ISSUE STANDARD WTO           373\n         LA    R0,1                    ..EXTRACT PSW INTO                374\n         ESTA  R0,R0                   ..INTO REGS 0 AND 1               375\n         N     R0,=A(X'00010000')      TURN OFF ALL BUT PROBLEM BIT      376\n         BNZ   WTORETN1                 =0; IN PROBLEM STATE: EXIT       377\n         SAC   0                       SET PRIMARY SPACE MODE            378\n         SPKA  0                       GET A KEY 0 PSW                   379\n         WTO   TEXT=(R11),LINKAGE=BRANCH,MF=(E,WTOLIST)                  380\n*                                      ISSUE WTO WITHOUT SVC35           381\n         B     WTORETN                 CONTINUE                          382\nESTWTO   DS    0H                                                        383\n         WTO   TEXT=(R11),MF=(E,WTOLIST)                                 384\n*                                      ISSUE WTO WITH SVC35              385\nWTORETN  DS    0H                                                        386\n         MVI   WTOLINE,X'40'                     ..SET TEXT LINE         387\n         MVC   WTOLINE+1(L'WTOLINE-1),WTOLINE    ..TO SPACES             388\n         LA    R11,4                             ..WITH LENGTH           389\n         STCM  R11,B'0011',WTOLINE               ..OF 4                  390\nWTORETN1 DS    0H                                                        391\n         EREG  R15,R1                  RESTORE REGS 15,0 AND 1           392\n         PR                            RETURN TO CALLER                  393\n*---------------------------------------------------------------------*  394\n*        COMMON EXIT                                                  *  395\n*---------------------------------------------------------------------*  396\nEXIT     DS    0H                                                        397\n         ENDMOD             RESTORE REGISTERS AND RETURN                 398\n*---------------------------------------------------------------------*  399\n*        CONSTANTS                                                    *  400\n*---------------------------------------------------------------------*  401\n*        *---------------------------------------*                       402\n*        *     WTO PARMLIST MODEL                *                       403\n*        *---------------------------------------*                       404\nWTOLISTM WTO   TEXT=(R11),MF=L                                           405\nLWTOLIST EQU   *-WTOLISTM                                                406\n*        *---------------------------------------*                       407\n*        *     USER PARM NOT SUPPLIED            *                       408\n*        *---------------------------------------*                       409\nNPARMSG  DC    AL2(LNPARMSG)                                             410\n         DC    C'User parm has not been supplied - percolating'          411\nLNPARMSG EQU   *-NPARMSG                                                 412\n*        *---------------------------------------*                       413\n*        *     SDWA ADDRESS                      *                       414\n*        *---------------------------------------*                       415\nSDWMSG1  DC    AL2(LSDWMSG1)                                             416\n         DC    C'SDWA address: '                                         417\nSDWAADDR DS    CL8                                                       418\n         DC    C' '                                                      419\nLSDWMSG1 EQU   *-SDWMSG1                                                 420\n*        *---------------------------------------*                       421\n*        *     ABEND CODE                        *                       422\n*        *---------------------------------------*                       423\nARRMSG1  DC    AL2(LARRMSG1)                                             424\n         DC    C'Abend code:   '                                         425\nABNDCODE DS    CL4                                                       426\n         DC    C' '                                                      427\nLARRMSG1 EQU   *-ARRMSG1                                                 428\n*        *---------------------------------------*                       429\n*        *     DISPLAY MODULE INFORMATION        *                       430\n*        *---------------------------------------*                       431\nDMODMSG  DC    AL2(LDMODMSG)                                             432\n         DC    C'Module name:  '                                         433\nDMOD1    DC    CL8'n/a'                                                  434\n         DC    C'  Entry point: '                                        435\nDMODLOD  DC    CL8'n/a'                                                  436\nLDMODMSG EQU   *-DMODMSG                                                 437\n*        *---------------------------------------*                       438\n*        *     DISPLAY PSW                       *                       439\n*        *---------------------------------------*                       440\nDPSWMSG  DC    AL2(LDPSWMSG)                                             441\n         DC    C'The PSW at time of Error:  '                            442\nDPSW1    DS    CL8                                                       443\n         DC    C'  '                                                     444\nDPSW2    DS    CL8                                                       445\n         DC    C'  Offset: '                                             446\nOFFSET   DC    CL8'n/a'                                                  447\nLDPSWMSG EQU   *-DPSWMSG                                                 448\n*        *---------------------------------------*                       449\n*        *     GENERAL REGISTERS                 *                       450\n*        *---------------------------------------*                       451\nGENREGS  DC    AL2(LGENREGS)                                             452\n         DC    C'General registers at abend:'                            453\nLGENREGS EQU   *-GENREGS                                                 454\n*        *---------------------------------------*                       455\n*        *     DISPLAY REGISTERS 1               *                       456\n*        *---------------------------------------*                       457\nMREG1    DC    AL2(LMREG1)                                               458\n         DC    C'   R0:'                                                 459\nDREG0    DS    CL8                                                       460\n         DC    C'    R1:'                                                461\nDREG1    DS    CL8                                                       462\n         DC    C'    R2:'                                                463\nDREG2    DS    CL8                                                       464\n         DC    C'    R3:'                                                465\nDREG3    DS    CL8                                                       466\nLMREG1   EQU   *-MREG1                                                   467\n*        *---------------------------------------*                       468\n*        *     DISPLAY REGISTERS 2               *                       469\n*        *---------------------------------------*                       470\nMREG2    DC    AL2(LMREG2)                                               471\n         DC    C'   R4:'                                                 472\nDREG4    DS    CL8                                                       473\n         DC    C'    R5:'                                                474\nDREG5    DS    CL8                                                       475\n         DC    C'    R6:'                                                476\nDREG6    DS    CL8                                                       477\n         DC    C'    R7:'                                                478\nDREG7    DS    CL8                                                       479\nLMREG2   EQU   *-MREG2                                                   480\n*        *---------------------------------------*                       481\n*        *     DISPLAY REGISTERS 3               *                       482\n*        *---------------------------------------*                       483\nMREG3    DC    AL2(LMREG3)                                               484\n         DC    C'   R8:'                                                 485\nDREG8    DS    CL8                                                       486\n         DC    C'    R9:'                                                487\nDREG9    DS    CL8                                                       488\n         DC    C'   R10:'                                                489\nDREG10   DS    CL8                                                       490\n         DC    C'   R11:'                                                491\nDREG11   DS    CL8                                                       492\nLMREG3   EQU   *-MREG3                                                   493\n*        *---------------------------------------*                       494\n*        *     DISPLAY REGISTERS 4               *                       495\n*        *---------------------------------------*                       496\nMREG4    DC    AL2(LMREG4)                                               497\n         DC    C'  R12:'                                                 498\nDREG12   DS    CL8                                                       499\n         DC    C'   R13:'                                                500\nDREG13   DS    CL8                                                       501\n         DC    C'   R14:'                                                502\nDREG14   DS    CL8                                                       503\n         DC    C'   R15:'                                                504\nDREG15   DS    CL8                                                       505\nLMREG4   EQU   *-MREG4                                                   506\n*        *---------------------------------------*                       507\n*        *     ACCESS  REGISTERS                 *                       508\n*        *---------------------------------------*                       509\nACCREGS  DC    AL2(LACCREGS)                                             510\n         DC    C'Access registers at abend:'                             511\nLACCREGS EQU   *-ACCREGS                                                 512\n*        *---------------------------------------*                       513\n*        *     DISPLAY ACCESS REGISTERS          *                       514\n*        *---------------------------------------*                       515\nMAR1     DC    AL2(LMAR1)                                                516\n         DC    C'  AR0:'                                                 517\nDAR0     DS    CL8                                                       518\n         DC    C'   AR1:'                                                519\nDAR1     DS    CL8                                                       520\n         DC    C'   AR2:'                                                521\nDAR2     DS    CL8                                                       522\n         DC    C'   AR3:'                                                523\nDAR3     DS    CL8                                                       524\nLMAR1    EQU   *-MAR1                                                    525\n*        *---------------------------------------*                       526\n*        *     DISPLAY REGISTERS 2               *                       527\n*        *---------------------------------------*                       528\nMAR2     DC    AL2(LMAR2)                                                529\n         DC    C'  AR4:'                                                 530\nDAR4     DS    CL8                                                       531\n         DC    C'   AR5:'                                                532\nDAR5     DS    CL8                                                       533\n         DC    C'   AR6:'                                                534\nDAR6     DS    CL8                                                       535\n         DC    C'   AR7:'                                                536\nDAR7     DS    CL8                                                       537\nLMAR2    EQU   *-MAR2                                                    538\n*        *---------------------------------------*                       539\n*        *     DISPLAY REGISTERS 3               *                       540\n*        *---------------------------------------*                       541\nMAR3     DC    AL2(LMAR3)                                                542\n         DC    C'  AR8:'                                                 543\nDAR8     DS    CL8                                                       544\n         DC    C'   AR9:'                                                545\nDAR9     DS    CL8                                                       546\n         DC    C'  AR10:'                                                547\nDAR10    DS    CL8                                                       548\n         DC    C'  AR11:'                                                549\nDAR11    DS    CL8                                                       550\nLMAR3    EQU   *-MAR3                                                    551\n*        *---------------------------------------*                       552\n*        *     DISPLAY REGISTERS 4               *                       553\n*        *---------------------------------------*                       554\nMAR4     DC    AL2(LMAR4)                                                555\n         DC    C' AR12:'                                                 556\nDAR12    DS    CL8                                                       557\n         DC    C'  AR13:'                                                558\nDAR13    DS    CL8                                                       559\n         DC    C'  AR14:'                                                560\nDAR14    DS    CL8                                                       561\n         DC    C'  AR15:'                                                562\nDAR15    DS    CL8                                                       563\nLMAR4    EQU   *-MAR4                                                    564\n*        *---------------------------------------*                       565\n*        *     RETRY ROUTINE ADDRESS             *                       566\n*        *---------------------------------------*                       567\nSDRETRY  DC    AL2(LSDRETRY)                                             568\n         DC    C'Invoking Retry Routine at address:   '                  569\nSDRETADR DS    CL8                                                       570\n         DC    C' '                                                      571\nLSDRETRY EQU   *-SDRETRY                                                 572\n*        *---------------------------------------*                       573\n*        *     NO RETRY MESSAGE                  *                       574\n*        *---------------------------------------*                       575\nNRETMSG  DC    AL2(LNRETMSG)                                             576\n         DC    C'Return to RTM with percolation '                        577\nLNRETMSG EQU   *-NRETMSG                                                 578\n*---------------------------------------------------------------------*  579\n*        MAP WORK AREA                                                *  580\n*---------------------------------------------------------------------*  581\nWGRECOV  DSECT                                                           582\nWTOLINE  DS    CL80                    WTO MESSEGE IS MOVED HERE         583\nDISPARM  DS    4F                      PARMLIST FOR WTORTN               584\nWTOLIST  DS    0F,CL(LWTOLIST)         PARMLIST FOR WTO MACRO            585\nFORMAT   DS    0F,CL256                WORK AREA                         586\nLGRECOV  EQU   *-WGRECOV                                                 587\n*---------------------------------------------------------------------*  588\n*        OTHER DSECTS                                                 *  589\n*---------------------------------------------------------------------*  590\n         ESTPARM                       MAP USER PARMLIST                 591\n         END                                                             592\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INNERMM": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x11\\x00\\x11\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "PALADIN"}, "text": "         MACRO                                                             1\n         INNERMM &OP,&REG                                                  2\n.*+-------------------------------------------------------------------+    3\n.*\u00a6      (C)   COPYRIGHT MD-PALADIN INC. 1992                         \u00a6    4\n.*+-------------------------------------------------------------------+    5\n.*\u00a6     INNER MACRO FOR PARSING REGISTER OPERANDS OF MACROS           \u00a6    6\n.*+-------------------------------------------------------------------+    7\n         LCLC  &R,&OP1                                                     8\n         AIF   (T'&OP  EQ 'O').MEND                                        9\n&OP1     SETC  '&OP'                                                      10\n&R       SETC  'A'                                                        11\n         AIF   ('&OP1'(1,1) NE '(').NOTREG                                12\n&R       SETC  'R'                                                        13\n&OP1     SETC  '&OP'(2,K'&OP-2)                                           14\n.NOTREG  ANOP                                                             15\n         L&R   &REG,&OP1                                                  16\n.MEND    MEND                                                             17\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MODULE": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x01}\\x01}\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 381, "newlines": 381, "modlines": 0, "user": "PALADIN"}, "text": "         MACRO                                                             1\n         MODULE &CNAME,&AMODE=31,&RMODE=ANY,&SP=1,&LOC=,&BASE=12,      X   2\n               &ENTRY=BRANCH,&FLOATSV=NO,&RENT=YES,&WORK=YES,          X   3\n               &PCRETRY=,&SDWA=3,                                   #01X   4\n               &TEXT=' '                                                   5\n.*+-------------------------------------------------------------------+    6\n.*\u00a6                     MAINTENANCE LOG                               \u00a6    7\n.*+----------+------------------------------------+---------+---------+    8\n.*\u00a6  DATE    \u00a6      DESCRIPTION                   \u00a6 CHANGED \u00a6 REFER   \u00a6    9\n.*+----------+------------------------------------+---------+---------+   10\n.*\u00a6 05/27/92 \u00a6 ENTRY=ESTAEX/PCRETRY= SUPPORT      \u00a6 MJM     \u00a6 #01     \u00a6   11\n.*\u00a6 08/02/92 \u00a6 EXTENDED ARR PARMLIST              \u00a6 MJM     \u00a6 #02     \u00a6   12\n.*+----------+------------------------------------+---------+---------+   13\n.*\u00a6      (C)   COPYRIGHT MD-PALADIN INC. 1992                         \u00a6   14\n.*+-------------------------------------------------------------------+   15\n.*                                                                        16\n.**********************************************************************   17\n.*   BEGIN MODULE WITH THIS MACRO                                     *   18\n.*     &CNAME   - NAME OF MODULE (7 CHARACTERS OR LESS)               *   19\n.*     &AMODE   - \"24\" OR \"31\"                                        *   20\n.*     &RMODE   - \"24\" OR \"ANY\"                                       *   21\n.*     &SP      - SUBPOOL FOR RENTRANT STORAGE THIS MODULE            *   22\n.*     &LOC     - \"BELOW\" IF GETMAINED STORAGE BELOW 16M              *   23\n.*     &BASE    - BASE REGISTER (NOT R1, R2 OR R13)                   *   24\n.*     &ENTRY   - \"BRANCH\" \"PCSTACK\" \"PCBASIC\" \"SRB\" OR \"SVC\"         *   25\n.*                OR \"ESTAEX\" .   \"ESTAEX\" IS ALSO FOR ARR RTNS     #01   26\n.*     &FLOATSV - SAVE FLOATING POINT REGISTERS                       *   27\n.*     &RENT    - WORK AREA DYNAMICALLY OBTAINED (DEFAULT = YES)      *   28\n.*     &WORK    - WORK AREA TO BE GOTTEN (DEFAULT = YES)              *   29\n.*     &PCRETRY - RETRY ADDRESS FOR ARR. (WHEN ENTRY=PCSTACK ONLY)  #01   30\n.*     &SDWA    - REGISTER USED TO ADDRESS SDWA (WHEN TYPE=ESTAEX)  #01   31\n.*     &TEXT    - COMMENT THAT IS ASSEMBLED INTO OBJECT CODE          *   32\n.**********************************************************************   33\n         GBLA  &POOL                                                      34\n         GBLB  &EQU                                                       35\n         GBLB  &CALSA,&WORKA,&FLOAT,&RENTA                                36\n         GBLB  &RETRYA                                              #01   37\n         GBLB  &ESTAEA                                              #01   38\n         GBLC  &SYSSPLV,&SYSASCE                                          39\n         GBLC  &DSCTLEN,&NRENTWK,&DNAME                                   40\n         GBLC  &SAVEGEN,&SAVELEN,&SAVEFLT,&SPLEVI                         41\n         GBLC  &GRSVRET                                             #01   42\n         LCLB  &E1                                                        43\n         LCLC  &BEGIN,&TXT,&ONSTACK                                       44\n.*#02    LCLC  &RETPARM                                             #01   45\n         LCLC  &ESTAE1                                              #01   46\n         LCLC  &CNAMEL                                              #02   47\n         SPLEVEL  TEST                                                    48\n.*************************************************                        49\n.*       CHECK ERROR CONDITIONS                  *                        50\n.*************************************************                        51\n&E1      SETB  0                                                          52\n         AIF   (T'&CNAME NE 'O').OK1                                      53\n         MNOTE 8,'MODULE NAME IS REQUIRED'                                54\n&E1      SETB  1                                                          55\n.OK1     ANOP                                                             56\n         AIF   (K'&CNAME LE 7).OK2                                        57\n         MNOTE 8,'MODULE NAME MUST BE LESS THAN 7 CHARACTERS'             58\n&E1      SETB  1                                                          59\n.OK2     ANOP                                                             60\n         AIF   (&BASE GT 2 AND &BASE LT 13).OK3                           61\n         MNOTE 8,'ONLY REGISTERS 3 THROUGH 12 CAN BE BASE REGISTERS'      62\n&E1      SETB  1                                                          63\n.OK3     ANOP                                                             64\n         AIF   ('&ENTRY' EQ 'BRANCH' OR '&ENTRY' EQ 'PCSTACK').OK4        65\n         AIF   ('&ENTRY' EQ 'PCBASIC' OR '&ENTRY' EQ 'SRB').OK4           66\n         AIF   ('&ENTRY' EQ 'SVC').OK4                                    67\n         AIF   ('&ENTRY' EQ 'ESTAEX').OK4                           #01   68\n         MNOTE 8,'\"ENTRY=\"  \"BRANCH\",\"PCSTACK\",\"PCBASIC\",\"SRB\",\"SVC\"'     69\n         MNOTE 8,' OR  \"ESTAEX\" '                                   #01   70\n&E1      SETB  1                                                          71\n.OK4     ANOP                                                             72\n         AIF   ('&ENTRY' NE 'PCSTACK' OR '&SYSSPLV' GT '2').OK5           73\n         MNOTE 8,'\"ENTRY=PCSTACK\" MUST BE ASSEMBLED \"SPLEVEL > 2\"  '      74\n&E1      SETB  1                                                          75\n.OK5     ANOP                                                             76\n         AIF   ('&ENTRY' NE 'SVC').OK6                                    77\n         AIF   ('&BASE' EQ '6').OK6                                       78\n         MNOTE 8,'BASE REGISTER MUST BE 6 WITH \"ENTRY=SVC\" '              79\n&E1      SETB  1                                                          80\n.OK6     ANOP                                                             81\n         AIF   (&E1).MEND                                                 82\n.*************************************************                        83\n.*       SET GLOBAL SYMBOLS                      *                        84\n.*************************************************                        85\n&POOL    SETA  &SP                                                        86\n&SPLEVI  SETC  '&SYSSPLV'                                                 87\n&DSCTLEN SETC  'L'.'&CNAME'                                               88\n&NRENTWK SETC  'N'.'&CNAME'                                               89\n&DNAME   SETC  'W'.'&CNAME'                                               90\n&BEGIN   SETC  'BEG'.'&SYSNDX'                                            91\n&SAVEGEN SETC  'GEN'.'&SYSNDX'                                            92\n&SAVEFLT SETC  'FLT'.'&SYSNDX'                                            93\n&SAVELEN SETC  'LEN'.'&SYSNDX'                                            94\n&ONSTACK SETC  'STK'.'&SYSNDX'                                            95\n&GRSVRET SETC  'GRT'.'&SYSNDX'                                      #01   96\n.*#02RETPARM SETC  'RET'.'&SYSNDX'                                  #01   97\n&ESTAE1  SETC  'EST'.'&SYSNDX'                                      #01   98\n&CNAMEL  SETC  'CNA'.'&SYSNDX'                                      #02   99\n&TXT     SETC  '&TEXT'                                                   100\n         AIF   ('&TXT'(1,1) EQ '''').STRIP                               101\n         AIF   ('&TXT'(1,1) EQ '(').STRIP                                102\n         AGO   .NOSTRIP                                                  103\n.STRIP   ANOP                                                            104\n&TXT     SETC  '&TXT'(2,K'&TXT-2)                                        105\n.NOSTRIP ANOP                                                            106\n.*************************************************                       107\n.*       SET GLOBAL SWITCHES                     *                       108\n.*************************************************                       109\n&WORKA   SETB  0     OBTAIN REENTRANT WORKAREA ?                         110\n         AIF   ('&WORK'(1,1) EQ 'N').NWORK                               111\n         AIF   ('&ENTRY' EQ 'PCBASIC' AND '&SPLEVI' LT '3').NWORK        112\n         AIF   ('&ENTRY' EQ 'SVC' AND '&SPLEVI' LT '3').NWORK            113\n&WORKA   SETB  1                                                         114\n.NWORK   ANOP                                                            115\n&RENTA   SETB  0     OBTAIN WORK AREA AND NON-REENTRANT                  116\n         AIF   ('&RENT'(1,1) EQ 'N').NRENT                               117\n         AIF   ('&ENTRY' EQ 'SRB' AND '&SPLEVI' LT '3').NRENT            118\n&RENTA   SETB  1                                                         119\n.NRENT   ANOP                                                            120\n&CALSA   SETB  0     IS SAVE AREA PROVIDED BY CALLER ?                   121\n         AIF   ('&ENTRY'(1,2) EQ 'PC').NSAVE                             122\n         AIF   ('&ENTRY' EQ 'SRB').NSAVE                                 123\n         AIF   ('&ENTRY' EQ 'SVC').NSAVE                                 124\n&CALSA   SETB  1                                                         125\n.NSAVE   ANOP                                                            126\n&FLOAT   SETB  0     ARE FLOATING POINT REGISTERS SAVED ?                127\n         AIF   ('&FLOATSV'(1,1) EQ 'N').NFLOT                            128\n         AIF   (&WORKA EQ 0).NFLOT                                       129\n&FLOAT   SETB  1                                                         130\n.NFLOT   ANOP                                                            131\n&RETRYA  SETB  0     RETRY                                          #01  132\n         AIF   (T'&PCRETRY EQ 'O').NRTTT                            #01  133\n         AIF   ('&ENTRY' NE 'PCSTACK').NRTTT                        #01  134\n&RETRYA  SETB  1                                                    #01  135\n.NRTTT   ANOP                                                       #01  136\n&ESTAEA  SETB  0     ESTAE ?                                        #01  137\n         AIF   ('&ENTRY' NE 'ESTAEX').NESTT                         #01  138\n         AIF   ('&SPLEVI' LT '3').NESTT                             #01  139\n&ESTAEA  SETB  1                                                    #01  140\n.NESTT   ANOP                                                       #01  141\n&CNAME   CSECT                                                           142\n         AIF   ('&SPLEVI' LT '2').NOAMODE                                143\n*        *---------------------------------------*                       144\n*        *     SPECIFY AMODE AND RMODE           *                       145\n*        *---------------------------------------*                       146\n&CNAME   AMODE &AMODE                                                    147\n&CNAME   RMODE &RMODE                                                    148\n.NOAMODE ANOP                                                            149\n         AIF   (&WORKA NE 1).NOWORK0                                     150\n*        +---------------------------------------+                       151\n*        \u00a6     SAVE AREAS                        \u00a6                       152\n*        +---------------------------------------+                       153\n&DNAME   DSECT                    USER ACQUIRED STORAGE FOR REENTRABLE   154\n&SAVEGEN DS    18F                GENERAL REGISTER SAVE AREA             155\n         AIF   (&FLOAT NE 1).NOF1                                        156\n&SAVEFLT DS    4D                 FLOATING POINT REGISTER SAVE AREA      157\n.NOF1    ANOP                                                            158\n&SAVELEN DS    F                  LENGTH OF ACQUIRED STORAGE             159\n         AIF   (&RETRYA EQ 0).NORET                                 #01  160\n&GRSVRET DS    4F                 GENERAL AND ACCESS REGS 0 AND 1   #01  161\nESTPARAM DS    0F,CL(LESTPARM)    ARR RETRY ADDRESS AND ALET        #02  162\n.*#02    DS    X                  ARR FLAGS BYTE                    #01  163\n.*#02    DS    3X                 NOT USED                          #01  164\n         ESTPARM                                                    #02  165\n.NORET   ANOP                                                       #01  166\n&CNAME   CSECT                                                           167\n.NOWORK0 ANOP                                                            168\n         AIF   (&EQU).NOEQU                                              169\n&EQU     SETB  1                                                         170\n*        *---------------------------------------*                       171\n*        *     REGISTER EQUATES                  *                       172\n*        *---------------------------------------*                       173\n         PRINT NOGEN                                                     174\n         COPY EQUATES                                                    175\n         PRINT GEN                                                       176\n.NOEQU   ANOP                                                            177\n*        *---------------------------------------*                       178\n*        *     ENTRY POINT                       *                       179\n*        *---------------------------------------*                       180\n         AIF   ('&ENTRY'(1,2) EQ 'PC').PCENT                             181\n         AIF   ('&ENTRY' EQ 'SVC').SVCENT                                182\n         AIF   ('&ENTRY' EQ 'ESTAEX').ESTAENT                       #01  183\n.*************************************************                       184\n.*       ENTRY = BRANCH AND SRB                  *                       185\n.*************************************************                       186\n         USING &CNAME,15          SET ADDRESSING ON ENTRY POINT          187\n         B     &BEGIN             BRANCH AROUND EYECATCHER               188\n         DC    C' &CNAME '        NAME OF CSECT                          189\n         DC    C' &SYSDATE '      DATE OF ASSEMBLY                       190\n         DC    C' &SYSTIME '      TIME OF ASSEMBLY                       191\n         DC    C' &TXT  '                                                192\n         AIF   ('&SPLEVI' LT '3').XA1                                    193\n         AIF   (&WORKA EQ 0).NL1                                         194\n&ONSTACK DC    C'F1SA'            CALLER'S SAVE AREA ON STACK            195\n.NL1     ANOP                                                            196\n&BEGIN   BAKR  14,0               PUSH REGS AND PSW ONTO STACK           197\n         LAE   &BASE,0(15,0)      LOAD BASE REGISTER WITH ENTRYPNT       198\n         MSTA  0                  PUSH REGS AND PSW ONTO STACK           199\n         AGO   .DROP15            DROP ADDRESSING ON ENTRY POINT         200\n.XA1     ANOP                                                            201\n         AIF   (&CALSA NE 1).NOSA1                                       202\n&BEGIN   SAVE  (14,12)            CALLER'S REGS => CALLER'S SAVEAREA     203\n         LR    &BASE,15           LOAD BASE REGISTER WITH ENTRY POINT    204\n         AGO   .DROP15            DROP ADDRESSING ON ENTRY POINT         205\n.NOSA1   ANOP                                                            206\n&BEGIN   LR    &BASE,15           LOAD BASE REGISTER WITH ENTRY POINT    207\n.DROP15  ANOP                                                            208\n         DROP  15                 DROP ADDRESSING ON ENTRY POINT         209\n         USING &CNAME,&BASE       SET ADDRESSING ON BASE REGISTER        210\n         AGO   .CKSTG                                                    211\n.*************************************************                  #01  212\n.*       ENTRY = ESTAEX (ALSO FOR ARRS)          *                  #01  213\n.*************************************************                  #01  214\n.ESTAENT ANOP                                                       #01  215\n         PUSH  PRINT                                                #01  216\n         PRINT NOGEN                                                #01  217\n         IHASDWA                                                    #01  218\n         POP   PRINT                                                #01  219\n&CNAME   CSECT                                                      #01  220\n         USING &CNAME,15          SET ADDRESSING ON ENTRY POINT     #01  221\n         B     &BEGIN             BRANCH AROUND EYECATCHER          #01  222\n         DC    C' &CNAME '        NAME OF CSECT                     #01  223\n         DC    C' &SYSDATE '      DATE OF ASSEMBLY                  #01  224\n         DC    C' &SYSTIME '      TIME OF ASSEMBLY                  #01  225\n         DC    C' &TXT  '                                           #01  226\n         AIF   (&WORKA EQ 0).NL8                                    #01  227\n&ONSTACK DC    C'F1SA'            CALLER'S SAVE AREA ON STACK       #01  228\n.NL8     ANOP                                                       #01  229\n&BEGIN   DS    0H                 PUSH REGS AND PSW ONTO STACK      #01  230\n*        *---------------------------------------*                  #01  231\n*        *     TEST WHETHER THERE IS AN SDWA     *                  #01  232\n*        *---------------------------------------*                  #01  233\n         CH    R0,=H'12'               WAS AN SDWA OBTAINED ?       #01  234\n         BNE   &ESTAE1                 YES; CONTINUE                #01  235\n         LA    R15,0                   SET FOR PERCOLATION          #01  236\n         BR    R14                     RETURN TO RTM2               #01  237\n&ESTAE1  DS    0H                                                   #01  238\n         BAKR  14,0               PUSH REGS AND PSW ONTO STACK      #01  239\n         LAE   &BASE,0(15,0)      LOAD BASE REGISTER WITH ENTRYPNT  #01  240\n         MSTA  0                  PUSH REGS AND PSW ONTO STACK      #01  241\n         DROP  15                 DROP ADDRESSING ON ENTRY POINT    #01  242\n         USING &CNAME,&BASE       SET ADDRESSING ON BASE REGISTER   #01  243\n         AGO   .CKSTG                                               #01  244\n.*************************************************                       245\n.*       ENTRY = PCSTACK AND PCBASIC             *                       246\n.*************************************************                       247\n.PCENT   ANOP                                                            248\n         BASR  &BASE,0            LOAD BASE REGISTER                #01  249\n         BCTR  &BASE,0            .. SUBTRACT 2 FROM                     250\n         BCTR  &BASE,0            .. BASE REGISTER                       251\n         USING &CNAME,&BASE       SET ADDRESSING ON ENTRY POINT          252\n         AIF   ('&SPLEVI' LT '3').PC2                                    253\n         LAE   &BASE,0(&BASE,0)   CLEAR BASE ACCESS REGISTER             254\n         AIF   (&RETRYA EQ 1).PC2                                   #01  255\n         MSTA  0                  SAVE REGS 1 AND 2 IN USER STACK        256\n.PC2     ANOP                                                            257\n         B     &BEGIN             BRANCH AROUND EYECATCHER               258\n         DC    C' '                                                 #02  259\n&CNAMEL  DC    CL8'&CNAME',C' '   NAME OF CSECT                     #02  260\n         DC    C' &SYSDATE '      DATE OF ASSEMBLY                       261\n         DC    C' &SYSTIME '      TIME OF ASSEMBLY                       262\n         DC    C' &TXT  '                                                263\n         AIF   (&WORKA EQ 0).NL2                                         264\n&ONSTACK DC    C'F1SA'            CALLER'S SAVE AREA ON STACK            265\n.NL2     ANOP                                                            266\n&BEGIN   DS    0H                                                        267\n         AGO   .CKSTG                                                    268\n.SVCENT  ANOP                                                            269\n.*************************************************                       270\n.*       ENTRY = SVC                             *                       271\n.*************************************************                       272\n         USING &CNAME,6           SET ADDRESSING ON ENTRY POINT          273\n         B     &BEGIN             BRANCH AROUND EYECATCHER               274\n         DC    C' &CNAME '        NAME OF CSECT                          275\n         DC    C' &SYSDATE '      DATE OF ASSEMBLY                       276\n         DC    C' &SYSTIME '      TIME OF ASSEMBLY                       277\n         DC    C' &TXT  '                                                278\n         AIF   ('&SPLEVI' LT '3').XA3                                    279\n         AIF   (&WORKA EQ 0).NL3                                         280\n&ONSTACK DC    C'F1SA'            CALLER'S SAVE AREA ON STACK            281\n.NL3     ANOP                                                            282\n&BEGIN   BAKR  14,0               PUSH REGS AND PSW ONTO STACK           283\n         MSTA  0                  PUSH REGS AND PSW ONTO STACK           284\n         AGO   .ESVCE             DROP ADDRESSING ON ENTRY POINT         285\n.XA3     ANOP                                                            286\n&BEGIN   DS    0H                                                        287\n.ESVCE   ANOP                                                            288\n.CKSTG   ANOP                                                            289\n.*************************************************                       290\n.*      GET A WORK AREA FOR REENTRANCY           *                       291\n.*************************************************                       292\n         AIF   (&WORKA EQ 0).NOWORK                                      293\n         AIF   (&RENTA EQ 1).YESRENT                                     294\n         LA    13,&NRENTWK        ADDRESS OF WORK AREA                   295\n         AGO   .MAPDSECT                                                 296\n.YESRENT ANOP                                                            297\n*        *---------------------------------------*                       298\n*        *     GET STORAGE FOR WORK AREA         *                       299\n*        *---------------------------------------*                       300\n         LA    0,&DSCTLEN          LENGTH OF STORAGE                     301\n         AIF   (T'&LOC EQ 'O' OR '&SPLEVI' LT '2').NOLOC                 302\n         AIF   ('&SPLEVI' LT '3').NOSTOR                                 303\n         STORAGE OBTAIN,COND=NO,                                       X 304\n               LENGTH=(0),                                             X 305\n               LOC=&LOC,                                               X 306\n               SP=&POOL,                                               X 307\n               ADDR=(1)                                                  308\n         AGO   .GOT                                                      309\n.NOSTOR  ANOP                                                            310\n         GETMAIN RU,                                                   X 311\n               LV=(0),                                                 X 312\n               LOC=&LOC,                                               X 313\n               SP=&POOL                                                  314\n         AGO   .GOT                                                      315\n.NOLOC   ANOP                                                            316\n         AIF   ('&SPLEVI' LT '3').NOSTOR1                                317\n         STORAGE OBTAIN,COND=NO,                                       X 318\n               LENGTH=(0),                                             X 319\n               SP=&POOL,                                               X 320\n               ADDR=(1)                                                  321\n         AGO   .GOT                                                      322\n.NOSTOR1 ANOP                                                            323\n         GETMAIN RU,                                                   X 324\n               LV=(0),                                                 X 325\n               SP=&POOL                                                  326\n.GOT     ANOP                                                            327\n         AIF   ('&SPLEVI' GT '2').ESA2                                   328\n         AIF   (&CALSA EQ 0).NOCSA0                                      329\n         LR    2,13               PRESERVE ADDRESS CALLER'S SAVEAREA     330\n         ST    13,4(1)            SAVE A(CALLER'S SAVE AREA)             331\n         ST    1,8(13)            A(SAVE AREA) => CALLER'S SAVE AREA     332\n.NOCSA0  ANOP                                                            333\n         LR    13,1               A(SAVE AREA THIS CSECT) => R13         334\n         AGO   .MAPDSECT                                                 335\n.ESA2    ANOP                                                            336\n         AIF   (&CALSA EQ 0).NOCSA                                       337\n         ST    1,8(0,13)          A(SAVE AREA) => CALLER'S SAVE AREA     338\n.NOCSA   ANOP                                                            339\n         LAE   13,0(1,0)          LOAD SAVE AREA GEN AND ACC REGS        340\n*                                 INDICATE CALLER'S SAVEAREA ON STACK    341\n         MVC   4(L'&ONSTACK,13),&ONSTACK                                 342\n.MAPDSECT ANOP                                                           343\n         USING &DNAME,13          ADDRESSING FOR SAVE AREA               344\n         ST    0,&SAVELEN         SAVE SUBPOOL AND LENGTH                345\n.*************************************************                       346\n.*       RESTORE REGISTERS FROM STACK OR         *                       347\n.*       CALLER'S SAVE AREA                      *                       348\n.*************************************************                       349\n.NOWORK  ANOP                                                            350\n         AIF   ('&SPLEVI' LT '3').XA2                                    351\n         AIF   (&RETRYA EQ 0).NRETY                                 #01  352\n         EREG  0,1                RESTORE REGS FROM STACK           #01  353\n         STM   0,1,&GRSVRET       SAVE GENERAL REGS 0 AND 1         #01  354\n         STAM  0,1,&GRSVRET+8     SAVE ACCESS  REGS 0 AND 1         #01  355\n         LAE   14,ESTPARAM        ARR PARMLIST ADDRESS              #02  356\n         LAE   15,&PCRETRY               ..RETRY ADDRESS            #01  357\n         ST    15,ESTRETRY-ESTPARM(14)   ..INTO ARR PARMLIST        #02  358\n         ST    &BASE,ESTLOAD-ESTPARM(14) BASE REGISTER VALUE        #02  359\n         MVC   ESTMOD-ESTPARM(L'&CNAMEL,14),&CNAMEL MODULE NAME     #02  360\n         EAR   15,14              ARR PARMLIST ALET TO GPR 15       #02  361\n.*#02    LAE   0,ESTPARAM         LOAD RETRY PARMLIST ADDRESS       #01  362\n         MSTA  14                 SAVE IN MODIFIED STACK AREA       #01  363\n.NRETY   ANOP                                                       #01  364\n         EREG  14,1               RESTORE REGS FROM STACK                365\n         AIF   ('&ENTRY' NE 'ESTAEX').NOSDWA                        #01  366\n         LAE   &SDWA,0(0,1)       SDWA ADDRESS                      #01  367\n         USING SDWA,&SDWA         ADDRESSIN FOR SDWA                #01  368\n.NOSDWA  ANOP                                                       #01  369\n         AGO   .NOCSA2                                                   370\n.XA2     ANOP                                                            371\n         AIF   (&CALSA EQ 0 OR &WORKA EQ 0).NOCSA2                       372\n         LM    14,2,12(2)         RESTORE REGS FROM CALLER'S SAVEAREA    373\n.NOCSA2  ANOP                                                            374\n.******  SAVE FLOATING POINT REGISTERS ***********                       375\n         AIF   (&FLOAT EQ 0).MEND                                        376\n         STD   0,&SAVEFLT         ..SAVE                                 377\n         STD   2,&SAVEFLT+8       ..FLOATING                             378\n         STD   4,&SAVEFLT+16      ..POINT                                379\n         STD   6,&SAVEFLT+24      ..REGISTERS                            380\n.MEND    MEND                                                            381\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSIN01B": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "PALADIN"}, "text": "LU=........\nTYPE=RECEIVE\nFILETYPE=FILE\nFILEOPT=REPLACE\nLFILE=@JCL@(ALLOC)\nFILE=A:\\ALLOC.JCL\nNEWXFER\nLFILE=@JCL@(ASMLKD)\nFILE=A:\\ASMLKD.JCL\nNEWXFER\nLFILE=@JCL@(EXEC)\nFILE=A:\\EXEC.JCL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSIN01C": {"ttr": 1286, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x06\\x8f\\x00\\x93\\x06\\x8f\\x12\\x11\\x00\\x1e\\x00\\x1e\\x00\\x00\\xd7\\xc1\\xd3\\xc1\\xc4\\xc9\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-03-09T00:00:00", "modifydate": "1993-03-09T12:11:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "PALADIN"}, "text": "LU=........\nTYPE=RECEIVE\nFILETYPE=FILE\nFILEOPT=REPLACE\nLFILE=@SOURCE@(CESTAE)\nFILE=A:\\CESTAE.ASM\nNEWXFER\nLFILE=@SOURCE@(GRECOV)\nFILE=A:\\GRECOV.ASM\nNEWXFER\nLFILE=@SOURCE@(CARR)\nFILE=A:\\CARR.ASM\nNEWXFER\nLFILE=@SOURCE@(CFRR)\nFILE=A:\\CFRR.ASM\nNEWXFER\nLFILE=@MACLIB@(ENDMOD)\nFILE=A:\\ENDMOD.MAC\nNEWXFER\nLFILE=@MACLIB@(EQUATES)\nFILE=A:\\EQUATES.MAC\nNEWXFER\nLFILE=@MACLIB@(ESTPARM)\nFILE=A:\\ESTPARM.MAC\nNEWXFER\nLFILE=@MACLIB@(INNERMM)\nFILE=A:\\INNERMM.MAC\nNEWXFER\nLFILE=@MACLIB@(MODULE)\nFILE=A:\\MODULE.MAC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT192/FILE192.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT192", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}