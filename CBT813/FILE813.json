{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012847000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1352078, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE813.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1352078, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE813.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x16\\x02'", "DS1TRBAL": "b'\\xd2\\xa4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\x93\\x00\\x06\\x05\\x94\\x00\\r\\x00\\x17'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10W\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:57:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  813\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE813\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 12,488 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/07/09    10:57:40    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$PDSLOAD": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00F\\x01\\x026_\\x01\\t%\\x0f\\x10Q\\x00'\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2009-09-07T10:51:46", "lines": 39, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE INSTALL LIBRARIES\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT478.FILE813(PDSLOAD)')\n   DSN (yourid.your.loadlib) VOL(volser)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT478.FILE813',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=SUTL,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=yourid.your.loadlib\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ISPPLIB\n//S002 EXEC PDSLOAD,MEMB=JCL\n//S003 EXEC PDSLOAD,MEMB=MACLIB\n//S004 EXEC PDSLOAD,MEMB=REXX\n//S005 EXEC PDSLOAD,MEMB=SOURCE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLSBG": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x001\\x01\\x026_\\x01\\t%\\x0f\\x10R\\x00'\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2009-09-07T10:52:31", "lines": 39, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*    PDSLOAD JOB TO CREATE INSTALL LIBRARIES\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT478.FILE813(PDSLOAD)')\n   DSN (SBGOLOB.TEMP.PDSLOAD) VOL(WORKE1)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT478.FILE813',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=SUTL,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.TEMP.PDSLOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=ISPPLIB\n//S002 EXEC PDSLOAD,MEMB=JCL\n//S003 EXEC PDSLOAD,MEMB=MACLIB\n//S004 EXEC PDSLOAD,MEMB=REXX\n//S005 EXEC PDSLOAD,MEMB=SOURCE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE813": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x10W\\x008\\x008\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:57:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 813 is from Richard L. Rice and contains a fixed version  *   FILE 813\n//*           of his SUTL (System Utility) package that allow you   *   FILE 813\n//*           to get system information from an MVS system on your  *   FILE 813\n//*           network that you are NOT logged on to.  This utility  *   FILE 813\n//*           was previously packaged on File 171.                  *   FILE 813\n//*                                                                 *   FILE 813\n//*           email:  Richard.L.Rice@conocophillips.com             *   FILE 813\n//*                                                                 *   FILE 813\n//*       SYSTEM UTILITY (SUTL)  -  A VTAM LU 6.2 application       *   FILE 813\n//*                  that allows a TSO user to obtain informa-      *   FILE 813\n//*                  tion about executing jobs, the APF list,       *   FILE 813\n//*                  IPL date/time/sysres, link list, etc.          *   FILE 813\n//*                  Most of this information is usually            *   FILE 813\n//*                  available via other utilities already in       *   FILE 813\n//*                  use, but this utility allows the TSO user      *   FILE 813\n//*                  to get info from a system that he is not       *   FILE 813\n//*                  logged on to.                                  *   FILE 813\n//*                                                                 *   FILE 813\n//*                    SYSTEM UTILITY (SUTL)                        *   FILE 813\n//*                                                                 *   FILE 813\n//*        SUTL IS A VTAM LU 6.2 APPLICATION THAT ALLOWS A TSO      *   FILE 813\n//*        USER TO OBTAIN INFORMATION ABOUT EXECUTING JOBS, THE     *   FILE 813\n//*        APF LIST, IPL DATE/TIME/SYSRES, LINK LIST, ETC.  MOST    *   FILE 813\n//*        OF THIS INFORMATION IS USUALLY AVAILABLE VIA OTHER       *   FILE 813\n//*        UTILITIES ALREADY IN USE, SO WHY BOTHER GOING TO THE     *   FILE 813\n//*        TROUBLE OF 'RE-INVENTING' THIS WHEEL AND ADDING VTAM     *   FILE 813\n//*        OVER-HEAD IN THE PROCESS?  BEING A VTAM APPLICATION      *   FILE 813\n//*        MEANS THAT A TSO USER CAN GET INFO FROM A SYSTEM         *   FILE 813\n//*        THAT HE IS NOT LOGGED ON TO.  IF YOU HAVE MULTIPLE       *   FILE 813\n//*        PROCESSORS OR LPARS, YOU CAN \"WATCH\" EXECUTING JOBS ON   *   FILE 813\n//*        ANY OF THE SYSTEMS NO MATTER WHICH SYSTEM YOU ARE        *   FILE 813\n//*        LOGGED ON TO.  BESIDES IT WAS A GOOD WAY TO LEARN        *   FILE 813\n//*        SOMETHING AND HAVE A USEFUL UTILITY WHEN IT WAS          *   FILE 813\n//*        WORKING.                                                 *   FILE 813\n//*                                                                 *   FILE 813\n//*        SUTL CONSISTS OF TWO BASIC COMPONENTS, (1) A DATA        *   FILE 813\n//*        COLLECTOR THAT WOULD PROBABLY BE BEST TO RUN AS A        *   FILE 813\n//*        STARTED TASK (STC) AND (2) THE TSO/SPF CODE THAT SENDS   *   FILE 813\n//*        REQUESTS TO THE DATA COLLECTOR AND DISPLAYS THE DATA.    *   FILE 813\n//*                                                                 *   FILE 813\n//*        THE DATA COLLECTOR (STC) SHOULD BE RUN ON EACH SYSTEM.   *   FILE 813\n//*        THE STC DOES REQUIRE APF AUTHORIZATION FOR THE UCB       *   FILE 813\n//*        FUNCTION.  IF YOU REMOVE THE UCB FUNCTION, SUTL WILL     *   FILE 813\n//*        NOT REQUIRE ANY SPECIAL PRIVILEGES.                      *   FILE 813\n//*                                                                 *   FILE 813\n//*        THE TSO/SPF PART REQUIRES ONE VTAM APPL ID PER ACTIVE    *   FILE 813\n//*        TSO USER.  THESE APPL IDS ARE ASSEMBLED AND LINK         *   FILE 813\n//*        EDITED INTO A LOAD MODULE AS PART OF THE INSTALLATION    *   FILE 813\n//*        STEPS.  I FELT THAT IT WOULD BE LESS OVERHEAD PER        *   FILE 813\n//*        INVOCATION TO SEARCH A PRE-ASSEMBLED/LINK EDITED LOAD    *   FILE 813\n//*        MODULE THAN TO READ A PARAMETER DATA SET (THIS WOULD     *   FILE 813\n//*        MEAN ALLOCATING THE DATA SET, OPENING IT, READING AND    *   FILE 813\n//*        SCANNING EACH STATEMENT, CLOSING, AND THEN               *   FILE 813\n//*        DE-ALLOCATING).                                          *   FILE 813\n//*                                                                 *   FILE 813\n//*                                                                 *   FILE 813\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPPLIB": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x101\\x01C\\x01C\\x00\\x00\\xe2\\xe4\\xe3\\xd3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:31:00", "lines": 323, "newlines": 323, "modlines": 0, "user": "SUTL"}, "text": "./ ADD NAME=SUTLACT  0103-09147-09162-1646-00028-00028-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT)    INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH)  COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH)  COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH)  COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH)  COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL ACTIVE MVS REGIONS --------- SYSTEM:%&PSYSTEM - &PSMF -/-/---------------+\n+\n+ &PMSGI       &PMSGT\n+\n%  JOB PREFIX:&JPFX   %     USER PREFIX:&UPFX   %                    CPU &CPU  +\n+\n%  JOB     STEP    PROCSTEP USER     TYP SWP   REAL SERVICE   I-O'S   CPU TIME\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLAPF  0101-09147-09162-1647-00026-00026-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL APF AUTHORIZED LIBRARIES --- SYSTEM:%&PSYSTEM - &PSMF -/-/---------------+\n+\n+ &PMSGI      &PMSGT\n+\n+             *----------- DATA SET NAME ---------------*   VOLSER\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLFS   0104-09146-09162-1647-00025-00020-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  + TYPE(TEXT)    INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL MOUNTED FILESYSTEMS      --- SYSTEM:%&PSYSTEM - &PSMF --/-/--------------+\n+\n+ &PMSGI      &PMSGT\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,ZVERB)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLFS1  0103-09148-09162-1649-00025-00025-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  + TYPE(TEXT)    INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL MOUNTED FILESYSTEMS      --- SYSTEM:%&PSYSTEM - &PSMF --/-/--------------+\n+\n+ &PMSGI      &PMSGT\n+Mount point        Type   Status   Data set name\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,ZVERB)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLFS2  0106-09148-09189-0951-00025-00025-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  + TYPE(TEXT)    INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL MOUNTED FILESYSTEMS      --- SYSTEM:%&PSYSTEM - &PSMF ----/-/------------+\n+\n+ &PMSGI      &PMSGT\n+Mount point              Reads       Bytes read        Writes    Bytes written\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,ZVERB)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLFS3  0102-09148-09162-1650-00025-00025-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\n  + TYPE(TEXT)    INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL MOUNTED FILESYSTEMS      --- SYSTEM:%&PSYSTEM - &PSMF ----/-/------------+\n+\n+ &PMSGI      &PMSGT\n+Mount point\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA,ZVERB)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLIPL  0101-09147-09162-1651-00025-00025-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAIN)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n 05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n 06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n 07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SYSTEM IPL INFO ------------ SYSTEM:%&PSYSTEM - &PSMF ----/-/------------+\n+\n+ &PMSGI      &PMSGT\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLLLA  0101-09147-09162-1651-00025-00025-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SYSTEM LINK LIST ----------- SYSTEM:%&PSYSTEM - &PSMF  ---/-/------------+\n+\n+ &PMSGI      &PMSGT\n+\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLMENU 0109-09147-09169-0900-00030-00031-00000-ISPPLIB\n)ATTR\n  $ TYPE(OUTPUT) INTENS(HIGH) SKIP(ON) JUST(ASIS)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY\n%-------------------------- SUTL MAIN MENU ----------------  &PSYSTEM - &PSMF\n                                                            +User     - &PUID\n                                                            +Time     - &ZTIME\n                                                            +Terminal - &ZTERM\n%OPTION  ===>_ZCMD                                                             +\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n\n  $PMSGI      $PMSGT\n\n+PRESS%END KEY+TO TERMINATE\n)INIT\n.CURSOR = ZCMD\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLPS   0104-09146-09170-0833-00025-00020-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL ACTIVE PROCESSES         --- SYSTEM:%&PSYSTEM - &PSMF ----/-/------------+\n+\n+ &PMSGI      &PMSGT\n%      PID       PPID     IO'S   CPU TIME  COMMAND\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVLINE = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLSUB  0101-09147-09162-1652-00026-00026-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL SUBSYSTEM LIST ------------- SYSTEM:%&PSYSTEM - &PSMF  ---/-/------------+\n+\n+ &PMSGI      &PMSGT\n+\n%                    Name FL ID   SSVT     SUSE     SYN\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &LVL = LVLINE(VDATA)\n)END\n./ ADD NAME=SUTLUSE  0107-09147-09169-1117-00026-00026-00000-ISPPLIB\n)ATTR\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON)\n  + TYPE(TEXT) INTENS(LOW)\n  01 TYPE(DATAOUT) INTENS(LOW)\n  02 TYPE(DATAIN)\n  03 TYPE(DATAOUT) INTENS(HIGH)\n  04 TYPE(DATAOUT) INTENS(HIGH) COLOR(YELLOW)\n  05 TYPE(DATAOUT) INTENS(HIGH) COLOR(RED)\n  06 TYPE(DATAOUT) INTENS(HIGH) COLOR(TURQUOISE)\n  07 TYPE(DATAOUT) INTENS(HIGH) COLOR(GREEN)\n)BODY WIDTH(&ZSCREENW) EXPAND(//)\n%COMMAND ===>_ZCMD                             / /            %SCROLL ===>_VSCR+\n%SUTL ACTIVE USERS --------------- SYSTEM:%&PSYSTEM - &PSMF ----/-/------------+\n+\n+ &PMSGI       &PMSGT\n+\n%Userid  ..LU-CID or IP... Func  Net      *......SENDs.....* *......RECVs......*\n|VDATA ---------------------------------/ /------------------------------------|\n|                                       / /                                    |\n| --------------------------------------/-/------------------------------------|\n)INIT\n)REINIT\n  REFRESH(ZCMD,VSCR,VDATA)\n)PROC\n  &VVDEPTH = LVLINE(VDATA)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x101\\x01}\\x01}\\x00\\x00\\xe2\\xe4\\xe3\\xd3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:31:00", "lines": 381, "newlines": 381, "modlines": 0, "user": "SUTL"}, "text": "./ ADD NAME=ASM      0111-03252-09190-0802-00067-00074-00000-JCL\n//         JOB\n//ASM      PROC NAME=,\n//             AP=,\n//             LIST='*'\n//ASM      EXEC PGM=IEV90,\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT),&AP'\n//SYSPRINT DD   SYSOUT=&LIST\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//         DD   DSN=........SUTL.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.TCPIP.SEZACMAC,DISP=SHR\n//SYSPUNCH DD   DSN=........SUTL.OBJECT(&NAME),DISP=SHR\n//SYSIN    DD   DSN=........SUTL.SOURCE(&NAME),DISP=SHR\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//STCACT   EXEC ASM,NAME=STCACT,AP=RENT        ACTIVE REGION DATA\n//STCAPF   EXEC ASM,NAME=STCAPF,AP=RENT        APF LIST\n//STCATTN  EXEC ASM,NAME=STCATTN,AP=RENT       VTAM ATTN EXIT\n//STCCOMM  EXEC ASM,NAME=STCCOMM               COMMON DATA\n//STCCONS  EXEC ASM,NAME=STCCONS,AP=RENT       CONSOLE SUBTASK\n//STCFS    EXEC ASM,NAME=STCFS,AP=RENT         FILESYSTEM INFO\n//STCIPL   EXEC ASM,NAME=STCIPL,AP=RENT        IPL INFO\n//STCLLA   EXEC ASM,NAME=STCLLA,AP=RENT        LINK LIST\n//STCLRAD  EXEC ASM,NAME=STCLRAD,AP=RENT       VTAM LERAD EXIT\n//STCMAIN  EXEC ASM,NAME=STCMAIN,AP=RENT       STC MAINLINE\n//STCNET   EXEC ASM,NAME=STCNET,AP=RENT        NETWORK FUNCTIONS\n//STCPARM  EXEC ASM,NAME=STCPARM,AP=RENT       STC PARAMETER READER\n//STCPRTQ  EXEC ASM,NAME=STCPRTQ,AP=RENT       PRINT QUEUEING\n//STCPRTS  EXEC ASM,NAME=STCPRTS,AP=RENT       PRINT SUBTASK\n//STCPS    EXEC ASM,NAME=STCPS,AP=RENT         OPEN EDITION PROCESSES\n//STCSID   EXEC ASM,NAME=STCSID,AP=RENT        SMF ID\n//STCSUB   EXEC ASM,NAME=STCSUB,AP=RENT        SUBSYSTEM DISPLAY\n//STCTCPIP EXEC ASM,NAME=STCTCPIP,AP=RENT      USER TCP/IP FUNCTIONS\n//STCUSE   EXEC ASM,NAME=STCUSE,AP=RENT        ACTIVER USERS LIST\n//STCUSER  EXEC ASM,NAME=STCUSER,AP=RENT       USER SUBTASK MAINLINE\n//STCVTAM  EXEC ASM,NAME=STCVTAM,AP=RENT       USER VTAM FUNCTIONS\n//TCPIPSUB EXEC ASM,NAME=TCPIPSUB,AP=RENT      STC TCPIP SUBTASK\n//VTAMSUB  EXEC ASM,NAME=VTAMSUB,AP=RENT       STC VTAM SUBTASK\n//TSOACB   EXEC ASM,NAME=TSOACB,AP=RENT        TSO ACB NAMES\n//TSOACT   EXEC ASM,NAME=TSOACT,AP=RENT        ACTIVITY DISPLAY\n//TSOAPF   EXEC ASM,NAME=TSOAPF,AP=RENT        APF LIST\n//TSOCOMM  EXEC ASM,NAME=TSOCOMM               COMMON DATA\n//TSODISP  EXEC ASM,NAME=TSODISP,AP=RENT       DYNAMIC AREA MANAGER\n//TSOFS    EXEC ASM,NAME=TSOFS,AP=RENT         MOUNTED FILESYSTEMS\n//TSOIPL   EXEC ASM,NAME=TSOIPL,AP=RENT        IPL INFO DISPLAY\n//TSOLLA   EXEC ASM,NAME=TSOLLA,AP=RENT        LINK LIST DISPLAY\n//TSOLRAD  EXEC ASM,NAME=TSOLRAD,AP=RENT       LERAD EXIT\n//TSOMAIN  EXEC ASM,NAME=TSOMAIN,AP=RENT       TSO MAINLINE\n//TSOMENU  EXEC ASM,NAME=TSOMENU,AP=RENT       MENU DATA\n//TSONET   EXEC ASM,NAME=TSONET,AP=RENT        NETWORK FUNCTIONS\n//TSOPQRY  EXEC ASM,NAME=TSOPQRY,AP=RENT       DYNAMIC AREA PQUERY\n//TSOPRSE  EXEC ASM,NAME=TSOPRSE,AP=RENT       COMMAND PARSER\n//TSOPS    EXEC ASM,NAME=TSOPS,AP=RENT         ACTIVE OE PROCESSES\n//TSOSUB   EXEC ASM,NAME=TSOSUB,AP=RENT        SUBSYSTEM DISPLAY\n//TSOTCPIP EXEC ASM,NAME=TSOTCPIP,AP=RENT      TCPIP INTERFACE\n//TSOUSE   EXEC ASM,NAME=TSOUSE,AP=RENT        LIST ACTIVE USERS\n//TSOVARS  EXEC ASM,NAME=TSOVARS,AP=RENT       SPF VARIABLE DEF/DEL\n//TSOVTAM  EXEC ASM,NAME=TSOVTAM,AP=RENT       TSO VTAM FUNCTIONS\n//TSOXTR   EXEC ASM,NAME=TSOXTR,AP=RENT        EXTERNAL TRACE ON/OFF\n//\n./ ADD NAME=LINK     0115-03252-09190-0803-00228-00184-00000-JCL\n//         JOB\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK STC COMMON                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCOMM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCCOMM)                COMMON MODULE\n  ENTRY STCCOMM\n  NAME STCCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK CONSOLE SUBTASK                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCONS EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCCONS)                CONSOLE SUBTASK\n  ENTRY STCCONS\n  NAME STCCONS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TCP/IP SUBTASK                                     *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKIP   EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TCPIPSUB)               TCPIP SUBTASK\n  ENTRY TCPIPSUB\n  NAME TCPIPSUB(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK VTAM SUBTASK                                       *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKVTAM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(VTAMSUB)                VTAM SUBTASK\n  ENTRY VTAMSUB\n  NAME VTAMSUB(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK STC MAIN MODULE                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKSTC  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//CSSLIB   DD  DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCMAIN)                MAINLINE\n  INCLUDE SYSLIB(STCATTN)                VTAM ATTN EXIT\n  INCLUDE SYSLIB(STCLRAD)                VTAM LERAD EXIT\n  INCLUDE SYSLIB(STCPRTQ)                PRINT QUEUEING\n  INCLUDE CSSLIB(BPX1SEU)\n  ENTRY STCMAIN\n  NAME SUTLSTC(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK PARAMETER READER                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPARM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCPARM)                PARAMETER READER\n  ENTRY STCPARM\n  NAME STCPARM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK PRINT SUBTASK                                      *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKPRTS EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCPRTS)                PRINT SUBTASK\n  ENTRY STCPRTS\n  NAME STCPRTS(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK USER SUBTASK                                       *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKUSER EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//CSSLIB   DD  DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(STCACT)                 ACTIVE REGION DATA COLLECTOR\n  INCLUDE SYSLIB(STCAPF)                 APF LIST\n  INCLUDE SYSLIB(STCFS)                  FILESYSTEM INF\n  INCLUDE SYSLIB(STCIPL)                 IPL INFO\n  INCLUDE SYSLIB(STCLLA)                 LINK LIST\n  INCLUDE SYSLIB(STCNET)                 NETWORK FUNCTIONS\n  INCLUDE SYSLIB(STCPS)                  OE PROCESSES\n  INCLUDE SYSLIB(STCSID)                 SMF ID\n  INCLUDE SYSLIB(STCSUB)                 SUBSYSTEM DISPLAY\n  INCLUDE SYSLIB(STCUSE)                 ACTIVE USER LIST\n  INCLUDE SYSLIB(STCUSER)                SUBTASK MAINLINE\n  INCLUDE SYSLIB(STCTCPIP)               USER TCPIP FUNCTIONS\n  INCLUDE SYSLIB(STCVTAM)                USER VTAM FUNCTIONS\n  INCLUDE CSSLIB(BPX1GMN)\n  INCLUDE CSSLIB(BPX1GPS)\n  INCLUDE CSSLIB(BPX1STV)\n  ENTRY STCUSER\n  NAME STCUSER(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK ACB NAMES MODULE                                   *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKACB  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOACB)                 ACB NAMES MODULE\n  ENTRY TSOACB\n  NAME TSOACB(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TSO COMMON                                         *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKCOMM EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOCOMM)                COMMON MODULE\n  ENTRY TSOCOMM\n  NAME TSOCOMM(R)\n/*\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINK TSO MAIN MODULE                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINKTSO  EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,LET,XREF,RENT,REFR,REUS,MAP,AC=1',\n//             COND=(4,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLIB   DD  DSN=........SUTL.OBJECT,DISP=SHR\n//SYSLMOD  DD  DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSLIN   DD  *\n  INCLUDE SYSLIB(TSOACT)                 ACTIVITY DISPLAY\n  INCLUDE SYSLIB(TSOAPF)                 APF LIST\n  INCLUDE SYSLIB(TSODISP)                DYNAMIC AREA MANAGER\n  INCLUDE SYSLIB(TSOFS)                  FILESYSTEM INFO\n  INCLUDE SYSLIB(TSOIPL)                 IPL INFO DISPLAY\n  INCLUDE SYSLIB(TSOLLA)                 LINK LIST DISPLAY\n  INCLUDE SYSLIB(TSOLRAD)                VTAM LERAD EXIT\n  INCLUDE SYSLIB(TSOMAIN)                MAINLINE\n  INCLUDE SYSLIB(TSOMENU)                MAINLINE\n  INCLUDE SYSLIB(TSONET)                 NETWORK FUNCTIONS\n  INCLUDE SYSLIB(TSOPQRY)                DYNAMIC AREA PQUERY\n  INCLUDE SYSLIB(TSOPRSE)                COMMAND PARSER\n  INCLUDE SYSLIB(TSOPS)                  OE PROCESSES\n  INCLUDE SYSLIB(TSOSUB)                 SUBSYSTEM DISPLAY\n  INCLUDE SYSLIB(TSOUSE)                 LIST ACTIVE USERS\n  INCLUDE SYSLIB(TSOTCPIP)               TCPIP INTERFACE\n  INCLUDE SYSLIB(TSOVARS)                SPF VARIABLE DEFINE/DELETE\n  INCLUDE SYSLIB(TSOVTAM)                TSO VTAM FUNCTIONS\n  INCLUDE SYSLIB(TSOXTR)                 EXTERNAL TRACE ON/OFF\n  ENTRY TSOMAIN\n  NAME SUTLTSO(R)\n/*\n//\n./ ADD NAME=SUTLIP   0102-09152-09190-0803-00029-00036-00000-JCL\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n   TRACE O\n#ARGS = ARG()\n\nSUTL_PORT=NNNNN\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF SUTL_HOSTNAME = AAA THEN\n   SUTL_HOSTNAME = HOSTA\n\nIF SUTL_HOSTNAME = BBB THEN\n   SUTL_HOSTNAME = HOSTB\n\nIF SUTL_HOSTNAME = CCC THEN\n   SUTL_HOSTNAME = HOSTC\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nADDRESS \"ISPEXEC\"\n  \"SELECT CMD(SUTL1\" SUTL_HOSTNAME||\":\"||SUTL_PORT\") NEWAPPL(SUTL)\"\n\nEXIT (0)\n./ ADD NAME=SUTLPARM 0103-03252-09190-0803-00002-00001-00000-JCL\nAPPLID=XXXXXXX\nPORT=NNNNN\n./ ADD NAME=SUTLSTC  0112-03252-09190-0804-00006-00010-00000-JCL\n//SUTLSTC  EXEC PGM=SUTLSTC,REGION=4096K\n//STEPLIB  DD DSN=........SUTL.LOADLIB,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n//SUTLPRT  DD SYSOUT=*\n//STCIN    DD DSN=........SUTL.JCL(SUTLPARM),DISP=SHR\n//\n./ ADD NAME=SUTLVTAM 0100-09162-09162-1303-00019-00019-00000-JCL\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF SUTL_NODE = AAA  THEN\n   SUTL_NODE = APPLAAA\n\nIF SUTL_NODE = BBB  THEN\n   SUTL_NODE = APPLBBB\n\nIF SUTL_NODE = CCC  THEN\n   SUTL_NODE = APPLCCC\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nADDRESS \"ISPEXEC\" \"SELECT CMD(SUTL1 \"SUTL_NODE\" ) NEWAPPL(SUTL)\"\n\nEXIT (0)\n./ ADD NAME=SUTL1    0100-09162-09162-1304-00023-00023-00000-JCL\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n /* TRACE R */\n\nPARSE UPPER ARG STCNAME\n\nADDRESS TSO\n  ALLOC \"FI(STEPLIBX) DA('XXXXXXX.LOADLIB' ***) SHR REUSE\"\n\nSAVELIBX = TSOPEXT\n\nADDRESS TSO ISPEXEC \"LIBDEF ISPPLIB DATASET ID('XXXXXXX.ISPPLIB')\"\n\nADDRESS TSO ISPEXEC \"SELECT PGM(SUTLTSO) PARM(\" || STCNAME || \")\"\n\nIF SAVELIBX = '' THEN\n   ADDRESS TSO FREE \"FI(STEPLIBX)\"\nELSE\n   ADDRESS TSO ALLOC \"FI(STEPLIBX) DA(\" SAVELIBX \") SHR REUSE\"\n\nEXIT (0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACLIB": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x101\\x04\\x17\\x04\\x17\\x00\\x00\\xe2\\xe4\\xe3\\xd3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:31:00", "lines": 1047, "newlines": 1047, "modlines": 0, "user": "SUTL"}, "text": "./ ADD NAME=ABCODES  0100-09250-09250-1028-00032-00032-00000-MACLIB\n         MACRO\n         ABCODES\n$U0001   EQU   0001               SUBTASK ATTACH FAILED IN STCMAIN\n$U0002   EQU   0002               SUBTASK DETACH FAILED IN STCMAIN\n$U0003   EQU   0003               SETLOGON FAILED IN STCMAIN\n$U0004   EQU   0004               INVALID COMMAND PASSED TO STCVTAM\n$U0005   EQU   0005               DUPLICATE CNOS IN STCATTN\n$U0006   EQU   0006               RECVFMH5 FAILED IN STCATTN\n$U0007   EQU   0007               DUPLICATE FMH5 IN STCATTN\n$U0008   EQU   0008               VTAM RECEIVE FAILED IN STCUSER\n$U0009   EQU   0009               UNKNOWN REGION TYPE IN STCACT\n$U0010   EQU   0010               LLT NOT PRESENT IN STCLLA\n$U0011   EQU   0011               QEDIT CIB DELETE FAILED IN STCCONS\n$U0012   EQU   0012               QEDIT SET CIB LIMIT FAILED IN STCCONS\n$U0013   EQU   0013               INVALID DEVICE CLASS IN STCUCB\n$U0014   EQU   0014               UCBSCAN FAILED IN STCUCB\n$U1002   EQU   1002               ERROR IN COMMAND PROCESSOR IN TSOMAIN\n$U1007   EQU   1007               LERAD EXIT ENTERED IN TSO INTERFACE\n$U1008   EQU   1008               DEALLOC FAILED IN TSOMAIN\n$U1009   EQU   1009               INVALID COMMAND PASSED TO TSOVARS\n$U1010   EQU   1010               INVALID VARIABLE ID PASSED TO TSOVARS\n$U1011   EQU   1011               VDEFINE FAILED IN TSOVARS\n$U1012   EQU   1012               VDELETE FAILED IN TSOVARS\n$U1013   EQU   1013               INVALID REGION TYPE IN TSOACT\n$U1014   EQU   1014               INVALID SWAP STATUS IN TSOACT\n$U1015   EQU   1015               INVALID COMMAND PASSED TO TSOVTAM\n$U1016   EQU   1016               RECEIVE FAILED IN TSOVTAM\n$U1017   EQU   1017               SEND FAILED IN TSOVTAM\n$U1018   EQU   1018               PQUERY FAILED IN TSOPQRY\n$U1019   EQU   1019               VDATA VDELETE FAILED IN TSODISP\n$U1020   EQU   1020               VDATA VDEFINE FAILED IN TSODISP\n         MEND\n./ ADD NAME=ACTDATA  0104-09138-09160-1600-00040-00036-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nACT_HEADER             DS    0C\nACT_REGION_TYPES       DS    X     REGION TYPE\n$ACT_ALL               EQU   X'00' .. ALL REGIONS\n$ACT_BATCH             EQU   C'B'  .. BATCH REGIONS\n$ACT_MOUNT             EQU   C'M'  .. MOUNTS\n$ACT_STC               EQU   C'S'  .. STARTED TASKS\n$ACT_TSO               EQU   C'T'  .. TSO USERS\nACT_NAME_PREFIX_LENGTH DS    XL2   JOB NAME PREFIX LENGTH\nACT_NAME_PREFIX        DS    CL8   JOB NAME PREFIX\nACT_USER_PREFIX_LENGTH DS    XL2   USER NAME PREFIX LENGTH\nACT_USER_PREFIX        DS    CL8   USER NAME PREFIX\nACT_NBR_REGIONS        DS    XL2   NBR OF REGIONS RETURNED\nACT_CPU_BUSY           DS    XL2   CPU BUSY PERCENTAGE\nACT_HEADER_L           EQU   *-ACT_HEADER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nACT_REGION             DS    0C    INFO PER REGION\nACT_ASID               DS    XL2   ASID\nACT_NAME               DS    CL8   NAME\nACT_STEP               DS    CL8   STEP NAME\nACT_PROC               DS    CL8   PROC NAME\nACT_PROC_STEP          DS    CL8   PROC STEP\nACT_USER               DS    CL8   USER NAME\nACT_REGION_TYPE        DS    X     REGION TYPE\nACT_SWAP_STATUS        DS    X     SWAP STATUS\n$ACT_SWAP_TRANSITION   EQU   C'T'  .. IN TRANSITION\n$ACT_SWAP_IN           EQU   C'I'  .. SWAPPED IN\n$ACT_SWAP_OUT          EQU   C'O'  .. SWAPPED OUT\n$ACT_SWAP_LOGICAL      EQU   C'L'  .. LOGICALLY SWAPPED OUT\n$ACT_SWAP_NONSWAP      EQU   C'N'  .. NON-SWAPPABLE\nACT_REAL_FRAMES        DS    XL4   NUMBER OF REAL PAGE FRAMES\nACT_SERVICE_UNITS      DS    XL4   SERVICE UNITS\nACT_IO                 DS    XL4   NBR OF I/O'S\nACT_TCB_TIME           DS    XL8   TCB TIME\nACT_SRB_TIME           DS    XL8   SRB TIME\nACT_REGION_L           EQU   *-ACT_REGION\n./ ADD NAME=APFDATA  0101-09138-09139-1302-00013-00013-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAPF_HEADER             DS    0C\nAPF_NBR_DSNS           DS    XL2       NUMBER OF DATASETS IN LIST\nAPF_HEADER_L           EQU   *-APF_HEADER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAPF_DATA               DS    0C\nAPF_DSN                DS    CL44      DATASET NAME\nAPF_VOLSER             DS    CL6       VOLUME\nAPF_DATA_L             EQU   *-APF_DATA\n./ ADD NAME=ATTR     0100-09138-09138-1029-00016-00016-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*     Attributes used for ISPF panels                                 *\n*                                                                     *\n*                                                                     *\n*     These need to agree with the definition on the panels           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n$ATTR_NORMAL                EQU   X'01'\n$ATTR_INPUT                 EQU   X'02'\n$ATTR_HIGH                  EQU   X'03'\n$ATTR_HIGH_YELLOW           EQU   X'04'\n$ATTR_HIGH_RED              EQU   X'05'\n$ATTR_HIGH_TURQUOISE        EQU   X'06'\n$ATTR_HIGH_GREEN            EQU   X'07'\n./ ADD NAME=CLIENT   0100-09148-09148-1523-00008-00008-00000-MACLIB\n         MACRO\n         CLIENT &PREFIX=\n&PREFIX._CLIENT       DS   0F\n&PREFIX._CLIENT_DOMAIN DS  F\n&PREFIX._CLIENT_NAME  DS   CL8\n&PREFIX._CLIENT_TASK  DS   CL8\n                      DS   XL20\n         MEND\n./ ADD NAME=COMMCOMM 0109-09138-09169-1448-00091-00088-00000-MACLIB\n         MACRO\n         COMMCOMM &COMMNAME=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n*---------------------------------------------------------------------*\n*                                                                     *\n*          Double word for CVB/CVD                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_DWORD DC  D'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADD TRACE ENTRY                                            *\n*                                                                     *\n*  During program initialization mainline acquires storage for the    *\n*  trace table and sets TRFIRST, TRLAST, and TRCURR.  The mainline    *\n*  also sets R11 to the address of the common area and all other      *\n*  modules depend on this remaining unchanged.  Any module except     *\n*  this module may call the trace routine.  Macro ITRACE generates    *\n*  the calling sequence.  R14 is the only register altered by the     *\n*  trace macro.                                                       *\n*                                                                     *\n*  The trace table is a \"wrap-around\" table.  TRFIRST is the first    *\n*  entry's address, TRLAST is the last entry's address, and           *\n*  TRCURR is the address of the last entry added to the table.        *\n*  When a trace entry is added to the table, the current TCB address, *\n*  current module's suffix, and 8-byte ID, and up to 2 8-byte user    *\n*  specified data items are captured.                                 *\n*                                                                     *\n*      This code depends on:                                          *\n*           R12  Common area address                                  *\n*           R11  Current module's base address                        *\n*           R13  address of:                                          *\n*                1. 18 word work area                                 *\n*                2. 2 8-byte data data items                          *\n*           R14  trace id's address and R14 + 8 will be the return    *\n*                address                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRACE000 DS    0H\n         USING DXD_SAVE,R13                   DEFINE BASE\n         USING &COMMNAME,R12                  DEFINE BASE\n         USING MODPRFX,R11                    DEFINE BASE\n         USING TRENTRY,R2                     DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\nTRACE010 DS    0H\n         ICM   R2,15,TRCURR                   CURRENT TRACE ENTRY\n         BZ    TRACE030                       NO TRACE TABLE\n         OC    0(TRENTRYL,R2),0(R2)           EMPTY ENTRY?\n         BZ    TRACE020                       YES.. USE THIS ENTRY\n         LA    R2,TRENTRYL(,R2)               NEXT TRACE ENTRY\n         C     R2,TRLAST                      BEYOND END OF TABLE?\n         BNH   TRACE020                       NO\n         L     R2,TRFIRST                     'WRAP' TRACE TABLE\nTRACE020 DS    0H\n         L     R1,TRCURR                      CURRENT ENTRY\n         CS    R1,R2,TRCURR                   UPDATE 'CURRENT' ADDRESS\n         BNE   TRACE010                       UNSUCCESSFUL.. TRY AGAIN\n         USING PSA,R0                         DEFINE PSA BASE\n         MVC   TRETCB,PSATNEW                 COPY CURRENT TCB ADDRESS\n         MVC   TREMOD,PFXMODNM+3              COPY MODULE SUFFIX\n         MVC   TREID,0(R14)                   COPY TRACE ID\n         MVC   TREDATA1,TRDATA1               COPY TRACE DATA 1\n         MVC   TREDATA2,TRDATA2               COPY TRACE DATA 2\n         XC    TRDATA1,TRDATA1                CLEAR TRACE DATA\n         XC    TRDATA2,TRDATA2                CLEAR TRACE DATA\nTRACE030 DS    0H\n         TM    XTR_FLAG,$XTR_ON               EXTERNAL TRACE?\n         BNO   TRACE040                       NO\n         TPUT  0(R2),32\nTRACE040 DS    0H\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         B     8(R14)                         RETURN\n\nXTR_FLAG DC    X'00'\n$XTR_ON  EQU   X'80'\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE CONTROL                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DS    0A\n         DC    CL4'1STX'                      FIRST TRACE ENTRY\nTRFIRST  DC    A(0)\n         DC    CL4'LAST'                      LAST TRACE ENTRY\nTRLAST   DC    A(0)\n         DC    CL4'CURR'                      CURRENT TRACE ENTRY\nTRCURR   DC    A(0)\nTRADDR   DC    A(0)                           TRACE TABLE ADDRESS\nTRSIZE   DC    A(&TRSZ*TRENTRYL)              TRACE TABLE SIZE\n         MEND\n./ ADD NAME=FMH5     0100-09250-09250-1028-00037-00037-00000-MACLIB\n         MACRO\n&NAME    FMH5  &DSECT=\n         LCLA  &LEN\n         LCLC  &DNAME\n         AIF   (T'&NAME EQ 'O').NAME10\n&DNAME   SETC  '&NAME'\n         AGO   .NAME20\n.NAME10  ANOP\n&DNAME   SETC  'FMH5'\n.NAME20  ANOP\n         AIF   ('&DSECT' EQ 'YES').DSECT00\n         AIF   ('&DSECT' EQ 'NO').CSECT00\n         MNOTE 12,'''DSECT'' IS INVALID, MUST BE ''YES'' OR ''NO'' '\n         MEXIT\n.DSECT00 ANOP\n&DNAME   DSECT\n         AGO   .COMM\n.CSECT00 ANOP\n&DNAME   DS    0A\n.COMM    ANOP\n         DC    AL1(&DNAME.L)         FMH LENGTH\n         DC    X'05'                 FMH TYPE\n         DC    XL2'02FF'             ATTACH COMMAND CODE\n         DC    X'00'                 FLAG BYTE\n         DC    X'03'                 LENGTH OF FIXED PARAMETERS FIELD\n         DC    X'D0'                 CONVERSATION TYPE (BASIC)\n         DC    X'00'                 RESERVED\n         DC    X'40'                 ALLOW CONFIRMS\n         DC    AL1(L'FMH5USER+L'FMH5SMF)   TRANSACTION DATA LENGTH\nFMH5TRAN DS    0C                    TRANSACTION (USER ID) NAME\nFMH5USER DC    CL8' '                TRANSACTION (USER ID) NAME\nFMH5SMF  DC    CL8' '                TRANSACTION (USER ID) NAME\n         DC    X'00'                 LENGTH OF SECURITY INFORMATION\n         DC    X'00'                 LENGTH OF LUW IDENTIFIER\n         DC    X'00'                 LENGTH OF CONVERSATION CORRELATOR\n&DNAME.L EQU   *-&DNAME              FMH LENGTH\n         MEND\n./ ADD NAME=FSDATA   0103-09142-09189-0932-00022-00022-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFS_HEADER              DS    0C\nFS_NBR                 DS    XL2   NBR OF FILESYSTEMS RETURNED\nFS_HEADER_L            EQU   *-FS_HEADER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFS_DATA                DS    0C    INFO PER FILE SYSTEM\nFS_MOUNT_POINT         DS    CL256 MOUNT POINT\nFS_SIZE                DS    XL4   SIZE (IN BLOCKS)\nFS_USED                DS    XL4   BLOCKS USED\nFS_READS               DS    XL4   NBR OF READS\nFS_BYTES_READ          DS    XL8   NBR OF BYTES READ\nFS_WRITES              DS    XL4   NBR OF READS\nFS_BYTES_WRITTEN       DS    XL8   NBR OF BYTES WRITTEN\nFS_TYPE                DS    CL6   TYPE\nFS_STATUS              DS    CL8   STATUS\nFS_DDNAME              DS    CL8   DD NAME\nFS_DSNAME              DS    CL44  DATASET NAME\nFS_DATA_L              EQU   *-FS_DATA\n./ ADD NAME=IPLDATA  0104-09138-09160-1448-00006-00005-00000-MACLIB\nIPL_NBR                DS    XL4           NBR OF IPL ITEMS\n\nIPL                    DS    0C\nIPL_NAME               DS    CL20\nIPL_DATA               DS    CL54\nIPL_L                  EQU   *-IPL\n./ ADD NAME=ITRACE   0100-09250-09250-1028-00073-00073-00000-MACLIB\n.* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       The trace function always captures the TCB address, CSECT   *\n.*       suffix, and a trace ID.                                     *\n.*                                                                   *\n.*       One or two data elements (8 bytes each) may be captured at  *\n.*       any trace point.  The data to be captured may be specified  *\n.*       in either of two ways: DATA1 or RDATA1 and DATA2 or RDATA2. *\n.*       DATA1 and RDATA1 are mutually exclusive as are DATA2 and    *\n.*       RDATA2.  DATA1 and DATA2 specify the address of data to be  *\n.*       captured.  RDATA1 and RDATA2 specify a register whose       *\n.*       contents are to be captured.                                *\n.*                                                                   *\n.*       For example:                                                *\n.*                                                                   *\n.*                 ITRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4           *\n.*                                                                   *\n.*          In this case the trace entry would include the current   *\n.*          TCB address, CSECT suffix, the id \"POINTA\", 8 bytes of   *\n.*          data beginning at VALUE1's address, and the contents of  *\n.*          register 4.                                              *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    ITRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&TROPT' EQ 'OFF').MEXIT\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1            DATA ADDRESS\n         MVC   TRDATA1,0(R14)        MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   TRDATA1,0&DATA1       MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,TRDATA1    SAVE REGISTER CONTENTS\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2            DATA ADDRESS\n         MVC   TRDATA2,0(R14)        MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   TRDATA2,0&DATA2       MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,TRDATA2    SAVE REGISTER CONTENTS\n.DATA060 ANOP\n         BAL   R14,TRACE000          ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'              TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n./ ADD NAME=LLADATA  0100-09138-09138-1038-00012-00012-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLLA_HEADER             DS    0C\nLLA_NBR_DSNS           DS    XL2       NUMBER OF DATASETS IN LIST\nLLA_HEADER_L           EQU   *-LLA_HEADER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLLA_DATA               DS    0C\nLLA_DSN                DS    CL44      DATA SET NAME\nLLA_DATA_L             EQU   *-LLA_DATA\n./ ADD NAME=MENUDSCT 0102-09138-09141-1451-00010-00010-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMENU_DSECT             DSECT\nMENU_CMD               DS    CL4       COMMAND NAME\nMENU_FLAGS             DS    X         FLAGS/INDICTORS\n$MENU_NO_DISPLAY       EQU   X'80'     DON'T DISPLAY ON MENU\nMENU_ADDR              DS    AL4       BRANCH ADDRESS\nMENU_DESC              DS    CL60      DESCRIPTION FOR MENU\nMENU_DSECT_L           EQU   *-MENU_DSECT\n./ ADD NAME=MENUFUNC 0100-09138-09138-1043-00022-00022-00000-MACLIB\n         MACRO\n         MENUFUNC &CMD,&DESC,&MOD,&DISPLAY=YES\n         GBLA  &MENUA,&MENUD\n         AIF   ('&DISPLAY' EQ 'COUNT').LBL0040\n         DC    CL4'&CMD'          COMMAND\n         AIF   ('&DISPLAY' EQ 'YES').LBL0010\n         DC    AL1($MENU_NO_DISPLAY)\n         AGO   .LBL0020\n.LBL0010 ANOP\n         DC    AL1(0)\n&MENUD   SETA &MENUD+1\n.LBL0020 ANOP\n&MENUA   SETA &MENUA+1\n         DC    VL4(&MOD)          ADDRESS OF COMMAND PROCESSOR\n         AIF   ('&DISPLAY' EQ 'NO').LBL0030\n         DC    CL60&DESC          COMMAND DESCRIPTION\n.LBL0030 ANOP\n         MEXIT\n.LBL0040 ANOP\n$MENUA   EQU   &MENUA\n$MENUD   EQU   &MENUD\n         MEND\n./ ADD NAME=MODPRFX  0100-09138-09138-1043-00007-00007-00000-MACLIB\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R11,R15             LOAD PERMANENT BASE                  ASE00120\n         B     0(R0)               BRANCH AROUND MOD NAME/DATE/TIME\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\n./ ADD NAME=NETIO    0107-09138-09161-1535-00029-00029-00000-MACLIB\n         MACRO\n         NETIO &DSECT=NO\n             AIF   ('&DSECT' EQ 'YES').LBL0010\n             AIF   ('&DSECT' EQ 'NO').LBL0020\n             MNOTE 12,'INVALID ''DSECT'' PARAMETER'\n             MEXIT\n.LBL0010     ANOP\nNET_IO       DSECT\n             AGO   .LBL0030\n.LBL0020     ANOP\nNET_IO       DS   0H\n.LBL0030     ANOP\nNET_LENGTH   DS    H\nNET_FUNCTION DS    X                   FUNCTION\n$NET_ID      EQU   0                   .. USER IDENTIFICATION\n$NET_ACT     EQU   1                   .. ACTIVE REGIONS\n$NET_APF     EQU   2                   .. APF LIST\n$NET_FS      EQU   3                   .. FILESYSTEM LIST\n$NET_IPL     EQU   4                   .. IPL DATA\n$NET_LLA     EQU   5                   .. LINK LIST\n$NET_PS      EQU   6                   .. UNIX 'PROCESSES'\n$NET_SUB     EQU   7                   .. SUBSYSTEMS\n$NET_USERS   EQU   8                   .. INQUIRE USERS\n$NET_LOGOFF  EQU   254                 .. LOGOFF\nNET_RC       DS    XL2                 RETURN CODE\nNET_MESSAGE  DS    CL80                MESSAGE\nNET_HEADER_L EQU   *-NET_IO\nNET_DATA     DS    0C                  I/O AREA\n             MEND\n./ ADD NAME=OPTIONS  0100-09250-09250-1028-00003-00003-00000-MACLIB\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         SUTLOPT TRACE=ON\n./ ADD NAME=PARSEREQ 0100-09138-09138-1055-00016-00016-00000-MACLIB\n         MACRO\n         PARSEREQ &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').LBL0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE_REQ     DSECT\n              AGO  .LBL0020\n.LBL0010      ANOP\nPARSE_REQ     DS   0A\n.LBL0020      ANOP\nPARSE_LENGTH  DS   H                        LENGTH OF OUTPUT\nPARSE_IN      DS   CL80                     INPUT STRING\nPARSE_OUT     DS   CL80                     OUTPUT STRING\nPARSE_REQ_L   EQU  *-PARSE_REQ\n         MEND\n./ ADD NAME=PRTBLOK  0100-09138-09138-1639-00023-00023-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PRINTER REQUEST BLOCK                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         PRTBLOK &DSECT=YES\n             AIF   ('&DSECT' EQ 'YES').LBL0010\nPRTBLOK      DS    0A\n             AGO   .LBL0020\n.LBL0010     ANOP\nPRTBLOK      DSECT\n.LBL0020     ANOP\nPRT_EYE      DS    CL8                 EYECATCHER\nPRT_NEXT     DS    A                   NEXT BLOCK ON THE CHAIN\nPRT_COMMAND  DS    C                   COMMAND\n$PRT_HEAD    EQU   C'H'                .. PRINT HEADING\n$PRT_PRINT   EQU   C'P'                .. PRINT\nPRT_CC       DS    C                   CARRIAGE CONTROL\nPRT_MSGID    DS    CL11                MESSAGE ID\nPRT_DATA     DS    CL120               PRINT DATA\nPRTBLOKL     EQU   *-PRTBLOK\n         MEND\n./ ADD NAME=PSDATA   0103-09146-09169-1551-00019-00019-00000-MACLIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPS_HEADER              DS    0C\nPS_NBR                 DS    XL2   NBR OF PROCESSES RETURNED\nPS_HEADER_L            EQU   *-PS_HEADER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPS_DATA                DS    0C    INFO PER FILE SYSTEM\nPS_PID                 DS    XL4   PROCESS ID\nPS_PPID                DS    XL4   PARENT PROCESS ID\nPS_SIZE                DS    XL4   TOTAL SIZE\nPS_START_TIME          DS    XL4   TIME PROCESS STARTED\nPS_USER_TIME           DS    XL4   USER CPU TIME\nPS_SYSTEM_TIME         DS    XL4   SYSTEM CPU TIME\nPS_IO                  DS    XL4   NBR OF I/O'S\nPS_COMMAND             DS    CL256 PATH\nPS_DATA_L              EQU   *-PS_DATA\n./ ADD NAME=REGEQU   0100-09250-09250-1028-00016-00016-00000-MACLIB\nR0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n./ ADD NAME=STCCOMM  0123-09138-09159-1120-00172-00128-00000-MACLIB\n         MACRO\n         STCCOMM &TYPE=\n*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO                                  *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nSTCCOMM  CSECT\nSTCCOMM  AMODE 31\nSTCCOMM  RMODE ANY\n         AGO   .NODSECT\n.DSECT   ANOP\nSTCCOMM  DSECT\n.NODSECT ANOP\n         COMMCOMM COMMNAME=STCCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*                     MODULE ENTRY POINTS                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n                       DC   CL8'STCATTN'\nAATTN                  DC   A(0)            VTAM ATTN EXIT ENTRY POINT\n                       DC   CL8'STCCOMM'\nACOMM                  DC   A(STCCOMM)      COMMON MODULE\n                       DC   CL8'STCCONS'\nACONS                  DC   A(0)            CONSOLE COMMUNICATION\n                       DC   CL8'STCLRAD'\nALRAD                  DC   A(0)            VTAM LERAD EXIT ENTRY POINT\n                       DC   CL8'STCMAIN '\nAMAIN                  DC   A(0)            MAINLINE MODULE ENTRY POINT\n                       DC   CL8'STCNET  '\nANET                   DC   A(0)            NETWORK FUNCTIONS\n                       DC   CL8'STCPRTQ'\nAPRTQ                  DC   A(0)            PRINT QUEUING\n                       DC   CL8'STCPRTS'\nAPRTS                  DC   A(0)            PRINT SUBTASK ENTRY POINT\n                       DC   CL8'STCTCPIP'\nATCPIP                 DC   A(0)            USER TCPIP FUNCTIONS\n                       DC   CL8'TCPIPSUB'\nATCPIPSUB              DC   A(0)            TCPIP SUBTASK ENTRY POINT\n                       DC   CL8'STCVTAM '\nAVTAM                  DC   A(0)            USER VTAM FUNCTIONS\n                       DC   CL8'VTAMSUB '\nAVTAMSUB               DC   A(0)            VTAM SUBTASK ENTRY POINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_DXD_ADDRESS       DS   A               MAIN TASK'S WORK AREA\nCOMM_DXD_LENGTH        DS   F               MAIN TASK'S WORK AREA SIZE\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_USERS             DC   A(0)            USER CHAIN\n                       DC   A(0)\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_ACB               DC   A(0)            VTAM ACB'S ADDRESS\nCOMM_EXLST             DC   A(0)            EXIT LIST'S ADDRESS\nCOMM_NET_ECB           DC   A(0)            ECB POSTED BY ATTN OR TCPIP\nCOMM_TERM_ECB          DC   A(0)            TERMINATE ECB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PRINT SUBTASK CONTROL                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT_TCB                DC   A(0)            TCB ADDRESS\nPRT_REQ                DC   A(0)            REQUEST QUEUE\nPRT_TERM_ECB           DC   A(0)            TERMINATION ECB\nPRT_WORK_ECB           DC   A(0)            WORK TO DO ECB\nPRT_WORK_AREA          DC   A(0)            WORK AREA ADDRESS\nPRT_WORK_AREA_LENGTH   DC   F'0'            WORK AREA LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*          CONSOLE SUBTASK CONTROL                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCONS_TCB               DC   A(0)            TCB ADDRESS\nCONS_TERM_ECB          DC   A(0)            TERMINATION ECB\nCONS_WORK_ECB          DC   A(0)            CONSOLE ECB ADDRESS\nCONS_SYSTEM_ECB        DC   A(0)            ECB POSTED BY SYSTEM\nCONS_WORK_AREA         DC   A(0)            WORK AREA ADDRESS\nCONS_WORK_AREA_LENGTH  DC   F'0'            WORK AREA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TCPIP SUBTASK CONTROL                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nTCPIP_TCB              DC   A(0)            TCB ADDRESS\nTCPIP_TERM_ECB         DC   A(0)            TERMINATION ECB\nTCPIP_WORK_ECB         DC   A(0)            WORK ECB ADDRESS\nTCPIP_WORK_AREA        DC   A(0)            WORK AREA ADDRESS\nTCPIP_WORK_AREA_LENGTH DC   F'0'            WORK AREA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*          VTAM SUBTASK CONTROL                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM_TCB               DC   A(0)            TCB ADDRESS\nVTAM_TERM_ECB          DC   A(0)            TERMINATION ECB\nVTAM_WORK_ECB          DC   A(0)            WORK ECB ADDRESS\nVTAM_WORK_AREA         DC   A(0)            WORK AREA ADDRESS\nVTAM_WORK_AREA_LENGTH  DC   F'0'            WORK AREA ADDRESS\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_TCPIP_CONNECTIONS DC   F'0'\nCOMM_PORT              DC   H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n                       CLIENT PREFIX=COMM_MAIN\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_APPL_LENGTH       DC   AL1(L'COMM_APPL_NAME)\nCOMM_APPL_NAME         DC   CL8' '          OUR VTAM APPL ID\nCOMM_MAX_LINES         DC   PL3'&MAXL'      LINES PER PAGE ON SYSOUT\n\nCOMM_FLAG              DC   X'00'           GLOBAL FLAGS\n$ABEND                 EQU  X'80'           .. ABEND AT END OF JOB\n$ABORT                 EQU  X'40'           .. SERIOUS ERROR, ABORT\n\nCOMM_TASKS             DC   X'00'           SUBTASKS ACTIVE\n$TASKS_PRINT           EQU  X'80'           .. PRINT SUBTASK\n$TASKS_CONSOLE         EQU  X'40'           .. CONSOLE SUBTASK\n$TASKS_VTAM            EQU  X'20'           .. VTAM SUBTASK\n$TASKS_TCPIP           EQU  X'10'           .. TCPIP SUBTASK\n\nCOMM_EOJ               DC   X'00'           EOJ FLAGS\n$EOJ1                  EQU  X'80'           .. NO NEW USER SESSIONS\n$EOJ2                  EQU  X'40'           .. NO SESSIONS ACTIVE\n$EOJ3                  EQU  X'20'           .. ACB CLOSED\n$EOJ4                  EQU  X'10'           ..\n$EOJ5                  EQU  X'08'           ..\n$EOJ6                  EQU  X'04'           ..\n$EOJ7                  EQU  X'02'           ..\n$EOJ8                  EQU  X'01'           ..\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_BLANKS            DC   CL256' '        CONSTANT\nCOMMEND                EQU  *\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  TRENTRY\n         COPY  MODPRFX\n         MEND\n./ ADD NAME=SUTLOPT  0100-09138-09138-1356-00010-00010-00000-MACLIB\n         MACRO\n         SUTLOPT &MAXLINE=60,         LINES PER PAGE ON SYSOUT         +\n               &TRSIZE=1000,          NUMBER OF TRACE TABLE ENTRIES    +\n               &TRACE=ON              INTERNAL TRACE CONTROL\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n&MAXL    SETA  &MAXLINE\n&TRSZ    SETA  &TRSIZE\n&TROPT   SETC  '&TRACE'\n         MEND\n./ ADD NAME=SUTLSAVE 0100-09139-09139-1101-00021-00021-00000-MACLIB\n         MACRO\n&NAME    SUTLSAVE &DSECT=NO\n         LCLC   &DNAME\n         AIF    ('&DSECT' EQ 'YES').LBL0010\n         AIF    ('&DSECT' EQ 'NO').LBL0020\n         MNOTE  12,'INVALID ''DSECT'' PARAMETER'\n         MEXIT\n.LBL0010 ANOP\n         AIF    (T'&NAME EQ 'O').LBL001A\n&DNAME   SETC   '&NAME'\n         AGO    .LBL001B\n.LBL001A ANOP\n&DNAME   SETC   'SUTLSAVE'\n.LBL001B ANOP\n&DNAME   DSECT\n.LBL0020 ANOP\nDXD_SAVE DS    18F\nDXD_ID   DS    CL8\nTRDATA1  DS    CL8\nTRDATA2  DS    CL8\n         MEND\n./ ADD NAME=TRENTRY  0100-09250-09250-1028-00012-00012-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TRACE TABLE ENTRY                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nTRENTRY  DSECT\nTRETCB   DS    XL4                 TCB ADDRESS\nTREMOD   DS    CL4                 MODULE SUFFIX\nTREID    DS    CL8                 TRACE ID\nTREDATA1 DS    CL8                 TRACE DATA 1\nTREDATA2 DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY           ENTRY LENGTH\n./ ADD NAME=TSOCOMM  0112-09138-09169-1425-00153-00133-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*          TSO COMMON AREA MAPPING MACRO                              *\n*                                                                     *\n*     This macro will generate either the 'common' module CSECT or    *\n*     a DSECT to map the 'common' module.  'Common' is used for       *\n*     constants and work areas that are required by several modules   *\n*     allowing some elimination of duplicated data and to allow       *\n*     inter-module communication.                                     *\n*                                                                     *\n*     The trace table code is also incorporated into the 'common'     *\n*     area.                                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         TSOCOMM &TYPE=\n         GBLA  &MAXL,&TRSZ\n         GBLC  &TROPT\n         AIF   ('&TYPE' EQ 'CSECT').CSECT\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n         MNOTE 12,'INVALID TYPE'\n         MEXIT\n.CSECT   ANOP\nTSOCOMM                CSECT\nTSOCOMM                AMODE   31\nTSOCOMM                RMODE   ANY\n                       AGO     .NODSECT\n.DSECT                 ANOP\nTSOCOMM                DSECT\n.NODSECT               ANOP\n                       COMMCOMM COMMNAME=TSOCOMM\n*---------------------------------------------------------------------*\n*                                                                     *\n*               MODULE ENTRY POINTS                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n                       DC    CL8'TSOCOMM'\nACOMM                  DC    A(TSOCOMM)     COMMON MODULE\n                       DC    CL8'TSODISP'\nADISP                  DC    A(0)           DYNAMIC AREA DISPLAY\n                       DC    CL8'TSOLRAD'\nALRAD                  DC    A(0)           LERAD EXIT\n                       DC    CL8'TSOMAIN'\nAMAIN                  DC    A(0)           TSO MAINLINE MODULE\n                       DC    CL8'TSOMENU'\nAMENU                  DC    A(0)           TSO MENU DATA\n                       DC    CL8'TSONET'\nANET                   DC    A(0)           NETWORK FUNCTIONS\n                       DC    CL8'TSOPQRY'\nAPQRY                  DC    A(0)           DYNAMIC AREA PQUERY\n                       DC    CL8'TSOPRSE'\nAPRSE                  DC    A(0)           COMMAND PARSER\n                       DC    CL8'TSOTCPIP'\nATCPIP                 DC    A(0)           TCP/IP INTERFACE\n                       DC    CL8'TSOVARS'\nAVARS                  DC    A(0)           SPF VARIABLE DEFINE/DELETE\n                       DC    CL8'TSOVTAM'\nAVTAM                  DC    A(0)           TSO VTAM FUNCTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 SPF INTEFACE ENTRY POINT                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n                       DC    CL8'ISPLINK'\nAISPLINK               DC    A(0)           SPF INTERFACE ENTRY POINT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                      GLOBAL DATA                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMM_DXD_ADDRESS       DC    A(0)           WORK AREA BASE\nCOMM_ACB               DC    A(0)           ACB'S ADDRESS\nCOMM_RPL               DC    A(0)           RPL'S ADDRESS\nCOMM_RPLX              DC    A(0)           RPL EXTENSION'S ADDRESS\nCOMM_NIB               DC    A(0)           NIB'S ADDRESS\nCOMM_EXLST             DC    A(0)           EXLST'S ADDRESS\nCOMM_IO                DC    A(0)           I/O AREA ADDRESS\nCOMM_TEXT              DC    A(0)           TEXT AREA ADDRESS\nCOMM_TEXT_LENGTH       DC    F'0'           TEXT AREA SIZE\nCOMM_VDATA             DC    A(0)           DYNAMIC AREA ADDRESS\nCOMM_VDATA_LENGTH      DC    F'0'           DYNAMIC AREA SIZE\nCOMM_CURSOR            DC    F'0'           CURSOR POSITION\nCOMM_TEXT_OFFSET       DC    F'0'           OFFSET FOR TEXT\nCOMM_TEXT_LINE_NBR     DC    F'0'           RELATIVE LINE IN TEXT\nCOMM_TEXT_LINES        DC    F'0'           NUMBER OF LINES OF TEXT\nCOMM_TEXT_LINE_LENGTH  DC    F'0'           LINE LENGTH OF TEXT\nCOMM_HOSTNAME_LENGTH   DC    F'0'           HOSTNAME LENGTH\nCOMM_SUTL_PORT         DC    H'0'           SUTL STC'S PORT NUMBER\nCOMM_SOCKET            DC    H'0'           TCP/IP SOCKET\nCOMM_APPL_LENGTH       DC    AL1(L'COMM_APPL_NAME)\nCOMM_APPL_NAME         DC    CL8' '         OUR APPLID\nCOMM_SUTL_APPL         DC    CL8' '         SUTL STC'S APPLID\nCOMM_SUTL_HOSTNAME     DC    CL256' '       SUTL STC'S HOST NAME\nCOMM_CID               DC    XL4'00'        CONVERSATION ID\n\nCOMM_FLAG              DC    X'00'          GLOBAL FLAGS\n$COMM_VTAM             EQU   X'80'          .. USING VTAM\n$COMM_TCPIP            EQU   X'40'          .. USING TCP/IP\n$ABEND                 EQU   X'20'          .. ABEND AT END OF JOB\n$ABORT                 EQU   X'10'          .. SERIOUS ERROR, ABORT\n$VDEF                  EQU   X'08'          .. VDEFINE'S PERFORMED\n$ACB_OPEN              EQU   X'04'          .. ACB IS OPEN\n$SESS_ALLOCATED        EQU   X'02'          .. SESSION ALLOCATED\n\nCOMM_NET_COMMAND       DC    C' '           VTAM COMMAND\n$NET_INIT              EQU   C'I'           .. INITIALIZE\n$NET_RECEIVE           EQU   C'R'           .. ISSUE A RECEIVE\n$NET_SEND              EQU   C'S'           .. ISSUE A SEND\n$NET_CLEANUP           EQU   C'C'           .. CLEAN UP\n\nCOMM_DISPLAY_FLAGS     DC    X'00'          DISPLAY FLAGS\n$NO_SCROLL             EQU   X'80'          .. NO SCROLLING\n$NO_CURSOR             EQU   X'40'          .. NO CURSOR DATA\n$MULTIPLE_SCREENS      EQU   X'20'          .. APP HAS MULTPLE SCREENS\n\nCOMM_PANEL             DC    CL8' '         PANEL NAME\n\nCOMM_RC                DC    X'00'          RETURN CODE\n\nCOMM_BLANKS            DC    CL256' '\n*---------------------------------------------------------------------*\n*                                                                     *\n* Any fields that are defined as SPF variables must be below LVLINE   *\n*                                                                     *\n*---------------------------------------------------------------------*\nLVLINE                 DC    F'0'           LAST VISIBLE LINE\nVWIDTH                 DC    F'0'           DYNAMIC AREA WIDTH\nVCOL                   DC    F'0'           DYNAMIC AREA COLUMN\nVDEPTH                 DC    F'0'           DYNAMIC AREA DEPTH\nVROW                   DC    F'0'           DYNAMIC AREA ROW\nVTYPE                  DC    CL8' '         DYNAMIC AREA TYPE\nZSCROLLN               DC    F'0'           NUMBER OF LINES TO SCROLL\nZSCROLLA               DC    CL8' '         SCROLL AMOUNT\nZVERB                  DC    CL8' '         SPF VERB\nCOMM_USER              DC    CL8' '         USER'S ID\nCOMM_USER_SMF          DC    CL4' '         USER'S SYSTEM'S SMF ID\nCOMM_SUTL_SMF          DC    CL4' '         SUTL STC SYSTEM'S SMF ID\nCOMM_SUTL_SYSTEM_NAME  DC    CL4' '         SUTL STC SYSTEM'S NAME\n\nCOMM_MSG               DS    0CL70          MESSAGE\nCOMM_MSGI              DS    CL11           .. MESSAGE ID\nCOMM_MSGT              DS    CL59           .. MESSAGE TEXT\nZCMD                   DS    CL80           SPF COMMAND AREA\nCOMM_END               EQU   *\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n          COPY  TRENTRY\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         COPY  MODPRFX\n         MEND\n./ ADD NAME=USERBLOK 0118-09138-09160-0834-00058-00033-00000-MACLIB\n         MACRO\n         USERBLOK\nUSERBLOK            DSECT\nUSER_NEXT           DS    A        NEXT USER BLOCK\nUSER_PREV           DS    A        PREVIOUS USER BLOCK\nUSER_EYE            DS    CL8      EYECATCHER\nUSER_ID             DS    CL8      USER'S ID\nUSER_SMF            DS    CL4      USER'S SYSTEM'S SMF ID\nUSER_LU             DS    CL8      USER'S LU NAME\nUSER_CID            DS    XL4      SESSION'S CID\nUSER_COMM           DS    A        STCCOMM ADDRESS\nUSER_TCB            DS    A        TCB ADDRESS\nUSER_DXD_ADDR       DS    A        WORK AREA BASE ADDRESS\nUSER_DXD_LENGTH     DS    A        WORK AREA BASE ADDRESS\nUSER_NET            DS    A        NETWORK FUNCTIONS ENTRY POINT\nUSER_TCPIP          DS    A        TCP/IP FUNCTIONS ENTRY POINT\nUSER_VTAM           DS    A        VTAM FUNCTIONS ENTRY POINT\nUSER_RPL            DS    A        RPL ADDRESS\nUSER_RPLX           DS    A        RPL EXTENSION ADDRESS\nUSER_IO             DS    A        I/O AREA ADDRESS\nUSER_TERM_ECB       DS    A        TERMINATION ECB\n\nUSER_NET_ECB        DS    A        ECB FOR NETWORK FUNCTIONS\n                    DS    XL100    .. WORK AREA FOR TCP/IP\n\nUSER_API_ECB        DS    F        ECB FOR API\nUSER_TAKESOCKET_ECB DS    F        ECB FOR TAKESOCKET\nUSER_RECEIVES       DS    F        NUMBER OF RECEIVES\nUSER_SENDS          DS    F        NUMBER OF SENDS\nUSER_BYTES_SENT     DS    F        TOTAL NUMBER OF BYTES RECEIVED\nUSER_BYTES_RECEIVED DS    F        TOTAL NUMBER OF BYTES SENT\nUSER_TCPIP_GWA      DS    A        TCPIP GLOBAL WORK AREA\n\n                    CLIENT PREFIX=USER\n\nUSER_SOCKET         DS    H        SOCKET DESCRIPTOR\n\nUSER_DATE           DS    XL4      DATE USER CONNECTED\nUSER_TIME           DS    XL4      TIME USER CONNECTED\n\nUSER_IP_ADDRESS     DS    CL15     IP ADDRESS (PRINTABLE FORM)\n\nUSER_STATUS         DS    X        STATUS\n$USER_VTAM          EQU   X'01'    .. USING VTAM\n$USER_TCPIP         EQU   X'02'    .. USING TCP/IP\n$USER_INITIAL       EQU   X'04'    .. INITIAL STATUS\n$USER_ACTIVE        EQU   X'08'    .. USER SUBTASK ATTACHED AND ACTIVE\n$USER_LOST          EQU   X'10'    .. SESSION TO USER LU LOST\n$USER_DEALLOCATE    EQU   X'20'    .. SESSION TO USER DEALLOCATED\n$USER_CLEANUP       EQU   X'40'    .. NET CLEANUP PERFORMED\n\nUSER_NET_COMMAND    DS    X        VTAM COMMAND\n$USER_NET_INIT      EQU   X'01'    .. INITIALIZE\n$USER_RECEIVE       EQU   X'02'    .. ISSUE A RECEIVE\n$USER_SEND          EQU   X'03'    .. ISSUE A SEND\n$USER_NET_CLEANUP   EQU   X'04'    .. CLEAN UP\nUSER_L              EQU   *-USERBLOK\n         MEND\n./ ADD NAME=VARDSECT 0100-09250-09250-1028-00010-00010-00000-MACLIB\n* ------------------------------------------------------------------- *\n*              VARIABLE TABLE ENTRIES                                 *\n* ------------------------------------------------------------------- *\nVARDSECT DSECT\nVARNAME  DS    CL8                   NAME KNOWN TO SPF\nVARLEN   DS    AL4                   VARIABLE LENGTH\nVARFORM  DS    CL8                   VARIABLE FORMAT\nVARID    DS    AL2                   VARIABLE'S 'ID'\nVARDISP  DS    AL2                   DISPLACEMENT TO DATA\nVARL     EQU   *-VARDSECT\n./ ADD NAME=VARREQ   0100-09138-09138-1538-00024-00024-00000-MACLIB\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VARIABLE DEFINE/DELETE REQUEST                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n         VARREQ  &DSECT=YES\n                      AIF   ('&DSECT' EQ 'YES').LBL0010\nVAR_REQ               DS    0A\n                      AGO   .LBL0020\n.LBL0010              ANOP\nVAR_REQ               DSECT\n.LBL0020              ANOP\nVAR_IDS               DS    A         ID LIST ADDRESS\nVAR_TABLE             DS    A         ADDRESS OF VARIABLE TABLE\nVAR_AREA              DS    A         ADDRESS OF VARIABLE DATA AREA\nVAR_NBR               DS    H         NUMBER OF VARIABLES IN ID LIST\nVAR_COMMAND           DS    C         COMMAND\n$VAR_DEFINE_ALL       EQU   X'01'     .. DEFINE (ALL)\n$VAR_DEFINE_SPECIFIC  EQU   X'02'     .. DEFINE (SPECIFIC)\n$VAR_DELETE_SPECIFIC  EQU   X'03'     .. DELETE (SPECIFIC)\n$VAR_DELETE_ALL       EQU   X'04'     .. DELETE (ALL)\nVARR_REQ_L            EQU   *-VAR_REQ\n         MEND\n./ ADD NAME=VDEF     0100-09250-09250-1028-00063-00063-00000-MACLIB\n         MACRO\n         VDEF  &BASE=,               BASE ADDRESS OF VARIABLES AREA    +\n               &NAME=,               NAME DEFINED TO SPF               +\n               &DATA=,               DATA ADDRESS                      +\n               &LENGTH=,             DATA LENGTH                       +\n               &FORM=                DATA FORMAT\n         GBLA  &MAXL,&TRSZ\n         GBLB  &VINIT\n         GBLC  &AREA,&TROPT\n         GBLC  &VDEFGBL(100)\n         LCLA  &SUB\n         AIF   (T'&BASE EQ 'O').LBL0010\n&AREA    SETC  '&BASE'\n&VINIT   SETB  0                     NEW AREA... RESET INIT SWITCH\n         MEXIT\n.LBL0010 ANOP\n         AIF   (&VINIT).LBL0030\n&VINIT   SETB  1\n&SUB     SETA  1\n.LBL0020 ANOP\n&VDEFGBL(&SUB)  SETC ' '\n         AIF   (&SUB EQ 100).LBL0030\n&SUB     SETA   &SUB+1\n         AGO   .LBL0020\n.LBL0030 ANOP\n         AIF   (T'&NAME EQ 'O').ERR0010\n         AIF   (T'&LENGTH  EQ 'O').ERR0020\n         AIF   (T'&FORM    EQ 'O').ERR0030\n&SUB     SETA  1\n.LBL0040 ANOP\n         AIF   ('&VDEFGBL(&SUB)' EQ ' ').LBL0050\n         AIF   ('&VDEFGBL(&SUB)' EQ '&NAME').ERR0040\n         AIF   (&SUB EQ 100).ERR0050\n&SUB     SETA  &SUB+1\n         AGO   .LBL0040\n.LBL0050 ANOP\n&VDEFGBL(&SUB) SETC '&NAME'\n         AIF   ('&AREA' EQ '').ERR0060\n         DC    CL8'&NAME'             NAME KNOWN TO SPF\n         DC    AL4(&LENGTH)           LENGTH\n         DC    CL8'&FORM'             VARIABLE FORMAT\n         DC    AL2(&SUB)              VARIABLE'S 'ID' NUMBER\n         DC    AL2(&DATA-&AREA)       DISPLACEMENT TO DATA\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'NAME IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'LENGTH IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'FORM IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'VARIABLE NAME IS DUPLICATED'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'VDEFGBL IS FULL'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'BASE MUST BE DEFINED BEFORE VARIABLES CAN BE DEFINED+\n               '\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "REXX": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x934\\x9f\\x00\\x934\\x9f\\x18'\\x00W\\x00W\\x00\\x00\\xe2\\xe4\\xe3\\xd3@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-12-15T00:00:00", "modifydate": "1993-12-15T18:27:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "SUTL"}, "text": "./ ADD NAME=SUTL\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/*   Each system's should have its own version of this EXEC because  */\n/*   you will want a different default APPL id.                      */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n#ARGS = ARG()\n\n/* ----------------------------------------------------------------- */\n/*   Set the SUTL_NODE value to whichever STC appl id you want the   */\n/*   users to get if they only enter the EXEC name \"SUTL\".           */\n/* ----------------------------------------------------------------- */\n\nIF #ARGS = 0 THEN\n   SUTL_NODE = default applid          /* Define default APPL id */\nELSE\n   DO\n   PARSE UPPER ARG APPL\n   SUTL_NODE = APPL\n   END\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*   Use one IF statement per name to \"equate\" a name to a STC APPL  */\n/*                                                                   */\n/*   For example assume you have two systems:                        */\n/*                                                                   */\n/*     1) a production system, and SUTL STC applid id is PRODSUTL    */\n/*     2) a test system, and SUTL STC applid is TESTSUTL             */\n/*                                                                   */\n/*    you could use                                                  */\n/*                                                                   */\n/*     IF SUTL_NODE = PROD  THEN                                     */\n/*        SUTL_NODE = PRODSUTL                                       */\n/*                                                                   */\n/*     IF SUTL_NODE = TEST  THEN                                     */\n/*        SUTL_NODE = TESTSUTL                                       */\n/*                                                                   */\n/*    You can use multiple statements for the same system.  If you   */\n/*    have a system in Dallas, TX, you could use                     */\n/*                                                                   */\n/*     IF SUTL_NODE = DALLAS THEN                                    */\n/*        SUTL_NODE = BIGDSUTL                                       */\n/*                                                                   */\n/*     IF SUTL_NODE = BIGD  THEN                                     */\n/*        SUTL_NODE = BIGDSUTL                                       */\n/*                                                                   */\n/*    This would allow the user to enter                             */\n/*                                                                   */\n/*      \"SUTL DALLAS\"                                                */\n/*          or                                                       */\n/*      \"SUTL BIGD\"                                                  */\n/*          or                                                       */\n/*      just \"SUTL\" if the default is set to BIGDSUTL.               */\n/*                                                                   */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nIF SUTL_NODE = name1  THEN\n   SUTL_NODE = applid1\n\nIF SUTL_NODE = name2  THEN\n   SUTL_NODE = applid2\n\nIF SUTL_NODE = name3  THEN\n   SUTL_NODE = applid3\n\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\nADDRESS \"ISPEXEC\" \"SELECT CMD(SUTL1 \"SUTL_NODE\" ) NEWAPPL(SUTL)\"\n\nEXIT (0)\n./ ADD NAME=SUTL1\n/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nPARSE UPPER ARG APPL\n\nADDRESS TSO ISPEXEC \"LIBDEF ISPPLIB DATASET ID('.....ispplib.....')\"\n\nADDRESS TSO ISPEXEC \"SELECT PGM(SUTLTSO) PARM(\" || APPL || \")\"\n\nEXIT (0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SOURCE": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t%\\x0f\\x01\\t%\\x0f\\x101(\\xa3(\\xa3\\x00\\x00\\xe2\\xe4\\xe3\\xd3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-09-07T00:00:00", "modifydate": "2009-09-07T10:31:00", "lines": 10403, "newlines": 10403, "modlines": 0, "user": "SUTL"}, "text": "./ ADD NAME=$CHANGES 0102-09162-09170-1349-00015-00012-00000-SOURCE\nJune   2009  Nearly total overhaul...\n  Changed most labels in the data areas to longer more meaningful names\n  SUTL now requires the HLASM (or later for assembly)\n  Added option to use TCP/IP or VTAM for network communication\n  Changed console module so it uses CONSNAME rather than CONSID on WTO's\n  Fixed I/O count in ACT\n  Data on the ACT display can now be refreshed by pressing ENTER.\n     Previously, this would cause the display to scroll back to the top.\n     Now the user can scroll down and refresh the display\n  Added IPA data to IPL info display\n  Eliminated UCB info display\n  Add Unix process (PS) display\n  Add Unix filesystem (FS) display\n  Corrected numerous logic errors in shutdown/clean up code\n  Corrected too many errors in the comments to list them all\n./ ADD NAME=$CONSOLE 0100-09161-09161-1111-00007-00007-00000-SOURCE\n1             Console Commands\n0You may communicate with the STC from the system console via the MVS\n MODIFY (F) command.\n0There are only two commands that have the same function:\n0  ACTIVE        lists the active SUTL users\n0  USERS         lists the active SUTL users\n0You may shutdown the STC by using the MVS STOP (P) command.\n./ ADD NAME=$DEBUG   0101-09170-09170-1059-00009-00052-00000-SOURCE\n As an aid in debugging, the STC and the TSO/SPF parts both use an\n internal wrap-around trace table.  Each trace entry contains the TCB\n address, CSECT suffix, and an ID.  Trace entries may also include one\n or two 8 byte data items.  Label TRCURR is a full word that always\n has the address of the last trace entry used.  Eyecatchers (1STX, LAST,\n and CURR) are assembled into the \"common area\" and can be searched for\n in a dump (I usually search for 1STX because I haven't found anything\n else that also uses this string).  All modules use register 11 as base,\n and register 12 is always the address of the \"common area\".\n./ ADD NAME=$DOC     0101-09161-09170-1057-00092-00124-00000-SOURCE\n1             System Utility (SUTL)\n0SUTL is a network application that allows a TSO user to obtain\n information about executing jobs, the APF list, IPL date/time/SYSRES,\n link list, etc.  Most of this information is usually available via\n other utilities already in use, so why bother going to the trouble of\n 're-inventing' this wheel and adding network over-head in the process?\n Being a network application means that a TSO user can get info from a\n system that they are not logged on to.  If you have multiple\n processors or LPARs, you can \"watch\" executing jobs on any of the\n systems no matter which system you are logged on to.\n0SUTL consists of two basic components, (1) a data collector that would\n probably be best to run as a started task (STC) and (2) the TSO/SPF\n code that sends requests to the data collector and displays the data.\n0The data collector (STC) should be run on each system.\n0The data collector does not require APF authoriztion.\n0In order for the data collector to obtain info for all active\n \"unix\" processes, it needs to run with UID 0.\n0If using VTAM, each data collector and each active TSO user will\n require a VTAM APPL.  These APPL IDs will need to be defined to\n VTAM and the IDs used by the TSO users will need to be added to the\n source for member TSOACB before assembling/linking SUTL.\n0If using TCP/IP, you will need to decide which PORT number the STCs\n should BIND and LISTEN on.\n1             Installing SUTL\n0 1Allocate libraries:\n                     DCB                         3380 tracks   Dir\n    EXEC         RECFM=FB,LRECL=80,BLKSIZE=3120       1          1\n    ISPPLIB      RECFM=FB,LRECL=80,BLKSIZE=3120       2          2\n    JCLLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       2          5\n    MACLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       5         10\n    OBJECT       RECFM=FB,LRECL=80,BLKSIZE=3120      10          5\n    SOURCE       RECFM=FB,LRECL=80,BLKSIZE=3120      15         10\n0     If you want to keep SUTL in its own LOADLIB:\n    LOADLIB      RECFM=U,BLKSIZE=6144                 5          5\n0 2If using VTAM, edit member TSOACB in the SOURCE library:\n     .  Code one DC statement for each APPL id available for TSO users.\n0 3Edit member ASM in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the MACLIB DSN to the name you used in STEP 1.\n     .  Change the SOURCE DSN to the name you used in STEP 1.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n0 4Submit member ASM to assemble all the SUTL modules.\n0 5Edit member LINK in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n     .  Change the LOADLIB DSN to the name of an existing LOADLIB or\n        to the name you used in STEP 1.\n0 6Submit member LINK to link edit the SUTL load modules.\n0 7If using VTAM, add APPL ids to VTAM\n   For example:\n     SUTL     APPL  APPC=YES,VPACING=7             for the STC\n     SUTLU1   APPL  ACBNAME=SUTLU1,APPC=YES        for TSO users\n     SUTLU2   APPL  ACBNAME=SUTLU2,APPC=YES             .\n     SUTLU3   APPL  ACBNAME=SUTLU3,APPC=YES             .\n0 8Edit member SUTLPARM in the JCL library\n     . If using VTAM, add an APPLID statement using ID from step 7.\n     . If using TCP/IP, add a PORT statement.\n0 9Add JCL member SUTLSTC to a proclib.\n010If you use RACF or some other security system, permit the STC to\n   at least READ level access to the JCL library (for the parm member).\n011If using VTAM, copy EXEC member SUTLVTAM to a REXX exec library\n   available to your users.  Rename the the EXEC from SUTLVTAM to SUTL.\n   Edit the SUTL EXEC.  Add statements to 'equate' system names to\n   the APPLID used by the SUTLSTC on that system.\n\n   If using TCP/IP, copy EXEC member SUTLIP to a REXX exec library\n   available to your users.  Rename the EXEC from SUTLIP to SUTL.\n   Edit the SUTL EXEC.  Add statements to 'equate' system names to\n   the HOSTNAME for that system.\n012Copy EXEC member SUTL1 to the same library used in step 11.\n   Edit EXEC member SUTL1.\n   Change the DSN for the ISPPLIB.\n013Start up the STC.\n014You should be able to use SUTL by entering \"SUTL\" or \"SUTL system\"\n   from SPF option 6.\n1             Console Commands\n0You may communicate with the STC from the system console via the MVS\n MODIFY (F) command.\n0There are only two commands that have the same function:\n0  ACTIVE        lists the active SUTL users\n0  USERS         lists the active SUTL users\n0You may shutdown the STC by using the MVS STOP (P) command.\n1             Program description\n0As an aid in debugging, the STC and the TSO/SPF parts both use an\n internal wrap-around trace table.  Each trace entry contains the TCB\n address, CSECT suffix, and an ID.  Trace entries may also include one\n or two 8 byte data items.  Label TRCURR is a full word that always\n has the address of the last trace entry used.  Eyecatchers (1STX, LAST,\n and CURR) are assembled into the \"common area\" and can be searched for\n in a dump (I usually search for 1STX because I haven't found anything\n else that also uses this string).  All modules use register 12 as base,\n and register 11 is always the address of the \"common area\".\n./ ADD NAME=$INSTALL 0100-09161-09161-1108-00052-00052-00000-SOURCE\n1             Installing SUTL\n0 1 Allocate libraries:\n                     DCB                         3380 tracks   Dir\n    EXEC         RECFM=FB,LRECL=80,BLKSIZE=3120       1          1\n    ISPPLIB      RECFM=FB,LRECL=80,BLKSIZE=3120       2          2\n    JCLLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       2          5\n    MACLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       5         10\n    OBJECT       RECFM=FB,LRECL=80,BLKSIZE=3120      10          5\n    SOURCE       RECFM=FB,LRECL=80,BLKSIZE=3120      15         10\n0     If you want to keep SUTL in its own LOADLIB:\n    LOADLIB      RECFM=U,BLKSIZE=6144                 5          5\n0 2 If using VTAM, edit member TSOACB in the SOURCE library:\n     .  Code one DC statement for each APPL id available for TSO users.\n0 3 Edit member ASM in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the MACLIB DSN to the name you used in STEP 1.\n     .  Change the SOURCE DSN to the name you used in STEP 1.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n0 4 Submit member ASM to assemble all the SUTL modules.\n0 5 Edit member LINK in the JCL library:\n     .  Add a valid JOB card.\n     .  Change the OBJECT DSN to the name you used in STEP 1.\n     .  Change the LOADLIB DSN to the name of an existing LOADLIB or\n        to the name you used in STEP 1.\n0 6 Submit member LINK to link edit the SUTL load modules.\n0 7 If using VTAM, add APPL ids to VTAM\n    For example:\n     SUTL     APPL  APPC=YES,VPACING=7             for the STC\n     SUTLU1   APPL  ACBNAME=SUTLU1,APPC=YES        for TSO users\n     SUTLU2   APPL  ACBNAME=SUTLU2,APPC=YES             .\n     SUTLU3   APPL  ACBNAME=SUTLU3,APPC=YES             .\n0 8 Edit member SUTLPARM in the JCL library\n     . If using VTAM, add an APPLID statement using ID from step 7.\n     . If using TCP/IP, add a PORT statement.\n0 9 Add JCL member SUTLSTC to a proclib.\n010 If you use RACF or some other security system, permit the STC to\n    at least READ level access to the JCL library (for the parm member).\n011 If using VTAM, copy EXEC member SUTLVTAM to a REXX exec library\n    available to your users.  Rename the the EXEC from SUTLVTAM to SUTL.\n    Edit the SUTL EXEC.  Add statements to 'equate' system names to\n    the APPLID used by the SUTLSTC on that system.\n\n    If using TCP/IP, copy EXEC member SUTLIP to a REXX exec library\n    available to your users.  Rename the EXEC from SUTLIP to SUTL.\n    Edit the SUTL EXEC.  Add statements to 'equate' system names to\n    the HOSTNAME for that system.\n012 Copy EXEC member SUTL1 to the same library used in step 11.\n    Edit EXEC member SUTL1.\n    Change the DSN for the ISPPLIB.\n013 Start up the STC.\n014 You should be able to use SUTL by entering \"SUTL\" or \"SUTL system\"\n    from SPF option 6.\n./ ADD NAME=$TCPIP   0101-09161-09161-1445-00019-00043-00000-SOURCE\n0At start up the main task will have attached a TCP/IP subtask.\n0The main task will then enter a WAIT.\n0The TCP/IP subtask will have BOUND to the PORT given in the start\n up parameters and will have a ACCEPT pending.  In TCP/IP lingo,\n this means it is \"listening\" on the PORT.\n0When a user \"logs on\", TCP/IP creates a SOCKET and POSTs the ECB\n used on the ACCEPT.  This 'wakes up' the TCP/IP subtask.  The TCP/IP\n subtask will build a USERBLOK and add it to the users chain.  The\n TCP/IP subtask will then POST the ECB the main task is WAITing on.\n The main task will scan the user block chain and find the new user.\n The main task will attach a subtask (STCUSER).  Each user has their\n own subtask.  The TCP/IP subtask then waits for the user subtask to\n initialize.  Once the new subtask has its own TCP/IP environment\n established, it notifies the TCP/IP subtask that it is ready to\n take ownership of the connection to the user.  The TCP/IP subtask\n will issue a GIVESOCKET.  The user subtask will issue a TAKESOCKET.\n Once the GIVESOCKET/TAKESOCKET process has completed, the data flow\n is directly between the TSO user and the user subtask.  The TCP/IP\n subtask is no longer involved.\n./ ADD NAME=$TODO    0102-09161-09162-0742-00017-00012-00000-SOURCE\nAdd a function to display ENQ (GRS) info\n. for a given job\n. for a given resource\n. only those that have contention\n\nDisplay console info?\n. This does not mean I want to display what is on a console,\n  just the status of the consoles.  That is their roll mode,\n  how many buffers are queued, other info..?\n\nAdd a function for displaying the low and high addresess of\n  SQA, CSA, etc\n\nSave some SPF variables to the user's profile via VGET/VPUT\nFor the ACT function the type of address spaces, prefix, user\n\n\n./ ADD NAME=$VTAM    0101-09161-09170-1050-00030-00026-00000-SOURCE\n@During start up, if the start up parms include an APPL statement,\n the main task will ATTACH the VTAM subtask.  The VTAM subtask\n will OPEN an ACB using the specified APPL name and enable its\n ATTNENTION exit.\n0Once the STC has completed inialization, it enters a WAIT.\n0When a user \"logs on\", the ATTENTION exit is driven.  The ATTENTION\n exit allocates a control block (USERBLOK) and wakes up (POSTs) the\n main task.  The main task scans the USERBLOKs and will find the new\n USERBLOK.  The main task will ATTACH a subtask (module USERSTC).\n Each user will have his/her own subtask.  The main task will then\n return to its WAIT.  The user subtask (STCUSER) will issue a RECEIVE\n and WAIT for the TSO user (module SUTLTSO) to send it a request for\n info.  When the TSO user does request info, STCUSER determines what\n function the user is requesting and passes control to the routines\n that process that function.  When the function processor completes,\n STCUSER then issues a VTAM SEND to return the data to the TSO user,\n then issues another RECEIVE and WAITs for the next request from the\n TSO user.  When the user \"logs off\", the ATTENTION exit is driven\n again.  The ATTENTION exit will flag the status in the USERBLOK to\n indicate the user has broken the session and wakes up (POSTs) the\n main task.  The main task will scan the USERBLOKs and find the \"lost\"\n session.  The main task will wake up (POST) the user's subtask.  The\n user subtask (STCUSER) will find that the session is gone and will\n perform \"clean-up\" and terminate.  When the user subtask terminates,\n the main task will DETACH it, and then return to its WAIT.\n0Since the main task is involved only when users \"log on\" or \"log off\",\n the CPU utilization of the main task is extremely low.  Also since each\n user has their own subtask, each will be independently dispatchable.\n If your processor has multiple CPUs, SUTL can process multiple user\n requests concurrently.\n./ ADD NAME=STCACT   0108-09139-09173-0839-00290-00290-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCACT                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect information for the active regions display.               *\n*   The user may select regions to be displayed by 3 different        *\n*   criteria 1) the region type (JOB, STC, or TSU), 2) by job name    *\n*   prefix, and 3) user id prefix.                                    *\n*                                                                     *\n*   Data returned is: CPU utilization percentage, number of regions,  *\n*         and per region a) job name, b) step name, c) proc step name,*\n*         d) region type, e) swap status, f) number of real page      *\n*         frames, g) number of I/O's, h) TCB time, and i) SRB time.   *\n*                                                                     *\n*   The number of regions that can be returned is limited by the I/O  *\n*   area size (VTAM limits the length to 32767).  If the number of    *\n*   regions that matches the search criteria exceeds the I/O area     *\n*   size, the return code in the I/O area will be set to 4 to inform  *\n*   the TSO user that the data was truncated.                         *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCACT   CSECT\nSTCACT   AMODE 31\nSTCACT   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMM AREA BASE\n         USING STCACT,R11                     DEFINE PROGRAM BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     ACT0000\nMODID    DC    CL8'STCACT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nACT0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA BASE\n         USING DXDACT,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    ACT0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*              BUILD DATA                                             *\n* ------------------------------------------------------------------- *\nACT0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         XC    NET_RC,NET_RC                  SET RC TO ZERO\n         L     R5,CVTPTR                      CVT ADDRESS\n         S     R5,=A(CVTMAP-CVTFIX)           CVT PREFIX\n         USING CVTFIX,R5                      DEFINE BASE\n         L     R1,CVTOPCTP                    RMCT ADDRESS FROM CVT\n         L     R1,4(,R1)                      CCT ADDRESS FROM RMCTCCT\n         MVC   ACT_CPU_BUSY,102(R1)           CPU UTILIZATION\n         XC    ACT_NBR_REGIONS,ACT_NBR_REGIONS                          ETURNED\n         L     R1,CVTASVT                     ASVT ADDRESS FROM CVT\n         USING ASVT,R1                        DEFINE BASE\n         L     R3,ASVTMAXU                    MAXIMUM NUMBER OF ENTRIES\n         LA    R4,ASVTFRST                    FIRST ENTRY\n         LA    R7,NET_HEADER_L+ACT_HEADER_L   LENGTH TO THIS POINT\n         LA    R8,ACT_REGION                  FIRST REGION IN OUTPUT\n         USING ACT_REGION,R8                  DEFINE BASE\nACT0020  DS    0H\n         ICM   R2,15,0(R4)                    ASCB FROM ASVT ENTRY\n         BM    ACT0220                        ADDRESS SPACE NOT IN USE\n         USING ASCB,R2                        DEFINE ASCB BASE\n         XC    ACT_REGION(ACT_REGION_L),ACT_REGION\n         MVC   ACT_ASID,ASCBASID              ASID\n         MVC   ACT_NAME,STARTING              ASSUME 'STARTING'\n         ICM   R6,15,ASCBJBNI                 JOB NAME ADDRESS\n         BZ    ACT0030                        NO JOB NAME\n         MVC   ACT_NAME,0(R6)                 COPY JOB NAME\n         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?\n         BH    ACT0050                        YES\n         S     R6,=A(CHKEY-CSCB)              START OF CSCB\n         B     ACT0050                        DETERMINE TYPE\nACT0030  DS    0H\n         ICM   R6,15,ASCBJBNS                 STC NAME ADDRESS\n         BZ    ACT0220                        NO STC NAME\n         MVC   ACT_NAME,0(R6)                 COPY STC NAME\n         CLI   ACT_NAME,C'*'                  MASTER SCHEDULER?\n         BE    ACT0040                        YES\n         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?\n         BH    ACT0050                        YES\n         S     R6,=A(CHCLS-CSCB)              START OF CSCB\n         B     ACT0060\nACT0040  DS    0H\n         SR    R6,R6                          NO CSCB\n         B     ACT0060\nACT0050  DS    0H\n         S     R6,=A(CHNAME-CSCX)             START OF CSCX\n         USING CSCX,R6                        DEFINE BASE\n         L     R6,CHCSCBP                     CSCB ADDRESS FROM CSCX\n         DROP  R6\nACT0060  DS    0H\n         USING CSCB,R6                        DEFINE BASE\n         L     R1,ASCBOUCB                    OUCB'S ADDRESS FROM ASCB\n         USING OUCB,R1                        DEFINE BASE\n         ICM   R15,15,ASCBJBNI                BATCH JOB?\n         BNZ   ACT0110                        YES\n         TM    OUCBYFL,OUCBSTT                STARTED TASK?\n         BO    ACT0070                        YES\n         TM    OUCBYFL,OUCBLOG                TSO USER?\n         BO    ACT0080                        YES\n         TM    OUCBYFL,OUCBMNT                MOUNT?\n         BO    ACT0090                        YES\n         ABEND $U0009,DUMP,,USER              SHOULD NEVER HAPPEN\nACT0070  DS    0H\n         ITRACE ID=STC\n         MVI   ACT_REGION_TYPE,$ACT_STC       STARTED TASK\n         B     ACT0100\nACT0080  DS    0H\n         ITRACE ID=TSOUSER\n         MVI   ACT_REGION_TYPE,$ACT_TSO       TSO USER\n         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?\n         BH    ACT0100                        YES\n         LA    R6,8(,R6)                      START OF CSCB\n         B     ACT0100\nACT0090  DS    0H\n         ITRACE ID=MOUNT\n         MVI   ACT_REGION_TYPE,$ACT_MOUNT     MOUNT\nACT0100  DS    0H\n         LTR   R6,R6                          CSCB PRESENT?\n         BZ    ACT0130                        NO\n         CLI   CHKEY,X'40'                    STEP NAME PRESENT?\n         BNH   ACT0120                        NO\n         MVC   ACT_STEP,CHKEY                 SET STEP NAME\n         TM    OUCBYFL,OUCBLOG                TSO USER?\n         BNO   ACT0120                        NO\n         CLI   CHCLS,X'40'                    PROC PRESENT?\n         BNH   ACT0130                        NO\n         MVC   ACT_PROC_STEP,CHCLS            COPY PROC NAME\n         B     ACT0130\nACT0110  DS    0H\n         MVI   ACT_REGION_TYPE,$ACT_BATCH     REGION TYPE IS BATCH JOB\n         CLI   CHSTEP,X'40'                   STEP NAME PRESENT?\n         BNH   ACT0120                        NO\n         MVC   ACT_STEP,CHSTEP                SET STEP NAME\nACT0120  DS    0H\n         CLI   CHPROCSN,X'40'                 PROC STEP NAME PRESENT?\n         BNH   ACT0130                        NO\n         MVC   ACT_PROC_STEP,CHPROCSN         SET PROC STEP NAME\nACT0130  DS    0H\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB\n         BZ    ACT0140                        NOT IN TRANSITION\n         MVI   ACT_SWAP_STATUS,$ACT_SWAP_TRANSITION\n         B     ACT0180\nACT0140  DS    0H\n         TM    OUCBQFL,OUCBLSW                LOGICAL SWAP?\n         BO    ACT0150                        YES\n         TM    ASCBRCTF,ASCBOUT               SWAPPED OUT?\n         BO    ACT0160                        YES\n         CLC   OUCBNDS,=X'0000'               NON-SWAPPABLE?\n         BE    ACT0170                        YES\n         MVI   ACT_SWAP_STATUS,$ACT_SWAP_IN   SWAPPED IN\n         B     ACT0180\nACT0150  DS    0H\n         MVI   ACT_SWAP_STATUS,$ACT_SWAP_LOGICAL  LOGICALLY SWAPPED\n         B     ACT0180\nACT0160  DS    0H\n         MVI   ACT_SWAP_STATUS,$ACT_SWAP_OUT  SWAPPED OUT\n         B     ACT0180\nACT0170  DS    0H\n         MVI   ACT_SWAP_STATUS,$ACT_SWAP_NONSWAP\nACT0180  DS    0H\n         MVC   ACT_USER,OUCBUSRD              COPY USER NAME\n         MVC   ACT_SERVICE_UNITS,OUCBWMS      COPY SERVICE UNITS\n         MVC   ACT_IO,ASCBIOSC                COPY NBR OF I/O'S\n         MVC   ACT_TCB_TIME,ASCBEJST          COPY TCB TIME\n         MVC   ACT_SRB_TIME,ASCBSRBT          COPY SRB TIME\n         L     R1,ASCBRSME                    RAX CONTROL BLOCK ADDRESS\n         USING RAX,R1                         DEFINE BASE\n         MVC   ACT_REAL_FRAMES,RAXFMCT        COPY NUMBER OF FRAMES\n         CLI   ACT_REGION_TYPES,$ACT_ALL      ALL ADDRESS SPACE TYPES?\n         BE    ACT0190                        YES\n         CLC   ACT_REGION_TYPE,ACT_REGION_TYPES    TYPE USER WANTS?\n         BNE   ACT0220                        NO\nACT0190  DS    0H\n         SR    R1,R1                          CLEAR REGISTER\n         ICM   R1,3,ACT_NAME_PREFIX_LENGTH    JOB NAME PREFIX LENGTH\n         BZ    ACT0200                        NO PREFIX IN EFFECT\n         BCTR  R1,0                           FOR EXECUTE\n         EX    R1,JOBCLC                      PREFIX MATCH?\n         BNE   ACT0220                        NO\nACT0200  DS    0H\n         ICM   R1,3,ACT_USER_PREFIX_LENGTH    USER PREFIX LENGTH\n         BZ    ACT0210                        NO PREFIX IN EFFECT\n         BCTR  R1,0                           FOR EXECUTE\n         EX    R1,USERCLC                     PREFIX MATCH?\n         BNE   ACT0220                        NO\nACT0210  DS    0H\n         ICM   R1,3,ACT_NBR_REGIONS           NUMBER OF ADDRESS SPACES\n         CH    R1,MAX#                        ALREADY FULL?\n         BE    ACT0230                        YES.. SET RC\n         LA    R1,1(,R1)                      PLUS 1\n         STCM  R1,3,ACT_NBR_REGIONS           SAVE NEW TOTAL\n         LA    R7,ACT_REGION_L(,R7)           PLUS LENGTH\n         LA    R8,ACT_REGION_L(,R8)           NEXT IN I/O AREA\nACT0220  DS    0H\n         LA    R4,4(,R4)                      NEXT ADDRESS SPACE\n         BCT   R3,ACT0020                     LOOP\n         ITRACE ID=DONE\n         B     ACT0240\nACT0230  DS    0H\n         ITRACE ID=OVERFLOW                   I/O AREA OVERFLOW\n         MVC   NET_RC,X0004                   SET RETURN CODE\nACT0240  DS    0H\n         ITRACE ID=DATABILT,                  DATA HAS BEEN BUILT      +\n               RDATA1=R7                      .. DATA LENGTH\n         STH   R7,NET_LENGTH                  SET LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nJOBCLC   CLC   ACT_NAME(0),ACT_NAME_PREFIX    CHECK JOB NAME PREFIX\nUSERCLC  CLC   ACT_USER(0),ACT_USER_PREFIX    CHECK USER NAME PREFIX\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDACT)                      DISPLACEMENT TO WORK AREA\nMAX#      DC   Y((32760-(ACT_REGION-NET_IO))/ACT_REGION_L)\nX0004     DC   X'0004'\nSTARTING  DC   CL8'STARTING'\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDACT   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         NETIO    DSECT=YES\n         COPY     ACTDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT      DSECT=YES,PREFIX=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAASCB  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAASVT  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IRAOUCB\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IARRAX\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCSCB     DSECT\n         IEECHAIN INCCSCX=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCACT\n./ ADD NAME=STCAPF   0115-09139-09173-0841-00157-00122-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCAPF                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the APF list display.                        *\n*   The number of data sets that may be returned is limited by the    *\n*   I/O area size (VTAM limits the length to 32767).  If the APF list *\n*   exceeds the I/O area size, the return code with be set to 4 to    *\n*   inform the TSO user that the data has been truncated.             *\n*                                                                     *\n*   Data returned is: number of data sets in the list, and per data   *\n*       set 1) the data set name and 2) the volser.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCAPF   CSECT\nSTCAPF   AMODE 31\nSTCAPF   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCAPF,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     APF0000\nMODID    DC    CL8'STCAPF'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nAPF0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDAPF,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    APF0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         MVC   DXD_CSVAPF(CSVAPF_L),CSVAPF_I\nAPF0010  DS    0H\n         GETMAIN RU,                          GETMAIN REPLY AREA       +\n               LV=32000,                                               +\n               LOC=ANY\n         ST    R1,DXD_ANSWER\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         XC    NET_RC,NET_RC                  INITIALIZE RETURN CODE\n\n         L     R6,DXD_ANSWER\n         USING APFHDR,R6\n         MVC   DXD_ANSWER_LENGTH,=A(32000)\n         CSVAPF REQUEST=LIST,                 REQUEST APF LIST         +\n               ANSAREA=(R6),                                           +\n               ANSLEN=DXD_ANSWER_LENGTH,                               +\n               MF=(E,DXD_CSVAPF)\n         ITRACE ID=CSV_RC,                                             +\n               RDATA1=R15,                                             +\n               RDATA2=R0\n         LTR   R15,R15\n         BNZ   ERR0010\n         ICM   R5,15,APFH#REC                 NBR OF ENTRIES RETURNED\n         ITRACE ID=APFH#REC,                  NBR RETURNED BY CSV      +\n               RDATA1=R5                      .. TRACE FULL NUMBER\n         CH    R5,MAX#                        MORE THAN WILL FIT?\n         BNH   APF0020                        NO\n         ITRACE ID=OVERMAX                    TOO MANY TO RETURN ALL\n         LH    R5,MAX#                        LIMIT TO NUMBER THAT FIT\n         MVC   NET_RC,X0004                   SET RETURN CODE TO 4\nAPF0020  DS    0H\n         ITRACE ID=NBS_DSNS,                  NBR RETURNED TO USER     +\n               RDATA1=R5                      .. TRACE FULL NUMBER\n         STCM  R5,3,APF_NBR_DSNS              SET NUMBER RETURNED\n         ICM   R4,15,APFHOFF                  OFFSET TO 1ST APFE\n         AR    R4,R6                          1ST APFE\n         USING APFE,R4\n         LA    R7,NET_HEADER_L+APF_HEADER_L   INITIALIZE OUTPUT LENGTH\n         LA    R8,APF_DATA                    SET ADDRESS\n         USING APF_DATA,R8                    DEFINE BASE\nAPF0030  DS    0H\n         SR    R1,R1                          CLEAR FOR DSN LENGTH\n         ICM   R1,3,APFEDSLEN                 LENGTH OF DSNAME\n         BCTR  R1,0                           FOR EX\n         MVC   APF_DSN,COMM_BLANKS            INITIALIZE DSN\n         EX    R1,DSNMVC                      MOVE NAME\n         MVC   APF_VOLSER,APFEVOLUME          COPY VOLSER\n         ICM   R1,3,APFELEN\n         AR    R4,R1                          NEXT APFE\n         LA    R7,APF_DATA_L(,R7)             UPDATE OUTPUT LENGTH\n         LA    R8,APF_DATA_L(,R8)             UPDATE OUTPUT ADDRESS\n         BCT   R5,APF0030                     PROCESS ALL DATASETS\n         STCM  R7,3,NET_LENGTH                SET OUTPUT LENGTH\n         ITRACE ID=DATABILT,                  DATA BUILT               +\n               RDATA1=R7\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R1,DXD_ANSWER\n         FREEMAIN RU,                         FREEMAIN REPLY AREA      +\n               A=(1),                                                  +\n               LV=32000\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\nDSNMVC   MVC   APF_DSN(0),APFEDSNAME          COPY DATASET NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC    Q(DXDAPF)                     DISPLACEMENT TO WORK AREA\nCSVAPF_I  CSVAPF MF=(L,DXD_CSV_PARMS,0D)\nCSVAPF_L  EQU   *-CSVAPF_I\nMAX#      DC    Y((32760-APF_HEADER_L)/APF_DATA_L)\nX0004     DC    X'0004'\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDAPF            DSECT\n                  SUTLSAVE DSECT=NO\nDXD_CSVAPF        DS    (CSVAPF_L)X\nDXD_ANSWER_LENGTH DS    F\nDXD_ANSWER        DS    A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n         COPY     APFDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CSVAPFAA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCAPF\n./ ADD NAME=STCATTN  0111-09139-09169-1059-00282-00267-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCATTN                                               *\n*                                                                     *\n*  VTAM ATTN exit.                                                    *\n*                                                                     *\n*   Register usage:                                                   *\n*                                                                     *\n*      R7   Parameters passed by VTAM                                 *\n*      R8   RPL extension address                                     *\n*      R9   RPL address                                               *\n*      R10  USERBLOK address                                          *\n*      R11  Program base                                              *\n*      R12  STCCOMM address                                           *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*  For session establishment (FMH5 calls)                             *\n*    1) Verify no USERBLOK already exists for this LU                 *\n*    2) Add a USERBLOK to the chain                                   *\n*    3) Print a message to log the new conversation                   *\n*    4) Post the main task to have a subtask attached for this user.  *\n*                                                                     *\n*  For session termination (LOSS calls)                               *\n*    1) The \"error\" flag is set in the USERBLOK.                      *\n*    2) The ECB is posted to wake up the user subtask.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCATTN  CSECT\nSTCATTN  AMODE 31\nSTCATTN  RMODE ANY\n         USING STCATTN,R11                    DEFINE BASE\n         NOP   *                              KEEP PREFIX\n         LR    R11,R15                        LOAD BASE\n         B     ATTN0010                       SKIP EYECATCHER\n         DC    CL8'STCATTN'                   MODULE NAME\n         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY\nATTN0010 DS    0H\n         LR    R7,R1                          PARAMETER LIST ADDRESS\n         USING EXITPARM,R7                    DEFINE BASE\n         LR    R5,R14                         SAVE RETURN ADDRESS\n         GETMAIN RU,                          ACQUIRE A WORK AREA      +\n               LV=WKL,                                                 +\n               LOC=ANY\n         LR    R13,R1                         SAVE AREA ADDRESS\n         USING WK,R13                         DEFINE BASE\n         MVC   WKENQ(ENQL),ENQI               INITIALIZE LIST FORM\n         MVC   WKDEQ(DEQL),DEQI               INITIALIZE LIST FORM\n         L     R1,EXITACB                     ACB'S ADDRESS\n         USING IFGACB,R1                      DEFINE BASE\n         L     R12,ACBUSER                    COMMON DATA ADDRESS\n         USING STCCOMM,R12                    DEFINE BASE\n         L     R9,EXITRPL                     RPL'S ADDRESS\n         USING IFGRPL,R9                      DEFINE BASE\n         L     R8,RPLAAREA                    RPL EXTENSTION'S ADDRESS\n         USING ISTRPL6X,R8                    DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               DATA1=EXITTYPE,                .. REASON FOR CALL       +\n               DATA2=RPL6LU                   .. LU INVOLVED\n         ICM   R10,15,COMM_USERS              FIRST USER BLOCK\n         USING USERBLOK,R10                   DEFINE BASE\n         BZ    ATTN0030                       UNKNOWN LU\nATTN0020 DS    0H\n         CLC   RPL6LU,USER_LU                 LU NAME LOCATED?\n         BE    ATTN0030                       YES\n         ICM   R10,15,USER_NEXT               NEXT USER BLOCK\n         BNZ   ATTN0020                       LOOP\nATTN0030 DS    0H\n         CLC   EXITTYPE,CNOSTYPE              CNOS CALL?\n         BE    CNOS0000                       YES\n         CLC   EXITTYPE,FMH5TYPE              FMH5 CALL?\n         BE    FMH50000                       YES\n         CLC   EXITTYPE,LOSSTYPE              LOSS CALL?\n         BE    LOSS0000                       YES\n         B     EXIT0000                       OTHERWISE EXIT\n* ------------------------------------------------------------------- *\n*             CNOS                                                    *\n* ------------------------------------------------------------------- *\nCNOS0000 DS    0H\n         ITRACE ID=CNOS,                      CNOS                     +\n               DATA1=RPL6LU,                  .. LU NAME               +\n               RDATA2=R10                     .. USERBLOK ADDRESS\n         LTR   R10,R10                        LU ALREADY ON CHAIN?\n         BZ    EXIT0000                       YES\n         ABEND $U0005,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             FMH5                                                    *\n* ------------------------------------------------------------------- *\nFMH50000 DS    0H\n         ITRACE ID=FMH5,                      FMH5 RECEIVED            +\n               DATA1=RPL6LU,                  .. LU'S NAME             +\n               RDATA2=R10                     .. USERBLOK ADDRESS\n         LTR   R10,R10                        LU ALREADY ON CHAIN?\n         BNZ   ERR0010                        YES\n         MVC   WKRPL(RPLL),RPLI               INITIALIZE RPL\n         MVC   WKRPLX(RPLEXTL),RPLEXTI        INITIALIZE RPL EXTENSION\n         MVC   WKRPL+(RPLDACB-IFGRPL),EXITACB\n         LA    R8,WKRPLX                      RPL EXTENSION ADDRESS\n         ST    R8,WKRPL+(RPLAAREA-IFGRPL)\n         ITRACE ID=RECVFMH5\n         APPCCMD CONTROL=RCVFMH5,             RECEIVE THE FMH5         +\n               RPL=WKRPL,                     .. RPL ADDRESS           +\n               CONMODE=CS,                    .. CONTINUE SPECIFIC     +\n               AREA=WKFMH5,                   .. FMH5 STORAGE ADDRESS  +\n               AREALEN=WKFMH5L,               .. FMH5 SIZE             +\n               OPTCD=SYN                      .. SYNCHRONOUS\n         OC    RPL6RC,RPL6RC                  SUCCESSFUL?\n         BNZ   FMH50050                       NO\n* ------------------------------------------------------------------- *\n*        \"Lock\" the user chain                                        *\n* ------------------------------------------------------------------- *\n         ENQ   MF=(E,WKENQ)                   ISSUE ENQUE\n* ------------------------------------------------------------------- *\n*        Build new user block                                         *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                          ACQUIRE USER BLOCK       +\n               LV=USER_L,                                              +\n               LOC=ANY\n         ITRACE ID=NEWUSER,                   NEW USER SESSION         +\n               RDATA1=R1\nNEW      USING USERBLOK,R1\n         LR    R2,R1\n         LA    R3,USER_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R2,R14\n         ICM   R10,15,COMM_USERS              FIRST ON NEW USER CHAIN\n         BZ    FMH50010\n         ST    R1,USER_PREV\nFMH50010 DS    0H\n         ST    R10,NEW.USER_NEXT\n         ST    R1,COMM_USERS                  ADD NEW BLOCK TO CHAIN\n         MVC   NEW.USER_EYE,=C'USERBLOK'\n         MVI   NEW.USER_STATUS,$USER_VTAM+$USER_INITIAL\n         MVC   NEW.USER_CID,RPL6CNVD          SAVE CONVERSATION ID\n         L     R8,RPLAAREA                    RPL EXTENSION ADDR\n         MVC   NEW.USER_LU,RPL6LU             SAVE LU NAME\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         MVI   PRT_CC,C' '                    SET CARRIAGE CONTROL\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         MVC   PRT_MSGID(MSG01L),MSG01        SET MESSAGE\n         MVC   PRT_MSGID+(MSG01LU-MSG01)(L'MSG01LU),NEW.USER_LU\n         DEQ   MF=(E,WKDEQ)                   ISSUE DEQ\n         LA    R1,PRTBLOK                     PRINT PARM BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        ADD TO QUEUE\n         POST  COMM_NET_ECB                   WAKE UP MAIN TASK\n         B     EXIT0000                       EXIT\nFMH50050 DS    0H\n         ITRACE ID=FMH5FAIL\n         LR    R2,R15                         COPY RETURN CODE\n         ABEND $U0006,DUMP,,USER              ABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*             LOSS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLOSS0000 DS    0H\n         ITRACE ID=LOSS,                      LOSS OF SESSION          +\n               RDATA1=R10,                                             +\n               DATA2=USER_LU\n         TM    USER_STATUS,$USER_LOST         ALREADY 'LOST'?\n         BO    LOSS0020                       YES\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         MVI   PRT_CC,C' '                    CARRIAGE CONTROL\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         MVC   PRT_MSGID(MSG02L),MSG02        SET MESSAGE\n         MVC   PRT_MSGID+(MSG02LU-MSG02)(L'MSG02LU),RPL6LU\n         LA    R1,PRTBLOK                     PRINT PARM BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        ADD TO QUEUE\n         LTR   R10,R10                        FOR A KNOWN LU?\n         BZ    LOSS0010                       NO\n         ITRACE ID=SETERROR                   SESSION LOST\n         OI    USER_STATUS,$USER_LOST         SET 'LOST'\n         POST  COMM_NET_ECB                   WAKE UP MAIN TASK\n         B     EXIT0000                       AND EXIT\nLOSS0010 DS    0H\n         ITRACE ID=UNKNLOSS                   UNKNOWN SESSION LOST\n         B     EXIT0000                       EXIT\nLOSS0020 DS    0H\n         ITRACE ID=DUP_LOSS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=DUPFMH5,                                            +\n               DATA1=USER_LU\n         ABEND $U0007,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT                       EXITING\n         FREEMAIN RU,                         FREEMAIN WORK AREA       +\n               A=(R13),                                                +\n               LV=WKL\n         BR    R5                             RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +\n               RET=HAVE,                                               +\n               SMC=NONE,                                               +\n               MF=L\nENQL     EQU   *-ENQI\nDEQI     DEQ   (QNAME,RNAME,,STEP),                                    +\n               RMC=NONE,                                               +\n               MF=L\nDEQL     EQU   *-DEQI\nRPLI     RPL   AM=VTAM\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\nQNAME    DC    CL8'SUTL'\nRNAME    DC    C'USERBLOK CHAIN'\nCNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS\nFMH5TYPE DC    CL4'FMH5'             FMH5\nLOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION\nMSG01    DS    0C\n         DC    CL11'STCATTN01I'\n         DC    C'Session with LU '\nMSG01LU  DC    CL8' '\n         DC    C' established'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCATTN02I'\n         DC    C'Session lost with '\nMSG02LU  DC    CL8' '\nMSG02L   EQU   *-MSG02\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWK       SUTLSAVE DSECT=YES\n         PRTBLOK  DSECT=NO\nWKFMH5   FMH5     DSECT=NO\nWKRPL    DS       0A,(RPLL)X\nWKRPLX   DS       0A,(RPLEXTL)X\nWKENQ    DS       (ENQL)X\nWKDEQ    DS       (DEQL)X\nWKL      EQU      *-WK\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         USERBLOK\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nEXITPARM DSECT\nEXITACB  DS   A                      ACB ADDRESS\n         DS   A                      RESERVED\n         DS   A                      RESERVED\nEXITTYPE DS   CL4                    TYPE OF CALL\nEXITRPL  DS   A                      RPL ADDRESS\n         DS   A                      RESERVED\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IFGACB  AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IFGRPL  AM=VTAM\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY    REGEQU\n         ABCODES\n         END     STCATTN\n./ ADD NAME=STCCOMM  0100-09139-09139-1341-00013-00013-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: STCCOMM                                                      *\n*                                                                     *\n*  Started task common data and trace table manager                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     OPTIONS\n         STCCOMM  TYPE=CSECT\n         SUTLSAVE DSECT=YES\n         IHAPSA   DSECT=YES,LIST=NO\n         COPY     REGEQU\n         END      STCCOMM\n./ ADD NAME=STCCONS  0111-09139-09173-0843-00449-00426-00000-SOURCE\n         COPY  OPTIONS\n         MACRO\n         CMD   &TEXT,&ADDR\n         LCLA  &LEN\n         AIF   (T'&TEXT EQ 'O').ERR0010\n         AIF   (T'&ADDR EQ 'O').ERR0020\n&LEN     SETA  K'&TEXT\n         DC    AL1(&LEN)\n         DC    AL4(&ADDR)\n         DC    C'&TEXT'\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'COMMAND TEXT IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'COMMAND PROCESSOR ADDRESS IS REQUIRED'\n         MEND\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCCONS                                               *\n*                                                                     *\n*  This module allows some commands to be entered via an MVS console. *\n*  Mostly this would be to allow an operator (or an automation        *\n*  product) to issue commands to shutdown SUTL.                       *\n*                                                                     *\n*    Commands allowed are                                             *\n*      \"F xxx,ACTIVE\" Displays the active USERs.                      *\n*      \"P xxx\"        Stops the SUTL STC.                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCCONS  CSECT\nSTCCONS  AMODE 31\nSTCCONS  RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE ADDRESS\n         USING STCCONS,R11                    DEFINE BASE\n         B     CONS0000\nMODID    DC    CL8'STCCONS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nCONS0000 DS    0H\n         L     R12,0(R1)                      COMMON AREA ADDRESS\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         LA    R3,CONS_WORK_L                 WORK AREA SIZE\n         GETMAIN RU,                          ACQUIRE WORK AREA        +\n               LV=(R3),                       .. SIZE                  +\n               LOC=ANY\n         LR    R2,R1                          COPY WORK AREA ADDRESS\n         LR    R4,R1                          COPY WORK AREA ADDRESS\n         ST    R4,CONS_WORK_AREA              SAVE WORK AREA ADDR\n         SR    R14,R14                        CLEAR REGISTER\n         SR    R15,R15                        CLEAR REGISTER\n         MVCL  R2,R14                         CLEAR THE WORK AREA\n         ST    R13,4(,R4)                     CHAIN CALLER'S WORK AREA\n         ST    R4,8(,R13)                     CHAIN OUR WORK AREA\n         LR    R13,R4                         SET WORK AREA BASE\n         USING CONS_WORK,R13                  DEFINE WORK AREA BASE\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         ST    R11,ACONS                      CONSOLE MODULE ADDRESS\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=EXTRACTL+4,                 .. LENGTH                +\n               LOC=BELOW                      .. 24-BIT AREA\n         LR    R2,R1                          SAVE THE ADDRESS\n         LA    R3,EXTRACTL(R2)                RETURNED DATA ADDRESS\n         MVC   0(EXTRACTL,R2),EXTRACTI\n         EXTRACT (R3),                        EXTRACT COMM LIST ADDR   +\n               FIELDS=COMM,                   .. RETURN COMLIST ADDRESS+\n               MF=(E,(R2))                    .. EXECUTE FORM\n         L     R10,0(R3)                      COMM LIST ADDRESS\n         FREEMAIN RU,                         FREE EXTRACT WORK AREA   +\n               A=(R2),                                                 +\n               LV=EXTRACTL+4\n         ITRACE ID=COMLIST,                   TRACE COMM ADDRESS       +\n               RDATA1=R10\n         ST    R10,WORK_COMM_ADDR             SAVE COMLIST ADDRESS\n         USING COMLIST,R10                    DEFINE COMLIST BASE\n         MVC   CONS_SYSTEM_ECB,COMECBPT       SAVE CONSOLE ECB ADDRESS\n         MVC   WORK_ECB_1,COMECBPT            SAVE CONSOLE ECB ADDRESS\n         LA    R1,CONS_WORK_ECB\n         ST    R1,WORK_ECB_2                  SAVE ADDRESS\n         OI    WORK_ECB_2,X'80'               FLAG END-OF-LIST\nCONS0010 DS    0H\n         ICM   R9,15,COMCIBPT                 FIRST CIB\n         BZ    CONS0040                       NO CIB'S\n         USING CIB,R9                         DEFINE CIB BASE\nCONS0020 DS    0H\n         ITRACE ID=INITCIB,                   TRACE EACH CIB           +\n               RDATA1=R9,                     .. CIB ADDRESS           +\n               DATA2=CIBVERB                  .. VERB FROM CIB\n         CLI   CIBVERB,CIBSTART               START COMMAND?\n         BE    CONS0030                       YES\n         LH    R1,CIBXOFF\n         LA    R1,0(R1,R9)                    CIB EXTENSION\n         USING CIBX,R1\n         MVC   WORK_CONSOLE_NAME,CIBXCNNM     COPY CONSOLE NAME\n         MVC   WORK_WTO(WTO01L),WTO01         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. BACK TO SAME CONSOLE\nCONS0030 DS    0H\n         L     R2,CIBNEXT                     NEXT CIB\n         QEDIT ORIGIN=COMCIBPT,               FREE THIS CIB            +\n               BLOCK=(R9)\n         LTR   R15,R15                        QEDIT SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         LTR   R9,R2                          NEXT CIB'S ADDRESS\n         BNZ   CONS0020                       LOOP\nCONS0040 DS    0H\n         ITRACE ID=SETCTR                     SETTING CIB LIMIT\n         QEDIT ORIGIN=COMCIBPT,               SET CIB LIMIT            +\n               CIBCTR=2                       .. ALLOW 2 CIBS\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0020                        NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS0100 DS    0H\n         ITRACE ID=CONSWAIT\n         WAIT  1,ECBLIST=WORK_ECB_LIST        WAIT\n         TM    COMM_EOJ,$EOJ3                 EOJ?\n         BO    EXIT0000                       YES\n         ITRACE ID=PROCLIST                   PROCESSING CIB LIST\n         L     R10,WORK_COMM_ADDR             COMM LIST ADDRESS\n         ICM   R9,15,COMCIBPT                 FIRST CIB ADDRESS\n         BZ    CONS0100                       STRANGE..\nCONS0110 DS    0H\n         ITRACE ID=PROCCIB,                   TRACE EACH CIB           +\n               RDATA1=R9,                     .. CIB ADDRESS           +\n               DATA2=CIBVERB                  .. VERB FROM CIB\n         LH    R1,CIBXOFF\n         LA    R1,0(R1,R9)                    CIB EXTENSION\n         USING CIBX,R1\n         MVC   WORK_CONSOLE_NAME,CIBXCNNM     SET CONSOLE ID\n         CLI   CIBVERB,CIBSTOP                STOP COMMAND?\n         BE    CONS0300                       YES\n         CLI   CIBVERB,CIBMODFY               MODIFY?\n         BE    CONS0130                       YES\n         MVC   WORK_WTO(WTO02L),WTO02         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE\nCONS0120 DS    0H\n         L     R2,CIBNEXT                     NEXT CIB ADDRESS\n         QEDIT ORIGIN=COMCIBPT,               FREE THIS CIB            +\n               BLOCK=(R9)\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         LTR   R9,R2                          NEXT CIB ADDRESS\n         BNZ   CONS0110                       PROCESS IT\n         B     CONS0100                       EXIT AT END OF CHAIN\nCONS0130 DS    0H\n         SR    R7,R7                          CLEAR REGISTER\n         ICM   R7,3,CIBDATLN                  LENGTH OF DATA\n         LA    R6,CMD_TABLE                   OUR LIST OF COMMANDS\n         USING CMD_DSECT,R6                   DEFINE BASE\n         SR    R1,R1                          CLEAR REGISTER\nCONS0140 DS    0H\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BE    CONS0160                       YES\n         IC    R1,CMD_LENGTH                  TEXT LENGTH\n         CLR   R7,R1                          LENGTH CORRECT?\n         BNE   CONS0150                       NO\n         BCTR  R1,0                           MINUS 1 FOR EXECUTE\n         EX    R1,CMDCLC                      COMMAND FOUND?\n         BE    CONS0170                       YES\n         LA    R1,1(,R1)                      RESTORE LENGTH\nCONS0150 DS    0H\n         LA    R6,CMD_DSECT_L(R6,R1)          NEXT COMMAND\n         B     CONS0140                       LOOP\nCMDCLC   CLC   CMD_CMD,CIBDATA                COMMAND LOCATED?\nCONS0160 DS    0H\n         MVC   WORK_WTO(WTO03L),WTO03         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE\n         B     CONS0120                       RELEASE THIS CIB\nCONS0170 DS    0H\n         ICM   R15,15,CMD_ADDR                COMMAND PROCESSOR ADDRESS\n         BR    R15                            PROCESS THE COMMAND\n* ------------------------------------------------------------------- *\n*        Display the active users                                     *\n* ------------------------------------------------------------------- *\nCONS0200 DS    0H\n         ITRACE ID=ACTIVE\n         ICM   R7,15,COMM_USERS               FIRST USER BLOCK\n         USING USERBLOK,R7                    DEFINE USER BLOCK BASE\n         BZ    CONS0290                       NO ACTIVE USERS\nCONS0210 DS    0H\n         MVC   WORK_WTO(WTO07L),WTO07         COPY WTO\n         LA    R4,WORK_WTO                    WTO ADDRESS\n         USING WPL,R4                         DEFINE WTO PARM LIST BASE\n         MVC   WPLTXT(MSG08L),MSG08           COPY MESSAGE TO WTO\n         MVC   WPLTXT+(MSG08ID-MSG08)(L'MSG08ID),USER_ID\n         MVC   WPLTXT+(MSG08LU-MSG08)(L'MSG08LU),USER_LU\n         UNPK  WPLTXT+(MSG08CID-MSG08)(9),USER_CID(5)\n         TR    WPLTXT+(MSG08CID-MSG08)(8),HEXCHAR\n         MVI   WPLTXT+(MSG08CID-MSG08)+8,C' '\n         LA    R2,NET_FUNC_TABLE\n         USING FUNC_DSECT,R2                  DEFINE BASE\n         L     R3,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R3                      DEFINE I/O AREA BASE\nCONS0220 DS    0H\n         CLI   0(R2),X'FF'                    END OF TABLE?\n         BE    CONS0230                       YES\n         CLC   NET_FUNCTION,FUNC_FUNCTION     IS THIS THE FUNCTION?\n         BE    CONS0230                       YES\n         LA    R2,FUNC_DSECT_L(,R2)           NEXT FUNCTION\n         B     CONS0220                       LOOP\nCONS0230 DS    0H\n         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),FUNC_NAME\n         B     CONS0250\nCONS0240 DS    0H\n         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),UNKNOWN\nCONS0250 DS    0H\n         CLI   NET_FUNCTION,$USER_RECEIVE     RECEIVE?\n         BE    CONS0260                       YES\n         CLI   NET_FUNCTION,$USER_SEND        SEND?\n         BE    CONS0270                       YES\n         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),NONE\n         B     CONS0280\nCONS0260 DS    0H\n         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),RECEIVE\n         B     CONS0280\nCONS0270 DS    0H\n         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),SEND\nCONS0280 DS    0H\n         L     R0,USER_SENDS                  NUMBER OF SENDS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),EDWD1\n         ED    WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),COMM_DWORD+4\n         L     R0,USER_BYTES_SENT             BYTES SENT\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),EDWD1\n         ED    WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),COMM_DWORD+4\n         L     R0,USER_RECEIVES               NUMBER OF RECEIVES\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),EDWD1\n         ED    WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),COMM_DWORD+4\n         L     R0,USER_BYTES_RECEIVED         BYTES RECEIVED\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),EDWD1\n         ED    WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),COMM_DWORD+4\n         WTO   MF=(E,(R4)),                   ISSUE THE WTO            +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO THE SAME CONSOLE\n         ICM   R7,15,USER_NEXT                NEXT USER BLOCK\n         BNZ   CONS0210\n         B     CONS0120                       RELEASE THIS CIB\nCONS0290 DS    0H\n         MVC   WORK_WTO(WTO04L),WTO04         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE\n         B     CONS0120                       RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*        Shutdown the STC                                             *\n* ------------------------------------------------------------------- *\nCONS0300 DS    0H\n         ITRACE ID=STOP\n         TM    COMM_EOJ,$EOJ1                 EOJ ALREADY IN PROGRESS?\n         BO    CONS0310                       YES\n         POST  COMM_TERM_ECB                  POST TERMINATION ECB\n         MVC   WORK_WTO(WTO05L),WTO05         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE\n         B     CONS0120                       RELEASE THIS CIB\nCONS0310 DS    0H\n         MVC   WORK_WTO(WTO06L),WTO06         COPY WTO\n         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +\n               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE\n         B     CONS0120                       RELEASE THIS CIB\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=CIBDELF,                   DELETE CIB FAILED        +\n               RDATA1=R15                     .. RETURN CODE\n         ABEND $U0011,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=CIBCTRF,                   SET CIB LIMIT            +\n               RDATA1=R15                     .. RETURN CODE\n         ABEND $U0012,DUMP,,USER\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R1,CONS_WORK_AREA              WORK AREA ADDRESS\n         LA    R0,CONS_WORK_L                 WORK AREA SIZE\n         L     R13,4(,R13)                    CALLER'S R13\n         FREEMAIN RU,                         FREE WORK AREA           +\n               A=(1),                                                  +\n               LV=(0)\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        ALWAYS A GOOD RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXTRACTI EXTRACT *,                  EXTRACT LIST FORM                 +\n               FIELDS=COMM,          .. COMLIST ADDRESS PLEASE         +\n               MF=L\nEXTRACTL EQU   *-EXTRACTI\nWTO01    WTO   'STCCONS01E * Command not processed, STC initialization ++\n               not complete',                                          +\n               CONSNAME=,                                              +\n               MF=L\nWTO01L   EQU   *-WTO01\nWTO02    WTO   'STCCONS02E * invalid CIB verb, CIB ignored',           +\n               CONSNAME=,                                              +\n               MF=L\nWTO02L   EQU   *-WTO02\nWTO03    WTO   'STCCONS02E * Invalid command',                         +\n               CONSNAME=,                                              +\n               MF=L\nWTO03L   EQU   *-WTO03\nWTO04    WTO   'STCCONS04I   No active users',                         +\n               CONSNAME=,                                              +\n               MF=L\nWTO04L   EQU   *-WTO04\nWTO05    WTO   'STCCONS03I   SUTL STC shutdown starting',              +\n               CONSNAME=,                                              +\n               MF=L\nWTO05L   EQU   *-WTO05\nWTO06    WTO   'STCCONS03E * SUTL STC shutdown already in progress',   +\n               CONSNAME=,                                              +\n               MF=L\nWTO06L   EQU   *-WTO06\nWTO07    WTO   '                                                       +\n                                                                       +\n                             ',                                        +\n               CONSNAME=,                                              +\n               MF=L\nWTO07L   EQU   *-WTO07\n\nMSG08    DS    0C\n         DC    C'STCCONS8I   '\n         DC    C'ID='\nMSG08ID  DC    CL8' '\n         DC    C' LU='\nMSG08LU  DC    CL8' '\n         DC    C' CID='\nMSG08CID DC    CL8' '\n         DC    C' FUNC='\nMSG08FNC DC    CL4' '\n         DC    C' NET STATUS='\nMSG08NET DC    CL8' '\n         DC    C' SEND='\nMSG08SCT DC    CL8' '\n         DC    C'/'\nMSG08SLN DC    CL8' '\n         DC    C' RECV='\nMSG08RCT DC    CL8' '\n         DC    C'/'\nMSG08RLN DC    CL8' '\nMSG08L   EQU   *-MSG08\n\nEDWD1    DC    X'4020202020202021'\nNONE     DC    CL8'NONE'\nRECEIVE  DC    CL8'RECEIVE'\nSEND     DC    CL8'SEND'\nUNKNOWN  DC    CL8'UNKNOWN'\n\nHEXCHAR          EQU   *-C'0'\n                 DC    C'0123456789ABCDEF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCMD_TABLE        DS    0C\n                 CMD   ACTIVE,CONS0200       DISPLAY ACTIVE USERS\n                 CMD   SHUT,CONS0300         SHUT (SHUTDOWN THE STC)\n                 CMD   STOP,CONS0300         STOP (SHUTDOWN THE STC)\n                 CMD   USERS,CONS0200        DISPLAY ACTIVE USERS\n                 DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNET_FUNC_TABLE   DS    0C\n                 DC    AL1($NET_ID),CL4'SID'\n                 DC    AL1($NET_ACT),CL4'ACT'\n                 DC    AL1($NET_APF),CL4'APF'\n                 DC    AL1($NET_FS),CL4'FS'\n                 DC    AL1($NET_IPL),CL4'IPL'\n                 DC    AL1($NET_LLA),CL4'LLA'\n                 DC    AL1($NET_PS),CL4'PS'\n                 DC    AL1($NET_SUB),CL4'SUB'\n                 DC    AL1($NET_USERS),CL4'USER'\n                 DC    AL1($NET_LOGOFF),CL4'OFF'\n                 DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS_WORK         DSECT\n                  SUTLSAVE DSECT=NO   WORK AREA OWNER EYECATCHER\nWORK_COMM_ADDR    DS    F             ADDRESS OF COMM LIST\n\nWORK_ECB_LIST     DS    0A\nWORK_ECB_1        DS    A\nWORK_ECB_2        DS    A\n\nWORK_CONSOLE_NAME DS    CL8            CONSOLE NAME\nWORK_WTO          DS    0F,CL200\nCONS_WORK_L       EQU   *-CONS_WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCMD_DSECT        DSECT\nCMD_LENGTH       DS    X             COMMAND TEXT LENGTH\nCMD_ADDR         DS    AL4           COMMAND PROCESSOR ENTRY POINT\nCMD_DSECT_L      EQU   *-CMD_DSECT\nCMD_CMD          DS    C             COMMAND TEXT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFUNC_DSECT       DSECT\nFUNC_FUNCTION    DS    X\nFUNC_NAME        DS    CL4\nFUNC_DSECT_L     EQU   *-FUNC_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 NETIO    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 IEZCOM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCIB              DSECT\n                 IEZCIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 IEZWPL   DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 COPY     REGEQU\n                 ABCODES\n         END     STCCONS\n./ ADD NAME=STCFS    0127-09142-09189-0916-00278-00139-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCFS                                                 *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the Open Edition file system (FS) display    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCFS    CSECT\nSTCFS    AMODE 31\nSTCFS    RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCFS,R11                      DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     FS0000\nMODID    DC    CL8'STCFS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nFS0000   DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDFS,R13                      DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    FS0010                         YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nFS0010   DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE I/O AREA BASE\n         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO\n         LA    R5,NET_HEADER_L+FS_HEADER_L    INITIAL LENGTH\n         LA    R6,FS_DATA                     INITIAL OUTPUT ADDR\n         USING FS_DATA,R6\n         XC    MNTEH(MNTEH#LENGTH),MNTEH      INITIALIZE HEADER\n         XC    FS_NBR,FS_NBR                  RESET NBR OF FILESYSTEMS\nFS0020   DS    0H\n         MVC   MNTEHID,=CL4'MNT2'\n         MVC   MNTEHSIZE,=A(MNTE#LENGTH)\n         MVC   MNTEHBLEN,=A(MNTE#LENGTH)\n         MVC   DXD_MNTE_BUFFER_LENGTH,=A(DXD_MNTE_BUFFER_L)\n         LA    R7,MNTEH\n         USING MNTEH,R7\n         ITRACE ID=CALL_GMN,                                           +\n               DATA1=DXD_MNTE_BUFFER_LENGTH,                           +\n               RDATA2=R7\n         CALL  BPX1GMN,                                                +\n               (DXD_MNTE_BUFFER_LENGTH,                                +\n               MNTEH,                                                  +\n               DXD_RETURN_VALUE,                                       +\n               DXD_RETURN_CODE,                                        +\n               DXD_REASON_CODE),                                       +\n               VL,                                                     +\n               MF=(E,DXD_PARMLIST)\n         ITRACE ID=GMN_RC,                                             +\n               DATA1=DXD_RETURN_VALUE,                                 +\n               DATA2=DXD_RETURN_CODE\n         ICM   R8,15,DXD_RETURN_VALUE             SUCCESSFUL?\n         BM    ERR0010                            NO\n         BZ    FS0230                             ZERO.. 'EOF'\nFS0025   DS    0H\n         MVC   DXD_STAT_BUFFER_LENGTH,=A(DXD_STAT_BUFFER_L)\n         ITRACE ID=CALL_STV,                                           +\n               DATA1=MNTENTMOUNTPOINT+0,                               +\n               DATA2=MNTENTMOUNTPOINT+8\n         CALL  BPX1STV,                                                +\n               (MNTENTPATHLEN,                                         +\n               MNTENTMOUNTPOINT,                                       +\n               DXD_STAT_BUFFER_LENGTH,                                 +\n               SSTF,                                                   +\n               DXD_RETURN_VALUE,                                       +\n               DXD_RETURN_CODE,                                        +\n               DXD_REASON_CODE),                                       +\n               VL,                                                     +\n               MF=(E,DXD_PARMLIST)\n         SR    R1,R1\n         ICM   R1,3,FS_NBR\n         LA    R1,1(,R1)\n         STCM  R1,3,FS_NBR\n         MVC   FS_SIZE,SSTFTOTALSPACE             FILE SYSTEM SIZE\n         MVC   FS_USED,SSTFUSEDSPACE              USED SPACE\n         MVC   FS_READS,MNTENTREADCT              NBR OF READS\n         MVC   FS_BYTES_READ,MNTENTBYTESREAD      BYTES READ\n         MVC   FS_WRITES,MNTENTWRITECT            NBR OF WRITES\n         MVC   FS_BYTES_WRITTEN,MNTENTBYTESWRITTEN\n         ICM   R1,15,MNTENTPATHLEN                PATH NAME LENGTH\n         CH    R1,=Y(L'FS_MOUNT_POINT)            TOO LONG?\n         BNH   FS0030\n         LA    R1,L'FS_MOUNT_POINT                LIMIT LENGTH\nFS0030   DS    0H\n         BCTR  R1,0\n         MVC   FS_MOUNT_POINT,COMM_BLANKS\n         EX    R1,PATH_MVC                        COPY MOUNT POINT\n         CLI   MNTENTSTATUS,MNTENTFILEACTIVE      ACTIVE?\n         BE    FS0040                             YES\n         CLI   MNTENTSTATUS,MNTENTFILEDEAD        DEAD?\n         BE    FS0050                             YES\n         CLI   MNTENTSTATUS,MNTENTFILERESET       RESET?\n         BE    FS0060                             YES\n         CLI   MNTENTSTATUS,MNTENTFILEFORCE       UNMOUNTED WITH FORCE?\n         BE    FS0070                             YES\n         CLI   MNTENTSTATUS,MNTENTFILEIMMED       UNMOUNTED WITH IMMED?\n         BE    FS0080                             YES\n         CLI   MNTENTSTATUS,MNTENTFILENORM        NORMAL?\n         BE    FS0090                             YES\n         CLI   MNTENTSTATUS,MNTENTIMMEDTRIED      MOUNTED IMMED FAILED?\n         BE    FS0100                             YES\n         CLI   MNTENTSTATUS,MNTENTFILEDRAIN       UNMOUNTED WITH DRAIN?\n         BE    FS0110                             YES\n         CLI   MNTENTSTATUS,MNTENTQUIESCED        QUIESCED\n         BE    FS0120                             YES\n         CLI   MNTENTSTATUS,MNTENTMNTINPROGRESS MOUNT IN PROGRESS?\n         BE    FS0130                             YES\n         CLI   MNTENTSTATUS,MNTENTASYNCHMOUNT     ASNYCH MOUNT?\n         BE    FS0130                             YES\n         MVC   FS_STATUS,=CL8'UNKNOWN'\n         B     FS0150\nFS0040   DS    0H\n         MVC   FS_STATUS,=CL8'ACTIVE'\n         B     FS0150\nFS0050   DS    0H\n         MVC   FS_STATUS,=CL8'DEAD'\n         B     FS0150\nFS0060   DS    0H\n         MVC   FS_STATUS,=CL8'RESET'\n         B     FS0150\nFS0070   DS    0H\n         MVC   FS_STATUS,=CL8'FORCED'\n         B     FS0150\nFS0080   DS    0H\n         MVC   FS_STATUS,=CL8'IMMED'\n         B     FS0150\nFS0090   DS    0H\n         MVC   FS_STATUS,=CL8'UNMOUNT'\n         B     FS0150\nFS0100   DS    0H\n         MVC   FS_STATUS,=CL8'FAILED'\n         B     FS0150\nFS0110   DS    0H\n         MVC   FS_STATUS,=CL8'DRAINED'\n         B     FS0150\nFS0120   DS    0H\n         MVC   FS_STATUS,=CL8'QUIESCED'\n         B     FS0150\nFS0130   DS    0H\n         MVC   FS_STATUS,=CL8'PROGRESS'\n         B     FS0150\nFS0140   DS    0H\n         MVC   FS_STATUS,=CL8'ASYNC   '\nFS0150   DS    0H\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEMVS    LOCAL?\n         BE    FS0160                            YES\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEREMOTE REMOTE?\n         BE    FS0170                            YES\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEPIPE   PIPE?\n         BE    FS0180                            YES\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPESOCKET SOCKET?\n         BE    FS0190                            YES\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEXPFS   CROSS SYSTEM PFS?\n         BE    FS0200                            YES\n         CLI   MNTENTFSTYPE+3,MNTENTFSTYPECSPS   CHAR SPECIAL?\n         BE    FS0210                            YES\n         MVC   FS_TYPE,=CL6'UNKWN'               UNKNOWN\n         B     FS0220\nFS0160   DS    0H\n         MVC   FS_TYPE,=CL6'LOCAL'\n         B     FS0220\nFS0170   DS    0H\n         MVC   FS_TYPE,=CL6'REMOTE'\n         B     FS0220\nFS0180   DS    0H\n         MVC   FS_TYPE,=CL6'PIPE'\n         B     FS0220\nFS0190   DS    0H\n         MVC   FS_TYPE,=CL6'SOCKET'\n         B     FS0220\nFS0200   DS    0H\n         MVC   FS_TYPE,=CL6'XPFS'\n         B     FS0220\nFS0210   DS    0H\n         MVC   FS_TYPE,=CL6'CSPS'\nFS0220   DS    0H\n         MVC   FS_DDNAME,MNTENTFSDDNAME       DDNAME\n         MVC   FS_DSNAME,MNTENTFSNAM44        DATASET NAME\n         LA    R5,FS_DATA_L(,R5)              UPDATE OUTPUT LENGTH\n         LA    R6,FS_DATA_L(,R6)              UPDATE OUTPUT ADDRESS\n         LA    R7,MNTE#LENGTH(,R7)            NEXT MNTE\n         BCT   R8,FS0025                      PROCESS ALL DATASETS\n         B     FS0020\nFS0230   DS    0H\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R5                      .. OUTPUT LENGTH\n         STCM  R5,3,NET_LENGTH                SET LENGTH\n         B     EXIT0000\nPATH_MVC MVC   FS_MOUNT_POINT(0),MNTENTMOUNTPOINT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS   0H\n         ITRACE ID=GMN_ERR,                                            +\n               DATA1=DXD_RETURN_VALUE,                                 +\n               DATA2=DXD_REASON_CODE\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDFS)                       DISPLACEMENT TO WORK AREA\nMAX#      DC   A((32760-FS_HEADER_L)/FS_DATA_L)\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFS                   DSECT\n                        SUTLSAVE DSECT=NO\n\nDXD_PARMLIST            DS   0A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n\nDXD_RETURN_VALUE        DS   F\nDXD_RETURN_CODE         DS   F\nDXD_REASON_CODE         DS   F\n\nDXD_MNTE_BUFFER_LENGTH  DS   F\nDXD_STAT_BUFFER_LENGTH  DS   F\n\n                        DS  0F\n                        BPXYSSTF DSECT=NO,LIST=YES\nDXD_STAT_BUFFER_L       EQU  *-SSTF\n\n                        BPXYMNTE DSECT=NO,LIST=YES,MNTE2=YES\nDXD_MNTE_BUFFER_L       EQU  *-MNTEH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n         COPY     FSDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         BPXYSSTF DSECT=YES,LIST=YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCFS\n./ ADD NAME=STCIPL   0119-09139-09181-1627-00343-00101-00000-SOURCE\n         MACRO\n         PDE   &A,&B\n         DC    AL2(IPA&A-IPA)                 DISP TO PDE DATA\n         DC    CL8'&B'                        DESCRIPTION\n         MEND\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCIPL                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the IPL info display.                        *\n*                                                                     *\n*   Data returned is: IPL date, IPL time, IPL volume volser.          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCIPL   CSECT\nSTCIPL   AMODE 31\nSTCIPL   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCIPL,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     IPL0000\nMODID    DC    CL8'STCIPL'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nIPL0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDIPL,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    IPL0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nIPL0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         LA    R7,IPL\n         USING IPL,R7\n         LA    R5,NET_HEADER_L                INITIALIZE LENGTH\n         L     R1,CVTPTR                      CVT ADDRESS\n         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY\n         L     R2,CVTSMCA                     SMF COMMUNICATION AREA\n         USING SMCABASE,R2                    DEFINE BASE\n*---------------------------------------------------------------------*\n*        IPL DATE                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=IPLDATE\n         MVC   IPL(IPL_L),COMM_BLANKS\n         MVC   IPL_NAME(IPL_DATE_L),IPL_DATE\n         ZAP   DXD_DATE,SMCAIDTE              COPY IPL DATE\n         AP    DXD_DATE,P1900000              ADD CENTURY\n         MVC   IPL_DATA-1(L'DATE_EDITWORD),DATE_EDITWORD\n         ED    IPL_DATA-1(L'DATE_EDITWORD),DXD_DATE\n         LA    R7,IPL_L(,R7)                  NEXT LINE\n         LA    R5,IPL_L(,R5)                  UPDATE LENGTH\n*---------------------------------------------------------------------*\n*        IPL TIME                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=IPLTIME\n         MVC   IPL(IPL_L),COMM_BLANKS\n         MVC   IPL_NAME(IPL_TIME_L),IPL_TIME\n         SR    R0,R0                          CLEAR REGISTER\n         ICM   R1,15,SMCAITME                 IPL TIME\n         D     R0,F360000                     DIVIDE BY 100THS PER HOUR\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'\n         UNPK  IPL_DATA(2),COMM_DWORD+6(2)\n         LR    R1,R0                          COPY REMAINDER\n         SR    R0,R0                          CLEAR REGISTER\n         D     R0,F6000                       100THS PER MINUTE\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'\n         UNPK  IPL_DATA+3(2),COMM_DWORD+6(2)\n         LR    R1,R0                          COPY REMAINDER\n         SR    R0,R0                          CLEAR REGISTER\n         D     R0,F100                        100THS PER SECOND\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'\n         UNPK  IPL_DATA+6(2),COMM_DWORD+6(2)\n         MVI   IPL_DATA+2,C':'                INSERT DELIMITER\n         MVI   IPL_DATA+5,C':'                INSERT DELIMITER\n         LA    R7,IPL_L(,R7)                  NEXT LINE\n         LA    R5,IPL_L(,R5)                  UPDATE LENGTH\n*---------------------------------------------------------------------*\n*        IPL VOLUME                                                   *\n*---------------------------------------------------------------------*\n         ITRACE ID=IPL_VOL\n         MVC   IPL(IPL_L),COMM_BLANKS\n         MVC   IPL_NAME(IPL_VOLUME_L),IPL_VOLUME\n         L     R1,CVTPTR\n         L     R2,CVTSYSAD                    SYSRES UCB ADDRESS\n         USING UCBOB,R2                       DEFINE BASE\n         MVC   IPL_DATA(L'UCBVOLI),UCBVOLI    COPY SYSRES VOLSER\n         MVI   IPL_DATA+10,C'('\n         MVC   IPL_DATA+11(3),UCBNAME\n         MVI   IPL_DATA+14,C')'\n         LA    R7,IPL_L(,R7)                  NEXT LINE\n         LA    R5,IPL_L(,R5)                  UPDATE LENGTH\n*---------------------------------------------------------------------*\n*        IPA  data                                                    *\n*---------------------------------------------------------------------*\n         MVC   IPL(IPL_L),COMM_BLANKS\n         LA    R7,IPL_L(,R7)                  NEXT LINE\n         LA    R5,IPL_L(,R5)                  UPDATE LENGTH\n         MVC   IPL(IPL_L),COMM_BLANKS\n         MVC   IPL(IPA_HEADING_L),IPA_HEADING\n         LA    R7,IPL_L(,R7)                  NEXT LINE\n         LA    R5,IPL_L(,R5)                  UPDATE LENGTH\n         L     R1,CVTPTR\n         L     R2,CVTECVT                     ECVT ADDRESS\n         USING ECVT,R2                        DEFINE BASE\n         L     R8,ECVTIPA                     IPA ADDRESS\n         USING IPA,R8                         DEFINE BASE\n         ITRACE ID=IPA_DATA,                                           +\n               RDATA1=R8\n         LA    R6,PDE_TABLE\n         USING PDE_DSECT,R6\n         LA    R3,5                           NBR OF LINES SO FAR\nIPL0020  DS    0H\n         ITRACE ID=PDE,                                                +\n               DATA1=PDE_NAME\n         SR    R4,R4\n         ICM   R4,3,PDE_DISP                  DISP INTO IPA\n         AR    R4,R8                          PLUS BASE\n         USING IPAPDE,R4\n         MVC   IPL(IPL_L),COMM_BLANKS\n         MVC   IPL_NAME(L'PDE_NAME),PDE_NAME  COPY NAME\n         SR    R1,R1\n         ICM   R1,3,IPAPDESL                  PARAMETER LENGTH\n         BZ    IPL0060\n         CH    R1,=Y(L'IPL_DATA-10)\n         BNH   IPL0030\n         LH    R1,=Y(L'IPL_DATA-10)           LIMIT LENGTH\nIPL0030  DS    0H\n         BCTR  R1,R0\n         L     R2,IPAPDESA                    PARAMETER ADDRESS\n         EX    R1,PDE_MVC\n         CLI   IPAPDEDO+1,0                   DEFAULT?\n         BE    IPL0040\n         CLI   IPAPDEDO+1,X'FF'               OPERATOR SUPPLIED?\n         BE    IPL0050\n         MVC   IPL_DATA(2),IPAPDESS           COPY SUFFIX\n         B     IPL0060\nIPL0040  DS    0H\n         MVC   IPL_DATA(L'DEFAULT),DEFAULT\n         B     IPL0060\nIPL0050  DS    0H\n         MVC   IPL_DATA(L'OPERATOR),OPERATOR\nIPL0060  DS    0H\n         LA    R7,IPL_L(,R7)                  NEXT\n         LA    R5,IPL_L(,R5)                  ADD TO LENGTH\n         LA    R3,1(,R3)                      ADD 1 TO NBR OF ELEMENTS\n         LA    R6,PDE_DSECT_L(,R6)\n         CLI   0(R6),X'FF'\n         BNE   IPL0020\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R3,                                              +\n               RDATA2=R5\n         STCM  R3,15,IPL_NBR                  NBR OF DATA ELEMENTS\n         STCM  R5,3,NET_LENGTH                SET LENGTH\n         XC    NET_RC,NET_RC                  SET RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n\nPDE_MVC  MVC   IPL_DATA+10(0),0(R2)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDIPL)                      DISPLACEMENT TO WORK AREA\nF100      DC   F'100'\nF6000     DC   F'6000'\nF360000   DC   F'360000'\nP1900000  DC   P'1900000'\nDEFAULT   DC   C'DEFAULT'\nOPERATOR  DC   C'OPERATOR'\n\nDATE_EDITWORD  DC    X'40212020204B202020'\n\nIPL_DATE       DC    C'IPL DATE'\nIPL_DATE_L     EQU   *-IPL_DATE\n\nIPL_TIME       DC    C'IPL TIME'\nIPL_TIME_L     EQU   *-IPL_TIME\n\nIPL_VOLUME     DC    C'IPL VOLUME'\nIPL_VOLUME_L   EQU   *-IPL_VOLUME\n\nIPA_HEADING    DS    0C\n               DC    AL1($ATTR_HIGH)\n               DC    C'SYS1.PARMLIB parameters'\n               DC    AL1($ATTR_NORMAL)\nIPA_HEADING_L  EQU   *-IPA_HEADING\n\n         LTORG\nPDE_TABLE           DS  0C\n                    PDE ALLOC,ALLOC\n                    PDE APF,APF\n                    PDE APG,APG\n                    PDE BLDL,BLDL\n                    PDE BLDLF,BLDLF\n                    PDE CLOCK,CLOCK\n                    PDE CLPA,CLPA\n                    PDE CMB,CMB\n                    PDE CMD,CMD\n                    PDE CON,CON\n                    PDE CONT,CONT\n                    PDE COUPL,COUPLE\n                    PDE CPQE,CPQE\n                    PDE CSA,CSA\n                    PDE CSCBL,CSCBLOC\n                    PDE CVIO,CVIO\n                    PDE DEVSU,DEVSUP\n                    PDE DIAG,DIAG\n                    PDE DUMP,DUMP\n                    PDE DUPLE,DUPLEX\n                    PDE EXIT,EXIT\n                    PDE FIX,FIX\n                    PDE GRS,GRS\n                    PDE GRSCN,GRSCNF\n                    PDE GRSRN,GRSRNL\n                    PDE ICS,ICS\n                    PDE IOS,IOS\n                    PDE IPS,IPS\n                    PDE LNK,LNK\n                    PDE LNKAU,LNKAUTH\n                    PDE LOGCL,LOGCLS\n                    PDE LOGLM,LOGLMT\n                    PDE LOGRE,LOGREC\n                    PDE LPA,LPA\n                    PDE MAXCA,MAXCAD\n                    PDE MAXUS,MAXUSER\n                    PDE MLPA,MLPA\n                    PDE MSTRJ,MSTRJCL\n                    PDE NONVI,NONVIO\n                    PDE NSYSL,NSYSLX\n                    PDE NUCMA,NUCMAP\n                    PDE OMVS,OMVS\n                    PDE OPI,OPI\n                    PDE OPT,OPT\n                    PDE PAGEO,PAGE(OP)\n                    PDE PAGEP,PAGE(PL)\n                    PDE PAGNU,PAGENUM\n                    PDE PAGTO,PAGTOTL\n                    PDE PAK,PAK\n                    PDE PLEXC,PLEXCFG\n                    PDE PRODP,PRODP\n                    PDE PROG,PROG\n                    PDE PURGE,PURGE\n                    PDE RDE,RDE\n                    PDE REAL,REAL\n                    PDE RER,RER\n                    PDE RSU,RSU\n                    PDE RSVNO,RSVNONR\n                    PDE RSVST,RSVSTRT\n                    PDE SCH,SCH\n                    PDE SMF,SMF\n                    PDE SMS,SMS\n                    PDE SQA,SQA\n                    PDE SSN,SSN\n                    PDE SVC,SVC\n                    PDE SWAP,SWAP\n                    PDE SYSNA,SYSNAME\n                    PDE SYSP,SYSP\n                    PDE VAL,VAL\n                    PDE VIODS,VIODSN\n                    PDE VRREG,VRREGN\n                    PDE RTLSP,RTLS\n                    PDE UNIP,UNI\n                    PDE ILML,ILMLIB\n                    PDE ILMOD,ILMMODE\n                    PDE TSO,IKJTSO\n                    PDE LIC,LICENSE\n                    PDE HVSHARE,VSHAR\n                    PDE ILM,ILM\n                    PDE DRMOD,DRMODE\n                    PDE CEE,CEE\n                    PDE PRCPU,PRESCPU\n                    DC  X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPDE_DSECT           DSECT\nPDE_DISP            DS    AL2\nPDE_NAME            DS    CL8\nPDE_DSECT_L         EQU   *-PDE_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDIPL   DSECT\n         SUTLSAVE DSECT=NO\nDXD_DATE DS  PL4\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n         COPY     IPLDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT      DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IEFUCBOB LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAECVT  DSECT=YES,LIST=NO\n         IHAIPA   DSECT=YES,LIST=NO,IPAPDE=YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IEESMCA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY ATTR\n         COPY REGEQU\n         END  STCIPL\n./ ADD NAME=STCLLA   0104-09139-09160-1502-00131-00131-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCLLA                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the link list (LLA) display.                 *\n*                                                                     *\n*   The number of data sets that can be returned is limited by the    *\n*   I/O area size (VTAM limits the length to 32767).  If there are    *\n*   more data sets in the link list than can be copied to the I/O     *\n*   area, the return code will be set to 4 to inform the user that    *\n*   the data has been truncated.                                      *\n*                                                                     *\n*   Data returned is: the number of data sets in the list and a       *\n*   table of 44 byte long data set names.                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCLLA   CSECT\nSTCLLA   AMODE 31\nSTCLLA   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCLLA,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     LLA0000\nMODID    DC    CL8'STCLLA'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nLLA0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDLLA,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    LLA0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nLLA0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE I/O AREA BASE\n         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO\n         L     R1,CVTPTR                      CVT ADDRESS\n         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY\n         L     R8,CVTLLTA                     LINKLIST TABLE ADDRESS\n         CLC   LLT,0(R8)                      CONSTANT 'LLT ' PRESENT?\n         BNE   ERR0010                        NO...\n         L     R7,4(R8)                       NUMBER OF ENTRIES IN LLA\n         C     R7,MAX#                        MORE THAN WILL FIT?\n         BNH   LLA0020                        NO\n         ITRACE ID=OVERMAX,                   TOO MANY                 +\n               RDATA1=R7                      .. TRACE FULL NUMBER\n         L     R7,MAX#                        LIMIT TO NUMBER THAT FIT\n         MVC   NET_RC,X0004                   SET RETURN CODE TO 4\nLLA0020  DS    0H\n         LA    R8,8(,R8)                      FIRST NAME/LENGTH\n         STCM  R7,3,LLA_NBR_DSNS              NUMBER RETURNED\n         LA    R6,LLA_DATA                    INITIAL OUTPUT ADDRESS\n         LA    R5,NET_HEADER_L+LLA_HEADER_L   INITIALIZE OUTPUT LENGTH\n         USING LLA_DATA,R6                    DEFINE BASE\nLLA0030  DS    0H\n         SR    R1,R1                          CLEAR FOR DSN LENGTH\n         IC    R1,0(R8)                       LENGTH OF DSNAME\n         MVC   LLA_DSN,COMM_BLANKS            INITIALIZE DSN\n         BCTR  R1,0                           FOR EXECUTE\n         EX    R1,DSNMVC                      MOVE NAME\n         LA    R8,45(,R8)                     NEXT DATASET\n         LA    R5,LLA_DATA_L(,R5)             UPDATE OUTPUT LENGTH\n         LA    R6,LLA_DATA_L(,R6)             UPDATE OUTPUT ADDRESS\n         BCT   R7,LLA0030                     PROCESS ALL DATASETS\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R5                      .. OUTPUT LENGTH\n         STCM  R5,3,NET_LENGTH                SET LENGTH\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS   0H\n         ITRACE ID=NOLLT\n         ABEND $U0010,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\nDSNMVC   MVC   LLA_DSN(0),1(R8)               COPY DATASET NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDLLA)                      DISPLACEMENT TO WORK AREA\nMAX#     DC    A((32760-LLA_HEADER_L)/LLA_DATA_L)\nLLT      DC    CL4'LLT '\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDLLA   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n         COPY     LLADATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCLLA\n./ ADD NAME=STCLRAD  0100-09250-09250-1028-00050-00050-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCLRAD                                               *\n*                                                                     *\n*  STC LERAD exit                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCLRAD  CSECT\nSTCLRAD  AMODE 31\nSTCLRAD  RMODE ANY\n         USING STCLRAD,R15           DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'STCLRAD'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         LA    R3,GOODRC             GOOD RETURN CODES TABLE\nLERAD020 DS    0H\n         CLI   0(R3),X'FF'           END OF TABLE\n         BE    LERAD030              NO GOOD\n         CLC   RPL6RC,0(R3)          ACCEPTABLE?\n         BE    EXIT0000              YES, EXIT\n         LA    R3,4(R3)              NEXT CODE\n         B     LERAD020              LOOP\nLERAD030 DS    0H\n         L     R4,RPL6RC             MAKE RC EASY TO FIND\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*              CONSTANTS                                             *\n* ------------------------------------------------------------------ *\nGOODRC   DS    0C\n         DC    X'00000000'           GOOD\n         DC    X'00000001'           CNOS ACCEPTED BY PARTNER\n         DC    X'FF'\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  STCLRAD\n./ ADD NAME=STCMAIN  0144-09140-09173-1702-00758-00606-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: STCMAIN                                                      *\n*                                                                     *\n*  Purpose: STC Mainline                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nSTCMAIN  CSECT\nSTCMAIN  AMODE 31\nSTCMAIN  RMODE ANY\n         USING STCMAIN,R11                    DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     @0000000                       BRANCH AROUND EYECATCHER\nMODID    DC    CL8'STCMAIN'                   MODULE NAME\n         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY\n* ------------------------------------------------------------------- *\n*        Acquire storage for work areas                               *\n* ------------------------------------------------------------------- *\n@0000000 DS    0H\n         L     R3,DXD_SIZE                    WORK AREA SIZE\n         GETMAIN RU,                          ACQUIRE WORK AREA STORAGE+\n               LV=(R3),                       .. WORK AREA SIZE        +\n               LOC=ANY                        .. MAY BE ABOVE OR BELOW\n         LR    R5,R1                          COPY STORAGE ADDRESS\n         LR    R10,R1                         COPY STORAGE ADDRESS\n         LR    R2,R1                          COPY WORK AREA ADDRESS\n         SR    R1,R1                          CLEAR REGISTER\n         MVCL  R2,R0                          CLEAR WORK AREA\n         A     R10,DXD_START                  PLUS DISPLACEMENT\n         ST    R13,4(,R10)                    CHAIN SAVE AREAS\n         ST    R10,8(,R13)                    OUR SAVE AREA TO CALLER'S\n         LR    R13,R10                        SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13                    DEFINE NEW BASE\n         MVC   DXD_ID,MODID                   IDENTIFY WORK AREA OWNER\n         MVC   DXD_ENQ(ENQL),ENQI             INITIALIZE ENQ LIST FORM\n         MVC   DXD_DEQ(DEQL),DEQI             INITIALIZE DEQ LIST FORM\n* ------------------------------------------------------------------- *\n*        Load common data module  (STCCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=STCCOMM                     LOAD COMMON DATA MODULE\n         LR    R12,R0                         COPY TO PERMANENT BASE\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n* ------------------------------------------------------------------- *\n*        Initialize common area                                       *\n* ------------------------------------------------------------------- *\n         ST    R5,COMM_DXD_ADDRESS            WORK AREA ADDRESS\n         MVC   COMM_DXD_LENGTH,DXD_SIZE\n         ST    R11,AMAIN                      MAINLINE'S ADDRESS\n         MVC   AATTN,VATTN                    VTAM ATTN EXIT ADDRESS\n         MVC   ALRAD,VLRAD                    LERAD EXIT ADDRESS\n         MVC   APRTQ,VPRTQ                    PRINT QUEUEING ADDR\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE                      TRACE TABLE SIZE\n         GETMAIN RU,                          STORAGE FOR TRACE TABLE  +\n               LV=(R3),                       .. SIZE IS IN R3         +\n               LOC=ANY                        .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR                      SAVE ADDRESS\n         SR    R0,R0\n         TM    TRADDR+3,X'07'                 ON 32-BYTE BOUNDARY?\n         BNO   INIT0010                       YES\n         SRL   R1,5                           SHIFT OUT LOW BITS ..\n         SLL   R1,5                           .. TO ROUND TO BOUNDARY\n         LA    R1,32(,R1)                     PLUS 32\n         LA    R0,TRENTRYL                    1 LESS ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST                     FIRST TRACE ENTRY\n         ST    R1,TRCURR                      CURRENT TRACE ENTRY\n         A     R1,TRSIZE                      LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)                MINUS 1 ENTRY\n         SR    R1,R0                          MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST                      LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INITIAL\n* ------------------------------------------------------------------- *\n*        ATTACH print sub-task                                        *\n* ------------------------------------------------------------------- *\nINIT0020 DS    0H\n         MVC   DXD_TASK,PRINT\n         MVC   DXD_ATTACH(ATTCHL),ATTACH_I\n         LA    R2,PRT_TERM_ECB                TERMINATION ECB'S ADDRESS\n         LA    R3,DXD_APARM                   PARM LIST ADDRESS\n         ITRACE ID=ATCHPRT                    ATTACHING PRINT SUBTASK\n         ATTACH EP=STCPRTS,                   ATTACH PRINT SUBTASK     +\n               PARAM=((R12)),                 .. STCCOMM ADDRESS       +\n               ECB=(R2),                      .. TERMINATION ECB       +\n               PURGE=QUIESCE,                 .. FINISH UP I/O         +\n               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +\n               SF=(E,DXD_ATTACH)              ..\n         LTR   R15,R15                        ATTACH SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ST    R1,PRT_TCB                     SAVE TCB ADDRESS\n         ITRACE ID=PRTOK,                     ATTACH SUCCESSFUL        +\n               RDATA1=R1\n         OI    COMM_TASKS,$TASKS_PRINT        PRINT SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        Print start-up messages                                      *\n* ------------------------------------------------------------------- *\n         MVI   PRT_CC,C' '                    SINGLE SPACE\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         MVI   PRT_COMMAND,$PRT_HEAD          COMMAND (PRINT HEADING)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        ADD REQUEST TO QUEUE\n         MVC   PRT_MSGID(MSG01L),MSG01\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         MVC   PRT_MSGID(MSG02L),MSG02\n         BAL   R9,PRT0000                     PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*        Call parameter interpreter                                   *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         LOAD  EP=STCPARM                     LOAD PARM CONVERTER\n         LR    R15,R0                         COPY ENTRY POINT\n         ITRACE ID=CALLPARM,                                           +\n               RDATA1=R15\n         BALR  R14,R15                        LINK TO PARM INTERPRETER\n         ITRACE ID=PARM_X\n         DELETE EP=STCPARM                    DELETE PARM cONVERTER\n         TM    COMM_FLAG,$ABORT               ERRORS IN PARAMETERS?\n         BO    ERR0020                        YES\n         CLC   COMM_APPL_NAME,COMM_BLANKS     APPL NAME GIVEN?\n         BNE   INIT0040                       YES\n         OC    COMM_PORT,COMM_PORT            PORT GIVEN\n         BZ    ERR0030                        NO\n* ------------------------------------------------------------------- *\n*        Set effective userid                                         *\n* ------------------------------------------------------------------- *\nINIT0040 DS    0H\n         ITRACE ID=SET_UID\n         CALL  BPX1SEU,                       CALL UNIX SERVICE        +\n               (ZERO,                                                  +\n               DXD_RETURN_VALUE,                                       +\n               DXD_RETURN_CODE,                                        +\n               DXD_REASON_CODE),                                       +\n               VL,                                                     +\n               MF=(E,DXD_PARMLIST)\n         ITRACE ID=RC,                                                 +\n               DATA1=DXD_RETURN_VALUE,                                 +\n               DATA2=DXD_REASON_CODE\n         TM    DXD_RETURN_VALUE,X'80'         SUCCESSFUL?\n         BZ    INIT0050                       YES\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*        ATTACH console subtask                                       *\n* ------------------------------------------------------------------- *\nINIT0050 DS    0H\n         MVC   DXD_TASK,CONSOLE\n         LA    R2,CONS_TERM_ECB               TERMINATION ECB\n         LA    R3,DXD_APARM                   PARM LIST ADDRESS\n         ITRACE ID=ATCHCONS                   ATTACHING CONSOLE SUBTASK\n         ATTACH EP=STCCONS,                   ATTACH CONSOLE SUBTASK   +\n               PARAM=((R12)),                 .. STCCOMM ADDRESS       +\n               ECB=(R2),                      .. TERMINATION ECB       +\n               PURGE=QUIESCE,                 .. FINISH UP I/O         +\n               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +\n               SF=(E,DXD_ATTACH)              ..\n         LTR   R15,R15                        ATTACH SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ST    R1,CONS_TCB                    SAVE TCB ADDRESS\n         ITRACE ID=CONSOK,                    SUBTASK ATTACH SUCCESSFUL+\n               RDATA1=R1\n         OI    COMM_TASKS,$TASKS_CONSOLE      CONSOLE SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        ATTACH VTAM SUBTASK                                          *\n* ------------------------------------------------------------------- *\n         CLC   COMM_APPL_NAME,COMM_BLANKS     APPLID GIVEN?\n         BE    INIT0060                       NO\n         MVC   DXD_TASK,VTAM\n         LA    R2,VTAM_TERM_ECB               TERMINATION ECB\n         LA    R3,DXD_APARM                   PARM LIST ADDRESS\n         ITRACE ID=ATCHVTAM                   ATTACHING VTAM\n         ATTACH EP=VTAMSUB,                   ATTACH VTAM SUBTASK      +\n               PARAM=((R12)),                 .. STCCOMM ADDRESS       +\n               ECB=(R2),                      .. TERMINATION ECB       +\n               PURGE=QUIESCE,                 .. FINISH UP I/O         +\n               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +\n               SF=(E,DXD_ATTACH)              ..\n         LTR   R15,R15                        ATTACH SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ST    R1,VTAM_TCB                    SAVE TCB ADDRESS\n         ITRACE ID=VTAMOK,                    SUBTASK ATTACH SUCCESSFUL+\n               RDATA1=R1\n         OI    COMM_TASKS,$TASKS_VTAM         VTAM SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*        ATTACH TCP/IP SUBTASK                                        *\n* ------------------------------------------------------------------- *\nINIT0060 DS    0H\n         OC    COMM_PORT,COMM_PORT            PORT GIVEN\n         BZ    PROC0000                       NO\n         MVC   DXD_TASK,TCPIP\n         LA    R2,TCPIP_TERM_ECB              TERMINATION ECB\n         LA    R3,DXD_APARM                   PARM LIST ADDRESS\n         ITRACE ID=ATCH_IP                    ATTACHING TCPIP SUBTASK\n         ATTACH EP=TCPIPSUB,                  ATTACH TCPIP SUBTASK     +\n               PARAM=((R12)),                 .. STCCOMM ADDRESS       +\n               ECB=(R2),                      .. TERMINATION ECB       +\n               PURGE=QUIESCE,                 .. FINISH UP I/O         +\n               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +\n               SF=(E,DXD_ATTACH)              ..\n         LTR   R15,R15                        ATTACH SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ST    R1,TCPIP_TCB                   SAVE TCB ADDRESS\n         ITRACE ID=TCPIP_OK,                  SUBTASK ATTACH SUCCESSFUL+\n               RDATA1=R1\n         OI    COMM_TASKS,$TASKS_TCPIP        TCPIP SUBTASK IS ACTIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Wait for                                                         *\n*       The NET ECB to be posted by STCATTN or TCPIPSUB               *\n*       The console ECB                                               *\n*       One of the user subtasks to terminate                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPROC0000 DS    0H\n         LA    R2,2                           INITIALIZE NBR OF ECB'S\n         ICM   R10,15,COMM_USERS              1ST USER\n         BZ    PROC0020                       NO USERS\nPROC0010 DS    0H\n         LA    R2,1(,R2)                      ADD 1 TO NBR OF TASKS\n         ITRACE ID=ADD,                                                +\n               RDATA1=R2\n         ICM   R10,15,USER_NEXT               ANOTHER USER?\n         BNZ   PROC0010                       YES\nPROC0020 DS    0H\n         LR    R3,R2                          COPY NBR OF ECBS\n         SLL   R3,2                           MULITPLY BY 4\n         ITRACE ID=GETLIST,                                            +\n               RDATA1=R2,                                              +\n               RDATA2=R3\n         ST    R2,DXD_ECBLIST_NBR             SAVE NBR OF ECB'S\n         ST    R3,DXD_ECBLIST_LENGTH          SAVE LENGTH OF ECB LIST\n         GETMAIN RU,                                                   +\n               LV=(R3),                                                +\n               LOC=ANY\n         ST    R1,DXD_ECBLIST_ADDR            SAVE ECB LIST ADDRESS\n         LR    R4,R1\n         ITRACE ID=ECBLIST,                                            +\n               RDATA1=R4\n         LA    R0,COMM_TERM_ECB               ECB POSTED BY STCCONS\n         ST    R0,0(,R1)                      SAVE ECB ADDRESS\n         LA    R0,COMM_NET_ECB                ATTN EXIT ECB ADDRESS\n         ST    R0,4(,R1)                      SAVE ECB ADDRESS\n         LA    R1,8(,R1)                      UPDATE CURRENT ADDR\n         ICM   R10,15,COMM_USERS              FIRST USER\n         BZ    PROC0040                       NO USERS\nPROC0030 DS    0H\n         LA    R0,USER_TERM_ECB               USER'S TERMINATION ECB\n         ST    R0,0(,R1)                      SAVE ADDRESS\n         LA    R1,4(,R1)                      UPDATE ADDRESS\n         ICM   R10,15,USER_NEXT               ANOTHER USER?\n         BNZ   PROC0030                       YES\nPROC0040 DS    0H\n         SH    R1,H4                          MINUS 1 ECB\n         OI    0(R1),X'80'                    FLAG END OF LIST\n         ITRACE ID=MAINWAIT                   MAINLINE IS WAITING\n         WAIT  1,ECBLIST=(R4)                 WAIT\n         ITRACE ID=WOKEUP                     MAILINE IS RUNNING\n         L     R0,DXD_ECBLIST_LENGTH\n         FREEMAIN RU,                                                  +\n               A=(R4),                                                 +\n               LV=(0)\n         TM    COMM_TERM_ECB,X'40'            TERMINATION ECB POSTED?\n         BO    EXIT0000                       YES\n         XC    COMM_NET_ECB,COMM_NET_ECB      RESET ECB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ENQ   MF=(E,DXD_ENQ)                 ENQ USER BLOCK CHAIN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R1,COMM_USERS                  CHAIN POINT\n         ICM   R10,15,COMM_USERS              FIRST NEW USER\n         BZ    PROC0000                       NO USERS\nPROC0060 DS    0H\n         TM    USER_STATUS,$USER_LOST         LOST CONNECTION?\n         BO    PROC0100                       YES\n         TM    USER_STATUS,$USER_DEALLOCATE   CONNECTION DEALLOCATED?\n         BO    PROC0110\n         TM    USER_TERM_ECB,X'40'            USER TASK TERMINATED?\n         BO    PROC0120\n         TM    USER_STATUS,$USER_INITIAL      IN INITIAL STATE?\n         BO    PROC0070                       YES\n         B     PROC0140                       JUST ANOTHER STUPID USER\nPROC0070 DS    0H\n         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?\n         BO    PROC0080                       YES\n         MVC   PRT_MSGID(MSG17L),MSG17\n         MVC   PRT_MSGID+(MSG17LU-MSG17)(L'MSG17LU),USER_LU\n         UNPK  PRT_MSGID+(MSG17CID-MSG17)(9),USER_CID(5)\n         TR    PRT_MSGID+(MSG17CID-MSG17)(8),HEXCHAR\n         MVI   PRT_MSGID+(MSG17CID-MSG17)+8,C' '\n         B     PROC0090\nPROC0080 DS    0H\n         MVC   PRT_MSGID(MSG09L),MSG09\n         MVC   PRT_MSGID+(MSG09IP-MSG09)(L'MSG09IP),USER_IP_ADDRESS\nPROC0090 DS    0H\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         ITRACE ID=NEWUSER,                   NEW USER                 +\n               RDATA1=R10,                                             +\n               DATA2=USER_ID\n         GETMAIN RU,                                                   +\n               LV=32760,                                               +\n               LOC=ANY\n         ITRACE ID=USER_IO,                                            +\n               RDATA1=R1\n         ST    R1,USER_IO                     SAVE I/O AREA ADDRESS\n         LA    R2,USER_TERM_ECB               TERMINATION ECB'S ADDRESS\n         LA    R3,DXD_APARM                   PARM LIST ADDRESS\n         ST    R12,USER_COMM                  SET STCCOMM ADDRESS\n         ATTACH EP=STCUSER,                   ATTACH USER SUBTASK      +\n               PARAM=((R10)),                 .. PARAMETER IS USERBLOK +\n               ECB=(R2),                      .. TERMINATION ECB       +\n               PURGE=QUIESCE,                 .. FINISH UP I/O         +\n               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +\n               SF=(E,DXD_ATTACH)              ..\n         LTR   R15,R15                        ATTACH SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         ST    R1,USER_TCB                    SAVE TCB ADDRESS\n         NI    USER_STATUS,255-$USER_INITIAL  TURN OFF INITIAL STATE\n         OI    USER_STATUS,$USER_ACTIVE       SUBTASK ATTACHED\n         B     PROC0140\nPROC0100 DS    0H\n         ITRACE ID=LOST,                                               +\n               DATA1=USER_LU,                                          +\n               DATA2=USER_ID\n         B     PROC0130\nPROC0110 DS    0H\n         ITRACE ID=DEALLOC,                                            +\n               DATA1=USER_LU,                                          +\n               DATA2=USER_ID\n         B     PROC0130\nPROC0120 DS    0H\n         ITRACE ID=ABENDED,                                            +\n               RDATA1=R10,                                             +\n               DATA2=USER_ID\nPROC0130 DS    0H\n         BAL   R8,PROC0200                    CLEAN-UP THIS USER\n         B     PROC0150\nPROC0140 DS    0H\n         ICM   R10,15,USER_NEXT               NEXT USER\nPROC0150 DS    0H\n         LTR   R10,R10                        ANOTHER USER?\n         BNZ   PROC0060                       YES\n         ITRACE ID=DEQ\n         DEQ   MF=(E,DXD_DEQ)                 UNLOCK USER CHAIN\n         B     PROC0000                       RE-BUILD WAIT LIST\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPROC0200 DS    0H\n         LA    R1,USER_TERM_ECB\n         ITRACE ID=WAIT,                                               +\n               RDATA1=R1\n         WAIT  ECB=USER_TERM_ECB              WAIT FOR SUBTASK\n         ITRACE ID=NETCLEAN\n         TM    USER_STATUS,$USER_CLEANUP      NETWORK CLEANUP NEEDED?\n         BO    PROC0210                       NO.. ALREADY DONE\n         MVI   USER_NET_COMMAND,$USER_NET_CLEANUP\n         L     R15,USER_NET                   NETWORK FUNCTION EP\n         BALR  R14,R15                        ALLOW CLEAN-UP\n         ITRACE ID=CLEAN_X\nPROC0210 DS    0H\n         L     R1,USER_IO                     I/O AREA ADDRESS\n         ITRACE ID=FREE_IO,                                            +\n               RDATA1=R1\n         FREEMAIN RU,                         FREE I/O AREA            +\n               A=(1),                                                  +\n               LV=32760\n         ITRACE ID=DETACH,                                             +\n               DATA1=USER_TCB\n         DETACH USER_TCB                      DETACH USER SUBTASK\n         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?\n         BO    PROC0220\n         MVC   PRT_MSGID(MSG03L),MSG03\n         MVC   PRT_MSGID+(MSG03ID-MSG03)(L'MSG03ID),USER_ID\n         UNPK  PRT_MSGID+(MSG03RC-MSG03)(9),USER_TERM_ECB(5)\n         TR    PRT_MSGID+(MSG03RC-MSG03)(8),HEXCHAR\n         MVI   PRT_MSGID+(MSG03RC-MSG03)+8,C' '\n         MVC   PRT_MSGID+(MSG03LU-MSG03)(L'MSG03LU),USER_LU\n         B     PROC0230\nPROC0220 DS    0H\n         MVC   PRT_MSGID(MSG08L),MSG08\n         MVC   PRT_MSGID+(MSG08ID-MSG08)(L'MSG08ID),USER_ID\n         UNPK  PRT_MSGID+(MSG08RC-MSG08)(9),USER_TERM_ECB(5)\n         TR    PRT_MSGID+(MSG08RC-MSG08)(8),HEXCHAR\n         MVI   PRT_MSGID+(MSG08RC-MSG08)+8,C' '\n         MVC   PRT_MSGID+(MSG08IP-MSG08)(L'MSG08IP),USER_IP_ADDRESS\nPROC0230 DS    0H\n         BAL   R9,PRT0000                     PRINT\n         OC    USER_TERM_ECB+1(3),USER_TERM_ECB+1\n         BZ    PROC0235\n         ITRACE ID=NOTCLEAN,                                           +\n               DATA1=USER_TERM_ECB\n         DC    H'0'\nPROC0235 DS    0H\n         ICM   R1,15,USER_PREV                PREVIOUS BLOCK?\n         BZ    PROC0240                       NO\nPREV     USING USERBLOK,R1\n         MVC   PREV.USER_NEXT,USER_NEXT       CHAIN NEXT TO PREVIOUS\n         DROP  PREV\nPROC0240 DS    0H\n         ICM   R1,15,USER_NEXT                NEXT BLOCK?\n         BZ    PROC0250                       NO\nNEXT     USING USERBLOK,R1\n         MVC   NEXT.USER_PREV,USER_PREV       CHAIN PREVIOUS TO NEXT\n         DROP  NEXT\nPROC0250 DS    0H\n         C     R10,COMM_USERS                 1ST USER ON CHAIN?\n         BNE   PROC0260                       NO\n         MVC   COMM_USERS,USER_NEXT           COPY NEXT USER'S ADDR\nPROC0260 DS    0H\n         LR    R1,R10                         COPY USERBLOK ADDR\n         ICM   R10,15,USER_NEXT               NEXT BLOCK ON CHAIN\n         ITRACE ID=FREEUSER,                                           +\n               RDATA1=R1\n         FREEMAIN RU,                         FREE USERBLOK            +\n               A=(R1),                                                 +\n               LV=USER_L\n         BR    R8\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=ATCHFAIL                   SUBTASK ATTACH FAILED\n         STH   R15,DXD_RC                     SAVE RETURN CODE\n         MVC   PRT_MSGID(MSG04L),MSG04\n         MVC   PRT_MSGID+(MSG04TSK-MSG04)(L'MSG04TSK),DXD_TASK\n         UNPK  PRT_MSGID+(MSG04R-MSG04)(5),DXD_RC(3)\n         TR    PRT_MSGID+(MSG04R-MSG04)(L'MSG04R),HEXCHAR\n         MVI   PRT_MSGID+(MSG04R-MSG04)+4,C' '\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         ABEND $U0001,DUMP,,USER              TIME TO FIX SUTL\nERR0020  DS    0H\n         MVC   PRT_MSGID(MSG05L),MSG05        ERRORS IN PARAMETERS\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         B     EXIT0000                       AND EXIT\nERR0030  DS    0H\n         MVC   PRT_MSGID(MSG06L),MSG06\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         B     EXIT0000                       AND EXIT\nERR0040  DS    0H\n         ITRACE ID=DTCHFAIL                   SUBTASK DETACH FAILED\n         STH   R15,DXD_RC                     SAVE RETURN CODE\n         MVC   PRT_MSGID(MSG07L),MSG07\n         MVC   PRT_MSGID+(MSG07TSK-MSG07)(L'MSG07TSK),DXD_TASK\n         UNPK  PRT_MSGID+(MSG07R-MSG07)(5),DXD_RC(3)\n         TR    PRT_MSGID+(MSG07R-MSG07)(L'MSG07R),HEXCHAR\n         MVI   PRT_MSGID+(MSG07R-MSG07)+4,C' '\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         ABEND $U0002,DUMP,,USER              TIME TO FIX SUTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        A REQUEST TO QUEUE\n         BR    R9                             COMPLETE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=STARTEOJ\n         MVC   PRT_MSGID(MSG11L),MSG11\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         OC    COMM_USERS,COMM_USERS          ANY USERS LOGGED IN?\n         BZ    EXIT0030                       NO\n         MVC   PRT_MSGID(MSG12L),MSG12\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         ITRACE ID=ENQ\n         ENQ   MF=(E,DXD_ENQ)                 ENQ USER CHAIN\nEXIT0010 DS    0H\n         ICM   R10,15,COMM_USERS              FIRST USER\n         BZ    EXIT0020\n         ITRACE ID=CLEAN_UP,                                           +\n               RDATA1=R10,                                             +\n               DATA2=USER_ID\n         POST  USER_NET_ECB\n         BAL   R8,PROC0200                    CLEAN-UP THIS USER\n         B     EXIT0010\nEXIT0020 DS    0H\n         MVC   PRT_MSGID(MSG13L),MSG13\n         BAL   R9,PRT0000                     PRINT MESSAGE\n         ITRACE ID=DEQ\n         DEQ   MF=(E,DXD_DEQ)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0030 DS    0H\n         ITRACE ID=EOJ2\n         OI    COMM_EOJ,$EOJ1+$EOJ2          SET EOJ STAGE 2\n         TM    COMM_TASKS,$TASKS_VTAM        VTAM SUBTASK ATTACHED?\n         BNO   EXIT0040                      NO\n         MVC   PRT_MSGID(MSG14L),MSG14\n         BAL   R9,PRT0000                    PRINT MESSAGE\n         ITRACE ID=POSTVTAM\n         POST  VTAM_WORK_ECB                 WAKE UP VTAM SUBTASK\n         ITRACE ID=WAIT\n         WAIT  ECB=VTAM_TERM_ECB             WAIT FOR IT TO TERMINATE\n         ITRACE ID=DTCHVTAM,                                           +\n               DATA1=VTAM_TERM_ECB,                                    +\n               DATA2=VTAM_TCB\n         DETACH VTAM_TCB                     DETACH VTAM SUBTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0040 DS    0H\n         TM    COMM_TASKS,$TASKS_TCPIP       TCP/IP SUBTASK ATTACHED?\n         BNO   EXIT0050                      NO\n         MVC   PRT_MSGID(MSG15L),MSG15\n         BAL   R9,PRT0000                    PRINT MESSAGE\n         ITRACE ID=POST_IP\n         POST  TCPIP_WORK_ECB                WAKE UP TCP/IP SUBTASK\n         ITRACE ID=WAIT\n         WAIT  ECB=TCPIP_TERM_ECB            WAIT FOR IT TO TERMINATE\n         ITRACE ID=DTCH_IP,                                            +\n               DATA1=TCPIP_TERM_ECB,                                   +\n               DATA2=TCPIP_TCB\n         DETACH TCPIP_TCB                    DETACH TCPIP SUBTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0050 DS    0H\n         OI    COMM_EOJ,$EOJ1+$EOJ2+$EOJ3    SET EOJ STAGE 3\n         TM    COMM_TASKS,$TASKS_CONSOLE     CONSOLE TASK ATTACHED?\n         BNO   EXIT0060                      NO\n         MVC   PRT_MSGID(MSG16L),MSG16\n         BAL   R9,PRT0000                    PRINT MESSAGE\n         ITRACE ID=POSTCONS\n         POST  CONS_WORK_ECB\n         ITRACE ID=WAIT\n         WAIT  ECB=CONS_TERM_ECB             WAIT FOR CONSOLE TASK\n         ITRACE ID=DTCHCONS,                 DETACHING CONSOLE SUBTASK +\n               DATA1=CONS_TERM_ECB,                                    +\n               DATA2=CONS_TCB\n         DETACH CONS_TCB                     DETACH CONSOLE SUBTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0060 DS    0H\n         ITRACE ID=EOJ8\n         MVC   PRT_MSGID(MSG90L),MSG90\n         BAL   R9,PRT0000                    PRINT MESSAGE\n         OI    COMM_EOJ,$EOJ1+$EOJ2+$EOJ3+$EOJ4+$EOJ5+$EOJ6+$EOJ7+$EOJ8\n         ITRACE ID=PRT_EOJ                   SHUTTING DOWN PRINT\n         POST  PRT_WORK_ECB                  SHUTDOWN PRINT TASK\n         WAIT  ECB=PRT_TERM_ECB              WAIT FOR PRINT SUBTASK\n         ITRACE ID=DTCH_PRT,                                           +\n               DATA1=PRT_TERM_ECB,                                     +\n               DATA2=PRT_TCB\n         DETACH PRT_TCB                      DETACH PRINT SUBTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R0,TRSIZE                     TRACE TABLE SIZE\n         L     R1,TRADDR                     TRACE TABLE ADDRESS\n         FREEMAIN RU,                        FREEMAIN TRACE TABLE      +\n               A=(1),                                                  +\n               LV=(0)\n         L     R2,COMM_DXD_ADDRESS           SAVE WORK AREA ADDRESS\n         L     R3,DXD_SIZE                   WORK AREA SIZE\n         DELETE EP=STCCOMM                   DELETE COMMON MODULE\n         L     R13,4(,R13)                   RESTORE R13\n         FREEMAIN RU,                        FREEMAIN WORK AREA        +\n               A=(R2),                                                 +\n               LV=(R3)\n         LM    R14,R12,12(R13)               RESTORE REGISTERS\n         SR    R15,R15                       CLEAR REGISTER\n         BR    R14                           EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDMAIN)           DISPLACEMENT TO WORK AREA\nDXD_SIZE CXD                        WORK AREA TOTAL SIZE\nVATTN    DC    V(STCATTN)           VTAM ATTENTION EXIT ENTRY POINT\nVLRAD    DC    V(STCLRAD)           VTAM LERAD EXIT ENTRY POINT\nVNET     DC    V(STCNET)            NETWORK FUNCTIONS\nVPRTQ    DC    V(STCPRTQ)           PRINTER MODULE ENTRY POINT\nVTCPIP   DC    V(STCTCPIP)          TCPIP FUNCTIONS\nVVTAM    DC    V(STCVTAM)           VTAM FUNCTIONS\nATTACH_I ATTACH EP=STCPRT,          ATTACH LIST FORM                   +\n               ECB=*,               .. TERMINATION ECB'S ADDRESS       +\n               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +\n               SF=L                 .. LIST FORM\nATTCHL   EQU   *-ATTACH_I\nENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +\n               RET=HAVE,                                               +\n               SMC=NONE,                                               +\n               MF=L\nENQL     EQU   *-ENQI\nDEQI     DEQ   (QNAME,RNAME,,STEP),                                    +\n               RMC=NONE,                                               +\n               MF=L\nDEQL     EQU   *-DEQI\n\nZERO     DC    F'0'\n\nH4       DC    H'4'\n\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n\nQNAME    DC    CL8'SUTL'\nRNAME    DC    C'USERBLOK CHAIN'\nPRINT    DC    CL8'PRINT'\nCONSOLE  DC    CL8'CONSOLE'\nTCPIP    DC    CL8'TCP/IP'\nVTAM     DC    CL8'VTAM'\nMSG01    DS    0C\n         DC    CL11'STCMAIN01I'\n         DC    C'Print subtask attached'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCMAIN02I'\n         DC    C'Initialization starting'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'STCMAIN03I'\n         DC    C'User subtask for '\nMSG03ID  DC    CL8' '\n         DC    C', using VTAM LU '\nMSG03LU  DC    CL8' '\n         DC    C'terminated, ECB='\nMSG03RC  DC    CL8' '\n         DC    C' '\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'STCMAIN04E'\nMSG04TSK DC    CL8' '\n         DC    C' subtask attach failed, RC='\nMSG04R   DC    CL4' '\n         DC    C' execution aborted'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'STCMAIN05E'\n         DC    C'Error(s) detected in control statements, execution abo+\n               rted'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'STCMAIN06E'\n         DC    C'APPLID or PORT is required'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'STCMAIN07E'\nMSG07TSK DC    CL8' '\n         DC    C' subtask detach failed, RC='\nMSG07R   DC    CL4' '\n         DC    C' '\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'STCMAIN08I'\n         DC    C'User subtask for '\nMSG08ID  DC    CL8' '\n         DC    C', IP address '\nMSG08IP  DC    CL15' '\n         DC    C' terminated, ECB='\nMSG08RC  DC    CL8' '\n         DC    C' '\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'STCMAIN09I'\n         DC    C'Attaching subtask for USER with IP address '\nMSG09IP  DC    CL15' '\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'STCMAIN10I'\n         DC    C'Termination beginning, logging off users'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'STCMAIN11I'\n         DC    C'Shutting down'\nMSG11L   EQU   *-MSG11\nMSG12    DS    0C\n         DC    CL11'STCMAIN12I'\n         DC    C'Logging off users'\nMSG12L   EQU   *-MSG12\nMSG13    DS    0C\n         DC    CL11'STCMAIN13I'\n         DC    C'All users logged off'\nMSG13L   EQU   *-MSG13\nMSG14    DS    0C\n         DC    CL11'STCMAIN14I'\n         DC    C'Detaching VTAM subtask'\nMSG14L   EQU   *-MSG14\nMSG15    DS    0C\n         DC    CL11'STCMAIN15I'\n         DC    C'Detaching TCP/IP subtask'\nMSG15L   EQU   *-MSG15\nMSG16    DS    0C\n         DC    CL11'STCMAIN16I'\n         DC    C'Detaching Console subtask'\nMSG16L   EQU   *-MSG16\nMSG17    DS    0C\n         DC    CL11'STCMAIN17I'\n         DC    C'Attaching subtask for user with VTAM LU '\nMSG17LU  DC    CL8' '\n         DC    C'  CID '\nMSG17CID DC    CL8' '\n         DC    C' '\nMSG17L   EQU   *-MSG17\nMSG90    DS    0C\n         DC    CL11'STCMAIN90I'\n         DC    C'Termination complete'\nMSG90L   EQU   *-MSG90\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMAIN           DSECT\n                  SUTLSAVE DSECT=NO  WORK AREA PREFIX\nDXD_APARM         DS    A            ATTACH PARM\n\nDXD_ECBLIST_NBR    DS   F            NBR OF ECB'S IN WAIT LIST\nDXD_ECBLIST_LENGTH DS   F            LENGTH OF WAIT ECBLIST\nDXD_ECBLIST_ADDR   DS   A            ADDRESS OF WAIT ECBLIST\n\nDXD_RETURN_VALUE   DS   F\nDXD_RETURN_CODE    DS   F\nDXD_REASON_CODE    DS   F\n\nDXD_PARMLIST       DS   5A\n\nDXD_ATTACH        DS    (ATTCHL)X    RESERVE ROOM FOR ATTACH LIST FORM\nDXD_ENQ           DS    (ENQL)X      RESERVE ROOM FOR ENQ LIST FORM\nDXD_DEQ           DS    (DEQL)X      RESERVE ROOM FOR DEQ LIST FORM\nDXD_RC            DS    H            RETURN CODE FROM SYSTEM MACRO\nDXD_TASK          DS    CL8          TASK BEING ATTACHED TO DETACHED\n                  PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCMAIN\n./ ADD NAME=STCNET   0107-09149-09160-1503-00102-00227-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCNET                                                *\n*                                                                     *\n*  Perform NETWORK functions.                                         *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Common area address                                *\n*             R11  Calling module's base address                      *\n*             R10  USERBLOK address                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCNET   CSECT\nSTCNET   AMODE 31\nSTCNET   RMODE ANY\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCNET,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     NET0000\nMODID    DC    CL8'STCNET'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nNET0000  DS    0H\n         L     R1,USER_DXD_ADDR               DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART\n         ST    R13,4(,R1)                     CHAIN WORK AREA\n         ST    R1,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         USING DXDNET,R13                     DEFINE BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    NET0010                        YES\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nNET0010  DS    0H\n         ITRACE ID=ENTRY\n         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?\n         BO    NET0020                        YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=VTAM\n         L     R15,USER_VTAM\n         B     NET0030\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nNET0020  DS    0H\n         ITRACE ID=USER_TCPIP\n         L     R15,VTCPIP\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nNET0030  DS    0H\n         ITRACE ID=CALL,                                               +\n               RDATA1=R15\n         BALR  R14,R15                        CALL VTAM OR TCPIP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    CALLER'S R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDNET)                      DISPLACEMENT TO WORK AREA\n\nVVTAM    DC    V(STCVTAM)\nVTCPIP   DC    V(STCTCPIP)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDNET   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCNET\n./ ADD NAME=STCPARM  0115-09140-09173-0849-00340-00301-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPARM                                               *\n*                                                                     *\n*   This module interprets the control statements entered via STCIN.  *\n*   Since the control statements are only read once, this module is   *\n*   linked separately.  STCMAIN issues a LOAD, links to this module,  *\n*   and then DELETEs it.  This frees up the storage that would        *\n*   otherwise be wasted by having code that is only used at start-up  *\n*   in the region.                                                    *\n*                                                                     *\n*   All parameter statements cause fields to be set in the common     *\n*   area (STCCOMM).                                                   *\n*                                                                     *\n*   Since this module does I/O it allocates its own work area in 24   *\n*   bit storage and is assembled and linked with RMODE 24.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPARM  CSECT\nSTCPARM  AMODE 31\nSTCPARM  RMODE 24\n         USING STCCOMM,R12                    DEFINE BASE\n         USING STCPARM,R11                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE CALLER'S REGISTERS\n         LR    R11,R15                        SET BASE\n         B     PARM0000\n         DC    CL8'STCPARM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPARM0000 DS    0H\n         GETMAIN RU,                          ACQUIRE WORK AREA        +\n               LV=WORK_L,                     .. AMOUNT REQUIRED       +\n               LOC=BELOW                      .. FROM BELOW THE LINE\n         ST    R1,8(,R13)                     CHAIN TO PREVIOUS\n         ST    R13,4(,R1)                     CHAIN PREVIOUS TO OURS\n         LR    R13,R1                         SET SAVE AREA ADDRESS\n         USING PARMWORK,R13                   DEFINE BASE\n         ITRACE ID=ENTRY\n         MVI   PRT_CC,C' '                    INITIALIZE PRINT\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         MVC   WORK_DCB(DCBL),DCBI            INITIALIZE DCB\n         MVC   WORK_OPEN(OPENL),OPENI         INITIALIZE OPEN LIST FORM\n         MVC   WORK_CLOSE(CLOSEL),CLOSEI      INITIALIZE CLOSE\n         ITRACE ID=OPEN\n         OPEN  (WORK_DCB,INPUT),                                       +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\nPARM0010 DS    0H\n         ITRACE ID=READCARD\n         GET   WORK_DCB,WORK_IO               READ A CONTROL STATEMENT\n         MVC   PRT_MSGID(MSG01L),MSG01\n         MVC   PRT_MSGID+(MSG01D-MSG01)(L'MSG01D),WORK_IO\n         BAL   R10,PRT0000                    PRINT CONTROL STATEMENT\n         CLI   WORK_IO,C'*'                   COMMENT?\n         BE    PARM0010                       YES\n         CLC   ABNDSTMT,WORK_IO               ABEND STATEMENT?\n         BE    ABND0000                       YES\n         CLC   APPLSTMT,WORK_IO               APPLID STATEMENT?\n         BE    APPL0000                       YES\n         CLC   PORTSTMT,WORK_IO               PORT STATEMENT?\n         BE    PORT0000                       YES\n         ITRACE ID=INVALID                    INVALID STATEMENT\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG02L),MSG02\n         BAL   R10,PRT0000                    PRINT ERROR MESSAGE\n         B     PARM0010                       READ NEXT STATEMENT\nPARM0020 DS    0H\n         CLOSE WORK_DCB,                      CLOSE THE DCB            +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         B     EXIT0000                       AND EXIT\n*---------------------------------------------------------------------*\n*        Process ABEND statement                                      *\n*---------------------------------------------------------------------*\nABND0000 DS    0H\n         ITRACE ID=SETABEND                   ABEND STATEMENT PROCESSED\n         OI    COMM_FLAG,$ABEND               SET ABEND FLAG\n         MVC   PRT_MSGID(MSG04L),MSG04\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process APPLID statement                                     *\n*---------------------------------------------------------------------*\nAPPL0000 DS    0H\n         ITRACE ID=APPLID                     APPLID STATEMENT\n         CLC   COMM_APPL_NAME,COMM_BLANKS     APPLID ALREADY SPECIFIED?\n         BNE   APPL0030                       YES\n         LA    R1,WORK_IO+L'APPLSTMT          FIRST CHARACTER\n         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS\n         LA    R1,72-L'APPLSTMT               MAXIMUM INPUT LENGTH\n         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH\n         LA    R1,8                           MAXIMUM CHARACTERS\n         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH\n         BAL   R10,PARSE000                   LINK TO PARSE\n         OC    PARSE_OUT_LENGTH,PARSE_OUT_LENGTH      LENGTH ZERO?\n         BZ    APPL0010                       YES\n         CLI   PARSE_DELIMITER,C' '           STOPPED ON A BLANK?\n         BNE   APPL0020                       NO.. NAME IS TOO LONG\n         ITRACE ID=GOODAPPL                   APPL NAME IS OK\n         MVC   COMM_APPL_NAME,PARSE_OUT       SAVE APPL NAME\n         MVC   PRT_MSGID(MSG05L),MSG05\n         BAL   R10,PRT0000                    PRINT MESSAGE\n         B     PARM0010                       READ NEXT STATEMENT\nAPPL0010 DS    0H\n         ITRACE ID=NOAPPL                     APPL NAME OMITTED\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG06L),MSG06        APPL NAME OMITTED\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\nAPPL0020 DS    0H\n         ITRACE ID=LONGAPPL                   APPL NAME IS TOO LONG\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG07L),MSG07        APPL NAME IS TOO LONG\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\nAPPL0030 DS    0H\n         ITRACE ID=DUPAPPL                    DUPLICATE APPL STATEMENT\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG08L),MSG08\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\n*---------------------------------------------------------------------*\n*        Process PORT statement                                       *\n*---------------------------------------------------------------------*\nPORT0000 DS    0H\n         ITRACE ID=PORT\n         OC    COMM_PORT,COMM_PORT            PORT NBR ALREADY GIVEN?\n         BNZ   PORT0010                       YES\n         LA    R1,WORK_IO+L'PORTSTMT          FIRST CHARACTER\n         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS\n         LA    R1,72-L'PORTSTMT               MAXIMUM INPUT LENGTH\n         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH\n         LA    R1,5                           MAXIMUM CHARACTERS\n         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH\n         BAL   R10,PARSE000                   LINK TO PARSE\n         CLC   PARSE_OUT_LENGTH,H5            PORT LENGTH 5?\n         BNE   PORT0020                       NO\n         ITRACE ID=GOODPORT                   PORT NBR IS OK\n         PACK  COMM_DWORD,PARSE_OUT(5)        PACK PORT NBR\n         CVB   R1,COMM_DWORD                  CONVERT TO BINARY\n         STH   R1,COMM_PORT                   SAVE PORT NBR\n         MVC   PRT_MSGID(MSG11L),MSG11\n         BAL   R10,PRT0000                    PRINT MESSAGE\n         B     PARM0010\nPORT0010 DS    0H\n         ITRACE ID=DUP_PORT\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG09L),MSG09\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\nPORT0020 DS    0H\n         ITRACE ID=BAD_PORT\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         MVC   PRT_MSGID(MSG10L),MSG10\n         BAL   R10,PRT0000                    PRINT\n         B     PARM0010                       READ NEXT STATEMENT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Parsing                                                            *\n*                                                                     *\n*  At entry:                                                          *\n*     PARSE_IN         source data address                            *\n*     PARSE_IN_LENGTH  source data length                             *\n*     PARSE_OUT_LENGTH maximum output length                          *\n*                                                                     *\n*  At exit:                                                           *\n*     PARSE_IN         address of byte following the delimiter that   *\n*                      stopped the scan                               *\n*     PARSE_IN_LENGTH  length of data following the delimiter         * e *\n*     PARSE_OUT        data up to but not including the delimiter     *\n*     PARSE_OUT_LENGTH length of data in PARSE_OUT                    * T *\n*     PARSE_DELIMITER  the delimiter that stopped the scan or null    *  or *\n*                      if the scan stopped due to end of data         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE000 DS    0H\n         ITRACE ID=PARSE,                     STARTING A PARSE         +\n               DATA1=PARSE_IN,                .. STARTING ADDRESS      +\n               DATA2=PARSE_IN_LENGTH          .. LENGTHS\n         MVC   PARSE_OUT,COMM_BLANKS          CLEAR OUTPUT DATA\n         LH    R1,PARSE_IN_LENGTH             INPUT DATA LENGTH\n         LH    R2,PARSE_OUT_LENGTH            MAXIMUM OUTPUT LENGTH\n         L     R3,PARSE_IN                    INPUT DATA ADDRESS\n         LA    R4,PARSE_OUT                   OUTPUT DATA ADDRESS\n         SR    R5,R5                          INITIALIZE\n         MVI   PARSE_DELIMITER,0              SET DELIMITER TO A NULL\n         LTR   R1,R1                          ANY DATA LEFT?\n         BZ    PARSE050                       NO\nPARSE010 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BNE   PARSE020                       NO\n         LA    R3,1(,R3)                      NEXT\n         BCT   R1,PARSE010                    LOOP\n         B     PARSE050\nPARSE020 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    PARSE040                       YES\n         CLI   0(R3),C','                     COMMA?\n         BE    PARSE040                       YES\n         MVC   0(1,R4),0(R3)                  COPY TO OUTPUT\n         LA    R3,1(,R3)                      NEXT\n         LA    R4,1(,R4)                      NEXT\n         LA    R5,1(,R5)                      PLUS 1 BYTE OF LENGTH\n         BCT   R1,PARSE030                    MINUS 1 BYTE OF INPUT\n         B     PARSE050                       FORCE EXIT\nPARSE030 DS    0H\n         BCT   R2,PARSE020                    LOOP\n         CLI   0(R3),C' '                     BLANK?\n         BE    PARSE040                       YES\n         CLI   0(R3),C','                     COMMA?\n         BNE   PARSE050                       NO\nPARSE040 DS    0H\n         MVC   PARSE_DELIMITER,0(R3)          SAVE DELIMITER\n         LA    R3,1(,R3)                      SKIP DELIMITER\n         BCTR  R1,0                           MINUS USED BY DELIMITER\nPARSE050 DS    0H\n         STH   R1,PARSE_IN_LENGTH             SAVE INPUT LENGTH LEFT\n         STH   R5,PARSE_OUT_LENGTH            SAVE OUTPUT LENGTH\n         ST    R3,PARSE_IN                    SAVE INPUT ENDING POINT\n         ITRACE ID=PARSE_OUT,                 PARSE ENDING             +\n               DATA1=PARSE_OUT,               .. PART OF OUTPUT DATA   +\n               DATA2=PARSE_OUT_LENGTH         .. OUTPUT LENGTH\n         BR    R10                            EXIT\n* ------------------------------------------------------------------- *\n*        PRINTING                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     PRINT REQUEST BLOCK\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        ADD TO QUEUE\n         BR    R10                            RETURN\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT                       EXITING PARM CONVERTER\n         LR    R1,R13                         SAVE SAVE AREA ADDRESS\n         L     R13,4(,R13)                    RESTORE R13               ASE01670\n         FREEMAIN RU,                         FREEMAIN WORK AREA       +\n               A=(1),                                                  +\n               LV=WORK_L\n         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=STCIN,                                           +\n               RECFM=FB,                                               +\n               LRECL=80,                                               +\n               EODAD=PARM0020,                                         +\n               MACRF=GM\nDCBL     EQU   *-DCBI\nOPENI    OPEN  (*,INPUT),                                              +\n               MODE=31,                                                +\n               MF=L\nOPENL    EQU   *-OPENI\nCLOSEI   CLOSE (*),                                                    +\n               MODE=31,                                                +\n               MF=L\nCLOSEL   EQU   *-CLOSEI\nH5       DC    H'5'\nABNDSTMT DC    C'ABEND'              ABEND CONTROL STATEMENT\nAPPLSTMT DC    C'APPLID='            APPLID STATEMENT\nPORTSTMT DC    C'PORT='              PORT NUMBER STATEMENT\nMSG01    DS    0C\n         DC    CL11'STCPARM01I'\n         DC    C'Control statement:'\n         DC    C' '\nMSG01D   DC    CL80' '\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'STCPARM02E'\n         DC    C'Invalid control statement'\nMSG02L   EQU   *-MSG02\nMSG04    DS    0C\n         DC    CL11'STCPARM04I'\n         DC    C'ABEND flag set'\nMSG04L   EQU   *-MSG04\nMSG05    DS    0C\n         DC    CL11'STCPARM05I'\n         DC    C'APPLID statement processed successfully'\nMSG05L   EQU   *-MSG05\nMSG06    DS    0C\n         DC    CL11'STCPARM06E'\n         DC    C'APPL name omitted'\nMSG06L   EQU   *-MSG06\nMSG07    DS    0C\n         DC    CL11'STCPARM07E'\n         DC    C'APPLID is too long (max is 8 characters)'\nMSG07L   EQU   *-MSG07\nMSG08    DS    0C\n         DC    CL11'STCPARM08E'\n         DC    C'Duplicate APPL ID statement'\nMSG08L   EQU   *-MSG08\nMSG09    DS    0C\n         DC    CL11'STCPARM09E'\n         DC    C'Duplicate PORT statement'\nMSG09L   EQU   *-MSG09\nMSG10    DS    0C\n         DC    CL11'STCPARM10E'\n         DC    C'Invalid PORT number, must be five digits'\nMSG10L   EQU   *-MSG10\nMSG11    DS    0C\n         DC    CL11'STCPARM11I'\n         DC    C'PORT statement processed successfully'\nMSG11L   EQU   *-MSG10\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPARMWORK         DSECT\n                 SUTLSAVE DSECT=NO\nWORK_DCB         DS   0F,(DCBL)X     STCIN DCB\nWORK_OPEN        DS   0A,(OPENL)X    OPEN LIST FORM AREA\nWORK_CLOSE       DS   0A,(CLOSEL)X   CLOSE LIST FORM AREA\nPARSE_IN         DS   A              PARSE DATA INPUT ADDRESS\nPARSE_IN_LENGTH  DS   H              LENGTH OF DATA AT PARSE IN\nPARSE_OUT_LENGTH DS   H              LENGTH OF DATA IN PARSE OUT\nPARSE_OUT        DS   CL80           OUTPUT FROM PARSE\nPARSE_DELIMITER  DS   C              DELIMITER THAT STOPPED PARSE\nWORK_IO          DS   CL80           CONTROL STATEMENT I/O AREA\n                 PRTBLOK  DSECT=NO\nWORK_L           EQU   *-PARMWORK\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY     REGEQU\n         END      STCPARM\n./ ADD NAME=STCPRTQ  0101-09140-09173-0849-00102-00102-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPRTQ                                               *\n*                                                                     *\n*  Function:                                                          *\n*   Print may be generated under multiple tasks.  Print is done by    *\n*   a separate subtask.  This is a subroutine to add elements to the  *\n*   print subtask work queue.  This module does not follow the        *\n*   \"normal\" SUTL linkage or work area usage.  Any work areas must be *\n*   allocated and released dynamically.                               *\n*                                                                     *\n*   At entry this routine expects                                     *\n*     R1  - PRTBLOK Address                                           *\n*     R12 - STCCOMM address                                           *\n*     R13 - Callers save area address                                 *\n*     R14 - Return address                                            *\n*     R15 - Entry point address                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPRTQ  CSECT\nSTCPRTQ  AMODE 31\nSTCPRTQ  RMODE ANY\n         USING STCPRTQ,R11                    DEFINE BASE\n         USING STCCOMM,R12                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE CALLER'S REGISTERS\n         LR    R11,R15                        COPY BASE ADDRESS\n         B     PRT0000                        SKIP EYECATCHERS\n         DC    CL8'STCPRTQ'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         TM    COMM_EOJ,$EOJ3                 3RD EOJ PHASE?\n         BO    EXIT0010                       YES\n         LR    R10,R1                         COPY PRTBLOK ADDRESS\n         USING PRTBLOK,R10                    DEFINE BASE\n         GETMAIN RU,                          ACQUIRE WORK AREA        +\n               LV=WKL,                                                 +\n               LOC=ANY\n         ST    R13,4(,R1)                     SAVE SAVE AREA\n         ST    R1,8(,R13)                     CHAIN PREVIOUS SAVE AREA\n         LR    R13,R1                         SET SAVE AREA ADDRESS\n         USING WK,R13                         DEFINE WORK AREA BASE\n         ITRACE ID=ENTRY\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=PRTBLOKL                    .. SIZE\n         MVC   0(PRTBLOKL,R1),PRTBLOK\n         MVI   PRT_CC,C' '                    CLEAR CARRIAGE CONTROL\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         LR    R10,R1                         COPY BLOCK'S ADDRESS\n         MVC   PRT_EYE,PRTID                  SET EYECATCHER\nPRT0010  DS    0H\n         L     R2,PRT_REQ                     FIRST ON CHAIN\n         ST    R2,PRT_NEXT                    SET CHAIN POINTER\n         CS    R2,R10,PRT_REQ                 ADD NEW BLOCK TO CHAIN\n         BNE   PRT0010                        UNSUCCESSFUL.. TRY AGAIN\n         ITRACE ID=QUEUED,                    NEW BLOCK IS ON THE QUEUE+\n               RDATA1=R10,                    .. NEW BLOCK'S ADDRESS   +\n               RDATA2=R2                      .. PREVIOUS BLOCK\n         POST  PRT_WORK_ECB                   POST PRINT TASK ECB\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LR    R1,R13                         COPY SAVE AREA ADDRESS\n         L     R13,4(,R13)                    RESTORE R13\n         FREEMAIN RU,                         FREEMAIN SAVE AREA       +\n               A=(1),                                                  +\n               LV=WKL\nEXIT0010 DS    0H\n         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nPRTID    DC    CL8'PRTBLOK'\n         LTORG\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\nWK       DSECT\n         SUTLSAVE DSECT=NO\nWKL      EQU      *-WK\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         PRTBLOK  DSECT=YES\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         COPY     REGEQU\n         END      STCPRTQ\n./ ADD NAME=STCPRTS  0108-09140-09173-0850-00228-00216-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPRTS                                               *\n*                                                                     *\n*   Sutl consists of multiple tasks and has asynchronous exits.  It is*\n*   possible that multiple tasks would try to print at the same time. *\n*   Instead of trying to serialize a DCB, print was moved to this     *\n*   subtask.  Any other subtask or exit may queue work for this task  *\n*   from PRT_REQ in the common area.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPRTS  CSECT\nSTCPRTS  AMODE 31\nSTCPRTS  RMODE ANY\n         USING STCCOMM,R12                    DEFINE BASE\n         USING STCPRTS,R11                    DEFINE BASE\n         USING PRTBLOK,R7                     DEFINE BASE\n         STM   R14,R12,12(R13)                CHAIN REGISTERS\n         LR    R11,R15                        COPY ENTRY POINT ADDRESS\n         B     PRT0000\n         DC    CL8'STCPRTS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPRT0000  DS    0H\n         L     R12,0(R1)                      LOAD STCCOMM'S ADDRESS\n         GETMAIN R,                           ACQUIRE WORK AREA        +\n               LV=WORKL,                                               +\n               LOC=BELOW\n         USING WORKAREA,R1                    DEFINE BASE\n         XC    WORKAREA+000(256),WORKAREA+000\n         XC    WORKAREA+256(WORKL-256),WORKAREA+000\n         ST    R13,4(,R1)                     CHAIN PREVIOUS TO OURS\n         ST    R1,8(,R13)                     CHAIN OURS TO PREVIOUS\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         DROP  R1\n         USING WORKAREA,R13                   DEFINE BASE\n         ST    R11,APRTS                      SET OUR ENTRY POINT\n         ITRACE ID=ENTRY\n         MVC   WK_DCB(DCBL),DCBI              INITIALIZE DCB\n         MVI   WK_CC,C' '                     INITIALIZE CC\n         MVC   WK_DATE(PRTLRECL-1),WK_CC\n         MVC   WK_OPEN_CLOSE(OCPLL),OCPLI     INITIALIZE OPEN/CLOSE\n         ZAP   WK_LINE,P0                     INITIALIZE LINE COUNT\n         ZAP   WK_PAGE,P0                     INITIALIGE PAGE COUNT\n         OPEN  (WK_DCB,OUTPUT),                                        +\n               MODE=31,                                                +\n               MF=(E,WK_OPEN_CLOSE)\nPRT0010  DS    0H\n         TM    PRT_WORK_ECB,X'40'             ECB ALREADY POSTED?\n         BO    PRT0020                        GET BUSY\n         LA    R1,PRT_WORK_ECB                WORK TO DO ECB\n         ITRACE ID=WORKWAIT,                  WAITING FOR WORK         +\n               RDATA1=R1                      .. ECB'S ADDRESS\n         WAIT  1,ECB=(1)                      WAIT FOR WORK TO DO ECB\n         ITRACE ID=WOKEUP\nPRT0020  DS    0H\n         XC    PRT_WORK_ECB,PRT_WORK_ECB      RESET ECB\n         SR    R1,R1                          CLEAR REGISTER\nPRT0030  DS    0H\n         ICM   R10,15,PRT_REQ                 FIRST REQUEST BLOCK\n         BZ    PRT0210                        NOTHING ON CHAIN\n         CS    R10,R1,PRT_REQ                 GET REQUEST CHAIN\n         BNE   PRT0030\n         USING PRTBLOK,R10                    DEFINE BASE\n         ITRACE ID=HAVEQ,                     WE HAVE THE QUEUE        +\n               RDATA1=R10                     .. FIRST QUEUE BLOCK\nPRT0040  DS    0H\n         L     R2,PRT_NEXT                    NEXT BLOCK'S ADDRESS\n         ST    R1,PRT_NEXT                    SET POINTER\n         LR    R1,R10                         SWITCH\n         LTR   R10,R2                         SWITCH\n         BNZ   PRT0040                        LOOP\n         LR    R10,R1                         COPY FIRST BLOCK'S ADDR\nPRT0050  DS    0H\n         CLI   PRT_COMMAND,$PRT_HEAD          FORCED HEADING?\n         BE    PRT0120                        YES\n         MVC   WK_CC,PRT_CC                   COPY CARRIAGE CONTROL\n         TIME  DEC\n         STM   R0,R1,WK_TIME_DATE             SAVE TIME AND DATE\n         MVC   WK_TIME,TIMEEDWD               INITIALIZE WITH EDIT WORD\n         ED    WK_TIME,WK_TIME_DATE           EDIT TIME\n         MVC   WK_DATE,DATEEDWD               INITIALIZE WITH EDIT WORD\n         AP    WK_TIME_DATE+4(4),P1900000     ADD CENTURY\n         ED    WK_DATE,WK_TIME_DATE+4         EDIT DATE\n         MVC   WK_MSGID,PRT_MSGID             COPY MESSAGE ID\n         LA    R1,WK_MSGID+(L'WK_MSGID-1)\nPRT0060  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BNE   PRT0070                        NO\n         BCT   R1,PRT0060                     LOOP\nPRT0070  DS    0H\n         CLI   0(R1),C'E'                     'ERROR' MESSAGE\n         BNE   PRT0080\n         MVI   WKMSGERR,C'*'                  FLAG ERROR MESSAGE\nPRT0080  DS    0H\n         LA    R1,WK_DATA                     FIRST PRINT AREA BYTE\n         LA    R2,PRT_DATA                    PRINT OUTPUT AREA BYTE\n         LA    R3,L'PRT_DATA                  MAXIMUM LOOPS\nPRT0090  DS    0H\n         CLC   COMM_BLANKS(2),0(R2)           2 BLANKS IN A ROW?\n         BE    PRT0100                        YES\n         CLC   =C' ,',0(R2)                   BLANK AND A COMMA?\n         BE    PRT0100                        YES\n         MVC   0(1,R1),0(R2)                  COPY TO OUTPUT AREA\n         LA    R1,1(,R1)                      NEXT OUTPUT BYTE\nPRT0100  DS    0H\n         LA    R2,1(,R2)                      NEXT INPUT BYTE\n         BCT   R3,PRT0090                     LOOPS\n         PUT   WK_DCB,WK_CC                   PRINT\n         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT\n         CLI   WK_CC,C' '                     SINGLE SPACE\n         BE    PRT0110                        YES\n         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT\n         CLI   WK_CC,C'0'                     DOUBLE SPACE?\n         BE    PRT0110                        YES\n         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT\nPRT0110  DS    0H\n         MVI   WK_CC,C' '                     INITIALIZE CC\n         MVC   WK_DATE(PRTLRECL-1),WK_CC\n         CP    WK_LINE,COMM_MAX_LINES         TIME FOR HEADING?\n         BNH   PRT0200                        NOT YET\nPRT0120  DS    0H\n         AP    WK_PAGE,P1                     ADD 1 TO PAGE COUNT\n         MVC   WK_DATA(HEADINGL),HEADING\n         MVC   WK_DATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD\n         ED    WK_DATA+(HEADPAGE-HEADING)(L'HEADPAGE),WK_PAGE\n         PUT   WK_DCB,WK_CC                   PRINT\n         ZAP   WK_LINE,P1                     RESET LINE COUNT\n         MVI   WK_CC,C' '                     INITIALIZE CC\n         MVC   WK_DATE(PRTLRECL-1),WK_CC\nPRT0200  DS    0H\n         LR    R1,R10                         COPY PRTBLOK ADDRESS\n         L     R10,PRT_NEXT                   NEXT BLOCK'S ADDRESS\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=PRTBLOKL\n         LTR   R10,R10                        ANY MORE PRINT BLOCKS?\n         BNZ   PRT0050                        YES\nPRT0210  DS    0H\n         TM    COMM_EOJ,$EOJ8                 SHUTDOWN PHASE 3?\n         BO    EXIT0000                       YES.. IT'S MILLER TIME\n         B     PRT0010                        NO, WAIT\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         CLOSE WK_DCB,                        CLOSE DCB                +\n               MODE=31,                                                +\n               MF=(E,WK_OPEN_CLOSE)\n         LR    R1,R13                         COPY WORK AREA ADDRESS\n         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670\n         FREEMAIN R,                          FREE WORK AREA           +\n               A=(1),                                                  +\n               LV=WORKL\n         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680\n         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690\n         BR    R14                            RETURN TO CALLER          ASE01700\nPRTMVC   MVC   WK_DATE(0),PRT_DATA            COPY PRINT DATA\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDATEEDWD DC    X'40212020204B202020'\nTIMEEDWD DC    X'4021204B20204B2020'\nPAGEEDWD DC    X'402020202120'\nP0       DC    P'0'\nP1       DC    P'1'\nP1900000 DC    P'1900000'\nHEADING  DS    0C\n         DC    50C' '\n         DC    C'SUTL LOG'\n         DC    50C' '\n         DC    C'PAGE '\nHEADPAGE DC    CL6' '\nHEADINGL EQU   *-HEADING\nDCBI     DCB   DSORG=PS,                                               +\n               DDNAME=SUTLPRT,                                         +\n               RECFM=FBA,                                              +\n               LRECL=PRTLRECL,                                         +\n               MACRF=PM\nDCBL     EQU   *-DCBI\nOCPLI    OPEN  (*,OUTPUT),                                             +\n               MODE=31,                                                +\n               MF=L\nOCPLL    EQU   *-OCPLI\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORKAREA      DSECT\n              SUTLSAVE DSECT=NO\nWK_TIME_DATE  DS    2F                    TIME/DATE\nWK_LINE       DS    PL3\nWK_PAGE       DS    PL3\nWK_CC         DS    C                     CARRIAGE CONTROL\nWK_DATE       DS    CL9                   DATE\n              DS    C\nWK_TIME       DS    CL9                   TIME\n              DS    C\nWK_MSGID      DS    CL11                  MESSAGE ID\n              DS    C\nWKMSGERR      DS    C                     ERROR MESSAGE FLAG\n              DS    C\nWK_DATA       DS    CL120                 PRINT DATA\nPRTLRECL      EQU   *-WK_CC\nWK_DCB        DS    0A,(DCBL)X            RESERVE SPACE FOR DCB\nWK_OPEN_CLOSE DS    (OCPLL)X\nWORKL         EQU   *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         END      STCPRTS\n./ ADD NAME=STCPS    0125-09146-09173-0851-00195-00129-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCPS                                                 *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the Open Edition processes (PS) display      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCPS    CSECT\nSTCPS    AMODE 31\nSTCPS    RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCPS,R11                      DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     PS0000\nMODID    DC    CL8'STCPS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPS0000   DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDPS,R13                      DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    PS0010                         YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         XC    PGPSCONTTYBLEN,PGPSCONTTYBLEN\n         XC    PGPSPATHBLEN,PGPSPATHBLEN\n         MVC   PGPSCMDBLEN,=F'100'\n         LA    R2,PGPSCONTTYBUF\n         ST    R2,PGPSCONTTYPTR\n         LA    R2,PGPSPATHBUF\n         ST    R2,PGPSPATHPTR\n         LA    R2,PGPSCMDBUF\n         ST    R2,PGPSCMDPTR\n         LA    R2,PGPS                        ADDRESS OF PGPS BUFFER\n         ST    R2,DXD_PS_BUFFER_ADDR\n         MVC   DXD_PS_BUFFER_LENGTH,=A(PGPS#LENGTH)\nPS0010   DS    0H\n         ITRACE ID=RE-INIT\n         L     R9,USER_IO\n         USING NET_IO,R9\n         XC    DXD_TOKEN,DXD_TOKEN            START WITH 1ST PROCESS\n         XC    PS_NBR,PS_NBR                  RESET NBR OF PROCESSES\n         LA    R7,NET_HEADER_L+PS_HEADER_L\n         LA    R8,PS_DATA\n         USING PS_DATA,R8\nPS0020   DS    0H\n         ITRACE ID=CALL_GPS,                                           +\n               DATA1=DXD_TOKEN\n         CALL  BPX1GPS,                       GET PROCESS DATA         +\n               (DXD_TOKEN,                    RELATIVE PROCESS TOKEN   +\n               DXD_PS_BUFFER_LENGTH,          LENGTH OF BUFFER         +\n               DXD_PS_BUFFER_ADDR,            BUFFER ADDRESS           +\n               DXD_RETURN_VALUE,              RETURN VALUE             +\n               DXD_RETURN_CODE,               RETURN CODE              +\n               DXD_REASON_CODE),              REASON CODE              +\n               VL,MF=(E,DXD_PARMLIST)\n\n         ICM   R15,15,DXD_RETURN_VALUE        RETURN VALUE\n         ITRACE ID=DXD_RETURN_VALUE,                                   +\n               RDATA1=R15\n         LTR   R15,R15\n         BZ    PS0050                         0 IS END OF FILE\n         BM    ERR0010                        -1 IS ERROR\n         ST    R15,DXD_TOKEN                  NEXT PROCESS TOKEN\n         SR    R1,R1\n         ICM   R1,3,PS_NBR\n         LA    R1,1(,R1)\n         STCM  R1,3,PS_NBR                    UPDATE NBR OF PROCESSES\n         MVC   PS_PID,PGPSPID                 PROCESS ID\n         MVC   PS_PPID,PGPSPPID               PARENT PROCESS DI\n         MVC   PS_SIZE,PGPSTSIZE              TOTAL SIZE\n         MVC   PS_START_TIME,PGPSSTARTTIME    PROCESS START TIME\n         MVC   PS_USER_TIME,PGPSUSERTIME      USER CPU TIME\n         MVC   PS_SYSTEM_TIME,PGPSSYSTIME     USER SYSTEM CPU TIME\n         SR    R0,R0\n         ICM   R0,3,PGPSASID                  ADDRESS SPACE ID\n         SLL   R0,2                           MULTIPLY BY 4\n         L     R1,CVTPTR                      CVT ADDRESS\n         USING CVT,R1\n         L     R1,CVTASVT                     ASVT ADDRESS\n         USING ASVT,R1\n         LA    R1,ASVTFRST                    1ST ADDRESS SPACE\n         AR    R1,R0                          PLUS ASID * 4\n         L     R1,0(,R1)                      ASCB ADDR FROM ASVT\n         USING ASCB,R1\n         MVC   PS_IO,ASCBIOSC                 COPY NBR OF I/O'S\n         MVC   PS_COMMAND,COMM_BLANKS\n         ICM   R2,15,PGPSCMDLEN               TOTAL LENGTH\n         BZ    PS0040                         NO COMMAND\n         LA    R3,PGPSCMD                     FIRST COMPONENT\n         LA    R4,PS_COMMAND\nPS0030   DS    0H\n         ICM   R5,15,0(R3)                    LENGTH OF THIS COMPONENT\n         BCTR  R5,R0\n         BCTR  R5,R0\n         EX    R5,CMD_MVC                     COPY\n         LA    R5,2(,R5)                      RESTORE LENGTH\n         LA    R4,1(R4,R5)                    UPDATE OUTPUT ADDRESS\n         LA    R5,4(,R5)                      PLUS LENGTH OF LENGTH\n         AR    R3,R5                          NEXT COMPONENT\n         SR    R2,R5                          COMPUTE LENGTH REMAINING\n         BH    PS0030                         CONTINUE\nPS0040   DS    0H\n         LA    R7,PS_DATA_L(,R7)              UPDATE OUTPUT LENGTH\n         LA    R8,PS_DATA_L(,R8)              UPDATE OUTPUT ADDR\n         CLC   PS_NBR,MAX#                    AT MAX?\n         BE    PS0050                         YES\n         B     PS0020\nPS0050   DS    0H\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R7                      .. OUTPUT LENGTH\n         STCM  R7,3,NET_LENGTH                SET LENGTH\n         B     EXIT0000\n\nCMD_MVC  MVC   0(0,R4),4(R3)\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS   0H\n         ABEND $U0010,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDPS)                       DISPLACEMENT TO WORK AREA\nMAX#      DC   AL2((32760-PS_HEADER_L)/PS_DATA_L)\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPS                   DSECT\n                        SUTLSAVE DSECT=NO\n\nDXD_PARMLIST            DS   0A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n                        DS   A\n\nDXD_TOKEN               DS   F\n\nDXD_RETURN_VALUE        DS   F\nDXD_RETURN_CODE         DS   F\nDXD_REASON_CODE         DS   F\n\nDXD_PS_BUFFER_ADDR      DS   A\nDXD_PS_BUFFER_LENGTH    DS   F\n         BPXYPGPS DSECT=NO,                                            +\n               VARLEN=(0,0,100)\nDXD_PS_BUFFER_L         EQU  *-PGPS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n         COPY     PSDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n         CVT      DSECT=YES,LIST=NO\n         IHAASVT  DSECT=YES,LIST=NO\n         IHAASCB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCPS\n./ ADD NAME=STCSID   0108-09140-09173-0852-00145-00092-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: STCSID - Display IPL info                             *\n*                                                                     *\n*  Function:                                                          *\n*   Return systems SMF ID                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCSID   CSECT\nSTCSID   AMODE 31\nSTCSID   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCSID,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     SID0000\nMODID    DC    CL8'STCSID'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSID0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDSID,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    SID0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nSID0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         MVC   USER_ID,NET_USER_ID            COPY USER ID\n         MVC   USER_SMF,NET_SMF_ID            COPY USER SMF NAME\n         L     R1,CVTPTR                      CVT ADDRESS\n         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY\n         MVC   NET_SYSTEM_NAME,CVTSNAME       COPY SYSTEM NAME\n         L     R2,CVTSMCA                     SMF COMMUNICATION AREA\n         USING SMCABASE,R2                    DEFINE BASE\n         MVC   NET_SMF_ID,SMCASID             COPY SMF ID\n         LA    R1,NET_SMF_ID_L                LENGTH TO SEND\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         XC    NET_RC,NET_RC                  SET RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         PRINT\n         MVI   PRT_CC,C' '                    SINGLE SPACE\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         TM    USER_STATUS,$USER_TCPIP        USING TCPIP?\n         BO    SID0020                        YES\n         MVC   PRT_MSGID(MSG01_L),MSG01\n         MVC   PRT_MSGID+(MSG01_ID-MSG01)(L'MSG01_ID),USER_ID\n         MVC   PRT_MSGID+(MSG01_SMF-MSG01)(L'MSG01_SMF),USER_SMF\n         MVC   PRT_MSGID+(MSG01_LU-MSG01)(L'MSG01_LU),USER_LU\n         B     SID0030\nSID0020  DS    0H\n         MVC   PRT_MSGID(MSG02_L),MSG02\n         MVC   PRT_MSGID+(MSG02_ID-MSG02)(L'MSG02_ID),USER_ID\n         MVC   PRT_MSGID+(MSG02_SMF-MSG02)(L'MSG02_SMF),USER_SMF\n         MVC   PRT_MSGID+(MSG02_IP-MSG02)(L'MSG02_IP),USER_IP_ADDRESS\nSID0030  DS    0H\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        A REQUEST TO QUEUE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDSID)                      DISPLACEMENT TO WORK AREA\n\nMSG01     DS    0C\n          DC    CL11'STCSID01I'\n          DC    C'Subtask for user '\nMSG01_ID  DC    CL8' '\n          DC    C' on system '\nMSG01_SMF DC    CL4' '\n          DC    C', VTAM LU '\nMSG01_LU  DC    CL8' '\n          DC    C' initialized'\nMSG01_L   EQU   *-MSG01\n\nMSG02     DS    0C\n          DC    CL11'STCSID02I'\n          DC    C'Subtask for user '\nMSG02_ID  DC    CL8' '\n          DC    C' on system '\nMSG02_SMF DC    CL4' '\n          DC    C', IP address '\nMSG02_IP  DC    CL15' '\n          DC    C' initialized'\nMSG02_L   EQU   *-MSG02\n\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSID   DSECT\n         SUTLSAVE DSECT=NO\n         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                NETIO   DSECT=YES\nNET_SMF_ID      DS      CL4\nNET_SYSTEM_NAME DS      CL4\nNET_USER_ID     DS      CL8\nNET_SMF_ID_L    EQU     *-NET_IO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IEESMCA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  STCSID\n./ ADD NAME=STCSUB   0106-09140-09173-0853-00124-00124-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCSUB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Collect the data for the SUBsystem display.                       *\n*   The number of subsystems that may be returned is limited by the   *\n*   I/O area size (VTAM limits the length to 32767).  If the number   *\n*   of subsystems exceeds the I/O area size, the return code with be  *\n*   set to 4 to inform the user that the data has been truncated.     *\n*                                                                     *\n*   Data returned is: number of subsystems and the subsystem entry    *\n*       for each subsystem.                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCSUB   CSECT\nSTCSUB   AMODE 31\nSTCSUB   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCSUB,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     SUB0000\nMODID    DC    CL8'STCSUB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSUB0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDSUB,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    SUB0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nSUB0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         XC    NET_RC,NET_RC                  INITIALIZE RETURN CODE\n         L     R1,CVTPTR                      CVT ADDRESS\n         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY\n         L     R2,CVTJESCT                    JES SSCT ADDRESS\n         USING JESCT,R2                       DEFINE BASE\n         LA    R8,SUBSYSTEM_DATA              WORK AREA ADDRESS\n         LA    R7,SUBSYSTEM_HEADER_L          INITIALIZE OUTPUT LENGTH\n         SR    R6,R6                          INIT NBR OF SUBSYSTEMS\n         ICM   R5,15,JESSSCT                  FIRST SUBSYSTEM ENTRY\n         BZ    SUB0040                        NO SUBSYSTEMS\n         USING SSCT,R5                        DEFINE BASE\nSUB0020  DS    0H\n         MVC   0(SSCTSIZE,R8),SSCT            COPY SSCT ENTRY\n         LA    R8,SSCTSIZE(,R8)               UPDATE OUTPUT ADDRESS\n         LA    R7,SSCTSIZE(,R7)               UPDATE OUTPUT LENGTH\n         LA    R6,1(,R6)                      ONE MORE SUBSYSTEM\n         CH    R6,MAX#                        AT MAXIMUM?\n         BE    SUB0030                        YES\n         ICM   R5,15,SSCTSCTA                 NEXT SUBSYSTEM\n         BNZ   SUB0020                        LOOP\n         B     SUB0040\nSUB0030  DS    0H\n         ICM   R5,15,SSCTSCTA                 MORE SUBSYSTEMS?\n         BZ    SUB0040                        NO\n         MVC   NET_RC,X0004                   SET RETURN CODE TO 4\nSUB0040  DS    0H\n         STCM  R6,3,SUBSYSTEM_NBR             SET NUMBER OF SUBSYSTEMS\n         STCM  R7,3,NET_LENGTH                SET OUTPUT LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDSUB)                      DISPLACEMENT TO WORK AREA\nMAX#     DC    Y((32760-SUBSYSTEM_HEADER_L)/SSCTSIZE)\nX0004    DC    X'0004'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSUB   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                   NETIO  DSECT=YES\nSUBSYSTEM_NBR      DS     H\nSUBSYSTEM_HEADER_L EQU    *-NET_IO\nSUBSYSTEM_DATA     DS     0C\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFJESCT\n         IEFJSCVT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         ABCODES\n         END     STCSUB\n./ ADD NAME=STCTCPIP 0121-09148-09161-1605-00349-00524-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    TCP/IP FUNCTIONS                                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCTCPIP CSECT\nSTCTCPIP AMODE 31\nSTCTCPIP RMODE ANY\n         USING STCCOMM,R12                    DEFINE BASE\n         USING STCTCPIP,R11                   DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     @0000000                       BRANCH AROUND EYECATCHER\nMODID    DC    CL8'STCTCPIP'                  MODULE NAME\n         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY\n@0000000 DS    0H\n         L     R1,USER_DXD_ADDR               WORK AREA BASE\n         A     R1,DXD_START                   PLUS DISP\n         ST    R13,4(R1)\n         ST    R1,8(R13)\n         LR    R13,R1                         SAVE WORK AREA ADDRESS\n         USING DXDTCPIP,R13                   DEFINE BASE\n         ITRACE ID=ENTRY\n         MVI   PRT_COMMAND,$PRT_PRINT         PRINT\n         MVI   PRT_CC,C' '                    SINGLE SPACE\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n         CLI   USER_NET_COMMAND,$USER_NET_INIT\n         BE    INIT0000\n         L     R9,USER_IO\n         USING NET_IO,R9\n         CLI   USER_NET_COMMAND,$USER_RECEIVE\n         BE    RECV0000\n         CLI   USER_NET_COMMAND,$USER_SEND\n         BE    SEND0000\n         CLI   USER_NET_COMMAND,$USER_NET_CLEANUP\n         BE    CLEAN000\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0000 DS    0H\n         GETMAIN RU,                                                   +\n               LV=GWALENTH,                                            +\n               LOC=ANY\n         ST    R1,USER_TCPIP_GWA              TCP/IP GLOBAL WORK AREA\n* ------------------------------------------------------------------- *\n*     Make the INITAPI call                                           *\n* ------------------------------------------------------------------- *\n         ITRACE ID=INITAPI,                                            +\n               DATA1=USER_CLIENT_NAME,                                 +\n               DATA2=USER_CLIENT_TASK\n         MVC   PRT_MSGID(MSG01_L),MSG01\n         BAL   R8,PRT0000\n         XC    DXD_TCPIP_TASK(TIELENTH),DXD_TCPIP_TASK\n         MVC   DXD_TCPIP_FUNCTION,=CL16'INITAPI'\n         EZASMI TYPE=INITAPI,                                          +\n               MAXSNO=DXD_MAX_SOCKET,                                  +\n               SUBTASK=MODID,                                          +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               ASYNC='ECB',                                            +\n               ERROR=ERR0010,                                          +\n               TASK=DXD_TCPIP_TASK\n         BAL   R8,INFO0000\n         OC    DXD_TCPIP_RETURN_CODE,DXD_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n         LA    R1,USER_API_ECB\n         ITRACE ID=POST_API,                                           +\n               RDATA1=R1\n         POST  USER_API_ECB\n         ITRACE ID=TAKESOCK,                                           +\n               DATA1=USER_SOCKET,                                      +\n               DATA2=COMM_MAIN_CLIENT_TASK\n         LA    R1,USER_TAKESOCKET_ECB\n         ITRACE ID=WAITTAKE,                                           +\n               RDATA1=R1\n         WAIT  ECB=USER_TAKESOCKET_ECB\n         XC    USER_NET_ECB,USER_NET_ECB\n         EZASMI TYPE=TAKESOCKET,                                       +\n               SOCRECV=USER_SOCKET,                                    +\n               CLIENT=COMM_MAIN_CLIENT,                                +\n               ECB=USER_NET_ECB,                                       +\n               TASK=DXD_TCPIP_TASK,                                    +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               RETCODE=DXD_TCPIP_RETURN_CODE\n         WAIT  ECB=USER_NET_ECB\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0030\n         MVC   USER_SOCKET,DXD_TCPIP_RETURN_CODE+2\n         ITRACE ID=NEW_SOCK,                                           +\n               DATA1=USER_SOCKET\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE\n         LA    R1,1\n         A     R1,USER_RECEIVES\n         ST    R1,USER_RECEIVES\n         L     R3,USER_IO                     I/O AREA\n         L     R4,F32760\n         SR    R5,R5                          BYTES RECEIVED\n         MVC   DXD_TCPIP_FUNCTION,=CL16'RECEIVE'\nRECV0010 DS    0H\n         ITRACE ID=READ,                                               +\n               RDATA1=R3,                                              +\n               RDATA2=R4\n         ST    R4,DXD_LENGTH                  SET LENGTH\n         XC    USER_NET_ECB,USER_NET_ECB      RESET ECB\n         EZASMI TYPE=READ,                                             +\n               S=USER_SOCKET,                                          +\n               NBYTE=DXD_LENGTH,                                       +\n               BUF=(R3),                                               +\n               TASK=DXD_TCPIP_TASK,                                    +\n               ECB=USER_NET_ECB,                                       +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               RETCODE=DXD_TCPIP_RETURN_CODE\n         ITRACE ID=WAIT\n         WAIT  ECB=USER_NET_ECB\n         TM    COMM_EOJ,$EOJ1                 SHUTDOWN IN PROGRESS?\n         BO    EXIT0000                       YES.. EXIT NOW\n         ITRACE ID=READ_X,                                             +\n               DATA1=DXD_TCPIP_ERROR_NUMBER,                           +\n               DATA2=DXD_TCPIP_RETURN_CODE\n         ICM   R0,15,DXD_TCPIP_RETURN_CODE    NBR OF BYTES READ\n         BM    ERR0040                        ERROR\n         BZ    RECV0020                       ZERO.. SESSION LOST\n         AR    R3,R0                          UPDATE BUFFER ADDRESS\n         SR    R4,R0                          UPDATE BUFFER LEFT\n         AR    R5,R0                          TOTAL BYTES RECEIVED\n         ITRACE ID=READ_LEN,                                           +\n               RDATA1=R5,                                              +\n               RDATA2=R4\n         CH    R5,=Y(NET_HEADER_L)            READ MINIMUM?\n         BL    RECV0010                       NO\n         CH    R5,NET_LENGTH                  GOT ALL BEING SENT?\n         BL    RECV0010                       NO\n         A     R5,USER_BYTES_RECEIVED         TOTAL RECEIVED\n         ST    R5,USER_BYTES_RECEIVED         SAVE TOTAL\n         B     EXIT0000\nRECV0020 DS    0H\n         ITRACE ID=LOST\n         OI    USER_STATUS,$USER_LOST         CONNECTION TO USER LOST\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSEND0000 DS    0H\n         LA    R1,1\n         A     R1,USER_SENDS\n         ST    R1,USER_SENDS\n         L     R3,USER_IO                     I/O AREA\n         SR    R4,R4\n         ICM   R4,3,NET_LENGTH                LENGTH TO SEND\n         ITRACE ID=SEND,                                               +\n               RDATA1=R4\n         SR    R5,R5                          BYTES SENT\n         MVC   DXD_TCPIP_FUNCTION,=CL16'SEND'\nSEND0010 DS    0H\n         ITRACE ID=WRITE,                                              +\n               RDATA1=R3,                                              +\n               RDATA2=R4\n         ST    R4,DXD_LENGTH                  SET LENGTH\n         XC    USER_NET_ECB,USER_NET_ECB      RESET ECB\n         EZASMI TYPE=WRITE,                                            +\n               S=USER_SOCKET,                                          +\n               NBYTE=DXD_LENGTH,                                       +\n               BUF=(R3),                                               +\n               TASK=DXD_TCPIP_TASK,                                    +\n               ECB=USER_NET_ECB,                                       +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               RETCODE=DXD_TCPIP_RETURN_CODE\n         ITRACE ID=WAIT\n         WAIT  ECB=USER_NET_ECB\n         TM    COMM_EOJ,$EOJ1                 SHUTDOWN IN PROGRESS?\n         BO    EXIT0000                       YES.. EXIT NOW\n         ITRACE ID=WRITE_X,                                            +\n               DATA1=DXD_TCPIP_RETURN_CODE,                            +\n               DATA2=DXD_TCPIP_ERROR_NUMBER\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0050\n         A     R3,DXD_TCPIP_RETURN_CODE       UPDATE BUFFER ADDRESS\n         S     R4,DXD_TCPIP_RETURN_CODE       UPDATE BUFFER LEFT\n         A     R5,DXD_TCPIP_RETURN_CODE       TOTAL BYTES SENT\n         ITRACE ID=SENT_LEN,                                           +\n               RDATA1=R5,                                              +\n               RDATA2=R4\n         CH    R5,=Y(NET_HEADER_L)            SENT MINIMUM?\n         BL    SEND0010                       NO\n         CLM   R5,3,NET_LENGTH                SENT ALL OF THE DATA?\n         BL    SEND0010                       NO\n         A     R5,USER_BYTES_SENT             TOTAL SENT\n         ST    R5,USER_BYTES_SENT             SAVE TOTAL\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        The main task has signalled shutdown                         *\n*                                                                     *\n*        CLOSE the socket and issue a TERMAPI to clean-up.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLEAN000 DS    0H\n         ITRACE ID=CLOSE\n         XC    USER_NET_ECB,USER_NET_ECB\n         EZASMI TYPE=CLOSE,                                            +\n               S=USER_SOCKET,                                          +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               ECB=USER_NET_ECB\n         WAIT  ECB=USER_NET_ECB\n         BAL   R8,INFO0000\n\n         ITRACE ID=TERMAPI\n         MVC   DXD_TCPIP_FUNCTION,=CL16'TERMAPI'\n         EZASMI TYPE=TERMAPI,                                          +\n               TASK=DXD_TCPIP_TASK\n         BAL   R8,INFO0000\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINFO0000 DS    0H\n         MVC   PRT_MSGID(MSG90_L),MSG90\n         MVC   PRT_MSGID+(MSG90_FUNCTION-MSG90)(L'MSG90_FUNCTION),DXD_T+\n               CPIP_FUNCTION\n         UNPK  PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(9),DXD_TCPIP_RETURN_+\n               CODE(5)\n         TR    PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(8),C_HEXCHAR\n         MVI   PRT_MSGID+(MSG90_RETURN_CODE-MSG90)+8,C' '\n         L     R1,DXD_TCPIP_ERROR_NUMBER\n         CVD   R1,DXD_DWORD\n         ED    PRT_MSGID+(MSG90_ERROR_NUMBER-MSG90)(L'MSG90_ERROR_NUMBE++\n               R),DXD_DWORD+5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        A REQUEST TO QUEUE\n         BR    R8\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         BAL   R8,INFO0000\n         DC    H'2'\nERR0030  DS    0H\n         DC    H'3'\nERR0040  DS    0H\n         DC    H'4'\nERR0050  DS    0H\n         DC    H'5'\n* ------------------------------------------------------------------- *\n*        EXIT                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(R13)                     CALLER'S SAVE AREA\n         LM    R14,R12,12(R13)\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC    Q(DXDTCPIP)\nENQI      ENQ   (QNAME,RNAME,E,,STEP),RET=NONE,MF=L\nENQL      EQU   *-ENQI\nF32760    DC    F'32760'\nQNAME     DC    CL8'SUTL'\nRNAME     DC    CL8'USERBLOK CHAIN'\n\nC_HEXCHAR                EQU   *-C'0'\n                         DC    C'0123456789ABCDEF'\n\nC_SUTLSTC                DC    CL8'SUTLSTC'\nMSG01                    DS    0C\n                         DC    CL15'STCTCPIP01I'\n                         DC    C'Issuing INITAPI'\nMSG01_L                  EQU   *-MSG01\nMSG90                    DS    0C\n                         DC    CL15'STCTCPIP90I'\n                         DC    C'TCP/IP function '\nMSG90_FUNCTION           DC    CL16' '\n                         DC    C'  Return code: '\nMSG90_RETURN_CODE        DC    CL8' '\n                         DC    C'  Error number:'\nMSG90_ERROR_NUMBER       DC    X'402020202120'\nMSG90_L                  EQU   *-MSG90\n\n                         LTORG\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nDXDTCPIP                 DSECT\n                         SUTLSAVE DSECT=NO\nDXD_DWORD                DS   D\n\nDXD_ENQ                  DS   0F,(ENQL)X\n\nDXD_MAX_SOCKET           DS   F\n\nDXD_LENGTH               DS   F\n\nDXD_PACK_IN              DS   XL4\n\nDXD_RC                   DS   H\n\n\nDXD_TCPIP_ERROR_NUMBER   DS   F\nDXD_TCPIP_FUNCTION       DS   CL16\nDXD_TCPIP_RETURN_CODE    DS   F\nDXD_TCPIP_TASK           EZASMI TYPE=TASK,STORAGE=CSECT\n\n                         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EZASMI   TYPE=GLOBAL,STORAGE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  COPY   REGEQU\n         END      STCTCPIP\n./ ADD NAME=STCUSE   0105-09140-09160-1504-00121-00115-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: STCUSE - Display current SUTL users                   *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the current users.                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCUSE   CSECT\nSTCUSE   AMODE 31\nSTCUSE   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCUSE,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE USER BLOCK BASE\n         B     USE0000\nMODID    DC    CL8'STCUSE'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSE0000  DS    0H\n         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDUSE,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    USE0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nUSE0010  DS    0H\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE I/O AREA BASE\n         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO\n         LA    R5,USER_DATA                   FIRST OUTPUT SLOT\n         LA    R6,USER_HEADER_L               INITIALIZE OUTPUT LENGTH\n         SR    R7,R7                          NUMBER OF USERS RETURNED\n         ICM   R8,15,COMM_USERS               FIRST USER BLOCK\n         BZ    USE0040                        NO USERS\nCURR     USING USERBLOK,R8\nNET      USING USERBLOK,R5\nUSE0020  DS    0H\n         LA    R0,CURR.USERBLOK\n         LA    R1,USER_L\n         LA    R14,NET.USERBLOK\n         LR    R15,R1\n         MVCL  R14,R0\n         L     R1,CURR.USER_IO                I/O AREA ADDRESS\n         MVC   NET.USER_IO(1),NET_FUNCTION-NET_IO(R1)\n         LA    R5,USER_L(,R5)                 UPDATE OUTPUT ADDRESS\n         LA    R6,USER_L(,R6)                 UPDATE OUTPUT LENGTH\n         LA    R7,1(,R7)                      UPDATE NUMBER OF USERS\n         CH    R7,MAX#                        AT MAX?\n         BE    USE0030                        YES\n         ICM   R8,15,CURR.USER_NEXT           NEXT USER\n         BNZ   USE0020                        LOOP\n         B     USE0040\nUSE0030  DS    0H\n         OC    CURR.USER_NEXT,CURR.USER_NEXT  MORE USERS?\n         BZ    USE0040                        NO\n         MVC   NET_RC,X0004                   SET RETURN CODE TO 4\nUSE0040  DS    0H\n         STCM  R7,3,USER_NBR                  NUMBER OF USERS RETURNED\n         STCM  R6,3,NET_LENGTH                SET OUTPUT LENGTH\n         ITRACE ID=DATABILT,                                           +\n               RDATA1=R6                      .. OUTPUT LENGTH\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDUSE)                      DISPLACEMENT TO WORK AREA\nMAX#      DC   A((32760-USER_HEADER_L)/USER_L)\nX0004     DC   X'0004'\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDUSE   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               NETIO  DSECT=YES\nUSER_NBR       DS     H                 NUMBER OF USERS RETURNED\nUSER_HEADER_L  EQU    *-NET_IO\nUSER_DATA      DS     0C\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n         END  STCUSE\n./ ADD NAME=STCUSER  0119-09140-09161-1544-00207-00224-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCUSER                                               *\n*                                                                     *\n*  User subtask mainline.                                             *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Common area address                                *\n*             R11  Calling module's base address                      *\n*             R10  USERBLOK address                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCUSER  CSECT\nSTCUSER  AMODE 31\nSTCUSER  RMODE ANY\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCUSER,R11                    DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     USER0000\nMODID    DC    CL8'STCUSER'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSER0000 DS    0H\n         L     R10,0(R1)                      USERBLOK ADDRESS\n         L     R12,USER_COMM                  STCCOMM ADDRESS\n         L     R3,DXDSIZE                     WORK AREA SIZE\n         GETMAIN RU,                          ACQUIRE WORK AREA        +\n               LV=(R3),                       .. SIZE                  +\n               LOC=ANY                        .. ANY AREA\n         ST    R1,USER_DXD_ADDR               SAVE WORK AREA ADDRESS\n         LR    R4,R1                          SAVE WORK AREA ADDRESS\n         LR    R2,R1                          COPY WORK AREA ADDRESS\n         SR    R14,R14                        CLEAR REGISTER\n         SR    R15,R15                        CLEAR REGISTER\n         MVCL  R2,R14                         CLEAR THE AREA\n         A     R4,DXD_START                   OFFSET TO OUR PART\n         ST    R13,4(,R4)                     CHAIN WORK AREA\n         ST    R4,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R4                         COPY WORK AREA ADDRESS\n         USING DXDUSER,R13                    DEFINE BASE\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R10\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         XC    USER_TERM_ECB,USER_TERM_ECB\n         MVC   USER_NET,VNET\n         MVC   USER_TCPIP,VTCPIP\n         MVC   USER_VTAM,VVTAM\n*---------------------------------------------------------------------*\n*        Perform network initialization                               *\n*---------------------------------------------------------------------*\n         ITRACE ID=NET_INIT\n         MVI   USER_NET_COMMAND,$USER_NET_INIT\n         L     R15,USER_NET                   NET FUNCTION ENTRY POINT\n         BALR  R14,R15                        DO NETWORK INITIALIZATION\n         ITRACE ID=NET_X\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Subtask initialization complete.. issue RECEIVE              *\n*                                                                     *\n*---------------------------------------------------------------------*\nUSER0010 DS    0H\n         ITRACE ID=RECEIVE\n         MVI   USER_NET_COMMAND,$USER_RECEIVE SET COMMAND\n         L     R15,USER_NET                   NET FUNCTION ENTRY POINT\n         BALR  R14,R15                        DO THE RECEIVE\n         TM    COMM_EOJ,$EOJ1                 SHUTDOWN REQUESTED?\n         BO    EXIT0000                       YES\n         TM    USER_STATUS,$USER_LOST         SESSION LOST?\n         BO    EXIT0000                       YES\n         L     R9,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R9                      DEFINE BASE\n         XC    NET_RC,NET_RC                  CLEAR RETURN CODE\n         LA    R8,USERCMDS                    COMMAND TABLE ADDRESS\n         USING CMD_DSECT,R8                   DEFINE BASE\n         ITRACE ID=SRCCMDS,                                            +\n               DATA1=NET_FUNCTION\nUSER0020 DS    0H\n         CLI   CMD_FUNCTION,X'FF'             END OF TABLE?\n         BE    USER0040                       YES.. INVALID COMMAND\n         CLC   CMD_FUNCTION,NET_FUNCTION      COMMAND LOCATED?\n         BE    USER0030                       YES\n         LA    R8,CMD_DSECT_L(,R8)            NEXT COMMAND\n         B     USER0020                       LOOP\nUSER0030 DS    0H\n         ICM   R15,15,CMD_ADDR                MODULE ADDRESS\n         ITRACE ID=LINK,                                               +\n               RDATA1=R8,                                              +\n               RDATA2=R15\n         BALR  R14,R15                        LINK\n         ITRACE ID=LINK_X\n         B     USER0050\nUSER0040 DS    0H\n         ITRACE ID=BADCMD                     UNKNOWN COMMAND\n         MVC   NET_RC,X0008                   SET RETURN CODE TO 8\n         MVC   NET_MESSAGE(MSG01L),MSG01\n         LA    R1,NET_HEADER_L\n         STCM  R1,3,NET_LENGTH                SET LENGTH\nUSER0050 DS    0H\n         ITRACE ID=REPLY,                     SEND REPLY               +\n               DATA1=USER_IO,                                          +\n               DATA2=NET_LENGTH\n         MVI   USER_NET_COMMAND,$USER_SEND    SET COMMAND (SEND)\n         L     R15,USER_NET                   NET FUNCTION ENTRY POINT\n         BALR  R14,R15                        SEND DATA BACK TO USER\n         ITRACE ID=REPLY_X                    BACK FROM SEND\n         B     USER0010                       ISSUE ANOTHER RECEIVE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n*---------------------------------------------------------------------*\n*        PERFORM NETWORK CLEANUP                                      *\n*---------------------------------------------------------------------*\n         ITRACE ID=NETCLEAN\n         OI    USER_STATUS,$USER_CLEANUP      CLEAN UP PERFORMED\n         MVI   USER_NET_COMMAND,$USER_NET_CLEANUP\n         L     R15,USER_NET                   NET FUNCTION ENTRY POINT\n         BALR  R14,R15                        DO NETWORK INITIALIZATION\n         ITRACE ID=CLEAN_X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TM    COMM_EOJ,$EOJ1                 EOJ IN PROGRESS?\n         BO    EXIT0010                       YES\n         ITRACE ID=POSTMAIN\n         POST  COMM_NET_ECB                   WAKE UP MAINTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0010 DS    0H\n         L     R0,DXDSIZE                     WORK AREA SIZE\n         L     R1,USER_DXD_ADDR               WORK AREA BASE ADDRESS\n         L     R13,4(,R13)                    CALLER'S R13\n         FREEMAIN RU,                         FREE WORK AREA           +\n               A=(1),                                                  +\n               LV=(0)\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSIZE  CXD                                  WORK AREA SIZE\nDXD_START DC   Q(DXDUSER)                     DISPLACEMENT TO WORK AREA\nVNET     DC    V(STCNET)\nVTCPIP   DC    V(STCTCPIP)\nVVTAM    DC    V(STCVTAM)\nX0008    DC    X'0008'\nMSG01    DC    CL11'STCUSER01E'\n         DC    C'Invalid command'\nMSG01L   EQU   *-MSG01\n\nUSERCMDS DS    0C\n         DC    AL1($NET_ID),VL4(STCSID)\n         DC    AL1($NET_ACT),VL4(STCACT)\n         DC    AL1($NET_APF),VL4(STCAPF)\n         DC    AL1($NET_FS),VL4(STCFS)\n         DC    AL1($NET_IPL),VL4(STCIPL)\n         DC    AL1($NET_LLA),VL4(STCLLA)\n         DC    AL1($NET_PS),VL4(STCPS)\n         DC    AL1($NET_SUB),VL4(STCSUB)\n         DC    AL1($NET_USERS),VL4(STCUSE)\n         DC    AL1($NET_LOGOFF),AL4(EXIT0000)\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCMD_DSECT    DSECT\nCMD_FUNCTION DS    X                          FUNCTION CODE\nCMD_ADDR     DS    AL4                        MODULE ENTRY POINT\nCMD_DSECT_L  EQU   *-CMD_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDUSER  DSECT\n         SUTLSAVE  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM   TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO     DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY      REGEQU\n         ABCODES\n         END       STCUSER\n./ ADD NAME=STCVTAM  0114-09140-09169-1100-00246-00186-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: STCVTAM                                               *\n*                                                                     *\n*  Perform VTAM functions.                                            *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Common area address                                *\n*             R11  Calling module's base address                      *\n*             R10  USERBLOK address                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTCVTAM  CSECT\nSTCVTAM  AMODE 31\nSTCVTAM  RMODE ANY\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING STCVTAM,R11                    DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     VTAM0000\nMODID    DC    CL8'STCVTAM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVTAM0000 DS    0H\n         L     R1,USER_DXD_ADDR               DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART\n         ST    R13,4(,R1)                     CHAIN WORK AREA\n         ST    R1,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         USING DXDVTAM,R13                    DEFINE BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    VTAM0010                       YES\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nVTAM0010 DS    0H\n         ITRACE ID=ENTRY\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R4,USER_IO                     I/O AREA ADDRESS\n         USING NET_IO,R4\n         LA    R6,USER_NET_ECB                ECB ADDRESS\n         L     R9,COMM_ACB                    ACB'S ADDRESS\n         CLI   USER_NET_COMMAND,$USER_NET_INIT\n         BE    VTAM0020\n         USING IFGACB,R9                      DEFINE ACB BASE\n         L     R8,USER_RPL                    RPL'S ADDRESS\n         USING IFGRPL,R8                      DEFINE RPL BASE\n         L     R7,RPLAAREA                    RPLX'S ADDRESS\n         USING ISTRPL6X,R7                    DEFINE RPL EXTENSION BASE\n         CLI   USER_NET_COMMAND,$USER_RECEIVE\n         BE    VTAM0100\n         CLI   USER_NET_COMMAND,$USER_SEND\n         BE    VTAM0200\n         CLI   USER_NET_COMMAND,$USER_NET_CLEANUP\n         BE    VTAM0300\n         ABEND $U0004,DUMP,,USER              INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        VTAM INITIALIZATION                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0020 DS    0H\n         ITRACE ID=INIT\n         GETMAIN RU,                          ACQUIRE STORAGE FOR RPL  +\n               LV=RPLL,                       .. SIZE                  +\n               LOC=ANY                        ..\n         LR    R8,R1                          SAVE RPL ADDRESS\n         ST    R8,USER_RPL                    SAVE RPL'S ADDRESS\n         MVC   0(RPLL,R8),RPLI                INITIALIZE RPL\n         MVC   RPLDACB,COMM_ACB               SET ACB ADDRESS IN RPL\n         GETMAIN RU,                          FOR RPL EXTENSION        +\n               LV=RPLEXTL,                    .. SIZE                  +\n               LOC=ANY                        ..\n         LR    R7,R1\n         ST    R7,USER_RPLX                   SAVE ADDRESS\n         ST    R7,RPLAAREA                    SET ADDRESS IN RPL\n         MVC   0(RPLEXTL,R7),RPLEXTI          INITIALIZE RPL EXTENSION\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0100 DS    0H\n         ITRACE ID=RECEIVE,                   ISSUE A RECEIVE          +\n               DATA1=USER_LU,                 .. USER'S LU NAME        +\n               DATA2=USER_ID                  .. USER'S ID\n         L     R5,=A(32760)                   MAXIMUM I/O AREA SIZE\n         L     R1,USER_RECEIVES               NUMBER OF RECEIVES\n         LA    R1,1(,R1)                      PLUS 1\n         ST    R1,USER_RECEIVES               SAVE NEW TOTAL\n         XC    USER_NET_ECB,USER_NET_ECB\n         APPCCMD CONTROL=RECEIVE,             ISSUE A RECEIVE          +\n               QUALIFY=SPEC,                  .. SPECIFIC CONVERSATION +\n               RPL=(R8),                      .. RPL'S ADDRESS         +\n               FILL=LL,                       .. ONLY 1 LOGICAL RECORD +\n               AREA=(R4),                     .. I/O AREA ADDRESS      +\n               AREALEN=(R5),                  .. I/O AREA SIZE         +\n               ECB=(R6),                      .. ECB ADDRESS           +\n               CONMODE=CS,                    .. CONTINUE SPECIFIC     +\n               CONVID=USER_CID,               .. CONVERSATION ID       +\n               OPTCD=ASY                      .. ASYNCHRONOUS\n         WAIT  ECB=(R6)                       WAIT FOR VTAM\n         TM    COMM_EOJ,$EOJ1                 SHUTDOWN UNDERWAY?\n         BO    EXIT0000                       YES.. EXIT NOW\n         APPCCMD CONTROL=CHECK,               ISSUE A CHECK            +\n               RPL=(R8)                       .. RPL ADDRESS\n         TM    RPL6RCV1,RPL6WDAL              DE-ALLOCATE RECEIVED?\n         BO    VTAM0110                       YES..\n         CLC   RPL6RC,X0048                   UNRECOVERABLE ERROR?\n         BE    VTAM0120                       YES\n         OC    RPL6RC,RPL6RC                  SUCCESSFUL?\n         BNZ   EXIT0000                       NO\n         L     R1,USER_BYTES_RECEIVED         LENGTH RECEIVED SO FAR\n         AH    R1,NET_LENGTH                  PLUS LENGTH JUST RECEIVED\n         ST    R1,USER_BYTES_RECEIVED         SAVE NEW TOTAL\n         B     EXIT0000                       AND EXIT\nVTAM0110 DS    0H\n         ITRACE ID=DEALLOC,                   SESSION DEALLOCATED      +\n               DATA1=USER_LU,                                          +\n               DATA2=USER_ID\n         OI    USER_STATUS,$USER_DEALLOCATE   USER SESSION DEALLOCATED\n         B     EXIT0000                       EXIT\nVTAM0120 DS    0H\n         ITRACE ID=X0048,                     UNRECOVERABLE ERROR      +\n               DATA1=USER_LU,                                          +\n               DATA2=USER_ID\n         OI    USER_STATUS,$USER_DEALLOCATE   SET STATUS\n         B     EXIT0000                       EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nVTAM0200 DS    0H\n         ITRACE ID=SEND,                      ISSUE A SEND             +\n               DATA1=USER_LU,                 .. USER'S LU NAME        +\n               DATA2=USER_ID                  .. USER'S ID\n         SR    R5,R5                          CLEAR REGISTER\n         ICM   R5,3,NET_LENGTH                TOTAL DATA LENGTH\n         L     R1,USER_SENDS                  NUMBER OF SENDS\n         LA    R1,1(,R1)                      PLUS 1\n         ST    R1,USER_SENDS                  SAVE NEW TOTAL\n         L     R1,USER_BYTES_SENT             LENGTH SENT SO FAR\n         AH    R1,NET_LENGTH                  PLUS LENGTH JUST SENT\n         ST    R1,USER_BYTES_SENT             SAVE NEW TOTAL\n         XC    USER_NET_ECB,USER_NET_ECB\n         APPCCMD CONTROL=SEND,                ISSUE APPC CMD           +\n               QUALIFY=DATA,                  .. SEND DATA             +\n               RPL=(R8),                      .. RPL ADDRESS           +\n               AREA=(R4),                     .. I/O AREA              +\n               RECLEN=(R5),                   .. LENGTH OF DATA        +\n               ECB=(R6),                      .. ECB ADDRESS           +\n               CONMODE=CS,                    .. CONTINUE SPECIFIC     +\n               CONVID=USER_CID,               .. CONVERSATION ID       +\n               OPTCD=ASY                      .. ASYNCHRONOUS\n         ITRACE ID=WAIT\n         WAIT  ECB=(R6)                       WAIT ON VTAM\n         TM    COMM_EOJ,$EOJ1                 SHUTDOWN UNDERWAY?\n         BO    EXIT0000                       YES.. EXIT NOW\n         APPCCMD CONTROL=CHECK,               ISSUE A CHECK            +\n               RPL=(R8)                       .. RPL ADDRESS\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTAM0300 DS    0H\n         ITRACE ID=CLEAN_UP\n         L     R8,USER_RPL                    RPL ADDRESS\n         ITRACE ID=FREE_RPL,                                           +\n               RDATA1=R8\n         FREEMAIN RU,                                                  +\n               A=(R8),                                                 +\n               LV=RPLL\n         XC    USER_RPL,USER_RPL\n         L     R7,USER_RPLX\n         ITRACE ID=FREE_RPLX,                                          +\n               RDATA1=R7\n         FREEMAIN RU,                                                  +\n               A=(R7),                                                 +\n               LV=RPLEXTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    CALLER'S R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVTAM)                     DISPLACEMENT TO WORK AREA\nRPLI     RPL   AM=VTAM,                                                +\n               AAREA=RPLEXTI\nRPLL     EQU   *-RPLI\nRPLEXTI  ISTRPL6\nRPLEXTL  EQU   *-RPLEXTI\n\nX0048    DC    X'00480000'                    UNRECOVERABLE ERROR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVTAM  DSECT\n         SUTLSAVE DSECT=NO\n         PRTBLOK  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      STCVTAM\n./ ADD NAME=TCPIPSUB 0113-09148-09173-0903-00548-00524-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    TCP/IP subtask                                                   *\n*                                                                     *\n*   The PORT number we are to use is given on the PORT statement      *\n*   in the start up parameters.                                       *\n*                                                                     *\n*   At start-up this subtask                                          *\n*      1) initializes the TCP/IP environment                          *\n*      2) obtains its own CLIENTID                                    *\n*      3) creates a socket                                            *\n*      4) BINDs to the port given in the start-up parameters          *\n*      5) issues a LISTEN                                             *\n*                                                                     *\n*                                                                     *\n*   When a user connects                                              *\n*      1) Issue an ACCEPT to get the socket for this connection       *\n*      2) Log this connection                                         *\n*      3) GETMAIN a new USERBLOK                                      *\n*      4) Issue a GIVESOCKET                                          *\n*      5) POST the main task                                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*   When the user subtask initializes, it issues a TAKESOCKET.        *\n*   After the GIVESOCKET/TAKESOCKET, the user subtask communicates    *\n*   directly with the user.. that is this subtask is no longer        *\n*   involved in the sending and receiving of data via the network     *\n*   for that particular user.  Each user will have their own subtask. *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTCPIPSUB CSECT\nTCPIPSUB AMODE 31\nTCPIPSUB RMODE ANY\n         USING TCPIPSUB,R11                   DEFINE BASE\n         USING STCCOMM,R12                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     INIT0000                       BRANCH AROUND EYECATCHER\nMODID    DC    CL8'TCPIPSUB'                  MODULE NAME\n         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY\nINIT0000 DS    0H\n         L     R12,0(,R1)                     COPY COMM AREA BASE\n         ST    R11,ATCPIPSUB\n         GETMAIN RU,                          OBTAIN WORK AREA         +\n               LV=WORKAREA_L,                                          +\n               LOC=ANY\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1                         SAVE WORK AREA ADDRESS\n         USING WORKAREA,R13                   DEFINE BASE\n         ITRACE ID=ENTRY\n         GETMAIN RU,                                                   +\n               LV=GWALENTH,                                            +\n               LOC=ANY\n         ST    R1,WORK_TCPIP_GWA              TCP/IP GLOBAL WORK AREA\n         LA    R1,TCPIP_WORK_ECB\n         ST    R1,WORK_WAIT_ECB_1\n         LA    R1,WORK_TCPIP_ECB\n         ST    R1,WORK_WAIT_ECB_2\n         OI    WORK_WAIT_ECB_2,X'80'\n         MVI   PRT_COMMAND,$PRT_PRINT         PRINT\n         MVI   PRT_CC,C' '                    SINGLE SPACE\n         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC\n* ------------------------------------------------------------------- *\n*     Make the INITAPI call                                           *\n* ------------------------------------------------------------------- *\n         ITRACE ID=INITAPI,                                            +\n               DATA1=C_SUTLSTC\n         MVC   PRT_MSGID(MSG01_L),MSG01\n         BAL   R8,PRT0000\n         XC    WORK_TCPIP_TASK(TIELENTH),WORK_TCPIP_TASK\n         MVC   WORK_TCPIP_FUNCTION,=CL16'INITAPI'\n         EZASMI TYPE=INITAPI,                                          +\n               MAXSNO=WORK_MAX_SOCKET,                                 +\n               SUBTASK=MODID,                                          +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ASYNC='ECB',                                            +\n               ERROR=ERR0010,                                          +\n               TASK=WORK_TCPIP_TASK\n         BAL   R8,INFO0000\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n* ------------------------------------------------------------------- *\n*     Get our CLIENTID                                                *\n* ------------------------------------------------------------------- *\n         ITRACE ID=GETID\n         MVC   COMM_MAIN_CLIENT_NAME,COMM_BLANKS\n         MVC   COMM_MAIN_CLIENT_TASK,COMM_BLANKS\n         XC    COMM_MAIN_CLIENT_TASK+8(20),COMM_MAIN_CLIENT_TASK+8\n         MVC   WORK_TCPIP_FUNCTION,=CL16'GETCLIENTID'\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         EZASMI TYPE=GETCLIENTID,                                      +\n               CLIENT=COMM_MAIN_CLIENT,                                +\n               ECB=WORK_TCPIP_ECB,                                     +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               TASK=WORK_TCPIP_TASK\n         WAIT  ECB=WORK_TCPIP_ECB\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n         ITRACE ID=CLIENTID,                                           +\n               DATA1=COMM_MAIN_CLIENT_NAME,                            +\n               DATA2=COMM_MAIN_CLIENT_TASK\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n* ------------------------------------------------------------------- *\n*     Create the socket                                               *\n* ------------------------------------------------------------------- *\n         MVC   PRT_MSGID(MSG02_L),MSG02\n         BAL   R8,PRT0000\n         ITRACE ID=SOCKET\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         MVC   WORK_TCPIP_FUNCTION,=CL16'SOCKET'\n         EZASMI TYPE=SOCKET,                                           +\n               AF='INET',                                              +\n               SOCTYPE='STREAM',                                       +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ECB=WORK_TCPIP_ECB,                                     +\n               TASK=WORK_TCPIP_TASK\n         WAIT  ECB=WORK_TCPIP_ECB\n         BAL   R8,INFO0000\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n         MVC   WORK_MY_SOCKET,WORK_TCPIP_RETURN_CODE+2\n* ------------------------------------------------------------------- *\n*     BIND the socket                                                 *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BIND,                                               +\n               DATA1=COMM_PORT\n         MVC   PRT_MSGID(MSG03_L),MSG03\n         LH    R0,COMM_PORT\n         CVD   R0,COMM_DWORD\n         MVC   WORK_EDIT,=X'402120202020'\n         ED    WORK_EDIT,COMM_DWORD+5\n         MVC   PRT_MSGID+(MSG03_PORT-MSG03)(L'MSG03_PORT),WORK_EDIT+1\n         BAL   R8,PRT0000\n         XC    WORK_SOCKET_STRUCTURE,WORK_SOCKET_STRUCTURE\n         MVC   WORK_SOCKET_FAMILY,C_AF_INET\n         MVC   WORK_SOCKET_PORT,COMM_PORT\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         MVC   WORK_TCPIP_FUNCTION,=CL16'BIND'\n         EZASMI TYPE=BIND,                                             +\n               S=WORK_MY_SOCKET,                                       +\n               NAME=WORK_SOCKET_STRUCTURE,                             +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ECB=WORK_TCPIP_ECB,                                     +\n               TASK=WORK_TCPIP_TASK\n         WAIT  ECB=WORK_TCPIP_ECB\n         BAL   R8,INFO0000\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n* ------------------------------------------------------------------- *\n*     Start LISTENing                                                 *\n* ------------------------------------------------------------------- *\n         MVC   PRT_MSGID(MSG04_L),MSG04\n         BAL   R8,PRT0000\n         ITRACE ID=LISTEN\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         MVC   WORK_TCPIP_FUNCTION,=CL16'LISTEN'\n         EZASMI TYPE=LISTEN,                                           +\n               BACKLOG=5,                                              +\n               S=WORK_MY_SOCKET,                                       +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ECB=WORK_TCPIP_ECB,                                     +\n               TASK=WORK_TCPIP_TASK\n         WAIT  ECB=WORK_TCPIP_ECB\n         BAL   R8,INFO0000\n         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE\n         BNZ   ERR0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Print \"Accepting LOG ONs\" message                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   PRT_MSGID(MSG05_L),MSG05\n         BAL   R8,PRT0000\n* ------------------------------------------------------------------- *\n*     Issue ACCEPT                                                    *\n* ------------------------------------------------------------------- *\nMAIN0000 DS    0H\n         TM    COMM_EOJ,$EOJ1\n         BO    TERM0000\n         ITRACE ID=ACCEPT\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         MVC   WORK_TCPIP_FUNCTION,=CL16'ACCEPT'\n         EZASMI TYPE=ACCEPT,                                           +\n               S=WORK_MY_SOCKET,                                       +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               NAME=WORK_SOCKET_STRUCTURE,                             +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ECB=WORK_TCPIP_ECB,                                     +\n               TASK=WORK_TCPIP_TASK\n         TM    WORK_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0020\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Wait for either a CONNECT or server shutdown                 *\n*        command (entered via the console).                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=WAIT\n         WAIT  ECBLIST=WORK_WAIT_LIST\n         ITRACE ID=AWAKE\n         TM    COMM_EOJ,$EOJ1\n         BO    TERM0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        We have been contacted..                                     *\n*          build a new USERBLOK                                       *\n*          issue a GIVESOCKET                                         *\n*          ATTACH a new user subtask                                  *\n*          all that was tiring so go WAIT again                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R1,COMM_TCPIP_CONNECTIONS      NUMBER OF CONNECTIONS\n         LA    R1,1(,R1)                      PLUS 1\n         ST    R1,COMM_TCPIP_CONNECTIONS      SAVE TOTAL\n         GETMAIN RU,                                                   +\n               LV=USER_L,                                              +\n               LOC=ANY\n         LR    R10,R1\n         USING USERBLOK,R10\n         ITRACE ID=NEWUSER,                                            +\n               RDATA1=R10,                    .. USERBLOK ADDR         +\n               DATA2=WORK_TCPIP_RETURN_CODE   .. SOCKET DESCRIPTOR\n         LR    R0,R1\n         LA    R1,USER_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n\n         MVC   USER_EYE,C_USERBLOK            IDENTIFY CONTROL BLOCK\n         MVI   USER_STATUS,$USER_INITIAL+$USER_TCPIP\n         MVC   WORK_USER_SOCKET,WORK_TCPIP_RETURN_CODE+2\n         MVC   USER_SOCKET,WORK_TCPIP_RETURN_CODE+2\n         TIME  DEC\n         STCM  R0,15,USER_TIME                SAVE TIME\n         STCM  R1,15,USER_DATE                SAVE DATE\n         ST    R12,USER_COMM                  SET STCCOMM'S ADDRESS\n         MVC   USER_ID,COMM_BLANKS            INITIALIZE USER'S NAME\n         MVC   WORK_ENQ(ENQL),ENQI\n         MVC   USER_CLIENT(36),COMM_MAIN_CLIENT\n         MVC   USER_CLIENT_NAME,COMM_MAIN_CLIENT_NAME\n         MVC   USER_CLIENT_TASK,=X'F020202020202120'\n\n         SR    R1,R1\n\n         IC    R1,WORK_SOCKET_CLIENT_IP+0\n         CVD   R1,COMM_DWORD\n         MVC   WORK_EDIT,=X'F02120202020'\n         ED    WORK_EDIT,COMM_DWORD+5\n         MVC   USER_IP_ADDRESS+00(3),WORK_EDIT+3\n\n         IC    R1,WORK_SOCKET_CLIENT_IP+1\n         CVD   R1,COMM_DWORD\n         MVC   WORK_EDIT,=X'F02120202020'\n         ED    WORK_EDIT,COMM_DWORD+5\n         MVC   USER_IP_ADDRESS+04(3),WORK_EDIT+3\n\n         IC    R1,WORK_SOCKET_CLIENT_IP+2\n         CVD   R1,COMM_DWORD\n         MVC   WORK_EDIT,=X'F02120202020'\n         ED    WORK_EDIT,COMM_DWORD+5\n         MVC   USER_IP_ADDRESS+08(3),WORK_EDIT+3\n\n         IC    R1,WORK_SOCKET_CLIENT_IP+3\n         CVD   R1,COMM_DWORD\n         MVC   WORK_EDIT,=X'F02120202020'\n         ED    WORK_EDIT,COMM_DWORD+5\n         MVC   USER_IP_ADDRESS+12(3),WORK_EDIT+3\n\n         MVI   USER_IP_ADDRESS+03,C'.'\n         MVI   USER_IP_ADDRESS+07,C'.'\n         MVI   USER_IP_ADDRESS+11,C'.'\n\n         L     R1,COMM_TCPIP_CONNECTIONS\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         ED    USER_CLIENT_TASK,COMM_DWORD+4\n         MVI   USER_CLIENT_TASK,C'U'\n         ITRACE ID=ENQ\n         ENQ   MF=(E,WORK_ENQ)\n         ICM   R1,15,COMM_USERS               FIRST ON CHAIN\n         ST    R1,USER_NEXT                   CHAIN TO NEW BLOCK\n         ST    R10,COMM_USERS                 ADD NEW BLOCK TO CHAIN\nNEXT     USING USERBLOK,R1\n         LTR   R1,R1                          NEXT BLOCK EXIST?\n         BZ    MAIN0020                       NO\n         ST    R10,NEXT.USER_PREV             SET PREVIOUS IN NEXT\nMAIN0020 DS    0H\n         ITRACE ID=DEQ\n         DEQ   MF=(E,WORK_ENQ)\n         ITRACE ID=POST_NET\n         POST  COMM_NET_ECB                   WAKE UP MAIN TASK\n         LA    R1,USER_API_ECB\n         ITRACE ID=WAITAPI,                                            +\n               RDATA1=R1\n         WAIT  ECB=USER_API_ECB               WAIT FOR SUBTASK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   WORK_TCPIP_FUNCTION,=CL16'GIVESOCKET'\n         ITRACE ID=GIVESOKT,                                           +\n               DATA1=USER_CLIENT_NAME,                                 +\n               DATA2=USER_CLIENT_TASK\n         ITRACE ID=GIVE+,                                              +\n               DATA1=WORK_USER_SOCKET,                                 +\n               DATA2=USER_SOCKET\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         EZASMI TYPE=GIVESOCKET,                                       +\n               S=WORK_USER_SOCKET,                                     +\n               CLIENT=USER_CLIENT,                                     +\n               ECB=WORK_TCPIP_ECB,                                     +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               RETCODE=WORK_TCPIP_RETURN_CODE\n         ITRACE ID=POSTTAKE\n         POST  USER_TAKESOCKET_ECB\n         ITRACE ID=WAITGIVE\n         WAIT  ECB=WORK_TCPIP_ECB\n         ITRACE ID=GIVE_X\n         TM    WORK_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0050\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              Log the connection                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   PRT_MSGID(MSG10_L),MSG10\n         MVC   PRT_MSGID+(MSG10_IP_ADDRESS-MSG10)(L'MSG10_IP_ADDRESS),U++\n               SER_IP_ADDRESS\n         BAL   R8,PRT0000\n* ------------------------------------------------------------------- *\n*        The new connection has been processed.                       *\n*        At least this subtask's work is done.                        *\n*        Now issue another ACCEPT.                                    *\n* ------------------------------------------------------------------- *\n         B     MAIN0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        The main task has signalled shutdown                         *\n*                                                                     *\n*        CLOSE the socket and issue a TERMAPI to clean-up.            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTERM0000 DS    0H\n         ITRACE ID=CLOSE\n         MVC   WORK_TCPIP_FUNCTION,=CL16'CLOSE'\n         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB\n         EZASMI TYPE=CLOSE,                                            +\n               S=WORK_MY_SOCKET,                                       +\n               RETCODE=WORK_TCPIP_RETURN_CODE,                         +\n               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +\n               ECB=WORK_TCPIP_ECB\n         WAIT  ECB=WORK_TCPIP_ECB\n         BAL   R8,INFO0000\n\n         ITRACE ID=TERMAPI\n         MVC   WORK_TCPIP_FUNCTION,=CL16'TERMAPI'\n         EZASMI TYPE=TERMAPI,                                          +\n               TASK=WORK_TCPIP_TASK\n         BAL   R8,INFO0000\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINFO0000 DS    0H\n         MVC   PRT_MSGID(MSG90_L),MSG90\n         MVC   PRT_MSGID+(MSG90_FUNCTION-MSG90)(L'MSG90_FUNCTION),WORK_++\n               TCPIP_FUNCTION\n         UNPK  PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(9),WORK_TCPIP_RETURN++\n               _CODE(5)\n         TR    PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(8),C_HEXCHAR\n         MVI   PRT_MSGID+(MSG90_RETURN_CODE-MSG90)+8,C' '\n         L     R1,WORK_TCPIP_ERROR_NUMBER\n         CVD   R1,COMM_DWORD\n         ED    PRT_MSGID+(MSG90_ERROR_NUMBER-MSG90)(L'MSG90_ERROR_NUMBE++\n               R),COMM_DWORD+5\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        A REQUEST TO QUEUE\n         BR    R8\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'1'\nERR0020  DS    0H\n         BAL   R8,INFO0000\n         DC    H'2'\nERR0030  DS    0H\n         DC    H'3'\nERR0040  DS    0H\n         DC    H'4'\nERR0050  DS    0H\n         BAL   R8,INFO0000\n         DC    H'5'\n* ------------------------------------------------------------------- *\n*        Exit                                                         *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         MVC   PRT_MSGID(MSG91_L),MSG91\n         BAL   R8,PRT0000\n         ICM   R1,15,WORK_TCPIP_GWA\n         BZ    EXIT0010\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=GWALENTH\nEXIT0010 DS    0H\n         LR    R1,R13                         COPY SAVE AREA ADDRESS\n         L     R13,4(,R13)                    CALLER'S SAVE AREA\n         FREEMAIN RU,                         FREE WORK AREA           +\n               A=(1),                                                  +\n               LV=WORKAREA_L\n         LM    R14,R12,12(R13)\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nENQI     ENQ   (QNAME,RNAME,E,,STEP),RET=NONE,MF=L\nENQL     EQU   *-ENQI\nQNAME    DC    CL8'SUTL'\nRNAME    DC    CL8'USERBLOK CHAIN'\n\nC_H4                     DC    H'4'\nC_AF_INET                DC    X'0002'\n\nC_HEXCHAR                EQU   *-C'0'\n                         DC    C'0123456789ABCDEF'\n\nC_SUTLSTC                DC    CL8'SUTLSTC'\nC_USERBLOK               DC    CL8'USERBLOK'\nMSG01                    DS    0C\n                         DC    CL15'TCPIPSUB01I'\n                         DC    C'Issuing INITAPI'\nMSG01_L                  EQU   *-MSG01\nMSG02                    DS    0C\n                         DC    CL15'TCPIPSUB02I'\n                         DC    C'Creating socket'\nMSG02_L                  EQU   *-MSG02\nMSG03                    DS    0C\n                         DC    CL15'TCPIPSUB03I'\n                         DC    C'BINDing to port '\nMSG03_PORT               DC    CL5' '\nMSG03_L                  EQU   *-MSG03\nMSG04                    DS    0C\n                         DC    CL15'TCPIPSUB04I'\n                         DC    C'LISTENing'\nMSG04_L                  EQU   *-MSG04\nMSG05                    DS    0C\n                         DC    CL15'TCPIPSUB05I'\n                         DC    C'ACCEPTing connections'\nMSG05_L                  EQU   *-MSG05\nMSG10                    DS    0C\n                         DC    CL15'TCPIPSUB10I'\n                         DC    C'CONNECTION arrived from '\nMSG10_IP_ADDRESS         DC    CL15' '\nMSG10_L                  EQU   *-MSG10\nMSG90                    DS    0C\n                         DC    CL15'TCPIPSUB90I'\n                         DC    C'TCP/IP function '\nMSG90_FUNCTION           DC    CL16' '\n                         DC    C'  Return code: '\nMSG90_RETURN_CODE        DC    CL8' '\n                         DC    C'  Error number:'\nMSG90_ERROR_NUMBER       DC    X'402020202120'\nMSG90_L                  EQU   *-MSG90\nMSG91                    DS    0C\n                         DC    CL15'TCPIPSUB91I'\n                         DC    C'TCP/IP subtask terminating'\nMSG91_L                  EQU   *-MSG91\n\n                         LTORG\n* ------------------------------------------------------------------- *\n*              WORK AREA                                              *\n* ------------------------------------------------------------------- *\nWORKAREA                 DSECT\n                         SUTLSAVE DSECT=NO\nWORK_MAX_SOCKET          DS   F\nWORK_EDIT                DS   XL6\n\nWORK_USER_SOCKET         DS   H\nWORK_RC                  DS   H\n\nWORK_MY_SOCKET           DS   H\n\nWORK_ENQ                 DS   0F,(ENQL)X\n\n                         DS   0F\nWORK_SOCKET_STRUCTURE    DS   0XL16\nWORK_SOCKET_FAMILY       DS   AL2           FAMILY (ALWAYS = 2)\nWORK_SOCKET_PORT         DS   XL2           PORT NUMBER\nWORK_SOCKET_CLIENT_IP    DS   XL4           CLIENT'S IP ADDRESS\n                         DS   XL8           RESERVED\n\nWORK_TCPIP_ECB           DS   F\n                         DS   XL100\n\nWORK_TCPIP_ERROR_NUMBER  DS   F\nWORK_TCPIP_FUNCTION      DS   CL16\nWORK_TCPIP_GWA           DS   F\nWORK_TCPIP_RETURN_CODE   DS   F\nWORK_TCPIP_TASK          EZASMI TYPE=TASK,STORAGE=CSECT\n\nWORK_WAIT_LIST           DS   0F            WAIT LIST\nWORK_WAIT_ECB_1          DS   F             COMM_TERMINATION_ECB\nWORK_WAIT_ECB_2          DS   F             TCPIP_ECB\n\n                         PRTBLOK  DSECT=NO\n\nWORKAREA_L               EQU  *-WORKAREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EZASMI   TYPE=GLOBAL,STORAGE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                  COPY   REGEQU\n         END      TCPIPSUB\n./ ADD NAME=TSOACB   0100-09190-09190-0759-00012-00012-00000-SOURCE\nTSOACB   CSECT\nTSOACB   AMODE 31\nTSOACB   RMODE ANY\n         DC    CL8'appl1 '      <-- replace with your VTAM APPL IDs\n         DC    CL8'appl2 '\n         DC    CL8'  .\n         DC    CL8'  .\n         DC    CL8'  .\n         DC    CL8'  .\n         DC    CL8'appln '\n         DC    X'FF'\n         END   TSOACB\n./ ADD NAME=TSOACT   0115-09140-09173-0904-00522-00520-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOACT - DISPLAY ACTIVE REGIONS                       *\n*                                                                     *\n*  Function:                                                          *\n*   Display the active regions                                        *\n*                                                                     *\n*                                                                     *\n*   Sub-commands are:                                                 *\n*     ALL           Display all region types (JOB, STC, and TSO).     *\n*     JOB           Display only batch jobs.                          *\n*     STC           Display only started tasks.                       *\n*     TSU           Display only TSO users.                           *\n*     PREFIX xxxxx  Display only regions whose name begins with the   *\n*                   specified prefix.  The prefix may be 1 to 8       *\n*                   characters.  To reset the prefix enter \"PREFIX\"   *\n*                   followed by blanks.                               *\n*     USER xxxxxxx  Display only regions that are running under the   *\n*                   user id prefix given.  The prefix may be 1 to 8   *\n*                   characters.  To reset the user prefix enter       *\n*                   \"USER\" followed by blanks.                        *\n*                                                                     *\n*     ALL, JOB, STC, and TSU are mutually exclusive.                  *\n*     PREFIX and USER may be used concurrently.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOACT   CSECT\nTSOACT   AMODE 31\nTSOACT   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOACT,R11                     DEFINE PROGRAM BASE\n         B     ACT0000\nMODID    DC    CL8'TSOACT'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nACT0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDACT,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    ACT0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         MVI   DXD_REGION_TYPES,$ACT_BATCH    DISPLAY BATCH ONLY\nACT0010  DS    0H\n         MVI   VAR_COMMAND,$VAR_DEFINE_ALL    SET COMMAND (DEFINE ALL)\n         LA    R1,ACTVARS                     VARIABLE CONTROL INFO\n         ST    R1,VAR_TABLE                   SET ADDRESS\n         LA    R1,DXDACT                      BASE ADDR\n         ST    R1,VAR_AREA                    SET ADDRESS\n         LA    R1,VAR_REQ                     PARM BLOCK ADDRESS\n         L     R15,AVARS\n         BALR  R14,R15                        DEFINE VARIABLES\n         B     ACT0110                        PROCESS ANY SUB COMMAND\nACT0020  DS    0H\n         ITRACE ID=CLEAR\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR                     LINE\nACT0030  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_ACT          SET FUNCTION\n         MVC   ACT_REGION_TYPES,DXD_REGION_TYPES\n         MVC   ACT_NAME_PREFIX_LENGTH,DXD_NAME_PREFIX_LENGTH\n         MVC   ACT_NAME_PREFIX,DXD_NAME_PREFIX\n         MVC   ACT_USER_PREFIX_LENGTH,DXD_USER_PREFIX_LENGTH\n         MVC   ACT_USER_PREFIX,DXD_USER_PREFIX\n         LA    R1,NET_HEADER_L+ACT_HEADER_L   LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n         ITRACE ID=BLDDATA\nACT0040  DS    0H\n         SR    R1,R1                          CLEAR REGISTER\n         ICM   R1,3,ACT_CPU_BUSY              CPU BUSY PERCENTAGE\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_CPU_BUSY,EDWD1             INITIALIZE EDIT WORD\n         ED    DXD_CPU_BUSY,COMM_DWORD+6      EDIT CPU PERCENTAGE\n         MVC   DXD_CPU_BUSY(3),DXD_CPU_BUSY+1 SHIFT 1 TO LEFT\n         MVI   DXD_CPU_BUSY+3,C'%'            INSERT THE PERCENT SIGN\n         SR    R6,R6                          CLEAR REGISTER\n         ICM   R6,3,ACT_NBR_REGIONS           ANY REGIONS RETURNED?\n         BZ    ACT0290                        NO\n         LA    R7,ACT_REGION                  FIRST REGION IN DATA\n         USING ACT_REGION,R7                  DEFINE BASE\n         ST    R6,COMM_TEXT_LINES             SET NUMBER OF LINES\n         ITRACE ID=REGIONS,                                            +\n               RDATA1=R6                      .. NBR OF ADDRESS SPACES\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R6                          COPY NUMBER OF LINES\n         M     R0,LINELEN                     TIMES LENGTH PER LINE\n         ST    R1,COMM_TEXT_LENGTH            SAVE TEXT AREA SIZE\n         GETMAIN RU,                          STORAGE FOR TEXT AREA    +\n               LV=(1),                        .. SIZE OF AREA          +\n               LOC=ANY                        .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,                  TEXT AREA ACQUIRED       +\n               RDATA1=R1,                     .. AREA ADDRESS          +\n               DATA2=COMM_TEXT_LENGTH         .. AREA SIZE\n         ST    R1,COMM_TEXT                   SAVE ADDRESS\n         LR    R5,R1                          COPY ADDRESS\n         USING DTL,R5                         DEFINE BASE\nACT0050  DS    0H\n         MVC   DTL(DTL_L),COMM_BLANKS         CLEAR DETAIL AREA\n         MVC   DTL_NAME,ACT_NAME              COPY JOB NAME\n         MVC   DTL_STEP,ACT_STEP              COPY STEP NAME\n         MVC   DTL_PROC_STEP,ACT_PROC_STEP    COPY PROC STEP NAME\n         MVC   DTL_USER,ACT_USER              COPY USER NAME\n         LA    R1,REGION_TYPES                REGION TYPES TABLE\nACT0060  DS    0H\n         CLI   0(R1),X'FF'                    END OF TABLE?\n         BE    ERR0010                        YES..\n         CLC   ACT_REGION_TYPE,0(R1)          ENTRY FOUND?\n         BE    ACT0070                        YES\n         LA    R1,4(,R1)                      NEXT TYPE\n         B     ACT0060                        LOOP\nACT0070  DS    0H\n         MVC   DTL_REGION_TYPE,1(R1)          COPY TYPE\n         LA    R1,SWAP_CODES                  SWAP CODES TABLE\nACT0080  DS    0H\n         CLI   0(R1),X'FF'                    END OF TABLE?\n         BE    ERR0020                        YES..\n         CLC   ACT_SWAP_STATUS,0(R1)          ENTRY FOUND?\n         BE    ACT0090                        YES\n         LA    R1,5(,R1)                      NEXT TYPE\n         B     ACT0080                        LOOP\nACT0090  DS    0H\n         MVC   DTL_SWAP_STATUS,1(R1)          COPY SWAP\n         MVC   DTL_ATTR,4(R1)                 COPY ATTRIBUTE\n         ICM   R1,15,ACT_REAL_FRAMES          FRAMES IN USE\n         SLL   R1,2                           TIMES 4 (4K TO A PAGE)\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DTL_REAL,EDWD3                 INITIALIZE WITH EDIT WORD\n         ED    DTL_REAL,COMM_DWORD+5          EDIT STORAGE SIZE\n         MVI   DTL_REAL_UNITS,C'K'            INDICATE IN 'K' UNITS\n         L     R1,ACT_SERVICE_UNITS           SERVICE UNITS\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DTL_SERVICE_UNITS,EDWD2        INITIALIZE WITH EDIT WORD\n         ED    DTL_SERVICE_UNITS,COMM_DWORD+4 EDIT SERVICE UNITS\n         L     R1,ACT_IO                      NUMBER OF NON-SPOOL I/O'S\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DTL_IO,EDWD2                   INITIALIZE WITH EDIT WORD\n         ED    DTL_IO,COMM_DWORD+4            EDIT NBR OF I/O'S\n         LM    R0,R1,ACT_TCB_TIME             TCB CPU TIME\n         LM    R14,R15,ACT_SRB_TIME           SRB CPU TIME\n         SRDL  R0,12                          CONVERT TO MICRO SECONDS\n         SRDL  R14,12                         CONVERT TO MICRO SECONDS\n         D     R0,F10000                      CONVERT TO HUNDREDTHS\n         D     R14,F10000                     CONVERT TO HUNDREDTHS\n         AR    R1,R15                         TCB + SRB TIME\n         MVC   DTL_CPU_TIME(11),=C'  .  .  .  '\n         SR    R0,R0                          CLEAR REGISTER\n         D     R0,F100                        CONVERT TO WHOLE SECONDS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         UNPK  DTL_CPU_TIME+9(2),COMM_DWORD   CONVERT THE RESULT\n         OI    DTL_CPU_TIME+10,X'F0'          MAKE IT PRINTABLE\n         SR    R0,R0                          CLEAR REGISTER\n         D     R0,F60                         CONVERT TO MINUTES\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         UNPK  DTL_CPU_TIME+6(2),COMM_DWORD   CONVERT THE RESULT\n         OI    DTL_CPU_TIME+7,X'F0'           MAKE IT PRINTABLE\n         SR    R0,R0                          CLEAR REGISTER\n         D     R0,F60                         MINUTES AND SECONDS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         UNPK  DTL_CPU_TIME+3(2),COMM_DWORD   CONVERT THE RESULT\n         OI    DTL_CPU_TIME+4,X'F0'           MAKE IT PRINTABLE\n         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL\n         UNPK  DTL_CPU_TIME+0(2),COMM_DWORD   CONVERT THE RESULT\n         OI    DTL_CPU_TIME+1,X'F0'           MAKE IT PRINTABLE\n         LA    R5,DTL_L(,R5)                  NEXT LINE\n         LA    R7,ACT_REGION_L(,R7)           NEXT ADDRESS SPACE\n         BCT   R6,ACT0050                     LOOP\nACT0100  DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISPLAY\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LINE LENGTH\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        DISPLAY\n         MVC   COMM_MSG,COMM_BLANKS           CLEAR ANY MESSAGE\n         ITRACE ID=DISPRC,                    RETURNED FROM DISPLAY    +\n               RDATA1=R15                     .. RETURN CODE\n         CH    R15,H8                         RC = 8?\n         BE    EXIT0000                       YES\n         CLC   ZCMD,COMM_BLANKS               ANY COMMAND?\n         BE    ACT0030                        NO\nACT0110  DS    0H\n         ITRACE ID=ACT0110\n         MVC   PARSE_IN,ZCMD                  COPY COMMAND\n         NI    DXD_FLAG,255-$NEW_PARM         RESET FLAG\nACT0120  DS    0H\n         ITRACE ID=ACT0120\n         BAL   R9,ACT0280                     PARSE COMMAND\n         CLC   PARSE_OUT,COMM_BLANKS          ANYTHING LEFT?\n         BE    ACT0250                        NO\n         CLC   PFXCMD,PARSE_OUT               PREFIX COMMAND?\n         BE    ACT0170                        YES\n         CLC   USERCMD,PARSE_OUT              USER COMMAND?\n         BE    ACT0190                        YES\n         CLC   ALLCMD,PARSE_OUT               'ALL' COMMAND?\n         BE    ACT0210                        YES\n         CLC   BCHCMD,PARSE_OUT               BATCH JOBS COMMAND?\n         BE    ACT0220                        YES\n         CLC   STCCMD,PARSE_OUT               STC COMMAND?\n         BE    ACT0230                        YES\n         CLC   TSUCMD,PARSE_OUT               TSU COMMAND?\n         BE    ACT0240                        YES\n         L     R1,AMENU                       MENU DATA ADDRESS\n         LH    R2,0(,R1)                      NUMBER OF ENTRIES\n         LA    R1,4(,R1)                      SKIP COUNTERS\n         USING MENU_DSECT,R1                  DEFINE BASE\nACT0130  DS    0H\n         CLC   MENU_CMD,PARSE_OUT             COMMAND FOUND?\n         BNE   ACT0140                        NO\n         CLM   R11,15,MENU_ADDR               REFERENCE US?\n         BE    ACT0120                        YES.. IGNORE IT\n         B     EXIT0010                       OTHERWISE EXIT\nACT0140  DS    0H\n         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE ENTRY?\n         BO    ACT0150                        NO\n         LA    R1,MENU_DSECT_L(,R1)           NEXT ENTRY\n         B     ACT0160\nACT0150  DS    0H\n         LA    R1,MENU_DESC-MENU_DSECT(,R1)   NEXT ENTRY\nACT0160  DS    0H\n         BCT   R2,ACT0130                     CHECK NEXT ENTRY\n         MVC   COMM_MSG(MSG04L),MSG04         SET MESSAGE\n         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?\n         BZ    EXIT0010                       NO.. EXIT\n         B     ACT0100                        DISPLAY WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process PREFIX commands                                      *\n* ------------------------------------------------------------------- *\nACT0170  DS    0H\n         ITRACE ID=PREFIX\n         BAL   R9,ACT0280                     PARSE NEXT PARM\n         CLC   PARSE_LENGTH,H8                TOO LONG?\n         BH    ACT0180                        YES\n         MVC   DXD_NAME_PREFIX_LENGTH,PARSE_LENGTH                      H\n         MVC   DXD_NAME_PREFIX,PARSE_OUT      SET NAME PREFIX\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\nACT0180  DS    0H\n         MVC   COMM_MSG(MSG02L),MSG02         PREFIX TOO LONG\n         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?\n         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU\n         B     ACT0100                        RE-SEND WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process USER command                                         *\n* ------------------------------------------------------------------- *\nACT0190  DS    0H\n         ITRACE ID=USER\n         BAL   R9,ACT0280                     PARSE NEXT PARM\n         CLC   PARSE_LENGTH,H8                TOO LONG?\n         BH    ACT0200                        YES\n         MVC   DXD_USER_PREFIX_LENGTH,PARSE_LENGTH                      H\n         MVC   DXD_USER_PREFIX,PARSE_OUT      SET USER PREFIX\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\nACT0200  DS    0H\n         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?\n         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU\n         MVC   COMM_MSG(MSG03L),MSG03         PREFIX TOO LONG\n         B     ACT0100                        RE-SEND WITH MESSAGE\n* ------------------------------------------------------------------- *\n*        Process ALL command                                          *\n* ------------------------------------------------------------------- *\nACT0210  DS    0H\n         ITRACE ID=ALL\n         MVI   DXD_REGION_TYPES,$ACT_ALL      SET 'ALL' REGION TYPES\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process BATCH command                                        *\n* ------------------------------------------------------------------- *\nACT0220  DS    0H\n         ITRACE ID=BATCH\n         MVI   DXD_REGION_TYPES,$ACT_BATCH    SET BATCH REGION TYPES\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process STC command                                          *\n* ------------------------------------------------------------------- *\nACT0230  DS    0H\n         ITRACE ID=STC\n         MVI   DXD_REGION_TYPES,$ACT_STC      SET 'STC' REGION TYPES\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Process TSU command                                          *\n* ------------------------------------------------------------------- *\nACT0240  DS    0H\n         ITRACE ID=TSU\n         MVI   DXD_REGION_TYPES,$ACT_TSO      SET 'TSO' REGION TYPES\n         OI    DXD_FLAG,$NEW_PARM             SET FLAG\n         B     ACT0120\n* ------------------------------------------------------------------- *\n*        Clear command/free text storage                              *\n* ------------------------------------------------------------------- *\nACT0250  DS    0H\n         ITRACE ID=CLEARCMD\n         MVC   ZCMD,COMM_BLANKS               CLEAR COMMAND\nACT0260  DS    0H\n         ICM   R1,15,COMM_TEXT                TEXT ADDRESS\n         BZ    ACT0270                        NO TEXT\n         ITRACE ID=FREETEXT\n         L     R0,COMM_TEXT_LENGTH            TEXT SIZE\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT            CLEAR ADDRESS\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\nACT0270  DS    0H\n         TM    DXD_FLAG,$NEW_PARM             NEW PARMS?\n         BO    ACT0020                        YES.. RESET OFFSET\n         B     ACT0030                        DISPLAY WITH SAME OFFSET\n* ------------------------------------------------------------------- *\n*        PARSE PARMS                                                  *\n* ------------------------------------------------------------------- *\nACT0280  DS    0H\n         LA    R1,PARSE_REQ                   REQUEST BLOCK'S ADDRESS\n         L     R15,APRSE                      PARSE ENTRY POINT\n         BALR  R14,R15                        CALL PARSER\n         ITRACE ID=PARSEOUT,                                           +\n               DATA1=PARSE_LENGTH,            .. OUTPUT LENGTH         +\n               DATA2=PARSE_OUT                .. OUTPUT DATA\n         BR    R9                             RETURN\n* ------------------------------------------------------------------- *\n*        No data met the criteria                                     *\n* ------------------------------------------------------------------- *\nACT0290  DS    0H\n         ITRACE ID=NORGNS\n         MVC   COMM_TEXT_LINES,F1             SET LINES TO 1\n         LA    R0,DTL_L                       TEXT SIZE\n         ST    R0,COMM_TEXT_LENGTH            SET SIZE\n         GETMAIN RU,                          ACQUIRE TEXT DATA AREA   +\n               LV=(0),                        .. SIZE OF AREA          +\n               LOC=ANY                        .. FROM ANY AREA\n         ST    R1,COMM_TEXT                   SET STORAGE ADDRESS\n         LR    R5,R1                          SET 'DTL' BASE\n         MVC   0(DTL_L,R1),COMM_BLANKS        CLEAR DETAIL\n         MVI   DTL_ATTR,$ATTR_HIGH            HIGHLIGHTED MESSAGE\n         MVC   DTL_NAME(MSG01L),MSG01         SET MESSAGE\n         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?\n         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU\n         B     ACT0100\n* ------------------------------------------------------------------- *\n*        Error routines                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         USING ACT_REGION,R7                  DEFINE BASE\n         ITRACE ID=INVRTYP,                   REGION TYPE NOT IN TABLE +\n               DATA1=ACT_REGION_TYPE          .. REGION TYPE\n         ABEND $U1013,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=INVSWAP,                   SWAP CODE NOT IN TABLE   +\n               DATA1=ACT_SWAP_STATUS          .. SWAP CODE\n         ABEND $U1014,DUMP,,USER\nEXIT0000 DS    0H\n         MVC   ZCMD,COMM_BLANKS               CLEAR COMMAND\nEXIT0010 DS    0H\n         ICM   R1,15,COMM_TEXT                TEXT ADDRESS\n         BZ    EXIT0020\n         L     R0,COMM_TEXT_LENGTH            TEXT SIZE\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT            CLEAR ADDRESS\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\nEXIT0020 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDACT)             DISPLACEMENT TO WORK AREA\nF10000   DC    F'10000'\nF100     DC    F'100'\nF60      DC    F'60'\nLINELEN  DC    A(DTL_L)\nF1       DC    F'1'\nH8       DC    H'8'\nEDWD1    DC    X'40202120'\nEDWD2    DC    X'4020202020202120'\nEDWD3    DC    X'402020202120'\nPANEL_NAME DC  CL8'SUTLACT'\nPFXCMD   DC    C'PREFIX '\nUSERCMD  DC    C'USER '\nALLCMD   DC    C'ALL '\nBCHCMD   DC    C'JOB '\nSTCCMD   DC    C'STC '\nTSUCMD   DC    C'TSU '\nMSG01    DS    0C\n         DC    C'No regions meet criteria'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOACT02E'\n         DC    C'Prefix too long, 8 characters max'\nMSG02L   EQU   *-MSG02\nMSG03    DS    0C\n         DC    CL11'TSOACT03E'\n         DC    C'User name too long, 8 characters max'\nMSG03L   EQU   *-MSG03\nMSG04    DS    0C\n         DC    CL11'TSOACT04E'\n         DC    C'Invalid ACT subcommand'\nMSG04L   EQU   *-MSG04\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREGION_TYPES DS    0C\n             DC    AL1($ACT_BATCH),CL3'JOB'\n             DC    AL1($ACT_STC),CL3'STC'\n             DC    AL1($ACT_TSO),CL3'TSO'\n             DC    AL1($ACT_MOUNT),CL3'MNT'\n             DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSWAP_CODES   DS    0C\n             DC    AL1($ACT_SWAP_TRANSITION),CL3'<->',AL1($ATTR_NORMAL)\n             DC    AL1($ACT_SWAP_IN),CL3'IN ',AL1($ATTR_HIGH)\n             DC    AL1($ACT_SWAP_OUT),CL3'OUT',AL1($ATTR_NORMAL)\n             DC    AL1($ACT_SWAP_LOGICAL),CL3'LSW',AL1($ATTR_NORMAL)\n             DC    AL1($ACT_SWAP_NONSWAP),CL3'N/S',AL1($ATTR_HIGH)\n             DC    X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VDEF  BASE=DXDACT\nACTVARS  DS    0C\n         VDEF  NAME=CPU,             VARIABLE NAME                     +\n               DATA=DXD_CPU_BUSY,    VARIABLE'S DATA ADDRESS           +\n               LENGTH=4,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         VDEF  NAME=JPFX,            VARIABLE NAME                     +\n               DATA=DXD_NAME_PREFIX, VARIABLE'S DATA ADDRESS           +\n               LENGTH=8,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         VDEF  NAME=UPFX,            VARIABLE NAME                     +\n               DATA=DXD_USER_PREFIX, VARIABLE'S DATA ADDRESS           +\n               LENGTH=8,             DATA LENGTH                       +\n               FORM=CHAR             DATA FORMAT\n         DC    X'FF'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDACT                 DSECT\n                       SUTLSAVE DSECT=NO\n                       VARREQ   DSECT=NO\n                       PARSEREQ DSECT=NO\nDXD_NAME_PREFIX_LENGTH DS  H               LENGTH OF ACTIVE PREFIX\nDXD_USER_PREFIX_LENGTH DS  H               LENGTH OF ACTIVE USER\nDXD_REGION_TYPES       DS  C               REQION TYPE (A, B, S, OR T)\nDXD_CPU_BUSY           DS  CL4             CPU UTILIZATION PERCENTAGE\nDXD_NAME_PREFIX        DS  CL8             JOB NAME PREFIX\nDXD_USER_PREFIX        DS  CL8             USER NAME PREFIX\nDXD_FLAG               DS  X\n$NEW_PARM              EQU X'80'           ..  NEW OPTIONS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO  DSECT=NO\n         COPY   ACTDATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL               DSECT\nDTL_ATTR          DS    X               ATTRIBUTE\nDTL_NAME          DS    CL8             JOB NAME\n                  DS    C\nDTL_STEP          DS    CL8             JOB STEP\n                  DS    C\nDTL_PROC_STEP     DS    CL8             PROC STEP\n                  DS    C\nDTL_USER          DS    CL8             USER\n                  DS    C\nDTL_REGION_TYPE   DS    CL3             REGION TYPE\n                  DS    C\nDTL_SWAP_STATUS   DS    CL3             SWAP STATUS\nDTL_REAL          DS    CL6             STORAGE OCCUPIED\nDTL_REAL_UNITS    DS    C               STORAGE UNIT (K)\n                  DS    C\nDTL_SERVICE_UNITS DS    CL8             SERVICE UNITS\nDTL_IO            DS    CL8             NUMBER OF I/O'S\n                  DS    C\nDTL_CPU_TIME      DS    CL11            CPU TIME\nDTL_L             EQU   *-DTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY   MENUDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY   REGEQU\n         ABCODES\n         COPY   ATTR\n         END    TSOACT\n./ ADD NAME=TSOAPF   0104-09140-09169-1425-00181-00181-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOAPF                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the APF authorized libraries.                *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOAPF   CSECT\nTSOAPF   AMODE 31\nTSOAPF   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOAPF,R11                     DEFINE BASE\n         B     APF0000\nMODID    DC    CL8'TSOAPF'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nAPF0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDAPF,R13                     DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    APF0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nAPF0010  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_APF          SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?\n         BNE   APF0020                        NO\n         MVC   COMM_MSG(MSG01L),MSG01\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR DISPLAY                            *\n* ------------------------------------------------------------------- *\nAPF0020  DS    0H\n         ITRACE ID=BLDTEXT\n         SR    R2,R2                          CLEAR REGISTER\n         ICM   R2,3,APF_NBR_DSNS              ANY NAMES RETURNED?\n         BZ    APF0070                        NO\n         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES\nAPF0030  DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R2                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     LENGTH OF TEXT\n         ST    R1,COMM_TEXT_LENGTH            SAVE length OF TEXT\n         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,                                           +\n               RDATA1=R1\n         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS\n         USING DTL,R1                         DEFINE BASE\n         LA    R5,APF_DATA                    FIRST DATASET NAME\n         USING APF_DATA,R5                    DEFINE BASE\nAPF0040  DS    0H\n         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE\n         MVC   DTL_DSN,APF_DSN                SET DATASET NAME\n         MVC   DTL_VOLSER,APF_VOLSER          SET VOLSER\n         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA\n         LA    R5,APF_DATA_L(,R5)             NEXT DATASET\n         BCT   R2,APF0040                     LOOP\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\nAPF0050  DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISP\n         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISP\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   APF0060                        NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    APF0050                        YES.. REDISPLAY\nAPF0060  DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE\n         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN APF LIST                                *\n* ------------------------------------------------------------------- *\nAPF0070  DS    0H\n         ITRACE ID=NOAPF                      NO DATASETS IN APF LIST\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START  DC    Q(DXDAPF)                    DISPLACEMENT TO WORK AREA\nLINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE\nX0004      DC    X'0004'\nPANEL_NAME DC    CL8'SUTLAPF'                 PANEL NAME\n\nMSG01      DS    0C\n           DC    CL11'TSOAPF01I'\n           DC    C'Data set list truncated'\nMSG01L     EQU   *-MSG01\n\nMSG02      DS    0C\n           DC    CL11'TSOAPF02I'\n           DC    C'There are no data sets in the APF list!'\nMSG02L     EQU   *-MSG02\n\n           LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDAPF      DSECT\n            SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL         DSECT\nDTL_ATTR    DS    X               ATTRIBUTE CHARACTER\nDTL_DSN     DS    CL44            DATASET NAME\n            DS    CL2\nDTL_VOLSER  DS    CL6             VOLSER\nDTL_L       EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n         COPY    APFDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOAPF\n./ ADD NAME=TSOCOMM  0100-09250-09250-1028-00014-00014-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TSOCOMM                                                      *\n*                                                                     *\n*  TSO interface common data and trace table manager                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\n         TSOCOMM TYPE=CSECT\nTSOCOMM  CSECT\n         SUTLSAVE DSECT=YES\n         IHAPSA\n         COPY  REGEQU\n         END   TSOCOMM\n./ ADD NAME=TSODISP  0107-03252-09173-0906-00389-00378-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSODISP - Dynamic area manager                        *\n*                                                                     *\n*  Function:                                                          *\n*   Manage the dynamic area displays.                                 *\n*                                                                     *\n*  This module expects the caller to provide:                         *\n*                                                                     *\n*    1) The panel name                                                *\n*    2) The number of lines of text to of data                        *\n*    3) The address of the text storage                               *\n*    4) Length of each line of \"detail\" data                          *\n*    5) The relative line number of the first line to be displayed    *\n*    6) The offset to the data for the first line to be displayed     *\n*                                                                     *\n*  The caller may specify that the data be scrollable or non-         *\n*  scrollable.  The caller may specify a cursor position.             *\n*                                                                     *\n*  All fields that control the panel, the text data, and display      *\n*  options are in the common area (TSOCOMM).                          *\n*                                                                     *\n*  If the user allows scrolling, the scroll commands are processed    *\n*  here.                                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSODISP  CSECT\nTSODISP  AMODE 31\nTSODISP  RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSODISP,R11                    DEFINE PROGRAM BASE\n         B     DISP0000\nMODID    DC    CL8'TSODISP'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nDISP0000 DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDDISP,R13                    DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    DISP0010                       YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n*---------------------------------------------------------------------*\n*        Acquire storage for dynamic area                             *\n*---------------------------------------------------------------------*\nDISP0010 DS    0H\n         L     R15,APQRY                      PQUERY ENTRY POINT\n         BALR  R14,R15                        LINK TO PQRY\n         L     R0,VWIDTH                      SCREEN WIDTH\n         MH    R0,VDEPTH+2                    COMPUTE  SIZE\n         ST    R0,COMM_VDATA_LENGTH           SAVE SIZE\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=(0),                        .. SIZE OF AREA          +\n               LOC=ANY                        .. FROM ANY AREA\n         ITRACE ID=VDA,                                                +\n               RDATA1=R1\n         ST    R1,COMM_VDATA                  SAVE DYNAMIC AREA ADDRESS\n*---------------------------------------------------------------------*\n*        Define 'VDATA' to SPF                                        *\n*---------------------------------------------------------------------*\n         ITRACE ID=DEFVDATA,                  DEFINING 'VDATA'         +\n               DATA1=COMM_VDATA,              .. STORAGE ADDRESS       +\n               DATA2=COMM_VDATA_LENGTH        .. STORAGE SIZE\n         LA    R1,VDEFINE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,VDATA                       VARIABLE NAME ADDRESS\n         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST\n         MVC   DXD_SPF3,COMM_VDATA            SET ADDRESS IN PARM LIST\n         LA    R1,CHARFORM                    DATA FORMAT ADDRESS\n         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST\n         LA    R1,COMM_VDATA_LENGTH           ADDRESS OF LENGTH\n         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF5,X'80'                 FLAG END-OF-LIST\n         LA    R1,DXD_SPF                     SPF PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF ENTRY POINT\n         BALR  R14,R15                        DEFINE 'VDATA'\n         LTR   R15,R15                        DEFINE SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         TM    COMM_DISPLAY_FLAGS,$NO_SCROLL  SCROLLING?\n         BO    DISP0140                       NO.. COPY TEXT INTACT\n         MVC   LVLINE,VDEPTH                  ASSUME ALL ARE VISIBLE\n*---------------------------------------------------------------------*\n*        Build dynamic area                                           *\n*---------------------------------------------------------------------*\nDISP0100 DS    0H\n         ITRACE ID=BLDVDATA                   BUILDING 'VDATA'\n         L     R0,COMM_VDATA                  DYNAMIC AREA ADDRESS\n         L     R1,COMM_VDATA_LENGTH           DYNAMIC AREA SIZE\n         SR    R14,R14                        CLEAR REGISTER\n         SR    R15,R15                        CLEAR REGISTER\n         ICM   R15,8,COMM_BLANKS              SET PAD CHARACTER\n         MVCL  R0,R14                         CLEAR DYNAMIC AREA\n         L     R3,COMM_TEXT                   TEXT'S ADDRESS\n         A     R3,COMM_TEXT_OFFSET            PLUS OFFSET\n         L     R4,COMM_TEXT_LINES             NUMBER OF TEXT LINES\n         S     R4,COMM_TEXT_LINE_NBR          MINUS RELATIVE LINE\n         C     R4,LVLINE                      MORE THAN DISPLAYABLE?\n         BNH   DISP0110                       NO\n         L     R4,LVLINE                      LIMIT TO DISPLAY SIZE\nDISP0110 DS    0H\n         L     R5,COMM_VDATA                  DYNAMIC AREA ADDRESS\n         L     R6,VWIDTH                      SCREEN WIDTH\n         L     R7,COMM_TEXT_LINE_LENGTH       LENGTH OF EACH LINE\nDISP0120 DS    0H\n         LR    R1,R7                          COPY TEXT'S WIDTH\n         CR    R1,R6                          TEXT WIDER THAN SCREEN?\n         BNH   DISP0130                       NO\n         LR    R1,R6                          LIMIT TO SCREEN WIDTH\nDISP0130 DS    0H\n         LR    R2,R6                          COPY WIDTH\n         SR    R2,R1                          MINUS USED WIDTH\n         SRL   R2,1                           DIVIDE BY 2\n         AR    R2,R5                          PLUS CURRENT ADDRESS\n         BCTR  R1,0                           FOR MVC\n         EX    R1,DYNMVC                      MOVE DATA TO DYNAMIC AREA\n         AR    R3,R7                          NEXT TEXT DATA LINE\n         A     R5,VWIDTH                      NEXT DYNAMIC AREA LINE\n         BCT   R4,DISP0120                    LOOP\n         B     DISP0150                       DISPLAY THE PANEL\n*---------------------------------------------------------------------*\n*        Copy text intact                                             *\n*---------------------------------------------------------------------*\nDISP0140 DS    0H\n         L     R0,COMM_TEXT                   TEXT ADDRESS\n         L     R1,COMM_TEXT_LENGTH            TEXT SIZE\n         L     R2,COMM_VDATA                  VDATA ADDRESS\n         L     R3,COMM_VDATA_LENGTH           VDATA LENGTH\n         ICM   R3,8,COMM_BLANKS               PAD CHARACTER\n         MVCL  R2,R0                          COPY TEXT\n*---------------------------------------------------------------------*\n*        Display panel                                                *\n*---------------------------------------------------------------------*\nDISP0150 DS    0H\n         ITRACE ID=DISPLAY\n         MVC   ZVERB,COMM_BLANKS\n         LA    R1,DISPLAY                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,COMM_PANEL                  PANEL'S NAME\n         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST\n         TM    COMM_DISPLAY_FLAGS,$NO_CURSOR  CURSOR DATA?\n         BO    DISP0160                       NO\n         OC    COMM_CURSOR,COMM_CURSOR        CURSOR POSITION ZERO?\n         BZ    DISP0160                       YES\n         NI    DXD_SPF2,X'7F'                 RESET END-OF-LIST\n         LA    R1,COMM_BLANKS                 MESSAGE ID (BLANKS)\n         ST    R1,DXD_SPF3                    CLEAR MESSAGE ID\n         LA    R1,VDATA                       CURSOR FIELD NAME\n         ST    R1,DXD_SPF4                    VARIABLE NAME FOR CURSOR\n         L     R1,COMM_CURSOR                 CURSOR POSITION\n         LA    R1,1(,R1)                      PLUS 1 (NOT RELATIVE)\n         ST    R1,COMM_CURSOR                 SAVE UPDATED POSITION\n         LA    R1,COMM_CURSOR                 CURSOR POSITION\n         ST    R1,DXD_SPF5                    SET CURSOR POSITION\n         OI    DXD_SPF5,X'80'                 FLAG END-OF-LIST\nDISP0160 DS    0H\n         LA    R1,DXD_SPF                     PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF INTERFACE\n         BALR  R14,R15                        DISPLAY PANEL\n         STH   R15,DXD_RC                     SAVE RETURN CODE\n         ITRACE ID=DISPRC,                    TRACE RETURN FROM SPF    +\n               RDATA1=R15,                    .. INCLUDE RETURN CODE   +\n               DATA2=ZCMD                     .. AND NEW COMMAND\n         MVC   COMM_MSG,COMM_BLANKS           CLEAR MESSAGE\n         TM    COMM_DISPLAY_FLAGS,$NO_SCROLL  SCROLLING?\n         BO    DISP0400                       NO..\n         CH    R15,H8                         EXIT?\n         BE    DISP1000                       YES\n         CLI   ZCMD,C'X'                      EXIT?\n         BE    DISP1000                       YES\n         NI    DXD_FLAG,255-$DXD_VPUT         RESET VPUT FLAG\n*---------------------------------------------------------------------*\n*        Request scroll parameters                                    *\n*---------------------------------------------------------------------*\nDISP0170 DS    0H\n         ITRACE ID=VGET                       REQUEST SCROLL VARIABLES\n         LA    R1,VGET                        COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS                    VARIABLES list\n         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST\n         LA    R1,SHARED                      FROM SHARED POOL\n         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF3,X'80'                 SET END-OF-LIST\n         LA    R1,DXD_SPF                     PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF INTERFACE\n         BALR  R14,R15                        LINK TO SPF\n         ITRACE ID=VGETRC,                    VGET COMPLETE            +\n               RDATA1=R15                     .. INCLUDE RETURN CODE\n         LTR   R15,R15                        VGET SUCCESSFUL?\n         BZ    DISP0180                       YES\n         TM    DXD_FLAG,$DXD_VPUT             VPUT ALREADY ISSUED?\n         BO    DISP0180                       YES\n*---------------------------------------------------------------------*\n*        Issue VPUT, try VGET again                                   *\n*---------------------------------------------------------------------*\n         ITRACE ID=VPUT\n         LA    R1,VPUT                        COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         LA    R1,VGETVARS                    VARIABLES LIST\n         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST\n         LA    R1,SHARED                      FROM SHARED POOL\n         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF3,X'80'                 SET END-OF-LIST\n         LA    R1,DXD_SPF                     PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF INTERFACE\n         BALR  R14,R15                        ISSUE  VPUT\n         ITRACE ID=VPUTRC,                    VPUT COMPLETE            +\n               RDATA1=R15                     .. INCLUDE RETURN CODE\n         B     DISP0170                       YES\n*---------------------------------------------------------------------*\n*        Process command or scroll                                    *\n*---------------------------------------------------------------------*\nDISP0180 DS    0H\n         ITRACE ID=CHKVERB,                   CHECKING VERB FOR SCROLL +\n               DATA1=ZVERB                    .. TRACE VERB VALUE\n         L     R2,ZSCROLLN                    NUMBER OF LINES TO SCROLL\n         CLI   ZVERB,C'U'                     SCROLL UP?\n         BE    DISP0200                       YES\n         CLI   ZVERB,C'D'                     SCROLL DOWN?\n         BE    DISP0300                       YES\n         CLI   ZVERB,C'R'                     SCROLL RIGHT?\n         BE    DISP0190                       YES\n         CLI   ZVERB,C'L'                     SCROLL LEFT?\n         BE    DISP0190                       YES\n         B     DISP1000                       NOT A SCROLL COMMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0190 DS    0H\n         ITRACE ID=R_OR_L\n         TM    COMM_DISPLAY_FLAGS,$MULTIPLE_SCREENS\n         BO    DISP1000\n         B     DISP0100\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0200 DS    0H\n         ITRACE ID=SCROLLUP\n         SR    R0,R0                          CLEAR REGISTER\n         L     R1,ZSCROLLN                    NUMBER OF LINES TO SCROLL\n         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LINE LENGTH\n         L     R2,COMM_TEXT_OFFSET            CLEAR REGISTER\n         CR    R1,R2                          SCROLL PAST FIRST LINE?\n         BNH   DISP0210                       NO\n         LR    R2,R1                          LIMIT TO 1ST LINE\nDISP0210 DS    0H\n         SR    R2,R1                          NEW OFFSET\n         L     R1,COMM_TEXT_LINE_NBR          RELATIVE LINE NUMBER\n         S     R1,ZSCROLLN                    MINUS NUMBER SCROLLED\n         BP    DISP0220\n         SR    R1,R1                          RESET TO ZERO IF NEGATIVE\nDISP0220 DS    0H\n         ST    R1,COMM_TEXT_LINE_NBR          SAVE RELATIVE LINE NUMBER\n         ST    R2,COMM_TEXT_OFFSET            SAVE OFFSET INTO TEXT\n         B     DISP0100                       RE-BUILD DYNAMIC AREA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDISP0300 DS    0H\n         ITRACE ID=SCROLLDN\n         L     R1,ZSCROLLN                    NUMBER OF LINES TO SCROLL\n         A     R1,COMM_TEXT_LINE_NBR          PLUS RELATIVE NUMBER NOW\n         C     R1,COMM_TEXT_LINES             BEYOND END OF DATA?\n         BE    DISP0310                       YES\n         BNH   DISP0320                       NO\nDISP0310 DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         L     R1,COMM_TEXT_LINES             MAXIMUM LINE NUMBER\n         BCTR  R1,0                           ADJUST FOR RELATIVE\n         ST    R1,COMM_TEXT_LINE_NBR          SAVE RELATIVE NUMBER\n         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LENGTH OF EACH LINE\n         ST    R1,COMM_TEXT_OFFSET            SAVE OFFSET\n         B     DISP0100                       RE-BUILD DYNAMIC AREA\nDISP0320 DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         ST    R1,COMM_TEXT_LINE_NBR          SAVE NEW RELATIVE LINE\n         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LINE LENGTH\n         ST    R1,COMM_TEXT_OFFSET            SAVE OFFSET\n         B     DISP0100                       RE-BUILD DYNAMIC AREA\n*---------------------------------------------------------------------*\n*        Copy updated text area back to caller                        *\n*---------------------------------------------------------------------*\nDISP0400 DS    0H\n         L     R0,COMM_TEXT                   TEXT ADDRESS\n         L     R1,COMM_TEXT_LENGTH            TEXT SIZE\n         L     R2,COMM_VDATA                  VDATA ADDRESS\n         L     R3,COMM_VDATA_LENGTH           VDATA LENGTH\n         MVCL  R0,R2                          COPY RETURNED AREA\n*---------------------------------------------------------------------*\n*        Clean-up                                                     *\n*---------------------------------------------------------------------*\nDISP1000 DS    0H\n         ITRACE ID=CLEANUP\n         LA    R1,VDELETE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET IN PARM LIST\n         LA    R1,VDATA                       VARIABLE'S NAME\n         ST    R1,DXD_SPF2                    SET IN PARM LIST\n         OI    DXD_SPF2,X'80'                 SET END-OF-LIST\n         LA    R1,DXD_SPF                     PARM LIST'S ADDRESS\n         L     R15,AISPLINK                   SPF INTERFACE\n         BALR  R14,R15                        DELETE 'VDATA'\n         LTR   R15,R15                        VDELETE OK?\n         BZ    DISP1010                       YES\n         ABEND $U1019,DUMP,,USER\nDISP1010 DS    0H\n         ITRACE ID=FREEVDA\n         ICM   R1,15,COMM_VDATA               DYNAMIC AREA ADDRESS\n         BZ    EXIT0000                       NO ADDRESS.. EXIT\n         L     R0,COMM_VDATA_LENGTH           DYNAMIC AREA SIZE\n         FREEMAIN RU,                         FREEMAIN DYNAMIC AREA    +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_VDATA,COMM_VDATA          CLEAR ADDRESS\n         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH CLEAR SIZE\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=VDEFFAIL,                  VDEFINE FAILED           +\n               RDATA1=R15                     .. VDEFINE RETURN CODE\n         ABEND $U1020,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                     SET RETURN CODE\n         L     R13,4(,R13)                    RESTORE R13\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\nDYNMVC   MVC   0(0,R2),0(R3)                  MOVE TEXT TO DYNAMIC AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START DC   Q(DXDDISP)                     DISPLACEMENT TO WORK AREA\nVGETVARS DC    F'3'                           NUMBER OF VARIABLE NAMES\n         DC    F'0'                           UNPROTECTED STORAGE\n         DC    CL8'ZVERB'                     VARIABLE NAME\n         DC    CL8'ZSCROLLA'                  VARIABLE NAME\n         DC    CL8'ZSCROLLN'                  VARIABLE NAME\nH8       DC    H'8'                           CONSTANT\nVDATA    DC    CL8'VDATA'                     VARIABLE NAME\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nDISPLAY  DC    CL8'DISPLAY'\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nSHARED   DC    CL8'SHARED'\nCHARFORM DC    CL4'CHAR'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDDISP   DSECT\n          SUTLSAVE DSECT=NO\nDXD_SPF   DS    0A                            ISPF PARM LIST\nDXD_SPF1  DS    A                             PARM 1 ADDRESS\nDXD_SPF2  DS    A                             PARM 2 ADDRESS\nDXD_SPF3  DS    A                             PARM 3 ADDRESS\nDXD_SPF4  DS    A                             PARM 4 ADDRESS\nDXD_SPF5  DS    A                             PARM 5 ADDRESS\nDXD_RC    DS    H                             RETURN CODE FROM DISPLAY\nDXD_FLAG  DS    X                             INTERNAL FLAGS\n$DXD_VPUT EQU   X'80'                         .. VPUT HAS BEEN ISSUED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         ABCODES\n         END     TSODISP\n./ ADD NAME=TSOFS    0133-09146-09189-1401-00338-00184-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOFS                                                 *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the mounted filesystems                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOFS    CSECT\nTSOFS    AMODE 31\nTSOFS    RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOFS,R11                      DEFINE BASE\n         B     FS0000\nMODID    DC    CL8'TSOFS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nFS0000   DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDFS,R13                      DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    FS0010                         YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         MVI   DXD_SCREEN,1                   INITIALIZE SCREEN NUMBER\nFS0010   DS    0H\n         LA    R1,ATTR_TABLE                  1ST ATTRIBUTE\n         ST    R1,DXD_CURR_ATTR               SAVE ADDRESS\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_FS           SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?\n         BNE   FS0020                         NO\n         MVC   COMM_MSG(MSG01L),MSG01\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR DISPLAY                            *\n* ------------------------------------------------------------------- *\nFS0020   DS    0H\n         ITRACE ID=BLDTEXT\n         SR    R2,R2                          CLEAR REGISTER\n         ICM   R2,3,FS_NBR                    ANY NAMES RETURNED?\n         BZ    FS0210                         NO\n         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES\nFS0030   DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R2                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     LENGTH OF TEXT\n         ST    R1,COMM_TEXT_LENGTH            SAVE LENGTH OF TEXT\n         ITRACE ID=GET_TEXT,                                           +\n               RDATA1=R1\n         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,                                           +\n               RDATA1=R1\n         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS\n         USING DTL,R1                         DEFINE BASE\n         LA    R5,FS_DATA                     FIRST FILESYSTEM\n         B     FS0050\nFS0040   DS    0H\n         L     R1,COMM_TEXT\n         SR    R2,R2                          CLEAR REGISTER\n         ICM   R2,3,FS_NBR                    ANY NAMES RETURNED?\n         LA    R5,FS_DATA\n         LA    R15,ATTR_TABLE                 1ST ATTRIBUTE\n         ST    R15,DXD_CURR_ATTR              SAVE ADDRESS\nFS0050   DS    0H\n         CLI   DXD_SCREEN,1\n         BE    FS0060\n         CLI   DXD_SCREEN,2\n         BE    FS0070\n         CLI   DXD_SCREEN,3\n         BE    FS0080\n         DC    H'0'\nFS0060   DS    0H\n         MVC   COMM_PANEL,PANEL_1\n         B     FS0090\nFS0070   DS    0H\n         MVC   COMM_PANEL,PANEL_2\n         B     FS0090\nFS0080   DS    0H\n         MVC   COMM_PANEL,PANEL_3\nFS0090   DS    0H\n         USING FS_DATA,R5                     DEFINE BASE\n         ITRACE ID=DETAIL,                                             +\n               DATA1=FS_MOUNT_POINT+0,                                 +\n               DATA2=FS_MOUNT_POINT+8\n         MVC   DTL(DTL_L),COMM_BLANKS\n         L     R15,DXD_CURR_ATTR\n         MVC   DTL_ATTR,0(R15)                COPY ATTRIBUTE\n         LA    R15,1(,R15)                    NEXT ATTRIBUTE\n         CLI   0(R15),X'FF'                   END OF TABLE?\n         BNE   FS0100                         NO\n         LA    R15,ATTR_TABLE                 WRAP\nFS0100   DS    0H\n         ST    R15,DXD_CURR_ATTR              UPDATE ADDRESS\n         MVC   DTL_MOUNT_POINT,FS_MOUNT_POINT\n         CLC   FS_MOUNT_POINT+18(238),COMM_BLANKS\n         BE    FS0110\n         MVI   DTL_MOUNT_POINT+18,C'+'        INIDCATE TRUNCATED\nFS0110   DS    0H\n         CLI   DXD_SCREEN,1                   SCREEN 1?\n         BE    FS0120                         YES\n         CLI   DXD_SCREEN,2                   SCREEN 2?\n         BE    FS0130                         YES\n         CLI   DXD_SCREEN,3                   SCREEN 3?\n         BE    FS0140                         YES\n         ITRACE ID=BAD_SCRN\n         DC    H'0'                           BAD SCREEN\nFS0120   DS    0H\n         ITRACE ID=BUILD_1\n         MVC   DTL_TYPE,FS_TYPE\n         MVC   DTL_STATUS,FS_STATUS\n         MVC   DTL_DSNAME,FS_DSNAME\n         B     FS0150\nFS0130   DS    0H\n         ITRACE ID=BUILD_2\n         ICM   R0,15,FS_READS                 NBR OF READS\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORK1,EDITWORD1\n         ED    DXD_EDIT_WORK1,COMM_DWORD+3    EDIT NBR OF READS\n         MVC   DTL_READS,DXD_EDIT_WORK1+1\n         MVC   COMM_DWORD,FS_BYTES_READ\n         LG    R0,COMM_DWORD\n         CVDG  R0,DXD_CVDG_AREA               CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORK2,EDITWORD2\n         ED    DXD_EDIT_WORK2,DXD_CVDG_AREA+9 EDIT BYTES READ\n         MVC   DTL_BYTES_READ,DXD_EDIT_WORK2+1\n         ICM   R0,15,FS_WRITES                NBR OF WRITES\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORK1,EDITWORD1\n         ED    DXD_EDIT_WORK1,COMM_DWORD+3    EDIT NBR OF WRITES\n         MVC   DTL_WRITES,DXD_EDIT_WORK1+1\n         MVC   COMM_DWORD,FS_BYTES_WRITTEN\n         LG    R0,COMM_DWORD                  BYTES WRITTEN\n         CVDG  R0,DXD_CVDG_AREA               CONVERT TO DECIMAL\n         MVC   DXD_EDIT_WORK2,EDITWORD2\n         ED    DXD_EDIT_WORK2,DXD_CVDG_AREA+9 EDIT BYTES WRITTEN\n         MVC   DTL_BYTES_WRITTEN,DXD_EDIT_WORK2+1\n         B     FS0150\nFS0140   DS    0H\n         ITRACE ID=BUILD_3\n         MVC   DTL_MOUNT_POINT(78),FS_MOUNT_POINT\n         CLC   FS_MOUNT_POINT+78(178),COMM_BLANKS\n         BE    FS0150\n         MVI   DTL_MOUNT_POINT+78,C'+'\nFS0150   DS    0H\n         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA\n         LA    R5,FS_DATA_L(,R5)              NEXT FILESYSTEM\n         BCT   R2,FS0090                      LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\n         ITRACE ID=CALLDISP                   CALLING DISP\n         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR+$MULTIPLE_SCREENS\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISP\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   FS0160                         NO\n         CLI   ZVERB,C'R'                     SCROLL RIGHT?\n         BE    FS0170                         YES\n         CLI   ZVERB,C'L'                     SCROLL LEFT?\n         BE    FS0190                         YES\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    FS0010                         YES..\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFS0160   DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE\n         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFS0170   DS    0H\n         SR    R1,R1\n         IC    R1,DXD_SCREEN\n         ITRACE ID=RIGHT,                                              +\n               RDATA1=R1\n         CLM   R1,1,SCREEN_MAX                AT MAX NOW?\n         BE    FS0180\n         LA    R1,1(,R1)                      ADD 1\n         STC   R1,DXD_SCREEN                  UPDATE SCREEN NBR\n         B     FS0040\nFS0180   DS    0H\n         MVI   DXD_SCREEN,1                   'WRAP' BACK TO SCREEN 1\n         B     FS0040\nFS0190   DS    0H\n         SR    R1,R1\n         IC    R1,DXD_SCREEN\n         ITRACE ID=LEFT,                                               +\n               RDATA1=R1\n         BCT   R1,FS0200                      MINUS 1\n         MVC   DXD_SCREEN,SCREEN_MAX          'WRAP' BACK TO MAX\n         B     FS0040\nFS0200   DS    0H\n         STC   R1,DXD_SCREEN                  UPDATE SCREEN NBR\n         B     FS0040\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN FS LIST                                 *\n* ------------------------------------------------------------------- *\nFS0210   DS    0H\n         ITRACE ID=NOFS                       NO FILESYSTEMS\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START  DC    Q(DXDFS)                     DISPLACEMENT TO WORK AREA\nLINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE\nX0004      DC    X'0004'\nPANEL_1    DC    CL8'SUTLFS1'                 PANEL NAME\nPANEL_2    DC    CL8'SUTLFS2'                 PANEL NAME\nPANEL_3    DC    CL8'SUTLFS3'                 PANEL NAME\n\nMSG01      DS    0C\n           DC    CL11'TSOFS01I'\n           DC    C'Filesystem list truncated'\nMSG01L     EQU   *-MSG01\n\nMSG02      DS    0C\n           DC    CL11'TSOFS02I'\n           DC    C'There are no mounted filesystems!'\nMSG02L     EQU   *-MSG02\n\nSCREEN_MAX DC    AL1(3)\nEDITWORD1  DC    X'402020206B2020206B202120'\nEDITWORD2  DC    X'40202020206B2020206B2020206B202120'\n\nATTR_TABLE DS    0C\n           DC    AL1($ATTR_HIGH)\n           DC    AL1($ATTR_HIGH_YELLOW)\n           DC    AL1($ATTR_HIGH_RED)\n           DC    AL1($ATTR_HIGH_TURQUOISE)\n           DC    AL1($ATTR_HIGH_GREEN)\n           DC    X'FF'\n\n           LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFS             DSECT\n                  SUTLSAVE DSECT=NO\nDXD_CVDG_AREA     DS    CL16\nDXD_CURR_ATTR     DS    A\n\nDXD_EDIT_WORK1    DS    CL12\nDXD_EDIT_WORK2    DS    CL17\nDXD_SCREEN        DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL               DSECT\nDTL_ATTR          DS    X               ATTRIBUTE CHARACTER\nDTL_MOUNT_POINT   DS    CL18            DATASET NAME\n                  DS    C\nDTL_TYPE          DS    CL6             TYPE\n                  DS    C\nDTL_STATUS        DS    CL8             STATUS\n                  DS    C\nDTL_DSNAME        DS    CL44            DATASET NAME\n                  ORG   DTL_TYPE\nDTL_READS         DS    CL11\n                  DS    X\nDTL_BYTES_READ    DS    CL16\n                  DS    XL3\nDTL_WRITES        DS    CL11\n                  DS    X\nDTL_BYTES_WRITTEN DS    CL16\n                  ORG\nDTL_L             EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n         COPY    FSDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOFS\n./ ADD NAME=TSOIPL   0106-09141-09169-1426-00120-00249-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOIPL - Display IPL info                             *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of IPL info                                     *\n*                                                                     *\n*  Sub-commands                                                       *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOIPL   CSECT\nTSOIPL   AMODE 31\nTSOIPL   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOIPL,R11                     DEFINE BASE\n         B     IPL0000\nMODID    DC    CL8'TSOIPL'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nIPL0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDIPL,R13                     DEFINE WORK AREA BASE\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    IPL0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*        REQUEST DATA FROM STC                                        *\n* ------------------------------------------------------------------- *\nIPL0010  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_IPL          SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LA    R1,IPL                         IPL INFO\n         ST    R1,COMM_TEXT                   SET TEXT ADDR\n         ICM   R1,15,IPL_NBR                  NBR OF ELEMENTS\n         ST    R1,COMM_TEXT_LINES             SET NBR OF LINES\n         MH    R1,LINELEN+2                   SET LENGTH OF TEXT\n         ST    R1,COMM_TEXT_LENGTH            LENGTH OF TEXT\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN      LENGTH OF EACH LINE\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET  CLEAR OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\nIPL0020  DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISP\n         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISPLAY\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   IPL0030                        NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    IPL0020                        YES.. REDISPLAY\nIPL0030  DS    0H\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH CLEAR LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART   DC    Q(DXDIPL)                    DISPLACEMENT TO WORK AREA\nLINELEN    DC    A(IPL_L)                     LENGTH OF DETAIL LINE\nPANEL_NAME DC    CL8'SUTLIPL'                 PANEL NAME\n           LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDIPL   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n         COPY    IPLDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOIPL\n./ ADD NAME=TSOLLA   0104-09141-09169-1426-00168-00167-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOLLA - Display system link link (LLA)               *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the system link list (LLA).                  *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOLLA   CSECT\nTSOLLA   AMODE 31\nTSOLLA   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOLLA,R11                     DEFINE BASE\n         B     LLA0000\nMODID    DC    CL8'TSOLLA'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nLLA0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDLLA,R13                     DEFINE WORK AREA BASE\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    LLA0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nLLA0010  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_LLA          SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR SYSDISP                            *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                          CLEAR REGISTER\n         ICM   R7,3,LLA_NBR_DSNS              ANY NAMES RETURNED?\n         BZ    LLA0060                        NO\n         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES\nLLA0020  DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R7                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     TIMES LENGTH\n         ST    R1,COMM_TEXT_LENGTH            SAVE SIZE OF TEXT STORAGE\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS\n         LR    R8,R1                          COPY TEXT AREA ADDRESS\n         USING DTL,R8                         DEFINE BASE\n         LA    R9,LLA_DSN                     FIRST DATASET NAME\n         USING LLA_DSN,R9                     DEFINE BASE\n         CLC   NET_RC,X0004                   LIST TRUNCATED?\n         BNE   LLA0030                        NO\n         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE\nLLA0030  DS    0H\n         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE\n         MVC   DTL_DSN,LLA_DSN                SET DATASET NAME\n         LA    R8,DTL_L(,R8)                  NEXT DETAIL AREA\n         LA    R9,L'LLA_DSN(,R9)              NEXT DATASET\n         BCT   R7,LLA0030                     LOOP\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\nLLA0040  DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISP\n         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISPLAY\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   LLA0050                        NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    LLA0040                        YES.. REDISPLAY\nLLA0050  DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE\n         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*              NO DATASETS IN LINK LIST (SHOULD NEVER HAPPEN)         *\n* ------------------------------------------------------------------- *\nLLA0060  DS    0H\n         ITRACE ID=NOLLA                      NO DATASETS IN LINK LIST\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDLLA)                      DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTL_L)                       LENGTH OF DETAIL LINE\nX0004    DC    X'0004'\nPANEL_NAME DC  CL8'SUTLLLA'                   PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOLLA01I'\n         DC    C'Data set list truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOLLA02I'\n         DC    C'There are no data sets in the link list!'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDLLA   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL      DSECT\nDTL_ATTR DS    X               ATTRIBUTE CHARACTER\nDTL_DSN  DS    CL44            DATASET NAME\nDTL_L    EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n         COPY    LLADATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOLLA\n./ ADD NAME=TSOLRAD  0100-09250-09250-1028-00039-00039-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOLRAD                                               *\n*                                                                     *\n*  VTAM LERAD exit                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOLRAD  CSECT\nTSOLRAD  AMODE 31\nTSOLRAD  RMODE ANY\n         USING TSOLRAD,R15           DEFINE BASE\n         B     LERAD010              SKIP ADDRESS AND EYECATCHER\n         DC    CL8'TSOLRAD'          MODULE NAME\n         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY\nLERAD010 DS    0H\n         USING IFGRPL,R1             DEFINE BASE\n         L     R2,RPLAAREA           RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R2           DEFINE BASE\n         ABEND $U1007,DUMP,,USER\n* ------------------------------------------------------------------- *\n*             EXIT                                                    *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         BR    R14                   RETURN TO CALLER                   ASE01700\n* ------------------------------------------------------------------ *\n*              CONSTANTS                                             *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------ *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         IFGRPL AM=VTAM\n* ------------------------------------------------------------------ *\n*              EQUATES                                               *\n* ------------------------------------------------------------------ *\n         COPY REGEQU\n         ABCODES\n         END  TSOLRAD\n./ ADD NAME=TSOMAIN  0146-09141-09181-1611-00542-00718-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*  Name: TSOMAIN                                                      *\n*                                                                     *\n*  TSO interface mainline.                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  OPTIONS\nTSOMAIN  CSECT\nTSOMAIN  AMODE 31\nTSOMAIN  RMODE ANY\n         USING TSOMAIN,R11                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     MAIN0000                       BRANCH AROUND EYECATCHER\nMODID    DC    CL8'TSOMAIN'                   MODULE NAME\n         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY\nMAIN0000 DS    0H\n* ------------------------------------------------------------------- *\n*        Acquire storage for work area                                *\n* ------------------------------------------------------------------- *\n         LTR   R1,R1                          PARAMETER PASSED?\n         BZ    ERR0010                        NO\n         ICM   R9,15,0(R1)                    PARAMETER ADDRESS\n         BZ    ERR0010                        NO PARAMETER\n         L     R3,DXDSIZE                     WORK AREA SIZE\n         GETMAIN RU,                          ACQUIRE  STORAGE         +\n               LV=(R3),                       ..  SIZE IS IN R3        +\n               LOC=ANY                        .. MAY BE ABOVE OR BELOW\n         LR    R2,R1                          COPY WORK AREA ADDRESS\n         LR    R4,R1                          COPY STORAGE ADDRESS\n         SR    R1,R1                          CLEAR REGISTER\n         MVCL  R2,R0                          CLEAR WORK AREA\n         LR    R2,R4                          COPY WORK AREA ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN SAVE AREA\n         ST    R2,8(,R13)                     OUR SAVE AREA\n         LR    R13,R2                         SET SAVE AREA ADDRESS\n         USING DXDMAIN,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_ID,MODID                   IDENTIFY WORK AREA OWNER\n* ------------------------------------------------------------------- *\n*        Load common data module  (TSOCOMM)                           *\n* ------------------------------------------------------------------- *\n         LOAD  EP=TSOCOMM                     LOAD COMMON DATA MODULE\n         LR    R12,R0                         COPY TO PERMANENT BASE\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         ST    R11,AMAIN                      SET MAINLINE'S ADDRESS\n         ST    R4,COMM_DXD_ADDRESS            SET WORK AREA ADDRESS\n* ------------------------------------------------------------------- *\n*        Copy module entry point addresses                            *\n* ------------------------------------------------------------------- *\n         MVC   ADISP,VDISP                    SET DISPLAY ADDRESS\n         MVC   ALRAD,VLRAD                    SET LERAD EXIT ADDRESS\n         MVC   AMENU,VMENU                    SET MENU ADDRESS\n         MVC   ANET,VNET                      SET NET ADDRESS\n         MVC   APQRY,VPQRY                    SET PQUERY ADDRESS\n         MVC   APRSE,VPRSE                    SET PARSER ADDRESS\n         MVC   ATCPIP,VTCPIP                  SET TCPIP ADDRESS\n         MVC   AVARS,VVARS                    SET DEFINE/DELETE ADDR\n         MVC   AVTAM,VVTAM                    SET VTAM ADDRESS\n* ------------------------------------------------------------------- *\n*        Acquire storage for trace table                              *\n* ------------------------------------------------------------------- *\n         L     R3,TRSIZE                      TRACE TABLE SIZE\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=(R3),                       .. SIZE IS IN R3         +\n               LOC=ANY                        .. MAY BE ABOVE OR BELOW\n         ST    R1,TRADDR                      SAVE ADDRESS\n         SR    R0,R0                          ASSUME ON BOUNDARY\n         TM    TRADDR+3,X'07'                 ALREADY ON BOUNDARY?\n         BNO   INIT0010                       YES\n         SRL   R1,5                           SHIFT OUT LOW BITS ..\n         SLL   R1,5                           .. TO ROUND\n         LA    R1,32(,R1)                     PLUS 32\n         LA    R0,TRENTRYL                    1 LESS ENTRY AVAILABLE\nINIT0010 DS    0H\n         ST    R1,TRFIRST                     FIRST TRACE ENTRY\n         ST    R1,TRCURR                      CURRENT TRACE ENTRY\n         A     R1,TRSIZE                      LAST ENTRY IN TABLE\n         SH    R1,=Y(TRENTRYL)                MINUS 1 ENTRY\n         SR    R1,R0                          MINUS 1 MORE IF NECESSARY\n         ST    R1,TRLAST                      LAST TRACE ENTRY ADDRESS\n         ITRACE ID=INITIAL\n*        OI    XTR_FLAG,$XTR_ON\n* ------------------------------------------------------------------- *\n*        Process initialization parm                                  *\n* ------------------------------------------------------------------- *\n         SR    R2,R2                          CLEAR REGISTER\n         ICM   R2,3,0(R9)                     PARAMETER LENGTH\n         BZ    ERR0010                        NO PARAMETER\n         CH    R2,H256                        TOO LONG?\n         BH    ERR0020                        YES\n         MVC   DXD_WORK,COMM_BLANKS           INITIALIZE WORK AREA\n         LA    R1,DXD_WORK\n         LA    R3,2(,R9)                      SKIP LENGTH\n         SR    R4,R4                          ZERO FOR LENGTH\nINIT0020 DS    0H\n         CLI   0(R3),C' '                     BLANK?\n         BE    INIT0030                       YES\n         CLI   0(R3),C':'                     COLON?\n         BE    INIT0040                       YES\n         MVC   0(1,R1),0(R3)                  COPY TO WORK AREA\n         LA    R1,1(,R1)                      NEXT\n         LA    R3,1(,R3)                      NEXT\n         LA    R4,1(,R4)                      ADD TO LENGTH\n         BCT   R2,INIT0020                    LOOP\nINIT0030 DS    0H\n         OI    COMM_FLAG,$COMM_VTAM           USING VTAM\n         MVC   COMM_SUTL_APPL,DXD_WORK        COPY TO COMM AREA\n         B     INIT0050\nINIT0040 DS    0H\n         ST    R4,COMM_HOSTNAME_LENGTH        SAVE LENGTH\n         MVC   COMM_SUTL_HOSTNAME,DXD_WORK    COPY HOSTNAME\n         PACK  COMM_DWORD,1(5,R3)             PACK PORT NUMBER\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         STH   R0,COMM_SUTL_PORT              SAVE PORT NUMBER\n         OI    COMM_FLAG,$COMM_TCPIP          USING TCP/IP\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0050 DS    0H\n         GETMAIN RU,                                                   +\n               LV=32760,                                               +\n               LOC=ANY\n         LR    R7,R1\n         ST    R7,COMM_IO                     SAVE I/O AREA ADDRESS\n         USING NET_IO,R7\n         ITRACE ID=IO,                                                 +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*        Load SPF interface module                                    *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LOADSPF\n         LOAD  EP=ISPLINK                     LOAD SPF INTERFACE MODULE\n         ST    R0,AISPLINK                    SET ADDRESS\n* ------------------------------------------------------------------- *\n*        Do network related initialization                            *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NET_INIT\n         MVI   COMM_NET_COMMAND,$NET_INIT     SET COMMAND\n         L     R15,ANET\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*        Identify ourselves to STC                                    *\n* ------------------------------------------------------------------- *\n         USING PSA,R0                         DEFINE PSA'S BASE\n         L     R1,PSAAOLD                     OUR ASCB'S ADDRESS\n         USING ASCB,R1                        DEFINE BASE\n         ICM   R1,15,ASCBJBNS                 USER'S ID ADDRESS\n         MVC   COMM_USER,0(R1)                COPY USER'S ID\n         L     R1,CVTPTR                      CVT'S ADDRESS\n         USING CVT,R1                         DEFINE CVT'S BASE\n         ICM   R1,15,CVTSMCA                  SMF CONTROL AREA ADDRESS\n         USING SMCABASE,R1                    DEFINE BASE\n         MVC   COMM_USER_SMF,SMCASID          COPY SYSTEM'S SMF ID\n         ITRACE ID=ID_USER,                                            +\n               DATA1=COMM_USER,                                        +\n               DATA2=COMM_USER_SMF\n         MVI   NET_FUNCTION,$NET_ID           SET COMMAND\n         LA    R1,NET_HEADER_L+NET_ID_L       LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         MVC   NET_SMF_ID,COMM_USER_SMF       COPY SYSTEM'S SMF NAME\n         MVC   NET_USER_ID,COMM_USER          COPY USER'S ID\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R15,ANET                       VTAM ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND (RECEIVE)\n         L     R15,ANET                       VTAM ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE\n         MVC   COMM_SUTL_SMF,NET_SMF_ID       COPY STC'S SMF ID\n         MVC   COMM_SUTL_SYSTEM_NAME,NET_SYSTEM_NAME\n* ------------------------------------------------------------------- *\n*        Define SPF variables                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=VARDEF                     DEFINING ISPF VARIABLES\n         MVI   VAR_COMMAND,$VAR_DEFINE_ALL    SET COMMAND (DEFINE ALL)\n         LA    R1,LVLINE                      VARIABLE DATA BASE\n         ST    R1,VAR_AREA                    PASS DATA ADDRESS\n         LA    R1,SPFVARS                     VARIABLE CONTROL DATA\n         ST    R1,VAR_TABLE                   PASS CONTROL DATA ADDRESS\n         LA    R1,VAR_REQ                     VAR PARM BLOCK ADDRESS\n         L     R15,AVARS                      TSOVARS ENTRY POINT\n         BALR  R14,R15                        LINK TO TSOVARS\n         TM    COMM_FLAG,$ABORT               ERRORS IN DURING TSOINIT?\n         BO    TERM0000                       YES\n* ------------------------------------------------------------------- *\n*        Build text for menu                                          *\n* ------------------------------------------------------------------- *\nMAIN0010 DS    0H\n         ITRACE ID=BLDMMENU                   DISPLAY MENU\n         L     R2,AMENU                       MENU TABLE ADDRESS\n         SR    R0,R0                          CLEAR REGISTER\n         LH    R1,2(R2)                       NUMBER OF COMMANDS\n         ST    R1,COMM_TEXT_LINES             SAVE NUMBER OF TEXT LINES\n         M     R0,LINELEN                     TIMES TEXT LINE LENGTH\n         ST    R1,COMM_TEXT_LENGTH            SAVE TEXT AREA SIZE\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=(1),                        .. SIZE OF AREA          +\n               LOC=ANY\n         ST    R1,COMM_TEXT                   SAVE TEXT AREA ADDRESS\n         LR    R3,R1                          COPY TEXT ADDRESS\n         USING DTL,R3                         DEFINE DETAIL LINE BASE\n         LH    R4,2(R2)                       NUMBER OF ITEMS\n         LA    R2,4(,R2)                      SKIP COUNTERS\n         USING MENU_DSECT,R2                  DEFINE BASE\nMAIN0020 DS    0H\n         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE?\n         BO    MAIN0030                       NO\n         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE DETAIL AREA\n         MVI   DTL_ATTR_1,$ATTR_HIGH_TURQUOISE\n         MVC   DTL_CMD,MENU_CMD               COPY COMMAND\n         MVI   DTL_ATTR_2,$ATTR_NORMAL        SET ATTRIBUTE\n         MVC   DTL_DESC,MENU_DESC             COPY DESCRIPTION\n         LA    R3,DTL_L(,R3)                  NEXT DETAIL LINE\n         LA    R2,MENU_DSECT_L(,R2)           NEXT MENU ITEM\n         BCT   R4,MAIN0020                    LOOP\n         B     MAIN0040\nMAIN0030 DS    0H\n         LA    R2,MENU_DESC-MENU_DSECT(,R2)\n         B     MAIN0020                       LOOP\nMAIN0040 DS    0H\n         MVC   COMM_PANEL,MENU_PANEL          SET PANEL NAME\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR                    O ZERO\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LINE LENGTH\nMAIN0050 DS    0H\n         ITRACE ID=CALLDISP\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        DISPLAY THE MENU\n         CH    R15,H8                         END?\n         BE    TERM0000                       YES, BEGIN TERMINATION\n         CLC   ZCMD,COMM_BLANKS               ANY COMMAND?\n         BE    MAIN0050                       NO\nMAIN0060 DS    0H\n         LA    R1,L'ZCMD                      INPUT LENGTH\n         STH   R1,PARSE_LENGTH                SET LENGTH\n         MVC   PARSE_IN,ZCMD                  COPY INPUT STRING\n         LA    R1,PARSE_REQ                   PARSE PARMS ADDRESS\n         L     R15,APRSE                      PARSER ADDRESS\n         BALR  R14,R15                        PARSE\n         L     R2,AMENU                       MENU DATA BASE ADDRESS\n         LH    R4,0(R2)                       NUMBER OF MENU ITEMS\n         LA    R2,4(,R2)                      SKIP COUNTERS\nMAIN0070 DS    0H\n         CLC   MENU_CMD,PARSE_OUT             COMMAND FOUND?\n         BE    MAIN0100                       YES\n         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE?\n         BO    MAIN0080                       NO\n         LA    R2,MENU_DSECT_L(,R2)\n         B     MAIN0090\nMAIN0080 DS    0H\n         LA    R2,MENU_DESC-MENU_DSECT(,R2)\nMAIN0090 DS    0H\n         BCT   R4,MAIN0070                    LOOP\n         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE\n         B     MAIN0010                       RE-SEND MENU\nMAIN0100 DS    0H\n         ITRACE ID=CMDFOUND                   DISPLAY ACTIVE REGIONS\n         ICM   R1,15,COMM_TEXT                TEXT AREA ADDRESS\n         BZ    MAIN0110\n         L     R0,COMM_TEXT_LENGTH            TEXT LENGTH\n         ITRACE ID=FREETEXT,                                           +\n               RDATA1=R1,                                              +\n               RDATA2=R0\n         FREEMAIN RU,                         FREEMAIN TEXT AREA       +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\nMAIN0110 DS    0H\n*        MVC   ZCMD,PARSE_IN                  COPY REMAINING COMMAND\n         ICM   R15,15,MENU_ADDR               FUNCTION ENTRY POINT\n         ITRACE ID=CALL_CMD,                                           +\n               RDATA1=R15\n         BALR  R14,R15                        LINK TO ACTIVITY DISPLAY\n         TM    COMM_FLAG,$ABORT               WAS ABORT FLAG SET?\n         BO    ERR0040                        YES\n         CLC   COMM_MSG,COMM_BLANKS           MESSAGE FOR MAIN MENU?\n         BNE   MAIN0010                       YES\n         CLC   ZCMD,COMM_BLANKS               COMMAND PRESENT?\n         BNE   MAIN0060                       YES\n         B     MAIN0010                       OTHERWISE SEND MENU\n* ------------------------------------------------------------------- *\n*        Termination/clean up                                         *\n* ------------------------------------------------------------------- *\nTERM0000 DS    0H\n         ITRACE ID=TERM                       TERMINATION BEGINNING\n         ICM   R1,15,COMM_TEXT                TEXT AREA ADDRESS\n         BZ    TERM0010\n         L     R0,COMM_TEXT_LINES             TEXT LENGTH\n         FREEMAIN RU,                         FREEMAIN TEXT AREA       +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LINES,COMM_TEXT\n* ------------------------------------------------------------------- *\n*        Delete SPF variables                                         *\n* ------------------------------------------------------------------- *\nTERM0010 DS    0H\n         MVI   VAR_COMMAND,$VAR_DELETE_ALL    SET COMMAND (DELETE ALL)\n         LA    R1,VAR_REQ                     PARM BLOCK ADDRESS\n         L     R15,AVARS                      DEFINE/DELETE ADDRESS\n         BALR  R14,R15                        DELETE VARIABLES\n* ------------------------------------------------------------------- *\n*        Inform STC we're going home                                  *\n* ------------------------------------------------------------------- *\n         ITRACE ID=LOGOFF\n         MVI   NET_FUNCTION,$NET_LOGOFF       SET COMMAND\n         LA    R1,NET_HEADER_L\n         STCM  R1,3,NET_LENGTH\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R15,ANET                       VTAM ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n* ------------------------------------------------------------------- *\n*        Do network related cleanup                                   *\n* ------------------------------------------------------------------- *\n         ITRACE ID=CLEAN_UP\n         MVI   COMM_NET_COMMAND,$NET_CLEANUP  SET COMMAND\n         L     R15,ANET\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ICM   R1,15,COMM_IO                  I/O AREA ADDRESS\n         BZ    EXIT0000                       NOT ACQUIRED\n         ITRACE ID=FREEIO,                    FREEMAIN I/O AREA        +\n               RDATA1=R1                      .. I/O AREA'S ADDRESS\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=32760\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NOPARM\n         LA    R2,MSG02                       NO PARM MESSAGE\n         LA    R3,MSG02L                      MESSAGE'S LENGTH\n         BAL   R9,TPUT0000                    ISSUE MESSAGE\n         LA    R3,12                          SET RETURN CODE\n         B     EXIT0020                       AND EXIT\nERR0020  DS    0H\n         ITRACE ID=PARMLONG\n         LA    R2,MSG03                       PARM TOO LONG MESSAGE\n         LA    R3,MSG03L                      MESSAGE'S LENGTH\n         BAL   R9,TPUT0000                    ISSUE MESSAGE\n         MVI   COMM_RC,14                     SET RETURN CODE\n         B     EXIT0010                       AND EXIT\nERR0040  DS    0H\n         ITRACE ID=CMDFAIL                    COMMAND FAILED\n         ABEND $U1002,DUMP,,USER\n         ABEND $U1008,DUMP,,USER\nTPUT0000 DS    0H\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=(R3),                       .. SIZE OF MESSAGE       +\n               LOC=BELOW                      .. FROM BELOW THE LINE\n         BCTR  R3,0                           FOR EXECUTE\n         EX    R3,TPUTMVC                     MOVE MESSAGE TEXT\n         LR    R2,R1                          COPY MESSAGE ADDRESS\n         LA    R3,1(,R3)                      RESTORE FULL LENGTH\n         TPUT  (R2),(R3)                      ISSUE MESSAGE\n         FREEMAIN RU,                         FREE MESSAGE AREA        +\n               A=(R2),                                                 +\n               LV=(R3)\n         BR    R9                             RETURN\nTPUTMVC  MVC   0(0,R1),0(R2)                  COPY MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R0,TRSIZE                      TRACE TABLE SIZE\n         L     R1,TRADDR                      TRACE TABLE ADDRESS\n         FREEMAIN RU,                         FREEMAIN TRACE TABLE     +\n               A=(1),                                                  +\n               LV=(0)\nEXIT0010 DS    0H\n         L     R2,COMM_DXD_ADDRESS            SAVE WORK AREA ADDRESS\n         SR    R3,R3                          CLEAR REGISTER\n         IC    R3,COMM_RC                     RETURN CODE\n         DELETE EP=TSOCOMM                    DELETE COMMON MODULE\n         L     R0,DXDSIZE                     WORK AREA SIZE\n         L     R13,4(,R13)                    RESTORE R13\n         FREEMAIN RU,                         FREEMAIN WORK AREA       +\n               A=(R2),                                                 +\n               LV=(0)\nEXIT0020 DS    0H\n         L     R14,12(,R13)                   RESTORE R14\n         LR    R15,R3                         SET RETURN CODE\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDMAIN)           DISPLACEMENT TO WORK AREA\nDXDSIZE  CXD                        WORK AREA TOTAL SIZE\nVDISP    DC    V(TSODISP)           DYNAMIC AREA DISPLAY\nVLRAD    DC    V(TSOLRAD)           LERAD EXIT\nVMENU    DC    V(TSOMENU)           MENU DATA\nVNET     DC    V(TSONET)            NET FUNCTIONS\nVPQRY    DC    V(TSOPQRY)           DYNAMIC AREA PQUERY\nVPRSE    DC    V(TSOPRSE)           COMMAND PARSER\nVTCPIP   DC    V(TSOTCPIP)          TCPIP FUNCTIONS\nVVARS    DC    V(TSOVARS)           SPF VARIABLE DEFINE/DELETE\nVVTAM    DC    V(TSOVTAM)           TSO VTAM FUNCTIONS\nLINELEN  DC    A(DTL_L)\nH8       DC    H'8'\nH256     DC    H'256'\nMENU_PANEL DC  CL8'SUTLMENU'\n         FMH5  DSECT=NO              GENERATE FMH5\nMSG01    DS    0C\n         DC    CL11'TSOMAIN01E'\n         DC    C'Invalid function code'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'TSOMAIN02E * SUTL STC APPLID or HOSTNAME is required'\nMSG02L   EQU   *-MSG02\nMSG03    DC    C'TSOMAIN03E * Start parameter too long'\nMSG03L   EQU   *-MSG03\n         LTORG\n         VDEF  BASE=LVLINE\nSPFVARS  DS    0C\n         VDEF  NAME=PSMF,            DEFINE VARIABLE                   +\n               DATA=COMM_SUTL_SMF,   .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PSYSTEM,         DEFINE VARIABLE                   +\n               DATA=COMM_SUTL_SYSTEM_NAME,    NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PUID,            DEFINE VARIABLE                   +\n               DATA=COMM_USER,       .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGI,           DEFINE VARIABLE                   +\n               DATA=COMM_MSGI,       .. FIELD NAME IN TSOCOMM          +\n               LENGTH=11,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=PMSGT,           DEFINE VARIABLE                   +\n               DATA=COMM_MSGT,       .. FIELD NAME IN TSOCOMM          +\n               LENGTH=59,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +\n               DATA=LVLINE,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +\n               DATA=VCOL,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +\n               DATA=VDEPTH,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VROW,            DEFINE VARIABLE                   +\n               DATA=VROW,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +\n               DATA=VTYPE,           .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +\n               DATA=VWIDTH,          .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLN,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=4,             .. LENGTH                         +\n               FORM=FIXED            .. FORMAT\n         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +\n               DATA=ZSCROLLA,        .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +\n               DATA=ZVERB,           .. FIELD NAME IN TSOCOMM          +\n               LENGTH=8,             .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +\n               DATA=ZCMD,            .. FIELD NAME IN TSOCOMM          +\n               LENGTH=80,            .. LENGTH                         +\n               FORM=CHAR             .. FORMAT\n         DC    X'FF'\n* ------------------------------------------------------------------- *\n*        WORK AREA                                                    *\n* ------------------------------------------------------------------- *\nDXDMAIN  DSECT\n         SUTLSAVE DSECT=NO\n         VARREQ   DSECT=NO\n         PARSEREQ DSECT=NO\nDXD_WORK DS       CL256\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     MENUDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL          DSECT\nDTL_ATTR_1   DS       X\nDTL_CMD      DS       CL4\nDTL_ATTR_2   DS       C\n             DS       C\nDTL_DESC     DS       CL60\nDTL_L        EQU      *-DTL\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                NETIO    DSECT=YES\nNET_SMF_ID      DS       CL4\nNET_SYSTEM_NAME DS       CL4\nNET_USER_ID     DS       CL8\nNET_ID_L        EQU      *-NET_DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAASCB  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEESMCA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         ABCODES\n         END     TSOMAIN\n./ ADD NAME=TSOMENU  0104-09141-09181-1616-00055-00049-00000-SOURCE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*    Define user commands.                                            *\n*                                                                     *\n*    Format of the MENUFUNC macro is\"                                 *\n*           MENUFUNC  command,'menu text',modname,DISPLAY=YES/no      *\n*                                                                     *\n*    The \"command\" may be up to 4 characters, alpha or numeric.       *\n*                                                                     *\n*    The \"menu text' may be up to 60 characters long and must be      *\n*    inclosed in single apostrophes.                                  *\n*                                                                     *\n*    \"modname\" is the name of the module that will be given control   *\n*    when \"command\" is entered.                                       *\n*                                                                     *\n*    DISPLAY= (YES is default) specifies whether or not the command   *\n*    will be displayed on the menu panel.                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOMENU    CSECT\nTSOMENU    AMODE 31\nTSOMENU    RMODE ANY\n           DC       Y($MENUA)         TOTAL NUMBER OF ENTRIES\n           DC       Y($MENUD)         NUMBER OF DISPLAYABLE ENTRIES\n\n           MENUFUNC 1,'Display active regions',TSOACT\n           MENUFUNC ACT,,TSOACT,DISPLAY=NO\n           MENUFUNC 2,'Display APF list',TSOAPF\n           MENUFUNC APF,,TSOAPF,DISPLAY=NO\n           MENUFUNC AUTH,,TSOAPF,DISPLAY=NO\n           MENUFUNC 3,'Display IPL info',TSOIPL\n           MENUFUNC IPL,,TSOIPL,DISPLAY=NO\n           MENUFUNC 4,'Display filesystems',TSOFS\n           MENUFUNC FS,,TSOFS,DISPLAY=NO\n           MENUFUNC 5,'Display link list',TSOLLA\n           MENUFUNC LLA,,TSOLLA,DISPLAY=NO\n           MENUFUNC LNK,,TSOLLA,DISPLAY=NO\n           MENUFUNC LINK,,TSOLLA,DISPLAY=NO\n           MENUFUNC 6,'Display Open Edition processes',TSOPS\n           MENUFUNC PS,,TSOPS,DISPLAY=NO\n           MENUFUNC 7,'Display sub systems',TSOSUB\n           MENUFUNC SUB,,TSOSUB,DISPLAY=NO\n           MENUFUNC 8,'Display SUTL users',TSOUSE\n           MENUFUNC USE,,TSOUSE,DISPLAY=NO\n           MENUFUNC USER,,TSOUSE,DISPLAY=NO\n           MENUFUNC XTR,,TSOXTR,DISPLAY=NO\n           MENUFUNC DISPLAY=COUNT\n           COPY     MENUDSCT\n           END      TSOMENU\n./ ADD NAME=TSONET   0103-09152-09169-1426-00093-00094-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSONET                                                *\n*                                                                     *\n*  Perform NETWORK functions.                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSONET   CSECT\nTSONET   AMODE 31\nTSONET   RMODE ANY\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSONET,R11                     DEFINE BASE\n         USING USERBLOK,R10                   DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     NET0000\nMODID    DC    CL8'TSONET'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nNET0000  DS    0H\n         L     R1,COMM_DXD_ADDRESS            DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART\n         ST    R13,4(,R1)                     CHAIN WORK AREA\n         ST    R1,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         USING DXDNET,R13                     DEFINE BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    NET0010                        YES\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nNET0010  DS    0H\n         ITRACE ID=ENTRY\n         TM    COMM_FLAG,$COMM_TCPIP          USING TCP/IP?\n         BO    NET0020                        YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         ITRACE ID=VTAM\n         L     R15,AVTAM\n         B     NET0030\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nNET0020  DS    0H\n         ITRACE ID=TCPIP\n         L     R15,ATCPIP\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nNET0030  DS    0H\n         ITRACE ID=CALL,                                               +\n               RDATA1=R15\n         BALR  R14,R15                        CALL VTAM OR TCPIP\n         ITRACE ID=CALL_X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    CALLER'S R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDNET)                      DISPLACEMENT TO WORK AREA\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDNET   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      TSONET\n./ ADD NAME=TSOPQRY  0102-09141-09169-1426-00106-00106-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOPQRY - Obtain dynamic area data                    *\n*                                                                     *\n*  Function:                                                          *\n*   Determine characteristics of the dynamic area                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOPQRY  CSECT\nTSOPQRY  AMODE 31\nTSOPQRY  RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE ADDRESS\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOPQRY,R11                    DEFINE PROGRAM BASE\n         B     PQRY0000\nMODID    DC    CL8'TSOPQRY'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPQRY0000 DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDPQRY,R13                    DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    PQRY0010                       YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPQRY0010 DS    0H\n         ITRACE ID=ENTRY                      ISSUING PQUERY\n         LA    R1,PQUERY                      COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET IN PARM LIST\n         LA    R1,COMM_PANEL                  PANEL NAME'S ADDRESS\n         ST    R1,DXD_SPF2                    SET IN PARM LIST\n         LA    R1,CVDATA                      AREA NAME\n         ST    R1,DXD_SPF3                    SET IN PARM LIST\n         LA    R1,CVTYPE                      AREA TYPE\n         ST    R1,DXD_SPF4                    SET IN PARM LIST\n         LA    R1,CVWIDTH                     SCREEN DEPTH\n         ST    R1,DXD_SPF5                    SET IN PARM LIST\n         LA    R1,CVDEPTH                     SCREEN WIDTH\n         ST    R1,DXD_SPF6                    SET IN PARM LIST\n         LA    R1,CVROW                       SCREEN ROW\n         ST    R1,DXD_SPF7                    SET IN PARM LIST\n         LA    R1,CVCOL                       SCREEN COLUMN\n         ST    R1,DXD_SPF8                    SET IN PARM LIST\n         OI    DXD_SPF8,X'80'                 FLAG 'END-OF-LIST'\n         LA    R1,DXD_SPF_PARMS               PQUERY PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF INTERFACE'S ADDRESS\n         BALR  R14,R15                        ISSUE QUERY\n         LTR   R15,R15                        PQUERY SUCCESSFUL?\n         BZ    EXIT0000                       YES\n         ITRACE ID=PQRYFAIL,                  PQUERY FAILED            +\n               RDATA1=R15                     .. PQUERY RETURN CODE\n         ABEND $U1018,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDPQRY)                     DISPLACEMENT TO WORK AREA\nPQUERY   DC    CL8'PQUERY'\nCVDATA   DC    CL8'VDATA'\nCVTYPE   DC    CL8'VTYPE'\nCVWIDTH  DC    CL8'VWIDTH'\nCVDEPTH  DC    CL8'VDEPTH'\nCVROW    DC    CL8'VROW'\nCVCOL    DC    CL8'VCOL'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPQRY        DSECT\n               SUTLSAVE DSECT=NO\nDXD_SPF_PARMS  DS    0A                  ISPF PARM LIST\nDXD_SPF1       DS    A                   PARM 1 ADDRESS\nDXD_SPF2       DS    A                   PARM 2 ADDRESS\nDXD_SPF3       DS    A                   PARM 3 ADDRESS\nDXD_SPF4       DS    A                   PARM 4 ADDRESS\nDXD_SPF5       DS    A                   PARM 5 ADDRESS\nDXD_SPF6       DS    A                   PARM 6 ADDRESS\nDXD_SPF7       DS    A                   PARM 7 ADDRESS\nDXD_SPF8       DS    A                   PARM 8 ADDRESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA  DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         ABCODES\n         END     TSOPQRY\n./ ADD NAME=TSOPRSE  0102-09141-09173-0910-00093-00093-00000-SOURCE\n         COPY OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOPRSE   Parse command strings                       *\n*                                                                     *\n*  Purpose: Parse command strings.  This is written as a subroutine   *\n*           and does not use standard linkage.   It does not refer    *\n*           to any fields in a \"COMM\" area.                           *\n*                                                                     *\n*           Delimiters are blanks, =, periods, and commas.            *\n*           Delimiters are removed (they are not returned as a        *\n*           separate entity or with the preceding or following data). *\n*           Output length will not contain the length of the          *\n*           delimiters.  Leading blanks are removed, output length    *\n*           does not contain trailing blanks.                         *\n*                                                                     *\n*           Input strings are modified by this routine.  To parse a   *\n*           command completely, the caller should copy the initial    *\n*           command to the parse input, and then call this routine    *\n*           repetatively until the output length returned is zero.    *\n*                                                                     *\n*           Output will always be padded on the right with blanks.    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOPRSE  CSECT\nTSOPRSE  AMODE 31\nTSOPRSE  RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        LOAD BASE\n         USING TSOPRSE,R11                    DEFINE BASE\n         B     PRSE0000                       SKIP EYECATCHER\n         DC    CL8'TSOPRSE'\n         DC    C'&SYSDATE'\n         DC    C'&SYSTIME'\nPRSE0000 DS    0H\n         LR    R10,R1                         COPY PARM BLOCK ADDRESS\n         USING PARSE_REQ,R10                  DEFINE BASE\n         MVC   PARSE_OUT,BLANKS               INITIALIZE OUTPUT AREA\n         LA    R1,PARSE_OUT                   INITIAL OUTPUT ADDRESS\n         SR    R2,R2                          INITIAL OUTPUT LENGTH\n         LA    R3,L'PARSE_IN                  MAX LENGTH\nPRSE0010 DS    0H\n         CLI   PARSE_IN,C' '                  BLANK?\n         BNE   PRSE0020                       NO\n         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT\n         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE\n         BCT   R3,PRSE0010                    LOOP\n         B     PRSE0040                       NO DATA\nPRSE0020 DS    0H\n         CLI   PARSE_IN,C' '                  ENDING BLANK?\n         BE    PRSE0040                       YES\n         CLI   PARSE_IN,C'='                  ENDING EQUAL SIGN?\n         BE    PRSE0030                       YES\n         CLI   PARSE_IN,C'.'                  IMBEDDED PERIOD?\n         BE    PRSE0030                       YES\n         CLI   PARSE_IN,C','                  ENDING COMMA?\n         BE    PRSE0030                       YES\n         MVC   0(1,R1),PARSE_IN               COPY TO OUTPUT\n         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT\n         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE\n         LA    R1,1(,R1)                      NEXT IN OUTPUT\n         LA    R2,1(,R2)                      PLUS 1 TO LENGTH\n         BCT   R3,PRSE0020                    LOOP\n         B     PRSE0040\nPRSE0030 DS    0H\n         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT\n         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE\nPRSE0040 DS    0H\n         STH   R2,PARSE_LENGTH                SET OUTPUT LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nEXIT0000 DS    0H\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nBLANKS   DC    (L'PARSE_OUT)C' '\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PARSEREQ DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         END   TSOPRSE\n./ ADD NAME=TSOPS    0118-09146-09170-0824-00232-00180-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOPS                                                 *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the Open Edition processes                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOPS    CSECT\nTSOPS    AMODE 31\nTSOPS    RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOPS,R11                      DEFINE BASE\n         B     PS0000\nMODID    DC    CL8'TSOPS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nPS0000   DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXD_START                   PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDPS,R13                      DEFINE WORK AREA BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    PS0010                         YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nPS0010   DS    0H\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\nPS0020   DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_PS           SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?\n         BNE   PS0030                         NO\n         MVC   COMM_MSG(MSG01L),MSG01\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA FOR DISPLAY                            *\n* ------------------------------------------------------------------- *\nPS0030   DS    0H\n         SR    R2,R2                          CLEAR REGISTER\n         ICM   R2,3,PS_NBR                    ANY NAMES RETURNED?\n         BZ    PS0090                         NO\n         ITRACE ID=BLDTEXT,                                            +\n               RDATA1=R2\n         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES\n         LA    R1,ATTR_TABLE\n         ST    R1,DXD_CURR_ATTR\nPS0040   DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R2                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     LENGTH OF TEXT\n         ST    R1,COMM_TEXT_LENGTH            SAVE LENGTH OF TEXT\n         ITRACE ID=GET_TEXT,                                           +\n               RDATA1=R1\n         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ITRACE ID=TEXTAREA,                                           +\n               RDATA1=R1\n         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS\n         USING DTL,R1                         DEFINE BASE\n         LA    R5,PS_DATA                     FIRST PROCESS\n         USING PS_DATA,R5                     DEFINE BASE\nPS0050   DS    0H\n         ITRACE ID=BLD_DTL,                                            +\n               RDATA1=R1,                                              +\n               RDATA2=R5\n         MVC   DTL(DTL_L),COMM_BLANKS\n         L     R15,DXD_CURR_ATTR\n         MVC   DTL_ATTR,0(R15)\n         LA    R15,1(,R15)\n         CLI   0(R15),X'FF'\n         BNE   PS0060\n         LA    R15,ATTR_TABLE\nPS0060   DS    0H\n         ST    R15,DXD_CURR_ATTR\n         ICM   R0,15,PS_PID                   PROCESS ID\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT,EDWORD                INITIALIZE EDIT WORD\n         ED    DXD_EDIT,COMM_DWORD+3          EDIT PROCESS ID\n         MVC   DTL_PID,DXD_EDIT+1             COPY PROCESS ID\n         ICM   R0,15,PS_PPID                  PARENT PROCESS ID\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT,EDWORD                INITIALIZE EDIT WORD\n         ED    DXD_EDIT,COMM_DWORD+3          EDIT PROCESS ID\n         MVC   DTL_PPID,DXD_EDIT+1            COPY PARENT PROCESS ID\n         ICM   R0,15,PS_IO                    NBR OF I/O'S\n         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL\n         MVC   DXD_EDIT,EDWORD\n         ED    DXD_EDIT,COMM_DWORD+3          EDIT NBR OF I/O'S\n         MVC   DTL_IO,DXD_EDIT+1\n         ICM   R14,15,PS_USER_TIME            USER TIME\n         ICM   R15,15,PS_SYSTEM_TIME          SYSTEM TIME\n         AR    R15,R14                        TOTAL TIME\n         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL\n         MVC   DTL_CPU_TIME,TIME_EDWORD       INITIALIZE EDIT WORD\n         ED    DTL_CPU_TIME,COMM_DWORD+4      EDIT TIME\n         MVC   DTL_COMMAND,PS_COMMAND         COPY COMMAND\n         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA\n         LA    R5,PS_DATA_L(,R5)              NEXT PROCESS\n         BCT   R2,PS0050                      LOOP\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE\nPS0070   DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISP\n         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR+$MULTIPLE_SCREENS\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISP\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   PS0080                         NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    PS0020                         YES..\nPS0080   DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE\n         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH\n         FREEMAIN RU,                         FREE TEXT STORAGE        +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*              NO PROCESSES                                           *\n* ------------------------------------------------------------------- *\nPS0090   DS    0H\n         ITRACE ID=NOPS                       NO PROCESSES\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START  DC    Q(DXDPS)                     DISPLACEMENT TO WORK AREA\nLINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE\nX0004      DC    X'0004'\nPANEL_NAME DC    CL8'SUTLPS'                  PANEL NAME\nEDWORD     DC    X'40202020202020202120'\nTIME_EDWORD DC   X'4020202020214B2020'\n\nMSG01      DS    0C\n           DC    CL11'TSOPS01I'\n           DC    C'Process list truncated'\nMSG01L     EQU   *-MSG01\n\nMSG02      DS    0C\n           DC    CL11'TSOPS02I'\n           DC    C'There are no active processes!'\nMSG02L     EQU   *-MSG02\n\nATTR_TABLE DC    AL1($ATTR_HIGH)\n           DC    AL1($ATTR_HIGH_YELLOW)\n           DC    AL1($ATTR_HIGH_RED)\n           DC    AL1($ATTR_HIGH_TURQUOISE)\n           DC    AL1($ATTR_HIGH_GREEN)\n           DC    X'FF'\n\n           LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDPS          DSECT\n               SUTLSAVE DSECT=NO\nDXD_CURR_ATTR  DS   A\nDXD_EDIT       DS   CL10\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL             DSECT\nDTL_ATTR        DS    X               ATTRIBUTE CHARACTER\nDTL_PID         DS    CL9             PROCESSS ID\n                DS    CL2\nDTL_PPID        DS    CL9             PARENT PROCESS ID\n                DS    CL1\nDTL_IO          DS    CL9             NBR OF I/O'S\n                DS    CL1\nDTL_CPU_TIME    DS    CL9             CPU TIME USED\n                DS    CL2\nDTL_COMMAND     DS    CL38            COMMAND\nDTL_L           EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n         COPY    PSDATA\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOPS\n./ ADD NAME=TSOSUB   0105-09141-09173-0911-00205-00205-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOSUB                                                *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the sub-systems.                             *\n*                                                                     *\n*  Sub-commands                                                       *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOSUB   CSECT\nTSOSUB   AMODE 31\nTSOSUB   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOSUB,R11                     DEFINE BASE\n         B     SUB0000\nMODID    DC    CL8'TSOSUB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nSUB0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDSUB,R13                     DEFINE WORK AREA BASE\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    SUB0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nSUB0010  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         MVI   NET_FUNCTION,$NET_SUB          SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA                                        *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                          CLEAR REGISTER\n         ICM   R7,3,SUBSYSTEM_NBR             ANY SUBSYSTEMS RETURNED?\n         BZ    SUB0060                        NO\n         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES\nSUB0020  DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R7                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     TIMES LENGTH\n         ST    R1,COMM_TEXT_LENGTH            SAVE SIZE OF TEXT\n         GETMAIN RU,                          ACQUIRE TEXT AREA        +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ST    R1,COMM_TEXT                   TEXT AREA ADDRESS\n         LR    R8,R1                          COPY TEXT AREA ADDRESS\n         USING DTL,R8                         DEFINE BASE\n         LA    R9,SUBSYSTEM_DATA              FIRST DATASET NAME\n         USING SSCT,R9                        DEFINE BASE\n         CLC   NET_RC,X0004                   LIST TRUNCATED?\n         BNE   SUB0030                        NO\n         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE\nSUB0030  DS    0H\n         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE DETAIL AREA\n         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE\n         MVC   DTL_NAME,SSCTSNAM              COPY SUBSYSTEM NAME\n         UNPK  DTL_FLAG1(3),SSCTFLG1(2)\n         TR    DTL_FLAG1,HEXCHAR              TRANSLATE TO PRINTABLE\n         MVI   DTL_FLAG1+2,C' '               RESTORE BLANK\n         UNPK  DTL_SSID(3),SSCTSSID(2)\n         TR    DTL_SSID,HEXCHAR               TRANSLATE TO PRINTABLE\n         MVI   DTL_SSID+2,C' '                RESTORE BLANK\n         UNPK  DTL_SSVT(9),SSCTSSVT(5)\n         TR    DTL_SSVT,HEXCHAR               TRANSLATE TO PRINTABLE\n         MVI   DTL_SSVT+8,C' '                RESTORE BLANK\n         UNPK  DTL_SUSE(9),SSCTSUSE(5)\n         TR    DTL_SUSE,HEXCHAR               TRANSLATE TO PRINTABLE\n         MVI   DTL_SUSE+8,C' '                RESTORE BLANK\n         UNPK  DTL_SYN(9),SSCTSYN(5)\n         TR    DTL_SYN,HEXCHAR                TRANSLATE TO PRINTABLE\n         MVI   DTL_SYN+8,C' '                 RESTORE BLANK\n         LA    R9,SSCTSIZE(,R9)               NEXT SUBSYSTEM\n         LA    R8,DTL_L(,R8)                  NEXT OUTPUT AREA\n         BCT   R7,SUB0030                     LOOP\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\nSUB0040  DS    0H\n         ITRACE ID=CALLDISP                   CALLING DISP\n         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA\n         L     R15,ADISP                      DISPLAY\n         BALR  R14,R15                        LINK TO DISPLAY\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   SUB0050                        NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    SUB0040                        YES.. REDISPLAY\nSUB0050  DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT\n         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH\n         FREEMAIN RU,                         FREE TEXT                +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*              NO subsystems                                          *\n* ------------------------------------------------------------------- *\nSUB0060  DS    0H\n         ITRACE ID=NOSUBSYS                   NO SUBSYSTEMS\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDSUB)                      DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTL_L)                       LENGTH of DETAIL LINE\nX0004    DC    X'0004'\n\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n\nPANEL_NAME DC  CL8'SUTLSUB'          PANEL NAME\nMSG01    DS    0C\n         DC    CL11'TSOSUB01I'\n         DC    C'Subsystem list is truncated'\nMSG01L   EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOSUB02I'\n         DC    C'There are subsystems!'\nMSG02L   EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSUB   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL       DSECT\nDTL_ATTR  DS    X               ATTRIBUTE CHARACTER\nDTL_NAME  DS    CL4\n          DS    C\nDTL_FLAG1 DS   XL2\n          DS    X\nDTL_SSID  DS    XL2\n          DS    X\nDTL_SSVT  DS    XL8\n          DS    X\nDTL_SUSE  DS    XL8\n          DS    X\nDTL_SYN   DS    XL8\n          DS    X\nDTL_L     EQU   *-DTL          LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    NETIO DSECT=YES\nSUBSYSTEM_NBR       DS    H\nSUBSYSTEM_HEADER_L  EQU   *-NET_IO\nSUBSYSTEM_DATA      DS    0C\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IEFJSCVT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOSUB\n./ ADD NAME=TSOTCPIP 0109-09152-09173-0912-00352-00312-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOTCPIP - TCP/IP FUNCTIONS                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOTCPIP CSECT\nTSOTCPIP AMODE 31\nTSOTCPIP RMODE ANY\n         STM   R14,R12,12(R13)                 SAVE REGISTERS\n         LR    R11,R15                         SET BASE REGISTER\n         USING TSOCOMM,R12                     DEFINE COMMON AREA BASE\n         USING TSOTCPIP,R11                    DEFINE PROGRAM BASE\n         USING USERBLOK,R10\n         B     @0000000\nMODID    DC    CL8'TSOTCPIP'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\n@0000000 DS    0H\n         L     R1,COMM_DXD_ADDRESS             DXD AREA BASE\n         A     R1,DXDSTART                     PLUS DISPLACEMENT\n         ST    R13,4(,R1)                      CHAIN CALLER'S SAVE AREA\n         ST    R1,8(,R13)                      CHAIN OUR SAVE AREA\n         LR    R13,R1                          COPY DXD AREA ADDRESS\n         USING DXDTCPIP,R13                    DEFINE DXD AREA BASE\n         CLC   DXD_ID,MODID                    DXD AREA INITIALIZED?\n         BE    @0000010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                    DXD AREA INITIALIZED\n         XC    DXD_LENGTH,DXD_LENGTH\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n@0000010 DS    0H\n         L     R9,COMM_IO\n         USING NET_IO,R9\n         CLI   COMM_NET_COMMAND,$NET_INIT      INIT?\n         BE    INIT0000                        YES\n         CLI   COMM_NET_COMMAND,$NET_CLEANUP   CLEAN UP?\n         BE    CLOSE000                        YES\n         CLI   COMM_NET_COMMAND,$NET_RECEIVE   RECEIVE?\n         BE    RECV0000                        YES\n         CLI   COMM_NET_COMMAND,$NET_SEND      SEND?\n         BE    SEND0000                        YES\n         ABEND 1,DUMP,,USER\n*---------------------------------------------------------------------*\n*        Initialize the TCP/IP environment                            *\n*---------------------------------------------------------------------*\nINIT0000 DS    0H\n         ITRACE ID=INITAPI\n         MVC   DXD_TCPIP_FUNCTION,=CL16'INITAPI'\n         EZASMI TYPE=INITAPI,                                          +\n               MAXSNO=DXD_MAX_SOCKET,                                  +\n               SUBTASK=MODID,                                          +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               ASYNC='NO',                                             +\n               ERROR=ERR0010,                                          +\n               TASK=DXD_TCPIP_TASK\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         ITRACE ID=SOCKET\n         MVC   DXD_TCPIP_FUNCTION,=CL16'SOCKET'\n         EZASMI TYPE=SOCKET,                                           +\n               AF='INET',                                              +\n               SOCTYPE='STREAM',                                       +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               TASK=DXD_TCPIP_TASK\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         MVC   DXD_SOCKET,DXD_TCPIP_RETURN_CODE+2\n         ITRACE ID=SOCK_NBR,                                           +\n               DATA1=DXD_SOCKET\n*\n*     Setting the port to zero allows TCP/IP to choose any\n*     free port number\n*\n         XC    DXD_SOCKET_STRUCTURE,DXD_SOCKET_STRUCTURE\n         MVC   DXD_SOCKET_FAMILY,C_AF_INET\n         XC    DXD_SOCKET_PORT,DXD_SOCKET_PORT\n         ITRACE ID=BIND\n         MVC   DXD_TCPIP_FUNCTION,=CL16'BIND'\n         EZASMI TYPE=BIND,                                             +\n               S=DXD_SOCKET,                                           +\n               NAME=DXD_SOCKET_STRUCTURE,                              +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +\n               TASK=DXD_TCPIP_TASK\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         ITRACE ID=GETHOST\n         MVC   DXD_TCPIP_FUNCTION,=CL16'GETHOSTBYNAME'\n         EZASMI TYPE=GETHOSTBYNAME,                                    +\n               NAMELEN=COMM_HOSTNAME_LENGTH,                           +\n               NAME=COMM_SUTL_HOSTNAME,                                +\n               HOSTENT=DXD_HOSTENT,                                    +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERROR=DXD_TCPIP_ERROR_NUMBER\n         ITRACE ID=RC,                                                 +\n               DATA1=DXD_TCPIP_RETURN_CODE,                            +\n               DATA2=DXD_TCPIP_ERROR_NUMBER\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         L     R1,DXD_HOSTENT\n         USING HOSTENT,R1\n         L     R2,HOSTENT_IP_LIST\n         L     R3,0(,R2)\n         XC    DXD_PEER,DXD_PEER\n         MVC   DXD_PEER_AF,C_AF_INET\n         MVC   DXD_PEER_PORT,COMM_SUTL_PORT\n         MVC   DXD_PEER_IP_ADDRESS,0(R3)\n         ITRACE ID=CONNECT,                                            +\n               DATA1=DXD_PEER+00,                                      +\n               DATA2=DXD_PEER+08\n         MVC   DXD_TCPIP_FUNCTION,=CL16'CONNECT'\n         EZASMI TYPE=CONNECT,                                          +\n               S=DXD_SOCKET,                                           +\n               NAME=DXD_PEER,                                          +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=READ1\n         MVC   DXD_TCPIP_FUNCTION,=CL16'READ'\n         L     R4,F32760\n         LA    R3,NET_IO\n         SR    R5,R5\nRECV0010 DS    0H\n         ITRACE ID=READ2,                                              +\n               RDATA1=R3,                                              +\n               RDATA2=R4\n         ST    R4,DXD_LENGTH\n         EZASMI TYPE=READ,                                             +\n               S=DXD_SOCKET,                                           +\n               NBYTE=DXD_LENGTH,                                       +\n               BUF=(R3),                                               +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER\n         ITRACE ID=READ_X,                                             +\n               DATA1=DXD_TCPIP_RETURN_CODE,                            +\n               DATA2=DXD_TCPIP_ERROR_NUMBER\n         ICM   R0,15,DXD_TCPIP_RETURN_CODE\n         BM    ERR0010\n         AR    R3,R0\n         SR    R4,R0\n         AR    R5,R0\n         CH    R5,=Y(NET_HEADER_L)            MINIMUM LENGTH?\n         BL    RECV0010                       NO\n         CLM   R5,3,NET_LENGTH                RECEIVED ALL SENT?\n         BL    RECV0010                       NO\n         B     EXIT0000                       EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=WRITE1\n         MVC   DXD_TCPIP_FUNCTION,=CL16'WRITE'\n         LA    R3,NET_IO\n         SR    R4,R4\n         ICM   R4,3,NET_LENGTH\n         SR    R5,R5\nSEND0010 DS    0H\n         ITRACE ID=WRITE2,                                             +\n               RDATA1=R3,                                              +\n               RDATA2=R4\n         ST    R4,DXD_LENGTH\n         EZASMI TYPE=WRITE,                                            +\n               S=DXD_SOCKET,                                           +\n               NBYTE=DXD_LENGTH,                                       +\n               BUF=(R3),                                               +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER\n         ITRACE ID=WRITE_X,                                            +\n               DATA1=DXD_TCPIP_RETURN_CODE,                            +\n               DATA2=DXD_TCPIP_ERROR_NUMBER\n         ICM   R0,15,DXD_TCPIP_RETURN_CODE\n         AR    R3,R0\n         SR    R4,R0\n         AR    R5,R0\n         CLM   R5,3,NET_LENGTH                ALL DATA SENT?\n         BL    SEND0010                       NO\n         BO    ERR0010\n         B     EXIT0000                       EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCLOSE000 DS    0H\n         ITRACE ID=SHUTDOWN\n         EZASMI TYPE=SHUTDOWN,                                         +\n               S=DXD_SOCKET,                                           +\n               HOW=2,                                                  +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER\n         ITRACE ID=CLOSE\n         MVC   DXD_TCPIP_FUNCTION,=CL16'CLOSE'\n         EZASMI TYPE=CLOSE,                                            +\n               S=DXD_SOCKET,                                           +\n               RETCODE=DXD_TCPIP_RETURN_CODE,                          +\n               ERRNO=DXD_TCPIP_ERROR_NUMBER\n         ITRACE ID=TERMAPI\n         MVC   DXD_TCPIP_FUNCTION,=CL16'TERMAPI'\n         EZASMI TYPE=TERMAPI,                                          +\n               TASK=DXD_TCPIP_TASK\n         TM    DXD_TCPIP_RETURN_CODE,X'80'\n         BO    ERR0010\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=TCP_ERR,                                            +\n               DATA1=DXD_TCPIP_FUNCTION,                               +\n               DATA2=DXD_TCPIP_ERROR_NUMBER\n         OI    COMM_FLAG,$ABORT\n         GETMAIN RU,                                                   +\n               LV=MSG02L,                     <-- LONGEST MESSAGE      +\n               LOC=BELOW\n         LR    R3,R1                          COPY STORAGE ADDRESS\n\n         MVC   0(MSG01L,R3),MSG01\n         TPUT  (R3),MSG01L\n\n         MVC   0(MSG02L,R3),MSG02\n         MVC   MSG02_FNC-MSG02(L'MSG02_FNC,R3),DXD_TCPIP_FUNCTION\n         TPUT  (R3),MSG02L\n\n         MVC   0(MSG03L,R3),MSG03\n         UNPK  MSG03_RC-MSG03(9,R3),DXD_TCPIP_RETURN_CODE(5)\n         TR    MSG03_RC-MSG03(8,R3),HEXCHAR\n         MVI   MSG03_RC-MSG03+8(R3),C' '\n         TPUT  (R3),MSG03L\n\n         MVC   0(MSG04L,R3),MSG04\n         UNPK  MSG04_ERR-MSG04(9,R3),DXD_TCPIP_ERROR_NUMBER(5)\n         TR    MSG04_ERR-MSG04(8,R3),HEXCHAR\n         MVI   MSG04_ERR-MSG04+8(R3),C' '\n         TPUT  (R3),MSG04L\n\n         FREEMAIN RU,                                                  +\n               A=(R3),                                                 +\n               LV=MSG02L\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                     SET RETURN CODE\n         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART  DC    Q(DXDTCPIP)                   DISPLACEMENT TO DXD AREA\nF32760    DC    F'32760'\nC_AF_INET DC    X'0002'\n\nHEXCHAR   EQU   *-C'0'\n          DC    C'0123456789ABCDEF'\n\nMSG01     DC    CL11'TSOTCPIP01E '\n          DC    C'TCP/IP error'\nMSG01L    EQU   *-MSG01\n\nMSG02     DC    Cl11'TSOTCPIP02I '\n          DC    C'Function:     '\nMSG02_FNC DC    CL16' '\nMSG02L    EQU   *-MSG02\n\nMSG03     DC    CL11'TSOTCPIP03I '\n          DC    C'Return code:  '\nMSG03_RC  DC    CL8' '\n          DC    C' '\nMSG03L    EQU   *-MSG03\n\nMSG04     DC    CL11'TSOTCPIP04I '\n          DC    C'Error number: '\nMSG04_ERR DC    CL8' '\n          DC    C' '\nMSG04L    EQU   *-MSG04\n          LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDTCPIP                 DSECT\n                         SUTLSAVE DSECT=NO\nDXD_HOSTENT              DS    A\nDXD_TCPIP_RETURN_CODE    DS    F\nDXD_TCPIP_ERROR_NUMBER   DS    F\nDXD_LENGTH               DS    F\n\nDXD_MAX_SOCKET           DS    H\nDXD_SOCKET               DS    H\nDXD_RC                   DS    H\n\nDXD_PEER                 DS    0F,0XL16\nDXD_PEER_AF              DS    XL2\nDXD_PEER_PORT            DS    XL2\nDXD_PEER_IP_ADDRESS      DS    F\nDXD_PEER_RESERVED        DS    XL8\n\n                         DS    0F\nDXD_SOCKET_STRUCTURE     DS    0XL16\nDXD_SOCKET_FAMILY        DS    AL2           FAMILY (ALWAYS = 2)\nDXD_SOCKET_PORT          DS    XL2           PORT NUMBER\nDXD_SOCKET_CLIENT_IP     DS    XL4           CLIENT'S IP ADDRESS\n                         DS    XL8           RESERVED\n\nDXD_TCPIP_FUNCTION       DS    CL16\nDXD_TCPIP_TASK           EZASMI TYPE=TASK,STORAGE=CSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHOSTENT                  DSECT\nHOSTENT_HOSTNAME_ADDRESS DS  A\nHOSTENT_ALIAS_LIST       DS  A\nHOSTENT_FAMILY           DS  XL4\nHOSTENT_IP_LIST_LENGTH   DS  XL4\nHOSTENT_IP_LIST          DS  A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         EZASMI   TYPE=GLOBAL,STORAGE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         END  TSOTCPIP\n./ ADD NAME=TSOUSE   0108-09141-09173-0913-00273-00257-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOUSE - Display active SUTL users                    *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n*                                                                     *\n*  Displayed data is:                                                 *\n*   USERID       User's TSO id.                                       *\n*   LU           User's VTAM logical unit (LU) name.                  *\n*   CID          VTAM conversation id.                                *\n*   FUNC         Last SUTL function the user has used.                *\n*   VTAM         Last VTAM function the STC has performed with the    *\n*                TSO user (either RECEIVE or SEND).                   *\n*   SENDS        Number of sends/number of bytes sent to the TSO user.*\n*   RECV's       Number of receives/number of bytes received from     *\n*                the TSO user.                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOUSE   CSECT\nTSOUSE   AMODE 31\nTSOUSE   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOUSE,R11                     DEFINE BASE\n         B     USE0000\nMODID    DC    CL8'TSOUSE'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nUSE0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDUSE,R13                     DEFINE WORK AREA BASE\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    USE0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nUSE0010  DS    0H\n         ITRACE ID=REQDATA                    REQUEST DATA FROM STC\n         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)\n         L     R10,COMM_IO                    I/O AREA ADDRESS\n         USING NET_IO,R10                     DEFINE BASE\n         MVI   NET_FUNCTION,$NET_USERS        SET FUNCTION\n         LA    R1,NET_HEADER_L                LENGTH\n         STCM  R1,3,NET_LENGTH                SET LENGTH\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        SEND REQUEST TO STC\n         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND\n         L     R15,ANET                       VTAM MODULE ENTRY POINT\n         BALR  R14,R15                        RECEIVE RESPONSE FROM STC\n* ------------------------------------------------------------------- *\n*              BUILD TEXT AREA                                        *\n* ------------------------------------------------------------------- *\n         SR    R7,R7                          CLEAR REGISTER\n         ICM   R7,3,USER_NBR                  ANY USERS RETURNED?\n         BZ    USE0120                        NO\n         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES\nUSE0020  DS    0H\n         SR    R0,R0                          CLEAR REGISTER\n         LR    R1,R7                          COPY NUMBER OF NAMES\n         M     R0,LINELEN                     LENGTH OF TEXT\n         ST    R1,COMM_TEXT_LENGTH            SAVE size OF TEXT\n         GETMAIN RU,                          ACQUIRE  TEXT AREA       +\n               LV=(1),                        .. TEXT AREA SIZE        +\n               LOC=ANY                        .. FROM ANY AREA\n         ST    R1,COMM_TEXT                   TEXT AREA ADDRESS\n         LR    R8,R1                          COPY TEXT AREA ADDRESS\n         USING DTL,R8                         DEFINE BASE\n         LA    R9,USER_DATA                   FIRST USER\nNET      USING USERBLOK,R9\n         CLC   NET_RC,X0004                   LIST TRUNCATED?\n         BNE   USE0030                        NO\n         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE\nUSE0030  DS    0H\n         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE AREA\n         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE\n         MVC   DTL_ID,NET.USER_ID             USER ID\n         TM    NET.USER_STATUS,$USER_VTAM     USING VTAM?\n         BO    USE0040                        YES\n         MVC   DTL_IP_ADDRESS,NET.USER_IP_ADDRESS\n         B     USE0050\nUSE0040  DS    0H\n         MVC   DTL_LU,NET.USER_LU             USER'S VTAM LU NAME\n         UNPK  DTL_CID(9),NET.USER_CID(5)     CONVERSATION ID\n         TR    DTL_CID,HEXCHAR                TRANSLATE TO PRINTABLE\n         MVI   DTL_CID+8,C' '                 RESTORE BLANK\nUSE0050  DS    0H\n         LA    R1,FUNCTION_TABLE              FUNCTION TABLE ADDRESS\n         USING FUNCTION_DSECT,R1              DEFINE BASE\nUSE0060  DS    0H\n         CLI   FUNCTION,X'FF'                 END OF TABLE?\n         BE    USE0070                        YES\n         CLC   FUNCTION,NET.USER_IO           LOCATED THE FUNCTION?\n         BE    USE0070                        YES\n         LA    R1,FUNCTION_DSECT_L(,R1)       NEXT FUNCTION\n         B     USE0060                        LOOP\nUSE0070  DS    0H\n         MVC   DTL_FUNCTION,FUNCTION_NAME     SET FUNCTION NAME\n         CLI   NET.USER_NET_COMMAND,$USER_RECEIVE\n         BE    USE0080\n         CLI   NET.USER_NET_COMMAND,$USER_SEND\n         BE    USE0090\n         B     USE0100                        NO FUNCTION PENDING\nUSE0080  DS    0H\n         MVC   DTL_NET_FUNCTION,RECEIVE       FUNCTION IS 'RECEIVE'\n         B     USE0100\nUSE0090  DS    0H\n         MVC   DTL_NET_FUNCTION,SEND          FUNCTION IS 'SEND'\nUSE0100  DS    0H\n         L     R0,NET.USER_SENDS\n         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL\n         MVC   DTL_SENDS,EDWD1                SET EDIT WORD\n         ED    DTL_SENDS,DXD_DWORD+3          EDIT NUMBER OF SENDS\n         L     R0,NET.USER_BYTES_SENT         NBR OF BYTES SENT\n         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL\n         MVC   DTL_BYTES_SENT,EDWD1           SET EDIT WORD\n         ED    DTL_BYTES_SENT,DXD_DWORD+3     EDIT LENGTH SENT\n         L     R0,NET.USER_RECEIVES           NBR OF RECEIVES\n         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL\n         MVC   DTL_RECEIVES,EDWD1             SET EDIT WORD\n         ED    DTL_RECEIVES,DXD_DWORD+3       EDIT NUMBER OF RECEIVES\n         L     R0,NET.USER_BYTES_RECEIVED     NBR OF BYTES RECEIVED\n         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL\n         MVC   DTL_BYTES_RECEIVED,EDWD1       SET EDIT WORD\n         ED    DTL_BYTES_RECEIVED,DXD_DWORD+3 EDIT LENGTH RECEIVED\n         LA    R8,DTL_L(,R8)                  NEXT DETAIL AREA\n         LA    R9,USER_L(,R9)                 NEXT USER\n         BCT   R7,USE0030                     LOOP\n         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME\n         MVC   COMM_TEXT_LINE_LENGTH,LINELEN\n         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET\n         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR\n         ITRACE ID=CALLDISP                   CALLING DISP\n         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA\n         L     R15,ADISP                      DISPLAY ENTRY POINT\n         BALR  R14,R15                        LINK TO DISPLAY\n         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +\n               RDATA1=R15                     .. RETURN CODE FROM DISP\n         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?\n         BNE   USE0110                        NO\n         LTR   R15,R15                        RETURN CODE ZERO?\n         BZ    USE0010                        YES.. REDISPLAY\nUSE0110  DS    0H\n         ITRACE ID=FREETEXT                   FREEING TEXT\n         L     R1,COMM_TEXT                   TEXT ADDRESS\n         L     R0,COMM_TEXT_LENGTH            TEXT LENGTH\n         FREEMAIN RU,                         FREE TEXT                +\n               A=(1),                                                  +\n               LV=(0)\n         XC    COMM_TEXT,COMM_TEXT\n         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH\n         XC    COMM_TEXT_LINES,COMM_TEXT_LINES\n         B     EXIT0000                       AND EXIT\n* ------------------------------------------------------------------- *\n*              NO USERS (SHOULD NEVER HAPPEN)                         *\n* ------------------------------------------------------------------- *\nUSE0120  DS    0H\n         ITRACE ID=NOUSERS                    NO USERS\n         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDUSE)                      DISPLACEMENT TO WORK AREA\nLINELEN  DC    A(DTL_L)                       LENGTH OF DETAIL LINE\nEDWD1    DC    X'40202020202020202021'\nX0004    DC    X'0004'\n\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n\nRECEIVE    DC    CL8'RECEIVE'\nSEND       DC    CL8'SEND'\nPANEL_NAME DC    CL8'SUTLUSE'          PANEL NAME\n\nMSG01      DS    0C\n           DC    CL11'TSOUSE01I'\n           DC    C'User list truncated'\nMSG01L     EQU   *-MSG01\nMSG02      DS    0C\n           DC    CL11'TSOUSE02I'\n           DC    C'There are no users!'\nMSG02L     EQU   *-MSG02\n\nFUNCTION_TABLE DS    0C\n               DC    AL1($NET_ID),CL4'SID'\n               DC    AL1($NET_ACT),CL4'ACT'\n               DC    AL1($NET_APF),CL4'APF'\n               DC    AL1($NET_FS),CL4'FS'\n               DC    AL1($NET_IPL),CL4'IPL'\n               DC    AL1($NET_LLA),CL4'LLA'\n               DC    AL1($NET_PS),CL4'PS'\n               DC    AL1($NET_SUB),CL4'SUB'\n               DC    AL1($NET_USERS),CL4'USE'\n               DC    X'FF',CL4'UNKN'\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDUSE           DSECT\n                 SUTLSAVE DSECT=NO\nDXD_DWORD        DS    D\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                 USERBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFUNCTION_DSECT   DSECT\nFUNCTION         DS    X\nFUNCTION_NAME    DS    CL4\nFUNCTION_DSECT_L EQU   *-FUNCTION_DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDTL                DSECT\nDTL_ATTR           DS    X               ATTRIBUTE CHARACTER\nDTL_ID             DS    CL8             USER ID\nDTL_LU             DS    CL8             VTAM LU\n                   DS    C\nDTL_CID            DS    CL8\n                   ORG   DTL_LU\nDTL_IP_ADDRESS     DS    CL15\n                   ORG\n                   DS    X\nDTL_FUNCTION       DS    CL4\n                   DS    X\nDTL_NET_FUNCTION   DS    CL8\nDTL_SENDS          DS    CL10\nDTL_BYTES_SENT     DS    CL10\nDTL_RECEIVES       DS    CL10\nDTL_BYTES_RECEIVED DS    CL10\nDTL_L              EQU   *-DTL           LENGTH OF DETAIL LINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n          TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n          NETIO   DSECT=YES\nUSER_NBR  DS      H\nUSER_DATA DS      0C\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA   DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT      DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         COPY     ATTR\n         END      TSOUSE\n./ ADD NAME=TSOVARS  0102-09142-09170-1318-00212-00212-00000-SOURCE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOVARS                                               *\n*                                                                     *\n*  Define or delete SPF variables.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOVARS  CSECT\nTSOVARS  AMODE 31\nTSOVARS  RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOVARS,R11                    DEFINE PROGRAM BASE\n         B     VARS0000\nMODID    DC    CL8'TSOVARS'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVARS0000 DS    0H\n         LR    R9,R1                          SAVE PARM LIST ADDRESS\n         USING VAR_REQ,R9                     DEFINE BASE\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR AREA\n         LR    R13,R2                         SET WORK AREA BASE\n         USING DXDVARS,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_ID,MODID                   IDENTIFY AREA\n         ITRACE ID=ENTRY,                     TRACE ENTRY              +\n               DATA1=VAR_COMMAND              .. SAVE THE COMMAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVAR0010  DS    0H\n         CLI   VAR_COMMAND,$VAR_DEFINE_ALL      DEFINE ALL?\n         BE    VAR0100                          YES\n         CLI   VAR_COMMAND,$VAR_DEFINE_SPECIFIC DEFINE SPECIFIC?\n         BE    VAR0100                          YES\n         CLI   VAR_COMMAND,$VAR_DELETE_SPECIFIC DELETE VARIABLE?\n         BE    VAR0200                          YES\n         CLI   VAR_COMMAND,$VAR_DELETE_ALL      DELETE ALL?\n         BE    VAR0300                          YES\n         ITRACE ID=BADCMD\n         ABEND $U1009,DUMP,,USER              BAD COMMAND\n* ------------------------------------------------------------------- *\n*        PROCESS DEFINE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0100  DS    0H\n         LA    R1,VDEFINE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         L     R8,VAR_IDS                     LIST OF ID'S\n         LH    R7,VAR_NBR                     NUMBER OF ID'S\n         ITRACE ID=DEFINE,                    DEFINE VARIABLES         +\n               RDATA1=R8,                     .. FIRST VARIABLE ID     +\n               RDATA2=R7                      .. NUMBER OF VARIABLES\n         CLI   VAR_COMMAND,$VAR_DEFINE_SPECIFIC\n         BE    VAR0110                        YES\n         L     R6,VAR_TABLE                   FIRST VARIABLE\n         B     VAR0120                        ENTER LOOP\nVAR0110  DS    0H\n         BAL   R15,LOC0000                    LOCATE VARIABLE\nVAR0120  DS    0H\n         USING VARDSECT,R6                    DEFINE BASE\n         LA    R1,VARNAME                     VARIABLE'S NAME\n         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST\n         SR    R1,R1                          CLEAR REGISTER\n         ICM   R1,3,VARDISP                   DISPLACEMENT\n         A     R1,VAR_AREA                    PLUS BASE ADDRESS\n         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST\n         LA    R1,VARFORM                     DATA FORMAT\n         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST\n         LA    R1,VARLEN                      VARIABLE LENGTH\n         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST\n         OI    DXD_SPF5,X'80'                 SET END-OF-LIST\n         ITRACE ID=VDEF,                      DEFINING A VARIABLE      +\n               DATA1=VARNAME,                 .. VARIABLE'S NAME       +\n               DATA2=DXD_SPF3                 .. ADDRESS OF DATA\n         LA    R1,DXD_SPF_PARMS               SPF PARM LIST ADDRESS\n         L     R15,AISPLINK                   SPF LINK ADDRESS\n         BALR  R14,R15                        LINK TO SPF\n         LTR   R15,R15                        VDEFINE SUCCESSFUL?\n         BNZ   ERR0020                        NO\nVAR0130  DS    0H\n         CLI   VAR_COMMAND,$VAR_DEFINE_ALL    DEFINE ALL VARIABLES?\n         BE    VAR0140                        YES\n         LA    R8,2(,R8)                      NEXT VARIABLE ID\n         BCT   R7,VAR0110                     LOOP\nVAR0140  DS    0H\n         LA    R6,VARL(,R6)                   NEXT VARIABLE\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BNE   VAR0120                        NO\n         B     EXIT0000                       ALL PROCESSED\n* ------------------------------------------------------------------- *\n*        PROCESS DELETE COMMANDS                                      *\n* ------------------------------------------------------------------- *\nVAR0200  DS    0H\n         LA    R1,VDELETE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         L     R8,VAR_IDS                     LIST OF ID'S\n         LH    R7,VAR_NBR                     NUMBER OF ID'S\n         ITRACE ID=DELETE,                    DEFINE VARIABLES         +\n               RDATA1=R8,                     .. FIRST VARIABLE ID     +\n               RDATA2=R7                      .. NUMBER OF VARIABLES\nVAR0210  DS    0H\n         BAL   R15,LOC0000                    LOCATE VARIABLE\n         ST    R6,DXD_SPF2                    SET VARIABLE NAME ADDRESS\n         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST\n         ITRACE ID=DELETE,                    DELETING A VARIABLE      +\n               DATA1=VARNAME                  .. VARIABLE NAME\n         LA    R1,DXD_SPF_PARMS               PARM LIST'S ADDRESS\n         L     R15,AISPLINK                   SPF ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         LTR   R15,R15                        VDELETE SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         LA    R8,2(,R8)                      NEXT VARIABLE ID\n         BCT   R7,VAR0210                     PROCESS NEXT VARIABLE\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*        PROCESS END-OF-JOB CLEAN UP                                  *\n* ------------------------------------------------------------------- *\nVAR0300  DS    0H\n         ITRACE ID=EOJ                        DELETING ALL VARIABLES\n         LA    R1,VDELETE                     COMMAND'S ADDRESS\n         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST\n         L     R6,VAR_TABLE                   START WITH FIRST VARIABLE\nVAR0310  DS    0H\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BE    EXIT0000                       YES\n         ST    R6,DXD_SPF2                    SET VARIABLE NAME ADDRESS\n         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST\n         ITRACE ID=EOJDEL,                    DELETING A VARIABLE      +\n               DATA1=VARNAME                  .. VARIABLE NAME\n         LA    R1,DXD_SPF_PARMS               PARM LIST'S ADDRESS\n         L     R15,AISPLINK                   SPF ENTRY POINT\n         BALR  R14,R15                        LINK TO SPF\n         LTR   R15,R15                        VDELETE SUCCESSFUL?\n         BNZ   ERR0030                        NO\n         LA    R6,VARL(,R6)                   NEXT VARIABLE\n         B     VAR0310                        PROCESS ALL VARIABLES\n* ------------------------------------------------------------------- *\n*        LOCATE VARIABLES IN VARIABLE TABLE                           *\n* ------------------------------------------------------------------- *\nLOC0000  DS    0H\n         L     R6,VAR_TABLE                   FIRST VARIABLE\nLOC0010  DS    0H\n         CLI   0(R6),X'FF'                    END OF TABLE?\n         BE    ERR0010                        YES.. INVALID VARIABLE ID\n         CLC   VARID,0(R8)                    VARIABLE LOCATED?\n         BE    LOC0020                        YES\n         LA    R6,VARL(,R6)                   NEXT VARIABLE\n         B     LOC0010                        LOOP\nLOC0020  DS    0H\n         BR    R15                            RETURN\n* ------------------------------------------------------------------- *\n*        ERROR ROUTINES                                               *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=NOTFOUND\n         ABEND $U1010,DUMP,,USER\nERR0020  DS    0H\n         ITRACE ID=VDEFFAIL,                                           +\n               RDATA1=R15\n         ABEND $U1011,DUMP,,USER\nERR0030  DS    0H\n         ITRACE ID=VDELFAIL,                                           +\n               RDATA1=R15\n         ABEND $U1012,DUMP,,USER\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVARS)\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVARS        DSECT\n               SUTLSAVE DSECT=NO\nDXD_SPF_PARMS  DS    0A                  ISPF PARM LIST\nDXD_SPF1       DS    A                   PARM 1 ADDRESS\nDXD_SPF2       DS    A                   PARM 2 ADDRESS\nDXD_SPF3       DS    A                   PARM 3 ADDRESS\nDXD_SPF4       DS    A                   PARM 4 ADDRESS\nDXD_SPF5       DS    A                   PARM 5 ADDRESS\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM   TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY      VARDSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         VARREQ    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA    DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY      REGEQU\n         ABCODES\n         END       TSOVARS\n./ ADD NAME=TSOVTAM  0115-09141-09169-1427-00394-00143-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: TSOVTAM                                               *\n*                                                                     *\n*  Perform VTAM functions.                                            *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Common area address                                *\n*             R11  Calling module's base address                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOVTAM  CSECT\nTSOVTAM  AMODE 31\nTSOVTAM  RMODE ANY\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOVTAM,R11                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     VTAM0000\nMODID    DC    CL8'TSOVTAM'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVTAM0000 DS    0H\n         L     R1,COMM_DXD_ADDRESS            DYNAMIC WORK AREA BASE\n         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART\n         ST    R13,4(,R1)                     CHAIN WORK AREA\n         ST    R1,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R1                         COPY WORK AREA ADDRESS\n         USING DXDVTAM,R13                    DEFINE BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    VTAM0010                       YES\n         ITRACE ID=INIT\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\n         MVC   DXD_OPEN(OPEN_L),OPEN_I\n         MVC   DXD_CLOSE(CLOSE_L),CLOSE_I\nVTAM0010 DS    0H\n         ITRACE ID=ENTER\n         L     R7,COMM_IO\n         USING NET_IO,R7                      DEFINE I/O AREA BASE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Process the requested function                               *\n*                                                                     *\n*---------------------------------------------------------------------*\n         CLI   COMM_NET_COMMAND,$NET_INIT     INITIALIZE?\n         BE    INIT0000                       YES\n         L     R10,COMM_ACB                   ACB'S ADDRESS\n         USING IFGACB,R10\n         L     R9,COMM_RPL                    RPL'S ADDRESS\n         USING IFGRPL,R9\n         L     R8,COMM_RPLX                   RPL EXTENSION ADDRESS\n         USING ISTRPL6X,R8                    DEFINE BASE\n         CLI   COMM_NET_COMMAND,$NET_RECEIVE  ISSUE A RECEIVE?\n         BE    RECV0000                       YES\n         CLI   COMM_NET_COMMAND,$NET_SEND     ISSUE A SEND?\n         BE    SEND0000                       YES\n         CLI   COMM_NET_COMMAND,$NET_CLEANUP  CLEANUP?\n         BE    CLEAN000                       YES\n         DC    H'0'                           INVALID COMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        PERFORM INITIALIZATION                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nINIT0000 DS    0H\n         ITRACE ID=INIT\n         GETMAIN RU,                          ACQUIRE STORAGE FOR ACB  +\n               LV=ACB_L,                      .. SIZE                  +\n               LOC=ANY                        ..\n         ST    R1,COMM_ACB                    SAVE ACB'S ADDRESS\n         LR    R10,R1                         COPY ACB ADDRESS\n         MVC   0(ACB_L,R10),ACB_I             INITIALIZE ACB\n         ST    R12,ACBUSER                    SET TSOCOMM ADDRESS\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=EXLSTL,                     .. SIZE                  +\n               LOC=ANY                        ..\n         MVC   0(EXLSTL,R1),EXLSTI            INITIALIZE EXIT LIST\n         ST    R1,COMM_EXLST                  SAVE EXIT LIST'S ADDRESS\n         LA    R0,COMM_APPL_LENGTH            APPLID'S LENGTH ADDRESS\n         ST    R0,ACBAPID                     SET APPLID ADDRESS IN ACB\n         ST    R1,ACBEXLST                    SET EXLST'S ADDRESS\n         USING IFGEXLST,R1                    DEFINE BASE\n         XC    EXLATTNP,EXLATTNP              NO ATTN EXIT\n         MVC   EXLLERP,ALRAD                  SET LERAD EXIT ADDRESS\n         GETMAIN RU,                          ACQUIRE STORAGE FOR RPL  +\n               LV=RPL_L,                      .. SIZE                  +\n               LOC=ANY                        ..\n         LR    R9,R1                          COPY RPL'S ADDRESS\n         ST    R9,COMM_RPL                    SAVE RPL'S ADDRESS\n         MVC   0(RPL_L,R1),RPL_I              INITIALIZE RPL\n         MVC   RPLDACB,COMM_ACB               SET ACB'S ADDRESS\n         GETMAIN RU,                          ACQUIRE STORAGE          +\n               LV=RPLEXT_L,                   .. SIZE                  +\n               LOC=ANY                        ..\n         ST    R1,COMM_RPLX                   SAVE RPL'S ADDRESS\n         LR    R8,R1                          COPY ADDRESS\n         MVC   0(RPLEXT_L,R8),RPLEXT_I        INITIALIZE RPL EXTENSION\n         ST    R8,RPLAAREA                    SET ADDRESS\n* ------------------------------------------------------------------- *\n*        Determine an available ACB name and OPEN the ACB             *\n* ------------------------------------------------------------------- *\n         ITRACE ID=OPENACB                    OPENING ACB\n         LOAD  EP=TSOACB                      LOAD ACB NAMES MODULE\n         LR    R3,R0                          COPY ACB NAMES ADDRESS\nINIT0010 DS    0H\n         ITRACE ID=ACBNAME,                   TRACE EACH OPEN ATTEMPT  +\n               DATA1=0(R3)                    .. TRACE THE NAME\n         MVC   COMM_APPL_NAME,0(R3)           COPY ACB NAME\n         OPEN  ((R10)),                       OPEN ACB                 +\n               MODE=31,                                                +\n               MF=(E,DXD_OPEN)\n         ITRACE ID=OPENRC,                    RETURN CODE FROM OPEN    +\n               RDATA1=R15                     .. TRACE RETURN CODE\n         LTR   R15,R15                        OPEN SUCCESSFUL?\n         BZ    INIT0020                       YES\n         LA    R3,8(,R3)                      NEXT ACB NAME\n         CLI   0(R3),X'FF'                    END OF TABLE?\n         BNE   INIT0010                       NO\n         DELETE EP=TSOACB                     DELETE ACB NAMES MODULE\n         ITRACE ID=NOAPPL\n         LA    R2,MSG01L                      MESSAGE LENGTH\n         GETMAIN RU,                          ACQUIRE STORAGE FOR TPUT +\n               LV=(R2),                       .. SIZE OF AREA          +\n               LOC=BELOW                      .. FROM BELOW THE LINE\n         LR    R3,R1                          COPY STORAGE ADDRESS\n         MVC   0(MSG01L,R3),MSG01             COPY MESSAGE\n         TPUT  (R3),(R2)                      ISSUE TPUT\n         FREEMAIN RU,                         FREE MESSAGE STORAGE     +\n               A=(R3),                                                 +\n               LV=MSG01L\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         B     EXIT0000                       EXIT\nINIT0020 DS    0H\n         OI    COMM_FLAG,$ACB_OPEN            ACB IS OPEN\n         DELETE EP=TSOACB                     DELETE ACB NAMES MODULE\n* ------------------------------------------------------------------- *\n*        Enable our ATTN exit                                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=SETLOGON                   OPENING ACB\n         SETLOGON ACB=(R10),                  ISSUE SETLOGON           +\n               RPL=(R9),                      .. RPL FOR REQUEST       +\n               OPTCD=START                    .. ENABLE EXIT\n         LTR   R15,R15                        SET LOGON SUCCESSFUL?\n         BZ    INIT0030                       YES\n         ITRACE ID=LOGONF,                    SET LOGON FAILED         +\n               RDATA1=R15                     .. TRACE RETURN CODE\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         B     EXIT0000                       EXIT\n* ------------------------------------------------------------------- *\n*        Determine if SUTLSTC is active and allocate a session        *\n* ------------------------------------------------------------------- *\nINIT0030 DS    0H\n         ITRACE ID=INQUIRE\n         MVC   0(NIB_L,R7),NIB_I              INITIALIZE NIB\n         USING ISTDNIB,R7                     DEFINE BASE\n         MVC   NIBSYM,COMM_SUTL_APPL          SET SUTL STC'S APPL NAME\n         INQUIRE RPL=(R9),                    ISSUE INQUIRE            +\n               NIB=(R7),                      .. NIB'S ADDRESS         +\n               OPTCD=APPSTAT                  ..  PARTNER'S STATUS\n         CLI   RPLFDB3,0                      PARTNER READY?\n         BE    INIT0040                       YES\n         ITRACE ID=NOTREADY                   STC IS NOT READY\n         LA    R2,MSG02L                      MESSAGE LENGTH\n         GETMAIN RU,                          ACQUIRE STORAGE FOR TPUT +\n               LV=(R2),                       .. SIZE OF AREA          +\n               LOC=BELOW                      .. FROM BELOW THE LINE\n         LR    R3,R1                          COPY STORAGE ADDRESS\n         MVC   0(MSG02L,R3),MSG02             COPY MESSAGE\n         TPUT  (R3),(R2)                      ISSUE TPUT\n         FREEMAIN RU,                         FREE MESSAGE STORAGE     +\n               A=(R3),                                                 +\n               LV=MSG02L\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         B     EXIT0000                       EXIT\n         DROP  R7\n         USING NET_IO,R7\nINIT0040 DS    0H\n         ITRACE ID=CNOS\n         MVC   RPL6LU,COMM_SUTL_APPL          SET STC'S LU NAME\n         APPCCMD CONTROL=OPRCNTL,             ISSUE APPC COMMAND       +\n               QUALIFY=CNOS,                  .. CNOS                  +\n               RPL=(R9),                      .. RPL'S ADDRESS         +\n               LOGMODE=LU62P                  .. LOGMODE\n         CLC   RPL6RC,X000001                 CNOS ACCEPTED?\n         BE    INIT0050                       YES\n         ITRACE ID=CNOSFAIL,                  CNOS FAILED              +\n               DATA1=RPL6RC                   .. TRACE RETURN CODES\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         B     EXIT0000                       AND EXIT\nINIT0050 DS    0H\n         ITRACE ID=ALLOC                      ALLOCATE A SESSION\n         MVC   0(FMH5L,R7),FMH5               COPY FMH5 TO I/O AREA\n         APPCCMD CONTROL=ALLOC,               ISSUE APPC COMMAND       +\n               QUALIFY=ALLOCD,                .. ALLOCATE A SESSION    +\n               RPL=(R9),                      .. RPL'S ADDRESS         +\n               AREA=(R7),                     .. FMH'S ADDRESS         +\n               RECLEN=FMH5L,                  .. FMH'S LENGTH          +\n               LOGMODE=LU62P                  .. LOGMODE\n         OC    RPL6RC,RPL6RC                  ALL ZEROS?\n         BZ    INIT0060                       YES\n         ITRACE ID=ALOCFAIL,                  ALLOCATE FAILED          +\n               DATA1=RPL6RC                   .. TRACE RETURN CODES\n         OI    COMM_FLAG,$ABORT               SET ABORT FLAG\n         B     EXIT0000                       AND EXIT\nINIT0060 DS    0H\n         ITRACE ID=CONVID,                                             +\n               DATA1=RPL6CNVD                 CONVERSATION ID\n         MVC   COMM_CID,RPL6CNVD              SAVE CONVERSATION ID\n         OI    COMM_FLAG,$SESS_ALLOCATED      SESSION IS ALLOCATED\n         B     EXIT0000\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a RECEIVE                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nRECV0000 DS    0H\n         ITRACE ID=RECEIVE                    ISSUE A RECEIVE\n         L     R4,=A(32760)                   MAXIMUM I/O AREA SIZE\n         APPCCMD CONTROL=RECEIVE,             ISSUE A RECEIVE          +\n               QUALIFY=SPEC,                  .. SPECIFIC CONVERSATION +\n               RPL=(R9),                      .. RPL'S ADDRESS         +\n               FILL=LL,                       .. ONLY 1 LOGICAL RECORD +\n               AREA=(R7),                     .. I/O AREA ADDRESS      +\n               AREALEN=(R4),                  .. I/O AREA SIZE         +\n               CONMODE=CS,                    .. CONTINUE SPECIFIC     +\n               CONVID=COMM_CID,               .. CONVERSATION ID       +\n               OPTCD=SYN                      .. SYNCHRONOUS\n         OC    RPL6RC,RPL6RC                  SUCCESSFUL?\n         BZ    EXIT0000                       YES\n         ITRACE ID=RECVFAIL,                  RECEIVE HAS FAILED       +\n               DATA1=RPL6RC\n         DC    H'0'\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Issue a SEND                                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\nSEND0000 DS    0H\n         ITRACE ID=SEND                       ISSUE A SEND\n         SR    R4,R4                          CLEAR REGISTER\n         ICM   R4,3,NET_LENGTH                LENGTH TO SEND\n         APPCCMD CONTROL=SEND,                ISSUE APPC CMD           +\n               QUALIFY=DATA,                  .. SEND DATA             +\n               RPL=(R9),                      .. RPL ADDRESS           +\n               AREA=(R7),                     .. I/O AREA              +\n               RECLEN=(R4),                   .. LENGTH OF DATA        +\n               CONMODE=CS,                    .. CONTINUE SPECIFIC     +\n               CONVID=COMM_CID,               .. CONVERSATION ID       +\n               OPTCD=SYN                      .. SYNCHRONOUS\n         OC    RPL6RC,RPL6RC                  SEND SUCCESSFUL?\n         BZ    EXIT0000                       YES\n         ITRACE ID=SENDFAIL,                  SEND HAS FAILED          +\n               DATA1=RPL6RC\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLEAN000 DS    0H\n         ITRACE ID=DEALLOC                    DEALLOCATING THE SESSION\n         APPCCMD CONTROL=DEALLOC,             DE-ALLOCATE A SESSION    +\n               QUALIFY=FLUSH,                 .. FLUSH BUFFERS         +\n               RPL=(R9),                      .. RPL'S ADDRESS         +\n               CONVID=COMM_CID                .. CONVERSATION ID\n         OC    RPL6RC,RPL6RC                  DE-ALLOCATE SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         TM    COMM_FLAG,$ACB_OPEN            ACB OPENED?\n         BNO   CLEAN010                       NO\n         CLOSE ((R10)),                       CLOSE THE ACB            +\n               MODE=31,                                                +\n               MF=(E,DXD_CLOSE)\nCLEAN010 DS    0H\n         ITRACE ID=FREEACB,                   FREEMAIN ACB             +\n               RDATA1=R10                     .. ACB'S ADDRESS\n         FREEMAIN RU,                         FREEMAIN ACB             +\n               A=(R10),                                                +\n               LV=ACB_L\n         ITRACE ID=FREERPL,                   FREEMAIN RPL             +\n               RDATA1=R9                      .. RPL'S ADDRESS\n         FREEMAIN RU,                         FREEMAIN RPL             +\n               A=(R9),                                                 +\n               LV=RPL_L\n         ITRACE ID=FREERPLX,                  FREEMAIN RPLX            +\n               RDATA1=R8\n         FREEMAIN RU,                                                  +\n               A=(R8),                                                 +\n               LV=RPLEXT_L\n         L     R1,COMM_EXLST                  EXLST'S ADDRESS\n         ITRACE ID=FREEXLST,                  FREEMAIN EXLST           +\n               RDATA1=R1                      .. EXLST'S ADDRESS\n         FREEMAIN RU,                                                  +\n               A=(R1),                                                 +\n               LV=EXLSTL\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    CALLER'S R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDVTAM)            DISPLACEMENT TO WORK AREA\n\nOPEN_I   OPEN  (*,INPUT),            OPEN PARM LIST                    +\n               MODE=31,                                                +\n               MF=L\nOPEN_L   EQU   *-OPEN_I\n\nCLOSE_I  CLOSE *,                    CLOSE PARM LIST                   +\n               MODE=31,                                                +\n               MF=L\nCLOSE_L  EQU   *-CLOSE_I\n\nACB_I    ACB   AM=VTAM,              GENERATE VTAM ACB                 +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACB_L    EQU   *-ACB_I\nEXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLSTL   EQU   *-EXLSTI\nRPL_I    RPL   AM=VTAM,              GENERATE VTAM RPL                 +\n               AAREA=RPLEXT_I\nRPL_L    EQU   *-RPL_I\nNIB_I    NIB   MODE=RECORD,          GENERATE VTAM NIB                 +\n               NAME=SUTL\nNIB_L    EQU   *-NIB_I\nRPLEXT_I ISTRPL6\nRPLEXT_L EQU   *-RPLEXT_I\n\nX000001  DC    X'00000001'\n\nMSG01    DC    C'TSOVTAM01E * All user interface APPLID''s are busy, tr+\n               y later'\nMSG01L   EQU   *-MSG01\nMSG02    DC    C'TSOVTAM02E * SUTL is not active'\nMSG02L   EQU   *-MSG02\n\n         FMH5  DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDVTAM   DSECT\n          SUTLSAVE DSECT=NO\nDXD_OPEN  DS    0A,(OPEN_L)X\nDXD_CLOSE DS    0A,(CLOSE_L)X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ISTDNIB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO    DSECT=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      TSOVTAM\n./ ADD NAME=TSOXTR   0102-09160-09169-1427-00094-00094-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  MODULE NAME: TSOXTR - Display system link link (XTR)               *\n*                                                                     *\n*  Function:                                                          *\n*   Provide a display of the system link list (XTR).                  *\n*                                                                     *\n*  Sub-commands:                                                      *\n*   None.                                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOXTR   CSECT\nTSOXTR   AMODE 31\nTSOXTR   RMODE ANY\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        SET BASE REGISTER\n         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE\n         USING TSOXTR,R11                     DEFINE BASE\n         B     XTR0000\nMODID    DC    CL8'TSOXTR'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nXTR0000  DS    0H\n         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS\n         A     R2,DXDSTART                    PLUS DISPLACEMENT\n         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA\n         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING DXDXTR,R13                     DEFINE WORK AREA BASE\n         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    XTR0010                        YES\n         ITRACE ID=ENTRY\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nXTR0010  DS    0H\n         TM    XTR_FLAG,$XTR_ON               EXTERNAL TRACE ON?\n         BO    XTR0020                        YES\n         ITRACE ID=ON\n         OI    XTR_FLAG,$XTR_ON               TURN ON XTR\n         MVC   COMM_MSG(MSG01_L),MSG01\n         B     EXIT0000\nXTR0020  DS    0H\n         ITRACE ID=OFF\n         NI    XTR_FLAG,255-$XTR_ON           TURN OFF XTR\n         MVC   COMM_MSG(MSG02_L),MSG02\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS   0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    RESTORE R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         BR    R14                            RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSTART DC    Q(DXDXTR)                      DISPLACEMENT TO WORK AREA\nMSG01    DS    0C\n         DC    CL11'TSOXTR01I'\n         DC    C'External trace on'\nMSG01_L  EQU   *-MSG01\nMSG02    DS    0C\n         DC    CL11'TSOXTR02I'\n         DC    C'External trace off'\nMSG02_L  EQU   *-MSG02\n         LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDXTR   DSECT\n         SUTLSAVE DSECT=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         TSOCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         NETIO   DSECT=YES\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         IHAPSA  DSECT=YES,LIST=NO\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\n         CVT     DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY    REGEQU\n         COPY    ATTR\n         END     TSOXTR\n./ ADD NAME=VTAMSUB  0109-09148-09173-0915-00218-00242-00000-SOURCE\n         COPY  OPTIONS\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Module name: VTAMSUB                                               *\n*                                                                     *\n*  VTAM subtask                                                       *\n*                                                                     *\n*  At entry:                                                          *\n*             R15  Entry point address                                *\n*             R14  Return address                                     *\n*             R13  Register save area address                         *\n*             R12  Common area address                                *\n*             R11  Calling module's base address                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTAMSUB  CSECT\nVTAMSUB  AMODE 31\nVTAMSUB  RMODE ANY\n         USING STCCOMM,R12                    DEFINE COMMON AREA BASE\n         USING VTAMSUB,R11                    DEFINE BASE\n         STM   R14,R12,12(R13)                SAVE REGISTERS\n         LR    R11,R15                        COPY BASE\n         B     VTAM0000\nMODID    DC    CL8'VTAMSUB'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\nVTAM0000 DS    0H\n         L     R12,0(,R1)                     STCCOMM ADDRESS\n         ST    R11,AVTAMSUB\n         GETMAIN RU,                                                   +\n               LV=WORK_L,                                              +\n               LOC=ANY\n         LR    R2,R1\n         LR    R0,R1\n         LA    R1,WORK_L\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14\n         ST    R13,4(,R2)                     CHAIN WORK AREA\n         ST    R2,8(,R13)                     CHAIN WORK AREA\n         LR    R13,R2                         COPY WORK AREA ADDRESS\n         USING WORK,R13                       DEFINE BASE\n         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?\n         BE    VTAM0010                       YES\n         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED\nVTAM0010 DS    0H\n         ITRACE ID=ENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        OPEN ACB and issue SETLOGON                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0000 DS    0H\n         MVC   WORK_ACB(ACB_L),ACB_I          INITIALIZE ACB\n         MVC   WORK_RPL(RPL_L),RPL_I          INITIALIZE RPL\n         MVC   WORK_RPLEXT(RPLEXT_L),RPLEXT_I INITIALIZE RPLEXT\n         MVC   WORK_EXLST(EXLST_L),EXLST_I    INITIALIZE EXLST\n         MVC   WORK_OPEN(OPEN_L),OPEN_I       INITIALIZE OPEN\n         MVC   WORK_CLOSE(CLOSE_L),CLOSE_I    INITIALIZE CLOSE\n         LA    R9,WORK_ACB                    COPY ADDRESS\n         ST    R9,COMM_ACB                    SAVE ACB ADDRESS\n         USING IFGACB,R9\n         ST    R12,ACBUSER                    PUT COMM ADDR IN ACB\n         LA    R8,WORK_RPL\n         USING IFGRPL,R8\n         ST    R9,RPLDACB                     SET ACB ADDRESS IN RPL\n         LA    R7,WORK_RPLEXT                 COPY ADDRESS\n         ST    R7,RPLAAREA                    SET ADDRESS IN RPL\n         LA    R1,WORK_EXLST\n         ST    R1,COMM_EXLST                  SAVE EXIT LIST ADDRESS\n         ST    R1,ACBEXLST                    SET EXLST ADDR IN ACB\n         USING IFGEXLST,R1                    DEFINE EXIT LIST BASE\n         MVC   EXLATTNP,AATTN                 SET ATTN EXIT ADDRESS\n         MVC   EXLLERP,ALRAD                  SET LERAD EXIT ADDRESS\n         LA    R1,COMM_APPL_LENGTH            OUR APPL NAME ADDRESS\n         ST    R1,ACBAPID                     SET APPLID ADDR IN ACB\n         ITRACE ID=OPENACB\n         OPEN  ((R9)),                        OPEN THE ACB             +\n               MODE=31,                                                +\n               MF=(E,WORK_OPEN)\n         MVC   PRT_MSGID(MSG01L),MSG01        ACB IS OPEN\n         BAL   R3,PRT0000                     PRINT MESSAGE\n         ITRACE ID=SETLOGON\n         SETLOGON ACB=(R9),                   ISSUE SETLOGON           +\n               RPL=(R8),                      .. RPL ADDRESS           +\n               OPTCD=START                    .. ENABLE ATTN EXIT\n         LTR   R15,R15                        SUCCESSFUL?\n         BNZ   ERR0010                        NO\n         MVC   PRT_MSGID(MSG02L),MSG02        ATTN EXIT IS ENABLED\n         BAL   R3,PRT0000                     PRINT MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         WAIT  ECB=VTAM_WORK_ECB              WAIT FOR TERMINATION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=CLEAN_UP\n         CLOSE ((R9)),                        CLOSE THE ACB            +\n               MODE=31,                                                +\n               MF=(E,WORK_CLOSE)\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         ITRACE ID=LOGONERR,                                           +\n               RDATA1=R15\n         STH   R15,COMM_DWORD\n         MVC   PRT_MSGID(MSG03L),MSG03\n         UNPK  PRT_MSGID+(MSG03_RC-MSG03)(5),COMM_DWORD(3)\n         TR    PRT_MSGID+(MSG03_RC-MSG03)(L'MSG03_RC),HEXCHAR\n         MVI   PRT_MSGID+(MSG03_RC-MSG03)+4,C' '\n         BAL   R3,PRT0000                     PRINT MESSAGE\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         ITRACE ID=PRINT\n         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)\n         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS\n         L     R15,APRTQ                      QUEUEING ENTRY POINT\n         BALR  R14,R15                        A REQUEST TO QUEUE\n         BR    R3                             COMPLETE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                    CALLER'S R13\n         LM    R14,R12,12(R13)                RESTORE REGISTERS\n         SR    R15,R15                        RETURN CODE\n         BR    R14                            RETURN TO CALLER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nACB_I    ACB   AM=VTAM,                                                +\n               MACRF=LOGON,                                            +\n               EXLST=*,                                                +\n               APPLID=*\nACB_L    EQU   *-ACB_I\nEXLST_I  EXLST AM=VTAM,                                                +\n               ATTN=*,                                                 +\n               LERAD=*\nEXLST_L  EQU   *-EXLST_I\nRPL_I    RPL   AM=VTAM,                                                +\n               AAREA=RPLEXT_I\nRPL_L    EQU   *-RPL_I\nRPLEXT_I ISTRPL6\nRPLEXT_L EQU   *-RPLEXT_I\nOPEN_I   OPEN  (*,INPUT),                                              +\n               MODE=31,                                                +\n               MF=L\nOPEN_L   EQU   *-OPEN_I\nCLOSE_I  CLOSE (*),                                                    +\n               MODE=31,                                                +\n               MF=L\nCLOSE_L  EQU   *-CLOSE_I\n\nMSG01    DS    0C\n         DC    CL11'STCMAIN06I'\n         DC    C'ACB is OPEN'\nMSG01L   EQU   *-MSG01\n\nMSG02    DS    0C\n         DC    CL11'STCMAIN07I'\n         DC    C'ATTN exit is enabled'\nMSG02L   EQU   *-MSG02\n\nMSG03    DS    0C\n         DC    CL11'STCMAIN03E'\n         DC    C'SETLOGON failed, RC='\nMSG03_RC DC    CL8' '\n         DC    C' '\nMSG03L   EQU   *-MSG03\n\nHEXCHAR  EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWORK        DSECT\n            SUTLSAVE DSECT=NO\nWORK_ACB    DS       0F,(ACB_L)X\nWORK_RPL    DS       0F,(RPL_L)X\nWORK_RPLEXT DS       0F,(RPLEXT_L)X\nWORK_EXLST  DS       0F,(EXLST_L)X\nWORK_OPEN   DS       0F,(OPEN_L)X\nWORK_CLOSE  DS       0F,(CLOSE_L)X\n            PRTBLOK  DSECT=NO\nWORK_L      EQU      *-WORK\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         STCCOMM  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGACB   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGRPL   AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IFGEXLST AM=VTAM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY     REGEQU\n         ABCODES\n         END      VTAMSUB\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT813/FILE813.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT813", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}