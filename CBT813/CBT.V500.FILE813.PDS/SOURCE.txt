./ ADD NAME=$CHANGES 0102-09162-09170-1349-00015-00012-00000-SOURCE
June   2009  Nearly total overhaul...
  Changed most labels in the data areas to longer more meaningful names
  SUTL now requires the HLASM (or later for assembly)
  Added option to use TCP/IP or VTAM for network communication
  Changed console module so it uses CONSNAME rather than CONSID on WTO's
  Fixed I/O count in ACT
  Data on the ACT display can now be refreshed by pressing ENTER.
     Previously, this would cause the display to scroll back to the top.
     Now the user can scroll down and refresh the display
  Added IPA data to IPL info display
  Eliminated UCB info display
  Add Unix process (PS) display
  Add Unix filesystem (FS) display
  Corrected numerous logic errors in shutdown/clean up code
  Corrected too many errors in the comments to list them all
./ ADD NAME=$CONSOLE 0100-09161-09161-1111-00007-00007-00000-SOURCE
1             Console Commands
0You may communicate with the STC from the system console via the MVS
 MODIFY (F) command.
0There are only two commands that have the same function:
0  ACTIVE        lists the active SUTL users
0  USERS         lists the active SUTL users
0You may shutdown the STC by using the MVS STOP (P) command.
./ ADD NAME=$DEBUG   0101-09170-09170-1059-00009-00052-00000-SOURCE
 As an aid in debugging, the STC and the TSO/SPF parts both use an
 internal wrap-around trace table.  Each trace entry contains the TCB
 address, CSECT suffix, and an ID.  Trace entries may also include one
 or two 8 byte data items.  Label TRCURR is a full word that always
 has the address of the last trace entry used.  Eyecatchers (1STX, LAST,
 and CURR) are assembled into the "common area" and can be searched for
 in a dump (I usually search for 1STX because I haven't found anything
 else that also uses this string).  All modules use register 11 as base,
 and register 12 is always the address of the "common area".
./ ADD NAME=$DOC     0101-09161-09170-1057-00092-00124-00000-SOURCE
1             System Utility (SUTL)
0SUTL is a network application that allows a TSO user to obtain
 information about executing jobs, the APF list, IPL date/time/SYSRES,
 link list, etc.  Most of this information is usually available via
 other utilities already in use, so why bother going to the trouble of
 're-inventing' this wheel and adding network over-head in the process?
 Being a network application means that a TSO user can get info from a
 system that they are not logged on to.  If you have multiple
 processors or LPARs, you can "watch" executing jobs on any of the
 systems no matter which system you are logged on to.
0SUTL consists of two basic components, (1) a data collector that would
 probably be best to run as a started task (STC) and (2) the TSO/SPF
 code that sends requests to the data collector and displays the data.
0The data collector (STC) should be run on each system.
0The data collector does not require APF authoriztion.
0In order for the data collector to obtain info for all active
 "unix" processes, it needs to run with UID 0.
0If using VTAM, each data collector and each active TSO user will
 require a VTAM APPL.  These APPL IDs will need to be defined to
 VTAM and the IDs used by the TSO users will need to be added to the
 source for member TSOACB before assembling/linking SUTL.
0If using TCP/IP, you will need to decide which PORT number the STCs
 should BIND and LISTEN on.
1             Installing SUTL
0 1Allocate libraries:
                     DCB                         3380 tracks   Dir
    EXEC         RECFM=FB,LRECL=80,BLKSIZE=3120       1          1
    ISPPLIB      RECFM=FB,LRECL=80,BLKSIZE=3120       2          2
    JCLLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       2          5
    MACLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       5         10
    OBJECT       RECFM=FB,LRECL=80,BLKSIZE=3120      10          5
    SOURCE       RECFM=FB,LRECL=80,BLKSIZE=3120      15         10
0     If you want to keep SUTL in its own LOADLIB:
    LOADLIB      RECFM=U,BLKSIZE=6144                 5          5
0 2If using VTAM, edit member TSOACB in the SOURCE library:
     .  Code one DC statement for each APPL id available for TSO users.
0 3Edit member ASM in the JCL library:
     .  Add a valid JOB card.
     .  Change the MACLIB DSN to the name you used in STEP 1.
     .  Change the SOURCE DSN to the name you used in STEP 1.
     .  Change the OBJECT DSN to the name you used in STEP 1.
0 4Submit member ASM to assemble all the SUTL modules.
0 5Edit member LINK in the JCL library:
     .  Add a valid JOB card.
     .  Change the OBJECT DSN to the name you used in STEP 1.
     .  Change the LOADLIB DSN to the name of an existing LOADLIB or
        to the name you used in STEP 1.
0 6Submit member LINK to link edit the SUTL load modules.
0 7If using VTAM, add APPL ids to VTAM
   For example:
     SUTL     APPL  APPC=YES,VPACING=7             for the STC
     SUTLU1   APPL  ACBNAME=SUTLU1,APPC=YES        for TSO users
     SUTLU2   APPL  ACBNAME=SUTLU2,APPC=YES             .
     SUTLU3   APPL  ACBNAME=SUTLU3,APPC=YES             .
0 8Edit member SUTLPARM in the JCL library
     . If using VTAM, add an APPLID statement using ID from step 7.
     . If using TCP/IP, add a PORT statement.
0 9Add JCL member SUTLSTC to a proclib.
010If you use RACF or some other security system, permit the STC to
   at least READ level access to the JCL library (for the parm member).
011If using VTAM, copy EXEC member SUTLVTAM to a REXX exec library
   available to your users.  Rename the the EXEC from SUTLVTAM to SUTL.
   Edit the SUTL EXEC.  Add statements to 'equate' system names to
   the APPLID used by the SUTLSTC on that system.

   If using TCP/IP, copy EXEC member SUTLIP to a REXX exec library
   available to your users.  Rename the EXEC from SUTLIP to SUTL.
   Edit the SUTL EXEC.  Add statements to 'equate' system names to
   the HOSTNAME for that system.
012Copy EXEC member SUTL1 to the same library used in step 11.
   Edit EXEC member SUTL1.
   Change the DSN for the ISPPLIB.
013Start up the STC.
014You should be able to use SUTL by entering "SUTL" or "SUTL system"
   from SPF option 6.
1             Console Commands
0You may communicate with the STC from the system console via the MVS
 MODIFY (F) command.
0There are only two commands that have the same function:
0  ACTIVE        lists the active SUTL users
0  USERS         lists the active SUTL users
0You may shutdown the STC by using the MVS STOP (P) command.
1             Program description
0As an aid in debugging, the STC and the TSO/SPF parts both use an
 internal wrap-around trace table.  Each trace entry contains the TCB
 address, CSECT suffix, and an ID.  Trace entries may also include one
 or two 8 byte data items.  Label TRCURR is a full word that always
 has the address of the last trace entry used.  Eyecatchers (1STX, LAST,
 and CURR) are assembled into the "common area" and can be searched for
 in a dump (I usually search for 1STX because I haven't found anything
 else that also uses this string).  All modules use register 12 as base,
 and register 11 is always the address of the "common area".
./ ADD NAME=$INSTALL 0100-09161-09161-1108-00052-00052-00000-SOURCE
1             Installing SUTL
0 1 Allocate libraries:
                     DCB                         3380 tracks   Dir
    EXEC         RECFM=FB,LRECL=80,BLKSIZE=3120       1          1
    ISPPLIB      RECFM=FB,LRECL=80,BLKSIZE=3120       2          2
    JCLLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       2          5
    MACLIB       RECFM=FB,LRECL=80,BLKSIZE=3120       5         10
    OBJECT       RECFM=FB,LRECL=80,BLKSIZE=3120      10          5
    SOURCE       RECFM=FB,LRECL=80,BLKSIZE=3120      15         10
0     If you want to keep SUTL in its own LOADLIB:
    LOADLIB      RECFM=U,BLKSIZE=6144                 5          5
0 2 If using VTAM, edit member TSOACB in the SOURCE library:
     .  Code one DC statement for each APPL id available for TSO users.
0 3 Edit member ASM in the JCL library:
     .  Add a valid JOB card.
     .  Change the MACLIB DSN to the name you used in STEP 1.
     .  Change the SOURCE DSN to the name you used in STEP 1.
     .  Change the OBJECT DSN to the name you used in STEP 1.
0 4 Submit member ASM to assemble all the SUTL modules.
0 5 Edit member LINK in the JCL library:
     .  Add a valid JOB card.
     .  Change the OBJECT DSN to the name you used in STEP 1.
     .  Change the LOADLIB DSN to the name of an existing LOADLIB or
        to the name you used in STEP 1.
0 6 Submit member LINK to link edit the SUTL load modules.
0 7 If using VTAM, add APPL ids to VTAM
    For example:
     SUTL     APPL  APPC=YES,VPACING=7             for the STC
     SUTLU1   APPL  ACBNAME=SUTLU1,APPC=YES        for TSO users
     SUTLU2   APPL  ACBNAME=SUTLU2,APPC=YES             .
     SUTLU3   APPL  ACBNAME=SUTLU3,APPC=YES             .
0 8 Edit member SUTLPARM in the JCL library
     . If using VTAM, add an APPLID statement using ID from step 7.
     . If using TCP/IP, add a PORT statement.
0 9 Add JCL member SUTLSTC to a proclib.
010 If you use RACF or some other security system, permit the STC to
    at least READ level access to the JCL library (for the parm member).
011 If using VTAM, copy EXEC member SUTLVTAM to a REXX exec library
    available to your users.  Rename the the EXEC from SUTLVTAM to SUTL.
    Edit the SUTL EXEC.  Add statements to 'equate' system names to
    the APPLID used by the SUTLSTC on that system.

    If using TCP/IP, copy EXEC member SUTLIP to a REXX exec library
    available to your users.  Rename the EXEC from SUTLIP to SUTL.
    Edit the SUTL EXEC.  Add statements to 'equate' system names to
    the HOSTNAME for that system.
012 Copy EXEC member SUTL1 to the same library used in step 11.
    Edit EXEC member SUTL1.
    Change the DSN for the ISPPLIB.
013 Start up the STC.
014 You should be able to use SUTL by entering "SUTL" or "SUTL system"
    from SPF option 6.
./ ADD NAME=$TCPIP   0101-09161-09161-1445-00019-00043-00000-SOURCE
0At start up the main task will have attached a TCP/IP subtask.
0The main task will then enter a WAIT.
0The TCP/IP subtask will have BOUND to the PORT given in the start
 up parameters and will have a ACCEPT pending.  In TCP/IP lingo,
 this means it is "listening" on the PORT.
0When a user "logs on", TCP/IP creates a SOCKET and POSTs the ECB
 used on the ACCEPT.  This 'wakes up' the TCP/IP subtask.  The TCP/IP
 subtask will build a USERBLOK and add it to the users chain.  The
 TCP/IP subtask will then POST the ECB the main task is WAITing on.
 The main task will scan the user block chain and find the new user.
 The main task will attach a subtask (STCUSER).  Each user has their
 own subtask.  The TCP/IP subtask then waits for the user subtask to
 initialize.  Once the new subtask has its own TCP/IP environment
 established, it notifies the TCP/IP subtask that it is ready to
 take ownership of the connection to the user.  The TCP/IP subtask
 will issue a GIVESOCKET.  The user subtask will issue a TAKESOCKET.
 Once the GIVESOCKET/TAKESOCKET process has completed, the data flow
 is directly between the TSO user and the user subtask.  The TCP/IP
 subtask is no longer involved.
./ ADD NAME=$TODO    0102-09161-09162-0742-00017-00012-00000-SOURCE
Add a function to display ENQ (GRS) info
. for a given job
. for a given resource
. only those that have contention

Display console info?
. This does not mean I want to display what is on a console,
  just the status of the consoles.  That is their roll mode,
  how many buffers are queued, other info..?

Add a function for displaying the low and high addresess of
  SQA, CSA, etc

Save some SPF variables to the user's profile via VGET/VPUT
For the ACT function the type of address spaces, prefix, user


./ ADD NAME=$VTAM    0101-09161-09170-1050-00030-00026-00000-SOURCE
@During start up, if the start up parms include an APPL statement,
 the main task will ATTACH the VTAM subtask.  The VTAM subtask
 will OPEN an ACB using the specified APPL name and enable its
 ATTNENTION exit.
0Once the STC has completed inialization, it enters a WAIT.
0When a user "logs on", the ATTENTION exit is driven.  The ATTENTION
 exit allocates a control block (USERBLOK) and wakes up (POSTs) the
 main task.  The main task scans the USERBLOKs and will find the new
 USERBLOK.  The main task will ATTACH a subtask (module USERSTC).
 Each user will have his/her own subtask.  The main task will then
 return to its WAIT.  The user subtask (STCUSER) will issue a RECEIVE
 and WAIT for the TSO user (module SUTLTSO) to send it a request for
 info.  When the TSO user does request info, STCUSER determines what
 function the user is requesting and passes control to the routines
 that process that function.  When the function processor completes,
 STCUSER then issues a VTAM SEND to return the data to the TSO user,
 then issues another RECEIVE and WAITs for the next request from the
 TSO user.  When the user "logs off", the ATTENTION exit is driven
 again.  The ATTENTION exit will flag the status in the USERBLOK to
 indicate the user has broken the session and wakes up (POSTs) the
 main task.  The main task will scan the USERBLOKs and find the "lost"
 session.  The main task will wake up (POST) the user's subtask.  The
 user subtask (STCUSER) will find that the session is gone and will
 perform "clean-up" and terminate.  When the user subtask terminates,
 the main task will DETACH it, and then return to its WAIT.
0Since the main task is involved only when users "log on" or "log off",
 the CPU utilization of the main task is extremely low.  Also since each
 user has their own subtask, each will be independently dispatchable.
 If your processor has multiple CPUs, SUTL can process multiple user
 requests concurrently.
./ ADD NAME=STCACT   0108-09139-09173-0839-00290-00290-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCACT                                                *
*                                                                     *
*  Function:                                                          *
*   Collect information for the active regions display.               *
*   The user may select regions to be displayed by 3 different        *
*   criteria 1) the region type (JOB, STC, or TSU), 2) by job name    *
*   prefix, and 3) user id prefix.                                    *
*                                                                     *
*   Data returned is: CPU utilization percentage, number of regions,  *
*         and per region a) job name, b) step name, c) proc step name,*
*         d) region type, e) swap status, f) number of real page      *
*         frames, g) number of I/O's, h) TCB time, and i) SRB time.   *
*                                                                     *
*   The number of regions that can be returned is limited by the I/O  *
*   area size (VTAM limits the length to 32767).  If the number of    *
*   regions that matches the search criteria exceeds the I/O area     *
*   size, the return code in the I/O area will be set to 4 to inform  *
*   the TSO user that the data was truncated.                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
STCACT   CSECT
STCACT   AMODE 31
STCACT   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMM AREA BASE
         USING STCACT,R11                     DEFINE PROGRAM BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     ACT0000
MODID    DC    CL8'STCACT'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
ACT0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA BASE
         USING DXDACT,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    ACT0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
* ------------------------------------------------------------------- *
*              BUILD DATA                                             *
* ------------------------------------------------------------------- *
ACT0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         XC    NET_RC,NET_RC                  SET RC TO ZERO
         L     R5,CVTPTR                      CVT ADDRESS
         S     R5,=A(CVTMAP-CVTFIX)           CVT PREFIX
         USING CVTFIX,R5                      DEFINE BASE
         L     R1,CVTOPCTP                    RMCT ADDRESS FROM CVT
         L     R1,4(,R1)                      CCT ADDRESS FROM RMCTCCT
         MVC   ACT_CPU_BUSY,102(R1)           CPU UTILIZATION
         XC    ACT_NBR_REGIONS,ACT_NBR_REGIONS                          ETURNED
         L     R1,CVTASVT                     ASVT ADDRESS FROM CVT
         USING ASVT,R1                        DEFINE BASE
         L     R3,ASVTMAXU                    MAXIMUM NUMBER OF ENTRIES
         LA    R4,ASVTFRST                    FIRST ENTRY
         LA    R7,NET_HEADER_L+ACT_HEADER_L   LENGTH TO THIS POINT
         LA    R8,ACT_REGION                  FIRST REGION IN OUTPUT
         USING ACT_REGION,R8                  DEFINE BASE
ACT0020  DS    0H
         ICM   R2,15,0(R4)                    ASCB FROM ASVT ENTRY
         BM    ACT0220                        ADDRESS SPACE NOT IN USE
         USING ASCB,R2                        DEFINE ASCB BASE
         XC    ACT_REGION(ACT_REGION_L),ACT_REGION
         MVC   ACT_ASID,ASCBASID              ASID
         MVC   ACT_NAME,STARTING              ASSUME 'STARTING'
         ICM   R6,15,ASCBJBNI                 JOB NAME ADDRESS
         BZ    ACT0030                        NO JOB NAME
         MVC   ACT_NAME,0(R6)                 COPY JOB NAME
         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?
         BH    ACT0050                        YES
         S     R6,=A(CHKEY-CSCB)              START OF CSCB
         B     ACT0050                        DETERMINE TYPE
ACT0030  DS    0H
         ICM   R6,15,ASCBJBNS                 STC NAME ADDRESS
         BZ    ACT0220                        NO STC NAME
         MVC   ACT_NAME,0(R6)                 COPY STC NAME
         CLI   ACT_NAME,C'*'                  MASTER SCHEDULER?
         BE    ACT0040                        YES
         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?
         BH    ACT0050                        YES
         S     R6,=A(CHCLS-CSCB)              START OF CSCB
         B     ACT0060
ACT0040  DS    0H
         SR    R6,R6                          NO CSCB
         B     ACT0060
ACT0050  DS    0H
         S     R6,=A(CHNAME-CSCX)             START OF CSCX
         USING CSCX,R6                        DEFINE BASE
         L     R6,CHCSCBP                     CSCB ADDRESS FROM CSCX
         DROP  R6
ACT0060  DS    0H
         USING CSCB,R6                        DEFINE BASE
         L     R1,ASCBOUCB                    OUCB'S ADDRESS FROM ASCB
         USING OUCB,R1                        DEFINE BASE
         ICM   R15,15,ASCBJBNI                BATCH JOB?
         BNZ   ACT0110                        YES
         TM    OUCBYFL,OUCBSTT                STARTED TASK?
         BO    ACT0070                        YES
         TM    OUCBYFL,OUCBLOG                TSO USER?
         BO    ACT0080                        YES
         TM    OUCBYFL,OUCBMNT                MOUNT?
         BO    ACT0090                        YES
         ABEND $U0009,DUMP,,USER              SHOULD NEVER HAPPEN
ACT0070  DS    0H
         ITRACE ID=STC
         MVI   ACT_REGION_TYPE,$ACT_STC       STARTED TASK
         B     ACT0100
ACT0080  DS    0H
         ITRACE ID=TSOUSER
         MVI   ACT_REGION_TYPE,$ACT_TSO       TSO USER
         CLI   CVTPRODI+3,C'3'                HIGHER THAN V3?
         BH    ACT0100                        YES
         LA    R6,8(,R6)                      START OF CSCB
         B     ACT0100
ACT0090  DS    0H
         ITRACE ID=MOUNT
         MVI   ACT_REGION_TYPE,$ACT_MOUNT     MOUNT
ACT0100  DS    0H
         LTR   R6,R6                          CSCB PRESENT?
         BZ    ACT0130                        NO
         CLI   CHKEY,X'40'                    STEP NAME PRESENT?
         BNH   ACT0120                        NO
         MVC   ACT_STEP,CHKEY                 SET STEP NAME
         TM    OUCBYFL,OUCBLOG                TSO USER?
         BNO   ACT0120                        NO
         CLI   CHCLS,X'40'                    PROC PRESENT?
         BNH   ACT0130                        NO
         MVC   ACT_PROC_STEP,CHCLS            COPY PROC NAME
         B     ACT0130
ACT0110  DS    0H
         MVI   ACT_REGION_TYPE,$ACT_BATCH     REGION TYPE IS BATCH JOB
         CLI   CHSTEP,X'40'                   STEP NAME PRESENT?
         BNH   ACT0120                        NO
         MVC   ACT_STEP,CHSTEP                SET STEP NAME
ACT0120  DS    0H
         CLI   CHPROCSN,X'40'                 PROC STEP NAME PRESENT?
         BNH   ACT0130                        NO
         MVC   ACT_PROC_STEP,CHPROCSN         SET PROC STEP NAME
ACT0130  DS    0H
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB
         BZ    ACT0140                        NOT IN TRANSITION
         MVI   ACT_SWAP_STATUS,$ACT_SWAP_TRANSITION
         B     ACT0180
ACT0140  DS    0H
         TM    OUCBQFL,OUCBLSW                LOGICAL SWAP?
         BO    ACT0150                        YES
         TM    ASCBRCTF,ASCBOUT               SWAPPED OUT?
         BO    ACT0160                        YES
         CLC   OUCBNDS,=X'0000'               NON-SWAPPABLE?
         BE    ACT0170                        YES
         MVI   ACT_SWAP_STATUS,$ACT_SWAP_IN   SWAPPED IN
         B     ACT0180
ACT0150  DS    0H
         MVI   ACT_SWAP_STATUS,$ACT_SWAP_LOGICAL  LOGICALLY SWAPPED
         B     ACT0180
ACT0160  DS    0H
         MVI   ACT_SWAP_STATUS,$ACT_SWAP_OUT  SWAPPED OUT
         B     ACT0180
ACT0170  DS    0H
         MVI   ACT_SWAP_STATUS,$ACT_SWAP_NONSWAP
ACT0180  DS    0H
         MVC   ACT_USER,OUCBUSRD              COPY USER NAME
         MVC   ACT_SERVICE_UNITS,OUCBWMS      COPY SERVICE UNITS
         MVC   ACT_IO,ASCBIOSC                COPY NBR OF I/O'S
         MVC   ACT_TCB_TIME,ASCBEJST          COPY TCB TIME
         MVC   ACT_SRB_TIME,ASCBSRBT          COPY SRB TIME
         L     R1,ASCBRSME                    RAX CONTROL BLOCK ADDRESS
         USING RAX,R1                         DEFINE BASE
         MVC   ACT_REAL_FRAMES,RAXFMCT        COPY NUMBER OF FRAMES
         CLI   ACT_REGION_TYPES,$ACT_ALL      ALL ADDRESS SPACE TYPES?
         BE    ACT0190                        YES
         CLC   ACT_REGION_TYPE,ACT_REGION_TYPES    TYPE USER WANTS?
         BNE   ACT0220                        NO
ACT0190  DS    0H
         SR    R1,R1                          CLEAR REGISTER
         ICM   R1,3,ACT_NAME_PREFIX_LENGTH    JOB NAME PREFIX LENGTH
         BZ    ACT0200                        NO PREFIX IN EFFECT
         BCTR  R1,0                           FOR EXECUTE
         EX    R1,JOBCLC                      PREFIX MATCH?
         BNE   ACT0220                        NO
ACT0200  DS    0H
         ICM   R1,3,ACT_USER_PREFIX_LENGTH    USER PREFIX LENGTH
         BZ    ACT0210                        NO PREFIX IN EFFECT
         BCTR  R1,0                           FOR EXECUTE
         EX    R1,USERCLC                     PREFIX MATCH?
         BNE   ACT0220                        NO
ACT0210  DS    0H
         ICM   R1,3,ACT_NBR_REGIONS           NUMBER OF ADDRESS SPACES
         CH    R1,MAX#                        ALREADY FULL?
         BE    ACT0230                        YES.. SET RC
         LA    R1,1(,R1)                      PLUS 1
         STCM  R1,3,ACT_NBR_REGIONS           SAVE NEW TOTAL
         LA    R7,ACT_REGION_L(,R7)           PLUS LENGTH
         LA    R8,ACT_REGION_L(,R8)           NEXT IN I/O AREA
ACT0220  DS    0H
         LA    R4,4(,R4)                      NEXT ADDRESS SPACE
         BCT   R3,ACT0020                     LOOP
         ITRACE ID=DONE
         B     ACT0240
ACT0230  DS    0H
         ITRACE ID=OVERFLOW                   I/O AREA OVERFLOW
         MVC   NET_RC,X0004                   SET RETURN CODE
ACT0240  DS    0H
         ITRACE ID=DATABILT,                  DATA HAS BEEN BUILT      +
               RDATA1=R7                      .. DATA LENGTH
         STH   R7,NET_LENGTH                  SET LENGTH
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
JOBCLC   CLC   ACT_NAME(0),ACT_NAME_PREFIX    CHECK JOB NAME PREFIX
USERCLC  CLC   ACT_USER(0),ACT_USER_PREFIX    CHECK USER NAME PREFIX
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDACT)                      DISPLACEMENT TO WORK AREA
MAX#      DC   Y((32760-(ACT_REGION-NET_IO))/ACT_REGION_L)
X0004     DC   X'0004'
STARTING  DC   CL8'STARTING'
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDACT   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         NETIO    DSECT=YES
         COPY     ACTDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT      DSECT=YES,PREFIX=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAASCB  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAASVT  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IRAOUCB
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IARRAX
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
CSCB     DSECT
         IEECHAIN INCCSCX=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCACT
./ ADD NAME=STCAPF   0115-09139-09173-0841-00157-00122-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCAPF                                                *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the APF list display.                        *
*   The number of data sets that may be returned is limited by the    *
*   I/O area size (VTAM limits the length to 32767).  If the APF list *
*   exceeds the I/O area size, the return code with be set to 4 to    *
*   inform the TSO user that the data has been truncated.             *
*                                                                     *
*   Data returned is: number of data sets in the list, and per data   *
*       set 1) the data set name and 2) the volser.                   *
*                                                                     *
* ------------------------------------------------------------------- *
STCAPF   CSECT
STCAPF   AMODE 31
STCAPF   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCAPF,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     APF0000
MODID    DC    CL8'STCAPF'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
APF0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDAPF,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    APF0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         MVC   DXD_CSVAPF(CSVAPF_L),CSVAPF_I
APF0010  DS    0H
         GETMAIN RU,                          GETMAIN REPLY AREA       +
               LV=32000,                                               +
               LOC=ANY
         ST    R1,DXD_ANSWER
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         XC    NET_RC,NET_RC                  INITIALIZE RETURN CODE

         L     R6,DXD_ANSWER
         USING APFHDR,R6
         MVC   DXD_ANSWER_LENGTH,=A(32000)
         CSVAPF REQUEST=LIST,                 REQUEST APF LIST         +
               ANSAREA=(R6),                                           +
               ANSLEN=DXD_ANSWER_LENGTH,                               +
               MF=(E,DXD_CSVAPF)
         ITRACE ID=CSV_RC,                                             +
               RDATA1=R15,                                             +
               RDATA2=R0
         LTR   R15,R15
         BNZ   ERR0010
         ICM   R5,15,APFH#REC                 NBR OF ENTRIES RETURNED
         ITRACE ID=APFH#REC,                  NBR RETURNED BY CSV      +
               RDATA1=R5                      .. TRACE FULL NUMBER
         CH    R5,MAX#                        MORE THAN WILL FIT?
         BNH   APF0020                        NO
         ITRACE ID=OVERMAX                    TOO MANY TO RETURN ALL
         LH    R5,MAX#                        LIMIT TO NUMBER THAT FIT
         MVC   NET_RC,X0004                   SET RETURN CODE TO 4
APF0020  DS    0H
         ITRACE ID=NBS_DSNS,                  NBR RETURNED TO USER     +
               RDATA1=R5                      .. TRACE FULL NUMBER
         STCM  R5,3,APF_NBR_DSNS              SET NUMBER RETURNED
         ICM   R4,15,APFHOFF                  OFFSET TO 1ST APFE
         AR    R4,R6                          1ST APFE
         USING APFE,R4
         LA    R7,NET_HEADER_L+APF_HEADER_L   INITIALIZE OUTPUT LENGTH
         LA    R8,APF_DATA                    SET ADDRESS
         USING APF_DATA,R8                    DEFINE BASE
APF0030  DS    0H
         SR    R1,R1                          CLEAR FOR DSN LENGTH
         ICM   R1,3,APFEDSLEN                 LENGTH OF DSNAME
         BCTR  R1,0                           FOR EX
         MVC   APF_DSN,COMM_BLANKS            INITIALIZE DSN
         EX    R1,DSNMVC                      MOVE NAME
         MVC   APF_VOLSER,APFEVOLUME          COPY VOLSER
         ICM   R1,3,APFELEN
         AR    R4,R1                          NEXT APFE
         LA    R7,APF_DATA_L(,R7)             UPDATE OUTPUT LENGTH
         LA    R8,APF_DATA_L(,R8)             UPDATE OUTPUT ADDRESS
         BCT   R5,APF0030                     PROCESS ALL DATASETS
         STCM  R7,3,NET_LENGTH                SET OUTPUT LENGTH
         ITRACE ID=DATABILT,                  DATA BUILT               +
               RDATA1=R7
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R1,DXD_ANSWER
         FREEMAIN RU,                         FREEMAIN REPLY AREA      +
               A=(1),                                                  +
               LV=32000
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
DSNMVC   MVC   APF_DSN(0),APFEDSNAME          COPY DATASET NAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC    Q(DXDAPF)                     DISPLACEMENT TO WORK AREA
CSVAPF_I  CSVAPF MF=(L,DXD_CSV_PARMS,0D)
CSVAPF_L  EQU   *-CSVAPF_I
MAX#      DC    Y((32760-APF_HEADER_L)/APF_DATA_L)
X0004     DC    X'0004'
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDAPF            DSECT
                  SUTLSAVE DSECT=NO
DXD_CSVAPF        DS    (CSVAPF_L)X
DXD_ANSWER_LENGTH DS    F
DXD_ANSWER        DS    A
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
         COPY     APFDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CSVAPFAA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCAPF
./ ADD NAME=STCATTN  0111-09139-09169-1059-00282-00267-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCATTN                                               *
*                                                                     *
*  VTAM ATTN exit.                                                    *
*                                                                     *
*   Register usage:                                                   *
*                                                                     *
*      R7   Parameters passed by VTAM                                 *
*      R8   RPL extension address                                     *
*      R9   RPL address                                               *
*      R10  USERBLOK address                                          *
*      R11  Program base                                              *
*      R12  STCCOMM address                                           *
*                                                                     *
*  -----------------------------------------------------------------  *
*                                                                     *
*  For session establishment (FMH5 calls)                             *
*    1) Verify no USERBLOK already exists for this LU                 *
*    2) Add a USERBLOK to the chain                                   *
*    3) Print a message to log the new conversation                   *
*    4) Post the main task to have a subtask attached for this user.  *
*                                                                     *
*  For session termination (LOSS calls)                               *
*    1) The "error" flag is set in the USERBLOK.                      *
*    2) The ECB is posted to wake up the user subtask.                *
*                                                                     *
* ------------------------------------------------------------------- *
STCATTN  CSECT
STCATTN  AMODE 31
STCATTN  RMODE ANY
         USING STCATTN,R11                    DEFINE BASE
         NOP   *                              KEEP PREFIX
         LR    R11,R15                        LOAD BASE
         B     ATTN0010                       SKIP EYECATCHER
         DC    CL8'STCATTN'                   MODULE NAME
         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY
ATTN0010 DS    0H
         LR    R7,R1                          PARAMETER LIST ADDRESS
         USING EXITPARM,R7                    DEFINE BASE
         LR    R5,R14                         SAVE RETURN ADDRESS
         GETMAIN RU,                          ACQUIRE A WORK AREA      +
               LV=WKL,                                                 +
               LOC=ANY
         LR    R13,R1                         SAVE AREA ADDRESS
         USING WK,R13                         DEFINE BASE
         MVC   WKENQ(ENQL),ENQI               INITIALIZE LIST FORM
         MVC   WKDEQ(DEQL),DEQI               INITIALIZE LIST FORM
         L     R1,EXITACB                     ACB'S ADDRESS
         USING IFGACB,R1                      DEFINE BASE
         L     R12,ACBUSER                    COMMON DATA ADDRESS
         USING STCCOMM,R12                    DEFINE BASE
         L     R9,EXITRPL                     RPL'S ADDRESS
         USING IFGRPL,R9                      DEFINE BASE
         L     R8,RPLAAREA                    RPL EXTENSTION'S ADDRESS
         USING ISTRPL6X,R8                    DEFINE BASE
         ITRACE ID=ENTRY,                                              +
               DATA1=EXITTYPE,                .. REASON FOR CALL       +
               DATA2=RPL6LU                   .. LU INVOLVED
         ICM   R10,15,COMM_USERS              FIRST USER BLOCK
         USING USERBLOK,R10                   DEFINE BASE
         BZ    ATTN0030                       UNKNOWN LU
ATTN0020 DS    0H
         CLC   RPL6LU,USER_LU                 LU NAME LOCATED?
         BE    ATTN0030                       YES
         ICM   R10,15,USER_NEXT               NEXT USER BLOCK
         BNZ   ATTN0020                       LOOP
ATTN0030 DS    0H
         CLC   EXITTYPE,CNOSTYPE              CNOS CALL?
         BE    CNOS0000                       YES
         CLC   EXITTYPE,FMH5TYPE              FMH5 CALL?
         BE    FMH50000                       YES
         CLC   EXITTYPE,LOSSTYPE              LOSS CALL?
         BE    LOSS0000                       YES
         B     EXIT0000                       OTHERWISE EXIT
* ------------------------------------------------------------------- *
*             CNOS                                                    *
* ------------------------------------------------------------------- *
CNOS0000 DS    0H
         ITRACE ID=CNOS,                      CNOS                     +
               DATA1=RPL6LU,                  .. LU NAME               +
               RDATA2=R10                     .. USERBLOK ADDRESS
         LTR   R10,R10                        LU ALREADY ON CHAIN?
         BZ    EXIT0000                       YES
         ABEND $U0005,DUMP,,USER
* ------------------------------------------------------------------- *
*             FMH5                                                    *
* ------------------------------------------------------------------- *
FMH50000 DS    0H
         ITRACE ID=FMH5,                      FMH5 RECEIVED            +
               DATA1=RPL6LU,                  .. LU'S NAME             +
               RDATA2=R10                     .. USERBLOK ADDRESS
         LTR   R10,R10                        LU ALREADY ON CHAIN?
         BNZ   ERR0010                        YES
         MVC   WKRPL(RPLL),RPLI               INITIALIZE RPL
         MVC   WKRPLX(RPLEXTL),RPLEXTI        INITIALIZE RPL EXTENSION
         MVC   WKRPL+(RPLDACB-IFGRPL),EXITACB
         LA    R8,WKRPLX                      RPL EXTENSION ADDRESS
         ST    R8,WKRPL+(RPLAAREA-IFGRPL)
         ITRACE ID=RECVFMH5
         APPCCMD CONTROL=RCVFMH5,             RECEIVE THE FMH5         +
               RPL=WKRPL,                     .. RPL ADDRESS           +
               CONMODE=CS,                    .. CONTINUE SPECIFIC     +
               AREA=WKFMH5,                   .. FMH5 STORAGE ADDRESS  +
               AREALEN=WKFMH5L,               .. FMH5 SIZE             +
               OPTCD=SYN                      .. SYNCHRONOUS
         OC    RPL6RC,RPL6RC                  SUCCESSFUL?
         BNZ   FMH50050                       NO
* ------------------------------------------------------------------- *
*        "Lock" the user chain                                        *
* ------------------------------------------------------------------- *
         ENQ   MF=(E,WKENQ)                   ISSUE ENQUE
* ------------------------------------------------------------------- *
*        Build new user block                                         *
* ------------------------------------------------------------------- *
         GETMAIN RU,                          ACQUIRE USER BLOCK       +
               LV=USER_L,                                              +
               LOC=ANY
         ITRACE ID=NEWUSER,                   NEW USER SESSION         +
               RDATA1=R1
NEW      USING USERBLOK,R1
         LR    R2,R1
         LA    R3,USER_L
         SR    R14,R14
         SR    R15,R15
         MVCL  R2,R14
         ICM   R10,15,COMM_USERS              FIRST ON NEW USER CHAIN
         BZ    FMH50010
         ST    R1,USER_PREV
FMH50010 DS    0H
         ST    R10,NEW.USER_NEXT
         ST    R1,COMM_USERS                  ADD NEW BLOCK TO CHAIN
         MVC   NEW.USER_EYE,=C'USERBLOK'
         MVI   NEW.USER_STATUS,$USER_VTAM+$USER_INITIAL
         MVC   NEW.USER_CID,RPL6CNVD          SAVE CONVERSATION ID
         L     R8,RPLAAREA                    RPL EXTENSION ADDR
         MVC   NEW.USER_LU,RPL6LU             SAVE LU NAME
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         MVI   PRT_CC,C' '                    SET CARRIAGE CONTROL
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         MVC   PRT_MSGID(MSG01L),MSG01        SET MESSAGE
         MVC   PRT_MSGID+(MSG01LU-MSG01)(L'MSG01LU),NEW.USER_LU
         DEQ   MF=(E,WKDEQ)                   ISSUE DEQ
         LA    R1,PRTBLOK                     PRINT PARM BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        ADD TO QUEUE
         POST  COMM_NET_ECB                   WAKE UP MAIN TASK
         B     EXIT0000                       EXIT
FMH50050 DS    0H
         ITRACE ID=FMH5FAIL
         LR    R2,R15                         COPY RETURN CODE
         ABEND $U0006,DUMP,,USER              ABEND
* ------------------------------------------------------------------- *
*                                                                     *
*             LOSS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
LOSS0000 DS    0H
         ITRACE ID=LOSS,                      LOSS OF SESSION          +
               RDATA1=R10,                                             +
               DATA2=USER_LU
         TM    USER_STATUS,$USER_LOST         ALREADY 'LOST'?
         BO    LOSS0020                       YES
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         MVI   PRT_CC,C' '                    CARRIAGE CONTROL
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         MVC   PRT_MSGID(MSG02L),MSG02        SET MESSAGE
         MVC   PRT_MSGID+(MSG02LU-MSG02)(L'MSG02LU),RPL6LU
         LA    R1,PRTBLOK                     PRINT PARM BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        ADD TO QUEUE
         LTR   R10,R10                        FOR A KNOWN LU?
         BZ    LOSS0010                       NO
         ITRACE ID=SETERROR                   SESSION LOST
         OI    USER_STATUS,$USER_LOST         SET 'LOST'
         POST  COMM_NET_ECB                   WAKE UP MAIN TASK
         B     EXIT0000                       AND EXIT
LOSS0010 DS    0H
         ITRACE ID=UNKNLOSS                   UNKNOWN SESSION LOST
         B     EXIT0000                       EXIT
LOSS0020 DS    0H
         ITRACE ID=DUP_LOSS
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=DUPFMH5,                                            +
               DATA1=USER_LU
         ABEND $U0007,DUMP,,USER
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT                       EXITING
         FREEMAIN RU,                         FREEMAIN WORK AREA       +
               A=(R13),                                                +
               LV=WKL
         BR    R5                             RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
ENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +
               RET=HAVE,                                               +
               SMC=NONE,                                               +
               MF=L
ENQL     EQU   *-ENQI
DEQI     DEQ   (QNAME,RNAME,,STEP),                                    +
               RMC=NONE,                                               +
               MF=L
DEQL     EQU   *-DEQI
RPLI     RPL   AM=VTAM
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI
QNAME    DC    CL8'SUTL'
RNAME    DC    C'USERBLOK CHAIN'
CNOSTYPE DC    CL4'CNOS'             CHANGE NUMBER OF SESSIONS
FMH5TYPE DC    CL4'FMH5'             FMH5
LOSSTYPE DC    CL4'LOSS'             LOSS OF SESSION
MSG01    DS    0C
         DC    CL11'STCATTN01I'
         DC    C'Session with LU '
MSG01LU  DC    CL8' '
         DC    C' established'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'STCATTN02I'
         DC    C'Session lost with '
MSG02LU  DC    CL8' '
MSG02L   EQU   *-MSG02
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
WK       SUTLSAVE DSECT=YES
         PRTBLOK  DSECT=NO
WKFMH5   FMH5     DSECT=NO
WKRPL    DS       0A,(RPLL)X
WKRPLX   DS       0A,(RPLEXTL)X
WKENQ    DS       (ENQL)X
WKDEQ    DS       (DEQL)X
WKL      EQU      *-WK
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         USERBLOK
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
EXITPARM DSECT
EXITACB  DS   A                      ACB ADDRESS
         DS   A                      RESERVED
         DS   A                      RESERVED
EXITTYPE DS   CL4                    TYPE OF CALL
EXITRPL  DS   A                      RPL ADDRESS
         DS   A                      RESERVED
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IFGACB  AM=VTAM
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IFGRPL  AM=VTAM
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IHAPSA  DSECT=YES,LIST=NO
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY    REGEQU
         ABCODES
         END     STCATTN
./ ADD NAME=STCCOMM  0100-09139-09139-1341-00013-00013-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Name: STCCOMM                                                      *
*                                                                     *
*  Started task common data and trace table manager                   *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     OPTIONS
         STCCOMM  TYPE=CSECT
         SUTLSAVE DSECT=YES
         IHAPSA   DSECT=YES,LIST=NO
         COPY     REGEQU
         END      STCCOMM
./ ADD NAME=STCCONS  0111-09139-09173-0843-00449-00426-00000-SOURCE
         COPY  OPTIONS
         MACRO
         CMD   &TEXT,&ADDR
         LCLA  &LEN
         AIF   (T'&TEXT EQ 'O').ERR0010
         AIF   (T'&ADDR EQ 'O').ERR0020
&LEN     SETA  K'&TEXT
         DC    AL1(&LEN)
         DC    AL4(&ADDR)
         DC    C'&TEXT'
         MEXIT
.ERR0010 ANOP
         MNOTE 12,'COMMAND TEXT IS REQUIRED'
         MEXIT
.ERR0020 ANOP
         MNOTE 12,'COMMAND PROCESSOR ADDRESS IS REQUIRED'
         MEND
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCCONS                                               *
*                                                                     *
*  This module allows some commands to be entered via an MVS console. *
*  Mostly this would be to allow an operator (or an automation        *
*  product) to issue commands to shutdown SUTL.                       *
*                                                                     *
*    Commands allowed are                                             *
*      "F xxx,ACTIVE" Displays the active USERs.                      *
*      "P xxx"        Stops the SUTL STC.                             *
*                                                                     *
* ------------------------------------------------------------------- *
STCCONS  CSECT
STCCONS  AMODE 31
STCCONS  RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE ADDRESS
         USING STCCONS,R11                    DEFINE BASE
         B     CONS0000
MODID    DC    CL8'STCCONS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
CONS0000 DS    0H
         L     R12,0(R1)                      COMMON AREA ADDRESS
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         LA    R3,CONS_WORK_L                 WORK AREA SIZE
         GETMAIN RU,                          ACQUIRE WORK AREA        +
               LV=(R3),                       .. SIZE                  +
               LOC=ANY
         LR    R2,R1                          COPY WORK AREA ADDRESS
         LR    R4,R1                          COPY WORK AREA ADDRESS
         ST    R4,CONS_WORK_AREA              SAVE WORK AREA ADDR
         SR    R14,R14                        CLEAR REGISTER
         SR    R15,R15                        CLEAR REGISTER
         MVCL  R2,R14                         CLEAR THE WORK AREA
         ST    R13,4(,R4)                     CHAIN CALLER'S WORK AREA
         ST    R4,8(,R13)                     CHAIN OUR WORK AREA
         LR    R13,R4                         SET WORK AREA BASE
         USING CONS_WORK,R13                  DEFINE WORK AREA BASE
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         ST    R11,ACONS                      CONSOLE MODULE ADDRESS
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=EXTRACTL+4,                 .. LENGTH                +
               LOC=BELOW                      .. 24-BIT AREA
         LR    R2,R1                          SAVE THE ADDRESS
         LA    R3,EXTRACTL(R2)                RETURNED DATA ADDRESS
         MVC   0(EXTRACTL,R2),EXTRACTI
         EXTRACT (R3),                        EXTRACT COMM LIST ADDR   +
               FIELDS=COMM,                   .. RETURN COMLIST ADDRESS+
               MF=(E,(R2))                    .. EXECUTE FORM
         L     R10,0(R3)                      COMM LIST ADDRESS
         FREEMAIN RU,                         FREE EXTRACT WORK AREA   +
               A=(R2),                                                 +
               LV=EXTRACTL+4
         ITRACE ID=COMLIST,                   TRACE COMM ADDRESS       +
               RDATA1=R10
         ST    R10,WORK_COMM_ADDR             SAVE COMLIST ADDRESS
         USING COMLIST,R10                    DEFINE COMLIST BASE
         MVC   CONS_SYSTEM_ECB,COMECBPT       SAVE CONSOLE ECB ADDRESS
         MVC   WORK_ECB_1,COMECBPT            SAVE CONSOLE ECB ADDRESS
         LA    R1,CONS_WORK_ECB
         ST    R1,WORK_ECB_2                  SAVE ADDRESS
         OI    WORK_ECB_2,X'80'               FLAG END-OF-LIST
CONS0010 DS    0H
         ICM   R9,15,COMCIBPT                 FIRST CIB
         BZ    CONS0040                       NO CIB'S
         USING CIB,R9                         DEFINE CIB BASE
CONS0020 DS    0H
         ITRACE ID=INITCIB,                   TRACE EACH CIB           +
               RDATA1=R9,                     .. CIB ADDRESS           +
               DATA2=CIBVERB                  .. VERB FROM CIB
         CLI   CIBVERB,CIBSTART               START COMMAND?
         BE    CONS0030                       YES
         LH    R1,CIBXOFF
         LA    R1,0(R1,R9)                    CIB EXTENSION
         USING CIBX,R1
         MVC   WORK_CONSOLE_NAME,CIBXCNNM     COPY CONSOLE NAME
         MVC   WORK_WTO(WTO01L),WTO01         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. BACK TO SAME CONSOLE
CONS0030 DS    0H
         L     R2,CIBNEXT                     NEXT CIB
         QEDIT ORIGIN=COMCIBPT,               FREE THIS CIB            +
               BLOCK=(R9)
         LTR   R15,R15                        QEDIT SUCCESSFUL?
         BNZ   ERR0010                        NO
         LTR   R9,R2                          NEXT CIB'S ADDRESS
         BNZ   CONS0020                       LOOP
CONS0040 DS    0H
         ITRACE ID=SETCTR                     SETTING CIB LIMIT
         QEDIT ORIGIN=COMCIBPT,               SET CIB LIMIT            +
               CIBCTR=2                       .. ALLOW 2 CIBS
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0020                        NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CONS0100 DS    0H
         ITRACE ID=CONSWAIT
         WAIT  1,ECBLIST=WORK_ECB_LIST        WAIT
         TM    COMM_EOJ,$EOJ3                 EOJ?
         BO    EXIT0000                       YES
         ITRACE ID=PROCLIST                   PROCESSING CIB LIST
         L     R10,WORK_COMM_ADDR             COMM LIST ADDRESS
         ICM   R9,15,COMCIBPT                 FIRST CIB ADDRESS
         BZ    CONS0100                       STRANGE..
CONS0110 DS    0H
         ITRACE ID=PROCCIB,                   TRACE EACH CIB           +
               RDATA1=R9,                     .. CIB ADDRESS           +
               DATA2=CIBVERB                  .. VERB FROM CIB
         LH    R1,CIBXOFF
         LA    R1,0(R1,R9)                    CIB EXTENSION
         USING CIBX,R1
         MVC   WORK_CONSOLE_NAME,CIBXCNNM     SET CONSOLE ID
         CLI   CIBVERB,CIBSTOP                STOP COMMAND?
         BE    CONS0300                       YES
         CLI   CIBVERB,CIBMODFY               MODIFY?
         BE    CONS0130                       YES
         MVC   WORK_WTO(WTO02L),WTO02         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE
CONS0120 DS    0H
         L     R2,CIBNEXT                     NEXT CIB ADDRESS
         QEDIT ORIGIN=COMCIBPT,               FREE THIS CIB            +
               BLOCK=(R9)
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
         LTR   R9,R2                          NEXT CIB ADDRESS
         BNZ   CONS0110                       PROCESS IT
         B     CONS0100                       EXIT AT END OF CHAIN
CONS0130 DS    0H
         SR    R7,R7                          CLEAR REGISTER
         ICM   R7,3,CIBDATLN                  LENGTH OF DATA
         LA    R6,CMD_TABLE                   OUR LIST OF COMMANDS
         USING CMD_DSECT,R6                   DEFINE BASE
         SR    R1,R1                          CLEAR REGISTER
CONS0140 DS    0H
         CLI   0(R6),X'FF'                    END OF TABLE?
         BE    CONS0160                       YES
         IC    R1,CMD_LENGTH                  TEXT LENGTH
         CLR   R7,R1                          LENGTH CORRECT?
         BNE   CONS0150                       NO
         BCTR  R1,0                           MINUS 1 FOR EXECUTE
         EX    R1,CMDCLC                      COMMAND FOUND?
         BE    CONS0170                       YES
         LA    R1,1(,R1)                      RESTORE LENGTH
CONS0150 DS    0H
         LA    R6,CMD_DSECT_L(R6,R1)          NEXT COMMAND
         B     CONS0140                       LOOP
CMDCLC   CLC   CMD_CMD,CIBDATA                COMMAND LOCATED?
CONS0160 DS    0H
         MVC   WORK_WTO(WTO03L),WTO03         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE
         B     CONS0120                       RELEASE THIS CIB
CONS0170 DS    0H
         ICM   R15,15,CMD_ADDR                COMMAND PROCESSOR ADDRESS
         BR    R15                            PROCESS THE COMMAND
* ------------------------------------------------------------------- *
*        Display the active users                                     *
* ------------------------------------------------------------------- *
CONS0200 DS    0H
         ITRACE ID=ACTIVE
         ICM   R7,15,COMM_USERS               FIRST USER BLOCK
         USING USERBLOK,R7                    DEFINE USER BLOCK BASE
         BZ    CONS0290                       NO ACTIVE USERS
CONS0210 DS    0H
         MVC   WORK_WTO(WTO07L),WTO07         COPY WTO
         LA    R4,WORK_WTO                    WTO ADDRESS
         USING WPL,R4                         DEFINE WTO PARM LIST BASE
         MVC   WPLTXT(MSG08L),MSG08           COPY MESSAGE TO WTO
         MVC   WPLTXT+(MSG08ID-MSG08)(L'MSG08ID),USER_ID
         MVC   WPLTXT+(MSG08LU-MSG08)(L'MSG08LU),USER_LU
         UNPK  WPLTXT+(MSG08CID-MSG08)(9),USER_CID(5)
         TR    WPLTXT+(MSG08CID-MSG08)(8),HEXCHAR
         MVI   WPLTXT+(MSG08CID-MSG08)+8,C' '
         LA    R2,NET_FUNC_TABLE
         USING FUNC_DSECT,R2                  DEFINE BASE
         L     R3,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R3                      DEFINE I/O AREA BASE
CONS0220 DS    0H
         CLI   0(R2),X'FF'                    END OF TABLE?
         BE    CONS0230                       YES
         CLC   NET_FUNCTION,FUNC_FUNCTION     IS THIS THE FUNCTION?
         BE    CONS0230                       YES
         LA    R2,FUNC_DSECT_L(,R2)           NEXT FUNCTION
         B     CONS0220                       LOOP
CONS0230 DS    0H
         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),FUNC_NAME
         B     CONS0250
CONS0240 DS    0H
         MVC   WPLTXT+(MSG08FNC-MSG08)(L'MSG08FNC),UNKNOWN
CONS0250 DS    0H
         CLI   NET_FUNCTION,$USER_RECEIVE     RECEIVE?
         BE    CONS0260                       YES
         CLI   NET_FUNCTION,$USER_SEND        SEND?
         BE    CONS0270                       YES
         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),NONE
         B     CONS0280
CONS0260 DS    0H
         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),RECEIVE
         B     CONS0280
CONS0270 DS    0H
         MVC   WPLTXT+(MSG08NET-MSG08)(L'MSG08NET),SEND
CONS0280 DS    0H
         L     R0,USER_SENDS                  NUMBER OF SENDS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),EDWD1
         ED    WPLTXT+(MSG08SCT-MSG08)(L'MSG08SCT),COMM_DWORD+4
         L     R0,USER_BYTES_SENT             BYTES SENT
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),EDWD1
         ED    WPLTXT+(MSG08SLN-MSG08)(L'MSG08SLN),COMM_DWORD+4
         L     R0,USER_RECEIVES               NUMBER OF RECEIVES
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),EDWD1
         ED    WPLTXT+(MSG08RCT-MSG08)(L'MSG08RCT),COMM_DWORD+4
         L     R0,USER_BYTES_RECEIVED         BYTES RECEIVED
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),EDWD1
         ED    WPLTXT+(MSG08RLN-MSG08)(L'MSG08RLN),COMM_DWORD+4
         WTO   MF=(E,(R4)),                   ISSUE THE WTO            +
               CONSNAME=WORK_CONSOLE_NAME     .. TO THE SAME CONSOLE
         ICM   R7,15,USER_NEXT                NEXT USER BLOCK
         BNZ   CONS0210
         B     CONS0120                       RELEASE THIS CIB
CONS0290 DS    0H
         MVC   WORK_WTO(WTO04L),WTO04         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE
         B     CONS0120                       RELEASE THIS CIB
* ------------------------------------------------------------------- *
*        Shutdown the STC                                             *
* ------------------------------------------------------------------- *
CONS0300 DS    0H
         ITRACE ID=STOP
         TM    COMM_EOJ,$EOJ1                 EOJ ALREADY IN PROGRESS?
         BO    CONS0310                       YES
         POST  COMM_TERM_ECB                  POST TERMINATION ECB
         MVC   WORK_WTO(WTO05L),WTO05         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE
         B     CONS0120                       RELEASE THIS CIB
CONS0310 DS    0H
         MVC   WORK_WTO(WTO06L),WTO06         COPY WTO
         WTO   MF=(E,WORK_WTO),               ISSUE WTO                +
               CONSNAME=WORK_CONSOLE_NAME     .. TO SAME CONSOLE
         B     CONS0120                       RELEASE THIS CIB
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=CIBDELF,                   DELETE CIB FAILED        +
               RDATA1=R15                     .. RETURN CODE
         ABEND $U0011,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=CIBCTRF,                   SET CIB LIMIT            +
               RDATA1=R15                     .. RETURN CODE
         ABEND $U0012,DUMP,,USER
* ------------------------------------------------------------------- *
*        Exit                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R1,CONS_WORK_AREA              WORK AREA ADDRESS
         LA    R0,CONS_WORK_L                 WORK AREA SIZE
         L     R13,4(,R13)                    CALLER'S R13
         FREEMAIN RU,                         FREE WORK AREA           +
               A=(1),                                                  +
               LV=(0)
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        ALWAYS A GOOD RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXTRACTI EXTRACT *,                  EXTRACT LIST FORM                 +
               FIELDS=COMM,          .. COMLIST ADDRESS PLEASE         +
               MF=L
EXTRACTL EQU   *-EXTRACTI
WTO01    WTO   'STCCONS01E * Command not processed, STC initialization ++
               not complete',                                          +
               CONSNAME=,                                              +
               MF=L
WTO01L   EQU   *-WTO01
WTO02    WTO   'STCCONS02E * invalid CIB verb, CIB ignored',           +
               CONSNAME=,                                              +
               MF=L
WTO02L   EQU   *-WTO02
WTO03    WTO   'STCCONS02E * Invalid command',                         +
               CONSNAME=,                                              +
               MF=L
WTO03L   EQU   *-WTO03
WTO04    WTO   'STCCONS04I   No active users',                         +
               CONSNAME=,                                              +
               MF=L
WTO04L   EQU   *-WTO04
WTO05    WTO   'STCCONS03I   SUTL STC shutdown starting',              +
               CONSNAME=,                                              +
               MF=L
WTO05L   EQU   *-WTO05
WTO06    WTO   'STCCONS03E * SUTL STC shutdown already in progress',   +
               CONSNAME=,                                              +
               MF=L
WTO06L   EQU   *-WTO06
WTO07    WTO   '                                                       +
                                                                       +
                             ',                                        +
               CONSNAME=,                                              +
               MF=L
WTO07L   EQU   *-WTO07

MSG08    DS    0C
         DC    C'STCCONS8I   '
         DC    C'ID='
MSG08ID  DC    CL8' '
         DC    C' LU='
MSG08LU  DC    CL8' '
         DC    C' CID='
MSG08CID DC    CL8' '
         DC    C' FUNC='
MSG08FNC DC    CL4' '
         DC    C' NET STATUS='
MSG08NET DC    CL8' '
         DC    C' SEND='
MSG08SCT DC    CL8' '
         DC    C'/'
MSG08SLN DC    CL8' '
         DC    C' RECV='
MSG08RCT DC    CL8' '
         DC    C'/'
MSG08RLN DC    CL8' '
MSG08L   EQU   *-MSG08

EDWD1    DC    X'4020202020202021'
NONE     DC    CL8'NONE'
RECEIVE  DC    CL8'RECEIVE'
SEND     DC    CL8'SEND'
UNKNOWN  DC    CL8'UNKNOWN'

HEXCHAR          EQU   *-C'0'
                 DC    C'0123456789ABCDEF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CMD_TABLE        DS    0C
                 CMD   ACTIVE,CONS0200       DISPLAY ACTIVE USERS
                 CMD   SHUT,CONS0300         SHUT (SHUTDOWN THE STC)
                 CMD   STOP,CONS0300         STOP (SHUTDOWN THE STC)
                 CMD   USERS,CONS0200        DISPLAY ACTIVE USERS
                 DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
NET_FUNC_TABLE   DS    0C
                 DC    AL1($NET_ID),CL4'SID'
                 DC    AL1($NET_ACT),CL4'ACT'
                 DC    AL1($NET_APF),CL4'APF'
                 DC    AL1($NET_FS),CL4'FS'
                 DC    AL1($NET_IPL),CL4'IPL'
                 DC    AL1($NET_LLA),CL4'LLA'
                 DC    AL1($NET_PS),CL4'PS'
                 DC    AL1($NET_SUB),CL4'SUB'
                 DC    AL1($NET_USERS),CL4'USER'
                 DC    AL1($NET_LOGOFF),CL4'OFF'
                 DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CONS_WORK         DSECT
                  SUTLSAVE DSECT=NO   WORK AREA OWNER EYECATCHER
WORK_COMM_ADDR    DS    F             ADDRESS OF COMM LIST

WORK_ECB_LIST     DS    0A
WORK_ECB_1        DS    A
WORK_ECB_2        DS    A

WORK_CONSOLE_NAME DS    CL8            CONSOLE NAME
WORK_WTO          DS    0F,CL200
CONS_WORK_L       EQU   *-CONS_WORK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CMD_DSECT        DSECT
CMD_LENGTH       DS    X             COMMAND TEXT LENGTH
CMD_ADDR         DS    AL4           COMMAND PROCESSOR ENTRY POINT
CMD_DSECT_L      EQU   *-CMD_DSECT
CMD_CMD          DS    C             COMMAND TEXT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FUNC_DSECT       DSECT
FUNC_FUNCTION    DS    X
FUNC_NAME        DS    CL4
FUNC_DSECT_L     EQU   *-FUNC_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 NETIO    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 IEZCOM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CIB              DSECT
                 IEZCIB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 IEZWPL   DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 COPY     REGEQU
                 ABCODES
         END     STCCONS
./ ADD NAME=STCFS    0127-09142-09189-0916-00278-00139-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCFS                                                 *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the Open Edition file system (FS) display    *
*                                                                     *
* ------------------------------------------------------------------- *
STCFS    CSECT
STCFS    AMODE 31
STCFS    RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCFS,R11                      DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     FS0000
MODID    DC    CL8'STCFS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
FS0000   DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDFS,R13                      DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    FS0010                         YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
FS0010   DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE I/O AREA BASE
         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO
         LA    R5,NET_HEADER_L+FS_HEADER_L    INITIAL LENGTH
         LA    R6,FS_DATA                     INITIAL OUTPUT ADDR
         USING FS_DATA,R6
         XC    MNTEH(MNTEH#LENGTH),MNTEH      INITIALIZE HEADER
         XC    FS_NBR,FS_NBR                  RESET NBR OF FILESYSTEMS
FS0020   DS    0H
         MVC   MNTEHID,=CL4'MNT2'
         MVC   MNTEHSIZE,=A(MNTE#LENGTH)
         MVC   MNTEHBLEN,=A(MNTE#LENGTH)
         MVC   DXD_MNTE_BUFFER_LENGTH,=A(DXD_MNTE_BUFFER_L)
         LA    R7,MNTEH
         USING MNTEH,R7
         ITRACE ID=CALL_GMN,                                           +
               DATA1=DXD_MNTE_BUFFER_LENGTH,                           +
               RDATA2=R7
         CALL  BPX1GMN,                                                +
               (DXD_MNTE_BUFFER_LENGTH,                                +
               MNTEH,                                                  +
               DXD_RETURN_VALUE,                                       +
               DXD_RETURN_CODE,                                        +
               DXD_REASON_CODE),                                       +
               VL,                                                     +
               MF=(E,DXD_PARMLIST)
         ITRACE ID=GMN_RC,                                             +
               DATA1=DXD_RETURN_VALUE,                                 +
               DATA2=DXD_RETURN_CODE
         ICM   R8,15,DXD_RETURN_VALUE             SUCCESSFUL?
         BM    ERR0010                            NO
         BZ    FS0230                             ZERO.. 'EOF'
FS0025   DS    0H
         MVC   DXD_STAT_BUFFER_LENGTH,=A(DXD_STAT_BUFFER_L)
         ITRACE ID=CALL_STV,                                           +
               DATA1=MNTENTMOUNTPOINT+0,                               +
               DATA2=MNTENTMOUNTPOINT+8
         CALL  BPX1STV,                                                +
               (MNTENTPATHLEN,                                         +
               MNTENTMOUNTPOINT,                                       +
               DXD_STAT_BUFFER_LENGTH,                                 +
               SSTF,                                                   +
               DXD_RETURN_VALUE,                                       +
               DXD_RETURN_CODE,                                        +
               DXD_REASON_CODE),                                       +
               VL,                                                     +
               MF=(E,DXD_PARMLIST)
         SR    R1,R1
         ICM   R1,3,FS_NBR
         LA    R1,1(,R1)
         STCM  R1,3,FS_NBR
         MVC   FS_SIZE,SSTFTOTALSPACE             FILE SYSTEM SIZE
         MVC   FS_USED,SSTFUSEDSPACE              USED SPACE
         MVC   FS_READS,MNTENTREADCT              NBR OF READS
         MVC   FS_BYTES_READ,MNTENTBYTESREAD      BYTES READ
         MVC   FS_WRITES,MNTENTWRITECT            NBR OF WRITES
         MVC   FS_BYTES_WRITTEN,MNTENTBYTESWRITTEN
         ICM   R1,15,MNTENTPATHLEN                PATH NAME LENGTH
         CH    R1,=Y(L'FS_MOUNT_POINT)            TOO LONG?
         BNH   FS0030
         LA    R1,L'FS_MOUNT_POINT                LIMIT LENGTH
FS0030   DS    0H
         BCTR  R1,0
         MVC   FS_MOUNT_POINT,COMM_BLANKS
         EX    R1,PATH_MVC                        COPY MOUNT POINT
         CLI   MNTENTSTATUS,MNTENTFILEACTIVE      ACTIVE?
         BE    FS0040                             YES
         CLI   MNTENTSTATUS,MNTENTFILEDEAD        DEAD?
         BE    FS0050                             YES
         CLI   MNTENTSTATUS,MNTENTFILERESET       RESET?
         BE    FS0060                             YES
         CLI   MNTENTSTATUS,MNTENTFILEFORCE       UNMOUNTED WITH FORCE?
         BE    FS0070                             YES
         CLI   MNTENTSTATUS,MNTENTFILEIMMED       UNMOUNTED WITH IMMED?
         BE    FS0080                             YES
         CLI   MNTENTSTATUS,MNTENTFILENORM        NORMAL?
         BE    FS0090                             YES
         CLI   MNTENTSTATUS,MNTENTIMMEDTRIED      MOUNTED IMMED FAILED?
         BE    FS0100                             YES
         CLI   MNTENTSTATUS,MNTENTFILEDRAIN       UNMOUNTED WITH DRAIN?
         BE    FS0110                             YES
         CLI   MNTENTSTATUS,MNTENTQUIESCED        QUIESCED
         BE    FS0120                             YES
         CLI   MNTENTSTATUS,MNTENTMNTINPROGRESS MOUNT IN PROGRESS?
         BE    FS0130                             YES
         CLI   MNTENTSTATUS,MNTENTASYNCHMOUNT     ASNYCH MOUNT?
         BE    FS0130                             YES
         MVC   FS_STATUS,=CL8'UNKNOWN'
         B     FS0150
FS0040   DS    0H
         MVC   FS_STATUS,=CL8'ACTIVE'
         B     FS0150
FS0050   DS    0H
         MVC   FS_STATUS,=CL8'DEAD'
         B     FS0150
FS0060   DS    0H
         MVC   FS_STATUS,=CL8'RESET'
         B     FS0150
FS0070   DS    0H
         MVC   FS_STATUS,=CL8'FORCED'
         B     FS0150
FS0080   DS    0H
         MVC   FS_STATUS,=CL8'IMMED'
         B     FS0150
FS0090   DS    0H
         MVC   FS_STATUS,=CL8'UNMOUNT'
         B     FS0150
FS0100   DS    0H
         MVC   FS_STATUS,=CL8'FAILED'
         B     FS0150
FS0110   DS    0H
         MVC   FS_STATUS,=CL8'DRAINED'
         B     FS0150
FS0120   DS    0H
         MVC   FS_STATUS,=CL8'QUIESCED'
         B     FS0150
FS0130   DS    0H
         MVC   FS_STATUS,=CL8'PROGRESS'
         B     FS0150
FS0140   DS    0H
         MVC   FS_STATUS,=CL8'ASYNC   '
FS0150   DS    0H
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEMVS    LOCAL?
         BE    FS0160                            YES
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEREMOTE REMOTE?
         BE    FS0170                            YES
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEPIPE   PIPE?
         BE    FS0180                            YES
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPESOCKET SOCKET?
         BE    FS0190                            YES
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPEXPFS   CROSS SYSTEM PFS?
         BE    FS0200                            YES
         CLI   MNTENTFSTYPE+3,MNTENTFSTYPECSPS   CHAR SPECIAL?
         BE    FS0210                            YES
         MVC   FS_TYPE,=CL6'UNKWN'               UNKNOWN
         B     FS0220
FS0160   DS    0H
         MVC   FS_TYPE,=CL6'LOCAL'
         B     FS0220
FS0170   DS    0H
         MVC   FS_TYPE,=CL6'REMOTE'
         B     FS0220
FS0180   DS    0H
         MVC   FS_TYPE,=CL6'PIPE'
         B     FS0220
FS0190   DS    0H
         MVC   FS_TYPE,=CL6'SOCKET'
         B     FS0220
FS0200   DS    0H
         MVC   FS_TYPE,=CL6'XPFS'
         B     FS0220
FS0210   DS    0H
         MVC   FS_TYPE,=CL6'CSPS'
FS0220   DS    0H
         MVC   FS_DDNAME,MNTENTFSDDNAME       DDNAME
         MVC   FS_DSNAME,MNTENTFSNAM44        DATASET NAME
         LA    R5,FS_DATA_L(,R5)              UPDATE OUTPUT LENGTH
         LA    R6,FS_DATA_L(,R6)              UPDATE OUTPUT ADDRESS
         LA    R7,MNTE#LENGTH(,R7)            NEXT MNTE
         BCT   R8,FS0025                      PROCESS ALL DATASETS
         B     FS0020
FS0230   DS    0H
         ITRACE ID=DATABILT,                                           +
               RDATA1=R5                      .. OUTPUT LENGTH
         STCM  R5,3,NET_LENGTH                SET LENGTH
         B     EXIT0000
PATH_MVC MVC   FS_MOUNT_POINT(0),MNTENTMOUNTPOINT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS   0H
         ITRACE ID=GMN_ERR,                                            +
               DATA1=DXD_RETURN_VALUE,                                 +
               DATA2=DXD_REASON_CODE
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDFS)                       DISPLACEMENT TO WORK AREA
MAX#      DC   A((32760-FS_HEADER_L)/FS_DATA_L)
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDFS                   DSECT
                        SUTLSAVE DSECT=NO

DXD_PARMLIST            DS   0A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A

DXD_RETURN_VALUE        DS   F
DXD_RETURN_CODE         DS   F
DXD_REASON_CODE         DS   F

DXD_MNTE_BUFFER_LENGTH  DS   F
DXD_STAT_BUFFER_LENGTH  DS   F

                        DS  0F
                        BPXYSSTF DSECT=NO,LIST=YES
DXD_STAT_BUFFER_L       EQU  *-SSTF

                        BPXYMNTE DSECT=NO,LIST=YES,MNTE2=YES
DXD_MNTE_BUFFER_L       EQU  *-MNTEH
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
         COPY     FSDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         BPXYSSTF DSECT=YES,LIST=YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCFS
./ ADD NAME=STCIPL   0119-09139-09181-1627-00343-00101-00000-SOURCE
         MACRO
         PDE   &A,&B
         DC    AL2(IPA&A-IPA)                 DISP TO PDE DATA
         DC    CL8'&B'                        DESCRIPTION
         MEND
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCIPL                                                *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the IPL info display.                        *
*                                                                     *
*   Data returned is: IPL date, IPL time, IPL volume volser.          *
*                                                                     *
* ------------------------------------------------------------------- *
STCIPL   CSECT
STCIPL   AMODE 31
STCIPL   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCIPL,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     IPL0000
MODID    DC    CL8'STCIPL'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
IPL0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDIPL,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    IPL0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
IPL0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         LA    R7,IPL
         USING IPL,R7
         LA    R5,NET_HEADER_L                INITIALIZE LENGTH
         L     R1,CVTPTR                      CVT ADDRESS
         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY
         L     R2,CVTSMCA                     SMF COMMUNICATION AREA
         USING SMCABASE,R2                    DEFINE BASE
*---------------------------------------------------------------------*
*        IPL DATE                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=IPLDATE
         MVC   IPL(IPL_L),COMM_BLANKS
         MVC   IPL_NAME(IPL_DATE_L),IPL_DATE
         ZAP   DXD_DATE,SMCAIDTE              COPY IPL DATE
         AP    DXD_DATE,P1900000              ADD CENTURY
         MVC   IPL_DATA-1(L'DATE_EDITWORD),DATE_EDITWORD
         ED    IPL_DATA-1(L'DATE_EDITWORD),DXD_DATE
         LA    R7,IPL_L(,R7)                  NEXT LINE
         LA    R5,IPL_L(,R5)                  UPDATE LENGTH
*---------------------------------------------------------------------*
*        IPL TIME                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=IPLTIME
         MVC   IPL(IPL_L),COMM_BLANKS
         MVC   IPL_NAME(IPL_TIME_L),IPL_TIME
         SR    R0,R0                          CLEAR REGISTER
         ICM   R1,15,SMCAITME                 IPL TIME
         D     R0,F360000                     DIVIDE BY 100THS PER HOUR
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'
         UNPK  IPL_DATA(2),COMM_DWORD+6(2)
         LR    R1,R0                          COPY REMAINDER
         SR    R0,R0                          CLEAR REGISTER
         D     R0,F6000                       100THS PER MINUTE
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'
         UNPK  IPL_DATA+3(2),COMM_DWORD+6(2)
         LR    R1,R0                          COPY REMAINDER
         SR    R0,R0                          CLEAR REGISTER
         D     R0,F100                        100THS PER SECOND
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         OI    COMM_DWORD+7,X'0F'             FORCE SIGN TO X'F'
         UNPK  IPL_DATA+6(2),COMM_DWORD+6(2)
         MVI   IPL_DATA+2,C':'                INSERT DELIMITER
         MVI   IPL_DATA+5,C':'                INSERT DELIMITER
         LA    R7,IPL_L(,R7)                  NEXT LINE
         LA    R5,IPL_L(,R5)                  UPDATE LENGTH
*---------------------------------------------------------------------*
*        IPL VOLUME                                                   *
*---------------------------------------------------------------------*
         ITRACE ID=IPL_VOL
         MVC   IPL(IPL_L),COMM_BLANKS
         MVC   IPL_NAME(IPL_VOLUME_L),IPL_VOLUME
         L     R1,CVTPTR
         L     R2,CVTSYSAD                    SYSRES UCB ADDRESS
         USING UCBOB,R2                       DEFINE BASE
         MVC   IPL_DATA(L'UCBVOLI),UCBVOLI    COPY SYSRES VOLSER
         MVI   IPL_DATA+10,C'('
         MVC   IPL_DATA+11(3),UCBNAME
         MVI   IPL_DATA+14,C')'
         LA    R7,IPL_L(,R7)                  NEXT LINE
         LA    R5,IPL_L(,R5)                  UPDATE LENGTH
*---------------------------------------------------------------------*
*        IPA  data                                                    *
*---------------------------------------------------------------------*
         MVC   IPL(IPL_L),COMM_BLANKS
         LA    R7,IPL_L(,R7)                  NEXT LINE
         LA    R5,IPL_L(,R5)                  UPDATE LENGTH
         MVC   IPL(IPL_L),COMM_BLANKS
         MVC   IPL(IPA_HEADING_L),IPA_HEADING
         LA    R7,IPL_L(,R7)                  NEXT LINE
         LA    R5,IPL_L(,R5)                  UPDATE LENGTH
         L     R1,CVTPTR
         L     R2,CVTECVT                     ECVT ADDRESS
         USING ECVT,R2                        DEFINE BASE
         L     R8,ECVTIPA                     IPA ADDRESS
         USING IPA,R8                         DEFINE BASE
         ITRACE ID=IPA_DATA,                                           +
               RDATA1=R8
         LA    R6,PDE_TABLE
         USING PDE_DSECT,R6
         LA    R3,5                           NBR OF LINES SO FAR
IPL0020  DS    0H
         ITRACE ID=PDE,                                                +
               DATA1=PDE_NAME
         SR    R4,R4
         ICM   R4,3,PDE_DISP                  DISP INTO IPA
         AR    R4,R8                          PLUS BASE
         USING IPAPDE,R4
         MVC   IPL(IPL_L),COMM_BLANKS
         MVC   IPL_NAME(L'PDE_NAME),PDE_NAME  COPY NAME
         SR    R1,R1
         ICM   R1,3,IPAPDESL                  PARAMETER LENGTH
         BZ    IPL0060
         CH    R1,=Y(L'IPL_DATA-10)
         BNH   IPL0030
         LH    R1,=Y(L'IPL_DATA-10)           LIMIT LENGTH
IPL0030  DS    0H
         BCTR  R1,R0
         L     R2,IPAPDESA                    PARAMETER ADDRESS
         EX    R1,PDE_MVC
         CLI   IPAPDEDO+1,0                   DEFAULT?
         BE    IPL0040
         CLI   IPAPDEDO+1,X'FF'               OPERATOR SUPPLIED?
         BE    IPL0050
         MVC   IPL_DATA(2),IPAPDESS           COPY SUFFIX
         B     IPL0060
IPL0040  DS    0H
         MVC   IPL_DATA(L'DEFAULT),DEFAULT
         B     IPL0060
IPL0050  DS    0H
         MVC   IPL_DATA(L'OPERATOR),OPERATOR
IPL0060  DS    0H
         LA    R7,IPL_L(,R7)                  NEXT
         LA    R5,IPL_L(,R5)                  ADD TO LENGTH
         LA    R3,1(,R3)                      ADD 1 TO NBR OF ELEMENTS
         LA    R6,PDE_DSECT_L(,R6)
         CLI   0(R6),X'FF'
         BNE   IPL0020
         ITRACE ID=DATABILT,                                           +
               RDATA1=R3,                                              +
               RDATA2=R5
         STCM  R3,15,IPL_NBR                  NBR OF DATA ELEMENTS
         STCM  R5,3,NET_LENGTH                SET LENGTH
         XC    NET_RC,NET_RC                  SET RETURN CODE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN

PDE_MVC  MVC   IPL_DATA+10(0),0(R2)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDIPL)                      DISPLACEMENT TO WORK AREA
F100      DC   F'100'
F6000     DC   F'6000'
F360000   DC   F'360000'
P1900000  DC   P'1900000'
DEFAULT   DC   C'DEFAULT'
OPERATOR  DC   C'OPERATOR'

DATE_EDITWORD  DC    X'40212020204B202020'

IPL_DATE       DC    C'IPL DATE'
IPL_DATE_L     EQU   *-IPL_DATE

IPL_TIME       DC    C'IPL TIME'
IPL_TIME_L     EQU   *-IPL_TIME

IPL_VOLUME     DC    C'IPL VOLUME'
IPL_VOLUME_L   EQU   *-IPL_VOLUME

IPA_HEADING    DS    0C
               DC    AL1($ATTR_HIGH)
               DC    C'SYS1.PARMLIB parameters'
               DC    AL1($ATTR_NORMAL)
IPA_HEADING_L  EQU   *-IPA_HEADING

         LTORG
PDE_TABLE           DS  0C
                    PDE ALLOC,ALLOC
                    PDE APF,APF
                    PDE APG,APG
                    PDE BLDL,BLDL
                    PDE BLDLF,BLDLF
                    PDE CLOCK,CLOCK
                    PDE CLPA,CLPA
                    PDE CMB,CMB
                    PDE CMD,CMD
                    PDE CON,CON
                    PDE CONT,CONT
                    PDE COUPL,COUPLE
                    PDE CPQE,CPQE
                    PDE CSA,CSA
                    PDE CSCBL,CSCBLOC
                    PDE CVIO,CVIO
                    PDE DEVSU,DEVSUP
                    PDE DIAG,DIAG
                    PDE DUMP,DUMP
                    PDE DUPLE,DUPLEX
                    PDE EXIT,EXIT
                    PDE FIX,FIX
                    PDE GRS,GRS
                    PDE GRSCN,GRSCNF
                    PDE GRSRN,GRSRNL
                    PDE ICS,ICS
                    PDE IOS,IOS
                    PDE IPS,IPS
                    PDE LNK,LNK
                    PDE LNKAU,LNKAUTH
                    PDE LOGCL,LOGCLS
                    PDE LOGLM,LOGLMT
                    PDE LOGRE,LOGREC
                    PDE LPA,LPA
                    PDE MAXCA,MAXCAD
                    PDE MAXUS,MAXUSER
                    PDE MLPA,MLPA
                    PDE MSTRJ,MSTRJCL
                    PDE NONVI,NONVIO
                    PDE NSYSL,NSYSLX
                    PDE NUCMA,NUCMAP
                    PDE OMVS,OMVS
                    PDE OPI,OPI
                    PDE OPT,OPT
                    PDE PAGEO,PAGE(OP)
                    PDE PAGEP,PAGE(PL)
                    PDE PAGNU,PAGENUM
                    PDE PAGTO,PAGTOTL
                    PDE PAK,PAK
                    PDE PLEXC,PLEXCFG
                    PDE PRODP,PRODP
                    PDE PROG,PROG
                    PDE PURGE,PURGE
                    PDE RDE,RDE
                    PDE REAL,REAL
                    PDE RER,RER
                    PDE RSU,RSU
                    PDE RSVNO,RSVNONR
                    PDE RSVST,RSVSTRT
                    PDE SCH,SCH
                    PDE SMF,SMF
                    PDE SMS,SMS
                    PDE SQA,SQA
                    PDE SSN,SSN
                    PDE SVC,SVC
                    PDE SWAP,SWAP
                    PDE SYSNA,SYSNAME
                    PDE SYSP,SYSP
                    PDE VAL,VAL
                    PDE VIODS,VIODSN
                    PDE VRREG,VRREGN
                    PDE RTLSP,RTLS
                    PDE UNIP,UNI
                    PDE ILML,ILMLIB
                    PDE ILMOD,ILMMODE
                    PDE TSO,IKJTSO
                    PDE LIC,LICENSE
                    PDE HVSHARE,VSHAR
                    PDE ILM,ILM
                    PDE DRMOD,DRMODE
                    PDE CEE,CEE
                    PDE PRCPU,PRESCPU
                    DC  X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PDE_DSECT           DSECT
PDE_DISP            DS    AL2
PDE_NAME            DS    CL8
PDE_DSECT_L         EQU   *-PDE_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDIPL   DSECT
         SUTLSAVE DSECT=NO
DXD_DATE DS  PL4
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
         COPY     IPLDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT      DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IEFUCBOB LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAECVT  DSECT=YES,LIST=NO
         IHAIPA   DSECT=YES,LIST=NO,IPAPDE=YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IEESMCA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY ATTR
         COPY REGEQU
         END  STCIPL
./ ADD NAME=STCLLA   0104-09139-09160-1502-00131-00131-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCLLA                                                *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the link list (LLA) display.                 *
*                                                                     *
*   The number of data sets that can be returned is limited by the    *
*   I/O area size (VTAM limits the length to 32767).  If there are    *
*   more data sets in the link list than can be copied to the I/O     *
*   area, the return code will be set to 4 to inform the user that    *
*   the data has been truncated.                                      *
*                                                                     *
*   Data returned is: the number of data sets in the list and a       *
*   table of 44 byte long data set names.                             *
*                                                                     *
* ------------------------------------------------------------------- *
STCLLA   CSECT
STCLLA   AMODE 31
STCLLA   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCLLA,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     LLA0000
MODID    DC    CL8'STCLLA'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
LLA0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDLLA,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    LLA0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
LLA0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE I/O AREA BASE
         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO
         L     R1,CVTPTR                      CVT ADDRESS
         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY
         L     R8,CVTLLTA                     LINKLIST TABLE ADDRESS
         CLC   LLT,0(R8)                      CONSTANT 'LLT ' PRESENT?
         BNE   ERR0010                        NO...
         L     R7,4(R8)                       NUMBER OF ENTRIES IN LLA
         C     R7,MAX#                        MORE THAN WILL FIT?
         BNH   LLA0020                        NO
         ITRACE ID=OVERMAX,                   TOO MANY                 +
               RDATA1=R7                      .. TRACE FULL NUMBER
         L     R7,MAX#                        LIMIT TO NUMBER THAT FIT
         MVC   NET_RC,X0004                   SET RETURN CODE TO 4
LLA0020  DS    0H
         LA    R8,8(,R8)                      FIRST NAME/LENGTH
         STCM  R7,3,LLA_NBR_DSNS              NUMBER RETURNED
         LA    R6,LLA_DATA                    INITIAL OUTPUT ADDRESS
         LA    R5,NET_HEADER_L+LLA_HEADER_L   INITIALIZE OUTPUT LENGTH
         USING LLA_DATA,R6                    DEFINE BASE
LLA0030  DS    0H
         SR    R1,R1                          CLEAR FOR DSN LENGTH
         IC    R1,0(R8)                       LENGTH OF DSNAME
         MVC   LLA_DSN,COMM_BLANKS            INITIALIZE DSN
         BCTR  R1,0                           FOR EXECUTE
         EX    R1,DSNMVC                      MOVE NAME
         LA    R8,45(,R8)                     NEXT DATASET
         LA    R5,LLA_DATA_L(,R5)             UPDATE OUTPUT LENGTH
         LA    R6,LLA_DATA_L(,R6)             UPDATE OUTPUT ADDRESS
         BCT   R7,LLA0030                     PROCESS ALL DATASETS
         ITRACE ID=DATABILT,                                           +
               RDATA1=R5                      .. OUTPUT LENGTH
         STCM  R5,3,NET_LENGTH                SET LENGTH
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS   0H
         ITRACE ID=NOLLT
         ABEND $U0010,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
DSNMVC   MVC   LLA_DSN(0),1(R8)               COPY DATASET NAME
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDLLA)                      DISPLACEMENT TO WORK AREA
MAX#     DC    A((32760-LLA_HEADER_L)/LLA_DATA_L)
LLT      DC    CL4'LLT '
X0004    DC    X'0004'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDLLA   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
         COPY     LLADATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCLLA
./ ADD NAME=STCLRAD  0100-09250-09250-1028-00050-00050-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCLRAD                                               *
*                                                                     *
*  STC LERAD exit                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
STCLRAD  CSECT
STCLRAD  AMODE 31
STCLRAD  RMODE ANY
         USING STCLRAD,R15           DEFINE BASE
         B     LERAD010              SKIP ADDRESS AND EYECATCHER
         DC    CL8'STCLRAD'          MODULE NAME
         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY
LERAD010 DS    0H
         USING IFGRPL,R1             DEFINE BASE
         L     R2,RPLAAREA           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R2           DEFINE BASE
         LA    R3,GOODRC             GOOD RETURN CODES TABLE
LERAD020 DS    0H
         CLI   0(R3),X'FF'           END OF TABLE
         BE    LERAD030              NO GOOD
         CLC   RPL6RC,0(R3)          ACCEPTABLE?
         BE    EXIT0000              YES, EXIT
         LA    R3,4(R3)              NEXT CODE
         B     LERAD020              LOOP
LERAD030 DS    0H
         L     R4,RPL6RC             MAKE RC EASY TO FIND
         DC    H'0'
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         BR    R14                   RETURN TO CALLER                   ASE01700
* ------------------------------------------------------------------ *
*              CONSTANTS                                             *
* ------------------------------------------------------------------ *
GOODRC   DS    0C
         DC    X'00000000'           GOOD
         DC    X'00000001'           CNOS ACCEPTED BY PARTNER
         DC    X'FF'
         IFGRPL AM=VTAM
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  STCLRAD
./ ADD NAME=STCMAIN  0144-09140-09173-1702-00758-00606-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Name: STCMAIN                                                      *
*                                                                     *
*  Purpose: STC Mainline                                              *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
STCMAIN  CSECT
STCMAIN  AMODE 31
STCMAIN  RMODE ANY
         USING STCMAIN,R11                    DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS
         LR    R11,R15                        COPY BASE
         B     @0000000                       BRANCH AROUND EYECATCHER
MODID    DC    CL8'STCMAIN'                   MODULE NAME
         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY
* ------------------------------------------------------------------- *
*        Acquire storage for work areas                               *
* ------------------------------------------------------------------- *
@0000000 DS    0H
         L     R3,DXD_SIZE                    WORK AREA SIZE
         GETMAIN RU,                          ACQUIRE WORK AREA STORAGE+
               LV=(R3),                       .. WORK AREA SIZE        +
               LOC=ANY                        .. MAY BE ABOVE OR BELOW
         LR    R5,R1                          COPY STORAGE ADDRESS
         LR    R10,R1                         COPY STORAGE ADDRESS
         LR    R2,R1                          COPY WORK AREA ADDRESS
         SR    R1,R1                          CLEAR REGISTER
         MVCL  R2,R0                          CLEAR WORK AREA
         A     R10,DXD_START                  PLUS DISPLACEMENT
         ST    R13,4(,R10)                    CHAIN SAVE AREAS
         ST    R10,8(,R13)                    OUR SAVE AREA TO CALLER'S
         LR    R13,R10                        SET SAVE AREA ADDRESS
         USING DXDMAIN,R13                    DEFINE NEW BASE
         MVC   DXD_ID,MODID                   IDENTIFY WORK AREA OWNER
         MVC   DXD_ENQ(ENQL),ENQI             INITIALIZE ENQ LIST FORM
         MVC   DXD_DEQ(DEQL),DEQI             INITIALIZE DEQ LIST FORM
* ------------------------------------------------------------------- *
*        Load common data module  (STCCOMM)                           *
* ------------------------------------------------------------------- *
         LOAD  EP=STCCOMM                     LOAD COMMON DATA MODULE
         LR    R12,R0                         COPY TO PERMANENT BASE
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
* ------------------------------------------------------------------- *
*        Initialize common area                                       *
* ------------------------------------------------------------------- *
         ST    R5,COMM_DXD_ADDRESS            WORK AREA ADDRESS
         MVC   COMM_DXD_LENGTH,DXD_SIZE
         ST    R11,AMAIN                      MAINLINE'S ADDRESS
         MVC   AATTN,VATTN                    VTAM ATTN EXIT ADDRESS
         MVC   ALRAD,VLRAD                    LERAD EXIT ADDRESS
         MVC   APRTQ,VPRTQ                    PRINT QUEUEING ADDR
* ------------------------------------------------------------------- *
*        Acquire storage for trace table                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE                      TRACE TABLE SIZE
         GETMAIN RU,                          STORAGE FOR TRACE TABLE  +
               LV=(R3),                       .. SIZE IS IN R3         +
               LOC=ANY                        .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR                      SAVE ADDRESS
         SR    R0,R0
         TM    TRADDR+3,X'07'                 ON 32-BYTE BOUNDARY?
         BNO   INIT0010                       YES
         SRL   R1,5                           SHIFT OUT LOW BITS ..
         SLL   R1,5                           .. TO ROUND TO BOUNDARY
         LA    R1,32(,R1)                     PLUS 32
         LA    R0,TRENTRYL                    1 LESS ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST                     FIRST TRACE ENTRY
         ST    R1,TRCURR                      CURRENT TRACE ENTRY
         A     R1,TRSIZE                      LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)                MINUS 1 ENTRY
         SR    R1,R0                          MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST                      LAST TRACE ENTRY ADDRESS
         ITRACE ID=INITIAL
* ------------------------------------------------------------------- *
*        ATTACH print sub-task                                        *
* ------------------------------------------------------------------- *
INIT0020 DS    0H
         MVC   DXD_TASK,PRINT
         MVC   DXD_ATTACH(ATTCHL),ATTACH_I
         LA    R2,PRT_TERM_ECB                TERMINATION ECB'S ADDRESS
         LA    R3,DXD_APARM                   PARM LIST ADDRESS
         ITRACE ID=ATCHPRT                    ATTACHING PRINT SUBTASK
         ATTACH EP=STCPRTS,                   ATTACH PRINT SUBTASK     +
               PARAM=((R12)),                 .. STCCOMM ADDRESS       +
               ECB=(R2),                      .. TERMINATION ECB       +
               PURGE=QUIESCE,                 .. FINISH UP I/O         +
               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +
               SF=(E,DXD_ATTACH)              ..
         LTR   R15,R15                        ATTACH SUCCESSFUL?
         BNZ   ERR0010                        NO
         ST    R1,PRT_TCB                     SAVE TCB ADDRESS
         ITRACE ID=PRTOK,                     ATTACH SUCCESSFUL        +
               RDATA1=R1
         OI    COMM_TASKS,$TASKS_PRINT        PRINT SUBTASK IS ACTIVE
* ------------------------------------------------------------------- *
*        Print start-up messages                                      *
* ------------------------------------------------------------------- *
         MVI   PRT_CC,C' '                    SINGLE SPACE
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         MVI   PRT_COMMAND,$PRT_HEAD          COMMAND (PRINT HEADING)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        ADD REQUEST TO QUEUE
         MVC   PRT_MSGID(MSG01L),MSG01
         BAL   R9,PRT0000                     PRINT MESSAGE
         MVC   PRT_MSGID(MSG02L),MSG02
         BAL   R9,PRT0000                     PRINT MESSAGE
* ------------------------------------------------------------------- *
*        Call parameter interpreter                                   *
* ------------------------------------------------------------------- *
INIT0030 DS    0H
         LOAD  EP=STCPARM                     LOAD PARM CONVERTER
         LR    R15,R0                         COPY ENTRY POINT
         ITRACE ID=CALLPARM,                                           +
               RDATA1=R15
         BALR  R14,R15                        LINK TO PARM INTERPRETER
         ITRACE ID=PARM_X
         DELETE EP=STCPARM                    DELETE PARM cONVERTER
         TM    COMM_FLAG,$ABORT               ERRORS IN PARAMETERS?
         BO    ERR0020                        YES
         CLC   COMM_APPL_NAME,COMM_BLANKS     APPL NAME GIVEN?
         BNE   INIT0040                       YES
         OC    COMM_PORT,COMM_PORT            PORT GIVEN
         BZ    ERR0030                        NO
* ------------------------------------------------------------------- *
*        Set effective userid                                         *
* ------------------------------------------------------------------- *
INIT0040 DS    0H
         ITRACE ID=SET_UID
         CALL  BPX1SEU,                       CALL UNIX SERVICE        +
               (ZERO,                                                  +
               DXD_RETURN_VALUE,                                       +
               DXD_RETURN_CODE,                                        +
               DXD_REASON_CODE),                                       +
               VL,                                                     +
               MF=(E,DXD_PARMLIST)
         ITRACE ID=RC,                                                 +
               DATA1=DXD_RETURN_VALUE,                                 +
               DATA2=DXD_REASON_CODE
         TM    DXD_RETURN_VALUE,X'80'         SUCCESSFUL?
         BZ    INIT0050                       YES
         DC    H'0'
* ------------------------------------------------------------------- *
*        ATTACH console subtask                                       *
* ------------------------------------------------------------------- *
INIT0050 DS    0H
         MVC   DXD_TASK,CONSOLE
         LA    R2,CONS_TERM_ECB               TERMINATION ECB
         LA    R3,DXD_APARM                   PARM LIST ADDRESS
         ITRACE ID=ATCHCONS                   ATTACHING CONSOLE SUBTASK
         ATTACH EP=STCCONS,                   ATTACH CONSOLE SUBTASK   +
               PARAM=((R12)),                 .. STCCOMM ADDRESS       +
               ECB=(R2),                      .. TERMINATION ECB       +
               PURGE=QUIESCE,                 .. FINISH UP I/O         +
               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +
               SF=(E,DXD_ATTACH)              ..
         LTR   R15,R15                        ATTACH SUCCESSFUL?
         BNZ   ERR0010                        NO
         ST    R1,CONS_TCB                    SAVE TCB ADDRESS
         ITRACE ID=CONSOK,                    SUBTASK ATTACH SUCCESSFUL+
               RDATA1=R1
         OI    COMM_TASKS,$TASKS_CONSOLE      CONSOLE SUBTASK IS ACTIVE
* ------------------------------------------------------------------- *
*        ATTACH VTAM SUBTASK                                          *
* ------------------------------------------------------------------- *
         CLC   COMM_APPL_NAME,COMM_BLANKS     APPLID GIVEN?
         BE    INIT0060                       NO
         MVC   DXD_TASK,VTAM
         LA    R2,VTAM_TERM_ECB               TERMINATION ECB
         LA    R3,DXD_APARM                   PARM LIST ADDRESS
         ITRACE ID=ATCHVTAM                   ATTACHING VTAM
         ATTACH EP=VTAMSUB,                   ATTACH VTAM SUBTASK      +
               PARAM=((R12)),                 .. STCCOMM ADDRESS       +
               ECB=(R2),                      .. TERMINATION ECB       +
               PURGE=QUIESCE,                 .. FINISH UP I/O         +
               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +
               SF=(E,DXD_ATTACH)              ..
         LTR   R15,R15                        ATTACH SUCCESSFUL?
         BNZ   ERR0010                        NO
         ST    R1,VTAM_TCB                    SAVE TCB ADDRESS
         ITRACE ID=VTAMOK,                    SUBTASK ATTACH SUCCESSFUL+
               RDATA1=R1
         OI    COMM_TASKS,$TASKS_VTAM         VTAM SUBTASK IS ACTIVE
* ------------------------------------------------------------------- *
*        ATTACH TCP/IP SUBTASK                                        *
* ------------------------------------------------------------------- *
INIT0060 DS    0H
         OC    COMM_PORT,COMM_PORT            PORT GIVEN
         BZ    PROC0000                       NO
         MVC   DXD_TASK,TCPIP
         LA    R2,TCPIP_TERM_ECB              TERMINATION ECB
         LA    R3,DXD_APARM                   PARM LIST ADDRESS
         ITRACE ID=ATCH_IP                    ATTACHING TCPIP SUBTASK
         ATTACH EP=TCPIPSUB,                  ATTACH TCPIP SUBTASK     +
               PARAM=((R12)),                 .. STCCOMM ADDRESS       +
               ECB=(R2),                      .. TERMINATION ECB       +
               PURGE=QUIESCE,                 .. FINISH UP I/O         +
               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +
               SF=(E,DXD_ATTACH)              ..
         LTR   R15,R15                        ATTACH SUCCESSFUL?
         BNZ   ERR0010                        NO
         ST    R1,TCPIP_TCB                   SAVE TCB ADDRESS
         ITRACE ID=TCPIP_OK,                  SUBTASK ATTACH SUCCESSFUL+
               RDATA1=R1
         OI    COMM_TASKS,$TASKS_TCPIP        TCPIP SUBTASK IS ACTIVE
* ------------------------------------------------------------------- *
*                                                                     *
*    Wait for                                                         *
*       The NET ECB to be posted by STCATTN or TCPIPSUB               *
*       The console ECB                                               *
*       One of the user subtasks to terminate                         *
*                                                                     *
* ------------------------------------------------------------------- *
PROC0000 DS    0H
         LA    R2,2                           INITIALIZE NBR OF ECB'S
         ICM   R10,15,COMM_USERS              1ST USER
         BZ    PROC0020                       NO USERS
PROC0010 DS    0H
         LA    R2,1(,R2)                      ADD 1 TO NBR OF TASKS
         ITRACE ID=ADD,                                                +
               RDATA1=R2
         ICM   R10,15,USER_NEXT               ANOTHER USER?
         BNZ   PROC0010                       YES
PROC0020 DS    0H
         LR    R3,R2                          COPY NBR OF ECBS
         SLL   R3,2                           MULITPLY BY 4
         ITRACE ID=GETLIST,                                            +
               RDATA1=R2,                                              +
               RDATA2=R3
         ST    R2,DXD_ECBLIST_NBR             SAVE NBR OF ECB'S
         ST    R3,DXD_ECBLIST_LENGTH          SAVE LENGTH OF ECB LIST
         GETMAIN RU,                                                   +
               LV=(R3),                                                +
               LOC=ANY
         ST    R1,DXD_ECBLIST_ADDR            SAVE ECB LIST ADDRESS
         LR    R4,R1
         ITRACE ID=ECBLIST,                                            +
               RDATA1=R4
         LA    R0,COMM_TERM_ECB               ECB POSTED BY STCCONS
         ST    R0,0(,R1)                      SAVE ECB ADDRESS
         LA    R0,COMM_NET_ECB                ATTN EXIT ECB ADDRESS
         ST    R0,4(,R1)                      SAVE ECB ADDRESS
         LA    R1,8(,R1)                      UPDATE CURRENT ADDR
         ICM   R10,15,COMM_USERS              FIRST USER
         BZ    PROC0040                       NO USERS
PROC0030 DS    0H
         LA    R0,USER_TERM_ECB               USER'S TERMINATION ECB
         ST    R0,0(,R1)                      SAVE ADDRESS
         LA    R1,4(,R1)                      UPDATE ADDRESS
         ICM   R10,15,USER_NEXT               ANOTHER USER?
         BNZ   PROC0030                       YES
PROC0040 DS    0H
         SH    R1,H4                          MINUS 1 ECB
         OI    0(R1),X'80'                    FLAG END OF LIST
         ITRACE ID=MAINWAIT                   MAINLINE IS WAITING
         WAIT  1,ECBLIST=(R4)                 WAIT
         ITRACE ID=WOKEUP                     MAILINE IS RUNNING
         L     R0,DXD_ECBLIST_LENGTH
         FREEMAIN RU,                                                  +
               A=(R4),                                                 +
               LV=(0)
         TM    COMM_TERM_ECB,X'40'            TERMINATION ECB POSTED?
         BO    EXIT0000                       YES
         XC    COMM_NET_ECB,COMM_NET_ECB      RESET ECB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ENQ   MF=(E,DXD_ENQ)                 ENQ USER BLOCK CHAIN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R1,COMM_USERS                  CHAIN POINT
         ICM   R10,15,COMM_USERS              FIRST NEW USER
         BZ    PROC0000                       NO USERS
PROC0060 DS    0H
         TM    USER_STATUS,$USER_LOST         LOST CONNECTION?
         BO    PROC0100                       YES
         TM    USER_STATUS,$USER_DEALLOCATE   CONNECTION DEALLOCATED?
         BO    PROC0110
         TM    USER_TERM_ECB,X'40'            USER TASK TERMINATED?
         BO    PROC0120
         TM    USER_STATUS,$USER_INITIAL      IN INITIAL STATE?
         BO    PROC0070                       YES
         B     PROC0140                       JUST ANOTHER STUPID USER
PROC0070 DS    0H
         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?
         BO    PROC0080                       YES
         MVC   PRT_MSGID(MSG17L),MSG17
         MVC   PRT_MSGID+(MSG17LU-MSG17)(L'MSG17LU),USER_LU
         UNPK  PRT_MSGID+(MSG17CID-MSG17)(9),USER_CID(5)
         TR    PRT_MSGID+(MSG17CID-MSG17)(8),HEXCHAR
         MVI   PRT_MSGID+(MSG17CID-MSG17)+8,C' '
         B     PROC0090
PROC0080 DS    0H
         MVC   PRT_MSGID(MSG09L),MSG09
         MVC   PRT_MSGID+(MSG09IP-MSG09)(L'MSG09IP),USER_IP_ADDRESS
PROC0090 DS    0H
         BAL   R9,PRT0000                     PRINT MESSAGE
         ITRACE ID=NEWUSER,                   NEW USER                 +
               RDATA1=R10,                                             +
               DATA2=USER_ID
         GETMAIN RU,                                                   +
               LV=32760,                                               +
               LOC=ANY
         ITRACE ID=USER_IO,                                            +
               RDATA1=R1
         ST    R1,USER_IO                     SAVE I/O AREA ADDRESS
         LA    R2,USER_TERM_ECB               TERMINATION ECB'S ADDRESS
         LA    R3,DXD_APARM                   PARM LIST ADDRESS
         ST    R12,USER_COMM                  SET STCCOMM ADDRESS
         ATTACH EP=STCUSER,                   ATTACH USER SUBTASK      +
               PARAM=((R10)),                 .. PARAMETER IS USERBLOK +
               ECB=(R2),                      .. TERMINATION ECB       +
               PURGE=QUIESCE,                 .. FINISH UP I/O         +
               MF=(E,(R3)),                   .. SUBTASK PARM LIST     +
               SF=(E,DXD_ATTACH)              ..
         LTR   R15,R15                        ATTACH SUCCESSFUL?
         BNZ   ERR0010                        NO
         ST    R1,USER_TCB                    SAVE TCB ADDRESS
         NI    USER_STATUS,255-$USER_INITIAL  TURN OFF INITIAL STATE
         OI    USER_STATUS,$USER_ACTIVE       SUBTASK ATTACHED
         B     PROC0140
PROC0100 DS    0H
         ITRACE ID=LOST,                                               +
               DATA1=USER_LU,                                          +
               DATA2=USER_ID
         B     PROC0130
PROC0110 DS    0H
         ITRACE ID=DEALLOC,                                            +
               DATA1=USER_LU,                                          +
               DATA2=USER_ID
         B     PROC0130
PROC0120 DS    0H
         ITRACE ID=ABENDED,                                            +
               RDATA1=R10,                                             +
               DATA2=USER_ID
PROC0130 DS    0H
         BAL   R8,PROC0200                    CLEAN-UP THIS USER
         B     PROC0150
PROC0140 DS    0H
         ICM   R10,15,USER_NEXT               NEXT USER
PROC0150 DS    0H
         LTR   R10,R10                        ANOTHER USER?
         BNZ   PROC0060                       YES
         ITRACE ID=DEQ
         DEQ   MF=(E,DXD_DEQ)                 UNLOCK USER CHAIN
         B     PROC0000                       RE-BUILD WAIT LIST
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PROC0200 DS    0H
         LA    R1,USER_TERM_ECB
         ITRACE ID=WAIT,                                               +
               RDATA1=R1
         WAIT  ECB=USER_TERM_ECB              WAIT FOR SUBTASK
         ITRACE ID=NETCLEAN
         TM    USER_STATUS,$USER_CLEANUP      NETWORK CLEANUP NEEDED?
         BO    PROC0210                       NO.. ALREADY DONE
         MVI   USER_NET_COMMAND,$USER_NET_CLEANUP
         L     R15,USER_NET                   NETWORK FUNCTION EP
         BALR  R14,R15                        ALLOW CLEAN-UP
         ITRACE ID=CLEAN_X
PROC0210 DS    0H
         L     R1,USER_IO                     I/O AREA ADDRESS
         ITRACE ID=FREE_IO,                                            +
               RDATA1=R1
         FREEMAIN RU,                         FREE I/O AREA            +
               A=(1),                                                  +
               LV=32760
         ITRACE ID=DETACH,                                             +
               DATA1=USER_TCB
         DETACH USER_TCB                      DETACH USER SUBTASK
         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?
         BO    PROC0220
         MVC   PRT_MSGID(MSG03L),MSG03
         MVC   PRT_MSGID+(MSG03ID-MSG03)(L'MSG03ID),USER_ID
         UNPK  PRT_MSGID+(MSG03RC-MSG03)(9),USER_TERM_ECB(5)
         TR    PRT_MSGID+(MSG03RC-MSG03)(8),HEXCHAR
         MVI   PRT_MSGID+(MSG03RC-MSG03)+8,C' '
         MVC   PRT_MSGID+(MSG03LU-MSG03)(L'MSG03LU),USER_LU
         B     PROC0230
PROC0220 DS    0H
         MVC   PRT_MSGID(MSG08L),MSG08
         MVC   PRT_MSGID+(MSG08ID-MSG08)(L'MSG08ID),USER_ID
         UNPK  PRT_MSGID+(MSG08RC-MSG08)(9),USER_TERM_ECB(5)
         TR    PRT_MSGID+(MSG08RC-MSG08)(8),HEXCHAR
         MVI   PRT_MSGID+(MSG08RC-MSG08)+8,C' '
         MVC   PRT_MSGID+(MSG08IP-MSG08)(L'MSG08IP),USER_IP_ADDRESS
PROC0230 DS    0H
         BAL   R9,PRT0000                     PRINT
         OC    USER_TERM_ECB+1(3),USER_TERM_ECB+1
         BZ    PROC0235
         ITRACE ID=NOTCLEAN,                                           +
               DATA1=USER_TERM_ECB
         DC    H'0'
PROC0235 DS    0H
         ICM   R1,15,USER_PREV                PREVIOUS BLOCK?
         BZ    PROC0240                       NO
PREV     USING USERBLOK,R1
         MVC   PREV.USER_NEXT,USER_NEXT       CHAIN NEXT TO PREVIOUS
         DROP  PREV
PROC0240 DS    0H
         ICM   R1,15,USER_NEXT                NEXT BLOCK?
         BZ    PROC0250                       NO
NEXT     USING USERBLOK,R1
         MVC   NEXT.USER_PREV,USER_PREV       CHAIN PREVIOUS TO NEXT
         DROP  NEXT
PROC0250 DS    0H
         C     R10,COMM_USERS                 1ST USER ON CHAIN?
         BNE   PROC0260                       NO
         MVC   COMM_USERS,USER_NEXT           COPY NEXT USER'S ADDR
PROC0260 DS    0H
         LR    R1,R10                         COPY USERBLOK ADDR
         ICM   R10,15,USER_NEXT               NEXT BLOCK ON CHAIN
         ITRACE ID=FREEUSER,                                           +
               RDATA1=R1
         FREEMAIN RU,                         FREE USERBLOK            +
               A=(R1),                                                 +
               LV=USER_L
         BR    R8
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=ATCHFAIL                   SUBTASK ATTACH FAILED
         STH   R15,DXD_RC                     SAVE RETURN CODE
         MVC   PRT_MSGID(MSG04L),MSG04
         MVC   PRT_MSGID+(MSG04TSK-MSG04)(L'MSG04TSK),DXD_TASK
         UNPK  PRT_MSGID+(MSG04R-MSG04)(5),DXD_RC(3)
         TR    PRT_MSGID+(MSG04R-MSG04)(L'MSG04R),HEXCHAR
         MVI   PRT_MSGID+(MSG04R-MSG04)+4,C' '
         BAL   R9,PRT0000                     PRINT MESSAGE
         ABEND $U0001,DUMP,,USER              TIME TO FIX SUTL
ERR0020  DS    0H
         MVC   PRT_MSGID(MSG05L),MSG05        ERRORS IN PARAMETERS
         BAL   R9,PRT0000                     PRINT MESSAGE
         B     EXIT0000                       AND EXIT
ERR0030  DS    0H
         MVC   PRT_MSGID(MSG06L),MSG06
         BAL   R9,PRT0000                     PRINT MESSAGE
         B     EXIT0000                       AND EXIT
ERR0040  DS    0H
         ITRACE ID=DTCHFAIL                   SUBTASK DETACH FAILED
         STH   R15,DXD_RC                     SAVE RETURN CODE
         MVC   PRT_MSGID(MSG07L),MSG07
         MVC   PRT_MSGID+(MSG07TSK-MSG07)(L'MSG07TSK),DXD_TASK
         UNPK  PRT_MSGID+(MSG07R-MSG07)(5),DXD_RC(3)
         TR    PRT_MSGID+(MSG07R-MSG07)(L'MSG07R),HEXCHAR
         MVI   PRT_MSGID+(MSG07R-MSG07)+4,C' '
         BAL   R9,PRT0000                     PRINT MESSAGE
         ABEND $U0002,DUMP,,USER              TIME TO FIX SUTL
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        A REQUEST TO QUEUE
         BR    R9                             COMPLETE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=STARTEOJ
         MVC   PRT_MSGID(MSG11L),MSG11
         BAL   R9,PRT0000                     PRINT MESSAGE
         OC    COMM_USERS,COMM_USERS          ANY USERS LOGGED IN?
         BZ    EXIT0030                       NO
         MVC   PRT_MSGID(MSG12L),MSG12
         BAL   R9,PRT0000                     PRINT MESSAGE
         ITRACE ID=ENQ
         ENQ   MF=(E,DXD_ENQ)                 ENQ USER CHAIN
EXIT0010 DS    0H
         ICM   R10,15,COMM_USERS              FIRST USER
         BZ    EXIT0020
         ITRACE ID=CLEAN_UP,                                           +
               RDATA1=R10,                                             +
               DATA2=USER_ID
         POST  USER_NET_ECB
         BAL   R8,PROC0200                    CLEAN-UP THIS USER
         B     EXIT0010
EXIT0020 DS    0H
         MVC   PRT_MSGID(MSG13L),MSG13
         BAL   R9,PRT0000                     PRINT MESSAGE
         ITRACE ID=DEQ
         DEQ   MF=(E,DXD_DEQ)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0030 DS    0H
         ITRACE ID=EOJ2
         OI    COMM_EOJ,$EOJ1+$EOJ2          SET EOJ STAGE 2
         TM    COMM_TASKS,$TASKS_VTAM        VTAM SUBTASK ATTACHED?
         BNO   EXIT0040                      NO
         MVC   PRT_MSGID(MSG14L),MSG14
         BAL   R9,PRT0000                    PRINT MESSAGE
         ITRACE ID=POSTVTAM
         POST  VTAM_WORK_ECB                 WAKE UP VTAM SUBTASK
         ITRACE ID=WAIT
         WAIT  ECB=VTAM_TERM_ECB             WAIT FOR IT TO TERMINATE
         ITRACE ID=DTCHVTAM,                                           +
               DATA1=VTAM_TERM_ECB,                                    +
               DATA2=VTAM_TCB
         DETACH VTAM_TCB                     DETACH VTAM SUBTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0040 DS    0H
         TM    COMM_TASKS,$TASKS_TCPIP       TCP/IP SUBTASK ATTACHED?
         BNO   EXIT0050                      NO
         MVC   PRT_MSGID(MSG15L),MSG15
         BAL   R9,PRT0000                    PRINT MESSAGE
         ITRACE ID=POST_IP
         POST  TCPIP_WORK_ECB                WAKE UP TCP/IP SUBTASK
         ITRACE ID=WAIT
         WAIT  ECB=TCPIP_TERM_ECB            WAIT FOR IT TO TERMINATE
         ITRACE ID=DTCH_IP,                                            +
               DATA1=TCPIP_TERM_ECB,                                   +
               DATA2=TCPIP_TCB
         DETACH TCPIP_TCB                    DETACH TCPIP SUBTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0050 DS    0H
         OI    COMM_EOJ,$EOJ1+$EOJ2+$EOJ3    SET EOJ STAGE 3
         TM    COMM_TASKS,$TASKS_CONSOLE     CONSOLE TASK ATTACHED?
         BNO   EXIT0060                      NO
         MVC   PRT_MSGID(MSG16L),MSG16
         BAL   R9,PRT0000                    PRINT MESSAGE
         ITRACE ID=POSTCONS
         POST  CONS_WORK_ECB
         ITRACE ID=WAIT
         WAIT  ECB=CONS_TERM_ECB             WAIT FOR CONSOLE TASK
         ITRACE ID=DTCHCONS,                 DETACHING CONSOLE SUBTASK +
               DATA1=CONS_TERM_ECB,                                    +
               DATA2=CONS_TCB
         DETACH CONS_TCB                     DETACH CONSOLE SUBTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0060 DS    0H
         ITRACE ID=EOJ8
         MVC   PRT_MSGID(MSG90L),MSG90
         BAL   R9,PRT0000                    PRINT MESSAGE
         OI    COMM_EOJ,$EOJ1+$EOJ2+$EOJ3+$EOJ4+$EOJ5+$EOJ6+$EOJ7+$EOJ8
         ITRACE ID=PRT_EOJ                   SHUTTING DOWN PRINT
         POST  PRT_WORK_ECB                  SHUTDOWN PRINT TASK
         WAIT  ECB=PRT_TERM_ECB              WAIT FOR PRINT SUBTASK
         ITRACE ID=DTCH_PRT,                                           +
               DATA1=PRT_TERM_ECB,                                     +
               DATA2=PRT_TCB
         DETACH PRT_TCB                      DETACH PRINT SUBTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R0,TRSIZE                     TRACE TABLE SIZE
         L     R1,TRADDR                     TRACE TABLE ADDRESS
         FREEMAIN RU,                        FREEMAIN TRACE TABLE      +
               A=(1),                                                  +
               LV=(0)
         L     R2,COMM_DXD_ADDRESS           SAVE WORK AREA ADDRESS
         L     R3,DXD_SIZE                   WORK AREA SIZE
         DELETE EP=STCCOMM                   DELETE COMMON MODULE
         L     R13,4(,R13)                   RESTORE R13
         FREEMAIN RU,                        FREEMAIN WORK AREA        +
               A=(R2),                                                 +
               LV=(R3)
         LM    R14,R12,12(R13)               RESTORE REGISTERS
         SR    R15,R15                       CLEAR REGISTER
         BR    R14                           EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDMAIN)           DISPLACEMENT TO WORK AREA
DXD_SIZE CXD                        WORK AREA TOTAL SIZE
VATTN    DC    V(STCATTN)           VTAM ATTENTION EXIT ENTRY POINT
VLRAD    DC    V(STCLRAD)           VTAM LERAD EXIT ENTRY POINT
VNET     DC    V(STCNET)            NETWORK FUNCTIONS
VPRTQ    DC    V(STCPRTQ)           PRINTER MODULE ENTRY POINT
VTCPIP   DC    V(STCTCPIP)          TCPIP FUNCTIONS
VVTAM    DC    V(STCVTAM)           VTAM FUNCTIONS
ATTACH_I ATTACH EP=STCPRT,          ATTACH LIST FORM                   +
               ECB=*,               .. TERMINATION ECB'S ADDRESS       +
               PURGE=QUIESCE,       .. FINISH UP I/O IN PROGRESS       +
               SF=L                 .. LIST FORM
ATTCHL   EQU   *-ATTACH_I
ENQI     ENQ   (QNAME,RNAME,E,,STEP),                                  +
               RET=HAVE,                                               +
               SMC=NONE,                                               +
               MF=L
ENQL     EQU   *-ENQI
DEQI     DEQ   (QNAME,RNAME,,STEP),                                    +
               RMC=NONE,                                               +
               MF=L
DEQL     EQU   *-DEQI

ZERO     DC    F'0'

H4       DC    H'4'

HEXCHAR  EQU   *-C'0'
         DC    C'0123456789ABCDEF'

QNAME    DC    CL8'SUTL'
RNAME    DC    C'USERBLOK CHAIN'
PRINT    DC    CL8'PRINT'
CONSOLE  DC    CL8'CONSOLE'
TCPIP    DC    CL8'TCP/IP'
VTAM     DC    CL8'VTAM'
MSG01    DS    0C
         DC    CL11'STCMAIN01I'
         DC    C'Print subtask attached'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'STCMAIN02I'
         DC    C'Initialization starting'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'STCMAIN03I'
         DC    C'User subtask for '
MSG03ID  DC    CL8' '
         DC    C', using VTAM LU '
MSG03LU  DC    CL8' '
         DC    C'terminated, ECB='
MSG03RC  DC    CL8' '
         DC    C' '
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'STCMAIN04E'
MSG04TSK DC    CL8' '
         DC    C' subtask attach failed, RC='
MSG04R   DC    CL4' '
         DC    C' execution aborted'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'STCMAIN05E'
         DC    C'Error(s) detected in control statements, execution abo+
               rted'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'STCMAIN06E'
         DC    C'APPLID or PORT is required'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'STCMAIN07E'
MSG07TSK DC    CL8' '
         DC    C' subtask detach failed, RC='
MSG07R   DC    CL4' '
         DC    C' '
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'STCMAIN08I'
         DC    C'User subtask for '
MSG08ID  DC    CL8' '
         DC    C', IP address '
MSG08IP  DC    CL15' '
         DC    C' terminated, ECB='
MSG08RC  DC    CL8' '
         DC    C' '
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'STCMAIN09I'
         DC    C'Attaching subtask for USER with IP address '
MSG09IP  DC    CL15' '
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'STCMAIN10I'
         DC    C'Termination beginning, logging off users'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'STCMAIN11I'
         DC    C'Shutting down'
MSG11L   EQU   *-MSG11
MSG12    DS    0C
         DC    CL11'STCMAIN12I'
         DC    C'Logging off users'
MSG12L   EQU   *-MSG12
MSG13    DS    0C
         DC    CL11'STCMAIN13I'
         DC    C'All users logged off'
MSG13L   EQU   *-MSG13
MSG14    DS    0C
         DC    CL11'STCMAIN14I'
         DC    C'Detaching VTAM subtask'
MSG14L   EQU   *-MSG14
MSG15    DS    0C
         DC    CL11'STCMAIN15I'
         DC    C'Detaching TCP/IP subtask'
MSG15L   EQU   *-MSG15
MSG16    DS    0C
         DC    CL11'STCMAIN16I'
         DC    C'Detaching Console subtask'
MSG16L   EQU   *-MSG16
MSG17    DS    0C
         DC    CL11'STCMAIN17I'
         DC    C'Attaching subtask for user with VTAM LU '
MSG17LU  DC    CL8' '
         DC    C'  CID '
MSG17CID DC    CL8' '
         DC    C' '
MSG17L   EQU   *-MSG17
MSG90    DS    0C
         DC    CL11'STCMAIN90I'
         DC    C'Termination complete'
MSG90L   EQU   *-MSG90
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDMAIN           DSECT
                  SUTLSAVE DSECT=NO  WORK AREA PREFIX
DXD_APARM         DS    A            ATTACH PARM

DXD_ECBLIST_NBR    DS   F            NBR OF ECB'S IN WAIT LIST
DXD_ECBLIST_LENGTH DS   F            LENGTH OF WAIT ECBLIST
DXD_ECBLIST_ADDR   DS   A            ADDRESS OF WAIT ECBLIST

DXD_RETURN_VALUE   DS   F
DXD_RETURN_CODE    DS   F
DXD_REASON_CODE    DS   F

DXD_PARMLIST       DS   5A

DXD_ATTACH        DS    (ATTCHL)X    RESERVE ROOM FOR ATTACH LIST FORM
DXD_ENQ           DS    (ENQL)X      RESERVE ROOM FOR ENQ LIST FORM
DXD_DEQ           DS    (DEQL)X      RESERVE ROOM FOR DEQ LIST FORM
DXD_RC            DS    H            RETURN CODE FROM SYSTEM MACRO
DXD_TASK          DS    CL8          TASK BEING ATTACHED TO DETACHED
                  PRTBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCMAIN
./ ADD NAME=STCNET   0107-09149-09160-1503-00102-00227-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCNET                                                *
*                                                                     *
*  Perform NETWORK functions.                                         *
*                                                                     *
*  At entry:                                                          *
*             R15  Entry point address                                *
*             R14  Return address                                     *
*             R13  Register save area address                         *
*             R12  Common area address                                *
*             R11  Calling module's base address                      *
*             R10  USERBLOK address                                   *
*                                                                     *
* ------------------------------------------------------------------- *
STCNET   CSECT
STCNET   AMODE 31
STCNET   RMODE ANY
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCNET,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     NET0000
MODID    DC    CL8'STCNET'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
NET0000  DS    0H
         L     R1,USER_DXD_ADDR               DYNAMIC WORK AREA BASE
         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART
         ST    R13,4(,R1)                     CHAIN WORK AREA
         ST    R1,8(,R13)                     CHAIN WORK AREA
         LR    R13,R1                         COPY WORK AREA ADDRESS
         USING DXDNET,R13                     DEFINE BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    NET0010                        YES
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
NET0010  DS    0H
         ITRACE ID=ENTRY
         TM    USER_STATUS,$USER_TCPIP        USING TCP/IP?
         BO    NET0020                        YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=VTAM
         L     R15,USER_VTAM
         B     NET0030
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
NET0020  DS    0H
         ITRACE ID=USER_TCPIP
         L     R15,VTCPIP
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
NET0030  DS    0H
         ITRACE ID=CALL,                                               +
               RDATA1=R15
         BALR  R14,R15                        CALL VTAM OR TCPIP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    CALLER'S R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDNET)                      DISPLACEMENT TO WORK AREA

VVTAM    DC    V(STCVTAM)
VTCPIP   DC    V(STCTCPIP)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDNET   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCNET
./ ADD NAME=STCPARM  0115-09140-09173-0849-00340-00301-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCPARM                                               *
*                                                                     *
*   This module interprets the control statements entered via STCIN.  *
*   Since the control statements are only read once, this module is   *
*   linked separately.  STCMAIN issues a LOAD, links to this module,  *
*   and then DELETEs it.  This frees up the storage that would        *
*   otherwise be wasted by having code that is only used at start-up  *
*   in the region.                                                    *
*                                                                     *
*   All parameter statements cause fields to be set in the common     *
*   area (STCCOMM).                                                   *
*                                                                     *
*   Since this module does I/O it allocates its own work area in 24   *
*   bit storage and is assembled and linked with RMODE 24.            *
*                                                                     *
* ------------------------------------------------------------------- *
STCPARM  CSECT
STCPARM  AMODE 31
STCPARM  RMODE 24
         USING STCCOMM,R12                    DEFINE BASE
         USING STCPARM,R11                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE CALLER'S REGISTERS
         LR    R11,R15                        SET BASE
         B     PARM0000
         DC    CL8'STCPARM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PARM0000 DS    0H
         GETMAIN RU,                          ACQUIRE WORK AREA        +
               LV=WORK_L,                     .. AMOUNT REQUIRED       +
               LOC=BELOW                      .. FROM BELOW THE LINE
         ST    R1,8(,R13)                     CHAIN TO PREVIOUS
         ST    R13,4(,R1)                     CHAIN PREVIOUS TO OURS
         LR    R13,R1                         SET SAVE AREA ADDRESS
         USING PARMWORK,R13                   DEFINE BASE
         ITRACE ID=ENTRY
         MVI   PRT_CC,C' '                    INITIALIZE PRINT
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         MVC   WORK_DCB(DCBL),DCBI            INITIALIZE DCB
         MVC   WORK_OPEN(OPENL),OPENI         INITIALIZE OPEN LIST FORM
         MVC   WORK_CLOSE(CLOSEL),CLOSEI      INITIALIZE CLOSE
         ITRACE ID=OPEN
         OPEN  (WORK_DCB,INPUT),                                       +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
PARM0010 DS    0H
         ITRACE ID=READCARD
         GET   WORK_DCB,WORK_IO               READ A CONTROL STATEMENT
         MVC   PRT_MSGID(MSG01L),MSG01
         MVC   PRT_MSGID+(MSG01D-MSG01)(L'MSG01D),WORK_IO
         BAL   R10,PRT0000                    PRINT CONTROL STATEMENT
         CLI   WORK_IO,C'*'                   COMMENT?
         BE    PARM0010                       YES
         CLC   ABNDSTMT,WORK_IO               ABEND STATEMENT?
         BE    ABND0000                       YES
         CLC   APPLSTMT,WORK_IO               APPLID STATEMENT?
         BE    APPL0000                       YES
         CLC   PORTSTMT,WORK_IO               PORT STATEMENT?
         BE    PORT0000                       YES
         ITRACE ID=INVALID                    INVALID STATEMENT
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG02L),MSG02
         BAL   R10,PRT0000                    PRINT ERROR MESSAGE
         B     PARM0010                       READ NEXT STATEMENT
PARM0020 DS    0H
         CLOSE WORK_DCB,                      CLOSE THE DCB            +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         B     EXIT0000                       AND EXIT
*---------------------------------------------------------------------*
*        Process ABEND statement                                      *
*---------------------------------------------------------------------*
ABND0000 DS    0H
         ITRACE ID=SETABEND                   ABEND STATEMENT PROCESSED
         OI    COMM_FLAG,$ABEND               SET ABEND FLAG
         MVC   PRT_MSGID(MSG04L),MSG04
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process APPLID statement                                     *
*---------------------------------------------------------------------*
APPL0000 DS    0H
         ITRACE ID=APPLID                     APPLID STATEMENT
         CLC   COMM_APPL_NAME,COMM_BLANKS     APPLID ALREADY SPECIFIED?
         BNE   APPL0030                       YES
         LA    R1,WORK_IO+L'APPLSTMT          FIRST CHARACTER
         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS
         LA    R1,72-L'APPLSTMT               MAXIMUM INPUT LENGTH
         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH
         LA    R1,8                           MAXIMUM CHARACTERS
         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH
         BAL   R10,PARSE000                   LINK TO PARSE
         OC    PARSE_OUT_LENGTH,PARSE_OUT_LENGTH      LENGTH ZERO?
         BZ    APPL0010                       YES
         CLI   PARSE_DELIMITER,C' '           STOPPED ON A BLANK?
         BNE   APPL0020                       NO.. NAME IS TOO LONG
         ITRACE ID=GOODAPPL                   APPL NAME IS OK
         MVC   COMM_APPL_NAME,PARSE_OUT       SAVE APPL NAME
         MVC   PRT_MSGID(MSG05L),MSG05
         BAL   R10,PRT0000                    PRINT MESSAGE
         B     PARM0010                       READ NEXT STATEMENT
APPL0010 DS    0H
         ITRACE ID=NOAPPL                     APPL NAME OMITTED
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG06L),MSG06        APPL NAME OMITTED
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
APPL0020 DS    0H
         ITRACE ID=LONGAPPL                   APPL NAME IS TOO LONG
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG07L),MSG07        APPL NAME IS TOO LONG
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
APPL0030 DS    0H
         ITRACE ID=DUPAPPL                    DUPLICATE APPL STATEMENT
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG08L),MSG08
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process PORT statement                                       *
*---------------------------------------------------------------------*
PORT0000 DS    0H
         ITRACE ID=PORT
         OC    COMM_PORT,COMM_PORT            PORT NBR ALREADY GIVEN?
         BNZ   PORT0010                       YES
         LA    R1,WORK_IO+L'PORTSTMT          FIRST CHARACTER
         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS
         LA    R1,72-L'PORTSTMT               MAXIMUM INPUT LENGTH
         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH
         LA    R1,5                           MAXIMUM CHARACTERS
         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH
         BAL   R10,PARSE000                   LINK TO PARSE
         CLC   PARSE_OUT_LENGTH,H5            PORT LENGTH 5?
         BNE   PORT0020                       NO
         ITRACE ID=GOODPORT                   PORT NBR IS OK
         PACK  COMM_DWORD,PARSE_OUT(5)        PACK PORT NBR
         CVB   R1,COMM_DWORD                  CONVERT TO BINARY
         STH   R1,COMM_PORT                   SAVE PORT NBR
         MVC   PRT_MSGID(MSG11L),MSG11
         BAL   R10,PRT0000                    PRINT MESSAGE
         B     PARM0010
PORT0010 DS    0H
         ITRACE ID=DUP_PORT
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG09L),MSG09
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
PORT0020 DS    0H
         ITRACE ID=BAD_PORT
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         MVC   PRT_MSGID(MSG10L),MSG10
         BAL   R10,PRT0000                    PRINT
         B     PARM0010                       READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*  Parsing                                                            *
*                                                                     *
*  At entry:                                                          *
*     PARSE_IN         source data address                            *
*     PARSE_IN_LENGTH  source data length                             *
*     PARSE_OUT_LENGTH maximum output length                          *
*                                                                     *
*  At exit:                                                           *
*     PARSE_IN         address of byte following the delimiter that   *
*                      stopped the scan                               *
*     PARSE_IN_LENGTH  length of data following the delimiter         * e *
*     PARSE_OUT        data up to but not including the delimiter     *
*     PARSE_OUT_LENGTH length of data in PARSE_OUT                    * T *
*     PARSE_DELIMITER  the delimiter that stopped the scan or null    *  or *
*                      if the scan stopped due to end of data         *
*                                                                     *
* ------------------------------------------------------------------- *
PARSE000 DS    0H
         ITRACE ID=PARSE,                     STARTING A PARSE         +
               DATA1=PARSE_IN,                .. STARTING ADDRESS      +
               DATA2=PARSE_IN_LENGTH          .. LENGTHS
         MVC   PARSE_OUT,COMM_BLANKS          CLEAR OUTPUT DATA
         LH    R1,PARSE_IN_LENGTH             INPUT DATA LENGTH
         LH    R2,PARSE_OUT_LENGTH            MAXIMUM OUTPUT LENGTH
         L     R3,PARSE_IN                    INPUT DATA ADDRESS
         LA    R4,PARSE_OUT                   OUTPUT DATA ADDRESS
         SR    R5,R5                          INITIALIZE
         MVI   PARSE_DELIMITER,0              SET DELIMITER TO A NULL
         LTR   R1,R1                          ANY DATA LEFT?
         BZ    PARSE050                       NO
PARSE010 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BNE   PARSE020                       NO
         LA    R3,1(,R3)                      NEXT
         BCT   R1,PARSE010                    LOOP
         B     PARSE050
PARSE020 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BE    PARSE040                       YES
         CLI   0(R3),C','                     COMMA?
         BE    PARSE040                       YES
         MVC   0(1,R4),0(R3)                  COPY TO OUTPUT
         LA    R3,1(,R3)                      NEXT
         LA    R4,1(,R4)                      NEXT
         LA    R5,1(,R5)                      PLUS 1 BYTE OF LENGTH
         BCT   R1,PARSE030                    MINUS 1 BYTE OF INPUT
         B     PARSE050                       FORCE EXIT
PARSE030 DS    0H
         BCT   R2,PARSE020                    LOOP
         CLI   0(R3),C' '                     BLANK?
         BE    PARSE040                       YES
         CLI   0(R3),C','                     COMMA?
         BNE   PARSE050                       NO
PARSE040 DS    0H
         MVC   PARSE_DELIMITER,0(R3)          SAVE DELIMITER
         LA    R3,1(,R3)                      SKIP DELIMITER
         BCTR  R1,0                           MINUS USED BY DELIMITER
PARSE050 DS    0H
         STH   R1,PARSE_IN_LENGTH             SAVE INPUT LENGTH LEFT
         STH   R5,PARSE_OUT_LENGTH            SAVE OUTPUT LENGTH
         ST    R3,PARSE_IN                    SAVE INPUT ENDING POINT
         ITRACE ID=PARSE_OUT,                 PARSE ENDING             +
               DATA1=PARSE_OUT,               .. PART OF OUTPUT DATA   +
               DATA2=PARSE_OUT_LENGTH         .. OUTPUT LENGTH
         BR    R10                            EXIT
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     PRINT REQUEST BLOCK
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        ADD TO QUEUE
         BR    R10                            RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT                       EXITING PARM CONVERTER
         LR    R1,R13                         SAVE SAVE AREA ADDRESS
         L     R13,4(,R13)                    RESTORE R13               ASE01670
         FREEMAIN RU,                         FREEMAIN WORK AREA       +
               A=(1),                                                  +
               LV=WORK_L
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=STCIN,                                           +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               EODAD=PARM0020,                                         +
               MACRF=GM
DCBL     EQU   *-DCBI
OPENI    OPEN  (*,INPUT),                                              +
               MODE=31,                                                +
               MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE (*),                                                    +
               MODE=31,                                                +
               MF=L
CLOSEL   EQU   *-CLOSEI
H5       DC    H'5'
ABNDSTMT DC    C'ABEND'              ABEND CONTROL STATEMENT
APPLSTMT DC    C'APPLID='            APPLID STATEMENT
PORTSTMT DC    C'PORT='              PORT NUMBER STATEMENT
MSG01    DS    0C
         DC    CL11'STCPARM01I'
         DC    C'Control statement:'
         DC    C' '
MSG01D   DC    CL80' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'STCPARM02E'
         DC    C'Invalid control statement'
MSG02L   EQU   *-MSG02
MSG04    DS    0C
         DC    CL11'STCPARM04I'
         DC    C'ABEND flag set'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL11'STCPARM05I'
         DC    C'APPLID statement processed successfully'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL11'STCPARM06E'
         DC    C'APPL name omitted'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL11'STCPARM07E'
         DC    C'APPLID is too long (max is 8 characters)'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL11'STCPARM08E'
         DC    C'Duplicate APPL ID statement'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL11'STCPARM09E'
         DC    C'Duplicate PORT statement'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL11'STCPARM10E'
         DC    C'Invalid PORT number, must be five digits'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL11'STCPARM11I'
         DC    C'PORT statement processed successfully'
MSG11L   EQU   *-MSG10
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
PARMWORK         DSECT
                 SUTLSAVE DSECT=NO
WORK_DCB         DS   0F,(DCBL)X     STCIN DCB
WORK_OPEN        DS   0A,(OPENL)X    OPEN LIST FORM AREA
WORK_CLOSE       DS   0A,(CLOSEL)X   CLOSE LIST FORM AREA
PARSE_IN         DS   A              PARSE DATA INPUT ADDRESS
PARSE_IN_LENGTH  DS   H              LENGTH OF DATA AT PARSE IN
PARSE_OUT_LENGTH DS   H              LENGTH OF DATA IN PARSE OUT
PARSE_OUT        DS   CL80           OUTPUT FROM PARSE
PARSE_DELIMITER  DS   C              DELIMITER THAT STOPPED PARSE
WORK_IO          DS   CL80           CONTROL STATEMENT I/O AREA
                 PRTBLOK  DSECT=NO
WORK_L           EQU   *-PARMWORK
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY     REGEQU
         END      STCPARM
./ ADD NAME=STCPRTQ  0101-09140-09173-0849-00102-00102-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCPRTQ                                               *
*                                                                     *
*  Function:                                                          *
*   Print may be generated under multiple tasks.  Print is done by    *
*   a separate subtask.  This is a subroutine to add elements to the  *
*   print subtask work queue.  This module does not follow the        *
*   "normal" SUTL linkage or work area usage.  Any work areas must be *
*   allocated and released dynamically.                               *
*                                                                     *
*   At entry this routine expects                                     *
*     R1  - PRTBLOK Address                                           *
*     R12 - STCCOMM address                                           *
*     R13 - Callers save area address                                 *
*     R14 - Return address                                            *
*     R15 - Entry point address                                       *
*                                                                     *
* ------------------------------------------------------------------- *
STCPRTQ  CSECT
STCPRTQ  AMODE 31
STCPRTQ  RMODE ANY
         USING STCPRTQ,R11                    DEFINE BASE
         USING STCCOMM,R12                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE CALLER'S REGISTERS
         LR    R11,R15                        COPY BASE ADDRESS
         B     PRT0000                        SKIP EYECATCHERS
         DC    CL8'STCPRTQ'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PRT0000  DS    0H
         TM    COMM_EOJ,$EOJ3                 3RD EOJ PHASE?
         BO    EXIT0010                       YES
         LR    R10,R1                         COPY PRTBLOK ADDRESS
         USING PRTBLOK,R10                    DEFINE BASE
         GETMAIN RU,                          ACQUIRE WORK AREA        +
               LV=WKL,                                                 +
               LOC=ANY
         ST    R13,4(,R1)                     SAVE SAVE AREA
         ST    R1,8(,R13)                     CHAIN PREVIOUS SAVE AREA
         LR    R13,R1                         SET SAVE AREA ADDRESS
         USING WK,R13                         DEFINE WORK AREA BASE
         ITRACE ID=ENTRY
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=PRTBLOKL                    .. SIZE
         MVC   0(PRTBLOKL,R1),PRTBLOK
         MVI   PRT_CC,C' '                    CLEAR CARRIAGE CONTROL
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         LR    R10,R1                         COPY BLOCK'S ADDRESS
         MVC   PRT_EYE,PRTID                  SET EYECATCHER
PRT0010  DS    0H
         L     R2,PRT_REQ                     FIRST ON CHAIN
         ST    R2,PRT_NEXT                    SET CHAIN POINTER
         CS    R2,R10,PRT_REQ                 ADD NEW BLOCK TO CHAIN
         BNE   PRT0010                        UNSUCCESSFUL.. TRY AGAIN
         ITRACE ID=QUEUED,                    NEW BLOCK IS ON THE QUEUE+
               RDATA1=R10,                    .. NEW BLOCK'S ADDRESS   +
               RDATA2=R2                      .. PREVIOUS BLOCK
         POST  PRT_WORK_ECB                   POST PRINT TASK ECB
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         LR    R1,R13                         COPY SAVE AREA ADDRESS
         L     R13,4(,R13)                    RESTORE R13
         FREEMAIN RU,                         FREEMAIN SAVE AREA       +
               A=(1),                                                  +
               LV=WKL
EXIT0010 DS    0H
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
PRTID    DC    CL8'PRTBLOK'
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
WK       DSECT
         SUTLSAVE DSECT=NO
WKL      EQU      *-WK
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         PRTBLOK  DSECT=YES
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY     REGEQU
         END      STCPRTQ
./ ADD NAME=STCPRTS  0108-09140-09173-0850-00228-00216-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCPRTS                                               *
*                                                                     *
*   Sutl consists of multiple tasks and has asynchronous exits.  It is*
*   possible that multiple tasks would try to print at the same time. *
*   Instead of trying to serialize a DCB, print was moved to this     *
*   subtask.  Any other subtask or exit may queue work for this task  *
*   from PRT_REQ in the common area.                                  *
*                                                                     *
* ------------------------------------------------------------------- *
STCPRTS  CSECT
STCPRTS  AMODE 31
STCPRTS  RMODE ANY
         USING STCCOMM,R12                    DEFINE BASE
         USING STCPRTS,R11                    DEFINE BASE
         USING PRTBLOK,R7                     DEFINE BASE
         STM   R14,R12,12(R13)                CHAIN REGISTERS
         LR    R11,R15                        COPY ENTRY POINT ADDRESS
         B     PRT0000
         DC    CL8'STCPRTS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PRT0000  DS    0H
         L     R12,0(R1)                      LOAD STCCOMM'S ADDRESS
         GETMAIN R,                           ACQUIRE WORK AREA        +
               LV=WORKL,                                               +
               LOC=BELOW
         USING WORKAREA,R1                    DEFINE BASE
         XC    WORKAREA+000(256),WORKAREA+000
         XC    WORKAREA+256(WORKL-256),WORKAREA+000
         ST    R13,4(,R1)                     CHAIN PREVIOUS TO OURS
         ST    R1,8(,R13)                     CHAIN OURS TO PREVIOUS
         LR    R13,R1                         COPY WORK AREA ADDRESS
         DROP  R1
         USING WORKAREA,R13                   DEFINE BASE
         ST    R11,APRTS                      SET OUR ENTRY POINT
         ITRACE ID=ENTRY
         MVC   WK_DCB(DCBL),DCBI              INITIALIZE DCB
         MVI   WK_CC,C' '                     INITIALIZE CC
         MVC   WK_DATE(PRTLRECL-1),WK_CC
         MVC   WK_OPEN_CLOSE(OCPLL),OCPLI     INITIALIZE OPEN/CLOSE
         ZAP   WK_LINE,P0                     INITIALIZE LINE COUNT
         ZAP   WK_PAGE,P0                     INITIALIGE PAGE COUNT
         OPEN  (WK_DCB,OUTPUT),                                        +
               MODE=31,                                                +
               MF=(E,WK_OPEN_CLOSE)
PRT0010  DS    0H
         TM    PRT_WORK_ECB,X'40'             ECB ALREADY POSTED?
         BO    PRT0020                        GET BUSY
         LA    R1,PRT_WORK_ECB                WORK TO DO ECB
         ITRACE ID=WORKWAIT,                  WAITING FOR WORK         +
               RDATA1=R1                      .. ECB'S ADDRESS
         WAIT  1,ECB=(1)                      WAIT FOR WORK TO DO ECB
         ITRACE ID=WOKEUP
PRT0020  DS    0H
         XC    PRT_WORK_ECB,PRT_WORK_ECB      RESET ECB
         SR    R1,R1                          CLEAR REGISTER
PRT0030  DS    0H
         ICM   R10,15,PRT_REQ                 FIRST REQUEST BLOCK
         BZ    PRT0210                        NOTHING ON CHAIN
         CS    R10,R1,PRT_REQ                 GET REQUEST CHAIN
         BNE   PRT0030
         USING PRTBLOK,R10                    DEFINE BASE
         ITRACE ID=HAVEQ,                     WE HAVE THE QUEUE        +
               RDATA1=R10                     .. FIRST QUEUE BLOCK
PRT0040  DS    0H
         L     R2,PRT_NEXT                    NEXT BLOCK'S ADDRESS
         ST    R1,PRT_NEXT                    SET POINTER
         LR    R1,R10                         SWITCH
         LTR   R10,R2                         SWITCH
         BNZ   PRT0040                        LOOP
         LR    R10,R1                         COPY FIRST BLOCK'S ADDR
PRT0050  DS    0H
         CLI   PRT_COMMAND,$PRT_HEAD          FORCED HEADING?
         BE    PRT0120                        YES
         MVC   WK_CC,PRT_CC                   COPY CARRIAGE CONTROL
         TIME  DEC
         STM   R0,R1,WK_TIME_DATE             SAVE TIME AND DATE
         MVC   WK_TIME,TIMEEDWD               INITIALIZE WITH EDIT WORD
         ED    WK_TIME,WK_TIME_DATE           EDIT TIME
         MVC   WK_DATE,DATEEDWD               INITIALIZE WITH EDIT WORD
         AP    WK_TIME_DATE+4(4),P1900000     ADD CENTURY
         ED    WK_DATE,WK_TIME_DATE+4         EDIT DATE
         MVC   WK_MSGID,PRT_MSGID             COPY MESSAGE ID
         LA    R1,WK_MSGID+(L'WK_MSGID-1)
PRT0060  DS    0H
         CLI   0(R1),C' '                     BLANK?
         BNE   PRT0070                        NO
         BCT   R1,PRT0060                     LOOP
PRT0070  DS    0H
         CLI   0(R1),C'E'                     'ERROR' MESSAGE
         BNE   PRT0080
         MVI   WKMSGERR,C'*'                  FLAG ERROR MESSAGE
PRT0080  DS    0H
         LA    R1,WK_DATA                     FIRST PRINT AREA BYTE
         LA    R2,PRT_DATA                    PRINT OUTPUT AREA BYTE
         LA    R3,L'PRT_DATA                  MAXIMUM LOOPS
PRT0090  DS    0H
         CLC   COMM_BLANKS(2),0(R2)           2 BLANKS IN A ROW?
         BE    PRT0100                        YES
         CLC   =C' ,',0(R2)                   BLANK AND A COMMA?
         BE    PRT0100                        YES
         MVC   0(1,R1),0(R2)                  COPY TO OUTPUT AREA
         LA    R1,1(,R1)                      NEXT OUTPUT BYTE
PRT0100  DS    0H
         LA    R2,1(,R2)                      NEXT INPUT BYTE
         BCT   R3,PRT0090                     LOOPS
         PUT   WK_DCB,WK_CC                   PRINT
         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT
         CLI   WK_CC,C' '                     SINGLE SPACE
         BE    PRT0110                        YES
         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT
         CLI   WK_CC,C'0'                     DOUBLE SPACE?
         BE    PRT0110                        YES
         AP    WK_LINE,P1                     ADD 1 TO LINE COUNT
PRT0110  DS    0H
         MVI   WK_CC,C' '                     INITIALIZE CC
         MVC   WK_DATE(PRTLRECL-1),WK_CC
         CP    WK_LINE,COMM_MAX_LINES         TIME FOR HEADING?
         BNH   PRT0200                        NOT YET
PRT0120  DS    0H
         AP    WK_PAGE,P1                     ADD 1 TO PAGE COUNT
         MVC   WK_DATA(HEADINGL),HEADING
         MVC   WK_DATA+(HEADPAGE-HEADING)(L'HEADPAGE),PAGEEDWD
         ED    WK_DATA+(HEADPAGE-HEADING)(L'HEADPAGE),WK_PAGE
         PUT   WK_DCB,WK_CC                   PRINT
         ZAP   WK_LINE,P1                     RESET LINE COUNT
         MVI   WK_CC,C' '                     INITIALIZE CC
         MVC   WK_DATE(PRTLRECL-1),WK_CC
PRT0200  DS    0H
         LR    R1,R10                         COPY PRTBLOK ADDRESS
         L     R10,PRT_NEXT                   NEXT BLOCK'S ADDRESS
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=PRTBLOKL
         LTR   R10,R10                        ANY MORE PRINT BLOCKS?
         BNZ   PRT0050                        YES
PRT0210  DS    0H
         TM    COMM_EOJ,$EOJ8                 SHUTDOWN PHASE 3?
         BO    EXIT0000                       YES.. IT'S MILLER TIME
         B     PRT0010                        NO, WAIT
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         CLOSE WK_DCB,                        CLOSE DCB                +
               MODE=31,                                                +
               MF=(E,WK_OPEN_CLOSE)
         LR    R1,R13                         COPY WORK AREA ADDRESS
         L     R13,4(,R13)                    RESTORE REGISTER 13       ASE01670
         FREEMAIN R,                          FREE WORK AREA           +
               A=(1),                                                  +
               LV=WORKL
         LM    R14,R12,12(R13)                RESTORE REGISTERS         ASE01680
         SR    R15,R15                        GIVE GOOD RETURN CODE     ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
PRTMVC   MVC   WK_DATE(0),PRT_DATA            COPY PRINT DATA
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DATEEDWD DC    X'40212020204B202020'
TIMEEDWD DC    X'4021204B20204B2020'
PAGEEDWD DC    X'402020202120'
P0       DC    P'0'
P1       DC    P'1'
P1900000 DC    P'1900000'
HEADING  DS    0C
         DC    50C' '
         DC    C'SUTL LOG'
         DC    50C' '
         DC    C'PAGE '
HEADPAGE DC    CL6' '
HEADINGL EQU   *-HEADING
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=SUTLPRT,                                         +
               RECFM=FBA,                                              +
               LRECL=PRTLRECL,                                         +
               MACRF=PM
DCBL     EQU   *-DCBI
OCPLI    OPEN  (*,OUTPUT),                                             +
               MODE=31,                                                +
               MF=L
OCPLL    EQU   *-OCPLI
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
WORKAREA      DSECT
              SUTLSAVE DSECT=NO
WK_TIME_DATE  DS    2F                    TIME/DATE
WK_LINE       DS    PL3
WK_PAGE       DS    PL3
WK_CC         DS    C                     CARRIAGE CONTROL
WK_DATE       DS    CL9                   DATE
              DS    C
WK_TIME       DS    CL9                   TIME
              DS    C
WK_MSGID      DS    CL11                  MESSAGE ID
              DS    C
WKMSGERR      DS    C                     ERROR MESSAGE FLAG
              DS    C
WK_DATA       DS    CL120                 PRINT DATA
PRTLRECL      EQU   *-WK_CC
WK_DCB        DS    0A,(DCBL)X            RESERVE SPACE FOR DCB
WK_OPEN_CLOSE DS    (OCPLL)X
WORKL         EQU   *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         PRTBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         END      STCPRTS
./ ADD NAME=STCPS    0125-09146-09173-0851-00195-00129-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCPS                                                 *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the Open Edition processes (PS) display      *
*                                                                     *
* ------------------------------------------------------------------- *
STCPS    CSECT
STCPS    AMODE 31
STCPS    RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCPS,R11                      DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     PS0000
MODID    DC    CL8'STCPS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PS0000   DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDPS,R13                      DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    PS0010                         YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         XC    PGPSCONTTYBLEN,PGPSCONTTYBLEN
         XC    PGPSPATHBLEN,PGPSPATHBLEN
         MVC   PGPSCMDBLEN,=F'100'
         LA    R2,PGPSCONTTYBUF
         ST    R2,PGPSCONTTYPTR
         LA    R2,PGPSPATHBUF
         ST    R2,PGPSPATHPTR
         LA    R2,PGPSCMDBUF
         ST    R2,PGPSCMDPTR
         LA    R2,PGPS                        ADDRESS OF PGPS BUFFER
         ST    R2,DXD_PS_BUFFER_ADDR
         MVC   DXD_PS_BUFFER_LENGTH,=A(PGPS#LENGTH)
PS0010   DS    0H
         ITRACE ID=RE-INIT
         L     R9,USER_IO
         USING NET_IO,R9
         XC    DXD_TOKEN,DXD_TOKEN            START WITH 1ST PROCESS
         XC    PS_NBR,PS_NBR                  RESET NBR OF PROCESSES
         LA    R7,NET_HEADER_L+PS_HEADER_L
         LA    R8,PS_DATA
         USING PS_DATA,R8
PS0020   DS    0H
         ITRACE ID=CALL_GPS,                                           +
               DATA1=DXD_TOKEN
         CALL  BPX1GPS,                       GET PROCESS DATA         +
               (DXD_TOKEN,                    RELATIVE PROCESS TOKEN   +
               DXD_PS_BUFFER_LENGTH,          LENGTH OF BUFFER         +
               DXD_PS_BUFFER_ADDR,            BUFFER ADDRESS           +
               DXD_RETURN_VALUE,              RETURN VALUE             +
               DXD_RETURN_CODE,               RETURN CODE              +
               DXD_REASON_CODE),              REASON CODE              +
               VL,MF=(E,DXD_PARMLIST)

         ICM   R15,15,DXD_RETURN_VALUE        RETURN VALUE
         ITRACE ID=DXD_RETURN_VALUE,                                   +
               RDATA1=R15
         LTR   R15,R15
         BZ    PS0050                         0 IS END OF FILE
         BM    ERR0010                        -1 IS ERROR
         ST    R15,DXD_TOKEN                  NEXT PROCESS TOKEN
         SR    R1,R1
         ICM   R1,3,PS_NBR
         LA    R1,1(,R1)
         STCM  R1,3,PS_NBR                    UPDATE NBR OF PROCESSES
         MVC   PS_PID,PGPSPID                 PROCESS ID
         MVC   PS_PPID,PGPSPPID               PARENT PROCESS DI
         MVC   PS_SIZE,PGPSTSIZE              TOTAL SIZE
         MVC   PS_START_TIME,PGPSSTARTTIME    PROCESS START TIME
         MVC   PS_USER_TIME,PGPSUSERTIME      USER CPU TIME
         MVC   PS_SYSTEM_TIME,PGPSSYSTIME     USER SYSTEM CPU TIME
         SR    R0,R0
         ICM   R0,3,PGPSASID                  ADDRESS SPACE ID
         SLL   R0,2                           MULTIPLY BY 4
         L     R1,CVTPTR                      CVT ADDRESS
         USING CVT,R1
         L     R1,CVTASVT                     ASVT ADDRESS
         USING ASVT,R1
         LA    R1,ASVTFRST                    1ST ADDRESS SPACE
         AR    R1,R0                          PLUS ASID * 4
         L     R1,0(,R1)                      ASCB ADDR FROM ASVT
         USING ASCB,R1
         MVC   PS_IO,ASCBIOSC                 COPY NBR OF I/O'S
         MVC   PS_COMMAND,COMM_BLANKS
         ICM   R2,15,PGPSCMDLEN               TOTAL LENGTH
         BZ    PS0040                         NO COMMAND
         LA    R3,PGPSCMD                     FIRST COMPONENT
         LA    R4,PS_COMMAND
PS0030   DS    0H
         ICM   R5,15,0(R3)                    LENGTH OF THIS COMPONENT
         BCTR  R5,R0
         BCTR  R5,R0
         EX    R5,CMD_MVC                     COPY
         LA    R5,2(,R5)                      RESTORE LENGTH
         LA    R4,1(R4,R5)                    UPDATE OUTPUT ADDRESS
         LA    R5,4(,R5)                      PLUS LENGTH OF LENGTH
         AR    R3,R5                          NEXT COMPONENT
         SR    R2,R5                          COMPUTE LENGTH REMAINING
         BH    PS0030                         CONTINUE
PS0040   DS    0H
         LA    R7,PS_DATA_L(,R7)              UPDATE OUTPUT LENGTH
         LA    R8,PS_DATA_L(,R8)              UPDATE OUTPUT ADDR
         CLC   PS_NBR,MAX#                    AT MAX?
         BE    PS0050                         YES
         B     PS0020
PS0050   DS    0H
         ITRACE ID=DATABILT,                                           +
               RDATA1=R7                      .. OUTPUT LENGTH
         STCM  R7,3,NET_LENGTH                SET LENGTH
         B     EXIT0000

CMD_MVC  MVC   0(0,R4),4(R3)
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS   0H
         ABEND $U0010,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDPS)                       DISPLACEMENT TO WORK AREA
MAX#      DC   AL2((32760-PS_HEADER_L)/PS_DATA_L)
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDPS                   DSECT
                        SUTLSAVE DSECT=NO

DXD_PARMLIST            DS   0A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A
                        DS   A

DXD_TOKEN               DS   F

DXD_RETURN_VALUE        DS   F
DXD_RETURN_CODE         DS   F
DXD_REASON_CODE         DS   F

DXD_PS_BUFFER_ADDR      DS   A
DXD_PS_BUFFER_LENGTH    DS   F
         BPXYPGPS DSECT=NO,                                            +
               VARLEN=(0,0,100)
DXD_PS_BUFFER_L         EQU  *-PGPS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
         COPY     PSDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
         CVT      DSECT=YES,LIST=NO
         IHAASVT  DSECT=YES,LIST=NO
         IHAASCB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCPS
./ ADD NAME=STCSID   0108-09140-09173-0852-00145-00092-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: STCSID - Display IPL info                             *
*                                                                     *
*  Function:                                                          *
*   Return systems SMF ID                                             *
*                                                                     *
* ------------------------------------------------------------------- *
STCSID   CSECT
STCSID   AMODE 31
STCSID   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCSID,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     SID0000
MODID    DC    CL8'STCSID'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
SID0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDSID,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    SID0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
SID0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         MVC   USER_ID,NET_USER_ID            COPY USER ID
         MVC   USER_SMF,NET_SMF_ID            COPY USER SMF NAME
         L     R1,CVTPTR                      CVT ADDRESS
         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY
         MVC   NET_SYSTEM_NAME,CVTSNAME       COPY SYSTEM NAME
         L     R2,CVTSMCA                     SMF COMMUNICATION AREA
         USING SMCABASE,R2                    DEFINE BASE
         MVC   NET_SMF_ID,SMCASID             COPY SMF ID
         LA    R1,NET_SMF_ID_L                LENGTH TO SEND
         STCM  R1,3,NET_LENGTH                SET LENGTH
         XC    NET_RC,NET_RC                  SET RETURN CODE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         PRINT
         MVI   PRT_CC,C' '                    SINGLE SPACE
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         TM    USER_STATUS,$USER_TCPIP        USING TCPIP?
         BO    SID0020                        YES
         MVC   PRT_MSGID(MSG01_L),MSG01
         MVC   PRT_MSGID+(MSG01_ID-MSG01)(L'MSG01_ID),USER_ID
         MVC   PRT_MSGID+(MSG01_SMF-MSG01)(L'MSG01_SMF),USER_SMF
         MVC   PRT_MSGID+(MSG01_LU-MSG01)(L'MSG01_LU),USER_LU
         B     SID0030
SID0020  DS    0H
         MVC   PRT_MSGID(MSG02_L),MSG02
         MVC   PRT_MSGID+(MSG02_ID-MSG02)(L'MSG02_ID),USER_ID
         MVC   PRT_MSGID+(MSG02_SMF-MSG02)(L'MSG02_SMF),USER_SMF
         MVC   PRT_MSGID+(MSG02_IP-MSG02)(L'MSG02_IP),USER_IP_ADDRESS
SID0030  DS    0H
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        A REQUEST TO QUEUE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDSID)                      DISPLACEMENT TO WORK AREA

MSG01     DS    0C
          DC    CL11'STCSID01I'
          DC    C'Subtask for user '
MSG01_ID  DC    CL8' '
          DC    C' on system '
MSG01_SMF DC    CL4' '
          DC    C', VTAM LU '
MSG01_LU  DC    CL8' '
          DC    C' initialized'
MSG01_L   EQU   *-MSG01

MSG02     DS    0C
          DC    CL11'STCSID02I'
          DC    C'Subtask for user '
MSG02_ID  DC    CL8' '
          DC    C' on system '
MSG02_SMF DC    CL4' '
          DC    C', IP address '
MSG02_IP  DC    CL15' '
          DC    C' initialized'
MSG02_L   EQU   *-MSG02

         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSID   DSECT
         SUTLSAVE DSECT=NO
         PRTBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                NETIO   DSECT=YES
NET_SMF_ID      DS      CL4
NET_SYSTEM_NAME DS      CL4
NET_USER_ID     DS      CL8
NET_SMF_ID_L    EQU     *-NET_IO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IEESMCA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  STCSID
./ ADD NAME=STCSUB   0106-09140-09173-0853-00124-00124-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCSUB                                                *
*                                                                     *
*  Function:                                                          *
*   Collect the data for the SUBsystem display.                       *
*   The number of subsystems that may be returned is limited by the   *
*   I/O area size (VTAM limits the length to 32767).  If the number   *
*   of subsystems exceeds the I/O area size, the return code with be  *
*   set to 4 to inform the user that the data has been truncated.     *
*                                                                     *
*   Data returned is: number of subsystems and the subsystem entry    *
*       for each subsystem.                                           *
*                                                                     *
* ------------------------------------------------------------------- *
STCSUB   CSECT
STCSUB   AMODE 31
STCSUB   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCSUB,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     SUB0000
MODID    DC    CL8'STCSUB'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
SUB0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDSUB,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    SUB0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
SUB0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         XC    NET_RC,NET_RC                  INITIALIZE RETURN CODE
         L     R1,CVTPTR                      CVT ADDRESS
         USING CVTMAP,R1                      DEFINE CVT ADDRESSABILITY
         L     R2,CVTJESCT                    JES SSCT ADDRESS
         USING JESCT,R2                       DEFINE BASE
         LA    R8,SUBSYSTEM_DATA              WORK AREA ADDRESS
         LA    R7,SUBSYSTEM_HEADER_L          INITIALIZE OUTPUT LENGTH
         SR    R6,R6                          INIT NBR OF SUBSYSTEMS
         ICM   R5,15,JESSSCT                  FIRST SUBSYSTEM ENTRY
         BZ    SUB0040                        NO SUBSYSTEMS
         USING SSCT,R5                        DEFINE BASE
SUB0020  DS    0H
         MVC   0(SSCTSIZE,R8),SSCT            COPY SSCT ENTRY
         LA    R8,SSCTSIZE(,R8)               UPDATE OUTPUT ADDRESS
         LA    R7,SSCTSIZE(,R7)               UPDATE OUTPUT LENGTH
         LA    R6,1(,R6)                      ONE MORE SUBSYSTEM
         CH    R6,MAX#                        AT MAXIMUM?
         BE    SUB0030                        YES
         ICM   R5,15,SSCTSCTA                 NEXT SUBSYSTEM
         BNZ   SUB0020                        LOOP
         B     SUB0040
SUB0030  DS    0H
         ICM   R5,15,SSCTSCTA                 MORE SUBSYSTEMS?
         BZ    SUB0040                        NO
         MVC   NET_RC,X0004                   SET RETURN CODE TO 4
SUB0040  DS    0H
         STCM  R6,3,SUBSYSTEM_NBR             SET NUMBER OF SUBSYSTEMS
         STCM  R7,3,NET_LENGTH                SET OUTPUT LENGTH
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDSUB)                      DISPLACEMENT TO WORK AREA
MAX#     DC    Y((32760-SUBSYSTEM_HEADER_L)/SSCTSIZE)
X0004    DC    X'0004'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSUB   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                   NETIO  DSECT=YES
SUBSYSTEM_NBR      DS     H
SUBSYSTEM_HEADER_L EQU    *-NET_IO
SUBSYSTEM_DATA     DS     0C
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IEFJESCT
         IEFJSCVT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         ABCODES
         END     STCSUB
./ ADD NAME=STCTCPIP 0121-09148-09161-1605-00349-00524-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*    TCP/IP FUNCTIONS                                                 *
*                                                                     *
* ------------------------------------------------------------------- *
STCTCPIP CSECT
STCTCPIP AMODE 31
STCTCPIP RMODE ANY
         USING STCCOMM,R12                    DEFINE BASE
         USING STCTCPIP,R11                   DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS
         LR    R11,R15                        COPY BASE
         B     @0000000                       BRANCH AROUND EYECATCHER
MODID    DC    CL8'STCTCPIP'                  MODULE NAME
         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY
@0000000 DS    0H
         L     R1,USER_DXD_ADDR               WORK AREA BASE
         A     R1,DXD_START                   PLUS DISP
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1                         SAVE WORK AREA ADDRESS
         USING DXDTCPIP,R13                   DEFINE BASE
         ITRACE ID=ENTRY
         MVI   PRT_COMMAND,$PRT_PRINT         PRINT
         MVI   PRT_CC,C' '                    SINGLE SPACE
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
         CLI   USER_NET_COMMAND,$USER_NET_INIT
         BE    INIT0000
         L     R9,USER_IO
         USING NET_IO,R9
         CLI   USER_NET_COMMAND,$USER_RECEIVE
         BE    RECV0000
         CLI   USER_NET_COMMAND,$USER_SEND
         BE    SEND0000
         CLI   USER_NET_COMMAND,$USER_NET_CLEANUP
         BE    CLEAN000
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0000 DS    0H
         GETMAIN RU,                                                   +
               LV=GWALENTH,                                            +
               LOC=ANY
         ST    R1,USER_TCPIP_GWA              TCP/IP GLOBAL WORK AREA
* ------------------------------------------------------------------- *
*     Make the INITAPI call                                           *
* ------------------------------------------------------------------- *
         ITRACE ID=INITAPI,                                            +
               DATA1=USER_CLIENT_NAME,                                 +
               DATA2=USER_CLIENT_TASK
         MVC   PRT_MSGID(MSG01_L),MSG01
         BAL   R8,PRT0000
         XC    DXD_TCPIP_TASK(TIELENTH),DXD_TCPIP_TASK
         MVC   DXD_TCPIP_FUNCTION,=CL16'INITAPI'
         EZASMI TYPE=INITAPI,                                          +
               MAXSNO=DXD_MAX_SOCKET,                                  +
               SUBTASK=MODID,                                          +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               ASYNC='ECB',                                            +
               ERROR=ERR0010,                                          +
               TASK=DXD_TCPIP_TASK
         BAL   R8,INFO0000
         OC    DXD_TCPIP_RETURN_CODE,DXD_TCPIP_RETURN_CODE
         BNZ   ERR0020
         LA    R1,USER_API_ECB
         ITRACE ID=POST_API,                                           +
               RDATA1=R1
         POST  USER_API_ECB
         ITRACE ID=TAKESOCK,                                           +
               DATA1=USER_SOCKET,                                      +
               DATA2=COMM_MAIN_CLIENT_TASK
         LA    R1,USER_TAKESOCKET_ECB
         ITRACE ID=WAITTAKE,                                           +
               RDATA1=R1
         WAIT  ECB=USER_TAKESOCKET_ECB
         XC    USER_NET_ECB,USER_NET_ECB
         EZASMI TYPE=TAKESOCKET,                                       +
               SOCRECV=USER_SOCKET,                                    +
               CLIENT=COMM_MAIN_CLIENT,                                +
               ECB=USER_NET_ECB,                                       +
               TASK=DXD_TCPIP_TASK,                                    +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               RETCODE=DXD_TCPIP_RETURN_CODE
         WAIT  ECB=USER_NET_ECB
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0030
         MVC   USER_SOCKET,DXD_TCPIP_RETURN_CODE+2
         ITRACE ID=NEW_SOCK,                                           +
               DATA1=USER_SOCKET
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
RECV0000 DS    0H
         ITRACE ID=RECEIVE
         LA    R1,1
         A     R1,USER_RECEIVES
         ST    R1,USER_RECEIVES
         L     R3,USER_IO                     I/O AREA
         L     R4,F32760
         SR    R5,R5                          BYTES RECEIVED
         MVC   DXD_TCPIP_FUNCTION,=CL16'RECEIVE'
RECV0010 DS    0H
         ITRACE ID=READ,                                               +
               RDATA1=R3,                                              +
               RDATA2=R4
         ST    R4,DXD_LENGTH                  SET LENGTH
         XC    USER_NET_ECB,USER_NET_ECB      RESET ECB
         EZASMI TYPE=READ,                                             +
               S=USER_SOCKET,                                          +
               NBYTE=DXD_LENGTH,                                       +
               BUF=(R3),                                               +
               TASK=DXD_TCPIP_TASK,                                    +
               ECB=USER_NET_ECB,                                       +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               RETCODE=DXD_TCPIP_RETURN_CODE
         ITRACE ID=WAIT
         WAIT  ECB=USER_NET_ECB
         TM    COMM_EOJ,$EOJ1                 SHUTDOWN IN PROGRESS?
         BO    EXIT0000                       YES.. EXIT NOW
         ITRACE ID=READ_X,                                             +
               DATA1=DXD_TCPIP_ERROR_NUMBER,                           +
               DATA2=DXD_TCPIP_RETURN_CODE
         ICM   R0,15,DXD_TCPIP_RETURN_CODE    NBR OF BYTES READ
         BM    ERR0040                        ERROR
         BZ    RECV0020                       ZERO.. SESSION LOST
         AR    R3,R0                          UPDATE BUFFER ADDRESS
         SR    R4,R0                          UPDATE BUFFER LEFT
         AR    R5,R0                          TOTAL BYTES RECEIVED
         ITRACE ID=READ_LEN,                                           +
               RDATA1=R5,                                              +
               RDATA2=R4
         CH    R5,=Y(NET_HEADER_L)            READ MINIMUM?
         BL    RECV0010                       NO
         CH    R5,NET_LENGTH                  GOT ALL BEING SENT?
         BL    RECV0010                       NO
         A     R5,USER_BYTES_RECEIVED         TOTAL RECEIVED
         ST    R5,USER_BYTES_RECEIVED         SAVE TOTAL
         B     EXIT0000
RECV0020 DS    0H
         ITRACE ID=LOST
         OI    USER_STATUS,$USER_LOST         CONNECTION TO USER LOST
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
SEND0000 DS    0H
         LA    R1,1
         A     R1,USER_SENDS
         ST    R1,USER_SENDS
         L     R3,USER_IO                     I/O AREA
         SR    R4,R4
         ICM   R4,3,NET_LENGTH                LENGTH TO SEND
         ITRACE ID=SEND,                                               +
               RDATA1=R4
         SR    R5,R5                          BYTES SENT
         MVC   DXD_TCPIP_FUNCTION,=CL16'SEND'
SEND0010 DS    0H
         ITRACE ID=WRITE,                                              +
               RDATA1=R3,                                              +
               RDATA2=R4
         ST    R4,DXD_LENGTH                  SET LENGTH
         XC    USER_NET_ECB,USER_NET_ECB      RESET ECB
         EZASMI TYPE=WRITE,                                            +
               S=USER_SOCKET,                                          +
               NBYTE=DXD_LENGTH,                                       +
               BUF=(R3),                                               +
               TASK=DXD_TCPIP_TASK,                                    +
               ECB=USER_NET_ECB,                                       +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               RETCODE=DXD_TCPIP_RETURN_CODE
         ITRACE ID=WAIT
         WAIT  ECB=USER_NET_ECB
         TM    COMM_EOJ,$EOJ1                 SHUTDOWN IN PROGRESS?
         BO    EXIT0000                       YES.. EXIT NOW
         ITRACE ID=WRITE_X,                                            +
               DATA1=DXD_TCPIP_RETURN_CODE,                            +
               DATA2=DXD_TCPIP_ERROR_NUMBER
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0050
         A     R3,DXD_TCPIP_RETURN_CODE       UPDATE BUFFER ADDRESS
         S     R4,DXD_TCPIP_RETURN_CODE       UPDATE BUFFER LEFT
         A     R5,DXD_TCPIP_RETURN_CODE       TOTAL BYTES SENT
         ITRACE ID=SENT_LEN,                                           +
               RDATA1=R5,                                              +
               RDATA2=R4
         CH    R5,=Y(NET_HEADER_L)            SENT MINIMUM?
         BL    SEND0010                       NO
         CLM   R5,3,NET_LENGTH                SENT ALL OF THE DATA?
         BL    SEND0010                       NO
         A     R5,USER_BYTES_SENT             TOTAL SENT
         ST    R5,USER_BYTES_SENT             SAVE TOTAL
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
*        The main task has signalled shutdown                         *
*                                                                     *
*        CLOSE the socket and issue a TERMAPI to clean-up.            *
*                                                                     *
* ------------------------------------------------------------------- *
CLEAN000 DS    0H
         ITRACE ID=CLOSE
         XC    USER_NET_ECB,USER_NET_ECB
         EZASMI TYPE=CLOSE,                                            +
               S=USER_SOCKET,                                          +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               ECB=USER_NET_ECB
         WAIT  ECB=USER_NET_ECB
         BAL   R8,INFO0000

         ITRACE ID=TERMAPI
         MVC   DXD_TCPIP_FUNCTION,=CL16'TERMAPI'
         EZASMI TYPE=TERMAPI,                                          +
               TASK=DXD_TCPIP_TASK
         BAL   R8,INFO0000
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INFO0000 DS    0H
         MVC   PRT_MSGID(MSG90_L),MSG90
         MVC   PRT_MSGID+(MSG90_FUNCTION-MSG90)(L'MSG90_FUNCTION),DXD_T+
               CPIP_FUNCTION
         UNPK  PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(9),DXD_TCPIP_RETURN_+
               CODE(5)
         TR    PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(8),C_HEXCHAR
         MVI   PRT_MSGID+(MSG90_RETURN_CODE-MSG90)+8,C' '
         L     R1,DXD_TCPIP_ERROR_NUMBER
         CVD   R1,DXD_DWORD
         ED    PRT_MSGID+(MSG90_ERROR_NUMBER-MSG90)(L'MSG90_ERROR_NUMBE++
               R),DXD_DWORD+5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        A REQUEST TO QUEUE
         BR    R8
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         BAL   R8,INFO0000
         DC    H'2'
ERR0030  DS    0H
         DC    H'3'
ERR0040  DS    0H
         DC    H'4'
ERR0050  DS    0H
         DC    H'5'
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(R13)                     CALLER'S SAVE AREA
         LM    R14,R12,12(R13)
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC    Q(DXDTCPIP)
ENQI      ENQ   (QNAME,RNAME,E,,STEP),RET=NONE,MF=L
ENQL      EQU   *-ENQI
F32760    DC    F'32760'
QNAME     DC    CL8'SUTL'
RNAME     DC    CL8'USERBLOK CHAIN'

C_HEXCHAR                EQU   *-C'0'
                         DC    C'0123456789ABCDEF'

C_SUTLSTC                DC    CL8'SUTLSTC'
MSG01                    DS    0C
                         DC    CL15'STCTCPIP01I'
                         DC    C'Issuing INITAPI'
MSG01_L                  EQU   *-MSG01
MSG90                    DS    0C
                         DC    CL15'STCTCPIP90I'
                         DC    C'TCP/IP function '
MSG90_FUNCTION           DC    CL16' '
                         DC    C'  Return code: '
MSG90_RETURN_CODE        DC    CL8' '
                         DC    C'  Error number:'
MSG90_ERROR_NUMBER       DC    X'402020202120'
MSG90_L                  EQU   *-MSG90

                         LTORG
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
DXDTCPIP                 DSECT
                         SUTLSAVE DSECT=NO
DXD_DWORD                DS   D

DXD_ENQ                  DS   0F,(ENQL)X

DXD_MAX_SOCKET           DS   F

DXD_LENGTH               DS   F

DXD_PACK_IN              DS   XL4

DXD_RC                   DS   H


DXD_TCPIP_ERROR_NUMBER   DS   F
DXD_TCPIP_FUNCTION       DS   CL16
DXD_TCPIP_RETURN_CODE    DS   F
DXD_TCPIP_TASK           EZASMI TYPE=TASK,STORAGE=CSECT

                         PRTBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         EZASMI   TYPE=GLOBAL,STORAGE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  COPY   REGEQU
         END      STCTCPIP
./ ADD NAME=STCUSE   0105-09140-09160-1504-00121-00115-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: STCUSE - Display current SUTL users                   *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the current users.                           *
*                                                                     *
* ------------------------------------------------------------------- *
STCUSE   CSECT
STCUSE   AMODE 31
STCUSE   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCUSE,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE USER BLOCK BASE
         B     USE0000
MODID    DC    CL8'STCUSE'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
USE0000  DS    0H
         L     R2,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDUSE,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    USE0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
USE0010  DS    0H
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE I/O AREA BASE
         XC    NET_RC,NET_RC                  SET RETURN CODE TO ZERO
         LA    R5,USER_DATA                   FIRST OUTPUT SLOT
         LA    R6,USER_HEADER_L               INITIALIZE OUTPUT LENGTH
         SR    R7,R7                          NUMBER OF USERS RETURNED
         ICM   R8,15,COMM_USERS               FIRST USER BLOCK
         BZ    USE0040                        NO USERS
CURR     USING USERBLOK,R8
NET      USING USERBLOK,R5
USE0020  DS    0H
         LA    R0,CURR.USERBLOK
         LA    R1,USER_L
         LA    R14,NET.USERBLOK
         LR    R15,R1
         MVCL  R14,R0
         L     R1,CURR.USER_IO                I/O AREA ADDRESS
         MVC   NET.USER_IO(1),NET_FUNCTION-NET_IO(R1)
         LA    R5,USER_L(,R5)                 UPDATE OUTPUT ADDRESS
         LA    R6,USER_L(,R6)                 UPDATE OUTPUT LENGTH
         LA    R7,1(,R7)                      UPDATE NUMBER OF USERS
         CH    R7,MAX#                        AT MAX?
         BE    USE0030                        YES
         ICM   R8,15,CURR.USER_NEXT           NEXT USER
         BNZ   USE0020                        LOOP
         B     USE0040
USE0030  DS    0H
         OC    CURR.USER_NEXT,CURR.USER_NEXT  MORE USERS?
         BZ    USE0040                        NO
         MVC   NET_RC,X0004                   SET RETURN CODE TO 4
USE0040  DS    0H
         STCM  R7,3,USER_NBR                  NUMBER OF USERS RETURNED
         STCM  R6,3,NET_LENGTH                SET OUTPUT LENGTH
         ITRACE ID=DATABILT,                                           +
               RDATA1=R6                      .. OUTPUT LENGTH
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDUSE)                      DISPLACEMENT TO WORK AREA
MAX#      DC   A((32760-USER_HEADER_L)/USER_L)
X0004     DC   X'0004'
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXDUSE   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               NETIO  DSECT=YES
USER_NBR       DS     H                 NUMBER OF USERS RETURNED
USER_HEADER_L  EQU    *-NET_IO
USER_DATA      DS     0C
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT    DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         ABCODES
         END  STCUSE
./ ADD NAME=STCUSER  0119-09140-09161-1544-00207-00224-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCUSER                                               *
*                                                                     *
*  User subtask mainline.                                             *
*                                                                     *
*  At entry:                                                          *
*             R15  Entry point address                                *
*             R14  Return address                                     *
*             R13  Register save area address                         *
*             R12  Common area address                                *
*             R11  Calling module's base address                      *
*             R10  USERBLOK address                                   *
*                                                                     *
* ------------------------------------------------------------------- *
STCUSER  CSECT
STCUSER  AMODE 31
STCUSER  RMODE ANY
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCUSER,R11                    DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     USER0000
MODID    DC    CL8'STCUSER'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
USER0000 DS    0H
         L     R10,0(R1)                      USERBLOK ADDRESS
         L     R12,USER_COMM                  STCCOMM ADDRESS
         L     R3,DXDSIZE                     WORK AREA SIZE
         GETMAIN RU,                          ACQUIRE WORK AREA        +
               LV=(R3),                       .. SIZE                  +
               LOC=ANY                        .. ANY AREA
         ST    R1,USER_DXD_ADDR               SAVE WORK AREA ADDRESS
         LR    R4,R1                          SAVE WORK AREA ADDRESS
         LR    R2,R1                          COPY WORK AREA ADDRESS
         SR    R14,R14                        CLEAR REGISTER
         SR    R15,R15                        CLEAR REGISTER
         MVCL  R2,R14                         CLEAR THE AREA
         A     R4,DXD_START                   OFFSET TO OUR PART
         ST    R13,4(,R4)                     CHAIN WORK AREA
         ST    R4,8(,R13)                     CHAIN WORK AREA
         LR    R13,R4                         COPY WORK AREA ADDRESS
         USING DXDUSER,R13                    DEFINE BASE
         ITRACE ID=ENTRY,                                              +
               RDATA1=R10
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         XC    USER_TERM_ECB,USER_TERM_ECB
         MVC   USER_NET,VNET
         MVC   USER_TCPIP,VTCPIP
         MVC   USER_VTAM,VVTAM
*---------------------------------------------------------------------*
*        Perform network initialization                               *
*---------------------------------------------------------------------*
         ITRACE ID=NET_INIT
         MVI   USER_NET_COMMAND,$USER_NET_INIT
         L     R15,USER_NET                   NET FUNCTION ENTRY POINT
         BALR  R14,R15                        DO NETWORK INITIALIZATION
         ITRACE ID=NET_X
*---------------------------------------------------------------------*
*                                                                     *
*        Subtask initialization complete.. issue RECEIVE              *
*                                                                     *
*---------------------------------------------------------------------*
USER0010 DS    0H
         ITRACE ID=RECEIVE
         MVI   USER_NET_COMMAND,$USER_RECEIVE SET COMMAND
         L     R15,USER_NET                   NET FUNCTION ENTRY POINT
         BALR  R14,R15                        DO THE RECEIVE
         TM    COMM_EOJ,$EOJ1                 SHUTDOWN REQUESTED?
         BO    EXIT0000                       YES
         TM    USER_STATUS,$USER_LOST         SESSION LOST?
         BO    EXIT0000                       YES
         L     R9,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R9                      DEFINE BASE
         XC    NET_RC,NET_RC                  CLEAR RETURN CODE
         LA    R8,USERCMDS                    COMMAND TABLE ADDRESS
         USING CMD_DSECT,R8                   DEFINE BASE
         ITRACE ID=SRCCMDS,                                            +
               DATA1=NET_FUNCTION
USER0020 DS    0H
         CLI   CMD_FUNCTION,X'FF'             END OF TABLE?
         BE    USER0040                       YES.. INVALID COMMAND
         CLC   CMD_FUNCTION,NET_FUNCTION      COMMAND LOCATED?
         BE    USER0030                       YES
         LA    R8,CMD_DSECT_L(,R8)            NEXT COMMAND
         B     USER0020                       LOOP
USER0030 DS    0H
         ICM   R15,15,CMD_ADDR                MODULE ADDRESS
         ITRACE ID=LINK,                                               +
               RDATA1=R8,                                              +
               RDATA2=R15
         BALR  R14,R15                        LINK
         ITRACE ID=LINK_X
         B     USER0050
USER0040 DS    0H
         ITRACE ID=BADCMD                     UNKNOWN COMMAND
         MVC   NET_RC,X0008                   SET RETURN CODE TO 8
         MVC   NET_MESSAGE(MSG01L),MSG01
         LA    R1,NET_HEADER_L
         STCM  R1,3,NET_LENGTH                SET LENGTH
USER0050 DS    0H
         ITRACE ID=REPLY,                     SEND REPLY               +
               DATA1=USER_IO,                                          +
               DATA2=NET_LENGTH
         MVI   USER_NET_COMMAND,$USER_SEND    SET COMMAND (SEND)
         L     R15,USER_NET                   NET FUNCTION ENTRY POINT
         BALR  R14,R15                        SEND DATA BACK TO USER
         ITRACE ID=REPLY_X                    BACK FROM SEND
         B     USER0010                       ISSUE ANOTHER RECEIVE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
*---------------------------------------------------------------------*
*        PERFORM NETWORK CLEANUP                                      *
*---------------------------------------------------------------------*
         ITRACE ID=NETCLEAN
         OI    USER_STATUS,$USER_CLEANUP      CLEAN UP PERFORMED
         MVI   USER_NET_COMMAND,$USER_NET_CLEANUP
         L     R15,USER_NET                   NET FUNCTION ENTRY POINT
         BALR  R14,R15                        DO NETWORK INITIALIZATION
         ITRACE ID=CLEAN_X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TM    COMM_EOJ,$EOJ1                 EOJ IN PROGRESS?
         BO    EXIT0010                       YES
         ITRACE ID=POSTMAIN
         POST  COMM_NET_ECB                   WAKE UP MAINTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0010 DS    0H
         L     R0,DXDSIZE                     WORK AREA SIZE
         L     R1,USER_DXD_ADDR               WORK AREA BASE ADDRESS
         L     R13,4(,R13)                    CALLER'S R13
         FREEMAIN RU,                         FREE WORK AREA           +
               A=(1),                                                  +
               LV=(0)
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSIZE  CXD                                  WORK AREA SIZE
DXD_START DC   Q(DXDUSER)                     DISPLACEMENT TO WORK AREA
VNET     DC    V(STCNET)
VTCPIP   DC    V(STCTCPIP)
VVTAM    DC    V(STCVTAM)
X0008    DC    X'0008'
MSG01    DC    CL11'STCUSER01E'
         DC    C'Invalid command'
MSG01L   EQU   *-MSG01

USERCMDS DS    0C
         DC    AL1($NET_ID),VL4(STCSID)
         DC    AL1($NET_ACT),VL4(STCACT)
         DC    AL1($NET_APF),VL4(STCAPF)
         DC    AL1($NET_FS),VL4(STCFS)
         DC    AL1($NET_IPL),VL4(STCIPL)
         DC    AL1($NET_LLA),VL4(STCLLA)
         DC    AL1($NET_PS),VL4(STCPS)
         DC    AL1($NET_SUB),VL4(STCSUB)
         DC    AL1($NET_USERS),VL4(STCUSE)
         DC    AL1($NET_LOGOFF),AL4(EXIT0000)
         DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CMD_DSECT    DSECT
CMD_FUNCTION DS    X                          FUNCTION CODE
CMD_ADDR     DS    AL4                        MODULE ENTRY POINT
CMD_DSECT_L  EQU   *-CMD_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDUSER  DSECT
         SUTLSAVE  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA    DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO     DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY      REGEQU
         ABCODES
         END       STCUSER
./ ADD NAME=STCVTAM  0114-09140-09169-1100-00246-00186-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: STCVTAM                                               *
*                                                                     *
*  Perform VTAM functions.                                            *
*                                                                     *
*  At entry:                                                          *
*             R15  Entry point address                                *
*             R14  Return address                                     *
*             R13  Register save area address                         *
*             R12  Common area address                                *
*             R11  Calling module's base address                      *
*             R10  USERBLOK address                                   *
*                                                                     *
* ------------------------------------------------------------------- *
STCVTAM  CSECT
STCVTAM  AMODE 31
STCVTAM  RMODE ANY
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING STCVTAM,R11                    DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     VTAM0000
MODID    DC    CL8'STCVTAM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
VTAM0000 DS    0H
         L     R1,USER_DXD_ADDR               DYNAMIC WORK AREA BASE
         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART
         ST    R13,4(,R1)                     CHAIN WORK AREA
         ST    R1,8(,R13)                     CHAIN WORK AREA
         LR    R13,R1                         COPY WORK AREA ADDRESS
         USING DXDVTAM,R13                    DEFINE BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    VTAM0010                       YES
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
VTAM0010 DS    0H
         ITRACE ID=ENTRY
*---------------------------------------------------------------------*
*                                                                     *
*        Process the requested function                               *
*                                                                     *
*---------------------------------------------------------------------*
         L     R4,USER_IO                     I/O AREA ADDRESS
         USING NET_IO,R4
         LA    R6,USER_NET_ECB                ECB ADDRESS
         L     R9,COMM_ACB                    ACB'S ADDRESS
         CLI   USER_NET_COMMAND,$USER_NET_INIT
         BE    VTAM0020
         USING IFGACB,R9                      DEFINE ACB BASE
         L     R8,USER_RPL                    RPL'S ADDRESS
         USING IFGRPL,R8                      DEFINE RPL BASE
         L     R7,RPLAAREA                    RPLX'S ADDRESS
         USING ISTRPL6X,R7                    DEFINE RPL EXTENSION BASE
         CLI   USER_NET_COMMAND,$USER_RECEIVE
         BE    VTAM0100
         CLI   USER_NET_COMMAND,$USER_SEND
         BE    VTAM0200
         CLI   USER_NET_COMMAND,$USER_NET_CLEANUP
         BE    VTAM0300
         ABEND $U0004,DUMP,,USER              INVALID COMAND
*---------------------------------------------------------------------*
*                                                                     *
*        VTAM INITIALIZATION                                          *
*                                                                     *
*---------------------------------------------------------------------*
VTAM0020 DS    0H
         ITRACE ID=INIT
         GETMAIN RU,                          ACQUIRE STORAGE FOR RPL  +
               LV=RPLL,                       .. SIZE                  +
               LOC=ANY                        ..
         LR    R8,R1                          SAVE RPL ADDRESS
         ST    R8,USER_RPL                    SAVE RPL'S ADDRESS
         MVC   0(RPLL,R8),RPLI                INITIALIZE RPL
         MVC   RPLDACB,COMM_ACB               SET ACB ADDRESS IN RPL
         GETMAIN RU,                          FOR RPL EXTENSION        +
               LV=RPLEXTL,                    .. SIZE                  +
               LOC=ANY                        ..
         LR    R7,R1
         ST    R7,USER_RPLX                   SAVE ADDRESS
         ST    R7,RPLAAREA                    SET ADDRESS IN RPL
         MVC   0(RPLEXTL,R7),RPLEXTI          INITIALIZE RPL EXTENSION
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a RECEIVE                                              *
*                                                                     *
*---------------------------------------------------------------------*
VTAM0100 DS    0H
         ITRACE ID=RECEIVE,                   ISSUE A RECEIVE          +
               DATA1=USER_LU,                 .. USER'S LU NAME        +
               DATA2=USER_ID                  .. USER'S ID
         L     R5,=A(32760)                   MAXIMUM I/O AREA SIZE
         L     R1,USER_RECEIVES               NUMBER OF RECEIVES
         LA    R1,1(,R1)                      PLUS 1
         ST    R1,USER_RECEIVES               SAVE NEW TOTAL
         XC    USER_NET_ECB,USER_NET_ECB
         APPCCMD CONTROL=RECEIVE,             ISSUE A RECEIVE          +
               QUALIFY=SPEC,                  .. SPECIFIC CONVERSATION +
               RPL=(R8),                      .. RPL'S ADDRESS         +
               FILL=LL,                       .. ONLY 1 LOGICAL RECORD +
               AREA=(R4),                     .. I/O AREA ADDRESS      +
               AREALEN=(R5),                  .. I/O AREA SIZE         +
               ECB=(R6),                      .. ECB ADDRESS           +
               CONMODE=CS,                    .. CONTINUE SPECIFIC     +
               CONVID=USER_CID,               .. CONVERSATION ID       +
               OPTCD=ASY                      .. ASYNCHRONOUS
         WAIT  ECB=(R6)                       WAIT FOR VTAM
         TM    COMM_EOJ,$EOJ1                 SHUTDOWN UNDERWAY?
         BO    EXIT0000                       YES.. EXIT NOW
         APPCCMD CONTROL=CHECK,               ISSUE A CHECK            +
               RPL=(R8)                       .. RPL ADDRESS
         TM    RPL6RCV1,RPL6WDAL              DE-ALLOCATE RECEIVED?
         BO    VTAM0110                       YES..
         CLC   RPL6RC,X0048                   UNRECOVERABLE ERROR?
         BE    VTAM0120                       YES
         OC    RPL6RC,RPL6RC                  SUCCESSFUL?
         BNZ   EXIT0000                       NO
         L     R1,USER_BYTES_RECEIVED         LENGTH RECEIVED SO FAR
         AH    R1,NET_LENGTH                  PLUS LENGTH JUST RECEIVED
         ST    R1,USER_BYTES_RECEIVED         SAVE NEW TOTAL
         B     EXIT0000                       AND EXIT
VTAM0110 DS    0H
         ITRACE ID=DEALLOC,                   SESSION DEALLOCATED      +
               DATA1=USER_LU,                                          +
               DATA2=USER_ID
         OI    USER_STATUS,$USER_DEALLOCATE   USER SESSION DEALLOCATED
         B     EXIT0000                       EXIT
VTAM0120 DS    0H
         ITRACE ID=X0048,                     UNRECOVERABLE ERROR      +
               DATA1=USER_LU,                                          +
               DATA2=USER_ID
         OI    USER_STATUS,$USER_DEALLOCATE   SET STATUS
         B     EXIT0000                       EXIT
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a SEND                                                 *
*                                                                     *
*---------------------------------------------------------------------*
VTAM0200 DS    0H
         ITRACE ID=SEND,                      ISSUE A SEND             +
               DATA1=USER_LU,                 .. USER'S LU NAME        +
               DATA2=USER_ID                  .. USER'S ID
         SR    R5,R5                          CLEAR REGISTER
         ICM   R5,3,NET_LENGTH                TOTAL DATA LENGTH
         L     R1,USER_SENDS                  NUMBER OF SENDS
         LA    R1,1(,R1)                      PLUS 1
         ST    R1,USER_SENDS                  SAVE NEW TOTAL
         L     R1,USER_BYTES_SENT             LENGTH SENT SO FAR
         AH    R1,NET_LENGTH                  PLUS LENGTH JUST SENT
         ST    R1,USER_BYTES_SENT             SAVE NEW TOTAL
         XC    USER_NET_ECB,USER_NET_ECB
         APPCCMD CONTROL=SEND,                ISSUE APPC CMD           +
               QUALIFY=DATA,                  .. SEND DATA             +
               RPL=(R8),                      .. RPL ADDRESS           +
               AREA=(R4),                     .. I/O AREA              +
               RECLEN=(R5),                   .. LENGTH OF DATA        +
               ECB=(R6),                      .. ECB ADDRESS           +
               CONMODE=CS,                    .. CONTINUE SPECIFIC     +
               CONVID=USER_CID,               .. CONVERSATION ID       +
               OPTCD=ASY                      .. ASYNCHRONOUS
         ITRACE ID=WAIT
         WAIT  ECB=(R6)                       WAIT ON VTAM
         TM    COMM_EOJ,$EOJ1                 SHUTDOWN UNDERWAY?
         BO    EXIT0000                       YES.. EXIT NOW
         APPCCMD CONTROL=CHECK,               ISSUE A CHECK            +
               RPL=(R8)                       .. RPL ADDRESS
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
VTAM0300 DS    0H
         ITRACE ID=CLEAN_UP
         L     R8,USER_RPL                    RPL ADDRESS
         ITRACE ID=FREE_RPL,                                           +
               RDATA1=R8
         FREEMAIN RU,                                                  +
               A=(R8),                                                 +
               LV=RPLL
         XC    USER_RPL,USER_RPL
         L     R7,USER_RPLX
         ITRACE ID=FREE_RPLX,                                          +
               RDATA1=R7
         FREEMAIN RU,                                                  +
               A=(R7),                                                 +
               LV=RPLEXTL
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    CALLER'S R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDVTAM)                     DISPLACEMENT TO WORK AREA
RPLI     RPL   AM=VTAM,                                                +
               AAREA=RPLEXTI
RPLL     EQU   *-RPLI
RPLEXTI  ISTRPL6
RPLEXTL  EQU   *-RPLEXTI

X0048    DC    X'00480000'                    UNRECOVERABLE ERROR
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDVTAM  DSECT
         SUTLSAVE DSECT=NO
         PRTBLOK  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      STCVTAM
./ ADD NAME=TCPIPSUB 0113-09148-09173-0903-00548-00524-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*    TCP/IP subtask                                                   *
*                                                                     *
*   The PORT number we are to use is given on the PORT statement      *
*   in the start up parameters.                                       *
*                                                                     *
*   At start-up this subtask                                          *
*      1) initializes the TCP/IP environment                          *
*      2) obtains its own CLIENTID                                    *
*      3) creates a socket                                            *
*      4) BINDs to the port given in the start-up parameters          *
*      5) issues a LISTEN                                             *
*                                                                     *
*                                                                     *
*   When a user connects                                              *
*      1) Issue an ACCEPT to get the socket for this connection       *
*      2) Log this connection                                         *
*      3) GETMAIN a new USERBLOK                                      *
*      4) Issue a GIVESOCKET                                          *
*      5) POST the main task                                          *
*                                                                     *
*                                                                     *
*                                                                     *
*   When the user subtask initializes, it issues a TAKESOCKET.        *
*   After the GIVESOCKET/TAKESOCKET, the user subtask communicates    *
*   directly with the user.. that is this subtask is no longer        *
*   involved in the sending and receiving of data via the network     *
*   for that particular user.  Each user will have their own subtask. *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
TCPIPSUB CSECT
TCPIPSUB AMODE 31
TCPIPSUB RMODE ANY
         USING TCPIPSUB,R11                   DEFINE BASE
         USING STCCOMM,R12                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS
         LR    R11,R15                        COPY BASE
         B     INIT0000                       BRANCH AROUND EYECATCHER
MODID    DC    CL8'TCPIPSUB'                  MODULE NAME
         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY
INIT0000 DS    0H
         L     R12,0(,R1)                     COPY COMM AREA BASE
         ST    R11,ATCPIPSUB
         GETMAIN RU,                          OBTAIN WORK AREA         +
               LV=WORKAREA_L,                                          +
               LOC=ANY
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1                         SAVE WORK AREA ADDRESS
         USING WORKAREA,R13                   DEFINE BASE
         ITRACE ID=ENTRY
         GETMAIN RU,                                                   +
               LV=GWALENTH,                                            +
               LOC=ANY
         ST    R1,WORK_TCPIP_GWA              TCP/IP GLOBAL WORK AREA
         LA    R1,TCPIP_WORK_ECB
         ST    R1,WORK_WAIT_ECB_1
         LA    R1,WORK_TCPIP_ECB
         ST    R1,WORK_WAIT_ECB_2
         OI    WORK_WAIT_ECB_2,X'80'
         MVI   PRT_COMMAND,$PRT_PRINT         PRINT
         MVI   PRT_CC,C' '                    SINGLE SPACE
         MVC   PRT_MSGID(L'PRT_MSGID+L'PRT_DATA),PRT_CC
* ------------------------------------------------------------------- *
*     Make the INITAPI call                                           *
* ------------------------------------------------------------------- *
         ITRACE ID=INITAPI,                                            +
               DATA1=C_SUTLSTC
         MVC   PRT_MSGID(MSG01_L),MSG01
         BAL   R8,PRT0000
         XC    WORK_TCPIP_TASK(TIELENTH),WORK_TCPIP_TASK
         MVC   WORK_TCPIP_FUNCTION,=CL16'INITAPI'
         EZASMI TYPE=INITAPI,                                          +
               MAXSNO=WORK_MAX_SOCKET,                                 +
               SUBTASK=MODID,                                          +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ASYNC='ECB',                                            +
               ERROR=ERR0010,                                          +
               TASK=WORK_TCPIP_TASK
         BAL   R8,INFO0000
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
* ------------------------------------------------------------------- *
*     Get our CLIENTID                                                *
* ------------------------------------------------------------------- *
         ITRACE ID=GETID
         MVC   COMM_MAIN_CLIENT_NAME,COMM_BLANKS
         MVC   COMM_MAIN_CLIENT_TASK,COMM_BLANKS
         XC    COMM_MAIN_CLIENT_TASK+8(20),COMM_MAIN_CLIENT_TASK+8
         MVC   WORK_TCPIP_FUNCTION,=CL16'GETCLIENTID'
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         EZASMI TYPE=GETCLIENTID,                                      +
               CLIENT=COMM_MAIN_CLIENT,                                +
               ECB=WORK_TCPIP_ECB,                                     +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               TASK=WORK_TCPIP_TASK
         WAIT  ECB=WORK_TCPIP_ECB
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
         ITRACE ID=CLIENTID,                                           +
               DATA1=COMM_MAIN_CLIENT_NAME,                            +
               DATA2=COMM_MAIN_CLIENT_TASK
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
* ------------------------------------------------------------------- *
*     Create the socket                                               *
* ------------------------------------------------------------------- *
         MVC   PRT_MSGID(MSG02_L),MSG02
         BAL   R8,PRT0000
         ITRACE ID=SOCKET
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         MVC   WORK_TCPIP_FUNCTION,=CL16'SOCKET'
         EZASMI TYPE=SOCKET,                                           +
               AF='INET',                                              +
               SOCTYPE='STREAM',                                       +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ECB=WORK_TCPIP_ECB,                                     +
               TASK=WORK_TCPIP_TASK
         WAIT  ECB=WORK_TCPIP_ECB
         BAL   R8,INFO0000
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
         MVC   WORK_MY_SOCKET,WORK_TCPIP_RETURN_CODE+2
* ------------------------------------------------------------------- *
*     BIND the socket                                                 *
* ------------------------------------------------------------------- *
         ITRACE ID=BIND,                                               +
               DATA1=COMM_PORT
         MVC   PRT_MSGID(MSG03_L),MSG03
         LH    R0,COMM_PORT
         CVD   R0,COMM_DWORD
         MVC   WORK_EDIT,=X'402120202020'
         ED    WORK_EDIT,COMM_DWORD+5
         MVC   PRT_MSGID+(MSG03_PORT-MSG03)(L'MSG03_PORT),WORK_EDIT+1
         BAL   R8,PRT0000
         XC    WORK_SOCKET_STRUCTURE,WORK_SOCKET_STRUCTURE
         MVC   WORK_SOCKET_FAMILY,C_AF_INET
         MVC   WORK_SOCKET_PORT,COMM_PORT
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         MVC   WORK_TCPIP_FUNCTION,=CL16'BIND'
         EZASMI TYPE=BIND,                                             +
               S=WORK_MY_SOCKET,                                       +
               NAME=WORK_SOCKET_STRUCTURE,                             +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ECB=WORK_TCPIP_ECB,                                     +
               TASK=WORK_TCPIP_TASK
         WAIT  ECB=WORK_TCPIP_ECB
         BAL   R8,INFO0000
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
* ------------------------------------------------------------------- *
*     Start LISTENing                                                 *
* ------------------------------------------------------------------- *
         MVC   PRT_MSGID(MSG04_L),MSG04
         BAL   R8,PRT0000
         ITRACE ID=LISTEN
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         MVC   WORK_TCPIP_FUNCTION,=CL16'LISTEN'
         EZASMI TYPE=LISTEN,                                           +
               BACKLOG=5,                                              +
               S=WORK_MY_SOCKET,                                       +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ECB=WORK_TCPIP_ECB,                                     +
               TASK=WORK_TCPIP_TASK
         WAIT  ECB=WORK_TCPIP_ECB
         BAL   R8,INFO0000
         OC    WORK_TCPIP_RETURN_CODE,WORK_TCPIP_RETURN_CODE
         BNZ   ERR0020
* ------------------------------------------------------------------- *
*                                                                     *
*     Print "Accepting LOG ONs" message                               *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   PRT_MSGID(MSG05_L),MSG05
         BAL   R8,PRT0000
* ------------------------------------------------------------------- *
*     Issue ACCEPT                                                    *
* ------------------------------------------------------------------- *
MAIN0000 DS    0H
         TM    COMM_EOJ,$EOJ1
         BO    TERM0000
         ITRACE ID=ACCEPT
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         MVC   WORK_TCPIP_FUNCTION,=CL16'ACCEPT'
         EZASMI TYPE=ACCEPT,                                           +
               S=WORK_MY_SOCKET,                                       +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               NAME=WORK_SOCKET_STRUCTURE,                             +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ECB=WORK_TCPIP_ECB,                                     +
               TASK=WORK_TCPIP_TASK
         TM    WORK_TCPIP_RETURN_CODE,X'80'
         BO    ERR0020
* ------------------------------------------------------------------- *
*                                                                     *
*        Wait for either a CONNECT or server shutdown                 *
*        command (entered via the console).                           *
*                                                                     *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=WAIT
         WAIT  ECBLIST=WORK_WAIT_LIST
         ITRACE ID=AWAKE
         TM    COMM_EOJ,$EOJ1
         BO    TERM0000
* ------------------------------------------------------------------- *
*                                                                     *
*        We have been contacted..                                     *
*          build a new USERBLOK                                       *
*          issue a GIVESOCKET                                         *
*          ATTACH a new user subtask                                  *
*          all that was tiring so go WAIT again                       *
*                                                                     *
* ------------------------------------------------------------------- *
         L     R1,COMM_TCPIP_CONNECTIONS      NUMBER OF CONNECTIONS
         LA    R1,1(,R1)                      PLUS 1
         ST    R1,COMM_TCPIP_CONNECTIONS      SAVE TOTAL
         GETMAIN RU,                                                   +
               LV=USER_L,                                              +
               LOC=ANY
         LR    R10,R1
         USING USERBLOK,R10
         ITRACE ID=NEWUSER,                                            +
               RDATA1=R10,                    .. USERBLOK ADDR         +
               DATA2=WORK_TCPIP_RETURN_CODE   .. SOCKET DESCRIPTOR
         LR    R0,R1
         LA    R1,USER_L
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14

         MVC   USER_EYE,C_USERBLOK            IDENTIFY CONTROL BLOCK
         MVI   USER_STATUS,$USER_INITIAL+$USER_TCPIP
         MVC   WORK_USER_SOCKET,WORK_TCPIP_RETURN_CODE+2
         MVC   USER_SOCKET,WORK_TCPIP_RETURN_CODE+2
         TIME  DEC
         STCM  R0,15,USER_TIME                SAVE TIME
         STCM  R1,15,USER_DATE                SAVE DATE
         ST    R12,USER_COMM                  SET STCCOMM'S ADDRESS
         MVC   USER_ID,COMM_BLANKS            INITIALIZE USER'S NAME
         MVC   WORK_ENQ(ENQL),ENQI
         MVC   USER_CLIENT(36),COMM_MAIN_CLIENT
         MVC   USER_CLIENT_NAME,COMM_MAIN_CLIENT_NAME
         MVC   USER_CLIENT_TASK,=X'F020202020202120'

         SR    R1,R1

         IC    R1,WORK_SOCKET_CLIENT_IP+0
         CVD   R1,COMM_DWORD
         MVC   WORK_EDIT,=X'F02120202020'
         ED    WORK_EDIT,COMM_DWORD+5
         MVC   USER_IP_ADDRESS+00(3),WORK_EDIT+3

         IC    R1,WORK_SOCKET_CLIENT_IP+1
         CVD   R1,COMM_DWORD
         MVC   WORK_EDIT,=X'F02120202020'
         ED    WORK_EDIT,COMM_DWORD+5
         MVC   USER_IP_ADDRESS+04(3),WORK_EDIT+3

         IC    R1,WORK_SOCKET_CLIENT_IP+2
         CVD   R1,COMM_DWORD
         MVC   WORK_EDIT,=X'F02120202020'
         ED    WORK_EDIT,COMM_DWORD+5
         MVC   USER_IP_ADDRESS+08(3),WORK_EDIT+3

         IC    R1,WORK_SOCKET_CLIENT_IP+3
         CVD   R1,COMM_DWORD
         MVC   WORK_EDIT,=X'F02120202020'
         ED    WORK_EDIT,COMM_DWORD+5
         MVC   USER_IP_ADDRESS+12(3),WORK_EDIT+3

         MVI   USER_IP_ADDRESS+03,C'.'
         MVI   USER_IP_ADDRESS+07,C'.'
         MVI   USER_IP_ADDRESS+11,C'.'

         L     R1,COMM_TCPIP_CONNECTIONS
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         ED    USER_CLIENT_TASK,COMM_DWORD+4
         MVI   USER_CLIENT_TASK,C'U'
         ITRACE ID=ENQ
         ENQ   MF=(E,WORK_ENQ)
         ICM   R1,15,COMM_USERS               FIRST ON CHAIN
         ST    R1,USER_NEXT                   CHAIN TO NEW BLOCK
         ST    R10,COMM_USERS                 ADD NEW BLOCK TO CHAIN
NEXT     USING USERBLOK,R1
         LTR   R1,R1                          NEXT BLOCK EXIST?
         BZ    MAIN0020                       NO
         ST    R10,NEXT.USER_PREV             SET PREVIOUS IN NEXT
MAIN0020 DS    0H
         ITRACE ID=DEQ
         DEQ   MF=(E,WORK_ENQ)
         ITRACE ID=POST_NET
         POST  COMM_NET_ECB                   WAKE UP MAIN TASK
         LA    R1,USER_API_ECB
         ITRACE ID=WAITAPI,                                            +
               RDATA1=R1
         WAIT  ECB=USER_API_ECB               WAIT FOR SUBTASK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   WORK_TCPIP_FUNCTION,=CL16'GIVESOCKET'
         ITRACE ID=GIVESOKT,                                           +
               DATA1=USER_CLIENT_NAME,                                 +
               DATA2=USER_CLIENT_TASK
         ITRACE ID=GIVE+,                                              +
               DATA1=WORK_USER_SOCKET,                                 +
               DATA2=USER_SOCKET
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         EZASMI TYPE=GIVESOCKET,                                       +
               S=WORK_USER_SOCKET,                                     +
               CLIENT=USER_CLIENT,                                     +
               ECB=WORK_TCPIP_ECB,                                     +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               RETCODE=WORK_TCPIP_RETURN_CODE
         ITRACE ID=POSTTAKE
         POST  USER_TAKESOCKET_ECB
         ITRACE ID=WAITGIVE
         WAIT  ECB=WORK_TCPIP_ECB
         ITRACE ID=GIVE_X
         TM    WORK_TCPIP_RETURN_CODE,X'80'
         BO    ERR0050
* ------------------------------------------------------------------- *
*                                                                     *
*              Log the connection                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   PRT_MSGID(MSG10_L),MSG10
         MVC   PRT_MSGID+(MSG10_IP_ADDRESS-MSG10)(L'MSG10_IP_ADDRESS),U++
               SER_IP_ADDRESS
         BAL   R8,PRT0000
* ------------------------------------------------------------------- *
*        The new connection has been processed.                       *
*        At least this subtask's work is done.                        *
*        Now issue another ACCEPT.                                    *
* ------------------------------------------------------------------- *
         B     MAIN0000
* ------------------------------------------------------------------- *
*                                                                     *
*        The main task has signalled shutdown                         *
*                                                                     *
*        CLOSE the socket and issue a TERMAPI to clean-up.            *
*                                                                     *
* ------------------------------------------------------------------- *
TERM0000 DS    0H
         ITRACE ID=CLOSE
         MVC   WORK_TCPIP_FUNCTION,=CL16'CLOSE'
         XC    WORK_TCPIP_ECB,WORK_TCPIP_ECB
         EZASMI TYPE=CLOSE,                                            +
               S=WORK_MY_SOCKET,                                       +
               RETCODE=WORK_TCPIP_RETURN_CODE,                         +
               ERRNO=WORK_TCPIP_ERROR_NUMBER,                          +
               ECB=WORK_TCPIP_ECB
         WAIT  ECB=WORK_TCPIP_ECB
         BAL   R8,INFO0000

         ITRACE ID=TERMAPI
         MVC   WORK_TCPIP_FUNCTION,=CL16'TERMAPI'
         EZASMI TYPE=TERMAPI,                                          +
               TASK=WORK_TCPIP_TASK
         BAL   R8,INFO0000
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INFO0000 DS    0H
         MVC   PRT_MSGID(MSG90_L),MSG90
         MVC   PRT_MSGID+(MSG90_FUNCTION-MSG90)(L'MSG90_FUNCTION),WORK_++
               TCPIP_FUNCTION
         UNPK  PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(9),WORK_TCPIP_RETURN++
               _CODE(5)
         TR    PRT_MSGID+(MSG90_RETURN_CODE-MSG90)(8),C_HEXCHAR
         MVI   PRT_MSGID+(MSG90_RETURN_CODE-MSG90)+8,C' '
         L     R1,WORK_TCPIP_ERROR_NUMBER
         CVD   R1,COMM_DWORD
         ED    PRT_MSGID+(MSG90_ERROR_NUMBER-MSG90)(L'MSG90_ERROR_NUMBE++
               R),COMM_DWORD+5
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        A REQUEST TO QUEUE
         BR    R8
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'1'
ERR0020  DS    0H
         BAL   R8,INFO0000
         DC    H'2'
ERR0030  DS    0H
         DC    H'3'
ERR0040  DS    0H
         DC    H'4'
ERR0050  DS    0H
         BAL   R8,INFO0000
         DC    H'5'
* ------------------------------------------------------------------- *
*        Exit                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         MVC   PRT_MSGID(MSG91_L),MSG91
         BAL   R8,PRT0000
         ICM   R1,15,WORK_TCPIP_GWA
         BZ    EXIT0010
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=GWALENTH
EXIT0010 DS    0H
         LR    R1,R13                         COPY SAVE AREA ADDRESS
         L     R13,4(,R13)                    CALLER'S SAVE AREA
         FREEMAIN RU,                         FREE WORK AREA           +
               A=(1),                                                  +
               LV=WORKAREA_L
         LM    R14,R12,12(R13)
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
ENQI     ENQ   (QNAME,RNAME,E,,STEP),RET=NONE,MF=L
ENQL     EQU   *-ENQI
QNAME    DC    CL8'SUTL'
RNAME    DC    CL8'USERBLOK CHAIN'

C_H4                     DC    H'4'
C_AF_INET                DC    X'0002'

C_HEXCHAR                EQU   *-C'0'
                         DC    C'0123456789ABCDEF'

C_SUTLSTC                DC    CL8'SUTLSTC'
C_USERBLOK               DC    CL8'USERBLOK'
MSG01                    DS    0C
                         DC    CL15'TCPIPSUB01I'
                         DC    C'Issuing INITAPI'
MSG01_L                  EQU   *-MSG01
MSG02                    DS    0C
                         DC    CL15'TCPIPSUB02I'
                         DC    C'Creating socket'
MSG02_L                  EQU   *-MSG02
MSG03                    DS    0C
                         DC    CL15'TCPIPSUB03I'
                         DC    C'BINDing to port '
MSG03_PORT               DC    CL5' '
MSG03_L                  EQU   *-MSG03
MSG04                    DS    0C
                         DC    CL15'TCPIPSUB04I'
                         DC    C'LISTENing'
MSG04_L                  EQU   *-MSG04
MSG05                    DS    0C
                         DC    CL15'TCPIPSUB05I'
                         DC    C'ACCEPTing connections'
MSG05_L                  EQU   *-MSG05
MSG10                    DS    0C
                         DC    CL15'TCPIPSUB10I'
                         DC    C'CONNECTION arrived from '
MSG10_IP_ADDRESS         DC    CL15' '
MSG10_L                  EQU   *-MSG10
MSG90                    DS    0C
                         DC    CL15'TCPIPSUB90I'
                         DC    C'TCP/IP function '
MSG90_FUNCTION           DC    CL16' '
                         DC    C'  Return code: '
MSG90_RETURN_CODE        DC    CL8' '
                         DC    C'  Error number:'
MSG90_ERROR_NUMBER       DC    X'402020202120'
MSG90_L                  EQU   *-MSG90
MSG91                    DS    0C
                         DC    CL15'TCPIPSUB91I'
                         DC    C'TCP/IP subtask terminating'
MSG91_L                  EQU   *-MSG91

                         LTORG
* ------------------------------------------------------------------- *
*              WORK AREA                                              *
* ------------------------------------------------------------------- *
WORKAREA                 DSECT
                         SUTLSAVE DSECT=NO
WORK_MAX_SOCKET          DS   F
WORK_EDIT                DS   XL6

WORK_USER_SOCKET         DS   H
WORK_RC                  DS   H

WORK_MY_SOCKET           DS   H

WORK_ENQ                 DS   0F,(ENQL)X

                         DS   0F
WORK_SOCKET_STRUCTURE    DS   0XL16
WORK_SOCKET_FAMILY       DS   AL2           FAMILY (ALWAYS = 2)
WORK_SOCKET_PORT         DS   XL2           PORT NUMBER
WORK_SOCKET_CLIENT_IP    DS   XL4           CLIENT'S IP ADDRESS
                         DS   XL8           RESERVED

WORK_TCPIP_ECB           DS   F
                         DS   XL100

WORK_TCPIP_ERROR_NUMBER  DS   F
WORK_TCPIP_FUNCTION      DS   CL16
WORK_TCPIP_GWA           DS   F
WORK_TCPIP_RETURN_CODE   DS   F
WORK_TCPIP_TASK          EZASMI TYPE=TASK,STORAGE=CSECT

WORK_WAIT_LIST           DS   0F            WAIT LIST
WORK_WAIT_ECB_1          DS   F             COMM_TERMINATION_ECB
WORK_WAIT_ECB_2          DS   F             TCPIP_ECB

                         PRTBLOK  DSECT=NO

WORKAREA_L               EQU  *-WORKAREA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         EZASMI   TYPE=GLOBAL,STORAGE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                  COPY   REGEQU
         END      TCPIPSUB
./ ADD NAME=TSOACB   0100-09190-09190-0759-00012-00012-00000-SOURCE
TSOACB   CSECT
TSOACB   AMODE 31
TSOACB   RMODE ANY
         DC    CL8'appl1 '      <-- replace with your VTAM APPL IDs
         DC    CL8'appl2 '
         DC    CL8'  .
         DC    CL8'  .
         DC    CL8'  .
         DC    CL8'  .
         DC    CL8'appln '
         DC    X'FF'
         END   TSOACB
./ ADD NAME=TSOACT   0115-09140-09173-0904-00522-00520-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOACT - DISPLAY ACTIVE REGIONS                       *
*                                                                     *
*  Function:                                                          *
*   Display the active regions                                        *
*                                                                     *
*                                                                     *
*   Sub-commands are:                                                 *
*     ALL           Display all region types (JOB, STC, and TSO).     *
*     JOB           Display only batch jobs.                          *
*     STC           Display only started tasks.                       *
*     TSU           Display only TSO users.                           *
*     PREFIX xxxxx  Display only regions whose name begins with the   *
*                   specified prefix.  The prefix may be 1 to 8       *
*                   characters.  To reset the prefix enter "PREFIX"   *
*                   followed by blanks.                               *
*     USER xxxxxxx  Display only regions that are running under the   *
*                   user id prefix given.  The prefix may be 1 to 8   *
*                   characters.  To reset the user prefix enter       *
*                   "USER" followed by blanks.                        *
*                                                                     *
*     ALL, JOB, STC, and TSU are mutually exclusive.                  *
*     PREFIX and USER may be used concurrently.                       *
*                                                                     *
* ------------------------------------------------------------------- *
TSOACT   CSECT
TSOACT   AMODE 31
TSOACT   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOACT,R11                     DEFINE PROGRAM BASE
         B     ACT0000
MODID    DC    CL8'TSOACT'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
ACT0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDACT,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    ACT0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         MVI   DXD_REGION_TYPES,$ACT_BATCH    DISPLAY BATCH ONLY
ACT0010  DS    0H
         MVI   VAR_COMMAND,$VAR_DEFINE_ALL    SET COMMAND (DEFINE ALL)
         LA    R1,ACTVARS                     VARIABLE CONTROL INFO
         ST    R1,VAR_TABLE                   SET ADDRESS
         LA    R1,DXDACT                      BASE ADDR
         ST    R1,VAR_AREA                    SET ADDRESS
         LA    R1,VAR_REQ                     PARM BLOCK ADDRESS
         L     R15,AVARS
         BALR  R14,R15                        DEFINE VARIABLES
         B     ACT0110                        PROCESS ANY SUB COMMAND
ACT0020  DS    0H
         ITRACE ID=CLEAR
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR                     LINE
ACT0030  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_ACT          SET FUNCTION
         MVC   ACT_REGION_TYPES,DXD_REGION_TYPES
         MVC   ACT_NAME_PREFIX_LENGTH,DXD_NAME_PREFIX_LENGTH
         MVC   ACT_NAME_PREFIX,DXD_NAME_PREFIX
         MVC   ACT_USER_PREFIX_LENGTH,DXD_USER_PREFIX_LENGTH
         MVC   ACT_USER_PREFIX,DXD_USER_PREFIX
         LA    R1,NET_HEADER_L+ACT_HEADER_L   LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
         ITRACE ID=BLDDATA
ACT0040  DS    0H
         SR    R1,R1                          CLEAR REGISTER
         ICM   R1,3,ACT_CPU_BUSY              CPU BUSY PERCENTAGE
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_CPU_BUSY,EDWD1             INITIALIZE EDIT WORD
         ED    DXD_CPU_BUSY,COMM_DWORD+6      EDIT CPU PERCENTAGE
         MVC   DXD_CPU_BUSY(3),DXD_CPU_BUSY+1 SHIFT 1 TO LEFT
         MVI   DXD_CPU_BUSY+3,C'%'            INSERT THE PERCENT SIGN
         SR    R6,R6                          CLEAR REGISTER
         ICM   R6,3,ACT_NBR_REGIONS           ANY REGIONS RETURNED?
         BZ    ACT0290                        NO
         LA    R7,ACT_REGION                  FIRST REGION IN DATA
         USING ACT_REGION,R7                  DEFINE BASE
         ST    R6,COMM_TEXT_LINES             SET NUMBER OF LINES
         ITRACE ID=REGIONS,                                            +
               RDATA1=R6                      .. NBR OF ADDRESS SPACES
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R6                          COPY NUMBER OF LINES
         M     R0,LINELEN                     TIMES LENGTH PER LINE
         ST    R1,COMM_TEXT_LENGTH            SAVE TEXT AREA SIZE
         GETMAIN RU,                          STORAGE FOR TEXT AREA    +
               LV=(1),                        .. SIZE OF AREA          +
               LOC=ANY                        .. FROM ANY AREA
         ITRACE ID=TEXTAREA,                  TEXT AREA ACQUIRED       +
               RDATA1=R1,                     .. AREA ADDRESS          +
               DATA2=COMM_TEXT_LENGTH         .. AREA SIZE
         ST    R1,COMM_TEXT                   SAVE ADDRESS
         LR    R5,R1                          COPY ADDRESS
         USING DTL,R5                         DEFINE BASE
ACT0050  DS    0H
         MVC   DTL(DTL_L),COMM_BLANKS         CLEAR DETAIL AREA
         MVC   DTL_NAME,ACT_NAME              COPY JOB NAME
         MVC   DTL_STEP,ACT_STEP              COPY STEP NAME
         MVC   DTL_PROC_STEP,ACT_PROC_STEP    COPY PROC STEP NAME
         MVC   DTL_USER,ACT_USER              COPY USER NAME
         LA    R1,REGION_TYPES                REGION TYPES TABLE
ACT0060  DS    0H
         CLI   0(R1),X'FF'                    END OF TABLE?
         BE    ERR0010                        YES..
         CLC   ACT_REGION_TYPE,0(R1)          ENTRY FOUND?
         BE    ACT0070                        YES
         LA    R1,4(,R1)                      NEXT TYPE
         B     ACT0060                        LOOP
ACT0070  DS    0H
         MVC   DTL_REGION_TYPE,1(R1)          COPY TYPE
         LA    R1,SWAP_CODES                  SWAP CODES TABLE
ACT0080  DS    0H
         CLI   0(R1),X'FF'                    END OF TABLE?
         BE    ERR0020                        YES..
         CLC   ACT_SWAP_STATUS,0(R1)          ENTRY FOUND?
         BE    ACT0090                        YES
         LA    R1,5(,R1)                      NEXT TYPE
         B     ACT0080                        LOOP
ACT0090  DS    0H
         MVC   DTL_SWAP_STATUS,1(R1)          COPY SWAP
         MVC   DTL_ATTR,4(R1)                 COPY ATTRIBUTE
         ICM   R1,15,ACT_REAL_FRAMES          FRAMES IN USE
         SLL   R1,2                           TIMES 4 (4K TO A PAGE)
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DTL_REAL,EDWD3                 INITIALIZE WITH EDIT WORD
         ED    DTL_REAL,COMM_DWORD+5          EDIT STORAGE SIZE
         MVI   DTL_REAL_UNITS,C'K'            INDICATE IN 'K' UNITS
         L     R1,ACT_SERVICE_UNITS           SERVICE UNITS
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DTL_SERVICE_UNITS,EDWD2        INITIALIZE WITH EDIT WORD
         ED    DTL_SERVICE_UNITS,COMM_DWORD+4 EDIT SERVICE UNITS
         L     R1,ACT_IO                      NUMBER OF NON-SPOOL I/O'S
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DTL_IO,EDWD2                   INITIALIZE WITH EDIT WORD
         ED    DTL_IO,COMM_DWORD+4            EDIT NBR OF I/O'S
         LM    R0,R1,ACT_TCB_TIME             TCB CPU TIME
         LM    R14,R15,ACT_SRB_TIME           SRB CPU TIME
         SRDL  R0,12                          CONVERT TO MICRO SECONDS
         SRDL  R14,12                         CONVERT TO MICRO SECONDS
         D     R0,F10000                      CONVERT TO HUNDREDTHS
         D     R14,F10000                     CONVERT TO HUNDREDTHS
         AR    R1,R15                         TCB + SRB TIME
         MVC   DTL_CPU_TIME(11),=C'  .  .  .  '
         SR    R0,R0                          CLEAR REGISTER
         D     R0,F100                        CONVERT TO WHOLE SECONDS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         UNPK  DTL_CPU_TIME+9(2),COMM_DWORD   CONVERT THE RESULT
         OI    DTL_CPU_TIME+10,X'F0'          MAKE IT PRINTABLE
         SR    R0,R0                          CLEAR REGISTER
         D     R0,F60                         CONVERT TO MINUTES
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         UNPK  DTL_CPU_TIME+6(2),COMM_DWORD   CONVERT THE RESULT
         OI    DTL_CPU_TIME+7,X'F0'           MAKE IT PRINTABLE
         SR    R0,R0                          CLEAR REGISTER
         D     R0,F60                         MINUTES AND SECONDS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         UNPK  DTL_CPU_TIME+3(2),COMM_DWORD   CONVERT THE RESULT
         OI    DTL_CPU_TIME+4,X'F0'           MAKE IT PRINTABLE
         CVD   R1,COMM_DWORD                  CONVERT TO DECIMAL
         UNPK  DTL_CPU_TIME+0(2),COMM_DWORD   CONVERT THE RESULT
         OI    DTL_CPU_TIME+1,X'F0'           MAKE IT PRINTABLE
         LA    R5,DTL_L(,R5)                  NEXT LINE
         LA    R7,ACT_REGION_L(,R7)           NEXT ADDRESS SPACE
         BCT   R6,ACT0050                     LOOP
ACT0100  DS    0H
         ITRACE ID=CALLDISP                   CALLING DISPLAY
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LINE LENGTH
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        DISPLAY
         MVC   COMM_MSG,COMM_BLANKS           CLEAR ANY MESSAGE
         ITRACE ID=DISPRC,                    RETURNED FROM DISPLAY    +
               RDATA1=R15                     .. RETURN CODE
         CH    R15,H8                         RC = 8?
         BE    EXIT0000                       YES
         CLC   ZCMD,COMM_BLANKS               ANY COMMAND?
         BE    ACT0030                        NO
ACT0110  DS    0H
         ITRACE ID=ACT0110
         MVC   PARSE_IN,ZCMD                  COPY COMMAND
         NI    DXD_FLAG,255-$NEW_PARM         RESET FLAG
ACT0120  DS    0H
         ITRACE ID=ACT0120
         BAL   R9,ACT0280                     PARSE COMMAND
         CLC   PARSE_OUT,COMM_BLANKS          ANYTHING LEFT?
         BE    ACT0250                        NO
         CLC   PFXCMD,PARSE_OUT               PREFIX COMMAND?
         BE    ACT0170                        YES
         CLC   USERCMD,PARSE_OUT              USER COMMAND?
         BE    ACT0190                        YES
         CLC   ALLCMD,PARSE_OUT               'ALL' COMMAND?
         BE    ACT0210                        YES
         CLC   BCHCMD,PARSE_OUT               BATCH JOBS COMMAND?
         BE    ACT0220                        YES
         CLC   STCCMD,PARSE_OUT               STC COMMAND?
         BE    ACT0230                        YES
         CLC   TSUCMD,PARSE_OUT               TSU COMMAND?
         BE    ACT0240                        YES
         L     R1,AMENU                       MENU DATA ADDRESS
         LH    R2,0(,R1)                      NUMBER OF ENTRIES
         LA    R1,4(,R1)                      SKIP COUNTERS
         USING MENU_DSECT,R1                  DEFINE BASE
ACT0130  DS    0H
         CLC   MENU_CMD,PARSE_OUT             COMMAND FOUND?
         BNE   ACT0140                        NO
         CLM   R11,15,MENU_ADDR               REFERENCE US?
         BE    ACT0120                        YES.. IGNORE IT
         B     EXIT0010                       OTHERWISE EXIT
ACT0140  DS    0H
         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE ENTRY?
         BO    ACT0150                        NO
         LA    R1,MENU_DSECT_L(,R1)           NEXT ENTRY
         B     ACT0160
ACT0150  DS    0H
         LA    R1,MENU_DESC-MENU_DSECT(,R1)   NEXT ENTRY
ACT0160  DS    0H
         BCT   R2,ACT0130                     CHECK NEXT ENTRY
         MVC   COMM_MSG(MSG04L),MSG04         SET MESSAGE
         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?
         BZ    EXIT0010                       NO.. EXIT
         B     ACT0100                        DISPLAY WITH MESSAGE
* ------------------------------------------------------------------- *
*        Process PREFIX commands                                      *
* ------------------------------------------------------------------- *
ACT0170  DS    0H
         ITRACE ID=PREFIX
         BAL   R9,ACT0280                     PARSE NEXT PARM
         CLC   PARSE_LENGTH,H8                TOO LONG?
         BH    ACT0180                        YES
         MVC   DXD_NAME_PREFIX_LENGTH,PARSE_LENGTH                      H
         MVC   DXD_NAME_PREFIX,PARSE_OUT      SET NAME PREFIX
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
ACT0180  DS    0H
         MVC   COMM_MSG(MSG02L),MSG02         PREFIX TOO LONG
         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?
         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU
         B     ACT0100                        RE-SEND WITH MESSAGE
* ------------------------------------------------------------------- *
*        Process USER command                                         *
* ------------------------------------------------------------------- *
ACT0190  DS    0H
         ITRACE ID=USER
         BAL   R9,ACT0280                     PARSE NEXT PARM
         CLC   PARSE_LENGTH,H8                TOO LONG?
         BH    ACT0200                        YES
         MVC   DXD_USER_PREFIX_LENGTH,PARSE_LENGTH                      H
         MVC   DXD_USER_PREFIX,PARSE_OUT      SET USER PREFIX
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
ACT0200  DS    0H
         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?
         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU
         MVC   COMM_MSG(MSG03L),MSG03         PREFIX TOO LONG
         B     ACT0100                        RE-SEND WITH MESSAGE
* ------------------------------------------------------------------- *
*        Process ALL command                                          *
* ------------------------------------------------------------------- *
ACT0210  DS    0H
         ITRACE ID=ALL
         MVI   DXD_REGION_TYPES,$ACT_ALL      SET 'ALL' REGION TYPES
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
* ------------------------------------------------------------------- *
*        Process BATCH command                                        *
* ------------------------------------------------------------------- *
ACT0220  DS    0H
         ITRACE ID=BATCH
         MVI   DXD_REGION_TYPES,$ACT_BATCH    SET BATCH REGION TYPES
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
* ------------------------------------------------------------------- *
*        Process STC command                                          *
* ------------------------------------------------------------------- *
ACT0230  DS    0H
         ITRACE ID=STC
         MVI   DXD_REGION_TYPES,$ACT_STC      SET 'STC' REGION TYPES
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
* ------------------------------------------------------------------- *
*        Process TSU command                                          *
* ------------------------------------------------------------------- *
ACT0240  DS    0H
         ITRACE ID=TSU
         MVI   DXD_REGION_TYPES,$ACT_TSO      SET 'TSO' REGION TYPES
         OI    DXD_FLAG,$NEW_PARM             SET FLAG
         B     ACT0120
* ------------------------------------------------------------------- *
*        Clear command/free text storage                              *
* ------------------------------------------------------------------- *
ACT0250  DS    0H
         ITRACE ID=CLEARCMD
         MVC   ZCMD,COMM_BLANKS               CLEAR COMMAND
ACT0260  DS    0H
         ICM   R1,15,COMM_TEXT                TEXT ADDRESS
         BZ    ACT0270                        NO TEXT
         ITRACE ID=FREETEXT
         L     R0,COMM_TEXT_LENGTH            TEXT SIZE
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT            CLEAR ADDRESS
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
ACT0270  DS    0H
         TM    DXD_FLAG,$NEW_PARM             NEW PARMS?
         BO    ACT0020                        YES.. RESET OFFSET
         B     ACT0030                        DISPLAY WITH SAME OFFSET
* ------------------------------------------------------------------- *
*        PARSE PARMS                                                  *
* ------------------------------------------------------------------- *
ACT0280  DS    0H
         LA    R1,PARSE_REQ                   REQUEST BLOCK'S ADDRESS
         L     R15,APRSE                      PARSE ENTRY POINT
         BALR  R14,R15                        CALL PARSER
         ITRACE ID=PARSEOUT,                                           +
               DATA1=PARSE_LENGTH,            .. OUTPUT LENGTH         +
               DATA2=PARSE_OUT                .. OUTPUT DATA
         BR    R9                             RETURN
* ------------------------------------------------------------------- *
*        No data met the criteria                                     *
* ------------------------------------------------------------------- *
ACT0290  DS    0H
         ITRACE ID=NORGNS
         MVC   COMM_TEXT_LINES,F1             SET LINES TO 1
         LA    R0,DTL_L                       TEXT SIZE
         ST    R0,COMM_TEXT_LENGTH            SET SIZE
         GETMAIN RU,                          ACQUIRE TEXT DATA AREA   +
               LV=(0),                        .. SIZE OF AREA          +
               LOC=ANY                        .. FROM ANY AREA
         ST    R1,COMM_TEXT                   SET STORAGE ADDRESS
         LR    R5,R1                          SET 'DTL' BASE
         MVC   0(DTL_L,R1),COMM_BLANKS        CLEAR DETAIL
         MVI   DTL_ATTR,$ATTR_HIGH            HIGHLIGHTED MESSAGE
         MVC   DTL_NAME(MSG01L),MSG01         SET MESSAGE
         OC    COMM_TEXT,COMM_TEXT            TEXT AREA PRESENT?
         BZ    EXIT0000                       NO.. DISPLAY MSG ON MENU
         B     ACT0100
* ------------------------------------------------------------------- *
*        Error routines                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         USING ACT_REGION,R7                  DEFINE BASE
         ITRACE ID=INVRTYP,                   REGION TYPE NOT IN TABLE +
               DATA1=ACT_REGION_TYPE          .. REGION TYPE
         ABEND $U1013,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=INVSWAP,                   SWAP CODE NOT IN TABLE   +
               DATA1=ACT_SWAP_STATUS          .. SWAP CODE
         ABEND $U1014,DUMP,,USER
EXIT0000 DS    0H
         MVC   ZCMD,COMM_BLANKS               CLEAR COMMAND
EXIT0010 DS    0H
         ICM   R1,15,COMM_TEXT                TEXT ADDRESS
         BZ    EXIT0020
         L     R0,COMM_TEXT_LENGTH            TEXT SIZE
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT            CLEAR ADDRESS
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
EXIT0020 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDACT)             DISPLACEMENT TO WORK AREA
F10000   DC    F'10000'
F100     DC    F'100'
F60      DC    F'60'
LINELEN  DC    A(DTL_L)
F1       DC    F'1'
H8       DC    H'8'
EDWD1    DC    X'40202120'
EDWD2    DC    X'4020202020202120'
EDWD3    DC    X'402020202120'
PANEL_NAME DC  CL8'SUTLACT'
PFXCMD   DC    C'PREFIX '
USERCMD  DC    C'USER '
ALLCMD   DC    C'ALL '
BCHCMD   DC    C'JOB '
STCCMD   DC    C'STC '
TSUCMD   DC    C'TSU '
MSG01    DS    0C
         DC    C'No regions meet criteria'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'TSOACT02E'
         DC    C'Prefix too long, 8 characters max'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL11'TSOACT03E'
         DC    C'User name too long, 8 characters max'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL11'TSOACT04E'
         DC    C'Invalid ACT subcommand'
MSG04L   EQU   *-MSG04
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
REGION_TYPES DS    0C
             DC    AL1($ACT_BATCH),CL3'JOB'
             DC    AL1($ACT_STC),CL3'STC'
             DC    AL1($ACT_TSO),CL3'TSO'
             DC    AL1($ACT_MOUNT),CL3'MNT'
             DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
SWAP_CODES   DS    0C
             DC    AL1($ACT_SWAP_TRANSITION),CL3'<->',AL1($ATTR_NORMAL)
             DC    AL1($ACT_SWAP_IN),CL3'IN ',AL1($ATTR_HIGH)
             DC    AL1($ACT_SWAP_OUT),CL3'OUT',AL1($ATTR_NORMAL)
             DC    AL1($ACT_SWAP_LOGICAL),CL3'LSW',AL1($ATTR_NORMAL)
             DC    AL1($ACT_SWAP_NONSWAP),CL3'N/S',AL1($ATTR_HIGH)
             DC    X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         VDEF  BASE=DXDACT
ACTVARS  DS    0C
         VDEF  NAME=CPU,             VARIABLE NAME                     +
               DATA=DXD_CPU_BUSY,    VARIABLE'S DATA ADDRESS           +
               LENGTH=4,             DATA LENGTH                       +
               FORM=CHAR             DATA FORMAT
         VDEF  NAME=JPFX,            VARIABLE NAME                     +
               DATA=DXD_NAME_PREFIX, VARIABLE'S DATA ADDRESS           +
               LENGTH=8,             DATA LENGTH                       +
               FORM=CHAR             DATA FORMAT
         VDEF  NAME=UPFX,            VARIABLE NAME                     +
               DATA=DXD_USER_PREFIX, VARIABLE'S DATA ADDRESS           +
               LENGTH=8,             DATA LENGTH                       +
               FORM=CHAR             DATA FORMAT
         DC    X'FF'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDACT                 DSECT
                       SUTLSAVE DSECT=NO
                       VARREQ   DSECT=NO
                       PARSEREQ DSECT=NO
DXD_NAME_PREFIX_LENGTH DS  H               LENGTH OF ACTIVE PREFIX
DXD_USER_PREFIX_LENGTH DS  H               LENGTH OF ACTIVE USER
DXD_REGION_TYPES       DS  C               REQION TYPE (A, B, S, OR T)
DXD_CPU_BUSY           DS  CL4             CPU UTILIZATION PERCENTAGE
DXD_NAME_PREFIX        DS  CL8             JOB NAME PREFIX
DXD_USER_PREFIX        DS  CL8             USER NAME PREFIX
DXD_FLAG               DS  X
$NEW_PARM              EQU X'80'           ..  NEW OPTIONS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO  DSECT=NO
         COPY   ACTDATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL               DSECT
DTL_ATTR          DS    X               ATTRIBUTE
DTL_NAME          DS    CL8             JOB NAME
                  DS    C
DTL_STEP          DS    CL8             JOB STEP
                  DS    C
DTL_PROC_STEP     DS    CL8             PROC STEP
                  DS    C
DTL_USER          DS    CL8             USER
                  DS    C
DTL_REGION_TYPE   DS    CL3             REGION TYPE
                  DS    C
DTL_SWAP_STATUS   DS    CL3             SWAP STATUS
DTL_REAL          DS    CL6             STORAGE OCCUPIED
DTL_REAL_UNITS    DS    C               STORAGE UNIT (K)
                  DS    C
DTL_SERVICE_UNITS DS    CL8             SERVICE UNITS
DTL_IO            DS    CL8             NUMBER OF I/O'S
                  DS    C
DTL_CPU_TIME      DS    CL11            CPU TIME
DTL_L             EQU   *-DTL
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY   MENUDSCT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY   REGEQU
         ABCODES
         COPY   ATTR
         END    TSOACT
./ ADD NAME=TSOAPF   0104-09140-09169-1425-00181-00181-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOAPF                                                *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the APF authorized libraries.                *
*                                                                     *
*  Sub-commands:                                                      *
*   None.                                                             *
*                                                                     *
* ------------------------------------------------------------------- *
TSOAPF   CSECT
TSOAPF   AMODE 31
TSOAPF   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOAPF,R11                     DEFINE BASE
         B     APF0000
MODID    DC    CL8'TSOAPF'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
APF0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDAPF,R13                     DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    APF0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
APF0010  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_APF          SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?
         BNE   APF0020                        NO
         MVC   COMM_MSG(MSG01L),MSG01
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA FOR DISPLAY                            *
* ------------------------------------------------------------------- *
APF0020  DS    0H
         ITRACE ID=BLDTEXT
         SR    R2,R2                          CLEAR REGISTER
         ICM   R2,3,APF_NBR_DSNS              ANY NAMES RETURNED?
         BZ    APF0070                        NO
         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES
APF0030  DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R2                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     LENGTH OF TEXT
         ST    R1,COMM_TEXT_LENGTH            SAVE length OF TEXT
         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ITRACE ID=TEXTAREA,                                           +
               RDATA1=R1
         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS
         USING DTL,R1                         DEFINE BASE
         LA    R5,APF_DATA                    FIRST DATASET NAME
         USING APF_DATA,R5                    DEFINE BASE
APF0040  DS    0H
         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE
         MVC   DTL_DSN,APF_DSN                SET DATASET NAME
         MVC   DTL_VOLSER,APF_VOLSER          SET VOLSER
         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA
         LA    R5,APF_DATA_L(,R5)             NEXT DATASET
         BCT   R2,APF0040                     LOOP
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
APF0050  DS    0H
         ITRACE ID=CALLDISP                   CALLING DISP
         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISP
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   APF0060                        NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    APF0050                        YES.. REDISPLAY
APF0060  DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE
         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*              NO DATASETS IN APF LIST                                *
* ------------------------------------------------------------------- *
APF0070  DS    0H
         ITRACE ID=NOAPF                      NO DATASETS IN APF LIST
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDAPF)                    DISPLACEMENT TO WORK AREA
LINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE
X0004      DC    X'0004'
PANEL_NAME DC    CL8'SUTLAPF'                 PANEL NAME

MSG01      DS    0C
           DC    CL11'TSOAPF01I'
           DC    C'Data set list truncated'
MSG01L     EQU   *-MSG01

MSG02      DS    0C
           DC    CL11'TSOAPF02I'
           DC    C'There are no data sets in the APF list!'
MSG02L     EQU   *-MSG02

           LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXDAPF      DSECT
            SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL         DSECT
DTL_ATTR    DS    X               ATTRIBUTE CHARACTER
DTL_DSN     DS    CL44            DATASET NAME
            DS    CL2
DTL_VOLSER  DS    CL6             VOLSER
DTL_L       EQU   *-DTL           LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
         COPY    APFDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOAPF
./ ADD NAME=TSOCOMM  0100-09250-09250-1028-00014-00014-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Name: TSOCOMM                                                      *
*                                                                     *
*  TSO interface common data and trace table manager                  *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
         TSOCOMM TYPE=CSECT
TSOCOMM  CSECT
         SUTLSAVE DSECT=YES
         IHAPSA
         COPY  REGEQU
         END   TSOCOMM
./ ADD NAME=TSODISP  0107-03252-09173-0906-00389-00378-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSODISP - Dynamic area manager                        *
*                                                                     *
*  Function:                                                          *
*   Manage the dynamic area displays.                                 *
*                                                                     *
*  This module expects the caller to provide:                         *
*                                                                     *
*    1) The panel name                                                *
*    2) The number of lines of text to of data                        *
*    3) The address of the text storage                               *
*    4) Length of each line of "detail" data                          *
*    5) The relative line number of the first line to be displayed    *
*    6) The offset to the data for the first line to be displayed     *
*                                                                     *
*  The caller may specify that the data be scrollable or non-         *
*  scrollable.  The caller may specify a cursor position.             *
*                                                                     *
*  All fields that control the panel, the text data, and display      *
*  options are in the common area (TSOCOMM).                          *
*                                                                     *
*  If the user allows scrolling, the scroll commands are processed    *
*  here.                                                              *
*                                                                     *
* ------------------------------------------------------------------- *
TSODISP  CSECT
TSODISP  AMODE 31
TSODISP  RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSODISP,R11                    DEFINE PROGRAM BASE
         B     DISP0000
MODID    DC    CL8'TSODISP'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
DISP0000 DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDDISP,R13                    DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    DISP0010                       YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
*---------------------------------------------------------------------*
*        Acquire storage for dynamic area                             *
*---------------------------------------------------------------------*
DISP0010 DS    0H
         L     R15,APQRY                      PQUERY ENTRY POINT
         BALR  R14,R15                        LINK TO PQRY
         L     R0,VWIDTH                      SCREEN WIDTH
         MH    R0,VDEPTH+2                    COMPUTE  SIZE
         ST    R0,COMM_VDATA_LENGTH           SAVE SIZE
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=(0),                        .. SIZE OF AREA          +
               LOC=ANY                        .. FROM ANY AREA
         ITRACE ID=VDA,                                                +
               RDATA1=R1
         ST    R1,COMM_VDATA                  SAVE DYNAMIC AREA ADDRESS
*---------------------------------------------------------------------*
*        Define 'VDATA' to SPF                                        *
*---------------------------------------------------------------------*
         ITRACE ID=DEFVDATA,                  DEFINING 'VDATA'         +
               DATA1=COMM_VDATA,              .. STORAGE ADDRESS       +
               DATA2=COMM_VDATA_LENGTH        .. STORAGE SIZE
         LA    R1,VDEFINE                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         LA    R1,VDATA                       VARIABLE NAME ADDRESS
         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST
         MVC   DXD_SPF3,COMM_VDATA            SET ADDRESS IN PARM LIST
         LA    R1,CHARFORM                    DATA FORMAT ADDRESS
         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST
         LA    R1,COMM_VDATA_LENGTH           ADDRESS OF LENGTH
         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST
         OI    DXD_SPF5,X'80'                 FLAG END-OF-LIST
         LA    R1,DXD_SPF                     SPF PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF ENTRY POINT
         BALR  R14,R15                        DEFINE 'VDATA'
         LTR   R15,R15                        DEFINE SUCCESSFUL?
         BNZ   ERR0010                        NO
         TM    COMM_DISPLAY_FLAGS,$NO_SCROLL  SCROLLING?
         BO    DISP0140                       NO.. COPY TEXT INTACT
         MVC   LVLINE,VDEPTH                  ASSUME ALL ARE VISIBLE
*---------------------------------------------------------------------*
*        Build dynamic area                                           *
*---------------------------------------------------------------------*
DISP0100 DS    0H
         ITRACE ID=BLDVDATA                   BUILDING 'VDATA'
         L     R0,COMM_VDATA                  DYNAMIC AREA ADDRESS
         L     R1,COMM_VDATA_LENGTH           DYNAMIC AREA SIZE
         SR    R14,R14                        CLEAR REGISTER
         SR    R15,R15                        CLEAR REGISTER
         ICM   R15,8,COMM_BLANKS              SET PAD CHARACTER
         MVCL  R0,R14                         CLEAR DYNAMIC AREA
         L     R3,COMM_TEXT                   TEXT'S ADDRESS
         A     R3,COMM_TEXT_OFFSET            PLUS OFFSET
         L     R4,COMM_TEXT_LINES             NUMBER OF TEXT LINES
         S     R4,COMM_TEXT_LINE_NBR          MINUS RELATIVE LINE
         C     R4,LVLINE                      MORE THAN DISPLAYABLE?
         BNH   DISP0110                       NO
         L     R4,LVLINE                      LIMIT TO DISPLAY SIZE
DISP0110 DS    0H
         L     R5,COMM_VDATA                  DYNAMIC AREA ADDRESS
         L     R6,VWIDTH                      SCREEN WIDTH
         L     R7,COMM_TEXT_LINE_LENGTH       LENGTH OF EACH LINE
DISP0120 DS    0H
         LR    R1,R7                          COPY TEXT'S WIDTH
         CR    R1,R6                          TEXT WIDER THAN SCREEN?
         BNH   DISP0130                       NO
         LR    R1,R6                          LIMIT TO SCREEN WIDTH
DISP0130 DS    0H
         LR    R2,R6                          COPY WIDTH
         SR    R2,R1                          MINUS USED WIDTH
         SRL   R2,1                           DIVIDE BY 2
         AR    R2,R5                          PLUS CURRENT ADDRESS
         BCTR  R1,0                           FOR MVC
         EX    R1,DYNMVC                      MOVE DATA TO DYNAMIC AREA
         AR    R3,R7                          NEXT TEXT DATA LINE
         A     R5,VWIDTH                      NEXT DYNAMIC AREA LINE
         BCT   R4,DISP0120                    LOOP
         B     DISP0150                       DISPLAY THE PANEL
*---------------------------------------------------------------------*
*        Copy text intact                                             *
*---------------------------------------------------------------------*
DISP0140 DS    0H
         L     R0,COMM_TEXT                   TEXT ADDRESS
         L     R1,COMM_TEXT_LENGTH            TEXT SIZE
         L     R2,COMM_VDATA                  VDATA ADDRESS
         L     R3,COMM_VDATA_LENGTH           VDATA LENGTH
         ICM   R3,8,COMM_BLANKS               PAD CHARACTER
         MVCL  R2,R0                          COPY TEXT
*---------------------------------------------------------------------*
*        Display panel                                                *
*---------------------------------------------------------------------*
DISP0150 DS    0H
         ITRACE ID=DISPLAY
         MVC   ZVERB,COMM_BLANKS
         LA    R1,DISPLAY                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         LA    R1,COMM_PANEL                  PANEL'S NAME
         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST
         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST
         TM    COMM_DISPLAY_FLAGS,$NO_CURSOR  CURSOR DATA?
         BO    DISP0160                       NO
         OC    COMM_CURSOR,COMM_CURSOR        CURSOR POSITION ZERO?
         BZ    DISP0160                       YES
         NI    DXD_SPF2,X'7F'                 RESET END-OF-LIST
         LA    R1,COMM_BLANKS                 MESSAGE ID (BLANKS)
         ST    R1,DXD_SPF3                    CLEAR MESSAGE ID
         LA    R1,VDATA                       CURSOR FIELD NAME
         ST    R1,DXD_SPF4                    VARIABLE NAME FOR CURSOR
         L     R1,COMM_CURSOR                 CURSOR POSITION
         LA    R1,1(,R1)                      PLUS 1 (NOT RELATIVE)
         ST    R1,COMM_CURSOR                 SAVE UPDATED POSITION
         LA    R1,COMM_CURSOR                 CURSOR POSITION
         ST    R1,DXD_SPF5                    SET CURSOR POSITION
         OI    DXD_SPF5,X'80'                 FLAG END-OF-LIST
DISP0160 DS    0H
         LA    R1,DXD_SPF                     PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF INTERFACE
         BALR  R14,R15                        DISPLAY PANEL
         STH   R15,DXD_RC                     SAVE RETURN CODE
         ITRACE ID=DISPRC,                    TRACE RETURN FROM SPF    +
               RDATA1=R15,                    .. INCLUDE RETURN CODE   +
               DATA2=ZCMD                     .. AND NEW COMMAND
         MVC   COMM_MSG,COMM_BLANKS           CLEAR MESSAGE
         TM    COMM_DISPLAY_FLAGS,$NO_SCROLL  SCROLLING?
         BO    DISP0400                       NO..
         CH    R15,H8                         EXIT?
         BE    DISP1000                       YES
         CLI   ZCMD,C'X'                      EXIT?
         BE    DISP1000                       YES
         NI    DXD_FLAG,255-$DXD_VPUT         RESET VPUT FLAG
*---------------------------------------------------------------------*
*        Request scroll parameters                                    *
*---------------------------------------------------------------------*
DISP0170 DS    0H
         ITRACE ID=VGET                       REQUEST SCROLL VARIABLES
         LA    R1,VGET                        COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         LA    R1,VGETVARS                    VARIABLES list
         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST
         LA    R1,SHARED                      FROM SHARED POOL
         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST
         OI    DXD_SPF3,X'80'                 SET END-OF-LIST
         LA    R1,DXD_SPF                     PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF INTERFACE
         BALR  R14,R15                        LINK TO SPF
         ITRACE ID=VGETRC,                    VGET COMPLETE            +
               RDATA1=R15                     .. INCLUDE RETURN CODE
         LTR   R15,R15                        VGET SUCCESSFUL?
         BZ    DISP0180                       YES
         TM    DXD_FLAG,$DXD_VPUT             VPUT ALREADY ISSUED?
         BO    DISP0180                       YES
*---------------------------------------------------------------------*
*        Issue VPUT, try VGET again                                   *
*---------------------------------------------------------------------*
         ITRACE ID=VPUT
         LA    R1,VPUT                        COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         LA    R1,VGETVARS                    VARIABLES LIST
         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST
         LA    R1,SHARED                      FROM SHARED POOL
         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST
         OI    DXD_SPF3,X'80'                 SET END-OF-LIST
         LA    R1,DXD_SPF                     PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF INTERFACE
         BALR  R14,R15                        ISSUE  VPUT
         ITRACE ID=VPUTRC,                    VPUT COMPLETE            +
               RDATA1=R15                     .. INCLUDE RETURN CODE
         B     DISP0170                       YES
*---------------------------------------------------------------------*
*        Process command or scroll                                    *
*---------------------------------------------------------------------*
DISP0180 DS    0H
         ITRACE ID=CHKVERB,                   CHECKING VERB FOR SCROLL +
               DATA1=ZVERB                    .. TRACE VERB VALUE
         L     R2,ZSCROLLN                    NUMBER OF LINES TO SCROLL
         CLI   ZVERB,C'U'                     SCROLL UP?
         BE    DISP0200                       YES
         CLI   ZVERB,C'D'                     SCROLL DOWN?
         BE    DISP0300                       YES
         CLI   ZVERB,C'R'                     SCROLL RIGHT?
         BE    DISP0190                       YES
         CLI   ZVERB,C'L'                     SCROLL LEFT?
         BE    DISP0190                       YES
         B     DISP1000                       NOT A SCROLL COMMAND
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0190 DS    0H
         ITRACE ID=R_OR_L
         TM    COMM_DISPLAY_FLAGS,$MULTIPLE_SCREENS
         BO    DISP1000
         B     DISP0100
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0200 DS    0H
         ITRACE ID=SCROLLUP
         SR    R0,R0                          CLEAR REGISTER
         L     R1,ZSCROLLN                    NUMBER OF LINES TO SCROLL
         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LINE LENGTH
         L     R2,COMM_TEXT_OFFSET            CLEAR REGISTER
         CR    R1,R2                          SCROLL PAST FIRST LINE?
         BNH   DISP0210                       NO
         LR    R2,R1                          LIMIT TO 1ST LINE
DISP0210 DS    0H
         SR    R2,R1                          NEW OFFSET
         L     R1,COMM_TEXT_LINE_NBR          RELATIVE LINE NUMBER
         S     R1,ZSCROLLN                    MINUS NUMBER SCROLLED
         BP    DISP0220
         SR    R1,R1                          RESET TO ZERO IF NEGATIVE
DISP0220 DS    0H
         ST    R1,COMM_TEXT_LINE_NBR          SAVE RELATIVE LINE NUMBER
         ST    R2,COMM_TEXT_OFFSET            SAVE OFFSET INTO TEXT
         B     DISP0100                       RE-BUILD DYNAMIC AREA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
DISP0300 DS    0H
         ITRACE ID=SCROLLDN
         L     R1,ZSCROLLN                    NUMBER OF LINES TO SCROLL
         A     R1,COMM_TEXT_LINE_NBR          PLUS RELATIVE NUMBER NOW
         C     R1,COMM_TEXT_LINES             BEYOND END OF DATA?
         BE    DISP0310                       YES
         BNH   DISP0320                       NO
DISP0310 DS    0H
         SR    R0,R0                          CLEAR REGISTER
         L     R1,COMM_TEXT_LINES             MAXIMUM LINE NUMBER
         BCTR  R1,0                           ADJUST FOR RELATIVE
         ST    R1,COMM_TEXT_LINE_NBR          SAVE RELATIVE NUMBER
         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LENGTH OF EACH LINE
         ST    R1,COMM_TEXT_OFFSET            SAVE OFFSET
         B     DISP0100                       RE-BUILD DYNAMIC AREA
DISP0320 DS    0H
         SR    R0,R0                          CLEAR REGISTER
         ST    R1,COMM_TEXT_LINE_NBR          SAVE NEW RELATIVE LINE
         M     R0,COMM_TEXT_LINE_LENGTH       TIMES LINE LENGTH
         ST    R1,COMM_TEXT_OFFSET            SAVE OFFSET
         B     DISP0100                       RE-BUILD DYNAMIC AREA
*---------------------------------------------------------------------*
*        Copy updated text area back to caller                        *
*---------------------------------------------------------------------*
DISP0400 DS    0H
         L     R0,COMM_TEXT                   TEXT ADDRESS
         L     R1,COMM_TEXT_LENGTH            TEXT SIZE
         L     R2,COMM_VDATA                  VDATA ADDRESS
         L     R3,COMM_VDATA_LENGTH           VDATA LENGTH
         MVCL  R0,R2                          COPY RETURNED AREA
*---------------------------------------------------------------------*
*        Clean-up                                                     *
*---------------------------------------------------------------------*
DISP1000 DS    0H
         ITRACE ID=CLEANUP
         LA    R1,VDELETE                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET IN PARM LIST
         LA    R1,VDATA                       VARIABLE'S NAME
         ST    R1,DXD_SPF2                    SET IN PARM LIST
         OI    DXD_SPF2,X'80'                 SET END-OF-LIST
         LA    R1,DXD_SPF                     PARM LIST'S ADDRESS
         L     R15,AISPLINK                   SPF INTERFACE
         BALR  R14,R15                        DELETE 'VDATA'
         LTR   R15,R15                        VDELETE OK?
         BZ    DISP1010                       YES
         ABEND $U1019,DUMP,,USER
DISP1010 DS    0H
         ITRACE ID=FREEVDA
         ICM   R1,15,COMM_VDATA               DYNAMIC AREA ADDRESS
         BZ    EXIT0000                       NO ADDRESS.. EXIT
         L     R0,COMM_VDATA_LENGTH           DYNAMIC AREA SIZE
         FREEMAIN RU,                         FREEMAIN DYNAMIC AREA    +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_VDATA,COMM_VDATA          CLEAR ADDRESS
         XC    COMM_VDATA_LENGTH,COMM_VDATA_LENGTH CLEAR SIZE
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=VDEFFAIL,                  VDEFINE FAILED           +
               RDATA1=R15                     .. VDEFINE RETURN CODE
         ABEND $U1020,DUMP,,USER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         LH    R15,DXD_RC                     SET RETURN CODE
         L     R13,4(,R13)                    RESTORE R13
         L     R14,12(,R13)                   RESTORE R14
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            RETURN
DYNMVC   MVC   0(0,R2),0(R3)                  MOVE TEXT TO DYNAMIC AREA
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDDISP)                     DISPLACEMENT TO WORK AREA
VGETVARS DC    F'3'                           NUMBER OF VARIABLE NAMES
         DC    F'0'                           UNPROTECTED STORAGE
         DC    CL8'ZVERB'                     VARIABLE NAME
         DC    CL8'ZSCROLLA'                  VARIABLE NAME
         DC    CL8'ZSCROLLN'                  VARIABLE NAME
H8       DC    H'8'                           CONSTANT
VDATA    DC    CL8'VDATA'                     VARIABLE NAME
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
DISPLAY  DC    CL8'DISPLAY'
VGET     DC    CL8'VGET'
VPUT     DC    CL8'VPUT'
SHARED   DC    CL8'SHARED'
CHARFORM DC    CL4'CHAR'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDDISP   DSECT
          SUTLSAVE DSECT=NO
DXD_SPF   DS    0A                            ISPF PARM LIST
DXD_SPF1  DS    A                             PARM 1 ADDRESS
DXD_SPF2  DS    A                             PARM 2 ADDRESS
DXD_SPF3  DS    A                             PARM 3 ADDRESS
DXD_SPF4  DS    A                             PARM 4 ADDRESS
DXD_SPF5  DS    A                             PARM 5 ADDRESS
DXD_RC    DS    H                             RETURN CODE FROM DISPLAY
DXD_FLAG  DS    X                             INTERNAL FLAGS
$DXD_VPUT EQU   X'80'                         .. VPUT HAS BEEN ISSUED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         ABCODES
         END     TSODISP
./ ADD NAME=TSOFS    0133-09146-09189-1401-00338-00184-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOFS                                                 *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the mounted filesystems                      *
*                                                                     *
* ------------------------------------------------------------------- *
TSOFS    CSECT
TSOFS    AMODE 31
TSOFS    RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOFS,R11                      DEFINE BASE
         B     FS0000
MODID    DC    CL8'TSOFS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
FS0000   DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDFS,R13                      DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    FS0010                         YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         MVI   DXD_SCREEN,1                   INITIALIZE SCREEN NUMBER
FS0010   DS    0H
         LA    R1,ATTR_TABLE                  1ST ATTRIBUTE
         ST    R1,DXD_CURR_ATTR               SAVE ADDRESS
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_FS           SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?
         BNE   FS0020                         NO
         MVC   COMM_MSG(MSG01L),MSG01
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA FOR DISPLAY                            *
* ------------------------------------------------------------------- *
FS0020   DS    0H
         ITRACE ID=BLDTEXT
         SR    R2,R2                          CLEAR REGISTER
         ICM   R2,3,FS_NBR                    ANY NAMES RETURNED?
         BZ    FS0210                         NO
         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES
FS0030   DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R2                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     LENGTH OF TEXT
         ST    R1,COMM_TEXT_LENGTH            SAVE LENGTH OF TEXT
         ITRACE ID=GET_TEXT,                                           +
               RDATA1=R1
         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ITRACE ID=TEXTAREA,                                           +
               RDATA1=R1
         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS
         USING DTL,R1                         DEFINE BASE
         LA    R5,FS_DATA                     FIRST FILESYSTEM
         B     FS0050
FS0040   DS    0H
         L     R1,COMM_TEXT
         SR    R2,R2                          CLEAR REGISTER
         ICM   R2,3,FS_NBR                    ANY NAMES RETURNED?
         LA    R5,FS_DATA
         LA    R15,ATTR_TABLE                 1ST ATTRIBUTE
         ST    R15,DXD_CURR_ATTR              SAVE ADDRESS
FS0050   DS    0H
         CLI   DXD_SCREEN,1
         BE    FS0060
         CLI   DXD_SCREEN,2
         BE    FS0070
         CLI   DXD_SCREEN,3
         BE    FS0080
         DC    H'0'
FS0060   DS    0H
         MVC   COMM_PANEL,PANEL_1
         B     FS0090
FS0070   DS    0H
         MVC   COMM_PANEL,PANEL_2
         B     FS0090
FS0080   DS    0H
         MVC   COMM_PANEL,PANEL_3
FS0090   DS    0H
         USING FS_DATA,R5                     DEFINE BASE
         ITRACE ID=DETAIL,                                             +
               DATA1=FS_MOUNT_POINT+0,                                 +
               DATA2=FS_MOUNT_POINT+8
         MVC   DTL(DTL_L),COMM_BLANKS
         L     R15,DXD_CURR_ATTR
         MVC   DTL_ATTR,0(R15)                COPY ATTRIBUTE
         LA    R15,1(,R15)                    NEXT ATTRIBUTE
         CLI   0(R15),X'FF'                   END OF TABLE?
         BNE   FS0100                         NO
         LA    R15,ATTR_TABLE                 WRAP
FS0100   DS    0H
         ST    R15,DXD_CURR_ATTR              UPDATE ADDRESS
         MVC   DTL_MOUNT_POINT,FS_MOUNT_POINT
         CLC   FS_MOUNT_POINT+18(238),COMM_BLANKS
         BE    FS0110
         MVI   DTL_MOUNT_POINT+18,C'+'        INIDCATE TRUNCATED
FS0110   DS    0H
         CLI   DXD_SCREEN,1                   SCREEN 1?
         BE    FS0120                         YES
         CLI   DXD_SCREEN,2                   SCREEN 2?
         BE    FS0130                         YES
         CLI   DXD_SCREEN,3                   SCREEN 3?
         BE    FS0140                         YES
         ITRACE ID=BAD_SCRN
         DC    H'0'                           BAD SCREEN
FS0120   DS    0H
         ITRACE ID=BUILD_1
         MVC   DTL_TYPE,FS_TYPE
         MVC   DTL_STATUS,FS_STATUS
         MVC   DTL_DSNAME,FS_DSNAME
         B     FS0150
FS0130   DS    0H
         ITRACE ID=BUILD_2
         ICM   R0,15,FS_READS                 NBR OF READS
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORK1,EDITWORD1
         ED    DXD_EDIT_WORK1,COMM_DWORD+3    EDIT NBR OF READS
         MVC   DTL_READS,DXD_EDIT_WORK1+1
         MVC   COMM_DWORD,FS_BYTES_READ
         LG    R0,COMM_DWORD
         CVDG  R0,DXD_CVDG_AREA               CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORK2,EDITWORD2
         ED    DXD_EDIT_WORK2,DXD_CVDG_AREA+9 EDIT BYTES READ
         MVC   DTL_BYTES_READ,DXD_EDIT_WORK2+1
         ICM   R0,15,FS_WRITES                NBR OF WRITES
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORK1,EDITWORD1
         ED    DXD_EDIT_WORK1,COMM_DWORD+3    EDIT NBR OF WRITES
         MVC   DTL_WRITES,DXD_EDIT_WORK1+1
         MVC   COMM_DWORD,FS_BYTES_WRITTEN
         LG    R0,COMM_DWORD                  BYTES WRITTEN
         CVDG  R0,DXD_CVDG_AREA               CONVERT TO DECIMAL
         MVC   DXD_EDIT_WORK2,EDITWORD2
         ED    DXD_EDIT_WORK2,DXD_CVDG_AREA+9 EDIT BYTES WRITTEN
         MVC   DTL_BYTES_WRITTEN,DXD_EDIT_WORK2+1
         B     FS0150
FS0140   DS    0H
         ITRACE ID=BUILD_3
         MVC   DTL_MOUNT_POINT(78),FS_MOUNT_POINT
         CLC   FS_MOUNT_POINT+78(178),COMM_BLANKS
         BE    FS0150
         MVI   DTL_MOUNT_POINT+78,C'+'
FS0150   DS    0H
         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA
         LA    R5,FS_DATA_L(,R5)              NEXT FILESYSTEM
         BCT   R2,FS0090                      LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
         ITRACE ID=CALLDISP                   CALLING DISP
         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR+$MULTIPLE_SCREENS
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISP
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   FS0160                         NO
         CLI   ZVERB,C'R'                     SCROLL RIGHT?
         BE    FS0170                         YES
         CLI   ZVERB,C'L'                     SCROLL LEFT?
         BE    FS0190                         YES
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    FS0010                         YES..
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FS0160   DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE
         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FS0170   DS    0H
         SR    R1,R1
         IC    R1,DXD_SCREEN
         ITRACE ID=RIGHT,                                              +
               RDATA1=R1
         CLM   R1,1,SCREEN_MAX                AT MAX NOW?
         BE    FS0180
         LA    R1,1(,R1)                      ADD 1
         STC   R1,DXD_SCREEN                  UPDATE SCREEN NBR
         B     FS0040
FS0180   DS    0H
         MVI   DXD_SCREEN,1                   'WRAP' BACK TO SCREEN 1
         B     FS0040
FS0190   DS    0H
         SR    R1,R1
         IC    R1,DXD_SCREEN
         ITRACE ID=LEFT,                                               +
               RDATA1=R1
         BCT   R1,FS0200                      MINUS 1
         MVC   DXD_SCREEN,SCREEN_MAX          'WRAP' BACK TO MAX
         B     FS0040
FS0200   DS    0H
         STC   R1,DXD_SCREEN                  UPDATE SCREEN NBR
         B     FS0040
* ------------------------------------------------------------------- *
*              NO DATASETS IN FS LIST                                 *
* ------------------------------------------------------------------- *
FS0210   DS    0H
         ITRACE ID=NOFS                       NO FILESYSTEMS
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDFS)                     DISPLACEMENT TO WORK AREA
LINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE
X0004      DC    X'0004'
PANEL_1    DC    CL8'SUTLFS1'                 PANEL NAME
PANEL_2    DC    CL8'SUTLFS2'                 PANEL NAME
PANEL_3    DC    CL8'SUTLFS3'                 PANEL NAME

MSG01      DS    0C
           DC    CL11'TSOFS01I'
           DC    C'Filesystem list truncated'
MSG01L     EQU   *-MSG01

MSG02      DS    0C
           DC    CL11'TSOFS02I'
           DC    C'There are no mounted filesystems!'
MSG02L     EQU   *-MSG02

SCREEN_MAX DC    AL1(3)
EDITWORD1  DC    X'402020206B2020206B202120'
EDITWORD2  DC    X'40202020206B2020206B2020206B202120'

ATTR_TABLE DS    0C
           DC    AL1($ATTR_HIGH)
           DC    AL1($ATTR_HIGH_YELLOW)
           DC    AL1($ATTR_HIGH_RED)
           DC    AL1($ATTR_HIGH_TURQUOISE)
           DC    AL1($ATTR_HIGH_GREEN)
           DC    X'FF'

           LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXDFS             DSECT
                  SUTLSAVE DSECT=NO
DXD_CVDG_AREA     DS    CL16
DXD_CURR_ATTR     DS    A

DXD_EDIT_WORK1    DS    CL12
DXD_EDIT_WORK2    DS    CL17
DXD_SCREEN        DS    X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL               DSECT
DTL_ATTR          DS    X               ATTRIBUTE CHARACTER
DTL_MOUNT_POINT   DS    CL18            DATASET NAME
                  DS    C
DTL_TYPE          DS    CL6             TYPE
                  DS    C
DTL_STATUS        DS    CL8             STATUS
                  DS    C
DTL_DSNAME        DS    CL44            DATASET NAME
                  ORG   DTL_TYPE
DTL_READS         DS    CL11
                  DS    X
DTL_BYTES_READ    DS    CL16
                  DS    XL3
DTL_WRITES        DS    CL11
                  DS    X
DTL_BYTES_WRITTEN DS    CL16
                  ORG
DTL_L             EQU   *-DTL           LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
         COPY    FSDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOFS
./ ADD NAME=TSOIPL   0106-09141-09169-1426-00120-00249-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOIPL - Display IPL info                             *
*                                                                     *
*  Function:                                                          *
*   Provide a display of IPL info                                     *
*                                                                     *
*  Sub-commands                                                       *
*   None.                                                             *
*                                                                     *
* ------------------------------------------------------------------- *
TSOIPL   CSECT
TSOIPL   AMODE 31
TSOIPL   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOIPL,R11                     DEFINE BASE
         B     IPL0000
MODID    DC    CL8'TSOIPL'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
IPL0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDIPL,R13                     DEFINE WORK AREA BASE
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    IPL0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
* ------------------------------------------------------------------- *
*        REQUEST DATA FROM STC                                        *
* ------------------------------------------------------------------- *
IPL0010  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_IPL          SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R1,IPL                         IPL INFO
         ST    R1,COMM_TEXT                   SET TEXT ADDR
         ICM   R1,15,IPL_NBR                  NBR OF ELEMENTS
         ST    R1,COMM_TEXT_LINES             SET NBR OF LINES
         MH    R1,LINELEN+2                   SET LENGTH OF TEXT
         ST    R1,COMM_TEXT_LENGTH            LENGTH OF TEXT
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN      LENGTH OF EACH LINE
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET  CLEAR OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
IPL0020  DS    0H
         ITRACE ID=CALLDISP                   CALLING DISP
         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISPLAY
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   IPL0030                        NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    IPL0020                        YES.. REDISPLAY
IPL0030  DS    0H
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH CLEAR LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART   DC    Q(DXDIPL)                    DISPLACEMENT TO WORK AREA
LINELEN    DC    A(IPL_L)                     LENGTH OF DETAIL LINE
PANEL_NAME DC    CL8'SUTLIPL'                 PANEL NAME
           LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDIPL   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
         COPY    IPLDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOIPL
./ ADD NAME=TSOLLA   0104-09141-09169-1426-00168-00167-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOLLA - Display system link link (LLA)               *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the system link list (LLA).                  *
*                                                                     *
*  Sub-commands:                                                      *
*   None.                                                             *
*                                                                     *
* ------------------------------------------------------------------- *
TSOLLA   CSECT
TSOLLA   AMODE 31
TSOLLA   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOLLA,R11                     DEFINE BASE
         B     LLA0000
MODID    DC    CL8'TSOLLA'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
LLA0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDLLA,R13                     DEFINE WORK AREA BASE
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    LLA0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
LLA0010  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_LLA          SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA FOR SYSDISP                            *
* ------------------------------------------------------------------- *
         SR    R7,R7                          CLEAR REGISTER
         ICM   R7,3,LLA_NBR_DSNS              ANY NAMES RETURNED?
         BZ    LLA0060                        NO
         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES
LLA0020  DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R7                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     TIMES LENGTH
         ST    R1,COMM_TEXT_LENGTH            SAVE SIZE OF TEXT STORAGE
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS
         LR    R8,R1                          COPY TEXT AREA ADDRESS
         USING DTL,R8                         DEFINE BASE
         LA    R9,LLA_DSN                     FIRST DATASET NAME
         USING LLA_DSN,R9                     DEFINE BASE
         CLC   NET_RC,X0004                   LIST TRUNCATED?
         BNE   LLA0030                        NO
         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE
LLA0030  DS    0H
         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE
         MVC   DTL_DSN,LLA_DSN                SET DATASET NAME
         LA    R8,DTL_L(,R8)                  NEXT DETAIL AREA
         LA    R9,L'LLA_DSN(,R9)              NEXT DATASET
         BCT   R7,LLA0030                     LOOP
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
LLA0040  DS    0H
         ITRACE ID=CALLDISP                   CALLING DISP
         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISPLAY
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   LLA0050                        NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    LLA0040                        YES.. REDISPLAY
LLA0050  DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE
         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*              NO DATASETS IN LINK LIST (SHOULD NEVER HAPPEN)         *
* ------------------------------------------------------------------- *
LLA0060  DS    0H
         ITRACE ID=NOLLA                      NO DATASETS IN LINK LIST
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDLLA)                      DISPLACEMENT TO WORK AREA
LINELEN  DC    A(DTL_L)                       LENGTH OF DETAIL LINE
X0004    DC    X'0004'
PANEL_NAME DC  CL8'SUTLLLA'                   PANEL NAME
MSG01    DS    0C
         DC    CL11'TSOLLA01I'
         DC    C'Data set list truncated'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'TSOLLA02I'
         DC    C'There are no data sets in the link list!'
MSG02L   EQU   *-MSG02
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDLLA   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL      DSECT
DTL_ATTR DS    X               ATTRIBUTE CHARACTER
DTL_DSN  DS    CL44            DATASET NAME
DTL_L    EQU   *-DTL           LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
         COPY    LLADATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOLLA
./ ADD NAME=TSOLRAD  0100-09250-09250-1028-00039-00039-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOLRAD                                               *
*                                                                     *
*  VTAM LERAD exit                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
TSOLRAD  CSECT
TSOLRAD  AMODE 31
TSOLRAD  RMODE ANY
         USING TSOLRAD,R15           DEFINE BASE
         B     LERAD010              SKIP ADDRESS AND EYECATCHER
         DC    CL8'TSOLRAD'          MODULE NAME
         DC    CL8'&SYSDATE'         DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'         TIME OF ASSEMBLY
LERAD010 DS    0H
         USING IFGRPL,R1             DEFINE BASE
         L     R2,RPLAAREA           RPL EXTENSION ADDRESS
         USING ISTRPL6X,R2           DEFINE BASE
         ABEND $U1007,DUMP,,USER
* ------------------------------------------------------------------- *
*             EXIT                                                    *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         BR    R14                   RETURN TO CALLER                   ASE01700
* ------------------------------------------------------------------ *
*              CONSTANTS                                             *
* ------------------------------------------------------------------ *
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         IFGRPL AM=VTAM
* ------------------------------------------------------------------ *
*              EQUATES                                               *
* ------------------------------------------------------------------ *
         COPY REGEQU
         ABCODES
         END  TSOLRAD
./ ADD NAME=TSOMAIN  0146-09141-09181-1611-00542-00718-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*  Name: TSOMAIN                                                      *
*                                                                     *
*  TSO interface mainline.                                            *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  OPTIONS
TSOMAIN  CSECT
TSOMAIN  AMODE 31
TSOMAIN  RMODE ANY
         USING TSOMAIN,R11                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE ENTRY REGISTERS
         LR    R11,R15                        COPY BASE
         B     MAIN0000                       BRANCH AROUND EYECATCHER
MODID    DC    CL8'TSOMAIN'                   MODULE NAME
         DC    CL8'&SYSDATE'                  DATE OF ASSEMBLY
         DC    CL6'&SYSTIME'                  TIME OF ASSEMBLY
MAIN0000 DS    0H
* ------------------------------------------------------------------- *
*        Acquire storage for work area                                *
* ------------------------------------------------------------------- *
         LTR   R1,R1                          PARAMETER PASSED?
         BZ    ERR0010                        NO
         ICM   R9,15,0(R1)                    PARAMETER ADDRESS
         BZ    ERR0010                        NO PARAMETER
         L     R3,DXDSIZE                     WORK AREA SIZE
         GETMAIN RU,                          ACQUIRE  STORAGE         +
               LV=(R3),                       ..  SIZE IS IN R3        +
               LOC=ANY                        .. MAY BE ABOVE OR BELOW
         LR    R2,R1                          COPY WORK AREA ADDRESS
         LR    R4,R1                          COPY STORAGE ADDRESS
         SR    R1,R1                          CLEAR REGISTER
         MVCL  R2,R0                          CLEAR WORK AREA
         LR    R2,R4                          COPY WORK AREA ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN SAVE AREA
         ST    R2,8(,R13)                     OUR SAVE AREA
         LR    R13,R2                         SET SAVE AREA ADDRESS
         USING DXDMAIN,R13                    DEFINE WORK AREA BASE
         MVC   DXD_ID,MODID                   IDENTIFY WORK AREA OWNER
* ------------------------------------------------------------------- *
*        Load common data module  (TSOCOMM)                           *
* ------------------------------------------------------------------- *
         LOAD  EP=TSOCOMM                     LOAD COMMON DATA MODULE
         LR    R12,R0                         COPY TO PERMANENT BASE
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         ST    R11,AMAIN                      SET MAINLINE'S ADDRESS
         ST    R4,COMM_DXD_ADDRESS            SET WORK AREA ADDRESS
* ------------------------------------------------------------------- *
*        Copy module entry point addresses                            *
* ------------------------------------------------------------------- *
         MVC   ADISP,VDISP                    SET DISPLAY ADDRESS
         MVC   ALRAD,VLRAD                    SET LERAD EXIT ADDRESS
         MVC   AMENU,VMENU                    SET MENU ADDRESS
         MVC   ANET,VNET                      SET NET ADDRESS
         MVC   APQRY,VPQRY                    SET PQUERY ADDRESS
         MVC   APRSE,VPRSE                    SET PARSER ADDRESS
         MVC   ATCPIP,VTCPIP                  SET TCPIP ADDRESS
         MVC   AVARS,VVARS                    SET DEFINE/DELETE ADDR
         MVC   AVTAM,VVTAM                    SET VTAM ADDRESS
* ------------------------------------------------------------------- *
*        Acquire storage for trace table                              *
* ------------------------------------------------------------------- *
         L     R3,TRSIZE                      TRACE TABLE SIZE
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=(R3),                       .. SIZE IS IN R3         +
               LOC=ANY                        .. MAY BE ABOVE OR BELOW
         ST    R1,TRADDR                      SAVE ADDRESS
         SR    R0,R0                          ASSUME ON BOUNDARY
         TM    TRADDR+3,X'07'                 ALREADY ON BOUNDARY?
         BNO   INIT0010                       YES
         SRL   R1,5                           SHIFT OUT LOW BITS ..
         SLL   R1,5                           .. TO ROUND
         LA    R1,32(,R1)                     PLUS 32
         LA    R0,TRENTRYL                    1 LESS ENTRY AVAILABLE
INIT0010 DS    0H
         ST    R1,TRFIRST                     FIRST TRACE ENTRY
         ST    R1,TRCURR                      CURRENT TRACE ENTRY
         A     R1,TRSIZE                      LAST ENTRY IN TABLE
         SH    R1,=Y(TRENTRYL)                MINUS 1 ENTRY
         SR    R1,R0                          MINUS 1 MORE IF NECESSARY
         ST    R1,TRLAST                      LAST TRACE ENTRY ADDRESS
         ITRACE ID=INITIAL
*        OI    XTR_FLAG,$XTR_ON
* ------------------------------------------------------------------- *
*        Process initialization parm                                  *
* ------------------------------------------------------------------- *
         SR    R2,R2                          CLEAR REGISTER
         ICM   R2,3,0(R9)                     PARAMETER LENGTH
         BZ    ERR0010                        NO PARAMETER
         CH    R2,H256                        TOO LONG?
         BH    ERR0020                        YES
         MVC   DXD_WORK,COMM_BLANKS           INITIALIZE WORK AREA
         LA    R1,DXD_WORK
         LA    R3,2(,R9)                      SKIP LENGTH
         SR    R4,R4                          ZERO FOR LENGTH
INIT0020 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BE    INIT0030                       YES
         CLI   0(R3),C':'                     COLON?
         BE    INIT0040                       YES
         MVC   0(1,R1),0(R3)                  COPY TO WORK AREA
         LA    R1,1(,R1)                      NEXT
         LA    R3,1(,R3)                      NEXT
         LA    R4,1(,R4)                      ADD TO LENGTH
         BCT   R2,INIT0020                    LOOP
INIT0030 DS    0H
         OI    COMM_FLAG,$COMM_VTAM           USING VTAM
         MVC   COMM_SUTL_APPL,DXD_WORK        COPY TO COMM AREA
         B     INIT0050
INIT0040 DS    0H
         ST    R4,COMM_HOSTNAME_LENGTH        SAVE LENGTH
         MVC   COMM_SUTL_HOSTNAME,DXD_WORK    COPY HOSTNAME
         PACK  COMM_DWORD,1(5,R3)             PACK PORT NUMBER
         CVB   R0,COMM_DWORD                  CONVERT TO BINARY
         STH   R0,COMM_SUTL_PORT              SAVE PORT NUMBER
         OI    COMM_FLAG,$COMM_TCPIP          USING TCP/IP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0050 DS    0H
         GETMAIN RU,                                                   +
               LV=32760,                                               +
               LOC=ANY
         LR    R7,R1
         ST    R7,COMM_IO                     SAVE I/O AREA ADDRESS
         USING NET_IO,R7
         ITRACE ID=IO,                                                 +
               RDATA1=R7
* ------------------------------------------------------------------- *
*        Load SPF interface module                                    *
* ------------------------------------------------------------------- *
         ITRACE ID=LOADSPF
         LOAD  EP=ISPLINK                     LOAD SPF INTERFACE MODULE
         ST    R0,AISPLINK                    SET ADDRESS
* ------------------------------------------------------------------- *
*        Do network related initialization                            *
* ------------------------------------------------------------------- *
         ITRACE ID=NET_INIT
         MVI   COMM_NET_COMMAND,$NET_INIT     SET COMMAND
         L     R15,ANET
         BALR  R14,R15
* ------------------------------------------------------------------- *
*        Identify ourselves to STC                                    *
* ------------------------------------------------------------------- *
         USING PSA,R0                         DEFINE PSA'S BASE
         L     R1,PSAAOLD                     OUR ASCB'S ADDRESS
         USING ASCB,R1                        DEFINE BASE
         ICM   R1,15,ASCBJBNS                 USER'S ID ADDRESS
         MVC   COMM_USER,0(R1)                COPY USER'S ID
         L     R1,CVTPTR                      CVT'S ADDRESS
         USING CVT,R1                         DEFINE CVT'S BASE
         ICM   R1,15,CVTSMCA                  SMF CONTROL AREA ADDRESS
         USING SMCABASE,R1                    DEFINE BASE
         MVC   COMM_USER_SMF,SMCASID          COPY SYSTEM'S SMF ID
         ITRACE ID=ID_USER,                                            +
               DATA1=COMM_USER,                                        +
               DATA2=COMM_USER_SMF
         MVI   NET_FUNCTION,$NET_ID           SET COMMAND
         LA    R1,NET_HEADER_L+NET_ID_L       LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         MVC   NET_SMF_ID,COMM_USER_SMF       COPY SYSTEM'S SMF NAME
         MVC   NET_USER_ID,COMM_USER          COPY USER'S ID
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R15,ANET                       VTAM ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND (RECEIVE)
         L     R15,ANET                       VTAM ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE
         MVC   COMM_SUTL_SMF,NET_SMF_ID       COPY STC'S SMF ID
         MVC   COMM_SUTL_SYSTEM_NAME,NET_SYSTEM_NAME
* ------------------------------------------------------------------- *
*        Define SPF variables                                         *
* ------------------------------------------------------------------- *
         ITRACE ID=VARDEF                     DEFINING ISPF VARIABLES
         MVI   VAR_COMMAND,$VAR_DEFINE_ALL    SET COMMAND (DEFINE ALL)
         LA    R1,LVLINE                      VARIABLE DATA BASE
         ST    R1,VAR_AREA                    PASS DATA ADDRESS
         LA    R1,SPFVARS                     VARIABLE CONTROL DATA
         ST    R1,VAR_TABLE                   PASS CONTROL DATA ADDRESS
         LA    R1,VAR_REQ                     VAR PARM BLOCK ADDRESS
         L     R15,AVARS                      TSOVARS ENTRY POINT
         BALR  R14,R15                        LINK TO TSOVARS
         TM    COMM_FLAG,$ABORT               ERRORS IN DURING TSOINIT?
         BO    TERM0000                       YES
* ------------------------------------------------------------------- *
*        Build text for menu                                          *
* ------------------------------------------------------------------- *
MAIN0010 DS    0H
         ITRACE ID=BLDMMENU                   DISPLAY MENU
         L     R2,AMENU                       MENU TABLE ADDRESS
         SR    R0,R0                          CLEAR REGISTER
         LH    R1,2(R2)                       NUMBER OF COMMANDS
         ST    R1,COMM_TEXT_LINES             SAVE NUMBER OF TEXT LINES
         M     R0,LINELEN                     TIMES TEXT LINE LENGTH
         ST    R1,COMM_TEXT_LENGTH            SAVE TEXT AREA SIZE
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=(1),                        .. SIZE OF AREA          +
               LOC=ANY
         ST    R1,COMM_TEXT                   SAVE TEXT AREA ADDRESS
         LR    R3,R1                          COPY TEXT ADDRESS
         USING DTL,R3                         DEFINE DETAIL LINE BASE
         LH    R4,2(R2)                       NUMBER OF ITEMS
         LA    R2,4(,R2)                      SKIP COUNTERS
         USING MENU_DSECT,R2                  DEFINE BASE
MAIN0020 DS    0H
         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE?
         BO    MAIN0030                       NO
         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE DETAIL AREA
         MVI   DTL_ATTR_1,$ATTR_HIGH_TURQUOISE
         MVC   DTL_CMD,MENU_CMD               COPY COMMAND
         MVI   DTL_ATTR_2,$ATTR_NORMAL        SET ATTRIBUTE
         MVC   DTL_DESC,MENU_DESC             COPY DESCRIPTION
         LA    R3,DTL_L(,R3)                  NEXT DETAIL LINE
         LA    R2,MENU_DSECT_L(,R2)           NEXT MENU ITEM
         BCT   R4,MAIN0020                    LOOP
         B     MAIN0040
MAIN0030 DS    0H
         LA    R2,MENU_DESC-MENU_DSECT(,R2)
         B     MAIN0020                       LOOP
MAIN0040 DS    0H
         MVC   COMM_PANEL,MENU_PANEL          SET PANEL NAME
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR                    O ZERO
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LINE LENGTH
MAIN0050 DS    0H
         ITRACE ID=CALLDISP
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        DISPLAY THE MENU
         CH    R15,H8                         END?
         BE    TERM0000                       YES, BEGIN TERMINATION
         CLC   ZCMD,COMM_BLANKS               ANY COMMAND?
         BE    MAIN0050                       NO
MAIN0060 DS    0H
         LA    R1,L'ZCMD                      INPUT LENGTH
         STH   R1,PARSE_LENGTH                SET LENGTH
         MVC   PARSE_IN,ZCMD                  COPY INPUT STRING
         LA    R1,PARSE_REQ                   PARSE PARMS ADDRESS
         L     R15,APRSE                      PARSER ADDRESS
         BALR  R14,R15                        PARSE
         L     R2,AMENU                       MENU DATA BASE ADDRESS
         LH    R4,0(R2)                       NUMBER OF MENU ITEMS
         LA    R2,4(,R2)                      SKIP COUNTERS
MAIN0070 DS    0H
         CLC   MENU_CMD,PARSE_OUT             COMMAND FOUND?
         BE    MAIN0100                       YES
         TM    MENU_FLAGS,$MENU_NO_DISPLAY    DISPLAYABLE?
         BO    MAIN0080                       NO
         LA    R2,MENU_DSECT_L(,R2)
         B     MAIN0090
MAIN0080 DS    0H
         LA    R2,MENU_DESC-MENU_DSECT(,R2)
MAIN0090 DS    0H
         BCT   R4,MAIN0070                    LOOP
         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE
         B     MAIN0010                       RE-SEND MENU
MAIN0100 DS    0H
         ITRACE ID=CMDFOUND                   DISPLAY ACTIVE REGIONS
         ICM   R1,15,COMM_TEXT                TEXT AREA ADDRESS
         BZ    MAIN0110
         L     R0,COMM_TEXT_LENGTH            TEXT LENGTH
         ITRACE ID=FREETEXT,                                           +
               RDATA1=R1,                                              +
               RDATA2=R0
         FREEMAIN RU,                         FREEMAIN TEXT AREA       +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
MAIN0110 DS    0H
*        MVC   ZCMD,PARSE_IN                  COPY REMAINING COMMAND
         ICM   R15,15,MENU_ADDR               FUNCTION ENTRY POINT
         ITRACE ID=CALL_CMD,                                           +
               RDATA1=R15
         BALR  R14,R15                        LINK TO ACTIVITY DISPLAY
         TM    COMM_FLAG,$ABORT               WAS ABORT FLAG SET?
         BO    ERR0040                        YES
         CLC   COMM_MSG,COMM_BLANKS           MESSAGE FOR MAIN MENU?
         BNE   MAIN0010                       YES
         CLC   ZCMD,COMM_BLANKS               COMMAND PRESENT?
         BNE   MAIN0060                       YES
         B     MAIN0010                       OTHERWISE SEND MENU
* ------------------------------------------------------------------- *
*        Termination/clean up                                         *
* ------------------------------------------------------------------- *
TERM0000 DS    0H
         ITRACE ID=TERM                       TERMINATION BEGINNING
         ICM   R1,15,COMM_TEXT                TEXT AREA ADDRESS
         BZ    TERM0010
         L     R0,COMM_TEXT_LINES             TEXT LENGTH
         FREEMAIN RU,                         FREEMAIN TEXT AREA       +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LINES,COMM_TEXT
* ------------------------------------------------------------------- *
*        Delete SPF variables                                         *
* ------------------------------------------------------------------- *
TERM0010 DS    0H
         MVI   VAR_COMMAND,$VAR_DELETE_ALL    SET COMMAND (DELETE ALL)
         LA    R1,VAR_REQ                     PARM BLOCK ADDRESS
         L     R15,AVARS                      DEFINE/DELETE ADDRESS
         BALR  R14,R15                        DELETE VARIABLES
* ------------------------------------------------------------------- *
*        Inform STC we're going home                                  *
* ------------------------------------------------------------------- *
         ITRACE ID=LOGOFF
         MVI   NET_FUNCTION,$NET_LOGOFF       SET COMMAND
         LA    R1,NET_HEADER_L
         STCM  R1,3,NET_LENGTH
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R15,ANET                       VTAM ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
* ------------------------------------------------------------------- *
*        Do network related cleanup                                   *
* ------------------------------------------------------------------- *
         ITRACE ID=CLEAN_UP
         MVI   COMM_NET_COMMAND,$NET_CLEANUP  SET COMMAND
         L     R15,ANET
         BALR  R14,R15
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ICM   R1,15,COMM_IO                  I/O AREA ADDRESS
         BZ    EXIT0000                       NOT ACQUIRED
         ITRACE ID=FREEIO,                    FREEMAIN I/O AREA        +
               RDATA1=R1                      .. I/O AREA'S ADDRESS
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=32760
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NOPARM
         LA    R2,MSG02                       NO PARM MESSAGE
         LA    R3,MSG02L                      MESSAGE'S LENGTH
         BAL   R9,TPUT0000                    ISSUE MESSAGE
         LA    R3,12                          SET RETURN CODE
         B     EXIT0020                       AND EXIT
ERR0020  DS    0H
         ITRACE ID=PARMLONG
         LA    R2,MSG03                       PARM TOO LONG MESSAGE
         LA    R3,MSG03L                      MESSAGE'S LENGTH
         BAL   R9,TPUT0000                    ISSUE MESSAGE
         MVI   COMM_RC,14                     SET RETURN CODE
         B     EXIT0010                       AND EXIT
ERR0040  DS    0H
         ITRACE ID=CMDFAIL                    COMMAND FAILED
         ABEND $U1002,DUMP,,USER
         ABEND $U1008,DUMP,,USER
TPUT0000 DS    0H
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=(R3),                       .. SIZE OF MESSAGE       +
               LOC=BELOW                      .. FROM BELOW THE LINE
         BCTR  R3,0                           FOR EXECUTE
         EX    R3,TPUTMVC                     MOVE MESSAGE TEXT
         LR    R2,R1                          COPY MESSAGE ADDRESS
         LA    R3,1(,R3)                      RESTORE FULL LENGTH
         TPUT  (R2),(R3)                      ISSUE MESSAGE
         FREEMAIN RU,                         FREE MESSAGE AREA        +
               A=(R2),                                                 +
               LV=(R3)
         BR    R9                             RETURN
TPUTMVC  MVC   0(0,R1),0(R2)                  COPY MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R0,TRSIZE                      TRACE TABLE SIZE
         L     R1,TRADDR                      TRACE TABLE ADDRESS
         FREEMAIN RU,                         FREEMAIN TRACE TABLE     +
               A=(1),                                                  +
               LV=(0)
EXIT0010 DS    0H
         L     R2,COMM_DXD_ADDRESS            SAVE WORK AREA ADDRESS
         SR    R3,R3                          CLEAR REGISTER
         IC    R3,COMM_RC                     RETURN CODE
         DELETE EP=TSOCOMM                    DELETE COMMON MODULE
         L     R0,DXDSIZE                     WORK AREA SIZE
         L     R13,4(,R13)                    RESTORE R13
         FREEMAIN RU,                         FREEMAIN WORK AREA       +
               A=(R2),                                                 +
               LV=(0)
EXIT0020 DS    0H
         L     R14,12(,R13)                   RESTORE R14
         LR    R15,R3                         SET RETURN CODE
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            EXIT
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDMAIN)           DISPLACEMENT TO WORK AREA
DXDSIZE  CXD                        WORK AREA TOTAL SIZE
VDISP    DC    V(TSODISP)           DYNAMIC AREA DISPLAY
VLRAD    DC    V(TSOLRAD)           LERAD EXIT
VMENU    DC    V(TSOMENU)           MENU DATA
VNET     DC    V(TSONET)            NET FUNCTIONS
VPQRY    DC    V(TSOPQRY)           DYNAMIC AREA PQUERY
VPRSE    DC    V(TSOPRSE)           COMMAND PARSER
VTCPIP   DC    V(TSOTCPIP)          TCPIP FUNCTIONS
VVARS    DC    V(TSOVARS)           SPF VARIABLE DEFINE/DELETE
VVTAM    DC    V(TSOVTAM)           TSO VTAM FUNCTIONS
LINELEN  DC    A(DTL_L)
H8       DC    H'8'
H256     DC    H'256'
MENU_PANEL DC  CL8'SUTLMENU'
         FMH5  DSECT=NO              GENERATE FMH5
MSG01    DS    0C
         DC    CL11'TSOMAIN01E'
         DC    C'Invalid function code'
MSG01L   EQU   *-MSG01
MSG02    DC    C'TSOMAIN02E * SUTL STC APPLID or HOSTNAME is required'
MSG02L   EQU   *-MSG02
MSG03    DC    C'TSOMAIN03E * Start parameter too long'
MSG03L   EQU   *-MSG03
         LTORG
         VDEF  BASE=LVLINE
SPFVARS  DS    0C
         VDEF  NAME=PSMF,            DEFINE VARIABLE                   +
               DATA=COMM_SUTL_SMF,   .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PSYSTEM,         DEFINE VARIABLE                   +
               DATA=COMM_SUTL_SYSTEM_NAME,    NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PUID,            DEFINE VARIABLE                   +
               DATA=COMM_USER,       .. FIELD NAME IN TSOCOMM          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSGI,           DEFINE VARIABLE                   +
               DATA=COMM_MSGI,       .. FIELD NAME IN TSOCOMM          +
               LENGTH=11,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=PMSGT,           DEFINE VARIABLE                   +
               DATA=COMM_MSGT,       .. FIELD NAME IN TSOCOMM          +
               LENGTH=59,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=LVLINE,          DEFINE VARIABLE                   +
               DATA=LVLINE,          .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VCOL,            DEFINE VARIABLE                   +
               DATA=VCOL,            .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VDEPTH,          DEFINE VARIABLE                   +
               DATA=VDEPTH,          .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VROW,            DEFINE VARIABLE                   +
               DATA=VROW,            .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=VTYPE,           DEFINE VARIABLE                   +
               DATA=VTYPE,           .. FIELD NAME IN TSOCOMM          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=VWIDTH,          DEFINE VARIABLE                   +
               DATA=VWIDTH,          .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=ZSCROLLN,        DEFINE VARIABLE                   +
               DATA=ZSCROLLN,        .. FIELD NAME IN TSOCOMM          +
               LENGTH=4,             .. LENGTH                         +
               FORM=FIXED            .. FORMAT
         VDEF  NAME=ZSCROLLA,        DEFINE VARIABLE                   +
               DATA=ZSCROLLA,        .. FIELD NAME IN TSOCOMM          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=ZVERB,           DEFINE VARIABLE                   +
               DATA=ZVERB,           .. FIELD NAME IN TSOCOMM          +
               LENGTH=8,             .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         VDEF  NAME=ZCMD,            DEFINE VARIABLE                   +
               DATA=ZCMD,            .. FIELD NAME IN TSOCOMM          +
               LENGTH=80,            .. LENGTH                         +
               FORM=CHAR             .. FORMAT
         DC    X'FF'
* ------------------------------------------------------------------- *
*        WORK AREA                                                    *
* ------------------------------------------------------------------- *
DXDMAIN  DSECT
         SUTLSAVE DSECT=NO
         VARREQ   DSECT=NO
         PARSEREQ DSECT=NO
DXD_WORK DS       CL256
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     MENUDSCT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL          DSECT
DTL_ATTR_1   DS       X
DTL_CMD      DS       CL4
DTL_ATTR_2   DS       C
             DS       C
DTL_DESC     DS       CL60
DTL_L        EQU      *-DTL
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                NETIO    DSECT=YES
NET_SMF_ID      DS       CL4
NET_SYSTEM_NAME DS       CL4
NET_USER_ID     DS       CL8
NET_ID_L        EQU      *-NET_DATA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAASCB  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IEESMCA
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         ABCODES
         END     TSOMAIN
./ ADD NAME=TSOMENU  0104-09141-09181-1616-00055-00049-00000-SOURCE
* ------------------------------------------------------------------- *
*                                                                     *
*    Define user commands.                                            *
*                                                                     *
*    Format of the MENUFUNC macro is"                                 *
*           MENUFUNC  command,'menu text',modname,DISPLAY=YES/no      *
*                                                                     *
*    The "command" may be up to 4 characters, alpha or numeric.       *
*                                                                     *
*    The "menu text' may be up to 60 characters long and must be      *
*    inclosed in single apostrophes.                                  *
*                                                                     *
*    "modname" is the name of the module that will be given control   *
*    when "command" is entered.                                       *
*                                                                     *
*    DISPLAY= (YES is default) specifies whether or not the command   *
*    will be displayed on the menu panel.                             *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
TSOMENU    CSECT
TSOMENU    AMODE 31
TSOMENU    RMODE ANY
           DC       Y($MENUA)         TOTAL NUMBER OF ENTRIES
           DC       Y($MENUD)         NUMBER OF DISPLAYABLE ENTRIES

           MENUFUNC 1,'Display active regions',TSOACT
           MENUFUNC ACT,,TSOACT,DISPLAY=NO
           MENUFUNC 2,'Display APF list',TSOAPF
           MENUFUNC APF,,TSOAPF,DISPLAY=NO
           MENUFUNC AUTH,,TSOAPF,DISPLAY=NO
           MENUFUNC 3,'Display IPL info',TSOIPL
           MENUFUNC IPL,,TSOIPL,DISPLAY=NO
           MENUFUNC 4,'Display filesystems',TSOFS
           MENUFUNC FS,,TSOFS,DISPLAY=NO
           MENUFUNC 5,'Display link list',TSOLLA
           MENUFUNC LLA,,TSOLLA,DISPLAY=NO
           MENUFUNC LNK,,TSOLLA,DISPLAY=NO
           MENUFUNC LINK,,TSOLLA,DISPLAY=NO
           MENUFUNC 6,'Display Open Edition processes',TSOPS
           MENUFUNC PS,,TSOPS,DISPLAY=NO
           MENUFUNC 7,'Display sub systems',TSOSUB
           MENUFUNC SUB,,TSOSUB,DISPLAY=NO
           MENUFUNC 8,'Display SUTL users',TSOUSE
           MENUFUNC USE,,TSOUSE,DISPLAY=NO
           MENUFUNC USER,,TSOUSE,DISPLAY=NO
           MENUFUNC XTR,,TSOXTR,DISPLAY=NO
           MENUFUNC DISPLAY=COUNT
           COPY     MENUDSCT
           END      TSOMENU
./ ADD NAME=TSONET   0103-09152-09169-1426-00093-00094-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSONET                                                *
*                                                                     *
*  Perform NETWORK functions.                                         *
*                                                                     *
* ------------------------------------------------------------------- *
TSONET   CSECT
TSONET   AMODE 31
TSONET   RMODE ANY
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSONET,R11                     DEFINE BASE
         USING USERBLOK,R10                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     NET0000
MODID    DC    CL8'TSONET'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
NET0000  DS    0H
         L     R1,COMM_DXD_ADDRESS            DYNAMIC WORK AREA BASE
         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART
         ST    R13,4(,R1)                     CHAIN WORK AREA
         ST    R1,8(,R13)                     CHAIN WORK AREA
         LR    R13,R1                         COPY WORK AREA ADDRESS
         USING DXDNET,R13                     DEFINE BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    NET0010                        YES
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
NET0010  DS    0H
         ITRACE ID=ENTRY
         TM    COMM_FLAG,$COMM_TCPIP          USING TCP/IP?
         BO    NET0020                        YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         ITRACE ID=VTAM
         L     R15,AVTAM
         B     NET0030
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
NET0020  DS    0H
         ITRACE ID=TCPIP
         L     R15,ATCPIP
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
NET0030  DS    0H
         ITRACE ID=CALL,                                               +
               RDATA1=R15
         BALR  R14,R15                        CALL VTAM OR TCPIP
         ITRACE ID=CALL_X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    CALLER'S R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDNET)                      DISPLACEMENT TO WORK AREA

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDNET   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      TSONET
./ ADD NAME=TSOPQRY  0102-09141-09169-1426-00106-00106-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOPQRY - Obtain dynamic area data                    *
*                                                                     *
*  Function:                                                          *
*   Determine characteristics of the dynamic area                     *
*                                                                     *
* ------------------------------------------------------------------- *
TSOPQRY  CSECT
TSOPQRY  AMODE 31
TSOPQRY  RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE ADDRESS
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOPQRY,R11                    DEFINE PROGRAM BASE
         B     PQRY0000
MODID    DC    CL8'TSOPQRY'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PQRY0000 DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDPQRY,R13                    DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    PQRY0010                       YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PQRY0010 DS    0H
         ITRACE ID=ENTRY                      ISSUING PQUERY
         LA    R1,PQUERY                      COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET IN PARM LIST
         LA    R1,COMM_PANEL                  PANEL NAME'S ADDRESS
         ST    R1,DXD_SPF2                    SET IN PARM LIST
         LA    R1,CVDATA                      AREA NAME
         ST    R1,DXD_SPF3                    SET IN PARM LIST
         LA    R1,CVTYPE                      AREA TYPE
         ST    R1,DXD_SPF4                    SET IN PARM LIST
         LA    R1,CVWIDTH                     SCREEN DEPTH
         ST    R1,DXD_SPF5                    SET IN PARM LIST
         LA    R1,CVDEPTH                     SCREEN WIDTH
         ST    R1,DXD_SPF6                    SET IN PARM LIST
         LA    R1,CVROW                       SCREEN ROW
         ST    R1,DXD_SPF7                    SET IN PARM LIST
         LA    R1,CVCOL                       SCREEN COLUMN
         ST    R1,DXD_SPF8                    SET IN PARM LIST
         OI    DXD_SPF8,X'80'                 FLAG 'END-OF-LIST'
         LA    R1,DXD_SPF_PARMS               PQUERY PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF INTERFACE'S ADDRESS
         BALR  R14,R15                        ISSUE QUERY
         LTR   R15,R15                        PQUERY SUCCESSFUL?
         BZ    EXIT0000                       YES
         ITRACE ID=PQRYFAIL,                  PQUERY FAILED            +
               RDATA1=R15                     .. PQUERY RETURN CODE
         ABEND $U1018,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDPQRY)                     DISPLACEMENT TO WORK AREA
PQUERY   DC    CL8'PQUERY'
CVDATA   DC    CL8'VDATA'
CVTYPE   DC    CL8'VTYPE'
CVWIDTH  DC    CL8'VWIDTH'
CVDEPTH  DC    CL8'VDEPTH'
CVROW    DC    CL8'VROW'
CVCOL    DC    CL8'VCOL'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDPQRY        DSECT
               SUTLSAVE DSECT=NO
DXD_SPF_PARMS  DS    0A                  ISPF PARM LIST
DXD_SPF1       DS    A                   PARM 1 ADDRESS
DXD_SPF2       DS    A                   PARM 2 ADDRESS
DXD_SPF3       DS    A                   PARM 3 ADDRESS
DXD_SPF4       DS    A                   PARM 4 ADDRESS
DXD_SPF5       DS    A                   PARM 5 ADDRESS
DXD_SPF6       DS    A                   PARM 6 ADDRESS
DXD_SPF7       DS    A                   PARM 7 ADDRESS
DXD_SPF8       DS    A                   PARM 8 ADDRESS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA  DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         ABCODES
         END     TSOPQRY
./ ADD NAME=TSOPRSE  0102-09141-09173-0910-00093-00093-00000-SOURCE
         COPY OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOPRSE   Parse command strings                       *
*                                                                     *
*  Purpose: Parse command strings.  This is written as a subroutine   *
*           and does not use standard linkage.   It does not refer    *
*           to any fields in a "COMM" area.                           *
*                                                                     *
*           Delimiters are blanks, =, periods, and commas.            *
*           Delimiters are removed (they are not returned as a        *
*           separate entity or with the preceding or following data). *
*           Output length will not contain the length of the          *
*           delimiters.  Leading blanks are removed, output length    *
*           does not contain trailing blanks.                         *
*                                                                     *
*           Input strings are modified by this routine.  To parse a   *
*           command completely, the caller should copy the initial    *
*           command to the parse input, and then call this routine    *
*           repetatively until the output length returned is zero.    *
*                                                                     *
*           Output will always be padded on the right with blanks.    *
*                                                                     *
* ------------------------------------------------------------------- *
TSOPRSE  CSECT
TSOPRSE  AMODE 31
TSOPRSE  RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        LOAD BASE
         USING TSOPRSE,R11                    DEFINE BASE
         B     PRSE0000                       SKIP EYECATCHER
         DC    CL8'TSOPRSE'
         DC    C'&SYSDATE'
         DC    C'&SYSTIME'
PRSE0000 DS    0H
         LR    R10,R1                         COPY PARM BLOCK ADDRESS
         USING PARSE_REQ,R10                  DEFINE BASE
         MVC   PARSE_OUT,BLANKS               INITIALIZE OUTPUT AREA
         LA    R1,PARSE_OUT                   INITIAL OUTPUT ADDRESS
         SR    R2,R2                          INITIAL OUTPUT LENGTH
         LA    R3,L'PARSE_IN                  MAX LENGTH
PRSE0010 DS    0H
         CLI   PARSE_IN,C' '                  BLANK?
         BNE   PRSE0020                       NO
         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT
         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE
         BCT   R3,PRSE0010                    LOOP
         B     PRSE0040                       NO DATA
PRSE0020 DS    0H
         CLI   PARSE_IN,C' '                  ENDING BLANK?
         BE    PRSE0040                       YES
         CLI   PARSE_IN,C'='                  ENDING EQUAL SIGN?
         BE    PRSE0030                       YES
         CLI   PARSE_IN,C'.'                  IMBEDDED PERIOD?
         BE    PRSE0030                       YES
         CLI   PARSE_IN,C','                  ENDING COMMA?
         BE    PRSE0030                       YES
         MVC   0(1,R1),PARSE_IN               COPY TO OUTPUT
         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT
         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE
         LA    R1,1(,R1)                      NEXT IN OUTPUT
         LA    R2,1(,R2)                      PLUS 1 TO LENGTH
         BCT   R3,PRSE0020                    LOOP
         B     PRSE0040
PRSE0030 DS    0H
         MVC   PARSE_IN(L'PARSE_IN-1),PARSE_IN+1 SHIFT 1 TO LEFT
         MVI   PARSE_IN+L'PARSE_IN-1,C' '     CLEAR ENDING BYTE
PRSE0040 DS    0H
         STH   R2,PARSE_LENGTH                SET OUTPUT LENGTH
*---------------------------------------------------------------------*
*                                                                     *
*                                                                     *
*                                                                     *
*---------------------------------------------------------------------*
EXIT0000 DS    0H
         L     R14,12(,R13)                  RESTORE R14
         LM    R0,R12,20(R13)                RESTORE REGISTERS
         BR    R14                           RETURN TO CALLER
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
BLANKS   DC    (L'PARSE_OUT)C' '
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         PARSEREQ DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY  REGEQU
         END   TSOPRSE
./ ADD NAME=TSOPS    0118-09146-09170-0824-00232-00180-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOPS                                                 *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the Open Edition processes                   *
*                                                                     *
* ------------------------------------------------------------------- *
TSOPS    CSECT
TSOPS    AMODE 31
TSOPS    RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOPS,R11                      DEFINE BASE
         B     PS0000
MODID    DC    CL8'TSOPS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PS0000   DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXD_START                   PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDPS,R13                      DEFINE WORK AREA BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    PS0010                         YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
PS0010   DS    0H
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
PS0020   DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_PS           SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   NET_RC,X0004                   I/O AREA OVERFLOW?
         BNE   PS0030                         NO
         MVC   COMM_MSG(MSG01L),MSG01
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA FOR DISPLAY                            *
* ------------------------------------------------------------------- *
PS0030   DS    0H
         SR    R2,R2                          CLEAR REGISTER
         ICM   R2,3,PS_NBR                    ANY NAMES RETURNED?
         BZ    PS0090                         NO
         ITRACE ID=BLDTEXT,                                            +
               RDATA1=R2
         ST    R2,COMM_TEXT_LINES             NUMBER OF TEXT LINES
         LA    R1,ATTR_TABLE
         ST    R1,DXD_CURR_ATTR
PS0040   DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R2                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     LENGTH OF TEXT
         ST    R1,COMM_TEXT_LENGTH            SAVE LENGTH OF TEXT
         ITRACE ID=GET_TEXT,                                           +
               RDATA1=R1
         GETMAIN RU,                          ACQUIRE STORAGE FOR TEXT +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ITRACE ID=TEXTAREA,                                           +
               RDATA1=R1
         ST    R1,COMM_TEXT                   TEXT STORAGE AREA ADDRESS
         USING DTL,R1                         DEFINE BASE
         LA    R5,PS_DATA                     FIRST PROCESS
         USING PS_DATA,R5                     DEFINE BASE
PS0050   DS    0H
         ITRACE ID=BLD_DTL,                                            +
               RDATA1=R1,                                              +
               RDATA2=R5
         MVC   DTL(DTL_L),COMM_BLANKS
         L     R15,DXD_CURR_ATTR
         MVC   DTL_ATTR,0(R15)
         LA    R15,1(,R15)
         CLI   0(R15),X'FF'
         BNE   PS0060
         LA    R15,ATTR_TABLE
PS0060   DS    0H
         ST    R15,DXD_CURR_ATTR
         ICM   R0,15,PS_PID                   PROCESS ID
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT,EDWORD                INITIALIZE EDIT WORD
         ED    DXD_EDIT,COMM_DWORD+3          EDIT PROCESS ID
         MVC   DTL_PID,DXD_EDIT+1             COPY PROCESS ID
         ICM   R0,15,PS_PPID                  PARENT PROCESS ID
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT,EDWORD                INITIALIZE EDIT WORD
         ED    DXD_EDIT,COMM_DWORD+3          EDIT PROCESS ID
         MVC   DTL_PPID,DXD_EDIT+1            COPY PARENT PROCESS ID
         ICM   R0,15,PS_IO                    NBR OF I/O'S
         CVD   R0,COMM_DWORD                  CONVERT TO DECIMAL
         MVC   DXD_EDIT,EDWORD
         ED    DXD_EDIT,COMM_DWORD+3          EDIT NBR OF I/O'S
         MVC   DTL_IO,DXD_EDIT+1
         ICM   R14,15,PS_USER_TIME            USER TIME
         ICM   R15,15,PS_SYSTEM_TIME          SYSTEM TIME
         AR    R15,R14                        TOTAL TIME
         CVD   R15,COMM_DWORD                 CONVERT TO DECIMAL
         MVC   DTL_CPU_TIME,TIME_EDWORD       INITIALIZE EDIT WORD
         ED    DTL_CPU_TIME,COMM_DWORD+4      EDIT TIME
         MVC   DTL_COMMAND,PS_COMMAND         COPY COMMAND
         LA    R1,DTL_L(,R1)                  NEXT DETAIL AREA
         LA    R5,PS_DATA_L(,R5)              NEXT PROCESS
         BCT   R2,PS0050                      LOOP
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE
PS0070   DS    0H
         ITRACE ID=CALLDISP                   CALLING DISP
         MVI   COMM_DISPLAY_FLAGS,$NO_CURSOR+$MULTIPLE_SCREENS
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISP
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   PS0080                         NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    PS0020                         YES..
PS0080   DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT STORAGE
         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH
         FREEMAIN RU,                         FREE TEXT STORAGE        +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*              NO PROCESSES                                           *
* ------------------------------------------------------------------- *
PS0090   DS    0H
         ITRACE ID=NOPS                       NO PROCESSES
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDPS)                     DISPLACEMENT TO WORK AREA
LINELEN    DC    A(DTL_L)                     LENGTH DETAIL LINE
X0004      DC    X'0004'
PANEL_NAME DC    CL8'SUTLPS'                  PANEL NAME
EDWORD     DC    X'40202020202020202120'
TIME_EDWORD DC   X'4020202020214B2020'

MSG01      DS    0C
           DC    CL11'TSOPS01I'
           DC    C'Process list truncated'
MSG01L     EQU   *-MSG01

MSG02      DS    0C
           DC    CL11'TSOPS02I'
           DC    C'There are no active processes!'
MSG02L     EQU   *-MSG02

ATTR_TABLE DC    AL1($ATTR_HIGH)
           DC    AL1($ATTR_HIGH_YELLOW)
           DC    AL1($ATTR_HIGH_RED)
           DC    AL1($ATTR_HIGH_TURQUOISE)
           DC    AL1($ATTR_HIGH_GREEN)
           DC    X'FF'

           LTORG
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
DXDPS          DSECT
               SUTLSAVE DSECT=NO
DXD_CURR_ATTR  DS   A
DXD_EDIT       DS   CL10
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL             DSECT
DTL_ATTR        DS    X               ATTRIBUTE CHARACTER
DTL_PID         DS    CL9             PROCESSS ID
                DS    CL2
DTL_PPID        DS    CL9             PARENT PROCESS ID
                DS    CL1
DTL_IO          DS    CL9             NBR OF I/O'S
                DS    CL1
DTL_CPU_TIME    DS    CL9             CPU TIME USED
                DS    CL2
DTL_COMMAND     DS    CL38            COMMAND
DTL_L           EQU   *-DTL           LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
         COPY    PSDATA
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOPS
./ ADD NAME=TSOSUB   0105-09141-09173-0911-00205-00205-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOSUB                                                *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the sub-systems.                             *
*                                                                     *
*  Sub-commands                                                       *
*   None.                                                             *
*                                                                     *
* ------------------------------------------------------------------- *
TSOSUB   CSECT
TSOSUB   AMODE 31
TSOSUB   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOSUB,R11                     DEFINE BASE
         B     SUB0000
MODID    DC    CL8'TSOSUB'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
SUB0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDSUB,R13                     DEFINE WORK AREA BASE
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    SUB0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
SUB0010  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         MVI   NET_FUNCTION,$NET_SUB          SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA                                        *
* ------------------------------------------------------------------- *
         SR    R7,R7                          CLEAR REGISTER
         ICM   R7,3,SUBSYSTEM_NBR             ANY SUBSYSTEMS RETURNED?
         BZ    SUB0060                        NO
         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES
SUB0020  DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R7                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     TIMES LENGTH
         ST    R1,COMM_TEXT_LENGTH            SAVE SIZE OF TEXT
         GETMAIN RU,                          ACQUIRE TEXT AREA        +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ST    R1,COMM_TEXT                   TEXT AREA ADDRESS
         LR    R8,R1                          COPY TEXT AREA ADDRESS
         USING DTL,R8                         DEFINE BASE
         LA    R9,SUBSYSTEM_DATA              FIRST DATASET NAME
         USING SSCT,R9                        DEFINE BASE
         CLC   NET_RC,X0004                   LIST TRUNCATED?
         BNE   SUB0030                        NO
         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE
SUB0030  DS    0H
         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE DETAIL AREA
         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE
         MVC   DTL_NAME,SSCTSNAM              COPY SUBSYSTEM NAME
         UNPK  DTL_FLAG1(3),SSCTFLG1(2)
         TR    DTL_FLAG1,HEXCHAR              TRANSLATE TO PRINTABLE
         MVI   DTL_FLAG1+2,C' '               RESTORE BLANK
         UNPK  DTL_SSID(3),SSCTSSID(2)
         TR    DTL_SSID,HEXCHAR               TRANSLATE TO PRINTABLE
         MVI   DTL_SSID+2,C' '                RESTORE BLANK
         UNPK  DTL_SSVT(9),SSCTSSVT(5)
         TR    DTL_SSVT,HEXCHAR               TRANSLATE TO PRINTABLE
         MVI   DTL_SSVT+8,C' '                RESTORE BLANK
         UNPK  DTL_SUSE(9),SSCTSUSE(5)
         TR    DTL_SUSE,HEXCHAR               TRANSLATE TO PRINTABLE
         MVI   DTL_SUSE+8,C' '                RESTORE BLANK
         UNPK  DTL_SYN(9),SSCTSYN(5)
         TR    DTL_SYN,HEXCHAR                TRANSLATE TO PRINTABLE
         MVI   DTL_SYN+8,C' '                 RESTORE BLANK
         LA    R9,SSCTSIZE(,R9)               NEXT SUBSYSTEM
         LA    R8,DTL_L(,R8)                  NEXT OUTPUT AREA
         BCT   R7,SUB0030                     LOOP
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN  SET LENGTH OF EACH LINE
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
SUB0040  DS    0H
         ITRACE ID=CALLDISP                   CALLING DISP
         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA
         L     R15,ADISP                      DISPLAY
         BALR  R14,R15                        LINK TO DISPLAY
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   SUB0050                        NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    SUB0040                        YES.. REDISPLAY
SUB0050  DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT
         L     R1,COMM_TEXT                   TEXT STORAGE ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT STORAGE LENGTH
         FREEMAIN RU,                         FREE TEXT                +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*              NO subsystems                                          *
* ------------------------------------------------------------------- *
SUB0060  DS    0H
         ITRACE ID=NOSUBSYS                   NO SUBSYSTEMS
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDSUB)                      DISPLACEMENT TO WORK AREA
LINELEN  DC    A(DTL_L)                       LENGTH of DETAIL LINE
X0004    DC    X'0004'

HEXCHAR  EQU   *-C'0'
         DC    C'0123456789ABCDEF'

PANEL_NAME DC  CL8'SUTLSUB'          PANEL NAME
MSG01    DS    0C
         DC    CL11'TSOSUB01I'
         DC    C'Subsystem list is truncated'
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'TSOSUB02I'
         DC    C'There are subsystems!'
MSG02L   EQU   *-MSG02
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSUB   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL       DSECT
DTL_ATTR  DS    X               ATTRIBUTE CHARACTER
DTL_NAME  DS    CL4
          DS    C
DTL_FLAG1 DS   XL2
          DS    X
DTL_SSID  DS    XL2
          DS    X
DTL_SSVT  DS    XL8
          DS    X
DTL_SUSE  DS    XL8
          DS    X
DTL_SYN   DS    XL8
          DS    X
DTL_L     EQU   *-DTL          LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    NETIO DSECT=YES
SUBSYSTEM_NBR       DS    H
SUBSYSTEM_HEADER_L  EQU   *-NET_IO
SUBSYSTEM_DATA      DS    0C
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IEFJSCVT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOSUB
./ ADD NAME=TSOTCPIP 0109-09152-09173-0912-00352-00312-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOTCPIP - TCP/IP FUNCTIONS                           *
*                                                                     *
* ------------------------------------------------------------------- *
TSOTCPIP CSECT
TSOTCPIP AMODE 31
TSOTCPIP RMODE ANY
         STM   R14,R12,12(R13)                 SAVE REGISTERS
         LR    R11,R15                         SET BASE REGISTER
         USING TSOCOMM,R12                     DEFINE COMMON AREA BASE
         USING TSOTCPIP,R11                    DEFINE PROGRAM BASE
         USING USERBLOK,R10
         B     @0000000
MODID    DC    CL8'TSOTCPIP'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
@0000000 DS    0H
         L     R1,COMM_DXD_ADDRESS             DXD AREA BASE
         A     R1,DXDSTART                     PLUS DISPLACEMENT
         ST    R13,4(,R1)                      CHAIN CALLER'S SAVE AREA
         ST    R1,8(,R13)                      CHAIN OUR SAVE AREA
         LR    R13,R1                          COPY DXD AREA ADDRESS
         USING DXDTCPIP,R13                    DEFINE DXD AREA BASE
         CLC   DXD_ID,MODID                    DXD AREA INITIALIZED?
         BE    @0000010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                    DXD AREA INITIALIZED
         XC    DXD_LENGTH,DXD_LENGTH
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
@0000010 DS    0H
         L     R9,COMM_IO
         USING NET_IO,R9
         CLI   COMM_NET_COMMAND,$NET_INIT      INIT?
         BE    INIT0000                        YES
         CLI   COMM_NET_COMMAND,$NET_CLEANUP   CLEAN UP?
         BE    CLOSE000                        YES
         CLI   COMM_NET_COMMAND,$NET_RECEIVE   RECEIVE?
         BE    RECV0000                        YES
         CLI   COMM_NET_COMMAND,$NET_SEND      SEND?
         BE    SEND0000                        YES
         ABEND 1,DUMP,,USER
*---------------------------------------------------------------------*
*        Initialize the TCP/IP environment                            *
*---------------------------------------------------------------------*
INIT0000 DS    0H
         ITRACE ID=INITAPI
         MVC   DXD_TCPIP_FUNCTION,=CL16'INITAPI'
         EZASMI TYPE=INITAPI,                                          +
               MAXSNO=DXD_MAX_SOCKET,                                  +
               SUBTASK=MODID,                                          +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               ASYNC='NO',                                             +
               ERROR=ERR0010,                                          +
               TASK=DXD_TCPIP_TASK
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         ITRACE ID=SOCKET
         MVC   DXD_TCPIP_FUNCTION,=CL16'SOCKET'
         EZASMI TYPE=SOCKET,                                           +
               AF='INET',                                              +
               SOCTYPE='STREAM',                                       +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               TASK=DXD_TCPIP_TASK
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         MVC   DXD_SOCKET,DXD_TCPIP_RETURN_CODE+2
         ITRACE ID=SOCK_NBR,                                           +
               DATA1=DXD_SOCKET
*
*     Setting the port to zero allows TCP/IP to choose any
*     free port number
*
         XC    DXD_SOCKET_STRUCTURE,DXD_SOCKET_STRUCTURE
         MVC   DXD_SOCKET_FAMILY,C_AF_INET
         XC    DXD_SOCKET_PORT,DXD_SOCKET_PORT
         ITRACE ID=BIND
         MVC   DXD_TCPIP_FUNCTION,=CL16'BIND'
         EZASMI TYPE=BIND,                                             +
               S=DXD_SOCKET,                                           +
               NAME=DXD_SOCKET_STRUCTURE,                              +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER,                           +
               TASK=DXD_TCPIP_TASK
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         ITRACE ID=GETHOST
         MVC   DXD_TCPIP_FUNCTION,=CL16'GETHOSTBYNAME'
         EZASMI TYPE=GETHOSTBYNAME,                                    +
               NAMELEN=COMM_HOSTNAME_LENGTH,                           +
               NAME=COMM_SUTL_HOSTNAME,                                +
               HOSTENT=DXD_HOSTENT,                                    +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERROR=DXD_TCPIP_ERROR_NUMBER
         ITRACE ID=RC,                                                 +
               DATA1=DXD_TCPIP_RETURN_CODE,                            +
               DATA2=DXD_TCPIP_ERROR_NUMBER
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         L     R1,DXD_HOSTENT
         USING HOSTENT,R1
         L     R2,HOSTENT_IP_LIST
         L     R3,0(,R2)
         XC    DXD_PEER,DXD_PEER
         MVC   DXD_PEER_AF,C_AF_INET
         MVC   DXD_PEER_PORT,COMM_SUTL_PORT
         MVC   DXD_PEER_IP_ADDRESS,0(R3)
         ITRACE ID=CONNECT,                                            +
               DATA1=DXD_PEER+00,                                      +
               DATA2=DXD_PEER+08
         MVC   DXD_TCPIP_FUNCTION,=CL16'CONNECT'
         EZASMI TYPE=CONNECT,                                          +
               S=DXD_SOCKET,                                           +
               NAME=DXD_PEER,                                          +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
RECV0000 DS    0H
         ITRACE ID=READ1
         MVC   DXD_TCPIP_FUNCTION,=CL16'READ'
         L     R4,F32760
         LA    R3,NET_IO
         SR    R5,R5
RECV0010 DS    0H
         ITRACE ID=READ2,                                              +
               RDATA1=R3,                                              +
               RDATA2=R4
         ST    R4,DXD_LENGTH
         EZASMI TYPE=READ,                                             +
               S=DXD_SOCKET,                                           +
               NBYTE=DXD_LENGTH,                                       +
               BUF=(R3),                                               +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER
         ITRACE ID=READ_X,                                             +
               DATA1=DXD_TCPIP_RETURN_CODE,                            +
               DATA2=DXD_TCPIP_ERROR_NUMBER
         ICM   R0,15,DXD_TCPIP_RETURN_CODE
         BM    ERR0010
         AR    R3,R0
         SR    R4,R0
         AR    R5,R0
         CH    R5,=Y(NET_HEADER_L)            MINIMUM LENGTH?
         BL    RECV0010                       NO
         CLM   R5,3,NET_LENGTH                RECEIVED ALL SENT?
         BL    RECV0010                       NO
         B     EXIT0000                       EXIT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
SEND0000 DS    0H
         ITRACE ID=WRITE1
         MVC   DXD_TCPIP_FUNCTION,=CL16'WRITE'
         LA    R3,NET_IO
         SR    R4,R4
         ICM   R4,3,NET_LENGTH
         SR    R5,R5
SEND0010 DS    0H
         ITRACE ID=WRITE2,                                             +
               RDATA1=R3,                                              +
               RDATA2=R4
         ST    R4,DXD_LENGTH
         EZASMI TYPE=WRITE,                                            +
               S=DXD_SOCKET,                                           +
               NBYTE=DXD_LENGTH,                                       +
               BUF=(R3),                                               +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER
         ITRACE ID=WRITE_X,                                            +
               DATA1=DXD_TCPIP_RETURN_CODE,                            +
               DATA2=DXD_TCPIP_ERROR_NUMBER
         ICM   R0,15,DXD_TCPIP_RETURN_CODE
         AR    R3,R0
         SR    R4,R0
         AR    R5,R0
         CLM   R5,3,NET_LENGTH                ALL DATA SENT?
         BL    SEND0010                       NO
         BO    ERR0010
         B     EXIT0000                       EXIT
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
CLOSE000 DS    0H
         ITRACE ID=SHUTDOWN
         EZASMI TYPE=SHUTDOWN,                                         +
               S=DXD_SOCKET,                                           +
               HOW=2,                                                  +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER
         ITRACE ID=CLOSE
         MVC   DXD_TCPIP_FUNCTION,=CL16'CLOSE'
         EZASMI TYPE=CLOSE,                                            +
               S=DXD_SOCKET,                                           +
               RETCODE=DXD_TCPIP_RETURN_CODE,                          +
               ERRNO=DXD_TCPIP_ERROR_NUMBER
         ITRACE ID=TERMAPI
         MVC   DXD_TCPIP_FUNCTION,=CL16'TERMAPI'
         EZASMI TYPE=TERMAPI,                                          +
               TASK=DXD_TCPIP_TASK
         TM    DXD_TCPIP_RETURN_CODE,X'80'
         BO    ERR0010
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=TCP_ERR,                                            +
               DATA1=DXD_TCPIP_FUNCTION,                               +
               DATA2=DXD_TCPIP_ERROR_NUMBER
         OI    COMM_FLAG,$ABORT
         GETMAIN RU,                                                   +
               LV=MSG02L,                     <-- LONGEST MESSAGE      +
               LOC=BELOW
         LR    R3,R1                          COPY STORAGE ADDRESS

         MVC   0(MSG01L,R3),MSG01
         TPUT  (R3),MSG01L

         MVC   0(MSG02L,R3),MSG02
         MVC   MSG02_FNC-MSG02(L'MSG02_FNC,R3),DXD_TCPIP_FUNCTION
         TPUT  (R3),MSG02L

         MVC   0(MSG03L,R3),MSG03
         UNPK  MSG03_RC-MSG03(9,R3),DXD_TCPIP_RETURN_CODE(5)
         TR    MSG03_RC-MSG03(8,R3),HEXCHAR
         MVI   MSG03_RC-MSG03+8(R3),C' '
         TPUT  (R3),MSG03L

         MVC   0(MSG04L,R3),MSG04
         UNPK  MSG04_ERR-MSG04(9,R3),DXD_TCPIP_ERROR_NUMBER(5)
         TR    MSG04_ERR-MSG04(8,R3),HEXCHAR
         MVI   MSG04_ERR-MSG04+8(R3),C' '
         TPUT  (R3),MSG04L

         FREEMAIN RU,                                                  +
               A=(R3),                                                 +
               LV=MSG02L
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         LH    R15,DXD_RC                     SET RETURN CODE
         L     R13,4(,R13)                    RESTORE SAVE AREA ADDRESS
         L     R14,12(,R13)                   RESTORE R14
         LM    R0,R12,20(R13)                 RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART  DC    Q(DXDTCPIP)                   DISPLACEMENT TO DXD AREA
F32760    DC    F'32760'
C_AF_INET DC    X'0002'

HEXCHAR   EQU   *-C'0'
          DC    C'0123456789ABCDEF'

MSG01     DC    CL11'TSOTCPIP01E '
          DC    C'TCP/IP error'
MSG01L    EQU   *-MSG01

MSG02     DC    Cl11'TSOTCPIP02I '
          DC    C'Function:     '
MSG02_FNC DC    CL16' '
MSG02L    EQU   *-MSG02

MSG03     DC    CL11'TSOTCPIP03I '
          DC    C'Return code:  '
MSG03_RC  DC    CL8' '
          DC    C' '
MSG03L    EQU   *-MSG03

MSG04     DC    CL11'TSOTCPIP04I '
          DC    C'Error number: '
MSG04_ERR DC    CL8' '
          DC    C' '
MSG04L    EQU   *-MSG04
          LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDTCPIP                 DSECT
                         SUTLSAVE DSECT=NO
DXD_HOSTENT              DS    A
DXD_TCPIP_RETURN_CODE    DS    F
DXD_TCPIP_ERROR_NUMBER   DS    F
DXD_LENGTH               DS    F

DXD_MAX_SOCKET           DS    H
DXD_SOCKET               DS    H
DXD_RC                   DS    H

DXD_PEER                 DS    0F,0XL16
DXD_PEER_AF              DS    XL2
DXD_PEER_PORT            DS    XL2
DXD_PEER_IP_ADDRESS      DS    F
DXD_PEER_RESERVED        DS    XL8

                         DS    0F
DXD_SOCKET_STRUCTURE     DS    0XL16
DXD_SOCKET_FAMILY        DS    AL2           FAMILY (ALWAYS = 2)
DXD_SOCKET_PORT          DS    XL2           PORT NUMBER
DXD_SOCKET_CLIENT_IP     DS    XL4           CLIENT'S IP ADDRESS
                         DS    XL8           RESERVED

DXD_TCPIP_FUNCTION       DS    CL16
DXD_TCPIP_TASK           EZASMI TYPE=TASK,STORAGE=CSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
HOSTENT                  DSECT
HOSTENT_HOSTNAME_ADDRESS DS  A
HOSTENT_ALIAS_LIST       DS  A
HOSTENT_FAMILY           DS  XL4
HOSTENT_IP_LIST_LENGTH   DS  XL4
HOSTENT_IP_LIST          DS  A
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         EZASMI   TYPE=GLOBAL,STORAGE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY REGEQU
         END  TSOTCPIP
./ ADD NAME=TSOUSE   0108-09141-09173-0913-00273-00257-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOUSE - Display active SUTL users                    *
*                                                                     *
*  Sub-commands:                                                      *
*   None.                                                             *
*                                                                     *
*                                                                     *
*  Displayed data is:                                                 *
*   USERID       User's TSO id.                                       *
*   LU           User's VTAM logical unit (LU) name.                  *
*   CID          VTAM conversation id.                                *
*   FUNC         Last SUTL function the user has used.                *
*   VTAM         Last VTAM function the STC has performed with the    *
*                TSO user (either RECEIVE or SEND).                   *
*   SENDS        Number of sends/number of bytes sent to the TSO user.*
*   RECV's       Number of receives/number of bytes received from     *
*                the TSO user.                                        *
*                                                                     *
* ------------------------------------------------------------------- *
TSOUSE   CSECT
TSOUSE   AMODE 31
TSOUSE   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOUSE,R11                     DEFINE BASE
         B     USE0000
MODID    DC    CL8'TSOUSE'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
USE0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDUSE,R13                     DEFINE WORK AREA BASE
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    USE0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
USE0010  DS    0H
         ITRACE ID=REQDATA                    REQUEST DATA FROM STC
         MVI   COMM_NET_COMMAND,$NET_SEND     SET COMMAND (SEND)
         L     R10,COMM_IO                    I/O AREA ADDRESS
         USING NET_IO,R10                     DEFINE BASE
         MVI   NET_FUNCTION,$NET_USERS        SET FUNCTION
         LA    R1,NET_HEADER_L                LENGTH
         STCM  R1,3,NET_LENGTH                SET LENGTH
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        SEND REQUEST TO STC
         MVI   COMM_NET_COMMAND,$NET_RECEIVE  SET COMMAND
         L     R15,ANET                       VTAM MODULE ENTRY POINT
         BALR  R14,R15                        RECEIVE RESPONSE FROM STC
* ------------------------------------------------------------------- *
*              BUILD TEXT AREA                                        *
* ------------------------------------------------------------------- *
         SR    R7,R7                          CLEAR REGISTER
         ICM   R7,3,USER_NBR                  ANY USERS RETURNED?
         BZ    USE0120                        NO
         ST    R7,COMM_TEXT_LINES             NUMBER OF TEXT LINES
USE0020  DS    0H
         SR    R0,R0                          CLEAR REGISTER
         LR    R1,R7                          COPY NUMBER OF NAMES
         M     R0,LINELEN                     LENGTH OF TEXT
         ST    R1,COMM_TEXT_LENGTH            SAVE size OF TEXT
         GETMAIN RU,                          ACQUIRE  TEXT AREA       +
               LV=(1),                        .. TEXT AREA SIZE        +
               LOC=ANY                        .. FROM ANY AREA
         ST    R1,COMM_TEXT                   TEXT AREA ADDRESS
         LR    R8,R1                          COPY TEXT AREA ADDRESS
         USING DTL,R8                         DEFINE BASE
         LA    R9,USER_DATA                   FIRST USER
NET      USING USERBLOK,R9
         CLC   NET_RC,X0004                   LIST TRUNCATED?
         BNE   USE0030                        NO
         MVC   COMM_MSG(MSG01L),MSG01         SET MESSAGE
USE0030  DS    0H
         MVC   DTL(DTL_L),COMM_BLANKS         INITIALIZE AREA
         MVI   DTL_ATTR,$ATTR_NORMAL          SET ATTRIBUTE
         MVC   DTL_ID,NET.USER_ID             USER ID
         TM    NET.USER_STATUS,$USER_VTAM     USING VTAM?
         BO    USE0040                        YES
         MVC   DTL_IP_ADDRESS,NET.USER_IP_ADDRESS
         B     USE0050
USE0040  DS    0H
         MVC   DTL_LU,NET.USER_LU             USER'S VTAM LU NAME
         UNPK  DTL_CID(9),NET.USER_CID(5)     CONVERSATION ID
         TR    DTL_CID,HEXCHAR                TRANSLATE TO PRINTABLE
         MVI   DTL_CID+8,C' '                 RESTORE BLANK
USE0050  DS    0H
         LA    R1,FUNCTION_TABLE              FUNCTION TABLE ADDRESS
         USING FUNCTION_DSECT,R1              DEFINE BASE
USE0060  DS    0H
         CLI   FUNCTION,X'FF'                 END OF TABLE?
         BE    USE0070                        YES
         CLC   FUNCTION,NET.USER_IO           LOCATED THE FUNCTION?
         BE    USE0070                        YES
         LA    R1,FUNCTION_DSECT_L(,R1)       NEXT FUNCTION
         B     USE0060                        LOOP
USE0070  DS    0H
         MVC   DTL_FUNCTION,FUNCTION_NAME     SET FUNCTION NAME
         CLI   NET.USER_NET_COMMAND,$USER_RECEIVE
         BE    USE0080
         CLI   NET.USER_NET_COMMAND,$USER_SEND
         BE    USE0090
         B     USE0100                        NO FUNCTION PENDING
USE0080  DS    0H
         MVC   DTL_NET_FUNCTION,RECEIVE       FUNCTION IS 'RECEIVE'
         B     USE0100
USE0090  DS    0H
         MVC   DTL_NET_FUNCTION,SEND          FUNCTION IS 'SEND'
USE0100  DS    0H
         L     R0,NET.USER_SENDS
         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL
         MVC   DTL_SENDS,EDWD1                SET EDIT WORD
         ED    DTL_SENDS,DXD_DWORD+3          EDIT NUMBER OF SENDS
         L     R0,NET.USER_BYTES_SENT         NBR OF BYTES SENT
         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL
         MVC   DTL_BYTES_SENT,EDWD1           SET EDIT WORD
         ED    DTL_BYTES_SENT,DXD_DWORD+3     EDIT LENGTH SENT
         L     R0,NET.USER_RECEIVES           NBR OF RECEIVES
         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL
         MVC   DTL_RECEIVES,EDWD1             SET EDIT WORD
         ED    DTL_RECEIVES,DXD_DWORD+3       EDIT NUMBER OF RECEIVES
         L     R0,NET.USER_BYTES_RECEIVED     NBR OF BYTES RECEIVED
         CVD   R0,DXD_DWORD                   CONVERT TO DECIMAL
         MVC   DTL_BYTES_RECEIVED,EDWD1       SET EDIT WORD
         ED    DTL_BYTES_RECEIVED,DXD_DWORD+3 EDIT LENGTH RECEIVED
         LA    R8,DTL_L(,R8)                  NEXT DETAIL AREA
         LA    R9,USER_L(,R9)                 NEXT USER
         BCT   R7,USE0030                     LOOP
         MVC   COMM_PANEL,PANEL_NAME          SET PANEL NAME
         MVC   COMM_TEXT_LINE_LENGTH,LINELEN
         XC    COMM_TEXT_OFFSET,COMM_TEXT_OFFSET
         XC    COMM_TEXT_LINE_NBR,COMM_TEXT_LINE_NBR
         ITRACE ID=CALLDISP                   CALLING DISP
         NI    COMM_DISPLAY_FLAGS,$NO_CURSOR  SCROLLING, NO CURSOR DATA
         L     R15,ADISP                      DISPLAY ENTRY POINT
         BALR  R14,R15                        LINK TO DISPLAY
         ITRACE ID=DISPRC,                    RETURNED FROM DISP       +
               RDATA1=R15                     .. RETURN CODE FROM DISP
         CLC   ZCMD,COMM_BLANKS               COMMAND ALL BLANK?
         BNE   USE0110                        NO
         LTR   R15,R15                        RETURN CODE ZERO?
         BZ    USE0010                        YES.. REDISPLAY
USE0110  DS    0H
         ITRACE ID=FREETEXT                   FREEING TEXT
         L     R1,COMM_TEXT                   TEXT ADDRESS
         L     R0,COMM_TEXT_LENGTH            TEXT LENGTH
         FREEMAIN RU,                         FREE TEXT                +
               A=(1),                                                  +
               LV=(0)
         XC    COMM_TEXT,COMM_TEXT
         XC    COMM_TEXT_LENGTH,COMM_TEXT_LENGTH
         XC    COMM_TEXT_LINES,COMM_TEXT_LINES
         B     EXIT0000                       AND EXIT
* ------------------------------------------------------------------- *
*              NO USERS (SHOULD NEVER HAPPEN)                         *
* ------------------------------------------------------------------- *
USE0120  DS    0H
         ITRACE ID=NOUSERS                    NO USERS
         MVC   COMM_MSG(MSG02L),MSG02         SET MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDUSE)                      DISPLACEMENT TO WORK AREA
LINELEN  DC    A(DTL_L)                       LENGTH OF DETAIL LINE
EDWD1    DC    X'40202020202020202021'
X0004    DC    X'0004'

HEXCHAR  EQU   *-C'0'
         DC    C'0123456789ABCDEF'

RECEIVE    DC    CL8'RECEIVE'
SEND       DC    CL8'SEND'
PANEL_NAME DC    CL8'SUTLUSE'          PANEL NAME

MSG01      DS    0C
           DC    CL11'TSOUSE01I'
           DC    C'User list truncated'
MSG01L     EQU   *-MSG01
MSG02      DS    0C
           DC    CL11'TSOUSE02I'
           DC    C'There are no users!'
MSG02L     EQU   *-MSG02

FUNCTION_TABLE DS    0C
               DC    AL1($NET_ID),CL4'SID'
               DC    AL1($NET_ACT),CL4'ACT'
               DC    AL1($NET_APF),CL4'APF'
               DC    AL1($NET_FS),CL4'FS'
               DC    AL1($NET_IPL),CL4'IPL'
               DC    AL1($NET_LLA),CL4'LLA'
               DC    AL1($NET_PS),CL4'PS'
               DC    AL1($NET_SUB),CL4'SUB'
               DC    AL1($NET_USERS),CL4'USE'
               DC    X'FF',CL4'UNKN'

               LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDUSE           DSECT
                 SUTLSAVE DSECT=NO
DXD_DWORD        DS    D
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                 USERBLOK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FUNCTION_DSECT   DSECT
FUNCTION         DS    X
FUNCTION_NAME    DS    CL4
FUNCTION_DSECT_L EQU   *-FUNCTION_DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DTL                DSECT
DTL_ATTR           DS    X               ATTRIBUTE CHARACTER
DTL_ID             DS    CL8             USER ID
DTL_LU             DS    CL8             VTAM LU
                   DS    C
DTL_CID            DS    CL8
                   ORG   DTL_LU
DTL_IP_ADDRESS     DS    CL15
                   ORG
                   DS    X
DTL_FUNCTION       DS    CL4
                   DS    X
DTL_NET_FUNCTION   DS    CL8
DTL_SENDS          DS    CL10
DTL_BYTES_SENT     DS    CL10
DTL_RECEIVES       DS    CL10
DTL_BYTES_RECEIVED DS    CL10
DTL_L              EQU   *-DTL           LENGTH OF DETAIL LINE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
          TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
          NETIO   DSECT=YES
USER_NBR  DS      H
USER_DATA DS      0C
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA   DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT      DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         COPY     ATTR
         END      TSOUSE
./ ADD NAME=TSOVARS  0102-09142-09170-1318-00212-00212-00000-SOURCE
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOVARS                                               *
*                                                                     *
*  Define or delete SPF variables.                                    *
*                                                                     *
* ------------------------------------------------------------------- *
TSOVARS  CSECT
TSOVARS  AMODE 31
TSOVARS  RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOVARS,R11                    DEFINE PROGRAM BASE
         B     VARS0000
MODID    DC    CL8'TSOVARS'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
VARS0000 DS    0H
         LR    R9,R1                          SAVE PARM LIST ADDRESS
         USING VAR_REQ,R9                     DEFINE BASE
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR AREA
         LR    R13,R2                         SET WORK AREA BASE
         USING DXDVARS,R13                    DEFINE WORK AREA BASE
         MVC   DXD_ID,MODID                   IDENTIFY AREA
         ITRACE ID=ENTRY,                     TRACE ENTRY              +
               DATA1=VAR_COMMAND              .. SAVE THE COMMAND
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
VAR0010  DS    0H
         CLI   VAR_COMMAND,$VAR_DEFINE_ALL      DEFINE ALL?
         BE    VAR0100                          YES
         CLI   VAR_COMMAND,$VAR_DEFINE_SPECIFIC DEFINE SPECIFIC?
         BE    VAR0100                          YES
         CLI   VAR_COMMAND,$VAR_DELETE_SPECIFIC DELETE VARIABLE?
         BE    VAR0200                          YES
         CLI   VAR_COMMAND,$VAR_DELETE_ALL      DELETE ALL?
         BE    VAR0300                          YES
         ITRACE ID=BADCMD
         ABEND $U1009,DUMP,,USER              BAD COMMAND
* ------------------------------------------------------------------- *
*        PROCESS DEFINE COMMANDS                                      *
* ------------------------------------------------------------------- *
VAR0100  DS    0H
         LA    R1,VDEFINE                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         L     R8,VAR_IDS                     LIST OF ID'S
         LH    R7,VAR_NBR                     NUMBER OF ID'S
         ITRACE ID=DEFINE,                    DEFINE VARIABLES         +
               RDATA1=R8,                     .. FIRST VARIABLE ID     +
               RDATA2=R7                      .. NUMBER OF VARIABLES
         CLI   VAR_COMMAND,$VAR_DEFINE_SPECIFIC
         BE    VAR0110                        YES
         L     R6,VAR_TABLE                   FIRST VARIABLE
         B     VAR0120                        ENTER LOOP
VAR0110  DS    0H
         BAL   R15,LOC0000                    LOCATE VARIABLE
VAR0120  DS    0H
         USING VARDSECT,R6                    DEFINE BASE
         LA    R1,VARNAME                     VARIABLE'S NAME
         ST    R1,DXD_SPF2                    SET ADDRESS IN PARM LIST
         SR    R1,R1                          CLEAR REGISTER
         ICM   R1,3,VARDISP                   DISPLACEMENT
         A     R1,VAR_AREA                    PLUS BASE ADDRESS
         ST    R1,DXD_SPF3                    SET ADDRESS IN PARM LIST
         LA    R1,VARFORM                     DATA FORMAT
         ST    R1,DXD_SPF4                    SET ADDRESS IN PARM LIST
         LA    R1,VARLEN                      VARIABLE LENGTH
         ST    R1,DXD_SPF5                    SET ADDRESS IN PARM LIST
         OI    DXD_SPF5,X'80'                 SET END-OF-LIST
         ITRACE ID=VDEF,                      DEFINING A VARIABLE      +
               DATA1=VARNAME,                 .. VARIABLE'S NAME       +
               DATA2=DXD_SPF3                 .. ADDRESS OF DATA
         LA    R1,DXD_SPF_PARMS               SPF PARM LIST ADDRESS
         L     R15,AISPLINK                   SPF LINK ADDRESS
         BALR  R14,R15                        LINK TO SPF
         LTR   R15,R15                        VDEFINE SUCCESSFUL?
         BNZ   ERR0020                        NO
VAR0130  DS    0H
         CLI   VAR_COMMAND,$VAR_DEFINE_ALL    DEFINE ALL VARIABLES?
         BE    VAR0140                        YES
         LA    R8,2(,R8)                      NEXT VARIABLE ID
         BCT   R7,VAR0110                     LOOP
VAR0140  DS    0H
         LA    R6,VARL(,R6)                   NEXT VARIABLE
         CLI   0(R6),X'FF'                    END OF TABLE?
         BNE   VAR0120                        NO
         B     EXIT0000                       ALL PROCESSED
* ------------------------------------------------------------------- *
*        PROCESS DELETE COMMANDS                                      *
* ------------------------------------------------------------------- *
VAR0200  DS    0H
         LA    R1,VDELETE                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         L     R8,VAR_IDS                     LIST OF ID'S
         LH    R7,VAR_NBR                     NUMBER OF ID'S
         ITRACE ID=DELETE,                    DEFINE VARIABLES         +
               RDATA1=R8,                     .. FIRST VARIABLE ID     +
               RDATA2=R7                      .. NUMBER OF VARIABLES
VAR0210  DS    0H
         BAL   R15,LOC0000                    LOCATE VARIABLE
         ST    R6,DXD_SPF2                    SET VARIABLE NAME ADDRESS
         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST
         ITRACE ID=DELETE,                    DELETING A VARIABLE      +
               DATA1=VARNAME                  .. VARIABLE NAME
         LA    R1,DXD_SPF_PARMS               PARM LIST'S ADDRESS
         L     R15,AISPLINK                   SPF ENTRY POINT
         BALR  R14,R15                        LINK TO SPF
         LTR   R15,R15                        VDELETE SUCCESSFUL?
         BNZ   ERR0030                        NO
         LA    R8,2(,R8)                      NEXT VARIABLE ID
         BCT   R7,VAR0210                     PROCESS NEXT VARIABLE
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*        PROCESS END-OF-JOB CLEAN UP                                  *
* ------------------------------------------------------------------- *
VAR0300  DS    0H
         ITRACE ID=EOJ                        DELETING ALL VARIABLES
         LA    R1,VDELETE                     COMMAND'S ADDRESS
         ST    R1,DXD_SPF1                    SET ADDRESS IN PARM LIST
         L     R6,VAR_TABLE                   START WITH FIRST VARIABLE
VAR0310  DS    0H
         CLI   0(R6),X'FF'                    END OF TABLE?
         BE    EXIT0000                       YES
         ST    R6,DXD_SPF2                    SET VARIABLE NAME ADDRESS
         OI    DXD_SPF2,X'80'                 FLAG END-OF-LIST
         ITRACE ID=EOJDEL,                    DELETING A VARIABLE      +
               DATA1=VARNAME                  .. VARIABLE NAME
         LA    R1,DXD_SPF_PARMS               PARM LIST'S ADDRESS
         L     R15,AISPLINK                   SPF ENTRY POINT
         BALR  R14,R15                        LINK TO SPF
         LTR   R15,R15                        VDELETE SUCCESSFUL?
         BNZ   ERR0030                        NO
         LA    R6,VARL(,R6)                   NEXT VARIABLE
         B     VAR0310                        PROCESS ALL VARIABLES
* ------------------------------------------------------------------- *
*        LOCATE VARIABLES IN VARIABLE TABLE                           *
* ------------------------------------------------------------------- *
LOC0000  DS    0H
         L     R6,VAR_TABLE                   FIRST VARIABLE
LOC0010  DS    0H
         CLI   0(R6),X'FF'                    END OF TABLE?
         BE    ERR0010                        YES.. INVALID VARIABLE ID
         CLC   VARID,0(R8)                    VARIABLE LOCATED?
         BE    LOC0020                        YES
         LA    R6,VARL(,R6)                   NEXT VARIABLE
         B     LOC0010                        LOOP
LOC0020  DS    0H
         BR    R15                            RETURN
* ------------------------------------------------------------------- *
*        ERROR ROUTINES                                               *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=NOTFOUND
         ABEND $U1010,DUMP,,USER
ERR0020  DS    0H
         ITRACE ID=VDEFFAIL,                                           +
               RDATA1=R15
         ABEND $U1011,DUMP,,USER
ERR0030  DS    0H
         ITRACE ID=VDELFAIL,                                           +
               RDATA1=R15
         ABEND $U1012,DUMP,,USER
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDVARS)
VDEFINE  DC    CL8'VDEFINE'
VDELETE  DC    CL8'VDELETE'
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDVARS        DSECT
               SUTLSAVE DSECT=NO
DXD_SPF_PARMS  DS    0A                  ISPF PARM LIST
DXD_SPF1       DS    A                   PARM 1 ADDRESS
DXD_SPF2       DS    A                   PARM 2 ADDRESS
DXD_SPF3       DS    A                   PARM 3 ADDRESS
DXD_SPF4       DS    A                   PARM 4 ADDRESS
DXD_SPF5       DS    A                   PARM 5 ADDRESS
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM   TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY      VARDSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         VARREQ    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA    DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY      REGEQU
         ABCODES
         END       TSOVARS
./ ADD NAME=TSOVTAM  0115-09141-09169-1427-00394-00143-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: TSOVTAM                                               *
*                                                                     *
*  Perform VTAM functions.                                            *
*                                                                     *
*  At entry:                                                          *
*             R15  Entry point address                                *
*             R14  Return address                                     *
*             R13  Register save area address                         *
*             R12  Common area address                                *
*             R11  Calling module's base address                      *
*                                                                     *
* ------------------------------------------------------------------- *
TSOVTAM  CSECT
TSOVTAM  AMODE 31
TSOVTAM  RMODE ANY
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOVTAM,R11                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     VTAM0000
MODID    DC    CL8'TSOVTAM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
VTAM0000 DS    0H
         L     R1,COMM_DXD_ADDRESS            DYNAMIC WORK AREA BASE
         A     R1,DXDSTART                    DISPLACEMENT TO OUR PART
         ST    R13,4(,R1)                     CHAIN WORK AREA
         ST    R1,8(,R13)                     CHAIN WORK AREA
         LR    R13,R1                         COPY WORK AREA ADDRESS
         USING DXDVTAM,R13                    DEFINE BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    VTAM0010                       YES
         ITRACE ID=INIT
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
         MVC   DXD_OPEN(OPEN_L),OPEN_I
         MVC   DXD_CLOSE(CLOSE_L),CLOSE_I
VTAM0010 DS    0H
         ITRACE ID=ENTER
         L     R7,COMM_IO
         USING NET_IO,R7                      DEFINE I/O AREA BASE
*---------------------------------------------------------------------*
*                                                                     *
*        Process the requested function                               *
*                                                                     *
*---------------------------------------------------------------------*
         CLI   COMM_NET_COMMAND,$NET_INIT     INITIALIZE?
         BE    INIT0000                       YES
         L     R10,COMM_ACB                   ACB'S ADDRESS
         USING IFGACB,R10
         L     R9,COMM_RPL                    RPL'S ADDRESS
         USING IFGRPL,R9
         L     R8,COMM_RPLX                   RPL EXTENSION ADDRESS
         USING ISTRPL6X,R8                    DEFINE BASE
         CLI   COMM_NET_COMMAND,$NET_RECEIVE  ISSUE A RECEIVE?
         BE    RECV0000                       YES
         CLI   COMM_NET_COMMAND,$NET_SEND     ISSUE A SEND?
         BE    SEND0000                       YES
         CLI   COMM_NET_COMMAND,$NET_CLEANUP  CLEANUP?
         BE    CLEAN000                       YES
         DC    H'0'                           INVALID COMAND
*---------------------------------------------------------------------*
*                                                                     *
*        PERFORM INITIALIZATION                                       *
*                                                                     *
*---------------------------------------------------------------------*
INIT0000 DS    0H
         ITRACE ID=INIT
         GETMAIN RU,                          ACQUIRE STORAGE FOR ACB  +
               LV=ACB_L,                      .. SIZE                  +
               LOC=ANY                        ..
         ST    R1,COMM_ACB                    SAVE ACB'S ADDRESS
         LR    R10,R1                         COPY ACB ADDRESS
         MVC   0(ACB_L,R10),ACB_I             INITIALIZE ACB
         ST    R12,ACBUSER                    SET TSOCOMM ADDRESS
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=EXLSTL,                     .. SIZE                  +
               LOC=ANY                        ..
         MVC   0(EXLSTL,R1),EXLSTI            INITIALIZE EXIT LIST
         ST    R1,COMM_EXLST                  SAVE EXIT LIST'S ADDRESS
         LA    R0,COMM_APPL_LENGTH            APPLID'S LENGTH ADDRESS
         ST    R0,ACBAPID                     SET APPLID ADDRESS IN ACB
         ST    R1,ACBEXLST                    SET EXLST'S ADDRESS
         USING IFGEXLST,R1                    DEFINE BASE
         XC    EXLATTNP,EXLATTNP              NO ATTN EXIT
         MVC   EXLLERP,ALRAD                  SET LERAD EXIT ADDRESS
         GETMAIN RU,                          ACQUIRE STORAGE FOR RPL  +
               LV=RPL_L,                      .. SIZE                  +
               LOC=ANY                        ..
         LR    R9,R1                          COPY RPL'S ADDRESS
         ST    R9,COMM_RPL                    SAVE RPL'S ADDRESS
         MVC   0(RPL_L,R1),RPL_I              INITIALIZE RPL
         MVC   RPLDACB,COMM_ACB               SET ACB'S ADDRESS
         GETMAIN RU,                          ACQUIRE STORAGE          +
               LV=RPLEXT_L,                   .. SIZE                  +
               LOC=ANY                        ..
         ST    R1,COMM_RPLX                   SAVE RPL'S ADDRESS
         LR    R8,R1                          COPY ADDRESS
         MVC   0(RPLEXT_L,R8),RPLEXT_I        INITIALIZE RPL EXTENSION
         ST    R8,RPLAAREA                    SET ADDRESS
* ------------------------------------------------------------------- *
*        Determine an available ACB name and OPEN the ACB             *
* ------------------------------------------------------------------- *
         ITRACE ID=OPENACB                    OPENING ACB
         LOAD  EP=TSOACB                      LOAD ACB NAMES MODULE
         LR    R3,R0                          COPY ACB NAMES ADDRESS
INIT0010 DS    0H
         ITRACE ID=ACBNAME,                   TRACE EACH OPEN ATTEMPT  +
               DATA1=0(R3)                    .. TRACE THE NAME
         MVC   COMM_APPL_NAME,0(R3)           COPY ACB NAME
         OPEN  ((R10)),                       OPEN ACB                 +
               MODE=31,                                                +
               MF=(E,DXD_OPEN)
         ITRACE ID=OPENRC,                    RETURN CODE FROM OPEN    +
               RDATA1=R15                     .. TRACE RETURN CODE
         LTR   R15,R15                        OPEN SUCCESSFUL?
         BZ    INIT0020                       YES
         LA    R3,8(,R3)                      NEXT ACB NAME
         CLI   0(R3),X'FF'                    END OF TABLE?
         BNE   INIT0010                       NO
         DELETE EP=TSOACB                     DELETE ACB NAMES MODULE
         ITRACE ID=NOAPPL
         LA    R2,MSG01L                      MESSAGE LENGTH
         GETMAIN RU,                          ACQUIRE STORAGE FOR TPUT +
               LV=(R2),                       .. SIZE OF AREA          +
               LOC=BELOW                      .. FROM BELOW THE LINE
         LR    R3,R1                          COPY STORAGE ADDRESS
         MVC   0(MSG01L,R3),MSG01             COPY MESSAGE
         TPUT  (R3),(R2)                      ISSUE TPUT
         FREEMAIN RU,                         FREE MESSAGE STORAGE     +
               A=(R3),                                                 +
               LV=MSG01L
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         B     EXIT0000                       EXIT
INIT0020 DS    0H
         OI    COMM_FLAG,$ACB_OPEN            ACB IS OPEN
         DELETE EP=TSOACB                     DELETE ACB NAMES MODULE
* ------------------------------------------------------------------- *
*        Enable our ATTN exit                                         *
* ------------------------------------------------------------------- *
         ITRACE ID=SETLOGON                   OPENING ACB
         SETLOGON ACB=(R10),                  ISSUE SETLOGON           +
               RPL=(R9),                      .. RPL FOR REQUEST       +
               OPTCD=START                    .. ENABLE EXIT
         LTR   R15,R15                        SET LOGON SUCCESSFUL?
         BZ    INIT0030                       YES
         ITRACE ID=LOGONF,                    SET LOGON FAILED         +
               RDATA1=R15                     .. TRACE RETURN CODE
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         B     EXIT0000                       EXIT
* ------------------------------------------------------------------- *
*        Determine if SUTLSTC is active and allocate a session        *
* ------------------------------------------------------------------- *
INIT0030 DS    0H
         ITRACE ID=INQUIRE
         MVC   0(NIB_L,R7),NIB_I              INITIALIZE NIB
         USING ISTDNIB,R7                     DEFINE BASE
         MVC   NIBSYM,COMM_SUTL_APPL          SET SUTL STC'S APPL NAME
         INQUIRE RPL=(R9),                    ISSUE INQUIRE            +
               NIB=(R7),                      .. NIB'S ADDRESS         +
               OPTCD=APPSTAT                  ..  PARTNER'S STATUS
         CLI   RPLFDB3,0                      PARTNER READY?
         BE    INIT0040                       YES
         ITRACE ID=NOTREADY                   STC IS NOT READY
         LA    R2,MSG02L                      MESSAGE LENGTH
         GETMAIN RU,                          ACQUIRE STORAGE FOR TPUT +
               LV=(R2),                       .. SIZE OF AREA          +
               LOC=BELOW                      .. FROM BELOW THE LINE
         LR    R3,R1                          COPY STORAGE ADDRESS
         MVC   0(MSG02L,R3),MSG02             COPY MESSAGE
         TPUT  (R3),(R2)                      ISSUE TPUT
         FREEMAIN RU,                         FREE MESSAGE STORAGE     +
               A=(R3),                                                 +
               LV=MSG02L
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         B     EXIT0000                       EXIT
         DROP  R7
         USING NET_IO,R7
INIT0040 DS    0H
         ITRACE ID=CNOS
         MVC   RPL6LU,COMM_SUTL_APPL          SET STC'S LU NAME
         APPCCMD CONTROL=OPRCNTL,             ISSUE APPC COMMAND       +
               QUALIFY=CNOS,                  .. CNOS                  +
               RPL=(R9),                      .. RPL'S ADDRESS         +
               LOGMODE=LU62P                  .. LOGMODE
         CLC   RPL6RC,X000001                 CNOS ACCEPTED?
         BE    INIT0050                       YES
         ITRACE ID=CNOSFAIL,                  CNOS FAILED              +
               DATA1=RPL6RC                   .. TRACE RETURN CODES
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         B     EXIT0000                       AND EXIT
INIT0050 DS    0H
         ITRACE ID=ALLOC                      ALLOCATE A SESSION
         MVC   0(FMH5L,R7),FMH5               COPY FMH5 TO I/O AREA
         APPCCMD CONTROL=ALLOC,               ISSUE APPC COMMAND       +
               QUALIFY=ALLOCD,                .. ALLOCATE A SESSION    +
               RPL=(R9),                      .. RPL'S ADDRESS         +
               AREA=(R7),                     .. FMH'S ADDRESS         +
               RECLEN=FMH5L,                  .. FMH'S LENGTH          +
               LOGMODE=LU62P                  .. LOGMODE
         OC    RPL6RC,RPL6RC                  ALL ZEROS?
         BZ    INIT0060                       YES
         ITRACE ID=ALOCFAIL,                  ALLOCATE FAILED          +
               DATA1=RPL6RC                   .. TRACE RETURN CODES
         OI    COMM_FLAG,$ABORT               SET ABORT FLAG
         B     EXIT0000                       AND EXIT
INIT0060 DS    0H
         ITRACE ID=CONVID,                                             +
               DATA1=RPL6CNVD                 CONVERSATION ID
         MVC   COMM_CID,RPL6CNVD              SAVE CONVERSATION ID
         OI    COMM_FLAG,$SESS_ALLOCATED      SESSION IS ALLOCATED
         B     EXIT0000
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a RECEIVE                                              *
*                                                                     *
*---------------------------------------------------------------------*
RECV0000 DS    0H
         ITRACE ID=RECEIVE                    ISSUE A RECEIVE
         L     R4,=A(32760)                   MAXIMUM I/O AREA SIZE
         APPCCMD CONTROL=RECEIVE,             ISSUE A RECEIVE          +
               QUALIFY=SPEC,                  .. SPECIFIC CONVERSATION +
               RPL=(R9),                      .. RPL'S ADDRESS         +
               FILL=LL,                       .. ONLY 1 LOGICAL RECORD +
               AREA=(R7),                     .. I/O AREA ADDRESS      +
               AREALEN=(R4),                  .. I/O AREA SIZE         +
               CONMODE=CS,                    .. CONTINUE SPECIFIC     +
               CONVID=COMM_CID,               .. CONVERSATION ID       +
               OPTCD=SYN                      .. SYNCHRONOUS
         OC    RPL6RC,RPL6RC                  SUCCESSFUL?
         BZ    EXIT0000                       YES
         ITRACE ID=RECVFAIL,                  RECEIVE HAS FAILED       +
               DATA1=RPL6RC
         DC    H'0'
*---------------------------------------------------------------------*
*                                                                     *
*        Issue a SEND                                                 *
*                                                                     *
*---------------------------------------------------------------------*
SEND0000 DS    0H
         ITRACE ID=SEND                       ISSUE A SEND
         SR    R4,R4                          CLEAR REGISTER
         ICM   R4,3,NET_LENGTH                LENGTH TO SEND
         APPCCMD CONTROL=SEND,                ISSUE APPC CMD           +
               QUALIFY=DATA,                  .. SEND DATA             +
               RPL=(R9),                      .. RPL ADDRESS           +
               AREA=(R7),                     .. I/O AREA              +
               RECLEN=(R4),                   .. LENGTH OF DATA        +
               CONMODE=CS,                    .. CONTINUE SPECIFIC     +
               CONVID=COMM_CID,               .. CONVERSATION ID       +
               OPTCD=SYN                      .. SYNCHRONOUS
         OC    RPL6RC,RPL6RC                  SEND SUCCESSFUL?
         BZ    EXIT0000                       YES
         ITRACE ID=SENDFAIL,                  SEND HAS FAILED          +
               DATA1=RPL6RC
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CLEAN000 DS    0H
         ITRACE ID=DEALLOC                    DEALLOCATING THE SESSION
         APPCCMD CONTROL=DEALLOC,             DE-ALLOCATE A SESSION    +
               QUALIFY=FLUSH,                 .. FLUSH BUFFERS         +
               RPL=(R9),                      .. RPL'S ADDRESS         +
               CONVID=COMM_CID                .. CONVERSATION ID
         OC    RPL6RC,RPL6RC                  DE-ALLOCATE SUCCESSFUL?
         BNZ   ERR0010                        NO
         TM    COMM_FLAG,$ACB_OPEN            ACB OPENED?
         BNO   CLEAN010                       NO
         CLOSE ((R10)),                       CLOSE THE ACB            +
               MODE=31,                                                +
               MF=(E,DXD_CLOSE)
CLEAN010 DS    0H
         ITRACE ID=FREEACB,                   FREEMAIN ACB             +
               RDATA1=R10                     .. ACB'S ADDRESS
         FREEMAIN RU,                         FREEMAIN ACB             +
               A=(R10),                                                +
               LV=ACB_L
         ITRACE ID=FREERPL,                   FREEMAIN RPL             +
               RDATA1=R9                      .. RPL'S ADDRESS
         FREEMAIN RU,                         FREEMAIN RPL             +
               A=(R9),                                                 +
               LV=RPL_L
         ITRACE ID=FREERPLX,                  FREEMAIN RPLX            +
               RDATA1=R8
         FREEMAIN RU,                                                  +
               A=(R8),                                                 +
               LV=RPLEXT_L
         L     R1,COMM_EXLST                  EXLST'S ADDRESS
         ITRACE ID=FREEXLST,                  FREEMAIN EXLST           +
               RDATA1=R1                      .. EXLST'S ADDRESS
         FREEMAIN RU,                                                  +
               A=(R1),                                                 +
               LV=EXLSTL
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    CALLER'S R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDVTAM)            DISPLACEMENT TO WORK AREA

OPEN_I   OPEN  (*,INPUT),            OPEN PARM LIST                    +
               MODE=31,                                                +
               MF=L
OPEN_L   EQU   *-OPEN_I

CLOSE_I  CLOSE *,                    CLOSE PARM LIST                   +
               MODE=31,                                                +
               MF=L
CLOSE_L  EQU   *-CLOSE_I

ACB_I    ACB   AM=VTAM,              GENERATE VTAM ACB                 +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
ACB_L    EQU   *-ACB_I
EXLSTI   EXLST AM=VTAM,              GENERATE VTAM EXIT LIST           +
               ATTN=*,                                                 +
               LERAD=*
EXLSTL   EQU   *-EXLSTI
RPL_I    RPL   AM=VTAM,              GENERATE VTAM RPL                 +
               AAREA=RPLEXT_I
RPL_L    EQU   *-RPL_I
NIB_I    NIB   MODE=RECORD,          GENERATE VTAM NIB                 +
               NAME=SUTL
NIB_L    EQU   *-NIB_I
RPLEXT_I ISTRPL6
RPLEXT_L EQU   *-RPLEXT_I

X000001  DC    X'00000001'

MSG01    DC    C'TSOVTAM01E * All user interface APPLID''s are busy, tr+
               y later'
MSG01L   EQU   *-MSG01
MSG02    DC    C'TSOVTAM02E * SUTL is not active'
MSG02L   EQU   *-MSG02

         FMH5  DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDVTAM   DSECT
          SUTLSAVE DSECT=NO
DXD_OPEN  DS    0A,(OPEN_L)X
DXD_CLOSE DS    0A,(CLOSE_L)X
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ISTDNIB
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO    DSECT=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      TSOVTAM
./ ADD NAME=TSOXTR   0102-09160-09169-1427-00094-00094-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  MODULE NAME: TSOXTR - Display system link link (XTR)               *
*                                                                     *
*  Function:                                                          *
*   Provide a display of the system link list (XTR).                  *
*                                                                     *
*  Sub-commands:                                                      *
*   None.                                                             *
*                                                                     *
* ------------------------------------------------------------------- *
TSOXTR   CSECT
TSOXTR   AMODE 31
TSOXTR   RMODE ANY
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        SET BASE REGISTER
         USING TSOCOMM,R12                    DEFINE COMMON AREA BASE
         USING TSOXTR,R11                     DEFINE BASE
         B     XTR0000
MODID    DC    CL8'TSOXTR'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
XTR0000  DS    0H
         L     R2,COMM_DXD_ADDRESS            WORK AREA BASE ADDRESS
         A     R2,DXDSTART                    PLUS DISPLACEMENT
         ST    R13,4(,R2)                     CHAIN CALLER'S SAVE AREA
         ST    R2,8(,R13)                     CHAIN OUR SAVE AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING DXDXTR,R13                     DEFINE WORK AREA BASE
         MVC   ZCMD,COMM_BLANKS               CLEAR THE COMMAND
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    XTR0010                        YES
         ITRACE ID=ENTRY
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
XTR0010  DS    0H
         TM    XTR_FLAG,$XTR_ON               EXTERNAL TRACE ON?
         BO    XTR0020                        YES
         ITRACE ID=ON
         OI    XTR_FLAG,$XTR_ON               TURN ON XTR
         MVC   COMM_MSG(MSG01_L),MSG01
         B     EXIT0000
XTR0020  DS    0H
         ITRACE ID=OFF
         NI    XTR_FLAG,255-$XTR_ON           TURN OFF XTR
         MVC   COMM_MSG(MSG02_L),MSG02
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS   0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    RESTORE R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         BR    R14                            RETURN
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDSTART DC    Q(DXDXTR)                      DISPLACEMENT TO WORK AREA
MSG01    DS    0C
         DC    CL11'TSOXTR01I'
         DC    C'External trace on'
MSG01_L  EQU   *-MSG01
MSG02    DS    0C
         DC    CL11'TSOXTR02I'
         DC    C'External trace off'
MSG02_L  EQU   *-MSG02
         LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDXTR   DSECT
         SUTLSAVE DSECT=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         TSOCOMM TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         NETIO   DSECT=YES
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         IHAPSA  DSECT=YES,LIST=NO
*---------------------------------------------------------------------*
*                                                                     *
*---------------------------------------------------------------------*
         CVT     DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY    REGEQU
         COPY    ATTR
         END     TSOXTR
./ ADD NAME=VTAMSUB  0109-09148-09173-0915-00218-00242-00000-SOURCE
         COPY  OPTIONS
*---------------------------------------------------------------------*
*                                                                     *
*  Module name: VTAMSUB                                               *
*                                                                     *
*  VTAM subtask                                                       *
*                                                                     *
*  At entry:                                                          *
*             R15  Entry point address                                *
*             R14  Return address                                     *
*             R13  Register save area address                         *
*             R12  Common area address                                *
*             R11  Calling module's base address                      *
*                                                                     *
* ------------------------------------------------------------------- *
VTAMSUB  CSECT
VTAMSUB  AMODE 31
VTAMSUB  RMODE ANY
         USING STCCOMM,R12                    DEFINE COMMON AREA BASE
         USING VTAMSUB,R11                    DEFINE BASE
         STM   R14,R12,12(R13)                SAVE REGISTERS
         LR    R11,R15                        COPY BASE
         B     VTAM0000
MODID    DC    CL8'VTAMSUB'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
VTAM0000 DS    0H
         L     R12,0(,R1)                     STCCOMM ADDRESS
         ST    R11,AVTAMSUB
         GETMAIN RU,                                                   +
               LV=WORK_L,                                              +
               LOC=ANY
         LR    R2,R1
         LR    R0,R1
         LA    R1,WORK_L
         SR    R14,R14
         SR    R15,R15
         MVCL  R0,R14
         ST    R13,4(,R2)                     CHAIN WORK AREA
         ST    R2,8(,R13)                     CHAIN WORK AREA
         LR    R13,R2                         COPY WORK AREA ADDRESS
         USING WORK,R13                       DEFINE BASE
         CLC   DXD_ID,MODID                   WORK AREA INITIALIZED?
         BE    VTAM0010                       YES
         MVC   DXD_ID,MODID                   WORK AREA INITIALIZED
VTAM0010 DS    0H
         ITRACE ID=ENTRY
* ------------------------------------------------------------------- *
*                                                                     *
*        OPEN ACB and issue SETLOGON                                  *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0000 DS    0H
         MVC   WORK_ACB(ACB_L),ACB_I          INITIALIZE ACB
         MVC   WORK_RPL(RPL_L),RPL_I          INITIALIZE RPL
         MVC   WORK_RPLEXT(RPLEXT_L),RPLEXT_I INITIALIZE RPLEXT
         MVC   WORK_EXLST(EXLST_L),EXLST_I    INITIALIZE EXLST
         MVC   WORK_OPEN(OPEN_L),OPEN_I       INITIALIZE OPEN
         MVC   WORK_CLOSE(CLOSE_L),CLOSE_I    INITIALIZE CLOSE
         LA    R9,WORK_ACB                    COPY ADDRESS
         ST    R9,COMM_ACB                    SAVE ACB ADDRESS
         USING IFGACB,R9
         ST    R12,ACBUSER                    PUT COMM ADDR IN ACB
         LA    R8,WORK_RPL
         USING IFGRPL,R8
         ST    R9,RPLDACB                     SET ACB ADDRESS IN RPL
         LA    R7,WORK_RPLEXT                 COPY ADDRESS
         ST    R7,RPLAAREA                    SET ADDRESS IN RPL
         LA    R1,WORK_EXLST
         ST    R1,COMM_EXLST                  SAVE EXIT LIST ADDRESS
         ST    R1,ACBEXLST                    SET EXLST ADDR IN ACB
         USING IFGEXLST,R1                    DEFINE EXIT LIST BASE
         MVC   EXLATTNP,AATTN                 SET ATTN EXIT ADDRESS
         MVC   EXLLERP,ALRAD                  SET LERAD EXIT ADDRESS
         LA    R1,COMM_APPL_LENGTH            OUR APPL NAME ADDRESS
         ST    R1,ACBAPID                     SET APPLID ADDR IN ACB
         ITRACE ID=OPENACB
         OPEN  ((R9)),                        OPEN THE ACB             +
               MODE=31,                                                +
               MF=(E,WORK_OPEN)
         MVC   PRT_MSGID(MSG01L),MSG01        ACB IS OPEN
         BAL   R3,PRT0000                     PRINT MESSAGE
         ITRACE ID=SETLOGON
         SETLOGON ACB=(R9),                   ISSUE SETLOGON           +
               RPL=(R8),                      .. RPL ADDRESS           +
               OPTCD=START                    .. ENABLE ATTN EXIT
         LTR   R15,R15                        SUCCESSFUL?
         BNZ   ERR0010                        NO
         MVC   PRT_MSGID(MSG02L),MSG02        ATTN EXIT IS ENABLED
         BAL   R3,PRT0000                     PRINT MESSAGE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         WAIT  ECB=VTAM_WORK_ECB              WAIT FOR TERMINATION
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         ITRACE ID=CLEAN_UP
         CLOSE ((R9)),                        CLOSE THE ACB            +
               MODE=31,                                                +
               MF=(E,WORK_CLOSE)
         B     EXIT0000
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         ITRACE ID=LOGONERR,                                           +
               RDATA1=R15
         STH   R15,COMM_DWORD
         MVC   PRT_MSGID(MSG03L),MSG03
         UNPK  PRT_MSGID+(MSG03_RC-MSG03)(5),COMM_DWORD(3)
         TR    PRT_MSGID+(MSG03_RC-MSG03)(L'MSG03_RC),HEXCHAR
         MVI   PRT_MSGID+(MSG03_RC-MSG03)+4,C' '
         BAL   R3,PRT0000                     PRINT MESSAGE
         DC    H'0'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         MVI   PRT_COMMAND,$PRT_PRINT         SET COMMAND (PRINT)
         LA    R1,PRTBLOK                     REQUEST BLOCK ADDRESS
         L     R15,APRTQ                      QUEUEING ENTRY POINT
         BALR  R14,R15                        A REQUEST TO QUEUE
         BR    R3                             COMPLETE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                    CALLER'S R13
         LM    R14,R12,12(R13)                RESTORE REGISTERS
         SR    R15,R15                        RETURN CODE
         BR    R14                            RETURN TO CALLER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ACB_I    ACB   AM=VTAM,                                                +
               MACRF=LOGON,                                            +
               EXLST=*,                                                +
               APPLID=*
ACB_L    EQU   *-ACB_I
EXLST_I  EXLST AM=VTAM,                                                +
               ATTN=*,                                                 +
               LERAD=*
EXLST_L  EQU   *-EXLST_I
RPL_I    RPL   AM=VTAM,                                                +
               AAREA=RPLEXT_I
RPL_L    EQU   *-RPL_I
RPLEXT_I ISTRPL6
RPLEXT_L EQU   *-RPLEXT_I
OPEN_I   OPEN  (*,INPUT),                                              +
               MODE=31,                                                +
               MF=L
OPEN_L   EQU   *-OPEN_I
CLOSE_I  CLOSE (*),                                                    +
               MODE=31,                                                +
               MF=L
CLOSE_L  EQU   *-CLOSE_I

MSG01    DS    0C
         DC    CL11'STCMAIN06I'
         DC    C'ACB is OPEN'
MSG01L   EQU   *-MSG01

MSG02    DS    0C
         DC    CL11'STCMAIN07I'
         DC    C'ATTN exit is enabled'
MSG02L   EQU   *-MSG02

MSG03    DS    0C
         DC    CL11'STCMAIN03E'
         DC    C'SETLOGON failed, RC='
MSG03_RC DC    CL8' '
         DC    C' '
MSG03L   EQU   *-MSG03

HEXCHAR  EQU   *-C'0'
         DC    C'0123456789ABCDEF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
WORK        DSECT
            SUTLSAVE DSECT=NO
WORK_ACB    DS       0F,(ACB_L)X
WORK_RPL    DS       0F,(RPL_L)X
WORK_RPLEXT DS       0F,(RPLEXT_L)X
WORK_EXLST  DS       0F,(EXLST_L)X
WORK_OPEN   DS       0F,(OPEN_L)X
WORK_CLOSE  DS       0F,(CLOSE_L)X
            PRTBLOK  DSECT=NO
WORK_L      EQU      *-WORK
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         STCCOMM  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGACB   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGRPL   AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IFGEXLST AM=VTAM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         IHAPSA   DSECT=YES,LIST=NO
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         COPY     REGEQU
         ABCODES
         END      VTAMSUB
