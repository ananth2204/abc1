{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012740000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE764.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE764.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x08\\x03'", "DS1TRBAL": "b'\\xbd\\xec'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x051\\x00\\x0b\\x052\\x00\\x04\\x00\\t'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x07#\\x8f\\x01\\x07#\\x8f\\t\\x16\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-08-26T00:00:00", "modifydate": "2007-08-26T09:16:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-475"}, "text": "REGULAR CBT TAPE - VERSION 475    FILE:  764\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT475.FILE764\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,660 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/26/07    09:16:13    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x13\\x01\\x07#\\x8f\\x01\\x07#\\x8f\\t\\x14\\x00<\\x00<\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-08-26T00:00:00", "modifydate": "2007-08-26T09:14:13", "lines": 60, "newlines": 60, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Utilities\nFrom:        \"Alex Kara\" <alexkara@netspace.net.au>\nDate:        Thu, 16 Aug 2007 19:00:40 +1000\nTo:          <sbgolob@cbttape.org>\nCC:          <mzelden@flash.net>\n\nHi Sam,\n\nNot sure whether the attached TTL (TERSE Toggler with\nself-extracting IBM TERSMAIN program) may be of use on the CBT\nsite.  It front ends onto IBM's TERSE program to either TERSE (if\nLRECL<>1024) or unTERSE (if LRECL=1024) and can be used on-line\nor generate batch JCL for large datasets.  Found it useful for\ndownloading to the PC using the default IND$FILE when direct FTP\nfrom the mainframe is not available and FTP needs to be done via\nthe PC.  Also included member $BR to browse tutorial output.\nJust copy into a SYSPROC/SYSEXEC concatenated dataset and\neneter \"TTL  /L\" against any NON-VSAM/non-PDSE dataset (under\nISPF 3.4 display) or \"TSO TTL ?\" for help.  I have attached $BR\nto supplement tutorial display.\n\nAlso, I have about 20 years backlog of handy little routines in\nmy toolbox and wouldn't mind sharing them before I retire.  Any\nhints in what type of topics may be useful for sending to the\nCBT tape.\n\nI also often take routines from the CBT tape and enhance them.\nCouple of examples are:\n\na) DASDSPCE which list all DASD, however, I present it in an\n   interfaceable table that you can then use to go into ISPF 3.4\n   (using the VOLSER option) etc...\n\nb) Mark Winges RXVSAM, where I devised a REXX front end interface\n   called EXECIOVS similar to the normal EXECIO REXX command.\n\nOne I have packaged, as I don't see such on the CBT site, is a\nREXX based api to read/write storage from another address space\nusing cross-memory (XMEMSTOR).\n\n\nHi Mark,\n\nI have used your CATSRCH interface quite extensively and have\nmade some minor modifications to make it a little more versatile\n(basically return the output to the calling routine through the\nQueue or OUTTRAPable SAY statements for stem processing).  All\nchanges should readily be identified by the eyecatcher ALK and\nthe commentary at the start.  I leave it to you whether you\nconsider them usefull.\n\nI also notice in some of your routines you build the panel from\nthe REXX.  Not trying to tell you how to suck eggs but have a\nlook at the attached TTL REXX routine for an alternative\nmethodology for self generated members/tutorials/whatever.\n\nRegards,\nAlex Kara\n(CSC Australia)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$BR": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x04\\x01\\x06$/\\x01\\x07\\x05O\\x07H\\x00\\x9e\\x00\\x97\\x00\\x00\\xc1\\xd3\\xc5\\xe7@@@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "2006-08-30T00:00:00", "modifydate": "2007-02-23T07:48:04", "lines": 158, "newlines": 151, "modlines": 0, "user": "ALEX"}, "text": "/*--------------------------ooo00 REXX 00ooo--------------------------*/\n/*                                                                    */\n/* BR:  BRowse output.                                                */\n/*                                                                    */\n/* Routine to intercept PUTLINE output from TSO commands and place it */\n/* into a dataset and present it under the control of the ISPF        */\n/* browser.                                                           */\n/*                                                                    */\n/* For help, invoke with '?' parameter.                               */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\nBR:br_ver='2.05'\n    Arg cmd;Parse Source . . xc .\n    zedsmsg=;hlq=Sysvar(Syspref)\n    If hlq='' Then hlq=Userid();Else If hlq/=Userid() Then hlq=hlq'.'Userid()\n    ispf=Sysvar(Sysispf)\n    If cmd='' Then Do\n        zedlmsg=\"Missing command parameter...\"\n        If ispf='ACTIVE' Then Address ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        Else Say zedlmsg\n        Return 8\n    End\n    Do i=1\n        i=Right(i,4,'0');ztempf=hlq'.$BRD'i'.TEMP'\n        x=Listdsi(\"'\"ztempf\"' NORECALL\")\n        If x=25 Then Iterate;If x>0 Then Leave\n    End\n    If cmd='?'  Then Do;Address TSO \"%\"xc\" %\"xc\" ??\";Return 0;End\n    If cmd='??' Then Signal help\n    Select\n        When Wordpos('/E',cmd)>0 Then Do\n            action='EDIT';cmd=Delword(cmd,Wordpos('/E',cmd),1)\n        End\n        When Wordpos('/V',cmd)>0 Then Do\n            action='VIEW';cmd=Delword(cmd,Wordpos('/V',cmd),1)\n        End\n        When Wordpos('/B',cmd)>0 Then Do\n            action='BROWSE';cmd=Delword(cmd,Wordpos('/B',cmd),1)\n        End\n        Otherwise action='BROWSE'\n    End\n    If ispf='ACTIVE' Then Address ISPEXEC \"CONTROL ERRORS RETURN\"\n\n/*--------------------------------------------------------------------*/\n/*                                                                    */\n/* For ACF2 commands (can be removed for Non ACF2 sites)              */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Parse VAR cmd v1 v2\n    If v1='ACF' Then Do\n       Do Forever;Parse VAR v2 v3 '\\' v2;Queue v3;If v2='' Then Leave;End\n       Queue \"End\"\n       cmd=v1\n    End\n/*--------------------------------------------------------------------*/\n    If Index(cmd,\"'\")>0 Then cmd='\"'cmd'\"';Else cmd=\"'\"cmd\"'\"\n    x=Outtrap('OUT.','*','NOCONCAT');Interpret cmd;x=Outtrap('Off')\n    dd=\"$BRD\"i;work=\"SYSALLDA\"\n    Address TSO\n    \"ALLOC F(\"dd\") DSN('\"ztempf\"') NEW CATALOG SPACE(10 10)\",\n        \"TRACKS UNIT(\"work\") DSORG(PS) RECFM(V B)\",\n        \"LRECL(133) BLKSIZE(0)\"\n    'EXECIO' out.0 'DISKW 'dd' (STEM out. FINIS)'\n    'FREE FILE('dd')'\n    If ispf='ACTIVE' Then Do\n        Address ISPEXEC \"CONTROL DISPLAY REFRESH\"\n        Address ISPEXEC \"&ACTION DATASET('&ZTEMPF')\"\n        #m=Msg('Off');\"DELETE '\"ztempf\"'\";x=Msg(#m)\n    End\n    Else Do\n        Say 'Enter ISPF and BROWSE/VIEW/EDIT dataset:'\n        Say \"  '\"ztempf\"'\"\n        Say ' '\n        Say 'Dataset will have to be manually deleted.'\n    End\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Help instructions.                                                 */\n/* The variable 'depth' is used to control help. Update it (use the   */\n/* 'XX' exclude block command to establish it's value) whenever the   */\n/* instructions are updated.                                          */\n/*--------------------------------------------------------------------*/\nhelp:\n    chgchar='&'\nn_st=mark(2)                                /* Mark next line         */\n/*\n\n   Good &TOD. &CNAME..\n\n   FUNCTION:\n         Prefix any TSO command that issues a PUTLINE to present the\n         output under ISPF's browser/viewer/editor in dataset\n         '&ZTEMPF.'.\n\n\n   ENVIRONMENT:\n         Can be executed under ISPF or TSO.\n\n         Under ISPF, you will be presenter with the dataset under\n         your desired viewer. The default is BROWSE.\n\n         Under TSO the output will be placed into a dataset and an\n         appropriate message will be displayed telling you the name\n         of the recipient dataset.\n\n   SYNTAX:\n         %&XC. any_TSO_command_with_parameter_list {/E | /V | /B}\n\n   OPERANDS:\n\n         /B | /E | /V\n            - To either edit, view or browse the dataset.  The\n              default is Browse.\n\n         ?  - Help, but you already know this don't you!!\n\n   FEATURES:\n         1. ACF2\n            You may stack ACF2 commands using a back slash '\\' as a\n            command seperator. Eg.\n\n               %&XC. ACF LIST LIKE(TP-)\\LIST LIKE(SF-)\n\n   GOTCHAs:\n         Operand processing are destructive. If one is found, it is\n         removed from the parameter list. Consequently if /E, /V or\n         /B are legitimate operands to the TSO command to be\n         executed it is suggested that you explicitly request your\n         type of presentation before the TSO command, eg.\n\n            %&XC. /B %ANYLOOK 'SYS2.PARMLIB(IKJTSO00)' /V\n\n                              *****\n\n*/\nn_en=mark(-2)                               /* Mark prev 2 line       */\n    Signal On Syntax Name bypass_$WHOAMI;cname='there';cname=$whoami('C')\nbypass_$WHOAMI:Signal Off Syntax\n    Parse Value Time() With hh ':' 1 time +5\n    Select\n        When hh<12 Then tod='morning'\n        When hh<18 Then tod='afternoon'\n        Otherwise tod='evening'\n    End\n    x=nl_h('*'Centre('ooo000OOOO000ooo',77,'-')'*')\n    Do i=n_st To n_en\n        line=Sourceline(i)\n        Do While Index(line,chgchar)>0\n            Parse VAR line p1 '&' var '.' p2;Interpret 'line=p1||'var'||p2'\n        End\n        x=nl_h(Substr('*   'line,1,78)'*')\n    End\n    x=nl_h('*'Copies('-',77)'*')\n    Exit\n\nnl_h:Parse Arg n#;Say n#;Return 0\nMark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$PDSLOAD": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00(\\x01\\x026_\\x01\\x07#\\x8f\\t\\x04\\x00%\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2007-08-26T09:04:28", "lines": 37, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------- *//\n//*      PDSLOAD JOB TO CREATE INSTALL LIBRARIES        *//\n//*                                                     *//\n//*     (THIS JOB WAS TESTED TO WORK ON MY SYSTEM)      *//\n//* --------------------------------------------------- *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('SBGOLOB.CBT475.FILE764(PDSLOAD)')\n   DSN ('SBGOLOB.TEMP.PDSLOAD') VOL(WORK04)\n/*\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT475.FILE764',      <=== CHANGE\n//             OPRE=SBGOLOB,\n//             QUAL=FILE764,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=WORK04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=SBGOLOB.TEMP.PDSLOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=XMEMSTOR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE764": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x07#\\x8f\\x01\\x07#\\x8f\\t\\x16\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-08-26T00:00:00", "modifydate": "2007-08-26T09:16:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "CBT-475"}, "text": "//***FILE 764 is from Alex Kara and contains a collection of some   *   FILE 764\n//*           of his utilities.                                     *   FILE 764\n//*                                                                 *   FILE 764\n//*           email:  alexkara@netspace.net.au                      *   FILE 764\n//*                                                                 *   FILE 764\n//*       Member XMEMSTOR is a separate pds, packaged in PDSLOAD    *   FILE 764\n//*       format.  To create the pds from this member, please run   *   FILE 764\n//*       the JCL in member $PDSLOAD, after you've customized it    *   FILE 764\n//*       for your installation and your dataset names.             *   FILE 764\n//*                                                                 *   FILE 764\n//*       Please see member $$NOTE1 for the contributor's intro-    *   FILE 764\n//*       duction to this package.                                  *   FILE 764\n//*                                                                 *   FILE 764\n//*                                                                 *   FILE 764\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CATSRCH": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00'\\x01\\x03\\x17\\x1f\\x01\\x033\\x0f\\x03(\\x01n\\x00S\\x00\\x00\\xe2\\xc6\\xf0\\xf5\\xf5\\xf8@@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "2003-06-20T00:00:00", "modifydate": "2003-11-26T03:28:27", "lines": 366, "newlines": 83, "modlines": 0, "user": "SF0558"}, "text": "/* REXX */\n/*                                       */\n/* AUTHOR: Mark Zelden                   */\n/* SAYIT option added by Alex Kara       */\n/*                                       */\n/*********************************************************************/\n/*  MODIFIED FROM SYS1.SAMPLIB(IGGCSIRX)                             */\n/*********************************************************************/\n/*                                                                   */\n/* EXECUTION SYNTAX:                                                 */\n/*   CATSRCH dsn.filter <catalog name> <sayit> <retq>                */\n/*   (catalog name is optional)                                      */\n/*                                                                   */\n/*-------------------------------------------------------------------*/\n/*   The 'sayit' option is provided to permit forcing of \"Say\"       */\n/*   presentation for outtrap capture for various application uses.  */\n/*   A '.' placeholder for missing catalog entries has been provided.*/\n/*   (Any non-blank 3rd. parm will turn it on.)                      */\n/*                                                                   */\n/*   The 'retq' option is provided to return the stack (queue) to    */\n/*   the caller.  A '.' placeholder for missing catalog entries and  */\n/*   'sayit' parameter has been provided.                            */\n/*   (Any non-blank 4th. parm will turn it on.)                      */\n/*                                                      - Alex.      */\n/*-------------------------------------------------------------------*/\n/*                                                                   */\n/* FILTER CHARACTERS:                                                */\n/*  %  - one character,   *  - one qualifier,                        */\n/*  **  - one or more qualifiers                                     */\n/*  NOTE: A double asterisk cannot precede or follow any characters; */\n/*   it must be preceded or followed by either a period or a blank   */\n/*    EXAMPLES:  SYS1.A*.**  (correct)                               */\n/*               SYS1.A**    (not correct)                           */\n/*                                                                   */\n/* ** NOTE: Do not use quotes for the data set name filter or        */\n/*          catalog name.                                            */\n/*                                                                   */\n/*  Caution should be exercised in using high-level qualifiers       */\n/*  that contain generic filters because multiple catalogs can be    */\n/*  searched.  A high-level of \"**\" will cause a search of every     */\n/*  user catalog in the system.                                      */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/* EXAMPLES:                                                         */\n/*  TSO %CATSRCH USERID.**                                           */\n/*  TSO %CATSRCH SYS1.LINK*                                          */\n/*  TSO %CATSRCH SYS1.*LIB                                           */\n/*  TSO %CATSRCH SYS1.*.PROCLIB                                      */\n/*  TSO %CATSRCH SYS1.**.PROCLIB                                     */\n/*  TSO %CATSRCH SYS1.A%%.*LIB                                       */\n/*  TSO %CATSRCH USER*.**  TSO.USERCAT                               */\n/*  TSO %CATSRCH SYS*.LINKLIB  SYSICF.MASTER                         */\n/*  TSO %CATSRCH SYS*.LINKLIB  (see caution above)                   */\n/*  TSO %CATSRCH SYS1.A*.**    (SYS1.A** won't give everything - see */\n/*                               note on ** above)                   */\n/*                                                                   */\n/*********************************************************************/\nLASTUPD = '01/17/2001'                       /* date of last update  */\n/*********************************************************************/\n /********************************************************************/\n /*                                                                  */\n /*       NAME: IGGCSIRX                                             */\n /*DESCRIPTION: THIS REXX EXEC IS USED TO CALL THE CATALOG           */\n /*             SEARCH INTERFACE.                                    */\n /*      INPUT: FILTER KEY                                           */\n /*     OUTPUT: DATA SETS NAMES AND VOLUMES                          */\n /*                                                                  */\n /********************************************************************/\n /* SAY 'ENTER FILTER KEY' */       /*   ASK FOR FILTER KEY          */\n /* PULL KEY               */       /*   GET FILTER KEY              */\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE THE PARM LIST                                        */\n /*                                                                  */\n /********************************************************************/\nPARSE UPPER ARG KEY CAT sayit retq  /* Add 3rd parm of sayiy      ALK*/\nIf retq='' Then retq=0;Else retq=1  /* Set retyrn queu if reqst'd ALK*/\nIf sayit='' Then sayit=0            /* Is sayit missing, set      ALK*/\nElse sayit=1                        /*   accordingly.             ALK*/\nIF KEY = '' THEN DO                 /*                            MSZ*/\n  SAY 'ENTER DATA SET NAME FILTER'  /*                            MSZ*/\n  PULL KEY                          /*                            MSZ*/\nEND                                 /*                            MSZ*/\nCOUNT = 0                           /* TOTAL ENTIRES FOUND        MSZ*/\nMODRSNRC = SUBSTR(' ',1,4)          /*   CLEAR MODULE/RETURN/REASON  */\nCSIFILTK = SUBSTR(KEY,1,44)         /*   MOVE FILTER KEY INTO LIST   */\nIf cat = '.' Then cat=              /* Set placeholder off        ALK*/\nIF CAT <> '' THEN                   /*                            MSZ*/\n  CSICATNM = SUBSTR(CAT,1,44)       /*   USE SPECIFIED CATALOG    MSZ*/\nELSE                                /*                            MSZ*/\n  CSICATNM = SUBSTR(' ',1,44)       /*   CLEAR CATALOG NAME       MSZ*/\nCSIRESNM = SUBSTR(' ',1,44)         /*   CLEAR RESUME NAME           */\nCSIDTYPS = SUBSTR(' ',1,16)         /*   CLEAR ENTRY TYPES           */\nCSICLDI  = SUBSTR('Y',1,1)          /*   INDICATE DATA AND INDEX     */\nCSIRESUM = SUBSTR(' ',1,1)          /*   CLEAR RESUME FLAG           */\nIF CAT <> '' THEN                   /*                            MSZ*/\n  CSIS1CAT = SUBSTR('Y',1,1)        /* SEARCH ONLY 1 CAT          MSZ*/\nELSE                                /*                            MSZ*/\n  CSIS1CAT = SUBSTR(' ',1,1)        /* SEARCH > 1 CATALOGS        MSZ*/\nCSIRESRV = SUBSTR(' ',1,1)          /*   CLEAR RESERVE CHARACTER     */\nCSINUMEN = '0001'X                  /*   INIT NUMBER OF FIELDS       */\nCSIFLD1    = SUBSTR('VOLSER',1,8)   /*   INIT FIELD 1 FOR VOLSERS    */\n /********************************************************************/\n /*                                                                  */\n /*  BUILD THE SELECTION CRITERIA FIELDS PART OF PARAMETER LIST      */\n /*                                                                  */\n /********************************************************************/\nCSIOPTS  = CSICLDI || CSIRESUM || CSIS1CAT || CSIRESRV\nCSIFIELD = CSIFILTK || CSICATNM || CSIRESNM || CSIDTYPS || CSIOPTS\nCSIFIELD = CSIFIELD || CSINUMEN || CSIFLD1\n\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE AND BUILD WORK ARE OUTPUT PART OF PARAMETER LIST     */\n /*                                                                  */\n /********************************************************************/\n/* WORKLEN = 1024  */\n/* DWORK = '00000400'X || COPIES('00'X,WORKLEN-4) */\nWORKLEN = 131072  /* 128K */      /* APAR OW39593 */\nDWORK = '00020000'X || COPIES('00'X,WORKLEN-4)   /* APAR OW39593 */\n\n /********************************************************************/\n /*                                                                  */\n /*  INITIALIZE WORK VARIABLES                                       */\n /*                                                                  */\n /********************************************************************/\nRESUME = 'Y'\nCATNAMET = SUBSTR(' ',1,44)\nDNAMET = SUBSTR(' ',1,44)\n\n /********************************************************************/\n /*                                                                  */\n /*  SET UP LOOP FOR RESUME (IF A RESUME IS NCESSARY)                */\n /*                                                                  */\n /********************************************************************/\nDO WHILE RESUME = 'Y'\n\n /********************************************************************/\n /*                                                                  */\n /*  ISSUE LINK TO CATALOG GENERIC FILTER INTERFACE                  */\n /*                                                                  */\n /********************************************************************/\n ADDRESS LINKPGM 'IGGCSI00  MODRSNRC  CSIFIELD  DWORK'\n\n RESUME = SUBSTR(CSIFIELD,150,1)    /* GET RESUME FLAG FOR NEXT LOOP */\n USEDLEN = C2D(SUBSTR(DWORK,9,4))   /* GET AMOUNT OF WORK AREA USED  */\n POS1=15                            /* STARTING POSITION             */\n\n /********************************************************************/\n /*                                                                  */\n /*  PROCESS DATA RETURNED IN WORK AREA                              */\n /*                                                                  */\n /********************************************************************/\n DO WHILE POS1 < USEDLEN            /* DO UNTIL ALL DATA IS PROCESSED*/\n   IF SUBSTR(DWORK,POS1+1,1) = '0'  /* IF CATALOG, PRINT CATALOG HEAD*/\n    THEN DO\n         CATNAME=SUBSTR(DWORK,POS1+2,44)\n         POS1 = POS1 + 50\n         END\n\n IF POS1 < USEDLEN THEN   /* IF STILL MORE DATA       - APAR OW43675 */\n  DO                      /* CONTINUE WITH NEXT ENTRY - APAR OW43675 */\n   DNAME = SUBSTR(DWORK,POS1+2,44)  /* GET ENTRY NAME                */\n\n /********************************************************************/\n /*                                                                  */\n /*  ASSIGN ENTRY TYPE NAME                                          */\n /*                                                                  */\n /********************************************************************/\n   IF SUBSTR(DWORK,POS1+1,1) = 'C' THEN DTYPE = 'CLUSTER '\n    ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'D' THEN DTYPE = 'DATA    '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'I' THEN DTYPE = 'INDEX   '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'A' THEN DTYPE = 'NONVSAM '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'H' THEN DTYPE = 'GDS     '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'B' THEN DTYPE = 'GDG     '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'R' THEN DTYPE = 'PATH    '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'G' THEN DTYPE = 'AIX     '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'X' THEN DTYPE = 'ALIAS   '\n     ELSE\n      IF SUBSTR(DWORK,POS1+1,1) = 'U' THEN DTYPE = 'UCAT    '\n     ELSE DO   /* NO ENTRIES IN THE CATALOG OR UNKNOWN TYPE *//* MSZ */\n               /* UNKNOWN TYPE CAN BE CAUSED BY PARTIAL     *//* MSZ */\n               /* CATALOG RECORD SUCH AS AN INTERUPTED      *//* MSZ */\n               /* DELETE OR UPDATE-EXTEND (IDC11441I)       *//* MSZ */\n               /* THIS USED TO CAUSE A LOOP IN THIS CODE    *//* MSZ */\n      IF SUBSTR(DWORK,POS1+1,1) = '0' THEN ITERATE  /* CAT ENTRY MSZ */\n      POS1 = POS1 + 46  /* UNKNOWN DTYPE   */                 /* MSZ */\n      POS1 = POS1 + C2D(SUBSTR(DWORK,POS1,2)) /* NEXT ENTRY*/ /* MSZ */\n      ITERATE                                                 /* MSZ */\n     END   /* ELSE DO */                                      /* MSZ */\n /********************************************************************/\n /* Moved this section of code from above so catalog name would      */\n /* not print during generic hlq search if no entires were found.    */\n /********************************************************************/\n         IF CATNAME <> CATNAMET THEN /* IF RESUME NAME MAY ALREADY BE*/\n          DO                         /*    PRINTED                   */\n     /*    IF FOUND = 'TRUE' THEN  SAY   '     '  */\n           IF FOUND = 'TRUE' THEN  QUEUE '     '\n     /*    SAY 'CATALOG ' CATNAME */ /* IF NOT, PRINT IT             */\n           QUEUE 'CATALOG ' CATNAME  /* IF NOT, PRINT IT             */\n     /*    SAY ' '  */\n           QUEUE '   '\n           CATNAMET = CATNAME\n           FOUND = 'TRUE'                                       /*MSZ*/\n          END\n /*************************************************************//*MSZ*/\n /* CHECK FOR ERROR IN ENTRY RETURNED                         *//*MSZ*/\n /*************************************************************//*MSZ*/\n   CSIEFLAG = SUBSTR(DWORK,POS1+0,1) /* Entry flag information*//*MSZ*/\n   IF BITAND(CSIEFLAG,'40'X) = '40'X THEN DO                    /*MSZ*/\n     POS1 = POS1 + 50           /* HEADER LENGTH */             /*MSZ*/\n     POS1 = POS1 + C2D(SUBSTR(DWORK,POS1,2))                    /*MSZ*/\n /*  SAY   'ERROR PROCESSING THE FOLLOWING ENTRY:' */           /*MSZ*/\n /*  SAY   'DSN  =' DNAME                          */           /*MSZ*/\n /*  SAY   'CAT  =' CATNAME                        */           /*MSZ*/\n /*  SAY   'TYPE =' DTYPE                          */           /*MSZ*/\n     QUEUE 'ERROR PROCESSING THE FOLLOWING ENTRY:'              /*MSZ*/\n     QUEUE 'DSN  =' DNAME                                       /*MSZ*/\n     QUEUE 'CAT  =' CATNAME                                     /*MSZ*/\n     QUEUE 'TYPE =' DTYPE                                       /*MSZ*/\n     ITERATE    /* GO TO NEXT ENTRY */                          /*MSZ*/\n    END                                                         /*MSZ*/\n /********************************************************************/\n /*                                                                  */\n /*  HAVE NAME AND TYPE, GET VOLSER INFO                             */\n /*                                                                  */\n /********************************************************************/\n    COUNT = COUNT + 1  /* total entires found  */               /*MSZ*/\n    POS1 = POS1 + 46\n    NUMVOL = C2D(SUBSTR(DWORK,POS1+4,2))/6 /* HOW MANY VOLSERS ?     */\n                                    /*                               */\n    POS2 = POS1+6                   /* POSITION ON DATA              */\n    DO I=1 TO 3                     /* ONLY CLEAR 3 VOLSER FIELDS    */\n      VOLSER.I = SUBSTR(' ',1,6)\n    END\n    DO I = 1 TO NUMVOL              /* MOVE VOLSERS TO OUTPUT FIELDS */\n      VOLSER.I = SUBSTR(DWORK,POS2,6)\n      POS2 = POS2 + 6\n    END\n /* IF DNAMET <> DNAME THEN */    /* IF RESUME, NAME MAY ALREADY  MSZ*/\n /*                         */      /*    PRINTED                 MSZ*/\n /* DO                      */      /* IF NOT, PRINT IT           MSZ*/\n  /* SAY COPIES(' ',8) DTYPE DNAME VOLSER.1 VOLSER.2 VOLSER.3 */\n     QUEUE COPIES(' ',8) DTYPE DNAME VOLSER.1 VOLSER.2 VOLSER.3\n /*  DNAMET=DNAME           */                                /* MSZ */\n /* END                     */                                /* MSZ */\n /********************************************************************/\n /*                                                                  */\n /*   GET POSITION OF NEXT ENTRY                                     */\n /*                                                                  */\n /********************************************************************/\n    POS1 = POS1 + C2D(SUBSTR(DWORK,POS1,2))\n   END                 /* OF ROOM LEFT IN WORKAREA  - APAR OW43675  */\n  END\nEND\n /********************************************************************/\n\nQUEUE ''  /* NULL TO END STACK */\nIf retq Then Exit 0                                            /* ALK */\nIF \u00acsayit & SYSVAR(SYSISPF)='ACTIVE' THEN CALL BROWSE_ISPF     /* ALK */\nELSE DO QUEUED()\n PARSE PULL LINE\n SAY LINE\nEND\nEXIT 0\n\nBROWSE_ISPF: /* BROWSE OUTPUT IF ISPF IS ACTIVE          */\nADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nADDRESS ISPEXEC \"VGET ZENVIR\"\nADDRESS TSO\nUID   = SYSVAR('SYSUID')        /* TSO USERID            */\nDDNM1 = 'DD'||RANDOM(1,99999)   /* CHOOSE RANDOM DDNAME  */\nDDNM2 = 'DD'||RANDOM(1,99999)   /* CHOOSE RANDOM DDNAME  */\nJUNK = MSG(OFF)\n\"ALLOC FILE(\"||DDNM1||\") UNIT(SYSALLDA) NEW CYL SPACE(5,5) DELETE\",\n      \" REUSE LRECL(80) RECFM(F B) BLKSIZE(3120)\"\n\"ALLOC FILE(\"||DDNM2||\") UNIT(SYSALLDA) NEW TRACKS SPACE(1,1) DELETE\",\n      \" REUSE LRECL(80) RECFM(F B) BLKSIZE(3120) DIR(1)\",\n      \" DA('\"||UID||\".CATSRCH.\" ||DDNM2|| \".ISPPLIB')\"\nJUNK = MSG(ON)\nNEWSTACK\n/*************************/\n/* CATPNL PANEL SOURCE */\n/*************************/\nIF SUBSTR(ZENVIR,6,1) >= 4 THEN\n  QUEUE \")PANEL KEYLIST(ISRSPBC,ISR)\"\nQUEUE \")ATTR\"\nQUEUE \"  _ TYPE(INPUT)   INTENS(HIGH) COLOR(TURQ) CAPS(OFF)\"\nQUEUE \"  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)\"\nQUEUE \"  + TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)\"\nQUEUE \"  @ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)\"\nQUEUE \"  % TYPE(TEXT)    INTENS(HIGH) COLOR(GREEN)\"\nQUEUE \"  ! TYPE(OUTPUT)  INTENS(HIGH) COLOR(TURQ) PAD(-)\"\nQUEUE \" 01 TYPE(DATAOUT) INTENS(LOW)\"\nQUEUE \" 02 TYPE(DATAOUT) INTENS(HIGH)\"\nQUEUE \" 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)\"\nQUEUE \" 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)\"\nQUEUE \" 0D TYPE(DATAOUT) INTENS(HIGH)\"\nQUEUE \" 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)\"\nQUEUE \" 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)\"\nQUEUE \" 12 TYPE(DATAOUT) INTENS(LOW)\"\nQUEUE \")BODY EXPAND(//)\"\nQUEUE \"%BROWSE  @&ZTITLE  / /  %LINE!ZLINES  %COL!ZCOLUMS+\"\nQUEUE \"%COMMAND ===>_ZCMD / /           %SCROLL ===>_Z   +\"\nQUEUE \"|ZDATA ---------------/ /-------------------------|\"\nQUEUE \"|                     / /                         |\"\nQUEUE \"| --------------------/-/-------------------------|\"\nQUEUE \")INIT\"\nQUEUE \"  .HELP = ISR10000\"\nQUEUE \"  .ZVARS = 'ZSCBR'\"\nQUEUE \"  &ZTITLE = 'Mark''s MVS Utilities - CATSRCH'\"\nQUEUE \"  VGET (ZSCBR) PROFILE\"\nQUEUE \"  IF (&ZSCBR = ' ')\"\nQUEUE \"   &ZSCBR = 'CSR'\"\nQUEUE \")REINIT\"\nQUEUE \"  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)\"\nQUEUE \")PROC\"\nQUEUE \"  &ZCURSOR = .CURSOR\"\nQUEUE \"  &ZCSROFF = .CSRPOS\"\nQUEUE \"  &ZLVLINE = LVLINE(ZDATA)\"\nQUEUE \"  VPUT (ZSCBR) PROFILE\"\nQUEUE \")END\"\nQUEUE \"\"\n/*                                    */\n\"ALLOC FILE(CATPNL) SHR REUSE\",\n      \" DA('\"||UID||\".CATSRCH.\" ||DDNM2|| \".ISPPLIB(CATPNL)')\"\n\"EXECIO * DISKW CATPNL (FINIS\"\n\"FREE FI(CATPNL)\"\nDELSTACK\n\"EXECIO * DISKW\" DDNM1 \"(FINIS\"\nIF FOUND <> 'TRUE' THEN DO\n  ZEDSMSG = 'No matches found'\n  ZEDLMSG = 'No matches were found for' KEY ||'.' ,\n          '  CATSRCH -' ,\n          'Last updated on' LASTUPD ||'. Written by' ,\n          'Mark Zelden. Mark''s MVS Utilities -' ,\n          'http://home.flash.net/~mzelden/mvsutil.html'\n  ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"  /* MSG - WITH ALARM */\nEND\nELSE DO\n  ZEDSMSG = COUNT 'matches found'\n  ZEDLMSG = COUNT 'matches were found for' KEY ||'.' ,\n          '  CATSRCH -' ,\n          'Last updated on' LASTUPD ||'. Written by' ,\n          'Mark Zelden. Mark''s MVS Utilities -' ,\n          'http://home.flash.net/~mzelden/mvsutil.html'\n  ADDRESS ISPEXEC \"SETMSG MSG(ISRZ000)\"  /* MSG - NO ALARM */\nEND\nADDRESS ISPEXEC \"LIBDEF ISPPLIB LIBRARY ID(\"||ddnm2||\") STACK\"\nADDRESS ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm1||\")\"\nADDRESS ISPEXEC \"BROWSE DATAID(\"||temp\") PANEL(CATPNL)\"\nADDRESS ISPEXEC \"LMFREE DATAID(\"||temp\")\"\nADDRESS ISPEXEC \"LIBDEF ISPPLIB\"\nJUNK = MSG(OFF)\n\"FREE FI(\"||ddnm1||\")\"\n\"FREE FI(\"||ddnm2||\")\"\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDSLOAD": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "TTL": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x03\\x01\\x054o\\x01\\x07\"\\x8f\\x18U\\x06\\xe3\\x06\\x81\\x00\\x00\\xc1\\xd3\\xc5\\xe7@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2007-08-16T18:55:03", "lines": 1763, "newlines": 1665, "modlines": 0, "user": "ALEX"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "XMEMSTOR": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x07#\\x8f\\x01\\x07#\\x8f\\x00R\\x04}\\x04}\\x00\\x00\\xc1\\xd3\\xc5\\xe7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-08-26T00:00:00", "modifydate": "2007-08-26T00:52:00", "lines": 1149, "newlines": 1149, "modlines": 0, "user": "ALEX"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT764/FILE764.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT764", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}