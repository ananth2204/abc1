{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011743000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE317.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE317.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\r'", "DS1TRBAL": "b'5\\xca'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02n\\x00\\x06\\x02n\\x00\\n\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"BKMGRMNT": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x95\\x00O\\x00\\x97(\\x7f\\x16\\x03\\x06\\x1c\\x05\\xca\\x00\\x00\\xe3\\xc3\\xc8\\xf0\\xf3@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1995-01-04T00:00:00", "modifydate": "1997-10-14T16:03:00", "lines": 1564, "newlines": 1482, "modlines": 0, "user": "TCH03"}, "text": "/******************************* REXX ********************************/\n/*                                                                   */\n/*   Maintain BookManager Data Sets                                  */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/* Program Name - BKMGRMNT                                           */\n/*                                                                   */\n/* Author       - Tim Henness                                        */\n/*                                                                   */\n/* Date Written - January 4, 1995                                    */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/* Function -                                                        */\n/*                                                                   */\n/*    This REXX EXEC will indicate the maintainance required for     */\n/*    BookManager data sets.  The following listings are produced:   */\n/*                                                                   */\n/*       1.  List of bookshelves not in the bookshelf list.          */\n/*                                                                   */\n/*       2.  List of bookshelf indexes not used by any bookshelf.    */\n/*                                                                   */\n/*       3.  List of books not in any bookshelf.                     */\n/*                                                                   */\n/*       4.  List of books to be replaced in special bookshelves.    */\n/*                                                                   */\n/*    Also, a REXX EXEC can be written that, when executed, will     */\n/*    delete the bookshelves and books indicated.                    */\n/*                                                                   */\n/* Parameters -                                                      */\n/*                                                                   */\n/*    This EXEC is called with the following parameter format:       */\n/*                                                                   */\n/*       BKMGRMNT  cntlfile                                          */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       cntlfile - is the data set name of the control file.        */\n/*                                                                   */\n/* Control File Formats -                                            */\n/*                                                                   */\n/*    The control file consists of control records that define the   */\n/*    data to be processed.                                          */\n/*                                                                   */\n/*    The bookshelf lists, bookshelves, bookshelf indexes, and       */\n/*    books are accessed from the catalog.  The cataloged data set   */\n/*    names are defined by the following control statements:         */\n/*                                                                   */\n/*       CATALOG BKLSHELF=mask                                       */\n/*       CATALOG BKSHELF=mask                                        */\n/*       CATALOG BKINDEX=mask                                        */\n/*       CATALOG BOOK=mask                                           */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       mask - is a mask defining the data set names.  A mask       */\n/*              consists of a high-level qualifier, followed by one  */\n/*              or more qualifiers.  A percent sign ('%') can be     */\n/*              used to match any single character.  An asterisk     */\n/*              ('*') can be used to match multiple characters in a  */\n/*              single qualifier.  A double asterisk ('**') can be   */\n/*              used to match zero or more qalifiers.                */\n/*                                                                   */\n/*    To exclude specific data sets, use the following control       */\n/*    statements:                                                    */\n/*                                                                   */\n/*       EXCLUDE BKLSHELF=dsn                                        */\n/*       EXCLUDE BKSHELF=dsn                                         */\n/*       EXCLUDE BKINDEX=dsn                                         */\n/*       EXCLUDE BOOK=dsn                                            */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       dsn - is the data set name to be excluded.                  */\n/*                                                                   */\n/*    'Special' bookshelves are bookshelves that are created         */\n/*    locally, using books from other bookshelves.  For example,     */\n/*    the 'MESSAGES' bookshelf contains all of the books containing  */\n/*    messages and codes from the other bookshelves.  The special    */\n/*    bookshelves are defined by the following control statement:    */\n/*                                                                   */\n/*       SPECIAL BKSHELF=dsn                                         */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       dsn - is the data set name of the special bookshelf.        */\n/*                                                                   */\n/*    This EXEC will write several reports.  The report data set     */\n/*    is defined from the following control statements:              */\n/*                                                                   */\n/*       REPORT DSN=dsn                                              */\n/*       REPORT SYSOUT=class                                         */\n/*       REPORT TERM                                                 */\n/*       REPORT ALLOC=parms                                          */\n/*       REPORT OUTDES=outdes                                        */\n/*       REPORT DEPTH=depth                                          */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       dsn    - is the name of the data set to which the report    */\n/*                is to be written.                                  */\n/*                                                                   */\n/*       class  - is the sysout class to which the report is to be   */\n/*                written.                                           */\n/*                                                                   */\n/*       TERM   - specifies that the report is to be written to the  */\n/*                TSO terminal.                                      */\n/*                                                                   */\n/*       parms  - specifies the parameters to be included on the     */\n/*                TSO ALLOCATE for the report data set.              */\n/*                                                                   */\n/*       outdes - specifies the parameters to be used for the TSO    */\n/*                OUTDES command for the report data set.  An        */\n/*                'OUTDES(BKMGROUT)' parameter will be included in   */\n/*                the TSO ALLOCATE command for the report data set.  */\n/*                This parameter can be specified only if the        */\n/*                'REPORT SYSOUT' parameter is specified.            */\n/*                                                                   */\n/*       depth  - is the number of lines to be printed on a page.    */\n/*                If this parameter is omitted, the default is 60.   */\n/*                                                                   */\n/*    This EXEC will write another REXX EXEC that to delete the      */\n/*    unreferenced bookshelves, bookshelf indexes, and books.        */\n/*    The REXX EXEC is written to a data set defined by the          */\n/*    following control statements:                                  */\n/*                                                                   */\n/*       EXEC DSN=dsn                                                */\n/*       EXEC ALLOC=parms                                            */\n/*                                                                   */\n/*    where:                                                         */\n/*                                                                   */\n/*       dsn   - is the data set name of the REXX EXEC.  If this     */\n/*               parameter is not specified, the EXEC will not be    */\n/*               written.                                            */\n/*                                                                   */\n/*       parms - specifies the allocation parameters to be included  */\n/*               on the TSO ALLOCATE for the REXX EXEC data set.     */\n/*               If this parameter is not specified, the data set    */\n/*               must already exist.                                 */\n/*                                                                   */\n/*********************************************************************/\n\n   /* TRACE R */\n\n   x = TIME(\"R\")\n\n   SAY \"BKMGRMNT - Maintain BookManager Data Sets\"\n\n/*   Set host environment to TSO                                     */\n\n   ADDRESS TSO\n\n/*   Initialize variables                                            */\n\n   cat_bslist_mask_num = 0             /* Data Set List mask for     */\n   cat_bslist_mask. = \"\"               /* Bookshelf List data sets   */\n\n   cat_shelf_mask_num = 0              /* Data Set List mask for     */\n   cat_shelf_mask. = \"\"                /* Bookshelf data sets        */\n\n   cat_index_mask_num = 0              /* Data Set List mask for     */\n   cat_index_mask. = \"\"                /* Bookshelf Index data sets  */\n\n   cat_book_mask_num = 0               /* Data Set List mask for     */\n   cat_book_mask. = \"\"                 /* Book data sets             */\n\n   excl_bslist_num = 0                 /* Bookshelf List Data Sets   */\n   excl_bslist_dsn. = \"\"               /* to be excluded             */\n\n   excl_shelf_num = 0                  /* Bookshelf Data Sets to be  */\n   excl_shelf_dsn. = \"\"                /* excluded                   */\n\n   excl_index_num = 0                  /* Bookshelf Index Data Sets  */\n   excl_index_dsn. = \"\"                /* to be excluded             */\n\n   excl_book_num = 0                   /* Book Data Sets to be       */\n   excl_book_dsn. = \"\"                 /* excluded                   */\n\n   special_shelf_num = 0               /* Special Bookshelves        */\n   special_shelf_dsn. = \"\"\n\n   report_dest = \"\"                    /* Report Output              */\n   report_dsn = \"\"\n   report_sysout = \"\"\n   report_alloc = \"\"\n   report_outdes = \"\"\n   report_depth = 60\n   report_pageno = 0\n   report_lineno = 0\n   report_title = \"\"\n   report_head. = \"\"\n   report_head.0 = 0\n   report_num = 0\n   report_line. = \"\"\n\n   exec_dsn = \"\"                       /* REXX EXEC Output           */\n   exec_alloc = \"\"\n   exec_num = 0\n   exec_line. = \"\"\n\n   cat_bslist_num = 0                  /* Cataloged Bookshelf List   */\n   cat_bslist_dsn. = \"\"                /* Data Sets                  */\n\n   cat_shelf_num = 0                   /* Cataloged Bookshelf Data   */\n   cat_shelf_dsn. = \"\"                 /* Sets                       */\n\n   cat_index_num = 0                   /* Cataloged Bookshelf Index  */\n   cat_index_dsn. = \"\"                 /* Data Sets                  */\n\n   cat_book_num = 0                    /* Cataloged Book Data Sets   */\n   cat_book_dsn. = \"\"\n\n   shelf_num = 0                       /* Referenced Bookshelf Table */\n   shelf_dsn. = \"\"\n   shelf_name. = \"\"\n   shelf_desc. = \"\"\n   shelf_special. = 0\n   shelf_index_dsn. = \"\"\n   shelf_index_name. = \"\"\n   shelf_book_num. = 0\n   shelf_book_dsn. = \"\"\n   shelf_book_name. = \"\"\n\n   index_num = 0                       /* Referenced Bookshelf Index */\n   index_dsn. = \"\"                     /* Table                      */\n   index_name. = \"\"\n   index_shelf_num. = 0\n   index_shelf_dsn. = \"\"\n   index_shelf_name. = \"\"\n\n   book_num = 0                        /* Referenced Book Table      */\n   book_dsn. = \"\"\n   book_name. = \"\"\n   book_title. = \"\"\n   book_docnum. = \"\"\n   book_shelf_num. = 0\n   book_shelf_dsn. = \"\"\n   book_shelf_name. = \"\"\n   book_shelf_special. = 0\n\n/*   Get arguments                                                   */\n\n   ARG cntlfile extra\n\n   IF extra \u00ac= \"\" THEN DO\n      SAY \"Extraneous parameters specified, execution terminated\"\n      EXIT 16\n      END\n\n/*   Get Control Table                                               */\n\n   SAY ET() \"- Get control table\"\n\n   CALL GETCNTL(cntlfile)\n\n/*   Initialize REXX EXEC                                            */\n\n   execline = \"/* REXX */\"\n   CALL EXECLINE execline\n\n/*   Get Cataloged Data Set Lists                                    */\n\n   SAY ET() \"- Get cataloged bookshelf lists\"\n   CALL CATBSLST\n\n   SAY ET() \"- Get cataloged bookshelves\"\n   CALL CATSHELF\n\n   SAY ET() \"- Get cataloged bookshelf indexes\"\n   CALL CATINDEX\n\n   SAY ET() \"- Get cataloged books\"\n   CALL CATBOOK\n\n/*   Build Bookshelf Table                                           */\n\n   SAY ET() \"- Build bookshelf table\"\n   DO list# = 1 to cat_bslist_num\n      CALL GETBKLST(cat_bslist_dsn.list#)\n      END\n\n/*   Build Index and Book Tables                                     */\n\n   SAY ET() \"- Build index and book tables\"\n   DO shelf# = 1 to shelf_num\n      CALL GETSHELF(shelf#)\n      END\n\n/*   Create Unreferenced Bookshelf List                              */\n\n   SAY ET() \"- Create Unreferenced Bookshelf List\"\n   CALL REFSHELF\n\n/*   Create Unreferenced Bookshelf Index List                        */\n\n   SAY ET() \"- Create Unreferenced Bookshelf Index List\"\n   CALL REFINDEX\n\n/*   Create Unreferenced Book List                                   */\n\n   SAY ET() \"- Create Unreferenced Book List\"\n   CALL REFBOOK\n\n/*   Create Special Bookshelf Updated Books List                     */\n\n   SAY ET() \"- Create Special Bookshelf Updated Book List\"\n   DO shelf# = 1 to special_shelf_num\n      CALL UPDSPEC(special_shelf_dsn.shelf#)\n      END\n\n/*   Complete Processing                                             */\n\n   SAY ET() \"- Write Reports\"\n   CALL RPTEND\n\n   SAY ET() \"- Write REXX EXEC\"\n   CALL EXECEND\n\n   SAY ET() \"- Processing Complete\"\n\n   EXIT\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Control Table                                               */\n/*                                                                   */\n/*********************************************************************/\n\nGETCNTL: PROCEDURE EXPOSE cat_bslist_mask_num cat_bslist_mask. ,\n                          cat_shelf_mask_num cat_shelf_mask. ,\n                          cat_index_mask_num cat_index_mask. ,\n                          cat_book_mask_num cat_book_mask. ,\n                          excl_bslist_num excl_bslist_dsn. ,\n                          excl_shelf_num excl_shelf_dsn. ,\n                          excl_index_num excl_index_dsn. ,\n                          excl_book_num excl_book_dsn. ,\n                          special_shelf_num special_shelf_dsn. ,\n                          report_dest report_dsn report_sysout ,\n                          report_alloc report_outdes report_depth ,\n                          exec_dsn exec_alloc\n\n   ARG cntlfile\n\n/*   Initialize stem variables                                       */\n\n   bkmcntl. = \"\"\n\n/*   Read control file                                               */\n\n   \"ALLOC FILE(BKMCNTL) REUSE SHR \",\n         \"DATASET('\"cntlfile\"')\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"ALLOC error for control file '\"cntlfile\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"EXECIO * DISKR BKMCNTL ( STEM bkmcntl. OPEN FINIS )\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"EXECIO error for control file '\"cntlfile\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"FREE FILE(BKMCNTL)\"\n\n/*   Parse control file, Build control table                         */\n\n   cntlerr = 0\n\n   DO cntl#=1 TO bkmcntl.0\n\n      cntlline = bkmcntl.cntl#\n\n      PARSE VAR cntlline stmt type \"=\" data\n      data = STRIP(data)\n\n      SELECT\n\n         WHEN stmt = \"CATALOG\" THEN\n\n            SELECT\n\n               WHEN type = \"BKLSHELF\" THEN DO\n                  cat_bslist_mask_num = cat_bslist_mask_num + 1\n                  cat_bslist_mask.cat_bslist_mask_num = data\n                  END\n\n               WHEN type = \"BKSHELF\" THEN DO\n                  cat_shelf_mask_num = cat_shelf_mask_num + 1\n                  cat_shelf_mask.cat_shelf_mask_num = data\n                  END\n\n               WHEN type = \"BKINDEX\" THEN DO\n                  cat_index_mask_num = cat_index_mask_num + 1\n                  cat_index_mask.cat_index_mask_num = data\n                  END\n\n               WHEN type = \"BOOK\" THEN DO\n                  cat_book_mask_num = cat_book_mask_num + 1\n                  cat_book_mask.cat_book_mask_num = data\n                  END\n\n               OTHERWISE DO\n                  SAY \"Invalid parameter type in control data -\" cntlline\n                  cntlerr = 1\n                  END\n\n               END\n\n         WHEN stmt = \"EXCLUDE\" THEN\n\n            SELECT\n\n               WHEN type = \"BKLSHELF\" THEN DO\n                  excl_bslist_num = excl_bslist_num + 1\n                  excl_bslist_dsn.excl_bslist_num = data\n                  END\n\n               WHEN type = \"BKSHELF\" THEN DO\n                  excl_shelf_num = excl_shelf_num + 1\n                  excl_shelf_dsn.excl_shelf_num = data\n                  END\n\n               WHEN type = \"BKINDEX\" THEN DO\n                  excl_index_num = excl_index_num + 1\n                  excl_index_dsn.excl_index_num = data\n                  END\n\n               WHEN type = \"BOOK\" THEN DO\n                  excl_book_num = excl_book_num + 1\n                  excl_book_dsn.excl_book_num = data\n                  END\n\n               OTHERWISE DO\n                  SAY \"Invalid parameter type in control data -\" cntlline\n                  cntlerr = 1\n                  END\n\n               END\n\n         WHEN stmt = \"SPECIAL\" THEN\n\n            SELECT\n\n               WHEN type = \"BKSHELF\" THEN DO\n                  special_shelf_num = special_shelf_num + 1\n                  special_shelf_dsn.special_shelf_num = data\n                  END\n\n               OTHERWISE DO\n                  SAY \"Invalid parameter type in control data -\" cntlline\n                  cntlerr = 1\n                  END\n\n               END\n\n         WHEN stmt = \"REPORT\" THEN\n\n            SELECT\n\n               WHEN type = \"DSN\" THEN DO\n                  report_dest = \"DATASET\"\n                  report_dsn = data\n                  END\n\n               WHEN type = \"SYSOUT\" THEN DO\n                  report_dest = \"SYSOUT\"\n                  report_sysout = data\n                  END\n\n               WHEN type = \"TERM\" THEN DO\n                  report_dest = \"TERMINAL\"\n                  IF data \u00ac= \"\" THEN DO\n                     SAY \"Extraneous control data -\" cntlline\n                     cntlerr = 1\n                     END\n                  END\n\n               WHEN type = \"ALLOC\" THEN DO\n                  If report_alloc = \"\" THEN\n                     report_alloc = data\n                  ELSE\n                     report_alloc = report_alloc || \" \" || data\n                  END\n\n               WHEN type = \"OUTDES\" THEN DO\n                  If report_outdes = \"\" THEN\n                     report_outdes = data\n                  ELSE\n                     report_outdes = report_outdes || \" \" || data\n                  END\n\n               WHEN type = \"DEPTH\" THEN DO\n                  report_depth = data\n                  END\n\n               OTHERWISE DO\n                  SAY \"Invalid parameter type in control data -\" cntlline\n                  cntlerr = 1\n                  END\n\n               END\n\n         WHEN stmt = \"EXEC\" THEN\n\n            SELECT\n\n               WHEN type = \"DSN\" THEN DO\n                  exec_dsn = data\n                  END\n\n               WHEN type = \"ALLOC\" THEN DO\n                  If exec_alloc = \"\" THEN\n                     exec_alloc = data\n                  ELSE\n                     exec_alloc = exec_alloc || \" \" || data\n                  END\n\n               OTHERWISE DO\n                  SAY \"Invalid parameter type in control data -\" cntlline\n                  cntlerr = 1\n                  END\n\n               END\n\n         OTHERWISE DO\n            SAY \"Invalid statement in control data -\" cntlline\n            cntlerr = 1\n            END\n\n         END\n\n      END\n\n   IF cntlerr THEN DO\n      SAY \"Errors in control file, execution terminated\"\n      EXIT 16\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Cataloged Bookshelf List Data Set Names                     */\n/*                                                                   */\n/*********************************************************************/\n\nCATBSLST: PROCEDURE EXPOSE cat_bslist_mask_num cat_bslist_mask. ,\n                           cat_bslist_num cat_bslist_dsn. ,\n                           excl_bslist_num excl_bslist_dsn.\n\n/*   Process each mask                                               */\n\n   DO mask# = 1 TO cat_bslist_mask_num\n\n      cat_dsn. = \"\"\n      cat_dsn.0 = 0\n\n      CALL CATLIST(cat_bslist_mask.mask#)\n\n/*   Process each data set                                           */\n\n      DO dsn# = 1 TO cat_dsn.0\n\n/*   Check for data set excluded                                     */\n\n         DO i = 1 TO excl_bslist_num UNTIL excl_bslist_dsn.i = cat_dsn.dsn#\n            END\n         IF i <= excl_bslist_num THEN\n            ITERATE\n\n/*   Check for data set already in list                              */\n\n         IF mask# > 1 THEN DO\n            traceopt = TRACE(\"OFF\")\n            DO i = 1 TO cat_bslist_num UNTIL cat_bslist_dsn.i = cat_dsn.dsn#\n               END\n            x = TRACE(traceopt)\n            IF i <= cat_bslist_num THEN\n               ITERATE\n            END\n\n/*   Add data set to list                                            */\n\n         cat_bslist_num = cat_bslist_num + 1\n         cat_bslist_dsn.cat_bslist_num = cat_dsn.dsn#\n\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Cataloged Bookshelf Data Set Names                          */\n/*                                                                   */\n/*********************************************************************/\n\nCATSHELF: PROCEDURE EXPOSE cat_shelf_mask_num cat_shelf_mask. ,\n                           cat_shelf_num cat_shelf_dsn. ,\n                           excl_shelf_num excl_shelf_dsn.\n\n/*   Process each mask                                               */\n\n   DO mask# = 1 TO cat_shelf_mask_num\n\n      cat_dsn. = \"\"\n      cat_dsn.0 = 0\n\n      CALL CATLIST(cat_shelf_mask.mask#)\n\n/*   Process each data set                                           */\n\n      DO dsn# = 1 TO cat_dsn.0\n\n/*   Check for data set excluded                                     */\n\n         DO i = 1 TO excl_shelf_num UNTIL excl_shelf_dsn.i = cat_dsn.dsn#\n            END\n         IF i <= excl_shelf_num THEN\n            ITERATE\n\n/*   Check for data set already in list                              */\n\n         IF mask# > 1 THEN DO\n            traceopt = TRACE(\"OFF\")\n            DO i = 1 TO cat_shelf_num UNTIL cat_shelf_dsn.i = cat_dsn.dsn#\n               END\n            x = TRACE(traceopt)\n            IF i <= cat_shelf_num THEN\n               ITERATE\n            END\n\n/*   Add data set to list                                            */\n\n         cat_shelf_num = cat_shelf_num + 1\n         cat_shelf_dsn.cat_shelf_num = cat_dsn.dsn#\n\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Cataloged Bookshelf Index Data Set Names                    */\n/*                                                                   */\n/*********************************************************************/\n\nCATINDEX: PROCEDURE EXPOSE cat_index_mask_num cat_index_mask. ,\n                           cat_index_num cat_index_dsn. ,\n                           excl_index_num excl_index_dsn.\n\n/*   Process each mask                                               */\n\n   DO mask# = 1 TO cat_index_mask_num\n\n      cat_dsn. = \"\"\n      cat_dsn.0 = 0\n\n      CALL CATLIST(cat_index_mask.mask#)\n\n/*   Process each data set                                           */\n\n      DO dsn# = 1 TO cat_dsn.0\n\n/*   Check for data set excluded                                     */\n\n         DO i = 1 TO excl_index_num UNTIL excl_index_dsn.i = cat_dsn.dsn#\n            END\n         IF i <= excl_index_num THEN\n            ITERATE\n\n/*   Check for data set already in list                              */\n\n         IF mask# > 1 THEN DO\n            traceopt = TRACE(\"OFF\")\n            DO i = 1 TO cat_index_num UNTIL cat_index_dsn.i = cat_dsn.dsn#\n               END\n            x = TRACE(traceopt)\n            IF i <= cat_index_num THEN\n               ITERATE\n            END\n\n/*   Add data set to list                                            */\n\n         cat_index_num = cat_index_num + 1\n         cat_index_dsn.cat_index_num = cat_dsn.dsn#\n\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Cataloged Book Data Set Names                               */\n/*                                                                   */\n/*********************************************************************/\n\nCATBOOK: PROCEDURE EXPOSE cat_book_mask_num cat_book_mask. ,\n                          cat_book_num cat_book_dsn. ,\n                          excl_book_num excl_book_dsn.\n\n/*   Process each mask                                               */\n\n   DO mask# = 1 TO cat_book_mask_num\n\n      cat_dsn. = \"\"\n      cat_dsn.0 = 0\n\n      CALL CATLIST(cat_book_mask.mask#)\n\n/*   Process each data set                                           */\n\n      DO dsn# = 1 TO cat_dsn.0\n\n/*   Check for data set excluded                                     */\n\n         DO i = 1 TO excl_book_num UNTIL excl_book_dsn.i = cat_dsn.dsn#\n            END\n         IF i <= excl_book_num THEN\n            ITERATE\n\n/*   Check for data set already in list                              */\n\n         IF mask# > 1 THEN DO\n            traceopt = TRACE(\"OFF\")\n            DO i = 1 TO cat_book_num UNTIL cat_book_dsn.i = cat_dsn.dsn#\n               END\n            x = TRACE(traceopt)\n            IF i <= cat_book_num THEN\n               ITERATE\n            END\n\n/*   Add data set to list                                            */\n\n         cat_book_num = cat_book_num + 1\n         cat_book_dsn.cat_book_num = cat_dsn.dsn#\n\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get List of Cataloged Data Set Names                            */\n/*                                                                   */\n/*********************************************************************/\n\nCATLIST: PROCEDURE EXPOSE cat_dsn.\n\n   ARG mask\n\n/*   Set command environment to ISPEXEC                              */\n\n   cmdenv = ADDRESS()\n\n   \"SUBCOM ISPEXEC\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"ISPF must be active to run this exec\"\n      EXIT 8\n      END\n\n   ADDRESS ISPEXEC\n\n/*   Initialize data set list-ID                                     */\n\n   \"LMDINIT LISTID(listid) LEVEL(\"mask\")\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"LMDINIT error for '\"mask\"' - RC =\" rc\n      EXIT 16\n      END\n\n   dsn = \"\"\n\n/*   Add each data set to list                                       */\n\n   DO WHILE rc = 0\n\n      \"LMDLIST LISTID(\"listid\") OPTION(LIST) DATASET(dsn)\"\n      IF rc = 4 | rc = 8 THEN\n         LEAVE\n      IF rc \u00ac= 0 THEN DO\n         SAY \"LMDLIST error for '\"mask\"' - RC =\" rc\n         EXIT 16\n         END\n\n      i = cat_dsn.0 + 1\n      cat_dsn.0 = i\n      cat_dsn.i = dsn\n\n      END\n\n/*   Free data set list-ID                                           */\n\n   \"LMDFREE LISTID(\"listid\")\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"LMDFREE error for '\"mask\"' - RC =\" rc\n      EXIT 16\n      END\n\n/*   Reset caller's command environment                              */\n\n   ADDRESS VALUE cmdenv\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Bookshelf List                                              */\n/*                                                                   */\n/*********************************************************************/\n\nGETBKLST: PROCEDURE EXPOSE shelf_num shelf_dsn. ,\n                           shelf_name. shelf_desc. shelf_special. ,\n                           special_shelf_num special_shelf_dsn.\n\n   ARG bklist_dsn\n\n/*   Initialize stem variables                                       */\n\n   bklist_rec. = \"\"\n\n/*   Read bookshelf list file                                        */\n\n   \"ALLOC FILE(BKLSHELF) REUSE SHR \",\n         \"DATASET('\"bklist_dsn\"')\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"ALLOC error for bookshelf list data set '\"bklist_dsn\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"EXECIO * DISKR BKLSHELF ( STEM bklist_rec. OPEN FINIS )\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"EXECIO error for bookshelf list data set '\"bklist_dsn\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"FREE FILE(BKLSHELF)\"\n\n/*   Process each bookshelf list entry                               */\n\n   DO rec#=1 TO bklist_rec.0\n\n      record = bklist_rec.rec#\n\n/*   Parse bookshelf list entry                                      */\n\n      PARSE VAR record keyword name dsn desc\n\n      IF keyword \u00ac= \"SHELF\" THEN DO\n         SAY \"Error in Bookshelf List '\"bklist_dsn\"'\",\n             \"Invalid input record -\" record\n         ITERATE\n         END\n\n/*   Find existing Bookshelf Table entry                             */\n\n      traceopt = TRACE(\"OFF\")\n      DO shelf# = 1 TO shelf_num UNTIL dsn = shelf_dsn.shelf#\n         END\n      x = TRACE(traceopt)\n\n      IF shelf# > shelf_num THEN DO\n\n/*   Create new Bookshelf Table entry                                */\n\n         shelf_num = shelf_num + 1\n         shelf_dsn.shelf_num = dsn\n         shelf_name.shelf_num = name\n         shelf_desc.shelf_num = desc\n\n/*   Check for special bookshelf                                     */\n\n         DO i = 1 TO special_shelf_num ,\n               UNTIL special_shelf_dsn.i = shelf_dsn.shelf_num\n            END\n         IF i <= special_shelf_num THEN\n            shelf_special.shelf_num = 1\n\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Get Bookshelf                                                   */\n/*                                                                   */\n/*********************************************************************/\n/*                                                                   */\n/*   Warning - Although The parsing for this routine is somewhat     */\n/*             dependant on the order of the Bookshelf records,      */\n/*             no checking for this order is done.  In particular,   */\n/*             the BKMDSN keyword for each book must follow all      */\n/*             other keywords for which data is used for the book.   */\n/*                                                                   */\n/*********************************************************************/\n\nGETSHELF: PROCEDURE EXPOSE shelf_num shelf_dsn. ,\n                           shelf_name. shelf_desc. shelf_special. ,\n                           shelf_index_dsn. shelf_index_name. ,\n                           shelf_book_num. shelf_book_dsn. ,\n                           shelf_book_name. ,\n                           index_num index_dsn. ,\n                           index_name. ,\n                           index_shelf_num. index_shelf_dsn. ,\n                           index_shelf_name. ,\n                           book_num book_dsn. ,\n                           book_name. book_title. book_docnum. ,\n                           book_shelf_num. book_shelf_dsn. ,\n                           book_shelf_name. book_shelf_special.\n\n   ARG shelf#\n\n/*   Initialize stem variables                                       */\n\n   shelf_rec. = \"\"\n\n   dsn = \"\"\n   name = \"\"\n   title = \"\"\n   docnum = \"\"\n\n/*   Read bookshelf file                                             */\n\n   \"ALLOC FILE(BKSHELF) REUSE SHR \",\n         \"DATASET('\"shelf_dsn.shelf#\"')\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"ALLOC error for bookshelf data set '\"shelf_dsn.shelf#\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"EXECIO * DISKR BKSHELF ( STEM shelf_rec. OPEN FINIS )\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"EXECIO error for bookshelf data set '\"shelf_dsn.shelf#\"' - RC=\"rc\n      EXIT 8\n      END\n\n   \"FREE FILE(BKSHELF)\"\n\n/*   Process each bookshelf entry                                    */\n\n   DO rec#=1 TO shelf_rec.0\n\n      record = shelf_rec.rec#\n\n/*   Parse bookshelf entry                                           */\n\n      keyword = SUBSTR(record,1,2)\n      IF keyword = \"SH\" | keyword = \"ST\" THEN\n         data = STRIP(SUBSTR(record,3))\n      ELSE\n         PARSE VAR record keyword \"=\" data\n\n      SELECT\n         WHEN keyword = \"SH\" THEN\n            docnum = data\n\n         WHEN keyword = \"ST\" THEN\n            title = data\n\n         WHEN keyword = \"BKSHELF\" THEN\n            IF data \u00ac= shelf_name.shelf# THEN\n               SAY \"Bookshelf name does not match bookshelf list -\" ,\n                   shelf_dsn.shelf#\n\n         WHEN keyword = \"BKSMDSN\" THEN\n            IF data \u00ac= shelf_dsn.shelf# THEN\n               SAY \"Bookshelf data set name does not match bookshelf list -\" ,\n                   shelf_dsn.shelf#\n\n         WHEN keyword = \"BKSTITLE\" THEN\n            IF data \u00ac= shelf_desc.shelf# THEN\n               SAY \"Bookshelf title does not match bookshelf list -\" ,\n                   shelf_dsn.shelf#\n\n         WHEN keyword = \"BKSINDEX\" THEN\n            shelf_index_name.shelf# = data\n\n         WHEN keyword = \"BKSIMDSN\" THEN\n            shelf_index_dsn.shelf# = data\n\n         WHEN keyword = \"BKNAME\" THEN\n            name = data\n\n         WHEN keyword = \"BKMDSN\" THEN\n            dsn = data\n\n         WHEN keyword = \"BKSDATETIME\" THEN NOP\n         WHEN keyword = \"BKIDATETIME\" THEN NOP\n         WHEN keyword = \"BKSLEXIS\" THEN NOP\n         WHEN keyword = \"BKIBOOKS\" THEN NOP\n         WHEN keyword = \"DOSNAME\" THEN NOP\n         WHEN keyword = \"BKDATETIME\" THEN NOP\n         WHEN keyword = \"BKFLAG\" THEN NOP\n\n         OTHERWISE DO\n            SAY \"Error in Bookshelf '\"shelf_dsn.shelf#\"'\",\n                \"Invalid input record -\" record\n            ITERATE\n            END\n\n         END\n\n/*   Check for Book information complete                             */\n\n      IF keyword = \"BKMDSN\" THEN DO\n\n/*   Add book to bookshelf/book list                                 */\n\n         shelf_book_num.shelf# = shelf_book_num.shelf# + 1\n         i = shelf_book_num.shelf#\n         shelf_book_dsn.shelf#.i = dsn\n         shelf_book_name.shelf#.i = name\n\n/*   Find existing Book Table entry                                  */\n\n         traceopt = TRACE(\"OFF\")\n         DO book# = 1 TO book_num UNTIL dsn = book_dsn.book#\n            END\n         x = TRACE(traceopt)\n\n/*   Create new Book Table entry                                     */\n\n         IF book# > book_num THEN DO\n            book_num = book_num + 1\n            book_dsn.book_num = dsn\n            book_name.book_num = name\n            book_title.book_num = title\n            book_docnum.book_num = docnum\n            END\n\n/*   Add bookshelf name to book/bookshelf list                       */\n\n         book_shelf_num.book# = book_shelf_num.book# + 1\n         i = book_shelf_num.book#\n         book_shelf_dsn.book#.i = shelf_dsn.shelf#\n         book_shelf_name.book#.i = shelf_name.shelf#\n         book_shelf_special.book#.i = shelf_special.shelf#\n\n/*   End of parse - Reset book information variables                 */\n\n         dsn = \"\"\n         name = \"\"\n         title = \"\"\n         docnum = \"\"\n\n         END\n\n      END\n\n/*   Check for Bookshelf Index specified                             */\n\n   IF shelf_index_dsn.shelf# \u00ac= \"\" THEN DO\n\n/*   Find existing Bookshelf Index Table entry                       */\n\n      traceopt = TRACE(\"OFF\")\n      DO index# = 1 TO index_num UNTIL index_dsn.index# = shelf_index_dsn.shelf#\n         END\n      x = TRACE(traceopt)\n\n/*   Create new Bookshelf Index Table entry                          */\n\n      IF index# > index_num THEN DO\n         index_num = index_num + 1\n         index_dsn.index_num = shelf_index_dsn.shelf#\n         index_name.index_num = shelf_index_name.shelf#\n         END\n\n/*   Add bookshelf name to index/bookshelf list                      */\n\n      index_shelf_num.index# = index_shelf_num.index# + 1\n      i = index_shelf_num.index#\n      index_shelf_dsn.index#.i = shelf_dsn.shelf#\n      index_shelf_name.index#.i = shelf_name.shelf#\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Create Unreferenced Bookshelf List                              */\n/*                                                                   */\n/*********************************************************************/\n\nREFSHELF: PROCEDURE EXPOSE cat_shelf_num cat_shelf_dsn. ,\n                           shelf_num shelf_dsn. ,\n                           report_depth report_pageno report_lineno ,\n                           report_title report_num report_line. ,\n                           exec_dsn exec_num exec_line.\n\n/*   Process each cataloged bookshelf data set                       */\n\n   CALL RPTHEAD \"Unreferenced Bookshelves to be Deleted\", ,\n                \"   Bookshelf Data Set Name\"\n\n   DO shelf#=1 TO cat_shelf_num\n\n/*   Check for bookshelf referenced                                  */\n\n      traceopt = TRACE(\"OFF\")\n      DO i = 1 TO shelf_num UNTIL shelf_dsn.i = cat_shelf_dsn.shelf#\n         END\n      x = TRACE(traceopt)\n\n/*   Indicate unreferenced bookshelf to be deleted                   */\n\n      IF i > shelf_num THEN DO\n         rptline = \"   \" || cat_shelf_dsn.shelf#\n         CALL RPTLINE rptline\n         execline = \"\"\"DELETE '\" || cat_shelf_dsn.shelf# || \"'\"\"\"\n         CALL EXECLINE execline\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Create Unreferenced Bookshelf Index List                        */\n/*                                                                   */\n/*********************************************************************/\n\nREFINDEX: PROCEDURE EXPOSE cat_index_num cat_index_dsn. ,\n                           index_num index_dsn. ,\n                           report_depth report_pageno report_lineno ,\n                           report_title report_num report_line. ,\n                           exec_dsn exec_num exec_line.\n\n/*   Process each cataloged bookshelf index data set                 */\n\n   CALL RPTHEAD \"Unreferenced Bookshelf Indexes to be Deleted\", ,\n                \"   Bookshelf Index Data Set Name\"\n\n   DO index#=1 TO cat_index_num\n\n/*   Check for bookshelf index referenced                            */\n\n      traceopt = TRACE(\"OFF\")\n      DO i = 1 TO index_num UNTIL index_dsn.i = cat_index_dsn.index#\n         END\n      x = TRACE(traceopt)\n\n/*   Indicate unreferenced bookshelf index to be deleted             */\n\n      IF i > index_num THEN DO\n         rptline = \"   \" || cat_index_dsn.index#\n         CALL RPTLINE rptline\n         execline = \"\"\"DELETE '\" || cat_index_dsn.index# || \"'\"\"\"\n         CALL EXECLINE execline\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Create Unreferenced Book List                                   */\n/*                                                                   */\n/*********************************************************************/\n\nREFBOOK: PROCEDURE EXPOSE cat_book_num cat_book_dsn. ,\n                          book_num book_dsn. ,\n                          report_depth report_pageno report_lineno ,\n                          report_title report_num report_line. ,\n                          exec_dsn exec_num exec_line.\n\n/*   Process each cataloged book data set                            */\n\n   CALL RPTHEAD \"Unreferenced Books to be Deleted\", ,\n                \"   Book Data Set Name\"\n\n   DO book#=1 TO cat_book_num\n\n/*   Check for book referenced                                       */\n\n      traceopt = TRACE(\"OFF\")\n      DO i = 1 TO book_num UNTIL book_dsn.i = cat_book_dsn.book#\n         END\n      x = TRACE(traceopt)\n\n/*   Indicate unreferenced book to be deleted                        */\n\n      IF i > book_num THEN DO\n         rptline = \"   \" || cat_book_dsn.book#\n         CALL RPTLINE rptline\n         execline = \"\"\"DELETE '\" || cat_book_dsn.book# || \"'\"\"\"\n         CALL EXECLINE execline\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Create Special Bookshelf Updated Books List                     */\n/*                                                                   */\n/*********************************************************************/\n\nUPDSPEC: PROCEDURE EXPOSE shelf_num shelf_dsn. ,\n                          shelf_name. shelf_desc. shelf_special. ,\n                          shelf_index_dsn. shelf_index_name. ,\n                          shelf_book_num. shelf_book_dsn. ,\n                          shelf_book_name. ,\n                          book_num book_dsn. ,\n                          book_name. book_title. book_docnum. ,\n                          book_shelf_num. book_shelf_dsn. ,\n                          book_shelf_name. book_shelf_special. ,\n                          report_depth report_pageno report_lineno ,\n                          report_title report_num report_line.\n\n   ARG special_shelf_dsn\n\n/*   Find special bookshelf in bookshelf table                       */\n\n   traceopt = TRACE(\"OFF\")\n   DO shelf# = 1 TO shelf_num UNTIL shelf_dsn.shelf# = special_shelf_dsn\n      END\n   x = TRACE(traceopt)\n\n   IF shelf# > shelf_num THEN DO\n      SAY \"Special bookshelf\" special_shelf_dsn \"was not found\"\n      RETURN\n      END\n\n   title = \"Updated Books for Special Bookshelf - \" || special_shelf_dsn\n   CALL RPTHEAD title, ,\n                \"   Book Name     Data Set Name\"\n\n/*   Check for each book in a non-special bookshelf                  */\n/*   If book is not in any non-special bookshelf, then report it     */\n\n   DO book# = 1 TO shelf_book_num.shelf#\n\n      traceopt = TRACE(\"OFF\")\n      DO i = 1 TO book_num UNTIL book_dsn.i = shelf_book_dsn.shelf#.book#\n         END\n      x = TRACE(traceopt)\n      IF i > book_num THEN DO\n         SAY \"BKMGRMNT EXEC error - Book in shelf is not found\"\n         SAY \"   Shelf DSN = '\"special_shelf_dsn\"'\"\n         SAY \"   Book DSN = '\"shelf_book_dsn.shelf#.book#\"'\"\n         EXIT\n         END\n\n      traceopt = TRACE(\"OFF\")\n      DO j = 1 TO book_shelf_num.i WHILE book_shelf_special.i.j\n         END\n      x = TRACE(traceopt)\n\n      IF j > book_shelf_num.i THEN DO\n         rptline = \"   \" || LEFT(shelf_book_name.shelf#.book#,8) || ,\n                   \"   \" || shelf_book_dsn.shelf#.book#\n         CALL RPTLINE rptline\n         END\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Set Report Heading                                              */\n/*                                                                   */\n/*********************************************************************/\n\nRPTHEAD: PROCEDURE EXPOSE report_depth report_pageno report_lineno ,\n                          report_title report_head. ,\n                          report_num report_line.\n\n/*   Get title                                                       */\n\n   report_title = ARG(1)\n\n/*   Get headings                                                    */\n\n   report_head. = \"\"\n   report_head.0 = ARG() - 1\n   DO head# = 1 TO report_head.0\n      report_head.head# = ARG(report_head.0+1)\n      END\n\n/*   Print first heading                                             */\n\n   report_pageno = 0\n   report_lineno = 0\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Add Line to Report                                              */\n/*                                                                   */\n/*********************************************************************/\n\nRPTLINE: PROCEDURE EXPOSE report_depth report_pageno report_lineno ,\n                          report_title report_head. ,\n                          report_num report_line.\n\n   rptline = ARG(1)\n\n   skip = TRANSLATE(ARG(2))\n   IF skip = \"\" THEN\n      skip = \"SINGLE\"\n\n/*   Add carriage control to report line                             */\n\n   SELECT\n      WHEN skip = \"SINGLE\" THEN DO\n         cc = \" \"\n         report_lineno = report_lineno + 1\n         END\n      WHEN skip = \"DOUBLE\" THEN DO\n         cc = \"0\"\n         report_lineno = report_lineno + 2\n         END\n      WHEN skip = \"TRIPLE\" THEN DO\n         cc = \"-\"\n         report_lineno = report_lineno + 3\n         END\n      WHEN skip = \"NONE\" THEN DO\n         cc = \"+\"\n         END\n      WHEN skip = \"PAGE\" THEN DO\n         CALL RPTEJECT\n         cc = \" \"\n         report_lineno = report_lineno + 1\n         END\n      OTHERWISE DO\n         cc = \" \"\n         report_lineno = report_lineno + 1\n         END\n      END\n\n/*   Check for end of page                                           */\n\n   IF report_pageno = 0 | report_lineno > report_depth THEN DO\n      CALL RPTEJECT\n      cc = \" \"\n      report_lineno = report_lineno + 1\n      END\n\n/*   Add line to report array                                        */\n\n   report_num = report_num + 1\n   report_line.report_num = cc || rptline\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Start New Report Page                                           */\n/*                                                                   */\n/*********************************************************************/\n\nRPTEJECT: PROCEDURE EXPOSE report_depth report_pageno report_lineno ,\n                           report_title report_head. ,\n                           report_num report_line.\n\n/*   Add title to report array                                       */\n\n   report_pageno = report_pageno + 1\n\n   report_num = report_num + 1\n   report_line.report_num = \"1\" || CENTER(report_title,98) || ,\n                            DATE() || \"  \" || TIME() || ,\n                            \"     PAGE \" || report_pageno\n\n   report_num = report_num + 1\n   report_line.report_num = \" \"\n\n   report_lineno = 2\n\n/*   Add headings to report array                                    */\n\n   IF report_head.0 > 0 THEN DO\n\n      DO head# = 1 TO report_head.0\n         report_num = report_num + 1\n         report_line.report_num = \" \" || report_head.head#\n         report_lineno = report_lineno + 1\n         END\n\n      report_num = report_num + 1\n      report_line.report_num = \" \"\n      report_lineno = report_lineno + 1\n\n      END\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Write Report                                                    */\n/*                                                                   */\n/*********************************************************************/\n\nRPTEND: PROCEDURE EXPOSE report_dest report_dsn report_sysout ,\n                         report_alloc report_outdes ,\n                         report_num report_line.\n\n   IF report_num = 0 THEN DO\n      SAY \"No reports produced\"\n      RETURN\n      END\n\n/*   Allocate report data set                                        */\n\n   SELECT\n\n      WHEN report_dest = \"DSN\" THEN DO\n         \"ALLOC FILE(BKMRPT) REUSE \",\n               \"DATASET('\"report_dsn\"') \",\n               report_alloc\n         IF rc \u00ac= 0 THEN DO\n            SAY \"ALLOC error for report data set '\"report_dsn\"' - RC=\"rc\n            EXIT 8\n            END\n         END\n\n      WHEN report_dest = \"SYSOUT\" THEN DO\n         IF report_outdes \u00ac= \"\" THEN DO\n            \"OUTDES BKMGROUT REUSE \"report_outdes\n            IF rc \u00ac= 0 THEN DO\n               SAY \"OUTDES error for report data set - RC=\"rc\n               EXIT 8\n               END\n            \"ALLOC FILE(BKMRPT) REUSE SHR \",\n                  \"SYSOUT(\"report_sysout\") \",\n                  \"OUTDES(BKMGROUT) \",\n                  \"RECFM(F B A) LRECL(133)\"\n            IF rc \u00ac= 0 THEN DO\n               SAY \"ALLOC error for report data set (SYSOUT) - RC=\"rc\n               EXIT 8\n               END\n            END\n         ELSE DO\n            \"ALLOC FILE(BKMRPT) REUSE SHR \",\n                  \"SYSOUT(\"report_sysout\") \",\n                  \"RECFM(F B A) LRECL(133)\"\n            IF rc \u00ac= 0 THEN DO\n               SAY \"ALLOC error for report data set (SYSOUT) - RC=\"rc\n               EXIT 8\n               END\n            END\n         END\n\n      WHEN report_dest = \"TERMINAL\" THEN DO\n         \"ALLOC FILE(BKMRPT) REUSE SHR \",\n               \"DATASET(*) \",\n               \"RECFM(F B A) LRECL(133)\"\n         IF rc \u00ac= 0 THEN DO\n            SAY \"ALLOC error for report data set (terminal) - RC=\"rc\n            EXIT 8\n            END\n         END\n\n      OTHERWISE RETURN\n\n      END\n\n/*   Write output report                                             */\n\n   \"EXECIO\" report_num \"DISKW BKMRPT ( STEM report_line. OPEN FINIS )\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"EXECIO error for report data set - RC=\"rc\n      EXIT 8\n      END\n\n/*   Free report data set                                            */\n\n   x = MSG(\"OFF\")\n   \"FREE FILE(BKMRPT) OUTDES(BKMGROUT)\"\n   x = MSG(\"ON\")\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Add Line to REXX EXEC                                           */\n/*                                                                   */\n/*********************************************************************/\n\nEXECLINE: PROCEDURE EXPOSE exec_dsn exec_num exec_line.\n\n   execline = ARG(1)\n\n/*   Add line to report array                                        */\n\n   exec_num = exec_num + 1\n   exec_line.exec_num = execline\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Write REXX EXEC                                                 */\n/*                                                                   */\n/*********************************************************************/\n\nEXECEND: PROCEDURE EXPOSE exec_dsn exec_alloc ,\n                          exec_num exec_line.\n\n   IF exec_dsn = \"\" THEN DO\n      SAY \"No REXX EXEC produced\"\n      RETURN\n      END\n\n/*   Allocate REXX EXEC data set                                     */\n\n   \"ALLOC FILE(BKMEXEC) REUSE \",\n         \"DATASET('\"exec_dsn\"') \",\n         exec_alloc\n   IF rc \u00ac= 0 THEN DO\n      SAY \"ALLOC error for REXX EXEC data set '\"exec_dsn\"' - RC=\"rc\n      EXIT 8\n      END\n\n/*   Write output REXX EXEC                                          */\n\n   \"EXECIO\" exec_num \"DISKW BKMEXEC ( STEM exec_line. OPEN FINIS )\"\n   IF rc \u00ac= 0 THEN DO\n      SAY \"EXECIO error for REXX EXEC data set - RC=\"rc\n      EXIT 8\n      END\n\n/*   Free REXX EXEC data set                                         */\n\n   x = MSG(\"OFF\")\n   \"FREE FILE(BKMEXEC)\"\n   x = MSG(\"ON\")\n\n   RETURN\n\n/*********************************************************************/\n/*                                                                   */\n/*   Format Elapsed Time                                             */\n/*                                                                   */\n/*********************************************************************/\n\nET: PROCEDURE\n\n   e_time = TIME(\"E\")\n\n   e_min = TRUNC(e_time/60)\n   e_sec = e_time-(e_min*60)\n\n   e_format = FORMAT(e_min,4) || \":\" || RIGHT(FORMAT(e_sec,,2),5,\"0\")\n\n   RETURN e_format\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNTL": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x95\\x00O\\x00\\x98\\x07\\x9f\\x15D\\x00\\x13\\x00\\x0c\\x00\\x00\\xe3\\xc3\\xc8\\xf9\\xf7\\xf8\\xf4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1995-01-04T00:00:00", "modifydate": "1998-03-20T15:44:00", "lines": 19, "newlines": 12, "modlines": 0, "user": "TCH9784"}, "text": "CATALOG BKLSHELF=BKMGR.**.BKLSHELF\nCATALOG BKSHELF=BKMGR.**.BKSHELF\nCATALOG BKINDEX=BKMGR.**.BKINDEX\nCATALOG BOOK=BKMGR.**.BOOK\nEXCLUDE BKSHELF=BKMGR.BPXMAN00.BKSHELF\nEXCLUDE BKINDEX=BKMGR.BPXMAN00.BKINDEX\nEXCLUDE BOOK=BKMGR.BPXA5M00.BOOK\nEXCLUDE BOOK=BKMGR.BPXA7M00.BOOK\nEXCLUDE BOOK=BKMGR.BPXA8M00.BOOK\nEXCLUDE BOOK=BKMGR.BPXB1M00.BOOK\nSPECIAL BKSHELF=BKMGR.ALLIBM.BKSHELF\nSPECIAL BKSHELF=BKMGR.DB2CODES.BKSHELF\nSPECIAL BKSHELF=BKMGR.MESSAGES.BKSHELF\nSPECIAL BKSHELF=BKMGR.MVSCODES.BKSHELF\nREPORT SYSOUT=A\nREPORT OUTDES=DEST(R5805)\nREPORT OUTDES=NOTIFY(TCH9784)\nEXEC DSN=TCH9784.BKMGR.EXEC(CLEANUP)\nEXEC ALLOC=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x07\\x9f\\x00\\x98\\x07\\x9f\\x15B\\x00\\x10\\x00\\x10\\x00\\x00\\xe3\\xc3\\xc8\\xf9\\xf7\\xf8\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-20T00:00:00", "modifydate": "1998-03-20T15:42:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "TCH9784"}, "text": "//TCH03BKM JOB 45-SS-AMF-00SS,HENNESS-BKMGRMNT,\n//   CLASS=I,MSGCLASS=X,MSGLEVEL=(1,1),TIME=1440\n//*\n//BKMGRMNT EXEC PGM=IKJEFT01,DYNAMNBR=25\n//SYSEXEC  DD  DSN=TCH9784.BKMGR.EXEC,DISP=SHR\n//ISPPROF  DD  DSN=TCH9784.ISPF.ISPPROFB,DISP=OLD\n//ISPPLIB  DD  DSN=SYS1.ISPPLIB,DISP=SHR\n//ISPMLIB  DD  DSN=SYS1.ISPMLIB,DISP=SHR\n//ISPSLIB  DD  DSN=SYS1.ISPSLIB,DISP=SHR\n//ISPTLIB  DD  DSN=SYS1.ISPTLIB,DISP=SHR\n//SYSTSPRT DD  SYSOUT=*\n//SYSABEND DD  SYSOUT=*\n//ABNLDUMP DD  DUMMY\n//SYSTSIN  DD   *\n ISPSTART CMD(%BKMGRMNT 'BKMGR.MAINT.EXEC(CNTL)')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSG": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x05\\x1f\\x01\\x00$?\\x19\\t\\x00 \\x00 \\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-02-20T00:00:00", "modifydate": "2000-08-30T19:09:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "WSBG"}, "text": "From - Wed Feb 18 22:43:59 1998\nReceived: from out1.ibm.net \u00dd165.87.194.252\u00a8 by in1.ibm.net id 887829950.34830-1\nReceived: from Your (slip166-72-91-185.va.us.ibm.net \u00dd166.72.91.185\u00a8) by out1.ib\nMessage-ID: <34EB35DE.432A@ibm.net>\nDate: Wed, 18 Feb 1998 14:26:22 -0500\nX-UIDL: 887856446.003\nFrom: Tim Henness <timhenness@attglobal.net>\nOrganization: Tenneco Business Services\nX-Mailer: Mozilla 2.02E (OS/2; I)\nMIME-Version: 1.0\nTo: sbgolob@attglobal.net\nSubject: Re: Bookmaster cleanup exec (1/3)\nReferences: <6b4096d6.34e8e5fd@aol.com>\nContent-Type: multipart/mixed; boundary=\"------------34DB3F4B35CC\"\nStatus: U\nX-Mozilla-Status: 0011\nContent-Length: -7880\n\nThis is a multi-part message in MIME format.\n\n--------------34DB3F4B35CC\nContent-Type: text/plain; charset=us-ascii\nContent-Transfer-Encoding: 7bit\n\n>From BKMGR.MAINT.EXEC(BKMGRMNT):\n\n--------------34DB3F4B35CC\nContent-Type: text/plain; charset=iso-8859-1; name=\"BKMGRMNT.REX\"\nContent-Disposition: inline; filename=\"BKMGRMNT.REX\"\nContent-Transfer-Encoding: quoted-printable\nX-MIME-Autoconverted: from 8bit to quoted-printable by out1.ibm.net id TAB74694\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT317/FILE317.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT317", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}