{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012556000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE672.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE672.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x0e'", "DS1TRBAL": "b'\\t\\x90'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xbf\\x00\\x05\\x04\\xbf\\x00\\t\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x07\\x9f\\x01\\x04\\x07\\x9f\\t$\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-03-19T00:00:00", "modifydate": "2004-03-19T09:24:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-465"}, "text": "REGULAR CBT TAPE - VERSION 465    FILE:  672\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT465.FILE672\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,656 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/19/04    09:24:19    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INSTALL": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x10V\\x00L\\x00L\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T10:56:36", "lines": 76, "newlines": 76, "modlines": 0, "user": "SBGOLOB"}, "text": "      Short Installation Instructions for NETINIT and NETSTOP\n\n1.  Assemble the NETINIT program, using (a variation of) the ASSEMBLE\n    member, and copy it into an authorized load library that is NOT\n    IN THE LINK LIST.\n\n2.  Copy the @NETINIT and @NETSTOP members into your active VTAMLST.\n\n3.  Add the @NETINIT and @NETSTOP entries to your ATCCONxx member in\n    VTAMLST.\n\n4.  Activate the nodes @NETINIT and @NETSTOP with\n\n     V NET,ACT,ID=@NETINIT\n     V NET,ACT,ID=@NETSTOP\n\n    console commands (or IPL).\n\n  The above steps will make the NETINIT and NETSTOP applications known\n  to VTAM.  But we still need to put procs into a PROCLIB so we will\n  be able to START them as console commands.  Instructions for that\n  are below:\n\n5.  Adapt the NETINIT and NETSTOP procs and their control card inputs\n    for your system, and for what you want NETINIT and NETSTOP to do\n    for you.  Remember to STEPLIB to the APF authorized library that\n    IS NOT IN THE LINK LIST.\n\n6.  In your PARMLIB COMMNDxx member, put an entry:\n\n     COM='S NETINIT'\n\n    if you want NETINIT to kick off after VTAM comes up at IPL time.\n    I think that NETINIT, used in this way, can probably replace\n    IBM's VTAMAPPL program completely.  And it works on old MVS\n    systems that didn't have VTAMAPPL available yet.\n\n7.  Once the NETINIT and NETSTOP procs (or variations thereof) are\n    present in PROCLIB, you can S NETINIT or S NETSTOP at any time\n    when you want those actions to occur.  VTAM has to be up.\n\n8.  Control card coding rules are as follows (taken from the NETINIT\n    source code).  I would suggest making frequent use of the coding\n    examples in member PROCLIB, (sub)members NETINIS1 and NETSTOS1,\n    which will help you get your commands right.  Be careful to learn\n    the hierarchy commands (the level number in column 1 of the control\n    card) so you can code one command to be dependent on (a hierarchy\n    of) other commands.  And you can learn how to use the time delays.\n    All this documentation may be found in the NETINIT source code.\n\n INPUT:     BELOW IS THE FORMAT FOR AN INPUT COMMAND RECORD.\n\n            COLUMN    DATA DESCRIPTION\n            ======    ================\n              1       LEVEL NUMBER ASSOCIATED WITH THIS COMMAND\n              2       BLANK\n              3       'V' IF STATUS OF COMMAND WILL BE MONITORED\n                          WITH THE INQUIRE MACRO.\n                      'C' IF COMMAND WILL NOT BE MONITORED\n              4       BLANK\n              5-7     'XXX' WHERE IS XXX IS A NUMERICAL TIMER\n                      VALUE WHERE '001' = 1 SECOND\n              8       BLANK\n              9       'T' IF COMMAND IS TO BE DELAYED FOR INTERVAL\n                      SPECIFIED IN COLS 4-6 OTHERWISE BLANK\n              10      BLANK\n              11-18   VTAM APPLICATION ID ASSOCIATED WITH THIS\n                      COMMAND.\n              19      BLANK\n              20-59   COMMAND THAT WILL BE PASSED TO SVC 34.\n\n\n Good Luck!\n\n (tried by Sam Golob - sbgolob@attglobal.net or sbgolob@cbttape.org)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x00\\x13\\x01\\x026_\\x01\\x04\\x07\\x9f\\t\"\\x00\\x1e\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2004-03-19T09:22:13", "lines": 30, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*      THIS JOB RECONSTITUTES THE NETINIT PROC LIBRARY\n//*          AND THE ORIGINAL NETINIT PROC LIBRARY\n//*\n//PDSLOAD PROC IPDS='SBGOLOB.CBT465.FILE672',   /* THIS PDS */\n//             OPRE=SBGOLOB,\n//             QUAL=NETINIT,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=DATA04,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=15,S=30,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=CBT.CBT464.FILE035.PDS   /* CBT FILE 035 */\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=PROCLIB\n//S002 EXEC PDSLOAD,MEMB=PROCORIG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE672": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04A\\x00\\x00\\x01\\x04\\x07\\x9f\\x01\\x04\\x07\\x9f\\t$\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf5@@@'", "ispf": {"version": "04.65", "flags": 0, "createdate": "2004-03-19T00:00:00", "modifydate": "2004-03-19T09:24:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT-465"}, "text": "//***FILE 672 is from Joel Ewing and contains a version of the      *   FILE 672\n//*           NETINIT program which works under OS/390 and z/OS.    *   FILE 672\n//*           NETINIT was originally part of the NETSOL package.    *   FILE 672\n//*           (See an updated version of NETSOL on File 356.)       *   FILE 672\n//*                                                                 *   FILE 672\n//*           NETINIT will intelligently start VTAM applications    *   FILE 672\n//*           and issue arbitrary MVS commands after VTAM is up.    *   FILE 672\n//*           NETINIT can probably completely replace IBM's         *   FILE 672\n//*           VTAMAPPL program in functionality.  In addition,      *   FILE 672\n//*           in its NETSTOP incarnation, NETINIT can take down     *   FILE 672\n//*           most of your system, intelligently, too.  Once you    *   FILE 672\n//*           have set up your NETINIT and NETSTOP procs and        *   FILE 672\n//*           their VTAM applications, you can get them to do       *   FILE 672\n//*           very good work.                                       *   FILE 672\n//*                                                                 *   FILE 672\n//*           NETINIT will work on older MVS systems, where IBM's   *   FILE 672\n//*           VTAMAPPL program was not yet available.               *   FILE 672\n//*                                                                 *   FILE 672\n//*           email:  jcewing@data-tronics.com                      *   FILE 672\n//*                                                                 *   FILE 672\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@NETINIT": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x01\\x16\\x00\\x02\\x00\\x02\\x00\\x00\\xe5\\xe3\\xd4\\xc1\\xd7\\xd7\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T01:16:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "VTMAPPL"}, "text": "        VBUILD TYPE=APPL\nNETINIT  APPL  EAS=1,PRTCT=NETINIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@NETSTOP": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x10\\x00\\x00\\x02\\x00\\x02\\x00\\x01\\xe5\\xe3\\xd4\\xc1\\xd7\\xd7\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T10:00:45", "lines": 2, "newlines": 2, "modlines": 1, "user": "VTMAPPL"}, "text": "        VBUILD TYPE=APPL\nNETSTOP  APPL  EAS=1,PRTCT=NETSTOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASSEMBLE": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00A\\x01\\x00\\x04\\x8f\\x01\\x04\\x07\\x7f\\x146\\x00\\x1e\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2004-03-17T14:36:41", "lines": 30, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,BATCH,FLAG(1))\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R14.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R14.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(NETINIT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(CYL,(1,1)),DISP=(,PASS),\n//            DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   NETINIT\n SETCODE AC(1)\n SETSSI  CB465672\n NAME    NETINIT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADLIB": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x011\\x00I\\x00I\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T01:31:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "NETINIT": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00F\\x00\\x85#_\\x01\\x04\\x07o\\x11\\x06\\x03\\xd8\\x03\\xcb\\x00\\x00\\xe4\\xd1\\xc5\\xe6\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1985-08-23T00:00:00", "modifydate": "2004-03-16T11:06:46", "lines": 984, "newlines": 971, "modlines": 0, "user": "UJEWING"}, "text": "         TITLE 'NETINIT  ...  START VTAM APPLICATIONS AT VTAM START TIMX\n               E'\n*     *** ASSEMBLY INSTRUCTIONS ***\n*     * ASM    -\n*     *     SYSLIB REQUIRES - SYS1.MODGEN, SYS1.MACLIB\n*     * LKED   -\n*     *     PARM -  ADD   AC=1\n*     *     LOADLIB - A PRIVATE AUTHORIZED LIBRARY (NOT IN LINKLIST,\n*     *     OR MAY GIVE EVERYONE CONSOLE CMD CAPABILITY)\n***********************************************************************\n*                                                                     *\n*             ** INITIAL 80 BYTE RECORD IS 'START' IN COL 11. **      *\n*                                                                     *\n*  FUNCTION : NETINIT IS A VTAM APPLICATION PROGRAM USED TO CONTROL   *\n*             THE STARTUP OF OTHER VTAM APPLICATION PROGRAMS. IT IS   *\n*             STARTED AT IPL TIME AND ENSURES THAT CERTAIN VTAM       *\n*             APPLICATION PROGRAMS ARE STARTED AND STARTED IN         *\n*             A PARTICULAR ORDER.                                     *\n*                                                                     *\n*             SEVERAL VTAM APPLICATIONS SUCH AS TCAS, NCCF AND HCF    *\n*             CURRENTLY REQUIRE OPERATOR INTERVENTION TO START THEM.  *\n*             THEY ARE UNABLE TO HANDLE THE SITUATION WHEN THEY       *\n*             ARE STARTED BEFORE VTAM IS COMPLETELY INITIALIZED.      *\n*             EITHER THEY ABEND OR THEY REQUIRE A REPLY FROM THE      *\n*             OPERATOR TO RETRY THEIR STARTUP.                        *\n*                                                                     *\n*             CURRENTLY, BOTH NCCF AND NETOP CAN BE A PRIMARY         *\n*             PROGRAM OPERATOR. NETOP WILL START CORRECTLY IF THE     *\n*             POI IS IN USE BY ANOTHER PROGRAM BUT NCCF WILL NOT.     *\n*             SINCE BOTH WILL CONTINUE TO BE IN USE, NETOP CAN        *\n*             BE STARTED ONLY AFTER NCCF IS RUNNING.                  *\n*                                                                     *\n*             NETINIT WILL ADDRESS THE ABOVE PROBLEMS.                *\n*                                                                     *\n*             FIRST, NETINIT READS IN A SET OF COMMAND RECORDS. EACH  *\n*             COMMAND RECORD DEFINES A PARTICULAR OS COMMAND          *\n*             THAT IS TO BE ISSUED USING SVC 34. THE LEVEL            *\n*             NUMBERS ARE USED TO DEFINE A HIERARCHY FOR EXECUTION    *\n*             OF THE COMMANDS. HIGHER LEVELS ARE SUBORDINATE TO THE   *\n*             LOWER LEVELS THEY FOLLOW IN THE INPUT STREAM. ALL       *\n*             COMMANDS WITH IDENTICAL LEVEL NUMBERS AND WHICH ARE     *\n*             SUBORDINATE TO ONE LOWER LEVEL COMMAND, CAN BE          *\n*             ISSUED IN PARALLEL. A HIGHER LEVEL COMMAND CAN ONLY BE  *\n*             EXECUTED ONCE ANY LOWER LEVEL COMMANDS PRIOR TO IT      *\n*             IN THE INPUT STREAM HAVE BEEN EXECUTED.                 *\n*                                                                     *\n*             EG. THIS INPUT COMMAND FILE:                            *\n*                                                                     *\n*             LEVEL #   COMMAND                                       *\n*             *******   *******                                       *\n*                1      S NCCF                                        *\n*                2      S NETOP                                       *\n*                1      S TCAS                                        *\n*                1      $SLGN1                                        *\n*                2      $SLNE90                                       *\n*                1      S HCF                                         *\n*                                                                     *\n*                 WOULD RESULT IN THE FOLLOWING SEQUENCE OF COMMANDS: *\n*                                                                     *\n*             S NCCF      S TCAS     $SLGN1      S HCF                *\n*             S NETOP                $SLNE90                          *\n*                                                                     *\n*                 WHERE EXECUTION OF EACH COLUMN OF COMMANDS WOULD    *\n*                 PROCEED IN PARALLEL BUT EACH ROW IN A PARTICULAR    *\n*                 COLUMN MUST WAIT FOR THE PREVIOUS ROW COMMAND       *\n*                 TO COMPLETE.                                        *\n*                                                                     *\n*             THESE COMMANDS ARE READ INTO THE VTAM STARTUP TABLE     *\n*             AND EDITTED FOR OBVIOUS FORMAT ERRORS.                  *\n*                                                                     *\n*                                                                     *\n*             SECOND, NETINIT WAITS UNTIL IT CAN SUCCESSFULLY OPEN    *\n*             ITS VTAM ACB.                                           *\n*                                                                     *\n*                                                                     *\n*             THIRD, NETINIT PROCESS THE COMMANDS IT READ INTO        *\n*             THE VTAM STARTUP TABLE.                                 *\n*                                                                     *\n*             NETINIT CAN PROCESS TWO TYPES OF COMMAND RECORDS.       *\n*             THE VTAM COMMAND RECORDS DEFINE START COMMANDS FOR      *\n*             VTAM APPLICATIONS. NETINIT WILL ISSUE THE GIVEN         *\n*             COMMAND AND THEN USE THE INQUIRE MACRO TO WAIT UNTIL    *\n*             THE ASSOCIATED VTAM APPLICATION BECOMES ACTIVE. FOR THE *\n*             COMMAND COMMAND RECORDS, NETINIT ISSUES THE GIVEN       *\n*             COMMAND BUT DOESN'T MONITOR FOR ITS COMPLETION.         *\n*                                                                     *\n*             FOURTH, NETINIT CAN DELAY PROCESSING OF CERTAIN         *\n*             COMMANDS DEPENDANT UPON A USER SPECIFIED TIME           *\n*             INTERVAL.                                               *\n*                                                                     *\n*              EX. 1 V 300 T NCCF S NCCF                              *\n*                                                                     *\n*             THE 'T' INPUT WOULD RESULT IN A DELAY PRIOR TO          *\n*             ISSUTING THIS COMMAND.  THE DELAY IS DEPENDANT          *\n*             UPON THE INPUT VALUE PROVIDED IN 'SYSIN'.  IN THIS      *\n*             CASE THE REQUESTED DELAY IS '300' OR 5 MINUTES.         *\n*             THE VALUE IS 001 IS EQUAL TO 1 SEC.  YOU MAY ENTER      *\n*             WHAT YOU WISH FOR DELAY PRIOR TO ISSUING COMMAND.       *\n*                                                                     *\n*             FIFTH , NETINIT WRITES MESSAGES TO THE OPERATOR         *\n*             WHEN ERROR CONDITIONS ARE ENCOUNTERED. FOR EXAMPLE,     *\n*             NETINIT SETS TIMEOUT VALUES FOR THE LENGTH OF TIME      *\n*             IT WILL ATTEMPT TO OPEN THE ACB BEFORE QUITTING AND     *\n*             FOR THE LENGTH OF TIME IT WILL WAIT FOR AN APPLICATION  *\n*             TO BECOME ACTIVE.                                       *\n*                                                                     *\n*             SIXTH, NETINIT CAN BE RERUN AT ANY TIME. BEFORE         *\n*             STARTING ANY VTAM APPLICATION, THE STATUS OF THAT       *\n*             APPLICATION IS CHECKED WITH INQUIRE MACRO. START        *\n*             COMMANDS ARE IGNORED FOR ANY ACTIVE APPLICATIONS. ALL   *\n*             'COMMAND' COMMANDS ARE ISSUED REGARDLESS OF ANY         *\n*             ASSOCIATED STATUS. THE USER MUST ENSURE THAT ANY        *\n*             SUCH COMMANDS WILL NOT INTERFER WITH A CURRENTLY        *\n*             ACTIVE VTAM APPLICATION PROGRAM.                        *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*             ** INITIAL 80 BYTE RECORD IS 'STOP'  IN COL 11. **      *\n*                                                                     *\n* FUNCTION :  NETINIT MAY ALSO BE USED TO PROCESS NETWORK             *\n*             SHUTDOWN IN THE FOLLOWING MANNER.                       *\n*                                                                     *\n*             CODE INITIAL LINE ENTRY AS 'STOP'                       *\n*                                                                     *\n*             NETINIT WILL THEN CHECK ITS ACB.  IF ACB OPEN           *\n*             OK ACB IS CLOSED AND MULTIPLE COMMANDS MAY BE           *\n*             ISSUED TO STOP TASKS ORIGINALLY INITIATED               *\n*             THROUGH NETINIT STARTUP PROC.                           *\n*             THESE COMMANDS ARE PROCESSED IN THE SAME MANNER         *\n*             AS THE NETINIT START UP PROCEDURE IN THAT               *\n*             THEY ARE DEPENDANT ON LOWER LEVEL COMPLETIONS           *\n*             WITHIN THE INPUT COMMAND MEMBER LEVEL STRUCTURE         *\n*             AS WELL AS THE TIMING OPTION MAY BE USED TO             *\n*             DELAY COMMAND INVOCATION.                               *\n*  WRITTEN BY: ED PITKIN, DISTRIBUTED SERVICES, BCSC                  *\n*  DATE      : JULY 18/80.                                            *\n*                                                                     *\n*  MODIFIED BY: COLL R CAMPBELL, NPS/BCSC                             *\n*  DATE      : APRIL 25/83                                            *\n*              -----------                                            *\n*                1.  ADD R4 AS A BASE REGISTER ...REQUIRED            *\n*                2.  IMPLEMENT PASS OF PARM FOR ACB OPEN              *\n*                3.  ADD TPEND EXIT                                   *\n*                                                                     *\n*  MODIFIED BY: JOEL C EWING, DATA-TRONICS CORP.                      *\n*  DATE      : 1985-08-23                                             *\n*             WTO MESSAGE ON NUC SIZE, SQA, PLPA, ETC DELETED AS      *\n*             INFO AVAILABLE THRU OTHER SOURCES, MACROS WERE NOT      *\n*             CORRECT FOR MVSXA, AND NOT RELEVANT TO COMMAND FUNCTION *\n*  DATE      : 1991-03-13                                             *\n*             MSG09C MISSING COMMA DETECTED BY ASSEMBLER, FIXED.      *\n*  DATE      : 1995-10-31                                             *\n*             RAISE MAX CMDS FROM 50 TO 200                           *\n*                                                                     *\n         EJECT                                                        *\n*  INPUT:     BELOW IS THE FORMAT FOR AN INPUT COMMAND RECORD.        *\n*                                                                     *\n*             COLUMN    DATA DESCRIPTION                              *\n*             ======    ================                              *\n*               1       LEVEL NUMBER ASSOCIATED WITH THIS COMMAND     *\n*               2       BLANK                                         *\n*               3       'V' IF STATUS OF COMMAND WILL BE MONITORED    *\n*                           WITH THE INQUIRE MACRO.                   *\n*                       'C' IF COMMAND WILL NOT BE MONITORED          *\n*               4       BLANK                                         *\n*               5-7     'XXX' WHERE IS XXX IS A NUMERICAL TIMER       *\n*                       VALUE WHERE '001' = 1 SECOND                  *\n*               8       BLANK                                         *\n*               9       'T' IF COMMAND IS TO BE DELAYED FOR INTERVAL  *\n*                       SPECIFIED IN COLS 4-6 OTHERWISE BLANK         *\n*               10      BLANK                                         *\n*               11-18   VTAM APPLICATION ID ASSOCIATED WITH THIS      *\n*                       COMMAND.                                      *\n*               19      BLANK                                         *\n*               20-59   COMMAND THAT WILL BE PASSED TO SVC 34.        *\n*                                                                     *\n*  REGISTER USAGE:   R0     - WORK REGS                               *\n*                    R1     - WORK REGS                               *\n*                    R2     - WORK REGS                               *\n*                    R3     - WORK REGS                               *\n*                    R4     - BASE REG FOR NETINIT                    *\n*                    R5     - A(ACB)                                  *\n*                    R6     - A(NIB)                                  *\n*                    R7     - BAL REG FOR SHOULD NOT OCCURS           *\n*                    R8     - A(RPL)                                  *\n*                    R9     - A(VSE)                REGS              *\n*                    R10    - LENGTH OF VSE          FOR              *\n*                    R11    - LAST VSE IN VST         BXLE            *\n*                    R12    - BASE REG FOR NETINIT                    *\n*                    R13    - A(SAVEAREA)                             *\n*                    R14    - LINKAGE REG                             *\n*                    R14    - WORK REG                                *\n*                                                                     *\n*  ATTRIBUTES: AC(1)                                                  *\n*                                                                     *\n*  VTAM MACROS USED: INQUIRE                                          *\n*                                                                     *\n*  SYSTEM MACROS USED: OPEN, CLOSE, PUT, GET, WTO, GETMAIN, FREEMAIN  *\n*                                                                     *\n***********************************************************************\nNETINIT   CSECT\n          B     STM-NETINIT(0,R15) BR AROUND MODULE HEADER\nAPPLNAME  DC    AL1(8)             LENGTH OF APPL NAME\n          DC    CL8'        '      APPL NAME\n          DC    CL10'&SYSDATE'\n          DC    CL8' /&SYSTIME/'\nSTM       STM   R14,R12,12(R13)    SAVE SYSTEMS REGS\n          LR    R12,R15            SET ADDRESSABILITY\n          USING NETINIT,R12,R4       TO NETINIT\n          L     R4,NETINADD        SET UP R4 AS BASE REG\n          ST    R13,SAVEAREA+4     STORE SAVEAREA BACKWARD PTR\n          LR    R15,R13            TEMPORARILY SAVE OLD SAVEAREA PTR\n          LA    R13,SAVEAREA       LOAD A(NEW SAVEAREA)\n          ST    R13,8(,R15)        STORE SAVEAREA FORWARD PTR\n          USING VSEDSECT,R9        SET ADDRESSABILITY TO VSE\n          USING IFGRPL,R8          SET ADDRESSABILITY\n          LA    R8,RPL               TO VTAM RPL\n          USING ISTDNIB,R6         SET ADDRESSABILITY\n          LA    R6,NIB               TO VTAM NIB\n          USING IFGACB,R5          SET ADDRESSABILITY\n          LA    R5,ACB               TO VTAM ACB\n          SPACE 1\n*         USE PARM INPUT TO DETERMINE APPL NAME FOR ACB OPEN\n          L     R2,0(R1)           LOAD R2 WITH AREA POINTED\n          MVC   APPLSZ,1(R2)       TO BY R1.  MOVE IN PASSED PARM\n          XR    R3,R3              SETUP R3 FOR USE\n          IC    R3,APPLSZ          POINT TO LENGTH OF ACBNAME\n          BCTR  R3,0               DECREMENT R3 FOR LENGTH USE\n          EX    R3,INSTRCT1        EXEC APPL MOVE TO APPLNAME\n          EX    R3,INSTRCT2        AND APPLPSWD PASSING LENGTH\n*         BUILD  VTAM STARTUP TABLE\n          SPACE 1\n          BAL   R14,BUILDVST       READ AND EDIT INPUT COMMANDS\n          SPACE 1\n*         WAIT UNTIL VTAM IS INITIALIZED\n          SPACE 1\n          BAL   R14,OPENACB        GO OPEN VTAM ACB\n          EJECT\n*         PROCESS VTAM STARTUP TABLE (VST) TO START VTAM APPLICATIONS\n          SPACE 1\nPROLOOP1  LM    R9,R11,VSTSTART    LOAD BXLE REGS\n          NI    GLOFLAG,X'FF'-GLOFND1 RESET VSE FOUND FLAG\n          SPACE 1\nPROLOOP2  TM    TPENDFLG,X'01'     ARE WE SHUTTING DOWN\n          BO    RETURN             TPEND SCHEDULED SO GO END\n          TM    VSEFLAG,VSEDONE    HAS THIS VSE BEEN COMPLETED\n          BO    PRONEXT            YES => GET NEXT VSE\n          OI    GLOFLAG,GLOFND1    SAY ATLEAST ONE INCOMPLETE VSE\n          TM    VSEFLAG,VSEHELD    HELD FOR LOWER LEVEL COMPLETION\n          BO    PRONEXT            YES => GET NEXT VSE\n          TM    VSEFLAG,VSETIME    IS THIS VSE ON A TIME DELAY\n          BO    TIMCNTL            BRANCH FOR TIMER DECREMENT\n          TM    VSEFLAG,VSEWAIT    HELD FOR APPL STARTUP\n          BNO   PROVSE             NO => PROCESS VSE\n          BAL   R14,STATNQIR       CHECK FOR APPL STATUS\n          B     PRONEXT            BRANCH FOR NEXT VSE\n          SPACE 1\nPROVSE    BAL   R14,ACTVSE         ISSUE COMMAND IN VSE\n          SPACE 1\nPRONEXT   BXLE  R9,R10,PROLOOP2    GET NEXT VSE\n          TM    GLOFLAG,GLOFND1    ANY INCOMPLETE VSE'S?\n          BO    PROSTIME           YES => GO WAIT BEFORE RESCANNING VST\n          SPACE 1\n          TM    GLOFLAG,GLOERR     ANY ERRORS PROCESSING VSE'S\n          BO    WRITMSG7           YES => BR TO CONDITIONAL COMPLETION\n          WTO   MF=(E,MSG08)       NO  => WTO COMPLETION\n          B     RETURN                    GO TO EXIT\nWRITMSG7  WTO   MF=(E,MSG07)       WTO CONDITIONAL COMPLETION MSG\n          B     RETURN\nINSTRCT1  MVC   APPLNAME+1(0),2(R2)    MOVE IN\nINSTRCT2  MVC   APPLPSWD+1(0),2(R2)    MOVE IN\n          SPACE 1\nPROSTIME  STIMER WAIT,BINTVL=WAIT1SEC WAIT 1 SECOND\n          B     PROLOOP1                BEFORE RESCANNING VST\n          EJECT\n*         NORMAL EXIT FROM NETINIT\n          SPACE 1\nRETURN    DS    0H\n          TM    GLOFLAG,GLOACBO    IF VTAM ACB\n          BZ    SKIPCACB             IS OPEN\n          CLOSE ACB                    THEN CLOSE IT\nSKIPCACB  FREEMAIN R,SP=2          FREE SUBPOOL CONTAINING VST\n          L     R13,4(,R13)        RESTORE OLD SAVEAREA\n          LM    R14,R12,12(R13)    RESTORE OLD REGS\n          SR    R15,R15            SET RETURN CODE = 0\n          BR    R14\n          SPACE 2\n*         EXIT FOR ERRORS REQUIRING A DUMP\n          SPACE 1\nOPENFAIL  DS    0H                 VTAM ACB HAS FAILED TO OPEN\n          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS\n          MVI   DUMPFLAG,OPENCODE  INDICATE OPEN ACB FAILURE\n          B     DUMP               GO TAKE A DUMP\n          SPACE 1\nSNOCCUR   DS    0H                 FOR CONDITIONS THAT SHOULD NOT OCCUR\n          STM   R0,R15,DUMPREGS    SAVE REGS FOR ANALYSIS\n          MVI   DUMPFLAG,SNOCUR    INDICATE SHOULD NOT OCCUR\n          B     DUMP\n          SPACE 1\nDUMP      DS    0H                 USE SVC 13 TO TAKE A DUMP\n          SR    R1,R1              CLEAR R1 FOR DUMP CODE\n          IC    R1,DUMPFLAG        MOVE DUMP CODE TO REG1\n          ABEND (1),DUMP           TAKE A DUMP\n          TITLE 'NETINIT - BUILDVST ... BUILD VTAM STARTUP TABLE'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) GETMAIN STORAGE FOR THE VTAM STARTUP TABLE.          *\n*             2) READ COMMAND INPUT FROM SYSIN FILE INTO A VSE.       *\n*             3) VALIDATE LEVEL, TYPE, TIMER AND TIMER VALUE FIELDS   *\n*             4) INITIALIZE TIMER FLAG FOR TIME VSE ENTRIES.          *\n*             5) WRITE INPUT FILE PLUS EDIT ERRORS TO SYSOUT FILE.    *\n*             6) INITIALIZE BXLE REGS FOR LATER VST PROCESSING.       *\n*                                                                     *\n*  REGS USED: R0,R1,R2,R14,R15                                        *\n*                                                                     *\n***********************************************************************\nBUILDVST  DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         GETMAIN STORAGE FOR VST\n          SPACE 1\n          L     R0,VSTLEN          LOAD TABLE SIZE IN BYTES\n          ICM   R0,8,X'02'         SET SUBPOOL # = 2\n          GETMAIN R,LV=(0)         REQUEST STORAGE\n          ST    R1,VSTSTART        SAVE A(VST)\n          A     R1,VSTLEN          CALC START OF\n          S     R1,=AL4(L'VSENTRY)   LAST VSE\n          ST    R1,VSTEND              AND SAVE FOR BXLE\n          SPACE 1\n*         OPEN  SYSIN AND SYSOUT FILES\n          SPACE 1\n          OPEN  (SYSINDCB,(INPUT),SYSOUDCB,(OUTPUT))\n          TM    SYSINDCB+DCBOFLGS-IHADCB,X'10'  DID SYSIN OPEN OK?\n          BZ    DCBOFAIL                        NO => WTO ERROR MSG\n          TM    SYSOUDCB+DCBOFLGS-IHADCB,X'10'  DID SYSOUT OPEN OK?\n          BO    DCBOPEN                         YES => BR TO READ SYSIN\nDCBOFAIL  WTO   MF=(E,MSG01)       WTO OPEN FAILURE MSG\n          B     RETURN             BR TO END EXECUTION\n          SPACE 1\n*         READ  SYSIN RECORDS INTO  VST AND EDIT THEM\n          EJECT\nDCBOPEN   LM    R9,R11,VSTSTART    LOAD BXLE REGS TO PROCESS VST\n          GET   SYSINDCB,(R9)      LOAD FIRST RECORD INTO AREA\n          CLC   10(5,R9),=C'START' ARE WE PROCESSING FOR VTAM START\n          BNE   TBLCHCK            NO SO CHECK AGAIN\n          OI    TBLFLAG,X'01'      FLAG AS SUCH\n          B     READLOOP\nTBLCHCK   CLC   10(4,R9),=C'STOP'  ARE WE PROCESSING FOR VTAM STOP\n          BNE   TBLERR             IF NO THEN WE HAVE AN ERROR\n          B     READLOOP           GO AND PERFORM READ ON CARDS\nTBLERR    WTO   MF=(E,MSG13)       GO AND INFORM OF TABLE TYPE ERR\n          B     RETURN             AND THEN PROCEED TO END\nREADLOOP  GET   SYSINDCB,(R9)      READ COMMAND RECORD INTO A VSE\n          PUT   SYSOUDCB,(R9)      ECHO COMMAND RECORD TO SYSOUT\n          MVC   VSELPCNT,=F'120'   SET TIMEOUT FOR CMD TO 120 SECS\n          MVI   VSEFLAG,X'00'      RESET VSE STATUS FLAG\n          SPACE 1\n          LA    R15,EDITERR1       ASSUME ERROR IN LEVEL PARAMETER\n          CLI   VSELEVEL,C'0'      LEVEL\n          BL    EDITERR              PARAMETER\n          CLI   VSELEVEL,C'9'          MUST BE\n          BH    EDITERR                  NUMERIC\n          SPACE 1\n          LA    R15,EDITERR2       ASSUME ERROR IN TYPE PARAMETER\n          CLI   VSETYPE,C'V'       TYPE\n          BE    ERRCHK1              MUST BE\n          CLI   VSETYPE,C'C'           EITHER\n          BNE   EDITERR              'C' OR 'V'\n          SPACE 1\nERRCHK1   LA    R15,EDITERR3       ASSUME ERROR IN TIME PARAMETER\n          CLI   VSETIMED,C'T'      TYPE\n          BNE   ERCHK1A              PARAMETER\n          OI    VSEFLAG,VSETIME    IF A TIMED ENTRY FLAG AS SUCH\n          B     ERRCHK2            BRANCH FOR ADDED CHECK\nERCHK1A   CLI   VSETIMED,C' '      TYPE\n          BNE   EDITERR                  'T' OR ' '\n          B     READNEXT           GO GET NEXT VSE\n          SPACE 1\nERRCHK2   LA    R15,EDITERR4       ASSUME ERROR IN DELAY PARAMETER\n          CLI   VSETIMED+1,C' '    TYPE\n          BNE   EDITERR                  ' '\n          SPACE 1\n          LA    R15,EDITERR5       ASSUME ERROR IN DELAY PARAMETER\n          CLI   VSCOUNT,C'0'       AMOUNT\n          BL    EDITERR            IS THIS VALUE LESS THAN '0'\n          CLI   VSCOUNT,C'9'       AMOUNT\n          BH    EDITERR            IS THIS VALUE GREATER THAN '9'\n          CLI   VSCOUNT+1,C'0'      AMOUNT\n          BL    EDITERR            IS THIS VALUE LESS THAN '0'\n          CLI   VSCOUNT+1,C'9'      AMOUNT\n          BH    EDITERR            IS THIS VALUE GREATER THAN '9'\n          CLI   VSCOUNT+2,C'0'      AMOUNT\n          BL    EDITERR            IS THIS VALUE LESS THAN '0'\n          CLI   VSCOUNT+2,C'9'      AMOUNT\n          BH    EDITERR            IS THIS VALUE GREATER THAN '9'\n          PACK  CNTTBL(8),VSCOUNT(3) PREPARE TIME INPUT FOR PROCESSING\n          CVB   R2,CNTTBL          CONVERT COUNTER VALUE TO BINARY\n          ST    R2,VSEBIN          STORE BINARY VALUE FOR FUTURE USE\n          B     READNEXT\n          SPACE 1\nEDITERR   PUT   SYSOUDCB,(R15)     WRITE ERROR MSG TO SYSOUT FILE\n          OI    GLOFLAG,GLOEDIT    END EXECUTION AFTER ALL INPUT READ\n          SPACE 1\nREADNEXT  BXLE  R9,R10,READLOOP    READ NEXT COMMAND RECORD\n          WTO   MF=(E,MSG02)       IF WE FALL THRU BXLE, THEN THE\n*                                  INPUT FILE EXCEEDS THE SIZE OF\n*                                  THE VST. WRITE AN ERROR MSG AND\n          B     RETURN             END EXECUTION\n          EJECT\n*         END OF DATA REACHED ON SYSIN\n          SPACE 1\nEODSYSIN  C     R9,VSTSTART        NULL SYSIN FILE?\n          BH    CALCEND            NO  => BR TO CALC LAST VSE\n          WTO   MF=(E,MSG03)       YES => WTO ERROR MSG\n          B     RETURN                    AND END EXECUTION\nCALCEND   S     R9,=AL4(L'VSENTRY) BACKUP TO LAST ACTIVE VSE\n          ST    R9,VSTEND          SAVE FOR BXLE\n          SPACE 1\n          CLOSE (SYSINDCB,,SYSOUDCB)\n          SPACE 1\n          TM    GLOFLAG,GLOEDIT    ANY EDIT ERRORS?\n          BZ    BUILDRET           NO  => BR TO EXIT\n          WTO   MF=(E,MSG04)       YES => WTO ERROR MESSAGE\n          B     RETURN                    AND END EXECUTION\n          SPACE 1\nBUILDRET  L     R14,RETSAVE        RESTORE RETURN REGISTER\n          BR    R14                RETURN TO CALLER\n          TITLE 'NETINIT - OPENACB  ... OPEN VTAM ACB'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) LOOP ATTEMPTING TO SUCCESSFULLY OPEN NETINIT'S       *\n*                VTAM ACB.                                            *\n*             2) END EXECUTION IF ACB CANNOT BE OPENED AFTER          *\n*                TRYING FOR 5 MINUTES.                                *\n*                                                                     *\n*  REGS USED: R0,R1,R2,R14,R15                                        *\n*                                                                     *\n***********************************************************************\nOPENACB   DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          TM    TBLFLAG,X'01'      ARE WE PROCESSING FOR A START\n          BNO   OPENCLSE           IF NOT GO PROCESS FOR A CLOSE\nOPENSTRT  L     R2,=F'300'         SET TIMEOUT VALUE FOR OPEN ACB LOOP\n          SPACE 1\n*         ATTEMPT TO OPEN THE ACB\n          SPACE 1\nOPENRTRY  OPEN  ACB                ATTEMPT TO OPEN ACB\n          LTR   R15,R15            DID ACB OPEN SUCCESSFULLY?\n          BZ    OPENRET            YES => BR TO EXIT\n          SPACE 1\n*         CHECK  OPEN RETURN CODE  FOR RETRYABLE ERROR\n          SPACE 1\n          CLI   ACBERFLG,X'52'     IF VTAM HALT IS IN PROGRESS\n          BNE   OPENCX58             THEN\n          WTO   MF=(E,MSG05)           WTO ERROR MSG\n          B     RETURN                   AND END EXECUTION\nOPENCX58  CLI   ACBERFLG,X'58'     IF APPLID IS ALREADY IN USE\n          BNE   OPENCX5A             THEN\n          WTO   MF=(E,MSG12)           WTO ERROR MSG\n          B     RETURN                   AND END EXECUTION\nOPENCX5A  CLI   ACBERFLG,X'5A'     IF VTAM APPLID NOT DEFINED YET\n          BE    OPENLOOP             THEN RETRY OPEN ACB\nOPENCX5C  CLI   ACBERFLG,X'5C'     IF VTAM IS INACTIVE\n          BE    OPENLOOP             THEN RETRY OPEN ACB\n          BAL   R7,OPENFAIL        OTHER RETURN CODE => TAKE A DUMP\n          SPACE 1\n*         RETRY  OPEN ACB EVERY 1  SECONDS TO A MAX OF 5 MINUTES\n          SPACE 1\nOPENLOOP  BCT   R2,OPENSTIM        DECREMENT TIMEOUT COUNTER\n          WTO   MF=(E,MSG06)       WTO TIMEOUT LIMIT EXCEEDED\n          B     RETURN             AND END EXECUTION\nOPENSTIM  STIMER WAIT,BINTVL=WAIT1SEC WAIT FOR 1 SECOND\n          B     OPENRTRY                AND THEN RETRY OPEN ACB\n          SPACE 1\nOPENCLSE  OPEN  ACB                ATTEMPT TO OPEN ACB/ ARE WE UP?\n          LTR   R15,R15            CHECK AND SEE.\n          BZ    OPENCLOS\n          WTO   MF=(E,MSG14)       GO AND TELL OF ERROR\n          B     RETURN             AND THEN BRANCH TO CLEAN UP\nOPENCLOS  CLOSE ACB                CLOSE UP ACB SO EXLST NO GO\n          LTR   R15,R15            DID WE CLOSE OKAY\n          BZ    OPENRET            YES!  GO AND PROCESS COMMANDS\n          WTO   MF=(E,MSG15)       GO AND SAY CLOSE IS A NO GO\n          B     RETURN             AND THEN BRANCH TO CLEAN UP\nOPENRET   OI    GLOFLAG,GLOACBO    FLAG ACB OPENED\n          L     R14,RETSAVE        RESTORE RETURN ADDRESS\n          BR    R14\n          TITLE 'NETINIT - TIMER CONTROL ... TIME VSE ENTRY'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) FOR VSETYPE WITH A 'T' TIMER ENTRY DECREMENT TIMER   *\n*                VALUE AND STORE IN VSE.                              *\n*             2) PREPARE ALL SUBORDINATE ENTRIES TO TIMED ENTRY FOR   *\n*                APPROPRIATE STATUS.                                  *\n*             3) RELEASE TIMER FLAG FROM ENTRIES WHOSE TIMER VALUE    *\n*                HAS REACHED = '0'.                                   *\n*  REGS USED: R2                                                      *\n*                                                                     *\n***********************************************************************\nTIMCNTL   L     R2,VSEBIN          PREPARE VALUE FOR DECREASE\n          BCT   R2,TIMSAVE         DEREMENT COUNTER AND BRANCH IF > 0\n          NI    VSEFLAG,X'FF'-VSETIME   RESET FLAG WHEN TIME = '0'\n          LA    R1,STATEX1         PT @ INSTRUCTION TO BE EXECUTED\n          BAL   R14,VSESUBOR       AND THEN BRANCH\n          B     PROVSE             BRANCH FOR PROCESS\nTIMSAVE   ST    R2,VSEBIN          SAVE TIMER VALUE IN VSE\n          LR    R2,R9              SAVE CURRENT VSE\nTIMLOOP   BXLE  R9,R10,TIMCHK      POINT TO NEXT VSE\n          LR    R9,R2              RESTORE CURRENT VSE\nTIMCHK    TM    VSEFLAG,VSEHELD    HAS VSE BEEN HELD AS SUBORDINATE\n          BO    TIMLOOP            IF HELD BRANCH FOR NEXT VSE\n          LA    R1,AVSWTEX         SETUP R1 FOR FUTURE USE\n          BAL   R14,VSELOOP        SAVE CALLING POINT AND BRANCH\n          B     PRONEXT\n          TITLE 'NETINIT - ACTVSE   ... ISSUE COMMAND'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) FOR VSETYPE='V', VERIFY THAT THE APPLID IS DEFINED   *\n*                TO VTAM.                                             *\n*             2) FOR VSETYPE='V', FLAG COMMAND COMPLETE IF APPLICATION*\n*                IS ALREADY ACTIVE .                                  *\n*             3) ISSUE THE COMMAND IN THE VSE USING SVC 34.           *\n*             4) FOR VSETYPE='V', WAIT THE CURRENT VSE ENTRY AND HOLD *\n*                SUBORDINATE VSE'S.                                   *\n*             5) FOR VSETYPE='C', FLAG THE VSE COMPLETE.              *\n*                                                                     *\n*  REGS USED: R0,R1,R14,R15                                           *\n*                                                                     *\n***********************************************************************\nACTVSE    DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         INQUIRE ABOUT APPLID FOR VSETYPE='V'\n          SPACE 1\n          CLI   VSETYPE,C'C'       IF VSE IS COMMAND TYPE\n          BE    AVSSVC34             THEN SKIP INQUIRE\n          MVC   NIBSYM,VSEAPPL     MOVE APPLID TO NIB\nAVSLOOP   INQUIRE RPL=RPL,         ISSUE VTAM INQUIRE                  X\n               NIB=NIB,                                                X\n               OPTCD=APPSTAT\n          EJECT\n          CH    R15,=H'12'         INQUIRE RET CODE > 12?\n          BNH   *+8                NO  => GO TO BRANCH TABLE\n          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR\n          B     ERRTAB1(R15)       BR BASED ON ACTION CODE\nERRTAB1   B     AVSFDBK3            0 => SUCCESSFUL COMPLETION\n          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR\n          B     AVSAPBAD            8 => APPLID WRONG OR NOT DEFINED\n          B     AVSLOOP             C => RETRYABLE ERROR\n          SPACE 1\n*         QUERY APPL STATUS FROM RPLFDBK3\n          SPACE 1\nAVSFDBK3  SR    R15,R15            CLEAR R15 FOR FDBK3\n          IC    R15,RPLFDB3        LOAD FDBK3\n          B     AVSTAT(R15)        BR BASED ON APPL STATUS\nAVSTAT    B     AVSACTIV            0 => APPLICATION ACTIVE\n          B     AVSSVC34            4 => APPLICATION INACTIVE\n          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON\n          B     AVSACTIV            C => APPL'N TEMP NOT ACCEPTNG LOGON\n          B     AVSACTIV           10 => APPLICATION CLOSING DOWN\n          SPACE 1\nAVSACTIV  OI    VSEFLAG,VSEDONE+VSEPREV FLAG COMMAND COMPLETE\n          B     AVSRET\n          SPACE 1\nAVSAPBAD  MVC   MSG09+20(L'VSEAPPL),VSEAPPL MOVE BAD APPLID TO MSG\n          MVC   MSG09C+13(L'VSENTRY),VSENTRY MOVE VSE TO MSG\n          WTO   MF=(E,MSG09)       TELL OPR\n          WTO   MF=(E,MSG09C)        ABOUT THE BAD APPLID\n          OI    VSEFLAG,VSEDONE+VSERROR+VSEINVA FLAG ENTRY COMPLETE\n          OI    GLOFLAG,GLOERR     FLAG PROCESSING ERROR\n          LA    R1,AVSEX           PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND INSTR TO BE EXECUTED\nAVSEX     OI    VSEFLAG,VSEDONE+VSERROR+VSEHELD FLAG SUBORDINATE  VSE'S\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S\n          B     AVSRET             BR TO EXIT\n          SPACE 1\n*         USE SVC 34 TO ISSUE COMMAND IN VSE\n          EJECT\nAVSSVC34  MVC   MSG10+20(L'VSEAPPL),VSEAPPL MOVE APPLID\n          MVC   MSG10+33(35),VSECMD       AND COMMAND TO WTO\n          WTO   MF=(E,MSG10)       TELL OPR\n          SPACE 1\n          MVC   SVC34CMD,VSECMD    MOVE CMD TO SVC 34 BUFFER\n          MODESET KEY=ZERO         MUST BE IN KEY 0 FOR SVC 34\n          SR    R0,R0              SET R0 = 0\n          LA    R1,SVC34BUF            R1 = A(CMD)\n          SVC   34                 PASS COMMAND TO SYSTEM\n          MODESET KEY=NZERO        RETURN TO USER PROTECT KEY\n          SPACE 1\n          CLI   VSETYPE,C'V'       VTAM APPLN START CMD?\n          BE    AVSWAIT            YES => BR TO SET WAIT FLAG\n          OI    VSEFLAG,VSEDONE    NO  => MARK VSE COMPLETE\n          LA    R1,STATEX1         LOAD INSTRUCTION TO BE EXEC\n          BAL   R14,VSESUBOR       BRANCH AND STORE\n          B     AVSRET                    AND EXIT\n          SPACE 1\n*         WAIT FOR VTAM APPLID TO BECOME ACTIVE BEFORE FLAGGING\n*         THIS  VSE COMPLETE AND P ROCESSING SUBORDINATE VSE'S\n          SPACE 1\nAVSWAIT   OI    VSEFLAG,VSEWAIT    TURN WAIT FLAG ON\n          LA    R1,AVSWTEX         PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND OI\nAVSWTEX   OI    VSEFLAG,VSEHELD    SET HELD FLAG IN SUB VSE'S\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S\n          B     AVSRET             BR TO EXIT\n          SPACE 1\nAVSRET    L     R14,RETSAVE        RESTORE RETURN REGISTER\n          BR    R14                RETURN TO CALLER\n          TITLE 'NETINIT - STATNQIR ... INQUIRE APPLID STATUS'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) STATNQIR IS ENTERED FOR VSE'S THAT HAVE THE WAIT     *\n*                FLAG SET.                                            *\n*             2) STATNQIR ISSUES THE VTAM INQUIRE MACRO TO SEE IF     *\n*                THE SPECIFIED VTAM APPLID HAS STARTED YET.           *\n*             3) IF THE APPLID IS NOW ACTIVE, THE VSE IS FLAGGED      *\n*                COMPLETE AND THE HELD FLAG IS RESET IN ALL           *\n*                SUBORDINATE VSE'S.                                   *\n*             4) IF THE TIMEOUT VALUE IS EXCEEDED FOR THE APPLID,     *\n*                THEN THE ENTRY IS FLAGGED COMPLETE UE TO ERROR,      *\n*                AND ALL SUBORDINATE VSE'S ARE FLAGGED COMPLETE.      *\n*                                                                     *\n*  REGS USED: R0,R1,R14,R15                                           *\n*                                                                     *\n***********************************************************************\nSTATNQIR  DS    0H\n          ST    R14,RETSAVE        SAVE RETURN ADDRESS\n          SPACE 1\n*         DECREMENT TIMEOUT COUNTE R FOR THIS APPLID.\n          SPACE 1\n          L     R1,VSELPCNT        LOAD TIMEOUT COUNTER\n          BCT   R1,*+8             DECREMENT TIMEOUT COUNTER\n          B     STATIMEO           R1 < 0 => TIMEOUT VALUE EXCEEDED\n          ST    R1,VSELPCNT        SAVE TIMEOUT COUNTER\n          SPACE 1\n*         ISSUE  INQUIRE MACRO FOR  APPLICATION STATUS\n          SPACE 1\n          MVC   NIBSYM,VSEAPPL     MOVE APPLID INTO NIB\nSTATLOOP  INQUIRE RPL=RPL,         ISSUE INQUIRE MACRO                 X\n               NIB=NIB,                                                X\n               OPTCD=APPSTAT\n          CH    R15,=H'12'         INQUIRE RET CODE > 12?\n          BNH   *+8                NO  => GO TO BRANCH TABLE\n          BAL   R14,SNOCCUR        YES => SHOULD NOT OCCUR\n          B     ERRTAB2(R15)       BR BASED ON ACTION CODE\nERRTAB2   B     STATFDB3            0 => SUCCESSFUL COMPLETION\n          BAL   R14,SNOCCUR         4 => SHOULD NOT OCCUR\n          BAL   R14,SNOCCUR         8 => APPLID WRONG OR NOT DEFINED\n          B     STATLOOP            C => RETRYABLE ERROR\n          SPACE 1\n*         QUERY APPL STATUS FROM RPLFDBK3\n          SPACE 1\nSTATFDB3  SR    R15,R15            CLEAR R15 FOR FDBK3\n          IC    R15,RPLFDB3        LOAD FDBK3\n          B     STATAB(R15)        BR BASED ON APPL STATUS\nSTATAB    B     STATACT             0 => APPLICATION ACTIVE\n          B     STATRET             4 => APPLICATION INACTIVE\n          BAL   R7,SNOCCUR          8 => APPL'N NEVER ACCEPTS LOGON\n          B     STATRET             C => APPL'N TEMP NOT ACCEPTNG LOGON\n          B     STATACT            10 => APPLICATION CLOSING DOWN\n          SPACE 1\n*         APPLI D IS NOW ACTIVE\n          SPACE 1\nSTATACT   OI    VSEFLAG,VSEDONE    FLAG VSE COMPLETE\n          LA    R1,STATEX1         PT @ INSTR TO BE EXECUTED\n          B     *+8                BR AROUND NI\nSTATEX1   NI    VSEFLAG,X'FF'-VSEHELD RESET HELD FLAG IN SUB VSE'S\n          BAL   R14,VSESUBOR       GO RELEASE SUBORDINATE VSE'S\n          B     STATRET            BR TO EXIT\n          SPACE 1\n*         WE HAVE EXCEEDED THE TIME LIMIT FOR THE VTAM APPLID\n*         TO START. ASSUME SOMETHING IS WRONG AND TERMINATE\n*         PROCESSING FOR THIS ENTRY AND ALL SUBORDINATE VSE'S.\n          SPACE 1\nSTATIMEO  MVC   MSG11+20(L'VSEAPPL),VSEAPPL MOVE APPLID TO WTO MSG\n          WTO   MF=(E,MSG11)         AND TELL OPR\n          OI    VSEFLAG,VSEDONE+VSERROR FLAG VSE COMPLETE\n          LA    R1,STATEX2\n          B     *+8                BR AROUND INSTR TO BE EXECUTED\nSTATEX2   OI    VSEFLAG,VSEDONE+VSERROR FLAG SUB VSE'S DONE\n          BAL   R14,VSESUBOR       GO FLAG SUBORDINATE VSE'S DONE\n          B     STATRET            BR TO EXIT\n          SPACE 1\nSTATRET   L     R14,RETSAVE        RESTORE RETURN ADDR\n          BR    R14                RETURN\n          TITLE 'NETINIT - VSESUBOR ... PROCESS SUBORDINATE VSE''S'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : 1) FOR EACH VSE THAT IS SUBORDINATE TO THE CURRENT      *\n*                VSE, EXECUTE THE INSTRUCTION POINTED AT BY R1.       *\n*                                                                     *\n*  INPUT    : R1 - ADDRESS OF INSTRUCTION TO BE EXECUTED              *\n*                                                                     *\n*  REGS USED: R2                                                      *\n*                                                                     *\n***********************************************************************\nVSESUBOR  DS    0H\n          LR    R2,R9              SAVE CURRENT VSE\n          B     VSENEXT            GO GET FIRST SUBORDINATE VSE\n          SPACE 1\nVSELOOP   CLC   VSELEVEL,VSELEVEL-VSEDSECT(R2) SUBORDINATE VSE?\n          BNH   VSERET             NO  => SCAN COMPLETE\n          EX    0,0(R1)            YES => EXECUTE PASSED INSTRUCTION\nVSENEXT   BXLE  R9,R10,VSELOOP            AND GET NEXT VSE\n          SPACE 1\nVSERET    LR    R9,R2              RESTORE CURRENT VSE\n          BR    R14                RETURN TO CALLER\n          TITLE 'NETINIT - TPEND  ..... PROCESS TPEND'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : FLAG THAT WE ARE SHUTTING DOWN.....DO THE MINIMUM.      *\n*                                                                     *\n***********************************************************************\nTPEND     DS    0H\n          DROP  R12                DROP BASE REGISTERS\n          DROP  R4                 DROP BASE REGISTERS\n          USING *,R15              R15 IS ALL WE HAVE FOR BASE REG\n          L     R12,=A(NETINIT)    R12 IS BASE REGISTER\n          L     R4,=A(NETINIT+4096) R4 IS BASE REGISTER\n          DROP  R15\n          USING NETINIT,R12,R4     SET UP BASE REG\n          OI    TPENDFLG,X'01'     FLAG THAT WE ARE TPEND\n          SR    R15,R15\n          BR    R14\n          TITLE 'NETINIT - ERREXIT  ... PROCESS RPL ERRORS'\n***********************************************************************\n*                                                                     *\n*  FUNCTION : ERREXIT RECEIVES CONTROL WHENEVER AN RPL-BASED MACRO    *\n*             ENDS WITH A NON-ZERO RETURN CODE.                       *\n*                                                                     *\n*             1) SINCE ONLY THE INQUIRE MACRO IS USED, THERE ARE      *\n*                VERY FEW ERRORS THAT SHOULD OCCUR.                   *\n*             2) THE RTNCD AND FDBK2 CODES ARE ANALYZED AND AN ACTION *\n*                CODE IS LOADED INTO R15 TO BE PASSED BACK TO THE     *\n*                CODE IMMEDIATELY FOLLOWING THE MACRO CALL. THIS      *\n*                ACTION CODE IS DEFINED AS FOLLOWS:                   *\n*                                                                     *\n*                  4 => THIS CONDITION SHOULD NOT OCCUR               *\n*                  8 => INPUT TO INQUIRE IS INCORRECT                 *\n*                  C => REISSUE THE MACRO                             *\n*                                                                     *\n*             3) THE POSSIBLE ERROR CONDITIONS OF INTEREST TO US      *\n*                ARE AS FOLLOWS:                                      *\n*                                                                     *\n*                                                                     *\n*  ERROR ACTIONS FOR INQUIRE(APPSTAT)                                 *\n*                                                                     *\n*                                                   ACTION            *\n*  RTNCD FDBK2                                      CODE(S)           *\n*  CODE  CODE         MEANING                       RETURNED          *\n*                                                  (R15  R0)          *\n*                                                                     *\n*   00    00    SUCCESSFUL COMPLETION                00  00           *\n*   08    00    TEMP STORAGE ALLOCATION FAILURE      0C  00           *\n*   10    0A    VTAM ERROR                           SNOCCUR          *\n*   10    0E    ABEND IN VTAM                        SNOCCUR          *\n*   14    4C    NO APPLICATION NAME                  08  00           *\n*   14    53    INVALID SYMBOLIC (APPLICATION) NAME  08  00           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  INPUT    : R1     - ADDRESS OF RPL IN ERROR                        *\n*             R2-R12 - VALUES AT TIME MACRO WAS ISSUED                *\n*             R13    - VTAM SAVEAREA                                  *\n*             R14    - RETURN ADDRESS TO VTAM                         *\n*             R15    - ENTRY POINT OF EXIT                            *\n*                                                                     *\n***********************************************************************\nERREXIT   DS    0H\n          DROP  R8\n          USING IFGRPL,R1          SET ADDRESSABILITY TO RPL\n          SR    R0,R0              SET ACTION SUBCODE = 0\n          SPACE 1\n*         SCAN  FOR EXPECTED ERROR S\n          SPACE 1\n          CLC   RPLRTNCD(2),=XL2'0800' TEMP STORAGE ALLOCATION FAILURE\n          BNE   ERR100A                  NO  => CHECK NEXT ERROR\n          LA    R15,12                   YES => SET ACTION CODE=RETRY\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR100A   CLC   RPLRTNCD(2),=XL2'100A' VTAM INTERNAL ERROR\n          BNE   ERR100E                  NO  => CHECK NEXT ERROR\n          LA    R15,4                    YES => SET ACTION CODE=SNOCUR\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR100E   CLC   RPLRTNCD(2),=XL2'100E' VTAM ABENDING\n          BNE   ERR144C                  NO  => CHECK NEXT ERROR\n          LA    R15,4                    YES => SET ACTION CODE=SNOCUR\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR144C   CLC   RPLRTNCD(2),=XL2'144C' NO APPL NAME SPECIFIED?\n          BNE   ERR1453                  NO  => CHECK NEXT ERROR\n          LA    R15,8                    YES => SET ACTION CODE=BADAPPL\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERR1453   CLC   RPLRTNCD(2),=XL2'1453' INVALID APPL NAME?\n          BNE   ERSNOCUR                 NO  => BR TO SET SNOCUR\n          LA    R15,8                    YES => SET ACTION CODE=BADAPPL\n          B     ERRRET                          AND EXIT\n          SPACE 1\nERSNOCUR LA     R15,4              ALL OTHER ERRORS ARE UNEXPECTED\n          B     ERRRET             BR TO EXIT\n          SPACE 1\nERRRET    BR    R14                EXIT TO VTAM\n          TITLE 'NETINIT - DCB''S  AND VTAM CONTROL BLOCKS'\n          PRINT NOGEN\nSYSINDCB  DCB   DDNAME=SYSIN,DSORG=PS,EODAD=EODSYSIN,MACRF=(GM),       X\n               LRECL=80\n          SPACE 2\nSYSOUDCB  DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),LRECL=80,RECFM=F\n          SPACE 2\nACB       ACB   AM=VTAM,APPLID=APPLNAME,EXLST=EXLST,PASSWD=APPLPSWD\n          SPACE 2\nEXLST     EXLST AM=VTAM,SYNAD=ERREXIT,LERAD=ERREXIT,TPEND=TPEND\n          SPACE 2\nNIB       NIB   MODE=RECORD,PROC=TRUNC,LISTEND=YES,                    X\n               LOGMODE=C' ',BNDAREA=0\n          SPACE 2\nRPL       RPL   AM=VTAM,ACB=ACB,OPTCD=SYN\n          PRINT GEN\n          TITLE 'NETINIT - VSE DSECT'\nVSEDSECT  DSECT\n*\n*         THIS  DSECT DESCRIBES AN  ENTRY IN THE VTAM STARTUP TABLE.\n*         EACH  VSE IS READ FROM T HE SYSIN FILE.\n*\nVSENTRY   DS    0CL80              DEFINES ENTIRE VSE ENTRY\nVSELEVEL  DC    CL1' '             THE LEVEL NUMBER FOR THIS VSE\n*                                  LEVEL #'S RANGE FROM 0-9\n*                                  ALL VSE'S BETWEEN THE CURRENT VSE\n*                                  AND THE FIRST VSE WITH A LOWER\n*                                  OR EQUAL LEVEL NUMBER ARE\n*                                  SUBORDINATE TO THE CURRENT VSE.\nVSEFLAG   DC    XL1'00'            VSE STATUS FLAG (FILLER)\nVSEDONE   EQU   X'80'              PROCESSING COMPLETE FOR VSE\nVSEWAIT   EQU   X'40'              WAITING FOR APPLID TO START\nVSEPREV   EQU   X'20'              APPLID PREVIOUSLY ACTIVE\nVSEHELD   EQU   X'10'              HELD TILL SUPERIOR VSE COMPLETES\nVSERROR   EQU   X'08'              ERROR OCCURRED PROCESSING VSE\nVSEINVA   EQU   X'04'              INVALID VSEAPPL FOUND ON INQUIRE\nVSETIMEO  EQU   X'02'              TIMED OUT WAITING FOR APPL TO START\nVSETIME   EQU   X'01'              WAITING FOR TIME DELAY EXPIRATION\n          SPACE 1\nVSETYPE   DC    CL1' '             V => VTAM => ONCE COMMAND IS ISSUED\n*                                               INQUIRE MACRO WILL BE\n*                                               USED TO WAIT FOR\n*                                               COMPLETION.\n*                                  C => CMD  => VSE MARKED DONE ONCE\n*                                               COMMAND IS ISSUED\n          DC    CL1' '             FILLER\nVSCOUNT   DC    CL3'   '           INPUT VALUE FOR TIME DELAY DESIRED\n*\n          DC    CL1' '             FILLER\nVSETIMED  DC    CL1' '             T => TIMED ' ' => UNTIMED VSE\n*\n          DC    CL1' '             FILLER\nVSEAPPL   DC    CL8' '             VTAM APPLID ASSOCIATED WITH VSECMD\n          DC    CL1' '             FILLER\nVSECMD    DC    CL40' '            COMMAND ISSUED WITH SVC 34\nVSELPCNT  DC    F'0'               TIMEOUT COUNTER (FILLER)\nVSEBIN    DC    F'0'               TIME COUNTER IN BINARY FORMAT\n          ORG   VSEDSECT+80\nNETINIT   CSECT\n          TITLE 'NETINIT - DATA AREAS'\nNUMVSE    EQU   200                MAXIMUM NUMBER OF VSE'S\nVSTLEN    DC    AL4(80*NUMVSE)     STORAGE SIZE FOR VST\nVSTSTART  DC    AL4(0)             START OF VST            USED\nVSTINCR   DC    AL4(L'VSENTRY)     SIZE OF VSE               FOR\nVSTEND    DC    AL4(0)             LAST ACTIVE ENTRY IN VST    BXLE\n          SPACE 1\nSAVEAREA  DC    18F'0'             NETINIT SAVEAREA\nNETINADD  DC    A(NETINIT+4096)    BASE REGISTER POINTER\nRETSAVE   DC    F'0'               SAVEAREA FOR RETURN ADDRESS\nTBLFLAG   DC    X'00'              FLAG SET BY VTAM START OR STOP\n          SPACE 1\nWAIT1SEC  DC    F'100'             STIMER VALUE FOR 1 SECOND WAIT\nGLOFLAG   DC    XL1'00'            FLAG BYTE\nGLOEDIT   EQU   X'80'              ERROR EDITTING VSE INPUT\nGLOFND1   EQU   X'40'              ATLEAST 1 INCOMPLETE VSE FOUND\nGLOERR    EQU   X'20'              ERROR IN PROCESSING A VSE\nGLOACBO   EQU   X'10'              ACB IS OPEN\nTPENDFLG  DC    XL1'00'            TPEND FLAG BYTE\n          SPACE 1\nCNTTBL    DS    D                  WORK AREA FOR TIMER CONTROL\nSVC34BUF  DS    0CL(4+L'VSECMD)    CMD BUFFER FOR SVC 34\n          DC    AL2(L'SVC34BUF)    LENGTH PASSED TO SVC 34\n          DC    AL2(0)             MUST BE ZERO\nSVC34CMD  DC    CL(L'VSECMD)' '    COMMAND PASSED TO SVC 34\n          SPACE 1\nAPPLPSWD  DC    AL1(8)             LENGTH OF PASSWORD ENTRY\n          DC    CL8'        '      PASSWORD FOR ACB PROCESSING\n          SPACE 1\nDUMPFLAG  DC    XL1'00'            USED TO HOLD ABEND CODE\nOPENCODE  EQU   X'80'              FAILURE OPENING ACB\nSNOCUR    EQU   X'40'              SHOULD NOT OCCUR ERROR\nDUMPEYE   DC    C'ABEND REGISTERS  STORED HERE' HELP FIND REGS IN DUMP\nDUMPREGS  DC    16F'0'             REGISTERS PRIOR TO DUMP\n          DS    0F\nAPPLSZ    DS    XL1                DATA AREA SAVE FOR PASSED LENGTH\n          SPACE 1\nR0        EQU   0\nR1        EQU   1\nR2        EQU   2\nR3        EQU   3\nR4        EQU   4\nR5        EQU   5\nR6        EQU   6\nR7        EQU   7\nR8        EQU   8\nR9        EQU   9\nR10       EQU   10\nR11       EQU   11\nR12       EQU   12\nR13       EQU   13\nR14       EQU   14\nR15       EQU   15\n          TITLE 'NETINIT - WTO AND SYSOUT MESSAGES'\nEDITERR1  DC    CL80'LEVEL IN ABOVE ENTRY MUST BE NUMERIC'\nEDITERR2  DC   CL80'ENTRY TYPE IN ABOVE RECORD MUST BE ''C'' OR ''V''.'\nEDITERR3  DC   CL80'REQUEST FOR TIMER MUST BE ''T'' OR ''V''.'\nEDITERR4  DC   CL80'THIS MUST BE A BLANK FIELD'\nEDITERR5  DC   CL80'TIMER VALUE IS A NON NUMERIC VALUE'\n          SPACE 1\n          PRINT NOGEN\n          PRINT GEN      ADDED TO VERIFY MSG OFFSETS\nMSG01     WTO   'BCSC201I SYSIN OR SYSOUT FILE FAILED TO OPEN. EXECUTIOX\n               N TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG02     WTO   'BCSC202I MAXIMUM NUMBER OF INPUT COMMAND RECORDS EXCEEX\n               DED. EXECUTION TERMINATED.',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG03     WTO   'BCSC203I SYSIN FILE IS EMPTY. EXECUTION TERMINATED.', X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG04     WTO   'BCSC204I ERRORS IN SYSIN FILE. EXECUTION TERMINATED.',X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG05     WTO   'BCSC205I VTAM SHUTTING DOWN. EXECUTION TERMINATED.',  X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG06     WTO   'BCSC206I UNABLE TO OPEN ACB AFTER TRYING FOR 5 MINUTESX\n               . EITHER VTAM IS DOWN OR THE NETINIT APPL IS INACTIVE.',X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG07     WTO   'BCSC207I NETINIT COMPLETE EXCEPT FOR NOTED ERRORS. CORX\n               RECT AND RESTART NETINIT.',ROUTCDE=(8),DESC=(7),        X\n               MF=L\n          SPACE 1\nMSG08     WTO   'BCSC208I NETINIT COMPLETED SUCCESSFULLY.',            X\n               ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG09     WTO   'BCSC209I APPLID=XXXXXXXX IS INACTIVE OR INCORRECTLY ONX\n               RECORD=',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG09C    WTO   'BCSC209I XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXC\n               XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',ROUTCDE=(8),DESC=(7),X\n               MF=L\n          SPACE 1\nMSG10     WTO   'BCSC210I APPLID=12345678 CMD=1234567891123456789212345C\n               6789312345',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG11     WTO   'BCSC211I APPLID=XXXXXXXX HAS NOT STARTED. FIX PROBLEM X\n               AND RESTART NETINIT.',ROUTCDE=(8),DESC=(7),MF=L\n          SPACE 1\nMSG12     WTO   'BCSC212I NETINIT IS ALREADY ACTIVE. EXECUTION TERMINATX\n               ED.',ROUTCDE=(8),DESC=(7),MF=L\nMSG13     WTO   'BCSC213I TABLE TYPE ENTRY IS NOT VALID. EXECUTION TERMX\n               INATED.',ROUTCDE=(8),DESC=(7),MF=L\nMSG14     WTO   'BCSC214I UNABLE TO OPEN NETSTOP ACB FOR PROCESSING OF X\n               NETWORK SHUTDOWN.',ROUTCDE=(8),DESC=(7),MF=L\nMSG15     WTO   'BCSC215I UNABLE TO CLOSE NETSTOP ACB POST OPEN PROCESSX\n               DURING SHUTDOWN.',ROUTCDE=(8),DESC=(7),MF=L\n          LTORG\n          TITLE 'NETINIT - DCB DSECT'\n          DCBD\n          PRINT GEN\n          TITLE 'NETINIT - ACB DSECT'\n          IFGACB\n          TITLE 'NETINIT - NIB DSECT'\n          ISTDNIB\n          TITLE 'NETINIT - RPL DSECT'\n          IFGRPL\n          EJECT\n          END   NETINIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROCLIB": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x01\\t\\x01\\x1c\\x01\\x1c\\x00\\x00\\xe4\\xd1\\xc5\\xe6\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T01:09:00", "lines": 284, "newlines": 284, "modlines": 0, "user": "UJEWING"}, "text": "./ ADD NAME=#DOC     0103-04076-04076-1715-00018-00006-00000-UJEWING\nPROCS:\n  NETINIT - Used at system startup (S NETINIT in COMMNDxx)\n  NETSTOP - Used at system shutdown (either manually from console or\n            fired by Netview automation)\n      &SFX is a system symbol set at IPL:  S1 is Production system,\n      ER is emergency recovery system, DR is used at DR site\nPARMLIB members:\n  NETINIxx - versions of startup parameters used on various systems\n  NETSTOxx - versions of shutdown parameters\n    (the 'DONT' commands in some of the parmlib members generate\n     error messages but do no harm -- a device I used to keep the\n     original commands around in the PARMLIB member but temporarily\n     disable them)\n\nThe timing delays in some of the command sequences are either\nempirical values to insure that things happen in the correct sequence\nor in some cases just to reduce the number of commands fired up at\nthe same time.\n./ ADD NAME=NETINIDR 0105-02022-03051-1711-00049-00051-00000-UJEWING\n          START    'REQUIRED FOR ACB PROCESSING'\n1 C                F FFST,ACTION=CHANGE,DQ=TD1\n1 C       TSO      S TSO\n2 C 020 T          DONT S SVTS\n1 C                DONT V (DC0-DC7),ONLINE\n1 C                S OMIICN\n2 C 005 T          S OMIIETE\n3 C 005 T          S OMIIM2CS\n4 C       APOMII01 S OMIIDSST\n4 C       APOMII01 S OMIIM2\n4 C 010 T          S OMIIM2RC\n4 C 045 T          S OMIIM2HI\n4 C 010 T          S OMIIM2HD\n4 C 010 T          S OMIIM2EZ.OMIIM2EZ\n3 C 005 T          S DTCINIT\n3 C 045 T          S TCPIP\n4 C 030 T          S IMWEBSRV\n1 C                S CAS9\n1 C                DONT S ZEBB\n2 C 020 T          DONT S ZEKE\n2 C 020 T          DONT S ASXPMC UNTIL TESTED\n1 C                S LOGROUTE\n1 V       CLOPER   S ENGINE\n1 V       VPS0001  S VPS\n2 C 020 T          S VSV80\n2 C 020 T          S DRSV\n1 C                V (B40),ONLINE\n1 C                V (540-545),ONLINE\n1 C                V (548-54D),ONLINE\n1 C                V (550-555),ONLINE\n1 C                V (558-55D),ONLINE\n1 C                V (560-565),ONLINE\n1 C                -START DB2\n1 C                \u00acSTART DB2\n1 C                +START DB2\n1 C                $SLGN(1-2)\n1 C                $SLNE(1-5)\n1 C                S BBCMRCAS\n2 C 010 T          S BBISS00M\n2 C 010 T          S BBISS01M\n2 C 010 T          S BBISS02M\n1 C                S BBCMRLAS\n2 C 060 T          F RMF,S III\n1 C                S DB2MOT\n1 C                S DB2MON\n1 C                V NET,ACT,ID=ALAPPC01\n2 C 015 T          S APPC,SUB=MSTR\n3 C                S ASCH,SUB=MSTR\n1 C                S SYNCG110\n./ ADD NAME=NETINIER 0100-01029-01029-0918-00008-00008-00000-UJEWING\n          START    'REQUIRED FOR ACB PROCESSING'\n1 C                F FFST,ACTION=CHANGE,DQ=TD1\n1 C       TSO      S TSO\n1 C                $SLGN(1-2)\n1 C                $SLNE(1-5)\n1 C                $TNODE1,PATHMGR=NO\n2 C 005 T          S DTCINIT\n3 C 010 T          S TCPIP\n./ ADD NAME=NETINIS1 0155-97205-03342-1355-00052-00047-00000-UJEWING\n          START    'REQUIRED FOR ACB PROCESSING'\n1 C                F FFST,ACTION=CHANGE,DQ=TD1\n1 C                V (540-545),ONLINE\n1 C                V (550-555),ONLINE\n1 C                S RRS\n1 C       TSO      S TSO\n2 C 020 T          S SVTS\n1 C                V (DC0-DC7),ONLINE\n1 C                S OMIICN\n2 C 005 T          S OMIIETE\n3 C 005 T          S OMIIM2CS\n4 C       APOMII01 S OMIIDSST\n4 C       APOMII01 S OMIIM2\n4 C 010 T          S OMIIM2RC\n4 C 045 T          S OMIIM2HI\n4 C 010 T          S OMIIM2HD\n4 C 010 T          S OMIIM2EZ.OMIIM2EZ\n3 C 005 T          S DTCINIT\n3 C 045 T          S TCPIP\n4 C 030 T          S IMWEBSRV\n4 C 030 T          S JSSMTP\n1 C                S CAS9\n1 C                S ZEBB\n2 C 020 T          S ZEKE\n2 C 020 T          DONT S ASXPMC UNTIL TESTED\n1 C                S LOGROUTE\n1 V       CLOPER   S ENGINE\n1 V       VPS0001  S VPS\n2 C 020 T          S VSV80\n2 C 020 T          S DRSV\n1 C                V (B40),ONLINE\n1 C                V (548-54D),ONLINE\n1 C                V (558-55D),ONLINE\n1 C                V (560-567),ONLINE\n1 C                -START DB2\n1 C                \u00acSTART DB2\n1 C                +START DB2\n1 C                $SLGN(1-2)\n1 C                $SLNE(1-5)\n1 C                S BBCMRCAS\n2 C 010 T          S BBISS00M\n2 C 010 T          S BBISS01M\n2 C 010 T          S BBISS02M\n1 C                S BBCMRLAS\n2 C 060 T          F RMF,S III\n3 C 015 T          S GPMSERVE\n1 C                S DB2MOT\n1 C                S DB2MON\n1 C                V NET,ACT,ID=ALAPPC01\n2 C 015 T          S APPC,SUB=MSTR\n3 C                S ASCH,SUB=MSTR\n1 C                S SYNCG110\n./ ADD NAME=NETINIT  0108-85235-00255-1204-00009-00008-00000-UJEWING\n//NETINIT  PROC MEMBER=NETINI&SFX.\n//*********************************************************************\n//*    PURPOSE:   START VTAM APPLICATIONS AFTER VTAM UP             ***\n//*   DEFAULT IS NETIMVSB ON TEST NETIMVS1 ON PROD\n//*********************************************************************\n//NETINIT  EXEC PGM=NETINIT,PARM='NETINIT'\n//STEPLIB  DD   DSN=DTC1.PRIVATE.AUTHLIB,DISP=SHR\n//SYSIN    DD   DSN=SYS1.PARMLIB(&MEMBER),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n./ ADD NAME=NETSTOER 0104-01029-02247-1344-00064-00063-00000-UTRIMOV\n          STOP    \" REQUIRED FOR ACB PROCESSING ON Z NET,QUICK \"\n1 C       TSO      P TSO\n1 C       OMVTAM   P OMVTAM\n1 C                P OAM\n1 C                P OTIS\n1 C                P SYNCG110\n1 C                P LOGROUTE\n1 C                P DB2CUA\n1 C                P DB2MON\n1 C                P DB2MOT\n1 C                P CNM3SSI\n1 C                P OMS\n1 C                P CTS\n1 C                P MVSPAS\n2 C 010 T          P BBCS\n1 C                P ASXPMC\n1 C                F VSV,STOP\n1 C                P DFHSM\n1 C                F ENGINE,STOP\n2 C 010 T          P ENGINE\n1 C                F ENGINES,STOP\n2 C 010 T          P ENGINES\n1 C                F ENGINET,STOP\n2 C 010 T          P ENGINET\n1 C                P VPS\n1 C                P OMIIM2EZ.OMIIM2EZ\n1 C                P OMIIM2HD\n1 C                P OMIIM2HI\n1 C                P OMIIETE\n1 C                P OMIIM2RC\n1 C                P OMIIM2\n1 C                P OMIIM2CS\n1 C                P OMIIDSST\n2 C 010 T          P OMIIDSST\n3 C 005 T          P KCNDL\n1 C                %CLOSE IMMED\n2 C 010 T          P CNM3SSI\n1 C                \u00acSTOP DB2\n1 C 015 T          -STOP DB2\n1 C                \u00a2STOP DB2\n1 C                +STOP DB2\n2 C 015 T          V 500-51F,OFFLINE\n3 C 005 T          P SVTS\n1 C                $PLNE(1-5)\n1 C                $PLGN(1-2)\n1 C                P BBCMRCAS\n1 C                P BBCMRLAS\n1 C                P BBISS00M\n1 C                P BBISS01M\n1 C                P BBISS02M\n1 C                V NET,INACT,ID=CMRTASA,FORCE\n1 C                P GTFVTAM.JKT\n1 C                P GTFVTAM.KAP\n1 C                C ASCH\n1 C                C APPC\n1 C                P ADSM\n1 C                S SPIDDOWN\n1 C                P MVSNFSC\n2 C 010 T          C MVSNFSC\n2 C 015 T          P TCPIP\n3 C 005 T          F BPXOINIT,SHUTDOWN=FORKINIT\n4 C 005 T          F BPXOINIT,SHUTDOWN=FILESYS\n1 C                F RMF,P III\n2 C 010 T          P RMF\n./ ADD NAME=NETSTOP  0111-85235-00255-1204-00009-00008-00000-UJEWING\n//NETSTOP  PROC MEMBER=NETSTO&SFX.\n//*********************************************************************\n//*    PURPOSE:    SHUT DOWN VTAM APPLICATIONS                        *\n//*  DEFAULT IS NETSMVSB ON TEST, NETSMVS1 ON PROD\n//*********************************************************************\n//NETSTOP  EXEC PGM=NETINIT,PARM='NETSTOP'\n//STEPLIB  DD   DSN=DTC1.PRIVATE.AUTHLIB,DISP=SHR\n//SYSIN    DD   DSN=SYS1.PARMLIB(&MEMBER),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n./ ADD NAME=NETSTOS1 0199-85235-03329-1046-00067-00006-00000-UJEWING\n          STOP    \" REQUIRED FOR ACB PROCESSING ON Z NET,QUICK \"\n1 C       TSO      P TSO\n1 C       OMVTAM   P OMVTAM\n1 C                P OAM\n1 C                P OTIS\n1 C                P SYNCG110\n1 C                P LOGROUTE\n1 C                P DB2CUA\n1 C                P DB2MON\n1 C                P DB2MOT\n1 C                P CNM3SSI\n1 C                P OMS\n1 C                P JSSMTP\n2 C 010 T          P BBCS\n1 C                P ASXPMC\n1 C                P IMWEBSRV\n1 C                P DFHSM\n1 C                F ENGINE,STOP\n2 C 060 T          P ENGINE\n1 C                F ENGINES,STOP\n2 C 060 T          P ENGINES\n1 C                F ENGINET,STOP\n2 C 060 T          P ENGINET\n1 C                P VPS\n1 C                P VSV80\n1 C                P OMIIM2EZ.OMIIM2EZ\n1 C                P OMIIM2HD\n1 C                P OMIIM2HI\n1 C                P OMIIM2RC\n1 C                P OMIIM2\n1 C                P OMIIM2CS\n1 C                P OMIIDSST\n2 C 010 T          P OMIIDSST\n3 C                P OMIIETE\n3 C 005 T          P OMIICN\n1 C                %CLOSE IMMED\n2 C 010 T          P CNM3SSI\n1 C                \u00acSTOP DB2\n1 C 015 T          -STOP DB2\n1 C                \u00a2STOP DB2\n1 C                +STOP DB2\n2 C 015 T          V 500-51F,OFFLINE\n3 C 005 T          P SVTS\n2 C 055 T          SETRRS CANCEL\n1 C                $PLNE(1-5)\n1 C                $PLGN(1-2)\n1 C                P BBCMRCAS\n1 C                P BBCMRLAS\n1 C                P BBISS00M\n1 C                P BBISS01M\n1 C                P BBISS02M\n1 C                V NET,INACT,ID=CMRTASA,FORCE\n1 C                P GTFVTAM.JKT\n1 C                P GTFVTAM.KAP\n1 C                C ASCH\n1 C                C APPC\n1 C                S SPIDDOWN\n1 C                P MVSNFSC\n2 C 010 T          C MVSNFSC\n2 C 015 T          P OMPROUTE\n3 C 010 T          P TCPIP\n4 C 005 T          P RESOLVER\n5 C 005 T          F BPXOINIT,SHUTDOWN=FORKINIT\n6 C 005 T          F BPXOINIT,SHUTDOWN=FILESYS\n1 C                P GPMSERVE\n1 C                F RMF,P III\n2 C 010 T          P RMF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PROCORIG": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x01\\x01\\x04\\x07\\x8f\\x01\\x04\\x07\\x8f\\x11\\x00\\x00\\x8f\\x00\\x9f\\x00\\x00\\xe4\\xd1\\xc5\\xe6\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-03-18T00:00:00", "modifydate": "2004-03-18T11:00:01", "lines": 143, "newlines": 159, "modlines": 0, "user": "UJEWING"}, "text": "./ ADD NAME=$$$NOTE\n  All of these members came from the old NETSOL distribution, and\n  are included here, just in case we left something out from our\n  newer NETINIT distribution.\n\n./ ADD NAME=$DOC\nMEMBER      DESCRIPTION\n********    **********************************************************\n\n$DOC        THIS MEMBER.\n\n@NETINIT    VTAM APPLICATION DEFINITION FOR 'NETINIT'.\n\nNETINIT$    INSTALLATION INSTRUCTIONS FOR 'NETINIT' AND 'NETSTOP'.\n\nNETINITA    JCL TO ASSEMBLE 'NETINIT'.\n\nNETINITI    SAMPLE CONTROL CARD INPUT TO 'NETINIT'.\n\nNETINITP    SAMPLE JCL TO RUN 'NETINIT'.\n\nNETSTOPI    SAMPLE CONTROL CARD INPUT TO 'NETSTOP'.\n\nNETSTOPP    SAMPLE JCL TO RUN 'NETSTOP'.\n./ ADD NAME=@NETINIT\n        VBUILD TYPE=APPL\nNETINIT  APPL  EAS=1,PRTCT=NETINIT\n./ ADD NAME=NETINIT$\nINSTRUCTIONS FOR INSTALLING NETINIT AND NETSTOP\n***********************************************\n\n1) ASSEMBLE 'NETINIT' USING THE SAMPLE JCL IN 'NETINITA'.\n\n2) ADD VTAM DEFINITIONS '@NETINIT' AND '@NETSTOP' TO SYS1.VTAMLST.\n\n3) ADD STARTUP PROCS 'NETINITP' AND 'NETSTOPP' TO SYS1.PROCLIB.\n\n4) ADD CONTROL STATEMENTS 'NETINITI' AND 'NETSTOPI' TO SYS1.PARMLIB.\n\n./ ADD NAME=NETINITA\n//SC64858F JOB (82539,819593,D,PSTT),'CAMPBELL@SEY1PL',CLASS=R,\n//  NOTIFY=*,MSGCLASS=X,USER=*,PASSWORD=*,PRTY=2\n/*JOBPARM R=3D,L=99\n//S0 EXEC COMPRESS,LIB='SYS9.TP.TPLOAD'\n// EXEC ASMFCL,PARMC='TEST,LINECOUNT(57)',PARML=TEST,CLASS=$\n//ASM.SYSLIB DD DSN=SYS9.TP.ASM,DISP=SHR,DCB=BLKSIZE=4080\n//           DD DSN=SYS1.AMODGEN,DISP=SHR\n//           DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSIN DD DSN=SYS9.TP.ASM(NETINIT),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS9.TP.LOAD,DISP=SHR\n//LKED.SYSIN DD *\n SETCODE AC(1)\n NAME NETINIT(R)\n./ ADD NAME=NETINITI\n          START    'REQUIRED FOR ACB PROCESSING'\n1 V       NCCFA    S NCCF\n2 V       NETSOL   S NETSOL\n3 C       CTC      V NET,ACT,ID=CTC\n3 C       LCL4A0   V NET,ACT,ID=LCL4A0\n3 C       LCL4C0   V NET,ACT,ID=LCL4C0\n3 C       BLCL480  V NET,ACT,ID=SBLCL480\n3 C       BLCL4E0  V NET,ACT,ID=SBLCL4E0\n4 V 120 T NETOP    S NETOP\n3 C       NCPX     V NET,ACT,ID=NCPX6\n3 C       NCPY     V NET,ACT,ID=NCPY8\n3 C       NCPZ     V NET,ACT,ID=NCPZ8\n3 C       NCPA     V NET,ACT,ID=NCPA6\n3 C       NCPH     V NET,ACT,ID=NCPH4\n4 V 300 T DSPRINT  S DSPRINT\n4 V 300 T ADMPRINT S GDDMPRT\n4 C 300 T SNETMON  S NETMON\n1 V       TSO      S TCAS\n1 V       HCF      S HCF\n1 V       SNJEA    $SLGN1\n1 V       SJES2    $SLGN2\n4 V 600 T SJES2    $SN,A=INJE1\n2 C       JES2     $SLNE53-82\n1 C       MSG      SE 'NETINIT(A) RUN',LOGON,USER=(SC64858)\n./ ADD NAME=NETINITP\n//NETINIT  PROC MEMBER=NETINIT,P=NETINIT,PRM=NETINIT\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            START ALL VTAM APPLICATIONS THAT         ***\n//*                        ARE TO BE AVAILABLE IMMEDIATELY AFTER    ***\n//*                        VTAM IS STARTED.                         ***\n//*                                                                 ***\n//*    OWNER:              NETWORK PRODUCT SERVICES                 ***\n//*                                                                 ***\n//*    CONTACT:            COLL R CAMPBELL                          ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//NETINIT  EXEC PGM=&P,PARM='&PRM'\n//STEPLIB  DD   DSN=SYS9.LOADLIB,DISP=SHR\n//SYSIN    DD   DSN=SYS1.NPSXT.PARMLIB(&MEMBER),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n//SYSUDUMP DD   SYSOUT=$\n./ ADD NAME=NETSTOPI\n          STOP    \" REQUIRED FOR ACB PROCESSING ON Z NET,QUICK \"\n1 C                SET MPF=01\n1 C 005 T          C NETSOL\n1 C 005 T          C NETMON\n1 C 005 T          V NET,INACT,I,ID=DIAL3270\n1 C 005 T          C NETOP\n1 C 005 T          P DSPRINT\n1 C 005 T          P GDDMPRT\n1 C 005 T          P TCAS\n1 C 005 T          P HCF\n1 C 005 T          $PLNE127-156\n1 C 005 T          $PLGN1\n1 C 005 T          $PLGN2\n1 C 005 T          V NET,INACT,F,ID=406-S\n1 C 005 T          V NET,INACT,F,ID=407-S\n1 C 005 T          V NET,INACT,F,ID=408-S\n1 C 010 T          Z NET,QUICK\n1 C 075 T          SET MPF=00\n./ ADD NAME=NETSTOPP\n//NETSTOP  PROC MEMBER=NETSTOP,P=NETINIT,PRM=NETSTOP\n//*********************************************************************\n//*********************************************************************\n//*                                                                 ***\n//*                                                                 ***\n//*    PURPOSE:            STOP ALL VTAM APPLICATIONS THAT ARE      ***\n//*                        ACTIVE AND ISSUE ALL APPROPRIATE VTAM    ***\n//*                        COMMANDS PRIOR TO SHUTTING DOWN VTAM     ***\n//*                                                                 ***\n//*    OWNER:              NETWORK PRODUCT SERVICES                 ***\n//*                                                                 ***\n//*    CONTACT:            ED PITKIN/COLL R CAMPBELL                ***\n//*                                                                 ***\n//*                                                                 ***\n//*********************************************************************\n//*********************************************************************\n//*\n//NETSTOP  EXEC PGM=&P,PARM='&PRM'\n//STEPLIB  DD   DSN=SYS9.LOADLIB,DISP=SHR\n//SYSIN    DD   DSN=SYS1.NPSXT.PARMLIB(&MEMBER),DISP=SHR\n//SYSOUT   DD   SYSOUT=Z\n//SYSUDUMP DD   SYSOUT=$\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT672/FILE672.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT672", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}