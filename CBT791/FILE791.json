{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012812000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE791.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE791.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0b'", "DS1TRBAL": "b'o\\x08'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05Y\\x00\\x0c\\x05Y\\x00\\x0e\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08&?\\x01\\x08&?\\x110\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-09-19T00:00:00", "modifydate": "2008-09-19T11:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-477"}, "text": "REGULAR CBT TAPE - VERSION 477    FILE:  791\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT477.FILE791\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 264 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/19/08    11:30:06    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE791": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08&?\\x01\\x08&?\\x11)\\x00<\\x00<\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-09-19T00:00:00", "modifydate": "2008-09-19T11:29:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "CBT-477"}, "text": "//***FILE 791 is from Anthony S. Rudd (by way of Ken Tomiak) and    *   FILE 791\n//*           contains a REXX function written in Assembler, that   *   FILE 791\n//*           accomplishes GETMAIN and FREEMAIN functionality from  *   FILE 791\n//*           within REXX.  For further documentation, see comments *   FILE 791\n//*           in the GETMAIN code.                                  *   FILE 791\n//*                                                                 *   FILE 791\n//*           email:  ARudd@t-online.de                             *   FILE 791\n//*                                                                 *   FILE 791\n//*    Problem addressed:                                           *   FILE 791\n//*                                                                 *   FILE 791\n//*    The REXX language provides a large library of functions.     *   FILE 791\n//*    This library includes a function to access main storage      *   FILE 791\n//*    directly (the STORAGE function).  However, there is no       *   FILE 791\n//*    direct way of allocating main storage from REXX - the        *   FILE 791\n//*    following GETMAIN function addresses this problem.           *   FILE 791\n//*                                                                 *   FILE 791\n//*                                                                 *   FILE 791\n//*    A DESCRIPTION OF THE GETMAIN FUNCTION                        *   FILE 791\n//*                                                                 *   FILE 791\n//*    The GETMAIN function has two sub-functions:                  *   FILE 791\n//*                                                                 *   FILE 791\n//*    *      OBTAIN, which allocates a block of main storage.      *   FILE 791\n//*                                                                 *   FILE 791\n//*    *      RELEASE, which releases (ie frees) a previously       *   FILE 791\n//*          allocated main storage block.                          *   FILE 791\n//*                                                                 *   FILE 791\n//*    The main storage blocks are allocated above the              *   FILE 791\n//*    16-megabyte address line in subpool 1.  The MVS STORAGE      *   FILE 791\n//*    service is used both to allocate and deallocate main         *   FILE 791\n//*    storage.                                                     *   FILE 791\n//*                                                                 *   FILE 791\n//*    Calling sequence                                             *   FILE 791\n//*                                                                 *   FILE 791\n//*    To allocate a main storage block, code:                      *   FILE 791\n//*                                                                 *   FILE 791\n//*          addr = GETMAIN('OBTAIN',length);                       *   FILE 791\n//*                                                                 *   FILE 791\n//*    where OBTAIN is the function to be performed (as usual       *   FILE 791\n//*    for REXX functions, only the first character is used, ie     *   FILE 791\n//*    'O' is also valid), length is the number of bytes to be      *   FILE 791\n//*    allocated, and addr is returned with the decimal (start)     *   FILE 791\n//*    address of the allocated main storage block.                 *   FILE 791\n//*                                                                 *   FILE 791\n//*    To free a previously allocated main storage block, code:     *   FILE 791\n//*                                                                 *   FILE 791\n//*          frc = GETMAIN('RELEASE',addr,length);                  *   FILE 791\n//*                                                                 *   FILE 791\n//*    where RELEASE is the function to be performed (only the      *   FILE 791\n//*    first character is used, ie 'R' is also valid), addr is      *   FILE 791\n//*    the decimal (start) address of the main-storage block to     *   FILE 791\n//*    be released, length is the number of bytes to be             *   FILE 791\n//*    released, and frc is the function return code.               *   FILE 791\n//*                                                                 *   FILE 791\n//*    Note that part of an allocated block can be released.        *   FILE 791\n//*                                                                 *   FILE 791\n//*    The standard REXX function value -3 indicates that REXX      *   FILE 791\n//*    detected an error condition while trying to perform the      *   FILE 791\n//*    function (eg the function could not be located).             *   FILE 791\n//*                                                                 *   FILE 791\n//*                                                                 *   FILE 791\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GETMAIN": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x08&?\\x01\\x08&?\\x10P\\x00\\xc0\\x00\\xc0\\x00\\x00\\xc1`\\xd9\\xe4\\xc4\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-09-19T00:00:00", "modifydate": "2008-09-19T10:50:14", "lines": 192, "newlines": 192, "modlines": 0, "user": "A-RUDD"}, "text": "         TITLE 'REXX OBTAIN/RELEASE storage'\n*\n*A S Rudd\n*Technical Consultant (Germany)                       (c)A S Rudd 1991\n* Calling sequence:\n*\n*\n*   Obtaining and freeing main storage in REXX\n*\n*\n*   Problem addressed\n*\n*   The REXX language provides a large library of functions.\n*   This library includes a function to access main storage directly\n*   (the STORAGE function).  However, there is no direct way of\n*   allocating main storage from REXX - the following\n*   GETMAIN function addresses this problem.\n*\n*\n*   A DESCRIPTION OF THE GETMAIN FUNCTION\n*\n*   The GETMAIN function has two sub-functions:\n*\n*   o      OBTAIN, which allocates a block of main storage.\n*\n*   o      RELEASE, which releases (ie frees) a previously allocated\n*         main storage block.\n*\n*   The main storage blocks are allocated above the 16-megabyte\n*   address line in subpool 1.  The MVS STORAGE service is\n*   used both to allocate and deallocate main storage.\n*\n*   Calling sequence\n*\n*   To allocate a main storage block, code:\n*\n*         addr = GETMAIN('OBTAIN',length);\n*\n*   where OBTAIN is the function to be performed (as usual for\n*   REXX functions, only the first character is used, ie 'O' is also\n*   valid), length is the number of bytes to be allocated, and addr\n*   is returned with the decimal (start) address of the allocated\n*   main storage block.\n*\n*   To free a previously allocated main storage block, code:\n*\n*         frc = GETMAIN('RELEASE',addr,length);\n*\n*   where RELEASE is the function to be performed (only the first\n*   character is used, ie 'R' is also valid), addr is the decimal\n*   (start) address of the main-storage block to be released, length\n*   is the number of bytes to be released, and frc is the function\n*   return code.\n*\n*   Note that part of an allocated block can be released.\n*\n*   The standard REXX function value -3 indicates that REXX\n*   detected an error condition while trying to perform the function\n*   (eg the function could not be located).\n*\n*\n*   Example\n*\n*   /* REXX - GETMAIN test  */\n*   /* allocate 4000 bytes of storage */\n*   addr = GETMAIN('OBTAIN',4000);\n*   SAY addr /* display decimal address */\n*   caddr = D2C(addr,4); /* binary address */\n*   xaddr = C2X(caddr); /* hex address */\n*   /* set data into allocated storage area */\n*   x  = STORAGE(xaddr,5,\"alpha\");\n*   fld = STORAGE(xaddr,5);\n*   SAY fld /* display stored data */\n*   /* release allocated storage */\n*   frc = GETMAIN('RELEASE',4000,addr);\n*   SAY frc /* display function return code */\n*\n*\n*\n*\n*\n* >>---STORAGE(-+-OBTAIN,length----------+-)---<<\n*               +-RELEASE,length,address-+\n* Function value:\n*  normal return:\n*   >0 - address of allocated area\n*  error return:\n*   -1 - operation error (not 'O' or 'R')\n*   -2 - length error\n*   -4 - address error\n*   -5 - RELEASE error\n*   -6 - OBTAIN error\n*               +-RELEASE,length,address-+\nGETMAIN  CSECT\n* initialize addressing\n         STM   R14,R12,12(R13)         save registers\n         BALR  R12,0                   base register\n         USING *,R12\n         LA    R15,SA                  A(save-area)\n         ST    R13,4(R15)              backward ptr\n         ST    R15,8(R13)              forward ptr\n         LR    R13,R15                 A(new save-area)\n         B     SA_END                  jump over save-area\nSA       DS    18A                     save-area\nSA_END   DS    0H\n         USING EFPL,R1\n         L     R2,EFPLEVAL       PTR(Evaluation Block)\n         L     R11,0(R2)         A(Evaluation Block)\n         USING EVALBLOCK,R11\n         L     R10,EFPLARG        A(parsed Argument List)\n         USING ARGTABLE_ENTRY,R10\n         LA    R10,ARGTABLE_ARGSTRING_PTR\n* get \"operation\"\n         LM    R3,R4,0(R10)\n* R3: A(argument), R4: L(argument)\n         MVC   ERRCODE,=CL2'-1'   preset ReturnCode (=error)\n         LTR   R4,R4\n         BM    ERROR              \"operation\" missing\n         BZ    ERROR              null \"string\"\n         MVI   FLAG,0\n         CLI   0(R3),C'O'\n         BNE   *+8\n         OI    FLAG,@OBTAIN\n         CLI   0(R3),C'R'\n         BNE   *+8\n         OI    FLAG,@RELEASE\n         CLI   FLAG,0\n         BE    ERROR              no valid operand\n* get \"length\"\n         MVC   ERRCODE,=CL2'-2'   preset ReturnCode (=error)\n         LM    R5,R6,8(R10)\n         LTR   R6,R6\n         BM    ERROR              \"parameter\" missing\n         BZ    ERROR              null \"string\"\n         BCTR  R6,0               LengthCode\n         EX    R6,EXPACK\n         CVB   R7,D\n         LTR   R7,R7\n         BZ    ERROR              null \"value\"\n         TM    FLAG,@OBTAIN\n         BO    A100\n* else RELEASE\n* get  \"address\" (RELEASE)\n         MVC   ERRCODE,=CL2'-4'   preset ReturnCode (=error)\n         LA    R10,8(R10)\n         LM    R5,R6,8(R10)\n         LTR   R6,R6\n         BM    ERROR              \"parameter\" missing\n         BZ    ERROR              null \"string\"\n         BCTR  R6,0               LengthCode\n         EX    R6,EXPACK\n         CVB   R5,D\n         LTR   R5,R5\n         BZ    ERROR              null \"value\"\n         STORAGE RELEASE,LENGTH=(7),ADDR=(5),RTCD=RC,COND=YES,SP=1\n         LA    R1,1\n         MVI   EVALBLOCK_EVDATA,C'0'\n         LTR   R15,R15\n         BZ    A110\n         MVC   ERRCODE,=CL2'-5'   RELEASE error\n         B     ERROR\nA100     MVC   ERRCODE,=CL2'-6'   preset ReturnCode (=error)\n         STORAGE OBTAIN,LENGTH=(7),ADDR=(5),SP=1,LOC=ANY\n         CVD   R5,D\n         OI    D+7,X'0F'\n         UNPK  EVALBLOCK_EVDATA(15),D\n         LA    R1,15\nA110     ST    R1,EVALBLOCK_EVLEN   entry size\n         LTR   R15,R15\n         BNZ   ERROR\nEOJ      DS    0H                      job end\n         L     R13,4(R13)              restore A(old save-area)\n         RETURN (14,12),RC=0\nERROR    LA    R15,2              length\n         ST    R15,EVALBLOCK_EVLEN   entry size\n         MVC   EVALBLOCK_EVDATA(2),ERRCODE\n         B     EOJ\n*\nRC       DS    F\nERRCODE  DS    H\nFLAG     DS    X\n@OBTAIN  EQU   X'01'\n@RELEASE EQU   X'02'\nEXPACK   PACK  D,0(0,R5)\nD        DS    0D,PL8\n*\n         TITLE 'DSECTS'\n         IRXEFPL\n         IRXEVALB\n         IRXARGTB\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT791/FILE791.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT791", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}