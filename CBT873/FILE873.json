{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013149000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1058148, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE873.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1058148, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE873.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x12\\x06'", "DS1TRBAL": "b'\\x97\\x8a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07w\\x00\\x0b\\x07x\\x00\\x0e\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00#\\x01\\x185O\\x01\\x185O\\x15G\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2018-12-20T00:00:00", "modifydate": "2018-12-20T15:47:23", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  873\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE873\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 37 MEMBERS COUNTED; CUMULATIVE SIZE IS 9,481 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/20/18    15:47:23    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$ULUNOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00V\\x01\\x124o\\x01\\x15\\x02\\x7f\\x15R\\x01\\xad\\x00\\xca\\x00\\x00\\\\\\xd5\\xd6\\xe3\\xc5\\xe2\\\\@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2015-01-27T15:52:56", "lines": 429, "newlines": 202, "modlines": 0, "user": "*NOTES*"}, "text": "Notes on the ULUT accessing method to scan UCB's.\n\nIntroduction.\n\nGilbert Saint-flour discovered this IBM internal technique for doing\nnon-authorized scans of REAL UCB's.  IBM keeps a real UCB Lookup Table\n(called the ULUT), in above-the-line storage.  The format of this\ntable is not guaranteed.  IBM can change the format at will, but they\nhave established \"types\" (or formats) of ULUT table.  Currently, as\nof this writing, there are two ULUT types, type X'01' and type X'02'.\nPlus, there is now an added type X'03', with the ULUT table being\nmoved to 64-bit storage.\n\nIf you want to check the format of the ULUT, you first look for which\n\"type\" it is, and then you know what to do.  You do not have to check\nthe system level.  Knowing the ULUT TYPE is enough.\n\nHowever, you must also check if the ULUT is in 64-bit storage\n(addressable via doubleword address) or in 31-bit storage (addressable\nby fullword address).  The way to do that is to look in the IOVT\n(I/O Vector Table).\n\nThe IOVT is addressable from the CVT.\n\n    CVT + X'7C'    points to the IXAVL.\n    IXAVL + X'D0'  points to the IOVT.\n\nThe IOVT is an OCO control block.  But we know enough about it, to\ndo what we need.  The IOVT contains two possible addresses to the ULUT.\n\n    IOVT + X'8'    is a fullword address.  If it is non-zero, then\n                   it points to a 31-bit ULUT and you don't have to\n                   do any more work to find the ULUT.  31-bit ULUT's\n                   are either Type X'01' or Type X'02'.\n\n    IOVT + X'1B8'  contains a doubleword pointer.  If the fullword\n                   pointer at IOVT + X'8' is zeroes, then this\n                   doubleword pointer will be populated, and it will\n                   point to the ULUT in 64-bit storage.  Such a ULUT\n                   will be Type X'03' or higher.\n\nThe ULUT Type 1 has extended at least as far back as ESA 5.2.2 which\nis pre-Y2K.  The ULUT Type 2 has extended at least as far forward as\nz/OS 2.1, without PTF UA90741 installed.  The 64-bit ULUT coding was\noriginally intended to be deployed in z/OS 2.2, but it was retrofitted\nto z/OS 2.1 and z/OS 1.13 with PTFs, as follows.\n\n    z/OS 2.1   -  PTF UA90741\n    z/OS 1.13  -  PTF UA90740, for HBB7780\n    z/OS 1.13  -  PTF UA90742, for JBB778H, on top of UA90740\n\nSTRUCTURE OF THE ULUT:\n\nThe ULUT consists of two parts.  First is a bunch of fields containing\ngeneral quantities, such as the total number of entries in the table,\nand the number of entries in each device category, such as DASD, TAPE,\nand so forth.  After that, there is the device table itself, describing\nall the devices.  We will refer to the device table itself as the table\nof entries, or the ULUT table entries.\n\nFor both ULUT types, the format of the 12-byte ULUT table entries\nappears to be the same.\n\n   ULUT table entries are 12 bytes in length. No change in format.\n\n     The first halfword is the unit number in hex.\n     The second halfword consists of flags.\n     The third halfword is a sequence counter number in the table.\n     The fourth halfword is probably unused for now.\n     The next fullword contains the real UCB address of the unit.\n\n     Example:\n\n          0A80 4000 010D 0000 00F511D0\n\n          unit flag coun-     real UCB\n          addr      ter       address\n\nIn order to read the ULUT table entries, you look at the first\nhalfword of the table entry which is the hex device address, and the\nlast fullword of the ULUT table entry, which points to the real UCB.\n\nThe UCB itself, contains, or points to, related areas that tell you\njust about anything you need to know about that particular device.\nSo the main guts of each ULUT table entry is the hex device number,\nand the address of the real UCB which defines that device.\n\nThe general ULUT control block itself, is accessed by the following\ninstructions, which have to execute in 31-bit mode (AMODE 31).\nWe have condensed this sequence of instructions into a relatively\neasy-to-use macro, called ULUINIT.  We will explain more about\nour ULUINIT macro later.  For now, here are the instructions that\nare used to get the address of the entire ULUT table, and to\nafterwards point to the address of the first 12-byte ULUT table entry.\n\nThe following coding applies to 31-bit ULUT's only.  To see the\nproper coding for 64-bit ULUT's see the code in the ULUINIT macro.\nIt is as follows:\n\nYou first check if IOVT+8 (fullword) is zero, and then you look at\nIOVT+X'1B8' which is a doubleword, to point to the 64-bit ULUT.\nRemember that 64-bit addresses have to be referred to with 64-bit\ninstructions, in 64-bit addressing mode (say, after a SAM64).\nAnd the high-order bit in a 31-bit address has to be zeroed first,\nbefore entering 64-bit addressing mode.\n\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R3,16                  CVT\n         L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM\n         L     R3,X'D0'(,R3)          IOVT\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out.\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 1.13.  So it is really quite stable, so far.     *\n* ------------------------------------------------------------------ *\nULUTTYP1 L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         B     LOOPSET\nULUTTYP2 L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n*        B     LOOPSET\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n\n\nI invented the ULUDSECT control block for the purpose of simplifying\nthe process of reading through all the devices defined in the UCB\nLookup Table.  Instead of looking at the UCB itself and extracting\nany fields we want to look at, our ULUSCAN macro pre-extracts commonly\nused fields from the UCB and related control blocks, in one process,\nputting all this information into the ULUDSECT control block.  Then,\nmost subsequent inquiries from the UCB actually go to ULUDSECT fields,\nwhich were obtained from the UCB by the ULUSCAN macro's action.  To\nput it another way, we might say that the ULUSCAN macro \"pre-digests\"\nthe UCB information, before we make our inquiries.\n\nThe ULUINIT macro requires a 88-byte workarea, which contains the\ncontrol block described by the ULUDSECT macro.  The fields of the\nULUDSECT control block are actually filled by two macros:  ULUINIT\ninitially, and then ULUSCAN later.  The ULUINIT macro is executed\nonce, to establish the ULUDSECT control block and to fill in its fields\nrelating to the whole ULUT control block itself.  The ULUSCAN macro\nthen reads each individual 12-byte ULUT table entry corresponding to\neach individual device, \"pre-digesting\" its UCB fields and placing\nthem into the ULUDSECT control block.\n\nThe ULUSCAN macro is therefore executed repeatedly, one time for each\ndevice defined in that system.\n\nThe contents of the ULUDSECT control block follows below (old format).\nFor the new format, see the new macro in this pds.\n\nTo be clearer, the ULUINIT macro establishes the ULUDSECT control block\nand fills in those fields NOT having to do with each UCB, but with the\nULUT control block in general.  The ULUSCAN macro then fills in all\nULUDSECT fields which have to do with each ULUT table entry (that is,\neach particular UCB).\n\nYou can see that everything necessary to describe a device (i.e. a\nUCB) can be obtained from the contents of ONE ULUDSECT entry.  To\nscan all the UCB's on a system, you run the ULUSCAN macro to step\nthrough the ULUT table entries, one at a time, pre-digesting each\none's UCB information and putting it into the ULUDSECT control block.\n\nAPF-authorization is not necessary to do this, but the scan must be\ndone in 31-bit mode.  Here is what the ULUDSECT control block looks\nlike.\n\nULUDSECT DSECT\n         DS    0D            Align to doubleword for GETMAIN\nULUDULUT DS    F             Address of ULUT in this system\nULUDCURR DS    F             Current ULUT table entry address\nULUDNEXT DS    F             Next ULUT table entry address\nULUDTOTC DS    F             Total count of ULUT entries\nULUDRUNC DS    F             Running descending count of ULUT entries\n*                             (initialized to ULUDTOTC at beginning)\nULUDDEVA DS    H             Device address of current table entry\nULUDCNTR DS    H             Counter in ULUT of current table entry\n*                             This is one higher than the table entry\n*                             count, and is incremented by one with\n*                             each successive table entry.  The count\n*                             field for the very last table entry,\n*                             is X'0000', marking the end of the table.\nULUDUCBA DS    F             UCB address of current table entry\nULUDCEXT DS    F             Address of this UCB's common extension\nULUDDEVT DS    F             UCB device type (4 bytes)\nULUDONLF DS    X             UCB + 3 (device online has X'80' set)\nULUDTYPE DS    X             ULUT TYPE for this table\nULUDRSV1 DS    2X            RESERVED\nULUDSVR0 DS    F             Save area for R0 in macro invocation\nULUDSVR1 DS    F             Save area for R1 in macro invocation\nULUDSVUR DS    F             Save USING register for workarea\nULUDSVW1 DS    F             Save first work register\nULUDSVW2 DS    F             Save second work register\nULUDSVBR DS    F             Save BCT register\n         DS    0D\nULUDLENG EQU   *-ULUDSECT\n\n\nNow I have to show you how to use our ULUT access macros, ULUINIT\nand ULUSCAN.  A complete coding example is included in this pds.\nThis is the TSO command called ULUDIAG.  The TSO command ULUDIAG\nwill display all relevant ULUDSECT fields for each defined UCB (ULUT\ntable entry).  Here is an example of ULUDIAG output:  The output was\nproduced by the coding example below it, with the print lines being\ndone by means of the PUTENTRY subroutine.\n\n             ULUDIAG - V1.0 - PRINT ULUDSECT FIELDS\n             -------   ----   ----- -------- ------\n             ***       DEV ADDRESS: 000C        ***\nULUDULUT 02281F90  ULUDCURR 02282114  ULUDNEXT 02282120  ULUDDEVA 000C\nULUDUCBA 00F46140  ULUDCEXT 00F46118  ULUDDEVT 10000801  ULUDCNTR 0002\nULUDTOTC 00000183  ULUDRUNC 00000183  ULUDONLF 80        ULUDTYPE 02\n             ***       DEV ADDRESS: 000E        ***\nULUDULUT 02281F90  ULUDCURR 02282120  ULUDNEXT 0228212C  ULUDDEVA 000E\nULUDUCBA 00F46180  ULUDCEXT 00F46158  ULUDDEVT 10000808  ULUDCNTR 0003\nULUDTOTC 00000183  ULUDRUNC 00000182  ULUDONLF 80        ULUDTYPE 02\n             ***       DEV ADDRESS: 000F        ***\nULUDULUT 02281F90  ULUDCURR 0228212C  ULUDNEXT 02282138  ULUDDEVA 000F\nULUDUCBA 00F461C0  ULUDCEXT 00F46198  ULUDDEVT 10000808  ULUDCNTR 0000\nULUDTOTC 00000183  ULUDRUNC 00000181  ULUDONLF 00        ULUDTYPE 02\n             ***       DEV ADDRESS: 0120        ***\nULUDULUT 02281F90  ULUDCURR 02282138  ULUDNEXT 02282144  ULUDDEVA 0120\nULUDUCBA 00F46248  ULUDCEXT 00F46220  ULUDDEVT 3030200E  ULUDCNTR 0005\nULUDTOTC 00000183  ULUDRUNC 00000180  ULUDONLF 04        ULUDTYPE 02\n             ***       DEV ADDRESS: 0121        ***\nULUDULUT 02281F90  ULUDCURR 02282144  ULUDNEXT 02282150  ULUDDEVA 0121\nULUDUCBA 00F462E0  ULUDCEXT 00F462B8  ULUDDEVT 3030200E  ULUDCNTR 0006\nULUDTOTC 00000183  ULUDRUNC 0000017F  ULUDONLF 04        ULUDTYPE 02\n                  *** *** *** *** *** *** ***\n                  *** *** *** *** *** *** ***\n             ***       DEV ADDRESS: 0A80        ***\nULUDULUT 02281F90  ULUDCURR 02282D98  ULUDNEXT 02282DA4  ULUDDEVA 0A80\nULUDUCBA 00F501D0  ULUDCEXT 00F501A8  ULUDDEVT 3030200F  ULUDCNTR 010D\nULUDTOTC 00000183  ULUDRUNC 00000078  ULUDONLF 8E        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A81        ***\nULUDULUT 02281F90  ULUDCURR 02282DA4  ULUDNEXT 02282DB0  ULUDDEVA 0A81\nULUDUCBA 00F50268  ULUDCEXT 00F50240  ULUDDEVT 3030200F  ULUDCNTR 010E\nULUDTOTC 00000183  ULUDRUNC 00000077  ULUDONLF 8C        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A82        ***\nULUDULUT 02281F90  ULUDCURR 02282DB0  ULUDNEXT 02282DBC  ULUDDEVA 0A82\nULUDUCBA 00F50300  ULUDCEXT 00F502D8  ULUDDEVT 3030200F  ULUDCNTR 010F\nULUDTOTC 00000183  ULUDRUNC 00000076  ULUDONLF 8C        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A83        ***\nULUDULUT 02281F90  ULUDCURR 02282DBC  ULUDNEXT 02282DC8  ULUDDEVA 0A83\nULUDUCBA 00F50398  ULUDCEXT 00F50370  ULUDDEVT 3030200F  ULUDCNTR 0110\nULUDTOTC 00000183  ULUDRUNC 00000075  ULUDONLF 84        ULUDTYPE 02\n             ***       DEV ADDRESS: 0A84        ***\nULUDULUT 02281F90  ULUDCURR 02282DC8  ULUDNEXT 02282DD4  ULUDDEVA 0A84\nULUDUCBA 00F50430  ULUDCEXT 00F50408  ULUDDEVT 3030200F  ULUDCNTR 0111\nULUDTOTC 00000183  ULUDRUNC 00000074  ULUDONLF 8C        ULUDTYPE 02\n                  *** *** *** *** *** *** ***\n\n\nNew format for ULUDIAG:  -------  (for 64-bit ULUT and earlier too)\n\n\n             ULUDIAG - V1.3 - PRINT ULUDSECT FIELDS\n             -------   ----   ----- -------- ------\n             ***       DEV ADDRESS: 000C        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00210   ULUDDEVA 000C\nULUDNEXT 000001FF_FFF0021C            ULUDSLV6 E0        ULUDONLF 80\nULUDUCBA 00F47140  ULUDCEXT 00F47118  ULUDDEVT 10000801  ULUDCNTR 0002\nULUDTOTC 00000183  ULUDRUNC 00000183  ULUDONLF 80        ULUDTYPE 03\n             ***       DEV ADDRESS: 000E        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF0021C   ULUDDEVA 000E\nULUDNEXT 000001FF_FFF00228            ULUDSLV6 E0        ULUDONLF 80\nULUDUCBA 00F47180  ULUDCEXT 00F47158  ULUDDEVT 10000808  ULUDCNTR 0003\nULUDTOTC 00000183  ULUDRUNC 00000182  ULUDONLF 80        ULUDTYPE 03\n             ***       DEV ADDRESS: 000F        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00228   ULUDDEVA 000F\nULUDNEXT 000001FF_FFF00234            ULUDSLV6 E0        ULUDONLF 00\nULUDUCBA 00F471C0  ULUDCEXT 00F47198  ULUDDEVT 10000808  ULUDCNTR 0000\nULUDTOTC 00000183  ULUDRUNC 00000181  ULUDONLF 00        ULUDTYPE 03\n             ***       DEV ADDRESS: 0120        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00234   ULUDDEVA 0120\nULUDNEXT 000001FF_FFF00240            ULUDSLV6 E0        ULUDONLF 04\nULUDUCBA 00F47248  ULUDCEXT 00F47220  ULUDDEVT 3030200E  ULUDCNTR 0005\nULUDTOTC 00000183  ULUDRUNC 00000180  ULUDONLF 04        ULUDTYPE 03\n             ***       DEV ADDRESS: 0121        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00240   ULUDDEVA 0121\nULUDNEXT 000001FF_FFF0024C            ULUDSLV6 E0        ULUDONLF 04\nULUDUCBA 00F472E0  ULUDCEXT 00F472B8  ULUDDEVT 3030200E  ULUDCNTR 0006\nULUDTOTC 00000183  ULUDRUNC 0000017F  ULUDONLF 04        ULUDTYPE 03\n             ***    ***    ***    ***    ***    ***\n             ***    ***    ***    ***    ***    ***\n             ***       DEV ADDRESS: 0A80        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00E94   ULUDDEVA 0A80\nULUDNEXT 000001FF_FFF00EA0            ULUDSLV6 E0        ULUDONLF 8E\nULUDUCBA 00F511D0  ULUDCEXT 00F511A8  ULUDDEVT 3030200F  ULUDCNTR 010D\nULUDTOTC 00000183  ULUDRUNC 00000078  ULUDONLF 8E        ULUDTYPE 03\n             ***       DEV ADDRESS: 0A81        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EA0   ULUDDEVA 0A81\nULUDNEXT 000001FF_FFF00EAC            ULUDSLV6 E0        ULUDONLF 8C\nULUDUCBA 00F51268  ULUDCEXT 00F51240  ULUDDEVT 3030200F  ULUDCNTR 010E\nULUDTOTC 00000183  ULUDRUNC 00000077  ULUDONLF 8C        ULUDTYPE 03\n             ***       DEV ADDRESS: 0A82        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EAC   ULUDDEVA 0A82\nULUDNEXT 000001FF_FFF00EB8            ULUDSLV6 E0        ULUDONLF 8C\nULUDUCBA 00F51300  ULUDCEXT 00F512D8  ULUDDEVT 3030200F  ULUDCNTR 010F\nULUDTOTC 00000183  ULUDRUNC 00000076  ULUDONLF 8C        ULUDTYPE 03\n             ***       DEV ADDRESS: 0A83        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EB8   ULUDDEVA 0A83\nULUDNEXT 000001FF_FFF00EC4            ULUDSLV6 E0        ULUDONLF 8C\nULUDUCBA 00F51398  ULUDCEXT 00F51370  ULUDDEVT 3030200F  ULUDCNTR 0110\nULUDTOTC 00000183  ULUDRUNC 00000075  ULUDONLF 8C        ULUDTYPE 03\n             ***       DEV ADDRESS: 0A84        ***\nULUDULUT 000001FF_FFF00000  ULUDCURR 000001FF_FFF00EC4   ULUDDEVA 0A84\nULUDNEXT 000001FF_FFF00ED0            ULUDSLV6 E0        ULUDONLF 8C\nULUDUCBA 00F51430  ULUDCEXT 00F51408  ULUDDEVT 3030200F  ULUDCNTR 0111\nULUDTOTC 00000183  ULUDRUNC 00000074  ULUDONLF 8C        ULUDTYPE 03\n             ***    ***    ***    ***    ***    ***\n\n\nNext is the piece of code which produced the above report.  This\nshows how useful the ULUINIT and ULUSCAN macros are, and how they\nsimplify the coding in this program.  (Almost exactly the same as\nwith the old version of the ULUDIAG program.  The difference is in\nthe LLGTR instruction and the specific coding of the PUTENTRY routine.\n\nPlease notice how simple this coding is.\n\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10                Clear bit 32 from base register\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n*\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n         BAL   R7,PUTENTRY            Print contents of control block\n         MVC   ULUDCURR,ULUDNEXT      Make next entry current\n         BCT   R6,LOOPUCB             Get stuff for next table entry.\n         B     EXIT0                  End of table. Fall thru.\n\nMECHANISM OF OPERATION:\n\nThe ULUDSECT control block contains (or has access to) all the\ninformation that you'll need about one particular device.  The\nfields of the ULUDSECT control block are filled by:\n\n1.  The ULUINIT macro, which creates the ULUDSECT control block\n    and fills those of its fields common to the entire ULUT\n    control block.\n\n2.  The ULUSCAN macro, which fills in all fields in the ULUDSECT\n    having to do with ONE UCB, pointed to by ONE ULUT table entry.\n\nAfter you invoke the ULUINIT macro once, you then invoke the ULUSCAN\nmacro repeatedly.  Each invocation of the ULUSCAN macro gives you\ninformation about ONE device, represented by ONE UCB, pointed to\nby ONE 12-byte ULUT table entry.\n\nThe above code works by doing a complete search of ALL defined\ndevices.  It \"marches\" completely through the entire ULUT table,\nfrom beginning to end.  Each invocation of the ULUSCAN macro gives\ninformation from ONE ULUT table entry, which points to ONE UCB,\nthat represents ONE device.\n\nEach time the ULUSCAN macro is invoked, it fills the fields of the\nULUDSECT control block with a lot of information extracted from, or\nderived from, that UCB.  You can picture this situation by saying that\nthe ULUSCAN macro \"pre-digests\" information from each UCB, putting\nthe \"digested\" information into the ULUDSECT control block.\n\nTo step through the ULUT (UCB Lookup Table), from one entry to the\nnext, just move the ULUDNEXT field (pointing to the NEXT ULUT table\nentry) into the ULUDCURR field (meaning the current ULUT table entry)\nand reinvoke the ULUSCAN macro, to refill all the ULUDSECT fields for\nthe next UCB.  Then your program will go process the new UCB's\ninformation.  Do this until you've reached the end of the ULUT table.\n\nWhere is the end of the table?  It is found by COUNTING.\n\nThe total number of entries in the ULUT table, extracted from a field\nin the ULUT control block, is loaded into the BREG register by the\nULUINIT macro.  This register can be used later as a BCT register to\ncount through all the table entries, that exact number of times.  The\nULUSCAN macro does not automatically do a partial search, as yet,\nlike IBM's UCBSCAN macro can do.  (UCBSCAN does all the selections\nunder the covers, but in reality, it also does a complete search of\nall UCB's, much of the time).\n\nSelection of devices, for example, only those which are online, is\ndone while that device's ULUT table entry is being processed by the\nULUSCAN macro.  The ULUSCAN macro loads that device's UCB information\ninto the fields of the ULUDSECT control block, and the selection is\nusually done by looking somewhere in the ULUDSECT control block, and\nby making a selection decision from one of its fields.\n\nFor example, to see if a device is online, the ULUDONLF field, which\nthe ULUSCAN macro extracts from that device's UCB+3, is examined for\nthe X'80' bit.  If that bit is on, then the device is online.  If\nnot, then the device is offline.  All other selection criteria are\ndone, using fields created from that unit's UCB, and which have\nalready been loaded into the ULUDSECT control block by the ULUSCAN\nmacro.  Then, when you've finished with that particular UCB, you loop\nback to the next ULUT table entry and invoke the ULUSCAN macro again,\nto get information from the next UCB.  ULUSCAN refills the ULUDSECT\ncontrol block with new information from the next device's UCB (the\nnext ULUT table entry).  Then you look at that one.  And so on, until\nyou've searched through the entire ULUT table, and you've seen all\nthe defined devices.\n\nThe advantage of doing all of this, is that you can do a complete\nscan of all the real UCB's, without having to be APF-authorized.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE873": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x16\\x01\\x185O\\x01\\x185O\\x15G\\x00\\x90\\x00\\x90\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2018-12-20T00:00:00", "modifydate": "2018-12-20T15:47:16", "lines": 144, "newlines": 144, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 873 is from Sam Golob, and contains programs and macros   *   FILE 873\n//*           to help you do non-APF-authorized UCB scans of real   *   FILE 873\n//*           UCB's, using the ULUT (UCB Lookup Table), an          *   FILE 873\n//*           undocumented IBM interface that was researched by     *   FILE 873\n//*           Gilbert Saint-flour.                                  *   FILE 873\n//*                                                                 *   FILE 873\n//*       If the UCB's are not going to be changed, there is        *   FILE 873\n//*       negligible harm in obtaining them this way.  I think      *   FILE 873\n//*       that you don't have to PIN what you are not going to      *   FILE 873\n//*       change.                                                   *   FILE 873\n//*                                                                 *   FILE 873\n//*       Several macros:  ULUINIT and ULUSCAN, were created        *   FILE 873\n//*        to simplify the coding of programs that use this         *   FILE 873\n//*        UCB lookup method.  ULUDSECT describes the work          *   FILE 873\n//*        area used by ULUINIT and ULUSCAN.                        *   FILE 873\n//*                                                                 *   FILE 873\n//*       The 31-bit versions of these programs were tested         *   FILE 873\n//*       to work on MVS systems ranging from ESA 5.2.2 thru        *   FILE 873\n//*       z/OS 2.1 (before the PTFs described below).               *   FILE 873\n//*                                                                 *   FILE 873\n//*       For ULUT Type 3 (and later), the ULUT is now located      *   FILE 873\n//*       in 64-bit storage.  This is for z/OS 2.2, and for         *   FILE 873\n//*       PTF levels in z/OS 2.1 and 1.13.  (UA90741 - PUT 1412)    *   FILE 873\n//*                                                                 *   FILE 873\n//*          UA90741 - HBB7790 - z/OS 2.1                           *   FILE 873\n//*          UA90740 - HBB7780 - z/OS 1.13                          *   FILE 873\n//*          UA90742 - JBB778H - z/OS 1.13 - on top of UA90740      *   FILE 873\n//*                                                                 *   FILE 873\n//*       The 64-bit ULUT load modules of our programs were         *   FILE 873\n//*       tested on systems ranging from z/OS 1.2 thru z/OS 2.2.    *   FILE 873\n//*                                                                 *   FILE 873\n//*       To assemble these programs, the assembler needs to        *   FILE 873\n//*       recognize 64-bit instructions:  SAM64, SAM31, LLGTF,      *   FILE 873\n//*       LG, STG, and so forth.  The operating system level        *   FILE 873\n//*       needs to recognize the new opcodes.  (X'01' for SAM64     *   FILE 873\n//*       and SAM31, and so forth.)                                 *   FILE 873\n//*                                                                 *   FILE 873\n//*       For a thorough explanation, please see the pds            *   FILE 873\n//*       member $ULUNOTE, and look at the new code in the          *   FILE 873\n//*       ULUINIT, ULUSCAN, and ULUDSECT macros.                    *   FILE 873\n//*                                                                 *   FILE 873\n//*       Included also: IOSDULUT (ULUT type 1) and                 *   FILE 873\n//*                      IOSDULU2 (ULUT type 2)                     *   FILE 873\n//*                      IOSDULU3 (ULUT type 3) macros              *   FILE 873\n//*                      IOSDIOVT (IOVT after UA90741 applied)      *   FILE 873\n//*                                                                 *   FILE 873\n//*       from the SHOWzOS macro library (CBT File 492),            *   FILE 873\n//*       which describe the formats of the ULUT, and the           *   FILE 873\n//*       new format of the IOVT.                                   *   FILE 873\n//*                                                                 *   FILE 873\n//*       From Mark Zelden:                                         *   FILE 873\n//*                                                                 *   FILE 873\n//*       TSOB  -  REXX exec to capture TSO output and BROWSE       *   FILE 873\n//*       TSOE  -  REXX exec to capture TSO output and EDIT         *   FILE 873\n//*       TSOR  -  REXX exec to capture TSO output and REVIEW       *   FILE 873\n//*                 this works in READY mode if you install         *   FILE 873\n//*                 the REVIEW TSO command from File 134, 135.      *   FILE 873\n//*       TSOV  -  REXX exec to capture TSO output and VIEW         *   FILE 873\n//*                                                                 *   FILE 873\n//*       To distinguish between a 31-bit ULUT and a 64-bit ULUT:   *   FILE 873\n//*                                                                 *   FILE 873\n//*       If IOVT + X'8' (a fullword) is zero, then the ULUT        *   FILE 873\n//*       will be 64-bit, and pointed to by IOVT + X'1B8', which    *   FILE 873\n//*       is a doubleword address of the ULUT in 64-bit storage.    *   FILE 873\n//*       If IOVT + X'8' is not zero, then it points to the ULUT    *   FILE 873\n//*       in 31-bit storage, and IOVT + X'1B8' will be zeroes.      *   FILE 873\n//*                                                                 *   FILE 873\n//*       Also included are some sample images of a ULUT            *   FILE 873\n//*       control block, both for Type 1 and Type 2, from           *   FILE 873\n//*       actual systems, so you can see how they really            *   FILE 873\n//*       look.  These were not updated for ULUT Type 3, but        *   FILE 873\n//*       their appearance is similar for Type 3.                   *   FILE 873\n//*                                                                 *   FILE 873\n//*       email:  sbgolob@cbttape.org    or                         *   FILE 873\n//*               sbgolob@attglobal.net                             *   FILE 873\n//*                                                                 *   FILE 873\n//*       Description of new macros and DSECT:                      *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUDSECT - This is a macro describing a control block     *   FILE 873\n//*                  which contains all necessary information to    *   FILE 873\n//*                  extract what has been gotten from a UCB.       *   FILE 873\n//*                  The ULUDSECT \"pre-digests\" each UCB defined    *   FILE 873\n//*                  by a ULUT table entry.  You place a work       *   FILE 873\n//*                  area in your program (currently 88 bytes)      *   FILE 873\n//*                  to contain this information.                   *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUINIT  - Macro to get access to the ULUT table and      *   FILE 873\n//*                  its entries.  Then it fills some of the        *   FILE 873\n//*                  fields in the ULUDSECT--the ones which         *   FILE 873\n//*                  have to do with the ULUT in general, and       *   FILE 873\n//*                  not the ones having to do with each table      *   FILE 873\n//*                  entry (i.e. the ones relevant to each UCB).    *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUSCAN  - Macro to fill in all the UCB-specific fields   *   FILE 873\n//*                  in the ULUDSECT.  If you want to do a scan     *   FILE 873\n//*                  of all UCB's defined, you loop through the     *   FILE 873\n//*                  ULUSCAN macro repeatedly, with the work area   *   FILE 873\n//*                  data changed for each invocation.              *   FILE 873\n//*                                                                 *   FILE 873\n//*       Some sample programs have been included, to show the      *   FILE 873\n//*       power of the ULUINIT and ULUSCAN macros, which simplify   *   FILE 873\n//*       coding of programs when using the ULUT method of UCB      *   FILE 873\n//*       scanning.                                                 *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUDIAG  - Display the relevant contents of the ULUDSECT  *   FILE 873\n//*                  fields for all defined devices.  It is         *   FILE 873\n//*                  instructive to run this program on your own    *   FILE 873\n//*                  system, while you are coding other programs    *   FILE 873\n//*                  using this method.                             *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUDASD  - Adaptation of the UCBDASD program from File    *   FILE 873\n//*                  731 to use the ULUINIT and ULUSCAN macros.     *   FILE 873\n//*                  (Fixed by George Pavlik to indicate SMS.)      *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUTAPE  - Adaptation of the UCBTAPE program from File    *   FILE 873\n//*                  731 to use the ULUINIT and ULUSCAN macros.     *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUTYPE  - TSO command to list defined devices by type.   *   FILE 873\n//*                                                                 *   FILE 873\n//*       ULUVOLS  - A much simplified version of ULUDASD.          *   FILE 873\n//*                                                                 *   FILE 873\n//*       When converting these programs to 64-bit ULUTs, as        *   FILE 873\n//*       opposed to the 31-bit ones that were previously used,     *   FILE 873\n//*       it is the author's experience that once the ULUINIT,      *   FILE 873\n//*       ULUSCAN, and ULUDSECT macros were changed to              *   FILE 873\n//*       accommodate ULUT Type 3, the ULUDASD and ULUTAPE          *   FILE 873\n//*       programs needed almost no modification.  The only         *   FILE 873\n//*       problem encountered was that the base register in         *   FILE 873\n//*       31-bit mode had the high-order bit set to one, so that    *   FILE 873\n//*       before 64-bit mode was entered, that bit had to be        *   FILE 873\n//*       zeroed first.  The LLGTF Rx,Rx instruction had to be      *   FILE 873\n//*       used against any register which would locate a            *   FILE 873\n//*       quantity via base-displacement while running in 64-bit    *   FILE 873\n//*       addressing mode.  Therefore you will see in the           *   FILE 873\n//*       programs:   LLGTF R10,R10  directly befoe the ULUINIT     *   FILE 873\n//*       macro invocaton.                                          *   FILE 873\n//*                                                                 *   FILE 873\n//*       If anyone out there writes programs using this method     *   FILE 873\n//*       of UCB scanning, it would be appreciated if you notify    *   FILE 873\n//*       us about them, so that (with your permission) they may    *   FILE 873\n//*       be included in this tape.                                 *   FILE 873\n//*                                                                 *   FILE 873\n//*           email:   sbgolob@cbttape.org                          *   FILE 873\n//*                                                                 *   FILE 873\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IOSDIOVT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x146/\\x01\\x15\\x02\\x7f\\x120\\x00>\\x00>\\x00>\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-12-28T00:00:00", "modifydate": "2015-01-27T12:30:34", "lines": 62, "newlines": 62, "modlines": 62, "user": "SHOW722"}, "text": "         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTUL31 DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVTULUT DS    D                       UCB V3 look-up table      JH1214\n         ORG   ,                                                 JH1214\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULUT": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x19\\x0f\\x01\\x12\\x19\\x0f\\x133\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-08T00:00:00", "modifydate": "2012-07-08T13:33:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "SHOW721"}, "text": "         MACRO\n         IOSDULUT\nULUT     DSECT                         UCB Look-up Table         ESA41\n         DS    C'ULUT'\nULUTVERS DS    X                       version 1 or 2            RS0405\n         DS    AL1(245)                Subpool\n         DS    XL2,F                   UNUSED,DASB\nULUT1ST  DS    A(ULUENTRY)             FIRST LOOK-UP ENTRY\nULUTUCBC DS    F'561'                  Total number of LOOK-UP Entries\nULUTTAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULUTCOMM DS    F'032'                  number of COMM LOOK-UP Entries\nULUTDASD DS    F'256'                  number of DASD LOOK-UP Entries\nULUTDISP DS    F'128'                  number of DISP LOOK-UP Entries\nULUTUREC DS    F'032'                  number of UREC LOOK-UP Entries\nULUTCHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULUTCTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULUT+132\nULUENTRY DSECT                         UCB LOOK-UP ENTRY\nULUEDEVN DS    X'000D'                 DEVICE NUMBER\nULUEFLGS DS    X'4000'                 Flags\nULUEDYN   EQU  X'40'                   Dynamic UCB\nULUESEQN DS    XL2                     ?\n         DS    XL2                     ?\nULUEUCBP DS    V(UCBOB)                UCB ADDRESS\nULUELEN  EQU   *-ULUENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULU2": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12\\x19\\x0f\\x01\\x12\\x19\\x0f\\x133\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-08T00:00:00", "modifydate": "2012-07-08T13:33:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SHOW721"}, "text": "         MACRO\n         IOSDULU2\nULU2     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU2VERS DS    X                       version 1 or 2\n         DS    AL1(245)                Subpool\n         DS    XL2,F                   UNUSED,DASB\n         DS    F,F\nULU21ST  DS    A(UL2ENTRY)             FIRST LOOK-UP ENTRY\nULU2UCBC DS    F'561'                  Total number of LOOK-UP Entries\nULU2TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU2COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU2DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU2DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU2UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU2CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU2CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU2+264\nUL2ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL2EDEVN DS    X'000D'                 DEVICE NUMBER\nUL2EFLGS DS    X'4000'                 Flags\nUL2EDYN   EQU  X'40'                   Dynamic UCB\nUL2ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL2EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL2ELEN  EQU   *-UL2ENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOSDULU3": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x146/\\x01\\x146/\\x08T\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc8\\xd6\\xe6\\xf7\\xf2\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-12-28T00:00:00", "modifydate": "2014-12-28T08:54:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "SHOW722"}, "text": "         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOB": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 786, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00I\\x01\\x07\\x11\\x7f\\x01\\x11&O\\x01\\x03\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2011-09-21T01:03:49", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUDASD": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00H\\x01\\x12)\\x8f\\x01\\x185O\\x15@\\x02\\xd3\\x00U\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2018-12-20T15:40:48", "lines": 723, "newlines": 85, "modlines": 0, "user": "SBGOLOB"}, "text": "ULUDASD  TITLE 'ULUDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'ULUDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   December 12, 2012.\n*\n*        DATE UPDATED.   January 26, 2015.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*            This program was adapted from the UCBDASD program,\n*            to use the ULUINIT and ULUSCAN macros that simplify\n*            the coding.\n*\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    z/OS 1.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n*        2012/12/12 - V1.5 - Use ULUINIT and ULUSCAN macros.\n*\n*        2015/01/26 - V1.6 - ULUT Type 3 64-bit support.\n*\n*        2018/12/18 - V1.7 - (from George Pavlik) Add check if the\n*                            DASD volume is SMS-managed.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\nULUDASD  CSECT\nULUDASD  RMODE ANY\nULUDASD  AMODE 31\n         USING *,R10,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'ULUDASD'\n         DC    CL6' V1.7 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LA    R12,4095(,R10)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS(L'BLANKS),BLANKS-1\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10                Clear bit 32 from base register\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA            Get real UCB address for unit.\n         TM    ULUDDEVT+2,X'20'       Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    ULUDONLF,X'80'         Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1\n*   - - - - - - - - - - - - - - - -   Start moving stuff in.\n*   - - - - - - - - - - - - - - - -   Begin --------------------------\n*   - - - - - - - - - - - - - - - -   01-24-17 HCHC GEOP added for SMS\n         USING  UCBOB,R5              Addressability to UCB.\n         TM     UCBFL5,UCBSMS         Is the VOL SMS managed?\n         BNO    NONSMS                No, Skip keyword\n         MVC    LINE+73(3),=CL3'YES'  Yes, Say it is SMS managed\n         B      SKIPNSMS              Branch around ..\nNONSMS   MVC    LINE+73(3),=CL3' '    No, put blanks\n*   - - - - - - - - - - - - - - - -   End   --------------------------\n*   - - - - - - - - - - - - - - - -\nSKIPNSMS HEX   LINE+1,2,ULUDDEVA      Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         TM    ULUDDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,ULUDDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    ULUDDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,ULUDUCBA     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R11,DEVTABLE           Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R11),X'00'           End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R11),0(R7)         Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R11,3(,R11)            No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R11)      Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R11,SAVER11A           Save R11 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R11,R11                Clear R11.\n         ICM   R11,B'0011',X'12'(R7)  Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R11,B'0011',=X'FFFE'   ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R11,B'1111',X'38'(R7)  get DCEHICY or                V14\n         ICM   R11,B'1111',X'34'(R7)  get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R11,CVDAREA            Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R11,SAVER11A           Restore saved R11.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry\n         BCT   R6,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUDASD - V1.7 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr  SMS'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------  ---'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'0E',C'A '             DCEOBRDT      3380/3390\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER11A DS    F                      Save R11\nCYLCNT   DS    PL4                    Saved cylinder count (not used)\n         DS    X\nBLANKS   DS    CL40\nWORKU    DS    CL100                  64 byte workarea for ULUDSECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUDASD$": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00A\\x01\\x120/\\x01\\x185O\\x15\\x17\\x00\\x1d\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2018-12-20T15:17:41", "lines": 29, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE873  <--ULU*** MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE873(ULUDASD)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ULUDASD\n SETSSI  CB497873\n SETCODE AC(0)\n NAME    ULUDASD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULUDASD#": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\"\\x01\\x125\\x1f\\x01\\x125\\x1f\\x12#\\x00-\\x00(\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-12-16T00:00:00", "modifydate": "2012-12-16T12:23:22", "lines": 45, "newlines": 40, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n\n  The TSO command ULUDASD will display online DASD volumes,\n  and will show some of the properties of each.  A significant\n  display in ULUDASD is the number of cylinders that the\n  volume contains.  The ULUDASD command has also been fixed to\n  show the number of cylinders in Extended Access Volumes (EAV).\n  The UCBDASD program is NOT APF-authorized.\n\n  Note:  ULUDASD has the same functionality as UCBDASD, but the\n         coding uses the ULUT lookup macros from CBT File 873.\n\n\n              ULUDASD - V1.4 - DISPLAY ONLINE DASD\n              -------   ----   ------- ------ ----\n Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attribs  Res DCE Addr\n ----  ------  ------ --------  -----  --------   -------  --- --------\n 0128  WORK80  3380       885   STOR   00F46708       PERM     00F46698\n 0A90  MVSRES  3390-1    1113   PRIV   00F50B50  ALLC PERM RES 00F50AE0\n 0A91  SPOOL1  3390-2    2226   PRIV   00F50BE8       PERM     00F50B78\n 0A93  DATA01  3390-2    2226   PRIV   00F50D18  ALLC PERM     00F50CA8\n 0A94  DATA02  3390-2    2226   PRIV   00F50DB0  ALLC PERM     00F50D40\n 0A95  DATA03  3390-3    3340   PRIV   00F50E48  ALLC PERM     00F50DD8\n 0A96  DATA04  3390-3    3340   PRIV   00F50EE0       PERM     00F50E70\n 0A97  DATA05  3390-3    3340   PRIV   00F50F78  ALLC PERM     00F50F08\n 0A98  DATA06  3390-1    1113   PRIV   00F51010  ALLC PERM     00F50FA0\n 0AA0  WORK01  3390-1    1113   STOR   00F514D0       PERM     00F51460\n\n\n)X SYNTAX  -\n\n       ULUDASD\n\n\n  DEFAULTS - NONE\n  ALIAS    - NONE\n\n\n\n\n)O OPERANDS -\n\n   None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUDASD1": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x12)\\x8f\\x01\\x124\\x7f\\x01D\\x02\\xbc\\x00U\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-12-12T01:44:00", "lines": 700, "newlines": 85, "modlines": 0, "user": "PREVIOU"}, "text": "ULUDASD  TITLE 'ULUDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'ULUDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   December 12, 2012.\n*\n*        DATE UPDATED.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*            This program was adapted from the UCBDASD program,\n*            to use the ULUINIT and ULUSCAN macros that simplify\n*            the coding.\n*\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n*        2012/12/12 - V1.4 - Use ULUINIT and ULUSCAN macros.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\nULUDASD  CSECT\nULUDASD  RMODE ANY\nULUDASD  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'ULUDASD'\n         DC    CL6' V1.4 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA            Get real UCB address for unit.\n         TM    ULUDDEVT+2,X'20'       Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    ULUDONLF,X'80'         Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1\n*   - - - - - - - - - - - - - - - -   Start moving stuff in.\n         HEX   LINE+1,2,ULUDDEVA      Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         TM    ULUDDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,ULUDDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    ULUDDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,ULUDUCBA     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R11,DEVTABLE           Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R11),X'00'           End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R11),0(R7)         Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R11,3(,R11)            No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R11)      Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R11,SAVER11A           Save R11 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R11,R11                Clear R11.\n         ICM   R11,B'0011',X'12'(R7)  Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R11,B'0011',=X'FFFE'   ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R11,B'1111',X'38'(R7)  get DCEHICY or                V14\n         ICM   R11,B'1111',X'34'(R7)  get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R11,CVDAREA            Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R11,SAVER11A           Restore saved R11.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry\n         BCT   R6,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUDASD - V1.4 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER11A DS    F                      Save R11\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nWORKU    DS    CL64                   64 byte workarea for ULUDSECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUDASD2": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00V\\x01\\x12)\\x8f\\x01\\x16\\x02\\x7f X\\x02\\xc6\\x00U\\x00\\x00\\xd5\\xd6`\\xe2\\xd4\\xe2@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2016-01-27T20:58:56", "lines": 710, "newlines": 85, "modlines": 0, "user": "NO-SMS"}, "text": "ULUDASD  TITLE 'ULUDASD - DISPLAY ONLINE DASD VOLUMES USING ULUT'\n********************************************************************\n*        'ULUDASD - DISPLAY ONLINE DASD USING UCB LOOKUP TABLE     *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   December 12, 2012.\n*\n*        DATE UPDATED.   January 26, 2015.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*            This program was adapted from the UCBDASD program,\n*            to use the ULUINIT and ULUSCAN macros that simplify\n*            the coding.\n*\n*        DESCRIPTION.\n*\n*            This TSO command is a quick and dirty display of\n*            online DASD.  The unique thing about it, is that\n*            it does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUDASD        (no parameters currently supported)\n*\n*            This program will display all online DASD.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    z/OS 1.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/09 - V1.1 - Display DCE-related information:\n*                      number of cylinders, device type, etc.\n*                      Use IOSDCXR macro to obtain the real DCE.\n*\n*        2012/11/11 - V1.2 - Cosmetic changes.\n*\n*        2012/11/13 - V1.3 - Didn't correctly find the end of the\n*                            ULUT table before.  Now BCT through\n*                            the count of total entries.\n*\n*        2012/11/14 - V1.4 - Andreas Freybier's modifications for\n*                            EAV (Extended Access Volumes) with\n*                            more than 65535 cylinders.\n*\n*        2012/12/12 - V1.5 - Use ULUINIT and ULUSCAN macros.\n*\n*        2015/01/26 - V1.6 - ULUT Type 3 64-bit support.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\nULUDASD  CSECT\nULUDASD  RMODE ANY\nULUDASD  AMODE 31\n         USING *,R10,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'ULUDASD'\n         DC    CL6' V1.6 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base register.\n         LA    R12,4095(,R10)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS(L'BLANKS),BLANKS-1\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10                Clear bit 32 from base register\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA            Get real UCB address for unit.\n         TM    ULUDDEVT+2,X'20'       Is this UCB for DASD?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    ULUDONLF,X'80'         Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n*   - - - - - - - - - - - - - - - -   Get output line ready for display\n         MVI   LINE-1,X'40'           Clear the output line.\n         MVC   LINE,LINE-1\n*   - - - - - - - - - - - - - - - -   Start moving stuff in.\n         HEX   LINE+1,2,ULUDDEVA      Move unit address to display.\n         MVC   LINE+7(6),X'1C'(R5)    Move VOLSER to display.\n         TM    ULUDDEVT+3,X'0E'       Is this disk a 3380?\n         BO    TRY3390                At least that. Test further.\n         HEX   LINE+15,4,ULUDDEVT     No. Just dump the raw value in.\n*                                     Example:  3030200F  for 3390\n*                                               3030200E  for 3380\nTRY3390  DS    0H\n         TM    ULUDDEVT+3,X'01'       Is it a 3390?\n         BZ    IS3380                 No. It's a 3380.\nIS3390   DS    0H\n         MVC   LINE+15(8),=C'3390    '  Say it's a 3390.\n         B     AFTRTYPE                 And go on.\nIS3380   DS    0H\n         MVC   LINE+15(8),=C'3380    '  Say it's a 3380.\nAFTRTYPE DS    0H                       And go on.\n*   - - - - - - - - - - - - - > > >   Private?  Public?  Storage?\n         TM    X'22'(R5),X'10'        Is the disk mounted PRIVATE?\n         BZ    NOTPRIV                No.\n         MVC   LINE+32(4),=C'PRIV'    Yes. Say so.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the disk mounted PUBLIC?\n         BZ    NOTPUBL                No.\n         MVC   LINE+32(4),=C'PUBL'    Yes. Say so.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the disk mounted STORAGE?\n         BZ    ENDDEVTP               No.\n         MVC   LINE+32(4),=C'STOR'    Yes. Say so.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+39,4,ULUDUCBA     Put the UCB address in display.\n*   - - - - - - - - - - - - - > > >   This unit's attributes ! ! !\n         TM    X'3'(R5),X'08'         Is the unit allocated?\n         BZ    NOTALLOC               No.\n         MVC   LINE+49(4),=C'ALLC'    Yes. Say so.\nNOTALLOC DS    0H\n         TM    X'3'(R5),X'04'         Unit permanently resident?\n         BZ    NOTPERM                No.\n         MVC   LINE+54(4),=C'PERM'    Yes. Say so.\nNOTPERM  DS    0H\n         TM    X'3'(R5),X'02'         Is this unit the SYSRES volume?\n         BZ    NOTSYSRS               No.\n         MVC   LINE+59(3),=C'RES'     Yes. Say so.\nNOTSYSRS DS    0H                     Put out display line for unit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*          Get the DCE address. This will be the real one,          *\n*           because the UCB it came from, is a real UCB.            *\n*           See the documentation in the IOSDCXR macro.             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         STM   R14,R1,IOSDCSAV        Save necessary registers.\n         LR    R1,R5                  IOSDCXR needs UCB addr in R1.\n         IOSDCXR\n         ST    R1,DCEADDR             IOSDCXR returns DCE addr in R1.\n         LM    R14,R1,IOSDCSAV        Restore saved registers.\nLOOPSTRD DS    0H\n         ST    R7,SAVER7B             Save R7.\n         L     R7,DCEADDR             Get DCE address.\n         LA    R7,X'17'(,R7)          Bump to DCEOBRDT.\n         LA    R11,DEVTABLE           Load Device Table.\nLOOPLUPD DS    0H\n         CLI   0(R11),X'00'           End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R11),0(R7)         Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R11,3(,R11)            No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(2),1(R11)      Move in listed device size.\nLOOPENDD DS    0H\n         L     R7,SAVER7B             Restore R7\n         HEX   LINE+63,4,DCEADDR      Print DCE address in hex.\n*  NUMBER OF CYLINDERS   -   below\n         ST    R7,SAVER7C             Save R7 again.\n         ST    R11,SAVER11A           Save R11 too.\n         L     R7,DCEADDR             Load the stored DCE address.\n         XR    R11,R11                Clear R11.\n         ICM   R11,B'0011',X'12'(R7)  Put in the complete low halfword.\n*                                     DCEUDCYL                      V14\n*debug*  HEX   LINE+80,2,X'12'(R7)    Move unit address to display. V14\n         CLM   R11,B'0011',=X'FFFE'   ? more than 65,520 cylinders  V14\n         BNE   SHOW_CYL               no, display this value        V14\n*                                                                   V14\n****     ICM   R11,B'1111',X'38'(R7)  get DCEHICY or                V14\n         ICM   R11,B'1111',X'34'(R7)  get DCEUDCY                   V14\n*                                                                   V14\nSHOW_CYL DS    0H                                                   V14\n         CVD   R11,CVDAREA            Convert to packed decimal.\n         MVC   CYLCNT,CVDAREA+4       Store for safekeeping.\n         MVC   LINE+21(9),MASK9       Move in mask.\n         ED    LINE+21(9),CVDAREA+4   Print the display number.\n         L     R11,SAVER11A           Restore saved R11.\n         L     R7,SAVER7C             Restore saved R7.\n*  NUMBER OF CYLINDERS   -   above\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                                     Now put out the output info.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         APUT  LINE,90\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry\n         BCT   R6,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  end of loop - go through all the UCBs until you're done.         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n*        DROP  R9\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUDASD - V1.6 - DISPLAY ONLINE DASD'\nMESSAGEU DC    C'              -------   ----   ------- ------ ----'\nMESSGSUB DC    C' Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attrx\n               ibs  Res DCE Addr'\nMESSGSUU DC    C' ----  ------  ------ --------  -----  --------   ----X\n               ---  --- --------'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'0E',C'A '             DCEOBRDT      3380/3390\n         DC    X'1E',C'D '             DCEOBRDT      3380/3390\n         DC    X'21',C'J '             DCEOBRDT      3380/3390\n         DC    X'23',C'K '             DCEOBRDT      3380/3390\n         DC    X'2E',C'E '             DCEOBRDT      3380/3390\n         DC    X'26',C'-1'             DCEOBRDT      3380/3390\n         DC    X'27',C'-2'             DCEOBRDT      3380/3390\n         DC    X'24',C'-3'             DCEOBRDT      3380/3390\n         DC    X'32',C'-9'             DCEOBRDT      3380/3390\n         DC    X'3E',C'-A'             DCEOBRDT      3380/3390\n         DC    AL1(00),H'0'            End of table\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER11A DS    F                      Save R11\nCYLCNT   DS    PL4                    Saved cylinder count (not used)\n         DS    X\nBLANKS   DS    CL40\nWORKU    DS    CL100                  64 byte workarea for ULUDSECT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUDIAG": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\t\\x01\\x12)\\x8f\\x01\\x15\\x02\\x7f\\x006\\x02C\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-27T00:36:09", "lines": 579, "newlines": 85, "modlines": 0, "user": "UA90741"}, "text": "ULUDIAG  TITLE 'ULUDIAG - DISPLAY ULUDSECT FOR ALL DEFINED DEVICES'\n         GBLB  &Z22DEFD\n********************************************************************\n* ------------------------------------------------------------------- *\n*     DIAGNOSTIC PROGRAM TO DISPLAY ULUDSECT CONTROL BLOCK FOR        *\n*                    ALL DEFINED UCB'S                                *\n* ------------------------------------------------------------------- *\n********************************************************************\n*                                                                  *\n*        WRITTEN BY.     Sam Golob                                 *\n*                                                                  *\n*        DATE WRITTEN.   December 11, 2012.                        *\n*                                                                  *\n*        DATE UPDATED.   January 26, 2015.                         *\n*                                                                  *\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.           *\n*                                    --- --------------            *\n*        DESCRIPTION.                                              *\n*                                                                  *\n*          This TSO command is a quick and dirty display of        *\n*          all the relevant fields in the ULUDSECT control         *\n*          block, for all defined devices.                         *\n*                                                                  *\n*          The macros ULUINIT and ULUSCAN are used in this         *\n*          program, to show how they simplify the coding           *\n*          of UCB scans using the UCB Lookup Table technique.      *\n*                                                                  *\n*          Before invoking the ULUINIT macro you have to clear     *\n*          the X'80000000' bit for all base registers.             *\n*          This can be done with the new LLGTR instruction.        *\n*                                                                  *\n*        TESTED.   z/OS 1.2 thru z/OS 2.2                          *\n*                                                                  *\n*                                                                  *\n*  EXAMPLE:  When R10 is a base register.                          *\n*                                                                  *\n*  LLGTR R10,R10      Base register                                *\n*  LLGTR Rn,Rn        All registers that you can displace off.     *\n*  ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6   *\n*                                                                  *\n*        CHANGE HISTORY.                                           *\n*                                                                  *\n*    V1.3 - 2015/01/26 - Support for 64-bit ULUT and expansion     *\n*                        of relevant fullword addresses to         *\n*                        doubleword addresses.                     *\n*                                                                  *\n*                        Use new versions of ULUINIT, ULUSCAN,     *\n*                        and ULUDSECT.                             *\n*                                                                  *\n*                                                                  *\n*                                                                  *\n********************************************************************\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE\nULUDIAG  CSECT\nULUDIAG  RMODE ANY\nULUDIAG  AMODE 31\n         USING *,10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(7),CL7'ULUDIAG'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nULULENG  DC    0F'0',AL1(0),AL3(ULUDLENG)\nBEGIN    STM   14,12,12(13)\n         LR    R10,R15                Base register\n         LR    R2,R1                  Save off R1\n         L     R0,WORKSIZ             Load size for GETMAIN\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save address of GETMAINed area\n         USING WORK,R9\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n*        XC    0(WORKINIT,R1),0(R1)\n         ST    R13,4(,R9)             OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)             NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         APUT  MESSAGET,L'MESSAGET    Print title\n         APUT  MESSAGEU,L'MESSAGEU    Underlines\n         MVI   LINE-1,X'40'           INITIAL CLEAR OF OUTPUT LINE\n         MVC   LINE,LINE-1\n         LA    R15,4\n         ST    R15,RETCODE\n         LA    R8,WORKU               Provide a 64-byte work area.\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10                Clear base register of bit 32.\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n*\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n         BAL   R7,PUTENTRY            Print contents of control block\n         MVC   ULUDCURR,ULUDNEXT      Make next entry current\n         BCT   R6,LOOPUCB             Get stuff for next table entry.\n         B     EXIT0\n* ------------------------------------------------------------------- *\nEXIT0    MVI   RETCODE+3,0\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN\n         L     R0,WORKSIZ             Length to FREEMAIN\n         L     R13,4(,R13)            Restore original R13\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load return code\n         LM    0,12,20(R13)           Restore registers\n         L     R14,12(,R13)           And\n         BR    R14                      exit.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPUTENTRY DS    0H\n         ST    R7,SAVER7B\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+14(3),=C'***'\n         MVC   LINE+24(12),=C'DEV ADDRESS:'\n         HEX   LINE+37,2,ULUDDEVA\n         MVC   LINE+49(3),=C'***'\n         APUT  LINE,55\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDULUT'\n         HEX   LINE+10,4,ULUDULUT\n         TM    ULUDSLV6,X'40'         Running 64-bit ULUT?\n         BZ    DBLWULUT               No. Skip Type 3 or higher code.\n         HEX   LINE+19,4,ULUDULUT+4\n         MVI   LINE+18,C'_'\n         B     FULWULUT\nDBLWULUT MVC   LINE+18(9),BLANKS\nFULWULUT DS    0H\n         MVC   LINE+29(8),=C'ULUDCURR'\n         HEX   LINE+38,4,ULUDCURR\n         TM    ULUDSLV6,X'40'         Running 64-bit ULUT?\n         BZ    DBLWCURR               No. Skip Type 3 or higher code.\n         HEX   LINE+47,4,ULUDCURR+4\n         MVI   LINE+46,C'_'\n         B     FULWCURR\nDBLWCURR MVC   LINE+18(9),BLANKS\nFULWCURR DS    0H\n         MVC   LINE+58(8),=C'ULUDDEVA'\n         HEX   LINE+67,2,ULUDDEVA\n         APUT  LINE,80\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDNEXT'\n         HEX   LINE+10,4,ULUDNEXT\n         HEX   LINE+19,4,ULUDNEXT+4\n         MVI   LINE+18,C'_'\n         TM    ULUDSLV6,X'40'         Running 64-bit ULUT?\n         BZ    DBLWNEXT               No. Skip Type 3 or higher code.\n         B     FULWNEXT\nDBLWNEXT MVC   LINE+18(9),BLANKS\nFULWNEXT DS    0H\n         MVC   LINE+39(8),=C'ULUDSLV6'\n         HEX   LINE+48,1,ULUDSLV6\n         MVC   LINE+58(8),=C'ULUDONLF'\n         HEX   LINE+67,1,ULUDONLF\n         APUT  LINE,80\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDUCBA'\n         HEX   LINE+10,4,ULUDUCBA\n         MVC   LINE+20(8),=C'ULUDCEXT'\n         HEX   LINE+29,4,ULUDCEXT\n         MVC   LINE+39(8),=C'ULUDDEVT'\n         HEX   LINE+48,4,ULUDDEVT\n         MVC   LINE+58(8),=C'ULUDCNTR'\n         HEX   LINE+67,2,ULUDCNTR\n         APUT  LINE,80\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDTOTC'\n         HEX   LINE+10,4,ULUDTOTC\n         MVC   LINE+20(8),=C'ULUDRUNC'\n         HEX   LINE+29,4,ULUDRUNC\n         MVC   LINE+39(8),=C'ULUDONLF'\n         HEX   LINE+48,1,ULUDONLF\n         MVC   LINE+58(8),=C'ULUDTYPE'\n         HEX   LINE+67,1,ULUDTYPE\n         APUT  LINE,80\n         L     R7,SAVER7B\n         BR    R7\n         DROP  R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUDIAG - V1.3 - PRINT ULUDSECT FIELDS'\nMESSAGEU DC    C'              -------   ----   ----- -------- ------'\nBLANKS   DC    CL36' '\n         DC    0D'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWORK     DSECT\n         DS    18F\nRETCODE  DS    F\nHEXSAVE  DS    3F\nSAVER7A  DS    F\nSAVER7B  DS    F\nSAVEDEVT DS    F\nWORKU    DS    CL88                WORK AREA FOR ULUDSECT\n         DS    X\nLINE     DS    CL100\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK\n         SPACE\n*        CVT   DSECT=YES\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVT+X'434'\nCVTUCBSC DC V(IOSUCBSC)\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUDIAG$": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x120/\\x01\\x124\\x7f\\x12&\\x00\\x1d\\x00\\x1b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2012-12-12T12:26:42", "lines": 29, "newlines": 27, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT485.FILE873 <-- FOR ULU** MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT485.FILE873(ULUDIAG)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ULUDIAG\n SETSSI  CB485873\n SETCODE AC(0)\n NAME    ULUDIAG(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULUDIAG1": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x19\\x01\\x12)\\x8f\\x01\\x124\\x7f\\x00\\x04\\x02\\x0f\\x00U\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-12-12T00:04:19", "lines": 527, "newlines": 85, "modlines": 0, "user": "PREVIOU"}, "text": "ULUDIAG  TITLE 'ULUDIAG - DISPLAY ULUDSECT FOR ALL DEFINED DEVICES'\n********************************************************************\n* ------------------------------------------------------------------- *\n*     DIAGNOSTIC PROGRAM TO DISPLAY ULUDSECT CONTROL BLOCK FOR        *\n*                    ALL DEFINED UCB'S                                *\n* ------------------------------------------------------------------- *\n********************************************************************\n*                                                                  *\n*        WRITTEN BY.     Sam Golob                                 *\n*                                                                  *\n*        DATE WRITTEN.   December 11, 2012.                        *\n*                                                                  *\n*        DATE UPDATED.                                             *\n*                                                                  *\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.           *\n*                                    --- --------------            *\n*        DESCRIPTION.                                              *\n*                                                                  *\n*          This TSO command is a quick and dirty display of        *\n*          all the relevant fields in the ULUDSECT control         *\n*          block, for all defined devices.                         *\n*                                                                  *\n*          The macros ULUINIT and ULUSCAN are used in this         *\n*          program, to show how they simplify the coding           *\n*          of UCB scans using the UCB Lookup Table technique.      *\n*                                                                  *\n********************************************************************\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE\nULUDIAG  CSECT\nULUDIAG  RMODE ANY\nULUDIAG  AMODE 31\n         USING *,10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(7),CL7'ULUDIAG'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nULULENG  DC    0F'0',AL1(0),AL3(ULUDLENG)\nBEGIN    STM   14,12,12(13)\n         LR    R10,R15                Base register\n         LR    R2,R1                  Save off R1\n         L     R0,WORKSIZ             Load size for GETMAIN\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save address of GETMAINed area\n         USING WORK,R9\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n*        XC    0(WORKINIT,R1),0(R1)\n         ST    R13,4(,R9)             OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)             NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         APUT  MESSAGET,L'MESSAGET    Print title\n         APUT  MESSAGEU,L'MESSAGEU    Underlines\n         MVI   LINE-1,X'40'           INITIAL CLEAR OF OUTPUT LINE\n         MVC   LINE,LINE-1\n         LA    R15,4\n         ST    R15,RETCODE\n         LA    R8,WORKU               Provide a 64-byte work area.\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n*\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n         BAL   R7,PUTENTRY            Print contents of control block\n         MVC   ULUDCURR,ULUDNEXT      Make next entry current\n         BCT   R6,LOOPUCB             Get stuff for next table entry.\n         B     EXIT0\n         SPACE\nEXIT0    MVI   RETCODE+3,0\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN\n         L     R0,WORKSIZ             Length to FREEMAIN\n         L     R13,4(,R13)            Restore original R13\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load return code\n         LM    0,12,20(R13)           Restore registers\n         L     R14,12(,R13)           And\n         BR    R14                      exit.\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPUTENTRY DS    0H\n         ST    R7,SAVER7B\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+14(3),=C'***'\n         MVC   LINE+24(12),=C'DEV ADDRESS:'\n         HEX   LINE+37,2,ULUDDEVA\n         MVC   LINE+49(3),=C'***'\n         APUT  LINE,55\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDULUT'\n         HEX   LINE+10,4,ULUDULUT\n         MVC   LINE+20(8),=C'ULUDCURR'\n         HEX   LINE+29,4,ULUDCURR\n         MVC   LINE+39(8),=C'ULUDNEXT'\n         HEX   LINE+48,4,ULUDNEXT\n         MVC   LINE+58(8),=C'ULUDDEVA'\n         HEX   LINE+67,2,ULUDDEVA\n         APUT  LINE,80\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDUCBA'\n         HEX   LINE+10,4,ULUDUCBA\n         MVC   LINE+20(8),=C'ULUDCEXT'\n         HEX   LINE+29,4,ULUDCEXT\n         MVC   LINE+39(8),=C'ULUDDEVT'\n         HEX   LINE+48,4,ULUDDEVT\n         MVC   LINE+58(8),=C'ULUDCNTR'\n         HEX   LINE+67,2,ULUDCNTR\n         APUT  LINE,80\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+1(8),=C'ULUDTOTC'\n         HEX   LINE+10,4,ULUDTOTC\n         MVC   LINE+20(8),=C'ULUDRUNC'\n         HEX   LINE+29,4,ULUDRUNC\n         MVC   LINE+39(8),=C'ULUDONLF'\n         HEX   LINE+48,1,ULUDONLF\n         MVC   LINE+58(8),=C'ULUDTYPE'\n         HEX   LINE+67,1,ULUDTYPE\n         APUT  LINE,80\n         L     R7,SAVER7B\n         BR    R7\n         DROP  R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUDIAG - V1.0 - PRINT ULUDSECT FIELDS'\nMESSAGEU DC    C'              -------   ----   ----- -------- ------'\nBLANKS   DC    CL16' '\n         DC    0D'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWORK     DSECT\n         DS    18F\nRETCODE  DS    F\nHEXSAVE  DS    3F\nSAVER7A  DS    F\nSAVER7B  DS    F\nSAVEDEVT DS    F\nWORKU    DS    CL64\n         DS    X\nLINE     DS    CL100\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK\n         SPACE\n*        CVT   DSECT=YES\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVT+X'434'\nCVTUCBSC DC V(IOSUCBSC)\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUDSECT": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00B\\x01\\x124_\\x01\\x15\\x02o\\x18\\x18\\x00\\xe2\\x00D\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2012-12-10T00:00:00", "modifydate": "2015-01-26T18:18:42", "lines": 226, "newlines": 68, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUDSECT &NAM=ULUDSECT\n&NAM     DSECT\n* ------------------------------------------------------------------- *\n*    ULUDSECT - PASS INFORMATION FROM A ULUT TABLE ENTRY              *\n*                                                                     *\n*    Author   - Sam Golob                                             *\n*                                                                     *\n*    Version  - 2.0.0                                                 *\n*                                                                     *\n*    Current Length - 88 bytes                                        *\n*                                                                     *\n*    Description:                                                     *\n*                                                                     *\n*        The idea of this DSECT is to provide an area to pass         *\n*        information from a UCB Lookup Table entry (ULUE) to a        *\n*        calling program, one entry at a time.                        *\n*                                                                     *\n*        The information requested from each ULUT entry, is what      *\n*        you would probably require during a typical UCB scan.        *\n*                                                                     *\n*        There are also a few register save areas in here.            *\n*                                                                     *\n*        The reason for this arrangement, is to be able to            *\n*        substitute the ULUT lookup for a UCBSCAN macro execution     *\n*        in an Assembler program.  UCBSCAN returns information        *\n*        about one UCB at a time, and we want to be able to do        *\n*        the same thing, using the ULUT method instead.               *\n*                                                                     *\n*        The difference between this method and the UCBSCAN method    *\n*        is that information about REAL UCB's can be returned this    *\n*        way, without the caller having to be APF-authorized.         *\n*                                                                     *\n*        If you are just looking at the UCB and not trying to         *\n*        change anything in it, it seems that this method is          *\n*        quite harmless to use.                                       *\n*                                                                     *\n*    Attribution:                                                     *\n*                                                                     *\n*        This is an undocumented interface that was unearthed for     *\n*        the general public by Gilbert Saint-flour, and we are        *\n*        publicizing this discovery to perpetuate his memory.         *\n*                                                                     *\n*    System Dependencies:                                             *\n*                                                                     *\n*        The user of this interface must be aware that if IBM         *\n*        changes the layout of the ULUT by creating a new \"ULUT       *\n*        type\", then the programming interface must be adjusted       *\n*        for the new ULUT type. (At present writing, there are        *\n*        three ULUT types.  Type 3, starting with PTF UA90741, is     *\n*        located in 64-bit storage.  It is pointed to by a new        *\n*        location in the IOVT, a doubleword at +1B8 (decimal 440)     *\n*        off the beginning of the IOVT.  The previous ULUT types,     *\n*        Type 1 and Type 2, were pointed to by a fullword address     *\n*        at location +8 off the IOVT.                                 *\n*                                                                     *\n*        If IOVT+X'8' (for a fullword) is zero, then IOVT+X'1B8'      *\n*        (for a doubleword) points to the real ULUT (Type 3 or        *\n*        higher).  This depends on PTF level (for z/OS 1.13           *\n*        of z/OS 2.1) or on system level (for z/OS 2.2 and more).     *\n*                                                                     *\n*    ULUT Types:                                                      *\n*                                                                     *\n*        The ULUT interface to UCB scanning is not a documented       *\n*        IBM interface.  Therefore IBM (of course) reserves the       *\n*        right to change it at its own discretion.  It has changed    *\n*        twice, since ESA 5.  This was at the z/OS 1.7 level.         *\n*                                                                     *\n*        A new change, to ULUT Type 2, was made at the z/OS 1.7       *\n*        level.  ULUT Type 3, starting at the z/OS 2.2 level, has     *\n*        been moved to 64-bit storage and is pointed to by a          *\n*        doubleword address at +1B8 off the IOVT.  It must be         *\n*        addressed in 64-bit mode (SAM64).                            *\n*                                                                     *\n*        It is up to the user to keep track of any changes to the     *\n*        ULUT.  Access to the ULUT is provided by the following       *\n*        set of instructions (to be executed in 31-bit mode):         *\n*                                                                     *\n*          L     R3,16                  CVT                           *\n*          L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM              *\n*          L     R3,X'D0'(,R3)          IOVT                          *\n*          L     R4,8(,R3)              UCB Lookup Table (ULUT)       *\n*          LR    R3,R4                  Point both regs to ULUT       *\n*          CLC   =C'ULUT',0(R3)         Eyecatcher there?             *\n*          BNE   EXIT                   Nope. It ain't it. Out.       *\n*                                                                     *\n*        This set of instructions is only valid through ULUT          *\n*        Type 2 (before PTF UA90741).  To include ULUT Type 3         *\n*        as well, you will need the following code:                   *\n*                                                                     *\n*   GETULUT  DS    0H                                                 *\n*            L     R2,16                     CVT                      *\n*            USING CVTMAP,R2                                          *\n*            MVC   OSLVLSW6,CVTOSLV6         Copy off CVTOSLV6 byte   *\n*            DROP  R2                                                 *\n*            L     R3,X'7C'(,R2)             CVTIXAVL                 *\n*            L     R3,X'D0'(,R3)             IOVT                     *\n*            L     R4,8(,R3)                 Check IOVTUL31           *\n*            LTR   R4,R4                     Zero?                    *\n*            BZ    GETULUN2                  Yes. Type 2 or 1.        *\n*            OI    OSLVLSW6,X'40'            No. Indicate 64-bit ULUT *\n*            LLGTR R3,R3                     Clear 33 hi-order bits   *\n*            LLGTR R4,R4                      of                      *\n*            LLGTR R9,R9                       registers              *\n*            LLGTR R10,R10                      for running in        *\n*            LLGTR R12,R12                       64-bit mode.         *\n*            LG    R4,X'1B8'(,R3)            Get dwd addr of ULUT.    *\n*            SAM64                           Go to 64-bit mode        *\n*            LGR   R3,R4                     Copy register.           *\n*            B     GETULUN3                  Skip old 31-bit stuff.   *\n*   GETULUN2 DS    0H                                                 *\n*            L     R4,8(,R3)                 Old ULUT addr off IOVT   *\n*            LR    R3,R4                     Copy register.           *\n*   GETULUN3 DS    0H                                                 *\n*            TM    OSLVLSW6,X'40'            64-bit ULUT?             *\n*            BZ    GETULUN4                  No. Skip 64-bit instrs.  *\n*            LLGTR Rx,Rx            Rx, Ry are base registers, etc.   *\n*            LLGTR Ry,Ry            Rx, Ry are base registers, etc.   *\n*   GETULUN4 DS    0H                                                 *\n*            CLC   =C'ULUT',0(R3)            Eyecatcher present?      *\n*            BNE   EXIT                      No. Get out.             *\n*                                                                     *\n*        A binary number at ULUT+4 indicates the ULUT type.           *\n*        There have currently been three ULUT types, Type X'01'       *\n*        and Type X'02', as well as the new Type X'03' which resides  *\n*        in 64-bit storage.  The pointers to the beginning of the     *\n*        actual table entries, and the addresses of other pointers    *\n*        differ in their location according to ULUT type.  Thus       *\n*        any program looking at the ULUT must first refer to the      *\n*        \"ULUT type\" field, and then get all the other information    *\n*        accordingly.                                                 *\n*                                                                     *\n*        The description of the ULUT table entries themselves,        *\n*        seems to be identical for all ULUT types thus far.           *\n*        For ULUT table entries, the entries are 12 bytes long.       *\n*        The first halfword is the hexadecimal four digit device      *\n*        address.  The last 4 bytes, at entry+8, is the UCB address.  *\n*        Each ULUT table entry also contains a halfword counter,      *\n*        at entry+4, starting with X'0002', and which appears to be   *\n*        incremented by 1, with each successive table entry.          *\n*                                                                     *\n*        However, whenever there is a switch of device type in the    *\n*        ULUT table, the counter field is zero for the last entry     *\n*        representing each given device type.                         *\n*                                                                     *\n*        The way we find the end of the table, is to get the total    *\n*        number of table entries from a field in the ULUT control     *\n*        block, get to the first entry, and count through all the     *\n*        entries until we get to the last one.                        *\n*                                                                     *\n*    Requirements:                                                    *\n*                                                                     *\n*        A calling program will refer to the ULUDSECT data area       *\n*        multiple times.  The number of times will usually reflect    *\n*        the total number of UCB's defined in the ULUT table.  The    *\n*        calling program must GETMAIN storage for this work area,     *\n*        and initialize it to zeros at the beginning.  It must NOT    *\n*        be initialized while the scan is running, because this       *\n*        DSECT is keeping track of which ULUT table entry (i.e.       *\n*        which UCB) the program is currently looking at.              *\n*                                                                     *\n*    Notes:                                                           *\n*                                                                     *\n*        While the calling program has a given ULUT table entry,      *\n*        and its associated UCB, in its sights, it is expected        *\n*        that all the required information be extracted from that     *\n*        UCB and passed to the work area described by this DSECT.     *\n*                                                                     *\n*    Residence:                                                       *\n*                                                                     *\n*        The storage pointed to by this DSECT can reside below        *\n*        the 16M line (in 24-bit storage), but the calling program    *\n*        must execute in 31-bit mode, because the real UCB info       *\n*        may reside above the 16M line, and the ULUT itself is        *\n*        usually located above the 16M line.                          *\n*                                                                     *\n*    Return Codes:                                                    *\n*                                                                     *\n*        Each referral to this DSECT should return a code of 0,       *\n*        except when the table has been exhausted, at which time      *\n*        the return code should be 4.  This is to copy the action     *\n*        of the UCBSCAN macro, so it is easier to insert a            *\n*        routine using this DSECT, into an existing program.          *\n*                                                                     *\n*    Date:  December 10, 2012                                         *\n*                                                                     *\n*    Revision:    2.0.0                                               *\n*                                                                     *\n*    Change History:                                                  *\n*                                                                     *\n*      2.0.0 - 2015/01/26 - Change for doubleword addressing in       *\n*                           the ULUT.  Older ULUT types use the       *\n*                           first word of the doubleword save areas.  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DS    0D            Align to doubleword for GETMAIN\nULUDULUT DS    D             Address of ULUT in this system\nULUDCURR DS    D             Current ULUT table entry address\nULUDNEXT DS    D             Next ULUT table entry address\nULUDTOTC DS    F             Total count of ULUT entries\nULUDRUNC DS    F             Realtime descending count of ULUT entries\n*                             (initialized to ULUDTOTC at beginning)\nULUDDEVA DS    H             Device address of current table entry\nULUDCNTR DS    H             Counter in ULUT of current table entry\n*                             This is one higher than the table entry\n*                             count, and is incremented by one with\n*                             each successive table entry.  However,\n*                             this field is sometimes zero when there\n*                             is going to be a switch of device types.\nULUDUCBA DS    F             UCB address of current table entry\nULUDCEXT DS    F             Address of this UCB's common extension\nULUDDEVT DS    F             UCB device type (4 bytes)\nULUDONLF DS    X             UCB + 3 (device online has X'80' set)\nULUDTYPE DS    X             ULUT TYPE for this table\nULUDSLV6 DS    X             Copy of CVTOSLV6 flag byte in the CVT.\n*                             X'40' is used as a switch to show 64-bit.\nULUDRSV1 DS    X             RESERVED\nULUDSVR0 DS    F             Save area for R0 - fullword\nULUDSVR1 DS    F             Save area for R1 - fullword\nULUDSVUR DS    F             Save USING register for workarea\nULUDSVW1 DS    D             Save first work register  - doubleword\nULUDSVW2 DS    D             Save second work register - doubleword\nULUDSVBR DS    F             Save BCT register - fullword\n         DS    0D            Align for GETMAIN\nULUDLENG EQU   *-ULUDSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUDSEC1": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x124_\\x01\\x124\\x8f\\tG\\x00\\x9f\\x00D\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-10T00:00:00", "modifydate": "2012-12-13T09:47:15", "lines": 159, "newlines": 68, "modlines": 0, "user": "PREVIOU"}, "text": "         MACRO\n         ULUDSECT\nULUDSECT DSECT\n* ------------------------------------------------------------------- *\n*    ULUDSECT - PASS INFORMATION FROM A ULUT TABLE ENTRY              *\n*                                                                     *\n*    Author   - Sam Golob                                             *\n*                                                                     *\n*    Description:                                                     *\n*                                                                     *\n*        The idea of this dsect is to provide an area to pass         *\n*        information from a UCB Lookup Table entry (ULUE) to a        *\n*        calling program, one entry at a time.                        *\n*                                                                     *\n*        The information requested from each ULUT entry, is what      *\n*        you would probably require during a typical UCB scan.        *\n*                                                                     *\n*        There are also a few register save areas in here.            *\n*                                                                     *\n*        The reason for this arrangement, is to be able to            *\n*        substitute the ULUT lookup for a UCBSCAN macro execution     *\n*        in an Assembler program.  UCBSCAN returns information        *\n*        about one UCB at a time, and we want to be able to do        *\n*        the same thing, using the ULUT method instead.               *\n*                                                                     *\n*        The difference between this method and the UCBSCAN method    *\n*        is that information about REAL UCB's can be returned this    *\n*        way, without the caller having to be APF-authorized.         *\n*                                                                     *\n*    Attribution:                                                     *\n*                                                                     *\n*        This is an undocumented interface that was unearthed for     *\n*        the general public by Gilbert Saint-flour, and we are        *\n*        publicizing this discovery to perpetuate his memory.         *\n*                                                                     *\n*    System Dependencies:                                             *\n*                                                                     *\n*        The user of this interface must be aware that if IBM         *\n*        changes the layout of the ULUT by creating a new \"ULUT       *\n*        type\", then the programming interface must be adjusted       *\n*        for the new ULUT type. (At present writing, there are        *\n*        only two ULUT types. - SG 2012/Dec)                          *\n*                                                                     *\n*    ULUT Types:                                                      *\n*                                                                     *\n*        The ULUT interface to UCB scanning is not a documented       *\n*        IBM interface.  Therefore IBM (of course) reserves the       *\n*        right to change it at its own discretion.  It has changed    *\n*        once, since ESA 5.  This was at the z/OS 1.7 level.          *\n*                                                                     *\n*        It is up to the user to keep track of any changes to the     *\n*        ULUT.  Access to the ULUT is provided by the following       *\n*        set of instructions (to be executed in 31-bit mode):         *\n*                                                                     *\n*          L     R3,16                  CVT                           *\n*          L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM              *\n*          L     R3,X'D0'(,R3)          IOVT                          *\n*          L     R4,8(,R3)              UCB Lookup Table (ULUT)       *\n*          LR    R3,R4                  Point both regs to ULUT       *\n*          CLC   =C'ULUT',0(R3)         Eyecatcher there?             *\n*          BNE   EXIT                   Nope. It ain't it. Out.       *\n*                                                                     *\n*        A binary number at ULUT+4 indicates the ULUT type.           *\n*        There have currently been two ULUT types, type X'01'         *\n*        and type X'02'.  The pointers to the beginning of the        *\n*        actual table entries, and the addresses of other pointers    *\n*        differ in their location according to ULUT type.  Thus       *\n*        any program looking at the ULUT must first refer to the      *\n*        ULUT type field, and then get all the other information      *\n*        accordingly.                                                 *\n*                                                                     *\n*        The description of the ULUT table entries themselves,        *\n*        seems to be identical for both Type 1 and Type 2 ULUT's.     *\n*        For ULUT table entries, the entries are 12 bytes long.       *\n*        The first halfword is the hexadecimal four digit device      *\n*        address.  The last 4 bytes, at entry+8, is the UCB address.  *\n*        Each ULUT table entry also contains a halfword counter,      *\n*        at entry+4, starting with X'0002', and which appears to be   *\n*        incremented by 1, with each successive table entry.          *\n*                                                                     *\n*        However, whenever there is a switch of device type in the    *\n*        ULUT table, the counter field is zero for the last entry     *\n*        representing each given device type.                         *\n*                                                                     *\n*        The way we find the end of the table, is to get the total    *\n*        number of table entries from a field in the ULUT control     *\n*        block, get to the first entry, and count through all the     *\n*        entries until we get to the last one.                        *\n*                                                                     *\n*    Requirements:                                                    *\n*                                                                     *\n*        A calling program will refer to this data area multiple      *\n*        times.  The number of times will usually reflect the         *\n*        total number of UCB's defined in the ULUT table.  The        *\n*        calling program must GETMAIN storage for this work area,     *\n*        and initialize it to zeros at the beginning.  It must NOT    *\n*        be initialized while the scan is running, because this       *\n*        dsect is keeping track of which ULUT table entry (i.e.       *\n*        which UCB) the program is currently looking at.              *\n*                                                                     *\n*    Notes:                                                           *\n*                                                                     *\n*        While the calling program has a given ULUT table entry,      *\n*        and its associated UCB, in its sights, it is expected        *\n*        that all the required information be extracted from that     *\n*        UCB and passed to the work area described by this dsect.     *\n*                                                                     *\n*    Residence:                                                       *\n*                                                                     *\n*        The storage pointed to by this dsect can reside below        *\n*        the 16M line (in 24-bit storage), but the calling program    *\n*        must execute in 31-bit mode, because the real UCB info       *\n*        may reside above the 16M line, and the ULUT itself is        *\n*        usually located above the 16M line.                          *\n*                                                                     *\n*    Return Codes:                                                    *\n*                                                                     *\n*        Each referral to this dsect should return a code of 0,       *\n*        except when the table has been exhausted, at which time      *\n*        the return code should be 4.  This is to copy the action     *\n*        of the UCBSCAN macro, so it is easier to insert a            *\n*        routine using this dsect, into an existing program.          *\n*                                                                     *\n*    Date:  December 10, 2012                                         *\n*                                                                     *\n*    Revision:    1.0.0                                               *\n*                                                                     *\n*    Change History:                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DS    0D            Align to doubleword for GETMAIN\nULUDULUT DS    F             Address of ULUT in this system\nULUDCURR DS    F             Current ULUT table entry address\nULUDNEXT DS    F             Next ULUT table entry address\nULUDTOTC DS    F             Total count of ULUT entries\nULUDRUNC DS    F             Running descending count of ULUT entries\n*                             (initialized to ULUDTOTC at beginning)\nULUDDEVA DS    H             Device address of current table entry\nULUDCNTR DS    H             Counter in ULUT of current table entry\n*                             This is one higher than the table entry\n*                             count, and is incremented by one with\n*                             each successive table entry.  However,\n*                             this field is sometimes zero when there\n*                             is going to be a switch of device types.\nULUDUCBA DS    F             UCB address of current table entry\nULUDCEXT DS    F             Address of this UCB's common extension\nULUDDEVT DS    F             UCB device type (4 bytes)\nULUDONLF DS    X             UCB + 3 (device online has X'80' set)\nULUDTYPE DS    X             ULUT TYPE for this table\nULUDRSV1 DS    2X            RESERVED\nULUDSVR0 DS    F             Save area for R0 in macro invocation\nULUDSVR1 DS    F             Save area for R1 in macro invocation\nULUDSVUR DS    F             Save USING register for workarea\nULUDSVW1 DS    F             Save first work register\nULUDSVW2 DS    F             Save second work register\nULUDSVBR DS    F             Save BCT register\n         DS    0D\nULUDLENG EQU   *-ULUDSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUINIT": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00T\\x01\\x15\\x02o\\x01\\x15\\x02o\"7\\x00\\x86\\x00~\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2015-01-26T00:00:00", "modifydate": "2015-01-26T22:37:54", "lines": 134, "newlines": 126, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUINIT &WRKAREA=,&UREG=,&EXIT=,&BREG=,&WR1=,&WR2=\n* ------------------------------------------------------------------ *\n*   ULUINIT - Access the ULUT (UCB Lookup Table) and initialize      *\n*             the ULUDSECT control block with some of the ULUT       *\n*             information.                                           *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*   Important:  If you are running with ULUT Type=3 or higher,       *\n*   ---------   this macro invokes the SAM64 instruction.            *\n*                                                                    *\n*       Therefore, YOU MUST CLEAR bit 33 X'00000000_80000000'        *\n*       from the BASE REGISTERS before invoking this macro.          *\n*                                                                    *\n*       Example:  If the base register is R10, then code:            *\n*                                                                    *\n*          LLGTR    R10,R10                                          *\n*          ULUINIT  etc, etc.                                        *\n*                                                                    *\n*       Otherwise you may get a S0C4, reason code 3B.                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*    The ULUINIT macro must be invoked in AMODE 31.                  *\n*    The ULUINIT macro initializes the ULUDSECT control block.       *\n*    The user must supply a 88 bit workarea for ULUINIT to use.      *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        WRKAREA - a 88 byte work area to contain the data           *\n*                  described by the ULUDSECT control block           *\n*        UREG    - the USING register for accessiblity to the        *\n*                  ULUDSECT control block in the work area           *\n*        EXIT    - a location to escape the ULUT access if           *\n*                  there is an error                                 *\n*        BREG    - BCT register initially containing ULUITOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  May not have to be decremented by BCT.     *\n*                  But it should be decremented for each ULUT        *\n*                  entry that was passed through.                    *\n*        WR1     - work register - saved and restored  31- or 64-bit *\n*        WR2     - work register - saved and restored  31- or 64-bit *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        Enter and leave this macro in 31-bit mode, always.          *\n*        -----     -----               -----------                   *\n* ------------------------------------------------------------------ *\n         LA    &UREG,&WRKAREA         Point to work area\n         USING ULUDSECT,&UREG\n*                                     Get ULUT and initialize.\n         ST    &UREG,ULUDSVUR         Save USING register in cntl blk.\n         STG   &WR1,ULUDSVW1          Save off entire two bytes.\n         STG   &WR2,ULUDSVW2          Save off entire two bytes.\n         ST    &BREG,ULUDSVBR         Save count register in cntl blk.\n         LLGTR &WR1,&WR1              Make sure hi order not corrupted\n         LLGTR &WR2,&WR2\n         L     &WR1,16                CVT\n         MVC   ULUDSLV6(1),X'4F6'(&WR1)  Move entire CVTOSLV6 to DSECT\n*                                        Will use as a switch, later.\n         LLGTR &WR1,&WR1              Make sure hi order not corrupted\n         LLGTR &WR2,&WR2\n*                                     ****  GET THE ULUT NOW  ****\n         L     &WR1,X'7C'(,&WR1)      CVTIXAVL\n         L     &WR1,X'D0'(,&WR1)      IOVT\n*                                     Check if IOVTUL31 is zero or not.\n*                                     If zero, then IOVTULUT is nonzero\n         L     &WR2,X'8'(,&WR1)       Load IOVTUL31 fullword.\n         LTR   &WR2,&WR2              Is it zero?\n         BNZ   ULUNTYP3               No. We have Type 1 or 2.\n*                                     Yes. Handle 64-bit ULUT\n         OI    ULUDSLV6,X'40'         Indicate 64-bit ULUT table.\n         LG    &WR2,X'1B8'(,&WR1)     Load dwd ULUT address in 2nd reg\n         LGR   &WR1,&WR2              Copy dwd address to first reg\n* ------------------------------------------------------------------ *\n         SAM64                        Deal with ULUT in 64-bit mode\n         CLC   =C'ULUT',0(&WR1)       Is ULUT eyecatcher there?\n         BNE   &EXIT                  No eyecatcher, not ULUT, exit.\n         STG   &WR1,ULUDULUT          Save ULUT address in DSECT\n         CLI   4(&WR1),X'03'          Is the Type = X'03' ?\n         BE    ULUITYP3               Yes. Deal with Type 3.\n         SAM31                        31-bit in anticipation of exit\n         B     &EXIT                  No. exit.\nULUITYP3 DS    0H                     Handle Type 3\n         MVI   ULUDTYPE,X'03'         Indicate ULUT Type 3.\n         SAM64                        Has to be 64-bit mode\n         LG    &WR1,X'10'(,&WR1)      Type 3, addr of first table entry\n         STG   &WR1,ULUDCURR          Store 64-bit entry in cntl block\n         L     &WR2,X'1C'(,&WR2)      Count of all entries - fullword\n         LLGTR &WR2,&WR2              Clear hi order of WR2.\n         SAM31                        Nothing later needs SAM64\n         ST    &WR2,ULUDTOTC          Store in control block\n         ST    &WR2,ULUDRUNC          Initialize running descent count\n         B     ULUILSET               Do search processing.\nULUNTYP3 DS    0H\n         L     &WR2,8(,&WR1)          UCB LOOKUP TABLE (ULUT)\n         LR    &WR1,&WR2              Point both registers to it.\n         CLC   =C'ULUT',0(&WR1)       Eyecatcher there?\n         BNE   &EXIT                  Nope. Not pointing to table.\n         ST    &WR1,ULUDULUT          Start filling control block.\n         CLI   4(&WR1),X'01'          Type 1?\n         BE    ULUITYP1               Yes. Handle as type 1.\n         CLI   4(&WR1),X'02'          Type 2?\n         BE    ULUITYP2               Yes. Handle as type 2.\n         B     &EXIT                  No. If new type, test for it here\nULUITYP1 DS    0H                     Handle Type 1\n         MVI   ULUDTYPE,X'01'         Move type to control block.\n         L     &WR1,X'0C'(,&WR1)      TYPE 1, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'10'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n         B     ULUILSET               Do search processing.\n*\nULUITYP2 DS    0H                     Handle Type 2\n         MVI   ULUDTYPE,X'02'         Move type to control block.\n         L     &WR1,X'14'(,&WR1)      TYPE 2, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'18'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n         B     ULUILSET               Do search processing.\n*\nULUILSET DS    0H                     Must exit in 31-bit mode.\n         L     &BREG,ULUDTOTC         Load number of loops in register\n         LG    &WR1,ULUDSVW1          Restore work register contents\n         LG    &WR2,ULUDSVW2\n*\n         ULUDSECT\n&SYSECT  CSECT ,                      Resume user's CSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUINIT1": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x124o\\x01\\x124\\x8f\\x026\\x00N\\x00$\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2012-12-13T02:36:05", "lines": 78, "newlines": 36, "modlines": 0, "user": "PREVIOU"}, "text": "         MACRO\n         ULUINIT &WRKAREA=,&UREG=,&EXIT=,&BREG=,&WR1=,&WR2=\n* ------------------------------------------------------------------ *\n*   ULUINIT - Access the ULUT (UCB Lookup Table) and initialize      *\n*             the ULUDSECT control block with some of the ULUT       *\n*             information.                                           *\n* ------------------------------------------------------------------ *\n*    The ULUINIT macro must be invoked in AMODE 31.                  *\n*    The ULUINIT macro initializes the ULUDSECT control block.       *\n*    The user must supply a 64 byte workarea for ULUINIT to use.     *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        WRKAREA - a 64 byte work area to contain the data           *\n*                  described by the ULUDSECT control block           *\n*        UREG    - the USING register for accessiblity to the        *\n*                  ULUDSECT control block in the work area           *\n*        EXIT    - a location to escape the ULUT access if           *\n*                  there is an error                                 *\n*        BREG    - BCT register initially containing ULUITOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  May not have to be decremented by BCT.     *\n*                  But it should be decremented for each ULUT        *\n*                  entry that was passed through.                    *\n*        WR1     - work register - saved and restored                *\n*        WR2     - work register - saved and restored                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         LA    &UREG,&WRKAREA         Point to work area\n         USING ULUDSECT,&UREG\n*                                     Get ULUT and initialize.\n         ST    &UREG,ULUDSVUR         Save work regs in control block\n         ST    &WR1,ULUDSVW1\n         ST    &WR2,ULUDSVW2\n         ST    &BREG,ULUDSVBR\n         L     &WR1,16                CVT\n         L     &WR1,X'7C'(,&WR1)      CVTIXAVL\n         L     &WR1,X'D0'(,&WR1)      IOVT\n         L     &WR2,8(,&WR1)          UCB LOOKUP TABLE (ULUT)\n         LR    &WR1,&WR2              Point both registers to it.\n         CLC   =C'ULUT',0(&WR1)       Eyecatcher there?\n         BNE   &EXIT                  Nope. Not pointing to table.\n         ST    &WR1,ULUDULUT          Start filling control block.\n         CLI   4(&WR1),X'01'          Type 1?\n         BE    ULUITYP1               Yes. Handle as type 1.\n         CLI   4(&WR1),X'02'          Type 2?\n         BE    ULUITYP2               Yes. Handle as type 2.\n         B     &EXIT                  No. If new type, test for it here\nULUITYP1 DS    0H                     Handle Type 1\n         MVI   ULUDTYPE,X'01'         Move type to control block.\n         L     &WR1,X'0C'(,&WR1)      TYPE 1, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'10'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n         B     ULUILSET               Do search processing.\n*\nULUITYP2 DS    0H                     Handle Type 2\n         MVI   ULUDTYPE,X'02'         Move type to control block.\n         L     &WR1,X'14'(,&WR1)      TYPE 2, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'18'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n*        B     ULUILSET               Do search processing.\n*\nULUILSET DS    0H\n         L     &BREG,ULUDTOTC         Load number of loops in register\n         L     &WR1,ULUDSVW1          Restore work register contents\n         L     &WR2,ULUDSVW2\n*\n         ULUDSECT\n&SYSECT  CSECT ,                      Resume user's CSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSAMP1": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00@\\x01\\x124\\x8f\\x01\\x124\\x8f\\x12B\\x00*\\x00\\x1a\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-12-13T00:00:00", "modifydate": "2012-12-13T12:42:40", "lines": 42, "newlines": 26, "modlines": 0, "user": "SAMPLE"}, "text": "Beginning of ULUT control block - Sample 1 - ULUT Type 2\n\n\nLOOK COMMAND - DISPLAY VIRTUAL MEMORY      DISPLAY ASID= 0034\nENTER CMD -\nLAST CMD  - J+8\n\n02281F90   >E4D3E4E3  02F50000  000013A8  00000000 *>ULUT.5.....y....*\n02281FA0    00000000  02282114  00000183  00000040  *...........c... *\n02281FB0    00000000  000000C9  0000005F  00000003  *.......I...\u00ac....*\n02281FC0    00000000  00000018  006D0000  000400AD  *........._......*\n02281FD0    00010000  005D0000  0000090C  0000048C  *.....)..........*\n02281FE0    00000240  00000120  00000090  00000048  *... ............*\n02281FF0    00000024  00000018  0000000C  00000000  *................*\n02282000    00000000  00000000  00000000  00000000  *................*\n02282010    00000000  00000000  00000000  00000000  *................*\n02282020    00000000  00000000  00000000  00000000  *................*\n02282030    00000000  00000000  00000000  00000000  *................*\n02282040    00000000  00000000  00000000  00000000  *................*\n02282050    00000000  00000000  00000000  00000000  *................*\n02282060    00000000  00000000  00000000  00000000  *................*\n02282070    00000000  00000000  00000000  00000000  *................*\n02282080    00000000  00000000  00000000  00000000  *................*\n\n02282090   >00000000  00000000  00000000  00000000 *>................*\n022820A0    00000000  00000000  00000000  00000000  *................*\n022820B0    00000000  00000000  00000000  00000000  *................*\n022820C0    00000000  00000000  00000000  00000000  *................*\n022820D0    00000000  00000000  00000000  00000000  *................*\n022820E0    00000000  00000000  00000000  00000000  *................*\n022820F0    00000000  00000000  00000000  00000000  *................*\n02282100    00000000  00000000  00000000  00000000  *................*\n02282110    00000000  000C4000  00020000  00F46140  *...... ......4/ *\n02282120    000E4000  00030000  00F46180  000F4000  *.. ......4/... .*\n02282130    00000000  00F461C0  01204000  00050000  *.....4/... .....*\n02282140    00F46248  01214000  00060000  00F462E0  *.4.... ......4..*\n02282150    01224000  00070000  00F46378  01234000  *.. ......4.... .*\n02282160    00080000  00F46410  01244000  00090000  *.....4.... .....*\n02282170    00F464A8  01254000  000A0000  00F46540  *.4.y.. ......4. *\n02282180    01264000  000B0000  00F465D8  01274000  *.. ......4.Q.. .*\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSAMP2": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x000\\x01\\x124\\x8f\\x01\\x124\\x8f\\x12@\\x00*\\x00\\x1a\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-12-13T00:00:00", "modifydate": "2012-12-13T12:40:30", "lines": 42, "newlines": 26, "modlines": 0, "user": "SAMPLE"}, "text": "Beginning of ULUT control block - Sample 2 - ULUT Type 2\n\n\nLOOK COMMAND - DISPLAY VIRTUAL MEMORY      DISPLAY ASID= 0024\nENTER CMD -\nLAST CMD  - J+8\n\n023491D0   >E4D3E4E3  02F50000  00006DD8  00000000 *>ULUT.5...._Q....*\n023491E0    00400020  02349354  00000907  00000090  *. ....l.........*\n023491F0    000000D8  00000500  0000021C  0000001B  *...Q............*\n02349200    00000000  00000068  01970007  00D70159  *.........p...P..*\n02349210    00010000  00D60000  00003624  00001B18  *.....O..........*\n02349220    00000D8C  000006C0  00000360  000001B0  *...........-....*\n02349230    000000D8  0000006C  0000003C  00000018  *...Q...%........*\n02349240    0000000C  0000000C  00000000  00000000  *................*\n02349250    00000000  00000000  00000000  00000000  *................*\n02349260    00000000  00000000  00000000  00000000  *................*\n02349270    00000000  00000000  00000000  00000000  *................*\n02349280    00000000  00000000  00000000  00000000  *................*\n02349290    00000000  00000000  00000000  00000000  *................*\n023492A0    00000000  00000000  00000000  00000000  *................*\n023492B0    00000000  00000000  00000000  00000000  *................*\n023492C0    00000000  00000000  00000000  00000000  *................*\n\n023492D0   >00000000  00000000  00000000  00000000 *>................*\n023492E0    00000000  00000000  00000000  00000000  *................*\n023492F0    00000000  00000000  00000000  00000000  *................*\n02349300    00000000  00000000  00000000  00000000  *................*\n02349310    00000000  00000000  00000000  00000000  *................*\n02349320    00000000  00000000  00000000  00000000  *................*\n02349330    00000000  00000000  00000000  00000000  *................*\n02349340    00000000  00000000  00000000  00000000  *................*\n02349350    00000000  00020000  00020000  00F3C140  *.............3A *\n02349360    00030000  00030000  00F3C1B0  00040000  *.........3A.....*\n02349370    00040000  00F3C220  00050000  00050000  *.....3B.........*\n02349380    00F3C290  00060000  00060000  00F3C300  *.3B..........3C.*\n02349390    00070000  00080000  00F3C370  00080000  *.........3C.....*\n023493A0    00140000  00F3C3E0  000A0000  00090000  *.....3C.........*\n023493B0    00F3C428  000B0000  000A0000  00F3C468  *.3D..........3D.*\n023493C0    000C0000  000B0000  00F3C4A8  000D0000  *.........3Dy....*\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSAMP3": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00T\\x01\\x124\\x8f\\x01\\x124\\x8f\\x12B\\x00*\\x00(\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-12-13T00:00:00", "modifydate": "2012-12-13T12:42:54", "lines": 42, "newlines": 40, "modlines": 0, "user": "SAMPLE"}, "text": "Beginning of ULUT control block - Sample 3 - ULUT Type 1\n\n\nLOOK COMMAND - DISPLAY VIRTUAL MEMORY      DISPLAY ASID= 0016\nENTER CMD -\nLAST CMD  - J+8\n\n0212D830   >E4D3E4E3  01F50000  000000E0  0212D8B4 *>ULUT.5........Q.*\n0212D840    000001A5  00000050  00000000  000000E0  *...v...&........*\n0212D850    00000062  00000003  00000000  00000010  *................*\n0212D860    00A60000  00060004  00010000  01960000  *.w...........o..*\n0212D870    000009D8  000004EC  0000027C  00000138  *...Q.......@....*\n0212D880    0000009C  00000054  00000024  00000018  *................*\n0212D890    0000000C  00000000  00000000  00000000  *................*\n0212D8A0    00000000  00000000  00000000  00000000  *................*\n0212D8B0    00000000  000C0000  00020000  00F40140  *.............4. *\n0212D8C0    000E0000  00030000  00F40180  000F0000  *.........4......*\n0212D8D0    00000000  00F401C0  00100000  00050000  *.....4..........*\n0212D8E0    00F40230  00630000  00F60000  00F40280  *.4.......6...4..*\n0212D8F0    01200000  00070000  00F40300  01210000  *.........4......*\n0212D900    00080000  00F40380  01220000  00090000  *.....4..........*\n0212D910    00F40400  01230000  000A0000  00F40480  *.4...........4..*\n0212D920    01240000  000B0000  00F40500  01250000  *.........4......*\n\n0212D930   >000C0000  00F40580  01260000  000D0000 *>.....4..........*\n0212D940    00F40600  01270000  000E0000  00F40680  *.4...........4..*\n0212D950    01280000  000F0000  00F40700  01290000  *.........4......*\n0212D960    00100000  00F40780  012A0000  00110000  *.....4..........*\n0212D970    00F40800  012B0000  00120000  00F40880  *.4...........4..*\n0212D980    012C0000  00130000  00F40900  012D0000  *.........4......*\n0212D990    00140000  00F40980  012E0000  00150000  *.....4..........*\n0212D9A0    00F40A00  012F0000  00160000  00F40A80  *.4...........4..*\n0212D9B0    01300000  00170000  00F40B00  01310000  *.........4......*\n0212D9C0    00180000  00F40B80  01320000  00190000  *.....4..........*\n0212D9D0    00F40C00  01330000  001A0000  00F40C80  *.4...........4..*\n0212D9E0    01340000  001B0000  00F40D00  01350000  *.........4......*\n0212D9F0    001C0000  00F40D80  01360000  001D0000  *.....4..........*\n0212DA00    00F40E00  01370000  001E0000  00F40E80  *.4...........4..*\n0212DA10    01380000  001F0000  00F40F00  01390000  *.........4......*\n0212DA20    00200000  00F40F80  013A0000  00210000  *.....4..........*\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSCAN": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00V\\x01\\x124o\\x01\\x15\\x02o\"Q\\x00Q\\x00\\x14\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2015-01-26T22:51:56", "lines": 81, "newlines": 20, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUSCAN &WR1=,&UCBR=,&BREG=\n* ------------------------------------------------------------------ *\n*   ULUSCAN - Access one ULUT (UCB Lookup Table) entry and fill      *\n*             in all the rest of the fields of the ULUDSECT control  *\n*             block, which depend on the current particular ULUT     *\n*             table entry.                                           *\n* ------------------------------------------------------------------ *\n*    The ULUSCAN macro must be invoked in AMODE 31.                  *\n*    The user must supply a 88 bit workarea which contains the       *\n*      data described by the ULUDSECT macro.                         *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        UCBR    - the register pointing to the current UCB          *\n*                  pointed to by this ULUT entry                     *\n*        BREG    - BCT register initially containing ULUDTOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  Later contains descending count,           *\n*                  ULUDRUNC.                                         *\n*        WR1     - work register - saved and restored                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         TM    ULUDSLV6,X'40'         Is this a 64-bit ULUT?\n         BZ    SKIPTY3                No. Deal as 31-bit.\n         STG   &WR1,ULUDSVW1          Save work reg previous contents\n*                                     64-bit housekeeping\n         LLGTR &WR1,&WR1              Clear 64-bit hi order for safety\n         LLGTR &UCBR,&UCBR            Clear 64-bit hi order for safety\n         LLGTR &BREG,&BREG            Clear 64-bit hi order for safety\n         LG    &WR1,ULUDCURR          Look at current ULUT entry\n         B     SKIPTY2\n*                                     31-bit processing\nSKIPTY3  DS    0H\n         ST    &WR1,ULUDSVW1          Save work reg previous contents\n         L     &WR1,ULUDCURR          Look at current ULUT entry\n*\nSKIPTY2  DS    0H                     Both modes come here.\n         ST    &BREG,ULUDRUNC         Save descending count.\n         TM    ULUDSLV6,X'40'         64-bit ULUT?\n         BZ    SKIPTY3A               No. Stay in 31-bit mode.\n         SAM64\nSKIPTY3A DS    0H                     Both modes come here.\n         MVC   ULUDDEVA(2),0(&WR1)    Get hex device address in entry\n         MVC   ULUDCNTR(2),4(&WR1)    Get counter of this ULUT entry\n         L     &UCBR,8(,&WR1)         Get address of current UCB\n         ST    &UCBR,ULUDUCBA         Save address in control block\n         MVC   ULUDONLF(1),3(&UCBR)   Save byte to show if online\n         MVC   ULUDDEVT(4),X'10'(&UCBR) Copy device type to ctrl block\n*                                   Get address of UCB common extension\n         TM    ULUDSLV6,X'40'         64-bit mode?\n         BZ    SKIPTY3B               No. No need to SAM31.\n         SAM31\nSKIPTY3B DS    0H\n         ST    R1,ULUDSVR1            Save R1 in control block\n         L     R1,ULUDUCBA            Load real UCB address\n         ST    R0,ULUDSVR0            Save register 0\n         IOSCMXR\n         ST    R1,ULUDCEXT            Result of macro, UCB common ext.\n         L     R0,ULUDSVR0            Restore register 0\n         L     R1,ULUDSVR1            Restore register 1\n         TM    ULUDSLV6,X'40'         Running z/OS 2.2 or higher?\n         BZ    SKIPTY3C               No. Don't switch modes.\n         SAM64                        ULUT address is 64-bit\nSKIPTY3C DS    0H\n         LA    &WR1,X'C'(,&WR1)       Go to next ULUT entry\n         TM    ULUDSLV6,X'40'         Are we running a 64-bit ULUT?\n         BZ    SKIPTY3D               No. Handle fullword processing.\n         STG   &WR1,ULUDNEXT          Doubleword processing.\n         LG    &WR1,ULUDSVW1\n         SAM31                        Switch to 31-bit before exit.\n         B     SKIPEXIT\nSKIPTY3D DS    0H                     Fullword processing 31-bit ULUT.\n         ST    &WR1,ULUDNEXT          And save it in control block\n         L     &WR1,ULUDSVW1          Restore prev work reg contents\nSKIPEXIT DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSCAN1": {"ttr": 2576, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x01\\x124o\\x01\\x124\\x8f\\x027\\x000\\x00\\x14\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2012-12-13T02:37:34", "lines": 48, "newlines": 20, "modlines": 0, "user": "PREVIOU"}, "text": "         MACRO\n         ULUSCAN &WR1=,&UCBR=,&BREG=\n* ------------------------------------------------------------------ *\n*   ULUSCAN - Access one ULUT (UCB Lookup Table) entry and fill      *\n*             in all the rest of the fields of the ULUDSECT control  *\n*             block, which depend on the current particular ULUT     *\n*             table entry.                                           *\n* ------------------------------------------------------------------ *\n*    The ULUSCAN macro must be invoked in AMODE 31.                  *\n*    The user must supply a 64 byte workarea which contains the      *\n*      data described by the ULUDSECT macro.                         *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        UCBR    - the register pointing to the current UCB          *\n*                  pointed to by this ULUT entry                     *\n*        BREG    - BCT register initially containing ULUITOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  Later contains descending count,           *\n*                  ULUDRUNC.                                         *\n*        WR1     - work register - saved and restored                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         ST    &WR1,ULUDSVW1          Save work reg previous contents\n         L     &WR1,ULUDCURR          Look at current ULUT entry\n         ST    &BREG,ULUDRUNC         Save descending count.\n         MVC   ULUDDEVA(2),0(&WR1)    Get hex device address in entry\n         MVC   ULUDCNTR(2),4(&WR1)    Get counter of this ULUT entry\n         L     &UCBR,8(,&WR1)         Get address of current UCB\n         ST    &UCBR,ULUDUCBA         Save address in control block\n         MVC   ULUDONLF(1),3(&UCBR)   Save byte to show if online\n         MVC   ULUDDEVT(4),X'10'(&UCBR) Copy device type to ctrl block\n*                                   Get address of UCB common extension\n         ST    R1,ULUDSVR1            Save R1 in control block\n         L     R1,ULUDUCBA            Load real UCB address\n         ST    R0,ULUDSVR0            Save register 0\n         IOSCMXR\n         ST    R1,ULUDCEXT            Result of macro, UCB common ext.\n         L     R0,ULUDSVR0            Restore register 0\n         L     R1,ULUDSVR1            Restore register 1\n         LA    &WR1,X'C'(,&WR1)       Go to next ULUT entry\n         ST    &WR1,ULUDNEXT          And save it in control block\n         L     &WR1,ULUDSVW1          Restore prev work reg contents\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUTAPE": {"ttr": 2578, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x15\\x01\\x12)\\x8f\\x01\\x15\\x02\\x7f\\x13\\x00\\x02\\xe6\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-27T13:00:15", "lines": 742, "newlines": 85, "modlines": 0, "user": "UA90741"}, "text": "ULUTAPE  TITLE 'ULUTAPE - DISPLAY TAPE MOUNTS'\n********************************************************************\n*        'ULUTAPE' - DISPLAY ONLINE TAPE DRIVES AND TAPE MOUNTS    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 18, 2012.\n*\n*        DATE UPDATED.   January 27, 2015.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick display of all online\n*            tape drives and pending tape mounts.\n*\n*            It does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's is\n*            not recommended by IBM.  But if you keep up with\n*            the changes, you can keep this program working.\n*            The ULUT tells you which version it is.  Currently,\n*            they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUTAPE   \u00dd M \u00a8\n*\n*            A parameter of M will cause ULUTAPE to only display\n*            tape units requiring a tape mount.  PENDING MOUNTS.\n*\n*            With no parameters, ULUTAPE will display all online\n*            tape units, showing those requiring tape mounts.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    z/OS 1.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/19 - V1.1 - Scrubbed \"volser\" fields with a\n*                     translate table because sometimes binary\n*                     data might appear there.\n*\n*                     If some real \"volser\"s appear to have\n*                     blanks in them, then permit the necessary\n*                     characters to print in translate table,\n*                     at label TRTBL0.\n*\n*        2012/11/20 - V1.2 - Allow parm of M, to only display\n*                     units that need a tape mount.\n*\n*        2012/12/12 - V1.3 - Use ULUINIT and ULUSCAN macros.\n*\n*        2015/01/27 - V1.4 - 64-bit ULUT, LLGTR base register\n*                     before doing SAM64.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n*                    M   A   C   R   O   S                            *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A                Save area for BAL register\n         STM   R15,R1,HEXSAVE            Save work registers\n         LA    R1,&FROM                  Load from address\n         LA    R0,&LEN                   Load number of chars to move\n         LA    R15,&TO                   Load to address\n         BAL   R7,HEX                    Go to routine - do the work\n         LM    R15,R1,HEXSAVE            Restore work registers\n         L     R7,SAVER7A                Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n*          B E G I N N I N G    O F    M A I N    C O D E             *\n* ------------------------------------------------------------------- *\nULUTAPE  CSECT\nULUTAPE  RMODE ANY\nULUTAPE  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)             Eyecatcher\n         DC    AL1(7),CL7'ULUTAPE'\n         DC    C' V1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(R13)        Set up program.\n         LR    R10,R15                Load base register.\n         LR    R3,R1                  Save parms across GETMAIN, etc.\n         L     R0,WORKSIZ             Size for GETMAIN.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save addr of getmained area.\n         USING WORK,R9\nINITWORK DS    0H\n         XC    FLAG1,FLAG1            Make sure Flag byte is zeroed.\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area (if small)\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Establish new save area.\n         MVI   LINE-1,X'40'           Initial clear of output line.\n         MVC   LINE,LINE-1\n         LA    R15,12                 Set return code to 12 initially.\n         ST    R15,RETCODE            And save that value.\n         ST    R3,PARMPTR             Store parm for reloading later.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Print titles.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------- *\nUCBPARM  DS    0H                     PROCESS THE PARM\n         L     R1,PARMPTR             Point to parm or CPPL\n         LTR   R1,R1                  Any CPPL or PARM pointer?\n         BZ    UCBBEGN                B if not.\n         L     R2,0(,R1)              Point to buffer.\n         LTR   R2,R2                  Any?\n         BZ    UCBBEGN                B if not.\n         LH    R3,0(R2)               Load length.\n         LTR   R3,R3                  Any?\n         BZ    UCBBEGN                B if not.\n         CLI   2(R2),X'00'            Command processor invocation?\n         BE    UCBCP                  Yes. Handle that.\n         LA    R2,2(,R2)              Point to PARM.\n         B     PARM\nUCBCP    CH    R3,=H'4'               Any PARM?\n         BE    UCBBEGN                B if not.\n         AH    R2,2(,R2)              Point to ...\n         LA    R2,4(,R2)              ... PARM.\nPARM     OI    0(R2),C' '             Uppercase.\n         MVC   PARMCHAR(1),0(R2)\n         CLI   0(R2),C'M'             PARM of M? (Display only mounts)\n         BNE   UCBBEGN                B if not.\n         OI    FLAG1,X'01'            Throw flag.\nUCBBEGN  DS    0H                     Point to the CVT.\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n*                 Get to the ULUT (UCB Lookup Table)                  *\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H                     Look at all the UCB's in system.\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R6, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA            Get real UCB address for unit.\n         TM    ULUDDEVT+2,X'80'       Is this UCB for TAPE?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    ULUDONLF,X'80'         Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n* ------------------------------------------------------------------- *\n         MVI   LINE-1,X'40'           Clear output line.\n         MVC   LINE,LINE-1\n*                                     And start moving stuff into it.\n         HEX   LINE+1,2,4(R5)         Move unit address into line.\n         MVC   VOLSRWRK(6),BLANKS     Blank this field initially.\n         MVC   VOLSRWRK(6),X'1C'(R5)  Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+12(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\n         CLC   =X'000000000000',LINE+12    If it is all zeroes,\n         BNE   HASVOLSR                    Not. Leave unchanged.\n         MVC   LINE+12(6),BLANKS           Otherwise, put blanks, not\n*                                            unprintables.\nHASVOLSR DS    0H\nTYPETAPE DS    0H                     For tapes, identify exact type.\n* ------------------------------------------------------------------- *\n*   3420's,  3480's,  3490's,  3590's  --- what kind of tape drive?   *\n* ------------------------------------------------------------------- *\n         ST    R11,SAVER11A           Save work register.\n         LA    R11,DEVTABLE           Address of tape device table.\nLOOPLUPD DS    0H                     Loop thru table.\n         CLI   0(R11),X'00'           End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R11),ULUDDEVT+3    Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R11,5(,R11)            No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(4),1(R11)      Move in listed device type.\nLOOPENDD DS    0H                       3480, 3490, 3590.\n         CLC   LINE+19(4),BLANKS      No proper type found?\n         BNE   NOSUBTYP\n         HEX   LINE+19,4,ULUDDEVT     The move in hex device type.\n         L     R11,SAVER11A           Restore work register.\nNOSUBTYP DS    0H\n* ------------------------------------------------------------------- *\n         TM    X'22'(R5),X'10'        Is the tape mounted PRIVATE?\n         BZ    NOTPRIV                NO.\n         MVC   LINE+24(4),=C'PRIV'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the tape mounted PUBLIC?\n         BZ    NOTPUBL                NO.\n         MVC   LINE+24(4),=C'PUBL'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the tape mounted STORAGE?\n         BZ    ENDDEVTP               NO.\n         MVC   LINE+24(4),=C'STOR'    YES. SAY SO.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+29,4,ULUDUCBA     Report the real UCB address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the DCE Address.             *\n* ------------------------------------------------------------------- *\n         L     R1,ULUDUCBA            Now get the DCE address\n         ST    R0,ULUDSVR0            Macro needs R0\n         IOSDCXR\n         ST    R1,DCEADDR             Save the DCE address.\n         L     R0,ULUDSVR0            Restore R0.\n* ------------------------------------------------------------------- *\n         HEX   LINE+61,4,ULUDCEXT     Report UCB Common Extension addr.\n         HEX   LINE+38,4,DCEADDR      Report DCE address.\n* ------------------------------------------------------------------- *\n*                                     Check for possible volsers ....\n         TM    X'24'(R5),X'F0'        See if there's a volser in field.\n         BNZ   PUTVOL1                Something in 1st nibble? Yes?\n*                                     Then assume a volser is there.\n         B     PUTVOL2                Otherwise, check in other field.\nPUTVOL1  DS    0H                     If volser is there,\n*        MVC   LINE+47(6),X'24'(R5)      then report it.\n         MVC   VOLSRWRK,X'24'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+47(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL2  DS    0H                     Is volser in the other places?\n         TM    X'34'(R5),X'F0'        Is a volser here, or a counter?\n         BNZ   PUTVOL3                Nonzero. Must be a volser.\n         B     PUTVOL4                Zeros at beginning, it's counter.\nPUTVOL3  DS    0H                     Since it's a volser, then\n*        MVC   LINE+54(6),X'3A'(R5)      we must report what it is.\n         MVC   VOLSRWRK,X'3A'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+54(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL4  DS    0H\n* ------------------------------------------------------------------- *\nMESTEST  DS    0H                     Test for pending tape mounts.\n         TM    X'22'(R5),X'01'        Is there a mount pending?\n         BZ    NOMES00                No. Don't report one.\n         MVC   LINE+6(5),=C'*MNT*'    Yes. Show unit needs a mount.\n* ------  Mounts out of order?  -  below\n         TM    X'06'(R5),X'40'        Mounts out of order?\n         BO    MOUNTD                 No. They were done in order.\nNOTMTD   DS    0H                     Yes. Mount was already done.\n         MVC   LINE+6(5),BLANKS       So don't report we still need one\nMOUNTD   DS    0H\n* ------  Mounts out of order?  -  above\nNOMES00  DS    0H                     Now put out output line.\n         TM    FLAG1,X'01'            Are we only displaying mounts?\n         BZ    NOMES01                No. Just print this line anyway.\n         CLC   LINE+6(5),=C'*MNT*'    Yes. See if this is a mount.\n         BNE   LOOPJUMP               Not a mount. Don't display line.\nNOMES01  DS    0H                     Look now if active I/O on unit.\n*        ST    R3,SAVER3A\n*        L     R3,ULUDCEXT            Load UCB Common Extension addr.\n*        L     R3,X'24'(,R3)          Point to IOQ.\n*        HEX   LINE+70,1,X'10'(R3)\n*        TM    X'10'(R3),X'80'        Tape involved in active I/O?\n*        BZ    NOMES02                No.\n*        MVC   LINE+70,C'A'           Move indicator into line.\n*        L     R3,SAVER3A\nNOMES02  DS    0H                     Now put out output line.\n         APUT  LINE,95\nLOOPJUMP DS    0H                     Bump to next UCB.\n         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry\n         BCT   R6,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n         B     EXIT0                  And fall through when done.\n* ------------------------------------------------------------------- *\nEXIT0    MVI   RETCODE+3,0            Reset return code to 0 here.\nEXIT     L     R2,RETCODE             Load whatever return code we had.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Reload proper return code.\n         LM    R0,R12,20(R13)         Reload registers,\n         L     R14,12(,R13)\n         BR    R14                    And get out.\n         SPACE\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n*            U N C H A N G E D    C O N S T A N T S                   *\n* ------------------------------------------------------------------- *\n         LTORG\nMESSAGET DC    C'     ULUTAPE - V1.4 - DISPLAY TAPE MOUNTS AND ONLINE T-\n               APE DRIVES'\nMESSAGEU DC    C'     -------   ----   ------- ---- ------ --- ------ -X\n               --- ------'\nMESSGSUB DC    C' Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol x\n               LastVl Ext Addr'\nMESSGSUU DC    C' ---- ----- ------ ---- ---- -------- -------- ------ X\n               ------ --------'\nMASK7    DC    XL7'40202020202120'\nMASK9    DC    XL9'402020202020202120'\nBLANKS   DC    CL16' '\n         DC    0D'0'\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'03',C'3400'\n         DC    X'82',C'3423'\n         DC    X'80',C'3480'\n         DC    X'81',C'3490'\n         DC    X'83',C'3590'\n         DC    X'0000000000'\n* ---   Convert most unprintables for VOLSER names into blanks.   --- *\nTRTBL0   DS    0D                                                       06685\n         DC    XL16'40404040404040404040404040404040'                   06686\n         DC    XL16'40404040404040404040404040404040'                   06687\n         DC    XL16'40404040404040404040404040404040'                   06688\n         DC    XL16'40404040404040404040404040404040'                   06689\n         DC    XL16'40404040404040404040404040404040'                   06690\n         DC    XL16'40404040404040404040404040404040'                   06691\n         DC    XL16'404040404040404040404040406D4040'                   06692\n         DC    XL16'40404040404040404040407B7C404040'                   06693\n         DC    XL16'40818283848586878889404040404040'                   06694\n         DC    XL16'40919293949596979899404040404040'                   06695\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696\n         DC    XL16'40404040404040404040404040404040'                   06697\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701\n* ------------------------------------------------------------------- *\n*            G E T M A I N E D    W O R K    A R E A                  *\n* ------------------------------------------------------------------- *\nWORK     DSECT\n         DS    18F                Save area.\nCVDAREA  DS    D                  Work area for CVD instruction.\nPARMPTR  DS    F                  Save parm pointer.\nRETCODE  DS    F                  Return code - default is 12.\nHEXSAVE  DS    3F                 Save area for HEX macro.\nSAVER3A  DS    F                  Save work register R3.\nSAVER7A  DS    F                  Save R7 during subroutine execution.\nSAVER11A DS    F                  Save work register R11.\nUCBPRADR DS    F                  Address of UCB PREFIX\nDCEADDR  DS    F                  Address of DEVICE CLASS EXTENSION\nWORKU    DS    CL88               Work area for ULUDSECT\nFLAG1    DS    X                  Result of scanning parm.\n*              X'01'              Only show UCB's needing tape mounts.\nVOLSRWRK DS    CL6                Work area to scrub a volser field.\nPARMCHAR DS    C                  Work area to store parm character.\n         DS    X                  Fill character for LINE.\nLINE     DS    CL100              Make sure output line is big enough.\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK             Aligned length for GETMAIN/FREEMAIN.\n* ------------------------------------------------------------------- *\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\n* ------------------------------------------------------------------- *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUTAPE$": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x120/\\x01\\x124\\x7f\\x13(\\x00\\x1d\\x00\\x1b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2012-12-12T13:28:27", "lines": 29, "newlines": 27, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT485.FILE873 <--ULU*** MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT485.FILE873(ULUTAPE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ULUTAPE\n SETSSI  CB485873\n SETCODE AC(0)\n NAME    ULUTAPE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULUTAPE#": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x120o\\x01\\x125\\x1f\\x124\\x00N\\x00;\\x00\\x00\\xc8\\xc5\\xd3\\xd7@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-11-01T00:00:00", "modifydate": "2012-12-16T12:34:27", "lines": 78, "newlines": 59, "modlines": 0, "user": "HELP"}, "text": ")F FUNCTION -\n\n  The TSO command ULUTAPE is a TSO command to show all\n  online tape drives and all pending tape mounts.  You\n  can use the ULUTAPE command to look at the externals\n  of all tape jobs on the system, regarding mount status.\n  The 'M' operand will cause ULUTAPE to only show drives\n  that have pending tape mounts.\n  The UCBDASD program is NOT APF-authorized.\n\n\n)X SYNTAX  -\n\n       ULUTAPE  \u00dd M \u00a8\n\n           DEFAULTS - NONE\n           ALIAS    - NONE\n\n\n Example Displays:\n\n    Example 1:   Tape mount required before job is run.\n    ------- -\n\n      (Please note that if *MNT* is displayed, this means\n       that the tape is not yet correctly mounted.)\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562 *MNT* V484MT 3480 PRIV 00F4B0D0 00F4AFF0        C484MC 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n    Example 2:   Job is running.\n    ------- -\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562       V484MT 3480 PRIV 00F4B0D0 00F4AFF0 V484MT        00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n    Example 3:   Job has finished running.\n    ------- -\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562              3480      00F4B0D0 00F4AFF0 V484MT V484MT 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n)O OPERANDS -\n\n))  M  -  Only display pending tape mounts, and not other drives.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUTAPE1": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x12)\\x8f\\x01\\x124\\x7f\\x13&\\x02\\xe2\\x00U\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2012-12-12T13:26:00", "lines": 738, "newlines": 85, "modlines": 0, "user": "PREVIOU"}, "text": "ULUTAPE  TITLE 'ULUTAPE - DISPLAY TAPE MOUNTS'\n********************************************************************\n*        'ULUTAPE' - DISPLAY ONLINE TAPE DRIVES AND TAPE MOUNTS    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   November 18, 2012.\n*\n*        DATE UPDATED.   December 12, 2012.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a quick display of all online\n*            tape drives and pending tape mounts.\n*\n*            It does not display a copy of the UCB's but it\n*            displays \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed once, using this method to look up UCB's is\n*            not recommended by IBM.  But if you keep up with\n*            the changes, you can keep this program working.\n*            The ULUT tells you which version it is.  Currently,\n*            they are called Type 1, or Type 2.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUTAPE   \u00dd M \u00a8\n*\n*            A parameter of M will cause ULUTAPE to only display\n*            tape units requiring a tape mount.\n*\n*            With no parameters, ULUTAPE will display all online\n*            tape units, showing those requiring tape mounts.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.   OS/390 1.3 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2012/11/19 - V1.1 - Scrubbed \"volser\" fields with a\n*                     translate table because sometimes binary\n*                     data might appear there.\n*\n*                     If some real \"volser\"s appear to have\n*                     blanks in them, then permit the necessary\n*                     characters to print in translate table,\n*                     at label TRTBL0.\n*\n*        2012/11/20 - V1.2 - Allow parm of M, to only display\n*                     units that need a tape mount.\n*\n*        2012/12/12 - V1.2 - Use ULUINIT and ULUSCAN macros.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n*                    M   A   C   R   O   S                            *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A                Save area for BAL register\n         STM   R15,R1,HEXSAVE            Save work registers\n         LA    R1,&FROM                  Load from address\n         LA    R0,&LEN                   Load number of chars to move\n         LA    R15,&TO                   Load to address\n         BAL   R7,HEX                    Go to routine - do the work\n         LM    R15,R1,HEXSAVE            Restore work registers\n         L     R7,SAVER7A                Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n*          B E G I N N I N G    O F    M A I N    C O D E             *\n* ------------------------------------------------------------------- *\nULUTAPE  CSECT\nULUTAPE  RMODE ANY\nULUTAPE  AMODE 31\n         USING *,R10\nENTRY0   B     BEGIN-*(,R15)             Eyecatcher\n         DC    AL1(7),CL7'ULUTAPE'\n         DC    C' V1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nBEGIN    STM   R14,R12,12(R13)        Set up program.\n         LR    R10,R15                Load base register.\n         LR    R3,R1                  Save parms across GETMAIN, etc.\n         L     R0,WORKSIZ             Size for GETMAIN.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Save addr of getmained area.\n         USING WORK,R9\nINITWORK DS    0H\n         XC    FLAG1,FLAG1            Make sure Flag byte is zeroed.\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area (if small)\n         XC    0(WORKLEN-200,R1),0(R1)   Clear work area (bigger one)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Establish new save area.\n         MVI   LINE-1,X'40'           Initial clear of output line.\n         MVC   LINE,LINE-1\n         LA    R15,12                 Set return code to 12 initially.\n         ST    R15,RETCODE            And save that value.\n         ST    R3,PARMPTR             Store parm for reloading later.\n         SPACE\n         APUT  MESSAGET,L'MESSAGET    Print titles.\n         APUT  MESSAGEU,L'MESSAGEU\n         APUT  MESSGSUB,L'MESSGSUB\n         APUT  MESSGSUU,L'MESSGSUU\n* ------------------------------------------------------------------- *\nUCBPARM  DS    0H                     PROCESS THE PARM\n         L     R1,PARMPTR             Point to parm or CPPL\n         LTR   R1,R1                  Any CPPL or PARM pointer?\n         BZ    UCBBEGN                B if not.\n         L     R2,0(,R1)              Point to buffer.\n         LTR   R2,R2                  Any?\n         BZ    UCBBEGN                B if not.\n         LH    R3,0(R2)               Load length.\n         LTR   R3,R3                  Any?\n         BZ    UCBBEGN                B if not.\n         CLI   2(R2),X'00'            Command processor invocation?\n         BE    UCBCP                  Yes. Handle that.\n         LA    R2,2(,R2)              Point to PARM.\n         B     PARM\nUCBCP    CH    R3,=H'4'               Any PARM?\n         BE    UCBBEGN                B if not.\n         AH    R2,2(,R2)              Point to ...\n         LA    R2,4(,R2)              ... PARM.\nPARM     OI    0(R2),C' '             Uppercase.\n         MVC   PARMCHAR(1),0(R2)\n         CLI   0(R2),C'M'             PARM of M? (Display only mounts)\n         BNE   UCBBEGN                B if not.\n         OI    FLAG1,X'01'            Throw flag.\nUCBBEGN  DS    0H                     Point to the CVT.\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n* ------------------------------------------------------------------ *\n* ------------------------------------------------------------------- *\n*                 Get to the ULUT (UCB Lookup Table)                  *\n* ------------------------------------------------------------------- *\n*    Main part of code. Go through all the UCB's and extract info.    *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H                     Look at all the UCB's in system.\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R6, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA            Get real UCB address for unit.\n         TM    ULUDDEVT+2,X'80'       Is this UCB for TAPE?\n         BNO   LOOPJUMP               No. Look for the next one.\n         TM    ULUDONLF,X'80'         Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n* ------------------------------------------------------------------- *\n         MVI   LINE-1,X'40'           Clear output line.\n         MVC   LINE,LINE-1\n*                                     And start moving stuff into it.\n         HEX   LINE+1,2,4(R5)         Move unit address into line.\n         MVC   VOLSRWRK(6),BLANKS     Blank this field initially.\n         MVC   VOLSRWRK(6),X'1C'(R5)  Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+12(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\n         CLC   =X'000000000000',LINE+12    If it is all zeroes,\n         BNE   HASVOLSR                    Not. Leave unchanged.\n         MVC   LINE+12(6),BLANKS           Otherwise, put blanks, not\n*                                            unprintables.\nHASVOLSR DS    0H\nTYPETAPE DS    0H                     For tapes, identify exact type.\n* ------------------------------------------------------------------- *\n*   3420's,  3480's,  3490's,  3590's  --- what kind of tape drive?   *\n* ------------------------------------------------------------------- *\n         ST    R11,SAVER11A           Save work register.\n         LA    R11,DEVTABLE           Address of tape device table.\nLOOPLUPD DS    0H                     Loop thru table.\n         CLI   0(R11),X'00'           End of table?\n         BE    LOOPENDD               Yes. End search for type.\n         CLC   0(1,R11),ULUDDEVT+3    Is this a match?\n         BE    LOOPPUTD               Yes. Modify device with type.\n         LA    R11,5(,R11)            No. Bump up a table entry.\n         B     LOOPLUPD               And try again until done.\nLOOPPUTD DS    0H\n         MVC   LINE+19(4),1(R11)      Move in listed device type.\nLOOPENDD DS    0H                       3480, 3490, 3590.\n         CLC   LINE+19(4),BLANKS      No proper type found?\n         BNE   NOSUBTYP\n         HEX   LINE+19,4,ULUDDEVT     The move in hex device type.\n         L     R11,SAVER11A           Restore work register.\nNOSUBTYP DS    0H\n* ------------------------------------------------------------------- *\n         TM    X'22'(R5),X'10'        Is the tape mounted PRIVATE?\n         BZ    NOTPRIV                NO.\n         MVC   LINE+24(4),=C'PRIV'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPRIV  DS    0H\n         TM    X'22'(R5),X'08'        Is the tape mounted PUBLIC?\n         BZ    NOTPUBL                NO.\n         MVC   LINE+24(4),=C'PUBL'    YES. SAY SO.\n         B     ENDDEVTP\nNOTPUBL  DS    0H\n         TM    X'22'(R5),X'04'        Is the tape mounted STORAGE?\n         BZ    ENDDEVTP               NO.\n         MVC   LINE+24(4),=C'STOR'    YES. SAY SO.\n         B     ENDDEVTP\nENDDEVTP DS    0H\n         HEX   LINE+29,4,ULUDUCBA     Report the real UCB address.\n* ------------------------------------------------------------------- *\n*      Invoke IBM's macro service to get the DCE Address.             *\n* ------------------------------------------------------------------- *\n         L     R1,ULUDUCBA            Now get the DCE address\n         ST    R0,ULUDSVR0            Macro needs R0\n         IOSDCXR\n         ST    R1,DCEADDR             Save the DCE address.\n         L     R0,ULUDSVR0            Restore R0.\n* ------------------------------------------------------------------- *\n         HEX   LINE+61,4,ULUDCEXT     Report UCB Common Extension addr.\n         HEX   LINE+38,4,DCEADDR      Report DCE address.\n* ------------------------------------------------------------------- *\n*                                     Check for possible volsers ....\n         TM    X'24'(R5),X'F0'        See if there's a volser in field.\n         BNZ   PUTVOL1                Something in 1st nibble? Yes?\n*                                     Then assume a volser is there.\n         B     PUTVOL2                Otherwise, check in other field.\nPUTVOL1  DS    0H                     If volser is there,\n*        MVC   LINE+47(6),X'24'(R5)      then report it.\n         MVC   VOLSRWRK,X'24'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+47(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL2  DS    0H                     Is volser in the other places?\n         TM    X'34'(R5),X'F0'        Is a volser here, or a counter?\n         BNZ   PUTVOL3                Nonzero. Must be a volser.\n         B     PUTVOL4                Zeros at beginning, it's counter.\nPUTVOL3  DS    0H                     Since it's a volser, then\n*        MVC   LINE+54(6),X'3A'(R5)      we must report what it is.\n         MVC   VOLSRWRK,X'3A'(R5)     Move tape volser to work area.\n         TR    VOLSRWRK(6),TRTBL0     Get rid of obvious unprintables.\n         MVC   LINE+54(6),VOLSRWRK    Move tape volser into line.\n         MVC   VOLSRWRK,BLANKS        Clear work area for next use.\nPUTVOL4  DS    0H\n* ------------------------------------------------------------------- *\nMESTEST  DS    0H                     Test for pending tape mounts.\n         TM    X'22'(R5),X'01'        Is there a mount pending?\n         BZ    NOMES00                No. Don't report one.\n         MVC   LINE+6(5),=C'*MNT*'    Yes. Show unit needs a mount.\n* ------  Mounts out of order?  -  below\n         TM    X'06'(R5),X'40'        Mounts out of order?\n         BO    MOUNTD                 No. They were done in order.\nNOTMTD   DS    0H                     Yes. Mount was already done.\n         MVC   LINE+6(5),BLANKS       So don't report we still need one\nMOUNTD   DS    0H\n* ------  Mounts out of order?  -  above\nNOMES00  DS    0H                     Now put out output line.\n         TM    FLAG1,X'01'            Are we only displaying mounts?\n         BZ    NOMES01                No. Just print this line anyway.\n         CLC   LINE+6(5),=C'*MNT*'    Yes. See if this is a mount.\n         BNE   LOOPJUMP               Not a mount. Don't display line.\nNOMES01  DS    0H                     Look now if active I/O on unit.\n*        ST    R3,SAVER3A\n*        L     R3,ULUDCEXT            Load UCB Common Extension addr.\n*        L     R3,X'24'(,R3)          Point to IOQ.\n*        HEX   LINE+70,1,X'10'(R3)\n*        TM    X'10'(R3),X'80'        Tape involved in active I/O?\n*        BZ    NOMES02                No.\n*        MVC   LINE+70,C'A'           Move indicator into line.\n*        L     R3,SAVER3A\nNOMES02  DS    0H                     Now put out output line.\n         APUT  LINE,95\nLOOPJUMP DS    0H                     Bump to next UCB.\n         MVC   ULUDCURR,ULUDNEXT      Go to next ULUT entry\n         BCT   R6,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n         B     EXIT0                  And fall through when done.\n* ------------------------------------------------------------------- *\nEXIT0    MVI   RETCODE+3,0            Reset return code to 0 here.\nEXIT     L     R2,RETCODE             Load whatever return code we had.\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         DROP  R9\n         LR    R15,R2                 Reload proper return code.\n         LM    R0,R12,20(R13)         Reload registers,\n         L     R14,12(,R13)\n         BR    R14                    And get out.\n         SPACE\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n*            U N C H A N G E D    C O N S T A N T S                   *\n* ------------------------------------------------------------------- *\n         LTORG\nMESSAGET DC    C'     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE T-\n               APE DRIVES'\nMESSAGEU DC    C'     -------   ----   ------- ---- ------ --- ------ -X\n               --- ------'\nMESSGSUB DC    C' Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol x\n               LastVl Ext Addr'\nMESSGSUU DC    C' ---- ----- ------ ---- ---- -------- -------- ------ X\n               ------ --------'\nMASK7    DC    XL7'40202020202120'\nMASK9    DC    XL9'402020202020202120'\nBLANKS   DC    CL16' '\n         DC    0D'0'\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'03',C'3400'\n         DC    X'82',C'3423'\n         DC    X'80',C'3480'\n         DC    X'81',C'3490'\n         DC    X'83',C'3590'\n         DC    X'0000000000'\n* ---   Convert most unprintables for VOLSER names into blanks.   --- *\nTRTBL0   DS    0D                                                       06685\n         DC    XL16'40404040404040404040404040404040'                   06686\n         DC    XL16'40404040404040404040404040404040'                   06687\n         DC    XL16'40404040404040404040404040404040'                   06688\n         DC    XL16'40404040404040404040404040404040'                   06689\n         DC    XL16'40404040404040404040404040404040'                   06690\n         DC    XL16'40404040404040404040404040404040'                   06691\n         DC    XL16'404040404040404040404040406D4040'                   06692\n         DC    XL16'40404040404040404040407B7C404040'                   06693\n         DC    XL16'40818283848586878889404040404040'                   06694\n         DC    XL16'40919293949596979899404040404040'                   06695\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696\n         DC    XL16'40404040404040404040404040404040'                   06697\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701\n* ------------------------------------------------------------------- *\n*            G E T M A I N E D    W O R K    A R E A                  *\n* ------------------------------------------------------------------- *\nWORK     DSECT\n         DS    18F                Save area.\nCVDAREA  DS    D                  Work area for CVD instruction.\nPARMPTR  DS    F                  Save parm pointer.\nRETCODE  DS    F                  Return code - default is 12.\nHEXSAVE  DS    3F                 Save area for HEX macro.\nSAVER3A  DS    F                  Save work register R3.\nSAVER7A  DS    F                  Save R7 during subroutine execution.\nSAVER11A DS    F                  Save work register R11.\nUCBPRADR DS    F                  Address of UCB PREFIX\nDCEADDR  DS    F                  Address of DEVICE CLASS EXTENSION\nWORKU    DS    CL64               Work area for ULUDSECT\nFLAG1    DS    X                  Result of scanning parm.\n*              X'01'              Only show UCB's needing tape mounts.\nVOLSRWRK DS    CL6                Work area to scrub a volser field.\nPARMCHAR DS    C                  Work area to store parm character.\n         DS    X                  Fill character for LINE.\nLINE     DS    CL100              Make sure output line is big enough.\nWORKINIT EQU   *-WORK\n         DS    0D\nWORKLEN  EQU   *-WORK             Aligned length for GETMAIN/FREEMAIN.\n* ------------------------------------------------------------------- *\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\n* ------------------------------------------------------------------- *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUTYPE": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x19\\x01\\x12)\\x8f\\x01\\x15\\x02\\x7f\\x01\\x06\\x05\\x17\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-27T01:06:19", "lines": 1303, "newlines": 85, "modlines": 0, "user": "UA90741"}, "text": "ULUTYPE  TITLE 'ULUTYPE - DISPLAY DEFINED I/O DEVICES USING ULUT'\n********************************************************************\n*     'ULUTYPE - DISPLAY DEFINED DEVICES USING UCB LOOKUP TABLE    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   March 12, 2014.\n*\n*        DATE UPDATED.   December 23, 2014  by John Hamlet and\n*                                              Sam Golob\n*\n*                        January 19, 2015   remove z/OS level\n*                                           dependency\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        PURPOSE.\n*\n*            This TSO command is a display of\n*            the number of defined devices, by type,\n*            also showing the number of devices online,\n*            by type.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUTYPE        (no parameters currently supported)\n*\n*\n*        DESCRIPTION.\n*\n*            This program reports on the \"heading fields\" of the\n*            ULUT, and then it scans through the ULUT table entries\n*            to re-count the individual UCB's and also figure out\n*            which ones are online.  The result is similar to a\n*            DCQ (Device Class Queue) display, but it is very\n*            accurate, having come from \"the horse's mouth\", or\n*            in other words, from the real source of the data.\n*\n*            The unique thing about this TSO command, is that\n*            it does not acquire a copy of the UCB's but it\n*            acquires \"the real thing\", and NOT a UCB copy,\n*            without having to be authorized.  The way this was\n*            done, was to use the ULUT, or UCB LookUp Table,\n*            which is not really documented by IBM.  Since the\n*            ULUT's structure can change, and it actually has\n*            changed twice, using this method to look up UCB's\n*            is not recommended by IBM.  But if you keep up\n*            with the changes, you can keep this program\n*            working.  The ULUT tells you which version it is.\n*            Currently, they are called Type 1, or Type 2, or\n*            Type 3.  Type 2 started with z/OS 1.7.  Type 3\n*            started with z/OS 2.2, and was moved into 64-bit\n*            storage.  Therefore the Type 3 ULUT has to be\n*            accessed in 64-bit mode.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write programs\n*            that use it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*            Inspiration:  Lee Conyers  CBT File 221.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 2.2 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2014/03/13 - V1.1 - Display UCB device type counts\n*                      in hex and decimal.\n*\n*        2014/03/13 - V1.2 - Display addresses of control blocks\n*                      needed to address the ULUT and also give\n*                      an indication of how to get there, in\n*                      \"LOOK format\" from CBT File 264, LOOK\n*                      program.\n*\n*                      J10 is virtual address of CVT pointed to\n*                           by address at HEX 10.\n*                      J+7C is the CVTIXAVL pointed to at address\n*                           X'7C' off the CVT.\n*                      J+D0 is the IOVT address pointed to at X'D0'\n*                           off the CVTIXAVL.\n*                      J+8  is the ULUT address pointed to at X'08'\n*                           off the IOVT.\n*\n*        2014/12/23 - V1.3 - z/OS 2.2 modifications for ULUT\n*                            Type 3 which is in 64-bit storage.\n*                            Display the 64-bit ULUT address.\n*\n*        2015/01/19 - V1.4 - PTF UY90741,0,2 retrofits the ULUT\n*                            version 3 to z/OS 2.1 and 1.13.  Code\n*                            modified not to check for z/OS level.\n*                            Criterion is IOVT+8 having fullword 0,\n*                            then IOVT+X'1B8' contains 64-bit ULUT\n*                            address, and ULUT is dealt with in\n*                            64-bit mode.  Otherwise ULUT is 31-bit.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT     31-bit mode only\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDIOVT\nIOVT     DSECT                         IOS Vector Table          ESA41\n         DS    C'IOVT'\n         DS    H'476'                  Length of IOVT            RS1106\n         DS    XL2\nIOVTULUT DS    V(ULUT)                 UCB LOOK-UP TABLE\n         DS    3F\nIOVTCDA  DS    V(CDA)                  Config Data Area\n         DS    1F                      ???\n         DS    A                       IASC ??\n         DS    A                       IOS PIN QUEUE HEADERS\n         DS    A                       IOS PIN QUEUE ELEMENTS\n         DS    1F                      ???\n         DS    A                       TQE\n         DS    6F                      ???\n         DS    A                       CSC\n         DS    1F                      ???\n         DS    A                       IOS 31 BIT DST ENTRIES\n         DS    A                       IOS 24 BIT DST ENTRIES\n         DS    1F                      ???\n         DS    A                       IOS UCB SERVICES PC RTN\n         DS    A                       IODE\n         DS    3F                      ???\n         DS    A                       IOS HASH\n         DS    A                       IOS UCB HASH COLISIONS\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    4F                      ???\n         DS    A                       CAPT\n         DS    2F                      ???\n         DS    A                       DDT\n         DS    A                       DDT\n         DS    1F                      ???\n         DS    A                       DDT\n         DS    A                       IOS CAPTURE UCB SERVICE\n         DS    A                       TRCB\n         DS    2F                      ???\n         DS    1F                      ???\n         DS    A                       MGFQ\n         DS    A                       CMVT\n         DS    A                       CPCT\n         DS    1F                      ???\n         DS    1F                      ???\n         DS    A                       IXSD\n         DS    CL8'SYSIOS01'\n         DS    6F                      ???\n         DS    A                       QDIO\n         DS    1F                      ???\n         DS    A                       SAUT\n         DS    4F                      ???\n         DS    A                       IOS PURGE WORK AREAS\nIOVTFLG1 DS    X                       IOVT-Flag\nIOVTMIDAW EQU   X'08'                  MIDAW ON?\n         DS    XL3                     ???\n         DS    A                       CCAP\n         ORG   IOVT+440                0x1B8                     JH1214\nIOVT3LUT DS    D                       UCB V3 look-up table      JH1214\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         MACRO\n         IOSDULU3\nULU3     DSECT                         UCB Look-up Table\n         DS    C'ULUT'\nULU3VERS DS    X                       version 3                 JH1214\n         DS    AL1                     Subpool\n         DS    XL2                     <filler>\n         DS    F                       <filler>\n         DS    F                       <filler>\nULU31ST  DS    D                       FIRST LOOK-UP ENTRY (V3)\n         DS    XL2                     <filler>\n         DS    XL2                     <filler>\nULU3UCBC DS    F                       Total number of LOOK-UP Entries\nULU3TAPE DS    F'064'                  number of TAPE LOOK-UP Entries\nULU3COMM DS    F'032'                  number of COMM LOOK-UP Entries\nULU3DASD DS    F'256'                  number of DASD LOOK-UP Entries\nULU3DISP DS    F'128'                  number of DISP LOOK-UP Entries\nULU3UREC DS    F'032'                  number of UREC LOOK-UP Entries\nULU3CHAR DS    F'008'                  number of CHAR LOOK-UP Entries\nULU3CTCA DS    F'016'                  number of CTCA LOOK-UP Entries\n         ORG   ULU3+264\nUL3ENTRY DSECT                         UCB LOOK-UP ENTRY\nUL3EDEVN DS    X'000D'                 DEVICE NUMBER\nUL3EFLGS DS    X'4000'                 Flags\nUL3EDYN   EQU  X'40'                   Dynamic UCB\nUL3ESEQN DS    XL2                     ?\n         DS    XL2                     ?\nUL3EUCBP DS    V(UCBOB)                UCB ADDRESS\nUL3ELEN  EQU   *-UL3ENTRY\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         IOSDULUT\n         IOSDULU2\n         IOSDULU3\n         CVT      DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\nULUTYPE  CSECT\nULUTYPE  RMODE ANY\nULUTYPE  AMODE 31\n         USING *,R10,R11,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'ULUTYPE'\n         DC    CL6' V1.4 '\n         DC    CL16'ULUT DCQ LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base registers.\n         LA    R11,4095(,R10)\n         LA    R11,1(,R11)\n         LA    R12,4095(,R11)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n*\nINITCON  DS    0H                     Zero counters\n         XC    CNTTAPE,CNTTAPE\n         XC    CNTCOMM,CNTCOMM\n         XC    CNTDASD,CNTDASD\n         XC    CNTDISP,CNTDISP\n         XC    CNTUREC,CNTUREC\n         XC    CNTCHAR,CNTCHAR\n         XC    CNTCTCA,CNTCTCA\n         XC    ONLTAPE,ONLTAPE\n         XC    ONLCOMM,ONLCOMM\n         XC    ONLDASD,ONLDASD\n         XC    ONLDISP,ONLDISP\n         XC    ONLUREC,ONLUREC\n         XC    ONLCHAR,ONLCHAR\n         XC    ONLCTCA,ONLCTCA\n         XC    OSLVLSW6,OSLVLSW6      Clear image of CVTOSLV6 from CVT.\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R2,16                  CVT\n         ST    R2,STORCVT             Store value for display later.\n         USING CVTMAP,R2\n         MVC   OSLVLSW6,CVTOSLV6      Copy relevant OS level switch\n         DROP  R2\n         L     R3,X'7C'(,R2)          CVTIXAVL - IOCOM\n         ST    R3,STORIXAV            Store for display later.\n         L     R3,X'D0'(,R3)          IOS Vector Table\n         ST    R3,STORIOVT            Store for display later.\n         L     R6,8(,R3)              Check 31-bit ULUT address\n         LTR   R6,R6                  Is it zero?\n         BNZ   GETULUN2               No. This is Type 2 or less\n         B     GETULUY2               Yes. We have 64-bit ULUT.\nGETULUY2 DS    0H\n         OI    OSLVLSW6,X'40'         Indicate ULUT address is 64-bit\n         LLGTR R3,R3                  Clear 64-bit hi-area\n         LLGTR R4,R4\n         LLGTR R7,R7                  <<<< ADDED >>>>\n         LLGTR R9,R9                  <<<< ADDED >>>>\n         LLGTR R10,R10                <<<< ADDED >>>>\n         LLGTR R12,R12                <<<< ADDED >>>>\n         LG    R4,X'1B8'(,R3)         Pick up ULUT V3 address\n         SAM64\n         LGR   R3,R4                  Reload R3 with ULUT address\n         STG   R4,STORULUT            Doubleword address\n         B     GETULUN3               Skip 31-bit stuff\nGETULUN2 DS    0H                     31-bit mode code. Type <=2.\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         ST    R4,STORULUT\nGETULUN3 DS    0H                     Get here in either address mode.\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n* ------------------------------------------------------------------ *\n         MVC   ULUTTYPE(1),4(R3)      Store the ULUT type.\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n         TM    OSLVLSW6,X'40'         64-bit ULUT here?\n         BNO   GETULEX2               No. Exit.\n         SAM64                        Need 64-bit mode for compare.\n         MVC   ULUTTYPE(1),4(R3)      Save off the ULUT type field.\n         CLI   4(R3),X'03'            Is it ULUT Type 3?\n         BE    ULUTTYP3               Yes. Start table entry scan.\n         SAM31                        Back to 31-bit mode.\nGETULEX2 DS    0H\n* ----------------------------------- Insert test for future types here\n         B     EXIT\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     This practice appears to be relatively harmless if we only     *\n*     DISPLAY the UCB and don't try to modify it.  Also, during a    *\n*     configuration change, you might get a S0C4 from these          *\n*     programs, but they will run fine a minute later.  They are     *\n*     primarily for display only.                                    *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 2.2.  So it is really quite stable, so far,      *\n*      as long as we code for all the current ULUT types.            *\n*                                                                    *\n*     Summary:                                                       *\n*                                                                    *\n*     The ULUT table has been changed twice by IBM, thus far:        *\n*      Type 1:  ESA 4.x  thru z/OS 1.7                               *\n*      Type 2:  z/OS 1.7 thru z/OS 2.1                               *\n*      Type 3:  z/OS 2.2 ....    (table is now in 64-bit storage)    *\n*               z/OS 2.1  with UA90741 applied                       *\n*               z/OS 1.13 HBB7780 with UA90740 applied               *\n*               z/OS 1.13 JBB778H with UA90742 and UA90740 applied   *\n*                                                                    *\n*     At the ULUT V.3 level the ULUT (UCB Lookup Table) has been     *\n*      moved into 64-bit storage, so even to get to the beginning    *\n*      of the table, in order to find out the table type, is now     *\n*      different, but not too difficult.  In the (OCO) macro         *\n*      IOSDIOVT, there are two pointer locations to the ULUT.        *\n*      IOVT+8 is a fullword pointer.  IOVT+X'1B8' is a doubleword    *\n*      pointer.  If IOVT+8 for a fullword, is zeroes, then this      *\n*      shows that IOVT+X'1B8' is the valid pointer, it points to     *\n*      a doubleword address, and you have to address the ULUT        *\n*      in 64-bit mode.                                               *\n*                                                                    *\n*     One test is run.  If IOVT+8 for a fullword is zeroes, then     *\n*      IOVT+X'1B8' is assumed to be valid, and flag OSLVLSW6, which  *\n*      had previously been copied from CVTOSLV6 in the CVT, is       *\n*      OR'ed to X'40', which would normally indicate the presence    *\n*      of z/OS 2.2.  This indicates to the program that the ULUT     *\n*      is in 64-bit mode, even at lower levels, with the application *\n*      of PTFs UA90741, or UA90740 possibly with UA90742.            *\n*                                                                    *\n* ------------------------------------------------------------------ *\nULUTTYP1 DS    0H\n         L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM1\nULUTTYP2 DS    0H\n         L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM2\nULUTTYP3 DS    0H\n         LG    R3,X'10'(,R3)   ULUT Type 3, Addr of first table entry.\n         L     R4,X'1C'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         STG   R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM3\n* --------------------------- Insert displacement for future types.  *\nDISPNUM1 DS    0H              Format header fields from ULUT Type 1\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material.\n         USING ULUT,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULUTUCBC\n         HEX   LINE+9,4,ULUTTAPE\n         HEX   LINE+18,4,ULUTCOMM\n         HEX   LINE+27,4,ULUTDASD\n         HEX   LINE+36,4,ULUTDISP\n         HEX   LINE+45,4,ULUTUREC\n         HEX   LINE+54,4,ULUTCHAR\n         HEX   LINE+63,4,ULUTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULUTUCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULUTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULUTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULUTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULUTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULUTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULUTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULUTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM2 DS    0H              Format header fields from ULUT Type 2\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material\n         USING ULU2,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULU2UCBC\n         HEX   LINE+9,4,ULU2TAPE\n         HEX   LINE+18,4,ULU2COMM\n         HEX   LINE+27,4,ULU2DASD\n         HEX   LINE+36,4,ULU2DISP\n         HEX   LINE+45,4,ULU2UREC\n         HEX   LINE+54,4,ULU2CHAR\n         HEX   LINE+63,4,ULU2CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULU2UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULU2TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULU2COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULU2DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULU2DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULU2UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULU2CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULU2CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM3 DS    0H              Format header fields from ULUT Type 2\n         TM    OSLVLSW6,X'40'         Is the o.s. z/OS 2.2 or above?\n         BNO   NULUVER3               ULUT Type 2 or less, 31-bit mode.\n         SAM64                        Need 64-bit mode\n         LLGTR R3,R3\n         LG    R3,STORULUT\n         SAM31                        Need 31-bit mode for print.\n         BAL   R7,PRTHEAD             Display all the header material.\n         SAM64                        Need 64-bit mode.\n         USING ULU3,R3\n         MVC   ULV3UCBC,ULU3UCBC      In 64-bit mode, move\n         MVC   ULV3TAPE,ULU3TAPE        quantities to areas\n         MVC   ULV3COMM,ULU3COMM          that are in 31-bit\n         MVC   ULV3DASD,ULU3DASD            mode.\n         MVC   ULV3DISP,ULU3DISP\n         MVC   ULV3UREC,ULU3UREC\n         MVC   ULV3CHAR,ULU3CHAR\n         MVC   ULV3CTCA,ULU3CTCA\n         SAM31                        Go to 31-bit mode.\n         MVC   LINE,LINE-1            Display ULUT header fields.\n         HEX   LINE,4,ULV3UCBC\n         HEX   LINE+9,4,ULV3TAPE\n         HEX   LINE+18,4,ULV3COMM\n         HEX   LINE+27,4,ULV3DASD\n         HEX   LINE+36,4,ULV3DISP\n         HEX   LINE+45,4,ULV3UREC\n         HEX   LINE+54,4,ULV3CHAR\n         HEX   LINE+63,4,ULV3CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULV3UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULV3TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULV3COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULV3DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULV3DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULV3UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULV3CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULV3CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\nNULUVER3 DS    0H\n         DROP  R3\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         TM    OSLVLSW6,X'40'  Is system ACTUALLY z/OS 2.2 or above?\n         BNO   NLUPULU3               No.\n         SAM64\n         LLGTR R5,R5           Clear 64-bit hi-area\n         LLGTR R3,R3           Clear 64-bit hi-area\n         LG    R3,SAVER3A      Address of 1st table entry - 64bit\n         B     LOOPUCB\nNLUPULU3 DS    0H\n         L     R3,SAVER3A      Address of 1st table entry - 31bit\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM64                 No.\n         SAM64\nNSAM64   DS    0H\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31                 No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31   DS    0H\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         CLI   UCBTBYT3,X'80'         Is this UCB for TAPE?\n         BE    LOOPTAPE               No. Look for the next one.\n         CLI   UCBTBYT3,X'41'         Is this UCB for CTCA?\n         BE    LOOPCTC                No. Look for the next one.\n         CLI   UCBTBYT3,X'40'         Is this UCB for COMM?\n         BE    LOOPCOMM               No. Look for the next one.\n         CLI   UCBTBYT3,X'20'         Is this UCB for DASD?\n         BE    LOOPDASD               No. Look for the next one.\n         CLI   UCBTBYT3,X'10'         Is this UCB for DISP?\n         BE    LOOPDISP               No. Look for the next one.\n         CLI   UCBTBYT3,X'08'         Is this UCB for UREC?\n         BE    LOOPUREC               No. Look for the next one.\n         CLI   UCBTBYT3,X'04'         Is this UCB for CHAR?\n         BE    LOOPCHAR               No. Look for the next one.\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -   Count UCB's.\nLOOPTAPE DS    0H\n         L     R6,CNTTAPE\n         LA    R6,1(,R6)\n         ST    R6,CNTTAPE\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLTAPE\n         LA    R6,1(,R6)\n         ST    R6,ONLTAPE\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCTC  DS    0H\n         L     R6,CNTCTCA\n         LA    R6,1(,R6)\n         ST    R6,CNTCTCA\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCTCA\n         LA    R6,1(,R6)\n         ST    R6,ONLCTCA\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCOMM DS    0H\n         L     R6,CNTCOMM\n         LA    R6,1(,R6)\n         ST    R6,CNTCOMM\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCOMM\n         LA    R6,1(,R6)\n         ST    R6,ONLCOMM\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDASD DS    0H\n         L     R6,CNTDASD\n         LA    R6,1(,R6)\n         ST    R6,CNTDASD\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDASD\n         LA    R6,1(,R6)\n         ST    R6,ONLDASD\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDISP DS    0H\n         L     R6,CNTDISP\n         LA    R6,1(,R6)\n         ST    R6,CNTDISP\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDISP\n         LA    R6,1(,R6)\n         ST    R6,ONLDISP\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPUREC DS    0H\n         L     R6,CNTUREC\n         LA    R6,1(,R6)\n         ST    R6,CNTUREC\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLUREC\n         LA    R6,1(,R6)\n         ST    R6,ONLUREC\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCHAR DS    0H\n         L     R6,CNTCHAR\n         LA    R6,1(,R6)\n         ST    R6,CNTCHAR\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCHAR\n         LA    R6,1(,R6)\n         ST    R6,ONLCHAR\n         B     LOOPJUMP\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         TM    OSLVLSW6,X'40'             Run time test.\n         BNO   NSAM31A\n         SAM64\nNSAM31A  DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n*\n* ---- At end of ULUT, fall thru to here.\n*\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   NSAM31B                No.\n         SAM31                        For z/OS 2.2 and above, SAM31.\nNSAM31B  DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   All UCB's have now been scanned using the ULUT table entries.   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1            Insert a few blank lines.\n         APUT  LINE,18\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNDEFD DS    0H                     Display scanned values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(8),=C'Scanned:'\n         HEX   LINE+9,4,CNTTAPE\n         HEX   LINE+18,4,CNTCOMM\n         HEX   LINE+27,4,CNTDASD\n         HEX   LINE+36,4,CNTDISP\n         HEX   LINE+45,4,CNTUREC\n         HEX   LINE+54,4,CNTCHAR\n         HEX   LINE+63,4,CNTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(8),=C'------- '\n         L     R8,CNTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,CNTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,CNTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,CNTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,CNTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,CNTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,CNTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNONLN DS    0H                     Display online values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(7),=C'Online:'\n         HEX   LINE+9,4,ONLTAPE\n         HEX   LINE+18,4,ONLCOMM\n         HEX   LINE+27,4,ONLDASD\n         HEX   LINE+36,4,ONLDISP\n         HEX   LINE+45,4,ONLUREC\n         HEX   LINE+54,4,ONLCHAR\n         HEX   LINE+63,4,ONLCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(7),=C'------ '\n         L     R8,ONLTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ONLCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ONLDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ONLDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ONLUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ONLCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ONLCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Now we're done with displaying all the totals. So exit.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to convert hex values to decimal.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDECCONV  DS    0H                  Convert fullword hex to decimal.\n*                                  R8 has the fullword to be converted\n         ST    R7,SAVER7D\n         CVD   R8,CVDAREA          Convert it to printable\n         MVC   DECOUT,MASK10       Move in the mask\n         ED    DECOUT,CVDAREA+3    Make it pretty\n*        APUT  NUMOUT,9\n         L     R7,SAVER7D\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display top of the report.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTHEAD  DS    0H                     Display Report Header Info.\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   ULADDR0                ULUT Type 2 or less, 31-bit mode.\n         SAM31\nULADDR0  DS    0H\n         ST    R7,SAVER7E\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         MVC   LINE,LINE-1\n         MVC   LINE+20(27),=C'* Hex and Decimal Display *'\n         APUT  LINE,56\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Ver: '\n         HEX   LINE+11,1,ULUTTYPE\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVT Addr: '\n         HEX   LINE+11,4,STORCVT\n         MVC   LINE+21(4),=C'J10 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVTIXAVL: '\n         HEX   LINE+11,4,STORIXAV\n         MVC   LINE+21(4),=C'J+7C'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'IOVT Adr: '\n         HEX   LINE+11,4,STORIOVT\n         MVC   LINE+21(4),=C'J+D0'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Adr: '\n         TM    OSLVLSW6,X'40'         Is z/OS 2.2 or above, running?\n         BNO   ULADDR1                ULUT Type 2 or less, 31-bit mode.\n         HEX   LINE+11,4,STORULUT     Full 64-bit ULUT address\n         HEX   LINE+20,4,STORULUT+4\n         MVI   LINE+19,X'6D'          Underscore\n         B     ULADDR1E\nULADDR1  DS    0H\n         HEX   LINE+11,4,STORULUT\n         MVC   LINE+21(4),=C'J+8 '\nULADDR1E DS    0H\n         APUT  LINE,40\n         MVC   LINE,LINE-1\n         APUT  LINE,16\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'From ULUT Header:'\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'---- ---- ------ '\n         APUT  LINE,20\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n         L     R7,SAVER7E\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUTYPE - V1.4 - DEFINED DEVICE TOTALS'\nMESSAGEU DC    C'              -------   ----   ------- ------ ------'\nMESSGSUB DC    C'Total    TAPE     COMM     DASD     DISP     UREC     X\n               CHAR     CTCA'\nMESSGSUU DC    C'-----    ----     ----     ----     ----     ----     X\n               ----     ----'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nMASK10   DC    XL10'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER3A  DS    D                      Save R3 doubleword\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER7D  DS    F                      Save R7\nSAVER7E  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nOSLVLSW6 DS    X                      z/OS 2.2 or above?\nHBB77A0  EQU   OSLVLSW6,64            X'40'\nULUTTYPE DS    X                      Stored ULUT type\nSTORCVT  DS    F\nSTORULUT DS    D                      64-bit location\nSTORIXAV DS    F\nSTORIOVT DS    F\n         DS    C\nDECOUT   DS    0CL10\n         DS    CL2\nNUMOUT   DS    CL8\nCNTTAPE  DS    F                      UCB3TAPE EQU   X'80'\nCNTCOMM  DS    F                      UCB3COMM EQU   X'40'\nCNTDASD  DS    F                      UCB3DACC EQU   X'20'\nCNTDISP  DS    F                      UCB3DISP EQU   X'10'\nCNTUREC  DS    F                      UCB3UREC EQU   X'08'\nCNTCHAR  DS    F                      UCB3CHAR EQU   X'04'\nCNTCTCA  DS    F                      UCB3CTC  EQU   X'41'\nONLTAPE  DS    F                      UCB3TAPE EQU   X'80'\nONLCOMM  DS    F                      UCB3COMM EQU   X'40'\nONLDASD  DS    F                      UCB3DACC EQU   X'20'\nONLDISP  DS    F                      UCB3DISP EQU   X'10'\nONLUREC  DS    F                      UCB3UREC EQU   X'08'\nONLCHAR  DS    F                      UCB3CHAR EQU   X'04'\nONLCTCA  DS    F                      UCB3CTC  EQU   X'41'\nULV3UCBC DS    F\nULV3TAPE DS    F\nULV3COMM DS    F\nULV3DASD DS    F\nULV3DISP DS    F\nULV3UREC DS    F\nULV3CHAR DS    F\nULV3CTCA DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         IECDIOCM\n         IOSDIOVT\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUTYPE$": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x120/\\x01\\x14\\x07/\\tP\\x00\\x1c\\x00\\x1b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2014-03-13T09:50:50", "lines": 28, "newlines": 27, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT488.FILE873    <== IOSDULU*\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(ULUTYPE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ULUTYPE\n SETCODE AC(0)\n NAME    ULUTYPE(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULUTYPE1": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00G\\x01\\x12)\\x8f\\x01\\x14\\x07/\\t)\\x03\\xd5\\x00U\\x00\\x00\\xd7\\xd9\\xc5\\xe5\\xc9\\xd6\\xe4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2014-03-13T09:29:47", "lines": 981, "newlines": 85, "modlines": 0, "user": "PREVIOU"}, "text": "ULUTYPE  TITLE 'ULUTYPE - DISPLAY DEFINED I/O DEVICES USING ULUT'\n********************************************************************\n*     'ULUTYPE - DISPLAY DEFINED DEVICES USING UCB LOOKUP TABLE    *\n********************************************************************\n*\n*        WRITTEN BY.     Sam Golob\n*\n*        DATE WRITTEN.   March 12, 2014.\n*\n*        DATE UPDATED.\n*\n*        ATTRIBUTES.     Reentrant.  NOT APF-AUTHORIZED.\n*                                    --- --------------\n*        DESCRIPTION.\n*\n*            This TSO command is a display of\n*            the number of defined devices, by type.\n*\n*        OUTPUT.\n*\n*            TSO output is via PUTLINE, so the output can\n*            be trapped and displayed.\n*\n*        SYNTAX.\n*\n*            ULUTYPE        (no parameters currently supported)\n*\n*\n*        NOTE.\n*\n*            This program reports on the \"heading fields\" of the\n*            ULUT, and then it scans through the ULUT table entries\n*            to re-count the individual UCB's and also figure out\n*            which ones are online.\n*\n*        ATTRIBUTION.\n*\n*            Thanks to Gilbert Saint-flour, of blessed memory,\n*            for doing the necessary research, calling IBM Level 2,\n*            nosing out the facts, etc.  Gilbert exposed this\n*            technique, and I decided to try and write a program\n*            that uses it.  You get real-time UCBs without needing\n*            APF-authorization.\n*\n*            Inspiration:  Lee Conyers  CBT File 221.\n*\n*        FURTHER REFERENCE.\n*\n*            Please refer to the SHOWzOS code on CBT Tape File 492\n*            to see how this is done.  Search for string \"ULUT\".\n*\n*        TESTED.    ESA 5.2.2 thru z/OS 1.13 .\n*\n*\n*        LOG OF CHANGES.\n*\n*        2014/03/13 - V1.1 - Display UCB device type counts\n*                      in hex and decimal.\n*\n*        2014/03/13 - V1.2 - Display addresses of control blocks\n*                      needed to address the ULUT and also give\n*                      an indication of how to get there, in\n*                      \"LOOK format\" from CBT File 264, LOOK\n*                      program.\n*\n*                      J10 is virtual address of CVT pointed to\n*                           by address at HEX 10.\n*                      J+7C is the CVTIXAVL pointed to at address\n*                           X'7C' off the CVT.\n*                      J+D0 is the IOVT address pointed to at X'D0'\n*                           off the CVTIXAVL.\n*                      J+8  is the ULUT address pointed to at X'08'\n*                           off the IOVT.\n*\n********************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n         IOSDULUT\n         IOSDULU2\n* ------------------------------------------------------------------- *\nULUTYPE  CSECT\nULUTYPE  RMODE ANY\nULUTYPE  AMODE 31\n         USING *,R10,R11,R12\nENTRY0   B     BEGIN-*(,R15)            Eyecatcher.\n         DC    AL1(7),CL7'ULUTYPE'\n         DC    CL6' V1.2 '\n         DC    CL16'ULUT DASD LOOKUP'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\n* ------------------------------------------------------------------- *\nBEGIN    STM   R14,R12,12(R13)\n         LR    R10,R15                Load base registers.\n         LA    R11,4095(,R10)\n         LA    R11,1(,R11)\n         LA    R12,4095(,R11)\n         LA    R12,1(,R12)\n         LR    R2,R1                  Save register 1.\n         L     R0,WORKSIZ             Get size to be GETMAINed.\n         GETMAIN R,LV=(0)\n         LR    R9,R1                  Address of GETMAINed area.\n         USING WORK,R9\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         XC    0(WORKLEN-200,R1),0(R1)        Clear work area\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n         ST    R13,4(,R9)             Old address in new save area.\n         ST    R9,8(,R13)             New address in old save area.\n         LR    R13,R9                 Address of savearea/workarea.\n         MVI   LINE-1,X'40'           Insert blank for clearing.\n         MVC   LINE(100),LINE-1       Initial clear of output line.\n         LA    R15,12\n         ST    R15,RETCODE            Set initial return code to 12.\n         SPACE\nINITCON  DS    0H                     Zero counters\n         XC    CNTTAPE,CNTTAPE\n         XC    CNTCOMM,CNTCOMM\n         XC    CNTDASD,CNTDASD\n         XC    CNTDISP,CNTDISP\n         XC    CNTUREC,CNTUREC\n         XC    CNTCHAR,CNTCHAR\n         XC    CNTCTCA,CNTCTCA\n         XC    ONLTAPE,ONLTAPE\n         XC    ONLCOMM,ONLCOMM\n         XC    ONLDASD,ONLDASD\n         XC    ONLDISP,ONLDISP\n         XC    ONLUREC,ONLUREC\n         XC    ONLCHAR,ONLCHAR\n         XC    ONLCTCA,ONLCTCA\n* ------------------------------------------------------------------ *\n*        >>>>>>>>>>>>>>>>>>>>>>  !!!  THE GUTS  !!!  <<<<<<<<<<      *\n* ------------------------------------------------------------------ *\nGETULUT  DS    0H                     Get the ULUT (UCB lookup table)\n         L     R3,16                  CVT\n         ST    R3,STORCVT             Store for display later.\n         L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM\n         ST    R3,STORIXAV            Store for display later.\n         L     R3,X'D0'(,R3)          IOVT\n         ST    R3,STORIOVT            Store for display later.\n         L     R4,8(,R3)              UCB Lookup Table (ULUT)\n         LR    R3,R4                  Point both regs to ULUT\n         CLC   =C'ULUT',0(R3)         Eyecatcher there?\n         BNE   EXIT                   Nope. It ain't it. Out. Code 12.\n         ST    R3,STORULUT            Save ULUT actual address\n* ------------------------------------------------------------------ *\n         CLI   4(R3),X'01'            Before z/OS 1.7 ? (ULUT Type 1?)\n         BE    ULUTTYP1               Go to beginning of table entries.\n         CLI   4(R3),X'02'            After z/OS 1.7 ?  (ULUT Type 2?)\n         BE    ULUTTYP2               Go to beginning of table entries.\n* ----------------------------------- Insert test for future types here\n         B     EXIT                   Neither?  Get out. Code 12.\n* ------------------------------------------------------------------ *\n*     Get actual table entries - location varies by ULUT type....    *\n*                                                                    *\n*     (This seems to be why IBM doesn't document this interface.     *\n*      The format of the ULUT changed at z/OS level 1.7.  So IBM     *\n*      wants to keep the user's interface standard.  But we don't    *\n*      want to lose the convenience of getting a UCB scan of REAL    *\n*      UCBs, in REAL TIME, without having to be APF-authorized.)     *\n*                                                                    *\n*     Actually, this program has been tested to work from ESA 5.2.2  *\n*      through z/OS 1.13.  So it is really quite stable, so far.     *\n* ------------------------------------------------------------------ *\nULUTTYP1 DS    0H\n         L     R3,X'0C'(,R3)   ULUT Type 1, Addr of first table entry.\n         L     R4,X'10'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM1\nULUTTYP2 DS    0H\n         L     R3,X'14'(,R3)   ULUT Type 2, Addr of first table entry.\n         L     R4,X'18'(,R4)   Total number of ULUT entries\n         ST    R4,TOTCOUNT     Store this number away\n         ST    R3,SAVER3A      Save R3 for UCB scanning later\n         B     DISPNUM2\n* --------------------------- Insert displacement for future types.  *\nDISPNUM1 DS    0H              Format header fields from ULUT Type 1\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material.\n         USING ULUT,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULUTUCBC\n         HEX   LINE+9,4,ULUTTAPE\n         HEX   LINE+18,4,ULUTCOMM\n         HEX   LINE+27,4,ULUTDASD\n         HEX   LINE+36,4,ULUTDISP\n         HEX   LINE+45,4,ULUTUREC\n         HEX   LINE+54,4,ULUTCHAR\n         HEX   LINE+63,4,ULUTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULUTUCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULUTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULUTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULUTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULUTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULUTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULUTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULUTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nDISPNUM2 DS    0H              Format header fields from ULUT Type 2\n         L     R3,STORULUT\n         BAL   R7,PRTHEAD      Display all the header material\n         USING ULU2,R3\n         MVC   LINE,LINE-1     Display ULUT header fields.\n         HEX   LINE,4,ULU2UCBC\n         HEX   LINE+9,4,ULU2TAPE\n         HEX   LINE+18,4,ULU2COMM\n         HEX   LINE+27,4,ULU2DASD\n         HEX   LINE+36,4,ULU2DISP\n         HEX   LINE+45,4,ULU2UREC\n         HEX   LINE+54,4,ULU2CHAR\n         HEX   LINE+63,4,ULU2CTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal\n         L     R8,ULU2UCBC\n         BAL   R7,DECCONV\n         MVC   LINE(8),NUMOUT\n         L     R8,ULU2TAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ULU2COMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ULU2DASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ULU2DISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ULU2UREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ULU2CHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ULU2CTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n*        B     EXIT0\n         B     LOOPSET\n         DROP  R3\nLOOPSET  DS    0H              Set up loop thru all UCB's.\n         L     R3,SAVER3A      Restore R3 for UCB scanning.\n* ------------------------------------------------------------------ *\n*   ULUT table entries are 12 bytes in length. No change in format.  *\n*                                                                    *\n*     The first halfword is the unit number in hex.                  *\n*     The second halfword consists of flags.                         *\n*     The third halfword is a sequence counter number in the table.  *\n*     The fourth halfword is probably unused for now.                *\n*     The next fullword contains the real UCB address of the unit.   *\n*                                                                    *\n*     Example:                                                       *\n*                                                                    *\n*          0A80 4000 010D 0000 00F511D0                              *\n*                                                                    *\n*          unit flag coun-     real UCB                              *\n*          addr      ter       address                               *\n* ------------------------------------------------------------------ *\nLOOPUCB  DS    0H            Loop thru table entries, covering\n*                             all of the defined UCBs.\n*                            Do this for the number of table entries.\n         ST    R4,TESTCNT    Rolling count, if needed for diagnostics.\n* ------------------------------------------------------------------ *\n*    We will scan the ULUT knowing the total number of entries       *\n*    in the table, initially pointed to by R4, and decremented.      *\n* ------------------------------------------------------------------ *\n         L     R5,8(,R3)              Get address of this unit's UCB.\n         ST    R5,UCBADDRS            Save the address for reporting.\n         USING UCBOB,R5               Addressability to UCB.\n         CLI   UCBTBYT3,X'80'         Is this UCB for TAPE?\n         BE    LOOPTAPE               No. Look for the next one.\n         CLI   UCBTBYT3,X'41'         Is this UCB for CTCA?\n         BE    LOOPCTC                No. Look for the next one.\n         CLI   UCBTBYT3,X'40'         Is this UCB for COMM?\n         BE    LOOPCOMM               No. Look for the next one.\n         CLI   UCBTBYT3,X'20'         Is this UCB for DASD?\n         BE    LOOPDASD               No. Look for the next one.\n         CLI   UCBTBYT3,X'10'         Is this UCB for DISP?\n         BE    LOOPDISP               No. Look for the next one.\n         CLI   UCBTBYT3,X'08'         Is this UCB for UREC?\n         BE    LOOPUREC               No. Look for the next one.\n         CLI   UCBTBYT3,X'04'         Is this UCB for CHAR?\n         BE    LOOPCHAR               No. Look for the next one.\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -   Count UCB's.\nLOOPTAPE DS    0H\n         L     R6,CNTTAPE\n         LA    R6,1(,R6)\n         ST    R6,CNTTAPE\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLTAPE\n         LA    R6,1(,R6)\n         ST    R6,ONLTAPE\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCTC  DS    0H\n         L     R6,CNTCTCA\n         LA    R6,1(,R6)\n         ST    R6,CNTCTCA\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCTCA\n         LA    R6,1(,R6)\n         ST    R6,ONLCTCA\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCOMM DS    0H\n         L     R6,CNTCOMM\n         LA    R6,1(,R6)\n         ST    R6,CNTCOMM\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCOMM\n         LA    R6,1(,R6)\n         ST    R6,ONLCOMM\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDASD DS    0H\n         L     R6,CNTDASD\n         LA    R6,1(,R6)\n         ST    R6,CNTDASD\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDASD\n         LA    R6,1(,R6)\n         ST    R6,ONLDASD\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPDISP DS    0H\n         L     R6,CNTDISP\n         LA    R6,1(,R6)\n         ST    R6,CNTDISP\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLDISP\n         LA    R6,1(,R6)\n         ST    R6,ONLDISP\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPUREC DS    0H\n         L     R6,CNTUREC\n         LA    R6,1(,R6)\n         ST    R6,CNTUREC\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLUREC\n         LA    R6,1(,R6)\n         ST    R6,ONLUREC\n         B     LOOPJUMP\n*   - - - - - - - - - - - - - - - -\nLOOPCHAR DS    0H\n         L     R6,CNTCHAR\n         LA    R6,1(,R6)\n         ST    R6,CNTCHAR\n         TM    UCBSTAT,UCBONLI        Is this UCB online?\n         BNO   LOOPJUMP               No. Look for the next one.\n         L     R6,ONLCHAR\n         LA    R6,1(,R6)\n         ST    R6,ONLCHAR\n         B     LOOPJUMP\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLOOPJUMP DS    0H\n         LA    R3,X'C'(,R3)           Go to next ULUT entry\n         BCT   R4,LOOPUCB             And loop until we've scanned\n*                                      all of the table entries.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   All UCB's have now been scanned using the ULUT table entries.   *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MVC   LINE,LINE-1            Insert a few blank lines.\n         APUT  LINE,18\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNDEFD DS    0H                     Display scanned values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(8),=C'Scanned:'\n         HEX   LINE+9,4,CNTTAPE\n         HEX   LINE+18,4,CNTCOMM\n         HEX   LINE+27,4,CNTDASD\n         HEX   LINE+36,4,CNTDISP\n         HEX   LINE+45,4,CNTUREC\n         HEX   LINE+54,4,CNTCHAR\n         HEX   LINE+63,4,CNTCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(8),=C'------- '\n         L     R8,CNTTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,CNTCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,CNTDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,CNTDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,CNTUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,CNTCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,CNTCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n         MVC   LINE,LINE-1\n         APUT  LINE,18\nCOUNONLN DS    0H                     Display online values in Hex.\n         MVC   LINE,LINE-1\n         MVC   LINE(7),=C'Online:'\n         HEX   LINE+9,4,ONLTAPE\n         HEX   LINE+18,4,ONLCOMM\n         HEX   LINE+27,4,ONLDASD\n         HEX   LINE+36,4,ONLDISP\n         HEX   LINE+45,4,ONLUREC\n         HEX   LINE+54,4,ONLCHAR\n         HEX   LINE+63,4,ONLCTCA\n         APUT  LINE,80\n         MVC   LINE,LINE-1            Convert to Decimal and display.\n         MVC   LINE(7),=C'------ '\n         L     R8,ONLTAPE\n         BAL   R7,DECCONV\n         MVC   LINE+9(8),NUMOUT\n         L     R8,ONLCOMM\n         BAL   R7,DECCONV\n         MVC   LINE+18(8),NUMOUT\n         L     R8,ONLDASD\n         BAL   R7,DECCONV\n         MVC   LINE+27(8),NUMOUT\n         L     R8,ONLDISP\n         BAL   R7,DECCONV\n         MVC   LINE+36(8),NUMOUT\n         L     R8,ONLUREC\n         BAL   R7,DECCONV\n         MVC   LINE+45(8),NUMOUT\n         L     R8,ONLCHAR\n         BAL   R7,DECCONV\n         MVC   LINE+54(8),NUMOUT\n         L     R8,ONLCTCA\n         BAL   R7,DECCONV\n         MVC   LINE+63(8),NUMOUT\n         APUT  LINE,80\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*    Now we're done with displaying all the totals. So exit.        *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DROP  R5\nEXIT0    MVI   RETCODE+3,0            If we get here, zero the retcode.\nEXIT     L     R2,RETCODE\n         LR    R1,R13                 Point to address to FREEMAIN.\n         L     R0,WORKSIZ             Length to FREEMAIN.\n         L     R13,4(,R13)            Restore original R13.\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2                 Load real return code.\n         LM    R0,R12,20(R13)         Restore rest of registers.\n         L     R14,12(,R13)\n         BR    R14                    And get out of the program.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     S U B R O U T I N E S                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display HEX values as character.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to convert hex values to decimal.                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDECCONV  DS    0H                  Convert fullword hex to decimal.\n*                                  R8 has the fullword to be converted\n         ST    R7,SAVER7D\n         CVD   R8,CVDAREA          Convert it to printable\n         MVC   DECOUT,MASK10       Move in the mask\n         ED    DECOUT,CVDAREA+3    Make it pretty\n*        APUT  NUMOUT,9\n         L     R7,SAVER7D\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Subroutine to display top of the report.                      *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTHEAD  DS    0H                     Display Report Header Info.\n         ST    R7,SAVER7E\n         APUT  MESSAGET,L'MESSAGET    Display Program Title.\n         APUT  MESSAGEU,L'MESSAGEU\n         MVC   LINE,LINE-1\n         MVC   LINE+20(27),=C'* Hex and Decimal Display *'\n         APUT  LINE,56\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Ver: '\n         HEX   LINE+11,1,4(R3)\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVT Addr: '\n         HEX   LINE+11,4,STORCVT\n         MVC   LINE+21(4),=C'J10 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'CVTIXAVL: '\n         HEX   LINE+11,4,STORIXAV\n         MVC   LINE+21(4),=C'J+7C'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'IOVT Adr: '\n         HEX   LINE+11,4,STORIOVT\n         MVC   LINE+21(4),=C'J+D0'\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         MVC   LINE(10),=C'ULUT Adr: '\n         HEX   LINE+11,4,STORULUT\n         MVC   LINE+21(4),=C'J+8 '\n         APUT  LINE,30\n         MVC   LINE,LINE-1\n         APUT  LINE,16\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'From ULUT Header:'\n         APUT  LINE,20\n         MVC   LINE,LINE-1\n         MVC   LINE(17),=C'---- ---- ------ '\n         APUT  LINE,20\n         APUT  MESSGSUB,L'MESSGSUB    Display Column Headers.\n         APUT  MESSGSUU,L'MESSGSUU\n         L     R7,SAVER7E\n         BR    R7\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       C O N S T A N T S                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'              ULUTYPE - V1.2 - DEFINED DEVICE TOTALS'\nMESSAGEU DC    C'              -------   ----   ------- ------ ------'\nMESSGSUB DC    C'Total    TAPE     COMM     DASD     DISP     UREC     X\n               CHAR     CTCA'\nMESSGSUU DC    C'-----    ----     ----     ----     ----     ----     X\n               ----     ----'\nMASK7    DC    XL7'40202020202120'     Mask for no of cyls display\nMASK9    DC    XL9'402020202020202120' Mask for no of cyls display\nMASK10   DC    XL10'40202020202020202120'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                       W O R K   A R E A                         *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DC    0D'0'                  Align for GETMAIN\nWORK     DSECT\n         DS    18F                    Save Area\nCVDAREA  DS    D                      CVD work area\nRETCODE  DS    F                      Return Code\nUCBADDRS DS    F                      Copy UCB address here for display\nDCEADDR  DS    F                      Saved address of DCE\nHEXSAVE  DS    3F                     For HEX routine - save regs\nIOSDCSAV DS    4F                     IOSDCXR register save area\nSAVER3A  DS    F                      Save R3\nSAVER7A  DS    F                      Save R7 during BAL\nSAVER7B  DS    F                      Save R7\nSAVER7C  DS    F                      Save R7\nSAVER7D  DS    F                      Save R7\nSAVER7E  DS    F                      Save R7\nSAVER8A  DS    F                      Save R8\nSAVEDEVT DS    F                      Copy raw UCB device type value\nTOTCOUNT DS    F                      Total number of ULUT entries\nTESTCNT  DS    F                      Test this number as they decrease\nCYLCNT   DS    PL4                    Saved cyliner count (not used)\nSTORCVT  DS    F\nSTORULUT DS    F\nSTORIXAV DS    F\nSTORIOVT DS    F\n         DS    C\nDECOUT   DS    0CL10\n         DS    CL2\nNUMOUT   DS    CL8\nCNTTAPE  DS    F                      UCB3TAPE EQU   X'80'\nCNTCOMM  DS    F                      UCB3COMM EQU   X'40'\nCNTDASD  DS    F                      UCB3DACC EQU   X'20'\nCNTDISP  DS    F                      UCB3DISP EQU   X'10'\nCNTUREC  DS    F                      UCB3UREC EQU   X'08'\nCNTCHAR  DS    F                      UCB3CHAR EQU   X'04'\nCNTCTCA  DS    F                      UCB3CTC  EQU   X'41'\nONLTAPE  DS    F                      UCB3TAPE EQU   X'80'\nONLCOMM  DS    F                      UCB3COMM EQU   X'40'\nONLDASD  DS    F                      UCB3DACC EQU   X'20'\nONLDISP  DS    F                      UCB3DISP EQU   X'10'\nONLUREC  DS    F                      UCB3UREC EQU   X'08'\nONLCHAR  DS    F                      UCB3CHAR EQU   X'04'\nONLCTCA  DS    F                      UCB3CTC  EQU   X'41'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   With the ULUT technique, you don't need to have a work area   *\n*    for the UCBs to be copied into.                              *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         DS    X                      Put blank here to clear line\nLINE     DS    CL100                  Display line\nWORKINIT EQU   *-WORK\n         DS    0D                     Align for GETMAIN\nWORKLEN  EQU   *-WORK\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUCB      DSECT\n         IEFUCBOB\n         YREGS\n         END   ENTRY0\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         EJECT\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUVOLS": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x12)\\x8f\\x01\\x15\\x02o\\x14\\x00\\x02\\x03\\x00U\\x00\\x00\\xe4\\xc1\\xf9\\xf0\\xf7\\xf4\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-10-24T00:00:00", "modifydate": "2015-01-26T14:00:45", "lines": 515, "newlines": 85, "modlines": 0, "user": "UA90741"}, "text": "ULUVOLS  TITLE 'ULUVOLS - DISPLAY ALL DEFINED DEVICES'\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         L     R7,SAVER7A\n         MEND\n         SPACE\nULUVOLS  CSECT\nULUVOLS  RMODE ANY\nULUVOLS  AMODE 31\n         USING *,10\nENTRY0   B     BEGIN-*(,R15)\n         DC    AL1(7),CL7'ULUVOLS'\n         DC    CL16' &SYSDATE &SYSTIME '\nWORKSIZ  DC    0F'0',AL1(0),AL3(WORKLEN)\nULULENG  DC    0F'0',AL1(0),AL3(ULUDLENG)\nBEGIN    STM   14,12,12(13)\n         LR    R10,R15\n         LR    R2,R1\n         L     R0,WORKSIZ\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING WORK,R9\n         XC    0(WORKLEN-200,R1),0(R1)\n         XC    WORKLEN-200(200,R1),WORKLEN-200(R1)\n*        XC    0(WORKINIT,R1),0(R1)   Clear work area\n         ST    R13,4(,R9)             OLD ADDRESS IN NEW SAVE AREA\n         ST    R9,8(,R13)             NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R9\n         MVI   LINE-1,X'40'           INITIAL CLEAR OF OUTPUT LINE\n         MVC   LINE,LINE-1\n         LA    R15,4\n         ST    R15,RETCODE\n         MVI   FLAG1,X'00'\n         APUT  MESSAGET,L'MESSAGET    Title\n         APUT  MESSAGEU,L'MESSAGEU\n         LA    R8,WORKU               Provide a 64-byte work area.\n* ------------------------------------------------------------------- *\n* --  INITIALIZE ULUDSECT CONTROL BLOCK                            -- *\n* ------------------------------------------------------------------- *\n         LLGTR R10,R10            Clear bit 32 for 64-bit mode\n         ULUINIT WRKAREA=WORKU,UREG=R8,EXIT=EXIT,WR1=R3,WR2=R4,BREG=R6\n*\nLOOPUCB  DS    0H\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R6\n         L     R3,ULUDUCBA            Point to this UCB\n         TM    3(R3),X'80'            Is it online?\n         BZ    NEXTUCB                No. Look for next one.\n         TM    18(R3),X'20'           Is it a DASD volume?\n         BZ    NEXTUCB                No. Look for next one.\n         BAL   R7,PUTVOLS             Print info that you want to see.\nNEXTUCB  DS    0H\n         MVC   ULUDCURR,ULUDNEXT      Make next entry current\n         BCT   R6,LOOPUCB             Get stuff for next table entry.\n         B     EXIT0\n         SPACE\nEXIT4    MVI   RETCODE+3,4\n         B     EXIT\nEXIT0    MVI   RETCODE+3,0\nEXIT     L     R2,RETCODE\n         LR    R1,R13             POINT TO ADDRESS TO FREEMAIN\n         L     R0,WORKSIZ         LENGTH TO FREEMAIN\n         L     R13,4(,R13)        RESTORE ORIGINAL R13\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R7                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPUTVOLS  DS    0H\n         ST    R7,SAVER7B\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+5(12),=C'Dev Address:'\n         HEX   LINE+18,2,ULUDDEVA\n         L     R3,ULUDUCBA\n         MVC   LINE+37(6),X'1C'(R3)\n         MVC   LINE+29(7),=C'Volume:'\n         APUT  LINE,55\n         L     R7,SAVER7B\n         BR    R7\n         DROP  R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\nMESSAGET DC    C'  ULUVOLS - V1.0 - DISPLAY ONLINE DASD VOLUMES'\nMESSAGEU DC    C'  -------   ----   ------- ------ ---- -------'\nMESSGSUB DC    C' Unit   Mount    DevceTyp  MountType  UCB Addr  Comm E-\n               xt  Counter '\nMESSGSUU DC    C' ----   -----    --------  ---------  --------  ------X\n               --  ------- '\nBLANKS   DC    CL16' '\n         DC    0D'0'\nDEVTABLE DS    0D                      Device type as listed in DCE\n         DC    X'03',C'3400'\n         DC    X'82',C'3423'\n         DC    X'80',C'3480'\n         DC    X'81',C'3490'\n         DC    X'83',C'3590'\n         DC    X'0000000000'\nTRTBL0   DS    0D                                                       06685\n         DC    XL16'40404040404040404040404040404040'                   06686\n         DC    XL16'40404040404040404040404040404040'                   06687\n         DC    XL16'40404040404040404040404040404040'                   06688\n         DC    XL16'40404040404040404040404040404040'                   06689\n         DC    XL16'40404040404040404040404040404040'                   06690\n         DC    XL16'40404040404040404040404040404040'                   06691\n         DC    XL16'404040404040404040404040406D4040'                   06692\n         DC    XL16'40404040404040404040407B7C404040'                   06693\n         DC    XL16'40818283848586878889404040404040'                   06694\n         DC    XL16'40919293949596979899404040404040'                   06695\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'                   06696\n         DC    XL16'40404040404040404040404040404040'                   06697\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'                   06698\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'                   06699\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'                   06700\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'                   06701\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nWORK     DSECT\n         DS    18F\nRETCODE  DS    F\nPARMUCB  DS    3F\nADDRUCB  DS    F\nDEVCLASS DS    F\nUCBADDRS DS    F\nHEXSAVE  DS    3F\nSAVER0A  DS    F\nSAVER7A  DS    F\nSAVER7B  DS    F\nUCBCEADR DS    F                  ADDRESS OF UCB COMMON EXTENSION\nSAVEDEVT DS    F\nTOTCOUNT DS    F                                                   ULUT\nTESTCNT  DS    F                                                   ULUT\nWORKU    DS    CL64\nVOLSRWRK DS    CL6\nFLAG1    DS    X\n         DS    X\nLINE     DS    CL80\nWORKINIT EQU   *-WORK\nOBUF     DS    CL6\n         DS    0D\nWORKLEN  EQU   *-WORK\n         SPACE\n*        CVT   DSECT=YES\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVT+X'434'\nCVTUCBSC DC V(IOSUCBSC)\nUCB      DSECT\n         IEFUCBOB\n         SPACE\n         YREGS\n         END   ENTRY0\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUVOLS$": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x19\\x01\\x120/\\x01\\x15\\x02o\\x14\\x01\\x00\\x1d\\x00\\x1b\\x00\\x00\\xd1\\xc3\\xd3@@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2012-10-28T00:00:00", "modifydate": "2015-01-26T14:01:19", "lines": 29, "newlines": 27, "modlines": 0, "user": "JCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM      <--  FOR ULU** MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(ULUVOLS)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB,UNIT=SYSALLDA,VOL=SER=\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   ULUVOLS\n SETSSI  CB490873\n SETCODE AC(0)\n NAME    ULUVOLS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT873/FILE873.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT873", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}