NORUN fix for tape detach

In our installation we use two CPUs, both running VM/SP, to
support four to six VSE virtual machines, with all disks and tapes
attached to both processors.

In each CPU, one VSE virtual machine is defined as the 'batch'
VSE machine, and all (six) of our tape drives are dedicated to it.
Actual use of any particular drive by either batch machine is
recorded and serialised in the catalog of the tape control system,
DYNAM/T.  In this way, each batch machine has access to all of
the available tape drives, but no job ever interferes with another's
use of a drive.

Our problem with this situation was that VM insisted on doing a
Rewind-and-Unload (RUN) on tape drives whenever a 'DETACH'
command was issued.  This meant that whenever a VSE batch
machine detached a drive, that drive would unload whatever tape
was currently mounted on it, even if it was in the middle of a job
(on the other CPU).

This situation has recently been changed somewhat, but we have
been running VM/VSE since VM/SP Release 1.  The change that
IBM made (in Release 4) was to allow 'DETACH ... ( LEAVE',
ie to leave the tape mounted.  Unfortunately, this does not help
us, for the following reasons:

1	The '(LEAVE' option is only available to class B users, the
class G VSE virtual machine cannot use this option.

2	More importantly, this option is only available on the
'DETACH' console command of CP.  It cannot be specified
for the detach of all devices which CP performs whenever a
user logs off.

(This fact was brought to my attention very forcefully by the
operations staff the night I was doing some maintenance on one of
the batch machines and logged it off.  The other batch machine
was 3 hours into a 4-hour weekly run, when five tape drives
suddenly unloaded, abending the job.  I was not very popular in
the computer room that week!)

As a result of these problems I wrote the following very small
change to the DMKVDR module, which performs the detaching
of virtual devices.  The essence of the change is to prevent the
'RUN' from being performed, while disrupting the normal flow of
control as little as possible.  My solution was to change the
opcode in the 'RUN' CCW from 'RUN' to 'SENSE', with the 'Skip'
bit set to prevent any real transfer of unnecessary information.

The following steps will install this fix on VM/SP, Release 5 PUT
8803.  You must, of course, check your DMKVDR source (with
all applied PTFs) to ensure that the line numbers used in this fix
are applicable to your software service level.

1   	Either add to or create the DMKVDR AUXSP file, if the file
exists, the line being added must be the top line, as follows:

	POLNORUN LCL CHANGE 'RUN' TO 'SENSE' AT CP DETACH OF TAPE.

2	Build the DMKVDR POLNORUN update file, as follows:

./ * CHANGE 'RUN' TO 'SENSE' ON TAPE DETACH
./ R 07000000          $ 07000000 50                  08/05/86 20:47:40
*UNCCW   CCW   X'0F',0,SILI,1 REWIND AND UNLOAD FOR TAPE DEV   %PLNORUN
RUNCCW   CCW   X'04',0,X'30',1   'SENSE' INSTEAD OF 'RUN'      %PLNORUN

Note: This change replaces the original CCW at label 'RUNCCW'.
The flag byte X'30' consists of the SLI bit (SILI in the original
CCW) X'20', plus the Skip bit X'10' to suppress actual data
transfer.

If you prefer not to tamper with IBM's aux files (a course I
recommend), you can create a local 'CNTRL' file with an
additional filetype above the 'TEXT AUXSP' line.  For example:

	'LCL AUXLCL'

Then build 'DMKVDR AUXLCL' with the 'POLNORUN' line, as
shown above (in step 1).  When you assemble (using VMFASM),
you will get a text file with filetype 'TXTLCL'.

Make sure you use the same control file for VMFLOAD, or this
text file will not be in the CP nucleus.

Shimon Lebovitz
VM System Programmer
Israel Police (Israel)	) Israel Police 1989

