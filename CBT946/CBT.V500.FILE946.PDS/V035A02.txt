Diary and calendar utility
I was very interested to read Philippe Taymans' article on date
manipulation in issue 25 of VM Update, and thought perhaps my
DIARY/CALENDAR EXEC may be of interest.

While it does not use Mr Taymans' astronomical formulae (which
I'm sure could be incorporated), I have found it very useful for
time-sheets, appointments and notes.  The EXEC makes extensive
use of windowing and, consequently, VM SP5 is a pre-requisite.

The facilities offered by DIARY are as follows:

%	On entry, DIARY displays a formatted window, containing
the current calendar, in the standard 'wall calendar' format.

%	By pressing PF7 or PF8, the user may scroll backward or
forward, one month at a time.

%	Should the method of scrolling take too long the user may key
in a month and/or a year.  Pressing ENTER updates the
display.

%	For users who require the Julian date, pressing PF9 acts as a
toggle between Gregorian and Julian formats.

%	Placing the cursor under a date and pressing ENTER causes
the EXEC to create a diary page on the user's CMS A disk.
The user is free to enter anything in the diary, and a sample
XEDIT profile is provided.  For specific applications, such as
time-sheets, the user could write an XEDIT profile, which
presents a pre-formatted screen when opening a diary page.

%	Should the user wish to encrypt his/her diary entries, a sample
encryption routine is included which prompts for passwords
whenever a diary page is opened.  This could be removed if
the user does not feel the need for it.  Passwords specified for
the included routine are not stored anywhere so, if the user
forgets them, his/her diary pages are locked forever.  Any
number of passwords may be specified, and the order in
which they are presented for decryption is not critical.

%	By means of GLOBAL variables, DIARY will store the
present position of a moved window (move windows via the
'M' border command).  Subsequent invocations of DIARY
will always present the window in its previous position.

The DIARY EXEC has three files: the EXEC itself; a basic panel
for the calendar (which is RECFM=F, LRECL=32); and an
XEDIT profile for use when editing a diary page.  The panel
could be incorporated into the EXEC itself (and presented using
the full screen WRITE command).  Keeping it as a separate file is
my preference.

I realise that the format of my calendar and diary pages will not be
to everyone's liking, but it should be simple to alter them to suit
anyone's taste or experience.

DIARY EXEC

/* DIARY EXEC: A diary and calendar utility, making use of VM SP5's  */
/*             windowing techniques and commands                     */
   ADDRESS COMMAND 'MAKEBUF'
   @current_buffer = RC
   PARSE UPPER ARG @arg_string
   CALL PROCESS_COMMAND_LINE @arg_string
   CALL PROCESS_CLEAR_SCREEN
   CALL DEFINE_EXEC_VARIABLES
   CALL DEFINE_WINDOWS
   CALL DEFINE_WINDOW_VARIABLES
   DO @main_loop = 1             /* this is the main processing loop */
      CALL WRITE_WINDOW_VARIABLES
      CALL DISPLAY_CALENDAR
      @saved_month = @display_month
      @saved_year  = @display_year
      ADDRESS COMMAND 'CURSOR VSCREEN' @diary_window '04 10'
      DROP WAITREAD.
      ADDRESS COMMAND 'WAITREAD VSCREEN' @diary_window
      SELECT
                            /* exit, if interrupt was from the border */
         WHEN SYMBOL('WAITREAD.0') = 'LIT'
            THEN LEAVE @main_loop
                               /* if interrupt was caused by a PF key */
         WHEN WORD(WAITREAD.1,1) = 'PFKEY' THEN DO
            SELECT              /* PF 7 is display the previous month */
               WHEN WORD(WAITREAD.1,2) = '7' THEN DO
                  @new_month = FIND(@month_string,@display_month) - 1
                  IF @new_month = 0 THEN DO
                     @new_month = 12
                     @display_year = @display_year - 1
                     END
                  @display_month = WORD(@month_string,@new_month)
                  CALL PROCESS_INPUT
                  END         /* PF 8 is display the following month */
               WHEN WORD(WAITREAD.1,2) = '8' THEN DO
                  @new_month = FIND(@month_string,@display_month) + 1
                  IF @new_month = 13 THEN DO
                     @new_month = 1
                     @display_year = @display_year + 1
                     END
                  @display_month = WORD(@month_string,@new_month)
                  CALL PROCESS_INPUT
                  END
                              /* PF 9 is the gregorian/julian switch */
               WHEN WORD(WAITREAD.1,2) = '9' THEN DO
                  IF @date_display_mode = 'J'
                     THEN @date_display_mode = 'G'
                     ELSE @date_display_mode = 'J'
                  END
                                 /* exit if any other PF key pressed */
               OTHERWISE LEAVE @main_loop
               END /* select */
            END
                         /* if interrupt was caused by the enter key */
         WHEN WORD(WAITREAD.1,1) = 'ENTER' THEN DO
            IF WAITREAD.0 = 2
               THEN DO
                          /* no data input, check for a diary request */
                  PARSE VAR WAITREAD.2 @type @row @column .
                  IF @row < 8
                     THEN LEAVE @main_loop
                     ELSE DO
                        ADDRESS COMMAND 'ERASE' @work_file
                        ADDRESS COMMAND 'PUT VSCREEN' @diary_window
                                                     @work_file @row '1'
                        IF RC = 0 THEN DO
                           ADDRESS COMMAND 'EXECIO * DISKR'
                               @work_file '( FINIS STEM @CALENDAR_LINE.'
                           @day = STRIP(SUBSTR(@calendar_line.1,
                                         (((((@column-3)%4)+1)*4)-2),3))
                           IF @date_display_mode = 'J'
                              THEN @day = RIGHT(@day-
@julian_offset,2,'0')
                           IF DATATYPE(STRIP(@day),'WHOLE') THEN DO
                              @diary_filetype = SPACE(@day||SUBSTR
                        (@display_month,1,3)||SUBSTR(@display_year,3,2))
                              CALL GET_PASSWORDS
                              ADDRESS COMMAND 'STATE' @diary_filename
                                                    @diary_filetype 'A0'
                              IF RC = 0 THEN DO
                                DO @count = 1 TO @number_of_passwords
                                  CALL ENCRYPT_DECRYPT @pass_word.@count
                                    @diary_filename @diary_filetype 'A0'
                                    END @count
                                 END
                              ADDRESS COMMAND 'XEDIT' @diary_filename
                         @diary_filetype 'A0 ( WIDTH 80' @profile_string
                              ADDRESS COMMAND 'STATE' @diary_filename
                                                    @diary_filetype 'A0'
                              IF RC = 0 THEN DO
                                 DO @count = 1 TO @number_of_passwords
                                    CALL ENCRYPT_DECRYPT
                  @pass_word.@count @diary_filename @diary_filetype 'A0'
                                    END @count
                                 END
                              END
                           END
                     END
                  END
               ELSE DO
                        /* a new date has been entered, so process it */
                  DO @count = 3 TO WAITREAD.0
                     UPPER WAITREAD.@count
                     PARSE VAR WAITREAD.@count @type @row @column @data
                     SELECT
                        WHEN @row =  4 & @column =  9
                                      THEN @display_month = STRIP(@data)
                        WHEN @row =  4 & @column = 24
                                      THEN @display_year  = STRIP(@data)
                        OTHERWISE NOP
                        END /* select */
                     END @count
                  CALL PROCESS_INPUT
                  END
            END
                     /* exit if interrupt was caused by anything else */
         OTHERWISE LEAVE @main_loop
         END /* select */
      END @main_loop
                           /* save window positions, then delete them */
   CALL ADJUST_WINDOWS
   CALL DELETE_WINDOWS
   ADDRESS COMMAND 'DROPBUF' @current_buffer
   EXIT
DISPLAY_CALENDAR:     /* subroutine calculates and writes the display */
   IF @display_year // 4 = 0 & (@display_year // 1000 ¬= 0)
                                           ¬= (@display_year // 400 = 0)
      THEN @days_string = '31 29 31 30 31 30 31 31 30 31 30 31'
      ELSE @days_string = '31 28 31 30 31 30 31 31 30 31 30 31'
                            /* calculate the difference between 1/1/1 */
                            /*   and the 1st of the requested month   */
   @base_date = ((@display_year-1)*365)+((@display_year-1)%4)
                                       -((((@display_year-1)%1000)+1)%2)
   DO @count = 1 TO FIND(@month_string,@display_month)-1
      @base_date = @base_date + WORD(@days_string,@count)
      END @count
                  /* variable BASE_DATE now equals the number of days */
                  /* since 1/1/1 and the first of the displayed month */
   @days = WORD(@days_string,FIND(@month_string,@display_month))
                  /* just in case a julian display is needed, we also */
                  /* want the number of days since the start of year  */
   IF @date_display_mode = 'J' THEN DO
      @julian_offset = 0
      DO @count = 1 TO FIND(@month_string,@display_month) - 1
         @julian_offset = @julian_offset + WORD(@days_string,@count)
         END @count
      END
                     /* the following section calculates the calendar */
                     /*    and writes it out to the display window    */
   @write_line = 8
   @write_column = 2
   DO @count = 1-(@base_date//7) TO 56-(@base_date//7)
      SELECT
                       /* blank out if beginning of month not reached */
         WHEN @count < 1 THEN DO
            ADDRESS COMMAND 'WRITE VSCREEN' @diary_window @write_line
@write_column '6 ( NOHIGH FIELD  '
            @write_column = @write_column + 4
            END
                /* if end of month reached, blank out remaining lines */
         WHEN @count > @days THEN DO
            IF @write_column ¬= 2 THEN DO
               DO UNTIL @write_column = 30
                  ADDRESS COMMAND 'WRITE VSCREEN' @diary_window
                          @write_line @write_column '6 ( NOHIGH FIELD  '
                  @write_column = @write_column + 4
                  END
               @write_line = @write_line + 1
               END
            ADDRESS COMMAND 'WRITE VSCREEN' @diary_window @write_line
                     '0 31 ( NOHIGH FIELD +---+---+---+---+---+---+---+'
            DO @write_line = (@write_line+1) TO 14
               ADDRESS COMMAND 'WRITE VSCREEN' @diary_window @write_line
                                                 '0 31 ( NOHIGH FIELD  '
               END @write_line
            LEAVE @count
            END
                                /* otherwise, write in the day number */
         OTHERWISE DO
            IF @date_display_mode = 'G'
               THEN @day_number = RIGHT(RIGHT(@count,2,'0'),3,' ')
               ELSE @day_number = RIGHT(@count+@julian_offset,3,'0')
                         /* check to see if date is to be highlighted */
            ADDRESS COMMAND 'STATE' @diary_filename RIGHT(@count,2,'0')
            ||SUBSTR (@display_month,1,3)||SUBSTR(@display_year,3,2) 'A'
            IF RC = 0
               THEN @intensity = 'HIGH'
               ELSE @intensity = 'NOHIGH'
            ADDRESS COMMAND 'WRITE VSCREEN' @diary_window @write_line
                      @write_column '6 (' @intensity 'FIELD' @day_number
            @write_column = @write_column + 4
            IF @write_column = 30 THEN DO
               @write_column = 2
               @write_line = @write_line + 1
               END
            END
         END /* select */
      END @count
   RETURN
WRITE_WINDOW_VARIABLES:    /* write initial values into window fields */
   @formatted_month = SUBSTR(@display_month,1,1)||
                             BITXOR(SUBSTR(@display_month,2),COPIES(' ',
                                              LENGTH(@display_month)-1))
   @formatted_year = RIGHT(@display_year,4,'0')
   ADDRESS COMMAND 'WRITE VSCREEN' @diary_window
                    '04 09 10 ( BLANKS NOPROTECT FIELD' @formatted_month
   ADDRESS COMMAND 'WRITE VSCREEN' @diary_window
                     '04 24 05 ( BLANKS NOPROTECT FIELD' @formatted_year
   RETURN
DEFINE_WINDOWS:               /* subroutine to define the exec window */
   ADDRESS COMMAND 'GLOBALV INIT'
   ADDRESS COMMAND 'GLOBALV SELECT' @diary_window 'GET @DIARY_POSITION'
   IF @diary_position = ''
      THEN @diary_position = '02 42'
   ADDRESS COMMAND 'GLOBALV SELECT' @diary_window 'GET @ERROR_POSITION'
   IF @error_position = ''
      THEN @error_position = '09 12'
   ADDRESS COMMAND 'GLOBALV SELECT' @diary_window 'GET
@PASSWORD_POSITION'
   IF @password_position = ''
      THEN @password_position = '11 36'
   ADDRESS COMMAND 'DELETE VSCREEN' @diary_window
   ADDRESS COMMAND 'DELETE WINDOW' @diary_window
   ADDRESS COMMAND 'DELETE VSCREEN' @error_window
   ADDRESS COMMAND 'DELETE WINDOW' @error_window
   ADDRESS COMMAND 'DELETE VSCREEN' @password_window
   ADDRESS COMMAND 'DELETE WINDOW' @password_window
   ADDRESS COMMAND 'DEFINE VSCREEN' @diary_window '15 33 0 0 ( PROTECT'
   ADDRESS COMMAND 'DEFINE WINDOW' @diary_window '15 33'
                                     @diary_position '( FIXED NOPOP TOP'
   ADDRESS COMMAND 'DEFINE VSCREEN' @error_window '04 66 0 0 (PROTECT'
   ADDRESS COMMAND 'DEFINE WINDOW' @error_window '04 66'
                                         @error_position '( VAR POP TOP'
   ADDRESS COMMAND 'DEFINE VSCREEN' @password_window '04 30 0 0 (
PROTECT'
   ADDRESS COMMAND 'DEFINE WINDOW' @password_window '04 30'
                                      @password_position '( VAR POP TOP'
   ADDRESS COMMAND 'SHOW WINDOW' @diary_window 'ON' @diary_window
   ADDRESS COMMAND 'SHOW WINDOW' @error_window 'ON' @error_window
   ADDRESS COMMAND 'SHOW WINDOW' @password_window 'ON' @password_window
   ADDRESS COMMAND 'SET LOCATION' @diary_window 'OFF'
   ADDRESS COMMAND 'SET LOCATION' @error_window 'OFF'
   ADDRESS COMMAND 'SET LOCATION' @password_window 'OFF'
   ADDRESS COMMAND 'CLEAR VSCREEN' @diary_window
   ADDRESS COMMAND 'GET VSCREEN_ @diary_window @panel_file
   RETURN
DELETE_WINDOWS:      /* subroutine removes window/vscreen definitions */
   ADDRESS COMMAND 'DELETE VSCREEN' @diary_window
   ADDRESS COMMAND 'DELETE WINDOW' @diary_window
   ADDRESS COMMAND 'DELETE VSCREEN' @error_window
   ADDRESS COMMAND 'DELETE WINDOW' @error_window
   ADDRESS COMMAND 'DELETE VSCREEN' @password_window
   ADDRESS COMMAND 'DELETE WINDOW' @password_window
   RETURN
ADJUST_WINDOWS:         /* subroutine saves adjusted window positions */
   ADDRESS COMMAND 'QUERY WINDOW' @diary_window '( LIFO'
   PARSE UPPER PULL . . . . @current_position
   @current_position = space(STRIP(@current_position))
   IF @current_position ¬= @diary_position
      THEN ADDRESS COMMAND 'GLOBALV SELECT' @diary_window
                               'SETLP @DIARY_POSITION' @current_position
   ADDRESS COMMAND 'QUERY WINDOW' @error_window '( LIFO'
   PARSE UPPER PULL . . . . @current_position
   @current_position = SPACE(STRIP(@current_position))
   IF @current_position ¬= @error_position
      THEN ADDRESS COMMAND 'GLOBALV SELECT' @diary_window
                               'SETLP @ERROR_POSITION' @current_position
   ADDRESS COMMAND 'QUERY WINDOW' @password_window '( LIFO'
   PARSE UPPER PULL . . . . @current_position
   @current_position = SPACE(STRIP(@current_position))
   IF @current_position ¬= @password_position
      THEN ADDRESS COMMAND 'GLOBALV SELECT' @diary_window
                            'SETLP @PASSWORD_POSITION' @current_position
   RETURN
DEFINE_WINDOW_VARIABLES:   /* set up the initial date and year values */
   @display_month = DATE('MONTH')
   UPPER @display_month
   @display_year = SUBSTR(DATE'SORTED'),1,4)
   RETURN
PROCESS_INPUT                /* subroutine to validate the input */
   IF @display_month = ''
      THEN @display_month = @saved_month
   IF @display_year  = ''
      THEN @display_year = @saved_year
                           /* examine first three chars of month only */
   DO @count = 1 TO 12
      IF SUBSTR(WORD(@month_string,@count),1,3) =
                                      SUBSTR(@display_month,1,3) THEN DO
         @display_month = WORD(@month_string,@count)
         LEAVE @count
         END
      END @count
                             /* this select group validates the input */
   SELECT
      WHEN @count > 12
         THEN @error_message =
                 'An invalid month name "'@display_month'" was entered.'
      WHEN ¬DATATYPE(@display_year,'WHOLE')
         THEN @error_message =
                 'An invalid year number "'@display_year'" was entered.'
      WHEN @display_year < 1
         THEN @error_message =
               'The calendar cannot display dates before the year AD 1.'
      WHEN @display_year > 9999
         THEN @error_message =
             'The calendar cannot display dates after the year AD 9999.'
      OTHERWISE RETURN
      END /* select */
                           /* if we reach here, we must have an error */
   CALL DISPLAY_ERROR_MESSAGE
   @display_month = @saved_month
   @display_year  = @saved_year
   RETURN
PROCESS_COMMAND_LINE:     /* subroutine to take care of args and opts */
   PROCEDURE EXPOSE @profile_string
   PARSE UPPER ARG @arg_string
   PARSE VALUE @arg_string WITH @arg_string '(' @option_string ')' .
                      /* if any arguments present, process them first */
   DO @count = 1 TO WORDS(@arg_string)
      SELECT
         WHEN WORD(@arg_string,1) = '?' THEN DO
            ADDRESS COMMAND 'HELP CMS DIARY'
            EXIT
            END
         OTHERWISE NOP
         END /* select */
      END @count
                         /* if any options present, process them next */
   DO @count = 1 TO WORDS(@option_string)
      SELECT
         WHEN ABBREV('PROFILE',WORD(@option_string,@count),4) THEN DO
            @count = @count + 1
            IF @count > WORDS(@option_string) THEN DO
               SAY 'Diary: No Xedit profile name was entered.'
               EXIT
               END
            @profile_string = WORD(@option_string,@count)
            ADDRESS COMMAND 'STATE' @profile_string 'XEDIT'
            IF RC > 0 THEN DO
               ADDRESS COMMAND 'EXECSTAT' @profile_string 'XEDIT'
               IF RC > 0 THEN DO
   SAY 'Diary: Xedit profile "'@profile_string'" does not exist.'
                  EXIT
                  END
               END
            @profile_string = 'PROFILE' @profile_string
            END
         WHEN ABBREV('NOPROFILE',WORD(@option_string,@count),6) THEN DO
            @profile_string = 'NOPROF'
            END
         OTHERWISE NOP
         END /* select */
      END @count
   RETURN
PROCESS_CLEAR_SCREEN:    /* clear the screen if we're not an FSS user */
   PROCEDURE
   ADDRESS COMMAND 'QUERY FULLSCREEN ( LIFO'
   PARSE UPPER PULL . @fullscreen_status .
   IF @fullscreen_status ¬= 'ON'
      THEN ADDRESS COMMAND 'CLRSCRN'
   RETURN
DEFINE_EXEC_VARIABLES:  /* subroutine sets up variables and constants */
          @diary_window = 'DIARY'
          @error_window = 'ERROR'
       @password_window = 'PASSWORD'
             @work_file = 'DIARY ##WORK## A3'
            @panel_file = 'DIARY PANEL *'
        @diary_filename = USERID()
     @date_display_mode = 'G'
          @month_string = 'JANUARY FEBRUARY MARCH APRIL MAY JUNE JULY ',
                            'AUGUST SEPTEMBER OCTOBER NOVEMBER DECEMBER'
   @alphanumeric_string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
        @profile_string = 'PROFILE #DIARY'
   RETURN
GET_PASSWORDS:                       /* subroutines obtains passwords */
   ADDRESS COMMAND 'WRITE VSCREEN' @password_window
                   '02 01 30 ( BLANKS FIELD Enter the password(s) below'
   ADDRESS COMMAND 'WRITE VSCREEN' @password_window
                                     '03 03 30 ( BLANKS HIGH FIELD ===>'
   @number_of_passwords = 0
   DO @count = 1 UNTIL SYMBOL('WAITREAD.3') = 'LIT'
      DROP WAITREAD.
      ADDRESS COMMAND 'WRITE VSCREEN' @password_window
                         '03 08 17 ( BLANKS NOPROTECT INVISIBLE FIELD  '
      ADDRESS COMMAND 'CURSOR VSCREEN' @password_window '03 09'
      ADDRESS COMMAND 'WAITREAD VSCREEN' @password_window
      IF SYMBOL('WAITREAD.O') = 'LIT'
         THEN LEAVE @count
      IF SYMBOL('WAITREAD.3') = 'LIT'
         THEN LEAVE @count
         ELSE DO
            PARSE VAR WAITREAD.3 . . . @pass_word.@count
            UPPER @pass_word.@count
            @pass_word.@count = STRIP(@pass_word.@count)
            SELECT
               WHEN @pass_word.@count = '' THEN LEAVE @count
  WHEN VERIFY(@pass_word.@count,@alphanumeric_string) > 0 THEN DO
                  @count = @count - 1
                  @error_message =
                 'Password ignored, A-Z and 0-9 characters only please.'
                  CALL DISPLAY_ERROR_MESSAGE
                  ITERATE @count
                  END
               OTHERWISE @number_of_passwords = @number_of_passwords + 1
               END /* select */
            END
      END @count
   ADDRESS COMMAND 'CLEAR VSCREEN' @password_window
   ADDRESS COMMAND 'DROP WINDOW' @password_window
   RETURN
ENCRYPT_DECRYPT            /* subroutine codes and decodes a cms file */
   PROCEDURE
   PARSE UPPER ARG @pass_word @file_name
   ADDRESS COMMAND 'LISTFILE' @file_name '( LIFO LABEL'
   PARSE UPPER PULL . . . @recfm @lrecl .
   ADDRESS COMMAND 'EXECIO * DISKR' @file_name '( FINIS STEM @LINE.'
   @key = ''
           /* generate a key which is as long as the line being coded */
   DO @count = 1 TO @LINE.0
      DO UNTIL LENGTH(@key) > LENGTH(@LINE.@count)
         @key = @key||@pass_word
         END
      @full_key = SUBSTR(@key,1,LENGTH(@LINE.@count))
      @key = SUBSTR(@key,LENGTH(@LINE.@count)+1)
              /* XOR the line with the key, SRR the key and XOR again */
              /* done twice as an XOR with an X'40' gives a case swap */
              /*   i.e. BITXOR('UPPERCASE,'        ') = 'uppercase'   */
      DO 2
         @LINE.@count = BITXOR(@full_key,@LINE.@count)
         @full_key = SUBSTR(@full_key,LENGTH(@full_key),1)||
                                 SUBSTR(@full_key,1,LENGTH(@full_key)-1)
         END
      @new_line.@count = @LINE.@count
      END @count
                     /* erase the old file, and write out the new one */
   ADDRESS COMMAND 'ERASE' @file_name
   ADDRESS COMMAND 'EXECIO' @LINE.0 'DISKW' @file_name '0'
                                 @recfm @lrecl '( FINIS STEM @NEW_LINE.'
   RETURN
DISPLAY_ERROR_MESSAGE: /* subroutine displays message in error window */
   @error_heading = 'Please read the following message and press ENTER'
   ADDRESS COMMAND 'WRITE VSCREEN' @error_window
                                       '02 01 66 ( FIELD' @error_heading
   ADDRESS COMMAND 'WRITE VSCREEN' @error_window
                                  '03 04 66 ( HIGH FIELD' @error_message
   ADDRESS COMMAND 'CURSOR VSCREEN' @error_window '02 02'
   ADDRESS COMMAND 'WAITREAD VSCREEN' @error_window
   ADDRESS COMMAND 'CLEAR VSCREEN' @error_window
   ADDRESS COMMAND 'DROP WINDOW' @error_window
   RETURN
#DIARY XEDIT
/* #DIARY XEDIT: A profile xedit macro for the DIARY exec             */
   'COMMAND EXTRACT/FNAME/FTYPE/FMODE/'
   month_string = 'JANUARY FEBRUARY MARCH APRIL MAY JUNE JULY AUGUST '.
                                   'SEPTEMBER OCTOBER NOVEMBER DECEMBER'
   day = FORMAT(SUBSTR(FTYPE.1,1,2))
          /* format date for heading (adding "st" "nd" "rd", or "th") */
   SELECT
      WHEN day > 10 & day < 14 THEN day = day||'th'
      WHEN SUBSTR(day,LENGTH(day),1) = '1' THEN day = day||'st'
      WHEN SUBSTR(day,LENGTH(day),1) = '2' THEN day = day||'nd'
      WHEN SUBSTR(day,LENGTH(day),1) = '3' THEN day = day||'rd'
      OTHERWISE day = day||'th'
      END /* select */
   DO count = 1 TO 12
      IF SUBSTR(FTYPE.1,3,3) = SUBSTR(WORD(month_string,count),1,3)
         THEN LEAVE count
      END count
   month = WORD(month_string,count)
   year = SUBSTR(FTYPE.1,6,2)
                                        /* create full heading string */
   reserved_string = 'Entry = 'day month', 19'year'.'
   reserved_string = RIGHT(reserved_string,49)
   reserved_string = 'Diary/Calendar Utility' reserved_string
                            /* format the display with reserved lines */
   'COMMAND SET RESERVED  1 HIGH' reserved_string
   'COMMAND SET RESERVED -4 HIGH'
   'COMMAND SET RESERVED -3 HIGH' CENTRE('PF1=Help   PF3=Quit   '
                            'PF7=Backward   PF8=Forward   PF12=File',73)
                             /* tailor the display with xedit options */
   'COMMAND SET MSGLINE ON 2'
   'COMMAND SET SCALE ON 3'
   'COMMAND SET CMDLINE BOT'
   'COMMAND SET CASE MIXED IGNORE'
   'COMMAND SET PREFIX ON RIGHT'
   'COMMAND SET VERIFY OFF 1 73'
   'COMMAND SET CURLINE ON 3'
   'COMMAND SET SYNONYM ON'
   'COMMAND SET SYNONYM FORWARD 1 COMMAND FORWARD'
   'COMMAND SET SYNONYM BACKWARD 1 COMMAND BACKWARD'
   'COMMAND SET NULLS OFF'
                                 /* set up some program function keys */
   'COMMAND SET PF01 ONLY CMS HELP CMS DIARY'
   'COMMAND SET PF02'
   'COMMAND SET PF03 ONLY QQUIT'
   'COMMAND SET PF04'
   'COMMAND SET PF05 ONLY LEFT 72'
   'COMMAND SET PF06 ONLY RIGHT 72'
   'COMMAND SET PF07 ONLY BACKWARD'
   'COMMAND SET PF08 ONLY FORWARD'
   'COMMAND SET PF09'
   'COMMAND SET PF10'
   'COMMAND SET PF11'
   'COMMAND SET PF12 ONLY FILE'
                /* set colours just in case we have a colour terminal */
   'COMMAND SET COLOR TOFEOF GREEN NONE NOHIGH'
   'COMMAND SET COLOR ARROW BLUE NONE NOHIGH'
   'COMMAND SET COLOR SHADOW GREEN NONE HIGH'
   'COMMAND SET COLOR CURLINE RED NONE NOHIGH'
   'COMMAND SET COLOR SCALE TURQUOISE NONE HIGH'
   'COMMAND SET COLOR PREFIX PINK NONE HIGH'
   'COMMAND SET COLOR FILEAREA YELLOW NONE NOHIGH'
   'COMMAND SET COLOR MSGLINE WHITE NONE NOHIGH'
   'COMMAND SET COLOR CMDLINE WHITE NONE NOHIGH'
   'COMMAND SET COLOR PENDING RED NONE HIGH'
                 /* finally, add some blank lines if it's a new entry */
   ADDRESS COMMAND 'STATE' FNAME.1 FTYPE.1 FMODE.1
   IF RC > 0
   THEN 'COMMAND ADD 23'
DIARY PANEL
        D  I  A  R  Y
  Month           Year
 Mon Tue Wed Thu Fri Sat Sun
+---+---+---+---+---+---+---+
+---+---+---+---+---+---+---+
William E Cook
Systems Programmer
Smith Kline & French Labs Ltd (UK)  	) Xephon 1989


