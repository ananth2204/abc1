 Mini-disk processing EXECs
These EXECs, all written in REXX, provide facilities to process users' mini-
disks from a central virtual machine, in this case MAINT, with access to the CP
directory source.  The main EXEC, MDISKS, processes the directory, stores the
passwords and creates a file with the names of all the users and their mini-
disks.  This file is displayed, using XEDIT, in order to remove any unwanted
mini-disks, eg full packs, DOS/VSE volumes etc.  Once edited and filed the file
is used as input to link and access each mini-disk in turn - if no further EXEC
is to be run then a file is created (RSCS node name MDISKS A) containing virtual
machine name, mini-disk address and the output from the CMS Q DISK command - if
an EXEC is to run instead of a file being created the data is passed to the EXEC
as parameters (the EXEC being run the number of times there are mini-disks).
     EXEC MDISKS filename filetype filemode { (execname parms
Filename filetype filemode is the name of the CP directory source, default is
VMUSERS DIRECT A.
The remaining parameters are optional:
(execname parms is the name of an EXEC to be run for every mini-disk
encountered, which will be passed the parameters as follows:
EXEC execname virtual-machine-name minidisk-address CMS-Q-DISK (parms
The last call to execname has no parameters or data to signify the end.
MDISKUSE EXEC is an example of the use to which the above can be put - it was
used to calculate the optimum blocksize and number of cylinders to allocate when
converting from 3350 to 3380 disks on the basis of current 3350 usage being 50%
of the space to be given on 3380s.  Its use was specific, in this case, the only
point to note was the use of GLOBALV to store the totals from one invocation to
the next.
I have also used the facility to find out which users have not edited any files
for a long time, whether to increase or decrease mini-disk space based on
current usage, and to dump files to tape (MDISKDMP EXEC, which follows below).
MDISKDMP EXEC is run from MDISKS and is used to dump to tape, using VMFPLC2
(TAPE could be used), all the CMS files on a mini-disk (except mode 0 if read-
only).  The format used writes a directory of all the mini-disks as the first
file on the tape and also writes a directory of all the files dumped for a mini-
disk preceding the files.  If the end of the tape is reached the files being
dumped are overwritten, the directory at the beginning of the tape is created
and the dumping of the failed mini-disk resumed on a new tape.  Tape control is
accomplished by operator request; if necessary this could be re-coded to use any
proprietary package.  The directory of the tape is named TAPEINDX MDISKDMP and
the directory for each mini-disk virtual-machine-name MDISK minidisk-address.
The general format of the tape is:
    TAPEINDX MDISKDMP
    multiple tape marks (approximately 20)
    virtual-machine-name MDISKaddress
    files
    tape mark
    virtual machine name MDISKaddress
    files
    tapemark (if last on tape 3 more tape marks)
MDISKRST EXEC will read a tape created by MDISKDMP and using the source of the
CP directory for the passwords restore selectively all the files for a mini-
disk.  The directory from the tape is read and presented for XEDITing to choose
the virtual machines' mini-disks to be restored.  The CP directory is read to
obtain the multiwrite or write passwords for mini-disks to be restored.  The
tape is then scanned for the directory file corresponding to each mini-disk and
when found the files following are restored.  If required, a further step could
be added to XEDIT the file directory for the mini-disk to select individual
files for restoration.
Four other EXECs are attached, which may be used from MDISKS:
%    MDISKFMT, to format (a) minidisk(s) not already formatted.
%    MDISKFL, to create files named VM-name MDISK address with the output from Q
DISK followed by that from LISTFILE.
%    MDRECENT, to create a file with the name of the most recently
created/updated CMS file for every user.
%    MDUSE50P, to calculate how much to increase or decrease the space allocated
for a mini-disk on the basis of the current usage being made 50% of that
available.
 The EXECs were written and tested under VM/SP3.1.  EXECIO commands in version 4
would have made some functions easier.
MDISKS EXEC
 trace off
 arg fn ft fm '(' exec parms
 address command
 if parms ¬= '' then parms = '(' parms
 if fn = '' then fn = 'VMUSERS'
 if ft = '' then ft = 'DIRECT'
 if fm = '' then fm = '*'
'SET CMSTYPE HT'
'IDENTIFY ( STACK'
 pull . . node .
 outfile = node 'MDISKS A'
'EXECIO * DISKR' fn ft fm '(FINIS STRIP'
 if rc ¬= 0 then call error 'Reading' fn ft fm
 mdisk. = ''
 recs = queued()
 do r = 1 to recs
    pull p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11
    select
      when p1 = 'USER' then user = p2
      when p1 = 'MDISK'
        then do
             if user < 'A' then iterate
             vad = p2
             type = p3
             start = p4
             length = p5
             rvol = p6
             ptype = 'M'
             dpswd = p10
             if dpswd = '' then do
                                ptype = 'W'
                                dpswd = p9
                                end
             if vad = '19E' | vad = '190' then dpswd = ''
             if dpswd = '' then do
                                 ptype = 'R'
                                 dpswd = p8
                                 end
             mdisk.user.vad = user vad '5FF' ptype'R' dpswd
             'EXECIO 1 DISKW' outfile,
                      '0 F 16 (STRING' left(user,8) vad ptype
             end
      otherwise nop
    end
 end
'FINIS' outfile
'XEDIT' outfile
'EXECIO * DISKR' outfile '(FINIS'
 do m = 1 to queued()
    pull user.m vad.m .
 end
'ERASE' outfile
 execsw = 0
 if exec = '' then exec = 'IO 1 DISKW' outfile '0 F 225 (STRING'
    else do
         exec = ' ' exec
         execsw = 1
         end
 do d = 1 to m-1
    user = user.d
    vad = vad.d
   'EXECIO * CP (SKIP STRING DETACH 5FF'
   'EXECIO * CP (SKIP STRING LINK' mdisk.user.vad
    'ACCESS 5FF Z'
    if rc ¬= 0 then qdisk = ''
       else do
           'QUERY DISK Z ( LIFO'
            pull qdisk
           'DROPBUF'
            end
   'EXEC'exec left(node,8) left(user,8) vad qdisk parms
    execrc = rc
   'RELEASE Z'
   'EXECIO 0 CP (SKIP STRING DETACH 5FF'
    if execrc ¬= 0 then leave
 end
 if execsw then 'EXEC' exec ' '
    else 'FINIS' outfile
 rc = execrc
 if rc ¬= 0 then call error 'Error with' exec
'SET CMSTYPE RT'
 exit
 error:
 parse arg msg
 rcode = rc
'DESBUF'
 say 'MDISKS:' msg 'failed'
'SET CMSTYPE RT'
 exit rcode

MDISKDMP EXEC
 trace off
 arg node user vad label cuu mode stat,
                   cyl type blksize files used '-' .
'SET CMSTYPE RT'
 if user = '' then signal eot
 if files = '' then do
                    say 'MDISKDMP:' user vad 'is not a CMS disk'
                    exit
                    end
 if files = 0 then do
                   say 'MDISKDMP:' user vad 'contains no files'
                   exit
                   end
 k = substr(blksize,1,1)
 if k*used > 20000 then do
                        say 'MDISKDMP:' user vad 'too large :',
                               used 'blocks of' k'K'
                        exit used
'GLOBALV SELECT DUMPTAPE GET tapeno'
 if tapeno = '' then do
                     tapeno = 0
                     call nexttape
                     end
 listfile:
'LISTFILE * *' mode '( EXEC DATE'
'RENAME CMS EXEC A' user 'MDISK'vad 'A'
'VMFPLC2 DUMP' user 'MDISK' vad 'A ( DEN 6250 NOWTM NOPR'
 if rc ¬= 0 the signal eot
 say 'MDISKDMP: Dumping' user vad
'VMFPLC2 DUMP * *' mode '( DEN 6250 NOWTM NOPR'
 if rc ¬= 0 then signal eot
'VMFPLC2 WTM'
 if rc ¬= 0 then signal eot
'SET CMSTYPE HT'
 exit
 eot:
'VMFPLC2 BSF'
'VMFPLC2 WTM 4'
 'EXECIO * CP (SKIP STRING REWIND 181'
 if user ¬= '' then 'ERASE' user 'MDISK'vad 'A'
'LISTFILE * MDISK* A (EXEC DATE'
'COPY CMS EXEC A TAPEINDX MDISKDMP A ( REPLACE'
 say 'MDISKDMP: Dumping tape index file'
'VMFPLC2 DUMP TAPEINDX MDISKDMP A ( DEN 6250 WTM NOPR'
'EXECIO * CP (SKIP STRING DETACH 181'
 call nexttape
 signal listfile
 nexttape:
'LISTFILE * MDISK* A (EXEC TRACE'
 if rc = 0 then 'EXEC CMS ERASE'
 if user = ''  then exit 987
 tapeno = tapeno + 1
GLOBALV SELECT DUMPTAPE PUT tapeno
 say 'MDISKDMP: Tape' tapeno
 do until rc = 0
   'EXECIO * CP (SKIP STRING MSG OPERATOR',
     'Please mount tape and attach as 181 or CP SMSG CANCEL'
    do 20 until rc = 0
      'WAKEUP +00:00:30 ( SMSG CONS'
       if rc = 1 | rc = 6
          then do
              'DROPBUF'
              'EXECIO * CP (SKIP STRING ',
                            'MSG OPERATOR Tape request cancelled'
               exit 1
               end
      'EXECIO * CP (SKIP STRING QUERY V 181'
    end
 end
'EXECIO * CP (SKIP STRING REWIND 181'
'VMFPLC2 WTM 25 ( DEN 6250'
 return

MDISKRST EXEC
 trace off
 arg fn ft fm '(' parms
 if fn = '' then fn = 'VMUSERS'
 if ft = '' then ft = 'DIRECT'
 if fm = '' then fm = '*'
 if parms ¬= '' then parms = '(' parms
'IDENTIFY ( STACK'
 pull . . node .
'SET CMSTYPE HT'
 do until rc = 0
   'EXECIO * CP (SKIP STRING QUERY V 181'
    if rc ¬= 0
       then do
           'EXECIO * CP (SKIP STRING MSG OPERATOR ',
             'Please mount tape and attach as 181 or CP SMSG CANCEL'
           'WAKEUP +00:00:30 ( SMSG CONS'
            end
    if rc = 1 | rc = 6
       then do
           'DROPBUF'
           'EXECIO * CP (SKIP STRING',
                        ' MSG OPERATOR Tape request cancelled'
            call dsply 'Operator cancelled tape request'
            exit rc
            end
 end
'EXECIO * CP (SKIP STRING REWIND 181'
 call dsply 'Loading Tape index file'
'VMFPLC2 LOAD TAPEINDX MDISKDMP A ( NOPR'
 if rc ¬= 0
     then do
         call dsply 'Cannot find TAPEINDX MDISKDMP'
         exit rc
         end
'XEDIT TAPEINDX MDISKDMP A'
'EXECIO * DISKR TAPEINDX MDISKDMP A ( FINIS'
 mdisk. = 0
 pswd. = ''
 mdisk = queued()
 do i = 1 to queued()
    pull . . user . 'MDISK' vad .
    mdisk.user.vad = i
    user.i = user
    vad.i = vad
 end
 call dsply 'Reading' fn ft fm
'EXECIO * DISKR' fn ft fm '(FINIS STRIP'
 if rc ¬= 0
    then do
         call dsply 'Failure reading' fn ft fm
         exit rc
         end
'ERASE TAPEINDX MDISKDMP A'
 trace = trace('OFF')
 do r = 1 to queued()
    pull p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11
    select
      when p1 = 'USER' then user = p2
      when p1 = 'MDISK'
      then if mdisk.user.p2 ¬= 0
              then do
                   i = mdisk.user.p2
                   pswd.i = 'M' p10
                   if p10 = '' then pswd.i = 'W' p9
                   end
      otherwise nop
    end
 end
 i = trace(trace)
 do i = 1 to mdisks
    user = left(user.i,8)
    vad = vad.i
    if pswd.i ¬= ''
      then do
          'EXECIO * CP (SKIP STRING LINK' user vad '5FF' pswd.i
           if rc = 0
             then do
               'ACCESS 5 FF Z'
                if rc = 0
                  then do
                    call dsply 'Searching for' user vad
                   'VMFPLC2 SCAN' user 'MDISK'vad '( EOF 99'
                    if rc = 0
                     then do
                          call dsply 'Loading' user vad 'files'
                          'VMFPLC2 LOAD * * Z ( NOPR'
                          if rc = 0 then call dsply user vad 'loaded'
                           else call dsply 'Failure loading' user vad
                          'REL Z'
                          'EXECIO * CP (SKIP STRING DET 5FF'
                          end
                     else call dsply 'Cannot find' user vad 'on tape'
                    end
                  else call dsply 'Cannot ACCESS' user.i vad.i
                end
             else call dsply 'Failure linking to' user vad
            end
      else call dsply 'No write password for' user.i vad.i
 end
'EXECIO * CP (SKIP STRING DET 181'
'SET CMSTYPE RT'
 exit
 dsply:
 parse arg msg
 rcode = rc
 prefix = 'MDISKRST:'
 if rcode ¬= 0
    then do
         prefix = prefix'{'rcode'}'
        'REL Z'
        'EXECIO * CP (SKIP STRING DET 5FF'
         end
'SET CMSTYPE RT'
 say prefix msg
'SET CMSTYPE HT'
 rc = rcode
 return

MDISKUSE EXEC
 trace off
 arg node user vad vvol . . . cyls type ,
            blksize files used '-' . left total
'GLOBALV SELECT MDISKUSE GET tused tfiles ',
            'ttot2K tcyl33802K ttot4K tcyl33804K tcyl3350 tcyl3380'
 if tused = '' then do
                    tused = 0
                    tfiles = 0
                    ttot2K = 0
                    tcyl33802K = 0
                    ttot4K = 0
                    tcyl33804K = 0
                    tcyl3350 = 0
                    tcyl3380 = 0
                   'GLOBALV SELECT MDISKUSE PUT',
      'tused tfiles ttot2K tcyl33802K ',
             'ttot4K tcyl33804K tcyl3350 tcyl3380'
                   'EXECIO 1 DISKW MDISKUSE' node 'A (STRING',
'1    A      B      C    G    H    I     J     K    ',
              'L    M      N    O      P'
                    end
               else if user = '' then signal endoffile
 if ¬datatype(blksize,'N') then exit
 bs = substr(blksize,1,1)
 bpc3350 = 450
 if bs = 2 then bpc3350 = 240
    else if bs = 4 then bpc3350 = 120
 cyl3350 = used / bpc3350
 tcyl3350 = tcyl3350 + cyl3350
 line = ' ' || node left(user,8) vad left(vvol,6) bs'K' ,
            right(files,4) right(used,5) format(cyl3350,3,1)
 if files = 0 then do
                  'EXECIO 1 DISKW MDISKUSE' node 'A (STRING' line
                   return
                   end
 tfiles = tfiles + files
 tused = tused + (used*blksize%1024)
 bpf = used/files
 bpf2K = ((bpf * blksize) + 2047 ) % 2048
 tot2K = bpf2K*files
 cyl33802K = tot2K / 270
 ttot2K = ttot2K + tot2K
 tcyl33802K = tcyl33802K + cyl33802K
  bpf4K = ((bpf * blksize) + 4095 ) % 4096
 tot4K = bpf4K*files
 cyl33804K = tot4K / 150
 ttot4K = ttot4K + tot4K
 tcyl33804K = tcyl33804K + cyl33804K
 cyl3380 = format(cyl33804K*2,3,0)
 if cyl3380 = 0 then cyl3380 = 1
 tcyl3380 = tcyl3380 + cyl3380
'EXECIO 1 DISKW MDISKUSE' node 'A (STRING' line,
                 right(tot2K,4) format(cyl33802K,3,1),
                 right(tot4K,4) format(cyl33804K,3,1),
                 right(cyl3380,3)
'GLOBALV SELECT MDISKUSE PUT',
   'tused tfiles ttot2K tcyl33802K ttot4K ',
              'tcyl33804K tcyl3350 tcyl3380'
 exit
 endoffile:
 queue ' A - RSCS node of CP user id'
 queue ' B - CP user id owning minidisk'
 queue ' C - Virtual address of minidisk'
 queue ' G - Minidisk volume serial number'
 queue ' H - CMS blocksize'
 queue ' I - No. of CMS files                           ',
                 '      ' tfiles
 queue ' J - No. of used CMS blocks of size "G" .       ',
                       'total:' tused 'of 1k'
 queue ' K = No. of 3350 cylinders in use                     ' ,
                      format(tcyl3350,,1)
 queue ' L - Total number of 2K blocks required for used      ',
                       ttot2K
 queue ' M - number of 3380 cylinders required using 2K blocks' ,
                       format(tcyl33802K,5,1)
 queue ' N - Total number of 4K blocks required for used      ' ,
                       ttot4K
 queue ' O - Number of 3380 cylinders required using 4K blocks' ,
                       format(tcyl33804K,5,1)
 queue ' P - twice the number of 3380 cyls. needed - 4K blocks' ,
                       tcyl3380
'EXECIO' queued() 'DISKW MDISKUSE' node 'A (FINIS'
 tused = ''
 tfiles = ''
 ttot2K = ''
 tcyl33802K = ''
 ttot4K = ''
 tcyl33804K = ''
 tcyl3350 = ''
 tcyl3380 = ''
'GLOBALV SELECT MDISKUSE PUT',
     'tused tfiles ttot2K tcyl33802K ',
            'ttot4K tcyl33804K tcyl3350 tcyl3380'
 exit
 error:
 parse arg msg
 rcode = rc
'DESBUF'
'FINISH MDISKUSE' node 'A'
 say msg 'failed'
 exit rcode

MDISKFMT EXEC
/* This exec is called by mdisks exec in order to format cms disks */
 parse arg node user vad qdisk
 if qdisk ¬= '' then exit
 if node = '' then exit
TSET CMSTYPE RTU
 say node user vad 'Enter volume serial number to format disk'
  pull volser .
 if volser = '' | length(volser) < 5 then exit
 push volser
 push 'YES'
'FORMAT 5FF Z ( B 4K'
'SET CMSTYPE HT'

MDFILEL EXEC
 trace off
 arg node user vad volser cuu mode qdisk
 if mode = '' then exit
 if cmsflag('CMSTYPE') then RT = 1
                       else RT = 0
 HT = 0
 if ¬cmsflag('EXECTRAC') & trace = 'O' then HT = 1
 if HT then 'SET CMSTYPE HT'
'LISTFILE * *' mode '(EXEC DATE'
'REL' mode '(DET'
'ERASE' user 'MDISK'vad 'A'
'EXECIO 1 DISKW' user 'MDISK'vad ,
               'A5 0 F 80 (FINIS STRING' volser vad mode qdisk
 push '8-80 1'
'COPY CMS EXEC A' user 'MDISK'vad 'A5 ( APPEND SPECS'
'ERASE CMS EXEC A'
 if RT then 'SET CMSTYPE RT'

MDRECENT EXEC
 trace off
 arg node user vad . . mode . cyls . . files used '-' .
 if user = '' then exit
 file = ''
 if mode = '' then signal nofiles
'LISTFILE * *' mode '(EXEC DATE'
 if rc ¬= 0 then signal nofiles
'REL' mode '(DET'
 push '70 71 64 65 67 68 73 80'
'SORT CMS EXEC A' user 'MDISK'vad 'A3'
'EXECIO * DISKR' user 'MDISK'vad 'A (FINIS LIFO STRIP'
 pull . . file
'DROPBUF'
 nofiles:
'EXECIO 1 DISKW' node 'MDRECENT A (STRING' left(user,8) vad ,
                right(cyls,2) right(files,4) right(used,4) file

MDUSE50P EXEC
 trace off
 arg node user vad vvol . . . cyls type ,
               blksize files used '-' percent left total
 if percent = '' then exit
 new = format((cyls*percent/50),,0)
 select
   when new > cyls then new = 'increase to' new
   when new < cyls then new = 'decrease to' new
   otherwise new = TleaveU
 end
'EXECIO 1 DISKW' node ,
           'MDUSE50P A (STRING' left(user,8) vad percent'%' cyls new
 exit
 error:
 parse arg msg
 rcode = rc
'DROPBUF'
 say msg 'failed'
 exit rcode
J J Herron (UK)     ) J J Herron 1988

