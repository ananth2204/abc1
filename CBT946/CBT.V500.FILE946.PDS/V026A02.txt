 DOS to CMS
Updating or creating sequential DOS files has always been a problem if you don't
have the software necessary to do so.  It is not a problem if your file has a
record length of 80 characters, in which case DITTO could be used to create your
file; but what if you need a file with a record length of 120 characters?
It is very easy to create such a file under CMS, but how to move it to the VSE
system?  A possibility that springs to mind could be to write an EXEC to split
up the records into 80-character card images, but you would need a batch program
on the VSE side in order to recreate the original records into a sequential file
with correct length and blocksize.  Also, you should consider that the next time
you will need such a function you can be sure that the new file will need
another record length, thus requiring modifications to your original EXEC and
batch program.
An ideal method would be to edit the files directly as on an MVS system, but so
far I haven't seen any announcements from IBM to go in that direction.  Thinking
of a way to access VSE files from CMS I developed the DOSTOCMS facility.  This
was done in two stages.  In the first stage EXECs were set up in order to access
and move sequential and VSAM files from the VSE environment to the CMS
environment, making it possible to access the files with the CMS editor.  This
quite easy move utility was mainly used to verify updates of VSE programs etc.
It works a lot faster than any print utility.  In a second stage I went a bit
further to create or update sequential VSE files under CMS and move them back to
the VSE system.
The only pre-requisite is that VSAM is installed in VSE and under CMS.  IBM
provides EXECs like INSTVSAM, GENVSAM, etc to install CMS VSAM.
ISPF can optionally be used for panel handling and to provide all the different
functions in a menu-driven fashion.
Preferably a separate mini-disk should be set up and formatted as a VSE disk
which will contain a user catalog and a VSAM space.  The size of this mini-disk
will depend on the size of the files to be transferred.  (An existing VSAM space
might also be used, but don't forget that this disk will have to be linked in
multiple write mode!)  This is illustrated in Figure 1.  Figures 2 to 7 are some
ISPF panels that we use to enter the necessary information.  You will also
notice that on some panels generation datasets are mentioned.  This is because
we have the space management facility SYSTEM MANAGER (from Corodale) installed
on our system.
Following is an example of the actions taken by the EXECs when updating a
sequential file:
MOVE FILE FROM VSE TO CMS
CP LINK VSETST 202 202 RR
ACC 202 Z
FILEDEF OUT DISK $$DOS$$ $TOCMS$ A (RECFM FB LRECL 120 BLKSIZE 120
FILEDEF INMOVE Z DSN TEST.FILE (RECFM FB LRECL 120 BLKSIZE 120
MOVEFILE  INMOVE OUT

EDIT FILE UNDER CMS

XEDIT $$DOS$$ $TOCMS$ A

MOVE FILE BACK TO VSE
y    Link to the VSE disk and access the master catalog
y    Link to the commonly used VSAM disk in multiple write
CP LINK VSEBATCH 302 302 MW
ACC 302 W
CP LINK VSEBATCH 300 300 RR
ACC 300 O
SET DOS ON (VSAM
ASSGN SYSCAT O
DLBL IJSYSCT O DSN VSAM.MASTER.CATALOG.VSEBATCH (PERM SYSCAT
ASSGN SYS020 W
DLBL IJSYSUC W DSN CMS.SHARED.USER.CATALOG (PERM VSAM SYS020
ASSGN SYS005 W
DLBL DSFO W DSN BSYGL.TEMP.VSECMS.TRANSFER.FILE (VSAM SYS005 CAT IJSYSUC
ASSGN SYS004 A
DLBL DSFI A CMS $$DOS$$ $TOCMS$ (SYS004

 y    Set up a CMS file with input cards for AMSERV.  File is called $$REPRO$$
AMSERV
          DELETE (BSYGL.TEMP.VSECMS.TRANSFER.FILE) CL NOERASE PURGE
          DEFINE CLUSTER -
                ( -
                NAME (BSYGL.TEMP.VSECMS.TRANSFER.FILE) -
                TRACKS (20 10) -
                FOR (0) -
                NONINDEXED -
                RECORDSIZE (120 120)  -
                SUBALLOCATION -
                NOREUSE -
                VOLUMES (VSECMS) -
                ) -
              DATA -
                ( -
                NAME (BSYGL.TEMP.VSECMS.TRANSFER.FILE) -
                USECLASS (0) -
                ) -
                CATALOG (CMS.SHARED.USER.CATALOG)
          REPRO  OUTFILE (DSFO )  INFILE (DSFI  ENVIRONMENT ( -
            BLOCKSIZE (120 ) -
            RECORDFORMAT (FIXBLK) -
            ) ) -
            NOREUSE
y    Execute the AMSERV
AMSERV $$REPRO$$

SET DOS OFF
y    Create and submit a VSE job which will recreate the sequential file (this
was done using the FTINCL function of ISPF).   Remember also that we have the
space manager utility installed which makes it possible to use this DLBL format
without EXTENT cards.
* $$ JOB JNM=BSYGLDTC,CLASS=B,DISP=D,PRI=3,USER='B700000F-BSYGL'
* $$ LST CLASS=T,DEST=(,FILEMNGR),JSEP=0
// JOB BSYGLDTC (BSYGL,ECHO=YES) JOB GENERATED BY DOSTOCMS
// DLBL DSFO,'TEST.FILE',N,T=15,ST=5,R,K
// DLBL DSFO,V=TST002,SYS001
// DLBL DSFI,'BSYGL,TEMP.VSECMS.TRANSFER.FILE',,VSAM,CAT=CVSECMS
// EXEC   IDCAMS,SIZE=AUTO
       REPRO -
               INFILE (DSFI -
               ) -
               OUTFILE (DSFO -
                 ENVIRONMENT ( -
                 BLOCKSIZE (120) -
                 RECORDFORMAT (FIXBLK) -
                 RECORDSIZE (120) -
                 ) -
               ) -
                 NOREUSE
       IF LASTCC = 0 -
               THEN -
       DELETE (BSYGL.TEMP.VSECMS.TRANSFER.FILE) CL NOERASE PURGE -
          CATALOG (CMS.SHARED.USER.CATALOG)
/*
/&
* $$ EOJ
Following is the actual EXEC as it is used in our installation.  All the
variables are provided either by GLOBALV variable pools or by the ISPF panels.
The EXEC is invoked by selecting option 6 on the main menu.
&TRACE OFF
SET CMSTYPE HT
GLOBALV GET WORKDISK WORKMODE
&PRESUME &SUBCOMMAND ISPEXEC
 ISPEXEC CONTROL ERRORS RETURN
 ISPEXEC VGET ( DOSSYS VOLID DSN LRECL RECFM BLKS CMSFN CMSFT )
&COMMAND EXEC FDISK STACK VSAM
&READ VARS &INMODE &INDISK
&CALL - VOLID
&COMMAND CP SP CONS START NOTERM
&COMMAND CP LINK &LINK &INDISK RR VSE3380
&COMMAND ACC &INDISK &INMODE
&COMMAND CP SP CONS NOTERM
- LOOPDISP
ISPEXEC DISPLAY PANEL(VSEFLE60)
&IF &RC NE 0 &GOTO -ENDSEQ
&H1 = &DIVISION OF &BLKS &LRECL
&H2 = &MULT OF &LRECL &H1
&IF &H2 = &BLKS &SKIP 3
&LMESS = &STRING OF Blocksize is not a multiple of record length
ISPEXEC SETMSG MSG(VSEFL000)
&GOTO -LOOPDISP
ISPEXEC VPUT ( DSN LRECL RECFM BLKS ) PROFILE
&CMSFN = $$DOS$$
&CMSFT = $TOCMS$
&CMSFM = &WORKMODE
&IF .&GEN = . &SKIP 4
&GEN = &RIGHT OF &GEN 4
&GEN = &TRANS OF &GEN &BLANK 0
&GEND = &CONCAT OF .G &GEN
&GDSN = &CONCAT OF &DSN &GEND
&IF .&GEN = . &GDSN = &DSN
&COMMAND FILEDEF OUT DISK &CMSFN &CMSFT
                                   &CMSFM (RECFM FB LRECL &LRECL BLKSI
&COMMAND FILEDEF INMOVE &INMODE DSN
                               &GDSN (RECFM FB LRECL &LRECL BLKSIZE &B
&LMESS = &STRING OF Hold on ... fetching file from dos disk
 ISPEXEC CONTROL DISPLAY LOCK
ISPEXEC DISPLAY PANEL(VSEFLE60) MSG(VSEFL000)
&COMMAND MOVEFILE  INMOVE OUT
&IF &RC NE 0 &GOTO -END
 ISPEXEC CONTROL DISPLAY REFRESH
&COMMAND XEDIT &CMSFN &CMSFT &CMSFM
 ISPEXEC CONTROL DISPLAY REFRESH
 END
&LMESS = &STRING OF Press PF3 to cancel the updates, else press enter
ISPEXEC SETMSG MSG(VSEFL000)
ISPEXEC DISPLAY PANEL(VSEFLE60)
&IF &RC NE 0 &GOTO -ENDSEQ
* now let's move it back to VSE
&COMMAND IDENTIFY (STACK
&READ VARS &USERID &DUMMY
&COMMAND EXEC FDISK STACK VSAM
&READ VARS &INMODE1 &INDISK1
&COMMAND CP SP CONS START NOTERM
&COMMAND CP LINK VSEBATCH 302 &INDISK1 MW MCMSVSAM
&COMMAND ACC &INDISK1 &INMODE1
&COMMAND CP SP CONS NOTERM
&COMMAND EXEC FDISK STACK VSAM
&READ VARS &CMODE &CDISK
&COMMAND CP SP CONS START NOTERM
&COMMAND CP LINK VSEBATCH 300 &CDISK RR VSE3380
&COMMAND ACC &CDISK &CMODE
&COMMAND CP SP CONS START TERM
&RETAIN = K
&IF .&GEN EQ . &SKIP 1
&RETAIN = G
ISPEXEC VPUT ( DOSSYS VOLID DSN MRECL )
&COMMAND SET DOS ON (VSAM
&COMMAND ASSGN SYSCAT &CMODE
&COMMAND DLBL IJSYSCT
                   &CMODE DSN VSAM.MASTER.CATALOG.VSEBATCH (PERM SYSCAT
&COMMAND ASSGN SYS020 &INMODE1
&UCAT = CMS.SHARED.USER.CATALOG
&COMMAND DLBL IJSYSUC &INMODE1 DSN &UCAT (PERM VSM SYS020
&COMMAND ASSGN SYS005 &INMODE1
&COMMAND GLOBALV SET USERCAT &UCAT
&B = &BLANK
&TDSN = &CONCAT OF &USERID .TEMP.VSECMS.TRANSFER.FILE
&DELNAME = &CONCAT OF DELETE &B (&TDSN ) &B CL &B NOERASE &B PURGE
&COMMAND DLBL DSFO &INMODE1 DSN &TDSN (VSAM SYS005 CAT IJSYSUC
&COMMAND ASSGN SYS004 &CMSFM
&COMMAND DLBL DSFI &CMSFM CMS &CMSFN &CMSFT (SYS004
&TEMP_DATASET = &CONCAT OF NAME &B ( &TDSN ) &B -
&TEMP_DATANAME = &CONCAT OF NAME &B ( &TDSN .DATA) &B -
&COMMAND DESBUF
&STACK &B  &DELNAME
&STACK &B  DEFINE CLUSTER -
&STACK &B        ( -
&STACK &B        &TEMP_DATASET
&STACK &B        TRACKS (20 10) -
&STACK &B        FOR (0) -
&STACK &B        NONINDEXED -
&RECORD_SIZE = &CONCAT OF RECORDSIZE &B (&LRECL &B &LRECL ) &B -
&STACK &B        &RECORD_SIZE
&STACK &B        SUBALLOCATION -
&STACK &B        NOREUSE -
&STACK &B        VOLUMES (VSECMS) -
&STACK &B        ) -
&STACK &B      DATA -
&STACK &B        ( -
&STACK &B        &TEMP_DATANAME
&STACK &B        USECLASS (0) -
&STACK &B        ) -
&STACK &B        CATALOG (CMS.SHARED.USER.CATALOG)
&STACK &B  REPRO  OUTFILE (DSFO )  INFILE (DSFI  ENVIRONMENT ( -
&STACK &B    BLOCKSIZE (&LRECL ) -
&STACK &B    RECORDFORMAT (FIXBLK) -
&STACK &B    ) ) -
&STACK &B    NOREUSE
&COMMAND EXECIO 23 DISKW $$REPRO$$ AMSERV &WORKMODE 1 F 80 (FINIS
&LMESS = &STRING OF Hold on... Creating VSAM file...
 ISPEXEC CONTROL DISPLAY LOCK
ISPEXEC DISPLAY MSG(VSEFL000)
&COMMAND AMSERV $$REPRO$$
&SAVERC = &RC
&COMMAND SET DOS OFF
&IF &SAVERC GT 8 & SKIP 1
&COMMAND ERASE $$REPRO$$ LISTING A
&IF &SAVERC LE 8 &GOTO -NOWSUBMIT
 ISPEXEC CONTROL DISPLAY REFRESH
&LMESS = &STRING OF Error while creating VSAM file .. Vsam rc = &SAVERC
&GOTO -LOOPDISP
-NOWSUBMIT
&DELPREV = NO
*  remove the generation number for generation files
&IF .&GEN EQ . &GOTO -KEEPFILE
* set indicator to delete old generation
&DELPREV = YES
-KEEPFILE
* now create and submit dos file
 ISPEXEC CONTROL DISPLAY REFRESH
&LMESS = &STRING OF Now generating dosjob
ISPEXEC SETMSG MSG(VSEFL000)
 ISPEXEC CONTROL DISPLAY LOCK
ISPEXEC DISPLAY MSG(VSEFL000)
ISPEXEC FTOPEN TEMP
 &IF &RC NE 0 &GOTO -ERR1
ISPEXEC FTINCL REPROSEQ
&IF &RC NE 0 &GOTO -ERR2
ISPEXEC VGET (ZTEMPF)
&IF &RC NE 0 &GOTO -ERR3
ISPEXEC FTCLOSE
&IF &RC NE 0 &GOTO -ERR3
&COMMAND CP SP CONS START NOTERM
&COMMAND CP SP PUN VSEBATCH
&COMMAND PUN &ZTEMPF ISPTEMP (NOH
&IF &RC NE 0 &GOTO -ERR4
&COMMAND CP SP CONS START TERM
&LMESS = &STRING OF Job successfully submitted to VSEBATCH rc = &RC
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
-ERRSTATE
&LMESS = &STRING OF CMS file not found... function cannot be started
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
-ERR1
&LMESS = &STRING OF Error in FTOPEN of file tailoring procedure,
                                                            rc = &RC
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
-ERR2
&LMESS = &STRING OF Error in FTINCL of file tailoring procedure,
                                                            rc = &RC
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
-ERR3
&LMESS = &STRING OF Error in ZTEMPF of file tailoring procedure,
                                                            rc = &RC
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
-ERR4
&COMMAND CP SP CONS START TERM
&LMESS = &STRING OF Error in SUBMITTING file to VSEBATCH    rc = &RC
ISPEXEC SETMSG MSG(GENM000)
&GOTO -LOOPDISP
&EXIT
-ENDSEQ
&COMMAND CP SP CONS START NOTERM
&COMMAND REL &INMODE1 (DET
&COMMAND REL &CMODE (DET
&COMMAND REL &INMODE (DET
&COMMAND CP SP CONS START TERM
&EXIT
-VOLID
&IF &VOLID = SYSWK3 &LINK = &STRING OF VSETST 503
&IF &VOLID = PRD001 &LINK = &STRING OF PRDVSE 101
&IF &VOLID = PRD002 &LINK = &STRING OF PRDVSE 102
&IF &VOLID = PRD003 &LINK = &STRING OF PRDVSE 103
&IF &VOLID = PRD004 &LINK = &STRING OF PRDVSE 104
&IF &VOLID = PRD005 &LINK = &STRING OF PRDVSE 105
&IF &VOLID = TST001 &LINK = &STRING OF VSETST 201
&IF &VOLID = TST002 &LINK = &STRING OF VSETST 202
&IF &VOLID = TST003 &LINK = &STRING OF VSETST 203
&IF &VOLID = TST004 &LINK = &STRING OF VSETST 204
&IF &VOLID = TST005 &LINK = &STRING OF VSETST 205
&RETURN
G van Leuven
Systems Programmer
NV Texaco Belgium SA     ) Xephon 1988



