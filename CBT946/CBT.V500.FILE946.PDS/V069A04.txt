Redefining segments under VM/XA

Under VM/XA saved segments are defined dynamically and
then saved. When a segment has to be saved a second time, it
must be defined again. This can be irritating, and when
members are already saved it may be difficult - even if only
one member is to be defined again.

REDEFSEG is an EXEC that will define a segment a second
time with the same parameters as the existing segment. If it is a
member, the other members will be kept intact. Usage is
explained in the help file below.


REDEFSEG EXEC

/***                  R E D E F S E G                               ***/
/*** used to redefine DCSSs and NSSs                                ***/
/*** parameters - 1  name of the DCSS/NSS                           ***/
/***              2  name of the SPACE      (optional)              ***/
/***              3  name of the original DCSS/NSS                  ***/
/***              4  name of the new space                          ***/
/*** Note:                                                          ***/
/*** The second parameter is used when this EXEC executes itself,   ***/
/*** This parameter may not be given in any other way.              ***/
address command
arg nssname original '(' oldname newspace .
orignewspace = newspace
newname = nssname
if oldname = '.' then oldname =
if oldname ¬=''  then nssname = oldname
if nssname = ''
then do
   say 'The name of the DCSS should be given'
   exit 500
end
/* default values */
def. =
count = 0
class = ''
defspace = ''
segspace = ''
classlist = ''
countlist = ''
namelist = ''
spidlist = ''
/* CP instruction to get map of DCSS/NSS/SPACE */
'EXECIO * CP (STEM NSS. STRING Q NSS NAME' nssname 'MAP'
if nss.0 = 1
then do
   say 'The DCSS/NSS:' nssname 'does not exist'
   exit 501
end
do i = 2 to nss.0
  if words(nss.i) > 3
  then do
parse var nss.i spid fn ft minsize beg end type cl . . vmgroup .
/* test for certain values */
if minsize = 'N/A' then minsize = ''
if vmgroup = 'N/A' then vmgroup = ''
if cl = 'R' then class = 'RSTD'
if cl = 'S'          ,
   & (ft = 'DCSS-S' | ft = 'DCSS-M' ) ,
   & original ¬= ''  ,
   then iterate
if cl = 'S'
then do
   say 'The DCSS/NSS:' fn 'has not been SAVEd yet'
   say 'This segment will not be defined.'
   exit (502)
end
x = find(spidlist,spid)
if x = 0 then spidlist = spidlist spid
else iterate
if fn = original then iterate
count = count + 1
x = find(namelist,fn)
if x = 0
then do
   namelist  = namelist  fn
   classlist = classlist cl
   countlist = countlist count
end
else do
   if word(classlist,x) = 'P' ,
    | word(classlist,x) = 'S'
   then do
      classlist = delword(classlist,x,1) cl
      namelist  = delword(namelist,x,1)  fn
      number    = word(countlist,x)
      def.number = ''
      countlist = delword(countlist,x,1) count
   end
   else do
      say 'There are more than one active'
      say 'NSS/DCSS with the same name.'
      say 'The name is:' fn
      say 'Purge the extra ones, then try again.'
      exit (503)
   end
end
/* test for SPACE */
     if ft = 'DCSS-S'
     then do
        /* should other members of the SPACE stay the same? */
        if fn ¬= nssname
        then if orignewspace = ''
        then do
           defspace = 'EXEC REDEFSEG' fn nssname
        end
        if newspace = '' then neswpace = fn
        segspace = 'SPACE' newspace
        iterate
     end
     /* test for member of SPACE */
     if ft = 'DCSS-M' ,
      & original ¬= ''
     then do
        def.count = 'DEFSEG' fn 'SAME'
        iterate
     end
     /* test for NSS */
     if ft = 'NSS'
     then do
        if fn = nssname
         then def.count = 'DEFSYS' newname
         else def.count = 'DEFSYS' fn
        if vmgroup = 'YES' then vmgroup = 'VMGROUP'
                           else vmgroup = ''
        def.count = def.count 'MINSIZE='minsize vmgroup
     end
     /* can only be a DCSS */
     if def.count = ''
     then if fn = nssname
     then def.count = 'DEFSEG' newname
     else def.count = 'DEFSEG' fn
     def.count = def.count beg'-'end type
  end
  /* only the start and end pages are in the map */
  else do
     if original ¬= '' then iterate
     parse var nss.i beg end type .
     def.count = def.count beg'-'end type
  end
end
/* give all the new instructions to redefine the DCSS/NSS/SPACE */
do i = 1 to count
   if def.i = '' then iterate
   definition = space(def.i class segspace)
   'CP' definition
end
/* Should the other members of the SPACE stay the same? */
if defspace ¬= '' then defspace


REDEFSEG HELPCMS

                    "|R E D E F S E G
"|REDEFSEG"%is used to redefine an existing DCSS (saved segment) or
NSS (Named Saved Segment).
Format of the instruction:

 "|+----------+--------------------------------------------------------+
 "|| REDEFSEG | dcssname   < (old_nssname >  < new_space_name>         |
 "||          | nssname    < (   .        >                            |
 "|+----------+--------------------------------------------------------+

"%where:

"|dcssname"%
          is the name of the DCSS that will be redefined.
"|nssname"%
          is the name of the NSS that will be redefined.
"|old_nssname"%
          is the name of the NSS that will be used as an example for
          the new definition.
"|new_space_name"%
          is the name of the new space that will be created.
"|Notes:"%
1. The existing definition is used to redefine the DCSS/NSS.
The new DCSS/NSS should be SAVEd again.
2. If the DCSS is a member of a DCSS SPACE, only this member will be
redefined. The other members of the SPACE will be redefined with the
SAME parameter, and they don't have to be SAVEd again.
3. If the SPACE is redefined, all the members in the space will be
redefined and all of them should be SAVEd again.
4. If the NSS/DCSS does not exist, you will receive an error message.
(RC = 501)
5. If the NSS/DCSS has not been SAVEd yet, it will not be redefined.
(RC = 502)
6. If duplicates of the same NSS/DCSS exist, it will not be redefined.
Purge the old duplicates and execute the REDEFSEG instruction again.
(RC = 503)

Ria Molenhuis
University of Pretoria (South Africa)           c University of Pretoria 1992

