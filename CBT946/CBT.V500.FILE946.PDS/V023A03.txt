 FORTRAN programs in a MACLIB
We often have to work with very large systems of FORTRAN programs containing a
large number of subroutines and functions.  Usually the users either prefer to
have all these subroutines in one file, so that they need not have hundreds of
little FORTRAN programs on their disks, or to receive the suite of programs as
one large program.  This causes frustration when they have to make a small
change to one routine and then have to compile the whole program.
We have devised some EXECs to perform two functions:
1    Separate a large FORTRAN program into its separate functions and
subroutines and place each one separately into a MACLIB.
2    Compile an individual member in the MACLIB and optionally place the
resulting text file into a TEXTLIB.
This makes it easier to work with the individual members of the MACLIB with the
MACLIB facility and then compile only the single routine that has changed.
The FORTMAC EXEC is used to split a FORTRAN program into its separate components
and the FORTVSM EXEC is used to compile a program from the MACLIB.
FORTMAC EXEC
/*** Splits up a fortran program into its different components     **/
/*** and loads it into a maclib                                    **/
/***                                                               **/
/*** parameters: name of the maclib                                **/
/***             name of the source file                           **/
address command
arg maclib prog .
if maclib = ''
then do
   'EXECIO 1 EMSG ( STRING DMSFOR046E The name of the maclib into' ,
                           'which the source of the routines'
   'EXECIO 1 EMSG ( STRING DMSFOR046E are to be placed, must be given'
   exit 24
end
if prog = ''
then do
   'EXECIO 1 EMSG ( STRING DMSFOR001E The name of the file that' ,
                           'contains the source of the routines'
   'EXECIO 1 EMSG ( STRING DMSFOR001E are to be placed in' maclib ,
                           'MACLIB, must be given'
   exit 24
end
'STATE' prog 'FORTRAN *'
if rc Â¬= 0
then do
   'EXECIO 1 EMSG ( STRING DMSFOR002E The file,' prog 'FORTRAN that',
                           'contains the source of the routines'
   'EXECIO 1 EMSG ( STRING DMSFOR002E that are to be placed in',
                           maclib 'MACLIB, can not be located on'
   'EXECIO 1 EMSG ( STRING DMSFOR002E any of your disks'
   exit 24
end
queue 'MACRO FORTMAC' maclib
'XEDIT' prog 'FORTRAN*'
exit rc

FORTMAC XEDIT
/*** Splits up a fortran program into its different components     **/
/*** and loads it into a maclib                                    **/
/*** parameters: name of the maclib                                **/
/*** variables                                                     **/
/***   maclib    = name of maclib                                  **/
/***   subname   = name of next routine                            **/
/***   subline   = line on which routine name is found             **/
/***   startline = line on which routine starts                    **/
/***   oldname   = name of previous routine                        **/
/***   oldline   = line on which previous routine name is found    **/
/***   oldstart  = line on which previous routine starts           **/
arg maclib
 if maclib = ''
then do
   'EXECIO 1 EMSG ( STRING DMSFOR046E The name of the maclib into ' ,
                                   'which the source of the routines '
   'EXECIO 1 EMSG ( STRING DMSFOR046E are to be placed, must be given'
   exit 24
end
'SET WRAP OFF'
'SET CASE U I'
'SET ZONE 1 72'
'SET MSGMODE OFF'
'SET VARBLANK ON'
'TOP'
'EXTRACT /SIZE/FNAME'
eof = size.1 + 1
fname.1 = strip(fname.1)
/*** get first one ***/
retcode = 0
oldname =
subname =
oldline = 0
oldstart = 1
call getnext                                   /* get first routine */
oldline = 1
if subname = '' | (startline > 0 & startline Â¬= subline)
then do
   oldname = fname.1
   say ' '
   say 'The first routine in' fname.1 'FORTRAN has no name'
   say 'It is probably the main routine'
   say 'What name should it be given?'
   say 'Press enter for' oldname
   say 'Type in CANCEL to stop this run'
   say ' '
   pull answer
   if answer = 'CANCEL' then signal abort
   if answer = '' then answer = oldname
   oldname = answer
end
else do
   oldname = subname
   oldline = subline
end
/*** now extract the other routines ***/
do forever
   if oldline = eof then leave
   call getnext
   call macadd
   oldname = subname
   oldline = subline
   oldstart = startline
end
say 'Compressing' maclib 'MACLIB'
'MACLIB COMP' maclib
say 'All routines from' fname.1 'FORTRAN have been added or',
    ' replaced in' maclib 'MACLIB'
ABORT:
'QQUIT'
exit retcode
MACADD:
/*** add the routine to the maclib ***/
sublen = startline - oldstart
':'oldstart
address command 'RENAME' oldname 'COPY A FORTMAC$ COPY A' /*preserve*/
'PUT' sublen oldname 'COPY A'
address command 'STATEW' maclib 'MACLIB *'
 added = 'added to'
if rc = 0
then do
   address command 'MACLIB DEL' maclib oldname
   if rc = 0 then added = 'replaced in'
   'MACLIB ADD' maclib oldname
end
else 'MACLIB GEN' maclib oldname
if rc Â¬= 0
then do
   say 'FORTMAC run of' fname.1 'FORTRAN into' maclib ,
       'MACLIB aborted due to errors'
   retcode = rc
   signal abort
end
address command 'ERASE' oldname 'COPY A'
address command 'RENAME FORTMAC$ COPY A' oldname 'COPY A'
say oldname 'from' fname.1 'FORTRAN has been' added maclib 'MACLIB'
return
GETNEXT:
/**** get the line and name of the next routine ****/
':'oldline                                    /* start looking from */
                                              /* previous hit       */
do forever
   'LOCATE /SUBROUTINE/|/FUNCTION/|/PROGRAM/|/BLOCK DATA/'
   if rc Â¬= 0
   then do
      subname   =
      subline   = eof
      startline = eof
      return
   end
   'EXTRACT /CURLINE/LINE'
   if substr(curline.3,1,1) Â¬= ' ' then iterate /* comment */
   if substr(curline.3,6,1) Â¬= ' ' then iterate /* continuation */
   curline.3 = substr(curline.3,1,72)
   test1 =
   test2 =
   parse var curline.3 . 'SUBROUTINE' subname test1 '(' .
   if subname = ''
   then do
      parse var curline.3 . 'FUNCTION' subname test1 '(' .
    end
    if subname = ''
    then do
      parse var curline.3 . 'PROGRAM' subname test1 '(' .
   end
   if subname = ''
   then do
      parse var curline.3 . 'BLOCK' test1 'DATA' subname test2 '('
   end
   if test1  Â¬= '' then iterate
   if test2  Â¬= '' then iterate
   if subname = '' then iterate                 /* no routine name */
      leave
   end
   subline = line.1
   'Z 1 1'
   'LOCATE -/ /'                             /* previous non-comment*/
   if rc = 0
   then do
      'NEXT'
      'EXTRACT /LINE/'
   end
   'Z 1 72'
   startline = line.1
    return

FORTMAC HELPCMS
                         |F O R T M A C%
The |F O R T M A C% function can be used to separate a FORTRAN program,
consisting of numerous subroutines, into the separate subroutines and to place
the subroutines in a MACLIB.
They may be compiled from the MACLIB by the |FORTVSM% function.
The format of the instruction is as follows:
| |FORTMAC%    | maclib source                                    |
|maclib%     The name of the maclib into which the routines will
             be placed.
             If it does not exist, then it will be created
|source%     The name of the file containing all the routines.
             The filetype must be FORTRAN
|NOTES%      A return code of more than zero, means that the
             function could not be executed for one or more routines
|EXAMPLES%
       |FORTMAC LIB1 PROG1
         Separate all the routines in file PROG1 FORTRAN and place
         them as members in the maclib LIB1 MACLIB
|ERROR MESSAGES%
   DMSFOR001E The name of the file that contains the       rc=24
              source of the routines that are to be
              placed in xxxxxxx MACLIB, must be given
   DMSFOR002E The file, xxxxxxx FORTRAN that contains      rc=4
              the source of the routines that are to be
              placed in xxxxxxx MACLIB, can not be located
              on any of your disks
   DMSFOR046E The name of the maclib into which the        rc=24
              routines are to be placed, must be given

FORTVSM EXEC
/*** Compile a program from a maclib                              **/
/*** and loads it into a textlib                                  **/
/*** parameters: maclib membername                            (1) **/
/***             or                                               **/
/***             maclib MACLIB filemode ( MEMBER member       (2) **/
/***             or                                               **/
/***             maclib membername ( TXTLIB txtlibname        (3) **/
/***             or                                               **/
/***             maclib MACLIB filemode                           **/
/***                   ( MEMBER member TXTLIB txtlib          (4) **/
/***             ( OPT options can be given to specify compiler   **/
/***                  options                                     **/
/*** usage: 1. call it from maclist                               **/
/***        2. call it from cms                                   **/
address command
arg maclib parms
if maclib = ''
then do
   'EXECIO 1 EMSG ( STRING DMSFOR046E The name of the maclib in',
                                  'which the source of the routines'
   'EXECIO 1 EMSG ( STRING DMSFOR046E that are to be compiled, are' ,
                                  ' to be found, must be given'
   exit 24
end
'STATE' maclib 'MACLIB *'
if rc Â¬= 0
then do
   'EXECIO 1 EMSG ( STRING DMSFOR036E The maclib,' maclib', in which',
                           'the source of the routines'
   'EXECIO 1 EMSG ( STRING DMSFOR036E that are to be compiled,',
                           'are to be found, can not be located'
   'EXECIO 1 EMSG ( STRING DMSFOR036E on any of your disks'
   exit 28
 end
/** extract the fortran options **/
parse var parms parse1 '(' parse2 ' OPT ' options
if parse2 Â¬= '' then parse2 = '('parse2
parms = parse1||parse2
parse var parms mem1 . 'MACLIB' fm '( MEMBER' mem2 '(' . 'TXTLIB' txtlib .
if txtlib = '' then parse var parms . '(' . 'TEXTLIB' txtlib .
if fm = ''                                         /* format 1 or 3 */
then do
   member = mem1
   fm = '*'
end
else do                                            /* format 2 or 4 */
   member = mem2
end
if member = ''
then do
   'EXECIO 1 EMSG ( STRING DMSFOR001E The name of the member of' maclib ,
                           'MACLIB that is to be'
   'EXECIO 1 EMSG ( STRING DMSFOR001E compiled, must be given'
   exit 24
end
if member = '*'                                /* all members asked */
then do
   'MACLIB MAP' maclib '( FIFO'
   if rc Â¬= 0 then exit rc
   pull .
end
else push member                              /* single member asked*/
retcode = 0
do forever
   'SENTRIES'
   if rc = 0 then leave
   pull member .
   'RENAME' member 'FORTRAN A FORTVM$ FORTRAN A' /* preserve */
   'FILEDEF INMOVE DISK' maclib 'MACLIB' fm '(MEMBER' member ,
                                          'RECFM FB LRECL 80 BLKSIZE 800'
   'FILEDEF OUTMOVE DISK' member 'FORTRAN A (RECFM FB LRECL 80 BLKSIZE 800'
   'MOVEFILE'
   if rc = 0
   then do
      'FORTVS' member '(OPT(2)' options
      compilerc = rc
   end
   else do
      compilerc = 16                           /* suppress TXTLIB ADD*/
      say 'The routine' member 'could not be',
                  ' recovered from' maclib 'MACLIB'
      if rc = 28 then say 'The name of the routine might be incorrect'
   end
   if rc > retcode then retcode = rc
   'ERASE' member 'FORTRAN A'
   'RENAME FORTVM$ FORTRAN A' member 'FORTRAN A'

   if txtlib  Â¬= '' & compilerc < 8
   then do
      added = 'added to'
      'STATEW' txtlib 'TXTLIB *'
      if rc = 0
   then do
      'TXTLIB DEL' txtlib member
      if rc = 0 then added = 'replaced in'
      if rc = 4
      then do
         'STATEW' txtlib 'TXTLIB *'
         if rc Â¬= 0
          then do
            'TXTLIB GEN' txtlib member
            added = 'replaced in'
         end
         else 'TXTLIB ADD' txtlib member
      end
      else 'TXTLIB ADD' txtlib member
   end
   else 'TXTLIB GEN' txtlib member
   if rc > retcode then retcode = rc
   if rc = 0
   then do
      'ERASE' member 'TEXT A'
      say member 'has been' added txtlib 'TXTLIB'
   end
end
if txtlib Â¬= '' & compilerc Â¬< 8
then say member 'has not been added/replaced in' txtlib ,
         'TXTLIB due to compiler error'
end
exit retcode

FORTVSM HELPCMS

                           |F O R T V S M%

The |FORTVSM% function can be used in CMS or in MACLIST to compile
FORTRAN subroutines that have been placed in MACLIBS.
The format of the instruction is as follows:
From the |CMS% command line
| |FORTVSM%     | maclib member ( options                        |
|      or         |                                                |
| |FORTVSM%     | maclib MACLIB fm ( MEMBER member ( option      |
|      options    |    TXTLIB txtlib                               |
|                 |    OPT compoptions                             |
From the|MACLIST%environment
| |FORTVSM%    | / ( options                                     |
|      options   |     TXTLIB txtlib                               |
|                |     OPT compoptions                             |
|maclib%     The name of the maclib in which the routine resides
             The maclib must be on a disk that is accessed
|member%     The name of the routine that is to be compiled
             If this is specified as|*% then all the routines in the
             library will be compiled
|fm%         The filemode of the disk on which the maclib resides
             If it is not given,|*% will be taken as the default
|txtlib%     The name of the txtlib into which the compiled text
             must be placed after compilation.
             If it is not given, the text-files will remain as
             separate on disk
             If the library does not exist, it will be created
|compoptions% The options that are to be given to the compiler.
             If it is omitted, it will be set to |OPT(2)%
|NOTES%
             Any return code of more than zero, means that the
             function could not be executed for one or more routines
|EXAMPLES%
       |FORTVSM FORTSORC PROG1 ( TXTLIB LIB1
         Compile member PROG1 from source library FORTSORC MACLIB
         and place the TEXTFILE in LIB1 TXTLIB
       |FORTVSM FORTSORC * (TXTLIB LIB1 OPT NOSOURCE
         Compile all members from source library FORTSORC MACLIB
         without source listings and place the resultant text in
         the library LIB1 TXTLIB
       |FORTVSM FORTSORC PROG2
         Compile member PROG2 from source library FORTSORC MACLIB
          and leave the textfile on disk
|ERROR MESSAGES%
   DMSFOR001E The name of the member of xxxxxxxx MACLIB    rc=24
              that is to be compiled, must be given
   DMSFOR036E The maclib, xxxxxxx, in which the source     rc=28
              of the routines that are to be compiled,
              are to be found, can not be located on
              any of your disks
   DMSFOR046E The name of the maclib in which the source   rc=24
              of the routines that are to be compiled,
              are to be found, must be given

Jan de Wet
Managing Member
VM Software People CC (S Africa)   ) VM Software People CC 1988



















































