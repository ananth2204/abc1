Library list facilities

The GLOBAL command is a little bit unwieldy because every
new library definition destroy the previous one. To append
library names anywhere in the list or to erase some members
from there, and especially to save the whole definition for
further restoration (useful in system EXECs to keep the users
definition whilst another definition is needed within the
EXEC), I wrote the following EXEC.

Use the LIBS EXEC to add members to a library list, to delete
members from a library list, and to save/restore a library list.
The library lists are the filenames identified by the GLOBAL
command.

The command format is:

      LIBS | SAVe
           | REStore
           | ADD        libtype libname(s) <(AFTer|BEFore <n|name>
           | DELete     libtype n|name <... <n|name>>

where: SAVe means the filenames of all library types will be
stored as global variables in storage; REStore means the
filenames of all library types will be restored from the global
variables; ADd means the library names are added to the list of
names defined for library type libtype; DElete means the
library names are deleted from the list of names defined for
library type libtype; libtype is the filetype of the libraries
(MACLIB, TXTLIB, DOSLIB, or LOADLIB); libname(s) is
the filename of the library; AFTer means the library names will
be inserted after a specified library; BEFore means the library
names will be inserted before a specified library; n is the
position number of a library name; name is the abbreviation for
a library name.


USAGE NOTES

o      The filenames are saved for the CMS session until you
      issue the IPL CMS command.

o      If neither a number nor a name (abbreviation) is specified
      the keyword AFTER indicates after all and keyword
      BEFORE indicates in front of all.

o      Several library names may be deleted all at once. Where
      duplicate library names exist, only the first occurrence is
      deleted.


LIBS EXEC

/* EXEC : LIBS
/*  LIBS    : Add/delete GLOBAL library list member(s).               */
/*          : Save/restore the complete GLOBAL library lists.         */
  trace off;
  arg funct_str lib_type lib_str "(" options;
  Type.1 = "MACLIB";
  Type.2 = "TXTLIB";
  Type.3 = "DOSLIB";
  Type.4 = "LOADLIB";
  in_queue = queued();
  AFTER = "*";
  BEFORE = "";
  do i = 1 to words(options);
     opt = word(options,i);
     if abbrev('AFTER',opt,3) then AFTER = word(options,i+1);
     if abbrev('BEFORE',opt,3) then BEFORE = word(options,i+1);
     end;
  rc_exit = 0;
  select;
     when funct_str = '' then do;
        say "no function specified";
        rc_exit = 4;
        end;
     when abbrev('QUERY',funct_str,1) then 'QUERY LIBRARY';
     when abbrev('SAVE',funct_str,3) then do;
        do i = 1 to 4;
           interpret "libs."Type.i "= ''";
           end;
        'QUERY LIBRARY ( LIFO';
        do queued()-in_queue;
           parse upper pull lib_type . first_lib other_libs;
           if first_lib = "NONE" & other_libs = "" then first_lib = "";
           libs.lib_type = ,
            translate(first_lib other_libs,'_',' ')"_"libs.lib_type;
           end;
        'GLOBALV SELECT $SLIBS00 GET COUNT';
        if COUNT = "" | COUNT <= 0 then COUNT = 1;
        else COUNT = COUNT+1;
        do i = 1 to 4;
           'GLOBALV SELECT $SLIBS'right(COUNT,2,'0') 'PUT libs.'Type.i;
           end;
        'GLOBALV SELECT $SLIBS00 PUT COUNT';
        end;
     when abbrev('RESTORE',funct_str,3) then do;
        'GLOBALV SELECT $SLIBS00 GET COUNT';
        if COUNT = "" | COUNT <= 0 then do;
           say "nothing put down";
           exit 4;
           end;
        do i = 1 to 4;
           'GLOBALV SELECT $SLIBS'right(COUNT,2,'0') 'GET libs.'Type.i;
           libs.i = translate(value('libs.'Type.i),' ','_');
           'GLOBAL' Type.i libs.i;
           end;
        'GLOBALV SELECT $SLIBS'right(COUNT,2,'0') 'PURGE';
        COUNT = COUNT-1;
        'GLOBALV SELECT $SLIBS00 PUT COUNT';
        end;
     when abbrev('ADD',funct_str,2) then do;
        'QUERY' lib_type '( LIFO';
        'SET CMSTYPE HT';
        new_libs = ''; all_libs = ""; already_exist = "";
        do queued()-in_queue;
           parse upper pull . . libs;
           all_libs = libs all_libs;
           end;
        do j = 1 to words(lib_str);
           single_lib = word(lib_str,j);
           if find(all_libs new_libs,single_lib) = 0 then ,
            new_libs = new_libs single_lib;
           else already_exist = already_exist single_lib;
           end;
        'SET CMSTYPE RT';
        if new_libs ¬= '' then do;
           if all_libs = 'NONE' then all_libs = '';
           select;
              when AFTER = "" | AFTER = words(all_libs) then ,
               'GLOBAL' lib_type all_libs new_libs;
              when datatype(AFTER,"W") then do;
                 if AFTER > words(all_libs) then ,
                  call error 1, "Library number" AFTER "not found";
                 'GLOBAL' lib_type subword(all_libs,1,AFTER) ,
                  new_libs subword(all_libs,AFTER+1);
                 end;
              when AFTER = "*" & (BEFORE = "" | BEFORE = "1") then ,
               'GLOBAL' lib_type new_libs all_libs;
              when datatype(BEFORE,"W") then do;
                 if BEFORE > words(all_libs) then ,
                  call error 1, "Library number" BEFORE "not found";
                 'GLOBAL' lib_type subword(all_libs,1,BEFORE-1) ,
                  new_libs subword(all_libs,BEFORE);
                 end;
              otherwise do;
                 if AFTER = "*" then Search = BEFORE;
                 else Search = AFTER;
                 Cut = pos(" "strip(Search,"T","*")," "all_libs);
                 if Cut = 0 then call error 1, Search "not found";
                 if Cut = 1 then Left = "";
                 else Left = left(all_libs,Cut-1);
                 Right = substr(all_libs,Cut);
                 if AFTER ¬= "*" then do;
                    Left = Left word(Right,1);
                    Right = subword(Right,2);
                    end;
                 'GLOBAL' lib_type Left new_libs Right;
                 end;
              end;
           end;
        if already_exist ¬= '' then do;
           say lib_type "library '"already_exist"' already defined";
           rc_exit = 4;
           end;
        end;
     when abbrev('DELETE',funct_str,2) then do;
        'QUERY' lib_type '( LIFO';
        all_libs = "";
        do queued()-in_queue;
           parse upper pull . . libs;
           all_libs = libs all_libs;
           end;
        all_libs = " "all_libs;
        do j = 1 to words(lib_str);
           single_lib = word(lib_str,j);
           if datatype(single_lib,'whole') then do;
              w_index = wordindex(all_libs,single_lib);
              w_length = wordlength(all_libs,single_lib);
              all_libs = overlay("*",all_libs,w_index,w_length,"*");
              end;
           else do;
              Hit = index(all_libs," "single_lib);
              if Hit > 0 then do;
                 w_length = wordlength(substr(all_libs,Hit+1),1);
                 all_libs = overlay("*",all_libs,Hit+1,w_length,"*");
                 end;
              end;
           end;
        all_libs = space(translate(all_libs," ","*"),1);
        if all_libs = 'NONE' then 'GLOBAL' lib_type;
        else 'GLOBAL' lib_type all_libs;
        end;
     otherwise do;
        say "invalid function '"funct_str"'";
        rc_exit = 4;
        end;
     end;
  exit rc_exit;
error:
parse source . . source_name .;
if arg(2,"exist") then say source_name arg(2);
exit arg(1);


Anton Altbauer
Programmer
IPP Garching (Germany)                              c IPP Garching 1992

