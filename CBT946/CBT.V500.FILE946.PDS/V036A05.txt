Why you should use 'Address COMMAND'

There is one feature of REXX that gives a small but 'free'
performance boost to REXX EXECs and which is widely ignored
by most programmers.  If anyone is so bold as to read the
description of the 'address' instruction in the REXX reference
manual, he may become so confused that he ignores it.  Besides,
EXECs seem to run adequately anyway, so why bother?  In
reality, the matter is not as arcane as it may appear.

If, when REXX is finished decoding a command, it is not one of
the valid REXX instructions, it must be a command.  So, the
interpreter passes it to an 'environment' for execution.  In theory,
there could be any number of environments, but in practice there
are usually just one or two: CMS and XEDIT.  (Perhaps
somewhat surprisingly, there is no CP environment.)  While it is
possible to explicitly state which environment is to be used for
each command, eg address XEDIT 'CHANGE /A/B/', this is
rarely done.  If a value is not specified, REXX uses the default
environment.  For XEDIT macros (which have a filetype of
XEDIT) the default environment is XEDIT.  For EXECs (which
have a filetype of EXEC) the default environment is CMS.  The
rest of this discussion deals exclusively with EXECs, not with
XEDIT macros.

When CMS receives a command in the above manner, it goes
through a lengthy process to determine the nature of the
command.  This process is described in part in the front of the
CMS command reference manual.  The first step is to search
(potentially) the directories of all ACCESSed disks to see if any
one of them contains an EXEC whose name matches the name of
the command to be executed.  If many disks are ACCESSed, this
can be somewhat time consuming.  Since most commands
executed by EXECs are CMS commands (not other EXECs), this
is generally a needless overhead, and it is repeated each time the
EXEC issues a command.

CMS provides a simpler interface (using SVC 202), which does
not go through the complicated search process.  This interface
may be invoked by using the REXX statement 'address
COMMAND'.  If placed at the front of the EXEC, this one
statement will cause the default environment for all commands to
be changed from CMS to COMMAND.  There are a few
consequences of doing so:

1	All commands passed to CMS must be true CMS commands.
CP commands and EXECs are not considered to be true CMS
commands according to this definition.  So EXEC names
must be preceded by the word 'EXEC', and CP commands
must be preceded by the word 'CP'.  (Note that the 'CP'
command is documented in the CMS command reference
manual, not in the CP command reference manual, since it is
a CMS command.)  This is true even if the EXEC is written
by IBM; some examples are FILELIST, PEEK, RECEIVE
and SENDFILE.

2	A side benefit of this is protection from EXECs whose names
match CMS commands.  Thus, if someone writes an EXEC
named ERASE and places it on a common disk, you may be
surprised at the results of your ERASE command.  If address
COMMAND is in effect, the presence of such EXECs is
irrelevant since the true ERASE command will be executed.

3	A few IBM commands behave slightly differently when
invoked using 'address COMMAND' from how they do when
invoked using 'address CMS'.  LISTFILE and STATE do not
issue an error message if a file cannot be found.  I don't know
if this is good or bad, but it is a feature which you should
know about and which you can perhaps use to your
advantage.

4 	The parameter string passed to the appropriate module will
not be translated to upper case.  However, since most
modules immediately translate the parameters to upper case
anyway, this is usually not an important point.  However, a
few commands, such as RENAME, will allow mixed case
parameters when invoked in this manner.

Admittedly, this hardly seems to be an issue worth worrying
about.  But since there are performance gains when using address
COMMAND, I see no reason to use address CMS by default.  In
rare cases, I may use 'address CMS' for a single command, but I
never use it as a default.  In fact, EXEC 2 uses the equivalent of
address COMMAND as its default.  Furthermore, the use of
address COMMAND enforces a discipline when writing EXECs.
CP commands must be preceded by 'CP', EXECs must be
preceded by 'EXEC'.  This makes their true nature readily
apparent.  Sloppy programmers may not care whether a command
is executed by CP or by XEDIT, but good programmers should
know this.

One final point: do not recklessly insert 'address COMMAND'
statements into all of your existing EXECs.  This will cause all of
their usages of EXECs and CP commands to fail as described
above.  Each EXEC must be examined carefully.

Dave Fraatz
Specialist
3M (USA)	) Xephon 1989

