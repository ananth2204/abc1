LINK utility

Many times, I've needed a routine to do all the things I've seen
in VM Update regarding linking to another user-id's mini-disk,
accessing it at a particular virtual address, keeping track of
what I've linked to during the particular VM session, or
creating a temporary mini-disk during the session.

This routine is basically a culmination of all those other
routines - rewritten in REXX using the EXECSCRN panel
generator (see VM Update June 1987).

As an add-on feature, this performs the function of keeping
track of any mini-disk you've linked to during the session (it
only keeps it in your memory - not LASTING GLOVALV),
and also allows you to define and format a temporary mini-
disk.  Also, the routine will keep trying for a user-defined
number of times - in case you wish to call the person who's got
the target mini-disk linked (it displays the CP error message).

It uses the following logic:

%     It either uses line mode commands or, if the parameter
      MENU is used, displays a full-screen menu (via
      EXECSCRN) with blanks to be filled in - either for a mini-
      disk or temporary mini-disk.  If MENU is used, it
      STACKS a call to itself.

%      Allows a '?' to be entered for a user to see the syntax of
      the command.

%     Allows the parameter QUERY to view all mini-
      disks/temporary disk's defined during the current VM
      session.

%      Uses virtual addresses X'200-300'.

%      Allows any filemode except 'S' and 'Y'.

%      Passes a return code indicating success/failure.

%     Puts the information in the STACK or TERMINAL or
      doesn't tell you anything depending on what option you've
      specified.

Three examples are given below:
      LINKUSR JEFF 191
This would issue the following CP LINK command:
      LINK JEFF 191 200 R
Note that address 200-300 would be used.

      LINKUSR JEFF 191 (RETRY'
Would keep trying to link to JEFF's 191 for 3 minutes every 30 seconds.
      LINKUSR JEFF 191 . W
Would attempt a link to JEFF's 191 in  WRITE mode with no
password specified.  The routine determines the virtual address
and filemode to use for the access.

Note: there are several hex characters used in the code to
highlight the text.  They won't affect the execution of the
routine, though.  The hex characters that you can use to put in
your own highlighting are: X'1DF9' to start the highlighting,
and X'1D60' to end the highlighting.

The command format is:
              |?    |
      LINKUSR |QUERY|
              |MENU |

or

  LINKUSR |userid| vaddr1 <vaddr2  mode  fm  < ( <NORETRY|RETRY|RETRY=n>
        <NOREACCess|REACCess> <STACK|TERM|NOTERM> ) >
         ----------                  ----

or

  LINKUSR |TEMP  | vaddr1 fm cyls
    < ( <NOREACCess|REACCess> <STACK|TERM|NOTERM> ) >
         ----------                  ----

Where:
       ?             =      Displays syntax for the LINKUSR command
      Userid      =      The user-id whose mini-disk you want to link to.
      vaddr1      =      The owner's mini-disk virtual address.
      vaddr2      =      The address you wish to call this mini-disk.

Userid and vaddr1 must be entered.   A '.' may be used to
indicate you do not mind what vaddr2 will be.  The first
address in the range of 200-2FF will be used.  If you omit this
parameter, it is the same as entering a '.'.

      mode      =      CP LINK mode  (R, RR, W, WR, MR).  MW not allowed

A '.' may be used which indicates R mode.  If this parameter is
omitted, it is the same as '.'.

      fm      =      CMS filemode you want.
You may code '.' to signify the first available filemode (A-Z) is
to be used.  If this parameter is not coded, it is the same as '.'

      QUERY      =      Displays all mini-disks linked via LINKUSR
                          during this IPL of CMS.
      TEMP      =      Allocates temporary storage (in cylinders).

Options:
      NORETRY|      If RETRY is specified, the command will keep
      RETRY|          trying to get the mini-disk every 30 seconds for a
      RETRY=n      total of 3 minutes.  RETRY=n can be used
                         to keep trying for a user-defined number of times.

      NOREACCess|      If a mini-disk is already accessed at your requested
      REACCess      filemode, REACCESS will go ahead and access
                           this mini-disk at your requested filemode, anyway.
                           This is only valid if you specify a filemode.

      NOTERM|      Specifies whether you want a message to be
      TERM|          displayed on your terminal (TERM), or put in
      STACK        the program stack of the virtual address and
                        filemode of your requested mini-disk.  NOTERM gives
                        no message and nothing on the stack.
                       TERM is the default.

LINKUSR  EXEC

/*STRT
$*-----------------------  MINIDISK/TEMPDISK utility ------------------*
!   Owner's ID           :===>%USERID  ! <Required>
!   Owner's Virtual Addr :===>%VADDR1!   <Required>
!   Link it as address   :===>%VADDR2!   <'.' for default - N/A if TEMP>
!   Mode (RR/R/W)        :===>%MODE!
!   Filemode (A-Z)       :===>%FM!      <'.' for default>
!   Number of CYLS       :===>%CYLS!    <for TEMP disk only>
!   Specify any options:(RETRY, RETRY=n, REACCESS, STACK|NOTERM)
!   ===>%PARMSTR                   !    <Optional>
$&MSG                                 !
!          $PF12!QUIT
*END
-----------------End of Screen Definition---------------------        */
ARG function parms
if function = 'MENU'
  then do
    userid = ''; vaddr1 = ''; vaddr2 = '.'; fm = '.';
    mode = ''; cyls = ''; parmstr = ''; msg = 'Enter data now';
    call MENU
    exit 0
end
if function = '?'
   then
    signal EXPLAIN
else if function = 'QUERY'
   then
    signal QUERY
else signal PROCESS
MENU:  /* Allows Request for link to be done using a template */
  'EXECSCRN LINKUSR EXEC *STRT *END (ALARM NOTRANS'
  if key =' PFK12' | key = 'PFK24' then exit 0
  if userid = '' | vaddr1 = '' then do
     msg = 'Userid or Virtual address #1 is missing... re-enter'
     signal MENU
  end
  else do
      userid = translate(userid)
      if userid = 'TEMP' then vaddr2 = ' '
      PUSH 'LINKUSR' userid vaddr1 vaddr2 mode fm cyls '(' parmstr
return
PROCESS:
ret_def = 6;    /* Perform retry 6 times maximum - if retry wanted  */
ret_sec = 30;   /* Perform retry every 30 seconds - if retry wanted */
init = 512;     /* 512 = '200'x   -- beginning vaddr to check       */
initend = 768;  /* 768 = '300'x   -- ending vaddr to check          */
if function = 'TEMP'
   then
     do
       vaddr2 = ''
       PARSE UPPER ARG parm1 '(' parm2
       PARSE VAR parm1 userid vaddr1 fm cyls
       vaddr2 = vaddr1
       signal SKIPVAD1
     end
else do
       PARSE ARG parm1 '(' parm2
       parm1 = translate(parm1)
       parm2 = translate(parm2)
       PARSE VAR parm1 userid vaddr1 vaddr2 mode fm
       fm = translate(fm)
     end
if userid = '' then do
   say 'LINKUSR: Userid missing... try again with proper command format'
   exit 8
end
if vaddr1 = '' | vaddr1 = '.' then do
   say 'LINKUSR: Target virtual address is invalid... try again'
   exit 8
end
SKIPVAD1:
if fm = '' | fm = '.' then call GET_FM         /* Get 1st available   */
if fm < 'A' | fm > 'Z' then do
   say 'LINKUSR: Filemode is invalid.  Filemode specified='fm
   exit 8
end
if fm = 'S' | fm = 'Y' then do
   say 'LINKUSR: Filemode of ''S'' and ''Y'' are reserved for CMS'
   exit 4
end
if mode = '.' | mode = '' then mode = 'R'    /* setup default linkmode*/
if vaddr2 = '.' | vaddr2 = '' then call GET_VAD2  /* get default addr */
if index(parm2,'RETRY') > 0 then do            /* do they want RETRY? */
  retry='YES'
  if index(parm2,'RETRY=') > 0 then do
    PARSE VALUE parm2 with . 'RETRY=' ret_cnt .
    if ret_cnt > 0 then,
      retry = 'YES'
    else do
      retry = 'YES'
      ret_cnt = ret_def;
    end
  end
end
if find(parm2,'REACCESS') > 0 then,
   reaccess = 'YES';
else reaccess = 'NO';
if find(parm2,'NOTERM') > 0 then term = 'NOTERM';
  else if find(parm2,'STACK') > 0 then term = 'STACK';
    else term = 'TERM';
if index(parm2,'PASS=') > 0 then,
   PARSE VALUE parm2 with . 'PASS='pswd .
else pswd = '';
/* Now, process the request since we have the parameters. */
if userid = 'TEMP'
    then do
      call TEMP
      exit 0
end
 'MAKEBUF'
 'set emsg on'
 'set imsg on'
 'EXECIO * CP (STRING LINK' userid vaddr1 vaddr2 mode pswd
 if rc = 0 then SIGNAL DONE;      /* If it worked, okay... otherwise  */
 else DO queued()                         /* process lines in stack   */
    PULL line
    if substr(line,10,1) = 'W' then do;
       say 'The link had a warning... link was successful, though'
       say line
       signal done
    end
    'set cmstype rt'
    say 'The link failed due to the following error condition:'
    say ''; say '9'; say line; say '-';
 end
'DROPBUF'                                       /* get rid of garbage */
'EXECIO 0 CP (STRING DET' vaddr2        /* just in case of forced R/O */
if retry = 'YES' then do;
   do ret_cnt;           /* every ret_sec seconds for ret_cnt times   */
     'MAKEBUF'
     'EXECIO * CP (STRING LINK' userid vaddr1 vaddr2 mode pswd
     if rc = 0 then do
       'DROPBUF'
       SIGNAL DONE;                       /* Got it okay now...       */
     end
     else DO queued()                     /* process lines in stack   */
        PULL line
        'set cmstype rt'
        say 'LINKUSR: The link failed again due to the following error'
        say ' condition:'
        say ''; say '9'; say line; say '-';
     end
     'DROPBUF'
     'EXECIO 0 CP (STRING DET' vaddr2                 /* just in case */
     say ''; say '';
 say 'LINKUSR: Waiting' ret_sec 'seconds for retry.... (up to' ret_cnt 'times)'
     'cp sleep' ret_sec 'sec';
     'vmfclear';
   end;
end;
/* ---- Since we got here, link failed.... */
say 'LINKUSR: Link failed to' userid vaddr1 mode
exit 8
DONE:                     /* we got it okay and are ready to go home  */
'DROPBUF'
'MAKEBUF'
'Q DISK' fm '(STACK';
rcode = queued();
'DROPBUF';
if rcode > 1 then do
  if reaccess = 'YES' then nop;
  else do
     say 'LINKUSR: Minidisk already accessed at filemode='fm
     'EXECIO 0 CP (STRING DET' vaddr2
     exit 8
  end
end
'set cmstype ht'
'ACCESS' vaddr2 fm
if rc ¬= 0 then do;
   'set cmstype rt'
   say 'LINKUSR: Minidisk was linked, but NOT accessed due to error'
   say 'LINKUSR:  Minidisk is still linked at virtual address:' vaddr2
   exit 4
end
'set cmstype rt'
if term = 'TERM' then,
   say userid vaddr1 'linked as' vaddr2 'at filemode' fm;
   else if term = 'STACK' then,
      PUSH vaddr2 fm;
'set cmstype rt'
call LINKSTK
exit 0
end
/* --------- If filemode = '.' then find an available one... */
GET_FM:
  'MAKEBUF';
  test = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  do i = 1 to 26;
    ADDRESS CMS 'Q DISK' substr(test,i,1) '(STACK';
    if queued() = 1 then do;
       'DROPBUF';
       fm = substr(test,i,1);
       leave;
    end;
    pull .; pull .;
  end;
  'DROPBUF'
  'set cmstype rt'
return
/* Acquire virtual address if none specified */
GET_VAD2:
  t_init = init;
  t_end  = initend;
  do forever;
    'EXECIO 0 CP (STRING Q V' d2x(t_init,3)
    if rc ¬= 0 then do;
       vaddr2 = d2x(t_init);
       leave;
    end;
    t_init = t_init + 1;
    if t_init = t_end then do;
       vaddr2 = '000';                /* if out of range, return 000 */
       leave;
    end
  end
  vaddr2 = strip(vaddr2,L,0);            /* take off leading zero's  */
return
TEMP:
if cyls = '' | cyls = '.' then
   cyls = 1
if vaddr1 = '' | vaddr1 = '.' then
   vaddr1 = vaddr2
mode = 'W'
if datatype(cyls) ¬= 'NUM'
  then
     do
       say 'LINKUSR: Number of cylinders specified is INVALID',
               '...Try Again'
       exit 8
     end
 else do
 'def t3380 as' vaddr1 'cyl' cyls
 PUSH 'xxxxxx'
 PUSH '1'
 'format' vaddr1 fm
 say userid vaddr1 'linked as' vaddr2 'at filemode' fm;
 call LINKSTK
 return
LINKSTK:
'globalv select linkusr stack var0'
pull count
if count = '' then do                            /* never been there */
   'globalv select linkusr set var0 1'
   count = 0
 end
count = count + 1
'globalv select linkusr set var0' count
'globalv select linkusr setl var'count userid vaddr1 'linked as',
            vaddr2 mode 'at filemode' fm
exit 0
return
QUERY:
'globalv select linkusr list'
exit 0
return
EXPLAIN:
do
say 'Format:'
say '          |?    |'
say '  LINKUSR |QUERY|'
say '          |MENU |'
say '   - Or -'
say '  LINKUSR |userid| vaddr1 <vaddr2  mode  fm  < ( <NORETRY|RETRY>'
say '   <NOREACCess|REACCess> <STACK|TERM|NOTERM> > >'
say '   -----------                  ----'
say '   - Or -'
say '  LINKUSR |TEMP  | vaddr1 fm  cyls'
say '   <NOREACCess|REACCess> <STACK|TERM|NOTERM> > >'
say '   -----------                  ----'
say 'Where:'
say ' ?      =  Displays syntax for the LINKUSR command'
say ' Userid =  The userid whose minidisk you want to link to. Required'
say ' vaddr1 =  The owner''s minidisk virtual address. Required.'
say ' vaddr2 =  The address you wish to call this minidisk.'
say '           NOTE: A ''.'' may be used to indicate you do not care'
say '                 what your virtual address will be.  The first'
say '                 address in the range 200-2FF will be used if'
say '                 you omit this parameter.  It is the same as'
say '                 entering a ''.''.'
say ' mode   =  CP Link mode  (R, RR, W, WR, MR).  Note: MW not allowed'
say '           NOTE: A ''.'' may be used which indicates 'R' mode.'
say '                 If this parm is omitted, it is the same as ''.'''
say ' fm     =  CMS filemode you want.'
say '           NOTE: You may code ''.'' to signify the first available'
say '                 filemode (A-Z) is to be used.  If this parm is'
say '                 not coded, it is the same as ''.'' (default).'
say ' QUERY  =  Displays all  minidisks linked via LINKUSR during this'
say '              IPL of CMS.'
say ' TEMP   =  Allocates temporary storage (in cylinders).'
say ' Options:'
say ' NORETRY|RETRY     If RETRY is specified, the command will keep'
say ' RETRY=n           trying to get the minidisk every 30 seconds for'
say '                   a total of 3 minutes.'
say ' NOREACCess|REACCess  If a minidisk is already accessed at your'
say '                      requested filemode, REACCESS will go ahead'
say '                      and access this minidisk at your requested'
say '                      filemode, anyway.  This is only valid if '
say '                      you specify a filemode.'
say ' NOTERM|TERM|STACK  Specifies whether you want a message to be'
say '                    displayed on your terminal (TERM), or put in'
say '                    the program stack of the virtual address and'
say '                    filemode of your requested minidisk.  NOTERM'
say '                    gives no message and nothing on the stack.'
say '                    TERM is the default.'
exit 0
end

Pat Tierce
Systems Software Specialist
State of Kansas - Division of IS and Communications (USA)


