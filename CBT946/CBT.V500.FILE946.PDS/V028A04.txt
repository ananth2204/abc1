 Now that DMS has gone
Early this year IBM withdrew support for Data Management System (DMS/CMS) in the
USA.  For many, DMS/CMS was the best, simplest and cheapest way to develop full
screen 3270 applications under VM/CMS.  With its official demise it is worth
considering the best alternative replacements for future development or
conversion from DMS.
DMS consisted of a screen painter, an EXEC interface, and a high-level language
interface.  These components made it easy to construct quite sophisticated
applications.
The current 'strategic' alternative from IBM that is part of Systems Application
Architecture (SAA), is Interactive Structured Productivity Facility (ISPF).
This product works well in its native MVS/TSO environment, but is criticised for
its lack of performance under VM/CMS and duplication of CMS functions.
It does not contain a screen painter; panels are painted in character format
using the editor.  Panels are embedded in a section of interpreted procedural
language that looks similar to EXEC.  A section can be coded in this language to
validate data before it is returned to its caller, or perhaps to invoke a
command procedure.  The code can be compiled to improve performance, otherwise
the procedures are interpreted at run-time.
Programs that make use of ISPF panels have a subroutine interface to invoke the
procedure, which displays the panel and returns the data to the program.  ISPF
maintains an environment that comprises a number of utilities that can be
selected from a hierarchic menu system.  Your own application can be added to
this hierarchy.  Some rudimentary file sharing is also attempted.  A
Discontiguous Shared Segment (DCSS) must be created to install the product.
If you are considering converting your application from DMS to ISPF there are no
automated conversion facilities.  You must essentially start from scratch by
recoding the panels in ISPF, turning your EXECs inside out, and changing program
calls and re-compiling.
A much simpler upgrade path is provided by converting from DMS to XMENU.  XMENU
is sold by VM Systems Group.  It is similar in concept to DMS, but provides many
more features, providing easy-to-use screen interfaces in a cost-effective
manner.
To convert from DMS to XMENU a command is provided to translate a DMS PANEL and
PCB file to a MENU file.  Various options to the command control how DMS names
are converted.  The process is fast and works very well.
If your DMS panels are called from a programming language, completing the
conversion is simple.  You must first GLOBAL the XMENU TXTLIB instead of the DMS
library, then load the program containing the DMS calls.  Entry points are
provided in the XMENU TXTLIB that correspond to the DMS entry points.  The
program can be GENMODed and will work as it did before but now using the
converted panels.
Conversion from EXECs that use DMS to EXECs that use XMENU is a bit more
difficult.  Part of the difficulty lies in the difference between how the two
products interact with the EXEC environment.
When DMS is called it loads into the User Area and sets up a subcommand
environment through which to pass data between itself and the EXEC.  When XMENU
is called it establishes itself as a CMS nucleus extension in CMS free storage.
Only support code is loaded into the nucleus extension if the optional shared
segment has been installed.  Parameters are passed to XMENU as command line
options, on the console stack or in a control file.  Data is passed
transparently to and from the symbolically-named screen fields and interpreter
variables that have the same names.
The differences between the two products require some recoding in an EXEC.  The
DMS display statement can be directly replaced with the equivalent XMENU
command.
Any DMS to EXEC variable mapping has to be looked at carefully.  The mapping
effectively expands the short DMS field names to long EXEC variable names.
These variable names often exceed the maximum seven-character XMENU field names.
This will require some careful editing to either truncate variable names or add
assignment statements to the EXEC.
A couple of interesting utilities are supplied with XMENU to help the EXEC
writer.  One will pre-load panels for better performance; another will transfer
parameters and field values between a file and interpreter variables for
maintaining an application across sessions.

 A useful feature permits panels to be saved in libraries.  This can save a lot
of effort and frustration when moving an application from a test to a production
environment.
XMENU can also trap a number of other types of interrupt besides those
originating from the screen.  The capability to respond to both reader and SMSG
interrupts permits a wide variety of inter-communicating applications to be
developed easily, eg electronic mail.
Adrian Blakey (USA) ) Xephon 1988


























































