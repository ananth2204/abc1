Virtual memory map

The IBM supplied program, SNTMAP, produces two CMS
files: DASD SNTMAP and MEMORY SNTMAP.  I found that
the virtual memory map in the MEMORY SNTMAP file
needed to be much clearer so that I could use it when planning
to put new code in shared segments.  Therefore, I wrote
DCSSMAP EXEC which produces a new virtual memory map
that clearly shows the connection between segment, page
number and hex load address for each SYSNAME (see Figure
1).

This EXEC is running under VM/SP Release 5 (SL 514).

DCSSMAP EXEC

/* DCSS - Virtual Memory Map */
'ACC 295 C'
Arg sntfile
If sntfile = '' Then do
   fn = 'DMKSNT'
   ft = 'ASSEMBLE'
   fm = 'C'
   End
   Else do
      fn = Word(sntfile,1)
      ft = Word(sntfile,2)
      fm = Word(sntfile,3)
      End
'STATE' fn ft fm
If rc > 0 Then Exit 90
pg = 0
Do i = 1 to 256
   asseg.i = ' '
   Do j = 1 to 8
      nm.i.j = ' '
      End
   End
Do seg = 1 to 256
   pg = pg + 16
   page.seg = pg
   hexa.seg = d2x(page.seg * 4096)
   End
'EXECIO * DISKR' fn ft fm '(FINI'
rr = Queued()
r = 0
Do while (r < rr)
Pull 1 line 72 .
r = r + 1
If Substr(line,1,1) /= '*' Then do
syshrsg = Substr(line,16,7)
syspgnm = Substr(line,16,7)
If Index(line,'NAMESYS') > 0 Then x = Index(line,'SYSNAME=')
   Else x = 0
If x > 0 Then do
   name = Substr(line,x+8,8)
   name = Translate(name,' ',',')
   End
If syspgnm = 'SYSPGNM' Then do
   lin = Substr(line,24)
   lin2 = lin
   Do while (index(lin2,')') = 0 & r < rr)
      Pull 1 line 72 .
      r = r + 1
      lin2 = Substr(line,16)
      lin = lin lin2
      End
   lin = Translate(lin,' ','(),')
   w = Words(lin)
   Do i = 1 to w
      j = Index(word(lin,i),'-')
      If j = 0 Then do
         pfrom = Word(lin,i)
         pto = Word(lin,i)
         End
         Else do
            pfrom = Substr(Word(lin,i),1,j-1)
            pto = Substr(Word(lin,i),j+1)
            end
      If pfrom > 15 Then do
      Do k = 1 to 256
         If pfrom = page.k Then do
            Call innm k
            Leave
            End
         End
      Do m = k+1 to 256
         If pto > page.m Then Call innm m
         Else Leave
         End
      End
   End
End
If syshrsg = 'SYSHRSG' Then do
   lin = Substr(line,24)
   lin2 = lin
   Do while (Index(lin2,')') = 0 & r < rr)
      Pull 1 line 72 .
      r = r + 1
      lin2 = Substr(line,16)
      lin = lin lin2
      End
   lin = Translate(lin,' ','(),')
   w = Words(lin)
   Do i = 1 to w
      j = Index(Word(lin,i),'-')
      If j = 0 Then do
         pfrom = Word(lin,i)
         pto = Word(lin,i)
         End
         Else do
            pfrom = Substr(Word(lin,i),1,j-1)
            pto = Substr(Word(lin,i),j+1)
            End
      Do k = 1 to 256
         If pfrom = k Then do
            asseg.k = '*'
            Leave
            End
         End
      Do m = k+1 to 256
         If pto >= m Then asseg.m = '*'
         Else Leave
         End
      End
   End
End
End
dmg = Date()
Upper dmg
head.0 = Right(dmg,70)
head.0 = Overlay('1',head.0)
head.1 = '0      V I R T U A L   M E M O R Y   M A P               '
head.2 = '- SEGM  PAGE  HEX.ADR     SYSNAME'
head.3 = ' ' || Copies('*',69)
head.4 = ' '
queue 'SET MSGM OFF'
queue 'DEL *'
queue 'TOP'
Do p = 1 to 256
   If p = 1 | p = 61 | p = 121 | p = 181 | p = 241 Then do
      Do i = 0 to 4
         Queue 'INPUT' head.i
         End
      End
   xl = Right(p,5) asseg.p Right(page.p,4) ' ' Left(hexa.p,7)
   xl = xl '  ' nm.p.1 nm.p.2 nm.p.3 nm.p.4 nm.p.5 nm.p.6 nm.p.7 nm.p.8
   Queue 'INPUT' xl
   End
Queue 'FILE'
'XEDIT DMKSNT MAP A'
Say 'DMKSNT MAP A created.'
Exit
innm:
Arg f
   Do s = 1 to 8
      If nm.f.s = ' ' Then do
         nm.f.s = name
         Leave
         End
      End
Return

Teodor Jurak
Systems Programmer
Jadrolinija Rijeka (Yugoslavia)                      c Jadrolinija 1990


