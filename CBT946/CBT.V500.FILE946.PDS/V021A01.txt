 Cross System Product system design
THE SITUATION
Our installation decided to install and implement IBM's programming tool Cross
System Product (CSP).  This seemed to be a relatively simple task: simply load
down the packaged system (which consisted of one definition for one CSP/VM
machine), load its associated Member Specification Library (MSL) and Application
Load File (ALF), and give each programmer his/her own DOS formatted disk with a
private MSL and ALF for their own use.
THE PROBLEM
This system was fine at first, but still needed to be front-ended by various
EXECs that established catalog and VM links, set up DLBLs for the associated
MSLs, issued GLOBALs, and various other tasks before the CSP system was actually
entered.  There was also the need for EXECs to allow links between the
programmers' MSLs/ALFs and the production system MSLs/ALFs to allow the movement
of applications into production.  EXECs needed to be written to allow
concatenation of MSLs and ALFs during testing, so that various pieces located in
various MSLs/ALFs could be linked together, so pieces of common code could
reside in a centrally accessed MSL/ALF.
As you can see, this began to expand into a rather complex system of EXECs and
system designs.  It became necessary to install another CSP system, to be used
as the production system, while maintaining the originally installed system as
the test system.  There now had to be EXECs to allow this movement of CSP
members between these two systems.  We were also faced with the need to divide
the test system MSL into several individual application system MSLs, but
maintaining one MSL to remain as the common test MSL, where commonly used coding
and routines would be located.  This would allow complete system testing in the
test system without affecting another working system in the test environment.
THE RE-DESIGNING OF A SYSTEM
Although this begins to sound very complex, this is the issue that almost every
shop considering implementing CSP is, or will be, faced with.  In our case, now
that we knew what CSP was all about, it was time to design a completely new
system.  A consideration of the design of our system was the need to be able to
access both a test and a production version of the IBM VM database SQL, which we
had installed along with CSP.
After some careful planning, we came up with the system in Figure 1.  In all
likelihood, this system could fit the needs of most CSP installations, with the
private system MSLs in the test system relating to any logical division in an
installation.  This system would allow all programmers to have their own private
MSLs/ALFs: a test system composed of individually divided systems, a common MSL
for common coding, and separate Application Load Files for both the source and
runnable coding developed; and a production system composed of a single system
MSL, and the same division of the ALF for both source and runnable code.  The
system also included a provision to access either a production or test SQL
database.  The installation/implementation of the system was fairly
straightforward, defining a DOS-formatted disk for each programmer, the test
system (VM id CSPTEST), and the production system (VM id CSPUSER), and using the
install EXECs from CSP to load the VSAM data areas with the desired MSLs and
ALFs.
THE NEW EXEC
The real challenge now became the task of writing an EXEC or series of EXECs to
allow the MSL/ALF concatenation and accessibility discussed above.  REXX was
chosen for the task, basically because of its simplicity of coding and its
inherent power and structure.  It was decided to try to front-end CSP with a
single EXEC, which, through parameter options, would allow the specification of
such things as:  Startup Mode (AE or AD);  which system would be accessed
(either a programmers' MSL, the test system, or the production system);  whether
to access the production or test SQL database; names of any other programmers
with MSLs that would like to be linked and accessed;  the names of any
particular individual test system MSLs that need to be accessed;  and, finally,
an option to include any other allowable start-up OPTIONS that would be passed
to the IBM start-up EXEC XSPD/XSPE for CSP invocation.  The EXEC that was
designed contained the options and formats as described below.  This panel is
displayed as a help screen and may be displayed by entering 'CSP ?'.
The primary problem in coding this EXEC stemmed from the fact that every MSL
accessed/concatenated needed to have a CMS DLBL for both the catalog and the MSL
which was being linked.  To resolve this problem, a table was developed which
 would contain an entry for every MSL accessible, listing the VOLID and the
dataset name of the MSL.  A look-up routine could then be used to locate and
establish the correct DLBLs.  This table is given below.
This EXEC was written to allow the flexibility and accessibility that is needed
to implement a CSP working system, and can be invoked from any user machine,
programmer machine, test CSP machine, or production CSP machine.  By specifying
SYS=PROG, any particular MSL from any particular machine may be accessed, and
this provides the ability to copy MSL applications/definitions from one CSP
system to another.  Through the specification of SYS=TEST or SYS=PROD, any user
may access either the test system (possibly for user testing), or the production
system (for production mode work).  On specification of MODE=AD, SYS=PROG, the
programmer is automatically linked R/O to the test common MSL; if the EXEC is
invoked from the test system, the programmer is automatically linked R/O to the
production MSL;  and if invoked from the production system, automatically linked
R/O to the test common MSL.
TAILORING AND DEFAULTS
Default functions and settings were included in this EXEC to meet our own
installation standards and naming conventions so, subsequently, entries in the
EXEC may need modification to suit your own installation.  Following is a
description of the workings of the EXEC, and reference is made to particular
values which may need to be changed:
1    The name of the production CSP machine is CSPUSER.
2    The name of the test CSP machine is CSPTEST.
3    The address of all DOS disks containing CSP MSLs/ALFs is 503, in accordance
with the CSP installation procedures and recommendations.
4    The name of the test SQL database is DCDBTST, and is assumed to be attached
to a VM machine at virtual address 195.
5    The name of the production SQL database is DCDBPRD, and is assumed to be
attached to a VM machine at virtual address 196.
6    If MODE=AE is chosen, the program in CSP to be initially executed is XMENU.
This is our installation's security menu panel, and is the only allowed entrance
into CSP.
7    A GLOBAL LOADLIB statement for CSPLIB and a DLBL and FILEDEF statement for
XSUBD are issued internally in the EXEC.  These are used at our installation to
signify the LOADLIB to be used by CSP, and to specify a CMS file which is used
for a particular in-house application (data passed to a CSP BATCHing system
facility).
Although all this coding and system design seems overwhelming, the system design
is actually fairly straightforward, and the EXEC's simplicity of use becomes
apparent when you become familiar with its abilities and functions.  Such an
EXEC becomes very important when you are trying to manually link to and issue
CMS DLBLs for all required MSLs.
This system is currently in use in a VM Release 4 system running Cross System
Product Release 3.1.1 with both Application Development (AD) and Application
Execution (AE) modes in use.
HELP SCREEN
*   CSP  MODE=ae/ad,                                *
*        SYS=prog/test/prod,                        *
*        SQL=prod/test,                             *
*        CAT=cat1.cat2.cat3.cat4,                   *
*        LINK=user1.user2.user3.user4,              *
*        OPT=opt.opt.opt                            *
CSP  is used to invoke the  CROSS SYSTEM PRODUCT interface
     and indicate specific desired startup functions, such
     as the MODE (AD or AE)  to invoke, which AE system to
     run against, whether to access the PRODUCTION OR TEST
     SQL database, and various other startup options.
WHERE:
  MODE ==> Specifies the CSP mode you wish to enter.
           Values  = AD or AE
           Default = AE
  SYS  ==> This is ONLY valid for MODE=AE, and specifies
           which ALF you wish to run against. You can
           execute against your own programmer ALF, the
           CSP test system ALF, or the production ALF.
           Values  = PROG or TEST or PROD
            Default = PROD
  SQL  ==> Specifies which SQL database you wish to be
           linked to. Either production or test.
           Values  = PROD or TEST
           Default = PROD
  CAT  ==> This is ONLY valid for MODE=AD, and specifies
           any additional CSP TEST MSLs (TAX, BFD, etc.)
           that you wish to have access to.
           Values  = Distributed system CATALOG names
           Default = NONE
  LINK ==> This is ONLY valid for MODE=AD, and specifies
           any additional programmer MSLs you wish to be
           linked and have R/O access to.
           Values  = Any programmer with a DOS 503 disk
           Default = NONE
  OPT  ==> Specifies any other valid XSPD or XSPE option(s)
           as listed in the CROSS SYSTEM OPERATIONS manual.
           Values  = Any valid option(s)
           Default = NONE
NOTES:
  1. You can specify any combination of linked Programmer
     or System (TAX, BFD, etc.) MSLs, but the total number
     MUST not execeed 5. Any more than 5 will be ignored.
  2. Be aware of conflicting options (you will be warned):
        MODE=AE and LINK parameter
        MODE=AE and CAT  parameter
        MODE=AD and SYS  parameter
DLBL/VOLID TABLE
------------------------------------------------
| USER/APP   | VOLID    | Data Set Name        |
------------------------------------------------
| TOM        | TOM50UC  | CSP USER USR1MSL     |
| DICK       | DCK50UC  | CSP USER USR1MSL     |
| HARRY      | HRY50UC  | CSP USER USR1MSL     |
| KEVIN      | KEV50UC  | CSP USER USR1MSL     |
| CSPTEST    | CTS50UC  | CSP USER USR1MSL     |
| CSPUSER    | USER503  | CSP USER USR1MSL     |
| ASSESSOR   | CTS50UC  | CSP ASSESSOR MSL     |
| FINANCE    | CTS50UC  | CSP FINANCE MSL      |
------------------------------------------------
Kevin Potter
Systems Programmer
Douglas County (USA)     ) Xephon 1988























