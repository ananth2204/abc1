Using XEDIT to compare files

Most CMS users are familiar with the CMS COMPARE
command, which allows two files to be compared.
Unfortunately, it has many limitations.  Another command
named XCOMPARE is available in the public domain which
removes many of COMPARE's limitations.  Another useful
way to compare files is to do so while XEDITing all of them.
The EQUAL and UNEQUAL macros enable this.  They have
the distinct advantage of allowing the equal or unequal lines to
be examined in context.  This is especially handy when
comparing an old version of a file with a new version.

Both of them are designed to be used while XEDITing all files
at once.

One way do to so is as follows:

      XEDIT FILE ONE A     issued from the CMS command line
      SET SCREEN 3
      XEDIT FILE TWO A     issued from the second XEDIT command line
      XEDIT FILE THREE A   issued from the second XEDIT command line
      UNEQUAL


XEDIT MACRO

/*                    Find the Next Unequal Records
This XEDIT macro must be issued when multiple logical screens (sessions)
have been defined.  It searches all files, one record at a time (in a
forward direction), for the next record which is not identical in all
files.  It is invoked by entering:
   UNEQUAL <zone1 <zone2>>
where:
   zone1   is the leftmost column to take part in the comparison.  The
           default is 1.
   zone2   is the rightmost column to take part in the comparison.  The
           default is the record length of the file.
Notes:
   1. This macro is not concerned with the number of files contained in
      the logical screens.  There may be a different file for each
      screen or each screen may contain a different view of a single
      file, or there may be a mixture of these two uses.  In any case,
      this macro processes each logical screen (not necessarily each
      file) once.
   2. This macro only examines the portions of the records within their
      respective TRUNC columns.  You may consider this to be either a
      pain or a feature.                                              */
/*  Preliminaries                                                     */
EXTRACT '/LRECL/SCREEN/'
parse var screen.1 layout definition
x = words(definition)
if layout = 'DEFINE' then                    /*  the complicated way  */
   lscreen_count = x / 4
else                       /*  SIZE (horizontal) or WIDTH (vertical)  */
   lscreen_count = x
if lscreen_count = 1 then do
   MSG 'This macro is only useful if at least two logical screens ' ,
       'have been defined'
   call exit '1 Use the SCREEN subcommand to create multiple sessions'
   end
/*  Edit the parameters                                               */
arg left_zone right_zone .
if left_zone = '' then
   left_zone = 1
else do
   if verify(left_zone,'0123456789') > 0 then
      call exit '2 Left zone is not numeric:' left_zone
   end
if right_zone = '' then
   right_zone = lrecl.1
else do
   if verify(right_zone,'0123456789') > 0 then
      call exit '3 Right zone is not numeric:' right_zone
   end
if left_zone > right_zone then
   call exit '4 The left zone is greater than the right zone'
zone_width = right_zone - left_zone + 1
/*  Mainline                                                          */
eof_count = 0
do main_loop = 1       /*  until unequal records (guaranteed at EOF)  */
   /*  Determine the contents of the next record in each file         */
   do i = 1 to lscreen_count
      '+1 EXTRACT /CURLINE/EOF/'
      if eof.1 = 'ON' then do
         eof_count = eof_count + 1
         /*  Assume the data will never contain the following string  */
         record.i = 'FFEEDDCCBBAA'x i
         end
      else
         record.i = substr(curline.3,left_zone,zone_width)
      SOS 'TABCMDF'     /* Move the cursor to the next logical screen */
   end
   /*  Compare the records to see if any are unequal                  */
   do i = 1 to lscreen_count - 1
      j = i + 1
      if record.i ¬= record.j then               /*  unequal records  */
         leave main_loop
   end
end
if eof_count > 0 then do
   if eof_count = lscreen_count then
      eof_count = 'all'
   EMSG 'End of file has been reached for' eof_count 'files'
   end
exit 0
/*                         Subroutines                                */
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   MSG final_message
exit exit_rc


XEDIT

/*                    Find the Next Equal Records
This XEDIT macro must be issued when multiple logical screens (sessions)
have been defined.  It searches all files one record at a time (in a
forward direction) for the next record which is identical in all files.
There are no parameters.
The technique used is as follows:
   1. The session containing the cursor defines the "controlling file"
   2. The current line in the controlling file is determined
   3. All non-controlling files are searched starting at their current
      lines in a forward direction (without wrapping around to the top
      of the file) to see if they contain a line which matches the
      current line in the controlling file
   4. If there is a match for all files the macro exits
   5. The controlling file is positioned down one line
   6. All non-controlling files are positioned at their starting lines
   7. The process is repeated from step 2
   8. If EOF is reached on the controlling file all files are restored
      to their original position
Note: For simple searches, the performance of this macro is reasonable.
However, it will take a large amount of time if it must search a large
number of records.                                                    */
/*  Preliminaries                                                     */
EXTRACT '/SCREEN/'
parse var screen.1 layout definition
x = words(definition)
if layout = 'DEFINE' then                    /*  the complicated way  */
   lscreen_count = x / 4
else                       /*  SIZE (horizontal) or WIDTH (vertical)  */
   lscreen_count = x
if lscreen_count = 1 then do
  MSG 'This macro is only useful if at least two logical screens have' ,
       'been defined'
   call exit '1 Use the SCREEN subcommand to create multiple sessions'
   end
EXTRACT '/EOF/TOF/'
if eof.1 = 'ON' | tof.1 = 'ON' then
   call exit '2 The "controlling" file cannot be positioned at Top of' ,
      'File or End of File'
/*  Determine the current line number for the file in each session    */
do i = 1 to lscreen_count
   EXTRACT '/LINE/'
   starting_line.i = line.1
   SOS 'TABCMDF'      /*  Move the cursor to the next logical screen  */
end
/*  Start of mainline                                                 */
eof_count = 0
do main_loop = 1                    /*  until equal records (or EOF)  */
   /*  Step 2: Determine the contents of the next record in the
       controlling file                                               */
   EXTRACT '/CURLINE/EOF/'
   controlling_line = curline.3
   if eof.1 = 'ON' then
      leave
   /*  Step 3: Search the non-controlling files to see if they all
       contain a line which matches the current line in the controlling
       file                                                           */
   do i = 2 to lscreen_count           /*  the non-controlling files  */
      SOS 'TABCMDF'   /*  Move the cursor to the next logical screen  */
      if eof.1 = 'ON' then
         /*  This cannot be true for the first non-controlling file
             (when i=2).  If true afterwards, no subsequent files
             will be examined, but the above SOS will be executed so
             we will always leave the "i" loop with the cursor in the
             last non-controlling file.                               */
         iterate
      LOCATE ':'starting_line.i    /*  Restore the original position  */
      /*  Force the first EXTRACT to process the line at the starting
          position  (TOF is a happy exception)                        */
      UP
      do forever                              /*  until match or EOF  */
         '+1 EXTRACT /CURLINE/EOF/'
         if eof.1 = 'ON' then
            leave
         if curline.3 = controlling_line then  /* match with one file */
            leave
      end
   end   /*  i  */
   SOS 'TABCMDF'
                /* Move the cursor to the controlling logical screen  */
   /*  Step 4: Check for a match                                      */
   if eof.1 = 'OFF' then             /*  A matching record was found  */
      exit 0
   /*  Step 7: Try again with the next record in the controlling
       file  (Steps 5 and 6 will occur in due course)                 */
   DOWN '1'
end
/*  Step 8: End of file has been reached on the controlling file      */

do i = 1 to lscreen_count
   LOCATE ':'starting_line.i       /*  Restore the original position  */
   SOS 'TABCMDF'      /*  Move the cursor to the next logical screen  */
end
EMSG 'No match found'
exit 0
/*                         Subroutines                                */
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   MSG final_message
exit exit_rc

Dave Fraatz
Specialist
3M

