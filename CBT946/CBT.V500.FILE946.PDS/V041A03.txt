Mapping temporary disk extents' use

Temporary disk space has been a critical subject in our system.
This EXEC helps to find out what's going on with TDSK extents.

It also helps to locate the largest, free, temporary disk space.

Presently we only have 3375 temporary disk space available, so I
haven't been able to test this EXEC with other disk types, but the
logic is the same.


TDMAP EXEC will search 3350, 3375 and 3380 temporary disk
space and will map all the extents available in the system.  For
additional information look at the remarks in the source code.  An
example of the output is shown in Figure 1.


TDMAP EXEC

/*  To run this exec a privileged class B, C and E user is required.  */
/*          This exec maps temporary minidisk extents showing         */
/*            the biggest area free to allocate a minidisk.           */
arg option
parse source . . fn .
if option = '?' then call help
address command
fileid  = 'CPNUC MAP'       /* Default fn and ft of cp nucleus map     */
/*The following information can be picked up in CPNUC MAP (addresses)  */
/*and DMKPGT ASSEMBLE (variable names). The variable names can be used */
/*to find the addresses of ALOCBLOK anchors in CPNUC MAP if you want   */
/*to pick them up dynamically. Add a line for each TDISK type you have */
/* and intend to map.                                                  */
tdsk.1 = '3350 0151E4 DMKPGT5A AT ' /*3350 ALOCBLOK anchor addr & label*/
tdsk.2 = '3375 0151D8 DMKPGT7A AT ' /*3375 ALOCBLOK anchor addr & label*/
tdsk.3 = '3380 0151D4 DMKPGT8A AT ' /*3380 ALOCBLOK anchor addr & label*/
tdsk.4 = 'FFFF'                                /* This is the fence    */
/* The values above usually remain unchanged for the release life long */
say '------------------------ Temporary Disk Users --------------------'
'CP QUERY TDSK'
/* The next call can be 'commented' if the addresses in tdsk.x        */
/* are correct. That will improve TDMAP performance.                  */
call get_tdisk_pointer      /* Get ALOCBLOK anchor address dynamically*/
                            /* from CPNUC MAP file in OPERATNS 193.   */
do i = 1 by 1
   parse var tdsk.i type anchblkadr.i label
   nextblkadr = anchblkadr.i
   if type = 'FFFF' then leave
   call get_tdisk_anchor    /* Get temporary disk pointer             */
   if alocblkadr = '00000000' then iterate
   separator = '-----------------------' type
                                'Temporary Disk MAP ------------------'
   header  = 'USED  MAX   LABEL  MAXFREE  ' type
                                        'TDISK MAP  (F - FREE B - BUSY)'
   do while x2d(alocblkadr) ¬= 0 /*Last ALOCBLOK on chain has ALOCCHN=0*/
      call get_tdisk_info  /* Look for free and used TDISK space       */
      call generate_report /* Display the results at the terminal      */
   end
end
say ' '
exit
/* Get tdisk anchor address depending on the type of disk in CPNUC MAP*/
/* Use of the following paragraph results in poor performance.        */
get_tdisk_pointer:
   'SET CMSTYPE HT'
   'GETFMADR'
   pull . fm addr
   /* Take a look to see if the LINK command has the correct password */
   parse value diagrc(8,'CP LINK OPERATNS 193' addr 'RR RIPCS') with rc .
   if rc = 114 then do
      say '*** ERROR *** wrong LINK password. Correct it and try again.'
      exit rc
   end
   if rc ¬= 0 then  error_msg('LINK',rc,sigl-4)
   'ACCESS' addr fm
   do i = 1 by 1
      parse var tdsk.i type anchblkadr.i label
      if type = 'FFFF' then leave
      'EXECIO * DISKR' fileid fm '(FINIS ZONE 7 20 LOCATE /'label'/'
      if rc ¬= 0 then  error_msg('EXECIO',rc,sigl)
      pull .  /* Purge file line number, etc. */
      parse pull . . anchblkadr.i
      anchblkadr.i = strip(anchblkadr.i,'B',' ')
   end
   'REL' addr '(DET'
   'SET CMSTYPE RT'
return
/* Get temporary disk pointer                                         */
get_tdisk_anchor:
   parse value diagrc(8,'DCP' nextblkadr'.4'),
                                         with rc . . 27 alocblkadr '15'x
   if rc ¬= 0 then  error_msg('DCP',rc,sigl)
return
/*     Analize the extent map information to see what's free and      */
/*                        what's being used                           */
get_tdisk_info:
nextblkadr = d2x(x2d(alocblkadr,8) + x2d('20')) /*Get ALOCCHN address */
alocmaxadr = d2x(x2d(alocblkadr,8) + x2d('04')) /*Get ALOCUSED ALOCMAX*/
parse value diagrc(8,'DCP' alocmaxadr'.4') with rc . . 27 alocmax '15'x
if rc ¬= 0 then error_msg('DCP',rc,sigl)
aloc = x2d(left(alocmax,4))               /* Split ALOCUSED ...       */
max  = x2d(alocmax,4)                     /*            ... & ALOCMAX */
alocrdvadr = d2x(x2d(alocblkadr,8) + x2d('14'))
                                              /* Get ALOCRDEV address */
parse value diagrc(8,'DCP' alocrdvadr'.4') with rc . . 27 rdevadr '15'x
if rc ¬= 0 then  error_msg('DCP',rc,sigl)
rdevadr = d2x(x2d(rdevadr,8) + x2d('30'))    /* Get dasd device label */
parse value diagrc(8,'DCP' rdevadr'.8'),
                                with rc . . 27 devlabel1 devlabel2 '15'x
if rc ¬= 0 then  error_msg('DCP',rc,sigl)
devlabel = left(x2c(devlabel1||devlabel2),6)
                                           /* Mount label from 2 words*/
alocmapadr = d2x(x2d(alocblkadr,8) + x2d('58'))
freext    = 0                                 /* Get ALOCMAP address  */
freextmax = 0
extlength = 0
alocflag  = '02'
indext = 0
/* Interpret MAP data                                                 */
parse value diagrc(8,'DCP' alocmapadr'.4') with rc . . 27 alocmap '15'x
if rc ¬= 0 then  error_msg('DCP',rc,sigl)
lastflag = substr(alocmap,1,2)
do until substr(alocmap,1,2) = 'AA'     /* ALOCMAP ends with AA flag  */
   parse value diagrc(8,'DCP' alocmapadr'.4'),
                                            with rc . . 27 alocmap '15'x
   if rc ¬= 0 then  error_msg('DCP',rc,sigl)
   do i = 1 to 4 until substr(alocmap,1,2) = 'AA'/*ALOCMAP processing.*/
      if substr(alocmap,1,2) ¬= lastflag then   /* ALOCMAP is a BYTE  */
         do                                     /* map created by VM  */
            indext = indext + 1                 /* for each TDISDK    */
            tabext.indext = extlength           /* extent. If cylinder*/
            extlength = 1                       /* is in USE the      */
            if lastflag = '82' then             /* corresponding byte */
               freebusy.indext = 'B'            /* in BYTE map        */
            else                                /* is set to X'82'.   */
               freebusy.indext = 'F'
            lastflag = substr(alocmap,1,2)
         end
      else
         extlength = extlength + 1
      alocmap = substr(alocmap,3,8)   /* Prepare to compare next byte */
   end
   alocmapadr = d2x(x2d(alocmapadr,8) + x2d('04'))
                                                  /* Next full address*/
   parse value diagrc(8,'DCP' alocmapadr'.4'),
                                            with rc . . 27 alocmap '15'x
   if rc ¬= 0 then  error_msg('DCP',rc,sigl)
end
/* Final proceedings                                                  */
indext = indext + 1
tabext.indext = extlength
if lastflag = '82' then
   freebusy.indext = 'B'
else
   freebusy.indext = 'F'
parse value diagrc(8,'DCP' nextblkadr'.4'),
                                         with rc . . 27 alocblkadr '15'x
if rc ¬= 0 then  error_msg('DCP',rc,sigl)
return
/* Display the results on the screen                                  */
generate_report:
if symbol(header) ¬= 'LIT' then         /* Generate (only one) header */
   do
   say ' '
   say separator
   say header
   say ' '
   drop header
   end
j = 1
freextmax = 0
do maplines = 1 by 1 until j > indext   /* Generate line information  */
   linemap.maplines = ' '
   firstitem = (maplines-1) * 6 + 1     /* Max six minidisks by line  */
   lastitem  = (maplines-1) * 6 + 6
   do j = firstitem to lastitem while j ¬> indext
      if tabext.j > freextmax & freebusy.j = 'F'
                                               then freextmax = tabext.j
linemap.maplines = linemap.maplines||' '
                           ||right(tabext.j,3,'0')||'('||freebusy.j||')'
   end
end
say right(aloc,3,'0') ' ' right(max,3,'0')  ' ' devlabel ' '
                                   right(freextmax,3,'0') '  ' linemap.1
do i = 2 to maplines
   say left(' ',27) linemap.i    /* Additional line of minidisks info */
end
drop tabext. freebusy.
return ''
/* Send error messages                                                */
error_msg: arg comando
say 'Error on command:' comando'. return code:' rc'.' fn
                                                  'Exec line' sigl-1'.'
exit rc
return ''
/* Help data                                                          */
help:
   say ''
   say 'Format:  '  fn
   say ''
   say 'Function:  Maps TDISK extents.'
   say ''
   say 'Notes:     To run this exec a privileged class B, C and E'
   say '           user is required.'
   say '           This exec maps temporary minidisk extents show-'
   say '           ing the biggest area free in each one.'
   say ''
   exit


Albino Soares de Pinho
Senior Software Programmer
Texaco (Brazil)  ) Xephon 1990


