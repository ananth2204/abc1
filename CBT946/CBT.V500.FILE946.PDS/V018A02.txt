 A TSO command processor for VM
This program allows an MVS/370 TSO user to issue CP commands to a host VM
system.  Useful functions - closing the print spool files, attaching and
detaching disks, looking at storage and defining virtual devices - can all be
done without leaving TSO.
INSTALLATION NOTES
1    The program should be run from an authorised library: SYS1.CMDLIB may be
the best choice.  Link it into the library with SETCODE AC(1).
2    The program name must appear in IKJEFT02 in SYS1.LPALIB to allow TSO users
to execute authorised programs.
USAGE NOTES
1    This program should only be executed in an MVS virtual machine running
under VM (see Principles of Operation on the Diagnose command).
2    This program is incompatible with a multi-processing configuration (see
Principles of Operation on the Load Real Address command).
3    Do not prefix commands with 'C': 'XYZQ D PSW' is an example of correct
format.
4    When using the program to link to another user's mini-disk, CP sends the
request for a password to the MVS virtual console.  This is an inconsistency of
CP.  Instead, supply the password on the command line.  PER functions similarly.
ENVIRONMENT NOTES
1    The program was developed and tested on MVS/370 1.3.5 and VM/SP 4.
//REJOB   JOB   TIME=60
//STEP1   EXEC PROC=ASMHCL
//C.SYSIN DD   *
CMND01   CSECT
********** SET UP ************
         SAVE  (14,12)       SAVE REGS OF CALLER
         LR    12,15         GET CURRENT ADDRESS
         USING CMND01,12     ADDRESSABILITY
         LR    8,1           KEEP ADDRESS OF PARM LIST (CPPL)
         GETMAIN R,LV=LDYNAMIC+8192  DSECTS+LEN OF VM RESULT BUFFER
         LTR   15,15         COPE WITH NON ZERO RETURN CODE
         BNZ   STORFAIL
         LR    10,1
         ST    13,4(10)      STORE ADDR OF PREV SAVAREA IN NEW ONE
         ST    10,8(13)      STORE ADDR OF NEW ONE IN PREV ONE
         LR    13,10         LOAD R13 WITH ADDR OF CURRENT SAVAREA
         USING CPPL,8        ADDRESSABILITY TO CPPL
         USING WORKAREA,13   ADDRESSABILITY TO DYNAMIC WRKAREA
********** INIT AND PICKUP THE CP COMMAND ***********
         MVC   CMMD,BLANX
         L     7,CPPLCBUF
         SR    6,6           LOAD UP REG6...
         LH    6,0(0,7)         ...WITH THE LEN OF CP CPMMAND
         LA    2,9(0,0)      ACTUAL COMMANDS START 9 BYTES IN FROM
         AR    7,2           THE STRING ADDRESS (4BYTES OF HEADER +
*                            THE LENGTH OF THE COMMAND PROCESSOR NAME+
*                            A 1 BYTE SPACE) INTO R7
         MVC   CMMD,0(7)     MOVE STRING TO OUTPUT AREA
********** CHANGE LOWER CASE TO UPPER ***********
UPPCASE  TR    CMMD(240),TABLE
********** ISSUE THE CP COMMAND ************
         MODESET KEY=ZERO,MODE=SUP
         MVI   BUFFER,X'40'  REF YOUR STORAGE ENSURE ITS THERE
         LA    2,BUFFER
         A     2,PAGEL
         MVI   0(2),X'40'  REF YOUR STORAGE ENSURE ITS THERE
         A     2,PAGEL
         MVI   0(2),X'40'  REF YOUR STORAGE ENSURE ITS THERE
         A     2,PAGEL
         MVI   0(2),X'40'  REF YOUR STORAGE ENSURE ITS THERE
*                            AVOIDS TRANSLATION SPEC EXCEPTION
         LRA   2,CMMD        RX REGISTER REAL ADDRESS OF THE COMMAND
         LRA   3,BUFFER      RX+1 REGISTER
         L     7,BUFFERL     RY+1 REGISTER PUT BUFFER LEN IN R7
          X     6,SETFLAGS    HIGH ORDR BITS TO 40; RESULTS TO BUFFER
         DC    XL4'83260008' DIAGNOSE
         BC    4,BUFPROB     IF CC IS 1 RESPONSE TOO LARGE FOR BUFFER
         MODESET KEY=NZERO,MODE=PROB
         LTR   6,6        CHECK CP RETURN CODE IS GOOD
         BNZ   CPPROB
********** SCAN BUFFER FOR NL CHARS **********
         LA    2,BUFFER      LOAD R2 WITH START OF BUFFER
         AR    7,2           MAKE R7 THE END ADDR OF MSG RET FROM CP
BACK     LR    3,2           AND COPY IT TO R3
COMPARE  CL1   0(2),X'15'    IS THE CHAR A NL CHAR?
         BE    DOLINE        IF IT IS WRITE IT...
         CR    2,7           WAS THAT THE LAST BYTE??
         BE    RETURN        IF SO OFF WE GO
         A     2,SINGLE      IF NOT ADD 1 TO ADDR...
         B     COMPARE       AND GO LOOK AGAIN
********** WRITE A LINE TO TERMINAL **********
DOLINE   LR    4,3           SAVE BUFF START IN R4
         A     2,SINGLE      POINT PAST THE NL CHAR
         LR    5,2           SAVE REG 2
         SR    2,3           GET LEN IN R 2
         TPUT  (4),(2),ASIS  WRITE THE LINE
         LTR   15,15
         BNZ   TPUTPRB
         LR    2,5           RESTORE R 2
         B     BACK          KEEP GOING
**********  FINISH OFF **************
RETURN   LR    1,13      RELOAD ADDRESS OF GETMAINED AREA
         L     13,4(13)  RELOAD ADDRESS OF PREVIOUS SAVEAREA
         L     0,BUFLEN  TELL FREEMAIN HOW LONG IT IS
         FREEMAIN R,LV=(0),A=(1)
         L     14,12(13) RELOAD REG 14 WITH RETURN ADDRESS
         LM    0,12,20(13)  RESTORE THE OTHER REGISTERS
         BR    14
**********  ERRORS  **************
STORFAIL MVC   BUFFER(80),BLANX
         MVC   BUFFER(80),STORMSG
         B     ERROUT
STORMSG  DC    CL80'GETMAIN FAILED - MORE STORAGE REQUIRED'
*
CPPROB   CVD   6,RCODE
         UNPK  OUTRCDE,RCODE
         OI    OUTRCDE+15,X'F0'
         MVC   BUFFER(80),BLANX
         MVC   BUFFER(80),OUTRCDE    WRITE RETURN CODE
         MVC   BUFFER+16(50),CPMESG
         B     ERROUT
CPMESG   DC    CL50' IS VM RETURN CODE; SEE APPROPRIATE DMKCMF MSG'
*
TPUTPRB  CVD   15,RCODE
         UNPK  OUTRCDE,RCODE
         OI    OUTRCDE+15,X'F0'
         MVC   BUFFER(80),BLANX
         MVC   BUFFER(80),OUTRCDE   WRITE RETURN CODE
         MVC   BUFFER+16(50),TPUTMSG
         B     ERROUT
TPUTMSG  DC    CL50' IS TPUT RETURN CODE IN DECIMAL '
*
BUFPROB  MODESET KEY=NZERO,MODE=PROB
         MVC   BUFFER(80),BLANX
         MVC   BUFFER(80),BUFFMSG
         B     ERROUT
BUFFMSG  DC    CL80'VM RESPONSE IS TOO BIG FOR PROGRAM BUFFER'
ERROUT   TPUT  BUFFER,80
         B     RETURN
********** CONSTANTS *************
          DS    0F
SETFLAGS DC    XL4'40000000'
BLANX    DC    CL80' '
         DC    CL80' '
         DC    CL80' '
         DS    0F
BUFFERL  DC    XL4'00002000' 8192 MAX LEN OF CP RESPONSE BUFFER
BUFLEN   DC    A(LDYNAMIC+8192)
         DS    0D
ONE      DC    XL2'0001'
         DS    0D
SINGLE   DC    XL4'00000001'
         DS    0D
PAGEL    DC    XL4'00000800'
********** TRANSLATE TABLE ************
TABLE    DC    XL16'000102030405060708090A0B0C0D0E0F'
         DC    XL16'101112131415161718191A1B1C1D1E1F'
         DC    XL16'202122232425262728292A2B2C2D2E2F'
         DC    XL16'303132333435363738393A3B3C3D3E3F'
         DC    XL16'404142434445464748494A4B4C4D4E4F'
         DC    XL16'505152535455565758595A5B5C5D5E5F'
         DC    XL16'606162636465666768696A6B6C6D6E6F'
         DC    XL16'707172737475767778797A7B7C7D7E7F'
         DC    XL16'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    XL16'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    XL16'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    XL16'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    XL16'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    XL16'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    XL16'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    XL16'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
********** DSECT FOR CPPL *************
         IKJCPPL
***** DSECT FOR DYNAMIC WORKAREA ******
WORKAREA DSECT
SAVEAREA DS    18F
*            ***********              *
         DS    0D
RCODE    DS    XL8
OUTRCDE  DS    CL16
         DS    0D
CMMD     DS    CL240
CMMDL    EQU   *-CMMD
LDYNAMIC EQU   *-WORKAREA
         DS    0D
BUFFER   DS    CL8192
         END
/*
//L.SYSLMOD DD DSN=RONS.LITTLE.PROGS(XYZQ),DISP=OLD
//L.SYSIN DD   *
  SETCODE      AC(1)
//
Ron Ellis
Systems Programmer
BUPA (UK) ) Xephon 1988











