Tracking references within a file

The UNALL XEDIT macro is (to me) invaluable as a way of
tracking references within a text or program file.  I have it defined
under the PF5 key in my PROFILE XEDIT (ie 'SET PF5
UNALL') and it works as follows:

1	You are looking at an XEDIT display of a file and want to
check for any references to one of the words displayed.

2	Move the cursor under any of the letters of the word; hit
'PF5'.

3	The UNALL macro delimits the word you have indicated and
executes an 'ALL/word/' command - your display shows only
lines which contain the word.

4	Move the cursor up or down the display onto another line,
and hit 'PF5' again.

5	This time the UNALL macro does an 'ALL' without operands,
allowing all lines to be visible, and makes the line you
selected the 'current' line.

6	Select another word, and off you go again.

If you select punctuation or a space, UNALL will always perform
as in 5 above.  This is quite a convenient way of shifting the
display up or down a few lines.

UNALL XEDIT

/*  UNALL - universal ALL
    ---------------------
    Best under a PF key - e.g. 'SET PF5 UNALL'
    If currently a selective display, or if cursor is not under
      a word,
      equivalent to an 'ALL' (with no operands)
      followed by repositioning of the cursor to where it was.
    If not currently a selective display, and cursor is under a word,
      equivalent to an 'ALL' with the operand of that word
      followed by repositioning of the cursor to where it was.
    In this context a word is a sequence of word-type characters
      (alphanumeric or _) delimited by the beginning/end of the line
      or a non-word-type character.
*/
   /* see whether cursor is under a word in the display */
   call find_cursor_word
   /* if cursor not under a word, do an ALL with no operand
                           else do an ALL /the word found/   */
   If word_found = '' then 'ALL'
                      else 'ALL/'word_found'/'
   /* finish up by positioning cursor somewhere useful */
   call all_about_cursor_line
   exit
all_about_cursor_line:
   /* subroutine to choose a relevant cursor position */
   select
      when cursor.7 = -1 then
      do
         'CURSOR FILE'   line.1 column.1
      end
      when cursor.8 = -1 then
      do
         ':' cursor.7 'CURSOR FILE' cursor.7 1
      end
      otherwise
      do
         ':' cursor.7 'CURSOR FILE' cursor.7 cursor.8
      end
   end
   return
find_cursor_word:
/* subroutine to delimit word (if any) under which cursor is sitting */
   word_found =''
   /* obtain anything useful in determining where the cursor is */
   'EXTRACT /CURSOR /COLUMN /DISPLAY /LINE /SELECT'
   if cursor.7 >= 0 then ':'cursor.7 'EXTRACT /CURLINE'
   /* if we are not currently showing a selective display
                         and the cursor is somewhere sensible   */
   if display.1 =  0 & display.2 = 0,
     & select.1 =  0 & select.2  = 0,
     & cursor.7 < 0 & cursor.8 > 0
   then  /* delimit word (if any) under which cursor is sitting */
   do
     cur_line = curline.3
     cur_col  = cursor.8
     if cursor.7 < 1 | legit_char(cur_col) = 0 then return
     do col = cur_col-1 to 1 by -1 while legit_char(col)
     end
     start_col = col + 1
     do col = cur_col+1 to length(cur_line) while legit_char(col)
     end
     word_found = substr(cur_line,start_col,col-start_col)
  end
  return
legit_char: procedure expose cur_line
   */ subroutine used to vet a character as valid with a 'word' */
   parse arg column
   char = substr(cur_line,column,1)
   return datatype(char,'A') | char = '_'

Howard Woods
Programmer
Macro 4 (UK)	) Xephon 1989

