Recovering erased files

This program can restore a file after it has been erased (ERASE
or DISCARD) and before the user has logged off the system.
Files can be recovered only if they were on a 3380 DASD.
BLKSIZEs of 1K, 2K and 4K can be used, but the Shared File
System is not supported.  If the file was erased and then any
other file was copied or erased from this disk, the recovery
procedure will fail.

Each mini-disk has two file directories.  I call them the 'active'
one and the 'back-up' directory.  There is also a directory in
CMS storage for any accessed mini-disk (at least a part of it).
The 'back-up' directory is the same as the 'active' one except for
the last change, which will be written during LOGOFF, or
when the next change is made for this disk.  The directory
entries always start on cylinder 0, header 0, record 4 for the
first directory, and on cylinder 0, header 0, record 5 for the
second.  Cylinder 0, header 0, record 6 and cylinder 0, header
0, record 7, respectively, contain information about other
directory entries for this mini-disk if the disk directory is
greater than the block size of the mini-disk.  If not, the first
word in record 6 and record 7 contains X'Fxxxxxxx'.  If anyone
issues an ERASE command for any file, the entry for this file
in the directory in storage will be deleted and the changed
directory will be written to the mini-disk - as the new 'active'
directory.  Because the directories on the disk will have been
swapped, and to make the program easy, I let it read both
directories and search for the erased file.  The first entry in the
directory in storage will be replaced by the entry for the erased
file and the file will be punched to the virtual card reader.
There is a problem if the program aborts during execution
because the directory in storage is damaged.  If the file is
written to the disk, the message 'file system error' could occur.
In this case, the command '#CP IPL CMS' must be issued.  I
have tested this program many, many times, and I have had no
problems with it.  However:

%       I recommend that this program is run first in a test
       environment, before using it for an important mini-disk.

%      To prevent any 'file system errors' this program should not
       be run in a virtual machine that has R/W access to the
       mini-disk to be restored.  If it is possible, disconnect this
       user, log-on with any other user-id, link to the mini-disk
       R/O and then try to run the recovery program.  If the
       program fails, it is not possible to write the destroyed
       directory to the disk and no other files can be affected.

The algorithm and all other information necessary to run this
program can be found in the source code.

This program was tested on VM/SP Release 6, SL 604.

For VM/SP Release 5, the CMSSTOR macro must be replaced
by DMSFREE/DMSFRET:

L    R4,RECSIZE
CMSSTOR OBTAIN,BYTES=(R4),MSG=NO,ERROR=address

must be replaced by:

L    R0,RECSIZE       load the record size
SRL  R0,3     divide by 8 (number of DW in R0)
LR   R1,R0    minimum = maximum
DMSFREE DWORDS=(0),MIN=(1),ERR=address
L    R4,RECSIZE

and

L    R5,RECSIZE
L    R4,FREADR
CMSSTORE RELEASE,BYTES=(R5),ADDR=(R4),MSG=NO,ERROR=address

must be replaced by:

L    R0,RECSIZE
SRL  R0,3
L    R1,FREADR
DMSFRET DWORDS=(0),LOC=(1),ERR=address

When using DMSFREE/DMSFRET, general registers 0 and 1
must be specified otherwise errors can occur.  (See CMS for
System Programming (Release 5) for more information.)  All
the other macros used are compatible for VM Releases 5 or 6.

To assemble this source code use:

GLOBAL MACLIB CMSLIB DMSSP
ASSEMBLE RECOVER
LOAD RECOVER
GENMOD RECOVER

RECOVER SOURCE

         TITLE 'Recovery of an erased file'
 *     Function.: This procedure can recover an erased file.        *
 *                It can be used only if the user has not logged    *
 *                off from the system after ERASE.                  *
 *                This procedure will fail, if any changes have     *
 *                been made on the MDISK after the ERASE for the    *
 *                specified file. The MDISK, which contained the    *
 *                specified file must be defined on a 3380 DASD.    *
 *     Operating system:                                            *
 *     VM/SP Release 6                                              *
 *     after an easy change VM/SP Release 5 also                    *
 *     Pgm-Call.: RECOVER fn ft fm                                  *
 *                    for execution or                              *
 *                RECOVER ?                                         *
 *                    for help information                          *
 *     Remarks (such as load point, reentrant or not, and so on)    *
 *     1. If any error occurs, the message will be read from        *
 *        the file RECOVER EMESSAGE * and displayed on the screen.  *
 *        If this file is not available on any accessed MDISK,      *
 *        the return code is the message number from this file.     *
 *     2. The following files are neccessary for running this       *
 *        program without errors:                                   *
 *        RECOVER MODULE   - executable code                        *
 *        RECOVER EHELP    - help information                       *
 *        RECOVER EMESSAGE - message repository                     *
 *     Algorithm:                                                   *
 *     After the check of parameters in the command line, storage   *
 *     will be allocated (it needs 2 banks, 4096 bytes per bank).   *
 *     If there was enough storage available, then the cylinder 0,  *
 *     header 0, record 6 is read (directory allocation map for     *
 *     the 1st directory on disk). The program searches for the     *
 *     given file in all records defined in the map. If the entry   *
 *     could not be found, it will read record 7 (directory         *
 *     allocation map for the 2nd directory on disk) and the        *
 *     search is repeated. If the file could not be found, it can   *
 *     not be recovered by this program.                            *
 *     If the FST entry for the given file was found in any         *
 *     directory, the first entry in the active disk directory      *
 *     in storage will be replaced by the found entry (the 'old'    *
 *     entry will be saved, of course). Then the 'erased' file      *
 *     is available. It will be punched to the virtual card reader   *
 *     of the caller via DISK DUMP. Then the entry will be replaced *
 *     once more, this time by the 'old' entry. The storage will be *
 *     released and the recovered file is available (in reader).     *
 *     Return codes:                                                *
 *     There are defined return codes from 0 to 10.                 *
 *     The meaning of them is described in the file                 *
 *     RECOVER EMESSAGE.                                            *
          EJECT
          MACRO
 &NAME    SUBRT &EXIT                   subroutine call (internal)
          CNOP  0,4
 &NAME    ST    R14,*+8
          B     *+14
          DC    F'0'
 &EXIT    L     R14,*-4
          BR    R14
          MEND                          end of macro
          EJECT
 *      C S E C T     S T A R T :                                   *
          PRINT NOGEN
 RECOVER  CSECT                         begin of program
          STM   R14,R12,12(R13)         save register
          BALR  R12,0                   establish addressability
          USING *,R12                   for GPR 12
          ST    R13,RECOVER1            save GPR 13
          B     MNT0000
 RECOVER1 DC    F'0'
          DC    C'RECOVER (C) Comparex Ltd.'
          DC    C'written by Peter Slowikowski'
          DC    C'26Oct1989'
 *   Main program: check the parameters given in the command line   *
          SPACE 1
 MNT0000  EQU   *
          LR    R2,R1                   address of parm's into GPR 2
          L     R1,=A(VMFCLEAR)         clear screen
          SVC   202
          DC    AL4(0)
          CLC   0(8,R2),=CL8'RECOVER '  called from CMS ?
          BNE   MNT9000                 no, error
          CLC   8(8,R2),KXFF            any parameters ?
          BE    MNT9000                 no, error
          CLI   8(R2),C'?'              help call ?
          BNE   MNT0100                 no, continue ...
          BAL   R14,HLP                 call help subroutine
          B     MNT9999                 ... and terminate
 MNT0100  EQU   *
          L     R3,=A(FILETBL)          load address of test table
          TRT   8(8,R2),0(R3)           are the characters valid ?
          BNZ   MNT9010                 no, file name invalid
          TRT   16(8,R2),0(R3)          repeat it for file type
          BNZ   MNT9010
          TRT   24(2,R2),0(R3)          ... and file mode
          BNZ   MNT9010
          MVC   INAME(8),8(R2)          get the fn, ft and fm
          MVC   ITYPE(8),16(R2)
          MVC   IMODE(2),24(R2)
          CLC   32(8,R2),KXFF           another parameter ?
          BNE   MNT9000                 yes, this is an error
          LA    R2,IOFF                 execute: SET IMSG OFF
          LA    R3,IOFFL                load length of the command
          DC    X'83',X'23',X'0008'     issue diagnose x'8'
          WRTERM 'Recover Version 1.1',19
          WRTERM '(C) COMPAREX Ltd.',17
          BAL   R14,WRK                 do the work
          CLI   WRKCTL,X'00'            something has failed ?
          BNE   MNT9020                 yes, error
          B     MNT9999                 branch to end-of-job label
 MNT9000  EQU   *
          L     R15,=F'1'               parameter list error
          B     MNT9500
 MNT9010  EQU   *
          L     R15,=F'2'               invalid fn, ft or fm
          B     MNT9500

This article will be concluded next month when we shall publish the
rest of the program to recover ERASED files.

Peter Slowikowski
System Software Support
Comparex GmbH (West Germany)                       ) Comparex GmbH 1990

