RSCS query EXEC

The VM/RSCS 'Query System' command provides a listing of
all links that VM/RSCS has access to.  If a site has a few links,
then the listing fits on a single screen.  But if a site has many
links the listing is long, and will span multiple screens.  Also
the listing uses a variable format, so the listing's fields do not
line up. Because of the listing's format, looking for several
links that are out of service can be tedious at best.

Before RQ EXEC was written it was necessary to:

1      Enter SMSG RSCS QUERY SYSTEM.

2      Wade through many screens of the listing looking for any
      links that are  NOT CONNECTED, without having the
      capability of scrolling.

After RQ EXEC was written all that is necessary is:

1      Enter 'RQ'.

2      After several seconds, a fullscreen is displayed showing
      the RSCS link names, and status.  The links are presented
      in groups sorted by status, and link name.  The NOT
      CONNECTED group is presented first, so any problems in
      the network can be readily seen on the first screen.  The
      CONNECTED group then follows.

      Eighty links can be displayed on a Model 2 terminal, more
      on larger terminal types!  Multiple screens are created to
      handle every link that is defined to RSCS.  In addition the
      link's LU can be displayed in the status field, by pressing PF1.


RQ's PF KEY USAGE

PF1      Toggles between link's status or link's VTAM LU/non-
            SNA line address.
PF3      Return to CMS (Caller).
PF7      Display previous screen.
PF8      Display next screen.


RQ's COLOUR/INTENSITY

Pink/High-intensity = INTREQ - Printer is off/out of paper etc.

Green/Low-intensity = CONNECTED - Normal, everything is OK, or
                  = RELEASED - Normal, indicates that the RSCS
line driver is operational, but the device 'printer' is released to
another application, and will be reacquired when the device is
needed.

Red/High-intensity = Anything else - link is down!  Check
VTAM or non-SNA links to this target link!


RQ's PREREQUISITES

o      VM Release 5, and above.  (Required for CMS Windows.)

o      VM IPF (required for WAKEUP).

o      VM RSCS (currently our RSCS system level is Version 2
      Release 2.00).


RQ EXEC

/*  RQ       -- A full screen "RSCS Link Display Monitor"           */
/*  PURPOSE:    RQ stands for the "RSCS QUERY SYSTEM" command       */
/*              that it replaces.  Under the cover of WAKEUP,       */
/*              it issues the "RSCS QUERY SYSTEM" command,          */
/*              gets back RSCS's link report, and extracts the      */
/*              LINK name, LU name, and status.  These are then     */
/*              presented in LINK name/status format, on 1-n        */
/*              panels depending on the number of LINKs you have.   */
/*              Pressing PF1 alternates between status/LU name.     */
/*              Color/Intensity meanings:                           */
/*                  Green/Normal = LINK is OK.                      */
/*                  Pink /High   = LINK is requires attention.      */
/*                  Red  /High   = LINK is out of service.          */
/*                                                                  */
/*  DEPENDENCIES:  VM Release 5(CMS WINDOWS), VM/IPF(WAKEUP),       */
/*                 and VM/RSCS.                                     */
/*                                                                  */
/*  RETURN CODES:  0 = Normal Exit.                                 */
 address command
 call get_rscs;
 call display_rscs;
 exit 0
/*   S U B R O U T I N E S   A N D   F U N C T I O N S   *
 *       Display the RSCS Status Report.
 *       Phase 1.  Get the RSCS link data.
 *       Phase 2.  Create a virtual screen, and virtual window based
 *                 on Physical device type.
 *       Phase 3.  Display/Process a full screen.                    */
display_rscs: procedure
 *  Phase D1  *
/*  Save off current terminal status before using FULLSCREEN CMS */
 settings = translate(DIAGRC(8,'Q TERM'),x2c(40),x2c(15))
                                                       /* NL > Space */
 v_term = left(word(settings,find(settings," BRKKEY ")+1),4)
 call dr_init_variables
/*  Phase D2  */
 "DEFINE VSCREEN RSCSSCN"
                         dlength dwidth "2 2 ( TYPE PROTECT HIGH T USER"
 "DEFINE WINDOW RSCSWIN" dlength dwidth "1 1 ( FIXED NOBORDER POP USER"
 "SHOW WINDOW RSCSWIN ON RSCSSCN"
 "MAXIMIZE WINDOW RSCSWIN"
/*  Phase D3  */
 do forever
    call dr_build_screen;
    "SET FULLSCREEN ON"
    "CURSOR VSCREEN RSCSSCN -1 80 (RESERVED"
    "WAITREAD VSCREEN RSCSSCN"
    if waitread.1 = "PFKEY  3" then leave
    call dr_process_screen
 end
 "DROP WINDOW RSCSWIN"
 "SET FULLSCREEN OFF"
 "DELETE WINDOW RSCSWIN"
 "DELETE VSCREEN RSCSSCN"
 "SET CMSTYPE RT"
/*  Restore message status to previous value. */
 "CP TERM BRKKEY" v_term
return
dr_process_screen: /* Process PF Keys... */
 select
    when waitread.1 = "PFKEY  1" then
         if slu_type = "STATUS" then
            slu_type = "LU"
         else
            slu_type = "STATUS"
    when waitread.1 = "PFKEY  7" then do
         page_no = page_no - 1
         if  page_no < 1 then
             page_no = 1
    end
    when waitread.1 = "PFKEY  8" then do
         page_no = page_no + 1
         if  page_no > page_max then
             page_no = page_max
    end
    otherwise nop
 end
return
dr_build_screen:     /* Build up Heading, the fields, and the trailer */
 "CLEAR VSCREEN RSCSSCN"
 heading = "RSCS Status Monitor"
 hdate   = "Date " || date(usa)
 htime   = "Time " || time()
 "WRITE VSCREEN RSCSSCN 1  1" length(heading) "(RESERVED DATA" heading
 "WRITE VSCREEN RSCSSCN 1 50" length(hdate)   "(RESERVED DATA" hdate
 "WRITE VSCREEN RSCSSCN 1 66" length(htime)   "(RESERVED DATA" htime
 fline = 1
 fcolumn = 1
 node_ctr = (((page_no - 1) * line_max)) * 4 + 1
 do i = 1 to line_max * 4
 if node_ctr > node_count then leave
    if slu_type = "STATUS" then
       fmessage = left(node.node_ctr,9),
       ||         left(stat.node_ctr,8)
    else
       fmessage = left(node.node_ctr,9),
       ||         left(lu.node_ctr,8)
    "WRITE VSCREEN RSCSSCN" fline fcolumn length(fmessage)+1 ,
    "(" fattr.node_ctr "FIELD" fmessage
    if fcolumn > 60 then do
       fline   = fline + 1
       fcolumn = 1
    end
    else
       fcolumn = fcolumn + 20
    node_ctr = node_ctr + 1
 end
 trailer = "Page " || right(page_no,2,"0") ,
 ||        " of "  || right(page_max,2,"0")
 if slu_type = "STATUS" then
    trailer = trailer || "  PF1=Show LU Names"
 else
    trailer = trailer || "  PF1=Show Status  "
 trailer = trailer || "  PF3=Exit"
 if page_max > 1 then
    select
       when      page_no = 1 then trailer = trailer,
                 ||   "  PF8=Page Forward                   "
       when      page_no = page_max then trailer = trailer,
                 ||   "  PF7=Page Backward                  "
       otherwise trailer = trailer,
                 ||   "  PF7=Page Backward  PF8=Page Forward"
    end

 "WRITE VSCREEN RSCSSCN -1 1" length(trailer) "(RESERVED DATA" trailer
 return
dr_init_variables:
 "SET CMSTYPE HT"
 queue_base = queued()
 "EXECIO * DISKR RQWORKFL SORTED A 1 (FIFO"
 "ERASE RQWORKFL SORTED A"
 node_count = queued()-queue_base
 fattr. = ""
 node.  = ""
 stat.  = ""
 lu.    = ""
 do i = 1 to node_count
    parse pull node.i "," stat.i "," lu.i
    node.i = right(node.i,9)
    if stat.i = "CONNECT" | stat.i = "RELEASED" then
       fattr.i = "NOHIGH GREEN"
    else
       if stat.i = "INTREQ" then
          fattr.i = "HIGH PINK"
       else
          fattr.i = "HIGH RED"
 end
 "Q DISPLAY (STACK LIFO"
 parse upper pull . dlength dwidth .
 line_max =  dlength - 4
 page_no = 1          /* Bring up First Page */
 page_max = ((node_count-1) % 4) % line_max + 1
 slu_type = "STATUS"  /* Bring up Status Display First */
 return
/*       Capture the RSCS Status Report and Process it.
 *       Phase 1.  Get the RSCS status report.
 *       Phase 2.  Extract Link Node Name, Link Status,
 *                 and Link's LU Name/LINE Number.
 *       Phase 3.  Save Link data, and sort by Link Node Name.
 */
 get_rscs: procedure
/*  Phase G1  */
/*  Save off current message status before using IUCV */
 settings = translate(DIAGRC(8,'Q SET'),x2c(40),x2c(15))
                                                        /* NL > Space */
 v_msg  = left(word(settings,find(settings," MSG ")+1),4)
/* Determine which RSCS is hanging around, so we can talk to it.  */
 "ID (STACK LIFO"
 parse upper pull . . . . rscs_userid .
 timer_expired         = 2    /* IUCV Return Codes */
 wake_iucv_messages    = 5    /* IUCV Return Codes */
 "SET CMSTYPE HT"             /* Supress CMS output */
 "WAKEUP (NOEXT"             /* To prevent DEBUG from becoming active */
 prime_it = 0
 received_at_least_one_msg = 0
 iline. = ""   /* Initialize Input Links Stem */
 i      = 0    /* Initialize Normal Status Stem Counter */
 do forever
    if prime_it = 0 then do
       "WAKEUP +0 (IUCVMSG"          /* Prepare and capture all MSG's */
       "CP SMSG" rscs_userid "Q SYS" /* from this RSCS System Query...*/
        prime_it = 1
    end
    "WAKEUP +00:00:10 (IUCVMSG"
    if  rc = timer_expired then
        if received_at_least_one_msg = 1 then leave
        else do
           "CP SLEEP 1 SEC"
           iterate
        end
    if  rc ¬= wake_iucv_messages then do
        say "IUCV Preparation Loop - Unknown rc code =" rc
        exit 888
    end
    received_at_least_one_msg = 1
    /*  Phase G2  */
     parse upper pull reply                   /* Extract following:   */
     if word(reply,3) ¬= "DMTCMQ657I" then do /*                      */
        i = i + 1                             /*                      */
        iline.i = left(word(reply,5),9) ,     /* 1.  Link's Node Name */
        ||  "," || word(reply,6) || ","       /* 2.  Link's Status    */
        if  find(reply,"LUNAME") > 0 then     /* 3.  Link's LU Name   */
            iline.i = iline.i || ,            /*                      */
            word(reply,find(reply,"LUNAME")+1)/*       - OR -         */
        else                                  /*                      */
        if  find(reply,"LINE") > 0 then       /* 3. Link's LINE #     */
            iline.i = iline.i || "LINE " || , /*                      */
            word(reply,find(reply,"LINE")+1)  /*       - OR -         */
        else                                  /*                      */
            iline.i = iline.i || "*UNKNOWN"   /* 3. Unknown Net Object*/
        /***  Sort by Status ***/
        if word(reply,6) = "CONNECT" | word(reply,6) = "RELEASED" then
           iline.i = "C" || iline.i           /* Link is in CONNECT/ */
        else                                  /* RELEASED Status.    */
           if word(reply,6) = "INTREQ" then   /*                     */
              iline.i = "B" || iline.i        /* Link is INTREQ Stat */
           else                               /*                     */
              iline.i = "A" || iline.i        /* Link is Error Status*/
     end
 end
 "WAKEUP RESET"               /* Reset the IUCV Interface. */
/*  Phase G3  */
/*  Restore message status to previous value. */
 "CP SET MSG  " v_msg
 "ERASE RQWORKFL UNSORTED A"
 "ERASE RQWORKFL SORTED A"
 "EXECIO" i "DISKW RQWORKFL UNSORTED A 1 F 30 (STEM ILINE."
 push "1 9"
 "SORT RQWORKFL UNSORTED A RQWORKFL SORTED A"
 "ERASE RQWORKFL UNSORTED A"
 "SET CMSTYPE RT"             /* Restore CMS output */
return

Donald B Casaleggio
Senior Systems Programmer
East Bay Municipal Utility District (USA)            c Donald B Casaleggio 1991
