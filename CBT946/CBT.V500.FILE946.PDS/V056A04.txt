PROP routing routine (continued)

This month we continue the article that will allow a CMS user
to add or delete himself from an 'alternative operator' list and
receive messages from PROP.

* GET NEXT PVC ENTRY AND LOOP                                         *
OPSOF80  EQU   *                       BOTTOM OF LOOP
         ICM   R10,B'1111',PVCNEXTA    BUMP TO NEXT ENTRY
         BZ    OPSOF90                 NO MORE ENTRIES
         CLI   PVCCODE,PVCOPTST        IS THIS START OF OPTIONS?
         BE    OPSOF90                 YES, NO MORE ENTRIES
         B     OPSOF35                 NO, PROCESS NEXT ENTRY
OPSOF90  EQU   *                       OPSOF EXIT
*                                      IS GVM QUEUE NOW EMPTY?
         XC    QHCURR,QHCURR           START AT BEGINNING
         QMNT  LOC,(R7),0,EMPTY=OPSOF92,LOAD=@QLOC,MF=(E,QMLIST)
         B     OPSOF99
OPSOF92  EQU   *                       QUEUE EMPTY, DROP USER
         L     R7,USERQ
         QMNT  GET,(R7),POS=(R9),LOAD=@QGET,MF=(E,QMLIST)
         QMNT  FRET,*,(R9),LOAD=@QFRET,MF=(E,QMLIST)    AND FREE STG
         XR    R7,R7                   USED AS A FLAG
OPSOF99  EQU   *
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=122,FMT=2,LINE=*,                                   X
               SUB=(CHARA,(OPUSER,8)),                                 X
               MF=(E,MSGLIST)
         LTR   R7,R7                   ONLY ZERO IF DELIBERATELY SET
         BZ    RETURN0                 DON'T DISPLAY ANYTHING
         B     OPSL00                  DISPLAY ALTOPS FOR THIS USER
         EJECT
* SMSPOS LIST - LIST ALTERNATE OPERATORS AND USERID MASKS             *
OPSLIST  EQU   *
         L     R10,@PVCTOPR            GET START OF OPERANDS
         L     R1,PVCTTOKA             GET TOKENIZED GVM NAME
         MVC   CPCMDFRM(CPCMDLEN),BLANKS    CLEAR HEADER AREA
         MVC   CPCMDFRM,0(R1)          BUILD CP CMD BUFFER
         OC    CPCMDFRM,BLANKS         TRANS TO UPPER CASE
         LA    R1,CPCMDFRM
         L     R2,PVCETOKL             GET LENGTH OF NAME
         STM   R1,R2,PATTPARM          SAVE FOR PATTERN
         CLI   OPUSER,C'*'             '*' MEANS ALL USERS
         BNE   OPSLISTA                NOT SPECIFIED, SKIP THIS
         MVI   OPUSER,C' '             MAKE BLANK
OPSLISTA EQU   *
         CLI   OPUSER,C' '             WAS USERID PASSED?
         BNE   OPSL00                  YES, DO ONLY 1
         L     R7,USERQ                POINT TO USER QUEUE HEAD
         XC    QHCURR,QHCURR           START AT BEGINNING
         QMNT  LOC,(R7),0,0,0,MF=(L,QMLIST) SET UP FOR REPEATED LOCS
         B     OPSL10
OPSL00   EQU   *                       SET UP FOR 1 LOC ONLY
         LA    R10,DFLTPVC             GET START OF OPERANDS
         L     R1,PVCTTOKA             GET TOKENIZED GVM NAME
         MVC   CPCMDFRM(CPCMDLEN),BLANKS    CLEAR HEADER AREA
         MVC   CPCMDFRM,0(R1)          BUILD CP CMD BUFFER
         OC    CPCMDFRM,BLANKS         TRANS TO UPPER CASE
         LA    R1,CPCMDFRM
         L     R2,PVCETOKL             GET LENGTH OF NAME
         STM   R1,R2,PATTPARM          SAVE FOR PATTERN
         L     R7,USERQ                POINT TO USER QUEUE HEAD
         XC    QHCURR,QHCURR           POSITION AT BEGINNING OF QUEUE
         QMNT  LOC,(R7),OPUSER,L'OPUSER,UQEUSER-UQENTRY,EQ,            X
               MF=(L,QMLIST)
OPSL10   EQU   *
         L     R7,USERQ
         QMNT  LOC,(R7),*,*,*,EMPTY=OPSL50,ERROR=OPSL90,               X
               NFOUND=OPSL60,LOAD=@QLOC,                               X
               MF=(E,QMLIST)           GET USER QUEUE ENTRY
         L     R9,QPELMT-QPLIST(,R1)   GET QENTRY BASE
         LA    R7,UQEHDR               LOAD VERTICAL QHEAD BASE
*                                      DISPLAY USER
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=123,FMT=1,LINE=*,                                   X
               SUB=(CHARA,(UQEUSER,8)),                                X
               MF=(E,MSGLIST)
         XC    QHCURR,QHCURR           START AT BEGINNING
OPSL20   EQU   *                       SPIN THROUGH VERTICAL QUEUE
         QMNT  LOC,(R7),ERROR=OPSL25,LOAD=@QLOC,                       X
               MF=(E,QMLIST2)          GET GVM QUEUE ENTRY
         L     R8,QPELMT-QPLIST(,R1)   GET GVM QENTRY BASE
         CLI   CPCMDFRM,C'*'           LIST ALL?
         BE    OPSL22                  YES, SKIP THIS
         LA    R4,XQEUSER              GET ADDRESS OF STRING
         L     R5,XQEULEN              GET LENGTH OF STRING
         STM   R4,R5,PATTPARM+8        PARMS FOR PATTERN MATCH RTN
         LA    R1,PATTPARM             R1 --> PARMS
         L     R15,=V(PATTERN)
         BALR  R14,R15                 CALL PATTERN MATCHING ROUTINE
         BNE   OPSL20                  NOT A MATCH
OPSL22   EQU   *                       DISPLAY CONTENTS
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=123,FMT=2,LINE=*,                                   X
               SUB=(CHARA,(XQEUSER,8)),                                X
               MF=(E,MSGLIST)
         B     OPSL20                  KEEP LOOPING
OPSL25   EQU   *
         CLI   OPUSER,C' '             WAS USERID PASSED?
         BNE   OPSL90                  YES, WE ARE DONE
         B     OPSL10
OPSL50   EQU   *                       QUEUE IS EMPTY
*                                      DISPLAY QUEUE EMPTY MESSAGE
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=120,FMT=1,LINE=*,                                   X
               MF=(E,MSGLIST)
         B     OPSL90
OPSL60   EQU   *                       USERID NOT FOUND
         CLI   OPUSER,C' '             WAS USERID PASSED?
         BE    OPSL90                  NO, SKIP THIS
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=121,FMT=1,LINE=*,                                   X
               SUB=(CHARA,(OPUSER,8)),                                 X
               MF=(E,MSGLIST)
         B     OPSL90                  YES, WE ARE DONE
OPSL90   EQU   *                       EXIT
         B     RETURN0
         EJECT
* SMSPOS SEND - SEND MESSAGE AS IF FROM SPECIFIC USER                 *
OPSSEND  EQU   *
         L     R10,@PVCTOPR            GET START OF OPERANDS
         L     R1,PVCTTOKA             GET TOKENIZED GVM NAME
         MVC   CPCMDFRM(CPCMDLEN),BLANKS    CLEAR HEADER AREA
         MVC   CPCMDFRM,0(R1)          BUILD CP CMD BUFFER
         OC    CPCMDFRM,BLANKS         TRANS TO UPPER CASE
         LA    R1,CPCMDFRM
         L     R2,PVCETOKL             GET LENGTH OF NAME
         STM   R1,R2,PATTPARM          SAVE FOR PATTERN
         L     R10,PVCNEXTA            GET NEXT TOKEN (TRUST PARSER)
*                                         SHOULD BE GVM NAME
         L     R1,PVCTTOKA             GET TOKENIZED SENDER NAME
         MVC   CPCMDNOD,0(R1)          SENDER NAME GOES IN NODE NAME
         OC    CPCMDNOD,BLANKS         TRANS TO UPPER CASE
         MVC   CPCMDSEP,=CL2': '       INSERT SEPARATOR CHARACTERS
         L     R10,PVCNEXTA            3RD PARM IS MESSAGE (TRUST)
         LM    R1,R2,PVCETOKA          GET MSG ADDR AND LEN
         BCTR  R2,0                    MACHINE LENGTH
         EX    R2,OPSSMVC              MESSAGE TO CPCMD BUFFER
         LA    R6,CPCMDLEN+1(,R2)      LEN OF CP BUFFER SO FAR
         ST    R6,CPCMDHLN             SAVE FOR LATER
         L     R1,MSGCNTI              GET CURRENT MESSAGE COUNT
         LA    R1,1(,R1)               BUMP BY 1
         ST    R1,MSGCNTI              UPDATE INBOUND MESSAGE COUNT
         L     R7,USERQ                SPIN THROUGH USER QUEUE
         XC    QHCURR,QHCURR           START AT BEGINNING
OPSSE10  EQU   *
         L     R7,USERQ                JUST TO BE SURE
         QMNT  LOC,(R7),ERROR=OPSSE90,LOAD=@QLOC,MF=(E,QMLIST)
         L     R9,QPELMT-QPLIST(,R1)   GET USER QENTRY BASE
         CLC   CPCMDFRM,UQEUSER        ARE FROM/TO USERIDS THE SAME?
         BE    OPSSE10                 YES, IGNORE THIS USER SO WE
*                                         DON'T HAVE CLOSED LOOP
         L     R2,UQEULEN              GET LENGTH OF USERID
         LA    R3,L'CPCMDTXT+1(,R2)    R3 HAS LEN OF USER PLUS COMMAND
         LA    R4,CPCMDFRM             R4--> FIXED PART OF BUFFER
         SR    R4,R3                   BACK UP TO MAKE ROOM FOR PREFIX
         ST    R4,DIAGPARM             SAVE POINTER TO CMDTXT
         A     R3,CPCMDHLN             THIS IS TOTAL LENGTH
         ICM   R3,B'1000',=X'40'       INDICATE WE WANT REPLY
         ST    R3,DIAGPARM+8
         MVC   0(L'CPCMDTXT,R4),CPCMDTXT MOVE IN COMMAND TXT
         LA    R4,L'CPCMDTXT(,R4)      BUMP FOR USERID
         BCTR  R2,0                    MACHINE LENGTH OF USERID
         EX    R2,OPSSUMVC             MOVE USERID TO BUFFER
         LA    R4,1(R2,R4)             BUMP PAST USERID
         MVI   0(R4),C' '              AESTHETICS
         LA    R7,UQEHDR               POINT TO GVM Q FOR THIS USER
         XC    QHCURR,QHCURR           START AT BEGINNING
OPSSE20  EQU   *
         QMNT  LOC,(R7),ERROR=OPSSE10,LOAD=@QLOC,MF=(E,QMLIST)
         L     R8,QPELMT-QPLIST(,R1)   GET GVM QENTRY BASE
         LA    R4,XQEUSER              GET ADDRESS OF STRING
         L     R5,XQEULEN              GET LENGTH OF STRING
         STM   R4,R5,PATTPARM+8        PARMS FOR PATTERN MATCH RTN
         LA    R1,PATTPARM             R1 --> PARMS
         L     R15,=V(PATTERN)
         BALR  R14,R15                 CALL PATTERN MATCHING ROUTINE
         BNE   OPSSE20                 NOT A MATCH
         LM    R3,R6,DIAGPARM          LOAD REGS FOR DIAG
         DIAG  R3,R5,8                 ISSUE CP MSGNOH COMMAND
         L     R1,MSGCNTO
         LA    R1,1(,R1)
         ST    R1,MSGCNTO              BUMP OUTBOUND MESSAGE COUNT
         B     OPSSE10                 DON'T SEND MESSAGE 2X TO = USR
OPSSE90  EQU   *
         B     RETURN0
OPSSMVC  MVC   CPCMDMSG(0),0(R1)
OPSSUMVC MVC   0(0,R4),UQEUSER         WHO WE WILL SEND MESSAGE TO
         EJECT
* SMSPOS ROUTE - SEND MESSAGE TO ALL ALTERNATE OPERATORS              *
OPSROUTE EQU   *
         MVC   CPCMDFRM(CPCMDLEN),BLANKS    CLEAR HEADER AREA
         L     R10,@PVCTOPR            GET START OF OPERANDS
         LM    R1,R2,PVCETOKA          GET MSG ADDR AND LEN
         BCTR  R2,0                    MACHINE LENGTH
         EX    R2,OPSRMVC              MESSAGE TO CPCMD BUFFER
         LA    R6,1(,R2)               LEN OF CP BUFFER SO FAR
         ST    R6,CPCMDHLN             SAVE FOR LATER
         L     R1,MSGCNTI              GET CURRENT MESSAGE COUNT
         LA    R1,1(,R1)               BUMP BY 1
         ST    R1,MSGCNTI              UPDATE INBOUND MESSAGE COUNT
         L     R7,USERQ                SPIN THROUGH USER QUEUE
         XC    QHCURR,QHCURR           START AT BEGINNING
OPSR10   EQU   *
         L     R7,USERQ                JUST TO BE SURE
         QMNT  LOC,(R7),ERROR=OPSR90,LOAD=@QLOC,MF=(E,QMLIST)
         L     R9,QPELMT-QPLIST(,R1)   GET USER QENTRY BASE
         L     R2,UQEULEN              GET LENGTH OF USERID
         LA    R3,L'CPCMDTXT+1(,R2)    R3 HAS LEN OF USER PLUS COMMAND
         LA    R4,CPCMDMSG             R4--> FIXED PART OF BUFFER
         SR    R4,R3                   BACK UP TO MAKE ROOM FOR PREFIX
         ST    R4,DIAGPARM             SAVE POINTER TO CMDTXT
         A     R3,CPCMDHLN             THIS IS TOTAL LENGTH
         ICM   R3,B'1000',=X'40'       INDICATE WE WANT REPLY
         ST    R3,DIAGPARM+8
         MVC   0(L'CPCMDTXT,R4),CPCMDTXT MOVE IN COMMAND TXT
         LA    R4,L'CPCMDTXT(,R4)      BUMP FOR USERID
         BCTR  R2,0                    MACHINE LENGTH OF USERID
         EX    R2,OPSSUMVC             MOVE USERID TO BUFFER
         LA    R4,1(R2,R4)             BUMP PAST USERID
         MVI   0(R4),C' '              AESTHETICS
         LM    R3,R6,DIAGPARM          LOAD REGS FOR DIAG
         DIAG  R3,R5,8                 ISSUE CP MSGNOH COMMAND
         L     R1,MSGCNTO
         LA    R1,1(,R1)
         ST    R1,MSGCNTO              BUMP OUTBOUND MESSAGE COUNT
         B     OPSR10                  DON'T SEND MESSAGE 2X TO = USR
OPSR90   EQU   *
         B     RETURN0
OPSRMVC  MVC   CPCMDMSG(0),0(R1)
OPSRUMVC MVC   0(0,R4),UQEUSER         WHO WE WILL SEND MESSAGE TO
         EJECT
* SMSPOS CLEAR - REMOVE ALL ALTERNATE OPERATORS                       *
OPSCLR   EQU   *
         L     R7,USERQ
         XC    QHCURR,QHCURR           START AT BEGINNING
OPSCLR10 EQU   *
         L     R7,USERQ
         QMNT  LOC,(R7),LOAD=@QLOC,ERROR=OPSCLR90,MF=(E,QMLIST)
         L     R9,QPELMT-QPLIST(,R1)   LOAD USER QUEUE BASE
         LA    R7,UQEHDR               POINT TO GVM QUEUE
         QMNT  PURGE,(R7),LOAD=@QPURGE,MF=(E,QMLIST)
         B     OPSCLR10
OPSCLR90 EQU   *
         L     R7,USERQ
         QMNT  PURGE,LOAD=@QPURGE,(R7),MF=(E,QMLIST)
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=129,FMT=1,LINE=*,                                   X
               MF=(E,MSGLIST)
         B     RETURN0
         EJECT
* ERROR RETURNS                                                       *
ERR000   EQU   *                       NOT PASSED OPSDATA WORK AREA
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=110,FMT=2,LINE=*,                                   X
               SUB=(CHARA,(PGMNAM2,8))
         B     RETURN8
ERR001   EQU   *                       NOT CALLED AS NUCLEUS EXTENSION
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=100,FMT=1,LINE=*,                                   X
               SUB=(CHARA,(PGMNAM2,8)),                                X
               MF=(E,MSGLIST)
         B     RETURN8
ERR002   EQU   *                       OPTION NOT PASSED
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=111,FMT=1,LINE=*,                                   X
               MF=(E,MSGLIST)
         B     RETURN8
ERR003   EQU   *                       USERID NOT PASSED
         APPLMSG APPLID=SMS,COMP=YES,DISP=ERRMSG,HEADER=YES,           X
               NUM=111,FMT=2,LINE=*,                                   X
               MF=(E,MSGLIST)
         B     RETURN8
         EJECT
* RETURN TO CALLER                                                    *
RETURN8  EQU   *                       BAD COMMAND PARMS
         LA    R15,8
         B     RETURN
RETURN0  EQU   *
         XR    R15,R15
RETURN   EQU   *
         L     R13,SAVEAREA+4          R13 --> CALLER'S SA
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE R14
         BR    R14
         LTORG
*              S T O R A G E    D E F I N I T I O N S                 *
SAVEAREA DS    18F                     REGISTER SAVE AREA
*                                      COMMAND VECTOR TABLE
OPTSTRT  DC    CL8'ON',A(OPSON)
         DC    CL8'ADD',A(OPSON)
         DC    CL8'OFF',A(OPSOFF)
         DC    CL8'DROP',A(OPSOFF)
         DC    CL8'DELETE',A(OPSOFF)
         DC    CL8'LIST',A(OPSLIST)
         DC    CL8'SEND',A(OPSSEND)
         DC    CL8'ROUTE',A(OPSROUTE)
         DC    CL8'CLEAR',A(OPSCLR)
OPTSEND  DC    CL8'OFF',A(OPSOFF)
*                                      TEMP BASE REGISTER KLUGE       *
PGMNAM2  DC    CL8'SMSPOSMN'           PRG NAME COVERED BY R11        *
*                                      END KLUGE                      *
BLANKS   DC    CL32' '
         EJECT
         OPSDATA
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         QPLIST
         QHEAD
         EJECT
         QENTRY PREFIX=UQE,BODY=8+QHLEN
         ORG   UQEDATA
UQEULEN  DS    A
UQEUSER  DS    CL8
UQEHDR   QHEAD DSECT=NO
         ORG
         EJECT
         QENTRY PREFIX=XQE,BODY=12
         ORG   XQEDATA
XQEULEN  DS    A
XQEUSER  DS    CL8
         EJECT
         PARSERCB ,
         PVCENTRY ,
         EJECT
         COPY  PROP
         SCBLOCK ,
         EJECT
         NUCON ,
         POP   PRINT
         END


SMSPOSAB ASSEMBLE

ABND     TITLE 'SMSPOS ABEND EXIT ROUTINE'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
         QHEAD
SMSPOSAB START
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING NUCON,0
         USING PSWD,R9
         USING ABWSECT,R10
         USING SMSPOSAB,R11
         USING OPSDATA,R12
         USING WORKAREA,R13
         ST    R14,SAVE14              SAVE RETURN ADDR REGISTER
         LR    R11,R15                 LOAD BASE
         B     SKIPDCS                 BRANCH PAST DC
PGMNAME  DC    CL8'SMSPOSAB '          CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *                       SAVE CALLER'S REGISTERS
         LR    R10,R1                  LOAD ABWSECT BASE
         LA    R9,ABNPSW               LOAD PSW BASE
         L     R12,ABNUWRD             LOAD COMMON DATA AREA BASE
         LA    R3,DUMMYADR             ASSUME NO USER WORD
         XR    R4,R4                   DITTO
         LTR   R12,R12                 DID WE GET USER WORD?
         BZ    DISP1                   NO, CAN'T DO MUCH
         EJECT
* DETERMINE 'WHAT' AND 'WHERE' FOR ABEND                              *
         ICM   R8,B'0011',PSWDICOD     GET INTERRUPTION CODE
         XR    R7,R7                   CLEAR HIGH ORDER BYTE
         ICM   R7,B'0111',PSWDIADR     GET INSTRUCTION ADDRESS
         LR    R6,R7                   GET ABEND ADDRESS
         LR    R5,R7                   GET IT AGAIN
         XR    R4,R4                   CLEAR A REGISTER
         IC    R4,PSWDADDR             GET BYTE ILC IS IN
         N     R4,=A(PSWDILC)          TURN OFF ALL BUT ILC BITS
         SRL   R4,5                    R4 = LENGTH OF ABENDING INSTR.
         SR    R5,R4                   R5 --> ABEND INSTRUCTION
         S     R6,0(,R3)               GET OFFSET
         EJECT
* DISPLAY FIRST ABEND INFORMATION MESSAGES                            *
DISP1    EQU   *
         LA    R2,4(,R3)               POINT TO ROUTINE NAME
         APPLMSG APPLID=SMS,COMP=YES,DISP=TYPE,HEADER=NO,              X
               NUM=190,FMT=1,LINE=*,                                   X
               SUB=(HEX,((R8),3)),                                     X
               MF=(E,WKMLIST)
         APPLMSG APPLID=SMS,COMP=YES,DISP=TYPE,HEADER=NO,              X
               NUM=191,FMT=1,LINE=*,                                   X
               SUB=(HEX4A,(ABNPSW,8)),                                 X
               MF=(E,WKMLIST)
         LTR   R4,R4                   CHECK LENGTH
         BZ    DISP2                   NOT AVAILABLE
         APPLMSG APPLID=SMS,COMP=YES,DISP=TYPE,HEADER=NO,              X
               NUM=192,FMT=1,LINE=*,                                   X
               SUB=(HEX4A,((R5),8)),                                   X
               MF=(E,WKMLIST)
         B     DISP2
         EJECT
* DISPLAY REGISTER MESSAGES                                           *
DISP2    EQU   *
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=193,FMT=1,LINE=*,                                   X
               SUB=(HEX4A,(ABNREGS,16)),                               X
               MF=(E,WKMLIST)
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=193,FMT=2,LINE=*,                                   X
               SUB=(HEX4A,(ABNREGS+16,16)),                            X
               MF=(E,WKMLIST)
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=193,FMT=2,LINE=*,                                   X
               SUB=(HEX4A,(ABNREGS+32,16)),                            X
               MF=(E,WKMLIST)
         APPLMSG APPLID=SMS,COMP=NO,DISP=TYPE,HEADER=NO,               X
               NUM=193,FMT=2,LINE=*,                                   X
               SUB=(HEX4A,(ABNREGS+48,16)),                            X
               MF=(E,WKMLIST)
         B     RESET
         EJECT
* CHECK IF WE CAN RETRY                                               *
RESET    EQU   *
         LTR   R12,R12                 CHECK IF WE HAVE USER WORD
         BZ    RETURN                  NO, PERCOLATE ABEND
         TM    FLAG,FLAGABND           CHECK FOR ABEND RECURSION
         BO    RETURN
         OC    ABPSW+4(4),ABPSW+4      DO WE HAVE A RETURN ADDRESS?
         BZ    RETURN                  NO, SKIP THIS
         LA    R9,ABPSW                GET RETRY DATA ADDRESS
         LM    R7,R8,0(R9)
         OI    FLAG,FLAGABND           INDICATE ABEND OCCURRED
         ABNEXIT RESET                 CLEAR ABEND CONDITION
         LPSW  PSWDPSW                 RETURN
         EJECT
* CONTINUE WITH ABEND                                                 *
RETURN   EQU   *
         LA    R15,8
         L     R14,SAVE14              RESTORE RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
         LTORG
*              S T O R A G E    D E F I N I T I O N S                 *
DUMMYADR DC    A(0)
DUMMYRTN DC    CL8' '
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
WORKAREA DSECT
         DS    18F
         ORG   WORKAREA
SAVE14   DS    F
WKMLIST  APPLMSG APPLID=SMS,MF=L,MAXSUBS=6
INST     DS    CL6
         ORG
WORKLEN  EQU   *-WORKAREA
         EJECT
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         OPSDATA ,
         EJECT
         PSWD  ,
         EJECT
         DMSABW ,
         EJECT
         NUCON ,
         EJECT
         SVCSECT ,
         EJECT
         SVCSAVE ,
         EJECT
         PVCENTRY
         POP   PRINT
         END


QBUILD   ASSEMBLE

QBUILD   TITLE 'BUILD NEW QUEUE ELEMENT'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - GETS STORAGE (DMSFREE) FOR A QUEUE ELEMENT OF A USER-    *
* SPECIFIED SIZE. THE HEADER PORTION OF THE NEW ELEMENT IS            *
* INITIALIZED AND A POINTER TO THE NEW ELEMENT IS RETURNED IN THE     *
* STANDARD QMNT PARAMETER LIST (SEE BELOW).                           *
QBUILD   START 0
         REGEQU
         USING NUCON,0
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QBUILD,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QBUILD  '           CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
* PARMS:                                                              *
*        R1  --> 3 WORD PARAMETER LIST                                *
*        +0    QUEUE_HEAD_PTR  DS A    (NOT USED)                     *
*        +4    QUEUE_ELEMENT   DS A    (RETURNED BY QBUILD)           *
*        +8    QUEUE_ELMT_LEN  DS H    (SUPPLIED BY CALLER)           *
*        +10   QUEUE_FLAG      DS H    (SUPPLIED BY CALLER)           *
*                                       0 = USER + SVC                *
*                                       1 = USER + BALR               *
*                                       2 = NUCLEUS + SVC             *
*                                       3 = NUCLEUS + BALR            *
* EXIT:                                                               *
*        R15  =  RETURN CODE FROM DMSFREE                             *
         USING QPLIST,R10
         USING QENTRY,R12              QUEUE ELEMENT BASE
         LR    R10,R1                  LOAD PLIST BASE
         LH    R0,QPLEN                GET LENGTH
         LH    R1,QPOFF                GET FLAGS
         AH    R0,=Y(7)                FOR ROUNDING
         SRL   R0,3                    MAKE DOUBLE WORDS
         LR    R3,R0                   SAVE FOR LATER
         N     R1,=A(3)                MASK OFF ALL BUT BITS 30-31
         SLL   R1,2                    MULTIPLY BY 4
         B     *+4(R1)                 BRANCH TABLE
         B     USFREE                  USER+SVC
         B     NSFREE                  NUCLEUS+SVC
         B     UBFREE                  USER+BALR
         B     NBFREE                  NUCLEUS+BALR
USFREE   EQU   *
         DMSFREE DWORDS=(0),TYPE=USER,TYPCALL=SVC
         LR    R12,R1                  LOAD ENTRY BASE
         MVI   QEFLAG,X'00'            INIT FLAG FIELD (STG=USER)
         B     GOTFREE
NSFREE   EQU   *
         DMSFREE DWORDS=(0),TYPE=NUCLEUS,TYPCALL=SVC
         LR    R12,R1                  LOAD ENTRY BASE
         MVI   QEFLAG,QENUC            INIT FLAG FIELD (STG=NUC)
         L     R2,NUCXFRES             GET COUNT OF NUCLEUS FREE STG
         AR    R2,R3                   ADD WHAT WE JUST GOT
         DMSEXS ST,R2,NUCXFRES            AND TELL CMS ABOUT IT
         B     GOTFREE
UBFREE   EQU   *
         LR    R15,R0                  SAVE LENGTH
         DMSKEY NUCLEUS                GET INTO NUCLEUS KEY
         LR    R0,R15                  RESTORE LENGTH
         DMSFREE DWORDS=(0),TYPE=USER,TYPCALL=BALR
         LR    R12,R1                  LOAD ENTRY BASE
         MVI   QEFLAG,X'00'            INIT FLAG FIELD (STG=USER)
         DMSKEY RESET                  RESTORE OLD KEY
         B     GOTFREE
NBFREE   EQU   *
         LR    R15,R0                  SAVE LENGTH
         DMSKEY NUCLEUS                GET INTO NUCLEUS KEY
         LR    R0,R15                  RESTORE LENGTH
         DMSFREE DWORDS=(0),TYPE=NUCLEUS,TYPCALL=BALR
         LR    R12,R1                  LOAD ENTRY BASE
         MVI   QEFLAG,QENUC            INIT FLAG FIELD (STG=NUC)
         L     R2,NUCXFRES             GET COUNT OF NUCLEUS FREE STG
         AR    R2,R3                   ADD WHAT WE JUST GOT
         ST    R2,NUCXFRES                AND TELL CMS ABOUT IT
         DMSKEY RESET                  RESTORE OLD KEY
         B     GOTFREE
GOTFREE  EQU   *
         OI    QEFLAG,QEBLD            ELMT WAS BUILT BY QBUILD
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QENEXT              CLEAR NEXT ELEMENT POINTER
         ST    R15,QELAST              CLEAR BACKWARD POINTER
         STH   R3,QELEN                PUT DWORD LENGTH IN ENTRY
         STC   R15,QETYPE              CLEAR TYPE FIELD
         LR    R1,R12                  ADDR IS RETURNED IN R1
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
RETURN   EQU   *
         ST    R1,QPELMT               SET ADDRESS OF ELEMENT
         XR    R15,R15                 ZERO RC & CC
         LM    R0,R12,20(R13)          RESTORE R0 - R12
         L     R14,12(,R13)            RESTORE R14
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QENTRY
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         NUCON ,
         POP   PRINT
         END


QFRET ASSEMBLE

QFRET    TITLE 'FREE QUEUE ELEMENT'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - FREES A QUEUE ELEMENT THAT WAS PREVIOUSLY GOT USING      *
* QBUILD. QFRET SHOULD BE USED TO FREE QUEUE ELEMENTS BECAUSE DMSFREE *
* STORAGE IS NEVER RETURNED AUTOMATICALLY. ALSO, QUEUE ELEMENTS BUILT *
* FROM NUCLEUS STORAGE CAUSE A NUCLEUS COUNT FIELD TO BE INCREMENTED. *
* QFRET DECREMENTS THIS COUNTER WHEN IT FREES NUCLEUS STORAGE.        *
QFRET    START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QFRET,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QFRET   '           CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
*                        MAIN LINE CODE                               *
* PARMS:                                                              *
*        R1  --> PARAMETER LIST                                       *
*              QUEUE_HEAD_PTR  DS A    (UNUSED)                       *
*              QUEUE_ELMT_PTR  DS A    (SUPPLIED BY CALLER            *
*              QUEUE_COUNT     DS F    (UNUSED)                       *
* EXIT:                                                               *
*        R15  =  0                                                    *
         USING NUCON,0
         USING QENTRY,R4               ULTIMATE QUEUE ELEMENT BASE
         L     R4,QPELMT-QPLIST(,R1)   LOAD QUEUE ELEMENT BASE
         OC    QEHEAD,QEHEAD           IS THIS A FREE QUEUE?
         BNZ   ERROR1                  NO, RETURN W/ERROR
         TM    QEFLAG,QEBLD            WAS THIS BUILT BY QBUILD?
         BNO   ERROR2                  NO, BETTER NOT FREE IT
         LH    R5,QELEN                GET LENGTH OF BLOCK IN DWORDS
         XR    R9,R9                   CLEAR FLAG REGISTER
         TM    QEFLAG,QENUC            IS THIS NUCLEUS STORAGE
         BO    FREE                    YES, CONTINUE
         LA    R9,1                    INDICATE IT IS USER STORAGE
FREE     EQU   *
         LR    R0,R5
         DMSFRET DWORDS=(0),LOC=QENTRY
         LTR   R9,R9                   IF THIS WAS USER STG, R9=1
         BNZ   NONUC
         L     R3,NUCXFRES             GET COUNT OF FREE STORAGE
         SR    R3,R5                   LESS WHAT WE JUST FREED
         DMSKEY NUCLEUS
         ST    R3,NUCXFRES             TELL CMS ABOUT IT
         DMSKEY RESET
NONUC    EQU   *
         B     RETURN0
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
ERROR1   EQU   *                       NOT FREE
         LA    R15,12                  RC = 12
         LA    R2,3                    CC=3
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
ERROR2   EQU   *                       NOT BUILT BY BUILD
         LA    R15,8                   RC = 12
         LA    R2,2                    CC=2
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
RETURN0  EQU   *
         XR    R15,R15                 RC=0
         LR    R2,R15                  CC=0
RETURN   EQU   *
         SPM   R2                      SET CONDITION CODE
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE RETURN REGISTER
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QHEAD
         QENTRY
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         NUCON ,
         DEVTAB ,
         POP   PRINT
         END

This article will be continued next month.

Michael L Brocious and Dennis Hoover
Shared Medical Systems Corporation (USA)

