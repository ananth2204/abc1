 A pocket calculator in XEDIT
This macro can be used to perform arithmetic operations and functions on any
number currently displayed on the screen while you are in XEDIT.  The input
numbers are directly read from the screen, and the result can be stored in any
place in the file.  All this can be done by using only the cursor keys and one
function key.  Assuming that you defined one of the function-keys as 'MACRO
XCALC', its usage is described below.
First, position the cursor onto a number on the screen, and press the pre-
defined function key.  The number is read from the screen by the macro, and will
be checked for datatype validity.  If an invalid input is detected, a message
will be displayed, and the operation will not be done.
After the first number is read from the screen, a menu line will be displayed on
the third line from the top of the screen.  This line contains the arithmetic
operators and function you can choose, and looks like this:
     Operators:  +   -   *   /    Functions:   X2D   D2X   I2C    Quit
(The functions X2D and D2X convert hexadecimal numbers into decimal notation,
and decimal numbers into hexadecimal notation.  The command QUIT will cause you
to exit from the macro.)
Select an operator or a function by placing the cursor right on it, and pressing
the ENTER key.  Again, the macro will check if the cursor was on a valid field.
If not, the message 'ERROR: Invalid Cursor Position. Try Again' will be
displayed.  If you selected an operator, you will be asked for a second number.
Position the cursor now on the second number on the screen, and press 'ENTER'
again.
At this point the result has been computed, and the macro will ask you to select
a place on the screen at which the result can be inserted.  Place the cursor on
the first position of this place, and press 'ENTER'.  The result will then be
inserted at the position you marked with the cursor.  This result on the screen
could then be used for further computations.  This makes XCALC very powerful.
If you don't want to make changes to your file, position the cursor somewhere
out of the file (eg on the command line), and press ENTER.  The result will not
be inserted in the file, only displayed as a message.
This means that you can, for instance, add two hexadecimal numbers, by first
converting them to decimal numbers, adding these two decimal numbers, and
converting the result back to hexadecimal notation.
You can easily add new functions to the menu-line, just as I did with the I2C
(Inches to Centimetres) function.
XCALC XEDIT
/* XCALC MACRO                                     */
'PRESERVE'
'SET SCALE OFF'          /* user's setting will be restored on exit */
'SET MSGLINE ON 2 1 0'
call getnum 1                  /* read first number from the screen */
'EXTRACT /CURLINE/LINE/CURSOR/'
'SET CURLINE ON 3'
':'max(line.1-curline.2+3,1)
/* ask user to select an operation or a function from the menu      */
'MSG Select Operation by positioning the cursor on it and press ENTER'
READOPR:
menuline = 'Operators:   +   -   *   /   Functions:  X2D  D2X  I2C',
         'QUIT'
checkline = '$+$-$*$/$X2D$D2X$I2C$QUIT$'
'INPUT' menuline                       /* insert temporary menuline */
makebuf
'READ'
DESBUF
'EXTRACT /CURSOR/CURLINE'
'DEL 1'                                /* delete temporary menuline */
'UP  1'
/* check for validity of selection                                  */
Do i=1 to words(menuline)
  start = wordindex(menuline,i)
  end   = start + wordlength(menuline,i)
  if cursor.4>=start & cursor.4<= end then opr = word(menuline,i)
  if hex='ON' & opr¬='X2D' then opr='XXX'
  if hex='OFF' & pos('$'opr'$',checkline)=0 then opr=''
 end
if opr'QUIT' then do
  'MSG Operation will not be done. Normal Exit from XCALC'
  'RESTORE'
  Exit
end
if (cursor.1¬=curline.2) | opr='' then do
  'EMSG ERROR: Invalid cursor positon. Try again.'
  Signal readopr
end
if opr='XXX' then do
  'EMSG ERR (R: This cannot be performed on a Hex Number. Try again'
  Signal readopr
end
/* compute the results                                              */
if cursor.4 < 40 then do
  "MSG Selected Operator='"opr"'   Place cursor on second number and",
  "press Enter"
  'READ'
  DESBUF
  call getnum 2                    /* read second number from screen */
  interpret result '=' number.1 opr number.2
  expression = number.1 opr number.2 '=' result
end
else do
  interpret result '=' opr'('number.1')'
  expression = opr'('number.1') = 'result
end
/* insert the result in the file thats being edited, on the place   */
/* the user specified by the position of the cursor on the screen   */
/* if cursor is not in the file, just give a message                */
'MSG Position cursor on place where result (='result') has to be',
                                                            ' inserted'
'READ'
DESBUF
'EXTRACT/CURSOR/CURLINE/'
if cursor.4 <= 0 then 'MSG' expression
else do
  'SET CURLINE ON' cursor.1
  ':'cursor.3
  colnr = cursor.4
  'EXTRACT  /CURLINE'
  line = curline.3
  'CL : 1'
  'CR 'overlay(result,line,colnr)
/*'CL : 'colnr      /* to  insert result in file rather than overlay */
  'CI 'result */    /* decomment these lines & comment above 2 lines */
end
'RESTORE'
exit
/*this routine reads a number from the screen and checks for validity*/
GETNUM:
  ARG K
  'EXTRACT /CURSOR/CURLINE/'
  'SET CURLINE ON' cursor.1
  ':'cursor.3
  colnr = cursor.4
  'EXTRACT/CURLINE'
  line = curline.3
  number.k = ''
  do i=1 to words(line)
    start = wordindex(line,i)
    end   = start + wordlength(line,i)
    if (colnr >= start) & (colnr <= end) then do
      number.k = word(line,i)
      leave
     end
  end
  if datatype(number.k,'N')¬=1 & datatype(number.k,'X')¬=1
                                                      then signal error
  if datatype(number.k,'N')¬=1 then hex='ON'
  else hex = 'OFF'
  if number.k='' then signal error
return
/* User supplied function (Convert Inches to Centimeters)           */
I2C:
  arg x
  y = x * 2.5397
  return y
/* Exit when datatype is not valid                                  */
ERROR:
  "EMSG ERROR: '"number.k"' is not a valid REXX Number"
  'RESTORE'
  EXIT
Andries van Dijn
Programmer
Erasmus Universiteit Rotterdam (The Netherlands)  ) Xephon 1989













































