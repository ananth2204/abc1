 Debugging PL/I programs
I have found the following PL/I subroutine and method to be very useful for
debugging PL/I programs, which is made difficult by the lack of information
produced by the compiler.  The PL/I Version 1 compilers do not have a TEST
option to request symbolic cross-referencing and datatyping information to be
output to TEXT and subsidiary files.  This information can be requested from the
Assembler, FORTRAN and COBOL compilers.  With suitable tools this cross-
referencing information can be used to perform symbolic debugging.  Information
is more readily available from these compilers since they do not support the
PL/I storage classes that cause variables to be dynamically allocated from free
memory.
The following subroutine provides a hexadecimal character representation of a
variable's address.
  hexptr: proc(@p) returns(char(8)) reorder; /* pointer to hex */
  dcl @p pointer;
  dcl charptr char(8) static internal init((8)'0');
  dcl (substr,unspec) builtin;
  dcl (i,j) fixed bin(15) static internal init(0);
  dcl bit4 bit(4) static internal;
  dcl hexchar(16) char(1) static internal init(
    '0','1','2','3','4','5','6','7',
    '8','9','A','B','C','D','E','F');
  do i = 1 to 8;
    bit4 = substr(unspec(@p),(i*4)-3,4);
    unspec(j)=(12)'0'b || bit4;
    substr(charptr,i,1)=hexchar(j+1);
    end;
  return(charptr);
  end hexptr;
The following piece of PL/I code illustrates how it is used in a program.
 test: procedure options(main) reorder;
 dcl addr builtin;
 dcl variable   char(20) init('Test data');
 dcl hole       char(1);
 dcl hexptr entry(pointer) returns(char(8));
 display('Variable address= '||hexptr(addr(variable))) reply(hole);
 end test;
The following console listing shows how the test works.
R;
load test ( nodup
R;
start *
DMSLIO740I EXECUTION BEGINS...
Variable address= 00023A30
#CP D T23A30.20
023A30    E385A2A3  408481A3  81404040  40404040     *Test data      *
023A40    40404040  00000000  00000000  00000000     *    ...........*
R;
Note that after the program displays the address it stops and waits, and CP
posts a VM READ in the status area.  At this point you can enter CP commands
directly by prefacing them with a # sign.
This technique is particularly useful for diagnosing two types of problem:
1    Unexpected results from unplanned PL/I data conversions.  Tracing the code,
and using the technique above to display memory both before and after
assignment, can locate the coding error.
2    Storage overlays from compiler-generated bugs.  These bugs are more
difficult to pin down, but can be found by iteratively displaying suspect
variables using this technique.  Once the overlaid area has been found, it is
possible to use Program Event Recording (PER) to trap the instruction that
causes the overlay.  This technique is illustrated in the following console
listing:
R;
load test ( nodup
R;
per st 23a30.10
R;
 start *
DMSLIO740I EXECUTION BEGINS...
==> 0200BC MVC   D213D0C83048 023A30 020190 CC=1 *STORE*
B
Variable address= 00023A30
R;
As you can see from the simple example a Move Character instruction at address
'BC'X into the program writes data into the storage area being monitored by PER.
If this were a real problem your next step would be to obtain an Assembler
listing of the code produced by the compiler.  This can be done by re-compiling
with the LIST option.
Adrian Blakey
Kolinar Corp (USA)  ) Kolinar Corp 1988





















































