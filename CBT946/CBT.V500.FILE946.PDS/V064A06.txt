Programmer tools for VM/XA - again

Here are some more handy routines to make the work of
systems programmers a little easier.


QDISKU

This routine is a QUERY DISK command to display another
user's disk access list.  It even works with 3390s!

Format:

      QDISKU  user-id  mode  (  ALL  (  Force

The user-id has to be logged on, and have CMS IPLd.  You
can specify a filemode to show only one access mode.  You
can use R/W for the mode to list only the user's R/W accesses.

The option ALL will display the creation date of the disk and
the filetypes that are accessed in storage.

Force will bypass the check for CMS, and attempt to map the
disks from whatever storage the user has.  This is useful if your
CMS system is not called 'CMS' or the user has IPLd CMS
from disk (eg IPL 190).

Example:

QDISKU OPERATOR

   LABEL  VDEV M  STAT  CYL TYPE BLKSIZE  FILES  BLKS USED-(%) ..ETC...
   OPR191 191  A   R/W   25 3380 4096        47       3144-84
   RUNDSK 310  B   R/O   20 3380 2048       968       3442-64
   OPLOGB 291  C   R/W   75 3380 4096        29       8666-77
   OPR192 192  D   R/O    1 3380 4096        74        112-75
   MNT31A 31A  L   R/O   50 3380 4096       692       1786-24
   MNT319 319  P   R/O  100 3380 4096      1175      12045-80
   MNT190 190  S   R/O   66 3380 4096       291       7234-73
   MNT19E 19E  Y/S R/O   44 3380 4096        46        267-04

QDISKU EXEC

/* QDISKU EXEC   (Type QDISKU ? for help)                             */
/* Function:   To display a user's accessed disk info, like Q DISK.   */
/* Find who's disk info */
Arg who qmode . '(' opt . '(' cmsopt .
If who = '' | who = '?' Then Do
   Say 'Format:  QDISKU  user-id  mode  ( ALL ( Force '
   Say
   Say "'mode' is optional.  It can be any mode or 'R/W'. If you"
   Say "specify a mode, only that mode will be displayed"
   Say "(or any 'R/W' disk) if found."
   Say
   Say "The option 'ALL' will display the creation date of the disk and"
   Say "the files accessed in storage."
   Say
   Say "Use the Force option to ignore the CMS system check."
   Exit
   End
Parse Value Diagrc(8,'QUERY USER' who) With qrc .
If qrc ¬= 0 Then Do
  Say who 'is not logged on.'
  Exit
  End
/* Verify CMS is IPLed */
pagelock = 0
Call LOCK 0000
iplname = Getstore(raddr,260,8,'Host','Char')
If cmsopt = '' & Pos('CMS',iplname) = 0  Then Do
  Say who 'does not have any CMS system IPLed.'
  Signal OUT
  End
If cmsopt ¬= '' & Pos('CMS',iplname) = 0  Then
  Say who 'does not seem to have any CMS system IPLed, will try anyway.'
qstat = ''
If qmode = 'R/W' Then Do
   qstat = 'R/W'
   qmode = ''
   End
dasd.   = '????'
dasd.40 = '3330'
dasd.20 = '3340'
dasd.10 = '3350'
dasd.11 = '3350'
dasd.12 = '3350'
dasd.08 = '2305'
dasd.04 = '3380'
dasd.82 = '3390'
dasd.80 = '3375'
dasd.02 = '3370'
all = 0
If opt = 'ALL' Then all = 1
title = 0
/* Nucon + 644 has the address of the ADT start */
adtloc = Strip(Getstore(raddr,644,4,'Host','HEX'),'L',0)
/*
Title    disp  Desc
NEXT      00 - The start of the next AST block
CUUADD    08 - The device table index in the NUCON
FILES     20 - Number of files on the disk
MODEFL12  44 - File mode & Flag1 (RW RO) and Flag2 (OS, fm's in core)
FLAGS     48 - Flag3 (RW OS/DOS) and flag4 (not used)
LBL1      94 - First 4 bytes of label
LBL2      98 - Last 2 bytes of label + 2 extra
BLKF      9C - Disk blocking factor
CYLS      A4 - Cylinders formated
TOTBL     AC - Total blocks allocated
USDBL     B0 - Total blocks used
DT1       BC - Date/time disk created (First 4 bytes)
DT2       C0 - Date/time disk created (last 2 bytes)
*/
displist = '0 8 20 44 48 94 98 9C A4 AC B0 BC C0'
Do 26 until adtloc = ''
  Do i = 1 to Words(displist)
    daddr = d2x(x2d(adtloc) + x2d(Word(displist,i)))
    If Substr(daddr,1,Length(daddr)-3) ¬= pagelock Then Do
      Call LOCK daddr
      real = d2x(x2d(pagedisp)+x2d(raddr))
      End
    Else real = d2x(x2d(Substr(daddr,Length(daddr)-2))+x2d(raddr))
    word.i = Getstore(real,,4,'Host','Hex')
    End
  label = Substr(x2c(Space(word.6))||x2c(Space(word.7)),1,6)
  If label ¬= '' & label ¬= '000000000000'x Then do
    Parse Value word.4 With mode +4 flag1 +2 flag2 +2 .
    mode = x2c(mode)
    If Substr(mode,2) ¬= ''
                     Then mode = Substr(mode,1,1)||'/'||Substr(mode,2,1)
    If qmode = '' | Abbrev(mode,qmode,1) Then Do
      word.2 = Strip(Space(word.2),'L','0')
/* Say 'CUU Address at location' word.2 */
      If Substr(word.2,1,Length(word.2)-3) ¬= pagelock Then Do
        Call LOCK word.2
        real = d2x(x2d(pagedisp)+x2d(raddr))
        End
      Else real = d2x(x2d(Substr(word.2,Length(word.2)-2))+x2d(raddr))
/* Say 'Getstore('real',,2,Host,Hex)' */
      cuu = Left(Strip(Getstore(real,,2,'Host','Hex'),'L',0),4)
/* Say 'CUU' cuu */
      Parse Value word.5 With flag3 +2 flag4 +2 .
      cyl = x2d(word.9)
      status = 'R/O'
      osdisk = 0
      If c2x(bitand('05'x,x2c(flag2))) = 0 Then Do
        If Substr(flag1,1,1) = '2' Then status = 'R/W'
        If status = 'R/W' Then files = x2d(word.3) - 2
        Else files = x2d(word.3) - 1
        blksize = x2d(word.8)
        blktot = x2d(word.10)
        blkused = x2d(word.11)
        blkleft = blktot - blkused
        prct = Space(Format(blkused/blktot*100,3,0))
        If prct = 100 Then prct = 99
        Else prct = Right(prct,2,0)
        blkused = blkused||'-'||prct
        End
      Else Do
        osdisk = 1
        If Substr(flag3,1,1) = '2' Then status = 'R/W'
        files = 'OS'
        If c2x(bitand('01'x,x2c(flag2))) = 1 Then files = 'DOS'
        blksize = ' '
        blktot = ' '
        blkused = ' '
        blkleft = ' '
        End
      Parse Value Diag(8,'LOC' who cuu) With . '15'x . vdev . '15'x
      type = Getstore(vdev,13,1,'Host','Hex')
      If qstat = '' | qstat = status Then Do
        If ¬title Then Do
          Say 'LABEL  VDEV M  STAT  CYL TYPE BLKSIZE  FILES  BLKS ',
                                         'USED-(%) BLKS LEFT  BLK TOTAL'
          title = 1
          End
        Say label cuu Left(mode,3) status Right(cyl,4) dasd.type ,
            Left(blksize,7) Right(files,6) Right(blkused,13) ,
            Right(blkleft,10) Right(blktot,10)
        If all Then Do
          If osdisk Then Say '       Created: .......N/A.......'
          Else Do
               createdt = Substr(word.12,3,2)||'/',
                         ||Substr(word.12,5,2)||'/'||Substr(word.12,1,2)
               createtm = Substr(word.12,7,2)||':',
                         ||Substr(word.13,1,2)||':'||Substr(word.13,3,2)
               instorage = ' '
               If c2x(bitand('F8'x,x2c(flag2))) = 'F8'
                      Then instorage = 'All files and modes in storage.'
               Else Do
                    If c2x(bitand('40'x,x2c(flag2))) = '40'
                                           Then instorage = 'all names,'
                    If c2x(bitand('20'x,x2c(flag2))) = '20'
                               Then instorage = instorage||' all types,'
                    If c2x(bitand('18'x,x2c(flag2))) = '18'
                               Then instorage = instorage||' all modes,'
                    Else If c2x(bitand('10'x,x2c(flag2))) = '10'
                           Then     instorage = instorage||' modes 1-5,'
                    If instorage ¬= ''
                       Then instorage = Space(instorage)||' in storage.'
                    End
               Parse Value instorage With first +1 rest
               instorage = Translate(first)||rest
               Say '       Created:' createdt createtm instorage
               End
           End
        End
      End
   End
 If qmode ¬= '' & Abbrev(mode,qmode,1) Then Leave
 adtloc = Strip(Space(word.1),'L','0')
End
If ¬title Then Do
  If qmode ¬= '' Then Say who 'does not have a' Space(qmode) ,
                                                        'disk accessed.'
  If qstat ¬= '' Then Say who 'does not have any' qstat 'disks accessed'
  End
OUT:
xdiag = Diag(8,'UNLOCK' who pagelock pagelock)
Exit
LOCK:
Arg lockadr .
 xdiag = Diag(8,'UNLOCK' who pagelock pagelock)
 pagelock = Substr(lockadr,1,Length(lockadr)-3)
 pagedisp = Substr(lockadr,Length(lockadr)-2)
 Parse Value Diag(8,'LOCK' who pagelock pagelock 'MAP') ,
                                             With . '15'x . raddr '15'x
 raddr = Space(raddr)
/* Say 'CMS:' lockadr '- Locked page' pagelock 'at real address' */
/* raddr 'Pagedisp:' pagedisp*/
Return
GETSTORE:
Arg addr , disp , len , type , form .
Signal ON SYNTAX
If Abbrev('HOST',type,1) Then type = 'H'
Else type = ''
addr = d2x(x2d(addr)+x2d(disp))
test_nibble = Substr(addr,Length(addr))
num_words = len % 4 + 1
If Find('0 4 8 C',test_nibble) = 0 Then num_words = num_words + 1
string = ''
Do num_words
  Parse value Diag(8,'DISPLAY 'type||addr) With . word .
  string = string||word
  addr = d2x(x2d(addr)+4)
  End
start = Translate(test_nibble,'1357135713571357','0123456789ABCDEF')
result = Substr(string,start,len*2)
If form = 'DEC' Then result = x2d(result)
Else If form = 'CHAR' Then result = x2c(result)
Return result
SYNTAX:
ERROR:
Parse source . . name .
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** GETSTORE was probably called incorrectly'
Say
Say '** Getstore('addr','disp','len','type','form')'
Say
Exit


QPRIV

This routine will display and/or change the CP privilege
class(es) of one or many user-ids.  QPRIV allows you to
'temporarily' change the CP privilege class for a user on-the-fly.

Format:

      QPRIV user1 user2 ...  ( SET privclasses

User will default to your user-id if it is not supplied.  SET is
optional and can be a list of any valid CP privilege class, or the
keyword ALL (same as ABCDEFG).  You can also specify
ALL+classes to get the standard classes plus others.

Example:

      QPRIV SOMEUSER (SET BG
      User SOMEONE  has Privilege Class: G
      Classes successfully changed to: B G

Example:

      QPRIV SOMEUSER (SET ALL+R
      User SOMEONE  has Privilege Class: B G
      Classes successfully changed to: A B C D E F G R

QPRIV EXEC

/* QPRIV EXEC        (Type QPRIV ? for help)                          */
/* Function:  Query/Set the privilege class(es) of a user.            */
Arg xuser '(' opt privclass
If xuser = '' Then xuser=userid()
If xuser = '?' Then Do
  Say 'Format:  QPRIV user1 user2 ...  ( SET privclasses'
  Say
  Say 'User defaults to your user-id if not supplied'
  Say 'privclasses can be ALL or any valid IBM Privilege Class.'
  Say
  Say 'Example:   QPRIV SYSOP USERX1 ( SET ABCDG'
  Exit
  End
Do u=1 to Words(xuser)
  user = Word(xuser,u)
  Parse Value Diag(8,'LOC' user) With key . loc
  If key¬='VMDBK' Then Do
    Say 'User' Left(user,8) 'not found'
    Iterate
    End
  loc = Strip(loc,'T','15'x)
  newloc = d2x(x2d(loc)+x2d(3C0))
  Parse Value Diag(8,'DISPLAY H'newloc||'.4') With . +11 bytes +8 .
  Say 'User' Left(user,8) 'has Privilege Class:' Qclass(bytes)
  If opt = 'SET' Then Call SETPRIV
End
Exit
/* Reset the privilege classes */
SETPRIV:
Parse Value privclass With privclass1 '+' others
If privclass1 = 'ALL' & others ¬= '' Then privclass = 'ABCDEFG'||others
Else If others = 'ALL' Then privclass = 'ABCDEFG'||privclass1
newbyte. = 0
If privclass ¬= 'ALL' Then Do
  class. = ''
  class.A = 128; class.B = 64
  class.C =  32; class.D = 16
  class.E =   8; class.F =  4
  class.G =   2; class.H =  1
  class.I = 128; class.J = 64
  class.K =  32; class.L = 16
  class.M =   8; class.N =  4
  class.O =   2; class.P =  1
  class.Q = 128; class.R = 64
  class.S =  32; class.T = 16
  class.U =   8; class.V =  4
  class.W =   2; class.X =  1
  class.Y = 128; class.Z = 64
  class.0 =  32; class.1 = 16
  class.2 =   8; class.3 =  4
  class.4 =   2; class.5 =  1
  Do j=1 to Length(privclass)
    clletter = Substr(privclass,j,1)
    If class.clletter = '' Then Do
      Say 'Invalid or extraneous privilege class' ,
                                      Substr(privclass,j,1) 'specified.'
      Exit 99
      End
    If clletter > 'X' Then x = 4
    Else If clletter > 'P' Then x = 3
    Else If clletter > 'H' Then x = 2
    Else x = 1
    newbyte.x = newbyte.x + class.clletter
    class.clletter = ''
  End
  If user = Userid() & Pos('C',privclass)=0
                                          Then newbyte.1 = newbyte.1 +32
  End
Else newbyte.1 = 254
newbyte.1 = Right(d2x(newbyte.1),2,0)
newbyte.2 = Right(d2x(newbyte.2),2,0)
newbyte.3 = Right(d2x(newbyte.3),2,0)
newbyte.4 = Right(d2x(newbyte.4),2,0)
newbyte = newbyte.1||newbyte.2||newbyte.3||newbyte.4
xdiag = Diag(8,'STORE H'newloc newbyte)
Say '  Classes successfully changed to:' Qclass(newbyte)
Return
/* Make the classes readable */
QCLASS: Procedure;
Arg bytes
/*Say bytes*/
  class = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345'
  i = 1; out = ''
  Do j=1 to 7 by 2
    fbyte = substr(bytes,j,2)
    cmpr = 128
    Do Forever
       If BITAND(x2c(fbyte),d2c(cmpr))=d2c(cmpr)
                                  Then out = out||Substr(class,i,1)||' '
       i = i + 1
       If cmpr = 1 Then Leave
       cmpr = cmpr/2
    End
  End
Return out


QTD

This routine 'cleans up' the standard CP QUERY TD
(temporary disk) output.  It will display in order of largest
allocations, then sorted by user-id.

Format:

      QTD  Mult
      >nn

QTD with no options will display all TDISK users with their
allocations.  You can specify Mult to show only the users with
multiple TDISKs, or >nn (where nn is a cylinder count) to
display all users with more than nn total cylinders allocated.

Example:

      QTD

Userid: USER7    total cylinders:   55 .... Vaddr: 0310  Cyls:   50  Vol: VMBX68
                                       .... Vaddr: 0311  Cyls:    5  Vol: VMBX70
Userid: USER2    total cylinders:   20 .... Vaddr: 0310  Cyls:   20  Vol: VMBX56
Userid: USER3    total cylinders:   20 .... Vaddr: 0310  Cyls:   20  Vol: VMBX57
Userid: USER4    total cylinders:   20 .... Vaddr: 0313  Cyls:   20  Vol: VMBX68
Userid: USER5    total cylinders:   20 .... Vaddr: 0310  Cyls:   20  Vol: VMBX58
Userid: USER12   total cylinders:   20 .... Vaddr: 0199  Cyls:   20  Vol: VMBX70
Userid: USER11   total cylinders:   15 .... Vaddr: 0312  Cyls:   15  Vol: VMBX71
Userid: USER1    total cylinders:   12 .... Vaddr: 0310  Cyls:   12  Vol: VMBX56
Userid: USER9    total cylinders:   12 .... Vaddr: 0310  Cyls:   12  Vol: VMBX56
Userid: USER10   total cylinders:   12 .... Vaddr: 0311  Cyls:   12  Vol: VMBX58
Userid: USER6    total cylinders:   11 .... Vaddr: 0500  Cyls:   11  Vol: VMBX71
Userid: USER13   total cylinders:   10 .... Vaddr: 0500  Cyls:   10  Vol: VMBX70
Userid: USER14   total cylinders:   10 .... Vaddr: 0500  Cyls:   10  Vol: VMBX68
Userid: USER15   total cylinders:   10 .... Vaddr: 0500  Cyls:   10  Vol: VMBX71

QTD EXEC

/* QTD EXEC          (Type QTD ? for help)                            */
/* Function: Map TDISK allocation, sorted by total cylinders & user-id*/
/* Map CP TDISK space by user-id */
Arg opt .
If opt = '?' Then Do
 Say
 Say 'Format:   QTD  Mult'
 Say '               >nn'
 Say
 Say 'Mult and >nn are optional. By default, QTD will list system '
 Say 'T-Disk allocations sorted by total cylinders and by user-id.'
 Say
 Say 'MULT will show only those users with more than one T-Disk.'
 Say '>nn  will show only those users with more than nn total cyls.'
 Exit
 End
Parse Value opt With '>' maxcyls .
If maxcyls = '' Then maxcyls = 0
If opt = 'MULT' Then only_mults = 1
Else only_mults = 0
userlist.0 = 0
Address Command 'EXECIO * CP (STEM INPUT. STRING Q TD'
Do i = 1 to input.0
  Parse Value input.i With key . . . . volid .
  If key = '' Then Iterate
  If key = 'DASD' Then currvol = volid
  Else Do
    Parse Value input.i With userid.1 cuu.1 cyls.1 . userid.2 cuu.2 ,
                                        cyls.2 . userid.3 cuu.3 cyls.3 .
    Do x = 1 to 3
      If userid.x ¬= '' Then Call INSERT_USER
      End
    End
  End
/* Sort our findings.... */
Do i = 1 to userlist.0
  Parse Value userlist.i With userid_i totcyls_i .
  Do j = i+1 to userlist.0
    Parse Value userlist.j With userid_j totcyls_j .
    If totcyls_j > totcyls_i | ,
       (totcyls_j = totcyls_i & userid_j < userid_i) Then Do
      hold = userlist.i
      userlist.i = userlist.j
      userlist.j = hold
      Parse Value userlist.i With userid_i totcyls_i .
      End
    End
  End
/* Display our findings.... */
Do i = 1 to userlist.0
  Parse Value userlist.i With userid totcyls
  If totcyls <= maxcyls | (only_mults & Words(tdisks.userid) = 3)
                                                         Then Iterate
  Parse Value tdisks.userid With cuu cyls volid tdisks.userid
  Say 'Userid:' Left(userid,8) 'total cylinders:' Right(totcyls+0,4),
      '.... Vaddr:' cuu ' Cyls:' Right(cyls+0,4) ' Vol:' volid
  If tdisks.userid ¬= '' Then Do Until tdisks.userid = ''
    Parse Value tdisks.userid With cuu cyls volid tdisks.userid
    Say Left(' ',38) ,
        '.... Vaddr:' cuu ' Cyls:' Right(cyls+0,4) ' Vol:' volid
    End
  End
Exit
INSERT_USER:
userid = userid.x
Do y = 1 to userlist.0 Until Word(userlist.y,1) = userid
  End
If y > userlist.0 Then Do
  userlist.0 = y
  userlist.y = userid cyls.x
  tdisks.userid = cuu.x cyls.x currvol
  End
Else Do
  userlist.y = userid Word(userlist.y,2)+cyls.x
  tdisks.userid = tdisks.userid cuu.x cyls.x currvol
  End
Return

More VM/XA utility programs next month.

James S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1991

