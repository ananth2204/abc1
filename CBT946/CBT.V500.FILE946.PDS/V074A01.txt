VM directory maintenance

Here are a group of EXECs that I use to partially automate
native VM directory maintenance, and save many dollars in
licence charges for DIRMAINT or other third party
equivalents.

This need arose when we upgraded from VM/SP 4 to VM/XA
2.1 because our software bill was growing rapidly. We needed
to remove as much unnecessary software as possible, and, after
writing these EXECs, DIRMAINT fell into that category.

As a one sysprog shop, our current source directory contains
1410 statements, of which 461 are comments. There is one
profile and 63 user-ids.

The EXECs were developed very quickly (the beauty of
REXX), and while the coding style may not be to everyone's
liking, it works for me quite nicely.


MYPW EXEC

Called by general CMS user to notify sysprog of a password
change request.

/*                             */
trace off
usr = userid()
call getpass
'vmfclear'
call erasefnd usr' NEWPASS A0'
'desbuf'
queue '****        MYPW   EXEC        ****'
queue 'FROM :  'usr'        DATE :  'date(e)
queue 'TO   :  SYSA        TIME :  'time()
queue '------------------------------------ '
queue 'New CMS log-on password please : ' newpass
queue 'Please confirm when update has been applied.'
'execio 'queued()' DISKW 'usr' NEWPASS A0 ( FINIS '
'sendfile 'usr' NEWPASS A0 SYSA ( noack notype'
call erasefnd usr' NEWPASS A0'
say;say;say
say centre('****           MYPW           ****',60)
say;say;say
say 'Your change request re CMS log-on password has been sent to SYSA'
say 'for action. He/she shall confirm when the update is applied.'
say;say;say
exit
/* ************************** */
getpass :
ok? = 0
num = 1
Do While ok? = 0
   passwd = ''
   passts = ''
   VMFCLEAR
   Do While passwd = '' | length(passwd) > 8
      'EXEC RDPW' num
      num = 2
      pull passwd
   End
   'EXEC RDPW' 3
   pull passts
   If passwd = passts
      then  ok? = 1
      else num = 4
  if passwd = 'ERROR' | passts = 'ERROR' then
     say 'ERROR HAS OCCURRED IN THE SUPPRESS PASSWORD ROUTINE (RDPW)'
End
newpass = passwd
return


RDPW EXEC

Called by MYPW to mask password inputs.
/** Read some screen input invisibly ! **/
Parse Arg r num .
If r ¬= 'RECURSIVE' & ,
   r < 1 | r > 4
   then exit 24
If r ¬= 'RECURSIVE'
   Then Do                        /* if called by user */
          Parse Source . . fn .
          Push fn 'RECURSIVE' r
          'XEDIT DUMMY FILE A (NOPROF NOMSG'
          if rc = 36
             then do
                    'DESBUF'
                    push 'ERROR'
                    exit
                  end
          Pull .
          Pull . . . password .
          Upper password
          push password          /* test to see what we got */
        End
   Else Do                   /* if called recursively by ourselves */
          Address 'XEDIT'
          C = 'COMMAND'
          C 'SET CTL > NOPROTECT INVISIBLE'
          C 'SET CTL " PROTECT'
          C 'SET CTL @ PROTECT YELLOW REVVIDEO'
          C 'SET CTL ! ESCAPE'
          C 'SET CMDLINE OFF'
          C 'EXTRACT /LSCREEN'
          Do i = 1 to lscreen.1
             C 'SET RESERVE' I 'HIGH'
          End
          if num = 1
             then C 'SET RESERVE 10 HIGH  ' ,
                            'ENTER YOUR NEW PASSWORD :'
          if num = 2
             then do
                    C 'SET RESERVE 8 HIGH  !@' ,
                         'PASSWORD MUST BE 1-8 CHARACTERS, RE-TRY.!>'
                    C 'SET RESERVE 10 HIGH  ' ,
                            'ENTER YOUR NEW PASSWORD :'
                  end
          if num = 3
             then C 'SET RESERVE 10 HIGH  ' ,
                            'ENTER PASSWORD AGAIN TO VERIFY:'
          if num = 4
             then do
                    C 'SET RESERVE 8 HIGH  !@VERIFY FAILED!>'
                    C 'SET RESERVE 9 HIGH  !@' ,
                         'PASSWORD MUST BE 1-8 CHARACTERS, RE-TRY.!>'
                    C 'SET RESERVE 10 HIGH  ' ,
                            'ENTER YOUR NEW PASSWORD :'
                  end
          C 'SET RESERVE' LSCREEN.1-2 'HIGH !>'
          C 'CURSOR SCREEN' LSCREEN.1-2 2
          C 'READ ALL TAG'
          C 'QUIT'
        End
Exit


DIR EXEC

Used by MAINT to automate directory maintenance. If I've
added a mini-disk, I always take the DISKMAP option to
check for overlaps, before placing directory on-line.

/* */
trace off
'access 295 d'
rc = 0
u = userid()
if u ¬= 'MAINT'
   then do; say 'Invalid user-id'; call exite; end
arg type
select
   when type = 'X'
      then do
             'xedit user direct'
             say 'Do you wish syntax check to occur ?   Y is default'
             pull synt
             if synt = '' | synt = 'Y'
                then call dir 'S'
           end
   when type = 'S'
      then do
             'directxa ( edit'
             if rc = 0
                then do
                       say 'Syntax check done.'
                       say '   Want DISKMAP done ?       - D'
                       say '   Want directory on-line ?  - O'
                       pull onln
                       select
                          when onln = 'D'
                             then do
                                    'diskmap user'
                                    'xedit user diskmap'
                                    say 'Happy with that ?.'
                                    pull happ
                                    if happ = 'Y'
                                       then call dir 'O'
                                       else call exite
                                  end
                          when onln = 'O'
                             then call dir 'O'
                          otherwise say 'Finito !'
                       end
                     end
           end
   when type = 'O'
      then do
             'directxa'
             if rc = 0
                then say 'DIR Directory update complete !'
           end
   otherwise say 'Arg of 'type' not valid'
end
/****************/
exite :
'set cmstype ht'
'release d'
'set cmstype rt'
exit
return


GETU EXEC

Used by SYSA to check directory details.

/**/
trace off
arg usr whr
if usr = '?' | usr = 'HELP'
   then call helper
if whr = 'D'
   then call erasefnd usr' direct a0'
'acc 295 w'  /* SYSA has LINK MAINT 295 295 RR in directory */
if usr = 'ALL'
   then do
          'sendfile user direct w *'
          call exite
        end
if usr = 'BR'
   then do
          'browse user direct w'
          call exite
        end
if usr = 'X'
   then do
          'xedit user direct w'
          call exite
        end
'execio * diskr user direct w ( locate /USER 'usr'/'
if rc ¬= 0
   then do
          'finis user direct w'
          'execio * diskr user direct w ( locate /PROFILE 'usr'/'
          if rc ¬= 0
             then do
                    say 'User 'usr' or Profile ¬found in directory'
                    call exite
                  end
        end
pull lineno
pull userinfo
do x = 1 to 99
   if whr = 'D'
      then do
             queue userinfo
             'execio 1 diskw 'usr' direct a0 '
           end
      else say userinfo
   'execio 1 diskr user direct w '
   if rc ¬= 0
      then leave
   pull userinfo
   if subword(userinfo,1,1) = 'USER' | ,
      subword(userinfo,1,2) = '* USER'
      then leave
end
call exite
/*******************/
exite :
'rel w'
exit
return
/*******************/
helper :
say '  GETU usr whr '
say '     links to mini-disk containing user direct'
say '     if usr = ALL then sends user direct to your rdr'
say '     if usr = BR  then browses user direct'
say '     if usr = X   then XEDITs user direct'
say '     otherwise scans user direct for usr, &'
say '        if whr = D writes to usr direct a'
say '        or types usr direct statements on screen'
say '  EG: GETU ?               gives help'
say '      GETU X               XEDITs directory'
say '      GETU BR              browses directory'
say '      GETU ALL             sends directory to reader'
say '      GETU SYSA            types sysa directory statements'
say '      GETU SYSA D          creates sysa direct file'
exit
return


Richard Barrow
Systems Programmer
J B Were & Son (Australia)                                     cXephon 1992

