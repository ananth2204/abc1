Working with windows and virtual screens

Many of the articles written for VM Update contain XEDIT
macros for building a fullscreen environment.  VM/SP Release
5 offers several enhancements improving CMS sessions on
3270-type terminals.

These new functions let you work with data through windows
and use the entire screen to enter input and display output.
You don't have to use XEDIT any more for this purpose.

An example of the use of this fullscreen macro is included.
We use this REXX EXEC to help us to script our documents
with SCRIPT/VS (Document Composition Facility from IBM).
The call to SCRIPT has many parameters and the purpose of
this EXEC is to make life a bit easier.  Of course you can use
this method for every difficult command.

Most EXECs modify some terminal settings temporarily.  For
example turning CP EMSG OFF or setting CMSTYPE to HT.
When the EXEC ends, those settings should be restored to their
original values.  Because of this there are two calls to external
REXX routines which are documented here as well.

The first one is called SAVESET.  It saves the current settings
in a temporary file.  By giving an argument you can determine
the filename of the temporary file to be created.  The second
one is called RESTSET and restores those settings to their
original value.


SAVESET EXEC

/* SAVESET   This EXEC saves the current settings of your machine     */
 arg  name                                  /* Get filename           */
 if   name = '' then                        /* No name given lets     */
      name = 'SAVESET'                      /* take the default       */
'execio * cp (ste SETS. st QUERY SET'       /* Get CP settings        */
 parse var sets.1  msg ',' wng  ',' emsg ',' . ',' run
 parse var sets.4 imsg ',' smsg ',' .
 parse var sets.7 .    ',' .    ',' .    ',' . ',' conceal
'query cmstype (stack'                      /* Get CMS settings       */
 pull cmstype1 . cmstype2
 cmstype = cmstype1' 'cmstype2
'cp set emsg off'                           /* No error messages      */
'erase' name 'SETTINGS A3'                  /* Erase old temp file    */
'cp set' emsg                               /* EMSG back to org. value*/
                                            /* Write the temp file    */
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(msg)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(wng)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(emsg)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(run)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(imsg)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(smsg)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str cp set' strip(conceal)
'execio 1 diskw' name 'SETTINGS A3 0 F 20 (str set' strip(cmstype)
'finis' name 'SETTINGS A3'                  /* Close temp file        */
 exit                                       /* Ready                  */


RESTSET EXEC

/* RESTSET   This EXEC restores the saved settings of your machine    */
 arg  name                                  /* Get filename           */
 if   name = '' then                        /* No name given lets     */
      name = 'SAVESET'                      /* take the default       */
'cp set emsg off'                           /* No error messages      */
'state' name 'SETTINGS A3'                  /* Look for temp file     */
 if   rc = 0 then                           /* It is here             */
      signal restore                        /* Go restore settings    */
'cp set emsg text'                          /* File not found, so     */
 exit                                       /* lets get out now       */
restore:                                    /* Read the temp file     */
'execio * diskr' name 'SETTINGS A3 (ste SETS.'
 do   i = 1 to sets.0                       /* Process all lines      */
      sets.i                                /* Restore setting        */
 end
'finis' name 'SETTINGS A3'                  /* Close, delete temp file*/
 exit                                       /* Ready                  */

The SCR EXEC builds two virtual screens, a PARM and a
HELP screen, which can be viewed through windows.  The
HELP virtual screen partially overlays the PARM screen.

HELP text is maintained easily because every line on the
screen has at least one variable assigned to it containing HELP
information.  The variables are called text.x.y (where x = the
line number on the screen).

For your own defaults this EXEC makes use of the standard
GLOBALV principle of VM/CMS.  By doing this your
defaults are saved in a file called LASTING GLOBALV A and
exist across CMS sessions.


SCR EXEC

/* This EXEC helps us in scripting our documents                      */
/********************************************* Save our settings ******/
 call saveset SCRIPT                        /* This saves the settings*/
'cp set emsg off'                           /* No emsg messages       */
'cp set imsg off'                           /* No imsg messages       */
'cp set conceal on'                         /* CP mode not allowed!   */
/********************************************* Init some variables ****/
 module = 'SCRIPT'                          /* The script module      */
 scrifn = '........'                        /* Input  filename        */
 scrift = '........'                        /* Input  filetype        */
 scrifm = 'A'                               /* Input  filemode        */
 scrofn = 'SCRIPT'                          /* Output filename        */
 scroft = 'OUTPUT'                          /* Output filetype        */
 scrofm = 'A'                               /* Output filemode        */
 curlin =  6                                /* Current line number    */
 curcol = 23                                /* Current column number  */
 messag = ' '                               /* Message field          */
/********************************************* Define some help text **/
 text.4.1  = 'Enter filename, filetype'     /* The second qualifier   */
 text.4.2  = 'and filemode of the SCRIPT'   /* points to the line on  */
 text.4.3  = 'file you want to process.'    /* the screen.            */
 text.5.1  = 'Enter the name of a profile'  /* Max. 12 help lines can */
 text.5.2  = 'or select the default.'       /* be entered.            */
 text.6.1  = 'Where do you want the output?'
 text.6.2  = ' '
 text.6.3  = 'TERM    = terminal'
 text.6.4  = 'LINEPRT = line printer'
 text.6.5  = 'PAGEPRT = page printer'
 text.6.6  = 'FILE    = CMS file'
 text.9.1  = 'Format output device:'
 text.9.2  = 'TERM'
 text.9.3  = '1403W6'
 text.9.4  = '3820A'
 text.9.5  = '3820A90'
 text.9.6  = '3820A180'
 text.9.7  = '3820A270'
 text.9.8  = '3820L'
 text.9.9  = '3820A4'
 text.9.10 = '3820B4'
 text.9.11 = '3820B5'
 text.9.12 = 'STAIRS'
 text.10.1 = 'To resolve forward and backward'
 text.10.2 = 'references it is sometimes'
 text.10.3 = 'necessary to process a source'
 text.10.4 = 'document more than once.'
 text.10.5 = 'Usually no more than twice is'
 text.10.6 = 'necessary.'
 text.10.7 = ' '
 text.10.8 = 'Enter 1, 2 or 3.'
 text.11.1 = 'Is an index wanted?'
 text.11.2 = 'Leave blank for NO or type'
 text.11.3 = 'INDEX'
 text.12.1 = 'What to do if errors occur?'
 text.12.2 = 'NOCONT'
 text.12.3 = 'CONTINUE'
 text.13.1 = 'Enter the number of copies you'
 text.13.2 = 'want.'
 text.14.1 = 'Pages you want processed'
 text.14.2 = 'For example: 5 to 10'
 text.14.3 = 'or           3 to 20.'
 text.14.4 = 'More than one range is'
 text.14.5 = 'possible.'
 text.15.1 = 'You can specify a BIND'
 text.15.2 = 'distance in inches, cm,'
 text.15.3 = 'characters, etc.'
 text.16.1 = 'Here you can specify'
 text.16.2 = 'several processing options'
 text.16.3 = 'such as duplexing, etc.'
 text.16.4 = 'Refer to the appropriate'
 text.16.5 = 'manuals for more information.'
 text.98.1 = 'Wrong function key used.'
 text.99.1 = 'Move the cursor to get info'
 text.99.2 = 'about other fields.'
/********************************************* Choose defaults ********/
 output = 'TERM'                            /* Default output=terminal*/
 call deflts_retrieve                       /* Get globalv fields     */
 if   output = '' then                      /* No globalv fields found*/
      call deflts_term                      /* Get system defaults    */
/********************************************* Get the arguments ******/
 if   arg() > 0 then                        /* Are there any?         */
      parse arg scrifn scrift scrifm .      /* Put them in variables  */
/********************************************* Define new panels ******/
'set  fullscreen on'                        /* Use fullscreen facility*/
'del  win STATUS'                           /* Delete all the stuff   */
'del  vsc STATUS'                           /* we don't need!         */
'del  win NETWORK'
'del  vsc NETWORK'
'del  win WARNING'
'del  vsc WARNING'
'del  win MESSAGE'
'del  vsc MESSAGE'
'del  win PARM'                             /* Delete and define the  */
'del  vsc PARM'                             /* PARM screen            */
'def  vsc PARM 24 80 00 00 (pr'
'def  win PARM 24 80 01 01 (nop nob'
'show win PARM on PARM'
'set  location PARM off'                    /* Don't show row, column */
'del  win HELP'                             /* Delete and define the  */
'del  vsc HELP'                             /* HELP screen            */
'def  vsc HELP 13 32 01 00 (pr'
'def  win HELP 13 33 04 48 (pop nob'
'show win HELP on HELP'
'set  location HELP off'                    /* Don't show row, column */
'del  win VIEW'                             /* Delete and define the  */
'del  vsc VIEW'                             /* VIEW screen            */
'def  vsc VIEW 99 160 00 00 (pr'
'def  win VIEW 18  80 04 01 (nop nob'
'set  location VIEW off'                    /* Don't show row, column */
'route *   to HELP (ala'                    /* Route all CP/CMS stuff */
'route CMS to VIEW'                         /* to our own vscreens    */
'hide  win CMS on VIEW'                     /* but don't show CMS yet */
/********************************************* Lets show the 1st scrn */
 do   forever                               /* Until we enter key PF3 */
      call build_command                    /* Establish the command  */
     'write vsc PARM 01 01 12 (       field' date()
     'write vsc PARM 01 22 17 (     h field SCRIPT PROCESSOR'
     'write vsc PARM 01 67 14 (       field' graf() time()
     'write vsc PARM 02 01 80 (       field' copies('=',79)
     'write vsc PARM 04 01 22 (       field Processing document:'
     'write vsc PARM 04 22 09 (nopr h field' scrifn
     'write vsc PARM 04 31 09 (nopr h field' scrift
     'write vsc PARM 04 40 03 (nopr h field' scrifm
     'write vsc PARM 05 01 21 (       field with profile       :'
     'write vsc PARM 05 22 09 (nopr h field' profil
     'write vsc PARM 06 01 21 (       field Direct output to   :'
     'write vsc PARM 06 22 08 (nopr h field' output
     'write vsc PARM 08 01 09 (       field Options:'
     'write vsc PARM 09 01 21 (       field Formatting for dev.:'
     'write vsc PARM 09 22 09 (nopr h field' device
     'write vsc PARM 10 01 21 (       field Formatting passes  :'
     'write vsc PARM 10 22 02 (nopr h field' passes
     'write vsc PARM 11 01 21 (       field Index option       :'
     'write vsc PARM 11 22 06 (nopr h field' indopt
     'write vsc PARM 12 01 21 (       field If errors detected :'
     'write vsc PARM 12 22 09 (nopr h field' errors
     'write vsc PARM 13 01 21 (       field Number of copies   :'
     'write vsc PARM 13 22 03 (nopr h field' copies
     'write vsc PARM 14 01 21 (       field Pages to process   :'
     'write vsc PARM 14 22 26 (nopr h field' pagenr
     'write vsc PARM 15 01 21 (       field Bind option        :'
     'write vsc PARM 15 22 16 (nopr h field' binopt
     'write vsc PARM 16 01 21 (       field SYSVAR symbols     :'
     'write vsc PARM 16 22 26 (nopr h field' sysvar
     'write vsc PARM 18 01 21 (     h field The SCRIPT command:'
     'write vsc PARM 18 22 58 (       field' procop1
     'write vsc PARM 19 22 58 (       field' procop2
     'write vsc PARM 20 22 58 (       field' procop3
     'write vsc PARM 21 22 58 (       field' procop4
     'write vsc PARM 23 01 06 (     h field Keys:'
     'write vsc PARM 23 07 74 (       field 1=Help 3=End 5=Save status'
     'write vsc PARM 24 07 74 (       field 8=File 9=Terminal',
     '10=Line printer 11=Page printer 12=Retrieve status'
     'cur   vsc PARM' curlin curcol         /* Put the cursor on spot */
     'waitr vsc PARM'                       /* and receive the screen */
      keytyp = waitread.1                   /* The key used           */
      curlin = word(waitread.2,2)           /* Line-number cursor     */
      curcol = word(waitread.2,3)           /* Column-number cursor   */
      do   i1 = 3 to waitread.0             /* Process all variables  */
                                            /* Get position and data  */
           inppos = word(waitread.i1,2)||word(waitread.i1,3)
           inpdat = translate(subword(waitread.i1,4))
           if   inpdat = '' then            /* Field with ERASE/EOF?  */
                inpdat = ' '                /* Make it blank          */
           select                           /* Map data into fields   */
           when inppos =  422 then
                scrifn = inpdat
           when inppos =  431 then
                scrift = inpdat
           when inppos =  440 then
                scrifm = inpdat
           when inppos =  522 then
                profil = inpdat
           when inppos =  622 then
                output = inpdat
           when inppos =  922 then
                device = inpdat
           when inppos = 1022 then
                passes = inpdat
           when inppos = 1122 then
                indopt = inpdat
           when inppos = 1222 then
                errors = inpdat
           when inppos = 1322 then
                copies = inpdat
           when inppos = 1422 then
                pagenr = inpdat
           when inppos = 1522 then
                binopt = inpdat
           when inppos = 1622 then
                sysvar = inpdat
           otherwise nop
           end
      end
      select                                /* Process the key entered*/
      when keytyp = 'PFKEY  1' then         /* Want some help?        */
           call help_parms
      when keytyp = 'PFKEY  3' then         /* Finish this exec?      */
           call end_exec
      when keytyp = 'PFKEY  5' then         /* Save our own defaults? */
           call deflts_save
      when keytyp = 'PFKEY  8' then         /* Get system defaults?   */
           call deflts_file
      when keytyp = 'PFKEY  9' then         /* Get system defaults?   */
           call deflts_term
      when keytyp = 'PFKEY 10' then         /* Get system defaults?   */
           call deflts_line
      when keytyp = 'PFKEY 11' then         /* Get system defaults?   */
           call deflts_page
      when keytyp = 'PFKEY 12' then         /* Retrieve own defaults? */
           call deflts_retrieve
      when keytyp = 'ENTER   ' then         /* Process the input?     */
           call process_input
      otherwise do                          /* Wrong key, give message*/
           curlin = 98
           call help_parms
           end
      end
 end
/********************************************* Build SCRIPT command ***/
build_command:
 procop1 = module scrifn scrift scrifm '( PROFILE('profil') QUIET'
 procop2 ='DEVICE('device') FPASSES('passes') BIND('binopt')' indopt
 procop3 = 'FILE('scrofn scroft scrofm') SYSVAR('sysvar')'
 procop4 ='PAGE('pagenr')' errors ')'
return
/*************************** PFKEY 1 ********* Lets show the helpinfo */
help_parms:
'clear vsc HELP'                            /* Clear virtual screen   */
 if  symbol('text.'curlin'.1') = 'VAR' then /* Does text exist?       */
      i1 = curlin                           /* I1 is text linenumber  */
 else i1 = 99                               /* Special text           */
 if   curlin > 24 then                      /* Special text processed?*/
      curlin = 6                            /* Put cursor back on spot*/
'write vsc HELP 01 01 32 (res h field Help info:'
 do   i2 = 1 to 12                          /* Max. 12 help-lines     */
      if   symbol('text.'i1'.'i2) = 'LIT' then
           leave
     'write vsc HELP' i2 '01 32 (field' text.i1.i2
 end
return
/*************************** PFKEY 3 ********* Leave this exec ********/
end_exec:                                   /* First do some cleaning */
'erase DSMUTTOC SCRIPT A'                   /* Erase workfile script  */
'erase' scrofn scroft scrofm                /* Erase outpfile script  */
'clear vsc PARM'                            /* Clean the mess we made */
'clear vsc HELP'                            /* so we don't get <MORE> */
'clear vsc VIEW'                            /* if this exec ends      */
'route *   to CMS'                          /* Route all to vsc CMS   */
'show  win CMS on CMS'                      /* CMS back to normal     */
'del   win PARM'                            /* Delete all the screen  */
'del   vsc PARM'                            /* definitions we used    */
'del   win HELP'
'del   vsc HELP'
'del   win VIEW'
'del   vsc VIEW'
'set   fullscre off'                        /* End fullscreen facilty */
 call restset SCRIPT                        /* Restore our settings   */
 exit                                       /* End this exec          */
return
/*************************** PFKEY 5 ********* Save our own defaults **/
deflts_save:                                /* Use LASTING GLOBALV A  */
'globalv select SCR'left(output,4) 'putp
 output device passes indopt errors binopt profil pagenr copies sysvar'
'globalv init'
return
/*************************** PFKEY 8 ********* Defaults for FILE ******/
deflts_file:
 profil = 'DSMPROF3'                        /* Default profile DCF    */
 pagenr = '* TO *'                          /* Process all pages      */
 copies = 1                                 /* Number of copies 1     */
 sysvar = 'D YES'                           /* Some process options   */
 output = 'FILE'                            /* Output device file     */
 device = '3820A4'                          /* Formatting pageprinter */
 passes = '2'                               /* Formatting passes 2    */
 indopt = 'INDEX'                           /* Index option YES       */
 errors = 'NOCONT'                          /* If errors no continue  */
 binopt = '1i 1i'                           /* Bind option            */
return
/*************************** PFKEY 9 ********* Defaults for TERMINAL **/
deflts_term:
 profil = 'DSMPROF3'                        /* Default profile DCF    */
 pagenr = '* TO *'                          /* Process all pages      */
 copies = 1                                 /* Number of copies 1     */
 sysvar = 'D YES'                           /* Some process options   */
 output = 'TERM'                            /* Output device terminal */
 device = 'TERM'                            /* Formatting terminal    */
 passes = '1'                               /* Formatting passes 1    */
 indopt = ' '                               /* Index option NO        */
 errors = 'NOCONT'                          /* If errors no continue  */
 binopt = '2 2'                             /* Bind option            */
return
/*************************** PFKEY 10 ******** Defaults for LINE-PRINT*/
deflts_line:
 profil = 'DSMPROF3'                        /* Default profile DCF    */
 pagenr = '* TO *'                          /* Process all pages      */
 copies = 1                                 /* Number of copies 1     */
 sysvar = 'D YES'                           /* Some process options   */
 output = 'LINEPRT'                         /* Output device lineprt  */
 device = '1403W6'                          /* Formatting lineprinter */
 passes = '2'                               /* Formatting passes 2    */
 indopt = 'INDEX'                           /* Index option YES       */
 errors = 'NOCONT'                          /* If errors no continue  */
 binopt = '1i 1i'                           /* Bind option            */
return
/*************************** PFKEY 11 ******** Defaults for PAGE-PRINT*/
deflts_page:
 profile = 'DSMPROF3'                       /* Default profile DCF    */
 pagenr = '* TO *'                          /* Process all pages      */
 copies =  1                                /* Number of copies 1     */
 sysvar = 'D YES'                           /* Some process options   */
 output = 'PAGEPRT'                         /* Output device pageprt  */
 device = '3820A4'                          /* Formatting pageprinter */
 passes = '2'                               /* Formatting passes 2    */
 indopt = 'INDEX'                           /* Index option YES       */
 errors = 'NOCONT'                          /* If errors no continue  */
 binopt = '1i 1i'                           /* Bind option            */
return
/*************************** PFKEY 12 ******** Retrieve own defaults **/
deflts_retrieve:
'globalv select SCR'left(output,4) 'get
 output device passes indopt errors binopt profil pagenr copies sysvar'
 if   output = '' then                      /* There is nothing!      */
      call deflts_term                      /* Get defaults terminal  */
return
/*************************** ENTER KEY ******* Do some processing *****/
process_input:
 call build_command                         /* Establish the command  */
'write vsc PARM 04 22 09 (h field' scrifn   /* Rebuild the screen     */
'write vsc PARM 04 31 09 (h field' scrift   /* so we see the changes  */
'write vsc PARM 04 40 03 (h field' scrifm   /* we have made           */
'write vsc PARM 05 22 09 (h field' profil
'write vsc PARM 06 22 08 (h field' output
'write vsc PARM 09 22 09 (h field' device
'write vsc PARM 10 22 02 (h field' passes
'write vsc PARM 11 22 06 (h field' indopt
'write vsc PARM 12 22 09 (h field' errors
'write vsc PARM 13 22 03 (h field' copies
'write vsc PARM 14 22 26 (h field' pagenr
'write vsc PARM 15 22 16 (h field' binopt
'write vsc PARM 16 22 26 (h field' sysvar
'write vsc PARM 18 22 58 (  field' procop1
'write vsc PARM 19 22 58 (  field' procop2
'write vsc PARM 20 22 58 (  field' procop3
'write vsc PARM 21 22 58 (  field  procop4
'clear vsc HELP'                            /* Clear the HELP screen  */
'write vsc HELP 01 01 32 (res h field Input accepted...'
'cur   vsc PARM 1 2'                        /* Put the cursor on spot */
'refresh'                                   /* Refresh the screen     */
'cp sleep 1 sec'                            /* Take a second          */
'write vsc HELP 01 01 32 (res h field Processing...'
'cur   vsc  PARM 1 2'                       /* Put the cursor on spot */
'refresh'                                   /* Refresh the screen     */
'erase' scrofn scroft scrofm                /* Erase old SCRIPT files */
'erase' scrifn scroft 'A'                   /* if they still exist    */
'clear vsc VIEW'                            /* Clear the VIEW screen  */
 procop1 procop2 procop3 procop4            /* Lets do some scripting!*/
 retcd = rc                                 /* Save returncode        */
                                            /* What is size of output?*/
'listfile' scrofn scroft scrofm '(alloc noh stack'
 if   rc > 0 then                           /* No output!             */
      size = 0                              /* so there is no size    */
 else pull . . . . . size .                 /* Use size for paging    */
'write vsc PARM 23 07 74 (field 3=End'        /* PF-keys to use       */
'write vsc PARM 24 07 74 (field',
'7=Page backward 8=Page forward 10=Page left 11=Page right'
 if   retcd > 0 then                        /* Some error occurred?   */
      call view_error                       /* Go look at it          */
 if   keytyp = 'ENTER   ' & size > 0 then   /* Continue processing?   */
      call process_output                   /* Lets do it             */
'clear vsc HELP'                            /* Put returncd on screen */
'write vsc HELP 01 01 32 (res h field Returncode:' retcd
return
/********************************************* View what's gone wrong */
View_error:
'show win VIEW on VIEW'                     /* Show the screen        */
 do   forever
     'cur   vsc PARM 1 2'                   /* Put the cursor on spot */
     'waitr vsc VIEW'                       /* Receive the screen     */
      keytyp = waitread.1                   /* The key used           */
      select
      when keytyp = 'ENTER   ' then         /* Seen enough errors?    */
           leave
      when keytyp = 'PFKEY  3' then         /* Want to go back?       */
           leave
      when keytyp = 'PFKEY  7' then         /* Page backward?         */
          'scroll backward VIEW'
      when keytyp = 'PFKEY  8' then         /* Page forward?          */
          'scroll forward  VIEW'
      when keytyp = 'PFKEY 10' then         /* Shift page?            */
          'scroll left     VIEW 40'
      when keytyp = 'PFKEY 11' then         /* Shift page?            */
          'scroll right    VIEW 40'
      otherwise nop                         /* Do nothing, wrong key  */
      end
 end
'hide win VIEW on VIEW'                     /* Hide the screen again  */
return
/********************************************* What to do with output?*/
process_output:
 select
 when output = 'FILE'    then               /* Make a diskfile?       */
     'rename' scrofn scroft scrofm scrifn scroft 'A1'
 when output = 'TERM'    then               /* Want it on terminal?   */
      call view_output
 when output = 'LINEPRT' then               /* To a line-printer?     */
     'print'  scrofn scroft scrofm '(cc'
 /* Normally we use here a connection to another CPU with a page      */
 /* printer. Now we just make a CMS file formatted for a page printer.*/
 /* You may write some own coding to handle this file                 */
 when output = 'PAGEPRT' then               /* To a page-printer?     */
     'rename' scrofn scroft scrofm scrifn scroft 'A1'
 otherwise nop                              /* Do nothing             */
 end
return
/********************************************* Look at our ouput ******/
view_output:
'show win VIEW on VIEW'                     /* Show the screen        */
 pointer = 1                                /* Line pointer in file   */
 do   forever                               /* Until we push PF3      */
     'clear vsc VIEW'                       /* Clear the vscreen      */
                                            /* and put some info on it*/
     'execio 18 diskr' scrofn scroft scrofm pointer '(fini STE OUTP.'
      do   i = 1 to outp.0
          'write vsc VIEW' i '1 160 (field' outp.i
      end
     'cur   vsc PARM 1 2'                   /* Put the cursor on spot */
     'waitr vsc VIEW'                       /* and receive the screen */
      keytyp = waitread.1                   /* The key used           */
      select
      when keytyp = 'ENTER   ' then         /* Seen enough output?    */
           leave
      when keytyp = 'PFKEY  3' then         /* Go back?               */
           leave
      when keytyp = 'PFKEY  7' then         /* Page backward?         */
           pointer = pointer - 18
      when keytyp = 'PFKEY  8' then         /* Page forward?          */
           pointer  = pointer + 18
      when keytyp = 'PFKEY 10' then         /* Shift page?            */
          'scroll l VIEW 40'
      when keytyp = 'PFKEY 11' then         /* Shift page?            */
          'scroll r VIEW 40'
      otherwise nop                         /* Wrong key, do nothing  */
      end
      if   pointer < 0 then                 /* Gone back too far?     */
           pointer = size - 18              /* Show last screen       */
      if   pointer > size then              /* Gone forward too far?  */
           pointer = 1                      /* Show first screen      */
 end
'hide win VIEW on VIEW'                     /* Hide the screen again  */
return

A A J Weesnaar
Systems Programmer (The Netherlands)

