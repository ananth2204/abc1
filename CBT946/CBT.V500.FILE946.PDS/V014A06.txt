 CMS news facility

ÝEditor's note: this is an alternative approach to the one that appeared on page
40 of issue 13.¨

Our installation found VM's LOGMSG facility too limiting for disseminating
information to our users as it is not easily edited, cannot be displayed
selectively, and does not provide a history of previous news items.

Hence, I have written a comprehensive news facility that maintains any number of
specialised news files, allows a user to select the news files of interest,
records which news items the user has or has not seen, thus ensuring that he
sees each news item at least once, allows the user to selectively display old
news items, and allows multiple users to add news items to the system.

The format of the NEWS command is:

+--------+----------------------------------------------------------+
|        |                                                          |
|        |            +-                 -+                         |  |
|            |                   |                         |  | NEWS   |
newsfile   | ( unread          |                         |  |        |
|                   |                         |  |        |    *       |   all
|                         |  |        |            |   latest          |
|  |        |            |   after mm/dd/yy  |                         |  |
|            |   item  nn        |                         |  |        |
|   list            |                         |  |        |            |   check
|                         |  |        |            |   avail           |
|  |        |            |   post            |                         |  |
|            |                   |                         |  |        |
+-                 -+                         |  |        |
|  +--------+----------------------------------------------------------+

%    newsfile:  the name of the newsfile you would like to interrogate.
Available newsfiles are VM, RAMIS, and APL.  The default newsfile is VM, which
is the main, general newsfile.

%    unread:  the news facility will remember which news items you have seen and
display only those you have not seen.  Therefore, each news item will be
presented to you at least once.  This is the default option.  NOTE:  This option
is valid only if you have a read/write A disk.

%    all:  all news items will be re-displayed for reading.

%    latest:  only the most recent news item will be re-displayed.

%    after mm/dd/yy:  only those news items occurring after the specified date
will be displayed.

%    item nn: displays a specific news item.  nn is the number assigned to a
news item by the list option.

%    list:  displays only the heading line of each news item entry.

%    check: returns control with a return code of 1 if there are any outstanding
news items not yet displayed.  Useful for EXEC writers.

%    avail:  list the various news files available.  The general news file name
is VM.  Other specialised news files are RAMIS and APL.

%    post:  allows you to post an entry to the named news file provided you are
authorised to do so.

News files are maintained on a separate mini-disk so you need only tailor the
link statement within the EXEC.  The news files are simply CMS files of the
following format:

DATE: January   13 87 - This is the heading or title of this news item

These lines would represent the
detail of the news item.


NEWS EXEC

/*  The CMS News Facility
arg newsname '(' process option .  /* Parse incoming arguments      */
if newsname = '?' then do          /* Give him some help            */
                      'HELP ADI NEWS (format'
                       exit
                       end
if newsname = '' then newsname = 'VM' /*Default newsfile is VM NEWS */
parse value  '0 0 0 0 1' WITH
  to_term_output  cr_retcode dl_ recno datelast_eof detail
                                   /*Initialise switches and counter*/
'GETFMADR'                         /* Get an available mode         */
pull . freemode freecuu .          /* ... and address               */
'EXECIO * CP (SKIP STRING LINK xxxxxxx 19A' freecuu 'RR'
'SET CMSTYPE HT'                   /* Link to the News disk         */
'ACCESS' free cuu freemode         /* Access the News disk          */
'SET CMSTYPE RT'
'STATE' newsname 'NEWS *'          /*If the News file does not exist*/
if rc¬=0   then do                 /* .. then exit immediately      */
                sc = rc
                call release_disk
                exit sc
                end
'MAKEBUF'                          /* Fence our buffer usage        */
'QUERY DISK R/W (STACK'            /* Determine whether we          */
pull label . mode .                /* ..have a read/write disk      */
if label = 'NO'                    /* ..or not                      */
   then rw_disk = 0
   else do
        rw_disk = 1                /* ..if we do have a r/w disk    */
        pull label . mode .        /* ..then pull the mode          */
        mode = mode||0             /* ..make it secure              */
        'DROPBUF'                  /* ..and trash the leftovers     */
        end
address command 'ESTATE DateLast NewsRead' mode
                                   /* Determine whether a           */
if rc = 0                          /* ..DateLast NewsRead file      */
   then datelast_exists = 1        /* ..exists                      */
   else datelast_exists = 0        /* ..or does not exist           */
if newsname = '*'                  /* If we're doing all news files */
   then do                         /* ..and we have                 */
      if datelast_exists           /* ..a DateLast NewsRead file    */
        then do until datelast_eof /*.then loop thru all the records*/
           to_term_output = 0      /* ..reset term output counter   */
           call read datelast      /* ..read DateLast file          */
           if ¬datelast_eof then call main_select
                                   /* ..if not at eof, then do it   */
          end                      /* end of 'then do until datelast*/
         else do 1                 /* else if there is no DateLast  */
            say 'You are a new user to the News Facility'
                                   /* ..then give the user a list   */
            say 'This is a current list of News files'
                                   /* ..of News files available     */
            say
            'LISTFILE * NEWS * (FNAME'
            say
            say 'Please type in the names of the News files',
             'of interest to you'  /* ..and prompt him for the files*/
             pull news_names        /* ..that interest him           */
            if news_names='' then leave
                                   /* ..if no interest then leave   */
            do x=1 to words(news_names)
                                   /* Loop thru each word entered   */
              news_name=left(word(news_names,x),8,' ')
                                   /* ..pull news_name out of list  */
              'ESTATE' news_name 'NEWS *'
                                   /* ..if its valid then add it to */
              if rc=0 then address command 'EXECIO 1 DISKW DateLast
                   NewsRead' mode 'FINIS STRING' news_name '000000'
           end                     /* ....the DateLast NewsRead file*/
           do until datelast_eof /* Process DateLast NewsRead file  */
                                       /*   nowthat it exists       */
              to_term_output = 0   /* ..reset term output counter   */
              call read_datelast   /* ..read DateLast file          */
              if ¬datelast_eof then call main_select
                                   /* ..if not at eof, then do it   */
           end                     /* end of 'do until datelast_eof'*/
       end                         /* end of 'else do 1'
   end                           /* end of 'then do' of 'if datelast*/
else do                           /* a specific newsname was entered*/
  if datelast_exists              /* ..and a DateLast file exists   */
     then do                    /* ..so read the DateLast file until*/
              do until (rd_newsname = newsname)|datelast_eof
                     /* we find the newsname or'we reach end of file*/
                call read_datelast /* ..read the DateLast file      */
             end                   /* ..end of do until             */
             call main_select      /* ..and drive the mainline      */
          end                      /*end of then do of 'if datelast */
     else do                     /*there is no DateLast NewRead file*/
           datelast_eof = 1; rd_newsname=newsname; rd_datelast='00000'
                                   /* ..set eof indicator, etc.     */
           call main-select        /* ..and drive the mainline      */
          end                      /* end of prior 'else do'        */
   end
call release_disk                  /*exit with the check rte retcode*/
exit cr _retcode
main-select:                       /*Selects the appropriate process*/
newsfile_eof = 0                   /* Set newsfile_eof switch off   */
select                             /* Select the appropriate        */
   when process = ''       then call unread_rte /*process routine   */
   when process = 'UNREAD' then call unread_rte
   when process = 'ALL'    then call all_rte
   when process = 'LATEST' then call latest_rte
   when process = 'AFTER'  then call after_rte
   when process = 'ITEM'   then call item_rte
   when process = 'LIST'   then call list_rte
   when process = 'CHECK'  then call check_rte
   when process = 'AVAIL'  then call avail_rte
   when process = 'POST'   then call post-rte
   otherwise call invalid_process
end
if (process ¬= 'ITEM')&(process¬= 'LIST')&(process¬= 'CHECK')&(cr_retcode=0)
                    /* Update the DateLast NewsRead  */
   then call update_datelast       /* ..record if the process was   */
return                             /* ..not ITEM,LIST, or CHECK     */
post_rte:                          /* Post a news item routine      */
if newsname='*'                    /* If newsname was '*'           */
   then do                         /* ..then exit with an error     */
        say 'You must enter a specific name rather than *'
        call release_disk
        exit
        end
if ¬rw_disk                        /* We need a r/w disk to         */
    then do                        /* ..construct the newsitem      */
          say 'A read/write disk is necessary to use the POST facility'
                                   /* ..exit with an error if none  */
         return
         end
push 'macro newspost create'       /* if security is passed then    */
'XEDIT' newsname 'TEMPNEWS' mode '(NOPROFILE'
                                   /* ..enter XEDIT to create news  */
address command 'ESTATE' newsname 'TEMPNEWS' mode
                             /* Did user create news while in XEDIT?*/
if rc = 0                          /* ..yes */
  then do                          /* ..so  */
    push 'macro newspost edit'     /* ..reenter XEDIT to format the */
    'XEDIT' newsname 'TEMPNEWS' mode
                                   /* ..news item to our liking     */
    'CLRSCRN'
    do count=1 to 6            /* Will attempt to obtain a write*/
      'EXECIO * CP (SKIP STRING LINK xxxxxxx 19A' freecuu 'M xxxxxxxx'
                                   /* ..to the news disk six times  */
      sc=rc
      if sc = 0 then leave         /* Got a write link on 1st try   */
      if count=1                   /* On 1st time thru,             */
         then do                   /* ..tell the user that          */
              say 'Waiting for write access to the NEWS disk'
                                   /* ..we are waiting for write    */
              say 'Maximum wait will be 30 seconds'
                                   /* ..access to the news disk     */
              end
      say count*5                  /*Let the user know we are still */
      'CP SLEEP 5 SEC'             /* ..trying, wait 5 secs before  */
      end                          /* we try again                  */
    if sc¬=0                       /* if we still can't get write   */
      then do                      /* ..access, then tell the user  */
           say 'Unable to obtain a write link to the news file'
           say 'contact Tech Support'
           return                  /* ..and end this subroutine     */
           end
   'SET CMSTYPE HT'                /* We have write access to the   */
   'ACCESS' freecuu free mode      /* .. news disk, so access and   */
   'SET CMSTYPE RT'                /* .. update the newsfile        */
   'COPYFILE' newsname 'TEMPNEWS' mode newsname 'NEWS' freemode
       newsname 'UPDTNEWS' freemode '(replace'
    sc=rc
    if sc=0                        /* If the COPYFILE was good      */
     then do                       /* .. then                       */
       'ERASE' newsname 'NEWS' freemode
                                   /* ..erase the old newsfile      */
       'RENAME' newsname 'UPDTNEWS' freemode newsname 'NEWS' freemode||1
                                   /* ..rename the updated newsfile'*/
       'ERASE' newsname'TEMPNEWS' mode/* ..cleanup the news workfile */
       say 'News item has been posted'/*..and tell user about success*/
       end
    else say 'ERROR' sc 'from COPYFILE command, unable',
                         ' to post at this time'
                                   /* ..or of failure on bad copy   */
    end
  else say 'No posting will occur' /* User QQUITed on the POST macro*/
return
unread_rte:                        /* Display Unread newsitems      */
do newsitem=1 until (rd_datelast > rn_newsdate)|(newsfile_eof
                                   /* ..until the datelast read date*/
 call read_newsfile              /* ..is >= to the newsfile date  */
 if (rd_datelast <= rn_newsdate)&(¬newsfile_eof) then call
    term_output newsitem newsline  /* ..outputing it to the terminal*/
end
return
all_rte:                           /* Display all newsitems         */
 do newsitem=1 until newsfile_eof   /* ..until newsfile is at eof    */
   call read_newsfile              /* ..                            */
   if ¬newsfile_eof then call term_output newsitem newsline
end                                /* ..outputing it to the terminal*/
return
item_rte:                          /* Dsplay a specific news item   */
detail = 0                         /*Set detail switch off initially*/
itemno=option                      /*Pick up the item number given  */
if datatype(itemno,N) then nop
                       else do
                            say 'item number is invalid - ' itemno
                            cr_retcode = 2
                            return
                            end
do newsitem=1 until newsitem > itemno
                                   /* Loop thru the newsfile until  */
   call read_newsfile              /* ..we've gotten the newsitem   */
   if (newsitem = itemno)&¬newsfile_eof
                                   /*..If we found it before hitting*/
      then do                      /* ..end of file then            */
           detail = 1              /* ..and reset the detail switch */
           call term_output newsitem newsline
                                   /* ..output it to the terminal   */
           end
end
return
after_rte:                         /* Display newsitems after a date*/
parse VAR option mm 3 . 4 dd 6 . 7 yy
                                   /* Parse given date into parts   */
ar_date = yy||mm||dd               /* Reformat it to yymmdd         */
if datatype(ar_date,N) then nop
                       else do
                            say 'date is invalid - ' option
                            say ar_date
                            cr_retcode = 2
                            return
                            end
do newsitem=1 until (ar_date >= rn_newsdate)|(newsfile_eof)
                                   /* Display the newsitems until   */
   call read_newsfile              /* ..the date given is greater or*/
   if (ar_date < rn_newsdate)&(¬newsfile_eof) then call term_output
   newsitem newsline               /* ..equal to the newsfile date  */
end
return
latest_rte:                        /* Display only the latest entry */
latest_no = option                 /* Pick up the number requested  */
if latest_no = '' then latest_no = 1
                                   /* Defaulting to one if none     */
do newsitem=1 until newsitem > latest_no
                                   /* Display newsitems until we    */
   call read_newsfile              /* have displayed the requested  */
   if (newsitem <= latest_no)&¬newsfile_eof
                                   /* number of latest entries      */
      then call term_output newsitem newsline
end
return
list_rte:                          /*List only the first line of the*/
detail = 0                         /* newsitems, set detail off     */
do newsitem=1 until newsfile_eof   /* Process entire newsfile       */
   call read_newsfile
   if ¬newsfile_eof                /* ..if newsfile isn't at eof    */
      then do                      /* ..then                        */
      detail = 1                   /* ..  allow output to the term  */
      call term_output newsitem newsline  /*  output the newsline   */
      detail = 0                   /* ..  disallow output to term   */
      end
 end
return
check_rte:                         /* Returns a non-zero return code*/
call read_newsfile                 /*..if there are changed newsitem*/
if rn_newsdate > rd_datelast then cr_retcode = cr_retcode +1
                                   /* If date of 1st newsitem is >  */
return                             /* ..the date we last looked at  */
avail_rte:
'LIST * NEWS * (FT'
call release_disk
exit
return
read_datelast:                     /* Reads the DateLast NewsRead   */
dl_recno = dl_recno + 1            /* ..remember which record we are*/
dateline='DATELINE'                /* ..initialize the var dateline */
address command 'EXECIO 1 DISKR DateLast NewsRead'
    mode dl_recno'(VAR' dateline   /* ..read the specific record    */
if rc = 0 then parse VAR dateline rd_newsname rd_datelast.
                                   /* ..parse the record into fields*/
    else if rc = 2 then do         /* ..if we hit end of file then  */
            datelast_eof = 1       /* ..set the end of file switch  */
            rd_newsname = newsname /* ..revert to specified newsname*/
            rd_datelast = '00000'  /* ..initialize datelast field   */
            end
         else do                   /* ..any other type of read error*/
            say 'Error reading datelast, rc=' rc
                                   /* ..is a catastrophic failure   */
            exit                   /* ..and cannot be dealt with    */
            end
return
update_datelast:                   /*Recording the DateLast NewsRead*/
if rw_disk                         /*If we have read/write access   */
  then do                          /* ..then                        */
    ud_newsname=left(rd_newsname,8,' ')
                                   /* ..extend newsname to 8 chars  */
    ud/date=right(date(S),6)       /* ..get today's date as yymmdd  */
    address command 'EXECIO 1 DISKW DateLast',
     ' NewsRead' mode dl_recno '(STRING' ud_newsname ud_date
    if rc ¬= 0                     /* Update the record             */
           then do                 /* Any error updating this file  */
                say 'Error updating datelast, rc=' rc
                                   /* ..is unacceptable and we are  */
                exit               /* ..unable to continue          */
                end
        end
return
read_newsfile:                     /* Routine to read the newsfile  */
do until (rn_hdr='DATE:')|(newsfile_eof)
                                   /* Do until a date header or eof */
newsline='NEWSLINE'                /* Initialize VAR newsline       */
address command 'EXECIO 1 DISKR' rd_newsname 'NEWS * (VAR' newsline
                                   /* Read next record of newsfile  */
if rc = 0                          /* If a good read                */
   then do                         /* .. then                       */
        parse VAR newsline rn_hdr rn_month rn_day rn_year .
                                   /* .. parse record into fields   */
        if rn_hdr = 'DATE:'        /* .. if we have a date header   */
           then do                 /* .. then                       */
              mm = find('January February March April May June July',
               'August September October November December',rn_month)
              mm = right(mm,2,'0') /* .. convert alpha month to mm  */
              rn_newsdate=rn_year||mm||rn_day /* convert to yymmdd  */
              end
           else call term_output newsline
                                   /*.. if this is not a date header*/
        end                        /* ..then just output to the term*/
    else if rc = 2 then newsfile_eof = 1
                                   /* If end of file then set switch*/
                   else do         /* ..else we have an error that  */
                        say 'Error reading' newsname 'NEWS, rc=' rc
                                   /* .. we cannot deal with.       */
                        exit
                        end
end
return
term_output                        /*All terminal output occurs here*/
to_term_output = to_term_output + 1/*# if lines outputed to terminal*/
if to_term_output = 1              /* If this is the 1st line of the*/
   then do                         /* ..newsfile displayed, then    */
        say ''                     /* ..output a blank line         */
        say '**** ' rd-newsname ' NEWS ****'
                                   /* ..and output the newsfile name*/
        end
parse arg output_line              /* Pick up the passed output line*/
if detail then say output_line     /* If we are displaying detail   */
return                             /* ..then do it, otherwise bypass*/
invalid_process:
say ' invalid operand - ' process
call release_disk
exit 2
release_disk:
'RELEASE' freemode
'EXECIO * CP (SKIP STRING DETACH ' freecuu
return

NEWSPOST XEDIT

/*  Support macro for the News exec */
parse arg process          /* Either create a post session or edit it */
if process='CREATE'               /* If creating a post session */
   then do                        /* .. then */
        'set prefix off'          /* ..set XEDIT accordingly */
        'set recfm v'
        'set scale off'
        'set trunc 77'
        'set ver 1 77'
        'set case m i'
        'input DATE:              /* ..create a news date header line */
        'cl :7'
        'cov' date(M)             /* ..with today's date */
        today=date(E)
        parse var today dd 3 . 7 yy
        'cl :17'                  /* ..complete with instructions */
        'cov' right(dd,2,'0') yy '- Overtype this comment with the',
                                    'TITLE of the news item'
        'cf'
        'add'                     /* .. and a blank line */
        'extract /cursor/'
        'cursor screen' cursor.1-1.25
                                  /* ..and position the cursor */
        end
   else do
        'set msgmode off'         /* .. so hide our changes */
        ':2'                      /* .. avoid the date header line */
        'ch // /*'             /* .. add two spaces to detail lines */
        'bot'                     /* .. goto the bot */
        'add'                     /* .. add a blank line */
        'file'                /* .. and file the news item workfile */
        exit
        end

Luke Marvin
 Systems Programming Manager
Analog Devices (USA)     ) Analog Devices 1987
































































