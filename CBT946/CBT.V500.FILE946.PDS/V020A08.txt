 Save and restore the console stack
Programs coded in Assembler or in a high-level language usually use linkage and
calling conventions.
The SAVE and RETURN macro used in Assembler programs usually assists you in
maintaining the conventions.
The XSTACK EXEC is similar to the above mentioned macros;  however, the users'
general purpose registers are not saved and restored but the users' console
stack is.
The XSTACK EXEC can be invoked from any EXEC2 or REXX EXEC or XEDIT macro or, if
you prefer, via SVC 202.
There is no limit in nesting console stacks;  however, since console stacks are
saved in virtual storage, virtual storage size is the only limitation.
The following example illustrates the use of the XSTACK EXEC:
/* example of XSTACK usage */
'ex xstack push' /* save the callers console stack */

'ex xstack pop'  /* restore the callers console stack */
'exit'
By default the stack will be cleared after PUSH and before POP unless you
specify KEEP as the second parameter.
&TRACE OFF
*%OPTIMIZED AT 15:50:58 ON 88/01/18
*%       N O T I C E:
*% THIS STATEMENT IS NECESSARY FOR THE OPTIMIZATION PROGRAM - VMFOPT
*% DE-OPTIMIZE THIS MACRO BEFORE MAKING ANY CHANGES USING - VMFDEOPT
&GOTO 20 -SKIPTEXT
   Function    : XSTACK
   Parameters  : &1 Operation: 'PUSH' or 'POP'
                 &2 Option: 'KEEP' retains the stack after PUSH or
                                   before POP
   Example     : XSTACK PUSH
   Description : Saves (PUSH) or restores (POP) the contents of the
                                   stack.
                 POP always restores the result of the last PUSH.
                 By default the stack will be cleared after PUSH &
                                   before POP.
   Returncodes : 00 No problems
                 04 Nothing to POP (underflow)
                 08 Error in passed parameters
-SKIPTEXT
&IF .&1 EQ .POP &GOTO 37 -POP
&IF .&1 NE .PUSH &EXIT 8
*
-PUSH GLOBALV SELECT $STCK# GET LVL#
&LVL# = 0&LVL# + 1
GLOBALV SELECT $STCK# PUT LVL#
SENTRIES
&CNT = &RC
&STACK &RC
&CASE M
&LOOP 3 UNTIL &CNT LT 0
&READ STRING &$LINE&CNT
GLOBALV SELECT $STCK#&LVL# PUT $LINE&CNT
&CNT = &CNT - 1
&IF .&2 NE .KEEP &EXIT 0
*
-POP &IF .&2 NE .KEEP DESBUF
GLOBALV SELECT $STCK# GET LVL#
&IF 0&LVL# EQ 0 &EXIT 4
GLOBALV SELECT $STCK#&LVL# GET $LINE0
&LOOP 3 UNTIL &$LINE0 EQ 0
GLOBALV SELECT $STCK#&LVL# GET $LINE&$LINE0
&STACK &$LINE&$LINE0
&$LINE0 = &$LINE0 - 1
&IF &1 NE POP &EXIT 0
GLOBALV SELECT $STCK#&LVL# PURGE
 &LVL# = &LVL# - 1
GLOBALV SELECT $STCK# PUT LVL#

A J M van Tol
Senior Systems Programmer (The Netherlands)  ) Xephon 1988





























































