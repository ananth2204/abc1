Problem assignment/management system

In our shop, as well as others around, the need for a trouble
reporting system arises by accident or by necessity. The system
that follows was written to help assign problems to various
personnel, allow management to search the database, and
extract data from the problem reports for processing by other
means such as a PC utility or mainframe report generator (the
extract utility can be used as a general purpose utility also).
Some of the features of the system are:

o      Fill out a trouble report and assign it to a VM user-id. The
      assignee will be notified via PROFS that there is an
      outstanding trouble report assigned to him/her, and be
      given the trouble ticket number as well as a brief
      description of the problem. A new problem number is
      automatically assigned.

o      Keep track of who the problem has been assigned to (in
      chronological order).

o      Allow update capability only to the person the problem is
      currently assigned to. This prevents others from updating
      the problem unless specifically assigned it.

      Allow printing of the report via PROFS HARDCOPY (this
      can be modified).

o      Search for a string of characters anywhere in the ticket,
      give a full screen list of the 'hits', and allow the user to
      select which one to view.

o      Search the database for problems assigned to a specific
      VM user-id, present a list for selection, and display that
      trouble ticket.

o      Extract data based on whom the problem is assigned to (it
      does this via LISTFILE), or extract all data into a flat file
      which can be further processed by other means. You may
      also create your own 'FLDLOC' file which would only
      select certain fields from the database for inclusion in the
      extract file. This type of selection is supported from the
      EXTRACT menu by specifying an alternate field control file.

The various screens that a user enters the data on are shown in
Figures 1 to 8.

In order to set up the problem system initially, you need to
have: LINKUSR EXEC (from issue 48 of VM Update) and
EXECSCRN MODULE (from issue 10 of VM Update), as well
as all of the following code. PROFS is optional but helpful.
You must also set up a user-id named PROBLEM and create a
191 mini-disk that is 1 cylinder in size (FB-512 may be
smaller) to hold the number which will be assigned to the next
problem (named PROBLEM NUMBER; it has LRECL of 7
and contains a 7 digit number of your choosing).

Also create a 291 mini-disk which will hold the problems
themselves. This size will vary. We use passwords which allow
anyone to update the mini-disk - however you may customize
this in accordance with your own site's requirements
(VMSECURE, RACF, etc).

You should always use the initial menu except for the extract
utility which may be used in line mode to facilitate add-on
options that you may come up with to allow pre-defined
extracts, etc. The problem system is started by issuing the
command PROBLEM on the command line. The extract utility
may be started either from the PROBLEM menu, or by issuing
the following format command (all parameters must be
supplied):

PROBEXTR user-id output_filename output_filetype allow_append
 control_file_name prompt_me

where user-id is the user-id who has been assigned the
problems. You may specify any syntax that is allowable by the
LISTFILE command for a filename (8 characters or less).
Output_filename is the filename portion of the output file you
want to create. Output_filetype is the filetype portion of the
output file you want to create. Allow_append may be Y or N to
specify if you want to append the extract file being created to
an extract file you've previously created. If you specify N and
the output file already exists, you'll be prompted for more
information. Control_filename is the filename of the xxxxxxxx
FLDLOC file you wish to use while extracting data from the
database. To use the default, either specify PROBADD or *.
Otherwise, you should create your own FLDLOC file by
trimming down the original PROBADD FLDLOC file to meet
your own needs. By doing this, you may only extract selected
fields. Prompt_me may be Y or N. You must specify one of
these values. If you specify Y, you are prompted before each
record is added to the extract file to confirm whether you will
accept the record or not.

The database has a filename the same as the problem number
which was assigned, and the filetype is the VM user-id that
currently 'owns' the problem. Only the person who 'owns' the
problem may update the file.


PROBADD EXEC

SIGNAL ON SYNTAX
ARG whattodo prob_filename;
whattodo = translate(whattodo);       /* make it uppercase            */
PARSE SOURCE PULL . fn . ;            /* who are we?                  */
'DESBUF';
/* ---------- See if working with incoming mail ----------- */
START:
/*   INITIALIZE variables here after this line  - total # panels      */
totpanel = 5
/*   Here ends the initialization of variables                        */
/*   Set DEFAULT VALUES after this line                               */
push 'MACRO PROBSDF1 FIELDS'
'XEDIT' fn 'FLDLOC * (NOPROF'
do queued()
  PARSE PULL  var.1 line.1 start.1 len.1 def_value
  def_value = strip(def_value)
  if def_value ¬= '' then do          /* if default value coded       */
     interpret var.1 '= def_value'
  end
  else do                             /* if NO default value coded    */
     interpret var.1 '= left('''',len.1,''_'')'
  end
end
if whattodo = '' then do
  probnum = PROBNUM();                /* Get a new problem number     */
  if probnum = 0 then do;             /* Unable to get new prob number*/
     say 'PROBADD: Unable to get new Problem number assignment.';
     say 'PROBADD: Contact VM Technical Support.'
     exit 16;
  end;
end;
/* ---   PRE-DEFINED VARIABLES     ----------- */
  'ID (STACK'; PARSE PULL . . NODE . NETNAME .;
  month = left(date(m),12,' ')
  day   = left(date(w),10,' ')
  time  = left(time(),8,' ')
  date  = left(date(u),8,' ')
  datej = left(date(j),6,' ')
  userid= left(userid(),8,' ')
  node  = left(node,8,' ')
  netname=left(netname,8,' ')
/* ----  End of pre-defined variables  -------------------*/
MSG = ' '
'DESBUF'
panel = 1
key   = ' '
if whattodo = 'OPENMAIL' then do

    CALL mailin;
end
BEGIN:                                /*  Start here to display       */
OPTIONS = ''                          /* reset any EXECSCRN options   */
if whattodo = 'PRINT' | whattodo = 'print' then nop
else do while panel ¬= 999
     CALL DISPLAY
     if key = '' | key = ' ' then do
        say '9ERROR:-EXECSCRN had error - Notify9SYSTEMS PROGRAMMER-'
        exit 0
     end
     if key = 'PFK07' | key = 'PFK19' then leave
     if key = 'PFK09' | key = 'PFK21' then do
           'HELP' fn
           key = 'ENTER'
           iterate
     end
     if key = 'PFK10' | key = 'PFK22' then panel = panel + 1
     if key = 'PFK11' | key = 'PFK23' then panel = panel - 1
     if key = 'PFK12' | key = 'PFK24' then panel = 999
     if (panel < 1 | panel > totpanel) & panel ¬= 999 then panel = 1
end
/*  If the user gets here, they pressed PF12 or PF7
      and they either want to get out, or file the ticket
    If the user was just viewing the form, just exit when they're
      done looking at it (with either PF7 or PF12)
*/
if key = 'PFK12' | key = 'PFK24' | whattodo = 'VIEW'  then do
   exit 0
end
RESTART:                 /* Start here to check all reqd fields again */
options = 'ALARM'        /*  sound alarm if reqd field not there      */

if whattodo = 'PRINT'  then nop;
else do
/*  Include the REQUIRED FIELD code after this line  - don't change   */
DO WHILE REPORTBY = '' | SUBSTR(REPORTBY,1,1) = '_'
  msg='WHO WAS IT REPORTED BY?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(REPORTBY) < length('REPORTBY') then do
    REPORTBY = left(REPORTBY,length('REPORTBY'),' ')
end
DO WHILE AGENCY = '' | SUBSTR(AGENCY,1,1) = '_'
  msg='WHAT IS THE AGENCY NAME?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(AGENCY) < length('AGENCY') then do
    AGENCY = left(AGENCY,length('AGENCY'),' ')
end
DO WHILE PHONE = '' | SUBSTR(PHONE,1,1) = '_'
  msg='WHAT IS THEIR PHONE NUMBER?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(PHONE) < length('PHONE') then do
    PHONE = left(PHONE,length('PHONE'),' ')
end
if length(UID) < length('UID') then do
    UID = left(UID,length('UID'),' ')
end
if length(RNODE) < length('RNODE') then do
    RNODE = left(RNODE,length('RNODE'),' ')
end
DO WHILE T = '' | SUBSTR(T,1,1) = '_'
  msg='WHAT IS THE PROBLEM TYPE?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(T) < length('T') then do
    T = left(T,length('T'),' ')
end
DO WHILE P = '' | SUBSTR(P,1,1) = '_'
  msg='WHAT IS THE PRIORITY?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(P) < length('P') then do
    P = left(P,length('P'),' ')
end
DO WHILE STATUS = '' | SUBSTR(STATUS,1,1) = '_'
  msg='STATUS? OPEN OR CLOSE?'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if length(STATUS) < length('STATUS') then do
    STATUS = left(STATUS,length('STATUS'),' ')
end
if length(OBY) < length('OBY') then do
    OBY = left(OBY,length('OBY'),' ')
end
DO WHILE ASSIGNTO = '' | SUBSTR(ASSIGNTO,1,1) = '_'
  msg='ASSIGN IT TO?  (ENTER A PROFS USERID - NO NICKNAME)'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end

assignto = strip(translate(assignto),,'_');
'EXECIO 0 CP (STRING SP PUN' assignto;
if rc ¬= 0 then do;
  msg='Invalid USERID in the ''Assigned to'' field.'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
if whattodo = 'OPENMAIL' then do;    /* if we're updating an existing */
                                     /* problem, check for re-assign  */
   howmany = words(assignlst);       /* see how many assignees there r*/
   thisone = word(assignlst,howmany) /* get the last one in list      */
   thisone = strip(thisone);         /* get rid of any blanks         */
   if thisone ¬= assignto then do;   /* it's been re-assigned         */
      assignlst = strip(assignlst)||' '||assignto;  /* new list       */
   end;
end;
else assignlst = translate(assignto); /* otherwise, this is the 1st   */
if length(ASSIGNTO) < length('ASSIGNTO') then do
    ASSIGNTO = left(ASSIGNTO,length('ASSIGNTO'),' ')
end
DO WHILE DESC1 = '' | SUBSTR(DESC1,1,1) = '_'
  msg='ENTER A DESCRIPTION PLEASE.'
  panel = 1
  call display panel key
  if key = 'PFK12' | key = 'PFK24' then exit 1
  SIGNAL RESTART
end
/* ------------- End of required fields checks -------------- */
if length(REPORTBY) < length('REPORTBY') then do
    REPORTBY = left(REPORTBY,length('REPORTBY'),' ')
end
if length(AGENCY) < length('AGENCY') then do
    AGENCY = left(AGENCY,length('AGENCY'),' ')
end
if length(PHONE) < length('PHONE') then do
    PHONE = left(PHONE,length('PHONE'),' ')
end
if length(UID) < length('UID') then do
    UID = left(UID,length('UID'),' ')
end
if length(RNODE) < length('RNODE') then do
    RNODE = left(RNODE,length('RNODE'),' ')
end
if length(T) < length('T') then do
    T = left(T,length('T'),' ')
end
if length(P) < length('P') then do
    P = left(P,length('P'),' ')
end
if length(STATUS) < length('STATUS') then do
    STATUS = left(STATUS,length('STATUS'),' ')
end
if length(DESC1) < length('DESC1') then do
    DESC1 = left(DESC1,length('DESC1'),' ')
end
if length(DESC2) < length('DESC2') then do
    DESC2 = left(DESC2,length('DESC2'),' ')
end
if length(DESC3) < length('DESC3') then do
    DESC3 = left(DESC3,length('DESC3'),' ')
end
if length(DESC4) < length('DESC4') then do
    DESC4 = left(DESC4,length('DESC4'),' ')
end
if length(DEVTYPE) < length('DEVTYPE') then do
    DEVTYPE = left(DEVTYPE,length('DEVTYPE'),' ')
end
if length(MODEL) < length('MODEL') then do
    MODEL = left(MODEL,length('MODEL'),' ')
end
if length(SERIAL) < length('SERIAL') then do
    SERIAL = left(SERIAL,length('SERIAL'),' ')
end
if length(SVCLASS) < length('SVCLASS') then do
    SVCLASS = left(SVCLASS,length('SVCLASS'),' ')
end
if length(UCB) < length('UCB') then do
    UCB = left(UCB,length('UCB'),' ')
end
if length(VTAMLU) < length('VTAMLU') then do
    VTAMLU = left(VTAMLU,length('VTAMLU'),' ')
end
if length(NODEI) < length('NODEI') then do
    NODEI = left(NODEI,length('NODEI'),' ')
end
if length(CIRCUIT) < length('CIRCUIT') then do
    CIRCUIT = left(CIRCUIT,length('CIRCUIT'),' ')
end
if length(JACK) < length('JACK') then do
    JACK = left(JACK,length('JACK'),' ')
end
if length(TPHONE) < length('TPHONE') then do
    TPHONE = left(TPHONE,length('TPHONE'),' ')
end
if length(CT) < length('CT') then do
    CT = left(CT,length('CT'),' ')
end
if length(DEVCOM1) < length('DEVCOM1') then do
    DEVCOM1 = left(DEVCOM1,length('DEVCOM1'),' ')
end
if length(DEVCOM2) < length('DEVCOM2') then do
    DEVCOM2 = left(DEVCOM2,length('DEVCOM2'),' ')
end
if length(DEVCOM3) < length('DEVCOM3') then do
    DEVCOM3 = left(DEVCOM3,length('DEVCOM3'),' ')
end
if length(BLDG) < length('BLDG') then do
    BLDG = left(BLDG,length('BLDG'),' ')
end
if length(FLOOR) < length('FLOOR') then do
    FLOOR = left(FLOOR,length('FLOOR'),' ')
end
if length(ROOM) < length('ROOM') then do
    ROOM = left(ROOM,length('ROOM'),' ')
end
if length(CLOSET) < length('CLOSET') then do
    CLOSET = left(CLOSET,length('CLOSET'),' ')
end
if length(DESK) < length('DESK') then do
    DESK = left(DESK,length('DESK'),' ')
end
if length(SOFTWARE) < length('SOFTWARE') then do
    SOFTWARE = left(SOFTWARE,length('SOFTWARE'),' ')
end
if length(RLSE) < length('RLSE') then do
    RLSE = left(RLSE,length('RLSE'),' ')
end
if length(PUTL) < length('PUTL') then do
    PUTL = left(PUTL,length('PUTL'),' ')
end
if length(CMDP) < length('CMDP') then do
    CMDP = left(CMDP,length('CMDP'),' ')
end
if length(SOFTCOM1) < length('SOFTCOM1') then do
    SOFTCOM1 = left(SOFTCOM1,length('SOFTCOM1'),' ')
end
if length(SOFTCOM2) < length('SOFTCOM2') then do
    SOFTCOM2 = left(SOFTCOM2,length('SOFTCOM2'),' ')
end
if length(SOFTCOM3) < length('SOFTCOM3') then do
    SOFTCOM3 = left(SOFTCOM3,length('SOFTCOM3'),' ')
end
if length(SOFTCOM4) < length('SOFTCOM4') then do
    SOFTCOM4 = left(SOFTCOM4,length('SOFTCOM4'),' ')
end
if length(UX) < length('UX') then do
    UX = left(UX,length('UX'),' ')
end
if length(ZP) < length('ZP') then do
    ZP = left(ZP,length('ZP'),' ')
end
if length(BT) < length('BT') then do
    BT = left(BT,length('BT'),' ')
end
if length(LT) < length('LT') then do
    LT = left(LT,length('LT'),' ')
end
if length(HW) < length('HW') then do
    HW = left(HW,length('HW'),' ')
end
if length(PC) < length('PC') then do
    PC = left(PC,length('PC'),' ')
end
if length(OT) < length('OT') then do
    OT = left(OT,length('OT'),' ')
end
if length(RCOM1) < length('RCOM1') then do
    RCOM1 = left(RCOM1,length('RCOM1'),' ')
end
if length(RCOM2) < length('RCOM2') then do
    RCOM2 = left(RCOM2,length('RCOM2'),' ')
end
if length(RCOM3) < length('RCOM3') then do
    RCOM3 = left(RCOM3,length('RCOM3'),' ')
end
if length(RCOM4) < length('RCOM4') then do
    RCOM4 = left(RCOM4,length('RCOM4'),' ')
end
if length(RCOM5) < length('RCOM5') then do
    RCOM5 = left(RCOM5,length('RCOM5'),' ')
end
if length(CLOSEBY) < length('CLOSEBY') then do
    CLOSEBY = left(CLOSEBY,length('CLOSEBY'),' ')
end
if length(FIXBY) < length('FIXBY') then do
    FIXBY = left(FIXBY,length('FIXBY'),' ')
end
if length(ASSIGNLST) < length('ASSIGNLST') then do
    ASSIGNLST = left(ASSIGNLST,length('ASSIGNLST'),' ')
end
/*  Here ends the required code checks  */
end
'ERASE FORM TEMP A'                /* get rid of the old one  */
queue 'set msgmode off'            /* turn off messages */
queue 'set wrap on'                /* let it look all the way around */
queue 'set case mixed ignore'      /* look for anything to match    */
queue 'CLOCATE /¬DATE /';QUEUE 'CREP  'DATE
queue 'CLOCATE /¬TIME /';QUEUE 'CREP  'TIME
queue 'CLOCATE /¬PROBNUM /';QUEUE 'CREP  'PROBNUM
queue 'CLOCATE /¬REPORTBY /';QUEUE 'CREP  'REPORTBY
queue 'CLOCATE /¬AGENCY /';QUEUE 'CREP  'AGENCY
queue 'CLOCATE /¬PHONE /';QUEUE 'CREP  'PHONE
queue 'CLOCATE /¬UID /';QUEUE 'CREP  'UID
queue 'CLOCATE /¬RNODE /';QUEUE 'CREP  'RNODE
queue 'CLOCATE /¬T /';QUEUE 'CREP  'T
queue 'CLOCATE /¬P /';QUEUE 'CREP  'P
queue 'CLOCATE /¬STATUS /';QUEUE 'CREP  'STATUS
queue 'CLOCATE /¬ASSIGNTO /';QUEUE 'CREP  'ASSIGNTO
queue 'CLOCATE /¬OBY /';QUEUE 'CREP  'OBY
queue 'CLOCATE /¬DESC1 /';QUEUE 'CREP  'DESC1
queue 'CLOCATE /¬DESC2 /';QUEUE 'CREP  'DESC2
queue 'CLOCATE /¬DESC3 /';QUEUE 'CREP  'DESC3
queue 'CLOCATE /¬DESC4 /';QUEUE 'CREP  'DESC4
queue 'CLOCATE /¬DEVTYPE /';QUEUE 'CREP  'DEVTYPE
queue 'CLOCATE /¬MODEL /';QUEUE 'CREP  'MODEL
queue 'CLOCATE /¬SERIAL /';QUEUE 'CREP  'SERIAL
queue 'CLOCATE /¬SVCLASS /';QUEUE 'CREP  'SVCLASS
queue 'CLOCATE /¬UCB /';QUEUE 'CREP  'UCB
queue 'CLOCATE /¬VTAMLU /';QUEUE 'CREP  'VTAMLU
queue 'CLOCATE /¬NODEI /';QUEUE 'CREP  'NODEI
queue 'CLOCATE /¬CIRCUIT /';QUEUE 'CREP  'CIRCUIT
queue 'CLOCATE /¬JACK /';QUEUE 'CREP  'JACK
queue 'CLOCATE /¬TPHONE /';QUEUE 'CREP  'TPHONE
queue 'CLOCATE /¬CT /';QUEUE 'CREP  'CT
queue 'CLOCATE /¬DEVCOM1 /';QUEUE 'CREP  'DEVCOM1
queue 'CLOCATE /¬DEVCOM2 /';QUEUE 'CREP  'DEVCOM2
queue 'CLOCATE /¬DEVCOM3 /';QUEUE 'CREP  'DEVCOM3
queue 'CLOCATE /¬BLDG /';QUEUE 'CREP  'BLDG
queue 'CLOCATE /¬FLOOR /';QUEUE 'CREP  'FLOOR
queue 'CLOCATE /¬ROOM /';QUEUE 'CREP  'ROOM
queue 'CLOCATE /¬CLOSET /';QUEUE 'CREP  'CLOSET
queue 'CLOCATE /¬DESK /';QUEUE 'CREP  'DESK
queue 'CLOCATE /¬SOFTWARE /';QUEUE 'CREP  'SOFTWARE
queue 'CLOCATE /¬RLSE /';QUEUE 'CREP  'RLSE
queue 'CLOCATE /¬PUTL /';QUEUE 'CREP  'PUTL
queue 'CLOCATE /¬CMDP /';QUEUE 'CREP  'CMDP
queue 'CLOCATE /¬SOFTCOM1 /';QUEUE 'CREP  'SOFTCOM1
queue 'CLOCATE /¬SOFTCOM2 /';QUEUE 'CREP  'SOFTCOM2
queue 'CLOCATE /¬SOFTCOM3 /';QUEUE 'CREP  'SOFTCOM3
queue 'CLOCATE /¬SOFTCOM4 /';QUEUE 'CREP  'SOFTCOM4
queue 'CLOCATE /¬UX /';QUEUE 'CREP  'UX
queue 'CLOCATE /¬ZP /';QUEUE 'CREP  'ZP
queue 'CLOCATE /¬BT /';QUEUE 'CREP  'BT
queue 'CLOCATE /¬LT /';QUEUE 'CREP  'LT
queue 'CLOCATE /¬HW /';QUEUE 'CREP  'HW
queue 'CLOCATE /¬PC /';QUEUE 'CREP  'PC
queue 'CLOCATE /¬OT /';QUEUE 'CREP  'OT
queue 'CLOCATE /¬RCOM1 /';QUEUE 'CREP  'RCOM1
queue 'CLOCATE /¬RCOM2 /';QUEUE 'CREP  'RCOM2
queue 'CLOCATE /¬RCOM3 /';QUEUE 'CREP  'RCOM3
queue 'CLOCATE /¬RCOM4 /';QUEUE 'CREP  'RCOM4
queue 'CLOCATE /¬RCOM5 /';QUEUE 'CREP  'RCOM5
queue 'CLOCATE /¬CLOSEBY /';QUEUE 'CREP  'CLOSEBY
queue 'CLOCATE /¬FIXBY /';QUEUE 'CREP  'FIXBY
queue 'CLOCATE /¬ASSIGNLST /';QUEUE 'CREP  'ASSIGNLST;
/*  here ends the change commands  */
queue 'FN FORM'               /* change to temp file name */
queue 'FT TEMP'               /* change to temp file name */
queue 'FM A'                  /* change to put on A-Disk  */
queue 'FILE'                  /* file the sucker          */
'XEDIT' fn 'PROFS * (NOPROF'
/* ------------------------ Put it in the database disk  ------- */
if whattodo = '' | whattodo = 'OPENMAIL' then do;
 assignto = strip(translate(assignto),,'_');
 'LINKUSR PROBLEM 291 . M . (STACK RETRY';
 if rc ¬= 0 then do;
   say 'PROBADD: Unable to put problem' probnum 'in database.'
   say 'PROBADD: Notify VM systems group.'
   say 'PROBADD: Problem is in file:' probnum assignto 'A.';
   'RENAME FORM TEMP A' problem assignto 'A';
   exit 16;
 end;
 PULL vaddr fmode;
 'ERASE' probnum '*' fmode;    /* in case it's been re-assigned */
 'COPY FORM TEMP A' probnum assignto fmode '(REP';
 'REL' fmode;
 'EXECIO 0 CP (STRING DET' vaddr;
end;
'vmfclear'
say ''; say ''; say '';
say center('Do you wish to print the problem report?',79)
say ''; say center('Enter Y or N',79)
pull ans
if substr(ans,1,1) = 'Y' then do
   'vmfclear'
   'profs hardcopy form temp a'
end
'vmfclear'
if assignto ¬= userid() then do;      /* If I'm not the assignee      */
   CALL notify;
end;
exit 0
/* ----------------- start of subroutines -------------------------*/
/* ---------- Send a PROFS note to notify the assignee ----------- */
NOTIFY:
/*  Send a PROFS note                                                 */
/*   This code sends a PROFS note in line mode                        */
   'PROFS OFSPUSH SET'
   'set cmstype ht'
   queue assignto;                    /* send the message to:         */
   queue 'Problem assignment:' probnum              /* Subject line   */
   queue 'A description of the problem follows...'  /*  text          */
   queue '  ';
   queue 'Priority:' p;
   queue '  ';
   queue 'Reported by:' reportby
   queue 'Phone      :' phone
   queue ' ';
   queue desc1;
   queue desc2;
   queue desc3;
   queue desc4;
   queue;                            /* put a null in stack           */
   'profs termnl tty'                /* reset profs to tty mode       */
   'profs note'                      /* invoke profs note tty mode    */
   'profs termnl'                    /*reset profs to fullscreen mode */

   'set cmstype rt'
   'PROFS OFSPOP SET'                /* restore settings....          */
return;
/* ---------------   END OF PROFS REXX ----------------------------*/
/* ----------     End of notification section -------------------- */

This article will be continued next month.

Pat Tierce
Systems Software Specialist (USA)


