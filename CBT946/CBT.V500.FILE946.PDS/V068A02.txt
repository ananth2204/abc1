Problem assignment/management system - part 3

This month we conclude the code for a system that was written
to help assign problems to various personnel, allow
management to search the database, and extract data from the
problem reports for processing.


PROBFILL EXEC

/*  */
/* ------------ Let user update the sucker    ------------------- */
ARG probnum function;
'LINKUSR PROBLEM 291 . RR . (STACK RETRY';
PULL vaddr fmode;
'COPY' probnum '*' fmode 'TEMP FILE A  (REP';    /* put it on A disk */
'REL' fmode ; 'EXECIO 0 CP (STRING DET' vaddr;
push 'MACRO PROBSMAL PROBADD';
address command 'XEDIT TEMP FILE A (NOPROF'
if function = 'VIEW' then do;        /* PROBVIEW will use it */
   'EXEC PROBVIEW OPENMAIL';
   SIGNAL end;
end;
'EXEC PROBADD OPENMAIL';/* tell form we're coming from incoming mail */
END:
'ERASE temp file a';    /* blow away the temporary hold file         */
return


PROBLEM  EXEC

/*   This is the initial problem mgmt menu.
       form for use in the PROFS system
  For information on screen design program EXECSCRN, see MAINT's
  191 disk file EXECSCRN DOC
*/
/* ------ begin main screen definition
*SCR01A
$                         Problem Management System / VM             &DATE    !
!                                Navigation Menu
!
!  +------------------------------------------------------------------------+
!  |                                                                        |
!  |      $PF1  - Open New Problem!                                         |
!  |                                                                        |
!  |      $PF2  - Update Problem!(Reassign/Close/Update)                    |
!  |                                                                        |
!  |      $PF3  - View Problem(s) assigned to -->%ASSIGNTO!                 |
!  |              (blank=all, userid, or pattern: XXX*)                     |
!  |                                                                        |
!  |      $PF4  - Search for ------>%STRING                           !     |
!  |                                 (Enter string, then press PF4)         |
!  |                                                                        |
!  |      $PF5  - Extract Problem Logs!into flat file for other use         |
!  |                                                                        |
!  |      $PF12 - End!                                                      |
!  |                                                                        |
!  +------------------------------------------------------------------------+
!
!
$&MESSAGE                                                                      !
*SCR01B
      ---------- end of screen definition
*/
assignto =
string = '';
date = date(o);
message = ''
clear = '';
Do forever
   'EXECSCRN PROBLEM EXEC *SCR01A *SCR01B (NOTRANS' clear
   clear = 'NOCLEAR'
   select
     when key = 'PFK12' | key = 'PFK24' then do
        'vmfclear'
        exit 0
     end
     when key = 'PFK01' | key = 'PFK13' then do
        'EXEC PROBADD';
        'VMFCLEAR';
     end
     when key = 'PFK02' | key = 'PFK14' then do
        'EXEC PROBUPDT';
        'VMFCLEAR';
     end
     when key = 'PFK03' | key = 'PFK15' then do
        'EXEC PROBVEW' assignto;
        'VMFCLEAR';
     end
     when key = 'PFK04' | key = 'PFK16' then do
        'EXEC PROBSRCH' string;
        'VMFCLEAR';
     end
     when key = 'PFK05' | key = 'PFK17' then do
        'EXEC PROBEXTR';
        'VMFCLEAR';
     end
     otherwise iterate;
   end;
end
exit 0


PROBNUM  EXEC

/* ---------------
   Doc: Generate a new problem number for PROBADD
*/
'LINKUSR PROBLEM 191 . W . (STACK RETRY';
if rc ¬= 0 then do;
  return 0;
end;
PULL vaddr fmode;
'GLOBALV INIT';           /* because of LINKUSR. Just to clear it */
'EXECIO 1 DISKR PROBLEM NUMBER' fmode '(FINIS VAR INP'
inpn = inp + 1;
inpn = right(inpn,7,'0');
'EXECIO 1 DISKW PROBLEM NUMBER' fmode '1 F 7 (FINIS STRING' inpn
'REL' fmode;
'EXECIO 0 CP (STRING DET' vaddr;
return inp;


PROBSDF1 XEDIT

/* ------- set up default values for any fields the user wants
    This is called by the generated form EXEC to stack variable names
*/
ARG func
'EXTRACT /SIZE'
if func = 'FIELDS' then do
   num_to_stack = size.1 - 1    /* exclude the routing list */
   ':1'
   'STACK' num_to_stack
end
else if func = 'ROUTELIST' then do
   'BOT'
   'STACK 1'
end
'qquit'
exit 0


PROBSMAL XEDIT

/*   PROBSMAL XEDIT was written to extract data from a temp file for
     the prob mgmt system into the form itself.
     This MACRO works by using a form definition file with the name of
           <form_name> FLDLOC
     where each record in the file has the format:
         <field_name> <line #> <start column> <length>

     This program puts the definitions into an array for processing,
     then reads the notelog based upon the field definitions, extracting
     data along the way.
     This program assumes the user has already selected a form to edit
     and gets the arguments of the form name, beginning and ending line
     numbers in the incoming mail notelog file.
*/
ARG form
if form = ''  then do
   say 'MAL001E: Missing parameters in ARG statement - aborting open'
   'qquit'
   exit
end
push 'MACRO PROBSDF1 FIELDS'
'CMS XEDIT' form 'FLDLOC (NOPROF'
numvar = queued()
DO i = 1 to numvar
  PARSE PULL var.i line.i start.i len.i .
END
'SET CMSTYPE HT'
'CMS ERASE FORM TEMP A'
'SET CMSTYPE RT'
'XEDIT FORM TEMP A (NOPROF WIDTH 130'
'LRECL 130'             /* Set lrecl to what we want               */
'TRUNC 130'             /* Set trunc to the max                    */
'ZONE 1 130'            /* Set to see all of record                */
'MSGMODE OFF'           /* Turn messages off in data file          */
'XEDIT'                 /* Switch back to notelog                  */
'TOP';                  /* go to beginning of form in form         */
'MSGMODE OFF'           /* Turn messages off in notelog file       */
DO 1                    /* Do 1 time only for this form            */
  proc = 0                           /* No variables process yet   */
  curline = 0                        /* Current Rel. line # in form*/
  scol = 1                           /* Start col in extract rec.  */
  DO WHILE proc < numvar             /* Process all variables      */
    proc = proc + 1
    if curline ¬= line.proc then do    /* Get the current line     */
       temp = line.proc - curline      /* See how many to go down  */
       'DOWN' temp                     /* Go down to next line     */
       'EXTRACT /CURLINE'              /* Get the current line     */
    end
    curline = line.proc                /* Store current values     */
    curvar  = var.proc                 /* """                      */
    curlen  = len.proc                 /* """                      */
    curstart= start.proc               /* Bump past attr byte      */
    data.proc=substr(curline.3,curstart,curlen)  /* Extract item   */
    'XEDIT'                            /* Switch to Extract file   */
    'I' data.proc                      /* Put data in file         */
    'XEDIT'                            /* Switch back to NOTELOG   */
  END
END
'QQUIT'                                /* Quit the form            */
'FILE'                                 /* File the EXTRACT file    */
exit 0


PROBSRCH EXEC

/* Doc: Allow update of a problem
*/
ARG string;
'LINKUSR PROBLEM 291 . RR . (STACK';
PULL vaddr fmode;
'LISTFILE * *' fmode '(STACK';  /* List ALL problems                 */
do queued();                    /* Process each routine for comments */
  found = 0;
  PULL fname;
  PARSE VAR fname fn1 ft1 fm1 .;
  CALL search;
  if found then do;
     'EXECIO 1 DISKR' fname '13 (FINIS VAR ILIN';/* Read the desc.    */
     stat = substr(ilin,20,1);                   /* open/close        */
     'EXECIO 1 DISKR' fname '17 (FINIS VAR ILIN';/* Read the desc.    */
     ft1 = left(ft1,8);
     out = fn1 ft1 stat left(ilin,60);           /* concat the data   */
     'EXECIO 1 DISKW $$PROB$$ TEMP A  (VAR OUT'  /*write to temp file */
  end;
end;
'FINIS $$PROB$$ TEMP A';                         /* close the output  */
'SET CMSTYPE HT'
'REL' fmode;
'EXECIO 0 CP (STRING DET' vaddr;
'SET CMSTYPE RT'
VIEWAGN:
'XEDIT $$PROB$$ TEMP (PROF PROBVEW2';            /* now go view them  */
if queued() ¬= 0 then do;                        /*they want to update*/
   PULL probnum;
   'EXEC PROBFILL' probnum 'VIEW';               /* update it...      */
   SIGNAL VIEWAGN;
   'DESBUF';
end;
'SET CMSTYPE HT'
'ERASE $$PROB$$ TEMP A';                         /* erase temp file   */
'SET CMSTYPE RT'
exit 0
/* ----------------- Search the file for the string ----------- */
SEARCH:
  push string;
  'XEDIT' fname '(PROF PROBSRCH';
  pull rcode;
  if rcode = 0 then found = 1;
  else           found = 0;
return;


PROBSRCH XEDIT

/*  Doc: Search the file for a string.
*/
PULL string;
string = strip(string,B);
'case m i';
'msgmode off';
'LOC /'string;
rcode = rc;
'qquit';
push rcode;
exit rcode;


PROBUPDT EXEC

/* Doc: Allow update of a problem
*/
'LINKUSR PROBLEM 291 . RR . (STACK';
PULL vaddr fmode;
'LISTFILE *' userid() fmode '(STACK';  /* List our problems         */
do queued();                   /* Process each routine for comments */
  PULL fname;
  PARSE VAR fname fn1 ft1 fm1 .;
  'EXECIO 1 DISKR' fname '13 (FINIS VAR ILIN';/* Read the desc.     */
  stat = substr(ilin,20,1);                   /* open/close         */
  'EXECIO 1 DISKR' fname '17 (FINIS VAR ILIN';/* Read the desc.     */
  ft1 = left(ft1,8);
  out = fn1 ft1 stat left(ilin,60);           /* concat the data    */
  'EXECIO 1 DISKW $$PROB$$ TEMP A  (VAR OUT'  /* write to temp file */
end;
'FINIS $$PROB$$ TEMP A';                      /* close the output   */
'SET CMSTYPE HT'
'REL' fmode;
'EXECIO 0 CP (STRING DET' vaddr;
'SET CMSTYPE RT'
AGAIN:
'XEDIT $$PROB$$ TEMP (PROF PROBVEW2';         /* now go view them   */
if queued() ¬= 0 then do;                     /* they want to update*/
   PULL probnum;
   'EXEC PROBFILL' probnum;                   /* update it...       */
   'DESBUF';
   SIGNAL again;
end;
'SET CMSTYPE HT'
'ERASE $$PROB$$ TEMP A';                      /* erase temp file    */
'SET CMSTYPE RT'
exit 0


PROBVEW  EXEC

/* Doc: Allow update of a problem
*/
ARG parm
if parm = '' then parm = '*';
'LINKUSR PROBLEM 291 . RR . (STACK';
PULL vaddr fmode;
'LISTFILE *' parm fmode '(STACK';      /* List ALL problems         */
do queued();                   /* Process each routine for comments */
  PULL fname;
  PARSE VAR fname fn1 ft1 fm1 .;
  'EXECIO 1 DISKR' fname '13 (FINIS VAR ILIN'; /* Read the desc.     */
  stat = substr(ilin,20,1);                    /* open/close         */
  'EXECIO 1 DISKR' fname '17 (FINIS VAR ILIN'; /* Read the desc.     */
  ft1 = left(ft1,8);
  out = fn1 ft1 stat left(ilin,60);            /* concat the data    */
  'EXECIO 1 DISKW $$PROB$$ TEMP A  (VAR OUT'   /* write to temp file */
end;
'FINIS $$PROB$$ TEMP A';                       /* close the output   */
'XEDIT $$PROB$$ TEMP (PROF PROBVEW2';          /* now go view them   */
if queued() ¬= 0 then do;                      /* they want to update*/
   PULL probnum;
   'EXEC PROBFILL' probnum 'VIEW';             /* update it...       */
   'DESBUF';
end;
'SET CMSTYPE HT'
'REL' fmode;
'EXECIO 0 CP (STRING DET' vaddr;
'ERASE $$PROB$$ TEMP A';                       /* erase temp file    */
'SET CMSTYPE RT'
exit 0


PROBVEW2 XEDIT

/* Doc: Setup the screen for the list of problems.
*/
'set msgmode off'
'set msgline on +2 overlay'
'set verify 1 79'
'set tofeof off'
'set prefix off'
'set curline on +2'
'set reserved 1 h                       Select a Problem'
'set reserved 2 h            Put CURSOR on selection, then PRESS ENTER'
'set reserved 3'
'set reserved 4 h Number/Assign/Stat         Description'
'set reserved 5 h ===================  ========================================'
'set reserved -1 h                         PF12=Cancel'
'set cmdline off'
'set scale off'
'SET PF12 COMMAND QUIT'
'SET PF24 COMMAND QUIT'
'CURSOR FILE 1'
'extract /size'
DO FOREVER                       /* loop through to get a keystroke  */
  'READ CMDLINE TAG'
  parse pull key num .
  if key = 'PFK' then do
     if num = 7 | num = 19 | num = 11 | num = 23 then command BACKWARD
     if num = 8 | num = 20 | num = 10 | num = 22 then command forward
     if num = 12 | num = 24 then leave
  end
  if key = 'ETK' then do       /* if ENTER was pressed */
    'EXTRACT /CURSOR/'         /* see if cursor is in a valid spot  */
    IF CURSOR.3 < 1 | CURSOR.3 > size.1  THEN DO
       EMSG 'Error--> Your CURSOR was not at a valid location.'
       ITERATE
    end
    else do
      ':'CURSOR.3                        /*  Let's go to the cursor  */
      'EXTRACT /CURLINE/'                /* Get the comment line     */
      problem = substr(CURLINE.3,1,8)    /* Get the routine name     */
      queue problem;                     /* Stack the problem number */
      'qquit'                            /*   start of the routine   */
      exit 0
    end
  end
end
'vmfclear';
say ''; say ''; say ''; say '';
say center('Nothing was selected',79);
'cp sleep 2 sec';
'qquit'
exit 0


PROBVIEW EXEC

/*  */
SIGNAL ON SYNTAX
ARG whattodo prob_filename;
whattodo = translate(whattodo);
PARSE SOURCE PULL env fn env;
'EXECIO 1 DISKR PROBADDV EXECSCRN * (FINIS M 1 5 VAR TEMP';
'DESBUF';
mine = '';     /* default nothing encrypted */
if substr(temp,1,5) = '*SCR1' then nop;
else do
   'vmfclear'
   say ''; say ''; say 'Enter FORMS Decryption key'
   say 'Press ENTER without typing anything if you don''t know key'
   pull encrypt
   if encrypt = '' then exit 0
   CALL DECRYPT
end
/* ---------- See if working with incoming mail ----------- */
START:
/*   INITIALIZE variables here after this line  - total # panels */
totpanel = 5
/*   Here ends the initialization of variables  */
/*   Set DEFAULT VALUES after this line         */
push 'MACRO PROBSDF1 FIELDS'
'XEDIT PROBADD FLDLOC * (NOPROF'
do queued()
  PARSE PULL  var.1 line.1 start.1 len.1 def_value
  def_value = strip(def_value)
  if def_value ¬= '' then do           /* if default value coded */
     interpret var.1 '= def_value'
  end
  else do                              /* if NO default value coded */
     interpret var.1 '= left('''',len.1,''_'')'
  end
end
/* ---   PRE-DEFINED VARIABLES     ----------- */
  'ID (STACK'; PARSE PULL . . NODE . NETNAME .;
  month = left(date(m),12,' ')
  day   = left(date(w),10,' ')
  time  = left(time(),8,' ')
  date  = left(date(u),8,' ')
  datej = left(date(j),6,' ')
  userid= left(userid(),8,' ')
  node  = left(node,8,' ')
  netname=left(netname,8,' ')
/* ----  End of pre-defined variables  -------------------*/
MSG = ' '
'DESBUF'
panel = 1
key   = ' '
if whattodo = 'OPENMAIL' then do
    CALL mailin;
end
/* -------------------------------------------------------------*/
BEGIN:                                /*  Start here to display */
/* -------------------------------------------------------------*/
OPTIONS = ''            /* reset any EXECSCRN options  */
if whattodo = 'PRINT' | whattodo = 'print' then nop
else do while panel ¬= 999
     CALL DISPLAY
     if key = '' | key = ' ' then do
        say '9ERROR:-EXECSCRN had error - Notify9SYSTEMS PROGRAMMER-'
        if mine ¬= '' then call ENDENCR
        exit 0
     end
     if key = 'PFK07' | key = 'PFK19' then leave
     if key = 'PFK09' | key = 'PFK21' then do
           'HELP' fn
           key = 'ENTER'
           iterate
     end
     if key = 'PFK10' | key = 'PFK22' then panel = panel + 1
     if key = 'PFK11' | key = 'PFK23' then panel = panel - 1
     if key = 'PFK12' | key = 'PFK24' then panel = 999
     if (panel < 1 | panel > totpanel) & panel ¬= 999 then panel = 1
end
/*  If the user gets here, they pressed PF12 or PF7
      and they either want to get out, or send the form
    If the user was just viewing the form, just exit when they're
      done looking at it (with either PF7 or PF12)
*/
if key = 'PFK12' | key = 'PFK24' | whattodo = 'VIEW'  then do
   if mine ¬= '' then call ENDENCR
   exit 0
end
say ''; say ''; say '';
say center('Do you wish to print the trouble log?',79);
say ''; say center('Enter Y or N',79);
pull ans;
if substr(ans,1,1) = 'Y' then,
   'PROFS HARDCOPY TEMP FILE A';
'vmfclear'
exit 0
/* ----------------- start of subroutines -------------------*/
/* ---------------   END OF PROFS REXX ----------------------------*/
/* ----------     End of notification section -------------------- */
DISPLAY:
  yb   = panel               /* display current page on panel  */
  zb   = totpanel            /* display total pages available  */
  temp = panel + 1           /* get next delimiter number      */
  PARSE SOURCE PULL env fn env
  'EXECSCRN PROBADDV EXECSCRN *SCR'panel '*SCR'temp '(NOTRANS 'options
return
/* ----------------- Error handler ----------------------------*/
SYNTAX:
  rcode = rc
  say 'REXX ERROR RC='rc 'in line:' sigl
  say 'Text for error follows:'
  say errortext(rcode)
  say 'Enter Interactive DEBUG? (Y or N)'
  pull xxx
  if xxx = 'Y' then do
     TRACE '?A'
     SIGNAL START
  end
  exit 999
/* ---------------------- Initialize vars from Incoming mail ----- */
MAILIN:
  PUSH 'MACRO PROBSDF1 FIELDS'
  'XEDIT PROBADD FLDLOC * (NOPROF'
  yb = 0
  do queued();
    yb = yb + 1
    parse pull var.yb .
  end
  queue 'STACK *'
  queue 'QQUIT'
  'XEDIT FORM TEMP A (NOPROF'
  yb = 0
  do queued()
    yb = yb + 1
    parse pull zb
    interpret var.yb '= zb'
  end
return
/* --------------- decrypt for temporary form usage ------------ */
DECRYPT:
  'SET CMSTYPE HT'
  'LISTF PROBADD EXECSCRN A (STACK'
  'SET CMSTYPE RT'
  if queued() ¬= 0 then do
    'DESBUF'
    push encrypt
    'VMCIPHER' fn 'EXECSCRN A (DECRYPT'
    push encrypt
    'VMCIPHER' fn 'PROFS A (DECRYPT'
    mine='YES'        /* I am the owner of the form */
    return
  end
  'LISTF PROBADD EXECSCRN * (STACK'
  parse pull . . fm
  'DESBUF'
  push encrypt
  'VMCIPHER' fn 'EXECSCRN' fm '= = A (DECRYPT'
  push encrypt
  'VMCIPHER' fn 'PROFS   ' fm '= = A (DECRYPT'
  mine='NO'            /* I am NOT the owner of the form */
return
/* ------------- exit when the form is encrypted -------------- */
ENDENCR:
if mine = 'YES' then do
    push encrypt
    'VMCIPHER' fn 'EXECSCRN A (ENCRYPT'
    push encrypt
    'VMCIPHER' fn 'PROFS A (ENCRYPT'
    return
end
'ERASE' fn 'EXECSCRN A'
'ERASE' fn 'PROFS    A'
return


Pat Tierce
Systems Software Specialist (USA)                                 Xephon 1992
