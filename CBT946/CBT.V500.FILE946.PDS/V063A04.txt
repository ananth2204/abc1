A search list command

Whenever I rummaged in very long listings or in source
packages which consist of several files, I wished for a nice
automatic search function.  Unfortunately, the last head crash
on one of our system disks destroyed our old search EXEC and
we realized that we had no back-up.  This gave me the
opportunity to realize the idea of a search list command.

Now I can see what's going on, because the name of the file
currently being searched is highlighted and all the target files
are kept in a FILELIST if I want.

/*  SEARCH  : Look up a target in several files.                      */
parse upper source . . Source_name .;
target = "";
parse arg STRING 1 Indicate target '((' Option;
if ¬abbrev(Indicate,"SEARCH_",7) then do;
   key = find(translate(STRING),"FOR");
   if key > 0 then do;
      file = subword(STRING,1,key-1);
      STRING = subword(STRING,key+1);
      end;
   if abbrev(File,"?",0) | target = "" then do;
      say "Format:";
      say
      say Source_name,
 " filename(s) FOR target  <( FList <Keep> <OPtion filelist_option> .. "
      say copies(" ",length(Source_name)),
 "                         .. <TYpe> <Xedit xedit_subcommand(s)>> "
      say
      say " where:"
      say "   filename(s) - filename<,filename<, ... >>";
      say "                 Usage of filename see COMMAND LISTFILE";
      say "   target      - see XEDIT Subcommand LOCATE";
      say " options:";
      say "   FList     - show all the filenames in a FILELIST session";
      say "   Keep       - usable in combination with FLIST. Keep only";
      say "                 those filenames where target was found";
      say "   OPtion fl.. - usable in combination with FLIST. Set one ";
      say "              option for use with internal FILELIST command";
      say "   TYpe     - list only those lines where target was found,";
      say "                 no XEDIT session will be opened";
      say "   Xedit sub..-all the remaining string will be interpreted";
      say "            as XEDIT subcommands executed before searching.";
      say "                 Separate them by commas (,)";
      say
      say "e.g." Source_name,
       "* H *, * CC A for /System/&¬/System_/ (FL K X set case m r";
      say
      exit 1;
      end
   call parse_input STRING,"TARGET";
   parse var result STRING '15'X target;
   parse upper var STRING '(' Option;
   pos = 0;
   do forever;
      pos = index(" "Option," OP",pos+1);
      if pos = 0 then leave;
      else if abbrev("OPTIONS",word(substr(Option,pos),1)) then leave;
      end;
   if pos > 0 then FL_Opt = word(substr(Option,pos),2);
   else FL_Opt = "";
   pos = 0;
   do forever;
      pos = index(" "Option," FL",pos+1);
      if pos = 0 then leave;
      else if abbrev("FLIST",word(substr(Option,pos),1)) then leave;
      end;
   if pos > 0 then do;
      'MAKEBUF';
      Buffer = rc;
      do Ix = 1 by 1 until file = "";
         parse var file fileid ',' file;
         if Ix = 1 then fileid_1 = fileid;
         else queue 'FILELIST' fileid '(Append' FL_Opt;
         end;
      queue 'CMS' Source_name 'SEARCH_SERVER' target '((' Option;
      if FL_Opt = "" then 'FILELIST' fileid_1;
      else 'FILELIST' fileid_1 '(' FL_Opt;
      'DROPBUF' Buffer;
      end;
   else do;
      do Ix = 1 by 1 until file = "";
         parse var file fileid ',' file;
         'LISTFILE' fileid '(FMode FIFO';
         end;
      All = queued();
      do Ix = 1 to All;
         pull File.Ix;
         end;
      do Ix = 1 to All;
         queue 'CMS' Source_name "SEARCH_FOR" target '((' Option;
         'XEDIT' File.Ix;
         end;
      end;
   end;
else do;
   address XEDIT;
   if Indicate = "SEARCH_SERVER" then do;
      pos = 0;
      do forever;
         pos = index(" "Option," K",pos+1);
         if pos = 0 then leave;
         else if abbrev("KEEP",word(substr(Option,pos),1)) then leave;
         end;
      'COMMAND Extract \Color Curline\Curline\FLscreen\Linend\Size\';
      Save_top = Curline.2;
      'COMMAND Cursor CMDLine';
      'COMMAND Set Color Curline  Red   NONE   HIGH';
      'COMMAND Set Color Filearea Green NONE NOHIGH';
      'COMMAND Set Display 0 1';
      'COMMAND Set Linend OFF';
      'COMMAND Set MSGMode OFF';
      do Ix = 1 to Size.1;
         'COMMAND Extract \Curline\Line\';
         'COMMAND Refresh';
         if find(Curline.3,"No files match") = 0,
          & find(Curline.3,"Not found") = 0 then do;
            queue 'CMS' Source_name "SEARCH_FOR" target '((' Option;
            address COMMAND 'XEDIT' subword(substr(Curline.3,7),1,3);
            if rc = 2 then 'COMMAND Set Select 1 1';
            end;
         'COMMAND Locate +1';
         if rc ¬= 0 then
         if pos = 0 then 'COMMAND Quit';
         else leave;
         else if Line.1 = FLscreen.2 & Line.1 < Size.1 then do;
            'COMMAND Set Curline on' Save_top;
            'COMMAND Extract \FLscreen\';
            end;
         else 'COMMAND Set Curline on' Curline.2+1;
         end;
      if pos > 0 then do;
         'COMMAND Set Display 1 1';
         'COMMAND Bottom';
         'COMMAND Delete -*';
         'COMMAND Set Color Curline' Color.1 Color.2 Color.3 Color.4;
         'COMMAND Set Curline on' Save_top;
         'COMMAND Set Display 0 0';
         'COMMAND Set Linend' Linend.1 Linend.2;
         'COMMAND Set MSGMode ON';
         end;
      end;
   if Indicate = "SEARCH_FOR" then do;
      'COMMAND Set MSGMode OFF';
      pos = 0;
      do forever;
         pos = index(" "Option," X",pos+1);
         if pos = 0 then leave;
         else if abbrev("XEDIT",word(substr(Option,pos),1)) then leave;
         end;
      if pos > 0 then do;
         X_CMDs = subword(substr(Option,pos),2);
         do Ix = 1 by 1 until X_CMDs = "";
            parse var X_CMDs X_Command ',' X_CMDs;
            X_Command;
            end;
         end;
      pos = 0;
      do forever;
         pos = index(" "Option," TY",pos+1);
         if pos = 0 then leave;
         else if abbrev("TYPE",word(substr(Option,pos),1)) then leave;
         end;
      if pos = 0 then do;
         'COMMAND Locate' target;
         if rc = 0 then do;
            'COMMAND Set MSGMode ON';
            'COMMAND EMSG Use  =  to search the next occurrence of ',
                           strip(target)', or ARise to get the target.';
            'COMMAND Set Synonym ARISE 2 COMMAND CMSG Locate' target;
            'COMMAND Set = Locate' target;
            end;
         else 'COMMAND QUIT 2';
         end;
      else do;
         Nr = 0;
         do forever;
            'COMMAND Locate' target;
            if rc = 0 then do;
               'COMMAND Extract \Curline\Line\';
               Nr = Nr+1;
               Position.Nr = " ... Line:" Line.1;
               Arise.Nr = Curline.3;
               end;
            else leave;
            end;
         if Nr > 0 then do;
            'COMMAND Extract \FName\FType\FMode\';
            say " *** File:" FName.1 FType.1 FMode.1 "***";
            do Ix = 1 to Nr;
               say Position.Ix;
               say Arise.Ix;
               end;
            say " ";
            'COMMAND QUIT';
            end;
         else 'COMMAND QUIT 2';
         end;
      end;
   end;
exit;
parse_input:
/***   call parse_input STRING,"FORMAT";                           *
   *    input:                                                     *
   *       STRING - string with "FORMAT" in front                  *
   *       FORMAT - TARGET or COLUMN-TARGET                        *
   *   output:                                                     *
   *       STRING - string without "FORMAT" string                 *
   *       PHRASE - "FORMAT" string                                *
   *   return STRING || '15'X || PHRASE;                           ***/;
if arg(2) = "TARGET" then log_op = "&|";
else if arg(2) = "COLUMN-TARGET" then log_op = "|";
   else do;
      say "Error calling PARSE_INPUT '/...', '"arg(2)"'";
      exit 2;
      end;
STRING = strip(arg(1),"L");
parse var STRING word word_rest 1 direction +1 direction_rest;
select;
   when direction = "." then do;
      STRING = word_rest;
      PHRASE = word;
      end;
   when verify(direction,":+-*0123456789 ") = 0 then do;
      parse var STRING word second rest;
      if verify(word,":+-") = 0 then do;
         STRING = rest;
         PHRASE = word second;
         end;
      else do;
         STRING = word_rest;
         PHRASE = word;
         end;
      end;
   otherwise do;
      if verify(direction,"+-") = 0 then do;
         PHRASE = direction;
         STRING = direction_rest;
         end;
      else PHRASE = "";
      if verify(STRING,"¬") = 2 then do;
         PHRASE = PHRASE||substr(STRING,1,1);
         STRING = strip(substr(STRING,2),"L");
         end;
      parse var STRING delimiation +1 target (delimiation) rest;
      PHRASE = PHRASE||delimiation||target||delimiation;
      STRING = rest;
      do forever;
         if STRING = "" then leave;
         STRING = strip(STRING,"L");
         if verify(STRING,log_op) = 2 then do;
            PHRASE = PHRASE||substr(STRING,1,1);
            STRING = strip(substr(STRING,2),"L");
            end;
         else leave;
         if verify(STRING,"¬") = 2 then do;
            PHRASE = PHRASE||substr(STRING,1,1);
            STRING = strip(substr(STRING,2),"L");
            end;
         parse var STRING delimiation +1 target (delimiation) rest;
         PHRASE = PHRASE||delimiation||target||delimiation;
         STRING = rest;
         end;
      end;
   end;
return STRING || "15"X || PHRASE;

Anton Altbauer
IPP Garching (Germany)                              c IPP Garching 1991

