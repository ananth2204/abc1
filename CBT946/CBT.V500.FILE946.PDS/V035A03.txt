Performance monitor

The following REXX program displays performance statistics
obtained using the INDicate command.  Any class E user can run
this EXEC and receive a complete overview of the system
performance in the format shown in Figure 1.

------------------------------------------------------------------------------
|  31/01/89                    VM Performance monitor               09:57:54 |
------------------------------------------------------------------------------
User: CPS                      Interval: 5 SEC             Duration:    21 sec
             CPU           040%                   Paging/sec  0008
             APU           000%                   Expand      0001
             Storage       015%                   Q1            00
             Steal         018%                   Q2            01
             Load          000%
         User in Q                  User wait i/o     User wait paging
VSEJCL     Q1 PG 043/057            RSD      221      VSEJCL   000:052
RSD        Q2 IO 0EF/0ED            TESTVSE  232
CPS        Q1 RU 03E/03F
TESTVSE    Q3 PS 3D4/3B0

	Figure 1: Performance report

The user may specify the number of times the information should
be updated (default is once) and also the delay time between
updates (default 5 seconds).  If the user specifies * for the number
of updates the EXEC will run continuously (will need to issue
#CP I CMS to terminate EXEC).  The EXEC was developed using
VM/SP 3.

Command syntax:

        MONVM <1|n|*> <5|refresh> <SEC|MIN>

where    n = monitor screen displayed n times (if n=* then monitor
will run continuously).
	int = delay time between screen refresh - default is 5
seconds.

MONVM

/*    */
Address 'COMMAND'
/*    Do initialisation and set default values         */
date=date(E)
time=time(R)
time=time()
def_int=5
def_int_type=SEC
valid='SEC MIN'
flag=1
vmout='EXECIO 0 CP (STRING SCREEN VMOUT'
Call Reset_
info=Save_color()
conset=Is_con_spooled()
/* suspend spooling of console */
'EXECIO 0 CP (STRING SPOOL CONSOLE STOP'
/*    Get arguments if any and validate                 */
arg value interval int_type
If value='*' then value=forever
else if value#='' & #datatype(value,N) then flag=0
/* if null arguments then assign default values */
if interval="" then interval=def_int
if int_type="" then int_type=def_int_type
if #(datatype(interval,N) & find(valid,int_type)>0 & flag) then do
   say 'Format is MONVM n|* <refresh time> <SEC|MIN>'
   Exit 10
End
/*    Main program                                      */
'MAKEBUF'
line="Do" value ";Call Ind_load;Call Ind_io;Call Ind_q;Call Ind_page;",
     "Call Out_stat;'CP SLEEP' interval int_type;Call Reset_;End"
Interpret line
'VMFCLEAR'
'EXECIO 0 CP (STRING SCREEN VMOUT' info
if conset='START' then 'EXECIO 0 CP (STRING SPOOL CONSOLE' conset
'DROPBUF'
Exit
/*    Procedure Ind_load                                */
Ind_load: procedure expose cpu apu stor expnum load steal pag q1 q2
'MAKEBUF'
'EXECIO * CP (STRING INDICATE LOAD'
pull line
parse var line with '-' cpu '-' apu'Q1-'q1 'Q2-'q2 . '-'stor . '-'expnum
pull line
parse var line with '-' pag'/SEC' '-' steal . '-' load
'DROPBUF'
return
Exit
/*    Procedure Ind_q                                   */
Ind_q: procedure expose indq.
'MAKEBUF'
'EXECIO * CP (STRING INDICATE QUEUE'
lne="";st=1
Do queued()
   pull line
   lne= lne line
End
Do count= 1  to (words(lne)/4)
   indq.count = subword(lne,st,4)
   st=st+4
End
return
Exit
/*    Procedure Ind_io                                  */
Ind_io: procedure expose indio.
'MAKEBUF'
'EXECIO * CP (STRING INDICATE I/O'
lne="";st=1
Do queued()
   pull line
   lne= lne line
End
If substr(lne,1,3)=' NO' then indio.1=-None-'
Else Do count=  1 to (words(lne)/2)
   indio.count = subword(lne,st,2)
   st=st+2
End
'DROPBUF'
Return
Exit
/*    Procedure Ind_page                                */
Ind_page: procedure expose indp.
'MAKEBUF'
'EXECIO * CP (STRING INDICATE PAGING'
lne="";st=1
Do queued()
   pull line
   lne= lne line
End
If substr(lne,1,3)=' NO' then indp.1='-None-'
Else Do count= 1 to (words(lne)/2)
   indp.count = subword(lne,st,2)
   st=st+2
End
'DROPBUF'
Return
Exit
/*    Procedure Reset_                                  */
Reset_: procedure expose indio. indq. indp.
indq.='';indio.='';indp.=""
Return
Exit
/*    Function is_con_spooled                           */
Is_con_spooled: procedure
'MAKEBUF'
'EXECIO 1 CP (STRING QUERY VIRTUAL CONSOLE'
pull line
parse var line with . 'TERM' set .
'DROPBUF'
Return set
Exit
/*    Function Save_color                               */
Save_color:
'MAKEBUF'
'EXECIO 1 CP (STRING QUERY SCREEN'
pull line
parse var line with . 'VMOUT' rest
'DROPBUF'
Return rest
Exit
/*    Procedure Out_stat                                */
Out_stat: procedure expose date pag expnum cpu apu stor steal,
          load q1 q2 indq. indio. indp. vmout interval int_type
'VMFCLEAR'
vmout 'BLUE REV'
say centre('_',80,'_')
say '| 'date centre('VM Performance Monitor',58) time()' |'
say centre('-',80'-')
vmout 'WHITE NONE'
say 'User: 'userid() ,
    centre('Interval: 'interval int_type,50) ,
    centre('Duration: 'format(time(E),5,0)' sec',20)
vmout 'YELLOW NONE'
say
/* uncomment following 4 lines if running MP system
say centre(left('IPL',10) left(strip(cpu),5),40),
    centre(left('Paging/sec',10) right(strip(pag),5),38)
say centre(left('non IPL',10) left(strip(apu),5),40),
    centre(left('Expand',10) right(strip(expnum),5),38)
*/
/* and comment out the next 4 lines if running MP system */
say centre(left('CPU',10) left(strip(cpu),5),40),
    centre(left('Paging/sec',10) right(strip(pag),5),38)
say centre(left('APU',10) left(strip(apu),5),40),
    centre(left('Expand',10) right(strip(expnum),5),38)
say centre(left('Storage',10) left(strip(stor),5),40),
    centre(left('Q1',10) right(strip(q1),5),38)
say centre(left('Steal',10) left(strip(steal),5),40),
    centre(left('Q2',10) right(strip(q2),5),38)
say centre(left('Load',10) left(strip(load),5),40)
say
vmout 'BLUE REV'
say centre('User in Q',25),
    centre('User wait i/o',25),
    centre('User wait paging',24) '  .'
vmout 'YELLOW NONE'
say
Do y = 1 to 8
   say centre(indq.y,25) centre(indio.y,25) centre(indp.y,25)
End
Return
Exit

Colin Soar
System Engineer
Direct Line Services Ltd (UK) 	) Xephon 1989

