Compare utility

This EXEC is designed to compare VM files, and produce a
difference report.  It was written to eliminate the need for the
IBM supplied VM COMPARE command.

After parsing the arguments and making sure that each file
exists, the files are loaded into individual arrays for
comparison.  A new file is then created, on the A disk, with a
filename USERID() and a filetype of COMPLIST.

The equivalent lines are eliminated by looping through both
files at the same time.  When equal lines are found, both lines
in each file are replaced with hexadecimal FS, effectively
removing them.  The rest of the EXEC then lists out the
remaining differences.  When the compare is finished, the
BROWSE command is executed with the created difference
report.

When initiating the EXEC, the format is the same as for
COMPARE, except the EXEC name is COMP.

In the difference report, each line listed has a legend to the left
in parenthesis.  This legend consists of the file number (1 or 2)
and the line number, separated by a full stop (period).  The text
of the line follows the legend.

There are two ingrained flaws to this code.  The first is that it
does not detect moved blocks of text; it will be reported as a set
of inserted lines in one file, and a set of deleted lines in the
other file.  The other flaw is the relatively slow execution time.
The IBM COMPARE processes both files simultaneously,
whereas COMP will process the second file once for each line
in the first file.


/*  ***         ***
**  NAME      - COMP
**  PURPOSE   - VM LIBRARY MEMBER COMPARE UTILITY
**  COMMENTS  - AN IMPROVEMENT OVER THE VM COMPARE UTILITY
/* PARSE OUT COMMAND LINE ARGUMENTS AND DETERMINE IF FILES EXIST  */
ARG FN1 FT1 FM1 FN2 FT2 FM2
IF FN2 = '=' THEN FN2 = FN1
IF FT2 = '=' THEN FT2 = FT1
IF FM2 = '=' THEN FM2 = FM1
STATE FN1 FT1 FM1                      /* DOES FIRST FILE EXIST?  */
IF RC ¬= 0 THEN                        /* NO */
  DO
    SAY FN1 FT1 FM1 ' WAS NOT FOUND'
    EXIT(0)
  END
STATE FN2 FT2 FM2                      /* DOES SECOND FILE EXIST? */
IF RC ¬= 0 THEN                        /* NO */
  DO
    SAY FN2 FT2 FM2 ' WAS NOT FOUND'
    EXIT(0)
  END
/* LOAD BOTH FILES INTO INTERNAL ARRAYS  */
INREC = COPIES(' ', 80)
MAKEBUF
NDX = 0                           /* LOAD FIRST FILE INTO TABLE   */
EXECIO 1 DISKR FN1 FT1 FM1 '(VAR INREC'
DO UNTIL RC ¬= 0
   NDX = NDX + 1
   FILEONE.NDX = TRIMRECORD(INREC);
   EXECIO 1 DISKR FN1 FT1 FM1 '(VAR INREC'
END
MAXONE = NDX
FINIS FN1 FT1 FM1
NDX = 0                           /* LOAD SECOND FILE INTO TABLE */
EXECIO 1 DISKR FN2 FT2 FM2 '(VAR INREC'
DO UNTIL RC ¬= 0
   NDX = NDX + 1
   FILETWO.NDX = TRIMRECORD(INREC);
   EXECIO 1 DISKR FN2 FT2 FM2 '(VAR INREC'
END
MAXTWO = NDX
DROPBUF
FINIS FN2 FT2 FM2
/* -CREATE AN OUTPUT FILE TO LOAD THE RESULTS INTO  */
MAKEBUF
OUTNAME = USERID()
OUTTYPE = "COMPLIST"
OUTMODE = "A"
STATE OUTNAME OUTTYPE OUTMODE
IF RC = 0 THEN
  DO
    ERASE OUTNAME OUTTYPE OUTMODE
  END
/* ELIMINATE ALL DUPLICATE LINES IN THE FILE  */
MATCHEDLINE = COPIES('FF'X, 8)
DO PTR1 = 1 BY 1 UNTIL PTR1 > MAXONE
   DO PTR2 = 1 BY 1 UNTIL PTR2 > MAXTWO
     IF FILEONE.PTR1 = FILETWO.PTR2 THEN DO
        FILEONE.PTR1 = MATCHEDLINE
        FILETWO.PTR2 = MATCHEDLINE
        LEAVE
     END
   END
END
/* PRODUCE REPORT   */
PTR = 1
CALL COMPAREHEADING
DO FOREVER                             /* BEGINNING OF COMPARE LOOP */
   IF (PTR > MAXONE) & (PTR > MAXTWO) THEN LEAVE
   IF (PTR > MAXONE) & (PTR <= MAXTWO) THEN
      DO
        FILEONE.PTR = MATCHEDLINE
      END
   IF (PTR <= MAXONE) & (PTR > MAXTWO) THEN
      DO
        FILETWO.PTR = MATCHEDLINE
      END
   IF FILEONE.PTR == MATCHEDLINE & FILETWO.PTR ¬= MATCHEDLINE THEN
      DO
        OUTREC = " "
        CALL PRINTREPORT
        OUTREC = "DELETED FROM FIRST FILE"
        CALL PRINTREPORT
        LEGEND = RECORDLEGEND(2 PTR)
        OUTREC = LEGEND || FILETWO.PTR
        CALL PRINTREPORT
      END
   IF FILEONE.PTR ¬= MATCHEDLINE & FILETWO.PTR == MATCHEDLINE THEN
      DO
        OUTREC = " "
        CALL PRINTREPORT
        OUTREC = "INSERTED INTO FIRST FILE"
        CALL PRINTREPORT
        LEGEND = RECORDLEGEND(1 PTR)
        OUTREC = LEGEND || FILEONE.PTR
        CALL PRINTREPORT
      END
   IF FILEONE.PTR ¬= MATCHEDLINE & FILETWO.PTR ¬= MATCHEDLINE THEN
      DO
        OUTREC = " "
        CALL PRINTREPORT
        OUTREC = "MODIFIED FROM SECOND FILE TO FIRST FILE"
        CALL PRINTREPORT
        LEGEND = RECORDLEGEND(1 PTR)
        OUTREC = LEGEND || FILEONE.PTR
        CALL PRINTREPORT
        LEGEND = RECORDLEGEND(2 PTR)
        OUTREC = LEGEND || FILETWO.PTR
        CALL PRINTREPORT
      END
   PTR = PTR + 1
END
DROPBUF
"BROWSE " OUTNAME OUTTYPE OUTMODE
EXIT
COMPAREHEADING:
   FILESPEC = FN1 || ' ' || FT1 || ' ' || FM1
   WITHSPEC = "   WITH " || MAXONE || " LINES"
   OUTREC = "FIRST INPUT FILE IS  " || FILESPEC || WITHSPEC
   CALL PRINTREPORT
   FILESPEC = FN2 || ' ' || FT2 || ' ' || FM2
   WITHSPEC = "   WITH " || MAXTWO || " LINES"
   OUTREC = "SECOND INPUT FILE IS " || FILESPEC || WITHSPEC
   CALL PRINTREPORT
   OUTREC = COPIES(' ',80)
   CALL PRINTREPORT
   RETURN
PRINTREPORT:
   EXECIO 1 DISKW OUTNAME OUTTYPE OUTMODE '(VAR OUTREC'
   RETURN
TRIMRECORD:
   ARG RECIN
   RECOUT = STRIP(RECIN,'T')
   RETURN RECOUT
RECORDLEGEND:
   ARG FILENUMBER LINENUMBER
   CORE = "(" || FILENUMBER || "." || LINENUMBER || ")"
   CORELEN = 10 - LENGTH(CORE)
   CORE = CORE || COPIES(".", CORELEN)
   RETURN CORE
ERROR:
   SAY "RETURN CODE WAS " RC " " ERRORTEXT(RC)
   SAY SOURCELINE(SIGL)
   EXIT

Paul V Pigott Jr
Applications Systems Analyst
Capital City First National Bank (USA)

