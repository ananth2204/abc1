How to survive in a constrained environment

INTRODUCTION

Every systems programmer has had to deal with a system that
has one or more resources constrained to the point that it
significantly effects end-user response time.  The ultimate
solution probably lies in buying more hardware, but until that
can be achieved the users suffer.  While dealing with this
situation at our installation, I developed an interesting and very
successful circumvention.  This article will discuss our solution
to our particular problem, but the principles we used could be
adapted to many different environments.

Hardware constraints are generally caused by one or more of
the following:

o      Overloaded CPU

o      Overloaded storage

o      Overloaded paging subsystem

o      Overloaded I/O subsystem.

OUR SITUATION

Our problem was triggered by the implementation of a new
version of a major IBM software product.  The new version
significantly increased the paging on our system.  While our
paging subsystem had been adequate before, the additional
paging requirement, although not excessive, could not be
handled with our existing hardware.

During prime time, response times could often be measured in
minutes.  While our CPU was also saturated, there were times
when the CPU usage was well below 100% because all ready
users were waiting for paging or swapping I/O.


INITIAL ATTEMPTS

We had long ago implemented a number of techniques to help
assure good response times for our end users.  Our batch-
oriented service machines were given low priority, and some of
our batch work was deliberately run outside our prime time.

Being unable to sufficiently change the performance of the
application itself, we made a number of traditional changes to
improve the performance of our paging subsystem.  We had
not made any major mistakes in the past, so while each change
helped a little bit, the overall benefit fell far short of our needs.


EXAMINING THE EVIDENCE

Fortunately, we keep a rather complete historical record of the
technical details describing the performance of the system.
Reviewing that record revealed the characteristics of an
overloaded system.  Just before reaching the breaking point,
we noticed that the amount of paging and swapping activity to
real DASD (as opposed to Expanded Storage and solid state
DASD) went from a few percent to 50% or more.  This
crippled the ability of the system to page fast enough, and page
rates declined while the need for paging increased.  The figures
upon which the above discovery was based are shown by the
QUERY SRM PGMACT command.


TACKLING THE PROBLEM

Of course, it's a simple matter for a systems programmer to
recommend new hardware - Expanded Storage in our case.
But this is difficult to accomplish quickly.  We made a very
unpleasant political decision that it would be better to restrict
user access to the system than to allow the system to be
overloaded. Better to give decent response time to 90% of our
users than to give absurd response time to everyone.

Restricting the number of logged on users is not a new concept.
TSO and VTAM have done this for a long time.  We tried to
identify the number of users logged on at the time of the failure
but could not come up with an exact number.  We briefly tried
an approximation, but something was lacking.  The problem
was only indirectly related to the number of users; it was
directly related to paging. We needed to limit log-ons not by
the number of users but by paging activity.


IMPLEMENTATION OF THE SOLUTION

Our users execute a common PROFILE EXEC.  We wanted to
place logic there to check for an overloaded paging subsystem.
This allowed us to use the full set of CP and CMS commands
to make the determination and to issue an explanatory message
to the user prior to a LOGOFF.

In order to allow general users to issue the QUERY SRM
PGMACT command, we first needed to change the privilege
class overrides.  The users' PROFILE EXEC then checks the
output of the QUERY SRM PGMACT.  It looks at the
percentage of paging and swapping activity going to Expanded
Storage versus DASD.  There were four different percentages
which we examined.  If any three of them are unfavourable, we
issue a LOGOFF command for the user.

The criteria we were using were based upon actual system
performance at a particular period in time.  They will change
over time as the hardware and environment change.  But since
we are dealing with percentages rather than specific rates, any
changes should be minor.  Furthermore, this was not intended
to be a permanent solution.  It was just a stopgap measure until
the additional hardware was in place.


THE RESULTS

The paging problem disappeared.  We are now able to sustain a
paging rate high enough to manage the restricted user
population.  Users wait only infrequently for a page-in or
swap-in operation.  The CPU is 100% utilized during our prime
time.

Our other bottleneck, an overloaded CPU, is now quite
apparent.  But this does not have the devastating results that
our paging problem had.  Q1 and Q2 users generally receive
decent response time; however, Q3 users can suffer
significantly.  This is probably the best that can be hoped for
with the current processor.

During prime time, 5-15% of our log-on attempts are rejected,
but we have received almost no complaints from our users
about this.  At the same time complaints about poor response
time have all but disappeared.

The decision to base LOGOFFs upon paging subsystem
performance characteristics rather than upon the number of
logged on users has allowed us to be very accurate in avoiding
the system's breaking point.  Interestingly, the maximum
number of users allowed on the system varies from day to day
by about 8%.

We will soon be installing additional Expanded Storage and
later going to a larger processor.  Hopefully, there will then be
no need for the above circumvention.  But we will assess the
performance of the system after the fact in order to see if we
should continue to use the technique, although with updated
LOGOFF criteria.


SUMMARY

The procedure we used in dealing with this problem was as
follows:

o      Identify the problem area.

o      If one application is at fault, attempt to improve the
      application itself.

o      Apply all the traditional remedies to maximize the
      performance of the problem area.

o      Determine if the problem can be alleviated by disallowing
      LOGONs.  This will work with a paging problem such as
      ours, but it would not be nearly as useful for a constrained
      CPU.

o      Determine if restricting LOGONs is politically
acceptable.

o      Determine the breaking point in specific terms that can be
      QUERYed by any user.

o      Update the PROFILE EXEC to LOGOFF just before
      reaching the breaking point.

o      Monitor the effectiveness of the technique.  Be prepared
      to make modifications as the need arises.

Dave Fraatz
Specialist
3M (USA)

