CMS incremental back-ups

About two years ago I was in a position where it was becoming
increasingly difficult to complete overnight back-ups, using
DDR, before having to start application systems for the users in
the morning.  At this point I investigated the possibility of
running incremental back-ups throughout the week, and
running full pack DDR back-ups at the weekend.  I had
progressed as far as 'roughing out' the back-up EXECs before
the idea was finally rejected.  However, other VM users may
be interested in the results achieved up to this point.

Our tape cycles were controlled manually by the operators, and
I was not planning on making any changes there.  All the tapes
in the library were initialized with VOL1 headers, and so it was
quite straightforward to code routines which would position a
tape at load point, test for a VOL1 label, and issue an
appropriate error message if the label was missing (ie the tape
had not been initialized yet, or the label had been overwritten
somehow).  In addition, I was planning to issue a WTM to the
tape, and unload it if a non-zero return code was encountered
(ie there was no write ring in the tape).  I then came to consider
the logic involved in selecting and dumping files.

Broadly speaking, I coded the EXEC so that it would maintain
a separate work file, BACKUP LOG A, which would contain
the date and time when the last back-up was peformed.  In fact,
this file contained up to 14 entries before any records were
overwritten.  The most recent entry would be compared with
the current date of a user's files to determine whether or not the
file should be included in the incremental back-up.  I coded the
EXEC to use LISTFILE to prepare a list of files to be
considered for backing up, and after a few problems using the
EXEC option, when the CMS EXEC filled up the disk, I
swapped over to using the STACK option.  A back-up would
take place if any of the following criteria were met:

o      The year element of the file date was greater than that of
      the previous back-up date

o      The year element was unchanged, but the month element
      was greater

o      The year and month elements were the same, but the day
      element had increased.

The EXEC had the following shortcomings:

o      If files had been copied by users using the OLDDATE
      option, they would not be backed up.

o      In some cases, it was practical only to obtain READ access
      to target mini-disks, and this would mean that files with a
      mode of 0 would not be backed up.

The question of gaining access to user mini-disks led me to
consider the security implications of the EXEC.  There are
several possible approaches that could be used by the EXEC to
identify and link to mini-disks.  These are:

o      Linking directly to the DIRMAINT service machine and
      searching the directory file.  I was personally opposed to
      this option!

o      Coding the directory so that the back-up machine had
      access to all the necessary mini-disks.  This was unwieldy
      - every time a user was created or deleted, the directory
      would have to be updated.  Also, it was not acceptable to
      code that many LINK statements against one user-id.  We
      were looking at over 100 users.  In addition, anyone who
      signed on to the back-up user-id would then have access to
      a wide variety of mini-disks, right across the system.

o      Maintaining a table of users, disks, and passwords, which
      the EXEC would read.  In order to be satisfactory, this
      table ought really to be encrypted.

I hope that these points will be of use to other EXEC writers
who are considering implementing incremental back-ups.

M Shears
Shift Leader (UK)

