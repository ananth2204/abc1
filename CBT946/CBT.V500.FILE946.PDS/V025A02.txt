 Virtual SYSPCH/SYSIPT files
INTRODUCTION
There are many types of multiple step DOS/VSE Assembler, compiler, and
translator processes in which punched card output is transferred from one step
to the next, eg:
y    CICS compiles (the transfer of output between the translator and compiler).
y    Subroutine compiles (the transfer of cards from the compiler to MAINT).
y    SQL Preps (the transfer of output from the pre-processor to the compiler).
Most shops accomplish the task either by using the internal POWER reader or by
assigning SYSPCH/SYSIPT to DASD.
THE PROBLEM
The POWER internal reader transfers a card deck between compile steps by
punching an entire job around an output deck.  The job that is created will
process the deck as input.  Because of this nesting, jobs that use the internal
reader can become quite complex when a step reads input from the previous step
and punches output to the next.  Furthermore, since the Assembler PUNCH
statement is often used to create the job cards around the output deck, and
since the number of columns that can be punched is restricted, problems will
arise when a JCL card requires a continuation character in column 72.
A simpler method is to assign SYSPCH/SYSIPT files to DASD, but DASD
SYSPCH/SYSIPT files use a very inefficient physical record size.  Shops that use
CKD will find that DASD SYSPCH/SYSIPT jobs will take a long time to run and
require a lot of DASD.  If compiles run in all partitions, SYSPCH/SYSIPT DASD
must be dedicated to each partition.  Even more disk space is required when it
is necessary to simultaneously read from a DASD SYSIPT file and write to a DASD
SYSPCH file (an SQL CICS compile, for example).  Furthermore, since DASD
SYSPCH/SYSIPT assigns must be permanent, an abend in a compile job can create
problems for other jobs that run in the same partition.
THE SOLUTION
If jobs could spool output from virtual SYSPCH devices to virtual SYSIPT
devices, the more efficient 4096 record size of VM TEMP space could be used.
This would result in decreased job run-times and the elimination of dedicated
DASD SYSPCH/SYSIPT space.  Also, since SYSPCH/SYSIPT devices would be virtual,
permanent assigns would no longer be necessary.  Finally, it would be a simple
matter to read a deck from the previous step while punching a deck to the next.
Shown are two methods which will replace DASD SYSPCH/SYSIPT with VM TEMP space
and virtual SYSPCH/SYSIPT devices.  The difference between the two methods is
that the first method uses a customised program to issue CP commands, and the
second method uses the VSE-supplied program CPCMD (see VM/VSE Interface Guide).
Using these methods we have saved almost an entire 3380 address and cut run-
times of some compiles to one quarter those of the old way.  Both of the methods
shown will spool output from a virtual punch to a virtual reader.  Each method
accomplishes the transfer by doing the following:
1    Closes the reader
2    Clears leftover data in the reader
3    Spools the punch to the reader
4    Closes the punch.
REQUIREMENTS FOR BOTH METHODS
In the VSE ASI and the VM directory, a virtual punch and reader must be defined
for each partition.  Each partition requires a unique VM spool class for the
reader/punch.
CUSTOMISED PROGRAM METHOD
Based on the partition, the program will select the spool class and the virtual
addresses for SYSPCH and SYSIPT.  These classes and virtual addresses are hard
coded into the program but changes may be needed to adapt the program to your
shop's needs.  See the comments in the program for further details.
Since the virtual SYSPCH/SYSIPT devices must be assigned differently for each
partition, partition-related PROCs must be used.  A $$SYSPCH PROC is used
whenever an output step is being performed:  a $$SYSIPT PROC is used whenever an
input task is being performed.  A $$SYSPCH PROC and $$SYSIPT PROC can be used in
the same step.
The program clears leftover data in the virtual reader and punch and takes the
place of the DOS CLOSE SYSPCH statement.  To clear leftover data, place the
program - with PARM='NOEOF' - at the beginning of the job.  To replace the CLOSE
SYSPCH statement, execute the program between each output and input step.  A
replacement for CLOSE SYSIPT is not necessary.
 An example of an SQL CICS compile/prep is given below.  The example illustrates
the concurrent use of SYSPCH and SYSIPT.
CUSTOMISED PROGRAM
S090     TITLE 'ISSUE CP CMDS FOR SYSIPT/SYSPCH'
         PRINT ON,NOGEN
SPCLOSE   START 0
* REGISTERS 0-15 HERE
         USING BASE,R2
         BALR  R2,0
BASE     B     BEGIN
         DC    CL8'SPCLOSE  '
         DC    CL14'01.01.03/12/87' VERSION.MOD LEVEL & DATE ASSEMBLED
BEGIN    EQU   *
         CLR   R1,R15           PARM ON EXEC CARD?
         BE    PUNCHEOF         NO, PUNCH AN EOF CARD
         L     R1,0(,R1)        R1> ADDRESS OF PARM PARAMETER
         USING PDSECT,R1        YES
         CLC   INPARM,=C'NOEOF'  PARM='NOEOF'?
         BE    NOPUNCH          YES, BYPASS PUNCHING OF EOF CARD
PUNCHEOF OPEN  PCHFILE         *******************
         PUT   PCHFILE         * PUNCH EOF CARD  *
         CLOSE PCHFILE         *******************
NOPUNCH  COMRG                  GET COMM REGION ADDRESS
         LR    R3,R1            R3 POINTS TO COMREG
         USING CDSECT,R3
         CLI   CPIK+1,X'10'     BG PIC ?
         BNE   TBLPNT           NO, GO CALC PNTR FOR CUU & CLASS TABLE
         LA    R9,11            POINT TO LAST ENTRY IN TABLE
         B     GETCUU           GO TO SET UP CUU & CLASS
TBLPNT   SLR   R4,R4
         IC    R4,CPIK+1        ONE-BYTE PIK IN R4
         SRL   R4,4
         SLR   R8,R8            CLEAR R8
         L     R8,X'80'         GET ADDRESS OF SYSCOM
         LH    R9,44(0,R8)      LOAD # OF PARTITONS
         SLR   R9,R4            (# OF PARTS)=(PIK/10) = POINTER TO TBL
GETCUU   LA    R3,PIKCUU(R9)    INDEX TO CUU TBL - CHANGES PIK 10 TO 0;
         MVC   RDRCUU+1(1),0(R3)   AND PIK 30 TO 5 FOR F5;
         MVC   PCHCUU+1(1),0(R3)   AND PIK 60 TO 2 FOR F2 ETC
         MVC   PCHCUU2,PCHCUU
         LA    R3,PIKCLASS(R9)  INDEX TO SPOOL CLASS FOR THIS PIK
         MVC   CLASS,0(R3)      MOVE SPOOL CLASS TO PURGE CMD
* SET PROTECT KEY TO 0 *********
SETKEY   SLR   R0,R0           *
         L     1,=X'FF000000'  *
         SVC   13              *
         SR    R0,R0            SET SYSTEM MASKS TO DISABLE INTERRUPTS
         SVC   22               SEIZE SYSTEM TO GET EXCLUSIVE CONTROL
         MVC   NEWPSW,X'68'     SAVE PROG NEW PSW
         LA    R7,DIAG81        SAVE 'PROG OLD PSW' IN REG 7
         STCM  R7,B'0111',X'6D' PUT ADDR IN NEXT INSTR ADDR OF PROG NEW
         DC    H'0'             FORCE PROG CHECK TO GO TO SUPERV STATE
DIAG81   MVC   OLDPSW,X'28'     SAVE PROG OLD PSW
         MVC   X'68'(8),NEWPSW   RESTORE PROGRAM NEW PSW
         LA    R5,CLOSERDR
         LA    R6,L'CLOSERDR
         DC    X'83',X'56',XL2'0008' DO DIAGNOSE
         LA    R5,PURGERDR
         LA    R6,L'PURGERDR
         DC    X'83',X'56',XL2'0008' DO DIAGNOSE
         LA    R5,SPPCH
         LA    R6,L'SPPCH
         DC    X'83',X'56',XL2'0008' DO DIAGNOSE
         LA    R5,CLOSEPCH
         LA    R6,L'CLOSEPCH
         DC    X'83',X'56',XL2'0008' DO DIAGNOSE
          LA    R7,DIAG82        INITIALIZE NEXT INSTR ADDR
         STCM  R7,B'0111',OLDPSW+5 AREA OF THE PROGRAM OLD PSW
         LPSW  OLDPSW           LOAD THE PROG OLD PSW AS CURRENT PSW
DIAG82   LA    R0,X'FF'         SET SYSTEM MASKS TO ENABLE INTERRUPTS
         SVC   22               RELEASE SEIZE
* RESET PROTECT KEY  ***********
         SLR   R15,R15         *
         L     1,=X'FF0000FF'  *
         SVC   12              *
********************************
         EOJ                     DONE
OLDPSW   DC    D'0'
NEWPSW   DC    D'0'
* KEEP THESE CONSTANTS IN ORDER
* SYSPCH ADDRESS IS 6XD SEE PCHCUU2 X IS FROM PIKCUU (CU TABLE)
* SYSRDR ADDRESS IS 6XC SEE RDRCUU  X IS FROM PIKCUU (CU TABLE)
* PICKCUU & PIKCLASS ARE SELECTED BASED ON PARTITION
PURGERDR DS    0CL13
         DC    CL12'PUR RDR CL '
CLASS    DC    C'1'
CLOSEPCH DS    0CL9
         DC    CL6'CLOSE '
PCHCUU   DC    CL3'6AD'   << PCH ADDR ON CHAN=6 UNIT=D  CU FROM TABLE
SPPCH    DS    0CL8
         DC    CL3'SP '
PCHCUU2  DC    CL3'6AD'   << PCH ADDR ON CHAN=6 UNIT=D  CU FROM TABLE
         DC    CL2' *'
CLOSERDR DS    0CL9
         DC    CL6'CLOSE '
RDRCUU   DC    CL3'6AC'   << RDR ADDR ON CHAN=6 UNIT=C  CU FROM TABLE
* PARTITION         123456789AB0  << PARTITIONS F1 - FB, BG
PIKCUU   DC    CL12'123456789AB0' << CU TABLE
PIKCLASS DC    CL12'DEFGHIJKLMNO' << SPOOL CLASS TABLE
* EXAMPLES:
*          BG SYSPCH = 60D, SYSIPT = 60C, SPOOL CLASS=O
*          F2 SYSPCH = 62D, SUSIPT = 62C, SPOOL CLASS=E
*          F3 SYSPCH = 63D, SYSIPT = 63C, SPOOL CLASS=F
*                               ETC.
PCHFILE DTFCD DEVADDR=SYSPCH,IOAREA1=EOFCARD,TYPEFLE=OUTPUT,DEVICE=3525
         CDMOD DEVICE=3525,TYPEFLE=OUTPUT
EOFCARD  DC    CL80'/*'
CDSECT   DSECT         PARTITION COMMUNICATIONS REGION DSECT
         DS    CL8     DATE AS MM/DD/YY (FROM DATE CARD ELSE SYSTEM)
         DS    CL4     RESERVED
         DS    CL11    USER AREA (RESET TO ZERO AFTER EACH JOB CARD)
         DS    CL1     UPSI SWITCH
         DS    CL8     JOB NAME FROM // JOB CARD
         DS    CL14    N/A
CPIK     DS    H       PARTITION IDENTIFICATION KEY
         DS    CL42    N/A
         DS    H       ADDR OF 1ST PART OF PROGRAM INFORMATION BLOCK
PDSECT   DSECT
PARMLEN  DS    CL2
INPARM   DS    CL5
SPCLOSE   CSECT
         LTORG
         END

EXAMPLE PROCS
Examples for partition-related $$SYSPCH AND $$SYSIPT PROCs for BG,F2,F3 are
given below:
         CATALP  $0SYSPCH,VM=0.0
// ASSGN SYSPCH,60D
/+
         CATALP  $0SYSIPT,VM=0.0
// ASSGN SYSIPT,60C
 /+
         CATALP  $2SYSPCH,VM=0.0
// ASSGN SYSPCH,62D
/+
         CATALP  $2SYSIPT,VM=0.0
// ASSGN SYSIPT,62C
/+
         CATALP  $3SYSPCH,VM=0.0
// ASSGN SYSPCH,63D
/+
         CATALP  $3SYSIPT,VM=0.0
// ASSGN SYSIPT,63C
/+

EXAMPLE SQL/CICS COMPILE
// JOB SSYCATAL
// EXEC SPCLOSE,PARM='NOEOF'  CLEAR PUNCH
// ASSGN SYSIPT,02C
// EXEC PROC=$$SYSPCH         OUTPUT TO SQL PREPROCESSOR
// EXEC DFHECP1$              CICS TRANSLATOR
 PROGRAM GOES HERE
/*
// EXEC SPCLOSE               SPOOL CICS TRANS TO SQL PREPROCESSOR
// EXEC PROC=$$SYSIPT         INPUT FROM CICS TRANSLATOR
// EXEC PROC=$$SYSPCH         OUTPUT TO COBOL COMPILER
// EXEC ARIPRPC,SIZE=AUTO,                                             X
               PARM='NOPRINT,ISOL(USER),NOBLOCK,                       X
               PREP=XXXXXXX,USER=PROD/PROD'
/*
// EXEC SPCLOSE               SPOOL PREPROCESSOR OUTPUT TO COBOL
// EXEC PROC=$$SYSIPT         INPUT FROM PREPROCESSOR
* LIBDEFS GO HERE
// OPTION CATAL,SYM
 PHASE XXXXXXX,*
 INCLUDE DFHECI
// EXEC FCOBOL,SIZE=384K
 INCLUDE ARIRRTED
 INCLUDE ARIPADR
/*
// EXEC LNKEDT
/&

CPCMD METHOD
CPCMD is an IBM utility that executes CP commands from DOS.  Since the spool
classes and virtual SYSPCH/SYSIPT addresses must be different for each
partition, each partition must execute a different set of CP commands.  An easy
way to accomplish this is to put the commands in partition-related PROCs.  These
PROCs are placed at the beginning of the job (to clear leftover data), and in
place of "CLOSE SYSPCH".  The "CLOSE SYSIPT" is no longer required.  See below
for the $$CLOSE PROCs.
Except when $$CLOSE is used to clear leftover data, a "/*" must be written to
SYSPCH every time $$CLOSE is executed.  This is accomplished by the program
shown below.
Also needed are PROCs to assign the virtual SYSPCH and SYSIPT.  The $$SYSPCH
PROC must be placed before any output step, and the $$SYSIPT PROC must be placed
before an input step (but after the $$CLOSE PROC).  See below for examples of
$$SYSPCH and $$SYSIPT PROCs.
Also shown below is a example of an SQL/CICS compile.
EXAMPLE OF CPCMD METHOD $$CLOSE PROCS
 CATALP $0CLOSE,DATA=YES
// EXEC CPCMD,SIZE=AUTO
CLOSE 60C
PURGE RDR CL O
SPOOL 60D CL O
CLOSE 60D
/*
 /+ // ASSGN SYSIN,02C
 CATALP $2CLOSE,DATA=YES
// EXEC CPCMD,SIZE=AUTO
CLOSE 62C
PURGE RDR CL E
SPOOL 62D CL E
CLOSE 62D
/*
/+ // ASSGN SYSIN,02C
 CATALP $3CLOSE,DATA=YES
// EXEC CPCMD,SIZE=AUTO
CLOSE 63C
PURGE RDR CL F
SPOOL 63D CL F
CLOSE 63D
/*
/+ // ASSGN SYSIN,02C

CPCMD METHOD PROGRAM
         TITLE 'WRITE /* CARD'
         PRINT ON,NOGEN
CLOSE   START 0
* REGISTERS 0-15 HERE
         USING BASE,R2
         BALR  R2,0
BASE     B     BEGIN
         DC    CL8'CLOSE  '
         DC    CL14'01.01.03/12/87' VERSION.MOD LEVEL & DATE ASSEMBLED
PCHFILE DTFCD DEVADDR=SYSPCH,IOAREA1=EOFCARD,TYPEFLE=OUTPUT,DEVICE=3525
         CDMOD DEVICE=3525,TYPEFLE=OUTPUT
EOFCARD  DC    CL80'/*'
BEGIN    EQU   *
PUNCHEOF OPEN  PCHFILE         *******************
         PUT   PCHFILE         * PUNCH EOF CARD  *
         CLOSE PCHFILE         *******************
         EOJ
         END

EXAMPLE SQL/CICS COMPILE
// JOB SSYCATAL
// EXEC PROC=$$CLOSE       '  CLEAR PUNCH
// ASSGN SYSIPT,02C
// EXEC PROC=$$SYSPCH         OUTPUT TO SQL PREPROCESSOR
// EXEC DFHECP1$              CICS TRANSLATOR
 PROGRAM GOES HERE
/*
// EXEC CLOSE
// EXEC PROC=$$CLOSE          SPOOL CICS TRANS TO SQL PREPROCESSOR
// EXEC PROC=$$SYSIPT         INPUT FROM CICS TRANSLATOR
// EXEC PROC=$$SYSPCH         OUTPUT TO COBOL COMPILER
// EXEC ARIPRPC,SIZE=AUTO,
               PARM='NOPRINT,ISOL(USER),NOBLOCK,                       X
               PREP=XXXXXXX,USER=PROD/PROD'                            X
/*
// EXEC CLOSE
// EXEC PROC=$$CLOSE          SPOOL PREPROCESSOR OUTPUT TO COBOL
// EXEC PROC=$$SYSIPT         INPUT FROM PREPROCESSOR
* LIBDEFS GO HERE
// OPTION CATAL,SYM
 PHASE XXXXXXX,*
 INCLUDE DFHECI
// EXEC FCOBOL,SIZE=384K
 INCLUDE ARIRRTED
 INCLUDE ARIPADR
/*
// EXEC LNKEDT
 /&
IMPLEMENTATION NOTES
The methods outlined above have been used successfully in several types of
compile process.  The methods can also be adapted to non-compile applications.
Readers should be warned, however, that an extra blank card is usually punched
at the end of a deck.  This is usually not a problem, but if the deck is
processed by an Assembler step a harmless warning will be printed.
If an SQL Assembler program is to be assembled, the END statement should be
removed.  Warnings will be printed, but if this is not done, undesirable errors
will be generated because the SQL preprocessor will add the SQLDSECT after the
END.
Robert L Baxter
Senior Systems Programmer
Rocky Mountain News (USA)     ) Xephon 1988




















































