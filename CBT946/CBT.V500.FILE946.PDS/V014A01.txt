 REXXPERT - expert system written in REXX


OVERVIEW OF EXPERT SYSTEMS

An expert system is a computer program that attempts to emulate a specific task
of a human expert.  Expert systems, like human experts, are able to explain
their reasoning, giving the user a better understanding of the process:  but
unlike human experts, they have no common sense;  they have only a very narrow,
highly detailed knowledge about a specific subject.  This knowledge consists of
facts and the interaction between facts.  This interaction between facts is
often stored in a knowledge base in the form of IF ... THEN ... rules.  The
program that actually uses the knowledge stored in the rules and interacts with
the user is called the inference engine.


OVERVIEW OF REXXPERT

REXXPERT, an expert system development tool written in REXX, was designed to
allow a simple expert system to be built under VM/SP.  Because the rules are a
subset of REXX, any information available to REXX now becomes available to the
expert system.  This could be a CMS file, other programs or systems called from
REXX, or information from the console.  The output of the expert system could be
stored in a CMS file, printed, or simply displayed on the screen.

REXXPERT, through the TRACE command of REXX, also allows you to see how the
inference routine works.  Because you have the source code you are also able to
improve REXXPERT or modify it to meet your needs.

REXXPERT supports the following responses to requests for information from the
user:

%    WHY - The user would like to know why the system is asking for a particular
piece of information.  The system responds by displaying the rule that it is
currently using.  If the user continues to enter WHY the system will retrace its
logic from the original goal.

%    WHAT - The system responds by displaying what it now knows.

%    HOW - The system responds by indicating how it knows a particular piece of
information.

%    RULE - The system responds by displaying the rule requested.

%    WHERE - The user wants to know what rules use a particular field in their
conditions.  REXXPERT will respond with a list of those rules.

%    CHANGE - Allows the user to change a prior response.


DATA STRUCTURES USED IN REXXPERT

%    Goal stack - Contains the main goal and sub-goals that REXXPERT is trying
to solve.

%    Rule list - Contains the list of rules where a particular variable is
modified.  This list is used to determine which rule to use when trying to solve
a goal.

%    Reason list - This list keeps track of why the system is using a rule.
This list is used when the user asks WHY?


REXXPERT - LOGIC FLOW

Place main goal on goal stack
       REPEAT
   POP off the goal on top of the stack
   Find an unfired rule that has this goal as part of its conclusion
        IF rule found THEN
      Fire rule
           IF rule was false THEN
        PUSH goal back onto stack
           ENDIF
        ELSE
      Ask user for value of this goal
        ENDIF
      UNTIL Goal stack is empty


SAMPLE KNOWLEDGE BASE

The sample knowledge base shows the general format.  This knowledge base assists
the user in choosing the type of dot-matrix printer needed.  There are only
three models to choose from:

1    Low-speed, dot matrix, 80 columns.
2    Medium-speed, dot matrix, 9 pin, 132 columns.
3    High-speed, dot matrix, 24 pin, 132 columns.

REXXPERT uses this knowledge base to determine the requirements for speed,
quality, and print width.  This knowledge is then used to choose one of the
three printers.


REXXPERT RULES

The rules for REXXPERT are entered into a CMS file in the following format:

 RULE_nnn:
   IF expression THEN DO
     any number of assignment statements ( ?.variable = expression )
     any number of CALL statements
   END
 RETURN
/* The following code must be placed at the end of the rules.         */
/*--------------------------------------------------------------------*/
/* Initialize_Prompts    - Place any prompts that you want below      */
/* Format is Prompt.?.name = 'Prompt string'                          */
/*--------------------------------------------------------------------*/
Initialize_Prompts:
RETURN
/*--------------------------------------------------------------------*/
/* Initialize_Main_Goal  - Place any logic here that you want to      */
/* execute prior to beginning the inference process. This is          */
/* also where you can preset the goal that the system will            */
/* search for.                                                        */
/*--------------------------------------------------------------------*/
Initialize_Main_Goal:
RETURN
/*--------------------------------------------------------------------*/
/* Initialize_Attr_Lists - Following is built by EXPCOMP XEDIT        */
/*  **** Do NOT place any logic here ****                             */
/*--------------------------------------------------------------------*/
Initialize_Attr_Lists:
RETURN

All variables must be of the form ?.name. Whenever a variable is used it must be
followed by at least one blank.  The CALLED routine can use both REXXPERT
variables and any other variables.  The full power of REXX is available in the
CALLED routine.


EXPCOMP - THE REXXPERT RULE 'COMPILER'

EXPCOMP, an XEDIT macro, is used to build the linked lists that REXXPERT uses in
backward chaining.  These linked lists contain all the rules where a particular
variable is modified.  It also builds a list of all the variables, which is used
by the WHAT command.


LIMITATIONS OF REXXPERT

1    The system has not been extensively tested.  I have used it to build
several small expert systems under VM/SP.
2    Only supports backward chaining.  (The system could be modified to support
forward chaining if that was required.)
3    Confidence levels and multiple values are not supported.  (This would have
made the inference engine much more difficult to understand.)

This article will be continued next month when a sample expert system knowledge
base will be printed.

David T Jeffery
Software Supervisor
Zurn Industries (USA)
) David T Jeffery 1987









































