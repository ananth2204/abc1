Waiting Assemble

CMS users regularly require a method for waiting for an event,
for example the arrival of an RDR file, or an SMSG, on a
time-based interval.  Within INFO/SYSTEM, IBM always
points to the WAKEUP program that is part of IPF.  But it
is a bit like ordering a mountain (IPF) to obtain a molehill
(WAKEUP).  Personally I think that besides WAKEUP and
BROWSE there is nothing else that is interesting any more in
IPF.

Having looked at the source of WAKEUP, and some similar site-
developed programs, I find them rather massive.  Also, they
duplicate a lot of CMS coding that is already available.  It is not
necessary to do a lot of external or I/O interrupt handling, nor to
code your own wait PSW.  Everything that is needed is provided
by CMS.

This program will wait for:

1  An SMSG to arrive, using IUCV

2  An RDR file to arrive, using HNDINT

3  A time interval to expire, using STIMER

4  A console attention, using STAX.

For all of these events, a simple exit routine is used that will POST
an ECB.  The SMSG exit routine is somewhat longer because
IUCV requires more handling, and the message itself must be
received and stacked.

This program can be expanded upon of course, but everything it
does, as submitted, will work just fine without stealing PSWs from
CMS etc.

About the STACK macro at the end of the SMSG exit routine: it is
an adaptation of the WRTERM macro and a listing is included.

WAITING ASSEMBLE

WAITING  CSECT
         USING WAITING,R15
         REGEQU
         SAVE  (14,12),,*
         LR    R12,R15
         DROP  R15
         USING WAITING,R12
         CNOP  0,4
         BAL   R15,*+76
         DC    18A(0)
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         SPACE 1
         CLI   8(R1),X'FF'
         BE    NOTIME
         LA    R5,8(R1)
         LA    R6,0
         LA    R7,0
         LA    R8,8
DECCNV   EQU   *
         IC    R2,0(R5)
         CLI   0(R5),C'9'
         BH    DECEND
         CLI   0(R5),C'0'
         BL    DECEND
         M     R6,=F'10'
         N     R2,=A(15)
         AR    R7,R2
         LA    R5,1(R5)
         BCT   R8,DECCNV
DECEND   EQU   *
         LR    R0,R7
         SRDA  R0,32
         M     R0,=F'100'
         ST    R1,INTERVAL
NOTIME   EQU   *
         XC    EVENT,EVENT             CLEAR ECB
         HNDIUCV SET,NAME=WAKEUP,EXIT=COMPEND
         LA    R2,IUCVPLST             ADDRESS OF OUR IUCV PLIST
         USING IPARML,R2               ESTABLISH ADDRESSABILITY
         SPACE
**       BUILD THE PARAMETER LIST WITH THE IUCV MACRO, THEN ESTABLISH**
**  THE CONNECTION AND SETUP THE PATH'S EXIT.                        **
         SPACE
         IUCV  CONNECT,PRMLIST=(R2),USERID=STARMSG,MF=L
         CMSIUCV CONNECT,NAME=WAKEUP,PRMLIST=(R2),EXIT=MSGPATH
         MVC   PATHID(2),IPPATHID      SAVE PATH ID
         DROP  R2
         SPACE
**       WAIT FOR *MSG TO TELL US OUR CONNECTION IS COMPLETE.        **
**  OUR EXIT WILL POST THAT CONCOMP ECB WHEN THE INTERRUPT COMES IN. **
**  NOTE THAT WAITECB INTERNALLY WILL ENABLE US FOR INTERRUPTS.      **
         SPACE
         WAIT  ECB=EVENT
         LINEDIT TEXT='SET SMSG IUCV',DISP=CPCOMM,DOT=NO
         SPACE
**       WAIT HERE FOR MESSAGES TO ARIVE. THE MSGIN ECB WILL BE      **
**  POSTED EACH TIME A MESSAGE COMES IN. IF THE MESSAGE IS 'STOP'    **
**  WE WILL QUIT AND CLEAN UP, OTHERWISE, WRITE THE MESSAGE TO A     **
**  LOG FILE NAMED 'MSG FILE'.                                       **
         SPACE
         XC    EVENT,EVENT
         LINEDIT TEXT='SET TIMER REAL',DISP=CPCOMM,DOT=NO
         HNDINT SET,(RDR1,RDR,00C,ASAP)
         STAX   COIN
         STIMER REAL,TIME,BINTVL=INTERVAL
         WAIT   ECB=EVENT
         TTIMER CANCEL
         STAX
         LINEDIT TEXT='SET SMSG OFF',DISP=CPCOMM,DOT=NO
         HNDIUCV CLR,NAME=WAKEUP
         HNDINT CLR,(RDR1)
         LH     R15,EVENT+2
RETURN   EQU    *
         L      R13,4(R13)
         RETURN (14,12),RC=(15)
COIN     EQU   *
         USING *,15
         POST  EVENT,4
         SR    15,15
         BR    R14
         DROP  15
RDR      EQU   *
         USING *,15
         POST  EVENT,3
         SR    15,15
         BR    R14
         DROP  15
TIME     EQU   *
         USING *,15
         POST  EVENT,2
         SR    15,15
         BR    R14
         DROP  15
         TITLE 'IUCV EXTERNAL INTERRUPT EXIT'
**       THIS IS OUR EXTERNAL INTERRUPT EXIT FOR THE PATH WE'VE SET  **
**  UP BETWEEN *MSG AND OURSELVES. IT WORKS AS FOLLOWS:              **
**  CONNECTION COMPLETE: POST THE CONCOMP ECB AND RETURN             **
**  INCOMING MESSAGE: RECEIVE THE MESSAGE DATA IN OUR MESSAGE        **
**                    BUFFER, POST THE MSGIN ECB AND RETURN          **
         SPACE
MSGPATH  DS    0D
         USING MSGPATH,R15
         SAVE  (14,12),,*
         LR    R12,R15
         DROP  R15
         USING MSGPATH,R12
         CNOP  0,4
         BAL   R15,*+76
         DC    18A(0)
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         SPACE 1
         USING IPARML,R2               R2 POINTS TO EXT. INT. BUFFER
         CLI   IPTYP,X'02'             IS IT A CONNECTION COMPLETE
         BE    CONNCOMP                IF SO, SPECIAL CASE
         XC    IUCVPLST(40),IUCVPLST   CLEAR IUCV PLIST
         MVI   MSGAREA,X'40'           CLEAR MESSAGE BUFFER
         MVC   MSGAREA+1(L'MSGAREA-1),MSGAREA
         MVC   MSGCLASS,IPTRGCLS       SAVE CLASS
         MVC   MSGID,IPMSGID           AND THE ID OF THE MESSAGE
         LA    R2,IUCVPLST             POINT TO PRMLIST
         SPACE
**       GET THE MESSAGE WHICH HAS BEEN SEND TO ME BY ISSUING AN     **
**  IUCV RECEIVE PUT MSG IN MSGAREA.                                 **
         SPACE
         IUCV  RECEIVE,PATHID=PATHID,PRMLIST=(R2),MSGID=MSGID,         X
               TRGCLS=MSGCLASS,BUFFER=MSGAREA,BUFLEN=BUFERLEN
         MVC   IUCVLEN1,IPBFLN1F        SAVE MESSAGE LENGTH
         LH    R4,BUFERLEN
         S     R4,IUCVLEN1             GET MSG LENGTH
         LA    R4,2(R4)                ADD FOR ASTERISK
         STACK MSGAREA-2,(R4)          STACK
         POST  EVENT,1
         B     MSGRET                  RETURN TO CMS
         SPACE
**       COME HERE IF IT IS A CONNECTION COMPLETE INTERRUPT          **
** IPTYPE= X'02'                                                     **
         SPACE
CONNCOMP EQU   *
         POST  EVENT
MSGRET   EQU   *                       RETURN TO CMS
         L     R13,4(R13)
         RETURN (14,12),RC=0
         SPACE
**       THIS IS OUR CONNECT PENDING EXIT. IT SHOULD NEVER BE DRIVEN **
** IF IT IS, WE'LL JUST IGNORE IT AND RETURN                         **
         SPACE
COMPEND  EQU   *
         BR    R14
         DROP  R2
         SPACE
         LTORG
CMSRET   DS    F
WORK     DS    F
INTERVAL DC    F'500'
EVENT    DC    F'0'
         DS    0D
IUCVPLST DC    40X'00'
MSGID    DC    F'0'
MSGCLASS DC    F'0'
PATHID   DC    F'0'
STARMSG  DC    CL8'*MSG'
WAKEUP   DC    CL8'BILL'
IUCVLEN1 DC    F'0'
BUFERLEN DC    H'140'
         DC    CL2'*'
MSGAREA  DC    CL140' '
         DC    X'15'
         COPY  IPARML
         END

AWSOME MACLIB

MEMBER STACK
         MACRO
&LABEL   STACK &UMSG,&ULEN,&HOW=FIFO,&ERROR=1
         LCLA  &PNT,&CNT,&END
         LCLC  &FLG,&CLR,&LEN,&MSG
         LCLB  &MR,&LR,&MSD,&HR
.** LCLA'S USED TO COMPUTE LENGTH OF SELF-DEFINING MESSAGE
.** LCLC'S USED TO ASSEMBLE PLIST VALUES
.** LCLB'S CONTAIN CODE-GENERATION FLAGS
.** MAKE SURE A MESSAGE OF SOME TYPE WAS GIVEN, AND NOTE
.** IF IT'S SELF-DEFINING OR GIVEN AS A REGISTER
         AIF   (T'&UMSG NE 'O').UMSGOK
         MNOTE 8,'LINE ADDRESS NOT SPECIFIED'
         MEXIT
.*
.UMSGOK  AIF   ('&UMSG'(1,1) NE '''').UMSGR
&MSD     SETB  1               NOTE SELF-DEFINING MSG
&MSG     SETC  'DMS&SYSYNDX.D' ASSEMBLE MSG-ADDRESS
         AGO   .UMSGZ
.*
.UMSGR   AIF   ('&UMSG'(1,1) NE '(').UMSGA
&MR      SETB  1              NOTE MSG REGISTER-ADDRESSED
&MSG     SETC  '&UMSG(1)'     DUMMY ASSEMBLE-VALUE
         AGO   .UMSGZ
.*
.UMSGA   ANOP
&MSG     SETC  '&UMSG'        MESSAGE SYMBOLIC NAME
.UMSGZ   ANOP
.****
.** GET THE VALUE OF THE MESSAGE LENGTH.  COMPUTE IT, IF IT
.** WASN'T GIVEN OR IF THE MESSAGE IS SELF-DEFINING.
.****
         AIF   (T'&ULEN EQ 'O').ULENO
         AIF   ('&ULEN'(1,1) EQ '(').ULENR
&LEN     SETC  '&ULEN'        SELF-DEFINING LENGTH
         AGO   .ULENZ
.*
.ULENR   ANOP
&LR      SETB  1              NOTE LENGTH IN REGISTER
&LEN     SETC  '01'               INSURE &LEN HAS VALUE
         AGO   .COMPL
.*
.ULENO   AIF   (&MSD).COMPL
         MNOTE 8,'LENGTH PARAMETER NOT SPECIFIED'
         MEXIT
.*
.COMPL   ANOP                 PREPARE TO COMPUTE MSG-LENGTH
         AIF   (NOT &MSD).ULENZ   BRANCH IF NOT SELF-DEFINING
&PNT     SETA  2              FIRST-CHARACTER INDEX
&END     SETA  K'&UMSG-2      LAST CHARACTER INDEX
         AIF   (&END GT 0).COMPGO
         MNOTE 8,'INVALID LINE SPECIFICATION'
         MEXIT
.*
.COMPGO  AIF   (&PNT GT &END).COMPZ
         AIF   ('&UMSG'(&PNT,2) EQ '''''').QUOTE
&PNT     SETA  &PNT+1
         AGO   .COMPGO
.QUOTE   ANOP
&CNT     SETA  &CNT+1
&PNT     SETA  &PNT+2
         AGO   .COMPGO
.COMPZ   ANOP
&CNT     SETA  K'&UMSG-&CNT-2
&LEN     SETC  '&CNT'         ASSEMBLE LENGTH-VALUE
.*
.ULENZ   ANOP
.****
.** EXAMINE THE HOW PARAMETER FOR 'F' OR 'L'
.****
&CLR     SETC  'F'
         AIF   ('&HOW'(1,1) EQ '(').UCLREG
         AIF   ('&HOW'(1,1) EQ 'F').UCLRZ
         AIF   ('&HOW'(1,1) NE 'L').UCLRERR
&CLR     SETC  'L'
         AGO   .UCLRZ
.UCLRERR MNOTE 4,'INVALID STACK SPECIFICATION - FIFO ASSUMED'
         AGO   .UCLRZ
.UCLREG  ANOP
&HR      SETB  1
.UCLRZ   ANOP
.****
.** ALIGN TO A WORD, GENERATE LABEL
.****
         CNOP  0,4
&LABEL   DS    0H
.****
.** GENERATE ADDRESS-STORE, IF NEEDED.
.****
         AIF   (NOT &MR).CONT5
         STCM  &MSG,B'0111',DMS&SYSNDX.B+1   STORE MESSAGE-ADDRESS
.CONT5   ANOP
         AIF   (NOT &HR).CONT5H
         STCM  &HOW(1),B'1000',DMS&SYSNDX.C
.CONT5H  ANOP
.****
.** GENERATE LENGTH-STORE, IF NEEDED
.****
         AIF   (NOT &LR).CONT6
         STCM  &ULEN(1),B'0001',DMS&SYSNDX.B     STORE LENGTH IN PLIST
.CONT6   ANOP
.****
.** GENERATE PLIST, BAL ON R1 AROUND IT
.****
         BAL   1,DMS&SYSNDX.E  POINT R1 TO PLIST
DMS&SYSNDX.A DC   CL8'ATTN'
DMS&SYSNDX.C DC   CL1'&CLR',CL3'IFO'
DMS&SYSNDX.B DC   AL1(&LEN),AL3(&MSG)
.****
.** GENERATE MESSAGE TEXT, IF SELF-DEFINING
.****
         AIF   (NOT &MSD).CONTZ
DMS&SYSNDX.D DC   CL&LEN&UMSG
.CONTZ   ANOP
.****
.** GENERATE SVC, ALIGNED ON HALFWORD
.*****
DMS&SYSNDX.E DS   0H
         SVC   202            CALL CMS TO TYPE
         DC    AL4(&ERROR)
         MEXIT
         MEND

W F Heller
System Programmer/Consultant
Fokker Aircraft  BV (Holland) ) Xephon 1990


