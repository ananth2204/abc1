Reload the file being XEDITed

This XEDIT macro was originally written as a way of simply
combining several commonly used XEDIT commands, thus
making it easier to reload the XEDITed file from disk.  Since
then, its convenience has made it easy to use the macro for
additional purposes.  For example, I might make a potentially
disastrous global change to a file, knowing that it is an easy
matter to undo the change.  Or I might start working on a new
file by RELOADing a similar file from disk.

This XEDIT macro is useful for those times when you just
want to throw in the towel and start all over again.  It replaces
the current file with the contents of a disk file and sets the ALT
counter to 0.  It is invoked by entering:

      RELOAD <file-id|$|ACCess>

where file-id      is the name of the disk file to be loaded.

Consider the following features:

o      If omitted, the file-id will be taken from the file currently
      being edited.

o      The filename, filetype, and/or filemode may be '=' (or
      omitted) in which case the value will be taken from the
      name of the file currently being edited.

o      If just $ is specified the file selected is fn $ft fm, where fn,
      ft, and fm are taken from the file currently being edited,
      and $ft is subject to truncation after 8 characters.  This
      convention matches that used by an EXEC at our
      installation which maintains old versions of files.  Actually
      any number of consecutive $ characters may be used, and
      the corresponding $ft file will be selected.

ACCess indicates that the file-id to be loaded is taken from the
file currently being edited.  But before the load takes place, the
affected MDISK is reACCESSed.

/*  Determine the fileid                                              */
arg fn ft fm .
EXTRACT '/FNAME/FTYPE/FMODE/LRECL/RECFM/'
fmode_letter = left(fmode.1,1)
select
   when verify(fn,'$') = 0 then do
                /*  just "$" instead of a fileid (or $$ or $$$ etc.)  */
      ft = left(fn || ftype.1, 8)                 /*  must be in ...  */
      fn = fname.1                                /*  this order      */
      fm = fmode_letter
      fileid = fn ft fm
      end
   when abbrev('ACCESS',fn,3) & ft fm = '' then do        /*  ACCess  */
      fn = fname.1
      ft = ftype.1
      fm = fmode_letter
      fileid = fn ft fm
      address COMMAND 'QUERY DISK' fm '(LIFO'
      if rc ¬= 0 then
         call exit '1 The' fm 'disk is no longer ACCESSed'
      pull 8 cuu 11
      pull .
      x = 'ACCESS' cuu fm
      address COMMAND 'SET CMSTYPE HT'
      address COMMAND x
      access_rc = rc
      address COMMAND 'SET CMSTYPE RT'
      if access_rc ¬= 0 then
         call exit access_rc 'Return code' access_rc 'from' x
      end
   otherwise                                         /*  true fileid  */
      if fn = '=' | fn = '' then fn = fname.1
      if ft = '=' | ft = '' then ft = ftype.1
      if fm = '=' | fm = '' then fm = fmode_letter
      fileid = fn ft fm
end   /*  select  */
/*  Edit the fileid                                                   */
address COMMAND 'LISTFILE' fileid '(LABEL LIFO'
if rc ¬= 0 then
   call exit '28 File' fileid 'does not exist'
pull 29 new_lrecl 34
if new_lrecl ¬= lrecl.1 then
   if recfm.1 = 'V' & new_lrecl < lrecl.1 then
                        /*  a common occurrence especially for EXECs  */
      nop                        /*  Let's assume it's not a problem  */
   else
      EMSG 'The LRECL of' fileid '('new_lrecl+0') does not match the' ,
         'current file ('lrecl.1')'
/*  Reload                                                            */
SET 'SCOPE ALL'
            /*  DELETE everything (and leave it that way afterwards)  */
PRESERVE
SET 'MSGMODE OFF'
/*Avoid "DMSXCG501I nnnn line(s) deleted" and "DMSXGT564W EOF reached"*/
SET 'TRUNC *'
':0 DELETE *'
GET fileid
get_rc = rc
TOP
SET 'ALT 0 0'
RESTORE                   /*  probably accomplishes a SET MSTMODE ON  */
if get_rc = 3 then
   EMSG 'Truncation has occurred after column' lrecl.1
exit 0
/*                         Subroutines                                */
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   EMSG final_message
exit exit_rc

Dave Fraatz
Specialist
3M (USA)

