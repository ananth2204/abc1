Sorted VM directories and performance

I greatly appreciated the January article entitled Directory sort
by M Plannthin.  The article was very interesting and presented
an excellent reason for the implementation of a sorted VM
directory - better VM efficiency.  So, I quickly created the
specified DIRSORT EXEC and sorted the directory with the
new EXEC.  From this, many questions arose.  First, did a
sorted VM directory really improve effic-iency?  As reported in
the earlier article, the concept of using directory pages and
maintaining high and low user-ids within each page should in
theory be more efficient if the directory is sorted.  If so, could
that improvement be shown by performance measurements?
How?

After preliminary investigation of DMKUDR - the module
called to find a given user-id in the directory - I found that the
code utilized a linear search of the directory pages (DMKUDR
is shown below).  If it's known that the directory is sorted,
would the implementation of a binary search routine in
DMKUDR improve VM efficiency even more and if so, by
how much?

What follows is the pursuit of the answers to these questions.


THE CPTRAP FACILITY AND THE TOD CLOCK

The first thing that was needed was a mechanism for recording
'timing' information; something that would allow searches
within the DMKUDR module to be timed.  This need was
filled by CPTRAP.  The primary reason for the CPTRAP
facility is to provide the system programmer with a vehicle for
problem determination.  The facility can be used to create a
reader spool file of CP trace table entries containing CP data.
A CP interface to CPTRAP lets CP send information to be
recorded in the CPTRAP file.  The data collected can be used
to solve a problem or to record specific information (eg time-
stamps).  Hence, CPTRAP could be used to 'trap' performance
information.  For more details, see the VM Diagnosis Guide,
which contains a complete description of the facility and its
workings with explicit examples.  An item of note is that
during testing the CPTRAP facility enabled us to 'see'
DMKUDR searches for invalid user-ids caused by improper
formats of CP commands (ie needless cycles through
DMKUDR logic).  So, I had found the mechanism for the
recording of timing information; next I needed a timing facility
to measure the time intervals.

After investigation of the Principles of Operations manual, I
concluded that the TOD clock was the answer.  The TOD clock
allows for elapsed-time measurements of high resolution, and
can be inspected by executing the STCK instruction.  The
STCK instruction causes a 64-bit value to be stored - a value
that represents the number of clock units since the standard
time origin which is recommended as 1 January 1900, 00:00am
(GMT).  So, by subtracting the values from two successive
executions of the STCK instruction, one could get an elapsed-
time reading.

Our VM/SP HPO Release 5.0 system (PUT 9003) runs on an
IBM 3083-J32.  On this CPU the TOD clock is incremented
every 125 nanoseconds (the incrementing rate is comparable to
the instruction-execution rate of the CPU model).  The
incrementing involves bits 0-54 with bit 55 always 0.  The
rightmost 8 bits (56-63) are used for other purposes.  So, the
TOD clock is incremented by adding a one in bit position 54
every 125 nanoseconds.  Hence, subtracting bit positions 0-54
from successive executions of STCK would result in a clock
unit value which would correspond to a measured time interval.
Consider the example in Figure 1.

The important thing to realize is that, by using the values from
the TOD clock, elapsed-time calculations can be realized, thus
providing a tool for high-resolution timing of program logic.


UNSORTED DIRECTORY VERSUS SORTED DIRECTORY

By using the CPTRAP facility in association with the TOD
clock, I would be able to take 'timings' of successful
DMKUDR searches for specific user-ids.  By placing STCK
instructions before entering the search logic and after a
successful search, I would be able to calculate an approximate
time representing the total 'successful search' time for a specific
user-id.  (I would only concentrate on 'successful searches'
since that should be the primary situation.)  In the testing, the
time measurements included an amount for 'paging'; but this
time was found to be minimal and constant across all testing
scenarios and therefore not the major factor contributing to the
timings.  The time spent in the loop was mainly due to the state
of the directory and the search algorithm employed.  The
results of the testing, comparing an unsorted directory versus a
sorted directory, are shown in Figure 2.  (The number in
parentheses to the right of the user-id signifies the directory
page that the user-id resided in for the unsorted directory.)

The test results seemed to confirm the hypothesis - a sorted
VM directory did provide better VM efficiency.  The search
times for users 'caught' in the scenario described in the January
'91 article were significantly improved.  But it was interesting
to note that not all searches improved.  The reason was that
after sorting, the position of those user-ids in their directory
page was obviously further from the beginning than before,
requiring more loops through the linear search algorithm.
What about overall VM efficiency in the DMKUDR routine?
In other words, what kind of effect did having a sorted
directory have on overall CPU time spent in DMKUDR?
Again using the previously mentioned tools, this data was
easily gathered, and the results are shown in Figure 3.

The testing showed three things that were surprising:

o      DMKUDR is called very frequently (much more than I had
      imagined).  The average for all testing was 12.82
      searches/minute.  Therefore, a significant saving per
      search could result in much less CPU time spent in
      DMKUDR.

o      With a sorted directory, the average search time went
      down about 18 microseconds.  Propagating this savings to
      an average 20-hour day (our standard production day)
      based on the average searches per minute, a reduction of
      276,912 microseconds could be seen in total CPU time
      spent in DMKUDR.  A sorted directory at our installation
      could result in a saving of about 0.276 CPU seconds per
      20-hour production day.

o      The reduction in the average search time was not as drastic
      as expected.  This is because the average search time really
      depends on where the frequently-searched-for user-ids are
      in the page.  If the sorting of the directory does not affect
      the position of those user-ids in the page, then the average
      search time will not be affected much.


BINARY SEARCH MODIFICATION

The sorted directory did improve VM efficiency, but not by as
much as expected!  Was there a way to improve VM efficiency
more and at the same time provide a more consistent search
time across all user-ids?  Indeed there was!  If it is known that
something to be searched is in a sorted state, it makes sense to
employ some type of binary search algorithm.  So, a binary
search routine was incorporated into DMKUDR, replacing the
existing linear search algorithm.  The results of that test case
(with comparisons to the previous test) are shown in Figures 4
and 5.

The test data showed that the binary search modification had
tremendous effect on DMKUDR searches.  The search times
were more consistent across all user-ids and overall CPU time
spent in DMKUDR was reduced considerably.  The reduction
in the average search time was significant - ie a saving of about
99 microseconds per search versus an unsorted directory.
Again, extrapolating this saving to an average 20 hour day
would result in a 1 523 016 microseconds reduction in CPU
time spent in DMKUDR or about 1.523 CPU seconds per
production day.  Is this a significant savings?  That will
probably depend on the individual.  Will it be noticed by the
end-user?  Probably not!  But, indeed, it is even better VM
efficiency; and those who are into performance would say that
it's worth it!  (I would surmise that larger VM shops would
enjoy a larger saving in CPU seconds - our shop has only about
100-150 VM users, so the total number of DMKUDR searches
is probably less than for a larger shop.)


CONCLUSION

We've been running with the binary search modification to
DMKUDR for quite some time with no problems at all.  In
association with this change, we've implemented a directory
maintenance procedure that will ensure our VM directory is
always sorted before being put on-line (realizing that if this was
not the case, not many users would be able to log-on to the
system).  We are secure in the fact that VM performance and
efficiency are better, with additional CPU cycles for other
work.  What would be best is for VM development to
implement the binary search routine in DMKUDR in
association with a standard method of sorting the VM directory
before it is put on-line.  VM code in DMKUDR is written as
though the directory were sorted, going through needless cycles
if it is not.  It seems as though this enhancement belongs in the
hands of VM development.  If not, it remains for individual
shops to decide if it's worth the payback in CPU time.


DMKUDR
DMKUDR module showing the linear search algorithm.

         L     R3,DMKSYSPL    PICK UP POINTER TO DIRECTORY
         USING DPLIST,R3
         B     NXTPAGE1       GO PROCESS DIRECTORY PAGES
         SPACE
NXTPAGE  DS    0H             GET NEXT DIRECTORY BUFFER PAGE
         CLI   DPLEND,DPLENDFG LAST ENTRY?
         BE    UNLOCK          YES - END OF LIST
         LA    R3,DPLSIZE(,R3) NEXT ENTRY IN BUFFER LIST
NXTPAGE1 DS    0H
         ICM   R1,B'1111',DPLVADD  PICK UP VIRTUAL ADDRESS
         BZ    UNLKCC3        CHECK FOR I/O ERROR
         CLC   SAVEWRK2(8),DPLLOW COMPARE WITH LOW USERID
         BL    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         CLC   SAVEWRK2(8),DPLHIGH COMPARE WITH HIGH USERID
         BH    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         TRANS 2,1,OPT=(BRING,DEFER,SYSTEM),IOER=UNLKCC3
         LH    R4,UDIRDISP    PICK UP DISPLACEMENT TO END OF DIR PAGE
         AR    R4,R2           SET R4 EQ TO THE REAL ADD OF DIR PAGE
         LR    R6,R2          SAVE REAL ADDR OF BUFFER START
FINDUSER LA    R2,UDIRSIZE*8(,R2)    POINT TO NEXT BLOCK
         CLR   R2,R4          HAVE WE REACHED THE END ?
         BH    NXTPAGE        YES -- GET THE NEXT BUFFER
         SPACE
         TM    UDIRFLG1,UDIRPRF  IS THIS A PROFILE ENTRY
         BO    FINDUSER       IF SO, BYPASS AND GET NEXT ENTRY
         SPACE
         MVC   SAVEWRK4(8),UDIRUSER GET THIS USERID
         XC    SAVEWRK4(8),MASK     UNMASK IT FOR THE COMPARE
         CLC   SAVEWRK2(8),SAVEWRK4 IS THIS THE USERID ?
         BNE   FINDUSER
         SPACE
         DROP  R3             DPLIST
         L     R3,SAVER2      POINT TO USER BUFFER


DMKUDR

Example of DMKUDR with CPTRAP facility and STCK.

         STCK  CPTRDATA       SAVE TOD CLOCK BEFORE SEARCH
         L     R3,DMKSYSPL    PICK UP POINTER TO DIRECTORY
         USING DPLIST,R3
         B     NXTPAGE1       GO PROCESS DIRECTORY PAGES
DATALEN  DS    AL2            2 BYTES FOR LENGTH
         DC    AL2(3)         2 BYTES FOR CODE
DATADDR  DS    AL4            4 BYTES FOR DATA ADDRESS
CPTRDATA DS    CL24           AREA FOR CP TRAP DATA
         SPACE
NXTPAGE  DS    0H             GET NEXT DIRECTORY BUFFER PAGE
         CLI   DPLEND,DPLENDFG LAST ENTRY?
         BE    UNLOCK          YES - END OF LIST
         LA    R3,DPLSIZE(,R3) NEXT ENTRY IN BUFFER LIST
NXTPAGE1 DS    0H
         ICM   R1,B'1111',DPLVADD  PICK UP VIRTUAL ADDRESS
         BZ    UNLKCC3        CHECK FOR I/O ERROR
         CLC   SAVEWRK2(8),DPLLOW COMPARE WITH LOW USERID
         BL    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         CLC   SAVEWRK2(8),DPLHIGH COMPARE WITH HIGH USERID
         BH    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         TRANS 2,1,OPT=(BRING,DEFER,SYSTEM),IOER=UNLKCC3
         LH    R4,UDIRDISP    PICK UP DISPLACEMENT TO END OF DIR PAGE
         AR    R4,R2           SET R4 EQ TO THE REAL ADD OF DIR PAGE
         LR    R6,R2          SAVE REAL ADDR OF BUFFER START
FINDUSER LA    R2,UDIRSIZE*8(,R2)    POINT TO NEXT BLOCK
         CLR   R2,R4          HAVE WE REACHED THE END ?
         BH    NXTPAGE        YES -- GET THE NEXT BUFFER
         SPACE
         TM    UDIRFLG1,UDIRPRF  IS THIS A PROFILE ENTRY
         BO    FINDUSER       IF SO, BYPASS AND GET NEXT ENTRY
         SPACE
         MVC   SAVEWRK4(8),UDIRUSER GET THIS USERID
         XC    SAVEWRK4(8),MASK     UNMASK IT FOR THE COMPARE
         CLC   SAVEWRK2(8),SAVEWRK4 IS THIS THE USERID ?
         BNE   FINDUSER
         STCK  CPTRDATA+8     SAVE TOD CLOCK AFTER SEARCH
         MVC   CPTRDATA+16(8),SAVEWRK4  MOVE USERID TO AREA
         LA    R7,L'CPTRDATA  GET LENGTH OF DATA AREA
         STH   R7,DATALEN     SAVE LENGTH IN PLIST
         LA    R8,CPTRDATA    GET ADDRESS OF DATA AREA
         ST    R8,DATADDR     SAVE ADDRESS IN PLIST
         LA    R1,DATALEN     GET ADDRESS OF PARMLIST
         LA    R15,TRAPOK     GET ADDRESS OF TRAPOK
         BALR  R14,R15        SEND DATA TO CPTRAP FILE
         SPACE
         DROP  R3             DPLIST
         L     R3,SAVER2      POINT TO USER BUFFER


DMKUDR

DMKUDR with binary search routine implemented.

         L     R3,DMKSYSPL    PICK UP POINTER TO DIRECTORY
         USING DPLIST,R3
         B     NXTPAGE1       GO PROCESS DIRECTORY PAGES
         SPACE
NXTPAGE  DS    0H             GET NEXT DIRECTORY BUFFER PAGE
         CLI   DPLEND,DPLENDFG LAST ENTRY?
         BE    UNLOCK          YES - END OF LIST
         LA    R3,DPLSIZE(,R3) NEXT ENTRY IN BUFFER LIST
NXTPAGE1 DS    0H
         ICM   R1,B'1111',DPLVADD  PICK UP VIRTUAL ADDRESS
         BZ    UNLKCC3        CHECK FOR I/O ERROR
         CLC   SAVEWRK2(8),DPLLOW COMPARE WITH LOW USERID
         BL    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         CLC   SAVEWRK2(8),DPLHIGH COMPARE WITH HIGH USERID
         BH    NXTPAGE        NOT IN THIS DIRECTORY PAGE
         TRANS 2,1,OPT=(BRING,DEFER,SYSTEM),IOER=UNLKCC3
         LH    R4,UDIRDISP    PICK UP DISPLACEMENT TO END OF DIR PAGE
         AR    R4,R2           SET R4 EQ TO THE REAL ADD OF DIR PAGE
         LA    R6,UDIRSIZE*8  LOAD WITH TABLE ENTRY SIZE
         LR    R8,R6          LOAD R8 WITH TABLE ENTRY SIZE
         LH    R7,UDIRDISP    LOAD WITH DISPL. TO END OF PAGE
         BXLE  R6,R6,*        INCR. TO FIND STARTING INDEX VAL.
         LR    R5,R6          LOAD R5 WITH INDEX VALUE
         LR    R6,R2          SAVE REAL ADDR OF BUFFER START
FINDUSER SRL   R5,1           DIVIDE INDEX BY 2
         CLR   R5,R8          COMPARE INDEX TO LOWER LIMIT
         BL    NXTPAGE        IF BELOW LOWER LIMIT - NEW PAGE
         LA    R2,0(R5,R2)    INCR. TO NEXT BLOCK TO SEARCH
         CLR   R2,R4          HAVE WE REACHED THE END ?
         BH    BINSRCHL       IF PAST PAGE END,MOVE BACK PREV.
         SPACE
         TM    UDIRFLG1,UDIRPRF  IS THIS A PROFILE ENTRY
         BO    FINDUSER       IF SO, BYPASS AND GET NEXT ENTRY
         SPACE
         MVC   SAVEWRK4(8),UDIRUSER GET THIS USERID
         XC    SAVEWRK4(8),MASK     UNMASK IT FOR THE COMPARE
         CLC   SAVEWRK2(8),SAVEWRK4 IS THIS THE USERID ?
         BE    *+14           IF EQUAL, GET OUT OF LOOP
         BC    2,FINDUSER     ELSE, HIGH - SEARCH UPPER HALF
BINSRCHL SR    R2,R5          DECR. TO PREVIOUS BLOCK SEARCHED
         B     FINDUSER       AND CONTINUE SEARCH IN LOWER HALF
         SPACE
         DROP  R3             DPLIST
         L     R3,SAVER2      POINT TO USER BUFFER


DMKUDR

Binary search modification to DMKUDR.

./ I 02380000          $ 02381000 1000
         LA    R6,UDIRSIZE*8  LOAD WITH TABLE ENTRY SIZE
         LR    R8,R6          LOAD R8 WITH TABLE ENTRY SIZE
         LH    R7,UDIRDISP    LOAD WITH DISPL. TO END OF PAGE
         BXLE  R6,R6,*        INCR. TO FIND STARTING INDEX VAL.
         LR    R5,R6          LOAD R5 WITH INDEX VALUE
./ R 02400000          $ 02400990 0990
FINDUSER SRL   R5,1           DIVIDE INDEX BY 2
         CLR   R5,R8          COMPARE INDEX TO LOWER LIMIT
         BL    NXTPAGE        IF BELOW LOWER LIMIT - NEW PAGE
         LA    R2,0(R5,R2)    INCR. TO NEXT BLOCK TO SEARCH
./ R 02420000          $ 02420990 0990
         BH    BINSRCHL       IF PAST PAGE END,MOVE BACK PREV.
./ R 02500000          $ 02500100 0100
         BE    *+14           IF EQUAL, GET OUT OF LOOP
         BC    2,FINDUSER     ELSE, HIGH - SEARCH UPPER HALF
BINSRCHL SR    R2,R5          DECR. TO PREVIOUS BLOCK SEARCHED
         B     FINDUSER       AND CONTINUE SEARCH IN LOWER HALF

Andrew M Jause
Technical Support Analyst
Albany International Corporation (USA)

