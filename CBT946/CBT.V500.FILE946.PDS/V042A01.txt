Printer selection

PROBLEM

Many CMS users who are not familiar with printer classes or
RSCS print tags need a user-friendly method of selecting the
destination of their printed output.

SOLUTION

The answer is to provide a full screen menu so users can easily
select the printer and options they want.  PRTR EXEC allows
users to:

%   See the current printer selection and options.
%   Choose to print on:
    - regular green bar paper
    - regular 80 column text paper
    - wide 120 column text paper.
%   Change the number of copies.
%   Select a printer attached to RSCS.
%   Define their own initial screen of RSCS printers by placing
    USERPRTR XEDIT on their A disk.
%   Make a selection by positioning the cursor and pressing ENTER.
%   Page forward and backward if the available RSCS printers occupy
    more than one screen.

PRTR EXEC invokes XEDIT with a profile of PROFPRTR
XEDIT.  It is PROFPRTR XEDIT that contains most of the
code.  The EXEC and XEDIT profile were developed on VM
Release 4.0 and should not need modification to run on other
releases of VM.

If users do not want to see the entire list of allowed RSCS
printers, they can place on their A disks the file USERPRTR
XEDIT, which contains only the RSCS printers they want
displayed.  In this case, the first screen displayed to the user is
restricted to the printers in USERPRTR XEDIT.  The user can
still display other allowed RSCS printer selections by using PF
8 to page forward.

For the Treasury Department, PROFPRTR restricts the RSCS
printers displayed to users to those printers that match their
bureau code only.  (VM user-ids at the Treasury Department
start with the letters 'VM' followed by a 4-digit bureau code
and a 2-digit sequence number.  RSCS printer tags are similar:
PR followed by bureau code and sequence number.)  The
portion of the code that does this can be easily modified for
other installation standards, or omitted.

Figure 1 shows a sample screen produced by the routine.

PRTR EXEC

/* PRTR EXEC - full screen menu for selecting printer options:        */
/*    destination                                                     */
/*    class (Type of paper to print on)                               */
/*    number of copies                                                */
/*    a printer attached to RSCS                                      */
/* Requires XEDIT profile  PROFPRTR XEDIT                             */
/* Will also read USERPRTR XEDIT on the user's 'A' disk (if it exists)*/
/* as the first printer menu screen                                   */
address cms 'STATE PROFPRTR XEDIT'
rcsave = rc
if rc = 0 then
   do
      xedit $$prtr$$ $screen$ '('prof profprtr
      pull rcsave .                   /* get stacked rc from profprtr */
   end
else say 'Profile PROFPRTR XEDIT not found'
exit rcsave

USERPRTR XEDIT

/* USERPRTR XEDIT: read by PROFPRTR xedit macro                       */
/*                                                                    */
/* Used to display a user customized printer list when the PRTR       */
/* Exec is invoked.                                                   */
/* USERPRTR XEDIT should reside on the individual's 'A' disk          */
/*                                                                    */
/* Enter RSCS tag information in columns 1-8 and                      */
/* description information in columns 10-45.                          */
PR032001 Systems
PR032002 Applications
PR032003 Information Center

PROFPRTR XEDIT

/* PROFPRTR XEDIT - Full screen printer selection menu, called from   */
/* PRTR EXEC.  Will call USERPRTR XEDIT A if it exists on user's disk.*/
/* Assumes virtual machine running RSCS is called RSCS.               */
SCREEN_LENGTH:
/* Check Screen length                                                */
extract '/lscreen'
if lscreen.1 < 24 then do
      say 'Screen length must be at least 24 lines.  Length is: ',
          lscreen.1
      signal exit
   end
CONTROL_CHARACTERS:
/* Set up the control characters for the screen                       */
command set ctlchar '%' escape
command set ctlchar '@' protect   white high
command set ctlchar '!' protect   blue  nohigh
command set ctlchar '$' noprotect red   high
INITIALIZATION:
/* Initialize some variables                                          */
exitrc     = 0     /* Set normal exit rc to zero                      */
maxscreens = 1     /* set the number printer_list screens defined     */
curscreen  = 1     /* Which screen to display                         */
userlines  = 0     /* Number of valid data lines from USERPRTR XEDIT A*/
mastlines  = 0     /* Number of valid data lines to be displayed on   */
                   /*    the full screen menu.                        */
inputline. = ''    /* Lines read from USERPRTR XEDIT A                */
rscstag.   = ''    /* RSCS tag                                        */
descript.  = ''    /* RSCS description                                */
prtrlist.  = ''    /* master table of printers.                       */
stpt       = 1     /* starting point for substr function              */
message = '   To change printer selection, place cursor at choice',
          'and press enter.'
normaluser = 'YES' /* Used for selecting RSCS printers by Bureau code */
command set msgline on 22 2 overlay
/* Table of RSCS Printers                                             */
p = 0
p = p + 1; prtrlist.p = 'PR010001 Deputy Treasurer          129       '
p = p + 1; prtrlist.p = 'PR021001 Personnel Office          104       '
p = p + 1; prtrlist.p = 'PR024001 Purch./Maint Storeroom    406 1/2   '
p = p + 1; prtrlist.p = 'PR026001 Contracts Information     118       '
p = p + 1; prtrlist.p = 'PR031001 Comptroller               115       '
p = p + 1; prtrlist.p = 'PR032001 Systems Programming       G10A      '
p = p + 1; prtrlist.p = 'PR032002 Application Development   G10E      '
p = p + 1; prtrlist.p = 'PR032003 Information Center        G09       '
p = p + 1; prtrlist.p = 'PR032004 BIS Production Control    G10C      '
p = p + 1; prtrlist.p = 'PR033001 Audits                    G11       '
p = p + 1; prtrlist.p = 'PR036001 Securities                126       '
CUSTOM_SCREEN:
/* Check for user's custom screen on their A disk                     */
/* This section could be omitted if you don't want to allow users     */
/* to be able to define their own initial list of printers.           */
address cms 'CP SET EMSG OFF' /* Turn off error msg if file not found */
address cms 'STATE USERPRTR XEDIT A'
if rc = 0 then
   do
      'EXECIO * DISKR USERPRTR XEDIT A (    STE INPUTLINE. '
      do i = 1 to inputline.0
          /* Check for * in column 1 or 2                             */
          if pos('*',inputline.i) ¬= 1 & pos('*',inputline.i) ¬= 2,
          then do
                  /* Not a Comment so increment userlines and strip   */
                  /* out rscs tag and description                     */
                  userlines = userlines + 1
                  rscstag.userlines = substr(inputline.i,1,8)
                  descript.userlines = substr(inputline.i,10,35)
               end
      end                               /*  do i = 1 to inputline.0   */
/* Compute next even multiple of 12 so rscstag & descript extracted   */
/* from prtrlist will start on its own screen, separate from the      */
/* user defined menu in USERPRTR XEDIT. (12 lines per screen)         */
/* If userlines > 0 and not multiple of 12 then set at next multiple  */
      if userlines > 0 & userlines//12 ¬= 0 then,
         mastlines = ((userlines%12)*12)+12
      else
         mastlines = userlines
   end                                           /* if rc = 0 then do */
address cms 'CP SET EMSG ON'                     /*   Turn it back on */
SELECT_BY_BUREAU:
/* Select only printers that match the users bureau code              */
/* This section is installation dependent and could be omitted if     */
/* you want all users to have the entire list of printers             */
address cms 'identify (stack'
parse pull id_line
vmuserid = word(id_line,1)
bureaucode = substr(vmuserid,3,4)
/* Normal users id begins with VMO ; give other users entire list     */
if substr(vmuserid,1,3) ¬= 'VMO' then normaluser = 'NO'

/* This selects authorized printers for this id by BUREAU code        */
do i = 1 while prtrlist.i ¬= ''
   /* Check for ID match in table                                     */
   if bureaucode = substr(prtrlist.i,3,4) | normaluser = 'NO' then
      do
         mastlines = mastlines + 1
         rscstag.mastlines = substr(prtrlist.i,1,8)
         descript.mastlines = substr(prtrlist.i,10,35)
      end
end
SELECT_ALL:
/* Select all printers from prtrlist                                  */
/* Use this section if you omit the above section (SELECT_BY_BUREAU)  */
/* do i = 1 while prtrlist.i ¬= ''                                    */
/*    mastlines = mastlines + 1                                       */
/*    rscstag.mastlines = substr(prtrlist.i,1,8)                      */
/*    descript.mastlines = substr(prtrlist.i,10,35)                   */
/* end                                                                */
MAXSCREENS_TO_INTEGER:
/* Set Maxscreens to integer                                          */
maxscreens = (mastlines + 12) % 12
MAIN_ROUTINE:
/* Loop, reading the user response.                                   */
do forever
   exitflag = 'YES'              /* Set flag to exit exec if enter    */
                                 /* key is pressed when cursor is     */
                                 /* on current printer setting.       */
call  display_screen
read nochange tag                /* read the screen                   */
do queued()
   pull key line col string
   select
      when key='RES' then if line = 4 then
         do                                                  /* copies*/
           /* Check the cursor position so that if the printer was    */
           /* spooled to 3 digits (EX. 123) and the user wants to     */
           /* change copies to one or two digits, then by             */
           /* keying over the first or second digit with new values   */
           /* a string from the screen beginning at column 53, (the   */
           /* start of the copy field) up to (but not including)      */
           /* the cursor position will be returned.                   */
            extract '/cursor'
            if cursor.6 > 53 & cursor.5 = 4 then
                  string = substr(string,1,(cursor.6 - 53))
            /* check for all numeric data & valid number of copies    */
            if datatype(string) ¬= 'NUM' then,
                message = string' Is invalid. ',
                          'Copies must be number from 1 to 255.'
            else
                if string >= 1 & string <= 255
                   then 'CP SP PRT COPY ' string
                    else message = string' is out of range.',
                                   ' Copies can be from 1 to 255.'
       end                                               /* Do copies */
    when key='CMD' then line col string       /* pass commands CP/CMS */
    when key='ETK' then  nop
    when key='PFK'
       /* When PF key is pressed, 'line' has value of PF key          */
       then if line = 12  then signal exit
       else if line = 7   then         /* Scroll backward             */
             do
                curscreen = curscreen - 1
                if curscreen < 1 then,
                        curscreen = maxscreens
                call display_screen
                exitflag = 'NO'
             end
       else if line = 8   then        /* Scroll forward               */
             do
                curscreen = curscreen + 1
                if curscreen > maxscreens then,
                        curscreen = 1
                call display_screen
                exitflag = 'NO'
             end
       /* On PF 10 set cursor_cmd to 'CMD' so that when               */
       /* DISPLAY_SCREEN is called DISPLAY_SCREEN will                */
       /* move cursor to command line.                                */
            else if line = 10  then  cursor_position = 'CMD'
            else message = 'Unsupported PF key'
         otherwise message = 'Unsupported function'
     end                                         /* select when key = */
 end                                                 /*  do queued () */
if key ¬= 'PFK' then   /* Process any other changes to the screen     */
   do
       /* Locate the cursor position on the screen                    */
       extract '/cursor'
       if rc ¬=0 then                /* rc ¬=0 if quit entered as cmd */
          do
             exitrc = 999
             signal exit
          end
       line = cursor.5
       col  = cursor.6

       /* If cursor is in RSCS area, get the line strip out the tag   */
       if line >= 8 & line <=19 then
          do
             dest = ''
             extract '/reserved *'
             stpt = pos('$',reserved.line,35)+1
             /* if cursor was on blank line stpt will = 1             */
             if stpt > 35 then do
                   dest = substr(reserved.line,stpt,8)
                   'CP TAG DEV PRT ' dest
                   'CP SP PRT RSCS  CLASS A'
                   call display_screen
                end
          end
       /* If cursor is in SYSTEM area set the proper class            */
       if line = 6 then
          do
             select
                /* Installation dependent based on text               */
                /* associated with class                              */
                when col >= 22 & col <=30 then class = 'A'
                when col >= 33 & col <=38 then class = 'N'
                when col >= 43 & col <=51 then class = 'X'
                otherwise nop
             end
             'CP SP PRT SYSTEM CLASS' class
             call display_screen
          end
       /* If cursor is in READER area set destination *, class A      */
       if line = 21 then
          do
             'CP SP PRT * CLASS A'
            call display_screen
         end
      /* Cursor on current printer destination so exit                */
      if line = 3 & col = 42 & exitflag = 'YES' then signal exit
   end                                                   /* ¬= 'PFK'  */
end                                                     /* do forever */
EXIT:
/*  Exit Routine                                                      */
cms desbuf
command quit
push exitrc     /* push exitrc on stack to be pulled by PRTR exec     */
exit exitrc
/*  S U B R O U T I N E S                                             */
DISPLAY_SCREEN:
/* Routine to display the screen                                      */
call current_printer           /* Check where printer is spooled now  */
prtset = result
/****   Section to 'paint' the screen                              ****/
set reserved 1 noh '%@            ***  ',
               center('Printer Output Selection Menu',35),
               '  ***'
set reserved 2 noh
set reserved 3 noh '%!  Press ENTER or PF12',
                                       ' to send print to %@'prtset'%! '
set reserved 4 noh '%!  Type over number of copies to change.',
                   ' Copies = %$'copy'%!         %!'
set reserved 5 noh
set reserved 6 noh '  %!Computer Room on',
                     '%$Green bar%!or%$Text%!or%$Wide text%!paper%!'
set reserved 7 noh

/* Section to display different menus on the screen                   */
startline = (12*curscreen-11)
endline   = (12*curscreen)
do i = startline to endline
   v = i+8 - startline
   set reserved  v noh ' %$'rscstag.i'%!  ',
                                        descript.i'                  %!'
end
/* End section to display alternate menus on the screen               */
set reserved 20 noh
set reserved 21 noh '   %$Have output returned to your own reader%!'
set reserved 22 noh
set reserved 24 noh '             PF7=Bck   PF8=Fwd   PF10=Cursor Cmd',
                    'Line    PF12=Exit                           '
/****      End Section to 'paint' the screen                       ****/

if message ¬= '' then
   do
      emsg message
      message = ''
   end
if cursor_position  = 'CMD' then
   do
      cursor cmd
      cursor_position = ''
   end
else cursor screen 3 42
return /* from display screen */
CURRENT_PRINTER:
/*      Routine to query current printer status                       */
/* Blank out some variables                                           */
prtclass = ''
user     = ''
devtag   = ''
tofor    = ''
tordr    = ''
paper    = ''
copytext = 'copy'
/* Query the virtual printer and stack the results                    */
'EXECIO * CP (STRING  CP Q V 00E'
pull 13 prtclass +1 35 copy +3             /* get the class           */
pull 10 tofor +3 14 user +8 10 tordr +6    /* get to/for & user info  */
pull junk                                  /* discard last line       */
copy = strip(copy,1,0)                     /* Strip off leading zeros */
copy = left(copy,4) /* pad with trailing blanks so field on screen    */
                    /* at least 4 characters wide                     */
if copy > 1 then copytext = 'copies'
select
   /* Installation dependent                           */
   when prtclass = 'A' then paper = 'on green bar paper '
   when prtclass = 'N' then paper = 'on text paper      '
   when prtclass = 'X' then paper = 'on wide text paper '
   otherwise paper = 'class 'prtclass' 'copy' 'copytext
end
/* If printing thru rscs get tag info and set destination             */
if user = 'RSCS' then
   do
      'EXECIO * CP (STRING  CP TAG QUERY DEV 00E'
      pull  10 hdr +4
      if hdr = 'TAG:' then
         do
            pull 1 devtag +8
            curprt = devtag' class 'prtclass
         end
  end
if tofor = 'FOR' then curprt = 'Computer Room 'paper
if tordr = 'TO VM' then curprt = user' reader CLASS 'prtclass
return curprt /* from current_printer: */
/* End of subroutines                                                 */


Joseph Ryan
Systems Programmer
Pennsylvania Department of Treasury (USA)  ) Joseph Ryan 1990

