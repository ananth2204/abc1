Changing passwords made easy

In order to install the following code a virtual machine must be
set up with the characteristics:

o      User-id = NEWPASSW

o      Privilege class = CG - C is needed to put the directory on-line.

Two mini-disks are needed, ie 191 and 192.  Disk 191 is the A
disk.  It should be large enough to contain four to five copies
of your CP directory file.  The 191 disk should be MW and
shared with the MAINT machine (eg as FFE for MAINT).
Both NEWPASSW and MAINT will need to write to this disk,
at different phases.  Disk 192 is a small disk of about 100 to
200 blocks (FB-512).  It is preferable, but not required, to
access disk 192 as B.

The following files must be on disk 191:

o      PROFILE EXEC

o      CHKPASSW EXEC

o      The CP directory (ie USER DIRECT )

o      RPWLIST DATA (Restricted PassWord List).

FORMAT disk 192 only, and, ensure that no files reside on it.
(Do not copy files to it.)

Include the following 2 statements either as the last lines, or
just before EXIT in the PROFILE EXEC:

      'ACCESS 192 B'       /*  or any other convenient letter */
      'CHKPASSW'

Note: I shall refer to CP directory as USER DIRECT, and I
shall assume that disk 192 of NEWPASSW has been accessed
as B.  However, you can alter these as suits your needs.

At the beginning of CHKPASSW four variables are defined:

o      MainMode = 'A' - This is the access mode of disk 191

o      FixMode  = 'B' - This is the access mode of disk 192

o      TempMode = 'C' - Disk 191 is temporarily accessed as C

o      DirName  = 'USER' - This is the filename for CP directory.

If you need to change any of these, you will have to change
only the one line in CHKPASSW EXEC which contains these
definitions.

In addition to CHKPASSW EXEC, which resides on disk 191,
two other programs are used.  They are PASSWORD EXEC
and PASSMENU XEDIT.  These two programs along with
RPWLIST DATA (Restricted PassWord List) will have to
reside on a disk to which every user has read authority.  I have
assumed that this generally available disk is accessed as X.  If
this is not the case, you should change the variable RPWMode
= 'X' in PASSMENU XEDIT.  Only this one change is needed.

Note: if you do not put the file RPWLIST DATA on this disk
(X), PASSWORD EXEC will accept the request from a user
even if it is a restricted password, but CHKPASSW EXEC will
ignore the request.  This may cause complaints.


DESCRIPTION OF OPERATION

NEWPASSW must be autologged, eg by MAINT.  It runs in
disconnected mode.  Once an hour it wakes up and checks its
reader.  The requests for password changes are sent to its
reader by PASSWORD EXEC.  A user types PASSWORD at
the terminal to invoke the command.  Passwords will not show
when typed, and there is nothing to teach the users, except the
name of the command, ie PASSWORD.

If NEWPASSW finds anything in its reader, it will receive and
check it for everything that PASSWORD EXEC had checked.
Moreover, a valid reader file must have the same filename as
the sender of the request.  No malicious attempts will be
allowed to go through.

Once a request has been accepted, it will be added to the file
PASSWORD LIST on disk 191.  This is done by the
subroutine GetReader.

Between 3am and 5am, CHKPASSW invokes its routine
FixDir.  FixDir checks PASSWORD LIST for duplicates.  If a
user has made multiple requests it will only honour the last
one.  It will modify the directory and bring the new directory
on-line.

FixDir, which comes on only once in 24 hours, will create
several files.  The ones that remain for the next 24 hours are:

o      OLDUSER DIRECT - Previous version of CP directory

o      PASSWORD OLDLIST - The file PASSWORD LIST
      applied to the directory.

It also creates a temporary copy of the new directory, as it is
applying changes to it.  It calls this directory NEWUSER
DIRECT.

Should any type of I/O error occur, NEWPASSW will do the
following:

o      Create a file ERRORLOG PASSWORD on its disk 191

o      Stamp the file with time and date

o      Record the nature of the error and the state of the directory

o      Send a copy of ERRORLOG PASSWORD to MAINT's reader

o      Log-off to prevent any possible damage.


DIRECTORY MAINTENANCE

The most dominant operation on the directory, by far, is
change of passwords rather than adding or deleting users or
mini-disks.  Nevertheless, we need to do those type of
operations occasionally.  To this end, you can choose one of
two methods.  Either work on the same copy of the CP
directory which resides on NEWPASSW's 191 disk, or work
on a different copy on a different disk owned by MAINT.  In
the second case, you will have to:

o      Copy the directory on NEWPASSW's disk to your disk

o      Make the changes and bring the new directory on-line

o      Now copy this new directory to NEWPASSW's disk.

In either case, first you should FORCE the NEWPASSW
machine and bring it up after the changes are made.  This is
because NEWPASSW will not see the changes on its disk 191
until it logs off and then gets autologged again.  Since
NEWPASSW acts on the directory only once between 3am and
5am, and it is mostly sleeping anyway, there is plenty of time
when you can FORCE it safely.

If you need to log-on to NEWPASSW, access its 191 disk from
MAINT and comment out the line containing 'CHKPASSW' in
its PROFILE EXEC.

It may be a good idea to release NEWPASSW's 191 disk from
MAINT before autologging NEWPASSW.


CHKPASSW EXEC

/** Called by PROFILE EXEC upon logon.  See PASSWORD DOCUMENT file.****/
'SET CMSTYPE HT'
/* The machine NEWPASSW has a main disk 191 accessed as A, and a small**
** work disk 192 accessed as B. In GetReader, 191 is accessed as C and**
** 192 as A, and then reaccessed as before at the end. GetReader will **
** receive files from reader on disk 192 (A) and check their validity,**
** one by one. If you have to access any of these disks by different  **
** letters, you need make changes only in the following line.         **
** DirName is the name of your CP directory.  The IBM default is :    **
** 'VMUSERS', while we chose to use 'USER'.  Set DirName to the name  **
** you have chosen for your installation.                             */
MainMode = 'A'; FixMode = 'B'; TempMode = 'C'; DirName = 'USER'
/*=============               MAIN LOOP          =====================*/
DO FOREVER
    CALL GetReader
    T = TIME(H)
    IF ((T > 3) & (T < 5))
        THEN DO
           'STATEW PASSWORD LIST' MainMode
           IF RC = 0
              THEN DO
                 CALL FixDir
                 'SLEEP 2 HRS'
                 END
              ELSE 'SLEEP 15 MIN'
           END
        ELSE 'SLEEP 1 HRS'
    END
/*==================    END OF MAIN LOOP     =========================*/
EXIT
/* GetReader will check the reader and receive the files. A file that **
** does not conform to restrictions imposed by PASSWORD EXEC will be  **
** ignored. Moreover, a file sent by PASSWORD EXEC will have USERID() **
** of the user requesting the change as its FileName, and unless this **
** is the case, the received file will be ignored. When a request has **
** been accepted, it will be inserted in PASSWORD LIST for FixDir to  **
** process at a later time.                                           */
GetReader:
    'MAKEBUF'
    'Q RDR ( STACK'
    PULL Code .
    IF Code ¬= 'NO'
        THEN DO
        'AC 191' TempMode
        'AC 192' MainMode
        DO WHILE QUEUED() > 0
            PULL UserID CodeID .
            'RECEIVE' CodeID '( NOLOG'
            IF RC ¬= 0 THEN CALL LogError 1
            'MAKEBUF'
            'L ( STACK'
            PULL FileName FileType .
            'DROPBUF'
            IF  ((FileName = UserID) & (FileType = 'PASSWORD'))
                THEN DO
                    'MAKEBUF'
                    'EXECIO 1 DISKR' FileName FileType MainMode,
                                      ' ( VAR LINE'
                    IF RC ¬= 0 THEN CALL LogError 2
                    PARSE VAR LINE User Pass Extra
                    Size = LENGTH(Pass)
                    IF (User=UserID) & (Size>1) & (Size<9) & (Extra='')
                        THEN DO
                        DO FOREVER
                          CALL ReadRPW
                          IF RESULT ¬= 0
                            THEN DO
                            'EXECIO 1 DISKW PASSWORD LIST' TempMode,
                                          ' ( STRING' LINE
                            IF RC ¬= 0 THEN CALL LogError 4
                            'FINIS PASSWORD LIST' TempMode
                            LEAVE
                            END
                            ELSE IF Pass=SPACE(LEFT(RPW,8)) THEN LEAVE
                          END   /* FOREVER */
                        'FINIS RPWLIST DATA' TempMode
                        END    /* THEN, ABOVE FOREVER */
                    'FINIS' FileName FileType MainMode
                    'DROPBUF'
                    END
            'ERASE' FileName FileType MainMode
            END   /* WHILE */
        'AC 192' FixMode
        'AC 191' MainMode
        END     /* IF NO */
    'DROPBUF'
    RETURN
/* FixDir has three parts. In part one it goes through PASSWORD LIST, **
** prepared by GetReader, and for every user who has made several     **
** requests to change password it only honours the last one, ignoring **
** all other requests for that user. In part two, it modifies the CP  **
** directory, changing passwords. Finally, it does some cleaning up   **
** and brings the new directory on-line.                              */
FixDir:
'MAKEBUF'       /* START OF PART ONE */
Count = 0
DO FOREVER
    CALL ReadList
    IF RESULT ¬= 0 THEN LEAVE
    PARSE VAR LINE User Pass
    User = SPACE(User)
    Pass = SPACE(Pass)
    DupFlag = 'FALSE'
    DO I = 1 TO Count
        IF UserID.I = User
            THEN DO
            PassWord.I = Pass
            DupFlag = 'TRUE'
            LEAVE
            END
        END
    IF DupFlag = 'FALSE'
        THEN DO
        Count = Count + 1
        UserID.Count = User
        PassWord.Count = Pass
        END
    END
'DROPBUF'
'FINIS PASSWORD LIST' MainMode
'MAKEBUF'                     /* START OF PART TWO */
LineNum = 0
DO FOREVER
    CALL ReadLine
    IF RESULT ¬= 0
        THEN LEAVE
        ELSE DO
        PARSE VAR LINE User UserID .  Rest
        IF User = 'USER'
            THEN DO
            I = 1
            DO WHILE (I < Count + 1)
                IF (UserID = UserID.I)
                    THEN DO
                    LINE = 'USER' UserID.I PassWord.I Rest
                    S = LENGTH(LINE)
                    IF S = 80
                        THEN LEAVE
                        ELSE DO
                            K = S - 80
                            N = WORDS(LINE)
                            Tail = SUBWORD(LINE, N)
                            P = WORDINDEX(LINE, N)
                            LINE = LEFT(LINE, P - 1)
                            LINE = LEFT(LINE, P - 1 - K) || Tail
                            END
                    LEAVE
                    END
                    ELSE I = I + 1
                END
            END
        CALL WriteLine
        END
    END
'DROPBUF'
'FINIS' DirName 'DIRECT' MainMode
'FINIS NEWUSER DIRECT' MainMode
'ERASE OLDUSER DIRECT' MainMode               /* START OF PART THREE */
'RENAME' DirName 'DIRECT' MainMode 'OLDUSER = ='
IF RC ¬= 0 THEN CALL LogError 6
'RENAME NEWUSER DIRECT' MainMode 'USER = ='
IF RC ¬= 0 THEN CALL LogError 7
'DIRECT' DirName 'DIRECT' MainMode         /* DIRECTORY ON LINE*/
IF RC ¬= 0 THEN CALL LogError 8
'ERASE PASSWORD OLDLIST' MainMode
'RENAME PASSWORD LIST' MainMode '= OLDLIST ='
IF RC ¬= 0 THEN CALL LogError 9
RETURN
ReadLine:
'EXECIO 1 DISKR' DirName 'DIRECT' MainMode '( VAR LINE'
IF RC ¬= 0
    THEN IF RC ¬= 2
        THEN CALL LogError 10
        ELSE RETURN 2
RETURN 0
WriteLine:
LineNum = LineNum + 1
'EXECIO 1 DISKW NEWUSER DIRECT' MainMode LineNum 'F 80 (STRING' LINE
IF RC ¬= 0
    THEN CALL LogError 11
    ELSE RETURN 0
ReadRPW:
'EXECIO 1 DISKR RPWLIST DATA' TempMode '(VAR RPW'
IF RC ¬= 0
    THEN IF RC ¬= 2
        THEN CALL LogError 3
        ELSE RETURN 2
RETURN 0
ReadList:
'EXECIO 1 DISKR PASSWORD LIST' MainMode '( VAR LINE'
IF RC ¬= 0
    THEN IF RC ¬= 2
        THEN CALL LogError 5
        ELSE RETURN 2
RETURN 0
LogError:
LogCode = ARG(1)
'ACCESS 191' MainMode
'ACCESS 192' FixMode
NoChange = 'No change has been made to copies of CP directory.'
NotOnLine = 'New CP directory has not been brought on line, yet.'
'MAKEBUF'
'Q TIME ( STACK'
PULL .  .  TIME .  DAY DATE
'DROPBUF'
Message = '* Error Report by NEWPASSW.' DAY DATE 'Time:' TIME '*'
Separator = SUBSTR('*', 1, LENGTH(Message), '*')
CALL WriteLog Separator; CALL WriteLog Message; CALL WriteLog Separator
SELECT
   WHEN LogCode = 1
      THEN DO
      Message = 'Error occurred when receiving files from READER.'
      CALL WriteLog Message
      Message = 'Make sure no files reside on disk 192' FixMode
      CALL WriteLog Message
      Message = NoChange
      END
   WHEN LogCode = 2
      THEN DO
     Message = 'Error occurred when reading a received file on disk 192'
      CALL WriteLog Message
      Message = NoChange
      END
   WHEN LogCode = 3
      THEN DO
      Message = 'Error occurred when reading RPWLIST DATA'
      CALL WriteLog Message
      Message = NoChange
      END
   WHEN LogCode = 4
      THEN DO
      Message = 'Error occurred when writing to PASSWORD LIST, disk 191'
      CALL WriteLog Message
      Message = NoChange
      END
   WHEN LogCode = 5
      THEN DO
      Message = 'Error occurred when reading PASSWORD LIST on disk 191'
      CALL WriteLog Message
      Message = NoChange
      END
   WHEN LogCode = 6
      THEN DO
      Message = 'Error occurred when renaming' DirName 'as OLDUSER'
      CALL WriteLog Message
      Message = NotOnLine
      END
   WHEN LogCode = 7
      THEN DO
      Message = 'Error occurred when renaming NEWUSER as' DirName
      CALL WriteLog Message
      Message = NotOnLine
      END
   WHEN LogCode = 8
      THEN DO
      Message = 'Error occurred when bringing new directory on line.'
      CALL WriteLog Message
      Message = NotOnLine
      END
   WHEN LogCode = 9
      THEN DO
      Message = 'Error occurred when renaming PASSWORD LIST to OLDLIST'
      CALL WriteLog Message
      Message = NotOnLine
      END
   WHEN LogCode = 10
      THEN DO
      Message = 'Error occurred when reading from' DirName 'DIRECT'
      CALL WriteLog Message
      Message = NotOnLine
      END
   WHEN LogCode = 11
      THEN DO
      Message = 'Error occurred when writing to' DirName 'DIRECT'
      CALL WriteLog Message
      Message = NotOnLine
      END
   OTHERWISE NOP
END
CALL Writelog Message
'FINIS ERRORLOG PASSWORD' MainMode
'SF ERRORLOG PASSWORD' MainMode 'TO MAINT ( NOLOG NOT'
'CP LOGOFF'
EXIT
WriteLog:
ARG LINE
'EXECIO 1 DISKW ERRORLOG PASSWORD' MainMode '( STRING' LINE
RETURN


PASSMENU XEDIT

/* This is called from PASSWORD EXEC.  See PASSWORD DOCUMENT file.    */
/* PASSWORD EXEC, and PASSMENU XEDIT must reside on a disk where every**
** user can invoke them.  We are assuming this disk is accessed as  X **
** by all users.  Change RPWMode to letter used in your installation. */
RPWMode = 'X'
Row = 6; Column = 21     /* Set constants and abbreviations */
C$ = 'COMMAND SET '
CC$ = C$'CTLCHAR '
CR$ = C$'RESERVED '
CC$'% ESCAPE'               /* Define control characters */
CC$'@ PROTECT RED HIGH'
CC$'! PROTECT YELLOW HIGH'
CC$'$ NOPROTECT TURQ INV'
CC$'& PROTECT WHITE HIGH'
DO I = 1 TO 24; C$'PF'I' '; END     /* Clear all PF and PA keys */
C$'PF03 BEFORE QUIT'                /* except PF03 for QUIT     */
C$'PA1 '; C$'PA2 '; C$'PA3 '
C$'CMDLINE OFF'                     /* Now design the screen */
C$'MSGMODE OFF'
'COMMAND SET ENTER ONLY CURSOR SCREEN' ROW COLUMN
'EXTRACT /LSCREEN'                   /* How many rows */
CR$'1 NOH'
CR$'2 NOH'
CR$'3 NOH'
CR$'4   H' '%! Type your' '%@ NEW PASSWORD' '%& (it will',
           'not show)' '%! and press ENTER :'
CR$'5 NOH'
CR$'6 NOH' '%!     Type here : ' '%$'
Do I = 7 to LSCREEN.1-1
   CR$ I 'NOH'
End
CR$ LSCREEN.1 'NOH' '%! Press PF03 to QUIT without changing ',
                     'your PASSWORD'
'CURSOR SCREEN' ROW COLUMN
/*                 START OF INPUT WAIT LOOP                           **
** The user can do one of two things: QUIT by pressing PF03, or type  **
** a Password and press ENTER. If Password cannot be accepted, then an**
** error message is printed and the user can try again. When the Pass-**
** word is accepted it will be written to the file USERID() PASSWORD  **
** where the caller PASSWORD EXEC will then process it. In either case**
** a return code is PUSHed onto stack which was created by the caller **
** and will be used to see what was user's choice in this panel.      */
'READ NOCHANGE TAG'
DO FOREVER
   PULL KEY N .
   SELECT
      WHEN ((KEY = 'PFK') & (N = 3))
         THEN DO
             CMS DESBUF
            'COMMAND QUIT'
            PUSH 0         /* For PASSWORD EXEC to PULL */
            LEAVE
         END
      WHEN KEY = 'ETK'
         THEN DO
            C$'MSGMODE ON'
            PULL KEY N1 N2 PASSWORD
            IF ((N1 = Row) & (N2 = Column))
               THEN DO
                  PassWord = SPACE(PassWord)
                  CALL Check PassWord
                  IF Result = 0
                     THEN DO
                        'ADD'
                        ':1'
                        'CLOCATE :1'
                        'CINSERT' USERID()  PassWord
                         CMS DESBUF
                        'COMMAND FILE'
                        PUSH RC    /* For PASSWORD EXEC to PULL */
                        LEAVE
                     END
                     Else 'EMSG' Message
                  CALL Ignore
               END
               ELSE CALL Ignore
         END
      OTHERWISE CALL Ignore
   END
   'READ NOCHANGE TAG'
END
/*=============      END OF INPUT WAIT LOOP    =======================*/
EXIT
Ignore:
   C$'MSGMODE OFF'
    CMS DESBUF
   'CURSOR SCREEN' ROW COLUMN
   RETURN
Check:
   ARG PassWord
   M$ = 'Please choose another PASSWORD.'
   IF WORDS(PassWord) > 1
      THEN DO
      Message = 'SPACE is not a valid character.' M$
      RETURN 1
      END
   L = LENGTH(PassWord)
   IF (( L < 2 ) | ( L > 8 ))
      THEN DO
      Message = 'A PASSWORD must be between 2 to 8 characters.' M$
      RETURN 2
      END
   Code = 0
   DO FOREVER
      'EXECIO 1 DISKR RPWLIST DATA' RPWMode '( VAR LINE'
      IF RC ¬= 0
         THEN LEAVE
         ELSE IF (PassWord = SPACE(LEFT(LINE, 8)))
                 THEN DO
                 Code = 3
                 Message = 'This is a restricted PASSWORD.' M$
                 LEAVE
                 END
      END
   'FINIS RPWLIST DATA' RPWMode
   RETURN Code


PASSWORD EXEC

/* For detailed documentation please refer to PASSWORD DOCUMENT.      */
/*     Set FileName to the userid of the person invoking the EXEC     */
FileName = USERID(); FileType = 'PASSWORD'
'SET CMSTYPE HT'
/* Find the first Disk/Directory accessed as R/W and set FileMode     **
** equal to its LETTER.  If no R/W FileMode is available, Error.      */
'MAKEBUF'
'Q DISK ( STACK'
DO WHILE QUEUED() > 0
   PULL .  .  FileMode Status .
   IF Status = 'R/W'
      THEN DO
      'DROPBUF'
      LEAVE
      END
   END
IF Status ¬= 'R/W' THEN SIGNAL ModeError
/* If file USERID() PASSWORD already exists, then Error.              */
'STATEW' FileName FileType FileMode
IF RC = 0 THEN SIGNAL UseridError
'SET CMSTYPE RT'
'MAKEBUF'   /* Prepare buffer for PASSMENU to PUSH its return code */
'XEDIT' FileName FileType FileMode '(PROF' PASSMENU
PULL RetCode    /* Retrieve the return code PUSHed by PASSMENU      */
'DROPBUF'
IF RetCode = 0      /* User just quit, without changing Password */
   THEN DO
      CALL CommonMessage
      EXIT                  /* So just EXIT */
      END
'CLRSCRN'
SAY 'One moment please .....'
'SET CMSTYPE HT'
'STATEW' FileName FileType FileMode    /* Before sending the file see */
IF RC ¬= 0 THEN SIGNAL SpaceError      /* if the Editor made it       */
'SF' FileName FileType FileMode TO 'NEWPASSW ( NOLOG NOT'
RetCode = RC
'ERASE' FileName FileType FileMode
IF RetCode ¬= 0 THEN SIGNAL FatalError  /* NEWPASSW not in directory  */
'SET CMSTYPE RT'
SAY
SAY
SAY 'Your new PASSWORD will be in effect AFTER 5 A.M.'
EXIT
ModeError:
   CALL CommonMessage
   SAY 'You do not have a Disk/Directory accessed as Read/Write...'
   EXIT
UseridError:
   CALL CommonMessage
   SAY 'Please rename the file' FileName FileType FileMode 'and',
       ' try again...'
   EXIT
SpaceError:
   CALL CommonMessage
   SAY 'There is not enough room on your Disk/Directory' FileMode
   EXIT
FatalError:
   CALL CommonMessage
   SAY 'Processing machine is not available.',
       ' Inform System Programmer.'
   EXIT
CommonMessage:
   'SET CMSTYPE RT'
   'CLRSCRN'
   SAY 'No CHANGE has been made to your PASSWORD ...'
   SAY
   SAY
   RETURN

Zorabi Honargohar
Professor & Systems Administrator
Emporia State University (USA)

