Statistics for EXEC and XEDIT routines

In our company, most application development and operations
management is done using CMS and its editor XEDIT.  During
the last three years I wrote more than a hundred EXEC and
XEDIT routines to help our CMS users do their work faster and
more efficiently.  These routines are all kept on a common
mini-disk, to which the CMS users have access.

As most systems programmers would, I became curious about
who used these routines, how often, and in what way.  To my
knowledge, CMS doesn't provide a tool to answer these
questions, so I wrote my own little monitor for EXEC and
XEDIT statistics.

It's quite simple: each time one of my routines is being
executed, it sends an SMSG to a CMS machine that logs the
message into an appropriate file.  The message contains the
name of the routine, the user-id that executed the routine, and
optionally the parameters that were entered with the command.
You could even add the total execution time.

After a few days you get a nice overview on the use of the
routines being monitored.


INSTALLING THE MONITOR

Add the following 4 lines to the (REXX) routines you want to
monitor:

      parse source .  .  statname stattype .
      'CP SET EMSG OFF'
      'CP SMSG SPSTAT' statname stattype
      'CP SET EMSG ON'

Statname and stattype are the filename and filetype of the
routine.  CP SET EMSG OFF is necessary to prevent the
message 'SPSTAT not receiving' if SPSTAT is not logged on.
SPSTAT is the name of the CMS machine that receives,
processes, and logs the messages.  This machine needs an A
mini-disk (5 cylinders on a 3380 in my case), and access to
MSGLOG EXEC, which processes the messages.  After you
start MSGLOG EXEC you can disconnect this machine.  To
stop MSGLOG EXEC, you must reconnect and enter STOP
when in RUNNING mode.  I provided an autolog entry in the
AUTOLOG1 machine for SPSTAT, and added the line EXEC
MSGLOG to the PROFILE EXEC of the SPSTAT machine,
which autostarts the reception of messages when the machine is
logged on.


INTERPRETING COLLECTED DATA

MSGLOG EXEC logs the received messages (using IPF
WAKEUP) into two types of files; user files and routine files.

There is one user file for each user (user-id STAT A), which
contains an overview of all the routines that the user has
executed (1 line per routine, including an execution counter).

There is one routine file for each routine (routine-id
EXECSTAT A for EXECs, and routine-id XEDISTAT A for
XEDITs) which contains an overview of all the users who have
executed the routine (one line per user, including a counter).
Examples are shown in Figure 1.

You may add all kinds of extras to this, to create a monitor that
fits into your system.  I was very surprised by the results on
our system.  I hope you will be too.


MSGLOG EXEC

/*  MSGLOG EXEC : receive, process, and log messages.          */
 'CP SET SMSG ON'
 address command
 do forever
   'DROPBUF'
   /* wait for SMSG's from EXEC's and XEDIT's            */
   say "I'am waiting...  type STOP to exit..."
   'WAKEUP (SMSG'
   /* analyse the SMSG                       */
   parse upper pull it
   if it = 'STOP' then exit
   parse var it .  user rname rtype optional_data
   /* check the corresponding entry in the user's statistics-file  */
  'EXECIO * DISKR 'user 'STAT A (LOCATE /'left(rname,8) left(rtype,8)'/'
   readrc = rc
   if readrc = 0 then do
     /* entry already exists, so add 1 to counter         */
     pull .  linenumber ; parse pull .  .  counter stamp
     'EXECIO 1 DISKW 'user 'STAT A 'linenumber,
      '(STRING 'left(rname,8) left(rtype,8) format(counter+1,6) stamp
   end
   if readrc = 24 then do
     /* user's statistics file doesn't exist, so create it    */
     'EXECIO 1 DISKW 'user 'STAT A 1 F 80',
      '(STRING Name   Type   Count First-used'
     'EXECIO 1 DISKW 'user 'STAT A ',
      '(STRING -------------------------------------------'
   end
   if readrc = 3 | readrc = 24 then do
     /* entry doesn't exist, so add entry to user's statistics-  */
     /* file, with counter = 1, including date/time-stamp     */
     'EXECIO 1 DISKW 'user 'STAT A',
    '(STRING 'left(rname,8) left(rtype,8) format('1',6) date('e') time()
   end
   /* check the corresponding entry in the routine statistics-file */
   'EXECIO * DISKR 'rname left(rtype,4)'STAT A',
     '(LOCATE /'left(user,8)'/'
   readrc = rc
   if readrc = 0 then do
     /* entry already exists, so add 1 to counter         */
     pull .  linenumber ; parse pull .  counter stamp
     'EXECIO 1 DISKW 'rname left(rtype,4)'STAT A 'linenumber,
      '(STRING 'left(user,8) format(counter+1,6) stamp
   end
   if readrc = 24 then do
     /* routine statistics file doesn't exist, so create it    */
     'EXECIO 1 DISKW 'rname left(rtype,4)'STAT A 1 F 80',
      '(STRING User   Count First-used'
     'EXECIO 1 DISKW 'rname left(rtype,4)'STAT A ',
      '(STRING ---------------------------------'
   end
   if readrc = 3 | readrc = 24 then do
     /* entry doesn't exist, so add entry to routine statistics- */
     /* file, with counter = 1, including date/time-stamp     */
     'EXECIO 1 DISKW 'rname left(rtype,4)'STAT A',
     '(STRING 'left(user,8) format('1',6) date('e') time()
   end
   'FINIS * * A'
 end
 exit

Geert Dieltiens
Systems Programmer
J Van Breda & Co (Belgium)

