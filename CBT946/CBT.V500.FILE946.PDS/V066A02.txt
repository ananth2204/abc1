Trace analysis program

The following REXX routines are designed to interpret VTAM
traces for VM systems. Unless you generate NCP and thus
have the SSP library, you do not have the VM version of
ACFTAP. The VM supplied trace processing routines
(TRAPRED for VM/SP and TRACERED for VM/XA) provide
very rudimentary trace interpretation. The time of day clock is
simply printed in HEX, as are the TH, RH, and RU - with no
interpretation.

The TAP routine takes that basic trace as input, converts the
TOD clock to a meaningful time and date, and adds
commentary to much of the TH and RH. The SNA code in the
RU, if any, is also interpreted. Figures 1 and 2 are samples of a
VM/VTAM trace before and after processing by TAP.

There are basically only two kinds of changes made to the
trace. First, the raw time of day format in the trace is replaced
by a human readable date and time. Second, for each VTAM
TH/RH printout, an interpretation is inserted preceding it. The
SNA code in the RU is also interpreted. For ease of rapid
scanning of the TH/RH interpretation, REQUEST UNITS are
preceded by '->'. RESPONSE UNITS are preceded by '*>'.
Though none are shown in this example, ISOLATED PACING
RESPONSES, and ISOLATED PACING MESSAGES (new in
VTAM 3.2) are preceded by '>>'.

This routine only interprets the buffers produced by a VTAM
trace of the type:

      F NET,TRACE,TYPE=BUF . . .

Furthermore, it only interprets the TH for format-id type 4 (FID4).

To process a trace with TAP, run the VM trace utility first
(TRAPRED or TRACERED) and transfer the print to your
reader. Do a RECEIVE on the spool file. Then enter the
following command:

      TAP Ýfn ft fm¨

If you omit the input filename, a filename of VTAM TRACE
A is assumed. The processed trace is put in a file called
NEWTRACE FILE A.

The TAP routine consists of three components: TAP EXEC,
DCODE EXEC, and SNA CODES.

The TAP EXEC converts the date/time and finds/extracts the
TH and RH from the records. The DCODE EXEC interprets
the TH and RH. File SNA CODES is a data file used by TAP
to interpret the SNA code (if any) at the beginning of the RU.


TAP EXEC

/* TRACE ANALYSIS PROGRAM - VTAM TRACES */
/*    EXTERNAL REFERENCES:              */
/*    EXECS -  DCODE EXEC               */
/*    DATA -   SNA CODES *              */
ARG FN FT FM
IF FM = '' THEN
   FM = A
IF FT = '' THEN
   FT = 'TRACE'
IF FN = '' THEN
   FN = 'VTAM'
INPUTFILE = FN FT FM
OUTFILE   = 'NEWTRACE FILE A'
STATE OUTFILE
IF RC = 0 THEN
   'ERASE' OUTFILE
'FINIS' INPUTFILE
'EXECIO * DISKR SNA CODES * 0 (FINIS STEM X.'
DO I = 1 TO X.0
    PARSE VAR X.I INDEX VALUE
    SNACODES.INDEX = STRIP(VALUE,'B')
END
FLAG1 = 0
NUMERIC DIGITS 30
YR   = '91'
Y91  = X2D('A33B23DBB8000000')    /* START OF 1991 */
D365 = X2D('1CAE8C13E000000')     /* 365 DAYS */
DDEC = X2D('1A3EEEFF4000000')
DNOV = X2D('17E36FC20000000')
DOCT = X2D('1573D2AD6000000')
DSEP = X2D('131853702000000')
DAUG = X2D('10A8B65B8000000')
DJUL = X2D('E391946E000000')
DJUN = X2D('BDD9A09A000000')
DMAY = X2D('96DFCF50000000')
DAPR = X2D('7127DB7C000000')
DMAR = X2D('4A2E0A32000000')
DFEB = X2D('26F9D14A000000')
DDAY = X2D('141DD76000000')
DHR  = X2D('D693A400000')
DMIN = X2D('3938700000')
DSEC = X2D('F4240000')
DMIL = X2D('3E8000')
EOF = 0
DO WHILE EOF = 0
   'EXECIO 1 DISKR' INPUTFILE ' 0 (VAR LINE'
   EOF = RC ¬= 0
   IF SUBSTR(LINE,7,11) = 'TIME OF DAY' THEN DO
      HDT = SUBSTR(LINE,27,16)
      DT = X2D(HDT)
      DT = DT - Y91                         /* START OF 1991 */
      IF DT > D365 THEN DO
         DT = DT - D365
         YR = '92'
         END
      DT = DT - (DHR * 8) /*ADJUST FOR THE LOCAL OFFSET FROM GMT TIME */
      MON = 'JAN'
      IF DT > DDEC THEN DO
         DT = DT - DDEC
         MON = 'DEC'
         END
      IF DT > DNOV THEN DO
         DT = DT - DNOV
         MON = 'NOV'
         END
      IF DT > DOCT THEN DO
         DT = DT - DOCT
         MON = 'OCT'
         END
      IF DT > DSEP THEN DO
         DT = DT - DSEP
         MON = 'SEP'
         END
      IF DT > DAUG THEN DO
         DT = DT - DAUG
         MON = 'AUG'
         END
      IF DT > DJUL THEN DO
         DT = DT - DJUL
         MON = 'JUL'
         END
      IF DT > DJUN THEN DO
         DT = DT - DJUN
         MON = 'JUN'
         END
      IF DT > DMAY THEN DO
         DT = DT - DMAY
         MON = 'MAY'
         END
      IF DT > DAPR THEN DO
         DT = DT - DAPR
         MON = 'APR'
         END
      IF DT > DMAR THEN DO
         DT = DT - DMAR
         MON = 'MAR'
         END
      IF DT > DFEB THEN DO
         DT = DT - DFEB
         MON = 'FEB'
         END
      DAY = 0
      DO WHILE DT > DDAY
         DAY = DAY + 1
         DT = DT - DDAY
         END
      HR  = 0
      DO WHILE DT > DHR
         HR  = HR  + 1
         DT = DT - DHR
         END
      MIN = 0
      DO WHILE DT > DMIN
         MIN = MIN + 1
         DT = DT - DMIN
         END
      SEC = 0
      DO WHILE DT > DSEC
         SEC = SEC + 1
         DT = DT - DSEC
         END
      MIL = 0
      DO WHILE DT > DMIL
         MIL = MIL + 1
         DT = DT - DMIL
         END
      IF LENGTH(MIL) = 1 THEN
         MIL = '00'||MIL
      IF LENGTH(MIL) = 2 THEN
         MIL = '0'||MIL
      IF LENGTH(SEC) = 1 THEN
         SEC = '0'||SEC
      IF LENGTH(MIN) = 1 THEN
         MIN = '0'||MIN
      IF LENGTH(HR) = 1 THEN
         HR = '0'||HR
      LINE = 'DATE/TIME' DAY MON YR  HR||':'||MIN||':'||SEC||'.'||MIL
      LINE = '      '||LINE
   END
   IF FLAG1 > 0 THEN DO
      OLIN = ' '
      'EXECIO 1 DISKW' OUTFILE '0 (VAR OLIN'
      PARSE VAR LINE WRD1 WRD2 .
      IF FLAG1 = 3 THEN TMPCOD = WRD2
      ELSE TMPCOD = WRD1
      TST = SUBSTR(TMPCOD,1,4)
      IF TST = '0102' | TST = '0103' | TST = '0106' |,
         TST = '4102' | TST = '4103' | TST = '8103' |,
         TST = '8106' | TST = '8186' THEN
             SNACMD = SUBSTR(TMPCOD,1,6)
      ELSE
             SNACMD = SUBSTR(TMPCOD,1,2)
      OLIN='--> '||SNACODES.SNACMD
      IF FLAG1 = 3 THEN OLIN = OLIN', SENSE =' WRD1
      IF FLAG1 = 4 THEN OLIN = '-->  SENSE =' WRD1
      IF LENGTH(SNACMD) > 2 THEN
          'EXECIO 1 DISKW' OUTFILE '0 (VAR OLIN'
      ELSE IF FLAG1 > 1 THEN
              'EXECIO 1 DISKW' OUTFILE '0 (VAR OLIN'
           ELSE DO
               OLIN = '----> USER DATA'
              'EXECIO 1 DISKW' OUTFILE '0 (VAR OLIN'
           END
      FLAG1 = 0
   END
/* THE FOLLOWING CODE IS NEEDED FOR VM/SP TRACES */
/* IF SUBSTR(LINE,2,12) = 'VTAM    TH=' THEN DO  */
/* THE FOLLOWING CODE IS NEEDED FOR VM/XA TRACES */
   IF SUBSTR(LINE,1,11) = 'VTAM    TH=' THEN DO
      PARSE VAR LINE 'TH=' TH 'RH=' RH
      IF SUBSTR(TH,1,1) = 4 THEN DO
         PARSE VAR TH W1 W2 W3 W4 W5 W6 W7
         TH = W1||W2||W3||W4||W5||W6||W7
         END
      IF EOF = 0 THEN
         FLAG1 = DCODE(TH','RH)
      END
  IF EOF = 0 THEN DO
     'EXECIO 1 DISKW' OUTFILE '0 (VAR LINE'
      IF RC ¬= 0 THEN EOF = EOF + 1
  END
END


DCODE EXEC

DCODE:
/* DECODE THE TH AND RH OF A VTAM TRACE */
ARG TH ',' RH
OUTFILE = 'NEWTRACE FILE A'
FLAG1 = 1
SEG = C2D(BITAND(X2C(SUBSTR(TH,34,1)),'C'X))/4
DCF = X2D(SUBSTR(TH,49,4))
OPRE = '>>'                       /* FOR NO RH CASE */
IF SEG > 1 THEN DO                /* RH EXISTS - 1ST OR ONLY SEGMENT */
   RTYPE = C2D(BITAND(X2C(SUBSTR(RH,1,1)),'8'X))/8
   IF RTYPE = 0 THEN OPRE = '->'  /* RH IS REQUEST UNIT */
   ELSE              OPRE = '*>'  /* RH IS RESPONSE UNIT */
END
IF SUBSTR(TH,1,1) = '4' THEN CALL FID4
IF SEG < 2 THEN EXIT FLAG1       /* NO RH EXISTS */
OLIN = ''
CALL WRITEIT
OLIN = '---------  RH DECODE  -----------------------------------------'
CALL WRITEIT
RUCAT = C2D(BITAND(X2C(SUBSTR(RH,1,1)),'6'X))/2
IF RUCAT > 0 THEN FLAG1 = 2
FI    = C2D(BITAND(X2C(SUBSTR(RH,2,1)),'8'X))/8
SDI   = C2D(BITAND(X2C(SUBSTR(RH,2,1)),'4'X))/4
BCIECI= C2D(BITAND(X2C(SUBSTR(RH,2,1)),'3'X))
DR1   = C2D(BITAND(X2C(SUBSTR(RH,3,1)),'8'X))/8
DR2   = C2D(BITAND(X2C(SUBSTR(RH,3,1)),'4'X))/4
RTI   = C2D(BITAND(X2C(SUBSTR(RH,3,1)),'1'X))
QRI   = C2D(BITAND(X2C(SUBSTR(RH,4,1)),'2'X))/2
PCI   = C2D(BITAND(X2C(SUBSTR(RH,4,1)),'1'X))
RSP   = C2D(BITAND(X2C(SUBSTR(RH,3,1)),'B'X))
BBI   = C2D(BITAND(X2C(SUBSTR(RH,5,1)),'8'X))/8
EBI   = C2D(BITAND(X2C(SUBSTR(RH,5,1)),'4'X))/4
CEBI  = C2D(BITAND(X2C(SUBSTR(RH,6,1)),'1'X))
CDI   = C2D(BITAND(X2C(SUBSTR(RH,5,1)),'2'X))/2
IF RTYPE = 0 THEN CALL REQ
ELSE CALL RESP
OLIN = ''
CALL WRITEIT
EXIT FLAG1
FID4:
OLIN = ''
CALL WRITEIT
OLIN = '---------  TH DECODE  -----------------------------------------'
CALL WRITEIT
ERN = SUBSTR(TH,6,1)
VRN = SUBSTR(TH,7,1)
TPF = SUBSTR(TH,8,1)
TGSNF = SUBSTR(TH,10,3)
VRSSN = SUBSTR(TH,14,3)
DSAF = SUBSTR(TH,17,8)
OSAF = SUBSTR(TH,25,8)
SNA = SUBSTR(TH,33,1)
EFI = C2D(BITAND(X2C(SUBSTR(TH,34,1)),'1'X))
DEF = SUBSTR(TH,37,4)
OEF = SUBSTR(TH,41,4)
SNF = SUBSTR(TH,45,4)
IF DCF < 4 THEN FLAG1 = 0 /* NO SNA COMMAND CODE */
OLIN = 'Origin S/A Field =' OSAF',   Destination S/A Field = ' DSAF
CALL WRITEIT
OLIN = 'Origin Element =' OEF',         Destination Element =' DEF
CALL WRITEIT
OLIN = 'SNF =' SNF',                    Data Count Field =' DCF
CALL WRITEIT
IF SNA = 0 THEN SNA = SNA||' => NOT SNA'
IF SNA = 1 THEN SNA = SNA||' => SNA'
IF SEG = '0' THEN SEGF = '00 => MIDDLE'
IF SEG = '1' THEN SEGF = '01 => LAST  '
IF SEG = '2' THEN SEGF = '10 => FIRST '
IF SEG = '3' THEN SEGF = '11 => ONLY  '
IF SEG < 2 THEN FLAG1 = 0 /* SNA CODE ONLY IN FIRST SEGMENT */
OLIN = 'SNA Indicator =' SNA',      Segment Indicator =' SEGF
CALL WRITEIT
IF EFI=0 THEN EFI = EFI||' => NORMAL FLOW'
IF EFI=1 THEN EFI = EFI||' => EXPEDITED FLOW'
OLIN = 'Expedited Flow = ' EFI
CALL WRITEIT
   IF TPF = '0' THEN TPF = '00  => LOW'
   IF TPF = '1' THEN TPF = '01  => MEDIUM'
   IF TPF = '2' THEN TPF = '10  => HIGH'
OLIN = 'ERN =' ERN',    VRN =' VRN',   Trans Pri =' TPF
CALL WRITEIT
OLIN = 'TG Seq Number =' TGSNF',   VR Send Sequence Number =' VRSSN
CALL WRITEIT
RETURN
RESP:
IF RH = '830100' THEN DO
   OLIN = ' '
   CALL WRITEIT
   IF DCF > 3 THEN
      OLIN = 'PCI ON - Isolated Pacing Message'
   ELSE
      OLIN = 'PCI ON - Isolated Pacing Response'
   CALL WRITEIT
   OLIN = ' '
   CALL WRITEIT
   IF RUCAT = 0 & FI = 0 THEN
     OLIN = 'RU CAT = ' RUCAT'  => FMD, Char Coded RU'
   IF RUCAT = 0 & FI = 1 THEN
    OLIN = 'RU CAT = ' RUCAT'  => FMD, FM Follows or Field Formatted RU'
   IF RUCAT = 1 THEN
     OLIN = 'RU CAT = ' RUCAT'  => NC - Network Control'
   IF RUCAT = 2 THEN
     OLIN = 'RU CAT = ' RUCAT'  => DFC - Data Flow Control'
   IF RUCAT = 3 THEN
     OLIN = 'RU CAT = ' RUCAT'  => SC - Session Control'
   CALL WRITEIT
   FLAG1 = 0
   RETURN
END
OLIN = 'TYPE = RESPONSE UNIT'
CALL WRITEIT
IF RTI = 1 THEN DO
   IF DR2 = 1 THEN
      OLIN = 'SEND_ERROR or No CONFIRMED Verb issued'
   ELSE
      OLIN = 'Negative Response => -RSP'
   END
ELSE DO
   IF DR2 = 1 THEN
      OLIN = 'CONFIRMED Verb Issued'
   ELSE
      OLIN = 'Positive Response => +RSP'
   END
CALL WRITEIT
IF SDI = 1 THEN DO
   OLIN = 'SDI ON - Sense Data Included'
   CALL WRITEIT
   IF RTI = 1 THEN FLAG1 = 3
   IF X2D(SUBSTR(TH,49,4)) < 8 & RTI = 1 THEN FLAG1 = 4
   END
IF PCI = 1 THEN DO
   OLIN = 'PCI ON - Pacing Response'
   CALL WRITEIT
END
IF RUCAT = 0 & FI = 0 THEN
   OLIN = 'RU CAT = ' RUCAT'  => FMD, Char Coded RU'
IF RUCAT = 0 & FI = 1 THEN
   OLIN = 'RU CAT = ' RUCAT'  => FMD, FM Follows or Field Formatted RU'
IF RUCAT = 1 THEN
   OLIN = 'RU CAT = ' RUCAT'  => NC - Network Control'
IF RUCAT = 2 THEN
   OLIN = 'RU CAT = ' RUCAT'  => DFC - Data Flow Control'
IF RUCAT = 3 THEN
   OLIN = 'RU CAT = ' RUCAT'  => SC - Session Control'
CALL WRITEIT
IF QRI = 0 THEN
   OLIN = 'QRI = 0  => Response Bypasses Normal Transmission Queues'
ELSE
   OLIN = 'QRI = 1  => Response Uses Normal Transmission Queues'
CALL WRITEIT
RETURN
REQ:
OLIN = 'TYPE = REQUEST UNIT'
CALL WRITEIT
IF PCI = 1 THEN DO
   OLIN = 'PCI ON - Pacing Request'
   CALL WRITEIT
   END
IF BBI = 1 THEN DO
   OLIN = 'BBI ON - Begin Bracket State'
   CALL WRITEIT
   END
IF EBI = 1 THEN DO
   OLIN = 'EBI ON - End Bracket State'
   CALL WRITEIT
   END
IF CEBI = 1 THEN DO
   OLIN = 'CEBI ON - End Bracket State'
   CALL WRITEIT
   END
IF CDI = 1 THEN DO
   OLIN = 'CDI ON - Change Direction'
   CALL WRITEIT
   END
IF SDI = 1 THEN DO
   OLIN = 'SDI ON - Sense Data Included'
   CALL WRITEIT
   END
IF BCIECI = 0 THEN
   OLIN = 'BCI/ECI =  00, Middle RU in Chain'
IF BCIECI = 1 THEN
   OLIN = 'BCI/ECI =  01, Last RU in Chain'
IF BCIECI = 2 THEN
   OLIN = 'BCI/ECI =  10, First RU in Chain'
IF BCIECI = 3 THEN
   OLIN = 'BCI/ECI =  11, Only RU in Chain'
CALL WRITEIT
IF RUCAT = 0 & FI = 0 THEN
   OLIN = 'RU CAT = ' RUCAT'  => FMD, Char coded RU'
IF RUCAT = 0 & FI = 1 THEN
   OLIN = 'RU CAT = ' RUCAT'  => FMD, FM Follows or Field Formatted RU'
IF RUCAT = 1 THEN
   OLIN = 'RU CAT = ' RUCAT'  => NC - Network Control'
IF RUCAT = 2 THEN
   OLIN = 'RU CAT = ' RUCAT'  => DFC - Data Flow Control'
IF RUCAT = 3 THEN
   OLIN = 'RU CAT = ' RUCAT'  => SC - Session Control'
CALL WRITEIT
IF RSP = 0 THEN
   OLIN = 'Response Mode = No Response Requested'
IF RSP = 2 | RSP = 8 | RSP = 10 THEN
   OLIN = 'Response Mode = Definite Response Requested'
IF RSP = 3 | RSP = 9 | RSP = 11 THEN
   OLIN = 'Response Mode = Exception Response Requested'
CALL WRITEIT
IF QRI = 0 THEN
   OLIN = 'QRI = 0  => Response Bypasses Normal Transmission Queues'
ELSE
   OLIN = 'QRI = 1  => Response Uses Normal Transmission Queues'
CALL WRITEIT
RETURN
WRITEIT:
OLIN = OPRE||OLIN
/* SAY OLIN */
'EXECIO 1 DISKW' OUTFILE '0 (VAR OLIN'
RETURN


SNA CODES

SNA CODES:
A0       SDT
A1       CLEAR
A2       STSN
A3       RQR
C0       CRV
C0       SHUTD
C1       SHUTC
C2       RSHUTD
C8       BID
C9       SIGNAL
0A       NC-ER-TEST-REPLY
0C       NC-ER-ACT-REPLY
0D       ACTLU/NC-ACTVR
0E       DACTLU/NC-DACTVR
0F       NC-ER-OP
01020A   ACTLINK
01020B   DACTLINK
01020E   CONNOUT
01020F   ABCONN
010201   CONTACT
010202   DISCONTACT
010203   IPLINIT
010204   IPLTEXT
010205   IPLFINAL
010206   DUMPINIT
010207   DUMPTEXT
010208   DUMPFINAL
010209   RPO
01021A   FNA
01021B   REQDISCONT
010211   SETCV
010214   ESLOW
010215   EXSLOW
010216   ACTCONNIN
010217   DACTCONNIN
010218   ABCONNOUT
010219   ANA
010280   CONTACTED
010281   INOP
010284   REQCONT
010285   NS-LSA
010301   EXECTEST
010302   ACTTRACE
010303   DACTTRACE
010311   SETCV
010331   DISPSTOR
010334   RECSTOR
010381   RECMS
010382   RECTD
010383   RECTRD
010604   NSPE
010681   INIT-SELF0
010683   TERM-SELF/0
02       NC-IPL-FINAL
03       NC-IPL-INIT
04       LUSTAT/NC-IPL-TEXT
05       LSA/RTR
06       NC-ER-INOP
09       NC-ER-TEST
11       ACTPU
12       DACTPU
14       ACTDRM
15       DACTCDRM
31       BIND
32       UNBIND
41021C   DELETENR
41021D   ER-INOP
41021E   ADDLINK
410210   RNNA
410220   NOTIFY
410221   ADDLINKSTA
410223   VR-INOP
410235   INITPROC
410236   PROCSTAT
410237   LDREQD
410240   RECACTLU
410243   NS-IPL-INIT
410244   NS-IPL-TEXT
410245   NS-IPL-FINAL
410246   NS-IPL-ABORT
41028A   RECACTCDRM
410286   REQFNA
410287   LCP
410289   ROUTE-INOP
410304   REQMS
410305   TESTMODE
410307   ROUTE-TEST
41038D   NMVT
410384   RECFMS
410385   RECTR
410386   ER-TESTED
46       NC-IPL-ABORT
70       BIS
71       SBI
80       QEC
81       QC
810387   REQECHO
810389   ECHOTEST
810601   CINIT
810602   CTERM
810620   NOTIFY
810629   CLEANUP
810680   INIT-OTHER
810681   INIT-SELF 1/2
810682   TERM-OTHER
810683   TERM-SELF/1
810685   BINDF
810686   SESSST
810687   UNBINDF
810688   SESSEND
818620   NOTIFY
818627   DSRLST
81864A   CDTAKDC
81864B   CDCINIT
818640   INIT-OTHER-CD
818641   CDINIT
818643   CDTERM
818645   CDSESSSF
818646   CDSESSST
818647   CDSESSTF
818648   CDSESSEND
818649   CDTAKD
82       RELQ
83       CANCEL
84       CHASE


Gerald L Marsh
Dept of IS, State of Washington (USA)            c Gerald L Marsh 1992

