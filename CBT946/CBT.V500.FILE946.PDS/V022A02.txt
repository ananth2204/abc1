 REXX programming style
The following EXEC not only illustrates some interesting coding techniques but
also contains two handy utilities.  These are:
y    It traces itself on command.  The SET EXECTRAC ON option does not work well
with REXX; it requires the use of the enter key for each command.  I code all my
REXX EXECs with an optional trace routine in the beginning.  That way, any time
I want to see what my EXEC is doing I have only to enter my command with
'*DEBUG', and the EXEC quickly displays everything, on the spot.
y    It neatly documents itself.  Commands can be excellent without internal
documentation, but a perfect command is a totally self-contained function, and
that means having its documentation close at hand.  Otherwise, the command's
rate of use can be limited because options go unnoticed.
y    It invokes the random number generator.
y    It does an internal sort.  This is very adaptable:  the same routine could
be used, with a little amendment, to sort any kind of REXX-based table.  I save
routines like this just for that reason.  There just isn't usually time for
experimentation.
I have chosen this EXEC for its simplicity.  REXX is a great tool, but like all
tools it can be used well or sloppily.  For me, giving an EXEC documentation is
like putting a handle on the knife, and providing an optional TRACE is like
putting an edge on the blade.
REXLOTTO EXEC
ARG ARGSTRING
DEBUG = ''
IF (FIND(ARGSTRING,'?')) = 1 THEN SIGNAL DOC;
X = FIND(ARGSTRING,'*DEBUG')
IF X = 0 THEN SIGNAL BEGIN
    ELSE DO;
    ARGSTRING = DELWORD(ARGSTRING,X,1)
    TRACE (I)
    DEBUG = '*DEBUG'
    END;
IF (FIND(ARGSTRING,'?')) = 1 THEN SIGNAL DOC;
SIGNAL BEGIN
TSTPAUSE: PROCEDURE EXPOSE DEBUG
IF DEBUG = '*DEBUG' THEN DO;
    SAY 'PAUSE: ENTER HX TO CANCEL'
    PULL Z
    IF Z = 'HX' THEN EXIT 999
    END;
RETURN
BEGIN:
SETSIZE = WORD(ARGSTRING,1)
IF SETSIZE = '' THEN SETSIZE = 6
SETSIZEN = (FORMAT(SETSIZE,4,0))
IF SETSIZEN ( 1 | SETSIZEN > 40 THEN DO
    SAY 'REXLOTTO - SET SIZE MAXIMUM IS 40. FOUND=('||SETSIZE||').'
    EXIT 010
    END
LOTTO = ''
NEXTLOT:
LOTCNT = WORDS(LOTTO)
IF LOTCNT = SETSIZEN THEN SIGNAL SORT
LOT = RANDOM(1,40)
IF (FIND(LOTTO,LOT)) = 0 THEN DO
    LOTTO = LOTTO LOT
    LOTSEQ = LOTCNT + 1
    LOTTO.LOTSEQ = LOT
    END
SIGNAL NEXTLOT
SORT:
IF SETSIZEN = 1 THEN SIGNAL EXIT
SORTSEQA = 1
SORTSEQB = 2
SORTLOOP:
IF LOTTO.SORTSEQA > LOTTO.SORTSEQB THEN DO
     LOTTOWRK = LOTTO.SORTSEQA
    LOTTO.SORTSEQA = LOTTO.SORTSEQB
    LOTTO.SORTSEQB = LOTTOWRK
    SIGNAL SORT
    END
SORTSEQA = SORTSEQA + 1
SORTSEQB = SORTSEQB + 1
IF SORTSEQB <= SETSIZEN THEN SIGNAL SORTLOOP
LOTTO = ''
DO SORTSEQ = 1 TO SETSIZEN BY 1
    LOTTO = LOTTO LOTTO.SORTSEQ
    END
EXIT:
SAY 'REXLOTTO - YOUR REXXPICK NUMBER IS' LOTTO
EXIT 000
DOC:
'VMFCLEAR'
SAY 'REXXNAME: REXLOTTO'
SAY
SAY 'FUNCTION: PROVIDE SIX OR N NONREPEATING RANDOM NUMBERS'
SAY '               BETWEEN ONE AND FORTY'
SAY 'LOGIC:    USES THE REXX RANDOM NUMBER GENERATOR BASED ON'
SAY '               THE CPU CLOCK.'
SAY 'FORMAT:   ENTER COMMAND AS SHOWN BELOW.  PARAMETER FIELD IS OPTIONAL.'
SAY
SAY '          REXLOTTO  &SETSIZE   '
SAY
SAY '          &SETSIZE - ENTER THE NUMBER OF RANDOM NUMBERS WANTED.'
SAY '                     DEFAULT IS SIX, MINIMUM IS 1, AND MAXIMUM IS 40.'
SAY
SAY 'EXAMPLE:  THE FOLLOWING COMMAND SAYS GENERATE 6 NON REPEATING '
SAY '          INTEGERS BETWEEN 1 AND 40.  RESULT IS SHOWN BELOW'
SAY '               THE COMMAND.'
SAY '          REXLOTTO 6'
SAY '          7 18 30 34 37 40'
SAY
EXIT 000
Marc V Irvin
Senior Programming Specialist
Norden Systems (USA)     ) Norden Systems Inc 1988


























