Display a user's NSS/DCSS

The following code will allow a user who has the privilege to
perform CP LOCATE and DIAG X'04' instructions to display
the NSS/DCSS that another user is using. This utility is
particularly useful in our installation because we have a high
CMS user population and a large number of shared segments
holding a variety of software and mini-disk FSTs. The utility
will run under VM/XA SP 2.0 and VM/XA SP 2.1. Each
user's VMDBK, in VM/XA, contains a fullword pointer, at
offset X'4A0' (VMDSHRPT), which points to the user's
SHRBK chain. Each SHRBK in this chain is used to keep track
of each NSS or DCSS that the user is attached to. Each
SHRBK holds a forward pointer to the next SHRBK in the
chain, and also the name for the NSS or DCSS associated with
it. The QSEG utility utilizes this.

         TITLE 'QSEG - Display users SHRBK chain'
         PRINT GEN
QSEG     CSECT
         DS    0H
         STM   R14,R12,12(R13)       * Save caller regs in his savearea
         BALR  R12,0                 * Establish addressability
         USING *,R12
         ST    R13,SAVEAREA+4        * Save address of callers savearea
         LA    R11,SAVEAREA          * Point to my savearea
         ST    R11,8(R13)            * Save address of my savearea
         LR    R13,R11               * Save pointer to my savearea
         B     BEGIN                 * Go to real code
         DC    CL8'QSEG    '         * Eyecatchers
         DC    CL8'&SYSDATE'
         DC    CL8'  &SYSTIME'
         DC    CL8'VER1.1.1'
         DC    CL16' M.Wicks  , HCC'
BEGIN    EQU   *                     * Real code
         LA    R2,8(R1)              * Point to arguments passed
         CLI   0(R2),X'FF'           * Any passed?
         BNE   PARMOK                * Yes, then continue
*                                    * No, msg and bomb out
         LINEDIT TEXT='Format of command is QSEG <userid>',DOT=NO
         B     EXIT
PARMOK   EQU   *                     * Parms OK so let's keep going
         MVC   USERID,0(R2)          * Save user-id passed
         LA    R2,CMMD               * Point to CP LOCATE cmd
         LA    R3,CMDBUFF            * Point to buffer for output
         L     R4,DIAGDEF            * Tell diag to save output in buff
         L     R5,CMMDL              * Length of CP command
         DC    X'83',X'24',XL2'0008' * CP LOCATE using diag x'08'
         CLC   CMDBUFF(5),=C'VMDBK'  * VMDBK returned???
         BE    CONVERT               * Yes, then all OK. Continue
*                                    * No, msg and bomb out
         LINEDIT TEXT='VMDBK for user ........ could not be located',  C
               SUB=(CHARA,USERID),DOT=NO
         B     EXIT
CONVERT  EQU   *                     * VMDBK returned so continue
         MVC   HEXADDR(8),CMDBUFF+11 * Save VMDBK address returned
         TR    HEXADDR(8),HEXTR      * Translate EBCDIC to hex equiv
         LA    R2,4                  * Set loop counter
         LA    R3,HEXADDR            * Point to "hex" version of addr
         LA    R4,VMDBKLOC           * Point to buffer for new "real
*                                    * address" version
         XR    R5,R5                 * Zero reg 5
LOOP     EQU   *                     * Start of loop
         MVC   0(1,R4),1(R3)          * Move 2nd byte, of a pair, from
*                                    * "hex" to "real" version buffer
         IC    R5,0(R3)              * Move 1st byte into reg 5
         SLL   R5,4                  * Shift 4 low order bits to high
         STC   R5,WORKBYTE           * Save in work buffer
         OC    0(1,R4),WORKBYTE      * OR work buffer with byte
*                                    * previously moved to "real" buff
         LA    R3,2(R3)              * Point to next byte pair
         LA    R4,1(R4)              * Point to next pos in "real" buff
         BCT   R2,LOOP               * Go back to loop start again
         L     R2,VMDBKLOC           * Get "real" VMDBK address
         A     R2,=X'000004A0'       * Point to VMDSHRPT
         ST    R2,VMDSHRPT           * Save new address in buffer
         LA    R2,VMDSHRPT           * Get address of buffer
         LA    R3,1                  * Going to get 1 fullword
         LA    R4,SHRBLOK            * Point to output buff for diag 4
         DC    X'83',X'23',XL2'0004' * Do the diag x'04'
         XR    R7,R7                 * Zero counter for No of SHRBKs
*                                    * Heading text
         LINEDIT TEXT='User ........ has the following segments :',    C
               SUB=(CHARA,USERID),DOT=NO
SEGLOOP  EQU   *                     * SHRBK chain processing loop
         L     R2,SHRBLOK            * Pointer to current SHRBK
         LTR   R2,R2                 * End of chain?
         BZ    TELLME                * Yes, tell me all the info
         A     R2,=X'00000008'       * No, so point to 1st fullword
*                                    * of NSS/DCSS name
         ST    R2,SEGPOINT           * Save in buffer
         A     R2,=X'00000004'       * Point to 2nd fullword of name
         ST    R2,SEGPOINT+4         * Save in next buffer
         LA    R2,SEGPOINT           * Point to this list of addresses
         LA    R3,2                  * 2 fullwords to get this time
         LA    R4,SEGNAME            * Point to diag 4 output buffer
         DC    X'83',X'23',XL2'0004' * Diag x'04'
*                                    * Print name of DCSS/NSS
         LINEDIT TEXT='........',DOT=NO,SUB=(CHARA,SEGNAME)
         LA    R7,1(R7)              * Add one to SHRBK counter
         LA    R2,SHRBLOK            * Point to buffer holding address
*                                    * of pointer to next SHRBK
         LA    R3,1                  * 1 fullword to get
         LA    R4,SHRBLOK            * Point to SHRBK fwd pointer buff
         DC    X'83',X'23',XL2'0004' * Diag x'04'
         B     SEGLOOP               * Next SHRBK in chain
TELLME   EQU   *
*                                    * How many NSS/DCSS has he got?
         LINEDIT TEXT='User ........ has .. NSS/DCSSs attached',       C
               SUB=(CHARA,USERID,DEC,(7)),DOT=NO,RENT=NO
EXIT     EQU   *                     * All done
         L     R13,SAVEAREA+4        * Restore callers R13 to point to
*                                    * his savearea
         LM    R14,R12,12(R13)       * Restore callers other regs
         LA    R15,0                 * Set return code
         BR    R14                   * Return to caller
* Storage And Constant Definitions Etc
         DS    0D                    * Make sure on boundary
         REGEQU                      * Equate registers
SAVEAREA DS    18F                   * My savearea
CMMD     DC    CL8'LOCATE  '         * CP LOCATE cmd for diag 8
USERID   DC    CL8' '                * Userid to "CP LOCATE"
CMMDL    EQU   *-CMMD                * CP command length
DIAGDEF  DC    X'40',X'000010'       * Tell diag 8 to save output
CMDBUFF  DC    CL256' '              * Diag 8 output buffer
HEXADDR  DC    X'0000000000000000'   * EBCDIC version of VMDBK address
HEXTR    DC    193X'00'              * Translate table
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'
         DC    X'00010203040506070809'
         DC    6X'00'
VMDBKLOC DC    F'0'                  * "Real" version of VMDBK address
VMDSHRPT DC    F'0'                  * Holds pointer to 1st SHRBK
SHRBLOK  DC    F'0'                  * Pointer to next SHRBK in chain
SEGPOINT DC    2F'0'                 * Pointers to doubleword holding
*                                    * name of DCSS/NSS
SEGNAME  DC    F'0'                  * Name of current SHRBK NSS/DCSS
WORKBYTE DC    X'00'                 * Work buffer
         END

Martin Wicks
Senior VM Systems Programmer
Hampshire County Council (UK)
