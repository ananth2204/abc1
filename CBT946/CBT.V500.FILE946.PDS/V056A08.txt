Saving and restoring CP settings - revisited

The article Saving and restoring CP settings in the May 1990
issue of VM Update was very interesting.  However, there are
several distinct disadvantages in the way the problem was
solved.

Calling the CPSAVE EXEC each time you use a procedure can
mean a lot of overhead, especially if you call other stand-alone
procedures that also have to save the CP settings. This means
that you may be using over 100 lines of extra code each time
you use your main procedure, and the same amount of extra
code each time you use a stand-alone subprocedure!  If you
reset the CP SET values each time, that will be another 100
lines of extra code!  As you can imagine, that can add up to a
lot of overhead - the coding for CPSAVE and CPREST may
exceed by far the coding for your main procedure!

The second disadvantage is that CPREST resets all values,
even if you only changed one.  Also, you can't reset some of
the values leaving others still set until a later time.

Another disadvantage is that CPSAVE and CPREST are coded
so that any changes to the SET response require a change to the
procedures.

The last disadvantage is that if any procedure makes a mistake
and doesn't reset a value, that value will continually be SET
wrong by all following procedures.

We also needed a way to check the CP settings and developed
a set of procedures to do this.  The main difference is that we
used the GLOBALV CMS command to store the values
received.  This way we can have the settings checked and
stored at the beginning of each procedure and reset only those
values we changed, or, which is much better, query the CP
settings only once (eg from your EXEC profile) and use the
initial values over and over again (which reduces your
overhead considerably).  This system allows you to decide how
you will use the procedures - continually or just one call.


QSET PROCEDURE

/* Procedure to get the CP-Settings */
q1 = queued()                   /* previously queued entries */
'MAKEBUF'
bufno = rc
glob = 'GLOBALV SELECT QSET PUT'
'Q SET (FIFO'                   /* Query the CP-settings */
do i = 1 to queued()-q1         /* do all new queued entries */
    pull arglist
    do j = 1 by 1 while length(arglist) > 0 /* do until arglist empty */
       parse value arglist with s1 s2 ',' arglist
       interpret 'SET's1 '= s1 s2'  /* example: setemsg = emsg off */
       glob = glob 'SET's1
    end
end
'DROPBUF' bufno
glob                /* issue built global command */
exit
/*                                                                 */
/* Call the result using    GLOBALV SELECT QSET GET SETparam . . . */
/*      and set it with     CP SET setparam                        */
/*                                                                 */
/* param :  MSG | WNG | EMSG | ACNT | RUN | LINEDIT | TIMER        */
/*          ISAM | ECMODE | ASSIST | PAGEX | AUTOPOLL | IMSG       */
/*          SMSG | AFFINITY | NOTRAN | VMSAVE | 370E | STBYPASS    */
/*          STMULTI | MIH | VMCONIO | CPCONIO | SVCACCL | CONCEAL  */
/*          MACHINE | SVC76 | NOPDATA | IOASSIST | CCWTRAN         */

Query SET returns a list of names and their settings, separated
by a comma.  The procedure above separates a name and its
setting one after another and builds (using interpret) a variable
called SETname with the value name and its setting.  For
example, when the first line of the Q SET response is read, the
first name and setting are MSG ON.  This is turned into the
coding SETMSG = MSG ON by the interpret command.  Each
parameter is built into a long string which is then issued as a
GLOBALV command, eg GLOBALV SELECT QSET PUT
SETMSG SETEMSG SETIMSG etc.

The saved settings can be recalled at any time by using the
opposite GLOBALV command, ie GET.  GLOBALV SELECT
QSET GET SETMSG SETEMSG SETIMSG etc. You need
only get the settings that you need to reset - it is not necessary
to get all the settings.  Then all you need to do is reset those
settings as in the following example:

      'CP SET' setemsg
      'CP SET' setimsg

As you can see, there is a lot less coding necessary using this
solution.  If you wish to have the same results as the CPREST
procedure you would just have to build a string of CP SET
commands to reset all values.  These commands could be
incorporated into a procedure.

If you forget to reset a value the next procedure that resets the
value will restore the initial value, not the value you falsely left
behind.  If you decide to change a value permanently all you
have to do is change the setting and call QSET once more or
issue the following commands:

      setmsg = 'MSG OFF'
      'CP SET' setmsg
      "GLOBALV SELECT QSET PUT SETMSG"

You will have to SET values that you have temporarily
changed in your procedure each time you call a subprocedure
that resets those values.  For example: a procedure sets  EMSG
OFF.  You call another procedure that also sets EMSG OFF
but when it is finished it resets EMSG to its initial value of
ON.  After you have called that procedure you must SET
EMSG OFF again.  This is somewhat inconvenient but it
should not be a problem, you only have to copy the commands
that you had already entered before to SET those values.  As
that is the only disadvantage of this system that we know, it
should be a good trade off for the performance you will win.

Using this same logic we have built several other Query
procedures. It should be no problem to solve any queries with
this system. We have already created a QPF (PF key settings),
QSCREEN (VM screen settings), and QTERM (terminal
settings) procedures.


QPF PROCEDURE

/* Procedure to get the PF key Settings */
arg pfnr .              /* you can set up one specific PF-Key */
q1 = queued()           /* if you give a parameter (ie 01).   */
'MAKEBUF'               /* Default is all PF-Keys             */
bufno = rc
glob = 'GLOBALV SELECT QPF PUT'
'Q PF'pfnr '(FIFO'
do i = 1 to queued()-q1
    pull pf arglist
    interpret 'SET'pf '= pf arglist'
    glob = glob 'SET'pf
end
'DROPBUF' bufno
glob
exit
/*                                                                 */
/* Call the result using GLOBALV SELECT QPF GET SETparam . . .     */
/*      and set it with  CP SET setparam                           */
/*                                                                 */
/* param :  PF01 | PF02 | . . . . | PF24                           */


QSCREEN PROCEDURE

Please note that you don't use CP SET, you use CP SCREEN instead.

/* Procedure to get the VM-Screen Colours                           */
q1 = queued()
'MAKEBUF'
bufno = rc
glob = 'GLOBALV SELECT QSCREEN PUT'
'Q SCREEN (FIFO'
end_q = queued()-q1
do i = 1 to end_q
   pull a1 f1 e1 a2 f2 e2
   interpret 'SET'a1 '= a1 f1 e1'
   glob = glob 'SET'a1
   if a2 /= '' then do
       interpret 'SET'a2 '= a2 f2 e2'
       glob = glob 'SET'a2
   end
end
'DROPBUF' bufno
glob
exit
/* Call the result using GLOBALV SELECT QSCREEN GET SETparam . . .  */
/*      and set it with  CP SCREEN setparam                         */
/*                                                                  */
/* param :  CPOUT | VMOUT | INREDISP | INAREA | STATAREA            */


QTERM PROCEDURE

Please note that you don't use CP SET, you use CP TERM
instead.  Also note that you should set certain values OFF
before you SET them with new values.

/* Procedure to get the TERMINAL-Settings */
q1 = queued()
'MAKEBUF'
bufno = rc
glob = 'GLOBALV SELECT QTERM PUT'
'Q TERM (FIFO'
do i = 1 to queued()-q1
    pull arglist
    do j = 1 by 1 while length(arglist) > 0
       parse value arglist with s1 s2 ',' arglist
       interpret 'SET's1 '= s1 s2'
       glob = glob 'SET's1
    end
end
'DROPBUF' bufno
glob
exit
/* Call the result with  GLOBALV SELECT QTERM GET SETparam . . .   */
/*      and set it with  CP TERM setparam                          */
/*                                                                 */
/* To make sure that the Parameters in the first line can be       */
/*    set you should set them OFF before setting them with new     */
/*    values:  CP TERM LINEND  OFF                                 */
/*             CP TERM LINEDEL OFF                                 */
/*             CP TERM CHARDEL OFF                                 */
/*             CP TERM ESCAPE  OFF                                 */
/*             CP TERM TABCHAR OFF                                 */
/*                                                                 */
/* param :  LINEND | LINEDEL | CHARDEL | ESCAPE | TABCHAR          */
/*          LINESIZE | ATTN | APL | TEXT | MODE | HILIGHT          */
/*          CONMODE | BREAKIN | BRKKEY | SCRNSAVE                  */

William K Mongan
Systems Programmer
Basler Versicherung (West Germany)            c William K Mongan 1991


