 CMS disassembler

We have an IBM 3033 installation running VM/SP with a CMS development
environment.  We have often felt a need for a disassembler to get a sort of a
pseudo code for CMS utility programs so we could apply in-house changes to make
life easier.

I have developed a disassembler which disassembles either memory or a text file.
In order to disassemble a module file all that is needed is to load the module
as a nucleus extension, query its origin and use the disassembler on it.  This
could also be done through the program with some minor changes.

The input this program can be as follows:

1)   DIS  XXXX Where XXXX = text file name
2)   DIS XXXX YYYY  Where YYYY is an offset into the text file.
3)   DIS XXXX YYYY Z  Z is the offset for the location counter.
4)   DIS  A         Where A = start address
5)   DIS A B        Where B = end address or the number of bytes in hex.
6)   DIS  A  B  C        Where C = start of location counter to be used.

Note :   no check is done to see if valid addresses are entered.


PRINT    NOGEN
DISASS   CSECT
         STM      14,12,12(13)       SAVE OPSYS REGISTERS
         USING    DISASS,12,9        ESTABLISH BASE REGISTERS
         SR       9,9
         LA       9,4095(12)
         LA       9,1(9)
         ST       13,SAVEAREA+4      STORE BACKWARD POINTER
         LA       10,SAVEAREA
         ST       10,8(13)           STORE FORWARD PTR FOR OPSYS
         LA       13,SAVEAREA        SET TO OUR SAVE AREA
BEGPROG  EQU      *
         LR       2,1
         LA       2,8(2)             POINT AT FIRST PARAMETER
         CLI      0(2),X'FF'
         BE       NOINP
         EJECT
************************************************************************
*  CHECK IF THE A FILE NAME IS ENTERED.  IF IT IS THEN SEE IF IT IS A  *
*  TEXT FILE OR MODULE FILE AND ON WHICH DISK.  THEN LOAD IT INTO FREE *
*  STORAGE.GET THE ADDRESSES OF LOADING AND POINT R2 AT THEM AND PRO-  *
*  CEED AS NORMAL.                                                     *
************************************************************************
         MVC      FNAME,0(2)
         MVC      FTYPE,=CL8'TEXT'
         MVC      FMODE,=C'* '
         LA       3,FNAME
         FSSTATE  (3),ERROR=NOFNAME
         MVC      CPCOMM+8(8),FNAME
         LA       3,PROGEND+100          LOAD THE TEXT FILE AT THIS
         ST       3,ADD1                 ADDRESS.
         LA       3,ADD1+1               CONVERTING THE ADDRESS INTO
         LA       4,3                    DISPLAY FORMAT.(6 HEX DIGITS)
         LA       5,CPCOMM+40
ADDLOOP  EQU      *
         MVC      TEMP1,0(3)
         MVC      TEMP2,0(3)
         TR       TEMP1,ISTHALF
         TR       TEMP2,NXTHALF
         MVC      0(2,5),TEMP1
         LA       5,2(5)
         LA       3,1(3)
          BCT      4,ADDLOOP
LOADFIL  EQU      *                    ISSUE A LOAD FOR THE FILE.
         LA       1,CPCOMM
         SVC      202
         DC       AL4(SYSERR)
         NI       ASKUSER+1,X'0F'      OPEN THE GATE TO GET USER INPUT
         L        3,ADD1               AFTER DISASSEMBLING EACH 100
         ST       3,LOWMEM             BYTES OF MEMORY.
         A        3,=F'100'
         ST       3,HIMEM
         LA       2,8(2)               POINT AT NEXT PARAMETER
         CLI      0(2),X'FF'           IF AN OFFSET INTO THE TEXT FILE
         BE       STDEC                IS GIVEN,THEN USE THAT
         BAL      14,GETADD
         L        3,TEMPF
         A        3,LOWMEM
         ST       3,LOWMEM
         A        3,=F'100'
         ST       3,HIMEM
         B        STDEC                NOW START DECODING
SYSERR   EQU      *
         WRTERM   'ERROR IN LOADING TEXT FILE'
         B        ENDPROG
**********************************************************************
*   CONVERT THE ADDRESS PARAMETERS INTO FULLWORDS.                   *
**********************************************************************
NOFNAME  EQU      *
         BAL      14,GETADD
         MVC      LOWMEM(4),TEMPP
         CLI      0(2),X'FF'        ANY HIGH MEMORY ADDRESS ENTERED ?
         BE       USE100            NO SO USE 100 BYTES FROM LOW MEMORY
         BAL      14,GETADD
         MVC      HIMEM(4),TEMPP
         CLC      HIMEM,LOWMEM      IS HIMEMORY < LOWMEMORY ?
         BH       STDEC             IF YES,THEN ASSUME THAT 2ND
         L        10,LOWMEM         OPERAND IS NUMBER OF BYTES.
         A        10,HIMEM
         ST       10,HIMEM
         B        STDEC             NOW START DECODING
USE100   EQU      *                 SECOND ADDRESS NOT ENTERED,SO USE
         L        10,LOWMEM         100 BYTES
         A        10,=F'100'
         ST       10,HIMEM
STDEC    EQU      *
         L        3,LOWMEM          3 IS THE LOCATION COUNTER
         L        4,LOWMEM
         L        5,HIMEM
         SR       5,4               PUT NUMBER OF BYTES TO BE DECODED
         CLI      0(2),X'FF'
         BE       NOLOC             IF A THIRD OPTION IS ENTERED,THEN
         BAL      14,GETADD         SET THE LOCATION COUNTER.
         L        3,TEMPF
NOLOC    EQU      *
         WRTERM   HEADER,80
         BAL      14,DECODE
         WRTERM   'END OF DIS ASSEMBLY'
         B        ENDPROG
NOINP    EQU      *
         WRTERM   'AT LEAST ONE ADDRESS MUST BE ENTERED'
ENDPROG  EQU      *
         L        13,SAVEAREA+4     GET OPSYS SAVE AREA
         LM       14,12,12(13)      RESTORE OPSYS REGISTERS
         BR       14
         EJECT
***********************************************************************
*    THIS ROUTINE CONVERTS THE ADDRESS PARAMETERS INTO FULLWORD       *
 *    FORMAT.  THE ADDRESS IS IN TEMPP WHEN IT RETURNS.  THE PARAMETER *
*    IS RIGHT JUSTIFIED FIRST BEFORE IT IS CONVERTED.                 *
***********************************************************************
GETADD   EQU      *
         MVC      TEMP,=C'00000000'  INITIALISE TO ZEROES.
         LA       10,TEMP+7          POINT AT LAST BYTE.
         LA       11,8               LOOP COUNTER.
         LA       2,7(2)             POINT AT LAST BYTE OF INPUT ADD.
LOOP     EQU      *
         CLI      0(2),C' '          IS INPUT BYTE A BLANK ?
         BE       UPDINDX
         MVC      0(1,10),0(2)       NO,SO MOVE THE BYTE TO O/P
         S        10,=F'1'           REDUCE O/P BYTE POINTER
UPDINDX  EQU      *
         S        2,=F'1'            REDUCE I/P BYTE POINTER
         BCT      11,LOOP            REDO THE LOOP IF NEEDED
ENDLOOP  EQU      *
         A        2,=F'1'            READJUST INPUT POINTER.
         LA       2,8(2)             POINT AT NEXT PARAMETER
         TR       TEMP,HEXTAB-192    CONVERT A->F TO X'FA'->X'FF'
         PACK     TEMPP,TEMP(9)      PACK IT INTO TEMPP
         BR       14                 RETURN BACK.
         EJECT
***********************************************************************
*  THIS IS THE DRIVER FOR DECODING THE INSTRUCTION.                   *
*      R3   =  THIS IS THE LOCATION COUNTER                           *
*      R4   =  ADDRESS OF BYTE TO BE DECODED.                         *
*      R5   =  NUMBER OF BYTES TO BE DECODED.                         *
*      R6   =  ADDRESS OF OUTPUT RECORD FOR CODE ASIS.                *
*      R7   =  ADDRESS OF OUTPUT RECORD IN DISPLAY FORMAT.            *
*                                                                     *
*      DECODING METHOD:   BRANCH TO DIFFERENT PLACES DEPENDING ON     *
*                         INPUT BYTE.                                 *
*                         IF BYTE IS AN OPCODE THEN OUTPUT PREVIOUS   *
*                            CONSTANT IF ANY.  DECODE CURRENT INSTR,  *
*                            OUTPUT CURRENT INSTR.BLANK OUTPUT AND    *
*                            SET R7 POINTING TO OUTPUT START.         *
*                         ELSE                                        *
*                            IF WE HAVE NOT ALREADY STARTED OUTPUT-   *
*                            ING A CONSTANT, THEN PUT THE 'DC     X'  *
*                            LEGEND AND PUT THE CURRENT CONSTANT,     *
*                            ELSE ADD CURRENT CONST TO PREVIOUS ONE   *
*                            PROVIDING TOTAL LENGTH IS NOT > 72.      *
*                         REDUCE NUMBER OF BYTES TO BE DECODED BY     *
*                         APPROPRIATE AMOUNT, AND GET BACK IF MORE.   *
*   LOGIC FOR DECODING. FIRST SEPARATE THE INSTRUCTIONS AS FOLLOWS    *
*                           OPCODE                                    *
*                             |  GET DISP TO BRANCH USING TYPTAB.     *
*           -------------------------------------------               *
*           RR     RX    RS   SS    SI   S   SVC   DIAG               *
*                                                                     *
*        WITHIN EACH INSTRUCTION TYPE, TRANSLATE THE OPCODE AGAIN     *
*        USING TABLE XXTAB  (XX = INSTR TYPE) TO GET THE DISPLA-      *
*        CEMENT INTO ANOTHER TABLE XXTAB2 WHICH TELLS US THE OP-      *
*        CODE IN DISPLAY FORMAT.  AFTER THAT IT IS JUST A MATTER      *
*        OF FORMATTING THE OUTPUT.                                    *
*                ANY OPCODE CAN BE TREATED AS A CONSTANT BY ZER-      *
*        OING OUT ITS DISPLACEMENT VALUE IN THE TABLE TYPTAB AND      *
*        IT WILL THEN BE TREATED AS A CONSTANT.                       *
***********************************************************************
DECODE   EQU      *
         MVI      OUTREC,C' '                   CLEAR OUTPUT AREA.
         MVC      OUTREC+1(L'OUTREC-1),OUTREC
         LA       7,OUTREC
OPCDLOP  BAL      10,CONV                       GET 6 BYTES IN DISPLAY
         MVC      OPCODE,0(4)                   FORMAT.
          TR       OPCODE,TYPTAB                 GET OPCODE DISP.
         MVC      TYPBR+3(1),OPCODE
         LA       11,BRTABS
TYPBR    B        0(0,11)
BRTABS   B        CONST                 00      CONSTANT
         B        XRR                   04      INSTR TYPE IS  RR
         B        XRX                   08                     RX
         B        XSS                   0C                     SS
         B        XS                    10                     S
         B        XSI                   14                     SI
         B        XSVC                  18                     SVC
         B        XDIAG                 1C                     DIAG
         B        XRS                   20                     RS
CONST    EQU      *
         C        7,=A(OUTREC)                 IS A CONST BEING OUTPUT
         BNE      PUTC                         ALREADY?.
         MVC      OUTREC(10),=C'DC      X'''
         LA       7,OUTREC+10
         LA       6,CODE2
PUTC     EQU      *
         C        7,=A(OUTREC+35)             HAS LENGTH OF CONST BECOME
         BL       OKCONS                      > 35?
         MVI      0(7),C''''                  IF YES,THEN OUTPUT CURRENT
         WRTERM   OUTREC,73                   LINE AND BUILD ONE MORE.
         MVI      OUTREC,C' '
         MVC      OUTREC+1(72),OUTREC
         MVC      OUTREC(10),=C'DC      X'''
         LA       7,OUTREC+10                 SET 6 TO POINT TO M/C REP-
         LA       6,CODE2                     RESENTATION DISPLAY.
OKCONS   EQU      *
         MVC      0(2,7),BYT1A   MOVE DISPLAY BYTE 1
         MVC      0(1,6),0(4)    MOVE ACTUAL BYTE 1
         LA       7,2(7)         BUMP UP DISPLAY POSITION
         LA       4,1(4)         BUMP OPCODE POINTER
         LA       6,1(6)         BUMP UP ACTUAL CODE DISPLAY POINTER
         A        3,=F'1'        ADD ONE TO LOC CTR
         BCTR     5,0            REDUCE NUMBER OF BYTES TO BE DECODED
         B        ENDDECD
         EJECT
XSVC     EQU      *              INSTRUCTION TYPE IS SVC
         BAL      10,CHKCONST
         MVC      OUTREC(8),=C'SVC     '
         MVC      OUTREC+8(2),BYT2A
         MVC      CODE2(2),0(4)
         MVC      CODE(4),BYT1A
         LA       4,2(4)         UPDATE OPCODE POINTER
         S        5,=F'2'        UPDATE NUMBER OF BYTES TO BE DECODED
         A        3,=F'2'        ADD TWO TO LOC CTR
         B        PUTLN
         EJECT
XDIAG    EQU      *              INSTRUCTION TYPE IS DIAGNOSE
         BAL      10,CHKCONST
         MVC      OUTREC(8),=C'DIAG    '
         MVC      OUTREC+8(1),BYT2A
         MVI      OUTREC+9,C','
         MVC      OUTREC+10(1),BYT2B
         MVC      OUTREC+11(3),=C,X'''
         MVC      OUTREC+14(4),BYT3A
         MVI      OUTREC+18,C''''
         MVC      CODE2(4),0(4)
         MVC      CODE(8),BYT1A
         LA       4,4(4)
         S        5,=F'4'
         A        3,=F'4'
         B        PUTLN
         EJECT
 XS       EQU      *              INSTRUCTION TYPE IS S  D1(B1)
         BAL      10,CHKCONST
         MVC      OFFSET,0(4)
         MVC      CODE2(4),0(4)
         MVC      CODE(8),BYT1A
         LA       4,4(4)
         A        3,=F'4'        ADD FOUR TO LOC CTR
         S        5,=F'4'
         TR       OFFSET,STAB-128
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,STAB2
         AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         MVC      OUTREC+8(3),BYT3B
         MVI      OUTREC+11,C'('
         MVC      OUTREC+12(1),BYT3A
         MVI      OUTREC+13,C')'
         B        PUTLN
         EJECT
XRR      EQU      *              INSTRUCTION TYPE IS RR
         BAL      10,CHKCONST
         MVC      OUTREC+8(1),BYT2A
         MVI      OUTREC+9,C','
         MVC      OUTREC+10(1),BYT2B
         MVC      OFFSET,0(4)
         MVC      CODE2(2),0(4)
         MVC      CODE(4),BYT1A
         LA       4,2(4)
         A        3,=F'2'        ADD TWO TO LOC CTR
         S        5,=F'2'
         TR       OFFSET,RRTAB
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,RRTAB2
         AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         CLC      OUTREC(4),=C'SPM '
         BNE      PUTLN
         MVC      OUTREC+9(2),=C'  '
         B        PUTLN
         EJECT
XSS      EQU      *
         BAL      10,CHKCONST
         MVC      OFFSET,0(4)
         MVC      CODE2(6),0(4)
         MVC      CODE(12),BYT1A
         LA       4,6(4)
         A        3,=F'6'        ADD SIX TO LOC CTR
         S        5,=F'6'
         TR       OFFSET,SSTAB-192
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,SSTAB2
         AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         CLI      OFFSET,X'2C'
         BNL      SSTYP2
SSTYP1   EQU      *                       D1(L,B1),D2(B2)
         MVC      OUTREC+8(3),BYT3B
         MVI      OUTREC+11,C'('
         MVC      OUTREC+12(2),BYT2A
         MVI      OUTREC+14,C','
          MVC      OUTREC+15(1),BYT3A
         MVC      OUTREC+16(2),=C'),'
         MVC      OUTREC+18(3),BYT5B
         MVI      OUTREC+21,C'('
         MVC      OUTREC+22(1),BYT5A
         MVI      OUTREC+23,C')'
         B        PUTLN
SSTYP2   EQU      *                       D1(L1,B1),D2(L2,B2)
         MVC      OUTREC+8(3),BYT3B      D1
         MVI      OUTREC+11,C'('
         MVC      OUTREC+12(1),BYT2A     L1
         MVI      OUTREC+13,C','
         MVC      OUTREC+14(1),BYT3A     B1
         MVC      OUTREC+15(2),=C'),'
         MVC      OUTREC+17(3),BYT5B     D2
         MVI      OUTREC+20,C'('
         CLC      OUTREC(4),=C'SRP '
         BE       XSSRP
         MVC      OUTREC+21(1),BYT2B     L2
         MVI      OUTREC+22,C','
         MVC      OUTREC+23(1),BYT5A     B2
         MVI      OUTREC+24,C')'
         B        PUTLN
XSSRP    EQU      *      FORMAT D1(L1,B1),D2(B2),I3
         MVC      OUTREC+21(1),BYT5A     B2
         MVC      OUTREC+22(2),=C')'
         MVC      OUTREC+24(1),BYT2B     I3
         B        PUTLN
         EJECT
XRS      EQU      *         FORMAT  R1,R3,D2(B2)
         BAL      10,CHKCONST
         MVC      OFFSET,0(4)
         MVC      CODE2(4),0(4)
         MVC      CODE(8),BYT1A
         LA       4,4(4)
         A        3,=F'4'        ADD FOUR TO LOC CTR
         S        5,=F'4'
         TR       OFFSET,RSTAB-128
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,STAB2
         AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         MVC      OUTREC+8(1),BYT2A      R1
         MVI      OUTREC+9,C','
         MVC      OUTREC+10(1),BYT2B     R3
         MVI      OUTREC+11,C','
         MVC      OUTREC+12(3),BYT3B     D2
         MVI      OUTREC+15,C'('
         MVC      OUTREC+16(1),BYT3A     B2
         MVI      OUTREC+17,C')'
         B        PUTLN
         EJECT
XSI      EQU      *            FORMAT  D1(B1),I2
         BAL      10,CHKCONST
         MVC      OFFSET,0(4)
         MVC      CODE2(4),0(4)
         MVC      CODE(8),BYT1A
         LA       4,4(4)
         A        3,=F'4'        ADD FOUR TO LOC CTR
         S        5,=F'4'
         TR       OFFSET,SITAB-128
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,SITAB2
          AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         MVC      OUTREC+8(3),BYT3B
         MVI      OUTREC+11,C'('
         MVC      OUTREC+12(1),BYT3A
         MVI      OUTREC+13(2),=C'),'
         MVC      OUTREC+15(2),=C'X'''
         MVC      OUTREC+17(2),BYT2A
         MVI      OUTREC+19,C''''
         B        PUTLN
         EJECT
XRX      EQU      *             FOR RX INSTRUCTIONS
         BAL      10,CHKCONST
         MVC      OFFSET,0(4)
         MVC      CODE2(4),0(4)
         MVC      CODE(8),BYT1A
         LA       4,4(4)
         A        3,=F'4'        ADD FOUR TO LOC CTR
         S        5,=F'4'
         TR       OFFSET,RXTAB-64
         SR       8,8
         ICM      8,B'0001',OFFSET
         LA       11,RXTAB2
         AR       11,8
         MVC      OUTREC(4),0(11)
         MVC      OUTREC+4(4),=C'    '
         MVC      OUTREC+8(1),BYT2A       R1,D2(X,B)
         MVI      OUTREC+9,C','
         MVC      OUTREC+10(3),BYT3B
         MVI      OUTREC+13,C'('
         MVC      OUTREC+14(1),BYT2B
         MVI      OUTREC+15,C','
         MVC      OUTREC+16(1),BYT3A
         MVI      OUTREC+17,C')'
         B        PUTLN
         EJECT
PUTLN    EQU      *
         WRTERM   OUTREC,80
         MVI      OUTREC,C' '
         MVC      OUTREC+1(72),OUTREC
ENDDECD  C        5,=F'0'        IF INPUT IS NOT OVER,THEN DECODE MORE
         BH       OPCDLOP
         C        7,=A(OUTREC)   IS A CONSTANT TO BE OUTPUT ?
         BE       PUTLN1
         MVI      0(7),C''''
PUTLN1   WRTERM   OUTREC,73
ASKUSER  B        ENDRTN         THIS IS OPEN IF A TEXT FILE WAS LOADED
         RDTERM   USERINF,PRBUFF=PROMPT,PRLGTH=30
         CLI      USERINF,C'Q'   DOES HE WANT TO QUIT?
         BE       ENDTRN
         LA       5,100          ELSE DECODE 100 MORE BYTES.
         B        DECODE
ENDRTN   EQU      *
         BR       14
         EJECT
***********************************************************************
*   ANY CALLS TO THIS ROUTINE MUST SET UP THE BYTE IN ITS CORRE-      *
*   SPONDING HALVES (BYTEXA & BYTXB).  THIS ROUTINE WILL PUT THE 1ST  *
*   HALF IN BYTXA & 2ND HALF IN BYTXB IN DISPLAYABLE FORMAT.          *
* EG BYT1A = X'45' & BYT1B = X'45' ===> BYT1A= C'4' BYT1B= C'5'       *
***********************************************************************
CONV     EQU      *
         MVC      BYT1A,0(4)
         MVC      BYT1B,0(4)
         MVC      BYT2A,1(4)
          MVC      BYT2B,1(4)
         MVC      BYT3A,2(4)
         MVC      BYT3B,2(4)
         MVC      BYT4A,3(4)
         MVC      BYT4B,3(4)
         MVC      BYT5A,4(4)
         MVC      BYT5B,4(4)
         MVC      BYT6A,5(4)
         MVC      BYT6B,5(4)
         TR       BYT1A,ISTHALF
         TR       BYT1B,NXTHALF
         TR       BYT2A,ISTHALF
         TR       BYT2B,NXTHALF
         TR       BYT3A,ISTHALF
         TR       BYT3B,NXTHALF
         TR       BYT4A,ISTHALF
         TR       BYT4B,NXTHALF
         TR       BYT5A,ISTHALF
         TR       BYT5B,NXTHALF
         TR       BYT6A,ISTHALF
         TR       BYT6B,NXTHALF
         ST       3,LOCCTR
         MVC      LOC2A,LOCCTR+1
         MVC      LOC2B,LOCCTR+1
         MVC      LOC3A,LOCCTR+2
         MVC      LOC3B,LOCCTR+2
         MVC      LOC4A,LOCCTR+3
         MVC      LOC4B,LOCCTR+3
         TR       LOC2A,ISTHALF
         TR       LOC2B,NXTHALF
         TR       LOC3A,ISTHALF
         TR       LOC3B,NXTHALF
         TR       LOC4A,ISTHALF
         TR       LOC4B,NXTHALF
         BR       10
         SPACE 3
***********************************************************************
*   THIS ROUTINE IS CALLED FROM EACH INSTRUCTION DECODING PARA AND    *
*   IT CHECKS IF A PREVIOUS 'DC' IS PENDING?  IF YES, THEN IT OUTPUTS *
*   THAT AND RESETS THE ADDRESSES ETC AND GETS BACK.                  *
***********************************************************************
CHKCONST EQU      *
         C        7,=A(OUTREC)
         BE       NOCONST
         MVI      0(7),C''''
         WRTERM   OUTREC,73
         MVI      OUTREC,C' '
         MVC      OUTREC+1(72),OUTREC
         LA       7,OUTREC
NOCONST  EQU      *
         BR       10
         EJECT
         DS       0D
SAVEAREA DS       9D
ADD1     DS       F
STRTMSG  DC       C'DIS ASSEMBLER COMPILED ON '
         DC       C'&SYSDATE',C' '
         DC       C'&SYSTIME'
PROMPT   DC       C'TO QUIT DISASSEMBLY ENTER'
         DC       X'1DF8',C'Q',X'1DF0'
USERINF  DS       C
CPCOMM   DC       CL8'LOAD'
         DC       CL8' '             TEXT FILE NAME
         DC       CL8'('             OPTIONS
         DC       CL8'NOMAP'
         DC       CL8'ORIGIN'
          DC       CL8' '             ORIGIN ADDRESS
         DC       8X'FF'
FNAME    DS       CL8
FTYPE    DS       CL8
FMODE    DS       CL8
         DC       8X'FF'
TEMP1    DS       C
TEMP2    DS       C
HEADER   DS       0CL80
         DC       CL37'CODE    OPERANDS                     '
         DC       C'MACHINE CODE',CL24'     M/C REP '
         DC       C' LOC   '
OFFSET   DS       C
OUTREC   DS       0CL80
         DC       CL37' '
CODE     DC       CL12' '
         DC       CL5' '
CODE2    DC       CL6' '
         DC       CL13' '
LOC2A    DS       C
LOC2B    DS       C
LOC3A    DS       C
LOC3B    DS       C
LOC4A    DS       C
LOC4B    DS       C
         DC       C' '
TEMP     DS       CL8
         DS       C
TEMPF    DS       0F
TEMPP    DS       PL5
         DS       0D
LOWMEM   DS       F
HIMEM    DS       F
LOCCTR   DS       F
OPCODE   DS       CL1
BYT1A    DS       CL1
BYT1B    DS       CL1
BYT2A    DS       CL1
BYT2B    DS       CL1
BYT3A    DS       CL1
BYT3B    DS       CL1
BYT4A    DS       CL1
BYT4B    DS       CL1
BYT5A    DS       CL1
BYT5B    DS       CL1
BYT6A    DS       CL1
BYT6B    DS       CL1
HEXTAB   EQU      *
         DC       X'00FAFBFCFDFEFF000000000000000000'  C0
         DC       XL16'00'  D0
         DC       XL16'00'  E0
         DC       X'F0F1F2F3F4F5F6F7F8F9000000000000'  F0
ISTHALF  DS       0CL256
         DC       C'000000000000000011111111111111112222222222222222'
         DC       C'333333333333333344444444444444445555555555555555'
         DC       C'666666666666666677777777777777778888888888888888'
         DC       C'9999999999999999AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
         DC       C'CCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE'
         DC       C'FFFFFFFFFFFFFFFF'
NXTHALF  DS       0CL256
         DC       16C'0123456789ABCDEF'
TYPTAB   EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'00000000040404040404180000000404'  00  ==> RR
         DC       X'04040404040404040404040404040404'  10
         DC       X'04040404040404040404040404040404'  20
         DC       X'04040404040404040404040404040404'  30  <== RR
          DC       X'08080808080808080808080808080808'  40  ==> RX
         DC       X'08000000000808080808080808080808'  50
         DC       X'00000000000000080808080808080808'  60
         DC       X'08000000000000000808080808080808'  70  <== RX
         DC       X'1000101C141420202020202020202020'  80
         DC       X'20141410141414142000000010101010   90
         DC       X'00000000000000000000000000000000'  A0
         DC       X'00000000000000000000202000202020'  B0
         DC       X'00000000000000000000000000000000'  C0  ==> SS
         DC       X'000C0C0C0C0C0C0C000000000C0C0C0C'  D0
         DC       X'00000000000000000000000000000000'  E0
         DC       X'0C0C0C0C000000000C0C0C0C0C0C0000'  F0  <== SS
RRTAB    EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'000000000004080C101400000000181C'  00
         DC       X'2024282C3034383C4044484C5054585C'  10
         DC       X'6064686C7074787C8084888C9094989C'  20
         DC       X'A0A4A8ACB0B4B8BCC0C4C8CCD0D4D8DC'  30
RRTAB2   EQU      *
         DC       CL4'SPM '
         DC       CL4'BALR'
         DC       CL4'BCTR'
         DC       CL4'BCR '
         DC       CL4'SSK '
         DC       CL4'ISK '
         DC       CL4'MVCL'
         DC       CL4'CLCL'
         DC       CL4'LPR '
         DC       CL4'LNR '
         DC       CL4'LTR '
         DC       CL4'LCR '
         DC       CL4'NR  '
         DC       CL4'CLR '
         DC       CL4'OR  '
         DC       CL4'XR  '
         DC       CL4'LR  '
         DC       CL4'CR  '
         DC       CL4'AR  '
         DC       CL4'SR  '
         DC       CL4'MR  '
         DC       CL4'DR  '
         DC       CL4'ALR '
         DC       CL4'SLR '
         DC       CL4'LPDR'
         DC       CL4'LNDR'
         DC       CL4'LTDR'
         DC       CL4'LCDR'
         DC       CL4'HDR '
         DC       CL4'LRDR'
         DC       CL4'MXR '
         DC       CL4'MXDR'
         DC       CL4'LDR '
         DC       CL4'CDR '
         DC       CL4'ADR '
         DC       CL4'SDR '
         DC       CL4'MDR '
         DC       CL4'DDR '
         DC       CL4'AWR '
         DC       CL4'SWR '
         DC       CL4'LPER'
         DC       CL4'LNER'
         DC       CL4'LTER'
         DC       CL4'LCER'
         DC       CL4'HER '
         DC       CL4'LRER'
         DC       CL4'AXR '
         DC       CL4'SXR '
          DC       CL4'LER '
         DC       CL4'CER '
         DC       CL4'AER '
         DC       CL4'SER '
         DC       CL4'MER '
         DC       CL4'DER '
         DC       CL4'AUR '
         DC       CL4'SUR '
SSTAB    EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'00000000000000000000000000000000'  C0
         DC       X'000004080C101418000000001C202428'  D0
         DC       X'00000000000000000000000000000000'  EO
         DC       X'2C303438000000003C4044484C500000'  F0
SSTAB2   EQU      *
         DC       CL4'MVN '
         DC       CL4'MVC '
         DC       CL4'MVZ '
         DC       CL4'NC  '
         DC       CL4'CLC '
         DC       CL4'OC  '
         DC       CL4'XC  '
         DC       CL4'TR  '
         DC       CL4'TRT '
         DC       CL4'ED  '
         DC       CL4'EDMK'
         DC       CL4'SRP '
         DC       CL4'MVO '
         DC       CL4'PACK'
         DC       CL4'UNPK'
         DC       CL4'ZAP '
         DC       CL4'CP  '
         DC       CL4'AP  '
         DC       CL4'SP  '
         DC       CL4'MP  '
         DC       CL4'DP  '
RXTAB    EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'0004080C1014181C2024282C30003438'  40
         DC       X'3C0000004044484C5054585C6064686C'  50
         DC       X'7000000000000074787C8084888C9094'  60
         DC       X'98000000000000009CA0A4A8ACB0B4B8'  70
RXTAB2   EQU      *
         DC       CL4'STH '
         DC       CL4'LA  '
         DC       CL4'STC '
         DC       CL4'IC  '
         DC       CL4'EX  '
         DC       CL4'BAL '
         DC       CL4'BCT '
         DC       CL4'BC  '
         DC       CL4'LH  '
         DC       CL4'CH  '
         DC       CL4'AH  '
         DC       CL4'SH  '
         DC       CL4'MH  '
         DC       CL4'CVD '
         DC       CL4'CVB '
         DC       CL4'ST  '
         DC       CL4'N   '
         DC       CL4'CL  '
         DC       CL4'O   '
         DC       CL4'X   '
         DC       CL4'L   '
         DC       CL4'C   '
         DC       CL4'A   '
         DC       CL4'S   '
         DC       CL4'M   '
          DC       CL4'D   '
         DC       CL4'AL  '
         DC       CL4'SL  '
         DC       CL4'STD '
         DC       CL4'MXD '
         DC       CL4'LD  '
         DC       CL4'CD  '
         DC       CL4'AD  '
         DC       CL4'SD  '
         DC       CL4'MD  '
         DC       CL4'DD  '
         DC       CL4'AW  '
         DC       CL4'SW  '
         DC       CL4'STE '
         DC       CL4'LE  '
         DC       CL4'CE  '
         DC       CL4'AE  '
         DC       CL4'SE  '
         DC       CL4'ME  '
         DC       CL4'DE  '
         DC       CL4'AU  '
         DC       CL4'SU  '
STAB     EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'00000400000000000000000000000000'  80
         DC       X'0000000800000000000000000C101418'  90
STAB2    EQU      *
         DC       CL4'SSM '
         DC       CL4'LPSW'
         DC       CL4'TS  '
         DC       CL4'SIO '
         DC       CL4'TIO '
         DC       CL4'HIO '
         DC       CL4'TCH '
SITAB    EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'00000000000400000000000000000000'  80
         DC       X'00080C001014181C0000000000000000'  90
SITAB2   EQU      *
         DC       CL4'WRD '
         DC       CL4'RDD '
         DC       CL4'TM  '
         DC       CL4'MVI '
         DC       CL4'NI  '
         DC       CL4'CLI '
         DC       CL4'OI  '
         DC       CL4'XI  '
RSTAB    EQU      * 0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC       X'0000000000000004080C1014181C2024'  80
         DC       X'28000000000000002C00000000000000'  90
         DC       X'00000000000000000000000000000000'  A0
         DC       X'00000000000000000000303400383C40'  B0
RSTAB2   EQU      *
         DC       CL4'BXH '
         DC       CL4'BXLE'
         DC       CL4'SRL '
         DC       CL4'SLL '
         DC       CL4'SRA '
         DC       CL4'SLA '
         DC       CL4'SRDL'
         DC       CL4'SLDL'
         DC       CL4'SRDA'
         DC       CL4'SLDA'
         DC       CL4'STM '
         DC       CL4'LM  '
         DC       CL4'CS  '
         DC       CL4'CDS '
         DC       CL4'SLA '
          DC       CL4'SRDL'
         DC       CL4'SLDL'
         DC       CL4'SRDA'
         DC       CL4'SLDA'
         DC       CL4'STM '
         DC       CL4'LM  '
         DC       CL4'CLM '
         DC       CL4'STCM'
         DC       CL4'ICM '
         LTORG
PROGEND  EQU      *
         END      DISASS

An example of the disassembler working on itself for 16 bytes starting at
address X'20000' is shown below.

DIS 20000 10
CODE  OPERANDS         MACHINE CODE    M/C REP    LOC
STM   E,C,00C(D)       90ECD00C        &%&<       020000
SR    9,9              1B99            $R         020004
LA    9,FFF(C,0)       419C0FFF        A*|"       020006
LA    9,001(9,0)       41990001        AR A       02000A
ST    D,844(0,C)       50D0C844        &&HD       02000E
END OF DIS ASSEMBLY

C Screenath Chary
Consultant
Federation Insurance Ltd (Australia)    ) Xephon 1987






































