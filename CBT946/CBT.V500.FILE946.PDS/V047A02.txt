Display virtual devices and I/O counts

Whenever there is a problem with a virtual machine, being in a
loop or some other state of disarray, it is handy to be able to
check the status of the virtual devices along with the I/O counts
just to see what is going on within that virtual machine.  The
INDICATE USER command doesn't show which virtual
devices are actually getting the activity - just an overall count.
That doesn't show where they're spending all your CPU cycles!

With this routine, you'll be able to view a user's virtual devices,
I/O counts on each virtual device, and several important device
indicators (documented in the CP Data Areas and Control
Blocks manual), and, by pressing the ENTER key while
viewing the display, you can see the new I/O counts with the
I/O delta on each device.  If you put your cursor on the
particular virtual device, then press PF2, you'll be able to view
the particular VDEVBLOK via the DCP command which you
can then do further analysis on.

I've included a few device types in the DDEV XEDIT code,
but you'll probably need to add a few more for the different
devices at your shop.  The code requires that you have
authority to use the CP LOCATE and CP DCP commands.
Currently, this routine runs on a VM/SP HPO 5 system.

One interesting note is that the method of getting to the
VDEVBLOK as documented in the Data Areas and Control
Block manual isn't correct.  You actually have to take the index
multiplied by the VDEVBLOK size to arrive at the
VDEVBLOK location.  The manual indicates that you just take
the offset in the VCUBLOK plus the VDEVBLOK start
address from the VMBLOK.

The format of the command is DDEV <userid>

Where <userid> is the user you want to view virtual devices
for.  If you omit the <userid>, then your own user-id is
displayed.

DDEV EXEC

ARG user .
if user = '' then user = userid();
PUSH 'MACRO DDEV' user
'set cmstype ht'
'vmfclear';
'XEDIT DDEV DATA A (NOPROF'
'set cmstype rt'
exit 0

DDEV XEDIT

/* Called by:    DDEV     EXEC
   Parms:     REFRESH   =  User hit ENTER on keyboard - just update
                           screen with new I/O counts and show delta.
              VDEVBLOK  =  Do a DCP to show the VDEVBLOK for this user.
              <userid>  =  Get the virtual device info for this user. */
ARG user parm
if parm = 'VDEVBLOK' then do;
  'extract /cursor';
  if cursor.3 > 0 then do;
     ':'cursor.3;                                /* go to that line   */
     'EXTRACT /curline';                     /* get the original line */
     PARSE var curline.3 vad1 ioc 15 . 20 raddr . ;
     say center('VDEVBLOK Display for user' user,79);
     say ''; say center('Virtual Address='vad1,79);
     say '';
     address command 'CP DCP T'raddr'.50';
     'TOP';
     exit 0;
  end;
  'set msgmode on'
  'set msgline on +3'
  'EMSG DDEV: Cursor was not at a valid location'
  'refresh'
  'cp sleep 3 sec'
  'set msgline off'
  'set msgmode off'
  exit 0
end;
if parm = 'REFRESH' then do;
  'msgmode off';
  ':1';
  'extract /size'
  do size.1;
     'EXTRACT /curline';                     /* get the original line */
     PARSE var curline.3 vad1 ioc 15 . 20 raddr . ;
     chan = substr(vad1,1,1);
     cu   = substr(vad1,2,1);
     'DEL 1';
     'UP 1';
     CALL checkdv raddr '0';
     'EXTRACT /curline';                    /* get the updated line   */
     PARSE var curline.3 vad1 ioc1 15 .;
     ioc1 = ioc1 - ioc;                     /* i/o since last visit   */
     if ioc1 = 0 then nop;
     else do;
        ioc1 = '+'||left(ioc1,4);           /* trunc it               */
        'CLOC :15';                         /* put cursor at col 15   */
        'CREP' ioc1;                        /* put difference there   */
     end;
     'DOWN 1';                              /* do the next one        */
  end;
  'TOP';
  exit 0;
end;
else CALL SETUP;                           /* Setup the XEDIT parms   */
/* ---------------- start of offsets in the various blocks -----------*/
vch_off   = 24;          /* vmchstrt offset in the vmblok  x'18'  */
vcu_off   = 28;          /* vmcustrt offset in the vmblok  x'1C'  */
vdv_off   = 32;          /* vmdvstrt offset in the vmblok  x'20'  */
/* -----------------end of offsets area ------------------------------*/
'EXECIO 1 CP (STRING LOC' user
if rc ¬= 0 then do
   'desbuf';
   'qquit';
   say 'DIO: VMBLOK locate failed with rc='rc
   exit rc
end
PARSE PULL . . addr_vmblok
    /*   Let's get VMCHSTRT from the VMBLOK now.     */
  PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vmblok)+24)'.4') WITH ,
                        13 addr_vchstrt '15'x
    /*   Let's get VMCUSTRT from the VMBLOK now.     */
  PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vmblok)+28)'.4') WITH ,
                        13 addr_vcustrt '15'x
    /*   Let's get VMDVSTRT from the VMBLOK now.     */
  PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vmblok)+32)'.4') WITH ,
                        13 addr_vdvstrt '15'x
    /*   Let's loop through VMCHTBL to see what channels there are. */
  do i = 1 to 8;
    PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vmblok)+56+i*4-4)'.4') WITH ,
                        11 vch_offset '15'x
    hold =  substr(vch_offset,5);
    temp1 = substr(vch_offset,1,4);
    if temp1 ¬= 'FFFF' then do;                /* The chan is defined */
         CALL CHECKCH addr_vchstrt temp1;
    end;
    temp1 = substr(vch_offset,5,4);
    if temp1 ¬= 'FFFF' then do;                /* The chan is defined */
         CALL CHECKCH addr_vchstrt temp1;
    end;
  end;
'TOP';
exit 0;                                        /* Process the channel */
CHECKCH: procedure expose addr_vcustrt addr_vdvstrt;
  ARG addr_vchstrt vch_offset; /*Get the information about the channel*/
  PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vchstrt)+X2D(vch_offset))'.4'),
            with   12 chan 13 . '15'x            /*say 'Channel='chan */
  temp2 = X2D(addr_vchstrt)+X2D(vch_offset) + 8;/* dec start of cutbl */
  do i = 1 to 8;
    PARSE VALUE DIAG(8,'DCP' D2X(temp2+i*4-4)'.4') WITH ,
                        11 vcu_offset '15'x
    temp1 = substr(vcu_offset,1,4);
    if temp1 ¬= 'FFFF' then do;                /* The cu   is defined */
         CALL CHECKCU addr_vcustrt temp1;
    end;
    temp1 = substr(vcu_offset,5,4);
    if temp1 ¬= 'FFFF' then do;                /* The cu   is defined */
         CALL CHECKCU addr_vcustrt temp1;
    end;
  end;
return;
/* ------------- Check the control unit ----------------- */
CHECKCU:   procedure expose addr_vdvstrt chan;
  ARG addr_vcustrt vcu_offset;
       /*  Get the information about the control unit */
  PARSE VALUE DIAG(8,'DCP' D2X(X2D(addr_vcustrt)+X2D(vcu_offset))'.4'),
            with   13 cu   14 . '15'x         /*say 'Control unit='cu;*/

  temp2 = X2D(addr_vcustrt)+X2D(vcu_offset) + 8; /*dec start of dvtbl */
  do i = 1 to 8;
    PARSE VALUE DIAG(8,'DCP' D2X(temp2+i*4-4)'.4') WITH ,
                        11 vdv_offset '15'x
    temp1 = substr(vdv_offset,1,4);
    if temp1 ¬= 'FFFF' then do;                /* The dev  is defined */
         CALL CHECKDV addr_vdvstrt temp1;
    end;
    temp1 = substr(vdv_offset,5,4);
    if temp1 ¬= 'FFFF' then do;                /* The dev  is defined */
         CALL CHECKDV addr_vdvstrt temp1;
    end;
  end;
return;
/* ------------- Check the virtual device now ----------- */
CHECKDV:   procedure expose chan cu;
  ARG addr_vdvstrt vdv_offset;
     /*  Get the information about the control unit */
  location = x2d(addr_vdvstrt) + (x2d(vdv_offset) * 8);
  size_loc = location + 16;
  iocnt_locat = location + 40;                             /* x'28'  */
  PARSE VALUE DIAG(8,'DCP' D2X(location)'.F'),
            with   14 dv   15 vdevints 21 vdevtypc 25 vdevstat ,
        27 vdevflag 29 . '15'x ;
  PARSE VALUE DIAG(8,'DCP' D2X(size_loc)'.4'),
            with   15 size 19 . '15'x;
  PARSE VALUE DIAG(8,'DCP' D2X(iocnt_locat)'.4'),
            with   11 iobin  '15'x
  fdev = strip(chan||cu||dv);
  /* ------- Add more device codes as you find necessary   ---------- */
  if      vdevtypc = '2082' then vdevtypc = 'RDR ';
  else if vdevtypc = '1082' then vdevtypc = 'PUN ';
  else if vdevtypc = '1041' then vdevtypc = 'PRT ';
  else if vdevtypc = '0420' then vdevtypc = '3380';
  else if vdevtypc = '0408' then vdevtypc = '3350';
  else if vdevtypc = '4004' then vdevtypc = 'SPEC';
  else if vdevtypc = '4002' then vdevtypc = 'PRNT';
  else if vdevtypc = '0280' then vdevtypc = '3088';
  else if vdevtypc = '8000' then vdevtypc = 'CON ';
  else if vdevtypc = '8040' then vdevtypc = 'LINE';
  if vdevtypc = '3380' | vdevtypc = '3350' then,
       size = right(x2d(size),4);
  else size = ' N/A';
  'I' fdev ,
      '   ' ,
      right(x2d(iobin),6) ,
      '   ' ,
      d2x(location) ,
      '   ' ,
      vdevstat ,
      '   ' ,
      vdevflag ,
      '   ' ,
      size ,
      '   ' ,
      vdevints ,
      '   ' ,
      vdevtypc;
return;
/* -------------------- Setup the display for viewing ----------- */
SETUP:
'SHADOW OFF'
'MSGMODE OFF'
'CASE M I'
'WRAP ON';
'msgline off';
'set reserved 1 H -----------------------   Virtual Device Display',
' -------------
-User:'user
'set reserved 2 H Virt.     I/O      Real     vdev-   vdev-   vdev-','   ,
'vdev-     v'
'set reserved 3 H Addr.    Count     Addr.    stat    flag    size',
'     ints
pe'
'set reserved -2 H' left('',79,'-')
'set reserved -1 H PF2 Show VDEVBLOK  PF10 Forward       PF11 Backward         ,
'P2 Quit'
'cmdline off';
'prefix off';
'scale off';
'curline on +2';
'set tofeof off';
'set enter ignore macro ddev' user 'REFRESH';
'set pf2  MACRO DDEV' user 'VDEVBLOK';
'set pf14 MACRO DDEV' user 'VDEVBLOK';
'set pf10 forward';
'set pf11 backward';
'set pf12 qquit';
'set pf22 forward';
'set pf23 backward';
'set pf24 qquit';
return;

Pat Tierce
Systems Software Specialist
State of Kansas, Department of Administration (USA)       ) Xephon 1990

