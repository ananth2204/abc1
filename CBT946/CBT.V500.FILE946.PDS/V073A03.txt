Matching and merging CMS files

This EXEC compares/merges two CMS files that have keys.
The files have to be sorted in ascending or descending order of
the keys. It has three options - match, unmatch, and merge.
The first file is treated as a master file while the second file is
treated as a transaction file. Both the files can have multiple
records with the same key.

For the MATCH/UNMATCH options, the key for the master
file records is compared with the key for the transaction file
records, and all the records which satisfy the match/unmatch
criteria are written to the output file. Records from the master
file only are written in both cases.

For the MERGE option, if the key is the same, records from
the master file are copied first.

/* REXX to match, unmatch and merge two files */
say center('Type input file name',72)
pull fninp ftinp fminp .
call check_file fninp ftinp fminp
if rc.save ¬=0 then do
   say "Input file doesn't exists-Prog aborted"
   exit
   end
say center('Type Xns file name',72)
pull fnxns ftxns fmxns .
call check_file fnxns ftxns fmxns
if rc.save ¬=0 then do
   say "Xns file doesn't exists-Prog aborted"
   exit
   end
say center('Type Ouput file name',72)
pull fnout ftout fmout .
if fmout='' then fmout='a'
call check_file fnout ftout fmout
if rc.save =0 then do
   say 'Output file exists-Press Enter to erase'
   say '                  -Type "N" to quit'
   pull answer .
   if answer='N' then exit
   else erase fnout ftout fmout
   end
say center('Type "MA"tch "UN"match "ME"rge',72)
pull action .
action=left(action,2)
if index(UNME,action)=0 then action='MA'
say  center('Type D if files are in Descending sorted order',72)
say  center('Press ENTER if files are in Ascending sorted order',72)
pull sortseq .
if sortseq ¬='D' then sortseq='A'
say center('Type key_position_in_a key_position_in_b key_length',72)
pull posinp posxns keylen .
say center('Type "N" if keys are numeric',72)
pull keytype .
status='open'
readinp='yes'
readxns='yes'
records.=0
hivalue=copies('FF'x,keylen)
lovalue=copies('00'x,keylen)
if sortseq='A' then do
   prekinp=lovalue
   prekxns=lovalue
   end
 else do
   prekinp=hivalue
   prekxns=hivalue
   end
input=fninp ftinp fminp
xns=fnxns ftxns fmxns
output=fnout ftout fmout
do forever
 if readinp='yes' then call read_input
 if readxns='yes' then call read_xns
 if sortseq='A' & keyinp=hivalue & keyxns=hivalue then leave
  else if keyinp=lovalue & keyxns=lovalue then leave
 select
  when sortseq ='A' &  keyinp>keyxns 3 ,
       sortseq¬='A' &  keyinp<keyxns  then call inp_g_xns
  when sortseq ='A' &  keyinp<keyxns  3,
       sortseq¬='A' &  keyinp>keyxns  then call inp_l_xns
  otherwise call inp_e_xns
 end
end
dropbuf
finis fninp ftinp fminp
finis fnxns ftxns fmxns
finis fnout ftout fmout
say ''
say records.input 'Records read from' input
say records.xns 'Records read from' xns
say records.output 'Records Written to' output
say ' '
exit
/*     read_input     */
read_input:
 makebuf
 'EXECIO 1 DISKR' fninp ftinp fminp  '(VAR  LINEINP'
 if rc ¬= 0 then do
    readinp='no'
    if sortseq='A'then keyinp=hivalue
      else keyinp=lovalue
    if status='open' then status='close'
    end
  else do
    keyinp=substr(lineinp,posinp,keylen)
    if keytype ¬= 'N' then keyinp=keyinp'*'
    if datatype(keyinp,'W') then do
       if sortseq='A' then keyinp=translate(keyinp,'00'x,' ')
          else keyinp=translate(keyinp,'FF'x,' ')
        end
    select
     when sortseq='A' then do
      if keyinp < prekinp then do
        say Input 'not sorted on ascending key'
        rc.save=91
        signal abort
        end
      end
     otherwise do
      if keyinp > prekinp then do
        say Input 'not sorted on descending key'
        rc.save=91
        signal abort
        end
      end
    end
    records.input=records.input+1
    prekinp=keyinp
    end
return
/*    read_xns        */
read_xns:
makebuf
 'EXECIO 1 DISKR' fnxns ftxns fmxns  '(VAR  LINEXNS'
 if rc ¬= 0 then do
    readxns='no'
    if sortseq='A'then keyxns=hivalue
      else keyxns=lovalue
    if status='open' then status='close'
    end
  else  do
  keyxns=substr(linexns,posxns,keylen)
  if keytype¬='N' then keyxns=keyxns'*'
  select
   when sortseq='A' then do
    if keyxns < prekxns then do
       say Xns 'not sorted on ascending key'
       rc.save=92
       signal abort
       end
     end
   otherwise do
    if keyxns > prekxns then do
       say Xns 'not sorted on descending key'
       rc.save=92
       signal abort
       end
    end
   end
   records.xns=records.xns+1
   prekxns=keyxns
   end
return
/*     inpgxns        */
inp_g_xns:
readinp='no'
readxns='yes'
if action='ME' then call rite_output linexns
return
/*     inplxns        */
inp_l_xns:
if action='UN' then call rite_output lineinp
if action='ME' then call rite_output lineinp
readinp='yes'
readxns='no'
return
/*     inpexns        */
inp_e_xns:
if index('MA ME',action)>0 then call rite_output lineinp
readinp='yes'
readxns='no'
return
/*    rite_output     */
rite_output:
arg lineout
'EXECIO 1 DISKW' fnout ftout fmout '(VAR LINEOUT'
if rc¬=0 then do
   rc.save=rc
   signal abort
   end
records.output=records.output+1
return
/*        abort       */
abort:
if rc.save < 90 then say 'job abandoned because of bad return code'
say 'Return code ' rc.save
exit 999
/*   check_file       */
check_file: procedure expose rc.save
arg fname ftype fmode
set cmstype ht
state fname ftype fmode
rc.save=rc
set cmstype rt
return

Moyeen Ahmed Khan
Systems Analyst
Qatar General Petroleum Corporation (Qatar)                  c QCPC 1992

