Directory maintenance (continued)

This month we continue the article describing a software
package that automates operations to the CP directory, and
reduces the systems programmer's actions to a minimum, while
at the same time doing all the necessary checks to the input
provided by the systems programmer.

/*                            RESETCON                               **
** RESETCON PURGES console spooling and sends output to SCREEN.      **
** CONSOLE IS SPOOLED TO REDUCE OUTPUT TO THE SCREEN, CAUSED BY      **
** AUTOLOGGED USERS. OTHERWISE, THE SCREEN WOULD FILL WITH LOGMSG,   **
** etc AND ONE WOULD HAVE TO CLEAR THE SCREEN, OR THE PROGRAM WOULD  **
** HAVE TO WAIT FOR A MINUTE FOR SCREEN TO CLEAR, BEFORE IT CAN      **
** PROCEED.  */
RESETCON:
'CP SPOOL CON STOP TERM'
'CP SPOOL CON PURGE'
'CLRSCRN'
RETURN
/*                          FORMATTER                                 **
**      ________________________|________________________________     **
**      |          |          |             |          |        |     **
**  FETCHDIREC  READLINE  WRITELINE   REPLACEDIREC  BRINGUP  RESETCON **
**                                                                    **
** FORMATTER IS CALLED BY ADDEND. IT AUTOLOGS THE DISKFORM MACHINE    **
** WHICH FORMATS THE ENTIRE EXTENT BEFORE ADDING NEW USERS. THIS IS   **
** DONE BY THE PROFILE EXEC, WHICH THEN LOGS DISKFORM OFF. THE WHOLE  **
** EXTENT IS ASSIGNED TO DISKFORM AS MDISK 192. THIS INITIAL FORMAT IS**
** NECESSARY BECAUSE THE SPACE ALLOCATED AS A MINI-DISK FOR A NEW USER**
** MAY ALREADY HAVE A STRANGE PROFILE EXEC THAT MAY NOT ALLOW MAINTDIR**
** TO PROCEED. FOR INSTANCE, THE REMAINING PROFILE EXEC MAY CALL SOME **
** APPLICATION PROGRAM WHICH MAY EXPECT A CERTAIN INPUT. THE MDISKS   **
** ARE REFORMATTED FOR USE BY NEW USERS, AFTER ALLOCATION, AS CMS191. **
** TO MAKE CHANGES TO THE PROFILE EXEC, PROCEED AS FOLLOWS:           **
**   NOTE. The 191 disk is MAINT'S 503 disk. You may have a different **
**         virtual address for it.                                    **
**   1. ACCESS 503 D         WHERE D OR ANY FREE LETTER CAN BE USED.  **
**   2. NOW MODIFY PROFILE EXEC FOR DISKFORM                          */
FORMATTER:
ARG BEGINBLK, EXTENT, VOLSER
'CLRSCRN'
SAY 'FORMATTING THE SPACE BEFORE ADDING NEW USERS ...'
SAY
SAY "GETTING DISKFORM'S ORIGINAL DIRECTORY ......"
/* PREPARE VARIABLES FOR USE BY FETCHDIREC AND REPLACEDIREC.          */
USERHOLD = USERID.1            /* RESET AT THE END */
USERID.1 = 'DISKFORM'
DISKFLAG.1 = 'NON'
CALL FETCHDIREC 1
'RENAME' USERID.1 'DIRECT A KEEP = ='
LINENUM = 0
'MAKEBUF'
SAY
SAY "MODIFYING DISKFORM'S DIRECTORY ......"
DO FOREVER
    CALL READLINE 'KEEP', 'DIRECT'
    IF RC ¬= 0 THEN LEAVE
    PARSE VAR LINE MDISK  .
    CALL WRITELINE USERID.1, LINENUM
    IF SPACE(MDISK) = 'MDISK'
        THEN DO
            LINE = 'MDISK 192 FB-512' BEGINBLK EXTENT VOLSER 'MR'
            CALL WRITELINE USERID.1, LINENUM
        END
END
'DROPBUF'
'FINIS KEEP DIRECT A'
'FINIS' USERID.1 'DIRECT A'
CALL REPLACEDIREC 1
'SET CMSTYPE HT'
'DIRECT USER DIRECT A'
'SET CMSTYPE RT'
/* ACTIVATE THE DISKFORM MACHINE .                                    */
'CP SPOOL CON START NOTERM'
'BRINGUP' USERID.1
/* WAIT UNTIL DISKFORM HAS LOGGED OFF.                                */
DO UNTIL (RC ¬= 0)
    'EXECIO 0 CP ( STRING Q' USERID.1
END
CALL RESETCON
/* REINSTALL DISKFORM'S OLD DIRECTORY.                                */
SAY "RETURNING DISKFORM'S MACHINE TO ITS ORIGINAL FORM...."
'RENAME KEEP DIRECT A' USERID.1 '= ='
CALL REPLACEDIREC 1
USERID.1 = USERHOLD              /* SET THE VALUE BACK */
'CLRSCRN'
RETURN
/*     This is the   END  of ADD MODULE  ....................         */
/* This is the START of DELETE MODULE. It extends until the start of  **
**  MODIFY MODULE.                                                    */
/*                           DELUSERS ( Menu )                        **
**                _______________|______________                      **
**                |              |             |                      **
**              DELONE        DELLIST        RETURN                   **
**                                                                    **
** ALL CALLS WILL RETURN HERE, UNLESS A SERIOUS ERROR OCCURS, IN WHICH**
** CASE THEY GO TO ERRMSG. FROM HERE ONE CAN GO UP TO THE MAIN MENU.  */
DELUSERS:
RESPONSE = '*'
DO WHILE (RESPONSE = '*')
    'CLRSCRN'
    SAY
    SAY
    SAY
    SAY '               ======================================'
    SAY '               ==                                  =='
    SAY '               ==  ENTER :     IN   ORDER   TO :   =='
    SAY '               ==  -------   --------------------  =='
    SAY '               ==    S  .... DELETE A SINGLE USER  =='
    SAY '               ==                                  =='
    SAY '               ==    L  .... DELETE LIST OF USERS  =='
    SAY '               ==                                  =='
    SAY '               ==    Q  .... RETURN TO MAIN MENU   =='
    SAY '               ==                                  =='
    SAY '               ======================================'
    PULL RESPONSE
    SELECT
        WHEN (RESPONSE == 'S') THEN CALL DELONE
        WHEN (RESPONSE == 'L') THEN CALL DELLIST
        WHEN (RESPONSE == 'Q') THEN LEAVE
        OTHERWISE RESPONSE = '*'
    END
    IF (RESULT == '*') THEN LEAVE
                       ELSE RESPONSE = '*'
END
RETURN RESPONSE
/*                            DELONE                                  **
**        ______________________|_________________                    **
**        |                                      |                    **
**   GETRESPONSE()                             DELEND                 **
**                                               ||                   **
**                                                                    **
**   DELEND is entered if   S  was selected from the MENU.            **
**  THIS ONLY NEEDS THE USER-ID OF THE PERSON TO BE DELETED. IT CALLS **
** DELEND, WITH COUNT = THE NUMBER OF USER-IDS SET TO 1.              */
DELONE:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE USER-ID TO BE DELETED:'
USERID.1 = GETRESPONSE()
IF USERID.1 == '*' THEN RETURN '*'
COUNT = 1
'CLRSCRN'
FILENAME = ''
CALL DELEND COUNT, FILENAME
RETURN
/*                            DELLIST                                 **
**        _______________________|______________________________      **
**        |                 |                        |         |      **
**   GETRESPONSE()       FINDLIST                 DELEND   WAITLOOP   **
**                                                  ||                **
**                                                                    **
**    DELLIST is entered if   L    was selected from the MENU.        **
**  FILENAME = IS THE NAME OF THE LIST CONTAINING THE USER-IDS        **
**  COUNT = The number of users to be deleted.                        **
**  IT NEEDS THE NAME OF THE FILE THAT CONTAINS THE USER-IDS TO BE    **
** DELETED. IT CALLS FINDLIST TO GET THE USER-IDS. FINDLIST ALSO      **
** RETURNS THE NUMBER OF USERS, WHICH IS PUT IN COUNT. DELEND IS      **
** CALLED TO PROCESS THE OPERATION.                                   */
DELLIST:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE NAME OF THE LIST THAT CONTAINS USER-IDS TO BE DELETED:'
FILENAME = GETRESPONSE()
IF FILENAME == '*' THEN RETURN '*'
'CLRSCRN'
CALL FINDLIST FILENAME
COUNT = RESULT
SELECT
    WHEN COUNT > 0 THEN CALL DELEND COUNT, FILENAME
    WHEN COUNT = 0
        THEN DO
        SAY
        SAY 'THE LIST IS EMPTY ...............'
        CALL WAITLOOP
        END
    OTHERWISE CALL WAITLOOP        /* When COUNT < 0 */
END
RETURN
/*                           DELEND                                   **
**           ___________________|_________________________            **
**           |              |              |             |            **
**       EXISTDIREC      DELDIREC        SUBEND       WAITLOOP        **
**                                                                    **
** IT CALLS                                                           **
**  DELDIREC : TO DELETE USERS FROM DIRECTORY                         **
** IF OPERATION IS SUCCESSFUL, CALLS                                  **
**  UPDATEDIREC : TO BRING NEW DIRECTORY ON LINE (VIA SUBEND).        **
**  UPDATEMAP : TO CREATE A NEW DISKMAP          (VIA SUBEND).        **
** AT THE END, IT PRINTS MESSAGES AS TO THE SUCCESS OF THE OPERATION. **
** IF SOME OF THE USER-IDS IN THE LIST WERE NOT FOUND, IT PRINTS THEM.*/
DELEND:
ARG COUNT, FILENAME
CALL EXISTDIREC
CALL DELDIREC COUNT
RETCODE = RESULT
'CLRSCRN'
IF RETCODE ¬= 2
   THEN CALL SUBEND 1, RETCODE, COUNT, FILENAME, 'DELETED.'
   ELSE CALL SUBEND 2, FILENAME
CALL WAITLOOP
RETURN
/*                         DELDIREC                                   **
**           _________________|____________________                   **
**           |                |                   |                   **
**        READLINE        WRITELINE            ERRMSG                 **
**                                                                    **
** IF CURRENT DIRECTORY IS NOT FOUND, PROGRAM ABORTS. IF FOUND, THE   **
** NEW DIRECTORY IS TEMPORARILY CALLED NEWUSER DIRECT. AT THE END, IF **
** NONE OF THE NAMES ARE FOUND, SO NOTHING IS DELETED FROM THE CURRENT**
** DIRECTORY, THEN ONLY THE TEMPORARY DIRECTORY, THE NEWUSER DIRECT,  **
** IS ERASED. ALSO A CODE IS RETURNED TO DELEND, SO UPDATEDIREC AND   **
** UPDATEMAP ARE NOT CALLED. DELEND WILL PRINT MESSAGES DEPENDING ON  **
** THE CODE RETURNED BY THIS MODULE (via SUBEND).                     */
DELDIREC:
ARG COUNT
SAY
SAY 'DELETING NAME(S) FROM DIRECTORY FILE: USER DIRECT A  ....'
'SET CMSTYPE HT'
'ERASE NEWUSER DIRECT A'
'STATE USER DIRECT A'
RETCODE = RC
'SET CMSTYPE RT'
RC = RETCODE
IF RC ¬= 0 THEN CALL ERRMSG 1, RC, 'USER', 'DIRECT', 'A'
'MAKEBUF'
LINENUM = 0
FLAG. = 0
FOUND = 'FALSE'
STATUS = 'CONTINUE'
/*  The variable STATUS can have one of two values : CONTINUE, STOP.  **
** The directory is read line by line, and scanned for a line starting**
** with USER. Once a USER line is found, the USERID is checked against**
** the list of users to be deleted (variable USERID.I). In case of a  **
** match, all directory statements for that userid are ignored, other-**
** wise, the statements are written to NEWUSER DIRECT. So the new dir-**
** ectory will not contain the statements pertaining to the user-ids  **
** to be deleted. If none of the user-ids to be deleted are found in  **
** the directory, then FOUND will remain FALSE, and will be used in   **
** SUBEND to print a message. If some are found, then FLAG.I will con-**
** tain a  value of  1  for those found, and is again used in SUBEND  **
** to print a message.                                                */
/*.............         START OF THE MAIN LOOP    ....................*/
DO WHILE (STATUS = 'CONTINUE')
    CALL READLINE 'USER', 'DIRECT'     /* read a line from directory */
    IF RESULT ¬= 0                     /* EOF, then stop */
        THEN STATUS = 'STOP'
        ELSE DO                        /* BIG ELSE  */
            PARSE VAR LINE USER USERID .    /* scan the line just read*/
            IF USER = 'USER'           /* does line start with USER ? */
                THEN DO                /* USER LEG */
/* The line read starts with USER. Initialize the variable I to 1, and**
** compare USERID with all USERID.I in the list for a match. The number*
** of userids to be deleted is in COUNT.                              */
                    I = 1
                    DO WHILE (I < COUNT + 1)
                        IF USERID = USERID.I
                          THEN DO
                            FOUND = 'TRUE' /* a match was found */
                            FLAG.I = 1     /* set flag for SUBEND */
                            USER = '*'     /* initialize variable */
/* This loop eliminates all statements for USERID.I, by not writing   **
** them to NEWSUER DIRECT, the new directory. It reads directory till **
** the next USER line is reached.                                     */
                            DO WHILE (USER ¬= 'USER')
                              CALL READLINE 'USER', 'DIRECT'
                              IF RESULT ¬= 0
                                THEN DO
                                  STATUS = 'STOP'
                                  LEAVE         /* to outer loop */
                                END
                                ELSE PARSE VAR LINE USER USERID .
                            END
/*--- This is the end of eliminate loop. Another USER line is reached-*/
                            IF STATUS = 'CONTINUE'
                              THEN I = 1   /* start comparison with 1 */
                              ELSE LEAVE    /* TO MAIN LOOP */
                          END
                          ELSE I = I + 1  /* no match yet */
                    END    /* looking for a match */
/* At this point, either the last line read from the directory starts **
** with USER, and no match was found for the USER-ID in that line, or **
** we have reached the end of th directory. In the latter case STATUS **
** will have the value STOP. In the former case, we must write this   **
** line to NEWUSER DIRECT, and go out to the outer loop.              */
                    IF STATUS = 'CONTINUE'
                        THEN CALL WRITELINE 'NEWUSER', LINENUM
               END                     /* USER LEG */
/* The line read does not begin with USER, so just copy it.  .........*/
               ELSE CALL WRITELINE 'NEWUSER', LINENUM
       END                             /* BIG ELSE */
END
/*.................  END OF THE MAIN LOOP    .........................*/
'FINIS USER DIRECT A'
'FINIS NEWUSER DIRECT A'
'DROPBUF'
IF FOUND = 'FALSE'  /* no matches were found */
    THEN DO
        'ERASE NEWUSER DIRECT A'
        RETURN 2
    END
    ELSE DO
        'ERASE USER DIRECT A'
        'RENAME NEWUSER DIRECT A USER = ='
        DO I = 1 TO COUNT                 /* some matches not found */
            IF FLAG.I  = 0 THEN RETURN 1
        END
        RETURN 0        /* all names matched and are deleted */
    END
/*     This is the   END  of DELETE MODULE   ................         */
/* This is the START of MODIFY MODULE. It extends until the start of  **
**  QUIT .                                                            */
/*                           MODUSERS ( Menu )                        **
**                _______________|______________                      **
**                |              |             |                      **
**              MODONE        MODLIST        RETURN                   **
**                                                                    **
** ALL CALLS WILL RETURN HERE, UNLESS A SERIOUS ERROR OCCURS, IN WHICH**
** CASE THEY GO TO ERRMSG. FORM HERE ONE CAN GO UP TO THE MAIN MENU.  */
MODUSERS:
RESPONSE = '*'
DO WHILE (RESPONSE = '*')
    'CLRSCRN'
    SAY
    SAY
    SAY
    SAY
    SAY '               ======================================'
    SAY '               ==                                  =='
    SAY '               ==  ENTER :     IN   ORDER   TO :   =='
    SAY '               ==  -------   --------------------  =='
    SAY '               ==    S  .... MODIFY A SINGLE USER  =='
    SAY '               ==                                  =='
    SAY '               ==    L  .... MODIFY LIST OF USERS  =='
    SAY '               ==                                  =='
    SAY '               ==    Q  .... RETURN TO MAIN MENU   =='
    SAY '               ==                                  =='
    SAY '               ======================================'
    PULL RESPONSE
    SELECT
        WHEN (RESPONSE == 'S') THEN CALL MODONE
        WHEN (RESPONSE == 'L') THEN CALL MODLIST
        WHEN (RESPONSE == 'Q') THEN LEAVE
        OTHERWISE RESPONSE = '*'
    END
    IF (RESULT == '*') THEN LEAVE
                       ELSE RESPONSE = '*'
END
RETURN RESPONSE
/*                            MODONE                                  **
**        ______________________|_________________                    **
**        |                                      |                    **
**   GETRESPONSE()                             MODEND                 **
**                                               ||                   **
**                                                                    **
**    ADDONE  IS ENTERED IS  S  WAS SELECTED FROM THE MENU. It only   **
** the USER-ID of the person whose directory entry is to be modified. **
**   USERID.1 = THE USERID OF THE PERSON TO BE MODIFIED.              **
**   COUNT    = IS SET TO 1. SEE MODLIST, BELOW.                      */
MODONE:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE USER-ID TO BE MODIFIED:'
USERID.1 = GETRESPONSE()
IF USERID.1 == '*' THEN RETURN '*'
COUNT = 1
'CLRSCRN'
FILENAME = ''
CALL MODEND COUNT, FILENAME
RETURN
/*                            MODLIST                                 **
**        _______________________|______________________________      **
**        |                 |                        |         |      **
**   GETRESPONSE()       FINDLIST                 MODEND   WAITLOOP   **
**                                                  ||                **
**                                                                    **
**    ADDLIST is entered if   L    was selected from the MENU.        **
** IT NEEDS THE FOLLOWING INFORMATION:                                **
**  FILENAME = IS THE NAME OF THE LIST CONTAINING THE USER-IDS        **
**  COUNT    = NUMBER OF USERS ON THE LIST, RETURNED BY FINDLIST      */
MODLIST:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE NAME OF THE LIST THAT CONTAINS USER-IDS TO BE MODIFIED:'
FILENAME = GETRESPONSE()
IF FILENAME == '*' THEN RETURN '*'
'CLRSCRN'
CALL FINDLIST FILENAME
COUNT = RESULT
SELECT
    WHEN COUNT > 0 THEN CALL MODEND COUNT, FILENAME
    WHEN COUNT = 0
        THEN DO
        SAY
        SAY 'THE LIST IS EMPTY ...............'
        CALL WAITLOOP
        END
    OTHERWISE CALL WAITLOOP    /* WHEN COUNT < 0 */
END
RETURN
/*                               MODEND                               **
**      ___________________________|_________________________         **
**      |               |          |          |             |         **
**  EXISTDIREC      GETUSRDIR   MODDIREC   SUBEND       WAITLOOP      **
**                                                                    **
**                                                                    **
**      MODEND IS CALLED BY MODONE, MODLIST.                          **
** ALL MODIFY OPERATIONS ARE PERFORMED BY THIS MODULE, BY CALLING THE **
** REST OF THE SUBMODULES IN MODIFY.                                  **
** AT THE END, IT PRINTS MESSAGES AS TO THE SUCCESS OF THE OPERATION. **
** IF SOME OF THE USER-IDS IN THE LIST WERE NOT FOUND, IT PRINTS THEM.*/
MODEND:
ARG COUNT, FILENAME
CALL EXISTDIREC
CALL GETUSRDIR COUNT
RETCODE = RESULT    /* IF 2, NO ONE IN LIST WAS FOUND IN DIRECTORY */
IF RETCODE ¬= 2 THEN CALL MODDIREC COUNT
'CLRSCRN'
IF RETCODE ¬= 2
    THEN CALL SUBEND 1, RETCODE, COUNT, FILENAME, 'MODIFIED.'
    ELSE CALL SUBEND 2, FILENAME
CALL WAITLOOP
RETURN
/*          GETUSRDIR :   ERASES PREVIOUS FILES OF THE FORM :        **
**    USERID.I DIRECT A. THEN IT CALLS FETCHDIREC TO GET CURRENT     **
** USER'S DIRECTORY ENTRIES.                                         */
GETUSRDIR:
ARG COUNT
SAY
SAY "GETTING USER(S)' DIRECTORY ENTRIES ....."
'SET CMSTYPE HT'
DO I = 1 TO COUNT
    'ERASE' USERID.I 'DIRECT A'
END
'SET CMSTYPE RT'
FLAG. = 0
FOUND = 'FALSE'
CALL FETCHDIREC COUNT
IF FOUND = 'FALSE'      /* NO ONE ON LIST WAS FOUND IN DIRECTORY */
    THEN RETURN 2
    ELSE DO
        DO I = 1 TO COUNT
            IF FLAG.I  = 0 THEN RETURN 1  /* SOME NOT FOUND IN DIRECT */
        END
        RETURN 0    /* ALL IN LIST WERE FOUND IN DIRECTORY */
    END
/* FETCHDIREC RECEIVES THE NUMBER OF USERS IN COUNTER. THE USER-IDS  **
** MUST ALREADY BE IN USERID.I . IT GETS THE DIRECTORIES OF THE USERS**
** FROM THE CP DIRECTORY AND PUTS THEM ON DISK UNDER THE FILENAME AND**
** FILETYPE OF: USERID.I DIRECT A.                                   */
FETCHDIREC:
ARG COUNTER
'MAKEBUF'
STATUS = 'CONTINUE'
USERSFOUND = 0        /* STOP SEARCHING WHEN ALL USERS FOUND */
DO WHILE (STATUS = 'CONTINUE') & (USERSFOUND < COUNTER) /* MAIN LOOP */
    CALL READLINE 'USER', 'DIRECT'
    IF RESULT ¬= 0
        THEN STATUS = 'STOP'
        ELSE DO
/*................START OF THE MAIN LOOP BODY.........................*/
            PARSE VAR LINE USER USERID .
            IF USER = 'USER'
                THEN DO   /* MAJOR LEG */
                    I = 1
                    DO WHILE (I < COUNTER + 1)    /* USER LOOP */
                        IF USERID = USERID.I
                          THEN DO          /* FOUND LEG */
                            FOUND = 'TRUE'
                            FLAG.I = 1
                            USERSFOUND = USERSFOUND + 1
                            USER = '*'
                            LINENUM = 0
                            DO WHILE (USER ¬= 'USER')  /* WRITE */
                              CALL WRITELINE USERID.I, LINENUM
                              CALL READLINE 'USER', 'DIRECT'
                              IF RESULT ¬= 0
                                THEN DO
                                  STATUS = 'STOP'
                                  LEAVE         /* TO USER LOOP */
                                END
                                ELSE PARSE VAR LINE USER USERID .
                            END    /* WRITE */
                            'FINIS' USERID.I 'DIRECT A'
                            IF STATUS = 'CONTINUE'
                              THEN I = 1
                              ELSE LEAVE    /* TO MAIN LOOP */
                          END   /* FOUND LEG */
                          ELSE I = I + 1
                    END   /* USER LOOP */
               END   /* MAJOR LEG */
       END
/*.................  END OF THE MAIN BODY LOOP .......................*/
END                                   /*...  MAIN LOOP ...*/
'FINIS USER DIRECT A'
'DROPBUF'
RETURN
/* SUBMOD : MODDIREC. CALLS EDITUSER TO ALLOW EDITTING OF USER'S     **
** DIRECTORY. THEN CALLS REPLACEDIREC TO INSERT THE NEW DIRECTORY    **
** FOR USER IN THE CP DIRECTORY.                                     **
** IF ERRORS OCCUR, THE ORIGINAL CP DIRECTORY IS LEFT UNCHANGED.     */
MODDIREC:
ARG COUNT
ADDDSKFLG = 'NON'  /* NO ADD IN MDISK STATEMENT FOR ALL USER-IDS     */
MODDSKFLG = 'NON'  /* NO CHANGE IN MDISK STATEMENT FOR ALL USER-IDS  */
DISKFLAG. = 'NON'  /* NO CHANGE IN MDISK STATEMENT FOR EVERY USER-ID */
DO I = 1 TO COUNT
    IF FLAG.I ¬= 0 THEN CALL EDITUSER I
END
'SET CMSTYPE HT'
'ERASE NEWUSER DIRECT A'
'SET CMSTYPE RT'
DO I = 1 TO COUNT + 1
    IF I > COUNT
        THEN SIGNAL SKIPIT
        ELSE IF ((DISKFLAG.I = 'NON') | (DISKFLAG.I = 'DEL'))
                 THEN LEAVE
END
SAY 'MODIFYING DIRECTORY ENTRIES .....'
CALL REPLACEDIREC COUNT
/*....................................................................**
** IF MDISKS ARE DELETED FOR ANY USER, A NEW DISKMAP MUST BE CREATED. **
**....................................................................*/
DO I = 1 TO COUNT
    IF DISKFLAG.I = 'DEL'  /*  MDISKS DELETED, CREATE NEW MAP */
        THEN DO
           'CLRSCRN'
           SAY 'SOME MDISK(S) WERE DELETED. A NEW DISKMAP WILL BE MADE.'
           CALL UPDATEMAP
           LEAVE
        END
END
SKIPIT:
IF ADDDSKFLG = 'ADD' THEN CALL ADDDISK COUNT
IF MODDSKFLG = 'MOD' THEN CALL MODDISK COUNT
RETURN
/* REPLACEDIREC WILL REPLACE THE DIRECTORY FOR USERID.I BY THE CURRENT**
** USERID.I DIRECT A ON DISK (SUPPOSEDLY, MODIFIED ONE). IT WORKS FOR **
** A LIST OF USERS, THE NUMBER IS GIVEN IN COUNTER. THE USER-IDS MUST **
** ALREADY BE IN USERID.I, AND THE DISKFLAG.I FOR A USER MUST BE 'NON'**
** OR 'DEL'. OTHERWISE, REPLACEDIREC WILL LEAVE THE OLD ENTRIES ALONE.*/
REPLACEDIREC:
ARG COUNTER
'MAKEBUF'
LINENUM = 0
STATUS = 'CONTINUE'
DO WHILE (STATUS = 'CONTINUE')      /*.......  MAIN LOOP .....*/
    CALL READLINE 'USER', 'DIRECT'
    IF RESULT ¬= 0
        THEN STATUS = 'STOP'
        ELSE DO
/*................START OF THE MAIN LOOP BODY.........................*/
            PARSE VAR LINE USER USERID .
            IF USER = 'USER'
                THEN DO   /* MAJOR LEG */
                    I = 1
                    DO WHILE (I < COUNTER + 1)    /* USER LOOP */
                        IF (USERID = USERID.I) & ,
                           ((DISKFLAG.I = 'NON') | (DISKFLAG.I = 'DEL'))
                          THEN DO          /* FOUND LEG */
                            CALL INSERT USERID.I, LINENUM
                            IF STATUS = 'CONTINUE'
                              THEN I = 1
                              ELSE LEAVE    /* TO MAIN LOOP */
                          END   /* FOUND LEG */
                          ELSE I = I + 1
                    END   /* USER LOOP */
                    IF STATUS = 'CONTINUE'
                        THEN CALL WRITELINE 'NEWUSER', LINENUM
               END   /* MAJOR LEG */
               ELSE CALL WRITELINE 'NEWUSER', LINENUM
       END
/*.................  END OF THE MAIN BODY LOOP .......................*/
END                                   /*...  MAIN LOOP ...*/
'FINIS USER DIRECT A'
'FINIS NEWUSER DIRECT A'
'ERASE USER DIRECT A'
'RENAME NEWUSER DIRECT A USER = ='
'DROPBUF'
RETURN
/* EDITUSER BRINGS UP USERS' DIRECTORIES ONE BY, IN XEDIT ENVIRONMENT.**
** IT FIRST COPIES USERID.I DIRECT A TO USERID.I OLD A. THIS IS IN    **
** CASE IMPROPER CHANGES WERE MADE TO A USER'S DIRECTORY, IT CAN      **
** RECOVER THE OLD DIRECTORY AND REPEAT THE PROCESS UNTIL THE PROPER  **
** MODIFICATIONS (OR NO MODIFICATIONS) ARE MADE.                      **
** IF ANY CHANGES ARE MADE, DISKFLAG.I IS SET = 1, SO SUBMOD MODDISK  **
** WILL BE CALLED BY MODDIREC TO TAKE CARE OF THESE USER-IDS, AFTER   **
** THE ONES WITHOUT CHANGE TO THEIR MDISKS HAVE BEEN TAKEN CARE OF.   **
**====================================================================*/
EDITUSER:
ARG I
'MAKEBUF'
USER = USERID.I
OLDCOUNT.I = 0
DO FOREVER
   CALL READLINE USERID.I, 'DIRECT'
   IF RC ¬= 0 THEN LEAVE
   PARSE VAR LINE MDISK DADRS . DSTART DSIZE DVOLUME .
   IF SPACE(MDISK) == 'MDISK'
     THEN DO
       OLDCOUNT.I = OLDCOUNT.I + 1
       ROW = OLDCOUNT.I
       OADRS.USER.ROW = DADRS
       OSTART.USER.ROW = DSTART
       OSIZE.USER.ROW = DSIZE
       OVOLUME.USER.ROW = DVOLUME
     END
END
'FINIS' USERID.I 'DIRECT A'
'COPY' USERID.I 'DIRECT A =' OLD '= ( REPLACE'  /* TEMPORARY */
RETCODE = 1
DO WHILE ( RETCODE ¬= 0 )
    'XEDIT' USERID.I 'DIRECT A'
    'CLRSCRN'
    NEWCOUNT.I = 0
    DO FOREVER            /* COUNT NEW MDISKS */
      CALL READLINE USERID.I, 'DIRECT'
      IF RC ¬= 0 THEN LEAVE
      PARSE VAR LINE MDISK DADRS . DSTART DSIZE DVOLUME .
      IF SPACE(MDISK) == 'MDISK'
         THEN DO
            NEWCOUNT.I = NEWCOUNT.I + 1
            ROW = NEWCOUNT.I
            NADRS.USER.ROW = DADRS
            NSTART.USER.ROW = DSTART
            NSIZE.USER.ROW = DSIZE
            NVOLUME.USER.ROW = DVOLUME
         END
    END
    'FINIS' USERID.I 'DIRECT A'
    CALL COMPAREDISK I
    RETCODE = RESULT
    IF RETCODE ¬= 0
        THEN DO
            'COPY' USERID.I 'OLD A = DIRECT = ( REPLACE'
            'CLRSCRN'
            IF RETCODE = 1
                THEN DO
SAY 'Only ONE operation on mdisk statements (per user) is allowed.'
SAY
SAY 'You can either ADD, or else, DELETE , or otherwise MODIFY mdisks.'
SAY
SAY 'MODIFY means changing anything other than the virtual address.'
                END
            ELSE DO
SAY 'Unlike ADD or DELETE, you can only MODIFY ONE mdisk per user.'
                END
SAY
SAY 'THE PREVIOUS ' USERID.I "'S DIRECTORY WILL BE ",
    'RETURNED AFTER THIS SCREEN.'
            CALL WAITLOOP
        END
END
IF DISKFLAG.I = 'ADD' THEN ADDDSKFLG = 'ADD'
IF DISKFLAG.I = 'MOD' THEN MODDSKFLG = 'MOD'
'DROPBUF'
RETURN
/* COMPAREDISK IS CALLED BY EDITUSER. IT CHECKS ON THE APPROPRIATENESS**
** OF CHANGES MADE TO MDISK STATEMENTS.                               **
**    FOR EACH USER, YOU CAN ONLY PERFORM ONE OF THE FOLLOWING :      **
**  1. DELETE ONE OR MORE MDISKS ;                                    **
**  2. ADD ONE OR MORE MDISKS ;                                       **
**  3. MODIFY ONLY ONE MDISK.                                         **
** ANY DEVIATION WILL BE FLAGGED AND MESSAGES WILL BE PRINTED. THEN,  **
** THE OLD USER'S DIRECTORY IS RETURNED IN XEDIT ENVIRONMENT FOR YOU  **
** TO REDO THE CHANGES.                                               **
**    A MODIFY OPERATION ON AN MDISK MEANS, CHANGING ANY FIELD IN THE **
** MDISK STATEMENT, OTHER THAN THE VIRTUAL ADDRESS, SUCH AS 191. NOTE **
** THAT CHANGING THE VIRTUAL ADDRESS IS EQUIVALENT TO DELETING AN     **
** MDISK, AND ADDING A NEW ONE. AS SUCH, IT IS NOT A PERMISSIBLE      **
** OPERATION, AND THEREFORE, YOU WILL BE ASKED TO REDO THE CHANGE.    */
COMPAREDISK:
ARG I
IF OLDCOUNT.I = 0
    THEN DO
        DISKFLAG.I = 'ADD'
        RETURN 0
    END
IF NEWCOUNT.I = 0
    THEN DO
        DISKFLAG.I = 'DEL'
        RETURN 0
    END
STAT = 'FALSE'
ASTAT = 'FALSE'
DSTAT = 'FALSE'
MSTAT = 'FALSE'
USER = USERID.I
MDISK.USER. = 'SAME'
DO O = 1 TO OLDCOUNT.I
    DO N = 1 TO NEWCOUNT.I
        IF OADRS.USER.O = NADRS.USER.N
            THEN DO
                IF (( OSTART.USER.O = NSTART.USER.N ) &  ,
                    ( OSIZE.USER.O = NSIZE.USER.N ) &    ,
                    ( OVOLUME.USER.O = NVOLUME.USER.N ))
                    THEN NOP
                    ELSE DO
                        MSTAT = 'TRUE'
                        MDISK.USER.O = 'MOD'
                    END
                LEAVE
            END
    END
    IF N > NEWCOUNT.I
        THEN DO
            DSTAT = 'TRUE'
            MDISK.USER.O = 'DEL'   /* NOT USED */
        END
END
IF (( DSTAT = 'TRUE' ) & ( MSTAT = 'TRUE' )) THEN RETURN 1
IF (MSTAT = 'TRUE')
    THEN DO
        K = 0
        DO O = 1 TO OLDCOUNT.I
            IF MDISK.USER.O = 'MOD' THEN K = K + 1
        END
    END
IF K > 1 THEN RETURN 2
IF (( DSTAT = 'TRUE' ) | ( MSTAT = 'TRUE' )) THEN STAT = 'TRUE'
DO N = 1 TO NEWCOUNT.I
    DO O = 1 TO OLDCOUNT.I
        IF NADRS.USER.N = OADRS.USER.O THEN LEAVE
    END
    IF O > OLDCOUNT.I
        THEN DO
            ASTAT = 'TRUE'
            MDISK.USER.N = 'ADD'
        END
END
IF (( STAT = 'TRUE' ) & ( ASTAT = 'TRUE' )) THEN RETURN 1
IF ASTAT = 'TRUE' THEN DISKFLAG.I = 'ADD'
    ELSE IF DSTAT = 'TRUE' THEN DISKFLAG.I = 'DEL'
    ELSE IF MSTAT = 'TRUE' THEN DISKFLAG.I = 'MOD'
RETURN 0
/*        INSERT:       THIS MODULE INSERTS THE MODIFIED USER'S       **
** DIRECTORY ENTRIES INTO NEWUSER DIRECT, WHICH IF NO ERROR OCCURS,   **
** WILL BECOME THE CURRENT USER DIRECT, FOR CP. IF ANY ERRORS OCCUR   **
** THE ORIGINAL DIRECTORY REMAINS WITHOUT CHANGE. MESSAGES ARE PRINTED**
** AND PROGRAM ABORTS. IT ERASES USER-IDS DIRECT AND OLD  FILES. THE  **
** FILE USERID.I DIRECT IS MADE BY GETUSRDIR, AND USERID.I OLD   IS   **
** MADE BY EDITUSER.                                                  */
INSERT:
ARG FN, LINENUM
/* IF FILE USERID.I = FN DIRECT WAS BLANKED OUT WHILE EDITING IT, THE **
** EDITOR WILL NOT CHANGE THE LAST SAVED COPY. NO NEED TO CHECK FOR   **
** AN EMPTY FILE. THE MAINTDIR USER MUST KNOW THIS FACT, THOUGH. THE  **
** EDITOR WILL ISSUE DMSXFD559W.                                      */
DO FOREVER
    CALL READLINE FN, 'DIRECT'           /* READ MODIFIED  */
    IF RC ¬= 0 THEN LEAVE                /* USER'S DIRECTORY */
               ELSE CALL WRITELINE 'NEWUSER', LINENUM  /* INSERT */
END                                      /* IN CP DIRECTORY */
USER = '*'   /* NOW DISCARD OLD USER-ID DIRECTORY ENTRIES */
DO WHILE (USER ¬= 'USER')  /* IGNORE */
    CALL READLINE 'USER', 'DIRECT'
       IF RESULT ¬= 0
           THEN DO
              STATUS = 'STOP'
              LEAVE         /* TO USER LOOP IN MODDIREC */
           END
           ELSE PARSE VAR LINE USER USERID .
END    /* IGNORE */
'FINIS' FN 'DIRECT A'
'ERASE' FN 'DIRECT A'
'ERASE' FN 'OLD A'
RETURN
/* ADDDISK . IF MDISKS WERE ADDED TO A USER, THIS MODULE IS INVOKED.  **
** IT FIRST MAKES A NEW ( SMALLER ) LIST OF THOSE USERS WHO RECEIVED  **
** NEW MDISKS. FOR EACH USER, WILL CHECK FOR EXISTENCE OF GAPS IN     **
** DISKMAP. AFTER INSERTING USER IN CP DIRECTORY, CREATES A NEW MAP   **
** BEFORE STARTING TO WORK ON THE USER IN THE LIST.                   */
ADDDISK:
ARG COUNT
CNT = 0
DO I = 1 TO COUNT
    IF DISKFLAG.I = 'ADD'
        THEN DO
            CNT = CNT + 1
            USER.CNT = USERID.I
            NEWCNT.CNT = NEWCOUNT.I
        END
END
DO J = 1 TO CNT       /* OUTER LARGE LOOP */
    'CLRSCRN'
    SAY 'WORKING ON : ' USER.J
    MAPFLAG = 0
    USER = USER.J
    DO K = 1 TO NEWCNT.J    /* CHECK LOOP */
        IF MDISK.USER.K = 'ADD'
            THEN DO  /* EQUAL */
              SAY 'CHECKING ON: ' NADRS.USER.K NSTART.USER.K ,
                  NSIZE.USER.K NVOLUME.USER.K
              CALL CHECKMAP NVOLUME.USER.K, NSIZE.USER.K, NSTART.USER.K
              IF MAPFLAG ¬= 0
                   THEN DO
                      SAY
                      SAY 'USER ' USER.J 'WILL NOT BE MODIFIED.'
                      CALL LOGERROR 8, USER.J
                      LEAVE
                   END
            END   /* EQUAL */
    END      /* CHECK LOOP */
    IF MAPFLAG = 0 THEN CALL SUBDISK USER.J, 'DIRECT'
    'ERASE' USER.J 'DIRECT A'
    'ERASE' USER.J 'OLD A'
END          /* OUTER LARGE LOOP */
RETURN
/* MODDISK IS CALLED TO MOVE A USER'S DISK                            **
** DSKMOVER MACHINE DOES THE ACTUAL COPYING AND MOVING DISKS. THE EXEC**
** ON ITS DISK 191 IS MOVEDISK, AND IS CALLED BY ITS PROFILE EXEC.    **
** TO MAKE CHANGES TO THESE PROGRAMS, PROCEED AS FOLLOWS.             **
**   NOTE. The 191 disk is MAINT'S 502 disk. You may have a different **
**         virtual address for it.                                    **
**   1. ACCESS 502 D         WHERE D OR ANY FREE LETTER CAN BE USED.  **
**   2. NOW MODIFY MOVEDISK EXEC, OR PROFILE EXEC.                    */
MODDISK:
ARG COUNT
/* ALL USERS WHOSE DISKS WERE MODIFIED ARE PUT IN A NEW SMALLER LIST  */
CNT = 0
DO I = 1 TO COUNT
    IF DISKFLAG.I = 'MOD'
        THEN DO
            CNT = CNT + 1
            USER.CNT = USERID.I
            NEWCNT.CNT = NEWCOUNT.I
            OLDCNT.CNT = OLDCOUNT.I
        END
END
/* PREPARE VARIABLES FOR USE BY FETCHDIREC AND REPLACEDIREC.          */
USERHOLD = USERID.1            /* RESET AT THE END OF LOOP */
USERID.1 = 'DSKMOVER'
DISKFLAG.1 = 'NON'
/* THIS IS THE START OF THE MAIN LOOP, REPEATED FOR EVERY USER IN LIST*/
DO J = 1 TO CNT       /* OUTER LARGE LOOP */
    'CLRSCRN'
    SAY 'WORKING ON : ' USER.J
    USER = USER.J
/* THE OLD USER'S MDISK STATEMENT, BEFORE MODIFICATION, IS PREPARED   **
** IN THE VARIABLE OLDDISK, TO BE GIVEN TO DSKMOVER TO COPY FROM IT.  **
** ON THE OTHER HAND, THE NEW MDISK STATEMENT IS GIVEN TO DSKMOVER IN **
** THE VARIABLE NEWDISK, TO COPY ONTO IT.                             */
    DO K = 1 TO OLDCNT.J
        IF MDISK.USER.K = 'MOD'
            THEN DO
                OLDDISK = 'MDISK 193 FB-512' OSTART.USER.K ,
                          OSIZE.USER.K OVOLUME.USER.K 'MR'
                NEWDISK = 'MDISK 194 FB-512' NSTART.USER.K ,
                          NSIZE.USER.K NVOLUME.USER.K 'MR'
                LEAVE
            END
    END
This article will be continued next month.

Zorabi Honargohar
Professor and System Administrator
Emporia State University

