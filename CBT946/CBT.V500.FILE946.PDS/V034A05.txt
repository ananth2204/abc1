Find character string

We are a VM/VSE shop currently in the middle of separating our
production system completely from our test system.  This is a long
and cumbersome process involving scanning through a lot of JCL,
directory lists of source programs and object programs, etc - all in
order to ensure that  nothing is forgotten or missed.

The following EXEC has been an invaluable tool in the process of
splitting our systems.  The EXEC is called FINDCHAR and is
used (as the name indicates) to find occurrences of characters.

Source data (the strings to be searched for) may be specified to
FINDCHAR in two ways:

1   As input strings from the terminal prompted by EXEC

2   Contained as strings in a CMS file.

Both ways follow the syntactic rules of the XEDIT locate
command, ie you may specify one string per line or you may
combine strings using logical 'and', 'or' and 'not'.

All strings must be prefixed with a delimiter; default is a slash (/).
In case the string contains trailing blanks, or if multiple strings are
specified on a line, the slash must also be used as a trailing
delimiter.

In case you would like to search for slashes you just have to use
some other special character as a delimiter around the slash, eg '//'
will search for two slashes.

The following examples show some of the possibilities:

     /STRING OF/
     /DATA
     /PGM=/ | /PROC=/
     /DLBL/ & /VSAM/
     /EXEC/ &¬/PROC/
     '//'

Target files (the file(s) to be searched) may be specified to
FINDCHAR in two ways:

1   In the usual CMS form:

      filename < filetype < filetype < filemode > >

    with the extension that filemode may also be specified as
multiple filemodes separated by commas, eg. * JCL A,B,C,
which will search any * JCL files on the A, B and C disk.

2   As a CMS EXEC file, as produced by the LISTFILE
command with the '(EXEC' option.  This gives you the
opportunity to choose several, but not all, filenames or
filetypes.

You can also specify 'not' as a parameter to FINDCHAR.  This
reverses the process in the sense that FINDCHAR shows you
source data that was not found in any of the target files.  This
facility has also proved its usefulness several times.  There are
others, to determine which source programs are no longer used eg
production JCL, or to determine those object programs for which
the source does not exist.

FINDCHAR consists of an EXEC and two XEDIT macros called
FINDCHAR and FINDNOT.

Output from FINDCHAR is placed in a CMS file 'FINDCHAR
RESULT A' showing the name of the target file, linenumber and
contents of the line where a match is found, for every match.

FINDCHAR EXEC

/********************************************************************/
/** FINDCHAR : Use this exec to search for one or more character-  **/
/**            strings in one or more files placed at one or more  **/
/**            disks.                                              **/
trace off;
arg call_arg;
select;
  when(call_arg = '?') then do;
    vmfclear
    say 'This exec is used to search for one or more character strings';
    say 'in one or more files placed at one or more disks';
    say
    say 'Please start up the exec and you will be guided through.';
    say
    say 'If you call the exec with the parameter 'NOT' you will get a'
    say 'List of all locate_strings which were not found in any of the'
    say 'specified members.'
    say
    say 'Would you like to start the exec now (y/n) ? ';
    pull svar;
    if svar = 'N' then signal exit;
    end;
  when(call_arg = 'NOT') then do;
     show = 'notfound'                          /* set up var 'show' */
     head_line = 'with the NOT parameter'
     end;
  when(call_arg = '') then do;
     show = 'found'                             /* set up var 'show' */
     head_line = 'with no parameter'
     end;
  otherwise
     say 'invalid parameter'
     signal exit;
  end; /* end select */
execute:
/* housekeeping */
set emsg off
vmclear
/* start to guide user */
say 'You have now entered the FINDCHAR exec 'head_line ||'.'
say
say 'At any question you may enter <EOJ> to leave the exec.'
choice1:
say
say 'make your choice:'
say '               1) To enter one or more strings to search for'
say '               2) To use an input file containing strings to'
say '                  search for'
say
say '                  The strings must be entered in locate format'
say '                  (e.g   /hello you/             line 1'
say '                         /who are you            line 2'
say '                         /names/                 line 3'
say '                         /names/ | /goodbye/     line 4)'
say
say 'NB: You also get the possibility to call the exec with the '
say '    parameter ''NOT''. Enter <FINDCHAR ?> for more information'
say
say 'Enter <1> or <2>'
say
pull choice
select;
  when choice = 1   then call choice2
  when choice = 2   then call choice3
  when choice = 'EOJ' then signal exit
  otherwise  /* wrong answer */
     vmfclear
     say 'The answer was wrong'
     signal choice1
end;
choice4:
vmfclear
say 'The result from the search is placed in the file :'
say 'FINDCHAR RESULT A.'
say
say 'Do you want to append the result of this search to the current '
say 'result file (Y/N) ?'
pull answer;
select;
  when answer = 'N' then erase findchar result a
  when choice = 'EOJ' then signal exit
  otherwise; /* do not delete existing file */
end;
/*** Get file id                          ***/
getfileid:
vmclear
say 'Enter generic file_id:'
say 'e.g. : pog* jcl c'
say 'e.g. : pog* * *'
say 'e.g. : p* jcl a,b,c   to search at disk a b and c'
say 'or   : CMS            to use your own <cms exec a>'
say
say 'Remember that you have to re-access the disk(s) if changes are
made'
say 'since last access.'
say
say 'At this point you can also enter the following two comands:'
say '   q disk'
say '   acc <cuu> mode'
say 'by just entering the commands now'
say
pull fn ft fm
/*** check input                          ***/
select;
  when(abbrev('QUERY',fn,1) = 1) then do;      /* query command  */
    vmfclear
    fn || ' ' || ft
    say
    say 'press <enter>'
    pull dummy
    signal getfileid
    end;
  when (abbrev('ACCESS',fn,3) = 1) then do;    /* access command  */
    fn || ' ' || ft || ' ' fm
    signal getfileid
    end;
  when (fn = 'CMS') then do;                   /* own exec file */
    cms_exec = 'yes'
    end;
  when (fn = 'EOJ' | fn = '') then signal exit
  otherwise
    if ft = '' then
      ft = '*';
    if fm = '' then
      fm = 'A';
    length = length(fm)
    do index=1 until index=length
      modetab.index = substr(fm,index,1)
      end;
    listfile  fn  ft modetab.1 '(exec)'
    do index = 2 to length
      if modetab.index ¬= ',' then do;
        input = fn || ' ' || ft || ' ' || modetab.index || ' '
        'Listfile ' || input ||'(append)'
        end;
      end;
 end;
/* create headline(s) */
'execio 1 diskw findchar result a (string ',
        'Searching started the ' date(e) time()
'execio 1 diskw findchar result a (string'
'execio 1 diskw findchar result a (string' copies('=',70)
'execio * diskr findchar data a   (finis fifo'
'execio 1 diskw findchar result a (string '||'*'
'execio 1 diskw findchar result a (string ',
        'Search criteria was:'
'execio 1 diskw findchar result a (string'
 queue ''
'execio * diskw findchar result a (finis fifo'
'execio 1 diskw findchar result a (string '
'execio 1 diskw findchar result a (string ',
        'Generic fileid was: ' fn ft fm
vmfclear
say 'Search has begun'
select;
  when (show = 'found') then do;            /* show lines where found */
    'execio * diskr cms exec a (finis fifo'
    do forever;
      if queued() <=0 then leave;                          /* the end */
      pull . . fn ft fm                 /* get next file to search in */
      if fn = 'FINDCHAR' & ft = 'DATA' then nop;
      else 'xedit' fn ft fm '(profile findchar'             /* search */
      end;
    end;
  when (show = 'notfound') then do;         /* show strings not found */
    'execio 1 diskw findchar result a (string '    /* write headlines */
    'execio 1 diskw findchar result a (string ',
            'Following character string(s) not found in any member:'
    'execio 1 diskw findchar result a (string'
    line_no = 1;
    'execio 1 diskr findchar data a 'line_no' (var CURR_STRING'
    do while (rc = 0)                  /* continue while more strings */
       char_found = 'no'
      'execio 1 diskr cms exec a'
      do while (rc=0)                    /* continue while more files */
        pull . . fn ft fm               /* get next file to search in */
        if fn = 'FINDCHAR' & ft = 'DATA' then nop;
        else do;
          push curr_string;
          'xedit'  fn ft fm '(profile findnot'              /* search */
          end;
        if rc=0 then char_found = 'yes'
        'execio 1 diskr cms exec a'
        end;                                          /* end do_while */
       if char_found = 'no' then do;
         'execio 1 diskw findchar result a (string 'curr_string
         end;
       finis cms exec a
       line_no = line_no +1;
      'execio 1 diskr findchar data a 'line_no' (var CURR_STRING'
      end;                                            /* end do_while */
   end;                                                   /* end when */
otherwise;
end;                                                    /* end select */
                                                          /* clean up */
if cms_exec ¬= 'yes' then erase cms exec a       /* not own exec file */
finis findchar data a
erase findchar data a
set emsg on
finis findchar result a
xedit findchar result a
exit:
 say 'Goodbye for now'
 exit
/** procedure choice2                                      **/
choice2: procedure;
erase findchar data a
vmfclear
say 'Please enter one or more strings to search for'
say
say 'The rules follow the xedit locate command'
say 'e.g. : /hello'
say 'e.g. : /are you there/'
say 'e.g. : / hello/ &¬ /you are/'
say 'e.g. : /this/ &¬ /is a/ | /little harder/'
say
say 'When finished just press <enter>'
say
say 'Current strings to be searched for:'
say
pull input
if input = 'EOJ' then signal exit
do until input = ''
   'execio 1 diskw findchar data a (string' input
   pull input
   if input = 'EOJ' then signal exit;
end;
return;
/** end procedure choice2                                 **/
/** procedure choice3                                     **/
choice3: procedure;
vmfclear
say 'Please enter file-id for input file in the format:'
say '<filename> <filetype> <filemode>, it must not be FINDCHAR DATA A'
say
pull fn ft fm
if fn = 'eoj' then signal exit
state fn ft fm
if rc>0 then do;
   say 'Wrong file-id'
   say 'Enter new id'
   pull fn ft fm
   if fn = 'EOJ' then signal exit
   state fn ft fm
   end;
'copy '||fn ft fm||' findchar data a (rec v trunc)'
return;
/** end procedure choice 3                                 **/
FINDCHAR XEDIT
/* ******************************************************** */
/* This macro is called from the FINDCHAR exec.             */
trace off;
/* numfil = current number of files to search in            */
/* nosearch = number of lines to be searched for            */
/* charstr = current string to locate                       */
'makebuf'
header=0
numfil = queued()
'command set linend off'
'command set wrap off'
'command set case mixed ignore'
'execio * diskr findchar data a (finis fifo'
nosearch = queued() - numfil
do i=nosearch to 1 by -1
pull charstr
'command top'
'command locate 'charstr
 do while rc=0
    if rc = 0 then
    do;
     if header=0 then call whead;
     command 'extract /curline/line'
     line.1 = right(line.1,4)
     'execio 1 diskw findchar result a (string' line.1 ||:'||curline.3
    end;
 'command locate 'charstr
 end;
end;
'dropbuf'
'qq'
exit
whead: procedure expose header;
 header=1
'execio 1 diskw findchar result a (string'
'extract /fn/ft/fm'
'execio 1 diskw findchar result a (string ',
        'following lines found in 'fname.1 ftype.1 fmode.1
'execio 1 diskw findchar result a (string' copies('-',70)
return;
FINDNOT XEDIT
/* ******************************************************** */
/* This macro is called from the FINDCHAR exec.             */
trace off;
pull charstr
'command set linend off'
'command set wrap off'
'command set case mixed ignore'
'command locate 'charstr
'quit' rc
Michael Olsen and Steen Spuur Hansen
Systems Programmers
Texaco A/S (Denmark)   ) Xephon 1989



