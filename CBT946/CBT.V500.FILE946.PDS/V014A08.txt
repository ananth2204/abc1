 A DOS $JOBEXIT driver for CMS

A DOS or POWER job exit is a fairly straightforward program to create.  However,
it is infinitely more difficult to test because of its hierarchy within the DOS
system itself.  For this reason, we created a program under CMS which can be
used to test a DOS $JOBEXIT routine or, if modified, a POWER job exit routine.
This CMS exit driver, referred to as 'DOSX', can eliminate numerous DOS IPLs
required for testing.  It can also unveil errors in logic which could cripple a
production DOS environment if left undetected.

The DOSX requirements are simple:  it requires that the DOS $JOBEXIT text be
available in CMS.  This usually requires the source code for $JOBEXIT to be
assembled in CMS.  That should not present any major problems as long as you are
not delving too deeply into DOS internals within your exit routine.  It also
requires that any JCL you wish to test will be available on CMS.

The simulation function can be invoked by entering the command, 'DOSX FILENAME
FILETYPE (FILEMODE)'.  The file referred to here is an 80-byte file containing
the DOS job control and/or data to be tested.

DOSX reads each record in the input file, then determines the validity of the
statement and builds a DOS JCL vector table as required by the DOS exit.  If a
statement is found to be invalid, it is displayed upon the console followed by
the phrase, 'invalid statement'.  All valid job control is passed to the
$JOBEXIT routine with proper linkage conventions all set up.

Upon return from $JOBEXIT, the user's return code is checked.  If it is zero,
the statement is written to an output file, which has the same filename as the
input file.  The output filetype is '$JOBX'.  Comments are displayed on the
console after passing through the $JOBEXIT routine.  If the return code is other
than zero, the statement is displayed on the console and no further action is
taken with that statement.  So, in fact, it emulates the process that takes
place with a DOS $JOBEXIT in a native DOS system.

As an additional service, DOSX verifies that there have been no changes beyond
column 71 of the JCL buffer.  It further verifies that the DOS JCL vector table
has not been changed, and that the JCL operation code has not been modified.

Program exception conditions within the $JOBEXIT routine will be handled by CMS.
Therefore, any coding errors that cause an abend can be traced through normal
CMS mechanisms.  The $JOBEXIT program is loaded just below the DOSX driver in
CMS user storage.  This means that if the DOSX module ends at address 20A18,
that $JOBEXIT loads at address 20A18.

When processing has completed, the output file will contain all the DOS job
control and data that would have been passed to the job control manager.  Any
modifications made within $JOBEXIT will show up in the output file.

There are two DOS $JOBEXIT restrictions that are not verified by the DOSX
driver.  They are as follows:

1    Re-entrant code is not checked.
2    Execution of I/O and/or SVCs are not checked.

With modification, DOSX could be made to check for re-entrant code by forcing
$JOBEXIT to be loaded into storage only once.  As it is, using the OS link macro
to load $JOBEXIT causes the routine to be loaded continuously for each job
control statement.

There is probably room for improvement in the DOSX driver;  however, as it
stands now it can be extremely useful in creating error-free DOS job exit
routines.  DOSX can give the systems programmer more confidence in coding a
useful DOS job exit, which in some cases might just go uncoded.

DOSX     CSECT
*-------------------------------------------------------------------*
 * THIS PROGRAM WILL LOAD A DOS JCL EXIT TEXT INTO STORAGE AND       *
* DRIVE IT WITH JCL.  ITS PURPOSE IS TO TEST MOST OF THE FUNCTIONS  *
* OF THE USER'S DOS EXIT BEFORE IMPLEMENTING THE EXIT INTO A LIVE   *
* DOS ENVIRONMENT.  THE PROGRAM IS SET UP AS FOLLOWS:               *
*                                                                   *
* UPON ENTRY TO $JOBEXIT:                                           *
*              R0:  SYSTEM ID 'SDOS'.                               *
*              R1:  PARTITION COMMUNICATIONS REGION. (BG)           *
*              R2:  SYSTEM COMMUNICATIONS REGION.                   *
*              R3:  JCL VECTOR TABLE.                               *
*              R4:  CURRENT JCL STATEMENT BUFFER ADDRESS.(120 BYTES)*
* UPON EXIT FROM $JOBEXIT:                                          *
*              R15: A ZERO RETURN CODE IF THE JCL STATEMENT IS TO   *
*                   BE ACCEPTED AS IS.                              *
*                   A NON-ZERO RETURN CODE, CAUSES THE JCL          *
*                   STATEMENT TO BE DISPLAYED AND THEN IGNORED.     *  * THIS
PROGRAM WILL READ DOS JCL FROM A SPECIFIED FILE AND PASS IT  *
* ONE STATEMENT AT A TIME TO THE DOS EXIT PROGRAM.  THIS PROGRAM    *
* WILL SIMULATE THE PROCESSES OF THE DOS JOB CONTROL ROUTINE IN     *
* PASSING CONTROL TO THE DOS EXIT.  THE JCL STATEMENT BUFFER WILL   *
* BE PROVIDED, ALONG WITH ALL THE REGISTER CONVENTIONS OF DOS       *
* JOB CONTROL.  THE JCL VECTOR TABLE WILL ALSO BE PROVIDED.  THIS   *
* PROGRAM WILL PRODUCE THE RESULTS OF JCL EXIT PROCESSING BY        *
* CREATING A FILE OF THE OUTPUT JCL.  THE OUTPUT FILE WILL HAVE THE *
* FILENAME OF THE INPUT FILE PROVIDED BY THE USER, AND A FILETYPE   *
* OF $JCLX.  THIS PROGRAM WILL DETECT MODIFICATIONS TO THE JCL      *
* VECTOR TABLE AND FLAG SUCH VIOLATIONS.  THIS PROGRAM WILL ALSO    *
* DETECT ATTEMPTED MODIFICATIONS TO THE JCL OPERATION FIELD, AND    *
* FLAG THOSE VIOLATIONS.  ANY ATTEMPTS TO MODIFY STORAGE OUTSIDE    *
* OF ITS OWN BOUNDARIES OR ANY ABNORMAL CODE WILL BE HANDLED BY CMS *
* AS NORMAL.  THE $JOBEXIT WILL BE LOADED INTO USER STORAGE AT      *
* LOCATION JUST BELOW THIS PROGRAM.                                 *
*                  THIS CAN BE USED AS A REFERENCE POINT FOR ANY    *
* PROGRAMMING ABENDS.  THIS PROGRAM, WHICH DRIVES $JOBEXIT, IS      *
* LOADED AT 20000 IN CMS USER PROGRAM STORAGE.                      *
*                                                                   *
*          ===== FORMAT FOR EXECUTION IS AS FOLLOWS: =====          *
* DOSX      FN FT <FM>                                              *
*           WHERE: FN IS THE FILENAME CONTAINING THE INPUT JCL.     *
*                  FT IS THE FILETYPE CONTAINING THE INPUT JCL.     *
*                  FM IS THE FILEMODE CONTAINING THE INPUT JCL.     *
*                     DEFAULT FM IS THE CMS SEARCH CHAIN.           *
*                                                                   *
* THE DOS JCL EXIT ROUTINE MUST BE AVAILABLE IN TEXT FORM WITH A    *
* FILENAME OF $JOBEXIT.                                             *
*********************************************************************
*                        REGISTER INDEX                             *
*        R1:  INPUT PLIST; DOS PARTITION COMM REGION                *
*        R2:  POINTER TO SYSTEM COMMUNICATION REGION                *
*        R3:  POINTER TO DOS JCL VECTOR TABLE                       *
*        R4:  POINTER TO DOS JCL BUFFER ADDRESS                     *
*        R5:  POINTER TO INPUT DOS JCL FID                          *
*        R6:  POINTER TO OUTPUT DOS JCL FID                         *
*        R7:  USED TO SCAN ACROSS JCL STATEMENT                     *
*        R8:  BAL REG                                               *
*        R9:  USED AS BCT REGISTER                                  *
*       R10:  BCT REGISTER                                          *
*       R11:  JCL OPCODE VALIDITY TABLE                             *
*       R12:  BASE REGISTER.                                        *
*       R14:  RETURN REGISTER.                                      *
*                        RETURN CODES                               *
*        0:   SUCCESSFUL FUNCTION.                                  *
*        5:   INPUT PARAMETER ERROR.                                *
*       10:   ERROR LOCATING DOS JCL INPUT FILE.                    *
*       15:   ERROR CREATING DOS JCL OUTPUT FILE                    *
*       20:   ERROR READING DOS JCL INPUT FILE.                     *
 *       25:   USER CHANGED JCL OPERATION FIELD.                     *
*       30:   USER CHANGED VECTOR TABLE.                            *
*       35:   USER CHANGED JCL BUFFER BEYOND COL 71.                *
*    ?????:   FSSTATE; FSERASE; FSREAD; FSWRITE ERROR.              *
*                                                                   *
*********************************************************************
         PRINT NOGEN
         REGEQU
         USING NUCON,0
         USING *,R12
         LR    R12,R15       LOAD BASE WITH CMS ENTRY ADDR
         ST    R14,SAVE14    SAVE RETURN REG
         ST    R1,SAVE01     SAVE PLIST POINTER
* SETUP
         L     R1,ABGCOM     SET UP PARTITION COMM REGION
         MVC   PARTREG(115),0(R1) MOVE IN CMS DOS COMREG
         MVI   PARTREG+47,X'00' NON-BG INDICATOR
         LA    R3,JCLVECT    POINT TO DOS JCL VECTOR TABLE
         LA    R4,JCLBUFF    SET UP JCL INPUT BUFFER POINTER
         LA    R5,INFID      POINT TO INPUT FILEID
         LA    R6,OUTFID     SET UP OUTPUT JCL FILEID
* END SETUP
         L     R1,SAVE01
         TM    8(R1),X'FF'   TEST FOR FIENAME
         BO    PARMERR       ERROR
         MVC   INFN,8(R1)    SAVE INPUT JCL FILENAME
         MVC   OUTFN,8(R1)   SAVE INPUT JCL FILENAME
         TM    16(R1),X'FF'  TEST FOR FILETYPE
         BO    PARMERR       ERROR
         MVC   INFT,16(R1)   SAVE INPUT JCL FILETYPE
         TM    24(R1),X'FF'  TEST FOR FILEMODE
         BO    DEFAULT       TAKE CMS SEARCH CHAIN FILEMODE
         MVC   INFM,24(R1)   SAVE INPUT JCL FILEMODE
         B     INIT          GO PROCESS JCL
DEFAULT  LA    R5,INFID      POINT TO INPUT FILEID
         FSSTATE (R5),ERROR=INERR
         MVC   INFM,24(R1)   GET CMS SEARCH CHAIN FILEMODE
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**                      READ DOS JCL                                **
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
INIT     EQU   *             DO THINGS
         FSERASE (R6)        ERASE ANY PREVIOUS OUTPUT FILE
READJCL  EQU   *             ROUTINE TO PROCESS THE DOS JCL
         MVI    JCLBUFF,X'40' INIT IN CASE OF VARIABLE LENGTH RCDS
         MVC    JCLBUFF+1(L'JCLBUFF-1),JCLBUFF JCL BUFF
         MVC    JCLVECT,=CL10'          ' INIT JCLVECT TABLE
         MVI    OPTYPE+1,X'00' INIT JCL TYPE FLAG
         FSREAD (R5),BUFFER=(R4),BSIZE=120,ERROR=INRDERR
         BAL    R8,VECTOR    GO SET UP DOS VECTOR TABLE
         BAL    R8,XFER      GO SET $JOBEXIT
         B      READJCL      GO PROCESS THE NEXT CARD
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**                  TRANSFER CONTROL TO $JOBEXIT                    **
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
XFER     EQU    *             TRANSFER CONTROL TO DOS $JOBEXIT
         LA     R13,SAVE72    SET UP SAVE AREA
         STM    R14,R12,12(R13) SAVE REGS
         ST     R13,4(R13)    DO BACKWARD SA CHAINING
         L      R0,=CL4'SDOS' SET UP DOS SYSTEM ID
         LA     R1,PARTREG    SET UP PARTITION COMM REGION
         L      R2,ASYSCOM    SET UP SYSTEM COMM REGION
         MVC    SAVVECT,JCLVECT SAVE JCL VECTOR FOR DETECTING CHANGE
         MVC    SAVBUFF,JCLBUFF SAVE JCL BUFF FOR DETECTING CHANGES
         LINK   EP=$JOBEXIT                  XFER TO $JOBEXIT
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**                RE-ENTER DOSX AND PROCESS OUTPUT                  **
 **--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
         LM     R0,R12,20(R13) GET BACK OTHER REGS RETAINING R15 AS IS
         L      R14,12(R13)   GET BACK R13
         ST     R15,XRC       STORE USERS EXIT RETURN CODE
         CLC    SAVVECT,JCLVECT CHECK FOR JCL VECTOR CHANGE
         BNE    VECTCHG       USER DID A NO NO
         CLC    SAVBUFF+71(L'SAVBUFF-71),JCLBUFF+71 BUFFER VIOLATION ?
         BNE    BUFFCHG       USER DID A NO NO
         TM     OPTYPE,X'03'  IS THIS JCL A STATEMENT OR COMMAND?
         BZ     XFERTN        NO, GO AROUND OPCODE CHANGE CHECK
         L      R7,OPBEGA     POINT TO OPCODE AREA ON STATEMENT
         L      R2,OPLGTH     GET OPCODE LENGTH
         EX     R2,CLCOPCHG   DID USER CHANGE OPCODE
         BNE    OPCHG         USER DID A NO NO
         CLI    0(R7),C'*'    IS THIS A COMMENT CARD
         BE     DISPLAY       YES, GO DISPLAY
XFERTN   L      R15,XRC       RESTORE &JOBEXIT RETURN CODE
         LTR    R15,R15       CHECK USERS RETURN CODE
         BNZ    DISPLAY       USER WANTS THIS CARD IGNORED
WDATA    FSWRITE (R6),ERROR=OUTERR,BUFFER=(R4),BSIZE=80
         BR     R8            PROCESS THE NEXT CARD
DISPLAY  EQU    *             CARD IGNORE PROCESSING
         WAITT
         WRTERM (R4),80       DISPLAY CARD
         BR     R8            PROCESS NEXT CARD
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**               ROUTINE TO SET UP DOS JCL VECTOR TABLE             **
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
* UPON ENTRY R3 POINTS TO DOS JCL VECTOR TABLE WHICH MUST BE MADE TO
* CONTAIN THE OPERATION OF EACH JCL CARD READ.
* R4 POINTS TO THE JCL CARD INPUT BUFFER.
VECTOR   EQU    *             SET UP DOS JCL VECTOR TABLE
         TM     DATASW,X'01'  ARE WE LOOKING AT DATA CARDS
         BNO    NODATA        GO TO NON-DATA CARD CHECK
         CLC    0(3,R4),=CL3'/* ' END OF DATA ?
         BE     DATAEND       YES
         CLC    0(3,R4),=CL3'/&& ' END OF DATA ?
         BE     DATAEND       YES
         CLC    0(8,R4),=CL8'// EXEC ' END OF DATA ?
         BE     DATAEND       YES
         CLC    0(5,R4),=CL5'EXEC ' END OF DATA ?
         BE     DATAEND       YES
         BAL    R8,WDATA      GO WRITE DATA
         B      READJCL       GO READ NEXT JCL CARD
DATAEND  EQU    *             END OF DATA, RESET FLAG
         MVI    DATASW,X'00'  RESET DATA FLAG TO NO DATA
* HERE WE KNOW WE HAVE JCL AND NOT DATA
* NOW WE TEST TO SEE WHAT TYPE OF JCL WE HAVE
NODATA   EQU    *             NON-DATA CARD CHECK
         CLC    0(3,R4),=CL3'// ' IS THIS A JOB CONTROL STATEMENT
         BE     JCLSTATE      YES, GO PROCESS
         CLI    0(R4),C'*'    IS THIS A COMMENT CARD
         BE     JCLSTATX      YES, PROCESS AS A JCL STATEMENT
         CLC    0(2,R4),=CL3'/* ' IS THIS A JOB CONTROL STATEMENT
         BE     JCLSTATX      YES, GO PROCESS
         CLC    0(2,R4),=CL3'/&& ' IS THIS A JOB CONTROL STATEMENT
         BE     JCLSTATX      YES, GO PROCESS
         CLC    0(2,R4),=CL3'/+ ' IS THIS A JOB CONTROL STATEMENT
         BE     JCLSTATX      YES, GO PROCESS
         B      JCLCMD        ASSUME ITS A JCL COMMAND
*
JCLCMD   EQU    *             JCL COMMAND PROCESSING
         OI     OPTYPE+1,X'02' FLAG AS A COMMAND FOR LATER CHECK
         LR     R7,R4         SET PROPER ADDRESS FOR OPCODE
         B      OPCODE        GO PROCESS OPCODE
*
 JCLSTATE EQU    *             JCL STATEMENT PROCESSING
* MUST PROCESS AS IF CARD IS VARIABLE BEYOND THE '//'
         OI     OPTYPE+1,X'01' FLAG AS STATEMENT FOR LATER CHECK
         LA     R9,68         BCT COUNTER (71 - 3)
         LR     R7,R4         SET UP WORK REG POINTING TO STATEMENT
         LA     R7,2(R7)      BUMP PAST '//'
JCLSX    LA     R7,1(R7)      BUMP UP ONE
         CLI    0(R7),X'40'   A BLANK ?
         BNE    OPCODE        GOT THE OPERATION CODE
         BCT    R9,JCLSX      GO LOOK SOME MORE
         B      INVSTATE      TREAT AS AN INVALID STATEMENT
*
JCLSTATX EQU    *             JCL STATEMENT PROCESSING
* JCL STATEMENTS THAT DO NOT CONTAIN A '//'
         OI     OPTYPE+1,X'01' FLAG AS STATEMENT FOR LATER CHECK
         LR     R7,R4         LOAD OPCODE ADDRESS INTO PROPER REGISTER
         B      OPCODE        GOT THE OPERATION CODE
*
OPCODE   EQU    *             SET UP THE VECTOR TABLE WITH OPERATOR
         LA     R10,7         GOING TO FIND THE END OF THE OPCODE
         ST     R7,OPBEGA     SAVE OPCODE BEGINNING ADDRESS
OPCHK    LA     R7,1(R7)      BUMP UP ONE
         CLI    0(R7),X'40'   IS THIS THE END ?
         BE     OPEND         YES
         BCT    R10,OPCHECK   NO
         B      INVSTATE      MUST BE INVALID IF ITS GREATER THAN 7
OPEND    EQU    *             CALC LENGTH AND MOVE TO VECTOR TABLE
*                             R7 POINTS TO BEGINNING OF OPCODE
         LR     R2,R7         SAVE OPCODE END ADDRESS
         L      R7,OPBEGA     RETURN OPCODE STARTING ADDRESS
         SR     R2,R7         CALC LENGTH OF OPCODE
         BCTR   R2,0          REDUCE BY 1 FOR EX INSTRUCTION
         ST     R2,OPLGTH     STORE LENGTH OF OPCODE FOR LATER USE
         EX     R2,MVCVECT    MOVE OPCODE INTO VECTOR TABLE
         LA     R11,OPTAB-8   POINT TO JCL OPCODE TABLE
         L      R10,OPTABX    GET NUMBER OF BCT'S
OPVAL    EQU    *             VALIDATE
         LA     R11,8(R11)    BUMP OPERATION CODE TABLE
         EX     R2,CLCOPVAL   CHECK FOR OPCODE VALIDITY
         BE     OPVALT        GOOD OPCODE, GO CHECK TYPE
         BCT    R10,OPVAL     GO LOOK FURTHER FOR OPCODE
         B      INVSTATE      NOT A VALID OPCODE
OPVALT   EQU    *             CHECK FOR PROPER COMMAND OR STATEMENT
         CLC    0(7,R11),=CL7'EXEC' IS THIS AN EXECUTE STATEMENT
         BNE    OPTYPE        NO
         MVI    DATASW,X'01'  SET DATA SWITCH ON
*                             TM INSTRUCTION BELOW IS MODIFIED TO
*                             REFLECT THE CURRENT OPERATION TYPE
OPTYPE   TM     7(R11),X'00'  DOES THE OPCODE TYPE MATCH ?
         BNO    INVSTATE      NOT A VALID OPCODE TYPE
         BR     R8            GOT A GOOD OPCODE, CONTINUE
*
INVSTATE EQU    *             INVALID STATEMENT
         BAL    R8,DISPLAY       GO DISPLAY STATEMENT
         WRTERM 'INVALID STATEMENT',17
         B      READJCL          GO GET SOME MORE
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**                      COMMON EXIT POINT                           **
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
EXIT     EQU   *
         L     R14,SAVE14    RESTORE CMS RTRN
         BR    R14           RTRN TO CMS
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
**                      ERROR ROUTINES                              **
**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**--**
PARMERR  EQU   *             INPUT PARAMETER ERROR
          WRTERM 'MISSING INPUT PARAMETERS',24
         L     R15,=F'5'     SET BAD RETURN CODE
         B     EXIT          LEAVE
INERR    EQU   *             INPUT FILE ERROR
         WRTERM 'ERROR ON JCL INPUT FILE',23
         L     R15,=F'10'    SET BAD RETURN CODE
         B     EXIT          LEAVE
OUTERR   EQU   *             OUTPUT FILE ERROR
         WRTERM 'ERROR ON JCL OUTPUT FILE',24
         L     R15,=F'15'    SET BAD RETURN CODE
         B     EXIT          LEAVE
VECTCHG  EQU    *            ERROR, USER CHANGED VECTOR
         WRTERM 'ERROR, JCL VECTOR TABLE CHANGED BY $JOBEXIT',43
         L     R15,=F'30'    SET BAD RETURN CODE
         B     EXIT          LEAVE
BUFFCHG  EQU   *             ERROR, USER CHANGED RESTRICTED BUFFER
         WRTERM 'ERROR, $JOBEXIT CHANGED JCL BEYOND CDL 71',41
         L     R15,=F'35'    SET BAD RETURN CODE
         B     EXIT          LEAVE
OPCHG    EQU   *             ERROR, USER CHANGED OPERATION
         WRTERM 'ERROR, $JOBEXIT OPERATION CODE CHANGED',39
         WRTERM (R7),80
         LA     R7,SAVBUFF   POINT TO STATEMENT MODIFIED
         WRTERM (R7),80
         L     R15,=F'25'    SET BAD RETURN CODE
         B     EXIT          LEAVE
INRDERR  EQU   *             ERROR READING INPUT DOS JCL
         CLM   R15,B'0001',=X'OC' ARE WE AT END OF FILE
         BNE   EXIT          NO, MUST BE ANOTHER TYPE OF ERROR
         FSCLOSE (R5)        CLOSE INPUT FILE
         FSCLOSE (R6)        CLOSE OUTPUT FILE
         SR    R15,R15       INIT RETURN CODE
         B     EXIT          LEAVE
         WRTERM 'ERROR READING INPUT DOS JCL FILE',32
         L     R15,=F'20'    SET BAD RETURN CODE
         B     EXIT          LEAVE
*
*              EX INSTRUCTIONS
CLCOPCHG CLC    0(0,R7),JCLVECT VERIFY NO OPCODE CHANGE
MVCVECT  MVC    0(0,R3),0(R7) MOVE OPERATION CODE INTO VECTOR TABLE
CLCOPVAL CLC    0(0,R7),0(R11) MOVE OPERATION CODE INTO VECTOR TABLE
*
SAVE14   DS    F
SAVE01   DS    F
SAVE72   DS    18F
XRC      DS    F             $JOBEXIT RETURN CODE
DATASW   DC    X'00'         DATA CARD SWITCH
OPBEGA   DS    F             OPCODE BEGINNING ADDRESS
OPLGTH   DS    F             OPCODE LENGTH
*
* DOS OPERATION CODE TABLE OF VALID OPCODES
* TYPE X'01' IS A STATEMENT
* TYPE X'02' IS A COMMAND
* TYPE X'03' IS A STATEMENT OR COMMAND
OPTAB    DS    OF           DOS JCL OPERATION TABLE
         DC    CL7'JOB'     OPERATION
         DC    X'01'        TYPE
         DC    CL7'/&&'     OPERATION
         DC    X'01'        TYPE
         DC    CL7'/+'      OPERATION
         DC    X'01'        TYPE
         DC    CL7'ID'      OPERATION
         DC    X'03'        TYPE
         DC    CL7'DLBL'    OPERATION
         DC    X'01'        TYPE
         DC    CL7'EXTENT'  OPERATION
          DC    X'01'        TYPE
         DC    CL7'TLBL'    OPERATION
         DC    X'01'        TYPE
         DC    CL7'/*'      OPERATION
         DC    X'01'        TYPE
         DC    CL7'LIBDEF'  OPERATION
         DC    X'03'        TYPE
         DC    CL7'LIBDROP' OPERATION
         DC    X'03'        TYPE
         DC    CL7'LIBLIST' OPERATION
         DC    X'03'        TYPE
         DC    CL7'*'       OPERATION
         DC    X'01'        TYPE
         DC    CL7'DATE'    OPERATION
         DC    X'01'        TYPE
         DC    CL7'OPTION'  OPERATION
         DC    X'01'         TYPE
         DC    CL7'OVEND'    OPERATION
         DC    X'03'         TYPE
         DC    CL7'UPSI'     OPERATION
         DC    X'01'         TYPE
         DC    CL7'CANCEL'   OPERATION
         DC    X'02'         TYPE
         DC    CL7'PAUSE'    OPERATION
         DC    X'03'         TYPE
         DC    CL7'PRTY'     OPERATION
         DC    X'02'         TYPE
         DC    CL7'START'    OPERATION
         DC    X'02'         TYPE
         DC    CL7'STOP'     OPERATION
         DC    X'02'         TYPE
         DC    CL7'ALLOC'    OPERATION
         DC    X'02'         TYPE
         DC    CL7'ALLOCR'   OPERATION
         DC    X'02'         TYPE
         DC    CL7'SET'      OPERATION
         DC    X'02'         TYPE
         DC    CL7'SIZE'     OPERATION
         DC    X'02'         TYPE
         DC    CL7'STDOPT'   OPERATION
         DC    X'03'         TYPE
         DC    CL7'IGNORE'   OPERATION
         DC    X'02'         TYPE
         DC    CL7'IGNORE'   OPERATION
         DC    X'02'         TYPE
         DC    CL7'LOG'      OPERATION
         DC    X'02'         TYPE
         DC    CL7'MAP'      OPERATION
         DC    X'02'         TYPE
         DC    CL7'NOLOG'    OPERATION
         DC    X'02'         TYPE
         DC    CL7'ZONE'     OPERATION
         DC    X'01'         TYPE
         DC    CL7'ASSGN'    OPERATION
         DC    X'03'         TYPE
         DC    CL7'CLOSE'    OPERATION
         DC    X'03'         TYPE
         DC    CL7'DVCDN'    OPERATION
         DC    X'02'         TYPE
         DC    CL7'DVCUP'    OPERATION
         DC    X'02'         TYPE
         DC    CL7'HOLD'     OPERATION
         DC    X'02'         TYPE
         DC    CL7'LISTIO'   OPERATION
         DC    X'03'         TYPE
         DC    CL7'MTC'      OPERATION
          DC    X'03'         TYPE
         DC    CL7'RESET'    OPERATION
         DC    X'03'         TYPE
         DC    CL7'ROD'      OPERATION
         DC    X'02'         TYPE
         DC    CL7'SETPRT'   OPERATION
         DC    X'03'         TYPE
         DC    CL7'UCS'      OPERATION
         DC    X'02'         TYPE
         DC    CL7'EXEC'     OPERATION
         DC    X'03'         TYPE
         DC    CL7'RSTRT'    OPERATION
         DC    X'01'         TYPE
OPTABX   DC    F'45'         NUMBER OF TABLE ENTRIES
* INPUT FILE FOR DOS JCL
INFID    DS    0F            FILEID OF INPUT JCL FILE
INFN     DS    CL8           FILENAME
INFT     DS    CL8           FILETYPE
INFM     DC    CL2'*'        FILEMODE
* OUTPUT FILE FOR DOS JCL
OUTFID   DS    0F            FILEID OF OUTPUT JCL FILE
OUTFN    DS    CL8           FILENAME
OUTFT    DC    CL8'$JCLX'    FILETYPE
OUTFM    DC    CL2'A'        FILEMODE
* INPUT DOS JCL EXIT
XFID     DS    OF            FILEID OF DOS JOB CONTROL EXIT
XFN      DC    CL8'$JOBEXIT' FILENAME
XFT      DC    CL8'TEXT'     FILETYPE
XFM      DC    CL2'*'        FILEMODE
*
SAVVECT  DS    CL10          SAVE VECTOR TO DETECT CHANGES
SAVBUFF  DS    CL120         SAVE JCL BUFF TO DETECT CHANGES
PARTREG  DS    CL115         CMS/DOS PARTITION COMM REGION
JCLVECT  DS    0F            DOS JCL VECTOR TABLE
JCLOP    DS    CL7           JCL OPERATION FIELD
         DS    CL3           DOS INTERNAL CONTROL INFO
JCLBUFF  DS    CL120         INPUT DOS JCL BUFFER (PASSED TO $JOBEXIT)
         NUCON
         END

Alan Diaz
Senior Systems Programmer
Pfizer Chemical Inc (USA)     ) Pfizer Chemical Inc 1987























