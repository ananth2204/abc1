CMS storage management restructure

Release 5.5 of CMS includes a completely rewritten storage
management subsystem.  The DMSFREE and DMSFRET macros
have been replaced by the CMSSTOR macro.  This new macro
accepts a parameter of either OBTAIN or RELEASE.  Don't
worry, DMSFREE and DMSFRET will still function correctly,
but only because they are translated internally into the appropriate
CMSSTOR macro.  However, DMSFREEs and DMSFRETs can
easily be converted into CMSSTORs to eliminate the overhead
involved with the translation.

In addition, there is a new storage management macro introduced
in CMS 5.5: the SUBPOOL macro, which can create a specific
subpool to allocate storage from.  SUBPOOL's parameters include
CREATE, RELEASE and DELETE.  These subpools can be used
to help keep track of storage being OBTAINed.  Furthermore,
subpools can be RELEASEd or DELETEd with one macro
invocation.  This means that you can CREATE a subpool at the
beginning of your program and then do CMSSTOR OBTAINs
(DMSFREEs) without worrying about doing the correct
CMSSTOR RELEASEs (DMSFRETs).  Simply do a SUBPOOL
RELEASE (or DELETE) at the end of your program and all the
storage you obtained will be RELEASEd at once.  Actually, you
need not even CREATE a subpool to get this functionality.  An
internal subpool is created automatically at each new SVC level;
therefore, if you OBTAIN storage and don't bother RELEASING
it, it will be RELEASEd automatically when the program SVCs
back to its caller (or CMS) and the internal subpool is DELETEd.
However, this function can be overridden by defining your
subpool to be TYPE=GLOBAL.

This re-structuring of CMS storage management will impact most
software since everyone needs storage and great pains have been
taken to ensure compatibility with existing DMSFREE and
DMSFRET usage.  However, the more complex a program's
storage manipulations are, the greater the chance of a conflict
arising.  One place that is especially sensitive is OS simulation.

GETMAIN and FREEMAIN have also been rewritten to use the
CMSSTOR and SUBPOOL macros and the STRINIT macro has
become a no-op.  Since OS uses a different set of SVCs for
module linkage, results are less certain.  If you come across
storage management problems in an old OS module there is a
command you can issue to help straighten things out: SET
STORECLR ENDCMD, ie clear storage when the initial
command is complete.  The default setting for STORECLR is
ENDSVC, which means clear storage at the end of this SVC level
(as mentioned above).  In addition, setting STORECLR to
ENDCMD 'reactivates' the functionality of the STRINIT macro.
ENDCMD is more in line with the 'OS way of doing things'.  Re-
assembling OS modules wouldn't hurt either.

In general, regression testing of old programs should be done now
on CMS 5.5 if possible.  This is because the storage management
restructure (along with all other CMS 5.5 functions) has been
folded back into CMS 6.  If you wait until your shop is running
CMS 6, you may not have the luxury of time that you do now.


Michael Sexter
Amdahl Corporation (USA) ) Michael Sexter 1989

