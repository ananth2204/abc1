Mapping NSSs and DCSSs

With the arrival of VM/XA, old tools which were used to map
the contents of DMKSNT (eg SNTMAP) are no longer
appropriate. The following EXEC performs a similar function
in a manner which is appropriate to the VM/XA environment.
The basic format of the report is shown in Figure 1.

Through the use of the GRAPH, START, and END options, a
graph may be appended to the right of the basic report. An
example is shown in Figure 2. Each character in this graph
represents 16 pages.

The EXEC produces a readable map (in a disk file called
NSSMAP LISTING A1 or on the console) of all segments that
have been defined or a subset thereof.  It is invoked by
entering:

      NSSMAP (options

where options may be any of the following:

o      APPend indicates that the report is to be appended to an
      existing NSSMAP LISTING file. If the reports include
      graphs, it is your responsibility to ensure that they have the
      same range and granularity.

o      CLASS xxxx, where xxxx is up to four classes. Only those
      NSSs in the specified class(es) will be mapped.  The
      values correspond to CP's usage: A (Active), P (Purge), R
      (Restricted), and S (Skeleton). The default is to map all
      classes and is equivalent to a value of APRS.

o      CONsole indicates that the report is to be written to the
      console (truncated to the value of TERM LINESIZE)
      instead of being written to disk.

o      DCSS indicates that only DCSSs are to be included in the
      report. DCSSs include: stand-alone DCSSs; member
      DCSSs; segment spaces (but see the NOSpace option); and
      CPDCSSs.

o      END nnn may be used to restrict the width of the graph. It
      specifies the highest address to be included in the graph.
      The value is specified as a megabyte number. For example
      END 6 ends at 006FFFFF, or END 123 ends at 123FFFFF.
      NSSs which end above the END value will be flagged with
      '>'. END may also be used in conjunction with the ONLY
      option (with or without the use of a graph). The default is
      the highest address utilized by the NSSs in the report.

o      FORCE indicates that the report is not to be truncated if
      the graph would be unreasonably wide.

o      GAP indicates that the report is to identify every gap in
      virtual storage between address 000000 and the highest
      NSS. Keep in mind that segment spaces are ignored. This
      allows gaps within them to be detected. In all likelihood,
      the NSSs mapped by this EXEC will include disparate
      systems, eg GCS, SQL, and CMSINST. This will reduce
      the value of this option. The use of the various selection ¨
      options will reduce this disadvantage.

o      GRAPH nnn indicates that the report is to include a graph
      which will be appended to the right of each line. The
      granularity of the report is determined by the value of nnn,
      which specifies the number of pages which will be
      encompassed by each symbol in the graph. For example if
      nnn equals 1 each symbol covers one page, if the value is
      16 each symbol covers 16 pages (as with
      VM/SP), and 256 means each symbol covers 256 pages
      (1M). GRAPH 16 is a nice general purpose value; it is also
      recommended since it allows two scale lines to be placed
      over the graph. The symbols used in the graph are
      described below.

o      NARrow indicates that some of the less useful fields in the
      left-hand side of the report are to be removed. This is
      useful when producing a graph and the graph is to be
      printed on a printer with a finite width.

o      NODUPs indicates that when duplicate segment names
      exist (ie because the old ones have been PURGEd) only the
      non-purged segment is to be included in the report.

o      NOSpace indicates that segment spaces are to be excluded
      from the report.

o      NSS indicates that only NSSs are to be included in the
      report. NSSs include NSSs such as CMS and GCS, and
      CPNSSs.

o      ONLY indicates that only NSSs that reside (fully or
      partially) within the START and END range are to be
      reported.

o      Quiet suppresses some of the less useful messages.

o      SPACE xxxxxxxx indicates that only DCSSs which belong
      to the specified segment space will be included.

o      START nnn specifies the lowest address to be included in
      the graph. The value is specified as a megabyte number.
      For example: START 0 starts at 00000000 (the default);
      START 1 starts at 00100000; and START 123 starts at
      12300000. NSSs which begin below the START value will
      be flagged with '<'.  START may also be used in
      conjunction with the ONLY option (with or without the use
      of GRAPH).

o      USERs indicates that only those DCSSs which are
      designed for use by end users are to be included in the
      report. The DCSSs to be excluded are listed in
      user_exclude_list.

The symbols used in the graph are as follows:

o      X (upper case)      An alphanumeric character which is the
            first character of the segment name. The
            pages identified may be shared (Sx).

o      x (lower case)      Same as above except for exclusive mode
            (Ex) pages.

o      -      Portions of a megabyte that are not used
            by a stand-alone DCSS and are thus
            unavailable for productive use

o      =      Segment space

Because of the large number of NSSs that are likely to be
defined, the EXEC supports a number of ways to report on
only a subset of them. The options mentioned above can be
used to produce reports as follows:

o      To include only DCSSs which belong to a certain segment
      space, by using the SPACE option.

o      To include only segments within a certain address range,
      by using the ONLY option in conjunction with the START
      and/or END options.

o      To include only DCSSs or only NSSs, by using the DCSS
      or NSS option.

o      To include only segments which are designed for use by
      end users, by using the USER option.

o      To include only segments which belong to a certain class,
      by using the CLASS option.

o      To exclude segment spaces, by using the NOSPACE
      option.

Any combination of the above options may be used. It is your
responsibility to make sure that the combination makes sense.
/*                           Map All NSSs                         */
/* Ideas for enhancements:
   . Provide additional ways to subset the report such as:
      . by generic name (eg SQL%%%%%) like SPOOLMAN does
      . by application  eg what?
   . Allow a LISTUsers option which would list the users who are using
     each NSS.  This would be mutually exclusive with GRAPH nnn.
   . Allow an INUSE option which would list only NSSs that are in use.
   . On each detail line show the number of segment ranges defined for
     the segment.                                                     */
address COMMAND
if ¬ cplevel('XA') then
   call exit '1 NSSMAP can only be run under VM/XA'
if ¬ privclas('E') then
   call exit '2 NSSMAP requires privilege class E'
/*  Edit the options                                                  */
arg x '(' options ')' .
if x = '?' then
   signal help
if x ¬= '' then
   say 'Unnecessary NSSMAP parameter "' || x || '" - Ignored'
class_list     = 'APRS'                   /*  Set the default values  */
option_append  = 0
option_console = 0
option_dcss    = 0
option_end     = 0              /*  a numeric (not logical) variable  */
option_force   = 0
option_gap     = 0
option_graph   = 0
option_narrow  = 0
option_nodups  = 0
option_nospace = 0
option_nss     = 0
option_only    = 0
option_quiet   = 0
option_space   = 0
option_start   = 0              /*  a numeric (not logical) variable  */
option_users   = 0
do while options ¬= ''
   parse var options x options
   select
      /*  Simple options                                              */
      when abbrev('APPEND' ,x,3) then option_append  = 1
      when    x = 'DCSS'         then option_dcss    = 1
      when    x = 'FORCE'        then option_force   = 1
      when    x = 'GAP'          then option_gap     = 1
      when abbrev('NARROW' ,x,3) then option_narrow  = 1
      when abbrev('NODUPS' ,x,5) then option_nodups  = 1
      when abbrev('NOSPACE',x,3) then option_nospace = 1
      when    x = 'NSS'          then option_nss     = 1
      when    x = 'ONLY'         then option_only    = 1
      when abbrev('QUIET'  ,x,1) then option_quiet   = 1
      when abbrev('USERS'  ,x,4) then option_users   = 1
      /*  Complicated options                                         */
      when x = 'CLASS' then do
         parse var options x options                  /*  CLASS abcd  */
         if verify(x,'APRS') = 0 & length(x) <= 4 then
            class_list = x
         else
            say 'Invalid CLASS value "' || x || '" - Ignored'
         end
      when abbrev('CONSOLE',x,3) then do
       option_console = 1
       parse value diag(8,'QUERY TERMINAL') with 'LINESIZE' linesize ','
         end
      when x = 'END' then do
         parse var options x options                     /*  END nnn  */
         if verify(x,'0123456789ABCDEF') = 0 then
            option_end = x2d(x)
         else
            say 'Invalid END value "' || x || '" - 0 assumed'
         end
      when x = 'GRAPH' then do
         parse var options x options                   /*  GRAPH nnn  */
         if datatype(x,'W') & x > 0 then do
            graph_gran   = x                         /*  granularity  */
            option_graph = 1
            end
         else
            say 'Invalid GRAPH value "' || x || '" - Ignored'
         end
      when x = 'SPACE' then do
         parse var options x options              /*  SPACE xxxxxxxx  */
         EXECIO '* CP (STEM X. STRING QUERY NSS NAME' x 'MAP'
         if rc ¬= 0 then
            call exit '3 Segment space' x 'does not exist'
         if word(x.2,3) ¬= 'DCSS-S' then       /*  ft = segment type  */
            call exit '4' x 'is not a segment space'
         if x.0 < 3 then
   call exit '5 Segment space' x 'does not contain any member segments'
   member_list = x     /*Allow the space to be included in the report */
         do i = 3 to x.0    /*  Skip the heading and the DCSS-S line  */
            member_list = member_list word(x.i,2) /*  fn = DCSS name  */
         end   /*  i  */
         option_space = 1
         end   /*  SPACE  */
      when x = 'START' then do
         parse var options x options                   /*  START nnn  */
         if verify(x,'0123456789ABCDEF') = 0 then
            option_start = x2d(x)
         else
            say 'Invalid START value "' || x || '" - 0 assumed'
         end
      otherwise
         say 'Invalid NSSMAP option "' || x || '" - Ignored'
   end   /*  select  */
end
/*  Post-processing for some of the options                           */
if option_end > 0 | option_start > 0 then
   if ¬ option_graph & ¬ option_only then do
      say 'START and/or END specified without GRAPH or ONLY'
      say 'Default values will be used for START and END'
      option_end   = 0
      option_start = 0
      end
graph_width = 99999999                     /*  not restricted by END  */
if option_graph & option_end > 0 then do
   if option_end >= option_start then
         /*  If the values are equal only one megabyte will be shown  */
      graph_width = (option_end-option_start+1) * 256 / graph_gran + 1
   /*  Convert megabytes to pages and then to granules  */
   else do
      say 'END value must be greater than or equal',
                                         ' to START value - END ignored'
      option_end = 0
      end
   end
if option_graph then
   start_gran = option_start * 256 % graph_gran
                 /*  Convert megabytes to pages and then to granules  */
if option_narrow & ¬ option_graph then do
   say 'NARROW option specified without GRAPH - Ignored'
   option_narrow = 0
/*  This is easier than trying to keep the "internal use only" */
/*  fields from appearing in the report                        */
   end
if option_only then do
   if option_end = 0 & option_start = 0 then do
   say 'The ONLY option needs START and/or END - ONLY ignored'
      option_only = 0
      end
   else do
      only_start = option_start     * 256
      only_end   = (option_end + 1) * 256 - 1
      end
   end
/*  Miscellaneous preliminaries                                       */
max_grans  = 1024 + 1
/*  maximum number of granules in any graph                 */
/*  regardless of what the user specifies by START and END  */
start_addr = right(d2x(option_start),3,0)'00000'        /*  xxx00000  */
user_exclude_list = '$SQLSERV CMSDAVE GCS GCSTEST SPOOLMAN' ,
   'SQLSQLDS SQLXRDS VTAM VTAMTEST'
/*  Issue a QUERY NSS ALL command and save some of the fields (ie
    those not shown by QUERY NSS MAP) for future use using the spool-id
    as the subscript.  Note that (unlike QUERY NSS MAP) only one line
    will be shown per NSS.                                            */
EXECIO '* CP (STEM X. STRING QUERY NSS ALL'           /*  can't fail  */
do i = 2 to x.0                            /*  Skip the heading line  */
   parse var x.i x1 9 15 x2 19
   if x1 ¬== '*NSS    ' & x2 ¬= 'NSS ' then do
      say 'Unsupported output from QUERY NSS ALL - Ignoring the following line'
      say x.i
      iterate
      end
   parse var x.i . spoolid . . records.spoolid date.spoolid ,
      time.spoolid . . originid.spoolid .
end
drop x.
/*  Issue a QUERY NSS ALL MAP command.  For each desired NSS, build a
    report line with information from both QUERY commands.            */
cmsut1_fileid  = 'NSSMAP CMSUT1 A3'
count.         = 0
first_line     = 'Bummer'
lrecl_basic    = 86
/*  the standard left-hand side of the data and report  */
/*  assuming no graph and no NARROW                     */
lrecl_cmsut1   = lrecl_basic + 18
                         /*  includes the "internal use only" fields  */
max_page_d     = 0
spoolid_list.  = ''
total_selected = 0
if option_narrow then
   lrecl_listing = lrecl_basic - 38   /*  does not include the graph  */
else
   lrecl_listing = lrecl_basic
ERASE cmsut1_fileid                        /*  should be unnecessary  */
EXECIO '* CP (STEM X. STRING QUERY NSS ALL MAP'       /*  can't fail  */
do i = 2 to x.0                            /*  Skip the heading line  */
   parse var x.i spoolid 5 6 fn ft min_size 33 beg_page_x end_page_x . ,
      45 48 type class users parm_regs vm_group .      /*  See below  */
   continuation = spoolid = ''
   if continuation then
               /*  This is a new segment range for the preceding NSS  */
     parse var first_line spoolid 5 6 fn ft min_size 33 52 class users ,
         parm_regs vm_group .                          /*  See above  */
   else do                                      /*  new segment name  */
      if verify(spoolid,'0123456789') > 0 then do
         say 'Unsupported output from QUERY NSS ALL MAP',
                                        ' - Ignoring the following line'
         say x.i
         iterate
         end
      first_line = x.i
         /*  Save the first line of this NSS in case it is continued  */
      end
   /*  Do we really want to show this NSS?                            */
   beg_page_d = x2d(beg_page_x)
   end_page_d = x2d(end_page_x)
   if pos(class,class_list) = 0           | ,      /*  wrong class    */
      (option_dcss & pos('DCSS', ft) = 0) | ,      /*  not a DCSS     */
      (option_nss  & pos('NSS',  ft) = 0) | ,      /*  not a NSS      */
      (option_nospace & ft = 'DCSS-S') then        /*  segment space  */
      iterate
   if (option_space & find(member_list,fn) = 0) | ,
                                /*  not in the desired segment space  */
      (option_users & find(user_exclude_list,fn) > 0) | ,
                                                   /*  not for users  */
      (option_only & ,     /*  outside the START/END range with ONLY  */
      (end_page_d < only_start | beg_page_d > only_end)) then
      iterate
   /*  Now that we've decided to keep this record let's retain some
       information about it (which will not be written to CMSUT1)     */
   if ¬ continuation then
      count.ft = count.ft + 1
   total_selected = total_selected + 1
   if option_nodups then
      if find(spoolid_list.fn, spoolid) = 0 then
         spoolid_list.fn = spoolid_list.fn spoolid
   if ft = 'DCSS-S' then do
      beg.total_selected = 99999999  /*  Dummy values which will ...  */
      end.total_selected = -1        /*  never indicate an overlap    */
      end
   else do
      beg.total_selected = beg_page_d
      end.total_selected = end_page_d
      end
   /*  Improve some of the fields                                     */
   select                   /*  This does improve things doesn't it?  */
      when ft = 'CPDCSS'   then ft = 'CP DCSS'
      when ft = 'CPNSS'    then ft = 'CP NSS'
      when ft = 'DCSS'     then nop
      when ft = 'DCSS-M'   then ft = 'Member'
      when ft = 'DCSS-S'   then ft = 'Space'
      when ft = 'NSS'      then ft = 'SavedSys'
      otherwise                 nop
   end   /*  select  */
   x = records.spoolid         /*  for brevity: nnnn or nnnK or nnnM  */
   if verify(x,'0123456789') = 0 then
      records = x + 0                   /*  Strip the leading zeroes  */
   else do
      parse var x x1 4 x2             /*  Separate nnn from K (or M)  */
      select
         when x2 = 'K' then records = x1 *    1000          /*  nnnK  */
         when x2 = 'M' then records = x1 * 1000000          /*  nnnM  */
         otherwise          records = x1'?'
      end   /*  select  */
      end   /*  nnnK  */
   /*  Add some stuff for internal use only and write the record for
       this NSS to the CMSUT1 file                                    */
   page_count = end_page_d - beg_page_d + 1
   max_page_d = max(max_page_d, end_page_d)
   if ft = 'Space' then
      x = 1
   else
      x = 2
  /*  The following statement defines the record which will be sorted
      and read to produce the report.  It must be kept in sync with:
         . the SORT statement below (and its associated comments)
         . the parse statement(s)
         . the value of lrecl_basic and lrecl_listing
         . the statement which produces the "Gap" line
         . the statements which update the standard detail lines
         . the NARROW logic in write_listing                          */
   x = spoolid left(fn,8) left(ft,8) page(beg_page_x) page(end_page_x) ,
      right(page_count,5)'  'left(type,2) right(class,2) ,
      '.....' ,            /*  Overlap count will be insterted later  */
      right(users+0,5) left(date.spoolid,5) left(time.spoolid,5) ,
      left(originid.spoolid,8) right(records,5) ,
      x right(beg_page_d,7) right(end_page_d,7)
                                               /*for internal use only*/
   EXECIO '1 DISKW' cmsut1_fileid '0 F' lrecl_cmsut1 '(VAR X'
             /*  x   Don't use STRING due to the 255 byte limitation  */
end
if total_selected = 0 then
  call exit '6 No NSSs were found which matched your selection criteria'
drop x.
FINIS cmsut1_fileid
/*  Sort the CMSUT1 file using the following sequence:
       90- 96  low page
           88  segment type: only to place "Space" before "Member"
       98-104  high page
        6- 13  name
        1-  4  spoolid   (You wouldn't prefer date + time would you?)
    We could use the CMS SORT command since the file is fixed length  */
MAKEBUF       /*  Don't be confused if started with a nonempty stack  */
queue ':0 SORT * A 90 96  88 88  98 104  6 13  1 4'
queue 'FFILE'
XEDIT cmsut1_fileid '(NOPROFIL'
if rc ¬= 0 then
   call exit rc 'XEDIT return code' rc
/*  Build the scale lines for the report if the GRAPH option is used  */
if option_graph then do
   x = max_page_d % graph_gran - start_gran
                            /*  desired number of granules (exactly)  */
   graph_width = min(graph_width, x+1)
   if graph_width > max_grans & ¬ option_force then do
              /*  eg 256 granules of 16 pages each would graph 16M    */
     say 'The graph is unreasonably wide - Truncated from' graph_width ,
         'to' max_grans
      say 'You attempted to graph from' start_addr 'to' ,
         right(d2x(max_page_d),5,0)'000'                /*  xxxxx000  */
     say 'You might want to increase the GRAPH granularity',
                                                     ' or use START/END'
      graph_width = max_grans
      end
   if graph_width > 0 then
      lrecl_listing = lrecl_listing + 3 + graph_width
   else do
      say 'All NSSs are below the START value - GRAPH option ignored'
      option_graph = 0
      end
   end
graph_scale_2 = ''
graph_scale_3 = ''
if option_graph then do
   graph_scale_1 = 'Each character in this graph encompasses' ,
      graph_gran 'pages'
   if graph_gran = 16 then do
      /*  It would be nice to build graph scale lines when the
          granularity is any value, not just 16.  But I'll leave that
          work for another day.                                       */
      full_megs = graph_width % 16      /*  number of full megabytes  */
      if option_start <= 15 then
         graph_scale_2 = d2x(option_start)
      else                        /*  No room for a two digit number  */
         graph_scale_2 = ' '
      graph_scale_3 = copies('0123456789ABCDEF', full_megs)
      x = graph_width // 16
           /*  number of extra granules after the last full megabyte  */
      if x ¬= 0 then
         graph_scale_3 = graph_scale_3 || substr('0123456789ABCDEF',1,x)
      do i = option_start + 1 for full_megs
         graph_scale_2 = graph_scale_2 || right(d2x(i), 16)
      end   /*  i  */
      end   /*  16  */
   end   /*  GRAPH nnn  */
else
   graph_scale_1 = ''
/*  Build the headings for the report                                 */
listing_fileid = 'NSSMAP LISTING A1'
if ¬ option_append & ¬ option_console then do
   ERASE listing_fileid
   call write_listing left(nodeid(),8) copies(' ',14),
                                  'NSS Map as of' date('U') time(), 'no'
   call write_listing ' '
   end
if ¬ option_append then do
   call write_listing '                       ----- Pages ----- Type',
             '    Over           Date    Updated  Spool  ' graph_scale_1
   call write_listing 'File   Name   NSS Type   Low  High Numbr    '.
            'Stat laps Users   Defined      by     Recs  ' graph_scale_2
   call write_listing '---- -------- -------- ----- ----- -----  --  -',
               '  ---- ----- ----------- -------- -----  ' graph_scale_3
   end
/*  Read the CMSUT1 file and produce the report                       */
if option_graph then do
   x = graph_width % 16 + 1
   graph_bar = copies('|...:...:...:...',x)'|'
/*will contain 0-15 excess bytes which will be truncated when written */
   end
last_name = 'Bummer'
max_page  = 0
EXECIO '* DISKR' cmsut1_fileid '1 (FINIS STEM X.'
                                                 /*  x.   free ERASE  */
if rc ¬= 0 then
   call exit 'EXECIO DISKR RC' rc 'when reading' cmsut1_fileid
do i = 1 to x.0
   parse var x.i line 1 spoolid name . 15 ft 23 43 type_1 44 47 class,
       48 90 beg_page_d end_page_d .
   /*  Make minor improvements to the detail line                     */
   if option_gap then
      call check_for_gap
   if option_nodups then
      if words(spoolid_list.name) > 1 & class = 'P' then  /*  PURGEd  */
         iterate                             /*  Ignore this segment  */
   if name = last_name then
      line = overlay('        ', line,6)      /*  Blank out the name  */
   else
      last_name = name
   if ft = 'Space' then
      overlap_count = ''             /*  Don't show any overlap info  */
   else do
      overlap_count = -1    /*  Don't count the overlap with ourself  */
      do j = 1 to total_selected
         if beg.j <= end_page_d & end.j >= beg_page_d then
            overlap_count = overlap_count + 1
      end   /*  j  */
      end   /*  not a Space  */
   line = overlay(right(overlap_count,5), line, 49)
   /*  Build the graph (if the GRAPH option was specified)            */
   if option_graph then do
      select
         when ft = 'Space' then symbol = '='
         when type_1 = 'S' then symbol = left(name,1)         /*  Sx  */
         otherwise              symbol = lower(left(name,1))  /*  Ex  */
      end   /*  select  */
      beg_gran = page2gran(beg_page_d)
      end_gran = page2gran(end_page_d)
      beg_meg  = page2gran(beg_page_d % 256 * 256)
           /*  granule for the lowest page in the beginning megabyte  */
      end_meg  = page2gran((end_page_d + 256) % 256 * 256) - 1
             /*  granule for the highest page in the ending megabyte  */
      beg_flag = ' '
      end_flag = ' '
      graph    = graph_bar     /*  in case nothing fits on the graph  */
      if beg_gran < 0 then do                /*  begins before START  */
         beg_gran = 0
         beg_flag = '<'                                     /*  "< "  */
         end
      if end_gran < 0 then        /*  (begins and) ends before START  */
         end_flag = '<'                                     /*  "<<"  */
      else do                          /*  ends after START (normal)  */
         if end_gran > graph_width then
                                  /*  will be truncated on the right  */
            end_flag = '>'                          /*  " >" or "<>"  */
         if beg_gran > graph_width then
                            /*  completely to the right of the scale  */
            beg_flag = '>'                                  /*  ">>"  */
         else do
            x = end_gran - beg_gran + 1       /*  number of granules  */
            bar = copies(symbol,x)                       /*  XXXXXXX  */
            bar_gran = beg_gran
            if ft = 'DCSS' then do        /*  standalone DCSSs only!  */
               /*  Although everything is really OK now let's surround
                   the XXXXXXX with dashes to indicate any unused
                   pages in the starting and/or ending megabytes      */
               x = beg_gran - beg_meg
   /*  number of unused granules in the beginning megabyte (low end)  */
               if x > 0 & beg_meg >= 0 then do
                  bar = copies('-',x) || bar        /*  -----XXXXXXX  */
                  bar_gran = beg_meg
                  end
               x = end_meg - end_gran
     /*  number of unused granules in the ending megabyte (high end)  */
               if x > 0 then
                  bar = bar || copies('-',x)     /*  -----XXXXXXX---  */
               end   /*  DCSS  */
            graph = overlay(bar, graph_bar, bar_gran+1)
            end   /*  It fits!  */
         end
      x = left(line, lrecl_basic)
                       /*  Get rid of the "internal use only" fields  */
      line = x beg_flag || end_flag || left(graph, graph_width)
                                                /*  Append the graph  */
      end
   call write_listing line
end   /*  i  */
/*  Final stuff                                                       */
select
   when graph_scale_2 ¬= '' then do
        /*  Add lines at the bottom which duplicate those at the top  */
      x = lrecl_basic + 3
                        /*  write_listing will narrow if appropriate  */
      call write_listing copies(' ',x) || graph_scale_2
      call write_listing copies(' ',x) || graph_scale_3
      call write_listing copies(' ',x) || 'X: shared pages   x: exclusive pages,
      '- unused    = segment space'
      end
   when option_graph then do
      /*  It's too bad we couldn't write scale lines.  Let's write this
          line as a substitute.  The user could derive the "from" and
          "to" information from the Low and High Pages fields, but this
          makes it explicit.                                          */
      call write_listing ' '
      x = option_start * 256 + graph_width * graph_gran - 1
                                          /*  last page in the graph  */
      call write_listing 'The graph covers storage from' start_addr ,
         'to' right(d2x(x),5,'0')'000 in increments of' graph_gran ,
         'pages'
      end
   otherwise
      nop
end   /*  select  */
if ¬ option_append & ¬ option_console then
   FINIS listing_fileid
call show_count 'CPDCSS', 'CP DCSSs'
call show_count 'CPNSS' , 'CP NSSs'
call show_count 'DCSS'  , 'standalone user DCSSs'
call show_count 'DCSS-M', 'member DCSSs'
call show_count 'DCSS-S', 'segment spaces'
call show_count 'NSS'   , 'named saved systems'
exit 0
/*                            Subroutines                             */
/*  Check to see if the current segment is preceded by a gap          */
check_for_gap:
if i = 1 then
/* Prevent a gap for the first NSS regardless of its starting address */
   max_page = beg_page_d
if ft = 'Space' then
   return
if beg_page_d > max_page + 1 then do
   x = beg_page_d - max_page - 1                     /*  size of gap  */
   if x <= 99999 then                     /*  fits in 5 digit column  */
      x = right(x, 5)
   else
      x = right(x % 1000, 4)'K'                  /*  Switch to nnnnK  */
   x = left('Gap',22) xpage(max_page+1) xpage(beg_page_d - 1) x ,
      copies(' ',47) left(graph_bar, graph_width)
   call write_listing x
   end
max_page = max(max_page,end_page_d)
return
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   say final_message
exit exit_rc
/*  Heeeelp                                                           */
help:
say 'NSSMAP (APPend CLASS xxxx CONsole DCSS END nnn FORCE GAP ',
                                                  'GRAPH nnn NARrow ...'
say '      NODUPs NOSpace NSS ONLY Quiet SPACE xxxxxxxx START nnn USERs'
call exit 0
/*  Convert a page number to bbnnn format (if below the line) or nnnnn
    format (if above the line)                                        */
page:
arg x1 3 x2
if x1 == '00' then
   return '  ' || x2                                       /*  bbnnn  */
return arg(1)                                  /*  (unchanged) nnnnn  */
/*  Convert a page number to a granule number                         */
page2gran:
return arg(1) % graph_gran - start_gran
/*  Show the count for one type of NSS                                */
show_count:
if option_quiet then
   return
parse arg type, description
if count.type > 0 then
   say right(count.type,3) description
return
/*  Write one record to the report file (with no length restriction)
    Note that the record passed to this routine is subject to truncation
    by either EXECIO or by similar logic prior to the "say".          */
write_listing:
parse arg the_record, ok_to_narrow
if option_narrow & ok_to_narrow ¬= 'no' then do
   parse var the_record 6 x1 54 87 x2
   the_record = x1 || x2
   end
if option_console then
   say left(the_record, min(linesize,lrecl_listing))
else
   EXECIO '1 DISKW' listing_fileid '0 F' lrecl_listing ,
      '(VAR THE_RECORD'                               /*  the_record  */
return
/*  Convert a decimal page number to hex using bbnnn or nnnnn format  */
xpage:
return page(d2x(arg(1),5))

Dave Fraatz
Specialist
3M (USA)

