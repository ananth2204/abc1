Programmer tools (continued)

This month we continue the article describing programmer tools.

COMLINE MACRO

When I was programming I found it hard to create a comment
line every time I needed one.  So I started to copy lines from
other parts of the program.  This wasn't what I wanted to do, so
I wrote a macro that would insert a comment line.  Because
indentation is part of good programming technique,  I set up
the macro in such a way that the indentation is automatically
taken into account.  This is done when a reserved word like IF,
THEN, ELSE DO, WHILE etc is encountered on the line
preceding the line you want to comment.

The only thing that needs to be done is to type the comment
you want and start the macro.  The macro should be called
from the line that is to be commented.  If the cursor is on
another line, that line will be put into comment form.  The
easiest way to start the macro is to assign it to a function key.
So you just have to press the defined key, and the line will be
put in comment form.

COMLINE finds out what kind of file you are editing and will
select the needed comment delimiters accordingly.  The
filetypes supported and the comment delimiters are:

o      SCRIPT

      Start      .*
      End        *

o      PASCAL

      Start      (*
      End        *)

o      C

      Start      /*
      End        */

o      ASSEMBLE

      Start      *
      End        *

o      EXEC

      Start      /*
      End        */

o      XEDIT

      Start      /*
      End        */

o      Others

      Start      *
      End        *

The filetypes SEXEC and SXEDIT are supported as well.  This
is very useful when you use the REXX compiler.


COMLINE XEDIT

/* Description:                                                     */
/*         Put a comment around a line                              */
/*         The comment will be of the form:                         */
/*         /*-------------------------------------*/                */
/*         /* Text                                */                */
/*         /*-------------------------------------*/                */
/*                                                                  */
/*           |                                   |                  */
/*           |                                   |                  */
/*           |<----------- com_width ----------->|                  */
/*                                                                  */
/*         You first have to type the line that you want to         */
/*         put into comment. This macro then determines how         */
/*         many spaces are needed to indent, according to           */
/*         good programming rules.                                  */
/*         If the line above the comment line is an empty line      */
/*         no indentation will be made.                             */
/*         This macro is very handy when it is assigned to a        */
/*         function key. It cannot be used from the prefix          */
/*         area.                                                    */
PARSE SOURCE . . s_name s_type s_mode .
ARG pref .
/* Define some constants                                            */
id_factor = 4                       /* Indentation factor           */
com_width = 64                      /* Width of the comment         */
/* Get some information.                                            */
EXTRACT '/' line '/' cursor '/' ftype '/' cmdline '/' autosave '/' alt
/* Check if the cursor is on the commandline                        */
IF cmdline.2 = cursor.1 THEN DO
    EMSG s_name' cannot be used on the command line'
    CALL quit
END
/* Check if the macro is called from the prefix area                */
IF pref = 'PREFIX' THEN DO
    EMSG s_name' cannot be used in the prefix area'
    CALL quit
END
/* Make sure no saving occurs                                       */
SET AUTOSAVE OFF
SELECT
    WHEN ftype.1 = 'SCRIPT' THEN DO
        c_s = '.*'
        c_e = '*'
        res_words = ''
    END
    WHEN ftype.1 = 'PASCAL' THEN DO
        c_s = '(*'
        c_e = '*)'
        res_words = 'IF THEN ELSE CASE BEGIN FOR WHILE'
    END
    WHEN ftype.1 = 'C' THEN DO
        c_s = '/*'
        c_e = '*/'
        res_words = 'IF ELSE SWITCH { FOR WHILE DO'
    END
    WHEN ftype.1 = 'ASSEMBLE' THEN DO
        c_s = '*'
        c_e = '*'
        res_words = ''
    END
    WHEN ftype.1 = 'XEDIT' THEN DO
        c_s = '/*'
        c_e = '*/'
        res_words = 'IF THEN ELSE DO WHEN SELECT'
    END
    WHEN ftype.1 = 'SXEDIT' THEN DO
        /*----------------------------------------------------------*/
        /* Used when using the Rexx compiler                        */
        /*----------------------------------------------------------*/
        c_s = '/*'
        c_e = '*/'
        res_words = 'IF THEN ELSE DO WHEN SELECT'
    END
    WHEN ftype.1 = 'EXEC' THEN DO
        c_s = '/*'
        c_e = '*/'
        res_words = 'IF THEN ELSE DO WHEN SELECT'
    END
    WHEN ftype.1 = 'SEXEC' THEN DO
        /*----------------------------------------------------------*/
        /* Used when using the Rexx compiler                        */
        /*----------------------------------------------------------*/
        c_s = '/*'
        c_e = '*/'
        res_words = 'IF THEN ELSE DO WHEN SELECT'
    END
    OTHERWISE DO
        c_s = '*'
        c_e = '*'
        res_words = 'IF THEN ELSE BEGIN FOR DO SELECT WHEN'
    END
END
/* Find the ident factor                                            */
move = ''
IF cursor.3 > 2 THEN DO
    /* Only if you're not on the first line.                        */
    ':'cursor.3 - 1
    EXTRACT '/' curline
    IF STRIP(curline.3) Â¬= '' THEN DO
        /* Only if the line above is not empty                      */
        move = COPIES(' ', WORDINDEX(curline.3, 1) - 1)
    END
END
/* Make it suitable for IF, DO, SELECT etc.                         */
wo = WORD(curline.3, 1)
UPPER wo
found = 0
DO i = 1 TO WORDS(res_words)
    IF WORD(res_words, i) = wo THEN found = 1
END
IF found = 1 THEN DO
    /* ident extra if a reserved word was found.                    */
    move = move || COPIES(' ', id_factor)
END
':'cursor.3
EXTRACT '/' curline
/* Check if the line is already in comment.                         */
IF ((LEFT(STRIP(curline.3), 2)  = c_s) & ,
    (RIGHT(STRIP(curline.3), 2) = c_e)) THEN DO
    EMSG 'The line is already in comment form.'
    CALL quit
END
comment = LEFT(SPACE(curline.3), com_width - LENGTH(move))
c_si = com_width - LENGTH(move)
IF comment = '' THEN DO
    /* No comment data found.                                       */
    EMSG 'No data to pack into a comment'
    CALL quit
END
/* Insert the top comment line                                      */
UP 1
'INPUT' move || c_s || COPIES('-', c_si+2) || c_e
/* Replace the current line in comment form                         */
DOWN 1
REPLACE move || c_s || ' ' || comment || ' ' || c_e
/* Insert the bottom comment line                                   */
'INPUT' move || c_s || COPIES('-', c_si+2) || c_e
/* Everything done. Quit                                            */
CALL quit
quit:
/*  Subroutine  : quit                                              */
/*  Function    : Reset everything and quit the program             */
/*  Returns     : Nothing                                           */
/*  Arguments   : None                                              */
/*  Remarks     : This subroutine quits the program                 */
':'line.1
SET AUTOSAVE autosave.1
SET ALT alt.1+1
/* All done, leave the macro                                        */
EXIT


MSCRIPT MACRO

A lot of programmers want to use their program listings in their
documentation.  Most documents written under VM are made
for Script, so it's obvious to write a macro to convert REXX
EXEC files into Script files.  The macro MSCRIPT does
something more.  A lot of the reserved words defined in REXX
are highlighted.

Every new routine starts on a new page and will be added to
the table of contents as a new paragraph.  This is handy when
all the listings are used in an appendix.

The macro needs a file called MYNAME DATA A with the
address information of the author.  This file should contain at
least one line with the name of the author.  The following lines
can be used for address information.  This construction is
handy when the macro is placed on a tools disk which can be
accessed by other users.  Every user has his own MYNAME
DATA file, so he will get his own address information.


MSCRIPT XEDIT

/* Description:                                                     */
/*         Convert an EXEC or macro to Script format.               */
/*         Furthermore, put all REXX keywords in bold face.         */
PARSE SOURCE . . s_name s_type s_mode .
SIGNAL ON SYNTAX
/* First get all the settings.                                      */
ADDRESS COMMAND 'MAKEBUF'
'QUERY CMSTYPE ( STACK'
PARSE PULL . '=' cms_type
'EXECIO * CP ( STEM MSGS. STRING QUERY SET'
PARSE VAR msgs.1 . 'MSG'  old_msg  . 'EMSG' old_emsg ',' .
PARSE VAR msgs.4 . 'IMSG' old_imsg . 'SMSG' old_smsg ',' .
ADDRESS COMMAND 'DROPBUF'
/* Get the terminal dimensions.                                     */
console = C2X(DIAG(8C))
PARSE VAR console 5 cols 9 rows 13
cols = X2D(cols)
rows = X2D(rows)
/* Get some useful information                                      */
EXTRACT '/' size '/' fname '/' ftype '/' autosave
SET WRAP OFF
SET AUTOSAVE OFF
SET EMSG OFF
fname.1 = STRIP(fname.1)
ftype.1 = STRIP(ftype.1)
/* Define the type(s) wherefor this macro can be used               */
types = 'EXEC XEDIT SEXEC SXEDIT'
/* Check if the filetype is supported                               */
supported = 0
DO i = 1 TO WORDS(types)
    IF WORD(types, i) = ftype.1 THEN supported = 1
END
IF supported = 0 THEN DO
    EMSG 'This macro is NOT suited for 'ftype.1' files.'
    CALL quit 0
END
/* Get the user address information.                                */
/* This little file can be very handy. I use it in all my programs  */
/* or macros that need my name and address. This way I have to      */
/* maintain only one file, when my address, phonenumber etc.        */
/* changes.                                                         */
/* The structure of the file is very simple:                        */
/*     1) Name                                                      */
/*     2) .. n) Other address information.                          */
/*                                                                  */
/* Example:                                                         */
/*   A.J.W.M. Kersten                                               */
/*   Holland                                                        */
ADDRESS COMMAND 'STATE MYNAME DATA A'
name_found = (rc = 0)
IF name_found THEN DO
    'EXECIO * DISKR MYNAME DATA ( STEM NAME. FINIS'
END
ELSE DO
    name. = ''
    name.0 = 0
END
/* Set the new filetype to SCRIPT                                   */
ftype 'SCRIPT'
TOP
/* Create a front page                                              */
INPUT ':gdoc sec=''Your securitycode''.'
INPUT ':frontm.'
INPUT ':titlep.'
INPUT ':title.'STRIP(fname.1) STRIP(ftype.1)
INPUT ':date.'
IF name_found THEN DO
    INPUT ':author.'SPACE(name.1)
    IF name.0 >= 2 THEN DO
        INPUT ':address.'
        DO i = 2 TO name.0
            INPUT ':aline.'SPACE(name.i)
        END
        INPUT ':eaddress.'
    END
END
INPUT ':etitlep.'
INPUT ':toc.'
INPUT ':body.'
/* Put the definition for a NON proportional font on the next line  */
/* The best result is obtained with a non-prop. font, because this  */
/* looks the same on paper as it does on the screen.                */
/* This can be important when you are counting spaces in your       */
/* program. The printed output looks better as well.                */
INPUT '.df 2 font X0CE12 codepage C0S0CE12'
INPUT '.bf 2'
INPUT '.fo off'
DO size.1
    LOCATE '/: /'
    IF rc Â¬= 0 THEN LEAVE
    /* New REXX label found                                         */
    EXTRACT '/' curline
    PARSE VAR curline.3 name ':'
    IF WORD(name,1) || ':' Â¬= LEFT(curline.3,length(name)+1)
        THEN ITERATE
    DELETE 1
    /* Change the label into a new paragraph                        */
    UP 1
    INPUT '.pa'
    INPUT '.pf'
    INPUT ':h2.'name
    INPUT '.bf 2'
    INPUT name || ':'
END
BOTTOM
INPUT '.fo on'
/* Set up the reserved word array                                   */
CALL init
TOP
/* Put a space in front of all the lines to make reserved words     */
/* in position 1 of the file changeable too.                        */
space = ' '
'CINSERT 'space
'REPEAT *'
/* Change all the defined words into script hilight                 */
DO i = 1 TO rexx.0
    TOP
    'C/ 'rexx.i' / :hp2.'rexx.i':ehp2 /* *'
END
/* Remove the space again.                                          */
TOP
'CDELETE 1'
'REPEAT *'
TOP
SET WRAP ON
SET AUTOSAVE autosave.1
SET EMSG ON
CALL quit 0
init:
/*  Subroutine  : init                                              */
/*  Function    : Initialize the array with all the reserved        */
/*                words.                                            */
/*  Returns     : Nothing (Just sets up the array)                  */
/*  Arguments   : None                                              */
/*  Remarks     : If you add any words to this array, do NOT        */
/*                forget to change the number of items in           */
/*                rexx.0                                            */
rexx.    = ''
rexx.0   = 49
rexx.1   = 'ADDRESS'
rexx.2   = 'ARG'
rexx.3   = 'CALL'
rexx.4   = 'CMS'
rexx.5   = 'COMMAND'
rexx.6   = 'DO'
rexx.7   = 'DROP'
rexx.8   = 'EXIT'
rexx.9   = 'IF'
rexx.10  = 'INTERPRET'
rexx.11  = 'ITERATE'
rexx.12  = 'LEAVE'
rexx.13  = 'NOP'
rexx.14  = 'NUMERIC'
rexx.15  = 'PARSE'
rexx.16  = 'PROCEDURE'
rexx.17  = 'PULL'
rexx.18  = 'PUSH'
rexx.19  = 'QUEUE'
rexx.20  = 'RETURN'
rexx.21  = 'SAY'
rexx.22  = 'SELECT'
rexx.23  = 'SIGNAL'
rexx.24  = 'TRACE'
rexx.25  = 'UPPER'
rexx.26  = 'TO'
rexx.27  = 'BY'
rexx.28  = 'WHILE'
rexx.29  = 'FOR'
rexx.30  = 'UNTIL'
rexx.31  = 'FOREVER'
rexx.32  = 'END'
rexx.33  = 'THEN'
rexx.34  = 'ELSE'
rexx.35  = 'EXTERNAL'
rexx.36  = 'NUMERIC'
rexx.37  = 'SOURCE'
rexx.38  = 'VAR'
rexx.39  = 'VALUE'
rexx.40  = 'VERSION'
rexx.41  = 'EXPOSE'
rexx.42  = 'WHEN'
rexx.43  = 'OTHERWISE'
rexx.44  = 'ON'
rexx.45  = 'OFF'
rexx.46  = 'ERROR'
rexx.47  = 'HALT'
rexx.48  = 'NOVALUE'
rexx.49  = 'SYNTAX'
RETURN
syntax:
/* Subroutine  : syntax                                             */
/* Function    : Called when a syntax error is detected.            */
/* Returns     : Nothing.                                           */
/* Arguments   : None                                               */
/* Remarks     : This routine quits the program.                    */
PARSE SOURCE . . s_name s_type s_mode .
ret_code = rc
/* Enable typing                                                    */
'SET CMSTYPE RT'
'VMFCLEAR'
line.1 = s_name s_type s_mode' ended at '|| DATE() 'Time: 'SUBSTR(TIME(), 1, 5)
line.2 = 'REXX syntax error in line number 'sigl
line.3 = STRIP(SUBSTR(SPACE(SOURCELINE(sigl)), 1, cols-22))
line.4 = 'Error: 'ERRORTEXT(ret_code)
line.5 = ''
line.6 = 'Return code: ' || ret_code
SAY
SAY
SAY
SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)
SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.1, cols-20) || '|', cols)
SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.2, cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.3, cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.4, cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.5, cols-20) || '|', cols)
SAY CENTER('|' || CENTER(line.6, cols-20) || '|', cols)
SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)
SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)
SAY
SAY
SAY
/* Drop all the  buffers ...                                        */
ADDRESS COMMAND 'DESBUF'
/* ... and exit with the returncode.                                */
CALL quit ret_code
quit:
/* Subroutine  : quit                                               */
/* Function    : Reset everything and quit the program.             */
/* Returns     : Nothing.                                           */
/* Arguments   : Return code.                                       */
/* Remarks     : The program returns to the calling system.         */
ARG ret_code
/* Reset all the messages.                                          */
'SET EMSG 'old_emsg
'SET SMSG 'old_smsg
'SET IMSG 'old_imsg
'SET  MSG 'old_msg
'SET CMSTYPE 'cms_type
EXIT ret_code


Ton Kersten
System Manager (The Netherlands)
