Programmer tools

A lot of programmers keep typing and copying the same thing
over and over again.  I discovered that I was typing a standard
program set-up every time I started a new program.  To get rid
of this tedious job, I decided it would be very handy to create a
macro to do it all for me.  The macro does five things:

o     Saves all the message settings in variables.

o     Saves the PF-key settings in a REXX array.

o     Sets up an error routine for syntax errors.

o     Sets up an error routine for no-value errors.

o     Sets a routine for program completion.  This routine
      restores all the saved settings.

The macro is intended for REXX programs only.  This is
checked when the macro is called.  A second check is made to
determine if the line is already in comment form.  If it is the
ComLine will stop and generate an error message.


PROGRAM XEDIT

/* Description:                                                     */
/*         Set up a program. Get all the message settings,          */
/*         and restore them when leaving.                           */
/*         The following things are set-up:                         */
/*            1) All the message settings are saved                 */
/*               and reset when the programs is finished            */
/*            2) All the PF-key settings are saved                  */
/*               and reset when the programs is finished            */
/*            3) A syntax error routine is defined                  */
/*            4) A no-value error routine is defined                */
/*            5) A quit routine is defined. This routine takes      */
/*               care of the restoring of the environment.          */
PARSE SOURCE . . s_name s_type s_mode .
/* First check if the syntax routine is already set-up              */
TOP
SET EMSG OFF
'/SIGNAL ON SYNTAX/'
ret_code = rc
SET EMSG ON
IF ret_code = 0 THEN DO
    EMSG 'The program is already initialized.'
    EXIT
END
/* Check if the no-value routine is already set up                    */
TOP
SET EMSG OFF
'/SIGNAL ON NOVALUE/'
ret_code = rc
SET EMSG ON
IF ret_code = 0 THEN DO
    EMSG 'The program is already initialized.'
    EXIT
END
/* Now check if it is an EXEC or XEDIT program.                     */
EXTRACT '/' ftype
IF ((ftype.1 ¬= 'EXEC')  & (ftype.1 ¬= 'XEDIT') & ,
    (ftype.1 ¬= 'SEXEC') & (ftype.1 ¬= 'SXEDIT')) THEN DO
    EMSG s_name' is intended for EXEC or XEDIT files only.'
    EXIT
END
EXTRACT '/' cursor '/' autosave '/' alt
'SET AUTOSAVE OFF'
/* It's executable. Check if the language is REXX                   */
':1'
EXTRACT '/' curline
IF SUBSTR(STRIP(curline.3), 1, 2) ¬= '/*' THEN DO
    EMSG s_name' is intended for REXX language programs only.'
    EXIT
END
curl = cursor.3
/* Define the comment lines                                         */
comline.1 = '/*' || COPIES('-', 66) || '*/'
comline.2 = '/*' || COPIES(' ', 66) || '*/'
/* Define the date and time of creation                             */
now = DATE('WEEKDAY') || ' ' || DATE()
tim = SUBSTR(TIME(),1,5)
BOTTOM
EXTRACT '/' cursor
/* First setup the Syntax routine                                   */
INPUT " "
INPUT " "
INPUT "syntax:"
INPUT comline.1
INPUT "/* " || LEFT('Subroutine  : syntax', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Function    : Called when a syntax error is detected.',,
65),|| "*/"
INPUT comline.2
INPUT "/* " || LEFT('Returns     : Nothing.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Arguments   : Return code', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Remarks     : None', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Creation    : 'LEFT(now, 20) || RIGHT('Time: 'tim, 30),,
65),|| "*/"
INPUT comline.1
INPUT "PARSE SOURCE . . s_name s_type s_mode ."
INPUT " "
INPUT "ret_code = rc"
INPUT comline.1
INPUT "/* " || LEFT('Enable typing', 65)   || "*/"
INPUT comline.1
INPUT "'SET CMSTYPE RT'"
INPUT "'VMFCLEAR'"
INPUT " "
INPUT "line.1 = s_name s_type s_mode' ended at '|| DATE(),
'Time: 'SUBSTR(TIME(), 1, 5)"
INPUT "line.2 = 'REXX syntax error in line number 'sigl"
INPUT "line.3 = SPACE(SUBSTR(SPACE(SOURCELINE(sigl)), 1, cols-22))"
INPUT "line.4 = 'Error: 'ERRORTEXT(ret_code)"
INPUT "line.5 = ''"
INPUT "line.6 = 'Return code: ' || ret_code"
INPUT " "
INPUT "SAY"
INPUT "SAY"
INPUT "SAY"
INPUT "SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.1, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.2, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.3, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.4, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.5, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.6, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)"
INPUT "SAY"
INPUT "SAY"
INPUT "SAY"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Drop all the  buffers ...', 65) || "*/"
INPUT comline.1
INPUT "ADDRESS COMMAND 'DESBUF'"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('... and exit with the returncode.', 65) || "*/"
INPUT comline.1
INPUT "CALL quit ret_code"
INPUT " "
INPUT " "
/* Setup the novalue routine                                        */
INPUT "novalue:"
INPUT comline.1
INPUT "/* " || LEFT('Subroutine  : novalue', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Function    : Called when a variable is not initialized.',,
65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Returns     : Nothing.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Arguments   : None', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Remarks     : None', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Creation    : 'LEFT(now, 20) || RIGHT('Time: 'tim, 30),,
65),|| "*/"
INPUT comline.1
INPUT "PARSE SOURCE . . s_name s_type s_mode ."
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Enable typing', 65)   || "*/"
INPUT comline.1
INPUT "'SET CMSTYPE RT'"
INPUT "'VMFCLEAR'"
INPUT " "
INPUT "line.1 = s_name s_type s_mode' ended at '|| DATE(),
'Time: 'SUBSTR(TIME(),,1, 5)"
INPUT "line.2 = 'Variable is not initialized in line 'sigl"
INPUT "line.3 = SPACE(SUBSTR(SPACE(SOURCELINE(sigl)), 1, cols-22))"
INPUT " "
INPUT "SAY"
INPUT "SAY"
INPUT "SAY"
INPUT "SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.1, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.2, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || CENTER(line.3, cols-20) || '|', cols)"
INPUT "SAY CENTER('|' || COPIES(' ',    cols-20) || '|', cols)"
INPUT "SAY CENTER('+' || COPIES('-',    cols-20) || '+', cols)"
INPUT "SAY"
INPUT "SAY"
INPUT "SAY"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Drop all the  buffers ...', 65) || "*/"
INPUT comline.1
INPUT "ADDRESS COMMAND 'DESBUF'"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('... and exit with the returncode.', 65) || "*/"
INPUT comline.1
INPUT "CALL quit -1"
INPUT " "
INPUT " "
/* Setup the quit routine                                           */
INPUT "quit:"
INPUT comline.1
INPUT "/* " || LEFT('Subroutine  : quit', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Function    : Reset everything and quit the',
                                               ' program.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Returns     : Nothing.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Arguments   : Return code.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Remarks     : The program returns to the calling',
                                                ' system.', 65) || "*/"
INPUT comline.2
INPUT "/* " || LEFT('Creation    : 'LEFT(now, 20) ||
                                    RIGHT('Time: 'tim, 30), 65) || "*/"
INPUT comline.1
INPUT "ARG ret_code"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Reset all the PF keys.', 65) || "*/"
INPUT comline.1
INPUT "DO i = 1 TO pf_keys.0"
INPUT "    IF WORD(pf_keys.i, 2) ¬= 'UNDEFINED' THEN DO"
INPUT "        'CP SET PF'i SUBSTR(pf_keys.i, WORDINDEX(pf_keys.i, 2))"
INPUT "    END"
INPUT "END"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Reset all the messages.', 65) || "*/"
INPUT comline.1
INPUT "'SET EMSG 'old_emsg"
INPUT "'SET SMSG 'old_smsg"
INPUT "'SET IMSG 'old_imsg"
INPUT "'SET  MSG 'old_msg"
INPUT "'SET CMSTYPE 'cms_type"
INPUT " "
INPUT "EXIT ret_code"
/* Find the first NO comment line                                   */
TOP
':1'
EXTRACT '/' curline
DO UNTIL STRIP(SUBSTR(curline.3, 1, 2)) ¬= '/*'
   'DOWN 1'
   EXTRACT '/' curline
END
/* Tell the program to signal on syntax and on novalue              */
INPUT "SIGNAL ON SYNTAX"
INPUT "SIGNAL ON NOVALUE"
INPUT " "
/* Get all the needed settings                                      */
INPUT comline.1
INPUT "/* " || LEFT('Get all the needed settings.', 65) || "*/"
INPUT comline.1
INPUT "ADDRESS COMMAND 'MAKEBUF'"
INPUT "'QUERY CMSTYPE ( STACK'"
INPUT "PARSE PULL . '=' cms_type"
INPUT "'EXECIO * CP ( STEM MSGS. STRING QUERY SET'"
INPUT "PARSE VAR msgs.1 . 'MSG'  old_msg  . 'EMSG' old_emsg ',' ."
INPUT "PARSE VAR msgs.4 . 'IMSG' old_imsg . 'SMSG' old_smsg ',' ."
INPUT "ADDRESS COMMAND 'DROPBUF'"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Get the PF key settings.', 65) || "*/"
INPUT comline.1
INPUT "'EXECIO * CP ( STEM PF_KEYS. STRING QUERY PF *'"
INPUT " "
INPUT comline.1
INPUT "/* " || LEFT('Get the terminal dimensions.', 65) || "*/"
INPUT comline.1
INPUT "console = C2X(DIAG(8C))"
INPUT "PARSE VAR console 5 cols 9 rows 13"
INPUT "cols = X2D(cols)"
INPUT "rows = X2D(rows)"
INPUT " "
/* Startof with some empty lines for program setup                  */
DO 4
    INPUT " "
END
INPUT comline.1
INPUT "/* " || LEFT('Put your program code here.', 65) || "*/"
INPUT comline.1
DO 4
    INPUT " "
END
INPUT "CALL quit 0"
/* Reset everything and quit.                                       */
TOP
SET AUTOSAVE autosave.1
'SET ALT 'alt.1+1
EMSG 'Your program is set up.'
EXIT

More programmer tools will be published next month.

Ton Kersten
System Manager (The Netherlands)

