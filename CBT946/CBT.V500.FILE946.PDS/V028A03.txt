 Display any local terminal
When a user is having problems with an application it is usually necessary to
look at his screen image.  The program below will display the contents of any
CMS user's screen on your screen.  The user can be in full screen mode (XEDIT
etc) or 3215 mode.  The logic that is necessary to do this is:
y    Disable the target screen.
y    Alter it (via STCP) to appear enabled.  CP will now allow you to ATTACH it
to your virtual machine.
y    Issue a Start I/O to read the screen buffer.
y    Restore the target device RDEVBLOK.
y    Write the data on your screen.
The format of the command is:
     VMSPY CUU
Where CUU is the physical device address.
VMSPY
         MACRO
&NAME    EX14
         CNOP  2,4
&NAME    L     14,*+6
         BR    14
         DC    A(000)
         MEND
         LCLC  &REL
&REL     SETC  '1.0'
         TITLE 'VMSPY - ''DISPLAY ANY TERMINAL R&REL'''
*  VMSPY   -   COPY ANY PHYSICAL TERMINAL ONTO YOUR TERMINAL.       *
*  FUNCTIONS:  IN ORDER TO DISPLAY ANY TERMINAL, THE TARGET         *
*              TERMINAL IS ATTACHED TO OUR VIRTUAL MACHINE          *
*              AND A READ BUFFER IS ISSUED AGAINST THE ATTACHED     *
*              TERMINAL. IN ORDER TO ATTACH IT, CP MUST BELIEVE     *
*              THAT THE TERMINAL IS 'FREE'. IN ORDER TO DO THIS,    *
*              THE RDEVBLOK OF THE TARGET TERMINAL IS:              *
*              1)......DISABLED                                     *
*              2)......ALTERED TO BE 'ENABLED'                      *
*                                                                   *
*              NOTE: THE CURRENT FIELDS ARE SAVED (RDEVUSER,        *
*                    RDEVATT, RDEVSTAT                              *
*              THE TERMINAL CAN NOW BE ATTACHED TO US. (THE USERID  *
*              THAT THE TERMINAL REALLY BELONGS TO IS STILL         *
*              LOGGED ON).                                          *
*              ONCE THE TERMINAL IS ATTACHED TO US, A START I/O     *
*              IS ISSUED TO READ THE BUFFER.                        *
*              AFTER THE SIO IS ISSUED, THE RDEVBLOK IS RESTORED    *
*              TO ITS INITIAL STATUS.                               *
*              THE DATA IS THEN DISPLAYED UPON OUR TERMINAL.        *
*   EXTERNAL REFERENCES:                                            *
*        NONE                                                       *
*   RC     -    BASE                                                *
*   RD     -    SAVE AREA                                           *
*   RE     -    SUBROUTINE LINKAGE                                  *
*   RF     -    EXTERNAL LINKAGE                                    *
         EJECT
         PRINT NOGEN
VMSPY    CSECT
         STM   RE,RC,12(RD)        SAVE CALLING REGS
         BALR  RC,0                USE 12 AS BASE
         USING *,RC
         ST    RD,SAVED            SAVE REG 13
         B     START
         DC    C'VMSPY  : R&REL '
         DC    C'&SYSDATE '
         DC    C'&SYSTIME '
         CNOP  2,4
START    EQU   *
         LA    RD,SAVEREGS         OUR SAVE AREA
         DMSKEY NUCLEUS            NEED KEY 0
          BAL   RE,INITIAL          DO INITIALIZATION  (MODIFY RDEVBLOK)
         BAL   RE,RDTERM           DO READ BUFFER....
         BAL   RE,TERMINAT         RESTORE REDEVBLOK FIELDS
         BAL   RE,WRTERM           WRITE TO OUR TERMINAL
RETURN   EQU   *
         DMSKEY RESET              RESET STORE PROTECT
         L     RD,SAVED            RESTORE 13
         LM    RE,RC,12(RD)        RESTORE REGS
         XR    RF,RF               CLEAR RETCODE
         BR    RE
         EJECT
INITIAL  ST    RE,EXITA+6
         MVC   LOCUU,8(R1)         CUU OF TERMINAL TO DISPLAY
         MVC   DISCUU,8(R1)        CUU """"""""""""""""""""""
         MVC   ATTCUU,8(R1)        CUU """"""""""""""""""""""
         LA    R6,LOCATE           LOCATE RIOBLOKS FOR TERMINAL
         LA    R7,LOCRESP          PUT CP RESPONSE HERE
         LA    R8,L'LOCATE         LENGTH OF COMMAND
         O     R8,=X'40000000'     TURN ON BIT 1
         LA    R9,LOCRESPL         LENGTH OF RESPONSE BUFFER
         DIAG  R6,R8,X'8'          ASK CP TO DO US A FAVOR
* CONVERT RDEVBLOK ADDRESS TO HEX...AND ADD 4 TO GET RDEVSTAT ETC.
         LA    R6,LOCRDEVB         SOURCE AREA
         LA    R7,6                LENGTH OF TRANSLATE
         LA    R8,RDEVWRK          WORK AREA (OUTPUT)
         BAL   RE,CVTCTH
         LA    R8,RDEVWRK          WORK AREA (OUTPUT)
         ICM   RF,B'0111',RDEVWRK  INSERT TRANSLATED RDEVBLOK ADDRESS
         LA    RF,4(,RF)           PLUS 4
         STCM  RF,B'0111',RDEVWRK  STORE BACK
         LA    R5,RDEVWRK          SOURCE AREA
         LA    R6,DCPADD2          WORK AREA
         LA    R7,3                LENGTH OF TR
         BAL   RE,CONVERT          DO THE CONVERSION
         LA    R6,DCPSTAT          DISPLAY RDEVSTAT FIELD
         LA    R7,DCPRESP2         PUT CP RESPONSE HERE
         LA    R8,L'DCPSTAT        LENGTH OF COMMAND
         O     R8,=X'40000000'     TURN ON BIT 1
         LA    R9,L'DCPRESP2       LENGTH OF RESPONSE BUFFER
         DIAG  R6,R8,X'8'          ASK CP TO DO US A FAVOR
         MVC   STCPDAT4,DCPSTATD   MOVE DATA TO STCP AREA
         CLC   DCPSTATD+4(2),CLASGRAF    GRAPHIC DEVICE ?
         BE    INIT010                   YES...OK CONTINUE...
         WRTERM MSG01,L'MSG01            WRITE ERROR MESSAGE
         B     RETURN                    AND EXIT IMMEDIATELY
INIT010  EQU   *
         LA    RF,36(,RF)          GO TO VMBLOK POINTER
         ST    RF,VMBPOINT         STORE IT
         LA    R5,VMBPOINT         SOURCE AREA
         LA    R6,RDEVWRK3         WORK AREA
         LA    R7,4                LENGTH OF TR
         BAL   RE,CONVERT          DO THE CONVERSION
*DISPLAY RDEVUSER FIELD SO THAT WE CAN USE 'STCP' TO RESTORE IT LATER
         MVC   DCPADD,RDEVWRK3+2   MOVE IT
         MVC   STCPADD2,RDEVWRK3+2 MOVE IT
         LA    R6,DCPCOMM          DISPLAY RDEVUSER FIELD
         LA    R7,DCPRESP          PUT CP RESPONSE HERE
         LA    R8,L'DCPCOMM        LENGTH OF COMMAND
         O     R8,=X'40000000'     TURN ON BIT 1
         LA    R9,L'DCPRESP        LENGTH OF RESPONSE BUFFER
         DIAG  R6,R8,X'8'          ASK CP TO DO US A FAVOR
         MVC   STCPADD3,DCPVMB     VMBLOK PTR
         MVC   STCPAD3A,DCPATT     VIRTUAL ATTACHED ADDRESS ETC.
* CONVERT RDEVBLOK ADDRESS TO CHARACTER
         LA    R5,RDEVWRK          SOURCE AREA
         LA    R6,RDEVWRK2         WORK AREA
          LA    R7,3                LENGTH OF TR
         BAL   RE,CONVERT          DO THE CONVERSION
*  NOW DISABLE THE TERMINAL
         LA    R1,DISABCOM         DISABLE COMMAND
         LA    R2,L'DISABCOM       COMMAND LENGTH
         DIAG  R1,R2,X'0008'       ISSUE DISABLE
         MVC   STCPADD1,RDEVWRK2   TO STCP FOR RDEVBLOK
         MVC   STCPADD4,RDEVWRK2   TO STCP FOR RDEVBLOK
         LA    R1,STCPCMD1         ISSUE STCP COMMAND
         LA    R2,STCPLTH1         LENGTH
         DIAG  R1,R2,X'0008'       MODIFY RDEVBLOK
         LA    R1,ATTCOM           ATTACH COMMAND
         LA    R2,L'ATTCOM         COMMAND LENGTH
         DIAG  R1,R2,X'0008'       ISSUE ATTACH
EXITA    EX14
GETIME   ST    RE,EXITB+6
         LA    RC,DATETIME         OUTPUT FIELD FROM DIAGNOSE
         DIAG  RC,R0,X'000C'       ISSUE VIRTUAL TIMER DIAGNOSE
EXITB    EX14
* SUBROUTINE TO CONVERT HEX TO PRINTABLE CHARACTERS.              *
* ....... ON ENTRY REG 5 MUST HAVE ADDRESS OF AREA TO BE TRANS.   *
* ....... REG 6 MUST HAVE ADDRESS OF RESULTANT FIELD.             *
* ....... REG 7 MUST CONTAIN THE NUMBER OF BYTES TO BE TRANSLATED *
CONVERT  ST    14,EXITC+6
         STM   8,13,CONVSAVE            SAVE ENTRY REGISTERS
         SR    R2,R2                    CLEAR REGISTER R2
CONV010  IC    R2,0(5)                  +------------------------+
         SRDL  R2,4                     | SPLIT BYTE INTO REG C/D|
         SRL   R3,28                    |........................|
         STC   R2,CONV020               +------------------------+
         STC   R3,CONV030              STORE AND TRANSLATE SPLIT BYTE
         TR    CONV020(2),CONV040      TRANSLATE IT
         MVC   0(2,6),CONV020          MOVE TRANSLATED BYTE TO AREA
         LA    5,1(5)                  GET NEXT BYTE
         LA    6,2(6)                  INCREMENT WORK AREA
         BCT   7,CONV010               DO IT UNTIL COMPLETE
         LM    8,13,CONVSAVE
EXITC    EX14
         EJECT
* CONVERT CHARACTER DATA TO HEX DATA.
* R6 = SOURCE AREA
* R7 = LENGTH OF SOURCE AREA
* R8 = RESULT AREA
* R9 = WORK REGISTER
* NOTE: WORK AREA WILL BE EXACTLY 1/2 THE SIZE OF THE SOURCE AREA
CVTCTH   ST    RE,EXITF+6
         LR    R1,R8               SAVE R8 CONTENTS
         NI    CVTSW,X'00'         INITIALIZE
         LR    R9,R7               LOAD LENGTH OF SOURCE INTO R9
         SLR   R8,R8               CLEAN FOR DIVIDE
         D     R8,=F'2'            DIVIDE BY 2
         LTR   R8,R8               ANY REMAINDER ?
         BZ    CVT000
         LA    R9,1(,R9)           PLUS 1
CVT000   BCTR  R9,R0               -1
         LR    R8,R1               RESTORE R8 CONTENTS
         AR    R8,R9               POINT TO LAST BYTE
         AR    R6,R7               GO TO LAST BYTE OF SOURCE
         BCTR  R6,R0               BACKUP 1
CVT005   MVC   CVTWK1,0(R6)        MOVE SOURCE BYTE TO WORK AREA
         TR    CVTWK1,CVTTRAN      TRANSLATE IT
         TS    CVTSW               CHECK SWITCH
         BNZ   CVT010              IF NOT ZERO DO MVO
         MVN   0(1,R8),CVTWK1      MOVE NUMERIC
         BCTR  R6,R0               GO BACK 1
         BCT   R7,CVT005           GET NEXT BYTE
          B     EXITF               GET NEXT BYTE
CVT010   MVO   0(1,R8),CVTWK1      MOVE NUMERIC TO ZONE
         NI    CVTSW,X'00'         MAKE SURE MVN IS NEXT
CVT020   EQU   *
         BCTR  R8,R0               GO BACK 1
         BCTR  R6,R0               GO BACK 1
         BCT   R7,CVT005           GET NEXT BYTE
EXITF    EX14
RDTERM   ST    RE,EXITG+6
         LH    R7,TARGCUU          TUBE ADDRESS TO DO RD BUFFER
         LA    R6,RDBUFF           READ BUFFER CCW
         ST    R6,X'48'            STORE INTO CHANNEL ADDRESS WORD
         TIO   0(R7)               TEST TUBE
         BC    2,*-4
         SIO   0(R7)               START I/O
         BC    2,*-4
         TIO   0(R7)               LET IT FINISH
         BC    2,*-4
         LH    R7,X'46'            TO GET RESIDUAL COUNT
         LH    R9,RDBUFF+6         ORIGINAL CCW COUNT
         SR    R9,R7               NUMBER OF BYTES READ
         STH   R9,IOCOUNT          STORE IT...
EXITG    EX14
WRTERM   ST    RE,EXITH+6
         LA    R7,9                TUBE ADDRESS
         LA    R6,CLRCCW           CLEAR SCREEN
         TIO   0(R7)               LET IT FINISH
         BC    2,*-4
         DIAG  R6,R7,X'0058'       DO I/O TO OUR TUBE (CLEAR)
         BC    2,*-4               BR IF BUSY
         MVI   RDBUFFER+2,X'C6'    WCC (SOUND ALARM)
         LH    RF,IOCOUNT          I/O COUNT
         SH    RF,=H'2'            -3 FROM 3270 STUFF
         STH   RF,WRCCW+6          CHANGE I/O LENGTH
         LA    R6,WRCCW            WRITE CCW
         TIO   0(R7)               LET IT FINISH
         BC    2,*-4
         DIAG  R6,R7,X'0058'       DO I/O TO OUR TUBE (CLEAR)
         BC    2,*-4               BR IF BUSY
         LA    R1,CPSLEEP          CP SLEEP FOR AWHILE
         LA    R2,L'CPSLEEP
         DIAG  R1,R2,X'0008'       DO IT
EXITH    EX14
TERMINAT ST    RE,EXITI+6
         LA    R1,DETCOM           DETACH COMMAND
         LA    R2,L'DETCOM         COMMAND LENGTH
         DIAG  R1,R2,X'0008'       ISSUE DISABLE
         LA    R1,STCPCMD2         ISSUE STCP COMMAND
         LA    R2,STCPLTH2         LENGTH
         DIAG  R1,R2,X'0008'       MODIFY RDEVBLOK
         LA    R1,STCPCMD4         ISSUE STCP COMMAND
         LA    R2,STCPLTH4         LENGTH
         DIAG  R1,R2,X'0008'       MODIFY RDEVBLOK
EXITI    EX14
         CNOP  0,8
WAITPSW  DC    X'FF060000',AL4(0)
CLRCCW   DC    X'19',AL3(0),X'20',X'FF',H'1'
WRCCW    DC    X'29',AL3(RDBUFFER+2),X'20',X'90',AL2(0)
TARGCUU  DC    X'0400'
RDBUFF   CCW   X'02',RDBUFFER,X'20',2048
CPSLEEP  DC    C'CP SLEEP 10 SEC'
         DS    0D
VMSPINFO DS    0CL32
         DS    CL16
USERID   DS    CL8
         DS    CL8
 SAVEREGS DS    18F
VMBPOINT DS    1F
SAVED    DS    F
IOCOUNT  DS    1H                  FROM SIO READ BUFFER
CONVSAVE DS    6F                  FOR HEX-CHAR CONVERSION
CONV020  DC    C' '
CONV030  DC    C' '
CONV040  DC    C'0123456789ABCDEF'   TRANSLATE TABLE
RDEVWRK  DS    XL3
RDEVWRK2 DS    CL6
RDEVWRK3 DS    CL8
LOCATE   DC    C'CP LOCATE CUU'
LOCUU    EQU   LOCATE+10,3
LOCRESP  DS    CL10                CONTAINS 'RCHBLOK   '
         DS    CL10                CONTAINS 'RCUBLOK   '
         DS    CL8                 CONTAINS  'RDEVBLOK'
         DS    1X                  CONTAINS X'15'
         DS    CL6                 CONTAINS 'XXXXXX'  (RCHBLOK ADDR)
         DS    CL4                 CONTAINS 4 BLANKS
         DS    CL6                 CONTAINS 'XXXXXX'  (RCUBLOK ADDR)
         DS    CL4                 CONTAINS 4 BLANKS
LOCRDEVB DS    CL6                 CONTAINS 'XXXXXX'  (RDEVBLOK ADDR)
         DS    CL10
LOCRESPL EQU   *-LOCRESP           LENGTH OF RESPONSE BUFFER
DISABCOM DC    C'CP DISABLE CUU'   DISABLE COMMAND
DISCUU   EQU   DISABCOM+11,3
ATTCOM   DC    C'CP ATTACH CUU * 400'    ATTACH COMMAND
ATTCUU   EQU   ATTCOM+10,3
DETCOM   DC    C'CP DETACH 400'          DETACH COMMAND
         SPACE 3
STCPCMD1 DC    C'STCP XXXXXX 00824001' MODIFY RDEVBLOK
STCPADD1 EQU   STCPCMD1+5,6
STCPLTH1 EQU   *-STCPCMD1
STCPCMD2 DC    C'STCP XXXXXX 000000 00000000'   MODIFY RDEVBLOK
STCPADD2 EQU   STCPCMD2+5,6
STCPADD3 EQU   STCPCMD2+12,6
STCPAD3A EQU   STCPCMD2+19,8
STCPLTH2 EQU   *-STCPCMD2
STCPCMD4 DC    C'STCP XXXXXX XXXXXXXX' MODIFY RDEVBLOK
STCPADD4 EQU   STCPCMD4+5,6
STCPDAT4 EQU   STCPCMD4+12,8
STCPLTH4 EQU   *-STCPCMD4
DCPCOMM  DC    C'CP DCP XXXXXX.8'
DCPADD   EQU   DCPCOMM+7,6
DCPRESP  DS    CL32
DCPVMB   EQU   DCPRESP+12,6
DCPATT   EQU   DCPRESP+20,4
DCPSTAT  DC    C'CP DCP XXXXXX'
DCPADD2  EQU   DCPSTAT+7,6
DCPRESP2 DS    CL32
DCPSTATD EQU   DCPRESP2+10,8
SCRADD   DS    H
CLASGRAF DC    C'40'
MSG01    DC    C'VMSPY01: Target Device is NOT a 3270.'
         CNOP  0,8
WORK8    DS    CL8
DATETIME DS    CL32
CVTTRAN  DC    X'00000000000000000000000000000000'       00-0F
         DC    X'00000000000000000000000000000000'       10-1F
         DC    X'00000000000000000000000000000000'       20-2F
         DC    X'00000000000000000000000000000000'       30-3F
         DC    X'00000000000000000000000000000000'       40-4F
         DC    X'00000000000000000000000000000000'       50-5F
         DC    X'00000000000000000000000000000000'       60-6F
         DC    X'00000000000000000000000000000000'       70-7F
         DC    X'00000000000000000000000000000000'       80-8F
          DC    X'00000000000000000000000000000000'       90-9F
         DC    X'00000000000000000000000000000000'       A0-AF
         DC    X'00000000000000000000000000000000'       B0-BF
         DC    X'000A0B0C0D0E0F000000000000000000'       C0-CF
         DC    X'00000000000000000000000000000000'       D0-DF
         DC    X'00000000000000000000000000000000'       E0-EF
         DC    X'00010203040506070809000000000000'       F0-FF
CVTWK1   DS    C                   WORK AREA
CVTSW    DS    X                   TO CONTROL MVN,MVO
         LTORG
RDBUFFER DS    CL2048
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
         END   VMSPY
James Young
Technical Support Manager
Reader's Digest Association (Canada)    ) Xephon 1988



































