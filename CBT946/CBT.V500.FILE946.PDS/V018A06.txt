 Reducing access time
In recent months one of my tasks has been to design and implement an on-line
system to catalogue the 2500 (or so) tapes that we have.  The concept is a
simple one and works well.  However, using EXECIO to search for a specific
volume number (using the LOC and ZONE options) takes considerable time and
represents an overhead in disk I/O.  In an attempt to resolve this problem I
wrote a binary chop sub-routine.  This reduced access time from 6-12 seconds
down to about 1-2 seconds.
Discovering that other routines could benefit from this approach I decided to
extend the code and create a general purpose utility.  The final solution is
printed below, although I'm sure further refinements could be added for specific
applications.  Our installation created a MODULE @ X'20000' but it could be
LOADed at any suitable location.
The command format is:
     BINCHOP fn fm ft loc key
Errors located in macro calls result in the relative rc value; other return
codes are:
     90 - too few arguments
     95 - invalid location value (must be non-zero numeric)
     99 - requested key not located
When a key is located the contents of that line (max length = 255) and the
location of the line (1-9999) are returned on the stack LIFO.
BINCHOP ASSEMBLE
*                           B I N C H O P
*  THIS MODULE PERFORMS A BINARY CHOP ON A CMS FILE USING THE KEY AND
*  RELATIVE KEY LOCATION AS SUPPLIED VIA THE EXTENDED PLIST. IF THE
*  KEY IS LOCATED THEN THE RECORD RETRIEVED IS PLACED LIFO ONTO THE
*  PROGRAM STACK TOGETHER WITH ITS LOCATION IN THE FILE. IF THE KEY
*  CANNOT BE LOCATED THEN A NON ZERO RETURN CODE IS RETURNED AND NO
*  ITEM IS STACKED.
*  THE COMMAND FORMAT IS : BINCHOP FN FT FM LOC KEY
BINCHOP  CSECT
         USING     BINCHOP,R12
         ST        R14,SAVRET        SAVE RETURN ADDRESS
         LR        R1,R0             TRANSFER EPLIST POINTER TO R1
         L         R2,4(,R1)         LOAD R2 WITH BEGARGS
         L         R3,8(,R1)         LOAD R3 WITH ENDARGS
         CR        R2,R3             CHECK FOR NO ARGS
         BE        RET90
         SR        R3,R2             SET COUNTER TO LENGTH OF ARGS
         LA        R4,ARGS           LOCATE ARG STORE FIELDS
         LA        R5,ADDRS          LOCATE ARG ADDRESS TABLE
         SR        R7,R7             CLEAR ARG COUNT
         EJECT
*                           P A R S E
*  PURPOSE : PARSE THE ARGUMENTS FROM THE EPLIST INTO ARGUMENTS
*            STORE AREA.
PARSE    EQU       *
         CLI       0(R2),C' '        CHECK FOR ARG DELIMITER
         BE        PARSE2
         MVC       0(1,R4),0(R2)     MOVE CHARACTER
         AH        R2,=H'1'          INCREMENT ARGUMENT POINTER
         AH        R4,=H'1'          INCREMENT ARG SAVE POINTER
         B         PARSEX
PARSE2   AH        R2,=H'1'          LOCATE NEXT ARGUMENT
         CLI       0(R2),C' '        CHECK FOR DELIMITER
         BNE       PARSE3            BRANCH IF NON-BLANK
         BCT       R3,PARSE2         ELSE RETURN FOR NEXT CHAR.
         B         RET90             END OF EPLIST IS SHORT ARG COUNT
PARSE3   AH        R7,=H'1'          INCREMENT DELIMITER COUNT
         CH        R7,=H'4'          CHECK FOR KEY ARGUMENT
         BE        KEYGEN            BRANCH IF SO
         AH        R5,=H'4'          ELSE INCREMENT STORE ADDR PTR
         L         R4,0(R5)          AND LOAD NEXT STORE ADDRESS
PARSEX   BCT       R3,PARSE          RETURN TO STORE NEXT CHARACTER
         B         RET90             END OF EPLIST IS SHORT ARG COUNT
          EJECT
*                          K E Y G E N
*  PURPOSE:  CALCULATE LENGTH OF KEY AND MOVE VALUE TO STORE AREA.
*            ALSO GENERATE AND STORE LENGTH OPERAND IN COMPARE
*            INSTRUCTIONS.
KEYGEN   EQU       *
         L         R3,8(,R1)           RELOAD ENDARGS
         SR        R3,R2               CALCULATE REMAINING BYTES
         CH        R3,=H'0'            CHECK FOR ZERO LENGTH
         BE        RET90
         SH        R3,=H'1'            DECREMENT FOR LENGTH OPERAND
         STCM      R3,B'0001',KEYGEN1+1
KEYGEN1  MVC       KEYVAL,0(R2)        MOVE THE BYTES
         STCM      R3,B'0001',MAIN1+1  STORE IN COMPARE INSTRUCTIONS
         STCM      R3,B'0001',ENDIT+1  FOR KEY COMPARISONS
         EJECT
*                          E D I T
*  PURPOSE:  VALIDATE LOCATION ARGUMENT FOR NON-ZERO NUMERIC AND
*            RIGHT JUSTIFY VALUE FOR PACKING.
EDIT     EQU       *
         LA        R2,LOC+7            LOCATE END OF LOCATION (SOURCE)
         LR        R4,R2               COPY INTO R4 (TARGET)
         LH        R3,=H'8'            SET LOOP
EDIT1    CLI       0(R2),X'FF'
         BE        EDIT2
         CLI       0(R2),C'0'          CHECK FOR LESS THAN X'F0'
         BL        RET95
         MVC       0(1,R4),0(R2)       MOVE CHARACTER
         SH        R4,=H'1'            DECREMENT TARGET POINTER
EDIT2    MVI       0(R2),X'F0'         REPLACE SOURCE BYTE WITH ZERO
         SH        R2,=H'1'            LOCATE NEXT SOURCE BYTE
EDITX    BCT       R3,EDIT1
         PACK      PACKWK,LOC          PACK IT
         CVB       R5,PACKWK           AND CONVERT TO BINARY
         CH        R5,=H'0'            CHECK FOR ZEROS
         BE        RET95
         EJECT
*                            I N I T
*  PURPOSE:  DETERMINE FILESIZE AND LRECL ETC. (AT THIS POINT R5
*            ALREADY HOLDS LOCATION VALUE).
         LA        R7,FILEIN           LOCATE FILE DEFINITION
         FSSTATE   (R7)                DETERMINE FILE SIZE AND FMODE
         CH        R15,=H'0'           CHECK RETURN CODE
         BNE       RET00
         MVC       FM,24(R1)           MOVE FMODE TO FILE DEFINITION
         LH        R2,34(,R1)          LOAD LRECL
         CH        R2,=H'255'          CHECK FOR MAX LENGTH EXCEEDED
         BH        INIT1               LEAVE AS DEFAULT MAXIMUM IF SO
         STCM      R2,B'0001',ATTNL    ELSE STORE LRECL DESIGNATOR
INIT1    LH        R2,=H'1'            R2 IS TOP LINE OF FILE
         LH        R3,26(,R1)          R3 IS BOTTOM LINE (FILE SIZE)
         LA        R8,ATTNBUFF-1       R8 IS RECORD POSITION-1
         AR        R8,R5               ADD LOCATION TO START POSITION
         BAL       R6,GENPTR           LOCATE FIRST MIDWAY POSITION
         EJECT
*                              M A I N
MAIN     EQU       *
         LR        R10,R3              SAVE CURRENT BOTTOM LINE
         SR        R10,R2              SUBTRACT TOP LINE
         BM        ENDIT               CHECK FOR NO MORE RECORDS
         FSREAD    (R7),BUFFER=ATTNBUFF,BSIZE=255,RECNO=(R5),
               ERROR=RET00
MAIN1    CLC       0(,R8),KEYVAL       COMPARE KEY WITH FETCHED RECORD
         BE        FOUND
         BH        FIRST               FETCHED KEY GT SEARCH KEY
         B         SECOND              FETCHED KEY LT SEARCH KEY
          EJECT
*                            F I R S T
FIRST    EQU       *
         LR        R3,R5              MID POSITION BECOMES BOTTOM LINE
         SH        R3,=H'1'           DECREMENT TO DISCARD LAST RECORD
         BAL       R6,GENPTR           GENERATE NEW MIDWAY POSITION
         B         MAIN                RETURN FOR COMPARE
         SPACE 2
*                            S E C O N D
SECOND   EQU       *
         LR        R2,R5               MID POSITION BECOMES TOP LINE
         AH        R2,=H'1'            INCREMENT TO DISCARD FIRST REC
         BAL       R6,GENPTR           GENERATE NEW MIDWAY POSITION
         B         MAIN                RETURN FOR COMPARE
         SPACE 2
*                            E N D I T
ENDIT    EQU       *                   NO MORE RECORDS TO PROCESS
         CLC       0(,R8),KEYVAL       CHECK FOR LAST RECORD = KEY
         BE        FOUND               BRANCH IF SO
         B         RET99               RETURN TO CALLING EXEC
         SPACE 2
*                            F O U N D
FOUND    EQU       *
         CVD       R5,PACKWK           CONVERT LOCATION TO DECIMAL
         UNPK      RECNO,PACKWK        UNPACK TO DISPLAY NUMERIC
         OI        RECNO+3,X'30'       CONVERT TO UNSIGNED
         B         RET
         EJECT
*                            G E N P T R
*  PURPOSE:  GENERATE MIDWAY POINTER RELATIVE TO CURRENT TOP AND
*            BOTTOM LINES.
GENPTR   EQU       *
         LR        R4,R2               LOAD R4 WITH CURRENT TOP LINE
         AR        R4,R3               ADD BOTTOM LINE
         SRDA      R4,32(0)            SHIFT RIGHT 32 BITS
         D         R4,=F'2'            GENERATE MIDWAY POINTER
         BR        R6
         SPACE 2
         EJECT
*                                R E T
RET      EQU       *
*  STACK RECORD
         LA        R1,ATTN             LOAD ADDRESS OF ATTN PLIST
         SVC       202                 CALL TO STACK RECORD
         DC        AL4(1)              IGNORE ERRORS
*  STACK REC NO
         LH        R2,=H'4'            LENGTH OF RECNO VALUE
         STCM      R2,B'0001',ATTNL    STORE IN PLIST
         MVC       ATTNBUFF,RECNO      MOVE RECNO VALUE TO BUFFER
         SVC       202                 CALL TO STACK RECORD
         DC        AL4(1)              IGNORE ERRORS
         SR        R15,R15             CLEAR RETURN CODE REGISTER
         B         RET00
RET90    LH        R15,=H'90'          SHORT ARGUMENT COUNT
         B         RET00
RET95    LH        R15,=H'95'          BAD LOCATION VALUE
         B         RET00
RET99    LH        R15,=H'99'          KEY NOT LOCATED
         B         RET00
RET00    L         R14,SAVRET          RESTORE RETURN ADDRESS
         BR        R14                 RETURN
         EJECT
*   E Q U A T E S   A N D   W O R K I N G   S T O R A G E
SAVRET   DS        F                  SAVE AREA FOR RETURN ADDRESS R14
         DS        0D
PACKWK   DS        CL8
          SPACE 2
*  BUFFER AREA FOR FSREAD AND ATTN FUNCTION
RECNO    DS        CL4                 RECORD LOCATION VALUE
*
ATTNBUFF DS        CL255               START OF BUFFER FOR ATTN FUNC
ATTNBUFL EQU       *-ATTNBUFF          EQUATE ATTNBUFF LENGTH
         SPACE 2
*  ATTN PLIST
ATTN     DS        0D
         DC        CL8'ATTN'
         DC        CL4'LIFO'
ATTNL    DC        AL1(ATTNBUFL)
         DC        AL3(ATTNBUFF)
         SPACE 2
*  ARGUMENTS' STORE AREA
ARGS     EQU       *
FILEIN   DS        0CL18
FN       DC        8C' '
FT       DC        8C' '
FM       DC        2C' '
LOC      DS        0CL8
         DC        8X'FF'
ADDRS    DC        AL4(FN),AL4(FT),AL4(FM),AL4(LOC)
KEYVAL   DS        CL50
R0       EQU       0
R1       EQU       1
R2       EQU       2
R3       EQU       3
R4       EQU       4
R5       EQU       5
R6       EQU       6
R7       EQU       7
R8       EQU       8
R9       EQU       9
R10      EQU       10
R11      EQU       11
R12      EQU       12
R13      EQU       13
R14      EQU       14
R15      EQU       15
         END
C M Whitehead
Programmer/Analyst
Pfizer (UK) Ltd     ) Pfizer (UK) 1988






















