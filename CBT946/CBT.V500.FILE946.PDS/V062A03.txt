CPU performance considerations


INTRODUCTION

In any VM system, there are four main areas that can impact
on the way the system performs.  These areas are:

o      CPU

o      Real storage

o      Paging

o      I/O.

On many occasions it is not possible to identify which of these
four areas is causing the bottleneck in system performance.
This article looks at the ways that can be used at a site to
alleviate any bottlenecks that might be due to CPU and real
storage constraints.


CPU CONSTRAINTS

Running a CPU 100% busy is not usually a problem.
However, if the CPU is saturated, performance tends to
gradually and smoothly degrade the level of service offered to
users working from their terminals.

CPU performance can, in general, be improved by ensuring
that the CPU is used fully for productive work.  This can be
done in a number of ways.  For example, batch work can be
scheduled to run out of hours.  In this way, the CPU is being
used for more hours of the day, and, also, the CPU is free to
run more important interactive work during the 9-5 working
day.  This means that users sitting at terminals will get a
response back on their screens faster, and will be able to
perform more work in a day than if they spent a lot of their
time waiting for a response.  This is clearly of economic
benefit to their company.

Service virtual machines and important applications should be
given preferential access to the CPU.  This, again, ensures that
users doing important work are most productive.  This can be
achieved by using the SET commands.  With VM/SP and
VM/SP HPO, SET PRIORITY and SET FAVOR can be used.
With VM/XA and VM/ESA, SET SHARE and SET
QUICKDSP can be used.

Unnecessary CPU cycle usage should be eliminated.  This can
best be achieved by ensuring that all applications are tuned.

CPU cycles can go unused if there are storage or I/O waits.
Therefore, storage and I/O waits should be eliminated.  Some
suggestions of ways that would help eliminate storage waits are
given later.
Where hardware assists are available on a processor, they
should always be used.  For example, ECPS, SIE, and VMA.

If the CPU is the bottleneck, and all else fails, the only choices
left are to upgrade the processor, or install a faster one.


REAL STORAGE CONSTRAINTS

Real storage is divided up into 4KB pages, and it can be a
bottleneck when not enough pages are available for all the
virtual machines that want to process at any one time.

One way to overcome this bottleneck is to install more real
storage.  However, if a site is using VM/SP they are restricted
to a maximum of 16MB, and an HPO site is restricted to a
maximum of 64MB.  A site that has reached its maximum
either lives with the limitation, looks to a third-party alternative
(such as Software Pursuits' VM/XRM), or has to migrate the
version of VM installed - which these days would involve a
move to VM/ESA - and then installs more real storage.

The alternative to installing more real storage is to maximize
the number of pages in the Dynamic Paging Area (DPA), the
part of real storage that is available to virtual machines.  This
can be achieved in a number of ways.

At HPO sites, the size of the PRIME area should be changed to
a much lower value than the default because the IBM supplied
default value is almost always much bigger than is ever
required.

The occurrence of free storage extends should be kept to a
minimum.  This can be done by initially ensuring that the size
of the FREE area allocated in DMKSYS is large enough.  The
amount of space that the Free Storage Area (FSA) requires in
order to store tables and control blocks should be kept to a
minimum.  While the system is running, the MIGRATE
command can be used, with HPO, to encourage inactive
segment tables to move from the Free Storage Area to paging
devices.  Idle users should be encouraged to log off, thus
freeing space used by virtual machine control blocks, and FSA
space filling spool-file blocks should be eliminated by deleting
unwanted spool files.

Space can also be saved in the FSA by removing unnecessary
devices from users' directory entries.  This reduces the number
of control blocks used for each virtual machine.  Virtual
addresses should be consecutively numbered.  This reduces the
number of virtual channel and virtual control unit blocks used.

The size of the DPA can be increased by reducing the size of
the resident nucleus.  This can be achieved by ensuring that
unwanted device definitions are removed from DMKRIO or
HCPRIO.  It can also be reduced by removing any unwanted
modules from the loadlist.

More DPA space can be made available by reducing the space
allocated to the trace table.  With DMKSYS (SYSCOR macro)
and HCPSYS (SYSSTORE macro), it is possible to alter the
size of the trace table using the TRACE= parameter.  The
default is almost always much larger than necessary, and
should be kept small.  If debugging is envisaged the value
should be big enough for debugging to take place.  However, if
the system is fairly stable, this value can be reduced to as low
as 4KB.


CONCLUSION

Regular users of VM could probably add other hints and tips to
the list, but I think that these offer a good starting point for
anyone experiencing performance problems associated with
CPU or real storage constraints.

J Phillips
Consultant (UK)

