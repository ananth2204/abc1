Restore VM disk packs

This EXEC will restore VM disk packs using DDR from a
DDR back-up tape. The following requirements have to be
satisfied:

o      The user-id running this EXEC must have the appropriate
      privilege for MSGNOH and ATTACH instructions.

o      This user's directory must include the option LNKNOPAS
      if this EXEC is running in VM/XA 2.1 or above.

o      The DASD PARMS file must define all eligible volumes.

Restrictions:

o      CP-owned volumes cannot be restored with this EXEC
      because they have page and spool areas on them. Restoring
      these areas will abend the system.

o      User SYSDUMP1 must have a full-pack mini-disk on all
      VM volumes.

o      The virtual address of the mini-disk must be present in a
      file named DASD PARMS.

To carry out a mini-disk restore, use the following procedure:

o      Check if the user is signed on. The user must be logged off.

o      Link to the specified mini-disk in read-only mode.

o      Check for R/W link to this mini-disk. If none, then link to
      it in R/W mode.

o      Restore the mini-disk with the reorder option of DDR.

To carry out a volume restore use the following procedure:

o      Check the DASD PARMS file for the vol-id and get the
      virtual address.

o      Link the full-pack mini-disk in multiple write mode.

o      Restore the volume.


RESTORE EXEC

/*            R E S T O R E    E X E C
 *            SEE BOTTOM for notes and comments                       */
Trace off
'CLOSE CONSOLE'                          /* close console file  */
'VMFCLEAR'                               /* clear screen        */
'SPOOL CONSOLE * CL A START'
address command 'EXECIO * CP (SKIP STRING DET 5AA'
say ''
say ''
'msgnoh *  * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * *'
'msgnoh *  * *               V M    R E S T O R E               * * * *'
'msgnoh *  * * * ** * * * * * * * * * * * * * * * * * * * * * * * * * *'
do forever
   say''
   say''
   'msgnoh *         Choose one of the following options :'
   'msgnoh * 1-Mini-disk Restore   2-Volume Restore    3-Quit '
   pull Type
   if Type > 0 & Type < 4 then leave
end
if type = 1 then call mdisk_restore
if type = 2 then call volume_restore
call close
exit 0
mdisk_restore:
reply = ''
do while (reply ¬= 'X1' & reply ¬= 'Q'  )
   'MSGNOH * Must have the following information ready : '
   say''
   'MSGNOH *           - USER-ID that owns the mini-disk to be restored'
   'MSGNOH *           - MINI-DISK address (example 191 or 193 etc)'
   'MSGNOH *           - MINI-DISK start track number '
   say''
   'MSGNOH *      All the above information can be obtained from '
   'MSGNOH *      the users VM DIRECTORY entry'
   'MSGNOH *      Type "X1" to continue  OR "Q" to quit '
   pull reply
end
if reply = 'Q' then call close 1
say ''
do forever
   'MSGNOH *     TYPE IN THE USER-ID THAT OWNS THE MINI-DISK : '
   parse upper pull userid .
   'MSGNOH *  ENTER mini-disk  address to be restored : '
   parse upper pull vaddr .
   'MSGNOH *  ENTER mini-disk  STARTING track number : '
   parse pull start .
   response = ''
   do while repsonse ¬= 'Q' & response ¬= 'Y' & response ¬='N'
     'VMFCLEAR'
     say ''
     say ''
     'MSGNOH *  ARE THE FOLLOWING ENTRIES CORRECT (Y/N Q-Quit): '
     say ''
     'MSGNOH *  User-id to be restored  : 'STRIP(userid)
     'MSGNOH *  Mini-disk address       : 'vaddr
     'MSGNOH *  Starting track number   : 'start
     pull response
     if response = 'Y' | response = 'N' then leave
   end
   if response = 'Q' then call CLOSE 1
   if response = 'Y' then leave
end
response = ''
do while response ¬='Q' & response¬='OKAY'
  ADDRESS COMMAND 'EXECIO * CP (STRING Q 'USERID
   pull errmsg status termaddr
   if errmsg = 'HCPCQV003E' then                 /*   no such user    */
        call inv_userid userid
   else if errmsg = 'HCPCQU045E' then response = 'OKAY'/*not logged on*/
   else
   if status = '-' & termaddr = 'DSC' then       /* disconnected user */
     do
        say ''
        'MSGNOH *      User "' userid '" is disconnected '
        'MSGNOH *      This user-id must be logged off !!'
        say ''
        'MSGNOH *      Type 'X1' to continue  OR 'Q' to quit '
        pull response
     end
   else if status = '-' & termaddr ¬= 'DSC'  then
     do
        say ''
        'MSGNOH *      User "' userid '" is signed on terminal : 'termid
        'MSGNOH *      This user-id must be logged off !!'
        say ''
        'MSGNOH *      Type 'X1' to continue  OR 'Q' to quit '
        pull response
     end
     if response = 'Q' then call close 1
end
call GET_LINK
call GET_TAPE
address command 'EXECIO * CP (STRING QUERY V 5AA '
parse pull . . devtype volid . size . . . . .
end = start + size-1
makebuf                       /* DDR statements for mini-disk restore */
queue 'SYSPRINT CONS'
queue 'INPUT 'tape' 3420 '
queue 'OUTPUT 5AA ' strip(devtype) ' SCRATCH'
queue 'RESTORE 'start' To ' end ' REORDER TO 0'
queue ' '
queue ' '
address cms 'DDR'
/*                                FOR DEBUGGING  purposes only
do queued()
  pull t
  say t '~'
end
*                          ************************* */
return
get_link:
ok = ''
do while ok¬='OKAY'
 address command 'EXECIO * CP (STRING LINK 'USERID VADDR '5AA RR'
 linkrc = rc
 do queued()
  pull stackline
  if word(stackline,1)='HCPLNK107E' then call no_mdisk vaddr
 end
 if linkrc = 0 then
  do
   makebuf
   address command 'EXECIO * CP (STRING QUERY LINKS 5AA'
   i = 1; links = 0;
   do queued()
    pull stackline.i
    if word(stackline.i,3) ='R/W,' | word(stackline.i,3)= 'R/W' then
                links = 1
    i = i+1
   end
   desbuf
   stackline.0 = i-1
  end
 if links=0 then
   do
     address command 'EXECIO * CP (SKIP STRING DET 5AA '
     address command 'EXECIO * CP (SKIP STRING LINK 'USERID VADDR ,
                                                               '5AA MW '
     if rc=0 then ok= 'OKAY'
   end
 else if links=1 then call more_link
end
return
more_link:
parse var stackline.1 name  .          /* show only the first user */
'MSGNOH *  User "' name ' has to be LOGGED off since '
'MSGNOH *   they have a WRITE access to this mini-disk'
say ''
'MSGNOH *      Type "X1" when user is logged off '
'MSGNOH *      OR type "Q" to quit '
pull reply;
if reply ¬= 'Q' & reply ¬= 'X1' then signal more_link
if reply = 'Q' then call close 1
return
/*  User requested a volume restore                                  */
VOLUME_RESTORE:
trace off
say''
say''
reply = ''
do while reply ¬= 'Y' & reply ¬= 'Q'
   'MSGNOH *    Enter the VOLUME ID to be RESTORED : '
   pull volid
   say ''
   'MSGNOH *    Enter the REAL address of this volume : '
   pull raddr
   say ''
   'MSGNOH *        VOLUME to be RESTORED is   => "'strip(volid)'"'
   'MSGNOH *        Real Address of volume is  => "'STRIP(raddr)'"'
   'MSGNOH *            Enter (Y/N Q-QUIT) '
   pull reply
end
if reply = 'Q' then call CLOSE 1
address command 'EXECIO * CP (STRING Q 'raddr
parse pull . . word3 sys rvolid .
if STRIP(word3) ¬= 'CP' then             /* volume not att to system*/
 do
   address command 'EXECIO * CP (SKIP STRING ATT 'raddr' SYSTEM'
   if rc¬= 0 then call prob_dasd
 end
if SYS = 'OWNED' then        /* CP OWNED volumes contain spool/page */
   do
     say ''
     'MSGNOH *    This volume cannot be restored with the system   '
     'MSGNOH *    up since this is CP OWNED volume and may'
     'MSGNOH *    contain SPOOL/PAGE space '
     say ''
     'MSGNOH *       MUST do a STAND-ALONE restore of this volume'
     say ''
     call close 1
   end
if volid ¬= rvolid then  call diff_volid
cntrl = ''
eof. = 0
Call virt_addr
ADDRESS COMMAND 'EXECIO * CP (SKIP STRING DET 'VADDR
ADDRESS COMMAND 'EXECIO * CP (SKIP STRING LINK * 'VADDR VADDR ' W'
if rc¬=0 then call linkw_prob
call GET_TAPE
makebuf
queue 'SYSPRINT CONS'
queue 'INPUT 'tape '3420'
queue 'OUTPUT 'vaddr strip(devtype) ' SCRATCH '
queue 'RESTORE  ALL'
address cms 'DDR'
do queued()
   pull t
   say t
end
call close 1
'cmstype rt'
exit 00
DIFF_VOLID:
reply = ''
do while reply ¬= 'X1' & reply¬= 'Q'
 'MSGNOH  *   Volume Id specified is different from that on this device.'
 'MSGNOH  *   Type "X1" to proceed OR  type "Q" to quit'
 pull reply
end
if reply = 'Q' then call close 1
return
virt_addr:
eof. = 0
curline. = 0
makebuf
queue'ZONE 5 10'
queue '/'volid'/'               /* find vol-id in DASD parms */
queue 'EXTRACT /EOF'            /* get end of file setting   */
queue 'EXTRACT /CURLINE'        /* get current line          */
queue 'QQUIT'
'XEDIT DASD PARMS *'
if eof.1 = 'ON' then
   call NOVOL
parse var curline.3 vaddr . devtype
dropbuf
return
CLOSE:
trace off
say ' '
say ' '
'msgnoh *       Exiting Restore EXEC ... '
say ' '
if type= 1 then                   /* mini-disk restore  */
   ADDRESS COMMAND 'EXECIO * CP (SKIP STRING DET 5AA'
else if type = 2 then             /* volume restore     */
   ADDRESS COMMAND 'EXECIO * CP (SKIP STRING DET 'vaddr
'SET CMSTYPE HT'
'CLOSE CONSOLE'
'TRANSFER RDR ALL TO * PRT'
'SPOOL CONSOLE STOP'
'SET CMSTYPE RT'
If arg(1) = 1 then exit 999
return
GET_TAPE:
'ID (STACK'                               /* Who is running this EXEC */
pull iam .
response = ' '
do while ( response ¬= 'Y' & response ¬= 'Q' )
  say ''
  'MSGNOH *    TYPE TAPE DRIVE ADDRESS YOU LIKE TO USE : '
  pull tape
  say ''
  'MSGNOH *    RESTORE WILL USE TAPE DRIVE :=> 'tape'   (Y/N Q-Quit) :'
  pull response
end
if response = 'Q' then call close 1
'QUERY 'tape '(STACK'                     /*   query tape address     */
 pull word1 word2 word3 word4 person asaddr .
 first2 = word1 || word2
 if first2= 'ATAPE '  then                /*   interven. required     */
 if queued() > 0 then
   pull word1 word2 word3 word4 person asaddr .    /*  get next line  */
 else if first2 = 'HCPQDV040EDEVICE' then
         signal No_drive tape             /*    tape does not exist   */
 if word3 = 'FREE' then
    do
     ADDRESS COMMAND 'EXECIO * CP (SKIP STRING ATTACH 'TAPE '*'
     saverc = rc
     if saverc ¬= 0 then
       signal att_prob tape
    end
   if word3 = 'ATTACHED' then             /* tape attached to user    */
       call already_att tape iam person asaddr
response = ''
trace i
do while response ¬= 'X1' & response ¬= 'Q'
   'MSGNOH * Mount the appropriate back-up tape on ' tape
   'MSGNOH * Enter "X1" to continue  "Q" to quit '
   pull response
end
if response='Q' then
  call close 1
trace off
return
already_att:
parse arg tape iam person asaddr
IF ( STRIP(person) ¬= STRIP(iam) | STRIP(asaddr) ¬= STRIP(tape) ) THEN
 Do
  reply = ' '
  do  while reply ¬= 'X1'
   say ''
   'MSGNOH *     TAPE DRIVE 'tape' IS ATTACHED TO 'person
   say ''
   'MSGNOH *     TYPE 'X1' TO DETACH DRIVE 'tape
   pull reply
   if reply='X1' then
     do
      'DET 'tape person
      'CP SLEEP 2 SEC'
      'ATTACH 'tape' * 'tape
     end
  end       /*end of while loop */
 End
return
att_prob:
say ''
say ''
'MSGNOH *    Error trying to attach tape drive 'arg(1)
say ''
say ''
call close 1
linkw_prob:
say ''
say ''
'MSGNOH *    Error trying to LINK full pack mini-disk in Write mode '
say ''
call close 1
inv_userid:
parse arg userid .
say ''
say ''
'MSGNOH *    User-id "'userid'" Does not exist in Directory.'
say ''
say ''
call close 1
no_mdisk:
parse arg minidisk .
say ''
say ''
'MSGNOH *    User-id "'userid'" Does not have a mini-disk - 'minidisk
say ''
say ''
call close 1
ALREADY_ATT:
trace off
'ID (STACK'           /* who is running this restore*/
PULL thisid .
'Q 'arg(1) '(stack'
pull . . . . person asaddr
if person = thisid & asaddr = 181 then return  /* Drive ready to use  */
say''
Do forever                            /* attached to someone else */
  'msgnoh *    TAPE DRIVE 'arg(1)' IS ATTACHED TO 'person
  'msgnoh *    Type 1- Quit  2- TO DETACH DRIVE 'arg(1)' and continue'
  pull reply
  if reply = 1 then Exit 00
  If reply = 2 then leave
end
ADDRESS COMMAND 'EXECIO * CP (SKIP STRING DET 'arg(1) person
ADDRESS COMMAND 'EXECIO * CP (SKIP STRING ATTACH 'arg(1)' * 181'
trace off
return
GOT_CP_VOL:
say ''
say ''
'MSGNOH *    CANNOT RESTORE A MINI-DISK OR VOLUME THAT IS CP-OWNED    '
say ''
'MSGNOH *           RESTORE MUST BE DONE STAND-ALONE ...              '
call close 1
PROB_DASD:
say ''
say ''
'MSGNOH *    Error trying to access device : 'raddr
'MSGNOH *    Device may be "OFFLINE"'
say ''
call close 1
NO_DRIVE:
say ''
say''
'MSGNOH *    TAPE DRIVE 'arg(1)' DOES NOT EXIST.'
'MSGNOH *    PLEASE RE_RUN THIS EXEC WITH CORRECT TAPE DRIVE...'
say ''
say''
call close 1
NOVOL:
say''
'MSGNOH *   Volume "'Strip(Volid)'" does not exist in "DASD PARMS" file'
say ' '
call CLOSE 1
VOL_NOTVM:
say''
'MSGNOH *   * E R R O R   Volume "'Strip(Volid)'" is not a VM PACK'
say ' '
call CLOSE 1
Filenot_Found:
filename = arg(1)
'MSGNOH *   File "DASD PARMS" not found ... '
say ' '
call CLOSE 1


Satish Warrier
El Camino College (USA)

