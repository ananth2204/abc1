Abbreviated file-ids and user-ids

Over the years, I have written many EXECs which I use daily.
It seems that most of them use a file-id and/or user-id for
parameters. All (or nearly all) of my EXECs allow file-ids and
user-ids to be abbreviated according to a pattern which is
meaningful to me. This is accomplished by using two EXECs,
FILEABBR and USERABBR, to handle abbreviations. Then,
when any EXEC processes a file-id or user-id, it is a simple
matter to pass the value through these functions prior to
processing. This is similar to the use of abbreviations with a
NAMES file or with a PROFS OFS OFSMCNTL file. A
sample EXEC might make use of these EXECs as follows:

   arg userid fileid
   userid = userabbr(userid)             /*  Allow for abbreviations  */
   fileid = fileabbr(fileid)             /*  Allow for abbreviations  */

The EXECs below are the ones I use. Others may wish to make
modifications to suit their own preferences.

The first EXEC converts a potentially abbreviated file-id to an
expanded form. It is invoked as a REXX function in the
following manner:

   long_fileid = fileabbr(short_fileid, <default_fileid>)

Short_fileid is a CMS file-id with spaces separating the
filename, filetype, and filemode. It may also be a single word
which is an abbreviation for a filename, filetype, and filemode.

Long_fileid is the filename, filetype, and filemode separated by
single spaces and translated to upper case.

Default_fileid is a filename, filetype, and filemode separated
by spaces which is to be used if the corresponding filename,
filetype, or filemode is either blank or '='. (This subtitution
takes place after the search for abbreviations has taken place.)
A value which is blank or '.' indicates that there is no default,
and the output value will be taken unchanged from the input
value (even if it is blank or omitted).

The filename (in either format) may be abbreviated, in which
case the following value will be substituted: SPOOLMAN for
SM;  SMSERVER for SMS; the user-id of the machine that is
running for U; a value supported by the USERABBR EXEC,
which currently exists, for /xxxxxxxx.

The filetype (in either format) may be abbreviated. For a list of
the acceptable abbreviations and their corresponding
expansions, see the settings of variables ft_short and ft_long.
Some special cases are: omitted = EXEC; /MAX = the highest
numeric value found; '.' = the filetype of the first file-id (in
LISTFILE sequence) which currently exists.

The filemode specification may, optionally, be cuu, omitted, or
'.' (period). If cuu, the disk will be ACCESSed (using the first
unused filemode) if necessary. If omitted, a default value is not
selected; the result is a file-id containing just a filename and
filetype without a filemode. What happens from there depends
upon how you use it. Of course, a default filemode may be
specified by using a default_fileid as described above. If '.'
(period), the filemode of the first file-id (in LISTFILE
sequence) which currently exists is used. If the /MAX filetype
is used, a filemode is recommended.

A single word may be used as an abbreviation for a filename,
filetype, and filemode as follows: SYSTEM HISTORY A for
SH; SPOOLMAN HISTORY A for SMH; and TIME BANK A
for TB.

/*                   Expand an Abbreviated File-id                    */
/*  Parse the argument(s)                                             */
address COMMAND
arg ,
single_word 1 fn ft fm . , default_fn default_ft default_fm . 1 default_fileid
if fn = '' & default_fn = '' then
   return         /*  FILEABBR function was invoked with null file-id */
if 'LENGTH'(fn) > 8 then fn = 'LEFT'(fn,8)
if 'LENGTH'(ft) > 8 then ft = 'LEFT'(ft,8)
/*  Check for a single word abbreviation for fn + ft + fm             */
x = 'FIND'('SH SMH TB',single_word)      /*  This order is important  */
if x > 0 then                                                /*  yes  */
   return expand_single_word(x)
/*  Process the filename                                              */
select
   when fn = 'IIS' then fn = 'IISUSER'
   when fn = 'SM'  then fn = 'SPOOLMAN'
   when fn = 'SMS' then fn = 'SMSERVER'
   when fn = 'U'   then fn = 'USERID'()
   when 'LEFT'(fn,1) = '/' then fn = 'USERABBR'('SUBSTR'(fn,2))
   otherwise nop                          /*  fn was not abbreviated  */
end   /*  select  */
/*  Process the filetype                                              */
if 'FIND'('SMSERVER SPOOLMAN',fn) > 0 then
   call spoolman_filetype  /* special abbreviations for SPOOLMAN only */
ft_short = 'A        G        D        E        EC       H' ,
           'L        LF       ML       M        MOD      N' ,
           'O        P        TM       TMK      TM*      XC'
ft_long  = 'ASSEMBLE CONFIG   DIRECT   EXEC     EXECCOMM HISTORY' ,
           'LISTING  LOGFILE  MACLIB   MACRO    MODULE   NOTES  ' ,
           'OPTIONS  PANEL    TAPEMAP  TAPEMAPK TAPEMAP* XEDITCOM'
x = 'FIND'(ft_short,ft)
select
   when ft = '' & default_fileid = '' then
      ft = 'EXEC'
   when x > 0 then
      ft = 'WORD'(ft_long,x)
   when ft = 'X' & fn ¬= 'X' then  /*  Do not convert X X to X XEDIT  */
      ft = 'XEDIT'
   when ft = '/MAX' then
      determine_max                 /*  Determine highest numeric ft  */
   otherwise nop                          /*  ft was not abbreviated  */
end
/*  Process the filemode                                              */
x = 'LENGTH'(fm)
select
   when x = 1 then
      if 'DATATYPE'(fm,'W') then          /*  1 digit decimal number  */
         call cuu_to_fm
   when x = 2 | x = 3 then
      if 'DATATYPE'(fm,'X') then
              /*  2 or 3 digit hex number  (careful if A0, C2, etc.)  */
         call cuu_to_fm
   otherwise                               /*  x = 0 ie fm is null    */
      nop
end   /*  select  */
/*  Final stuff                                                       */
if 'FIND'(fn ft fm,'.') > 0 then /*quick check since this is uncommon */
   call resolve_period
if default_fileid ¬= '' then  /*  quick check since this is uncommon  */
   call check_for_defaults
return fn ft fm
/*                         Subroutines                                */
/*  Check for default filename, filetype and/or filemode              */
check_for_defaults:
fn = check_for_default(fn,default_fn)
ft = check_for_default(ft,default_ft); if ft = '' then ft = 'EXEC'
fm = check_for_default(fm,default_fm)
return
check_for_default:
parse arg input, default
if default = '' | default = '.' then         /*  There is no default  */
   return input                                        /*  unchanged  */
if input = '' | input = '=' then
   return default
return input    /*  Explicit value - The default value is not needed  */
/*  Note that if the filemode is not a cuu or if the cuu cannot be
    converted to a filemode, it is left unchanged.  It is not our
    job here to issue error messages.  Who knows, maybe it's even a
    valid filemode such as "A" or "B1".                               */
cuu_to_fm:
cuu = fm         /*  Temporarily treat the fm specification as a cuu  */
'EXECIO 1 CP (VAR X STRING QUERY VIRTUAL' cuu
if rc ¬= 0 then   /*  It's not the cuu of a currently defined device  */
   return
if 'WORD'(x,1) ¬= 'DASD' then             /*  It's not a DASD device  */
   return
/*  The "fm" specifies the "cuu" of an attached MDISK                 */
if valid_fm(fm) then               /*  But it is also a valid fm ...  */
   return                     /*   So let's not presume to change it  */
fm = find_fm(cuu)           /*  Get the current filemode if ACCESSed  */
if fm = 'none' then do                    /*  not currently ACCESSed  */
   fm = find_fm()                     /*  Get the first available fm  */
   'ACCESS' cuu fm
   if rc ¬= 0 then
      fm = cuu                        /*  Restore the original value  */
   end
return
/*  Determinte the highest numeric file-id which exists               */
determine_max:
max_ft = -9999999                 /*  Minus sign is valid within ft!  */
x = 'QUEUED'()
'LISTFILE' fn '*' fm '(FMODE NOHEADER STACK LIFO'
do 'QUEUED'() - x /*  Looping is not affected when "x" is used below  */
   pull . x .                                           /*  filetype  */
   if ¬ 'DATATYPE'(x,'W') then                 /*  ft is not numeric  */
      iterate
   if x > max_ft then            /*  not sensitive to leading zeroes  */
      max_ft = x                          /*  retains leading zeroes  */
end   /*  do for LISTFILE output  */
ft = max_ft
return
/*  Expand a single word abbreviation for fn + ft + fm                */
expand_single_word:
arg x                         /*  Relative position in the FIND list  */
x.1 = 'SYSTEM   HISTORY A'                                   /*  SH   */
x.2 = 'SPOOLMAN HISTORY A'                                   /*  SMH  */
x.3 = 'TIME     BANK    A'                                   /*  TB   */
return x.x
/*  Find a filemode                                                   */
find_fm:
procedure
arg cuu .
if cuu ¬= '' then do
        /*  Find the (first) filemode by which this disk is ACCESSed  */
   'QUERY DISK * (STACK'
   pull .                                               /*  headings  */
   do 'QUEUED'()
      pull . query_cuu fm .
      if query_cuu = cuu then do
         'DROPBUF'
         return fm                                      /*  ACCESSed  */
         end
   end
   return 'none'                                    /*  not ACCESSed  */
   end
/*  Find the first unused filemode                                    */
fm_list = 'ABCDEFGHIJKLMNOPQRTUVWXZ'            /*  Excludes S and Y  */
do until fm_list = ''
   parse var fm_list x 2 fm_list  /*Select the next potential filemode*/
   'QUERY DISK' x '(STACK'        /*  Find out if it is already used  */
   if queued() = 1 then do        /*  Assume DISK 'fm' NOT ACCESSED.  */
      pull .
      return x
      end
   'DROPBUF'
end
return 'none'
/*  Check for a period in the filename, filetype and/or filemode      */
resolve_period:
'MAKEBUF'
if fn = '.' then fn = '*'     /*  At least one of these must be true  */
if ft = '.' then ft = '*'
if fm = '.' then fm = '*'
'LISTFILE' fn ft fm '(STACK FIFO'
if rc = 0 then
   pull fn ft fm                               /*  Use the first ...  */
else
 say 'The FILEABBR EXEC is unable to find an existing file for' fn ft fm
'DROPBUF'
return
/*  Process abbreviated filetypes which are valid only when the
    filename is SPOOLMAN                                              */
spoolman_filetype:
ft_short = 'A     K        C       G      I     L   P     F',
                                                       '        S     U'
ft_long  = 'ADMIN CHKPOINT CONTROL GLOBAL INDEX LOG PARMS',
                                              ' PERFSTAT STATS UNIVERSL'
x = 'FIND'(ft_short,ft)
if x > 0 then
   ft = 'WORD'(ft_long,x)
return
/*  Determine if a filemode is valid                                  */
valid_fm:
arg 1 x1 2 x2 3 x3
if x1 = '' | ,                                  /*  null = too short  */
   x3 ¬= '' | ,                                         /*  too long  */
   ¬ datatype(x1,'U') then                        /*  not alphabetic  */
   return 0
if x2 ¬= '' then                       /*  filemode number specified  */
   if x2 < 0 | x2 > 6 then /* filemode number is not numeric or is outside 0-6*/
      return 0
return 1                                          /*  valid filemode  */

The second EXEC is designed to be used as a REXX function
or subroutine. It is typically invoked as follows:

   x = userabbr(user-id)

where user-id may be any of the following: an exact user-id; an
abbreviation which is predefined in this EXEC; an abbreviation
which is predefined in the caller's nickname file (ie user-id
NAMES); or a pattern (see below).

The value returned is: the expanded user-id corresponding to an
abbreviated user-id which is predefined in this EXEC; the
expanded user-id corresponding to a nickname in the caller's
nickname file (ie user-id NAMES); the input value
(unchanged); a logged on user-id which closely matches a
pattern. A pattern is specified by including a '?' character
anywhere in the user-id field. The '?' itself is not used. If any
of the currently logged user-ids contain the pattern characters,
according to certain rules, that user-id is used. For the rules,
see the comments in routine pattern_processing.

If this EXEC is invoked as a command, it operates in a manner
similar to that described above. However, the expanded user-id
(if known) is displayed on the console (if invoked from the
CMS command line) or in the XEDIT message area (if invoked
while XEDIT is active).

/*                    Process Abbreviated User-ids                    */
/*  Look for a predefined abbreviation  (user-id sequence)            */
address COMMAND
parse source . invocation .
arg userid .
/*  Virtual machines defined by IBM (more or less)                    */
ia = '$P       $S' ,
     'AL1      DA       GCS      M        O        ON       PL' ,
     'R        V        VM       VT'
ie = '$PAGE$   $SPOOL$' ,
     'AUTOLOG1 DISKACNT GCSRECOV MAINT    OPERATOR OPERATNS PIPELINE' ,
     'RSCS     VTAM     VTAMAINT VTAMTEST'
ia = ia ,                                          /*  Office Vision  */
     'CAL      DBM      MBX      M1       M2       M3       M4' ,
     'M5       M6       M7'
ie = ie ,
     'US1CAL   US1DBM   US1MBX   US1MBX01 US1MBX02 US1MBX03 US1MBX04' ,
     'US1MBX05 US1MBX06 US1MBX07'
/*  Virtual machines defined 3M INTL which are managed by DTADF       */
da = 'AS       AL2      CM       CPS      EX       FP' ,
     'IM       KS       MM       QM       SD' ,
     'SMS      SW       SOG      SM       SO       TS       U' ,
     'VSD      VSM      VSX      W'
de = 'ARCHSPOL AUTOLOG2 CMAPMNT  CPSETMON EXECUTNR FULLPACK' ,
     'INDIMON  KICHSINK MISCMON  QUEUEMON SHUTDOWN' ,
     'SMSERVER SOFTWARE SOPTGCS  SPOOLIIS SUPEROPT TECHSP   UTILITY' ,
     'VITALDBM VITALMON VITALSXA WATCH'
/*  Virtual machines defined 3M INTL which are managed by others      */
oa = 'ADRM     MUF    CAB     CAW     GW      HD       MAIL' ,
     'OVM      ACS    SVM    TVM'
oe = 'ADRMAINT ADRMUF CABATCH CAWATCH GATEWAY HELPDESK MAILMON' ,
     'OVMAINT  STKACS VPVSVM VPVTVM'
/*  Real live human beings at 3M                                      */
ha = 'BIGMAC   DF       PA       HD       SOHNO    AG       SB' ,
     'BM       JS       DJ       DD       WK       MV       JK' ,
     'THS      DG       3M'
HE = 'CA000001 DTADF    DTAPA    HELPDESK JA000001 USXXX002 USSRM001' ,
     'US000002 US000003 US000004 US000005 US000006 US000007 US000008' ,
     'US000009 US000010 US000011'
/*  VMSI component machines and (some) system administrators          */
va = 'VMA      ARCH     VMB      VM3      VMJD     VMJ' ,
     'B1       B2       B3       B99      R1       VMW' ,
     'vmm      vmp      VMR      VMD      VMS      VML' ,
     'VMT      VMTL     VMX'
ve = 'VMACCT   VMARCH   VMBACKUP VMBSYSAD VMJDASD  VMJSYSAD' ,
     'VMLBAK01 VMLBAK02 VMLBAK03 VMLBAK99 VMLRES01 VMLWORK' ,
     'VMMONITR VMPSYSAD VMRMAINT VMSCHED  VMSECURE VMSPOOL' ,
     'VMTAPE   VMTLIBR  VMXSYSAD'
/*  Temporary (perhaps) machines                                      */
ta = 'xxx      yyy      zzz'
te = 'xxxxxxxx yyyyyyyy zzzzzzzz'
abbrev_list = ia da ha oa ta va
expand_list = ie de he oe te ve
x = find(abbrev_list,userid)
if x > 0 then                                              /*  found  */
   call success word(expand_list,x)
/*  Look for a match in the caller's nickname (NAMES) file            */
NAMEFIND ':nick' userid ':userid (STACK 1 LIFO'
if rc = 0 then do
   pull x                                    /*  the expanded user-id */
   call success x
   end
/*  It's not a user-id that I know anything about                     */
x = pos('?',userid)
if x > 0 & userid ¬= '?' then
            /*  It is a pattern (which was not also an abbreviation)  */
   signal pattern_processing                            /*  Continue  */
if invocation ¬= 'COMMAND' then           /*  FUNCTION or SUBROUTINE  */
   return userid                                            /*  GIGO  */
say userid 'is not a known abbreviation'
exit 0
/*  Search a list of all logged on user-ids to see if any contain all
    of the characters in the pattern in the same sequence             */
pattern_processing:
match_list  = ''
pattern     = delstr(userid,x,1)
            /*  Remove question mark  (There are already no spaces!)  */
userid_list = query_names()
verify_list = ''
do i = 1 to words(userid_list)
   userid = word(userid_list,i)
   if verify(pattern,userid) > 0 then                   /*  no match  */
      iterate
   verify_list = verify_list userid
                                /*  will be a superset of match_list  */
   /*  This user-id contains all of the pattern's characters.  But are
       its matching characters in the same sequence as the pattern?
       Note that, here, they need not be consecutive.                 */
   previous_pos = 0
   work_userid = userid
   do j = 1 to length(pattern)
      x = pos(substr(pattern,j,1), work_userid)      /*  must be > 0  */
      if x <= previous_pos then                  /*  out of sequence  */
         iterate i              /*  It didn't really match after all  */
      previous_pos = x
      work_userid = overlay('00'x, work_userid, x)
                              /*  in case the pattern repeats a char  */
   end   /*  j  */
   match_list = match_list userid                   /*  a true match  */
end   /*  i  */
/*  How many users matched the pattern?                               */
x = words(match_list)
if x = 1 then                                            /*  Perfect  */
   call success word(match_list,1)
if x = 0 then                     /*  Maybe there is one last chance  */
   signal transposition_check
/*  All of the user-id's in match_list contain all of the pattern's
    characters in the proper sequence.  Any which also contain the
    characters consecutively have a higher quality match than the
    others.  Use the first consecutive match, if any (which should
    be a likely possibility).                                         */
consecutive_count = 0
do i = 1 to words(match_list)
   x = word(match_list,i)
   if pos(pattern,x) = 0 then                    /*  not consecutive  */
      iterate
   consecutive_count = consecutive_count + 1
   if consecutive_count = 1 then do
      userid = x        /*  This will be the final result (for sure)  */
      other_match_list = strip(delword(match_list, i, 1))
      end
end   /*  i  */
if consecutive_count ¬= 1 then do
                    /*  We had to choose among equal quality matches  */
   if consecutive_count = 0 then
      parse var match_list userid other_match_list
                                             /*  Use the first match  */
   x = words(match_list)                                 /*  reprise  */
   say 'Pattern' pattern 'is not unique - There are' x 'matches -' ,
      'Using' userid
   if x < 8 then             /*  It is practical to list all of them  */
      say 'Other matches are:' other_match_list
   end
call success userid
/*  See if exactly one logged on user-id contains all of the proper
    characters even though they are in the wrong order.  If so,
    assume that the correct characters were transposed.  If there is
    more than one such "match" assume that the pattern is not unique
    enough; it's too risky to select one of the matches.              */
transposition_check:
if words(verify_list) = 1 then do
   say 'I assume that you transposed character(s) - Using'verify_list
   call success strip(verify_list)      /*  Remove the leading space  */
   end
say 'No logged on user matches' pattern
call success '????????'                   /*  You call this success?  */
exit 0
/*                         Subroutines                                */
/*  QUERY the NAMES of all logged on users                            */
query_names:
EXECIO '1 CP (VAR X STRING QUERY USERS'                        /*  x  */
parse var x users . . . net .
                            /* nnnnn USERS, nnnnn DIALLED, nnnnn NET  */
x = max(users,net)                /*  Don't assume that users >= net  */
x = x * 1.1               /*  Add 10% for new log-ons and "Strange but
                                                       true" things   */
x = (x / 4) * 72          /*  4 users per line occupy 66 or 72 bytes  */
x = trunc(x)                           /*  Even if x is an integer REXX
                               sometimes adds .0 or .00 above   Why?  */
EXECIO '* CP (BUFFER' x 'STEM X. STRING QUERY NAMES'          /*  x.  */
select
   when rc = 0 then
      nop
   when rc = 1 then do
   say 'Too many user-id''s to fit in the EXECIO buffer for QNAMES EXEC'
      say 'Some user-id''s will not be processed'
      end                                              /*  Fall thru  */
   otherwise
      say 'Return code' rc 'from EXECIO CP QUERY NAMES in QNAMES EXEC'
      exit rc
end   /*  select  */
/*  Take the output from QUERY NAMES and build a single list in
    variable userid_list.  At first, the use of these_userids seems
    to add needless complexity.  However, it significantly reduces
    REXX's inefficiency when appending to a long variable value.
    With 1000 users, this reduces the TTIME by about 50%.  With more
    users the savings should be much greater.                         */
userid_list = ''
do i = 1 to x.0
   userid_line = x.i                                 /*  1-4 user-ids */
   these_userids = ''
   do until userid_line = ''
      parse var userid_line userid '-' termid ',' userid_line
      userid = 'STRIP'(userid)
      x = 'LEFT'(userid,4)                           /*  for brevity  */
      if userid ¬= 'VSM' & ,
/*  VTAM service machine should have been processed earlier  */
         userid ¬= termid & ,
/*  VTAM user has passed the logo screen but not logged on  */
         x ¬= 'LOGO' & ,
/*  local user has passed the logo screen but not yet logged on  */
         x ¬= 'LOGL' & ,                      /*  logical device ...  */
         x ¬= 'LOGN' then        /*  Does this ever happen nowadays?  */
         these_userids = these_userids userid
   end
   userid_list = userid_list these_userids
end
return 'SPACE'(userid_list,1)             /*  Strip the extra spaces  */
/*  The user-id has been determined - Exit in the appropriate manner  */
success:
arg userid
if invocation ¬= 'COMMAND' then           /*  FUNCTION or SUBROUTINE  */
   exit userid
say userid
exit 0


Dave Fraatz
Specialist
3M (USA)

