 Dynamic modification of CP user authority
This REXX routine allows CP command class authority to be modified on a
temporary basis, ie for the duration of the current session.  This is achieved
by updating the VMCMDLEV field in the VMBLOK, which, under VM/SP Release 4, is a
full-word field in which each bit position indicates whether the corresponding
command class is available.
Prior to Release 4 of VM/SP, only eight command classes (A-H) were available -
and were indicated in the VMBLOK by the single-byte (ie 8-bit) VMCLEVEL field.
Release 4 introduced the concept of Command Class Re-structuring, which allows
the installation to define up to 24 additional classes (being subsets or
combinations of the IBM-supplied ones), identified as I-Z and 1-6.
Because of this change, the following procedure has two main paths, catering for
the differences in the respective levels of VM.
The sub-routine, SQRT, at the end of this procedure is a square-root function,
which is possibly of interest in its own right.  This was written more as an
academic exercise than as a necessity for this routine!
SETPRIV  EXEC
/* Function  : Display/modify users CP privilege classes           */
/* Language  : VM/SP System Interpreter (REXX)                     */
/* Requires  : VM/SP release 3 or above (need 3 for REXX!)         */
/* Entry     : As stand-alone CMS command procedure                */
/* Syntax    : Refer to HELP section                               */
/* Authority : CP privilege class "C" or "E" to display,           */
/*             class "C" to update                                 */
/* Return                                                          */
/*     Codes : 0 - Completed OK                                    */
/*             4 - Cancelled at user request                       */
/*             8 - Insufficient authority to execute               */
/*            12 - Parameter missing or invalid                    */
/*            45 - Specified USERID not logged on                  */
Parse UPPER arg USER VML SET;          /* Look at parameters first */
/* If HELP or ? passed as arg then display usage notes             */
If USER='' | USER='?' | USER='HELP' then do;
 Say 'SETPRIV exec allows dynamic altering of users CP privilege classes';
 Say ' ';
 Say 'Syntax is: SETPRIV <userid|*> (<class(es)|?> <ON|OFF>)';
 Say '                                                     ';
 Say 'Where: "userid" is any logged on user, "classes" are A-Z/1-6'
 Say '(VM/SP R3: A-H),';
 Say 'the last arg indicates whether the specified class(es) are to'
 Say 'be set on or OFF.';
 Say ' ';
 Say 'An asterix can be used to indicate the ID of the issuing virtual'
 Say 'machine.';
 Say 'A question mark as the second argument lists the users current'
 Say 'command  classes.';
   Exit;
     End;
/* Validate parameters - Last (SET=ON or OFF) first                */
If SET='' then SET='ON';
  Else if SET¬='ON' & SET¬='OFF' then do;
    Say 'Invalid option: "'SET'"';
      Exit 12;
        End;
/* Obtain SP release number so we can cater for changes in VM/SP 4   */
/* Then sort out which classes are available + a few other constants */
Parse value diagrc(8,'QUERY CPLEVEL') with . 'RELEASE' RLS .;
 CLS='ABCDEFGH';                     /*   Only eight classes pre-SP4 */
  MSK='8040201008040201'x;           /* Bit-mask for translate table */
If RLS='3' then OFF=X2d('61');   /*Offset of VMCLEVEL in VMBLOK (SP3)*/
 Else do;
  CLS=CLS'IJKLMNOPQRSTUVWXYZ123456'; /* Extra VM CMD classes for SP4 */
   MSK=Copies(MSK,4);                /* Bit-mask needs extending too */
    OFF=X2d('298');             /* Offset of VMCMDLEV in VMBLOK (SP4) */
     End;
/* Now ensure that privilege classes have been correctly entered     */
 If VML¬='?' & (VML='' | Verify (VML,CLS)>0) then do;
  Say 'Invalid class parameter(s):'
  Say '"'Space(Translate(VML,Left(' ',Length(CLS)),CLS,0)'"';
  Exit 12;
    End;
/* Check whether we're trying to turn OFF Class "C" - if so then warn*/
If USER='*' | USER=Userid() then do;
  If SET='OFF' & Sign(Pos('C',VML)) then do;
  Say 'WARNING: Setting class "C" OFF may prevent re-use of SETPRIV in'
  Say 'this session'
  Say 'Enter any character to proceed, enter null to abort:'
    Parse UPPER pull OPT .;
    If OPT='' then do;
      Say 'SETPRIV cancelled';
        Exit 4;
          End;
  End;
  USER=Userid();
End;
/* Make sure that target Userid is logged on!                        */
Parse value Diagrc(08,'QUERY USERS 'USER) with RET . MSG;
If RET¬=0 then do;
  Say Strip(MSG,'B');
    Exit 45;
      End;
/* Obtain target VMBLOK address - if locate fails then not allowed   */
Parse value Diagrc(08,'LOCATE 'USER) with RET . . . VMB '15'x .;
 If RET¬=0 then signal EX8;    /* Branch to command reject msg below */
/* VMCMDLEV/VMCLEVEL address = VMBLOK + appropriate offset           */
VMC=X2c(Substr(Diag(08,'DCP 'D2x(X2d(VMB)+OFF)),11,SQRT(Length(MSK)*2)));
  VMC=Right(VMC,Length(MSK)/8);
IF VML='?' then signal RPRT;   /* If it's a query then we'll go do it*/
/* Now translate the specified classes to bit masks for switch op    */
BM=Translate(VML,MSK,CLS);
 If SET='OFF' then VM=Bitxor(BM,,'FFx');
ND=Translate(VML,'44444444333333332222222211111111',CLS);
/* Apply mod to current value with bit masks                         */
Do Z=1 to Length(BM);
  If SET='ON',
then VMC= Bitor(VMC,Substr('000000'x||Substr(BM,Z,1),Substr(ND,Z,1),
                                                    Length(VMC),'00'x));
Else VMC=Bitand(VMC,Substr('FFFFFF'x||Substr(BM,Z,1),Substr(ND,Z,1),
                                                    Length(VMC),'FF'x));
  End Z;
/* Store back modified bit-map - if STCP fails then we aren't allowed!*/
Parse value Diagrc(08,'STCP S'D2x(X2d(VMB)+OFF)' 'C2x(VMC)) with RET .;
If RET=0 then Exit;
  EX8: Say 'You do not have the command authority to run this procedure';
    Exit 8;
/* Square root function - mostly an academic exercise, but useful..   */
/* Note that because this function is in a 'controlled' environment,  */
/* no validation is done - this may be necessary if used elsewhere... */
SQRT: Parse arg Y;                               /* Tokenise argument */
Xn=Y/2;                                  /* Set up our starting point */
Do while Abs(Y-(Xn*Xn))>10**-6:        /* How accurate do we want it? */
 Xo=Xn;
  Xn=Xo-((Xo*Xo)-Y)/(2*Xo);                     /* The magic formula! */
   End;
Return Trunc(Xn);         /* Send back the result, trimmed down a bit */
/* Subroutine to report on existing privilege levels                  */
RPRT: PRV='';                                /* Blank output variable */
Do 0=1 to Length(VMC)*8;          /* Loop for each class (8 per byte) */
 BIT=Bitand(Substr(VMC,Trunc((0/9)+1),1),Substr(MSK,0,1));
  PRV=PRV||Translate(BIT,Substr(CLS,0,1),Substr(MSK,0,1)'00'x);
  End 0;
Say USER 'privilege classes: 'Space(PRV,0);
 Exit;
Steve Revell
Senior Systems Programmer
Nissan UK Ltd (UK)  ) Steve Revell 1989






























































