 Secondary operator commands
This EXEC was written to issue a CP/CMS or guest command to a disconnected
virtual machine without changing the secondary operator in the VM directory, so
more users can supply commands to this machine.
The EXEC temporarily replaces the secondary operator in the VMBLOK (offset
x'218') by the user who executes this EXEC.
After the command has been executed in the disconnected machine the secondary
operator is reset to its original.
After the SEND command is issued this EXEC tests the existence of the VMBLOK; if
the VMBLOK no longer exists no RESET takes place.  CMS commands can only be
executed when the disconnected machine is in VM READ mode.  When issuing CP
commands the first parameter must be 'CP'.
This EXEC uses the following syntax:
SECOPER  < CP >  USERID COMMAND
           CP       : the literal CP, only when issuing a CP command
           USERID   : userid of the disconnected virtual machine
           COMMAND  : command to be executed in USERID
samples : SECOPER CP TESTVSE Q DASD
          SECOPER SRVMACH Q DISK
          SECOPER CP MVSTEST I CUU
          SECOPER CP MAINT LOGOFF
          SECOPER CP RSCS  Q RDR ALL
The user needs class C authorisation for this EXEC.
arg p1 p2 p3
if arg()=0 then do xrc=9999;signal lblerror;end;
if p1='CP' then do;cp='CP';p1=p2;p2=p3;end;
           else do;p2=p2' 'p3;cp='';end;
if p2=""   then do xrc=9998;signal lblerror;end;
/* ------------------------ */
/* Now locate the VMBLOK of the 'user', the address  */
/* is returned into the buffer                       */
/* ------------------------ */
'execio 1 cp (ST LOC ' p1;
pull vmb . adr;
if vmb¬= 'VMBLOK'  then do;xrc=9997;signal lblerror;end;
/* ------------------------ */
/* Computing the address of the VMSECUSR,            */
/* VMBLOK+x'218', and read the storage contents into */
/* the buffer.                                       */
/* ------------------------ */
adr2=d2x(x2d(adr)+x2d(218));
adr1=adr2||'.8';
'execio * cp (ST DCP ' adr1;
pull . x1 x2;
/* ------------------------ */
/* Now store USERID() at VMBLOK+x'218' and issue a   */
/* CP SEND command.                                  */
/* ------------------------ */
u=c2x(substr(userid(),1,8));
u1=substr(u,1,8);u2=substr(u,9,8);
'execio 0 cp (ST STCP ' adr2 u1 u2;
'cp send ' cp p1 p2;
/* ------------------------ */
/* LOCATE the VMBLOK again to verify its existence,  */
/* a LOGOFF or FORCE command will purge the VMBLOK.  */
/* ------------------------ */
'execio 0 cp (ST LOC ' p1;
if rc¬=0   then exit;
/* ------------------------ */
/* Now restore the orignal VMSECUSR at VMBLOK+x'218' */
/* ------------------------ */
'execio 0 cp (ST STCP ' adr2 x1 x2;
exit;
lblerror:;
'desbuf';
/* ------------------------ */
 /* Error handling                                    */
/* ------------------------ */
select;
   when xrc=9999 then say 'No parameters supplied , EXEC terminated';
   when xrc=9998 then say 'No COMMAND given for 'p1;
   when xrc=9997 then say p1' is not a running virtual machine';
   otherwise nop;
end;
exit xrc;
V H Lemoine
Senior Systems Programmer (The Netherlands)       ) Xephon 1988























































