 VM resource monitor
One area that I have often felt VM lacking in is the monitoring of system use by
individual programs or tasks.  While it is true that CP provides accounting data
on a user-id session basis, the actual accounting of CPU cycles, paging, spool,
sub-system activities etc on behalf of a particular task has never been an
automatic function.
Having users who wish to control the costs of their daily operations, I
developed a method to automate this function.  It is provided through a nucleus
extension called 'RESOURCE'.
The RESOURCE facility is designed to take system resource snap-shots and report
on elapsed consumption since the setting of a particular resource point.  The
resource point is actually a control block which holds the data from the snap-
shot.  The data in the resource point is referenced by a symbolic name assigned
by the user at the time the point is set and time-stamped for further
identification.
The use of a nucleus extension to execute this task was chosen to provide both
good response time and an anchor to the resource point control block(s) between
calls to RESOURCE.  The command syntax is shown below.
     RESOURCE  SET     name   <( output <)>>
          RESET   name
          QUERY  <name <CLOSE>>

Where: name is the name of a charge point - if omitted then RESOURCE will report
on the total of resources used since logon.  Output may be 'TYPE', 'STACK' or
'DISK' - default is 'TYPE'.
SET name is used to establish a resource point whose usage may be determined and
later displayed.  QUERY <name> is used to provide elapsed resource consumption
from either the specified resource point or, if not specified, since logon.  If
'CLOSE' is added then the point is removed after its values are used.  RESET
name is used to reset the values of the specified resource point.
In addition, I developed an EXEC called CHARGES, which uses the data tracked by
RESOURCE.  This data is combined with prices, as detailed in another control
file, to provide a listing detailing the resources used and the subtotal and
total costs.  The command syntax for the CHARGES EXEC closely matches that of
RESOURCE.
The CHARGES control file saves the cost data on keyword records, thus permitting
easy updates of prices without modifying the EXEC.  To simplify maintenance, the
prices in the CHARGES control file match those used in our accounting system's
cost tables.  Hence the prices in the cost file reflect prices per 100 page
reads and writes and 1000 card reads, record punchs, record prints and non-spool
SIOs.  The CHARGES control file used at our site is shown in Figure 1.

     CONN  000.000  <- per second of connect time.
     OCPU  000.199  <- per second of overhead CPU
     VCPU  000.199  <- per second of problem CPU
     PGRD  000.000  <- per 100 page reads
     PGWR  000.000  <- per 100 page writes
     SIO   000.000  <- per 1000 non-spooled SIOs
     RDR   000.000  <- per 1000 cards read
     PRT   001.062  <- per 1000 records printed
     PUN   000.000  <- per 1000 records punched
     Figure 1: CHARGES cost control File
The following series of figures demonstrates the use of the RESOURCE/CHARGES
combination of routines in tracking the resource consumption of a task.  In this
case the task is to back up a user directory of some 400 user entries and print
it.  A resource point called 'POINT1' is set prior to executing the task.
     resource set point1
     Resource Point POINT1 SET/RESET.
     R;
Figure 2 shows the task execution.  In Figure 3 the resources consumed are
queried.  Finally, Figure 4 shows a call to CHARGES

     vmxbkp01 notape
     8076 records (401 users) added to file 'BACKUP CMSUT1 A1'.
     VMSECURE directory backup complete.
     VMXBKP01 EXEC Normal completion.
      R;
     print user direct a (nocc
     R;
     Figure 2: The task executed

to get a full detailing of the task's costs.  The prices shown in Figure 4 are
from the cost control file shown above.  The difference in CPU usage between
Figures 3 and 4 reflects the CPU consumed by RESOURCE.

    resource query point1
    Resource point: POINT1   Set on 01/14/88 at 10:02:20
    Code  Resources             Count       Units
    CONN  Connect Time                  218 Seconds
    OCPU  Overhead CPU              3450818 MicroSec
    VCPU  Virtual CPU               1867034 MicroSec
    PGRD  Page Reads                    105 Pages
    PGWR  Page Writes                    63 Pages
    SIO   Start I/O Operations         1324 SIOs
    RDR   Cards Read                      0 Cards
    PRT   Records Printed              8224 Records
    PUN   Records Punched                 0 Records
    R;

     Figure 3: Response from 'RESOURCE QUERY' of 'POINT1'


    charges query point1
    RESOURCE POINT: POINT1   SET ON 01/14/88 AT 10:02:20
    RESOURCES            PRICE    UNITS    CONSUMED    COST

    RECORDS PUNCHED      $       0 PER 1000          0 $    0.00
    RECORDS PRINTED      $   1.062 PER 1000       8224 $    8.73
    CARDS READ           $       0 PER 1000          0 $    0.00
    START I/O OPERATIONS $       0 PER 1000       1328 $    0.00
    PAGE WRITES          $       0 PER 100          69 $    0.00
    PAGE READS           $       0 PER 100         131 $    0.00
    VIRTUAL CPU          $   0.199 PER SEC    1.877374 $    0.37
    OVERHEAD CPU         $   0.199 PER SEC    3.490921 $    0.69
    CONNECT TIME         $       0 PER SEC         229 $    0.00

    TOTAL                                              $    9.79
     Figure 4: Response from 'CHARGES QUERY' of 'POINT1'

RESOURCE
         EJECT
RESOURCE PROGRAM 11
         USING NUCON,R0
         USING SCBLOCK,R8           ADDRESS AN SCBLOCK
         USING RESBLOK,R9           ADDRESS A RESBLOK
         STM   R0,R1,SAVE01         SAVE THE TOKEN POINTERS
         C     R15,ORIGIN           ARE WE IN A NUCEXT?
         BE    LOADPGRM             NO, THEN LOAD US INTO A NUCEXT
*  MAIN LINE CODE                   YES, THEN RUN THE MAIN LINE CODE
         XC    FLAG(1),FLAG         RESET FLAG
         XC    OUTFLAG(1),OUTFLAG   RESET FLAG
         ST    R2,SCBADDR           SAVE THE SCBLOCK'S ADDRESS
         LR    R8,R2                ADDRESS THE SCBLOK
         CLI   8(R1),C'?'            HELP?
         BE    HELP                 YES, GIVE IT!
         LA    R1,8(R1)             POINT AT NEXT TOKEN
         CLI   0(R1),X'FF'          ANYTHING?
         BE    START                NO, TAKE DEFAULT FUNCTION
         CLI   0(R1),C'('           OPTIONS?
         BE    ARGERR               YES, TOO SOON!
         LA    R3,FUNCTAB           POINT AT THE FUNCTION TABLE
         LA    R4, FUNCLEN          LOAD ENTRY LENGTH
          LA    R5,FUNCEND-FUNCLEN   POINT AT LAST ENTRY
ARG1     DS    0H
         CLC   0(8,R1),0(R3)        IS THIS THE FUNCTION?
         BE    ARG2                 YES, SET FLAG
         BXLE  R3,R4,ARG1           NO, AGAIN PLEASE
         B     ARGERR               IF NOT FOUND - ERROR
ARG2     DS    0H
         OC    FLAG(1),8(R3)        SET FUNCTION FLAG
         LA    R1,8(R1)             POINT AT NEXT TOKEN
         CLI   0(R1),X'FF'          ANYTHING?
         BE    START                NO, LET'S GO!
         CLI   0(R1),C'('           OPTIONS?
         BE    OPTIONS              YES, HANDLE
         MVC   WRKNAME(8),0(R1)     NO, SAVE NAME
         OI    FLAG,GOTNAME         REMEMBER WE GOT IT!
         LA    R1,8(R1)             POINT AT NEXT TOKEN
         CLI   0(R1),X'FF'          ANYTHING?
         BE    START                NO, LET'S GO!
         CLI   0(R1),C'('           OPTIONS?
         BE    OPTIONS              YES, HANDLE!
         CLC   0(8,R1),CLOSTOK      YES, 'CLOSE'?
         BNE   ARGERR               NO,ERROR!
         OI    FLAG,DOCLOSE         YES, SET FLAG
         LA    R1,8(R1)             POINT AT NEXT TOKEN
         CLI   0(R1),X'FF            ANYTHING?
         BE    START                NO, LET'S GO!
         CLI   0(R1),C'('           OPTIONS?
         BNE   ARGERR               NO, ERROR!
OPTIONS  DS    0H
         LA    R1,8(R1)             POINT AT NEXT TOKEN
         CLI   0(R1),X'FF'          ANYTHING?
         BE    START                NO, LET'S GO!
         CLI   0(R1),C')'           OPTION END?
         BE    START                YES, LET'S GO!
         LA    R3,OPTABLE           NO, POINT AT TABLE!
         LA    R4,OPTLEN            LOAD ENTRY LENGTH
         LA    R5,OPTEND-OPTLEN     POINT AT LAST ENTRY
OPTIONS1 DS    0H
         CLC   0(8,R1),0(R3)        OPTION?
         BE    OPTIONS2             YES, HANDLE
         BXLE  R3,R4,OPTIONS1       NO, AGAIN
         B     ARGERR               NOT FOUND - ERROR!
OPTIONS2 DS    0H
         OC    OUTFLAG,8(R3)        SET FLAG
         B     OPTIONS              AGAIN PLEASE
START    DS    0H
         CLI   OUTFLAG,X'00'        OUTPUT SET?
         BNZ   START1               YES, SKIP DEFAULT
         OI    OUTFLAG,TYPE         NO, SET DEFAULT
START1   DS    0H
         CLI   FLAG,X'00'           ANY FUNCTION SET?
         BNE   START2               YES, SKIP DEFAULT
         OI    FLAG,DOQUERY         NO, SET DEFAULT
START2   DS    0H
         TM    FLAG,DOLIST          DO WE LIST CHARGE POINTS?
         BO    LIST                 YES, HANDLE
         TM    FLAG,DOQUERY         NO, DO WE DO QUERY?
         BO    QUERY                YES, HANDLE
         TM    FLAG,DOSET           NO, DO WE DO SET?
         BO    SET                  YES, HANDLE
*                                   NO, DO RESET THEN!
RESET    DS    0H
         TM    FLAG,GOTNAME         DID WE GET A NAME?
         BNO   NONAME               NO, ERROR!
         LA    R1,WRKNAME           YES, POINT AT THE NAME
         BAL   R10,FINDRES          FIND THE RESBLOK
          BNZ   NONAME               IF NOT FOUND - ERROR!
         B     SET1                 GO FILL IT
SET      DS    0H
         TM    FLAG,GOTNAME         DID WE GET A NAME?
         BNO   NONAME               NO, ERROR!
         LA    R1,WRKNAME           YES, POINT AT THE NAME
         BAL   R10,FINDRES          SEE IF IT'S ALREADY IN USE
         BZ    NONAME               YES, ERROR!
         LA    R0,RESDWORD          NO, THAT'S OK - BUILD ONE
         DMSFREE DWORDS=(0),ERR=NOSPACE  GET A RESBLOK
         LA    R9,ANCHOR            POINT AT THE ANCHOR
         MVC   0(4,R1),RESNEXT       ADVANCE FORWARD POINTER
         ST    R1,RESNEXT            NOW POINT AT NEW RESBLOK
         ST    R9,4(R1)              SAVE BACKWARD POINTER
         LR    R9,R1                 NOW ADDRESS NEW BLOCK
         CLC   RESNEXT(4),FENCE      ANYTHING AFTER?
         BZ    SET1                  NO, SKIP BACK CHAIN
         L     R1,RESNEXT            YES, POINT AT IT
         ST    R9,4(R1)              BACK CHAIN
SET1     DS    0H
         BAL   R10,SNAPSHOT          GET A SYSTEM SNAPSHOT
         MVC   RESNAME(WRKSIZE),WORKNAME LOAD THE SNAPSHOT
         LINEDIT TEXT='NBDRES001I RESOURCE POINT ...... SET/RESET',   X
               SUB=(CHARA,WRKNAME),RENT=NO,DISP=ERRMSG
         SR    R15,R15               SET RC
         B     EXIT                  DONE!
LIST     DS    0H
         L     R9,ANCHOR             LOAD THE ANCHOR
LIST1    DS    0H
         C     R9,FENCE              END OF CHAIN?
         BZ    LIST2                 YES, DONE LISTING
         OI    FLAG,FNDRES           NO, REMEMBER WE FOUND SOME
         MVC   NAMEOUT(8),RESNAME    LOAD THE CHARGE POINT NAME
         MVC   DATEOUT(2),RESDATE+2    LOAD MONTH
         MVC   DATEOUT+3(2),RESDATE+4  LOAD DAY
         MVC   DATEOUT+6(2),RESDATE    LOAD YEAR
         MVC   TIMEOUT(2),RESTIME      LOAD HOUR
         MVC   TIMEOUT+3(2),RESTIME+2  LOAD MINUTE
         MVC   TIMEOUT+6(2),RESTIME+4  LOAD SECOND
         LA    R1,LISTOUT-RESOURCE(R11) POINT AT THE DATA
         BAL   R10,OUTPUT            OUTPUT DATA
         L     R9,RESNEXT            NO, GET NEXT RESBLOK
         B     LIST1                 TRY AGAIN
LIST2    DS    0H
         TM    FLAG,FNDRES           DID WE FIND ANY?
         BO    EXIT                  YES, RETURN TO CALLER
         LA    R1,NOLIST-RESOURCE(R11) POINT AT THE DATA
         BAL   R10,OUTPUT            OUTPUT DATA
         B     EXIT                  RETURN
QUERY    DS    0H
         BAL   R10,SNAPSHOT          GET A CURRENT SNAPSHOT
         TM    FLAG,GOTNAME          DID WE GET A NAME?
         BNO   QUERY2               NO, USE TOTALS
         LA    R1,WRKNAME          YES, POINT AT THE NAME
         BAL   R10,FINDRES          FIND THE RESBLOK
         BNZ   NONAME               IF NOT FOUND - ERROR!
*
         LA    R2,RESCON            POINT AT THE BASE VALUE
         LA    R3,WRKCON            POINT AT THE CURRENT VALUE
         LA    R4,9                 LOAD NUMBER OF WORDS TO CALCULATE
QUERY1   DS    0H
         L     R5,0(R2)             LOAD BASE VALUE
         L     R6,0(R3)             LOAD CURRENT VALUE
         SR    R6,R5                DETERMINE DIFFERENCE
         BM    BADVALUE             IF NEGATIVE THEN ERROR!
         ST    R6,0(R3)             SAVE DIFFERENCE
          LA    R2,4(R2)             ADVANCE BASE POINTER
         LA    R3,4(R3)             ADVANCE CURRENT POINTER
         BCT   R4,QUERY1            DO ALL FIELDS
*
QUERY2   DS    0H
         L     R5,WRKTCPU           LOAD THE TOTAL CPU
         L     R6,WRKVCPU           LOAD THE VIRTUAL CPU
         SR    R5,R6                DETERMINE OVERHEAD CPU
         ST    R5,WRKTCPU           SAVE VALUE
         TM    FLAG,GOTNAME         DID WE GET A NAME?
         BNO   QUERY3               NO, SKIP RENAMES
*
         MVC   NAMEOUT(8),RESNAME   LOAD THE CHARGE POINT NAME
         MVC   DATEOUT(2),RESDATE+2   LOAD MONTH
         MVC   DATEOUT+3(2),RESDATE+4    LOAD DAY
         MVC   DATEOUT+6(2),RESDATE      LOAD YEAR
         MVC   TIMEOUT(2),RESTIME        LOAD HOUR
         MVC   TIMEOUT+3(2),RESTIME+2    LOAD MINUTE
         MVC   TIMEOUT+6(2),RESTIME+4    LOAD SECOND
*
         LA    R1,LISTOUT-RESOURCE(R11) POINT AT THE TITLE LINE
         BAL   R10,OUTPUT           OUTPUT DATA
QUERY3   DS    0H
*
         LA    R1,HEADING-RESOURCE(R11) POINT AT THE HEADINGS
         BAL   R10,OUTPUT           OUTPUT DATA
*
         LA    R3,RESRCTAB          POINT AT THE PRICE TABLE AGAIN
         LA    R4,RESRCLEN          LOAD AN ENTRIES LENGTH
         LA    R5,RESRCND-RESRCLEN  POINT AT LAST ENTRY
QUERY4   DS    0H
         L     R6,0(R3)             LOAD QUANTITIES ADDR
         L     R7,0(R6,R11)         GET THE ACTUAL QUANTITY
         CVD   R7,WORK              MAKE INTO EBCDIC
*
         MVC   WORKUNIT(10),PATERN3 LOAD THE PATERN
         ED    WORKUNIT(10),WORK+3  LOAD THE DATA
         MVC   UNITS+1(10),WORKUNIT SAVE RESULT
*
*        UNPK  UNITS(10),WORK+2(6)
*        OI    UNITS+9,X'F0'
         MVC   UNITYPE(8),4(R3)     LOAD UNIT SIZE
         MVC   RESTYPE(20),12(R3)    LOAD THE RESOURCE NAME
         MVC   CODE(4),32(R3)       LOAD THE CODE NAME
         LA    R1,ITEMS-RESOURCE(R11) POINT AT THE HEADINGS
         BAL   R10,OUTPUT           OUTPUT DATA
         BXLE  R3,R4,QUERY4         DO FOR TABLE LIST
*
         TM    FLAG,DOCLOSE         DO WE ALSO CLOSE?
         BNO   EXIT                 NO, SKIP CLOSING CHARG POINT
*
         LM    R6,R7,RESNEXT        LOAD POINTERS
         ST    R6,0(R7)             POINT PAST THIS ONE
         C     R6,FENCE             ANYTHING AFTER?
         BE    QUERY7               NO, SKIP BACK CHAIN
         ST    R7,4(R6)             YES, BACK CHAIN
QUERY7   DS    0H
         LR    R1,R9                LOAD RESBLOK'S ADDR
         LA    R0,RESDWORD          NO, THAT'S OK - BUILD ONE
         DMSFRET DWORDS=(0),LOC=(1) FRET THE SPACE
         B     EXIT                 DONE!
*
FINDRES  DS    0H
*  ENTRY (R1) => CL8'NAME'
*  EXIT  (R9) => RESBLOK
*  RETURN TO (R10)
          L     R9,ANCHOR            LOAD THE ANCHOR
FINDRES1 DS    0H
         C     R9,FENCE             END OF CHAIN?
         BZ    FINDRES2             YES, NOTHING TO SEARCH!
         CLC   RESNAME(8),0(R1)     IS THIS THE RESBLOK?
         BE    FINDRES3             YES, RETURN RESBLOK
         L     R9,RESNEXT           NO, GET NEXT RESBLOK
         B     FINDRES1             TRY AGAIN
FINDRES2 DS    0H
         LTR   R9,R9                SET CC
FINDRES3 DS    0H
         BR    R10                  RETURN TO CALLER
*
SNAPSHOT DS    0H
* RETURN TO (R10)
         LA    R2,DIAGCWRK          POINT AT THE WORK AREA
         DIAG  R2,R2,X'0C'          GET DATE, TIME AND CPU TIME
         MVC   WRKDATE(6),PATERN1   LOAD PATERN FOR DATE LOAD
         TR    WRKDATE(6),DIAGCWRK  LOAD DATE
         MVC   WRKTIME(6),PATERN2   LOAD PATERN FOR TIME LOAD
         TR    WRKTIME(6),DIAGCWRK+8  LOAD TIME
         MVC   WRKVCPU(4),DIAGCWRK+20 LOAD THE VCPU TIME
         MVC   WRKTCPU(4),DIAGCWRK+28 LOAD THE TCPU TIME
*
         LA    R2,QTIME             POINT AT THE Q TIME COMMAND
         LA    R3,DIAG8WRK          POINT AT THE RECEIVE BUFFER
         LA    R4,QTIMELEN          LOAD THE Q TIME LENGTH
         LA    R5,DIAG8LEN          LOAD THE BUFFER LENGTH
         ICM   R4,B'1000',DIAG8FLG  LOAD FLAG
         DIAG  R2,R4,X'08'          EXECUTE INDICATE USER
*
         LA    R5,SRCHCONN          SEARCH FOR THE START OF CONNECT
SNAP1    DS    0H
         LA    R5,1(R5)             POINT AT NEXT CHARACTER
         CLI   0(R5),C'='           RIGHT BEFORE TIME?
         BNE   SNAP1                NO, KEEP LOOKING!
         LA    R5,2(R5)             YES, POINT PAST TO START OF TIME
*
         PACK  WORK(8),6(2,R5)      LOAD THE CONNECT TIME - SECONDS
         CVB   R4,WORK              LOAD THE SECONDS
*
         PACK  WORK(8),0(2,R5)      LOAD THE CONNECT TIME - HOURS
         CVB   R3,WORK
         LA    R2,3600              LOAD SECONDS PER HOUR
         MR    R2,R2
         AR    R4,R3                ACCUMULATE SECONDS
*
         PACK  WORK(8),3(2,R5)      LOAD THE CONNECT TIME - MINUTES
         CVB   R3,WORK
         LA    R2,60                LOAD SIXTY SECONDS PER MINUTE
         MR    R2,R2
         AR    R4,R3                ACCUMULATE SECONDS
         ST    R4,WORKCON           SAVE THE CONNECT SECONDS
*
         LA    R2,INDUSER           POINT AT IND USER COMMAND
         LA    R3,DIAG8WRK          POINT AT THE RECEIVE BUFFER
         LA    R4,INDLEN            LOAD THE IND USER LENGTH
         LA    R5,DIAG8LEN          LOAD THE BUFFER LENGTH
         ICM   R4,B'1000',DIAG8FLG  LOAD FLAG
         DIAG  R2,R4,X'08'          EXECUTE INDICATE USER
*
         PACK  WORK(8),PGRD(6)      GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
         ST    R2,WORKPGRD          SAVE VALUE
         PACK  WORK(8),PGWRT(6)     GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
          ST    R2,WRKPGWRT          SAVE VALUE
         PACK  WORK(8),SIO(6)       GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
         ST    R2,WRKSIO            SAVE VALUE
         PACK  WORK(8),RDR(6)       GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
         ST    R2,WRKRDR            SAVE VALUE
         PACK  WORK(8),PRT(6)       GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
         ST    R2,WRKPRT            SAVE VALUE
         PACK  WORK(8),PCH(6)       GET THE VALUE
         CVB   R2,WORK              MAKE BINARY
         ST    R2,WRKPCH            SAVE VALUE
*
         LA    R2,WORKSIZE
         LA    R3,WORKNAME-RESOURCE(R11)
         BR    R10                  RETURN TO CALLER
*
OUTPUT   DS    0H
         TM    OUTFLAG,TYPE         TYPE?
         BO    OUTPUT1              YES!
         TM    OUTFLAG,DISK         DISK?
         BO    OUTPUT2              YES!
*
         STCM  R1,B'0111',STCKBUFF  SAVE BUFFER ADDRESS
         LA    R1,STCKCMD           POINT AT COMMAND
         SVC   202
         DC    AL4(*+4)
         BR    R10
*
OUTPUT1  DS    0H
         ST    R3,SAVER3            SAVE R3
         LR    R3,R1                LOAD RECORD POINTER
         WRTERM (R3),80             OUTPUT DATA
         L     R3,SAVER3            RESTORE R3
         BR    R10                  RETURN TO CALLER
*
OUTPUT2  DS    0H
         ST    R3,SAVER3            SAVE R3
         LR    R3,R1                LOAD RECORD POINTER
         FSWRITE 'RESOURCE OUTPUT A',RECFM=F,BSIZE=80,BUFFER=(R3)
         L     R3,SAVER3            RESTORE R3
         BR    R10                  RETURN TO CALLER
*
*  THIS PORTION OF THE CODE LOADS THE NUCLEUS EXTENSION
*
LOADPGRM DS    0H
*  GET FREE STORAGE
         LA    R1,BYTES             YES, LOAD US THEN!
         SRL   R1,3                 DIVIDE BY EIGHT
         LA    R1,1(R1)             PLUS ONE
         LR    R0,R1                LOAD DWORDS TO GET
         DMSFREE DWORDS=(0),ERR=NOSPACE   GET FREE SPACE
*  SAVE/LOAD DATA FOR NUCEXT AND MOVE
         LR    R2,R1                POINT AT FREE SPACE
         LR    R3,R0                LOAD DWORDS GOTTEN
         SLL   R3,3                 MULTIPLY BY EIGHT FOR BYTES
         LA    R4,RESOURCE          POINT AT START OF CODE
         LR    R5,R3                LOAD SIZE IN BYTES
*  SAVE DATA FOR NUCEXT OPERATION
         ST    R2,NUCXADDR          SAVE THE START ADDRESS
         ST    R2,NUCXORIG          DITTO
         ST    R3,NUCXSIZE          SAVE THE PROGRAM SIZE
*  LOAD CODE INTO NUCEXT
         MVCL  R2,R4                LOAD THE PROGRAM
*  LOAD THE NUCEXT INTO THE SYSTEM
          LA    R1,NUCXLOAD          POINT AT THE PARMS
         SVC   202                  EXECUTE THE NUCEXT
         DC    AL4(NUCERR)
*  DETERMINE THE ADDRESS OF THE SCBLOCK BUILT
         LA    R1,NUCXFIND          NOW LOCATE NEW SCBLOCK
         SVC   202                  EXECUTE
         DC    AL4(NUCERR)
*  LOAD THE REGISTERS TO CALL THE EXTENSION
         L     R8,NUCXSCB           LOAD SCBLOCK ADDRESS
         LA    R3,ANCHOR-RESOURCE    POINT AT ANCHOR
         A     R3,NUCXADDR          ADD IN ORIGIN
         DMSKEY NUCLEUS
         ST    R3,SCBWKWRD          SAVE A POINTER
         DMSKEY RESET
         LR    R2,R8                LOAD SCBLOCK POINTER
         L     R12,NUCXADDR         LOAD ENTRY POINT ADDRESS
         LM    R0,R1,SAVE01         LOAD TOKEN POINTERS
         LR    R15,R12              LOAD ENTRY POINT ADDRESS
         BALR  R14,R15              CALL NUCEXT
         B     EXIT                 DONE!
*
*   ERROR ROUTINES
*
NOSPACE  DS    0H
         LR    R2,R15
         LINEDIT TEXT='NBDRES002E ERROR ... GETTING FREE SPACE',       X
               SUB=(DEC,(R2)),DISP=ERRMSG,RENT=NO
         LR    R15,R2
         B     EXIT
*
ARGERR   DS    0H
         LINEDIT TEXT='NBDRES003E MISSING OR INVALID ARGUMENT(S)',     X
               DISP=ERRMSG,RENT=NO
         LA    R15,24
         B     EXIT
*
NONAME   DS    0H
         LINEDIT TEXT='NBDRES004E MISSING OR INVALID RESOURCE POINT',  X
               DISP=ERRMSG,RENT=NO
         LA    R15,24
         B     EXIT
*
BADVALUE DS    0H
         LINEDIT TEXT='NBDRES005E INVALID RESOURCE POINT',             X
               DISP=ERRMSG,RENT=NO
         LA    R15,100
         B     EXIT
*
NUCERR   DS    0H
         LR    R2,R15
         LINEDIT TEXT='NBDRES006E ERROR ... DOING NUCEXT',             X
               SUB=(DEC,(R2)),DISP=ERRMSG,RENT=NO
         LR    R15,R2
         B     EXIT
*
HELP     DS    0H
         WRTERM 'THE RESOURCE ROUTINE PROVIDES RESOURCE CONSUMPTION'
         WRTERM 'INFORMATION TO THE USER.  QUANTITIES ARE FOR USER'
         WRTERM 'SPECIFID PERIODS.'
         WRTERM ' '
         WRTERM 'CHARGES SET   NAME         <( <OUTPUT> <)>>'
         WRTERM '        RESET NAME'
         WRTERM '        QUERY NAME <CLOSE>'
         WRTERM '        LIST'
         WRTERM ' '
         WRTERM 'WHERE: NAME   - THE RESOURCE POINT NAME'
          WRTERM '       OUTPUT - TYPE, STACK OR DISK'
         B     EXIT
*  DATA AREAS FOR THE MAIN LINE CODE
*
SCBADDR  DS    1F                   ADDRESS OF THE SCBLOCK
ANCHOR   DC    4X'FF'               CHARGE POINT ANCHOR
FENCE    DC    4X'FF'               FENCE FOR RESBLOK CHAIN
ZEROS    DC    8C'0'                ZEROS FOR COMPARISON
*
FLAG     DC    X'00'                CONTROL FLAG
DOQUERY  EQU   X'80'                DO QUERY FUNCTION
DOSET    EQU   X'40'                DO SET FUNCTION
DORESET  EQU   X'20'                DO RESET FUNCTION
DOCLOSE  EQU   X'10'                CLOSE WAS SPECIFIED
GOTNAME  EQU   X'08'                NAME WAS FOUND
DOLIST   EQU   X'04'                DO LIST FUNCTION
FNDRES   EQU   X'02'                FOUND SOME CHARGE POINT
*
OUTFLAG  DC    X'00'                OUTPUT CONTROL FLAG
TYPE     EQU   X'80'                TYPE OUTPUT
DISK     EQU   X'40'                FILE OUTPUT
STACK    EQU   X'20'                STACK OUTPUT
*
DIAG8FLG DC    X'40'
*
QTIME    DC    C'QUERY TIME'
QTIMELEN EQU   *-QTIME
*
INDUSER  DC    C'IND USER'
INDLEN   EQU   *-INDUSER
*
DIAGCWRK DS    4D
*
DIAG8WRK DC    150C' '             WORK AREA FOR DIAG X'08'
         ORG   DIAG8WRK+36
SRCHCONN DS    8C                  'HH:MM:SS'
         ORG   DIAG8WRK+30
PGRD     DS    6C
         ORG   DIAG8WRK+44
PGWRT    DS    6C
         ORG   DIAG8WRK+101
SIO      DS    6C
         ORG   DIAG8WRK+112
RDR      DS    6C
         ORG   DIAG8WRK+123
PRT      DS    6C
         ORG   DIAG8WRK+134
PCH      DS    6C
         ORG   ,
DIAG8LEN EQU   *-DIAG8WRK
*
WORK     DS    1D
WORKUNIT DS    1D
SAVER3   DS    F
*
FUNCTAB  EQU   *
         DC    CL8'QUERY'
         DC    AL1(DOQUERY)
FUNCLEN  EQU   *-FUNCTAB
         DC    CL8'SET'
         DC    AL1(DOSET)
         DC    CL8'RESET'
         DC    AL1(DORESET)
         DC    CL8'LIST'
         DC    AL1(DOLIST)
FUNCEND  EQU   *
 *
OPTABLE  EQU   *
         DC    CL8'TYPE'
         DC    AL1(TYPE)
OPTLEN   EQU   *-OPTABLE
         DC    CL8'DISK'
         DC    AL1(DISK)
         DC    CL8'STACK'
         DC    AL1(STACK)
OPTEND   EQU   *
*
CLOSTOK  DC    CL8'CLOSE'
*
         DS    0F
WRKNAME  DC    CL8' '               NAME OF RESBLOK
WRKDATE  DC    CL6' '               DATE OF SET - 'YYMMDD'
WRKTIME  DC    CL6' '               TIME OF SET - 'HHMMSS'
WRKCON   DC    F'0'                 CONNECT TIME SECONDS
WRKTCPU  DC    F'0'                 TOTAL CPU MICRO-SECONDS
WRKVCPU  DC    F'0'                 VIRTUAL CPU MICRO-SECONDS
WRKPGRD  DC    F'0'                 NUMBER OF PAGE READS
WRKPGWRT DC    F'0'                 NUMBER OF PAGE WRITES
WRKSIO   DC    F'0'                 NUMBER OF SIOS
WRKRDR   DC    F'0'                 NUMBER OF RECORDS READ
WRKPRT   DC    F'0'                 NUMBER OF RECORDS PRINTED
WRKPCH   DC    F'0'                 NUMBER OF RECORDS PUNCHED
WRKSIZE  EQU   *-WRKNAME            AREA TO MOVE
*
PATERN1  DC    X'060700010304'      TRANSLATE -> 'MM/DD/YY' TO 'YYMMDD'
PATERN2  DC    X'000103040607'      TRANSLATE -> 'HH:MM:SS' TO 'HHMMSS'
PATERN3  DC    X'40202020202020202120'
*
LISTOUT  EQU   *
         DC    C'RESOURCE POINT:'
NAMEOUT  DC    8C' '
         DC    C' SET ON '
DATEOUT  DC    C'XX/XX/XX'
         DC    C' AT '
TIMEOUT  DC    C'XX:XX:XX'
         DC    28C' '
*
HEADING  EQU   *
         DC    CL6'CODE '
         DC    CL22'RESOURCES'
         DC    CL12'COUNT'
         DC    CL8'UNITS'
         DC    35' '
*
ITEMS    EQU   *
CODE     DC    6C' '
RESTYPE  DC    CL22' '
UNITS    DC    CL12' '
UNITYPE  DC    CL8' '
         DC    35C' '
*
NOLIST   EQU   *
         DC    CL80'NO RESOURCE POINTS CURRENTLY SET.'
*
RESRCTAB DS    0F
         DC    AL4(WRKCON-RESOURCE)  QUANTITY ADDR
         DC    CL8'SECONDS'         UNIT TYPE
         DC    CL20'CONNECT TIME'   RESOURCE TYPE
         DC    CL4'CONN'            CODE
RESRCLEN EQU   *-RESRCTAB           ENTRY LENGTH
         DC    AL4(WRKTCPU-RESOURCE) QUANTITY ADDR
         DC    CL8'MICROSEC'        UNIT TYPE
          DC    CL20'OVERHEAD CPU'   RESOURCE TYPE
         DC    CL4'OCPU'            CODE
         DC    AL4(WRKVCPU-RESOURCE) QUANTITY ADDR
         DC    CL8'MICROSEC'        UNIT TYPE
         DC    CL20'VIRTUAL CPU'    RESOURCE TYPE
         DC    CL4'VCPU'            CODE
         DC    AL4(WRKPGRD-RESOURCE) QUANTITY ADDR
         DC    CL8'PAGES'           UNIT TYPE
         DC    CL20'PAGE READS'     RESOURCE TYPE
         DC    CL4'PGRD'            CODE
         DC    AL4(WRKPGWRT-RESOURCE) QUANTITY ADDR
         DC    CL8'PAGES'           UNIT TYPE
         DC    CL20'PAGE WRITES'    RESOURCE TYPE
         DC    CL4'PGWR'            CODE
         DC    AL4(WRKSIO-RESOURCE)  QUANTITY ADDR
         DC    CL8'SIO''S'          UNIT TYPE
         DC    CL20'START I/O OPERATIONS'
         DC    CL4'SIO'             CODE
         DC    AL4(WRKRDR-RESOURCE)  QUANTITY ADDR
         DC    CL8'CARDS'           UNIT TYPE
         DC    CL20'CARDS READ'     RESOURCE TYPE
         DC    CL4'RDR'             CODE
         DC    AL4(WRKPRT-RESOURCE)  QUANTITY ADDR
         DC    CL8'RECORDS'         UNIT TYPE
         DC    CL20'RECORDS PRINTED' RESOURCE TYPE
         DC    CL4'PRT'             CODE
         DC    AL4(WRKPCH-RESOURCE)  QUANTITY ADDR
         DC    CL8'RECORDS'         UNIT TYPE
         DC    CL20'RECORDS PUNCHED' RESOURCE TYPE
         DC    CL4'PUN'             CODE
RESRCND  EQU   *
*
*  DATA AREAS FOR THE NUCEXT LOADER
*
SAVE01   DS    2F
ORIGIN   DC    X'0000E000'          USER AREA ADDRESS
*
STCKCMD  DC    CL8'ATTN'
         DC    CL4'LIFO'
         DC    AL1(80)
STCKBUFF DC    AL3(0)
         DC    8X'FF'
*
NUCXFIND DS    OD
         DC    CL8'NUCEXT'
         DC    CL8'RESOURCE'        NUCEXT COMMAND NAME

NUCXSCB  DC    4X'00'               START OF PSW
         DC    4X'FF'               INDICATE QUERY FUNCTION
*
NUCXLOAD DS    OD
         DC    CL8'NUCEXT
         DC    CL8'RESOURCE'        NUCEXT COMMAND NAME
NUCXPSW  DC    4X'00'               START OF PSW
NUCXADDR DC    4X'00'               NUCEXT ENTRY POINT ADDR
NUCXUSER DC    4X'00'               NUCEXT USER WORD
NUCXORIG DC    4X'00'               NUCEXT ORIGIN
NUCXSIZE DC    4X'00'               NUCEXT SIZE IN BYTES
*
         LTORG
*
BYTES    EQU   *-RESOURCE           SIZE IN BYTES OF PROGRAM
*
*  DSECTS USED IN CHARGES
*
RESBLOK  DSECT
 RESNEXT  DS    F                    POINTER TO NEXT RESBLOK
RESLAST  DS    F                    POINTER TO LAST RESBLOK
RESNAME  DS    8C                   NAME OF RESBLOK
RESDATE  DS    6C                   DATE OF SET/RESET - 'YYMMDD'
RESTIME  DS    6C                   TIME OF SET/RESET - 'HHMMSS'
RESCON   DS    F                    CONNECT TIME SECONDS
RESTCPU  DS    F                    TOTAL CPU MICRO-SECONDS
RESVCPU  DS    F                    VIRTUAL CPU MICRO-SECONDS
RESPGRD  DS    F                    NUMBER OF PAGE READS
RESPGWRT DS    F                    NUMBER OF PAGE WRITES
RESSIO   DS    F                    NUMBER OF SIOS
RESRDR   DS    F                    NUMBER OF RECORDS READ
RESPRT   DS    F                    NUMBER OF RECORDS PRINTED
RESPCH   DS    F                    NUMBER OF RECORDS PUNCHED
RESSIZE  EQU   *-RESBLOK
RESDWORD EQU   RESSIZE/8
*
         SCBLOCK
         NUCON
*
         END
CHARGES
/*
   CHARGES - CALCULATE AND REPORT ON THE RESOURCES AND CHARGES
   CONSUMED BY THE CALLING USERID.  THIS ROUTINE USES THE RESOURCE
   MODULE TO DETERMINE RESOURCES USED AND USES THE 'CHARGES PRICES'
   FILE TO DETERMINE UNIT COSTS.  THESE ARE COMBINED TO CREATE A
   COST DISPLAY OF USERID SYSTEM USE.

   CHARGES <QUERY <NAME>> <( <TYPE|DISK> <)>>
           <SET    NAME >
           <RESET  NAME >
           <LIST        >

WHERE: NAME     - IS A CHARGE POINT TO CALCULATE CONSUMPTION.
                  IF OMITTED WITH QUERY THEN THIS LOGON SESSIONS USE
                  IS DISPLAYED.
       TYPE     - DISPLAY ROUTINE RESULTS TO SCREEN - DEFAULT.
       DISK     - WRITE RESULTS TO 'CHARGES OUTPUT A'.
*/

ARG PARMS;
PARSE VALUE PARMS WITH CMD NAME . '(' OPTIONS ')';
IF CMD = ' ' THEN CMD = 'QUERY';
OUT = 'TYPE';
IF OPTIONS = 'TYPE' THEN OUT = 'TYPE';
IF OPTIONS = 'DISK' THEN OUT = 'DISK';

SELECT;

   WHEN CMD = 'LIST'
        THEN DO
             'RESOURCE LIST';
             RCODE = RC;
             END;

   WHEN CMD = 'RESET' | CMD = 'SET'
        THEN DO
             'RESOURCE 'CMD NAME;
             RCODE = RC;
             END;

   WHEN CMD = 'QUERY'
        THEN DO
             'RESOURCE QUERY 'NAME' (STACK';
             RCODE = RC;
              END;

   WHEN CMD = '?'
        THEN DO X = 2 TO 100 WHILE SOURCELINE(X) = '*/'
             SAY SOURCELINE(X);
             RCODE = 0;
             END;
   OTHERWISE CALL MSG 24 'E X INVALID FUNCTION SPECIFIED';
END;
IF CMD = 'QUERY' THEN EXIT RCODE;
IF RCODE = 0 THEN EXIT RCODE;

NO = QUEUED();

X = 0;
POINT = ' ';

DO NO;

   PULL DATA;

   KIND = STRIP(SUBSTR(DATA,1,4));

   IF KIND = 'CODE' THEN ITERATE;
   IF KIND = 'RESO'
      THEN DO
           POINT = DATA;
           ITERATE;
           END;

X = X + 1;

KIND.X = KIND
RESOURCE.X = SUBSTR(DATA,7,20);
COUNT = TRANSLATE(SUBSTR(DATA,29,11),'0',' ');
UNITS.X = SUBSTR(DATA,41,8);

IF KIND = 'OCPU' | KIND = 'VCPU'
   THEN DO
        COUNT = SUBSTR(COUNT,1,5)||'.'||SUBSTR(COUNT,6,6);
        UNITS.X = 'PER SEC ';
        END;

IF KIND = 'CONN' THEN UNITS.X = 'PER SEC ';

IF KIND = 'PRT' | KIND = 'PUN' | KIND = 'RDR | KIND = 'SIO'
   THEN UNITS.X = 'PER 1000';

IF KIND = 'PGRD' | KIND = 'PGWR'
   THEN UNITS.X = 'PER 100';

COUNT.X = COUNT + 0;

END;

NO_RES = X;

'EXECIO * DISKR CHARGES PRICES * (FINIS';
IF RC = 0 THEN CALL MSG RC 'E X UNABLE TO LOCATE PRICES FILE.';

NO_PRICES = QUEUED();

DO NO_PRICES;

   PULL KIND PRICE .;
   PRICE.KIND = STRIP(PRICE) + 0;

END;
IF POINT = ' '
   THEN CALL OUTPUT POINT;
   ELSE CALL OUTPUT 'SESSION CONSUMPTION AS OF 'DATE(USA)' AT 'TIME();
CALL OUTPUT 'RESOURCES            PRICE    UNITS    CONSUMED    COST';
CALL OUTPUT '------------------ -------- -------- ----------- -------;

TOTAL = 0;

DO X = 1 TO NO_RES;

   K = KIND.X;
   PRICE = PRICE.K;
   COST = PRICE*COUNT.X;
   IF KIND.X = 'PGRD' | KIND.X = 'PGWR'
      THEN COST = COST/100;
   IF KIND.X = 'PRT' | KIND.X = 'RDR' | KIND.X = 'PUN' | KIND = 'SIO'
      THEN COST = COST/1000;
   COST = RIGHT(TRUNC(COST,2),8);
   TOTAL = TOTAL + COST;

   LINE = RESOURCE.X '$'||RIGHT(PRICE,7) UNITS.X RIGHT(COUNT.X,11) '$'||COST
   CALL OUTPUT LINE;

END;

CALL OUTPUT '-----------------  -------  -------  ----------- ------';
CALL OUTPUT 'TOTAL                                     $'RIGHT(TOTAL,8);
EXIT;

OUTPUT: PROCEDURE EXPOSE OUT;

ARG LINE;

IF OUT = 'DISK' THEN 'EXECIO 1 DISKW CHARGES OUTPUT A (FINIS STRING' LINE
IF OUT = 'TYPE' THEN SAY LINE;

RETURN;

MSG: PROCEDURE;

ARG RCODE MSG_TYPE EXIT_TYPE MSG

SELECT;

  WHEN MSG_TYPE = 'E' THEN MSG_TYPE = '*ERROR*'
  WHEN MSG_TYPE = 'I' THEN MSG_TYPE = '*INFORM*'
  WHEN MSG_TYPE = 'R' THEN MSG_TYPE = '*REQUEST*'
  WHEN MSG_TYPE = 'W' THEN MSG_TYPE = '*WARNING*'
  OTHERWISE MSG_TYPE = '*ERROR*';

END;

SAY MSG_TYPE MSG

IF EXIT_TYPE = 'R' THEN RETURN;

EXIT;
Wesley R Scott
Systems Programmer
NBD Bancorp (USA)        ) NBD Bancorp 1988




