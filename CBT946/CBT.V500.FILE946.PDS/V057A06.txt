Hand text through a window

At a demonstration I saw an operator moving a block of text
from one screen window to another.  I have simulated this with
XEDIT.  I've built a pair of macros which work together; the
first one will handle a block of text and the second will handle
a contiguous string.  I use them as PF key commands.  Press
the appropriate PF key while using the cursor to indicate the
position in the file.  With the first keystroke you choose block
or contiguous mode, and the starting point of the area.  To
delete or clear (ie blank out) the area it's only necessary to
select the end point.  Any movement requires a new starting
point as the third parameter.  After moving, the selected
positions are deleted except if the parameter MULTIPLE was
specified within the third call to the macro.  This third call may
be done from another file in the XEDIT ring.  It doesn't matter
what macro is called for the second and third time if the option
SWITCH was specified.  Otherwise if you mix modes you get
an error.

I defined the PF keys 20 through 24 in the following manner:
      'SET PF20 MACRO SELCONTG MARK MULTIPLE (SWITCH'
      'SET PF21 MACRO SELBLOCK REPLACE MULTIPLE (SWITCH'
      'SET PF22 MACRO SELBLOCK CLEAR (SWITCH'
      'SET PF23 MACRO SELBLOCK DELETE (SWITCH'
      'SET PF24 MACRO SELBLOCK INSERT MULTIPLE (SWITCH'

To move an Assembler statement plus the label on the next
line, I press PF20, and place the cursor at the beginning of
statement.  Then I press PF20 again, with the cursor after the
next line label.  I move the cursor to the target line (start of
statement), and use PF24 to insert the text, and PF23 to erase
the old text.

The function MARK lets me correct a start or end point or
delete both if executed while the cursor is positioned at the
command line.


SELBLOCK XEDIT

/*  Select a rectangular cut and hand it through the ring             */
arg prefix function pline op1 op2 op3 1 Cmd Multiple "(" Switch;
parse source . . Source_N . . name .;
if prefix = "?" then do;
   say 'Useful only if assigned with PF keyes                      ';
   say 'Define:                                                    ';
   say ' SET PFxx MACRO SELBLOCK <command> <MULTIPLE> <(SWITCH>    ';
   say 'where:                                                     ';
   say ' command - MARK | REPLACE | INSERT | CLEAR | DELETE        ';
   exit 1;
   end;
if prefix = "PREFIX" then do;
   if function = "CLEAR" then do;
      'COMMAND Extract /Point/';
      do I = 3 to words(Point.1);
         Symbol = word(Point.1,I);
         if abbrev(Symbol,"BS_",3) | abbrev(Symbol,"BE_",3) then,
          'COMMAND Set Point' Symbol 'off';
         end;
      exit;
      end;
   if function = "SHADOW"
                        then call Prefix_error "Invalid on shadow line";
   end;
else do;
   if Cmd = "MULTIPLE" then do;
      Cmd = Multiple;
      Multiple = "MULTIPLE";
      end;
   BStart? = 0; BEnd? = 0;
   'COMMAND Extract /Cursor/Image/Line/MSGMode/Ring/';
   Orig_Line = Line.1;
   do IX = 2 to Ring.0;
      'COMMAND XEdit' subword(Ring.IX,1,3);
      'COMMAND Extract /Pending Block CS/';
      if Pending.0 > 0 then do;
         if IX > 2 then 'COMMAND XEdit' subword(Ring.2,1,3);
         if Switch = "SWITCH" then do;
            'COMMAND MACRO SELCONTG' Cmd Multiple;
            exit;
            end;
         else
            call Error_exit "Do not mix CONTinuous and BLOCK selection";
         end;
      end;
   do IX = 2 to Ring.0;
      'COMMAND XEdit' subword(Ring.IX,1,3);
      'COMMAND Extract /Pending Block BS/';
      BStart? = Pending.0 > 0;
      if BStart? then do;
         Ring_FNr = IX;
         'COMMAND Locate :' || Pending.1;
         'COMMAND Extract /Point/';
         parse var Point.1 . BStart_L . " BS_" BStart_C .;
         if Pending.5 = "_BE" then BEnd? = 1;
         else do;
            'COMMAND Extract /Pending Block ___/';
            BEnd? = Pending.0 > 0 & Pending.5 = "BE";
            if BEnd? then do;
               'COMMAND Locate :' || Pending.1;
               'COMMAND Extract /Point/';
               end;
            end;
         if BEnd? | Cmd = "CLEAR" | Cmd = "DELETE" then do;
            if BEnd? then parse var Point.1 . BEnd_L . " BE_" BEnd_C .;
            else do;
               BEnd? = 1;
               BEnd_L = Cursor.3;
               BEnd_C = Cursor.4;
               end;
            end;
         else if IX > 2 then do;
            'COMMAND XEdit' subword(Ring.2,1,3);
            call Error_exit "Incomplete block in:" subword(Ring.IX,1,3);
            end;
         leave IX;
         end;
      end;
   if Cursor.3 = -1 | Cursor.4 = -1 then do;
      if Cmd = "MARK" then do;
         call Reset;
         'COMMAND XEdit' subword(Ring.2,1,3);
         call Normal_exit;
         end;
      if Cmd ¬= "DELETE" & Cmd ¬= "CLEAR" | ¬BStart? then,
       call Error_exit "Cursor is not on a valid data field";
      end;
   if BEnd? then do;
      BLeft_C = min(BStart_C,BEnd_C);
      BLength = abs(BEnd_C-BStart_C)+1;
      BDirection = sign(BEnd_L-BStart_L);
      'COMMAND Locate :' || BStart_L;
      if Cmd = "MARK" then do;
         BStart_abs = abs(BStart_L-Cursor.3)+abs(BStart_C-Cursor.4);
         BEnd_abs = abs(BEnd_L-Cursor.3)+abs(BEnd_C-Cursor.4);
         if BStart_abs = 0 | BEnd_abs = 0 then do;
            call Reset;
            'COMMAND XEdit' subword(Ring.2,1,3);
            call Normal_exit;
            end;
         else if BStart_abs < BEnd_abs then do;
            'COMMAND Locate :' || BStart_L;
            'COMMAND Set Pending off';
            'COMMAND Set Point .BS_' || BStart_C 'off';
            'COMMAND Locate :' || Cursor.3;
            if Cursor.3 = BEnd_L then 'COMMAND Set Pending Block BS_BE';
            else 'COMMAND Set Pending Block BS___';
            'COMMAND Set Point .BS_' || Cursor.4;
            end;
         else do;
            'COMMAND Locate :' || BEnd_L;
            'COMMAND Set Pending off';
            'COMMAND Set Point .BE_' || BEnd_C 'off';
            'COMMAND Locate :' || Cursor.3;
            if Cursor.3 = BStart_L
                                 then 'COMMAND Set Pending Block BS_BE';
            else 'COMMAND Set Pending Block ___BE';
            'COMMAND Set Point .BE_' || Cursor.4;
            end;
         end;
      else do;
         'COMMAND Set Image OFF';
         do LNr = 1 by 1;
            'COMMAND Extract /CurLine/Line/';
            if Cmd = "CLEAR" | Cmd = "DELETE" then do;
               if Cmd = "CLEAR" then,
                New = overlay(" ",Curline.3,BLeft_C,BLength," ");
               else New = delstr(Curline.3,BLeft_C,BLength);
               'COMMAND Replace' New;
               end;
            else Stack_Line.LNr = substr(CurLine.3,BLeft_C,BLength);
            if Line.1 = BEnd_L then do;
               if Cmd = "CLEAR" | Cmd = "DELETE" then do;
                  if Cmd = "CLEAR" then,
                   New = overlay(" ",Curline.3,BLeft_C,BLength," ");
                  else New = delstr(Curline.3,BLeft_C,BLength);
                  'COMMAND Replace' New;
                  end;
               else Stack_Line.0 = LNr;
               leave LNr;
               end;
            else 'COMMAND Locate' BDirection;
            end;
         'COMMAND Set Image' Image.1;
         end;
      end;
   'COMMAND XEdit' subword(Ring.2,1,3);
   if BEnd? then do;
      'COMMAND Locate :' || Orig_Line
      if Cmd = "" then do;
         'COMMAND EMSG Enter block function:  Insert or Replace';
         'COMMAND Cursor CMDLine';
         'COMMAND Read';
         pull Cmd;
         end;
      end;
   if Cursor.3 ¬= -1 then,
    'COMMAND Locate :' || Cursor.3 'COMMAND CLocate :' || Cursor.4;
   if BEnd? then do;
      if Cmd ¬= "CLEAR" & Cmd ¬= "DELETE" & Cmd ¬= "MARK" then do;
         select;
            when Cmd = "" then call Error_exit,
             "No block function specified  (Use: Insert | Replace)";
            when abbrev("INSERT",Cmd,2) then CCmd = "CINSERT";
            when abbrev("REPLACE",Cmd,2) then CCmd = "CREPLACE";
            otherwise call Error_exit,
             "Invalid block function  (Use: Insert or Replace)";
            end;
         do LNr = 1 to Stack_Line.0
            'COMMAND' CCmd Stack_Line.LNr;
            'COMMAND Locate +1';
            end;
         end;
      if Multiple ¬= "MULTIPLE" then do;
         'COMMAND XEdit' subword(Ring.Ring_FNr,1,3);
         call Reset;
         'COMMAND XEdit' subword(Ring.2,1,3);
         end;
      end;
   else do;
      'COMMAND Set MSGMode off';
      if BStart? then do;
         if Cursor.3 = BStart_L then 'COMMAND Set Pending Block BS_BE';
         else 'COMMAND Set Pending Block ___BE';
         'COMMAND Set Point .BE_' || Cursor.4 "off";
         'COMMAND Set Point .BE_' || Cursor.4;
         end;
      else do;
         'COMMAND Set Pending Block BS___';
         'COMMAND Set Point .BS_' || Cursor.4 "off";
         'COMMAND Set Point .BS_' || Cursor.4;
         end;
      end;
   end;
Normal_exit:
'COMMAND Set MSGMode' MSGMode.1 MSGMode.2;
'COMMAND Locate :' || Orig_Line
if Cursor.3 = -1 | Cursor.4 = -1 then 'COMMAND Cursor Screen' Cursor.5;
else 'COMMAND Cursor File' Cursor.3 Cursor.4;
exit;
Error_exit:
'COMMAND Locate :' || Orig_Line
Prefix_error:
if arg(1,"E") then 'COMMAND EMSG' arg(1);
exit;
Reset:
'COMMAND Set MSGMode off';
if BStart? then do;
   'COMMAND Set MSGMode off';
   'COMMAND Locate :' || BStart_L;
   'COMMAND Set Pending off';
   'COMMAND Set Point .BS_' || BStart_C 'off';
   if BEnd? then do;
      'COMMAND Locate :' || BEnd_L;
      'COMMAND Set Pending off';
      'COMMAND Set Point .BE_' || BEnd_C 'off';
      end;
   end;
'COMMAND Set MSGMode' MSGMode.1 MSGMode.2;
return;


SELCONTG XEDIT

/*   Select a contiguous string and hand it through the ring          */
arg prefix function pline op1 op2 op3 1 Cmd Multiple "(" Switch;
parse source . . Source_N . . name .;
if prefix = "?" then do;
   say 'Useful only if assigned with PF keyes                      ';
   say 'Define:                                                    ';
   say ' SET PFxx MACRO SELCONTG <command> <MULTIPLE> <(SWITCH>    ';
   say 'where:                                                     ';
   say ' command - MARK | REPLACE | INSERT | CLEAR | DELETE        ';
   exit 1;
   end;
if prefix = "PREFIX" then do;
   if function = "CLEAR" then do;
      'COMMAND Extract /Point/';
      do I = 3 to words(Point.1);
         Symbol = word(Point.1,I);
         if abbrev(Symbol,"CS_",3) | abbrev(Symbol,"CE_",3) then,
          'COMMAND Set Point' Symbol 'off';
         end;
      exit;
      end;
   if function = "SHADOW"
                        then call Prefix_error "Invalid on shadow line";
   end;
else do;
   if Cmd = "MULTIPLE" then do;
      Cmd = Multiple;
      Multiple = "MULTIPLE";
      end;
   CStart? = 0; CEnd? = 0;
   'COMMAND Extract /Cursor/Image/Line/LRecL/MSGMode/Ring/Stream/';
   Orig_Line = Line.1;
   do IX = 2 to Ring.0;
      'COMMAND XEdit' subword(Ring.IX,1,3);
      'COMMAND Extract /Pending Block BS/';
      if Pending.0 > 0 then do;
         'COMMAND XEdit' subword(Ring.2,1,3);
         if Switch = "SWITCH" then do;
            'COMMAND MACRO SELBLOCK' Cmd Multiple;
            exit;
            end;
         else
            call Error_exit "Do not mix BLOCK and CONTinuous selection";
         end;
      end;
   do IX = 2 to Ring.0;
      'COMMAND XEdit' subword(Ring.IX,1,3);
      'COMMAND Extract /Pending Block CS/';
      CStart? = Pending.0 > 0;
      if CStart? then do;
         Ring_FNr = IX;
         'COMMAND Locate :' || Pending.1;
         'COMMAND Extract /Point/';
         parse var Point.1 . CStart_L . " CS_" CStart_C .;
         if Pending.5 = "_CE" then CEnd? = 1;
         else do;
            'COMMAND Extract /Pending Block ___/';
            CEnd? = Pending.0 > 0 & Pending.5 = "CE";
            if CEnd? then do;
               'COMMAND Locate :' || Pending.1;
               'COMMAND Extract /Point/';
               end;
            end;
         if CEnd? | Cmd = "CLEAR" | CMD = "DELETE" then do;
            if CEnd? then parse var Point.1 . CEnd_L . " CE_" CEnd_C .;
            else do;
               CEnd? = 1;
               CEnd_L = Cursor.3;
               CEnd_C = Cursor.4;
               end;
            end;
         else if IX > 2 then do;
            'COMMAND XEdit' subword(Ring.2,1,3);
            call Error_exit "Incomplete block in:" subword(Ring.IX,1,3);
            end;
         leave IX;
         end;
      end;
   if Cursor.3 = -1 | Cursor.4 = -1 then do;
      if Cmd = "MARK" then do;
         call Reset;
         'COMMAND XEdit' subword(Ring.2,1,3);
         call Normal_exit;
         end;
      if Cmd ¬= "DELETE" & Cmd ¬= "CLEAR" | ¬CStart? then,
       call Error_exit "Cursor is not on a valid data field";
      end;
   if CEnd? then do;
      CLeft_C = min(CStart_C,CEnd_C);
      CLength = abs(CEnd_C-CStart_C)+1;
      LDirection = sign(CEnd_L-CStart_L);
      'COMMAND Locate :' || CStart_L;
      select;
         when Cmd = "DELETE" then do;
            'COMMAND Set Stream off';
            if LDirection = 0 then do;
               'COMMAND CLocate :' || CLeft_C;
               'COMMAND CDelete' CLength;
               end;
            else do;
               'COMMAND CLocate :' || CStart_C;
               if LDirection = +1 then 'COMMAND CDelete *';
               else 'COMMAND CDelete -*';
               'COMMAND Locate' LDirection;
               'COMMAND Delete :' || CEnd_L;
               if LDirection = +1 then 'COMMAND CLocate -*';
               else 'COMMAND CLocate *';
               'COMMAND CDelete :' || CEnd_C+LDirection;
               end;
            'COMMAND Set Stream' Stream.1;
            end;
         when Cmd = "MARK" then do;
            Cursor_abs = Cursor.3*LRecL.1+Cursor.4
            CStart_abs = CStart_L*LRecL.1+CStart_C;
            CEnd_abs = CEnd_L*LRecL.1+CEnd_C;
            if CStart_abs-Cursor_abs = 0 | CEnd_abs-Cursor_abs = 0
                                                                then do;
               call Reset;
               'COMMAND XEdit' subword(Ring.2,1,3);
               call Normal_exit;
               end;
           else if (CStart_abs > Cursor_abs) | (CStart_abs < Cursor_abs,
            & Cursor_abs < CEnd_abs,
            & abs(CStart_abs-Cursor_abs) < abs(CEnd_abs-Cursor_abs))
                                                                then do;
               'COMMAND Locate :' || CStart_L;
               'COMMAND Set Pending off';
               'COMMAND Set Point .CS_' || CStart_C 'off';
               'COMMAND Locate :' || Cursor.3;
               if Cursor.3 = CEnd_L
                                 then 'COMMAND Set Pending Block CS_CE';
               else 'COMMAND Set Pending Block CS___';
               'COMMAND Set Point .CS_' || Cursor.4;
               end;
            else do;
               'COMMAND Locate :' || CEnd_L;
               'COMMAND Set Pending off';
               'COMMAND Set Point .CE_' || CEnd_C 'off';
               'COMMAND Locate :' || Cursor.3;
               if Cursor.3 = CStart_L
                                 then 'COMMAND Set Pending Block CS_CE';
               else 'COMMAND Set Pending Block ___CE';
               'COMMAND Set Point .CE_' || Cursor.4;
               end;
            end;
         otherwise do;
            'COMMAND Set Image OFF';
            do LNr = 1 by 1 until Line.1 = CEnd_L;
               'COMMAND Extract /CurLine/Line/';
               if Cmd = "CLEAR" then do;
                select;
                 when Line.1 = CStart_L & Line.1 = CEnd_L then,
                  New = overlay(" ",Curline.3,CLeft_C,CLength," ");
                 when Line.1 = CStart_L then New = ,
                  overlay(" ",Curline.3,CStart_C,length(CurLine.3)," ");
                     when Line.1 = CEnd_L then,
                      New = overlay(" ",Curline.3,1,CEnd_C," ");
                     otherwise New = copies(" ",length(CurLine.3));
                     end;
                  'COMMAND Replace' New;
                  end;
               else select;
                  when Line.1 = CStart_L & Line.1 = CEnd_L then do;
                     Stack_Line.LNr = substr(Curline.3,CLeft_C,CLength);
                     Stack_Line.0 = LNr;
                     end;
                  when Line.1 = CStart_L then,
                   Stack_Line.LNr = substr(Curline.3,CStart_C);
                  when Line.1 = CEnd_L then do;
                     Stack_Line.LNr = substr(Curline.3,1,CEnd_C);
                     Stack_Line.0 = LNr;
                     end;
                  otherwise Stack_Line.LNr = CurLine.3;
                  end;
               'COMMAND Locate' LDirection;
               end;
            'COMMAND Set Image' Image.1;
            end;
         end;
      end;
   'COMMAND XEdit' subword(Ring.2,1,3);
   if CEnd? then do;
      'COMMAND Locate :' || Orig_Line
      if Cmd = "" then do;
         'COMMAND EMSG Enter function:  Insert or Replace';
         'COMMAND Cursor CMDLine';
         'COMMAND Read';
         pull Cmd;
         end;
      end;
   if Cursor.3 ¬= -1 then,
    'COMMAND Locate :' || Cursor.3 'COMMAND CLocate :' || Cursor.4;
   if CEnd? then do;
      if Cmd ¬= "CLEAR" & Cmd ¬= "DELETE" & Cmd ¬= "MARK" then do;
         select;
            when Cmd = "" then call Error_exit,
             "No block function specified  (Use: Insert | Replace)";
            when abbrev("INSERT",Cmd,1) then CCmd = "CINSERT";
            when abbrev("REPLACE",Cmd,1) then CCmd = "CREPLACE";
            otherwise call Error_exit,
             "Invalid function  (Use: Insert or Replace)";
            end;
         'COMMAND Extract /Curline/';
         if Cmd = "INSERT" then 'COMMAND CDelete *';
         Right_side = substr(Curline.3,Cursor.4);
         if Stack_Line.0 = 1
                         then 'COMMAND' CCmd Stack_Line.1 || Right_side;
         else do;
            'COMMAND' CCmd Stack_Line.1;
            'COMMAND Locate +1 CFirst';
            do LNr = 2 to Stack_Line.0
             if Cmd = "REPLACE" then 'COMMAND Delete -1';
             if LNr < Stack_Line.0 then,
                'COMMAND Set Mask Immed' Stack_Line.LNr;
             else 'COMMAND Set Mask Immed' Stack_Line.LNr || Right_side;
               'COMMAND Add 1';
               end;
            end;
         end;
      if Multiple ¬= "MULTIPLE" then do;
         'COMMAND XEdit' subword(Ring.Ring_FNr,1,3);
         call Reset;
         'COMMAND XEdit' subword(Ring.2,1,3);
         end;
      end;
   else do;
      'COMMAND Set MSGMode off';
      if CStart? then do;
         if Cursor.3 = CStart_L then 'COMMAND Set Pending Block CS_CE';
         else 'COMMAND Set Pending Block ___CE';
         'COMMAND Set Point .CE_' || Cursor.4 "off";
         'COMMAND Set Point .CE_' || Cursor.4;
         end;
      else do;
         'COMMAND Set Pending Block CS___';
         'COMMAND Set Point .CS_' || Cursor.4 "off";
         'COMMAND Set Point .CS_' || Cursor.4;
         end;
      end;
   end;
Normal_exit:
'COMMAND Set MSGMode' MSGMode.1 MSGMode.2;
'COMMAND Locate :' || Orig_Line
if Cursor.3 = -1 | Cursor.4 = -1 then 'COMMAND Cursor Screen' Cursor.5;
else 'COMMAND Cursor File' Cursor.3 Cursor.4;
exit;
Error_exit:
'COMMAND Locate :' || Orig_Line
Prefix_error:
if arg(1,"E") then 'COMMAND EMSG' arg(1);
exit;
Reset:
'COMMAND Set MSGMode off';
if CStart? then do;
   'COMMAND Locate :' || CStart_L;
   'COMMAND Set Pending off';
   'COMMAND Set Point .CS_' || CStart_C 'off';
   if CEnd? then do;
      'COMMAND Locate :' || CEnd_L;
      'COMMAND Set Pending off';
      'COMMAND Set Point .CE_' || CEnd_C 'off';
      end;
   end;
'COMMAND Set MSGMode' MSGMode.1 MSGMode.2;
return;

Anton Altbauer
IPP Garching (Germany)                        c IPP Garching 1991

