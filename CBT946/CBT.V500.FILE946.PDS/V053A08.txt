The VM/CMS pseudo-ISPF system

OVERVIEW

IBM's ISPF is used in most MVS sites to implement utilities to
submit JCL for compiles etc.  It contains facilities to display a
panel, validate the input fields, display error messages and
tailor the JCL.

The basic VM/CMS system does not include ISPF.  It is an
optional extra which most sites do not have.  Job submission
facilities are normally crude in comparison.  The VM/CMS
pseudo-ISPF system listed here will provide many of the
facilities of ISPF to these sites by using the readily available
REXX and XEDIT software.

The system comprises the following CMS files, which will
normally be installed on a CMS disk accessible to all users:

XXXCOBOL EXEC      Sample COBOL compile JCL
                              submission CMS EXEC.

XXXCOBOL ISPPLIB      Pseudo-ISPF Dialog Manager
                                    panel.

XXXCOBOL ISPSLIB      Pseudo-ISPF Dialog Manager
                                    skeleton JCL.

XXXDITTO EXEC      Sample DITTO JCL submission.

XXXDITTO ISPPLIB

XXXDITTO ISPSLIB

ISPEXEC  EXEC      Process ISPF ISPEXEC calls.

ISPFTINC EXEC      Process ISPF ISPEXEC FTINCL calls.

ISPMAIN  EXEC      Process ISPF Dialog Manager panels.

ISPEXEC  ISPMLIB      ISPF Dialog Manager messages.

ISPDISPL XEDIT      Display ISPF Dialog Manager
                                    panels XEDIT macro.

ISPUPACK XEDIT      Unpack CMS file XEDIT macro.


Work files

The system creates the following CMS work files on a user's A
disk, which are normally deleted on exit from pseudo-ISPF:

ISPMAINX EXEC      Process ISPF Dialog Manager panels.

ISPTEMP1 CNTL       JCL generated.

The standard CMS file, SESSION GLOBALV, is used to
'remember' the contents of panel input fields and for system
variables:


Command

The command syntax is:

      command Ýfn Ýft Ýfm ÝTEST¨¨¨¨

The two sample EXECs provided (XXXCOBOL and
XXXDITTO) can be invoked either from the CMS command
line or entered on a FILELIST filename line in order to pick up
the fn, ft, and fm from the line.

Entering the EXEC name without any parameters causes the fn,
ft, and fm last entered on the panel to be used (ie taken from
SESSION GLOBALV).

The fn, ft, and fm must be specified (as place holders) if the
TEST keyword is used.  They may be set to '*' or '=' to cause
the value last entered on the panel to be used.

The TEST keyword may be used to invoke the EXEC in test
mode.  This bypasses job submission and avoids deletion of the
JCL output file ISPTEMP1 CNTL, allowing it to be examined.


Data entry panels

The panels behave very similarly to ISPF job submission
panels. Pressing enter with an empty COMMAND field will
cause all input fields to be validated.  If there is an error the
cursor is positioned at the start of the field involved and a short
message is displayed to the right on line one.  The alarm will
sound if the message requires it.  Pressing the PF1 key at this
stage will cause a long message to be displayed on line three.
If all input fields are valid the JCL will be generated via the
pseudo-ISPF file tailoring services and submitted (except in test
mode), the contents of all input fields will be 'remembered' and
the EXEC will terminate returning the screen back to the
command line or FILELIST.

Pressing enter with a CMS command in the COMMAND field
will cause the command to be invoked.  For COBOL compiles,
for example, this can be used to go off to examine a FILELIST
to look up a program name and then return to this panel.

The PF3 key will terminate the EXEC without input field
validation and without storing the contents of input fields.  All
other PF keys will cause an INVALID KEY message to be
displayed.


Commands

The two samples provided (XXXCOBOL and XXXDITTO)
consist of simple EXECs to invoke the pseudo-ISPF functions.
With a minimal knowledge of REXX, they can easily be
customized to a particular site or to display more than one
panel.

Dialog manager commands are:

      ISPEXEC DISPLAY panelid
      ISPEXEC FTCLOSE
      ISPEXEC FTERASE
      ISPEXEC FTINCL fn ft fm ÝNOFT¨
      ISPEXEC FTOPEN TEMP
      *  ISPEXEC FTSUBMIT
      *  ISPEXEC ISPSTART panelid skeletonid Ýfn Ýft Ýfm¨¨¨

Where * equals an additional feature provided by pseudo-ISPF.
See ISPEXEC EXEC for details.


Panels

The ISPPLIB files are very similar to ISPF panels.  The BODY
section supports the basic features (input and output attribute
bytes and symbolic substitution of '&' variables).  The INIT
and PROC sections differ in that they must be written in
REXX, but do provide equivalents to the following ISPF
facilities:

o      Built-in functions:
      CURSOR (equivalent to ".CURSOR")
      *  EXIST Ýfn Ýft Ýfm¨¨¨
      MSG (equivalent to ".MSG")
vVER <variable> ÝNONBLANK Ý NB¨ Ý<type>¨ ÝMSG=msgid¨
            <type> may be:
                  ALPHA
                  *        ALPHABETIC
                  *        ALPHANUMERIC
                  BIT
                  HEX
                  LIST <list>
                  NAME
                  NUM
            PICT '<string>'
                  <string> may be any combination of:
                        A
                        B
                        C
                        N Ý 9
                        X
                        RANGE <from> <to>
                        *  VERFILE fn ft fm
                        VPUT <variable>
                  Where * equals an additional feature provided by pseudo-ISPF.

o      Built-in variables:
      &Z
      &ZAPPLID
      &ZDATE
      &ZDAY
      *  &ZDITTO
      *  &ZEOD
      *  &ZFM
      *  &ZFN
      *  &ZFT
      &ZJDATE
      *  &ZJOBC
      &ZLOGON
      *  &ZMACHINE
      &ZMONTH
      *  &ZPANELID
      *  &ZPP
      &ZPREFIX
      &ZTEMPF
      &ZTIME
      &ZUSER
      &ZYEAR

      Where * equals an additional feature provided by pseudo-ISPF.
      See ISPMAIN EXEC for details.


Skeleton JCL

Again ISPSLIB files are very similar to ISPF Dialog Manager
skeleton files.  They provide symbolic substitution of '&'
variables, built-in variables, comments, selection (any nested
level of SEL and ENDSEL commands), variable setting, and
imbedded CMS files (with unpacking where needed).

Skeleton JCL commands are:

      )CM Ý<comments>¨
      )ENDSEL
      )IM Ýfn Ýft Ýfm¨¨¨ ÝOPT¨ ÝNT¨
      )SEL <conditions>
      )SET <variable=value>

See ISPFTINCL EXEC for details.


Restrictions

The REXX code in the ISPPLIB files INIT and PROC sections
must be syntactically correct, so take care in this area.  This is
because it is extracted and combined with the ISPMAIN EXEC
file to create the file ISPMAINX EXEC A which is then
executed.  If the syntax is wrong REXX will terminate and
dump you back in XEDIT.


XXXCOBOL EXEC

/* REXX */
ARG FN FT FM TEST
ADDRESS CMS
'ISPEXEC ISPSTART XXXCOBOL XXXCOBOL' FN FT FM
IF RC = 0 THEN DO
   'ISPEXEC FTOPEN TEMP'
   'ISPEXEC FTINCL XXXCOBOL ISPSLIB *'
   RC1 = RC
   'ISPEXEC FTCLOSE'
   IF TEST ¬= 'TEST' THEN DO
      IF RC1 = 0 THEN DO
         'ISPEXEC FTSUBMIT'
         END
      'ISPEXEC FTERASE'
      END
   END
EXIT 0
/* DESCRIPTION:  SUBMIT COBOL COMPILE (NON-DL/I, NON-CICS)           */

XXXCOBOL ISPPLIB

)BODY
%-------------------------+SUBMIT COBOL COMPILE%------------------------
+COMMAND%===>_ZCMD                                                     +
+
+FILE NAME%===>_FN      +
+FILE TYPE%===>_FT      +
+FILE MODE%===>_FM      +
+
+OPTIONS  %===>_OPT1
+         %===>_OPT2
+
+JOB NAME %===>_JOB     +
+
+JOB OWNER%===>_OWNER   +
+ECHO     %===>_ECHO    +(NO|YES|JOB|REPLY)
+MACHINE  %===>_MACHINE +
+
+CLASS    %===>_CLASS   +
+DEST     %===>_DEST    +
+
+PRESS%PF3+TO CANCEL
)INIT
   IF ZFN ¬= '' & ZFN ¬= '=' & ZFN ¬= '*' THEN DO
      IF FN ¬= '' THEN DO
         IF FN = LEFT(JOB,LENGTH(FN)) THEN DO
            JOB = OVERLAY(ZFN,JOB)
            END
         END
      FN = ZFN
      END
   IF ZFT ¬= '' & ZFT ¬= '=' & ZFT ¬= '*' THEN FT = ZFT
   IF ZFM ¬= '' & ZFM ¬= '=' & ZFM ¬= '*' THEN FM = ZFM
   IF FT = '' THEN FT = 'COBOL'
   IF FM = '' THEN FM = 'A'
   IF OPT1 = '' THEN DO
      OPT1 = 'APOST,ERRS,SXREF,LIST,NODECK,LIB,CLIST,VERB,NOADV'
      END
   IF OWNER = '' THEN OWNER = ZUSER
   IF ECHO = '' THEN ECHO = 'YES'
   IF MACHINE = '' THEN MACHINE = ZMACHINE
   IF CLASS = '' THEN CLASS = 'R'
   IF DEST = '' THEN DEST = ZUSER
)PROC
   CALL VER '&FN' 'NONBLANK' 'ALPHANUMERIC'
   CALL VER '&FT' 'NONBLANK' 'ALPHANUMERIC'
   CALL VER '&FM' 'NONBLANK' 'ALPHANUMERIC'
   CALL VERFILE '&FN' '&FT' '&FM'
   CALL VER '&OPT1' 'NONBLANK'
   CALL VER '&JOB' 'NONBLANK' 'NAME'
   CALL VER '&OWNER' 'NONBLANK' 'NAME'
   TEMP = LEFT(ECHO,1)
   SELECT
      WHEN TEMP = 'N' THEN ECHO = 'NO'
      WHEN TEMP = 'Y' THEN ECHO = 'YES'
      WHEN TEMP = 'J' THEN ECHO = 'JOB'
      WHEN TEMP = 'R' THEN ECHO = 'REPLY'
      OTHERWISE
      END
   CALL VER '&ECHO' 'NONBLANK' 'LIST' 'NO' 'YES' 'JOB' 'REPLY'
   CALL VER '&MACHINE' 'NONBLANK' 'NAME'
   CALL VER '&CLASS' 'NONBLANK' 'PICT' 'C'
   CALL VER '&DEST' 'NONBLANK' 'NAME'
   ZMACHINE = MACHINE
   CALL VPUT 'ZMACHINE'
)END
/* DESCRIPTION:  ISPF DIALOG MANAGER PANEL                            */


XXXCOBOL ISPSLIB

)CM ********************************************************************
)CM VM/CMS COBOL COMPILE                                               *
)CM VERSION 01.00                                                      *
)CM ********************************************************************
&ZPP JOB JNM=&JOB,DISP=D,CLASS=A
&ZPP LST DISP=D,CLASS=&CLASS,PRI=3,DEST=(,&DEST)
&ZJOBC &JOB (&OWNER,ECHO=&ECHO)
/* ********************************************************************
/* XXXCOBOL COMPILE OF: &FN &FT &FM
/* ON: &ZDAY/&ZMONTH/&ZYEAR AT: &ZTIME MACHINE: &ZMACHINE
/* ********************************************************************
// LIBDEF PHASE,CATALOG=XXX.PGMLIB,SEARCH=XXX.PGMLIB
// OPTION SYM,CATAL
   PHASE &FN,*
// EXEC PGM=FCOBOL,SIZE=256K
)SEL &OPT1 ¬= &Z
 CBL &OPT1
)ENDSEL
)SEL &OPT2 ¬= &Z
 CBL &OPT2
)ENDSEL
)IM &FN &FT &FM NT
/*
// EXEC LNKEDT,SIZE=256K
/&
&ZPP EOJ
)CM DESCRIPTION:  ISPF DIALOG MANAGER SKELETON JCL                     *


XXXDITTO EXEC

/* REXX */
ARG FN FT FM TEST
ADDRESS CMS
'ISPEXEC ISPSTART XXXDITTO XXXDITTO' FN FT FM
IF RC = 0 THEN DO
   'ISPEXEC FTOPEN TEMP'
   'ISPEXEC FTINCL XXXDITTO ISPSLIB *'
   RC1 = RC
   'ISPEXEC FTCLOSE'
   IF TEST ¬= 'TEST' THEN DO
      IF RC1 = 0 THEN DO
         'ISPEXEC FTSUBMIT'
         END
      'ISPEXEC FTERASE'
      END
   END
EXIT 0
/* DESCRIPTION:  SUBMIT DITTO PRINT                                  */


XXXDITTO ISPPLIB

)BODY
%----------------------+DITTO PRINT OF A FILE%--------------------------
+COMMAND%===>_ZCMD                                                            +
+
+FILE NAME%===>_FN      +
+FILE TYPE%===>_FT      +
+FILE MODE%===>_FM      +
+
+JOB NAME %===>_JOB     +
+
+JOB OWNER%===>_OWNER   +
+ECHO     %===>_ECHO    +(NO|YES|JOB|REPLY)
+MACHINE  %===>_MACHINE +
+
+CLASS    %===>_CLASS   +
+DEST     %===>_DEST    +
+
+PRESS%PF3+TO CANCEL
)INIT
   IF ZFN ¬= '' & ZFN ¬= '=' & ZFN ¬= '*' THEN DO
      IF FN ¬= '' THEN DO
         IF FN = LEFT(JOB,LENGTH(FN)) THEN DO
            JOB = OVERLAY(ZFN,JOB)
            END
         END
      FN = ZFN
      END
   IF ZFT ¬= '' & ZFT ¬= '=' & ZFT ¬= '*' THEN FT = ZFT
   IF ZFM ¬= '' & ZFM ¬= '=' & ZFM ¬= '*' THEN FM = ZFM
   IF FM = '' THEN FM = 'A'
   IF LEFT(JOB,5) = 'DITTO' THEN DO
      TEMP = SUBSTR(JOB,6)
      IF LENGTH(TEMP) = 3 & TRANSLATE(TEMP,'1234567890') = '' THEN DO
         IF TEMP = 999 THEN TEMP = '001'
            ELSE TEMP = RIGHT(TEMP+1,3,'0')
         JOB = OVERLAY(TEMP,JOB,6)
         END
      END
   IF JOB = '' THEN JOB = 'DITTO001'
   IF OWNER = '' THEN OWNER = ZUSER
   IF ECHO = '' THEN ECHO = 'YES'
   IF MACHINE = '' THEN MACHINE = ZMACHINE
   IF CLASS = '' THEN CLASS = 'A'
   IF DEST = '' THEN DEST = 'P081'
)PROC
   CALL VER '&FN' 'NONBLANK' 'ALPHANUMERIC'
   CALL VER '&FT' 'NONBLANK' 'ALPHANUMERIC'
   CALL VER '&FM' 'NONBLANK' 'ALPHANUMERIC'
   CALL VERFILE '&FN' '&FT' '&FM'
   CALL VER '&JOB' 'NONBLANK' 'NAME'
   CALL VER '&OWNER' 'NONBLANK' 'NAME'
   CALL VER '&ECHO' 'NONBLANK' 'LIST' 'NO' 'YES' 'JOB' 'REPLY'
   CALL VER '&MACHINE' 'NONBLANK' 'NAME'
   CALL VER '&CLASS' 'NONBLANK' 'PICT' 'C'
   CALL VER '&DEST' 'NONBLANK' 'NAME'
   ZMACHINE = MACHINE
   CALL VPUT 'ZMACHINE'
)END
/* DESCRIPTION:  ISPF DIALOG MANAGER PANEL                           */


XXXDITTO ISPSLIB

)CM ********************************************************************
)CM VM/CMS DITTO PRINT                                                 *
)CM VERSION 01.00                                                      *
)CM ********************************************************************
&ZPP JOB JNM=&JOB,DISP=D,CLASS=A
&ZPP LST DISP=D,CLASS=&CLASS,PRI=3,DEST=(,&DEST)
&ZJOBC &JOB (&OWNER,ECHO=&ECHO)
/* ********************************************************************
/* XXXDITTO OF: &FN &FT &FM
/* ON: &ZDAY/&ZMONTH/&ZYEAR AT: &ZTIME MACHINE: &ZMACHINE
/* ********************************************************************
// UPSI 1
// EXEC PGM=DITTO
&ZDITTO  SET EOD=&ZEOD
&ZDITTO  CP
)IM &FN &FT &FM NT
&ZEOD
&ZDITTO  EOJ
/*
/&
&ZPP EOJ
)CM DESCRIPTION:  ISPF DIALOG MANAGER SKELETON JCL                     *


ISPEXEC EXEC

/* REXX */
ARG P1 P2 P3 P4 P5 P6
ADDRESS CMS
SELECT
   WHEN P1 = 'DISPLAY' THEN DO
      CALL SZ 'ZPANELID' P2
      'XEDIT ISPEXEC TEMP A (PROFILE ISPDISPL)'
      IF QUEUED() = 1 THEN DO
      PULL CC
      EXIT CC
      END
      'DROPBUF'
      EXIT 20
      END
   WHEN P1 = 'FTINCL' THEN DO
      'ISPFTINC' P2 P3 P4 P5
      EXIT RC
      END
   WHEN P1 = 'FTOPEN' THEN DO
      'GLOBALV SELECT ISP GET ZTEMPF'
      W = 'ISPTEMP1 CNTL A'
      IF P2 = 'TEMP' & ZTEMPF ¬= W THEN DO
      ZTEMPF = W
      'GLOBALV SELECT ISP SETLS ZTEMPF' ZTEMPF
      END
      'ERASE' ZTEMPF
      EXIT
      END
   WHEN P1 = 'FTCLOSE' THEN DO
      'GLOBALV SELECT ISP GET ZTEMPF'
      'CP CLOSE PUNCH NAME' ZTEMPF
      EXIT RC
      END
   WHEN P1 = 'FTERASE' THEN DO
      'GLOBALV SELECT ISP GET ZTEMPF'
      'ERASE' ZTEMPF
      EXIT RC
      END
   WHEN P1 = 'ISPSTART' THEN DO
      'IDENTIFY (STACK'
      PARSE PULL W WITH ' '
      YMD = DATE('O')
      YY = LEFT(YMD,2)
      DDD = RIGHT('00'DATE('D'),3)
      CALL SZ 'Z'
      CALL SZ 'ZAPPLID' P2
      CALL SZ 'ZDATE' YMD
      CALL SZ 'ZDAY' RIGHT(YMD,2)
      CALL SZ 'ZDITTO' '$$DITTO'
      CALL SZ 'ZEOD' '<Ý>'
      CALL SZ 'ZFM' P6
      CALL SZ 'ZFN' P4
      CALL SZ 'ZFT' P5
      CALL SZ 'ZJDATE' YY'.'DDD
      CALL SZ 'ZJOBC' '// JOB'
      CALL SZ 'ZLOGON'
      CALL SZ 'ZMACHINE' 'XXXVSE'
      CALL SZ 'ZMONTH' SUBSTR(YMD,4,2)
      CALL SZ 'ZPANELID' P3
      CALL SZ 'ZPP' '* $$'
      CALL SZ 'ZPREFIX' W
      CALL SZ 'ZTEMPF' 'ISPTEMP1 CNTL A'
      CALL SZ 'ZTIME' LEFT(TIME(),5)
      CALL SZ 'ZUSER' W
      CALL SZ 'ZYEAR' YY
      'XEDIT ISPEXEC TEMP A (PROFILE ISPDISPL)'
      IF QUEUED() = 1 THEN DO
      PULL CC
      EXIT CC
      END
      'DROPBUF'
      EXIT 20
      END
   WHEN P1 = 'FTSUBMIT' THEN DO
      'GLOBALV SELECT ISP GET ZMACHINE ZTEMPF ZUSER'
      'CP SPOOL PUN TO' ZMACHINE 'CLASS A NOH NOCONT'
      'CP CLOSE PUNCH NAME' WORD(ZTEMPF,1) WORD(ZTEMPF,2)
      'PUNCH' ZTEMPF '(NOH'
      CC = RC
      'CP SPOOL PUN TO' ZUSER
      IF CC ¬= 0 THEN SAY 'ISPEXEC FTSUBMIT FAILED (RC =' CC')'
      EXIT 20
      END
   OTHERWISE DO
      SAY 'ISPEXEC INVALID SERVICE'
      EXIT 20
      END
   END
/* SET GLOBAL VARIABLES ONLY IF THE VALUE HAS CHANGED                 */
SZ: PROCEDURE; ARG A B; C = A
   'GLOBALV SELECT ISP GET' C
   IF B ¬== VALUE(C) THEN 'GLOBALV SELECT ISP SETLS' C B
   RETURN
/* DESCRIPTION:  PROCESS ISPF ISPEXEC CALLS                           */


ISPFTINC EXEC

/* REXX */
ARG FN FT FM NO
ADDRESS CMS
'GLOBALV SELECT ISP GET ZAPPLID ZTEMPF'
'EXECIO * DISKR' FN FT FM '(FINI ZONE 1 72'
IF RC > 0 THEN DO
   SAY 'ISPFTINC FTINCL FILE MISSING:' FN FT FM '(RC =' RC')'
   EXIT 20
   END
IF NO = 'NOFT' THEN DO
   'EXECIO' QUEUED() 'DISKW' ZTEMPF '0 V (FINI'
   IF RC > 0 THEN DO
      SAY 'ISPFTINC FTINCL WRITE FAILED:' ZTEMPF '(RC =' RC')'
      DO WHILE QUEUED() > 0
         PULL T
         END
      EXIT 20
      END
   EXIT
   END
SEL = 1
SELLEVEL = 0
SELARRAY. =
SELARRAY.0 = 1
DO WHILE QUEUED() > 0
   PULL T
   IF LEFT(T,1) == ')' THEN SELECT
      WHEN LEFT(T,4) = ')CM' THEN NOP
      WHEN LEFT(T,8) = ')ENDSEL' THEN DO
         IF SELLEVEL = 0 THEN DO
            SAY 'ISPFTINC )ENDSEL HAS NO MATCHING )SEL'
            DO WHILE QUEUED() > 0
               PULL T
               END
            EXIT 20
            END
         SELLEVEL = SELLEVEL - 1
         SEL = SELARRAY.SELLEVEL
         END
      WHEN LEFT(T,4) = ')IM' THEN DO
         CALL SCAN
         W = SUBSTR(T,5)
         IF WORDS(W) = 0 | WORDS(W) > 5 THEN DO
            SAY 'ISPFTINC )IM INVALID NUMBER OF PARAMETERS'
            DO WHILE QUEUED() > 0
               PULL T
               END
            EXIT 20
            END
         W1 = WORD(W,1)
         W2 = WORD(W,2)
         W3 = WORD(W,3)
         W4 = WORD(W,4)
         W5 = WORD(W,5)
         Q = QUEUED()
         'MAKEBUF'
         'LISTFILE' W1 W2 W3 '(STACK'
         CC = RC
         'DROPBUF'
         IF CC > 0 THEN DO
            IF W4 ¬= 'OPT' & W5 ¬= 'OPT' THEN DO
               SAY 'ISPFTINC )IM FILE MISSING:' W1 W2 W3
               'DROPBUF'
               DO WHILE QUEUED() > 0
                  PULL T
                  END
               EXIT 20
               END
            END
         ELSE DO
            'MAKEBUF'
            'XEDIT' W1 W2 W3 '(PROFILE ISPUPACK)'
            IF RC > 0 THEN DO
               SAY 'ISPFTINC )IM READ FAILED:' W1 W2 W3 '(RC =' RC')'
               'DROPBUF'
               DO WHILE QUEUED() > 0
                  PULL T
                  END
               EXIT 20
               END
            IF W4 = 'NT' | W5 = 'NT' THEN DO
               'EXECIO' QUEUED()-Q 'DISKW' ZTEMPF '0 V'
               CC = RC
               'DROPBUF'
               IF CC > 0 THEN DO
                SAY 'ISPFTINC FTINCL WRITE FAILED:' ZTEMPF '(RC =' CC')'
                  DO WHILE QUEUED() > 0
                     PULL T
                     END
                  EXIT 20
                  END
               END
            END
         END
      WHEN LEFT(T,5) = ')SEL' THEN DO
         CALL SCAN "'"
         IF SEL = 1 THEN DO
            SEL = 0
            INTERPRET 'IF' SUBSTR(T,6) 'THEN SEL = 1'
            END
         SELLEVEL = SELLEVEL + 1
         SELARRAY.SELLEVEL = SEL
         END
      WHEN LEFT(T,5) = ')SET' THEN DO
         CALL SCAN "'"
         INTERPRET SUBSTR(T,6)
         'GLOBALV SELECT' ZAPPLID 'SETLS' WORD(T,2) VALUE(WORD(T,2))
         END
      OTHERWISE
         SAY 'ISPFTINC INVALID COMMAND'
         'DROPBUF'
         DO WHILE QUEUED() > 0
            PULL T
            END
         EXIT 20
      END
   ELSE DO
      IF SEL = 1 THEN DO
         CALL SCAN
         'EXECIO 1 DISKW' ZTEMPF '0 V (STRING' LEFT(T,72)
         IF RC > 0 THEN DO
            SAY 'ISPFTINC FTINCL WRITE FAILED:' ZTEMPF '(RC =' RC')'
            DO WHILE QUEUED() > 0
               PULL T
               END
            EXIT 20
            END
         END
      END
   END
IF SELLEVEL > 0 THEN DO
   SAY 'ISPFTINC )SEL HAS NO MATCHING )ENDSEL'
   EXIT 20
   END
EXIT
/* SYMBOLIC SUBSTITUTION OF "&" VARIABLES                             */
SCAN:; ARG DELIM
S = POS('&',T)
DO WHILE S > 0
   S = S + 1
   B = SUBSTR(T,S,1)
   SELECT
      WHEN B == '&' THEN T = DELSTR(T,S,1)
      WHEN DATATYPE(B,'U') THEN DO
         L = 1
         U = S + 1
         DO WHILE DATATYPE(SUBSTR(T,U,1),'A')
            L = L + 1
            U = U + 1
            END
         IF L < 9 THEN DO
            W = SUBSTR(T,S,L)
            X = ZAPPLID
            IF LEFT(W,1) = 'Z' THEN X = ISP
            'GLOBALV SELECT' X 'STACK' W
            PULL V
            IF SUBSTR(T,U,1) == '.' THEN T = DELSTR(T,U,1)
            L = L + 1
            U = U - L
            T = DELSTR(T,S-1,L)
            L = LENGTH(V) + (LENGTH(DELIM) * 2)
            T = INSERT(DELIM||V||DELIM,T,S-2,L)
            U = U + L
            END
         S = U
         END
      OTHERWISE NOP
      END
   S = POS('&',T,S)
   END
RETURN
/* DESCRIPTION:  PROCESS ISPF ISPEXEC FTINCL CALLS                    */

This article will be continued next month when we shall
publish the remaining three EXECs.

Peter Hayden
Consultant Programmer (UK)


