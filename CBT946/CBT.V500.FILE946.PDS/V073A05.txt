GDDM graph/image preparation on VM for AFP

At our installation (VM/SP Release 6 Level 602 - MVS/ESA)
PSF is installed on the MVS system. AFP printers (3816s) are
attached to the MVS system in classical AFP printer mode
(IPDS mode not 3270-attachment) and driven by PSF/MVS in
'line and page' mode. The systems are cross-domain linked
(VM ACF/VTAM 3.2) with VTAM-RSCS Networking
(Version 2.3) - VTAM-JES2 NJE communication.

The following EXECs were set up to create 'family-4' page
segment printer output from graph (CHART/GDF) and image
VM input files, using GDDM (Version 2.2) modules
(ADMUCDSO and ADMUIMPV). All the EXECs allow for an
option, not only to produce the page segment output file but
also to transfer the file via RSCS to the MVS NODEID for
immediate printing by PSF.

Note: modify all 'CL J' and 'MVSNODE' parameters in the
SPOOL and TAG statements to suit your installation. Module
CLRSCRN can be replaced with VMFCLEAR.


$UPRTCHT EXEC

/* This is an EXEC that reads a CHART Saved File (file-types :       */
/* ADMCDATA & ADMCFORM) and restores it to create a page segment     */
/* for a 3816 (Family 4) page printer.                               */
/* The User is prompted : 1) whether only a page segment output file */
/* should be created or whether the file should be printed as well,  */
/* and if to be printed 2) whether to retain or erase the page       */
/* segment output file after the file is spooled & "tagged" for      */
/* printing on one of the 3816s at "MVS-Node" (Where PSF reside -    */
/* Class "J" printing).                                              */
Clrscrn
Arg fncd fncf
If fncd = '?' && fncd = ''         /* If parameters not specified -- */
    Then Do                        /* -- then explain to the user    */
      Say '***********************************************************'
      Say '*  This EXEC reads a CHART File (Filetypes : ADMCDATA  &  *'
      Say '*  ADMCFORM) and restores it to create a page segment     *'
      Say '*  output file for a 3816-type printer. The file can      *'
      Say '*  optionally be directed to MVS where printing will      *'
      Say '*  occur.                                                 *'
      Say '*                                                         *'
      Say '*                                                         *'
      Say '*  Invocation format :                                    *'
      Say '*                                                         *'
      Say '*  $UPRTCHT ch-data-fname (ch-format-fname)               *'
      Say '*                                                         *'
      Say '*  Where :                                                *'
      Say '*  ch-data-fname   is the input "Chart Data Filename"     *'
      Say '*  ch-format-fname is the input "Chart Format Filename"   *'
      Say '*                                                         *'
      Say '*  Note  : ch-format-fname should only be specified when  *'
      Say '*  the ADMCFORM filename differ from ADMCDATA filename.   *'
      Say '***********************************************************'
      Say ' '
      Say ' '
      Say '     Now Please SPECIFY :-'
      Say ' '
      Say 'the  "ch-data-filename" of the ADMCDATA file -or-'
      Say 'the  "ch-data-filename  ch-format-filename"  -or-'
      Say '      TYPE "QUIT"  -------- to EXIT from the EXEC'
      Signal Retry
      End
Else Signal Go_pro_cess
Retry:
'MAKEBUF'
Pull fncd fncf
Clrscrn
If fncd ¬= 'QUIT'
     Then Do
          'DROPBUF'
          Signal Go_pro_cess
          End
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_pro_cess:
/* Substitute default value for unspecified parameter : ch-format-fn */
If fncf = '' Then Parse Value fncf "=" With fncf .  /* Ch-format: "="*/
Else Nop
/* Check that the specified ADMCDATA & ADMCFORM files exist          */
Address command 'STATE' fncd 'ADMCDATA' '*' /*  ADMCDATA file exist? */
fncdrc = rc                                 /* Save STATE rc         */
If fncdrc ¬= 0                     /* If not - issue error message   */
    Then Do                        /* and exit with CMS return code  */
         Say ' '
         Say fncd 'ADMCDATA * NOT FOUND'
         Say ' '
         Say 'Check accessed disks  - or -'
         Say 'Specify the correct filename'
         Say ' '
         Exit fncdrc
         End
Else Nop
Select
When fncf = '='
       Then Do                              /*  ADMCFORM file exist? */
            Address command 'STATE' fncd 'ADMCFORM' '*'
            fncdrc = rc
            If fncdrc ¬= 0
                Then Do
                     Say ' '
                     Say fncd 'ADMCFORM * NOT FOUND'
                     Say ' '
                     Say 'Check accessed disks  - or -'
                     Say 'Specify the correct filename'
                     Say ' '
                     Exit fncdrc
                     End
            Else Nop
            End
Otherwise Do
          Address command 'STATE' fncf 'ADMCFORM' '*'
          fncfrc = rc
          If fncfrc ¬= 0
              Then Do
                   Say ' '
                   Say fncf 'ADMCFORM * NOT FOUND'
                   Say ' '
                   Say 'Check accessed disks  - or -'
                   Say 'Specify the correct filename'
                   Say ' '
                   Exit fncfrc
                   End
          Else Nop
          End
End
/* Set default parameters                                            */
ds = '6 4'                         /* display = 6 (chart display)    */
oft = 'LIST38PP'                   /* Document for a 3816 printer    */
name = fncd fncf                   /* Input file id names            */
nlist = fncd 'LIST38PP' 'A1'            /* Output printer file id    */
propt = '5 0 7 10 8 80 115 0 9 1 32 0'  /* Procopt values            */
tok = 'A4'                              /* Printer device token      */
string = ''name' 'ds' 'tok' ('propt') ('nlist')'
/* Tell user about Input and Output Filenames                        */
Say ' '
Say 'ADMCDATA-file "filename" : 'fncd
Say 'ADMCFORM-file "filename" : 'fncf
Say 'Page Segment Output file : 'fncd oft 'A1'
Say ' '
Say ' '
Say 'Press ENTER ... to Continue'
Say ' '
'MAKEBUF'
Pull nonsense
'DROPBUF'
/* Check whether a file identical to Output file exists  ...         */
Address command 'STATE' fncd oft 'A1'
If rc = 0                          /* If rc = 0 : File exists        */
  Then Do
   Say ' '
   Say 'Output file --' fncd oft '-- currently exists on A disk'
   Say ' '
   Say 'Press ENTER key to REPLACE file and continue ..'
   Say '- or - TYPE "QUIT" -- to EXIT EXEC'
   Say ' '
   Signal Reqst
   End
Else Signal Go_prompt_prt
Reqst:
'MAKEBUF'
Pull garb
If garb ¬= 'QUIT' Then Signal Go_prompt_prt
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_prompt_prt:
'DROPBUF'
Clrscrn
Say ' '
Say '***********************************************************'
Say '*                                                         *'
Say '* The Output file will now be generated on the A disk ... *'
Say '*                                                         *'
Say '***********************************************************'
Say ' '
Say ' '
Say 'Press ENTER key to "PRINT" the Output file ..'
Say '- or - TYPE "NO" -- to "PLACE" on A disk ONLY'
Say ' '
'MAKEBUF'
Pull prnt
'DROPBUF'
Go_generate:
/* Invoke ADMUCDSO to generate the Output file                       */
Address command 'ADMUCDSO' string
psgmrc = rc
If psgmrc ¬= 0 & prnt ¬= 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say 'The Output file will not be Printed ............'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc ¬= 0 & prnt = 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc = 0 & prnt = 'NO'
   Then Do
     Clrscrn
     Say ' '
     Say '****************************************************'
     Say '*                                                  *'
     Say '* The Output file has been placed on the A disk .. *'
     Say '*                                                  *'
     Say '****************************************************'
     Say ' '
     Say ' '
     Exit psgmrc
     End
Else Do
     Say ' '
     Say '***********************************************************'
     Say '*                                                         *'
     Say '* The Output file will now be transferred for Printing .. *'
     Say '*                                                         *'
     Say '***********************************************************'
     Say ' '
     Say ' '
     Say 'Press ENTER key to "ERASE" the Output file ..........'
     Say '- or - TYPE "NO" -- to "RETAIN" Output file on A disk'
     Say ' '
     End
'MAKEBUF'
Pull respnse
'DROPBUF'
'MAKEBUF'                   /* Now verify the current Printer status */
'Execio * cp (str QUERY VIRTUAL E'
Pull . . . cl cn ho . . . . fo
Pull . to tw . di . . . de
'DROPBUF'
'MAKEBUF'                   /* Now verify the current TAG set status */
'Execio * cp (str TAG QUERY DEV E'
Pull . . tagtxt
If tagtxt = 'TAG NOT SET' Then Signal Go_print
Else Do
     Pull tagtxt
     End
Go_print:
'DROPBUF'
/* Spool PRT to RSCS Cl J (PSF Printing on MVS)                      */
'CP SP PRT TO RSCS CL J NOH COPY 1 FORM STD'  /* -- Prt  -  RSCS  -- */
'CP TAG DEV PRT MVSNODE'       /* TAG Printer for MVS Node-Id        */
Address command 'PRINT' fncd oft 'A1'   /* Now issue "PRINT" command */
/* Re-instate previous Prt (00E) status                              */
'CP SP PRT 'TO' 'TW' CL 'CL' 'CN' 'HO' FORM 'FO' DIST 'DI' DEST 'DE''
/* Re-instate previous TAG status                                    */
If tagtxt = 'TAG NOT SET'
     Then Do
          'CP TAG DEV PRT'             /* TAG was NOT SET - Turn Off */
          End
Else Do
     'CP TAG DEV PRT 'TAGTXT''                /* Set TAG status back */
     End
If respnse ¬= 'NO'              /* User indicated file to be deleted */
     Then Do
         Address command 'ERASE' fncd oft 'A1' /* Delete output file */
         Say ' '
         Exit 0
         End
Else Say ' '
Exit 0


$UPRTGDF EXEC

/* This is an EXEC that reads a GDF Saved File (file-type: ADMGDF)   */
/* and restores it to create a page segment for a 3816 (Family 4)    */
/* page printer.                                                     */
/* The User is prompted : 1) whether only a page segment output file */
/* should be created or whether the file should be printed as well,  */
/* and if to be printed 2) whether to retain or erase the page       */
/* segment output file after the file is spooled & "tagged" for      */
/* printing on one of the 3816s at "MVS-Node" (Where PSF reside -    */
/* Class "J" printing).                                              */
Clrscrn
Arg fn ft fm
If fn = '?' && fn = ''             /* If parameters not specified -- */
    Then Do                        /* -- then explain to the user    */
      Say '***********************************************************'
      Say '*  This EXEC reads a GDF File (Filetype : ADMGDF) and     *'
      Say '*  restores it to create a Page Segment Output File for   *'
      Say '*  a 3816-type printer. The file can optionally be        *'
      Say '*  directed to MVS where printing will occur.             *'
      Say '*                                                         *'
      Say '*  Invocation format :                                    *'
      Say '*                                                         *'
      Say '*  $UPRTGDF filename ((filetype) (filemode))              *'
      Say '*                                                         *'
      Say '*  Where :                                                *'
      Say '*  filename    -   is the input "filename"                *'
      Say '*  filetype    -   is the input "filetype"                *'
      Say '*  filemode    -   is the input "filemode"                *'
      Say '*                                                         *'
      Say '*  Note  : When "filetype filemode" is specified the      *'
      Say '*          "filetype" must be ADMGDF                      *'
      Say '***********************************************************'
      Say ' '
      Say '     Now Please SPECIFY :-'
      Say ' '
      Say 'the  "filename" of the GDF file ............ -or-'
      Say 'the  "filename filetype filemode" .......... -or-'
      Say '      TYPE "QUIT"  -------- to EXIT from the EXEC'
      Signal Retry
      End
Else Signal Go_pro_cess
Retry:
'MAKEBUF'
Pull fn ft fm
Clrscrn
If fn ¬= 'QUIT'
     Then Do
          'DROPBUF'
          Signal Go_pro_cess
          End
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_pro_cess:
/* Substitute default values for unspecified file parameters         */
If ft = ''
    Then Do
         Parse Value ft "ADMGDF" With ft .        /* I/P file type   */
         Parse Value fm "*" With fm .             /* I/P file mode   */
         End
/* Check that the filetype is "ADMGDF"                               */
If ft ¬= 'ADMGDF'                  /* If not - issue error message   */
   Then Do                         /* and exit with rc = 100         */
        Say ' '
        Say 'Specified filetype must be ADMGDF'
        Say ' '
        Exit 100
        End
Else Nop
/* Check that the specified GDF file exists .....                    */
Address command 'STATE' fn ft fm   /* Look for specified file        */
src = rc                           /* Save STATE rc                  */
If src ¬= 0                        /* If not - issue error message   */
    Then Do                        /* and exit with CMS return code  */
         Say ' '
         Say fn ft fm 'NOT FOUND'
         Say ' '
         Say 'Check accessed disks  - or -'
         Say 'Specify the correct filename'
         Say ' '
         Exit src
         End
Else Nop
/* Set default parameters                                            */
ds = '99 4'                        /* display = 99 (GDF - display)   */
oft = 'LIST38PP'                   /* Document for a 3816 printer    */
name = fn 'GDF'                    /* Input file id names            */
nlist = fn 'LIST38PP' 'A1'              /* Output printer file id    */
propt = '5 0 7 10 8 80 115 0 9 1 32 0'  /* Procopt values            */
tok = 'A4'                              /* Printer device token      */
string = ''name' 'ds' 'tok' ('propt') ('nlist')'
/* Tell user about Input and Output Filenames                        */
Say ' '
Say 'GDF Input file ......... : 'fn ft fm
Say 'Page Segment Output file : 'fn oft 'A1'
Say ' '
Say ' '
Say 'Press ENTER ... to Continue'
Say ' '
'MAKEBUF'
Pull nonsense
'DROPBUF'
/* Check whether a file identical to Output file exists  ...         */
Address command 'STATE' fn oft 'A1'
If rc = 0                          /* If rc = 0 : File exists        */
  Then Do
   Say ' '
   Say 'Output file --' fn oft '-- currently exists on A disk'
   Say ' '
   Say 'Press ENTER key to REPLACE file and continue ..'
   Say '- or - TYPE "QUIT" -- to EXIT EXEC'
   Say ' '
   Signal Reqst
   End
Else Signal Go_prompt_prt
Reqst:
'MAKEBUF'
Pull garb
If garb ¬= 'QUIT' Then Signal Go_prompt_prt
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_prompt_prt:
'DROPBUF'
Clrscrn
Say ' '
Say '***********************************************************'
Say '*                                                         *'
Say '* The Output file will now be generated on the A disk ... *'
Say '*                                                         *'
Say '***********************************************************'
Say ' '
Say ' '
Say 'Press ENTER key to "PRINT" the Output file ..'
Say '- or - TYPE "NO" -- to "PLACE" on A disk ONLY'
Say ' '
'MAKEBUF'
Pull prnt
'DROPBUF'
Go_generate:
/* Invoke ADMUCDSO to generate the Output file                       */
Address command 'ADMUCDSO' string
psgmrc = rc
If psgmrc ¬= 0 & prnt ¬= 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say 'The Output file will not be Printed ............'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc ¬= 0 & prnt = 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc = 0 & prnt = 'NO'
   Then Do
     Clrscrn
     Say ' '
     Say '****************************************************'
     Say '*                                                  *'
     Say '* The Output file has been placed on the A disk .. *'
     Say '*                                                  *'
     Say '****************************************************'
     Say ' '
     Say ' '
     Exit psgmrc
     End
Else Do
     Say ' '
     Say '***********************************************************'
     Say '*                                                         *'
     Say '* The Output file will now be transferred for Printing .. *'
     Say '*                                                         *'
     Say '***********************************************************'
     Say ' '
     Say ' '
     Say 'Press ENTER key to "ERASE" the Output file ..........'
     Say '- or - TYPE "NO" -- to "RETAIN" Output file on A disk'
     Say ' '
     End
'MAKEBUF'
Pull respnse
'DROPBUF'
'MAKEBUF'                   /* Now verify the current Printer status */
'Execio * cp (str QUERY VIRTUAL E'
Pull . . . cl cn ho . . . . fo
Pull . to tw . di . . . de
'DROPBUF'
'MAKEBUF'                   /* Now verify the current TAG set status */
'Execio * cp (str TAG QUERY DEV E'
Pull . . tagtxt
If tagtxt = 'TAG NOT SET' Then Signal Go_print
Else Do
     Pull tagtxt
     End
Go_print:
'DROPBUF'
/* Spool PRT to RSCS Cl J (PSF Printing on MVS)                      */
'CP SP PRT TO RSCS CL J NOH COPY 1 FORM STD'  /* -- Prt  -  RSCS  -- */
'CP TAG DEV PRT MVSNODE'       /* TAG Prt for MVS Node-Id            */
Address command 'PRINT' fn oft 'A1'     /* Now issue "PRINT" command */
/* Re-instate previous Prt (00E) status                              */
'CP SP PRT 'TO' 'TW' CL 'CL' 'CN' 'HO' FORM 'FO' DIST 'DI' DEST 'DE''
/* Re-instate previous TAG status                                    */
If tagtxt = 'TAG NOT SET'
     Then Do
          'CP TAG DEV PRT'             /* TAG was NOT SET - Turn Off */
          End
Else Do
     'CP TAG DEV PRT 'TAGTXT''                /* Set TAG status back */
     End
If respnse ¬= 'NO'              /* User indicated file to be deleted */
     Then Do
         Address command 'ERASE' fn oft 'A1'   /* Delete output file */
         Say ' '
         Exit 0
         End
Else Say ' '
Exit 0


$UPRTIMG EXEC

/* This is an EXEC that reads an IMAGE Saved File (filetype :        */
/* ADMIMG) and restores it to create a page segment for a 3816       */
/* (Family 4) page printer.                                          */
/* The User is prompted : 1) whether only a page segment output file */
/* should be created or whether the file should be printed as well,  */
/* and if to be printed 2) whether to retain or erase the page       */
/* segment output file after the file is spooled & "tagged" for      */
/* printing on one of the 3816s at "MVS-Node" (Where PSF reside -    */
/* Class "J" printing).                                              */
Clrscrn
Arg fn ft fm
If fn = '?' && fn = ''             /* If parameters not specified -- */
    Then Do                        /* -- then explain to the user    */
      Say '***********************************************************'
      Say '*  This EXEC reads an IMAGE File (Filetype : ADMIMG) and  *'
      Say '*  restores it to create a Page Segment Output File for   *'
      Say '*  a 3816-type printer. The file can optionally be        *'
      Say '*  directed to MVS where printing will occur.             *'
      Say '*                                                         *'
      Say '*                                                         *'
      Say '*   Invocation format :                                   *'
      Say '*                                                         *'
      Say '*   $UPRTIMG filename ((filetype) (filemode))             *'
      Say '*                                                         *'
      Say '*   where filename is the input filename                  *'
      Say '*   where filetype is the input filetype (default ADMIMG) *'
      Say '*   where filemode is the input filemode  (default *)     *'
      Say '***********************************************************'
      Say ' '
      Say ' '
      Say ' '
      Say '     Now Please SPECIFY :-'
      Say ' '
      Say '        the  "filename"  of the ADMIMG file'
      Say '- or -  the  "filename filetype filemode"'
      Say '- or -  TYPE "QUIT" - to EXIT from the EXEC'
      Signal Retry
      End
Else Signal Go_pro_cess
Retry:
'MAKEBUF'
Pull fn ft fm
Clrscrn
If fn ¬= 'QUIT'
     Then Do
          'DROPBUF'
          Signal Go_pro_cess
          End
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_pro_cess:
/* Substitute default values for unspecified paramaters              */
If ft = ''
    Then Do
         Parse Value ft "ADMIMG" With ft .        /* I/P file type   */
         Parse Value fm "*" With fm .             /* I/P file mode   */
         End
/* Check that the filetype is "ADMIMG"                               */
If ft ¬= 'ADMIMG'                  /* If not - issue error message   */
   Then Do                         /* and exit with rc = 100         */
        Say ' '
        Say 'Specified filetype must be ADMIMG'
        Say ' '
        Exit 100
        End
Else Nop
/* Check that the specified Image file exists                        */
Address command 'STATE' fn ft fm   /* Look for specified file        */
src = rc                           /* Save STATE rc                  */
If rc ¬= 0                         /* If not - issue error message   */
    Then Do                        /* and exit with CMS return code  */
         Say ' '
         Say fn ft fm 'NOT FOUND'
         Say ' '
         Say 'Check accessed disks  - or -'
         Say 'Specify the correct filename'
         Say ' '
         Exit src
         End
Else Nop
/* Set default parameters                                            */
sc = '0'                           /* scale 0 = image size  -        */
                                   /*  field size will be ignored    */
                                   /* scale 1 = no image scaling  -  */
                                   /*  image may be clipped          */
                                   /* scale 2 = exact fit  -         */
                                   /*  image may be distorted        */
                                   /* scale 3 = maintain aspect ratio*/
                                   /* -image may have space in 1 dim */
oft = 'LIST38PP'                   /* Document for a 3816 printer    */
name = fn ft fm                    /* Input file id                  */
nlist = fn oft 'A1'                     /* Output printer file id    */
propt = '5 0 7 10 8 80 115 0 9 1 32 0'  /* Procopt values            */
tok = 'A4'                              /* Printer device token      */
fld = '0'                          /* Image field size -             */
                                   /* fldh = hor dim (def 0)         */
                                   /* fldv = ver dim (def 0)         */
                                   /* flds = Units for fldh & fldv : */
                                   /* 0 : tenths of inches (def)     */
                                   /* 1 : millimeters                */
string = '('name')('sc')('nlist')('propt')('tok')('fld')'
/* Tell user about Input and Output Filenames                        */
Say ' '
Say 'Image file  :  ' name
Say 'Output file :  ' nlist
Say ' '
Say ' '
Say 'Press ENTER key ... to Continue'
Say ' '
'MAKEBUF'
Pull nonsense
'DROPBUF'
/* Check whether the specified page segment file exist ...           */
Address command 'STATE' fn oft 'A1'
If rc = 0                          /* If rc = 0 : File exists        */
    Then Do
         Say ' '
         Say 'Output file --' fn oft '-- currently exists on A disk'
         Say ' '
         Say 'Press ENTER key to REPLACE file and continue ..'
         Say '- or - TYPE "QUIT" -- to EXIT EXEC'
         Say ' '
         Signal Reqst
         End
Else Signal Go_prompt_prt
Reqst:
'MAKEBUF'
Pull garb
If garb ¬= 'QUIT'
     Then Do
          'DROPBUF'
          Address command 'ERASE' fn oft 'A1'  /* Delete old version */
          Signal Go_prompt_prt
          End
Else
'DROPBUF'
Say ' '
Say 'Leaving "EXEC" on User request ...'
Say ' '
Exit
Go_prompt_prt:
Clrscrn
Say ' '
Say '***********************************************************'
Say '*                                                         *'
Say '* The Output file will now be generated on the A disk ... *'
Say '*                                                         *'
Say '***********************************************************'
Say ' '
Say ' '
Say 'Press ENTER key to "PRINT" the Output file ..'
Say '- or - TYPE "NO" -- to "PLACE" on A disk ONLY'
Say ' '
'MAKEBUF'
Pull prnt
'DROPBUF'
Go_generate:
/* Start the GDDM Page Segment generation module                     */
Address command 'ADMUIMPV' string
psgmrc = rc
If psgmrc ¬= 0 & prnt ¬= 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say 'The Output file will not be Printed ............'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc ¬= 0 & prnt = 'NO'
   Then Do
        Clrscrn
        Say ' '
        Say 'An Error occurred during Page Segment Generation'
        Say '- Please check the RC value to identify Error -'
        Say ' '
        Exit psgmrc
        End
If psgmrc = 0 & prnt = 'NO'
   Then Do
     Clrscrn
     Say ' '
     Say '****************************************************'
     Say '*                                                  *'
     Say '* The Output file has been placed on the A disk .. *'
     Say '*                                                  *'
     Say '****************************************************'
     Say ' '
     Say ' '
     Exit psgmrc
     End
Else Do
     Say ' '
     Say '***********************************************************'
     Say '*                                                         *'
     Say '* The Output file will now be transferred for Printing .. *'
     Say '*                                                         *'
     Say '***********************************************************'
     Say ' '
     Say ' '
     Say 'Press ENTER key to "ERASE" the Output file ..........'
     Say '- or - TYPE "NO" -- to "RETAIN" Output file on A disk'
     Say ' '
     End
'MAKEBUF'
Pull respnse
'DROPBUF'
'MAKEBUF'                   /* Now verify the current Printer status */
'Execio * cp (str QUERY VIRTUAL E'
Pull . . . cl cn ho . . . . fo
Pull . to tw . di . . . de
'DROPBUF'
'MAKEBUF'                   /* Now verify the current TAG set status */
'Execio * cp (str TAG QUERY DEV E'
Pull . . tagtxt
If tagtxt = 'TAG NOT SET' Then Signal Go_print
Else Do
     Pull tagtxt
     End
Go_print:
'DROPBUF'
/* Spool PRT to RSCS Cl J (PSF Printing on MVS)                      */
'CP SP PRT TO RSCS CL J NOH COPY 1 FORM STD'  /* -- Prt  -  RSCS  -- */
'CP TAG DEV PRT MVSNODE'       /* TAG Prt for MVS Node-Id            */
Address command 'PRINT' fn oft 'A1'     /* Now issue "PRINT" command */
/* Re-instate previous Prt (00E) status                              */
'CP SP PRT 'TO' 'TW' CL 'CL' 'CN' 'HO' FORM 'FO' DIST 'DI' DEST 'DE''
/* Re-instate previous TAG status                                    */
If tagtxt = 'TAG NOT SET'
     Then Do
          'CP TAG DEV PRT'             /* TAG was NOT SET - Turn Off */
          End
Else Do
     'CP TAG DEV PRT 'TAGTXT''                /* Set TAG status back */
     End
If respnse ¬= 'NO'              /* User indicated file to be deleted */
     Then Do
          Address command 'ERASE' fn oft 'A1'  /* Delete new version */
          Say ' '
          Exit 0
          End
Else Say ' '
Exit 0


J J Bruwer
System Software Analyst
CDM (Pty) Ltd (Namibia)                                    c CDM (Pty) Ltd 1992

