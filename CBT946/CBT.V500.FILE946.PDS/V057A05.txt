XEDIT 'gold' PF keys

On occasions I have envied colleagues using the Edt editor on
VAX machines, with its multiple function PF keys made
available by the use of the 'gold' function key.

What this key does is simply trigger an alternative use (the
'gold' function) of the next PF key to be pressed. This doubles
the number of functions available for a given number of PF
keys. I especially wished I had this capability, so I could use
the PF13-PF24 keypad without having to get to the 'alt' PF keys
on the numeric typewriter keys.

The GOLD XEDIT macro, when assigned to a PF key, will
macro 'read' the next PF key pressed, and perform the
predefined gold function for that key. My choice of PF key is
PF13 because it is in the same position used by Edt for gold.

To set up the gold table and PF key, build the GOLD PFKLIST
file, and put these two commands in your PROFILE XEDIT
file:

'command macro gold init'      /* initialize gold table */
'command set pf13 after macro gold' /* run gold after cmdline */

The GOLD PFKLIST file consists of three types of record:
comment, PF key definition, and linend character definition.
All records are optional. A comment may be either a blank line
or a line with an asterisk in the first column. Comments may be
used freely to annotate the file. A linend character definition
must have the symbol # in column 1, and some character in
column 10.  This character may be used in the PF key
definitions, and will be interpreted as a linend character when
the definition is used, regardless of the XEDIT linend setting at
that time.

All other lines are assumed to be PF definitions, and must be in
the following format:

o      Starting at column 1 put the name of the key being defined;
      ie 'PF' and the one-or two-digit PF number. (Leading zeros
      may be used if desired.)

o      Starting at column 10 put the command to be executed
      when this PF key is pressed after the gold key. Commands
      may be chained with the linend character between them. If
      no linend definition record was included, the command
      will be passed without change to XEDIT. In that case, if
      the command contains characters defined at that time as
      linend characters, XEDIT will perform the command as if
      it had multiple lines.

After these steps, at the beginning of each XEDIT session the
current GOLD PFKLIST file will be read into a GLOBALV
table. Entering a second file (adding files to the XEDIT ring)
does not cause the file to be read again, it is only read when the
first file in the ring is initialized.

If you change the GOLD PFKLIST file during an editing
session, it may be reloaded into GLOBALV with the GOLD
REFRESH command.

The GLOBALV table can be removed by the GOLD PURGE
command.


GOLD XEDIT MACRO

/* REXX */
arg parm .
if    parm ¬= '' | queued() ¬= 0 then signal NOT_PF
'command msg PRESS PFKEY FOR GOLD FUNCTION'  /* prompt user for key */
'command read cmdline tag'          /* get key with tag   */
do    queued()                            /* either once or twice */
    parse pull tag keynum pftext 1 . text
    select
         when tag = 'PFK'  then call GOLDPF   /* real PF job          */
         when tag = 'PAK'  then pftext        /* PAK has number also  */
         otherwise         text              /* ETK/CMD have data only*/
    end  /* of select on tag */
end /* of loop on queued lines */
exit rc                                      /* return rc of last cmd */
 /* */
GOLDPF:
address command 'GLOBALV SELECT XEDGOLD', /* ask CMS for GLOBALV data */
                'GET GLE PFK.'keynum      /* internal le char and key */
gcmd = value('PFK.'keynum)                 /* copy val of unknown var */
if       gcmd = ''                         /* no GLOBALV entry        */
    then pftext                            /* use XEDIT PF definition */
    else do
         if        gle = ''                /* no user linend char     */
              then gcmd                    /* run command as-is       */
              else do                      /* check linend status     */
                   'command extract /linend/'  /* on/off and char     */
                   if       linend.1 = 'ON' /* xedit will split lines */
                        then do            /* just use users le char  */
                             gcmd = translate(gcmd,linend.2,gle)
                             gcmd          /* run the command         */
                             end
                        else do while gcmd ¬= '' /* replace le here   */
                            parse var gcmd cmd (gle) gcmd /* get 1 cmd*/
                            cmd           /* run it                   */
                            end
                   end  /* of 'else do' (gle ¬= '') */
         end  /* of 'else do' (gcmd ¬= '') */
return
NOT_PF:       /* routine for queued lines or parms */
if       parm = ''                        /* standard PF call, we got */
    then do                               /* ..here because of queued */
         'command emsg GOLD MACRO REQUIRES EMPTY STACK.'
         exit 8
         end
if       find('INIT REFRESH PURGE', parm) = 0  /* parm was not valid  */
    then do
         'command emsg INVALID PARM "'parm'" FOR GOLD MACRO.'
         exit 8
         end
'command extract /nbfile/'                 /* how many files in use?  */
if       parm = 'INIT',                    /* do init on 1st only     */
    &    nbfile.1 > 1
    then exit /* no msg! call from prof*/  /* don't do it again       */
address command                            /* we will talk to CMS now */
'QUERY CMSTYPE ( LIFO'                     /* get current ht/rt state */
pull . . ctype .                           /* save to restore it      */
'SET CMSTYPE HT'                           /* keep quiet              */
'ESTATE GOLD PFKLIST *'                    /* check if list exists    */
src = rc                                   /* save result             */
'SET CMSTYPE' ctype                        /* as before               */
if       src ¬= 0,                         /* list not found, but ... */
    &    parm ¬= 'PURGE'                   /* table must be built     */
    then do
         address xedit 'command emsg GOLD MACRO REQUIRES',
                 ' "GOLD PFKLIST" FOR INITIALIZATION.'
         exit 8
         end
'GLOBALV SELECT XEDGOLD PURGE'            /* remove last session's PFs*/
if       parm = 'PURGE'                   /* if that's what was wanted*/
    then exit                             /* leave, it's done!        */
'GLOBALV SELECT XEDGOLD'                  /* build tab in xedgold grp */
'EXECIO * DISKR GOLD PFKLIST * ( FINIS STEM GPF.'
do       pfi = 1 to gpf.0
    parse var gpf.pfi  pfnum 10 text  1  prepf 'PF' num .,
                       1 flag 2 . 10 glechar +1 /* parse one record   */
    select
         when      gpf.pfi = '',                /* blank = comment    */
              |    flag = '*'  then nop         /* comment record     */
         when      flag = '#',                  /* linend record      */
              &    glechar ¬= ''               /* some char in pos 10 */
              then 'GLOBALV SET GLE' glechar   /* save user's le char */
         when      prepf == ''  &  num ¬= '',   /* record starts 'PF' */
              &    verify(num,'1234567890') = 0 /* followed by number */
              then do
                   num = 0 + num               /* ensure shortest form*/
                   pfk.num = text               /* prepare variable   */
                   'GLOBALV PUT PFK.'num        /* save in GLOBALV    */
                   end
         otherwise address xedit 'command emsg INVALID RECORD' pfi,
                   'IN "GOLD PFKLIST".'         /* emsg, and continue */
    end  /* select */
end  /* 1 to gpf.0 */
'GLOBALV SELECT UNNAMED'                      /* restore usual status */
exit


DOCUMENTATION FOR XEDIT MACRO

At entry to macro, check if any parameter was passed, or if any
data is queued.  The gold PF function is run with no parameters
to the macro.  The stack must be empty, otherwise the macro
read will be a NOP.  If either condition fails, go to 'NOT_PF'
routine, to check for valid initialization conditions.

If both conditions are passed, show user a message, and do a
macro 'read'.  After the macro read, the stack will contain 1 or
2 lines, stacked FIFO, depending on the definition of the key
pressed, and whether any data was entered on the command
line before the key was pressed: (cases are labelled A-E in
Figure 1).

The macro must always read (pull) at least one line from the
stack; if the stack still contains data, the second line will also
be read.

The lines read will have the tags shown in Figure 2 (by case as
listed in Figure 1).  Each line pulled after the read is checked
by tag.  One, at most, will have the tag 'PFK'.  If such a line is
found, an entry is obtained for the PF key pressed, from the
GLOBALV 'XEDGOLD' table.  If no entry exists, the XEDIT
PF definition is used.  If an entry does exist, it will be used.

If no user linend character was defined, submit the string as an
XEDIT command.  If a character was defined and linend is
'on', convert all occurrences of the user character to whatever
XEDIT knows as the linend character, and submit.  If linend is
'off', parse the string into separate commands and submit each
one.

All lines with tags other than 'PFK' are submitted as is, 'PAK'
lines from the third token (after 'PAK' and the PA key number),
others ('ETK' and 'CMD') from the second token.

NOT_PF' routine

In principle this routine is only used for initializing the
GLOBALV table.  In order to remove error analysis code from
the main routine (to save run time), errors are also shown from
here.

If gold was called with no parameter (in order to use an
alternative function PF key) when the stack was not empty, an
error message is displayed.  The macro read facility requires an
empty stack.  Calls containing a parameter are for various
initializations, and are not affected by the existence of the
stack.

Valid parameters to initialize the PF table in GLOBALV are
'INIT', 'REFRESH', and 'PURGE'.  'INIT' is the standard
method, and will only run when the ring contains a single file
(to prevent unnecessary waste when adding every additional
file to the ring, since the table already exists).  'REFRESH' is
the same as 'INIT', except that no check of the ring size is
done.  'PURGE' can be used to remove the table from
GLOBALV.


EXAMPLE GOLD PFKLIST FILE

*
* First tell gold that '/' represents
* linend character at execution time:

#    /

*
* Now define gold pf keys:
*
*pf   command
*--   ---------------------
PF12   command cursor home
PF13   command macro shpf
PF14   command up 8
PF16   command top
PF17   command macro curloc
PF18   point .@d/curloc.dup/.@d/point .@d off
PF20   command macro center
PF22   command sos lineadd
PF23   command sos linedel
PF24   command macro curwdel

Shimon Lebovitz
VM Systems Programmer
Israel Police National HQ (Israel)

