How to build your own service machine

Service machines under VM are used for several purposes:
spooling (RSCS), timing (VMUTIL), directory maintenance
(DIRMAINT), etc.  The following is a guideline for building your
own server.

INSTALLING THE SERVER MACHINE

The server machine requires:

%	A user-id; we called it SERVER.

%	OPTION ECMODE in its directory entry.

%	A mini-disk, big enough for the EXECs, the SERVER
MODULE and the TIME NAMES file.  One cylinder (3380)
will do.

%	Fill in 4-character codes and EXEC-names you are planning
to use, into the SERVER ASSEMBLE file.

%	Assemble SERVER.

%	LOAD SERVER (CLEAR RLDSAVE ORIGIN 30000.

%	GENMOD SERVER (ALL SYSTEM.

%	Make a PROFILE EXEC, which at least issues the commands
'CP SET RUN ON' and 'SERVER'.  'NUCXLOAD SERVER
(PUSH SYSTEM' will improve operation.

%	Put the NEWTIME, TIMEIN and TIMEOUT EXECs on the
SERVER'S mini-disk.  EXECLOADing these EXECs will
improve performance.

%	Finally, if you are planning to use the timing mechanism,
make the TELLAT EXEC available to all users.

         MACRO
&LBL     DIAG  &R1,&R2,&CODE           * GENERATE DIAGNOSE INSTRUCTION
&LBL     DC    X'83',AL.4(&R1,&R2),Y(&CODE) *
         MEND
         MACRO
&LBL     EXEC  &NAME,&EXECCMD          * CMS EXEC
&LBL     MVC   &EXECCMD+8(8),=CL8'&NAME' * FILL IN EXEC NAME
         LA    R1,&EXECCMD             * ADDRESS OF EXEC COMMAND
         SVC   202                     * EXEC COMMAND TO CMS
         DC    AL4(1)                  * NO ERROR ADDRESS
         MEND
         MACRO
&LBL     EXECEP &NAME,&PARMS,&LENGTH,&EXECCMD * CMS EXEC
&LBL     MVC   &PARMS-8(8),=CL8'&NAME' * FILL IN EXEC NAME
         MVC   &EXECCMD+24(8),=CL8'&NAME' *  FILL IN EXEC NAME
         LA    R4,&PARMS-8             * FILL IN PARAMATER
         ST    R4,&EXECCMD+4           *   ADDRESS INTO EXTENDED PLIST
         AH    R4,=H'&LENGTH'          * FILL IN PARAMETER END
         ST    R4,&EXECCMD+8           *   ADDRESS INTO EXTENDED PLIST
         LA    R1,&EXECCMD+16          * ADDRESS OF EXEC COMMAND
         ICM   R1,8,=X'01'             * FLAG PLIST AVAILABLE
         LA    R0,&EXECCMD             * ADDRESS OF EXTENDED PLIST
         SVC   202                     * EXEC COMMAND TO CMS
         DC    AL4(1)                  * NO ERROR ROUTINE ADDRESS
         MEND
SERVER   CSECT                         * WHAT'S IN A NAME, ANYWAY?
R0       EQU   0                       * REGISTER EQUATES GENERAL
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
C0       EQU   0                       * CONTROL REGISTER 0 IS USED
         BALR  R12,0                   * REGISTER 12 IS BASE REGISTER
         USING *,R12                   * THE ASSEMBLER MUST BE TOLD SO
         STM   R14,R13,0(R13)          * SAVE OLD REGISTERS
         ST    R13,SAVEAREA            * SAVE THEIR ADDRESS
         EXEC  NEWTIME, PARMEXEC       * CHECK PENDING TIME EVENTS
         CL    R15,=F'0'               * RETURNCODE 0 ?
         BNE   TIMEINIT                * NO, RETURNCODE WAS NEWTIME
         SCKC  =8X'FF'                 * ELSE SET CLOCK COMP. INFINITE
AUTHORIZ LA    R4,VMCPPARM             * DIAGNOSE 68 PARAMETER BLCOK
         L     R1,=X'20000000'         * FLAG: AUTHORIZE, ACCEPT SMSG'S
         ST    R1,VMCPPARM             *
         LA    R1,VMCMPARM             * START OF RECEIVE PARM BLOCK
         ST    R1,VMCPPARM+16          *
         L     R1,=X'00000100'         * LENGTH OF RECEIVE PARM BLOCK
         ST    R1,VMCPPARM+20          *
         DIAG  R4,R5,X'0068'           * AUTHORIZE FOR SMSG
         STCTL C0,C0,CNTRL0            * FETCH CONTROL REGISTER 0
         L     R5,CNTRL0               * INTO REGISTER FIVE
         O     R5,=X'00000801'         * FLAG TIMER & SMSG INTERRUPTS
         ST    R5,CNTRL0               * AND PUT THAT IN
         LCTL  C0,C0,CNTRL0            * CONTROL REGISTER 0
         HNDEXT SET,EXTFLIH            * HANDLE EXT ENTERR. OURSELVES
         LPSW  WAITEXT                 * NOW JUST WAIT FOR WHAT COMES
EXTFLIH  L     R12,48(R1)              * THE BASE REGISTER
         LH    R15,98(R1)              * INTERRUPTION CODE (BC MODE!!)
         ST    R15,EXTIC               * SAVE IT FOR LATER USE
         CL    R15,=X'00001004'        * WAS IT THE TIMER ?
         BNE   GETCNTRL                * IF NOT SKIP TIMER RESET
         SCKC  =8X'FF'                 * THEN RESET CLOCK COMPARATOR
GETCNTRL L     R5,CNTRL0               * FETCH OLD CONTROL REGISTER 0
         N     R5,=X'FFFFF7FE'         * RESET SMSG & CLCK FLAGS
         ST    R5,CNTRL0               *   OF CONTROL REGISTER 0
         LCTL  C0,C0,CNTRL0            * STORE CONTROL REGISTER 0
         LA    R15,CONTINUE            * PROGRAM TO CONTINUE THERE
         ST    R15,100(R1)             *   AFTER INTERRUPT HANDLING
         L     R15,=X'00040000'        * OPER. STATE EXT INTRR DISABLED
         ST    R15,96(R1)              * BUILD NEW PSW
         LA    R4,VMCPPARM             * UNAUTHORIZE FOR A WHILE
         LH    R1,=H'1'                *   VIA SUBCODE 0001
         ST    R1,VMCPPARM             * INTO DIAG 68 PARAMETER LIST
         DIAG  R4,R5,X'0068'           * UNAUTHORIZE
         XR    R15,R15                 * TELL INTERR HANDLING READY
         BR    R14                     * RETURN
CONTINUE L     R5,EXTIC                * FETCH INTERRUPTION CODE
         CL    R5,=X'00004001'         * SMSG INTERRUPT ?
         BE    ISSMSG                  *
         CL    R5,=X'00001004'         * TIMER INTERRUPT ?
         BE    TIMEOUT                 *
         LINEDIT TEXTA=EMSG,SUB=(HEX,(R5)) * UNKNOWN INTERRUPT !
         B     THEEND                      *   (FOR CONSOLE PURPOSE)
*                                          *   #CP EXTERNAL = STOP
ISSMSG   L     R5,VMCMUSE+8            * CONTAINS COMMAND CODE
         CL    R5,=C'TIME'             * CODE = 'TIME' ?
         BE    TIMEIN                  * YES, HANDLE NEW TIME EVENT
         CL    R5,=C'CDE1'             * CODE = 'CDE1' ?
         BE    CODE1                   * YES, HANDLE APPROPRIATE EXEC
*        .
*        .  USER ENTRIES TO BE INSERTED THE SAME WAY
*        .
         LH    R15,=H'99'              * OTHERWISE UNKNOWN SMSG !
         B     ERRMESG                 * TELL CALLER
TIMEIN   EXECEP TIMEIN, VMCMUSE,130,PARMEXEP * HANDLE TIME CODE
TIMEINIT STCK  TIMER                   * GET TIME OF DAY CLOCK
         AL    R15,TIMER               * ADD VALUE FROM NEWTIME EXEC
         ST    R15,TIMER               * AND PUT THAT INTO
         SCKC  TIMER                   * CLOCK COMPARATOR
         B     REFILL                  * GO CLEAN UP AND WAIT
CODE1    EXECEP CODE1,VMCMUSE,130,PARMEXEP  * HANDLE CODE 'CDE1'
         B     CHECKRC                 *      GO CHECK RETURNCODE
*        .
*        .  USER ENTRIES TO BE INSERTED THE SAME WAY
*        .
TIMEOUT  EXEC  TIMEOUT,PARMEXEC        * HANDLE TIMEOUT
         CL    R15,=F'0'               * MORE TIME EVENTS ?
         BNE   TIMEINIT                * THEN SET TIMER
         B     REFILL                  * OTHERWISE CLEAN UP AND WAIT
CHECKRC  CL    R15,=F'0'               * RETURNCODE OK??
         BE    REFILL                  * THEN CLEAN UP AND WAIT
ERRMESG  LA    R4,ERRMSG               * ADDRESS OF ERROR MESG
         CVD   R15,RC                  * MAKE RETURNCODE DECIMAL
         UNPK  ERRCODE(10),RC+4(5)     * AND CHARACTER FORMAT
         LA    R5,ERRLEN               * LENGTH OF ERROR MESG
         MVC   ERRUSER(8),VMCMUSE      * TO WHOM IT SHOULD BE SENT
         DIAG  R4,R5,X'0008'           * ISSUE CP COMMAND
         B     REFILL                  * SKIP DATA
ERRMSG   DC    CL8'MSGNOH'             * N.B. CLASS A/B REQUIRED
ERRUSER  DS    CL8                     *
         DC    C' ',C'SERVER',C': ERROR OCCURRED; RC = '
ERRCODE  DS    CL8                     *
ERRLEN   EQU   *-ERRMSG                *
         DS    CL4                     * NEEDED FOR PROPER UNPACKING
         DS    0H                      * ALIGN
REFILL   MVI   VMCMUSE,C' '            * CLEAR BUFFER
         MVC   VMCMUSE+1(129),VMCMUSE  *
         B     AUTHORIZ                * GO WAIT FOR NEXT EVENTS
THEEND   HNDEXT CLR                    * DON'T HANDLE INTRR ANYMORE
EINDE    L     R13,SAVEAREA            * ADDRESS OF OLD REGISTER 13
         LM    R14,R13,0(R13)          * RESTORE OLD REGISTERS
         L     R15,RC                  * SET RETURNCODE
         BR    R14                     * RETURN TO CMS
VMCPPARM DS    0D                      * OUTGOING VMCF PARAMETER BLOCK
         DS    CL40                    * SEE SYSTEM PROGRAMMERS GUIDE
VMCMPARM DS    0D                      * INCOMING VMCF PARAMETER BLOCK
         DC    CL32' '                 * SEE SYSTEM PROGRAMMERS GUIDE
VMCMUSE  DC    CL224' '                * VMCMUSE + BIG BUFFER
PARMEXEP DS    0D                      * EXTENDED PLIST FOR EXEC
         DC    A(*+16)                 * ADDRESS OF EXEC COMMAND
         DS    A(0)                    * ADDRESS OF PARAMETERS
         DS    A(0)                    * LENGTH OF PARAMETERS
         DC    A(0)                    * NOT USED
PARMEXEC DC    CL8'EXEC'               * COMMAND EXEC
         DS    CL8                     * NAME OF EXEC FILLED IN HERE
         DC    8X'FF'                  * END OF PARAMETERS
RC       DC    D'0'                    * STORE & INITIALIZE RETURNCODE
TIMER    DS    1D                      * STORE TOD-CLOCK
WAITEXT  DC    X'0106000000000000'     * WAIT STATE PSE EXT INTRR ENABL
SAVEAREA DS    1F                      * STORE FOR GPR13
CNTRL0   DS    1F                      * STORE FOR CONTROL REGISTER 0
EXTIC    DS    1F                      * STORE FOR EXTERNAL INTRR.
EMSG     DC    X'22'                   * TO BE DISPLAYED ON UNKNOWN INT
         DC    CL34'UNKNOWN INTERRUPTION CODE ........'
         END
NEWTIME EXEC
/*  */
address command
'STATE TIME NAMES A'
if rc ¬= 0 then exit 0
'EXECIO 1 DISKR TIME NAMES A (FINIS'
pull . . atsec .
atsec = strip(atsec)
nusec = time(s)+24*3600*(date(d)-1)
if atsec < nusec then
  if left(date(o).2) // 4 = 0 & date(d) < 60 then
    atsec = 366*24*3600 + atsec
  else atsec = 365*24*3600 + atsec
if atsec-nusec > 364*24*3600 then exit 1
ticker = trunc((atsec-nusec)/1.05)
if ticker = 0 then ticker = 1
exit ticker

TIMEIN EXEC

/*  */
address command
arg user 'TIME' jaar attime mesg
user = strip(user) : jaar = left(jaar,4)
attime = right(attime,12,'0') : mesg = strip(mesg)
say time()': TIMEIN' user jaar attime mesg
'EXECIO 1 DISKW TIME NAMES A ( FINIS STRING 'user jaar attime mesg
if rc ¬= 0 then exit 0
push 'FILE'
push 'SORT * 10 27'
push 'TOP'
'XEDIT TIME NAMES A'
call newtime
exit result

TELLAT EXEC

/*  */
address command
arg attime mesg
nr = (length(attime)+1)/3
attime = '00:'attime
do i = 1 to 4 ; in.i = '00' ; end
do i = 4 to 5-nr by -1
  in.i = right(attime,2)
  if ¬datatype(in.i,'W') then do
    error = 24
    signal error
  end
  attime = left(attime,length(attime)-3)
end
if mesg = '' then do
  error = 28
  signal error
end
mon.01 = 0 ; mon.02 = 31 ;  mon.03 = 59  ; mon.04 = 90 ; mon.05 = 120
mon.06 = 151 ; mon.07 = 181 ; mon.08 = 212 ; mon.09 = 243 ; mon.10 = 273
mon.11 = 304 ; mon.12 = 334
if in.1 = '00' then in.1 = left(date(e),2)
if in.2 = '00' then in.2 = substr(date(o),4,2)
in.1 = in.1 + value('mon.'in.2)
jaar = left(date(s),4)
if ¬(jaar // 4 = 0 & in.2 > 2) then in.1 = in.1 - 1
atsec = 60*in.4 + 3600*in.3 + 24*3600*in.1
nusec = time(s)+24*3600*(date(d)-1)
if atsec < nusec - time(s) then jaar = jaar + 1
'CP SET EMSG OFF'
rc = 57
do until rc ¬= 57
 'CP SM SERVER TIME'JAAR' 'ATSEC' 'MESG
end
'CP SET EMSG ON'
exit
error:
say 'Invalid format: tellat (DD:MM)hh:mm (USER userid) (ALL type)
text...'
exit error

TIMEOUT EXEC

/*  */
address command
authlist = 'USER1 USER2 ... '
'EXECIO 1 DISKR TIME NAMES A (FINIS'
if rc ¬=0 then exit 0
pull user jaar tijd mesg
if work(mesg,1) = 'ALL' then do
  type = word(mesg,2)
  select
    when type = 'YEAR' then jaar = jaar + 1
    when right(type,3) = 'DAY' then do
      numdays = left(type,length(type)-3)
      if numdays = '' then tijd = tijd + 24*3600
      else
        if datatype(numdays,'W') then tijd = tijd + numdays*24*3600
        else tijd = tijd + 7*24*3600
    end
    when right(type,6) = 'MINUTE' then do
      nummin = left(type,length(type)-6)
      if datatype(nummin,'W') then tijd = tijd + nummin*60
      else tijd = tijd + 60
    end
    otherwise signal einde
  end
  if left(date(s),2) // 4 = 0 then
    time_end = 366*24*3600
    else time_end = 365*24*3600
  if tijd > time_end then do
    jaar = jaar + 1
    tijd = tijd - time_end
  end
  'EXECIO 1 DISKW TIME NAMES A (FINIS STRING'
                                       user jaar right(tijd,12,'0') mesg
  push 'FILE'
  push 'SORT * 10 30'
  push 'TOP'
  'XEDIT TIME NAMES A'
  if index(authlist,user) ¬= 0 then
    interpret "'"subword(mesg,3"'"
end
else do
  say time()': TIMEOUT' strip(user mesg)
  if strip(subword(mesg,1,1)) = 'CMD' then
    if index(authlist,user) ¬= 0 then
      interpret "'"subword(mesg,2)"'"
    else nop
  else if strip(subword(mesg,1,1)) = 'USER' then do
    touser = subword(mesg,2,1)
    mesg = subword(mesg,3)
    'CP MSGNOH' touser time()
    'CP MSGNOH' touser ' '
    'CP MSGNOH' touser ' '
    'CP MSGNOH' touser 'MSG FROM 'user': 'mesg
    'CP MSGNOH' touser ' '
    'CP MSGNOH' touser ' '
  end
  else 'CP MSGNOH' user mesg
end
einde:
'LISTFILE TIME NAMES A (ALLOC FIFO'
pull . . . . . lines .
if lines = 1 then do
  'ERASE TIME NAMES A'
  exit 0
end
push 'FFILE'
push 'DELETE'
push ';1'
'XEDIT TIME NAMES A'
call newtime
exit result

R T Heemskerk
Systems Programmer (The Netherlands)	) Xephon 1989

