 Problems using ISPF on VM/CMS - revisited

The article in issue 10 (June 1987) entitled Problems using ISPF on VM/CMS, was,
in some respects, misleading.  While agreeing with the author that some aspects
of ISPF are not adequate, I found that many of his points were either erroneous
or subjective.  I have used ISPF and PDF in both MVS and VM environments for a
number of years and have developed many dialogues using Dialogue Management.  I
intend these comments to be not a criticism of the article but some help in
solving the problems the author of that article is encountering.


FILE TAILORING

I agree that 255-bytes worth of data can at times seem miserly, but File
Tailoring was developed primarily to prepare a 'deck' for batch submission or
execution.  The limitations of software should always be considered prior to
developing an application.

It is not true to say that, "ISPF expects to find its file tailoring skeleton
files on the user's A/191 disks".  If it were, many of ISPF's functions would
not work.  I myself access the ISRSLIB library on a Q disk via the filedef.

     FILEDEF ISRSLIB DISK ISRSLIB MACLIB * (PERM CONCAT

It is true that any 'temporary' file created by ISPF will be placed on the B/W
disk in the user's search order (usually the A/191 ).


DATA ENTRY PANELS

The ATTR section in the panel definition can have the following values:

     &   TYPE(INPUT)   JUST(JUSTVAL)  PAD(PADVAL)

where JUSTVAL can be either LEFT, RIGHT or ASIS and PADVAL can be a NULL or any
other character.

For example:

     &   TYPE(INPUT)   JUST(RIGHT)  PAD('0')

but, as rightly stated, it would not produce a field correctly formatted.  It
would show on the screen, say 0004, but the variable would contain only 4.  This
is caused more by the limitations of the supporting command language than by
ISPF.  However, a simple REXX program (PAD) as set out below can STACK the
correct result for use in the EXEC running the dialogue.  While it is annoying
that ISPF dialogue management does not provide functions like this, it is wrong
to say that the dialogue developer has to "devote significant time" to find
solutions such as outlined.

As for the problem of any undefined variable being the subject of a VER clause,
I have not been able to reproduce it.  Using ISPF 7.1 - Invoke Dialogue
Function/Selection Menu - it is possible to 'PF3' or quit from a panel which has
such a definition.  If the developer has included the &ZCMD variable (it is good
practice to do so) then an '=X' in the command line also provides a get-out.


FILEDEFS AND LIBDEFS

Again I have not encountered the problems with FILEDEFs that the author has, but
I would suggest that his problem is a bug rather than a feature of ISPF and
VM/CMS.  Nor have I found any problems with LIBDEFs being either inelegant or
inefficient.  Perhaps coming from a TSO/MVS environment has helped.  Again, as
with File Tailoring, the original and stated purpose of these facilities must be
kept in mind.


ISPF OVERHEAD

Of course ISPF requires some extra processing, but the amount depends on the
work done.  To some installations the overheads could still be acceptable if the
benefits far outweigh them.  Most of the author's comments are subjective and
provide no comparisons with native VM/CMS functions.  To invoke ISPF to run,
say, CMS REXX programs would be an unacceptable overhead.  Choosing the correct
type of application can reduce overall user response time and can significantly
increase user productivity.


MAINTENANCE AND DEVELOPMENT

Much of this section is not only relevant to ISPF, but to any application of
this nature written in any language.  Any change of file structure must surely
reflect in the screen and program definitions.  Again I must stress the need for
proper analysis of the application required and then the choice of the
appropriate tools.

Over the years I have found that ISPF along with PDF provide an excellent
program development environment together with the supporting utilities for data
manipulation.  Dialogue management can provide the user with adequate data entry
and verification procedures as well as the ability to link processes together.
However, as with any software, its use is limited to the purpose it was
developed for, and stepping outside these areas yields unacceptable results.


PAD

/* Function:  To left or right justify a field to a specific length  */
/*            and fill with the required character.                  */
/* Format  :  PAD field len pad (opt                                 */
/*                                                                   */
/*             where FIELD is the variable to be padded              */
/*                   LEN   is the required length                    */
/*                   PAD   is the pad character. Default space       */
/*                   OPT   is either RIGHT or LEFT. Default LEFT     */
   ARG field len pad '(' opt
/* Check for silly invocations */
   IF len = '' THEN EXIT 12
   l = LENGTH(field)
   IF len < 1 THEN EXIT 12
/* Set defaults if required    */
   IF pad = '' THEN pad = ' '
   IF opt = '' THEN opt = 'LEFT'
/* Ensure pad is only one char */
   IF LENGTH(pad) > 1 THEN pad = SUBSTR(pad,1,1)
   IF opt = 'RIGHT' THEN f = RIGHT(field,len,pad)
   IF opt = 'LEFT'  THEN f =  LEFT(field,len,pad)
/* Stack the answer            */
   PUSH f

Bob Hunt
Systems Programmer
Scottish Development Agency (UK)                          ) Xephon 1987










