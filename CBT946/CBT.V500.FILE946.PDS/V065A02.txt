VM/XA display virtual device I/O counts

As with VM/SP HPO, the only I/O count a person can get with

VM/XA, without writing their own code, is by using the
INDICATE USER command. However, the drawback to using
this is that it is not broken down by virtual device number. This
new version of DDEV (the original version was published in
issue 47 of VM Update) is only applicable to VM/XA SP 2,
although it has been exposed to VM/ESA and appears to run
there too. The VDEV and RDEV blocks are virtually identical.
In addition to DDEV, I have written new pieces of code called
STORGET and STORMAP.

The code issues a CP LOCATE for the desired user-id, then
goes into the VMDBK at offset +'5BC' to get the field named
VMDCHRDN, which allows you to index through the radix
tree by device number instead of subchannel number. After
finding the address in VMDCHRDN, we go to the beginning of
the radix tree associated with the first digit of the address. If
it's non-zero, then that relative entry in the table is valid and
hence the digit is valid. This is similar to the way that HPO
handled it. HPO had an offset value instead of the address
which VM/XA now has. Figure 1 shows an example of what it
looks like: (let's look up address 1005).

This code looks for non-zero addresses in the radix tree to find
which addresses are valid. Since CP maintains this in storage
it's constantly accurate, even if the user LINKs to other devices
that aren't in his/her directory.

Note: the field at offset +x'5C' appears to be the I/O count -
even though the Data Areas manual refers to it as 'RESERVED
FOR IBM USE'. Hopefully, IBM won't change its use.

The bit mappings may be found in the VM/XA CP Data Areas
and Control Blocks manual under the VDEV control block.

If you don't enter a user-id, it looks up your own devices. If
you press the enter key when viewing the screen, the program
will update the device information, as well as showing you the
change in I/O counts (the delta) from the last observation.
Also, by putting your cursor on a specific device and pressing
PF2, you can view the actual VDEV information. You can
interpret this directly by reading the Data Areas manual should
you need more information than is provided.

Bit settings are available for the individual fields by putting
your cursor on the desired field and pressing PF4. There is a
pop-up window to explain what the different bit settings mean
for the particular field that your cursor is on.

The second part of the series is the STORGET and STORMAP
functions. The STORGET routine accepts 3 parameters. The
first parameter is the filename. It will contain the output of a
'DISPLAY HOST' command as a 4096-byte record of
contiguous bytes. You can use this routine for any application
which has a need to view storage as a long string of data. The
output is put into a file called <fname> MAP on your A disk.

The STORMAP routine uses the output from the STORGET
function. It uses the LISTING file which is generated during an
ASSEMBLE. Please note that, since it uses the OUTPUT, the
'PRINT ON,GEN' must be in effect so that all the
'DC'/'DS'/'EQU's and the like are in the LISTING file. The
STORMAP routine will work for any type of mapping that you
would like to use it for. It's pretty well documented in the
STORMAP EXEC file.

STORMAP will take the contents of real storage created by the
STORGET routine, and cross reference actual data with the
field names and comments that are in the LISTING file.

DDEV invokes the STORGET/STORMAP routines to
completely format the VDEV, RDEV, and VMDBK control
blocks. So, if you want to know anything about any of these
control blocks, press the appropriate PF key and you'll get it.

When you select 'SYSTEM' as the user-id in DDEV, you'll be
looking at the RDEV blocks for your real system as well as I/O
counts and the device type (the ones I've put in, anyway - you
can add more). Likewise, if you select a valid user-id other
than 'SYSTEM', you'll get a little bit more information than
with 'SYSTEM' output.

As for installing this on your system, you'll need to re-
assemble your VMDBK, HCPRDEV, and HCPVDEV control
blocks as shown in the STORMAP EXEC. The way I did it
was to GLOBAL all the MACLIBs, and use the HASM
command to get the LISTING file on my A disk. Use whatever
method is appropriate to your shop (especially if you've got
mods). After you've assembled the files as described, you need
to rename the LISTING files to be called DDEV HCPVDEV,
DDEV HCPRDEV, and DDEV HCPVMDBK. That way, the
DDEV routine will be able to locate them. For your own
applications, you can call the LISTING files whatever you
wish.

The format of the command is:

      DDEV <user-id>.

or to get REAL devices:

      DDEV SYSTEM

For STORGET:

      STORGET <mapname> start_addr length   (in hex)

For STORMAP:

      STORMAP mapfn mapft mapft blokfn, blokft blokfm beg_address


DDEV EXEC

/*   Doc: Display virtual devices for a logged on user with
        selected data about the device
   Parms:  <user-id>  or SYSTEM or <blank>.
*/
ARG user .
if user = '' then user = userid();
Queue 'MSGMODE OFF';
Queue 'MACRO DDEV' user
'vmfclear';
'XEDIT $$DDEV$$ $$TEMP$$ A (NOMSG NOPROF'
exit 0


DDEV XEDIT

/*   Doc: Display all virtual devices associated with a virtual
        machine and the related I/O to each - along with a few
        of the status bits.
        This routine also uses STORGET and STORMAP routines.      */
ARG user parm
'EXECIO * CP (STRING Q CPLEVEL'; /* What version are we under?    */
Parse Pull levelid .;
'CMS DESBUF';                    /* trash the reset               */
if levelid = 'VM/ESA' then do;   /* We're under VM/ESA            */
   wincmd  = 'WINDOW DEFINE';
   wincmdd = 'WINDOW DELETE';
   vsccmd  = 'VSCREEN DEFINE';
   vsccmdd = 'VSCREEN DELETE';
end;
else do;
   wincmd  = 'DEFINE WINDOW';
   wincmdd = 'DELETE WINDOW';
   vsccmd  = 'DEFINE VSCREEN';
   vsccmdd = 'DELETE VSCREEN';
end;
if parm = 'REFRESH' then do;
  'EXTRACT /LINE/';                        /* currently here    */
  oldpos = line.1;                         /* remember it       */
  'msgmode off';
  ':1';
  'extract /size'
  do size.1;
     'EXTRACT /curline';                   /* get the original line */
     PARSE var curline.3 fdev ioc 16 . 22 temp4 . ;
     'DEL 1';
     'UP 1';
     CALL checvdev;
     'EXTRACT /curline';                   /* get the updated line   */
     PARSE var curline.3 vad1 9 ioc1 16 .;
     ioc1 = ioc1 - ioc;                    /* i/o since last visit   */
     if ioc1 < 1 then nop;
     else do;
        ioc1 = '+'||left(ioc1,4);          /* trunc it               */
        'CLOC :16';                        /* put cursor at col 16   */
        'CREP' ioc1;                       /* put difference there   */
     end;
     'DOWN 1';                          /* do the next one        */
  end;
  ':'oldpos;                            /* put them where they were */
  exit 0;
end;
if parm = 'BITS' & user Â¬= 'SYSTEM' then do; /* show bits/bytes ... */
  'EXTRACT /CURSOR';               /* Where was my cursor?          */
  if cursor.3 = -1 | cursor.4 = -1 then do;
    'set msgline on +3'
    'msgmode on'
    'EMSG Your cursor was not at a valid location.';
    'msgmode off';
    exit 0;
  end;
  'CMS' vsccmd 'DDEV 10 50 0 0 ( PROTECT ';
  'CMS' wincmd 'DDEV 10 50 8 15 (POP';
  if cursor.6 > 39 & cursor.6 < 43 then do;    /* look at VDEVSTAT */
     Queue 'SET RESERVED 1 H Bit settings for VDEVSTAT:';
     Queue 'SET RESERVED 2';
     Queue 'SET RESERVED  3 N 80 VDEVBUSY Start Function              '
     Queue 'SET RESERVED  4 N 40 VDEVPRCE Channel End Received        '
     Queue 'SET RESERVED  5 N 20 VDEVCLRF Clear Function              '
     Queue 'SET RESERVED  6 N 10 VDEVHLTF Halt Function               '
     Queue 'SET RESERVED  7 N 08 VDEVACTV                             '
     Queue 'SET RESERVED  8 N 04 VDEVSUSP Subchannel Suspended        '
     Queue 'SET RESERVED  9 N 02 VDEVRPND Resume Pending              '
     Queue 'SET RESERVED 10 N 01 VDEVQUED Device Busy - Queued        '
  end;
  Else,
  if cursor.6 > 47 & cursor.6 < 50 then do;    /* look at VDEVWAIT */
   Queue 'SET RESERVED 1 H Bit settings for VDEVWAIT:';
   Queue 'SET RESERVED 2';
   Queue 'SET RESERVED  3 N 80 VDEVIMRS VM Suspend pendng I/O RSP   '
   Queue 'SET RESERVED  4 N 40 VDEVWINT CPU(s) awaiting status (TIOBSY)'
  end;
  Else,
  if cursor.6 > 54 & cursor.6 < 58 then do;    /* look at VDEVAFLG */
     Queue 'SET RESERVED 1 H Bit settings for VDEVAFLG:';
     Queue 'SET RESERVED 2';
     Queue 'SET RESERVED  3 N 80 VDEVINTV Simulated intervention reqd '
     Queue 'SET RESERVED  4 N 40 VDEVTDSK DASD is a TDISK             '
     Queue 'SET RESERVED  5 N 20 VDEVVSIM Device is simulated by VDSBK'
     Queue 'SET RESERVED  6 N 10 VDEVFULL Device is complete volume   '
     Queue 'SET RESERVED  7 N 08 VDEVDED  Device is attached          '
     Queue 'SET RESERVED  8 N 04 VDEVMPLX Multiple exposure device    '
  end;
  Else,
  if cursor.6 > 63 & cursor.6 < 67 then do;    /* look at VDEVDFLG */
     Queue 'SET RESERVED 1 H Bit settings for VDEVDFLG:';
     Queue 'SET RESERVED 2';
     Queue 'SET RESERVED  3 N 80 VDEVRO   Read-only                   '
     Queue 'SET RESERVED  4 N 40 VDEVENAB Comm line - enabled         '
     Queue 'SET RESERVED  5 N 20 VDEVDIAL Comm line - dialled         '
     Queue 'SET RESERVED  6 N 10 VDEVSDIA Comm line - sna dialled     '
     Queue 'SET RESERVED  8 N 04 VDEVRSRL Rsv/Rlse valid ccw''s       '
     Queue 'SET RESERVED  9 N 02 VDEVNSEG No CCW segmentation allowed '
  end;
  Else,
  if cursor.6 > 69 & cursor.6 < 73 then do;    /* look at VDEVPFLG */
     Queue 'SET RESERVED 1 H Bit settings for VDEVPFLG:';
     Queue 'SET RESERVED 2';
     Queue 'SET RESERVED  3 N 80 VDEVCPCL Device closed by CP command '
     Queue 'SET RESERVED  4 N 40 VDEVPURG Device closed/purged by CPcmd'
     Queue 'SET RESERVED  5 N 20 VDEVNRSM Device cannot resume chan pgm'
     Queue 'SET RESERVED  6 N 10 VDEVDPRE Dynamic pathing was requested'
  end;
  if queued() = 0 then do;            /* the cursor was bad */
    'set msgline on +3'
    'msgmode on'
    'EMSG Your cursor wasn''t in a valid column range';
    'refresh';
    'msgline off';
    'msgmode off';
    'CMS' vsccmdd 'DDEV'; 'CMS' wincmdd 'DDEV';
    exit 0;
  end;
  Push  'CMDLINE OFF';
  Push  'PREFIX OFF';
  Push  'SCALE OFF';
  Push  'TOFEOF OFF';
  Push  'MSGMODE OFF';
  Push  'MSGL OFF';
  Address CMS 'XEDIT $$DDEV$$ $$TEMP$$ (NOMSG NOPROF WINDOW DDEV';
  'CMS' vsccmdd 'DDEV'; 'CMS' wincmdd 'DDEV';
  exit 0;
end;
if parm = 'VDEVBLOK' then do;
  'extract /cursor';
  if cursor.3 > 0 then do;
     ':'cursor.3;           /* go to that line   */
     'EXTRACT /curline';                   /* get the original line */
     PARSE var curline.3 vad1 ioc raddr .;
     say center('VDEV Display for user' user,79);
     say ''; say center('Virtual Address='vad1,79);
     say center('Real Storage Address='raddr,79);
     say '';
     if user Â¬= 'SYSTEM' then,
        address command 'CP D HT'raddr'.B4';
     else,
        address command 'CP D HT'raddr'.148';
     exit 0;
  end;
  'set msgmode on'
  'set msgline on +3'
  'EMSG DDEV: Cursor was not at a valid location'
  'cp sleep 3 sec'
  'set msgline off'
  'set msgmode off'
  exit 0
end;
if parm = 'FORMAT'   then do;
  'extract /cursor';
  if cursor.3 > 0 then do;
     ':'cursor.3;           /* go to that line   */
     'EXTRACT /curline';                   /* get the original line */
     PARSE var curline.3 vad1 ioc 15 . 22 raddr . ;
     'CMS EXEC STORGET TEMP' raddr '200';
     if user = 'SYSTEM' then,
       'CMS EXEC STORMAP TEMP MAP A DDEV HCPRDEV A' raddr;
     else,
       'CMS EXEC STORMAP TEMP MAP A DDEV HCPVDEV A' raddr;
     exit 0;
  end;
  'set msgmode on'
  'set msgline on +3'
  'EMSG DDEV: Cursor was not at a valid location'
  'cp sleep 3 sec'
  'set msgline off'
  'set msgmode off'
  exit 0
end;
if parm = 'VMDBK' & user Â¬= 'SYSTEM' then do;
  'EXECIO 1 CP (STRING LOC' user;
  PARSE PULL . . vmblok .;
  'CMS EXEC STORGET TEMP' vmblok '1000';
  'CMS EXEC STORMAP TEMP MAP A DDEV HCPVMDBK A' vmblok;
  exit 0;
end;
else CALL SETUP;          /* Setup the XEDIT parms   */
PROCESS:
/* ---------------- start of offsets in the various blocks -----------*/
vch_off   = 1468;        /* VMDCHRDN offset in the VMDBK x'5BC'   */
/* -----------------end of offsets area ------------------------------*/
if user = 'SYSTEM' then do;
  'EXECIO 1 CP (STRING LOC HCPRIOIX';   /* entry to radix tree */
end;
else 'EXECIO 1 CP (STRING LOC' user
if rc Â¬= 0 then do
   'desbuf';
   'qquit';
   say 'DIO: VMBLOK locate failed with rc='rc
   exit 0;
end
PARSE PULL . . addr_vmblok .;
if user Â¬= 'SYSTEM' then do;
  cmd = 'D H'||d2x(x2d(addr_vmblok)+vch_off)||'.4';
    /*   Let's get VMDCHRDN from the VMDBK now.     */
  PARSE VALUE DIAG(8,cmd) with,
                        .  addr_vchstrt .;
end;
else addr_vchstrt = addr_vmblok;       /* if SYSTEM  */
  Do j = 0 to 15 by 1;
    new_addr = d2x(x2d(addr_vchstrt)+(j*4)); /* addr in radix tree */
    cmd = 'D H'||d2x(x2d(new_addr))||'.4';
    Parse Value DIAG(8,cmd) with,
                        .  temp1 .;
    if temp1 Â¬= '00000000' then do;     /* The range is there */
         digit1 = d2x(j);               /* will be 0-F */
         CALL CHEC2ND;
    end;
  end;
'TOP';
exit 0;
CHEC2ND:
  Do k = 0 to 15 by 1;
    new_addr_2 = d2x(x2d(temp1)+(k*4)); /* address in radix tree */
    cmd = 'D H'||d2x(x2d(new_addr_2))||'.4';
    Parse Value DIAG(8,cmd) with,
                        .  temp2 .;
    if temp2 Â¬= '00000000' then do;     /* The range is there */
         digit2 = d2x(k);               /* will be 0-F */
         CALL CHEC3RD;
    end;
  end;
return;
CHEC3RD:
  Do l = 0 to 15 by 1;
    new_addr_3 = d2x(x2d(temp2)+(l*4)); /* address in radix tree */
    cmd = 'D H'||d2x(x2d(new_addr_3))||'.4';
    Parse Value DIAG(8,cmd) with,
                        .  temp3 .;
    if temp3 Â¬= '00000000' then do;     /* The range is there */
         digit3 = d2x(l);               /* will be 0-F */
         CALL CHEC4TH;
    end;
  end;
return;
CHEC4TH:
  Do m = 0 to 15 by 1;
    new_addr_4 = d2x(x2d(temp3)+(m*4)); /* address in radix tree */
    cmd = 'D H'||d2x(x2d(new_addr_4))||'.4';
    Parse Value DIAG(8,cmd) with,
                        .  temp4 .;
    if temp4 Â¬= '00000000' then do;     /* This is the VDEV address */
         digit4 = d2x(m);               /* will be 0-F */
         fdev = digit1||digit2||digit3||digit4;  /* device # */
         CALL CHECVDEV;
    end;
  end;
return;
/* ------------- Check the virtual device now ----------- */
CHECVDEV:
  if user = 'SYSTEM' then do;          /* for the SYSTEM VMDBK */
    iocount = d2x(x2d(temp4)+x2d('CC'));
    cmd = 'D H'||d2x(x2d(iocount))||'.4';
    Parse Value DIAG(8,cmd) with . bytes .;
    iocount = left(x2d(bytes,6),10);
    cmd = 'D H'||temp4||'.4';
    Parse Value DIAG(8,cmd) with . bytes .;
    vdevtypc = substr(bytes,1,4);
    subchan = '    '; vdevstat = '  '; vdevwait = '  ';
    vdevaflg = '  '; vdevdflg = '  '; vdevpflg = '  ';
  end;
  else do;
    SUBCHAN  =  d2x(x2d(temp4)+x2d('10'));  /* address of subchannel  */
    VDEVSTAT =  d2x(x2d(temp4)+x2d('18'));  /* address of dev status  */
    VDEVWAIT =  d2x(x2d(temp4)+x2d('19'));  /* address of wait code   */
    VDEVAFLG =  d2x(x2d(temp4)+x2d('1A'));  /*address of device flags */
    VDEVDFLG =  d2x(x2d(temp4)+x2d('1C'));  /*address of device flags */
    VDEVPFLG =  d2x(x2d(temp4)+x2d('1F'));  /*address of device flags */
      /*  Note:  the field at x'5C' is documented as 'RESERVED' in the
               CP Control Blocks manual, but will hopefully stay as the
                 I/O count in the future!                             */
    IOCOUNT  =  d2x(x2d(temp4)+x2d('5C'));  /* address of io count    */
    cmd = 'D H'||d2x(x2d(subchan))||'.4';
    Parse Value DIAG(8,cmd) with,
                          .  bytes .;
    subchan = substr(bytes,1,4);
    vdevtypc = substr(bytes,5,4);
    cmd = 'D H'||d2x(x2d(vdevstat))||'.4';
    Parse Value DIAG(8,cmd) with,
                          .  bytes .;
    vdevstat = substr(bytes,1,2);
    vdevwait = substr(bytes,3,2);
    vdevaflg = substr(bytes,5,2);
    cmd = 'D H'||d2x(x2d(vdevdflg))||'.4';
    Parse Value DIAG(8,cmd) with,
                          .  bytes .;
    vdevdflg = substr(bytes,1,2);
    vdevpflg = substr(bytes,7,2);
    cmd = 'D H'||d2x(x2d(iocount))||'.4';
    Parse Value DIAG(8,cmd) with,
                          .  bytes .;
    iocount = x2d(bytes,6);
    iocount = left(iocount,10);
  end;
  if vdevtypc = '2082' then vdevtypc = 'RDR ';
  else if vdevtypc = '2042' then vdevtypc = 'PUN ';
  else if vdevtypc = '2021' then vdevtypc = 'PRT ';
  else if vdevtypc = '0404' then vdevtypc = '3380';
  else if vdevtypc = '0810' then vdevtypc = '3420';
  else if vdevtypc = '0408' then vdevtypc = '3350';
  else if vdevtypc = '4080' then vdevtypc = 'SPEC';
  else if vdevtypc = '4002' then vdevtypc = 'PRNT';
  else if vdevtypc = '0280' then vdevtypc = 'CTCA';
  else if vdevtypc = '8040' then vdevtypc = 'CON ';
  else if vdevtypc = '0840' then vdevtypc = '3480';
  else if vdevtypc = '0420' then vdevtypc = '3270';
  else if vdevtypc = '4040' then vdevtypc = '3278';
  else if vdevtypc = '4009' then vdevtypc = '3279';
  else if vdevtypc = '8080' then vdevtypc = 'LINE';
  else if vdevtypc = '8020' then vdevtypc = 'LINE';
  else if vdevtypc = '0240' then vdevtypc = '37X5';
  else if vdevtypc = '2029' then vdevtypc = '4248';
  else if vdevtypc = '2022' then vdevtypc = '3211';
  else if vdevtypc = '4006' then vdevtypc = 'HFGD';
  'I' fdev '  ' iocount ' ' temp4  subchan '   ' vdevstat '    ',
  vdevwait '   ' vdevaflg '     ' vdevdflg '   ' vdevpflg ' ' vdevtypc;
return;
/* -------------------- Setup the display for viewing ----------- */
SETUP:
'SHADOW OFF'
'MSGMODE OFF'
'CASE M I'
'WRAP ON';
'msgline on +4 overlay';
'set reserved 1 H -----------------------   Virtual Device Display ---',
                                               '-------------User:'user
'set reserved 2 H Virt.     I/O        VDEV     sub-    vdev-   vdev-',
                                            '  vdev-    vdev  vdev  dev'
'set reserved 3 H Addr.    Count       Addr.    chan    stat    wait ',
                                           '  aflg     dflg  pflg  type'
'set reserved -2 H' left('',79,'-')
'set reserved -1 H PF2=VDEV  PF4=BITS  PF5=Format PF6=VMDBK    ,
'PF10=Down  PF11=Up  PF12=Quit'
'cmdline off';
'prefix off';
'scale off';
'curline on +2';
'set tofeof off';
'set enter ignore macro ddev' user 'REFRESH';
'set pf2  MACRO DDEV' user 'VDEVBLOK';
'set pf14 MACRO DDEV' user 'VDEVBLOK';
'set pf4  MACRO DDEV' user 'BITS'
'set pf16 MACRO DDEV' user 'BITS'
'set pf5  MACRO DDEV' user 'FORMAT';
'set pf17 MACRO DDEV' user 'FORMAT';
'set pf6  MACRO DDEV' user 'VMDBK';
'set pf18 MACRO DDEV' user 'VMDBK';
'set pf10 forward';
'set pf11 backward';
'set pf12 qquit';
'set pf22 forward';
'set pf23 backward';
'set pf24 qquit';
return;


STORGET EXEC

/*   Program name: STORGET  EXEC
   Doc: Put real storage into 1 big record in a CMS file.
   Parms:   file_name  Beginning_address  length
        address and length should be in hex.
        address must begin on a word boundary.
        max length = x'1000'.
        length must be in multiples of fullwords.
        the data will be put into the file: file_name MAP A.
*/
Arg fn beg_addr length;
'set cmstype ht';
'erase' fn 'MAP A';
'set cmstype rt';
Push 'MACRO STORGET' beg_addr length;
Address command 'XEDIT' fn 'MAP A (NOPROF NOMSG WIDTH 4096';
exit rc;


STORGET XEDIT

/*   Program name: STORGET  XEDIT
   Doc: Called by STORGET EXEC. Used to create a single line file
        containing real storage beginning at a certain address for
        a certain length.  See STORGET EXEC for more info on parms.
*/
Arg beg_addr length;
'LRECL 4096';
'TRUNC *';
'ZONE 1 *';
'I           ';
do_for = x2d(length) + 4;         /* give em 1 more than they want */
Do j = 1 to do_for by 4;
  PARSE VALUE DIAG(8,'D H'beg_addr'.4') with . data .;
  beg_addr = x2d(beg_addr) + 4;      /* bump to next address */
  beg_addr = d2x(beg_addr);          /* change back to hex   */
  'CLOC :'j*2-1;                     /* put cursor here      */
  'CREP' data;
end;
'FFILE';
exit 0;


STORMAP EXEC

/*   Program name: STORMAP  EXEC
   Doc:  Create a file in storage that uses:
           A MAP file created by STORGET EXEC/XEDIT.
           A LISTING file created by re-assembling the xxxBLOK
              (example HCPRDEV) using the following skeleton ASSEMBLE
              file:
          TEMP     CSECT
                   COPY HCPRDEV SUP   (or whatever block you want).
          DONENOW  DS   0F            (required)
                   END
           After assembling the file with the HASM command, rename it
           to a file with the name of BLOK blockname (DDEV HCPRDEV).
           At this time, you should get the beginning address of what-
           ever storage location you're mapping, and invoke this EXEC
           with the following parms:
     STORMAP <fn of STORGET output> <fn of BLOK file> <real_stor_addr>
         ex.-> ( TEMP MAP A             BLOK HCPRDEV     1100FF0 )
           You will be put into XEDIT at that time with each field
           mapped to its assembler name(s).

*/
Arg fn1 ft1 fm1 fn2 ft2 fm2 addr;
if addr = '' then do;
   say 'STORMAP:  You must enter full filenames/filetypes/filemodes';
   exit 4;
end;
Push 'MACRO STORMAP' fn1 ft1 fm1 fn2 ft2 fm2 addr;
Address command 'XEDIT STORMAP $$TEMP$$ A (WIDTH 255 NOPROF NOMSG';
exit 0;


STORMAP XEDIT

/*   Program name: STORMAP  XEDIT
   Doc: Map the storage against the control block specified.
        This routine is called by STORMAP EXEC.
        Please see STORMAP EXEC for documentation on its function.
         fn1/ft1/fm1 = MAP file created by STORGET.
         fn2/ft2/fm2 = BLOK file created as described in STORMAP EXEC.
*/
Arg fn1 ft1 fm1 fn2 ft2 fm2 addr;
'LRECL 255';                           /* make it looooonggg   */
'TRUNC *';                             /* let us do long lines */
'ZONE 1 *';                            /* let us do long lines */
'EXTRACT /FNAME/FTYPE/FMODE';
tempfile = fname.1 ftype.1 fmode.1;
mapfile  = fn1 ft1 fm1;
blokfile = fn2 ft2 fm2;
'XEDIT' mapfile     '(WIDTH 4096 NOPROF';         /* MAP file */
'TRUNC *';
'ZONE 1 *';
'XEDIT' blokfile    '(NOPROF';         /* BLOK file */
Call INIT_BLOK;                        /* Setup array with BLOK names */
'XEDIT' blokfile; 'QQUIT';             /* done with it now.      */
Call Main;                             /* go correlate the maps  */
'XEDIT' mapfile;  'QQUIT';             /* done with this one, too */
hdr1 = ' NAME  REALADDR  OFFSET            Comments';
'set reserved 1 h' hdr1;
'set reserved -1 h PF3=Quit    PF7=Backward   PF8=Forward';
'set pf3 qquit';
'set pf15 qquit';
'cmdline top';
'curline on +5';
'scale on +4';
'prefix off';
'v 1 80';
'MSGMODE ON';
'MSGLINE ON 3';
'TOP';
exit 0;
/* ----------------------- Main routine -------------------------- */
MAIN:
  'XEDIT' mapfile;                /* core dump file */
  ':1';                           /* only 1 line in the file!     */
  'EXTRACT /CURLINE/';            /* get the line                 */
  'XEDIT' tempfile;               /* now, create our own file     */
  do j = 1 to flds.0;             /* process each field we found  */
    if len.j = 0 then do;         /* it   was an EQU...           */
      'I' left(name.j,8) '--------' '------' comment.j;
    end;
    else do;                                  /* it  was a DS/DC  */
      startc = x2d(offset.j) * 2 + 1;  /* start col in dump file  */
      curaddr = x2d(addr) + startc - 1 /* real-stor addr of data  */
      curaddr = d2x(curaddr,8);            /* change back to hex  */
      data   = substr(curline.3,startc,len.j);    /* actual data  */
      line = left(name.j,8) curaddr offset.j comment.j;
      'I' line;                   /* Put it in the file now       */
      if len.j > 70 then do;      /* it's long data               */
        templen = trunc(len.j / 70) + 1; /* takes this # of lines */
        st_col = 1;
        Do k = 1 to templen;
          data_temp = ' DATA  ' substr(data,st_col,70);
          'I' data_temp;
          st_col = st_col + 70;
        end;
      end;
      else 'I DATA  ' data;
    end;
    'I' left('',79,'_');
  end;
return;
/* ----------- INIT_BLOK -----------------------------------------*/
INIT_BLOK:
  ':1';                                /* go to top now */
  flds.0 = 0;                          /* for now...    */
  len_max = 0;                         /* max field length so far */
  'ZONE 51 55';                        /* Let's get started FAST! */
  'LOC /DSECT/';                       /* find the DSECT now      */
  if rc Â¬= 0 then do;                  /*   Uh oh!                */
     Say 'STORMAP:  Oops. Didn''t find DSECT in cols 51-55!';
     'CANCEL';
     exit 0;
  end;
  'ZONE 1 *';
  i = 0;                               /* array index            */
  Do forever;
    'EXTRACT /CURLINE/';               /* let's see it           */
    if substr(curline.3,51,3) = 'DS ' |,
       substr(curline.3,51,3) = 'DC '       then do;
      i = i + 1;
      name.i = substr(curline.3,42,8);    /* field name          */
      offset.i = substr(curline.3,2,6)    /* address of this field */
      comment.i = substr(curline.3,66,38) /* comments on field   */
      len_long = substr(curline.3,57,9)   /* This is like XL5'0'  */
      fld_len = findlen(len_long);        /* Figure it out...     */
      len.i = fld_len * 2;                /* Comes from FINDLEN:  */
                            /* above, multiply by 2 cuz of 2 byte hex */
      if len.i > len_max then,
          len_max = len.i;                /* max length we've seen */
      if name.i = 'DONENOW' then do;      /* we've reached our end */
        flds.0 = i - 1;                   /* don't include DONENOW */
        leave;
      end;
    end;
    else if substr(curline.3,51,3) = 'EQU' then do;  /* an EQUATE */
      i = i + 1;
      len_long = substr(curline.3,57,9)   /* This is like XL5'0'  */
      len_long = strip(len_long,B);
      name.i = substr(curline.3,42,8);    /* equate name         */
      comment.i = len_long substr(curline.3,66,38); /* comments */
      offset.i = '------';                /* n/a for EQU         */
      len.i = 0;                          /* not really a field   */
    end;
    'DOWN 1';                             /* get next record     */
    if rc Â¬= 0 then do;                   /* Error! This shouldn't */
      say 'Premature EOF on BLOCK file';  /*  happen to us!        */
      'CANCEL';                           /* Get rid of everything */
      exit 4;
    end;
  end;
return;
/* ---------- Figure out what the DS/DC length modifier means -------*/
FINDLEN:    procedure
  Arg fld_long;
  fld_long = strip(fld_long,B);        /* rid it of lead/trail blanks */
  if fld_long = 'FL4S12' then return 4;  /* special case!! VMDBK only */
  if fld_long = 'FL8S12' then return 8;  /* special case!! VMDBK only */
  if fld_long = '0FL4S12' then return 4; /* special case!! VMDBK only */
  if fld_long = '0FL8S12' then return 8; /* special case!! VMDBK only */
  next = 1;                            /* next character to look at   */
  if datatype(substr(fld_long,1,1)) = 'NUM' then do;  /* len modifier */
    next = 2;                          /* next character to look at   */
    mult = substr(fld_long,1,1);       /* multiply by this...         */
    if mult = '0' then mult = '1';     /* if it's a 0F or something   */
    if datatype(substr(fld_long,2,1)) = 'NUM' then do;
      next = 3;                        /* next character to look at   */
      mult = substr(fld_long,1,2);     /* if 2 character multiplier   */
      if datatype(substr(fld_long,3,1)) = 'NUM' then do; /* 3 digits  */
        next = 4;                      /* next character to look at   */
        mult = substr(fld_long,1,3);              /* it was 3 digits  */
              /* we'll handle up to 3 leading digits...               */
      end;
    end;
  end;
  else mult = 1;                       /* no leading number...        */
  type = substr(fld_long,next,1);      /* Type: F,A,X,C,H  ???        */
  next = next + 1;                     /* bump to next character      */
  if type = 'F' then len = 4;          /* Type 'F' = 4 bytes each     */
  else if type = 'A' then len = 4;     /* Type 'A' = 4 bytes each     */
  else if type = 'X' then len = 1;     /* Type 'X' = 1 byte each      */
  else if type = 'C' then len = 1;     /* Type 'C' = 1 byte each      */
  else if type = 'H' then len = 2;     /* Type 'H' = 2 bytes each     */
  else if type = 'D' then len = 8;     /* Type 'D' = 8 bytes each     */
  else do;                             /* What type is it????         */
    say 'Found this length modifier:' type '/' fld_long;
    say 'How long is this type of field? Enter the number. DFLT=1';
    Parse External Pull len;
    if len = '' then len = 1;
  end;
  if substr(fld_long,next,1) = 'L' then do; /* It's like xLx type     */
    next = next + 1;                   /* so, let's get that length   */
    lmod = substr(fld_long,next);      /* Get the rest of it...       */
    Parse Value lmod with lmod '''' .; /* get up to CL5' ' type       */
  end;
  else lmod = 1;                       /* otherwise, no length mod    */
return mult * len * lmod;              /* this will be total length   */

Pat Tierce
Systems Software Specialist (USA)

