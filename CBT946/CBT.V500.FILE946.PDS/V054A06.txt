Displaying the XEDIT retrieve buffer

The CP 'retrieve' function allows a PF key to recall previously
entered commands, both forward and backward (since the
terminal enhancement APAR VM30316).  Since XEDIT does
not have a 'retrieve forward' capability, one often misses the
desired command by pressing the retrieve key too fast, and
then must go through the whole buffer again.  It is also
generally inconvenient to have to press the PF key many times.

To solve this problem, I added the EXTRACT /CMDBUF/
option to the many functions already performed by the
EXTRACT subcommand.  With the help of the RTR XEDIT
macro, to process the command buffer contents, a user can see
a 'window' containing the last 21 commands, and choose
whichever is needed.

Even though the macro utilizes CMS windowing commands, it
does not require FULLSCREEN ON (we do not use CMS
fullscreen mode in our installation).

The modification to XEDIT is in module DMSXTR (extract),
and causes the command EXTRACT /CMDBUF/ to create two
REXX variables: CMDBUF.0 (which is always equal to 1),
and CMDBUF.1 (which contains the entire command buffer of
256 bytes).

The internal format of the buffer is a 1-byte length, followed
by a command string, followed by the next 1-byte length, etc.
The uninitialized buffer is set to binary zeros, so a length field
of 0 signifies the end of the buffer area in use.

As new commands are added to the buffer, the overflow
characters are simply truncated.  This can cause an old
command length to remain, even when part of the command
has been lost.  As a result, it is necessary when parsing the
command buffer to ignore commands whose length is greater

than the remaining bytes in the buffer.

File DMSXTR POLXTRBF contains the mod.  In order to add
it to DMSXTR the following record must be added to the top
of DMSXTR AUXSP (or your local aux file):

POLXTRBF LCL ADD 'EXTRACT /CMDBUF/' OPTION


DMSXTR POLXTRBF

./ I 01730000          $ 1735000 5000                 08/23/90 17:59:52
*         CMDBUF                                           *   %PLXTRBF
./ I 05150000          $ 5150600 600                  08/23/90 17:59:52
*                                                              %PLXTRBF
* CMDBUF                                                       %PLXTRBF
*                                                              %PLXTRBF
* COMMAND FORMAT : EXTRACT /CMDBUF/                            %PLXTRBF
*                                                              %PLXTRBF
* RETURNS : CMDBUF.1  - INPUT RING BUFFER (TERMINAL INPUTS)    %PLXTRBF
*                                                              %PLXTRBF
VARCMDBF DS    0H                                              %PLXTRBF
         EDCALL DMSXTEFP               PARSE REST OF OPERAND   %PLXTRBF
         BNZ   OPRNDERR                ARGS NOT ALLOWED HERE   %PLXTRBF
         LA    R0,MAXBUFLG             = BUFFER LENGTH         %PLXTRBF
         LA    R1,ZDEQMBUF             = BUFFER ADDRESS        %PLXTRBF
         B     SETEXCM1                GO SET UP VARIABLE      %PLXTRBF
         EJECT                                                 %PLXTRBF
./ I 17400000          $ 17403000 3000                08/23/90 17:59:52
         DC    X'05,CL13'CMDBUF.1      ',AL2(VARCMDBF-EXTRACT) %PLXTRBF
         DC    AL1(VARPROG),AL1(0),AL2(8)                      %PLXTRBF

The RTR macro can be assigned to a PF key, so that it will be
called without adding data to the current command buffer.  One
method we have used is to assign RTR macro to one of the PF
keys.  The macro 'pops' up a window containing the previous
commands.

When the ENTER key is pressed, the window will disappear
from the screen, and the chosen command will be in the
command line, where it can be modified if necessary, before
pressing ENTER again.


RTR XEDIT

/* REXX */
TRACE N /* REXX */
IF       QUEUED() > 0               /* STACK MUST BE EMPTY FOR 'READ' */
    THEN DO
         'CP M * RTR: PROGRAM STACK IS NOT EMPTY'
         EXIT 8
         END
IF       ARG(1) = ''
    THEN CALL MACRO                   /* GET AND PARSE CURRENT CMDBUF */
    ELSE CALL PROFILE                 /* DISPLAY BUFFER IN WINDOW     */
EXIT
MACRO:
'REFRESH'                             /* CLEAN UP SCREEN              */
'EXTRACT /CMDBUF/'                    /* BUFFER OF OLD COMMANDS       */
CMDLIST = CMDBUF.1
PARSE VAR CMDLIST LL +1 CMDLIST       /* EACH CMD HAS 1BYTE LENGTH    */
LL = C2D(LL)                          /* GET LENGTH IN DECIMAL        */
CI = 1                                /* CMD COUNTER                  */
CMDTAB = ''                           /*LIST CMDS, PREVENT DUPLICATES */
DO  WHILE LL ¬= 0 & LL <= LENGTH(CMDLIST)    /* IGNORE TRUNCATED CMDS */
    CMD.CI = LEFT(CMDLIST, LL)        /* PEEL OFF 1 COMMAND           */
    CMDLIST = SUBSTR(CMDLIST, LL+1)   /*REMOVE IT FROM OLD BUFFER LIST*/
    PARSE VAR CMDLIST LL +1 CMDLIST   /*    PREPARE NEXT LENGTH FIELD */
    LL = C2D(LL)
    IF        INDEX(CMDTAB, '<' CMD.CI '>') = 0,     /* N0T DONE CMD? */
         &    CMD.CI ¬= ''             /* ITS NOT JUST BLANKS?        */
         THEN DO
              CMDTAB = CMDTAB '<' CMD.CI '>'         /* SAVE  IN LIST */
              ADDRESS COMMAND 'GLOBALV SELECT RTR PUT CMD. 'CI
                                                        /* FOR DISPLAY*/
              CI = CI + 1                          /* ADVANCE COUNTER */
              END
END
CMD.0 = CI - 1                       /* SAVE NUMBER OF PROCESSED CMDS */
SZ = MAX(MIN(CMD.0 + 3, 24), 5)            /* MINIMUM VSCREEN 5 LINES */
ADDRESS COMMAND 'GLOBALV SELECT RTR PUT CMD.0'
ADDRESS COMMAND 'DELETE VSCREEN RTR'
ADDRESS COMMAND 'DEFINE VSCREEN RTR' SZ '20 0 0'
                                            /* VSCREEN 20 COLUMNS WIDE*/
ADDRESS COMMAND 'DELETE WINDOW RTR'
ADDRESS COMMAND 'DEFINE WINDOW RTR' SZ '21 1 60'  /*WINDOW FOR VSCREEN*/
ADDRESS COMMAND 'XEDIT $R$T$R$ $R$T$R$ (WINDOW RTR PROFILE RTR'
                                                           /* DISPLAY */
IF       QUEUED() ¬= 0                 /* XEDIT LEFT COMMAND IN STACK */
    THEN DO
    PARSE PULL REQ                    /* PULL COMMAND FROM STACK */
    'CMSG' REQ                     /* REDISPLAY FOR USER MODIFICATION */
    END
RETURN
PROFILE:                     /* DISPLAY ROUTINE FOR BUFFERED COMMANDS */
ADDRESS COMMAND 'GLOBALV SELECT RTR GET CMD.0' /*GET COUNT OF COMMANDS*/
'COMMAND SET MSGLINE OFF'             /* SET                          */
'COMMAND SET CMDLINE OFF'             /*     OFF                      */
'COMMAND SET TABLINE OFF'             /*        ASSORTED              */
'COMMAND SET PREFIX  OFF'             /*              XEDIT           */
'COMMAND SET LINEND  OFF'             /*                  SETTINGS    */
'COMMAND SET ENTER ONLY @'   /* KEY NEEDS DEFINED VALUE TO BE STACKED */
'COMMAND SET CTLCHAR' 'FA'X 'ESCAPE'            /* SET CTL CHARACTERS */
'COMMAND SET CTLCHAR' 'FB'X 'NOPROTECT   NOHIGH'  /* FOR CMD          */
'COMMAND SET CTLCHAR' 'FC'X '  PROTECT   NOHIGH'  /*     DISPLAY      */
'COMMAND SET RESERVED 1 HIGH * LAST COMMANDS *' /* SETUP HEADER LINES */
'COMMAND SET RESERVED 2 HIGH SET CURSOR + ENTER'  /*    FOR COMMAND   */
'COMMAND SET RESERVED 3 HIGH  ANY PF/PA TO EXIT'  /*    WINDOW        */
DO  CI = 1 TO CMD.0 WHILE CI < 25             /* RETRIEVE COMMANDS AND*/
    ADDRESS COMMAND 'GLOBALV SELECT RTR GET CMD.'CI  /*BUILD RESERVED */
    'COMMAND SET RESERVED' (CI + 3) NOHIGH 'FAFB'X || CMD.CI  /*LINES */
    END
IF       CI = 2                               /* MINIMUM DISPLAY IS 5 */
    THEN 'COMMAND SET RESERVED 5 NOHIGH' 'FAFC40'X /*PROTECT LAST LINE*/
'COMMAND CURSOR SCREEN 4 2'                       /* CURSOR ON 1ST    */
'READ NOCHANGE TAG'                /* WAIT FOR USER INPUT FROM SCREEN */
PULL KEYTYPE .                        /* WHAT KEY WAS PRESSED? */
'DESBUF'                              /* CLEAR 'READ' RESULTS */
IF       KEYTYPE = 'ETK'              /* IF NOT 'ENTER', IGNORE */
    THEN DO
         'EXTRACT /CURSOR'            /* WHERE WAS CURSOR? */
         II = CURSOR.5 - 3            /* SCREEN LINE 4 IS 1ST CMD */
         IF        II >= 1 & II <= CMD.0
                                    /* CURSOR WAS REALLY IN CMD LIST? */
              THEN PUSH CMD.II       /* LEAVE IN STACK FOR MAIN MACRO */
         END
'COMMAND QUIT'                        /* EXIT DUMMY FILE */
RETURN

Shimon Lebowitz
VM Systems Programmer
Israel Police National HQ (Israel)                         c Israel Police 1991

