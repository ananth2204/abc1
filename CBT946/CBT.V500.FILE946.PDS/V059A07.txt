Mini-disk cacheing statistics

VM/XA SP Release 2 introduced a new exploitation of
Expanded Storage, ie mini-disk cacheing.  This offers a
considerable improvement in CMS response time, although it
only works for 4K blocked CMS mini-disks.

Performance measurement tools like VMPRF or RTM/SF show
mini-disk cacheing utilization statistics on Expanded Storage-
basis rather than mini-disk-basis, making it impossible to
evaluate the impact of cacheing on the single user and/or single
mini-disk.

The following EXEC reads the data in the Virtual Device
Block of the active and used mini-disks, and writes them,
sorted by user-id, to a CMS file.

These statistics may be useful, for example, to check if mini-
disk cacheing is working, which mini-disks are using it, and
the read hit percentage for every one.

This EXEC could run hourly, in order to have more detailed
statistics at the end of the day.


MDC EXEC

/**  MINI-DISK CACHEING STATISTICS                                   **
*    COMMAND SYNTAX : MDC  rdev|ALL      (DEFAULT=ALL)               *
*                                                                    *
*    ALL  : WRITE A FILE NAMED "MDC ALL A" CONTAINING THE CACHEING   *
*           STATISTICS ON ACTIVE MINI-DISKS ALLOCATED ON CP SYSTEM   *
*           AND CP OWNED DEVICES                                     *
*                                                                    *
*    rdev : WRITE A FILE NAMED "MDC rdev A" CONTAINING THE CACHEING  *
*           STATISTICS ON ACTIVE MINI-DISK ALLOCATED ON rdev         *
*                                                                    *
*    *** CP CLASS B IS REQUIRED FOR "QUERY SYSTEM" COMMAND USED ***  *
*    *** BY THIS EXEC.                                          ***  *
*        VIRTUAL DEVICE BLOCK FIELDS DESCRIPTION                     *
* NOTE : THIS BLOCK IS ACTIVE ONLY WHEN THE VIRTUAL MACHINE          *
*        USING IT IS ACTIVE.                                         *
* X'5A'            VDEVIOCT                                          *
*                                                                    *
* X'A8'            VDEVIOCA                                          *
*                                                                    *
* VDEVIOCT        COUNT OF VIRTUAL I/O REQUESTS ISSUED               *
*                 TO THE VIRTUAL DEVICE.                             *
* VDEVIOCA        COUNT OF ACTUAL I/O OPERATIONS INITIATED           *
*                 BY CP FOR THIS VIRTUAL DEVICE.                     *
*     NOTE: THIS VALUE MAY BE LOWER THAN THE NUMBER OF VIRTUAL I/O   *
*           REQUESTS IF DATA CAN BE OBTAINED THRU MINI-DISK          *
*           CACHEING: OR IT MAY BE HIGHER, IF A VIRTUAL I/O REQUEST  *
*           IS BROKEN UP BY CP INTO MORE THAN ONE ACTUAL I/O         *
*           REQUEST (EG A DIAGNOSE X'A4' REQUEST FOR BLOCKS          *
*           ON MULTIPLE CYLINDERS).                                  *
* *******************************************************************/
trace
address command
parse upper arg dasd
if dasd = "" then dasd = "ALL"
'SET CMSTYPE HT'
'ERASE SORTED ' dasd ' A'
'ERASE MDC ' dasd ' A'
'SET CMSTYPE RT'
'EXECIO * CP (STEM RIGA. BUFFER 100000 STRING QUERY SYSTEM' dasd
if rc ¬= 0 then exit rc
EXIO = 'EXECIO * CP (STRING D H'
header = " USERID    MDISK   ACCESS  VOLUME  VIRT.I/O   CP I/O     %HIT"
'EXECIO 1 DISKW MDC ' DASD ' A 0 F 72 (STR ' header
i = 1
do forever while i < riga.0
  nmd = word(riga.i,5)
  if word(riga.i,1)="DASD"  &  nmd<>0  &  datatype(nmd)='NUM'
  then do
    vol = word(riga.i,6)
    do trunc(nmd/3+1)
      i = i + 1
      parse var riga.i us1 md1 ac1 . us2 md2 ac2 . us3 md4 ac3
      if us1 ¬= ""
      then do
        call readvdev us1 md1 ac1 vol
      end
      if us2 ¬= ""
      then do
        call readvdev us2 md2 ac2 vol
      end
      if us3 ¬= ""
      then do
        call readvdev us3 md3 ac3 vol
      end
    end  /* DO TRUNC.. */
  end  /* DO         */
  else i = i + 1
end  /* DO FOREVER */
'SET CMSTYPE HT'
'FINIS MDC ' dasd ' A'
push 1 8                 /* sort by userid */
'SORT MDC ' dasd ' A SORTED ' dasd ' A'
'ERASE MDC ' dasd ' A'
'REN SORTED ' dasd ' A MDC ' dasd ' A'
'SET CMSTYPE RT'
say 'MDISK CACHEING STATS FOR 'DASD' DASD WRITTEN TO FILE MDC 'DASD' A'
exit
readvdev:
parse arg us md ac rd
'EXECIO * CP (STRING CP LOC ' us md
if rc = 0
then do
  pull . .
  pull . add .
  vdev = strip(add)
  EXIO||d2x(x2d(vdev)+x2d('A8'))       /* VDEVIOCA */
  pull . add .
  ioca = right(x2d(strip(add)),8)
  EXIO||d2x(x2d(vdev)+x2d('5C'))       /* VDEVIOCT */
  pull . add .
  ioct = right(x2d(strip(add)),8)
  if ioca ¬= 0 | ioct ¬= 0
  then do
    us = left(us,10)            /* USERID */
    md = center(md,7)           /* MINIDISK ADDRESS */
    ac = center(ac,7)           /* ACCESS MODE */
    rd = center(rd,7)           /* REAL DEVICE ADDRESS */
    hit = right(trunc((ioct-ioca)/ioct*100),8) /* READ HIT % */
'EXECIO 1 DISKW MDC ' dasd ' A O F 72 (STR ' us md ac rd ioct ioca hit
  end
end
return

Ferrero Regis Maurizio
System Engineer (Italy)

