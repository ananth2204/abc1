Compilations in CMS

Many companies are replacing their CICS-based programming
systems with CMS, ROSCOE, etc, bringing some relief to on-
line production, but they are still being confronted with general
contention problems.

Faced with partition and CPU-time shortages, a first alternative
would be the proliferation of VSE machines, bringing new
problems like disk and channel contention and more VSE
administration difficulties.  You might decide to convert to
VSE/SP or MVS.  If your company is in this situation, an
economic choice may be compilations executed in CMS, with
only their subsequent linkage runs directed to batch.  Such a
system, designed for VSE, will run with adaptations in a
VM/MVS environment as well.

As can be seen in Figure 1, the result will be quite satisfactory,
both for VSE as well as for MVS.  Note that the throughput
obtained by simultaneous CMS compilations is much higher
than in a one-at-a-time situation.  This brings further gains in
the case of mass recompilations, as is often the case after
alterations to record formats, subroutines, and BMS map
definitions.  In an installation with 120 compilations per day,
these gains are substantial.  Using a CICS program of average
size and 120 compilations per day as a basis, you can calculate
that these compilations in VSE batch would require more than
seven partition hours per day.  Limiting partition use to only
linkage runs reduces this time to only 20 minutes!

With this procedure, you can limit your linkage partitions to
only one and use that partition for short-duration tests, as well
as increase your programmers' productivity!  The VSE machine
used for tests can have one partition 'reserved' for linkages (via
'POWER' job classes, for example).  This eliminates
completely the need for an entire VSE machine for
compilations only, which many installations have.

Note: all tests were made in a relatively empty CMS
environment, using the same COBOL program with 656 source
statements for VSE and 627 for MVS, including 'EXEC CICS',
and using the same pre-translators and compilers in both batch
and CMS environments.  These times were clocked from the
moment the compilation request left the programmer's PUN
until the last listing returned to the RDR.

A single CMS compilation with batch linkage is done in less
time than the complete process in VSE.  COBOL compilation
in CMS proved itself much more rapid.  Any other gains
reached by traditional means, such as putting source libraries
(not needed by normal test jobs) on disks not accessed by
active VSE machines, or accessing relocatable libraries only by
the VSE machine reserved for linkage runs, would be minimal
in comparison.  MVS users may also observe a reduction in
data flow between VM and MVS environments, whether done
by CTCAs or RSCS.

Since its initial conception, my CMS compilation system has
undergone considerable change, now supporting six
combinations of COBOL programs (batch/on-line, with/without
command level/HLPI DL/I), as well as COBOL subroutines, in
addition to EASYTRIEVE/PLUS, DBDs, PSBs, and BMS
mapsets for CICS.  Though not 'compiled', COBOL copy
books also pass through the system, giving me a total of 12
different processes.  (I put copy books in the system in order to
register the date, time and authorship of such changes.)

One major reason for compiling in CMS is obviously the
reduction in CPU-time and the simplification of the VSE
structure.  But looking more closely, you'll find a host of other
important reasons, such as increasing your programming staff's
productivity, eliminating the coding of compilation JCL,
standardizing your compilations, etc.  Once your system is
operational, you can add other features, such as a customized
data dictionary that is automatically updated after each error-
free compilation!


SOURCE ADMINISTRATION

Source-level validation and security routines limit access to
and/or compilations of 'confidential' programs to certain
programmer groups, check that internal programming standards
are being observed, and do name validation, store the compiled
sources on commonly accessed CMS mini-disks, and a host of
other housekeeping chores.


LIBRARY ADMINISTRATION

Because of the blockage of submission of other jobs executing
library management utilities, compilers and linkers, it's
possible to guarantee the libraries' integrity against accidental
deletions etc, as well as automatically updating all compilation
records.  This, in turn, makes it possible to execute library
validation routines, which point out any lost production sources
and other such abnormal situations, giving you time to correct
these situations before they turn themselves into more serious
problems.  This subsystem includes an EXEC, used by
programmers to check at a glance in which libraries a certain
program is present, offering a complete deletion routine that
scratches programs in all of the libraries.  This EXEC
interfaces with batch execution records (JARS) and with a
home-made CICS execution history file, making it possible to
know immediately when a program was last used as well as its
execution frequency.


CROSS REFERENCES

To ease a migration from VSE to MVS, I added a fourth
subsystem; source level cross references.  Data obtained by an
automatic analysis of production jobstreams was crossed with
data already available in the CMS system and the results were
some helpful reports, which list all copy books, subroutines,
BMS mapsets, DL/I PSBs, and disk files used by each batch
and CICS program, as well as the production streams which
execute each batch program.  The same kind of treatment is
given to EASYTRIEVE/PLUS programs, DBDs, PSBs, BMS
mapsets, COBOL copy books, subroutines, jobstreams, DL/I
data banks, VSAM files, and application system acronyms
(projects).  After being processed in CMS, this data is stored in
a KSDS file and read by EASYTRIEVE/PLUS programs.  The
resulting cross reference lists are usable for conversion as well
as day-to-day programming.


DATA DICTIONARY

Following each successful compilation, a copy of the source is
sent to a different wake-up machine, which in turn extracts the
principal resources used by the source and refreshes this data in
a CMS master file.  This file in turn is read by other EXECs
called up by programmers and analysts, furnishing them with
recent and complete cross-references in both 'explosion' and
'implosion' styles.


CMS SUPPORT FOR MIGRATION FROM VSE TO MVS

To put some order into conversions, I added some EXECs
which have only to register the date and time of the conversion
as well as the name of the CMS machine which requested the
conversion.  This data serves to block DOS compilations once
the source code is put into MVS format.  Unfortunately, not all
converter packages work 100% the way we want, and I was
fortunate indeed to have included conversion controls in CMS
because numerous errors were avoided by 'emergency' EXECs
designed to do 'pre-conversion' and 'post-conversion'.

Though I have no adequate means of comparison, these EXECs
certainly diminished the effort substantially and contributed to
the rapid and successful conversion of the programs.  To do
this work, I developed a system composed of one wake-up
machine for general system control, pre-conversion and post-
conversion, as well as nine wake-up machines for the
compilations.  The source conversion itself is done in a VSE
machine, the compilations in nine CMS machines, and the
linkage runs done in only one MVS address space.


SYSTEM MONITORING AND PARAMETER MAINTENANCE

After a trial run you might want to enhance the system with
some EXECs designed to monitor the performance of the
compiler machines, permit controlled AUTOLOG and FORCE
functions, and permit some non-standard compilations, etc.  In
my last version I included the 'library manager' concept and
certain machines are permitted to change dynamically some
system parameters such as library names, compiler options, use
of debuggers and so forth.  Though not essential, such routines
will certainly ease changes and make the system more flexible.


GETTING STARTED

Unfortunately, the volume of CMS code necessary to do all of
this work cannot easily be published.  Furthermore, a large part
of it would have to be altered to suit your company's needs.
For these reasons, I'm not publishing all of the code.
Nevertheless, I've attempted to supply enough working code
for you to install some basic CMS compilations at your
company.  After testing this code, you'll find yourself in a
better position to evaluate its applicability at your installation.
According to your needs, this code can be easily adapted and
expanded with your own routines.

Create your 'COMPILER' machine as shown by the sample VM
directory entry and code the EXECs.  The information with
each EXEC shows you the name of the machine that uses it as
well as the respective operating system which it serves (VSE
and/or MVS).


SOFTWARE REQUIREMENTS AND RESTRICTIONS

My CMS compilation systems have worked well in all VM
releases from 2.0 up to 5.0.  The code presented here is for
5.0, but should work well with few or no modifications in
previous releases.

Regarding the system's reliability, it has worked for more than
six years in four installations and has had very few problems,
none being serious.  Using IBM's batch pre-translators and
compilers in the CMS environment never caused me any
problems.  I can also say the same for Pansophic's
EASYTRIEVE and EASYTRIEVE/PLUS compilers.  If you
want to use debuggers called at compilation time, be aware that
such software may try to make use of certain batch resources
that cannot be executed in CMS (certain VSE SVCs, VSAM
file accesses, etc).  The same may apply to data dictionary
packages.  MVS software generally won't present any problems
executing in CMS.


NOTES FOR ALL USERS

The following sample EXECs will work only for COBOL
programs without EXEC CICS and EXEC DL/I statements.  To
make them work for such sources you will have to include an
additional step to execute IBM's HLPI pre-translator.  In
addition, you will have to incorporate a test in the RECCOB
EXEC to identify such programs and request the correct type of
compilation.

Because of the speed with which the compiler machine
operates, your programmers might well be tempted to request
COBOL compilations without waiting for subroutine and/or
BMS mapset linkages to terminate.  Your compiler machine
will naturally incorporate the last version available, supplying
your programmers in such a case with incorrect compilations.
The linkage, being batch (whether VSE or MVS), is a separate
step.  Only when this linkage-edit run terminates can the
compilation process be considered complete.

You'll also have to adjust COMPCOB JCL-BEG to your
installation's standards, including any POWER statements,
changing the JOB cards and DLBL/DD cards, etc.  (The
corresponding EXEC, COMPCOB, will adjust itself
automatically to include the object deck in the correct place.)

All EXEC statements which refer to environment names, such
as VSE machines, library names, TAG DEV denominations etc
will have to be changed according to your installation's naming
conventions.

To gain the additional speed of simultaneous CMS
compilations, as shown in Figure 1, you can change the CP
SPOOL commands in the REQCOB EXEC to direct the source
codes to a different wake-up machine, which in turn transfers
the sources to one of several compiler machines.  These can
contain the same compilation EXECs on their own A disks or
they can be stored in only one R/O disk after making the
necessary filemode changes.  (Don't forget the LINK
commands in the directory and the ACCESS commands in each
compiler machine's PROFILE EXEC.)

It may be necessary to adjust the CBL and PARMS options
defined in the COMPCOB EXEC.  Pay attention to such
options as LANGLVL and LIB because those defined in our
sample EXEC may not serve for your installation.


NOTES FOR VSE USERS

Since it is not possible to concatenate VSE libraries using the
CMS command, DLBL, all source libraries you access for
copy book expansion will have to be merged into only one
source library.  This may cause a considerable change in your
installation's library management concepts, but it will certainly
be worthwhile.  However, if you want to maintain both
production and test versions of copy books, you might try
eliminating your source libraries completely.  Your copy books
could instead be stored as CMS files, using the filetype to
indicate versions for test and production.  At COBOL
compilation time, your compiler machine can temporarily
'comment' the COPY statements and include the copy book into
the source deck after each such statement.  During test
compilations, the search sequence would be first test versions,
followed by production versions.  For obvious reasons, your
production compilations would search only among the
production version copy books.  This technique will permit you
to inform your programmers whether the test version or the
production version was included; something that not even
IBM's compilers do!


NOTES FOR MVS USERS

You might be tempted to permit linkage runs in more than one
address space, since you probably won't have VSE's contention
problems, but you will soon find out that it isn't at all
necessary.  Even at the peak of mass conversion using a total
of nine compiler machines, the use of only one address space
caused no bottlenecks or delays.

In addition to the previously mentioned parameter options,
MVS users should pay particular attention to the DYN and
RES options, because these determine whether the LOADER
treats CALL statements as being dynamic or static.  Because of
the size of report lines, with or without carriage control bytes,
you will also have to be careful with the use of the ADV and
NOADV options.  Our installation standardized on the ADV
option and permits the NOADV option at the programmer's
discretion.


DIRECTORY ENTRIES FOR 'COMPILER' MACHINE

USER COMPILER password 4M 4M BCDEFG 80
 ACCOUNT 999 COMPILER
 IPL CMS
 CONSOLE 009 3215
 SPOOL 00C 2540 READER *
 SPOOL 00D 2540 PUNCH  A
 SPOOL 00E 1403 R
 LINK MAINT 190 190 RR
 LINK MAINT 19E 19E RR
 MDISK 191 devtype nnn 005 volume MR readpswd writpswd


REQCOB EXEC FOR PROGRAMMER MACHINES

&TRACE OFF
* THIS EXEC REQUESTS A COBOL COMPILATION
&PROGFN = &1
&PROGFT = &2
&PROGFM = &3
&IF .&PROGFM = . &TYPE Inform the fname, ftype and fmode
&IF .&PROGFM = . &EXIT
ERASE COMPILER COMPILER A
IDENTIFY (STACK
&READ ARGS
&PROGRAMR = &1
&IF &PROGFT NE COBOL &TYPE This EXEC only works with ft=COBOL
&IF &PROGFT NE COBOL &EXIT
COPY &PROGFN &PROGFT &PROGFM COMPILER COMPILER A
&STACK MSGMODE OFF
&STACK I COMPCOB &PROGRAMR &PROGFN &PROGFT
&STACK FILE
XEDIT COMPILER COMPILER A
CP SPOOL D COMPILER
PUNCH COMPILER COMPILER A (NOH
ERASE COMPILER COMPILER A
CP SPOOL D *
&EXIT


PROFILE EXEC FOR 'COMPILER' MACHINE

&TRACE OFF
&EST = D
CP MSG * Testing LOGON at terminal
&IF &RC EQ 0 &ST = L
&IF &ST = D EXEC WAKUP
&IF &ST = L &TYPE
&IF &ST = L &TYPE To start this machine's functions, enter "WAKUP"
&EXIT


WAKUP EXEC FOR 'COMPILER' MACHINE

&TRACE ALL
* THIS EXEC CONTROLS THE COMPILER MACHINE'S ACTIVITIES
ERASE COMPILER COMPILER A
-INICIO
WAKEUP (CC RDR
READ COMPILER COMPILER A0
&IF &RC NE 0 &GOTO -RDREMPTY
EXECIO 1 DISKR COMPILER COMPILER A
&READ ARGS
EXEC &1 &2 &3 &4 &5 &6 &7 &8 &9 &10 &11 &12 &13 &14 &15
ERASE COMPILER COMPILER A
ERASE *        *        B1
&GOTO -INICIO
-RDREMPTY
&TRACE OFF
&TYPE This machine's RDR is empty.  "WAKE-UP" activity has been stopped
&EXIT


COMPCOB EXEC FOR 'COMPILER' MACHINE

VSE version

&TRACE ALL
&PROGRAMR = &1
&PROGFN   = &2
&PROGFT   = &3
&CBL = &LITERAL OF  CBL APOST,LANGLVL(1),LIB
&STACK I &CBL
&STACK N1
&STACK DELETE 1
&STACK FILE
XEDIT COMPILER COMPILER A
SET DOS ON (VSAM
ASSGN SYSIPT A
ASSGN SYSPCH B
ASSGN SYSLIST PRINTER
ASSGN SYS001 B
ASSGN SYS002 B
ASSGN SYS003 B
ASSGN SYS004 B
ASSGN SYS005 B
ASSGN SYS006 B
ASSGN SYS007 B
ASSGN SYS008 B
ASSGN SYS009 B
ASSGN SYS010 B
ASSGN SYS011 B
DLBL IJSYSIN A CMS COMPILER COMPILER ( SYSIPT
DLBL IJSYSPH B CMS XPTON    TEXT     ( SYSPCH
DLBL IJSYS01 B CMS XPTON    SYS001   ( SYS001
DLBL IJSYS02 B CMS XPTON    SYS002   ( SYS002
DLBL IJSYS03 B CMS XPTON    SYS003   ( SYS003
DLBL IJSYS04 B CMS XPTON    SYS004   ( SYS004
DLBL IJSYS05 B CMS XPTON    SYMDMP   ( SYS005
DLBL IJSYS06 B CMS XPTON    SYS006   ( SYS006
DLBL IJSYS07 B CMS XPTON    SYS007   ( SYS007
DLBL IJSYS08 B CMS XPTON    SYS008   ( SYS008
DLBL IJSYS09 B CMS XPTON    SYS009   ( SYS009
DLBL IJSYS10 B CMS XPTON    SYS010   ( SYS010
DLBL IJSYS11 B CMS XPTON    SYS011   ( SYS011
OPTION XREF NOSYM
-COBOL
CP W &PROGRAMR Starting compilation of &PROGFN &PROGFT
* ACCESS TO YOUR SOURCE LIBRARIES (COPY BOOKS)
REL H (DET
CP LINK VSEPROD C0A 120 RR RVSEPROD
AC 120 H
ASSGN SYSSLB H
DLBL IJSYSSL H DSN USER.SOURCE.LIBRARY.THREE (SYSSLB
* ACCESS TO THE CORE IMAGE LIBRARY WHICH CONTAINS THE COBOL COMPILER
REL G (DET
CP LINK VSEPROD C0A  128 RR RVSEPROD
ACC 128 G
ASSGN SYSCLB G
DLBL IJSYSCL G DSN PROD.CORE.IMAGE.LIBRARY.C (SYSCLB
* NOW ACTIVATING THE COBOL COMPILER
FETCH FCOBOL (START
&RETC = &CONCAT OF 00 &RC
&RETC = &RIGHT OF &RETC 2
STATE XPTON TEXT B
&IF &RC NE 0 &RETC = 12
* WRAP-UP ROUTINES AFTER COMPILATION
-COMPILATION_COMPLETED
SET DOS OFF
CP W &PROGRAMR Ending compilation of &PROGFN &PROGFT ==> RC = &RETC
CP W &PROGRAMR Your compilation lists are arriving in your RDR
CP TRANS * PRT ALL TO &PROGRAMR RDR
&IF &RETC > 8 &GOTO -ERROR
COPY COMPCOB JCL-BEG A = = B
&COMM = &CONCAT OF C &BLANK / -*PROGFN*- / &PROGFN / **
&STACK MSGMODE OFF
&STACK &COMM
&STACK FILE
XEDIT COMPCOB JCL-BEG B
CP SPOOL D VSELINK CONT
PUNCH COMPCOB JCL-BEG B (NOH
PUNCH XPTON   TEXT    B (NOH
PUNCH COMPCOB JCL-END A (NOH
CP SPOOL D VSELINK NOCONT
CP CLOSE PUN
CP SPOOL D *
&GOTO -END_OF_EXEC
-ERROR
CP W &PROGRAMR Your program will not be catalogued in the
CP W &PROGRAMR core image library due to errors above "W".
-END_OF_EXEC
DESBUF
&EXIT

MVS version

&TRACE ALL
* THIS EXEC EXECUTES YOUR MVS COBOL COMPILER
* INITIALIZATION ROUTINE
&PROGRAMR = &1
&PROGFN   = &2
&PROGFT   = &3
&PARMS    = &LITERAL OF PARM='APO,BUF=20K,CLI,DMA,DYN,LANGLVL(1),
&PARMS    = &CONCAT OF &PARMS LIB,NOSEQ,RES,SUP,SXR,TRU,VBR,VBS'
&FORMAT1  = &LITERAL OF (DSORG PO RECFM U BLOCK 23200
&FORMAT2  = &LITERAL OF (DSORG PO LRECL 80 RECFM FB BLOCK 6160
&BL       = &BLANK
EXECOS
* ACCESS TO YOUR LOADLIB LIBRARY (COBOL COMPILER)
FILEDEF * CLEAR
FI $SYSLIB DISK COBLIB LOADLIB * DSN SYS1.COBLIB &FORMAT1
GLOBAL LOADLIB COBLIB
* ACCESS TO YOUR MACLIB LIBRARIES (COPY BOOKS)
FI SYSLIB DISK MACLIB1 MACLIB * DSN BOOKLIB.TEST &FORMAT2
FI SYSLIB DISK MACLIB2 MACLIB * DSN BOOKLIB.PROD &FORMAT2 CONCAT
FI SYSLIB DISK MACLIB3 MACLIB * DSN SYS1.COBLIB  &FORMAT1 CONCAT
GLOBAL MACLIB  MACLIB1 MACLIB2 MACLIB3
* COMPILER RUN FILE DEFINITIONS
FI SYSPRINT PRINTER
FI SYSIN    DISK    COMPILER COMPILER B
FI SYSLIN   DISK    SYSLIN   MVS      B
FI SYSUT1   DISK    SYSUT1   MVS      B
FI SYSUT2   DISK    SYSUT2   MVS      B
FI SYSUT3   DISK    SYSUT3   MVS      B
FI SYSUT4   DISK    SYSUT4   MVS      B
* NOW ACTIVATING THE COBOL COMPILER
CP W &PROGRAMR Starting compilation of &PROGFN &PROGFT
OSRUN IKFCBL00 &PARMS
&RETC = &RC
* WRAP-UP ROUTINE AFTER COMPILATION
-COMPILATION_COMPLETED
EXECOS
CP W &PROGRAMR Ending compilation of &PROGFN &PROGFT ==> RC = &RETC
CP W &PROGRAMR Your compilation lists are arriving in your RDR
CP CLOSE PRT
CP TRANSFER * PRT ALL &PROGRAMR RDR
&IF &RETC > 8 &GOTO -ERROR
COPY COMPCOB JCL-BEG A = = B
COPY COMPCOB JCL-END A = = B
&COMMAND1 = &CONCAT OF C &BL /-*PROGRAMR*-/ &PROGRAMR / &BL **
&COMMAND2 = &CONCAT OF C &BL /-*PROGFN*-/ &PROGFN / &BL **
&STACK &COMMAND1
&STACK &COMMAND2
&STACK FILE
XEDIT COMPCOB JCL-BEG B
&STACK &COMMAND2
&STACK FILE
XEDIT COMPCOB JCL-END B
CP SPOOL D RSCSV2 CONT
CP TAG DEV PUN IPO1 JOB
PUNCH COMPCOB JCL-BEG B (NOH
PUNCH SYSLIN  MVS     B (NOH
PUNCH COMPCOB JCL-END B (NOH
CP SPOOL D RSCSV2 NOCONT
CP CLOSE PUN
CP SPOOL D *
&GOTO -END_OF_EXEC
-ERROR
CP W &PROGRAMR Your program will not be catalogued
CP W &PORGRAMR in the LOADLIB due to errors above "W".
-END_OF_EXEC
ERASE * * B1
DESBUF
&EXIT


FILE COMPCOB JCL-BEG A FOR 'COMPILER' MACHINE

VSE version

// JOB JOBNAME
// LIBDEF RL,SEARCH=(PRDRLC,USRRL3),FROM=USRRL3,TO=USRRL3
// LIBDEF CL,TO=USRCL3
// OPTION CATAL
 PHASE -*PROGFN*-,*
 INCLUDE

MVS version

//JOBNAME  JOB -*PROGRAMR*-,CLASS=X,MSGCLASS=A,MSGLEVEL=(1,1)
/*ROUTE    PUNCH A1VRNA01.-*PROGRAMR*-
/*ROUTE    PRINT A1VRNA01.-*PROGRAMR*-
//LKED     EXEC PGM=IEWL,REGION=256K,PARM='LIST,MAP,SIZE=2048'
//SYSLIB   DD   DSN=SYS1.COBLIB,DISP=SHR
//         DD   DSN=TEST.LOADLIB,DISP=SHR
//         DD   DSN=PROD.LOADLIB,DISP=SHR
//SYSLMOD  DD   DSN=TEST.LOADLIB(-*PROGFN*-),DISP=SHR
//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(1,1))
//SYSPRINT DD   SYSOUT=*
//SYSLIN   DD   *


FILE COMPCOB JCL-END A FOR 'COMPILER' MACHINE

VSE version

/*
// EXEC LINKEDT
/*
/&
* $$ EOJ

MVS version

//         DD   DDNAME=SYSIN
//SYSIN    DD   *
 NAME -*PROGRAMA*-(R)
/*
//

Gene Earl Bearup
Technical Support Analyst
Glasurit do Brasil (Brazil)
