 Obtaining mini-disk passwords
Within our VM shop there are several people who need to link to any given mini-
disk on the system.  In order to do this, several approaches were considered.
The idea that was eliminated first was that these people memorise every
necessary password or keep a list of the passwords somewhere.  These weren't
practical concepts.
Another was to modify the CP module DMKLNK to be able to check the user's class
and grant the link depending on class.  This was unacceptable because there are
users with every class that should not be linking to other users' or system
mini-disks.
Another option was to modify DMKLNK to check for user-id and allow any link for
certain users.  The problem here was that the list could not be added to,
subtracted from, or modified easily.
A REXX EXEC that appeared in the March 1987 edition of VM Update was used for a
while but was found to be inadequate for our needs for several reasons:
1    The name of the directory file changed without the EXEC being updated.
2    The directory was often modified without the direct command being executed
to make the file on-line.
3    Some passwords were changed using the directory update-in-place diagnose
call for temporary changes and would not be reflected in the CMS directory file.
4    The MAINT (or DIRMAINT) 191 password would change almost daily and wouldn't
always get changed in the EXEC.
This initiated the momentum to go with another solution, which seemed to be
flexible enough and easy enough.  It entailed having a program that would read
directly from the directory cylinders on the VMSRES disk pack and follow the CP
directory entries there.  This would ensure that the information returned would
necessarily be current and correct regardless of any modifications to the CMS
directory file and would not have to be changed.  The only requirements are that
the user to execute the program should have class C or E privilege and a read
only full pack link to the disk containing the directory cylinders.  The virtual
address for this link is defined in the program as '123'.
This program is currently in use running under VM HPO release 4.2 using 3380s.
The program would have to be modified for other drives but should not need to be
changed for earlier levels of VM.  The EXEC that accompanies this program is
relatively simple and short.  In essence, it gets and prepares the user's input
and adds defaults if the device or wanted mode are omitted.  I have seen several
programs in past issues of VM Update that demonstrate examples of reading
directly from DASD, but it's always been FBA type.  This was not a problem until
we converted from 3370s to 3380s.  I hope some of this code will be useful, not
only for the actual program's use, but for the CKD DASD I/O routines' use in
other users' programs too.
PLINK EXEC
TRACE N
PARSE UPPER ARG USERID DISK ACCESS '(' OPTION OTHER
IF GIVEN = '' THEN EXIT
IF DISK = '' THEN DISK='191'
IF ACCESS = '' THEN ACCESS='R'
IF (OPTION ¬= 'FIFO') & (OPTION ¬= 'LIFO') & (OPTION ¬= '') ,
   & (OPTION ¬= 'E') & (OTHER ¬= 'E') & (OTHER ¬= '') THEN
    DO
        SAY 'INVALID OPTION - ' OPTION'.'
        EXIT
    END
IF OPTION = 'E' THEN OTHER = 'E'
/* EXECUTE THE GP MODULE TO GET THE REQUESTED PASSWORD */
GP USERID DISK ACCESS
IF RC ¬=0 THEN SIGNAL ERROR
PULL S_NAME S_DISK S_PASS S_VOLSER S_ACCESS .
/* GET AN OPEN VIRTUAL ADDRESS AND AN OPEN DISK MODE */
GETFMADR
PULL . FM VDASD NOMODES .
IF NOMODES ¬= '' THEN
 DO
   SAY 'NO MODES AVAILABLE. GO AWAY.'
   EXIT
 END
 /* DO THE ACTUAL LINK */
ACCESS = S_ACCESS33R
'EXECIO 0 CP (STRING LINK' S_NAME S_DISK VDASD ACCESS S_PASS
'SET EMSG OFF'
ACCALL VDASD FM
'SET EMSG ON'
/* DOES THE CALLER WANT THE INFO STACKED? */
SELECT
    WHEN OPTION = 'FIFO' THEN QUEUE FM ACCESS VDASD
    WHEN OPTION = 'LIFO' THEN PUSH FM ACCESS VDASD
    OTHERWISE
     DO
       'Q DISK 'FM' ( STACK LIFO'
       PULL DNAME . . ACCESS CYLS .
       PULL .
       SAY 'DISK MODE:'FM'  ACCESS:'ACCESS'  ADDRESS:'VDASD,
               ' LABEL:'DNAME'  CYLS:'CYLS
     END
END
EXIT
ERROR:
SAY 'ERROR DURING GP RC='RC
EXIT

GP ASSEMBLE
         REGEQU
GP       CSECT
         BALR  R11,0
         USING *,R11
         ST    R14,SAVEHOME            KNOWEST FROM WHENCE WE CAME
         USING PARMS,R1                ON ENTRY R1 POINTS TO PARMS
         CLI   PARMUSER,X'FF'          IF NO USER
         BE    NOUSER                    THEN ERROR
         CLI   PARMDEV,X'FF'           IF NO DEV
         BE    NODEV                     THEN ERROR
         MVC   USERWNTD(8),PARMUSER    INSERT GIVEN USERID INTO LOCATE
         MVC   CRADDR(3),PARMDEV       INSERT GIVEN DEVICE INTO LOCATE
         MVC   ACCWNTD(4),=AL4(UDEVLR)  SET DEFAULT TO READ ACCESS
         CLI   PARMACC,C'W'            DOES CALLER WANT WRITE ACCESS?
         BNE   CHK4MULT
         MVC   ACCWNTD(4),=AL4(UDEVLW)  SET ACCESS TO WRITE ACCESS
         B     DONEPARM
CHK4MULT EQU   *
         CLI   PARMACC,C'M'            DOES CALLER WANT MULTI ACCESS?
         BNE   DONEPARM
         MVC   ACCWNTD(4),=AL4(UDEVLM)  SET ACCESS TO MULTI ACCESS
         DROP  R1                      NO MORE PARMS
DONEPARM EQU   *
         BAL   R14,EBC2HEX
         L     R1,FRADDR
         SRL   R1,12
         STH   R1,DEVWNTD
FINDINFO EQU   *
         MVC   LOOKLOC(4),SYSBASE      PUT ADDR OF SYSLOCS IN LIST
*  GET ADDRESS OF SYSLOCS
         LA    R5,LOOKLOC              PUT ADDRESS OF TABLE IN R5
         LA    R6,1                    SET UP FOR ONLY 1 LOCATION
         LA    R7,LOCVAL               PUT ADDRESS OF RET TABLE IN R7
         DIAG  R5,R6,4                 DO DIAG TO READ REAL MEMORY
*  GET ADDRESS ON DASD
         L     R2,LOCVAL               ADDRESS OF SYSLOCS
         AH    R2,=X'0034'             ADD 34 TO GET OFFSET OF DIR PTR
         ST    R2,LOOKLOC              LOOK IT UP
         LA    R5,LOOKLOC              PUT ADDRESS OF TABLE IN R5
         LA    R6,1                    SET UP FOR ONLY 1 LOCATION
         LA    R7,LOCVAL               PUT ADDRESS OF RET TABLE IN R7
          DIAG  R5,R6,4                 DO DIAG TO READ REAL MEMORY
         L     R2,LOCVAL               GET DASD ADDR OF START OF DIRECT
         LA    R1,0                    NO OFFSET TO READ
         BAL   R14,GETNXTBL            GET THIS BLOCK
         LA    R10,INBUFF
         USING UDIRBLOK,R10
         XR    R1,R1                   CLEAR REGISTER
         LH    R1,UDIRDISP             1ST TIME THRU=ADDR OF LAST ENTRY
         LA    R2,INBUFF               ADDRESS OF START OF BUFFER
         AR    R1,R2                   ADDRESS IN STORAGE OF LAST ENTRY
         ST    R1,LASTSTRT             SAVE IT
CHEKNDIR EQU   *
         XC    UDIRUSER(8),MASK       UNMASK THE USERNAME
         CLC   UDIRUSER(8),USERWNTD   IS THIS THE USER WE WANT?
         BE    GOTUSER                YUP, GO DO SUMPTIN BOUT IT
         C     R10,LASTSTRT           DONE THE LAST USER ENTRY?
         BNL   CANTFIND               YUP, DONT THINK THE BLOKE EXISTS
         A     R10,=A(UDIRSIZE*8)     INCREMENT POINTER
         B     CHEKNDIR               CHECK NEXT DIRECTORY ENTRY
EXIT     EQU   *
         L     R14,SAVEHOME           RETRIVE RETURNING ADDRESS
         BR    R14                    RETURN TO CALLER
* THE USER IS FOUND. NOW GET TO THE DEVICE BLOCKS
GOTUSER  EQU   *
         XR    R1,R1                  CLEAR REG
         LH    R1,UDIRDISP            GET OFFSET OF THIS USERS NXT BLK
         ST    R1,DISP                SAVE DISPLACEMENT
         L     R2,UDIRDASD            DASD ADDRESS OF USER'S NEXT BLOK
         BAL   R14,GETNXTBL           GET THE BUNCH OF BLOCKS
         DROP  R10
         USING UMACBLOK,R10
         LA    R10,INBUFF             GET ADDRESS OF BUFFER
         A     R10,DISP               GET ADD DISPLACEMENT
         XR    R1,R1
         LH    R1,UMACDISP            GET OFFSET OF USERS UDEVBLOK
         ST    R1,DISP                SAVE DISPLACEMENT
         L     R2,UMACDASD            DASD ADDRESS OF USER'S NEXT BLOK
         BAL   R14,GETNXTBL           GET THE BUNCH OF BLOCKS
         DROP  R10
* DEVICE BLOCKS ARE FOUND... CHECK EVERY ONE FOR A PROPER MATCH
         USING UDEVBLOK,R10
CHKNDEV  EQU   *
         LA    R10,INBUFF             ADDRESS OF BUFFER
         A     R10,DISP               DISPLACEMENT
         CLC   UDEVADD(2),DEVWNTD     IS THIS THE DEV WE'RE LOOKING 4?
         BE    GOTDEV                 YES, ENJOY
         XR    R1,R1
         LH    R1,UDEVDISP            GET OFFSET OF USERS UDEVBLOK
         ST    R1,DISP                SAVE DISPLACEMENT
         L     R2,UDEVDASD            DASD ADDRESS OF USER'S NEXT BLOK
         LTR   R2,R2                  IS THIS THE LST DEV OF THIS USER
         BZ    NOFNDDEV               YUP, GO AWAY
         BAL   R14,GETNXTBL           GET THE BUNCH OF BLOCKS
         LA    R3,1(,R3)              INCREMENT DEVICE COUNTER
         B     CHKNDEV                GO LOOK AT MORE DEVICES
* FOUND THE DEVICE... IS IS AN INDIRECT LINK?
GOTDEV   EQU   *
         XC    UDEVSTAT(1),MASK       UNMASK THE STATUS BITS
         L     R2,UDEVSTAT            GET STATUS BITS
         N     R2,=X'10000000'        IS IT LINKED FROM ELSEWHERE?
         BNZ   LINKED                 YES, TRACK IT DOWN SOME MORE
*    GET THE REQUESTED PASSWORD (IF AVAILABLE)
         XR    R1,R1                  CLEAR REG
         XC    UDEVMODE(1),MASK       UNMASK STATUS BYTE
         IC    R1,UDEVMODE            GET INFO BYTE
         N     R1,ACCWNTD             IS REQUESTED ACCESS ALLOWED?
          BZ    ACCDENYD               NOPE, GO TO ERROR & NEVER RETURN
* ACCESS IS ALLOWED, GET THE WRITE PASSWORD
         MVI   DISPACC,C'R'           ASSUME ACCESS WAS FOR READ
         CLC   ACCWNTD,=AL4(UDEVLM)   DID THE USER GET MULTI?
         BNE   CHKWRITE               NO, SEE IF HE GOT WRITE ACCESS
         MVI   DISPACC,C'M'           SHOW THE USER GOT MULTI
         B     DONEACC                GO AWAY
CHKWRITE EQU   *
         CLC   ACCWNTD,=AL4(UDEVLW)   DID THE USER GET WRITE?
         BNE   DONEACC                NO, MUSTA BEEN A READ
         MVI   DISPACC,C'W'           SHOW THAT HE GOT WRITE ACCESS
DONEACC  EQU   *
         MVC   PASSWORD(8),=C'        ' CLEAR PASSWORD
         LA    R3,UDEVPASM            POINT TO LAST PASSWORD
         L     R2,ACCWNTD             GET ACCESS REQUESTED
         SRL   R2,5                   SHIFT DOWN ACCESS TO START
NEXTACC  EQU   *
         SRL   R2,1                   SHIFT DOWN ACCESS
         LTR   R2,R2                  IS THIS THE CORRECT PASSWORD?
         BZ    GETPASS                YUP, TRANSLATE IT
         SH    R3,=X'0008'            SET POINTER TO NEXT PASSWORD
         B     NEXTACC                SEE IF THIS IS THE ONE
* UNMASK AND MOVE THE PASSWORD TO THE FINAL RESTING PLACE
GETPASS  EQU   *
         XC    0(8,R3),MASK           UNMASK THE PASSWORD
         MVC   PASSWORD(8),0(R3)      SAVE THE PASSWORD
* UNMASK AND MOVE THE VOLSER TO THE FINAL RESTING PLACE
         XC    UDEVVSER(6),MASK       UNMASK THE VOLUME'S SERIAL ID
         MVC   VOLSER(6),UDEVVSER     SAVE THE VOLUME'S SERIAL ID
* GET THE DEVICE ADDRESS AND MOVE TO THE FINAL RESTING PLACE
         XR    R1,R1                  CLEAR REG
         LH    R1,DEVWNTD             LOAD DEVICE ADDRESS
         L     R2,=A(DEVWEND)         LAST BYTE OF DESTINATION
         LA    R3,3                   # OF BYTES TO CONVERT
         BAL   R14,HEX2EBC            CONVERT R1 TO EBCDIC
         LINEDIT TEXT='USERID=........ DEVICE=.... ON ......',         X
               SUB=(CHARA,(USERWNTD,8),CHARA,(DEVWNTD-1,3),CHARA,VOLSERX
               ),DOT=NO,COMP=NO,RENT=NO
* NOW STACK THE INFO THAT IS TO BE PASSED BACK TO THE USER'S EXEC
         LA    R1,STACKER
         SVC   202
         DC    AL4(STACKERR)
         XR    R15,R15                SHOW NO ERROR OCCURRED
         B     EXIT                   GO TO RETURN ROUTINE
* THIS IS AN INDIRECT LINK FROM ANOTHER USER... SAY SO AND FOLLOW
* THE POINTERS TO TRACK DOWN THE USER IT CAME FROM TO GET THE REAL PSWD
LINKED   EQU   *
         LINEDIT TEXT='  IS FROM:',DOT=NO
         XC    UDEVLKID(8),MASK       UNMASK THE LINK ID
         XC    UDEVLINK(2),MASK       UNMASK THE LINK DEVICE #
         MVC   USERWNTD(8),UDEVLKID   NEW USER TO LOOK FOR
         MVC   DEVWNTD(2),UDEVLINK    NEW DEVICE TO LOOK FOR
         B     FINDINFO
* INFORMATION FORM THE STACK COMMAND
STACKER  DS    0D
         DC    CL8'ATTN'
         DC    CL4'FIFO'
         DC    AL1(80)
         DC    AL3(OUTLINE)
* INFORMATION THAT IS TO BE STACKED
OUTLINE  DS    0CL80
USERWNTD DS    C'        '
         DC    C'  '
DEVWNTD  DC    C'  '
DEVWEND  EQU   *-1
         DC    C' '
 PASSWORD DC    C'        '
         DC    C' '
VOLSER   DC    C'      '
         DC    C' '
DISPACC  DC    C' '
         DC    C' '
STAKGARB DC    CL49' '
         DS    0F
ACCWNTD  DS    F
         DS    0F
GETNXTBL EQU   *
         C     R2,BLKTOGET            WE WANT THE BLOK THAT IS NOW IN?
         BE    BLKOUT                 YES. DON'T DO ANYTHING.
         ST    R14,GNTSAVER           SAVE R14,LEST WE FORGET OUR ROOTS
         ST    R2,BLKTOGET            SAVE THE BLOCK #
         N     R2,=X'00FF00FF'
         ST    R2,CYLINDER
         L     R2,BLKTOGET            GET BACK THE THING
         LA    R1,8                   # BITS TO SHIFT
         SRL   R2,0(R1)               SHIFT TO GET RECORD #
         STC   R2,RECORD              STORE THE RECORD TO READ
NEXTREC  EQU   *
         LR    R1,R2
         BAL   R14,READBLOK           GO READ THE WANTED BLOCK
         LTR   R15,R15                0 RETURN CODE?
         BZ    DONEOUT                YES, GO RETURN
         CLI   HEAD,HEAD3380          AT LAST HEAD ON THIS CYL?
         BNL   NEXTCYL                YES. GO INCREMENT THE CYL #
         LH    R1,HEAD                GET THE CURRENT HEAD #
         LA    R1,1(,R1)              INCREMENT HEAD #
         STH   R1,HEAD                SAVE THE NEW HEAD NUMBER
         B     NEXTREC                GO TRY NEXT RECORD
NEXTCYL  EQU   *
         XR    R1,R1                 CLEAR REG
         STH   R1,HEAD               PUT 0 INTO HEAD NUMBER
         LH    R2,CYLINDER           GET CURRENT CYLINDER NUMBER
         LA    R2,1(,R2)             INCREMENT CYLINDER BY 1
         STH   R2,CYLINDER           SAVE NEW CYLINDER NUMBER
         B     NEXTREC               GO TRY NEXT RECORD NUMBER
DONEOUT  EQU   *
         L     R14,GNTSAVER          WELL, THAT WAS FUN...
BLKOUT   EQU   *
         BR    R14
GNTSAVER DS    F
BLKTOGET DC    X'FFFFFFFF'
         DS    0F
READBLOK EQU   *
         ST    R14,RBSAVR
         XR    R15,R15
         L     R5,CUU
         LA    R6,RDDISK
         DIAG  R5,R6,X'0020'
         L     R14,RBSAVR
         BR    R14
RBSAVR   DS    F
         DS    0F
EBC2HEX  EQU   *
         XR    R0,R0                 CLEAR OUT REG TO BE USED FOR CONVERT
         LA    R9,CRADDR             POINT TO EBCDIC HEX STRING
         LA    R8,DIGEND             LOAD END OF STRING FLAG CHAR
         LA    R7,EBNUM              LOAD LOWEST EBCDIC NUMERIC CHAR
         LA    R6,9                  LOAD OFFSET THAT MAY BE NEEDED
TRANS    IC    R0,0(R9)              GET ONE EBCDIC HEX CHAR
         CR    R0,R8                 IS THIS END OF STRING
         BE    FINT                  IF SO BRANCH
         CR    R0,R7                 IS THIS A NUMERIC EBCDIC CHAR
          BNM   NOFIX                 IF NOT SKIP FIX
         AR    R0,R6                 ADJUST LOWER NIBBLE FOR 'ABCDEF'
         STC   R0,0(R9)              STORE CHANGE
NOFIX    LA    R9,1(,R9)             POINT TO NEXT
         B     TRANS                 GO DO IT AGAIN TILL END OF STRING
FINT     PACK  PRADDR(4),CRADDR(7)   PACK OUT HIGH NIBBLES
         BR    R14                   RETURN TO CALLER
CRADDR   DS    CL3                   EBCDIC SOURCE
         DC    X'15'
FRADDR   DS    0F                    FULL WORD REAL ADDRESS
         DS    CL1
PRADDR   DS    CL3                   TRANSLATED RADDR PACKED INTO HERE
         DS    CL1                   THIS EXTRA BYTE NEEDED FOR PACK
EBNUM    EQU   C'0'                  LOWEST EBCDIC NUMERIC
DIGEND   EQU   X'15'                 END OF STRING FLAG
* UPON ENTRY: R1 HAS THE THING TO BE CONVERTED
*           : R2 HAS THE ADDRESS OF END OF DESTINATION AREA
*           : R3 HAS THE # OF DIGITS TO CONVERT
*           : R14 HAS THE RETURN ADDRESS
         DS    0F
HEX2EBC  EQU   *
         XR    R5,R5                   CLEAR COUNTER
*  MAKE DIGIT PRINTABLE
DONEXT   EQU   *
         ST    R1,SAVEHEX
         N     R1,=X'0000000F'         GET RID OF GARBAGE
         CH    R1,=H'9'                IS THE DIGIT > 9?
         BH    FIXHEX                  YES, MUST 'OR' R1 WITH C0
         O     R1,=X'000000F0'         IT'S < 9, SHOULD 'OR' WITH F0
         B     DONEDIG                 GO SAVE THE DIGIT
FIXHEX   EQU   *
         AH    R1,=X'00B7'             ACCOUNT FOR EBCDIC OFFSET
DONEDIG  EQU   *
         STC   R1,0(,R2)               SAVE CURRENT BYTE TO DEST ADDR
         BCTR  R2,0                    DECREMENT DESTINATION POINTER
* SHIFT THE SOURCE DOWN 1 DIGIT
         L     R1,SAVEHEX
         LA    R4,4                    # BITS TO SHIFT THE ANSWER DOWN
         SRA   R1,0(R4)                SHIFT IT
         N     R1,=X'0FFFFFFF'         CLEAR ANY GARBAGE FROM SGN SHIFT
         LA    R5,1(,R5)               INCREMENT COUNTER
         CR    R5,R3                   DONE ALL DIGITS?
         BL    DONEXT                  NO, GO DO ANOTHER
         BR    R14
SAVEHEX  DS    F
* * * * ERROR ROUTINES * * *
         DS    0F
NOUSER   EQU   *
*        LINEDIT TEXT='YOU MUST SPECIFY A USER AND DEVICE'
         LA    R15,1
         B     EXIT
NODEV    EQU   *
         LINEDIT TEXT='YOU MUST SPECIFY A DEVICE TO FIND'
         LA    R15,2
         B     EXIT
CANTFIND EQU   *
         LINEDIT TEXT='CANT FIND USER ........                  ',SUB=(X
               CHARA,USERWNTD),DOT=NO,COMP=NO,RENT=NO
         LA    R15,3
         B     EXIT
NOFNDDEV EQU   *
         XR    R2,R2
         LH    R2,DEVWNTD
         LINEDIT TEXT='CANT FIND DEVICE ....',SUB=(HEX,(R2)),DOT=NO
         LA    R15,4
         B     EXIT
 ERROR    EQU   *
         LINEDIT TEXT='ERROR DURING DISK READ ........',SUB=(HEX,(R15))
         LA    R15,5
         B     EXIT
ACCDENYD EQU   *
         LINEDIT TEXT='REQUESTED ACCESS NOT AVAILABLE'
         LA    R15,6
         B     EXIT
STACKERR EQU   *
         LA    R15,7
         B     EXIT
         DS    0F
CUU      DC    X'00000123'         VIRTUAL ADDRESS OF SYSRES
HEAD3380 EQU   14
RECCNTR  DS    F
         DS    0F
         DC    X'0000'             FILLER TO ALIGN CYLINDER ON FULLWORD
SEEK     DC    X'0000'
CYLINDER DC    X'0000'             CYLINDER TO SEEK TO
HEAD     DC    X'0000'             HEAD TO SELECT
RECORD   DC    X'00'               RECORD # TO READ
         DS    0D
* FIRST PART OF CCW CHAIN ALIGNS THE DRIVE TO R0 ON THE PROPER TRACK
RDDISK   CCW   X'07',SEEK,X'40',6            * SEEK
SEARCHKY CCW   X'31',CYLINDER,X'40',5        * SEARCH ID EQUAL
         CCW   X'08',SEARCHKY,0,0            * TIC
         CCW   X'06',INBUFF,X'20',64000      * READ DATA
SYSBASE  DC    X'000003A8'
SAVEHOME DS    F
NUMOFDEV DS    F
LASTSTRT DS    F
DISP     DS    F
MASK     DC    X'AAAAAAAAAAAAAAAA'
         DS    0F
LOOKLOC  DS    CL20
LOCVAL   DS    CL20
         LTORG
GARB     DC    C'        '
INBUFF   DS    CL5120
         DS    0D
         COPY UDIRECT
         DS    0D
PARMS    DSECT                     PARAMETER LIST PASSED FROM COMMAND
PARMCMD  DS    CL8                 THE COMMAND NAME
PARMUSER DS    CL8                 FIRST PARAMETER, MUST BE USERID
PARMDEV  DS    CL8                 SECOND PARAMETER MUST BE DEVICE ADDR
PARMACC  DS    CL8                 THIRD PARM IS ACCESS WANTED(R R/W)
         END

Bernard McIlroy
Systems Programmer
Progress Lighting (USA)  ) Progress Lighting 1988














