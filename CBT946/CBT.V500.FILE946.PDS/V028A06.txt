 Self-relocating modules
When you use the CMS Assembler as a command language (such as EXEC2 or REXX)
your module will eventually be overlaid by called programs that are loaded at
the same point (128K default) of the user area.  This symptom is indicated by
the message:
     DMSITP141T OPERATION EXCEPTION OCCURRED AT address IN ROUTINE name
The called program then gives back control to unmeaningful (overlaid) code in
the main program.
Even if you move up the main program's start address, you cannot ensure a
correct execution because the size of called program(s) (and the extent of the
overlay) are usually unknown.  The only way to guarantee the integrity of your
module is to run it in a protected area, which is managed by CMS until you
release it.
How do you get this area and load the program there?  There are at least two
solutions available:
1    Separate the function of loading from the program proper.  This is
implemented in some products like IOS3270 which have the loader (filetype
MODULE) and the loaded program (filetype XMOD).  The module knows the XMOD size,
gets a free area in double words through the DMSFREE macro, loads XMOD and
transfers control to it.
2    Integrate the functions (the solution presented here).  In this case, the
module is loaded into the transient area (X'00E000'), gets DMSFREE area and
moves itself there.  This process has the advantage of using just one module at
the expense of the time required for a double load of the code, which for
modules up to 8K (the size of the transient area) is imperceptible.
There is one catch, though.  The code should be adcon (address constant) free,
because these addresses are hard-wired when the TEXT file is loaded and
GENMODed, and references to them will not match the DMSFREEd addresses.
Unfortunately, several CMS macros and parameter lists (PLISTs) have ADCONS.  If
this is the case, you have to 'patch' those constants with the corresponding
relocated addresses, after entry on the DMSFREEd area.
The whole procedure, illustrated in the following program SELFREL, is:
1    The module is transient loaded
2    Gets free storage and relocates there
3    Patches ADCONS
4    Executes
5    Moves back to transient, releases free storage and exits.
SELFREL ASSEMBLE
*  THIS SELF-RELOCATABLE PROGRAM TOKENIZES AN INPUT LINE AND
*  EXECUTES IT VIA SVC 202. IT INCLUDES EXAMPLES HOW TO RELOCATE ADCONS
SELFREL  START X'0E000'              TRANSIENT LOAD
         USING *,R12                 ESTABLISH ADDRESSABILITY
         USING NUCON,R0              ADDRESS NUCON
         STM   R0,R14,8(R13)         SAVE REGISTERS
         LA    R3,36                 RC FOR BAD DMSFREE
         LA    R0,FREELEN            LENGTH OF THIS MODULE IN DWORDS
         DMSFREE DWORDS=(0),ERR=FASTEXIT GET FREE STORAGE
         ST    R0,FREDWRDS           SAVE NUMBER OF DWORDS OBTAINED
         SR    R3,R3                 ZERO RETURN CODE
         LR    R14,R1                SAVE TARGET ADDRESS
         LR    R15,R0                SIZE IN R15
         SLL   R15,3                 CONVERT INTO BYTES FOR MOVE LONG
         LR    R0,R12                ADDRESS OF SOURCE
         LR    R12,R1                ADDRESS OF TARGET AND NEW BASE
         LR    R1,R15                LENGTH IN R1 TOO
         MVCL  R14,R0                MOVE LONG (ALL CODE)
         B     *+4                   JUMP INTO FREE STORAGE
* NOW WITHIN FREE STORAGE WE FIRST RELOCATE ALL ADCONS BY
* LOADING EACH ADDRESS AND STORING IT WHERE APPROPRIATE
         LA    R7,EXIT
         STCM  R7,B'1111',READERR
         LA    R7,ERROR
         STCM  R7,B'1111',SVCERROR
         LA    R7,BUFFER
         STCM  R7,B'0111',READB      A 3 BYTE LONG ADCON
         LA    R8,PROMPT             DISPLAY PROMPT
          WRTERM (8),L'PROMPT         (AN ADCON-FREE WRTERM)
         L     R1,12(R13)            RESTORE R1
         LA    R1,READ               READ LINE ...
         SVC   202                   ...
READERR  DC    AL4(EXIT)             EXIT IF READ ERROR
         BAL   R9,TOKENIZE           TOKENIZE INPUT LINE
         CLI   0(R1),X'FF'           FENCE ?
         BE    EXIT                  YES ... NO INPUT OR BLANKS
         SVC   202                   EXECUTE TYPED LINE
SVCERROR DC    AL4(ERROR)            ERROR ?
         B     EXIT                  NO, QUICK EXIT
ERROR    EQU   *
         LR    R3,R15                YES ... LOAD RETURN CODE
EXIT     EQU   *
         L     R6,FREELOWR           LOAD START OF TRANSIENT
         MVC   0(TAILLEN,R6),TAILST  MOVE CODE THERE
         DMSKEY NUCLEUS              AND BECAUSE OF IT ...
         MVI   LASTTMOD,C' '         BLANK INFO FOR LAST MODULE LOADED
         DMSKEY RESET                RESET KEY
         LR    R1,R12                 ADDRESS FOR DMSFRET
         L     R0,FREDWRDS           NUMBER OF DMSFREE'D DWORDS
         BR    R6                    BACK TO TRANSIENT
* WE MOVE BACK TO TRANSIENT TO RELEASE FREE STORAGE AND RETURN TO CMS
* OTHERWISE, AN OPERATION EXCEPTION COULD BE RAISED AFTER DMSFRET
TAILST   EQU   *
         DMSFRET DWORDS=(0),LOC=(1)  RELEASE FREE STORAGE
FASTEXIT EQU   *                     EXIT IF BAD DMSFREE (ON ENTRY)
         LR    R15,R3                LOAD RETURN CODE ...
         LM    R0,R14,8(R13)         RESTORE REGS AND ...
         BR    R14                   BACK TO CMS
TAILLEN  EQU   *-TAILST
* ASCANN IS A NUCLEUS ROUTINE THAT RETURNS A TOKENIZED STRING IN R1
TOKENIZE EQU   *
         DMSKEY NUCLEUS              PROTECTION KEY OF 0
         LA    R0,80                 NUMBER OF CHARACTERS TO TOKENIZE
         LA    R1,BUFFER             LOAD BUFFER ADDRESS
         L     R15,ASCANN            TOKENIZATION ROUTINE
         BALR  R14,R15               LET CMS DO IT
         DMSKEY RESET                RESET KEY
         BR    R9                    RETURN TO CALLER
*                      ASSORTED DATA                                 *
         DS    0F
READ     DS    0D                    READ PARMLIST
         DC    CL8'WAITRD'
         DC    AL1(1)
READB    DC    AL3(BUFFER)           BUFFER ADDRESS
         DC    CL1'U'                UPPERCASE OPTION
         DC    AL3(130)              SIZE OF BUFFER
BUFFER   DC    CL130' '              INPUT BUFFER
PROMPT   DC    C'PLEASE TYPE A COMMAND OR PRESS <ENTER> TO QUIT:'
FREDWRDS DS    F                     NUMBER OF DWORDS OBTAINED
FREELEN  EQU   (*-SELFREL+7)/8       HOW LONG (IN DWORDS) THIS CODE IS
         PRINT NOGEN
         NUCON
         REGEQU
         END   SELFREL
Daniel Arany
Technical Support Manager
Texaco Brasil  ) Xephon 1988







