Locating VM files

There have been several instances in my previous and current
job where I had to locate one or more specific files on user
mini-disks. One recent example where this became necessary
was when we were trying to determine if any of the PROFS
users had any special EXEC programs that we were not aware
of. Rather than sending out a general query to all users or
logging on each user-id (a formidable task) I wrote a REXX
program called FINDFILE which does the search for us and
creates an output file that we can later browse.

This program works by accessing the VM system source
directory and building a table of all user-ids, their mini-disks,
and the mini-disk passwords. If someone is using the mini-disk
a read link is made, otherwise a multiple link is executed. This
way we can also locate hidden files. If this program is executed
at the weekend there is a good chance that you will be able to
perform a multiple link for all users.

/*  This program looks for a specific file on all VM users' disks.   */
/*  If the file is found the information for the file is displayed   */
/*  on an output file.                                               */
    trace 'o'
    address command
/*  Get the name of the CMS file we are looking for.                 */
    arg Fname Ftype
    if Fname = '' | Ftype = ''
    then do
        'VMFCLEAR'
        say 'The filename and/or filetype argument entered is invalid.'
        say 'The correct format for this command is:'
        say '         FINDFILE filename filetype'
        say 'Program execution is terminated.'
        say
        exit
    end
/*  Create a CMS file which will hold all of the user-id mini-disk   */
/*  names where the file was found. Write out the name of the file   */
/*  to be searched for as the title of this file.                    */
/*  We should erase any previous versions of this file if there      */
/*  are any lying around.                                            */
    Report = 'FINDFILE DATA A'
    'ESTATEW' Report
    if rc = 0 then 'ERASE' Report
    OutRec = 'Name of CMS File Searched For =' Fname Ftype
    'EXECIO 1 DISKW' Report '(STRING' OutRec
/*  Check if this EXEC has been loaded into user storage and if it   */
/*  has not then use the EXECLOAD to load it.                        */
    parse source . . ExecName .
    'EXECSTAT' ExecName 'EXEC'
    if rc = 4 then 'EXECLOAD' ExecName 'EXEC'
/*  Access the VM system directory and build a table of all the      */
/*  user-ids and their mini-disks.                                   */
/*                                                                   */
/*  Note: This program assumes that the VM directory file is already */
/*        linked to the 195 mini-disk of the user-id executing this  */
/*        program.                                                   */
    'ACCESS 195 F'
    'EXECIO * DISKR USER DIRECT F ( FINIS'
    'VMFCLEAR'
    say '.....loading directory table for mini-disk searches.....',
        'be patient.....'
    i = 0
    do queued()
        pull DirectRec
/*  Check if the directory record is a user-id, and if so save the   */
/*  VM user-id name and the log-on password.                         */
        if word(DirectRec,1) = 'USER'
        then do
            NextUser = word(DirectRec,2)
            iterate
        end
/*  Look for the mini-disk records on the directory for the last     */
/*  user which was saved.                                            */
        if word(DirectRec,1) = 'MDISK'
        then do
/*  If there are less than 9 word strings on the directory record    */
/*  for an MDISK record then there are no passwords and it is        */
/*  useless to save the info since we can't link to the mini-disk.   */
            if words(DirectRec) < 9 then iterate
/*  We don't bother with the mini-disks for the various system users.*/
            select
                when NextUser = 'GCS'      then iterate
                when NextUser = 'MAINT'    then iterate
                when NextUser = 'OPERATOR' then iterate
                when NextUser = 'RSCS'     then iterate
                when NextUser = 'VMBACKUP' then iterate
                when NextUser = 'VMRMAINT' then iterate
                when NextUser = 'VTAM'     then iterate
                otherwise nop
            end
/*  We can now build a table record for the last mini-disk record    */
/*  read from the directory.                                         */
            i = i + 1
            j = i // 50
            if j = 0 then say '.....still loading table.....'
            Userid.i = NextUser
            Mdisk.i  = right(word(DirectRec,2),3)
            RPswd.i  = word(DirectRec,8)
/*  Check and see if there is a multiple password and save it in     */
/*  the table, otherwise create a blank entry.                       */
            if words(DirectRec) < 11
            then do
                MPswd.i = ''
            end
            else do
                MPswd.i = word(DirectRec,10)
            end
        end
    end
/*  The table has been loaded so let's save the size of the memory   */
/*  table.                                                           */
    TableSize = i
/*  We'll de-link mini-disk address 500 just in case one exists.     */
    'EXECIO * CP (SKIP STRING DETACH 500'
/*  Now we start going through the table of user-ids and we look for */
/*  the name of the CMS file we want to find.                        */
    'VMFCLEAR'
    do i = 1 to TableSize
/*  Let's check and see if the user is logged on before we try and   */
/*  do a multiple link to his/her disk. We should also do a read     */
/*  link if there is no multiple password to the mini-disk.          */
        'EXECIO * CP (SKIP STRING QUERY' Userid.i
        if rc = 0 | MPswd.i = ''
        then do
/*  User is logged on or disconnected, so we'll do a read link to    */
/*  the disk so as not to screw it up.                               */
            LinkType = 'READ'
            'EXECIO * CP (SKIP STRING LINK' Userid.i Mdisk.i '500 RR',
                RPswd.i
            if rc ¬= 0
            then do
                call BadLink rc
                iterate
            end
        end
        else do
/*  User not logged on so we can do a multiple link to the disk.     */
            LinkType = 'MULTIPLE'
            'EXECIO * CP (SKIP STRING LINK' Userid.i Mdisk.i '500 M',
                MPswd.i
            select
                when rc = 0 then nop
/*  A 105 return code means that another user has disk in write.     */
                when rc = 1105
                then do
                    LinkType = 'READ'
                    'EXECIO * CP (SKIP STRING LINK' Userid.i Mdisk.i,
                        '500 RR' RPswd.i
                end
                otherwise do
                    call BadLink rc
                    iterate
                end
            end
        end
/*  Now that we've linked to the disk, let's access it.              */
        'SET CMSTYPE HT'
        'ACCESS 500 P'
        AccessRC = rc
        'SET CMSTYPE RT'
        if AccessRC ¬= 0
        then do
            call BadAccess AccessRC
            'EXECIO * CP (SKIP STRING DETACH 500'
            iterate
        end
/*  Now that we've linked to the disk, display the link info on the  */
/*  terminal and then do a LISTFILE for the file to be found.        */
        RecDisp = left(Userid.i,10),
                  left(Mdisk.i,5),
                  left('Mode='||LinkType,20)
        say RecDisp
        'MAKEBUF'
        'LISTFILE' FName FType 'P (STACK FIFO DATE'
        if rc = 0
        then do
/*  Now we will write out the details of the found file.             */
            do queued()
                pull FileData
                parse var FileData Name Type . . . NoRec NoBlk Date .
                parse var Date mm '/' dd '/' yy
                mm = right(mm,2,'0')
                dd = right(dd,2,'0')
                Date = yy'/'mm'/'dd
                OutRec = left(Userid.i,8),
                         left(Mdisk.i,5),
                         left('Mode=',5)||left(LinkType,10),
                         left(Name,8),
                         left(Type,8),
                         left(NoRec,6),
                         left(NoBlk,6),
                         left(Date,8)
                'EXECIO 1 DISKW' Report '(STRING' OutRec
            end
        end
        'DROPBUF'
/*  Release and detach the user's mini-disk.                         */
        'RELEASE P'
        'EXECIO * CP (SKIP STRING DETACH 500'
    end
/*  That's all so let's close our data file and get out of the       */
/*  program.                                                         */
    'FINIS' Report
    exit
/*  The following routine is called if an invalid return code is     */
/*  received during a link to a user's mini-disk.                    */
BadLink:
    arg RetCode
    OutRec = 'Invalid Link: rc='||RetCode 'User='||Userid.i,
        'Minidisk='||Mdisk.i
    'EXECIO 1 DISKW' Report '(STRING' OutRec
    return
/*  The following routine is called if an invalid return code is     */
/*  received during an access to a user's mini-disk.                 */
BadAccess:
    arg RetCode
    OutRec = 'Invalid Access: rc='||RetCode 'User='||Userid.i,
        'Minidisk='||Mdisk.i
    'EXECIO 1 DISKW' Report '(STRING' OutRec
    return

Figure 1 shows a sample of the output file. Note that only user-ids
for which the file was found are displayed on the report.
From left to right the fields displayed are the VM user-id, the
mini-disk address, the access mode, the filename and type, the
number of records and blocks in the file, and the creation or
last modification date of the file. The first record is a reminder
of what was being searched for.

John Purdie
Assistant Manager - Technical Support
Export Development Corporation (Canada)

