 EXEC basics

ÝEditor's note: the following article offers some hints and tips to those who
are new to coding EXECs.¨

The following ideas have come about through my work in computer operations over
the last few years.  They are not intended to be an end in themselves, but,
rather to inspire thought about writing better CMS EXECs.

Regardless of programming styles, there are one or two points which, if adhered
to, make life easier all round.  Firstly, there is the question of variable
names.  It may well be tempting to call variables by all sorts of names, but
names which have some meaning are more useful.

Similarly, there is the question of label names.  Once again, there is very
little to be gained from coding an EXEC with labels which no one else can
understand.  (Try calling display routines 'Display', or 'Dsply'; sorting
routines 'Sort', or 'Srt', etc.)  Remember that it will not necessarily be the
author who maintains CMS EXECs.  Therefore, a few well-placed comments would not
go amiss, eg:

   /* Sserv set-up routine */
         CP LINK VSE1 245 245 RR RPASSWORD    /* SYSRES */
         ACC 245 Z
         SET DOS ON Z
         ASSGN SYSSLB Z
         CALL INPUT_2              /* Branch to input Dlbl */
         'DLBL IJSYSSL Z DSN 'DSN' (SYSSLB'

My personal opinion is that multiple statements that are logically related may
be entered upon the same line, with no less readability.  In the following
example the second and third statements may be combined, as a space-saving
exercise, eg:

   CP LINK VSEUSERID 245 245 RR RPASSWORD        /* Sysres */
   ACC 245 Z                                     /* Access disk */
   SET DOS ON Z '(VSAM'                          /* Dos = On */

Becomes:

   CP LINK VSEUSERID 245 245 RR RPASSWORD
   ACC 245 Z ; SET DOS ON Z '(VSAM'

Operating within an environment where CMS mini-disks are of a limited size, this
technique can be very helpful.  However, it would be very easy to get carried
away with the idea, eg:

   TRACE O;CP Q V 245;IF RC=0;THEN 'DET' 245;ELSE 'CP LINK
   VSEUSERID 245 245 RR'

Many CMS EXEC do not have adequate error-trapping,which is a shame, since it is
very easy to rectify.

   -Input    &Begtype -Meg
         * *** What day is it to-day ? *** *
         * ***   Mon, Tue, Wed, Etc.,  *** *
   -Msg
             &Read Vars &Day
             &Goto -&day
   -Mon
   .
   .
   .
   -Tue
   .
   .
    .
   (Etc)

In the above example the expression '-&Day' is quite valid, and will return
values of '-Mon', '-Tue', etc assuming that the input is correct.  However,
should the input be incorrect (say, the operator enters 'Wef'), the statement
'&goto -&Day' will be interpreted as '&goto -Wef', which is a non-existent
label, causing the EXEC to crash with a message to that effect.  To overcome
this problem, it is possible to test the input further so that a new test will
test the variable &Day, searching for data which conforms to the required input.
Should this not be found, control is passed to '-Input'.  Also, it can be useful
if the operator is given the option of aborting the EXEC.  (To abort an EXEC by
causing a re-IPL of CMS is not only messy, it is also undesirable where files
are updated during job execution, or if extra mini-disks are accessed.)

I recall a problem involving DMS Panel-Manager, wherein several fields were to
be displayed, but only one was to be acted upon - similar to the problem of
reading in days of the week.  In this case, it was fairly straightforward to set
a variable to zero, and increment it, as data was read in from the panel.  The
following conditions were then tested:

%    Variable has value  = '0'     -    Null input, abort processing
%    Variable has value  = '1'     -    one entry from panel - continue job
execution
%    Variable has value  > '1'     -    Multiple input - redisplay input prompt

(The variable was called, surprisingly enough, 'Flag'.)

This idea of flagging input may be used as follows:

   Input:   Pull Input
   Flag = C2X(INPUT)
   If ((Flag < 'C6D9C9') & (Flag > 'E6C5C4')) ,
     Then signal input ; Else Nop

Note that this routine does not actually direct control to any particular line
in itself, it is merely intended to ensure that the input conforms to the
required format.

M A Shears (UK)     ) Xephon 1987


























