Automatic relog of service machines

Many VM virtual machines perform important system services
and functions, and should be logged on at all times. Some
others may be off the system when a maintenance user is
active, or may be useless if some other required user is not
currently active.

Various system monitoring packages include the ability to warn
an operator if such important machines are not logged on. We
decided to utilize the VM PROP (programmable operator)
function to keep track of, and, if necessary, to autolog such
machines.

When the VM system is IPLd, the AUTOLOG machine does
an initial autolog of the required service machines. The PROP
user then monitors every log-off of a disconnected user. The
assumption here is that if the machine was connected at log-off
time, then some authorized person has taken responsibility for
logging the machine on again.

The PROP routing table executes the RELOG EXEC, which
receives a stacked line containing the name of the user logging
off. (This is a standard PROP function - it stacks the line
which caused the EXEC to be run.) An example of the table is
shown in Figure 1.

The RELOG EXEC will verify that the user under discussion is
in fact a controlled user, if not there is nothing to be done. If
the user-id is listed as a controlled user, RELOG will check the
conditions which might prevent an automatic relog of the user,
and if no such condition exists, it will autolog the virtual
machine.

The conditions preventing relog are: the user is in a log-off
loop, ie it has been continually logging off after each log-on (5
times within the last 5 minutes); another user-id, which needs
to be off the system, is currently logged on; another user-id,
which needs to be disconnected or logged off, is currently
connected; another user-id, which needs to be logged on, is
currently logged off.

Without too much difficulty, additional conditions may be
added to the EXEC by defining more tables and adding the
code to check them, based on the existing checks.

All tables are kept in GLOBALV, in the RELOG group: a table
of controlled users, and the tables of conditions for each
controlled user.

If the EXEC is running under VM/SP it will use AUTOLOG to
relog users, under VM/XA and ESA systems it will use
XAUTOLOG.

Additional functions of the RELOG EXEC are available to
users with 'CMD' rights in the PROP routing table. Such users
can send messages to the operator causing it to add or delete
users or their associated conditions from the relog tables.
Authorized users can also receive listings of the controlled
users and their conditions.

If the request to relog is '?' or 'Q', it will display the correct
usage of the EXEC (see sample screens in Figures 2 and 3).

In order to improve performance, the EXEC is compressed
using EXECUPDT with options NOUPDATE
NOCOMMEMTS, and it is EXECLOADed in the PROP user's
profile.


RELOG $EXEC

/* REXX */
TRACE N /* REXX */
IF       QUEUED() ¬= 0            /* CALLED BY PROP ROUTING TABLE */
    THEN PULL LTIM . LTRM 'LOGOFF' . LID . '=' . LBY .
         /* WHO   - LID
            WHAT  - LOGGED OFF
            WHERE - LTRM
            WHEN  - LTIM
            WHY   - LBY
         */
ARG CODE CODEPRM             /* CODES FOR TABLE-CHANGE REQUESTS */
        /*                     +-                     -+
                 ( ADD )       | ( NOTLOG ) +-      -+ |
           RELOG ( DEL ) <UID> | ( NOTCON ) | <UID2> | |
                 ( LIST)       | ( NEEDLG ) +-      -+ |
                               +-                     -+
        */
/* WARNING! IF RELOGID. ARRAY IS INCREASED, YOU MUST:
   1) RESAVE RELOGID.0 AS CORRECT NUMBER OF RELOGID. VARIABLES
   2) ADD ANOTHER " RELOGID.N " TO THE LOGLIST ASSIGNMENT THAT FOLLOWS:
   3) ADD ANOTHER " 'RELOGID.N', " RECORD TO THE FOLLOWING STATEMENT:
*/
'GLOBALV SELECT RELOG GET',            /* PICK UP SOME INFO */
    'RELOGID.0',                       /* NUMBER OF RELOG VARIABLES */
    'RELOGID.1',                       /* USERS TO RELOG */
    'RELOGID.2',                       /* MORE USERS TO RELOG ... */
    'RELOGID.3',                       /* MORE USERS TO RELOG ...     */
    'LASTLOG.'LID                      /* TIME OF USER'S LAST LOG-OFF */
LOGLIST = RELOGID.1 RELOGID.2 RELOGID.3   /* AND MORE AS NEEDED ....  */
IF       CODE ¬= 'CP'             /* IF CALL WITH CODE, (NOT BY PROP) */
    THEN SIGNAL RLG_CODES
/* HERE WE TRY TO TAKE CARE OF LOGGED OFF USER QUICKLY                */
/* IS USER A CONTROLLED USER? IF NOT, LEAVE HIM OFF, AND JUST EXIT    */
IF       FIND(LOGLIST, LID) = 0
    THEN EXIT                          /* IF NOT CONTROLLED USER      */
/* NOW WE NEED TO CHECK IF THERE IS ANY REASON -NOT- TO LOG HIM
   BACK ON.
   REASONS ARE:
   1) USER SELF-LOGGED OFF (WAS NOT DISCONNECTED AT LOG-OFF TIME).
   2) TOO MANY LOG-OFFS TOO FAST.
   3) USER WHO SHOULD BE LOGGED OFF, IS LOGGED ON.
   4) USER WHO SHOULD BE DISCONNECTED, IS CONNECTED.
   5) USER WHO SHOULD BE LOGGED ON, IS LOGGED OFF.
*/
IF       LTRM ¬= 'DSC'                 /*SELF LOG-OFF IS NOT RELOGGED */
    THEN CALL NORELOG 'WAS NOT DISCONNECTED'
IF       FASTONOFF()                   /* ON AGAIN/OFF AGAIN          */
    THEN CALL NORELOG 'HAS LOGGED OFF' NW 'TIMES IN' SECD%60 'MIN.'
IF       ¬LOGCOND()                    /* ENVIR. CONDITIONS NOT GOOD  */
    THEN CALL NORELOG CONDMSG
/* NO REASON FOUND TO PREVENT LOG-ON, SO - DO IT!                     */
CALL DORELOG                       /* RELOG, UPDATE TIMES, MSG TO LOG */
EXIT
 /* */
LOGCOND:       /* FUNCTION, RETURNS BOOLEAN:                          */
               /* 1 - LOG-ON CONDITIONS ACCEPTABLE, PERFORM AUTOLOG   */
               /* 0 - LOG-ON CONDITIONS UNACCEPTABLE, NO AUTOLOG      */
/* TABLES: NOTLOG - USERS NOT LOGGED ON, IF 1 IS LOGGED ON, NO AUTOLOG*/
/*         NOTCON - USERS NOT CONNECTED, IF 1 IS CONN, DO NOT AUTOLOG */
/*         NEEDLG - USERS NEEDED LOGGED ON, IF NOT, DO NOT AUTOLOG    */
'GLOBALV SELECT RELOG GET',            /* GET USER'S CONDITION TABLES */
    'NOTLOG.'LID,
    'NOTCON.'LID,
    'NEEDLG.'LID
IF       NOTLOG.LID NOTCON.LID NEEDLG.LID = ''    /* NO RULES DEFINED */
    THEN RETURN 1                      /* IF NO RULE, DO AUTOLOG      */
/* FIRST SCAN NOTLOG LIST */
DO       NL = 1 TO WORDS(NOTLOG.LID)   /* SCAN 'NOTLOG' LIST          */
    NLOGID = WORD(NOTLOG.LID, NL)      /* USER-ID                     */
    PARSE VALUE DIAGRC(8,'Q' NLOGID),  /* Q USER-ID                   */
         WITH LRC .
    IF        LRC = 0                  /* USER IS LOGGED ON           */
         THEN DO
              CONDMSG = NLOGID 'IS CURRENTLY LOGGED ON'
              RETURN 0                 /* DON'T AUTOLOG               */
              END
END
/* NOW   SCAN NOTCON LIST */
DO       NC = 1 TO WORDS(NOTCON.LID)   /* SCAN 'NOTCON' LIST          */
    NCONID = WORD(NOTCON.LID, NC)      /* USER-ID                     */
    PARSE VALUE DIAGRC(8,'Q' NCONID),  /* Q USER-ID                   */
         WITH LRC . '-' WHEREATT . '15'X
    IF        LRC = 0,                 /* USER IS LOGGED ON */
         &    WHEREATT ¬= 'DSC'        /* USER IS CONNECTED */
         THEN DO
              CONDMSG = NCONID 'IS LOGGED ON AND CONNECTED'
              RETURN 0                 /* DON'T AUTOLOG               */
              END
END
/* NOW   SCAN NEEDLG LIST */
DO       ND = 1 TO WORDS(NEEDLG.LID)   /* SCAN 'NEEDLG' LIST          */
    NDLGID = WORD(NEEDLG.LID, ND)      /* USER-ID                     */
    PARSE VALUE DIAGRC(8,'Q' NDLGID),  /* Q USER-ID                   */
         WITH LRC .
    IF        LRC ¬= 0                 /* USER IS NOT LOGGED ON       */
         THEN DO
              CONDMSG = NDLGID 'IS CURRENTLY NOT LOGGED ON'
              RETURN 0                 /* DON'T AUTOLOG               */
              END
END
RETURN 1                               /* DID NOT FAIL ANY TESTS      */
 /* */
NORELOG:                   /* ROUTINE TO EXIT WITHOUT RELOG, WITH MSG */
ARG MSG                                /* GET REASON                  */
'CP M * RELOG:' LID 'NOT LOGGED ON, USER' MSG
EXIT
 /* */
FASTONOFF:                             /* IS USER LOGGING ON/OFF FAST?*/
NW = WORDS(LASTLOG.LID)                /* NUMBER OF RECORDED LOG-OFFS */
LDAT = DATE('E')                       /* CURRENT DATE                */
IF       NW < 5                        /* RELOG IS STILL OK           */
    THEN RETURN 0
/*  WORDS(LASTLOG.LID) >= 5 */
PARSE VALUE WORD(LASTLOG.LID, 1) WITH, /* WHEN WAS OLDEST LOG-OFF?    */
    DATE1 '-',                         /* OLDEST LOG-OFF DATE         */
    HH1':'MM1':'SS1 .                  /* OLDEST LOG-OFF TIME         */
/* SECONDS DISPLACEMENT OF OLDEST LOG-OFF */
SEC1 = SS1 + (MM1*60) + (HH1*3600)
PARSE VALUE WORD(LASTLOG.LID, NW) WITH,/* WHEN WAS LATEST LOG-OFF?    */
    DATEN '-',                         /* LATEST LOG-OFF DATE         */
    HHN':'MMN':'SSN .                  /* LATEST LOG-OFF TIME         */
/* SECONDS DISPLACEMENT OF LATEST LOG-OFF */
SECN = SSN + (MMN*60) + (HHN*3600)
SECD = SECN - SEC1                     /* DIFFERENCE                  */
IF       SECD < 300,                   /* N LOG-ONS IN 5 MINUTES      */
    &    DATE1 = DATEN                 /* ALL IN THE SAME DAY         */
    THEN DO
         'CP M * RELOG: LOG-OFF HISTORY FOR' LID 'FOLOWS:'
         'CP M * RELOG:' LASTLOG.LID
         LASTLOG.LID = ''              /* NO LOG-ON, ERASE OLD TIMES  */
         RETURN 1
         END
    ELSE RETURN 0
RETURN 99
 /* */
DORELOG:
/* RECORD THIS LOG-OFF IN CASE HE'S LOOPING */
LASTLOG.LID = LASTLOG.LID LDAT'-'LTIM  /* ADD TO RECORD               */
DO       WHILE WORDS(LASTLOG.LID) > 5
    LASTLOG.LID = DELWORD(LASTLOG.LID, 1, 1); END   /* DELETE OLD TIME*/
'GLOBALV SELECT RELOG PUT LASTLOG.'LID /* TIME OF THIS LOG-OFF        */
/* RECORD THE FACT */
'CP M * RELOG: AUTOLOGGING' LID
/* PERFORM THE RELOG */
'CP SLEEP 1 SEC'               /* NOT NICE! BUT WE DONT WANT HCP361E  */
PARSE VALUE DIAG(0) WITH +24 SPBYTE +1      /* HIGH BIT IS 1 IN VM/SP */
IF  BITAND(SPBYTE, '80'X) = '00'X    THEN 'CP XAUTOLOG' LID
    ELSE 'CP AUTOLOG' LID
RETURN
 /* */
RLG_CODES:
/*        ADD|DEL RLGUID CONDTYP CONDUID */
PARSE VAR CODEPRM RLGUID CONDTYP CONDUID .
MSG = ''
SELECT                                 /* CHECK ERROR CONDITIONS      */
WHEN     CODE = '?'  |  CODE = 'Q'
    THEN CALL RELOGHELP
WHEN     WORDPOS(CODE, 'ADD DEL LIST') = 0            /* UNKNOWN CODE */
    THEN MSG = 'RELOG: INVALID CODE "'CODE'"'
WHEN     CODE = 'LIST'                         /* LIST NEEDS NO PARMS */
    THEN NOP
WHEN     RLGUID = ''                           /* NO RELOG UID        */
    THEN MSG = 'RELOG: USER NAME MISSING IN "RELOG' CODE'" FUNCTION'
WHEN     CONDTYP = ''                          /* NO TYPE = ADD USER  */
    THEN NOP
WHEN     WORDPOS(CONDTYP, 'NOTLOG NOTCON NEEDLG') = 0 /* INVALID TYPE */
    THEN MSG = 'RELOG: INVALID CONDITION TYPE "'CONDTYP'"'
WHEN     CONDUID = ''                          /* TYPE BUT NO CONDUID */
    THEN MSG = 'RELOG: CONDITIONAL USER NAME MISSING IN',
                       '"RELOG' CODE'" FUNCTION'
OTHERWISE NOP
END
IF       MSG ¬= ''
    THEN DO
         SAY MSG
         EXIT 8
         END
'GLOBALV SELECT RELOG GET NOTLOG.'RLGUID 'NOTCON.'RLGUID 'NEEDLG.'RLGUID
CONDLIST = NOTLOG.RLGUID NOTCON.RLGUID NEEDLG.RLGUID
SELECT
WHEN          CODE = 'LIST'
    THEN CALL LIST_RELOG
WHEN          CODE = 'ADD'  &  CONDTYP = ''
    THEN CALL ADD_USER
WHEN          CODE = 'ADD'
    THEN CALL ADD_COND
WHEN          CODE = 'DEL'  &  CONDTYP = ''
    THEN CALL DEL_USER
WHEN          CODE = 'DEL'
    THEN CALL DEL_COND
END  /* SELECT */
EXIT
 /* */
LIST_RELOG:
IF       RLGUID = ''
    THEN DO
         'PIPE VAR LOGLIST |',
              'SPLIT       |',
              'PAD 1       |',
              'CHANGE 1.1 / /LIST IS EMPTY/ |',
              'SPEC /RELOG USER:/ 1 1-* NEXTW | CONS'
         RETURN
         END
'GLOBALV SELECT RELOG GET NOTLOG.'RLGUID 'NOTCON.'RLGUID 'NEEDLG.'RLGUID
IF       NOTLOG.RLGUID NOTCON.RLGUID NEEDLG.RLGUID = ''
    THEN DO
         SAY 'RELOG: NO CONDITIONS DEFINED FOR USER "'RLGUID'"'
         RETURN
         END
IF       CONDTYP = ''
    THEN 'PIPE (END ?) VAR NOTLOG.'RLGUID '|',
               'SPLIT | PAD 1|',
               'CHANGE 1.1 / /LIST IS EMPTY/ |',
               'SPECS /NOTLOG.'RLGUID':/ 1 1-* NEXTW |',
               'A: FANIN     |',
               'CONS',
             '? VAR NOTCON.'RLGUID '|',
               'SPLIT | PAD 1|',
               'CHANGE 1.1 / /LIST IS EMPTY/ |',
               'SPECS /NOTCON.'RLGUID':/ 1 1-* NEXTW |',
               'A:',
             '? VAR NEEDLG.'RLGUID '|',
               'SPLIT | PAD 1|',
               'CHANGE 1.1 / /LIST IS EMPTY/ |',
               'SPECS /NEEDLG.'RLGUID':/ 1 1-* NEXTW |',
               'A:'
    ELSE 'PIPE (END ?) VAR' CONDTYP'.'RLGUID '|',
               'SPLIT        |',
               'PAD 1        |',
               'CHANGE 1.1 / /LIST IS EMPTY/ |',
               'SPECS /'CONDTYP'.'RLGUID':/ 1 1-* NEXTW |',
               'CONS'
RETURN
 /* */
ADD_USER:
IF       WORDPOS(RLGUID, LOGLIST) ¬= 0      /* USER ALREADY INCLUDED  */
    THEN DO
         SAY 'RELOG: USER' RLGUID 'ALREADY IN RELOG LIST'
         EXIT 8
         END
/* FIND TABLE ENTRY WITH ROOM */
DO       RI = 1 TO RELOGID.0 UNTIL WORDS(RELOGID.RI) < 20; END
/* IF ALL RELOGID. ENTRIES ARE FULL, ADD ANOTHER BY:
   1) INCREASE VALUE OF RELOGID.0
   2) ADD ANOTHER LINE TO 'GLOBALV GET' AT START OF THIS EXEC
   2) ADD ANOTHER RELOGID. TO THE LOGLIST= ASSIGNMENT AFTER THE 'GET'.
*/
IF       RI > RELOGID.0
    THEN DO
         SAY 'RELOG: UNABLE TO ADD USER "'RLGUID'", RELOG TABLES FULL'
         EXIT 8
         END
RELOGID.RI = STRIP( RELOGID.RI RLGUID )
'GLOBALV SELECT RELOG PUTP RELOGID.'RI
RETURN
 /* */
ADD_COND:
SELECT
WHEN CONDTYP = 'NOTLOG' THEN OLDCOND = NOTLOG.RLGUID
WHEN CONDTYP = 'NOTCON' THEN OLDCOND = NOTCON.RLGUID
WHEN CONDTYP = 'NEEDLG' THEN OLDCOND = NEEDLG.RLGUID
END  /* SELECT */
IF       WORDPOS(CONDUID, OLDCOND) ¬= 0      /* USER ALREADY INCLUDED */
    THEN DO
         SAY 'RELOG: USER' CONDUID 'ALREADY IN' ,
                     CONDTYP 'LIST FOR USER' RLGUID
         EXIT 8
         END
IF       WORDS(OLDCOND) >= 25
    THEN DO
         SAY 'RELOG:' CONDTYP 'LIST FOR USER' RLGUID 'ALREADY FULL'
         EXIT 8
         END
NEWCOND = STRIP(OLDCOND CONDUID)
'GLOBALV SELECT RELOG SETLP' CONDTYP'.'RLGUID NEWCOND
RETURN
 /* */
DEL_USER:
IF       WORDPOS(RLGUID, LOGLIST) = 0      /* USER NOT INCLUDED       */
    THEN DO
         SAY 'RELOG: USER' RLGUID 'IS NOT IN RELOG LIST'
         EXIT 8
         END
/* FIND TABLE ENTRY WITH THIS ENTRY */
DO       RI = 1 TO RELOGID.0,
         UNTIL WORDPOS(RLGUID, RELOGID.RI) ¬= 0; END
/* NOW DELETE IT */
RELOGID.RI = STRIP(DELWORD(RELOGID.RI, WORDPOS(RLGUID,RELOGID.RI), 1) )
'GLOBALV SELECT RELOG PUTP RELOGID.'RI
RETURN
 /* */
DEL_COND:
SELECT
WHEN CONDTYP = 'NOTLOG' THEN OLDCOND = NOTLOG.RLGUID
WHEN CONDTYP = 'NOTCON' THEN OLDCOND = NOTCON.RLGUID
WHEN CONDTYP = 'NEEDLG' THEN OLDCOND = NEEDLG.RLGUID
END  /* SELECT */
IF       WORDPOS(CONDUID, OLDCOND) = 0      /* USER NOT INCLUDED      */
    THEN DO
         SAY 'RELOG: USER' CONDUID 'IS NOT IN' ,
                     CONDTYP 'LIST FOR USER' RLGUID
         EXIT 8
         END
/* NOW DELETE IT */
NEWCOND = STRIP(  DELWORD(OLDCOND, WORDPOS(CONDUID,OLDCOND), 1)    )
'GLOBALV SELECT RELOG SETLP' CONDTYP'.'RLGUID NEWCOND
RETURN
 /* */
RELOGHELP:
PARSE SOURCE . . MEFN MEFT MEFM .
'PIPE',
    '<' MEFN MEFT '|',
    'INSIDE !"RLGHLPSTART"! !"RLGHLPEND"! |',
    'STRIP BOTH /"/ |',
    'CONS'
EXIT 100
"RLGHLPSTART"
"                      +-                     -+"
"        ( ADD )       | ( NOTLOG ) +-      -+ |"
"  RELOG ( DEL ) <UID> | ( NOTCON ) | <UID2> | |"
"        ( LIST)       | ( NEEDLG ) +-      -+ |"
"        ( Q | ? )     +-                     -+"
"RLGHLPEND"

Shimon Perez
VM Systems Programmer
Israel Police National HQ (Israel)                        c Israel Police 1992

