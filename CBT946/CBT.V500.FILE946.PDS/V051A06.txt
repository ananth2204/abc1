Informing users about failures

At our installation we frequently perform checks to make sure
that things are going as expected.  If not, we want someone to
know about the failure.  For many reasons, we generally
consider it unacceptable to inform the operator.  This EXEC is
a real workhorse for us.  It allows an EXEC which detects an
unusual condition to inform some user-id about the condition.
The notification can be either a CP MESSAGE or a spool file
which is sent to the user's virtual reader.  Thus, a designated
person is informed either immediately or (presumably) shortly
after he logs on.  A number of additional options are included
for convenience.

This EXEC sends a spool file which contains a one-line
message to another user's virtual reader.  It is invoked by
entering:

      INFORM <options> user-id message
      INFORM READER

Where:

      user-id                  is the user to receive the message

      message                 is the text of the message (limited to
                                    132 bytes)

      READER                  is totally distinct from all other
                                    functions.  It indicates that the user's
                                    reader is to be examined for INFORM
                                    notes (which were presumably sent by
                                    other users).  All such notes are
                                    displayed at the terminal and
                                    PURGED.

Options may be any of the following:

     DIST xxxxxxxx     indicates that the file is to be sent with
                                the specified distribution code.  If
                                omitted, the existing value (for 00E) is
                                used.

     FORM xxxxxxxx   indicates that the file is to be sent with
                               the specified forms-id.  If omitted, the
                               existing value (for 00E) is used.

      MSG                    indicates that a CP MESSAGE is to be
                                attempted first.  If the MESSAGE is
                                successful, no spool file will be sent.
                                This is a default.

     MSGNOH             is the same as MSG except that
                              MSGNOH is used.  The user-id of the
                              sending virtual machine and the time of
                              day will be added to the front of the
                              message text.  If this fails because the
                              user does not have privilege class A or
                              B, a MSG will be substituted.

     NODE=nodeid        is the node of the user to receive the
                                 message if it is not the local node.

     NOMSG                indicates that a CP MESSAGE is never
                                to be attempted.  A spool file will be
                                sent under all circumstances.

     ONLYDISC           indicates that the file is to be sent only
                               if the issuing user is disconnected.  If
                               the TYPE option is specified, the
                               message will be typed unconditionally.

     TYPE                    indicates that the message is to be
                                typed at the console in addition to
                                being sent to the specified user.

     VERIFY                indicates that an informative message
                                is to be typed at the console when (if) a
                                message or spool file is sent.  If not
                                specified, no indication of a successful
                                INFORM is issued.

The syntax of the above parameters is reasonably standard.
Keep in mind the following rules:

1      The user-id and message text must always be the last
      parameters and must be in that order.

2      The user-id is identified by the fact that it is something
      which is not one of the optional keywords.  Be careful,
      therefore, not to misspell any of the optional keywords.

3      The optional parameters may be in any order.

4      The message text may contains absolutely any characters
      you want.  (That's why the optional parameters are placed
      first.)

5      If READER is specified, it must be first.  Any other
      parameters will be ignored.

/*                   Tell Somebody About Something                    */
/*  Edit the optional parameters                                      */
address COMMAND
parse arg remaining_parms
       /*  We'll chip away at these until all words have been parsed  */
if translate(word(remaining_parms,1)) = 'READER' then
   signal inform_reader
              /*  This is totally distinct from all other processing  */
nodeid          = ''                                /*  Set defaults  */
option_dist     = ''
option_form     = ''
option_message  = 'MSG'
option_onlydisc = 0
option_type     = 0
option_verify   = 0
do forever                           /*  until the userid is reached  */
   parse var remaining_parms x remaining_parms
   upper x
   select
      when x = 'DIST' then do
         parse var remaining_parms x remaining_parms
         option_dist = translate(left(x,8))
         end
      when x = 'FORM' then do
         parse var remaining_parms x remaining_parms
         option_form = translate(left(x,8))
         end
      when x = 'MSG' then
         option_message = 'MSG'
      when x = 'MSGNOH' then
         option_message = 'MSGNOH'
      when left(x,5) = 'NODE=' then do
         nodeid = substr(x,6)
         if nodeid = '' then
            call exit '1 Nodeid for INFORM is null'
         IDENTIFY '(STACK LIFO'
         pull . . local_nodeid . rscs_userid .
         if local_nodeid = nodeid then
            /*  Treat as if NODE= had not been specified to avoid
                having RSCS reject it with message DMTAMX103E         */
            nodeid = ''
         end   /*  NODE=  */
      when x = 'NOMSG' then
         option_message = 'NO'
      when x = 'ONLYDISC' then
         option_onlydisc = 1
      when x = 'TYPE' then
         option_type = 1
      when x = 'VERIFY' then
         option_verify = 1
      otherwise                        /*  Assume this is the userid  */
         leave               /*  Thus endeth the optional parameters  */
   end   /*  select  */
end   /*  do forever  */
/*  Cross-check the optional parameters                               */
if nodeid ¬= '' & option_message ¬= 'NO' then do
   say 'INFORM option NODEID cannot be used with' option_message
   say option_message 'option ignored'
   option_message = 'NO'
   end
/*  Edit the required parameters                                      */
userid = x            /*  from the most recent "parse var" statement  */
message_text = remaining_parms
                 /*  Everything after the userid is the message text  */
if userid = '' then
   call exit '2 No userid was specified for INFORM'
if message_text = '' then
   call exit '3 No message text was specified for INFORM'
/*  Limit to 132 characters and remove trailing blanks if any         */
message_text = strip(left(message_text,132),'T')
/*  Type the message at the console if requested                      */
if option_type then
   say time() message_text
/*  Send the message via MSGNOH or MSG if specified                   */
if option_onlydisc then if connected() then
   exit 0
if option_message = 'MSGNOH' then do
   EXECIO '0 CP (STRING MSGNOH' userid userid() time() message_text
   if rc = 0 then
      call message_sent 'MSGNOH'                 /*  does not return  */
   end
if option_message ¬= 'NO' then do
                     /*  If MSGNOH was attempted and failed try MSG  */
   EXECIO '0 CP (STRING MSG' userid message_text
   if rc = 0 then
      call message_sent 'MSG'                    /*  does not return  */
   end
/*  Send the message via a reader file                                */
CP 'SPOOL 00E CLOSE'               /*  In case something is in limbo  */
/*  EXEC 'PRTSAVE'                            handy if you've got it  */
if nodeid = '' then do                   /*  NODE= was not specified  */
   CP 'SPOOL 00E TO' userid 'NOHOLD'
   if rc ¬= 0 then
      /*  The printer's TO/FOR and HOLD/NOHOLD attributes have not
          been changed                                                */
      call exit rc 'Invalid userid specified for INFORM'
   end
else do                                       /*  NODE was specified  */
   CP 'SPOOL 00E TO' rscs_userid            /*  to the user via RSCS  */
   CP 'TAG DEV 00E' nodeid userid
   end
spool_parms = 'NOCONT'
if option_dist ¬= '' then
   spool_parms = spool_parms 'DIST' option_dist
if option_form ¬= '' then
   spool_parms = spool_parms 'FORM' option_form
CP 'SPOOL 00E' spool_parms
EXECIO '1 PRINT (STRING' message_text
                                     /* Seems to use 00E at all times */
EXECIO '1 CP (VAR X STRING CLOSE 00E NAME INFORM'
                             /*  What could we use the filetype for?  */
if option_verify then do
   parse var x . . spoolid .       /*  PRT FILE nnnn TO xxxxxxxx ...  */
   say 'An INFORM message was sent to' userid 'using spoolid' spoolid
   end
/*  EXEC 'PRTREST'                            handy if you've got it  */
exit 0
/*                        INFORM READER                               */
inform_reader:
log_fileid        = 'INFORM LOG A1'
write_to_log_file = 'maybe'
inform_reader_more:                                /*  reentry point  */
orig_queued = queued()
EXECIO '1 CP (VAR X STRING QUERY VIRTUAL 00C'         /*  can't fail  */
reader_class = word(x,4)    /*  RDR 00C CL * NOCONT NOHOLD EOF READY  */
orig_reader_class = reader_class
EXECIO '* CP (BUFFER 76000 STEM QUERY. STRING QUERY READER * NOHOLD ALL'
select
   when rc = 0 then
      buffer_limit_reached = 0
   when rc = 1 then do                     /*  BUFFER limit exceeded  */
      buffer_limit_reached = 1
      say 'Your reader contains so many files that I can''t process '
      say 'them all. I''ll do the ones at the top of the queue.'
      end
   otherwise
      call exit rc 'Return code' rc 'from EXECIO QUERY READER'
end   /*  select  */
 inform_note_count = 0
  profs_note_count = 0
vmsched_note_count = 0
if query.0 > 50 & write_to_log_file = 'maybe' & connected() then do
   say 'You''ve got so many reader files that it might be more'
   say 'convenient for me to'
   say 'write (ie append) the inform notes to a disk file named '
   say 'INFORM LOG A1 instead of simply typing them at the console.'
   say 'Do you prefer this alternative?  Enter YES or NO'
   pull write_to_log_file
   end
do i = 2 to query.0
   parse var query.i originid spoolid class datatype . . . ,
      send_date send_time 54 fn 64 ft 73 dist_code .
   sent_on = 'sent on' send_date send_time
   select
      when fn = 'INFORM' then do
         inform_note_count = inform_note_count + 1
         call say_or_log 'INFORM message from' originid sent_on
         call order_and_spool
         call read_one_card                            /*  just once  */
         EXECIO '0 CP (STRING CLOSE 00C'        /*  results in PURGE  */
         end   /*  INFORM note  */
      when originid = 'VMSCHED' & ft = 'VMSCHED' then do
         vmsched_note_count = vmsched_note_count + 1
         call say_or_log 'VMSCHEDule notification' sent_on
         call order_and_spool
         do until rc ¬= 0                    /*  until EOF I presume  */
            call read_one_card
         end
         end   /*  VMSCHEDule note  */
      when profnote(query.i) then
         profs_note_count = profs_note_count + 1
      otherwise
         nop
   end   /*  select  */
end
/*  Final stuff                                                       */
if reader_class ¬= orig_reader_class then
   CP 'SPOOL 00C CLASS' orig_reader_class             /*  can't fail  */
if inform_note_count = 0 then
   say 'You have no INFORM notes'
else
   if buffer_limit_reached then do
      say 'Now restarting INFORM READER to process unprocessed files'
      signal inform_reader_more
      end
if profs_note_count > 0 then
   say 'By the way, you have' profs_note_count 'PROFS notes.'
if write_to_log_file = 'YES' then
   FINIS log_fileid
exit 0
/*                         Subroutines                                */
/*  Determine if there is a connected console                         */
connected:
EXECIO '1 CP (VAR X STRING QUERY VIRTUAL CONSOLE'
                                                 /* CONS 009 ON cuu ..*/
return word(x,3) ¬= 'DISCONNECTED'
                                   /* CONS 009 ON GRAF cuu TERM START */
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   say final_message
exit exit_rc
/*  A message has been successfully sent by MSG or MSGNOH             */
message_sent:
arg x .                                            /*  MSG or MSGNOH  */
if option_verify then
   say 'An INFORM message has been sent to' userid 'via' x
exit 0
/*  Issue an ORDER and SPOOL in preparation to read a specific file   */
order_and_spool:
 /*  There may be other spool files on NOHOLD ahead of this one       */
EXECIO '0 CP (STRING ORDER READER' spoolid
if reader_class = '*' | reader_class = class then
   return
CP 'SPOOL 00C CLASS' class                            /*  can't fail  */
reader_class = class
return
/*  The following routine works reasonably well at our installation.
    It may need to be modified for other PROFS systems.               */
profnote:
arg originid . . dev_type . 54 fn 64 ft 73 dist_code .
profs_dist_codes = 'CHAIN CL GSCHED PRIV VMSG' userid()
if dev_type ¬= 'PUN' then                  /*  can't be a PROFS note  */
   return 0
if find(profs_dist_codes,dist_code) > 0 then          /*  PROFS note  */
   return 1
if ft = 'NOTE' then          /*  from the CMS NOTE command I presume  */
   return 1
return 0                                        /*  Not a PROFS note  */
/*  Read one card from the virtual reader                             */
read_one_card:
EXECIO '1 CARD (VAR X'       /*  The actual text is exactly one line  */
select
  when rc = 0 then do
     if left(x,6) = ':READ ' then
        signal read_one_card                           /*  Ignore it  */
     call say_or_log '  ' strip(x,'B')
     end
  when rc = 2 then                                           /*  EOF  */
     nop                            /*  The file has now been PURGEd  */
  otherwise
     save_rc = rc
     say 'EXECIO CARD return code' rc 'when attempting to read spoolid',
        spoolid '- Placed on hold'
     EXECIO '0 CP (STRING CLOSE 00C HOLD'
     rc = save_rc
end   /*  select  */
return
/*  Issue a message using the appropriate means                       */
say_or_log:
parse arg the_message
if write_to_log_file = 'YES' then
   EXECIO '1 DISKW' log_fileid '0 V (VAR THE_MESSAGE'
                                                     /*  the_message  */
else
   say the_message
return
Dave Fraatz
Specialist
3M (USA)                                                c  Xephon 1990


