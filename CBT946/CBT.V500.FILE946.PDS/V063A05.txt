Test a REXX EXEC

In many cases, debugging an EXEC involves a number of steps
to set up a suitable environment prior to actually executing the
test.  If the EXEC cancels due to a simple REXX syntax error,
it can cause a duplication of effort to repeat the test.  The
XEDIT macro below allows an EXEC to be quickly tested for
syntax errors while it is being XEDITed.  If it fails, the EXEC
can be fixed immediately.  The full test may be run after the
preliminary test is successful.  This EXEC, obviously, cannot
test for logic errors, but it can test for common violations of
REXX syntax such as missing or extra 'end' statements.

I have found this macro to be useful when assigned to a PF
key.  While I would normally be thinking only about the
EXEC, it is handy to hit the PF key and allow the macro to
check for errors which may have been recently introduced.
Thus, the CPU and I are both debugging the EXEC at the same
time.

This XEDIT macro  temporarily writes the current file to disk
(using the name REXXTEST EXEC A3 without affecting the
current XEDIT session) and executes it with TRACE S in
effect.  There is no output unless there is a syntax error in the
EXEC, in which case you will see the standard REXX error
messages.  There are no parameters.

Items of interest:

o      This macro may be used against EXECs, XEDIT macros, etc.

o      Excluded lines will be included in the test

o      Lines outside of the RANGE will not be included in the test

o      The 'Alt' counter will not be changed

Unfortunately, it appears that (as of Release 5) certain syntax
errors are not detected while TRACE S is effect, leading this
macro to conclude incorrectly that there are no problems.  The
known examples of this are as follows:

o      A SELECT statement which contains no WHEN clauses
      (eg because you mistakenly used IF instead)

o      Unmatched parentheses in a function call.

Unfortunately, certain statements which are illegitimate are not
detected when TRACE S is in effect.  They may or may not be
detected when a program is interpreted and/or compiled.  They
may or may not be considered to be bugs and may or may not
be fixed by IBM.  For example:

o      A SELECT statement with a WHEN ... THEN followed
      by more than one statement (which is not a do ... end)

o      A SIGNAL statement for a label which does not exist or
      contains invalid characters.

Finally, because of the flexibility of REXX, certain
programming errors are treated by REXX, not as syntax errors,
but as (valid) environmental commands.  There is no practical
way for this macro to detect them.  For example:

o      When a continuation is missed, the second line will be
      treated as an environmental command.

o      When a REXX keyword is misspelled, the resulting
      statement will be probably be treated as an environmental
      command.


/* Test a REXX EXEC */
fileid = 'REXXTEST EXEC A3'
address COMMAND 'ERASE' fileid
PRESERVE
SET 'SCOPE ALL'
EXTRACT '/LINE/'                                     /*  Where am I?  */
'-* +1 EXTRACT /CURLINE/'
if pos('/*', curline.3) = 0 then do
   EMSG 'This is not a REXX EXEC'
   exit 0
   end
x = '/* */ SET CMSTYPE HT; trace s;' curline.3
EXECIO '1 DISKW' fileid '0 V (FINIS VAR X'
'-* +2 PUT *' fileid
CMS 'EXEC REXXTEST'                                 /*  a free ERASE  */
if rc = 0 then
   MSG 'This EXEC is syntactically valid'
else
   MSG 'Oh well - Back to the drawing board'
LOCATE ':'line.1              /*  Restore the original line position  */
RESTORE
exit 0

Dave Fraatz
Specialist
3M

