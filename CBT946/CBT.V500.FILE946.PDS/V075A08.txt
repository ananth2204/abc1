An SAA/CUA menu system for VM - continued

This month we continue the article describing an SAA/CUA
interface used to provide a multi-faceted menuing system.

/* Initialize some stuff */
if set_calendar = 'OFF' then call calendar
'COMMAND :1'
last_command. = ''
lc_ctr = 0
save_ctr = lc_ctr
action_area = '1 3'
cursor_locn = 'COMMAND'
/* Drive the screen */
do forever
   if queued() = 0 then do
      'GLOBALV SELECT BULLFLAG GET BULLFLAG'
      if bullflag ¬= '' then bull_flag = '  Check 'bullflag
                        else bull_flag = ' '
      address CMS 'GLOBALV SELECT CUAMENU GET Exit_mode'
      address CMS 'GLOBALV SELECT CUAMENU GET Level'
      if (Exit_mode = 'HOME') & (Level > 1) then call quit HOME
      if (Exit_mode = 'HOME') & (Level = 1) then
         address CMS 'GLOBALV SELECT CUAMENU SET Exit_mode NORMAL'
      call Chk_mail
   end
   'COMMAND READ NOCHANGE TAG'
   'COMMAND EXTRACT /CURSOR/LINE'
   parse pull Key_pressed therest
   select
      when Key_pressed = 'PFK' then do
         parse value therest with PF .
         if PF > 12 then PF = PF - 12
         select
            when PF = 1 then call Help
            when PF = 2 then call Toggle_folders
            when PF = 9 then call Retrieve
            when PF = 10 then call Action
            when (PF = 12) | (PF = 3) then call Quit
            otherwise call Msg 'You pressed an invalid key'
         end /* select */
      end /* do */
      when Key_pressed = 'RES' then do
         parse value therest with . . cmd_string
         cmd_string = strip(translate(cmd_string,' ','_'),'B')
         last_command.lc_ctr = cmd_string
         lc_ctr = lc_ctr + 1
         save_ctr = lc_ctr
         call execute_command
      end /* RES */
      when Key_pressed = 'ETK' then do
         'COMMAND EXTRACT /CURSOR/RESERVED *'
         linenum = cursor.1
         colnum = cursor.2
         select
         when linenum = word(command_area,1) then do
            if queued() = 0 then do
               tst_line = lscreen.1 - 2
               info = reserved.tst_line
               lc_ctr = save_ctr
               parse value info with . . . . . string
               cmd_string = substr(string,17,64)
               cmd_string = strip(translate(cmd_string,' ','_'),'B')
               if cmd_string ¬= '' then call execute_command
            end
         end
         when linenum = 1 then call action_bar_logic
         when linenum >=6 & linenum <=14 & colnum >53 then do
            if set_calendar = 'OFF' then call cal_window
                                    else do
                                       'EXEC GCAL'
                                       call urgent_msg
                                    end
            call create_folders
            call display_screen
         end
         when linenum = 6 | linenum = 8 | linenum = 10 then do
            if queued() ¬= 0 then 'DESBUF'
            if linenum = 6 then lcn = 44
            if linenum = 8 then lcn = 41
            if linenum = 10 then lcn = 38
        if substr(screen_line.linenum,lcn,1) = 'D' then front_folder = 3
        if substr(screen_line.linenum,lcn,1) = 'C' then front_folder = 2
        if substr(screen_line.linenum,lcn,1) = 'B' then front_folder = 1
        if substr(screen_line.linenum,lcn,1) = 'A' then
                                              front_folder = num_folders
            call toggle_folders
            'COMMAND CURSOR S 12 4'
         end
         when linenum = 12 then do
            if queued() ¬= 0 then 'DESBUF'
         end
         when linenum = lscreen.1 then do
            best = bestfit(colnum,1,10,28,39,52,69)
            interpret call linenum.lastline.best
         end
         when linenum > 12 & linenum < 22 then do
            rownum = linenum - 12
            address CMS command.front_folder.rownum
            'DESBUF'
         end
         otherwise nop
         end
      end /* ETK */
      otherwise call Msg 'You pressed an invalid key'
   end /* select */
end /* forever */
/* Procedures */
Chk_mail:
   mailmsg  = ''
   'EXECIO * CP (STEM LINE. STRING Q RDR ALL *'
   if line.0 > 1 then
      do z = 2 to line.0
         parse var line.z . . . . . . . . . . type dist
         type =  substr(type,1,3)
         if (index('BCHXXXYYY',type) ¬=0) | (dist = 'VMSG') then do
            mailmsg  = ' Mail Waiting '
            leave
         end
      end
   'COMMAND SET RESERVE 4 W H' left(bull_flag,20) right(mailmsg,59)
return
Msg: procedure
   parse arg Message
   if right(Message,1) ¬= '.' then Message = Message || ', please try again.'
   'COMMAND EMSG' Message
return
Retrieve: /* used by PF9 */
   lc_ctr = lc_ctr - 1
   cmd_string = last_command.lc_ctr
   call display_footer
return
Action: /* used by PF10 */
   select
   when cursor_locn = 'COMMAND' then do
      'COMMAND CURSOR S' action_area
      cursor_locn = 'ACTION'
   end
   when cursor.1 < lscreen.1-2 & cursor.1 > 2 then do
      'COMMAND CURSOR S' action_area
      cursor_locn = 'ACTION'
   end
   otherwise do
      'COMMAND CURSOR S' command_area
      cursor_locn = 'COMMAND'
   end
   end /* select */
return
Action_bar_logic:
   if queued() ¬= 0 then 'DESBUF'
   pfk_line = '¬2                                                   F12=Cancel'
   call display_footer
   cursor_locn = 'ACTION'
   select
   when colnum >= 3 & colnum <= 14 then do
      'COMMAND SET RESERVE 1 W H' ,
                         left('¬A ¬3Services ¬A ¬0Options ¬A ¬0Help',79)
      window.0 = 'R=2 C=3 H=9 W=25'
      window.1 = '¬5_ ¬01. Read Mail'
      window.2 = '¬5  ¬02. Send Note'
      window.3 = '¬5  ¬03. Calendar'
      window.4 = '¬5  ¬04. Time'
      window.5 = '¬5  ¬05. Weather'
      window.6 = '¬5  ¬06. Exit       F3'
      window.7 = '¬5  ¬07. Logoff'
      do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
         call display_window
         select
         when word(info.1,1) = 'PFK' then do
            if word(info.1,2) = '3' then call Quit
         end
         otherwise do
            if word(info.1,2) = '1' then 'EXEC OPENMAIL'
            if word(info.1,2) = '2' then 'PROFS NOTE'
            if word(info.1,2) = '3' then 'PROFS APPOINTM'
            if word(info.1,2) = '4' then call Show_time
            if word(info.1,2) = '5' then 'EXEC WEATHER'
            if word(info.1,2) = '6' then call Quit
            if word(info.1,2) = '7' then 'CP LOGOFF'
         end
         end /* select */
      end
      call close_window
   end
   when colnum >= 15 & colnum <= 25 then do
      'COMMAND SET RESERVE 1 W H' ,
                         left('¬A ¬0Services ¬A ¬3Options ¬A ¬0Help',79)
      window.0 = 'R=2 C=15 H=7 W=29'
      window.1 = '¬5_ ¬01. Menu...'
      window.2 = '¬5  ¬02. Set Note Options'
      window.3 = '¬5  ¬03. Set Personal Menu'
      window.4 = '¬5  ¬04. Set Synonyms'
      window.5 = '¬5  ¬05. Menu Title'
      do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
         call display_window
         select
         when word(info.1,1) = 'PFK' then nop
         otherwise do
            if word(info.1,2) = '1' then 'EXEC WMENUOPT'
            if word(info.1,2) = '2' then 'EXEC MYNICK'
            if word(info.1,2) = '3' then 'EXEC WITPMEN'
            if word(info.1,2) = '4' then
                                   address CMS 'XEDIT WITMENU $$SYNO$$'
            if word(info.1,2) = '5' then
                                   address CMS 'XEDIT WITMENU $$TITLE$'
         end
         end /* select */
      end
      call close_window
   end
   when colnum >= 26 & colnum <= 32 then call Help
   otherwise nop
   end /* select */
   pfk_line = orig_pfk_line
   call display_footer
   'COMMAND CURSOR S' action_area
return
Execute_command:
   cmd_string = strip(translate(cmd_string))
   char_one = substr(cmd_string,1,1)
   period = pos('.',cmd_string)
   bypass = pos('=',cmd_string)
   length = length(cmd_string)
   select
   when char_one = '.' then do
      call Msg 'Bad address: 'cmd_string
      'COMMAND CURSOR S' command_area
      return
   end
   when char_one = '=' then do
      if length > 1 then
         push 'RES R C' substr(cmd_string,2,length-1)
      if Level > 1 then call quit HOME
      return
   end
   when datatype(cmd_string) = 'CHAR' then do
      select
      when cmd_string = '' then do
         'COMMAND CURSOR S' command_area
         return
      end
      when datatype(substr(cmd_string,2,1)) = 'NUM' then do
         if length > 2 then do
            push 'RES R C' substr(cmd_string,4,length-1)
            cmd_string = substr(cmd_string,1,2)
         end
         cmd_string = translate(cmd_string,'12341234', 'ABCDabcd')
         front_folder = substr(cmd_string,1,1)
         cmd_string = substr(cmd_string,2,1)
         if cmd_string < 1 | front_folder > num_folders then return
         address CMS command.front_folder.cmd_string
         select
         when num_folders = 4 then
            front_folder = translate(front_folder,'1234','2341')
         when num_folders = 3 then
            front_folder = translate(front_folder,'123','231')
         when num_folders = 2 then
            front_folder = translate(front_folder,'12','21')
         otherwise nop
         end
         call toggle_folders
      end
      when cmd_string = 'EXIT' then call quit
      when cmd_string = 'LOG' then 'CP LOGOFF'
      when cmd_string = 'ABOUT' then call about
      when cmd_string = 'TIME' then call show_time
      when word(cmd_string,1) = 'NOTE' then 'PROFS' cmd_string
      when word(cmd_string,1) = 'HARDCOPY' then 'PROFS' cmd_string
      when word(cmd_string,1) = 'APPOINTM' then 'PROFS' cmd_string
      when words(cmd_string) > 1 then address CMS cmd_string
    when period = length then cmd_string = substr(cmd_string,1,length-1)
      when bypass < period & bypass ¬= 0 then do
         push 'RES R C' substr(cmd_string,bypass,length-bypass+1)
         cmd_string = substr(cmd_string,1,bypass-1)
      end
      when period < length & period ¬= '0' then do
         push 'RES R C' substr(cmd_string,period+1,length-period)
         cmd_string = substr(cmd_string,1,period-1)
      end
      otherwise do
         'MAKEBUF'
         'EXECIO * DISKR WITMENU $$SYNO$$ * 1 ,
                                    (FINIS FIND /'cmd_string'/ ZONE 1 8'
         if rc = 0 then do
            parse pull .
            parse pull . syn_string
            syn_string = strip(syn_string)
            if Level > 1 then syn_string = '=' || syn_string
            'DROPBUF'
            push 'RES R C' syn_string
         end
         else do
            'DROPBUF'
            address CMS cmd_string
         end
      end
      end /* select */
   end
   when datatype(cmd_string) = 'NUM' then do
      if cmd_string > 0 & cmd_string < 10 then
         address CMS command.front_folder.cmd_string
   end
   otherwise nop
   end /* select */
   cmd_string = ''
   call display_footer
   'COMMAND CURSOR S' command_area
return
Quit:
   arg code
   if code ¬= '' then
      address CMS 'GLOBALV SELECT CUAMENU SET Exit_mode' ,
                                                 code 'Level' Level - 1
   else
      address CMS 'GLOBALV SELECT CUAMENU SET Level' Level - 1
   if nbfile.1 > 1 then 'COMMAND QUIT'
                   else do
                      'DESBUF'
                      push 'COMMAND QUIT'
                   end
   exit
return
Display_footer:
   cmd_line = '¬0Command ===>¬5'left(cmd_string,63,'_')
   'COMMAND RESERVE' lscreen.1-1 'N' cmd_line
   'COMMAND RESERVE' lscreen.1 'N' pfk_line
   'COMMAND SET MSGLINE ON' lscreen.1-2 '1 O'
   command_area = lscreen.1-1 '15'
   'COMMAND CURSOR S' command_area
return
Bestfit:
   input_colnum = arg(1)
   last_address = arg(2)
   extra_entry = arg() + 1
   info.extra_entry = 81
   do i = 2 to arg()
      info.i = arg(i)
      if input_colnum > last_address & input_colnum < info.i then leave
      last_address = info.i
   end
return last_address
Show_time:
   ampm = 'AM'
   parse value time() with hrs ':' minutes ':' .
   if hrs >= 12 then ampm = 'PM'
   if hrs > 12 then hrs = hrs - 12
   tim = right(hrs||':'||minutes ampm,8)
   Call Msg 'The current time is:' tim', 'Date(W)', 'Date()'.'
return
Help:
   'COMMAND SET RESERVE 1 W H' ,
                        left('¬A ¬0Services ¬A ¬0Options ¬A ¬3Help',79)
   window.0 = 'R=2 C=26 H=8 W=28'
   window.1 = '¬5_ ¬2*. Help for help...'
   window.2 = '¬5  ¬02. Extended help...'
   window.3 = '¬5  ¬03. Keys help...'
   window.4 = '¬5  ¬2*. Help index...'
   window.5 = '¬5  ¬2           '
   window.6 = '¬5  ¬06. About...'
   do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
      call display_window
      select
      when word(info.1,1) = 'PFK' then nop
      otherwise do
         if word(info.1,2) = '2' then call Extnd_help
         if word(info.1,2) = '3' then call Keys_help
         if word(info.1,2) = '6' then call About
      end
      end /* select */
   end
   call close_window
return
Extnd_help:
   cmd_string = ''
   pfk_line = '¬2                    F7=Bkwd   F8=Fwd ',
                              '                              F12=Cancel'
   call display_footer
   start_line = 1
   window.0 = 'R=12 C=10 H=10 W=48'
   address COMMAND 'LISTFILE WITMAIN $$HELP$$ * (NOH DATE LIFO'
   parse pull . . . . . file_size .
   if queued() then 'DESBUF'
   address COMMAND 'EXECIO * DISKR WITMAIN $$HELP$$ * (STEM WIN.'
   do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
      do i = 1 to 8
         k = i + start_line - 1
         window.i = win.k
      end
      call display_window
      select
      when word(info.1,1) = 'PFK' then do
         if word(info.1,2) = '7' then do
            start_line = start_line - 8
            if start_line <= 0 then start_line = 1
         end
         if word(info.1,2) = '8' then do
            start_line = start_line + 8
            if start_line > file_size then start_line = start_line - 8
         end
      end
      otherwise nop
      end /* select */
   end
   call close_window
   pfk_line = orig_pfk_line
   call display_footer
return
Keys_help:
   cmd_string = ''
   pfk_line = '¬2                                                    F12=Cancel'
   call display_footer
   window.0 = 'R=11 C=12 H=12 W=22'
   window.1 = '¬0¬0   Keys Help'
   window.2 = '¬0¬0'
   window.3 = '¬0¬0F1=Help'
   window.4 = '¬0¬0F2=Toggle Menu'
   window.5 = '¬0¬0F3=Exit'
   window.6 = '¬0¬0F7=Bkwd'
   window.7 = '¬0¬0F8=Fwd'
   window.8 = '¬0¬0F9=Retrieve'
   window.9 = '¬0¬0F10=Action Bar'
   window.10 = '¬0¬0F12=Cancel'
   do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
      call display_window
      if word(info.1,1) = 'PFK' then nop
   end
   call close_window
   pfk_line = orig_pfk_line
   call display_footer
return
About:
   cmd_string = ''
   pfk_line = '¬2                   ',
           '                                                F12=Cancel'
   call display_footer
   window.0 = 'R=15 C=5 H=5 W=56'
   window.1 = '¬0¬0Whanderful Menu System (Version 1.1)'
   window.2 = '¬0¬0(c) Western Integrated Technologies Inc, 1991.'
   window.3 = '¬0¬3Contact Steve Whan (604-663-2068) for information.'
   do until word(info.1,1) = 'PFK' & word(info.1,2) = 12
      call display_window
      if word(info.1,1) = 'PFK' then nop
   end
   call close_window
   pfk_line = orig_pfk_line
   call display_footer
return
Find_esc_chars:
   arg string
   if strip(string) = '' then return 0
   string = translate(string)
   string = translate(string,"                                     ",
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'")
   string = translate(string,'                    ',
                                                '|-_()?!.;:,"+=/&$%#')
return words(string)
Display_window:
   parse value window.0 with 'R=' row 'C=' column 'H=' height 'W=' width
   i = strip(row)
   do k = 0 to height-1
      test_str = substr(screen_line.i,1,column)
      num_escl = find_esc_chars(test_str)
      last_char = substr(test_str,column,1)
      next_char = substr(test_str,column-1,1)
      select
         when last_char = '¬' then
                       lead = substr(screen_line.i,1,column-3+num_escl)
         when next_char = '¬' & num_escl = 1 then
                                lead = substr(screen_line.i,1,column-2)
         otherwise lead = substr(screen_line.i,1,column-2+num_escl)
      end
      test_str = substr(screen_line.i,column,width)
      num_esct = find_esc_chars(test_str)
      select
         when next_char = '¬' & num_esct = 1 then
                        trail = substr(screen_line.i,column+width+4,79)
         when num_esct = 3 then
                        trail = substr(screen_line.i,column+width+5,79)
         when num_esct = 2 then
                        trail = substr(screen_line.i,column+width+4,79)
         when num_esct = 1 then
                        trail = substr(screen_line.i,column+width+5,79)
         when num_esct = 0 & num_escl = 2 then
                        trail = substr(screen_line.i,column+width+5,79)
         when num_esct = 0 & num_escl = 1 then
                        trail = substr(screen_line.i,column+width+3,79)
         otherwise trail = substr(screen_line.i,column+width+2,79)
      end
      select
         when k = 0 & i = 2 then new_line = '¬2'substr,
                 (lead,1,length(lead)-1)||'¬2'TC || left(TS,width-1,TS),
                                                        ||TC'¬2-'trail
         when k = 0 then new_line = lead||'¬2'TC ,
                                   || left(TS,width-1,TS)||TC'¬6'trail
         when k = height-1 then new_line = lead||"¬2"BC ,
                                   || left(TS,width-1,TS)||BC"¬6"trail
         when substr(window.k,1,1) = ' ' then new_line = lead||'¬2'LS ,
                        || left(window.k,width-2,' ')||'¬2'RS'¬6'trail
         otherwise new_line = lead||'¬2'LS || left(window.k,width,
                                                 ' ')||'¬2'RS'¬6'trail
      end
      if new_line ¬= '' then 'COMMAND SET RESERVE' i 'N 'new_line
      i = i + 1
   end
   'COMMAND CURSOR S' row+1 column+2
   call wait_for_interrupt
return
Close_window:
   call header_1
   call header_2
   call display_screen
return
Wait_For_Interrupt:
   'COMMAND READ NOCHANGE TAG'
   'COMMAND EXTRACT /CURSOR/'
   do queued()
      parse pull key_pressed n1 . n3 .
      select
      when key_pressed = 'PFK' then info.1 = 'PFK' n1
      when key_pressed = 'RES' then info.1 = 'RES' n3
      when key_pressed = 'ETK' & cursor.1 = lscreen.1 then do
         best = bestfit(cursor.2,1,32,69)
         pfkey = linenum.helpline.best
         select
            when pfkey = 'Bkwd' then n1 = '7'
            when pfkey = 'Fwd' then n1 = '8'
            when pfkey = 'Quit' then n1 = '12'
            otherwise nop
         end
         info.1 = 'PFK' n1
      end
      when key_pressed = 'ETK' then info.1 = 'ETK' cursor.1 - 2
      otherwise nop
      end /* select */
   end
return

Editor's note: this article will be concluded next month.

Steve Whan                           c Western Integrated Technologies Inc 1992
System Programmer
Western Integrated Technologies Inc (Canada)

