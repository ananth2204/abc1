An information management facility using XEDIT

Some time ago our technical support staff decided that a forum
was needed for information exchange - a facility that would
provide information entry, display, update, and possibly other
capabilities.  But, at the same time, we were not looking for
marketed software because of cost considerations.  Another
concern was that the facility needed to be simple and
straightforward; a complicated mechanism was not preferred
since this was not an 'official' project (ie it was not a scheduled
project and was to be worked on only when time allowed).
Lastly, the facility must allow for multiple access by the staff,
possibly at the same time.  So, to summarize, the specifications
for our desired information management system were as
follows:

o      Must provide information entry, display, and update

o      Must provide possibility of other functional capabilities

o      Must be accomplished via a 'simple' technique

o      Must allow for concurrent access by all staff.


MENUS USING XEDIT

After some preliminary investigation, we stumbled upon the
concept of menus using XEDIT.  XEDIT can be used in
conjunction with REXX to generate fullscreen menus.  The
System Product Interpreter User's Guide has a section which
briefly tells how to implement a fullscreen menu with XEDIT
and REXX.  In the example an EXEC is used to invoke an
XEDIT session using an XEDIT profile.  The XEDIT profile is
what controls the content of the menu and the screen
interaction with the user (ie accepting input from the user).

A better example of this whole concept and, at the same time,
a more meaningful application, is accomplished by the
exhibited REXX EXEC and XEDIT profiles which together
compose a system for the entering, displaying, and updating of
reference data relating to published articles - something which
all data processing personnel are flooded with during the course
of time.  (Note: this system, although quite useable by itself or
as a base model, is just an example of what can be done using
XEDIT menus.  It is not currently in use by our staff as
presented in this article although a more functional version of
the application is utilized in our information management
system as alluded to later in this article.)  The system can be
used to store reference data about specific magazine (or other
source) articles - information like the title of the article and the
name of the publication.  In this way, a file is created
consisting of reference data for all articles deemed noteworthy
by the user.  The INFO EXEC is the 'driver' of the facility - it
merely invokes the XEDIT session on the datafile using the
proper XEDIT profile.  The profiles, as stated before, control
the content of the menu and the terminal interaction with the
user.  XEDIT profile INF$REFD displays a list of the reference
titles with scrolling capability via PF keys (see Figure 1).  By
selecting a specific entry or by opting to create a new entry, an
XEDIT session using profile INF$REFU will be invoked.  This
profile is responsible for the creation of a new reference or the
updating of an existing reference (see Figure 2).  So, just with
this simple design, a valuable tool can be provided for the
technical support programmer.  In addition, the capability is
there for the saving of more related data and/or the addition of
more functions (eg a HELP facility or a search capability) - all
this by just making source enhancements to the XEDIT
profiles.  The possibilities are endless - even a reporting
capability is conceivable (although for this system it probably
wouldn't be needed).


TECHNICAL MANAGEMENT FACILITY

Now, getting back to the original interest in an information
exchange vehicle for technical support, the idea of menus using
XEDIT provided all that was needed except for the concurrent
access.  In other words, we needed something that would allow
multiple CMS users to simultaneously have read and write
access to a CMS mini-disk.  Currently, our shop is a VM/SP
Release 5.0 environment, and there is no easy mechanism
which satisfactorily fulfills this requirement.  So, to meet this
need, we brought in a vendor product called VM/ACCESS
marketed by Enterprise Solutions Inc (our current release level
of VM/ACCESS is 3.21).  This product has worked very well
and provided the last piece of the solution to our quest.  The
end result (in actuality, it's still on-going with new
enhancements) is what's known in our shop as TMF - the
Technical Management Facility.  Figures 3-9 show some of the
full screen menus which make up this facility.  A brief
summary of the different information subsystems which
comprise TMF is as follows:

1      Problem Management - provides problem tracking with
      search and reporting capability

2      Network Management - provides display, update, and
      reporting of our network configuration

3      Software Management - provides complete software
      inventory display with cost and vendor contact information

4      Tape Management - provides technical support tape library
      display

5      Change Management - provides history of all system
      changes with search and archive capability

6      Document Management - provides creation, retrieval, and
      printing of technical support documents (including memos
      and letters)

7      Information Management - provides storage of computer
      article reference information with search capability.

An additional benefit of our in-house developed system is that
it allowed our installation to qualify for IBM's CSA (Corporate
Service Agreement) which entitled us to discounts on the
maintenance of our IBM equipment.  These discounts will save
our organization around $50 000 a year.

In conclusion, TMF has proved to be well worth the effort,
and, as time goes on, the benefits increase (for instance, in
problem determination, hours of debugging have been saved by
a quick search through the problem management subsystem).
XEDIT menus and VM/ACCESS have made our jobs a little
bit easier.  And, as in the case of many good things, we are
looking for more applications of this simple but very useful facility.


INFO EXEC

/**   INFO: Driver EXEC
***   Function-
***   To provide an information reference facility for technical
***   support personnel.  This EXEC is the driver.  It
***   provides the above facility by creating menus using XEDIT
***   through which a user can display, create, and update data.
***   Flow between the driver and the XEDIT profiles is maintained
***   via parameters passed through the program stack.
**/
address command
TRACE
/* initialize variables                                               */
 infscrn  = 'INFOLST'; infprof  = 'INF$REFD'
 infmsftp = 'SCRNDAT'; infmacc = 'A'; infwedit = '192'
/* main processing section                                            */
do forever
    'XEDIT' infscrn infmsftp infmacc '(PROF' infprof 'WIDTH' infwedit
    pull infscrn infprof
    if infscrn = 'INFQUIT' then leave
end
exit 0


INF$REFD XEDIT PROFILE

/**   INF$REFD : XEDIT PROFILE
***   Function-
***   To provide the interface for the information reference
***   display of the Information Reference Facility.
**/
TRACE
/* set XEDIT options                                                  */
extract '/lscreen'; set msgline on lscreen.1-2 1 overlay
set linend on '\'; set lrecl 192
set trunc 192; set tofeof off
set scale  off; set prefix off
set cmdline off; set case mixed
set ctlchar '%' escape; set ctlchar '@' protect white high
set ctlchar '"' protect blue nohigh; set ctlchar '!' protect red nohigh
set ctlchar '$' noprotect green high
/* initialize variables                                               */
message = ''; infofile = ''
maxinfo = 999; maxscrol = 0
bindex = 1
/* clear all map fields                                               */
intitle. = ''; indate. = ''
inname. = ''; insource. = ''
insdate. = ''; inkywrds. = ''
involume. = ''; inissue. = ''
inpgr1. = ''; inpgr2. = ''
/* get information reference data from file                           */
extract '/efname'
parse var efname.1 infofile
command down 1
do i = 1 to maxinfo by 1
    command next
    if rc = 1 then leave
    extract '/curline'
    if subword(curline.3,1,1) ='ENDENDENDENDENDENDENDENDENDENDENDENDEND'
     then leave
    parse var curline.3   intitle.i indate.i inname.i insource.i,
    insdate.i inkywrds.i involume.i inissue.i inpgr1.i inpgr2.i
    maxscrol = maxscrol + 1
end
/* main processing section - read user response                       */
linenum = 23;  colnum = 6              /* default cursor position     */
do forever
    call display_screen                /* display screen              */
    read nochange tag                  /* allow user input            */
    do queued()                        /* process stacked lines       */
        pull key line col str
        select
        when key = 'RES'               /* Reserved line input?        */
         then do
            str = translate(str,' ','_')
            if datatype(str,'N')       /* Numeric input?              */
             then do
                str = strip(str,'B',' ')
                index = strip(str,'L','0')
                if intitle.index Â¬= ''
                 then do
                    'DESBUF'
                    push index
                    push infofile 'INF$REFU'
                    command quit
                    exit rc
                   end
                else message = ' *** <INF$REFD>  Information',
                             'reference not available'
            end
        else message = ' *** <INF$REFD>  Input specification error'
    end
  when key = 'PFK'                     /* PF key pressed?             */
     then select
        when line = 3                  /* yes, PF3 - Quit             */
         then do
            'DESBUF'
            push 'INFQUIT'
            command quit
            exit rc
           end
        when line = 9                  /* yes, PF9 - New Entry        */
         then do
            'DESBUF'
            push '1 NEW'
            push infofile 'INF$REFU'
            command quit
            exit rc
        end
    when line = 7                      /* yes, PF7 - Backward         */
     then if bindex > 12
         then bindex = bindex - 12
        else message = ' *** <INF$REFD>  Invalid PF7 request'
    when line = 8                      /* yes, PF8 - Forward          */
     then if bindex < (maxscrol-11)
         then bindex = bindex + 12
        else message = ' *** <INF$REFD>  Invalid PF8 request'
      otherwise message = ' *** <INF$REFD>  Unsupported PF key'
    end
    when key = 'PAK'                   /* PA key pressed?             */
     then select
        when line = 2                  /* yes, PA2 - Quit             */
         then do
        'DESBUF'
        push 'INFQUIT'
        command quit
    exit rc
    end
    otherwise message = ' *** <INF$REFD>  Unsupported PA key'
    end
    when key = 'ETK'                   /* Enter key pressed?          */
     then nop                          /* ignore enter key            */
    when key = 'CMD'                   /* Command type input?         */
     then nop                          /* ignore                      */
    otherwise message = ' *** <INF$REFD>  Unsupported input function'
    end
    end
end
/* display screen                                                     */
display_screen:
/* set PF keys for xedit                                              */
    set pf1; set pf2; set pf3 x
    set pf4; set pf5; set pf6
    set pf7 x; set pf8 x; set pf9 x
    set pf10; set pf11; set pf12
    set pf13; set pf14; set pf15
    set pf16; set pf17; set pf18
    set pf19; set pf20; set pf21
    set pf22; set pf23; set pf24
    set pa2 x
    set reserved 1  noh '%"'date(U),
        '%@'center('Information Reference Facility',58),
        '%"'time()
    set reserved 2  noh '%@',
        center('Information Reference',
        'List',78),
        '%@'
    set reserved 3  noh
    set reserved 4  noh '%" Select the desired information reference ',
        'or use a specified PFKey.'
    set reserved 5  noh '%"'left('-',79,'-')
    set reserved 6  noh
    set reserved 7  noh '%!     Entry Date     Title'
    set reserved 8  noh
    do i = 0 to 11 by 1
    j = i + bindex
    if intitle.j Â¬= ''
     then set reserved i+9 noh '%@'right(j,3),
        '%"'left(indate.j,8),
        '%"     'left(translate(intitle.j,' ','*'),50)
    else set reserved i+9 noh
    end
    do j = 21 to lscreen.1-2
    set reserved j noh
    end
    set reserved lscreen.1-1 noh '%@==>%$___%" '
    set reserved lscreen.1 noh '%@ PFKEYS:  PF3=Return  PF7=BA',
       'PF8=FO '  PF9=New Entry'
    if message Â¬= ''                   /*   a message to display?     */
     then do
    emsg message
    message = ''
    end
    cursor screen linenum colnum
    return


INF$REFU XEDIT PROFILE

/**   INF$REFU : XEDIT PROFILE
***   Function-
***   To provide the information reference add/or update capability of
***   the Information Reference Facility.
**/
TRACE
/* retrieve input parms                                               */
parse pull index procflag
/* set XEDIT options                                                  */
extract '/lscreen'; set msgline on lscreen.1-2 1 overlay
set linend on '\'; set lrecl 192
set trunc 192; set tofeof off
set scale  off; set prefix off
set cmdline off; set case mixed
set ctlchar '%' escape; set ctlchar '@' protect white high
set ctlchar '"' protect blue nohigh; set ctlchar '!' protect red nohigh
set ctlchar '$' noprotect green high
/* initialize variables                                               */
message = ''; infofile = ''
maxinfo = 999; vmusrid = ''
/* clear all map fields                                               */
intitle. = ''; indate. = ''
inname. = ''; insource. = ''
insdate. = ''; inkywrds. = ''
involume. = ''; inissue. = ''
inpgr1. = ''; inpgr2. = ''
/* get information reference data from file                           */
extract '/efname'
parse var efname.1 infofile
if procflag = 'NEW'
 then do
    command down 1
    if rc = 1
     then do
          command input  '***D_U_M_M_Y___R_E_C_O_R_D***'
          command input  'ENDENDENDENDENDENDENDENDENDENDENDENDEND'
              end
          'USERID'
          pull . vmusrid .
          command top
          command down 1
          command input left('X',50,'X') date(U) vmusrid '| | | | | | |'
        end
command top
command down 1
do i = 1 to maxinfo by 1
    command next
    if rc = 1 then leave
    extract '/curline'
    if subword(curline.3,1,1) ='ENDENDENDENDENDENDENDENDENDENDENDENDEND'
     then leave
    parse var curline.3   intitle.i indate.i inname.i insource.i ,
     insdate.i inkywrds.i involume.i inissue.i inpgr1.i inpgr2.i
end
/* main processing section - read user response                       */
if procflag = 'NEW'
 then do
            linenum = 9; colnum = 11
    end
else
    do
        linenum = 13; colnum = 12
    end
do forever
    call display_screen                /* display screen              */
    read nochange tag                  /* allow user input            */
    do queued()                        /* process stacked lines       */
        pull key line col str
        select
            when key = 'RES'           /* Reserved line input?        */
             then do                   /* process input               */
                select
                when (line = 9) & (col = 11)
                 then if str Â¬= ' '
                     then intitle.index = space(str,1,'*')
                    else intitle.index = left('X',50,'X')
                    when (line = 13) & (col = 12)
                     then if str Â¬= ' '
                         then insource.index = space(str,1,'_')
                            else insource.index = '|'
                        when (line = 13) & (col = 53)
                         then if str Â¬= ' '
                             then insdate.index = space(str,1,'_')
                            else insdate.index = '|'
                        when (line = 14) & (col = 14)
                         then if str Â¬= ' '
                             then inkywrds.index = space(str,1,'_')
                            else inkywrds.index = '|'
                        when (line = 16) & (col = 12)
                         then if str Â¬= ' '
                             then involume.index = space(str,1,'_')
                            else involume.index = '|'
                        when (line = 16) & (col = 27)
                         then if str Â¬= ' '
                             then inissue.index = space(str,1,'_')
                            else inissue.index = '|'
                        when (line = 17) & (col = 9)
                         then if str Â¬= ' '
                             then inpgr1.index = space(str,1,'_')
                            else inpgr1.index = '|'
                        when (line = 17) & (col = 17)
                          then if str Â¬= ' '
                         then inpgr2.index = space(str,1,'_')
                        else inpgr2.index = '|'
                    otherwise message = ' *** <INF$REFU>  Input error'
                end
            end
        when (key = 'PFK') & (queued() > 0)   /*PFkey pressed & input?*/
         then do
            queue key line col str
            iterate
        end
    when key = 'PFK'                   /* PF key pressed?             */
     then select
        when line = 3                  /* yes, PF3 - Return           */
         then do
            'DESBUF'
            push infofile 'INF$REFD'
            command quit
            exit rc
            end
            when line = 10             /* yes, PF10 - Save            */
             then do
                'DESBUF'
                push infofile 'INF$REFD'
                command file
                exit rc
               end
               otherwise message = ' *** <INF$REFU>  Unsupported PF key'
                end
        when key = 'PAK'               /* PA key pressed?             */
             then select
                when line = 2          /* yes, PA2 - Quit             */
                 then do
                    'DESBUF'
                    push 'INFQUIT'
                    command quit
                    exit rc
                end
        otherwise message = ' *** <INF$REFU>  Unsupported PA key'
    end
    when key = 'ETK'                   /* Enter key pressed?          */
     then nop                          /* ignore enter key            */
    when key = 'CMD'                   /* Command type input?         */
     then nop                          /* ignore                      */
    otherwise message = ' *** <INF$REFU>  Unsupported input function'
    end
    end
    if key = 'RES'
     then do                           /* update file with valid input*/
        command top
        if procflag Â¬= 'NEW'
         then do
            command down 1
                command find intitle.index indate.index
            end
        else command down 2
        command replace   intitle.index indate.index inname.index,
                insource.index insdate.index inkywrds.index,
                involume.index inissue.index inpgr1.index,
                inpgr2.index
        end
end
/* display screen                                                     */
display_screen:
/* set PF keys for xedit                                              */
    set pf1; set pf2; set pf3 x
    set pf4; set pf5; set pf6
    set pf7; set pf8; set pf9
    set pf10 x; set pf11; set pf12
    set pf13; set pf14; set pf15
    set pf16; set pf17; set pf18
    set pf19; set pf20; set pf21
    set pf22; set pf23; set pf24
    set pa2 x
    i = index
    set reserved 1  noh '%"'date(U),
        '%@'center('Information Reference Facility',58),
        '%"'time()
    set reserved 2  noh '%@',
        center('Information Reference',
        'Update',78),
        '%@'
    set reserved 3  noh
    set reserved 4  noh '%" Update the info reference data as desired.'
    set reserved 5  noh '%"'left('-',79,'-')
    set reserved 6  noh
    set reserved 7  noh '%" Entry: %"'left(i,3)
    set reserved 8  noh
    if procflag = 'NEW'
     then set reserved 9  noh '%@ Title:',
        '%$'left(translate(intitle.i,' ','*'),50)
    else set reserved 9  noh '%" Title:',
        '%"'left(translate(intitle.i,' ','*'),50)
    set reserved 10 noh '%" Entry Date:',
        '%"'left(indate.i,8)
    set reserved 11 noh '%" Recorded by:',
        '%"'left(inname.i,8)
    set reserved 12 noh
    set reserved 13 noh '%@ Source:',
        '%$'left(translate(insource.i,'  ','_|'),30)'%"',
        '%@ Date:',
        '%$'left(translate(insdate.i,'  ','_|'),20)'%"'
    set reserved 14 noh '%@ Keywords:',
        '%$'left(translate(inkywrds.i,'  ','_|'),55)'%"'
    set reserved 15 noh
    set reserved 16 noh '%@ Volume:',
        '%$'left(translate(involume.i,'  ','_|'),3)'%"',
        '%@ Issue:',
        '%$'left(translate(inissue.i,'  ','_|'),3)'%"'
    set reserved 17 noh '%@ PP.:',
        '%$'left(translate(inpgr1.i,'  ','_|'),3)'%"',
        '-',
        '%$'left(translate(inpgr2.i,'  ','_|'),3)'%"'
    do j = 18 to lscreen.1-2
        set reserved j noh
    end
    set reserved lscreen.1-1 noh
    set reserved lscreen.1 noh '%@ PFKEYS:  PF3=Return  PF10=Save'
    if message Â¬= ''                    /* a message to display?      */
     then do
        emsg message
        message = ''
    end
    cursor screen linenum colnum
    return

Andrew M Jause
Technical Support Analyst
Albany International Corporation (USA)

