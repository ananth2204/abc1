A useful tool for XEDIT

XEDIT is a fullscreen file editor which lets you manipulate all
the different types of file that exist, most commonly program
source.

Now let's consider some special kind of file, in which
information is not only based on a line structure, but also on a
column structure. For example, if you look at your DMKRIO
ASSEMBLE you'll certainly see lines like this:

      RDEVICE ADDRESS=180,TYPE=3278,MODEL=2
      RDEVICE ADDRESS=181,TYPE=3278,MODEL=2
      RDEVICE ADDRESS=182,TYPE=3278,MODEL=2
      RDEVICE ADDRESS=183,TYPE=3278,MODEL=2

Imagine that, for some reason, you didn't code them like that,
but like this:

      RDEVICE ADDRESS=180,MODEL=2,TYPE=3278

and you want to change it to make it look standard.
Unfortunately, there is no easy way to do it! Now you can use
the following XEDIT BOX macros. The idea of these macros
came to me when I saw how easy it was to use cut, copy, and
paste tools on PCs, and I decided that it would be useful for me
to have something like that working on XEDIT.

There are seven macros, all written in REXX. I think they
should work successfully with any release of VM, but I only
experimented with VM/SP3 and VM/HP05.

There is a master procedure called XDTBLK, which the user
never calls directly, and six user procedures called Bx - each
one being assigned a specific function. These procedures have
no operands - they are interactive. All six just ask you for
positions in your file two or three times. Because they allow
you to work on boxes, they need to know where the box is in
your file and which size it is, so you must give the position of
the upper left corner of the box and the position of the lower
right one. If the operation involves a box write, you must give
the position of the upper left corner where you will write the
box, the lower right one being computed by the procedure.
Indicating a position to the macro is simple - the cursor is
moved to the right place and PF12 is pressed. This PF key is
the only one reserved (though you could change it if required).
You can move across your file using any usual XEDIT
command or PF key.

BB allows you to blank a box. The box you delimit, by using
PF12 twice, is filled with blanks.

BG is something like BB, but you do not clear an existing area
- instead you get a new area, pre-filled with blanks, in your
file. In other words, it is an add-column command restricted to
a group of contiguous lines.

BD will delete the marked block. It differs from BB in that the
remainder of each line on which the block is located is shifted
to the left.

BM will move the marked block from one place in the file to
another one. This operation has three stages: a box-get of the
necessary size, the copying of the data in the originating box,
and then a box-delete. The first three commands used only 2
positions, which were the corners of the box; this one and the
next two will need 3 positions, the last being the upper left
corner of the target area.

BC is used to copy a block. It runs the same way as BM, but it
won't delete the source block after having copied it.

BY will copy the marked block to a new place, overlaying
existing data. In fact, it works like BC, but without acquiring a
free area.


BB XEDIT

/* BB XEDIT : Block blank macro*/
bb: nop;
xdtblk("PUSH");
"EMSG Move cursor to upper left corner of the box to blank, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to lower right corner of the box to blank, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("BLANK",strpos,blksiz);
xdtblk("POP");
exit;


BG XEDIT

/* BG XEDIT : Block get macro */
bg: nop;
xdtblk("PUSH");
"EMSG Move cursor to where upper left corner will be, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to where lower right corner will be, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("ADD",strpos,blksiz);
xdtblk("POP");
exit;


BD XEDIT

/* BD XEDIT : Block delete macro */
bd: nop;
xdtblk("PUSH");
"EMSG Move cursor to upper left corner of the block to delete, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to lower right corner of the block to delete, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("DELETE",strpos,blksiz);
xdtblk("POP");
exit;


BM XEDIT

/* BM XEDIT : BLock move macro */
bm: nop;
xdtblk("PUSH");
"EMSG Move cursor to upper left corner of block to move, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to lower right corner of block to move, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("SAVE",strpos,blksiz);
"EMSG Move cursor to where upper left corner will go, then PF12";
putpos=xdtblk("LOCATE");
xdtblk("PUT",putpos,blksiz);
xdtblk("DELETE",strpos,blksiz);
xdtblk("POP");
exit;


BC XEDIT

/* BC XEDIT : Block copy macro */
bc: nop:
xdtblk("PUSH");
"EMSG Move cursor to upper left corner of the block to copy, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to lower right corner of the block to copy, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("SAVE",strpos,blksiz);
"EMSG Move cursor to where upper left corner will go, then PF12";
putpos=xdtblk("LOCATE");
xdtblk("PUT",putpos,blksiz);
xdtblk("POP");
exit;


BY XEDIT

/* BY XEDIT : Block overlay macro */
by: nop;
xdtblk("PUSH");
"EMSG Move cursor to upper left corner of block to copy, then PF12";
strpos=xdtblk("LOCATE");
"EMSG Move cursor to lower right corner of block to copy, then PF12";
endpos=xdtblk("LOCATE");
blksiz=xdtblk("COMPUTE",strpos,endpos);
xdtblk("SAVE",strpos,blksiz);
"EMSG Mover cursor to upper left corner where overlay will occur, then PF12";
putpos=xdtblk("LOCATE");
xdtblk("OVERLAY",putpos,blksiz);
xdtblk("POP");
exit;


XDTBLK XEDIT

/* XDTBLK XEDIT : XEDIT box block handler macro */
xdtblk: nop;
argum=arg(1)||arg(2)||arg(3);
parse value argum with cmd reste;
select;
when cmd="PUSH" then do;
"CMS SET CMSTYPE HT";
"ERASE XDTBLK SYSUT1 A";
"ERASE XDTBLK SYSUT2 A";
"CMS SET CMSTYPE RT";
"TRANSFER FNAME FTYPE FMODE LINE";
do i=1 to 12;
"TRANSFER PF"i;
end;
"EXECIO 13 DISKW XDTBLK SYSUT1 A 1 F 80";
rtnstr="";
end;
when cmd="POP" then do;
"CMS SET CMSTYPE HT";
"ERASE XDTBLK SYSUT1 A";
"ERASE XDTBLK SYSUT2 A";
"CMS SET CMSTYPE RT";
rtnstr="";
end;
when cmd="LOCATE" then do;
"EXECIO 12 DISKR XDTBLK SYSUT1 A 2";
if rcÂ¬=0
then exit 69000+rc;
do i=1 to 12;
parse pull t.i;
end;
f=0;
do while f=0;
"READ CMDLINE TAG";
parse pull tag num com;
if tag="ETK"| (tag="PFK" & num="12")
then f=1;
else ADDRESS XEDIT com;
end;
"TRANSFER CURSOR";
parse pull..fl fc;
if tag="PFK"
then rtnstr=right(fl,5,'')||right(fc,5,'');
else rtnstr="-1-1";
end
when cmd="COMPUTE" then do;
parse value argum with.l1 c1 l2 c2.;
l1=l2-l1+1;
c1=c2-c1+1;
rtnstr=right(l1,5,'')||right(c1,5,'');
end;
when cmd="SAVE" then do;
parse value argum with.ld cd lt ct.;
"TRANSFER LINE";
parse pull l0;
":"ld;
"STACK" lt cd ct;
"EXECIO" lt "DISKW XDTBLK SYSUT2 A 1 F" ct;
rtnstr="";
end;
when cmd="PUT" then do;
parse value argum with.ld cd lt ct.;
";"ld;
"CL:"cd;
do i=1 to lt;
"EXECIO 1 DISKR XDTBLK SYSUT2 A" i;
parse pull lg;
lg=left(lg,ct,'');
"CINSERT" lg;
"NEXT 1";
end;
rtnstr="";
end;
when cmd="ADD" then do;
parse value argum with.ld cd lt ct.;
":"ld;
"CL:"cd;
do i=1 to lt;
"CINSERT" copies('',ct);
'NEXT 1";
end;
rtnstr="";
end;
when cmd="OVERLAY" then do;
parse value argum with.ld cd lt ct.;
":"ld;
"CL:"cd;
do i=1 to lt;
"EXECIO 1 DISKR XDTBLK SYSUT2 A" i;
parse pull lg;
lg=left(lg,ct,'');
"COVERLAY" lg;
"NEXT 1";
end;
rtnstr="";
end;
when cmd="BLANK" then do;
parse value argum with.ld cd lt ct.;
":"ld;
"CL:"cd;
do i=1 to lt;
"COVERLAY" copies('_',ct);
"NEXT 1";
end;
rtnstr="";
end;
when cmd="DELETE" then do;
parse value argum with.ld cd lt ct.;
":"ld;
"CL:"cd;
do i=1 to lt;
"CDELETE" ct;
"NEXT 1";
end;
rtnstr="";
end;
end;
return rtnstr;
exit;

Now, all you have to do is to code these seven macros, and try
to use them on any file where information can be grouped in a
box structure. For example, it is interesting with some
customization tables, like CICS, but I find it useful in EXECs
where I have to initialize arrays of data, eg:

      a.1="abcd";      b.1="abcd";
      a.2="xyzt";      b.2="xyzt";
      a3="1234";      b3="1234";

Thierry Itty (France)

