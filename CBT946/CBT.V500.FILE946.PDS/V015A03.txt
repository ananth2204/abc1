 REXXPERT - expert system written in REXX


Last month we published the first part of this article which describes an expert
system written in REXX.  An expert system is a computer program that attempts to
emulate a specific task of a human expert.  REXXPERT, an expert system
development tool written in REXX, was designed to allow a simple expert system
to be built under VM/SP.  This month we publish the second part of this article.


/*--------------------------------------------------------------------*/
/*     Sample Expert System Knowledge Base                            */
/*                                                                    */
/*  This sample knowledge base defines the rules for selecting        */
/*  dot-matrix printers. There are three models to choose from.       */
/*                                                                    */
/*  Model 1 - low speed, 80 columns, $200.00                          */
/*  Model 2 - medium speed, 132 columns, $600.00                      */
/*  Model 3 - high speed, 24 pin, 132 columns, $1200.00               */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Rule 001 has the main goal as the conclusion.                      */
     RULE_001:
       IF  ?.Speed ¬= "" &,
           ?.Print_Quality ¬= "" &,
           ?.Maximum_Print_Length ¬= 0 &,
           ?.Printer_Selected ¬= "" THEN DO
     ?.Print_Selection_Completed = 'yes'
       END
     RETURN
/* The following three rules determine the speed requirements.        */
     RULE_002:
       IF  ABBREV('YES',TRANSLATE(?.Need_Quickly ),1)  &,
            ?.Size_Of_Typical_Output > 5 THEN DO
     ?.Speed = 'High'
       END
     RETURN
     RULE_003:
       IF  ABBREV('YES',TRANSLATE(?.Need_Quickly ),1)  &,
            ?.Size_Of_Typical_Output <= 5 THEN DO
     ?.Speed = 'Medium'
       END
     RETURN
     RULE_004:
       IF  ¬ABBREV('YES',TRANSLATE(?.Need_Quickly ),1) THEN DO
     ?.Speed = 'Low'
       END
     RETURN
/* The following three rules determine the print quality required.    */
     RULE_005:
       IF  ABBREV('YES',TRANSLATE(?.Print_Important_Letters ),1) THEN DO
     ?.Print_Quality = 'High'
       END
     RETURN
     RULE_006:
       IF  ABBREV('YES',TRANSLATE(?.Print_Letters ),1) THEN DO
     ?.Print_Quality = 'Medium'
       END
     RETURN
     RULE_007:
       IF  ¬ABBREV('YES',TRANSLATE(?.Print_Letters ),1) THEN DO
     ?.Print Quality = 'Low'
       END
     RETURN
/* The following three rules inform user of printer recommendation.   */
     RULE_008:
        IF  ?.Speed = 'Low' &,
           ?.Maximum_Print_Length <= 80 &,
           ?.Print_Quality ¬= 'High' THEN DO
     ?.Printer_Selected = 'Model 1'
     CALL Say_Header
     CALL Say_Model_1
     CALL Say_Trailer
       END
     RETURN
     RULE_009:
       IF  ?.Print_Quality ¬= 'High' THEN DO
     ?.Printer_Selected = 'Model 2'
     CALL Say_Header
     CALL Say_Model_2
     CALL Say_Trailer
       END
     RETURN
     RULE_010:
       IF  ?.Print_Quality = 'High' THEN DO
           ?.Printer_Selected = 'Model 3'
     CALL Say_Header
     CALL Say_Model_3
     CALL Say_Trailer
       END
     RETURN
     SAY_Header:
   SAY '************************************************************'
   SAY '* The following is our recommendation for a printer.       *'
   SAY '************************************************************'
     RETURN
     SAY_Model_1:
   SAY ' Model 1 - Price = $200.00 '
   SAY '  Print Speed  = 120 CPS in draft mode, 16 cps in NLQ mode'
   SAY '  Print Head   = 9 pin '
   SAY '  Column Width = 80'
     RETURN
     SAY_Model_2:
   SAY ' Model 2 - Price = $600.00 '
   SAY '  Print Speed  = 240 CPS in draft mode, 60 cps in NLQ mode'
   SAY '  Print Head   = 9 pin '
   SAY '  Column Width = 136'
     RETURN
     SAY_Model_3:
   SAY ' Model 3 - Price = $1200.00 '
   SAY ' Print Speed  = 320 CPS in draft mode, 100 cps in NLQ mode'
   SAY ' Print Head   = 24 pin '
   SAY ' Column Width = 136'
     RETURN
     SAY_Trailer:
   SAY '************************************************************'
   SAY '* The above recommendation was based upon the following:   *'
   SAY '************************************************************'
   SAY '  Required Speed      = ' ?.Speed
   SAY '  Maximum line length = ' ?.Maximum_Print_Length
   SAY '  Print Quality       = ' ?.Print_Quality
     RETURN
/*--------------------------------------------------------------------*/
/* Initialize_Prompts    - Place any prompts that you want below      */
/* Format is Prompt.?.name = 'Prompt string'                          */
/*--------------------------------------------------------------------*/
     Initialize_Prompts:
   Prompt.?.Maximum_Print_Length = 'Please enter the maximum number '||,
   'of character you will print on a single line.'
   Prompt.?.Size_Of_Typical_Output = 'Please enter the number of '||,
   'pages you would normally print in a letter or report.'
   Prompt.?.Need_Quickly = 'Please indicate if you often need '||,
    'your printout quickly (Yes or No) ?.'
   Prompt.?.Print_Letters = 'Do you wish to use this '||,
   'printer to print letters (Yes or No) ?'
   Prompt.?.Print_Important_Letters = 'Do you wish to use this '||,
   'printer to print important letters (Yes or No) ?'
     RETURN
/*--------------------------------------------------------------------*/
/* Initialize_Main_Goal  - Place any logic here that you want to      */
/* execute prior to beginning the inference process. This is          */
/* also where you can preset the goal that the system                 */
/* will search for.                                                   */
/*--------------------------------------------------------------------*/
     Initialize_Main_Goal:
   Main Goal = Print_Selection_Completed
   SAY '************************************************************'
   SAY '*                                                          *'
   SAY '*     Welcome to the REXXPERT Printer Sellection Demo      *'
   SAY '*                                                          *'
   SAY '************************************************************'
   SAY ' '
   RETURN
     RETURN
/*--------------------------------------------------------------------*/
/* Initialize_Attr_Lists - Following is built by EXPCOMP XEDIT        */
/*  **** Do NOT place any logic here ****                             */
/*--------------------------------------------------------------------*/
     Initialize_Attr_Lists:


     RETURN

/**********************************************************************/
/*       R E X X P E R T - R E X X   E X P E R T   S Y S T E M        */
/*--------------------------------------------------------------------*/
/*                      X E D I T  M A C R O                          */
/*        NAME:EXPCOMP                                                */
/*        PURPOSE/DESCRIPTION: Compile rules                          */
/*         1. Include INFERENCE ENGINE                                */
/*         2. Remove Action Diagrams                                  */
/*         3. Determine where each attribute is modified in the       */
/*            conclusion of an IF statement. This list will be        */
/*            used for backward-chaining.                             */
/*         4. Build a list of all the attributes. This is used by     */
/*            the WHAT command.                                       */
/**********************************************************************/

   /*******************************************************************/
   /*  Establish XEDIT environment                                    */
   /*******************************************************************/
   'COMMAND SAVE'
   'COMMAND GET SKEXPERT ADREXX'
   'COMMAND SET FT EXEC'
   'COMMAND SET WRAP OFF'
   'COMMAND SET ZONE 1 *'
   'COMMAND SET TRUNC *'
   'COMMAND SET MSGMODE OFF'
   'COMMAND SET ARBCHAR ON $'
   'COMMAND SET CASE MIXED IGNORE'
   'COMMAND TOP'
   /******************************************************************/
   /*  Loop Through All Rules                                        */
   /******************************************************************/
   True = 1
   False = 0
   Attribute_List = ''
   'COMMAND LOCATE /USER RULES FOLLOW/ '
    End_OF_Rules = False
       DO UNTIL End_Of_Rules
     'COMMAND LOCATE /RULE_$:/'
         IF  RC = 0 THEN DO
       'COMMAND EXTRACT /CURLINE/'
       PARSE VAR Curline.3 Rule_Name ':' Junk
       Rule_String = ''
       Rule_Line = ''
           DO WHILE Rule_Line ¬= 'RETURN'
         Rule_String = Rule_String';'STRIP(Rule_Line)
         'COMMAND DOWN 1'
         'COMMAND EXTRACT /CURLINE/'
         Rule_Line = Curline.3
           END
       PARSE VAR Rule_Name Junk '_' Rule_Number
       Input_String = Rule_String
       CALL Compile_Rule
                END
         ELSE DO
       End_Of_Rules = True
         END
       END
   CALL Build_Attr_List
   CALL Build_Attr_R_List
     EXIT
/**********************************************************************/
/*  Compile Each Individual Rule                                      */
/**********************************************************************/
     Compile_Rule:
       DO WHILE (Input String ¬= '') &,
     (SUBSTR(Input_String,1,3) ¬= 'END')
         SELECT
         WHEN SUBSTR(Input_String,1,2) = 'IF'   THEN CALL Compile_IF
         WHEN SUBSTR(Input_String,1,4) = 'CALL' THEN CALL_Compile CALL
         OTHERWISE  CALL Compile_Assignment
         END
       END
     RETURN
/**********************************************************************/
/*  Compile Assignment Statement                                      */
/**********************************************************************/
     Compile_Assignment:
   PARSE VAR Input_String Assignment ';' Input_String
       IF  POS('=',Assignment) ¬= 0 THEN DO
     PARSE VAR Assignment Variable '=' Assigned_Value
     Variable = STRIP(Variable)
         IF  POS(Variable',Attribute_List) = 0 THEN DO
       Attribute_List = Attribute_List||Variable'
         END
         IF  SYMBOL('Attr_R_List.Variable') ¬= 'VAR' THEN DO
       Attr_R_List.Variable = ''
         END
     Attr_R_List.Variable = Attr_R_List.Variable||Rule_Number'
       END
     RETURN
/**********************************************************************/
/*  Compile IF Statement                                              */
/**********************************************************************/
     Compile_IF:
   PARSE VAR Input_String 'IF' Condition 'THEN DO;' Input_String
   Call Compile_Rule
       IF  SUBSTR(Input_String,1,3) ¬= 'END' THEN DO
     SAY 'If error -' Input_String
              END
       ELSE DO
     Input_String = SUBSTR(Input_String,5) /* drop END; */
        END
     RETURN
/**********************************************************************/
/*  Compile CALL Statement                                            */
/**********************************************************************/
     Compile_CALL:
   PARSE VAR Input_String Assignment ';' Input_String
     RETURN
/**********************************************************************/
/*  Build Attribute List                                              */
/**********************************************************************/
     Build_Attr_List:
   'COMMAND TOP'
   'COMMAND LOCATE /Initialize_Attr_Lists:/'
   'COMMAND  INPUT A_L = "" '
   Hold_list = Attribute_List
       DO WHILE Attribute_List ¬= ''
     Input_line = "A_L = A_L'"
         DO 3 WHILE Attribute_List ¬= ''
       PARSE VAR Attribute_List Attribute ' Attribute_List
       Input_Line = Input_Line'Attribute
         END
     Input line = Input_Line"'"
     'COMMAND INPUT' Input_Line
       END
   'COMMAND  INPUT Attribute_List = SUBSTR(A_L,2) '
   Attribute_List = Hold_List
     RETURN
/**********************************************************************/
/*  Build Attribute Rule Lists                                        */
/**********************************************************************/
     Build_Attr_R_List:
   'COMMAND TOP'
   'COMMAND LOCATE  /Initialize_Attr_Lists:/'
       DO WHILE Attribute_List ¬= ''
     PARSE VAR Attribute_List Attribute ' Attribute_List
     'COMMAND  INPUT' Attr_Rule_List.Attribute "='"Attr_R_List.Attribute"'"
       END
     RETURN

This article will be concluded next month when we shall publish the final EXEC.

David T Jeffery
Software Supervisor
Zurn Industries (USA)    ) David T Jeffery 1987





















