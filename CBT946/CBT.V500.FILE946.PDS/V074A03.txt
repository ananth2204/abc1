FILEList alternative using CMS Pipelines

When using IBM's FILEList the same problems always turn
up. For example, I could not edit a file whose name was in
mixed case, a command was not executed when I quit
FILEList, it was almost impossible to change the behaviour of
FILEList because it is written in EXEC2, etc. I didn't want to
write a complete new FILEList with XEDIT macros, and I
didn't want to overrule the standard FILEList profile. This is
because I think that when you type FILEList you should get
FILEList and not a personalized EXEC. But help was closer
than I thought. One day our company decided to buy CMS
Pipelines. When I was evaluating this nice and cheap tool, I
found out that I had discovered the tool to solve my problem. I
planned to use the fullscreen possibilities of CMS Pipelines. It
was a nice way to get familiar with the different things that
could be done with CMS Pipelines and create a useful tool at
the same time.

It turned out that it was not quite as simple as I expected it to
be. You need a lot of REXX to get things going. However,
once I had found out how to do it, the only limit was my own
imagination. The program FileLister was born. Because you
need a lot of REXX to initialize the fullscreen array with all the
needed control codes and field attributes I decided to share this
knowledge with others. Some parts come from the programs
that are delivered with CMS Pipelines.

In FileLister I built in some very handy options that make life a
lot easier. This makes FileLister a bit more expensive than the
standard IBM FILEList, but the increased functionality is
worth paying for.


FILELISTER

FileLister uses all the available lines on your screen, so it can
run on graphics displays and on terminals in 43 line mode, and
on all the other terminals available at our plant. It even runs
perfectly when using a telephone line to call into the
mainframe. The only problem is that some terminals won't
beep. It's even possible that these terminals normally beep, but
don't beep with FileLister. This is not as designed, but is not a
giant problem. Some users even prefer a program that doesn't
beep.

The description of FileLister given below can be displayed by
typing

      FL ?

or

      FL ( HELP

The FileLister command displays a fullscreen list of selected
files. In FileLister, you can perform any CMS operations such
as EDIT, COPY, and ERASE by entering the command in the
input area immediately to the left of each file-id on the screen.
You can also issue FileLister subcommands to sort the
displayed data, or to enter a new FileLister level that displays
another set of files. The format of the FileLister command is:

      FileLister |  <fname <ftype <fmode>>> <(options)>   |

Where: fname ftype fmode specify the file(s) to be listed. The
default is '* * A'. Options specify the FileLister option.

Notes: you can specify a filelist mask, but if you don't, the
default of '* * A' is used. When you specify only one letter,
and a disk with that filemode exists, the filelist for that disk
will be displayed. For example: FL Q results in FL * * Q.

If you specify a filemask of three hexadecimal digits, then the
disk will be accessed and the files on that disk will be
displayed. For example: FL 100 will display a FILEList of the
disk that's linked as disk 100.

Every other mask you enter will result in FL *fn* *ft* <fm |
*>. You can override this effect by calling FL with the
NOMASK option.

FileLister has got some options you can specify:

o      LIST - With this option it's possible to give a list of files
      to FileLister, for example: FL ( LIST EXAMP FLIST A.
      Defaults for the list are C859338I for filename, FLIST for
      filetype, and A for filemode.

o      NOMASK - With this option you can overrule the default
      that FL will set up a mask for files to be displayed.

o      STACK - All the lines that normally are displayed are now
      put onto the stack and FL will exit. It stacks one line for
      each file as follows:

            * fn ft fm fo lrecl recs blocks date time

      where: * makes it a comment, in case CMS reads it; fn is
      the displayed filename; ft is the displayed filetype; fm is
      the displayed filemode; fo is the record format; lrecl is the
      record length; recs is the number of records; blocks is the
      number of used blocks; date is the filedate; and time is the
      filetime.

o      HELP - Display this help screen. This is the same as
      typing 'FL ?'.

Using the input area

The user input area in front of the file-ids may be used to enter
any command, as in the normal CMS environment, to execute
CMS/CP functions or to invoke an EXEC. No special
indication has to be provided to identify that the command is
for CP or that it is an EXEC.

If the file-id (or part of it) is to be inserted in the command
entered in the user input area, the special indicator / can be
used anywhere in the command sequence, as follows:

/      insert the complete file-id
/n      insert the filename
/t      insert the filetype
/m      insert the filemode

If not explicitly specified, FileLister will append the entire file-id
to the user command area. For example, if ERASE alone is
entered, FileLister will generate the command string ERASE
filename filetype filemode, and pass it to CMS for execution.

When all input fields are processed, the screen is redisplayed
and the input area is changed to indicate what happened. If the
first character of the input area is displayed as: * - the
command was valid and gave a zero return code; or ¬ rc - the
command gave a non-zero return code (shown following the ¬).

Examples of using the input area are shown in Figure 1.

Subcommands

There are some subcommands you can use.

The '=' subcommand reissues the last command again. This
works the same as it does in FILEList

The '?' subcommand given in the prefix area redisplays this
command on the commandline, where it can be edited or
submitted. Placed on the commandline it redisplays the last
command given.

When '&' is used on the commandline, the last command will
be executed and redisplayed.

'/st' will locate the string st in the complete list. 'ALL /st' will
select all lines containing st. Typing ALL with no parameter
refreshes the list. TOP moves to the top of the list. BOT goes
to the bottom of the list. UP goes one page up. DOWN will go
one page down. '+nnn' will go down nnn lines. '-nnn' will go
up nnn lines. PFN will toggle the display of the function keys.
HELP will display the help screens. SSIZE will sort on
filesize. SNAME will sort on filename. Finally, STYPE will
sort on filetype.

/*--------------------- FileLister Version 1.0 ---------------------*/
/* CP/CMS used:                                                     */
/*         VM/SP Release 5                                          */
/*               CMS: Release 5, service level 524                  */
/*         VM/XA Release 2.1                                        */
/*               CMS: Release 5.6, service level 205                */
/* CMS Pipelines:                                                   */
/*         CMS Pipelines Release 1.05                               */
/*------------------------------------------------------------------*/
parse source . . s_name s_type s_mode .      /* find out who we are */
arg mask '(' options                  /* and get some args (upcase) */
trace off          /* remove this line when using the REXX compiler */
/* initialize all the screen parameters                             */
call fsinit
if (mask = '?') then do
    /* help requested. display the help                             */
    call help 'initial'
    call exiterror 100 'I' 'Help displayed. No FileList generated.'
end
/* setup some constants                                             */
pfn     = on
pan     = 1
oldcom  = ''
offset  = fs.rows % 2
header  = 'Cmd  Filename Filetype Fm Format Lrecl    ' || ,
          'Records     Blocks   Date     Time  'fs.highu
trail1  = '1=File       2=Refresh      3=Quit       '  || ,
          '4=S type     5=S name       6=S size'
trail2  = '7=Back       8=Forward      9=Top       '   || ,
         '10=Bot       11=Xedit       12=FL /n'
trail3  = '===>'
resp    = ''
stars   = '*****'
erased  = stars 'Erased or renamed' stars
nocomm  = stars 'Unknown CP/CMS command.' stars
nofiles = stars 'No files found matching "'space(mask)'"' stars
eline   = stars 'Please enter "'s_name' ?"  or "'s_name' ( HELP" for help' stars
cursor  = sba(2, 1) || fs.ic
/* select what control codes to use                                 */
if (fs.rows > 24) then ctrl = fs.operwa || fs.wcc
                  else ctrl = fs.operw  || fs.wcc
/* init variables                                                   */
oldcomlin = ''
comlin = ''
message = ''
beep = 0
/* find out what options are to be used                             */
requestedlist = 0
tostack       = 0
options = ' 'space(options)' '
/* is the 'list' option given?                                      */
if (index(options, ' LIST ') ¬= 0) then do
    /* the inputfile is a list of files to display                  */
    parse var options options ' LIST ' reqfn reqft reqfm roptions
    options = ' 'space(options roptions)' '
    /* set defaults for the list if not given                       */
    parse value reqfn userid() with reqfn .
    parse value reqft 'FLIST'  with reqft .
    parse value reqfm 'A'      with reqfm .
    listtofind = space(reqfn reqft reqfm)
    /* does the list exist?                                         */
    address command 'STATE 'listtofind
    if (rc = 0) then requestedlist = 1
    else do
        /* no, it does not. tell the user                           */
        call exiterror 28 'E' ,
             space('List 'listtofind' not found. Can''t continue.')
    end
end
/* is the 'stack' option given?                                     */
if (index(options, ' STACK ') ¬= 0) then do
    parse var options options ' STACK ' roptions
    options = ' 'space(options roptions)' '
    tostack =  1
end
/* is the 'nomask' option given?                                    */
if (index(options, ' NOMASK ') = 0) then do
    parse var options options ' NOMASK ' roptions
    options = ' 'space(options roptions)' '
    mask = list(space(mask))
end
/* is the 'help' option given?                                      */
if (index(options, ' HELP ') ¬= 0) then do
    call help 'initial'
    call exiterror 100 'I' 'Help displayed. No FileList generated.'
end
/* any options left?? (these are invalid and ignored)               */
options = space(options)
if (options ¬= '') then do
    /* invalid options given. ignore them with a message            */
    if (words(options) = 1) then do
        message = 'Invalid option. Ignored:' options
    end
    else do
        message = 'Invalid options. Ignored:' options
    end
end
/* set up the return keys for CMS subset (keep the old ones)        */
'pipe cp q pf | stem pfkeys.'
'cp set pf3  immed return'
'cp set pf15 immed return'
/* get all the requested files.                                     */
call getlist requestedlist tostack mask
noflist = stars 'No files found for list "'listtofind'"' stars
if (files = 0) then do
    if (requestedlist) then do
        call exiterror 228 'E' 'No files found for list 'listtofind'.' ,
                              'Enter "'s_name' ?" for help.'
    end
    else do
        call exiterror 128 'E' 'No files found for 'space(mask)'.' ,
                              'Enter "'s_name' ?" for help.'
    end
end
'vmfclear'
/* do the loop until the user wants to quit. (pf3 or pf15 pressed)  */
do until resp = 'pf03' | resp = 'pf15'
    trail4 = fs.low'Files: 'pan 'of' files
    x      = fs.cols - length(trail4)
    /* start lines                                                  */
    screen = sba(1, 1) || fs.low || header || fs.highu
    if (pfn = on) then do
        /* pf key display is on                                     */
        screen = screen || sba(fs.rows-3, 1) || fs.low || trail1 ,
                           sba(fs.rows-2, 1) || fs.low || trail2
        pfnoff = 6                    /* bottom offset              */
    end
    else do
        /* pf key display is off                                    */
        pfnoff = 4                    /* bottom offset              */
    end
    /* create a command line                                        */
    screen = screen || sba(fs.rows-0, x) || fs.low || trail4 ,
                       sba(fs.rows-1, 1) || fs.low || trail3
    if (comlin = '') then do
        /* no command to display on the command line                */
        screen = screen || fs.highu || space(comlin)
    end
    else do
        /* command to display. set attr to 'changed' to detect it   */
        screen = screen || fs.chuh  || space(comlin)
    end
    comlin = ''
    if (files = 0) then do
        /* no files found                                           */
        ln    = (fs.rows % 2 - 2)
        line. = fs.high
        if (requestedlist) then do
            line.ln = fs.high || center(noflist, fs.cols-2)
        end
        else do
            line.ln = fs.high || center(nofiles, fs.cols-2)
        end
        ln      = (fs.rows % 2 + 2)
        line.ln = fs.high || center(eline, fs.cols-2)
        line.0  = ln + 4
        cursor  = sba(1, 1) || fs.ic
        pan = 1
    end
    /* build a one line screen string (with position info)          */
    do i = pan to fs.rows+pan-pfnoff
        ro = i-pan+2                  /* calculate offset           */
        if (i <= line.0) then do
            /* line should be displayed                             */
            screen = screen || sba(ro, 1) || ,
                               left(line.i, fs.cols-1) || ,
                               fs.highu
        end
        else do
            /* no file specs on this line, just block it            */
            screen = screen || sba(ro, 1) || fs.low
        end
    end
    if message ¬= '' then do
        /* display a message if needed                              */
        screen = screen || sba(fs.rows-2, 1) || fs.high || ,
             left(space(stars left(message, fs.cols-4-length(stars)*2) ,
                      stars), fs.cols-2)
        message = ''
        beep = 1
    end
    else do
        beep = 0
    end
    /* create the final screen line                                 */
    if beep then screen = fs.beep || ctrl || screen || cursor
            else screen = ctrl || screen || cursor
    /* display the screen and read the input. use fullscreen pipes  */
    'pipe(name fl_screen end \)|',
        'var screen |',               /* display screen and ...     */
        'fullscr noclose condread |', /* ... read entries           */
        'split 'x2c(11)' |',          /* split the response on cr   */
        'resp: drop 1 |',             /* drop the first one         */
        'stem inp.',                  /* into a REXX array          */
        '\ resp: | var resp'          /* get the response key       */
    /* translate the sba addresses into screen addresses            */
    do i = 1 to inp.0
        parse value sba2xy(left(inp.i, 2)) with rs cs
        inp.i = cs rs substr(inp.i, 3)
    end
    /* select the exit key (it's coded.) and cursor position        */
    parse value sba2xy(substr(resp,2, 2)) with rs cs .
    if ((rs >= fs.rows-pfnoff+2) | (rs = 0)) then do
        /* cursor was on the command line or top line               */
        cursor = sba(fs.rows-1, 7) || fs.ic
    end
    else do
        /* place cursor in column 1 of the line it was on           */
        cursor = sba(rs+1, 1) || fs.ic
    end
    select
        /* decode the pressed accept key                            */
        when (left(resp, 1) = "'") then resp = 'enter'
        when (left(resp, 1) = "-") then resp = 'sysreq'
        when (left(resp, 1) = "_") then resp = 'clear'
        when (left(resp, 1) = ">") then resp = 'pa02'
        when (left(resp, 1) = "1") then resp = 'pf01'
        when (left(resp, 1) = "2") then resp = 'pf02'
        when (left(resp, 1) = "3") then resp = 'pf03'
        when (left(resp, 1) = "4") then resp = 'pf04'
        when (left(resp, 1) = "5") then resp = 'pf05'
        when (left(resp, 1) = "6") then resp = 'pf06'
        when (left(resp, 1) = "7") then resp = 'pf07'
        when (left(resp, 1) = "8") then resp = 'pf08'
        when (left(resp, 1) = "9") then resp = 'pf09'
        when (left(resp, 1) = ":") then resp = 'pf10'
        when (left(resp, 1) = "#") then resp = 'pf11'
        when (left(resp, 1) = "@") then resp = 'pf12'
        when (left(resp, 1) = "A") then resp = 'pf13'
        when (left(resp, 1) = "B") then resp = 'pf14'
        when (left(resp, 1) = "C") then resp = 'pf15'
        when (left(resp, 1) = "D") then resp = 'pf16'
        when (left(resp, 1) = "E") then resp = 'pf17'
        when (left(resp, 1) = "F") then resp = 'pf18'
        when (left(resp, 1) = "G") then resp = 'pf19'
        when (left(resp, 1) = "H") then resp = 'pf20'
        when (left(resp, 1) = "I") then resp = 'pf21'
        when (left(resp, 1) = "Ý") then resp = 'pf22'
        when (left(resp, 1) = ".") then resp = 'pf23'
        when (left(resp, 1) = "<") then resp = 'pf24'
        otherwise resp = 'unknown'
    end
    ret = 0
    /* parse all the commands                                       */
    do i = 1 to inp.0
        parse var inp.i x y new
        ln = pan + y - 1              /* calculate the offset       */
        if (new = '') then iterate    /* just spaces given. ignore  */
        /* command on the commandline given                         */
        if (y = fs.rows-2) then do
            if (left(space(new), 1) = '=') then do
                /* reissue the last command again                   */
                new = oldcomlin
            end
            /* select the given command                             */
            select
                when (left(space(new), 1) = '?') then do
                   /* redisplay of the last command requested      */
                   comlin = space(oldcomlin)
                   cursor = sba(fs.rows-1, 7+length(oldcomlin)) || fs.ic
                end
                when (left(space(new), 1) = '+') then do
                    /* go down a number of lines                    */
                    parse value translate(new) with '+' offs .
                    if datatype(offs, 'W') then pan = pan + offs
                    else message = 'Invalid number of lines: 'offs
                end
                when (left(space(new), 1) = '-') then do
                    /* go up a number of lines                      */
                    parse value translate(new) with '-' offs .
                    if datatype(offs, 'W') then pan = pan - offs
                    else message = 'Invalid number of lines: 'offs
                end
                when (translate(word(new, 1))  = 'HELP')  then do
                    /* display the help                             */
                    call help 'from_flist'
                end
                when (translate(word(new, 1))  = 'QQ')    then do
                    /* quit the program. fake a pf3 keypress        */
                    resp = 'pf03'
                end
                when (translate(word(new, 1))  = 'PFN')   then do
                    /* toggle the pf-key display (on or off)        */
                    if (pfn = on) then pfn = off
                                  else pfn = on
                    cursor = sba(fs.rows-1, 7) || fs.ic
                end
                when (translate(word(new, 1))  = 'TOP')   then do
                    /* goto the top.                                */
                    pan = 1
                end
                when (translate(word(new, 1))  = 'BOT')   then do
                    /* goto the bottom                              */
                    pan = line.0 - offset
                end
                when (left(new, 1) = '/') then do
                  /* locate the string                              */
                  parse value translate(space(new)) with '/'to_find'/' .
                    if (to_find ¬= '') then do
                        /* valid search string given                */
                        found = 0
                        do i = pan+1 to line.0
                      if (pos(to_find, translate(line.i)) ¬= 0) then do
                                pan = i
                                found = 1
                                leave
                            end
                        end
                     if ¬found then message = 'Search string not found.'
                    end
                    else do
                        message = 'No search criterium specified.'
                    end
                end
                when (translate(left(new, 3)) = 'ALL') then do
                    /* locate the string like XEDIT's all command   */
                    parse value translate(space(new)) with ,
                                'ALL' . '/'to_find'/' .
                    if (to_find ¬= '') then do
                        /* valid search string given                */
                        'pipe(name all)|',
                            'stem line. |',
                            'locate /'to_find'/ |',
                            'buffer |',
                            'stem line.'
                        if (line.0 = 0) then do
                            /* string not found.                    */
                            message = 'Search string not found.'
                            call getlist requestedlist tostack mask
                        end
                    end
                    else do
                        /* just plain all given. reset the list     */
                        call getlist requestedlist tostack mask
                    end
                end
                when (translate(word(new, 1)) = 'STYPE') then do
                    /* sort on filetype                             */
                    'pipe(name s_type)|',
                        'stem line. |',
                        'sort 15.8 |',
                        'stem line.'
                    cursor = sba(2, 1) || fs.ic
                    pan = 1
                end
                when (translate(word(new, 1)) = 'SNAME') then do
                    /* sort on filename                             */
                    'pipe(name s_name)|',
                        'stem line. |',
                        'sort 5.8 |',
                        'stem line.'
                    cursor = sba(2, 1) || fs.ic
                    pan = 1
                end
                when (translate(word(new, 1)) = 'SSIZE') then do
                    /* sort on size                                 */
                    'pipe(name s_size)|',
                        'stem line. |',
                        'sort 56.6 des |',
                        'stem line.'
                    cursor = sba(2, 1) || fs.ic
                    pan = 1
                end
                when (translate(word(new, 1)) = 'DOWN')  then do
                    /* go one page forward                          */
                    pan = pan + offset
                end
                when (translate(word(new, 1)) = 'UP')    then do
                    /* go one page backward                         */
                    pan = pan - offset
                end
                otherwise do
                    /* execute the command                          */
                    if (left(space(new), 1) = '&') then do
                        comlin = space(new)
                        new = substr(space(new), 2)
                    end
                    call executecommand new
                    cursor = sba(fs.rows-1, 7) || fs.ic
                end
            end
            oldcomlin = space(new)
            iterate                   /* go get a new command       */
        end
        /* create a command, filename etc.                          */
        parse value parsecom(line.ln, new) with old fn ft fm reqcom
        /* and execute the command                                  */
        if (old ¬= 'YES') then do
            /* new command requested                                */
            if (space(reqcom) = '') then iterate
            call execcom ln fn ft fm reqcom
        end
        else do
            /* old command requested                                */
            comlin = space(reqcom)
            cursor = sba(fs.rows-1, 7+length(comlin)) || fs.ic
        end
    end
    select
        /* process the pressed key                                  */
        when (resp = 'pf01' | resp = 'pf13') then do
            /* file the list on disk, put it in id <flist> <a>      */
            'pipe(name file_it)|',
                'stem line. |',
                'spec 7-* 1 |',
                'literal 'substr(header, 6)' |',
                '> 'userid()' flist a'
            message = 'Information is stored in 'userid()' FLIST A'
        end
        when (resp = 'pf02' | resp = 'pf14') then do
            /* get the wanted files (refresh the screen)            */
            call getlist requestedlist tostack mask
            cursor = sba(2, 1) || fs.ic
            pan = 1
        end
        when (resp = 'pf03' | resp = 'pf15') then do
            /* quit the program. do nothing for now                 */
            nop
        end
        when (resp = 'pf04' | resp = 'pf16') then do
            /* sort on type                                         */
            'pipe(name s_type)|',
                'stem line. |',
                'sort 15.8 |',
                'stem line.'
            cursor = sba(2, 1) || fs.ic
            pan = 1
        end
        when (resp = 'pf05' | resp = 'pf17') then do
            /* sort on name                                         */
            'pipe(name s_name)|',
                'stem line. |',
                'sort 5.8 |',
                'stem line.'
            cursor = sba(2, 1) || fs.ic
            pan = 1
        end
        when (resp = 'pf06' | resp = 'pf18') then do
            /* sort on size                                         */
            'pipe(name s_size)|',
                'stem line. |',
                'sort 56.6 des |',
                'stem line.'
            cursor = sba(2, 1) || fs.ic
            pan = 1
        end
        when (resp = 'pf07' | resp = 'pf19') then do
            /* go one screen backward                               */
            pan = pan - offset
        end
        when (resp = 'pf08' | resp = 'pf20') then do
            /* go one screen forward                                */
            pan = pan + offset
        end
        when (resp = 'pf09' | resp = 'pf21') then do
            /* goto the top                                         */
            pan = 1
        end
        when (resp = 'pf10' | resp = 'pf22') then do
            /* goto the bottom                                      */
            pan = line.0-offset
        end
        when (resp = 'pf11' | resp = 'pf23') then do
            if ¬( (rs >= fs.rows-pfnoff+2) | (rs = 0) ) then do
                /* call XEDIT for this file                         */
                ln = pan + rs - 1
                parse value file(line.ln) with fn ft fm
                call execcom ln fn ft fm 'XEDIT' fn ft fm
            end
        end
        when (resp = 'pf12' | resp = 'pf24') then do
            if ¬( (rs >= fs.rows-pfnoff+2) | (rs = 0) ) then do
                /* execute a filelister for this file.              */
                ln = pan + rs - 1
                parse value file(line.ln) with fn ft fm
                call execcom ln fn ft fm 'EXEC 's_name fn '* * ( NOMASK'
            end
        end
        when (resp = 'pa02')  then do
            /* call the cms subset                                  */
            address cms 'SUBSET'
            'vmfclear'
            cursor = sba(2, 1) || fs.ic
        end
        when (resp = 'clear') then do
            /* just reposition the cursor                           */
            cursor = sba(2, 1) || fs.ic
        end
        otherwise nop
    end
    /* correct the panel offset                                     */
    pan = min(pan, line.0)
    pan = max(pan, 1)
end
/* reset the pf-keys and exit                                       */
do i = 1 to pfkeys.0
    if (word(pfkeys.i, 2) ¬= 'UNDEFINED') then do
        'cp set pf'i substr(pfkeys.i, wordindex(pfkeys.i,2))
    end
end
return
/* initialize variables used in building screen displays            */
fsinit: procedure expose fs.
    /*--------------------------------------------------------------*/
    /* Function:                                                    */
    /*     Initialize the fullscreen array fs. with all the         */
    /*     needed attributes, screen control codes and other        */
    /*     needed information.                                      */
    /*--------------------------------------------------------------*/
    /* explanation of the constructed bytes:                        */
    /*     The first field determines the function of the next      */
    /*     field. "1D" means "start field"                          */
    /*                                                              */
    /*  the second byte is constructed as follows:                  */
    /*   0,1   value determined by bits 2-7                         */
    /*   2     0 = unprotected field                                */
    /*         1 = protected field                                  */
    /*   3     0 = alphanumeric field                               */
    /*         1 = numeric (causes upshift for numeric keyboard)    */
    /*   4,5   00 = display/not selector pen detectable             */
    /*         01 = display/selector pen detectable                 */
    /*         10 = intensified display/selector pen detectable     */
    /*         11 = non print, non display, non detectable          */
    /*   6     reserved, must always be 0                           */
    /*   7     modified data tag (mdt) identifies modified          */
    /*         fields during read modified command operations       */
    /*         0 = field has not been modified                      */
    /*         1 = field has been modified by the operator          */
    /*             this can be set by the program                   */
    /*--------------------------------------------------------------*/
    fs.pr     = '20'x      /* protected               = '00100000'b */
    fs.up     = '00'x      /* unprotected             = '00000000'b */
    fs.al     = '00'x      /* alpha numeric           = '00000000'b */
    fs.nu     = '10'x      /* numeric                 = '00010000'b */
    fs.dn     = '00'x      /* display not selectable  = '00000000'b */
    fs.ds     = '04'x      /* display selectable      = '00000100'b */
    fs.is     = '08'x      /* intens selectable       = '00001000'b */
    fs.nn     = '0c'x      /* non print etc.          = '00001100'b */
    fs.no     = '00'x      /* not modified            = '00000000'b */
    fs.mo     = '01'x      /* modified                = '00000001'b */
    fs.st     = '1d'x      /* startfield code                       */
    fs.le     = '15'x      /* skip line <cr/lf>                     */
    fs.operwa = 'c0'x      /* erase/write alternate                 */
    fs.operw  = '80'x      /* erase/write                           */
    fs.opwr   = '00'x      /* write                                 */
    fs.oprd   = '06'x      /* read modified                         */
    fs.wcc    = '03'x      /* unlock keyboard, reset mdt            */
    fs.ic     = '13'x      /* insert cursor                         */
    fs.beep   = 'AD'       /* just beep once (should be in upper)   */
    fs.read   = '02'x      /* read unformated screen                */
    fs.highu  = '1d08'x    /* unprotected  highlighted              */
    fs.high   = '1d38'x    /* protected    highlighted              */
    fs.lowu   = '1d00'x    /* unprotected  normal                   */
    fs.low    = '1d30'x    /* protected    normal                   */
    fs.invu   = '1d0d'x    /* unprotected  invisible                */
    fs.inv    = '1d3b'x    /* protected    invisible                */
    fs.chul   = '1d01'x    /* unprotected  normal modified          */
    fs.chuh   = '1d09'x    /* unprotected  high   modified          */
    /* get the screen size and other info from cp                   */
    parse value diag('8C') with flags +1 3 fs.cols +2 fs.rows +2 .
    fs.rows   = c2d(fs.rows)
    fs.cols   = c2d(fs.cols)
    fs.color  = (bitand(flags, '80'x) = '80'x)
    fs.exthi  = (bitand(flags, '40'x) = '40'x)
    fs.pss    = (bitand(flags, '20'x) = '20'x)
    fs.7171   = (bitand(flags, '02'x) = '02'x)
    fs.14bit  = (bitand(flags, '01'x) = '01'x)
    return
/* translate a SBA screen address into col row                      */
sba2xy: procedure expose fs.
    arg sba
    /*--------------------------------------------------------------*/
    /* Function:                                                    */
    /*     Translate the set buffer address to a standard           */
    /*     x,y coordinate pair.                                     */
    /* Arguments:                                                   */
    /*     sba                  set buffer address                  */
    /* Returns:                                                     */
    /*     x                    x coordinate (1 <= x <= fs.rows)    */
    /*     y                    y coordinate (1 <= y <= fs.cols)    */
    /*--------------------------------------------------------------*/
    'pipe(name sba2xy)',
       'var sba |',                   /* from the SBA parameter     */
       'spec /0000/ 1',               /* first 4 bits 0             */
             '1.1 c2b  5.6 right',    /* right 6 bits of 1st byte   */
             '2.1 c2b 11.6  right |',
       'spec 1.16 b2c 1 |',           /* bits to character          */
       'spec 1.2 c2d 1 |',            /* character to decimal       */
       'var inp'
    return ((inp+1)%fs.cols) ((inp+1)//fs.cols+1)
sba: procedure expose fs.
    arg y , x .
    /* Function:                                                    */
    /*     Translate the x,y coordinate pair to a standard          */
    /*     set buffer address                                       */
    /* Arguments:                                                   */
    /*     x                    screen x position                   */
    /*     y                    screen y position                   */
    /* Returns:                                                     */
    /*     buffaddr             sba fullscreen address              */
    /* calculate binary address                                     */
    bufaddr = (y-1) * fs.cols + (x-1)
    if (fs.14bit) then return '11'x || d2c(bufaddr, 2)
    /* convert to six-bit format                                    */
    /* xxxx111111111111 -> 0011111100111111                         */
    'pipe(name create_sba)|',
        'var bufaddr |',              /* start with char number     */
       'spec 1-* d2c 1.2 right |',    /* convert to binary          */
       'spec 1-* c2b 1 |',            /* convert to bit string      */
       'spec /00/ 1  5.6  3',         /* place first six bits       */
            '/00/ 9 11.6 11 |',       /* place second six bits      */
       'spec 1-* b2c 1 |',            /* convert back to binary     */
       'xlate *-* 00-3f 40-7f',       /* translate to coded         */
                 '01-09 c1-c9',       /*   buffer address           */
                 '11-19 d1-d9',       /*                            */
                 '22-29 e2-e9',       /*                            */
                 '30-39 f0-f9 |',     /*                            */
       'spec x11 1 1.2 2 |',          /* prefix with sba order      */
       'var bufaddr'                  /* put back in variable       */
    return bufaddr                    /* and return                 */

Editor's note: this article will be continued next month.

Ton Kersten
System Manager (The Netherlands)

