Display command retrieve buffer

The following code provides a way of finding out which
commands a user has entered from the CMS command line.
The EXEC will run under VM/XA SP 2.0 and 2.1, and
requires the appropriate command privileges to perform CP
LOCATE and CP display real storage commands. It will
display the last CP command issued by the user-id and the
contents of its command retrieve buffer, depending on whether
or not it has been used or even if one exists.

The method of storing the retrieve buffer in VM/XA is quite
different from VM/SP and VM/SP HPO. Under VM/SP and
VM/SP HPO, the user's VMBLOK contains a pointer,
VMRETBUF, which points to the command retrieve buffer. In
VM/XA the VMRETBUF pointer no longer exists. There is an
anchor in the user's VMDBK, called VMDPFUNC, which
points to 24 fullword pointers. These further point to GSDBK
blocks that contain the definitions for each of the program
function (PF) keys. There is, in fact, a 25th pointer, which
points to the GSDBK that defines the retrieve buffer. This
GSDBK contains a pointer to the buffer itself, the buffer
length, and a pointer to the most recently used entry within the
buffer. The SPY EXEC utilizes this.


SPY EXEC

/* Desc:   Utility to display a user's CMS command retrieve buffer   *
 * Format: <EXEC> SPY user-id                                        *
 *         where user-id is the user-id whose command retrieve       *
 *         buffer you wish to display                                *
 * Prereq: VM/XA SP 2.0 or VM/XA SP 2.1                              */
trace off
address cms 'MAKEBUF' ; bufno = rc
address cms 'SET CMSTYPE RT'
address cms 'VMFCLEAR'
/* Initialise                                                        */
hi = '1DE8'x               /* Highlight text on attribute            */
lo = '1D60'x               /* Highlight text off attribute           */
no_buffer = 0              /* Flag to indicate user has no buffer    */
buffer_used = 0            /* Flag to indicate whether buffer used   */
cmd_buffer. = ''           /* Array to hold 7 buffer entries         */
buffer_data_offset = 5     /* Offset to point to start of buffer data*/
buffer_length_offset = 3   /* Offset to point to buffer length byte  */
most_recent = 1            /* Holds most recent buffer command       */
/* Check validity of user-id specified                               */
parse upper arg uid .
parse value diagrc(8,'QUERY 'uid) with diag_rc . +16 diag_msg
select
   when diag_rc = 3 then do
      say 'User 'uid' specified does not exist'
      exit 99
   end
   when diag_rc = 45 then do
      say 'User 'uid' is not logged on'
      exit 99
   end
    otherwise nop
end
/* Are they logged on or disconnected?                               */
parse value diag_msg with . '-' status '15'x
status = STRIP(status)
if status = 'DSC' then status = hi||'Disconnected'||lo
 else status = ' at'hi||status||lo
/* Find the users VMDBK                                              */
parse value diagrc(8,'LOCATE 'uid) with diag_rc . +16 diag_msg
if diag_rc ¬= 0 then do
   say 'VMDBK for user 'uid' cannot be located'
   exit 99
end
 else nop
parse value diag_msg with . '=' vmdbk_addr '15'x
vmdbk_addr = STRIP(vmdbk_addr)
/* Get the last CP command executed                                  */
vmdcommd = D2X(X2D(vmdbk_addr) + X2D(380))
parse value diagrc(8,'D H'vmdcommd'.8') with . . +16 diag_msg
parse value diag_msg with host_addr word.1 word.2 junk '15'x
last_cp_cmd =X2C(STRIP(word.1)||STRIP(word.2))
/* Find the anchor to the list of 24 fullword pointers, one for each *
 * PF key. The pointer points to a GSDBK containing the definition of*
 * each function key. The 25th pointer is used to point to the       *
 * command retrieve buffer.                                          */
vmdpfunc = D2X(X2D(vmdbk_addr) + X2D(374))
parse value diagrc(8,'D H'vmdpfunc'.4') with . . +16 diag_msg
parse value diag_msg with host_addr gsdbk_anchor junk '15'x
/* If the anchor for the cmd buffer is a fullword of zeros, then the *
 * user has not set up a retrieve buffer. If not, get the pointer and*
 * find the GSDBK. The GSDBK then points to the start of the command *
 * retrieve buffer. This anchor is X'10' into the GSDBK. The length  *
 * of the buffer is found at X'15'. The most recently used buffer is *
 * found by a pointer X'18' into the GSDBK.                          */
if gsdbk_anchor = '00000000' then no_buffer = 1
 else do
    retbuf_gsdbk = D2X(X2D(gsdbk_anchor) + X2D(60))
    parse value diagrc(8,'D H'retbuf_gsdbk'.4') with . . +16 diag_msg
    parse value diag_msg with host_addr retbuff_anchor junk '15'x
    if retbuff_anchor = '00000000' then no_buffer = 1
     else do
       buffer_start = D2X(X2D(retbuff_anchor) + X2D(10))
       parse value diagrc(8,'D H'buffer_start'.4') with . . +16 diag_msg
       parse value diag_msg with host_addr current_buffer junk '15'x
       most_recent_cmd = D2X(X2D(retbuff_anchor) + X2D(18))
    parse value diagrc(8,'D H'most_recent_cmd'.4') with . . +16 diag_msg
       parse value diag_msg with host_addr most_recent_cmd junk '15'x
/* Chain through the GSDBK containing the command retrieve buffer    *
 * data, pulling out each of the seven available buffer entries. The *
 * length of each buffer is stored and is picked out to determine the*
 * length of command issued. Each of the 7 buffers is offset x'91'   *
 * from each other. Buffer length is x'14' into each buffer definition
*/
        do buffers = 1 to 7
           recent_check = D2X(X2D(current_buffer) + (buffers//4) + 15)
           recent_check + RIGHT(recent_check,8,'0')
           if recent_check = most_recent_cmd then most_recent = buffers
            else nop
           buffer_length_pointer = D2X(X2D(current_buffer) + X2D(14))
           parse value diagrc(8,'D H'buffer_length_pointer'.4')
                                                   with . . +16 diag_msg
           parse value diag_msg with host_addr buffer_length junk '15'x
     buffer_length = SUBSTR(STRIP(buffer_length),buffer_length_offset,2)
           current_boundary = D2X(X2D(current_buffer) + X2D(14))
           do storage_display = 1 to ((X2D(buffer_length)%16) + 1)
              parse value diagrc(8,'D H'current_boundary'.10')
                                                   with . . +16 diag_msg
              parse value diag_msg
          with host_addr word.1 word.2 word.3 word.4 junk '15'x diag_msg
              do fullwords = 1 to 4
                 if DATATYPE(STRIP(word.fullwords),'X') ¬= 1 then nop
     else cmd_buffer.buffers = cmd_buffer.buffers||STRIP(word.fullwords)
              end
              current_boundary = D2X(X2D(current_boundary) + X2D(10))
           end
/* Check to see if the buffer has actually been used. If it has, then*
 * use the buffer length value previously extracted to pull out the  *
 * required number of bytes which make up the command stored in this *
 * buffer. Update buffer length and buffer data pointers.            */
           if X2D(buffer_length) = 0 then cmd_buffer.buffers = ''
            else do
               cmd_buffer.buffers = SUBSTR(cmd_buffer.buffers,
                              buffer_data_offset,(X2D(buffer_length)*2))
               cmd_buffer.buffers = X2C(STRIP(cmd_buffer.buffers))
            end
           buffer_data_offset = buffer_data_offset + 2
           buffer_length_offset = buffer_length_offset + 2
           if buffer_length_offset = 9 then do
              buffer_length_offset = 1
              buffer_data_offset = 3
              current_buffer = D2X(X2D(current_buffer) + X2D(4))
           end
            else nop
/* Move to next buffer entry                                         */
           current_buffer = D2X(X2D(current_buffer) + X2D(90))
        end
     end
 end
/* If the buffer entries are all blanks, we have not used the buffer */
do buffer_number = 1 to 7
   if STRIP(cmd_buffer.buffer_number) = '' then nop
    else buffer_used = 1
end
/* Tell me about the users' buffer                                   */
say 'User'hi||uid||lo'is logged on'status
say
say 'Last CP command executed was'hi||last_cp_cmd||lo
say
select
   when no_buffer = 1 then say 'User'hi||uid||lo'has no retrieve buffer'
   when buffer_used = 0
          then say 'User'hi||uid||lo'has not used their retrieve buffer'
   otherwise do
      say 'Commands issued by'hi||uid||lo'('hi'1'lo'= Most Recent)'
      say
      count = 0
/* Display the commands in "most-recently-used" order              */
       do buffer_number = most_recent to 1 by -1
          count = count + 1
          say hi||count||'.'||lo||cmd_buffer.buffer_number
       end
       do buffer_number = 7 to most_recent + 1 by - 1
          count = count + 1
          say hi||count||'.'||lo||cmd_buffer.buffer_number
       end
    end
end
say
address cms 'DROPBUF 'bufno
exit 0

Martin Wicks
Senior VM Systems Programmer
Hampshire County Council (UK)

