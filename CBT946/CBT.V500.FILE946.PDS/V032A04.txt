Secondary authorisation

This program is used to provide secondary authorisation.  The
entered password is used to select the appropriate record.  The
remainder of the record is then stacked LIFO.  This is then used to
select and personalise the appropriate menu, and in this way
controls the functions that the user is able to exercise.  The
particular problem that this procedure was developed to solve was
a common account (for teacher grade entering) which could be
logged-on to by a number of individuals.  By assigning secondary
authorisation codes we were able to tailor the flow for each.  The
program was developed and is running on a VM/SP Release 3
system.  (The assembly was run, allowing macro expansion to
occur for clarity.)

AUTHCHK  CSECT
         PRINT NOGEN
         $BUFADR                  Set globals for Buffer address
         PRINT ON,GEN
         KNPBEGIN R12             Load our Base register
         USING *,R15
         EQU   0
         EQU   1
         EQU   2
         EQU   3
         EQU   4
         EQU   5
         EQU   6
         EQU   7
         EQU   8
         EQU   9
         EQU   10
         EQU   11
         EQU   12
         EQU   13
         EQU   14
         EQU   15
         STM   R14,R12,12(R13)     SAVE THE CALLERS REGS
         LR    R3,R13              SAVE SAVE ADDRESS
         LA    R13,$REGSV          POINT TO OUR SAVE
         ST    R13,8(R3)           FORWARD CHAIN SAVE AREAS
         ST    R3,4(R13)           BACK CHAIN SAVE AREAS
         ST    R1,0(R13)           SAVE PARAMETER POINTER
         L     R3,32(R3)           PUT R3 BACK THE WAY IT WAS
         B     SETBASE
$REGSV   DS    9D
         DROP  R15
SETBASE  DS    0H
         USING $REGSV,R13
         USING &REGSV+4080*1,R12
         LA    R12,4080(R13)
         B     $$USER
         PUSH  PRINT               BRANCH AROUND IDENTIFYING LITERALS
         PRINT GEN
         DC    CL4' '
         DC    CL8'********'
         DC    CL4' '
         DC    C'AUTHCHK 05/20/87 - 21.00'
         DC    C' KNAPP COLLEGE DEVELOPED PROGRAM'
         DC    CL4' '
         DC    CL8'********'
         DC    CL4' '
$$USER   DS    0D                  BEGIN FUNCTION CODE
         POP   PRINT
         PRINT NOGEN
         SR    R3,R3               set zero return code
         FSOPEN FSCB=PASSFL,ERROR=NOFILE  OPEN OUR PASSWORD FILE
         FSPOINT FSCB=PASSFL,RDPNT=1
* Query the Console and set the interupt trap for it                  *
         SR    R1,R1
         BCTR  R1,0                -1 FOR CONSOLE
         DC    X'83',X'12',AL2(X'0024') DIAGNOSE 24 FOR CONSOLE
         STH   R1,CONADDR          AND SAVE IT
         CNOP  0,4
         BAL   R1,HNDSVC           PERFORM SVC 202 SET INTERUPT
         DC    CL8'HNDINT'
         DC    CL4'SET'
         DC    CL4'DISP'           SYMBOLIC NAME FOR WAITD
         DC    AL4(0)              NO INTERUPT ROUTINE
CONADDR  DC    XL2'00'             CONSOLE VIRTUAL ADDRESS--PLUGGED
         DC    CL1'WAIT'           WILL USE WAITD MACRO
         DC    C'C
         DC    XL4'FFFFFFFF'
HNDSVC   SVC   202
         DC    AL4(1)
* Make sure console is settled down                                   *
         WAITT
         SR    R3,R3               set zero return code
* Now display for format of screen                                    *
         LH    R2,CONADDR          PERFORM PANEL DISPLAY
         TIO   0(R2)               AVAILABLE ?
         BNZ   *-4                 NO--RETEST
         LA    R1,CLRCCW
         DC    X'83',X'12',AL2(X'0058')
RETRY    DS    0H
         LH    R2,CONADDR           PERFORM PANEL DISPLAY
         TIO   0(R2)
         BNZ   *-4
         LA    R1,WRTBASE
         DC    X'83',X'12',AL2(X'0058')
         TIO   0(R2)
         BNZ   *-4
         WAITD DISP                Wait for attention interrupt
         LH    R2,CONADDR          Set virtual console address
         LA    R1,READ             Set for read
         DC    X'83',X'12',AL2(X'0058') Diagnose read modified
         TIO   0(R2)               Wait for I/O Completion
         BNZ   *-4                 Not complete loop to retest
         OC    ENTERPAS,BLANK      Force response to Upper case
* Run a loop of the Auth. File seeking a match for Entered value      *
CHKAUTH DS     0H
        FSREAD FSCB=PASSFL,ERROR=NOAUTH
        CLC    CURPASS,ENTERPAS   Check entered against Current
        BNE    CHKAUTH            nomatch continue to look
* Matched. Stack the remaining 80 bytes of the record and exit        *
        LA     R1,CMSPARM         Point to our PLIST
        SVC    202                And call for stack
        DC     AL4(1)
        WAITT                     Make sure console quiet
* By not resetting R3 code, The return code will indicate Number of   *
* misses on the authorization code.                                   *
         B     ALLDONE             And Exit
* Open error on Authorization Parm file. Transfer Error code to R3    *
* Exit will then set this for return code.                            *
NOFILE   DS    0H
         LR    R3,R15              Pass back Error code from open
         B     SKPCLR              And exit
* No match. Add to tries. If Max exceeded exit, else loop to try again*
NOAUTH   DS    0H
         LA    R3,1(R3)            add 1 to misses
         C     R3,MAXTRIES         Has he had his chances
         BNL   ABORT               Yes--dump him out
         FSPOINT FSCB=PASSFL,RDPNT=1 Reset Auth. File to start
         MVC   ENTERPAS,=CL8' '    Clear what he gave us
         MVC   PANMSG,=C'Code Word in ERROR Please Reenter'
         B     RETRY               Give him another shot at it
ABORT    DS    0H
         LA    R3,255              Indicate authorization Failure
* All done. Clear the Interrupt trap and return                       *
ALLDONE  DS    0H
         HNDINT CLR,DISP           CLEAR CONSOLE INTERUPT TRAP
         FSCLOSE FSCB=PASSFL       Close the authorization file
SKPCLR   DS    0H
         LR    R15,R3              MOVE IN OUR RETURN CODE
         L     R13,4(R13)
         RETURN (14,12),RC=(15)    AND RETURN
MAXTRIES DC    F'5'
         DS    0D
WRTBASE  DC    X'29',AL3(BASEPAN),AL1(X'20),AL1(X'80),AL2(BASLN)
         DS    0D
READ     DC    X'2A',AL3(READBUF),AL1(X'20'),AL1(X'80'),AL2(X'00E')
         DS    0D
CLRCCW   DC    X'19',AL3(0),X'20',X'FF',AL2(1)
BLANK    DC    CL8' '
INBUFF   DS    0CL88
CURPASS  DS    CL8
STKLINE  DS    CL80               WORK AREA NUMERIC PORTION TRANSLATE
STKLEN   EQU   *-STKLINE
         DS    0D
CMSPARM  DC    CL8'ATTN'
METHOD   DC    CL4'LIFO'
PARMLN   DC    AL1(STKLEN)
         DC    AL3(STKLINE)
         DC    8X'FF'
PASSFL   FSCB 'PASSCHK WORD *',RECFM=F,BUFFER=INBUFF,BSIZE=88
         LTORG                    ESTABLISH LITERAL POOL
               =CL8'STATE'
               =CL8'POINT'
               =CL8'CONWAIT'
               =CL8'RDBUF'
               =CL8' '
               =CL8'FINIS'
               =H'0'
               =H'1'
               =C'Code Word in ERROR Please Reenter'
         DS    0D
READBUF  DS    0CL9
AID      DS    CL1
         DS    CL5
ENTERPAS DC    CL8' '
         DS    0D
         PRINT ON,GEN
BASEPAN  $WCC  ALARM,RESTORE,RESET
BASEPAN DC X'C7'
         $SBA  1,1
      DC  X'114040'
         $SF   SKIP
      DC  X'1DF0'
         DC    C'  Authorization Check -   '
         $SF   SKIP
      DC  X'1DF0'
         $SBA  2,1
      DC  X'11C150'
         $SF   SKIP
      DC  X'1DF0'
         DC    C'  Please Enter Your Code Word:  '
         $SF   SKIP
      DC  X'1DF0'
         $SBA  3,1
      DC  X'11C260'
         $SF   MDT,NO
      DC  X'1D4D'
         $IC
         DC    X'13'
         DC    CL8' '
         $SF   SKIP
      DC  X'1DF0'
         $SBA  4,7
      DC  X'11C3F6'
         $SF   SKIP,HIGH
      DC  X'1DF8'
PANMSG   DC    CL33' '
         $SF   SKIP
      DC  X'1DF0'
BASLN    EQU   *-BASEPAN
         END


Maurice E Smyth
Computer Laboratory Instructor
Knapp College of Business (USA) ) Xephon 1989

