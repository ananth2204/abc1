Several useful FORTRAN subprograms

Users creating FORTRAN programs often need to use special
subprograms.  This set of subprograms makes it possible for the
user to interact with the CP/CMS operating system, to clear the
screen, and to measure the duration of the program itself in order
to optimise it.  All these subprograms may be used with VS
FORTRAN Release 3 and higher.

The subprograms are:

%   DATES - returns the day, the month, and the year.  Its syntax
is:

         CALL DATES(DAY)
         CHARACTER*8 DAY

%   DATEI - returns the day, the month, and the year.  Its syntax
is:

         CALL DATEI(DD,MM,YY)
         INTEGER*4 DD,MM,YY

%   TIMES - return the hour, the minute, and the second.  Its
syntax is:

         CALL TIMES(TIME)
         CHARACTER*8 TIME

%   TIMEI - returns the hour, the minute, and the second.  Its
syntax is:

         CALL TIMEI(HH,MM,SS)
         INTEGER*4  HH,MM,SS

%   CALCMS - issues a CP/CMS command.  COMND contains
the command, and the return code is obtained from RETC.
No 'CP' prefix is necessary for CP commands.  The syntax is:

         CALL CALCMS(COMND,RETC)
         CHARACTER*80 COMND
         INTEGER*4    RETC

%   CLEARS - clears the screen. Its syntax is:

         CALL CLEARS

%   WAIT - waits for the user to press ENTER.  Its syntax is:

         CALL WAIT

%   USERID - returns the user-id.  Its syntax is:

         CALL USERID(USER)
         CHARACTER*8 USER

%   CPUSEC - returns the time elapsed since the first invocation
of this subprogram.  Its syntax is:

         CALL CPUSEC(K,J)
         INTEGER*4 K,J

    K contains the time in microseconds (LSB=26.04166), J=0 at
the first invocation, else 1.

%   INITT - this routine initialises the CMS TOD account
support.  The syntax is:

         IERR=INITT()
         INTEGER*4 IERR

    IERR contains the following error codes:

    IERR=0 OK
    IERR=4 Enable already issued
    IERR=8 ECMODE not set on
    IERR=20 CMS unable to return the timer area address

    The user must have the ECMODE set ON.

%   IGETT - this subroutine retrieves information stored in the
communication area.  The time is in microseconds.  The
syntax is:

         CALL IGETT(I1,I2,IERR)
         INTEGER*4 I1,I2,IERR

    I1 is the first word
    I2 is the second word
    IERR is the error indicator

    The user must have the ECMODE set ON.

    The following algorithm is used to convert integer time into
real, because the time is given as an unsigned double word
integer, which is not available as a FORTRAN variable:

         IF ((I1.EQ.0).AND.(I2.GE.0)) TIME=I2
         IF ((I1.EQ.0).AND.(I2.LT.0 )) TIME=2.**32+I2
         IF (I1.GT.0) TIME=2.**32+I1*2.**32-1

DATES ASSEMBLE

**********************************************************************
*  RETURNS MM/DD/GG AS CHARACTER*8 VARIABLE                          *
*  CALL DATES(DAYS)      CHAR  DAYS*8                                *
**********************************************************************
DATES    FORTOS 'MIKEC I'
         LA    R5,DANI           DIAG BUFFER
         DIAG  R5,R9,X'0C'       MAKE DIAG
         L     R1,0(R1)
         MVC   0(8,R1),0(R5)     UPDATE FORTRAN VARIABLE
         B     EXIT              RETURN
         DS    0D
DANI     DS    CL32
         END

DATEI ASSEMBLE

**********************************************************************
*  RETURNS DD MM GG AS INTEGERS                                      *
**********************************************************************
DATEI    FORTOS  'MIKEC I'
         LR    R2,R1               SAVE R1
         LA    R5,DANI             R5=A(DIAG BUF)
         DIAG  R5,R6,X'0C'         ISSUE DIAG
         MVC   MJE1+6(2),DANI      MOVE TO WORK AREA
         MVC   DAN1+6(2),DANI+3    SAME
         MVC   GOD1+6(2),DANI+6    SAME
         PACK  DAN1,DAN1           CONVERT DAYS TO INTEGER
         CVB   R8,DAN1
         L     R1,0(R2)
         ST    R8,0(R1)            UPDATE FORTRAN VARIABLE
         PACK  GOD1,GOD1           CONVERT YEAR TO INTEGER
         CVB   R8,GOD1
         L     R1,8(R2)
         ST    R8,0(R1)       UPDATE FORTRAN VARIABLE
         PACK  MJE1,MJE1      CONVERT MONTH TO INTEGER
         CVB   R8,MJE1
         L     R1,4(R2)
         ST    R8,0(R1)       UPDATE FORTRAN VARIABLE
         B     EXIT           RETURN
         DS    0D
DANI     DS    CL32           DIAG BUFF
DAN1     DC    D'0'           WORK AREA FOR PACK
GOD1     DC    D'0'           SAME
MJE1     DC    D'0'           SAME
         END

TIMES ASSEMBLE

**********************************************************************
*  RETURNS HH:MIN:SEC AS CHARACTER*8 VARIABLE                        *
*  CALL TIMES(CLOCK)  CHARACTER*8 CLOCK*8                            *
**********************************************************************
TIMES    FORTOS   'MIKEC I'
         LA    R5,DANI           DIAG BUFFER
         DIAG  R5,R9,X'0C'       MAKE DIAG
         L     R1,0(R1)
         MVC   0(8,R1),8(R5)     UPDATE FORTRAN VARIABLE
         B     EXIT              RETURN
         DS    0D
DANI     DS    CL32
         END

TIMEI ASSEMBLE

**********************************************************************
*  RETURNS HH MIN SEC AS INTEGERS                                    *
*  CALL TIMEI(HH,MIN,SEK)  INTGER*4 HH,MM.SEC                        *
**********************************************************************
TIMEI    FORTOS 'MIKEC I'
         LR    R2,R1                     SAVE R1
         LA    R5,DIAGBUFF
         DIAG  R5,R6,X'0C'               ISSUE DIAG
         MVC   SAT1+6(2),DIAGBUFF+8      MOVE DATA TO WORK AREA
         MVC   MIN1+6(2),DIAGBUFF+11     SAME
         MVC   SEK1+6(2),DIAGBUFF+14     SAME
         PACK  SAT1,SAT1
         CVB   R8,SAT1                   CONVERT TO INTEGER
         L     R1,0(R2)
         ST    R8,0(R1)                  UPDATE FORTRAN VARIABLE
         PACK  MIN1,MIN1
         CVB   R8,MIN1                   CONVERT TO INTEGER
         L     R1,4(R2)
         ST    R8,0(R1)                  UPDATE FORTRAN VARIABLE
         PACK  SEK1,SEK1
         CVB   R8,SEK1                   CONVERT TO INTEGER
         L     R1,8(R2)
         ST    R8,0(R1)                  UPDATE FORTRAN VARIABLE
         B     EXIT                      RETURN
         DS    0D
DIAGBUFF DS    CL32
SAT1     DC    D'0'
MIN1     DC    D'0'
SEK1     DC    D'0'
         END

CALCMS ASSEMBLE

**********************************************************************
* SUBROUTINE FOR CALLING CP/CMS COMMANDS FROM FORTRAN PROGRAM        *
* ENTRIES : CHARACTER STRING CONTAINING COMMAND --- INPUT            *
*           INTEGER  CONTAINING  RET CODE       --- OUTPUT           *
* ON ENTRY : R1 CONTAINS ADDRESS OF PLIST WHICH LOOKS LIKE THIS      *
*        DC  AL4(INPUT)                                              *
*        DC  AL4(RETCODE)                                            *
*        DC  AL1(X'80')                                              *
*        DC  AL3(L'INPUT)                                            *
**********************************************************************
CALCMS   FORTOS 'MIKEC I'
         LR    R5,R1              SAVE R1
         L     R4,0(R5)           R4=A(START OF STRING)
         L     R6,8(R5)
         L     R7,0(R6)           R7=LENGTH OF STRING
         AR    R7,R4              CALC END OF STRING
         ST    R4,BEG             STORE BEG ADDRES
         ST    R7,END             STORE END ADDRES
         LA    R1,PLIST
         LA    R0,EPLIST
         ICM   R1,B'1000',=X'02' SIGN SUBCOM TO CMS
         SVC   202                LET CMS DO THE JOB
         DC    AL4(*+4)
         L     R6,4(R5)
         ST    R15,0(R6)          GIVE RETCODE TO FORTRAN
         B     EXIT
PLIST    DS    0F
         DC    CL8'CMS'
EPLIST   DS    0F
         DC    A(PLIST)
BEG      DS    A
END      DS    A
         DC    A(0)
         END

CLEARS ASSEMBLE

**********************************************************************
*        ROUTINE FOR CLEARING THE SCREEN                             *
**********************************************************************
CLEARS   FORTOS 'MIKEC I'
         USING NUCON,R0
         WAITT
         LA    R1,CCW             R1=A(CCW)
         L     R2,=F'-1'          GET CONSOLE ADDRESS
         DIAG  R2,R3,X'024'       R2=A(CONS)
         DIAG  R1,R2,X'58'        EXECUTE CONSOLE DIAGNOSE
         B     EXIT               RETURN
         DS    0D                 ALIGN CCW ON DW BOUNDARY
CCW      DC    X'19'              FULL SCREEN CCW
         DS    AL3(0)             BUFFER ADDRESS
         DC    B'00100000'        SLI FLAG
         DC    B'11111111'        CTL BYTE
         DC    H'1759'            BUFFER LENGTH
         END

WAIT ASSEMBLE

**********************************************************************
*  THIS PROGRAM WAITS UNTIL THE USER PRESSES ENTER                   *
**********************************************************************
WAIT     FORTOS 'MIKEC.I'
         LA    R2,CMMD
         LA    R3,CMMDL
         DIAG  R2,R3,X'08'
         B     EXIT
CMMD     DC    C'SLEEP'
CMMDL    EQU   *-CMMD
         END

USERID ASSEMBLE

**********************************************************************
* ROUTINE FOR GETTING USERID                                         *
* CALL USERID(USER)   CHARACTER*8 USER                               *
**********************************************************************
USERID   FORTOS  'MIKEC I'
         L     R4,0(1)            TAKE  USER VAR
         LA    R4,0(4)
         LA    R6,BUFFER          PREPARE FOR DIAGNOSE
         LA    R7,L'BUFF          LENGTH OF BUFFER
         DIAG  R6,R7,X'00'        DIAGNOSE
         MVC   0(8,4),BUFFER+16   COPY USERID
         B     EXIT               RETURN
BUFFER   DS    0D                 ALIGN BUFFER ON DW BOUNDARY
BUFF     DS    CL32
         END

CPUSEC ASSEMBLE

**********************************************************************
* THE CALL IS: CALL CPUSEC(K,J)                                      *
* K - AN INTEGER, IT CONTAINS TIME (LSB=26.04166 MICROSECS)          *
* FROM START OF PROGRAM                                              *
* J - INTEGER 0 BEFORE FIRST ROUTINE CALL, OTHERWISE 1               *
**********************************************************************
CPUSEC   FORTOS 'MIKEC I.'
         LM    R2,R3,0(1)          LOAD  ADDR 1,2 ARGUMENT
         L     R4,0(3)             LOAD  2 ARGUMENT
         C     R4,=F'1'
         BE    NOTFIRST
         STIMER REAL,TUINTVL=STIM
         LA    R4,R1               SET AGN SWITCH
         SR    R1,R1
         B     EXIT1
NOTFIRST TTIMER
         L     R1,STIM
         SR    R1,R0
EXIT1    ST    R1,0(2)
         ST    R4,0(3)
         B     EXIT
STIM     DC    F'2000000000'
         END

INITT ASSEMBLE

**********************************************************************
* THIS ROUTINE ACTIVATES THE TOD ACCOUNTING INTERFACE                *
* THE ECMODE MUST BE SET ON                                          *
* CALLING SEQUENCE                                                   *
* CALL:  IERR=INITT()                                                *
* VARIABLE IERR CONTAINS ERROR CODE                                  *
* IERR=0    OK                                                       *
* IERR=4    ENABLE ALREADY ISSUED                                    *
* IERR=8    ECMODE NOT SET ON                                        *
* IERR=20   CMS UNABLE TO RETURN THE TIMER AREA ADDRESS              *
**********************************************************************
INITT    FORTOS 'MIKEC I.'
         LA    1,PLIST
         SVC   202
         DC    AL4(1)
         LR    R0,R15
         SR    R15,R15
         B     EXIT
PLIST    DS    0D
         DC    CL8'TODACCNT'
         DC    CL8'ENABLE'
         DC    AL4(0)
         END

IGETT ASSEMBLE

**********************************************************************
* THIS FUNCTION RETRIEVES INFORMATION STORED IN COMMUNICATION AREA   *
* TIME IS IN MICRO-SECONDS                                           *
* CALLING SEQUENCE:                                                  *
* CALL IGETT(I1,I2,IERR)                                             *
* I1=FIRST WORD                                                      *
* I2=SECOND WORD                                                     *
* IERR=ERROR INDICATOR                                               *
* ALGORITHM FOR CONVERTING INTEGER TIME INTO REAL                    *
* BECAUSE TIME IS GIVEN AS UNSIGNED DOUBLE WORD INTEGER WHICH IS NOT *
* AVAILABLE AS FORTRAN VARIABLE                                      *
* IF ((I1.EQ.0).AND.(I2.GE.0)) TIME=I2                               *
* IF ((I1.EQ.0).AND.(I2.LT.0 )) TIME=2.**32+I2                       *
* IF (I1.GT.0) TIME=2.**32+I1*2.**32-1                               *
* IERR=0    OK                                                       *
* IERR=I2   INITT HAS NOT BEEN ISSUED                                *
* IERR=24   CMS FREE STORAGE NOT AVAILABLE                           *
**********************************************************************
IGETT    FORTOS 'MIKEC I.'
         LR    R10,R1              SAVE R1
         LA    1,PLIST
         SVC   202
         DC    AL4(ERROR)
         L     8,ANS1
         L     9,ANS2
         SRDL  8,12(0)
         L     R11,0(R10)
         ST    R8,0(R11)
         L     R11,4(R10)
         ST    R9,0(R11)
         L     R11,8(R10)
         SR    R0,R0
         ST    R0,0(R11)
         B     EXIT
ERROR    LR    R0,R15
         L     R11,8(R10)
         ST    R0,0(R11)
         B     EXIT
PLIST    DS    0D
         DC    CL8'TODACCNT'
         DC    CL8'QUERY'
ANS1     DS    CL4
ANS2     DS    CL4
         END

FORTOS MACRO

         MACRO
&LAB     FORTOS &AUTOR
&LAB     CSECT
         LCLC  &AUTHOR
&AUTHOR  SETC  '&SYSLIST(1)'         GET THE FIRST PARAMETER
         AIF   (T'&AUTOR NE  '0').OK
         MNOTE  4,'THE AUTHOR'S NAME NOT SET CORRECTLY.DEFAULT USED'
&AUTHOR  SETC  '''MIKEC I.'''        USED MY NAME FOR DEFAULT
&a.OK      ANOP
         USING *,R15                 USE R15 FOR TEMP BASE
         STM   R14,R12,12(R13)       SAVE ALL REGISTERS
         ST    R13,*+12              SAVE MY R13
         BAL   R13,POC&SYSNDX        USE NEW BASE
         USING *,R13
         DS    18F                   SAVE AREA
EXIT     L     R13,4(R13)            RESTORE R13
         L     R14,12(R13)           RESTORE OTHER REGISTERS
         LM    R2,R12,28(R13)
         BR    R14                   RETURN TO CALLER
POC&SYSNDX B     COPYRGHT            BRANCH AROUND COPYRIGHT
MODNAME  DC    CL8'&LAB'             MODULE NAME
         DC    C'&SYSDATE - '        CREATE DATE
         DC    C&AUTHOR              AUTHOR
         DC    C'&SYSTIME - '        CREATE TIME
         DS    0H
COPYRGHT EQU   *
         PRINT NOGEN
         REGEQU
         PRINT GEN
         MEND


Ivica Mikec
Systems Programmer
Zerc Split (Yugoslavia) ) Ivica Mikec 1989


