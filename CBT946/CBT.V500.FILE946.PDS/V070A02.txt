Collection programs

We needed to know how often a REXX, EXEC2, or XEDIT
procedure is called during a day, in order to load those most
frequently called in the installation saved segment CMSINST.

I found a way to get this information. Just before the interpreter
is called, the procedure name is taken and written, together
with other information, to a storage area. The information in
that storage area is retrieved periodically and saved to a file.

We couldn't see any performance degradation to our VM
system from this collection work. This collection works on
VM/XA SP 2.1 and CMS 5.6.

This data collection consists of three separate programs. The
first section consists of a local fix to the DMSEXI module.
This local fix gets REXX, EXEC2, or XEDIT program names,
when they are called, and writes a record in a storage area.

The second section is an Assembler program that gets the
collected information from storage and writes it to file.

The third section is a REXX procedure that reads the file from
the second section and converts the collected data to a different
format and counts all procedures.

To make this feature available on your system, perform the
following steps.

1      Create a shared segment named COLLECT

      For example

      DEFSEG COLLECT A00-B00 SW
      SAVESEG COLLECT

2      Create a machine named COLLECT. The 191 disk of this
      machine has to be big enough to save a file for every day.
      A good size is 10 3380 cylinders.

3      Add the local fix to the DMSEXI module and make a new
      CMS nucleus.

      Create a file DMSEXI AUXLCL on your CMS local disk
      (395) with:

      L00001LC LCL LC00001   *Collection.

      Create the file DMSEXI L00001LC - described later.

      Generate a new CMS nucleus.

4      Make the COLLECT module and the COLLECT procedure
      available to the COLLECT machine.

      To stop the collection, you can purge the shared segment by:

      PURGE NSS NAME COLLECT

The data collection stops until you define a new segment.

You can manually display the data in storage by:

      CP D Txxxxxx.yyy

where xxxxxx is the start address, and yyy is the length.


DMSEXI L00001LC

*        When the collected data reaches the value defined in SSEND,
*        an SMSG command is issued to a machine named COLLECT. This
*        machine must be in a wait status ready to receive the SMSG and
*        to read the collected data from storage.
*        A record in storage has the following format:
*        0      8       16      24       32
*        USERID DATE    TIME    FILENAME FILETYPE
*
*        Create a file named DMSEXI AUXLCL with an entry:
*        L00001LC LCL LC00001    * Collection
*        Use the XEDIT command with CTL option to insert this local fix.
*        XEDIT DMSEXI ASSEMBLE * (CTL ctlfile
*                                     ctlfile = Control file
*        Copy the code section after the label EXECUTE and the data
*        section to the other data definitions.
*        Then assemble the file DMSEXI and build a new CMS Nucleus.
         SEGMENT FIND,NAME='COLLECT'    FIND SEGMENT COLLECT
         CH    R15,=H'12'               IF ALREADY LOADED
         BE    LOADOK                   NO LOAD
         LTR   R15,R15                  IF ERROR
         BNZ   SEGEND                   DO NOTHING
         SEGMENT LOAD,NAME='COLLECT'    LOAD SEGMENT COLLECT
         LTR   R15,R15                  IF ERROR
         BNZ   SEGEND                   DO NOTHING
LOADOK   EQU   *
         USING SSEGM,R3
         LR    R2,R1                    SAVE BEGIN ADDRESS IN R2
         L     R3,0(R1)                 LOAD NEXT AVAILABLE DISPLACEMEN
         LA    R4,SSEGML(R3)            NEXT FREE ADDRESS
         AR    R2,R3                    ADDRESS
         SH    R0,=AL2(SSEGML)          END ADDRESS MINUS DATA LENGTH
         CR    R2,R0                    IF HIGHER THEN ALLOWED
         BH    SEGEND                   EXIT
         AH    R2,L'SSEGMD              ADD DISPLACEMENT LENGTH
         CR    R2,R1                    IF LOWER THEN ALLOWED
         BL    SEGEND                   EXIT
         CS    R3,R4,0(R1)              STORE NEXT ADDRESS
         BC    4,LOADOK                 IF CHANGED RETRY
         AR    R3,R1                    ADDRESS
         LA    R15,SSEGMU               USER-ID
         LA    R4,24                    LENGTH OF AREA
         DC    X'83F40000'              DIAG CODE
         MVC   SSEGMU,SSEGMU+16         MOVE USER-ID TO SEGMENT
         LA    R15,SSEGMT               PSEUDE TIMER
         DC    X'83F0000C'              DIAG CODE
         MVC   SSEGMF,WORKFBN           MOVE FNAME FTYPE TO SEGMENT
         SR    R0,R3                    UNTIL END OF SEGMENT
         C     R0,SSEND                 END REACHED
         BH    SEGEND                   IF REACHED
SEGFULL  EQU   *
         AH    R0,=AL2(SSEGML)          ADD DISPLACEMENT
         C     R0,SSEND                 HAS SMSG ALREADY BEEN SENT
         BNH   SEGEND                   IF YES
         LA    R2,4(R1)                 RESPONSE BUFFER
         LA    R4,4                     LENGTH OF RESPONSE BUFFER
         LA    R1,CMMD                  COMMAND SMSG TO COLLECT
         LA    R3,CMMDL                 COMMAND LENGTH
         ICM   R3,B'1000',=X'40'        OPTION FOR RETURN IN BUFFER
         DC    X'83130008'              DIAG CODE
SEGEND   EQU   *
         DROP  R3
*        Data definitions and equates
         DS    0D
CMMD     DC    C'SMSG COLLECT COLLECT'
CMMDL    EQU   *-CMMD
SSEND    DC    X'00080000'    X'80000' BEFORE END
SSEGM    DSECT
SSEGMD   DS    D
SSEGMU   DS    D              USER-ID
SSEGMT   DS    CL16           DATE TIME
SSEGMF   DS    CL16           FILENAME FILETYPE
SSEGML   EQU   *-SSEGMU       RECORD LENGTH
DMSEXI   CSECT


PROFILE EXEC

/*
 This is the PROFILE EXEC for the COLLECT machine.
 With this EXEC the COLLECT machine gets in a wait state. It will
 wake up with an SMSG command. Then it gets the collected data from
 storage with the COLLECT module and converts the data with the COLLECT
 procedure.
*/
ADDRESS COMMAND
COLLECT                                /* Get data from storage      */
EXEC COLLECT                           /* Convert data               */
DO i = 1                               /*Main loop                   */
  WAKEUP '(SMSG'                       /*Enter the wait state        */
  SELECT
    WHEN rc = 1 THEN DO                /* SMSG interrupt             */
      PULL . . msg .                   /* Get info                   */
      IF msg = 'COLLECT' THEN DO       /* If keyword collection      */
        COLLECT                        /* Get data from storage      */
        EXEC COLLECT                   /* Convert data               */
      END
    END
    WHEN rc = 6 THEN EXIT              /* Console interrupt          */
    OTHERWISE NOP                      /* Ignore other interrupts    */
  END
END


COLLECT ASSEMBLE

* The COLLECT program takes the collected data from the collect segment
* and writes it to file. The data in the file will have the
* following format:
* 1      9       17      25       33      41
* Date   time    userid  filename filetype
*
* In the segment the first 16 bytes are reserved. The first 8 bytes are
* the displacement of the next free area. The second 8 bytes are a
* dummy area for the response to the DIAG 8 function.
* This program functions as follows:
* The first 1000 records (40 bytes long) are written to a file. Then
* the first 8 bytes (displacement) will be reset to zero. Then the
* rest of the collected data will be written to a file.
*
COLLECT  CSECT
         PRINT NOGEN
         BALR  R12,0                    ADDRESSING
         USING *,R12                    ADDRESSING
         ST    R14,SAVE                 SAVE RETURN ADDRESS
         SEGMENT FIND,NAME='COLLECT'    FIND SEGMENT COLLECT
         CH    R15,=H'12'               IF ALREADY LOADED
         BE    LOADOK                   DO NOT LOAD
         LTR   R15,R15                  IF ERROR
         BNZ   EXIT                     EXIT
         SEGMENT LOAD,NAME='COLLECT'    LOAD SEGMENT COLLECT
         LTR   R15,R15                  IF ERROR
         BNZ   EXIT                     EXIT
LOADOK   EQU   *
         LR    R2,R1                    SAVE R1 IN R2 BEGIN ADDRESS
         LR    R6,R1                    SAVE R1 IN R6 BEGIN ADDRESS
         LR    R7,R0                    SAVE R0 IN R7 END ADDRESS
         LA    R2,8(R2)                 SKIP 8 BYTES
         LA    R5,1000                  1000 RECORDS TO READ
LOOP1    EQU   *
         CLC   0(8,R2),=X'0000000000000000' NO MORE DATA
         BE    CLEARD                   CLEAR COUNTER
         FSWRITE 'COLLECT FILE A',BUFFER=(R2),BSIZE=40,ERROR=EXIT,     X
               FORM=E                   WRITE TO FILE
         XC    0(40,R2),0(R2)           CLEAR AREA
         LA    R2,40(R2)                INCREMENT POINTER
         CR    R2,R7                    END OF SEGMENT REACHED
         BH    CLEARD                   CLEAR DISPLACEMENT
         BCT   R5,LOOP1                 READ NEXT RECORD
CLEARD   EQU   *
         XC    0(8,R6),0(R6)            CLEAR DISPLACEMENT
LOOP2    EQU   *
         CLC   0(8,R2),=X'0000000000000000' NO MORE DATA
         BE    EXIT                     EXIT
         FSWRITE 'COLLECT FILE A',BUFFER=(R2),BSIZE=40,ERROR=EXIT,     X
               FORM=E                   WRITE TO FILE
         XC    0(40,R2),0(R2)           CLEAR AREA
         LA    R2,40(R2)                INCREMENT POINTER
         CR    R2,R7                    END OF SEGMENT REACHED
         BH    EXIT                     EXIT
         B     LOOP2                    READ NEXT RECORD
EXIT     DS    0H
         FSCLOSE 'COLLECT FILE A'
         L     R14,SAVE
         BR    R14
SAVE     DS    F
         REGEQU
         END


COLLECT EXEC

/*Performs data collection conversion                                 */
/*This procedure takes the collected data from file COLLECT FILE and  */
/*computes all procedure counts                                       */
/*The file COLLECT FILE has the format:                               */
/*1       9       17     25       32                                  */
/*USERID  DATE    TIME   FILENAME FILETYPE                            */
/* This EXEC takes only the filename and filetypes and computes the   */
/* counter for all procedures                                         */
/* The format of the output file is:                                  */
/* EPRERELN EXEC       7463                                           */
/* EPQNQRDR EXEC       5644                                           */
/* ISPSTART EXEC       2933                                           */
/* PROFILE  EXEC       1994                                           */
/* Write your own conversion procedure to make your own statistics    */
Address COMMAND
Rc = 0                                 /* Set a good return code      */
SET CMSTYPE HT
file = 'COLLECT FILE A'                /*Source file                  */
file_save = 'COLLECT FILES A'          /*Source save file             */
p. = ''
g = 0
logname1 = ''
logname2 = ''
'ERASE' file_save                      /*Erase old save file          */
'RENAME' file file_save                /*Save source file             */
n = 1                                  /*Counter                      */
e = 1                                  /*Counter                      */
SET CMSTYPE RT
'EXECIO * DISKR' file_save '(STEM P.'  /*    Read source file         */
/* This section takes the source file and splits it if the source     */
/* file does not contain all collected data from the same date.       */
DO u = 1 WHILE n <= p.0
  logexec. = ''
  logcount. = '0'
  log. = '0'
  'ERASE' file
  DO n = e TO p.0
    PARSE VAR p.n 1 . 9 t1 11 . 12 t2 14 . 15 t3 17 . 25 pexec.n 41 .
    logname1 = '19'||t3||t1||t2
    IF logname2 ¬= logname1 & logname2 ¬= '' THEN LEAVE n
    logname2 = logname1
  END
  DO wr = e TO n - 1
    'EXECIO 1 DISKW' file '(STRING' pexec.wr
  END
  'FINIS' file
  CALL main
  e = n
  logname2 = ''
END
'FINIS' file_save
'ERASE' file_save
'ERASE' file
EXIT
/* This section takes the data already collected and the source data. */
/* It compares the procedure names and increments the counter if an   */
/* EXEC was collected already, otherwise the new EXEC name will be    */
/* stored in the collect file with a count of 1.                      */
main:
logfile = logname2 'COLLECTN A'        /* Output file                 */
logfiles = logname2 'COLLECTS A'       /* Work file                   */
SAY 'Sorting section'
CALL getlogs                           /* Read the existing file      */
CALL getcoll                           /* Read the new file           */
SAY 'Comparing section'
c = 1 ; l = 1                                 /* Counters             */
DO i = 1 WHILE coll.0 >= c                    /* Do all lines         */
  SELECT
    WHEN logexec.l = ' ' THEN call addlog     /* Add line             */
    WHEN coll.c > logexec.l THEN l = l + 1    /* Increment counter    */
    WHEN coll.c < logexec.l THEN CALL addlog  /* Add line             */
    OTHERWISE DO
      logcount.l = logcount.l + 1             /* Increment counter    */
      c = c + 1
    END
  END
END
CALL filelog                           /*   Write the data to file    */
RETURN
/* This section read the existing log file and parses the execname    */
/* and the EXEC counter. */
getlogs:
MAKEBUF                                       /* Make buffer          */
QUEUE 'SORT * A 1 8 9 16'                     /* Sort columns         */
QUEUE FFILE                                   /* File command         */
XEDIT logfile '(NOPROFILE'                    /* Enter XEDIT          */
DROPBUF                                       /* Clear buffer         */
'EXECIO * DISKR' logfile '(FINIS STEM LOG.'   /* Read the log file    */
DO g = 1 TO log.0
  PARSE VAR log.g 1 logexec.g 17 logcount.g . /* Parse the EXECname   */
END                                           /* and the EXECcount    */
RETURN
/* This section read the source file */
getcoll:
MAKEBUF                                       /* Make buffer          */
QUEUE 'SORT * A 1 8 9 16'                     /* Sort columns         */
QUEUE FFILE                                   /* File command         */
XEDIT file '(NOPROFILE'                       /* Enter XEDIT          */
DROPBUF                                       /* Clear buffer         */
'EXECIO * DISKR' file '(FINIS STEM COLL.'     /* Read file            */
DO g = 1 TO coll.0                            /* Get all lines        */
  PARSE VAR coll.g coll.g 17 .                /* Get fname and ftype  */
END
RETURN
/* This section adds to the existing EXECs a new EXEC if it does not  */
/* already exist. The number of EXECs will be incremented by 1 and    */
/* the counter for this EXEC set to 1.                                */
addlog:
DO a = log.0 TO l BY -1                       /* Move stem to + 1     */
  b = a + 1                            /* Counter                     */
  logexec.b = logexec.a                /* Move EXEC name              */
  logcount.b = logcount.a              /* Move counter                */
END
log.0 = log.0 + 1                      /* Increment number of EXECs   */
logexec.l = coll.c                     /* EXEC name                   */
logcount.l = 1                         /* EXEC counter = 1            */
c = c + 1                              /* Increment counter           */
RETURN
/* This section writes the records to file                            */
filelog:
DO f = 1 TO log.0                      /* Do all records              */
  'EXECIO 1 DISKW' logfiles ,
                        '(STRING' left(logexec.f,17) right(logcount.f,8)
END
FINIS logfiles                         /* Close file                  */
IF rc = 0 THEN COPYFILE logfiles logfile '(REPL' /* Copy to new file  */
IF rc = 0 THEN ERASE logfiles          /* Erase if all OK             */
IF rc = 0 THEN ERASE file              /* Erase if all OK             */
MAKEBUF                                /* Sort it the last time       */
QUEUE 'SORT * D 20 26'                 /* Sort columns                */
QUEUE 'FFILE'                          /* File command                */
XEDIT logfile '(NOPROFILE'             /* Enter XEDIT                 */
DROPBUF                                /* Clear buffer                */
RETURN                                 /* Return                      */

Gibamo (Switzerland)

