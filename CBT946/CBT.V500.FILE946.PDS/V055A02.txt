On-line monitor

This program is of interest to sites running VM/XA and
RTM/SF (5798-WD).  It is an on-line evaluation program for
data being sampled by RTM/SF.

A VMC command is sent to the RTM/SF service machine with
the STACK option.  This lets the service machine stack the
output in the console buffer.  The output can then be read and
displayed.  The user is allowed to define a set of thresholds.
When the threshold levels are reached the display is modified.
I have defined the first stage warning as red, and the second
stage warning as red/blinking.  These can be changed, if the
screen used does not support these control characters.  The best
screen to use is a 32 by 80 colour one, eg a 3192G.  The
meaning of the data on screen is either displayed on screen (for
system data), or is described in VM/XA RTM/SF Release 4
Program Description/Operation manual SH26-7000-3 (for other
data).  If the defined threshold is reached, a protocol line is
written for further use.  System related parameters are defined
in RTMSF PARM, and thresholds are specified in a file, which
is pointed to by TRHOLD.

This program has been tested on a 3090 with VM/XA 2.0
SL204 and RTM/SF Release 4.  I recommend that:

o      The interval (INTERVAL parameter) is defined equal to
      the interval used by RTM/SF, or is an exact multiple of it
      (eg 2 or 3 times larger).

o      All DASD that are in use at a site are defined in the string
      DASDS.

o      The RTMSF TRHOLD file is customized.  The predefined
      values are for testing only.

o      If there are no 32 by 80 screens, the last eight lines from
      the line definition segment in RTMSF XEDIT are
      removed.


RTMSF EMESSAGE

RTMSF001 RTM/SF service machine not logged on or not connected.
RTMSF002 Threshold file not readable.
RTMSF003 Threshold file is destroyed, contact system administrator.
RTMSF004 Not numeric value in the threshold file.
RTMSF005 This is not a VM/XA system, can not continue !
RTMSF006 RTMSF PARM not readable, can not continue ...
RTMSF007 RTMSF PROTOCOL A can not be written, check the A disk.


RTMSF PARM

/* Parameter file for RTMSF - set system defaults                   */
RTMSF:         RTMSF            /* user-id of service machine RTM/SF*/
INTERVAL:      30               /* interval set by RTM/SF           */
IODEV:         CTCA 3380 3390   /* devices, which should be shown   */
                                /* max. 6, the characters '/*' as   */
                                /* end of device string !!!         */
TRHOLD:        RTMSF TRHOLD  *  /* threshold values file            */
DASDS:         33803390         /* all types of DASD must be spe-   */
                                /* cified here !!!                  */


RTMSF TRHOLD

/* Parameter file for RTMSF XEDIT                                */
/* It must look like this one, the 3 last lines cannot           */
/* be changed, except the values, of course.                     */
/* If the current value is higher than the 1st value here,       */
/* the current value will be displayed red.                      */
/* If it is higher then the 2nd value, the current value will    */
/* be displayed as red/blink (If the terminal supports this!)    */
/* Between the values in the last 2 lines must be at least 1     */
/* 'blank'.                                                      */
/* The line beginning with *start must be placed directly before */
/* the 2 'value' lines.                                          */
/* Also see description of RTMSF XEDIT.                          */
/* The meaning of these values is described below:               */
/* %CPU - CPU usage                                              */
/* %US  - user mode                                              */
/* %SY  - CP overhead                                            */
/* xSI  - SIE per second                                         */
/* %VT  - vector usage                                           */
/* %ST  - storage utilization                                    */
/* %XST - expanded storage utilization                           */
/* PSEC - paging to DASD                                         */
/* XSEC - paging to XSTORE                                       */
/* AVGR - average response time                                  */
/* IOREQ- number of io start subchannels per interval            */
%cpu  %us  %sy  xsi  %vt  %st  %xst  psec xsec avgr ioreq
*start---------------------------------------------------
195   80   10   3000 90   95   95    50   200  3.0  1200  warning
199   90   20   6000 95   98   98    100  400  5.0  2400  action


RTMSF EXEC

/*   Procedure: RTMSF                                           */
/*   This procedure calls XEDIT with a specific profile.        */
/*   For description, function and general information          */
/*   see the file RTMSF XEDIT.                                  */
'X RTMSF PSONLPS A ( PROF RTMSF )'
exit


RTMSF XEDIT

/*   Procedure: RTMSF                          XEDIT macro            */
/*   Function:  This procedure is an on-line monitor. It can be       */
/*              used only if the RTM/SF ((TM) of IBM) is installed.   */
/*              Further, the version of RTM/SF must be 4 or           */
/*              higher.                                               */
/*              The following data will be displayed:                 */
/*              System data - from the GENERAL SCREEN of RTM/SF       */
/*              User data   - from the USER SCREEN of RTM/SF          */
/*              I/O data    - from the I/O SCREEN of RTM/SF           */
/*    For the CPU (system) data, there can be set 2 'warning'         */
/*    threshold values. If the 1st value is less than current,        */
/*    the current value will be displayed red. If the second          */
/*    value is less than current, the current value will be           */
/*    displayed red and blink ( if the terminal supports this ! )     */
/*    The thresholds values will be set via a parameter file          */
/*    RTMSF TRHOLDS *. This file must be readable while starting      */
/*    this procedure. In other cases, the procedure will be           */
/*    aborted with the return code 2                                  */
/*    Pre set of variables:                                           */
/*    rtmsf  -  must be set to user-id, in which the RTM/SF is        */
/*              running; this user must run disconnected.             */
/*    int    -  this should be set to the interval value of           */
/*              RTM/SF, because of synchronization                    */
/*              It will try to display the data once,                 */
/*              for this purpose the start time will be saved         */
/*              and compared after every VMC call.                    */
'EXECIO * DISKR RTMSF PARM * (FINI'     /* read parameter file        */
if rc ¬= 0 then call err_msg 6          /* file not readable ?        */
do queued()
   parse upper pull line
   compar = WORD(line,1)
   select
      when compar = 'RTMSF:' then rtmsf = WORD(line,2)
      when compar = 'INTERVAL:' then int = WORD(line,2)
      when compar = 'DASDS:' then dasds = WORD(line,2)
      when compar = 'IODEV:' then do
                                     do w = 1 to 6
                                        iodev.w = WORD(line,w+1)
                                        if iodev.w = '/*' then leave w
                                     end
                                     w = w - 1
                                     if w = 0 then do
                                                    iodev.1 = '3380'
                                                    w = 1  /* if no   */
                                                   end  /* dev speci- */
                                     numb_iodev = w  /* fied, force   */
                                  end                /* DASD 3380 !   */
      when compar = 'TRHOLD:' then do
                                    fn = WORD(line,2)
                                    ft = WORD(line,3)
                                    fm = WORD(line,4)
                                   end
      otherwise nop
   end
end
do i = 1 to numb_iodev
   iodev_string = iodev_string||iodev.i
end
'EXECIO * CP (STR Q' rtmsf   /* check, if running disconnected        */
pull answer
if WORD(answer,3) <> 'DSC' then call err_msg 1
'EXECIO * CP (STR Q CPLEVEL' /* check CP level                        */
pull syslev
'DESBUF'
if WORD(syslev,1) ¬= 'VM/XA' then call err_msg 5   /* not XA system ! */
'EXECIO * DISKR' fn ft fm '(FINI'       /* read parameter file        */
if rc ¬= 0 then call err_msg 2          /* file not readable ?        */
do queued()                             /* search for 'start' string  */
   parse upper pull line
   if SUBSTR(line,1,6) = '*START' then leave
end
if QUEUED() <> 2 then call err_msg 3    /* 2 lines must be on stack   */
pull cpu1 user1 syst1 sie1 vt1 st1 xst1 psec1 xsec1 avg1 ioreq1 .
pull cpu2 user2 syst2 sie2 vt2 st2 xst2 psec2 xsec2 avg2 ioreq2 .
if DATATYPE(cpu1,N) = 0 then call err_msg 4    /* values numeric ?    */
if DATATYPE(cpu2,N) = 0 then call err_msg 4
if DATATYPE(user1,N) = 0 then call err_msg 4
if DATATYPE(user2,N) = 0 then call err_msg 4
if DATATYPE(syst1,N) = 0 then call err_msg 4
if DATATYPE(syst2,N) = 0 then call err_msg 4
if DATATYPE(sie1,N) = 0 then call err_msg 4
if DATATYPE(sie2,N) = 0 then call err_msg 4
if DATATYPE(vt1,N) = 0 then call err_msg 4
if DATATYPE(vt2,N) = 0 then call err_msg 4
if DATATYPE(st1,N) = 0 then call err_msg 4
if DATATYPE(st2,N) = 0 then call err_msg 4
if DATATYPE(xst1,N) = 0 then call err_msg 4
if DATATYPE(xst2,N) = 0 then call err_msg 4
if DATATYPE(psec1,N) = 0 then call err_msg 4
if DATATYPE(psec2,N) = 0 then call err_msg 4
if DATATYPE(xsec1,N) = 0 then call err_msg 4
if DATATYPE(xsec2,N) = 0 then call err_msg 4
if DATATYPE(avg1,N) = 0 then call err_msg 4
if DATATYPE(avg2,N) = 0 then call err_msg 4
'SET CMDLINE OFF'    /* initial setting for XEDIT                     */
'SET SCALE   OFF'
'SET PREFIX  OFF'
'SET TOFEOF  OFF'
'SET MSGMODE OFF'
'SET MSGLINE OFF'
'SET CTL ` ESCAPE'                        /* set some control char    */
'SET CTL y PROTECT YEL   NONE NOHIGH'
'SET CTL r PROTECT RED   NONE NOHIGH'
'SET CTL R PROTECT RED   BLI  NOHIGH'
'SET CTL y PROTECT YEL   NONE NOHIGH'
'SET CTL t PROTECT TUR   NONE NOHIGH'
'SET CTL T PROTECT TUR   UNDE NOHIGH'
wn = '`y'
rn = '`r'                                 /* set colours              */
rr = '`R'
tu = '`T'
tn = '`y'
gn = '`t'
old_int = ''                /* initial value for interval test        */
                            /* DO FOREVER :                           */
do t=0
    do i=1 to 25            /* ctl.i is control value per line        */
       ctl.i = wn           /* initial setting: yellow                */
    end
    do i=1 to 20            /* user.i is the user part of output      */
       user.i = ''
    end
    ok = 0
    do until ok = 1        /* check, if we have new data from RTM/SF  */
       'DESBUF'
       vmc_rc = 1
       do until vmc_rc = 0
          'VMC' rtmsf 'D (STACK'  /* get user screen                  */
          vmc_rc = rc
       end
       test = ''
       do until WORD(test,2) = 'VM/XA'  /* search for 2 status line   */
          pull test
       end
       if WORD(test,10) ¬= old_int then ok = 1 /* start time test     */
    end
    old_int = WORD(test,10)    /* set start time as new old_int       */
    gen_zei = ''                        /* data line from 'general'   */
    do until WORD(gen_zei,1) = '|->'    /* search for it !            */
       parse upper pull gen_zei
    end
    'DESBUF'                            /* purge the rest of stack    */
    vmc_rc = 1
    do until vmc_rc = 0
      'VMC' rtmsf 'D USER (STACK'           /* get user header        */
      vmc_rc = rc
    end
    do until WORD(usr_zei,1) = '<USERID>'
       pull usr_zei
    end
    do r = 1 to 20
       pull user.r                      /* get user data              */
       if WORD(user.r,2) = 'IDLE' then leave r
       if WORD(user.r,1) = 'ISSUE' then leave r
    end
    user.r = ''                         /* delete last user           */
    'DESBUF'                            /* purge the rest of stack    */
    vmc_rc = 1
    do until vmc_rc = 0
      'VMC' rtmsf 'D I/O INTERVAL (STACK' /* get device data          */
      vmc_rc = rc
    end
    do until WORD(dev_zei,1) = 'DEV'      /* search for dev header    */
       pull dev_zei
    end
    dev_zeile = LEFT(WORD(dev_zei,1),4) SUBSTR(dev_zei,19,19),
                SUBSTR(dev_zei,46,10) SUBSTR(dev_zei,58,3),
                SUBSTR(dev_zei,74,6) SUBSTR(dev_zei,68,3)
    do s = 1 to 6                              /* reset all devices   */
       devu.s = ''
    end
    s = 1
    do p=1 to 20        /* take only specified devices !              */
       pull dev.s
       if POS(WORD(dev.s,2),dasds) = 0 then io_pos = 3
                                       else io_pos = 4
       hi = gn
       if WORD(dev.s,io_pos) > ioreq1 then hi = rn
       if WORD(dev.s,io_pos) > ioreq2 then hi = rr
       devu.s = '  'LEFT(WORD(dev.s,1),4)||hi||SUBSTR(dev.s,19,7)||,
                gn||SUBSTR(dev.s,27,11) SUBSTR(dev.s,46,10),
                SUBSTR(dev.s,58,3) SUBSTR(dev.s,74,6) SUBSTR(dev.s,68,3)
       if hi = rr then call write_prot DEV devu.s
       if POS(WORD(dev.s,2),iodev_string) ¬= 0 then /* type in set ?  */
          s = s + 1
       if s > 6 then leave p
       if WORD(dev.s,1) = 'ISSUE' then do      /*  end of data ?      */
                                        devu.s = ''
                                        leave p
                                       end
    end
    'DESBUF'            /* clear stack                                */
    if WORD(gen_zei,3) > cpu1 then ctl.1 = rn  /* check the high watr */
    if WORD(gen_zei,3) > cpu2 then ctl.1 = rr  /* marks for all syst. */
    if ctl.1 = rr then call write_prot 'CPU' WORD(gen_zei,3)
    if WORD(gen_zei,4) > user1 then ctl.3 = rn /* relevant values     */
    if WORD(gen_zei,4) > user2 then ctl.3 = rr /* colour of rn = red  */
    if ctl.3 = rr then call write_prot 'USER' WORD(gen_zei,4)
    if WORD(gen_zei,7) > syst1 then ctl.9 = rn /* colour of rr = red/ */
    if WORD(gen_zei,7) > syst2 then ctl.9 = rr /*               blink */
    if ctl.9 = rr then call write_prot 'SYST' WORD(gen_zei,7)
    if WORD(gen_zei,9) > sie1 then ctl.11 = rn
    if WORD(gen_zei,9) > sie2 then ctl.11 = rr
    if ctl.11 = rr then call write_prot 'SIE' WORD(gen_zei,9)
    if WORD(gen_zei,12) > vt1 then ctl.15 = rn
    if WORD(gen_zei,12) > vt2 then ctl.15 = rr
    if ctl.15 = rr then call write_prot 'VECT' WORD(gen_zei,12)
    if WORD(gen_zei,15) > st1 then ctl.17 = rn
    if WORD(gen_zei,15) > st2 then ctl.17 = rr
    if ctl.17 = rr then call write_prot 'STOR' WORD(gen_zei,15)
    if WORD(gen_zei,17) > xst1 then ctl.19 = rn
    if WORD(gen_zei,17) > xst2 then ctl.19 = rr
    if ctl.19 = rr then call write_prot 'XSTOR' WORD(gen_zei,17)
    if WORD(gen_zei,16) > psec1 then ctl.21 = rn
    if WORD(gen_zei,16) > psec2 then ctl.21 = rr
    if ctl.21 = rr then call write_prot 'PSEC' WORD(gen_zei,16)
    if WORD(gen_zei,18) > xsec1 then ctl.23 = rn
    if WORD(gen_zei,18) > xsec2 then ctl.23 = rr
    if ctl.23 = rr then call write_prot 'XSEC' WORD(gen_zei,18)
    if SUBSTR(WORD(gen_zei,19),1,5) > avg1 then ctl.25 = rn
    if SUBSTR(WORD(gen_zei,19),1,5) > avg2 then ctl.25 = rr
    if ctl.25 = rr then call write_prot 'AVGRES',
                                        SUBSTR(WORD(gen_zei,19),1,5)
/*   'make' all lines !                                               */
    line.0 = ''
    line.1 = tn'CPU Load ...:'ctl.1||RIGHT(WORD(gen_zei,3)'%',7)||,
             gn||'  |'SUBSTR(usr_zei,1,51)
    line.2 = '                       'gn||'  |'SUBSTR(user.1,1,51)
    line.3 =tn' User mode ..:'ctl.3||RIGHT(WORD(gen_zei,4)'%',7)||,
            gn||'  |'SUBSTR(user.2,1,51)
    line.4 = '                       'gn||'  |'SUBSTR(user.3,1,51)
    line.5 =tn' SIE mode ...:'ctl.5||RIGHT(WORD(gen_zei,5)'%',7)||,
            gn||'  |'SUBSTR(user.4,1,51)
    line.6 = '                       'gn||'  |'SUBSTR(user.5,1,51)
    line.7 =tn' Waiting ....:'ctl.7||RIGHT(WORD(gen_zei,6)'%',7)||,
            gn||'  |'SUBSTR(user.6,1,51)
    line.8 =tn'                      'gn||'  |'SUBSTR(user.7,1,51)
    line.9 =tn' CP overhaed :'ctl.9||RIGHT(WORD(gen_zei,7)'%',7)||,
            gn||'  |'SUBSTR(user.8,1,51)
    line.10 =tn'                      'gn||'  |'SUBSTR(user.9,1,51)
    line.11 =tn' SIE/sec ....:'ctl.11||RIGHT(WORD(gen_zei,9),7)||,
             gn||'  |'SUBSTR(user.10,1,51)
    line.12 =tn'                      'gn||'  |'SUBSTR(user.11,1,51)
    line.13 =tn' SIE interc .:'ctl.13||RIGHT(WORD(gen_zei,10)'%',7)||,
             gn'  |'SUBSTR(user.12,1,42)
    line.14 =tn'                      'gn||'  |'SUBSTR(user.13,1,51)
    line.15 =tn' Vect. usage :'ctl.15||RIGHT(WORD(gen_zei,12)'%',7)||,
             gn'  |'SUBSTR(user.14,1,42)
    line.16 =tn'                      'gn||'  |'SUBSTR(user.15,1,51)
    line.17 =tn' Stor Util ..:'ctl.17||RIGHT(WORD(gen_zei,15)'%',7)||,
             gn'  |'SUBSTR(user.16,1,51)
    line.18 =tn'                      'gn||'  |'||tu||COPIES(' ',53)
    line.19 =tn' XSTOR Util .:'ctl.19||RIGHT(WORD(gen_zei,17)'%',7)||,
             gn'  |'
    line.20 =tn'                      'gn'  |  'dev_zeile
    line.21 =tn' Pg/s DASD ..:'ctl.21||RIGHT(WORD(gen_zei,16),7)||gn||,
             '  |'devu.1
    line.22 =tn'                      'gn'  |'devu.2
    line.23 =tn' Pg/s XSTOR .:'ctl.23||RIGHT(WORD(gen_zei,18),7)||,
             gn||'  |'devu.3
    line.24 =tn'                      'gn'  |'devu.4
    line.25 =tn' Avrg resp ..:'ctl.25||,
             RIGHT(SUBSTR(WORD(gen_zei,19),1,5),7)||gn||'  |'devu.5
    line.26 =tn'                      'gn'  |'devu.6
    line.27 = ''
    line.28 = ''
    do i = 0 to 28               /* set is as reserved                */
      'SET RESERVED' i 'NOHIGH' line.i
    end
    info = LEFT(DATE(),21)||syslev||RIGHT(TIME(),19)
    'SET RESERVED 29 WHI UNDERL    NOHIGH' info
    syst = '                   ' WORD(test,4),
           WORD(test,5) WORD(test,9) WORD(test,10) WORD(test,11),
           WORD(test,12)
    'SET RESERVED 30 WHI NONE      NOHIGH' syst  /* system info       */
    empty = ''
    'SET RESERVED 31 WHI NONE      NOHIGH' empty
    'SET RESERVED 32 WHI NONE      NOHIGH' copyright
    'CURSOR SCREEN 29 1'      /* cursor on screen                     */
    'REFRESH'                 /* refresh screen                       */
    'SLEEP' int 'SEC'         /* sleep now !                          */
end
qq
exit
/* WRITE_PROT: subroutine, write status into protocol file,       */
/*             will be called, if the second stage warning was    */
/*             reached. Protocol file is always RTMSF PROTOCOL A  */
/*             if can not be written, error call and exit.        */
write_prot:
    arg descr1 descr2
    wr_line = DATE('S') TIME() LEFT(descr1,7) descr2
    push wr_line
    'EXECIO 1 DISKW RTMSF PROTOCOL A (FINI'
    if rc ¬= 0 then call err_msg 7
return
/* ERR_MSG: subroutine, display the error message read from       */
/*          the file RTMSF EMESSGE *. If file not found, display  */
/*          general error message and RC.                         */
/*          There is no return from this part !!!                 */
err_msg:
   arg number        /* number is the line number in RTMSF EMESSAGE   */
   message = ''
   address command  'SET CMSTYPE HT'
   'EXECIO 1 DISKR RTMSF EMESSAGE *' number '(FINI'  /* read line     */
   if rc = 0 then pull message                       /* test rc       */
   address command  'SET CMSTYPE RT'
   if message ¬= '' then say message         /* say msg if exists     */
      else do
              say 'RTMSF EMESSAGE not found,'    /* else: say general */
              say 'last return code was:' number       /* message     */
           end
   say
   qq
   exit                                              /* THE END       */
return

Peter Slowikowski
Consultant (Germany)                  c Peter Slowikowski 1991

