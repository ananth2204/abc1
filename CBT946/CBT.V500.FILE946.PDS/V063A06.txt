Programmer tools for VM/XA

Here are some handy routines to make the work of systems
programmers a little easier.  Most were written to help out in
problem determination.  We always seemed to be at a loss
when we needed to find information on another user's virtual
devices, disks accessed, or commands entered.  It tends to be a
little difficult to try and get a user to issue the right commands
and tell you what they see.  It can be worse when the user-id is
not 'working' and you need to find out why.

Most of these tools will require class C or E for the DISPLAY
HOST CP command.  QDISKU needs class A for the CP
LOCK command.  Optionally, VMSECURE from Systems
Center can be utilized with the QVALL EXEC.  All the tools
were written on a VM/XA SP 2 system and are currently
running on VM/XA SP 2.1 at PUT 9005.


QCOMMAND

Way back in issue 2 of VM Update, there was an article for the
first QCOMMAND EXEC for VM/SP.  As usual with most of
the entries in VM Update, it was a great idea.  We re-wrote the
routine for

VM/XA and added some bells and whistles.

Format:

      QCOMMAND  user-id  ( SET  number|Current  text

User-id is any logged on user-id.  They have to have a PF key
set to RETRIEVE in order for there to be a command retrieve
buffer to look at.  The current command is flagged with ">>>"
in the list.  CMS storage is checked to show the last CMS
EXEC, procedure, and module executed, the last CP
command, and the contents of the CMS command line.

The option SET can be used to set a command in the retrieve
buffer to the value specified in "text".  The number|current
option is required; number can be the command number you
want to reset, or you may specify current to set the current
retrieve command.  I added that mostly for fun!  An example
of the use of the command is shown in Figure 1.


QCOMMAND EXEC

/* QCOMMAND EXEC   (Type QCOMMAND ? for help)                         */
/* Function:   To display a user-id's retrievable commands buffer.    */
/*             Can also alter the user's retrievable commands.        */
Parse Arg who . '(' opt cmdnum text '?:' otheropts
Upper who opt cmdnum otheropts
If who = '' | who = '?' Then Do
  'VMFCLEAR'
  Say
  Say 'Format:  QCOMMAND  user-id  ( SET  number|Current  text'
  Say
  Say 'User-id has to be logged on, and have a PF key set to RETRIEVE '
  Say 'for the QCOMMAND portion to work. CMS storage is checked to show'
  Say 'the last CMS EXEC, procedure, and module executed, the last CP '
  Say 'Command, and the contents of the CMS Command Line.'
  Say
  Say 'OPTION:  SET  -  can be used to set a command in the retrieve '
  Say 'buffer to the value specified in "text".  The number|Current '
  Say 'option is required; number can be the Command Number you want to'
  Say 'reset, or you may specify "Current" to set the current retrieve'
  Say 'command.'
  Exit
  End
typeit = (otheropts ¬= 'QUIET')
Parse Value Diag(8,'LOC' who) With key . vmdbk '15'x
If key ¬= 'VMDBK' Then Do
  Call SAYIT
  Call SAYIT 'User-id' who 'is not logged on.'
  Exit 28
  End
Parse value Diag(8,'DISPLAY H'd2x(x2d(vmdbk)+x2d(374))) with . pfk_blk .
If pfk_blk == '00000000' Then Do
  Call SAYIT
  Call SAYIT 'User' who 'does not have any PF Keys set.'
  Call SAYIT
  Signal OUT
  End
If typeit Then 'VMFCLEAR'
/* Do six displays to make the parsing easier in case there are */
/* multiple 0 lines.                                            */
Parse value Diag(8,'DISPLAY H'pfk_blk'.F') ,
With . pfk_gsd.1 pfk_gsd.2 pfk_gsd.3 pfk_gsd.4 .
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_blk)+x2d(10))'.F') ,
With . pfk_gsd.5 pfk_gsd.6 pfk_gsd.7 pfk_gsd.8 .
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_blk)+x2d(20))'.F') ,
With . pfk_gsd.9 pfk_gsd.10 pfk_gsd.11 pfk_gsd.12 .
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_blk)+x2d(30))'.F') ,
With . pfk_gsd.13 pfk_gsd.14 pfk_gsd.15 pfk_gsd.16 .
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_blk)+x2d(40))'.F') ,
With . pfk_gsd.17 pfk_gsd.18 pfk_gsd.19 pfk_gsd.20 .
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_blk)+x2d(50))'.F') ,
With . pfk_gsd.21 pfk_gsd.22 pfk_gsd.23 pfk_gsd.24 .
/* Check all non-zero PFKEY GSDBKs to see if it is a RETREIVE key */
Do i = 1 to 24
  If pfk_gsd.i == '00000000' Then Iterate
  Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_gsd.i)+x2d(8))) ,
                                                       with . gsd_word .
  If Substr(gsd_word,3,2) = '04' Then Leave
  End
If i > 24 Then Do
  Call SAYIT
  Call SAYIT 'User' who 'does not have a RETRIEVE PF Key set.'
  Call SAYIT
  Signal OUT
  End
Call SAYIT 'User' who 'at Location' vmdbk', has a PFKey buffer at',
                                                                 pfk_blk
Call SAYIT 'and has PF'i 'set as a RETRIEVE PF Key.'
/* Check for a retrieve starting address first */
Parse value Diag(8,'DISPLAY H'd2x(x2d(pfk_gsd.i)+x2d(10))'.F') ,
                                 with . buff_start buff_flag ret_start .
If ret_start == '00000000' Then Do
  Call SAYIT
  Call SAYIT 'User' who 'has not entered any console commands yet',
                                             ' - retrieve buffer empty.'
  Call SAYIT
  Signal OUT
  End
cmd_count = Substr(buff_flag,8,1)
Call SAYIT 'GSD Buffer at' buff_start', and RETRIEVE starts at' ,
                                      ret_start',' cmd_count 'commands.'
/* Get all the commands displayed.  Start at the beginning.   */
/* The first full word of each buffer is the extended buffer  */
/* address, used if the command is too long to fit in the     */
/* standard 139 char buffer.                                  */
/* General format of each buffer:                             */
/*    +0   1F  Extended Buffer address                        */
/*    +5   1H  Length of Command                              */
/*    +6 139X  Data area for command text                     */
setcommand = 0
If opt = 'SET' Then Do
   If ¬Abbrev('CURRENT',cmdnum,1) & (cmdnum <0 | cmdnum > 7 ,
                                          | cmdnum > cmd_count) Then Do
      Call SAYIT 'ERROR: Command number specified on SET option invalid'
      End
   Else If Length(Strip(text,'T')) > 110 Then Do
      Call SAYIT 'ERROR: SET Command length to long. 110 characters max'
      Call SAYIT 'ERROR: This is an EXEC limitation, not CP.'
      End
   Else Do
      text = Strip(text,'T')
      textlen = Length(text)
      textlenx = Right(d2x(textlen),4,0)
      text = c2x(text)
      setcommand = cmdnum
      End
   End
cmd_blk = Right(d2x(x2d(buff_start)+x2d(10)),8,0)
Call SAYIT
Do i = 1 to cmd_count
  cmd_length = Getstore(cmd_blk,4,2,'HOST','DEC')
  If cmd_blk ¬= ret_start ,
  Then Call SAYIT '   Command'i':' Getstore(cmd_blk,6,cmd_length,'HOST','CHAR')
  Else Call SAYIT '>>>Command'i':' Getstore(cmd_blk,6,cmd_length,
                                                          'HOST','CHAR')
  If i = setcommand | (cmd_blk = ret_start ,
                                 & Abbrev('CURRENT',setcommand)) Then Do
     xdiag = Diag(8,'STORE HS'd2x(x2d(cmd_blk)+x2d(4)) textlenx||text)
     Call SAYIT '+++ Is Now :' Getstore(cmd_blk,6,textlen,'HOST','CHAR')
     End
  cmd_blk = Right(d2x(x2d(cmd_blk)+145),8,0)
  End
Call SAYIT
OUT:
/* Let's find out what WHO is doing..... */
Parse Value Diag(8,'LOCK' who '000 000 MAP') With . '15'x . raddr '15'x
raddr = Space(raddr)
If raddr = '' Then Exit
Parse Value Getstore(raddr,'2A0',16,'Host','Char') ,
With last_cmd +8 nlast_cmd
Parse Value Getstore(raddr,'2B0',16,'Host','Char') ,
With last_prc +8 nlast_prc
Parse Value Getstore(raddr,'2C0',16,'Host','Char') ,
With last_mod +8 nlast_mod
dlist = '740 750 760 770 780 790 7A0 7B0 7C0 7D0 7E0 7F0 800 810 820 ',
                                                                   '830'
cmdline = ''
Do i = 1 to Words(dlist)
  cmd_part = Getstore(raddr,Word(dlist,i),16,'Host','Char')
  If cmd_part = '' Then Leave
  cmdline = cmdline||cmd_part
  End
last_cp_cmd = Getstore(vmdbk,380,8,'Host','Char')
Call SAYIT 'Last command.....' last_cmd '   Next to last...' nlast_cmd
Call SAYIT 'Last procedure...' last_prc '   Next to last...' nlast_prc
Call SAYIT 'Last module......' last_mod '   Next to last...' nlast_mod
Call SAYIT 'Last CP command..' last_cp_cmd
Call SAYIT 'Cmdline Text.....' cmdline
xdiag = Diag(8,'UNLOCK' who '000 000')
Exit
SAYIT:
If ¬typeit Then Return
Parse Arg text
SAY text
Return
GETSTORE:
Arg addr , disp , len , type , form .
Signal ON SYNTAX
If Abbrev('HOST',type,1) Then type = 'H'
Else type = ''
addr = d2x(x2d(addr)+x2d(disp))
test_nibble = Substr(addr,Length(addr))
num_words = len % 4 + 1
If Find('0 4 8 C',test_nibble) = 0 Then num_words = num_words + 1
string = ''
Do num_words
  Parse value Diag(8,'DISPLAY 'type||addr) With . word .
  string = string||word
  addr = d2x(x2d(addr)+4)
  End
start = Translate(test_nibble,'1357135713571357','0123456789ABCDEF')
result = Substr(string,start,len*2)
If form = 'DEC' Then result = x2d(result)
Else If form = 'CHAR' Then result = x2c(result)
Return result
SYNTAX:
ERROR:
Parse source . . name .
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** GETSTORE was probably called incorrectly'
Say
Say '** Getstore('addr','disp','len','type','form')'
Say
Exit


QDISK

This EXEC does what the CMS QUERY DISK command
should do.  It shows you only the disk modes you want to see,
in the standard QUERY DISK format.

Format:

      QDISK  fm1 fm2 ... fmn

If you do not supply any filemodes, the EXEC will call the
regular QUERY DISK command.  Filemodes can be entered in
any order and can be entered more than once.  Examples of the
output are shown in Figure 2.


QDISK EXEC

/* QDISK EXEC   (Type QDISK ? for help)                               */
/* Function:   To display all, one, or some disks (Q DISK style).     */
Arg which
Address Command
If which = '' Then 'QUERY DISK'
Else If which = '?' Then Do
  Say
  Say 'Format:  QDISK  fm1 fm2 ... fmn'
  Say
  Say 'All parms are optional and, if not supplied, result in a Q DISK'
  Say 'command execution.'
  Say
  Say 'Where fm1 fm2 ... fmn are a list of filemodes, in any order'
  Say 'that you want displayed.'
  Say
  Say 'EXAMPLE:  If you wanted to see file mode A and file mode C,'
  Say '          you would enter:  QDISK A C'
  Say
  Say '          If you wanted to see file mode C and THEN file mode A,'
  Say '          you would enter:  QDISK C A'
  Exit
  End
Else Do
   'XMITMSG 8614 (NOHEAD NOCOMP DISP'
   Do i = 1 to Words(which)
     'MAKEBUF'
     'QUERY DISK' Word(which,i) '(LIFO'
     Parse Pull line
     'DROPBUF'
     Say line
     End
  End

More VM/XA utility programs next month.

James S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1991

