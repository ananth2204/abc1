Check for duplicates in a file

This routine allows you to check for duplicate values in a range
of columns in the file you are currently editing; alternatively,
you may call this routine from another EXEC and have it create
a file which contains the duplicate entries and the line numbers
at which the duplicates are found. If duplicates are found, a
non-zero condition code will be returned to the calling routine.
If the routine is called from another program, you can pass the
parameter 'EXIT' so that it will do a 'QQUIT' to get out of the
file being checked. Otherwise, you'll be left editing the file.

You may issue the command from the XEDIT command line or
from another EXEC. Parameters are optional.

From the command line:

      CHECKDUP start end ( QUIET EXIT FILE

From an EXEC

      Queue start end '( QUIET EXIT FILE';
      XEDIT fn ft fm (NOPROF

The parameters are:

o      QUIET  -      Do not display duplicate lines on the console.

o      EXIT   -      QQUIT after checking for duplicates.

o      FILE   -      Create a $$DUP$$ $$TEMP$$ file which
                  contains a list of duplicate values found.

All parameters are optional. The default is to show the
duplicate entries on your console with no file created and you'll
be left editing the file you are checking (sorted in the order of
the columns being checked).


CHECKDUP XEDIT

/* ---------------  EXEC created by MAINT.
   Doc: Check for duplicates in a certain column range.
*/
Parse Arg Start End '(' parm; /* give me the start/end columns only */
if datatype(Start) ¬= 'NUM' | datatype(End) ¬= 'NUM' then do;
  'MSG * Invalid column number(s) - not numeric';
  Exit 16;
End;
Upper parm;                   /* Make it uppercase                  */
if index(parm,'QUIET') > 0 then quiet = 1;  /* Inform re: Dups? No. */
else                            quiet = 0;  /* Tell them. (Dflt)    */
if index(parm,'FILE')  > 0 then file = 1;   /* Give file of results */
else                            file = 0;   /* Default = NO FILE    */
if index(parm,'EXIT')  > 0 then yexit = 1;  /* Get out of file?     */
else                            yexit = 0;  /* Stay in file (dflt)  */
If file then 'ERASE $$DUP$$ $$TEMP$$ A';   /* Just in case          */
len = end - start + 1;        /* How long is the field?             */
dup_found = 0;                /* No dups found yet.                 */
'TOP';                        /* Go to top to sort the file         */
'SORT *' start end;           /* Now, sort them to check it out     */
':1';                         /* Get to the top of the file         */
'extract /curline/';          /* Prime the pump                     */
old = '`';                    /* Put in a dummy value               */
'TOP';
Do forever;
  'DOWN 1';                   /* Go to next line                    */
  If rc ¬= 0 then do;         /* End of file?                       */
     If ¬ quiet then do;      /* Be quiet about dups?               */
       If dup_found then,     /* We had some duplicates             */
         'MSG Duplicates were found. Proceed - RC=1.';
       Else,
         'MSG No duplicates were found.  Proceed - RC=0.';
     End;
     If file then 'FINIS $$DUP$$ $$TEMP$$ A'; /* If file was reqestd */
     If yexit then 'QQUIT' dup_found;         /* Was EXIT requested? */
     exit dup_found;
  end;
  'EXTRACT /CURLINE/LINE/';              /* Get the contents of line */
  if substr(curline.3,start,len) = old then do;  /* Was it the same? */
     dup_found = 1;                      /* Uh oh! It was a dup      */
     dup_item = old 'AT LINE' line.1;
     If ¬ quiet then say 'Dup found at line' line.1 ,
          'Value='substr(curline.3,start,len);
     If file then,                       /* Store the value?         */
          'EXECIO 1 DISKW $$DUP$$ $$TEMP$$ A (VAR DUP_ITEM';
  end;
  old = substr(curline.3,start,len);     /* Get ready for next one   */
end;
exit 0;

Patrick Tierce
Systems Software Specialist
State of Kansas

