Determine CP real storage

It seems that systems programmers are always finding new
reasons why they need to look at CP's storage. In many cases,
this is done from an EXEC. While not difficult, the job can be
cumbersome at times. The DCP EXEC is designed to make the
job easy.

This EXEC is designed to be used as a REXX function or
subroutine. It takes the drudgery out of issuing the relevant
DCP or DISPLAY H command, parsing the data, looking for
things like 'SUPPRESSED LINE(S) SAME AS ABOVE', and
combining the results into a single string. It is typically
invoked as follows:

      dcp(addr|symbol, length, options)
where:
addr      is the starting address in hexadecimal. Under
            VM/XA, the top bit of an 8-digit address may be
            set, in which case it is ignored.

symbol      may be one of the following:

            HCPxxx      The start of a resident CP module
            HCPxxxyy      An entry point in a resident CP module
            RDEV ccuu      An RDEV for the specified device

            Any of the above symbols may be followed by a
             hexadecimal displacement, thus making the true syntax:

            HCPxxx+xxxx
            HCPxxxyy+xxxx
            RDEV ccuu+xxxx

length      is the number of bytes in decimal. The default is 4.

options      may be any combination of the following:

      C      causes the output to be returned in REXX 'C' format

      d      indicates that the address is specified in decimal

      D      causes the output to be returned in REXX 'D' format

      N      bypasses all preliminary edits. This value is
            intended to be used to improve performance
            and should, obviously, be used only by well
            tested EXECs. This specification, by the way,
            requires the use of an explicit length.

      X      causes the output to be returned in REXX 'X'
            format. This is a default. The C and X options
            are mutually exclusive.

The result is a hexadecimal string whose value depends on the
options:

o      If the C option is used, the value is a string in REXX 'C'
      format whose length is 1 * 'length'

o      If the X option is used, the value is a string in REXX 'X'
      format whose length is 2 * 'length'

o      If the D option is used, the value is a string in REXX 'D'
      format whose length is as large as is needed to contain the
      number of bytes specified by 'length'. The maximum
      length is 24 hexadecimal digits or 3/ decimal digits.

If 'addr' or 'length' is invalid, the result is 'error' plus a
number, and a message is issued.

This EXEC has not yet been tested with an addr+length
combination which crosses into a non-existent range.

If invoked as a command, this EXEC is equivalent to the DCP
command (from VM/SP and HPO). Under VM/XA SP, the
command is minimally converted to a DISPLAY H command,
for example 'DCP T123456.7' is converted to 'DISPLAY
HT123456.7'.

Use of this EXEC requires privilege class C or E.

/*              Determine CP (Host) Real Storage.                     */
/*  Preliminaries                                                     */
address COMMAND
parse source . where_from .
vm_xa        = 1                          /*  if running under VM/XA  */
vm_xa        = /                          /*  if running under VM/SP  */
if where_from = 'COMMAND' then                  /*  invoked from CMS  */
   signal invoked_as_a_cms_command
/*  Edit the options                                                  */
parse arg addr, length, options
upper addr length
option_char         = /                       /*  Set default values  */
option_decimal_addr = /
option_decimal      = /
option_noedit       = /
options = strip(options)
do i = 1 to length(options)
   x = substr(options,i,1)
   select
      when x = 'C' then option_char         = 1
      when x = 'D' then option_decimal      = 1
      when x = 'd' then option_decimal_addr = 1
      when x = 'N' then option_noedit       = 1
      when x = 'X' then option_char         = /
      otherwise                                            /*  valid  */
         say 'DCP: Invalid option "' || x || '" - Ignored'
   end   /*  select  */
end
/*  Edit the address                                                  */
select
   when left(addr, 3) = 'HCP' then
      call determine_module_address
   when word(addr, 1) = 'RDEV' then
      call determine_rdev_address
   when addr = '' then
      call error '1 The address was omitted'
   otherwise
      nop /*  Additional edits will be performed below unless NOEDIT  */
end   /*  select  */
if option_noedit then
   signal issue_display_command              /*  Skip the main edits  */
if option_decimal_addr then do
   if verify(addr, '/123456789') > / then
      call error '3 The address is not a valid decimal number'
   addr = d2x(addr)
   end
else
   if ¬ datatype(addr, 'X') then
      call error '3 The address is not a valid hexadecimal number'
if vm_xa then
   x = 8
else
   x = 6
if length(addr) > x then
   call error '4 The address is more than' x 'digits'
/*  Edit the length                                                   */
select
   when length = '' then                             /*  the default  */
      length = 4
   when ¬ datatype(length, 'W') then
      call error '5 The length must be a valid decimal number'
   when length < 1 then
      call error '6 The length must be greater than zero'
   otherwise                       /*  valid explicit decimal length  */
      nop
end   /*  select  */
/*  Issue the DCP or DISPLAY H command                                */
issue_display_command:
x = d2x(length)
if vm_xa then do
   if length(addr) = 8 then                      /*  8 digit address  */
      addr = c2x(bitand(x2c(addr), '7FFFFFFF'x))
                                 /*  Ensure that the top bit is zero  */
   buffer_size = (length + 15) % 16 * 5/
   numeric digits 1/
   x = 'DISPLAY H'addr'.' || x
   end
else do
   buffer_size = (length  + 15) % 16 * 49
   x = 'DCP' addr'.' || x
   end
EXECIO '* CP (BUFFER' buffer_size 'STEM X. STRING' x
                               /*  too bad CASE U is invalid with CP  */
if rc = 116/ then     /*  HCPCDL16/E Hexloc xxxxxxxx exceeds storage  */
   call error rc 'Address' addr 'exceeds the real storage size'
if rc ¬= / then
   call error rc 'EXECIO return code' rc 'from' x
/*  Build the result.  VM/SP and HPO display data as follows:
        xxxxxx    aaaaaaaa  bbbbbbbb  cccccccc  dddddddd
        xxxxxx TO yyyyyy   SUPPRESSED LINE(S) SAME AS ABOVE .....
    VM/XA displays data as follows:
        Hxxxxxxxx  aaaaaaaa bbbbbbbb cccccccc dddddddd kk
        Hxxxxxxxx to yyyyyyyy suppressed line(s) same as above ....   */
all_words = ''
do i = 1 to x./
   if pos('SUPPRESSED',translate(x.i)) = / then do
      if vm_xa then
         parse var x.i . these_words 48
      else
         parse var x.i . these_words
      all_words   = all_words || these_words
      above_words = these_words
      end
   else
      call process_suppressed_lines
end
/*  Exit to the caller with the value in the desired format           */
all_words = space(all_words,/)                 /*  remove all spaces  */
/*  Determine the number of "free" bytes added on the left by CP to
    produce fullword alignment                                        */
x = x2d(addr) // 4
all_words = substr(all_words,1+2*x)     /*  Strip "free"  left bytes  */
all_words =   left(all_words,2*length)  /*  Strip "free" right bytes  */
if option_char then
   exit x2c(all_words)
if option_decimal then do
   numeric digits 3/           /*  will handle a 24 hex digit number  */
   exit x2d(all_words)
   end
exit all_words                    /*  "X" was specified or defaulted  */
/*  ----------------------------------------------------------------  */
/*                            Subroutines                             */
/*  ----------------------------------------------------------------  */
/*  Add "displacement" to "addr"                                      */
add_displacement:
if displacement = '' then                          /*  not specified  */
   return
if ¬ datatype(displacement, 'X') then
   call error '7 Displacement "'displacement'" not a hexadecimal number'
addr = d2x(x2d(addr) + x2d(displacement))
return
/*  Determine the address of a CP module or entry point               */
determine_module_address:
if ¬ vm_xa then
   call error '8 The use of HCPxxxyy as an address requires VM/XA',
                                         ' or the ESA feature of VM/ESA'
parse var addr module_name '+' displacement        /*  HCPxxxyy+xxxx  */
EXECIO '1 CP (VAR X STRING LOCATE' module_name                 /*  x  */
if rc ¬= / then               /*  HCPCFD1//3E HCPxxxyy was not found  */
   call locate_error '7' subword(x, 2)
                                /*  CP's response w/o message number  */
parse var x . . addr x .            /*  HCPxxxyy = xxxxxxxx RESIDENT  */
if x ¬= 'RESIDENT' then                       /*  PAGEABLE I presume  */
   call error '9' module_name 'is not resident'
call add_displacement         /*  Add the displacement if specified   */
return
/*  Determine the address of the RDEV for a specified device          */
determine_rdev_address:
if ¬ vm_xa then
   call error '1/ The use of RDEV cuu as an address requires ',
                                   'VM/XA or the ESA feature of VM/ESA'
parse var addr . cuu '+' displacement              /*  RDEV cuu+xxxx  */
EXECIO '* CP (STEM X. STRING LOCATE' cuu                      /*  x.  */
if rc ¬= / then
/* HCPCFD/21E A real device number was not supplied or it is invalid  */
   call locate_error '1/' subword(x.1, 2)
                                /*  CP's response w/o message number  */
addr = x.2
call add_displacement          /*  Add the displacement if specified  */
return
/*  Error exit                                                        */
error:
parse arg exit_rc final_message
if final_message ¬= '' then
   say 'DCP:' final_message
exit 'error' exit_rc
/*  This EXEC was invoked as a CMS command which isn't really its
    primary purpose in life                                           */
invoked_as_a_cms_command:
arg parms                /*  I'm not going to bother to examine them  */
if vm_xa then do
   x = 'DISPLAY H'parms                    /*  Pass straight through  */
   say 'Your command has been converted by the DCP EXEC to' x
   CP x
   end
else
   CP 'DCP' parms                          /*  Pass straight through  */
exit rc
/*  Handle a LOCATE error                                             */
locate_error:
if right(rc) = 1 then
   call error '1 You do not have privilege class C or E'
call error arg(1)
/*  Determine the suppressed data                                     */
process_suppressed_lines:
if vm_xa then do
   parse var x.i 2 from . to .             /*  Hxxxxxxxx to yyyyyyyy  */
   if right(to,3) = 'FFF' then
      to = d2x(x2d(to) + 1)
   end
else
   parse var x.i   from . to .             /*     xxxxxx TO yyyyyy    */
x = (x2d(to) - x2d(from)) / 16        /*  number of suppressed lines  */
if datatype(x,'W') then
   all_words = all_words || copies(above_words,x)
else
   say 'DCP: Unsupported output line from CP:' strip(x.i)
return

Dave Fraatz
Specialist
3M (USA)

