Displaying mini-disk links

If any user in a VM system has a mini-disk on a DASD or a
LINK to a mini-disk defined on it, the counter showed by the
answer to

      Q real_address

will be incremented by 1.  We can also ask the system which
user has a mini-disk or a LINK to a mini-disk on this device by
entering:

      Q SYSTEM real_address

However, we cannot ask the system which users have a link to
a mini-disk.  The answer to the Q SYSTEM command shows
us only the user-id and the virtual device address.  My
program shows a list of mini-disks and the corresponding
LINKs to them.


HOW DOES IT WORK?

First, the procedure locates the RDEV block of the specified
device.  In this block, at displacement 18 (hex), is the pointer
to the first mini-disk block for this device.  In the mini-disk
block, at displacement 0, is the pointer to the next mini-disk
block, so the procedure can go through the chain and check all
mini-disk blocks.  In the mini-disk block, at displacement 68
(hex) and 8 bytes long, is the user-id of the owner of this mini-
disk, and the next 4 bytes contains the virtual address of the
device.  So, the procedure displays the user-id and virtual
address.  But there can be also some users linked to a mini-
disk.  At displacement 4 in the mini-disk block is the counter
of links to the mini-disk, and at displacement 5C (hex) is the
pointer to the first VDEV block for the mini-disk.  In the
VDEV block, at displacement 70 (hex), is the pointer to the
next VDEV block.  In this way it can go through all VDEV
blocks which are linked.  In the VDEV block, at displacement
70 (hex), is the pointer to the VMDBK (VM block) of the
owner.  In this block (VMDBK), in 8 bytes at displacement 80
(hex), the user-id can be found - and then displayed.

This program was tested on VM/XA SP 2.0 and VM/XA 2.1
SL 201/202. It cannot run on a VM/SP or VM/SP HPO system
(because of different displacements in their control blocks).


COLORS ASM

         TITLE 'Colour output in FULLSCREEN CMS'
*        Program: COLORS                                             *
*        Function: Display up to 72 characters in a colour defined   *
*                  as 1st parameter. Only to use in FULLSCREEN mode  *
*                  of CMS. In LINE mode no function.                 *
*        Call:     from CMS or EXEC only, no BAL 14,15 possible.     *
*                  COLORS nr<S> text1 text2 ....                     *
*                  where nr is a number from 0 to 7, meaning:        *
*                  0-default, 1-blue, 2-red, 3-pink, 4-green,        *
*                  5-turqouise, 6-yellow, 7-white.                   *
*                  text1 is any text up to 8 characters.             *
*                  text1...text8 are supported.                      *
*                  if, for instance, 1S is specified, only 1 blank   *
*                  will be displayed between the words of text, else *
*                  every word will be displayed in a 9 characters    *
*                  field.                                            *
*        Remarks:  no return codes are given back,                   *
*                  no files are affected                             *
         EJECT
*        C S E C T     S T A R T :                                   *
         PRINT NOGEN
COLORS   CSECT                         BEGIN OF PROGRAM
         STM   R14,R12,12(R13)         save register
         BALR  R12,0                   establish addressability
         USING *,R12                   for GPR 12
         ST    R13,COLORS1             SAVE GPR 13
         B     MNT0000
COLORS1  DC    F'0'
         DC    C'COLORS (C) Peter Slowikowski, EDP Consulting'
         DC    C'written by Peter Slowikowski'
         DC    C'27Nov1990'
*   Main program: Test parameter and display the given line          *
         SPACE 1
         DS    0D
MNT0000  EQU   *
         MVC   OUTLINE,CLEAR           Clear output area
         CLC   16(8,R1),KXFF           something to display ?
         BE    MNT1000                 no, end
         MVC   OUT1(8),16(R1)          yes, take the first ...
         CLC   24(8,R1),KXFF
         BE    MNT0100
         MVC   OUT2(8),24(R1)          ... and the following words.
         CLC   32(8,R1),KXFF           (IF ANY !)
         BE    MNT0100
         MVC   OUT3(8),32(R1)
         CLC   40(8,R1),KXFF
         BE    MNT0100
         MVC   OUT4(8),40(R1)
         CLC   48(8,R1),KXFF
         BE    MNT0100
         MVC   OUT5(8),48(R1)
         CLC   56(8,R1),KXFF
         BE    MNT0100
         MVC   OUT6(8),56(R1)
         CLC   64(8,R1),KXFF
         BE    MNT0100
         MVC   OUT7(8),64(R1)
         CLC   72(8,R1),KXFF
         BE    MNT0100
         MVC   OUT8(8),72(R1)
MNT0100  EQU   *
         CLI   9(R1),C'S'              suppress blanks ?
         BNE   MNT0900                 no, display
         MVC   TSTLINE(72),OUTLINE     yes, reload output
         MVC   OUTLINE(72),CLEAR       clear it once more
         L     R2,=A(TSTLINE)          set some gpr's
         L     R4,=A(OUTLINE)
         L     R3,=A(OUTLINE)
MNT0200  EQU   *
         CLI   0(R2),C' '              do we have any X'40' ?
         BE    MNT0300                 yes, suppress it
MNT0250  EQU   *
         MVC   0(1,R3),0(R2)           no, move the character
         LA    R3,1(R3)                increment addresses
         LA    R2,1(R2)
         CR    R2,R4                   end of buffer reached ?
         BL    MNT0200                 no, continue ...
         B     MNT0900                 yes, display
MNT0300  EQU   *
         LA    R2,1(R2)                next character
         CR    R2,R4                   end of buffer ?
         BNL   MNT0900                 yes, go to display
         CLI   0(R2),C' '              another blank ?
         BE    MNT0300                 yes, suppress
         MVI   0(R3),C' '              no, set 1 blank to output
         LA    R3,1(R3)                increment address in output
         B     MNT0250                 continue on 'MVC'
MNT0900  EQU   *
         CLI   8(R1),C'0'              what color is to be displayed ?
         BE    MNTDEF                  0 - default
         CLI   8(R1),C'1'              1 - blue
         BE    MNTBLUE                 2 - red
         CLI   8(R1),C'2'              3 - pink
         BE    MNTRED                  4 - green
         CLI   8(R1),C'3'              5 - turquoise
         BE    MNTPINK                 6 - yellow
         CLI   8(R1),C'4'              7 - white
         BE    MNTGREEN
         CLI   8(R1),C'5'
         BE    MNTTURQ
         CLI   8(R1),C'6'
         BE    MNTYELL
         CLI   8(R1),C'7'
         BE    MNTWHITE
MNTDEF   LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=DEFAULT
         B     MNT1000
MNTBLUE  LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=BLUE
         B     MNT1000
MNTRED   LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=RED
         B     MNT1000
MNTPINK  LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=PINK
         B     MNT1000
MNTGREEN LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=GREEN
         B     MNT1000
MNTTURQ  LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=TURQUOISE
         B     MNT1000
MNTYELL  LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=YELLOW
         B     MNT1000
MNTWHITE LINEWRT DATA=OUTLINE,VNAME='CMS',COLOR=WHITE
MNT1000  EQU   *
         L     R13,COLORS1             restore registers
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         SR    R15,R15                 no return code !
         BR    R14                     end of execution
*   Definition area                                                  *
         SPACE 1
TSTLINE  DC    CL72' '                 test area for compression
OUTLINE  DS    0CL72                   output area
OUT1     DC    CL9'         '          some named subareas ...
OUT2     DC    CL9'         '
OUT3     DC    CL9'         '
OUT4     DC    CL9'         '
OUT5     DC    CL9'         '
OUT6     DC    CL9'         '
OUT7     DC    CL9'         '
OUT8     DC    CL9'         '
KXFF     DC    8XL1'FF'                end of parameter line
CLEAR    DS    0CL72                   clear buffer
         DC    72CL1' '
         REGEQU                        register equtes
         END   COLORS                  THE END


MDISKS EXEC

/*   Procedure MDISKS                                               */
/*   Processor REXX                                                 */
/*   Call:   MDISKS real_address_of_a_DASD                          */
/*   Function: This procedure will show all users who have          */
/*             an MDISK or LINK to an MDISK on the DASD specified   */
/*             by 'real_address_of_a_DASD'.                         */
/*   Requirements: privileged class C or E (for examination of      */
/*                 real storage).                                   */
/*                 In this version the COLORS module must be avai-  */
/*                 lable for display (colour display in FULLSCREEN) */
/*   Return codes & messages:                                       */
/*     0 - execution OK                                             */
/*    99 - HELP call, display online help.                          */
/*   100 - execution aborted, message displayed                     */
/*   999 - execution aborted, can not read file MDISKS EMESSAGE     */
/*   if return code 999 is issued, the last return code from        */
/*   the EXEC will be displayed. Look then into the file            */
/*   MDISKS EMESSAGE for explanation.                               */
/*   Version: 1.2                                                   */
/*   Files needed for execution:                                    */
/*   MDISKS EXEC                                                    */
/*   MDISKS EMESSAGE, if error occurs                               */
/*   MDISKS READ_ME,  for explanation of how this procedure work.   */
arg rdev_adr            /*  parameter: real address of a DASD       */
if ( rdev_adr = '?' | rdev_adr = 'HELP' ) then call online_help
'VMFCLEAR'
'Q FULLSCREEN (STACK'  /* FULLSCREEN status ?                       */
pull sys_answer
if WORD(sys_answer,2) = 'ON' then do
                                   fs_flag = '1'
                                   wht = 7
                                   pnk = 3S
                                   yel = 6
                                   red = 2
                                  end
                             else do
                                   fs_flag = '0'
                                   wht = 'WHITE'
                                   pnk = 'PINK'
                                   yel = 'YELLOW'
                                   red = 'RED'
                                  end
cl2 = wht
'SET IMSG OFF'
'SET EMSG OFF'
'SET CMSTYPE HT'              /*   here is nothing to see !         */
'EXECIO * CP (STR Q' rdev_adr          /* check the given address   */
ret = rc
'SET CMSTYPE RT'                       /* let us see, what is was   */
if ret ¬= 0 then call err_msg 1 rdev_adr
if queued() ¬= 1 then call err_msg 2    /* something gone wrong !   */
pull line                               /* by EXECIO                */
if WORD(line,1) ¬= 'DASD' then call err_msg 3 rdev_adr
select
   when WORD(line,3) = 'OFFLINE' then call err_msg 4 rdev_adr
   when WORDS(line) = 3 then call err_msg 5
   when WORD(line,3) = 'ATTACHED' then call err_msg 6 WORD(line,5)
   when WORD(line,4) = 'OWNED' then do
                                     say 'Device' rdev_adr,
                                         'is a CP owned device,',
                                         'continue searching ...'
                                     say    /* CP owned device      */
                                    end
   when WORD(line,4) = 'SYSTEM' then do
                                      say 'Device' rdev_adr,
                                          'is attached to system,',
                                          'continue searching ....'
                                      say    /* attached to system  */
                                     end
   otherwise call err_msg 8 rdev_adr
end
'EXECIO * CP (STR LOC ' rdev_adr         /* LOCATE the REDV block   */
if rc ¬= 0 then call err_msg 7
do QUEUED()
 pull rdev_bk .                          /* read location           */
end
/* for the description, how it works, see file MDISKS READ_ME !!!!  */
chain_adr = D2X(X2D(rdev_bk) + X2D('18'))
parse value DIAG(8,'D H'||chain_adr||'.4') with . mdisk .
do i = 0
   parse value DIAG(8,'D H'||mdisk||'.4') with . next_md .
   vdev_bk = D2X(X2D(mdisk) + X2D('68'))
   numb_lk_adr = D2X(X2D(mdisk) + X2D('4'))
   parse value DIAG(8,'D H'||numb_lk_adr||'.C') with . num_lk .
   parse value DIAG(8,'D H'||vdev_bk||'.C') with . word1 word2 word3 .
   userid = X2C(word1)||X2C(word2)
   virt_adr = SUBSTR(word3,1,4)
   parse value DIAGRC(8,'Q '||userid) with  retcod .
   if retcod ¬= 0 then num_lk = X2D(num_lk)
                  else num_lk = X2D(num_lk) - 1
   if num_lk = 0 then do
                       link = ''
                       lnk = ''
                      end
                 else do
                       if num_lk = 1 then linkw = 'LINK'
                                     else linkw = 'LINKs'
                       link = 'with' num_lk linkw 'to this MDISK'
                       lnk = 'Linked users:'
                       next_adr = D2X(X2D(mdisk) + X2D('5C'))
                       parse value DIAG(8,'D H'||next_adr||,
                                      '.4') with . vdev_bk .
                       do j = 0
                          vmdbk_adr = D2X(X2D(vdev_bk) + X2D('14'))
                          parse value DIAG(8,'D H'||vmdbk_adr||,
                                      '.4') with . vmdbk .
                          user_adr = D2X(X2D(vmdbk) + X2D('80'))
                          parse value DIAG(8,'D H'||user_adr||,
                                      '.8') with . word1 word2 .
                          lnk_userid = X2C(word1)||X2C(word2)
                          if userid = lnk_userid then lnk_userid = ''
                          lnk = lnk lnk_userid
                          next_vdev = D2X(X2D(vdev_bk) + X2D('70'))
                          parse value DIAG(8,'D H'||next_vdev||,
                                      '.4') with . vdev_bk .
                          if vdev_bk = '00000000' then leave j
                       end
                      end
   if link = '' then cl1 = yel
                else cl1 = pnk
   data = userid virt_adr link
   if fs_flag then 'COLORS' cl1 userid virt_adr link
              else call lcolor cl1 data
   if lnk ¬= '' then do
                      n_lnk = WORDS(lnk)
                      out_lnk = ''
                      say WORD(lnk,1) WORD(lnk,2)
                      do w=1
                         if WORD(lnk,w+2) = '' then leave w
                         out_lnk = out_lnk LEFT(WORD(lnk,w+2),8)
                         if w/8 = TRUNC(w/8) then
                         do
                          if fs_flag then 'COLORS' cl2 out_lnk
                                     else call lcolor cl2 out_lnk
                          out_lnk = ''
                         end
                      end
                     if fs_flag then 'COLORS' cl2 out_lnk
                                else call lcolor cl2 out_lnk
                     end
   if next_md = '00000000' then leave i
   mdisk = next_md
end
exit        /*   T H E   E N D    T H E   E N D    T H E   E N D  */
/*   Display a line if 'FULLSCREEN' is not used                   */
lcolor:
  arg color data
  'EXECIO 1 CP (STR Q SCREEN'
  pull . . . vmout old_col old_ext .
  'EXECIO 0 CP (STR SCREEN VMOUT' color 'NONE'
  say data
  'EXECIO 0 CP (STR SCREEN VMOUT' old_col old_ext
return
/*   Error is occured, read message from MDISKS EMESSAGE and exit */
err_msg:
    parameter = ''
    arg number parameter
    'EXECIO 1 DISKR MDISKS EMESSAGE *' number '(FINI'
    if rc ¬= 0 then do
                     say 'Cannot read MDISKS EMESSAGE *'
                     say 'last RC was ' number
                     say 'Procedure aborted ...'
                     exit 999
                    end
    do QUEUED()
      parse pull message
    end
    say STRIP(message,'T')||' '||parameter
    say
    say 'For info enter MDISKS ? or MDISKS HELP'
    say
    exit 100
return
/*   HELP call, forced by parameter HELP or ?                     */
online_help:
    say ''
    say 'This procedure displays every user-id which has an MDISK'
    say 'or a LINK to an MDISK which is defined on a DASD'
    say ''
    say 'Enter: MDISKS rdev_adr, where rdev_adr is the real address'
    say 'of the device you want to examine'
    say ''
    say 'Error code is issued, if specified DASD is attached to any'
    say 'user or is not attached at all.                           '
    say 'If the specified address is not defined as a DASD, error  '
    say 'message is issued.                                        '
    say ''
    say 'For more information, read the file MDISKS READ_ME'
    say ''
    exit 99
return


MDISKS EMESSAGE

MDSK001 Device does not exist or address was invalid:
MDSK002 Error while executing EXECIO.
MDSK003 The specified device is not a DASD:
MDSK004 Device is off-line, address:
MDSK005 Device is free, not attached to system or any user.
MDSK006 Device is attached to
MDSK007 Error while executing the CP command LOCATE.
MDSK008 Cannot identify the answer to 'Q'

Peter Slowikowski
Consultant (Germany)                                     P Slowikowski 1991

