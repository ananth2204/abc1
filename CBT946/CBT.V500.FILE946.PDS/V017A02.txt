 Paging and performance
The VM control program (CP) manages a complex mix of real resources (eg
terminals and disk drives), which it allocates to a variety of virtual machines.
This mixture makes it difficult to attain good performance from the system.
This article attempts to give an overview of paging and explain how each stage
can affect performance.
The processor's main storage is sub-divided into 4K page frames.  The CP-
resident nucleus occupies some of these pages (the exact number varies depending
on the configuration).  There is also space allocated for trace tables, which,
although optional, frequently occur and occupy about four pages per megabyte.
In addition to the nucleus area, the top end of real storage is allocated as a
free storage area (FSA), which is used for CP control blocks.  Its size is
dependent on the size and attributes of the user community.  Commonly, values of
three pages per user are allocated.  Sites running MVS as a guest system usually
allocate some of the remaining pages to allow MVS guest systems to run in
virtual equals real.  This can confer on the guest system nearly (90%+) native
performance.  The pages that remain make up the dynamic paging area (DPA).  It
is the pages in the DPA that can be used by virtual machines for processing.
A virtual machine's definition in the directory contains a virtual storage size.
This is allocated to the virtual machine when it is started.  It can have pages
in real storage and on auxiliary storage.  Segment and page tables are
maintained by the CP and used to locate any specific instruction.  Only
instructions in pages in real storage can be processed.  An active virtual
machine will be in one of the three queues (Q1,Q2,Q3).  Each queue is made up of
virtual machines that require different lengths of time to process.  The
scheduler will select for processing a runnable in-queue user with the highest
priority.  Users waiting to be selected are assigned a priority based on three
factors:
1    The priority value in the directory entry for that user (1-99)
2    Which queue the user is in (ie Q1,Q2 or Q3)
3    The share of CPU resources consumed by that user.
These values will have an effect on the performance of that user by affecting
its likelihood of being selected for processing.
All pages in real storage have an entry in the core table.  After a page fault
occurs and a page from auxiliary storage is paged into real storage the CP will
update the core table entry for that page.  The pages allocated to a user are
called its working set.  CP calculates the sum total of working set sizes for
all virtual machines that are in queues.  CP calculates the percentage storage
utilisation value by dividing the sum of working sets by the number of pages in
DPA and multiplying by 100.  The scheduler will attempt to maintain this value
at or below 100%.  Virtual machines are not placed in the runnable queue if this
would send the value above 100%.  Instead they are placed on an eligible list,
and wait until real storage is available and they can be added to the queue.
This delay in starting will obviously cause a degradation in the performance of
the virtual machine.
Another problem with paging is the need to have a free page frame in the DPA
that can accept pages from auxiliary storage.  CP maintains a list called the
free list, which contains references to all available real storage page frames.
After an IPL almost all DPA pages are on the free list.  During operation pages
can be added when a user logs off or performs a re-set function, eg SYSTEM
CLEAR.  CP maintains another list called the flush list.  This lists real
storage pages that are allocated to users who are not ready to use the CPU.
Both the free list and the flush list are held in the core table.  As a page
moves from one list to another its entry in the table is updated.  To allow for
demand paging to occur the minimum size for the free list is equal to the number
of users ready to use the CPU.  Should the number of pages in the list drop
below this minimum threshold the CP must take action.  The flush list is scanned
and page reference information is re-set.  Any unreferenced pages are
immediately placed on the free list.  If there are no unreferenced pages, CP
chooses pages that are unchanged.  If this is still insufficient the list is
scanned again.  This will select changed pages.  The contents of a changed page
must be paged out to auxiliary storage before the page frame becomes free for
use.
In the event that this still has not produced enough pages CP will reallocate
pages from active users.  This process is referred to as page stealing.  Pages
are selected by scanning the core table.  The scan starts from the position it
 stopped at during a previous scan.  The scan continues until enough pages have
been made available.  If the end of the core table is reached it will restart at
the beginning of the table.  Time spent scanning lists, and paging out core
pages to allow other pages to be paged in, is time that could be better spent
processing work and will have an overall degrading effect on the system.  Also,
if active pages are paged out, they may almost immediately need to be paged in
again.  This can have a very deleterious effect on overall performance.
In addition to page datasets on disk, with HPO it is possible to have swap
datasets, and to swap groups of pages rather than individual pages.  It is usual
to provide dedicated swapping devices for the swap set of pages to be moved to
and from.  The use of swapping is supposed to improve performance, and with HPO
release 5 the balance between paging and swapping has been changed so that
swapping predominates, thus improving performance still further.  The other
change with release 5 was the addition of a default parameter to the SYSPAG
macro to automatically distribute I/O activity over available channels and
control units.  This should reduce I/O contention and simplify tuning the paging
and swapping systems, again improving performance.

A M Phillips
Consultant (UK)

) Xephon 1988












































