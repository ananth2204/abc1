Product/vendor tracking system - continued

This month we conclude the routine that maintains product and
vendor information in one system. The routine allows
reporting, various listing options, changes, and a multitude of
other uses.

Else Do i = 1 to 9999
  If openvend.i Then Do
    openvend.i = 0
    vendfile.current = syswork||Right(i,4,0)
    outfile = vendfile.current
    Return
    End
  End
'BARF: OUT OF FILENAMES!!!!!****'
Return
/* Validation routine for an ADD or UPDATE function                  */
VALIDATE:;
If product_work Then
  Select
    When name release prodnum vendor = '' Then Do
      msg.1 = Format_msg(13,'E')
      msg.2 = Format_msg(11,'E')
      Return 1
      End
    When name = '' | release = '' | prodnum = '' | vendor = '' Then Do
      msg.1 = Format_msg(10,'E')
      msg.2 = Format_msg(11,'E')
      Return 1
      End
    When current = 0 & how = 'updated' Then Do
      msg.1 = Format_msg(9,'E')
      msg.2 = Format_msg(11,'E')
      Return 1
      End
    Otherwise Nop
    End
Else If v_name = '' Then Do
    msg.1 = 'Missing vendor name'
    Return 1
    End
RCURSOR = ' '
Return 0
/* Set the current array point to the screen values                  */
SETCURRENT:;
If product_work Then Do
  flag.current = ''
  name.current = name
  desc.current = desc
  release.current = release
  prodnum.current = prodnum
  servlev.current = servlev
  fm_id.current = fm_id
  serial.current = serial
  vendor.current = vendor
  inhouse.current = inhouse
  intest.current = intest
  Do i = 1 To 4
    sys.i.current = sys.i
    End
  Do i = 1 To 5
    comm.current.i = scomm.i
    mnote.current.i = m_note.i
    End
  ilc_cost.current = ilc_cost
  annual_cost.current = annual_cost
  dropped.current = dropped
  aquired.current = aquired
  renew.current = renew
  maint_cat.current = maint_cat
  maint_proposed.current = maint_proposed
  sfwloc1.current = sfwloc1
  sfwloc2.current = sfwloc2
  test_where.current = test_where
  cpu_serial.current = cpu_serial
  devices.current = devices
  Do i = 1 To max_hist
    hd.current.i = hd_keep.i
    ht.current.i = ht_keep.i
    End
  End
Else Do
  vname.current = v_name
  Do i = 1 to 4
    vaddr.current.i = v_addr.i
    vnote.current.i = v_note.i
    End
  vphone.current = v_phone
  vsite.current = v_site
  vrep.current = v_rep
  vcontact.current = v_contact
  End
Return
/* LINK routine to validate security and access to product disk      */
LINKUP:;
Arg linkmode .
Parse Value Diagrc(8,'LINK' dbdisk cuu linkmode),
      With qrc . qtext '15'x qtext2 '15'x qtext3 '15'x
If qrc ¬= 0 Then Return
Address Command 'SET CMSTYPE HT'
Address Command 'ACCESS' cuu mode
Address Command 'SET CMSTYPE RT'
Return
/* Clear the screen fields...                                        */
CLEAR:;
Arg which '/' opt .
list = ''
If which = '' Then Do i = 1 to 8
  list = list variable.i
  End
Else Do i = 1 to Words(which)
  whichone = Word(which,i)
  list = list variable.whichone
  End
Do i = 1 To Words(list)
If Left(Word(list,i),6) ¬= 'PFLINE' & Left(Word(list,i),4) ¬= 'LABL' & ,
    Word(list,i) ¬= 'SYSTEM' Then Interpret Word(list,i) "=''"
  End
If opt = '' Then Do
  current = 0
  maint_loaded = 0
  hd_keep. = ''
  ht_keep. = ''
  End
RCURSOR = ' '
Return
/* All messages used throughout this routine                          */
MESSAGES:;
prdlev.1  = 'Search requires Product Name, Number, FM_ID,  or Vendor.'
prdlev.2  = 'Total of $$$ history records found out of $$$.'
prdlev.3  = 'Your search option resulted in $$$ item(s) found.'
prdlev.4  = 'Cursor is not on a valid line.'
prdlev.5  = '$$$ Key is not active.'
prdlev.6  = 'Items $$$ through $$$, out of $$$, listed.'
prdlev.7  = 'No $$$ selected from list. Search again?'
prdlev.8  = 'All items requested - total of $$$ $$$ found.'
prdlev.9  = 'WARNING...You are on item 0, you cannot act on it.'
prdlev.10 = 'Product Name, Release Number, and Vendor are required.'
prdlev.11 = 'Function terminated.'
prdlev.12 = '$$$ record was $$$ successfully.'
prdlev.13 = 'All the required fields are BLANK you dweeb!!!'
prdlev.14 = 'Product Number is NOT VALID!!!'
prdlev.15 = 'You have made changes to the screen - no DELETE allowed.'
prdlev.16 = 'No changes were made to the screen - why UPDATE it?!'
prdlev.17 = 'File was sorted successfully.'
prdlev.18 = 'Search only allows Product Name OR Number OR FM_ID OR',
                                                               ' Vendor'
prdlev.19 = 'Specify ONE ONLY!'
prdlev.20 = '***NOTE*** This record has been made inactive.'
prdlev.21 = 'You cannot modify a record that is in "inactive" status.  '
prdlev.22 = 'History lines were compressed.'
prdlev.23 = '* Vendor was NOT found. Choose one, or PF3 to add one.'
prdlev.24 = 'NOTE: A current vendor was NOT selected.'
prdlev.25 = 'Choose ONE report destination option.'
prdlev.26 = 'Choose at least one report to generate, or PF3 to exit.'
prdlev.27 = 'Report processing is ready to go - tap PF7 to initiate.'
prdlev.28 = 'Once INACTIVE, the record cannot be updated.  If you '
prdlev.29 = 'are sure you want this record inactive, tap PF6 again.'
prdlev.30 = 'You have choosen to ADD a NEW record.'
prdlev.31 = 'Tap PF4 again to actually ADD this as a NEW entry.'
prdlev.32 = '* Vendor was NOT found. Please add it, or PF4 to choose it'
prdlev.33 = 'Tried to find:'
prdlev.34 = 'WARNING: This record has been updated since you first ',
                                                           'read it in.'
prdlev.35 = 'You are now in update mode.'
prdlev.36 = 'You are now out of update mode.'
prdlev.37 = 'Beginning build of $$$ $$$ report...'
prdlev.38 = 'Requested reports generated successfully.'
prdlev.97 = 'Loading Product and Vendor records - be patient...'
prdlev.98 = 'Product Disk is currently in use...try again in later.'
prdlev.99 = 'You are not authorized to update the product file.'
Return
/* Format a message to be displayed on the screen                    */
FORMAT_MSG:; Procedure Expose prdlev.;
Parse Arg number , error_level , replace_words
message = prdlev.number
If error_level ¬= 'I' Then 'SIGNAL ON'
Do i = 1 To Words(replace_words)
  $pos = Pos('$$$',message)
  If $pos = 0 Then Leave
  message = Substr(message,1,$pos-1)||,
            Word(replace_words,i)||,
            Substr(message,$pos+3)
  End
Return 'PRDLEV'Right(number,3,0)||error_level':' message
/* Set up the variables for DMS...                                   */
VARIABLES:
name. = '';hd. = ''; ht. = ''
labl. = '';prodfile.= ''; vendfile.=''
flag. = '';hist_date. = ''; hist_text. = ''
vflag. = '';vname. = ''
variable.0 = 'SYSTEM MSG.1 MSG.2'
variable.1 = 'SYSTEM F_INDX',
             'RECFLAG NAME DESC',
             'VENDOR PRODNUM RELEASE SERVLEV SERIAL FM_ID',
             'INHOUSE ILC_COST ANNUAL_COST DROPPED AQUIRED RENEW',
             'SCOMM.1 SCOMM.2 SCOMM.3 SCOMM.4 SCOMM.5',
             'MSG.1 MSG.2 PFLINE1 PFLINE2'
variable.2 = 'SYSTEM F_INDX RECFLAG NAME_REL',
             'MAINT_CAT MAINT_PROPOSED SFWLOC1 SFWLOC2',
             'INTEST TEST_WHERE',
             'LABL.1 SYS.1 LABL.2 SYS.2 LABL.3 SYS.3 LABL.4 SYS.4',
             'CPU_SERIAL DEVICES',
             'M_NOTE.1 M_NOTE.2 M_NOTE.3 M_NOTE.4 M_NOTE.5',
             'MSG.1 MSG.2 PFLINE1 PFLINE2'
variable.3 = 'SYSTEM F_INDX RECFLAG NAME_REL LAST_HIST'
histvars = ''
Do i = 1 to max_entry
  variable.3 = variable.3 'HIST_INDEX.'i 'HIST_DATE.'i 'HIST_TEXT.'i
  histvars = histvars 'HIST_DATE.'i 'HIST_TEXT.'i
  End
variable.3 = variable.3 'MSG.1 MSG.2 PFLINE1 PFLINE2'
variable.4 = 'SYSTEM'
Do i = 1 to max_entry
 variable.4 = variable.4 'PRODNUM2.'i 'RELEASE2.'i 'STATUS2.'i 'NAME2.'i
  End
variable.4 = variable.4 'MSG.1 MSG.2'
variable.5 = 'SYSTEM'
Do i = 1 to max_entry
  variable.5 = variable.5 'NAME3.'i 'VENDOR3.'i
  End
variable.5 = variable.5 'MSG.1 MSG.2'
variable.6 = 'SYSTEM V_INDX V_RECFLAG V_NAME',
             'V_ADDR.1 V_PHONE V_ADDR.2 V_ADDR.3 V_ADDR.4',
             'V_SITE V_REP V_CONTACT',
             'V_NOTE.1 V_NOTE.2 V_NOTE.3 V_NOTE.4',
             'MSG.1 MSG.2 PFLINE1 PFLINE2'
variable.7 = 'SYSTEM V_RECFLAG'
vendlines = ''
Do i = 1 to max_entry
  variable.7 = variable.7 'V_NAME.'i
  vendlines = vendlines 'V_NAME.'i
  End
variable.7 = variable.7 'MSG.1 MSG.2'
variable.8 = 'SYSTEM',
             'WANT_LIST WANT_SUMMARY',
             'WANT_COSTS WANT_DEPENDS',
             'WANT_MAINT WANT_VENDOR',
             'USE_COMMAND USE_DISK',
             'PRT_COMMAND COMMAND_PARMS1 COMMAND_PARMS2',
             'MSG.1 MSG.2'
prodvars.1 = 'FLAG.SL NAME.SL DESC.SL VENDOR.SL PRODNUM.SL RELEASE.SL ',
                                                           'SERVLEV.SL',
 'SERIAL.SL FM_ID.SL INHOUSE.SL ILC_COST.SL ANNUAL_COST.SL DROPPED.SL',
 'AQUIRED.SL COMM.SL.1 COMM.SL.2 COMM.SL.3 COMM.SL.4 COMM.SL.5 RENEW.SL'
prodvars.2 = 'MAINT_CAT.SL MAINT_PROPOSED.SL SFWLOC1.SL SFWLOC2.SL',
 'INTEST.SL TEST_WHERE.SL SYS.1.SL SYS.2.SL SYS.3.SL SYS.4.SL',
 'CPU_SERIAL.SL DEVICES.SL',
 'MNOTE.SL.1 MNOTE.SL.2 MNOTE.SL.3 MNOTE.SL.4 MNOTE.SL.5'
prodvars.3 = ''
Do i = 1 to 15
   prodvars.3 = prodvars.3 'HD.SL.'i' HT.SL.'i
   End
prodvars.4 = ''
Do i = 16 to 30
   prodvars.4 = prodvars.4 'HD.SL.'i' HT.SL.'i
   End
max_hist = 30
Do p = 1 to 4
  parse_product.p = ''
  Do i = 1 to Words(prodvars.p)
     If i > 1 Then parse_product.p = parse_product.p||"'~'"||Word(prodvars.p,i)
     Else parse_product.p = Word(prodvars.p,i)
     End
  End
vendvars = 'VFLAG.SL VNAME.SL VADDR.SL.1 VADDR.SL.2 VADDR.SL.3 ,
                                                            VADDR.SL.4',
           'VPHONE.SL VSITE.SL VREP.SL VCONTACT.SL',
           'VNOTE.SL.1 VNOTE.SL.2 VNOTE.SL.3 VNOTE.SL.4'
parse_vendor = ''
Do i = 1 to Words(vendvars)
   If i > 1 Then parse_vendor = parse_vendor||"'~'"||Word(vendvars,i)
   Else parse_vendor = Word(vendvars,i)
   End
Drop prodvars.1 prodvars.2 prodvars.3 prodvars.4 vendvars
Return
/*** COMMA Function ****/
COMMA: Procedure;
Parse Arg what
what = Space(Translate(what,' ',','))
newwhat = ''
Do i = 1 to Words(what)-1
  newwhat = newwhat Word(what,i)||','
  End
newwhat = newwhat Word(what,i)
Return Strip(newwhat)
/*  Display the main function index screen                            */
SHOW_INDEX:
Call SCREEN 'PRDTRKx0'                         /* Start INDEX    scrn */
msg.1 = ''
msg.2 = Subword(RSTATUS,2)
Do Forever
  Address Command 'CONWAIT'
  'CURSOR T1'
  'COMMENT * Select a function and press the appropriate PF key.'
  'DISPLAY'
  'SIGNAL OFF'
  msg. = ''
  Select
    When RSTATUS = 'PF3' Then Signal TERMINATE
    When RSTATUS = 'PF5' Then Do
       Call CLEAR 1 2 3
       Call SCREEN 'PRDTRKx1' /* PRODUCT INFO */
       Leave
       End
    When RSTATUS = 'PF7' Then Do
       Call CLEAR 6
       Call SCREEN 'PRDTRKx6' /* VENDOR INFO  */
       Leave
       End
    When RSTATUS = 'PF9' Then Leave
    When RSTATUS = 'ENTER' Then Nop
    Otherwise msg.1 = RSTATUS 'key is not active at this time.'
             'SIGNAL ON'
    End
  End
RCURSOR = ' '
index_used = 1
If RSTATUS = 'PF9' Then Call REPORT_PROCESS          /* PRINTING     */
Return
/* Swap the PF key settings between standard and update mode.         */
SWAP_PFKEYS:
If current ¬= 0 Then Do
  Call CHECK_FILE_STAMP    /* Check date stamp...  */
  If result = 1 Then
     msg.1 = Format_msg(34,'W')
  End
If update_mode Then Do
  If msg.1 = '' Then msg.1 = Format_msg(36,'I')
  update_mode = 0
  Call SET_PFKEYS
  End
Else Do
  If msg.1 = '' Then msg.1 = Format_msg(35,'I')
  update_mode = 1
  pf.2 = 'Std PFKs'
  pf.4 = 'Add New'
  pf.5 = 'Update'
  pf.6 = 'Inact'
  pf.7 = ''
  pf.8 = ''
  End
Call SET_PFLINES
Return
/* Set the default PF key settings for the screen called.             */
SET_PFKEYS:
pf. = ''
pf.1 = 'Clear'
pf.2 = 'Upd PFKs'
pf.3 = 'Exit'
pf.7 = 'Prev Rec'
pf.8 = 'Next Rec'
If vendor_work & vendor_special Then Do
  pf.2 = ''
  pf.4 = 'ListALL'
  pf.6 = 'ADD NEW'
  pf.7 = ''
  pf.8 = ''
  End
Else If screen = 1 | screen = 2 | vendor_work Then Do
  pf.4 = 'ListALL'
  If screen ¬= 2 Then pf.5 = 'Search'
  If screen = 2 Then pf.11 = 'Page -1'
  If ¬vendor_work Then pf.12 = 'Page +1'
  End
Else If screen = 3 Then Do
  pf.9 = 'Backward'
  pf.10 = 'Forward'
  pf.11 = 'Page -1'
  End
If update_mode Then Do
  update_mode = 0
  Call SWAP_PFKEYS
  End
Return
/* Set  up the PF key lines                                           */
SET_PFLINES:
pfline1 = ''; pfline2 = ''
Do i = 1 to 2
  pfline1 = pfline1||'PF'i'='Left(pf.i,8)' '
  n = i+6
  pfline2 = pfline2||'PF'n'='Left(pf.n,8)' '
  End
pfline1 = pfline1||'PF3='Left(pf.3,8)'  '
pfline2 = pfline2||'PF9='Left(pf.9,8)' '
Do i = 4 to 6
  pfline1 = pfline1||'PF'i'='Left(pf.i,7)'  '
  n = i+6
  pfline2 = pfline2||'PF'n'='Left(pf.n,7)' '
  End
Return
/* Print facility...                                                  */
REPORT_PROCESS:
Call CLEAR 8
Call SCREEN 'PRDTRKx8'
RCURSOR = ' '
Address Command 'GLOBALV SELECT $PRODTRK GET PRNTCMD'
Parse Value prntcmd With prt_command '~' command_parms1 '~' command_parms2
Call CHECK_PRT_OPTS 'PRTONLY'
Do Forever
  'CURSOR' RCURSOR
  Address Command 'CONWAIT'                   /* Clear console I/O   */
  'DISPLAY'                                   /* Show screen         */
  'SIGNAL OFF'
  msg. = ''
  Select                                      /* Check what was tapd */
    When RSTATUS = 'PF3' Then Call TERMINATE
    When RSTATUS = 'PF7' Then Do
      Call CHECK_PRT_OPTS
      If msg.1 = '' Then Do
        If want_list    = 'X' Then Call PRINT_LIST
        If want_summary = 'X' Then Call PRINT_SUMMARY
        If want_costs   = 'X' Then Call PRINT_COSTS
        If want_depends = 'X' Then Call PRINT_DEPENDENCY
        If want_maint   = 'X' Then Call PRINT_MAINT
        If want_vendor  = 'X' Then Call PRINT_VENDOR
        Leave
        End
      End
    When RSTATUS = 'ENTER' Then Do
      Call CHECK_PRT_OPTS
      If msg.1 = '' Then msg.1 = Format_msg(27,'I')
      End
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  End
msg.1 = Format_msg(38,'I')
If use_disk = 'X' Then msg.1 = msg.1 'Left on your disk.'
Address Command ,
'GLOBALV SELECT $PRODTRK SETLP PRNTCMD' ,
'prt_command'~'command_parms1'~'command_parms2
RSTATUS = 'PF3' msg.1
Signal TERMINATE
Return
/* Check the options on the print screen and make sure they are OK    */
CHECK_PRT_OPTS:
Arg opt .
/* Add your DEFAULT PRINT command here ...                            */
If prt_command command_parms1 command_parms2 = '' Then Do
  prt_command = ''
  command_parms1 = ''
  command_parms2 = ''
  End
If opt = 'PRTONLY' Then Return
If want_list ¬= '' Then want_list = 'X'
If want_summary ¬= '' Then want_summary = 'X'
If want_costs ¬= '' Then want_costs = 'X'
If want_depends ¬= '' Then want_depends = 'X'
If want_maint ¬= '' Then want_maint = 'X'
If want_vendor ¬= '' Then want_vendor = 'X'
If use_command ¬= '' Then use_command = 'X'
If use_disk ¬= '' Then use_disk = 'X'
/***TEMPORARY...REPORTS NOT DONE YET***/
want_depends = ''
want_maint = ''
/***************/
If want_list want_summary want_costs want_depends ,
                                     want_maint want_vendor = '' Then Do
   msg.1 = Format_msg(26,'E')
   Return
   End
If (use_command = 'X' & use_disk = 'X') | ,
                              (use_command = '' & use_disk = '') Then Do
   msg.1 = Format_msg(25,'E')
   Return
   End
Return
/* A product list was requested...                                    */
PRINT_LIST:
Say Format_msg(37,'I','Product List')
report_file = syswork'LIST LISTING A'
report_title = 'Products List'
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
page = 0
Call PRT_HEADING 1 0
Call ADD_LINE ' ~Product Name~22~ ~38~Prodnum~9~ ~1~Release~13~ ',
                                     '~1~Srv Level~15~ ~1~Status~10~ ~1'
Call UNDERLINE 10 50 3 12 3 12 3 12 3 12
lines = lines + 1                               /* adds a blank line */
Do prt = 1 to maxprods
  lines = lines + 1
  Call PROD_STAT prt
  line.lines = Copies(' ',11)||Left(name.prt,52) Left(prodnum.prt,14) ,
                                                 Left(release.prt,14) ,
    Left(servlev.prt,14) Left(Result,12)
  lines = lines + 1
  line.lines = Copies(' ',11)||'     Desc:' Left(desc.prt,50)
  lines = lines + 1                             /* adds a blank line */
  If prt//16 = 0 Then Do
    Call PRT_HEADING 1 0
    Call ADD_LINE ' ~Product Name~22~ ~38~Prodnum~9~ ~1~Release~13~ ',
                                     '~1~Srv Level~15~ ~1~Status~10~ ~1'
    Call UNDERLINE 10 50 3 12 3 12 3 12 3 12
    lines = lines + 1                           /* adds a blank line */
    End
  End
If lines > 8 Then
  Address Command 'EXECIO' lines 'DISKW' report_file ,
                                             '0 F 133 (FINIS STEM LINE.'
If use_disk = 'X'Then Return
Address Command prt_command report_file command_parms1 command_parms2
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
Return
/* A costs report was requested...                                    */
PRINT_COSTS:
Say Format_msg(37,'I','Cost/Date Summary')
report_file = syswork'COST LISTING A'
report_title = 'Product Cost/Date Summary'
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
page = 0
Call PRT_HEADING 1 0
Call ADD_LINE ' ~Product Name~14~ ~32~(Cat)~5~ ~0~Release~7~ ~1~ILC ',
                                      'Cost~12~ ~1~Ann Cost~11~ ~1'||,
    '~Renewal~10~ ~1~Last Maint~14~ ~1~Next Maint~11~ ~1'
Call UNDERLINE 2 50 1 12 1 12 1 12 1 12 1 12 1 12
lines = lines + 1                               /* adds a blank line */
Do prt = 1 to maxprods
  Call PROD_STAT prt
  next_maint = Result
  If Find('Inactive Cancelled',next_maint) = 0
                                   Then next_maint = maint_proposed.prt
  lines = lines + 1
  line.lines = '   'Left(name.prt,46)||'('Left(maint_cat.prt,2)')' ,
                                               Left(release.prt,12) ,
    Left(ilc_cost.prt,12) Left(annual_cost.prt,12) Left(renew.prt,12) ,
                            Left(hd.prt.active,12) Left(next_maint,12)
  lines = lines + 1
  line.lines = '        Desc:' Left(desc.prt,50)
  lines = lines + 1
  line.lines = '        Vend:' Left(vendor.prt,50)
  If prt//12 ¬= 0 Then lines = lines + 1
  Else Do
    Call PRT_HEADING 1 0
    Call ADD_LINE ' ~Product Name~14~ ~32~(Cat)~5~ ~0~Release~7~ ',
                                '~1~ILC Cost~12~ ~1~Ann Cost~11~ ~1'||,
         '~Renewal~10~ ~1~Last Maint~14~ ~1~Next Maint~11~ ~1'
    Call UNDERLINE 2 50 1 12 1 12 1 12 1 12 1 12 1 12
    lines = lines + 1
    End
  End
If lines > 8 Then
  Address Command 'EXECIO' lines 'DISKW' report_file ,
                                             '0 F 133 (FINIS STEM LINE.'
If use_disk = 'X'Then Return
Address Command prt_command report_file command_parms1 command_parms2
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
Return
/* A summary report was requested...                                  */
PRINT_SUMMARY:
Say Format_msg(37,'I','Product Summary')
report_file = syswork'INFO LISTING A'
report_title = 'Product Information Summary'
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
page = 0
Call PRT_HEADING 8 112
Do prt = 1 to maxprods
  Call ADD_LINE '0~Product Name:~25~'name.prt'~63~Release:~14~'release.prt'~'15
  Call UNDERLINE 26 63 15 15
 Call ADD_LINE ' ~Description.:~25~'desc.prt'~63~Put Level:~14~'servlev.prt'~'15
  Call UNDERLINE 26 63 15 15
Call ADD_LINE ' ~Vendor  Name:~25~'vendor.prt'~63~Prod Num:~14~'prodnum.prt'~'15
  Call UNDERLINE 26 63 15 15
  Call PROD_STAT prt
  Call ADD_LINE ' ~Status:~103~'Result'~15'
  Call UNDERLINE 104 15
  Call LAST_HIST prt
Call ADD_LINE ' ~Last Maint..:~25~'last_hist'~63~Catagory:~14~'maint_cat.prt'~'2
  Call UNDERLINE 26 63 15 2
  Call ADD_LINE ' ~Other Info..:~25~'comm.prt.1'~78'
  Call UNDERLINE 26 78
  Do i = 2 to 5
    Call ADD_LINE ' ~:~25~'comm.prt.i'~78'
    Call UNDERLINE 26 78
    End
  Call ADD_LINE ' ~'Copies('_',112)'~120~~0'
  If prt//4 = 0 Then Call PRT_HEADING 8 112
  End
If lines > 5 Then
  Address Command 'EXECIO' lines 'DISKW' report_file ,
                                             '0 F 133 (FINIS STEM LINE.'
If use_disk = 'X'Then Return
Address Command prt_command report_file command_parms1 command_parms2
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
Return
/* A vendor report was requested...                                   */
PRINT_VENDOR:
Say Format_msg(37,'I','Vendor Info')
report_file = syswork'VEND LISTING A'
report_title = 'Vendor Information'
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
page = 0
Call PRT_HEADING 8 112
Do prt = 1 to maxvend
  Call ADD_LINE '0~Vendor Name:~25~'vname.prt'~50~Address:~10~'vaddr.prt.1'~31'
  Call UNDERLINE 26 50 11 31
  Call ADD_LINE ' ~Site Id:~25~'vsite.prt'~50~:~10~'vaddr.prt.2'~31'
  Call UNDERLINE 26 50 11 31
  Call ADD_LINE ' ~Phone:~25~'vphone.prt'~50~:~10~'vaddr.prt.3'~31'
  Call UNDERLINE 26 50 11 31
  Call ADD_LINE ' ~:~86~'vaddr.prt.4'~31'
  Call UNDERLINE 87 31
  Call ADD_LINE ' ~Marketing Rep:~25~'vrep.prt'~50'
  Call UNDERLINE 26 50
  Call ADD_LINE ' ~Contact Names:~25~'vcontact.prt'~50'
  Call UNDERLINE 26 50
  Call ADD_LINE ' ~Other Info..:~25~'vnote.prt.1'~78'
  Call UNDERLINE 26 78
  Do i = 2 to 4
    Call ADD_LINE ' ~:~25~'vnote.prt.i'~78'
    Call UNDERLINE 26 78
    End
  Call ADD_LINE ' ~'Copies('_',112)'~120~~0'
  If prt//4 = 0 Then Call PRT_HEADING 8 112
  End
If lines > 8 Then
  Address Command 'EXECIO' lines 'DISKW' report_file '0 F 133 (FINIS STEM LINE.'
If use_disk = 'X'Then Return
Address Command prt_command report_file command_parms1 command_parms2
Signal Off ERROR
Address Command 'ERASE' report_file
Signal On  ERROR
Return
/* Standard product report heading....                                */
PRT_HEADING:
Arg bstart blength .
If page > 0 Then
  Address Command 'EXECIO' lines 'DISKW' report_file '0 F 133 (FINIS STEM LINE.'
line. = ' '
page = page + 1
line.1 = 1
line.2 = '-'
line.3 = ' 'Center(system report_title '- Page' page,132)
line.4 = '0'
line.5 = '-'Copies(' ',bstart)||Copies('_',blength)
lines = 5
Return
/* Standard print line routine...                                     */
ADD_LINE:
Parse Arg carrage '~' parms
lines = lines + 1
If carrage = '' Then carrage = ' '
line.lines = carrage
Do until parms = ''
  Parse Value parms With label '~' rjust '~' var '~' ljust '~' parms
  line.lines = line.lines||Right(label,rjust) Left(var,ljust)
  End
Return
/* Standard underline routine...                                      */
UNDERLINE:
Arg parms
lines = lines + 1
line.lines = '+'
Do until parms = ''
  Parse Value parms With spaces length parms
  line.lines = line.lines||Copies(' ',spaces)||Copies('_',length)
  End
Return
/* Check the file's date/time stamp to see if anyone has messed       */
/* with it.                                                           */
CHECK_FILE_STAMP:
Arg what .
If product_work Then Do
  workid = prodfile.current 'PRODUCT' mode
  workdate = proddate.current
  worktime = prodtime.current
  End
Else Do
  workid = vendfile.current 'VENDOR' mode
  workdate = venddate.current
  worktime = vendtime.current
  End
Signal Off ERROR
Address Command 'SET CMSTYPE HT'
Address Command 'ACCESS' cuu mode
Address Command 'SET CMSTYPE RT'
Address Command 'MAKEBUF'
Address Command 'LISTFILE' workid '(LABEL STACK'
lrc = rc
Signal On ERROR
If lrc = 0 Then Parse Pull . . . . . . . fdate ftime .
Address Command 'DROPBUF'
If what = '' Then
  If lrc ¬= 0 | fdate ¬= workdate | ftime ¬= worktime Then Return 1
  Else Return 0
Else
  If product_work Then Do
    proddate.current = fdate
    prodtime.current = ftime
    End
  Else Do
    venddate.current = fdate
    vendtime.current = ftime
    End
Return 0
/*************************SORT************************/
SORT_RESET:
If product_work Then Do
  savefile = prodfile.current
  Call SORT_ITEMS
  Do sl = 1 to maxprods
    If prodfile.sl = savefile Then Do current = sl; Leave; End
    End
  End
Else Do
  savefile = vendfile.current
  Call SORT_VENDS
  Do sl = 1 to maxvend
    If vendfile.sl = savefile Then Do current = sl; Leave; End
    End
  End
Return
/*************************SORT************************/
SORT_ITEMS:
/** Use index number 999 for a temp area to swap records ***/
Do slot1 = 1 to maxprods
  Do slot2 = slot1+1 to maxprods
    Parse Upper Value record.slot1 With . '~' nameslot1 '~' . '~' .,
                                                '~' . '~' relslot1 '~' .
    Parse Upper Value record.slot2 With . '~' nameslot2 '~' . '~' .,
                                                '~' . '~' relslot2 '~' .
    If ((nameslot2 = nameslot1) & (relslot1 > relslot2)) | ,
                                        (nameslot1 > nameslot2) Then Do
      Call SWAP_ITEMS slot2 999
      Call SWAP_ITEMS slot1 slot2
      Call SWAP_ITEMS 999 slot1
      End
    End
  End
Do sl = 1 to maxprods
  Parse Value record.sl With part.1 'FF'x part.2 'FF'x part.3 'FF'x part.4
  Do x = 1 to 4
    Interpret 'Parse Value part.x With' parse_product.x
    End
  End
Return
/*************************SORT************************/
SORT_VENDS:
/** Use index number 999 for a temp area to swap records ***/
Do slot1 = 1 to maxvend-1
  Do slot2 = slot1+1 to maxvend
    Parse Upper Value vendrec.slot1 With . '~' nameslot1 '~' .
    Parse Upper Value vendrec.slot2 With . '~' nameslot2 '~' .
    If nameslot2 < nameslot1 Then Do
      Call SWAP_VENDS slot2 999
      Call SWAP_VENDS slot1 slot2
      Call SWAP_VENDS 999 slot1
      End
    End
  End
Do sl = 1 to maxvend
  Interpret 'Parse Value vendrec.sl With' parse_vendor
  End
Return
/************************/
SWAP_ITEMS:
Arg to from .
prodfile.from = prodfile.to
proddate.from = proddate.to
prodtime.from = prodtime.to
record.from = record.to
Return
/************************/
SWAP_VENDS:
Arg to from .
vendfile.from = vendfile.to
venddate.from = venddate.to
vendtime.from = vendtime.to
vendrec.from = vendrec.to
Return


VMTRACK EXEC

/**********************************************************************/
/* VMTRACK EXEC  - VM Product Level Maintenance Tracking Routine      */
/*                 Enter VMTRACK ? for help.                          */
/* Function: To Query, Track, Update product levels for VM.           */
/* Uses: Display Management System                                    */
/* Calls PRD$PROC EXEC                                                */
/**********************************************************************/
id = 'Version 2.0 May 1991 - VMGURU Products NoInk.'
Arg parm1 . '(' opt .
If parm1 = '?' Then Do
   Say id
   Say
   Say 'Format:  VMTRACK  search-name (function'
   Say
   Say 'VMTRACK will put you into the VM Product Tracking routine menu'
   Say 'so that you can search, query, update, (etc) VM product and'
   Say 'vendor information.'
   Say
   Say 'You can optionally specify a search-name to search on a product'
   Say 'immediately to bypass the main screen.'
   Say
   Say 'You can also specify a function to begin with. Functions can be'
   Say 'one of the following:'
   Say
   Say '   Product  Vendor  Report'
   Say
   Say 'If you supply a vendor name as the search-name, then you must'
   Say 'use a function of Vendor so that the routine will search the'
   Say 'correct database for you.'
   Exit
   End
system = 'VM'                 /* Sub system name (4 chars max)       */
labels = 'VMB VMC'            /* VM system names (4 chars max)       */
disk = 'T340000 299'          /* Userid and disk that has data on it */
log = '$VMTRACK'              /* Log file name to use                */

Address Command
'EXEC PRD$PROC' parm1 'FF'x system 'FF'x labels 'FF'x disk 'FF'x log '(' opt
Exit rc


James S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1992
