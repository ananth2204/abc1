 EXEC language utilities


INTRODUCTION

After several years of writing EXECs, I have built up a large number of EXEC
utilities.  The three programs presented here have found their way into most of
these EXECs.  I trust other EXEC writers will find them as useful as I have.


BRTYPE

The first program (BRTYPE) was generated as a result of the frustration I was
experiencing with the EXEC language '&TYPE' command (and later with the REXX
'SAY' command).  The two main problems were:

%    Spaces are deleted from the message, making instructions difficult to read

%    There is no mechanism for emphasising a particular word or phrase.

Both of these problems are solved by BRTYPE.  As an example, take the following
message:

    Do you wish to proceed?        Reply Y or N

While a relatively simple message, the spacing between the words 'proceed?' and
'Reply' is not easy to produce and the characters 'Y' and 'N' do not stand out
particularly well (especially if the screen already contains a lot of text).
Using the following BRTYPE command, the spaces will be entered and the
characters 'Y' and 'N' will be displayed highlighted, making them a lot more
eye-catching to the end user:

    BRTYPE Do you wish to proceed? _______Reply<Y>or<N>

Here, the spaces have been forced by replacing them with underscore characters,
while the highlighting effect has been achieved by surrounding the text to be
highlighted with '<' and '>' signs.  Unfortunately, this introduced another
problem.  Some of the text I wanted to display contained greater-than and less-
than signs.  This was solved by making the program check for 'doubled up' signs
(just as you can in an Assembler program to get an '&' sign).  Thus to display
the following message:

    ERROR: The result is > 90%

Will require the command:

    BRTYPE <ERROR:> The result is >> 90%

I find that highlighted messages, when used carefully, greatly enhance the look
of an EXEC and encourage end users to read the messages being thrown at them by
the system.


CONCMD

The second utility is called 'CONCMD'.  This was intended to make it easier for
the inexperienced user of a system to enter replies to questions, and is
achieved by placing a default reply on the screen in the input area, where it
can be modified or entered 'as is'.  For example, suppose you ask the question,

    Enter processing date (dd/mm/yy)

You could make the default processing date today's date, by adding the following
lines to a REXX procedure;

    BRTYPE Enter processing date<(dd/mm/yy)>
     CONCMD date(E)
    pull procdate

This will display the 'processing date' prompt and place the default reply
(today's date) on the command line ready to be entered by the user.  The user
may then edit the date, enter it 'as is' or overtype the date with a completely
new reply.

In addition to this, the command may be used to re-display an EXEC command when
parameter errors are detected.  This allows the user to correct the command and
re-enter it.  (The RETRIEVE function does this very well, provided you have it
enabled!)  For example, assume you have an EXEC 2 procedure that expects three
parameters, you could enter:

    &TRACE OFF
    &IF &N EQ 3 &GOTO -GPAR
    CLRSCRN
    BRTYPE Invalid number of parameters, command format is
    BRTYPE
    BRTYPE          instructions
    BRTYPE
    CONCMD &0 &ARGSTRING
    &EXIT 1
    -GPAR

The line 'CONCMD &0 &ARGSTRING' re-displays the command name (&0) and the
parameters that were entered by the user (&ARGSTRING).

The cursor can optionally be positioned within the text to be displayed by
placing an underscore character where you wish to have the cursor substituted.
This can be useful where there are several words in a reply and you wish to have
one altered.  For example, suppose you asked the user to enter a 'start date',
and 'end date', a 'start time' and an 'end time'.  When the reply is read in,
you detect an error in the 'end date' field.  Two actions are possible;

1    Ask for all four fields again or
2    Ask for the 'end date' again.

Asking for just the 'end date' could produce problems (the error may be in one
of the other fields).  Re-entering the fields in full may introduce further
errors.  To solve this (assuming the variables are named as shown), you could
use;

    &EDATE = &CONCAT OF_&EDATE
    CONCMD &SDATE &EDATE &STIME &ETIME

The first line concatenates the underscore to the start of the invalid date, and
the second line places the reply back on the command line.


LOOKUP

The final utility is used during the validation of entered data.  It basically
consists of a 'look-up table'.  The command format is;

    LOOKUP item ( list of items

The program basically works by scanning the list of items (specified after the
bracket) for the search item (specified before the bracket).  It then returns
with the appropriate return code.  Valid return codes are:

 0   Search item was found in the list
 1   Search item was not found in the list
 2   No scan item was specified
 3   The open bracket separator is missing
 4   No scan list has been specified

You should note, however, that the program used a tokenised parameter list, thus
limiting the search item and each list item to eight characters.  This makes the
list much easier to process and should not be a problem.


EXAMPLE

The example EXEC is a trivial demonstration of the use of these utilities.  It
by no means shows the full potential of the programs, but serves to demonstrate
how easily they can be implemented in a simple EXEC.


BRTYPE

         DS    0H
BRTYPE   CSECT
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 GET BASE ADDRESS
         USING BRTYPE,R12              ADDRESS MODULE
         USING NUCON,R0                ADDRESS NUCON ALSO
         LA    R11,SAVEAREA            OUR SAVE AREA
         ST    R11,8(,R13)             SAVE FORWARD POINTER
         ST    R13,4(,R11)             SAVE BACKWARD POINTER
         LR    R13,R11                 PUT ADDRESS IN CORRECT REGISTER
         CLM   R1,B'1000',=X'01'       DO WE HAVE AN EXTENDED PARAMETER
         BNE   NOTEX                   LIST ? - IF NOT, USE TOKENISED
         LR    R2,R0                   SAVE NEW PARM ADDRESS
*
* REGISTER 2 NOW POINTS AT EXEC2/REXX EXTENDED PARAMETER LIST.
* 4(R2) = START OF ARGUMENT LIST, 8(R2) = END OF ARGUMENT LIST
*
         L     R3,8(R2)                LOAD END OF PARAMETER LIST PTR
         L     R2,4(R2)                LOAD START OF PARM LIST PTR
         LTR   R2,R2                   IS THERE A PARAMETER LIST ?
         BZ    NOMPARM                 NO - THEN CONTINUE
         SR    R3,R2                   GET LENGTH OF PARM
         LTR   R3,R3                   IS THERE ANY DATA
         BZ    NOMPARM                 NO - THEN CONTINUE
         BCTR  R3,R0                   DROP BACK 1 FOR MOVE
         C     R3,=H'127'              MAX POSSIBLE LENGTH
         BNH   MOVPARM                 MOVE THE PARAMETER
         LA    R3,127                  SET MAX LENGTH
MOVPARM  EX    R3,MOVEEX               MOVE EXTENDED DATA AND
         LA    R3,1(,R3)               RESTORE PARAMETER LENGTH
         B     NOMPARM                 GO SCAN FOR CURSOR POSITION.
MOVEEX   MVC   DATABUFF(0),0(R2)       EXECUTED MOVE.
*
* WE MUST PROCESS THE TOKENISED PARAMETER LIST. TO MAKE THE END
* COMMAND MORE READABLE, TRAILING SPACES WILL BE REMOVED FROM THE
* END OF EACH TOKEN.
*
NOTEX    LA    R10,8(,R1)              SAVE PARAMETER ADDRESS
         LA    R8,DATABUFF             POINT AT DATA BUFFER
         SR    R3,R3                   COUNTER FOR PARM LENGTH
MOVEPAR  CLI   0(R10),X'FF'            END OF PARAMETER LIST.
         BE    NOMPARM                 NO MORE PARMS
         MVC   0(8,R8),0(R10)          MOVE PARM
         LA    R10,8(,R10)
FINDSPC  LA    R8,1(,R8)               BUMP POINTER
         LA    R3,1(,R3)               COUNT 1 CHARACTER
         CLI   0(R8),C' '              TRAILING BLANK
         BNE   FINDSPC
         LA    R8,1(,R8)               POINT PAST TRAILING SPACE
         LA    R3,1(,R3)               COUNT 1 CHARACTER
         LA    R7,8(,R8)               IS THERE A MIN OF 8 BYTES
          C     R7,=AL4(DATABUFF+128)
         BL    MOVEPAR
NOMPARM  LTR   R3,R3                   ANY PARMS
         BZ    NOTHING                 NO - THEN SKIP NEXT BIT
         LA    R3,DATABUFF(R3)         POINT AT END OF PARMS
         MVI   0(R3),X'FF'             FLAG END OF DATA
         LA    R2,DATABUFF-1           INPUT BUFFER POINTER
         LA    R3,WRITEBFR-1           OUTPUT BUFFER POINTER
SCAN     LA    R2,1(,R2)               NEXT INPUT BYTE
         LA    R3,1(,R3)               NEXT OUTPUT BYTE
         CLI   0(R2),X'FF'             END OF INPUT BUFFER
         BE    ENDSCAN                 YES THEN EXIT, ELSE
         MVC   0(1,R3),0(R2)           MOVE CHARACTER
         CLI   0(R2),C'_'              FORCED SPACE ?
         BE    MOVESPC                 MOVE IN A SPACE
         CLI   0(R2),C'<'              START OF HI-LITE ?
         BE    SETHI                   POSSIBLY
         CLI   0(R2),C'>'              START OF LO-LITE ?
         BE    SETLO                   POSSIBLY
         B     SCAN                    ELSE DO NEXT BYTE
ENDSCAN  TM    FLAG,HION               ARE WE HIGH-LIGHTED ?
         BZ    CBLEN                   NO - THEN CALC MESSAGE LENGTH
         MVC   0(2,R3),LOLITE          MAKE SURE HILITE RESET
         LA    R3,2(,R3)               AND ADD 2 CHARS TO LENGTH
CBLEN    S     R3,=A(WRITEBFR)         CALC BUFFER LENGTH
NOTHING  WRTERM WRITEBFR,(R3),EDIT=LONG   DISPLAY MESSAGE
RETURN   L     13,4(,R13)              RELOAD SAVE AREA POINTER
         RETURN (14,12),RC=0           RELOAD RETURN ADDRESS
MOVESPC  MVI   0(R3),C' '              PLACE IN A SPACE
         B     SCAN                    AND LOOP ROUND
SETHI    LA    R2,1(,R2)               NEXT INPUT BYTE
         CLI   0(R2),C'<'              IS IT A SECOND "<"
         BE    SCAN                    YES - THEN IT'S BEEN MOVED
         OI    FLAG,HION               SHOW HILITE MODE
         MVC   0(2,R3),HILITE          MOVE IN HILITE
         LA    R3,1(,R3)               AND INCREMENT
         BCTR  R2,R0                   THEN PUT INPUT POINTER BACK
         B     SCAN                    AND SCAN NEXT BYTE
SETLO    LA    R2,1(,R2)               NEXT INPUT BYTE
         CLI   0(R2),C'>'              IS IT A SECOND "<"
         BE    SCAN                    YES - THEN IT'S BEEN MOVED
         NI    FLAG,X'FF'-HION         SET TO LO-LITE MODE
         MVC   0(2,R3),LOLITE          MOVE IN HILITE
         LA    R3,1(,R3)               AND INCREMENT
         BCTR  R2,R0                   THEN PUT INPUT POINTER BACK
         B     SCAN                    AND SCAN NEXT BYTE
         EJECT
         LTORG
SAVEAREA DC    18F'0'                  SAVE AREA
FLAG     DC    X'0'
HION     EQU   X'80'                   HIGHLIGHT FLAG
HILITE   DC    X'1DE8'                 START FIELD+HI-LITE
LOLITE   DC    X'1D60'                 START FIELD+LO-LITE
DATABUFF DC    CL130' '                WORK AREA BUFFER
WRITEBFR DC    CL130' '                FINAL DISPLAY BUFFER
         PRINT NOGEN
         NUCON
         REGEQU
         END

CONCMD

         DS    0H
CONCMD   CSECT
         STM   R14,R12,12(R13)         SAVE REGISTERS
         LR    R12,R15                 GET BASE ADDRESS
          USING CONCMD,R12              ADDRESS MODULE
         USING NUCON,R0                ADDRESS NUCON ALSO
         LA    R11,SAVEAREA            OUR SAVE AREA
         ST    R11,8(,R13)             SAVE FORWARD POINTER
         ST    R13,4(,R11)             SAVE BACKWARD POINTER
         LR    R13,R11                 PUT ADDRESS IN CORRECT REGISTER
         CLM   R1,B'1000',=X'01'       DO WE HAVE AN EXTENDED PARAMETER
         BNE   NOTEX                   LIST ? - IF NOT, USE TOKENISED
         LR    R2,R0                   SAVE NEW PARM ADDRESS
*
* REGISTER 2 NOW POINTS AT EXEC2/REXX EXTENDED PARAMETER LIST.
* 4(R2) = START OF ARGUMENT LIST, 8(R2) = END OF ARGUMENT LIST
*
         L     R3,8(R2)                LOAD END OF PARAMETER LIST PTR
         L     R2,4(R2)                LOAD START OF PARM LIST PTR
         LTR   R2,R2                   IS THERE A PARAMETER LIST ?
         BZ    NOMPARM                 NO - THEN CONTINUE
         SR    R3,R2                   GET LENGTH OF PARM
         LTR   R3,R3                   IS THERE ANY DATA
         BZ    NOMPARM                 NO - THEN CONTINUE
         BCTR  R3,R0                   DROP BACK 1 FOR MOVE
         C     R3,=H'129'              MAX POSSIBLE LENGTH
         BNH   MOVPARM                 MOVE THE PARAMETER
         LA    R3,129                  SET MAX LENGTH
MOVPARM  EX    R3,MOVEEX               MOVE EXTENDED DATA AND
         B     NOMPARM                 GO SCAN FOR CURSOR POSITION.
MOVEEX   MVC   DATABUFF(0),0(R2)       EXECUTED MOVE.
*
* WE MUST PROCESS THE TOKENISED PARAMETER LIST. TO MAKE THE END
* COMMAND MORE READABLE, TRAILING SPACES WILL BE REMOVED FROM THE
* END OF EACH TOKEN.
*
NOTEX    LA    R10,8(,R1)              SAVE PARAMETER ADDRESS
         LA    R8,DATABUFF             POINT AT DATA BUFFER
MOVEPAR  CLI   0(R10),X'FF'            END OF PARAMETER LIST.
         BE    NOMPARM                 NO MORE PARMS
         MVC   0(8,R8),0(R10)          MOVE PARM
         LA    R10,8(,R10)
FINDSPC  LA    R8,1(,R8)               BUMP POINTER
         CLI   0(R8),C' '              TRAILING BLANK
         BNE   FINDSPC
         LA    R8,1(,R8)               POINT PAST TRAILING SPACE
         LA    R7,8(,R8)               IS THERE A MIN OF 8 BYTES
         C     R7,=AL4(DATABUFF+130)
         BL    MOVEPAR
NOMPARM  WAITT                         WAIT FOR SCREEN TO SETTLE
         LA    R6,DATABUFF             POINT AT BUFFER
         LA    R7,130                  NUMBER OF CHARS TO SCAN
FINDUS   CLI   0(R6),C'_'              IS THIS AN UNDERSCORE
         BE    GOTUS                   YES - REPLACE IT
         LA    R6,1(,R6)               NEXT BUFFER POSN
         BCT   R7,FINDUS
         B     GETSCR
GOTUS    MVI   0(R6),X'13'
GETSCR   L     R6,ADEVTAB              DEVICE TABLE ADDRESS
         LH    R6,0(R6)                LOAD IN CONSOLE ADDRESS
         STH   R6,SCRADDR              SAVE FOR LATER USE
         DC    X'83670024'             GET DEVICE TYPE
         MVC   LINES(2),=H'24'
         CLM   R8,2,=X'02'             MOD 2
         BE    LINESSET                YES - THEN THERE ARE 24 LINES
         MVC   LINES(2),=H'32'
         CLM   R8,2,=X'03'             MOD 3
         BE    LINESSET                YES - THEN THERE ARE 32 LINES
         MVC   LINES(2),=H'43'
         CLM   R8,2=X'04'              MOD 4
          BE    LINESSET                YES - THEN THERE ARE 43 LINES
UNKNOWN  WRTERM 'UNKNOWN SCREEN TYPE'
         MVC   RETCODE(4),=F'1'
         B     RETURN
LINESSET LA    RE2,DATABUFF+129
         LA    R3,130
FINDNBL  CLI   0(R2),C' '              CALCULATE THE LENGTH OF
         BNE   STORLEN                 THE DATA TO BE DISPLAYED
         BCTR  R2,R0                   ON THE COMMAND LINE
         BCT   R3,FINDNBL
         LA    R3,1                    MUST BE AT LEAST 1
STORLEN  STH   R3,CCWWRITE+6           PUT LENGTH IN WRITE CCW
         LH    R2,LINES                LOAD NUMBER OF LINES ON SCREEN
         BCTR  R2,R0                   DROP BACK TWO LINES TO
         BCTR  R2,R0                   ACTUAL COMMAND LINE POSITION
         STC   R2,CCWWRITE+5           AND SAVE IN CCW
RETRY    SSM   EIGHT0F                 LOOK FOR INT PENDING (POSSIBLE
*                                      IF WE GET ERROR CODE 8E FROM CP
         BAL   R8,SCRIO                WRITE THE SCREEN
         BNZ   RETRY                   IF IT FAILED, TRY AGAIN
         SSM   EIGHT0F                 ELSE RE-ENABLE INTERRUPTS
RETURN   L     R15,RETCODE
         L     13,4(,R13)              RELOAD SAVE AREA POINTER
         L     R14,12(,R13)            RELOAD RETURN ADDRESS
         LM    R0,R12,20(R13)          RELOAD REGISTERS
         BR    R14                     AND RETURN TO CALLER
* GENERAL ROUTINE TO DISPLAY A LINE ON THE SCREEN
SCRIO    SSM   HZERO                   SET NO INTERRUPTION
         LH    R2,SCRADDR              DISPLAY ADDRESS CUU
WAITDISP TIO   0(R2)                   RESET ALL PENDING INT.
         BC    6,WAITDISP              AND LOOP IF SOME MORE
         BC    1,ERROR8                ERROR IF DISPLAY IS NOT OPER.
DIAG     LA    R1,CCWWRITE             POINT R1 TO WRITE CCW
         DIAG  R1,R2,X'0058'           ISSUE DIAGNOSE
         BC    8,TIO1                  OK GO WAIT FOR END OF I/O
         BC    2,DIAG                  BUSY REISSUE DIAGNOSE
         BC    4,CHKCSW                GO LOOK AT CSW
         BC    1,ERROR8                ERROR IF DISPLAY IS NOT OPER.
         SPACE
* WAIT FOR THE END OF THE INPUT/OUTPUT OPERATION AND CHECK CSW
TIO1     TIO   0(R2)                   WAIT FOR THE END OF I/O
         BC    2,TIO1                  BUSY KEEP LOOPING
         BC    1,ERROR8                ERROR IF NOT OPER.
CHKCSW   CLI   CSW+5,X'00'             SOME PROB. WITH THE CHANNEL ?
         BNE   ERROR8                  YES NOTHING WE CAN DO
         CLI   CSW+4,X'0C'             DID WE GET CE+DE ?
         BE    GOTCEDE                 YES WE ARE FINISHED
         CLI   CSW+4,X'08'             DID WE GET CE ONLY ?
         BE    TIO2                    YES GO WAIT FOR DE
         CLI   CSW+4,X'8E'             ERROR CODE '8E' FROM CP ?
         BE    DIAG                    YES - REDRIVE THE I/O
         TM    CSW+4,X'B0'             ATTN OR CTL UNIT END OR BUSY ?
         BNZ   DIAG                    IF YES REISSUE THE DIAG.
         TM    CSW+4,X'0C'             IS IT AT LEAST CE OR DE ?
         BZ    DIAG                    NO REISSUE THE DIAGNOSE
TIO2     TIO   0(R2)                   WAIT FOR DE
         BC    2,TIO2                  BUSY KEEP LOOPING
         BC    1,ERROR8                ERROR IF NOT OPER.
GOTCEDE  SR    R2,R2                   CC=0
         BR    R8                      EXIT
SCRERR8E LTR   R8,R8                   CC NE 0
         BR    R8                      EXIT
ERROR8   MVC   RETCODE(4),=F'8'        SET RCODE = 8
         B     RETURN
         EJECT
         LTORG
 SAVEAREA DC    18F'0'                  SAVE AREA
LINES    DC    H'0'
HZERO    DC    H'0'
EIGHT0F  DC    H'-1'
SCRDEPTH DS    F
RETCODE  DC    F'0'
SCRADDR  DC    H'9'
ICIND    DC    X'0'
         DS    0D
CCWWRITE DC    X'19',AL3(DATABUFF),X'20',X'16',AL2(L'DATABUFF)
         DS    0D
DATABUFF DC    CL130' ',C' '       MAX COMMAND BUFFER
         PRINT NOGEN
         NUCON
         REGEQU
         END


LOOKUP

         DS    0H
LOOKUP   CSECT
         STM   R14,R12,12,(R13)        SAVE REGS IN PROVIDED SAVE AREA
         BALR  R12,R0                  GET BASE ADDRESS
         USING *,R12
         ST    R13,SAVER13             NO USER SAVE AREA REQUIRED
*
* THIS PROGRAM EXPECTS A LOOKUP VALUE AS THE FIRST PARAMETER, A
* LEFT BRACKET AS THE SECOND PARAMETER AND A TABLE OF VALUES
* TO SCAN AS THE THIRD AND SUBSEQUENT PARAMETERS.
*
*==> TEST FOR A "LOOKUP VALUE"
         LA    R2,8(,R1)               POINT AT SCAN VALUE
         LA    R15,2                   PRE-SET RC="NO LOOKUP VALUE"
         CLI   0(R2),X'FF'             END OF PARM LIST
         BE    RETURN                  YES - ERROR = 2
         CLI   0(R2),C'('              IS IT A BRACKET
         BE    RETURN                  YES - ERROR = 2
         LA    R3,16(R1)               POINT AT BRACKET
*==> MAKE SURE NEXT PARM IS SCAN LIST MARKER
         LA    R15,3                   SET RC="INVALID PARM LIST"
         CLI   0(R3),C'('              IS THERE A BRACKET
         BNE   RETURN                  NO - ERROR = 3
         LA    R3,8(,R3)               POINT AT LOOKUP LIST
*==> TEST FOR SCAN LIST
         LA    R15,4                   SET RC="NO SEARCH LIST"
         CLI   0(R3),X'FF'             NO LIST
         BE    RETURN                  NO - ERROR = 4
*==> SCAN LIST FOR WORD TO BE LOCATED
         LA    R15,0                   SET RC="FOUND"
SEARCH   CLC   0(8,R2),0(R3)           IS THIS THE ENTRY
         BE    RETURN                  YES - THEN RETURN
         LA    R3,8(,R3)               POINT AT NEXT TABLE VALUE
         CLI   0(R3),X'FF'             END OF TABLE
         BNE   SEARCH                  NO - CONTINUE SEARCH
         LA    R15,1                   SET RC="NOT FOUND"
RETURN   L     R13,SAVER13             RELOAD SAVE AREA POINTER
         RETURN (14,12),RC=(15)        AND EXIT
SAVER13  DC    F'0'
         REGEQU
         END


Example EXEC procedure

&TRACE OFF
 * EXEC TO STOP A "READ FN FT FM" FROM OVERWRITING AN EXISTING FILE
&IF &N LE 1 &GOTO -READIT
   SET CMSTYPE HT
   STATE &1 &2 &3
   &FILE = &RC
   SET CMSTYPE RT
&IF &FILE NE 0 &GOTO -READIT
* * * * * FILE EXISTS.  DOES THE USER WANT TO KEEP IT ? * * * * *
-EXISTS
BRTYPE File< &1 &2 &3 >exists.  Do you want to keep it or erase it ?
BRTYPE Reply<K>to keep the file or<E>to erase it
CONCMD K
&READ VARS &REPLY
   LOOKUP &REPLY ( K KEEP
      &IF &RC EQ 0 &GOTO -NOREAD
   LOOKUP &REPLY ( E ERA ERASE
      &IF &RC NE 0 &GOTO -EXISTS
   ERASE &1 &2 &3
-READIT
READCARD &1 &2 &3
LISTFILE  &1 &2 &3 ( L
&EXIT &RC
-NOREAD
BRTYPE Read for file< &1 &2 &3 >aborted, as file exists
&EXIT 28

Steve Barnett
Technical Consultant
Hoskyns Group plc (UK)   ) Xephon 1987





































