 Modifying PDS members

GETPDS/PUTPDS are complementary EXECs used to examine/update members of
MVS/OSVS1 partitioned datasets under CMS.  With minor changes it should also
work for DOS source libraries.

Although several internally-written EXECs and a couple of non-standard modules
are referenced within the EXECs, they are not required for operation of the
EXECs, or are easily emulated by other means.  All non-standard references have
been noted and described in the source comments.

The 'GETPDS' EXEC is used to pull PDS members into CMS files on the mini-disk.
Up to six members may be copied in one execution of the EXEC.

'GETPDS' puts a header record in the CMS file so the 'PUTPDS' EXEC can tell
which PDS originally contained the member.  If you won't be putting the member
back into the same place, you will have to update the first record.  If you
won't be using 'PUTPDS' at all, delete the first line altogether.  'GETPDS'
could also easily manage a 'CHECKOUT LIST' of who has which members, to prevent
conflicting updates, though we don't need that here.  The format of the header
record is:

    PDS:  VOLSER DATASET.NAME(MEMBER) | RENAME(OLDNAME)

'PDS:' is the identifier for the record, and must be as shown;  'VOLSER' is the
volume-serial number of the disk containing the PDS to be updated.  It is
optional whether or not the PDS is catalogued.  'DATASET.NAME' is the name of
the PDS;  'MEMBER' is the name the CMS file will have in the PDS:  note that it
will not necessarily be the same as the CMS filename.  'RENAME(OLDNAME)' will
rename the existing member in the PDS to 'OLDNAME' before putting the new member
in.  This parameter is optional.

The header record is built by information in the 'GETPDS CONTROL' file on the
common disk.  If a member needs the rename option, put it in this control file.
If the MEMBER-NAME is not found in the control file it will get the default
handling of no 'RENAME' or 'NOTE' parameters.

The format of the 'GETPDS' command is:

+---------------------------------------------------------------------+
| GETPDS VOLSER DATASET.NAME(MEMBER1  | MEMBER2  | MEMBER3  ...  |)|  |
|                                     |          |               | |  |
+---------------------------------------------------------------------+

where VOLSER is the disk volume containing the PDS;  DATASET.NAME is the DSN of
the PDS, typed with periods or spaces;  MEMBER1-6 are the names of the members
you want to pull.  The ')' at the end is optional.

The 'PUTPDS' EXEC is used to update members of MVS PDSs from CMS files.  The CMS
file will be added (or replaced) to the PDS as a member.  Optionally, an
existing member with the same name will be renamed, to avoid it being
overwritten.

'PUTPDS' uses a header record in the CMS file to determine which PDS will be
updated, and to control the 'RENAME' option.  The header record must be the
first record in the CMS file, and must have one of the formats shown below.  The
'GETPDS' EXEC will set these up automatically, or it can be done manually.
PUTPDS could also easily keep an audit trail of updates, though we don't need
that here.

     PDS:  DATASET.NAME(MEMBER) NOTE(COMMENT)
     PDS:  VOLSER DATASET.NAME(MEMBER) NOTE(COMMENT)
     PDS:  VOLSER DATASET.NAME(MEMBER) RENAME(SAVENAME) NOTE(COMMENT)

'PDS', 'VOLSER', and 'DATASET.NAME' have the same meaning as when used with the
GETPDS EXEC.  'SAVENAME' is the name to be given to an existing member with the
 same name as the one being replaced/added.  This option lets you automatically
keep an extra 'generation' of the PDS member, in case you need to back your
changes out.  Note that if the 'RENAME' option is used, the 'VOLSER' must be
entered.  'COMMENT' is any comment you desire.  It will be displayed by 'PUTPDS'
before the job is submitted.

The format of the 'PUTPDS' command is:

+-------------------------------------------------------------------+
| PUTPDS FILENAME  |FILETYPE|  |FILEMODE|  | (ADD |                 |
|                  |MEMBER  |  |A       |  |      |                 |
+-------------------------------------------------------------------+

where FILENAME is the filename of the CMS file;  FILETYPE is the filetype of the
CMS file, (optional:  defaults to 'MEMBER');  FILEMODE is the filemode of the
CMS file, (optional:  defaults to 'A');  (ADD is the option to use to add a new
member, rather than replace an existing one.  It is meaningless if the RENAME
option is used.


GETPDS EXEC

ARG VOLSER DSN '(' MEM.1 MEM.2 MEM.3 MEM.4 MEM.5 MEM.6 ')';
IF VOLSER = "" | VOLSER = "?" | DSN = "" | MEM.1 = "" THEN DO
/* IF NO PARAMETERS WERE ENTERED, GO GET HELP. */
         HELP UHS GETPDS
         EXIT 8
    END;
DSN = TRANSLATE(STRIP(DSN),'.',' ');
GET VOLUME VOLSER V
/* 'GET' IS AN EXEC WE WROTE HERE TO LINK TO AN MVS DISK READ/ONLY,   */
/*  GIVEN ONLY THE VOLSER. (SEE ANOTHER OF OUR SUBMISSIONS FOR FULL   */
/*  DETAILS.) IF YOU DON'T HAVE AN EXEC LIKE THIS, JUST PUT A LOOKUP  */
/*  TABLE OF VOLSERS/VADDRS HERE. THE REQUESTED VOLSER WILL BE LINKED */
/*  R/O TO YOU AND ACCESSED AS FILEMODE 'V:.                          */
IF RC ¬= O THEN EXIT RC;
MSGOFF         /* TURNS OFF MSGS TO MAKE SCREEN CLEANER...OPTIONAL.   */
DI IDX = 1 TO 6 WHILE MEM.IDX ¬= ""
         STATE MEM.IDX MEMBER A
         IF RC = 0 THEN DO
              SAY 'FILE' MEM.IDX 'MEMBER A EXISTS.  OVERWRITE (Y/N)?'
              PARSE UPPER EXTERNAL YES_NO
              IF YES_NO = 'Y' THEN ERASE MEM.IDX 'MEMBER A (NOTYPE'
                   ELSE DO
                        MSGON
/*   PUTS CMS/CP 'MSG' PARAMETERS BACK TO NORMAL VALUES..OPTIONAL.    */
                        EXIT 12;
                   END;
              END;
         OTHERSTUFF = ''
         'EXECIO * DISKR GETPDS CONTROL * (FIND /'DSN'('MEM.IDX'/ FINIS'
         IF RC = 0 THEN DO
              PARSE UPPER PULL JUNK
              PARSE UPPER PULL JUNK '(' JUNK2 ')' OTHERSTUFF
           END;
         PUSH 'PDS:' VOLSER DSN'('MEM.IDX')' OTHERSTUFF
         'EXECIO 1 DISKW' MEM.IDX 'MEMBER A 1 V (MARGINS 1 72'
         'FILEDEF INMOVE * DSN' DSN '(MEMBER' MEM.IDX
         'FILEDEF OUTMOVE DISK' MEM.IDX 'MEMBER A1 (DISP MOD RECFM V'
MSGON
         MOVEFILE
         IF RC = 0 THEN
              SAY 'GOT' DSN'('MEM.IDX') AS' MEM.IDX 'MEMBER A.'
              ELSE DO
                   SAY 'COULD NOT FIND' DSN'('MEM.IDX') ON' VOLSER'.'
                   ERASE MEM.IDX 'MEMBER A (NOTYPE'
                    END;
    END;
'RELEASE V (DET'
/* THIS RELEASES AND DETACHES VOLUME AT THE SAME TIME. IT'S ON THE   */
/* WATERLOO VM TAPES...OPTIONAL.                                     */
MSGON      /*  SEE PREVIOUS NOTE FOR THIS COMMAND...OPTIONAL  */
EXIT;


GETPDS CONTROL

SYS1.PARMLIB(IEASYSU1) RENAME(IEASYSU0)
SYS1.PARMLIB(COMMNDU1) RENAME(COMMNDU0)
SYS1.PARMLIB(CONFIGU1) RENAME(CONFIGU0)
SYS1.PARMLIB(VATLSTU1) RENAME(VATLSTUO)
SYS1.PARMLIB(LNKLSTU1) RENAME(LNKLSTU0)
UHS.PROCLIB(JES2PARM) RENAME(JESOPARM) NOTE(UPDATES AT IPL)
UHS.VTAMLST(APPU1)    NOTE(DELETE FROM UHS.VTAMOBJ TO UPDATE)
UHS.VTAMLST(ATCCONU1) NOTE(DELETE FROM UHS.VTAMOBJ TO UPDATE)
UHS.VTAMLST(SPECIALS) NOTE(DELETE FROM UHS.VTAMOBJ TO UPDATE)
HSAT.JOBLIB(CICS) RENAME(OLDCICS)


PUTPDS EXEC

ARG FILENAME FILETYPE FILEMODE '(' ADD_FLAG ')';
/* DISPLAY HELP FILE IF NO PARAMETERS ENTERED */
IF FILENAME = "" | FILENAME = "?" THEN DO
         HELP UHS PUTPDS
         EXIT 8
    END;
IF FILETYPE = "" THEN FILETYPE = MEMBER;       /* SET DEFAULTS */
IF FILEMODE = "" THEN FILEMODE = A;
IF ADD_FLAG = 'ADD' THEN ADD_REP = 'ADD'; ELSE ADD_REP = 'REPL';
EXECIO 1 DISKR FILENAME FILETYPE FILEMODE
PARSE UPPER PULL W.1 W.2 W.3 W.4 '(' W.5 ')' 'RENAME(' NEWNAME ')' 1 REST
/* READ THE 'PDS:' HEADER CARD. */
PARSE VAR REST 'NOTE(' NOTE ')';
IF NOTE ¬= "" THEN COMMENT = 1; ELSE COMMENT = 0;
IF W.1 ¬= 'PDS:' THEN DO
         SAY 'SORRY, THAT FILE IS MISSING ITS PDS: HEADER CARD.'
         EXIT 8
    END;
IF POS('.',W.2) = 0 THEN DSN = 3
/* IF THERE IS NO '.' IN THIS PARAMETER, THEN IT IS NOT A VALID   */
/*   DATASETNAME.  SO, IT MUST BE A VOLSER.                       */
    ELSE DSN = 2;
IDX = DSN + 1;
MEMBER = ""
DO WHILE MEMBER = "";
    IF W.IDX ¬="" THEN MEMBER = STRIP(W.IDX,'T')
    IDX = IDX + 1
    END;
IF DSN = 3 THEN COMMA = ','; ELSE COMMA = '';
IF DSN = 2 & NEWNAME ¬= '' THEN DO
/* USE IEHPROGM TO DO THE RENAME, WHICH DOESN'T GO THROUGH THE CATALOG*/
    SAY 'SORRY, THE RENAME PARAMETER REQUIRES THE VOLSER BE ENTERED.'
    EXIT
    END;
LISTFILE FILENAME FILETYPE FILEMODE '(DATE NOH STACK'
PARSE FULL . . . . . . . FILEDATE .
TODAY = STRIP(DATE(U),L,0)
IF FILEDATE ¬= TODAY THEN COMMENT = 1;
IF COMMENT = 1 THEN DO
/* IF FILE HASN'T BEEN UPDATED TODAY, I PUT A WNG MESSAGE OUT. */
    SAY '*------------------N O T I C E S----------------------*'
     IF FILEDATE ¬= TODAY
         THEN SAY '* YOUR CMS FILE WAS LAST CHANGED ON' FILEDATE'.'
    IF NOTE ¬= ""
         THEN SAY '*    ' NOTE
    SAY '*-----------------------------------------------------*'
    END;
JOBNAME = LEFT('PUT'||MEMBER,8);
USERID      /* 'USERID' IS IN IBM 'INTERACTIVE PRODUCTIVITY FACILITY'.*/
            /* AND IS ONLY USED TO PUT VM USERID IN JOB CARD.         */
PULL DUMMY1 USER_ID DUMMY2;
QUEUE '//'||JOBNAME||' JOB ACCT#,'||USER_ID||',MSGCLASS=R,CLASS=E'
      /* JOB CARD WILL HAVE TO BE MODIFIED TO SUIT YOUR INSTALLATION. */
IF NEWNAME ¬= '' THEN DO
    ADD_REP = 'ADD'
    QUEUE '//RENAME    EXEC PGM=IEHPROGM'
    QUEUE '//SYSPRINT  DD  SYSOUT=*'
    QUEUE '//DISK      DD  DISP=SHR,UNIT=SYSDA,VOL=SER='||W.2
    QUEUE '//SYSIN     DD  *'
    QUEUE LEFT('  SCRATCH DSNAME='W.DSN',VOL=SYSDA='W.2',',71)||'X'
    QUEUE '               MEMBER='NEWNAME
    QUEUE LEFT('  RENAME DSNAME='W.DSN',VOL=SYSDA='W.2',',71)||'X'
    QUEUE '               MEMBER='MEMBER',NEWNAME='NEWNAME
    QUEUE '/*'
    END;
QUEUE "//STEP01  EXEC PGM=IEBUPDTE"
QUEUE "//SYSPRINT  DD  SYSOUT=*"
QUEUE '//SYSUT1 DD DISP=SHR,DSN='||W.DSN||COMMA
IF DSN = 3 THEN QUEUE '//   UNIT=SYSDA,VOL=SER='||W.2
QUEUE '//SYSUT2 DD DISP=SHR,DSN='||W.DSN||COMMA
IF DSN = 3 THEN QUEUE '//   UNIT=SYSDA,VOL=SER='||W.2
QUEUE "//SYSIN  DD DATA,DLM='¬¬'"
QUEUE './' ADD_REP 'LIST=ALL,NAME='||MEMBER
EXECIO||' '||'*'||' '||DISKR FILENAME FILETYPE FILEMODE
QUEUE "¬¬"
QUEUE "//"
QUEUE""
CP SPOOL PUNCH MVS
SAY "DO YOU WANT TO SUBMIT THE JOB TO MVS (Y/N)?"
PARSE UPPER EXTERNAL YES_NO
IF YES_NO = 'Y' THEN DO
         'EXECIO *PUNCH'
         CP SPOOL PUNCH CLOSE
         END;
    ELSE DO
        ERASE FILENAME '$JOB$WRK A (NOTYPE'
/* IF USER DOESN'T WANT TO RUN JOB NOW, GO INTO   */
/* XEDIT SO THEY CAN LOOK AT IT                   */
        EXECIO||' '||'*'||' '||DISKW FILENAME '$JOB$WRK A'
         XEDIT FILENAME '$JOB$WRK A'
         END;
EXIT;


Keith Burton
Lead Systems Programmer
University of Kentucky Medical Center (USA)
     ) University of Kentucky Medical Center 1987









