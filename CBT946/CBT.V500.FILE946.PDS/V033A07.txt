Error module

SPIERR is designed to be called from the ERROR routine in a
REXX EXEC using the SIGNAL ON ERROR facility.  Upon
being called it retrieves the values for variables SOURCE, SIGL
and RC and displays this information in formatted message lines.
In addition, options are available to halt the interpreter and/or
generate a CMS file listing all variables, and their respective
values, that were active at the time of the error.

Although written in a VM/SP4 HPO environment it should work
on any release of VM/CMS that supports the system product
interpreter.


The command format is:
    SPIERR Ý HALT TRACE ¨

The following messages will always be displayed:
    DMSSPX001F  ERROR HAS OCCURRED IN LINE nnnn OF  fn ft fm
    DMSSPX002I  LAST NON-ZERO RETURN CODE = nnnn

In addition, the following message will be displayed when
TRACE is specified:
    DMSSPX003I  TRACE FILE 'SPIERR VARS A' HAS BEEN CREATED


NOTES

Any existing SPIERR VARS file will be deleted.  The format of
the file is:
cc 1 flag will be set to '*' if either varname or varvalue
is too long for the VARS file.
cc 3-22 varname variable name  (max 20 bytes).
cc 28-72 varvalue variable value (max 45 bytes).
The following message will be displayed when HALT is
specified:
    DMSSPX004I  HALT INTERPRETER HAS BEEN ISSUED


SPIERR   ASSEMBLE

*                 S P I E R R
*  THIS MODULE IS DESIGNED TO BE CALLED FROM A REXX EXEC USING THE
*  SIGNAL ON ERROR FUNCTION. IT RETRIEVES THE 'SOURCE', 'SIGL' AND 'RC'
*  VARIABLES AND DISPLAYS THIS INFORMATION. IN ADDITION THE INTERPRETER
*  MAY BE HALTED AND/OR A FILE CREATED LISTING ALL REXX VARIABLES THAT
*  WERE ACTIVE WHEN THE ERROR OCCURRED.
*  THE COMMAND FORMAT IS ....
*      SPIERR ( HALT TRACE )
*  HALT WILL CAUSE THE INTERPRETER TO BE HALTED WITH MESSAGE DMSSPX004I
*  WHILE TRACE WILL DISPLAY MESSAGE DMSSPX003I AND CREATE A FILE CALLED
*  SPIERR VARS A CONTAINING A LIST OF ALL ACTIVE VARIABLES AND THEIR
*  RESPECTIVE VALUES.
*  THIS MODULE IS LOADED INTO THE USER AREA AT LOCATION X'20000'
SPIERR  START
        USING *,R12
        USING SHVBLOCK,R13             ADDRESSABILITY FOR DSECT
        ST    R14,SAVRET               SAVE RETURN ADDRESS
        LA    R13,SHVBLK1              LOCATE FIRST SHVBLOVK IN CHAIN
        SPACE 2
*  SEARCH ARGUMENTS FOR VALID OPTIONS AND CALL RELATED SECTION
        LA    R2,0(,R1)                LOCATE PLIST
NEXTARG LA    R2,8(,R2)                LOCATE NEXT ARGUMENT
        LA    R3,OPTIONS               LOCATE VALIDATION TABLE
        CLI   0(R2),X'FF'              END OF ARGUMENTS?
        BE    ENDARGS
NEXTOPT CLI   0(R3),X'FF'              END OF TABLE?
        BE    NEXTARG                  BRANCH FOR NEXT ARG
        CLC   0(8,R3),0(R2)            COMPARE
        BNE   NOMATCH
        L     R4,8(R3)                 LOAD BRANCH ADDRESS
        BALR  R6,R4                    BRANCH TO ROUTINE
NOMATCH LA    R3,12(R3)                LOCATE NEXT TABLE ENTRY
        B     NEXTOPT
ENDARGS EQU   *
        SPACE 2
*  FIRST SHVBLOCK CALLS
        LA    R0,EPLIST1
        LA    R1,PLIST
        ICM   R1,B'1000',=X'02'        INDICATE SUBCOMMAND CALL
        SVC   202                      NOW MAKE THE CALL
        DC    AL4(1)                   IGNORE ERRORS
        LTR   R15,R15                  CHECK FOR INVALID CALL
        BM    RET                      EXIT IF SO
        SPACE 2
*  EXTRACT INFORMATION FROM 'SOURCE' VARIABLE
        LA    R2,VBUFF1                LOCATE RETURNED VALUE
        LA    R3,2                     STOP AT SECOND SPACE
LOOP1   LA    R2,1(R2)                 INCREMENT SOURCE POINTER
        CLI   0(R2),C' '               IS IT A SPACE?
        BNE   LOOP1                    IF NOT GO GET NEXT BYTE
        BCT   R3,LOOP1                 IF SO, IS IT THE SPACE WE WANT?
        SPACE 2
*  R2 NOW POINTS TO SPACE AHEAD OF THIRD WORD, NOW EXTRACT FN/FT/FM
        LA    R3,3                     STOP AT THIRD SPACE
        LA    R4,FNAME                 FNAME WORK STORAGE
LOOP2   LA    R2,1(R2)                 INCREMENT SOURCE POINTER
        MVC   0(1,R4),0(R2)            MOVE BYTE FROM SOURCE TO TARGET
        LA    R4,1(R4)                 POINT TO NEXT TARGET LOCATION
        CLI   0(R2),C' '               IS IT A SPACE?
        BNE   LOOP2                    SKIP MOVE IF SO
        BCT   R3,LOOP2                 IS IT THE LAST WORD?
        SPACE 2
*  NOW BUILD MESSAGE LINES USING FN/FT/FM, SIGL AND RC
        LA    R3,MESS1A                LOCATE SIGL MESSAGE AREA
        L     R2,RETLEN2               GET LENGTH OF SIGL VARIABLE
        SH    R2,=H'1'                 DECREMENT FOR MVC LENGTH
        EX    R2,MVC1                  EXECUTE MVC
        A     R3,RETLEN2               INCREMENT MESSAGE LINE POINTER
        MVC   0(4,R3),=C' OF '         ADD LITERAL
        AH    R3,=H'4'                 SKIP OVER LITERAL
        MVC   0(20,R3),FNAME           MOVE THE FN/FT/FM DETAILS
        MVC   MESS2A,VBUFF3            MOVE RC VALUE
        SPACE 2
*  NOW DISPLAY THE ERROR MESSAGES
        WRTERM SPACE,1                 WRITE A BLANK LINE
        LA    R2,MESS1L
        WRTERM MESS1,(R2)
        LA    R2,MESS2L
        WRTERM MESS2,(R2)
        SPACE 2
*  CHECK OPTION FLAGS
        CLI   TFLAG,C'Y'               HAS TRACE BEEN REQUESTED?
        BNE   NOTRACE                  SKIP NEXT SECTION IF NOT
        BAL   R6,TRACE
NOTRACE CLI   HFLAG,C'Y'               HALT REQUESTED?
        BNE   RET                      RETURN TO CALLER
        BAL   R6,HALT
        B     RET                      RETURN TO CALLER
        SPACE 2
*  WRITE TRACE FILE (SPIERR VARS A)
TRACE   EQU   *
        FSERASE 'SPIERR VARS A'        ENSURE NO OLD FILE
        LA    R13,SHVBLK4              LOCATE SHVBLCK FOR FETCH NEXT
        LA    R0,EPLIST2               SET UP PLIST AND EPLIST
        LA    R1,PLIST
        ICM   R1,B'1000',=X'02'        INDICATE SUBCOMMAND CALL
LOOP4   EQU   *
        SVC   202                      FETCH NEXT VARIABLE
        DC    AL4(1)                   IGNORE ERRORS
        LTR   R15,R15                  CHECK FOR SUCCESSFULL CALL
        BM    RET
        CLI   SHVRET,SHVLVAR           LAST VARIABLE?
        BE    NOMORE
        CLI   SHVRET,SHVTRUNC          TRUNCATED?
        BH    RET                      ERROR IF GREATER THAN X'04'
        BL    NOTRUNC                  ELSE TRUNCATED
        MVI   TRUNC,C'*'               SO FLAG IT
NOTRUNC ST    R1,REGSAV1               SAVE PLIST POINTER
        FSWRITE 'SPIERR VARS A',BUFFER=FSWBUFF,BSIZE=72
        L     R1,REGSAV1               RESTORE PLIST POINTER
        MVI   TRUNC,C' '               CLEAR TRUNCATION FLAG
        MVI   VARNAME,C' '             CLEAR DOWN VARIABLE NAME BUFF
        MVC   VARNAME+1(VARNAMEL-1),VARNAME
        MVI   VARVAL,C' '              CLEAR DOWN VARIABLE VALUE BUFF
        MVC   VARVAL+1(VARVALL-1),VARVAL
        B     LOOP4                    GO FOR NEXT VARIABLE
NOMORE  LA    R2,MESS3L                DISPLAY MESSAGE
        WRTERM MESS3,(R2)
        BR    R6                       RETURN
        SPACE 2
*  SET HALT INTERPRETER FLAG IN NUCON
HALT    EQU   *
        USING      NUCON,R0
        DMSEXS     OI,EXECFLAG,EXECMASK+EXECHALT
        LA    R2,MESS4L
        WRTERM MESS4,(R2)
        BR         R6
        SPACE 2
*  RETURN TO CALLER
RET     EQU   *
        WRTERM SPACE,1                 WRITE A BLANK LINE
        L     R14,SAVRET               RESTORE RETURN ADDRESS
        BR    R14                      RETURN TO CALLER
        SPACE 2
*  OPTION SUB-ROUTINES
SHALT   MVI   HFLAG,C'Y'               SET HALT FLAT
        BR    R6
STRACE  MVI   TFLAG,C'Y'               SET TRACE FLAG
        BR    R6
        SPACE 2
*  EXECUTED INSTRUCTIONS
MVC1    MVC   MESS1A,VBUFF2            MOVE SIGL VALUE TO MESSAGE
        SPACE 2
*  EQUATES AND WORKING STORAGE
        DS    0F
SAVRET  DS    F                        RETURN ADDRESS
REGSAV1 DS    F                        SAVE FOR R1 DURING FSWRITE
SPACE   DC    C' '
FNAME   DS    CL20                     STORE FOR FN/FT/FM
HFLAG   DS    C'N'
TFLAG   DS    C'N'
OPTIONS DS    0F                       OPTIONS TABLE
        DC    CL8'HALT',AL4(SHALT)
        DC    CL8'TRACT',AL4(STRACE)
        DC    8X'FF'                   TABLE DELIMITER
        SPACE 2
*  MESSAGE LINES
MESS1   DC    C'DMSSPX001F  ERROR HAS OCCURED IN LINE '
MESS1A  DS    CL40                     SIGL AND FN/FT/FM PLACED HERE
MESS1L  EQU   *-MESS1
        SPACE 1
MESS2   DC    C'DMSSPX002I  LAST NON-ZERO RETURN CODE = '
MESS2A  DS    CL10                     RC VALUE PLACED HERE
MESS2L  EQU   *-MESS2
        SPACE 1
MESS3   DC    C'DMSSPX003I  TRACE FILE ''SPIERR VARS A'' '
        DC    C'HAS BEEN CREATED'
MESS3L  EQU   *-MESS3
        SPACE 1
MESS4   DC    C'DMSSPX004I  HALT INTERPRETER HAS BEEN ISSUED'
MESS4L  EQU   *-MESS4
        SPACE 2
*  BUFFERS FOR VARIABLE NAMES/VALUES
VNAME1  DC    C'SOURCE'
VNAME1L EQU   *-VNAME1
VBUFF1  DS    CL50
VBUFF1L EQU   *-VBUFF1
        SPACE 1
VNAME2  DC    C'SIGL'
VNAME2L EQU   *-VNAME2
VBUFF2  DS    CL10
VBUFF2L EQU   *-VBUFF2
        SPACE 1
VNAME3  DC    C'RC'
VNAME3L EQU   *-VNAME3
VBUFF3  DS    CL10
VBUFF3L EQU   *-VBUFF3
        SPACE 1
FSWBUFF DS    0CL72
TRUNC   DC    2C' '
VARNAME DC    20C' '
VARNAME EQU   *-VARNAME
        DC    5C' '
VARVAL  DC    45C' '
VARVALL EQU   *-VARVAL
        SPACE 2
*  SHVBLOCKS  BLK1-BLK3 ARE CHAINED (SOURCE,SIGL & RC)
        DS    0D
SHVBLK1 DS    0CL32
        DC    AL4(SHVBLK2)             NEXT IN CHAIN
        DC    AL4(0)                   NOT USED
        DC    C'P'                     FUNCTION CODE (FETCH PRIVATE)
        DS    XL1                      RETURN CODE
        DC    H'0'                     NOT USED, MUST BE ZEROS
        DC    AL4(VBUFF1L)
        DC    AL4(VNAME1)              VARIABLE 'SOURCE'
        DC    AL4(VNAME1L)
        DC    AL4(VBUFF1)
        DS    AL4(0)                   LENGTH OF VALUE BUFFER
        SPACE 1
SHVBLK2 DS    0CL32
        DC    AL4(SHVBLK3)             NEXT IN CHAIN
        DC    AL4(0)                   NOT USED
        DC    C'F'                     FUNCTION CODE (FETCH)
        DS    XL1                      RETURN CODE
        DC    H'0'                     NOT USED, MUST BE ZEROS
        DC    AL4(VBUFF2L)
        DC    AL4(VNAME2)              VARIABLE 'SIGL'
        DC    AL4(VNAME2L)
        DC    AL4(VBUFF2)
RETLEN2 DS    AL4(0)                   LENGTH OF VALUE BUFFER
        SPACE 1
SHVBLK3 DS    0CL32
        DC    AL4(0)                   LAST IN CHAIN
        DC    AL4(0)                   NOT USED
        DC    C'F'                     FUNCTION CODE (FETCH)
        DS    XL1                      RETURN CODE
        DC    H'0'                     NOT USED, MUST BE ZEROS
        DC    AL4(VBUFF3L)
        DC    AL4(VNAME3)              VARIABLE 'RC'
        DC    AL4(VNAME3L)
        DC    AL4(VBUFF3)
        DS    AL4(0)                   LENGTH OF VALUE BUFFER
        SPACE 1
SHVBLK4 DS    0CL32
        DC    AL4(0)                   LAST IN CHAIN
        DC    AL4(VARNAMEL)            LENGTH OF VAR NAME BUFFER
        DC    C'N'                     FUNCTION CODE (FETCH NEXT)
        DS    XL1                      RETURN CODE
        DC    H'0'                     NOT USED, MUST BE ZEROS
        DC    AL4(VARVALL)
        DC    AL4(VARNAME)
        DC    AL4(0)
        DC    AL4(VARVAL)
        DS    AL4(0)                   LENGTH OF VALUE BUFFER
        SPACE 2
*  PLISTS AND EPLISTS
PLIST   DC    C'EXECCOMM'
EPLIST1 DC    AL4(PLIST),AL4(0),AL4(0),AL4(SHVBLK1)
EPLIST2 DC    AL4(PLIST),AL4(0),AL4(0),AL4(SHVBLK4)
        SPACE 2
*  COPIED DSECTS/EQUATES
        SHVBLOCK
        NUCON
        REGEQU
        END


Clive Whitehead
Systems Engineer
Synapse Computer Services ) Synapse 1989

