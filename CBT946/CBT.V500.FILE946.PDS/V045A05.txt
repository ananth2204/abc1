Using a nucleus extension to convert user names

We do not use users' names for VM sign-ons, so we needed a
way to convert virtual machine names to users' nicknames for
inclusion on // JOB cards, etc.  The routine that does this
is called by many of our EXECs, so I decided to make it a
CMS nucleus extension.

The advantage of a nucleus extension is that it is loaded only
once - the first time it is called.  All calls thereafter are
satisfied by the copy of the routine that is loaded in storage.
This eliminates many I/Os during the course of the user
session.

Nucleus extensions must be re-entrant.  It is also the
programmer's responsibility to load the routine into free storage
and establish addressability through CMS.  This is most easily
done by separating the program into two parts: the first for the
initial call to the routine and the second for all subsequent
calls.  The second part of the program is the portion that is
loaded into free storage, and that which will be called as a
nucleus extension.

This particular program accepts a virtual machine name as a
parameter and then searches a table, looking for a match on
this name.  If a match is found, it stacks user information and
returns to the caller.  The information stacked is virtual
machine name, nickname, and user class.

This program was written for CMS Release 4.

TRANUSER CSECT
         LR    R12,R15                 load base
         USING TRANUSER,R12            tell assembler
         LR    R7,R1                   load parm base and
         USING PARMLIST,R7             tell assembler
* check to see if we are already loaded as a nucleus extension
         USING SCBLOCK,R2              tell assembler
         B     BEGIN
         DC    C'TRANUSER'             so we can find us
BEGIN    DS    0H
         LA    R1,NUCXQRY              NUCEXT query
         SVC   202                     go check it
         DC    AL4(*+4)
         LTR   R15,R15                 are we already a nuc ext ?
         BNZ   DOIT1                   no - do first time thru stuff
         L     R2,ASCBLK               yes - point to scblok
         L     R15,SCBPSW+D4           load entry point to R15
         CR    R15,R12                 is it us ?
         BE    DOIT1                   yes - it is first time thru
         LPSW  SCBPSW                  no - go execute extension code
         DROP  R2                      we don't need you anymore
* parse out the parameters and scan the table
DOIT1    DS    0H
         CLI   PUSER,X'FF'             no parms ?
         BNE   SCANIT                  no
         LA    R9,97                   set return code
         MVC   DATALINE(DATALINL),=CL80'No parameter supplied.'
         MVI   SHOWBIT,X'01'           type error message
         B     DISPMSG                 yes
SCANIT   DS    0H
         MVI   SHOWBIT,X'00'           default - stack it
         LA    R9,0                    set default return code
         LA    R8,USERTAB              load table start address
SCANIT1  DS    0H
         CLI   0(R8),X'FF'             end of table ?
         BE    NOTFND                  yes - not found
         CLC   0(8,R8),PUSER           is this who we want ?
         BE    DISPMSG                 yes - get ready for msg
         LA    R8,12(,R8)              point to the next entry
         B     SCANIT1                 and go check it
NOTFND   DS    0H
         LA    R9,98                   set return code
         MVC   DATALINE(8),PUSER       and
         MVI   DATALINE+8,C' '           build a
         MVC   DATALINE+9(71),=CL71'not found.'    message
         MVI   SHOWBIT,X'01'           type error message
* NUCXLOAD
DISPMSG  DS    0H
         LA    R0,NEXTLEN+D7           get length to NUCXLOAD
         SRL   R0,D3                   make it doublewords for DMSFREE
         DMSFREE DWORDS=(0),AREA=HIGH,ERR=DISPMSG1,MSG=NO
         ST    R1,NUCXADR              save PSW address
         ST    R1,NUCXORG              origin
         SLL   R0,D3                   and the
         ST    R0,NUCXLGT              length in bytes
         LM    R2,R3,NUCXORG           load address and length
         LA    R4,NEXTLOAD             point to code we need to move
         LR    R5,R3                   same length (obviously)
         MVCL  R2,R4                   move code to free storage
         LA    R1,NUCX                 point to PLIST
         SVC   202                     set nucleus extension
         DC    AL4(*+4)
         LTR   R15,R15                 load OK ?
         BZ    DISPMSG1                yes - continue
         L     R1,NUCXORG              no - free
         L     R0,NUCXLGT                the storage
         SRL   R0,D3                     and just
         DMSFRET DWORDS=(0),LOC=(1)      continue on...
* type or stack the output
DISPMSG1 DS    0H
         LTR   R9,R9                   is message already set ?
         BNZ   DISPMSG2                yes - don't build it
         LA    R7,USERTAB              load pointer
         A     R7,8(,R8)               add offset
         MVC   DATALINE(25),0(R7)      set line
DISPMSG2 DS    0H
         LA    R1,ATTN                 default is stack LIFO
         CLI   SHOWBIT,X'00'           stack it ?
         BE    STACKIT                 YES
         LA    R1,TYPLIN               type error message
STACKIT  DS    0H
         SVC   202
* EXIT
         LR    R15,R9                  set zero return code
EXIT     DS    0H
         BR    R14                     goback
         EJECT
* CONSTANTS
NUCXQRY  DS    0D
         DC    CL8'NUCEXT'             NUCXLOAD
         DC    CL8'TRANUSER'           TRANUSER
ASCBLK   DC    8X'FF'                  QUERY FORM PLIST
NUCX     DS    0D
         DC    CL8'NUCEXT'             NUCXLOAD
         DC    CL8'TRANUSER'           TRANUSER
         DC    X'FF040000'             PSW
NUCXADR  DC    A(0)                    STARTING ADDRESS
         DC    A(0)                    NOT USED
NUCXORG  DC    A(0)                    ORIGIN
NUCXLGT  DC    A(0)                    LENGTH
         EJECT
* NUCXLOADED SECTION
NEXTLOAD DS    0D
         LR    R12,R15                 load base
         USING NEXTLOAD,R12            tell assembler
         LR    R7,R1
         USING PARMLIST,R7             TELL ASSEMBLER ABOUT PARM BASE
* parse out the parameters and scan the table
DOIT1F   DS    0H
         MVI   DATALINE,C' '
         MVC   DATALINE+1(L'DATALINE-1),DATALINE
         CLI   PUSER,X'FF'             no parms ?
         BNE   SCANITF                 no
         LA    R9,97                   set return code
         MVC   DATALINE(DATALINL),=CL80'No parameter supplied.'
         MVI   SHOWBIT,X'01'           type error message
         B     STTY                    yes
SCANITF  DS    0H
         MVI   SHOWBIT,X'00'           default - stack it
         LA    R9,0                    set default return code
         LA    R8,USERTAB              load table start address
SCANIT1F DS    0H
         CLI   0(R8),X'FF'             end of table ?
         BE    NOTFNDF                 yes - not found
         CLC   0(8,R8),PUSER           is this who we want ?
         BE    STTY                    yes - get ready for msg
         LA    R8,12(,R8)              point to the next entry
         B     SCANIT1F                and go check it
NOTFNDF  DS    0H
         LA    R9,98                   set return code
         MVC   DATALINE(8),PUSER       and
         MVI   DATALINE+8,C' '           build a
         MVC   DATALINE+9(71),=CL71'not found.' ...message
         MVI   SHOWBIT,X'01'           type error message
* TYPE OR STACK THE OUTPUT
STTY     DS    0H
         LTR   R9,R9                   is message already set ?
         BNZ   STTY2                   yes - don't build it
         LA    R7,USERTAB              load pointer
         A     R7,8(,R8)               add offset
         MVC   DATALINE(25),0(R7)      set line
STTY2    DS    0H
         CLI   SHOWBIT,X'00'           stack it ?
         BE    STTY3                   yes
         LA    R1,TYPLIN               type error message
         LA    R2,DATALINE             buffer address
         ST    R2,TYPLINAD             set in PLIST
         B     STACKITF
STTY3    DS    0H
         LA    R1,ATTN                 default is stack LIFO
         LA    R2,DATALINE             buffer address
         STCM  R2,M7,ATTNAD            set in PLIST
STACKITF DS    0H
         SVC   202
* EXIT
         LR    R15,R9                  set zero retutn code
EXITF    DS    0H
         BR    R14                     goback
         EJECT
* ERROR MESSAGE
* INVALID OPTION
* CONSTANTS  -  USED BY IDENTIFY AND NEXTLOAD
SHOWBIT  DS    XL1
         DS    0D
ATTN     DS    0F
         DC    CL8'ATTN'
HOWSTACK DC    CL4'LIFO'
ATTNLN   DC    AL1(DATALINL)
ATTNAD   DC    AL3(DATALINE)
TYPLIN   DS    0F
         DC    CL8'TYPLIN'
TYPLINAD DC    A(DATALINE)
         DC    C'B',X'00'
TYPLINLN DC    AL2(DATALINL)
         SPACE 1
DATALINE EQU   *
         DC    CL80' '
DATALINL EQU   *-DATALINE     LENGTH OF DATA LINE
USERTAB  EQU   *
         DC    CL8'120190',AL4(DONA-USERTAB)
         DC    CL8'DONNA',AL4(DONA-USERTAB)
         DC    CL8'DONA',AL4(DONA-USERTAB)
         DC    CL8'220390',AL4(JIMMY-USERTAB)
         DC    CL8'JIMMY',AL4(JIMMY-USERTAB)
         DC    CL8'JIMM',AL4(JIMMY-USERTAB)
         DC    CL8'JIM',AL4(JIMMY-USERTAB)
         DC    CL8'239013',AL4(COMMON-USERTAB)
         DC    CL8'2390',AL4(COMMON-USERTAB)
         DC    CL8'TEST',AL4(TEST-USERTAB)
         DC    12XL1'FF'
DONA     DC    C'120190   DONA TECHSUPPORT'
JIMMY    DC    C'220390   JIMM TECHSUPPORT'
COMMON   DC    C'239013   COMM TECHSUPPORT'
TEST     DC    C'TEST     TEST TECHSUPPORT'
* LENGTH EQUATE
L4       EQU   4
L6       EQU   6
L8       EQU   8
L10      EQU   10
M7       EQU   B'0111'
D1       EQU   1
D3       EQU   3
D4       EQU   4
D7       EQU   7
D8       EQU   8
D16      EQU   16
D24      EQU   24
D32      EQU   32
D100     EQU   100
XFF      EQU   X'FF'
         LTORG
NEXTLEN  EQU   *-NEXTLOAD     LENGTH OF NUCEXT LOADED SECTION
PARMLIST DSECT
PCMD     DS    CL8
PUSER    DS    CL8
PEND     DS    XL1'FF'
         NUCON
         SCBLOCK
         REGEQU
         END


Michael Kilroy
Systems Programming Supervisor
Progress (USA)                                   ) Xephon 1990


