 FULLDISK system

This system was designed so that a link could be made to any on-line disk pack
and VM utilities could easily be used against them.


EXECS

%    DIRECT EXEC A1
%    VM DIRECT A1
%    GET EXEC A1
%    GET HELPUHS A1
%    FREE DISK A1
%    HARDWARE HELPUHS A1
%    FULLDISK EXEC A1

Most of these files are stored on our EXECs disk, the only exceptions being VM
DIRECT A1 and DIRECT EXEC A1, which are kept on MAINT.  This scheme allows our
users to link and look at disk information without being interrupted by the
systems staff moving volumes around.


DESCRIPTION OF FILES

%    DIRECT EXEC A1.  This EXEC front-ends the module that updates the
directory.  It creates links to all of the disks displayed in the hardware
HELPUHS A1 and the vol-ids listed in FREE DISK A1.  This is done by creating a
user-id called FULLDISK, which has MW access to all the disk packs.  The actual
directory update is done by a temporary file created by this EXEC, with the
links inserted under the FULLDISK user-id statement.

%    VM DIRECT A1.  This is our VM directory source;  it contains the user-id
statement for FULLDISK, and all of the macros for our other user-ids.

%    GET EXEC A1.  This EXEC simplifies the links to user-ids and to disk
volumes.  It gets information on disk volumes from hardware HELPUHS A1.

%    GET HELPUHS A1.  This is the help file on the use of GET EXEC A1.

%    FREE DISK A1.  This file contains a list of all of the possible vol-ids
with which an unused volume would be labelled.

%    HARDWARE HELPUHS A1.  This file contains a layout of our disks and other
hardware.  It contains the vol-id, real address, and the FULLDISK number.  The
FULLDISK number is the address used to link the disk pack to the user-id.  (It
is not included in this article.)

%    FULLDISK EXEC A1.  This EXEC will tell you what the FULLDISK number is by
searching HARDWARE HELPUHS and FREE DISK.


DIRECT EXEC

/* DIRVM */
ARG FILENAME FILETYPE FILEMODE
IF FILENAME = ' ' THEN DO
   SAY 'THERE WAS NO FILENAME GIVEN.'
   EXIT
END
IF FILETYPE = ' ' THEN  FILETYPE = 'DIRECT'
IF FILEMODE = ' ' THEN  FILEMODE = 'A'
X = 0
MSGOFF
NEW W
PASSWORD = 'MW ALL FULLWRIT FULLMULT'
DO FOREVER
    CALL GET_THE_BORDER
   CALL READ_IN_THE_LAYOUT
END
EXIT
/* SUBROUTINES */
GET_THE_BORDER:
'EXECIO * DISKR HARDWARE HELPUHS W ( LOCATE /&/'
IF RC = 0 THEN DO
   PULL JUNK1
   PULL JUNK2
END
POSITION_OF_END_CHARACTER = INDEX(JUNK2,'@')
IF POSITION_OF_END_CHARACTER = 0 THEN DO
   END_POINT = X
   'EXECIO 1 DISKR HARDWARE HELPUHS W (FINIS'
   DROPBUF
   CALL SORT_IT
   CALL FREE_DISK
   CALL CREATE_DIRECTORY_FILE
   CALL UPDATE_DIRECTORY
   EXIT
END
RETURN
READ_IN_THE_LAYOUT:
CALL READ_IT
CALL MOVE_TO_TABLE
RETURN
READ_IT:
DISK_TYPE = SUBSTR(JUNK2,2,4)
EXECIO 1 DISKR HARDWARE HELPUHS W
PULL U1 U2 U3 U4 U5 U6 U7 U8 U9 U10 U11 U12 U13 U14 U15 U16 U17
EXECIO 1 DISKR HARDWARE HELPUHS W
PULL V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12 V13 V14 V15 V16 V17
EXECIO 1 DISKR HARDWARE HELPUHS W
PULL JUNK
EXECIO 1 DISKR HARDWARE HELPUHS W
PULL Z1 Z2 Z3 Z4 Z5 Z6 Z7 Z8 Z9 Z10 Z11 Z12 Z13 Z14 Z15 Z16 Z17
RETURN
MOVE_TO_TABLE:
NUMBER = 0
DO UNTIL NUMBER = 16
   X = X + 1
   NUMBER = NUMBER + 2
   LINE1 = U||NUMBER
   LINE2 = V||NUMBER
   LINE3 = Z||NUMBER
   DISK.X = LINE1
   DISK.X.X = LINE2
   DISK.X.X.X = LINE3
   INTERPRET QUEUE LINE1
   PULL LINE1
   BADDSK = SUBSTR(LINE1,1,3)
   SELECT
        WHEN BADDSK = DSK THEN NOP
        WHEN BADDSK = BAD THEN NOP
        OTHERWISE
          IF DISK_TYPE = 3380 THEN DO
          INTERPRET QUEUE MDISK DISK.X.X.X 3380 000 886 DISK.X PASSWORD
             'EXECIO 1 DISKW GARY TEMP A'
          END
          ELSE DO
          INTERPRET QUEUE MDISK DISK.X.X.X 3350 000 560 DISK.X PASSWORD
               'EXECIO 1 DISKW GARY TEMP A'
          END
   END
END
 RETURN
FREE_DISK:
QUEUE BOTTOM
QUEUE GET FREE DISK W
QUEUE FILE
XEDIT GARY TEMP A
RETURN
SORT_IT:
QUEUE TOP
QUEUE 'SORT * A 7 9'
QUEUE 'RECFM F'
QUEUE FILE
XEDIT GARY TEMP A
RETURN
CREATE_DIRECTORY_FILE:
QUEUE '/USER FULLDISK'
QUEUE 'GET GARY TEMP A'
QUEUE 'RECFM F'
QUEUE 'FN NEWVM'
QUEUE FILE
XEDIT FILENAME FILETYPE FILEMODE
RETURN
UPDATE_DIRECTORY:
MSGON
DROPBUF
    DIRECT NEWVM DIRECT A
IF RC = 0 THEN EXIT RC
IF RC = 0 THEN DO
   ERASE NEWVM DIRECT A
   ERASE GARY  TEMP   A
END
RETURN


VM DIRECT

DIRECTORY 341 3350 VMR1A
**********************************************************************
*  3350    SYSTEM IPO/E DIRECTORY                                    *
*          SYSTEM RESERVED AREAS NOT FOR MINI-DISKS                  *
**********************************************************************
*
USER $ALLOC$ NOLOG
 MDISK A01 3350 000 001 CMS001 R
 MDISK B01 3350 000 001 CMS002 R
 MDISK C01 3350 000 001 CMS003 R
 MDISK D01 3350 000 001 VMR1A  R
 MDISK E01 3350 000 001 VMR2A  R
 MDISK F01 3350 000 001 VMD1A  R
 MDISK AA1 3350 000 001 VMS01  R
*
USER $NOTUSED NOLOG
 MDISK A13 3350 001 099 CMS003 R
*
USER $SPOOL$  NOLOG
 MDISK A02 3350 234 043 VMR1A  R
 MDISK B02 3350 278 090 VMR1A  R
 MDISK C02 3350 227 217 VMR2A  R
*
USER $DUMP$  NOLOG
 MDISK A03 3350 480 035 CMS001 R
*
USER $SWAP$  NOLOG
 MDISK A04 3350 405 025 CMS001 R
 MDISK B04 3350 000 555 VMS01  R
*
 USER $PAGE$  NOLOG
 MDISK A05 3350 430 050 CMS001 R
*
USER $T-DISK$ NOLOG
 MDISK A06 3350 515 040 CMS001 R
 MDISK B06 3350 368 050 VMR1A  R
*
USER $CP-NUC$ NOLOG
 MDISK A07 3350 549 006 VMR1A  R
*
USER $DIRECT$ NOLOG
 MDISK B08 3350 101 002 VMR1A  R
*
USER $SAVSYS$ NOLOG
 MDISK A09 3350 001 010 VMR1A  R
 MDISK B09 3350 081 005 VMR2A  R
*
*
USER $SYSERR$ NOLOG
 MDISK A10 3350 547 002 VMR1A  R
*
USER $SYSCKP$ NOLOG
 MDISK A11 3350 277 001 VMR1A  R
*
USER $SYSWRM$ NOLOG
 MDISK A12 3350 545 002 VMR1A  R
*
**********************************************************************
*             SYSTEM RELATED USER-IDS                                *
**********************************************************************
*
USER FULLDISK NOLOG
*
*
USER MVS CONSOLE-   11M 11M BDG 99
     OPTION REALTIMER ECMODE BMX 370E VIRT=REAL PMA
     ACCOUNT 9 MVS
     IPL 180
     CONSOLE 1F0 3215 X MVSCP
     SPOOL   1FC 2540 READER *
     SPOOL   1FD 2540 PUNCH  A
     SPOOL   1FE 3203        H
     SPOOL   1FF 3203        D
     DEDICATE      00E 00E
     LINK FULLDISK 042 333 MW         *MVSR1A*
     LINK FULLDISK 001 340 RR         *CMS003*
     LINK FULLDISK 002 341 RR         *VMR1A *
     LINK FULLDISK 003 342 RR         *VMD1A *
     LINK FULLDISK 004 343 RR         *CMS002*
     LINK FULLDISK 005 344 RR         *VMR2A *
     LINK FULLDISK 006 345 RR         *CMS001*
     LINK FULLDISK 009 348 MW         *DLIB02*
     LINK FULLDISK 011 34A MW         *D50SYS*
     LINK FULLDISK 013 34C MW         *D50CAT*
     LINK FULLDISK 015 34E MW         *MVSD2A*
     LINK FULLDISK 016 34F MW         *CICR1B*
*** COMPUTER ROOM TERMINALS.
     DED 543 543
     DED 544 544
     DED 54E 54E
*** 3705 LINES.
     DED 030 030
     DED 031 031
     DED 032 032
     DED 033 033
     DED 034 034
      DED 035 035
     DED 038 038
     DED 03E 03E
     DED 03F 03F
***  CONTROLLER 060 IBM 3274
     DED 060 060
     DED 061 061
     DED 062 062
     DED 063 063


GET EXEC

/* GET */
MSGOFF
'SET CMSTYPE HT'
'CP LINK COMMON 191 4DD RR'
'ACCESS 4DD T'
MSGON
'SET CMSTYPE RT'
ARG A1 A2 A3 A4 A5
IF A1 = ' ' | A1 = '?' THEN DO
   CALL TELL_THEM
   CALL EXIT_IT
END
IF A1 = 'V' | A1 = 'VOL' | A1 = 'VOLUME' THEN DO
   CHECKK_LABEL = SUBSTR(A2,1,3)
   IF CHECKK_LABEL = 'DSK' | CHECKK_LABEL = 'BAD'
      THEN CALL FDSK_TABLE
   ELSE DO
      CALL VOLUME_LOCATE
      END
END
IF A2 = ' ' THEN A2 = 191
IF A2 = 'RR' | A2 = 'WR' | A2 = 'M' | A2 = 'MR' | A2 = 'MW'
   THEN CALL A2MODE
CALL DISK_ACCESS
CALL EXIT_IT
/* SUBROUTINES */
A2MODE:
 A5 = A2
 A2 = 191
RETURN
VOLUME_LOCATE:
VOLUME_LABEL = A2
A2 = '/'||A2
A2 = A2||'/'
'EXECIO * DISKR HARDWARE HELPUHS T (LOCATE' A2
IF RC = 0 THEN DO
   PULL JUNK1
   PULL JUNK2
   POSITION_OF_VOLUME = FIND(JUNK2,VOLUME_LABEL)
   'EXECIO 3 DISKR HARDWARE HELPUHS T'
   PULL JUNK1
   PULL JUNK2
   PULL FULLDISK_LINE
   'EXECIO * DISKR HARDWARE HELPUHS T (FINIS'
   DROPBUF
   FULLDISK_NUMBER = WORD(FULLDISK_LINE,POSITION_OF_VOLUME)
   A1 = FULLDISK
   A2 = FULLDISK_NUMBER
   CALL DISK_ACCESS
   RETURN
END
SAY '*--------------------------------------------------------------*'
SAY '*      SORRY, I CAN NOT FIND THAT VOLUME IN MY DIRECTORY.      *'
 SAY '*--------------------------------------------------------------*'
RETURN
FDSK_TABLE:
A2 = '/'||A2
A2 = A2||'/'
'EXECIO * DISKR FREE DISK T (LOCATE' A2
IF RC = 0 THEN
DO
   PULL JUNK5
   PULL JUNK6 A2 X4
   'EXECIO * DISKR FREE DISK T (FINIS'
   DROPBUF
   A1 = FULLDISK
   CALL DISK_ACCESS
END
ELSE
DO
   SAY 'THAT VOL_SER NOT AVAILABLE'
   CALL EXIT_IT
END
RETURN
DISK_ACCESS:
IF A4 = ' ' THEN A4 = 291
GETFMADR A4
PULL DUMMY FM ADR OOPS
IF A1 = UHS106 THEN FM = Z
IF A3 Â¬= ' ' THEN FM = A3
IF OOPS = ' ' THEN CALL GET1
ELSE DO
   BEEP
   'BRITE NO FREE FILEMODE -S.  RELEASE SOME DISKS.'
   CALL EXIT_IT
END
RETURN
EXIT_IT:
'SET CMSTYPE HT'
MSGOFF
RELEASE T'(DET'
MSGON
'SET CMSTYPE RT'
EXIT
RETURN
GET1:
IF A5 = ' ' THEN A5 = RR
MSGOFF
'SET CMSTYPE HT'
'CP LINK' A1 A2 ADR A5
IF RC = 0 THEN DO
   ACCESS ADR FM
   'SET CMSTYPE RT'
   SAY A1 '(' A2 ') ACCESSED AS YOUR' FM '(' ADR ')'
   MSGON
   CALL EXIT_IT
END
ELSE DO
   'SET CMSTYPE RT'
   SAY A1 '(' A2 ') COULD NOT BE ACCESSED AS YOUR' FM '(' ADR ')'
   MSGON
   CALL EXIT_IT
END
RETURN
TELL_THEM:
HELP UHS GET
RETURN


 GET HELPUHS

    THE 'GET' EXEC ALLOWS YOU TO LINK TO AND ACCESS ANY CMS MINI-DISK
OR OS VOLUME IN THE SYSTEM, PROVIDED ANY REQUIRED PASSWORDS ARE KNOWN.
ALL THE FUNCTIONS OF THE CP LINK AND CMS ACCESS COMMANDS ARE SUPPORTED,
BUT DEFAULTS HAVE BEEN CHOSEN, SO NO OPTIONS ARE USUALLY REQUIRED.
    'GET' HAS BEEN DESIGNED TO WORK WELL WITH THE 'DASD' EXEC, WHICH
WILL SELECTIVELY RELEASE YOUR EXTRA DISKS.
    THE FORMAT OF THE GET COMMAND IS:
+--------------------------------------------------------------------+
|GET |                                                               |
|    |        +    +        +                                        |
|    |USERID  |CUU |        |                                        |
|    |        +    +        |         +      +      +                |
|    |                      |FILEMODE |VADDR |MODE  |                |
|    |                      |         +      +      +                |
|    |<V              >     |                                        |
|    |<VOL     VOLSER >     |                                        |
|    |<VOLUME         >     |                                        |
|    |                      |                                        |
|    |                      +                                        |
+--------------------------------------------------------------------+
     WHERE:
USERID    IS THE VM USERID OF THE USER WHOSE MINI-DISK YOU WISH TO
     USE.
CUU  IS THE OPTIONAL ADDRESS OF THE USER'S MINI-DISK YOU WISH
     TO USE.  DEFAULTS TO 191.
VOLSER    IS THE PHYSICAL VOLUME-SERIAL NUMBER OF THE FULL-VOLUME
     DISK YOU WISH TO USE.  MUST BE PRECEDED BY KEYWORD 'V',
     'VOL' OR 'VOLUME'.
FILEMODE  IS THE OPTIONAL CMS FILEMODE YOU WANT THE DISK ACCESSED
     AS.  DEFAULT IS TO FIND THE FIRST OPEN FILEMODE AND USE
     IT.
VADDR     IS THE OPTIONAL VIRTUAL-ADDRESS YOU WANT THE DISK
     LINKED TO.  DEFAULT IS TO USE THE FIRST AVAILABLE ADDRESS
     ABOVE X'290'.  THIS ALLOWS THE DASD EXEC TO TELL YOUR
     DISKS FROM ONES YOU'RE 'BORROWING'.
MODE IS THE OPTIONAL LINK MODE (READ-ONLY, READ-WRITE, ETC.).
     ACCEPTABLE ENTRIES INCLUDE RR, WR, MW, MR.  DEFAULT IS RR.
EXAMPLES:
   GET SYSCICS         ;SYSCICS'S 191 DISK IS LINKED TO YOU READ-ONLY,
                       ;AND ACCESSED IN THE FIRST AVAILABLE POSITION.
   GET VOL DLIB02      ;THE VOLUME DLIB02 IS LINKED TO YOU READ-ONLY,
                       ;AND ACCESSED IN THE FIRST AVAILABLE POSITION.
   GET VOL OSDEV1 T    ;THE VOLUME OSDEV1 IS LINKED TO YOU READ-ONLY,
                       ;AND ACCESSED AS FILEMODE 'T'.
   GET VOL STC42F Z 501 WR
                       ;THE VOLUME STC42F IS LINKED TO YOU READ-WRITE
                       ;(IF YOU HAVE THE PASSWORD) AT YOUR VIRTUAL
                       ;ADDRESS 501, AND ACCESSED AS FILEMODE 'Z'.


FREE DISK

MDISK 101 3350 000 560 DSK220 MW ALL FULLWRIT FULLMULT
MDISK 102 3350 000 560 DSK221 MW ALL FULLWRIT FULLMULT
MDISK 103 3350 000 560 DSK222 MW ALL FULLWRIT FULLMULT
MDISK 104 3350 000 560 DSK223 MW ALL FULLWRIT FULLMULT etc.


FULLDISK EXEC

/* FULLDISK */
/* THIS EXEC READS THE FREE DISK FILE AND LOCATES THE FULLDISK NUMBER */
ARG DISK_NAME
MSGOFF
 SET CMSTYPE HT
'CP LINK COMMON 191 4EC RR'
IF RC = 0 THEN DO
   NEXTFM 4EC
   IF RC = 0 THEN
      PULL FILEMODE
   ELSE DO
      SET CMSTYPE RT
      SAY 'THERE ARE NO FREE FILEMODES AVAILABLE.'
   IF RC Â¬= 0 THEN
      CALL EXIT_IT
END
SET CMSTYPE HT
ACCESS 4EC FILEMODE
SET CMSTYPE RT
IF DISK_NAME = ' ' THEN DO
   SAY 'ENTER THE DISK NAME YOU NEED THE FULLDISK NUMBER FOR.'
   PULL DISK_NAME
END
FIRST_THREE_CHARACTERS = SUBSTR(DISK_NAME,1,3)
IF (FIRST_THREE_CHARACTERS = DSK) | (FIRST_THREE_CHARACTERS = BAD)
THEN DO
   'EXECIO * DISKR FREE DISK' FILEMODE '(LOCATE' DISK_NAME
   IF RC = 0 THEN DO
      PULL JUNK
      PULL V1 FULLDISK_NUMBER V3 V4 V5 DISK_NAME V7
      SAY 'THE FULLDISK NUMBER OF' DISK_NAME 'IS' FULLDISK_NUMBER
   END
   ELSE DO
      SAY DISKNAME 'NEEDS TO BE ADDED TO FREE DISK A1 ON THE USERID'
      SAY 'COMMON.'
   END
END
ELSE DO
   'EXECIO * DISKR HARDWARE HELPUHS' FILEMODE '(LOCATE' DISK_NAME
   IF RC = 0 THEN DO
      PULL V1
      PULL V2
      EXECIO 3 DISKR HARDWARE HELPUHS FILEMODE
      PULL V3
      PULL V4
      PULL V5
      DISK_POSITION = FIND(V2,DISK_NAME)
      FULLDISK_NUMBER = SUBWORD(V5,DISK_POSITION,1)
      SAY 'THE FULLDISK NUMBER OF' DISK_NAME 'IS' FULLDISK_NUMBER
   END
   ELSE DO
      SAY DISK_NAME 'COULD NOT BE FOUND IN HARDWARE HELPUHS ON THE'
      SAY 'USERID COMMON.'
   END
END
CALL EXIT_IT
EXIT
EXIT_IT
MSGOFF
SET CMSTYPE HT
'RELEASE 4EC (DET'
SET CMSTYPE RT
MSGON
EXIT


Gary Jenkins
Systems Programmer
University of Kentucky Medical Center (USA)
     ) University of Kentucky Medical Center 1987


































































