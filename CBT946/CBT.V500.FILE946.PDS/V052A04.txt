VMDBK display for VM/XA (continued)

This month we continue the article that will display flag bytes,
counters, and other CP data areas in a user's VMDBK.  Figure
1 shows the fifth screen in a series that are produced when
using the VMDBK routine.


PROFVMDB XEDIT

/*     (Used by VMDBK EXEC)                                           */
/* Function: Format and display various flags, data, and counters     */
/*           that are found in a userid's VMDBK                       */
/* The userid field can be changed to get stats on another user's     */
/* VMDBK.  Other update fields are Continu (for continuous display    */
/* using PF6) and Screen (to 'jump' to a specific screen).            */
/* PF12 can be used to go into UPDATE mode so that you can change     */
/* the userids' SHARE setting (Both relative (default) and absolute   */
/* settings are supported.  Use the % symbol to specify absolute.)    */
Arg  . ')' vmuser page
/* Make sure we catch any 'bad' addresses used in calculations.       */
/* Get the userid wanted, then start setting up the screen.           */
Signal on SYNTAX
Parse Value Diag(8,'LOC' vmuser) With key . orgloc '15'x
If key ¬= 'VMDBK' Then Do
   Say 'User' vmuser 'not logged on.'
   'QQUIT'
   Exit
   End
'SET PREFIX OFF'
'SET TOFEOF OFF'
'SET MSGLINE ON 3 2 OVERLAY'
'SET MSGMODE ON'
'SET EMSG ON'
'SET CMDLINE OFF'
'SET FULLREAD ON'
'SET LINEND OFF'
'SET SCALE OFF'
'SET CTL ! ESCAPE'
'SET CTL @ PROTECT GRE NONE NOHIGH'
'SET CTL $ PROTECT TUR NONE HIGH'
'SET CTL Ý PROTECT BLU NONE NOHIGH'
'SET CTL { PROTECT YEL NONE HIGH'
'SET CTL ? PROTECT RED NONE HIGH'
'SET CTL } NOPROTECT RED NONE HIGH'
'SET CTL & NOPROTECT TUR NONE HIGH'
rp = '!?'
gp = '!@'
bp = '!Ý'
tp = '!$'
yp = '!{'
rnp = '!}'
tnp = '!&'
on = yp
off = gp
colorlist = 'Default Blue Red Pink Green Turquoise Yellow White'
extendlist = 'None Blink Reverse ??? Underscore'
cmpr.1 = '80'x
cmpr.2 = '40'x
cmpr.3 = '20'x
cmpr.4 = '10'x
cmpr.5 = '08'x
cmpr.6 = '04'x
cmpr.7 = '02'x
cmpr.8 = '01'x
class = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ012345'
updt_flg = 'OFF'
c_cnt = 25
save_cnt = 25
cont_flg = 0
screen = page + 0
/* Main loop:  Find the required values for the screen wanted.       */
/* Display the screen and wait for changes.                          */
Do Forever
  Call FINDVALS
   'CURSOR SCREEN 1 11'
   line.1 = bp||'Userid:'||rnp||vmuser||,
            bp||'VMDBK Loc:'||gp ||cploc||,
            bp||'   Sec User:'||rp||secuser||,
            bp||'  Priv CL:'||rp||privclas||bp
   line.2 = bp||' UPDATE MODE'||yp||'*'||Left(updt_flg,3)||'*'||,
            bp||'   Share:'||rnp||Left(Space(priority),5)||,
            bp||'   Last CP CMD:'||gp||cpcmd||,
            bp||'  Continu:'||tnp||c_cnt||gp
   line.3 = bp||Right('Screen:',70)||rnp||screen||bp||'of 5'
If screen = 1 Then Do
   line.4 = bp||'VMDCFCTL(388):'||gp||vm.1||,
            bp||'  VMDCFLAG(389):'||gp||vm.2||,
            bp||'  VMDOSTAT(38A):'||gp||vm.3||,
            bp||'  VMDCWAIT(38B):'||gp||vm.4||bp
   line.5 = rp||stat.1.1||fld.1.1||'Cons func working'||,
            rp||stat.2.1||fld.2.1||'Not logged on yet'||,
            rp||stat.3.1||fld.3.1||'System Operator  '||,
            rp||stat.4.1||fld.4.1||'VM in stop state '
   line.6 = rp||stat.1.2||fld.1.2||'Cons func entered'||,
            rp||stat.2.2||fld.2.2||'Logging off      '||,
            rp||stat.3.2||fld.3.2||'In system user ct'||,
            rp||stat.4.2||fld.4.2||'Sleeping         '
   line.7 = rp||stat.1.3||fld.1.3||'CP READ          '||,
            rp||stat.2.3||fld.2.3||'System Reset     '||,
            rp||stat.3.3||fld.3.3||'...not used...   '||,
            rp||stat.4.3||fld.4.3||'VCPU in Chk Stop '
   line.8 = rp||stat.1.4||fld.1.4||'...not used...   '||,
            rp||stat.2.4||fld.2.4||'Cons func nodisp '||,
            rp||stat.3.4||fld.3.4||'To be logged off '||,
            rp||stat.4.4||fld.4.4||'Disconn Wait     '
   line.9 = rp||stat.1.5||fld.1.5||'...not used...   '||,
            rp||stat.2.5||fld.2.5||'...not used...   '||,
            rp||stat.3.5||fld.3.5||'Forced           '||,
            rp||stat.4.5||fld.4.5||'...not used...   '
  line.10 = rp||stat.1.6||fld.1.6||'CPU hard stopped '||,
            rp||stat.2.6||fld.2.6||'Cons func to buff'||,
            rp||stat.3.6||fld.3.6||'Disconnected     '||,
            rp||stat.4.6||fld.4.6||'...not used...   '
  line.11 = rp||stat.1.7||fld.1.7||'Cons func wait   '||,
            rp||stat.2.7||fld.2.7||'PSW swap / Diag 8'||,
            rp||stat.3.7||fld.3.7||'Autologed/Discon '||,
            rp||stat.4.7||fld.4.7||'...not used...   '
  line.12 = rp||stat.1.8||fld.1.8||'Active since read'||,
            rp||stat.2.8||fld.2.8||'No data input CP '||,
            rp||stat.3.8||fld.3.8||'XAutologed       '||,
            rp||stat.4.8||fld.4.8||'...not used...   '
  line.13 = gp
  line.14 = bp||'VMDMLVL (3C9):'||gp||vm.5||,
            bp||'  VMDMIUCV(3CA):'||gp||vm.6||,
            bp||'  VMDMSSFL(3CB):'||gp||vm.7||,
            bp||'  VMDRSTAT(509):'||gp||vm.8||bp
  line.15 = rp||stat.5.1||fld.5.1||'Receiving MSGs   '||,
            rp||stat.6.1||fld.6.1||'MSG via IUCV     '||,
            rp||stat.7.1||fld.7.1||'IUCV Path made   '||,
            rp||stat.8.1||fld.8.1||'...not used...   '
  line.16 = rp||stat.5.2||fld.5.2||'Receiving WNGs   '||,
            rp||stat.6.2||fld.6.2||'WNG via IUCV     '||,
            rp||stat.7.2||fld.7.2||'IUCV *MSG conn.  '||,
            rp||stat.8.2||fld.8.2||'Cons func wait   '
  line.17 = rp||stat.5.3||fld.5.3||'Receiving EMSGs  '||,
            rp||stat.6.3||fld.6.3||'EMSG via IUCV    '||,
            rp||stat.7.3||fld.7.3||'IUCV *MSGALL val.'||,
            rp||stat.8.3||fld.8.3||'Guest simulation '
  line.18 = rp||stat.5.4||fld.5.4||'Recv EMSGs text  '||,
            rp||stat.6.4||fld.6.4||'...not used...   '||,
            rp||stat.7.4||fld.7.4||'IUCV *MSGALL path'||,
            rp||stat.8.4||fld.8.4||'Instruc wait I/O '
  line.19 = rp||stat.5.5||fld.5.5||'Receiving SMSGs  '||,
            rp||stat.6.5||fld.6.5||'SMSG via IUCV    '||,
            rp||stat.7.5||fld.7.5||'...not used...   '||,
            rp||stat.8.5||fld.8.5||'...not used...   '
  line.20 = rp||stat.5.6||fld.5.6||'Receiving IMSGs  '||,
            rp||stat.6.6||fld.6.6||'IMSG via IUCV    '||,
            rp||stat.7.6||fld.7.6||'...not used...   '||,
            rp||stat.8.6||fld.8.6||'...not used...   '
  line.21 = rp||stat.5.7||fld.5.7||'...not used...   '||,
            rp||stat.6.7||fld.6.7||'CPCONIO via IUCV '||,
            rp||stat.7.7||fld.7.7||'...not used...   '||,
            rp||stat.8.7||fld.8.7||'...not used...   '
  line.22 = rp||stat.5.8||fld.5.8||'...not used...   '||,
            rp||stat.6.8||fld.6.8||'VMCONIO via IUCV '||,
            rp||stat.7.8||fld.7.8||'...not used...   '||,
            rp||stat.8.8||fld.8.8||'...not used...   '
End
Else If screen = 2 Then Do
   line.4 = bp||'VMDSLIST(50A):'||gp||vm.9||,
            bp||'  VMDDLCTL(50B):'||gp||vm.10||,
            bp||'  VMDSTATE(50C):'||gp||vm.11||,
            bp||'  VMDWRKCD(520):'||gp||vm.12||bp
   line.5 = rp||stat.9.1||fld.9.1||'  * Special *    '||,
            rp||stat.10.1||fld.10.1||'...not used...   '||,
            rp||stat.11.1||fld.11.1||'  * Special *    '||,
            rp||stat.12.1||fld.12.1||'Time slc end pnd'
   line.6 = rp||stat.9.2||fld.9.2||'37-Dispatch list '||,
            rp||stat.10.2||fld.10.2||'Time slice exceed'||,
            rp||stat.11.2||fld.11.2||'63-VMDBK to susp '||,
            rp||stat.12.2||fld.12.2||'Hi-priority schd'
   line.7 = rp||stat.9.3||fld.9.3||'21-Eligible list '||,
            rp||stat.10.3||fld.10.3||'...not used...   '||,
            rp||stat.11.3||fld.11.3||'58-VMDBK to idle '||,
            rp||stat.12.3||fld.12.3||'Master CPU disp '
   line.8 = rp||stat.9.4||fld.9.4||'0B-Dormat list   '||,
            rp||stat.10.4||fld.10.4||'...not used...   '||,
            rp||stat.11.4||fld.11.4||'4D-Selected by Dp'||,
            rp||stat.12.4||fld.12.4||'Excd WSS growth '
   line.9 = rp||stat.9.5||fld.9.5||'00-Not in any lst'||,
            rp||stat.10.5||fld.10.5||'Drop from dispatc'||,
            rp||stat.11.5||fld.11.5||'42-Ready for slct'||,
            rp||stat.12.5||fld.12.5||'Pre Empt dispatc'
  line.10 = rp||stat.9.6||fld.9.6||'     .....       '||,
            rp||stat.10.6||fld.10.6||'Reorder VMDBK    '||,
            rp||stat.11.6||fld.11.6||'37-Test Idle     '||,
            rp||stat.12.6||fld.12.6||'V MP cmplx drop '
  line.11 = rp||stat.9.7||fld.9.7||'     .....       '||,
            rp||stat.10.7||fld.10.7||'Exceeded resource'||,
            rp||stat.11.7||fld.11.7||'2C-Short suspend '||,
            rp||stat.12.7||fld.12.7||'D-list to E-list'
  line.12 = rp||stat.9.8||fld.9.8||'     .....       '||,
            rp||stat.10.8||fld.10.8||'...not used...   '||,
            rp||stat.11.8||fld.11.8||'00-Full Idle     '||,
            rp||stat.12.8||fld.12.8||'...not used...  '
  line.13 = gp
  line.14 = bp||'VMDWRKCK(521):'||gp||vm.13||,
            bp||'  VMDWRKCB(523):'||gp||vm.14||,
            bp||'  VMDALEFG(53F):'||gp||vm.15||,
            bp||'  VMDIOPF1(5D2):'||gp||vm.16||bp
  line.15 = rp||stat.13.1||fld.13.1||'Urgent CPEBK Stkd'||,
            rp||stat.14.1||fld.14.1||'Enter HCPCFM     '||,
            rp||stat.15.1||fld.15.1||'V CPU enabld wait'||,
            rp||stat.16.1||fld.16.1||'No I/O Pass-BC  '
  line.16 = rp||stat.13.2||fld.13.2||'IO/TRQBK stacked '||,
            rp||stat.14.2||fld.14.2||'Enter HCPTSMRG   '||,
            rp||stat.15.2||fld.15.2||'VMDBK in V/SIE md'||,
            rp||stat.16.2||fld.16.2||'No I/O Pass-IOAS'
  line.17 = rp||stat.13.3||fld.13.3||'CPEBK stacked    '||,
            rp||stat.14.3||fld.14.3||'Force Interprt md'||,
            rp||stat.15.3||fld.15.3||'V CPU no I/O intr'||,
            rp||stat.16.3||fld.16.3||'No I/O Pass-Diag'
  line.18 = rp||stat.13.4||fld.13.4||'...not used...   '||,
            rp||stat.14.4||fld.14.4||'Handle Alert cnd '||,
            rp||stat.15.4||fld.15.4||'...not used...   '||,
            rp||stat.16.4||fld.16.4||'No I/O Pass-Disa'
  line.19 = rp||stat.13.5||fld.13.5||'CPEBK for cons fu'||,
            rp||stat.14.5||fld.14.5||'IUCV Monitor send'||,
            rp||stat.15.5||fld.15.5||'...not used...   '||,
            rp||stat.16.5||fld.16.5||'No I/O Asst-Situ'
  line.20 = rp||stat.13.6||fld.13.6||'...not used...   '||,
            rp||stat.14.6||fld.14.6||'IUCV Monitor rpln'||,
            rp||stat.15.6||fld.15.6||'...not used...   '||,
            rp||stat.16.6||fld.16.6||'No I/O Pass-Adlm'
  line.21 = rp||stat.13.7||fld.13.7||'...not used...   '||,
            rp||stat.14.7||fld.14.7||'XA Subch I/O intr'||,
            rp||stat.15.7||fld.15.7||'...not used...   '||,
            rp||stat.16.7||fld.16.7||'No I/O Pass-Size'
  line.22 = rp||stat.13.8||fld.13.8||'...not used...   '||,
            rp||stat.14.8||fld.14.8||'...not used...   '||,
            rp||stat.15.8||fld.15.8||'...not used...   '||,
            rp||stat.16.8||fld.16.8||'No I/O Pass-DCCF'
End
Else If screen = 3 Then Do
   line.4 = bp||'VMDIOPF2(5D3):'||gp||vm.17||,
            bp||'  VMDSCDF2(709):'||gp||vm.18||,
            bp||'  VMDDLCTX(70A):'||gp||vm.19||,
            bp||'  VMDQSTAT(70D):'||gp||vm.20||bp
   line.5 = rp||stat.17.1||fld.17.1||'Remove fr I/O Pas'||,
            rp||stat.18.1||fld.18.1||'Continue Transact'||,
            rp||stat.19.1||fld.19.1||'WSS Growth Exceed'||,
            rp||stat.20.1||fld.20.1||'Hot shot sched  '
   line.6 = rp||stat.17.2||fld.17.2||'Was in I/O Passth'||,
            rp||stat.18.2||fld.18.2||'From dispatch lst'||,
            rp||stat.19.2||fld.19.2||'To be pre empted '||,
            rp||stat.20.2||fld.20.2||'Hot shot granted'
   line.7 = rp||stat.17.3||fld.17.3||'Monitor CR 6     '||,
            rp||stat.18.3||fld.18.3||'From eligible lst'||,
            rp||stat.19.3||fld.19.3||'Complex dropped  '||,
            rp||stat.20.3||fld.20.3||'Loading usr desg'
   line.8 = rp||stat.17.4||fld.17.4||'...not used...   '||,
            rp||stat.18.4||fld.18.4||'From dormant list'||,
            rp||stat.19.4||fld.19.4||'Timeslice ended  '||,
            rp||stat.20.4||fld.20.4||'Inter. Bias     '
   line.9 = rp||stat.17.5||fld.17.5||'I/O P Enabled wt '||,
            rp||stat.18.5||fld.18.5||'Pre empt - storag'||,
            rp||stat.19.5||fld.19.5||'Volunt. tmslc end'||,
            rp||stat.20.5||fld.20.5||'Paging Bias     '
  line.10 = rp||stat.17.6||fld.17.6||'IPL PSW BMC mode '||,
            rp||stat.18.6||fld.18.6||'Eligible b4 TOD  '||,
            rp||stat.19.6||fld.19.6||'Cancel lock shot '||,
            rp||stat.20.6||fld.20.6||'Lock shot active'
  line.11 = rp||stat.17.7||fld.17.7||'...not used...   '||,
            rp||stat.18.7||fld.18.7||'Dormant to eligib'||,
            rp||stat.19.7||fld.19.7||'...not used...   '||,
            rp||stat.20.7||fld.20.7||'...not used...  '
  line.12 = rp||stat.17.8||fld.17.8||'...not used...   '||,
            rp||stat.18.8||fld.18.8||'...not used...   '||,
            rp||stat.19.8||fld.19.8||'...not used...   '||,
            rp||stat.20.8||fld.20.8||'Distroy VMDBK   '
  line.13 = gp||Copies('.',78)
  line.14 = gp
  line.15 = bp||'Line End:'||gp||Left(linend,3)||,
            bp||'      Line Delete:'||gp||Left(linedel,3)||,
            bp||'   Char Delete:'||gp||Left(chardel,3)||,
            bp||'   Escape:'||gp||Left(escape,3)
  line.16 = gp
  line.17 = bp||'VM  Output:'||gp||Left(vmout,20)||,
            bp||'       Input Redisp:'||gp||Left(inredisp,20)
  line.18 = bp||'Input Area:'||gp||Left(inarea,20)||,
            bp||'       Status  Area:'||gp||Left(statarea,20)
  line.19 = bp||'CP  Output:'||gp||Left(cpout,20)
  line.20 = gp
  line.21 = bp||'Last CP IPL Command:'||gp||Left(lastipl,50)
  line.22 = gp
End
Else If screen = 4 Then Do
   line.4 = bp||'PF 01:'||gp||Left(pfkey.1,30)||,
            bp||'   PF 02:'||gp||Left(pfkey.2,30)
   line.5 = bp||'PF 03:'||gp||Left(pfkey.3,30)||,
            bp||'   PF 04:'||gp||Left(pfkey.4,30)
   line.6 = bp||'PF 05:'||gp||Left(pfkey.5,30)||,
            bp||'   PF 06:'||gp||Left(pfkey.6,30)
   line.7 = bp||'PF 07:'||gp||Left(pfkey.7,30)||,
            bp||'   PF 08:'||gp||Left(pfkey.8,30)
   line.8 = bp||'PF 09:'||gp||Left(pfkey.9,30)||,
            bp||'   PF 10:'||gp||Left(pfkey.10,30)
   line.9 = bp||'PF 11:'||gp||Left(pfkey.11,30)||,
            bp||'   PF 12:'||gp||Left(pfkey.12,30)
  line.10 = bp||'PF 13:'||gp||Left(pfkey.13,30)||,
            bp||'   PF 14:'||gp||Left(pfkey.14,30)
  line.11 = bp||'PF 15:'||gp||Left(pfkey.15,30)||,
            bp||'   PF 16:'||gp||Left(pfkey.16,30)
  line.12 = bp||'PF 17:'||gp||Left(pfkey.17,30)||,
            bp||'   PF 18:'||gp||Left(pfkey.18,30)
  line.13 = bp||'PF 19:'||gp||Left(pfkey.19,30)||,
            bp||'   PF 20:'||gp||Left(pfkey.20,30)
  line.14 = bp||'PF 21:'||gp||Left(pfkey.21,30)||,
            bp||'   PF 22:'||gp||Left(pfkey.22,30)
  line.15 = bp||'PF 23:'||gp||Left(pfkey.23,30)||,
            bp||'   PF 24:'||gp||Left(pfkey.24,30)
  line.16 = gp
  line.17 = bp||'     Console I/O:'||gp||Left(console_io,6)||,
            bp||'  Dasd  I/O:'||gp||Left(dasd_io,6)||,
            bp||'   Other I/O:'||gp||Left(other_io,6)
  line.18 = gp
  line.19 = bp||'I/Os outstanding:'||gp||Left(outstand_io,6)||,
            bp||'  Virtual SIOs  to  Real Devices:'||gp||Left(real_sio,6)
  line.20 = gp
  line.21 = bp||'      Reader I/O:'||gp||Left(rdr_io,6)||,
            bp||'  Punch I/O:'||gp||Left(pun_io,6)||,
            bp||' Printer I/O:'||gp||Left(prt_io,6)
  line.22 = gp
End
Else If screen = 5 Then Do
   line.4 = bp||'    Page Faults:'||gp||Left(page_faults,7)||,
            bp||'    Pages Locked:'||gp||Left(page_lock,7)||,
            bp||'  Pages Resident:'||gp||Left(page_res,7)
   line.5 = gp
   line.6 = bp||'   Max Resident:'||gp||Left(max_res,7)||,
            bp||'      Page Waits:'||gp||Left(page_wait,7)||,
            bp||'    Pages Stolen:'||gp||Left(page_stolen,7)
   line.7 = gp
   line.8 = bp||'    Page Writes:'||gp||Left(page_writes,7)||,
            bp||'      Page Reads:'||gp||Left(page_reads,7)||,
            bp||'     Working Set:'||gp||Left(wss,7)
   line.9 = gp
  line.10 = bp||'   VM Pages Out:'||gp||Left(vm_pages_out,7)||,
            bp||'     VM Pages In:'||gp||Left(vm_pages_in,7)||,
            bp||' Preferred Slots:'||gp||Left(pref_slots,7)
  line.11 = gp
  line.12 = bp||'Non-Pref. Slots:'||gp||Left(nonpref_slots,7)||,
            bp||' Free Strg Block:'||gp||Left(free_blocks,7)
  line.13 = gp
  line.14 = gp||Copies('.',78)
  line.15 = gp
  line.16 = bp||'User Idle Drops......... Q0:'||gp||Left(idle_q0,5)||,
            bp||'   Q1:'||gp||Left(idle_q1,5)||,
            bp||'   Q2:'||gp||Left(idle_q2,5)||,
            bp||'   Q3:'||gp||Left(idle_q3,5)
  line.17 = bp||'E-Slice End Drops....... Q0:'||gp||Left(eslice_q0,5)||,
            bp||'   Q1:'||gp||Left(eslice_q1,5)||,
            bp||'   Q2:'||gp||Left(eslice_q2,5)||,
            bp||'   Q3:'||gp||Left(eslice_q3,5)
  line.18 = bp||'WSS Growth Limit Drops.. Q0:'||gp||Left(wss_q0,5)||,
            bp||'   Q1:'||gp||Left(wss_q1,5)||,
            bp||'   Q2:'||gp||Left(wss_q2,5)||,
            bp||'   Q3:'||gp||Left(wss_q3,5)
  line.19 = bp||'Pre Emption Drops....... Q0:'||gp||Left(pre_q0,5)||,
            bp||'   Q1:'||gp||Left(pre_q1,5)||,
            bp||'   Q2:'||gp||Left(pre_q2,5)||,
            bp||'   Q3:'||gp||Left(pre_q3,5)
  line.20 = gp
  line.21 = gp
  line.22 = gp
End
  line.23 = gp
  line.24 = bp||'PF3=Exit  PF6=Continue  PF7=Backward  '||,
                'PF8=Forward  PF12=Mode    ENTER=Refresh'
  Do i = 1 to 24
    'SET RESERVED' i 'NOHIGH' line.i
  End
  exit_flg = 0
  error_flg = 0
  Do i = 1 to 8
    flag.i = 0
    End
  If cont_flg = 1 & c_cnt > 0 Then Do
     c_cnt = c_cnt - 1
     'REFRESH'
     Iterate
     End
  Else If cont_flg = 1 Then Do
         c_cnt = save_cnt
         cont_flg = 0
         Iterate
         End
  Address Command 'MAKEBUF'
  'READ NOCHANGE TAG'
  Do Forever
    Pull flg row col text .
    If flg = 'PFK' Then Call PFKEY
    If exit_flg = 1 Then Leave
    If flg = 'RES' Then Do
       Call CHANGES
       Leave
       End
    If error_flg = 1 | Queued() = 0 Then Leave
    End
  Address Command 'DROPBUF'
  If exit_flg = 1 Then Do
     'QQUIT'
     Exit
     End
  End /* MAIN LOOP */
'QQUIT'
Exit
/* FINDVALS: Called routine.                                         */
/* Builds the required fields for the screen requested. Always       */
/* rebuild the top of the screen, and then check which screen        */
/* number wanted and build the fields for it.                        */
FINDVALS:
 c_cnt = Right(c_cnt,2,0)
/* Make sure the user is still logged on */
 vmuser = Left(vmuser,8)
 Parse Value Diag(8,'LOC' vmuser) With key . cploc '15'x
 If key ¬= 'VMDBK' Then Do
    'EMSG   VMDBK001I: User' vmuser 'not logged on.'
    Call CLEAR_FIELDS
    Return
    End
/* Make sure the user is the same as the one we started with */
 If cploc ¬= orgloc Then Do
    "EMSG   VMDBK002I: User's VMBLOK location has changed."
    orgloc = cploc
    End
/* Set up the Priv. Class for the user */
 privclas = ''
 c = 1
 pword = Getstore(cploc,'3C0',4,'HOST','HEX')
 Do j = 1 to 7 by 2
   fbyte = x2c(Substr(pword,j,2))
   Do x = 1 to 8
    If Bitand(fbyte,cmpr.x) = cmpr.x Then privclas = privclas||Substr(class,c,1)
     c = c + 1
     End
   End
 privclas = Left(privclas,8)
/* Get the last CP command, Secondary Userid, and priority */
 cpcmd = Getstore(cploc,'380',8,'HOST','CHAR')
 secuser = Getstore(cploc,'4F0',8,'HOST','CHAR')
 priority = Getstore(cploc,'700',4,'HOST','DEC')
 If priority = 0 Then
    priority = Format(100*(Getstore(cploc,'704',4,'HOST','DEC'),
               /65536)+.001,3,0)||'%'
/* Get all the VMDBK Flags we need for all the screens. */
 Parse Value Getstore(cploc,388,4,'HOST','HEX') With,
                     vm.1 +2 vm.2 +2 vm.3 +2 vm.4 +2
 Parse Value Getstore(cploc,3C9,3,'HOST','HEX') With,
                     vm.5 +2 vm.6 +2 vm.7 +2
 Parse Value Getstore(cploc,509,4,'HOST','HEX') With,
                     vm.8 +2 vm.9 +2 vm.10 +2 vm.11 +2
 Parse Value Getstore(cploc,520,3,'HOST','HEX') With,
                     vm.12 +2 vm.13 +2 vm.14 +2
 vm.15 = Getstore(cploc,53F,1,'HOST','HEX')
 Parse Value Getstore(cploc,5D2,2,'HOST','HEX') With,
                     vm.16 +2 vm.17 +2
 Parse Value Getstore(cploc,709,3,'HOST','HEX') With,
                     vm.18 +2 vm.19 +2 vm.20 +2
/* Set up the flags depending on the screen wanted. */
If screen = 1 Then
  Do i = 1 to 8
    Call SET_DISPLAY
    End
Else If screen = 2 Then Do
  Do i = 9 to 16
    Call SET_DISPLAY
    End
/* Set up the special flags for screen 2 */
  fld.9.1 = on
  fld.11.1 = on
  Do x= 2 to 8
    fld.9.x = off
    fld.11.x = off
    End
  Select /* vm.9 */
    When vm.9 = '37' Then fld.9.2 = on
    When vm.9 = '21' Then fld.9.3 = on
    When vm.9 = '0B' Then fld.9.4 = on
    When vm.9 = '00' Then fld.9.5 = on
    Otherwise Nop
    End
  Select /* vm.11 */
    When vm.11 = '63' Then fld.11.2 = on
    When vm.11 = '58' Then fld.11.3 = on
    When vm.11 = '4D' Then fld.11.4 = on
    When vm.11 = '42' Then fld.11.5 = on
    When vm.11 = '37' Then fld.11.6 = on
    When vm.11 = '2C' Then fld.11.7 = on
    When vm.11 = '00' Then fld.11.8 = on
    Otherwise Nop
    End
  End
Else If screen = 3 Then Do
  Do i = 17 to 20
    Call SET_DISPLAY
    End
  Parse Value Getstore(cploc,'368',9,'HOST','HEX') With,
        linend +2 linedel +2 chardel +2 escape +2 ,
        vmout +2 inredisp +2 inarea +2 statarea +2 cpout +2
  If linend = '00' Then linend = 'OFF'
  Else linend = x2c(linend)
  If linedel = '00' Then linedel = 'OFF'
  Else linedel = x2c(linedel)
  If chardel = '00' Then chardel = 'OFF'
  Else chardel = x2c(chardel)
  If escape = '00' Then escape = 'OFF'
  Else escape = x2c(escape)
  vmout = Extended(vmout)
  inredisp = Extended(inredisp)
  inarea = Extended(inarea)
  statarea = Extended(statarea)
  cpout = Extended(cpout)
  ipl_pointer = Getstore(cploc,'42C',4,'HOST','HEX')
  ipl_len = Getstore(ipl_pointer,,2,'HOST','DEC')
  lastipl = Getstore(ipl_pointer,2,ipl_len,'HOST','CHAR')
  End
Else If screen = 4 Then Do
  pfk_table = Getstore(cploc,374,4,'HOST','HEX')
  Do i = 1 to 24
     If pfk_table == '00000000' Then pfkey.i = '...Not set...'
     Else pfkey.i = Pfkey_text(i)
     End
  console_io = Getstore(cploc,458,4,'HOST','DEC')
  dasd_io = Getstore(cploc,45C,4,'HOST','DEC')
  other_io = Getstore(cploc,460,4,'HOST','DEC')
  outstand_io = Getstore(cploc,5DC,4,'HOST','DEC')
  real_sio = Getstore(cploc,5E8,4,'HOST','DEC')
  rdr_io = Getstore(cploc,5EC,4,'HOST','DEC')
  pun_io = Getstore(cploc,5F0,4,'HOST','DEC')
  prt_io = Getstore(cploc,5F4,4,'HOST','DEC')
  End
Else If screen = 5 Then Do
  page_faults = Getstore(cploc,67C,4,'HOST','DEC')
  page_lock = Getstore(cploc,6B0,4,'HOST','DEC')
  page_res = Getstore(cploc,6B4,4,'HOST','DEC')
  max_res = Getstore(cploc,6B8,4,'HOST','DEC')
  page_wait = Getstore(cploc,6BC,4,'HOST','DEC')
  page_stolen = Getstore(cploc,6C0,4,'HOST','DEC')
  page_writes = Getstore(cploc,6C4,4,'HOST','DEC')
  page_reads = Getstore(cploc,6C8,4,'HOST','DEC')
  wss = Getstore(cploc,6CC,4,'HOST','DEC')
  vm_pages_out = Getstore(cploc,6D8,4,'HOST','DEC')
  vm_pages_in = Getstore(cploc,6DC,4,'HOST','DEC')
  pref_slots = Getstore(cploc,6E0,4,'HOST','DEC')
  nonpref_slots = Getstore(cploc,6E4,4,'HOST','DEC')
  free_blocks = Getstore(cploc,6F0,4,'HOST','DEC')
  idle_q0 = Getstore(cploc,7B0,2,'HOST','DEC')
  idle_q1 = Getstore(cploc,7B2,2,'HOST','DEC')
  idle_q2 = Getstore(cploc,7B4,2,'HOST','DEC')
  idle_q3 = Getstore(cploc,7B6,2,'HOST','DEC')
  eslice_q0 = Getstore(cploc,7B8,2,'HOST','DEC')
  eslice_q1 = Getstore(cploc,7BA,2,'HOST','DEC')
  eslice_q2 = Getstore(cploc,7BC,2,'HOST','DEC')
  eslice_q3 = Getstore(cploc,7BE,2,'HOST','DEC')
  wss_q0 = Getstore(cploc,7C0,2,'HOST','DEC')
  wss_q1 = Getstore(cploc,7C2,2,'HOST','DEC')
  wss_q2 = Getstore(cploc,7C4,2,'HOST','DEC')
  wss_q3 = Getstore(cploc,7C6,2,'HOST','DEC')
  pre_q0 = Getstore(cploc,7C8,2,'HOST','DEC')
  pre_q1 = Getstore(cploc,7CA,2,'HOST','DEC')
  pre_q2 = Getstore(cploc,7CC,2,'HOST','DEC')
  pre_q3 = Getstore(cploc,7CE,2,'HOST','DEC')
  End
Return
/* CHANGES: Called routine.                                          */
/* Verify the changes that were entered and process if need be.      */
CHANGES:
 If row = 3 Then Do
   screen = text
   Return
   End
 If row = 2 & col = 71 Then Do
   c_cnt = text
   save_cnt = text
   Return
   End
 If row = 1 & col = 11 Then
   If updt_flg = 'ON ' & Queued() > 0 Then Do
      'EMSG   VMDBK003E: Userid cannot be changed with other updates'
      error_flg = 1           /* Used to Drop to rest of the queue */
      Return
      End
   Else Do
      vmuser = text
      Return
      End
 If updt_flg = 'OFF' Then Return
/* I know the rest of the queued records MUST be RES, so I will */
/* loop/read them here. I already read one - so push it back.   */
 Push flg row col text
 Do Queued()
    Pull flg row col text .
/* Modify the SHARE for the userid */
    If row = 2 Then Do
       If Pos('%',text) = 0 Then sharetype = 'RELATIVE'
       Else sharetype = 'ABSOLUTE'
       Parse value Diagrc(8,'SET SHARE' vmuser sharetype text) With qrc . qtext
       qtext = Substr(qtext,1,Length(qtext)-1)
       'EMSG   VMDBK004I:  RC('qrc')' Space(qtext)
       Iterate
       End
/* Modify the Secondary Userid for the userid */
    Else If row = 1 & col = 53 Then Do
       newsec = c2x(Substr(text,1,8))
       Parse Value Diagrc(8,'STORE HS'd2x(x2d(cploc)+x2d(4F0)) newsec),
             With qrc . qtext
       qtext = Substr(qtext,1,Length(qtext)-1)
       'EMSG   VMDBK004I:  RC('qrc')' Space(qtext)
       Iterate
       End
 End /* Do queued() */
Return
/* PFKEY: Called Routine.                                            */
/* Verifies and processes PF Keys that were pressed.                 */
PFKEY:
If row > 12 Then row = row - 12
Select
  When row = 3 Then exit_flg = 1
  When row = 6 Then Do
     cont_flg = 1
     save_cnt = c_cnt
     End
  When row = 7 Then screen = screen - 1
  When row = 8 Then screen = screen + 1
  When row = 12 & updt_flg = 'OFF' Then updt_flg = 'ON '
  When row = 12 & updt_flg = 'ON ' Then updt_flg='OFF'
  Otherwise 'EMSG   VMDBK005E: Undefined PF Key.'
  End
/* Adjust the screen number if we exceeded the limits */
If screen = 0 Then screen = 5
If screen = 6 Then screen = 1
Return
/* CLEAR_FIELDS: Called Routine                                      */
/* Clear the fields when no user location is found                   */
CLEAR_FIELDS:
vm. = 00
stat. = 0
fld. = off
secuser = Left(' ',8)
cpcmd = Left(' ',8)
cploc = Left(' ',6)
privclas = Left(' ',8)
priority = Left(' ',2)
If screen = 3 Then
  Parse Value ' ' With,
      linend linedel chardel escape vmout inredisp,
      inarea statarea cpout ipl_pointer ipl_len lastipl
Else If screen = 4 Then Do
  pfkey. = ''
  Parse Value ' ' With,
      console_io dasd_io other_io,
      outstand_io real_sio rdr_io pun_io prt_io
  End
Else If screen = 5 Then
  Parse Value ' ' With,
      page_faults page_lock page_res,
      max_res page_wait page_stolen page_writes page_reads wss,
      vm_pages_out vm_pages_in pref_slots nonpref_slots free_blocks,
      idle_q0 idle_q1 idle_q2 idle_q3,
      eslice_q0 eslice_q1 eslice_q2 eslice_q3,
      wss_q0 wss_q1 wss_q2 wss_q3 pre_q0 pre_q1 pre_q2 pre_q3
Return
/* SET_DISPLAY: Called Routine                                       */
/* Check the various flag bits and set the screen characteristics    */
/* depending if they bit is high (1) or low (0).                     */
SET_DISPLAY:
 flag = x2c(vm.i)
 Do x = 1 to 8
   If Bitand(flag,cmpr.x) = cmpr.x Then Do
      stat.i.x = 1
      fld.i.x = on
      End
   Else Do
      stat.i.x = 0
      fld.i.x = off
      End
   End
Return
/* EXTENDED: Called Routine                                          */
/* Process the CP SCREEN characteristics for the userid.             */
EXTENDED:
Procedure Expose colorlist extendlist
Arg byte
extended = Substr(byte,1,1) + 1
color = Substr(byte,2,1) + 1
Return Word(extendlist,extended) Word(colorlist,color)
/* PFKEY_TEXT: Internal Function                                     */
/* Used to verify and build the userids PF Key settings.             */
PFKEY_TEXT:
 Procedure Expose pfk_table
 Arg key
 offset = d2x((key-1)*4)
 pfk_addr = Getstore(pfk_table,offset,4,'HOST','HEX')
 If pfk_addr == '00000000' Then Return '...Not set...'
 pfk_flag = Getstore(pfk_addr,9,1,'HOST','HEX')
 setting = ''
 If Bitand(pfk_flag,80) = 80 Then setting = setting 'IMMED'
 If Bitand(pfk_flag,40) = 40 Then setting = setting 'DELAY'
 If Bitand(pfk_flag,20) = 20 Then setting = setting 'NODISP'
 If Bitand(pfk_flag,10) = 10 Then setting = setting 'SUBSTITU'
 If Bitand(pfk_flag,08) = 08 Then setting = setting 'TAB'
 If Bitand(pfk_flag,04) = 04 Then setting = setting 'RETRIEVE'
 If Bitand(pfk_flag,02) = 02 Then setting = setting 'COPY'
 If pfk_flag <= 8 Then Return Space(setting)
 pfk_len = Getstore(pfk_addr,'E',2,'HOST','DEC')
 pfk_text = Getstore(pfk_addr,10,pfk_len,'HOST','CHAR')
 Return Space(setting) Space(pfk_text)
/* SYNTAX: General syntax error processing.                          */
SYNTAX:
Parse source . . name .
Say 'VMDBK PROCESSING ERROR!'
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** The above line returned a code of' rc
'QQUIT'
Exit rc
/* GETSTORE: Interal Function                                         */
/* Function:   To return a portion of CP Displayable storage.         */
/*             Maintains integrity in the address - no alignment      */
/*             required by user.                                      */
/* Format:     GETSTORE(address,displace,length,type,HEX|DEC|CHAR)    */
/*                                                                    */
/*  > address (in hex) is the location to begin at                    */
/*  > displace (in hex) is the offset to add to address               */
/*  > length (in dec) is the number of bytes to return                */
/*  > type is the CP area to address to.                              */
/*       null = The users 370 machine storage                         */
/*       Host = Host storage                                          */
/*  > HEX|DEC|CHAR are the options to have the results returned in.   */
/*       HEX is the default.  DEC returns the numeric value.          */
/*       CHAR returns the bytes translated to character format.       */
GETSTORE:
 Procedure
 Arg addr , disp , len , type , form .
 If Abbrev('HOST',type,1) Then type = 'H'
 Else type = ''
 addr = d2x(x2d(addr)+x2d(disp))
 test_nibble = Substr(addr,Length(addr))
 num_words = len % 4 + 1
 If Find('0 4 8 C',test_nibble) = 0 Then num_words = num_words + 1
 string = ''
 Do num_words
   Parse value Diag(8,'DISPLAY 'type||addr) With . word .
   string = string||word
   addr = d2x(x2d(addr)+4)
   End
 start = Translate(test_nibble,'1357135713571357','0123456789ABCDEF')
 result = Substr(string,start,len*2)
 If form = 'DEC' Then result = x2d(result)
 Else If form = 'CHAR' Then result = x2c(result)
 Return result

J
ames S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1990
