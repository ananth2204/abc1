VMDBK display for VM/XA

The VMDBK in VM/XA SP is the 'old' VMBLOK in VM/SP
and VM/HPO, except much larger.  We have been using a
VMBLOK display routine that was published in VM Update
issue 32 (April 1989).  That was great for HPO systems, but
once we converted all our VM/HPO systems to VM/XA SP,
the VMBLOK utility stopped working because of the new
VMDBK format and the CP DISPLAY command changes.

I developed a new VMDBK routine, with a REXX XEDIT
macro, that will display flag bytes, counters, and other CP data
areas in a users' VMDBK.  It works best on a colour terminal
since the bit text fields that are 'on' are set to a different colour
than the ones that are 'off'.  This utility is extremely useful for
user-id problem determination!

Figures 1 through 5 show the different screens you get with the
new VMDBK routine.  The format of the command is:

    VMDBK  userid  screen_num

Both parameters are optional.  User-id defaults to the user-id
running the routine if not supplied.  Screen_num can be any
number from 1 to 5 so that you can display particular screens
directly (default screen is 1).  VMDBK will also allow you to
change the user-id or the SHARE field for the user-id on the
screen by using the PF12 key for UPDATE mode.

The routine is currently used on a VM/XA SP2 system at PUT
8902.  It should work at any level of VM/XA SP.  It does
require privilege class C or E, or equivalent, for the DISPLAY
HOST command.  Optionally, class A or equivalent, is needed
to issue the SET SHARE command.

The VMDBK routine is made up of VMDBK EXEC, which
invokes PROFVMDB XEDIT; PROFVMDB contains all the
code that generates the screens for VMDBK.  The 'heart' of the
entire routine is the internal REXX function GETSTORE
located at the end of the PROFVMDB XEDIT code.  This
function is very useful in other EXECs that need CP storage
areas displayed.  I have made GETSTORE into an external
REXX function and have used it in many of our system EXECs
that use CP storage areas.  It saves many headaches since it
will convert non-aligned addresses, and also convert the result
into a format that you can use directly!

As with any REXX EXEC, I would recommend keeping the
original on a source disk, and create an executable copy by
stripping out the blank lines, comments, and compressing it
(VM Update issue 46 contains an example of compressing
REXX EXECs).  If you have a REXX compiler, PROFVMDB
XEDIT is a great candidate!


VMDBK EXEC

/* Format:     VMDBK  userid  page_display                            */
/* Function:   To invoke the VMDBK display (PROFVMDB XEDIT)           */
Arg vmid page .
If vmid = '' Then vmid = Userid()
If page = '' | page > 5 | page < 1 Then page = 1
Address Command 'XEDIT ADUMMY FILE A (PROFILE PROFVMDB)' vmid page
Exit


