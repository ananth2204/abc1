Remove comments from a REXX EXEC

There are a number of circumstances under which it is useful to
remove all comments from a REXX EXEC. When an EXEC is
to be EXECLOADed, the comments will occupy storage.
Removing them will produce a corresponding reduction in the
size of the EXECLOADed version of the EXEC.  This is
particularly valuable if the EXEC is to be included in a DCSS
(eg CMSINST).

Another use is when an EXEC is to be distributed to users who
cannot be completely trusted. While the EXEC will continue to
run, the absence of comments will make it harder to decipher
and modify the EXEC.

The XEDIT macro below includes a number of options which
allow its operation to be controlled.

It is invoked by entering:

   UNCOMENT <Keep|Delete|Strip> <Unindent|Indent> <Test>

where:

o      Keep indicates that blank lines which result from removing
      comments are to be retained, thus giving the old and new
      EXECs the same number of lines. The cost, in disk and
      memory, of using this option is rather small.

o      Delete indicates that blank lines which result from
      removing comments are to be deleted.

o      Strip indicates that blank lines which result from removing
      comments are to be deleted. Furthermore, any original
      blank lines are also deleted.

o      Indent indicates that indentation is to be retained.

o      Unindent indicates that indentation is to be removed.

o      Test indicates that the UNCOMENTed EXEC is to be
      written to disk and executed with 'trace s' in effect. There
      will be no output unless there is a syntax error in the
      EXEC. If any errors are detected, the fault should
      theoretically lie with the EXEC as originally written.

The default values are STRIP and UNINDENT.

/*                  Remove comments from a REXX EXEC
This XEDIT macro removes all comments from a REXX EXEC, resulting in an
identically functioning EXEC which occupies less space on disk and in
memory.  This latter factor is particularly nice when the EXEC is to be
EXECLOADed and/or when trying to minimize the EXEC's working set.
Special considerations:
   1. The first line of all REXX EXECs must be a comment.  Therefore,
      this macro cannot delete it.  Instead, it is replaced with a
      standardized comment.  I hope you like it.
   2. If the EXEC contains a "Last updated" line, its contents are saved
      and placed in the comment at line 1.
   3. An EXEC, also named UNCOMENT, may be used to invoke this macro in
      a "batch" manner from the CMS command line.  There is an interface
      between the EXEC and this macro to facilitate this.
Cautions:
   1. The author of this macro is not responsible for the results of
      this macro when it is used with an EXEC which violates the REXX
      syntax rules such as:
         continuation lines
         unmatched apostrophes and quotes
         extraneous end of comment characters
    2. While there are no known genuine bugs, there is always the
       possibility that someone will do something which is strange but
       legitimate as far as REXX is concerned but this program handles
       improperly.  There could also be problems with comments inside
       quotes inside nested comments, etc.
    3. This macro has been known to reveal bugs in the target EXEC.  For
       example:
          a. A statement (supposedly) ends with a comma, and the
             next statement is a comment.  This is harmless as
             originally found, but the removal of the comment causes the
             following statement to be appended to the one before it
             with unpredictable results.
          b. An EXEC ends with an outstanding comment.  This situation
             may or may not be detected by REXX.  This macro will detect
             the situation and issue an appropriate message.          */
/*  Preliminary parameter stuff                                       */
arg x .                                                /*  trial run  */
if x = '?' then do
   MSG 'UNCOMENT <Keep|Delete|Strip> <Unindent|Indent> <Test>'
   exit 0
   end
if x = '01'x then do        /*  internal invocation by UNCOMENT EXEC  */
   called_by_exec = 1
   arg . fn ft fm parms
                 /*  There is extra stuff prior to the standard parm  */
   fileido = fn ft fm        /*  output file-id to be used with FFILE */
   end
else do
   called_by_exec = 0
   arg parms
   end
/*  Edit the parameters                                               */
option_delete   = 'STRIP'                            /*  the default  */
option_test     = 0
option_unindent = 1
do while parms Â¬= ''
   parse var parms x parms
   select
      when abbrev('DELETE'  ,x,1) then option_delete   = 'DELETE'
      when abbrev('INDENT'  ,x,1) then option_unindent = 0
      when abbrev('KEEP'    ,x,1) then option_delete   = 'KEEP'
      when abbrev('STRIP'   ,x,1) then option_delete   = 'STRIP'
      when abbrev('TEST'    ,x,1) then option_test     = 1
      when abbrev('UNINDENT',x,1) then option_unindent = 1
      otherwise
         EMSG 'Invalid parameter "' || x || '"'
   end   /*  select  */
end
/*  Build a goofy little array which will be used later to convert:
       0 to 99999999
       n to n
    It can be used to update the output of the "pos" function so an
    unmatched string will result in 99999999 rather than 0.           */
EXTRACT '/LRECL/RECFM/SIZE/'
translate.0 = 99999999
do i = 1 to lrecl.1
   translate.i = i
end
if recfm.1 = 'F' then
   EMSG 'Changing this EXEC to RECFM V is strongly recommended'
/*  Miscellaneous preliminaries                                       */
comments_removed = 0
lines_deleted    = 0
nest_level       = 0                         /*  for nested comments  */
open_apost       = 0
open_quote       = 0
PRESERVE
SET 'CASE   MIXED'  /* Don't translate to upper case during REPLACE   */
SET 'HEX    OFF'    /* Don't translate hex if X'xx' during REPLACE    */
SET 'LINEND OFF'    /* Allow LINEND chars to be embedded in the file  */
SET 'IMAGE  OFF'    /* Don't mess with backspace and tab chars        */
SET 'TABS   1'      /* Begin at column 1 during REPLACE and FIND      */
SET 'TRUNC  *'      /* Don't truncate during REPLACE                  */
/*  Save the "Last updated" line if one exists                        */
SET 'MSGMODE OFF'                         /*  in case the FIND fails  */
':0 FIND Last updated'
if rc = 0 then do
   EXTRACT '/CURLINE/'
   x = pos('*/',curline.3)
   if x = 0 then
      last_updated_line = curline.3
   else
      last_updated_line = left(curline.3,x-1)
   end
else
   last_updated_line = ''
/*  There should be no XEDIT messages from now on.  So if there are,
    we want to know about it.                                         */
SET 'MSGMODE ON'
TOP
/*  Get down to work                                                  */
call time 'R'
do line = 1                                            /*  until EOF  */
   if time('E') > 60 then do
      x = (line - 1) / size.1 * 100                            /*  %  */
      MSG time()right(line-1,6) 'lines ('right(format(x,3,0),2)'%)' ,
         'have been UNCOMENTed so far'
      call time 'R'
      end
   if nest_level < 0 then
      EMSG 'Internal error in UNCOMENT at line' line':' line ,
         'Nest level is negative'
   '+1 EXTRACT /CURLINE/EOF/'
   if eof.1 = 'ON' then
      leave
   this_line = curline.3
   working_col = 1                        /*  Start work at column 1  */
   do forever     /*  Until there is no more work to do on this line  */
      apost_col         = pos('''',this_line,working_col)
      start_comment_col = pos('/*',this_line,working_col)
      end_comment_col   = pos('*/',this_line,working_col)
      quote_col         = pos('"' ,this_line,working_col)
      /*  Check to see if there is an open apostrophe, quote or
          comment which needs to be completed                         */
      if open_apost then do
         if apost_col = 0 then
                              /*  no closing apostrophe on this line  */
            iterate line                            /*  Keep looking  */
         open_apost = 0
         working_col = apost_col + 1
         iterate
              /*  Continue processing this line after the apostrophe  */
         end
      if open_quote then do
         if quote_col = 0 then     /*  no closing quote on this line  */
            iterate line                            /*  Keep looking  */
         open_quote = 0
         working_col = quote_col + 1
         iterate   /*  Continue processing this line after the quote  */
         end

     if nest_level > 0 then do         /*  There is an open comment  */
      if translate.start_comment_col < translate.end_comment_col then do
            /*  Nested comments detected across multiple lines        */
            nest_level = nest_level + 1
            /*  Strip everything thru the start of the nested comment */
            this_line = substr(this_line,start_comment_col+2)
            end_comment_col = pos('*/',this_line,1)  /*  Recalculate  */
            end
         if end_comment_col = 0 then do
        /*  The comment continues on this line but does not end here  */
            this_line = left(this_line,working_col-1)
                                           /*  Get rid of it (below)  */
            leave
            end
         /*  We have found the end of a comment                       */
         /*  Strip everything thru the end of the comment             */
         this_line = substr(this_line,end_comment_col+2)
         comments_removed = comments_removed + 1
         nest_level = nest_level - 1
         iterate    /*Continue processing this line after the comment */
         end
      /*  There is no open apostrophe, quote or comment.  Now we can
          look for the start of a new apostrophe, quote or comment.   */
      if apost_col + quote_col + start_comment_col = 0 then do
         if end_comment_col > 0 then
            EMSG 'Unmatched */ characters found in line' line
         leave                /*  Nothing useful remains on the line  */
         end
      min_col = min(translate.apost_col,translate.quote_col,
                                            translate.start_comment_col)
      next_col = min_col + 1  /*  multi-purpose variable for brevity  */
      if min_col = apost_col then do
         open_apost = 1
         working_col = next_col
         iterate
              /*  Continue processing this line after the apostrophe  */
         end   /*  apostrophe  */

      if min_col = quote_col then do
         open_quote = 1
         working_col = next_col
         iterate   /*  Continue processing this line after the quote  */
         end   /*  apostrophe  */
      if min_col = start_comment_col then do
         nest_level = nest_level + 1
         call strip_line_comments
         if this_line = '' then
                          /*  just comments (complete or incomplete)  */
            leave             /*  Nothing useful remains on the line  */
         iterate    /*Continue processing this line after the comment */
         end   /*  start of comment  */
      EMSG 'Internal error in UNCOMENT at line' line':' ,
         apost_col quote_col start_comment_col min_col ,
         open_apost open_quote nest_level
   end
   /*  One line has now been processed - What should we do with it?   */
   select
      when this_line = curline.3 then do               /*  no change  */
         if curline.3 = '' then
            if option_delete = 'STRIP' then
               call delete_this_line
            else
               nop
         else
            if option_unindent & left(this_line,1) = ' ' then
               call replace_this_line
         end
      when this_line = '' then
                                   /*  We got rid of the whole thing  */
         call delete_this_line
      otherwise /*  We stripped a comment from a portion of the line  */
         call replace_this_line
   end   /*  select  */
end
/*  Place a proper comment on the first line                          */
EXTRACT '/FNAME/FTYPE/'
top_comment = '/* ' strip(fname.1) strip(ftype.1) ,
                            'has been UNCOMENTed' ,'on' date('U') time()
if last_updated_line = '' then
   top_comment = top_comment ' */'
else
   top_comment = top_comment'   'strip(last_updated_line) ' */'
if option_delete = 'KEEP' then do
   SET 'MSGMODE OFF'
           /*  Avoid DMSXCG517I 1 occurrence(s) changed on 1 line(s)  */
   ':1 CHANGE \\' || top_comment || '\'
   end
else
   ':0 INPUT' top_comment
top_rc = rc
/*  Let the operator know how it went                                 */
RESTORE
select                           /*  How did the CHANGE or INPUT go?  */
   when top_rc = 0 then
      nop
   when top_rc = 3 then do
      EMSG '<<<<< The comment at line 1 has been truncated >>>>>'
      MSG  'Rerun UNCOMENT while the file has a larger LRECL'
      end
   otherwise
      EMSG 'CHANGE or INPUT return code' rc 'when building line 1'
end
if open_apost     then EMSG 'Unmatched apostrophe detected'
if open_quote     then EMSG 'Unmatched quote detected'
if nest_level > 0 then EMSG 'Unmatched /* detected'
if nest_level < 0 then EMSG 'Extra /* detected'
                     /*  Could this be an error in this macro (too)?  */
totals_message = comments_removed 'comments have been removed  ' ,
   lines_deleted 'lines have been deleted'
MSG totals_message
TOP
/*  Test the EXEC if specified                                        */
if Â¬ option_test then
   signal thats_all_folks
MSG 'Now testing the UNCOMENTed EXEC'
REFRESH
MSG totals_message
        /*  Repeat after REFRESH so it's also visible after the test  */
/*  We don't want to use SAVE here because that would reset the ALT
    counter                                                           */
fileid = 'UNCOTEST EXEC A3'
address COMMAND 'ERASE' fileid
EXECIO '1 DISKW' fileid '0 V (FINIS STRING' top_comment ,
   'address COMMAND ''SET CMSTYPE HT''; trace s'
':2 PUT *' fileid
EXEC 'UNCOTEST'
if rc = 0 then
   MSG 'The test has been successful'
else
MSG 'Oh oh.  The new EXEC doesn''t work right.  It can''t be my fault, can it?'
TOP
/*  That's all folks                                                  */
thats_all_folks:
if called_by_exec then
   FFILE fileido
exit 0
/*  ----------------------------------------------------------------  */
/*                         Subroutines                                */
/*  ----------------------------------------------------------------  */
/*  This line deserves to be deleted                                  */
delete_this_line:
if option_delete = 'KEEP' then
   'REPLACE  '
else do
   DELETE
   UP
   lines_deleted = lines_deleted + 1
   end
return
/*  This line deserves to be replaced                                 */
replace_this_line:
if option_unindent then
   this_line = strip(this_line,'L')
REPLACE this_line
return
/*  Strip all comments contained in a single line                     */
strip_line_comments:
working_col = start_comment_col + 2
                               /*  the end + 1 column to be stripped  */
do forever                             /*  until the end of the line  */
scc = pos('/*',this_line,working_col)     /* the next starting comment column */
   ecc = pos('*/',this_line,working_col)
   if scc + ecc = 0 then                                 /*  neither  */
      leave
   scc = translate.scc
   ecc = translate.ecc
   if scc < ecc then                 /*  start of a (nested) comment  */
      nest_level = nest_level + 1
   else do             /*  end of a comment (not necessarily nested)  */
      nest_level = nest_level - 1
      comments_removed = comments_removed + 1
      end
   working_col = min(scc,ecc) + 2
   if nest_level = 0 then                        /*  end of comments  */
      leave                      /*  There may be data which follows  */
end
x = working_col - start_comment_col  /* number of bytes to be removed */
/*  Completely remove all completed comments + start of uncompleted   */
this_line = delstr(this_line,start_comment_col,x)
working_col = working_col - x
                          /*  Adjust for the number of bytes deleted  */
return

Dave Fraatz
Specialist
3M (USA)

