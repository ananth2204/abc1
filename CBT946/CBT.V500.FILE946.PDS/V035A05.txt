Nucleus load map and symbol table

Many EXECs and programs have been written to issue a DCP
(Dump CP storage) command in order to gain access to very
useful information not otherwise provided by a VM command.
These EXECs usually start out with the statement, "Find the
address of DMKsmthg in your CP load map and substitute it into
this EXEC.  You will have to do this whenever you generate a
new CP nucleus."

This works well, but becomes a real chore when you have a
number of these handy EXECs that need to be edited each time a
new nucleus is generated.  The CP load map is a print file that is
created whenever a new VM nucleus is generated.  This listing,
usually spooled back to MAINT's reader and subsequently read to
disk, contains the name of each module that constitutes the
nucleus.  It shows the real storage address where each module and
entry point will be located when the newly created nucleus is
eventually IPLed.  It is the VM equivalent of the VSE Linkage
Editor map.  The entry points into various nucleus modules can
and do change any time a module is reassembled, depending on
what sysgen options have been specified, whether a PUT or PTF
has been applied or when a local modification has been installed.
Fortunately, the CP load map is not the only place where this
information is kept.  As part of the CP nucleus, the symbol table
contains some of these VM module names and their storage
addresses.  VM also provides a diagnose instruction to allow class
C or class E users to obtain a copy of this symbol table without
having to read the rather lengthy load map.

The biggest problem with the symbol table is that it is limited to
only a single page (4K bytes).  Since not all of the points of
interest will fit into 4K, many performance monitor packages
resort to reading the CP load map and building their own symbol
table.  This, too, has to be done every time a nucleus is generated.

However, many of the areas of interest may be obtained from the
symbol table as well as the load map.  If an EXEC can get its
information dynamically, the amount of editing required after a
nucleus generation may be reduced.

The GETSYM program, shown here, will obtain a copy of the
current symbol table by using the Diagnose X'38' instruction.  If a
valid VM symbol name was included on the command line, it will
search the symbol table for that symbol and, if found, will either
display the real storage address or push the address onto the
console stack.  If the symbol name is omitted, each entry in the
symbol table and its address is displayed or stacked.  By
incorporating GETSYM in EXECs designed to investigate CP
storage, it is possible to create EXECs that can examine VM
nucleus data without having to change the EXECs each time a
nucleus is generated.

         TITLE 'GETSYM - RETURN VALUE OF VM SYMBOL TABLE ENTRY'
         PRINT NOGEN
GETSYM   CSECT
* Invoked: GETSYM symbol < (option >                                  *
*          The symbol parameter should be the name of the symbol      *
*            table entry to be retrieved.                             *
*          If symbol is omitted, all symbols in the table are typed   *
*             or stacked.                                             *
*          The option may be either LIFO, FIFO or STACK (which is     *
*             equivalent to FIFO), to specify that the results are    *
*             to be placed in the console stack instead of being      *
*             typed on the terminal.                                  *
*          The format of the terminal or stack data is:               *
*             * symbol = address                                      *
* Requires class C or class E priviledge to issue DIAG X'38'.         *
*    Return code 0  - Normal.  Results typed or stacked.              *
*    Return code 4  - Too many symbol keys or invalid option.         *
*    Return code 8  - Insufficient authorization for command.         *
*    Return code 16 - Symbol not found in VM Symbol Table.            *
*    For non-zero return codes, nothing is stacked.                   *
* When assembling this module, be sure to GLOBAL the OSMACRO MACLIB,  *
* to include SPIE macro.  For example:                                *
*              GLOBAL   MACLIB DMSSP CMSLIB OSMACRO                   *
*              ASSEMBLE GETSYM                                        *
*              LOAD     GETSYM (NOMAP                                 *
*              GENMOD   GETSYM                                        *
*                                                                     *
* This program was developed and tested under VM/SP release 5.        *
         REGEQU
         STM   R14,R12,12(R13)    SAVE ENTRY REGS
         LR    R12,R15            LOAD PRIMARY BASE REG
         USING GETSYM,R12
         ST    R13,REGSAVE+4      SAVE R13
         LA    R13,REGSAVE        POINT AT OUR SAVE AREA
         MVC   SYMKEY,BLANKS      CLEAR SYMBOL KEY
         XC    RTNCODE,RTNCODE    CLEAR RETURN CODE
         MVI   STATSW,0           INIT SWITCH
*                     Parse parameters from PLIST                     *
         LA    R2,8(,R1)          POINT AT FIRST PLIST PARM
         CLC   OPTDELIM,0(R2)     OPTION DELIMITER?
         BE    GETOPT10           YES - NO KEY - DO ALL
         CLC   PARMEND,0(R2)      END?
         BE    GETOPT40           YES - NO OPTION SPECIFIED
         MVC   SYMKEY,0(R2)       COPY SYMBOL NAME INTO KEY
 SPACE
         LA    R2,8(,R2)          NEXT PARM
         CLC   PARMEND,0(R2)      END?
         BE    GETOPT40           YES - NO OPTION SPECIFIED
         CLC   OPTDELIM,0(R2)     OPTION DELIMITER?
         BNE   ERR001             NO - TOO MANY KEYS
GETOPT10 EQU   *
         LA    R2,8(,R2)          SKIP DELIMITER
         MVC   ATTNOPT,0(R2)      SAVE STACK OPTION
         CLC   =CL8'LIFO',0(R2)   STACK OPTION?
         BE    GETOPT20           YES
         CLC   =CL8'FIFO',0(R2)   STACK OPTION?
         BE    GETOPT20           YES
         CLC   =CL8'STACK',0(R2)  STACK OPTION?
         BNE   ERR003             NO - INVALID
         MVC   ATTNOPT,=CL8'FIFO' ASSUME FIFO
GETOPT20 EQU   *
         OI    STATSW,STAKOPT     REMEMBER OPTION
 SPACE
         LA    R2,8(,R2)          SKIP DELIMITER
         CLC   PARMEND,0(R2)      END?
         BNE   ERR002             NO - TOO MANY OPTIONS
GETOPT40 EQU   *
*     Compute symbol table buffer address start and end addresses     *
         LA    R1,GETSYM+2048     COMPUTE BUFFER START ADDRESS
         LA    R1,2048(,R1)
         ST    R1,BUFSTRT         SAVE START ADDRESS
         LA    R1,2048(,R1)       COMPUTE BUFFER END ADDRESS
         LA    R1,2048(,R1)
         ST    R1,BUFEND          SAVE START ADDRESS
* Setup a SPIE exit in case DIAG fails                                *
         LA    R1,ERR005          POINT AT ERROR EXIT
         SPIE  (R1),(2)           TAKE PRIV OP EXIT IF NECESSARY
*             Issue Diagnose X'38 to read CP symbol table             *
         L     R2,BUFSTRT         POINT AT SYMBOL TABLE BUFFER
         DIAG  R2,R4,X'0038'      ISSUE DIAG X'38' - READ SYMBOL TBL
*           Scan symbol table looking for appropriate entry           *
         L     R2,BUFSTRT         POINT AT BUFFER AGAIN
         L     R5,BUFEND          POINT AT END OF BUFFER
         LA    R4,12              DECREMENT BY 12
SCNSYM   EQU   *
         CLC   =F'0',0(R2)        END OF SYMBOL TABLE?
         BNE   SCNSYM10           NO
         CLC   SYMKEY,=CL8' '     ARE WE DOING ALL SYMBOLS?
         BNE   ERR006             NO - SYMBOL NOT FOUND
         B     NORMRTN            YES - NORMAL RETURN
SCNSYM10 EQU   *
         CLC   SYMKEY,=CL8' '     ARE WE DOING ALL SYMBOLS?
         BE    SCNSYM20           YES
         CLC   SYMKEY,0(R2)       GOT THE SYMBOL?
         BE    SCNSYM20           YES
         BXLE  R2,R4,SCNSYM       NEXT
         B     ERR006             MUST NOT HAVE FOUND IT
SCNSYM20 EQU   *
* Edit the symbol table entry and address and display it, if required *
         L     R6,8(,R2)          GET ADDRESS OF SYMBOL (R6)
         LA    R7,MASKIN          POINT AT INPUT MASK
         LA    R8,MASKOUT         POINT AT OUTPUT MASK
         LINEDIT TEXTA=(R7),RENT=NO,                                   C
               SUB=(CHARA,(R2),HEX,(R6)),                              C
               DISP=NONE,DOT=NO,COMP=NO,                               C
               BUFFA=(R8)
         TM    STATSW,STAKOPT     STACK ONLY?
         BO    SCNSYM30           YES - SKIP THE MESSAGE
         LINEDIT TEXTA=(R8),RENT=NO,DISP=TYPE,DOT=NO,COMP=NO
         B     SCNSYM40
SCNSYM30 EQU   *
*              Place the entry on the stack, if required              *
         MVC   ATTNDLEN,MASKOUT   COPY LENGTH
         LA    R1,MASKOUT+1       POINT AT DATA TO STACK
         STCM  R1,B'0111',ATTNDADR STORE ADDRESS IN PLIST
         LA    R1,ATTNPLST        POINT AT PLIST
         CNOP  2,4
         SVC   202                CALL CMS
         DC    AL4(1)             NO ERROR ROUTINE
SCNSYM40 EQU   *
         CLC   SYMKEY,=CL8' '     ARE WE DOING ALL SYMBOLS?
         BNE   NORMRTN            NO
         BXLE  R2,R4,SCNSYM       NEXT
NORMRTN  EQU   *
         XC    RTNCODE,RTNCODE
         B     RETURN
ERR001   EQU   *
         MVI   RTNCODE+1,4
         LINEDIT TEXT='GETSYM001E Too many symbols specified',         C
               DISP=ERRMSG,DOT=NO
         B     RETURN
ERR002   EQU   *
         MVI   RTNCODE+1,4
         TM    STATSW,STAKOPT     STACK ONLY?
         BO    RETURN             YES - NO MESSAGE
         LINEDIT TEXT='GETSYM002E Too many options specified',         C
               DISP=ERRMSG,DOT=NO
         B     RETURN
ERR003   EQU   *
         MVI   RTNCODE+1,4
         TM    STATSW,STAKOPT     STACK ONLY?
         BO    RETURN             YES - NO MESSAGE
         LINEDIT TEXT='GETSYM003E Invalid option - ........',          C
               DISP=ERRMSG,SUB=(CHARA,(R2)),DOT=NO
         B     RETURN
ERR005   EQU   *
         MVI   RTNCODE+1,8
         TM    STATSW,STAKOPT     STACK ONLY?
         BO    RETURN             YES - NO MESSAGE
         LINEDIT TEXT='GETSYM005E Insufficient authorization',         C
               DISP=ERRMSG,DOT=NO
         B     RETURN             RETURN TO CMS
ERR006   EQU   *
         MVI   RTNCODE+1,16
         TM    STATSW,STAKOPT     STACK ONLY?
         BO    RETURN             YES - NO MESSAGE
         LINEDIT TEXT='GETSYM006E Symbol not found - ........',        C
               DISP=ERRMSG,SUB=(CHARA,SYMKEY),DOT=NO
         B     RETURN             RETURN TO CMS
RETURN   EQU   *
         L     R13,4(,R13)        RESTORE SAVE AREA POINTER
         LH    R15,RTNCODE        FETCH STORED RETURN CODE
         ST    R15,12+4(R13)      SAVE RETURN CODE FOR RELOAD
         LM    R14,R12,12(R13)    RESTORE ENTRY REGS
         BR    R14                RETURN TO CMS
 SPACE
REGSAVE  DS    9D                 OUR SAVE AREA
 SPACE
ATTNPLST DC    CL8'ATTN'          CMS FUNCTION TO PLACE LINE IN STACK
ATTNOPT  DC    CL4'LIFO'          PUSH IT OR QUEUING IT
ATTNDLEN DC    AL1(0)             LENGTH OF LINE TO STACK
ATTNDADR DC    AL3(0)             ADDRESS OF LINE TO STACK
 SPACE
BUFSTRT  DS    F
BUFEND   DS    F
 SPACE
SYMKEY   DC    CL8' '             SYMBOL TABLE KEY
PARMEND  DC    XL8'FFFFFFFFFFFFFFFF'
OPTDELIM DC    CL8'('
BLANKS   DC    CL8' '
 SPACE
RTNCODE  DC    H'0'
STATSW   DC    X'00'
STAKOPT  EQU   B'10000000'
MASKIN   DC    AL1(19),CL19'* ........ = ......'
MASKOUT  DC    AL1(19),CL19' '
         LTORG
 SPACE
*              Page-aligned Buffer Area for Symbol Table              *
         ORG   GETSYM+4096
         DC    4096X'00'
         END

Tom R Donnelly
Systems Programmer
Loral EOS (USA)	) Loral EOS 1989


