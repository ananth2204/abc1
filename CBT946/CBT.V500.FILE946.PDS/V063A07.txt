Directory maintenance

The purpose of this software package is to automate operations
on the CP directory, and to reduce the systems programmer's
actions to a minimum, while taking the reponsibility of doing
all the necessary checks to the input provided by the systems
programmer.  One can ADD new users, DELETE users, or
MODIFY users' directory entries, either as a LIST or for a
SINGLE user.

In case errors occur while performing I/O, it will try to roll
back the job.  It will log errors in the file USERS
ERRORLOG, and will print appropriate messages and
warnings, with suggestions.  Among other things, it will
automatically produce a new DISKMAP every time changes
are made to the CP directory.

All systems programmer's input is thoroughly checked, in two
respects.  First, it may be not be what is expected.  In this
case, the systems programmer is informed and prompted for
the correct input.  Second, the errors are hidden from the
systems programmer, and then the software takes responsibility
on his/her behalf.  It checks, among other things, for:

o      Duplicate names in a list

o      New user-ids that match the ones already in CP directory

o      User-ids that do not exist on CP directory

o      The sufficiency of gap size to add new users (or modify)

o      The integrity of the DISKMAP when adding new users (modify)

o      Various other less important errors.

As such, this software completely replaces the two IBM
provided machines, DIRMAINT and DATAMOVE.  It offers
numerous advantages.  For one thing, the IBM machines must
be constantly running, consuming system resources.  Their
maintenance is a pain for the systems programmer, which
counterbalances their usefulness.  Furthermore, this software
operates far more efficiently, especially when dealing with lists
of users, which is the case most of the time.

An especially novel feature of this software is that it will
automatically format new users' mini-disks and give them a
PROFILE EXEC.  In the past, the systems programmer had to
manually log on to every user's machine and perform several
tasks.  This software completely eliminates the need to do
anything beyond giving it two or three pieces of information,
when prompted.


LIST OF FILES

The following files are on MAINT's FFF disk, accessed as A
when MAINTDIR EXEC is used.  MAINT's 191 disk is
accessed as C.

o      MAINTDIR EXEC
o      DESTRUCT EXEC
o      PROFILE STUDENT
o      GENERIC USERLIST
o      USER DISKMAP
o      USER DIRECT
o      BRINGUP EXEC
o      SORTDIR EXEC.

In addition to these files, two special machines are needed.
The password for both machines is STUDENT.  One machine
is called DSKMOVER and is used in the MODIFY module.
The second machine is called DISKFORM, and is used in the
ADD module.  It formats the allocated space before adding
users.  This is necessary since a previous PROFILE EXEC may
interfere with MAINTDIR's operation.  This machine is similar
to DSKMOVER.


DSKMOVER DIRECTORY

  USER DSKMOVER STUDENT 1M 2M G
  INCLUDE STUDENT        ( These are usual links, etc.  )
  MDISK 191 FB-512 265624 96 VMPK01 RR

Whatever the mini-disk statement, it must also include MAINT
in MR mode :

  MDISK 502 FB-512 265624 96 VMPK01 MR

There is one file on DSKMOVER's 191 disk called PROFILE EXEC.


MAINTDIR'S PROFILE

'MAKEBUF'
'SET CMSTYPE HT'
'ACCESS 193 C/A'      /*       OLD USER DISK                      */
'Q DISK C ( STACK'
PULL                  /*       HEADER                             */
PULL LABEL .  .  .  .  .  BLKSIZE .  .  .  BLKTOTAL
SIZE = (BLKSIZE / 512) * BLKTOTAL   /* NO OF BLKS IN 512 BYTES */
'EXECIO 0 CP ( STRING DEFINE TFB-512 AS 192 BLK' SIZE
PUSH 'CMS192'
PUSH '1'
'FORMAT 192 B'
'ACCESS 192 B'        /* NOT NEEDED, BUT LEAVE JUST IN CASE       */
'COPY * * C = = B'    /* COPY USER'S FILES TO TEMP DISK           */
PUSH LABEL            /* FORMAT WITH USER'S OLD LABEL             */
PUSH '1'
'FORMAT 194 D'        /* NEW USER'S DISK                          */
'ACCESS 194 D'
'COPY * * B = = D'    /* TRANSFER USER'S FILE TO THE NEW DISK     */
'DROPBUF'
'LOG'                 /* LOGOFF DSKMOVER MACHINE                  */
EXIT


MAINTDIR'S PROFILE EXEC

'MAKEBUF'
'ACCESS 192 B'
PUSH 'CMS192'
PUSH '1'
'FORMAT 192 B'
'DROPBUF'
'LOG'
EXIT

Both machines, DSKMOVER and DISKFORM are autologged
by MAINTDIR by invoking BRINGUP EXEC.  In order to
make modifications to the above lines in their PROFILE
EXEC, link to their 191 disk from MAINT in W mode.


DESCRIPTION OF FILES AND EXECS

MAINTDIR EXEC

This is the main program.

DESTRUCT EXEC

This EXEC formats the user's disk 191.  It is called by
MAINTDIR EXEC, in subprogram PREPARE, which prepares
new users' machines.  In order that users do not call this EXEC
and destroy their disk 191, it is kept on MAINT FFF, with the
following further precautions:

o      This EXEC must be accessible to general users when
      adding new users.  We are using MAINT's 31A disk for
      local EXECs for general users.  This disk is accessed as
      X/A for every user on the system.  DESTRUCT is copied
      on disk 31A only while it is need (a few minutes) and then
      it is erased.

o      On MAINT's FFF disk there are two copies of this EXEC.
      One is called DESTRUCT BACKUP, and contains
      documentation, the other, which is the one copied to 31A
      disk, is named DESTRUCT $EXEC.  Therefore, there is
      no DESTRUCT EXEC on the system, other than for a few minutes.

o      This EXEC is executed by new users through the CP
      SEND command.  The SEND command is in subprogram
      PREPARE, and is as follows:

      SEND' USERID.I 'AC 31A X #DESTRUCT'

USERID.I is the new user's user-id as entered in a list, or from
a keyboard.  AC 31A X gives new user access to 31A disk,
filemode X.

DESTRUCT EXEC also receives the PROFILE EXEC
previously sent to new users by MAINT.

PROFILE STUDENT

This is the profile EXEC that we give to every new user.
DESTRUCT EXEC receives this file.

GENERIC USERLIST

The lists that are to be submitted to MAINTDIR must have a
filetype of USERLIST.  This file contains the heading only.
We use XEDIT to change its filename to the new list's name.

MAINTDIR looks at this file as follows:

o      Leading blanks are ignored.

o      Any line beginning with * as its first nonspace character is ignored.

o      Any line consisting entirely of spaces is ignored.

o      The first string found on a line is taken as USERID.  The
      rest of the line is ignored.  We use this feature to enter
      user's full name and social security number.

USER DISKMAP

This is the system's DISKMAP file, created by the CMS
command :

      DISKMAP USER DIRECT

It is worth noting that the version of this command shipped
with VM/SP Version 6 does not work correctly.  It ignores
gaps at the end of packs.

USER DIRECT

This is the system directory.  There must be one copy on
MAINT's disk 191.  If MAINTDIR does not find one on the
FFF disk, it will copy the one on the 191 disk onto the FFF
disk.  Also, MAINTDIR will update the copy on the 191 disk
each time the directory has been modified.  That is why we call
the one on 191 disk the BACKUP.

MAINTDIR will insert the time and date when the directory
was last modified, at the top of the directory file USER
DIRECT.

BRINGUP EXEC

This is a short EXEC written in EXEC2.  It autologs new users
as well as DSKMOVER and DISKFORM.  The reason for its
existence is that REXX, in Version 5, cannot autolog users.
However, in Version 6, REXX can do that and so one can
include that one line in MAINTDIR, instead of calling
BRINGUP.  This EXEC is called at three places in
MAINTDIR.  Once in subprogram PREPARE, when adding
new users; secondly, in subprogram MODDISK (to autolog
DSKMOVER), when modifying mini-disks for users; finally, it
is also invoked in FORMATTER to autolog DISKFORM.

You will notice that we use STUDENT for the new user's
password, as well as for DSKMOVER and DISKFORM.  This
is because we did not need a different password for each new
user, and so we have hard coded STUDENT in BRINGUP
EXEC.

SORTDIR EXEC

This is a stand-alone program.  It sorts the file USER DIRECT
on MAINT's FFF disk only.  Note that delete and modify
operations do not change the order of users in the directory.
However, the add operation will add new users to the end of
the directory.  This is useful because one can see who was
added recently.  However, we sometimes want to have a sorted
print out of the directory.  This is when we use the SORTDIR
EXEC.  It takes no arguments - just type SORTDIR, and press
enter.


GENERAL HINTS FOR MAINTENANCE

The following are some general steps, to be carefully observed,
for making modifications to MAINDIR EXEC when installing
the software on a different machine.

MDISK STATEMENTS.

Our machine uses FB-512.  If you are using cylinders, then
several changes are needed before running this software.
Extensive testing is needed for this kind of modification before
using the software.

First, in MAINTDIR itself, in subprogram ADDTODIR, the
following line must be modified.

      LINE.3 = 'MDISK 191 FB-512' STARTBLK EXTENT VOLSER 'MR ALL'

The change is to be made to the statements between quotes.
Note that we are using ALL as the password for read
permission.  This is entirely specific to our needs, and for
security reasons you may want to eliminate that.

Secondly, on DSKMOVER 191 disk, the PROFILE EXEC has
a line that requests a temporary disk.  That line must also be
changed.

Thirdly, when adding new users, the information requested by
MAINTDIR is targeted for FB-512 DASD systems.  Moreover,
the subprogram CHECKMAP has been written with FB-512 in
mind, although it should not need much change for cylinder
type DASD.

DIRECTORY PROFILE

We have a PROFILE entry in our system directory USER
DIRECT.  It is called PROFILE STUDENT.  We give this to
every new user.  If you wish to give users different lines in
their directory, go to subprogram ADDTODIR and add as
many lines as you wish.  Then, fix the loop that comes right
after the line that sets LINE.4, to include all your lines.

SEND COMMAND

The send command is used to make new users' machines
execute the commands as described earlier (see DESTRUCT
EXEC).  In order for send command to function, the user must
give MAINT authority to send commands to him/her.  We have
done this in PROFILE STUDENT, described above.  In any
case, the user must have the following entry:

      CONSOLE 009 3215 T MAINT

It is the part  T MAINT that gives MAINT the necessary
authority.

SET AUTOREAD OFF

This appears as a parameter in BRINGUP EXEC, for
AUTOLOG command.  It is necessary to have this parameter
in order to avoid having to press enter for each new user added.
Otherwise, the new users and DSKMOVER will send a request
and lock-up the terminal until you press enter.  Make sure that
you include this parameter in case you are going to use the
AUTOLOG command inside REXX, instead of using
BRINGUP EXEC.


MAINTDIR EXEC

/*  NAME : MAINTDIR EXEC, ON MAINT FFF.                             **
** THIS EXEC IS INVOKED BY MAINTAIN EXEC A, ON MAINT 191.           **
**                     MAIN_MENU ( Menu )                           **
**       __________________|_________________                       **
**       |           |            |         |                       **
**    ADDUSERS    DELUSERS     MODUSERS    QUIT                     **
**                                                                  **
** THIS IS THE MAIN MENU. IT CALLS ALL THE OTHER MODULES, AND THEY  **
** ALL RETURN HERE. IN CASE OF SERIOUS ERRORS, THEY MAY GO TO ERRMSG**
** THERE ARE TWO EXITS IN THIS PROGRAM: ONE FROM THIS MODULE, AND   **
** ONE IN ERRMSG, CALLED IN CASE OF SERIOUS ERROR CONDITIONS.       */
'CP SET MSG OFF'
'CP SET IMSG OFF'
'CP SET EMSG OFF'
'CP SET SMSG OFF'
RESPONSE = '*'
DO WHILE (RESPONSE = '*')
    'CLRSCRN'
    SAY '               **************************************'
    SAY '               **                                  **'
    SAY '               **  DIRECTORY  MAINTENANCE PROGRAM  **'
    SAY '               **                                  **'
    SAY '               **************************************'
    SAY
    SAY '               ======================================'
    SAY '               ==                                  =='
    SAY '               ==  ENTER :         IN ORDER TO :   =='
    SAY '               ==  -------         --------------  =='
    SAY '               ==    A  .......... ADD USER(S)     =='
    SAY '               ==    D  .......... DELETE USER(S)  =='
    SAY '               ==    M  .......... MODIFY USER(S)  =='
    SAY '               ==    Q  .......... QUIT            =='
    SAY '               ==                                  =='
    SAY '               ======================================'
    PULL RESPONSE
    LOGWRTFLG = 0   /* FLAG FOR WRITE ERROR TO USERS ERRORLOG */
    LOGFLAG = 0     /* RESET FLAG FOR SUBROUTINE LOGERROR     */
    DIRECTFLAG = 0  /* CHANGED IN UPDATEDIREC, USED BELOW     */
    SELECT
        WHEN (RESPONSE == 'A') THEN CALL ADDUSERS
        WHEN (RESPONSE == 'D') THEN CALL DELUSERS
        WHEN (RESPONSE == 'M') THEN CALL MODUSERS
        WHEN (RESPONSE == 'Q') THEN LEAVE
        OTHERWISE RESPONSE = '*'
    END
    RESPONSE = '*'
END
/*....... IF DIRECTORY WAS MODIFIED, UPDATE BACKUP ON 191 DISK (C) ...*/
IF DIRECTFLAG ¬= 0 THEN 'COPY USER DIRECT A = = C ( REPLACE'
CALL QUIT
EXIT
/* This is the start of of ADD MODULE, which extends until the start  **
** of DELETE MODULE.                                                  */
/*                           ADDUSERS ( Menu )                        **
**                _______________|______________                      **
**                |              |             |                      **
**              ADDONE        ADDLIST        RETURN                   **
**                                                                    **
** ALL CALLS WILL RETURN HERE, UNLESS A SERIOUS ERROR OCCURS, IN WHICH**
** CASE THEY GO TO ERRMSG. FROM HERE ONE CAN GO UP TO THE MAIN MENU.  */
ADDUSERS:
RESPONSE = '*'
DO WHILE (RESPONSE = '*')
    'CLRSCRN'
    SAY
    SAY
    SAY '               ======================================'
    SAY '               ==                                  =='
    SAY '               ==  ENTER :     IN   ORDER   TO :   =='
    SAY '               ==  -------     ------------------  =='
    SAY '               ==    S  .....  ADD A SINGLE USER   =='
    SAY '               ==                                  =='
    SAY '               ==    L  .....  ADD A LIST OF USERS =='
    SAY '               ==                                  =='
    SAY '               ==    Q  .....  RETURN TO MAIN MENU =='
    SAY '               ==                                  =='
    SAY '               ======================================'
    PULL RESPONSE
    SELECT
        WHEN (RESPONSE == 'S') THEN CALL ADDONE
        WHEN (RESPONSE == 'L') THEN CALL ADDLIST
        WHEN (RESPONSE == 'Q') THEN LEAVE
        OTHERWISE RESPONSE = '*'
    END
    IF (RESULT == '*') THEN LEAVE
                       ELSE RESPONSE = '*'
END
RETURN RESPONSE
/*====================================================================**
**                            ADDONE                                  **
**        ______________________|_________________                    **
**        |                     |                |                    **
**   GETRESPONSE()        CHECKWHOLE()         ADDEND                 **
**                                               ||                   **
**                                                                    **
**    ADDONE  IS ENTERED IS  S  WAS SELECTED FROM THE MENU. IT ADDS   **
** A SINGLE USER TO THE SYSTEM, AFTER RECEIVING THE FOLLOWING INFO:   **
**   USERID.1 = THE USER-ID OF THE PERSON TO BE ADDED                 **
**   VOLSER   = THE VOLUME, SUCH AS OPTPK1, ON WHICH TO ALLOCATE DISK **
**   BEGINBLK = IS THE STARTING BLOCK FOR USER'S MDISK ON VOLSER      **
**   EXTENT   = IS THE NUMBER OF BLOCKS FOR USER'S MINIDISK           **
**   COUNT    = IS SET TO 1. SEE ADDLIST, BELOW.                      */
ADDONE:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE USER-ID TO BE ADDED:'
USERID.1 = GETRESPONSE()
IF USERID.1 == '*' THEN RETURN '*'
SAY 'ENTER THE NAME OF THE VOLUME ON WHICH THE USER WILL BE ADDED:'
VOLSER = GETRESPONSE()
IF VOLSER == '*' THEN RETURN '*'
BEGINBLK = CHECKWHOLE(1, VOLSER)
IF BEGINBLK == '*' THEN RETURN '*'
EXTENT = CHECKWHOLE(2, VOLSER)
IF EXTENT == '*' THEN RETURN '*'
'CLRSCRN'
COUNT = 1
CALL ADDEND COUNT, BEGINBLK, EXTENT, VOLSER, ''
RETURN
/*                            ADDLIST                                 **
**        _______________________|______________________________      **
**        |                 |             |          |         |      **
**   GETRESPONSE()    CHECKWHOLE()    FINDLIST    ADDEND   WAITLOOP   **
**                                                  ||                **
**                                                                    **
**    ADDLIST is entered if   L    was selected from the MENU.        **
** IT NEEDS THE FOLLOWING INFORMATION:                                **
**  FILENAME = IS THE NAME OF THE LIST CONTAINING THE USER-IDS        **
**  VOLSER   = same as in ADDONE                                      **
**  BEGINBLK = IS THE START ON VOLSER , FOR THE FIRST USER ONLY       **
**  EXTENT   = same as in ADDONE                                      **
**  COUNT    = NUMBER OF USERS ON THE LIST, RETURNED BY FINDLIST      */
ADDLIST:
'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
SAY
SAY
SAY
SAY 'ENTER THE NAME OF THE LIST THAT CONTAINS USER-IDS TO BE ADDED:'
FILENAME = GETRESPONSE()
IF FILENAME == '*' THEN RETURN '*'
SAY 'ENTER THE NAME OF THE VOLUME ON WHICH USERS WILL BE ALLOCATED:'
VOLSER = GETRESPONSE()
IF VOLSER == '*' THEN RETURN '*'
BEGINBLK = CHECKWHOLE(3, VOLSER)
IF BEGINBLK == '*' THEN RETURN '*'
EXTENT = CHECKWHOLE(4, VOLSER)
IF EXTENT == '*' THEN RETURN '*'
'CLRSCRN'
CALL FINDLIST FILENAME
COUNT = RESULT
SELECT
    WHEN COUNT > 0 THEN CALL ADDEND COUNT, BEGINBLK, EXTENT,   ,
                                    VOLSER, FILENAME
    WHEN COUNT = 0
        THEN DO
        SAY
        SAY 'THE LIST IS EMPTY ...............'
        CALL WAITLOOP
        END
    OTHERWISE CALL WAITLOOP       /* COUNT < 0 */
END
RETURN
/*                           CHECKWHOLE()                             **
**                                |                                   **
**                           PRINTPROMPT                              **
**                                                                    **
** CHECKWHOLE IS CALLED BY ADDONE, AND ADDLIST. IT CHECKS IF THE INPUT**
** IS A WHOLE NUMBER.                                                 */
CHECKWHOLE:
PROCEDURE              /* PROCEDURE DECLARATION IS FOR: RESPONSE */
ARG PROMPT, VOLSER
CALL PRINTPROMPT PROMPT
RESPONSE = GETRESPONSE()
IF RESPONSE == '*' THEN RETURN '*'
IF ¬DATATYPE(RESPONSE, W) THEN
    DO UNTIL DATATYPE(RESPONSE, W)
        'CLRSCRN'
SAY '.........ENTER  *  ANYTIME TO QUIT AND RETURN TO MENU..........'
        SAY
        SAY
        SAY
        SAY 'YOU MUST ENTER A WHOLE NUMBER ..........'
        CALL PRINTPROMPT PROMPT
        RESPONSE = GETRESPONSE()
        IF RESPONSE == '*' THEN RETURN '*'
    END
RETURN RESPONSE
/*                       PRINTPROMPT                                  **
** PRINTPROMPT IS ONLY CALLED BY CHECKWHOLE(). PRINTS A PROMPT MESSAGE*/
PRINTPROMPT:
ARG PROMPT
SAY
SELECT
    WHEN PROMPT = 1 THEN
SAY 'ENTER THE STARTING BLOCK ON' VOLSER 'TO ALLOCATE THE USER:'
    WHEN PROMPT = 2 THEN
SAY 'ENTER THE NUMBER OF BLOCKS TO ALLOCATE FOR THE USER:'
    WHEN PROMPT = 3 THEN
SAY 'ENTER THE STARTING BLOCK ON' VOLSER 'TO ALLOCATE THE LIST:'
    OTHERWISE             /* PROMPT = 4 */
SAY 'ENTER THE NUMBER OF BLOCKS TO ALLOCATE FOR EACH USER:'
END
RETURN
/*                               ADDEND                               **
**      ___________________________|________________________________  **
**      |        |      |     |        |      |       |      |     |  **
**  EXISTDIREC   |  CHECKDIR  |        | UPDATEDIREC  |   PREPARE  |  **
**            CHECKMAP     FORMATTER  ADDTODIR    UPDATEMAP   WAITLOOP**
**                                                                    **
**      ADDEND IS CALLED BY ADDONE, ADDLIST.                          **
** IT RECEIVES COUNT, BEGINBLK, EXTENT, VOLSER AS EXPLAINED IN CALLERS**
**  GAPSIZE = THE TOTAL SIZE OF ALL BLOCKS ALLOCATED FOR ALL USERS TO **
**            BE ADDED. ALL MDISKS ARE ALLOCATED CONTIGUOUSLY.        **
**  TOTAL   = IS THE ENDING BLOCK NUMBER ON VOLSER, AFTER ALLOCATION  **
** IT CALLS                                                           **
**  CHECKMAP : TO FIND OUT IF THERE IS A LARGE ENOUGH GAP ON VOLSER.  **
**  CHECKDIR : TO SEE IF NEW USERS HAVE SAME USER-ID AS THOSE ALREADY **
**             ON THE DIRECTORY.                                      **
**  FORMATTER : TO INITIALLY FORMAT THE ENTIRE SPACE TO BE ALLOCATED. **
**  ADDTODIR : TO ADD THE NEW USERS TO THE CP DIRECTORY.              **
**  UPDATEDIREC : WHICH EXECUTES THE DIRECT COMMAND,PUTS NEW DIRECTORY**
**                ON LINE.                                            **
**  UPDATEMAP : CREATES A NEW DISKMAP.                                **
**  PREPARE : FORMATS NEW USERS' DISKS, AND GIVES THEM A PROFILE EXEC.*/
ADDEND:
ARG COUNT, BEGINBLK, EXTENT, VOLSER, FILENAME
GAPSIZE = COUNT * EXTENT
TOTAL = BEGINBLK + GAPSIZE
CALL EXISTDIREC
CALL CHECKMAP VOLSER, GAPSIZE, BEGINBLK
IF RESULT ¬= 0 THEN SIGNAL WAITOUT       /* NOT ENOUGH GAP */
CALL CHECKDIR COUNT, FILENAME
IF RESULT ¬= 0 THEN SIGNAL WAITOUT       /* DUPLICATE USER-IDS IN CP */
CALL FORMATTER BEGINBLK, EXTENT, VOLSER  /* FORMAT DISK SPACE */
CALL ADDTODIR COUNT, BEGINBLK, EXTENT, VOLSER
CALL UPDATEDIREC
CALL UPDATEMAP
CALL PREPARE COUNT
RETCODE = RESULT
'CLRSCRN'
IF COUNT = 1
   THEN
SAY 'USER-ID:' USERID.1 'HAS BEEN ADDED TO THE CP DIRECTORY.'
   ELSE
SAY 'THE USERS IN THE LIST:' FILENAME 'HAVE BEEN ADDED TO THE DIRECTORY.'
SAY
SAY 'THE NEW DIRECTORY IS ON LINE. A NEW DISKMAP HAS BEEN CREATED.'
SAY
IF RETCODE = 0
    THEN SAY "ALL USERS'S MACHINES HAVE BEEN PREPARED."
    ELSE SAY "SOME USERS'S MACHINES FAILED WHEN PREPARING THEM !!!!"
WAITOUT: CALL WAITLOOP
RETURN
/*                          ADDTODIR                                  **
**                  ___________|___________                           **
**                  |                     |                           **
**               LOGERROR               ERRMSG                        **
**                                                                    **
**    ADDTODIR is called by ADDEND. For variable description see      **
** ADDLIST.                                                           **
** It adds NEW users to the CP DIRECTORY. The mini-disks are allocated**
** CONTIGUOUSLY. It also assumes that a PROFILE exists in the CP      **
** DIRECTORY, by the name: STUDENT. This PROFILE MUST CONTAIN ALL THE **
** ENTRIES, EXCEPT: USER, AND MDISK. A 70 star long SEPARATOR is added**
** between user entries, in the DIRECTORY.                            **
** The CURRENT directory is first copied to OLDUSER DIRECT. If errors **
** occur, adequate messages and warnings are issued. At the end, the  **
** OLDUSER DIRECT is first copied to disk 191 as USER DIRECT ( C ),   **
** and if successful, then OLDUSER DIRECT is erased from this ( A )   **
** disk. If the program terminates abnormally, then the USER DIRECT   **
** on disk 191 (C) will be the most recent CP directory. In case no   **
** errors occur, when quitting the program, the updated new directory **
** is copied on disk 191 (replacing the previous directory). This is  **
** done in the MAIN MENU, just before calling QUIT.                   **
** IF ERROR TAKES PLACE WHEN ADDING TO THE NEW DIRECTORY, THE PROGRAM **
** ABORTS (GOES TO ERRMSG), AND AN ERROR MESSAGE IS PRINTED. ALSO,    **
** THE OLD DIRECTORY IS RECOVERED, AS: USER DIRECT.                   **
**                             NOTE                                   **
**  This is where lines are written to the DIRECTORY, as entries for  **
** new users. For a different set-up, make changes here.              */
ADDTODIR:
ARG COUNT, BEGINBLK, EXTENT, VOLSER
SAY
SAY 'NOW, ADDING THE USER-ID(S) TO THE DIRECTORY FILE ......'
'COPYFILE USER DIRECT A OLDUSER = = ( REPLACE'
IF RC ¬= 0 THEN CALL ERRMSG 10
'MAKEBUF'
/* LINES 2 and 4 are fixed, so the are moved out of the loop for speed*/
    LINE.2 = 'INCLUDE STUDENT'
    LINE.4 = '****************************************' /* 40       */
    LINE.4 = LINE.4'******************************'     /* +30 = 70 */
DO J = 1 TO COUNT
    STARTBLK = BEGINBLK + (J-1) * EXTENT
    LINE.1 = 'USER' USERID.J 'STUDENT 3M 5M G'
    LINE.3 = 'MDISK 191 FB-512' STARTBLK EXTENT VOLSER 'MR ALL'
    DO I=1 TO 4
        'EXECIO 1 DISKW USER DIRECT A (STRING' LINE.I
        IF RC ¬= 0 THEN CALL ERRMSG 6, RC, 'USER', 'DIRECT', 'A'
    END
END
'DROPBUF'
'FINIS USER DIRECT A'
'SET CMSTYPE HT'
'COPY OLDUSER DIRECT A USER = C (REPLACE'
RETCODE = RC
'SET CMSTYPE RT'
IF RETCODE ¬= 0
    THEN CALL LOGERROR 4
    ELSE 'ERASE OLDUSER DIRECT A'
'CLRSCRN'
SAY  COUNT 'USER(S) HAVE(HAS) BEEN ADDED TO THE FILE USER DIRECT A.'
RETURN
/*                           PREPARE                                 **
**              _______________|________________                     **
**              |              |               |                     **
**           LOGERROR        ERRMSG         BRINGUP                  **
**                                                                   **
**     PREPARE is called by ADDEND and does the following:           **
** FIRST, IT COPIES DESTRUCT EXEC ON MAINT 31A, SO NEW USERS CAN     **
** EXECUTE IT, WHEN IT IS SENT TO THEM AS A COMMAND BY MAINT.        **
** THEN, IT SENDS A PROFILE EXEC TO EACH NEW USER.                   **
** NEXT, IT AUTOLOGS THE USER (MAINT IS AUTHORIZED ON USER DIRECTORY)**
** THEN, IT SENDS THE COMMANDS TO AUTOMATICALLY FORMAT, AND PREPARE  **
** EACH USER'S MACHINE. THE COMMAND THAT DOES THIS, IS DESTRUCT EXEC.**
** FINALLY, THE EXEC DESTRUCT IS ERASED FROM MAINT 31A, SO USERS DO  **
** NOT INVOKE IT BY MISTAKE, LOSING ALL THEIR FILES.                 **
**   ALL ERRORS ARE LOGGED IN: USERS ERRORLOG. Warnings are issued.  */
PREPARE:
ARG COUNT
RETCODE = 0
'ACCESS 31A X'
'COPY DESTRUCT $EXEC A = EXEC X'
'CLRSCRN'
SAY 'DIRECTORY IS ON LINE. DISKMAP HAS BEEN CREATED. NO ERRORS!'
SAY
DO I = 1 TO COUNT
    SAY "NOW PREPARING" USERID.I "'S MACHINE......"
    'CP SPOOL CON START NOTERM'
    'SF PROFILE STUDENT A' USERID.I
    IF RC ¬= 0 THEN DO
        RETCODE = 1
        CALL LOGERROR RETCODE, RC, USERID.I
        CALL RESETCON
        ITERATE I
        END
    'BRINGUP' USERID.I
    IF RC ¬= 0 THEN DO
        RETCODE = 2
        CALL LOGERROR RETCODE, RC, USERID.I
        CALL RESETCON
        ITERATE I
        END
    DO UNTIL RC = 0
        'SEND' USERID.I 'AC 31A X #DESTRUCT'
    END
    DO UNTIL (RC ¬= 0)
        'EXECIO 0 CP ( STRING Q' USERID.I
    END
    CALL RESETCON
END
'ERASE DESTRUCT EXEC X'
'ACCESS 31A X/A'
'CLRSCRN'
RETURN RETCODE        /* = 0 NO ERROR, OTHERWISE ERROR  */
This article will be continued next month.

Zorabi Honargohar
Professor and System Administrator
Emporia State University

