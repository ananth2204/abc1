Allowing CMS users to view the print queue

One of the problems resulting from CMS users not having class
D access is that they cannot view the whole print queue.  This
can result in many phone calls during the course of a day to
enquire where their print is in the queue, and how long it will
take for it to be printed.

PL EXEC alleviates this problem by allowing any user,
regardless of class, to view the entire queue.  To do this, the
PLEXEC EXEC must run on a disconnected virtual machine.
This machine must have class D access.  A sample directory
entry is shown below.  PL EXEC is then able to LINK to this
machine to discover the contents of the print queue, and
display them on a formatted screen.  This is illustrated in
Figure 1.  This screen will automatically adjust its size
depending on the physical screen size.  To simplify queue
management, several commands may be entered next to each
file.  It is worth noting that, while class D users may alter any
file with these commands, all others may alter only their own
files.


MAINT'S USER DIRECTORY ENTRY

 USER PLEXEC PSWRD 3M 3M DG
  ACCOUNT 619 TECHSUPP
  IPL CMS PARM AUTOCR
  CONSOLE 009 3215
  SPOOL 00C 2540 READER *
  SPOOL 00D 2540 PUNCH  A
  SPOOL 00E 1403 A
  LINK MAINT 190 190 RR
  LINK MAINT 19D 19D RR
  LINK MAINT 19E 19E RR
  MDISK 191 3380 2438 003 VMPK03  MR RPLEXEC


PLEXEC EXEC

/* DESCRIPTION : Writes the current printer queue to disk so the PL   */
/*             : EXEC can interrogate it.                             */
  trace off
  set smsg on
control_section:
  do forever
     clrscrn
     say 'Working...'date() time()
    'WAKEUP (SMSG'
     desbuf
    'erase PRINTER LIST A'
     call query_current_print_line
     call query_print_queue
     call write_file
  end
control_section_exit:
  exit
/* Uses the Unit Record to see what is currently printing.            */
query_current_print_line:
  no_of_lines = 1
  current_line = ' '
  desbuf
 'EXECIO * CP (STRING Q UR'
  pull card
  printer_status = word(card,3)
  if find('INT PRINTING',printer_status) B= 0
     then do
           pull junk; pull junk; pull junk
           pull current_line
          end
     else desbuf
  LIST.no_of_lines = left(printer_status,10) || substr(current_line,10,)
query_current_print_line_exit:
  return
/* Queries the rest of the print queue.                               */
query_print_queue:
 'EXECIO * CP (BUFFER 100000 STRING Q PRT ALL'
  pull discard_header
  do queued()
     no_of_lines = no_of_lines + 1
     pull LIST.no_of_lines
  end
query_print_queue_exit:
  return
/* Writes the array out to disk.                                      */
write_file:
 'EXECIO' no_of_lines 'DISKW PRINTER LIST A 1 (FINIS STEM LIST.'
write_file_exit:
  return


PL EXEC

/* DESCRIPTION : Queries the print queue to allow any user to see     */
/*               every entry, even if they don't have class D access. */
'XEDIT prtlst control A (PROFILE PRTLST'
 exit


PRTLST XEDIT

/* DESCRIPTION : Queries the print queue to allow any user to see     */
/*             : every entry, even if they don't have class D access. */
/*             : Note : A class 'D' user will be able to affect any   */
/*             :        file in the print queue. Any other user may   */
/*             :        only effect their own.                        */
trace o
control_section:
  call a_initialise_variables
  call b_create_link_to_class_d_machine
  do until quit_out = 'YES'
     if quit_out = 'YES' then iterate
    'SMSG PLEXEC WAKEUP.....'   /* Tell machine to process PRT queue */
     call c_build_screen
     call d_show_screen
     call e_read_screen
  end
control_section_exit:
 'REL' fmode '(det'
  set emsg on
  set imsg on
 'qquit'
  exit
/* Initialise variables etc...                                        */
a_initialise_variables:
  /* Setup XEDIT screen attributes */
  command set ctlchar '%' escape
  command set ctlChar '@' protect   red        high
  command set ctlChar '&' protect   red  blink high
  command set ctlChar '$' protect   blue       high
  command set ctlchar '!' protect   turquoise  nohigh
  command set ctlchar '?' protect   green      nohigh
  command set ctlchar '$' noprotect pink       high
  command set color arrow   yellow
  command set color cmdline red
  set emsg    off
  set imsg    off
  set msgline off
  set msgmode on
  set cmdline bot
  /* Initialise variables */
  quit_out = 'NO'
  cursor.1 = 'X'
  cursor.2 = 7
  pointer  = 0
  header   = '%$Userid   File Class Records  Rec Left Cpy Dist     Seq'
 'SMSG PLEXEC WAKEUP.....'   /* Tell machine to process PRT queue */
 'CP SLEEP 1 SEC'
a_initialise_variables_exit:
  return
/* Link to PLEXEC                                                     */
b_create_link_to_class_d_machine:
  ps = 'RPLEXEC'
  /* Get new filemode and dasd address for link */
 'GETFMADR'
  pull x fmode dasd
 'EXECIO * CP (STRING CP LINK PLEXEC 191' dasd 'RR' ps
  src = rc
  if src B= 0
     then do
           say 'Cannot link to PLEXEC. Contact Computer Services.',
               'RC = 'src
           quit_out = 'YES'
          end
b_create_link_to_class_d_machine_exit:
  return
/* Put screen into variables.                                         */
c_build_screen:
  /* Initialise Arrays for every press of enter */
  LIST.      = 'X'
  RESVD.     = ' '
  OPTION.    = ' '
  your_files = 0
  resvd.1 = '%!' || left( '(' || userid() || ')',10)
  resvd.3 = '%$  Seq Owner-id Spl  Class Records  Hold',
            'Date  Time  Name     Type     Dist'
  /* Attempt to read file several times before giving up.  */
  /* Note: It will take PLEXEC time to build the file.     */
  do 20
     call ca_read_information_file
     if info_rc = 0 then leave
  end
  /* If file cannot be read, inform the user. */
  if info_rc B= 0
     then do
           resvd.3   = '%@ Error accessing information.'
           tot_files = 1
           return         /* Do not attempt to process rest of info. */
          end
  /* Examine first line of array to discover current state of printer */
  state  = word(list.1,1)
  select
    when state = 'WAITING' then resvd.2 = '%@  Printer is idle.'
    when state = 'DRAINED' then resvd.2 = '%&  Printer is Drained!!!'
    otherwise do
               resvd.1           = resvd.1 || copies(' ',12) || header
               ending            = substr(list.1,22,)
               if word(ending,1) = 'DEST' &,
                  word(ending,2) = '-'
                  then ending    = ' File has been flushed by operator.'
               if state = 'INT'
                  then resvd.2   = '%&  Intervention Req.   %!'
                  else resvd.2   = '%@  Currently Printing :%!'
               resvd.2 = resvd.2 || ending
              end
  end
  /* Go through rest of array line-by-line (i.e. The print queue) */
  line = 1
  do forever
     line         = line + 1
     if list.line = 'X' then leave
     nn      = line + 2
     incr    = line - 1
     /* Chop line into individual pieces of information */
     name    = left(word(list.line,01),8)
     spoolid = left(word(list.line,02),4)
     class   = left(word(list.line,03),1)
     type    = left(word(list.line,04),3)
     recs    = left(word(list.line,05),8)
     copies  = left(word(list.line,06),3)
     hold    = left(word(list.line,07),4)
     date    = left(word(list.line,08),5)
     time    = left(word(list.line,09),5)
     fname   = left(word(list.line,10),8)
     ftype   = left(word(list.line,11),8)
     dist    = left(word(list.line,12),8)
     if strip(recs)   = "" |,
        strip(copies) = ""
        then iterate
     /* Multiply no-of-records by no-of-copies */
     recs    = right(recs*copies,8,'0')
     /* Insert 'blank' filename & filetype if none exists */
     if dist = "" then do
                        dist  = fname
                        fname = '(none)  '
                        ftype = '(none)  '
                       end
     /* Rebuild the line, with selective highlighting */
     if name   = userid() then resvd.nn   = '%@' || name
                          else resvd.nn = '%!' || name
     resvd.nn  = resvd.nn || '%!' || spoolid
     if class B= 'A'      then resvd.nn = resvd.nn  || '%@' || class
                          else resvd.nn = resvd.nn  || '%!' || class
     if type  B= 'PRT'    then resvd.nn = resvd.nn  || '%@' || type
                          else resvd.nn = resvd.nn  || '%!' || type
     if recs  >  3000     then resvd.nn = resvd.nn  || '%@' || recs
                          else resvd.nn = resvd.nn  || '%!' || recs
     if hold  B= 'NONE'   then resvd.nn = resvd.nn  || '%@' || hold
                          else resvd.nn = resvd.nn  || '%!' || hold
     resvd.nn  = resvd.nn || '%!' || date  || '%!' || time
     resvd.nn  = resvd.nn || '%!' || fname || '%!' || ftype
     resvd.nn  = resvd.nn || '%!' || dist
     resvd.nn  = '%$' || left(option.nn,1) || '%!' ||,
                 right(incr,3,'0') || resvd.nn
  end
  tot_files  = line - 2
  /* If there are NO entries in the PRT queue, say so */
  if resvd.4 = "" then resvd.4 = '   Nothing in the print queue.'
c_build_screen_exit:
  return
/* Reaccess disk & read file into an array.                           */
ca_read_information_file:
  /* Access disk where list of files has been created */
 'ACC' dasd fmode
  /* Read all of list into an array. */
 'EXECIO * DISKR PRINTER LIST' FMODE '(FINIS STEM LIST.'
  info_rc = rc
ca_read_information_file_exit:
  return
/* Display screen                                                     */
d_show_screen:
  do n = 1 to 3
     set reserved n noh resvd.n
  end
  /* Leaves loop when a bad rc is found thereby finding screen size */
  do n = 4 to 99
     pnt = n + pointer
     set reserved n noh resvd.pnt
     if rc B= 0 then leave
  end
  /* Set cursor position and size of screen page */
  if cursor.1 = 'X' then cursor.1 = n
  n = n - 3
  page_amount = n - 4
  /* Show commands and PF keys on bottom two lines */
  set reserved n noh '%$P%?  : Purge%$T%?  : Order to Top'||,
                     '%$   B%?  : Order to Bottom'||,
                     '%$H%?: Hold%$R%?: Release'
  n = n + 1
  set reserved n noh '%$PF3%?: Quit %$PF7%?: Page Backwards',
                     '%$PF8%?: Page Forewards'
  /* Position cursor on command line */
  cursor screen cursor.1 cursor.2
d_show_screen_exit:
  return
/* Wait for keyboard response.....                                    */
e_read_screen:
 'desbuf'
  /* Reset variables which may change here */
  command = ' '
  up_down = 0
  /* Wait for enter or a PF/PA key to be pressed */
  read nochange tag
  do queued()
     pull key line column string
     /* If something typed in on command line, store it */
     if key = 'CMD' then command = "'" line column string "'"
     /* Check for PF key presses */
     if key = 'PFK'
        then select
               when line =  3 then quit_out = 'YES'
               when line = 15 then quit_out = 'YES'
               when line =  7 then up_down  = '-' || page_amount
               when line =  8 then up_down  = page_amount
               otherwise nop
             end
     /* Check for commands */
     if key = 'RES'
        then do
               seq   = line + pointer
               owner = substr(resvd.seq,11,8)
               spool = substr(resvd.seq,21,4)
               select
                 when string = 'P' then call ea_purge
                 when string = 'H' then call eb_hold
                 when string = 'R' then call ec_release
                 when string = 'T' then call ed_top
                 when string = 'B' then call ee_bot
                 otherwise nop
               end
             end
  end
  /* Allow screen to be paged up or down */
  pointer       = pointer + up_down
  negative      = '-' || page_amount
  if pointer    = negative    then pointer = tot_files - page_amount
  if pointer   <  0           then pointer = 0
  if tot_files <  page_amount then pointer = 0
  if pointer   >= tot_files   then pointer = 0
  /* Perform anything that was typed in on the command line */
  if command B= ' '
     then do
           set emsg on
           set imsg on
           INTERPRET ADDRESS CMS command
           src = rc
           if src B= 0
              then do
                    command = strip(command,,"'")
                    command = strip(command)
                    sos alarm
                    cmsg command
                   end
           set emsg off
           set imsg off
          end
e_read_screen_exit:
  return
/* Purge a file in the PRT queue.                                     */
ea_purge:
 'CP PURGE' owner 'PRT' spool                      /* For Class D   */
  if rc B= 0 then 'CP PURGE PRT' spool             /* For Any Class */
ea_purge_exit:
  return
/* Put a file on HOLD.                                                */
eb_hold:
 'CP CHANGE' OWNER 'PRT' spool 'HOLD'
  if rc B= 0 then 'CP CHANGE PRT' spool 'HOLD'
eb_hold_exit:
  return
/* Release a file. Only Class D may release a 'SYSTEM' held file.     */
ec_release:
 'CP CHANGE' OWNER 'PRT' spool 'NOSYS'
 'CP CHANGE' OWNER 'PRT' spool 'NOHOLD'
  if rc B= 0 then 'CP CHANGE PRT' spool 'NOHOLD'
ec_release_exit:
  return
/* Order a file to the top of the queue. Users without Class D may    */
/* only order files within their own queue.                           */
ed_top:
 'CP ORDER' OWNER 'PRT' SPOOL
  if rc B= 0 then 'CP ORDER PRT' SPOOL
ed_top_exit:
  return
/* Order a file to the bottom of the print queue. The easiest way is  */
/* to transfer it to the reader queue and back, but this is only      */
/* possible with your own reader files. Class D users will cause      */
/* the file to change class and all class A files will be ordered     */
/* above it, then change it back to class A.                          */
/* NOTE: This may need to be changed/removed for some installations.  */
ee_bot:
  if owner = userid()
     then do
           'CP TRANSFER PRT' spool 'TO * RDR'
           'CP TRANSFER RDR' spool 'TO * PRT'
          end
     else do
           'CP CHANGE' owner 'PRT' spool 'CL 0'
           'CP ORDER SYSTEM PRT CLASS A'
           'CP CHANGE' owner 'PRT' spool 'CL A'
          end
ee_bot_exit:
  return

Neil Chandler
Systems Administrator
Quality Software Products (UK)            c Quality Software Products 1991
