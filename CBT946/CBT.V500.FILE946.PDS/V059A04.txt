File layouts in REXX

Most languages have the equivalent of the Assembler COPY
statement, which is useful for mapping a file layout via a
DSECT or whatever.  One benefit is that several programs can
use this layout, and maintenance is thus easier.  REXX does
not have a simple way of defining a record and must
dynamically split an input record into its components by
'substr', 'parse', etc.

The following method at least enables this process to be
duplicated in more than one EXEC, and the record layout to be
kept in one place.  The formatting statements are kept in one
file, which is executed one line at a time by the REXX
'interpret' command.  These lines can be more than simple
substring commands.  Conversion from hex etc can be done,
but bear in mind that the lines must be capable of being
executed one at a time by 'interpret'.

It would be possible to use a similar technique to build an
output record by concatenating fields.  In this case allowance
would have to be made for uninitialized fields to be blanked or
zeroed.  There may not be the same need, however, since it is
likely that the record can only be created by one program.

/*  Sample EXEC to read a file PERSON FILE A and             *
 *  display a few fields.                                    *
 *  The layout of this file is in PAYFMT LAYOUT A            */
j = 0
do forever
   'EXECIO 1 DISKR PAYFMT LAYOUT A (VAR FMTLINE'
   if rc ¬=0 then leave
   if left(fmtline,1)         ='*' then   /* ignore comments */
   do
      j = j+1                       /* save all lines needed */
      payfmt.j = fmtline            /* to format a record    */
   end
end
payfmt_count = j
do forever
   'EXECIO 1 DISKR PERSON FILE A (VAR PAYREC'
   if rc ¬=0 then leave
   do j=1 to payfmt_count
      interpret payfmt.j
   end
   say 'Name' payname 'Sex' paysex 'Department' paydept
end
exit


PAYFMT LAYOUT

***************************************************
*      This file contains all commands needed     *
*      to format "payrec".                        *
*      All lines beginning with * will be ignored *
***************************************************
payname = substr(payrec,1,10)
paysex  = substr(payrec,11,1)
paydept = substr(payrec,12,8)

    ...  etc. ...

    File: PERSON FILE A
BROWN     MBUYING       ... etc.  ...
SMITH     FCOMPUTER          ,,
ROBINSON  MFINANCE           ,,

John Illingworth
Empire Stores Ltd (UK)

