RECEIVE replacement EXEC

It was noticed that, when receiving PRT files from the virtual
reader of a CMS machine to a mini-disk, the printer control
characters in the first column were lost.  The QDP EXEC
performs similarly to RECEIVE, allowing most options, but
will retain the print control characters.  It should be noted that
it will only work on PRT files.


QDP EXEC

/* DESCRIPTION : Receives a reader file and keeps the printer         */
/*             : carriage controls.                                   */
arg spoolid fn ft fm options
/* Hold RDR so file is not purged accidentally */
 'CP SPOOL RDR HOLD'
  call a_initialise
  call b_process_params
  if qdp_purge = 'YES'
     then 'CP PUR RDR' spoolid
     else call c_process
  call d_write_log
/* Close and release reader */
 'CP CLOSE RDR'
 'CP SPOOL RDR NOHOLD'
  if qdp_leave  = 'PURGE'
     then 'CP PUR RDR' spoolid
  if qdp_purge ¬= 'YES'
     then call e_say_message
  set emsg on
  set imsg on
exit quit_rc
/* Initialise variables. Check parameters & file.                     */
a_initialise:
 quit_rc = 0
  set emsg off
  set imsg off
/* Constant lists for later use */
   ccw_commands = '03 0B 13 1B 8B 01 09 11 19 89'
   comm_data    = 'NNNNNYYYYY'
   comm_pcc     = '+ 0-1+ 0-1'
/* Variables needed throughout run */
   stored_pcc         = '+'
   line_num           = 0
   last_nonblank_line = 0
return
/* Check which options are required.                                  */
b_process_params:
/* Parameter must be numeric and in the correct range */
   if datatype(spoolid) ¬= 'NUM' | spoolid > 9999
      then call quit 1 256
/* Ensure 4 digits */
   spoolid = right(spoolid,4,'0')
/* Look through reader for specified file */
   details = ''
  'EXECIO * CP ( BUFFER 50000 STRING CP Q RDR * ALL'
   do queued()
      pull reply
      if word(reply,2) = spoolid
         then details = reply
   end
/* Must be on reader */
   if details = ''
      then call quit 2 256
/* Must be a print file */
   if word(details,4) ¬= 'PRT'
      then call quit 3 256
   call ba_check_options
   call bb_check_filename
/* Select spool file */
   PARSE VALUE DIAG(14,'SF','00C',SPOOLID),
         WITH CC 2 . 3 RYP1 7
   if cc ¬= 0
   then call quit 4 256
return
/* Go through options and check they are valid.                       */
ba_check_options:
  /* Set up defaults */
  qdp_fn      = fn
  qdp_ft      = ft
  qdp_fm      = 'A'
  qdp_log     = 'LOG'
  qdp_replace = 'NOREPLACE'
  qdp_prompt  = 'MINPROMPT'
  qdp_date    = 'NEWDATE'
  qdp_leave   = 'PURGE'
  qdp_stack   = 'NO'
  qdp_purge   = 'NO'
  options     = strip(options)
  if options  = "" then return
  /* Check for '(' at start to make syntax same as receive */
  if left(options,1) ¬= '('
     then call quit 6 256
  /* Check for ')' at start to make syntax same as receive */
  if right(strip(options),1) = ')'
     then do
           /* Remove trailing bracket */
           lth     = length(options)
           lth     = lth - 1
           options = left(options,lth)
          end
  /* Remove '(' from start */
  options = substr(options,2,)
  /* Go through option word-by-word */
  do loop_count  = 1 to words(options)
     this_option = word(options,loop_count)
     select
       when abbrev('PURGE',this_option,1) = 1
            then qdp_purge   = 'YES'
       when abbrev('STACK',this_option,1) = 1
            then qdp_stack   = 'YES'
       when abbrev('LEAVE',this_option,3) = 1
            then qdp_leave   = 'LEAVE'
       when abbrev('LOG',this_option,1) = 1
            then qdp_log     = 'LOG'
       when abbrev('NOLOG',this_option,3) = 1
            then qdp_log     = 'NOLOG'
       when abbrev('REPLACE',this_option,1) = 1
            then qdp_replace = 'REPLACE'
       when abbrev('NOREPLACE',this_option,3) = 1
            then qdp_replace = 'NOREPLACE'
       when abbrev('NEWDATE',this_option,2) = 1
            then qdp_date    = 'NEWDATE'
       when abbrev('OLDDATE',this_option,2) = 1
            then call quit 9 256
       when abbrev('NOPROMPT',this_option,3) = 1
            then qdp_prompt  = 'LOG'
       when abbrev('MINPROMPT',this_option,1) = 1
            then qdp_prompt  = 'LOG'
       when abbrev('FULLPROMPT',this_option,1) = 1
            then call quit 8 256
       otherwise call quit 7 256
     end
  end
return
/* Check fn ft fm to see if already exists etc....                    */
bb_check_filename:
  /* Don't need to check a file if you are purging it ! */
  if qdp_purge = 'YES' then return
  if strip(fm) = "=" |,
     strip(fm) = ""
     then qdp_fm = 'A'
     else qdp_fm = fm
  if strip(fn) = "=" |,
     strip(fn) = ""
     then qdp_fn = word(details,10)
  if strip(ft) = "=" |,
     strip(ft) = ""
     then qdp_ft = word(details,11)
  if strip(qdp_fn) = "" |,
     strip(qdp_ft) = ""
     then call quit 10 256
  /* Check filemode is R/W */
 'DESBUF'
 'Q DISK' left(qdp_fm,1) '(STACK'
  do queued()
     pull disk_info
  end
  if word(disk_info,4) ¬= 'R/W'
     then call quit 13 112
  set emsg off
  if qdp_replace = 'REPLACE' then 'ERASE' qdp_fn qdp_ft qdp_fm
 /* Does it already exist ? */
 'STATE' qdp_fn qdp_ft left(qdp_fm,1)
  src = rc
  set emsg on
  if src = 20
     then call quit 15 24
  if src = 0
     then call quit 11 28
  /* Make sure file is in the correct format - FN FT FM (OPTIONS */
  if left(qdp_fn,1) = '(' |,
     left(qdp_ft,1) = '(' |,
     left(qdp_fm,1) = '('
     then call quit 12 256
return
/* Go through reader file                                             */
c_process:
/* Once round loop for each block in file */
  do forever
     /* Read block */
     PARSE VALUE DIAG(14,'RNSB','00C'),
           WITH CC 2 . 3 RYP1 7 . 9 BUFFER
     if cc¬= 0 then leave
     /* Convert data */
     recs_in_buffer = c2d(substr(buffer,13,4))
     curr_ccw_ptr   = 17
     do recs_in_buffer    /* loop for each record in block */
        call ca_process_record
     end
     if quit_rc ¬= 0 then leave
  end
return
/* Change record from hex to characters & write to file.              */
ca_process_record:
/* Get details of next spool record */
   call caa_get_next_record
   if ccw_flags = '70'
      then do
            if stored_pcc == '' | stored_pcc = '+'
               then nop
               else call cab_write_record stored_pcc
            data_ptr = 0
            data_len = 0
            next_ccw = curr_ccw_ptr + 8
            stored_pcc = data_pcc
           end
      else do
            data_ptr = curr_ccw_ptr + ,
                       c2d(substr(buffer,curr_ccw_ptr + 1,3))
            data_len = c2d(substr(buffer,curr_ccw_ptr + 6,2))
            line = substr(buffer,data_ptr,data_len)
            next_ccw = curr_ccw_ptr + ,
                       c2d(substr(buffer,curr_ccw_ptr + 11,1))
            if data_ind = 'Y'
               then call cab_write_record stored_pcc, line
               else call cab_write_record stored_pcc
            stored_pcc = data_pcc
           end
  curr_ccw_ptr = next_ccw
return
/* Read next rec.                                                     */
caa_get_next_record:
/* Get channel control word command */
  ccw_command = c2x(substr(buffer,curr_ccw_ptr,1))
/* Find it in preset list */
  comm_ptr = find(ccw_commands, ccw_command)
/* Error if unknown */
  if comm_ptr = 0
     then call quit 5 256
/* if 'no data' command, get equivalent 'data' command */
  if comm_ptr < 6
     then equiv_pcc = word(ccw_commands,comm_ptr + 5)
     else equiv_pcc = ''
  data_ind = substr(comm_data,comm_ptr,1)
  data_pcc = substr(comm_pcc ,comm_ptr,1)
  ccw_flags = c2x(substr(buffer,curr_ccw_ptr+4,1))
return
/* Write record to file.                                              */
cab_write_record:
  /* If there is an error, ignore the rest of the program. */
  if quit_rc ¬= 0 then return
  line_num = line_num + 1
  p1 = arg(1)
  p2 = arg(2)
  if p1 == ''
     then p1 = ' '
  if p1 = '1'
     then line_num = last_nonblank_line + 1
  if p1 = '1' | p2 ¬= ''
     then last_nonblank_line = line_num
 'desbuf'
  output = p1||p2
 'EXECIO 1 DISKW' qdp_fn qdp_ft qdp_fm LINE_NUM 'F 133 (STRING' output
  src = rc
  if src ¬= 0
     then call quit 14 src
return
/* Write information to USERID() NETLOG file                          */
d_write_log:
 'desbuf'
 'id (stack'
  pull card
  whereabouts = word(card,3)
  sent_fn     = word(details,10)
  sent_ft     = word(details,11)
  if strip(sent_fn) = "" then sent_fn = '(none)'
  if strip(sent_ft) = "" then sent_ft = '(none)'
  output = 'QDP:' left(qdp_fn,8) left(qdp_ft,8) left(qdp_fm,2),
           'recv from' left(word(details,1),8) 'at',
            left(whereabouts,8) 'on' date(u) time(),
           'sent as' left(sent_fn,8) left(sent_ft,8)
  if qdp_log = 'LOG' then
    'EXECIO 1 DISKW' userid() 'NETLOG A0 0 (FINIS STRING' output
return
/* Fatal-error routine.                                               */
e_say_message:
  mess1 = qdp_fn qdp_ft qdp_fm
  if qdp_replace = 'REPLACE' then mess1 = mess1 || ' replaced'
                             else mess1 = mess1 || ' created'
  mess2 = 'Record length is 133 Bytes'
  mess3 = 'File' qdp_fn qdp_ft qdp_fm 'recv from' word(details,1) 'at',
           whereabouts 'on' date(u) time() 'sent as' sent_fn sent_ft
  if qdp_stack = 'YES'
     then do
           if qdp_prompt = 'MINPROMPT'
              then do
                    push mess1
                    push mess2
                   end
           push mess3
          end
     else do
           if qdp_prompt = 'MINPROMPT'
              then do
                    say mess1
                    say mess2
                   end
           say mess3
          end
return
/* Help...                                                            */
help:
  clrscrn
  say "QDP : HELP                                                    "
  say "QDP will 'RECEIVE' a PRT file from the reader, but retain the "
  say "printer carriage controls that would otherwise be lost if you "
  say "were to receive the file.                                     "
  say "The format is identical to 'RECEIVE', and all options may be  "
  say "used, except OLDDATE, NOTEBOOK and FULLPROMPT.                "
  say "If you specify LEAVE as an option, the file will NOT be purged"
  say "from the reader.                                              "
  say "Please refer to 'RECEIVE' for any further help.               "
  mess = ' '
  src  = 0
return
/* Fatal-error routine.                                               */
quit:
  arg number src
  select
    when strip(spoolid) = "" then call help
    when number = 1
         then mess = "(" || spoolid || ") is not a valid spoolid"
    when number = 2
         then mess = "Can't find" spoolid "on reader"
    when number = 3
         then mess = spoolid "("word(details,10)") is not a 'PRT' file"
    when number = 4
     then mess = 'Unable to select specified listing file (cc =' cc  ')'
    when number = 5
         then mess = 'Unrecognised ccw command' ccw_command
    when number = 6
         then mess = 'Unexpected operand(s):' options
    when number = 7
         then mess = 'Unknown operand:' this_option
    when number = 8
         then mess = 'FULLPROMPT option is not valid for QDP.'
    when number = 9
         then mess = 'OLDDATE option is not valid for QDP.'
    when number = 10
         then mess =  'This is a unnamed file. Please specify',
                      'filename & filetype.'
    when number = 11
         then mess =  'File' qdp_fn qdp_ft qdp_fm 'already exists.',
                      'Please specify REPL option.'
    when number = 12
         then mess =  'Incorrect command structure: QDP spoolid',
                      'fn ft fm (options'
    when number = 13
         then mess =  'Error.' qdp_fm 'disk in not linked R/W.'
    when number = 14
         then mess =  'Error writing file to disk: RC='src
    when number = 15
         then mess =  'Invalid character in filename.',
                       qdp_fn qdp_ft qdp_fm
    otherwise mess = 'Error' number
  end
 'CP CLOSE RDR'
 'CP SPOOL RDR NOHOLD'
 'desbuf'
  if qdp_stack = 'YES' then push mess
                       else say  mess
  exit src

N Chandler, Clive Goodare
Product Consultant/System Designer
Quality Software Products (UK)                  c Quality Software Products 1991

