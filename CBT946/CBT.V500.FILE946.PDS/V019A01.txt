 Macro for DIAGNOSE 4
The DIAGNOSE 4 instruction examines CP storage.  It has, unfortunately, a very
inflexible format: it returns only full words and the address of each word must
be specified in the parameter list.  To circumvent these shortcomings and to
reduce coding times, I wrote the following macro and program to issue the
DIAGNOSE 4 instruction.
The macro has five parameters:
1    CP - this is the CP address to be examined.
2    OUT - this is the output area for the DIAGNOSE 4.
3    LENGTH - this is the number of bytes to retrieve; it may be any integer up
to 256.
4    OFFSET - this is an offset to be added to the CP parameter; it is useful
when examining control blocks.
5    SAVE - this points to a SAVEAREA to be used by the DIAG4 module; Register
13 is assumed.
A more detailed description of the parameters can be found in the macro
comments.

Notes:
1    This was written for VSE/SP Release 3.
2    The DIAG4 module should not cross a page boundary.
DIAG4 MACRO
         MACRO
&NAME    DIAG4 &CP=0,&LEN=4,&OUT=,&OFFSET=00,&SAVE=(13)
.*  MACRO USED TO ISSUE CP DIAGNOSE 4 INSTRUCTIONS.
.*   This macro destroys the contents of registers 1, 14, and 15.
.*  PARAMETERS:
.* 1  CP - address of CP storage to be retrieved.  This parameter may
.*            be in one of the following forms:
.*            A. (R) - R is assumed to be a register that contains
.*                     the CP address to be retrieved
.*            B. LABEL - LABEL is assumed to point to a full word of
.*                     storage whose value is the CP address to be
.*                     retrieved
.*            C. ABSOLUTE - the ABSOLUTE term is assumed to
.*                     resolve to a decimal number that will be
.*                     the value of the CP address to be retrieved.
.*                     If specified this way, it must be at least
.*                     two bytes long.
.*            D. SELF DEFINING - the SELF-DEFINING term is assumed to
.*                     be of the form : $'xxxxx' where:
.*                         $ is a valid assembler type
.*                     xxxxx is a valid string for $
.*            The default value for this parameter is 0.
.*
.*  2  LEN - This is an ABSOLUTE term that indicates the number
.*           of bytes to be retrieved. It is assumed to be a decimal
.*           number. A maximum of 256 bytes can be retrieved in a
.*           single call to this macro.
.*           The default value for this parameter is 4.
.*
.*  3  OUT - The address in which to place the retrieved CP storage.
.*           It may be in one of the following forms:
.*
.*           A. (R) -  R is assumed to be a register that points
.*                     to the output storage location.
.*           B. LABEL - LABEL is assumed to point to a full word of
.*                     storage whose value is the output storage
.*                     location.
.*
.*  4  OFFSET - Offset to be added to CP address given in CP
.*               parameter. It may be in any of the forms specified
.*               for the CP parameter.
.*           The default for this parameter is 0.
.*
.*  5  SAVE - The address to pass to the DIAG4 subprogram to use as
 .*                a save area. It may be specified as a REGISTER or
.*                a LABEL.
.*           The default value for this parameter is register 13.
.*
         CNOP  0,4
&NAME    DS    0H
         AIF (T'&OUT NE 'O').OUTOK
         MNOTE 4,'NO OUTPUT AREA SPECIFIED. MACRO TERMINATED'
         MEXIT
.OUTOK   ANOP
.* IS CP PARAMETER A REGISTER ?
         AIF ('&CP'(1,1) NE '(').CPNOTR
         LA    1,0(,&CP(1))
         AGO .STORCP
.CPNOTR  ANOP
.* IS CP PARAMETER A CONSTANT ?
         AIF ('&CP' (2,1) NE '''').CPSDEF
         LA    1,&CP
         AGO .STORCP
.CPSDEF  ANOP
.* IS CP PARAMETER SELF-DEFINING ?
         AIF (T'&CP NE 'N').CPLBL
         LA    1,&CP
         AGO .STORCP
.* ASSUME CP PARAMETER IS A LABEL
.CPLBL   ANOP
         L     1,&CP
.STORCP  ANOP
         ST    1,*+48
         AIF ('&OUT'(1,1) NE '(').OUTABS
         LA    1,0(,&OUT(1))
         AGO .STOROUT
.OUTABS  ANOP
         LA    1,&OUT
.STOROUT ANOP
         ST    1,*+44
         AIF (&LENGTH LE 256).LENOK
         MNOTE 4,'LENGTH MUST BE <= 256. MACRO TERMINATED'
         MEXIT
LENOK    ANOP
.* IS OFFSET PARAMETER A REGISTER ?
         AIF ('&OFFSET'(1,1) NE '(').OFNOTR
         LA    1,0(,&OFFSET(1))
         AGO .STOROF
.OFNOTR  ANOP
.* IS OFFSET PARAMETER A CONSTANT ?
         AIF ('&OFFSET'(2,1) NE '''').OFSDEF
         LA    1,&OFFSET
         AGO .STOROF
.OFSDEF  ANOP
.* IS OFFSET PARAMETER SELF-DEFINING ?
         AIF (T'&OFFSET NE 'N').OFLBL
         LA    1,&OFFSET
         AGO .STOROF
.* ASSUME OFFSET PARAMETER IS A LABEL
.OFLBL   ANOP
         L     1,&OFFSET
.STOROF  ANOP
         A     1,*+32                    ADD OFFSET TO ADDRESS
         ST    1,*+28                    ...AND STORE IT
.* IS SAVE PARAMETER A REGISTER ?
         AIF ('&SAVE'(1,1) NE '(').SVNOTR
         LA    13,0(,&SAVE(1))
         AGO .ENDSAVE
.* ASSUME OFFSET PARAMETER IS A LABEL
.SVNOTR  ANOP
          LA    13,&SAVE
.ENDSAVE ANOP
         MVC   *+20(1),=AL1(&LEN-1)
         LA    1,*+14                    LOAD PARAMETER ADDRESS
         L     15,=V(DIAG4)              LOAD DIAG4 MOD ADDRESS
         BALR  14,15                     GO DO IT
         B     *+12                      LEAVE MACRO
         DS    AL1                       LENGTH
         DS    AL3                       ADDRESS OF CP STORAGE
         DS    AL4                       AREA TO PLACE STORAGE
         MEND

DIAG4 PROGRAM
         TITLE 'ISSUE DIAGNOSE 4 INSTRUCTION'
*   INPUT  :   R1 -----> PLIST
*               PARM 1: 00XXXXXX = NUMBER OF BYTES (RELATIVE TO ZERO)
*                       XX000000 = ADDRESS
*               PARM 2: XX000000 = OUTPUT ADDRESS
*
         REGEQU
DIAG4    CSECT
         USING *,R15
         STM   R14,R12,12(R13)
         DROP  R15
         LR    R3,R15
         USING DIAG4,R3
*              GET PARAMETERS
         L     R5,0(,R1)          PARM #1 (FOR #BYTES)
         LR    R7,R5              PARM #1 (FOR ADDRESS)
         LA    R7,0(,R7)           CLEAR HIGH ORDER BYTE
         L     R11,4(,R1)         PARM #2
*              DETERMINE NUMBER OF WORDS TO RETRIEVE
*        SRL   R5,24              NUMBER OF BYTES TO GET
         STC   R5,EXBYTES         SAVE NUMBER OF BYTES FOR EXECUTE
         LA    R5,1(,R5)          MAKE RELATIVE TO 1
         STC   R5,NUMBYTES        SAVE NUMBER OF BYTES
         SRL   R5,2               NUMBER OF WORDS TO GET
         TM    NUMBYTES,X'03'     CHECK FOR NON-INTEGRAL # OF WORDS
         BZ    STRWORDS
         LA    R5,1(,R5)          ADD ONE MORE WORD FOR REMAINDER
STRWORDS DS    0H
         ST    R5,NUMADDR         STORE FOR DIAGNOSE 4
*              STORE ALL THE ADDRESSES FOR DIAGNOSE 4
         LA    R6,ADDRTAB         ADDRESS TABLE
LOOP     DS    0H
         ST    R7,0(,R6)
         LA    R6,4(,R6)
         LA    R7,4(,R7)
         BCT   R5,LOOP
*              ISSUE DIAGNOSE 4
         LA    R4,ADDRTAB
         L     R5,NUMADDR
         LA    R6,OUTPUT
         DIAG  R4,R5,4
*              MOVE OUTPUT & RETURN
         IC    R12,EXBYTES
         EX    R12,MVCOUT
         LM    R14,R12,12(R13)
         BR    R14                GOBACK
MVCOUT   MVC   0(,R11),OUTPUT
*              CONSTANTS
ADDRTAB  DC    64F'0'
NUMADDR  DC    F'0'
OUTPUT   DC    256X'00'
NUMBYTES DC    XL1'00'
EXBYTES  DC    XL1'00'
          DC    20F'0'
*
         DS    0F
         LTORG
         END   DIAG4
Michael Kilroy
Systems Programming Supervisor
Progress (USA)      ) Xephon 1988


























































