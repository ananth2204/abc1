Protecting files from ERASE

Sometimes, when erasing several CMS files from within
FLIST (or FILELIST), I have accidentally erased a file from
my A disk.

If the file was created on the previous day and no additional
changes were made, I could restore from a mini-disk back-up,
although it is time-consuming.  If it was created on the same
day, or substantial changes were made since the back-up, I
would have lost all or part of the work.  There are, of course,
utilities that will 'un-erase' (such as the RECOVER module,
May/June 1990 issues of VM Update), but they are usually
able to restore a file only if no other file activity has followed,
which is not always the case.  There are also those 'last resorts',
such as finding a compile listing of an erased file in your RDR
queue, reading it in and 'extracting' the source; but that won't
cover all cases, either.

A simple but effective solution is to 'extend' the CMS ERASE
command by front-ending it with an EXEC of the same name
as the command, which is able to determine which files should
be protected from erasure.  The table of protected files is
maintained within the EXEC itself.  Additionally, the EXEC
does not allow the use of an asterisk (wildcard) filename or
filetype.  Any parameter string that passes these two tests is
then passed along to the CMS ERASE command.

This method is effective against all direct, manual erases.  In
some conditions, where the ERASE request originates within
another EXEC or module, the command module may receive
control without being 'front-ended' with the ERASE EXEC; an
example is EXEC2.  The following EXEC2 code will go
directly to the CMS command:

     &TRACE OFF
     ERASE ANYFILE DATA A
     &EXIT

Note that a similar EXEC written in REXX acts differently; the
following REXX code will go first to our ERASE EXEC:

     /* */
     ERASE ANYFILE DATA A
     EXIT

Despite the cases where the front-end is bypassed, however,
the primary intent of the ERASE EXEC is to catch basic key
errors.

The files I choose to protect on my A disk include the ERASE
EXEC itself, various PROFILEs, and any source code that I
am actively working on.  When it is no longer necessary to
protect a file, it is simply dropped from the table.

/* ERASE EXEC - Front End to Prevent Erasure from R/W Disks */
arg instring
parse var instring xfn xft xfm '(' xopts
if xft = '' then signal EraseCmd   /* Let CMS issue rc(24) */
if xfn = '*' | xft = '*' then do
   say 'Wildcard filename or filetype not accepted'
   exit 24   /* Same return code as incomplete fileid */
   end
Ftab = ''
Ftab = Ftab || ' ' || 'ERASE EXEC'
Ftab = Ftab || ' ' || 'PROFILE EXEC'
Ftab = Ftab || ' ' || 'PROFILE XEDIT'
Ftab = Ftab || ' ' || 'ABC123 ASSEMBLE'
do i = 1 to words(Ftab) by 2
   if xfn = word(Ftab,i) & xft = word(Ftab,(i+1)) then do
      say 'File' xfn xft 'is protected from ERASE'
      exit 36    /* Same return code as read-only disk access */
      end
   end
EraseCmd:
'ERASE' instring
exit rc

Lawrence Holder
Senior Programmer/Analyst
UTM Computer Center (USA)                    c UTMCC 1991

