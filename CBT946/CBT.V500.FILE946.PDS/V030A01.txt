 Directory maintenance
The first REXX shown below is called DIRALIGN.  Its purpose is to make a DIRECT
file easier to read and maintain, thereby reducing the chance for errors.
DIRALIGN will reformat a file in standard format suitable for the DIRECT
command.  It assumes a filetype for the file of DIRECT.
Here is a short before and after sample showing how the output is easier to read
and maintain.
Before:
USER SOMEUSER ABCD 10M 16M G
* Sample user for testing purposes
IPL CMS PARM AUTOCR
OPTION ECMODE MAXCONN 65535 ACCT
IUCV ALLOW PRIORITY MSGLIMIT 255
CONSOLE 009 3215 T
SPOOL 00C 2540 READER*
SPOOL 00D 2540 PUNCH A
SPOOL 00E 1403 A
LINK MAINT4 190 190 RR
LINK MAINT4 19D 19D RR
LINK MAINT4 19E 19E RR
LINK MAINT4 319 319 RR
MDISK 191 3380 471 007 VMS005 MR ALL
After:
USER SOMEUSER ABCD   10M   16M G
* Sample user for testing purposes
IPL CMS   PARM   AUTOCR
 OPTION ECMODE  MAXCONN 65535  ACCT
 IUCV  ALLOW  PRIORITY MSGLIMIT 255
  CONSOLE 009 3215 T
   SPOOL 00C 2540 READER *
   SPOOL 00D 2540 PUNCH  A
   SPOOL 00E 1403 A
 LINK MAINT4       190  190   RR
 LINK MAINT4       19D   19D   RR
 LINK MAINT4       19E  19E   RR
 LINK MAINT4       319  319   RR
 MDISK 191 3380   471  007   VMS005 MR ALL   KAHEHAMA FIHOGECU
*! ==> End of user SOMEUSER
As can be seen, all lines are indented and spaced out where they can be more
easily seen and modified.  This process is continued throughout the DIRECT file
and makes quite a difference.  The indentation serves to point out different
types of card and group them together.  DIRALIGN will not change the order of
cards, but it makes it easier for a human to change the structure of the DIRECT
file to a more orderly one.
All of the following card types are supported with all known options as of this
writing.  (The options are not known by the EXEC, just the maximum amount of
them.)
y    *******   IBM Dirmaint separator - removed.
y    *!        DIRALIGN separator - removed.
y    (blank)   Human separator - removed.
y    *         Comment, copied without change unless its length is 1 character -
then removed: DIRECTORY written with one space between the three options.
y    USER, OPTION, ACCOUNT, CONSOLE, IPL, SPOOL, LINK, DEDICATE, IUCV, SPECIAL,
PROFILE, INCLUDE (aligned and written to output file).
y    MDISK (treated specially).  Unless the owning user-id is BACKUPC, all
missing passwords are added.  These passwords are eight random, alternating
consonants and vowels.  They do not replace existing passwords.  Then the record
is spaced and written.  (It has never invented a naughty word, but I am still
hopeful, - most of them look suspiciously Hawaiian.)
If a card is read for which there is no routine, DIRALIGN stops after displaying
the card and the line number where it was found.  The problem must be corrected
before DIRALIGN will successfully complete.
As in the example above, two extra cards are added during the run.  The first is
an 'End of User .....' card and the other is a blank line.  This helps one see
more easily where the user-id breaks are.  The 'End of User' card is prefaced by
*! so that it may be found and removed by the next execution of DIRALIGN.  Three
 additional cards are added at the end of the DIRECT file which signal 'End of
Directory'.  It is much more pleasant to see a directory which is aligned and
separated in such a way as this.  This EXEC can be run once in a while and bring
back the orderly look to your directory.
The output file is ALIGNED DIRECT and will be on the A disk of the user-id
executing DIRALIGN.
DIRALIGN
/* Fix up the Directory to look good */
arg dir
if dir = '' then dir = 'USER'
clrscrn
address command 'FINIS ALIGNED DIRECT *'
address command 'ERASE ALIGNED DIRECT *'
signal on error
signal on syntax
signal on halt
users = 0
skipped = 0
SAY 'Stacking 'dir' DIRECT *'
'EXECIO * DISKR 'dir' DIRECT * ( FINIS MARGIN 1 72'
say 'Processing 'queued()' stack entries.'
do line_ct = 1 to queued()
  parse pull comm_line
  orig_line = translate(comm_line)
  parse value orig_line with type opt1 opt2 opt3 opt4 opt5 opt6 opt7,
    opt8 opt9 opt10 opt11 opt12 opt13 opt14 opt15 opt16 opt17
  select
/*
   the following is for use with directories updated with IBM's
   DIRMAINT utility.

    when substr(type,1,8) = '*******' then
    do
      say 'Skipping ' comm_line
      skipped = skipped + 1
    end
*/
    when substr(type,1,2) = '*!' then nop
    when comm_line = '' then nop
/*
    do
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING 'comm_line
    end
*/
    when substr(type,1,1) = '*' then
    do
      if length(strip(comm_line)) = 1 then comm_line = ' '
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING 'comm_line
    end
    when type = 'USER' then
    do
      if symbo1(current_user) Â¬= lit then
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING *! ==> End of',
                                        ' user 'current_user
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING   '
                                          users = users + 1
      if users // 100 = 0 then say users' users processed.'
      opt = left(opt1,9)
      current_user = opt
      opt = opt left(opt2,9)
      opt = opt right(opt3,6)
      opt = opt right(opt4,6)
      opt =  opt left(opt5,8)
      opt = opt right(opt6,3)
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING 'type opt
    end
     when type = 'OPTION' then
    do
      opt =     left(opt1,8)
      opt = opt left(opt2,8)
      opt = opt left(opt3,8)
      opt = opt left(opt4,8)
      opt = opt left(opt5,8)
      opt = opt left(opt6,8)
      opt = '  OPTION  'opt
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING 'opt
    end
    when type = 'MDISK' then
    do
      opt = left(opt1,3)
      opt = opt left(opt2,6)
      opt = opt left(opt3,6)
      opt = opt left(opt4,6)
      opt = opt left(opt5,6)
      opt = opt left(opt6,2)
      if opt7 = '' & current_user <> 'BACKUPC' then
      do
        call randpass
        opt7 = passback
      end
      opt = opt left(opt7,8)
      if opt8 = '' & current_user <> 'BACKUPC' then
      do
        call randpass
        opt8 = passback
      end
      if current_user <> 'ACCVM' then opt = opt left(opt8,8)
      if opt9 = '' & current_user <> 'BACKUPC' then
      do
        call randpass
        opt9 = passback
      end
      if current_user <> 'ACCVM' then opt = opt left(opt9,8)
      opt = left(opt,64)
      opt = opt opt10
      'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING MDISK' opt
    end
    when type = 'ACCOUNT' then
      do
        opt = left(opt1,8)
        opt = opt left(opt2,8)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  ACCOUNT' opt
      end
      when type = 'IPL' then
      do
        opt = left(opt1,8)
        opt = opt left(opt2,8)
        opt = opt left(opt3,8)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  IPL' opt
      end
      when type = 'CONSOLE' then
      do
        opt = left(opt1,3)
        opt = opt left(opt2,4)
        opt = opt left(opt3,1)
        opt = opt left(opt4,8)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  CONSOLE' opt
      end
      when type = 'SPOOL' then
      do
        opt = left(opt1,3)
        opt = opt left(opt2,4)
         opt = opt left(opt3,8)
        opt = opt left(opt4,1)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING    SPOOL' opt
      end
      when type = 'LINK' then
      do
        opt = left(opt1,10)
        opt = opt left(opt2,6)
        opt = opt left(opt3,6)
        opt = opt left(opt4,5)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  LINK ' opt
      end
      when type = 'DEDICATE' then
      do
        opt = left(opt1,7)
        opt = opt left(opt2,3)
        opt = opt left(opt3,8)
       /* This is not yet complete - See Planning Guide and Reference */
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  DEDICATE' opt
      end
      when type = 'IUCV' then
      do
        opt =     left(opt1,8)
        opt = opt left(opt2,8)
        opt = opt left(opt3,8)
        opt = opt left(opt4,8)
        opt = opt left(opt5,8)
        opt = opt left(opt6,8)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING  IUCV  ' opt
      end
      when type = 'SPECIAL' then
      do
        opt = left(opt1,3)
        opt = opt left(opt2,5)
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING SPECIAL ' opt
      end
      when type = 'DIRECTORY' then
      do
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING DIRECTORY'
                                                         opt1 opt2 opt3
      end
      when type = 'PROFILE' then
      do
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING PROFILE'
                                                         opt1 opt2
      end
      when type = 'INCLUDE' then
      do
        'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING INCLUDE'
                                                         opt1 opt2
      end
     otherwise
       do
         say
         say 'Unimplemented type -' type' at line 'line_ct',
              quitting now.'
         say
         desbuf
         address command 'FINIS ALIGNED DIRECT *'
         address command 'ERASE ALIGNED DIRECT *'
         exit 99
       end
     end
   end
   say
   'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING *! ==> End ',
                                                 'of user 'current_user
   'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING   '
   'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING *!'
   'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING *! ==> End of',
                                                         ' Directory.'
   'EXECIO 1 DISKW ALIGNED DIRECT A 0 F 80 ( STRING *!'
   say users' users processed.'
   say skipped' cards skipped.'
   'FINIS ALIGNED DIRECT *'
   say
   exit
   error:
   say
   say 'Error 'rc '-' errortext(rc) '- occured on line' sigl
   say sourceline(sigl)
   say
   say 'Last input data was:'
   say comm_line
   desbuf
   'FINIS ALIGNED DIRECT *'
   say
   say users' users processed.'
   say skipped' cards skipped.'
   say
   exit 99
   syntax:
   say
   say 'Syntax error 'rc '-' errortext(rc) '- occured on line' sigl
   say sourceline(sigl)
   desbuf
   'FINIS ALIGNED DIRECT *'
   say
   say users' users processed.'
   say skipped' cards skipped.'
   say
   exit 99
   HALT:
   say
   say 'Execution terminated via User Request.'
   say
   desbuf
   exit
   RANDPASS: procedure expose passback
   passback =           substr('BCDFGHJKLMNPQRSTVWXYZ',random(1,21),1)
   passback = passback||substr('AEIOU',RANDOM(1,5),1)
   passback = passback||substr('BCDFGHJKLMNPQRSTVWXYZ',random(1,21),1)
   passback = passback||substr('AEIOU',RANDOM(1,5),1)
   passback = passback||substr('BCDFGHJKLMNPQRSTVWXYZ',random(1,21),1)
   passback = passback||substr('AEIOU',RANDOM(1,5),1)
   passback = passback||substr('BCDFGHJKLMNPQRSTVWXYZ;,random(1,21),1)
   passback = passback||substr('AEIOU',RANDOM(1,5),1)
   return
The following REXX EXEC is called DIRSORT.  It will do a block sort of a file in
standard format suitable for the DIRECT command.  It assumes a filetype for the
file of DIRECT.
The EXEC works in a way similar to ISAM (Indexed Sequential Access Method).
ISAM contained information in a small file (the INDEX file) which pointed to
other information in a large file (the DATA file).  Information could be found
quickly in the small file, then looked up in the big file with few I/Os as the
INDEX file record pointed directly to the record in the DATA file where the
desired information was recorded.  Only a keyword and record pointer needed to
be recorded in the INDEX file, the rest of the data being located in the DATA
file.
In the case of DIRSORT, the DATA file is the input file (filetype of DIRECT).
DIRSORT extracts information from that file and constructs the INDEX file.  This
INDEX file is sorted into the desired order, then used to fetch information from
 the DIRECT file, which is then written into a new DIRECT file in order by user-
id.
This process requires two passes of the DIRECT file.  The first pass is used to
extract all of the user-ids from the USER cards.  Also in this pass the record
number of each of the user cards is recorded along with the user-id itself.
These are written in pairs, one pair per record in the INDEX file named USERLIST
UNSORTED A.  This file is then sorted into ascending alphabetic sequence by
user-id.  The pointer is maintained along with the user-id to which it belongs
during this sort.
The output from the sort is named USERLIST SORTED A.  Before the user-ids can be
copied to the new file, one thing must be done.  There is always one card at the
start of a DIRECT file, which is the DIRECTORY card.  Other comment cards follow
as well as PROFILEs (where allowed).  These must be copied into the new file
first, then the actual process of building a sorted DIRECT file starts.
The output filename is SORTED DIRECT.  The process of building it constitutes
the second pass of the input file and runs as follows:
1    Read a record from the INDEX file (USERLIST SORTED).
2    Get the record number from this INDEX card.
3    Starting with that record number, copy all records from the unsorted
(input) DIRECT file to the sorted (output) DIRECT file up to, but not including,
the next 'USER' card.
4    Repeat the above steps until the INDEX file is exhausted.
When the INDEX file is exhausted, the process is complete.  We have found that
having the user-ids in order helps everyone who deals with the directory to be
able to make changes with fewer errors as similar users are grouped together and
it is easier to compare one to the other when needed.
After DIRSORT has finished, you must either manually rename DIRECT files or do a
'DIRECT' command against the SORTED DIRECT file.  The names were left alone to
avoid any confusion as to what is new, old and on-line.  The default input file
filename is 'USER'.
DIRSORT EXEC
/*   Sort the Directory into Alphabetic order by Userid */
arg dir
if dir = '' then dir = 'USER'
_ht = 'HT' /* reset for testing or production */
say 'Stacking 'dir' DIRECT * ...'
'EXECIO * DISKR 'dir' DIRECT * ( FINIS' /* Read all then close */
if rc <> 0 then exit rc
say 'Processing 'queued()' stack entries ...'
address command 'FINIS USERLIST UNSORTED A'
address command 'ERASE USERLIST UNSORTED A'
do cntr = 1 to queued()
  pull _user _name .
  if _user <> 'USER' then iterate cntr
  _name = left(_name,9)
  execio 1 diskw userlist unsorted a 0 f 80 '(' string _name cntr
end
'FINIS USERLIST UNSORTED A'
say 'Sorting ...'
set cmstype _ht
address command 'FINIS USERLIST SORTED A'
address command 'ERASE USERLIST SORTED A'
push 1 8
'SORT USERLIST UNSORTED A USERLIST SORTED A'
set cmstype rt
say 'Sorted ...'
address command 'ERASE USERLIST UNSORTED A'
/*  First put in the prologue of the directory
    (copy all the stuff before the first user card) */
do i = 1
  'EXECIO 1 DISKR 'dir' DIRECT * 0'
  pull _line
  parse value _line with _user .
  if _user = 'USER' then leave i
  'EXECIO 1 DISKW SORTED DIRECT A 0 F 80 (STRING '_line
end
 /* Now do the ISAM look alike function, get first record via pointer
   Then copy the rest of the userid (until the next 'USER' card  */
do forever
  'EXECIO 1 DISKR USERLIST SORTED A 0 ( LIFO'
  if rc Â¬=0 then
  do
    'FINIS * * *'
    'ERASE USERLIST SORTED A'
    exit rc
  end
  pull . start_line .
  'EXECIO 1 DISKR 'dir' DIRECT * 'start_line /* stack the user card */
  pull direct_line  /* read the user card */
  parse value direct line with . _user .
  say 'Processing : '_user
  'EXECIO 1 DISKW SORTED DIRECT A 0 F 80 ( STRING 'direct_line
  do i = 1
    start_line = start_line +1
    'EXECIO 1 DISKR 'dir' DIRECT * 'start_line /* read next card */
    if rc <> 0 & rc <> 2 then exit rc
    if rc = 2 then SIGNAL FINIS
    pull direct_line
    parse value direct_line with _user .
    if _user = 'USER' then leave i /* end of user */
    if _user = '*!'   then leave i /* end of directory */
    'EXECIO 1 DISKW SORTED DIRECT A 0 F 80 ( STRING 'direct_line
  end
end
FINIS:
'FINIS 'dir' DIRECT *'
'FINIS SORTED DIRECT *'
exit 0
Mike Morrow
VM developer/systems programmer
Integral Systems (USA)   ) M Morrow 1989































