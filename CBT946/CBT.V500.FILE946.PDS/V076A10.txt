Display a user's disk space

This is a new version of the MYSPACE EXEC that was
published in July 1987. This version is written in REXX as
opposed to EXEC 2, will support filepools (SFS dataspaces),
and will also display more than 6 mini-disks if the terminal
supports additional columns (greater than 80) or additional
lines (more than 24). The EXEC will detect the terminal size
and use whatever is available without modification. Similar
techniques could be incorporated into other EXECs where
required. I have also added many other features that were not
included in the original. The EXEC is heavily commented and
is pretty much self explanatory.

The EXEC works best when it is set up to run when you IPL or
use a PF key. Mine is set up as the last statement in my
PROFILE EXEC. There is one argument that can be passed to
the EXEC. A number (generally 15) can be used to display the
screen for 'arg' seconds before clearing the screen and exiting.
If an invalid number or no number is passed to the EXEC, the
screen will be displayed until you hit the enter key. Also, if
you make a mistake and type in a command before hitting
enter, the EXEC will stack the command and then exit. Your
command will then be executed from the stack.

/*  MYSPACE  - EXEC to display the status of a user's CMS disk space.
               Execute from the PROFILE EXEC.                         */
Parse Arg sec .                     /* Read in the parameters if any  */
'QUERY DISPLAY (STACK'                 /* Get the display size        */
Parse Pull . lin col .         /* Read in # of lines and line length  */
If col > 80                    /* Check for maximum line length...    */
   Then width = min(col,130)         /*   can't be greater than 130   */
   Else width = 80                   /*   Then set the default of 80  */
If lin > 24                    /* See if we can display more than 24  */
  Then window = 2                    /*   Yes... then 2 windows       */
  Else window = 1                    /*   No... then just one window  */
Do I=1 To 11                         /* Initialize the headers        */
  c.I = left('|  ' || substr('Disk Label   Disk Number  Filemode     ',
   'Access StatusCyl/Dev. TypeBlock Size   No. of files  Blocks Used  ',
   'Percent Used Blocks Free  Total Blocks ',(I*13)-12,13),17) || '- '
  End
dfm = ''                             /* Initialize SFS variables      */
dnm = ''
dbl = ''
dcm = ''
dpc = ''
'SET CMSTYPE HT'                    /* Don't display the CMS messages */
'LISTDIR (ACCESSED STACK'           /* Check for any SFS directories  */
Do Queued()                            /* We have some accessed...    */
  Parse Pull dirfm . ':' dirnm '.'     /* Save the access information */
  'QUERY LIMITS FOR' dirnm '(STACK LIFO'
                                  /*  Get the accounting information  */
  Parse Pull . . dirbl dircm '-' dirpc '%' .
  dfm = dfm dirfm                   /* Assign the variables to strings*/
  dnm = dnm dirnm
  dbl = dbl dirbl
  dcm = dcm dircm
  dpc = dpc dirpc
  End
'SET CMSTYPE HT'                       /* Turn on the CMS messages    */
'QUERY DISK * (STACK'                  /* Get the disk information    */
If rc ¬= 0
  Then Exit rc
Parse Pull .                           /* get rid of the garbage      */
Do J=1 to Queued()                    /* read in the disk information */
  Parse Pull recd
  If left(recd,1) = '-'                /* Was this an SFS directory?  */
    Then do                            /* Yes, it was                 */
      Parse Value recd with a.1 a.2 a.3 a.4 a.5 . a.6 a.7 a.8 .
      a.1 = word(dnm,wordpos(a.3,dfm)) /* Reassign the variables      */
      a.5 = '-SFS-'
      a.8 = word(dcm,wordpos(a.3,dfm))
      a.9 = word(dpc,wordpos(a.3,dfm))
      a.11 = word(dbl,wordpos(a.3,dfm))
      a.10 = a.11 - a.8                /* Calculate remaining blocks  */
    Else Do
      Parse Value recd with a.1 a.2 a.3 a.4 a.5 dty a.6 a.7 a.8 '-' ,
        a.9 a.10 a.11 .
      a.5 = a.5 || '/' || dty
      End
    a.9 = a.9 + 0
    Do I=1 To 11
      c.I = left(c.I || right(a.I,9),(j*10)+19)
      End
    End
Do I=1 To 11                           /* Fix the length of the lines */
  d.I = left(c.I,19)                   /* Set up alternate headers    */
  If substr(c.I,width) = ''    /* See if more than width of terminal  */
    Then Do
      Window = 1
      c.I = left(c.I,width-1) || '|'
      End
    Else Do                       /* If yes then set up the alternate */
      d.I = d.I || substr(c.I,width)
      c.I = left(c.I,width-1) || '|'
      d.I = left(d.I,width-1) || '|'
      End
  End
'VMFCLEAR'                             /* Clear the screen            */
Say '+' || copies('-',width-2) || '+'  /* +-------------------------+ */
Say '|' || center('AGS Information Services, Inc.',width-2) || '|'
Say '+' || copies('-',width-2) || '+'  /* +-------------------------+ */

'IDENTIFY (STACK'                    /* Get node and RSCS information */
Parse Pull . . nd . rs .

'EXECIO 1 CP (STRING CP QUERY CPUID'
                               /* Get the CPU serial number and type  */
Parse Pull . . cpu .
Say '|' || center('User:' userid() '  Node:' nd 'via' rs '  CPU Type:',
  substr(cpu,9,4) '-' substr(cpu,3,6),width-2) || '|'

If time(h) > 12                   /* This routine is used to simulate */
  Then Do                         /*  the Time(C) REXX function which */
    ind = 'pm'                    /*  is in newer REXX releases.      */
    hour = time('H') - 12
    End
  Else Do
    ind = 'am'
    hour = time('H')
    End
timec = hour || substr(time(),3,3) || ind
Say '|' || center('The Time is Now|' timec '-' subword(date(),1,1),
  date('M') || ',' right(date(),4),width-2) || '|'
'EXECIO 1 CP (STRING CP QUERY CPLEVEL' /* Get the CP level            */
Parse Pull cplvl
'QUERY CMSLEVEL (STACK'                /* Get the CMS level           */
Parse Pull cmslvl
'DESBUF'                               /* Clear the stack             */
Say '|' || center(cmslvl '-' cplvl,width-2) || '|'
'EXECIO 1 CP (STRING CP QUERY FILES'   /* Get number of spool files   */
Parse Pull . rdr . prt . pun .
If rdr = 'NO'                          /* Reader files                */
  Then rdr = 'No Reader, '
  Else rdr = rdr + 0 'Reader, '
If prt = 'NO'                          /* Printer files               */
  Then prt = 'No Printer, '
  Else prt = prt + 0 'Printer, '
If pun = 'NO'                          /* Punch files                 */
  Then pun = 'No Punch files, '
  Else pun = pun + 0 'Punch files, '
Say '+' || copies('-',width-2) || '+'  /* +-------------------------+ */
Do I=1 to 7                        /* Print the header and disk info  */
  Say c.I
  End
Say c.9
Say c.8
Say c.10
Say c.11
If window = 2                          /* More than one window?       */
  Then Do                              /* Then display some more...   */
    Say '+' || copies('-',width-2) || '+'
    Do I=1 to 7
      Say d.I
      End
    Say d.9
    Say d.8
    Say d.10
    Say d.11
    End
Say '+' || copies('-',width-2) || '+'  /* +-------------------------+ */
If sec ¬= '' & datatype(sec) = 'NUM'
                               /* Do we wait for the timer to end?    */
  Then Do
    Say left('|  There will be a' sec,
      'second pause for you to review this screen.',width-1) || '|'
    Say '+' || copies('-',width-2) || '+'
    'CP SLEEP' sec 'SEC'
    'VMFCLEAR'                         /* Clear the screen            */
    Exit
    End
Say left('| ' rdr prt pun 'Press <ENTER> to continue...',width-1) || '|'
Say '+' || copies('-',width-2) || '+'  /* +-------------------------+ */
Parse Pull str                 /* Read in any input the user typed in */
If str ¬= ''                        /* put it in the stack so it will */
  Then Queue str                       /* execute when we are done.   */
'VMFCLEAR'                             /* Clear the screen            */
Exit

Steven Kelly
Technical Specialist
AGS Information Services Inc (USA)
