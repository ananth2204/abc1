Sending a note to a user

Did you ever need to send a message to a user and the user
couldn't see it because his screen was on a panel or an XEDIT
session? Only when the user pressed the ENTER key could he
see your message. I found a way to display a message on a
user's screen as soon as the message arrives. Also, the sending
user receives, by default, an acknowledgement that the
message has arrived.

Additionally, the receiving user can set an answering message
that will be sent back to the sender. For example, user B sets
an answering message 'SNOTE ANSWER I'm not here'. User
A sends a message to user B 'SNOTE B Are you hungry?'.
User A gets an answer from user B 'I'm not here'.

User B can also set his messages to be routed to another user.
For example, user B routes a message to user C by 'SNOTE
ROUTE C'. User A sends a message to user B 'SNOTE B
How are you?'. The message is rerouted and user C receives
the message. User A gets the acknowledgment 'Message
received'.

To make this feature available, a user must have access to the
RNOTE and SNOTE modules, and to the SNOTE EXEC. The
user also must have the IUCV ALLOW entry in his directory.
The receiving user must load the RNOTE module in storage
and initialize it. It is best to write the following two statements
on his PROCEDURE EXEC:

      NUCXLOAD RNOTE
      RNOTE

The SNOTE MODULE must not be loaded in storage; the
SNOTE EXEC will do it.


SNOTE EXEC

/****/
/* This EXEC sends a note to another user                           */
/* It sets up an IUCV connection with the requested user and sends  */
/* the note via IUCV. The IUCV connection will be severed after     */
/* sending the note                                                 */
ADDRESS COMMAND
SET CMSTYPE RT
PARSE ARG user msg                         /* Get arguments         */
PARSE UPPER VAR user user                  /* User to upper         */
/* Ask for user to send the note to */
DO WHILE user = ''                         /* While user empty      */
  SAY 'Enter user to send the message: '   /* Prompt                */
  PULL user                                /* user                  */
END
/* Check different options */
SELECT
/* Set routing */
  WHEN user = 'ROUTE' THEN DO
    'GLOBALV SELECT SNOTE SETL ROUTE' msg  /* Set routing           */
    IF msg = '' THEN SAY 'Routing cleared' /* If routing cleared    */
    ELSE SAY 'Answer routed to' msg        /* Message routed to...  */
  END
/* Query option */
  WHEN user = 'QUERY' THEN DO              /* Query option          */
    PARSE UPPER VAR msg msg                /* Msg to upper          */
    msg = strip(msg)                       /* Clear blanks          */
    SELECT
      WHEN abbrev('ROUTE',msg,1) THEN DO   /* Query route           */
        'GLOBALV SELECT SNOTE GET ROUTE'   /* Get routing info      */
        IF route = '' THEN SAY 'Message routing not set' /* Not set */
        ELSE SAY 'Message routing set to' route /*Say routing set to.*/
      END
      WHEN abbrev('ANSWER',msg,1) THEN DO  /* Query answer          */
        'GLOBALV SELECT SNOTE GET ANSWER'  /* Get answer            */
        IF answer = '' THEN SAY 'Answer not set' /* If not set      */
        ELSE SAY 'Message answer set to' answer  /* Say answer      */
      END
      OTHERWISE DO                         /* Option not known      */
        SAY 'Query option' msg 'not known' /* Say it                */
      END
    END
  END
  WHEN user = 'ANSWER' THEN DO             /* Answer option         */
    'GLOBALV SELECT SNOTE SETL ANSWER' msg /* Set it                */
    IF msg = '' THEN SAY 'Answer cleared'  /* If answer cleared     */
    ELSE SAY 'Answer set to:' msg          /* Say it                */
  END
  WHEN word(msg,1) = 'SEND' THEN DO        /* Send option           */
    'GLOBALV SELECT SNOTE GET ANSWER'      /* Get answer            */
    'GLOBALV SELECT SNOTE GET ROUTE'       /* Get routing           */
    UPPER ROUTE                            /* Set to upper          */
    IF answer = '' THEN answer = 'Message received'   /* Set answer */
    ELSE answer = 'Answer from' userid() answer   /* Answer from .. */
    IF route ¬= '' & route ¬= user THEN DO /* Routing set           */
      SAY 'Msg from' user subword(msg,2,words(msg) - 1)   /* Say it */
      PARSE VAR msg . msg                  /* Parse message         */
      msg = 'via' user msg                 /* New message           */
      CALL send_note(route msg)            /* Send note             */
      PARSE VAR result rcs rmsg            /* Parse result          */
      IF rcs ¬= 0 THEN rmsg = answer '***' rmsg /* Set msg          */
      RETURN rmsg                          /* Return it             */
    END
    ELSE DO                                /* If routing not set    */
      SAY 'Msg from' user subword(msg,2,words(msg) - 1)   /* Say it */
      RETURN answer                        /* Return it             */
    END
  END
  OTHERWISE DO                             /* Send the note         */
    CALL send_note(user msg)               /* Send it               */
    PARSE VAR result rcs rmsg              /* Get result            */
  END
END
IF ¬datatype(rcs,'N') THEN rcs = 0         /* Set to 0              */
EXIT rcs
/* Send the note */
send_note:
PARSE ARG user msg                         /* Get arguments         */
UPPER user                                 /* User to upper         */
'NUCXLOAD SNOTE'                           /*Load program in storage*/
'SNOTE' user 'RNOTE'                       /* Send note             */
rcs = rc                                   /* Return code           */
SELECT                                     /* Save return code      */
  WHEN rcs = 0 THEN DO                     /* If return code 0      */
    DO WHILE msg = ''                      /* While message empty   */
      SAY 'Enter message to send: '        /* Prompt                */
      PULL msg                             /* Get message           */
    END
    'SNOTE SEND SEND' msg                  /* Send it               */
    SAY result                             /* Say result            */
  END
  WHEN rcs = 11 THEN DO                    /* Return code 11        */
    result = user 'is not logged on'       /* User not logged on    */
    SAY result                             /* Say it                */
  END
  WHEN rcs = 12 THEN DO                    /* Return code 12        */
    result = user 'has not initialzed the RNOTE program'   /* Error */
    SAY result                             /* Say it                */
  END
  OTHERWISE NOP                            /* Otherwise nop         */
END
                                           /*                       */
'SNOTE SEVERE'                             /* Sever connection      */
'NUCXDROP SNOTE'                           /* Drop program          */
RETURN rcs result                          /* Return result         */


RNOTE ASS

* IUCV program
RNOTE    CSECT
         PRINT NOGEN
         BALR  R12,0                    ADDRESSING
         USING *,R12                    ADDRESSING
         USING IPARML,R2                IPARML DSECT
         ST    R14,SAVE1                SAVE REGISTER 14
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
         XC    IUCVPARM,IUCVPARM        CLEAR PARAMETER LIST
         HNDIUCV SET,NAME=PROGRAMN,     DEFINE TO CMS                  C
               EXIT=ACCEPT,ERROR=HNDERR ACCEPT EXIT
EXIT     EQU   *
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         L     R14,SAVE1                RESTORE REGISTER 14
         BR    R14                      RETURN TO CMS
HNDERR   EQU   *
         XR    R15,R15                  CLEAR R15
         LINEWRT DATA=(HNDEMSG,L'HNDEMSG) MESSAGE HNDIUCV SET ERROR
         IC    R15,IPRCODE              HNDIUCV SET ERROR CODE
         B     EXIT
* Accept handler
ACCEPT   EQU   *
         BALR R12,0                     ADDRESSING
         USING *,R12                    ADDRESSING
         USING IPARML,R2                IPARML DSECT
         ST    R14,SAVE1                SAVE REGISTER 14
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
         LH    R5,IPPATHID              SAVE PATH-ID
         LA    R2,IUCVPARM              PARAMETER LIST
         XC    IUCVPARM,IUCVPARM        CLEAR IT
         STH   R5,IPPATHID              PATH-ID IN PARAMETER LIST
         CMSIUCV ACCEPT,NAME=PROGRAMN,EXIT=ACTION,PRMLIST=(R2)
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         XR    R15,R15                  CLEAR RETURN CODE
         L     R14,SAVE1                RESTORE REGISTER 14
         BR    R14                      RETURN TO CMS
* Interrupt handler
ACTION   EQU   *
         BALR R12,0                     ADDRESSING
         USING *,R12                    ADDRESSING
         USING IPARML,R2                IPARML DSECT
         ST    R14,SAVEI                SAVE REGISTER 14
         ENABLE INTTYPE=CONSOLE         DISABLE INTERRUPTS
         STCTL 0,0,WORKC0               WORK AREA
         NI    WORKC0+3,X'FD'           TURN IUCV INTERRUPT BIT OFF
         LCTL 0,0,WORKC0                LOAD CTL REG 0
         XC    IUCVPARM,IUCVPARM        CLEAR IT
         LH    R8,IPPATHID              STORE PATH-ID
         CLI   IPTYPE,X'08'             RECEIVE INTERRUPT ?
         BE    RECEIVE                  YES
         CLI   IPTYPE,X'09'             RECEIVE INTERRUPT ?
         BE    RECEIVE                  YES
SEVERE   EQU   *
         LA    R2,IUCVPARM              IUCV PARAMETER LIST
         XC    IUCVPARM,IUCVPARM        CLEAR PARAMETER LIST
         IUCV  SEVER,PATHID=(R8),PRMLIST=(R2) SEVER CONNECTION
         B     EXIT2                    EXIT
RECEIVE  EQU   *
         L     R9,IPMSGID               SAVE MESSAGE ID
         LH    R4,IPBFLN1               LENGTH OF MESSAGE BUFFER
         LA    R4,8(R4)                 INCREMENT 8 BYTES
         LR    R5,R4                    SAVE R4 IN R8
         CMSSTOR OBTAIN,BYTES=(R4)      GET STORAGE
         LR    R3,R1                    ADDRESS IN R3
         LR    R4,R0                    NUMBER OF BYTES IN R4
         MVC   0(8,R3),PLIST            FIRST ARGUMENT = 'EXEC'
         LA    R3,8(R3)                 INCREMENT R3
         SH    R4,=H'8'                 SUBTRACT 8 BYTES
         LA    R2,IUCVPARM              PARAMETER LIST
         IUCV  RECEIVE,BUFFER=(R3),BUFLEN=(R4),PATHID=(R8),PRMLIST=(R2)
         SH    R3,=H'8'                 RESTORE R3 TO ORIGINAL VALUE
         LA    R4,8(R4)                 NUMBER OF TOTAL BYTES OF STOR
         LA    R1,PLIST                 PARAMETER LIST
         LA    R0,EPLIST                EXTENDED PARAMETER LIST
         AR    R5,R3                    LENGTH OF MESSAGE
         ST    R5,ENDARGS               STORE END ADDRESS IN ENDARGS
         ST    R3,BEGARGS               STORE ADDRESS IN BEGARGS FIELD
         CMSCALL EPLIST=EPLIST,CALLTYP=FUNCTION CALL REXX FUNCTION
         CMSSTOR RELEASE,BYTES=(R4),ADDR=(R3) RELEASE STORAGE
         L     R5,SYSFUNRT              ADDRESS OF RETURN STRING
         LA    R7,16(R5)                ANSWER BUFFER
         L     R6,8(R5)                 LENGTH OF DATA
         XC    IUCVPARM,IUCVPARM        CLEAR IT
         IUCV  REPLY,ANSBUF=(R7),ANSLEN=(R6),PATHID=(R8),              C
               PRMLIST=(R2),MSGID=(R9)  REPLY TO MESSAGE
         L     R6,4(R5)                 INCREMENT 4
         LTR   R5,R5                    IF NO STORAGE WAS OBTAINED
         BE    EXIT2                    EXIT
         CMSSTOR RELEASE,DWORDS=(R6),ADDR=(R5) RELEASE RETURN STRING
         B     EXIT2                    EXIT
EXIT2    EQU   *
         STCTL 0,0,WORKC0               WORK AREA
         OI    WORKC0+3,X'02'           TURN IUCV INTERRUPT BIT ON
         LCTL 0,0,WORKC0                LOAD CTL REG 0
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         L     R14,SAVEI                RESTORE RETURN ADDRESS
         XR    R15,R15                  CLEAR RETURN CODE
         BR    R14                      RETURN
* Constants and literals
SAVE1    DS    F                        SAVE AREA
SAVEI    DS    F                        SAVE AREA
WORKC0   DS    F                        WORK AREA FOR CTL REG 0
SYSFUNRT DS    F                        ADDRESS OF RET. DATA FROM REXX
PLIST    DC    CL8'EXEC'                FIRST WORD OF TOKENIZED PRMLIST
         DC    CL8'SNOTE'               PROCEDURE NAME
COMVERB  DC    CL5'EXEC '               FIRST WORD OF EXTENDED PRMLIST
EPLIST   DS    0D
         DC    A(COMVERB)               FIRST WORD
BEGARGS  DS    F                        BEGIN ARGUMENTS
ENDARGS  DS    F                        END ARGUMENTS
         DS    F                        FOURTH WORD, MUST BE 0
         DS    F                        FIFTH WORD, MUST BE ZERO
         DC    A(SYSFUNRT)              ADDRESS OF RETURN DATA
PROGRAMN DC    CL8'RNOTE'               PROGRAM NAME
         DS    0D
IUCVPARM DC    XL40'00'                 IUCV PARAMETER LIST
HNDEMSG  DC    C'HNDIUCV SET ERROR'     HNDIUCV SET ERROR
*
         REGEQU
         COPY IPARML                    IPARML DSECT
         END


SNOTE ASS

* IUCV program
SNOTE    CSECT
         PRINT NOGEN
         BALR  R12,0                    ADDRESSING
         USING *,R12                    ADDRESSING
         ST    R14,SAVE14A              SAVE R14
         LR    R5,R1                    SAVE INPUT PARAMETER IN R5
         LA    R1,8(,R1)                INCREMENT 8
         CLC   0(4,R1),=C'SEND'         IF SEND REQUIRED
         BE    SENDN                    GO TO SEND ROUTINE
         CLC   0(4,R1),=C'SEVER'        IF SEVER REQUIRED
         BE    SEVE                     GO TO SEND ROUTINE
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
         HNDIUCV SET,NAME=PROGRAMN,     DEFINE TO CMS                  C
               EXIT=ACTION,ERROR=HNDEXIT
* Connect handler
CONNECT  EQU   *
         LA    R2,IUCVPARM              PARAMETER LIST
         USING IPARML,R2                IPARML DSECT
         XC    IUCVPARM,IUCVPARM        CLEAR IT
         LA    R5,8(R5)                 GET FIRST PARAMETER
         CLI   0(R5),X'FF'              NO PARAMETER
         BE    ERROR1A                  USER NOT ENTERED
         MVC   TARGETID,0(R5)           TARGET ID
         LA    R5,8(R5)                 GET SECOND PARAMETER
         CLI   0(R5),X'FF'              NO PARAMETER
         BE    ERROR2A                  USER PROGRAM NOT ENTERED
         MVC   TARGETPG,0(R5)           TARGET PROGRAM
         MVC   IPVMID,TARGETID          TARGET ID
         MVC   IPUSER(8),TARGETPG       TARGET PROGRAM
         CMSIUCV CONNECT,NAME=PROGRAMN,PRMLIST=(R2), PERFORM CONNECT   C
               EXIT=ACTION,ERROR=CONEXIT
         WAITECB ECB=ECBWAIT,FORMAT=OS  WAIT
         B     EXIT
CONEXIT  EQU   *
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         XR    R15,R15                  CLEAR RETURN CODE
         IC    R15,IPRCODE              INSERT RETURN CODE
         LR    R5,R15                   SAVE IN R5
         HNDIUCV CLR,NAME=PROGRAMN      CLEAR THIS PROGRAM FROM CMS
         LR    R15,R5                   RETURN CODE
         B     EXIT                     RESTORE R14
HNDEXIT  EQU   *
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         HNDIUCV CLR,NAME=PROGRAMN      CLEAR THIS PROGRAM FROM CMS
EXIT     EQU   *
         L     R14,SAVE14A              RESTORE R14
         BR    R14                      RETURN TO CMS
ERROR1A  EQU   *
         LINEWRT DATA=(EMSG1,L'EMSG1)   MESSAGE USER-ID MISSING
         LA    R15,100                  RETURN CODE
         B     EXIT                     EXIT
ERROR2A  EQU   *
         LINEWRT DATA=(EMSG2,L'EMSG2)   MESSAGE USER PROGRAM MISSING
         LA    R15,100                  RETURN CODE
         B     EXIT                     EXIT
* Sever and send
SEVE     EQU   *
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
         LA    R2,IUCVPARM              PARAMETER LIST
         XC    IUCVPARM,IUCVPARM        CLEAR IT
         STH   R8,PATH                  PATH-ID
         CMSIUCV SEVER,NAME=PROGRAMN,PRMLIST=(R2) SEVER
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         HNDIUCV CLR,NAME=PROGRAMN      CLEAR THIS PROGRAM
         L     R14,SAVE14A              RESTORE R14
         BR    R14                      RETURN TO CMS
SENDN    EQU   *
         OC    ECBWAIT,ECBWAIT          CONNECTION OK ?
         BZ    ERROR4                   ERROR ROUTINE
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
* Compute length of argument string and get storage
         LR    R3,R0                    EXTENDED PARAMETER LIST
         L     R5,4(R3)                 BEGIN OF ARGUMENTS
         LA    R5,5(R5)                 SKIP SEND ARGUMENT
         L     R6,8(R3)                 END OF ARGUMENTS
         SR    R6,R5                    LENGTH OF ARGUMENT STRING
         LA    R6,9(R6)                 + 9 BYTES FOR USER-ID
         CMSSTOR OBTAIN,BYTES=(R6)      GET STORAGE
         ST    R0,BUFLENG               STORAGE OBTAINED
         ST    R1,BUFADDR               ADDR OF STORAGE OBTAINED
* STORE USER-ID IN FIRST 8 BYTES OF STORAGE OBTAINED
         LR    R4,R1                    SAVE ADDRESS IN R4
         LR    R3,R0                    BYTES ALLOCATED
         LA    R8,DIAG0                 DIAGNOSE CODE 0
         LA    R9,DIAG0L                LENGTH
         DC    X'83890000'              DIAG 0 TO GET USER-ID
         MVC   0(8,R4),DIAG0U           USER-ID
         MVI   8(R4),C' '               MOVE BLANK
* MOVE ARGUMENT STRING INTO STORAGE OBTAINED
         LA    R8,9(R4)                 TO ADDRESS
         LR    R9,R3                    LENGTH
         SH    R9,=H'9'                 MINUS 9
         LR    R2,R5                    FROM ADDRESS
         LR    R3,R6                    LENGTH
         MVCL  R8,R2                    MOVE CHARACTERS
         L     R0,ANSLENG               LOAD LENGTH OF ANSWER BUFFER
         CMSSTOR OBTAIN,BYTES=(R0)      GET STORAGE
         ST    R0,ANSLENG               SAVE LENGTH OF STORAGE OBTAINED
         ST    R1,ANSADDR               SAVE ADDR OF STORAGE OBTAINED
* SEND THE DATA NOW VIA IUCV
         USING IPARML,R2                IPARML DSECT
         LA    R2,IUCVPARM              R2 PARAMETER LIST
         XC    IUCVPARM,IUCVPARM        CLEAR PARAMETER LIST
         L     R1,ANSADDR               ADDRESS OF ANSWER
         L     R0,ANSLENG               LENGTH OF ANSWER
         IUCV  SEND,TYPE=2WAY,PATHID=PATH,PRMLIST=(R2),BUFFER=(R4),    C
               BUFLEN=(R6),ANSBUF=(R1),ANSLEN=(R0)
         LR    R5,R15                   SAVE IN R5
         L     R0,BUFLENG               LENGTH OF BUFFER
         L     R3,BUFADDR               GET ADDR OF STORAGE OBTAINED
         CMSSTOR RELEASE,BYTES=(R0),ADDR=(R3) RELEASE STORAGE
         LTR   R5,R5                    GOOD RETURN CODE
         BNE   EXIT1                    IF NO ERROR MESSAGE
         IUCV  TESTMSG                  WAIT THE REPLY
EXIT1    EQU   *
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         XR    R15,R15                  CLEAR R15
         IC    R15,IPRCODE              RETURN CODE IN R15
         L     R14,SAVE14A              RESTORE R14
         BR    R14                      RETURN TO CMS
ERROR4   EQU   *
         LINEWRT DATA=(EMSG4,L'EMSG4)   MESSAGE CONNECT ERROR
         MVI   IPRCODE,X'04'            ERROR CODE
         B     EXIT1                    EXIT
ERROR3   DS    0H
         LINEWRT DATA=(EMSG3,L'EMSG3)   MESSAGE SEND ERROR
         MVI   IPRCODE,X'03'            ERROR CODE
         B     EXIT1                    EXIT
* Interrupt handler
ACTION   EQU   *
         BALR R12,0                     ADDRESSING
         USING *,R12                    ADDRESSING
         ST    R14,SAVE14I              SAVE RETURN ADDRESS
         ENABLE INTTYPE=NONE            DISABLE INTERRUPTS
         STCTL 0,0,WORKC0               WORK AREA
         NI    WORKC0+3,X'FD'           TURN IUCV INTERRUPT  BIT OFF
         LCTL 0,0,WORKC0                LOAD CTL REG 0
         LH    R8,IPPATHID              CLEAR R5
         CLI   IPTYPE,X'02'             INTERRUPT 2 ?
         BE    CONCOMP                  CONNECT
         CLI   IPTYPE,X'07'             INTERRUPT 7 ?
         BE    MSGCOMP                  MESSAGE COMPLETE
SEVERE   EQU   *
         USING IPARML,R2                IPARML DSECT
         LA    R2,IUCVPARM              PARAMETER LIST
         XC    IUCVPARM,IUCVPARM        PARAMETER LIST
         STH   R8,IPPATHID              PATH-ID
         CMSIUCV SEVER,NAME=PROGRAMN,PRMLIST=(R2) SEVER
         HNDIUCV CLR,NAME=PROGRAMN      CLEAR THIS PROGRAM FROM CMS
         B     EXIT2                    EXIT
CONCOMP  EQU   *
         MVC   PATH,IPPATHID            STORE PATH-ID
         OI    ECBWAIT,X'40'            MARK CONNECTION OK
         XR    R15,R15                  CLEAR R15
         B     EXIT2                    EXIT
MSGCOMP  EQU   *
         L     R6,ANSLENG               GET LENGTH OF ANSWER BUFFER
         L     R5,IPBFLN2F              GET REST OF ANSWER BUFFER
         SR    R6,R5                    COMPUTE LENGTH OF MESSAGE
         USING SHVBLOCK,R5              ADDRESSING
         LA    R5,SHV                   SHV BLOCK
         LA    R0,EPLIST                EXTENDED PARAMETER LIST
         LA    R1,EXECNA                EXEC NAME
         MVI   SHVCODE,SHVSTORE         STORE VALUE IN VARABLE
         MVC   SHVNAMA,=A(VARIABL)      VARIABLE NAME
         MVC   SHVNAML,=A(L'VARIABL)    LENGTH OF VARIABLE NAME
         MVC   SHVVALA,ANSADDR          ANSWER BUFFER
         ST    R6,SHVVALL               LENGTH OF VARIABLE
         CMSCALL EPLIST=(R0),PLIST=EXECNA,CALLTYP=SUBCOM,ERROR=EXIT2
         L     R0,ANSLENG               LOAD LENGTH OF BUFFER
         L     R2,ANSADDR               GET ADDR OF STORAGE OBTAINED
         CMSSTOR RELEASE,BYTES=(R0),ADDR=(R2) RELEASE STORAGE
EXIT2    EQU   *
         STCTL 0,0,WORKC0               WORK AREA
         OI    WORKC0+3,X'02'           TURN IUCV INTERRUPT BIT ON
         LCTL 0,0,WORKC0                LOAD CTL REG 0
         ENABLE INTTYPE=ALL             ENABLE INTERRUPTS
         L     R14,SAVE14I              RESTORE RETURN ADDRESS
         BR    R14                      EXIT
* Constants and literals
EXECNA   DC    CL8'EXECCOMM'            EXECCOMM INTERFACE
         DC    XL8'FFFFFFFFFFFFFFFF'
         DS    0F
EPLIST   DC    A(EXECNA)                EXTENDED PARAMETER LIST
         DS    F
         DS    F
         DC    A(SHV)
SHV      DC    XL(SHVBLEN)'00'          SHV BLOCK
VARIABL  DC    C'RESULT'                REXX VARIABLE
TARGETID DS    D                        TARGET USER-ID
TARGETPG DS    D                        TARGET PROGRAM
PROGRAMN DC    CL8'SNOTE'               OWN PROGRAM NAME
PATH     DS    H                        PATH-ID
ECBWAIT  DS    F                        CONNECT COMPLETE WAIT ECB
WORKC0   DS    F                        AREA FOR CTL REG 0
SAVE14A  DS    F                        REGISTER 14 SAVE AREA
SAVE14I  DS    F                        REGISTER 14 SAVE AREA
SAVES    DS    F                        REGISTER 14 SAVE AREA
ANSLENG  DC    X'00000255'              LENGTH OF ANSWER BUFFER
ANSADDR  DS    F                        ADDRESS OF ANSWER BUFFER
BUFLENG  DC    X'00000255'              LENGTH OF BUFFER
BUFADDR  DS    F                        ADDRESS OF BUFFER
EMSG1    DC    C'TARGET MACHINE ID MISSING'
EMSG2    DC    C'TARGET MACHINE PROGRAM NAME MISSING'
EMSG3    DC    C'Send error'
EMSG4    DC    C'PATH NOT CONNECTED TO TARGET MACHINE'
DIAG0    DS    2D                       DIAGNOSE CODE 0
DIAG0U   DS    D                        USER-ID FROM DIAG0
DIAG0L   EQU   *-DIAG0
IUCVPARM DC    XL40'00'                 PARAMETER LIST FOR IUCV
         REGEQU
         SHVBLOCK
         COPY IPARML                    IPARML DSECT
         END


SNOTE HELP

The SNOTE procedure sends a note to a user.
The format of the SNOTE command is:

+---------+------------------------------------------------------+
!         !                                                      !
! SNOTE   ! userid text                                          !
!         !                                                      !
!         ! +        +                                           !
!         ! ! ROUTE  ! <option 1>                                !
!         ! ! ANSWER ! <option 2>                                !
!         ! ! QUERY  !  ROUTE                                    !
!         ! !        !  ANSWER                                   !
!         ! ! HELP   !                                           !
!         ! ! ?      !                                           !
!         ! +        +                                           !
+---------+------------------------------------------------------+

where:
userid
     Is the user-id to send the message to.
text
     Is the text to send.
option 1
     Is the routing user. All arriving messages will be routed to this
     user. If not specified, the routing will be cleared.
option 2
     Is the answer to send back to the sending user. If not specified,
     the answer will be cleared and the sending user receives the
     default message: Message received.
QUERY
     ROUTE   Is the route setting.
     ANSWER  Is the answer setting.

Eugenio
Systems Programmer (Italy)

