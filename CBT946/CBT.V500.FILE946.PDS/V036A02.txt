Migrating CSP applications from VSE to a PC

Available with Release 3.2.0 of Cross System Product (CSP) was
the option of execution (only) of applications on a PC that have
been developed on a mainframe.  These applications could have
been developed in CSP under VM or under CICS in DOS/VSE.
Our installation opted to do the latter.  Having been the first CSP
user to install the 3.2.1 version in the Portland Oregon area (I
know, it is not always admirable to be first with these things!), we
needed to find a way that we could port our existing mainframe
CICS applications that were generated by CSP onto a PC for
remote execution.

First, we needed to define an extra partition transient dataset to
hold the files in CICS once output from CSP.  To do this, we
added the following entries into our DCT table:

	In the TYPE=SDSC1 section:

	DFHDCT        TYPE=SDSCI,                                  X
	              DSCNAME=ALFPUT,                              X
	              SUFFIX=AP,                                   X
	              RECFORM=FIXBLK,                              X
	              RECSIZE=256,                                 X
	              BLKSIZE=264,                                 X
	              TYPEFLE=OUTPUT                               X
	              DEVICE=FBA

	In the TYPE=EXTRA section:

	ALFP DFHDCT   TYPE=EXTRA,                                  X
	              DSCNAME=ALFPUT,                              X
	              OPEN=DEFERRED,                               X
	              DESTID=ALFP,                                 X
	              RESIDENT=NO

	The former replaces the CSP default definition of SYS000 as
a tape output.

Next, we need to add an entry in the CICS start-up file that will
define the sequential dataset (non-VSAM) to which the DCT will
be writing the transferred application:

	// DLBL ALFPUT,'CSP.ALFPUT',0,SD
	// EXTENT SYS021,SYSWK1,1,0,2,5000

Of course, this file can be anything that meets your installation's
standards, as long as ALFPUT is specified in the DLBL, and it
can reside anywhere you have room to place it.

To place this file in the extra partition transient dataset, one has to
export the application with the PUT option and then exit CSP.
Now log onto VM and start the VM REXX EXEC that will
transfer the file into VM, and then into a virtual PC disk for
transfer onto the PC.

There are no parameters to specify with this EXEC, so the format
is quite simple.  Just enter:

	CSPXFER

First, the screen is cleared.  Now, any prior access to a 'Z' disk is
released and any prior '123' disk is detached.  This is done in
order to create a 123/Z temporary disk that will hold the virtual
PC disk.  Now, 2500 blocks (FBA) are defined as a temporary
disk.  The screen is once again cleared and the screen display is
shown in Figure 1.

	CSP APPLICATION TRANSFER

Now building a temporary virtual disk...

Figure 1: Screen display

The screen is now turned off and the 123 temporary disk is
formatted as the 'Z' disk.

When this has completed, the PCDISK command, from PC/VM
BOND is used to create a virtual PC disk (called XFER) on the
temporary 123/Z disk that is 512K in size.  The command is:

	PCDISK CREATE XFER Z6 512K

Any disk accessed as 'N' is released, and any '222' disk is
detached.  Now the DOS/VSE disk that holds the extra partition
transient dataset (non-VSAM) file is accessed.  As outlined
earlier, this is the SYSWK1 volume in our installation.  This
volume belongs to the VM user WIIVSE and is the '222' disk.
This disk is then linked to as the '222' and accessed as the 'N' disk.

The screen is now cleared and the input and output files are
defined by the following FILEDEF instructions:

	FILEDEF INMOVE N DSN CSP.ALFPUT (RECFM F BLOCK 256

	FILEDEF OUTMOVE DISK CSPXFER ALFPUT Z

The exported CSP application is then transported from the extra
partition transient dataset to the CMS file on the temporary disk
that was just defined via the MOVEFILE command.

Once moved, the 222/N disk is released and detached.

Now, a small JCL job, RESETCSP JCL, is submitted that will
reset the dataset.  This JCL simply closes the queue file (ALFP)
and then re-opens it.  It was later discovered, however, that this
step is not necessary since each time a new application is exported
the extra partition transient dataset is automatically closed and
then reopened before any data is output to the file.

Now the screen display is activated again, and the screen is
cleared before the screen in Figure 2 is displayed.

	CSP APPLICATION TRANSFER
Now building CSP file newappl
Figure 2: Screen display

Newappl is the name of the CSP application that is being
constructed.  The EXEC was originally designed to dynamically
handle a variable number of CSP applications that could be
transferred at one time, and separate them into individual
applications as they are moved into the temporary PC disk
(XFER).  It was later discovered that current CSP export design
can only transfer a single application at a time.

The process begins by setting two program variables (N and R)
equal to 1.  N is used to control the relative record number on the
input file (CSPXFER ALFPUT Z), while R is used to control the
output relative record number in the application that is being
constructed.

Processing now enters a DO FOREVER loop.  Here, a record is
read from the input file via the EXECIO instruction, and placed
into the program variable LIN.  When a non-zero return code is
generated from this read it is assumed that the input file is at end
and the DO FOREVER loop is exited via the LEAVE instruction.

However, if a valid record is read, the program variable APPL is
set to the value of LIN starting in position 1 for a length of 2.
This program variable is then tested to see if it is equal to the
hexadecimal value of '0105'.  This value precedes each new
application that is output via the CSP export facility.

If the value is equal to X'0105', a second, nested, DO FOREVER
processing control loop is entered.  In this second processing loop,
the program variable NEWAPPL is set to the value contained in
LIN starting in position 3 for a length of 8.  The user information
message, 'Now building CSP file ...', is then displayed, showing
the name of the new CSP application that is being processed.  The
name of this new CSP application is pushed out to the program
stack (LIFO), along with 'EXP Z' as the following shows:

	PUSH NEWAPPL "EXP Z"

This is then written out via an EXECIO to a temporary workfile
called XFER FILES Z.  The program variable R is reset to 1 since
a new output application is about to be started.  The inner DO
FOREVER processing loop is now exited via the LEAVE
instruction.

The input line that was read into the variable LIN is now to be
output, with an EXECIO, into a separate CMS file with the same
name as the application itself.  This would look like:

	"EXECIO 1 DISKW" NEWAPPL "EXP Z" R "F  256 (VAR LIN"

This instruction line also ensures that the output file being built
will be a fixed length file of 256 characters.

Now both the N and R program variables are incremented by 1.
The processing in this DO FOREVER loop will continue building
a separate CMS file for each CSP application that is encountered
in the CMS holding file.  When the input file has been exhausted
the processing will continue as follows.

The screen will be turned off again, and the temporary CMS
holding file on the 'Z' disk (CSPXFER ALFPUT Z) will be
ERASEd.  The screen is then reactivated.

Now each of these separate CMS files (that contain a unique CSP
application) need to be inserted into the virtual PC disk (XFER).
Since this process was designed to handle a dynamic number of
applications in the CMS holding file, the names of all the separate
files were entered into a work file, XFER FILES Z.  This file is
used as outlined below.

First, the program variable, N, used to keep track of the relative
record count of the input file (XFER FILES Z), is set equal to 1.
Now another DO FOREVER processing control loop is entered.

Here, a record is read from the work file that contains the names
of all the CMS files that have been built out of the CMS holding
file.  If a non-zero return code is given, the DO FOREVER
processing control loop is exited via the LEAVE instruction.
Otherwise, the program variable APPL is used to hold the name
of the application read from the work file.  Now, the PCDISK
command is used to insert the CMS file into the virtual PC DISK
(XFER), as found on the following line:

	"PCDISK INSERT" APPL "EXP Z INTO XFER AS BINARY"

Now the screen is turned off and the CMS file that has just been
inserted into the virtual PC disk is ERASEd.  Afterwards, the
screen is reactivated, and the program variable, N, is incremented
by 1.  This ends the processing control loop.  This process is
repeated for all of the files that are listed in the temporary work
file.

Now the screen is cleared and the VM to virtual PC disk drive file
server mode is activated via the PCSTART instruction.  With this,
the PC BOND screen will be displayed for the user.

At this point the user transfers to the PC, copies the file from the
virtual PC disk and imports the CSP application into executable
format on the PC.  Once the file has been copied, the user will
'hot key' back to VM and press the PF3 key at this screen.

The REXX EXEC will now continue processing where it will
suspend the screen, release the "Z" disk and detach the 123 disk
before reactivating it.  At this point, the EXEC concludes
processing and returns the user to CMS.

CSPXFER EXEC

/* ****************************************************************** */
/* EXEC NAME:         CSPXFER                                         */
/* EXEC PURPOSE:      TRANSFER CSP MAINFRAME APPLICATIONS FROM VSE    */
/*                    TO VM AND THEN TO A VIRTUAL DISK FOR THE PC.    */
/* ARGUMENTS:         N/A                                             */
/* VARIABLES:         N       = NUMBER OF INPUT RECORD                */
/*                    R       = NUMBER OF OUTPUT RECORD               */
/*                    APPL    = VALUE '0105'X (DENOTES NEW CSP APPL)  */
/*                    NEWAPPL = NEW CSP APPLICATION NAME              */
/* WORK FILES:      CICS.WORK.PDX.CSP.ALFPUT = VSE EXTRA PARTION DATA */
/*                                             SET USED TO HOLD CSP   */
/*                                             'PUT' APPLICATIONS.    */
/*                  CSPXFER ALFPUT Z         = CMS WORK FILE COPIED   */
/*                                             FROM THE VSE FILE.     */
/*                    XFER FILES Z           = CMS WORK FILE STORING  */
/*                                             FILE NAMES OF THE CSP  */
/*                                             'PUT' APPLICATIONS.    */
/* ****************************************************************** */
/* CLEAR THE SCREEN.  RELEASE ANY PRIOR ACCESS TO A 'Z' OR '123'      */
/* DISK.  DEFINE A TEMPORARY DISK AS 123 (2500 BLOCKS).  CLEAR THE    */
/* SCREEN AGAIN, AND DISPLAY WHAT IS HAPPENING TO THE USER.  TURN     */
/* OFF THE SCREEN.  FORMAT THE 123 DISK AS 'Z'.  CREATE A VIRTUAL     */
/* DISK NAMES 'XFER' ON THE 123 'Z' DISK.                             */
/*
VMF CLEAR
"RELEASE Z"
"DETACH 123"
"DEFINE T3370 123 2500"
VMFCLEAR
SAY "                               CSP APPLICATION TRANSFER"
SAY "  "
SAY "  "
SAY "  "
SAY "NOW BUILDING A TEMPORARY VIRTUAL DISK..."
SET CMSTYPE HT
PUSH "TEMP"
PUSH "YES"
"FORMAT 123 Z"
"PCDISK CREATE XFER Z6 512K"
/* RELEASE ANY ACCESS TO 'N' AND '222' DISK.  LINK TO WIIVSE'S 222    */
/* (SYSWK1) DISK AND ACCESS AS 'N'.  CLEAR THE SCREEN.  DEFINE THE    */
/* INPUT FILE AS 'CICS.WORK.PDX.CSP.ALFPUT' AND THE OUTPUT FILE AS    */
/* 'CSPXFER ALFPUT Z'.  COPY (MOVE) THE INPUT TO THE OUTPUT FILE.     */
/* RELEASE ACCESS TO 'N' AND '222' DISK.                              */
"RELEASE N"
"DETACH 222"
"LINK WIIVSE 222 222 RR"
"ACCESS 222 N"
VMFCLEAR
"FILEDEF INMOVE N DSN CICS.WORK.PDX.CSP.ALFPUT (RECFM F BLOCK 256"
"FILEDEF OUTMOVE DISK CSPXFER ALFPUT Z"
"MOVEFILE"
"RELEASE N"
"DETACH 222"
/* SUBMIT A VSE BATCH JCL JOB THAT WILL CLOSE AND REOPEN THE CSP      */
/* EXTRA PARTION DATA SET, WHICH WILL EFFECTIVELY RESET THE FILE.     */
'SUBMIT RESETCSP JCL D'
/* ACTIVATE, CLEAR SCREEN AND DISPLAY THE PROCESS TO THE USER.  THE   */
/* PROCESSING LOOP WILL BEGIN READING EVERY RECORD OF THE INPUT FILE  */
/* (CSPXFER ALFPUT Z), BEGINNING WITH THE FIRST AND TERMINATE AFTER   */
/* READING THE LAST ONE.  THE KEY TO DENOTE A NEW CSP APPLICATION IS  */
/* STARTING IN THE INPUT FILE IS A HEX. '0105'.  TEST IF A NEW APPL.  */
/* HAS STARTED.  IF IT HAS, DISPLAY A MESSAGE TO THE USER AND SHOW    */
/* THE FILE THAT IS BEING CONSTRUCTED.  ALSO OUTPUT THE NAME OF THE   */
/* NEW CSP APPLICATION BEING BUILT INTO THE XFER FILES Z WORK FILE.   */
/* RESET THE OUTPUT FILE COUNTER (R) TO 1.  CONTINUE WITH THE NORMAL  */
/* PROCESS OF OUTPUTING THE INPUT RECORD TO THE OUTPUT FILE, AND ADD  */
/* 1 TO BOTH THE INPUT AND THE OUTPUT RECORD COUNTERS.                */
SET CMSTYPE RT
VMFCLEAR
SAY "                               CSP APPLICATION TRANSFER"
SAY "  "
SAY "  "
SAY "  "
N=1
R=1
DO FOREVER
  "EXECIO 1 DISKR CSPXFER ALFPUT Z" N "(VAR LIN"
  IF RC<>0 THEN LEAVE
  APPL=SUBSTR(LIN,1,2)
  IF APPL='0105'X THEN
     DO FOREVER
        NEWAPPL=SUBSTR(LIN,3,8)
        SAY "NOW BUILDING CSP FILE" NEWAPPL
        PUSH NEWAPPL "EXP Z"
        "EXECIO 1 DISKW XFER FILES Z"
        R=1
        LEAVE
     END
  "EXECIO 1 DISKW" NEWAPPL "EXP Z" R "F 256 (VAR LIN"
  N=(N+1)
  R=(R+1)
END
/* TURN THE SCREEN BACK OFF.  ERASE THE INPUT WORK FILE (CSPXFER      */
/* ALFPUT Z).  TURN THE SCREEN BACK ON.                               */
SET CMSTYPE HT
"ERASE CSPXFER ALFPUT Z"
SET CMSTYPE RT
/* READ THROUGH THE WORK FILE THAT CONTAINS THE NAMES OF ALL THE CSP  */
/* APPLICATIONS BEING TRANSFERRED, STARTING WITH THE FIRST RECORD.    */
/* WHEN THE END OF THE FILE IS REACHED, PROCESSING IS TERMINATED.     */
/* ASSIGN THE NAME OF THE CSP APPLICATION, AND INSERT THAT FILE INTO  */
/* THE VIRTUAL DISK (XFER) ON THE 'Z' DISK IN BINARY FILE FORMAT.     */
/* TURN THE SCREEN BACK OFF.  DELETE THE FILE THAT WAS JUST PLACED    */
/* INTO THE WORK FILE.  TURN THE SCREEN BACK ON.  INCREMENT BY 1 THE  */
/* INPUT RECORD COUNTER (N).                                          */
N=1
DO FOREVER
  "EXECIO 1 DISKR XFER FILES Z" N "(VAR LIN"
  IF RC<>0 THEN LEAVE
  APPL=SUBSTR(LIN,1,8)
  "PCDISK INSERT" APPL "EXP Z INTO XFER AS BINARY"
  "PCDISK INSERT" APPL "EXP Z INTO XFER AS BINARY"
  SET CMSTYPE HT
  "ERASE" APPL "EXP Z"
  SET CMSTYPE RT
  N+(N+1)
END
/* CLEAR THE SCREEN.  ENTER INTO PC BOND FILE TRANSFER MODE.          */
VMFCLEAR
PCSTART
/* TURN OFF THE SCREEN.  RELEASE THE 'Z', 123 DISK.  TURN THE SCREEN  */
/* BACK ON.                                                           */
SET CMSTYPE HT
"RELEASE Z"
"DETACH 123"
SET CMSTYPE RT

RESETCSP JCL
* $$ JOB JNM=RESETCSP,DISP=D,CLASS=Y,PRI=8
* $$ LST CLASS=V,DISP=D,DEST=(,OPERATOR)
// JOB RESETCSP    RESET THE PDX CSP ALFPUT FILE
*  JOB RESETCSP    RESET THE PDX CSP ALFPUT FILE (WITH A CLOSE)
// EXEC MTPBATCH
CEMT SET QUEUE(ALFP) CLOSED
/*
*  JOB RESETCSP    RESET THE PDX CSP ALFPUT FILE (WITH AN OPEN)
// EXEC MTPBATCH
CEMT SET QUEUE(ALFP) OPEN
/*
/&
* $$ EOJ

Chris Maneely
Senior Systems Programmer
Willamette Industries Inc (USA)	) Xephon 1989

