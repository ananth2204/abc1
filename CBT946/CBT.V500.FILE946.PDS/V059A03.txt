PROP routing routine (continued)

This month we conclude the article that gives the macros
necessary to allow a CMS user to add or delete himself from an
'alternative operator' list and receive messages from PROP.


OPSDATA MACRO

         MACRO
         OPSDATA &DSECT=YES
         AIF   ('&DSECT' EQ 'NO').START
OPSDATA  DSECT
.START   ANOP
         DC    CL4'OPSD'               EYE-CATCHER
MSGCNTI  DC    A(0)                    COUNT OF INBOUND MESSAGES
MSGCNTO  DC    A(0)                    COUNT OF OUTBOUND MESSAGES
@EPLIST  DS    A                       ORIGINAL R0
@TPLIST  DS    A                       ORIGINAL R1
@SCBLOCK DS    A                       ORIGINAL R2
@PVCTAB  DS    A                       PVCENTRY TABLE ADDRESS
@PVCTOPR DS    A                       START OF OPERANDS
@PVCTOPT DS    A                       START OF OPTIONS ... '('
@PATTERN DC    V(PATTERN)              PATTERN MATCHING ROUTINE
@QBUILD  DC    V(QBUILD)               BUILD A QUEUE ENTRY
@QFRET   DC    V(QFRET)                FREE A QUEUE ENTRY
@QGET    DC    V(QGET)                 DEQUEUE 1 ENTRY
@QLOC    DC    V(QLOC)                 LOCATE 1 ENTRY
@QPUSH   DC    V(QPUSH)                ADD 1 ENTRY TO TOP OF QUEUE
@QPURGE  DC    V(QPURGE)               FREE ENTIRE QUEUE
         SPACE ,
         SPACE ,
ABPSW    DS    0D                      ABEND RESTART PSW
         DC    X'FF000000'
         DC    AL4(0)
*-------                               * PARMS FOR DIAGNOSE COMMAND  *
DIAGPARM DC    A(0)                    COMMAND BUFFER
         DC    A(CPBUF)                RESPONSE BUFFER
         DC    A(0)                    COMMAND LENGTH
         DC    A(L'CPBUF)              RESPONSE LENGTH
PATTPARM DS    4A                      PARMS FOR PATTERN MATCH RTN
FLAG     DC    X'00'
FLAGINIT EQU   X'80'
FLAGABND EQU   X'40'
FLAGQADD EQU   X'20'
ENABLE   DC    X'FF'
         DC    XL2'00'                 RESERVED
*-------                               * DEFAULT PVC ENTRY FOR OPRNDS*
DFLTPVC  DS    0A
         DC    A(0)                       NEXT TOKEN POINTER
         DC    AL1(PVCEFN)                EXTENDED FILE NAME TYPE
         DC    AL3(0)
         DC    A(DFLTVMID)                --> DEFAULT PARAMTER
         DC    A(DFLTVMID)                --> DEFAULT PARAMTER
         DC    A(1)                       LENGTH(DEFAULT_PARAMETER)
DFLTVMID DC    CL8'*'                  DEFAULT IS ALL
         SPACE ,
USERQ    DS    A
         SPACE ,
FUNCNAME DS    CL8                     LEVEL-1 KEYWORD (ON,OFF,...)
OPULEN   DS    A                       LENGTH OF USER NAME
OPUSER   DS    CL8                     ALT_OPER USERID
TUSER    DS    CL8                     ALT_OPER USERID ('TO' USER)
FUSER    DS    CL8                     PROP RUSER ('FROM' USER)
         SPACE ,
QMLIST   QMNT  MF=L
QMLIST2  QMNT  MF=L
MSGLIST  APPLMSG APPLID=SMS,MF=L,MAXSUBS=2
ABXLIST  ABNEXIT MF=L
         SPACE ,
*-------                               * CP CMD WORK AREA AND BUFFER *
CPCMDHLN DS    A                       LENGTH OF FIXED PORTION + MSG
CPCMD    DS    CL18                    VARIABLE AREA TO HOLD CMD NAME
*                                         AND TARGET USERID
CPCMDFRM DS    CL8                     WHOM THE MSG IS FROM (SOURCE)
         DC    C' '
CPCMDNOD DS    CL8                     SOURCE'S NODE
CPCMDSEP DS    CL2                     SEPARATOR CHARACTERS
CPCMDLEN EQU   *-CPCMDFRM              LENGTH OF FIXED PORTION
CPCMDMSG DS    CL240                   MESSAGE BUFFER
CPBUF    DS    CL80                    RESPONSE BUFFER
CPCMDTXT DC    C'MSGNOH '              NAME OF CP COMMAND
         MEND


SMSPOS LKEDCTRL

%LIBRARY PROPLIB
%LEPARMS NCAL LIST XREF LET
 INCLUDE SMSPOS
 INCLUDE SMSPOSMN
 INCLUDE SMSPOSAB
 INCLUDE PATTERN
 INCLUDE QBUILD
 INCLUDE QFRET
 INCLUDE QGET
 INCLUDE QLOC
 INCLUDE QPUSH
 INCLUDE QPURGE
 NAME SMSPOS(R)


ALTOPS EXEC

/*---  Function:     Perform alternate operator maintenance      ---*/
/*---  Parms:        function, guest machine list                ---*/
/*---  Options:      USERID uid, OPERATOR uid                    ---*/
/*---  Description:  front-ends the PROP alternate operator      ---*/
/*---    module (SMSPOS). If functions mainly to set up user-    ---*/
/*---    friendly defaults and verifies syntax before calling    ---*/
/*---    SMSPOS. This is done because SMSPOS executes under      ---*/
/*---    the operator, and it is better to do the syntax         ---*/
/*---    checking, etc under the requesting user rather than     ---*/
/*---    the operator.                                           ---*/
trace
arg parms
langflag = 0                                     /* initialize flag */
x = queued()
'QUERY LANGUAGE ALL (LIFO'            /* see if lang already loaded */
do queued()-x
   pull resp
   if resp = 'SMS' then langflag = 1  /*  if there, set flag = TRUE */
end
if ¬(langflag) then 'SET LANG (ADD SMS USER'   /* load if not there */
if (rc ¬= 0) then do                     /* if unsuccessful, exit   */
   say 'UNABLE TO LOAD SMS USER LANGUAGE SYNTAX DEFINITIONS'
   exit 12
end
'PARSECMD 35E.ALTOPS (APPLID SMS'         /* parse command syntax   */
if (rc ¬= 0) then exit rc                 /* error in options       */
oper = 'OPERATOR'                         /* default operator id    */
/* Spin through list of guest machine masks, put into 1 variable    */
/* ('GVM'), and translate to upper case.                            */
user = ''
gvm = ''
do i = 3 to token.0 while (code.i ¬= 'OPTSTART')
   gvm = gvm translate(strip(token.i))
end
/* Skip over option starter (left paren.) and spin through options  */
do i = i + 1 by 2 to token.0
   j = i + 1
   if (code.i = 'KEYWORD') then do
      select
         when (token.i = 'OPERATOR') then ,
            oper = translate(strip(token.j))
         when (token.i = 'USERID')   then ,
            user = translate(strip(token.j))
         otherwise nop
      end
   end
end
func = strip(token.2)                       /* get function name    */
gsm  = strip(gvm,'L')                       /* strip leading blanks */
if (user = '') then do                      /* userid not specified */
   if (func = 'LIST') then user = '*'       /* LIST default = '*'   */
   else user = userid()                     /* other default = us   */
end
if (gvm = '') then gvm = '*'              /* default gvm list = '*' */
'CP MSG' oper 'CMD SMSPOS' func gvm '(USER' user   /* issue command */
exit


ISMSPOS EXEC

/* ISMSPOS EXEC TO LOAD SMSPOS AND SET UP MAINT AS  */
/* THE INITIAL ALTERNATE OPERATOR                   */
'SET LANGUAGE (ADD SMS USER'
'NUCEXT SMSPOS'
IF (RC) THEN
 DO
   'FILEDEF PROPLIB DISK PROPLIB LOADLIB *'
   'NUCXLOAD SMSPOS SMSPOS PROPLIB (SYS SER'
   'FILEDEF PROPLIB CLEAR'
 END
'SMSPOS ON * (USER MAINT'
EXIT


SMSUME REPOS

* POF (Programmable Operator Facility) Message Repository            *
* Format: NNNNFFLLS text                                             *
*         NNNN = message number                                      *
*         FF   = format number                                       *
*         LL   = line number                                         *
*         S    = severity                                            *
& 3 Specifies substitution character plus message number digits
* ALTOPS Messages                                                    *
01000101T &1 Was not called as a nucleus extension
01010101E Error calling &1, rc = &2
01100201T &1 Was not passed address of ALTOPS common workarea
01110101E No function name was specified
01110201E USERID was not specified
01200101I There are no alternate operators at this time
01210101E Userid &1 is not an alternate operator
01220101I ALTOPS ON complete for &1
01220201I ALTOPS OFF complete for &1
01230101I OPERATOR: &1
01230201I           &1
01900101S Abend &1 occurred in routine ALTOPSMN
01910101I Abend PSW = &1
01920101I Abending instruction was &1
01930101I REGS = &1
01930201I        &1
01990101I ALTOPS facility termination complete


SMSUPA DLCS

:* Command syntax definitions for application SMS                    *
:DLCS SMS USER AMENG :;
:* SMSPOS (SMS PROP message router)                                  *
:CMD 30D.SMSPOS SMSPOS :;
   :KW.1 ON 2 :;
      :OPR FCN(INVALID,FN,EFN) REPEAT :;
      :OPT KWL(<USERID 1>) FCN(INVALID,FN) :;
   :KW.1 OFF 3 :;
      :OPR FCN(INVALID,FN,EFN) OPTIONAL REPEAT :;
      :OPT KWL(<USERID 1>) FCN(INVALID,FN,FN) :;
   :KW.1 LIST 1 :;
      :OPR FCN(STRING) OPTIONAL :;
      :OPT KWL(<USERID 1>) FCN(INVALID,FN,STRING('*')) :;
   :KW.1 CLEAR 5 :;
   :KW.1 ROUTE 4 :;
      :OPR FCN(TEXT) :;
   :KW.1 SEND 2 :;
      :OPR FCN(INVALID,FN) :;
      :OPR FCN(INVALID,FN,STRING('*')) :;
      :OPR FCN(TEXT) :;
:* ALTOPS (Alternate Operator entry command)                         *
:CMD 35E.ALTOPS ALTOPS :;
   :KW.1 ON 2 :;
      :OPR FCN(INVALID,FN,EFN) OPTIONAL REPEAT :;
      :OPT KWL(<USERID   1>) FCN(INVALID,FN) :;
      :OPT KWL(<OPERATOR 1>) FCN(INVALID,FN) :;
   :KW.1 OFF 3 :;
      :OPR FCN(INVALID,FN,EFN) OPTIONAL REPEAT :;
      :OPT KWL(<USERID 1>) FCN(INVALID,FN,FN) :;
      :OPT KWL(<OPERATOR 1>) FCN(INVALID,FN) :;
   :KW.1 LIST 1 :;
      :OPR FCN(STRING) OPTIONAL :;
      :OPT KWL(<USERID 1>) FCN(INVALID,FN,STRING('*')) :;
      :OPT KWL(<OPERATOR 1>) FCN(INVALID,FN) :;
/*--           END SMSPOS PACKAGE                                --*/

Michael L Brocious and Dennis Hoover
Shared Medical Systems Corporation (USA)
