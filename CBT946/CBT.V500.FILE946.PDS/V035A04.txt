Single console image facility

While the following EXEC is thoroughly documented internally, a
few additional comments may be in order:

%	At first, the idea of modifying real storage sounds dangerous,
but this is about as safe as you can get; the risk of damage to
the system is negligible.

%	We use this EXEC as a way of accessing any disconnected
machine without the need to log-on to it.

%	We also use it in a highly automated shut-down procedure
where we shut down any number of service virtual machines
prior to issuing the CP SHUTDOWN command.

This EXEC performs three functions:

1	It modifies the secondary user-id field (VMSECUSR) in a
primary user's VMBLOK; this is the field which is normally
defined (statically) by the secondary user-id parameter of the
CONSOLE statement in the CP directory.  This allows
another (secondary) user to operate the primary user's console
if the primary user is disconnected.

2	It executes one command for a specified user.  Prior to
executing the command, it temporarily sets the issuing user as
the secondary user-id.  After executing the command, it
restores the original messages which are issued after the
original secondary user-id has been reset.  In an attempt to
minimise this effect, this EXEC SLEEPs for an arbitrary time
interval of 3 seconds before the reset.  The ideal solution
would be to wait until the command completes, but this is not
an easy thing to do.

3	It turns the issuer's terminal into a cheap (because it's
probably temporary) console for a primary user.  In this
mode, commands are sent to the primary user for execution,
and its console output is written (by CP) to the terminal.  The
following commands may be entered:

		CP xxxxxxxx

	A CP command.  It will be executed in a manner comparable
to issuing #CP on the primary machine (ie without the
knowledge of the virtual machine's operating system).

		xxxxxxxxxxx

	Any other command or response.  It will be processed by the
virtual machine's operating system.

		*CMS* xxxxx

	A CMS command to be executed on the issuer's machine (ie it
is not passed to the primary user).

		*END*

	End cheap console model.

All commands will be executed in mixed case; the keywords CP,
*CMS* and *END* may be in upper or lower case.

This EXEC is invoked by entering:

	SCIF primary <secondary <command>> (options

where:

	primary is the user-id of the machine to be affected
	secondary is probably the user-id of the machine which is to
become the console for the primary machine.  It may be:
		an explicit user-id (or abbreviation)
		* to use the issuing user
		OFF to turn the secondary user-id off
		? to show the existing secondary user-id
		CONSOLE to turn the issuing user into a cheap
console.

	command is a command to be issued.  (The command is
translated to upper case.)  If it begins with 'CP' the command
is issued using 'SEND CP user-id', otherwise the command is
issued using 'SEND user-id'.  This function requires that the
value of 'secondary' be set to '*'.

	options may be QUIT which suppresses all 'normal' messages.
This is only relevant for function 1.

Note:

1	Privilege class C is needed for all functions, except for the '?'
function, in which case class E is sufficient.

2	This EXEC operates under VM Releases 4 and 5 (with or
without HPO).  It should continue to run under future releases
as long as the location of VMSECUSR in the VMBLOK
remains at +X'218'.

3	For information about SCIF, see VM/SP System Facilities for
Programming.

You might want to be aware of the following points regarding
SCIF.  They are all facts of life in the VM world.  While there
may be a best way to deal with them, there is no way to change
them.

1	After  being AUTOLOGed, it appears that the secondary user
must (always?) issue a CP ATTN command (just once) before
commands can be sent to it.  Prior to this time all commands
(except maybe those preceded by CP) will be rejected with
'MKSND068E SEND command failed; received has console
input waiting'.  There is probably something else that the
primary user can do in lieu of a CP ATTN that is similar to a
read, but I haven't yet tracked it down.  Sometimes you can
SEND the ATTN command with 'SEND CP user-id ATTN',
but sometimes you can't.

2	If the primary user has SET AUTOREAD ON (which is a
default if the machine is AUTOLOGed), each time a
command completes CMS will issue a VM READ and the
message 'DMKQC0150A User xxxxxxx has issued a VM
read' will be sent to the primary user.  If the secondary user
has SET FULLSCREEN ON, this message will not be
handled by CMS fullscreen processing.  Instead, the screen
will be cleared (by CP) and the message written at the top.

3	If the secondary user has SET FULLSCREEN ON, messages
issued at the primary user while this EXEC is waiting for
input may not be displayed immediately.  This is possible, for
example, if ROUTE SCIF TO CMS (NONOTIFY is in effect.

4	Use of the 'cheap console' function is not recommended if the
secondary user has SET FULLSCREEN ON and is running
under XEDIT.

5	If the secondary user is disconnected, it will receive none of
the console output for the primary user.

6	Spooling of the primary user's console is unaffected by the
existence of a secondary console.

/*  Edit the parameters and options                                   */
address COMMAND
arg primary secondary command '(' options
if primary = '?' | primary = '' then
   signal help
primary = userabbr(primary                 /* Allow abbreviations     */
option_quiet = 0                           /* Set the default values  */
do while options ¬= ''
   parse var options x options
   select
      when abbrev('QUIET',x,1) then
         option_quiet = 1
      otherwise
         say 'Invalid SCIF option "' || x || '" - Ignored'
   end   /*  select  */
end
/*  Determine which function is to be performed                       */
if secondary = 'CONSOLE' then
   signal cheap_console
if command ¬= '' & command ¬= '?' then
   signal execute_a_command
/*  Function 1: Update the secondary userid field in the VMBLOK       */
if secondary = '' then
   call exit '1 No secondary userid specified'
if find('OFF ?',secondary) = 0 then do       /*  It must be a userid  */
   secondary = userabbr(secondary)           /*  Allow abbreviations  */
   if ¬ validuid(secondary) then /*VALIDUID does not use abbreviations*/
     call exit '2 Userid' secondary 'is not defined in the CP directory'
   end
call set_secondary_userid secondary
exit rc
/*  Function 2: Send a single command to the machine for execution    */
execute_a_command:
parse arg . . command '('          /*  Get the command in mixed case  */
option_quiet = 1
     /*Never issue "normal" messages when setting the secondary userid*/
if secondary ¬= '*' then
   call exit '3 Command execution requires that the secondary userid' ,
      'be set to "*"'
call set_secondary_userid '*'
call send_command command
CP 'SLEEP 3 SEC'
call stcp_secondary old_secondary
exit rc
/*  Function 3: Cheap console                                         */
cheap_console:
option_quiet = 1
     /*Never issue "normal" messages when setting the secondary userid*/
call set_secondary_userid '*'
DESBUF
CONWAIT
do forever
   say 'You are the console for' primary  '- Enter *END* to terminate'
   parse pull keyword partial_command 1 complete_command
   upper keyword
   if keyword = '*END*' then
      leave
   if keyword = '*CMS*' then
      address CMS partial_command
   else do
   call send_command complete_command
   if rc = 45 then          /*  DMKSND045E xxxxxxxx not logged on     */
      /*  Treat this condition as a normal condition.  Unless this
          is a hung user, the VMBLOK no longer exists, so we will
          not attempt to restore the original secondary userid.       */
      call exit rc 'Ending cheap console mode'
   end
end
call stcp_secondary old_secondary
exit rc
/*  None of the above: Help information                               */
help:
say 'SCIF primary <secondary|*|OFF|? <command> <Quiet'
say 'SCIF primary CONSOLE'
exit 0
/*                         Subroutines                                */
/*  An error has occurred while executing a CP command                */
cp_error:
parse arg exit_rc final_message
if right(exit_rc,4) = 1001 then     /*  x1001 i.e. invalid command    */
   call exit '4 Use of this EXEC requires privilege class C'
call exit exit_rc final_message       /*  Pass parms thru w/o change  */
/*  Issue one DCP command   (requires privilege class C or E)         */
dcp:
arg addr_length                                   /*  address.length  */
EXECIO '1 CP (VAR DCP_DATA STRING DCP' addr_length       /* dcp_data  */
if rc ¬= 0 then
   call cp_error rc 'EXECIO DCP return code' rc 'for' addr_length
return
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   say final_message
exit exit_rc
/*  Send a command to the primary machine                             */
send_command:
parse       arg command
parse upper arg x1 x2
if x1 = 'CP' then
   CP 'SEND CP' primary x2   /* CP doesn't like lower case for the
command name or some of the parameters  */
else
   CP 'SEND' primary command
if rc = 068 then do    /* DMKSND068E SEND command failed; (reason)    */
   /*  Unfortunately, return code 68 is not unique.  The "(reason)"
       field above could be (among other possibilities):
          receiver is not disconnected
          receiver has console input waiting
       To keep things simple let's just assume it's the latter.
*/
   say 'Hint #1: You will probably need to LOGON to' primary ,
      'and issue #CP ATTN before'
   say '         you can SEND commands to it'
   say 'Hint #2: You may want to include a CP ATTN command in' ,
      primary'''s PROFILE EXEC to'
   say '         be executed if it is disconnected'
   end
return                           /*  rc is available for the caller   */
/*  Set the secondary userid (probably) and save the original value
    (requires privilege class C or E)                                 */
set_secondary_userid:
arg userid                                 /*  The secondary userid   */
if userid = '*' then
   userid = userid()
EXECIO '1 CP (VAR X STRING LOCATE' primary
if rc = 01021 then          /*  DMKCFD021E RADDR MISSING OR INVALID   */
   call exit '5 User' primary 'is not currently logged on'
if rc  ¬= 0 then            /*  DMKCFD021E RADDR MISSING OR INVALID   */
   call cp_error rc 'EXECIO LOCATE return code' rc
parse var x . . x .                             /*  VMBLOK = xxxxxx   */
vmsecusr_addr = d2x(x2d(x) + 536) /* VMSECUSR is at VMBLOK + X'218'   */
call dcp vmsecusr_addr'.8'
parse var dcp_data . x             /* xxxxxx     aaaaaaaa  bbbbbbbb   */
old_secondary = x2c(space(x,0))
if old_secondary = '' then
   old_secondary = '(off)'
if userid = '?' then
   say primary 'secondary userid is' old_secondary
else
   call stcp_secondary userid
return
/*  STCP the secondary userid field  (requires privilege class C)     */
stcp_secondary:
parse arg userid
if userid = 'OFF' then
   userid = '(off)'
if userid = '(off)' | userid = 'OFF' then
   x = copies(' ',8)
else
   x = left(userid,8)
x = 'S'vmsecusr_addr c2x(x)
EXECIO '0 CP (STRING STCP' x
if rc ¬= 0 then
   call cp_error rc 'EXECIO STCP return code' rc 'for' x
if ¬ option_quiet then
   say primary 'secondary userid has been changed from' old_secondary ,
      'to' userid
return
/*  Dummy subroutines.  These are external functions in my installation
    which are not shown here.  These dummy functions will allow the
    EXEC to run, although with some loss of "bells and whistles".     */
userabbr:
return arg(1)         /*  expanded userid = abbreviated userid        */
validuid:
return 1               /*  All userids are assumed to be valid        */

Dave Fraatz (USA)  	) Dave Fraatz 1989

