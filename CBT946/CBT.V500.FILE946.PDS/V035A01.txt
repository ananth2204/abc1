Free storage

Free storage allocation and utilisation are important factors to
consider when undertaking any capacity planning.  Certainly, if
your system has to support a large number of users or if they have
large free storage requirements, it is necessary to evaluate the
optimum amount allocated.

IBM gives a rough guide of 8K per user-id (VM/SP HPO Planning
Guide and Reference).  This seems to be reasonably accurate for a
standard PROFS user.  It consists mainly of 12-13 virtual devices
and the tables to map the users' virtual storage.

Beware that this seems to indicate that page, swap and segment
tables are required only up to the virtual machine size: segment
tables are needed right up to the end of addressable storage.

Since Release 5 was introduced IBM moved the default location
of CMS to the top end of storage, thereby increasing segment
table allocation.

The amount of storage used for page and swap tables can be
calculated by multiplying TTSEGCNT (location X'404') by 192
bytes or, if FRETRAP is installed, by 208.

Most of these tables will be swapped out (starting when they
occupy more than 12%).  APAR VM29639 (PUT 88003)
increases this support to include unshared page/swap tables that
are part of a Named Saved System.

Only a few of the more expensive monitoring products offer any
on-line free storage measurement.  The program below provides
figures to demonstrate overall free storage utilisation including the
large free block chain and subpools.  You should think of
increasing the allocation only when the average size of the largest
block on the chain is insufficient to support a large user (such as
MAINT) from logging on without extending the system.

This program works on HPO Release 5 native and HPO Release 5
with ECPS level 22.  If you are using FRETRAP, the amount
available will be marginally less than 100% used since each
subpool block has the FREEXT block tacked on the end, which is
not included in the subpool size.

If you have ECPS level 21 the subpool algorithm is different, with
11 chains of subpools from 3 to 33 doublewords in size.

If you are running SP the program needs extensive modification:
the subpool pointer is DMKFREST (not found in the system
symbol table) and each subpool block points to the next (there is
no block count available).

FREESTOR CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         LA    R11,2048(R12)           Standard OS linkage
         LA    R11,2048(R11)
         LA    R10,2048(R11)
         LA    R10,2048(R10)
         USING FREESTOR,R12,R11,R10
                                                           SPACE ,
         LR    R15,R13
         LA    R13,SAVEAREA
         ST    R13,8(R15)
         ST    R15,4(R13)
                                                           SPACE ,
         XC    LOCATED,LOCATED         Clear status flag
         LA    R4,PAGE                 Address of full page
         DIAG  R4,R3,CODE0038          Display system symbol table
         BNZ   EXIT                    Oops
                                                           SPACE ,
         USING ENTRY,R4                Tell assembler
         LA    R5,NUMPAGE              Number of entries in a page
                                                           SPACE ,
SYMLOOP  EQU   *
         CLC   PXANAME,ENTNAME         PSA Extended
         BE    STORPXA                 Yes, Store the location address
         CLC   FRELS,ENTNAME           Address of free storage chain?
         BE    STORFRLS                Yes, Store the location address
         CLC   FRELN,ENTNAME           Number of blocks on free chain?
         BE    STORFRLN                Yes, Store the location address
         CLC   FREHI,ENTNAME           Start of high free storage?
         BE    STORFRHI                Yes, Store the location address
         LA    R4,ENTLEN(R4)           Skip to next entry
         BCT   R5,SYMLOOP              Symbol table scan
                                                           SPACE ,
ENDSYM   EQU   *
         TM    LOCATED,R1+R2+R4        Found them all?
         BO    PROCESS
         LA    R15,28                  Not found
         B     EXIT
                                                           SPACE ,
PROCESS  EQU   *
         L     R5,DMKFRELN             Number of blocks
         L     R4,DMKFRELS             Start of large blocks
         LA    R1,INADDR               Contains input address
         LA    R3,OUTBUF               Real storage output
         LA    R2,2                    Number of Storage address
         XR    R6,R6                   Free storage count
         XR    R7,R7
                                                           SPACE ,
FRELSCHK EQU   *
         ST    R4,0(R1)                ( ptr to next )
         LA    R4,4(R4)                Plus four bytes
         ST    R4,4(R1)                ( current size )
         DIAG  R1,R2,CODE0004          Display real storage
                                                           SPACE ,
         L     R4,OUTBUF               Next free block
         AL    R6,OUTBUF+4             Update count
         CL    R7,OUTBUF+4             Biggest yet?
         BNH   BIGBLOK                 Found new one
         BCT   R5,FRELSCHK             Continue till end of chain
         B     DISPLAY                 All done now
BIGBLOK  EQU   *
         L     R7,OUTBUF+4             Load new value
         BCT   R5,FRELSCHK             Continue till end of chain
                                                           SPACE ,
DISPLAY  EQU   *
         ST    R6,USED                 Keep first free value
         CVD   R6,DWORD                Convert
         UNPK  DWORD1+1(L7),DWORD+L4(L4) Unpack
         OI    DWORD1+7,HEXF0          Hardware deficiencies
         LINEDIT TEXT= Free storage chain is    .......',              C
               SUB=(CHARA,DWORD1+1),COMP=NO,DOT=NO
                                                           SPACE ,
         CVD   R7,DWORD                Convert
         UNPK  DWORD1+1(L7),DWORD+L4(L4) Unpack
         OI    DWORD1+7,HEXF0          Hardware deficiencies
         LINEDIT TEXT='Largest block is         .......',              C
               SUB=(CHARA,DWORD1+1),COMP=NO,DOT=NO
                                                           SPACE ,
SUBPOOL  EQU   *
         USING PXA,R4                  Tell assembler
         LA    R4,SUBTABMX(R4)         Start of SubPools
         A     R4,DMKPXA               Start of X PSA
         LA    R4,32(R4)               Summat to do with displacement
         DROP  R4
                                                            SPACE ,
         LA    R5,NUMPOOLS             Number of subpools
         SLL   R5,2                    4 Fwords per pool entry
         LA    R1,PAGE                 List of Real addresses
ADDRGEN  EQU   *
         ST    R4,0(R1)                Real core table address
         LA    R4,4(R4)                Next Real address
         LA    R1,4(R1)                Next Virtual address
         BCT   R5,ADDRGEN              For number of subpools
                                                           SPACE ,
         LA    R2,NUMPOOLS             Number of subpools
         SLL   R2,2                    4 Fwords per pool entry
         LA    R1,PAGE                 List of Real addresses
         LA    R3,PAGE                 Output address
         DIAG  R1,R2,CODE0004          Display real storage
                                                           SPACE ,
         LA    R4,PAGE                 Cp output
         LA    R5,SMSUBPOL             Number of small subpools
         XR    R6,R6                   Clear subpool count
         XR    R3,R3                   Clear extended subpool count
         LA    R7,LSPSIZE              Lower subpool size
         XR    R8,R8                   Clear
         XR    R9,R9                   Clear
SUBLOOP  EQU   *
         ICM   R9,B0011,4(R4)          Any subpools ?
         BZ    TRYXTND                 Nope
         MR    R8,R7                   Multiply by subpool size
         AR    R6,R9                   Add number for this subpool
                                                           SPACE ,
TRYXTND  EQU   *
         LA    R4,8(R4)                Try extended
         ICM   R9,B0011,4(R4)          Any subpools ?
         BZ    NXTPOOL                 Nope
         MR    R8,R7                   Multiply by subpool size
         AR    R3,R9                   Add number for this subpool
NXTPOOL  EQU   *
         LA    R7,LSPSIZE(R7)          Increase subpool size
         LA    R4,8(R4)                Try extended
         BCT   R5,SUBLOOP              Trynext one   Number of entries
                                                           SPACE ,
         LA    R5,LGSUBPOL             Number of large subpools
         LA    R7,USPSIZE              Upper subpool size
SUBLOOP1 EQU   *
         ICM   R9,B0011,4(R4)          Any subpools ?
         BZ    TRYXTND1                Nope
         MR    R8,R7                   Multiply by subpool size
         AR    R6,R9                   Add number for this subpool
                                                           SPACE ,
TRYXTND1 EQU   *
         LA    R4,8(R4)                Try extended
         ICM   R9,B0011,4(R4)          Any subpools ?
         BZ    NXTPOOL1                Nope
         MR    R8,R7                   Multiply by subpool size
         AR    R3,R9                   Add number for this subpool
NXTPOOL1 EQU   *
         LA    R7,USPSIZE(R7)          Increase subpool size
         LA    R4,8(R4)                Try extended
         BCT   R5,SUBLOOP1             Trynext one   Number of entries
                                                           SPACE ,
         SLL   R6,3                    Convert to bytes
         LR    R7,R6                   Second free value
         AL    R7,USED                 Add to first
         ST    R7,USED
         CVD   R6,DWORD                Convert
         UNPK  DWORD1+1(L7),DWORD+L4(L4) Unpack
         OI    DWORD1+7,HEXF0           Hardware deficiencies
         LINEDIT TEXT= Subpool chain has         ......',              C
               SUB=(CHARA,DWORD1+2),COMP=NO,DOT=NO
                                                           SPACE ,
         SLL   R3,3                    Convert to bytes
         CVD   R3,DWORD                Convert
         UNPK  DWORD1+1(L7),DWORD+L4(L4) Unpack
         OI    DWORD1+7,HEXF0          Hardware deficiencies
         LINEDIT TEXT='Extended subpool chain is ......',              C
               SUB=(CHARA,DWORD1+2),COMP=NO,DOT=NO
                                                           SPACE ,
         ICM   R3,B1111,STORSIZE       16M
         L     R4,DMKFREHI             Start of free storage
         SR    R3,R4                   Amount of free storage
         L     R5,USED                 Amount used
         XR    R4,R4                   Clear
         LA    R7,100                  Work out percent
         MR    R4,R7                   Increase div
         XR    R4,R4                   Clear for divide
         DR    R4,R3                   Amount used by amount used
         SR        R5,R7     Convert to amount used
         LPR       R5,R5     Absolute value
         CVD   R5,DWORD                Convert
         UNPK  DWORD1+5(L3),DWORD+L6(L2) Unpack
         OI    DWORD1+7,HEXF0           Hardware deficiencies
         LINEDIT TEXT= Free storage used %          ...',              C
               SUB=(CHARA,DWORD1+5),COMP=NO,DOT=NO
         B     EXIT
DIAGERR  EQU   *
         WRTERM 'Diagnose 4 failure'
         B     Exit
                                                           SPACE ,
EXIT     EQU   *
         L     R13,4(R13)
         L     R14,12(R13)
         LM    R0,R12,20(R13)
         BR    R14
                                                           SPACE ,
*********************************************************************
* Subroutines                                                       *
*********************************************************************
                                                           SPACE ,
         USING ENTRY,R4                Tell assembler
STORPXA  EQU   *
         L     R1,ENTADDR
         ST    R1,DMKPXA               Hurrah
         LA    R4,ENTLEN(R4)           skip to next entry
         BCT   R5,SYMLOOP              Symbol table scan
         B     ENDSYM                  End of symbol table
                                                           SPACE ,
STORFRLS EQU   *
         OI    LOCATED,R1              Remember
         L     R1,ENTADDR
         ST    R1,ADDR                 Hurrah
         LA    R1,ADDR                 List of CP real addresses
         LA    R2,1                    Number of addresses
         LA    R3,OUTBUF               Output buffer
         DIAG  R1,R2,CODE0004          Display real storage
         L     R2,OUTBUF               Actual machine size
         ST    R2,DMKFRELS             Store size
         LA    R4,ENTLEN(4)            skip to next entry
         BCT   R5,SYMLOOP              Symbol table scan
         B     ENDSYM                  End of symbol table
                                                           SPACE ,
STORFRHI EQU   *
         OI    LOCATED,R2              Remember
         L     R1,ENTADDR
         ST    R1,ADDR                 Hurrah
         LA    R1,ADDR                 List of CP real addresses
         LA    R2,1                    Number of addresses
         LA    R3,OUTBUF               Output buffer
         DIAG  R1,R2,CODE0004          Display real storage
         L     R2,OUTBUF               Actual machine size
         ST    R2,DMKFREHI             Store size
         LA    R4,ENTLEN(R4)           skip to next entry
         BCT   R5,SYMLOOP              Symbol table scan
         B     ENDSYM                  End of symbol table
                                                           SPACE ,
STORFRLN EQU   *
         OI    LOCATED,R4              Remember
         L     R1,ENTADDR
         ST    R1,ADDR                 Hurrah
         LA    R1,ADDR                 List of CP real addresses
         LA    R2,1                    Number of addresses
         LA    R3,OUTBUF               Output buffer
         DIAG  R1,R2,CODE0004          Display real storage
         L     R2,OUTBUF               Number of blocks on
         ST    R2,DMKFRELN             DMKFRELS chain
         LA    R4,ENTLEN(R4)           Skip to next entry
         BCT   R5,SYMLOOP              Symbol table scan
         B     ENDSYM                  End of symbol table
                                                           SPACE ,
         DROP  R4
**********************************************************************
* Constants and data areas                                           *
**********************************************************************
                                                           SPACE ,
         PUSH  PRINT
         PRINT ON,NOGEN
         COPY  VMBLOK
         PXA
         REGEQU
         POP   PRINT
FREESTOR CSECT
                                                           SPACE ,
SAVEAREA DS    18F
                                                           SPACE ,
L2       EQU   2
L3       EQU   3
L4       EQU   4
L5       EQU   5
L6       EQU   6
L7       EQU   7
B0011    EQU   B'0011'
B1111    EQU   B'1111'
CODE0038 EQU   X'0038'
CODE0004 EQU   X'0004'
HEXF0    EQU   X'F0'
PAGEDISP EQU   X'1000'
PAGECNT  EQU   4096/4
                                                           SPACE ,
SMSUBPOL EQU   SPBOUND/LSPSIZE         Subpool boundary / lower pool
*                                      size = Number of small subpools.
LGSUBPOL EQU   (MAXHSIZ-(SPBOUND+USPSIZE))/USPSIZE
*              (Max subpool size - (subpool boundary + large subpool
*              size)) / large subpool size = Number of large subpools.
*              See DMKFRE for explanation.
LOCATED  DS    XL1
STORSIZE DC    X'01000000'             Calculating freestor used
                                                           SPACE ,
ADDR     DS    F
DWORD    DS    D
DWORD1   DS    D
OUTDATA  DC    CL7' '
SPACES   DC    CL6' '
                                                           SPACE ,
FRLSMSG  DC    C'Free storage chain is .. '
OFFSET   EQU   *-FRLSMSG
FRLSDATA DC    CL7' '
WRTDATAL EQU   *-FRLSMSG
BIGMSG   DC    C'Largest block is ...... '
BIGDATA  DC    CL7' '
SUBMSG   DC    C'Subpool chain is ...... '
SUBDATA  DC    CL6' '
XSUBMSG  DC    C'Extended chain is ..... '
XSUBDATA DC    CL6' '
                                                           SPACE ,
         DS    0D
WRTLINE  LINEWRT MF=L,VNAME='CMS',COLOR=YELLOW,EXTHI=UNDERLINE,        C
               PROTECT=NO,PRIOR=YES    MF=L does not work
STACKPL  DC    CL8'ATTN'
         DC    CL4'FIFO'
         DC    AL1(8)
         DC    AL3(OUTBUF)
         DC    8XL1'FF'
DMKPXA   DS    F
DMKFRELS DS    F
DMKFRELN DS    F
DMKFREHI DS    F
                                                           SPACE ,
PXANAME  DC    CL8'DMKPXA  '
FRELS    DC    CL8'DMKFRELS'
FRELN    DC    CL8'DMKFRELN'
FREHI    DC    CL8'DMKFREHI'
USED     DS    F                       Count of free stor used
BIGGEST  DS    F
INADDR   DS    2F
OUTBUF   DS    2F
                                                           SPACE ,
         LTORG
                                                           SPACE ,
         ORG   FREESTOR+PAGEDISP
PAGE     DS    1024F
                                                           SPACE ,
ENTRY    DSECT
ENTNAME  DS    CL8
ENTADDR  DS    F
ENTLEN   EQU   *-ENTRY
NUMPAGE  EQU   PAGEDISP/ENTLEN
         END   FREESTOR

Philip Madams
VM Systems Programmer
BP Oil (UK)  	) Xephon 1989

