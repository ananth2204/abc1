Product/vendor tracking system - continued

This routine maintains product and vendor information in one
system. It allows reporting, various listing options, changes,
and a multitude of other uses. Figures 1 and 2 are examples of
the panels used.


GENERAL PROCESSING

The routine maintains the product and vendor files on a mini-
disk of your choosing. It assumes you have some type of
security system that will allow an MR link without a password.
If the MR link fails, it assumes the person is not authorized to
update, only look.

Each product and vendor 'record' is maintained in separate
files. Whenever updates are done to either, a log entry is made.
Then it erases any 'back-up' file, renames the current file to the
back-up filename, and saves the new file. This helps in
managing the database with multiple accesses to it. The routine
double checks when an update is requested to see if someone
has already updated the record while you were in the routine.
This helps make sure updates are not 'lost' when more than one
update is made to the same record at the same time.

PF2 will put you into update mode. The PF keys change in that
mode to allow you to maintain the records. There are PF keys
to allow scrolling through the records, scrolling through panels,
etc.

The reports that are available are structured for readability and
proper content. They are built with carriage control in column
1, and all have an LRECL of 133. You can use the default
print command, change the print command yourself on the
screen (it will be saved for you), or leave the report on your A
disk.


PRODUCTS EXEC

/**********************************************************************/
/* PRODUCTS EXEC  - Product Level Maintenance Routine - Driver.       */
/* Function: To Query, Track, Update product levels for all systems.  */
/* Uses: Display Management System                                    */
/**********************************************************************/
id = 'Version 1.0 September 1990 - VMGURU Products NoInk.'
Arg system otheropts
If system = '?' Then Do
   Say id
   Say
   Say 'Format:  PRODUCTS  < < VM | MVS | IMS > pass_opts >'
   Say
   Say 'PRODUCTS, by default, will put you on to a menu to choose the'
   Say 'system you want to work with.  You can specify the system name'
   Say 'directly after the command to bypass the menu.'
   Say
   Say 'If you specify a system name, you can also pass additional'
   Say 'parms to the system tracking routine after the system name.'
   Say
   Exit
   End
If Find('VM MVS IMS',system)¬=0 Then Do
  Address Command 'EXEC' system'TRACK' otheropts
  Exit rc
  End
Parse Value c2x(Diag(24,-1)) With . +12 model +2 .
model = model + 0
model = 2                        /* COMMENT this line if you use DMS */
                                 /* screens with model support       */
master = 'MASTER'model'0'
'EUDEXEC2'                                    /* Invoke EXEC/DMS     */
Address Display                               /* DMS Environment     */
                                              /* Start Master Screen */
'USE' master
'MAP DATA 1 ERROR_MSG'
error_msg = ''
Do Forever
  Address CMS 'CONWAIT'
  'CURSOR T1'
  'COMMENT * Select a system and press the appropriate PF key.'
  'DISPLAY'
  'SIGNAL OFF'
  error_msg = ''
  Select
    When RSTATUS = 'PF3' Then Exit
    When RSTATUS = 'PF5' Then Call ROUTINES 'VM'
    When RSTATUS = 'PF7' Then Call ROUTINES 'MVS'
    When RSTATUS = 'PF9' Then Call ROUTINES 'IMS'
    When RSTATUS = 'ENTER' Then Nop
    Otherwise error_msg = RSTATUS 'key is not active at this time.'
             'SIGNAL ON'
    End
  End
'TERMINATE'
Exit
ROUTINES:
Arg system .
Address CMS 'EXEC' system'TRACK'
Address CMS 'VMFCLEAR'
'USE' master
'MAP DATA 1 ERROR_MSG'
Return


PRD$PROC EXEC

/**********************************************************************/
/* PRD$PROC EXEC - Product Level Maintenance Tracking Routine         */
/*                 Called by the various xxxTRACK systems             */
/* Function: To Query, Track, Update product levels for Techserv.     */
/* Uses: Display Management System                                    */
/**********************************************************************/
id = 'Version 2.0 May 1991 - VMGURU Products NoInk.'
Arg parm1 'FF'x system 'FF'x labels 'FF'x dbdisk 'FF'x logfile '(' startopt .
If system = '' Then Exit 99
syswork = Strip(system)
system = Right(syswork,4)
Parse Value c2x(Diag(24,-1)) With . +12 model +2 .
model = model + 0
model = 2                        /* COMMENT this line if you use DMS */
                                 /* screens with model support       */
If model = 2 Then max_entry = 15       /* Set scroll limits -23 line */
Else If model = 3 Then max_entry = 23     /* 32 line screen */
Else If model = 4 Then max_entry = 34     /* 43 line screen */
Else If model = 5 Then max_entry = 18     /* 27 line screen */
Address Command 'MAKEBUF'                     /* Get open disk info  */
Address Command 'GETFMADR'
Pull . mode cuu .
Address Command 'DROPBUF'
Signal on ERROR                               /* Trap any error      */
Signal on SYNTAX
Call LINKUP 'RR'
If qrc ¬= 0 Then Do                           /* ERROR ALREADY!!?    */
   Say Space(qtext)
   Say 'ERROR: Serious error occured, execution terminated.'
   Exit qrc
   End
Call MESSAGES
Call VARIABLES
Say Format_msg(97,'I')
Call LOAD_ITEMS
'EUDEXEC2'                                    /* Invoke EXEC/DMS     */
Address Display                               /* DMS Environment     */
STARTUP:
vendor_special = 0
update_mode = 0
index_used = 0
pf6_used = 0
pf4_used = 0
If Abbrev('PRODUCTS',startopt,1) | (startopt = '' & parm1 ¬= '') Then
  If parm1 ¬= '' Then Do;
  Call CLEAR 1 2 3; name = parm1;
  Call SCREEN 'PRDTRKx1';
  Call SEARCH; End
  Else Do; Call CLEAR 1 2 3; Call SCREEN 'PRDTRKx1';End
Else If Abbrev('VENDORS',startopt,1) Then Do
  Call CLEAR 6 7
  If parm1 ¬= '' Then Call VENDOR_LIST parm1
  Else Call SCREEN 'PRDTRKx6'
  End
Else If Abbrev('REPORTS',startopt,1) Then Do; Call CLEAR 8; Call REPORT_PROCESS;
End
Else Call SHOW_INDEX
MAIN_PROCESS:
Do Forever
  'CURSOR' RCURSOR                            /* Main loop PRDTRKx1  */
  Address Command 'CONWAIT'                   /* Clear console I/O   */
  If screen = 2 Then
    If name ¬= '' Then name_rel= Space(name) '(Rel:' Space(release)')'
    Else name_rel = ''
  'DISPLAY'                                   /* Show screen         */
  'SIGNAL OFF'
  msg. = ''
  If screen = 1 Then Do
    If serial ¬= serial.current & Words(serial) > 1
                                             Then serial = Comma(serial)
    If fm_id ¬= fm_id.current & Words(fm_id) > 1
                                               Then fm_id = Comma(fm_id)
    If Length(prodnum) > 4 & Pos('-',prodnum) = 0 Then
      prodnum = Left(prodnum,4)'-'Substr(prodnum,5)
    Else If Translate(prodnum) = 'NONE' Then prodnum = 'None'
    If inhouse = '=' Then inhouse = Date('U')
    If dropped = '=' Then dropped = Date('U')
    If aquired = '=' Then aquired = Date('U')
    If renew = '=' Then renew = Date('U')
    End
  Else If screen = 2 Then Do
    Upper cpu_serial maint_cat
    If current ¬= 0 Then Do
      If cpu_serial = ' ' Then cpu_serial = 'N'
      Else If cpu_serial ¬= 'N' Then cpu_serial = 'Y'
      End
    Else If cpu_serial ¬= ' ' & cpu_serial ¬= 'N' Then cpu_serial = 'Y'
    If intest = '=' Then intest = Date('U')
    If maint_proposed = '=' Then maint_proposed = Date('U')
    If sys.1 = '=' Then sys.1 = Date('U')
    If sys.2 = '=' Then sys.2 = Date('U')
    If sys.3 = '=' Then sys.3 = Date('U')
    If sys.4 = '=' Then sys.4 = Date('U')
    End
  Select                                      /* Check what was tapd */
    When RSTATUS = 'PF3' Then Call TERMINATE
    When RSTATUS = 'PF1' Then
      If product_work Then Call CLEAR 1 2 3
      Else Call CLEAR 6
    When RSTATUS = 'PF2' Then
      If (flag.current = '' & product_work) | ,
                                      (vflag.current = '' & vendor_work)
        Then Call SWAP_PFKEYS
      Else msg.1 = Format_msg(21,'E')
    When RSTATUS = 'PF4' & ¬update_mode Then
      If vendor_work Then Call VENDOR_LIST
      Else Call SEARCH 'ALL'
    When RSTATUS = 'PF5' & ¬update_mode & screen ¬= 2 Then
      If vendor_work Then Call VENDOR_LIST v_name
      Else Call SEARCH
    When RSTATUS = 'PF4' & update_mode Then
       If pf4_used Then Call UPDATE 'ADD'
       Else Do
         msg.1 = Format_msg(30,'W')
         msg.2 = Format_msg(31,'W')
         pf4_used = 1
         End
    When RSTATUS = 'PF5' & update_mode Then Call UPDATE
    When RSTATUS = 'PF6' & update_mode Then
       If pf6_used Then Call UPDATE 'INACT'
       Else Do
         msg.1 = Format_msg(28,'W')
         msg.2 = Format_msg(29,'W')
         pf6_used = 1
         End
    When (RSTATUS = 'PF7' | RSTATUS = 'PF8') & ¬update_mode
      Then Call SCROLL
    When RSTATUS = 'PF11' | RSTATUS = 'PF12' Then Call OTHER_PAGE
    When RSTATUS = 'ENTER' Then Nop
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  If RSTATUS ¬= 'PF6' Then pf6_used = 0
  If RSTATUS ¬= 'PF4' Then pf4_used = 0
  End
/* Adios...terminate DMS (clears storage, even though Exit will too) */
TERMINATE:;
If Word(RSTATUS,1) = 'PF3' & index_used Then Signal STARTUP
If Word(RSTATUS,2) ¬= '' Then Say Subword(RSTATUS,2)
Address Command 'SET CMSTYPE HT'
Address Command 'RELEASE' mode
Address Command 'SET CMSTYPE RT'
xdiag = Diag(8,'DETACH' cuu)
Exit
/* ERROR and SYNTAX ERROR routine                                    */
ERROR:;SYNTAX:
Parse source . . name .
erc = rc
Address Command 'DROPBUF'
Address Command 'SET CMSTYPE RT'
Say id
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** The above line returned a code of' erc
Say '**'
Say '** Diags>  Prodwrk:' product_work 'Vendwrk:' vendor_work
Say '**         Current:' current 'PRT:' prt 'PAGE:' page
Say '**          Screen: PRDTRK'model||screen
Say '**        Prodfile:' prodfile.current
Say '**        Vendfile:' vendfile.current
Say '**      FM/CUU/LNK:' mode cuu linkmode
Say
Say '** CONTACT VM SYSTEM PROGRAMMING ** HAVE THE ABOVE INFO AVAILABLE.'
Say
Signal TERMINATE
/* Search was requested.  Validate fields for search, then scan all  */
/* records for match(s).  Display on PRDTRKx1 if 1 found, else start */
/* and set up PRDTRKx4 to allow selection.                           */
SEARCH:;
Arg special .
SEARCH_AGAIN:
all_items = (special = 'ALL' | special = 'VENDORS')
all_vendors = (special = 'VENDORS')
savename = name
savenum = prodnum
savefmid = fm_id
savevendor = vendor
Call CLEAR 1 2 3 4 5
If ¬all_items Then Do
  name = savename
  prodnum = savenum
  fm_id = savefmid
  vendor = savevendor
  If prodnum = '' & name = '' & fm_id = '' & vendor = '' Then Do
    RCURSOR = ' '
    msg.1 = Format_msg(1,'E')
    Return
    End
  Else If (prodnum ¬= '' & name fm_id vendor ¬= '') |,
          (name ¬= '' & prodnum fm_id vendor ¬= '') |,
          (fm_id ¬= '' & name prodnum vendor ¬= '') |,
          (vendor ¬= '' & name prodnum fm_id ¬= '') Then Do
    RCURSOR = ' '
    msg.1 = Format_msg(18,'E')
    msg.2 = Format_msg(19,'E')
    Return
    End
  prodnum = Strip(prodnum)
  vendor = Strip(vendor)
  fm_id = Strip(fm_id)
  name = Strip(name)
  End
prodsearch = (prodnum¬='')
fmidsearch = (fm_id¬='')
vendorsearch = (vendor¬='')
namesearch = (name¬='')
match_list = ''
Do i = 1 to maxprods
  If (prodsearch & Pos(Translate(prodnum),Translate(prodnum.i)) ¬= 0) |,
     (vendorsearch & Pos(Translate(vendor),Translate(vendor.i)) ¬= 0) |,
      (namesearch & Pos(Translate(name),Translate(name.i)) ¬= 0) |,
      (fmidsearch & Pos(Translate(fm_id),Translate(fm_id.i)) ¬= 0) |,
      all_items
      Then match_list = match_list i
   End
match_count = Words(match_list)
If ¬all_items Then msg.1 = Format_msg(3,'I',match_count)
Else msg.1 = Format_msg(8,'I',match_count 'products')
If match_list = '' Then Return
If match_count = 1 Then Do
   current = Strip(match_list)
   If screen ¬= 1 Then Call SCREEN 'PRDTRKx1'
   Call SET_FIELDS
   Return
   End
If ¬vendorsearch & ¬all_vendors Then
     Call SCREEN 'PRDTRKx4'                   /* By product list     */
Else Call SCREEN 'PRDTRKx5'                   /* Product by vendor   */
start = 1; pf7_active = 0; pf8_active = 0
If all_items Then
  If ¬all_vendors Then pf9_tag = 'PF9=By Vendor'
  Else pf9_tag = 'PF9=By Product'
Else pf9_tag = '           '
Call SET_FIELDS                           /* Set up the fields      */
allow_scroll = (match_count > max_entry)
Do Forever
  'CURSOR  '
  tag_comm = ''
  If allow_scroll Then Do
     If start > 1 Then Do; pf7_active = 1; tag_comm = 'PF7=Back'; End
     Else Do; pf7_active = 0; tag_comm = '        '; End
     If last < match_count Then Do; pf8_active = 1;
                                     tag_comm = tag_comm 'PF8=Forw'; End
     Else Do; pf8_active = 0; tag_comm = tag_comm '        ';End
     End
  'COMMENT Active PF keys:  PF3=Exit' tag_comm pf9_tag
  msg.2 = Format_msg(6,'I',start last match_count)
  Address Command 'CONWAIT'
  'DISPLAY'
  'SIGNAL OFF'
  msg. = ''
  Select
    When RSTATUS = 'PF3' Then Leave
    When RSTATUS = 'ENTER' Then Do
       Parse Value RCURSOR With field '.' line
       If line ¬= '' & name. ¬= 'MSG' Then
         If line+start-1 <= last Then Do
           current = Word(match_list,line+start-1)
           Leave
           End
         Else msg.1 = Format_msg(4,'E')
       Else msg.1 = Format_msg(4,'E')
       End
    When RSTATUS = 'PF7' & pf7_active Then Do
       start = start - max_entry
       If start < 1 Then start = 1
       Call SET_FIELDS
       End
    When RSTATUS = 'PF8' & pf8_active Then Do
       start = start + max_entry
       Call SET_FIELDS
       End
    When RSTATUS = 'PF9' & all_items Then Do
       If ¬all_vendors Then special = 'VENDORS'
       Else special = 'ALL'
       Signal SEARCH_AGAIN
       End
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  End
Drop match_list match_count prodnum2. release2. status2. ,
     name2. vendor3. name3. start last allow_scroll
Call SCREEN 'PRDTRKx1'                     /* Set up PRDTRKx1 screen */
If current ¬= 0 Then Call SET_FIELDS
Else msg.1 = Format_msg(7,'I', 'product')
RCURSOR = ' '
Return
/* A vendor list was requested - load the screen up and use the      */
/* standard list scrolling algorithum                                */
VENDOR_LIST:
Arg vendor_srch
vendor_srch = Space(vendor_srch)
all_vendors = (vendor_srch = '')
match_list = ''
active = 0
If ¬all_vendors Then Do
  Do m = 1 to maxvend
    If Pos(Translate(vendor_srch),Translate(vname.m)) ¬= 0
      Then match_list = match_list m
    End
  match_count = Words(match_list)
  End
Else Do
  Do m = 1 to maxvend
    match_list = match_list m
    End
  match_count = maxvend
  End
Call CLEAR 6
If ¬all_vendors Then msg.1 = Format_msg(3,'I',match_count 'vendors')
Else msg.1 = Format_msg(8,'I',match_count 'vendors')
If match_count < 2 & ¬vendor_special Then Do
  If match_count = 1 Then current = Strip(match_list)
  If screen ¬= 6 Then Call SCREEN 'PRDTRKx6'
  If match_count = 1 Then Call SET_FIELDS
  Else v_name = vendor_srch
  Return
  End
Call SCREEN 'PRDTRKx7'
start = 1; pf7_active = 0; pf8_active = 0
Call SET_FIELDS
allow_scroll = (match_count > max_entry)
pf7_tag = '            '; pf8_tag = '            '
Do Forever
  'CURSOR' RCURSOR
  If allow_scroll Then Do
   If last < match_count Then Do; pf8_active = 1; pf8_tag = 'PF8=Forward '; End
     Else Do; pf8_active = 0; pf8_tag = '            '; End
     If start > 1 Then Do; pf7_active = 1; pf7_tag = 'PF7=Backward'; End
     Else Do; pf7_active = 0; pf7_tag = '            ';End
     Call SET_PFLINES
     End
  'COMMENT Active PF keys:  PF3=Exit ' pf7_tag pf8_tag
  If vendor_special Then Do
    If msg.1 = '' Then msg.1 = Format_msg(33,'I') '"'vendor'"'
    v_recflag = Format_msg(23,'R')
    End
  msg.2 = Format_msg(6,'I',start last match_count)
  Address Command 'CONWAIT'
  'DISPLAY'
  'SIGNAL OFF'
  msg. = ''
  Select
    When RSTATUS = 'PF3' Then Leave
    When RSTATUS = 'PF7' & pf7_active Then Do
       start = start - max_entry
       If start < 1 Then start = 1
       Call SET_FIELDS
       End
    When RSTATUS = 'PF8' & pf8_active Then Do
       start = start + max_entry
       Call SET_FIELDS
       End
    When RSTATUS = 'ENTER' Then Do
       Parse Value RCURSOR With field '.' line
       If line ¬= '' & name. ¬= 'MSG' Then
         If line+start-1 <= last Then Do
           current = Word(match_list,line+start-1)
           Leave
           End
         Else msg.1 = Format_msg(4,'E')
       Else msg.1 = Format_msg(4,'E')
       End
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  End
Drop match_list match_count
RCURSOR = ' '
If vendor_special Then Return
Call SCREEN 'PRDTRKx6'
If current ¬= 0 Then Call SET_FIELDS
Else msg.1 = Format_msg(7,'I','vendor' )
Return
/* The vendor name will need to be verified for add/update....       */
VERIFY_VENDOR:
Do i = 1 to maxvend
  If Translate(vendor) = Translate(vname.i) Then Return
  End
save_current = current
save_screen = screen
vendor_special = 1
update_mode = 0                                /* Turn off for this */
Call VENDOR_LIST
If current = 0 Then Call VENDOR_FOR_PRODUCT
If current > 0 Then Do
  vendor = vname.current
  If msg.1 ¬= '' Then msg.2 = msg.1
  End
Else msg.2 = Format_msg(24,'I')
vendor_special = 0
current = save_current
update_mode = 1
Call SCREEN 'PRDTRKx'save_screen
RCURSOR = ' '
Return
/* We need a mini vendor process for the product record update...    */
VENDOR_FOR_PRODUCT:
Call SCREEN 'PRDTRKx6'
Call CLEAR 6
/***** WORKING *****/
v_name = vendor
Do Forever
  'CURSOR' RCURSOR
  Address Command 'CONWAIT'                   /* Clear console I/O   */
  If vendor_special Then v_recflag = Format_msg(32,'R')
  'DISPLAY'                                   /* Show screen         */
  'SIGNAL OFF'
  msg. = ''
  Select                                      /* Check what was tapd */
    When RSTATUS = 'PF3' Then Leave
    When RSTATUS = 'PF4' Then Do
      Call VENDOR_LIST
      If current ¬= 0 Then Leave
      Call SCREEN 'PRDTRKx6'
      v_name = vendor
      End
    When RSTATUS = 'PF6' Then Do
      savehow = how
      Call UPDATE 'ADD'
      how = savehow
      Leave
      End
    When RSTATUS = 'ENTER' Then Nop
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  End
Return
/* Swap to the 'other' screen for product information.               */
OTHER_PAGE:
If RSTATUS = 'PF12' Then Do                        /* Page forward...*/
  If screen = 1 Then Call SCREEN 'PRDTRKx2'
  Else If screen = 2 Then Signal HISTORY
  Else Do
    msg.1 = Format_msg(5,'E',RSTATUS)
    Return
    End
  End
Else Do                                            /* Page back...   */
  If screen = 1 Then Do
    msg.1 = Format_msg(5,'E',RSTATUS)
    Return
    End
  Else If screen = 2 Then Call SCREEN 'PRDTRKx1'
  Else Call SCREEN 'PRDTRKx2'
  End
RCURSOR = ' '
/*If current ¬= 0 Then Call SET_FIELDS*/
Return
/* Maintenance history processing. Set up to use the standard        */
/* list/scroll variables to control the screen(s).                   */
HISTORY:
match_list = ''
active = 0
Do m = 1 to max_hist
  match_list = match_list m
  If hd_keep.m ¬= '' | ht_keep.m ¬= '' Then active = active + 1
  End
match_count = max_hist
Call SCREEN 'PRDTRKx3'
start = 1; pf9_active = 0; pf10_active = 0
Call SET_FIELDS 'HISTONLY'                /* Set up the fields      */
allow_scroll = (match_count > max_entry)
pf.9 = ''; pf.10 = ''
msg.1 = Format_msg(2,'I',active max_hist)
Do Forever
  If name ¬= '' Then name_rel= Space(name) '/' release
  Else name_rel = ''
  Call LAST_HIST
  'CURSOR' RCURSOR
  If allow_scroll Then Do
     If last < match_count Then Do; pf10_active = 1; pf.10 = 'Forward'; End
     Else Do; pf10_active = 0; pf.10 = ''; End
     If start > 1 Then Do; pf9_active = 1; pf.9 = 'Backward'; End
     Else Do; pf9_active = 0; pf.9 = '';End
     Call SET_PFLINES
     End
  If msg.2 = '' Then msg.2 = Format_msg(6,'I',start last match_count)
  Address Command 'CONWAIT'
  'DISPLAY'
  'SIGNAL OFF'
  msg. = ''
  Call SAVE_HIST
  Select
    When RSTATUS = 'PF1' Then Call CLEAR 1 2 3
    When RSTATUS = 'PF2' Then
      If flag.current = '' Then Call SWAP_PFKEYS
      Else msg.1 = Format_msg(21,'E')
    When RSTATUS = 'PF3' Then Call TERMINATE
    When RSTATUS = 'PF4' & update_mode Then Call UPDATE 'ADD'
    When RSTATUS = 'PF5' & update_mode Then Call UPDATE
    When RSTATUS = 'PF6' & update_mode Then Call UPDATE 'DELETE'
    When RSTATUS = 'PF7' | RSTATUS = 'PF8' & ¬update_mode Then Do
      start = 1
      Call SCROLL
      Call LAST_HIST
      msg.1 = Format_msg(2,'I',active max_hist)
      End
    When RSTATUS = 'PF9' & pf9_active Then Do
       start = start - max_entry
       If start < 1 Then start = 1
       Call SET_FIELDS 'HISTONLY'
       End
    When RSTATUS = 'PF10' & pf10_active Then Do
       start = start + max_entry
       Call SET_FIELDS 'HISTONLY'
       End
    When RSTATUS = 'PF11' Then Leave
    When RSTATUS = 'ENTER' Then Nop
    Otherwise msg.1 = Format_msg(5,'E',RSTATUS)
    End
  End
Drop match_list match_count
Call SCREEN 'PRDTRKx2'
RCURSOR = ' '
Return
/* Get the last history record.                                      */
LAST_HIST:
Arg which .
If which = '' Then Do
  Do m = 1 to max_hist
    If hd_keep.m ht_keep.m = '' Then Leave
    End
  active = m - 1
  last_hist = hd_keep.active ht_keep.active
  End
Else Do
  Do m = 1 to max_hist
    If hd.which.m ht.which.m = '' Then Leave
    End
  active = m - 1
  last_hist = hd.which.active ht.which.active
  End
Return
/* Save the history information and elim. blank lines                */
SAVE_HIST:
Do i = 1 to max_entry Until i+start-1 = match_count
  indx = hist_index.i
  If hist_date.i = '=' Then hist_date.i = Date('U')
  If hist_text.i = '=' & indx > 1 Then
    If i ¬= 1 Then Do
      newi = i - 1
      hist_text.i = hist_text.newi
      End
    Else Do
      newi = indx - 1
      hist_text.i = ht_keep.newi
      End
  hd_keep.indx = hist_date.i
  ht_keep.indx = hist_text.i
  End
hd_save. = ''
ht_save. = ''
indx = 0
moved = 0
Do i = 1 to max_hist
  If hd_keep.i ¬= '' | ht_keep.i ¬= '' Then Do
    indx = indx + 1
    If indx ¬= i Then moved = 1
    hd_save.indx = hd_keep.i
    ht_save.indx = ht_keep.i
    End
  End
hd_keep. = ''
ht_keep. = ''
Do i = 1 to indx
  hd_keep.i = hd_save.i
  ht_keep.i = ht_save.i
  End
If moved Then Do
  Call SET_FIELDS
  msg.1 = Format_msg(22,'W')
  End
Drop hd_save. ht_save. moved
Return
/* Scroll processing for list selection screen if more than max      */
/* items were found in the SEARCH routine.                           */
SCROLL:;
If RSTATUS = 'PF7' Then current = current - 1
Else current = current + 1
maint_loaded = 0
If screen ¬= 6 Then
  If current > maxprods | current = 0 Then Do; Call CLEAR 1 2 3; Return; End
  Else If current < 0 Then current = maxprods
       Else Nop
Else
  If current > maxvend  | current = 0 Then Do; Call CLEAR 6; Return; End
  Else If current < 0 Then current = maxvend
       Else Nop
/* Drop through to SET_FIELDS... */
/* Set the screen fields according to what record is current.        */
SET_FIELDS:;
Arg which .                                  /* which can be HISTONLY */
If product_work Then Do
  If which = '' Then Do
    If flag.current = 'D' Then
       recflag = Format_msg(20,'W')
    Else recflag = ''
/**** SCREEN 1 ****/
    name    = name.current
    desc    = desc.current
    vendor  = vendor.current
    release = release.current
    servlev = servlev.current
    prodnum = prodnum.current
    serial  = serial.current
    fm_id   = fm_id.current
    inhouse = inhouse.current
    ilc_cost= ilc_cost.current
    annual_cost = annual_cost.current
    dropped = dropped.current
    aquired = aquired.current
    renew     = renew.current
    Do i = 1 To 5
      scomm.i = comm.current.i
      End
/**** SCREEN 2 ****/
    maint_cat = maint_cat.current
    maint_proposed = maint_proposed.current
    sfwloc1 = sfwloc1.current
    sfwloc2 = sfwloc2.current
    intest = intest.current
    test_where = test_where.current
    sys.1 = sys.1.current
    sys.2 = sys.2.current
    sys.3 = sys.3.current
    sys.4 = sys.4.current
    cpu_serial = cpu_serial.current
    devices = devices.current
    Do i = 1 To 5
      m_note.i = mnote.current.i
      End
    If ¬maint_loaded Then Do
      Do i = 1 To max_hist
        hd_keep.i = hd.current.i
        ht_keep.i = ht.current.i
        End
      maint_loaded = 1
      End
    End
  If screen = 3 Then Do /**** SCREEN 3 ****/
    Call CLEAR '3/PRESERVE'
    If flag.current = 'D' Then
       recflag = Format_msg(20,'W')
    Else recflag = ''
    'SET' histvars '(NORM NOEX PRO'
    resetvars = ''
    hist_index. = ''
    Do i = 1 to max_entry Until i+start-1 = match_count
      resetvars = resetvars 'HIST_DATE.'i 'HIST_TEXT.'i
      indx = Word(match_list,i+start-1)
      hist_index.i = indx
      hist_date.i = hd_keep.indx
      hist_text.i = ht_keep.indx
      End
    'RESET' resetvars
    RCURSOR = ' '
    If i > max_entry Then last = i+start-2
    Else last = i+start-1
    End
  End
Else If screen = 4 Then Do
  Call CLEAR 4
  Do i = 1 to max_entry Until i+start-1 = match_count
    indx = Word(match_list,i+start-1)
    prodnum2.i = prodnum.indx
    release2.i = release.indx
    Call PROD_STAT indx
    status2.i = Result
    name2.i = name.indx
    End
  If i > max_entry Then last = i+start-2
  Else last = i+start-1
  End
Else If screen = 5 Then Do
  Call CLEAR 5
  Do i = 1 to max_entry Until i+start-1 = match_count
    indx = Word(match_list,i+start-1)
    name3.i = name.indx
    vendor3.i = vendor.indx
    End
  If i > max_entry Then last = i+start-2
  Else last = i+start-1
  End
Else If screen = 6 Then Do
  v_indx = Right(vendfile.current,4)
  v_name    = vname.current
  Do i = 1 To 4
    v_addr.i = vaddr.current.i
    End
  v_phone = vphone.current
  v_site = vsite.current
  v_rep = vrep.current
  v_contact = vcontact.current
  Do i = 1 To 4
    v_note.i = vnote.current.i
    End
  End
Else If screen = 7 Then Do
  Call CLEAR 7
  'SET' vendlines '(NORM NOEX PRO'
  resetvars = ''
  Do i = 1 to max_entry Until i+start-1 = match_count
    resetvars = resetvars 'V_NAME.'i
    indx = Word(match_list,i+start-1)
    v_name.i = vname.indx
    End
  'RESET' resetvars
  If i > max_entry Then last = i+start-2
  Else last = i+start-1
  End
f_indx = Right(prodfile.current,4)
Return
/* Determine the 'status' of the product.                            */
PROD_STAT:
Arg indx
status = ''
Call LAST_HIST indx
Select
  When flag.indx ¬= '' Then status = 'Inactive'
  When Abbrev(Translate(renew.indx),'CANCELLED',3) Then
                                                    status = 'Cancelled'
  When sys.1.indx sys.2.indx sys.3.indx sys.4.indx ¬= '' Then
    Do j = 1 to Words(labels)
      If sys.j.indx ¬= '' Then status = status Word(labels,j)
      End
When intest.indx ¬= '' Then status = 'In Test'
When inhouse.indx ¬= '' & ¬Abbrev(Translate(inhouse.indx),'ANNOUNCED',3)
                                                Then status = 'In House'
When Left(Translate(hd.indx.active),2) = 'GA' Then status = 'Gen. Avail'
When Abbrev(Translate(inhouse.indx),'ANNOUNCED',3)
                                               Then status = 'Announced'
  Otherwise status = 'Unknown'
  End
Return Strip(status)
/* Set up the screens, defining all DMS attributes.                  */
SCREEN:;
Arg screen_name .
screen = Right(screen_name,1) + 0
product_work = (screen = 1 | screen = 2 | screen = 3)
product_list = (screen = 4 | screen = 5 )
vendor_work = (screen = 6)
vendor_list = (screen = 7)
screen_name = Left(screen_name,6)||model||screen
'USE' screen_name                             /* Screen to use       */
'CASE M'                                      /* Mixed case input    */
'ALPHA  JUSTIFY LEFT FILL NULL'
map_data = ''
Do i = 1 To Words(variable.screen)            /* Build MAP DATA cmd  */
  map_data = map_data i Word(variable.screen,i)
  End
'MAP DATA' map_data
Drop map_data                                 /* Done with these...  */
If screen = 2 Then Do i = 1 to Words(labels)
   labl.i = Word(labels,i)
   'SET SYS.'i '(PINK UNDER NOPROT'
   End
If product_work | vendor_work Then Do
  Call SET_PFKEYS
  If ¬update_mode Then Call SET_PFLINES
  End
Return
/* Update processing: Could be a real update, a delete, or add.      */
/* Check security, validate fields and re-write file.                */
UPDATE:;
Arg how .
If how = 'ADD' Then how = 'added'
Else If how = 'INACT' Then how = 'inactivated'
Else how = 'updated'
If linkmode = 'RR' Then Do
  Call LINKUP 'MR'                          /* Make sure MR is ok    */
  If qrc ¬= 0 Then Do
    If qrc ¬= 102 & qrc ¬= 103 Then Do
      msg.1 = Format_msg(99,'S')
      msg.2 = Space(qtext)
      End
    Else msg.1 = Format_msg(98,'W')
    linkmode = 'RR'
    Return
    End
  End
Select
  When how ¬= 'inactivated' Then Do
    Call VALIDATE
    If RESULT ¬= 0 Then Return
    End
  When current = 0 Then Do
    msg.1 = Format_msg(9,'E')
    msg.2 = Format_msg(11,'E')
    Return
    End
  Otherwise Nop
  End
If how = 'inactivated' Then Do             /* Record was DROPPED     */
  Call SETCURRENT                          /* In case changed        */
  flag.current = 'D'
  Call REBUILD_FILE
  End
Else Do                                 /* Record was UPDATED/ADDED */
  If product_work Then Do
    If how = 'added' Then Do
      maxprods = maxprods + 1
      current = maxprods
      End
    Call VERIFY_VENDOR
    flag.current = ''
    End
  Else If how = 'added' Then Do
      maxvend = maxvend + 1
      current = maxvend
      End
  Call SETCURRENT
  Call REBUILD_FILE
  Call CHECK_FILE_STAMP 'UPDATE'
  If how = 'added' Then Call SORT_RESET
  End
If product_work Then msg.1 = Format_msg(12,'I','Product' how)
Else msg.1 = Format_msg(12,'I','Vendor' how)
Return
/* Read in the product and vendor files and load variable arrays     */
LOAD_ITEMS:;
/**** PRODUCT LOAD ****/
Signal Off ERROR
Address Command 'MAKEBUF'
Address Command 'LISTFILE' syswork'* PRODUCT' mode '(LABEL STACK'
Signal On ERROR
maxprods = Queued()
openprod. = 1
/* Initialize record 0 */
sl = 0
Parse Value ' ' With part.1 'FF'x part.2 'FF'x part.3 'FF'x part.4
Do x = 1 to 4
  Interpret 'Parse Value part.x With' parse_product.x
  End
Do sl = 1 to Queued()
  Parse Pull prodfile.sl . . . . . . proddate.sl prodtime.sl .
  fileslot = Right(prodfile.sl,4)+0
  openprod.fileslot = 0
Address Command ,
'EXECIO 1 DISKR' prodfile.sl 'PRODUCT' mode '(FINIS VAR RECORD.'sl
  End
Address Command 'DROPBUF'
Call SORT_ITEMS
/**** VENDOR LOAD ****/
Signal Off ERROR
Address Command 'MAKEBUF'
Address Command 'LISTFILE' syswork'* VENDOR' mode '(LABEL STACK'
Signal On ERROR
maxvend = Queued()
/* Initialize record 0 */
sl = 0
Interpret 'Parse Value " " With' parse_vendor
openvend. = 1
Do sl = 1 to Queued()
  Parse Pull vendfile.sl . . . . . . venddate.sl vendtime.sl .
  fileslot = Right(vendfile.sl,4)+0
  openvend.fileslot = 0
  Address Command 'EXECIO 1 DISKR' vendfile.sl ,
                                   'VENDOR' mode '(FINIS VAR VENDREC.'sl
  End
Address Command 'DROPBUF'
Call SORT_VENDS
Return
/* Some type of UPDATE/ADD/DELETE was verified - for product records */
REBUILD_FILE:;
sl = current
If product_work Then Do
  Interpret 'output =' parse_product.1
  Do x = 2 to 4
    Interpret 'outputx =' parse_product.x
    output = output||'FF'x||outputx
    End
  record.current = output
  outfile = prodfile.current
  outtype = 'PRODUCT'
  Drop outputx
  End
Else Do
  Interpret 'output =' parse_vendor
  vendrec.current = output
  outfile = vendfile.current
  outtype = 'VENDOR'
  End
If how = 'added' Then Do
  Call GET_OPEN_FILE
  Address Command 'EXECIO 1 DISKW' outfile outtype mode ,
                                                     '(FINIS VAR OUTPUT'
  End
Else Do /* updated or dropped */
  Signal Off ERROR
  oldtype = Left(outtype,4)'OLD'
  Address Command 'ERASE' outfile oldtype mode
  Address Command 'RENAME' outfile outtype mode '=' oldtype '='
  Signal On ERROR
  Address Command 'EXECIO 1 DISKW' outfile outtype mode ,
                                                     '(FINIS VAR OUTPUT'
  End
outlog = Date('U') Time() Left(Userid(),8) Left(Translate(how),7) ,
                                                       ':' Space(output)
Address Command 'EXECIO 1 DISKW' logfile '$LOG' mode '(FINIS VAR OUTLOG'
If ¬vendor_special Then Call LINKUP 'RR'
Drop output outlog outfile outtype
Call SET_FIELDS
Call SWAP_PFKEYS
Return
/* Find an open file name to add a product or vendor                 */
GET_OPEN_FILE:
If product_work Then Do i = 1 to 9999
  If openprod.i Then Do
    openprod.i = 0
    prodfile.current = syswork||Right(i,4,0)
    outfile = prodfile.current
    Return
    End
  End

This article will be continued next month.

James S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1992

