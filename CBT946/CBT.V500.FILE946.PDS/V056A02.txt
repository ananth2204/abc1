Converting PC images

More and more installations are running AFP printers which
are able to print graphics, images and composite documents
(text with graphics/images included), created by, for example,
DCF or DW/370.

But how to include images in these documents when all the
new powerful scanners can only be attached to PCs?
Additionally, manipulating images should be as easy and
comfortable as with PC programs with mouse support.

The solution is to use a PC with the appropriate software for
scanning and manipulating images and to transfer the files to
the host.  There the files can be converted to a format that can
be included in DCF or DW/370 documents or AFP forms.

The conversion on the host is the purpose of this little package.

The package provides two functions:

1      Convert a halftone image (IMDS-format), that has been
      scanned by a PC attached scanner, to the GDDM format
      ADMIMG and optionally create a page segment.

2      Convert a host image file (ADMIMG-format) to the PC
      usable format IMDS.

To successfully handle halftone images with this package it is
necessary to have:

o      A PC attached scanner.

o      A PC program that is able to manipulate images and store
      them in the IMDS format (eg IBM's IMAGE EDIT).

o      A file transfer program (eg IND$FILE).

o      GDDM running under VM on your host.  The programs
      have been successfully tested with GDDM 2.1 and VM/SP
      5, VM/SP HPO 5, VM/XA SP 2.0 and 2.1.

It is not necessary to have any additional program products (eg
IBM's IHF) on your host or PC.


FILES

The following files are used:

o      IMDS2IMG ASSEMBLE
o      IMDS2IMG EXEC
o      IMG2IMDS ASSEMBLE
o      IMG2IMDS EXEC
o      XIMGINST EXEC.


INSTALLATION

1      Establish a link to the GDDM disk or modify the REXX
      procedure XIMGINST to correctly set up the link to the
      GDDM disk (follow the documentation included in the
      procedure).

2      If your PC program is only able to handle images in a
      non-compressed format you have to make a simple change
      to the source code IMDS2IMG ASSEMBLE and
      IMG2IMDS ASSEMBLE.  (Follow the documentation
      included in the programs.)  If possible use the compressed
      format because it substantially saves disk storage and
      reduces file transfer time.

3      Run the installation EXEC by entering XIMGINST to
      assemble the two Assembler programs and create the two
      modules IMDS2IMG and IMG2IMDS.

4      If necessary, modify the two REXX procedures
      IMDS2IMG EXEC and IMG2IMDS EXEC to set up the
      link to the GDDM disk.  (Follow the documentation
      included in the procedures.)  If the virtual machines in
      which the two modules are to be executed have a
      permanent link to GDDM, the two REXX procedures are
      obsolete and should be deleted.


USING THE PACKAGE

The package can be used to convert an image from PC format
to CMS format, or from mainframe format to PC format.

Conversion of an image from the PC format to the host format

1      Scan and optionally manipulate the image with the PC program.

2      Save the image as a halftone image in the (compressed)
      IMDS format.  (Hint: with IBM's IMAGE EDIT you can
      load a TIFF image and save it in the IMDS format.)

3      Upload the image from PC to host

      o      Do not use the options CRLF or ASCII when you
            issue the file transfer command.

      o      Give the file the host filetype IMG.

      o      An example of the required PC command (assuming
            that the image has been saved in subdirectory SDIR
            with the name IMGSAMP1.IMG) is:

                  SEND C:\SDIR\IMGSAMP1.IMG IMGSAMP1 IMG A

      o       After the execution of this command the CMS file
            IMGSAMP1 IMG A has been created.
4      Convert the file on the host

      o       Issue the following command in CMS (using the
            above example):

                  IMDS2IMG IMGSAMP1

      o      The CMS file IMGSAMP1 IMG A is converted into
            the CMS file IMGSAMP1 ADMIMG A.

      o       After the procedure has successfully created the
            ADMIMG file you are asked whether you also want to
            have a  page segment created.  If so the GDDM
            supplied procedure ADMUIMP is called.  (The
            ADMIMG file could directly be processed by
            DW/370, the page segment is necessary for DCF or
            AFP forms.)

Conversion of an image from the host format to the PC format

1      Convert the file on the host

      o      Issue the following command in CMS:

                  IMG2IMDS IMGSAMP1

      o      The CMS file IMGSAMP1 ADMIMG A is converted
            into the CMS file IMGSAMP1 IMG A.

2      Download the image from host to PC

      o      Do not use the option CRLF nor ASCII when you
            issue the file transfer command.

      o      Give the file the PC filetype IMG.

      o      An example for the required PC command is:

                  RECEIVE C:\SDIR\IMGSAMP1.IMG IMGSAMP1 IMG A

      o      The PC file IMGSAMP1.IMG is created in
            subdirectory SDIR.  It may be modified on the PC
            and reloaded to the host.


IMDS2IMG ASSEMBLE

This program converts an image that has been created on a PC
in the IMDS format (eg with the IBM program IMAGE EDIT),
to a GDDM file (in the ADMIMG format), that could be
included in DW/370 documents or be converted further to a
page segment with the GDDM supplied EXEC ADMUIMP.

This program supposes that the image has been created on the
PC 'with compression'.  If this program is used with images
'without compression' the constant IPTSCOMP has to be
changed.  (See the definition at the end of this program.)

The PC file has to be uploaded from the PC to the host before
this program is executed.  Do not use the options CRLF or
ASCII with the file transfer command.

The input filename may be supplied as a parameter or it will
prompted for.

The program assumes the following filetypes:
      Input - IMG (LRECL 80  RECFM F
      Output - ADMIMG (LRECL 400 RECFM F.


         TITLE 'IMDS2IMG CONVERT IMDS-FORMAT(PC) TO ADMIMG(GDDM) FILE'
*/* REGISTER USAGE:                                                  */
*/*               R12 - BASE                                         */
*/*               R13 - SAVEAREA                                     */
*/*               R15 - RETURNCODE                                   */
IMDS2IMG CSECT
         STM   R14,R12,12(R13)        SAVE REGS
         BALR  R12,0                  BASE REG
         USING *,R12
         ST    R13,SAVEAREA+4         SAVE CALLERS SAVEA AREA ADDRESS
         LA    R11,SAVEAREA           GET SAVE AREA ADDRESS
         ST    R11,8(,R13)            AND SAVE IT
         LR    R13,R11                SAVE AREA FOR CALLED ROUTINES
PARMCHK  DS    0H
         LA    R2,8(,R1)              ADDRESS OF THE FIRST PARM
         WRTERM 'Conversion from IMG (PC) to ADMIMG ...'
         CLC   0(4,R2),HEXFF          END OF PARMLIST ?
         BE    PROMPT                 YES -> PROMPT FOR THE FILENAME
         MVC   EINFN(8),0(R2)         MOVE IN FILENAME
         B     OPENEIN
PROMPT   DS    0H
         RDTERM BUFF,PRBUFF=FRAGE,PRLGTH=L'FRAGE  PROMPT FILENAME
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRPRO                 NO - DISPLAY ERROR MSG
         CLC   BUFF(8),=CL8' '        NOTHING ENTERED ?
         BE    RETURN                 YES - EXIT
         MVC   EINFN,BUFF             USE FIRST 8 BYTES AS FILENAME
OPENEIN  DS    0H
         LA    R2,EINGABE             LOAD ADDRESS OF THE INPUT FNAME
         FSOPEN (2),FSCB=FSCBE        OPEN INPUT FILE
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERROPE                 NO - DISPLAY ERROR MSG
GDDMI    DS    0H
         CALL  FSINIT,(0),VL          INITIALIZE GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  FSPSEL,(NULL),VL       SEL LOGICAL PAGE 0
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  IMAGID,(IMAGEID),VL    GET A IMAGID FROM GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  IMAPTS,(IMAGEID,NULL,IPTSFORM,IPTSCOMP),VL
*                                     INIT A SEQUENCE OF IMPT CALLS
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         WRTERM 'START READ'
READE    DS    0H
         MVI   BUFE,C' '
         MVC   BUFE+1(L'BUFE-1),BUFE  CLEAR INPUT BUFFER
         LA    R2,EINGABE
         FSREAD (2),FSCB=FSCBE        READ INPUT
         LTR   R9,R15                 RC = 0 ?
         BNZ   CLOSE                  NO - END OF INPUT REACHED
GDDMPUT  DS    0H
         CALL  IMAPT,(IMAGEID,IMAGLEN,BUFE),VL GIVE INPUT TO GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         B     READE                  READ NEXT INPUT RECORD
CLOSE    DS    0H
         CALL  IMAPTE,(IMAGEID),VL    INDICATE END OF IMAGE TO GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         LA    R2,EINGABE
         FSCLOSE (2),FSCB=FSCBE       CLOSE INPUT
SAVE     DS    0H
         WRTERM 'SAVE IMAGE'
         CALL  IMASAV,(IMAGEID,NULL,EINGABE,IMACOUNT,IMADESC,NULL),VL
*                                     SAVE THE IMAGE
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
*                                     INIT A SEQUENCE OF IMGT CALLS
         CALL  FSTERM,(0),VL          END OF GDDM PROCESSING
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         WRTERM 'The ADMIMG File has been created successfully'
RETURN   DS    0H
         L     R13,4(,R13)            RECOVER SAVE AREA ADDRESS
         LR    R15,R9                 SET RETURN
         L     R14,12(,R13)           RESTORE REGISTERS
         LM    R0,R12,20(R13)         RETURN TO CALLING ROUTINE
         BR    R14
ERRPRO   DS    0H
         LINEDIT TEXT='ERROR READING INPUT FILENAME RC=.. -> EXIT',SUB=*
               (DEC,(R9))
         B     RETURN
ERRGDDM  DS    0H
         LINEDIT TEXT='ERROR WHILE GDDM PROCESSING RC=.. -> EXIT',SUB=(*
               DEC,(R9))
         B     RETURN
ERROPE   DS    0H
         WRTERM 'ERROR WHILE OPENING THE INPUT FILE: '
         WRTERM EINGABE,8,EDIT=NO
         LINEDIT TEXT=' IMG A RC=..  -> EXIT',SUB=(DEC,(R9))
         B     RETURN
SAVEAREA DS    18F
FSCBE    FSCB  ,RECFM=F,BUFFER=BUFE
         DS    0F
BUFE     DS    CL80
FRAGE    DC    C'Please enter the filename of the compressed IMG-File:'
BUFF     DS    CL130
HEXFF    DC    F'-1'                 PARMLIST FENCE
NULL     DC    F'0'
IMAGLEN  DC    F'80'
IMAGEID  DC    F'-1'
IPTSFORM DC    F'2'
IPTSCOMP DC    F'0'    FOR IMAGES "WITHOUT COMPRESSION" USE F'1'
IMACOUNT DC    F'17'
IMADESC  DC    CL17'HALFTONE IMDS2IMG'
EINGABE  DS    0CL18
EINFN    DC    CL8' '
         DC    CL8'IMG'
         DC    CL2'A '
         REGEQU                        REGISTER EQUATES
         END IMDS2IMG


IMDS2IMG EXEC

/* This REXX provides                                             */
/*           - the setup of GDDM                                  */
/*           - the execution of IMDS2IMG module                   */
START:
   parse arg Arguments
   "VMFCLEAR"
   say
/* setup the link to the GDDM DISK                                */
   say "Setup the link to GDDM ..."
   "CP LINK GDDM 191 491 RR"    /*  <----- check and              */
   "ACCESS 491 J/A"             /*  <----- modify if necessary    */
/* execute IMDS2IMG                                               */
   say "Exceuting IMDS2IMG ..."
   "IMDS2IMG" Arguments
   exit


IMG2IMDS ASSEMBLE

This program converts a GDDM image file (filetype
ADMIMG) to the IMDS format that may be downloaded to a
PC and there manipulated, ie with IBM's IMAGE EDIT
program.

The PC file is created 'with compression'.  If it is to be created
'without compression' the constant IGTSCOMP has to be
changed.  (See the definition at the end of this program.)
The file has to be downloaded to the PC without the options
CRLF or ASCII.

The program assumes the following filetypes:
      Input - ADMIMG (LRECL 400  RECFM F
      Output - IMG (LRECL 80 RECFM F.

         TITLE 'IMG2IMDS CONVERT ADMIMG(GDDM) FILE TO IMDS-FORMAT(PC)'
*/* THE INPUT FILENAME MAY BE SUPPLIED AS A PARAMETER OR IS          */
*/* PROMPTED.                                                        */
*/* REGISTER USAGE:                                                  */
*/*               R12 - BASE                                         */
*/*               R13 - SAVEAREA                                     */
*/*               R15 - RETURNCODE                                   */
IMG2IMDS CSECT
         STM   R14,R12,12(R13)        SAVE REGS
         BALR  R12,0                  BASE REG
         USING *,R12
         ST    R13,SAVEAREA+4         SAVE CALLERS SAVEA AREA ADDRESS
         LA    R11,SAVEAREA           GET SAVE AREA ADDRESS
         ST    R11,8(,R13)            AND SAVE IT
         LR    R13,R11                SAVE AREA FOR CALLED ROUTINES
PARMCHK  DS    0H
         LA    R2,8(,R1)              ADDRESS OF THE FIRST PARM
         WRTERM 'Conversion from ADMIMG to IMG (PC) ...'
         CLC   0(4,R2),HEXFF          END OF PARMLIST ?
         BE    PROMPT                 YES -> PROMPT FOR THE FILENAME
         MVC   AUSFN(8),0(R2)         MOVE IN FILENAME
         B     GDDMI
PROMPT   DS    0H
         RDTERM BUFF,PRBUFF=FRAGE,PRLGTH=L'FRAGE  PROMPT FILENAME
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRPRO                 NO - DISPLAY ERROR MSG
         CLC   BUFF(8),=CL8' '        NOTHING ENTERED ?
         BE    RETURN                 YES - EXIT
         MVC   AUSFN,BUFF             USE FIRST 8 BYTES AS FILENAME
GDDMI    DS    0H
         CALL  FSINIT,(0),VL          INITIALIZE GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  FSPSEL,(NULL),VL       SEL LOGICAL PAGE 0
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  IMAGID,(IMAGEID),VL    GET A IMAGID FROM GDDM
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
REST     DS    0H
         WRTERM 'RESTORE IMAGE'
         CALL  IMARST,(IMAGEID,NULL,AUSGABE,IMACOUNT,IMADESC),VL
*                                     SAVE THE IMAGE
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
OPENOUT  DS    0H
         LA    R2,AUSGABE             LOAD ADDRESS OF THE OUTPUT FNAME
         FSERASE (2),FSCB=FSCBA       ERASE OUTPUT FILE - IF PRESENT
         FSOPEN (2),FSCB=FSCBA        OPEN OUTPUT FILE
         CH    R15,=H'28'             RC = 28 ?
         BE    STRTGET                OK - OUTPUT FILE IS NEW
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERROPA                 NO - DISPLAY ERROR MSG
STRTGET  DS    0H
         CALL  IMAGTS,(IMAGEID,NULL,IGTSFORM,IGTSCOMP),VL
*                                     INIT A SEQUENCE OF IMGT CALLS
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         WRTERM 'START READ'
GDDMGET  DS    0H
         CALL  IMAGT,(IMAGEID,BUFLEN,BUFA,DATLEN),VL
*                                     GET DATA FROM GDDM INTO OUTP BUF
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CLC   DATLEN,NULL            END OF GDDM RECORDS ?
         BE    CLOSE                  YES - END PROCESSING
         LA    R2,AUSGABE
         FSWRITE (2),FSCB=FSCBA       WRITE OUTPUT
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRWRIT                NO - WRITE ERROR
         B     GDDMGET                READ NEXT INPUT RECORD
CLOSE    DS    0H
         CALL  IMAGTE,(IMAGEID),VL    END OF IMGAE RETRIEVAL
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         CALL  FSTERM,(0),VL          END OF GDDM PROCESSING
         LTR   R9,R15                 RC = 0 ?
         BNZ   ERRGDDM                NO - DISPLAY ERROR MSG
         LA    R2,AUSGABE
         FSCLOSE (2),FSCB=FSCBA       CLOSE INPUT
         WRTERM 'The IMG File has been created successfully'
RETURN   DS    0H
         L     R13,4(,R13)            RECOVER SAVE AREA ADDRESS
         LR    R15,R9                 SET RETURN
         L     R14,12(,R13)           RESTORE REGISTERS
         LM    R0,R12,20(R13)         RETURN TO CALLING ROUTINE
         BR    R14
ERRPRO   DS    0H
         LINEDIT TEXT='ERROR READING THE INPUT FILENAME RC=.. -> EXIT',*
               SUB=(DEC,(R9))
         B     RETURN
ERRGDDM  DS    0H
         LINEDIT TEXT='ERROR WHILE GDDM PROCESSING RC=.. -> EXIT',SUB=(*
               DEC,(R9))
         B     RETURN
ERROPA   DS    0H
         WRTERM 'ERROR OPENING THE OUTPUT FILE: '
         WRTERM AUSGABE,8,EDIT=NO
         LINEDIT TEXT=' IMG A RC=..  -> EXIT',SUB=(DEC,(R9))
         B     RETURN
ERRWRIT  DS    0H
         WRTERM 'ERROR WRITING THE OUTPUT FILE: '
         WRTERM AUSGABE,8,EDIT=NO
         LINEDIT TEXT=' IMG A RC=..  -> EXIT',SUB=(DEC,(R9))
         B     RETURN
SAVEAREA DS    18F
FSCBA    FSCB  ,RECFM=F,BUFFER=BUFA,BSIZE=80
         DS    0F
BUFA     DS    CL80
BUFLEN   DC    F'80'
DATLEN   DC    F'0'
FRAGE    DC    C'Please enter the filename of the ADMIMG File:'
BUFF     DS    CL130
HEXFF    DC    F'-1'                 PARMLIST FENCE
NULL     DC    F'0'
IMAGEID  DC    F'-1'
IGTSFORM DC    F'2'
IGTSCOMP DC    F'2'    FOR IMAGES "WITHOUT COMPRESSION" USE F'1'
IMACOUNT DC    F'17'
IMADESC  DC    CL17'HALFTONE IMG2IMDS'
AUSGABE  DS    0CL18
AUSFN    DC    CL8' '
         DC    CL8'IMG'
         DC    CL2'A '
         REGEQU                        REGISTER EQUATES
         END IMG2IMDS


IMG2IMDS EXEC

/* This REXX provides                                             */
/*           - the setup of GDDM                                  */
/*           - the execution of IMG2IMDS module                   */
START:
   parse arg Arguments
   "VMFCLEAR"
   say
/* setup the link to the GDDM DISK                                */
   say "Setup the link to GDDM ..."
   "CP LINK GDDM 191 491 RR"    /*  <----- check and              */
   "ACCESS 491 J/A"             /*  <----- modify if necessary    */
/* execute IMG2IMDS                                               */
   say "Executing IMG2IMDS ..."
   "IMG2IMDS" Arguments
   exit


XIMGINST EXEC

/* This REXX produces two Modules (IMG2IMDS and IMDS2IMG)         */
/* from the corresponding ASM programs.                           */
START:
   "VMFCLEAR"
   say
/* setup GDDM                                                     */
   say "Setup GDDM ..."
   "CP LINK GDDM 191 491 RR"    /*  <----- check and              */
   "ACCESS 491 J/A"             /*  <----- modify if necessary    */
/* establish globals                                              */
   say
   say "Setup globals ..."
   "DESBUF"
   "Q CPLEVEL ( STACK"
   pull Part1 "," Part2
   "DESBUF"
   if right(Part1,10) = "RELEASE 21" ,
   then "GLOBAL MACLIB DMSGPI OSMACRO ADMLIB"
   else "GLOBAL MACLIB DMSSP CMSLIB OSMACRO ADMLIB"
   "GLOBAL TXTLIB ADMNLIB"
/* assemble and genmod IMG2IMDS                                   */
   say
   say "Assemble IMG2IMDS ..."
   "ASSEMBLE IMG2IMDS"
   Wrc = Rc
   say "Rc from assembly =" Wrc
   if Wrc = 0 ,
   then do
          say
          say "Generate Module IMG2IMDS ..."
          say
          say "---------------------------------------------------"
          say "CAUTION: if you get now DMSLIO201W check for errors"
          say "---------------------------------------------------"
          say
          "LOAD IMG2IMDS ( CLEAR"
          "GENMOD IMG2IMDS"
          say "Rc from genmod =" Rc
        end
/* assemble and genmod IMDS2IMG                                   */
   say
   say "Assemble IMDS2IMG ..."
   "ASSEMBLE IMDS2IMG"
   Wrc = Rc
   say "Rc from assembly =" Wrc
   if Wrc = 0 ,
   then do
          say
          say "Generate Module IMDS2IMG ..."
          say
          say "---------------------------------------------------"
          say "CAUTION: if you get now DMSLIO201W check for errors"
          say "---------------------------------------------------"
          say
          "LOAD IMDS2IMG ( CLEAR"
          "GENMOD IMDS2IMG"
          say "Rc from genmod =" Rc
        end
/* exit                                                           */
   say
   say "End of module generation"
   say
   exit
                        c PSW Germany 1991

