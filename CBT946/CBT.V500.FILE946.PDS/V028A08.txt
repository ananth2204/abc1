 An interactive testing tool
XT is an XEDIT macro for testing EXECs and XEDIT macros while you are still
editing them with XEDIT.  It saves the current copy and executes it directly
from XEDIT.  It is a productivity aid: it does nothing you couldn't do from the
keyboard, but it saves typing and checks for some conditions you might miss.
USAGE
You save and execute the macro or EXEC you're currently editing by entering 'XT
<arguments>' (where <arguments> are any command line parameters needed by the
EXEC.  XT ensures that there is no version of the EXEC being tested accessed
ahead of the one you're editing and EXECDROPs any version that has been loaded
into memory.  (Both of these circumstances can cause acute mental distress, as
none of your changes seem to do anything.)
XT will fix the filetype, and strip the sequence numbers, when processing
$EXEC/$XEDIT filetypes being prepared for the EXECUPDT command.
XT executes the EXEC or macro, prefixing the name and argument list with EXEC or
MACRO to ensure that it is not pre-empted by an XEDIT macro or command by the
same name, and displays the CPU time used and return code when it returns to
XEDIT.
LIMITATIONS
XT requires VM/SP Release 4 CMS, as it uses EXECSTAT/EXECDROP and XEDIT EXTRACT.
Serial number stripping (for $EXEC/$XEDIT files) depends on the XEDIT TRUNC
setting being correct: 72 for EXECUPDT files, LRECL for others.
XT XEDIT
/* eXec Tester: save and run the EXEC or macro we're editing. */
        parse source . . me .;
        "EXTRACT ?FNAME?FTYPE?FMODE?BASEFT?UPDATE?ALT?SIZE?LINE?TRUNC?"
        if me = fname.1 then exit 36;          /* cannot run myself */
        xft = baseft.1;          /* what's our executable filetype ?*/
        if left(xft,1) = "$" then xft = substr(xft,2);
        n = find("EXEC XEDIT",xft);                 /* is it legal ?*/
        if n = 0 then do;
          "EMSG Unsupported file type '"strip(xft)"'.";
          exit 24;
          end;
        verb = word("EXEC MACRO",n); /*and how does XEDIT call it ? */
         /* make sure that all changes are on disk, in case of abend*/
         if alt.2 > 0 then do;
           "COMMAND PSAVE";
           if rc ¬= 0 then exit rc;
           end;
         n = queued();        /* if we run, will we run this copy ? */
         address command "LISTFILE" fname.1 xft "* (NOH LIFO"
         do queued()-n;
           pull . . xm .;
           end;
         if rc = 0 & substr(xm,1,1) < substr(fmode.1,1,1) then do
          "EMSG" space("'"fname.1 xft xm"' already exists,",
                       "cannot execute '"fname.1 xft fmode.1"'.");
           exit 28;
           end;
          "EXECSTAT" fname.1 xft ;   /*ensure we don't collide with */
          if rc = 0 then "EXECDROP" fname.1 xft;  /*memory resident */
/*if an update structure, or an update base, write executable form  */
        if xft ¬= ftype.1 then do;
          address command "ERASE" fname.1 xft fmode.1;
          "SET RANGE -* *";
          do i = 1 to size.1;
            "LOCATE :"i "EXTRACT ?CURLINE?";
            "EXECIO 1 DISKW" fname.1 xft fmode.1 "(STRING",
                                   strip(left(curline.3,trunc.1),"T");
            if rc ¬= 0 then exit rc;
            end;
          address command "FINIS" fname.1 xft fmode.1;
          "LOCATE :"line.1;
          end;
        t =  cputime();     /* now execute with supplied arguments  */
         address 'XEDIT' verb fname.1 arg(1);
        r = rc;                           /* and say what happened  */
        "MSG CPU=" format(cputime()-t,,3)"sec, RC="r;
        exit r;
cputime: procedure;                    /* get current total cpu time*/
         return c2d(substr(diag('0c'),25,8))/1000000;
Gary George
Technical Support Supervisor
Workers Compensation Board of Alberta (Canada)    ) Gary George 1988

























































