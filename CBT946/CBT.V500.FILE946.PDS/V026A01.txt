 A program to determine the status of a tape drive
Our company has many virtual machines that act as service machines.  Several of
these virtual machines automatically start various programs that might require
the use of a tape drive.  A problem came up that we couldn't get rid of: if the
program attempted to use a tape drive that was attached to it, but not loaded
with a tape or not in READY status, CP would issue a message to the virtual
machine and a message could be sent to the operator's console.  The problem
occurs when the operator does not notice the message, or notices the message,
gets distracted and never mounts the requested tape.  Thus this virtual machine
sits in a wait state and can never finish the task it started.  This prompted
the writing of CTAPE.  This program will, given a device address, first issue a
diagnose X'24' to determine what type of, if any, device exists at that address.
If a tape device exists at that address, the program will examine, interpret,
and return onto the stack information about the status of the drive.  We set up
our server machines to call this program to determine whether the machine had a
tape drive and, if so, what its status was.  If the server machine determined
that it had no tape drive or had a drive with unacceptable status (eg not ready;
not write-enabled), it would go into a loop that would do the following: send a
message to the operator to remedy the situation, issue a CP sleep for one
minute, then check the drive's status again with CTAPE.  This module returns an
error code greater than zero if there is a problem querying the status of the
drive.  If the drive is attached, CTAPE will return all its information on the
program stack.  This program has allowed us to give our server machines a little
intelligence that they did not have; it has also been incorporated into some
interactive EXECs so that the user can be informed of what is going on rather
than get a system message he might not understand.
         REGEQU
CTAPE    CSECT
         BALR  R11,0
         USING *,R11
         ST    R14,SAVERET             SAVE ADDRESS FROM WHENCE WE CAME
* DETERMINE IF WHAT THE USER TYPED IN IS VALID.
         USING PARMS,R1                ON ENTRY R1 POINTS TO PARMS
         CLI   PARMDEV,X'FF'           IF NO DEV SPECIFIED ...
         BE    NODEV                      ... THEN ERROR
         MVC   CRADDR+1(3),PARMDEV     MOVE UNIT ADDRESS TO BE CONVRTD
         DROP  R1
         BAL   R14,EBC2HEX             CONVERT EBCDIC TO HEX
* GET THE DEVICE TYPE & FEATURES
         LH    R5,FRADDR               GET DEVICE ADDRESS TO CHECK OUT
         SRL   R5,4(0)                 SHIFT IT
         DIAG  R5,R6,X'24'             DEVICE TYPE & FEATURES DIAGNOSE
         BC    1,DEV3ERR               GO AWAY IF AN ERROR CONDITION
* THE CHECK-OUT WENT OK. BUT IS IT A TAPE DRIVE?
         N     R6,=X'FFFF0000'         ONLY WANT FIRST 2 STATUS BYTES
         C     R6,=X'08100000'         IS IT A 3420 TAPE DRIVE?
         BE    T3420                   YES, GO DO 3420 STUFF
         C     R6,=X'08080000'         IS IT A 3410 TAPE DRIVE?
         BE    T3410                   YES, GO DO 3410 STUFF
         WRTERM 'THAT DEVICE IS NOT A 3410 OR 3420'
         LA    R15,8                   INDICATE REAL ERROR
         B     EXIT                    BRANCH TO EXIT ROUTINE
* HANDLE INDIVIDUAL STATUS CODE LENGTHS FOR A 3420 OR 3410
T3420    EQU   *
         MVC   TAPETYPE,=C'3420'       MOVE DRIVE TYPE TO PRINT LINE
         MVI   STATLEN,X'18'           GET SET FOR 24 STATUS BYTES
         B     NXTINFO                 GO DO OTHER STUFF
T3410    EQU   *
         MVC   TAPETYPE,=C'3410'       MOVE DRIVE TYPE TO PRINT LINE
         MVI   STATLEN,X'09'           GET SET FOR 09 STATUS BYTES
* ISSUE THE DIAGNOSE TO GET STATUS BYTES
NXTINFO  EQU   *
         LA    R6,CHECKCCW             ADDRESS OF THE CCW
         DIAG  R5,R6,X'20'             DO GENERAL IO DIAGNOSE
         BC    4,DIAG2ER               GO AWAY IF AN ERROR CONDITION
         BC    2,DIAG2ER               GO AWAY IF AN ERROR CONDITION
          BC    1,DIAG3ER               GO AWAY IF AN ERROR CONDITION
* WE NOW ARE SURE WE HAVE SOME GOOD STATUS BYTES.. NOW INTERPRET THEM
*   GET THE MODEL NUMBER
         MVC   TAPEMODL+3(1),STATUS+6  MOVE A STAT BYTE TO PRINT AREA
         NI    TAPEMODL+3,X'0F'        CLEAR ALL BUT DRIVE MODEL #
*   CHECK ON WRITE RING STATUS
         TM    STATUS+1,B'00000010'    IS THERE A WRITE-ENABLE RING?
         BZ    WRITEEN                 YES, WRITE ENABLED
         MVC   WRITEST(8),=C'DISABLED' NO, SHOW AS SUCH
         B     CHKSTAT                 GO SEE IF ITS LOADED
WRITEEN  EQU   *
         MVC   WRITEST(8),=C'ENABLED ' SHOW THAT TAPE IS WRITABLE
CHKSTAT  EQU   *
*   CHECK TO SEE IF THE TAPE IS AT LOADPOINT
         TM    STATUS+1,B'00001000'    IS TAPE AT LOAD-POINT?
         BZ    NOTLOAD                 NO, GO SAY SO
         MVC   LOADPT(4),=C'    '      YES, SHOW AS SUCH
         B     CHKRDY                  GO SEE IF ITS READY
NOTLOAD  EQU   *
         MVC   LOADPT(4),=C'NOT-'      SHOW THAT TAPE IS NOT AT L.P.
CHKRDY   EQU   *
*   CHECK TO SEE IF THE TAPE DRIVE IS READY
         TM    STATUS+1,B'01100000'    CHECK READY BITS
         BZ    NOTEX                   TAPE IS 'NOT EXIST'
         TM    STATUS+1,B'00100000'    IS TAPE 'NOT-READY'?
         BNZ   NOTRDY                  YES, LETS GO SHOW
         TM    STATUS+1,B'01000000'    IS TAPE 'READY'?
         BNZ   READY                   YES, LETS GO SHOW
* IF WE GOT HERE, TAPE MUST BE 'READY-REWIND'
         MVC   TAPER(12),=C'READY-REWIND'
         B     SHOWIT                  GO TO SHOW ROUTINE
NOTEX    EQU   *       STATUS BITS SHOW THAT THE DRIVE IS 'NOT EXIST'
         MVC   TAPER(12),=C'NOT-EXIST   '
         B     SHOWIT                  GO TO SHOW ROUTINE
READY    EQU   *       STATUS BITS SHOW THAT THE DRIVE IS 'READY'
         MVC   TAPER(12),=C'READY       '
         B     SHOWIT                  GO TO SHOW ROUTINE
NOTRDY   EQU   *       STATUS BITS SHOW THAT THE DRIVE IS 'NOT READY'
         MVC   TAPER(12),=C'NOT-READY   '
SHOWIT   EQU   *
* WRITE OUT ALL KINDS OF INTERESTING INFO TO THE AREA TO BE STACKED
         LINEDIT TEXT='TYPE ....  MODEL .. WRITE ........ ....AT LOADPOX
               INT   DRIVE IS ............',                           X
               SUB=(CHARA,TAPETYPE,DECA,TAPEMODL,CHARA,WRITEST,CHARA,LOX
               ADPT,CHARA,TAPER),                                      X
               DOT=NO,RENT=NO,COMP=NO,BUFFA=AIMLINE,DISP=NONE
*    STACK STUFF ON TO PROGRAM STACK
         LA    R1,STACKER             LOCATE PARAMETER LIST
         SVC   202                    DO IT
         DC    AL4(OUTERROR)          GO AWAY IF THERE WAS AN ERROR
         MVI   LINEOUT,C' '           SPACE OUT FIRST CHAR
         MVC   LINEOUT+1(79),LINEOUT  SPACE OUT THE REST OF THE LINE
* CLEAR REGISTER FOR ZERO RETURN CODE
         XR    R15,R15                CLEAR REGISTER
EXIT     EQU   *
         L     R14,SAVERET            GET ADRESS TO RETURN TO
         BR    R14                    GO HOME
OUTERROR EQU   *
         WRTERM 'ERROR DURING STACK PROCESSING'
         XR    R15,R15       CLEAR REGISTER
         LA    R15,8         INDICATE MAJOR ERROR
         B     EXIT          GO EXIT TO CALLER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* E R R O R   M E S S A G E S
NOTATT   EQU   *
         LINEDIT TEXT='DEVICE ... NOT ATTACHED',SUB=(HEX,(R5)),RENT=NO
          LA    R15,8                   RETURN A SERIOUS ERROR CODE
         B     EXIT                    GO RETURN TO CALLER
DIAG2ER  EQU   *
         WRTERM 'DIAGNOSE ERROR #2'
         LA    R15,16                  RETURN A SERIOUS ERROR CODE
         B     EXIT                    GO RETURN TO CALLER
DIAG3ER  EQU   *
         WRTERM 'DIAGNOSE ERROR #3'
         LA    R15,16                  RETURN A SERIOUS ERROR CODE
         B     EXIT                    GO RETURN TO CALLER
DEV3ERR  EQU   *
         LINEDIT TEXT='DEVICE DOES NOT EXIST (....)',SUB=(HEX,(R5)),   X
               RENT=NO,COMP=NO
         LA    R15,8                   RETURN A SERIOUS ERROR CODE
         B     EXIT                    GO RETURN TO CALLER
NODEV    EQU   *
         WRTERM 'YOU MUST SPECIFY A TAPE DEVICE ADDRESS'
         LA    R15,4                   RETURN A MINOR ERROR CODE
         B     EXIT                    GO RETURN TO CALLER
**********************************************************************
* ROUTINE TO CONVERT EBCDIC CODES TO THE CORRESPONDING HEX VALUE
EBC2HEX  EQU   *
         LA    R9,CRADDR          POINT TO EBCDIC HEX STRING
TRANS    EQU   *
         CLI   0(R9),X'15'        IS THIS THE END OF THE STRING?
         BE    FINT               IF SO BRANCH
         CLI   0(R9),C'0'         IS THIS A NUMERIC EBCDIC CHAR?
         BNL   NOFIX              IF SO, SKIP FIX
         IC    R1,0(,R9)          GET BYTE TO BE FIXED
         LA    R1,9(,R1)          ADJUST LOWER NIBBLE FOR 'ABCDEF'
         STC   R1,0(,R9)          STORE CHANGE
NOFIX    EQU   *
         LA    R9,1(,R9)          POINT TO NEXT
         B     TRANS              GO DO IT AGAIN TILL END OF STRING
FINT     PACK  FRADDR(2),CRADDR(4)  PACK OUT HIGH NIBBLES
         BR    R14                RETURN TO CALLER
* VARIABLES FOR THIS CONVERT ROUTINE
         DS    0F
CRADDR   DC    X'F0F0F0F0'   EBCDIC SOURCE
         DC    X'15'
         DS    0F            ALIGN FOR A FULLWORD
FRADDR   DS    H
         DS    CL1           THIS EXTRA BYTE NEEDED FOR PACK
**********************************************************************
* GLOBAL VARIABLE AREA
*
         DS    0F
SAVERET  DS    F                  ADDRESS TO WHERE CTAPE SHALL RETURN
* CCW TO CHECK STATUS OF THE DEVICE
         DS    0D                                                       CLE00120
CHECKCCW DC    X'04',AL3(STATUS),X'00FF00' CCW CONTINUED ON NEXT LINE
STATLEN  DC    X'00' LENGTH OF STATUS BYTES TO READ
* AREA TO PLACE THE RETURNED STATUS INFORMATION
STATUS   DC    CL24'0'
* AREAS FOR DESCRIPTIONS OF THE STATUS OF THE TAPE DRIVE
TAPETYPE DC    CL4'    '          DISPLAYABLE TAPE DRIVE TYPE
TAPEMODL DC    F'0'               DISPLAYABLE TAPE DRIVE MODEL #
WRITEST  DC    CL8'        '      DISPLAYABLE WRITE-RING STATUS
LOADPT   DC    CL4'    '          DISPLAYABLE LOADPOINT-STATUS
TAPER    DC    CL12'            ' DISPLAYABLE READY-STATUS
* * * * * * * * * * * * * * * *
* PARMS FOR SVC CALL TO PUT A LINE ONTO THE STACK
STACKER  DS    0D
         DC    CL8'ATTN'
         DC    CL4'FIFO'
         DC    AL1(80)
          DC    AL3(LINEOUT)
*  MEMORY THAT WILL GET MOVED TO THE STACK
         DS    CL1   ENSURE AT LEAST 1 EMPTY SPACE FOR STRING LEN BYTE
         DS    0D
AIMLINE  EQU   *-1
LINEOUT  DS    CL80
* * * * * * * * * * * * * * * *
         LTORG
* DSECT TO "PARSE" THE COMMAND LINE
         DS    0D
PARMS    DSECT                    PARAMETER LIST PASSED FROM COMMAND
PARMCMD  DS    CL8                THE COMMAND NAME
PARMDEV  DS    CL8                SECOND PARAMETER MUST BE DEVICE ADDR
         END
Bernard McIlroy
Systems Programmer
Progress Lighting (USA)  ) B McIlroy 1988

















































