 Date manipulation
Date manipulations such as finding which day of the week a certain date is and
incrementing/decrementing a date have been done by programmers since the birth
of computer languages.
In a relational database environment the tendency is to include in column types
the 'date' type plus built-in date functions.  However, REXX does not provide
that and we have to code it.
All algorithms I have seen till now have somewhere an array containing the
number of days in the 12 months (31, 28, 31, 30 ...).
The following REXX EXEC does not use such arrays, but uses astronomical formulae
valid through Julian and Gregorian calendars, and forever!  Also leap year
calculations do not appear explicitly.
To test, try statements like the following:
   if calendar(julien(x)) <> x then say "Error typing exec source"
   a =incdate (x y)
   if incdate(a -y) <> x then say "Mistake in source"
The function below,  called 'julien', is the kernel of a set of useful date
calculations: for example, the number of days (says delta) between two dates
(say date1 and date2) is given by:
     delta = julien(date1) - julien(date2)
The day of week (0=Sunday, 1=Monday, ...) is given by:
     dow = (julien(date1) + 1.5) // 7 =

JULIEN
/* Returns the astronomical julian day                              */
/* or "INVALID" if arg is not numeric                               */
/*   SYNTAX    : = JULIEN(date)                                     */
/*   ARGUMENTS : The date in format yyyymmdd.p or yymmdd.p          */
/*               p = decimal part of the day (.5 = 12:00)           */
/*   REMARKS   : - for format yymmdd.p, start on January 1, 1980    */
/*               - validity :  ONLY check numeric, positive and     */
/*                           at least yymmdd should be given        */
/*               - formula is taken from 'Calculs astronomiques a   */
/*                 l'usage des amateurs', Jean Meeus, Societe       */
/*               Astronomique de France, Paris, 1986 - page 18      */
/*   EXAMPLE : say julien(19870611) displays 2446957.5              */
arg d
/*Check argument validity, reformat when yymmdd.p, parse the date   */
if   datatype(d,"NUM") <> 1 | d < 0 | length(d) < 6
then return "INVALID"
1 = trunc(d)
p = d - 1
1 = right(1,8)
yyyy = substr(1,1,4) + 0
mm   = substr(1,5,2) + 0
dd   = substr(1,7,2)
/* Find centuries if not provided                                   */
if   length(yyyy) = 2
then if   yyyy < 79
     then yyyy = 2000 + yyyy
     else yyyy = 1900 + yyyy
/* Prepare data for formula                                         */
if   mm > 2
then do
        y = yyyy
        m = mm
      end
else do
        y = yyyy - 1
        m = mm + 12
      end
/*Take Gregorian calendar switch date into account and use formula  */
if   (10000*yyyy + 100*mm + dd) > 15821015
then do
        a = trunc(y / 100)
        b = 2 - a + trunc(a / 4)
      end
else b = 0
jj = trunc(365.25 * y) + trunc(30.6001 * (m + 1)),
     + dd + p + 1720994.5 + b
return jj

CALENDAR
/*     Returns the date from astronomical julian days               */
/*   RETURNS   : Date in format yyyymmdd or "INVALID" if arg        */
/*                is not numeric                                    */
/*   SYNTAX    : = CALENDAR(jj)                                     */
/*   ARGUMENTS : The date in astronomical julian days               */
/*   REMARKS   : - validity :  Check if argument is numeric and     */
/*               >= 0  decimal day part is not taken into account   */
/*   EXAMPLE   : say calendar(2446000) displays 19841026            */
arg jj
/* Check argument validity, reformat when yymmdd.p                  */
if   datatype(jj,"NUM") <> 1 | jj < 0
then return "INVALID"
jj = jj + 0.5
z  = trunc(jj)
f  = jj - z
/* Apply the formula ...                                            */
if   z < 2299161
then a = z
else do
        alpha = trunc((z - 1867216.25)/36524.25)
        a     = z + 1 + alpha - trunc(alpha / 4)
     end
b = a + 1524
c = trunc((b - 122.1)/365.25)
d = trunc(365.25 * c)
e = trunc((b - d)/30.6001)
dd= trunc(b - d - trunc(30.6001 * e) + f)
if   e < 13.5
then mm = e - 1
else mm = e - 13
if   mm > 2.5
then yy = c - 4716
else yy = c - 4715
return right(yy,4,"0") || right(mm,2,"0") ||right(dd,2,"0")

INCDATE
/*    Increment a date                                              */
/*    RETURNS : The new date or "INVALID" if input date is          */
/*              incorrect(see JULIEN function for validity          */
/*              check) or increment not numeric (increment          */
/*              can be negative) The date is returned in            */
/*              the same format as the input date.                  */
/*      SYNTAX : = INCDATE(from days)                               */
/*   ARGUMENTS : The date (yymmdd or yyyymmdd) and the increment    */
/*     EXAMPLE : say incdate(19870402 1000) displays 19891227       */
arg from days
if   datatype(days,"NUM") <> 1
then return "INVALID"
x = julien(from)
if   x = "INVALID"
then return "INVALID"
x = x + days
y = calendar(x)
if   length(from) = 6
then return substr(y,3)
else return y
Philippe Taymans
Systems Programmer (Belgium)  ) Xephon 1988

