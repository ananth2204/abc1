 Browse
This routine will view a file, loading only one screen's worth of records into
storage at a time (unlike XEDIT, which loads the entire file into storage).  The
EXEC checks for the existence of the file and, if it is found, invokes XEDIT
with the $BROWSE$ profile.  A help panel is also provided.¬

BROWSE EXEC
/* Browse a file */
trace n
rcode = 0
arg fn ft fm .
if fn = '?' | fn = 'HELP' then signal HELP
if fm = '' then fm = '*'
'MAKEBUF'
'STATE' fn ft fm
rcode = rc
if rcode = 0 then
  do
    push fn ft fm
    'XEDIT' userid() '$BROWSE$ ( PROFILE $BROWSE$'
    pull rcode
    if rcode > 36 then rcode = 2
  end
EXIT:
'DROPBUF'
exit rcode
HELP:
'HELP EXEC BROWSE'
signal EXIT

$BROWSE$ XEDIT
/* XEDIT profile for BROWSE exec */
trace off
/* grab a buffer */
'CMS MAKEBUF'
call INIT
call BUILD_ID
call SET_OPTIONS
call DISPLAY_SCREEN
call MAIN_RTN
EXIT:
/* release our buffer */
'CMS DROPBUF'
/* tell XEDIT we are finished */
'COMMAND QUIT'
/* stack a return code */
push rcode
exit rcode
MAIN_RTN:
/*Here we continually loop, interpreting what the user has entered */
do forever
  read nochange tag number
  do queued()
/* Here we save the line as it was entered. This is done so that   */
/* any future LOCATE commands in mixed case will function properly */
     parse pull line
/*  parse the line properly, in upper case                         */
     parse upper var line key sline column string
/*If data was entered on the command line, go process the command. */
/* If a PF key was depressed, go to the PF key processor.          */
/*  If neither, just ignore the input.                             */
     select
       when key = 'CMD' then call COMMAND_PROC
       when key = 'PFK' then call PFKEY_PROC
       otherwise nop
     end
   end
end

DISPLAY_SCREEN:
/* This routine builds and displays the screen.                    */
/* Format an identification line and display it as the first line. */
idline = fn ft fm 'Recfm='recfm 'Lrecl='lrecl 'Size='numrecs
                 'Line='start 'Colum set reserve 1 pink none noh idline
/*Read as many records as there are available lines on the screen. */
'EXECIO' screenlines 'DISKR' fn ft fm start '( STEM LINE.'
rcode = rc
/* If not a good read and not end-of-file, then get out.           */
if rcode ¬= 0 & rcode ¬= 2 then
  do
    rcode = 1000 + rcode
    signal EXIT
  end
/* If we are in upper case mode, translate the line to upper case. */
if case = 'U' then
    do j = 1 to screenlines
        LINE.j = translate(LINE.j)
    end
/*Here we check each line, taking into account the column position */
/* and display type (HEX/CHARACTER).                               */
do i = 1 to screenlines
  pos = i+2
  l = start + i-1
  linenum = start + i - 1
  strlen = len
  if scol + len - 1 > lrecl then strlen = lrecl - scol + 1
  outline = substr(LINE.i,scol,strlen)
  if hex = 2 then
    do
      outline = c2x(outline)
    end
  if num then
    do
      linenum = start + i - 1
      outline = left(outline,len-numcolslost,' ') right(linenum,7,'0')
    end
  select
    when l <= numrecs    then set reserve pos yel none noh outline
    when l  = numrecs+1  then set reserve pos noh '*** End of File ***'
    when l  > numrecs+1  then set reserve pos noh ' '
    otherwise nop
  end
end
return
PFKEY_PROC:
/* Here we interpret the PF key depressed.                          */
select
    when sline = 1  then 'HELP EXEC BROWSE'
    when sline = 3  then signal EXIT
    when sline = 4  then call SCR_LEFT
    when sline = 5  then call SCR_RIGHT
    when sline = 6  then '?'
    when sline = 7  then call SCR_BWD
    when sline = 8  then call SCR_FWD
    when sline = 9  then call SCR_REPEAT
    otherwise EMSG ' BRW002  Unsupported PF key'
end
return
COMMAND_PROC:
/* Here we interpret the command that was entered.                  */
/* If it is not a BROWSE subcommand, pass it to CMS.                */
savecmd = sline column string
 select
    when substr(sline,1,1) = '/'     then call SCR_LOCATE
    when substr(sline,1,1) = ':'     then call SCR_POSITION
    when substr(sline,1,1) = '='     then call SCR_REPEAT
    when substr(sline,1,2) = 'BO'    then call SCR_BOTTOM
    when substr(sline,1,2) = 'B'     then call SCR_BWD
    when substr(sline,1,1) = 'C'     then call SCR_CASE
    when substr(sline,1,4) = 'DICT'  then call SCR_DICT
    when substr(sline,1,1) = 'D'     then call SCR_NEXT
    when substr(sline,1,1) = 'F'     then call SCR_FWD
    when substr(sline,1,1) = 'H'     then 'HELP EXEC BROWSE'
    when substr(sline,1,1) = 'Q'     then signal EXIT
    when substr(sline,1,1) = 'L'     then call SCR_LEFT
    when substr(sline,1,1) = 'N'     then call SCR_NEXT
    when substr(sline,1,1) = 'T'     then call SCR_TOP
    when substr(sline,1,1) = 'U'     then call SCR_UP
    when substr(sline,1,1) = 'V'     then call SCR_VIEW
    when substr(sline,1,1) = 'R'     then call SCR_RIGHT
    when substr(sline,1,1) = 'S'     then call SCR_SET
    when datatype(sline,'W') & sline > 0
                                     then call SCR_POSITION
    otherwise sline column string
end
return
SCR_BWD:
/* Scroll backwards                                               */
start = start - screenlines
if start < 1 then start = 1
call DISPLAY_SCREEN
return
SCR_BOTTOM:
/* Position at end of file                                        */
start = numrecs
call DISPLAY_SCREEN
return
SCR_CASE:
/* Change the case.                                               */
select
    when substr(column,1,1) = 'M' then
        do
          case = 'M'
          call DISPLAY_SCREEN
        end
    when substr(column,1,1) = 'U' then
        do
          case = 'U'
          call DISPLAY_SCREEN
        end
    otherwise EMSG ' BRW003 Invalid operand -' column
end
return
SCR_DICT:
/* Locate the dictionary if this is a library.                    */
'EXECIO 1 DISKR' fn ft fm 1 '( VAR LIBPDS'
if rc¬=0 then
  do
    EMSG ' BRW004 Error reading line #1. Contact Tech Support.'
    return
  end
if substr(LIBPDS,1,6) ¬= 'LIBPDS' then
  do
    EMSG ' BRW005 File is not a PDS.'
    return
  end
n = substr(LIBPDS,13,4)
start = c2d(n)
 call DISPLAY_SCREEN
return
SCR_FWD:
/* Scroll forward.                                                */
start = start + screenlines
if start > numrecs then start = numrecs + 1
call DISPLAY_SCREEN
return
SCR_LEFT:
/* Shift left. (We must take into account a HEX setting.          */
if key = 'PFK' then sline = 'L'len
if sline = 'L' & column = '' then sline = sline||len
parse var sline . 2 n .
if datatype(n,'W') & n > 0 then call SCR_LEFT_SUB
else
  if datatype(column,'W') & column > 0 then
    do
      n = column
      call SCR_LEFT_SUB
    end
  else EMSG ' BRW006 Invalid number of columns'
return
SCR_LEFT_SUB:
if hex = 1 then scol = scol - n + numcolslost
else     scol = scol - (n % 2) + numcolslost
if scol < 1 then scol = 1
call DISPLAY_SCREEN
return
SCR_LOCATE:
/* Locate a string, mixed or upper case.                          */
parse var line  . '/' locstr '/' .
if case = 'U' then locstr = translate(locstr)
if locstr = '' then EMSG ' BRW007 No string supplied.'
else
  do
    'EXECIO * DISKR' fn ft fm start '( LIFO LO /'locstr'/'
    if rc=0 then
      do
        pull start .
        call DISPLAY_SCREEN
      end
    else EMSG ' BRW008 String not found.'
  end
return
SCR_NEXT:
/*  move forward in file  */
if (sline = 'N' | sline = 'D') & column = '' then sline = sline||'1'
parse var sline . 2 n .
if datatype(n,'W') & n > 0 then
  do
    start = start + n
    if start > numrecs then start = numrecs
    call DISPLAY_SCREEN
  end
else
  if datatype(column,'W') & column > 0 then
    do
      start = start + column
      if start > numrecs then start = numrecs
      call DISPLAY_SCREEN
    end
  else EMSG ' BRW009 Invalid number of lines'
return
SCR_POSITION:
/*  position to a particular line in the file                      */
if substr(sline,1,1) = ':' then sline = substr(sline,2)
 start = sline
if start > numrecs then start = numrecs + 1
call DISPLAY_SCREEN
return
SCR_RIGHT:
/* Shift right. (We must take into account a HEX setting.          */
if key = 'PFK' then sline = 'R'len
if sline = 'R' & column = '' then sline = sline||len
parse var sline . 2 n .
if datatype(n,'W') & n > 0 then call SCR_RIGHT_SUB
else
  if datatype(column,'W') & column > 0 then
    do
      n = column
      call SCR_RIGHT_SUB
    end
  else EMSG ' BRW010 Invalid number of columns'
return
SCR_RIGHT_SUB:
if hex = 1   then scol = scol + n - numcolslost
else     scol = scol + (n % 2) - numcolslost
if scol > lrecl then EMSG ' BRW011 Scroll exceeds logical record length.'
else call DISPLAY_SCREEN
return
SCR_SET:
/* Set display to HEX/CHARACTER and line numbers ON/OFF.         */
select
  when substr(column,1,1) = 'H' then call SCR_SET_HEX
  when substr(column,1,1) = 'N' then call SCR_SET_NUMBERS
  otherwise EMSG ' BRW012 Invalid operand -' column
end
call DISPLAY_SCREEN
return
SCR_SET_HEX:
/* Set display to HEX or CHARACTER                               */
select
  when string = 'ON'  then
    do
      hex = 2
      len = xlen
    end
  when string = 'OFF' then
    do
      hex = 1
      len = clen
    end
  otherwise EMSG ' BRW013 Invalid operand -' string
end
return
SCR_SET_NUMBERS:
/* Set line numbers ON/OFF.                                      */
select
  when string = 'ON'  then
    do
      num = 1
      numcolslost = 8 / hex
    end
  when string = 'OFF' then
    do
      num = 0
      numcolslost = 0
    end
  otherwise EMSG ' BRW014 Invalid operand -' string
end
return
SCR_UP:
 /* Move backward.                                                */
if sline = 'U' & column = '' then sline = sline||'1'
parse var sline . 2 n .
if datatype(n,'W') & n > 0 then
  do
    start = start - n
    if start < 1 then start = 1
    call DISPLAY_SCREEN
  end
else
  if datatype(column,'W') & column > 0 then
    do
      start = start - column
      if start < 1 then start = 1
      call DISPLAY_SCREEN
    end
  else EMSG ' BRW015 Number of lines is invalid.'
return
SCR_VIEW:
/* Start screen display on a specific column */
if sline = 'V' &  column = '' then sline = sline||'1'
parse var sline . 2 n .
if datatype(n,'W') & n > 0 then
  do
    call SCR_VIEW_SUB
  end
else
  if datatype(column,'W') & column > 0 then
    do
      n = column
      call SCR_VIEW_SUB
    end
  else EMSG ' BRW016 Column number is invalid.'
return
SCR_VIEW_SUB:
if n <= lrecl then
   do
      scol = n
      call DISPLAY_SCREEN
   end
else EMSG 'BRW017 Specified column number exceeds logical record length.'
return
SCR_REPEAT:
/* Repeat last command                                           */
parse var savecmd sline column string
call COMMAND_PROC
return
SCR_TOP:
/* move to top of file                                           */
start = 1
call DISPLAY_SCREEN
return
SET_OPTIONS:
/*  set some XEDIT display options                               */
'COMMAND SET PREFIX OFF'
'COMMAND SET CMDLINE TOP'
'COMMAND SET SCALE OFF'
'COMMAND SET CURLINE ON 3'
'COMMAND SET MSGLINE ON 3 OVERLAY'
'COMMAND SET TOFEOF OFF'
return
BUILD_ID:
/* build fields for IDLINE                                         */
'LISTFILE' fn ft fm ' ( LIFO FORMAT ALLOC'
pull . . . recfm lrecl numrecs numblks
fn = left(fn,8,' ')
 ft = left(ft,8,' ')
fm = left(fm,2,' ')
recfm = left(recfm,2,' ')
lrecl = left(lrecl,5,' ')
return
INIT:
'SET LINEND OFF'
pull fn ft fm .
extract '/lscreen'
screenlines = lscreen.1 - 4
start = 1
scol = 1
len = lscreen.2 - 1
clen = len
xlen = (len % 2) * 2
case = 'M'
hex = 1
num = 0
numcolslost = 0
set pf4 before schange 6
pfline = 'PF1=Help  PF3=Quit  PF4=Left  PF5=Right  PF6=?  PF7=Bwd',
          '  PF8=Fwd  Pf9=    '
set reserve lscreen.1-1 noh
set reserve lscreen.1 turq none noh pfline
return

BROWSE HELP FILE
BROWSE EXEC
The BROWSE exec lets you scan a file.  Once in BROWSE, you  can issue a
BROWSE subcommands.
The format of the BROWSE command is:
+------------+--------------------------+
|  BROWSE    |  fname|? <ftype <fmode>> |
+------------+--------------------------+
where:
  fname ftype fmode      is the name of the file to be browsed.
  ?                      displays information about the BROWSE
                         command and its use.
BROWSE Subcommands
Several subcommands are available to help you  browse a file.
Valid subcommands and their abbreviations are:
BACKWARD SUBCOMMAND
+------------+----------------------------------------+
|   Backward |    <n>                                 |
|   Bn       |                                        |
+------------+----------------------------------------+
The BACKWARD subcommand scrolls the screen window backwards (towards the top of
the file).
  n  is the number of pages to scroll backwards.  (A page
     comprises the datalines displayed below the level
     command line.)  The default is one page.
BOTTOM SUBCOMMAND
+------------+----------------------------------------+
|   BOttom   |                                        |
+------------+----------------------------------------+
The BOTTOM subcommand displays the last page of a file or library member.  If
you  are browsing a member of a library, the last page of  the member is
displayed.
CASE SUBCOMMAND
+------------+----------------------------------------+
|   Case     |    <U|M>                               |
+------------+----------------------------------------+
The  CASE subcommand sets the character controls translation of character
strings used with the LOCATE function.
  U  specifies upper-case characters.  (U is the default.)
     The string (and all data from the file) is translated to
      upper case before the comparison is done during subsequent
     LOCATE commands.  This means that case is effectively
     ignored for the comparison.
  M  specifies mixed case (upper and lower case characters)
     No translation is done on the string or the file data before
     the comparison is done in subsequent LOCATE commands, so the
     string must be an exact match with file data to be found.
DICT SUBCOMMAND
+------------+----------------------------------------+
|   DIct     |                                        |
+------------+----------------------------------------+
The DICT  subcommand displays  the names of  the members  in the library being
browsed.
DOWN/NEXT SUBCOMMAND
+------------+----------------------------------------+
|   Down     |   <n>                                  |
|   Dn       |                                        |
|   Next     |   <n>                                  |
|   Nn       |                                        |
+------------+----------------------------------------+
The DOWN/NEXT subcommand  moves the screen window down the  indicated number of
lines (towards the end of the file).
  n    specifies the number of lines to move.
FORWARD SUBCOMMAND
+------------+----------------------------------------+
|   Forward  |    <n>                                 |
|   Fn       |                                        |
+------------+----------------------------------------+
The FORWARD  subcommand scrolls the screen  window forward (towards the  end of
the file).
  n  is the number of pages to scroll forwards.  (A page
     comprises the datalines displayed below the level
     command line.)  The default is one page.
LEFT SUBCOMMAND
+------------+----------------------------------------+
|   Left     |    <n>                                 |
|   Ln       |                                        |
+------------+----------------------------------------+
The LEFT subcommand scrolls the screen window towards the left.
   n   specifies the number of columns to scroll left.
       The default is the width of the screen.
QUIT SUBCOMMAND
+------------+----------------------------------------+
|   Quit     |                                        v
+------------+----------------------------------------+
The QUIT subcommand terminates the current level (or displays the dictionary if
member select mode was entered through the MEMBER subcommand).
RIGHT SUBCOMMAND
+------------+----------------------------------------+
|   Right    |    <n>                                 |
|   Rn       |                                        |
+------------+----------------------------------------+
The RIGHT subcommand scrolls the screen window towards the right.
   n   specifies the number of columns to scroll right.
       The default is the width of the screen.
SET SUBCOMMAND
The SET  subcommand controls display  of line  numbers and screen  data format.
The format of the SET subcommand is:
+------------+----------------------------------------+
|   Set      |   <Hex On|OFf|Char> <Numbers On|OFf>   |
+------------+----------------------------------------+
   Hex On|OFf|Char    turns hex format on or off.
                      ON displays the file in hex format.
                      OFF displays the file in EBCDIC format.
                      CHAR displays the file in both EBCDIC and
                      hex format.
    Numbers On|OFf     controls the display of line numbers on the
                      right side of the screen.
                      The default setting is off.
If no parameters are specified, the current settings are displayed.
TOP SUBCOMMAND
+------------+----------------------------------------+
|   Top      |                                        |
+------------+----------------------------------------+
The TOP subcommand displays the first screen of a file or member.
UP SUBCOMMAND
+------------+----------------------------------------+
|   Up       |    <n>                                 |
|   Un       |                                        |
+------------+----------------------------------------+
The UP  subcommand moves  the screen window  up the  indicated number  of lines
(towards the top of the file).
    n    specifies the number of lines to move
         the screen up.  The default is 1 line.
VIEW SUBCOMMAND
+------------+----------------------------------------+
|   View     |    <n>                                 |
|   Vn       |                                        |
+------------+----------------------------------------+
The  VIEW subcommand  displays the  specified column  of the  input records  in
column 1 of the screen.
    n    specifies the number of the column to
         displayed in column 1 of the screen.
         If no parameter is specified, the current
         column setting is displayed.
/ SUBCOMMAND (LOCATE)
+------------+----------------------------------------+
|   /string  |  </n <m>>                              |
+------------+----------------------------------------+
The / subcommand displays the record containing the specified character string
on the level's current line.  The string  is translated  (or not translated)
based on the most recent CASE subcommand setting.  If CASE U (the default) is in
effect, the string (and all data from the file) is translated to uppercase
before the comparison is done.  If CASE M is in effect, no translation is done,
and the string must match the data exactly.
   string   specifies the character string to be located.
   </n <m>> specifies column boundaries to be used for
            the locate operation.  Note that the closing
            delimiter is only required if boundaries are given.
n SUBCOMMAND
+------------+----------------------------------------+
|   (:)n     |                                        |
+------------+----------------------------------------+

The n  subcommand displays the indicated  record number as the  level's current
line.
 For example; to display the 100th line, enter 100 or :100.
 = SUBCOMMAND
+------------+----------------------------------------+
|   =        |                                        |
+------------+----------------------------------------+
The =  subcommand repeats the  last command for  this level.  The  last command
entered for the level will be executed again.
? SUBCOMMAND
+------------+----------------------------------------+
|   ?        |<?>                                     |
+------------+----------------------------------------+
The ? subcommand displays the last command  entered for this level in the level
command area.  The command will be executed  only if the user presses the ENTER
key.
BROWSE PF Key Settings

 Several PF keys are pre-set for use with the browse function.  The settings and
associated BROWSE subcommands are:

             BROWSE
PF Key     Subcommand     Meaning

  1                       Obtain information on the use of BROWSE.
  3        QUIT           Terminate the level the cursor is at.
  4        LEFT           Scroll screen left.
  5        RIGHT          Scroll screen right.
  6        ?              Recall last command.
  7        BACKWARD       Scroll backward one screen.
  8        FORWARD        Scroll forward one screen.
  9        =              Repeat last command.

BROWSE Return Codes
    1 - console not a screen or disconnected.
    2 - insufficient free storage available.
   28 - file not found.
 1xxx - Error xxx reading input file.
Michael Kilroy
Systems programming Supervisor
Progress (USA) ) Xephon 1989











































