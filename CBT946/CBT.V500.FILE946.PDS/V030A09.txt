 Easy transfer of ICCF members to CMS files
When you have to transfer members from an ICCF library to CMS files the IBM
tools for that are insufficient:
1    You have to use DTSUTIL to punch the members to the punch queue.
2    In your machine you have to write a REXX procedure which will retrieve
DTSUTIL output, scan it and do the following actions:
     y    If it encounters 'ADD MEMBER' statement it starts placing the next
statements into a CMS file with the same name.
     y    If it encounters 'end of member' statement it will close the CMS file.
     y    If it encounters '../*' or '../&' at columns 1-4 it will shift the
statement to the two left columns (the periods were inserted by DTSUTIL).
3    After the REXX procedure has finished processing you have to do a rename to
most of the files since there is no similar concept to file type or file mode in
ICCF.
Here is a simpler and more efficient way to transfer ICCF members to CMS files:
Include the following statements in your JCL:
   * $$PUN CLASS=K,PUN=00D
   // ASSGN SYS018,00D
            ADD HERE YOUR ASSGN DLBL AND EXTENT STATEMENTS FOR THE
            ICCF FILE.
   // EXEC IDPWRIC
   LIB=NN,MEMBER='FILENAME',FTYPE='FILETYPE';
       AS MANY CARDS AS YOU WISH.
   /*
     LIB=NN is the ICCF library number.
     MEMBER=FILENAME is the member name in ICCF and the filename of the new CMS
file.
     FTYPE=FILETYPE is the filetype of the CMS new file.
IDPWRIC is a PL/I program that reads the user parameters and adds the ':READ
FNAME FTYPE' to the top of the member so it can be easily read by the readcard *
command in CMS, leaving the rest of the member in its original state.  This
program makes use of the            PL/I subroutine, IDPICRM, which reads ICCF
members.
After execution of your job in a VSE partition you must perform the following
actions:
1    Spool the VSE virtual punch to the CMS user's virtual reader.
2    Start the power punch task (S PUN,00D,K).
3    The user must use the READCARD command to retrieve the files(s).
Restriction:
The IDPICRM routine is an excellent way to read ICCF members in a user program
but it will work properly only on a single extent ICCF file.
-IDPWRIC: PROC OPTIONS (MAIN);
0DCL   SYSIN    FILE  STREAM INPUT EXTERNAL                      0010
                    ENV (RECSIZE(80) F MEDIUM (SYSIPT));         0011
0DCL   OUT      FILE OUTPUT RECORD
                ENV (RECSIZE(81) CTLASA F MEDIUM (SYS018, 3525));
0DCL   SYSPRINT FILE  STREAM OUTPUT PRINT EXTERNAL               0010
                    ENV ( F  MEDIUM (SYSLST));                   0011
0DCL   IDPICRM ENTRY;
0DCL   LIB     PIC   '999' ;
 DCL   MEMBER  CHAR  (8)  ;
 DCL   FTYPE   CHAR  (8)  ;
 DCL   RC      CHAR  (2) INIT ('00') ;
 DCL   SW_MEM  BIT (1) INIT ('1'B) ;
 DCL   1 VM_NAME ,
         2 ASA  CHAR (1) INIT (' '),
         2 READ CHAR (6) INIT (':READ '),
         2 FN   CHAR (8) INIT (' '),
         2 F1   CHAR (1) INIT (' '),
         2 FT   CHAR (8) INIT ('PROG'),
         2 F2   CHAR (1) INIT (' '),
         2 FM   CHAR (1) INIT ('1'),
         2 F3   CHAR (55) INIT ( ' ');
 DCL   VM_NAME_STR CHAR (81) DEF VM_NAME;
 DCL   1 LINE_A,
         2 ASA  CHAR (1) INIT (' '),
          2 LINE CHAR (80);
0             /*************/
              /* MAIN PROC */
              /*************/
 OPEN FILE (SYSIN)  TITLE ('SYSIN') ;
 OPEN FILE (OUT)  TITLE ('OUT') ;
 OPEN FILE (SYSPRINT)  TITLE ('SYSPRINT') ;
0ON ENDFILE  (SYSIN) GOTO END_INPUT;
1DO WHILE ('1'B);
    SELECT (RC);
       WHEN ('08') PUT SKIP LIST ('ILLEGAL LIBRARY, LIB=',LIB);
       WHEN ('12') PUT SKIP LIST ('MEMBER NOT FOUND MEMBER=',
                                               MEMBER,'LIB=',LIB);
       OTHER;
    END; /* SELECT */
    GET DATA (LIB, MEMBER,FTYPE) COPY ;
    VM_NAME.FN = MEMBER;
    IF FTYPE='' | FTYPE=' ' THEN FTYPE='PROG';
    VM_NAME.FT = FTYPE;
    RC = '00';
    SW_MEM = '1'B;
    CALL TIPUL_MEM;
 END; /* DO WHILE '1'B */
ITIPUL_MEM: PROC;
    DO WHILE (RC='00');
       CALL IDPICRM (LINE,LIB,MEMBER,RC);
       IF RC='00'
          THEN DO;
               IF SW_MEM
                  THEN DO;
                       WRITE FILE (OUT) FROM (VM_NAME_STR);
                       SW_MEM = '0'B;
                  END;
               WRITE FILE (OUT) FROM (LINE_A);
          END;
    END;
 END; /* TIPUL_MEM */
 END_INPUT:
-END IDPWRIC;
 IDPICRM:   PROC (ICCF_LINE,LIB_NUM,MEM_NAME,RC);
 /*   THIS PROGRAM READS A MEMBER IN ICCF LIBRARY             */
 /*   AND RETURNS IT TO THE CALLING PROGRAM                   */
 /*   ONE 80 BYTE RECORD PER CALL UNTIL RC = '04' IS          */
 /*   RETURNED WHICH INDICATES THE ENTIRE MEMBER HAS          */
 /*   BEEN READ.                                              */
 /*   RETURN CODES                                            */
 /*   '00' ONE LINE RETURNED                                  */
 /*   '04' END OF MEMBER                                      */
 /*   '08' INVALID LIBRARY                                    */
 /*   '12' MEMBER NOT IN LIBRARY                              */
     DCL IDPPLOD ENTRY (CHAR(*),PTR)
                 OPTIONS (ASM INTER);
 /* IDPPLOD IS AN ASSEMBLER ROUTINE THAT LOADS VSE PHASES INTO */
 /* MEMORY AND RETURNS ITS LOADING ADDRESS TO THE CALLER       */
     DCL  1 DTSIGEN   UNAL  BASED(GEN_PTR),
            2     FILLER  CHAR(20),
            2     NUMRECS FIXED BIN(15);
     DCL  ICCF_BLOCK (BLKFCT) CHAR (88) CONTROLLED,
          ICCF_KEY  PIC '(8)9' STATIC INIT ((8)'0'),
          ICCF_KEY-S PIC '(8)9' STATIC INIT ((8)'0');
     DCL  ICCFILE   CHAR(8) INIT('DTSFILE');
     DCL  FLTPRC    CHAR(1);
     DCL  ICCF_LINE CHAR (80),
          LIB_NUM   PIC '(3)9',
          MEM_NAME  CHAR(8),
          RC        CHAR(2);
      DCL  GEN_PTR PTR,
          GEN_PTR_DEF DEF GEN_PTR FIXED BIN(31);
     DCL  FIRST   BIT (1) STATIC INIT ('1'B);
     DCL GENRECS FIXED BIN(15) STATIC;
     DCL RECSIZE FIXED BIN(31) STATIC;
     DCL 1  RESHUMA_A$_STR STATIC,
            2 A$                   CHAR (2),
            2 FIL1                 CHAR (2),
            2 RTAIDENT             CHAR (8),
            2 NUM_LIBS             FIXED BIN(15) UNALIGNED,
            2 NUM_USERS            FIXED BIN(15) UNALIGNED,
            2 FIL2                 CHAR (72);
     DCL   RESHUMA_A$ CHAR(88) DEF RESHUMA_A$_STR;
     DCL 1  RESHUMA_X$_STR STATIC,
            2  X$                  CHAR (2),
            2  RESHUMA_X$_ENTRY (3),
               5    RTDNAME        CHAR (8),
               5    FILL1          CHAR (4),
               5    RTDSTRT        FIXED BIN (31) UNALIGNED,
               5    FILL2          CHAR (10),
            2  FILL3               CHAR (4),
            2  FWD_POINT           FIXED BIN (31) UNALIGNED;
     DCL   RESHUMA_X$ CHAR(88) DEF RESHUMA_X$_STR;
     DCL   FWD_POINT_CHAR DEF FWD_POINT CHAR (4);
     DCL  J_SUB_X$           FIXED BIN (15) INIT (0) STATIC;
     DCL  I_BLOCK_NUM FIXED BIN (31) STATIC;
     DCL  I_REC_NUM FIXED BIN (31) STATIC;
     IF   FIRST
     THEN DO;
          CALL IDPPLOD ('DTSIGEN ',GEN_PTR);
          GEN_PTR_DEF = GEN_PTR_DEF + 8;
          GENRECS = NUMRECS;
          RECSIZE = 88 * GENRECS;
          ALLOCATE ICCF_BLOCK(GENRECS);
     END;
     CALL READ_ICCF;
 READ_ICCF: PROC;
     DCL DTSFILE FILE RECORD INPUT DIRECT KEYED
          ENV (F RECSIZE (RECSIZE) REGIONAL(1)
               MEDIUM(SYS010,3350) EXTENTNUMBER(2));
- IF   FIRST
  THEN DO;
         OPEN FILE (DTSFILE);
         READ FILE (DTSFILE) INTO (ICCF_BLOCK)
                             KEY (ICCF_KEY);
         RESHUMA_A$ = ICCF_BLOCK(1);
         IF LIB_NUM > NUM_LIBS | LIB_NUM < 1
         THEN DO;
               RC = '08';
               FIRST = '1'B;
               ICCF_KEY = (8)'0';
               J_SUB_X$ = 0
               CLOSE FILE (DTSFILE);
               RETURN;
         END;
         I_BLOCK_NUM = 1 + 2 * NUM_USERS + LIB_NUM - 1;
                     /* 001 A$ RECORD                       */
                     /* 100 USER PROFILE 50 PAIRS OF B$, E$ */
                     /* LIBRARY REQUIRED - 1                */
                     /* GETS YOU TO THE APPROPRIATE C$ RECORD */
        CALL LOCATE_RECORD;
        FWD_POINT_CHAR = SUBSTR(ICCF_BLOCK(I_REC_NUM),13,4);
        FIRST = '0'B;
- FIND_MEMBER:
        DO WHILE (FWD_POINT ¬= 0 );
               IF J_SUB_X$ = 0
                THEN DO;
                      I_BLOCK_NUM = FWD_POINT;
                      CALL LOCATE_RECORD;
                      RESHUMA_X$ = ICCF_BLOCK(I_REC_NUM);
               END;
               DO WHILE (J_SUB_X$ <= 2);
                      J_SUB_X$ = J_SUB_X$ + 1;
                      IF RTDNAME (J_SUB_X$) = MEM_NAME
                      THEN DO;
                           FWD_POINT = RTDSTRT(J_SUB_X$);
                           LEAVE FIND_MEMBER;
                      END;
               END;
               J_SUB_X$ = 0;
       END;
        IF FWD_POINT = 0
        THEN DO;
               RC = '12';
               FIRST = '1'B;
               ICCF_KEY = (8)'0';
               J_SUB_X$ = 0;
               CLOSE FILE (DTSFILE);
               RETURN;
        END;
  END;
-
 IF FWD_POINT ¬=0
 THEN DO;
        I_BLOCK_NUM = FWD_POINT;
        CALL LOCATE_RECORD;
        RESHUMA_X$ = ICCF_BLOCK(I_REC_NUM);
        ICCF_LINE = RESHUMA_X$;
        RC = '00';
        RETURN;
 END
 ELSE DO;
        FIRST = '1'B;
        RC = '04';
        ICCF_KEY = (8)'0';
        J_SUB_X$ = 0;
        CLOSE FILE (DTSFILE);
        RETURN;
 END;
-
-LOCATE_RECORD: PROC;
     I_REC_NUM = I_BLOCK_NUM;
     I_BLOCK_NUM = I_BLOCK_NUM / GENRECS;
     ICCF_KEY = I_BLOCK_NUM;
     I_REC_NUM = I_REC_NUM - I_BLOCK_NUM * GENRECS + 1;
     IF ICCF_KEY_S ¬= ICCF_KEY
     THEN DO;
            READ FILE (DTSFILE) INTO (ICCF_BLOCK)
                                KEY (ICCF_KEY);
            ICCF_KEY_S = ICCF_KEY;
     END;
 END LOCATE_RECORD;
 END READ_ICCF;
   END IDPICRM;
System Group
Israel Data Processing Ltd (Israel)     ) System Group 1989






