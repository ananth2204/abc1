PROP routing routine (continued)

This month we continue the article that will allow a CMS user
to add or delete himself from an 'alternative operator' list and
receive messages from PROP.


QGET ASSEMBLE

QGET     TITLE 'DEQUEUE AN ELEMENT'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - LOCATES AND DEQUEUES AN ELEMENT FROM A USER-SPECIFIED    *
* QUEUE. THIS MODULE IS FUNCTIONALLY EQUIVALENT TO QFIND (Q.V.)       *
* EXCEPT THAT IS USES A FIELD (QHCURR) IN THE QUEUE HEADER TO         *
* GET A STARTING POSITION WITHIN THE QUEUE. THIS POSITION IS UPDATED  *
* BY QGET AND RETAINED ACROSS FUNCTIONS.                              *
QGET     START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QGET,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QGET   '            CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
*                        MAIN LINE CODE                               *
* PARMS:                                                              *
*        R1  --> 3 WORD PARAMETER LIST                                *
*        +0    QUEUE_HEAD_PTR  DS A    (SUPPLIED BY CALLER)           *
*        +4    QUEUE_ELEMENT   DS 0A   (RETURNED BY QGET)             *
*        +4    STRING_POINTER  DS A    (SUPPLIED BY CALLER)           *
*        +8    STRING_LENGTH   DS X    (SUPPLIED BY CALLER) (MAX 255) *
*        +9    CONDITION_MASK  DS X    (SUPPLIED BY CALLER)           *
*        +10   STRING_OFFSET   DS H    (SUPPLIED BY CALLER) (MAX 32K) *
*   NOTE: IF COUNT IS SPECIFIED (CONDITION_MASK = 0), AND COUNT       *
*         IS 0 (STRING_OFFSET = 0), THEN THIS IS A SPECIAL CASE THAT  *
*         MEANS TO RETURN THE LAST ENTRY ON THE QUEUE                 *
* EXIT:                                                               *
*        R15  =  0 (IF QUEUE ELEMENT FOUND)                           *
*             =  4 (IF QUEUE EMPTY)                                   *
*             =  8 (IF QUEUE ELEMENT NOT FOUND)                       *
         USING PENTRY,R9               PREVIOUS QUEUE ELEMENT BASE
         USING QENTRY,R8               CURRENT QUEUE ELEMENT BASE
         USING QHDESC,R10              QUEUE HEAD DESCRIPTOR
         USING QPLIST,R1               BASE FOR PARM LIST
         L     R10,QPHEAD              R10 --> QUEUE HEAD
         STNSM QHMASK,X'00'            SAVE SYSTEM MASK AND DISABLE
         ICM   R2,B'1111',QHCURR       START W/CURRENT ELEMENT
         BM    NFOUND                  -1 MEANS END-OF-QUEUE
         BNZ   START                   START HERE
         L     R2,QHHEAD               CURR=0 MEANS START AT HEAD
START    EQU   *
         LA    R9,QHHEAD               IN CASE 1 ELEMENT IN QUEUE
         ICM   R8,B'1111',QHHEAD       CURRENT=0 MEANS RETURN HEAD
         BZ    EMPTY                   QUEUE IS EMPTY
         BM    NFOUND                  IN CASE -1 IS THERE
TOP      EQU   *                       R8 --> THIS ELEMENT
*                                      R9 --> PREVIOUS ELEMENT
*                                      R2 --> 'CURRENT' ELEMENT
         CLR   R8,R2                   IS THIS THE CURRENT?
         BE    FOUND                   YES
         LR    R9,R8                   NO, MAKE THIS ELMT PREV ELMT
         ICM   R8,B'1111',QENEXT       MAKE NEXT ELMNT THIS ELMNT
         BP    TOP                     KEEP LOOKING
         B     NFOUND                  NOT FOUND
FOUND    EQU   *                       GOT THE ELEMENT
         ICM   R12,B'1111',QENEXT      GET FORWARD POINTER
         ST    R12,PENEXT              RECHAIN
         BP    FOUND1                  IF R12 > 0, NOT AT END OF Q
         ST    R9,QHTAIL               IF PENEXT IS ZERO, PREV ELMT
         L     R12,=A(-1)              -1 INDICATES END-OF-QUEUE
*                                      IS LAST ON THE QUEUE
FOUND1   EQU   *
         XR    R15,R15                 SET ZERO RETURN CODE
         ST    R15,QELAST              ZERO BACKWARD POINTER
         ST    R8,QPELMT               RETURN POINTER TO QUEUE ELMT
         ST    R12,QHCURR              MAKE NEXT ELEMENT CURRENT ELMT
         LH    R8,QHCNT                GET COUNT OF ELEMENTS
         BCTR  R8,0                    DECREASE BY 1
         STH   R8,QHCNT                 AND UPDATE COUNT FIELD
         XR    R2,R2                   CC=0
         B     RETURN
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
NFOUND   EQU   *                       ELEMENT WAS NOT FOUND
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QPELMT              CLEAR POINTER TO ELEMENT
         BCTR  R15,0                   -1 = END-OF-QUEUE
         ST    R15,QHCURR
         LA    R15,8                   NOT_FOUND RETURN CODE
         LA    R2,2                    CC=2
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
EMPTY    EQU   *                       QUEUE WAS EMPTY
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QPELMT              CLEAR POINTER TO ELEMENT
         ST    R15,QHCURR              CLEAR POINTER TO CURRENT ELMT
         LA    R15,4                   EMPTY QUEUE RETURN CODE
         LA    R2,1                    CC=1
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
         SPACE ,
RETURN   EQU   *
         SSM   QHMASK                  RESTORE SYSTEM MASK
         SPM   R2                      SET CONDITION CODE
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QHEAD
QENTRY   QENTRY PREFIX=QE
PENTRY   QENTRY PREFIX=PE
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         POP   PRINT
         END


QLOC ASSEMBLE

QLOC     TITLE 'LOCATE AN ELEMENT'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - LOCATES, BUT DOES NOT DEQUEUE, AN ELEMENT FROM A USER-   *
* SPECIFIED QUEUE. THIS MODULE IS FUNCTIONALLY IDENTICAL TO QGET      *
* (Q.V.) EXCEPT THAT IT DOES NOT REMOVE THE LOCATED ELEMENT FROM THE  *
* QUEUE.                                                              *
QLOC     START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QLOC,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QLOC   '            CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
*                        MAIN LINE CODE                               *
* PARMS:                                                              *
*        R1  --> 3 WORD PARAMETER LIST                                *
*        +0    QUEUE_HEAD_PTR  DS A    (SUPPLIED BY CALLER)           *
*        +4    QUEUE_ELEMENT   DS 0A   (RETURNED BY QLOC)             *
*        +4    STRING_POINTER  DS A    (SUPPLIED BY CALLER)           *
*        +8    STRING_LENGTH   DS X    (SUPPLIED BY CALLER) (MAX 255) *
*        +9    CONDITION_MASK  DS X    (SUPPLIED BY CALLER)           *
*        +10   STRING_OFFSET   DS H    (SUPPLIED BY CALLER) (MAX 32K) *
*   NOTE: IF COUNT IS SPECIFIED (CONDITION_MASK = 0), AND COUNT       *
*         IS 0 (STRING_OFFSET = 0), THEN THIS IS A SPECIAL CASE THAT  *
*         MEANS TO RETURN THE LAST ENTRY ON THE QUEUE                 *
* EXIT:                                                               *
*        R15  =  0 (IF QUEUE ELEMENT FOUND)                           *
*             =  4 (IF QUEUE EMPTY)                                   *
*             =  8 (IF QUEUE ELEMENT NOT FOUND)                       *
         USING PENTRY,R7               PREVIOUS QUEUE ELEMENT BASE
         USING QENTRY,R8               CURRENT QUEUE ELEMENT BASE
         USING QHDESC,R10              QUEUE HEAD DESCRIPTOR
         USING QPLIST,R1               BASE FOR PARM LIST
         L     R10,QPHEAD              R10 --> QUEUE HEAD
         STNSM QHMASK,X'00'            SAVE SYSTEM MASK AND DISABLE
         ICM   R12,B'1111',QHCURR      START W/CURRENT ELEMENT
         BM    NFOUND                  END-OF-QUEUE
         BP    START2                  THERE AND POSITIVE, USE IT
START1   EQU   *                       CURRENT ELMT NOT SET
         ICM   R12,B'1111',QHHEAD      LOAD FIRST QUEUE ELEMENT
         BZ    EMPTY                   QUEUE IS EMPTY
         BM    NFOUND                  END-OF-QUEUE
START2   EQU   *                       R12 --> QENTRY
         LA    R8,QHHEAD               PREPARE IN CASE QUEUE HAS ONLY
         L     R3,QPELMT               GET STRING POINTER
         XR    R4,R4                   CLEAR A REGISTER
         IC    R4,QPLEN                GET STRING LENGTH
         BCTR  R4,0                    CONVERT TO MACHINE LENGTH
         LH    R5,QPOFF                GET STRING OFFSET
         LR    R9,R5                   IN CASE COUNT NOT SPECIFIED
         XR    R6,R6                   CLEAR A REGISTER
         ICM   R6,B'0001',QPMASK       GET MASK FOR BRANCH
         BNZ   TOP                     MASK IS NOT ZERO
         XR    R9,R9                   COUNT WAS SPECIFIED, START AT 0
TOP      EQU   *                       SPIN THROUGH TO FIND A MATCH
         LA    R9,1(,R9)               BUMP ELEMENT COUNT
         LR    R7,R8                   LOAD PREVIOUS ELEMENT BASE
         LR    R8,R12                  LOAD QUEUE ELEMENT BASE
         LA    R12,0(R5,R8)            ADD OFFSET TO ELEMENT POINTER
         EX    R4,COMPARE              IS THIS A MATCH?
         EX    R6,BRANCH               GOTO 'FOUND' ROUTINE IF TRUE
*                                      IF 'COUNT' WAS SPECIFIED, R6
*                                      WILL BE 0 AND THIS BRANCH WILL
*                                      NEVER OCCUR
         CR    R9,R5                   CHECK COUNT REGISTER
         BE    FOUND                   IF THE 'COUNT' OPTION WAS
*                                      NOT SPECIFIED, R9 WILL NEVER
*                                      EQUAL R5
         ICM   R12,B'1111',QENEXT      GET NEXT ELEMENT
         BNZ   TOP
         B     NOTFOUND                IF HERE, NO MATCH FOR STRING
COMPARE  CLC   0(0,R3),0(R12)
BRANCH   BC    0,FOUND                 IF TRUE, GO TO FOUND ROUTINE
         SPACE
*                                      R12 = 0, R8 = LAST,
*                                         R7 = NEXT TO LAST
NOTFOUND EQU   *                       STRING NOT FOUND THIS QUEUE
         OR    R5,R6                   SPECIAL CASE: IF COUNT WAS
*                                      PASSED (R6=0), BUT COUNT WAS
*                                      0 (R5=0), THEN IT MEANS GET
*                                      LAST ENTRY ON QUEUE
         BNZ   NFOUND                  NO, RETURN TO CALLER
*                                      R12 --> NEXT, R8 --> CURRENT
FOUND    EQU   *                       STRING IS A MATCH
         XR    R15,R15                 SET ZERO RETURN CODE
         ST    R8,QPELMT               RETURN POINTER TO QUEUE ELMT
         ICM   R2,B'1111',QENEXT       GET PTR TO NEXT ELEMENT
         BP    FOUND1                  THERE, NO PROBLEM
         XR    R2,R2                   CLEAR A REGISTER
         BCTR  R2,0                    -1 MEANS END OF QUEUE
*                                      NEXT CALL WILL RETURN END-OF-Q
FOUND1   EQU   *
         ST    R2,QHCURR               MAKE THIS ELEMENT CURRENT ELMT
         XR    R2,R2                   CC=0
         B     RETURN
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
NFOUND   EQU   *                       ELEMENT WAS NOT FOUND
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QPELMT              CLEAR POINTER TO ELEMENT
         BCTR  R15,0                   -1 INDICATES END OF QUEUE
         ST    R15,QHCURR              CLEAR POINTER TO CURRENT ELMT
         LA    R15,8                   NOT_FOUND RETURN CODE
         LA    R2,2                    CC=2
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
EMPTY    EQU   *                       QUEUE WAS EMPTY
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QPELMT              CLEAR POINTER TO ELEMENT
         ST    R15,QHCURR              CLEAR POINTER TO CURRENT ELMT
         LA    R15,4                   EMPTY QUEUE RETURN CODE
         LA    R2,1                    CC=1
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
         SPACE ,
RETURN   EQU   *
         SSM   QHMASK                  RESTORE SYSTEM MASK
         SPM   R2                      SET CONDITION CODE
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE RETURN ADDRESS
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QHEAD
QENTRY   QENTRY PREFIX=QE
PENTRY   QENTRY PREFIX=PE
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         POP   PRINT
         END


QPURGE ASSEMBLE

QPURGE   TITLE 'FREE ALL ELEMENTS IN A QUEUE'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - DEQUEUES AND QFRETS ALL ELEMENTS OF A USER-SPECIFIED     *
* QUEUE.                                                              *
QPURGE   START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QPURGE,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QPURGE  '           CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
*                        MAIN LINE CODE                               *
* PARMS:                                                              *
*        R1  --> PARAMETER LIST                                       *
*              QUEUE_HEAD_PTR  DS A    (SUPPLIED BY CALLER)           *
*                              DS A    (UNUSED)                       *
*              QUEUE_COUNT     DS F    (RETURNED BY QPURGE)           *
* EXIT:                                                               *
*        R15  =  0 (IF QUEUE WAS PURGED)                              *
*             =  4 (IF QUEUE EMPTY)                                   *
         USING NUCON,0
         USING QENTRY,R12              ULTIMATE QUEUE ELEMENT BASE
         USING QHDESC,R10              QUEUE HEAD DESCRIPTOR
         USING QPLIST,R4
         LR    R4,R1                   SAVE PARM POINTER
         L     R10,QPHEAD              LOAD QUEUE HEAD BASE
         STNSM QHMASK,X'00'            SAVE SYSTEM MASK AND DISABLE
         ICM   R12,B'1111',QHHEAD      LOAD QUEUE ELEMENT BASE
         BZ    EMPTY                   QUEUE IS EMPTY
         XR    R15,R15                 CLEAR A REGISTER
         ST    R15,QHHEAD              ZERO FORWARD POINTER
         ST    R15,QHCURR              ZERO 'CURRENT' ELMT PTR
         ST    R10,QHTAIL              TAIL POINTS TO HEAD
         LH    R0,QHCNT                GET OLD COUNT OF ELEMENTS
         ST    R0,QPCNT                RETURN OLD COUNT TO CALLER
         STH   R15,QHCNT               COUNT IS NOW ZERO
         SSM   QHMASK                  NOW ITS SAFE TO RESTORE SMASK
TOP      EQU   *                       FREE ALL QUEUE ELEMENTS
         L     R9,QENEXT               SAVE POINTER TO NEXT ELEMENT
         LH    R2,QELEN                GET LENGTH OF BLOCK IN DWORDS
         XR    R5,R5                   CLEAR FLAG REGISTER
         TM    QEFLAG,QENUC            IS THIS NUCLEUS STORAGE
         BO    FREE                    YES, CONTINUE
         LA    R5,1                    INDICATE IT IS USER STORAGE
FREE     EQU   *
         LR    R1,R12                  LOCATION OF BLOCK TO BE FREED
         LR    R0,R2                   PUT LENGTH IN R0
         DMSFRET DWORDS=(0),LOC=(1)
         LTR   R5,R5                   IF STG=NUC, R5=0
         BNZ   NONUC                   IT IS USER STORAGE
         L     R3,NUCXFRES             GET COUNT OF FREE STORAGE
         SR    R3,R2                   LESS WHAT WE JUST FREED
         DMSKEY NUCLEUS
         ST    R3,NUCXFRES             TELL CMS ABOUT IT
         DMSKEY RESET
NONUC    EQU   *
         LTR   R12,R9                  LOAD/TEST NEXT ELEMENT ADDR
         BNZ   TOP                     IF NOT ZERO, THERE ARE MORE
         XR    R15,R15                 ZERO RETURN CODE
         LR    R2,R15                  CC=0
         B     RETURN
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
EMPTY    EQU   *                       QUEUE IS EMPTY
         SSM   QHMASK                  RESTORE SYSTEM MASK BEFORE RET
         XR    R15,R15                 CLEAR WORK REGISTER
         ST    R15,QPCNT               ZERO ELEMENTS IN AN EMPTY QUEUE
         LA    R15,4                   QUEUE EMPTY RETURN CODE
         LA    R2,1                    CC=1
         SLL   R2,28                   PUT IN BITS 2-3
         SPACE ,
RETURN   EQU   *
         SPM   R2                      SET CONDITION CODE
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            SET RETURN CODE
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QHEAD
         QENTRY
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         NUCON ,
         DEVTAB ,
         POP   PRINT
         END

QPUSH ASSEMBLE

QPUSH    TITLE 'ADD AN ELEMENT TO TOP OF A QUEUE'
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* FUNCTION - ADDS A USER-SPECIFIED QUEUE ELEMENT TO THE TOP OF A      *
* USER-SPECIFIED QUEUE.                                               *
QPUSH    START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING QPUSH,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15                 LOAD BASE REGISTER
         B     SKIPDCS                 BRANCH PAST DC
         DC    CL8'QPUSH   '           CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
*                        MAIN LINE CODE                               *
* PARMS:                                                              *
*        R1  --> PARAMETER LIST                                       *
*              QUEUE_HEAD_PTR  DS A    (SUPPLIED BY CALLER)           *
*              QUEUE_ELMT_PTR  DS A    (RETURNED BY CALLER)           *
*              QUEUE_COUNT     DS F    (RETURNED BY QPUSH)            *
* EXIT:                                                               *
*        R15  =  0                                                    *
         USING QPLIST,R1
         USING QHDESC,R10              QUEUE HEAD DESCRIPTOR
         L     R10,QPHEAD              R10 --> QUEUE HEAD
         STNSM QHMASK,X'00'            SAVE SYSTEM MASK AND DISABLE
         USING NEWQUEUE,R12            NEW QUEUE ELEMENT BASE
         L     R12,QPELMT              R12 --> NEW QUEUE ELEMENT
         USING OLDQUEUE,R9             OLD QUEUE ELEMENT BASE
         L     R9,QHHEAD               R9  --> LAST QUEUE ELEMENT
         ST    R12,QHHEAD              UPDATE QUE HEAD POINTER
         ST    R9,NEWNEXT              OLD QHEAD PTR NOW QE_NEXT
         LH    R8,QHCNT                R8 = COUNT OF QUEUE ELEMENTS
         LA    R8,1(,R8)               ADD 1
         STH   R8,QHCNT                UPDATE NEW COUNT
         ST    R8,QPCNT                RETURN UPDATED COUNT
         LTR   R9,R9                   IF QUEUE WAS EMPTY, R9 = 0
         BNE   RETURN                  QUEUE WAS NOT EMPTY
         ST    R12,QHTAIL              HEAD IS ALSO TAIL
         ST    R10,NEWHEAD             POINT BACK TO NEW QUEUE HEAD
         EJECT
*                   RETURN TO CALLING PROGRAM                         *
RETURN   EQU   *
         SSM   QHMASK                  RESTORE SYSTEM MASK
         XR    R15,R15                 ZERO RC & CC
         L     R14,12(,R13)            RESTORE R14
         LM    R1,R12,24(R13)          RESTORE R1 - R12
         BR    R14                     RETURN TO CALLER
         LTORG
         EJECT
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         QHEAD
OLDQUEUE QENTRY PREFIX=OLD
NEWQUEUE QENTRY PREFIX=NEW
         QPLIST
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         POP   PRINT
         END


PATTERN ASSEMBLE

PATTERN  TITLE '                                          '
         PRINT GEN
         AIF   ('&SYSPARM' NE 'SUP').START
         PRINT NOGEN
.START   ANOP
* PATTERN - SUBROUTINE                                                *
*    COMPARES A CALLER-SUPPLIED CHARACTER STRING TO A CALLER-         *
* SUPPLIED CHARACTER MASK. THE MASK FOLLOWS STANDARD CMS MASKING      *
* CONVENTIONS:                                                        *
*   *    REPRESENTS ANY NUMBER OF CHARACTER(S). AS MANY ASTERISKS AS  *
*        REQUIRED CAN APPEAR ANYWHERE IN THE MASK.                    *
*   %    IS A PLACE HOLDING CHARACTER THAT MEANS A SINGLE CHARACTER,  *
*        BUT ANY CHARACTER WILL DO.  AS MANY PERCENT SYMBOLS AS       *
*        NECESSARY MAY APPEAR ANYWHERE IN THE MASK.                   *
* IF THE MASK MATCHES THE STRING, A 0 IS RETURNED IN R15 AND THE      *
* CONDITION CODE IS SET TO ZERO. IF THE MASK AND PATTERN DO NOT       *
* MATCH, A 4 IS RETURNED IN R15 AND THE CONDITION CODE IS SET TO 1.   *
* ENTRY:                                                              *
*    R1 --> 4 WORD PARAMETER LIST                                     *
*            +0 ADDRESS OF STRING                                     *
*            +4 LENGTH OF STRING                                      *
*            +8 ADDRESS OF PATTERN                                    *
*           +12 LENGTH OF PATTERN                                     *
* EXIT:                                                               *
*    IF PATTERN IS A MATCH:                                           *
*       RC = 0                                                        *
*       CC = 0                                                        *
*    IF PATTERN IS NOT A MATCH:                                       *
*       RC = 4                                                        *
*       CC = 1                                                        *
* ATTRIBUTES: RENT,REUS                                               *
* EXTERNAL CALLS: NONE                                                *
* MACROS USED:                                                        *
*    REGEQU                                                           *
PATTERN  START 0
         REGEQU
         EJECT
*              ADDRESSABILITY AND SAVE AREA LINKAGE                   *
         USING *,R11
         STM   R14,R12,12(R13)         SAVE CALLER'S REGISTERS
         LR    R11,R15
         B     SKIPDCS                 BRANCH PAST DC
PGMNAME  DC    CL8'PATTERN  '          CSECT ID
         DC    CL8'&SYSDATE'           DATE OF ASSEMBLY
         DC    CL8'&SYSTIME'           TIME OF ASSEMBLY
SKIPDCS  EQU   *
         EJECT
* CHECK FOR MATCH                                                     *
         LM    R2,R5,0(R1)             GET STRING ADDR AND LENGTH
*                                         AND PATTERN ADDR AND LENGTH
TOP      EQU   *                       TOP OF MATCH LOOP
         CLI   0(R4),C'%'              AUTOMATIC 1-BYTE MATCH?
         BE    MATCH                   YES, GET NEXT BYTE
         CLI   0(R4),C'*'              AUTOMATIC GENERIC MATCH?
         BE    GMATCH                  YES, SPECIAL PROCESSING
         CLC   0(1,R2),0(R4)           ACTUAL MATCH?
         BE    MATCH                   YES, CONTINUE
         B     RETURN4                 NO, NO NEED TO KEEP LOOKING
GMATCH   EQU   *
         BCTR  R5,0                    DECREASE PATTERN LENGTH
         LTR   R5,R5                   CHECK FOR END OF PATTERN
         BZ    RETURN0                 LAST BYTE=*, AUTO MATCH
         LA    R4,1(,R4)               BUMP PATTERN POINTER
         CLI   0(R4),C'*'              ANOTHER *?
         BE    GMATCH                  KEEP GOING
         CLI   0(R4),C'%'              *% IS SAME AS **
         BE    GMATCH                  KEEP GOING
GMTOP    EQU   *
         CLC   0(1,R2),0(R4)           FOUND A MATCH?
         BE    MATCH                   YES, BACK TO NORMAL MODE
         LA    R2,1(,R2)               GET NEXT BYTE IN STRING
         BCTR  R3,0                    DECREASE STRING LENGTH
         LTR   R3,R3                   CHECK FOR END OF STRING
         BNP   RETSTR                  CHECK PATTERN BEFORE RETURNING
         B     GMTOP                   KEEP LOOKING IN STRING
MATCH    EQU   *                       CHARACTERS MATCH
         BCTR  R3,0                    DECREASE STRING LENGTH
         LA    R2,1(,R2)               BUMP STRING POINTER
         BCTR  R5,0                    DECREASE PATTERN LENGTH
         LA    R4,1(,R4)               BUMP PATTERN POINTER
         LTR   R3,R3                   CHECK FOR END OF STRING
         BNP   RETSTR                  CHECK PATTERN BEFORE RETURNING
         LTR   R5,R5                   CHECK FOR END OF PATTERN
         BNP   RETPATT                 YES, CHECK BEFORE RETURNING
         B     TOP                     KEEP LOOKING FOR MATCHES
         EJECT
* RETURN TO CALLER                                                    *
RETSTR   EQU   *                       END OF STRING
         LTR   R5,R5                   ALSO END OF PATTERN?
         BNP   RETURN0                 YES, WHAT WE WERE LOOKING FOR
         CLI   0(R4),C'*'              IT'S OK IF ONLY '*'S ARE LEFT
         BNE   RETURN4                 OOPS, THAT'S NOT A MATCH
         LA    R4,1(,R4)               BUMP TO NEXT PATTERN BYTE
         BCTR  R5,0                    DECREASE LENGTH
         B     RETSTR                  KEEP GOING TILL END OF PATTERN
RETPATT  EQU   *                       END OF PATTERN
         LTR   R3,R3                   ALSO END OF STRING
         BNP   RETURN0                 YES, WHAT WE WERE LOOKING FOR
         BCTR  R4,0                    BACK UP 1 BYTE
         CLI   0(R4),C'*'              WAS LAST BYTE GENERIC?
         BE    RETURN0                 YES, AUTOMATICALLY EQUAL
         B     RETURN4                 NO, THEREFORE UNEQUAL
RETURN4  EQU   *
         LA    R15,4                   RC=4
         LA    R2,1                    CC=1
         SLL   R2,28                   PUT IN BITS 2-3
         B     RETURN
RETURN0  EQU   *
         XR    R15,R15                 RC=0
         XR    R2,R2                   CC=0
RETURN   EQU   *
         SPM   R2                      SET CONDITION CODE
         LM    R0,R12,20(R13)          RESTORE REGISTERS
         L     R14,12(,R13)            RESTORE RETURN REGISTER
         BR    R14
         LTORG
*              S T O R A G E    D E F I N I T I O N S                 *
*                    F I X E D    S T O R A G E                       *
         EJECT
*               M O D I F I A B L E    S T O R A G E                  *
         EJECT
*           M I S C E L L A N E O U S    D S E C T S                  *
         PUSH  PRINT
         AIF   ('&SYSPARM' NE 'SUP').MAPMAC
         PRINT OFF,NOGEN
.MAPMAC  ANOP
         POP   PRINT
         END


CMSSVC MACRO

         MACRO
&LABEL   CMSSVC &TPLIST,&EPLIST,&ERROR=*+4,&TYPE=,&FLAG=
         LCLC  &TPADDR,&EPADDR,&T
&T       SETC  '&FLAG'
         AIF   (T'&FLAG NE 'O').CTYPE
&T       SETC  '02'
         AIF   ('&TYPE' EQ 'SUBCOM').CTYPE
&T       SETC  '0B'
.CTYPE   ANOP
         AIF   (T'&TPLIST EQ 'O').EPL
&TPADDR  SETC  '&TPLIST'
         AIF   ('&TPLIST'(1,1) NE '(').CONT
&TPADDR  SETC  '0(,'.'&TPLIST'.')'
.CONT    ANOP
         LA    1,&TPADDR               POINT TO PLIST
.EPL     ANOP
         AIF   (T'&EPLIST EQ 'O').SVC
&EPADDR  SETC  '&EPLIST'
         AIF   ('&EPLIST'(1,1) NE '(').CONT1
&EPADDR  SETC  '0(,'.'&EPLIST'.')'
.CONT1   ANOP
         ICM   1,B'1000',=X'&T'        INDICATE EXTENDED PLIST PRESENT
         LA    0,&EPADDR               POINT TO EXTENDED PLIST
.SVC     ANOP
         SVC   202                     ISSUE CMS SVC
         DC    AL4(&ERROR)             ERROR RETURN ADDRESS
         MEND

This article will be continued next month.

Michael L Brocious and Dennis Hoover
Shared Medical Systems Corporation (USA)

