More programmer tools for VM/XA

Here are some more handy routines to make the work of
systems programmers a little easier.


QVALL

This is one of our most used routines. It will display another
user's CP QUERY VIRTUAL ALL information; ie storage,
XSTORE, consoles, printers, readers, DASD, etc. The only
piece I left out was the virtual CPU information.

Format:

      QVALL  user-id  vdev ( MAP

Specify the user-id you want to work with. Vdev is optional
and can be used to show only one virtual device for that user.

The option of MAP can only be used if you have VMSECURE
or VMDIRECT from Systems Center and have MAP
authorization. This option will map the 'real' owner of all
virtual DASD, showing the user-id and mini-disk address of
that owner.

Example:

      QVALL OPERATOR (MAP

   OPERATOR is at 13DEE000 With 20 Virtual Devices.
   STORAGE = 4M
   XSTORE  = none
   Note: MAP specified - processing will take a little longer.
   CONS 0009 DISCONNECTED   TERM START
        0009 CL O NOCONT NOHOLD COPY 001    READY FORM STANDARD
        0009 TO OPERATOR PRT DIST 309_SYSP  FLASHC 000 DEST OFF
        0009 FLASH       CHAR       MDFY       0 FCB
        0009 3215   NOEOF OPEN 0017 NOKEEP NOMSG NONAME
   RDR  000C CL A NOCONT NOHOLD   EOF       READY
        000C 2540         CLOSED    NOKEEP
   PUN  000D CL A NOCONT NOHOLD COPY 001    READY FORM STANDARD
        000D TO SYSOP    RDR DIST 309_SYSP  DEST OFF
        000D FLASH      000 CHAR       MDFY       0 FCB
        000D 2540   NOEOF CLOSED    NOKEEP NOMSG NONAME
   PRT  000E CL O NOCONT NOHOLD COPY 001    READY FORM STANDARD
        000E TO OPERATOR PRT DIST 309_SYSP  FLASHC 000 DEST OFF
        000E FLASH       CHAR       MDFY       0 FCB
        000E 1403   NOEOF CLOSED    NOKEEP NOMSG NONAME
   DASD 0190 3380 VMBX30 R/O     72 CYL  ON DASD  0594 Owner MAINT    0190
   DASD 0191 3380 VMBX57 R/W     25 CYL  ON DASD  03BA Owner OPERATOR 0191
   DASD 0192 3380 VMBX55 R/O      1 CYL  ON DASD  03B8 Owner OPERATOR 0192
   DASD 0193 3380 VMBX67 R/O      3 CYL  ON DASD  0436 Owner VMRMAINT 0154
   DASD 0194 3380 VMBX14 R/O      5 CYL  ON DASD  0596 Owner VMOPER   0191
   DASD 019B 3380 VMXB1D R/O     35 CYL  ON DASD  03B3 Owner ?
   DASD 019C 3380 VMCX25 R/O     50 CYL  ON DASD  022C Owner ?
   DASD 019D 3380 VMBXES R/O     40 CYL  ON DASD  0590 Owner MAINT    019D
   DASD 019E 3380 VMBX30 R/O     44 CYL  ON DASD  0594 Owner MAINT    019E
   DASD 01D0 3380 VMBX13 R/W     10 CYL  ON DASD  0593 Owner VMRMAINT 0155
   DASD 01FF 3380 VMBX69 R/O     15 CYL  ON DASD  0439 Owner VMRMAINT 0192
   DASD 0291 3380 VMBX66 R/W     75 CYL  ON DASD  0435 Owner OPERATOR 0291
   DASD 029C 3380 VMCX01 R/O    125 CYL  ON DASD  0542 Owner ?
   DASD 0310 3380 VMBXES R/O     20 CYL  ON DASD  0590 Owner MAINTSTK 0254
   DASD 0319 3380 VMBXES R/O    100 CYL  ON DASD  0590 Owner MAINT    0319
   DASD 031A 3380 VMBXES R/O     50 CYL  ON DASD  0590 Owner MAINT    031A


QVALL EXEC

/* QVALL EXEC        (Type QVALL ? for help)                          */
/* Function:  Query and display another users virtual devices.        */
Arg who which . '(' opt .
If who = '' | who = '?' Then Do
  Say 'Format:   QVALL  user-id  vdev ( MAP'
  Say
  Say 'User-id should be CP Locatable.  This EXEC will chain through '
  Say 'the radix tree by device, and assemble the virtual device info.'
  Say 'If you specify vdev, then the routine will attempt to find only'
  Say 'that one device.'
  Say
  Say 'If you specify the MAP option, the virtual DASD will be mapped'
  Say 'and located using an ALLOC MAP from VMSECURE.'
  Exit
  End
/* Verify the vdev is ok */
If ¬Datatype(which,'X') Then Do
  Say 'QVALL:  Invalid vdev specified:' which
  Exit
  End
/* Find the user */
Parse Value Diag(8,'LOC' who) With key . vmdbk '15'x
If key ¬= 'VMDBK' Then Signal EOUT
/* Get virtual storage size */
vmstor = Getstore(vmdbk,2C8,4,'Host','Dec')
k = vmstor/1024
If k//1024 = 0 Then vmstor = k/1024'M'
Else vmstor = k'K'
/* Get xstore size */
xstore = Getstore(vmdbk,4CD,4,'Host','Dec')
If xstore = 0 Then xstore = 'none'
Else xstore = xstore/256||'M'
devcount = Getstore(vmdbk,5CE,2,'Host','Dec')
Say who 'is at' vmdbk 'With' devcount 'Virtual Devices.'
If which = '' Then Do
  Say 'STORAGE =' vmstor
  Say 'XSTORE  =' xstore
  End
If opt = 'MAP' Then Do
  Say 'Note: MAP specified - processing will take a little longer.'
  'VMSECURE MAP * ALLOC (FILE $ALLOC$'
   End
Call LOAD_TYPES
/* RADIX TREE search for virtual devices.                           */
/* Chain through to find all virtual devices.                       */
radix_adr1 = Getstore(vmdbk,5BC,4,'Host','Hex')
radix_lv1 = Getstore(radix_adr1,0,64,'Host','Hex')
/*Say radix_adr1*/
/*Say radix_lv1*/
If which = '' Then Do lv1 = 0 to 15
   radix_adr2 = Substr(radix_lv1,8*lv1+1,8)
   If radix_adr2 == '00000000' Then Iterate
   radix_lv2 = Getstore(radix_adr2,0,64,'Host','Hex')
   Do lv2 = 0 to 15
      radix_adr3 = Substr(radix_lv2,8*lv2+1,8)
      If radix_adr3 == '00000000' Then Iterate
      radix_lv3 = Getstore(radix_adr3,0,64,'Host','Hex')
      Do lv3 = 0 to 15
         radix_adr4 = Substr(radix_lv3,8*lv3+1,8)
         If radix_adr4 == '00000000' Then Iterate
         radix_lv4 = Getstore(radix_adr4,0,64,'Host','Hex')
         Do lv4 = 0 to 15
            vdev_addr = Substr(radix_lv4,8*lv4+1,8)
            If vdev_addr == '00000000' Then Iterate
            vdev = d2x(lv1)||d2x(lv2)||d2x(lv3)||d2x(lv4)
/*       Say '>Found Virtual Dev' vdev 'with VDEV block at' vdev_addr */
            Call VDEV_WORK
            End
         End
      End
   End
Else Do
  vdev = Right(which,4,0)
  Parse Value vdev With lv.1 +1 lv.2 +1 lv.3 +1 lv.4 +1
  lv.1 = x2d(lv.1)
  lv.2 = x2d(lv.2)
  lv.3 = x2d(lv.3)
  lv.4 = x2d(lv.4)
  radix_tree = radix_lv1
  Do i = 1 to 4
    next_radix = Substr(radix_tree,8*lv.i+1,8)
    If next_radix == '00000000' Then Leave
    radix_tree = Getstore(next_radix,0,64,'Host','Hex')
    End
  If next_radix == '00000000'
                     Then Say 'HCPQVD040E Device' vdev 'does not exist.'
  Else Do
    vdev_addr = next_radix
    Call VDEV_WORK
    End
  End
If opt = 'MAP' Then Address Command 'ERASE $ALLOC$ MAP A'
Exit /*************/
EOUT:
Say who 'is not there...'
Exit 99
VDEV_WORK:
Parse Value Getstore(vdev_addr,12,2,'Host','Hex') ,
                                                With class +2 devtype +2
vdevtype = class||devtype
rdev_addr = Getstore(vdev_addr,58,4,'Host','Hex')
vdevaflg = Getstore(vdev_addr,1A,1,'Host','Hex')
vdevdflg = Getstore(vdev_addr,1C,1,'Host','Hex')
If opt = 'SHOW' Then say 'Class:'class 'Devtype:'devtype
info = ''
info2 = ''
info3 = ''
info4 = ''
info5 = ''
Select
  When class = '04' Then Do
       tag = 'DASD'
       If c2x(bitand('80'x,x2c(vdevdflg))) = '80' Then link = 'R/O'
       Else link = 'R/W'
       Call REAL_DEV
       startcyl = Getstore(vdev_addr,6C,2,'Host','Dec')
       endcyl = Getstore(vdev_addr,6E,2,'Host','Dec')
       info = dasd.devtype real_name link Right(endcyl-startcyl+1,6) ,
                                                   'CYL  ON DASD ' rdev
       If opt = 'MAP' Then Do
          Call MAP_DASD
          info = info 'Owner' Result
          End
       End
  When class = '40' Then Do
       tag = graf.devtype
       If rdev_addr == '00000000' Then status = 'NOT DIALLED'
       Else Do
         Call REAL_DEV
         If logical_dev Then status = 'ON LDEV L'rdev
         Else status = 'ON' rdev_type ' 'rdev
         End
       info = status
       End
  When class = '08' Then Do
       tag = 'TAPE'
       If c2x(bitand('80'x,x2c(vdevdflg))) = '80' Then link = 'R/O'
       Else link = 'R/W'
       Call REAL_DEV
       info = 'ON DEV ' rdev link
       End
  When class = '02' Then Do
       tag = special.devtype
       If rdev_addr == '00000000' Then
          status = 'COUPLED TO' Getstore(vdev_addr,68,8,'Host','Char')
       Else Do
          Call REAL_DEV
          status = 'ON DEV  ' rdev
          End
       info = status
       End
  When class = '80' Then Do
       tag = term.devtype
       If devtype = '40' Then Call VIRT_DEVICE
       Else
         If rdev_addr == '00000000' Then
            info = 'COUPLED TO' Getstore(vdev_addr,68,8,'Host','Char')
         Else Do
            Call REAL_DEV
            info = 'ON DEV  ' rdev
            End
       End
  When class = '20' Then Do
       base = Left(devtype,1)'0'
       tag = spool.base
       type = spool.devtype
       Call VIRT_DEVICE
       End
  Otherwise tag = 'UNKNOWN Class:'class 'Devtype:'devtype
  End
Say tag vdev info
If info2 ¬= '' Then Say '    ' vdev info2
If info3 ¬= '' Then Say '    ' vdev info3
If info4 ¬= '' Then Say '    ' vdev info4
If info5 ¬= '' Then Say '    ' vdev info5
Return
REAL_DEV:
 rdev = Getstore(rdev_addr,A0,2,'Host','Hex')
 Parse Value Getstore(rdev_addr,0,2,'Host','Hex') ,
                                                With rclass +2 rtype +2
 Select
    When rclass = '80' Then rdev_type = term.rtype
    When rclass = '40' Then rdev_type = graf.rtype
    When rclass = '20' Then rdev_type = spool.rtype
    When rclass = '08' Then rdev_type = tape.rtype
    When rclass = '04' Then rdev_type = dasd.rtype
    When rclass = '02' Then rdev_type = special.rtype
    Otherwise rdev_type = '????'
    End
 real_name = Getstore(rdev_addr,20,6,'Host','Char')
 logical_dev = (Getstore(rdev_addr,14,4,'Host','Hex') ¬== '00000000')
Return
VIRT_DEVICE:
vspbk = Getstore(vdev_addr,6C,4,'Host','Hex')
class = 'CL' Getstore(vspbk,26,1,'Host','Char')
copy = 'COPY' Right(Getstore(vspbk,22,1,'Host','Dec'),3,0)
vspqflg = Getstore(vspbk,0,1,'Host','Hex')
vspoflg = Getstore(vspbk,20,1,'Host','Hex')
If c2x(bitand('80'x,x2c(vspoflg))) = '80' Then cont = '  CONT'
Else cont = 'NOCONT'
If c2x(bitand('40'x,x2c(vspoflg))) = '40' Then hold = '  HOLD'
Else hold = 'NOHOLD'
If c2x(bitand('20'x,x2c(vspoflg))) = '20' Then keep = '  KEEP'
Else keep = 'NOKEEP'
If c2x(bitand('10'x,x2c(vspoflg))) = '10' Then msg = '  MSG'
Else msg = 'NOMSG'
If c2x(bitand('08'x,x2c(vspoflg))) = '08' Then start = 'START'
Else start = 'STOP '
If c2x(bitand('04'x,x2c(vspoflg))) = '04' Then term = '  TERM'
Else term = 'NOTERM'
If c2x(bitand('02'x,x2c(vspoflg))) = '02' Then eof = '  EOF'
Else eof = 'NOEOF'
name = Getstore(vspbk,40,16,'Host','Char')
If name = '' Then name = 'NONAME'
Else name = '  NAME' name
vspspf = Getstore(vspbk,8,4,'Host','Hex')
If vspspf == '00000000' Then status = 'CLOSED   '
Else status = 'OPEN' Right(Getstore(vspspf,20,2,'Host','Dec'),4,0)
If c2x(bitand('80'x,x2c(vdevaflg))) = '80' Then ready = 'NOTREADY'
Else ready = '   READY'
flashc = Right(Getstore(vspbk,24,1,'Host','Dec'),3,0)
dist = 'DIST' Getstore(vspbk,30,8,'Host','Char')' '
char = 'CHAR' Getstore(vspbk,64,4,'Host','Char')' '
fcb = 'FCB' Getstore(vspbk,5C,4,'Host','Char')
flash = 'FLASH' Getstore(vspbk,58,4,'Host','Char')
form = 'FORM' Getstore(vspbk,50,8,'Host','Char')
mdfy = 'MDFY' Right(Getstore(vspbk,25,1,'Host','Dec'),7)
dest = 'DEST' Getstore(vspbk,38,8,'Host','Char')
tofor = 'TO' Getstore(vspbk,28,8,'Host','Char')
If c2x(bitand('80'x,x2c(vspqflg))) = '80' Then tofor = tofor 'RDR'
Else If c2x(bitand('40'x,x2c(vspqflg))) = '40' Then tofor = tofor 'PUN'
Else If c2x(bitand('20'x,x2c(vspqflg))) = '20' Then tofor = tofor 'PRT'
If tag = 'CONS' Then Do
   Parse Value Diag(8,'QUERY' who) With . '-' where '15'x .
   If where = 'DSC' Then where = 'DISCONNECTED'
   Else If Left(where,1) = 'L' Then where = 'ON LDEV' where
   Else where = 'ON GRAF' where
   info = where term start
   info2 = class cont hold copy ready form
   info3 = tofor dist 'FLASHC' flashc dest
   info4 = flash' ' char mdfy fcb
   info5 = '3215  ' eof status keep msg name
   End
If tag = 'RDR' Then Do
   info = class cont hold eof '  ' ready
   info2 = type '       ' status keep
   End
If tag = 'PUN' Then Do
   info = class cont hold copy ready form
   info2 = tofor dist dest
   info3 = flash flashc char mdfy fcb
   info4 = type ' ' eof status keep msg name
   End
If tag = 'PRT' Then Do
   info = class cont hold copy ready form
   info2 = tofor dist 'FLASHC' flashc dest
   info3 = flash' ' char mdfy fcb
   info4 = type ' ' eof status keep msg name
   End
Return
MAP_DASD:
'EXECIO * DISKR $ALLOC$ MAP A (LOCATE /*VOLUME:' ,
                                        real_name'/ ZONE 1 15 STEM MAP.'
If rc ¬= 0 Then Do
  'FINIS $ALLOC$ MAP A'
  Return '?'
  End
search = Left(endcyl-startcyl+1,9)||Left(startcyl,9)||Left(endcyl,9)
'EXECIO * DISKR $ALLOC$ MAP A (FINIS LOCATE /',
                                          search'/ ZONE 12 38 STEM MAP.'
If rc ¬= 0 Then Return '?'
Parse Value map.1 With . +38 ownerid
Return ownerid
GETSTORE: Procedure
Arg addr , disp , len , type , form .
Signal ON SYNTAX
If Abbrev('HOST',type,1) Then type = 'H'
Else type = ''
addr = d2x(x2d(addr)+x2d(disp))
test_nibble = Substr(addr,Length(addr))
num_words = len % 4 + 1
If Find('0 4 8 C',test_nibble) = 0 Then num_words = num_words + 1
string = ''
Do num_words
  Parse value Diag(8,'DISPLAY 'type||addr) With . word .
  string = string||word
  addr = d2x(x2d(addr)+4)
  End
start = Translate(test_nibble,'1357135713571357','0123456789ABCDEF')
result = Substr(string,start,len*2)
If form = 'DEC' Then result = x2d(result)
Else If form = 'CHAR' Then result = x2c(result)
Return result
SYNTAX:
ERROR:
Parse source . . name .
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** GETSTORE was probably called incorrectly'
Say
Say '** Getstore('addr','disp','len','type','form')'
Say
Exit
LOAD_TYPES:
dasd.   = '????'
dasd.40 = '3330'
dasd.20 = '3340'
dasd.10 = '3350'
dasd.11 = '3350'
dasd.12 = '3350'
dasd.08 = '2305'
dasd.04 = '3380'
dasd.82 = '3390'
dasd.80 = '3375'
dasd.02 = '3370'
graf.   = '????'
graf.40 = 'GRAF'
graf.80 = 'GRAF'
graf.20 = '3271'
graf.10 = '3275'
graf.08 = 'PRT '
graf.09 = 'PRT '
graf.04 = 'x250'
graf.06 = '5080'
graf.30 = '3271'
tape.   = '????'
tape.10 = '3420'
tape.20 = '3430'
tape.40 = '3480'
tape.80 = '3422'
special.   = '????'
special.80 = 'CTCA'
special.40 = 'CTLR'
special.02 = 'MSSC'
special.08 = '3890'
special.01 = 'UNSP'
term.   = '????'
term.80 = 'LINE'
term.88 = 'LINE'
term.40 = 'CONS'
term.20 = 'TELE'
term.10 = 'TYP1'
term.1C = 'UNKN'
term.14 = 'COMM'
spool.   = '????'
spool.80 = 'RDR '
spool.81 = '2501'
spool.82 = '2540'
spool.83 = '3505'
spool.40 = 'PUN '
spool.42 = '2540'
spool.44 = '3525'
spool.20 = 'PRT '
spool.21 = '1403'
spool.22 = '3211'
spool.23 = '3262'
spool.24 = '4245'
spool.25 = '3820'
spool.26 = '3203'
spool.27 = 'AFP1'
spool.28 = '3800'
spool.29 = '4248'
Return


QWRITE

This is one of the 'comic relief' tools we use. It could be useful
for something important, but we haven't found anything yet.
This routine will display a user's screen size by row and
column, and also the 'next' write position for their console.
The fun part is that you can also change (even randomly) their
'next' write position. This simply causes screen output to be
written in 'strange' places on their console!

Format:

      QWRITE  user-id  ( ROW=rownum COL=colnum | RANDOM

Specify the user-id you want to display and/or abuse. When
you use ROW=, COL=, or RANDOM, you can set the user's
next console write position to a different area on the screen.
ROW= and COL= can be user together or separately and must
be within the user's screen size. RANDOM can be used to
randomly pick a new location for ROW and COL.

Note: users who are in native CMS work the best; XEDIT and
most fullscreen applications control their own console I/O and
will always show a next write position of ROW=00 COL=00.
Setting the next write location in this case will not do anything.

Example:

      QWRITE SOMEONE (ROW=5 COL=10

   SOMEONE's console VDEV at 0D72CE30, RDEV at 01657178.
   Screen size........... Height = 24, Width = 80.
   Next write location...    Row = 07,   Col = 00.

   New write location....    Row = 05,   Col = 10.

Of course, what I can't show here are the strange looks and
comments the user makes when he gets his next console
message!


QWRITE EXEC

/* QWRITE EXEC   Query a user's screen size and next write position.  */
/* Function:   To display a user's screen size and the next location  */
/*             that CP is set to write to on their console.           */
/*             Optionally change the location of the next write.      */
/* Format:     QWRITE  user-id  ( ROW=rownum COL=colnum | RANDOM      */
/* Where:   >  ROW=, COL=, and RANDOM are optional and are used to    */
/*                alter the next write location.                      */
/*          >  ROW= and COL= can be used separately or together.      */
/*          >  RANDOM can be used to generate random ROW/COL.         */
Arg who sayhow . '(' options
If who = '' | who = '?' Then Do
  Call Sayit
  Call Sayit 'Format: QWRITE  user-id  ( ROW=rownum COL=colnum | RANDOM'
  Call Sayit
  Call Sayit '     ROW=, COL=, and RANDOM are optional and are used to '
  Call Sayit '        alter the next write location.                   '
  Call Sayit '     ROW= and COL= can be used separately or together.   '
  Call Sayit '     RANDOM can be used to generate random ROW/COL.      '
  Exit
  End
Parse Value Diag(8,'LOC' who '9') With key . '15'x loc vdev . '15'x
If key = 'NOTFOUND' Then Do
  Call Sayit who"'s console not found."
  Exit 28
  End
rdev = Getstore(vdev,58,4,'Host','Hex')
width = Getstore(rdev,28,2,'Host','Dec')
height = Getstore(rdev,2A,2,'Host','Dec')
/*say Getstore(rdev,3C,2,'Host','Hex')*/
nextrow = Right(Getstore(rdev,3C,1,'Host','Dec'),2,0)
nextcol = Right(Getstore(rdev,3D,1,'Host','Dec'),2,0)
Call Sayit who"'s console VDEV at" vdev', RDEV at' rdev'.'
If rdev == '00000000' Then Do
  Call Sayit who 'is currently disconnected.'
  Exit
  End
Call Sayit 'Screen size........... Height =' height', Width =' width'.'
Call Sayit 'Next write location...   Row =' nextrow',  Col =' nextcol'.'
If options = '' Then Exit
  Do i = 1 to Words(options)
    Parse Value Word(options,i) With opt '=' optval
    Select
      When opt = 'ROW' Then nextrow = Right(optval,2,0)
      When opt = 'COL' Then nextcol = Right(optval,2,0)
      When opt = 'RANDOM' Then Do
        nextrow = Right(Random(1,height-1),2,0)
        nextcol = Right(Random(1,width-1),2,0)
        End
      Otherwise Do
        Call Sayit 'Invalid option' opt
        Exit 99
        End
      End
    End
If nextrow > height | nextcol > width Then Do
  Call Sayit 'Invalid new write location.  Exceeds screen size.'
  Call Sayit 'Nextrow =' nextrow', Nextcol =' nextcol'.'
  Exit 99
  End
newvalue = Right(d2x(nextrow),2,0)||Right(d2x(nextcol),2,0)
rdevwrite = d2x(x2d(rdev)+x2d(3C))
/*say rdevwrite newvalue*/
xdiag = Diag(8,'STORE HS'rdevwrite newvalue)
Call Sayit
Call Sayit 'New write location....   Row =' nextrow',  Col =' nextcol'.'
Exit
Sayit:
Parse Arg line
If sayhow = '' Then Say line
Return
GETSTORE:
Arg addr , disp , len , type , form .
Signal ON SYNTAX
If Abbrev('HOST',type,1) Then type = 'H'
Else type = ''
addr = d2x(x2d(addr)+x2d(disp))
test_nibble = Substr(addr,Length(addr))
num_words = len % 4 + 1
If Find('0 4 8 C',test_nibble) = 0 Then num_words = num_words + 1
string = ''
Do num_words
  Parse value Diag(8,'DISPLAY 'type||addr) With . word .
  string = string||word
  addr = d2x(x2d(addr)+4)
  End
start = Translate(test_nibble,'1357135713571357','0123456789ABCDEF')
result = Substr(string,start,len*2)
If form = 'DEC' Then result = x2d(result)
Else If form = 'CHAR' Then result = x2c(result)
Return result
SYNTAX:
ERROR:
Parse source . . name .
Say
Say '** An ERROR was detected on line' Sigl 'of' name
Say '**  line' Sigl ' ==>' Sourceline(Sigl)
Say '** GETSTORE was probably called incorrectly'
Say
Say '** Getstore('addr','disp','len','type','form')'
Say
Exit

James S Vincent
VM Systems Software Specialist
Nationwide Insurance Company (USA)      c Nationwide Insurance Company 1992
