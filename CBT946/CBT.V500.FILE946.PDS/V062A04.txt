NSSMAP for VM/XA

Having just recently converted to VM/XA SP 2.1 from our old
VM/SP HPO 5 system, I was missing the DCSSMAP routine
by Teodor Jurak that I'd been using from issue 48 of VM
Update.  Therefore, with a total over-haul to function in a
VM/XA environment, here it is.  It will simply create a listing
file with the same type of mapping that the old DCSSMAP
used to create.

However, because of the lack of 256K segments like the old
VM/SP HPO system had, and the addition of control
information (like Shared/Read, Exclusive/Write, Restricted),
this added a little bit more information that, in my opinion,
needed to be there in the listing.  This routine will put in the
megabyte numbers (for those of us who hate to talk in hex) in
decimal at the left side of the page.  After all, who can
remember that page 1B00 is 27MB?

This routine only maps up to 32MB, but can easily be modified
to do more if you need it to.  Simply change the set up of the
array at the front to set it up for DO 0 TO xxxxxx for the
number of pages that you want to use.  This may be valid in
your case if you've got a DCSS that resides above the 32MB
line.

This routine only maps up to the highest page in your highest
DCSS/NSS space.  After all, who wants to take up all the
paper showing empty memory locations?  Because of the size
of the memory, I've put in the feature to eliminate duplicate
lines in the listing and put the 'SAME AS ABOVE' message to
let you know it.  Also, it only puts in the ACTIVE segments -
it leaves out the pending purge and skeleton files.  If you want
the skeleton or pending purge files, please be aware that you'll
probably overflow the print line in the output file - but the
routine will warn you about it.

You invoke the routine by typing:

      NSSMAP


NSSMAP EXEC

/* ------------------  Comments --------------------------------
   OPSYS  :  VM/XA  (and probably ESA)
   Doc    :  Show a virtual memory map of the NSS's in the system.
             Requires CP class 'E' authority.
       ------------------ End of Comment --------------------------- */
'SET CMSTYPE HT';
'ERASE NSS MAP A';
'SET CMSTYPE RT';
DO pag = 0 TO 8192                /* Map only up to 32M (8192 pages) */
   PAGE.pag = d2x(pag,5);
   dcsspag.pag = '';
END
'EXECIO * CP (STRING Q NSS ALL MAP';
'EXECIO' queued() 'DISKW NSS MAP A (FINIS';
'EXECIO * DISKR NSS MAP A  (FINI'
Pull .;                                    /*  First line is garbage */
dcss_name_save = '';       /* in case blank dcss name (like SR/EW)   */
dcss_cl_save   = '';                      /*  "   " "                */
dcss_hi = 0;               /* highest page encountered so far        */
DO queued();               /* Look at the definitions from the Q NSS */
  Pull line;
  dcss_name = strip(substr(line,6,8));     /* Make the donuts        */
  dcss_ftype = substr(line,15,6);
  dcss_beg  = x2d(strip(substr(line,33,5),L,'0'));
  dcss_end  = x2d(strip(substr(line,40,5),L,'0'));
  dcss_type = substr(line,48,2);
  dcss_class = substr(line,52,1);
  if dcss_ftype = 'DCSS-S' then iterate;   /* Skeleton?              */
  if dcss_class ¬= 'A' then iterate;       /* Only do ACTIVE ones    */
  if dcss_name ¬= ' ' then do;             /* if multiple ranges     */
     dcss_name_save = dcss_name;
     dcss_cl_save   = dcss_class;
  end;
  else do;
    dcss_name = dcss_name_save;            /* If multiple ranges     */
    dcss_class = dcss_cl_save;
  end;
  do j = dcss_beg to dcss_end by 1;        /* Show it in each cell   */
    dcsspag.j = dcsspag.j dcss_name '('dcss_type'/'dcss_class')';
  end;
  if dcss_end > dcss_hi then dcss_hi = dcss_end;
end
HEAD.0 = RIGHT(date(),130);
HEAD.0 = OVERLAY('1',HEAD.0)
HEAD.1 = '0  VM/XA/ESA                   NSS/DCSS Memory Map        ';
HEAD.2 = '- MEG  PAGE  SYSNAME';
HEAD.3 = ' ' || COPIES('*',69)
HEAD.4 = ' '
QUEUE 'TRUNC 133';
QUEUE 'SET MSGM OFF'
QUEUE 'DEL *'
QUEUE 'TOP'
prevrec = '';                    /* To suppress identical lines      */
lines = 0;                       /* just a line counter for ejects   */
Call heading;                    /* put the 1st set of headers out   */
Do p = 0 TO dcss_hi;
   if dcsspag.p = '' then dcsspag.p = '*** Unused ***';
   if dcsspag.p = prevrec then do;       /* Suppress identical lines */
      firstpag = p;
      do forever;                /*   Go until we find something     */
        p = p + 1;
        if dcsspag.p = '' then dcsspag.p = '*** Unused ***';
        if dcsspag.p = prevrec then do;
          prevrec = dcsspag.p;
          iterate;
        end;
        else do;                 /* We found the next one now        */
          prev = p - 1;          /* back up 1                        */
          xl = '     ' page.firstpag||'-'page.prev,
                right('*** SAME AS ABOVE ***',90);
          lines = lines + 1;
          IF lines > 55  then call heading;
          queue 'INPUT' xl;
          leave;
        end;
      end;
   end;
   prevrec = dcsspag.p;                 /* for suppressing dup lines */
   if x2d(page.p) // 256 = 0 then,      /* put the xxM on it         */
     meg = right(x2d(substr(page.p,1,3)),4)||'M';
   else meg = '     ';                  /* not even meg boundary     */
   XL = meg page.p dcsspag.p;           /* build line                */
   if length(dcsspag.p) > 115 then say 'NSSMAP: Overflow with line:',
      dcsspag.p;
   lines = lines + 1;
   if lines > 55  then call heading;
   QUEUE 'INPUT' XL
END
QUEUE 'FILE'
'ERASE NSSMAP LISTING A';
'ERASE NSS MAP A';
'XEDIT NSSMAP LISTING A (WIDTH 133';
SAY 'NSSMAP LISTING A was created.';
'EXECIO * CP (STRING Q NSS CLASS P COUNT'
Parse Pull . num .;
say ''; say 'NSSMAP:  There are' num 'NSS''s with pending PURGE';
'EXECIO * CP (STRING Q NSS CLASS S COUNT'
Parse Pull . num .;
say ''; say 'NSSMAP:  There are' num 'skeletons not yet saved';
'EXECIO * CP (STRING Q NSS CLASS R COUNT'
Parse Pull . num .;
say ''; say 'NSSMAP:  There are' num 'restricted NSS/DCSS''s.';
'EXECIO * CP (STRING Q NSS CLASS A COUNT'
Parse Pull . num .;
say ''; say 'NSSMAP:  There are' num 'active NSS/DCSS''s.';
EXIT
HEADING:
      Do I = 0 TO 4;
         Queue 'INPUT' HEAD.I;
      end;
      lines = 5;
return;

Pat Tierce
Systems Software Specialist
State of Kansas

