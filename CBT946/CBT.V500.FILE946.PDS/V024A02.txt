 Submitting jobs to VSE
ÝEditor's note: many sites running a guest operating system develop programs and
set up jobstreams using the facilities available with CMS,  and then submit work
to the guest system.  One approach to automating this procedure was described in
issue 21 (page 21): this REXX EXEC offers an alternative.¨
The following EXEC will punch any jobdecks to VSE and could also be used for
MVS.  It provides the same function as EXECIOIN EXEC does (VM Update, number 11,
page 43), but in addition allows any of the files to be packed.  This EXEC will
include a file if a card starts with +INC or /INCLUDE.
The EXEC will also detect when it is being invoked from XEDIT and will submit
the file as it currently stands without the user having to save it first.  It
also prevents a user attempting to include a file already included and hence
putting the EXEC into an infinite loop.
Sufficient documentation is contained in the EXEC.
/*
*    this REXX EXEC performs the following function ...             *
*         ... Submit jobs to any VSE machine ...                    *
*       Allows users to place '+INC' cards in their decks, and have *
*         them expanded automatically.  If any files is found to be *
*         packed, then it is unpacked (into a work file) before     *
*         being submitted.                                          *
*       EXEC detects when it is running in XEDIT, and will save     *
*        the file being edited to a temporary file and submit that. *
*      Format of the call is '(EXEC) SUB fn ft fm ( <VSE uid>'      *
*/
trace off
arg fn ft fm '(' opts
if fn = '?' then
    do
       address command 'HELP SHELL SUB'
       exit rc
    end

/*      detect the environment from whence called .. if XEDIT and   *
*  file to sub it "*" (or defaulted to that), then save the current *
*  XEDIT file to $$SUB$$ $$TEMP$ A3, and submit that.  If filename  *
*  specified, do no saving ....                                     *
*/
alt.1 = ''; alt.2 = ''
inxedit = 'N'
if fn = '' | fn = '*' then   /*check for XEDIT environment if user */
    do                       /*wants current file submitted ...    */
       address xedit 'EXTRACT @ALT @LRECL @RECFM'
       if rc = 0 then
           do
            inxedit = 'Y'
            if lrecl.1. = 80 & (recfm.1. = 'F' | recfm.1 = 'FP') then
            do
                     address xedit 'SSAVE $$SUB$$ $$TEMP$$ A3'
                     address xedit 'SET ALT' alt.1 alt.2
                     fn = '$$SUB$$'; ft = '$$TEMP$$'; fm = 'A'
                  end
            else
                  do
                     address xedit 'MSG format of' temp
                        'the file must be Fixed 80 byte',
                                              '  (it can be packed).'
                     exit 24
                  end
           end
    end
if fn = '' then
    do
       say 'SUB: no file specified ...'
       exit 28
    end
 if ft = '' then ft = 'JCL'
if fm = '' then fm = 'A'
/*      Edit all the parameters coming in ....                     */
err = 0
if inxedit = 'Y' then address command 'STATE' fn ft fm
                 else 'STATE' fn ft fm
if rc ¬= 0 then err = 1
if fn = '*' | ft = '*' then
    do
       say 'SUB: invalid file' fn ft fm '...'
       err = err + 1
    end
dest = ''
saymsgs = 'Y'
do forever while opts ¬= ''
    parse upper var opts opt opts
    select
       when abbrev('PRODUCTION',opt,1) then dest = 'SHELLVSE'
       when abbrev('SHELLVSE',opt,1)   then dest = 'SHELLVSE'
       when abbrev('TESTING',opt,1)    then dest = 'TESTVSE'
       when abbrev('TESTVSE',opt,1)    then dest = 'TESTVSE'
       when abbrev('VSE2',opt,1)       then dest = 'VSE2'
       when abbrev('NOMESSAGES',opt,2) then saymsgs = 'N'
       when abbrev('NOMSGS',opt,2)     then saymsgs = 'N'
       when abbrev('MESSAGES',opt,2)   then saymsgs = 'Y'
       when abbrev('MSGS',opt,2)       then saymsgs = 'Y'
       when abbrev('DEBUG',opt,3)      then dest = '*'
       when opt = '*'                  then dest = '*'
       otherwise
            say 'SUB: invalid option' opt
            err = err + 1
    end
end

if err > 0 then exit 24
/*      Set up the appropriate default VSE machine, if reqd.   */
if dest = '' then
    do
        if substr(userid(),1,4) = 'ICSO' then
           do
              say 'SUB: Dear Graham, you have not specified which'
              say '                  machine to submit the job to.'
              exit 99
           end
       select
          when ft = 'TESTVSE' then dest = ft
          when ft = 'TESTING' then dest = ft
          when ft = 'VSE2' then dest = ft
          otherwise dest = 'SHELLVSE'
       end
    end
address command
/*      Now store the current punch setting, and then set the      *
*          PUNCH to point to the required virtual machine id ...   */
'EXEC STORE00D'
'CP SPOOL PUN CLOSE'
if dest = '*' then say 'SUB: *** WARNING *** running in testing mode ..'
'CP SP PUN TO' dest 'CLASS A NOCONT NOHOLD'
/*   Check if file is ok to punch.  If it is packed, unpack it    *
*         to a temporary file, then check it.                     *
*         File must be Fixed and Lrecl = 80.                      */
mfn = fn; mft = ft; mfm = fm;   /* store names used in case packed */
openfiles = '+INC' fn ft fm 'CNI+'
                               /* so can check for recursive calls */
MAKEBUF'
queue fn ft fm 'U 999'  /*to read this, something weird's gone on! */
 'LISTFILE' fn ft fm '( LIFO NOHEADER FORMAT'
pull fn ft fm forv lrecl .
'DROPBUF'
if forv = 'F' & lrecl = 1024 then               /* unpack the file */
    do
       'COPY' fn ft fm $SUB$ CMSUT1 A3 '( OLDDATE UNPACK REPLACE'
       if rc ¬= 0 then return 24
       'MAKEBUF'
       'LISTFILE' $SUB$ CMSUT1 A '( LIFO NOHEADER FORMAT'
       pull fn ft fm forv lrecl .
       'DROPBUF'
    end
if forv ¬= 'F' | lrecl ¬= 80 then
    do
       say 'SUB: format of file' fn ft fm temp         ,
              'must be Fixed 80 byte (it can be packed).'
       if fm = 'A3' then 'ERASE' fn ft fm   /* erase the temp file */
       rc = 24
       signal Lfini
    end

/*   Now put the entire file into the program stack ...           *
*       and process the lines. Any starting +INC get expanded ..  */
'MAKEBUF'
'EXECIO * DISKR' fn ft fm '(FIFO FINIS'
nolines = queued()
do nolines
    parse pull line
    wk = substr(line,1,72)
    parse upper var wk inccmd incfn incft incfm .
    if inccmd = '+INC' | inccmd = '/INCLUDE' then
        do
           if incft = '' then incft = mft
           call Includeit incfn incft incfm
           rc = result
           if rc ¬= 0 then leave
        end
    else
        'EXECIO 1 PUNCH ( STRING' line
end
/*  Now store the return-code to be given to user, and close the    *
*        punch file, purging if any error found (ie rc non-zero).   *
*        Also, reset their punch setting to what iT was.           */
Lfini:
wkrc = rc
'DROPBUF'
if wkrc = 0 then 'CP SPOOL PUN CLOSE'
            else 'CP SPOOL PUN PURGE'
'EXEC RESET00D'
exit wkrc

/* Procedure Includeit inserts the specified file into the         *
*        punched file ...    It can be called recursively...       */
Includeit:  procedure expose openfile saymsgs; arg fn ft fm
mfn = fn; mft = ft; mfm = fm        /* so right msg is printed ... */
if fm = '' then fm = '*'
if pos('+INC' fn ft fm 'CNI+',openfiles) > 0 then
    do
       say 'SUB: recursive call detected to file' fn ft fm '..'
       return 24
    end
openfiles = openfiles '+INC' mfn mft mfm 'CNI+'
                                             /* & so chk for loops */

address cms 'STATE' fn ft fm             /* does the file exist ?? */
if rc ¬= 0 then return rc
 if fn = '*' | ft = '*' then         /* must be one file, not many! */
    do
       say 'SUB: invalid file' fn ft fm '...'
       return 24
    end

/*  Check if file is ok to punch. If it is packed, unpack it        *
*        to a temporary file, then check it.                        *
*         File must be Fixed and Lrecl = 80.                       */
'MAKEBUF'
queue fn ft fm 'U 999' /* to read this, something weird's gone on! */
'LISTFILE' fn ft fm '( LIFO NOHEADER FORMAT'
pull fn ft fm forv lrecl .
'DROPBUF'
if forv = 'F' & lrecl = 1024 then               /* unpack the file */
    do
       'COPY' fn ft fm $SUB$ CMSUT1 A3 '( OLDDATE UNPACK REPLACE'
       if rc ¬=0 then return 24
       'LISTFILE' $SUB$ CMSUT1 A '( LIFO NOHEADER FORMAT'
       pull fn ft fm forv lrecl .
    end
if forv ¬= 'F' | lrecl ¬= 80 then
    do
       say 'SUB: format of file' fn ft fm temp        ,
              'must be Fixed 80 byte (it can be packed).'
       if fm = 'A3' then 'ERASE' fn ft fm   /* erase the temp file */
       return 24
    end

if saymsgs = 'Y' then say 'SUB: including' mfn mft mfm '..'
'MAKEBUF'
nolines = queued()
/*    now get the included file ..... */
'EXECIO * DISKR' fn ft fm '(FIFO FINIS'
nolines = queued() - nolines
do nolines
    parse pull line
    wk = substr(line,1,72)
    parse upper var wk inccmd incfn incft incfm .
    if inccmd = '+INC' | inccmd = '@INCLUDE' then
        do
           if incft = '' then incft = mft
           call Includeit incfn incft incfm
           rc = result
           if rc ¬= 0 then leave
        end
    else
        'EXECIO 1 PUNCH ( STRING' line
end
wkrc = rc
'DROPBUF'

wk = lastpos('+INC' mfn mft mfm 'CNI+',openfiles)
if wk > 0 then
    openfiles = substr(openfiles,1,wk-1)
else
    do
      say 'SUB: whoops!! logic error in openfiles on file' mfn mft mfm
      say '     openfiles =' openfiles'.'
return wkrc

L Lorden
Head of Technical Support
Shell (New Zealand)      ) Shell (NZ) Holdings Ltd 1988


