 Provision of MVS procedure facilities for CMS

This EXEC provides facilities similar to those of MVS procedures comprising
decision processing, variable substitution and nested file inclusion.  The EXEC
is written in REXX and also allows inclusion of REXX statements in the file to
be processed.  Parameters required are the filename type and mode of the input
CMS file followed by the parameters containing the assignments of values to the
variable symbols specified in the CMS file.  The parameters are not in standard
CMS tokenised format (ie 8-byte values separated by blanks) but appear as one
long string as variablename=symbol,variablename=symbol,etc.  The format of the
CMS file is such that the first records provide default values for the symbols
specified, followed by any REXX statements, followed by the data on which the
variable substitution is to be performed.  An output file is created with a file
name the same as the input file, file type 'VARIABLE' file mode of the disk with
the most available space.

Format of the default parameters at the beginning of the CMS file is:

     // variablename="value", or // variablename=value,

where variablename may be a name starting with an alphabetic character, any
length, with alpha-numeric characters comprising the remainder of the name.
Value should be enclosed in quotes (but this is not mandatory);  they can be
double or single, but must be the same at each end of the value, except if the
value is going to be used as an arithmetic value for a later REXX statement.
The last // variablename=value statement must not be followed by a comma.  Value
will be substituted in all following records in the file (REXX statements //
parameters and output records) where the characters &variablename are found, eg
if file has * ## JOB JNM=&JOBNAME,CLASS=&JOBCLASS and at the beginning the
statements // JOBNAME='TESTJOB', // JOBCLASS=A, exist, the output will be * ##
JOB JNM=TESTJOB,CLASS=A.

Following the // variablename=value statements in the file two other files are
read before the data to output is read from the remaining part of the input
file.  The files both have a filetype of 'VARIABLE'.  The first is named
'GLOBAL' and is read from one disk;  the second is read from the 'A' disk with a
name equal to the name of the VM user.  Both files are used to assign values to
variables which rarely vary from one execution to another, eg programmer number
in POWER accounting data.  The files contain REXX data as described below.  The
data to be output may be included immediately following the default //
assignments in the input file, but, if required, REXX statements may be included
- these must be specified by the appearance of " (double apostrophe) in column 1
of the record - the remainder may be in the normal REXX free-format.  &variable
names may appear as substitution takes place before the statement is passed to
REXX for processing.

After the REXX statements the output statements should be specified:  two
special statements may be included within the file in order to allow nested data
from another CMS file to be inserted.  Wherever the statements appear in the
input file in the same corresponding position in the output file the retrieved
external file will be inserted, replacing the statement.  The format of the
statements is:

     /INCLUDE filename filetype filemode
     #filename filetype filemode variablename=value, variablename=value,etc.

where the names may be variables subject to substitution but the retrieved file
will just be copied without variable substitution or other processing.  The file
must exist on an accessed disk and all the names must be specified, as for the
CMS COPY command (ie filemode of * is valid).

The statement starting with a hash sign (#) is used to nest invocations of
VARIABLE EXEC passing parameters in the same way.  Its output is inserted in the
output file in the same way as the /INCLUDE, but variable substitution takes
place:  the scope of variables is only local, ie not passed between EXECs.

 Order of processing:

1    // statements down to last (ie without trailing comma)
2    REXX statements from the file GLOBAL VARIABLE J
3    REXX statements from the file user-name VARIABLE A
4    Parameters passed on invocation of VARIABLE
5    REXX statements, if any
6    Remaining cards in file, including any nested files.


Before any record is processed variable substitution is attempted and if the
variable name has not been assigned a value then an error message ensues.
Messages detailing the values assigned to the variablenames actually substituted
are produced during execution.

Example of a file input to VARIABLE EXEC  (comments have been added in italic
and must not be included):

//VSEJCL  PROC    ACCT='430'
//                JOBCLASS='T',     These statements set up defaults
//                JOBDISP='D',      for &variablenames before the
//                LSTCLASS='Z',     parameters passed to the EXEC are
//                LSTDISP='D',      processed.  Quotes surrounding the
//                LSTRBS=0,         values are not required but are
//                LSTRBM=0,         recommended as the assignments are
//                PUNCLASS='Z',     passed to REXX for interpreting.
//                PUNDISP='D',
//                FT='VSEJCL',
//                FM='*'
" if 1stclass = 'Z' then lstsep = 0 ; else lstsep = 1 Decision processing
" if punclass = 'Z' then punsep = 0 ; else punsep = 1 Decision processing
" dosacct = '&PRKEY&ACCT&PROJ.B&PROG.000'           Assignment of a value
" timestmp = space(date(),0) time()
" user = userid()
* ## JOB JNM=&FN,USER=&DOSACCT,CLASS=&JOBCLASS,DISP=&JOBDISP
* ## LST CLASS=&LSTCLASS,JSEP=&LSTSEP,RBS=&LSTRBS,RBM=&LSTRBM,DISP=&LSTDISP
* ## PUN CLASS=&PUNCLASS,JSEP=&PUNSEP,RBS=0,RBM=0,DISP=&PUNDISP
// JOB &FN &USER &TIMESTMP
/INCLUDE &FN &FT &FM                                Include a nested file
/*
/&
* ## EOJ

File  TESTFILE VSEJCL A contains:

// EXEC SPLISTA
   VOL=SLUK01
/*

File  USERNAME VARIABLE A contains:

" PROG = 078
" PROJ = 1234
" PRKEY = 'HZ'
" ACCT = 430

Command issued:

EXEC VARIABLE TESTFILE VSEJCL A FN=TESTFILE,PUNCLASS=J

File  TESTFILE VARIABLE A created:

* ## JOB JNM=TESTFILE,USER=HZ4301234B078000,CLASS=T,DISP=D
* ## LST CLASS=Z,JSEP=0,LST=SYSLST,RBS=0,RBM=0,DISP=D
* ## PUN CLASS=J,JSEP=1,PUN=SYSPCH,RBS=0,RBM=0,DISP=D
// JOB TESTFILE USERNAME 1Apr1985 11:12:30
 // EXEC SPLISTA
   VOL=SLUKO1
/*
/*
/&
* ## EOJ


VARIABLE EXEC

/*        EXEC to process file and variable substitution               */
/*        all variable names start with 'at' to avoid clashes          */
trace off
signal on syntax
if cmsflag('CMSTYPE') then RT = 1
                      else RT = 0
if cmsflag('EXECTRAC') & trace() = 'O' then 'SET CMSTYPE HT'
parse source . . @xecname @xectype .
highl = '1D38'X ; lowl = '1D30'X
@prefix = @xecname @xectype':'highl
parse upper arg @fn @ft @fm @parms
'MAKEBUF'
bufno = rc
'ESTATE' @fn @ft @fm
if rc = 0 then do
                @rrorc = rc
                @rrmsg = 'File' @fn @ft @fm 'not found'
                signal reject
                end
'QUERY DISK MAX ( LIFO'
if rc = 0 then do
                @rrorc = rc
                @rrmsg = 'No read/write disk accessed'
                signal reject
                end
pull . . @outfm .
'DROPBUF' bufno
@outfn = @fn
@outft = @xecname
@outfile = @outfn @outft @outfm
'ESTATEW' @outfile
if rc = 0 then do
                @rrorc = 28
                @rrmsg = 'File @outfile 'already present'
                signal rejectx
                end
parmsused = 0                    /* switch for passed arguments        */
'MAKEBUF'
bufno = rc
prevq = queued()
'EXECIO * DISKR' @fn @ft @fm '(FINIS STRIP'
if rc = 0 then do
                @rrorc = rc
                @rrmsg = 'File' @fn @ft @fm 'cannot be read'
                signal reject
                end
@rrorc = 0
@cardno = 0
@v = 1
@var. = ''
@val. = ''
readfile:
do until queued() = prevq
  parse pull @card
  @cardno = @cardno + 1
  /* Find & on i/p card and replace known variables */
 @line = ''
do colstart = 1 to length(@card)
   apos = pos('&',@card,colstart)       /* find & */
   if apos = 0                         /* not found */
      then do
           @line = @line || substr(@card,colstart,length(@card)-colstart+1)
           leave /* do colstart =    */
           end
   varstart = apos + 1
   do @column=varstart to length(@card) until substr(@card,@column,1) < 'A'
   end
   @variable = substr(@card,varstart,@column-varstart)
   @value = ''
   do @c = 1 to @v-1 until @var.@c = @variable /* Find variable name*/
   end
   @var.@c = @variable
   if symbol(@variable) = 'VAR'
      then do
           @value = value(@variable)
           @val.@c = @value
           if @c = @v then @v = @v + 1
           if substr(@card,@column,1) - '.' then @column = @column + 1
           end
      else do
           if substr(@card,varstart,1) >= 'A'
              then do
                   if @c = @v then @v = @v + 1
                   @rrmsg = 'Values omitted , no output file created'
                   @rrorc = 19
                   end
           @value = '&'
           @column = varstart
           end
   @line = @line || substr(@card,colstart,apos-colstart) || @value
   colstart = @column - 1 /* compensate for 'do' adding 1 */
end /* do colstart = */
/* process cards to distinguish assigns and output to punch         */
Select
  when substr(@line,1,1) = '/'
    then do
         if  parmsused
           then do          /* process default assignments          */
                parse var @line @word1 @word2
                if word(@word2,1) = 'PROC' then @word2=subword(@word2,2)
                if substr(@word2,length(@word2),1 )= ','
                  then @instruction = substr(@word2,1,length(@word2)-1)
                  else do
                       @instruction = @word2
                       call useparms
                       end
                interpret @instruction  /* assign value to variable */
                iterate
                end
           if substr(@line,2,8) = 'INCLUDE' & @rrorc = 0
             then do
                  'FINIS' @outfile
                     @nestfile = subword(@line,2,3)
                    'ESTATE' @nestfile
                     if rc = 0
                       then do
                            @rrorc = rc
                            @rrmsg = 'File' @nestfile 'not found'
                            signal reject
                            end
                    'EXEC INCLUDE' @nestfile @outfile
                     if rc = 0
                        then do
                            @rrorc = rc
                            @rrmsg = 'Error copying' @nestfile 'to' @outfile
                            signal reject
                            end
                     iterate
                     end
             'EXECIO 1 DISKW' @outfile '(STRING' @line
              end /* substr(@line,1,1) = '/'                     */
       when substr(@line,1,1) = '"' then interpret substr(@line,2)
       when substr(@line,1,1) = '#' & @rrorc = 0
         then do
             'EXEC' @xecname substr(@line,2)
              if rc = 0 then do
                 @rrmsg = 'EXEC' @xecname substr(@line,2) 'returned an error'
                 @rrorc = rc
                 end
             'FINIS' @outfile
              @nestfile = word(@line,2) @outft @outfm
              /* Append output file from nested EXEC to this one         */
             'COPYFILE' @nestfile @outfile '( APPEND TRUNC'
              if rc = 0 then 'ERASE' @nestfile
              end
       otherwise do
             'EXECIO 1 DISKW' @outfile '(STRING' @line
              if parmsused then call useparms
              end
  End /* Select */
end /* do records                                                       */
'SET CMSTYPE RT'
 if @rrorc = 0 then 'VMFCLEAR'
 if @v > 1
    then do
         say @prefix || lowl || 'Values specified'
         say ' Input file:' @fn @ft @fm              Output file:' @outfile
         say ''
         end
 line = ''
 do @c = 1 to @v-1
    if @val.@c = ''
       then data = highl || @var.@c
       else data = lowl || @var.@c' = '@val.@c
    if length(line)+length(data) > 78
       then do
            say line
            line = ''
            end
    line = line || data
    l = (length(line)+39)%39*39
    line = left(line,1)
 end
 say line
 say ''
 if @rrorc = 0 then signal reject
'FINIS' @outfile
 if RT then 'SET CMSTYPE HT'
 exit
 /* Stack parameters passed to the EXEC and get global/local variables */
 useparms:
 if parmsused then return
 parmsused = 1
 do until @instr = ''
    parse var @parms @instr ',' @parms
    if @instr = '' then push '"' @instr
 end
'EXECIO * DISKR' userid() @xecname '* (FINISH STRIP LIFO'
 'EXECIO * DISKR  GLOBAL'  @xecname '* (FINISH STRIP LIFO'
 return
 /*                   Rexx error processing                            */
 syntax:
 @rrorc = rc
'SET CMSTYPE RT'
 say @prefix'REXX error' @rrorc errortext(@rrorc)
 interpret '@errline =' sourceline(sigl)
 say '             : Line' sigl @errline
 say '             : Card' @cardno 'in file' @fn @ft @fm lowl
'DROPBUF' bufno
 if RT then 'SET CMSTYPE HT'
 exit @rrorc
 /*                   Error processing                                 */
 reject:
'ERASE' @outfile
 rejectx:
'SET CMSTYPE RT'
 say @prefix || @rrmsg || lowl
 say ''
'DROPBUF' bufno
 if RT then 'SET CMSTYPE HT'
 exit @rrorc

INCLUDE EXEC

 /*                                                                    */
 arg fn ft fm ofn oft ofm '(' trace . ')' level .
 if trace = ' ' then trace = '0'
 RT = trace(trace)
 if cmsflag('CMSTYPE') then RT = 1
                       else RT = 0
 HT = 0
 if cmsflag('EXECTRAC') & trace = 'O' then HT = 1
 if HT then 'SET CMSTYPE HT'
 if fm = '' then fm = '*'
 if level = '' then level = 0
'MAKEBUF'
 bufno = rc
'QUERY DISK MAX ( LIFO'
 pull . . max .
 if ofn = '' then ofn = 'INC'time('S')
 if ofm = '' then ofm = max
'QUERY DISK' substr(ofm,1,1) '(LIFO'
 pull . . . . . . . . . . blksavail .
'DROPBUF' bufno
'MAKEBUF'
 bufno = rc
 if oft = '' then if ofn = '00D'
    then do
         'EXECIO * CP (STRING QUERY V 00D'
          pull . . . .cl .
          ofn = '00D_'cl
          pull . tofor oft .
          if tofor = 'TO' then ofn = ofn'_'
          ofn = ofn || tofor
          end
     else oft = ft
'LISTFILE' fn ft fm '( DATE STACK'
 if rc = 0 then call exit 'Unable to read' fn ft fm
 i = 0
 prev. = 1
 file. = ''
 recno.0 = 0
 pull listline
 parse var listline . . . . . recs.0 blks mm'/'dd'/'yy time
  if blks > blksavail then do
                         rc =blks
                         call exit 'Insufficient blocks to build' ofn oft ofm
                         end
 recs.0 = recs.0 + 1
 file.0 = substr(listline,1,20)
 date.0 = dd||substr('JanFebMarAprMayJunJul',
     'AugSepOctNovDec',mm*3-2,3)||yy substr(time,1,5)
 do until rc = 0
   'EXECIO * DISKR' file.0 '( STRIP FIND =/INCLUDE ='
    if rc = 0
       then do
            pull recs recno .
            pull '/INCLUDE ' file
            q = queued()
           'LISTFILE' file '( ALLOC STACK'
            if rc = 0
            then call exit 'Record' recno.i 'in file' fn ft fm '.Included',
'file' file.i 'not found'
         do queued()-q
            j = i
            i = i + 1
            pull fn.i ft.i fm.i . . . . no .
            blks = blks + no
            if blks > blksavail
               then do
                    rc = blks
                 call exit 'Insufficient blocks to build' ofn oft ofm
                    end
            file.i = fn.i ft.i. fm.i
            recs.i = recs
            recno.i = recno
            prev.i = recno.j + 1
         end
         end
 end
 if rc = 3 then do
                recs.0 = recs.0 - recno.i
                j = i
                i = i + 1
                recs.i = recs.0
                prev.i  recno.j + 1
                end
'FINIS' fn ft fm
 msg = left('Include:',(level+1)*9) file.0 ' ' date.0
 if level = 0 them msg = msg 'onto' ofn oft ofm
'SET CMSTYPE RT'
 say substr(msg,1,79)
 if HT then 'SET CMSTYPE HT'
 Do n = 1 to i
   for = recs.n - 1
   if for > 0
      then 'COPYFILE' fn ft fm ofn oft ofm '( APPEND FROM' prev.n 'FOR' for
   if rc = 0 then call exit 'unable to copy' fn ft fm 'to' ofn oft ofm
   if file.n = ''
      then do
          'EXEC INCLUDE' file.n ofn oft ofm '(' trace ')' level+1
           if rc = 0 then call exit
           end
End
exit:
parse arg msg
rcode = rc
if substr(ofn,1,4) = '00D_'
   then if level = 0
      then if rcode = 0
         then do
         'FILEDEF INMOVE  DISK' ofn oft ofm
         'FIELDEF OUTMOVE PUNCH'
         'MOVEFILE'
         rcode = rc
         if rc = 0
                   then call exit 'Cannot punch' ofn oft ofm
         'ERASE' ofn oft ofm
         'EXECIO 1 CP (SKIP STRING CLOSE 00D NAME' substr(fn'.'ft'.'oft,1,24)
         end
'DROPBUF' bufno
'SET CMSTYPE RT'
 if rcode = 0
    then do
         if msg = '' then say 'Include:'||'ld38'x||msg||'ld30'x
         end
if RT then 'SET CMSTYPE HT'
exit rcode

Jeff Heron
Senior Systems Programmer (UK)     ) Jeff Heron 1987













































