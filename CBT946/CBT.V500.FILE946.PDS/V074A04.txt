Batch GDDM

At our company we use a lot of GDDM, and run a lot of batch
where we use GDDM. Our problem was that we wanted some
of the batch to run overnight on a disconnected machine.
GDDM can't run on a disconnected machine, because it
always, by default, will make a DSOPEN call to find out
which type of output device it is running on. So you have to
put a dummy DSOPEN call into your applications which use GDDM.

When we learned about the dummy DSOPEN call, we thought
that we could drop most of our GDDM programming, and
replace it by the ICU utility that makes the ADMCFORM and
ADMCDEF files. You must create a dummy data file before
you start to make the GDDM files by ICU. By using ICU for
the GDDM part, our programs only had to have the input data
ready in a data file.

We wrote a small Assembler program and a REXX EXEC,
which could combine the data and the GDDM into a graphic
picture on a terminal, a printer, or in a GDF file. We also put a
DSOPEN call into the Assembler program to solve our batch at
night problem. You can call the REXX EXEC with different
parameters. The EXEC will check that you don't mix the
parameters in the wrong way. For example, you can't choose
to run disconnected with the result displayed on a terminal.
Some samples for calling the EXEC are shown below.
Filenames used in the samples are testc admcform and testd data.


SAMPLE A

You want to run disconnected, and the output to be a GDF file
with the name TESTGDF.

      EITGDDM1 disc gdf testc testd testgdf


SAMPLE B

You want to make a test of the GDDM picture, and want the
option to make some changes to it.
      EITGDDM1 term trm testc testd * test


SAMPLE C

You want to run disconnected, the output file is to be an
ADMPRINT file with the name test admprint, and when
printed will use 90% of the depth and 85% of the width on the paper.

      EITGDDM1 disc prt testc testd testprt (size(90 85)


PARAMETERS

Parameters for the EXEC are shown in Figure 1.



EXEC

/*********************************************************************/
Address COMMAND
Trace Off
Arg Runmode1 Output Grafname Dataname Out_Name Runmode2 Toomany,
   '(' Options
If Toomany <> ' ' Then Call Error 1 'Too many parameters entered'
If Runmode1 <> 'TERM' & Runmode1 <> 'DISC' Then,
   Call Error 1 'Runmode1 missing or invalid'
Select
   When Output = 'PRT' Then Nop
   When Output = 'TRM' Then Nop
   When Output = 'GDF' Then Nop
   Otherwise Call Error 1 'Output missing or invalid'
   End
If Grafname = ' ' Then Call Error 1 'Grafname missing'
If Dataname = ' ' Then Parse Value Grafname With Dataname 1 Out_Name
If Dataname = '*' Then Dataname = Grafname
If Out_Name = '*' Then Out_Name = Grafname
If Runmode1 = 'DISC' Then Do
   If Output   = 'TRM'  Then
                Call Error 1 'Parm mismatch - Runmode1=DISC, Output=TRM'
   End
If Runmode2 <> ' ' Then Do
   If Runmode2 <> 'TEST' Then Call Error 1 'Runmode2 invalid'
   If Runmode1 = 'DISC' Then
             Call Error 1 'Parm mismatch - Runmode1=DISC, Runmode2=TEST'
   If Output  <> 'TRM'  Then
           Call Error 1 'Parm mismatch - Output='Output', Runmode2=TEST'
   End
If Dataname = ' ' Then Call Error 1 'Dataname missing'
If Out_Name = ' ' Then Call Error 1 'Output-name missing'
Parse Value ' ' With Size1 Size2 Offset1 Offset2
Do While Options <> ' '
   Parse Value Options With Option')' Options
   If Option = ' ' Then Iterate
   Err =
   Option = Strip(Option)
   Select
      When Left(Option,4) = 'SIZE'   Then Do
           Parse Value Option With '(' Size1 Size2
           If Size1 < 1 | Size1 > 100 Then
                             Err = 'Size parm(s) must be from 1 to 100'
           If Size2 < 1 | Size2 > 100 Then
                             Err = 'Size parm(s) must be from 1 to 100'
           Size1 = Right(Size1,4,0)
           Size2 = Right(Size2,4,0)
           End
      When Left(Option,6) = 'OFFSET' Then Do
           Parse Value Option With '(' Offset1 Offset2
           If Offset1 < 0 | Offset1 > 100 Then
                           Err = 'Offset parm(s) must be from 0 to 100'
           If Offset2 < 0 | Offset2 > 100 Then
                           Err = 'Offset parm(s) must be from 0 to 100'
           Offset1 = Right(Offset1,4,0)
           Offset2 = Right(Offset2,4,0)
           End
      Otherwise Err = "Invalid option - '"Option"'"
      End
   If Err <> ' ' Then Call Error 1 Err
   End
 If Runmode2 = ' ' Then Runmode2 = '*'
 If Size1    = ' ' Then Size1    = '*'
 If Size2    = ' ' Then Size2    = '*'
 If Offset1  = ' ' Then Offset1  = '*'
 If Offset2  = ' ' Then Offset2  = '*'
'BITGDDM1' Runmode1 Output Grafname Dataname Out_Name Runmode2,
           Size1 Size2 Offset1 Offset2
EXIT Rc
Error:
Parse Arg Rx Text
Say Strip(Text)'.'
Exit Rx


ASSEMBLER PROGRAM

GRAF     TITLE   'BATCH GDDM'
         PRINT   NOGEN
BITGDDM  CSECT
         STM   R14,R12,12(R13)          SAVE REGISTERS
         BALR  R12,0                    BASE REGISTER FOR CODE
         USING *,R12                    ... AND TELL THE ASSEMBLER
         ST    R13,SAVEAREA+4           SAVE CALLERS SAVE AREA ADDR.
         LA    R11,SAVEAREA             GET SAVE AREA ADDR.
         ST    R11,8(,R13)              ... AND STORE IT
         LR    R13,R11                  SAVE AREA FOR CALLED ROUTINES
         MVC   IPARMS,8(R1)             GET INPUT PARMS
         CALL  FSINIT,(0),VL            INIT GDDM
         LTR   R9,R15                   ... AND CHECK RETURN
         BNZ   RETURN                   IF ERROR, THEN EOJ
         CLC   IP1(5),=C'DISC '         RUN MODE DISCONNECT ?
         BE    DISC1
         CLC   IP1(5),=C'TERM '         RUN MODE TERMINAL ?
         BE    TERM1
DISC1    EQU   *
*        DSOPEN THE DUMMY DEVICE AND MAKE IT PRIMARY
         CALL  DSOPEN,(DID,DFAM,DTOK,DPROCC,DPROCL,DNAMEC,DNAME),VL
         CALL  DSUSE,(DSUCNTRL,DID),VL
TERM1    EQU   *
         CALL  CSCCRT,(ID,WFKT1),VL     INIT NEW CHART
         CALL  CSLOAD,(ID,WFKT1,IP3),VL LOAD CHART FORMAT
         CALL  CSLOAD,(ID,WFKT5,IP4),VL LOAD DATA FORMAT
         CALL  CSLOAD,(ID,WFKT6,IP4),VL IMPORT DATA
         CLC   IP2(4),=C'TRM '          OUTPUT MODE TERMINAL ?
         BE    TRM1
         CLC   IP2(4),=C'PRT '          OUTPUT MODE PRINTER ?
         BE    PRT1
         CLC   IP2(4),=C'GDF '          OUTPUT MODE GDF-FILE ?
         BE    GDF1
*  START ICU DISPLAY,CONTROL, WFKT4=DISK,WFKT7=TERM,WFKT2=TERM TEST
TRM1     EQU   *
         CLC   IP6(5),=C'TEST '         DISPLAY MODE ?
         BE    TST1
         CALL  CSSICU,(ID,WFKT1,WFKT7),VL   ONLY DISPLAY
         B     NRETURN
TST1     EQU   *
         CALL  CSSICU,(ID,WFKT1,WFKT2),VL   DISPLAY PLUS ICU
         B     NRETURN
PRT1     EQU   *
*        SET PRINTER OUTPUT
         CALL  CSCHA,(ID,WFKT3,WFKT1,WFKT1,WFKT8,IP5),VL
         MVC   WFKT,=F'45'              SET UNITS TO %
         CALL  CSINT,(ID,WFKT,WFKT3,WFKT1,WFKT0,WFKT1),VL
PRT1T1   EQU   *
         CLI   IP7,C'*'
         BE    PRT1T2
         LA    R1,IP7
         BAL   R7,CONVERT
         CALL  CSFLT,(ID,WFKT1,WFKT1,WFKT1,WFKT0,WFKT),VL
PRT1T2   EQU   *
         CLI   IP8,C'*'
         BE    PRT1T3
         LA    R1,IP8
         BAL   R7,CONVERT
         CALL  CSFLT,(ID,WFKT1,WFKT2,WFKT1,WFKT0,WFKT),VL
PRT1T3   EQU   *
         CLI   IP9,C'*'
         BE    PRT1T4
         LA    R1,IP9
         BAL   R7,CONVERT
         CALL  CSFLT,(ID,WFKT1,WFKT3,WFKT1,WFKT0,WFKT),VL
PRT1T4   EQU   *
         CLI   IP10,C'*'
         BE    PRT1TOK
         LA    R1,IP10
         BAL   R7,CONVERT
         CALL  CSFLT,(ID,WFKT1,WFKT4,WFKT1,WFKT0,WFKT),VL
PRT1TOK  EQU   *
         MVC   WFKT,=F'45'              remove HEADER
         CALL  CSINT,(ID,WFKT,WFKT2,WFKT1,WFKT0,WFKT2),VL
         CALL  CSSICU,(ID,WFKT1,WFKT4),VL
         B     NRETURN
GDF1     EQU   *
         CALL  CSSAVE,(ID,WFKT4,IP5,WFKT2),VL
         B     NRETURN
NRETURN  EQU   *
*        TERMINATE GDDM
         CALL  FSTERM,(0),VL
RETURN   L     R13,4(,R13)              RECOVER SAVE AREA ADDRESS
         LR    R15,R9                   SET RETURN CODE
         L     R14,12(,R13)             RESTORE REG.
         LM    R0,R12,20(R13)           ... FOR CALLER
         BR    R14                      RETURN TO CALLING ROUTINE
**       S U B R O U T I N E S                                       **
CONVERT  EQU   *
         PACK  WORKD,0(4,R1)            PACK THE INPUT
         CVB   R1,WORKD                 SET R1 = CONVERTED WORKD
         X     R1,TWO31+4
         ST    R1,WORKD+4
         MVC   WORKD(4),TWO31
         LD    F2,WORKD
         SD    F2,TWO31
         LRER  F2,F2
         STE   F2,WFKT
         BR    R7                       AND RETURN
*               PROGRAM CONSTANTS
WORKD    DS    D                        WORK DWORD
TWO31    DC    X'4E00000080000000'
SAVEAREA DS    18F                      REGISTER SAVE AREA
ID       DC    F'1'                     CHART NR.
WFKT     DS    F                        WORK FULL WORD
WFKT0    DC    F'0'                     WORK FULL WORD INIT 0
WFKT1    DC    F'1'                     WORK FULL WORD INIT 1
WFKT2    DC    F'2'                     WORK FULL WORD INIT 2
WFKT3    DC    F'3'                     WORK FULL WORD INIT 3
WFKT4    DC    F'4'                     WORK FULL WORD INIT 4
WFKT5    DC    F'5'                     WORK FULL WORD INIT 5
WFKT6    DC    F'6'                     WORK FULL WORD INIT 6
WFKT7    DC    F'7'                     WORK FULL WORD INIT 7
WFKT8    DC    F'8'                     WORK FULL WORD INIT 8
IPARMS   DS    0CL80
IP1      DS    CL8                      RUN MODE
IP2      DS    CL8                      OUTPUT MODE
IP3      DS    CL8                      GDDM CHART
IP4      DS    CL8                      GDDM DATA
IP5      DS    CL8                      OUTPUT NAME
IP6      DS    CL8                      ICU DISPLAY (TEST/PROD-MODE)
IP7      DS    CL8                      DEPTH OF CHART AREA
IP8      DS    CL8                      WIDTH OF CHART AREA
IP9      DS    CL8                      VERTICAL OFFSET
IP10     DS    CL8                      HORIZONTAL OFFSET
DID      DC    F'11'                    DEVICE-ID
DFAM     DC    F'1'                     DEVICE-FAM
DTOK     DC    CL8'L79A3   '            DEVICE-TOK
DPROCC   DC    F'0'                     DEVICE-PROCCNT
DPROCL   DC    F'0'                     DEVICE-PROCLIST
DNAMEC   DC    F'1'                     DEVICE-NAMECNT
DNAME    DC    CL8'        '            DEVICE-NAME
DSUCNTRL DC    F'1'                     DSUSE-CONTROL
*               EQUATES FOR REGISTERS
         REGEQU
         LTORG
         END   BITGDDM

Ivan Tullberg
Systems Programmer (Denmark)

