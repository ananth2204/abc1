High performance sort routine

The following high performance sort program has the syntax:

    WSORT fn1 ft1 fm1 fn2 ft2 fm2 <( option>

Where fn1 ft1 fm1 are the CMS input file and fn2 ft2 fm2 are
the CMS output file (which is erased if it already exists).  The
only option is COST which will display an estimate of CPU
usage.

During execution if you receive a message like 'protection
exception occurred at...', please contact your system
programmer.

WSORT EXEC

arg line
parse var line fnin  ftin  fmin  fnout  ftout  fmout  option
if fnin=' ' | ftin=' ' | fmin=' ' | fnout=' ' | ftout=' ' | fmout=' ',
         then do
         say 'DMSSRT054E INCOMPLETE FILEID SPECIFIED.'
         exit 24
end
if fnin¬='*' & ftin¬='*' & fmin¬='*' & fnout¬='*' & ftout¬='*',
& fmout¬='*'
    then nop
    else do
         say'DMSSRT062E INVALID * IN FILEID.'
         exit 20
    end
set cmstype ht
state fnin ftin fmin
rcsav1=rc
state fnout ftout fmout
rcsav2=rc
set cmstype rt
if rcsav1= 28  then do
     say "DMSSRT002E FILE '"fnin ftin fmin"' NOT FOUND."
     exit 28
end
if rcsav1 = 36 | rcsav2 = 36 then do
     if rcsav1=36 then fm=fmin
     else fm=fmout
     say "DMSSRT069E DISK '"fm"' NOT ACCESSED."
     exit 36
end
if fnin=fnout & ftin=ftout & fmin=fmout then do
     say 'DMSSRT019E IDENTICAL FILEIDS.'
     exit 24
end
"SET CMSTYPE HT"
' LISTFILE ' fnin ftin fmin ' (DATE STACK LIFO'
"SET CMSTYPE RT"
parse pull . . . fmt lrecl nbrec trail
if fmt ¬='F' then do
     say "DMSSRT034E FILE '"fnin ftin fmin"' IS NOT FIXED LENGTH."
     exit 32
end
"QUERY DISK" substr(fmout,1,1) "( STACK LIFO"
say queued()
parse pull . . . stato trail
pull trail
if  stato ¬= 'R/W' then do
     say "DMSSRT037E DISK '"fmout"' IS READ/ONLY."
     exit 36
end
say 'DMSSRT604R ENTER SORT FIELDS:'
pull line
if line='' then do
   say 'DMSSRT063E NO LIST ENTERED.'
   exit 40
end
n=0;totkey=0
do until line =' '
   n=n+1
   parse var line field1 field2 line
   if (datatype(field1,whole) ¬= '1') | (datatype(field2,whole) ¬= '1'),
   then do
       say 'DMSSRT053E INVALID SORT FIELD PAIR DEFINED.'
       exit 24
   end
   if field1 > lrecl | field2 > lrecl then do
       if field1 > lrecl then say "COLUMN '"field1"' EXCEEDS RECORD",
                                  " LENGTH."
       else say "COLUMN '"field2"' EXCEEDS RECORD LENGTH."
       exit 24
   end
   lgthkey=field2-field1+1
   if lgthkey<=0 then do
      say 'DMSSRT053E INVALID SORT FIELD PAIR DEFINED.'
      exit 24
   end
   poskey.n=field1
   lgthkey.n=lgthkey
   totkey=totkey+lgthkey
end
/*  Compute key length and lrecl to obtain a correct boundary         */
keycom = 0
if totkey // 4  ¬= 0 then do
   poscom = 1
   keycom = 4 - (totkey // 4)
end
lrecl2=lrecl
reste=lrecl // 4
if reste ¬= 0 then lrecl2=lrecl + 4 - reste
'EXECIO * CP (STRING ' Q STOR
parse pull . . stor
stor=left(stor,5)
needsto1=lrecl2*nbrec+(totkey+keycom)*nbrec
needsto2=(totkey+keycom)*nbrec
/*  Estimate CPU time...                                              */
parse var option "(" option
mesflg=0
if option = "COST" then do
   m=0;p=nbrec
   do until p < 2
       p= p / 2
       m = m + 1
   end
   x=(p - 1) / (p + 1)
   log2p = (.86304 + .36415 * x * x ) * x / .30103
   log2n = m + log2p
   t1= 0.0000295  * nbrec * log2n + .21
   t2=t1+.000534*nbrec
   mes1="ESTIMATED CPU TIME IS" trunc(t1,1) 'SEC'
   mes2="ESTIMATED CPU TIME IS" trunc(t1,1) '-' trunc(t2,1) 'SEC'
   mes1=left(mes1,60," ");mes2=left(mes2,60," ")
   mesflg=1
end
DROPBUF
queue left(fnin,8)
queue left(ftin,8)
queue left(fmin,8)
queue left(fnout,8)
queue left(ftout,8)
queue left(fmout,8)
queue right(lrecl,8,0)
queue right(lrecl2,8,0)
queue right(totkey + keycom,8,0)
queue right(needsto1,8,0)
queue right(needsto2,8,0)
queue mesflg
queue mes1
queue mes2
ind=1
do until ind>n
   queue right(poskey.ind,8,0)
   queue right(lgthkey.ind,8,0)
   ind=ind+1
end
if keycom ¬= 0 then do
    queue right(poscom,8,0)
    queue right(keycom,8,0)
end
queue '********'
set cmstype ht
"ERASE" fnout ftout fmout
set cmstype rt
"WSORT"
if RC ¬= 0 then do
          say 'DMSSRT212E MAXIMUM NUMBER OF RECORDS EXCEEDED.'
          exit 40
end
exit


WSORT ASSEMBLE

* Sort a CMS fixed-length file in ascending order                     *
* The size of the CMS file is limited to 16,777,216 records ...       *
TREESRT  START 0
         PRINT NOGEN
         USING TREESRT,12
         LR    12,15
         ST    14,SAVE14
*        READ THE PARAMETERS ON THE STACK                            *
         BAL   11,RDSTACK
         LA    4,RFSCB                      FILEID IN
         MVC   0(8,4),STACK
         BAL   11,RDSTACK
         MVC   8(8,4),STACK
         BAL   11,RDSTACK
         MVC   16(2,4),STACK
         BAL   11,RDSTACK
         LA    5,WFSCB                      FILEID OUT
         MVC   0(8,5),STACK
         BAL   11,RDSTACK
         MVC   8(8,5),STACK
         BAL   11,RDSTACK
         MVC   16(2,5),STACK
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)           RECORD LENGTH1
         CVB   13,DOUBLE
         ST    13,LRECL
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)           RECORD LENGTH2
         CVB   13,DOUBLE
         ST    13,LRECL2
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)           KEY LENGTH
         CVB   13,DOUBLE
         S     13,=F'1'
         ST    13,LGKEY
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)           MEMORY1
         CVB   9,DOUBLE
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)           MEMORY2
         CVB   10,DOUBLE
         BAL   11,RDSTACK
         MVC   FLAG(1),STACK                FLAG
         BAL   11,RDSTACK
         MVC   TIME1(60),STACK              CPU TIME1
         BAL   11,RDSTACK
         MVC   TIME2(60),STACK              CPU TIME2
S1       LA    5,0
         LA    7,KEYPOS
         LA    8,KEYLGT
BCL00    BAL   11,RDSTACK
         CLC   STACK(4),=C'****'
         BE    S2
         PACK  DOUBLE(8),STACK(8)
         CVB   6,DOUBLE                     KEY POSITION1
         ST    6,0(5,7)
         BAL   11,RDSTACK
         PACK  DOUBLE(8),STACK(8)
         CVB   6,DOUBLE                     KEY POSITION2
         ST    6,0(5,8)
         LA    5,4(5)
         B     BCL00
S2       L     6,=F'0'
         ST    6,0(5,7)
         ST    6,0(5,8)
         B     CREARB
*        SUBROUTINE TO READ THE STACK                                *
RDSTACK  LA    1,PARMLST
         SVC   202                          CALL SUPERVISOR
         DC    AL4(1)
         BR    11
*        PARAMETER LIST FOR SVC 202 (FUNCTION CMS)                   *
PARMLST  DS    0F
         DC    CL8'WAITRD'
         DC    AL1(1)
         DC    AL3(STACK)
         DC    CL1'U'
         DC    XL1'00'
         DC    AL2(130)
         EJECT
*  CREATION D'UN ARBRE BINAIRE EQUILIBRE                              *
CREARB   GETMAIN EC,LV=LRECL,A=ENREG        ALLOCATION BUFFER ENREG
         LTR   15,15
         BNZ   MSG
         LA    4,RFSCB
         LA    5,WFSCB
*                                           OPEN THE FILES            *
         FSOPEN (4),FSCB=FICHIN
         FSOPEN (5),FSCB=FICHOUT
         L     3,ENREG
         L     4,LRECL
         LA    5,FICHIN
         USING FSCBD,5
         ST    3,FSCBBUFF
         ST    4,FSCBSIZE
         LA    5,FICHOUT
         USING FSCBD,5
         ST    3,FSCBBUFF
         ST    4,FSCBSIZE
*                               ALLOCATION ESPACES MEMOIRE THEORIQUES *
         GETMAIN EC,LV=SIZE2,A=PILE
         LTR   15,15
         BNZ   MSG
         GETMAIN EC,LV=(9),A=HEAD
         LA    8,TIME1
         LTR   15,15
         BZ    CPUTIME
         GETMAIN EC,LV=(10),A=HEAD
         LA    8,TIME2
         LTR   15,15
         BNZ   STOP
         MVI   MEM,X'00'
CPUTIME  CLC   FLAG(1),=C'0'
         BE    START
         WRTERM (8),60
         EJECT
*                                      1ST READ                       *
START    FSREAD FSCB=FICHIN,ERROR=EOF
         BAL   11,RDKEY                CONSTRUCTION OF THE KEY
*                                      INSERT 1ST ELEMENT             *
         L     5,HEAD                  Q<--HEAD
         LA    6,16(5)                 R<--A(1ERELT)
         ST    6,8(5)                  LIEND(HEAD)<--R
         LR    5,6                     Q<--A(1ERELT)
         LR    10,5
         L     3,=F'1'
         ST    3,0(5)                  RECNO(R)<--1
         MVI   0(5),X'00'              B(R)<--0
         L     6,=F'0'
         ST    6,4(5)                  LIEND(R)<--*
         ST    6,8(5)                  LIENG(R)<--*
         L     1,LGKEY
         EX    1,EX0
         B     EX0+6
EX0      MVC   12(0,5),KEY             CLE(R)<--KEY
         CLI   MEM,X'01'               TRI AVEC ENREG EN MEMOIRE ?
         BNE   LECT                    NON --> LECT
         L     14,ENREG
         LA    2,13(1,5)               R2<--A(1ERELT)+LGKEY+12
         L     13,LRECL
         S     13,=F'1'
         EX    13,MV1
         B     LECT
MV1      MVC   0(0,2),0(14)            NOEUD(R)<--ENREG
*                                      READ REGISTERS                 *
LECT     FSREAD FSCB=FICHIN,ERROR=RDTREE
         BAL   11,RDKEY                CONSTRUCTION OF THE KEY
*                                      A1. INITIALISATIONS            *
A1       L     8,HEAD                  T<--HEAD
         L     7,8(8)                  S<--LIEND(HEAD)
         LR    4,7                     P<--LIEND(HEAD)
*                                      A2. COMPARISON                 *
A2       L     1,LGKEY
         EX    1,E2
         B     E2+6
E2       CLC   12(0,4),KEY             COMP CLE(P) KEY
         BNH   A4                      SI KEY >= -->A4
         EJECT
*                                      A3. DISPLACEMENT LEFT          *
A3       L     5,4(4)                  Q<--LIENG(P)
         C     5,=F'0'                 Q<--*
         BNE   DIFFA3
         CLI   MEM,X'01'               TRI AVEC ENREG EN MEMOIRE?
         BNE   S31                     NON --> S31
         L     13,LRECL2
         AR    10,13
S31      LA    10,13(1,10)             A(NOEUD)<--A(ANOEUD)+LGKEY+12
         LR    5,10                    Q<--A(NOEUD)
         A     3,=F'1'                 RECNO=RECNO+1
         ST    3,0(5)                  RECNO(Q)<--RECNO
         ST    5,4(4)                  LIENG(P)<--Q
         B     A5
DIFFA3   CLI   0(5),X'00'              B(Q)=0
         BE    FINA3
         LR    8,4                     T<--P
         LR    7,5                     S<--Q
FINA3    LR    4,5                     P<--Q
         B     A2
*                                      A4. DISPLACEMENT RIGHT         *
A4       L     5,8(4)                  Q<--LIEND(P)
         C     5,=F'0'                 Q<--*
         BNE   DIFFA3
         CLI   MEM,X'01'               TRI AVEC ENREG EN MEMOIRE?
         BNE   S41                     NON --> S41
         L     13,LRECL2
         AR    10,13
S41      LA    10,13(1,10)             A(NOEUD)<--A(ANOEUD)+LGKEY+12
         LR    5,10                    Q<--A(NOEUD)
         A     3,=F'1'                 RECNO=RECNO+1
         ST    3,0(5)                  RECNO-->RECNO(Q)
         ST    5,8(4)                  LIEND(P)<--Q
         B     A5
         EJECT
*                                      A5. INSERTION                  *
A5       L     1,LGKEY
         EX    1,E5
         B     E5+6
E5       MVC   12(0,5),KEY             KEY-->CLE(Q)
         L     9,=F'0'                 R9<--*
         ST    9,4(5)                  LIENG(Q)<--*
         ST    9,8(5)                  LIEND(Q)<--*
         MVI   0(5),X'00'              B(Q)<--0
         CLI   MEM,X'01'               TRI AVEC ENREG EN MEMOIRE ?
         BNE   A6                      NON --> A6
         LA    2,13(1,5)               R2<--A(1ERELT)+LGKEY+12
         L     14,ENREG
         L     13,LRECL
         S     13,=F'1'
         EX    13,MV2
         B     A6
MV2      MVC   0(0,2),0(14)            NOEUD(R)<--ENREG
*                                      A6. AJUSTEMT FACTEURS D'EQUIL  *
A6       L     1,LGKEY
         EX    1,E6
         B     E6+6
E6       CLC   12(0,7),KEY             COMP CLE(S) KEY
         BH    S1A6
         L     6,8(7)                  SINON R<--LIEND(S)
         B     S2A6
S1A6     L     6,4(7)                  R<--LIENG(S)
S2A6     LR    4,6                     P<--R
BCLA6    CR    4,5                     P=Q ?
         BE    A7                      OUI --> A7
S3A6     L     1,LGKEY
         EX    1,EX2
         B     EX2+6
EX2      CLC   12(0,4),KEY             COMP CLE(P) KEY
         BH    KINFA6                  KEY < --> KINFA6
         B     KSUPA6                  KEY >= --> KSUPA6
KINFA6   MVI   0(4),X'FF'              B(P)<-- -1
         L     4,4(4)                  P<-- LIENG(P)
         B     BCLA6                   --> BCLA6
KSUPA6   MVI   0(4),X'01'              B(P)<-- +1
         L     4,8(4)                  P<-- LIEND(P)
         B     BCLA6
         EJECT
*                                      A7. EQUILIBRAGE                *
A7       L     1,LGKEY
         EX    1,E7
         B     E7+6
E7       CLC   12(0,7),KEY             COMP CLE(S) KEY
         BH    S1A7                    SI CLE(S) > KEY --> S1A7
         MVI   A,X'01'                 A <-- +1
         MVI   AC,X'FF'                A <-- -1
         B     S2A7
S1A7     MVI   A,X'FF'                 A <-- -1
         MVI   AC,X'01'                A <-- +1
S2A7     CLI   0(7),X'00'              B(S)=0 ?
         BNE   S3A7                    NON --> S3A7
         MVC   0(1,7),A                B(S) <-- A
         B     LECT
S3A7     CLC   0(1,7),AC               B(S)= -A ?
         BNE   S4A7                    NON --> S4A7
         MVI   0(7),X'00'              B(S) <-- 0
         B     LECT
S4A7     CLC   0(1,7),A                B(S)=A ?
         BNE   STOP
         CLC   0(1,6),A                B(R)=A ?
         BNE   S5A7                    NON --> S5A7
         B     A8                      OUI --> A8
S5A7     CLC   0(1,6),AC               B(R)=-A ?
         BNE   STOP
         B     A9                      OUI --> A9
*                                      A8. SIMPLE ROTATION            *
A8       LR    4,6                     P<--R
         CLI   A,X'01'                 A=+1 ?
         BNE   S1A8                    NON --> S1A8
         MVC   8(4,7),4(6)             LIEND(S) <-- LIENG(R)
         ST    7,4(6)                  LIENG(R) <-- S
         B     S2A8                    --> S2A8
S1A8     MVC   4(4,7),8(6)             LIENG(S) <-- LIEND(R)
         ST    7,8(6)                  LIEND(R) <-- S
S2A8     MVI   0(7),X'00'              B(S) <-- 0
         MVI   0(6),X'00'              B(R) <-- 0
         B     A10                     --> A10
         EJECT
*                                      A9. DOUBLE ROTATION            *
A9       CLI   A,X'01'                 A=+1 ?
         BNE   S1A9                    NON --> S1A9
         L     4,4(6)                  P <-- LIENG(R)
         MVC   4(4,6),8(4)             LIENG(R) <-- LIEND(P)
         ST    6,8(4)                  LIEND(P) <-- R
         MVC   8(4,7),4(4)             LIEND(S) <-- LIENG(P)
         ST    7,4(4)                  LIENG(P) <-- S
         B     S2A9                    --> S2A9
S1A9     L     4,8(6)                  P <-- LIEND(R)
         MVC   8(4,6),4(4)             LIEND(R) <-- LIENG(P)
         ST    6,4(4)                  LIENG(R) <-- R
         MVC   4(4,7),8(4)             LIENG(S) <-- LIEND(P)
         ST    7,8(4)                  LIEND(P) <-- S
S2A9     CLC   0(1,4),A                B(P)=A ?
         BNE   S3A9                    NON --> S3A9
         MVC   0(1,7),AC               B(S) <-- -A
         MVI   0(6),X'00'              B(R) <-- 0
S3A9     CLI   0(4),X'00'              B(P)=0 ?
         BNE   S4A9                    NON --> S4A9
         MVI   0(7),X'00'              B(S) <-- 0
         MVI   0(6),X'00'              B(R) <-- 0
S4A9     CLC   0(1,4),AC               B(P)=-A ?
         BNE   S5A9                    NON --> S5A9
         MVI   0(7),X'00'              B(S) <-- 0
         MVC   0(1,6),A                B(R) <-- A
S5A9     MVI   0(4),X'00'              B(P) <-- 0
*                                      A10. FINAL TOUCH               *
A10      C     7,8(8)                  S=LIEND(T) ?
         BNE   S1A10                   NON --> S1A10
         ST    4,8(8)                  LIEND(T) <-- P
         B     LECT                    --> LECT
S1A10    ST    4,4(8)                  LIENG(T) <-- P
         B     LECT                    --> LECT
*
EOF      LINEDIT TEXT='FILE EMPTY'
         B     FINRD
         EJECT
*        SUBROUTINE TO READ THE KEY                                   *
RDKEY    STM   3,7,SAVE37
         LA    3,KEY
         LA    7,0
BCL0     L     4,KEYPOS(7)
         L     5,KEYLGT(7)
         C     4,=F'0'
         BE    OUT
         L     6,ENREG
         LA    6,0(4,6)
         S     6,=F'1'
         S     5,=F'1'
         EX    5,MV0
         B     MV0+6
MV0      MVC   0(0,3),0(6)
         LA    3,0(5,3)
         A     3,=F'1'
         LA    7,4(7)
         B     BCL0
OUT      LM    3,7,SAVE37
         BR    11
*        CONSTANTS AND VARIABLES                                      *
A        DS    X
AC       DS    X
MEM      DC    X'01'
HEAD     DC    F'0'
LRECL    DC    F'0'
LRECL2   DC    F'0'
LGKEY    DC    F'0'
KEY      DC    CL255' '
ENREG    DC    F'0'
STACK    DC    CL130' '
KEYPOS   DC    21F'0'
KEYLGT   DC    21F'0'
DOUBLE   DS    D
FLAG     DS    C
TIME1    DC    CL60' '
TIME2    DC    CL60' '
         EJECT
* B1: PARCOURS DE L'ARBRE BINAIRE EQUILIBRE                           *
RDTREE   FSPOINT FSCB=FICHIN
         L     10,LRECL
         L     14,ENREG
         L     11,LGKEY
         A     11,=F'13'
         S     10,=F'1'
         L     6,HEAD                  R6 <-- A(HEAD)
         L     5,8(6)                  R <-- LIEND(HEAD)
         L     7,PILE                  R7 <-- A(PILE)
         LR    8,7                     R8 <-- A(1ER ELT DE LA PILE)
BCL1     C     5,=F'0'                 R=* ?
         BNE   BCL2                    NON --> BCL2
         CR    7,8                     PILE VIDE ?
         BE    FINRD                   OUI --> FINRD
BCL2     C     5,=F'0'                 R=* ?
         BE    FINBCL2                 OUI --> FINBCL2
         ST    5,0(8)                  EMPILER R
         LA    8,4(8)                  R8 <-- A(ELT SUIVT DE LA PILE)
         L     5,4(5)                  R <-- LIENG(R)
         B     BCL2                    --> BCL2
FINBCL2  S     8,=F'4'                 DEPILER R
         L     5,0(8)
         CLI   MEM,X'00'
         BE    LECT2
         LA    13,0(11,5)
         EX    10,EX10
         B     ECRIT
EX10     MVC   0(0,14),0(13)
LECT2    MVI   0(5),X'00'
         L     9,0(5)                  9 <-- RECNO(R)
         FSREAD FSCB=FICHIN,RECNO=(9)
ECRIT    FSWRITE FSCB=FICHOUT
         L     5,8(5)                  R <-- LIEND(R)
         B     BCL1
MSG      LINEDIT TEXT='MEMORY UNAVAILABLE'
*                                      CLOSE THE FILES                *
FINRD    FSCLOSE FSCB=FICHIN
         FSCLOSE FSCB=FICHOUT
*                                      EXIT                           *
         LA    15,0
STOP     L     14,SAVE14
         BR    14
         EJECT
*                                      VARIABLES AND CONSTANTS        *
SAVE14   DC    F'0'
SAVE37   DC    5F'0'
PILE     DC    F'0'
SIZE2    DC    F'100'
FICHIN   FSCB  RECFM=F
RFSCB    DC    18C' '
FICHOUT  FSCB  RECFM=F
WFSCB    DC    18C' '
         FSCBD
         END   TREESRT

Philippe Taymans
System Engineer
WESI (Belgium)

