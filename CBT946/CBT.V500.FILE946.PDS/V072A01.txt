User interrogation from XEDIT without using SAY


PROBLEM

It is easy and straightforward to use SAY and PULL in REXX
XEDITs to ask a user a question. However, it is not user-
friendly because the user is no longer able to see what was
displayed on the XEDIT screen, whether it was a file or a
manufactured panel using reserved lines. What is needed is a
program to display the requested text surrounded by some kind
of box to distinguish it from the background, ie a window.


SOLUTION

Knowing nothing about CMS session services (ie windows and
VSCREENs) and not managing to learn enough from the
manuals to achieve my goal, I developed an XEDIT macro to
display the text using reserved lines. The user can type in his or
her response on the normal XEDIT command line, and it can
be passed back to the calling program to take appropriate
action.

This is relatively straightforward to do. The problem is that
using reserved lines involves the use of escape sequences set by
SET CTLCHAR. If the existing XEDIT screen contains
reserved lines, they were probably displayed using their own
set of escape sequences; and these are quite likely to be
different from the ones I was going to use to display the
window. When this happens, after my XWINDOW macro
completes, the existing reserved lines are a mess containing
lots of special characters such as exclamation marks and dollar
signs.

To get around this, I developed SETCTLCH XEDIT to
interrogate any existing escape sequences and to use them, or,
if the required CTLCHAR was not set, to establish it and tell
the calling program.

For examples on how to use these two programs see the
comments at the top of each file.

Figure 1 gives an example of what an XWINDOW looks like.
The side borders consist of vertical bars (X'4F') though on
some terminals they appear as pipelines; the top and bottom
borders are minus signs and the corners plus signs. I spent
quite some time trying to emulate packages I had seen that
complete the box with no gaps between the individual
elements, including proper corners, but could not manage it.
Any suggestions, anyone?


XWINDOW XEDIT

/* XWINDOW XEDIT - ask user a question surrounded by a box         */
/*                 and process user's response.                    */
/* 4 arguments:-                                                   */
/*   1 :- Number of lines of text to be displayed.                 */
/* 2-n :- lines of text                                            */
/*   3 :- NULL/NONULL - Is a null response allowed?                */
/*                    - default is NULL ie yes.                    */
/*   4 :- PFK /NOPFK  - Is a PF Key a valid response?              */
/*                    - default is NOPFK ie no.                    */
/* Examples                                                        */
/*   answer = WINDOW(1,'Text to appear in the box - reply Y/N')    */
/*   if answer = '' then answer = 'Y'                              */
/* or                                                              */
/*   answer = WINDOW(2,'User must reply or press a PF key to',,    */
/*                     'this two line message','NONULL', PFK')     */
signal on SYNTAX             /* Emergency exits.                   */
signal on HALT
signal MAINLINE
SYNTAX:
HALT:
EXIT:
  'SET RESERVED' endline-4 'OFF'
  'SET RESERVED' endline-3 'OFF'
  'SET RESERVED' endline-2 'OFF'
'RESTORE'
exit
MAINLINE:                    /* Process the arguments.             */
   numlines = arg(1)         /* How many lines of text?            */
   do i = 1 to numlines
      str.i = arg(i+1)       /* Save each line of text?            */
   end i
   nullparm  = arg(i+1)      /* NULL/NONULL specified?             */
   pfkeyparm = arg(i+2)      /* PFK/NOPFK spcified?                */
                                  /* Will user be allowed to press */
   nonull = nullparm =  'NONULL'  /* Enter with no text.           */
   null   = nullparm <> 'NONULL'  /* Default is to yes.            */
   pfkey   = pfkeyparm =  'PFK'   /* Will a PF key be a valid reply*/
   nopfkey = pfkeyparm <> 'PFK'   /* Default is no.                */
  'PRESERVE'                      /* Save XEDIT settings.          */
  'MSGMODE OFF'
   ph = SETCTLCH('PROTECT',,,'HIGH')   /* Find out Control Chars   */
   pn = SETCTLCH('PROTECT',,,'NOHIGH') /* to use on RESERVED lines.*/
   maxlen = 0
   do k = 1 to numlines      /* Find out length of longest text.   */
      len = length(str.k)
      if len > maxlen then maxlen = len
   end k
   line = left('-',maxlen+2,'-')  /* Build top/bottom border.      */
  'EXTRACT /LSCREEN/CMDLINE/MSGLINE/'
   endline = lscreen.1
  'SET RESERVED' endline-1-(numlines+2) 'HIGH      +'line'+'
   do j = numlines to 1 by -1
     'SET RESERVED' endline-3-(numlines-j)  ,
        'HIGH     'ph'|'pn''left(str.j,maxlen)''ph'|'pn
   end j
  'SET RESERVED' endline-2 'HIGH      +'line'+'
   if cmdline.1 = 'OFF' then 'SET CMDLINE ON'
/* If MSGLINE is one of the lines we want to Reserve our text      */
/* will not be displayed, so OVERLAY is necessary.                 */
  'SET MSGLINE' msgline.1 msgline.2 msgline.3 'OVERLAY'
  'SOS ALARM'                /* Sound the terminal's alarm.        */
  'CURSOR COMMAND'           /* Position Cursor on Command line.   */
   exitflag = 0
READ:
   cmd_pressed = 0           /* Enter has not been pressed yet.    */
   pfk_pressed = 0           /* A PF key has not been pressed yet. */
   pass = ''
  'CONWAIT'
  'DESBUF'                   /* Clr the stacks ready for the READ. */
  'READ NOCHANGE TAG'        /* Wait till user presses an Attn key.*/
   do queued()               /* Process Attn key and changed lines.*/
      parse pull cntlkey rest
      if cntlkey = 'CMD' then do      /* Text from the Cmd line.   */
         if pfk_pressed               /* If PF key already pressed */
            then iterate              /* then ignore cmd line.     */
         cmd_pressed = 1              /* Set flag for later.       */
         if rest = '' & null ,        /* No reply and allowed      */
          | rest <> '' then do        /* or reply entered?         */
            pass = rest               /* ..Yes. So set up reply.   */
            exitflag = 1              /* And flag we've finished.  */
         end
      end
      if cntlkey = 'PFK' ,            /* PF key pressed and it is  */
       & pfkey then do                /* allowed to be a reply?    */
         pfk_pressed = 1              /* ..Yes. So flag it.        */
         parse var rest keyno rest
         pass = cntlkey keyno         /* Set up reply.             */
         exitflag = 1                 /* And flag we've finished.  */
      end
   end  /* end of do queued() */
   if cmd_pressed = 0 ,      /* Nothing entered on Cmd line        */
    & null then              /* and null response is allowed?      */
      exitflag = 1           /* ..Yes. So OK to return empty.      */
   if Â¬ exitflag             /* If no valid reply                  */
      then signal READ       /* then go do it again.               */
TIDYUP:            /* Put everything back the way we found         */
                   /* it and return to calling program.            */
  'SET MSGLINE' msgline.1 msgline.2 msgline.3 msgline.4
  'SET RESERVED' endline-1-(numlines+2) 'OFF'
   do j = numlines to 1 by -1
     'SET RESERVED' endline-3-(numlines-j)   'OFF'
   end j
  'SET RESERVED' endline-2 'OFF'
  'RESTORE'                  /* Put all other XEDIT settings back. */
   parse source . subr .     /* How was this program called?       */
   if subr = 'FUNCTION'      /* As a Function?                     */
      then return pass       /* ..Yes. So pass back user's reply.  */
      else exit              /* ..No. So just get out of here.     */


SETCTLCH XEDIT

/*   SETCTLCH XEDIT - Find out and set XEDIT Control Character     */
/*                    Sequences for use with RESERVED lines.       */
/* 4 positional arguments, which are the same as those for the     */
/* SETCLTCH XEDIT command :-                                       */
/*   1 :- PROTECT/NOPROTECT       3 :- Extended Highlight          */
/*   2 :- Colour                  4 :- HIGH/NOHIGH                 */
/* Examples                                                        */
/*  input_field = SETCTLCH('NOPROTECT',,'HIGH')                    */
/*  endin_field = SETCTLCH('PROTECT',,'NOHIGH')                    */
/* 'SET RESERVED' n 'NOHIGH' input_field'_________'endin_field     */
/* or                                                              */
/*  prbh = SETCTLCH('PROTECT','RED','BLINK','HIGH')                */
   arg prot , colour , exthi , hi
   if prot   = '' then prot   = 'PROTECT'
   if colour = '' then colour = 'DEFAULT'
   if exthi  = '' then exthi  = 'NONE'
   if hi     = '' then hi     = 'NOHIGH'
   charstr = '$$+-{}@;:<>/?='     /* Special chars to choose from. */
  'EXTRACT /CTLCHAR/'             /* Find out what is already set. */
   if ctlchar.1 = 'ON' then do    /* Any control chars set?        */
      escape = ctlchar.2          /* ..Yes. So save Escape chars.  */
      ctls = ctlchar.3            /* Save list of control chars.   */
      ctl. = ''
      do i = 1 to words(ctls)     /* The one we want already set?  */
         ctl.i = word(ctls,i)     /* Get next character.           */
                                  /* Is it in our list of chars?   */
         poschar = pos(ctl.i,charstr)
         if poschar <> 0          /* ..Yes. So remove it from our  */
                                  /* list so we can't use it.      */
            then charstr = delstr(charstr,poschar,1)
        'EXTRACT /CTLCHAR' ctl.i'/' /* Attributes of this cont char*/
         if abbrev(ctlchar.1,prot)   , /* Do the attributes match  */
          & abbrev(ctlchar.2,colour) , /* the one we are after?    */
          & abbrev(ctlchar.3,exthi)  ,
          & abbrev(ctlchar.4,hi)
            then return escape''ctl.i  /* ..Yes. So pass it back   */
                                       /* to the calling program.  */
      end i
   end  /* end of if ctlchar.1 */
   else escape = '!'                   /* If no cont chars set,    */
                                       /* set default Escape char. */
  'SET CTLCHAR' escape 'ESCAPE'
   char = left(charstr,1)              /* Choose char from list.   */
  'SET CTLCHAR' char  prot colour exthi hi
return escape''char                    /* Pass back Escape sequence*/


J P Shelley
VM Systems Programmer
Mercantile & General (UK)

