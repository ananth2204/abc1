 Using the UPDATE command
Looking over the back issues of VM Update I see no sign that VMers are using the
UPDATE command for anything more than applying CP and CMS maintenance.  Perhaps
this is because the UPDATE command is both very powerful and very complex; it's
too much to learn to use it to do something simple.
Too bad - with XEDIT's support for creating the UPDATE change files, it's a
great tool for incremental development and maintenance of any kind of source
code or document.  By making it both easy and cheap on disk space, the UPDATE
command encourages saving each version of a program as you move along to adding
the next feature.  In development, it's easy to back out changes that have gone
wrong; in production, the chain of UPDATE change files provide an effective
audit trail.
Everyone who has applied local source modifications to CP or CMS will be
familiar with the use of UPDATE (although perhaps not with the XEDIT interface
to it); some use it to manage the local code 'DMKSYS' and DMKRIO'.  Even so,
they may not have realised how simple it is to use it for a restricted subset of
its functions.
This article presents a cookbook example to try, using a limited subset of
UPDATE to maintain a REXX EXEC.
WHAT UPDATE DOES
The UPDATE command is a batch program, documented in the CMS Command and Macro
Reference, which applies changes to a card-image source file, from card-image
'UPDATE change files' including both subcommands ('Insert', 'Replace', 'Delete')
and source.  It is based on 'sequence numbers' in columns 73-80.
The EXECUPDT command is a CMS EXEC, also documented in the CMS Command and Macro
Reference, which uses UPDATE to build executable EXECs and XEDIT macros from
UPDATE structures by applying the update change files, stripping off the
sequence numbers, and writing out a RECFM V EXEC or XEDIT file.
UPDATE change files may be created without learning the UPDATE subcommands at
all by using the UPDATE or CTL options of XEDIT; you think that you're editing
the full source file as usual, but XEDIT only stores the changes in the form
required by the UPDATE command.
WHERE IT'S USEFUL
UPDATE is good for developing and maintaining any kind of source code or
document that can fit into 72-column records, specifically:
y    Assembler programs - VMFASM calls UPDATE, and is partly why VM is so good.
y    REXX EXECs - that's what the EXECUPDT command is for.
y    SCRIPT documents - you'll have to become familiar with the 'continuation
character' to cope with the 72-column input, but XEDIT and EXECUPDT can do most
of the work for you.
y    PL/I, COBOL, FORTRAN, etc... you'll need to develop some of your own
support EXECs.
COOKBOOK: MAINTAINING REXX EXECS
1    Prepare two control files: one for the 'official' version, and one for
hacking around:
     PROD CNTRL:    TEXT MACS
          TEXT AUXEXEC
     TEST CNTRL:    TEXT MACS
          TEXT EXEC
          TEXT AUXEXEC
2    Modify your XEDIT profile so that filetypes $EXEC and $XEDIT are set to
RECFM F, LRECL 80, TRUNC 72, and SERIAL ALL 1000 1000
3    Create a short REXX called 'TESTER $EXEC', and ensure it has the correct
attributes (see item 2) before you file it.  It won't work just now: none of the
EXEC interpreters recognises that filetype.
4    Use the EXECUPDT command to create an executable version of 'TESTER $EXEC':
EXECUPDT TESTER EXEC (NOUPDATE.  This will read TESTER $EXEC, strip off the
serial numbers and trailing blanks, and write it out as TESTER EXEC, a RECFM V
file.  The (NOUPDATE option tells EXECUPDT that there are no changes to apply
yet.
     Look at the results, and try out TESTER EXEC.
5    Make your first incremental changes by editing TESTER $EXEC with the CTL
option:
     XEDIT TESTER $EXEC (CTL TEST
     You will notice that you are editing 'TESTER UPDTEXEC'.  Make some changes
and file it.
 6    Look at the change file you've just created:
     TYPE TESTER EXECUPDT
     That is what an UPDATE change file looks like - just the changes to the
original file.
7    Now create the executable version of the changed EXEC with:
     EXECUPDT TESTER EXEC (CTL TEST
     The CTL option tells EXECUPDT that there are UPDATE change files, and they
are defined by the rules laid down by the file 'TEST CNTRL'.
8    Look at the new file TESTER EXEC and verify that it reflects what you
thought you were creating with XEDIT.  Test it.
9    When you're happy with the results, secure the change file:
     RENAME RESTER UPDTEXEC A = UPD001 =
     Create an AUX file, 'TESTER AUXEXEC', with a single line identifying the
file type you've given to the change file:
     UPD001 - My very first update file
     (In a Change Control environment this is where you'd put the Change Request
Number.)  Create a 'production' executable version with:
     EXECUPDT TESTER EXEC (CTL PROD HISTORY
     The PROD CNTRL file only requests change files given 'names' and found in
AUXEXEC; if you had an UPDTEXEC file it would be ignored.  The HISTORY option
adds comments to the end of the REXX which provide an audit trail of the changes
going into this executable version.
10   You're now ready to start on a new update change file, for a new version.
Go back to editing using:
     XEDIT TESTER $EXEC (CTL TEST
     This edits or creates a new 'TESTER UPDTEXEC'.
11   When you secure the second change file, the entry goes in TESTER AUXEXEC as
line 1:
     UPD002 - My second update
     UPD001 - My very first update file
     AUXfile change files are applied from the bottom of the AUXfile up to the
top.
Always XEDIT using '(CTL TEST', which puts any changes in the current catch-all
update level, 'UPDTEXEC'.  If you XEDITed the file using '(CTL PROD', you find
yourself editing UPD002 - which should be a frozen, working level.
CONCLUSION
This gets you started using UPDATE for EXECs.  You probably don't need more of
the power of UPDATE for most of your uses P the multi-version control that VM
uses it for is of no interest to most of us.  What you do need is supporting
EXECs and XEDIT macros, and conventions and procedures for storing the many
files that using UPDATE inevitably results in.
Gary George
Technical Support Supervisor
Workers' Compensation Board of Alberta (Canada)        ) Xephon 1988






















