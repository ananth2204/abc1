 3270 I/O synchronisation (continued)
The QTS Library is a small set of Assembler subroutines for VM/CMS which
provides basic language-independent tools for synchronising IBM 3270 terminal
I/O operations.  This month we publish more of the programs that make up this
library.
QTSCONST COPY
* MACRO/COPY file QTSCONST
* Constants for the QTS family.
QTSNTFND DC   F'18901'                FND Couldn't find device.
QTSREACT DC   F'18902'                ADV Attempted reactivation.
QTSHNDAL DC   F'18903'                INT Handler already there.
QTSNAVAL DC   F'18904'                ADV No slots available.
QTSREDCT DC   F'18905'                ADV Attempted redeactivation.
QTSHNDNT DC   F'18906'                CLR Handler not active.
QTSNOCN1 DC   F'18907'                WFS No conditions to satisfy.
QTSMXCND DC   F'18908'                STC Too many conditions.
QTSBDCND DC   F'18909'                STC Invalid condition.
QTSNOADV DC   F'18910U                WFA No active devices.
QTSNOIN1 DC   F'18911'                WFS Timeout, still are conds.
QTSNOIN2 DC   F'18912'                WFA Timeout, still are conds.
QTSNOCN2 DC   F'18913'                WFA No conditions to satisfy.
QTSNOCN3 DC   F'18914'                RMC No conditions in queue.
*
QTSIBAD  EQU  18981                   Funny bits on.
QTSICE   EQU  18982                   Channel End.
QTSIDE   EQU  18983                   Device End.
QTSIATTN EQU  18984                   Attention.
*
QTSIUC   EQU  18985                   Unit check.
QTSIUE   EQU  18986                   Unit exception
QTSIPCI  EQU  18987                   Program controlled interruption.
QTSIBUSY EQU  18988                   Busy.
QTSIIL   EQU  18989                   Incorrect length.
QTSIPC   EQU  18990                   Program check.
QTSIPRC  EQU  18991                   Protection check.
QTSICDC  EQU  18992                   Channel data check.
QTSICCC  EQU  18993                   Channel control check.
QTSIICC  EQU  18994                   Interface control check.
QTSICC   EQU  18995                   Chaining check.
QTSICUE  EQU  18996                   Control unit end.

QTSENTER COPY
* MACRO/COPY file QTSENTER
* Prolog code.  Provides the subroutine linking from the caller.
* This version obeys the VS/FORTRAN calling convention, except that
*   it ignores the last-parameter bit.
         MACRO
&LBL     QTSENTER
&LBL     CSECT  ,
         DS    0H
         USING *,R15                   Addressability given us.
         B P&SYSNDX                    Branch around the name.
         DC    CL8' &LBL'              Subroutine name.
         DROP  R15
         DC    V(QTSVER)               Drag in the version.
P&SYSNDX STM   R14,R12,12(R13)         Save registers.
         LR    R12,R15                 Establish R12 addressability.
         USING &LBL,R12                Use R12 as base register.
         ST    R13,SAVEAREA+4          Save register 13.
         LA    R14,SAVEAREA
         ST    R14,8(,R13)             Chain save areas.
         LR    R13,R14
         LR    R11,R1                  Point to the input parms.
         USING INPARMS,R11             Access the input parms.
         PUSH  PRINT
         PRINT NOGEN
          REGEQU
         POP   PRINT
         MEND

QTSITAB COPY
* MACRO/COPY file QTSITAB
* Interrupt queue mapping.
         DS    0F
QTSITAB  DSECT                         Interrupt table definition.
QTSITOLD DS    1F                      Offset in table of oldest.
QTSITNEW DS    1F                      Offset in table of newest.
QTSITBEG EQU   QTSITNEW-QTSITAB+4      Offset of start of table.
QTSITLEN EQU   64                      Total length of the table.

QTSLEAVE COPY
* MACRO/COPY file QTSLEAVE
* Epilog code.  Provides the subroutine linking back to the caller.
         MACRO
&LBL     QTSLEAVE
&LBL     ORG    *
         L     R13,4(,R13)             Unlink the save areas.
         L     R14,12(,R13)            Restore R14.
         LM    R1,R12,24(R13)          Restore others except 0.
         BR    R14                     Return to caller.
         DS     0F
SAVEAREA DS     18F
         LTORG
         MEND

QTSCWT ASSEMBLE
* Interface Subroutine QTSCWT (console wait)
* Issues a CMS WAITT macro to wait for console I/O to finish.
* Syntax:  CALL QTSCWT
*   (Registers and parameter list are in the VS/FORTRAN convention.)
*   no parameters
* Calling this routine before starting to collect interrupts for
*   the console is generally a good idea, since otherwise CP might
*   have a few lines waiting to go out, or there might be a
*   few interrupts still coming down the tubes from the last line.
QTSCWT   QTSENTER                      Prolog.
         WAITT                         CMS standard macro.
         QTSLEAVE                      Epilog.
INPARMS  DSECT                         No parameters to this routine.
         END

QTSADV ASSEMBLE
* Interface Subroutine QTSADV (activate device)
* Activates a device so that interrupts will be queued for it.
* Syntax:  CALL QTSADV(IADDR, IFLAG, IERR)
*   (Registers and parameter list are in the VS/FORTRAN convention.)
*   IADDR  (INTEGER) is the device address to activate
*   IFLAG  (INTEGER) means:
*     For IFLAG = 0
*       if device is already active, no error and do nothing
*       if device is not active, it is activated
*     For IFLAG not 0
*       if device is already active, error results
*       if device is not active, it is activated
*   IERR   (returned INTEGER) see QTS Error Descriptions
* This routine must be called before any other operation may be
*   undertaken for the device.
* It doesn't matter if QTSINT or this routine is called first,
*   but no interrupts will accrue for any device until both are
*   called.
* Use IFLAG=0 when your software can't control itself from
*   activating devices.  This removes one nastiness which HNDINT
 *   had namely always complaining when you re-activate.
* Use IFLAG=1 when you want an error if your software is trying to
*   reactivate a device.
* Things to make it better:
*   - make it ADCON free
QTSADV   QTSENTER
         L     R3,IADDR                Point to the device address.
         L     R3,0(,R3)               Get the address itself.
         L     R15,=V(QTSFND)
         BALR  R14,R15                 CALL QTSFND.
         LTR   R15,R15                 Check QTSFNDUs return code.
         BE    ALREADY                 Oops, already there.
         C     R15,QTSNTFND            Wasn't found?
         BNE   EXIT                    No, something else, so quit.
         B     ALLOC                   Go ahead and allocate.
ALREADY  EQU   *                       Device already active.
         L     R15,IFLAG               Point to the flag.
         ICM   R15,15,0(R15)           Get it.
         BE    EXIT                    Flag is 0 so don't complain.
         L     R15,QTSREACT            Flag is not 0 so complain.
         B     EXIT
ALLOC    EQU   *                       Device not allocated yet.
         L     R15,QTSNAVAL            Maybe no slots available.
         LTR   R4,R4                   Point to the available slot.
         BE    EXIT                    Quit if none.
         USING QTSADB,R4               Address the block.
         ST    R3,QTSADBAD             Save virtual addr in the block.
         LA    R2,QTSADBIT             Point to the interrupt table.
         USING QTSITAB,R2              Address it.
         LA    R3,QTSITBEG             Initial at beginning.
         ST    R3,QTSITNEW             Initial new pointer.
         ST    R3,QTSITOLD             Initial old pointer.
         XR    R15,R15                 Good return code.
EXIT     EQU   *
         L     R2,IERR
         ST    R15,0(,R2)
         QTSLEAVE                      Epilog and return.
         COPY  QTSCONST                Family constants.
         COPY  QTSADB                  ADB data structure.
INPARMS  DSECT
IADDR    DS    1F
IFLAG    DS    1F
IERR     DS    1F
         END

QTSCKI ASSEMBLE
* Interface Subroutine QTSCKI (pop next interrupt)
* Check for and remove an interrupt from the queue of a device.
* Syntax:  CALL QTSCKI(IADDR, ICSW, IERR)
*   (Registers and parameter list are in the VS/FORTRAN convention.)
*   IADDR  (INTEGER) is the device address whose queue to check
*   ICSW   (returned INTEGER) is the second word of the top CSW
*          in the queue
*   IERR   (returned INTEGER) see QTS Error Descriptions
* ICSW might be returned 0, in case of no interrupts queued
* Never waits.
* Will always remove next interrupt from the queue for this device.
* Does not know or care about conditions or remarks.
* Things to make it better:
*   - make it ADCON free
QTSCKI   QTSENTER
         L     R3,IADDR                Point to the device address.
         L     R3,0(,R3)               Get the device address.
         L     R15,=V(QTSFND)          See if we can find it.
         BALR  R14,R15
         LTR   R15,R15                 Couldn't find it?
          BNE   EXIT                    Quit if any problem.
         XR    R15,R15                 Happy return code.
         USING QTSADB,R4               Address the ADB found.
         LA    R2,QTSADBIT             Point to the interrupt table.
         USING QTSITAB,R2              Address it.
         XR    R1,R1                   Possibly type 0.
         L     R3,QTSITOLD             Get address of oldest CSW.
         C     R3,QTSITNEW             Are newest and oldest the same?
         BE    EXIT                    If yes, there is nothing.
         LA    R3,4(,R3)               Up interrupt table pointer.
         C     R3,=A(QTSITLEN)         Compare to length of table.
         BM    SKIP1                   No wrap if still less.
         LA    R3,QTSITBEG             Wrap to table beginning.
SKIP1    EQU   *
         ST    R3,QTSITOLD             This is the new 'oldest'.
         L     R1,0(R3,R2)             Get the CSW out.
EXIT     EQU   *
         L     R2,ICSW                 Where to return the CSW.
         ST    R1,0(,R2)
         L     R2,IERR                 Where to return the error code.
         ST    R15,0(,R2)
         QTSLEAVE                      Epilog and return.
         COPY  QTSCONST                Family constants.
         COPY  QTSADB                  ADB data structure.
*
INPARMS  DSECT
IADDR    DS    1F
ICSW     DS    1F
IERR     DS    1F
         END

QTSCLR ASSEMBLE
* Utility Subroutine QTSCLR (clear interrupt handler)
* Clears the interrupt handler.
* Syntax:  CALL QTSCLR(IFLAG, IERR)
*   (Registers and parameter list are in the VS/FORTRAN convention.)
*   IFLAG  (INTEGER) means:
*     For IFLAG = 0
*       if handler is already inactive, no error and do nothing
*       if handler is active, it is cleared
*     For IFLAG not 0
*       if handler is already inactive, error results
*       if handler is active, it is cleared
*   IERR   (returned INTEGER) see QTS Error Descriptions
* This routine is rather like HNDINT CLR except all interrupt
*   handling for all devices is cleared.
* Active devices remain 'active', but of course no interrupt will
*   be queued for any of them.
* At this time, the interrupt handler code lives with the caller
*   in the 'user' area of CMS.  That means that you MUST clear
*   the interrupt handler with QTSCLR before your program quits,
*   because otherwise all interrupts will continue to cause
*   vectors into the user area, to where the handler had been,
*   even though another program may have been loaded there and
*   the interrupt probably will not be handled properly.
* Your program can safely quit while some devices remain active,
*   but not until the handler has been cleared by this routine.
* Use IFLAG=0 when your software can't control itself from
*   clearing the handler.  This removes one nastiness which HNDINT
*   had, namely always complaining when you re-clear.
* Use IFLAG=1 when you want an error if your software is trying to
*   re-clear the handler.
* If everything goes well in this routine, it will call QTTCLR
*   to clear the clock handler.
* Things to make it better:
*   - make it ADCON free
 * Subroutines called:
*   - QTTCLR to clear the timer handler
         PUSH  PRINT
         PRINT NOGEN
         NUCON                         CMS/CP Nucleus constants.
         POP   PRINT
         USING NUCON,0
QTSCLR   QTSENTER
         XR    R1,R1
         LM    R1,R2,IONPSW            See what handler is there.
         CLM   R2,7,=VL3(QTSHAND)      Compare it to ours
         BE    CLEAR                   Go on if it is.
         L     R15,IFLAG               Point to the flag.
         ICM   R15,15,0(R15)           Get the flag itself.
         BE    TCLEAR                  DonUt worry about it if flag=0.
         L     R15,QTSHNDNT            Else give error.
         B     EXIT
CLEAR    EQU   *                       OK to insert the CMS handler.
         L     R2,=V(QTSCMSIO)         Point to it.
         DMSEXS MVC,IONPSW(8),0(R2)    Replace it with the CMS PSW.
TCLEAR   EQU   *                       Clear the timers.
         L     R1,IFLAG                Put IFLAG in CLRUs parms.
         ST    R1,CLRIFLAG
         LA    R1,CLRPARMS             Point to CLR's parms.
         L     R15,=V(QTTCLR)          Call CLR.
         BALR  R14,R15                 Clears the timers.
         L     R15,CLRIERR             Return error from it.
EXIT     EQU   *
         L     R2,IERR
         ST    R15,0(,R2)
         QTSLEAVE                      Epilog and return.
         COPY  QTSCONST                Family constants.
CLRPARMS DS    0F                      Parms for CLR.
CLRIFLAG DS    1F
         DC    AL4(CLRIERR)
CLRIERR  DS    1F
*
INPARMS  DSECT
IFLAG    DS    1F
IERR     DS    1F
         END

QTSCPC ASSEMBLE
* Interface Subroutine QTSCPC (do a CP command)
* Do a CP command and return the code.
* Syntax: CALL QTSCPC(CMD, IERR, <LENGTH>)
*   (Registers and parameter list are in the VS/FORTRAN convention.)
*   CMD    (array length LENGTH of CHARACTER) the command
*   IERR   (returned INTEGER) from the CP command
*   LENGTH (INTEGER) the length of CMD, may be excluded if the
*          VS/FORTRAN inherited length of the CHARACTER variable CMD
*          is to be used.
* Uses DIAGNOSE x'08'
* This is useful for doing READYs and RESETs, as well as
*   DEFINEs and DETACHes.
* Things to make it better:
*   - make it ADCON free
RX       EQU   4
RY       EQU   6
QTSCPC   QTSENTER                      Prolog.
         L     RX,CPCMD                Point to the command.
         L     RY,CMDLEN               Point to the length.
         L     RY,0(,RY)               Get the length itself.
         ICM   RY,B'1000',=XL1'40'     Say do to it quietly.
         LA    RX+1,JUNK               No output buffer.
         LA    RY+1,L'JUNK             No output buffer length.
          DIAG  RX,RY,X'0008'           Do the diagnose.
         L     R1,IERR                 Where to return the code.
         ST    RY,0(,R1)
         QTSLEAVE
JUNK     DS    1C                      Don't care about response text.
INPARMS  DSECT                         Input parms.
CPCMD    DS    1F
IERR     DS    1F
CMDLEN   DS    1F
         END
























































