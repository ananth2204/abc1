 Batch EXEC

As our usage of CMS batch increased for production applications our users began
to complain of long delays.  A function was needed to determine what job was
currently running in a CMS batch virtual machine.

I developed a REXX EXEC that gathers information from the VMBLOK and ACNTBLOK.
The EXEC returns the user-id and account fields of the /JOB control card.  This
allows us to identify the owner of the job.  The EXEC was developed under
VM/SP3;  however, I am sure it will work on release 2 or 4.

The EXEC has two parameters.  The first is the userid of the batch virtual
machine and is mandatory.  The second, 'LIST', is optional and when included
will list the jobs queued in the virtual reader of the batch virtual machine.
The LIST option can be helpful if Operations wants to share or schedule the use
of the batch virtual machine.  The ORDER RDR command can be used to arrange the
jobs in the desired run order.  The TRANSFER command can be used to move jobs
between multiple batch virtual machines, thus giving some control over batch
runs.

/*  SEE WHATS RUNNING IN A BATCH VIRTUAL MACHINE */
ARG USERID LISTSW
IF USERID = '' THEN DO                      /* CHECK FOR REQUIRED PARAMETER  */
   SAY 'FORMAT IS: BATCH USERID LIST'
   SAY '      LIST  IS AN OPTIONAL PARAMETER THAT LISTS THE RDR QUEUE'
   EXIT 4
   END
/* NUMBER OF FILES QUEUED IN RDR */
'EXECIO 1 CP (STRING QUERY FILES ' USERID   /* GET NO. OF FILE IN RDR QUEUE  */
PULL . RDRFLS . . .
IF RDRFLS = 'NO' THEN RDRFLS = 000          /* SET TO ZERO IF NO FILES       */
/* LOCATE VMBLOK */
CALL VLOCATE USERID                         /* LOCATE USER'S VMBLOK ADDRESS  */
IF AVMBLOK = '00000000' THEN DO             /* CHECK FOR VALID ADDRESS       */
   SAY 'NO INFORMATION AVAILABLE FOR THIS USER - ID NOT LOGGED ON'
   SAY 'NUMBER OF FILES QUEUED IN RDR -' RDRFLS
   IF LISTSW = 'LIST' THEN IF RDRFLS B= 000 THEN DO  /* CHECK FOR LIST PARM  */
      QUEUE 'QUERY RDR ' USERID 'ALL'       /* LIST QUEUED RDR FILES         */
   END
   EXIT 12
END
VNAME = HEXADD(AVMBLOK,110)                 /* SET ADDR LOC OF USERID FIELD  */
'EXECIO 1 CP (STRING DCP ' ||VNAME||'.8'    /* GET USERID OF BATCH MACHINE   */
PULL . PART1 PART2
LINE = SUBSTR(PART1,1,8)                    /* ASSEMBLE USERID               */
LINE = LINE||SUBSTR(PART2,2,8)
NAME = X2C(LINE)                            /* CONVERT USERID FROM HEX       */
/* LOCATE ACNTBLOK */
AVMACNT = HEXADD(AVMBLOK,168)               /* SET ADDR LOC OF ACNTBLOK ADDR */
'EXECIO 1 CP (STRING DCP ' ||AVMACNT        /* GET ADDRESS OF ACNTBLOK       */
PULL . AACNT .
IF AACNT = '00000000' THEN DO               /* CHECK FOR VALID ADDRESS       */
   SAY 'NO ACCOUNT INFO - NO JOB RUNNING'
   SAY 'NUMBER OF FILES QUEUED IN RDR -' RDRFLS
   IF LISTSW = 'LIST' THEN IF RDRFLS  ¬= 000 THEN DO /* CHECK FOR LIST PARM  */
      QUEUE 'QUERY RDR ' USERID 'ALL'       /* LIST QUEUED RDR FILES         */
   END
   EXIT 8
END
/* GATHER ACNT INFORMATION */
AACNT = SUBSTR(AACNT,3,6)                   /* SET ADDR OF ACNTBLOK          */
'EXECIO 1 CP (STRING DCP ' ||AACNT||'.16'   /* GET USER ACCOUNT INFORMATION  */
PULL . P1 P2 P3 P4 . . . .
PA = X2C(P1)                                /* CONVERT USERID FROM HEX       */
PB = X2C(P2)                                /* TO CHARACTER                  */
ACNTUSER = PA||PB                           /* ASSEMBLE USERID               */
 PC = X2C(P3)                                /* CONVERT ACCOUNT FROM HEX      */
PD = X2C(P4)                                /* TO CHARACTER                  */
ACNTNUM = PC||PD                            /* ASSEMBLE ACCOUNT              */
/* RETURN INFORMATION */
SAY 'JOB FOR -' ACNTUSER '  ACCOUNT -' ACNTNUM '  IN BATCH ID -' NAME
SAY 'NUMBER OF FILES QUEUED IN RDR -' RDRFLS
IF LISTSW = 'LIST' THEN IF RDRFLS  = 000 THEN DO  /* CHECK FOR LIST PARM     */
   QUEUE 'QUERY RDR ' USERID 'ALL'          /* LIST QUEUED RDR FILES         */
END
EXIT 0
/* HEX ADDITION SUBROUTINE */
HEXADD:                                     /* ROUTINE TO DO HEX ADDITION    */
ARG BASE1,DISP1
RETURN D2X(X2D(BASE1)+X2D(DISP1))
/* LOCATE VMBLOK SUBROUTINE */
VLOCATE:                                    /* ROUTINE TO LOCATE VMBLOK OF   */
ARG USERID                                  /* BATCH VIRTUAL MACHINE         */
'EXECIO 1 CP (STRING LOCATE ' USERID        /* LOCATE VMBLOK                 */
IF RC¬= 0 THEN DO                           /* CHECK RETURN CODE FROM LOCATE */
   DESBUF
   AVMBLOK='00000000'                       /* IF NOT FOUND SET TO ZERO      */
   RETURN
   END
PULL . . AVMBLOK                            /* IF FOUND LOAD VMBLOK ADDRESS  */
RETURN

Thomas S Kohser
System Programmer
Pitt-Des Moines Inc (USA)     ) Pitt-Des Moines Inc 1987





































