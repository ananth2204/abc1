Show statistics for a column of numbers

Nearly everyone who uses CMS finds times when he is looking
at a report that contains columns of numbers. It is often
desirable to know the total, average, or other statistical value
for them. This XEDIT macro provides that capability. It shows
the total, average, minimum, and maximum values for a
column of numbers which is defined by the operator. In doing
so, it tolerates non-numeric values like those often found in
headings and other 'garbage' lines. A format option allows
several different kinds of numbers to be used and converted
from one to the other.

The XEDIT macro is invoked by entering:

      COLSTAT target startcol length <format> <Input>

where target defines the number of lines to be processed.
However, it cannot include spaces even if enclosed in quotes.
Startcol is the first byte in the column of numbers. Length is
the number of bytes (width) of the column of numbers. Format
is the format of the input (file lines) and output (as displayed).
It is in the format 'i2o' (to imitate REXX), where i describes
the input. This may be one of the following: C - character (ie
bytes) will be converted to decimal using the REXX C2D
function; D - decimal (ie EBCDIC decimal digits); G -
garbage decimal (tolerates commas anywhere); T - time in
hh:mm:ss, or mm:ss, or :ss, or ss format; X-  hexadecimal (ie
EBCDIC hexadecimal digits). O describes the output. This
may be one of the following: D - decimal; T - time in
hh:mm:ss format; or X - hexadecimal. The default format is
D2D. Input indicates that the calculated values are to be
inserted in new records into the file itself. They are placed after
the last line examined. The first three parameters are truly
positional. Subsequent parameters (options, actually) may
appear in any order.

/*              Show Statistics for a Column of Numbers               */
/*  Edit the parameters                                               */
parse arg target startcol length options
if target = '?' | target = '' then do
   MSG 'COLSTAT target startcol length <i2o> <Input>'
  MSG '   i: C=char (byte)  D=decimal  G=garbage decimal  T=time  X=hexadecimal'
   MSG '   o: D=decimal (with commas)  T=time  X=hexadecimal'
   call exit 0
   end
/*  While you might think it would be a good idea to PARSE the target,
    no matter what data I use, PARSE always seems to think it's valid
    and sets return code zero.                                        */
if ¬ datatype(startcol,'W') | startcol < 1 then
   call exit '1 The starting column must be a positive integer'
if ¬ datatype(length,'W') | length < 1 then
   call exit '2 The length must be a positive integer'
EXTRACT '/LRECL/'
if startcol + length - 1 > lrecl.1 then
   call exit '3 Starting column + length is greater than LRECL'
stack_parms = target startcol length           /*  Assume this is OK  */
/*  Edit the options                                                  */
 input_format = 'D'                       /*  Set the default values  */
output_format = 'D'
option_input  = 0
upper options
do while options ¬= ''
   parse var options x options
   select
      when abbrev('INPUT',x,1) then
         option_input = 1
      when pos('2',x) = 2 then do                    /*  format: x2x  */
         parse var x x1 2 . 3 x2                             /*  i2o  */
         if length(x) = 3 & pos(x1, 'CDGTX') > 0 & pos(x2, 'DGTX') > 0
                                                                 then do
             input_format = x1
            output_format = x2
            end
         else
            EMSG 'Invalid format value "' || x || '" - D2D assumed'
         end   /*  x2x  */
      otherwise
         EMSG 'Invalid COLSTAT option "' || x || '" - Ignored'
   end   /*  select  */
end
/*  Preliminaries                                                     */
numeric digits 9    /*  Should we make this dependent upon "length"?  */
blank_values       = 0
char_max           = copies('00'x,length)
char_min           = copies('FF'x,length)
max                = -999999999                /*  cf numeric digits  */
min                = +999999999
non_numeric_values = 0
numeric_values     = 0
total              = 0
EXTRACT '/LINE/'                       /*  Remember where we started  */
original_queued = queued()
MAKEBUF
STACK stack_parms
/*  Determine the total, minimum and maximum                          */
do queued() - original_queued
   parse pull x
   select
      when x = '' then
         blank_values = blank_values + 1
      when input_format = 'C' then /*Any value is valid (except blank)*/
         call update_min_max_total 'C2D'(x)
      when input_format = 'D' & 'DATATYPE'(x,'N') then
         call update_min_max_total x
      when input_format = 'G' & 'DATATYPE'(ungarbage(x),'N') then
         call update_min_max_total x
                                 /*"x" has been updated by "ungarbage"*/
      when input_format = 'T' & 'DATATYPE'(time2seconds(x),'N') then
         call update_min_max_total x
                          /*  "x" has been updated by "time2seconds"  */
      when input_format = 'X' & 'DATATYPE'(x,'X') & ,
         'WORDS'(x) = 1 then         /*  Don't allow imbedded blanks  */
         call update_min_max_total 'X2D'(x)
      otherwise
         non_numeric_values = non_numeric_values + 1
         if x < char_min then
            char_min = x
         if x > char_max then
            char_max = x
   end   /*  select  */
end
/*  Determine the format to be used for INPUT lines                   */
desc_length = 7 + 1
   /*  Maximum length of all line descriptors plus a following space  */
if desc_length < startcol then
                     /*  The descriptor fits before the data columns  */
   desc_start = 1
else
   desc_start = startcol + length + 1
                                   /*  Hopefully will end <= lrecl.1  */
/*  Show the results                                                  */
if numeric_values > 0 then do
   average = total / numeric_values
   select
      when output_format = 'D' then do
                  /*  Inserting commas makes it similar to 'G' input  */
         total   = commas(total)
         average = commas(average)
         min     = commas(min)
         max     = commas(max)
         end
      when output_format = 'T' then do
         total   = seconds2time(total)
         average = seconds2time(average)
         min     = seconds2time(min)
         max     = seconds2time(max)
         end
      otherwise                                                /*  X  */
         total   = d2x(total)
         average = d2x(format(average,9,0))
                                        /*Round to the nearest integer*/
         min     = d2x(min)
         max     = d2x(max)
   end   /*  select  */
   call input_a_line 'Total  ', total
   call input_a_line 'Average', average
   call input_a_line 'Minimum', min
   call input_a_line 'Maximum', max
   x = '  Min =' min '  Average =' average '  Max =' max
   end   /*  Something was numeric  */
else
   x = '  Min =' char_min '  Max =' char_max
MSG 'Total of' numeric_values 'values =' total x
if blank_values > 0 then
   MSG 'There are' blank_values 'lines which contain blanks'
if non_numeric_values > 0 then
   MSG 'There are' non_numeric_values 'lines which contain non-numeric values'
LOCATE ':'line.1                /*  Restore the orginal current line  */
exit 0
/*                         Subroutines                                */
/*  Insert commas into a number                                       */
commas:
parse arg number, width
numeric digits 12          /*  supports up to 3 commas in the output  */
if ¬ datatype(number,'W') then
   return number
/*  The following statement also removes leading and trailing spaces
    and zeroes and (if possible) exponential notation                 */
abs_number = abs(number)
/*  A number with a decimal point cannot be processed by this EXEC.
    This is true even if it is a "whole" number (see above).  It is
    especially true if it is (still) in exponential notation.         */
if pos('.',abs_number) > 0 then
   return number
length = length(abs_number)
if length > 12 then                    /*  must match numeric digits  */
   return number                 /*  That's too big for me to handle  */
select
   when length < 4 then                                /*  no commas  */
      x = abs_number
   when length < 7 then                                 /*  1 comma   */
      x = insert(',',abs_number,length-3)
   when length < 10 then                                /*  2 commas  */
      x = insert(',',insert(',',abs_number,length-3),length-6)
   otherwise                                            /*  3 commas  */
      x = insert(',',insert(',',insert(',',
                                abs_number,length-3),length-6),length-9)
end
if number < 0 then
   x = '-' || x
if width = '' then
   return x
else
   return right(x,width,' ')
/*  Exit                                                              */
exit:
parse arg exit_rc final_message
if final_message ¬= '' then
   MSG final_message
exit exit_rc
/*  INPUT a line into the file (if the INPUT option was specified).
    There are numerous things which can cause the output to be less
    than satisfactory.  But how much time is it worth spending to
    deal with each situation?                                         */
input_a_line:
parse arg descriptor, value
if ¬ option_input then
   return
line = copies(' ', lrecl.1)                /*  never > 255-6  Right?  */
x = startcol + length - length(value)  /*  starting column for value  */
x = max(x,1)                    /*  Don't attempt to use columns < 1  */
line = overlay(value,line,x)
                           /*  Place the value in the proper columns  */
line = overlay(descriptor,line,desc_start)
INPUT line
return
/*  Convert seconds to hhhh:mm:ss                                     */
seconds2time:
arg seconds
seconds = trunc(seconds)
hhhh = seconds % 3600; seconds = seconds - hhhh * 3600
mm   = seconds %   60; ss      = seconds -   mm *   60
return hhhh':'right(mm,2,0)':'right(ss,2,0)
/*  Convert hh:mm:ss to seconds.  Note that "x" is normally changed
    (for the benefit of the caller) and matches the function value.   */
time2seconds:
arg time
time = 'STRIP'(time)
seconds = 0
do 3 while time ¬= ''                              /*  0 to 2 colons  */
   parse var time x ':' time
   if x = '' then                              /*  Assume it's ":ss"  */
      iterate
   if 'VERIFY'(x,'0123456789') > 0 then
      return 'junk'
   seconds = seconds * 60 + x
end
if time ¬= '' then                              /*  3 or more colons  */
   return 'junk'
x = seconds
return x
/*  Remove garbage characters from a number.  Note that "x" is changed
    (for the benefit of the caller) and matches the function value.   */
ungarbage:
arg x
x = space(translate(x,' ',','),0)
/*  Get rid of all commas  Spaces are elminated for free  */
return x
/*  Update the minimum, maximum, and totals                           */
update_min_max_total:
arg x                                     /*  a valid decimal number  */
numeric_values = numeric_values + 1
min = 'MIN'(min,x)
max = 'MAX'(max,x)
total = total + x
return


Dave Fraatz
Specialist
3M

