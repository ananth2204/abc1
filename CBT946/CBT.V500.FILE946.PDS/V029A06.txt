 Obtaining an unused virtual address
The following program will retrieve an unused virtual address and filemode and
pass it back to the calling program.  A more detailed explanation can be found
in the help code at the bottom of the program.
This program was written for VM/HPO 4.2.
GETFMADR
         REGEQU
GETFMADR CSECT
         PRINT GEN
         BALR  R3,0                load base register
         USING *,R3                and tell assembler
         USING NUCON,0             NUCON is in low core
         ST    R14,SAV14           save return REG
         L     R12,ADEVTAB         load base for DEVTAB
         USING DEVTAB,R12          and tell assembbler
         LR    R8,R1               save parms reg
         USING PARMLIST,R8         tell assembler
         CLI   PARM,X'FF'          any parms ?
         BE    NOPARMS             no - assume defaults
         CLI   PARM,C'?'           does he need help ?
         BE    HELP                yes - go give it to him
DEVPARM  DS    0H                  device address given
         MVC   CRADDR+1(3),PARM    put addr in its place
         LA    R9,CRADDR           and point to it
TRANS    DS    0H
         CLI   0(R9),X'15'         end of line ?
         BE    FINT                yes - go set string
         CLI   0(R9),C'0'          is this a valid digit ?
         BNL   NOFIX               yes - no fix required
         IC    R1,0(,R9)           load byte to be fixed
         LA    R1,9(,R1)           and make it 'A' thru 'F'
         STC   R1,0(,R9)           save it for later
NOFIX    DS    0H
         LA    R9,1(,R9)           point to next byte
         B     TRANS               do it again
FINT     DS    0H
         PACK  FRADDR(2),CRADDR(4)  pack out high order half-bytes
*              CHASE THE DEVTABS
NOPARMS  DS    0H
         LA    R11,26              load max filemodes
LOOPFM   DS    0H
         LA    R12,16(,R12)        point to next (or first) entry
         CLC   0(4,R12),=F'0'      is there no device for this ?
         BE    GOTITFM             yes - we have found it
         BCT   R11,LOOPFM          no - go check next one (if any
         B     NOMODES             are left) else issue error
*   FM LOCATED
GOTITFM  DS    0H
         BCTR  R11,R0              make relative to zero
         LA    R10,LTRTAB          load start of filemode table
         AR    R10,R11             add displacement
         MVC   STKFM,0(R10)        save filemode
*  FIND VIRTUAL DEV ADDR
         DROP  R12                 we don't need you anymore
         SR    R10,R10             clear REG 10
         LH    R10,FRADDR          load starting address + sign
         SRL   R10,4(R0)           remove sign
         LA    R9,X'600'           load ending address + 1
LOOPADR  DS    0H
         DIAG  R10,R11,X'24'       is it there ?
         BC    1,GOTITADR          no - we found it
         LA    R10,1(,R10)         load next address
         CR    R10,R9              end of line ?
         BH    NOTFOUND            yes - issue error
         B     LOOPADR             no - go check another
*   VIRTUAL DEV ADDR FOUND
 GOTITADR DS    0H
         ST    R10,FNDADDR         save address we found
         LA    R10,2               and go convert
         LA    R11,FNDADDR+2       it to something
         LA    R12,NEWADDR         that he
         BAL   R9,HEX2EBC          can read
         MVC   STKADDR,NEWADDR+1   put readable address in line
         LA    R1,STACKER          to be stacked and go tell
         SVC   202                 CMS to stack it
         DC    AL4(ERROR)          only on an error
*              END OF JOB
EOJ      DS    0H
         SR    R15,R15             no errors
ERROR    DS    0H
         L     R14,SAV14           load REG14
         BR    R14                 goback to CMS ( or wherever)
*     CONVERT HEX TO EBCDIC
*        R10 - LENGTH
*        R11 - INPUT  STRING
*        R12 - OUTPUT STRING
HEX2EBC  DS    0H
         TRT   0(0,R11),ZONETBL    translate zone
         STC   R2,0(,R12)          and save it
         TRT   0(0,R11),NUMTBL     translate numerics
         STC   R2,1(,R12)          and save it
         LA    R11,1(,R11)         next
         LA    R12,2(,R12)         next
         BCT   R10,HEX2EBC         go do it
         BR    R9                  go home
ZONETBL  DC    16X'F0',16X'F1',16X'F2',16X'F3',16X'F4',16X'F5',16X'F6'
         DC    16X'F7',16X'F8',16X'F9',16X'C1',16X'C2',16X'C3',16X'C4'
         DC    16X'C5',16X'C6'
NUMTBL   DC    16X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*   VIRTUAL ADDRESS NOT LOCATED
NOTFOUND DS    0H
         MVI   STKFM,C'?'          this
         MVC   STKADDR,=CL3'???'   is a
         MVC   STKERR,=CL3'???'    pretty
         LA    R1,STACKER          nasty
         SVC   202                 error
         DC    AL4(ERROR)          only on an error
         LA    R15,8               load return code
         B     ERROR               and exit
*   NO FILEMODES AVAILABLE
NOMODES  DS    0H
         MVI   STKFM,C'Z'          no modes
         LA    R10,2               are
         LR    R11,R12             available
         LA    R12,NEWADDR         so
         BAL   R9,HEX2EBC          tell
         MVC   STKADDR,NEWADDR+1   him
         MVC   STKERR,NEWADDR+1    who
         LA    R1,STACKER          'Z'
         SVC   202                 is
         DC    AL4(ERROR)          only on an error
         LA    R15,4               load return code
         B     ERROR               and exit
SAV14    DS    F                   REG14 save area
FNDADDR  DS    F
NEWADDR  DC    CL4' '
         DS    0F
CRADDR   DC    X'F0F0F0F0'   EBCDIC SOURCE
         DC    X'15'
         DS    0F            ALIGN FOR A FULLWORD
FRADDR   DS    0H
         DC    X'120F'
          DS    CL1           THIS EXTRA BYTE NEEDED FOR PACK
LTRTAB   DC    CL26'ZYXWVUTSRQPONMLKJIHGFEDCBA'
ENDADDR  DS    0F
         DC    X'00000600'
STACKER  DS    0D
         DC    CL8'ATTN'
STKOPT   DC    CL4'LIFO'
         DC    AL1(STKLEN)
         DC    AL3(STKLINE)
STKLINE  DS    0C
         DC    CL2'* '
STKFM    DC    CL1' '
         DC    CL1' '
STKADDR  DC    CL3' '
         DC    CL1' '
STKERR   DC    CL3' '
STKLEN   EQU   *-STKLINE
         LTORG
*   H E L P
HELP     DS    0H
         LA    R10,HELPSTRT
         LA    R11,HELPLINZ
HELPLOOP DS    0H
         WAITT
         LA    R10,HELPLEN(,R10)
         WRTERM (10),HELPLEN
         BCT   R11,HELPLOOP
         LA    R15,100
         B     ERROR
HELP1    DC    C'                                                     '
HELPLEN  EQU   *-HELP1
HELPSTRT EQU   HELP1-HELPLEN
         DC    C'The command format for this MODULE is:             '
         DC    C'                                                   '
         DC    C'    GETFMADR < ? Â¨ start-address >                 '
         DC    C'                                                   '
         DC    C'      ? = Help                                     '
         DC    C'      start-addr sets virtual device start address '
         DC    C'                                                   '
         DC    C'                                                   '
         DC    C'This module stacks a line in the format:           '
         DC    C'                                                   '
         DC    C'     ast fm vdasd <zdasd>    where                 '
         DC    C'                                                   '
         DC    C'         ast   = *                                 '
         DC    C'         fm    = first free filemode or Z          '
         DC    C'         vdasd = first free virtual address or ??? '
         DC    C'                                                   '
         DC    C'    If no filemodes are available then             '
         DC    C'                                                   '
         DC    C'         zdasd = the current disk accessed as Z    '
         DC    C'                                                   '
         DC    C'If no virtual addresses are available, the stacked '
         DC    C'line is in the form:                               '
         DC    C'    * ? ??? ???                                    '
HELPLINZ EQU   (*-HELP1)/HELPLEN
         LTORG
         NUCON
         DEVTAB
PARMLIST DSECT
         DS    CL8
PARM     DS    CL8
         END   GETFMADR
Michael Kilroy
Systems Programming Supervisor
Progress (USA) ) Xephon 1989


































































