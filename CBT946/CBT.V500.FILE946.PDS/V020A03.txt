 CMS file I/O from high-level languages
High-level language programs can be made to perform significantly better by
calling the CMS file system directly instead of using the OPEN, READ, WRITE,
CLOSE verbs provided by the languages.  By using these sub-routines instead of
the native I/O in some large PL/I programs, the time elapsed can be reduced by a
factor of 10 to 20.
The high-level language compilers running under VM/CMS generate code to
interface with the OS file access mechanisms, eg BSAM, BDAM etc.  CMS has
routines to simulate these access mechanisms.  This simulation accounts for
extra overhead when processing files.  By writing subroutines that access CMS
files directly this overhead is reduced.
CMS files can be accessed directly by record number or sequentially from a
specific record number.  The subroutines below enable this to be done by simply
executing the CMS file I/O macros.  Three subroutines are shown which are
representative of a larger set that includes routines to call FSOPEN and FSWRITE
and perform variable length record handling.  It is a fairly simple matter to
create the complete set by examining the three below.  The code for the SUBENT
and SUBEXIT macros is not shown to save space.  These macros do the usual R13
save area saving and chaining and most installations have some local equivalent.
FSNEW
*        This subroutine creates a new CMS file. If a file with the
*        same fileid exists it is erased. The file will be created
*        with the supplied LRECL and RECFM.
* PL/I calling sequence:
*   DCL  FSNEW   EXTERNAL ENTRY(CHAR(8),
*                               CHAR(8),
*                               CHAR(2),
*                               POINTER,
*                               FIXED BIN(31),
*                               CHAR(1),
*                               FIXED BIN(31))
*                         OPTIONS(ASM INTER);
*   DCL FNAME   CHAR(8);       /* FILE NAME */
*   DCL FTYPE   CHAR(8);       /* FILE TYPE */
*   DCL FMODE   CHAR(2);       /* FILE MODE */
*   DCL @FSCB   POINTER;       /* POINTER TO FILE FSCB */
*   DCL LRECL   FIXED BIN(31); /* LRECL OF FILE */
*   DCL RECFM   CHAR(1);       /* RECFM OF FILE */
*   DCL RC      FIXED BIN(31); /* RETURN CODE */
*   CALL FSNEW  (FNAME,FTYPE,FMODE,@FSCB,LRECL,RECFM,RC);
* RC IS SET AS FOLLOWS:
*   0         OK
*   4         DMSFREE for FSCB failed.
*   1XX       Return code from FSOPEN is XX.
*   2XX       Return code from FSERASE is XX.
*   3XX       Return code from DMSFRET is XX.
FSNEW    CSECT ,
         SUBENT ,                  The usual stuff.
         B     START
         DC    C'COPYRIGHT 1986, 1987'
         CNOP  0,4
START    EQU   *
         LR    R2,R1               Save plist address.
         LM    R3,R6,0(R2)         Ptrs to fileid & fscb
         LA    R7,FSCBDL           Allocate our own variable store
         LA    R7,7(R7)            Round up to make
         SRL   R7,3                 into doublewords
         LR    R0,R7                  for DMSFREE
         DMSFREE DWORDS=(0),TYPE=USER   Free the storage.
         LTR   R15,R15             Set cc.
         BNZ   EXIT                Leave
         ST    R1,0(R6)            Store @FSCB
         LR    R10,R0              Length of FSCB
         LR    R11,R1              Address of FSCB
         USING FSCBD,R11           Address it.
         SPACE ,
          MVC   FSCBFN(8),0(R3)     Move in the filename
         MVC   FSCBFT(8),0(R4)     Move in the filetype
         MVC   FSCBFM(2),0(R5)     Move in the filemode
         SPACE ,
         FSERASE FSCB=(R11)        Bye bye
         LTR   R15,R15             Set cc
         BZ    OPEN                It was erased
         C     R15,=F'28'          File not there?
         BE    OPEN                OK too.
         LA    R15,200(R15)        Add 200 to rc.
         B     FREEFSCB            Free the FSCB B4 you go.
         SPACE ,
OPEN     EQU   *
         LM    R3,R5,16(R2)        Ptrs to LRECL RECFM RC
         MVC   FSCBSIZE(4),0(R3)   Move in LRECL to FSCB
         MVC   FSCBFV(1),0(R4)     Move in RECFM to FSCB
         FSOPEN FSCB=(R11),FORM=E
         C     R15,=F'28'          This is ok
         BE    SETRC
         LTR   R15,R15             Success?
         BZ    EXIT                Yep
         B     FREEFSCB            Go home - error
SETRC    EQU   *
         LA    R15,0               Reset rc
         B     EXIT                Leave
         SPACE ,
FREEFSCB EQU   *
         LR    R6,R15              Save rc
         LR    R0,R10              Restore buffer length
         LR    R1,R11              Restore buffer address
         DMSFRET DWORDS=(0),LOC=(1)
         LTR   R15,R15             Set cc
         BZ    RESRC               Restore real rc
         LA    R15,300(R15)        Add 300 to return code from FRET
         B     EXIT                Out
RESRC    EQU   *
         LR    R15,R6              Restore rc
EXIT     EQU   *
         ST    R15,0(R5)           Store as return code
         SUBEXIT ,                 Home to mum
         FSCBD
FSCBDL   EQU   *-FSCBD        FSCB LENGTH
         END

FSREAD
*      This subroutine reads a specified record from a CMS file. The
*      file must have been opened with the FSOPEN or FSNEW subroutine.
*      A pointer to the FSCB for the file and a buffer must be
*      passed to FSREAD.
*        NOTE: No checking is done for the correct LRECL, RECFM,
*        etc. The buffer passed must therefore be long enough to
*        receive the record from the file, otherwise potentially
*        bad results could occur.
* PL/I calling sequence:
*   DCL  FSREAD  EXTERNAL ENTRY(POINTER,
*                               CHAR(*),
*                               FIXED BIN(31),
*                               FIXED BIN(31))
*                               FIXED BIN(31))
*                         OPTIONS(ASM INTER);
*   DCL @FSCB   POINTER;       /* Pointer to file FSCB */
*   DCL BUFFER  CHAR(*);       /* Read buffer */
*   DCL RECNO   FIXED BIN(31); /* Number of record to read */
*   DCL RECNUM  FIXED BIN(31); /* Number of records to read */
*   DCL RC      FIXED BIN(31); /* Return code */
*   CALL FSREAD (@FSCB,BUFFER,RECNO,RECNUM,RC);
 * RC set as follows:
*   0         OK
*   n         Return code from FSREAD.
FSREAD   CSECT
         SUBENT ,                  The usual stuff
         B     START
         DC    C'COPYRIGHT 1986, 1987'
         CNOP  0,4
START    EQU   *
         LM    R2,R6,0(R1)         Pointers to parameters
         L     R11,0(R2)           Get FSCB address.
         USING FSCBD,R11           Address it.
         ST    R3,FSCBBUFF         Load buffer address.
         MVC   FSCBAITN(4),0(R4)   Load record number.
         MVC   FSCBANIT(4),0(R5)   Load number of records.
         FSREAD FSCB=(R11),FORM=E
         ST    R15,0(R6)           Store as return code.
         SUBEXIT ,                 Restore regs and return
         SPACE ,
         FSCBD
         END

FSCLOSE
*        Closes a CMS file by issuing the macro and FRET'ing
*        the FSCB.
* Call:
*   DCL FSCLOSE EXTERNAL ENTRY(POINTER, FIXED BIN(31))
*               OPTIONS(ASM INTER);
*   DCL @FSCB POINTER;    /* Ptr to FSCB */
*   DCL RC FIXED BIN(31); /* Return code */
*   CALL FSCLOSE(@FSCB,RC);
*   Return code will be:
*   0      - OK.
*   n      - FSCLOSE RC.
*   10n    - DMSFRET rc+100
FSCLOSE  CSECT
         SUBENT ,                  The usual
         B     START
         DC    C'COPYRIGHT 1986, 1987'
         CNOP  0,4
START    EQU   *
         LM    R2,R3,0(R1)         Pointers to parameters
         L     R11,0(R2)           Get FSCB address.
         FSCLOSE FSCB=(R11)        Close the file.
         LR    R6,R15              Save the rc.
         SPACE ,
         LA    R7,FSCBDL           Length of FSCB in bytes
         LA    R7,7(R7)            Round up to make
         SRL   R7,3                 into doublewords.
         LR    R1,R11                 Address of FSCB
         LR    R0,R7                   for DMSFRET
         DMSFRET DWORDS=(0),LOC=(1)
         LTR   R15,R15             Set cc.
         BZ    EXIT                Leave
         LA    R6,100(R15)         Add 100
EXIT     EQU   *
         ST    R6,0(R3)            Store as return code.
         SUBEXIT ,                 I'm going home
         SPACE ,
         FSCBD
FSCBDL   EQU   *-FSCBD
         END
Adrian Blakey
Director Customer Service
Kolinar Corp (USA)  ) Kolinar Corp 1988



































































