 Additional REXX built-in function

I think that REXX has some very good built-in functions, but it would be helpful
if some were combined into a single function.


THE SITUATION

I have created a variable (which looks like a table) in the format x:nnnn-mmmm
x:nnnn-mmmm x:nnnn-mmmm where x, nnnn, and mmmm are variables themselves.  In my
processing I need to retrieve a word from this variable where x has a certain
value.  In the built-in functions supplied with REXX, there are several that
will give me the character position of x.  However, I must do further processing
to get the word containing x.


THE SOLUTION

What I have done is written an EXEC called WORDFIND.  This EXEC simply combines
several built-in functions to perform a new function.

The purpose of WORDFIND EXEC is to locate a substring in a variable consisting
of a list of blank-delimited words and to return the first word that contains
the substring.  There is also an option to state whether the substring must be
the leading or trailing characters of a word.  It works like a table look-up.

The format of this built-in function is:

   WORDFIND(sentence,string,<position>)

searches sentence for an occurrence of string in a position. Position is either
(L)eading or (T)railing in a blank-delimited word in sentence. Default is that
the position is irrelevant.

An example:

   table = '1:aa-15 2:bb-12 3:cc-5 4:dd-105 5:ee-17'
   word =  WORDFIND(table,'4',L)

what this says is to search table and return the first blank-delimited word that
contains a '4' in the leading position

   say word
   --------------------

   4:dd-105

   --------------------

/**  NAME       : WORDFIND EXEC                                    **/
/**  EXEC MODE  : REXX BUILT-IN FUNCTION                           **/
/**  FUNCTION   : LOCATES A STRING WITHIN A WORD IN A SEQUENCE OF  **/
/**               BLANK-DELIMITED WORDS                            **/
/**                                                                **/
/**  PARMLIST   : A SEQUENCE OF BLANK-DELIMITED WORDS;             **/
/**               A STRING TO SEARCH FOR                           **/
/**               THE POSITION IN THE WORD FOR THE STRING          **/
/**                                                                **/
/**  RETURNS    : THE WORD WHICH CONTAINS THE STRING BEING         **/
/**               SEARCHED FOR                                     **/
ANSWER = ''                       /* INIT THE ANSWER          */
/**  ACCEPT THE PARAMETERS  **/
ARG SENTENCE,STRING,POSITION
IF POSITION = 'L' | POSITION = 'T' | POSITION = ''
   THEN NOP
   ELSE POSITION = ''
 /**  GO INTO A LOOP SEARCHING FOR ALL OCCURRENCES OF THE STRING  **/
SEARCH_COMPLETE = '0'
STRING_POS = '1'
DO FOREVER
   CALL SEARCH
   IF SEARCH_COMPLETE
      THEN LEAVE
END
/**  LET'S EXIT THIS BUILT-IN FUNCTION  **/
EXIT:
EXIT ANSWER
/**  SEARCH THROUGH THE SENTENCE UNTIL EITHER THE CORRECT   **/
/**  WORD IS FOUND OR THE SENTENCE HAS ENDED                **/
SEARCH:
/**  WHERE DOES THE STRING BEGIN?  **/
STRING_POS    = POS(STRING,SENTENCE,STRING_POS)
/**  DOES THE STRING EXIST IN THE SENTENCE?  **/
IF STRING_POS = '0'
   THEN DO
           ANSWER          = ''
           SEARCH_COMPLETE = '1'
           RETURN
        END
/**  IS THE STRING IN THE LEADING POSITION OF THE FIRST WORD?  **/
SELECT
  WHEN STRING_POS = '1' & (POSITION = 'L' | POSITION = '')
    THEN DO
           ANSWER          = WORD(SENTENCE,1)
           SEARCH_COMPLETE = '1'
           RETURN
         END
  WHEN STRING_POS = '1' & POSITION = 'T'
    THEN DO
           STRING_POS = STRING_POS + 1
           RETURN
         END
  OTHERWISE
    NOP
END
/**  SPLIT THE SENTENCE TO THE STRING  **/
BUILT_PARSE   = 'PARSE VAR SENTENCE PART_SENTENCE 'STRING_POS'  . '
INTERPRET BUILT_PARSE
/**  DETERMINE WHICH WORD THE STRING IS IN  **/
PRIOR_WORDS   = WORDS(PART_SENTENCE)
NUMBER_BLANKS = OCCURS(PART_SENTENCE,'  ')
IF PRIOR_WORDS = '0'             /* STRING IS IN THE FIRST WORD? */
   THEN PRIOR_WORDS = '1'        /* YES */
   ELSE DO
           IF NUMBER_BLANKS = PRIOR_WORDS
              THEN PRIOR_WORDS = PRIOR_WORDS + 1
        END
SELECTED_WORD = WORD(SENTENCE,PRIOR_WORDS)
/**  DOUBLE CHECK THAT THE STRING IS IN THE SELECTED WORD  **/
IF INDEX(SELECTED_WORD,STRING,1) > '0'
   THEN ANSWER = SELECTED_WORD
   ELSE ANSWER = WORD(SENTENCE,(PRIOR_WORDS + 1))
/**  IS THE STRING IN THE POSITION REQUESTED?  **/
SELECT
  WHEN POSITION = ''                 /* NO POSITION SPECIFIED */
    THEN SEARCH_COMPLETE = '1'
  WHEN POSITION = 'L'                /* STRING SHOULD LEAD WORD */
     THEN DO
            IF SUBSTR(ANSWER,1,LENGTH(STRING)) = STRING
               THEN SEARCH_COMPLETE = '1'
          END
  WHEN POSITION = 'T'                /* STRING SHOULD TRAIL WORD */
     THEN DO
           INVERT_ANSWER = REVERSE(ANSWER)
           INVERT_STRING = REVERSE(STRING)
      IF SUBSTR(INVERT_ANSWER,1,LENGTH(INVERT_STRING)) = INVERT_STRING
            THEN SEARCH_COMPLETE = '1'
      END
  OTHERWISE
    NOP
END
STRING_POS = STRING_POS + 1
RETURN


Randall W Epperson
Systems Programmer
Ellison Industries (USA)      )Randall W Epperson


















































