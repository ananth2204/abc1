Library for fast spool file access

The QRR Library is a small set of Assembler subroutines for
VM/CMS which provides a simple interface between programs
and DIAGNOSE X'14'.  This DIAGNOSE provides the fastest
possible standardised access to files on virtual readers.  The
library does not limit the number of virtual readers which can be
operational simultaneously.  Your programs may access a reader
file either record-by-record or as an uninterrupted stream where
record boundaries are ignored.  Data can be retrieved from the file
in any-sized chunks.  The input data can only be accessed
sequentially, but the file may be re-read from the beginning
without closing and re-opening it.  The file can be either kept or
purged at close time.

All operational code is compiled with the standard CMS
Assembler using no macros except those provided in the source
code and those in standard system macro libraries.  All interface
subroutines use the linkage convention:

	R15->routine
	R14->return point
	R13->OS-format save area
	R1->list of fullword addresses of parameters.

The subroutine(s) should work with any calling language which
can follow this convention.  All code has been tested on CMS
Release 5 running with CP Release 4.

In order to read a file on a virtual reader, the reader must be
defined to the virtual machine.  In most VM installations, CMS
users have a reader pre-defined for them in the VM directory,
usually at address 00C.  It is generally a good idea to avoid using
this reader since it is the one CMS uses for the FILEDEF
READER.  By creating your own reader you can be sure to avoid
interference with programs which use FILEDEF.

You may only read one spool file at a time on any given virtual
reader.  Therefore another reason why you may need to define a
new reader is when your application needs to have two or more
separate inputs, each of them a different spool file.

To define a new reader, simply issue the CP command:

	DEFINE RDR cuu

where cuu is the virtual address for the new reader.  The virtual
address can generally take values between 0 and FFF.  You
cannot use addresses which are already defined as something, for
example 191 which is a DASD.  To 'undefine' a defined reader,
use the CP command:

	DETACH cuu

Once you have a reader defined, you need find out the spool-id of
the file you want to read.  The spool-id is a 4-digit number which
uniquely identifies a spool file on the system.  Of course you can
only read spool files which have been spooled to you or for you.
You can generally see a list of all spool files eligible for reading
using the CP command:

	QUERY RDR ALL

In some applications, the user will be asked to signify which spool
file he wants by typing its spool-id number.  In other applications,
the spool file to be processed next may be selected based on some
specific attribute.  For example, using the date attribute, you may
want to process the oldest file first; or you may want to use the
size attribute to process the shortest files first.

Once you know the reader address and the spool-id number of the
file, you select the file for processing with subroutine QRRBEG.
Files selected for processing by QRRBEG are said to be active.
Active spool files do not appear on the QUERY RDR ALL list.
Also you will be unable to select the same spool-id for reading on
a different reader.  The file is essentially taken out of the list of
files eligible to be read.

To deactivate a file, a CP CLOSE command must be issued for
the reader.  Subroutine QRREND does this.  By default, the CP
CLOSE command causes the active spool file to be purged from
the system.  You must use the HOLD option to prevent this.
QRREND has a flag you use to control the HOLD/NOHOLD
option.  It is very important that the CLOSE be done properly or
subsequent activation of a file on the reader may cause undefined
results.

To do the book-keeping involved in reading spool files in a
buffered manner, the QRR routines need a control block, ie a data
structure.  The format of this data structure is internal to the QRR
routines, which means you have no access to the contents of it.
However, you must provide space for it.  To know how much
space to allocate for the data structure, you must call the
QRRQBS routine.  The size of the data structure is the same for
all virtual readers and all files.  The only time it may vary is with
a new release of the QRR library.

You must have a different data structure for each virtual reader
you intend to use simultaneously.  You are responsible for
organising the list of data structures and for giving the right one to
the QRR routines.  The data structure is initialised by QRRBEG.
You must be sure that the data structure you give to QRRBEG is
of at least the required size, since QRRBEG has no way of
checking this.  The data structure tells all other QRR routines
which reader is being used and what the current read state is.

The QRR library provides no method of defining a new virtual
reader.  This you must do with other means at your disposal.
Once the reader is defined, the first step is always to decide which
spool file you want to read.  The QRR library provides no help in
this either.

Before using the QRR routines to access the spool file on the
reader, you must allocate enough space for a control block.  The
sequence (FORTRAN):

	CALL QRRQBS(ISIZE, IERR)

returns the space needed for a control block in the variable ISIZE.
(IERR should be checked for a non-zero error.)  Unfortunately, in
standard FORTRAN you have no way to dynamically allocate
memory.  The best you can do is to check to see if a pre-allocated
amount is enough, as in the sequence (FORTRAN):

	PARAMETER (MSIZE = 6000)
	CHARACTER BLOCK(MSIZE)
	CALL QRRQBS(ISIZE, IERR)
	IF (IERR .NE. 0) STOP 9998
	IF (ISIZE .GT. MSIZE) STOP 997

Once the reader is defined, its address known, the spool file-id
known, and a control block allocated, you should use subroutine
QRRBEG to activate the file on the reader, as in the sequence
(FORTRAN):

	CALL QRRBEG(BLOCK, IRDR, ISPID,
	   JUNK, NRSIZE, IERR)
	IF (IERR .NE. 0) STOP 996

If the QRRBEG call is successful, you may begin reading the
spool file, for example:

	PARAMETER (NMAX = 256)
	CHARACTER RECORD(NMAX)
	CALL QRRGET(BLOCK, NMAX,
	RECORD, NGOT, IERR)
	IF (IERR .NE. 0) STOP 995

Of course, you use the same BLOCK as in the QRRBEG call, and
you don't change the value of BLOCK in the meantime!

Care must be taken not to call QRRBEG for a reader which
already has an active file on it.  This is because QRRBEG first
issues a DIAGNOSE X'14' subcode '000C' for the spool-id.  This
subcode does not actually activate the file.  It merely puts the file
at the head of the queue so that it will be taken by the next
operation.  This is rather like the CP ORDER command.  If a file
is already active on the reader, it is not deactivated and no
message is given.  There is no way, using the DIAGNOSE X'14'
interface, to determine whether a reader is already active without
disturbing the current pointers.

With Release 5, CP provides a new DIAGNOSE, X'BC', which is
intended to provide all information about a spool file without
disturbing the reader queue pointers.  The QRR library does not
make use of this new DIAGNOSE.

It is wise to make sure that the class of your virtual reader
matches the class of the file you want to select.  If not, you will
get a "file not found" error from QRRBEG.  In my experience,
such errors always cause me to look everywhere but at the class,
and this always costs me time.  It is natural to suppose that all
files returned by QUERY RDR ALL should be available to be
selected with QRRBEG, but this is not so.  Be forewarned.

In one specific case your program will be signalled with an error
when there was already an active file on the reader at QRRBEG-
time.  This is caused by the fact that QRRBEG issues a
DIAGNOSE X'14' subcode '0000' after the subcode '000C'.  This
is an attempt to read the first spool file buffer for the file.  If the
active file has no more buffers to be read, the subcode '0000'
returns the end-of-file condition.  QRRBEG may then assume that
there was an active file already.  However, if the active file does
have more spool file buffers available, the subcode '0000' returns
no error and QRRBEG does not know that a file was already
active.  The result apparent to your program in this case is
undefined.  It may even lead to a program ABEND.

You may read from as many spool files as you like at the same
time.  To use a virtual reader, you must first define it with the CP
DEFINE RDR command.  Then you call QRRBEG to activate a
spool file on the reader.  When you call QRRBEG, you must
provide space for a control block (data structure).  This control
block is for the exclusive internal book-keeping use of the QRR
routines, and must be passed to all other QRR subroutines.  After
opening, you ask for data from the reader file using QRRGET.
You tell QRRGET how many bytes you want and whether it
should stop at the next record boundary or not.  QRRGET returns
0 bytes when the reader file is exhausted.  While a file is active,
you may enquire about many of its attributes, such as its origin,
size, and tag.  After you are finished with a reader file, you must
close it with QRREND, indicating whether or not the file should
be deleted.

QRRQBS

QRRQBS will return the minimum required control block size for
the virtual reader.

	CALL QRRQBS(ISIZE, IERR)

%	(Registers and parameter list are in the VS/FORTRAN
convention.)

%	ISIZE (returned INTEGER) control block size in bytes.
IERR (returned INTEGER) return code.

The caller will want to call this routine before QRRBEG to make
sure that he has allocated enough space for the control block.

QRRBEG

QRRBEG will begin operation of a virtual reader by selecting a
file for it.

	CALL QRRBEG(BLOCK, IADDR, ISPID, IJUNK, NRSIZE, IERR)

%	(Registers and parameter list are in the VS/FORTRAN
convention.)

%	BLOCK (array of CHARACTER) control block (maintained
internally).

%	IADDR (INTEGER) reader virtual address.

%	ISPID (INTEGER) reader file spool-id.

%	IJUNK (returned INTEGER) always set to an undefined
value.

%	NRSIZE (returned INTEGER) maximum record length.
IERR (returned INTEGER) return code.

NRSIZE is returned 80 for PUN files, 133 for all others.  This
routine issues a DIAGNOSE X'14' code '000C' to select the file,
then reads the first spool file buffer using code '0000'.  The
BLOCK array is assumed to be of a certain size.  This size may be
interrogated with the QRRQBS call.  The format of BLOCK is
maintained internally and is not part of the interface.  The
BLOCK is initialised by this routine, and must be given to every
other routine which performs operations on the reader.

The reader file ISPID must have a CLASS compatible with the
CLASS of reader IADDR or the 'file not found' error will be
returned.  This routine does not change the CLASS of either file
or device.  If this routine is called with an ISPID which has
already been used in a QRRBEG call with a different reader, then
the file-not-found error is signalled by the system.

If this routine is called with an IRDR which has already been used
in a QRRBEG call with a different ISPID, the result is undefined.
The caller must be sure that there is no active file on the IRDR
reader.  One way to do this is to issue a CP CLOSE.

The QRR family and the operating system share the responsibility
of maintaining the read status of a given reader/file pair.  The
QRR routines use the control block and the operating system uses
internal structures.  There is no cross verification between the
QRR family and the operating system.  Synchronisation is only
assured if neither a second QRRBEG, a CP CLOSE, nor a
DIAGNOSE is issued after the first QRRBEG and before the
QRREND.

QRRGET

QRRGET will read bytes from a opened virtual reader file.

	CALL QRRGET(BLOCK, NWANT, BUFFER, NGOT, IERR)

%	(Registers and parameter list are in the VS/FORTRAN
convention.)

%	BLOCK (array of CHARACTER) control block (maintained
internally).

%	NWANT (INTEGER) absolute value is bytes wanted (see
below).

%	BUFFER (returned array of CHARACTER) bytes read.

%	NGOT (returned INTEGER) number of characters read.
IERR (returned INTEGER) return code.

NWANT should be non-zero, otherwise an error is returned.  The
absolute value of NWANT is the number of bytes the caller wants
to have from the input file.  End-of-file is indicated by NGOT=0.
Subsequent attempts to read  past the end-of-file will continue to
return NGOT=0 and IERR=0.  If NWANT is greater than 0, the
only thing that can reduce the value of NGOT to less than that of
NWANT is reaching end-of-file. In other words, NWANT
positive treats the data as a stream independent of records or lines
in the file.

If NWANT is less than 0, an end-of-record will stop the data
transfer.  In other words, NWANT negative reads the data record
by record.

If NWANT is negative but too small to contain the entire record,
remaining bytes from the record will be returned on the next call
or calls.  No part of any record is skipped.  All bytes must be
read.

If a PUN file record is less than 80 bytes long, enough blanks will
be added at the end of the record to make the length exactly 80.

QRRRES

QRRRES will reset pointers so the next item read will be the first
record in the file.

	CALL QRRRES(BLOCK, IERR)

%	(Registers and parameter list are in the VS/FORTRAN
convention.)

%	BLOCK (array of CHARACTER) control block (maintained
internally).

%	IERR (returned INTEGER) return code.

This routine issues a DIAGNOSE X'14' code '0014' to reset the
file, then reads the first spool file buffer using code '0000'.

QRREND

QRREND will end operations for a virtual reader device.

	CALL QRREND(BLOCK, IFKEEP, IERR)

%	(Registers and parameter list are in the VS/FORTRAN
convention.)

%	BLOCK (array of CHARACTER) control block (maintained
internally).

%	IFKEEP (INTEGER) if 0, reader file purged; if non-zero, file
kept.

%	IERR   (returned INTEGER) return code.

CP CLOSE cuu HOLD is issued if IFKEEP is not 0.  CP CLOSE
cuu NOHOLD is issued if IFKEEP is 0.  Although your program
or EXEC could issue the CP CLOSE itself, this routine should be
called to maintain consistency with later releases of the QRR
software.

If you don't somehow issue a CLOSE for the reader, either
yourself or with this routine, the selected file remains active on it.
If you issue a QRRBEG call for a reader which has an active file
on it, the results are undefined.

QRR ERROR CODES

Most of the errors correspond to return codes from DIAGNOSE
X'14'.  The names in parentheses are the subroutines which
produce the errors.

The subroutine QRRRD# is a routine which issues DIAGNOSE
X'14' subcode X'0000' to read a system spool file buffer.  It is
called both by QRRBEG (at open time to get the first buffer) and
by QRRGET (whenever one buffer is exhausted).

	24011  (QRRBEG) spoolid does not exist or is already in use
	24012  (QRRBEG) virtual reader address invalid
	24013  (QRRBEG) address is not that of a virtual reader
	24014  (QRRBEG) virtual reader busy or not ready
	24015  (QRRBEG) paging system or I/O error
	24016  (QRRBEG) reader already has an active file on it
	24021  (QRREND) data consistency error - BLOCK may be
                   invalid
	24031  (QRRRD#) BLOCK inconsistency
	24032  (QRRRD#) BLOCK inconsistency
	24033  (QRRRD#) BLOCK inconsistency
	24034  (QRRRD#) BLOCK inconsistency
	24035  (QRRRD#) BLOCK inconsistency
	24041  (QRRGET) NWANT parameter is not nonzero
QRR SAMPLE PROGRAMS

The sample programs are designed to illustrate the use of QRR
functions in simple but lifelike situations.  They are meant for you
to copy and modify or build up as your needs require.

	QRRSMP01 - looks through all records in a spool file,
printing out which were the shortest and the longest (leaves
spool file intact)

	QRRSMP02 - types the contents of a spool file on the
terminal (leaves spool file intact).

To run any of these samples you must do the following CMS
commands (FORTRAN):

	GIVEME DVEUTL (at the IPP Rechenzentrum only)
	FORTVS <sample>
	GLOBAL TXTLIB QRR VFORTLIB
	GLOBAL LOADLIB VFLODLIB
	LOAD <sample> (NOAUTO START

Where <sample> is one of the names in the list above.  Note that
your installation may have different names for FORTVS (to
compile a FORTRAN program), VFORTLIB (name of the
FORTRAN load-time library), and VFLODLIB (name of the
FORTRAN run-time library).


