CMS to VSE file transfer

Do you ever have to transfer CMS files to VSE? Do you like to
create test data in CMS and then send it to VSE? Do you want
a program which can assemble data from multiple cards to any
record length without recompilation? Here is a REXX program
and a COBOL program to do just this.

The REXX program CMSTOVSE, when called without any
arguments, asks for the CMS file details, reads the file, gets its
record length, splits its records into multiple cards of 80 bytes
(if the record length is greater than 80 bytes), and writes to a
temporary file. It also generates the necessary JCL and
POWER cards. Finally it submits this temporary file to VSE
using EXEC SUBMIT. If CMSTOVSE EXEC is called with all
its parameters (ie CMS file details, VSE filename, VSAM user
catalog name, and record length) it does one extra check. If the
CMS file is not available, it generates a dummy record, of
which the first five bytes have a value of DUMMY and the rest
are spaces.

To meet your installation standards, modify default values in
the user_default subroutine and modify JCL and POWER cards
in the write_jcl subroutine. Also if your installation does not
use SUBMIT EXEC for job submission to VSE, change this
EXEC name to your installation standards.

The COBOL program CMSVSE assembles multiple cards to
the required record length and writes the output to a SAM
managed VSAM file. It can assemble record lengths of 12 to
512 bytes. If you need to change these values, modify the
COBOL program and the REXX EXEC. The first card in the
input to the program should give the record length, and the end
of data is signalled byJJ¬JJin column 1. So this character
should not be the first character in the data that follows the first
card in the program.


CMSTOVSE

/* --------------------------------------------- */
arg fname ftype fmode vsefile ucat reclen comment
Call user_defaults
Call pull_cmsfile_details
Call pull_vsefile_name
Call write_jcl
If dummy ='no' then Call read_format_write
  else              Call write_dummy_record
Call write_endjcl_and_submit
exit
/*              pull_cmsfile_details             */
pull_cmsfile_details:
data_keyed='no'
if fname  ¬='' then do
   data_keyed='yes'
   cmsfile=fname  ftype  fmode
   if vsefile='.' then vsefile=''
   if ucat='.' then ucat=''
   vse_file=vsefile  ucat
   end
display='yes'
if data_keyed='yes' then do
   push cmsfile
   display='no'
   end
hil='1de8'x          /* hilight display */
nor='1d60'x          /* normal display */
'VMFCLEAR'
m1.1='*------------------------------------------------*'
m1.2='*  This EXEC will copy a CMS file to a VSE file  *'
m1.3='*------------------------------------------------*'
m1.4=''
m1.5='Type in' hil 'filename filetype filemode' nor ' of your CMS file'
m1.6=' ( If You omit filemode, filemode will be "A" )'
m1.7=" ( If You don't want to continue, type"hil"CANCEL"nor")"
if display='yes' then do
   do i=1 by 1 until i=4
      say center(m1.i,72)
   end
end
data_ok='no'
dummy ='no'
Do until data_ok = 'yes'
  if display='yes' then do
   say ''
   say center(m1.5,72)
   say center(m1.6,72)
   say center(m1.7,72)
   say ''
   end
  pull fnamer ftyper fmoder .
  display='yes'
  if fnamer='CANCEL' then exit
  select
   when fnamer=''     then say hil'You did not type file details'nor
   when ftyper=''     then say hil'You did not type filetype'nor
   otherwise do
    if fmoder='' then fmoder='A'
    set cmstype ht
    state fnamer ftyper fmoder
    rc.save=rc
    set cmstype rt
    select
     when rc.save=28 then do
      if reclen ¬='' then do
         dummy ='yes'
         data_ok='yes'
         end
       else say hil'Your CMS file does not exist ',
                                            'did you type correctly?'nor
       end
     when rc.save=0  then data_ok='yes'
     otherwise say 'Invalid return code ' rc.save ,
                                           hil'Inform system support'nor
    end       /* end of select */
  end
 end
end
desbuf
if dummy ='no' then do
  listfile fnamer ftyper fmoder '( noheader stack format alloc'
  pull . . . . record_length no_of_records .
  call chek_rec_len
  end
 else do
  record_length=reclen
  no_of_records=10           /* Default value */
  end
return
/*              pull_vsefile_name                */
pull_vsefile_name:
display='yes'
if data_keyed='yes' then do
   push vse_file
   display='no'
   end
data_ok='no'
m2.1=''
m2.2='Type the Vsefile name & User catalog name if other than ' default_ucat
m2.3="If you don't enter anything, filename will be "
m2.4=default_vsefile '& catalog will be ' default_ucat
m2.5=" ( If You don't want to continue, type"hil"CANCEL"nor")"
m2.6=''
do until data_ok='yes'
 if display='yes' then do
  do i = 1 by 1 until i=6
  say center(m2.i,72)
  end
  end
 pull vse_name ucat  .
 display='yes'
 len=length(vse_name)
 select
  when vse_name='CANCEL' then exit
  when vse_name='' then do
   data_ok='yes'
   vse_name=default_vsefile
   end
  when len > 44   then say hil'Filename should be < 44 characters'nor
  otherwise do
   vse_string=translate(vse_name,' ','.')
   error_sw='no'
   validch='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789#$@-+'
   validfch='ABCDEFGHIJKLMNOPQRSTUVWXYZ#$@'
   do i=1 by 1 until i=words(vse_string)
    if wordlength(vse_string,i)>8 then  error_sw='yes'
    if verify(word(vse_string,i),validch)>0 then error_sw='yes'
    if verify(left(word(vse_string,i),1),validfch)>0 then error_sw='yes'
    end
   if error_sw='no' then data_ok='yes'
     else say hil"Name does not correspond to IBM standards"nor
   end
 end
end
return
/*              write_jcl                        */
write_jcl:
fnamew='cmstovse'
ftypew='t$e$m$p'
fmodew='a'
dlbl21='RECORDS='no_of_records',RECSIZE='record_length
dlbl22=copies(' ',14) dlbl21',DISP=(NEW,KEEP),CAT='
if ucat ='' then dlbl2=dlbl22||default_ucat
 else  dlbl2=dlbl22||ucat
queue '* $$ JOB JNM='job_name',DISP=D,CLASS=A,USER='userid()
queue '* $$ LST CLASS=V,DISP=D'
queue '// JOB' job_name '      ' USERID()
queue '* ---------------------------------*'
queue '*         CMSFILE TO VSEFILE       *'
if comment¬='' then  queue '*' center(comment,32) '*'
queue '* ---------------------------------*'
queue '// OPTION NODUMP'
queue '// LIBDEF PHASE,SEARCH='vse_sub_lib
queue left("// DLBL CMSVSE,'"vse_name"',,VSAM,",71)'C'
queue DLBL2
queue '// EXEC CMSVSE,SIZE=AUTO'
queue RECORD_LENGTH
set cmstype ht
erase fnamew ftypew fmodew
set cmstype rt
makebuf
do until queued()=0
  pull line_to_write
  call rite_line
end
return
/*              read_format_write                */
read_format_write:
no_of_cards=(record_length+79)%80
makebuf
do forever
  subcmd = 'r'
  'EXECIO 1 DISKR' fnamer ftyper fmoder  '(VAR LINE_READ'
  select
  when rc=0 then do            /* normal read */
   call check_first_character
   do i=1 by 1 until i=no_of_cards
    if i=no_of_cards then len=record_length-(i-1)*80
     else len=80
    start_ch=((i-1)*80)+1
    line_to_write=substr(line_read,start_ch,len)
    call rite_line
    end
   end
  when rc=2 then leave         /* eof         */
  otherwise do
   say 'Unexpected return code' rc
   exit 999
   end
  end
end
return
/*              write_dummy_record               */
write_dummy_record:
if ¬datatype(reclen,'W') then do
  say hil'Invalid Record Length Present'nor
  say hil'Value is ' reclen nor
  exit 999
  end
call chek_rec_len
no_of_cards=(record_length+79)%80
line_read='DUMMY'||copies('',record_length-5)
do i=1 by 1 until i=no_of_cards
 if i=no_of_cards then len=record_length-(i-1)*80
   else len=80
 start_ch=((i-1)*80)+1
 line_to_write=substr(line_read,start_ch,len)
 call rite_line
end
return
/*              write_endjcl_and_submit          */
write_endjcl_and_submit:
queue '¬'      /* Signals end of data */
queue '/*'
queue '/&'
queue '* $$ EOJ'
do until queued()=0
 pull line_to_write
 call rite_line
end
finis fnamew fnamew fmodew
dropbuf
EXEC SUBMIT  fnamew ftypew fmodew  /* check your installation EXEC*/
set cmstype ht
erase fnamew ftypew fmodew
set cmstype rt
say center('--------------------------------------',72)
say center('Job CMSTOVSE has been submitted to VSE',72)
say center('--------------------------------------',72)
return
/*              chek_rec_len                     */
chek_rec_len:
if record_length < min_reclength | record_length > max_reclength then do
   say hil'Your CMS file should have a record length in ',
                                                   'between 12 & 512'nor
   say hil'But it has ' record_length nor
   say hil'contact SYSTEM SUPPORT for help' nor
   exit 999
   end
 else record_length=right(record_length,3,'0')
return
/*              rite_line                        */
rite_line:
'EXECIO 1 DISKW' fnamew ftypew fmodew '(VAR LINE_TO_WRITE'
if rc¬=0 then do
 set cmstype rt
 say hil'Invalid return code during WRITE ' rc
 say 'Inform SYSTEM SUPPORT' nor
 exit 999
 end
return
/*              check_first_character            */
check_first_character:
first_ch=substr(line_read,1,1)
if first_ch='¬' then do
 say 'Your file has ¬ as first character'
 say 'This is a special character in this REXX program'
 say 'which you cannot use in your CMS file'
 say 'Please contact'hil'SYSTEM SUPPORT'nor'for help'
 exit 999
 end
return
/*              User_defaults                    */
user_defaults:
default_vsefile='VSE.'||userid()||'.CMSTOVSE.FILE'
default_ucat='USERCAT'
vse_sub_lib='USER.SUBLIB'
job_name='CMSTOVSE'
min_reclength=12     /* If you change the record length defaults */
max_reclength=512    /* recompile the COBOL program CMSVSE       */
return


CMSVSE

       IDENTIFICATION  DIVISION.
      *------------------------*
       PROGRAM-ID.                         CMSVSE.

      *-------------------------------------------------------*
      * This program reads data cards and assembles them to   *
      * a SAM managed VSAM file. It is a free format file     *
      * The first record contains the record length           *
      * Then data cards follow                                *
      * For Record Length > 80, multiple cards are accepted   *
      * End of data is sensed by '¬' in column 1              *
      *-------------------------------------------------------*

       ENVIRONMENT     DIVISION.
      *------------------------*

       CONFIGURATION   SECTION.
      *+++++++++++++++++++++++*

       SOURCE-COMPUTER. IBM-4381.
       OBJECT-COMPUTER. IBM-4381.

       INPUT-OUTPUT    SECTION.
      *+++++++++++++++++++++++*

       FILE-CONTROL.
      *++++++++++++*
           SELECT DISK-FILE ASSIGN TO SYS010-DA-3350-S-CMSVSE.


       DATA            DIVISION.
      *-----------------------*

       FILE            SECTION.
      *+++++++++++++++++++++++*

       FD   DISK-FILE
            LABEL RECORDS STANDARD.
       01     VSEREC-O.
        05    FILLER                   PIC X(10).
        05    FILLER OCCURS 2 TO 412 TIMES
                     DEPENDING ON REC-LENGTH-O.
         07   UNI-ITEM-O               PIC X.

       WORKING-STORAGE SECTION.
      *+++++++++++++++++++++++*

       01     FILLER                   PIC X(9) VALUE ALL '** WIS **'
       01     REC-LENGTH-O             PIC 9(4)  COMP SYNC.
       01     WS-RECORD-LENGTH         PIC 9(3)  VALUE ZEROES.
       01     WS-INPUT-DATA.
        05    FILLER-INP               PIC X(80).
        05    FILLER-INP-RD REDEFINES FILLER-INP.
         07   WS-CH-I                  PIC X OCCURS 80 TIMES.
       01     WS-VSEREC-I.
        05    WS-CH-O                  PIC X OCCURS 1 TO 512
                 DEPENDING ON WS-RECORD-LENGTH.
       01     WS-CARDS-TO-ASSEMBLE     PIC 9 VALUE ZEROES.
       01     WS-SOMETHING             PIC 9(2) VALUE ZEROES.
       01     WS-END-OF-JOB            PIC XXX  VALUE SPACES.
       01     WS-COUNT                 PIC 999  VALUE ZEROES.
       01     WS-CNTA                  PIC 999  VALUE ZEROES.
       01     WS-CNTI                  PIC 999  VALUE ZEROES.
       01     WS-CNTO                  PIC 999  VALUE ZEROES.
       01     WS-RECS-WRITTEN          PIC 9(4) VALUE ZEROES.

       PROCEDURE       DIVISION.
      *-----------------------*

       A00-VALIDATE-RECLEN.
             DISPLAY '**********************'.
             DISPLAY '*  CMSVSE   ENTERED  *'.
             DISPLAY '**********************'.
             ACCEPT WS-RECORD-LENGTH.
             DISPLAY 'DATA CARD VALUE IS ' WS-RECORD-LENGTH
             IF WS-RECORD-LENGTH > 512 GO TO A95-ABORT-PROGRAM.
             IF WS-RECORD-LENGTH < 012  GO TO A95-ABORT-PROGRAM.
             DISPLAY 'RECORD LENGTH IS ' WS-RECORD-LENGTH.
             COMPUTE REC-LENGTH-O = WS-RECORD-LENGTH - 10.

       A10-OPEN-OUPUT-AND-CALC.
              OPEN OUTPUT DISK-FILE
              DIVIDE WS-RECORD-LENGTH BY 80 GIVING WS-CARDS-TO-ASSEMBLE
                    REMAINDER WS-SOMETHING.
              IF WS-SOMETHING IS > ZERO ADD 1 TO WS-CARDS-TO-ASSEMBLE.
              ADD 1 TO WS-COUNT.
       A20-READ-ASSEMBLE-WRITE-REC.
              MOVE SPACES TO WS-VSEREC-I.
              MOVE ZEROES TO WS-CNTA.
              PERFORM A30-READ-CARD THRU A30-READ-CARD-EXIT
                  WS-CARDS-TO-ASSEMBLE TIMES.
              IF WS-END-OF-JOB = 'YES' GO TO A90-CLOSE-FILE.
              MOVE WS-VSEREC-I TO VSEREC-O
              WRITE VSEREC-O
              ADD 1 TO WS-RECS-WRITTEN.
              MOVE ZEROES TO WS-CNTO.
              GO TO A20-READ-ASSEMBLE-WRITE-REC.
        A30-READ-CARD.
              IF WS-END-OF-JOB = 'YES'
                          GO TO A30-READ-CARD-EXIT.
              ACCEPT WS-INPUT-DATA.
              IF WS-CH-I(1) = '¬' MOVE 'YES' TO WS-END-OF-JOB
                          GO TO A30-READ-CARD-EXIT.
              ADD 1 TO WS-CNTA.
              IF WS-CNTA = WS-CARDS-TO-ASSEMBLE
              COMPUTE
              WS-COUNT =  WS-RECORD-LENGTH  - ( 80 * ( WS-CNTA - 1 ))
                ELSE COMPUTE WS-COUNT = 80.
              PERFORM A40-ASSEMBLE VARYING WS-CNTI FROM 1 BY 1
                                  UNTIL WS-CNTI > WS-COUNT.
        A30-READ-CARD-EXIT.
              EXIT.
        A40-ASSEMBLE.
              ADD 1 TO WS-CNTO
              MOVE WS-CH-I ( WS-CNTI ) TO WS-CH-O ( WS-CNTO).
        A90-CLOSE-FILE.
              DISPLAY 'RECORDS WRITTEN ' WS-RECS-WRITTEN.
              DISPLAY '**********************' .
              CLOSE DISK-FILE
              STOP RUN.
         A95-ABORT-PROGRAM.
              DISPLAY 'WRONG RECORD LENGTH' WS-RECORD-LENGTH.
              CALL 'UTCANCEL'.
              STOP RUN.


Moyeen Ahmed Khan
Systems Analyst
Qatar General Petroleum Corporation (Qatar)               c QGPC 1992

