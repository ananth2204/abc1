Flowing text lines together

XEDIT has a SPLIT command, a JOIN command and a
SPLTJOIN command.  These commands make it easy to split a
line, insert a string and put the line back together.  However,
there is no easy way to deal with this situation when multiple
lines are involved.  Ideally, what is needed is the ability to
completely take apart a sentence or even an entire paragraph
and 'flow' it back together again.  This is routine for word
processors.  SPF users can do this with their Text Split (TS)
and Text Flow (TF) commands.

The FLOW macro provides this capability.  It is reasonably
flexible and easy to use.  It may be used either from the
XEDIT command line or from the prefix area.

This macro combines a number of lines on a word-by-word
basis where a word is defined as 'those characters which fall
between one or more spaces'.  Input lines flow together as if
they had been entered on a single long line regardless of their
division on different input lines (with the exception that
indentation can be retained from input to output).  The FLOW
process will retain existing paragraphs where a paragraph is
defined as 'those lines which fall between blank lines'. The
output is a number of reformatted lines where words are
separated by single spaces or double spaces according to proper
typing standards as understood by the author of this macro.
The output may contain more or fewer lines than the input.
This macro is generally invoked by entering:

    FLOW <<<numlines> leftmargin> rightmargin> <Align> <Keepindent>

Where:
o      Numlines is the number of lines (usually beginning with
      the current line) to be flowed together.  Two special values
      may be specified:
      *      causes all lines in the file to be FLOWed
      0      causes FLOW to stop when the first blank line is
            encountered.
      If the parameter is omitted, 0 is used.  It is also possible to
      specify the number of lines by using the START and END
      indicators which are described below.

o      Leftmargin is the leftmost column to be used for output
      lines.  This allows the width of the text to be changed
      easily.  If omitted, the left zone is used.

o      Rightmargin is the rightmost column to be used for output
      lines.  This allows the width of the text to be changed
      easily.  If omitted, the right zone is used except when the
      filetype is EXEC or XEDIT in which case the value used is
      the smaller of the right zone or 73.

o      ALIGN indicates that the output is to be both left and right
      justified.  The ALIGN parameter need not be placed last, it
      may be placed anywhere desired.

o      KEEPINDENT indicates that the indentation found in the
      input (ie the number of spaces between the left zone and
      the first nonblank character) is to be preserved.  The
      KEEPINDENT parameter need not be placed last, it may
      be placed anywhere desired.

The number of numeric parameters must be specified carefully
and in a rather non-standard manner as follows:

1      If one parameter is specified, it is the right margin.

2      If two parameters are specified, they are the left and right
      margins, respectively.

3      If three parameters are specified, they are the number of
      lines, left margin and right margin, respectively.  The
      above parameters are totally unaffected by the options
      (which are alphabetic), which may be placed before, after,
      or in between the numeric parameters.

The lines to be affected by FLOW are generally defined as
follows:

o      Starting line = the current line

o      Ending line = the numlines parameter or a blank line.

On the other hand, either or both of these limits may be
specified by placing either or both of the following indicators
in the prefix area: START, END.  Rest assured that these will
only be used as indicators to FLOW; XEDIT will not attempt
to execute them as if they were prefix macros (unless, of
course, you define macros or synonyms with these names in
which case you get what you deserve).

FLOW may also be invoked as a prefix area macro. In this
case, operation is identical to that described above except that:

o      There is only room for one byte of parameter information
      (unless this macro is renamed or synonyms are
      implemented).  This solitary byte is interpreted exactly as
      it would be if it were entered from the command line.

o      The starting point for the FLOW operation is always the
      line where FLOW was entered.

o      If the FLOW range encompasses the current line, the
      current line will be moved to the line after the last line
      processed.  Sorry, but this not my fault, it's because of
      processing performed by XEDIT after a prefix macro
      completes.  When invoking FLOW from the prefix area,
      you may find it handy to specify the end of the operation
      by using the END indicator.

Only those columns of the input lines which fall between the
current zone setting are processed; characters outside the zone
are discarded.  The use of the zone setting on input may be
useful if certain characters are to be eliminated.  A good
example is a series of REXX or EXEC2 comment indicators in
the first and/or last columns on a line.

'Impossible' words which do not fit within the output margin
will begin at the left margin (indented if appropriate) and
extend beyond the right margin as far as necessary.  If desired,
this may be used to build a single column of words from the
input text by specifying a rightmargin value equal to leftmargin
plus 1.

The flow process will terminate when any of the following is
reached:
o      Numlines - number of input lines.
o      The END indicator.
o      A blank line.
o      End of file.

Be careful when specifying the KEEPINDENT option in
conjunction with output margins when the input begins to the
right of the zone, especially if the ALIGN option is used as
well.

Files with an LRECL greater than 255 bytes may suffer some
inconvenience because of the 255 byte restriction on lines
placed into the program stack.  While the full zone is available
for inputting characters, the output is limited to 255 contiguous
bytes.  Thus, if the zone spans more than 255 bytes, only the
leftmost 255 bytes will contain data, the rightmost bytes will
contain spaces.  If this happens, a caution is issued, and you
have the option of continuing or exiting.  In any case, no input
data will be lost.

This macro automatically detects and handles Assembler type
comments which begin with * in columns 1-2. In this case, all
of the lines to be FLOWed should be comments (or else none
of them should be comments).  The leading * characters are
ignored on input and included in the rearranged output.  There
are some special considerations. Identification of comments is
performed by examining columns 1-2 without regard for the
zone or the left/right margins. The zone and left/right margins
do not include the * character. The left margin must be greater
than 1 or the KEEPINDENT option must be used.  This is to
allow room for * in column 1.

By the way, the reason for insisting upon the blank in column 2
is to allow for the possibility that an odd word might just
happen to begin with * and begin in column 1, in which case
we do not want to assume that the entire block of data is a
comment.

If this whole mess sounds hopelessly confusing, just create a
sample edit session and start playing with it.  Begin with the
defaults, and go from there.  It really isn't as complicated as it
all sounds.  Perhaps the following example (which does not use
ALIGN) will help.  The initial text is shown in Figure 1.  The
text ends with either a blank card or the end of the file.  Figure
2 shows what happens after issuing 'FLOW 61'.


/*                     Flow Text Lines Together                       */
/*  Check the type of invocation                                      */
EXTRACT '/LINE/'
original_current_line = line.1
arg x .                                                /*  trial run  */
if x = '?' then do
   MSG 'FLOW <<<numlines> leftmargin> rightmargin> <Align> <Keepindent>'
   MSG 'Optional indicators in the prefix area are: START END'
   exit 0
   end
if x = 'PREFIX' then do             /*  invoked from the prefix area  */
   prefix_invocation = 1
   /*  There isn't much room for arguments unless a synonym is used   */
   arg . line_type starting_line original_flow_args
   if line_type Â¬= 'SET' then                   /*  SHADOW I presume  */
      call exit '1 FLOW is invalid on shadow lines'
   end
else do                            /*  invoked from the command line  */
   prefix_invocation = 0
   arg original_flow_args
   EXTRACT '/PENDING START 1 */'
   if pending.0 = 0 then                      /*  No START indicator  */
      starting_line = original_current_line
   else  /* SET PENDING OFF for the START indicator wont be necessary */
      starting_line = pending.1
   end
LOCATE ':'starting_line    /*  unnecessary if command line w/o START  */
/*  Insure that the starting line is OK                               */
EXTRACT '/ALT/EOF/FTYPE/INPMODE/LRECL/SIZE/TOF/ZONE/'
if tof.1 = 'ON' then                    /*  If you're at the top ...  */
   NEXT                          /*  I assume you want to start here  */
if eof.1 = 'ON' then
   if prefix_invocation then
      call exit '2 FLOW is invalid from the End of File line'
   else
      call exit '3 The current line must not be beyond the bottom ',
                                                     'line in the file'
/*  Process the (alphabetic) options                                  */
numeric_args = original_flow_args    /*  If these aren't purely  ...  */
 /* numeric parms then they will be by the time we're done with them  */
option_align = 0                             /*  Set default options  */
option_keep  = 0
do i = 1                                 /*  Loop for all parameters  */
   if i > words(numeric_args) then
      leave
   this_arg = subword(numeric_args,i,1)           /*  next parameter  */
   if datatype(this_arg) = 'NUM' | this_arg = '*' then
      /*  "*" is numeric as far as this routine is concerned          */
      iterate                  /*  Ignore numeric parameters for now  */
   select
      when abbrev('ALIGN',     this_arg,1) then option_align = 1
      when abbrev('KEEPINDENT',this_arg,1) then option_keep  = 1
      otherwise
         EMSG 'Invalid option "'this_arg'" - ignored'
   end   /*  select  */
   numeric_args = delword(numeric_args,i,1)     /*  Remove this parm  */
   /*  Keep the same value of "i" after the iteration takes place
       because the old argument i+1 is now i                          */
   i = i - 1
end
/*  Determine the desired values of the numeric parameters
    The line width specifications are determined as follows:
       input  left  margin = left  ZONE (always)
       input  right margin = right ZONE (always)
       output left  margin = left  ZONE or  left_margin
       output right margin = right ZONE or right_margin (or 73)       */
parse var numeric_args p1 p2 p3 x
if x Â¬= '' then                     /*  4 or more numeric parameters  */
   EMSG 'Extraneous numeric parameters have been ignored:' x
select
   when p3 Â¬= '' then do  /*  3 numeric parameters: lines left right  */
      #lines       = p1
       left_margin = p2
      right_margin = p3
      end
   when p2 Â¬= '' then do        /*  2 numeric parameters: left right  */
      #lines       = 0
       left_margin = p1
      right_margin = p2
      end
   when p1 Â¬= '' then do              /*  1 numeric parameter: right  */
      #lines       = 0
       left_margin = zone.1
      right_margin = p1
      end
   otherwise                                /*  0 numeric parameters  */
      #lines       = 0
       left_margin = zone.1
      right_margin = '*'        /*  Default will be calculated below  */
end   /*  select  */
/*  Allow "*" to be used to indicate any of the default values        */
if left_margin = '*' then
   left_margin = zone.1
if right_margin = '*' then
   if find('EXEC EXECCOMM XEDIT XEDITCOM', ftype.1) > 0 then
      right_margin = min(zone.2,73)
   else
      right_margin = zone.2
if #lines = '*' then
   #lines = 99999999
/*  Edit the values of the numeric parameters                         */
if #lines < 0 | #lines = 1 then
call exit '4 The line number specification must be positive (but not 1)'
if  left_margin < 1 |  left_margin > lrecl.1 then
   call exit '5 The left margin ('left_margin') must be between' ,
      '1 and LRECL ('lrecl.1')'
if right_margin < 1 | right_margin > lrecl.1 then
   call exit '6 The right margin ('right_margin') must be between' ,
      '1 and LRECL ('lrecl.1')'
if right_margin <= left_margin then
   call exit '7 The right margin ('right_margin') must be greater' ,
      'than the left margin ('left_margin')'
/*  The width of the input line is unrestricted since EXTRACT CURLINE,
    which has no restrictions, is used to obtain it.  The width of the
    output  line,  however,  is  restricted  to  255 bytes because  of
    restrictions imposed by the CMS stack  and XEDIT.  See  subroutine
    output_a_line for further comments.                               */
 input_line_width = zone.2       - zone.1      + 1
output_line_width = right_margin - left_margin + 1
if output_line_width > 255 then do
   say 'Caution: The output line width is greater than 255 bytes.'
   say 'Instead of using' left_margin 'thru' right_margin', the ' ,
      'margins will be' left_margin 'thru' left_margin + 254'.'
   say 'Do you wish to continue?'
   pull x
   if x Â¬= 'YES' then
      call exit 0
   right_margin = left_margin + 254
   /*  The following line isn't really needed, but don't you think it
       looks nice as documentation?                                   */
   output_line_width = 255
   end
/*  Look for an END indicator in the prefix area.  If it exists, it
    overrides the explicit or default value associated with the
    FLOW command itself.                                              */
EXTRACT '/PENDING END 1 * /'
select
   when pending.0 = 0 then                      /*  No END indicator  */
      nop
   when pending.1 < starting_line then
      EMSG 'The END indicator at line' pending.1 'has been ignored'
   otherwise
   /*  Because  FLOW  DELETEs the lines as it processes them, it  will
       not be necessary to SET PENDING OFF for the END indicator.   If
       an error occurs prior to reaching it, it will remain there;  in
       this case, let's say this is a nice feature.  If END is  placed
       on  the End of File line, it will also remain there; let's  say
       I'm lazy.                                                      */
      #lines = pending.1 - starting_line + 1
end   /*  select  */
/*  Final XEDIT preliminaries                                         */
if inpmode.1 = 'ON' then
   /*  This check is used because output_a_line currently enters input
       mode when outputting a line.  If input mode is already on,  the
       INPUT command has no effect (and gets rc 0), causing the queued
       lines  to  remain  queued,  and  everything goes downhill  from
       there.  Maybe some day, an alternative technique could be used.*/
   call exit '8 FLOW cannot be invoked from input mode'
PRESERVE
SET 'CASE   MIXED'  /*  to avoid upper case translation during input  */
SET 'ESCAPE OFF'         /*  to avoid misinterpreting # during input  */
SET 'IMAGE  OFF'                           /*  Retain tab characters  */
SET 'ZONE   1 *'       /*  so SHIFT RIGHT isn't affected by the zone  */
/*  Prepare for the actual FLOW process                               */
address COMMAND 'MAKEBUF'
comments_caution_issued = 0
comments_identified = 0
output_data         = ''
this_line           = ''
if option_keep then
   indent = 'dummy'                                /*  initial value  */
else
   indent = 0        /*  Output will always begin at the left margin  */
if #lines = 0 then                       /*  what the doctor ordered  */
   max_lines = 99999999    /*  End only on a blank line, not a count  */
else
   max_lines = #lines           /*  End on a count, not a blank line  */
/*  Read the next input line                                          */
do current_line = starting_line for max_lines
/*  may stop on the first blank line  */
   previous_line = this_line
   EXTRACT '/CURLINE/'     /*  Get the next input line even if > 255  */
   if left(curline.3,2) = '* ' | comments_identified then
      call process_a_comment_line
   /*  Ignore all data which is not between the input margins         */
   this_line = substr(curline.3,zone.1,input_line_width)
   if this_line = '' then do
                          /* A blank line!  What shall we do with it? */
      call process_a_blank_line
      if result then                       /*  Time to call it quits  */
         leave
      iterate                  /*  Continue with the next input line  */
      end   /*  blank line  */
   do i = 1 until substr(this_line,i,1) Â¬= ' '
                               /*  Find the first nonblank character  */
   end
   if option_keep then
                   /* See if the indentation status should be changed */
      if indent = 'dummy' then                        /*  first line  */
         indent = i - 1                 /*  number of leading spaces  */
      else if indent Â¬= i - 1 then do  /*Break if indentation changed */
         call output_a_line     /*  Complete the processing for data  */
         output_data = ''    /* which preceded change in indentation  */
         indent = i - 1
         end   /*  change in indentation  */
   DELETE 1                             /*  Delete line if not blank  */
   delete_rc = rc                             /*  Save for EOF check  */
   /*  Split the current line into words and write output line(s), if
       any, as needed                                                 */
   work_line = this_line
   do until work_line = ''
      parse var work_line this_word work_line  /*  Pick up next word  */
      right_1 = right(output_data,1)
      if datatype(right_1,'A') then
         spaces = 1
      else
         call determine_spacing
      new_line_width = length(output_data) + spaces + length(this_word)
      if indent + new_line_width <= output_line_width then
                                                /*  Append this word  */
         if output_data = '' then
            output_data = this_word
                     /*  no leading space at the start of a new line  */
         else /* one or two spaces between old text and the new word  */
            output_data = output_data||copies(' ',spaces)||this_word
      else do                 /*  New word won't fit on current line  */
         call output_a_line
         output_data = this_word             /*  Start the next line  */
         end
   end   /*  do until  */
   if delete_rc = 1 then           /*  EOF reached before blank line  */
      leave
end   /*  current_line  */
/*  Final clean up                                                    */
if current_line = starting_line & output_data = '' then
   /*  leave executed on the first iteration                          */
   MSG 'There is no data to be FLOWed'
else do
   call output_a_line 'noalign'                 /*  output last line  */
   SET 'ALT' alt.1 + 1 alt.2 + 1 /*  only update ALT counter(s) by 1  */
   end
CURSOR 'CMDLINE PRIORITY 30'      /*  same priority as the Enter key  */
RESTORE
call exit 0
/*                         Subroutines                                */
/*  Add  spaces  to  the  line  at output_data so it is both left  and
    right  justified,  occupying  exactly  output_line_width    bytes.
    Spaces  are  inserted  alternately  from  the left and from  the
    right of the line.                                                */
align_output_data:
left_pos  =     pos(' ',output_data)
right_pos = lastpos(' ',output_data)
if left_pos = 0 then                        /*  absolutely no spaces  */
   return                                   /*  What else can we do?  */
do i = 1 to output_line_width - length(output_data) - indent
   /*  one iteration for each space to be inserted (if any)           */
   if i % 2 = 0 then do                  /*  even: insert from right  */
      this_pos = right_pos
      if right_pos > 3 then   /*  We must prevent lastpos from starting < 1  */
         right_pos = lastpos(' ',output_data,right_pos-2)
      if right_pos < 2 then
         right_pos = lastpos(' ',output_data)         /*  Start over  */
      end   /*  even  */
   else do                                 /*  odd: insert from left  */
      this_pos = left_pos
      /*  There is no need to prevent pos from starting > max         */
      left_pos = pos(' ',output_data,left_pos+2)
      if left_pos = 0 then
         left_pos = pos(' ',output_data)              /*  Start over  */
      end   /*  odd  */
   output_data = insert(' ',output_data,this_pos)
end   /*  do i  */
return
/*  Determine the number of spaces to place after the current word    */
determine_spacing:
right_2 = right(output_data,2)
right_4 = right(output_data,4)
select
   when right_4 = 'e.g.' then spaces = 1
   when right_4 = 'i.e.' then spaces = 1
   when right_2 = '.)'   then spaces = 2
   when right_2 = '."'   then spaces = 2
   when right_2 = '.'''  then spaces = 2
   when right_1 = '.'    then spaces = 2
   when right_1 = '?'    then spaces = 2
   when right_1 = '!'    then spaces = 2
   otherwise                  spaces = 1
end   /*  select  */
return
/*  A blank line has been discovered
    End the current paragraph and prepare for the next                */
end_paragraph:
DELETE 1                               /*  Get rid of the blank line  */
delete_rc = rc
call output_a_line 'noalign' /*  Write out whatever we've got so far  */
/*  Output one blank line  (This is better than ADD because ADD leaves
    the new line highlighted)                                         */
'-1 INPUT  '
/*  Move from the blank line to the line after it which is the next
    input line                                                        */
DOWN 1
down_rc = rc
output_data = ''
return delete_rc + down_rc  /*  any old nonzero value if EOF reached  */
/*  A fatal error has occurred - exit                                 */
exit:
parse arg exit_rc message
if exit_rc Â¬= 0 & Â¬ prefix_invocation then
   CMSG 'FLOW' original_flow_args
if message Â¬= '' then
   EMSG message
if Â¬ prefix_invocation then
   /*  The final LOCATE command has no effect if FLOW was invoked as a
       prefix macro since XEDIT is going to restore the original
       position for us.  Unfortunately, he doesn't quite do the job
       properly if the FLOWed lines include the original current
       line.                                                          */
   LOCATE ':'original_current_line    /*Restore the original position */
exit exit_rc
/*  Output  one line.  The only other place in this macro where a line
    is written is at end_paragraph which only writes a blank line.
    Note:  In  the following subroutine, the new line must be  stacked
    (instead  of  adding  it  to  the INPUT subcommand) because  XEDIT
    commands  are  limited to 256 bytes, allowing less than 255  bytes
    (which can be attained by using the stack) for the actual data  to
    be input.  If this is really a severe problem it would be possible
    to  use  CAPPEND  to remove the restrictions, but that would  make
    this macro run even slower than it already does.                  */
output_a_line:
parse arg x                                     /*  may be "noalign"  */
if output_data = '' then
   return                                 /*  no sense doing nothing  */
if option_align & x Â¬= 'noalign' then
   call align_output_data
queue output_data                      /*  always starts in column 1  */
queue
'-1 INPUT'                                         /*  Output a line  */
SHIFT 'RIGHT' left_margin - 1 + indent
if comments_identified then
   OVERLAY '*'                                /*  always at column 1  */
DOWN 1      /*  Move from the new output line to the next input line  */
return
/*  Process a blank line.  This code logically belongs in the mainline
    but has been placed here for performance reasons.                 */
process_a_blank_line:
if #lines = 0 then        /*  The user wants to stop on a blank line  */
   return 1                                     /*  That's all folks  */
/*  The user wants to flow thru blank lines and stop at a line count
    or EOF                                                            */
if previous_line Â¬= '' then do         /*  A single blank line is OK  */
   call end_paragraph
   if result Â¬= 0 then                             /*  EOF I presume  */
      return 1                                  /*  That's all folks  */
   end   /*  single blank line  */
else do
   DELETE 1           /*  ... but additional blank lines are ignored  */
   if rc Â¬= 0 then            /*  EOF I presume - last line is blank  */
      /*  The file will end with the blank line inserted after the
          previous paragraph.  I suppose we could delete it (with
          -1 DELETE 1), but let's just leave it there for now.        */
      return 1                                  /*  That's all folks  */
   end   /*  multiple consecutive blank lines  */
return 0                             /*  Continue with the next line  */
/*  Process a line which is, or should be, a comment line.  Note that
    a comment line is one which begins with "* " in columns 1-2
    regardless of the ZONE or the left/right margins.  This code
    logically belongs in the mainline but has been placed here for
    performance reasons.                                              */
process_a_comment_line:
if left(curline.3,2) = '* ' then do       /*  This is a comment line  */
   curline.3 = overlay(' ',curline.3)       /*  Ignore the leading *  */
   if left_margin = 1 & Â¬ option_keep then
      call exit '9 The left margin must be greater than 1',
                                                ' when FLOWing comments'
   if current_line > starting_line & Â¬ comments_identified then
      /*  A comment line (the first one) has been identified, but it
          is preceded by non-comment line(s).  Assume that the lines
          are to be FLOWed together anyway.                           */
      EMSG 'Caution: Comment line(s) follow non-comment line(s)'
   comments_identified = 1
   return
   end   /*  *  */
/*  This is not a comment line, but it should have been one since it
    was preceded by comment line(s).  Assume that the lines are to be
    FLOWed together anyway.                                           */
if Â¬ comments_caution_issued then
   EMSG 'Caution: Comment line(s) are followed by non-comment line(s)'
comments_caution_issued = 1                        /*  only one EMSG  */
return

Dave Fraatz
Specialist
3M (USA)

