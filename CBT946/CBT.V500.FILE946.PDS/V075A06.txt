FILEList alternative using CMS Pipelines - part 2

This month we continue the code for FileLister, an alternative
to IBM's FILEList program that makes use of CMS Pipelines.

/* construct set buffer address order from row and column           */
/* parse the new and old input lines to get the command             */
parsecom: procedure expose oldcom header
    parse arg old , new
    /* Function:                                                    */
    /*     Parse the old and new screen lines to find out           */
    /*     what command the user gave in the 'filearea'.            */
    /*     This command will be parsed and expanded to a            */
    /*     full command, that can be executed directly.             */
    /* Arguments:                                                   */
    /*     old                  old screen line (before typing)     */
    /*     new                  new screen line (after typing)      */
    /* Returns:                                                     */
    /*     yesno                old command requested (yes or no)   */
    /*     fn                   filename of the requested file      */
    /*     ft                   filetype of the requested file      */
    /*     fm                   filemode of the requested file      */
    /*     command              fully parsed and expanded command   */
    if (left(space(new), 1) = '?') then do
        /* old command redisplay requested                          */
        yesno = 'YES'
        new = oldcom
    end
    else do
        yesno = 'NO'
    end
    /* overlay the old line with the new one, to find the command   */
    new = overlay(new, old, 1)
    command = ''
    co = 0
    /* iterate until lines match. Non-matching part is the command  */
    do i = 1 to min(length(new), length(old))
        if (pos(substr(new, i), old) = 0) then iterate
        co = pos(substr(new, i), old)-1
        leave
    end
    command = translate(substr(new, 1, co))   /* command into upper */
    if (space(command) = '=') then do
        /* reissue the last command                                 */
        command = space(oldcom)
    end
    oldcom = space(command)
    /* find the filename, filetype, and filemode for the command    */
    parse value file(old) with fn ft fm .
    /* parse the command like IBM's filelist does                   */
    found = 0
    do until pos('/', command) = 0
        /* find the / character                                     */
        parse var command '/'item
        item = left(item, 1)
        fo = (find(command, '/'item) ¬= 0)
        /* find out what the user wants                             */
        select
            when (item = ' ') then ch = space(fn ft fm)
            when (item = 'N') then ch = fn
            when (item = 'T') then ch = ft
            when (item = 'M') then ch = fm
            otherwise iterate
        end
        if (fo) then do
            /* insert the fn, ft and/or the fm into the command     */
            found = 1
            po1 = wordindex(command, find(command, '/'item))
            po2 = wordindex(command, find(command, '/'item)+1)
            if (po2 = 0) then do
                /* just append it                                   */
                command = substr(command, 1, po1-1) ch
            end
            else do
             /* insert it                                           */
             command = substr(command, 1, po1-1) ch substr(command, po2)
            end
        end
    end
    /* append the complete file when not supplied                   */
    if (¬found) then do
        if (space(command) ¬= '') then do
            command = command fn ft fm
        end
    end
    return space(yesno fn ft fm command)
/* create a list mask                                               */
list: procedure expose header fs.
    arg string
    /* Function:                                                    */
    /*     Determine the filelist mask to be used.                  */
    /* Arguments:                                                   */
    /*     string               requested file mask                 */
    /* Returns:                                                     */
    /*     fname                filename of the requested list      */
    /*     ftype                filetype of the requested list      */
    /*     fmode                filemode of the requested list      */
    /* set defaults and initialize                                  */
    if (string = '') then string = 'A'
    freemodes = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    list = ''
    /* get all disks and virtual DASD in REXX arrays                */
    'pipe(name q_disk end \)|',       /* pipeline name              */
        'cms query disk |',           /* query the disks            */
        'drop 1 |',                   /* drop the header            */
        'a: fanout |',                /* copy the stream            */
        'spec word 2 1 |',            /* get the cuu id             */
        'strip both |',               /* drop spaces                */
        'stem cuu.',                  /* into the REXX array cuu    */
        '\ var freemodes |',          /* from all possible modes    */
        'split after A-Z |',          /* all on separate lines      */
        'l: lookup matching |',       /* find all not used modes    */
        'stem mode.',                 /* find all used modes        */
        '\ a: |',                     /* copy the stream here       */
            'spec word 3 1.1 |',      /* get the filemodes          */
            'strip both |',           /* drop the spaces            */
            'l: |',                   /* into look-up               */
            'join * |',               /* make them into 1 string    */
            'var freemodes'           /* into var freemodes         */
    /* check if the parameter is a filemode or an accessed disk     */
    do i = 1 to mode.0
        if ((mode.i = string) | (cuu.i = string)) then do
            /* yes it is. this is the list                          */
            return '* *' mode.i
        end
    end
    /* is the string a disk address?                                */
    if (datatype(string, 'X') & length(string) = 3) then do
        /* access the disk and show the list                        */
        mode = left(freemodes, 1)
        'pipe command ACCESS 'string mode' | hole'
        if (rc ¬= 0) then do
            call exiterror rc 'E' 'Disk 'mode'('space(string)')' ,
                                could not be accessed. Can''t continue.'
        end
        return '* *' mode
    end
    /* come here it should be a list                                */
    parse var string fname ftype fmode .
    /* check the filename                                           */
    select
        when (pos('*', fname) ¬= 0) then nop
        when (pos('%', fname) ¬= 0) then nop
        when (length(fname)    = 7) then fname = fname || '*'
        when (length(fname)    = 8) then nop
        when (length(fname)    > 8) then nop
        otherwise fname = '*' || fname || '*'
    end
    /* check the filetype                                           */
    select
        when (pos('*', ftype) ¬= 0) then nop
        when (pos('%', ftype) ¬= 0) then nop
        when (length(ftype)    = 0) then ftype = '*'
        when (length(ftype)    = 7) then ftype = ftype || '*'
        when (length(ftype)    = 8) then nop
        when (length(ftype)    > 8) then nop
        otherwise ftype = '*' || ftype || '*'
    end
    /* check the filemode                                           */
    if (fmode = '') then fmode = '*'
    /* and return the list mask                                     */
    return fname ftype fmode
/* return the filename                                              */
file: procedure expose header
    parse arg line
    /* Function:                                                    */
    /*     Find out what filename was on the line.                  */
    /* Arguments:                                                   */
    /*     line                 complete screen line                */
    /* Returns:                                                     */
    /*     fn                   filename of the file on this line   */
    /*     ft                   filetype of the file on this line   */
    /*     fm                   filemode of the file on this line   */
    if (left(line, 1) = '*') then parse var line . line
    if (left(line, 1) = '¬') then parse var line . line
    parse var line fn ft fm .
    return space(fn ft left(fm, 1))
/* execute the command                                              */
execcom: procedure expose fs. line. erased nocomm header
    parse arg ln fn ft fm execcommand
    /* Function:                                                    */
    /*     Execute a command that was given in the 'filearea'       */
    /*     and determine if the file the command was executed on    */
    /*     still exists. If it does, get the new fileinfo.          */
    /*     Use address command to be able to use mixed case         */
    /*     file identifiers.                                        */
    /* Arguments:                                                   */
    /*     ln                   linenumber the command is on        */
    /*     fn                   filename to execute the command on  */
    /*     ft                   filetype to execute the command on  */
    /*     fm                   filemode to execute the command on  */
    /*     execcommand          command to execute                  */
    /* Returns:                                                     */
    /*     nothing                                                  */
    /* translate the command itself into uppercase                  */
    parse var execcommand com parms
    execcommand = translate(com) parms
    invalid = 0
    /* first try to run the command with address command            */
    address command execcommand
    ret = rc
    if (ret = -3) then do
       /* command did not exist. try it normal                      */
       execcommand
       ret = rc
       if (ret = -3) then do
          /* command did not exist. try the EXEC                    */
          address command 'STATE 'word(execcommand, 1)' EXEC *'
          if (rc ¬= 0) then do
              invalid = 1
              ret = 0
          end
          else do
              exec execcommand
              ret = rc
          end
       end
    end
    /* check if the command was valid                               */
    if (invalid) then do
        /* the command was invalid tell the user                    */
        line.ln = substr(line.ln, 1, 26) || fs.high || nocomm
    end
    else do
        /* check if the file still exists                           */
        address command 'PIPE STATE 'fn ft fm' | VAR fil'
        if (rc ¬= 0) then do
            /* the file's gone. tell the user                       */
            line.ln = substr(line.ln, 1, 26) || fs.high || erased
        end
        else do
            /* the file is still there. get the new info            */
            line.ln = left('*', 6) || fil
        end
    end
    /* tell the user if the command was executed in the right way   */
    if (ret ¬= 0) then do
        l = max(length(ret), 6)
        line.ln = '¬'left(ret,l-1) || substr(line.ln, l+1)
    end
    else do
        line.ln = '*' || substr(line.ln, 2)
    end
    /* and return                                                   */
    return
/* execute a command from the command line                          */
executecommand: procedure expose header message
    parse arg execcommand
    /* Function:                                                    */
    /*     Execute a command that was given on the command line.    */
    /*     Use address command to be able to use mixed case         */
    /*     file identifiers.                                        */
    /* Arguments:                                                   */
    /*     execcommand          command to execute                  */
    /* Returns:                                                     */
    /*     nothing                                                  */
    /* translate the command itself into uppercase                  */
    parse var execcommand com parms
    execcommand = translate(com) parms
    /* first try to run the command with address command            */
    invalid = 0
    address command execcommand
    ret = rc
    if (ret = -3) then do
        /* command did not exist. try it normal                     */
        execcommand
        ret = rc
        if (ret = -3) then do
            /* command did not exist. try the EXEC                  */
            address command 'STATE 'word(execcommand, 1)' EXEC *'
            if (rc ¬= 0) then do
                ret = 0
                invalid = 1
            end
            else do
                exec execcommand
                ret = rc
            end
        end
    end
    /* check the return codes                                       */
    if (invalid) then do
        message = 'Unknown CP/CMS command given:' word(execcommand, 1)
    end
    else do
        if (ret ¬= 0) then do
            message = 'Command 'strip(left(word(execcommand, 1), 25)) ,
                      'ended with returncode 'ret
        end
    end
    /* and return                                                   */
    return
/* get the wanted files                                             */
getlist: procedure expose line. header listtofind ,
                          files files_ret fs.
    arg requestedlist tostack mask
    /* Function:                                                    */
    /*     Construct the REXX array line. So that it contains       */
    /*     all the requested file information.                      */
    /* Arguments:                                                   */
    /*     requestedlist        is this a file with filenames?      */
    /*     tostack              place the output onto the stack?    */
    /*     mask                 filemask if not a list              */
    /* Returns:                                                     */
    /*     nothing                                                  */
    if (requestedlist) then do
        address command 'STATE 'listtofind
        if rc ¬= 0 then do
            /* list not found. maybe deleted from within FileLister */
            parse source . . s_name s_type s_mode .
         notfound = 'The requested list ('listtofind') cannot be found.'
            helpline = 'Please quit 's_name' and restart.'
            ln       = (fs.rows % 2 - 2)
            line.    = fs.high
            line.ln  = fs.high || center(notfound, fs.cols-2)
            ln       = (fs.rows % 2 + 2)
            line.ln  = fs.high || center(helpline, fs.cols-2)
            line.0   = ln + 4
            cursor   = sba(1, 1) || fs.ic
            pan = 1
            return
        end
        /* do not sort the list. just display it as it is.          */
        'pipe(name list end \)|',
            '< 'listtofind' |',       /* read the file              */
            'nlocate /'substr(header, 6)'/ |',   /* use own files 2 */
            'spec 1-* 1 / A A A/ next |',    /* always three words  */
            'spec word 1-3 1 |',      /* just take the filespec     */
            'state |',                /* is it there?               */
            'nfind DMSLST |',         /* if not, drop it            */
            'strip both |',           /* drop empty lines           */
            'spec /      / 1 1-* next |',
            'a: count lines |',
            'stem line.',
            '\ a: | var files'
    end
    else do
        'pipe(name flist end \)|',
            'cms listfile 'mask' ( date noh |',       /* list files */
            'nfind DMSLST |',         /* drop weird messages        */
            'strip both |',           /* drop empty places          */
            'xlate 57.1 40 f0 |',     /* translate space into 0     */
            'xlate 66.1 40 f0 |',
            'sort 63.2 des 57.2 des 60.2 des 63-* des |',
            'xlate 57.1 f0 40 |',
            'xlate 66.1 f0 40 |',     /* and back again             */
            'strip both |',
            'spec /      / 1 1-* next |',
            'a: count lines |',
            'stem line.',
            '\ a: | var files'
    end
    file_ret = rc
    if tostack then do
        /* put the complete list onto the stack                     */
        'pipe (name tostack)|',
            'stem line. |',
            'strip both |',
            'spec /* / 1 1-* next |',
            'stack'
        tostack = 0
        exit file_ret
    end
    return
/* display an error message and quit the program                    */
exiterror: procedure expose fs. header
    parse source . . s_name s_type s_mode .
    parse arg ret sevcode errormes
    /* Function:                                                    */
    /*     Quit the program with an error message and a certain     */
    /*     return code.                                             */
    /* Arguments:                                                   */
    /*     ret                  returncode to quit with             */
    /*     sevcode              type of error message (E or I)      */
    /*     errormes             message to quit with                */
    /* Returns:                                                     */
    /*     nothing                                                  */
    /* prepare complete error message, including 10 pos. prefix     */
    ermsg = left(s_name || s_type || s_mode, 6, '_') || ,
            right(ret, 3, 0) || sevcode fs.high || errormes || fs.low
    /* use execio, because pipes emsg appends a dot. (stupid!!)     */
    'execio 1 emsg ( string 'ermsg
    exit ret
/* display help                                                     */
help: procedure expose fs.
    parse source . . s_name s_type s_mode .
    parse arg fromwhere .
    /* Function:                                                    */
    /*     Display the help panels and let the user scroll          */
    /*     around in them.                                          */
    /* Arguments:                                                   */
    /*     fromwhere            called from cms command or fl       */
    /*                          can be 'initial' or 'from_list'     */
    /* Returns:                                                     */
    /*     nothing                                                  */
    'vmfclear'
    pan     = 1
    oldcom  = ''
    offset  = fs.rows % 2
    header1 = center(' FileLister help ', fs.cols-2, '-')
    header2 = ' '
    trail1  = ' '
    if (fromwhere = 'initial') then do
        trail2  = '   3=Quit       7=Backward      8=Forward         ' ,
                  '9=Top             10=Bottom'
    end
    else do
        trail2  = '   3=Return     7=Backward      8=Forward         ' ,
                  '9=Top             10=Bottom'
    end
    resp    = ''
    /* select what control codes to use                             */
    if (fs.rows > 24) then ctrl = fs.operwa || fs.wcc
                      else ctrl = fs.operw  || fs.wcc
    call init_h_lines
    do until resp = 'pf03' | resp = 'pf15'
        cursor  = sba(1, 1) || fs.ic
        /* start lines                                              */
        screen = sba(1, 1)         || fs.high || header1 ,
                 sba(2, 1)         || fs.high || header2 ,
                 sba(fs.rows-1, 1) || fs.high || trail1  ,
                 sba(fs.rows-0, 1) || fs.high || trail2
        /* build a one line screen string (with position info)      */
        do i = pan to fs.rows+pan-5
            ro = i-pan+3                  /* calculate offset       */
            screen = screen || sba(ro, 1) || fs.low || hline.i
        end
        /* create the final screen line                             */
        screen = ctrl || screen || cursor
        /* display the screen and read the input.                   */
        'pipe(name help_screen end \)|',
            'var screen |',               /* display screen         */
            'fullscr noclose condread |', /* read entries           */
            'split 'x2c(11)' |',          /* split the on cr        */
            'resp: drop 1 |',             /* drop the first one     */
            'stem inp.',                  /* into a REXX array      */
            '\ resp: | var resp'          /* get the response key   */
        select
            /* decode the pressed accept key                        */
            when (left(resp, 1) = "'") then resp = 'enter'
            when (left(resp, 1) = "-") then resp = 'sysreq'
            when (left(resp, 1) = "_") then resp = 'clear'
            when (left(resp, 1) = ">") then resp = 'pa02'
            when (left(resp, 1) = "1") then resp = 'pf01'
            when (left(resp, 1) = "2") then resp = 'pf02'
            when (left(resp, 1) = "3") then resp = 'pf03'
            when (left(resp, 1) = "4") then resp = 'pf04'
            when (left(resp, 1) = "5") then resp = 'pf05'
            when (left(resp, 1) = "6") then resp = 'pf06'
            when (left(resp, 1) = "7") then resp = 'pf07'
            when (left(resp, 1) = "8") then resp = 'pf08'
            when (left(resp, 1) = "9") then resp = 'pf09'
            when (left(resp, 1) = ":") then resp = 'pf10'
            when (left(resp, 1) = "#") then resp = 'pf11'
            when (left(resp, 1) = "@") then resp = 'pf12'
            when (left(resp, 1) = "A") then resp = 'pf13'
            when (left(resp, 1) = "B") then resp = 'pf14'
            when (left(resp, 1) = "C") then resp = 'pf15'
            when (left(resp, 1) = "D") then resp = 'pf16'
            when (left(resp, 1) = "E") then resp = 'pf17'
            when (left(resp, 1) = "F") then resp = 'pf18'
            when (left(resp, 1) = "G") then resp = 'pf19'
            when (left(resp, 1) = "H") then resp = 'pf20'
            when (left(resp, 1) = "I") then resp = 'pf21'
            when (left(resp, 1) = "Ý") then resp = 'pf22'
            when (left(resp, 1) = ".") then resp = 'pf23'
            when (left(resp, 1) = "<") then resp = 'pf24'
            otherwise resp = 'unknown'
        end
        select
          when (resp = 'pf07' | resp = 'pf19') then pan = pan - offset
          when (resp = 'pf08' | resp = 'pf20') then pan = pan + offset
          when (resp = 'pf09' | resp = 'pf21') then pan = 1
          when (resp = 'pf10' | resp = 'pf22') then pan = hline.0-offset
            otherwise nop
        end
        /* correct the panel offset                                */
        pan = min(pan, hline.0-offset)
        pan = max(pan, 1)
    end
    return
/* initialize the help                                              */
init_h_lines: procedure expose fs. hline.
    parse source . . s_name s_type s_mode .
    /* Function:                                                    */
    /*     Initialize the REXX array hline. which is used to        */
    /*     display all the help panels.                             */
    /* Arguments:                                                   */
    /*     none                                                     */
    /* Returns:                                                     */
    /*     nothing                                                  */
    /* It would be nicer to have another way of initializing the    */
    /* help array, but every other way gives problems when          */
    /* compiling this EXEC. The only solution would be to compile   */
    /* with the sourceline option, but then the complete source     */
    /* would be appended after the compiled EXEC. This is not       */
    /* a good idea, because everybody could 'steal' the original    */
    /* code. So I chose this, rather bad, way.                      */
    hline. = ""
    hline.1   = "                                    FileLister"
    hline.2   = "                                    ----------"
    hline.3   = "                "fs.high"Created by Ton Kersten"fs.low
    hline.4   = "  "
    hline.5   = "  "
    hline.6   = "  The FileLister  command displays  a fullscreen ",
                                          "list  of selected  files. In"
    hline.7   = "  FileLister, you  can perform  any CMS  operations",
                                            " such  as EDIT,  COPY, and"
    hline.8   = "  ERASE by entering the command in the  input area",
                                           " immediately to the left of"
    hline.9   = "  each file-id  on the screen. You  can also issue",
                                           " FileLister  subcommands to"
    hline.10  = "  sort the displayed  data, or to enter a new  ",
                                        "FileLister level that displays"
    hline.11  = "  another set of files. The format of the FileLister",
                                                          " command is:"
    hline.12  = "  "
    hline.13  = " +-------------+-------------------------------------+"
    hline.14  = " |  FileLister | <fname <ftype <fmode>>> <(options)> |"
    hline.15  = " +-------------+-------------------------------------+"
    hline.16  = "  "
    hline.17  = "            where:"
    hline.18  = "  "
    hline.19  = " fname ftype fmode   specify the file(s) to be listed."
    hline.20  = "                               The default is '* * A'."
    hline.21  = "  "
    hline.22  = "    options             specify the FileLister option."
    hline.23  = "  "
    hline.24  = "  "
    hline.25  = " "fs.high"Notes:"fs.low
    hline.26  = "  "
    hline.27  = "  You can specify a  filelist mask, but if you ",
                                        "don't, the default  of '* * A'"
    hline.28  = "  is used.  When you specify  only one letter and ",
                                           " a disk with  that filemode"
    hline.29  = "  exists, then  the filelist for that disk will ",
                                                        " be displayed."
    hline.30  = "       Example:  "s_name" Q results in "s_name" * * Q."
    hline.31  = "  "
    hline.32  = "  If you specify  a filemask of three hexadecimal ",
                                           "digits,  then the disk will"
    hline.33  = "  be accessed and the filemask of that disk will be",
                                                          "  displayed."
    hline.34  = "             Example: "s_name" 100"
    hline.35  = "  will display a filelist of the disk that's linked",
                                                         " as disk 100."
    hline.36  = "  "
    hline.37  = "  Every other mask you enter will result ",
                                        "in "s_name" *fn* *ft* <fm | *>"
    hline.38  = "  You can override this effect by ",
                            "calling "s_name" with the 'NOMASK' option."
    hline.39  = "  "
    hline.40  = "  "
    hline.41  = " "fs.high"Options"fs.low
    hline.42  = "  "
    hline.43  = "  FileLister has got some options you can specify:"
    hline.44  = "      1) LIST     With this option it's possible to ",
                                             "give a list to FileLister"
    hline.45  = "       with files to display. The file should contain:"
    hline.46  = "                            filename filetype filemode"
    hline.47  = "                  all on a line on their own."
    hline.48  = "                Example: "s_name" ( LIST EXAMP FLIST A"
    hline.49  = "      Defaults for the list are: filename --> "userid()
    hline.50  = "                                    filetype --> FLIST"
    hline.51  = "                                    filemode --> A"
    hline.52  = "      2) NOMASK   With this option you can overrule ",
                                                "the fact that "s_name""
    hline.53  = "              will set up a mask for files to display."
    hline.54  = "      3) STACK    All the lines that normally are ",
                                                 "displayed are now put"
    hline.55  = "                onto the stack and "s_name" will exit."
    hline.56  = "             Stacks one line for each file as follows:"
    hline.57  = "  * fn ft fm fo lrecl recs blocks date time"
    hline.58  = "   | |  |  |  |  |     |    |      |    |"
    hline.59  = "   | |  |  |  |  |     |    |      |    the filetime"
    hline.60  = "   | |  |  |  |  |     |    |      the filedate"
    hline.61  = "   | |  |  |  |  |     |    the number of used blocks"
    hline.62  = "   | |  |  |  |  |     the number of records"
    hline.63  = "   | |  |  |  |  the record length"
    hline.64  = "   | |  |  |  the record format"
    hline.65  = "   | |  |  the displayed filemode"
    hline.66  = "   | |  the displayed filetype"
    hline.67  = "   | the displayed filename"
    hline.68  = "   to make it a comment, in case CMS reads it"
    hline.69  = "      4) HELP     Display this help screen."
    hline.70  = "              This is the same as typing '"s_name" ?'."
    hline.71  = "  "
    hline.72  = "  "
    hline.73  = " "fs.high"Using the input area"fs.low
    hline.74  = "  "
    hline.75  = "  The  user input  area in  front of  the file-ids ",
                                           " may be  used to  enter any"
    hline.76  = "  command as  in the normal CMS  environment, to ",
                                          "execute CMS/CP  functions or"
    hline.77  = "  to invoke  an EXEC. No  special indication has ",
                                         " to be provided  to identify"
    hline.78  = "  that the command is for CP or that it is an EXEC."
    hline.79  = "  "
    hline.80  = "  If the file-id (or  part of it) is to be inserted ",
                                            "in  the command entered in"
    hline.81  = "  the user input  area, the special indicator ",
                                       " / can be used  anywhere in the"
    hline.82  = "  command sequence, as follows:"
    hline.83  = "  "
    hline.84  = "       /  - insert the complete file-id"
    hline.85  = "       /n - insert the filename"
    hline.86  = "       /t - insert the filetype"
    hline.87  = "       /m - insert the filemode"
    hline.88  = "  "
    hline.89  = "  If not  explicitly specified, FileLister  will ",
                                         "append the entire  file-id to"
    hline.90  = "  the  user  command  area.  For   example,  if  ",
                                         "'ERASE'  alone  is  entered,"
    hline.91  = "  FileLister  will  generate  the  command string  ",
                                            "'ERASE  filename  filetype"
    hline.92  = "  filemode' and pass it to CMS for execution."
    hline.93  = "  "
    hline.94  = "  When all  input fields  are processed,  the screen",
                                             "  is redisplayed  and the"
    hline.95  = "  input area is  changed to indicate what happened. ",
                                            "If  the first character of"
    hline.96  = "  the input area is displayed as:"
    hline.97  = "  "
    hline.98  = " *  the command was valid and gave a zero return code."
    hline.99  = " ¬rc   the command gave a non-zero return code ",
                                              "(shown following the ¬)."
    hline.100 = "  "
    hline.101 = "  Examples of Using the Input Area"
    hline.102 = "  "
    hline.103 = "  Fileid     | Input Area Entry   | Resulting Command"
    hline.104 = "  -----------+--------------------+------------------"
    hline.105 = "  fn1 ft1 a1 | erase              | erase fn1 ft1 a1"
    hline.106 = "  fn2 ft2 a1 | assemble /n        | assemble fn2"
    hline.107 = "  fn3 ft3 a0 | copy / = = b1 (rep | copy fn3 ft3 a0 ",
                                                           "= = b1 (rep"
    hline.108 = "  "
    hline.109 = "  "
    hline.110 = " "fs.high"Subcommands"fs.low
    hline.111 = "  "
    hline.112 = "  There are some subcommands you can use."
    hline.113 = "  1) =   The = subcommand reissues the last given ",
                                                       "command again."
    hline.114 = "         This works the same as it does in Filelist"
    hline.115 = "  2) ?   The ? subcommand given in the prefix area",
                                                     " redisplays this"
    hline.116 = "         command on the commandline, where it can ",
                                                         "be edited or"
    hline.117 = "         submitted. Placed on the commandline it "
    hline.118 = "         redisplays the last command given."
    hline.119 = " 3) &  Used on the commandline, the command will be "
    hline.120 = "          executed and redisplayed."
    hline.121 = "  4) /st  Locate the string 'st' in the complete list."
    hline.122 = "  5) ALL /st  All lines containing 'st' will be",
                                                            " selected."
    hline.123 = "      Typing ALL with no parameter refreshes the list."
    hline.124 = "  6) TOP      Go to the top of the list."
    hline.125 = "  7) BOT      Go to the bottom of the list."
    hline.126 = "  8) UP       Go one page up."
    hline.127 = "  9) DOWN     Go one page down."
    hline.128 = " 10) +nnn     Go down nnn lines."
    hline.129 = " 11) -nnn     Go up nnn lines."
    hline.130 = " 12) PFN      Toggle the display of the function keys."
    hline.131 = " 13) HELP     Display this help."
    hline.132 = " 14) SSIZE    Sort on filesize."
    hline.133 = " 15) SNAME    Sort on filename."
    hline.134 = " 16) STYPE    Sort on filetype."
    hline.0 = 134
    return

Ton Kersten
System Manager (The Netherlands)
