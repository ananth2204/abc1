PROP routing routine (continued)

This month we continue the article that gives the macros
necessary to allow a CMS user to add or delete himself from an
'alternative operator' list and receive messages from PROP.


QMNT MACRO

         MACRO
&LABEL   QMNT  &TYPE,                  TYPE OF QUEUE MAINTENANCE       X
               &P1,                    Q HEAD POINTER                  X
               &P2,                    Q ELEMENT POINTER               X
               &P3,                    LENGTH (FIND), OFFSET (LOC)     X
               &P4,                    OFFSET   FLAG1 PARAMETER        X
               &P5,                    FLAG2 PARAMETER                 X
               &POS=NEXT,              STARTING LOCATION (LOC,GET,PUT) X
               &LOAD=,                 ENTRY ADDR (NO VCON GENERATED)  X
               &NORMAL,                BRANCH ON ZERO CC FROM RTN      X
               &ERROR=,                BRANCH ON NONZERO CC FROM RTN   X
               &EMPTY=,                BRANCH ON QEMPTY CONDITION      X
               &SERROR=,               BRANCH ON SEVERE ERROR CONDITIONX
               &NFOUND=,               BRANCH ON NOT_FOUND CONDITION   X
               &MF=                    MACRO FORM (E OR L)
.* QUEUE MAINTENANCE MACRO                                            *
.* PARAMETERS                                                         *
.*    TYPE   - ADD,GET,PUSH,POP,MOVE,FIND,PURGE                       *
.*    P1     - TARGET QUEUE DESCRIPTOR CONTROL BLOCK (ALL TYPES)      *
.*    P2     - QUEUE ELEMENT POINTER (ADD,GET,PUSH,POP)               *
.*           - SOURCE QUEUE DESCRIPTOR CONTROL BLOCK (MOVE)           *
.*    P3     - LENGTH OF ELEMENT KEY (FIND)                           *
.*    P4     - OFFSET INTO ELEMENT OF KEY (FIND)                      *
.*           - FLAG1 PARAMETER                                        *
.*    P5     - FLAG2 PARAMETER                                        *
.*    LOAD   - RX-TYPE ADDRESS FROM WHICH ENTRY TO QMNT ROUTINE CAN   *
.*             BE LOADED                                              *
.*    MF     - (BLANK - EXECUTE FORM, INLINE PARAMETER LIST           *
.*           - L (LIST FORM, INLINE PARM LIST)                        *
.*           - E,PLIST (EXECUTE FORM, REMOTE PARAMETER LIST           *
.*           - L,PLIST (LIST FORM, INITIALIZE REMOTE PARAMETER LIST)  *
         LCLC  &P1A,&P2A,&P3A,&P4A,&P5A,&PLIST,&EPNAME,&LOADA,&POSA
         LCLB  &E1,&E2,&L1,&L2,&LIST,&EXEC,&RMF,&MFREG,&NOPL,&VER(5)
         LCLB  &P5NOT,&SRCH
         LCLA  &QPARM,&COND,&FLAG,&POSB
&COND    SETA  0
&FLAG    SETA  0
&L1      SETB  ('&MF' EQ 'L')
&E1      SETB  ('&MF' EQ 'E')
&RMF     SETB  0
&NOPL    SETB  1
&SRCH    SETB  0
         AIF   (&L1 OR &E1).CONT1
         AIF   (T'&MF EQ 'O').CONT2
         AIF   (N'&MF NE 2).ERR2
&L2      SETB  ('&MF(1)' EQ 'L')
&E2      SETB  ('&MF(1)' EQ 'E')
         AIF   (NOT &L2 AND NOT &E2).ERR1
&RMF     SETB  1
&PLIST   SETC  '&MF(2)'
         AIF   ('&MF(2)'(1,1) NE '(').CONT1
&PLIST   SETC  '0(,'.'&MF(2)'.')'
         AGO   .CONT1
.CONT2   ANOP
&L1      SETB  1
&E1      SETB  1
.CONT1   ANOP
&P1A     SETC  '0'
         AIF   (T'&P1 EQ 'O').P1OKAY
&VER(1)  SETB  1
&P1A     SETC  '&P1'
         AIF   ('&P1A'(1,1) NE '(').P1OKAY
&P1A     SETC  '0(,'.'&P1A'.')'
.P1OKAY  ANOP
&P2A     SETC  '0'
         AIF   (T'&P2 EQ 'O').P2OKAY
&VER(2)  SETB  1
&P2A     SETC  '&P2'
         AIF   ('&P2A'(1,1) NE '(').P2OKAY
&P2A     SETC  '0(,'.'&P2A'.')'
.P2OKAY  ANOP
&P3A     SETC  '0'
         AIF   (T'&P3 EQ 'O').P3AOKAY
&VER(3)  SETB  1
&P3A     SETC  '&P3'
         AIF   ('&P3A'(1,1) NE '(').P3AOKAY
&P3A     SETC  '0(,'.'&P3A'.')'
.P3AOKAY ANOP
&P4A     SETC  '0'
         AIF   (T'&P4 EQ 'O').P4AOKAY
&VER(4)  SETB  1
&P4A     SETC  '&P4'
         AIF   ('&P4A'(1,1) NE '(').P4AOKAY
&P4A     SETC  '0(,'.'&P4A'.')'
.P4AOKAY ANOP
         AIF   (T'&P5 EQ 'O').P5OKAY
&VER(5)  SETB  1
.P5OKAY  ANOP
&LIST    SETB  (&L1 OR &L2)
&EXEC    SETB  (&E1 OR &E2)
&EPNAME  SETC  'Q'.'&TYPE'
         AIF   ('&TYPE' EQ 'LOC').CHK1
         AIF   ('&TYPE' EQ 'GET').CHK1
         AIF   ('&TYPE' EQ 'PUT').CHK1
         AIF   ('&TYPE' EQ 'ADD').CHK1
         AIF   ('&TYPE' EQ 'PUSH').CHK1
         AIF   ('&TYPE' EQ 'MOVE').CHK1
         AIF   ('&TYPE' EQ 'POP').CHK1
         AIF   ('&TYPE' EQ 'PURGE').CHK1
         AIF   ('&TYPE' EQ 'FIND').CHK1
         AIF   ('&TYPE' EQ 'BUILD').CHK3
         AIF   ('&TYPE' EQ 'FRET').CHK2
         AIF   ('&TYPE' NE '').ERR4
         AIF   (&LIST).TYPEOK
         AGO   .ERR4
.CHK1    ANOP
         AIF   (NOT &VER(1)).ERRCHK1
         AIF   ('&TYPE' EQ 'POP').TYPEOK
         AIF   ('&TYPE' EQ 'PURGE').TYPEOK
         AIF   ('&TYPE' EQ 'LOC').CHK5
         AIF   ('&TYPE' EQ 'GET').TYPEOK
.CHK2    ANOP
         AIF   (NOT &VER(2)).ERRCHK2
         AIF   ('&TYPE' EQ 'ADD').TYPEOK
         AIF   ('&TYPE' EQ 'PUT').TYPEOK
         AIF   ('&TYPE' EQ 'PUSH').TYPEOK
         AIF   ('&TYPE' EQ 'MOVE').TYPEOK
         AIF   ('&TYPE' EQ 'FRET').TYPEOK
         AIF   ('&TYPE' EQ 'FIND').CHK5
.CHK3    ANOP
         AIF   (NOT &VER(3)).ERRCHK3
.* FALL THROUGH FOR TYPE=BUILD
&QPARM   SETA  0
         AIF   ('&P4' NE 'NUCLEUS').T4A
&QPARM   SETA  &QPARM+1
.T4A     ANOP
         AIF   ('&P5' NE 'BALR').T4B
&QPARM   SETA  &QPARM+2
.T4B     ANOP
&P4A     SETC  '&QPARM'
         AGO   .TYPEOK
.CHK5    ANOP
&SRCH    SETB  1
&COND    SETA  15
         AIF   (NOT &VER(5)).TYPEOK
&P5A     SETC  '&P5'
&P5NOT   SETB  ('&P5'(1,1) EQ 'N')
         AIF   (NOT &P5NOT).CHK5A
&P5A     SETC  '&P5'(1,K'&P5)
.CHK5A   ANOP
         AIF   ('&P5A' EQ 'EXT').CHK5XIT
&COND    SETA  8
         AIF   ('&P5A' EQ 'EQ').CHK5XIT
&COND    SETA  2
         AIF   ('&P5A' EQ 'GT').CHK5XIT
&COND    SETA  4
         AIF   ('&P5A' EQ 'LT').CHK5XIT
&COND    SETA  10
         AIF   ('&P5A' EQ 'GE').CHK5XIT
&COND    SETA  12
         AIF   ('&P5A' EQ 'LE').CHK5XIT
&COND    SETA  0
         AIF   ('&P5' EQ 'COUNT').TYPEOK
         AGO   .ERRCHK5
.CHK5XIT ANOP
         AIF   (NOT &P5NOT).TYPEOK
&COND    SETA  15-&COND
.TYPEOK  ANOP
&COND    SETA  &COND*16
         AIF   (&EXEC AND &LIST AND NOT &RMF).MFEL
         AIF   (&EXEC AND &LIST AND &RMF).ERR3
         AIF   (&EXEC AND &RMF AND NOT &LIST).MFER
         AIF   (&LIST AND &RMF AND NOT &EXEC).MFER
         AIF   (&LIST AND NOT &RMF AND NOT &EXEC).MFL
         AGO   .ERR2
.* EXECUTE FORM OF MACRO *
.MFEL    ANOP
&LABEL   DS    0H
         AIF   ('&P1' EQ '*').MFEL1
         LA    1,&P1A                  GET QHEAD PARAMETER
         ST    1,P&SYSNDX+0            PARM1 INTO PARAMETER LIST
.MFEL1   ANOP
         AIF   ('&P2' EQ '*').MFEL2
         AIF   ('&P2A' EQ '&P1A').MFEL1$
         LA    1,&P2A                  GET QENTRY/QHEAD2 PARM
.MFEL1$  ANOP
         ST    1,P&SYSNDX+4            PARM2 INTO PLIST
.MFEL2   ANOP
         AIF   ('&P3' EQ '*').MFEL3
         AIF   ('&P3A' EQ '&P2A' AND NOT &SRCH).MFEL2$
         LA    1,&P3A
         AIF   (NOT &SRCH).MFEL2$
         SLL   1,8                     MAKE ROOM FOR CONDITION FLAGS
         LA    0,&COND                 GET CONDITION FLAGS
         OR    1,0                     PUT THEM IN REGISTER
.MFEL2$  ANOP
         STCM  1,B'0011',P&SYSNDX+8    PARM3 INTO PLIST
.MFEL3   ANOP
         AIF   ('&P4'  EQ '*').MFEL4
         AIF   ('&P4A' EQ '&P3A').MFEL3$
         LA    1,&P4A
.MFEL3$  ANOP
         STH   1,P&SYSNDX+10           P4 INTO PLIST
.MFEL4   ANOP
         BAL   1,X&SYSNDX              LOAD PARM REGISTER
P&SYSNDX DC    A(0,0,0)                THREE WORD PARAMETER LIST
X&SYSNDX EQU   *                       SKIP DEFINE CONSTANTS
         AGO   .MFEXEC
.MFER    ANOP
         LA    1,&PLIST                POINT AT PARAMETER LIST
         LA    15,&P1A                 GET QHEAD PARAMETER
         ST    15,0(,1)                PARM1 INTO PLIST
.MFER1   ANOP
         AIF   ('&P2' EQ '*').MFER2
         AIF   ('&P2A' EQ '&P1A').MFER1$
         LA    15,&P2A                 GET QENTRY/QHEAD2 PARAMETER
.MFER1$  ANOP
         ST    15,4(,1)                PARM2 INTO PLIST
.MFER2   ANOP
         AIF   ('&P3' EQ '*').MFER3
         AIF   ('&P3A' EQ '&P2A' AND NOT &SRCH).MFER2$
         LA    15,&P3A
         AIF   (NOT &SRCH).MFER2$
         SLL   15,8                    MAKE ROOM FOR CONDITION FLAGS
         LA    0,&COND                 GET CONDITION FLAGS
         OR    15,0                    PUT FLAGS IN REGISTER
.MFER2$  ANOP
         STCM  15,B'0011',8(1)         PARM3 INTO PLIST
.MFER3   ANOP
         AIF   ('&P4'  EQ '*').MFER4
         AIF   ('&P4A' EQ '&P3A').MFER3$
         LA    15,&P4A
.MFER3$  ANOP
         STH   15,10(,1)               PARM4 INTO PLIST
.MFER4   ANOP
         AIF   (&LIST).EXIT
.MFEXEC  ANOP
         AIF   (T'&POS EQ 'O').MFEXEC0
         AIF   ('&POS' EQ 'NEXT').MFEXEC0
         L     15,0(,1)                GET QHEAD PTR
&POSA    SETC  '0'
         AIF   ('&POS' EQ 'FIRST').MFEXP1
&POSA    SETC  '4(15)'
         AIF   ('&POS' EQ 'LAST').MFEXP2
&POSA    SETC  '&POS'
         AIF   ('&POS'(1,1) NE '(').MFEXP2
&POSA    SETC  '0(,'.'&POS'.')'
.MFEXP1  ANOP
         LA    14,&POSA                LOAD POSITION PARAMETER
         ST    14,12(,15)              SET CURRENT PTR FROM POS PARM
         AGO   .MFEXEC0
.MFEXP2  ANOP
         MVC   12(4,15),&POSA          SET CURRENT PTR FROM POS PARM
.MFEXEC0 ANOP
         AIF   (T'&LOAD EQ 'O').MFEXEC1
&LOADA   SETC  '&LOAD'
         AIF   ('&LOADA'(1,1) NE '(').MFEXEC2
         LR    15,&LOADA               GET ENTRY ADDRESS
         AGO   .MFEXEC3
.MFEXEC1 ANOP
&LOADA   SETC  '=V('.'&EPNAME'.')'
.MFEXEC2 ANOP
         L     15,&LOADA               GET ENTRY ADDRESS
.MFEXEC3 ANOP
         BALR  14,15                   CALL &EPNAME
         AIF   (T'&NORMAL EQ 'O').MFRET1
         AIF   ('&NORMAL'(1,1) EQ '(').MFRET0R
         BZ    &NORMAL                 NORMAL RETURN
         AGO   .MFRET1
.MFRET0R ANOP
         BZR   &NORMAL                 NORMAL RETURN
.MFRET1  ANOP
         AIF   (T'&EMPTY EQ 'O').MFRET2
         AIF   ('&EMPTY'(1,1) EQ '(').MFRET1R
         BL    &EMPTY                  QUEUE EMPTY RETURN
         AGO   .MFRET2
.MFRET1R ANOP
         BLR   &EMPTY                  QUEUE EMPTY RETURN
.MFRET2  ANOP
         AIF   (T'&NFOUND EQ 'O').MFRET3
         AIF   ('&NFOUND'(1,1) EQ '(').MFRET2R
         BH    &NFOUND                 NOT FOUND RETURN
         AGO   .MFRET3
.MFRET2R ANOP
         BHR   &NFOUND                 NOT FOUND RETURN
.MFRET3  ANOP
         AIF   (T'&SERROR EQ 'O').MFRET4
         AIF   ('&SERROR'(1,1) EQ '(').MFRET3R
         BO    &SERROR                 SEVERE ERROR
         AGO   .MFRET4
.MFRET3R ANOP
         BOR   &SERROR                 SEVERE ERROR
.MFRET4  ANOP
         AIF   (T'&ERROR EQ 'O').MFEDONE
         AIF   ('&LOADA'(1,1) EQ '(').MFRET4R
         BNZ   &ERROR                  ERROR RETURN
         AGO   .MFEDONE
.MFRET4R ANOP
         BNZR  &ERROR                  ERROR RETURN
.MFEDONE ANOP
         AGO   .EXIT
.* LIST ONLY FORM OF MACRO *
.MFL     ANOP
         SPACE ,
&LABEL   DS    0A
         DC    A(0,0,0)                THREE WORD PARAMETER LIST
         AGO   .EXIT
.ERR1    ANOP
         MNOTE 8,'MF PARAMETER NOT EQUAL TO ''E'' OR ''I'''
         AGO   .EXIT
.ERR2    ANOP
         MNOTE 8,'UNRECOGNIZED OR INVALID MF PARAMETERS'
         AGO   .EXIT
.ERR3    ANOP
         MNOTE 8,'NOT READY FOR LIST ADDRESS'
         AGO   .EXIT
.ERR4    ANOP
         MNOTE 8,'MISSING OR INVALID ''TYPE'' PARAMETER'
         AGO   .EXIT
.ERRCHK1 ANOP
         MNOTE 8,'QUEUE HEAD PTR (PARM1) IS REQUIRED FOR TYPE=&TYPE'
         AGO   .EXIT
.ERRCHK2 ANOP
         MNOTE 8,'QUEUE ELMT PTR (PARM2) IS REQUIRED FOR TYPE=&TYPE'
         AGO   .EXIT
.ERRCHK3 ANOP
         MNOTE 8,'LENGTH (PARM3) IS REQUIRED FOR TYPE=&TYPE'
         AGO   .EXIT
.ERRCHK4 ANOP
         AIF   ('&TYPE' EQ 'BUILD').ERRC4A
         MNOTE 8,'OFFSET (PARM4) IS REQUIRED FOR TYPE=&TYPE'
         AGO   .EXIT
.ERRC4A  ANOP
         MNOTE 8,'STORAGE-TYPE FLAG (PARM4) IS REQUIRED FOR TYPE=BUILD'
         AGO   .EXIT
.ERRCHK5 ANOP
         MNOTE 8,'INVALID CONDITION PAARAMETER &P5, VALID CONDITIONS ARX
               E ''EQ,NE,LT,LE,GT,GE' ''
         AGO   .EXIT
.EXIT    ANOP
         MEND


PSWD MACRO

         MACRO
&LABEL   PSWD  &PREFIX=PSWD
         LCLC  &P,&LAB
&LAB     SETC  'PSWD'
         AIF   (T'&LABEL EQ 'O').LABCONT
&LAB     SETC  '&LABEL'
.LABCONT ANOP
&P       SETC  '&PREFIX'
* PROGRAM STATUS WORD DSECT (BC MODE)                                 *
&LAB     DSECT
&P.PSW   DS    0D                      START OF PSW
&P.MASK  DS    X                       CHANNEL + EXTERNAL MASKS
&P.CM0   EQU   X'80'                   MASK FOR CHANNEL 0
&P.CM1   EQU   X'40'                   MASK FOR CHANNEL 1
&P.CM2   EQU   X'20'                   MASK FOR CHANNEL 2
&P.CM3   EQU   X'10'                   MASK FOR CHANNEL 3
&P.CM4   EQU   X'08'                   MASK FOR CHANNEL 4
&P.CM5   EQU   X'04'                   MASK FOR CHANNEL 5
&P.CM6   EQU   X'02'                   MASK FOR CHANNEL 6
&P.EM    EQU   X'01'                   EXTERNAL MASK
&P.KEY   DS    X                       PSW KEY
&P.PK    EQU   X'F0'                   PSW KEY BITS
&P.BCM   EQU   X'08'                   BC MODE = 0
&P.MC    EQU   X'04'                   MACHINE CHECK MASK
&P.WT    EQU   X'02'                   WAIT BIT
&P.PRB   EQU   X'01'                   PROBLEM STATE BIT
&P.ICOD  DS    XL2                     INTERRUPTION CODE
&P.ADDR  DS    0A                      ALIGNED INSTRUCTION ADDRESS
&P.FLAG  DS    X                       MISC FLAGS
&P.ILC   EQU   X'C0'                   INSTRUCTION LENGTH CODE
&P.CC    EQU   X'30'                   CONDITION CODE
&P.PMSK  EQU   X'0F'                   PROGRAM MASK
&P.IADR  DS    AL3                     INSTRUCTION ADDRESS
&P.LEN   EQU   8                       LENGTH OF PSW
         SPACE
         MEND


QENTRY MACRO

         MACRO
&LABEL   QENTRY &DSECT=YES,&PREFIX=QE,&BODY=NO
.* QUEUE ENTRY CONTROL BLOCK
         LCLC  &LAB,&PR
&LAB     SETC  '&LABEL'
         AIF   ('&LAB' NE '').LABYES
&LAB     SETC  '&PREFIX'.'NTRY'
.LABYES  ANOP
&PR      SETC  '&PREFIX'
         AIF   ('&DSECT' NE 'YES').NODSECT
&LAB     DSECT
         AGO   .START
.NODSECT ANOP
&LAB     DS    0A
.START   ANOP
&PR.NEXT DC    A(0)                    POINTER TO NEXT ELEMENT IN QUEUE
&PR.LAST DS    0A                      PTR TO LAST ELEMENT IN DBL LISTS
&PR.HEAD DC    A(0)                    PTR TO QHEAD FOR THIS ELMT
&PR.LEN  DC    H'0'                    LENGTH OF THIS QUEUE ELEMENT
&PR.TYPE DC    X'00'                   QUEUE ELEMENT TYPE
&PR.FLAG DC    X'00'                   FLAG BYTE
&PR.NUC  EQU   X'80'                   STORAGE IS NUCLEUS TYPE
&PR.BLD  EQU   X'40'                   ENTRY WAS BUILT BY QBUILD
&PR.HLEN EQU   *-&PR.NEXT
&PR.DATA DS    0A                      START OF DATA SECTION
&PR.DOFF EQU   *-&LAB                  OFFSET TO DATA SECTION
         AIF   ('&BODY' EQ 'NO').EXIT
         DS    XL(&BODY)
&PR.QEND DS    0D                      END OF LONGEST SECTION
&PR.QLEN EQU   &PR.QEND-&PR.NEXT       TOTAL LENGTH OF ALL SECTIONS
.EXIT    ANOP
         MEND


QHEAD MACRO

         MACRO
&LABEL   QHEAD &DSECT=YES,&PREFIX=QH
.* QUEUE HEAD DESCRIPTOR CONTROL BLOCK
         LCLC  &LAB,&PR
&LAB     SETC  '&LABEL'
         AIF   ('&LAB' NE '').LABYES
&LAB     SETC  '&PREFIX'.'DESC'
.LABYES  ANOP
&PR      SETC  '&PREFIX'
         AIF   ('&DSECT' EQ 'YES').DSECT
.NODSECT ANOP
&LAB     DC    A(0)                    POINTER TO FIRST QUEUE ELEMENT
         DC    A(*-4)                  POINTER TO LAST QUEUE ELEMENT
         DC    A(0)                    COUNT OF QUEUE ELEMENTS
         DC    A(0)                    CURRENT QUEUE ELEMENT
         AGO   .EXIT
.DSECT   ANOP
&LAB     DSECT
&PR.HEAD DS    A                       POINTER TO FIRST QUEUE ELEMENT
&PR.TAIL DS    A                       POINTER TO LAST QUEUE ELEMENT
&PR.CNT  DS    H                       COUNT OF QUEUE ELEMENTS
&PR.MASK DS    X                       SYSTEM MASK WORK AREA
&PR.RESV DS    X                       RESERVED
&PR.CURR DS    A                       CURRENT QUEUE ELEMENT
&PR.END  DS    0D
&PR.LEN  EQU   &PR.END-&PR.HEAD        LENGTH OF QUEUE HEAD DESCRIPTOR
&PR.DLEN EQU   &PR.LEN/8               LENGTH IN DOUBLE WORDS
         SPACE ,
.EXIT    ANOP
         MEND


QPLIST MACRO

         MACRO
&LABEL   QPLIST &DSECT=YES,&PREFIX=QP
.* QUEUE MAINTENANCE PARAMETER CONTROL BLOCK
         LCLC  &LAB,&PR
&LAB     SETC  '&LABEL'
         AIF   ('&LAB' NE '').LABYES
&LAB     SETC  '&PREFIX'.'LIST'
.LABYES  ANOP
&PR      SETC  '&PREFIX'
         AIF   ('&DSECT' NE 'YES').NODSECT
&LAB     DSECT
         AGO   .START
.NODSECT ANOP
&LAB     DS    0A
.START   ANOP
&PR.HEAD DC    A(0)                    QUEUE HEADER POINTER
&PR.HDR2 DS    0A                      SECOND QUEUE HEADER POINTER
&PR.ELMT DC    A(0)                    POINTER TO QUEUE ELEMENT
&PR.CNT  DS    0A                      ELEMENT COUNT
&PR.LEN  DS    0H                      LENGTH FOR BUILD
&PR.LEN1 DC    AL1(0)                  LENGTH FOR FIND
&PR.MASK DC    AL1(0)                  MASK FOR COMPARE
&PR.OFF  DC    Y(0)                    OFFSET FOR FIND
         SPACE ,
         MEND

This article will be concluded next month.

Michael L Brocious and Dennis Hoover
Shared Medical Systems Corporation (USA)

