Problems with VM/VTAM

The December 1989 issue of VM Update shows that there are
many users who have problems with VM/VTAM sending
messages only to its secondary user (usually OPERATOR).
We also had this problem.  Whenever somebody from the
network group wanted to do something to the network it had to
be done in the computer room at the operator's terminal.

I came up with the following solution for this.  A new
VM/CMS machine, called VTAMSRVC, became VTAM's
secondary user instead of OPERATOR. This VTAM service
machine is logged on as the network console in the computer
room.  In this machine an EXEC called WACHT is active and
waiting to be woken by the VTAM EXEC which sends an
SMSG.  In the WACHT EXEC is a small table with user-ids
that are authorized to give certain VTAM commands.  When
authorization is OK, VTAMSRVC passes the command to
VTAM via the EXECs VV, DD, and ZZ which reside on
VTAMSRVC's 191.  The results of these commands are sent as
a console file to the user who submitted it.  The user's console
appears to be VTAM's secondary console.

If the V, D, and Z EXECs are placed on VTAMSRVC's 191,
you can let VTAMSRVC act as a normal secondary user from
VTAM by entering STOP on the VTAMSRVC's console.  This
ends the WACHT EXEC.  It can be restarted by typing
PROFILE

Figure 1 shows an example of the screen output from the
following command:

    vtam d net,id=ncp1

The following procedures have run on an IBM 4381-R14 with
VM/HPO 5.0 and VTAM 3.1.2

WACHT EXEC

/* VTAMSRVC                    */
/* this EXEC reacts on wakeup SMSG       */
do forever                                     /* never ending story */
     'wakeup (smsg'
     parse upper pull smsg wie opdracht          /* see who's asking */
     com = subword(opdracht,1,1)                /* with what command */
     select
     when smsg = 'STOP' then exit
     when (wie = 'OPERATOR' & com ='D') |,            /* these users */
          (wie = 'USER2'    & com ='D') |,            /* may display */
          (wie = 'USER3'    & com ='D') |,              /* something */
          (wie = 'HERMSEN'  & com ='D') |,
          (wie = 'USERETC'  & com ='D')
     then 'EXEC DD' wie opdracht
     when (wie = 'OPERATOR' & com ='V') |,            /* these users */
          (wie = 'USER2'    & com ='V') |,            /* may change  */
          (wie = 'USER3'    & com ='V') |,              /* something */
          (wie = 'HERMSEN'  & com ='V') |,
          (wie = 'USERETC'  & com ='V')
     then 'EXEC VV' wie opdracht
     when (wie = 'OPERATOR' & com ='Z')
                                /* this user may shutdown the network */
          then 'EXEC ZZ' wie opdracht
          otherwise tell wie 'you are not authorized for to use' ,
                                                    opdracht 'command'
          end
     end

DD EXEC

/* VTAMSRVC                       */
/* this exec sends the D command         */
parse arg wie opdracht
'CP SP CONS START TO' wie
'CP SEND VTAMVM81 VTAM' opdracht
'CP SLEEP 3 SEC'
'CP SPOOL CONS STOP CLOSE'
'CLRSCRN'

VV EXEC

/* VTAMSRVC                       */
/* this exec sends the V command         */
parse arg wie opdracht
'CP SP CONS START TO' wie
'CP SEND VTAMVM81 VTAM' opdracht
'CP SLEEP 3 SEC'
'CP SPOOL CONS STOP CLOSE'
'CLRSCRN'

ZZ EXEC

/* VTAMSRVC                       */
/* this exec sends the Z command         */
parse arg wie opdracht
'CP SP CONS START TO' wie
'CP SEND VTAMVM81 VTAM' opdracht
'CP SLEEP 3 SEC'
'CP SPOOL CONS STOP CLOSE'
'CLRSCRN'

D EXEC

/* VTAMSRVC                        */
/* this exec sends the D command         */
/* when VTAMSRVC is inactive             */
parse arg opdracht
'CP SEND VTAMVM81 VTAM D' opdracht

V EXEC

/* VTAMSRVC                        */
/* this exec sends the V command         */
/* when VTAMSRVC is inactive             */
parse arg opdracht
'CP SEND VTAMVM81 VTAM V' opdracht

Z EXEC

/* VTAMSRVC                        */
/* this exec sends the Z command         */
/* when VTAMSRVC is inactive             */
parse arg opdracht
'CP SEND VTAMVM81 VTAM Z' opdracht

VTAM EXEC

/* VTAM-secondary user simulation        */
/* syntax:  VTAM  vtam command           */
/* see if there's something in your RDR  */
trace n
hi = '1de8'X
lo = '1d60'X
say hi copies('-',80) lo                        /* display 80 dashes */
'Q RDR * ALL (STACK'                         /* stack your rdr files */
if queued() Â¬= 1
then do
     parse pull .                                     /* take header */
     do until queued() = 0                          /* take the rest */
        parse pull . file . . . . . . . dist
        if dist = 'VTAMSRVC'
        then 'PUR RDR' file                    /* purge the old ones */
        else reader = 'GEVULD'
        end                                          /* end do until */
     end                                              /* end then do */
else 'DESBUF'                                     /* clear the stack */
/* send command to VTAMSRVC              */
parse upper arg tekst                     /* see what the command is */
'SM VTAMSRVC' tekst                       /* and send it to VTAMSRVC */
/* receive VTAMSRVC console file         */
take_file:
if reader = 'GEVULD'
then 'SLEEP 5 SEC'                         /* wait until the file is */
'WAKEUP (RDR'                                         /* in your rdr */
'ORDER RDR CL T'                           /* only the console files */
'Q RDR * ALL CL T (STACK'                        /* if there are any */
if queued() > 1                                    /* then take them */
then do until queued() = 0
     parse pull . file . . . . . . . dist
     if dist = 'VTAMSRVC'                  /* but only from VTAMSRVC */
     then 'RECEIVE' file 'VTAMSRVC FILE A (REPL NOL'
     end                                             /* end do until */
else signal take_file                       /* see if there are more */
/* read VTAMSRVC FILE                    */
'EXECIO * DISKR VTAMSRVC FILE A'                          /* read it */
do index = 1 to queued()                           /* and display it */
   parse pull regel.index
   regel.index = strip(regel.index)
   say hi regel.index lo                          /* on your console */
   end                                                     /* end do */
say hi copies('-',80) lo                        /* display 80 dashes */
'ERASE VTAMSRVC FILE A'                         /* and throw it away */


Joop Hermsen
Senior Systems Programmer
VNU Dagbladengroep BV (Netherlands)


